void sub_20EA86254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  uint64_t v47;

  if (a47)
  {
    if (a46 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v47 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA862D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  uint64_t v44;

  if (*(_BYTE *)(v44 - 216) && *(char *)(v44 - 217) < 0)
    operator delete(*(void **)(v44 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  if (a43 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a44);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_20EA8630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_20E86E8C4(&a29);
  sub_20E86E8C4(&a19);
  sub_20E86E658((uint64_t)&a41);
  sub_20E863714(v41 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA86338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_20E86E658((uint64_t)&a41);
  sub_20E863714(v41 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA86354(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714(v2 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA86380(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA86394(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA863A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;

  if (a48 && a47 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v48 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA863E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA863F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;

  if (a48 && a47 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v48 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA8642C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA86440(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA86454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  uint64_t v44;

  sub_20E86E8C4(&a19);
  sub_20E86E8C4((uint64_t *)&STACK[0x228]);
  sub_20E86E658(v44 - 240);
  sub_20E863714((uint64_t)&a29);
  if (a43 < 0)
  {
    operator delete(a38);
    sub_20E863784((uint64_t)&a44);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA866C4);
}

void sub_20EA8647C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  int v42;

  if (v42 < 0)
    operator delete(v41);
  sub_20E86E658((uint64_t)&a19);
  sub_20E863714((uint64_t)&a29);
  if (SHIBYTE(a40) < 0)
  {
    operator delete(a38);
    sub_20E863784((uint64_t)&a41);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EA86598(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA865AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;

  if (a48 && a47 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v48 - 240);
  _Unwind_Resume(a1);
}

void sub_20EA865F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a44);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_20EA8662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20E863784((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EA86640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  sub_20E863714(&a29);
  if (a43 < 0)
  {
    operator delete(a38);
    sub_20E863784(&a44);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA866C4);
}

void sub_20EA8664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  uint64_t v44;
  void *v46;

  if (*(_BYTE *)(v44 - 208) && *(char *)(v44 - 209) < 0)
    operator delete(*(void **)(v44 - 232));
  v46 = *(void **)(v44 - 240);
  if (v46)
    os_release(v46);
  sub_20E863714((uint64_t)&a29);
  if (a43 < 0)
  {
    operator delete(a38);
    sub_20E863784((uint64_t)&a44);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA866C4);
}

void sub_20EA866A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EA866B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E877A60((uint64_t)&a29);
  JUMPOUT(0x20EA866C4);
}

void sub_20EA866E4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AD40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD40))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.calibration");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AD38);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AD40);
  }
  *a1 = qword_254A5AD38;
}

void sub_20EA86780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AD40);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AD40);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA867D8(uint64_t a1, double *a2, double *a3)
{
  uint64_t result;
  char v6;
  char *v7;
  __int128 v8;
  int v9;
  _QWORD v10[5];
  _QWORD *v11;

  v9 = -1;
  v7 = (char *)operator new(0x68uLL);
  v8 = xmmword_210312DD0;
  strcpy(v7, "The camera intrinsics calculated according to the APS model do not match the default intrinsics: ");
  v9 = 1;
  sub_20E8F6238((uint64_t)&v6, (uint64_t)&v7, a2);
  v10[0] = &v7;
  v10[1] = " vs ";
  v10[2] = &v7;
  v10[3] = " vs ";
  v10[4] = " vs ";
  if (v9 == -1)
    sub_20E877AB8();
  v11 = v10;
  ((void (*)(_QWORD **, char **))off_24C9C16B8[v9])(&v11, &v7);
  sub_20E8F6238((uint64_t)v10, (uint64_t)&v7, a3);
  if (v9 == -1)
    sub_20E877AB8();
  v10[0] = &v11;
  result = ((uint64_t (*)(_QWORD *, char **))off_24C9C16A0[v9])(v10, &v7);
  if (v9 != -1)
    return ((uint64_t (*)(_QWORD *, char **))off_24C9C1640[v9])(v10, &v7);
  return result;
}

void sub_20EA86928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA8693C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA86950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA86964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA86978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA8698C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  std::string *v62;
  std::string::size_type v63;
  unsigned __int8 v65;
  std::string __p;

  v4 = sub_20E86A980(a1, (uint64_t)"CameraIntrinsicsData: [", 23);
  sub_20E86A980(v4, (uint64_t)"Image Width: ", 13);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = sub_20E86A980(v5, (uint64_t)"; ", 2);
  sub_20E86A980(v6, (uint64_t)"Image Height: ", 14);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = sub_20E86A980(v7, (uint64_t)"; ", 2);
  v9 = sub_20E86A980(v8, (uint64_t)"Lens Type: ", 11);
  v65 = *(_DWORD *)(a2 + 8);
  sub_20E9E7014(&v65);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = sub_20E86A980(v9, (uint64_t)p_p, size);
  v13 = sub_20E86A980(v12, (uint64_t)"; ", 2);
  v14 = sub_20E86A980(v13, (uint64_t)"Radial Distortion: ", 19);
  v16 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  sub_20E86A980(v14, (uint64_t)"{", 1);
  if ((unint64_t)(v15 - v16) >= 9)
  {
    v17 = ((v15 - v16) >> 3) - 1;
    v18 = v16;
    do
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v19, (uint64_t)", ", 2);
      v18 += 8;
      --v17;
    }
    while (v17);
  }
  v20 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v20, (uint64_t)"}", 1);
  v21 = sub_20E86A980(v14, (uint64_t)"; ", 2);
  v22 = sub_20E86A980(v21, (uint64_t)"Tangential Distortion: ", 23);
  sub_20E86A980(v22, (uint64_t)"{", 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v23, (uint64_t)", ", 2);
  v24 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v24, (uint64_t)"}", 1);
  v25 = sub_20E86A980(v22, (uint64_t)"; ", 2);
  v26 = sub_20E86A980(v25, (uint64_t)"Lens Offset: ", 13);
  sub_20E86A980(v26, (uint64_t)"{", 1);
  v27 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v27, (uint64_t)", ", 2);
  v28 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v28, (uint64_t)"}", 1);
  v29 = sub_20E86A980(v26, (uint64_t)"; ", 2);
  v30 = sub_20E86A980(v29, (uint64_t)"Chip Offset: ", 13);
  sub_20E86A980(v30, (uint64_t)"{", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v31, (uint64_t)", ", 2);
  v32 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v32, (uint64_t)"}", 1);
  v33 = sub_20E86A980(v30, (uint64_t)"; ", 2);
  v34 = sub_20E86A980(v33, (uint64_t)"Camera Matrix: ", 15);
  sub_20E86A980(v34, (uint64_t)"{", 1);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v35, (uint64_t)", ", 2);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v36, (uint64_t)", ", 2);
  v37 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v37, (uint64_t)", ", 2);
  v38 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v38, (uint64_t)", ", 2);
  v39 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v39, (uint64_t)", ", 2);
  v40 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v40, (uint64_t)", ", 2);
  v41 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v41, (uint64_t)", ", 2);
  v42 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v42, (uint64_t)", ", 2);
  v43 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v43, (uint64_t)"}", 1);
  v44 = sub_20E86A980(v34, (uint64_t)"; ", 2);
  sub_20E86A980(v44, (uint64_t)"Average Focal Length: ", 22);
  v45 = (_QWORD *)std::ostream::operator<<();
  v46 = sub_20E86A980(v45, (uint64_t)"; ", 2);
  v47 = sub_20E86A980(v46, (uint64_t)"distortion_center_: ", 20);
  sub_20E86A980(v47, (uint64_t)"{", 1);
  v48 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v48, (uint64_t)", ", 2);
  v49 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v49, (uint64_t)"}", 1);
  v50 = sub_20E86A980(v47, (uint64_t)"; ", 2);
  v51 = sub_20E86A980(v50, (uint64_t)"R_camera_to_external_lens_: ", 28);
  sub_20E86A980(v51, (uint64_t)"{", 1);
  v52 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v52, (uint64_t)", ", 2);
  v53 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v53, (uint64_t)", ", 2);
  v54 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v54, (uint64_t)", ", 2);
  v55 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v55, (uint64_t)", ", 2);
  v56 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v56, (uint64_t)", ", 2);
  v57 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v57, (uint64_t)", ", 2);
  v58 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v58, (uint64_t)", ", 2);
  v59 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v59, (uint64_t)", ", 2);
  v60 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v60, (uint64_t)"}", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a2 + 184))
      goto LABEL_22;
  }
  else if (!*(_QWORD *)(a2 + 184))
  {
    goto LABEL_22;
  }
  v61 = sub_20E86A980(a1, (uint64_t)"; ", 2);
  sub_20EB2087C(*(_DWORD **)(a2 + 184), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &__p;
  else
    v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v63 = __p.__r_.__value_.__l.__size_;
  sub_20E86A980(v61, (uint64_t)v62, v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_22:
  sub_20E86A980(a1, (uint64_t)"]", 1);
  return a1;
}

void sub_20EA87008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA87044(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _OWORD *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  uint64_t v59;
  void *__p[2];
  unsigned __int8 v62;
  __int128 v63;

  v4 = sub_20E86A980(a1, (uint64_t)"CameraCalibrationData: [", 24);
  v5 = sub_20EA8698C(v4, a2);
  v6 = sub_20E86A980(v5, (uint64_t)"; ", 2);
  v7 = sub_20E86A980(v6, (uint64_t)"Camera to IMU Position: ", 24);
  sub_20E86A980(v7, (uint64_t)"{", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)", ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v9, (uint64_t)", ", 2);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v10, (uint64_t)"}", 1);
  v11 = sub_20E86A980(v7, (uint64_t)"; ", 2);
  v12 = sub_20E86A980(v11, (uint64_t)"Camera to IMU Rotation: ", 24);
  sub_20E86A980(v12, (uint64_t)"{", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v13, (uint64_t)", ", 2);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v14, (uint64_t)", ", 2);
  v15 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v15, (uint64_t)", ", 2);
  v16 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v16, (uint64_t)", ", 2);
  v17 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v17, (uint64_t)", ", 2);
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v18, (uint64_t)", ", 2);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v19, (uint64_t)", ", 2);
  v20 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v20, (uint64_t)", ", 2);
  v21 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v21, (uint64_t)"}", 1);
  v22 = sub_20E86A980(v12, (uint64_t)"; ", 2);
  sub_20E86A980(v22, (uint64_t)"Timestamp correction: ", 22);
  v23 = (_QWORD *)std::ostream::operator<<();
  v24 = sub_20E86A980(v23, (uint64_t)"; ", 2);
  sub_20E86A980(v24, (uint64_t)"Readout time: ", 14);
  v25 = (_QWORD *)std::ostream::operator<<();
  v26 = sub_20E86A980(v25, (uint64_t)"; ", 2);
  sub_20E86A980(v26, (uint64_t)"enable_point_cloud_enrichment_and_disparity_fraction_adjust: ", 61);
  v27 = (_QWORD *)std::ostream::operator<<();
  v28 = sub_20E86A980(v27, (uint64_t)"; ", 2);
  sub_20E86A980(v28, (uint64_t)"always_use_default_intrinsics: ", 31);
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = sub_20E86A980(v29, (uint64_t)"; ", 2);
  sub_20E86A980(v30, (uint64_t)"scene_distance_: ", 17);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = sub_20E86A980(v31, (uint64_t)"; ", 2);
  sub_20E86A980(v32, (uint64_t)"max_focal_length_scale_change_: ", 32);
  v33 = (_QWORD *)std::ostream::operator<<();
  v34 = sub_20E86A980(v33, (uint64_t)"; ", 2);
  sub_20E86A980(v34, (uint64_t)"always_use_per_frame_intrinsics: ", 33);
  std::ostream::operator<<();
  if (*(_BYTE *)(a2 + 432))
  {
    v35 = sub_20E86A980(a1, (uint64_t)"; ", 2);
    if (!*(_BYTE *)(a2 + 432))
      goto LABEL_41;
    v36 = sub_20E86A980(v35, (uint64_t)"Temperature model: [", 20);
    sub_20E86A980(v36, (uint64_t)"Gradient: ", 10);
    v37 = (_QWORD *)std::ostream::operator<<();
    v38 = sub_20E86A980(v37, (uint64_t)"; ", 2);
    sub_20E86A980(v38, (uint64_t)"Offset: ", 8);
    v39 = (_QWORD *)std::ostream::operator<<();
    v40 = sub_20E86A980(v39, (uint64_t)"; ", 2);
    sub_20E86A980(v40, (uint64_t)"Aspect Ratio: ", 14);
    v41 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v41, (uint64_t)"]", 1);
  }
  if (!*(_BYTE *)(a2 + 488))
    goto LABEL_7;
  v42 = sub_20E86A980(a1, (uint64_t)"; ", 2);
  if (!*(_BYTE *)(a2 + 488))
LABEL_41:
    sub_20E866B34();
  sub_20EB847A8(v42);
LABEL_7:
  v43 = (_OWORD *)(a2 + 504);
  if (!*(_QWORD *)(a2 + 504))
  {
    sub_20EA77624();
    v44 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v45 = *(std::__shared_weak_count **)(a2 + 512);
    *v43 = v44;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(p_shared_owners);
      while (__stlxr(v47 - 1, p_shared_owners));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (!__p[1])
      goto LABEL_17;
    v48 = (unint64_t *)((char *)__p[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
      if (!*(_QWORD *)v43)
        goto LABEL_38;
    }
    else
    {
LABEL_17:
      if (!*(_QWORD *)v43)
        goto LABEL_38;
    }
  }
  v50 = sub_20E86A980(a1, (uint64_t)"; ", 2);
  v51 = *(_QWORD *)v43;
  if (!*(_QWORD *)v43)
  {
    sub_20EA77624();
    v52 = v63;
    v63 = 0uLL;
    v53 = *(std::__shared_weak_count **)(a2 + 512);
    *v43 = v52;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (*((_QWORD *)&v63 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v63 + 1) + 16))(*((_QWORD *)&v63 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
      }
    }
    v51 = *(_QWORD *)v43;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v51 + 32))(__p);
  if ((v62 & 0x80u) == 0)
    v58 = __p;
  else
    v58 = (void **)__p[0];
  if ((v62 & 0x80u) == 0)
    v59 = v62;
  else
    v59 = (uint64_t)__p[1];
  sub_20E86A980(v50, (uint64_t)v58, v59);
  if ((char)v62 < 0)
    operator delete(__p[0]);
LABEL_38:
  sub_20E86A980(a1, (uint64_t)"]", 1);
  return a1;
}

void sub_20EA875BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA875D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  void *__p[2];
  char v31;
  _BYTE v32[24];
  int v33;
  char v34;
  char *v35;

  v4 = sub_20E86A980(a1, (uint64_t)"JasperCalibrationData: [", 24);
  v5 = sub_20EA8698C(v4, a2);
  v6 = sub_20E86A980(v5, (uint64_t)"; ", 2);
  v7 = sub_20E86A980(v6, (uint64_t)"IMU to Jasper coordinates: ", 27);
  sub_20E86A980(v7, (uint64_t)"{", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)", ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v9, (uint64_t)", ", 2);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v10, (uint64_t)", ", 2);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v11, (uint64_t)", ", 2);
  v12 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v12, (uint64_t)", ", 2);
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v13, (uint64_t)", ", 2);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v14, (uint64_t)", ", 2);
  v15 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v15, (uint64_t)", ", 2);
  v16 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v16, (uint64_t)", ", 2);
  v17 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v17, (uint64_t)", ", 2);
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v18, (uint64_t)", ", 2);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v19, (uint64_t)"}", 1);
  v20 = sub_20E86A980(v7, (uint64_t)"; ", 2);
  sub_20E86A980(v20, (uint64_t)"Is Pdot: ", 9);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = sub_20E86A980(v21, (uint64_t)"; ", 2);
  v23 = sub_20E86A980(v22, (uint64_t)"Timestamp correction: ", 22);
  if (*(_BYTE *)(a2 + 392))
  {
    v33 = 0;
    sub_20E87876C((uint64_t)&v35, (uint64_t)v32, (double *)(a2 + 384));
    if (v33 == -1)
      sub_20E877AB8();
    v35 = &v34;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C9C16A0[v33])(__p, &v35, v32);
    if (v33 != -1)
      ((void (*)(char **, _BYTE *))off_24C9C1640[v33])(&v35, v32);
    v24 = v31;
    v25 = (uint64_t)__p[1];
  }
  else
  {
    v24 = 4;
    v31 = 4;
    v25 = 1701736270;
    strcpy((char *)__p, "None");
  }
  if ((v24 & 0x80u) == 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v27 = v24;
  else
    v27 = v25;
  v28 = sub_20E86A980(v23, (uint64_t)v26, v27);
  sub_20E86A980(v28, (uint64_t)"]", 1);
  if (v31 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20EA878BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA878D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA878F0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  void **v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  int v122;
  size_t v123;
  void **v124;
  unint64_t v125;
  unint64_t v126;
  const void *v127;
  uint64_t v128;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void **v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v138;
  void *__p[2];
  unsigned __int8 v140;
  void *v141[2];
  unsigned __int8 v142;
  void *v143[2];
  unsigned __int8 v144;
  _QWORD v145[3];
  int v146;
  void *__dst[2];
  unint64_t v148;
  void **v149;
  const char *v150;
  _QWORD *v151;
  const char *v152;
  const char *v153;
  void ***v154;

  v4 = sub_20E86A980(a1, (uint64_t)"IMUCalibrationData: [", 21);
  v5 = sub_20E86A980(v4, (uint64_t)"IMU Noise Characteristics: ", 27);
  sub_20E86A980(v5, (uint64_t)"{", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v6, (uint64_t)", ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v7, (uint64_t)", ", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)", ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v9, (uint64_t)"}", 1);
  v10 = sub_20E86A980(v5, (uint64_t)"; ", 2);
  v11 = sub_20E86A980(v10, (uint64_t)"Gravity vector: ", 16);
  sub_20E86A980(v11, (uint64_t)"{", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v12, (uint64_t)", ", 2);
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v13, (uint64_t)", ", 2);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v14, (uint64_t)"}", 1);
  v15 = sub_20E86A980(v11, (uint64_t)"; ", 2);
  sub_20E86A980(v15, (uint64_t)"Accelerometer time offset: ", 27);
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = sub_20E86A980(v16, (uint64_t)"; ", 2);
  sub_20E86A980(v17, (uint64_t)"IMU delay compensation: ", 24);
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = sub_20E86A980(v18, (uint64_t)"; ", 2);
  sub_20E86A980(v19, (uint64_t)"Max camera to IMU offset: ", 26);
  v20 = (_QWORD *)std::ostream::operator<<();
  v21 = sub_20E86A980(v20, (uint64_t)"; ", 2);
  v22 = sub_20E86A980(v21, (uint64_t)"Initial gyro scale variance: ", 29);
  LODWORD(v152) = 0;
  if (*(_BYTE *)(a2 + 88))
    sub_20E87876C((uint64_t)v145, (uint64_t)&v149, (double *)(a2 + 80));
  else
    sub_20E9737A0(&v149, "nullopt");
  if ((_DWORD)v152 == -1)
    sub_20E877AB8();
  v145[0] = __dst;
  ((void (*)(void **__return_ptr, _QWORD *, void ***))off_24C9C16A0[v152])(v143, v145, &v149);
  if ((_DWORD)v152 != -1)
    ((void (*)(_QWORD *, void ***))off_24C9C1640[v152])(v145, &v149);
  if ((v144 & 0x80u) == 0)
    v23 = v143;
  else
    v23 = (void **)v143[0];
  if ((v144 & 0x80u) == 0)
    v24 = v144;
  else
    v24 = (uint64_t)v143[1];
  v25 = sub_20E86A980(v22, (uint64_t)v23, v24);
  v26 = sub_20E86A980(v25, (uint64_t)"; ", 2);
  v27 = sub_20E86A980(v26, (uint64_t)"Accelerometer coordinate conversion: ", 37);
  sub_20E86A980(v27, (uint64_t)"{", 1);
  v28 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v28, (uint64_t)", ", 2);
  v29 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v29, (uint64_t)", ", 2);
  v30 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v30, (uint64_t)", ", 2);
  v31 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v31, (uint64_t)", ", 2);
  v32 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v32, (uint64_t)", ", 2);
  v33 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v33, (uint64_t)", ", 2);
  v34 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v34, (uint64_t)", ", 2);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v35, (uint64_t)", ", 2);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v36, (uint64_t)"}", 1);
  v37 = sub_20E86A980(v27, (uint64_t)"; ", 2);
  v38 = sub_20E86A980(v37, (uint64_t)"Gyro coordinate conversion: ", 28);
  sub_20E86A980(v38, (uint64_t)"{", 1);
  v39 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v39, (uint64_t)", ", 2);
  v40 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v40, (uint64_t)", ", 2);
  v41 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v41, (uint64_t)", ", 2);
  v42 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v42, (uint64_t)", ", 2);
  v43 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v43, (uint64_t)", ", 2);
  v44 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v44, (uint64_t)", ", 2);
  v45 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v45, (uint64_t)", ", 2);
  v46 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v46, (uint64_t)", ", 2);
  v47 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v47, (uint64_t)"}", 1);
  v48 = sub_20E86A980(v38, (uint64_t)"; ", 2);
  v49 = sub_20E86A980(v48, (uint64_t)"Accel rotation: ", 16);
  sub_20E86A980(v49, (uint64_t)"{", 1);
  v50 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v50, (uint64_t)", ", 2);
  v51 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v51, (uint64_t)", ", 2);
  v52 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v52, (uint64_t)", ", 2);
  v53 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v53, (uint64_t)", ", 2);
  v54 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v54, (uint64_t)", ", 2);
  v55 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v55, (uint64_t)", ", 2);
  v56 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v56, (uint64_t)", ", 2);
  v57 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v57, (uint64_t)", ", 2);
  v58 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v58, (uint64_t)"}", 1);
  v59 = sub_20E86A980(v49, (uint64_t)"; ", 2);
  v60 = sub_20E86A980(v59, (uint64_t)"Accel intrinsics: ", 18);
  sub_20E86A980(v60, (uint64_t)"{", 1);
  v61 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v61, (uint64_t)", ", 2);
  v62 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v62, (uint64_t)", ", 2);
  v63 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v63, (uint64_t)", ", 2);
  v64 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v64, (uint64_t)", ", 2);
  v65 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v65, (uint64_t)", ", 2);
  v66 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v66, (uint64_t)", ", 2);
  v67 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v67, (uint64_t)", ", 2);
  v68 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v68, (uint64_t)", ", 2);
  v69 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v69, (uint64_t)"}", 1);
  v70 = sub_20E86A980(v60, (uint64_t)"; ", 2);
  v71 = sub_20E86A980(v70, (uint64_t)"Gyro rotation: ", 15);
  sub_20E86A980(v71, (uint64_t)"{", 1);
  v72 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v72, (uint64_t)", ", 2);
  v73 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v73, (uint64_t)", ", 2);
  v74 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v74, (uint64_t)", ", 2);
  v75 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v75, (uint64_t)", ", 2);
  v76 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v76, (uint64_t)", ", 2);
  v77 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v77, (uint64_t)", ", 2);
  v78 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v78, (uint64_t)", ", 2);
  v79 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v79, (uint64_t)", ", 2);
  v80 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v80, (uint64_t)"}", 1);
  v81 = sub_20E86A980(v71, (uint64_t)"; ", 2);
  v82 = sub_20E86A980(v81, (uint64_t)"Gyro intrinsics: ", 17);
  sub_20E86A980(v82, (uint64_t)"{", 1);
  v83 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v83, (uint64_t)", ", 2);
  v84 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v84, (uint64_t)", ", 2);
  v85 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v85, (uint64_t)", ", 2);
  v86 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v86, (uint64_t)", ", 2);
  v87 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v87, (uint64_t)", ", 2);
  v88 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v88, (uint64_t)", ", 2);
  v89 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v89, (uint64_t)", ", 2);
  v90 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v90, (uint64_t)", ", 2);
  v91 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v91, (uint64_t)"}", 1);
  v92 = sub_20E86A980(v82, (uint64_t)"; ", 2);
  v93 = sub_20E86A980(v92, (uint64_t)"GRXN: ", 6);
  v146 = 0;
  sub_20E89FDB0(v145, "{");
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 528));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 536));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 544));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 552));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 560));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 568));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 576));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 584));
  v149 = (void **)v145;
  v150 = ",";
  v151 = v145;
  v152 = ",";
  v153 = ",";
  if (v146 == -1)
    goto LABEL_77;
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  sub_20E87876C((uint64_t)&v149, (uint64_t)v145, (double *)(a2 + 592));
  v149 = (void **)v145;
  v150 = "}";
  v151 = v145;
  v152 = "}";
  v153 = "}";
  if (v146 == -1)
LABEL_77:
    sub_20E877AB8();
  __dst[0] = &v149;
  ((void (*)(void **, _QWORD *))off_24C9C1658[v146])(__dst, v145);
  if (v146 == -1)
    sub_20E877AB8();
  v149 = __dst;
  ((void (*)(void **__return_ptr, void ***, _QWORD *))off_24C9C16A0[v146])(v141, &v149, v145);
  if (v146 != -1)
    ((void (*)(void ***, _QWORD *))off_24C9C1640[v146])(&v149, v145);
  if ((v142 & 0x80u) == 0)
    v94 = v141;
  else
    v94 = (void **)v141[0];
  if ((v142 & 0x80u) == 0)
    v95 = v142;
  else
    v95 = (uint64_t)v141[1];
  v96 = sub_20E86A980(v93, (uint64_t)v94, v95);
  v97 = sub_20E86A980(v96, (uint64_t)"; ", 2);
  v98 = sub_20E86A980(v97, (uint64_t)"Gyro scale: ", 12);
  sub_20E86A980(v98, (uint64_t)"{", 1);
  v99 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v99, (uint64_t)", ", 2);
  v100 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v100, (uint64_t)", ", 2);
  v101 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v101, (uint64_t)"}", 1);
  v102 = sub_20E86A980(v98, (uint64_t)"; ", 2);
  v103 = sub_20E86A980(v102, (uint64_t)"Accel scale: ", 13);
  sub_20E86A980(v103, (uint64_t)"{", 1);
  v104 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v104, (uint64_t)", ", 2);
  v105 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v105, (uint64_t)", ", 2);
  v106 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v106, (uint64_t)"}", 1);
  v107 = sub_20E86A980(v103, (uint64_t)"; ", 2);
  v108 = sub_20E86A980(v107, (uint64_t)"Gyro skewness: ", 15);
  sub_20E86A980(v108, (uint64_t)"{", 1);
  v109 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v109, (uint64_t)", ", 2);
  v110 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v110, (uint64_t)", ", 2);
  v111 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v111, (uint64_t)"}", 1);
  v112 = sub_20E86A980(v108, (uint64_t)"; ", 2);
  v113 = sub_20E86A980(v112, (uint64_t)"Accel skewness: ", 16);
  sub_20E86A980(v113, (uint64_t)"{", 1);
  v114 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v114, (uint64_t)", ", 2);
  v115 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v115, (uint64_t)", ", 2);
  v116 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v116, (uint64_t)"}", 1);
  v117 = sub_20E86A980(v113, (uint64_t)"; ", 2);
  v118 = sub_20E86A980(v117, (uint64_t)"IMU location: ", 14);
  v146 = 0;
  if (!*(_BYTE *)(a2 + 697))
  {
    sub_20E9737A0(v145, "nullopt");
    goto LABEL_59;
  }
  v119 = operator new();
  *(_QWORD *)(v119 + 272) = 0;
  *(_OWORD *)(v119 + 240) = 0u;
  *(_OWORD *)(v119 + 256) = 0u;
  *(_OWORD *)(v119 + 208) = 0u;
  *(_OWORD *)(v119 + 224) = 0u;
  *(_OWORD *)(v119 + 176) = 0u;
  *(_OWORD *)(v119 + 192) = 0u;
  *(_OWORD *)(v119 + 144) = 0u;
  *(_OWORD *)(v119 + 160) = 0u;
  *(_OWORD *)(v119 + 112) = 0u;
  *(_OWORD *)(v119 + 128) = 0u;
  *(_OWORD *)(v119 + 80) = 0u;
  *(_OWORD *)(v119 + 96) = 0u;
  *(_OWORD *)(v119 + 48) = 0u;
  *(_OWORD *)(v119 + 64) = 0u;
  *(_OWORD *)(v119 + 16) = 0u;
  *(_OWORD *)(v119 + 32) = 0u;
  *(_OWORD *)v119 = 0u;
  sub_20E863438(v119);
  v149 = (void **)v119;
  if (*(_BYTE *)(a2 + 696) == 1)
    v120 = 5;
  else
    v120 = 4;
  if (*(_BYTE *)(a2 + 696) == 1)
    v121 = "Right";
  else
    v121 = "Left";
  sub_20E86A980((_QWORD *)(v119 + 16), (uint64_t)v121, v120);
  v122 = *(_DWORD *)(v119 + 120);
  if ((v122 & 0x10) != 0)
  {
    v125 = *(_QWORD *)(v119 + 112);
    v126 = *(_QWORD *)(v119 + 72);
    if (v125 < v126)
    {
      *(_QWORD *)(v119 + 112) = v126;
      v125 = v126;
    }
    v127 = *(const void **)(v119 + 64);
    v123 = v125 - (_QWORD)v127;
    if (v125 - (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_76;
  }
  else
  {
    if ((v122 & 8) == 0)
    {
      v123 = 0;
      HIBYTE(v148) = 0;
      v124 = __dst;
      goto LABEL_52;
    }
    v138 = *(_QWORD *)(v119 + 56);
    v127 = *(const void **)(v119 + 40);
    v123 = v138 - (_QWORD)v127;
    if ((unint64_t)(v138 - (_QWORD)v127) >= 0x7FFFFFFFFFFFFFF8)
LABEL_76:
      sub_20E860B7C();
  }
  if (v123 >= 0x17)
  {
    v128 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17)
      v128 = v123 | 7;
    v129 = v128 + 1;
    v124 = (void **)operator new(v128 + 1);
    __dst[1] = (void *)v123;
    v148 = v129 | 0x8000000000000000;
    __dst[0] = v124;
  }
  else
  {
    HIBYTE(v148) = v123;
    v124 = __dst;
    if (!v123)
      goto LABEL_52;
  }
  memmove(v124, v127, v123);
LABEL_52:
  *((_BYTE *)v124 + v123) = 0;
  v130 = v149;
  if (v149)
  {
    v131 = MEMORY[0x24BEDB7F0];
    v132 = *MEMORY[0x24BEDB7F0];
    *v149 = (void *)*MEMORY[0x24BEDB7F0];
    v133 = *(void **)(v131 + 72);
    *(void **)((char *)v130 + *(_QWORD *)(v132 - 24)) = *(void **)(v131 + 64);
    v130[3] = (void *)(MEMORY[0x24BEDB848] + 16);
    v130[2] = v133;
    if (*((char *)v130 + 111) < 0)
      operator delete(v130[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v130 + 16);
    MEMORY[0x212BC6398](v130, 0x10B2C40EED050F3);
  }
  v149 = (void **)v145;
  v150 = (const char *)__dst;
  v151 = v145;
  v152 = (const char *)__dst;
  v153 = (const char *)__dst;
  if (v146 == -1)
    sub_20E877AB8();
  v154 = &v149;
  ((void (*)(void ****, _QWORD *))off_24C9C1670[v146])(&v154, v145);
  if (SHIBYTE(v148) < 0)
    operator delete(__dst[0]);
LABEL_59:
  if (v146 == -1)
    sub_20E877AB8();
  v149 = __dst;
  ((void (*)(void **__return_ptr, void ***, _QWORD *))off_24C9C16A0[v146])(__p, &v149, v145);
  if (v146 != -1)
    ((void (*)(void ***, _QWORD *))off_24C9C1640[v146])(&v149, v145);
  if ((v140 & 0x80u) == 0)
    v134 = __p;
  else
    v134 = (void **)__p[0];
  if ((v140 & 0x80u) == 0)
    v135 = v140;
  else
    v135 = (uint64_t)__p[1];
  v136 = sub_20E86A980(v118, (uint64_t)v134, v135);
  sub_20E86A980(v136, (uint64_t)"]", 1);
  if (((char)v140 & 0x80000000) == 0)
  {
    if (((char)v142 & 0x80000000) == 0)
      goto LABEL_70;
LABEL_73:
    operator delete(v141[0]);
    if (((char)v144 & 0x80000000) == 0)
      return a1;
LABEL_74:
    operator delete(v143[0]);
    return a1;
  }
  operator delete(__p[0]);
  if ((char)v142 < 0)
    goto LABEL_73;
LABEL_70:
  if ((char)v144 < 0)
    goto LABEL_74;
  return a1;
}

void sub_20EA88B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;

  MEMORY[0x212BC6398](v37, 0x10B2C40EED050F3);
  sub_20E877A60((uint64_t)&a27);
  if (a20 < 0)
  {
    operator delete(__p);
    if (a26 < 0)
    {
LABEL_6:
      operator delete(a21);
      _Unwind_Resume(a1);
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA88D2C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v18;
  _BYTE v19[24];
  int v20;
  char v21;
  char *v22;

  v4 = sub_20E86A980(a1, (uint64_t)"RangeSensorCalibrationData: [", 29);
  v5 = sub_20E86A980(v4, (uint64_t)"Offset from Mach absolute to UTC time: ", 39);
  if (*(_BYTE *)(a2 + 8))
  {
    v20 = 0;
    sub_20E87876C((uint64_t)&v22, (uint64_t)v19, (double *)a2);
    if (v20 == -1)
      sub_20E877AB8();
    v22 = &v21;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C9C16A0[v20])(__p, &v22, v19);
    if (v20 != -1)
      ((void (*)(char **, _BYTE *))off_24C9C1640[v20])(&v22, v19);
    v6 = v18;
    v7 = (uint64_t)__p[1];
  }
  else
  {
    v6 = 4;
    v18 = 4;
    v7 = 1701736270;
    strcpy((char *)__p, "None");
  }
  if ((v6 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v9 = v6;
  else
    v9 = v7;
  v10 = sub_20E86A980(v5, (uint64_t)v8, v9);
  v11 = sub_20E86A980(v10, (uint64_t)"; ", 2);
  v12 = sub_20E86A980(v11, (uint64_t)"Offset from Mach absolute to UTC time", 37);
  sub_20E86A980(v12, (uint64_t)"{", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v13, (uint64_t)", ", 2);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v14, (uint64_t)", ", 2);
  v15 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v15, (uint64_t)"}", 1);
  sub_20E86A980(v12, (uint64_t)"]", 1);
  if (v18 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20EA88F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA88F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA88F44(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;

  kdebug_trace();
  std::chrono::steady_clock::now();
  v7 = *(_DWORD *)(a5 + 992);
  if (v7 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_7;
    }
    v7 = *(_DWORD *)(a5 + 992);
  }
  if (v7)
    __asm { BR              X10 }
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_7:
  abort();
}

void sub_20EA891C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  MEMORY[0x212BC6398](v15, 0x10A1C40D823F016);
  sub_210215814((uint64_t)&a9);
  sub_20E8E69C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EA89210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_210215814((uint64_t)&a9);
  sub_20E8E69C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EA89240(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 *v32;
  unsigned __int8 v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  std::logic_error *exception;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  void *__p[2];
  uint64_t v43;

  v9 = (_DWORD *)*a1;
  v8 = (_DWORD *)a1[1];
  v10 = ((uint64_t)v8 - *a1) >> 6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v11 = 0xF0F0F0F0F0F0F0F1 * v10;
  *(_QWORD *)a3 = 0;
  sub_20EA89AFC(a3, 0xF0F0F0F0F0F0F0F1 * v10);
  if (v8 != v9)
  {
    LODWORD(v16) = 0;
    do
    {
      v17 = (_DWORD *)*a1;
      v18 = (_DWORD *)a1[1];
      if ((_DWORD *)*a1 != v18)
      {
        while (*v17 != (_DWORD)v16)
        {
          v17 += 272;
          if (v17 == v18)
            goto LABEL_56;
        }
      }
      if (v17 == v18)
      {
LABEL_56:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Requested camera id not found.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      sub_20EA82680((uint64_t)v17, (uint64_t)&v41, a4);
      v19 = *(_QWORD *)(a3 + 8);
      if (v19 < *(_QWORD *)(a3 + 16))
      {
        *(_DWORD *)v19 = v41;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 8) = 0;
        v12 = *(int8x16_t *)__p;
        *(_OWORD *)(v19 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(v19 + 24) = v43;
        *(_QWORD *)(a3 + 8) = v19 + 32;
      }
      else
      {
        v20 = sub_20EA89C1C((void **)a3, (uint64_t)&v41);
        v21 = __p[0];
        *(_QWORD *)(a3 + 8) = v20;
        if (v21)
        {
          v22 = __p[1];
          v23 = v21;
          if (__p[1] != v21)
          {
            do
              v22 = (void *)sub_20EB8188C((uint64_t)v22 - 1664);
            while (v22 != v21);
            v23 = __p[0];
          }
          __p[1] = v21;
          operator delete(v23);
        }
      }
      v16 = (v16 + 1);
    }
    while (v11 > v16);
  }
  v24 = *(_QWORD **)a3;
  v38 = *(_QWORD **)(a3 + 8);
  if (*(_QWORD **)a3 != v38)
  {
    v25 = (unsigned __int8 *)&qword_254A6DE78;
    while (1)
    {
      v26 = v24[1];
      v27 = v24[2];
      v39 = v24;
      if (v26 != v27)
        break;
LABEL_18:
      v24 = v39 + 4;
      if (v39 + 4 == v38)
        return;
    }
    v40 = v24[2];
    while (1)
    {
      if (*(_BYTE *)(v26 + 1536))
        v28 = v26 + 96;
      else
        v28 = 0;
      v29 = *(_DWORD *)(v28 + 992);
      if (v29 == -1)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0);
        v30 = a3;
        v31 = atomic_load(v25);
        if ((v31 & 1) == 0 && __cxa_guard_acquire((__guard *)v25))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release((__guard *)v25);
        }
        v32 = v25;
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v35 = qword_254A6DE40;
          for (i = qword_254A6DE48; v35 != i; v35 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v35)(*(_QWORD *)(v35 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21025533E, 0);
        }
        v25 = v32;
        v33 = atomic_load(v32);
        if ((v33 & 1) == 0 && __cxa_guard_acquire((__guard *)v32))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release((__guard *)v32);
        }
        a3 = v30;
        if (!byte_254A6DE68)
          goto LABEL_57;
        qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21025533E, 0);
        v27 = v40;
        v29 = *(_DWORD *)(v28 + 992);
        if (v29 > 7)
          goto LABEL_46;
      }
      else if (v29 > 7)
      {
        goto LABEL_46;
      }
      if (v29 > 3)
      {
        if (v29 > 5)
        {
          if (v29 != 6 && !*(_BYTE *)(v28 + 468))
          {
LABEL_45:
            sub_20EB27C0C(v28 + 204, (double *)(v28 + 168), 0x32uLL, v12, v13, v14, v15);
            *(_BYTE *)(v28 + 468) = 1;
          }
        }
        else if (v29 != 5 && !*(_BYTE *)(v28 + 468))
        {
          goto LABEL_45;
        }
      }
      else if (!v29)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_57:
        abort();
      }
LABEL_46:
      if (*(_BYTE *)(v26 + 1536))
        v36 = v26 + 96;
      else
        v36 = 0;
      sub_20EB82370(v36, a2);
      v26 += 1664;
      if (v26 == v27)
        goto LABEL_18;
    }
  }
}

void sub_20EA89660(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EA896D4(v1);
  _Unwind_Resume(a1);
}

void sub_20EA896BC(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EA896D4(v1);
  _Unwind_Resume(a1);
}

void **sub_20EA896D4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
        {
          v6 = *((_QWORD *)v3 - 2);
          v7 = (void *)*((_QWORD *)v3 - 3);
          if (v6 != v5)
          {
            do
              v6 = sub_20EB8188C(v6 - 1664);
            while (v6 != v5);
            v7 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v7);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EA8976C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  __int128 v15;

  v3 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 7);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x27627627627627)
    sub_20E867F44();
  if (0x9D89D89D89D89D8ALL * ((uint64_t)(a1[2] - *a1) >> 7) > v4)
    v4 = 0x9D89D89D89D89D8ALL * ((uint64_t)(a1[2] - *a1) >> 7);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[2] - *a1) >> 7)) >= 0x13B13B13B13B13)
    v6 = 0x27627627627627;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x27627627627627)
      sub_20E877A38();
    v7 = (char *)operator new(1664 * v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = (uint64_t)&v7[1664 * v3];
  *((_QWORD *)&v15 + 1) = &v7[1664 * v6];
  sub_20EB81E74(v14, a2);
  v8 = 0;
  v10 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v8) != v10; sub_20EB81E74(v8 + v14, v8 + i))
    v8 -= 1664;
  v12 = (void *)*a1;
  v11 = a1[1];
  *a1 = v14 + v8;
  *(_QWORD *)&v15 = v14 + 1664;
  for (*(_OWORD *)(a1 + 1) = v15; (void *)v11 != v12; v11 = sub_20EB8188C(v11 - 1664))
    ;
  if (v12)
    operator delete(v12);
  return v14 + 1664;
}

void sub_20EA898E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EA89924((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA89924(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1664;
    sub_20EB8188C(i - 1664);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EA89974(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x27627627627628)
      sub_20E867F44();
    result = (uint64_t)operator new(1664 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 1664 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EB81E74(v8 + v9, a2 + v9);
        v9 += 1664;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EA89A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EA89A78(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA89A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 1664)
    sub_20EB8188C(v10 - 1664 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EA89A78(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EA89A78(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_20EB8188C(v4 - 1664);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20EA89AFC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    if (a2 >> 59)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_DWORD *)v10 - 8) = *(_DWORD *)&v4[v9 - 32];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 32;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        v13 = *((_QWORD *)v12 - 3);
        if (v13)
        {
          v14 = *((_QWORD *)v12 - 2);
          v15 = (void *)*((_QWORD *)v12 - 3);
          if (v14 != v13)
          {
            do
              v14 = sub_20EB8188C(v14 - 1664);
            while (v14 != v13);
            v15 = (void *)*((_QWORD *)v12 - 3);
          }
          *((_QWORD *)v12 - 2) = v13;
          operator delete(v15);
        }
        v12 -= 32;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20EA89C1C(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20E867F44();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20E877A38();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v13 = v11 + 32;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      v18 = &v15[v16];
      *((_DWORD *)v17 - 8) = *(_DWORD *)&v15[v16 - 32];
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
      *((_QWORD *)v17 - 1) = *(_QWORD *)&v15[v16 - 8];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_QWORD *)v18 - 1) = 0;
      v16 -= 32;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 3);
      if (v20)
      {
        v21 = *((_QWORD *)v19 - 2);
        v22 = (void *)*((_QWORD *)v19 - 3);
        if (v21 != v20)
        {
          do
            v21 = sub_20EB8188C(v21 - 1664);
          while (v21 != v20);
          v22 = (void *)*((_QWORD *)v19 - 3);
        }
        *((_QWORD *)v19 - 2) = v20;
        operator delete(v22);
      }
      v19 -= 32;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_20EA89D88(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __n128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t *p_shared_owners;
  unint64_t *v26;
  _OWORD v27[4];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  _QWORD v36[63];
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;

  v1 = 0;
  v43 = *MEMORY[0x24BDAC8D0];
  do
  {
    v2 = (*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v1 == 64;
    v1 += 8;
  }
  while (!v3);
  if (!v2)
    return 0;
  v4 = 72;
  do
  {
    v5 = (*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v4 == 136;
    v4 += 8;
  }
  while (!v3);
  if (!v5
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v6 = 168;
  do
  {
    v7 = (*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v6 == 272;
    v6 += 8;
  }
  while (!v3);
  if (!v7)
    return 0;
  v8 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v9;
  v10 = *(_OWORD *)(a1 + 72);
  v30 = *(_OWORD *)(a1 + 88);
  v11 = *(_OWORD *)(a1 + 120);
  v31 = *(_OWORD *)(a1 + 104);
  v32 = v11;
  v28 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 136);
  v29 = v10;
  v35 = *(_BYTE *)(a1 + 160);
  v34 = *(_OWORD *)(a1 + 144);
  memcpy(v36, (const void *)(a1 + 168), 0x1E9uLL);
  v39 = 10;
  v40 = 0x7FF8000000000000;
  v41 = 0xFFEFFFFFFFFFFFFFLL;
  v12.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v42 = xmmword_2102E3C60;
  v12.n128_u64[0] = 0.5;
  v19 = sub_20EB44B68((uint64_t)v27, 0, 0, v12, v13, v14, v15, v16, v17, v18);
  if (v39 != -1)
  {
    if (v39 > 7)
    {
      if (v39 > 0xB)
      {
        if (v39 < 0xF)
          return v19;
        v20 = v38;
        if (!v38)
          return v19;
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
      }
      else if (v39 > 9)
      {
        if (v39 == 10)
          return v19;
        v20 = v37;
        if (!v37)
          return v19;
        v26 = (unint64_t *)&v37->__shared_owners_;
        do
          v22 = __ldaxr(v26);
        while (__stlxr(v22 - 1, v26));
      }
      else
      {
        if (v39 != 9)
          return v19;
        v20 = (std::__shared_weak_count *)v36[42];
        if (!v36[42])
          return v19;
        v24 = (unint64_t *)(v36[42] + 8);
        do
          v22 = __ldaxr(v24);
        while (__stlxr(v22 - 1, v24));
      }
    }
    else
    {
      if (v39 != 7)
        return v19;
      v20 = (std::__shared_weak_count *)v36[39];
      if (!v36[39])
        return v19;
      v21 = (unint64_t *)(v36[39] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
    }
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v19;
}

void sub_20EA8A040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA8A054(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __n128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t *p_shared_owners;
  unint64_t *v26;
  _OWORD v27[4];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  _QWORD v36[91];
  std::__shared_weak_count *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;

  v1 = 0;
  v42 = *MEMORY[0x24BDAC8D0];
  do
  {
    v2 = (*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v1 == 64;
    v1 += 8;
  }
  while (!v3);
  if (!v2)
    return 0;
  v4 = 72;
  do
  {
    v5 = (*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v4 == 136;
    v4 += 8;
  }
  while (!v3);
  if (!v5
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v6 = 168;
  do
  {
    v7 = (*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v6 == 384;
    v6 += 8;
  }
  while (!v3);
  if (!v7)
    return 0;
  v8 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v9;
  v10 = *(_OWORD *)(a1 + 72);
  v30 = *(_OWORD *)(a1 + 88);
  v11 = *(_OWORD *)(a1 + 120);
  v31 = *(_OWORD *)(a1 + 104);
  v32 = v11;
  v28 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 136);
  v29 = v10;
  v35 = *(_BYTE *)(a1 + 160);
  v34 = *(_OWORD *)(a1 + 144);
  memcpy(v36, (const void *)(a1 + 168), 0x2C9uLL);
  v38 = 14;
  v39 = 0x7FF8000000000000;
  v40 = 0xFFEFFFFFFFFFFFFFLL;
  v12.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v41 = xmmword_2102E3C60;
  v12.n128_u64[0] = 0.5;
  v19 = sub_20EB44B68((uint64_t)v27, 0, 0, v12, v13, v14, v15, v16, v17, v18);
  if (v38 != -1)
  {
    if (v38 > 7)
    {
      if (v38 > 0xB)
      {
        if (v38 < 0xF)
          return v19;
        v20 = v37;
        if (!v37)
          return v19;
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
      }
      else if (v38 > 9)
      {
        if (v38 == 10)
          return v19;
        v20 = (std::__shared_weak_count *)v36[63];
        if (!v36[63])
          return v19;
        v26 = (unint64_t *)(v36[63] + 8);
        do
          v22 = __ldaxr(v26);
        while (__stlxr(v22 - 1, v26));
      }
      else
      {
        if (v38 != 9)
          return v19;
        v20 = (std::__shared_weak_count *)v36[42];
        if (!v36[42])
          return v19;
        v24 = (unint64_t *)(v36[42] + 8);
        do
          v22 = __ldaxr(v24);
        while (__stlxr(v22 - 1, v24));
      }
    }
    else
    {
      if (v38 != 7)
        return v19;
      v20 = (std::__shared_weak_count *)v36[39];
      if (!v36[39])
        return v19;
      v21 = (unint64_t *)(v36[39] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
    }
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v19;
}

void sub_20EA8A30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA79324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EA8A320(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1640[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EA8A410(_DWORD ***a1)
{
  return sub_20EA8A8C8(**a1, (char *)(*a1)[1]);
}

void sub_20EA8A41C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C1640[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20EA8A5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EA8A618(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20EA8A8A8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20EA8A8C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20EA8A8C8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1640[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EA8A9B8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EA8AD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA8AD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA8AD80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EA8ADA4(_DWORD ***a1)
{
  return sub_20EA8ADC0(**a1, (char *)(*a1)[1]);
}

void sub_20EA8ADB0(uint64_t a1, uint64_t a2)
{
  sub_20EA8AEB0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EA8ADC0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1640[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EA8AEB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C1640[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EA8B064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EA8B0A8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EA8B1A0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EA8B198(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EA8B1A0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EA8B39C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA8B3B0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EA8B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EA8B948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA8B95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EA8B9B4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EA8BD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA8BD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA8BD7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EA8BDA0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int **a6@<X5>, double **a7@<X8>, double a8@<D0>)
{
  int *v9;
  int *v10;
  int64_t v11;
  double *v15;
  float64x2_t v16;
  int32x4_t v18;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float64x2_t *v27;
  double v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  double *v39;
  uint64_t v40;
  float64x2_t *v41;
  float64x2_t *v42;
  uint64_t v43;
  char v44;
  double *v45;
  double *v46;
  float64x2_t *v47;
  float64x2_t *v48;
  uint64_t v49;
  double *v50;
  float64x2_t *v51;
  uint64_t v52;
  double v53;
  double v54;
  int8x16_t v55;
  __int128 v56;
  float64x2_t v57;
  double v62;
  double v63;
  float64x2_t v64;
  __int128 v65;
  float64x2_t v66;
  int64x2_t v67;
  double v68;
  unsigned int v69;
  float64x2_t *v70;
  double v71;
  float64x2_t v72;
  uint64_t v73;
  float64x2_t *v74;
  float64x2_t *v75;
  uint64_t v76;
  float64x2_t *v77;
  uint64_t v78;
  float64x2_t *v79;
  float64x2_t *v80;
  double *v81;
  uint64_t v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  int v86;
  double *v87;
  double *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  uint64_t v91;
  double *v92;
  float64x2_t *v93;
  uint64_t v94;
  float64x2_t *v95;
  float64x2_t *v96;
  uint64_t v97;
  double v98;
  double v99;
  int8x16_t v100;
  __int128 v101;
  float64x2_t v102;
  double v103;
  double v104;
  float64x2_t v105;
  __int128 v106;
  float64x2_t v107;
  int64x2_t v108;
  double v109;
  double v110;
  float64x2_t v111;
  double v112;
  float64x2_t v115;
  float64_t v117;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  double v123;
  double v124;
  unint64_t v125;
  double *v126;
  uint64_t v127;
  double *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  double *v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double *v140;
  _OWORD *v141;
  double *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  char *v146;
  _BYTE *v147;
  int64_t v148;
  int64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  _QWORD *v154;
  int64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  _OWORD *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  int *v165;
  int *v166;
  int *v167;
  double *v168;
  double *v169;
  float *v171;
  double *v172;
  double *v173;
  float *v174;
  double *v175;
  double *v177;
  double **v178;
  int *v179;
  float64x2_t v182;
  double v183;
  float64x2_t v184;
  double v185;
  void *__p[2];
  char *v187;
  float64x2_t *v188;
  float64x2_t *v189;
  float64x2_t *v190;
  float64x2_t *v191;
  uint64_t v192;
  int64x2_t v193;
  float64_t v194;
  int64x2_t v195;
  float64_t v196;
  float64x2_t v197;
  uint64_t v198;
  float64x2_t v199;
  float64x2_t v200;
  int64x2_t v201;
  int32x4_t v202;
  float64x2_t v203;
  uint64_t v204;
  float64x2_t v205;
  float64_t v206;
  __int128 v207;
  unint64_t v208;
  __int128 v209;
  uint64_t v210;
  double v211;
  double v212;
  uint64_t v213;

  v213 = *MEMORY[0x24BDAC8D0];
  v10 = *a6;
  v9 = a6[1];
  v179 = v9;
  v11 = (char *)v9 - (char *)*a6;
  if (v9 == *a6)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  v187 = 0;
  if (v11 < 0)
    sub_20E867F44();
  __p[0] = operator new((char *)v9 - (char *)v10);
  __p[1] = __p[0];
  v187 = (char *)__p[0] + 8 * (v11 >> 3);
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  v15 = (double *)operator new(v11);
  *a7 = v15;
  a7[1] = v15;
  a7[2] = &v15[v11 >> 3];
  v177 = (double *)(a4 + 168);
  v178 = a7;
  v172 = (double *)(a4 + 280);
  v173 = (double *)(a4 + 392);
  v174 = (float *)(a4 + 204);
  v175 = (double *)(a3 + 168);
  v168 = (double *)(a3 + 280);
  v169 = (double *)(a3 + 392);
  v171 = (float *)(a3 + 204);
  do
  {
    v22 = *a2;
    v23 = *v10;
    v24 = v10[1];
    v25 = *a1;
    v26 = *(_DWORD *)(a4 + 992);
    if (v26 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_258;
      }
      v26 = *(_DWORD *)(a4 + 992);
      v27 = (float64x2_t *)(v22 + 16 * v23);
      if (v26 <= 7)
      {
LABEL_9:
        if (!v26)
          goto LABEL_257;
        v29 = vmulq_f64(*(float64x2_t *)(a4 + 72), *v27);
        v211 = *(double *)(a4 + 88) + vaddvq_f64(v29);
        v28 = *(double *)(a4 + 104);
        v16.f64[0] = *(float64_t *)(a4 + 112);
        v29.f64[0] = v28 * v27->f64[1] + v16.f64[0];
LABEL_14:
        v212 = v29.f64[0];
LABEL_15:
        v188 = &v184;
        v189 = (float64x2_t *)&v211;
        v191 = 0;
        v192 = 0;
        v190 = 0;
        if (v26 <= 7)
          goto LABEL_16;
        goto LABEL_57;
      }
    }
    else
    {
      v27 = (float64x2_t *)(v22 + 16 * v23);
      if (v26 <= 7)
        goto LABEL_9;
    }
    v29 = vmulq_f64(*(float64x2_t *)(a4 + 72), *v27);
    v211 = *(double *)(a4 + 88) + vaddvq_f64(v29);
    v28 = *(double *)(a4 + 104);
    v16.f64[0] = *(float64_t *)(a4 + 112);
    v29.f64[0] = v28 * v27->f64[1] + v16.f64[0];
    if (v26 < 0xE)
      goto LABEL_14;
    v212 = v28 * v27->f64[1] + v16.f64[0];
    if (v26 == 14)
      goto LABEL_15;
    v34 = &v184;
    v35 = (float64x2_t *)&v211;
    v188 = &v184;
    v189 = (float64x2_t *)&v211;
    v191 = 0;
    v192 = 0;
    v190 = 0;
    if (v26 != -1)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
LABEL_84:
      v44 = sub_20EB3CED8(a4, (uint64_t)v34, v35, v38, v37, v36);
      goto LABEL_100;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_258;
    }
    v26 = *(_DWORD *)(a4 + 992);
    if (v26 <= 7)
    {
LABEL_16:
      if (v26 > 3)
      {
        v40 = (uint64_t)v188;
        v39 = (double *)v189;
        v41 = v190;
        v42 = v191;
        v43 = v192;
        if (v26 > 5)
        {
          if (v26 == 6)
            v44 = sub_20EB41C58((double *)a4, (uint64_t)v188, v189->f64, v190, (uint64_t)v191, v192);
          else
            v44 = sub_20EB306CC(a4, (uint64_t)v188, v189, v190, (unint64_t)v191, v192, v29.f64[0], v28, (int8x16_t)v16, (int8x16_t)_Q3, *(double *)v18.i64, _Q5.f64[0], _Q6);
        }
        else if (v26 == 5)
        {
          if (v190)
          {
            v190->f64[0] = 0.0;
            v41->f64[1] = 0.0;
            v41[1].f64[0] = 0.0;
          }
          if (v43)
          {
            *(_QWORD *)(v43 + 64) = 0;
            *(_OWORD *)(v43 + 32) = 0u;
            *(_OWORD *)(v43 + 48) = 0u;
            *(_OWORD *)v43 = 0u;
            *(_OWORD *)(v43 + 16) = 0u;
          }
          if (v42)
            v44 = sub_20EB28F10(v40, (uint64_t)v42, v39, (uint64_t)v177, 5);
          else
            v44 = sub_20EB2886C(v40, v39, (uint64_t)v177, 5);
        }
        else
        {
          if (v190)
          {
            v190->f64[0] = 0.0;
            v41->f64[1] = 0.0;
            v41[1].f64[0] = 0.0;
          }
          if (v43)
          {
            *(_QWORD *)(v43 + 64) = 0;
            v29 = 0uLL;
            *(_OWORD *)(v43 + 32) = 0u;
            *(_OWORD *)(v43 + 48) = 0u;
            *(_OWORD *)v43 = 0u;
            *(_OWORD *)(v43 + 16) = 0u;
          }
          if (v42)
          {
            if (!*(_BYTE *)(a4 + 468))
            {
              *(_QWORD *)&v29.f64[0] = sub_20EB27C0C((uint64_t)v174, v177, 0x32uLL, (int8x16_t)v29, v28, (int8x16_t)v16, (int8x16_t)_Q3).u64[0];
              *(_BYTE *)(a4 + 468) = 1;
            }
            v44 = sub_20EA8D684(v40, (uint64_t)v39, (int64x2_t *)v177, v174, v42, 5, v29.f64[0], v28, v16.f64[0], _Q3.f64[0], *(double *)v18.i64, _Q5.f64[0], _Q6);
          }
          else
          {
            if (!*(_BYTE *)(a4 + 468))
            {
              *(_QWORD *)&v29.f64[0] = sub_20EB27C0C((uint64_t)v174, v177, 0x32uLL, (int8x16_t)v29, v28, (int8x16_t)v16, (int8x16_t)_Q3).u64[0];
              *(_BYTE *)(a4 + 468) = 1;
            }
            v44 = sub_20EA8D684(v40, (uint64_t)v39, (int64x2_t *)v177, v174, 0, 5, v29.f64[0], v28, v16.f64[0], _Q3.f64[0], *(double *)v18.i64, _Q5.f64[0], _Q6);
          }
        }
      }
      else
      {
        if (v26 <= 1)
        {
          if (!v26)
            goto LABEL_257;
          v30 = (uint64_t)v188;
          v32 = v190;
          v31 = v191;
          v33 = v192;
          *v188 = *v189;
          *(_QWORD *)(v30 + 16) = 0x3FF0000000000000;
          if (v32)
          {
            v32->f64[0] = 0.0;
            v32->f64[1] = 0.0;
            v32[1].f64[0] = 0.0;
          }
          if (v31)
          {
            *v31 = (float64x2_t)xmmword_210312EC0;
            v31[1] = (float64x2_t)unk_210312ED0;
            v31[2] = (float64x2_t)xmmword_210312EE0;
          }
          if (v33)
          {
            *(_QWORD *)(v33 + 64) = 0;
            *(_OWORD *)(v33 + 32) = 0u;
            *(_OWORD *)(v33 + 48) = 0u;
            *(_OWORD *)v33 = 0u;
            *(_OWORD *)(v33 + 16) = 0u;
          }
          goto LABEL_101;
        }
        if (v26 == 2)
        {
          v44 = sub_20EA8D22C((uint64_t)&v188, a4);
        }
        else
        {
          v45 = (double *)v188;
          v46 = (double *)v189;
          v48 = v190;
          v47 = v191;
          v49 = v192;
          if (v190)
          {
            v190->f64[0] = 0.0;
            v48->f64[1] = 0.0;
            v48[1].f64[0] = 0.0;
          }
          if (v49)
          {
            *(_QWORD *)(v49 + 64) = 0;
            v29.f64[0] = 0.0;
            *(_OWORD *)(v49 + 32) = 0u;
            *(_OWORD *)(v49 + 48) = 0u;
            *(_OWORD *)v49 = 0u;
            *(_OWORD *)(v49 + 16) = 0u;
          }
          if (v47)
            v44 = sub_20EB27398(v45, (uint64_t)v47, v46, (int64x2_t *)v177, 20, v29.f64[0], v28, v16.f64[0], _Q3.f64[0], (int64x2_t)v18);
          else
            v44 = sub_20EB23DF0((uint64_t)v45, v46, (int64x2_t *)v177, 20, v29.f64[0], v28, v16.f64[0], _Q3.f64[0], (int64x2_t)v18, _Q5);
        }
      }
      goto LABEL_100;
    }
LABEL_57:
    v34 = v188;
    if (v26 > 0xB)
    {
      if (v26 <= 0xD)
      {
        if (v26 != 13)
          goto LABEL_158;
        v44 = sub_20EB43734((double *)a4, (uint64_t)v188, (uint64_t)v189, v190, (uint64_t)v191, v192);
        goto LABEL_100;
      }
      v35 = v189;
      v38 = v190;
      v37 = v191;
      v36 = v192;
      if (v26 != 14)
        goto LABEL_84;
      if (v190)
      {
        v190->f64[0] = 0.0;
        v38->f64[1] = 0.0;
        v38[1].f64[0] = 0.0;
      }
      if (v36)
      {
        *(_QWORD *)(v36 + 64) = 0;
        *(_OWORD *)(v36 + 32) = 0u;
        *(_OWORD *)(v36 + 48) = 0u;
        *(_OWORD *)v36 = 0u;
        *(_OWORD *)(v36 + 16) = 0u;
      }
      v62 = *(double *)a4 + *(double *)(a4 + 32);
      v63 = v62 * 0.5;
      if (v37)
      {
        if (!sub_20EB253A0((uint64_t)v34, (uint64_t)v35, v177, v173, 0x14u, v62 * 0.5))
          goto LABEL_6;
        if (!sub_20EB2498C(&v199, (uint64_t)&v200, &v197, (uint64_t)v34, v177, v63))
          goto LABEL_6;
        v55.i64[0] = *(_QWORD *)&v34[1].f64[0];
        *(_QWORD *)&v56 = v201.i64[0];
        v18 = v202;
        _Q3 = v200;
        v203 = *v34;
        v16.f64[1] = v203.f64[1];
        v204 = v55.i64[0];
        v198 = 0;
        *(_QWORD *)&v64.f64[0] = v55.i64[0];
        v64.f64[1] = v203.f64[0];
        _Q5 = vmlsq_f64(vmulq_f64((float64x2_t)v202, v64), (float64x2_t)vzip2q_s64((int64x2_t)v202, v201), (float64x2_t)vextq_s8((int8x16_t)v203, v55, 8uLL));
        _Q6 = vmulq_f64(v200, _Q5);
        _Q5.f64[0] = _Q5.f64[1];
        __asm { FMLA            D6, D5, V3.D[1] }
        _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v201, v203), 1), (float64x2_t)v202, v203).f64[0], *(double *)v201.i64);
        _Q5.f64[0] = fabs(_Q6.f64[0]);
        if (_Q5.f64[0] < 0.00000001)
          goto LABEL_6;
        goto LABEL_83;
      }
      v44 = sub_20EB253A0((uint64_t)v34, (uint64_t)v35, v177, v173, 0x14u, v62 * 0.5);
    }
    else
    {
      v50 = (double *)v189;
      v51 = v190;
      v37 = v191;
      v52 = v192;
      if (v26 > 9)
      {
        if (v26 == 10)
        {
          if (v190)
          {
            v190->f64[0] = 0.0;
            v51->f64[1] = 0.0;
            v51[1].f64[0] = 0.0;
          }
          if (v52)
          {
            *(_QWORD *)(v52 + 64) = 0;
            *(_OWORD *)(v52 + 32) = 0u;
            *(_OWORD *)(v52 + 48) = 0u;
            *(_OWORD *)v52 = 0u;
            *(_OWORD *)(v52 + 16) = 0u;
          }
          v53 = *(double *)a4 + *(double *)(a4 + 32);
          v54 = v53 * 0.5;
          if (v37)
          {
            if (!sub_20EB24F38((uint64_t)v34, (uint64_t)v50, (uint64_t)v177, v172, 0x14u, v53 * 0.5))
              goto LABEL_6;
            if (!sub_20EB2450C(&v199, (uint64_t)&v200, &v197, (uint64_t)v34, v177, v54))
              goto LABEL_6;
            v55.i64[0] = *(_QWORD *)&v34[1].f64[0];
            *(_QWORD *)&v56 = v201.i64[0];
            v18 = v202;
            _Q3 = v200;
            v203 = *v34;
            v16.f64[1] = v203.f64[1];
            v204 = v55.i64[0];
            v198 = 0;
            *(_QWORD *)&v57.f64[0] = v55.i64[0];
            v57.f64[1] = v203.f64[0];
            _Q5 = vmlsq_f64(vmulq_f64((float64x2_t)v202, v57), (float64x2_t)vzip2q_s64((int64x2_t)v202, v201), (float64x2_t)vextq_s8((int8x16_t)v203, v55, 8uLL));
            _Q6 = vmulq_f64(v200, _Q5);
            _Q5.f64[0] = _Q5.f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v201, v203), 1), (float64x2_t)v202, v203).f64[0], *(double *)v201.i64);
            _Q5.f64[0] = fabs(_Q6.f64[0]);
            if (_Q5.f64[0] < 0.00000001)
              goto LABEL_6;
LABEL_83:
            *(_QWORD *)&v65 = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u64[0];
            *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
            *((_QWORD *)&v65 + 1) = v202.i64[0];
            *((_QWORD *)&v56 + 1) = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
            v205 = _Q3;
            v206 = v203.f64[0];
            v208 = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u64[0];
            v207 = v65;
            v210 = v55.i64[0];
            v209 = v56;
            sub_20E8BE424((uint64_t)&v193);
            v66.f64[0] = v194;
            *(_QWORD *)&v16.f64[1] = v195.i64[1];
            _Q3 = (float64x2_t)vzip1q_s64(v193, v195);
            v67 = vzip2q_s64(v193, v195);
            v66.f64[1] = v196;
            *v37 = _Q3;
            v37[1] = (float64x2_t)v67;
            v37[2] = v66;
            goto LABEL_101;
          }
          v44 = sub_20EB24F38((uint64_t)v34, (uint64_t)v50, (uint64_t)v177, v172, 0x14u, v53 * 0.5);
        }
        else
        {
          v44 = sub_20EB38E20(a4, (uint64_t)v188, v189, v190, v191, v192);
        }
      }
      else if (v26 == 9)
      {
        v44 = sub_20EB35004(a4, (uint64_t)v188, v189, v190, (unint64_t)v191, v192, v29.f64[0], v28, v16.f64[0], (int32x4_t)_Q3, v18);
      }
      else
      {
        if (v190)
        {
          v190->f64[0] = 0.0;
          v51->f64[1] = 0.0;
          v51[1].f64[0] = 0.0;
        }
        if (v52)
        {
          *(_QWORD *)(v52 + 64) = 0;
          v29.f64[0] = 0.0;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_OWORD *)v52 = 0u;
          *(_OWORD *)(v52 + 16) = 0u;
        }
        if (v37)
        {
          v44 = sub_20EB277C4((uint64_t)v34, (uint64_t)v37, v50, (uint64_t)v177, 20, v29.f64[0], v28, v16.f64[0], (int32x4_t)_Q3, v18);
        }
        else
        {
          v68 = sqrt(*v50 * *v50 + v50[1] * v50[1]);
          v44 = sub_20EB24018((uint64_t)v34, v50, v177, 20, v68, v68, v16.f64[0], (int32x4_t)_Q3, v18);
        }
      }
    }
LABEL_100:
    if ((v44 & 1) == 0)
      goto LABEL_6;
LABEL_101:
    v69 = *(_DWORD *)(a3 + 992);
    if (v69 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_258;
      }
      v69 = *(_DWORD *)(a3 + 992);
      v70 = (float64x2_t *)(v25 + 16 * v24);
      if (v69 <= 7)
      {
LABEL_103:
        if (!v69)
          goto LABEL_257;
        v72 = vmulq_f64(*(float64x2_t *)(a3 + 72), *v70);
        v211 = *(double *)(a3 + 88) + vaddvq_f64(v72);
        v71 = *(double *)(a3 + 104);
        v16.f64[0] = *(float64_t *)(a3 + 112);
        v72.f64[0] = v71 * v70->f64[1] + v16.f64[0];
LABEL_108:
        v212 = v72.f64[0];
LABEL_109:
        v188 = &v182;
        v189 = (float64x2_t *)&v211;
        v191 = 0;
        v192 = 0;
        v190 = 0;
        if (v69 <= 7)
          goto LABEL_110;
        goto LABEL_151;
      }
    }
    else
    {
      v70 = (float64x2_t *)(v25 + 16 * v24);
      if (v69 <= 7)
        goto LABEL_103;
    }
    v72 = vmulq_f64(*(float64x2_t *)(a3 + 72), *v70);
    v211 = *(double *)(a3 + 88) + vaddvq_f64(v72);
    v71 = *(double *)(a3 + 104);
    v16.f64[0] = *(float64_t *)(a3 + 112);
    v72.f64[0] = v71 * v70->f64[1] + v16.f64[0];
    if (v69 < 0xE)
      goto LABEL_108;
    v212 = v71 * v70->f64[1] + v16.f64[0];
    if (v69 == 14)
      goto LABEL_109;
    v34 = &v182;
    v77 = (float64x2_t *)&v211;
    v188 = &v182;
    v189 = (float64x2_t *)&v211;
    v191 = 0;
    v192 = 0;
    v190 = 0;
    if (v69 != -1)
    {
      v78 = 0;
      v79 = 0;
      v80 = 0;
LABEL_184:
      v86 = sub_20EB3CED8(a3, (uint64_t)v34, v77, v80, v79, v78);
      goto LABEL_200;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_258;
    }
    v69 = *(_DWORD *)(a3 + 992);
    if (v69 <= 7)
    {
LABEL_110:
      if (v69 > 3)
      {
        v82 = (uint64_t)v188;
        v81 = (double *)v189;
        v83 = v190;
        v84 = v191;
        v85 = v192;
        if (v69 > 5)
        {
          if (v69 == 6)
            v86 = sub_20EB41C58((double *)a3, (uint64_t)v188, v189->f64, v190, (uint64_t)v191, v192);
          else
            v86 = sub_20EB306CC(a3, (uint64_t)v188, v189, v190, (unint64_t)v191, v192, v72.f64[0], v71, (int8x16_t)v16, (int8x16_t)_Q3, *(double *)v18.i64, _Q5.f64[0], _Q6);
        }
        else if (v69 == 5)
        {
          if (v190)
          {
            v190->f64[0] = 0.0;
            v83->f64[1] = 0.0;
            v83[1].f64[0] = 0.0;
          }
          if (v85)
          {
            *(_QWORD *)(v85 + 64) = 0;
            *(_OWORD *)(v85 + 32) = 0u;
            *(_OWORD *)(v85 + 48) = 0u;
            *(_OWORD *)v85 = 0u;
            *(_OWORD *)(v85 + 16) = 0u;
          }
          if (v84)
            v86 = sub_20EB28F10(v82, (uint64_t)v84, v81, (uint64_t)v175, 5);
          else
            v86 = sub_20EB2886C(v82, v81, (uint64_t)v175, 5);
        }
        else
        {
          if (v190)
          {
            v190->f64[0] = 0.0;
            v83->f64[1] = 0.0;
            v83[1].f64[0] = 0.0;
          }
          if (v85)
          {
            *(_QWORD *)(v85 + 64) = 0;
            v72 = 0uLL;
            *(_OWORD *)(v85 + 32) = 0u;
            *(_OWORD *)(v85 + 48) = 0u;
            *(_OWORD *)v85 = 0u;
            *(_OWORD *)(v85 + 16) = 0u;
          }
          if (v84)
          {
            if (!*(_BYTE *)(a3 + 468))
            {
              *(_QWORD *)&v72.f64[0] = sub_20EB27C0C((uint64_t)v171, v175, 0x32uLL, (int8x16_t)v72, v71, (int8x16_t)v16, (int8x16_t)_Q3).u64[0];
              *(_BYTE *)(a3 + 468) = 1;
            }
            v86 = sub_20EA8D684(v82, (uint64_t)v81, (int64x2_t *)v175, v171, v84, 5, v72.f64[0], v71, v16.f64[0], _Q3.f64[0], *(double *)v18.i64, _Q5.f64[0], _Q6);
          }
          else
          {
            if (!*(_BYTE *)(a3 + 468))
            {
              *(_QWORD *)&v72.f64[0] = sub_20EB27C0C((uint64_t)v171, v175, 0x32uLL, (int8x16_t)v72, v71, (int8x16_t)v16, (int8x16_t)_Q3).u64[0];
              *(_BYTE *)(a3 + 468) = 1;
            }
            v86 = sub_20EA8D684(v82, (uint64_t)v81, (int64x2_t *)v175, v171, 0, 5, v72.f64[0], v71, v16.f64[0], _Q3.f64[0], *(double *)v18.i64, _Q5.f64[0], _Q6);
          }
        }
      }
      else
      {
        if (v69 <= 1)
        {
          if (!v69)
          {
LABEL_257:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_258:
            abort();
          }
          v73 = (uint64_t)v188;
          v75 = v190;
          v74 = v191;
          v76 = v192;
          *v188 = *v189;
          *(_QWORD *)(v73 + 16) = 0x3FF0000000000000;
          if (v75)
          {
            v75->f64[0] = 0.0;
            v75->f64[1] = 0.0;
            v75[1].f64[0] = 0.0;
          }
          if (v74)
          {
            *v74 = (float64x2_t)xmmword_210312EC0;
            v74[1] = (float64x2_t)unk_210312ED0;
            v74[2] = (float64x2_t)xmmword_210312EE0;
          }
          if (v76)
          {
            *(_QWORD *)(v76 + 64) = 0;
            *(_OWORD *)(v76 + 32) = 0u;
            *(_OWORD *)(v76 + 48) = 0u;
            *(_OWORD *)v76 = 0u;
            *(_OWORD *)(v76 + 16) = 0u;
          }
          goto LABEL_201;
        }
        if (v69 == 2)
        {
          v86 = sub_20EA8D22C((uint64_t)&v188, a3);
        }
        else
        {
          v87 = (double *)v188;
          v88 = (double *)v189;
          v90 = v190;
          v89 = v191;
          v91 = v192;
          if (v190)
          {
            v190->f64[0] = 0.0;
            v90->f64[1] = 0.0;
            v90[1].f64[0] = 0.0;
          }
          if (v91)
          {
            *(_QWORD *)(v91 + 64) = 0;
            v72.f64[0] = 0.0;
            *(_OWORD *)(v91 + 32) = 0u;
            *(_OWORD *)(v91 + 48) = 0u;
            *(_OWORD *)v91 = 0u;
            *(_OWORD *)(v91 + 16) = 0u;
          }
          if (v89)
            v86 = sub_20EB27398(v87, (uint64_t)v89, v88, (int64x2_t *)v175, 20, v72.f64[0], v71, v16.f64[0], _Q3.f64[0], (int64x2_t)v18);
          else
            v86 = sub_20EB23DF0((uint64_t)v87, v88, (int64x2_t *)v175, 20, v72.f64[0], v71, v16.f64[0], _Q3.f64[0], (int64x2_t)v18, _Q5);
        }
      }
      goto LABEL_200;
    }
LABEL_151:
    v34 = v188;
    if (v69 > 0xB)
    {
      if (v69 <= 0xD)
      {
        if (v69 != 13)
        {
LABEL_158:
          v96 = v190;
          v95 = v191;
          v97 = v192;
          if (v190)
          {
            v190->f64[0] = 0.0;
            v96->f64[1] = 0.0;
            v96[1].f64[0] = 0.0;
          }
          if (v97)
          {
            *(_QWORD *)(v97 + 64) = 0;
            *(_OWORD *)(v97 + 32) = 0u;
            *(_OWORD *)(v97 + 48) = 0u;
            *(_OWORD *)v97 = 0u;
            *(_OWORD *)(v97 + 16) = 0u;
          }
          v34->f64[0] = 0.0;
          v34->f64[1] = 0.0;
          v34[1].f64[0] = 0.0;
          if (v95)
          {
            v95[1] = 0u;
            v95[2] = 0u;
            *v95 = 0u;
          }
          goto LABEL_6;
        }
        v86 = sub_20EB43734((double *)a3, (uint64_t)v188, (uint64_t)v189, v190, (uint64_t)v191, v192);
        goto LABEL_200;
      }
      v77 = v189;
      v80 = v190;
      v79 = v191;
      v78 = v192;
      if (v69 != 14)
        goto LABEL_184;
      if (v190)
      {
        v190->f64[0] = 0.0;
        v80->f64[1] = 0.0;
        v80[1].f64[0] = 0.0;
      }
      if (v78)
      {
        *(_QWORD *)(v78 + 64) = 0;
        *(_OWORD *)(v78 + 32) = 0u;
        *(_OWORD *)(v78 + 48) = 0u;
        *(_OWORD *)v78 = 0u;
        *(_OWORD *)(v78 + 16) = 0u;
      }
      v103 = *(double *)a3 + *(double *)(a3 + 32);
      v104 = v103 * 0.5;
      if (v79)
      {
        if (!sub_20EB253A0((uint64_t)v34, (uint64_t)v77, v175, v169, 0x14u, v103 * 0.5))
          goto LABEL_6;
        if (!sub_20EB2498C(&v199, (uint64_t)&v200, &v197, (uint64_t)v34, v175, v104))
          goto LABEL_6;
        v100.i64[0] = *(_QWORD *)&v34[1].f64[0];
        *(_QWORD *)&v101 = v201.i64[0];
        v18 = v202;
        _Q3 = v200;
        v203 = *v34;
        v16.f64[1] = v203.f64[1];
        v204 = v100.i64[0];
        v198 = 0;
        *(_QWORD *)&v105.f64[0] = v100.i64[0];
        v105.f64[1] = v203.f64[0];
        _Q5 = vmlsq_f64(vmulq_f64((float64x2_t)v202, v105), (float64x2_t)vzip2q_s64((int64x2_t)v202, v201), (float64x2_t)vextq_s8((int8x16_t)v203, v100, 8uLL));
        _Q6 = vmulq_f64(v200, _Q5);
        _Q5.f64[0] = _Q5.f64[1];
        __asm { FMLA            D6, D5, V3.D[1] }
        _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v201, v203), 1), (float64x2_t)v202, v203).f64[0], *(double *)v201.i64);
        _Q5.f64[0] = fabs(_Q6.f64[0]);
        if (_Q5.f64[0] < 0.00000001)
          goto LABEL_6;
        goto LABEL_183;
      }
      v86 = sub_20EB253A0((uint64_t)v34, (uint64_t)v77, v175, v169, 0x14u, v103 * 0.5);
    }
    else
    {
      v92 = (double *)v189;
      v93 = v190;
      v79 = v191;
      v94 = v192;
      if (v69 > 9)
      {
        if (v69 == 10)
        {
          if (v190)
          {
            v190->f64[0] = 0.0;
            v93->f64[1] = 0.0;
            v93[1].f64[0] = 0.0;
          }
          if (v94)
          {
            *(_QWORD *)(v94 + 64) = 0;
            *(_OWORD *)(v94 + 32) = 0u;
            *(_OWORD *)(v94 + 48) = 0u;
            *(_OWORD *)v94 = 0u;
            *(_OWORD *)(v94 + 16) = 0u;
          }
          v98 = *(double *)a3 + *(double *)(a3 + 32);
          v99 = v98 * 0.5;
          if (v79)
          {
            if (!sub_20EB24F38((uint64_t)v34, (uint64_t)v92, (uint64_t)v175, v168, 0x14u, v98 * 0.5))
              goto LABEL_6;
            if (!sub_20EB2450C(&v199, (uint64_t)&v200, &v197, (uint64_t)v34, v175, v99))
              goto LABEL_6;
            v100.i64[0] = *(_QWORD *)&v34[1].f64[0];
            *(_QWORD *)&v101 = v201.i64[0];
            v18 = v202;
            _Q3 = v200;
            v203 = *v34;
            v16.f64[1] = v203.f64[1];
            v204 = v100.i64[0];
            v198 = 0;
            *(_QWORD *)&v102.f64[0] = v100.i64[0];
            v102.f64[1] = v203.f64[0];
            _Q5 = vmlsq_f64(vmulq_f64((float64x2_t)v202, v102), (float64x2_t)vzip2q_s64((int64x2_t)v202, v201), (float64x2_t)vextq_s8((int8x16_t)v203, v100, 8uLL));
            _Q6 = vmulq_f64(v200, _Q5);
            _Q5.f64[0] = _Q5.f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v201, v203), 1), (float64x2_t)v202, v203).f64[0], *(double *)v201.i64);
            _Q5.f64[0] = fabs(_Q6.f64[0]);
            if (_Q5.f64[0] < 0.00000001)
              goto LABEL_6;
LABEL_183:
            *(_QWORD *)&v106 = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u64[0];
            *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
            *((_QWORD *)&v106 + 1) = v202.i64[0];
            *((_QWORD *)&v101 + 1) = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
            v205 = _Q3;
            v206 = v203.f64[0];
            v208 = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u64[0];
            v207 = v106;
            v210 = v100.i64[0];
            v209 = v101;
            sub_20E8BE424((uint64_t)&v193);
            v107.f64[0] = v194;
            v108 = vzip2q_s64(v193, v195);
            v107.f64[1] = v196;
            *(int64x2_t *)v79 = vzip1q_s64(v193, v195);
            v79[1] = (float64x2_t)v108;
            v79[2] = v107;
            goto LABEL_201;
          }
          v86 = sub_20EB24F38((uint64_t)v34, (uint64_t)v92, (uint64_t)v175, v168, 0x14u, v98 * 0.5);
        }
        else
        {
          v86 = sub_20EB38E20(a3, (uint64_t)v188, v189, v190, v191, v192);
        }
      }
      else if (v69 == 9)
      {
        v86 = sub_20EB35004(a3, (uint64_t)v188, v189, v190, (unint64_t)v191, v192, v72.f64[0], v71, v16.f64[0], (int32x4_t)_Q3, v18);
      }
      else
      {
        if (v190)
        {
          v190->f64[0] = 0.0;
          v93->f64[1] = 0.0;
          v93[1].f64[0] = 0.0;
        }
        if (v94)
        {
          *(_QWORD *)(v94 + 64) = 0;
          v72.f64[0] = 0.0;
          *(_OWORD *)(v94 + 32) = 0u;
          *(_OWORD *)(v94 + 48) = 0u;
          *(_OWORD *)v94 = 0u;
          *(_OWORD *)(v94 + 16) = 0u;
        }
        if (v79)
        {
          v86 = sub_20EB277C4((uint64_t)v34, (uint64_t)v79, v92, (uint64_t)v175, 20, v72.f64[0], v71, v16.f64[0], (int32x4_t)_Q3, v18);
        }
        else
        {
          v109 = sqrt(*v92 * *v92 + v92[1] * v92[1]);
          v86 = sub_20EB24018((uint64_t)v34, v92, v175, 20, v109, v109, v16.f64[0], (int32x4_t)_Q3, v18);
        }
      }
    }
LABEL_200:
    if (!v86)
      goto LABEL_6;
LABEL_201:
    if (v185 == 0.0)
      v110 = 1.0;
    else
      v110 = 1.0 / v185;
    v111 = vmulq_n_f64(v184, v110);
    v184 = v111;
    v185 = 1.0;
    if (v183 == 0.0)
      v112 = 1.0;
    else
      v112 = 1.0 / v183;
    v182 = vmulq_n_f64(v182, v112);
    v183 = 1.0;
    _Q3.f64[0] = *(float64_t *)(a5 + 16);
    v18 = *(int32x4_t *)a5;
    _Q5 = *(float64x2_t *)(a5 + 24);
    _Q7 = *(float64x2_t *)(a5 + 48);
    _Q3.f64[1] = *(float64_t *)(a5 + 40);
    v115 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a5, (int64x2_t)_Q5), v111.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a5, (int64x2_t)_Q5), v111, 1), _Q3, v185);
    _D0 = v111.f64[1];
    __asm { FMLA            D3, D0, V7.D[1] }
    v117 = _Q3.f64[0] + *(double *)(a5 + 64) * v185;
    _Q6.f64[0] = v115.f64[1];
    __asm { FMLA            D3, D6, V1.D[1] }
    v118 = _Q3.f64[0] + 1.0 * v117;
    _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a5, v182.f64[0]), _Q5, v182, 1), _Q7, 1.0);
    v119 = vmulq_f64(v115, v115);
    v120 = vmulq_f64(_Q3, _Q3);
    v121 = vaddq_f64(vaddq_f64(v119, (float64x2_t)vdupq_laneq_s64((int64x2_t)v119, 1)), v120);
    v16 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v120, 1);
    v122 = vaddq_f64(v16, v121).f64[0];
    if (v122 == 0.0)
      v123 = 1.0;
    else
      v123 = 1.0 / v122;
    v124 = v118 * v118 * v123;
    v126 = v178[1];
    v125 = (unint64_t)v178[2];
    if ((unint64_t)v126 < v125)
    {
      *v126 = v124;
      v127 = (uint64_t)(v126 + 1);
      goto LABEL_231;
    }
    v128 = *v178;
    v129 = (char *)v126 - (char *)*v178;
    v130 = v129 >> 3;
    v131 = (v129 >> 3) + 1;
    if (v131 >> 61)
      sub_20E867F44();
    v132 = v125 - (_QWORD)v128;
    if (v132 >> 2 > v131)
      v131 = v132 >> 2;
    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
      v133 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v133 = v131;
    if (v133)
    {
      if (v133 >> 61)
        goto LABEL_260;
      v134 = operator new(8 * v133);
      v135 = (double *)&v134[8 * v130];
      *v135 = v124;
      v127 = (uint64_t)(v135 + 1);
      v136 = (char *)v126 - (char *)v128;
      if (v126 == v128)
        goto LABEL_229;
LABEL_223:
      v137 = v136 - 8;
      if (v137 < 0x58)
        goto LABEL_265;
      if ((unint64_t)((char *)v126 - v134 - v129) < 0x20)
        goto LABEL_265;
      v138 = (v137 >> 3) + 1;
      v139 = 8 * (v138 & 0x3FFFFFFFFFFFFFFCLL);
      v140 = &v126[v139 / 0xFFFFFFFFFFFFFFF8];
      v135 = (double *)((char *)v135 - v139);
      v141 = &v134[8 * v130 - 16];
      v142 = v126 - 2;
      v143 = v138 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v144 = *(_OWORD *)v142;
        *(v141 - 1) = *((_OWORD *)v142 - 1);
        *v141 = v144;
        v141 -= 2;
        v142 -= 4;
        v143 -= 4;
      }
      while (v143);
      v126 = v140;
      if (v138 != (v138 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_265:
        do
        {
          v145 = *((_QWORD *)v126-- - 1);
          *((_QWORD *)v135-- - 1) = v145;
        }
        while (v126 != v128);
      }
      goto LABEL_229;
    }
    v134 = 0;
    v135 = (double *)(8 * v130);
    *(double *)(8 * v130) = v124;
    v127 = 8 * v130 + 8;
    v136 = (char *)v126 - (char *)v128;
    if (v126 != v128)
      goto LABEL_223;
LABEL_229:
    *v178 = v135;
    v178[1] = (double *)v127;
    v178[2] = (double *)&v134[8 * v133];
    if (v128)
      operator delete(v128);
LABEL_231:
    v178[1] = (double *)v127;
    if (v124 < a8)
    {
      v146 = (char *)__p[1];
      if (__p[1] < v187)
      {
        *(_QWORD *)__p[1] = *(_QWORD *)v10;
        v21 = v146 + 8;
        goto LABEL_5;
      }
      v147 = __p[0];
      v148 = (char *)__p[1] - (char *)__p[0];
      v149 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v150 = v149 + 1;
      if ((unint64_t)(v149 + 1) >> 61)
        sub_20E867F44();
      v151 = v187 - (char *)__p[0];
      if ((v187 - (char *)__p[0]) >> 2 > v150)
        v150 = v151 >> 2;
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
        v152 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v152 = v150;
      if (v152)
      {
        if (v152 >> 61)
LABEL_260:
          sub_20E877A38();
        v153 = operator new(8 * v152);
        v154 = &v153[8 * v149];
        *v154 = *(_QWORD *)v10;
        v21 = v154 + 1;
        v155 = v146 - v147;
        if (v146 != v147)
        {
LABEL_242:
          v156 = v155 - 8;
          if (v156 < 0x58)
            goto LABEL_266;
          if ((unint64_t)(v146 - v153 - v148) < 0x20)
            goto LABEL_266;
          v157 = (v156 >> 3) + 1;
          v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
          v159 = &v146[-v158];
          v154 = (_QWORD *)((char *)v154 - v158);
          v160 = &v153[8 * v149 - 16];
          v161 = v146 - 16;
          v162 = v157 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v163 = *(_OWORD *)v161;
            *(v160 - 1) = *((_OWORD *)v161 - 1);
            *v160 = v163;
            v160 -= 2;
            v161 -= 32;
            v162 -= 4;
          }
          while (v162);
          v146 = v159;
          if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_266:
            do
            {
              v164 = *((_QWORD *)v146 - 1);
              v146 -= 8;
              *--v154 = v164;
            }
            while (v146 != v147);
          }
          v146 = (char *)__p[0];
          __p[0] = v154;
          __p[1] = v21;
          v187 = &v153[8 * v152];
          if (!v146)
            goto LABEL_5;
LABEL_252:
          operator delete(v146);
LABEL_5:
          __p[1] = v21;
          goto LABEL_6;
        }
      }
      else
      {
        v153 = 0;
        v154 = (_QWORD *)(8 * v149);
        *(_QWORD *)(8 * v149) = *(_QWORD *)v10;
        v21 = (void *)(8 * v149 + 8);
        v155 = v146 - v147;
        if (v146 != v147)
          goto LABEL_242;
      }
      __p[0] = v154;
      __p[1] = v21;
      v187 = &v153[8 * v152];
      if (v146)
        goto LABEL_252;
      goto LABEL_5;
    }
LABEL_6:
    v10 += 2;
  }
  while (v10 != v179);
  v165 = *a6;
  v166 = (int *)v187;
  *(_OWORD *)a6 = *(_OWORD *)__p;
  v167 = a6[2];
  a6[2] = v166;
  __p[0] = v165;
  v187 = (char *)v167;
  if (v165)
  {
    __p[1] = v165;
    operator delete(v165);
  }
}

void sub_20EA8D1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA8D22C(uint64_t a1, uint64_t a2)
{
  float64x2_t *v2;
  float64x2_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  simd_double2 v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  simd_double2x2 v64;
  simd_double2x2 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = *(float64x2_t **)a1;
  v2 = *(float64x2_t **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    if (*(_DWORD *)(a2 + 212))
    {
      v8 = *(float64x2_t *)(a2 + 192);
      v9 = vaddq_f64(v8, v8);
      v10 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
      v11 = 20;
      v12 = *v2;
      do
      {
        v13 = vmulq_f64(v12, v12);
        v14 = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1), v13);
        v13.f64[0] = vaddvq_f64(v13);
        v15 = *(double *)(a2 + 168) * v13.f64[0]
            + 1.0
            + v13.f64[0] * (*(double *)(a2 + 176) * v13.f64[0])
            + v13.f64[0] * (v13.f64[0] * (*(double *)(a2 + 184) * v13.f64[0]));
        v16 = vmulq_n_f64(v9, v12.f64[0]);
        v17 = vaddq_f64(v12, v12);
        if (v15 == 0.0)
          v15 = 1.0;
        v12 = vdivq_f64(vsubq_f64(*v2, vaddq_f64(vmulq_laneq_f64(v16, v12, 1), vmulq_f64(v10, vaddq_f64(vmulq_f64(v12, v17), (float64x2_t)vdupq_lane_s64(v14, 0))))), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0));
        --v11;
      }
      while (v11);
      *v3 = v12;
      v3[1].f64[0] = 1.0;
      if (!v4)
        goto LABEL_34;
    }
    else
    {
      v37 = *(double *)(a2 + 168);
      v38 = *(double *)(a2 + 176);
      if (*(_DWORD *)(a2 + 208) > 2u)
      {
        v59 = 20;
        v60 = v2->f64[1];
        v61 = v2->f64[0];
        do
        {
          v62 = v60 * v60 + v61 * v61;
          v63 = v37 * v62 + 1.0 + v62 * (v38 * v62) + v62 * (v62 * (*(double *)(a2 + 184) * v62));
          if (v63 == 0.0)
            v63 = 1.0;
          v61 = v2->f64[0] / v63;
          v60 = v2->f64[1] / v63;
          --v59;
        }
        while (v59);
        v3->f64[0] = v61;
        v3->f64[1] = v60;
        v3[1].f64[0] = 1.0;
        if (!v4)
          goto LABEL_34;
      }
      else
      {
        v39 = 20;
        v40 = v2->f64[1];
        v41 = v2->f64[0];
        do
        {
          v42 = v37 * (v40 * v40 + v41 * v41) + 1.0 + (v40 * v40 + v41 * v41) * (v38 * (v40 * v40 + v41 * v41));
          if (v42 == 0.0)
            v42 = 1.0;
          v41 = v2->f64[0] / v42;
          v40 = v2->f64[1] / v42;
          --v39;
        }
        while (v39);
        v3->f64[0] = v41;
        v3->f64[1] = v40;
        v3[1].f64[0] = 1.0;
        if (!v4)
          goto LABEL_34;
      }
    }
    goto LABEL_33;
  }
  if (*(_DWORD *)(a2 + 212))
  {
    if (!sub_20EB28490(*(float64x2_t **)a1, v65.columns, v2, (double *)(a2 + 168), (float64x2_t *)(a2 + 192), 20))
      return 0;
  }
  else
  {
    v18 = *(double *)(a2 + 168);
    v19 = *(double *)(a2 + 176);
    if (*(_DWORD *)(a2 + 208) > 2u)
    {
      v43 = 20;
      v44 = v2->f64[1];
      v45 = v2->f64[0];
      do
      {
        v46 = v44 * v44 + v45 * v45;
        v47 = v18 * v46 + 1.0 + v46 * (v19 * v46) + v46 * (v46 * (*(double *)(a2 + 184) * v46));
        if (v47 == 0.0)
          v47 = 1.0;
        v45 = v2->f64[0] / v47;
        v44 = v2->f64[1] / v47;
        --v43;
      }
      while (v43);
      v3->f64[0] = v45;
      v3->f64[1] = v44;
      v48 = *(double *)(a2 + 168);
      v49 = *(double *)(a2 + 176);
      v50 = *(double *)(a2 + 184);
      _Q3 = *v3;
      _D5 = v3->f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      v54 = v48 * _D4 + 1.0 + _D4 * _D4 * (v49 + v50 * _D4);
      v55 = vmulq_n_f64(*v3, v48 + v48 + _D4 * (v49 * 4.0 + v50 * 6.0 * _D4));
      v56 = vmulq_n_f64(v55, v3->f64[0]);
      v57 = vmulq_laneq_f64(v55, *v3, 1);
      v64.columns[1].f64[0] = v57.f64[0];
      v56.f64[0] = v54 + v56.f64[0];
      v64.columns[0] = (simd_double2)v56;
      v64.columns[1].f64[1] = v54 + v57.f64[1];
      if (sub_20E8BE318((double *)&v64) == 0.0)
        return 0;
    }
    else
    {
      v20 = 20;
      v21 = v2->f64[1];
      v22 = v2->f64[0];
      do
      {
        v23 = v18 * (v21 * v21 + v22 * v22) + 1.0 + (v21 * v21 + v22 * v22) * (v19 * (v21 * v21 + v22 * v22));
        if (v23 == 0.0)
          v23 = 1.0;
        v22 = v2->f64[0] / v23;
        v21 = v2->f64[1] / v23;
        --v20;
      }
      while (v20);
      v3->f64[0] = v22;
      v3->f64[1] = v21;
      v24 = *(double *)(a2 + 168);
      v25 = *(double *)(a2 + 176);
      _Q2 = *v3;
      _D4 = v3->f64[1];
      __asm { FMLA            D3, D4, V2.D[1] }
      v33 = v24 * _D3 + 1.0 + _D3 * _D3 * (v25 + _D3 * 0.0);
      v34 = vmulq_n_f64(*v3, v24 + v24 + _D3 * (v25 * 4.0 + _D3 * 0.0));
      v35 = vmulq_n_f64(v34, v3->f64[0]);
      v36 = vmulq_laneq_f64(v34, *v3, 1);
      v64.columns[1].f64[0] = v36.f64[0];
      v35.f64[0] = v33 + v35.f64[0];
      v64.columns[0] = (simd_double2)v35;
      v64.columns[1].f64[1] = v33 + v36.f64[1];
      if (sub_20E8BE318((double *)&v64) == 0.0)
        return 0;
    }
    sub_20E8BE3B0(&v64, &v65);
  }
  v58 = v65.columns[1];
  *(simd_double2 *)v5 = v65.columns[0];
  *(simd_double2 *)(v5 + 16) = v58;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v3[1].f64[0] = 1.0;
  if (v4)
  {
LABEL_33:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
LABEL_34:
  if (v6)
  {
    *(_QWORD *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  return 1;
}

uint64_t sub_20EA8D684(uint64_t a1, uint64_t a2, int64x2_t *a3, float *a4, float64x2_t *a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  double v20;
  double v21;
  unint64_t v22;
  double v23;
  int64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v45;
  int v46;
  float64x2_t v47;
  int64x2_t v48;
  double v49;
  float64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int64x2_t v54;
  int64x2_t v55;
  double v56;
  float64x2_t v57;
  double v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;

  _Q1 = *(float64x2_t *)a2;
  _D2 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D0, D2, V1.D[1] }
  v20 = sqrt(_D0);
  v21 = v20 * *a4;
  v22 = (unint64_t)v21;
  if ((unint64_t)v21 >= 0x1F)
    v22 = 31;
  v23 = v20 * a4[v22 + 2] + a4[v22 + 34];
  if (v21 <= 32.0)
  {
    v33 = a3[1];
    v34 = (float64x2_t)vzip2q_s64(*a3, v33);
    v35 = (float64x2_t)vzip1q_s64(*a3, v33);
    v36 = v23 * v23;
    a13 = vmulq_n_f64(vaddq_f64(vmulq_f64(v35, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v34, (float64x2_t)xmmword_210312E20), v23 * v23)), v23 * v23);
    a13.f64[0] = a13.f64[0] + vmuld_lane_f64(v36 * v36, a13, 1) + 1.0;
    if (a13.f64[0] != 0.0)
    {
      v37 = vmulq_n_f64(vaddq_f64(v35, vmulq_n_f64(v34, v36)), v36);
      v23 = v23 + (v20 - (v23 + v23 * (v37.f64[0] + vmuld_lane_f64(v36 * v36, v37, 1)))) / a13.f64[0];
      v38 = 0.0;
      if (v23 <= 0.0)
        goto LABEL_12;
    }
  }
  else if (a6)
  {
    v24 = a3[1];
    v25 = (float64x2_t)vzip1q_s64(*a3, v24);
    v26 = (float64x2_t)vzip2q_s64(*a3, v24);
    v27 = vmulq_f64(v26, (float64x2_t)xmmword_210312E20);
    a13 = vmulq_f64(v25, (float64x2_t)xmmword_210312E10);
    do
    {
      v28 = v23 * v23;
      v29 = vmulq_n_f64(vaddq_f64(a13, vmulq_n_f64(v27, v23 * v23)), v23 * v23);
      v30 = v28 * v28;
      v31 = v29.f64[0] + vmuld_lane_f64(v28 * v28, v29, 1) + 1.0;
      if (v31 == 0.0)
        break;
      v32 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64(v26, v28)), v28);
      v23 = fmax(v23 + (v20 - (v23 + v23 * (v32.f64[0] + vmuld_lane_f64(v30, v32, 1)))) / v31, 0.0);
      --a6;
    }
    while (a6);
  }
  v38 = v23;
  if (v23 > 3.14159265)
    return 0;
LABEL_12:
  v39 = v38 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
  a13.f64[0] = v38 + v39 * -1.57079633 + v39 * -5.39030286e-15 + v39 * -8.84372057e-29;
  v40 = a13.f64[0] * a13.f64[0] * (a13.f64[0] * a13.f64[0]);
  __asm { FMOV            V4.2D, #1.0 }
  v41 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, a13.f64[0] * a13.f64[0]), _Q4), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, a13.f64[0] * a13.f64[0]), (float64x2_t)xmmword_210312E80), v40));
  v42 = vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, a13.f64[0] * a13.f64[0]), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, a13.f64[0] * a13.f64[0]), (float64x2_t)xmmword_210312E90), v40)), v40 * v40);
  v43 = vaddq_f64(v41, v42);
  _Q4.f64[0] = a13.f64[0];
  v45 = (int)v39 & 3;
  if (v20 >= 0.0001)
  {
    LODWORD(a13.f64[0]) = 0;
    v42 = xmmword_210312EF0[v45];
    v51 = vmulq_f64(_Q4, v42);
    v48 = (int64x2_t)vmulq_f64(v43, v51);
    v46 = (int)v39 & 1;
    LODWORD(v51.f64[0]) = v46;
    v52 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v51, (int32x4_t)a13), 0);
    v47 = (float64x2_t)vdupq_laneq_s64(v48, 1);
    v49 = *(double *)vbslq_s8(v52, (int8x16_t)v48, (int8x16_t)v47).i64 / v20;
  }
  else
  {
    v46 = (int)v39 & 1;
    v47 = xmmword_210312EF0[v45];
    v48 = (int64x2_t)vmulq_f64(v43, vmulq_f64(_Q4, v47));
    v49 = 1.0;
  }
  LODWORD(v47.f64[0]) = 0;
  LODWORD(v42.f64[0]) = v46;
  v53 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, (int32x4_t)v47), 0), (int8x16_t)v48, (int8x16_t)vdupq_lane_s64(v48.i64[0], 0));
  *(float64x2_t *)a1 = vmulq_n_f64(_Q1, v49);
  *(_QWORD *)(a1 + 16) = v53.i64[1];
  if (a5)
  {
    v54 = (int64x2_t)vmulq_f64((float64x2_t)a3[1], (float64x2_t)xmmword_210312EA0);
    v55 = (int64x2_t)vmulq_f64(*(float64x2_t *)a3, (float64x2_t)xmmword_210312EB0);
    v56 = v38 * v38;
    v57 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(v55, v54), vmulq_n_f64((float64x2_t)vzip2q_s64(v55, v54), v56)), v56);
    v58 = v57.f64[0] + vmuld_lane_f64(v56 * v56, v57, 1) + 1.0;
    if (v20 >= 0.0001)
      v59 = (*(double *)&v53.i64[1] / v58 - v49) / (v20 * v20);
    else
      v59 = -0.333333333;
    v60.f64[0] = 0.0;
    v60.f64[1] = v49;
    v61 = vmulq_n_f64(*(float64x2_t *)a2, v59);
    v62 = vmlaq_laneq_f64(v60, v61, *(float64x2_t *)a2, 1);
    *a5 = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v49, v61, *(double *)a2);
    a5[1] = v62;
    a5[2] = vdivq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v58), 0));
  }
  return 1;
}

void sub_20EA8DA34(int a1@<W0>, std::string *a2@<X8>)
{
  std::string __p;

  switch(a1)
  {
    case 0:
      sub_20E8610C0(a2, "D10");
      break;
    case 1:
      sub_20E8610C0(a2, "D11");
      break;
    case 2:
      sub_20E8610C0(a2, "D16");
      break;
    case 3:
      sub_20E8610C0(a2, "D17");
      break;
    case 4:
      sub_20E8610C0(a2, "D20");
      break;
    case 5:
      sub_20E8610C0(a2, "D21");
      break;
    case 6:
      sub_20E8610C0(a2, "D22");
      break;
    case 7:
      sub_20E8610C0(a2, "D27");
      break;
    case 8:
      sub_20E8610C0(a2, "D28");
      break;
    case 9:
      sub_20E8610C0(a2, "D32");
      break;
    case 10:
      sub_20E8610C0(a2, "D33");
      break;
    case 11:
      sub_20E8610C0(a2, "D37");
      break;
    case 12:
      sub_20E8610C0(a2, "D38");
      break;
    case 13:
      sub_20E8610C0(a2, "D42");
      break;
    case 14:
      sub_20E8610C0(a2, "D43");
      break;
    case 15:
      sub_20E8610C0(a2, "D49");
      break;
    case 16:
      sub_20E8610C0(a2, "D52g");
      break;
    case 17:
      sub_20E8610C0(a2, "D53g");
      break;
    case 18:
      sub_20E8610C0(a2, "D53p");
      break;
    case 19:
      sub_20E8610C0(a2, "D54p");
      break;
    case 20:
      sub_20E8610C0(a2, "D63");
      break;
    case 21:
      sub_20E8610C0(a2, "D64");
      break;
    case 22:
      sub_20E8610C0(a2, "D73");
      break;
    case 23:
      sub_20E8610C0(a2, "D74");
      break;
    case 24:
      sub_20E8610C0(a2, "D79");
      break;
    case 25:
      sub_20E8610C0(a2, "D83");
      break;
    case 26:
      sub_20E8610C0(&__p, "_PSIM");
      sub_20E8B0848("D83", &__p, a2);
      goto LABEL_95;
    case 27:
      sub_20E8610C0(a2, "D84");
      break;
    case 28:
      sub_20E8610C0(&__p, "_PSIM");
      sub_20E8B0848("D84", &__p, a2);
LABEL_95:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      break;
    case 29:
      sub_20E8610C0(a2, "Generic");
      break;
    case 30:
      sub_20E8610C0(a2, "J120");
      break;
    case 31:
      sub_20E8610C0(a2, "J121");
      break;
    case 32:
      sub_20E8610C0(a2, "J127");
      break;
    case 33:
      sub_20E8610C0(a2, "J128");
      break;
    case 34:
      sub_20E8610C0(a2, "J171");
      break;
    case 35:
      sub_20E8610C0(a2, "J171a");
      break;
    case 36:
      sub_20E8610C0(a2, "J172");
      break;
    case 37:
      sub_20E8610C0(a2, "J172a");
      break;
    case 38:
      sub_20E8610C0(a2, "J181");
      break;
    case 39:
      sub_20E8610C0(a2, "J182");
      break;
    case 40:
      sub_20E8610C0(a2, "J207");
      break;
    case 41:
      sub_20E8610C0(a2, "J208");
      break;
    case 42:
      sub_20E8610C0(a2, "J210");
      break;
    case 43:
      sub_20E8610C0(a2, "J211");
      break;
    case 44:
      sub_20E8610C0(a2, "J217");
      break;
    case 45:
      sub_20E8610C0(a2, "J218");
      break;
    case 46:
      sub_20E8610C0(a2, "J271");
      break;
    case 47:
      sub_20E8610C0(a2, "J272");
      break;
    case 48:
      sub_20E8610C0(a2, "J307");
      break;
    case 49:
      sub_20E8610C0(a2, "J308");
      break;
    case 50:
      sub_20E8610C0(a2, "J310");
      break;
    case 51:
      sub_20E8610C0(a2, "J311");
      break;
    case 52:
      sub_20E8610C0(a2, "J317");
      break;
    case 53:
      sub_20E8610C0(a2, "J318");
      break;
    case 54:
      sub_20E8610C0(a2, "J320");
      break;
    case 55:
      sub_20E8610C0(a2, "J321");
      break;
    case 56:
      sub_20E8610C0(a2, "J407");
      break;
    case 57:
      sub_20E8610C0(a2, "J408");
      break;
    case 58:
      sub_20E8610C0(a2, "J417");
      break;
    case 59:
      sub_20E8610C0(a2, "J418");
      break;
    case 60:
      sub_20E8610C0(a2, "J420");
      break;
    case 61:
      sub_20E8610C0(a2, "J421");
      break;
    case 62:
      sub_20E8610C0(a2, "J517");
      break;
    case 63:
      sub_20E8610C0(a2, "J518");
      break;
    case 64:
      sub_20E8610C0(a2, "J519");
      break;
    case 65:
      sub_20E8610C0(a2, "J522");
      break;
    case 66:
      sub_20E8610C0(a2, "J523");
      break;
    case 67:
      sub_20E8610C0(a2, "J524");
      break;
    case 68:
      sub_20E8610C0(a2, "J617");
      break;
    case 69:
      sub_20E8610C0(a2, "J618");
      break;
    case 70:
      sub_20E8610C0(a2, "J619");
      break;
    case 71:
      sub_20E8610C0(a2, "J620");
      break;
    case 72:
      sub_20E8610C0(a2, "J621");
      break;
    case 73:
      sub_20E8610C0(a2, "J622");
      break;
    case 74:
      sub_20E8610C0(a2, "J71b");
      break;
    case 75:
      sub_20E8610C0(a2, "J71s");
      break;
    case 76:
      sub_20E8610C0(a2, "J71t");
      break;
    case 77:
      sub_20E8610C0(a2, "J72b");
      break;
    case 78:
      sub_20E8610C0(a2, "J72s");
      break;
    case 79:
      sub_20E8610C0(a2, "J72t");
      break;
    case 80:
      sub_20E8610C0(a2, "J81");
      break;
    case 81:
      sub_20E8610C0(a2, "J82");
      break;
    case 82:
      sub_20E8610C0(a2, "J96");
      break;
    case 83:
      sub_20E8610C0(a2, "J97");
      break;
    case 84:
      sub_20E8610C0(a2, "J98");
      break;
    case 85:
      sub_20E8610C0(a2, "J99");
      break;
    case 86:
      sub_20E8610C0(a2, "N102");
      break;
    case 87:
      sub_20E8610C0(a2, "N104");
      break;
    case 88:
      sub_20E8610C0(a2, "N112");
      break;
    case 89:
      sub_20E8610C0(a2, "N301");
      break;
    case 90:
      sub_20E8610C0(a2, "N56");
      break;
    case 91:
      sub_20E8610C0(a2, "N61");
      break;
    case 92:
      sub_20E8610C0(a2, "N66");
      break;
    case 93:
      sub_20E8610C0(a2, "N69");
      break;
    case 94:
      sub_20E8610C0(a2, "N71");
      break;
    case 95:
      sub_20E8610C0(a2, "N84");
      break;
    case 96:
      sub_20E8610C0(a2, "ST2");
      break;
    case 97:
      sub_20E8610C0(a2, "ST3");
      break;
    case 98:
      sub_20E8610C0(a2, "Ximea");
      break;
    case 99:
      sub_20E8610C0(a2, "D47");
      break;
    case 100:
      sub_20E8610C0(a2, "D48");
      break;
    case 101:
      sub_20E8610C0(a2, "D93");
      break;
    case 102:
      sub_20E8610C0(a2, "D94");
      break;
    case 103:
      sub_20E8610C0(a2, "J507");
      break;
    case 104:
      sub_20E8610C0(a2, "J508");
      break;
    case 105:
      sub_20E8610C0(a2, "J537");
      break;
    case 106:
      sub_20E8610C0(a2, "J538");
      break;
    case 107:
      sub_20E8610C0(a2, "J717");
      break;
    case 108:
      sub_20E8610C0(a2, "J718");
      break;
    case 109:
      sub_20E8610C0(a2, "J720");
      break;
    case 110:
      sub_20E8610C0(a2, "J721");
      break;
    case 111:
      sub_20E8610C0(a2, "Merak");
      break;
    default:
      sub_20E8610C0(a2, "Unknown");
      break;
  }
}

void sub_20EA8E6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20EA8E71C(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 101) > 9 || ((1 << (a1 - 101)) & 0x3C3) == 0)
    return (a1 - 25) < 4;
  return result;
}

uint64_t sub_20EA8E754(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v9;
  int v10;
  int v12;
  size_t size;
  BOOL v14;
  std::string *p_p;
  int v17;
  size_t v18;
  BOOL v19;
  std::string *v20;
  std::string __p;
  char v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v2 = sub_20EA8EAA0((unsigned __int8 **)&off_24C9C1850, (unsigned __int8 **)&off_24C9C2240, (uint64_t)&v22, (unsigned __int8 **)a1);
  if (v2 != (unsigned __int8 **)&off_24C9C2240)
    return *((unsigned int *)v2 + 4);
  v2 = sub_20EA8EAA0((unsigned __int8 **)&off_24C9C2240, (unsigned __int8 **)&unk_24C9C23D8, (uint64_t)&v22, (unsigned __int8 **)a1);
  if (v2 != (unsigned __int8 **)&unk_24C9C23D8)
    return *((unsigned int *)v2 + 4);
  v4 = *(unsigned __int8 **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 == 7)
  {
    v9 = *(_DWORD *)v4;
    v10 = *(_DWORD *)(v4 + 3);
    if (v9 == 1701733703 && v10 == 1667854949)
      return 29;
  }
  else if (v5 == 5)
  {
    v6 = *(_DWORD *)v4;
    v7 = v4[4];
    if (v6 == 1701669208 && v7 == 97)
      return 98;
  }
  v23 = "D83";
  v24 = 3;
  v25 = "_PSIM";
  v26 = 5;
  sub_20E8778D4((uint64_t)&v23, (uint64_t)&v27, 0, 0, &__p);
  v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (*(_QWORD *)(a1 + 8) < size)
  {
    v14 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v14 = memcmp(*(const void **)a1, p_p, size) == 0;
  if (v12 < 0)
LABEL_26:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_27:
  if (v14)
    return 26;
  if (*(_QWORD *)(a1 + 8) >= 3uLL && **(_WORD **)a1 == 14404 && *(_BYTE *)(*(_QWORD *)a1 + 2) == 51)
    return 25;
  v23 = "D84";
  v24 = 3;
  v25 = "_PSIM";
  v26 = 5;
  sub_20E8778D4((uint64_t)&v23, (uint64_t)&v27, 0, 0, &__p);
  v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  if (*(_QWORD *)(a1 + 8) >= v18)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__p;
    else
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v19 = memcmp(*(const void **)a1, v20, v18) == 0;
  }
  else
  {
    v19 = 0;
  }
  if (v17 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v19)
    return 28;
  if (sub_20EA8EA38(*(const void **)a1, *(_QWORD *)(a1 + 8), "D84"))
    return 27;
  if (qword_254A5AD50 != -1)
    dispatch_once(&qword_254A5AD50, &unk_24C9C23F8);
  if (byte_254A5AD48)
    return 89;
  else
    return 112;
}

BOOL sub_20EA8EA38(const void *a1, size_t a2, char *__s)
{
  size_t v6;

  v6 = strlen(__s);
  return v6 <= a2 && memcmp(a1, __s, v6) == 0;
}

unsigned __int8 **sub_20EA8EAA0(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 **v4;
  std::string::size_type v7;
  unsigned __int8 *v8;
  std::string::size_type v9;
  int v10;
  std::string::size_type v11;
  int v12;
  std::string::value_type v13;
  std::string::size_type v14;
  unsigned __int8 *v15;
  std::string::value_type v16;
  char v17;
  std::string::size_type size;
  std::string::size_type v19;
  int v20;
  std::string *v21;
  uint64_t v22;
  std::string *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  BOOL v30;
  std::string __p;
  std::string v33;

  v4 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v8 = *a4;
      v7 = (std::string::size_type)a4[1];
      v9 = v7 - 2;
      if (v7 >= 2)
      {
        v10 = *(unsigned __int16 *)&v8[v9];
        if (v7 < v9)
          v9 = (std::string::size_type)a4[1];
        if (v10 == 20545)
          v7 = v9;
        v11 = v7 - 3;
        if (v7 >= 3)
        {
          v12 = *(unsigned __int16 *)&v8[v11] ^ 0x4544 | v8[v11 + 2] ^ 0x56;
          if (v7 < v11)
            v11 = v7;
          if (!v12)
            v7 = v11;
        }
      }
      memset(&v33, 0, sizeof(v33));
      std::string::reserve(&v33, v7);
      for (; v7; --v7)
      {
        v13 = __toupper(*v8);
        std::string::push_back(&v33, v13);
        ++v8;
      }
      v15 = *v4;
      v14 = (std::string::size_type)v4[1];
      memset(&__p, 0, sizeof(__p));
      std::string::reserve(&__p, v14);
      for (; v14; --v14)
      {
        v16 = __toupper(*v15);
        std::string::push_back(&__p, v16);
        ++v15;
      }
      v17 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      else
        size = v33.__r_.__value_.__l.__size_;
      v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = __p.__r_.__value_.__l.__size_;
      if (size != v19)
      {
        v30 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_38;
        goto LABEL_42;
      }
      v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (*((_BYTE *)&v33.__r_.__value_.__s + 23))
      {
        v22 = HIBYTE(v33.__r_.__value_.__r.__words[2]) - 1;
        v23 = &v33;
        do
        {
          v25 = v23->__r_.__value_.__s.__data_[0];
          v23 = (std::string *)((char *)v23 + 1);
          v24 = v25;
          v27 = v21->__r_.__value_.__s.__data_[0];
          v21 = (std::string *)((char *)v21 + 1);
          v26 = v27;
          v29 = v22-- != 0;
          v30 = v24 == v26;
        }
        while (v24 == v26 && v29);
LABEL_37:
        if ((v20 & 0x80000000) == 0)
          goto LABEL_38;
        goto LABEL_42;
      }
      v30 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_38:
        if (v17 < 0)
          goto LABEL_43;
        goto LABEL_39;
      }
LABEL_42:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_43:
        operator delete(v33.__r_.__value_.__l.__data_);
        if (v30)
          return v4;
        goto LABEL_44;
      }
LABEL_39:
      if (v30)
        return v4;
LABEL_44:
      v4 += 3;
      if (v4 == a2)
        return a2;
    }
    v30 = memcmp(v33.__r_.__value_.__l.__data_, v21, v33.__r_.__value_.__l.__size_) == 0;
    goto LABEL_37;
  }
  return v4;
}

void sub_20EA8EC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA8ECD8()
{
  uint64_t result;

  result = MGGetProductType();
  byte_254A5AD48 |= result == 2421369923 || result == 3040923023;
  return result;
}

void sub_20EA8ED20(uint64_t a1, unsigned int a2, int a3)
{
  float v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  void *v29;
  void *v30;
  void *__p;
  void *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;

  if (a3 >= 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 102, (uint64_t)"stream_id < 2", 13, (uint64_t)"Only stream ID 0 and 1 are supported.", 37, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_55;
    }
    return;
  }
  v6 = (float)a2;
  if (a3 != 1)
  {
    v16 = (_DWORD *)(a1 + 8);
    *(double *)&v27 = (float)((float)*(unsigned int *)(a1 + 8) / v6);
    sub_20EA7746C(a1 + 8, (uint64_t)v28, v27);
    sub_20E9DA564(a1 + 8, v28);
    v17 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v33;
    v21 = v27;
    if (v33)
    {
      v22 = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v21 = v27;
      }
    }
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
      v21 = v27;
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
      v21 = v27;
    }
    *(double *)(a1 + 528) = *(double *)(a1 + 528) * *(double *)&v21;
    if (*(_BYTE *)(a1 + 440))
      *(float64x2_t *)(a1 + 416) = vdivq_f64(*(float64x2_t *)(a1 + 416), (float64x2_t)vdupq_lane_s64(v21, 0));
    v24 = *(_DWORD *)(a1 + 12);
    v25 = vcvtas_u32_f32((float)(v6 * (float)v24) / (float)*(unsigned int *)(a1 + 8));
    if (v25)
    {
      if (v24 != v25)
        goto LABEL_51;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationData.h", 286, (uint64_t)"height > 0", 10, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_55;
      }
      if (*(_DWORD *)(a1 + 12))
      {
LABEL_51:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 114, (uint64_t)"primary.GetAspectRatioPreservingHeight(target_image_width) == primary.image_height_ && primary.image_width_ == target_image_width", 129, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_55;
        }
LABEL_52:
        if ((a3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 4) != 2)
          return;
        goto LABEL_3;
      }
    }
    if (*v16 == a2)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_3:
  *(double *)&v26 = (float)((float)*(unsigned int *)(a1 + 536) / v6);
  sub_20EA7746C(a1 + 536, (uint64_t)v28, v26);
  sub_20E9DA564(a1 + 536, v28);
  v7 = v34;
  if (v34)
  {
    v8 = (unint64_t *)&v34->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v33;
  v11 = v26;
  if (v33)
  {
    v12 = (unint64_t *)&v33->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v11 = v26;
    }
  }
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
    v11 = v26;
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
    v11 = v26;
  }
  *(double *)(a1 + 1056) = *(double *)(a1 + 1056) * *(double *)&v11;
  if (*(_BYTE *)(a1 + 968))
    *(float64x2_t *)(a1 + 944) = vdivq_f64(*(float64x2_t *)(a1 + 944), (float64x2_t)vdupq_lane_s64(v11, 0));
  v14 = *(_DWORD *)(a1 + 540);
  v15 = vcvtas_u32_f32((float)(v6 * (float)v14) / (float)*(unsigned int *)(a1 + 536));
  if (v15)
  {
    if (v14 != v15)
      goto LABEL_46;
LABEL_45:
    if (*(_DWORD *)(a1 + 536) == a2)
      return;
    goto LABEL_46;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationData.h", 286, (uint64_t)"height > 0", 10, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_55;
  }
  if (!*(_DWORD *)(a1 + 540))
    goto LABEL_45;
LABEL_46:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 127, (uint64_t)"secondary.GetAspectRatioPreservingHeight(target_image_width) == secondary.image_height_ && secondary.image_width_ == target_image_width", 135, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_55:
    abort();
  }
}

void sub_20EA8F108(int **a1, unsigned int a2)
{
  int *v2;
  int *v3;
  _DWORD *v6;
  _DWORD *v7;
  int *v8;
  int *v9;
  std::logic_error *exception;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v2 = *a1;
  v3 = a1[1];
  v15 = &v11;
  if (v2 != v3)
  {
    do
    {
      v14 = *v2;
      sub_20EA9AB98((uint64_t *)&v15, &v14);
      v2 += 272;
    }
    while (v2 != v3);
    v6 = v11;
    v7 = v12;
    if (v11 != v12)
    {
      do
      {
        v8 = *a1;
        v9 = a1[1];
        if (*a1 != v9)
        {
          while (*v8 != *v6)
          {
            v8 += 272;
            if (v8 == v9)
              goto LABEL_14;
          }
        }
        if (v8 == v9)
        {
LABEL_14:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Requested camera id not found.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        sub_20EA8ED20((uint64_t)v8, a2, -1);
        ++v6;
      }
      while (v6 != v7);
      v6 = v11;
    }
    if (v6)
    {
      v12 = v6;
      operator delete(v6);
    }
  }
}

void sub_20EA8F224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20EA8F258(uint64_t a1, int a2)
{
  _DWORD *result;
  _DWORD *v4;
  std::logic_error *exception;

  result = *(_DWORD **)a1;
  v4 = *(_DWORD **)(a1 + 8);
  if (result != v4)
  {
    while (*result != a2)
    {
      result += 272;
      if (result == v4)
        goto LABEL_4;
    }
  }
  if (result == v4)
  {
LABEL_4:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20EA8F2D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20EA8F2E8(int a1, unsigned int a2)
{
  _BOOL8 result;

  if (a1 != 2)
  {
    if (a1 == 1)
    {
      if (!a2
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 604, (uint64_t)"stream_id == 0", 14, (uint64_t)"Incorrect stream id", 19, (void (*)(void **))sub_21023DDB0))
      {
        return 1;
      }
    }
    else
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 614, (uint64_t)&unk_21025022A, 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_21023DDB0);
    }
LABEL_10:
    abort();
  }
  result = a2 == 0;
  if (a2 >= 2)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 607, (uint64_t)"(stream_id == 0 || stream_id == 1)", 34, (uint64_t)"Incorrect stream id", 19, (void (*)(void **))sub_21023DDB0);
    if (result)
      goto LABEL_10;
  }
  return result;
}

void sub_20EA8F3C4(char **a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  unint64_t v3;
  char *v6;
  char *v7;
  unsigned int *v9;
  float v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  unint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  std::logic_error *exception;
  unsigned int *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t v69;
  int v70;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v6 = *a1;
  v7 = a1[1];
  *(_QWORD *)&v64 = &v67;
  if (v6 == v7)
    goto LABEL_64;
  do
  {
    v70 = *(_DWORD *)v6;
    sub_20EA9AB98((uint64_t *)&v64, &v70);
    v6 += 1088;
  }
  while (v6 != v7);
  v9 = v67;
  v63 = v68;
  if (v67 == v68)
    goto LABEL_62;
  v10 = (float)a2;
  do
  {
    v11 = *v9;
    v13 = *a1;
    v12 = a1[1];
    if (*a1 != v12)
    {
      while (*(_DWORD *)v13 != v11)
      {
        v13 += 1088;
        if (v13 == v12)
          goto LABEL_85;
      }
    }
    if (v13 == v12)
    {
LABEL_85:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Requested camera id not found.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v14 = *((unsigned int *)v13 + 2);
    v15 = *((unsigned int *)v13 + 3);
    LODWORD(v3) = vcvtas_u32_f32((float)(v10 * (float)v15) / (float)v14);
    if ((_DWORD)v3)
    {
      if (v11 < 0x10000)
        goto LABEL_17;
LABEL_16:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
LABEL_86:
        abort();
      }
      goto LABEL_17;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationData.h", 286, (uint64_t)"height > 0", 10, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_86;
    }
    v11 = *v9;
    if (v11 >= 0x10000)
      goto LABEL_16;
LABEL_17:
    sub_210122F60((unint64_t *)&v64, v14, v15, a2, v3, v11);
    v17 = a3[1];
    v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
      v21 = *a3;
      v22 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *a3) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0x666666666666666)
        sub_20E867F44();
      v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (_QWORD)v21) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x333333333333333)
        v3 = 0x666666666666666;
      else
        v3 = v23;
      if (v3)
      {
        if (v3 > 0x666666666666666)
          sub_20E877A38();
        v25 = (char *)operator new(40 * v3);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[40 * v22];
      v27 = v65;
      *(_OWORD *)v26 = v64;
      *((_OWORD *)v26 + 1) = v27;
      *((_QWORD *)v26 + 4) = v66;
      v28 = v26;
      if (v17 != v21)
      {
        do
        {
          v29 = *(_OWORD *)(v17 - 40);
          v30 = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v28 - 1) = *((_QWORD *)v17 - 1);
          *(_OWORD *)(v28 - 24) = v30;
          *(_OWORD *)(v28 - 40) = v29;
          v28 -= 40;
          v17 -= 40;
        }
        while (v17 != v21);
        v17 = v21;
      }
      v20 = v26 + 40;
      *a3 = v28;
      a3[1] = v26 + 40;
      a3[2] = &v25[40 * v3];
      if (v17)
        operator delete(v17);
    }
    else
    {
      v18 = v64;
      v19 = v65;
      *((_QWORD *)v17 + 4) = v66;
      *(_OWORD *)v17 = v18;
      *((_OWORD *)v17 + 1) = v19;
      v20 = v17 + 40;
    }
    a3[1] = v20;
    if (*((_DWORD *)v13 + 2) < a2
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 226, (uint64_t)"cam_set.primary.image_width_ >= line_processing_width", 53, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_60;
    }
    if (*((_DWORD *)v13 + 1) == 2)
    {
      v31 = *((unsigned int *)v13 + 134);
      v32 = *((unsigned int *)v13 + 135);
      LODWORD(v3) = vcvtas_u32_f32((float)(v10 * (float)v32) / (float)v31);
      if (!(_DWORD)v3
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationData.h", 286, (uint64_t)"height > 0", 10, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0)|| (v33 = *v9, v33 >= 0x10000)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_210122F60((unint64_t *)&v64, v31, v32, a2, v3, v33 | 0x100000000);
      v35 = a3[1];
      v34 = (unint64_t)a3[2];
      if ((unint64_t)v35 >= v34)
      {
        v39 = *a3;
        v40 = 0xCCCCCCCCCCCCCCCDLL * ((v35 - *a3) >> 3);
        v41 = v40 + 1;
        if (v40 + 1 > 0x666666666666666)
          sub_20E867F44();
        v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (_QWORD)v39) >> 3);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        v3 = v42 >= 0x333333333333333 ? 0x666666666666666 : v41;
        if (v3)
        {
          if (v3 > 0x666666666666666)
            sub_20E877A38();
          v43 = (char *)operator new(40 * v3);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[40 * v40];
        v45 = v65;
        *(_OWORD *)v44 = v64;
        *((_OWORD *)v44 + 1) = v45;
        *((_QWORD *)v44 + 4) = v66;
        v46 = v44;
        if (v35 != v39)
        {
          do
          {
            v47 = *(_OWORD *)(v35 - 40);
            v48 = *(_OWORD *)(v35 - 24);
            *((_QWORD *)v46 - 1) = *((_QWORD *)v35 - 1);
            *(_OWORD *)(v46 - 24) = v48;
            *(_OWORD *)(v46 - 40) = v47;
            v46 -= 40;
            v35 -= 40;
          }
          while (v35 != v39);
          v35 = v39;
        }
        v38 = v44 + 40;
        *a3 = v46;
        a3[1] = v44 + 40;
        a3[2] = &v43[40 * v3];
        if (v35)
          operator delete(v35);
      }
      else
      {
        v36 = v64;
        v37 = v65;
        *((_QWORD *)v35 + 4) = v66;
        *(_OWORD *)v35 = v36;
        *((_OWORD *)v35 + 1) = v37;
        v38 = v35 + 40;
      }
      a3[1] = v38;
      if (*((_DWORD *)v13 + 134) < a2
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 234, (uint64_t)"cam_set.secondary.image_width_ >= line_processing_width", 55, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_60:
        abort();
      }
    }
    ++v9;
  }
  while (v9 != v63);
  v9 = v67;
LABEL_62:
  if (v9)
  {
    v68 = v9;
    operator delete(v9);
  }
LABEL_64:
  v50 = *a1;
  v49 = a1[1];
  if (*a1 == v49)
  {
    v54 = 0;
  }
  else
  {
    v51 = v49 - v50 - 1088;
    if (v51 < 0x440)
    {
      v52 = 0;
      v53 = *a1;
      goto LABEL_77;
    }
    v55 = 0;
    v56 = 0;
    v57 = v51 / 0x440 + 1;
    v53 = &v50[1088 * (v57 & 0x7FFFFFFFFFFFFELL)];
    v58 = v57 & 0x7FFFFFFFFFFFFELL;
    do
    {
      if (*((_DWORD *)v50 + 1) == 1)
        v59 = 1;
      else
        v59 = 2;
      if (*((_DWORD *)v50 + 273) == 1)
        v60 = 1;
      else
        v60 = 2;
      v55 += v59;
      v56 += v60;
      v50 += 2176;
      v58 -= 2;
    }
    while (v58);
    v52 = v56 + v55;
    if (v57 != (v57 & 0x7FFFFFFFFFFFFELL))
    {
      do
      {
LABEL_77:
        if (*((_DWORD *)v53 + 1) == 1)
          v61 = 1;
        else
          v61 = 2;
        v52 += v61;
        v53 += 1088;
      }
      while (v53 != v49);
    }
    v54 = v52;
  }
  if (v54 != 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/HardwareParams.cpp", 238, (uint64_t)"num_streams() == size_configs.size()", 36, (uint64_t)&unk_21025022A, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
}

void sub_20EA8FAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (!*(_QWORD *)v16)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v16 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20EA8FB14(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;

  v1 = *a1;
  v2 = a1[1];
  while (v1 != v2)
  {
    if (!*(_QWORD *)(v1 + 512))
    {
      sub_20EA77624();
      v7 = v11;
      v11 = 0uLL;
      v8 = *(std::__shared_weak_count **)(v1 + 520);
      *(_OWORD *)(v1 + 512) = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    if (*(_DWORD *)(v1 + 4) == 2 && !*(_QWORD *)(v1 + 1040))
    {
      sub_20EA77624();
      v3 = v11;
      v11 = 0uLL;
      v4 = *(std::__shared_weak_count **)(v1 + 1048);
      *(_OWORD *)(v1 + 1040) = v3;
      if (v4)
      {
        v5 = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    v1 += 1088;
  }
}

uint64_t sub_20EA8FC90(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  size_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  size_t v17;
  char **p_dst;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  size_t v59;
  char **v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t *v66;
  size_t v67;
  char *v68;
  char *v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  size_t v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  const char *v79;
  size_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  size_t v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  size_t v91;
  size_t v92;
  char **v93;
  void *v94;
  int v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  const char *v100;
  uint64_t v101;
  uint64_t *v102;
  size_t v103;
  char *v104;
  char *v105;
  const void **v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  char *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  char *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  const char *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  const char *v162;
  uint64_t v163;
  uint64_t *v164;
  size_t v165;
  char *v166;
  char *v167;
  const void **v168;
  const void *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  const char *v174;
  size_t v175;
  unsigned __int8 v176;
  const char *v177;
  size_t v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  size_t v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  size_t v189;
  size_t v190;
  char **v191;
  void *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char v197;
  _QWORD *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  char *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  char *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  const char *v241;
  unint64_t *v242;
  int v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  const char *v247;
  uint64_t v248;
  uint64_t *v249;
  size_t v250;
  char *v251;
  const void *v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  uint64_t v256;
  const char *v257;
  size_t v258;
  unsigned __int8 v259;
  const char *v260;
  size_t v261;
  _BYTE *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  NSObject *v268;
  size_t v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  size_t v272;
  size_t v273;
  char **v274;
  void *v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char v280;
  _QWORD *v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  char *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  unsigned __int8 v293;
  uint64_t v294;
  char *v295;
  NSObject *v296;
  const char *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  const char *v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  char *v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  const char *v329;
  unint64_t *v330;
  uint64_t v331;
  int v333;
  unint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  const char *v337;
  uint64_t v338;
  uint64_t *v339;
  size_t v340;
  char *v341;
  unsigned __int8 v342;
  uint64_t v343;
  char *v344;
  NSObject *v345;
  int v346;
  unint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  const char *v350;
  uint64_t v351;
  uint64_t *v352;
  size_t v353;
  char *v354;
  unsigned __int8 v355;
  uint64_t v356;
  char *v357;
  NSObject *v358;
  int v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  unsigned __int8 v366;
  uint64_t v367;
  char *v368;
  NSObject *v369;
  int v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  unsigned __int8 v377;
  uint64_t v378;
  char *v379;
  NSObject *v380;
  unsigned __int8 v381;
  uint64_t v382;
  char *v383;
  NSObject *v384;
  unsigned __int8 v385;
  unint64_t v386;
  char *v387;
  NSObject *v388;
  unsigned __int8 v389;
  unint64_t v390;
  char *v391;
  NSObject *v392;
  const char *v393;
  const char *v394;
  const char *v395;
  int v396;
  int v397;
  int v398;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v401;
  const char *v402;
  int v403;
  const char *v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  char *__dst;
  size_t v408;
  int64_t v409;
  void *v410;
  __int128 v411;
  uint64_t v412;
  __int128 v413;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v414;
  char *v415;
  unint64_t v416;
  char *v417;
  void *v418;
  char v419;
  char *v420;
  int v421;
  uint64_t v422;
  int **v423;
  __int128 v424;
  std::__shared_weak_count *v425;
  char *v426;
  std::__shared_weak_count *v427;
  char *v428;
  __int128 v429;
  _BYTE v430[24];
  __int128 v431;
  char *v432;
  const char *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436[5];

  v436[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 80);
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a1[1] - *a1) >> 6) <= v4)
  {
    sub_20EA93468(&v423);
    if (*v423[7] > 5)
      return 0;
    v12 = *((unsigned __int8 *)v423 + 72);
    v13 = sub_20E8C31DC((uint64_t)v423, "OSLogSurrogateAppender", 1, 0);
    v14 = v13;
    if (!v12 && v13 == 0)
      return 0;
    sub_20E863438((uint64_t)&v410);
    sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"camera ID is out of range: ", 27);
    v16 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v16, (uint64_t)" >= ", 4);
    std::ostream::operator<<();
    v397 = v12;
    if ((v421 & 0x10) != 0)
    {
      v69 = v420;
      if (v420 < v417)
      {
        v420 = v417;
        v69 = v417;
      }
      v70 = (const void *)v416;
      v17 = (size_t)&v69[-v416];
      if ((unint64_t)&v69[-v416] > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_129;
    }
    else
    {
      if ((v421 & 8) == 0)
      {
        v17 = 0;
        HIBYTE(v409) = 0;
        p_dst = &__dst;
        goto LABEL_70;
      }
      v70 = (const void *)*((_QWORD *)&v413 + 1);
      v17 = (size_t)&v415[-*((_QWORD *)&v413 + 1)];
      if ((unint64_t)&v415[-*((_QWORD *)&v413 + 1)] > 0x7FFFFFFFFFFFFFF7)
LABEL_129:
        sub_20E860B7C();
    }
    if (v17 >= 0x17)
    {
      v71 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v71 = v17 | 7;
      v72 = v71 + 1;
      p_dst = (char **)operator new(v71 + 1);
      v408 = v17;
      v409 = v72 | 0x8000000000000000;
      __dst = (char *)p_dst;
    }
    else
    {
      HIBYTE(v409) = v17;
      p_dst = &__dst;
      if (!v17)
      {
LABEL_70:
        *((_BYTE *)p_dst + v17) = 0;
        __p[0] = &v423;
        __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v401 = 5;
        v402 = "unknown file";
        v403 = 255;
        v405 = 0;
        v406 = 0;
        v404 = "unknown function";
        if (v409 >= 0)
          v73 = (const char *)&__dst;
        else
          v73 = __dst;
        v74 = *(_QWORD *)__p[0];
        v75 = (const char *)(*(_QWORD *)__p[0] + 16);
        v393 = v75;
        if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
        {
          v75 = *(const char **)(v74 + 16);
          v76 = *(_QWORD *)(v74 + 24);
          v78 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v78 & 1) != 0)
            goto LABEL_77;
        }
        else
        {
          v76 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
          v77 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v77 & 1) != 0)
            goto LABEL_77;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v430);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
          if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
            operator delete(*(void **)v430);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_77:
        if (byte_254A4A4F8[23] >= 0)
          v79 = byte_254A4A4F8;
        else
          v79 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v80 = byte_254A4A4F8[23];
        else
          v80 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v430 = os_log_create(v79, v75);
        v81 = &v430[8];
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v80 >= 0x17)
        {
          v82 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v82 = v80 | 7;
          v83 = v82 + 1;
          v81 = operator new(v82 + 1);
          *(_QWORD *)&v430[16] = v80;
          *(_QWORD *)&v431 = v83 | 0x8000000000000000;
          *(_QWORD *)&v430[8] = v81;
        }
        else
        {
          BYTE7(v431) = v80;
          if (!v80)
          {
LABEL_91:
            v81[v80] = 0;
            BYTE8(v431) = 1;
            v84 = (char *)&v432;
            if (v76 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v76 >= 0x17)
            {
              v85 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v76 | 7) != 0x17)
                v85 = v76 | 7;
              v86 = v85 + 1;
              v84 = (char *)operator new(v85 + 1);
              v433 = (const char *)v76;
              v434 = v86 | 0x8000000000000000;
              v432 = v84;
            }
            else
            {
              HIBYTE(v434) = v76;
              if (!v76)
              {
LABEL_99:
                v84[v76] = 0;
                LOBYTE(v435) = 1;
                v87 = *(NSObject **)v430;
                if (SHIBYTE(v434) < 0)
                  operator delete(v432);
                if (BYTE8(v431) && SBYTE7(v431) < 0)
                  operator delete(*(void **)&v430[8]);
                if (*(_QWORD *)v430)
                  os_release(*(void **)v430);
                if (!v14 || !*(_QWORD *)(v14 + 24))
                {
                  os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v430 = 136315138;
                  *(_QWORD *)&v430[4] = v73;
                  v94 = (void *)_os_log_send_and_compose_impl();
                  v95 = v397;
                  if (v94)
                    free(v94);
                  goto LABEL_194;
                }
                v88 = _os_log_pack_size();
                v89 = (std::__shared_weak_count_vtbl *)operator new(v88, (std::align_val_t)8uLL);
                v90 = (std::__shared_weak_count *)operator new();
                v90->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v90->__shared_owners_ = 0;
                v90->__shared_weak_owners_ = 0;
                v90[1].__vftable = v89;
                *(_QWORD *)&v424 = v89;
                *((_QWORD *)&v424 + 1) = v89;
                v426 = 0;
                v427 = 0;
                v425 = v90;
                v91 = strlen(v73);
                if (v91 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v92 = v91;
                if (v91 >= 0x17)
                {
                  v107 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v91 | 7) != 0x17)
                    v107 = v91 | 7;
                  v108 = v107 + 1;
                  v93 = (char **)operator new(v107 + 1);
                  *(_QWORD *)&v429 = v92;
                  *((_QWORD *)&v429 + 1) = v108 | 0x8000000000000000;
                  v428 = (char *)v93;
                }
                else
                {
                  HIBYTE(v429) = v91;
                  v93 = &v428;
                  if (!v91)
                  {
LABEL_134:
                    *((_BYTE *)v93 + v92) = 0;
                    v109 = v428;
                    v436[0] = v429;
                    *(uint64_t *)((char *)v436 + 7) = *(_QWORD *)((char *)&v429 + 7);
                    v110 = HIBYTE(v429);
                    v111 = operator new(0x38uLL);
                    v111[1] = 0;
                    v111[2] = 0;
                    v111[3] = off_24C9ABC20;
                    *v111 = &off_24C9ABBD0;
                    v112 = v436[0];
                    v111[4] = v109;
                    v111[5] = v112;
                    *(_QWORD *)((char *)v111 + 47) = *(uint64_t *)((char *)v436 + 7);
                    *((_BYTE *)v111 + 55) = v110;
                    memset(v436, 0, 15);
                    v113 = v427;
                    v426 = (char *)(v111 + 3);
                    v427 = (std::__shared_weak_count *)v111;
                    if (v113)
                    {
                      p_shared_owners = (unint64_t *)&v113->__shared_owners_;
                      do
                        v115 = __ldaxr(p_shared_owners);
                      while (__stlxr(v115 - 1, p_shared_owners));
                      if (!v115)
                      {
                        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                        std::__shared_weak_count::__release_weak(v113);
                      }
                    }
                    *(_OWORD *)v430 = v424;
                    v116 = v426;
                    *(_QWORD *)&v430[16] = v425;
                    if (v425)
                    {
                      v117 = (unint64_t *)&v425->__shared_owners_;
                      do
                        v118 = __ldxr(v117);
                      while (__stxr(v118 + 1, v117));
                    }
                    v119 = v427;
                    *(_QWORD *)&v431 = v116;
                    *((_QWORD *)&v431 + 1) = v427;
                    if (v427)
                    {
                      v120 = (unint64_t *)&v427->__shared_owners_;
                      do
                        v121 = __ldxr(v120);
                      while (__stxr(v121 + 1, v120));
                      v432 = v116;
                      do
                        v122 = __ldaxr(v120);
                      while (__stlxr(v122 - 1, v120));
                      if (!v122)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
                    else
                    {
                      v432 = v116;
                    }
                    v123 = v425;
                    if (v425)
                    {
                      v124 = (unint64_t *)&v425->__shared_owners_;
                      do
                        v125 = __ldaxr(v124);
                      while (__stlxr(v125 - 1, v124));
                      if (!v125)
                      {
                        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                        std::__shared_weak_count::__release_weak(v123);
                      }
                    }
                    v126 = *(_QWORD *)v430;
                    if (v432[31] >= 0)
                      v127 = v432 + 8;
                    else
                      v127 = (char *)*((_QWORD *)v432 + 1);
                    v128 = _os_log_pack_fill();
                    *(_DWORD *)v128 = 136315138;
                    *(_QWORD *)(v128 + 4) = v127;
                    v129 = operator new();
                    v130 = *(unsigned __int8 *)(v74 + 39);
                    v131 = *(const char **)(v74 + 16);
                    v132 = *(_QWORD *)(v74 + 24);
                    v133 = v431;
                    *(_OWORD *)(v129 + 8) = *(_OWORD *)&v430[8];
                    if ((v130 & 0x80u) != 0)
                      v130 = v132;
                    else
                      v131 = v393;
                    *(_QWORD *)v129 = v126;
                    *(_QWORD *)&v430[8] = 0;
                    *(_QWORD *)&v430[16] = 0;
                    *(_OWORD *)(v129 + 24) = v133;
                    v431 = 0uLL;
                    *(_QWORD *)(v129 + 40) = v131;
                    *(_QWORD *)(v129 + 48) = v130;
                    *(_BYTE *)(v129 + 56) = 16;
                    v428 = 0;
                    *(_QWORD *)&v424 = v129;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v424);
                    v134 = v424;
                    *(_QWORD *)&v424 = 0;
                    v95 = v397;
                    if (v134)
                    {
                      v135 = *(std::__shared_weak_count **)(v134 + 32);
                      if (v135)
                      {
                        v136 = (unint64_t *)&v135->__shared_owners_;
                        do
                          v137 = __ldaxr(v136);
                        while (__stlxr(v137 - 1, v136));
                        if (!v137)
                        {
                          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                          std::__shared_weak_count::__release_weak(v135);
                        }
                      }
                      v138 = *(std::__shared_weak_count **)(v134 + 16);
                      if (v138)
                      {
                        v139 = (unint64_t *)&v138->__shared_owners_;
                        do
                          v140 = __ldaxr(v139);
                        while (__stlxr(v140 - 1, v139));
                        if (!v140)
                        {
                          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                          std::__shared_weak_count::__release_weak(v138);
                        }
                      }
                      MEMORY[0x212BC6398](v134, 0x10F0C40B62ED6C6);
                      v141 = v428;
                      v428 = 0;
                      if (v141)
                      {
                        v142 = (std::__shared_weak_count *)*((_QWORD *)v141 + 4);
                        if (v142)
                        {
                          v143 = (unint64_t *)&v142->__shared_owners_;
                          do
                            v144 = __ldaxr(v143);
                          while (__stlxr(v144 - 1, v143));
                          if (!v144)
                          {
                            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                            std::__shared_weak_count::__release_weak(v142);
                          }
                        }
                        v145 = (std::__shared_weak_count *)*((_QWORD *)v141 + 2);
                        if (v145)
                        {
                          v146 = (unint64_t *)&v145->__shared_owners_;
                          do
                            v147 = __ldaxr(v146);
                          while (__stlxr(v147 - 1, v146));
                          if (!v147)
                          {
                            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                            std::__shared_weak_count::__release_weak(v145);
                          }
                        }
                        MEMORY[0x212BC6398](v141, 0x10F0C40B62ED6C6);
                      }
                    }
                    v148 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
                    if (*((_QWORD *)&v431 + 1))
                    {
                      v149 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
                      do
                        v150 = __ldaxr(v149);
                      while (__stlxr(v150 - 1, v149));
                      if (!v150)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                    }
                    v151 = *(std::__shared_weak_count **)&v430[16];
                    if (*(_QWORD *)&v430[16])
                    {
                      v152 = (unint64_t *)(*(_QWORD *)&v430[16] + 8);
                      do
                        v153 = __ldaxr(v152);
                      while (__stlxr(v153 - 1, v152));
                      if (!v153)
                      {
                        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                        std::__shared_weak_count::__release_weak(v151);
                      }
                    }
LABEL_194:
                    if (v95)
                    {
                      v154 = (const char *)&__dst;
                      if (v409 < 0)
                        v154 = __dst;
                      sub_20E8C003C((uint64_t)__p, "%s", v154);
                      sub_20E863570((uint64_t)__p);
                    }
                    sub_20E863570((uint64_t)__p);
                    v155 = v406;
                    if (!v406)
                      goto LABEL_487;
                    v156 = (unint64_t *)&v406->__shared_owners_;
                    do
                      v157 = __ldaxr(v156);
                    while (__stlxr(v157 - 1, v156));
                    goto LABEL_485;
                  }
                }
                memcpy(v93, v73, v92);
                goto LABEL_134;
              }
            }
            memmove(v84, v75, v76);
            goto LABEL_99;
          }
        }
        memmove(v81, v79, v80);
        goto LABEL_91;
      }
    }
    memmove(p_dst, v70, v17);
    goto LABEL_70;
  }
  if (*(_DWORD *)(a2 + 84) < 2u)
  {
    if (*(_DWORD *)(*a1 + 1088 * v4) == (_DWORD)v4)
    {
      if (*(double *)a2 <= 0.0 || *(double *)a2 > 3.14159265)
      {
        sub_20EA93468(v436);
        if (**(int **)(v436[0] + 56) > 5)
          return 0;
        v61 = *(unsigned __int8 *)(v436[0] + 72);
        v62 = sub_20E8C31DC(v436[0], "OSLogSurrogateAppender", 1, 0);
        v63 = v62 ? v62 + 16 : 0;
        if (!v61 && !v62)
          return 0;
        sub_20E863438((uint64_t)&v410);
        sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"half FOV is out of range: ", 26);
        std::ostream::operator<<();
        sub_20E923E88(&v410, &v424);
        __p[0] = v436;
        __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v401 = 5;
        v402 = "unknown file";
        v403 = 268;
        v405 = 0;
        v406 = 0;
        v404 = "unknown function";
        if (SHIBYTE(v425) >= 0)
          v64 = (const char *)&v424;
        else
          v64 = (const char *)v424;
        v423 = (int **)v64;
        v65 = *(_QWORD *)__p[0];
        v66 = (uint64_t *)(*(_QWORD *)__p[0] + 16);
        if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
        {
          v68 = *(char **)(v65 + 16);
          v67 = *(_QWORD *)(v65 + 24);
        }
        else
        {
          v67 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
          v68 = (char *)(*(_QWORD *)__p[0] + 16);
        }
        __dst = v68;
        v408 = v67;
        v293 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v293 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v430);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
          if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
            operator delete(*(void **)v430);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v294 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v295 = byte_254A4A4F8;
        }
        else
        {
          v294 = *(_QWORD *)&byte_254A4A4F8[8];
          v295 = *(char **)byte_254A4A4F8;
        }
        v428 = v295;
        *(_QWORD *)&v429 = v294;
        *(_QWORD *)v430 = os_log_create(v295, __dst);
        sub_20E86E5A8(&v430[8], (uint64_t)&v428);
        sub_20E86E5A8(&v432, (uint64_t)&__dst);
        v296 = *(NSObject **)v430;
        sub_20E86E44C((uint64_t)v430);
        sub_20EA9AD08(v63, v66, v296, OS_LOG_TYPE_ERROR, (const char **)&v423);
        if (v61)
        {
          v297 = (const char *)&v424;
          if (SHIBYTE(v425) < 0)
            v297 = (const char *)v424;
          goto LABEL_576;
        }
      }
      else
      {
        v19 = *(unsigned int *)(a2 + 12);
        if (*(_QWORD *)(a2 + 32) == v19)
        {
          v20 = *(unsigned int *)(a2 + 16);
          if (*(_QWORD *)(a2 + 48) == v20)
          {
            v21 = 4 * v19 * v20;
            if (v21 == *(_DWORD *)(a2 + 20))
            {
              v22 = *(_DWORD *)(a2 + 8);
              if (*(_QWORD *)(a2 + 64) == v22 * v21)
              {
                if (v22 == 6)
                {
                  v23 = (char *)operator new(192 * (v20 * v19), (std::align_val_t)0x20uLL);
                  if ((_DWORD)v20 && (_DWORD)v19)
                  {
                    v24 = 0;
                    v25 = 0;
                    v26 = 0;
                    v27 = *(_QWORD *)(a2 + 72);
                    v28 = (6 * v19 * v20);
                    do
                    {
                      v29 = v24;
                      v30 = v25;
                      v31 = v19;
                      do
                      {
                        v32 = (__int128 *)(v27 + 8 * (v29 & 0xFFFFFFFE));
                        v34 = v32[1];
                        v33 = v32[2];
                        v35 = *v32;
                        v36 = (__int128 *)((char *)v32 + 8 * v28);
                        v38 = v36[1];
                        v37 = v36[2];
                        v39 = &v23[192 * v30];
                        v40 = *v36;
                        v41 = &v32[v28];
                        v43 = v41[1];
                        v42 = v41[2];
                        v44 = *v41;
                        v45 = (__int128 *)((char *)v32 + 24 * v28);
                        v47 = v45[1];
                        v46 = v45[2];
                        v48 = *v45;
                        *(_OWORD *)v39 = v35;
                        *((_OWORD *)v39 + 1) = v34;
                        *((_OWORD *)v39 + 2) = v33;
                        *((_OWORD *)v39 + 3) = v40;
                        *((_OWORD *)v39 + 4) = v38;
                        *((_OWORD *)v39 + 5) = v37;
                        *((_OWORD *)v39 + 6) = v44;
                        *((_OWORD *)v39 + 7) = v43;
                        *((_OWORD *)v39 + 8) = v42;
                        *((_OWORD *)v39 + 9) = v48;
                        ++v30;
                        v29 += 6;
                        *((_OWORD *)v39 + 10) = v47;
                        *((_OWORD *)v39 + 11) = v46;
                        --v31;
                      }
                      while (v31);
                      ++v26;
                      v25 += v19;
                      v24 += 6 * v19;
                    }
                    while (v26 != v20);
                  }
                  sub_20EA93688(v430, *(_BYTE **)(a2 + 40), (_BYTE *)(*(_QWORD *)(a2 + 40) + 8 * v19));
                  sub_20EA93688(__p, *(_BYTE **)(a2 + 56), (_BYTE *)(*(_QWORD *)(a2 + 56) + 8 * *(_QWORD *)(a2 + 48)));
                  v410 = &off_24C9C2508;
                  v411 = *(_OWORD *)v430;
                  v412 = *(_QWORD *)&v430[16];
                  memset(v430, 0, sizeof(v430));
                  v413 = *(_OWORD *)__p;
                  v49 = rep;
                  __p[0] = 0;
                  __p[1] = 0;
                  rep = 0;
                  v414 = v49;
                  v415 = v23;
                  v416 = (v20 * v19);
                  v417 = (char *)(v19 | (v20 << 32));
                  LOBYTE(v424) = 1;
                  sub_20EA9355C((double *)a2, (uint64_t)&v410, (char *)&v424, (int *)(a2 + 24), (uint64_t *)&v428);
                  sub_20EA93718(&v410);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if (*(_QWORD *)v430)
                  {
                    *(_QWORD *)&v430[8] = *(_QWORD *)v430;
                    operator delete(*(void **)v430);
                  }
                  if (v428)
                  {
                    if ((sub_20EB1E278((uint64_t)v428) & 1) != 0)
                    {
                      v50 = *a1 + 1088 * *(unsigned int *)(a2 + 80);
                      v51 = (_QWORD *)(v50 + 720);
                      v52 = (_QWORD *)(v50 + 192);
                      if (*(_DWORD *)(a2 + 84))
                        v53 = v51;
                      else
                        v53 = v52;
                      sub_20EA93780(v53, (uint64_t *)&v428);
                      v54 = 1;
                      goto LABEL_596;
                    }
                    sub_20EA93468(&__dst);
                    if (**((int **)__dst + 7) > 5
                      || ((v370 = __dst[72],
                           (v371 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0)) == 0)
                        ? (v372 = 0)
                        : (v372 = v371 + 16),
                          !v370 && !v371))
                    {
LABEL_595:
                      v54 = 0;
LABEL_596:
                      sub_20EA93848((_QWORD **)&v428);
                      return v54;
                    }
                    *(_QWORD *)v430 = &__dst;
                    *(std::chrono::steady_clock::time_point *)&v430[8] = std::chrono::steady_clock::now();
                    *(std::chrono::system_clock::time_point *)&v430[16] = std::chrono::system_clock::now();
                    LODWORD(v431) = 5;
                    *((_QWORD *)&v431 + 1) = "unknown file";
                    LODWORD(v432) = 321;
                    v434 = 0;
                    v435 = 0;
                    v433 = "unknown function";
                    v373 = **(_QWORD **)v430;
                    v374 = (uint64_t *)(**(_QWORD **)v430 + 16);
                    if (*(char *)(**(_QWORD **)v430 + 39) < 0)
                    {
                      v376 = *(_QWORD *)(v373 + 16);
                      v375 = *(_QWORD *)(v373 + 24);
                    }
                    else
                    {
                      v375 = *(unsigned __int8 *)(**(_QWORD **)v430 + 39);
                      v376 = **(_QWORD **)v430 + 16;
                    }
                    *(_QWORD *)&v424 = v376;
                    *((_QWORD *)&v424 + 1) = v375;
                    v389 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v389 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)&v410);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v410);
                      if ((_BYTE)v412 && SHIBYTE(v411) < 0)
                        operator delete(v410);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    v390 = byte_254A4A4F8[23];
                    if (byte_254A4A4F8[23] >= 0)
                    {
                      v391 = byte_254A4A4F8;
                    }
                    else
                    {
                      v390 = *(_QWORD *)&byte_254A4A4F8[8];
                      v391 = *(char **)byte_254A4A4F8;
                    }
                    __p[0] = v391;
                    __p[1] = (void *)v390;
                    v410 = os_log_create(v391, (const char *)v424);
                    sub_20E86E5A8(&v411, (uint64_t)__p);
                    sub_20E86E5A8((_QWORD *)&v413 + 1, (uint64_t)&v424);
                    v392 = v410;
                    sub_20E86E44C((uint64_t)&v410);
                    sub_20EA9D50C(v372, v374, v392, OS_LOG_TYPE_ERROR);
                    if (v370)
                    {
                      sub_20E8C003C((uint64_t)v430, "Inconsistent control points");
                      sub_20E863570((uint64_t)v430);
                    }
                  }
                  else
                  {
                    sub_20EA93468(&__dst);
                    if (**((int **)__dst + 7) > 5)
                      goto LABEL_595;
                    v359 = __dst[72];
                    v360 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
                    v361 = v360 ? v360 + 16 : 0;
                    if (!v359 && !v360)
                      goto LABEL_595;
                    *(_QWORD *)v430 = &__dst;
                    *(std::chrono::steady_clock::time_point *)&v430[8] = std::chrono::steady_clock::now();
                    *(std::chrono::system_clock::time_point *)&v430[16] = std::chrono::system_clock::now();
                    LODWORD(v431) = 5;
                    *((_QWORD *)&v431 + 1) = "unknown file";
                    LODWORD(v432) = 317;
                    v434 = 0;
                    v435 = 0;
                    v433 = "unknown function";
                    v362 = **(_QWORD **)v430;
                    v363 = (uint64_t *)(**(_QWORD **)v430 + 16);
                    if (*(char *)(**(_QWORD **)v430 + 39) < 0)
                    {
                      v365 = *(_QWORD *)(v362 + 16);
                      v364 = *(_QWORD *)(v362 + 24);
                    }
                    else
                    {
                      v364 = *(unsigned __int8 *)(**(_QWORD **)v430 + 39);
                      v365 = **(_QWORD **)v430 + 16;
                    }
                    *(_QWORD *)&v424 = v365;
                    *((_QWORD *)&v424 + 1) = v364;
                    v385 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v385 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)&v410);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v410);
                      if ((_BYTE)v412 && SHIBYTE(v411) < 0)
                        operator delete(v410);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    v386 = byte_254A4A4F8[23];
                    if (byte_254A4A4F8[23] >= 0)
                    {
                      v387 = byte_254A4A4F8;
                    }
                    else
                    {
                      v386 = *(_QWORD *)&byte_254A4A4F8[8];
                      v387 = *(char **)byte_254A4A4F8;
                    }
                    __p[0] = v387;
                    __p[1] = (void *)v386;
                    v410 = os_log_create(v387, (const char *)v424);
                    sub_20E86E5A8(&v411, (uint64_t)__p);
                    sub_20E86E5A8((_QWORD *)&v413 + 1, (uint64_t)&v424);
                    v388 = v410;
                    sub_20E86E44C((uint64_t)&v410);
                    sub_20EA9D120(v361, v363, v388, OS_LOG_TYPE_ERROR);
                    if (v359)
                    {
                      sub_20E8C003C((uint64_t)v430, "Failed to allocate memory for FFA");
                      sub_20E863570((uint64_t)v430);
                    }
                  }
                  sub_20E863714((uint64_t)v430);
                  goto LABEL_595;
                }
                sub_20EA93468(v436);
                if (**(int **)(v436[0] + 56) > 5)
                  return 0;
                v346 = *(unsigned __int8 *)(v436[0] + 72);
                v347 = sub_20E8C31DC(v436[0], "OSLogSurrogateAppender", 1, 0);
                v348 = v347 ? v347 + 16 : 0;
                if (!v346 && !v347)
                  return 0;
                sub_20E863438((uint64_t)&v410);
                sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"Invalid number of dimension: ", 29);
                v349 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v349, (uint64_t)" != 6", 5);
                sub_20E923E88(&v410, &v424);
                __p[0] = v436;
                __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
                rep = std::chrono::system_clock::now().__d_.__rep_;
                v401 = 5;
                v402 = "unknown file";
                v403 = 297;
                v405 = 0;
                v406 = 0;
                v404 = "unknown function";
                if (SHIBYTE(v425) >= 0)
                  v350 = (const char *)&v424;
                else
                  v350 = (const char *)v424;
                v423 = (int **)v350;
                v351 = *(_QWORD *)__p[0];
                v352 = (uint64_t *)(*(_QWORD *)__p[0] + 16);
                if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
                {
                  v354 = *(char **)(v351 + 16);
                  v353 = *(_QWORD *)(v351 + 24);
                }
                else
                {
                  v353 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
                  v354 = (char *)(*(_QWORD *)__p[0] + 16);
                }
                __dst = v354;
                v408 = v353;
                v381 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v381 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v430);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
                  if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
                    operator delete(*(void **)v430);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
                v382 = byte_254A4A4F8[23];
                if (byte_254A4A4F8[23] >= 0)
                {
                  v383 = byte_254A4A4F8;
                }
                else
                {
                  v382 = *(_QWORD *)&byte_254A4A4F8[8];
                  v383 = *(char **)byte_254A4A4F8;
                }
                v428 = v383;
                *(_QWORD *)&v429 = v382;
                *(_QWORD *)v430 = os_log_create(v383, __dst);
                sub_20E86E5A8(&v430[8], (uint64_t)&v428);
                sub_20E86E5A8(&v432, (uint64_t)&__dst);
                v384 = *(NSObject **)v430;
                sub_20E86E44C((uint64_t)v430);
                sub_20EA9CB1C(v348, v352, v384, OS_LOG_TYPE_ERROR, (const char **)&v423);
                if (v346)
                {
                  v297 = (const char *)&v424;
                  if (SHIBYTE(v425) < 0)
                    v297 = (const char *)v424;
LABEL_576:
                  sub_20E8C003C((uint64_t)__p, "%s", v297);
                  sub_20E863570((uint64_t)__p);
                }
              }
              else
              {
                sub_20EA93468(v436);
                if (**(int **)(v436[0] + 56) > 5)
                  return 0;
                v333 = *(unsigned __int8 *)(v436[0] + 72);
                v334 = sub_20E8C31DC(v436[0], "OSLogSurrogateAppender", 1, 0);
                v335 = v334 ? v334 + 16 : 0;
                if (!v333 && !v334)
                  return 0;
                sub_20E863438((uint64_t)&v410);
                sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"Invalid number of control point values: ", 40);
                v336 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v336, (uint64_t)" != ", 4);
                std::ostream::operator<<();
                sub_20E923E88(&v410, &v424);
                __p[0] = v436;
                __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
                rep = std::chrono::system_clock::now().__d_.__rep_;
                v401 = 5;
                v402 = "unknown file";
                v403 = 292;
                v405 = 0;
                v406 = 0;
                v404 = "unknown function";
                if (SHIBYTE(v425) >= 0)
                  v337 = (const char *)&v424;
                else
                  v337 = (const char *)v424;
                v423 = (int **)v337;
                v338 = *(_QWORD *)__p[0];
                v339 = (uint64_t *)(*(_QWORD *)__p[0] + 16);
                if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
                {
                  v341 = *(char **)(v338 + 16);
                  v340 = *(_QWORD *)(v338 + 24);
                }
                else
                {
                  v340 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
                  v341 = (char *)(*(_QWORD *)__p[0] + 16);
                }
                __dst = v341;
                v408 = v340;
                v377 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v377 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v430);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
                  if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
                    operator delete(*(void **)v430);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
                v378 = byte_254A4A4F8[23];
                if (byte_254A4A4F8[23] >= 0)
                {
                  v379 = byte_254A4A4F8;
                }
                else
                {
                  v378 = *(_QWORD *)&byte_254A4A4F8[8];
                  v379 = *(char **)byte_254A4A4F8;
                }
                v428 = v379;
                *(_QWORD *)&v429 = v378;
                *(_QWORD *)v430 = os_log_create(v379, __dst);
                sub_20E86E5A8(&v430[8], (uint64_t)&v428);
                sub_20E86E5A8(&v432, (uint64_t)&__dst);
                v380 = *(NSObject **)v430;
                sub_20E86E44C((uint64_t)v430);
                sub_20EA9C518(v335, v339, v380, OS_LOG_TYPE_ERROR, (const char **)&v423);
                if (v333)
                {
                  v297 = (const char *)&v424;
                  if (SHIBYTE(v425) < 0)
                    v297 = (const char *)v424;
                  goto LABEL_576;
                }
              }
            }
            else
            {
              sub_20EA93468(v436);
              if (**(int **)(v436[0] + 56) > 5)
                return 0;
              v243 = *(unsigned __int8 *)(v436[0] + 72);
              v244 = sub_20E8C31DC(v436[0], "OSLogSurrogateAppender", 1, 0);
              v245 = v244 ? v244 + 16 : 0;
              if (!v243 && !v244)
                return 0;
              sub_20E863438((uint64_t)&v410);
              sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"Invalid number of control points: ", 34);
              v246 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v246, (uint64_t)" != ", 4);
              std::ostream::operator<<();
              sub_20E923E88(&v410, &v424);
              __p[0] = v436;
              __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
              rep = std::chrono::system_clock::now().__d_.__rep_;
              v401 = 5;
              v402 = "unknown file";
              v403 = 285;
              v405 = 0;
              v406 = 0;
              v404 = "unknown function";
              if (SHIBYTE(v425) >= 0)
                v247 = (const char *)&v424;
              else
                v247 = (const char *)v424;
              v423 = (int **)v247;
              v248 = *(_QWORD *)__p[0];
              v249 = (uint64_t *)(*(_QWORD *)__p[0] + 16);
              if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
              {
                v251 = *(char **)(v248 + 16);
                v250 = *(_QWORD *)(v248 + 24);
              }
              else
              {
                v250 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
                v251 = (char *)(*(_QWORD *)__p[0] + 16);
              }
              __dst = v251;
              v408 = v250;
              v366 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v366 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v430);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
                if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
                  operator delete(*(void **)v430);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              v367 = byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v368 = byte_254A4A4F8;
              }
              else
              {
                v367 = *(_QWORD *)&byte_254A4A4F8[8];
                v368 = *(char **)byte_254A4A4F8;
              }
              v428 = v368;
              *(_QWORD *)&v429 = v367;
              *(_QWORD *)v430 = os_log_create(v368, __dst);
              sub_20E86E5A8(&v430[8], (uint64_t)&v428);
              sub_20E86E5A8(&v432, (uint64_t)&__dst);
              v369 = *(NSObject **)v430;
              sub_20E86E44C((uint64_t)v430);
              sub_20EA9BF14(v245, v249, v369, OS_LOG_TYPE_ERROR, (const char **)&v423);
              if (v243)
              {
                v297 = (const char *)&v424;
                if (SHIBYTE(v425) < 0)
                  v297 = (const char *)v424;
                goto LABEL_576;
              }
            }
          }
          else
          {
            sub_20EA93468(v436);
            if (**(int **)(v436[0] + 56) > 5)
              return 0;
            v158 = *(unsigned __int8 *)(v436[0] + 72);
            v159 = sub_20E8C31DC(v436[0], "OSLogSurrogateAppender", 1, 0);
            v160 = v159 ? v159 + 16 : 0;
            if (!v158 && !v159)
              return 0;
            sub_20E863438((uint64_t)&v410);
            sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"Invalid number of V knots: ", 27);
            v161 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v161, (uint64_t)" != ", 4);
            std::ostream::operator<<();
            sub_20E923E88(&v410, &v424);
            __p[0] = v436;
            __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
            rep = std::chrono::system_clock::now().__d_.__rep_;
            v401 = 5;
            v402 = "unknown file";
            v403 = 278;
            v405 = 0;
            v406 = 0;
            v404 = "unknown function";
            if (SHIBYTE(v425) >= 0)
              v162 = (const char *)&v424;
            else
              v162 = (const char *)v424;
            v423 = (int **)v162;
            v163 = *(_QWORD *)__p[0];
            v164 = (uint64_t *)(*(_QWORD *)__p[0] + 16);
            if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
            {
              v166 = *(char **)(v163 + 16);
              v165 = *(_QWORD *)(v163 + 24);
            }
            else
            {
              v165 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
              v166 = (char *)(*(_QWORD *)__p[0] + 16);
            }
            __dst = v166;
            v408 = v165;
            v355 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v355 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v430);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
              if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
                operator delete(*(void **)v430);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v356 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v357 = byte_254A4A4F8;
            }
            else
            {
              v356 = *(_QWORD *)&byte_254A4A4F8[8];
              v357 = *(char **)byte_254A4A4F8;
            }
            v428 = v357;
            *(_QWORD *)&v429 = v356;
            *(_QWORD *)v430 = os_log_create(v357, __dst);
            sub_20E86E5A8(&v430[8], (uint64_t)&v428);
            sub_20E86E5A8(&v432, (uint64_t)&__dst);
            v358 = *(NSObject **)v430;
            sub_20E86E44C((uint64_t)v430);
            sub_20EA9B910(v160, v164, v358, OS_LOG_TYPE_ERROR, (const char **)&v423);
            if (v158)
            {
              v297 = (const char *)&v424;
              if (SHIBYTE(v425) < 0)
                v297 = (const char *)v424;
              goto LABEL_576;
            }
          }
        }
        else
        {
          sub_20EA93468(v436);
          if (**(int **)(v436[0] + 56) > 5)
            return 0;
          v96 = *(unsigned __int8 *)(v436[0] + 72);
          v97 = sub_20E8C31DC(v436[0], "OSLogSurrogateAppender", 1, 0);
          v98 = v97 ? v97 + 16 : 0;
          if (!v96 && !v97)
            return 0;
          sub_20E863438((uint64_t)&v410);
          sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"Invalid number of U knots: ", 27);
          v99 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v99, (uint64_t)" != ", 4);
          std::ostream::operator<<();
          sub_20E923E88(&v410, &v424);
          __p[0] = v436;
          __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v401 = 5;
          v402 = "unknown file";
          v403 = 273;
          v405 = 0;
          v406 = 0;
          v404 = "unknown function";
          if (SHIBYTE(v425) >= 0)
            v100 = (const char *)&v424;
          else
            v100 = (const char *)v424;
          v423 = (int **)v100;
          v101 = *(_QWORD *)__p[0];
          v102 = (uint64_t *)(*(_QWORD *)__p[0] + 16);
          if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
          {
            v104 = *(char **)(v101 + 16);
            v103 = *(_QWORD *)(v101 + 24);
          }
          else
          {
            v103 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
            v104 = (char *)(*(_QWORD *)__p[0] + 16);
          }
          __dst = v104;
          v408 = v103;
          v342 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v342 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v430);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
            if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
              operator delete(*(void **)v430);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v343 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v344 = byte_254A4A4F8;
          }
          else
          {
            v343 = *(_QWORD *)&byte_254A4A4F8[8];
            v344 = *(char **)byte_254A4A4F8;
          }
          v428 = v344;
          *(_QWORD *)&v429 = v343;
          *(_QWORD *)v430 = os_log_create(v344, __dst);
          sub_20E86E5A8(&v430[8], (uint64_t)&v428);
          sub_20E86E5A8(&v432, (uint64_t)&__dst);
          v345 = *(NSObject **)v430;
          sub_20E86E44C((uint64_t)v430);
          sub_20EA9B30C(v98, v102, v345, OS_LOG_TYPE_ERROR, (const char **)&v423);
          if (v96)
          {
            v297 = (const char *)&v424;
            if (SHIBYTE(v425) < 0)
              v297 = (const char *)v424;
            goto LABEL_576;
          }
        }
      }
      sub_20E863714((uint64_t)__p);
      if (SHIBYTE(v425) < 0)
        operator delete((void *)v424);
      sub_20E863784((uint64_t)&v410);
      return 0;
    }
    sub_20EA93468(&v423);
    if (*v423[7] > 5)
      return 0;
    v55 = *((unsigned __int8 *)v423 + 72);
    v56 = sub_20E8C31DC((uint64_t)v423, "OSLogSurrogateAppender", 1, 0);
    v57 = v56;
    if (!v55 && !v56)
      return 0;
    sub_20E863438((uint64_t)&v410);
    sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"camera ID does not match: ", 26);
    v58 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v58, (uint64_t)" != ", 4);
    std::ostream::operator<<();
    v398 = v55;
    if ((v421 & 0x10) != 0)
    {
      v167 = v420;
      if (v420 < v417)
      {
        v420 = v417;
        v167 = v417;
      }
      v168 = (const void **)&v416;
    }
    else
    {
      if ((v421 & 8) == 0)
      {
        v59 = 0;
        HIBYTE(v409) = 0;
        v60 = &__dst;
        goto LABEL_361;
      }
      v168 = (const void **)&v413 + 1;
      v167 = v415;
    }
    v252 = *v168;
    v59 = v167 - (_BYTE *)*v168;
    if (v59 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v59 >= 0x17)
    {
      v253 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17)
        v253 = v59 | 7;
      v254 = v253 + 1;
      v60 = (char **)operator new(v253 + 1);
      v408 = v59;
      v409 = v254 | 0x8000000000000000;
      __dst = (char *)v60;
    }
    else
    {
      HIBYTE(v409) = (_BYTE)v167 - *(_BYTE *)v168;
      v60 = &__dst;
      if (!v59)
      {
LABEL_361:
        *((_BYTE *)v60 + v59) = 0;
        __p[0] = &v423;
        __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v401 = 5;
        v402 = "unknown file";
        v403 = 264;
        v405 = 0;
        v406 = 0;
        v404 = "unknown function";
        if (v409 >= 0)
          v255 = (const char *)&__dst;
        else
          v255 = __dst;
        v256 = *(_QWORD *)__p[0];
        v257 = (const char *)(*(_QWORD *)__p[0] + 16);
        v395 = v257;
        if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
        {
          v257 = *(const char **)(v256 + 16);
          v258 = *(_QWORD *)(v256 + 24);
        }
        else
        {
          v258 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
        }
        v259 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v259 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v430);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
          if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
            operator delete(*(void **)v430);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v260 = byte_254A4A4F8;
        else
          v260 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v261 = byte_254A4A4F8[23];
        else
          v261 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v430 = os_log_create(v260, v257);
        v262 = &v430[8];
        if (v261 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v261 >= 0x17)
        {
          v263 = (v261 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v261 | 7) != 0x17)
            v263 = v261 | 7;
          v264 = v263 + 1;
          v262 = operator new(v263 + 1);
          *(_QWORD *)&v430[16] = v261;
          *(_QWORD *)&v431 = v264 | 0x8000000000000000;
          *(_QWORD *)&v430[8] = v262;
        }
        else
        {
          BYTE7(v431) = v261;
          if (!v261)
          {
LABEL_382:
            v262[v261] = 0;
            BYTE8(v431) = 1;
            v265 = (char *)&v432;
            if (v258 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v258 >= 0x17)
            {
              v266 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v258 | 7) != 0x17)
                v266 = v258 | 7;
              v267 = v266 + 1;
              v265 = (char *)operator new(v266 + 1);
              v433 = (const char *)v258;
              v434 = v267 | 0x8000000000000000;
              v432 = v265;
            }
            else
            {
              HIBYTE(v434) = v258;
              if (!v258)
              {
LABEL_390:
                v265[v258] = 0;
                LOBYTE(v435) = 1;
                v268 = *(NSObject **)v430;
                if (SHIBYTE(v434) < 0)
                  operator delete(v432);
                if (BYTE8(v431) && SBYTE7(v431) < 0)
                  operator delete(*(void **)&v430[8]);
                if (*(_QWORD *)v430)
                  os_release(*(void **)v430);
                if (!v57 || !*(_QWORD *)(v57 + 24))
                {
                  os_log_type_enabled(v268, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v430 = 136315138;
                  *(_QWORD *)&v430[4] = v255;
                  v275 = (void *)_os_log_send_and_compose_impl();
                  v276 = v398;
                  if (v275)
                    free(v275);
                  goto LABEL_478;
                }
                v269 = _os_log_pack_size();
                v270 = (std::__shared_weak_count_vtbl *)operator new(v269, (std::align_val_t)8uLL);
                v271 = (std::__shared_weak_count *)operator new();
                v271->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v271->__shared_owners_ = 0;
                v271->__shared_weak_owners_ = 0;
                v271[1].__vftable = v270;
                *(_QWORD *)&v424 = v270;
                *((_QWORD *)&v424 + 1) = v270;
                v426 = 0;
                v427 = 0;
                v425 = v271;
                v272 = strlen(v255);
                if (v272 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v273 = v272;
                if (v272 >= 0x17)
                {
                  v277 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v272 | 7) != 0x17)
                    v277 = v272 | 7;
                  v278 = v277 + 1;
                  v274 = (char **)operator new(v277 + 1);
                  *(_QWORD *)&v429 = v273;
                  *((_QWORD *)&v429 + 1) = v278 | 0x8000000000000000;
                  v428 = (char *)v274;
                }
                else
                {
                  HIBYTE(v429) = v272;
                  v274 = &v428;
                  if (!v272)
                  {
LABEL_409:
                    *((_BYTE *)v274 + v273) = 0;
                    v279 = v428;
                    v436[0] = v429;
                    *(uint64_t *)((char *)v436 + 7) = *(_QWORD *)((char *)&v429 + 7);
                    v280 = HIBYTE(v429);
                    v281 = operator new(0x38uLL);
                    v281[1] = 0;
                    v281[2] = 0;
                    v281[3] = off_24C9ABC20;
                    *v281 = &off_24C9ABBD0;
                    v282 = v436[0];
                    v281[4] = v279;
                    v281[5] = v282;
                    *(_QWORD *)((char *)v281 + 47) = *(uint64_t *)((char *)v436 + 7);
                    *((_BYTE *)v281 + 55) = v280;
                    memset(v436, 0, 15);
                    v283 = v427;
                    v426 = (char *)(v281 + 3);
                    v427 = (std::__shared_weak_count *)v281;
                    if (v283)
                    {
                      v284 = (unint64_t *)&v283->__shared_owners_;
                      do
                        v285 = __ldaxr(v284);
                      while (__stlxr(v285 - 1, v284));
                      if (!v285)
                      {
                        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                        std::__shared_weak_count::__release_weak(v283);
                      }
                    }
                    *(_OWORD *)v430 = v424;
                    v286 = v426;
                    *(_QWORD *)&v430[16] = v425;
                    if (v425)
                    {
                      v287 = (unint64_t *)&v425->__shared_owners_;
                      do
                        v288 = __ldxr(v287);
                      while (__stxr(v288 + 1, v287));
                    }
                    v289 = v427;
                    *(_QWORD *)&v431 = v286;
                    *((_QWORD *)&v431 + 1) = v427;
                    if (v427)
                    {
                      v290 = (unint64_t *)&v427->__shared_owners_;
                      do
                        v291 = __ldxr(v290);
                      while (__stxr(v291 + 1, v290));
                      v432 = v286;
                      do
                        v292 = __ldaxr(v290);
                      while (__stlxr(v292 - 1, v290));
                      if (!v292)
                      {
                        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                        std::__shared_weak_count::__release_weak(v289);
                      }
                    }
                    else
                    {
                      v432 = v286;
                    }
                    v298 = v425;
                    if (v425)
                    {
                      v299 = (unint64_t *)&v425->__shared_owners_;
                      do
                        v300 = __ldaxr(v299);
                      while (__stlxr(v300 - 1, v299));
                      if (!v300)
                      {
                        ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                        std::__shared_weak_count::__release_weak(v298);
                      }
                    }
                    v301 = *(_QWORD *)v430;
                    if (v432[31] >= 0)
                      v302 = v432 + 8;
                    else
                      v302 = (char *)*((_QWORD *)v432 + 1);
                    v303 = _os_log_pack_fill();
                    *(_DWORD *)v303 = 136315138;
                    *(_QWORD *)(v303 + 4) = v302;
                    v304 = operator new();
                    v305 = *(unsigned __int8 *)(v256 + 39);
                    v306 = *(const char **)(v256 + 16);
                    v307 = *(_QWORD *)(v256 + 24);
                    v308 = v431;
                    *(_OWORD *)(v304 + 8) = *(_OWORD *)&v430[8];
                    if ((v305 & 0x80u) != 0)
                      v305 = v307;
                    else
                      v306 = v395;
                    *(_QWORD *)v304 = v301;
                    *(_QWORD *)&v430[8] = 0;
                    *(_QWORD *)&v430[16] = 0;
                    *(_OWORD *)(v304 + 24) = v308;
                    v431 = 0uLL;
                    *(_QWORD *)(v304 + 40) = v306;
                    *(_QWORD *)(v304 + 48) = v305;
                    *(_BYTE *)(v304 + 56) = 16;
                    v428 = 0;
                    *(_QWORD *)&v424 = v304;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v57 + 24) + 40))(*(_QWORD *)(v57 + 24), &v424);
                    v309 = v424;
                    *(_QWORD *)&v424 = 0;
                    v276 = v398;
                    if (v309)
                    {
                      v310 = *(std::__shared_weak_count **)(v309 + 32);
                      if (v310)
                      {
                        v311 = (unint64_t *)&v310->__shared_owners_;
                        do
                          v312 = __ldaxr(v311);
                        while (__stlxr(v312 - 1, v311));
                        if (!v312)
                        {
                          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                          std::__shared_weak_count::__release_weak(v310);
                        }
                      }
                      v313 = *(std::__shared_weak_count **)(v309 + 16);
                      if (v313)
                      {
                        v314 = (unint64_t *)&v313->__shared_owners_;
                        do
                          v315 = __ldaxr(v314);
                        while (__stlxr(v315 - 1, v314));
                        if (!v315)
                        {
                          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                          std::__shared_weak_count::__release_weak(v313);
                        }
                      }
                      MEMORY[0x212BC6398](v309, 0x10F0C40B62ED6C6);
                      v316 = v428;
                      v428 = 0;
                      if (v316)
                      {
                        v317 = (std::__shared_weak_count *)*((_QWORD *)v316 + 4);
                        if (v317)
                        {
                          v318 = (unint64_t *)&v317->__shared_owners_;
                          do
                            v319 = __ldaxr(v318);
                          while (__stlxr(v319 - 1, v318));
                          if (!v319)
                          {
                            ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                            std::__shared_weak_count::__release_weak(v317);
                          }
                        }
                        v320 = (std::__shared_weak_count *)*((_QWORD *)v316 + 2);
                        if (v320)
                        {
                          v321 = (unint64_t *)&v320->__shared_owners_;
                          do
                            v322 = __ldaxr(v321);
                          while (__stlxr(v322 - 1, v321));
                          if (!v322)
                          {
                            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                            std::__shared_weak_count::__release_weak(v320);
                          }
                        }
                        MEMORY[0x212BC6398](v316, 0x10F0C40B62ED6C6);
                      }
                    }
                    v323 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
                    if (*((_QWORD *)&v431 + 1))
                    {
                      v324 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
                      do
                        v325 = __ldaxr(v324);
                      while (__stlxr(v325 - 1, v324));
                      if (!v325)
                      {
                        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                        std::__shared_weak_count::__release_weak(v323);
                      }
                    }
                    v326 = *(std::__shared_weak_count **)&v430[16];
                    if (*(_QWORD *)&v430[16])
                    {
                      v327 = (unint64_t *)(*(_QWORD *)&v430[16] + 8);
                      do
                        v328 = __ldaxr(v327);
                      while (__stlxr(v328 - 1, v327));
                      if (!v328)
                      {
                        ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                        std::__shared_weak_count::__release_weak(v326);
                      }
                    }
LABEL_478:
                    if (v276)
                    {
                      v329 = (const char *)&__dst;
                      if (v409 < 0)
                        v329 = __dst;
                      sub_20E8C003C((uint64_t)__p, "%s", v329);
                      sub_20E863570((uint64_t)__p);
                    }
                    sub_20E863570((uint64_t)__p);
                    v155 = v406;
                    if (!v406)
                      goto LABEL_487;
                    v330 = (unint64_t *)&v406->__shared_owners_;
                    do
                      v157 = __ldaxr(v330);
                    while (__stlxr(v157 - 1, v330));
                    goto LABEL_485;
                  }
                }
                memcpy(v274, v255, v273);
                goto LABEL_409;
              }
            }
            memmove(v265, v257, v258);
            goto LABEL_390;
          }
        }
        memmove(v262, v260, v261);
        goto LABEL_382;
      }
    }
    memmove(v60, v252, v59);
    goto LABEL_361;
  }
  sub_20EA93468(&v423);
  if (*v423[7] <= 5)
  {
    v5 = *((unsigned __int8 *)v423 + 72);
    v6 = sub_20E8C31DC((uint64_t)v423, "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (v5 || v6 != 0)
    {
      sub_20E863438((uint64_t)&v410);
      sub_20E86A980((_QWORD *)&v411 + 1, (uint64_t)"stream ID is out of range: ", 27);
      v9 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v9, (uint64_t)" >= ", 4);
      std::ostream::operator<<();
      v396 = v5;
      if ((v421 & 0x10) != 0)
      {
        v105 = v420;
        if (v420 < v417)
        {
          v420 = v417;
          v105 = v417;
        }
        v106 = (const void **)&v416;
      }
      else
      {
        if ((v421 & 8) == 0)
        {
          v10 = 0;
          HIBYTE(v409) = 0;
          v11 = &__dst;
          goto LABEL_225;
        }
        v106 = (const void **)&v413 + 1;
        v105 = v415;
      }
      v169 = *v106;
      v10 = v105 - (_BYTE *)*v106;
      if (v10 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v10 >= 0x17)
      {
        v170 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v170 = v10 | 7;
        v171 = v170 + 1;
        v11 = (char **)operator new(v170 + 1);
        v408 = v10;
        v409 = v171 | 0x8000000000000000;
        __dst = (char *)v11;
      }
      else
      {
        HIBYTE(v409) = (_BYTE)v105 - *(_BYTE *)v106;
        v11 = &__dst;
        if (!v10)
        {
LABEL_225:
          *((_BYTE *)v11 + v10) = 0;
          __p[0] = &v423;
          __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v401 = 5;
          v402 = "unknown file";
          v403 = 259;
          v405 = 0;
          v406 = 0;
          v404 = "unknown function";
          if (v409 >= 0)
            v172 = (const char *)&__dst;
          else
            v172 = __dst;
          v173 = *(_QWORD *)__p[0];
          v174 = (const char *)(*(_QWORD *)__p[0] + 16);
          v394 = v174;
          if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
          {
            v174 = *(const char **)(v173 + 16);
            v175 = *(_QWORD *)(v173 + 24);
          }
          else
          {
            v175 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
          }
          v176 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v430);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
            if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
              operator delete(*(void **)v430);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v177 = byte_254A4A4F8;
          else
            v177 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v178 = byte_254A4A4F8[23];
          else
            v178 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v430 = os_log_create(v177, v174);
          v179 = &v430[8];
          if (v178 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v178 >= 0x17)
          {
            v180 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v178 | 7) != 0x17)
              v180 = v178 | 7;
            v181 = v180 + 1;
            v179 = operator new(v180 + 1);
            *(_QWORD *)&v430[16] = v178;
            *(_QWORD *)&v431 = v181 | 0x8000000000000000;
            *(_QWORD *)&v430[8] = v179;
          }
          else
          {
            BYTE7(v431) = v178;
            if (!v178)
            {
LABEL_246:
              v179[v178] = 0;
              BYTE8(v431) = 1;
              v182 = (char *)&v432;
              if (v175 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v175 >= 0x17)
              {
                v183 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v175 | 7) != 0x17)
                  v183 = v175 | 7;
                v184 = v183 + 1;
                v182 = (char *)operator new(v183 + 1);
                v433 = (const char *)v175;
                v434 = v184 | 0x8000000000000000;
                v432 = v182;
              }
              else
              {
                HIBYTE(v434) = v175;
                if (!v175)
                {
LABEL_254:
                  v182[v175] = 0;
                  LOBYTE(v435) = 1;
                  v185 = *(NSObject **)v430;
                  if (SHIBYTE(v434) < 0)
                    operator delete(v432);
                  if (BYTE8(v431) && SBYTE7(v431) < 0)
                    operator delete(*(void **)&v430[8]);
                  if (*(_QWORD *)v430)
                    os_release(*(void **)v430);
                  if (!v7 || !*(_QWORD *)(v7 + 24))
                  {
                    os_log_type_enabled(v185, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v430 = 136315138;
                    *(_QWORD *)&v430[4] = v172;
                    v192 = (void *)_os_log_send_and_compose_impl();
                    v193 = v396;
                    if (v192)
                      free(v192);
                    goto LABEL_333;
                  }
                  v186 = _os_log_pack_size();
                  v187 = (std::__shared_weak_count_vtbl *)operator new(v186, (std::align_val_t)8uLL);
                  v188 = (std::__shared_weak_count *)operator new();
                  v188->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v188->__shared_owners_ = 0;
                  v188->__shared_weak_owners_ = 0;
                  v188[1].__vftable = v187;
                  *(_QWORD *)&v424 = v187;
                  *((_QWORD *)&v424 + 1) = v187;
                  v426 = 0;
                  v427 = 0;
                  v425 = v188;
                  v189 = strlen(v172);
                  if (v189 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v190 = v189;
                  if (v189 >= 0x17)
                  {
                    v194 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v189 | 7) != 0x17)
                      v194 = v189 | 7;
                    v195 = v194 + 1;
                    v191 = (char **)operator new(v194 + 1);
                    *(_QWORD *)&v429 = v190;
                    *((_QWORD *)&v429 + 1) = v195 | 0x8000000000000000;
                    v428 = (char *)v191;
                  }
                  else
                  {
                    HIBYTE(v429) = v189;
                    v191 = &v428;
                    if (!v189)
                    {
LABEL_273:
                      *((_BYTE *)v191 + v190) = 0;
                      v196 = v428;
                      v436[0] = v429;
                      *(uint64_t *)((char *)v436 + 7) = *(_QWORD *)((char *)&v429 + 7);
                      v197 = HIBYTE(v429);
                      v198 = operator new(0x38uLL);
                      v198[1] = 0;
                      v198[2] = 0;
                      v198[3] = off_24C9ABC20;
                      *v198 = &off_24C9ABBD0;
                      v199 = v436[0];
                      v198[4] = v196;
                      v198[5] = v199;
                      *(_QWORD *)((char *)v198 + 47) = *(uint64_t *)((char *)v436 + 7);
                      *((_BYTE *)v198 + 55) = v197;
                      memset(v436, 0, 15);
                      v200 = v427;
                      v426 = (char *)(v198 + 3);
                      v427 = (std::__shared_weak_count *)v198;
                      if (v200)
                      {
                        v201 = (unint64_t *)&v200->__shared_owners_;
                        do
                          v202 = __ldaxr(v201);
                        while (__stlxr(v202 - 1, v201));
                        if (!v202)
                        {
                          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                          std::__shared_weak_count::__release_weak(v200);
                        }
                      }
                      *(_OWORD *)v430 = v424;
                      v203 = v426;
                      *(_QWORD *)&v430[16] = v425;
                      if (v425)
                      {
                        v204 = (unint64_t *)&v425->__shared_owners_;
                        do
                          v205 = __ldxr(v204);
                        while (__stxr(v205 + 1, v204));
                      }
                      v206 = v427;
                      *(_QWORD *)&v431 = v203;
                      *((_QWORD *)&v431 + 1) = v427;
                      if (v427)
                      {
                        v207 = (unint64_t *)&v427->__shared_owners_;
                        do
                          v208 = __ldxr(v207);
                        while (__stxr(v208 + 1, v207));
                        v432 = v203;
                        do
                          v209 = __ldaxr(v207);
                        while (__stlxr(v209 - 1, v207));
                        if (!v209)
                        {
                          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                          std::__shared_weak_count::__release_weak(v206);
                        }
                      }
                      else
                      {
                        v432 = v203;
                      }
                      v210 = v425;
                      if (v425)
                      {
                        v211 = (unint64_t *)&v425->__shared_owners_;
                        do
                          v212 = __ldaxr(v211);
                        while (__stlxr(v212 - 1, v211));
                        if (!v212)
                        {
                          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                          std::__shared_weak_count::__release_weak(v210);
                        }
                      }
                      v213 = *(_QWORD *)v430;
                      if (v432[31] >= 0)
                        v214 = v432 + 8;
                      else
                        v214 = (char *)*((_QWORD *)v432 + 1);
                      v215 = _os_log_pack_fill();
                      *(_DWORD *)v215 = 136315138;
                      *(_QWORD *)(v215 + 4) = v214;
                      v216 = operator new();
                      v217 = *(unsigned __int8 *)(v173 + 39);
                      v218 = *(const char **)(v173 + 16);
                      v219 = *(_QWORD *)(v173 + 24);
                      v220 = v431;
                      *(_OWORD *)(v216 + 8) = *(_OWORD *)&v430[8];
                      if ((v217 & 0x80u) != 0)
                        v217 = v219;
                      else
                        v218 = v394;
                      *(_QWORD *)v216 = v213;
                      *(_QWORD *)&v430[8] = 0;
                      *(_QWORD *)&v430[16] = 0;
                      *(_OWORD *)(v216 + 24) = v220;
                      v431 = 0uLL;
                      *(_QWORD *)(v216 + 40) = v218;
                      *(_QWORD *)(v216 + 48) = v217;
                      *(_BYTE *)(v216 + 56) = 16;
                      v428 = 0;
                      *(_QWORD *)&v424 = v216;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v424);
                      v221 = v424;
                      *(_QWORD *)&v424 = 0;
                      v193 = v396;
                      if (v221)
                      {
                        v222 = *(std::__shared_weak_count **)(v221 + 32);
                        if (v222)
                        {
                          v223 = (unint64_t *)&v222->__shared_owners_;
                          do
                            v224 = __ldaxr(v223);
                          while (__stlxr(v224 - 1, v223));
                          if (!v224)
                          {
                            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                            std::__shared_weak_count::__release_weak(v222);
                          }
                        }
                        v225 = *(std::__shared_weak_count **)(v221 + 16);
                        if (v225)
                        {
                          v226 = (unint64_t *)&v225->__shared_owners_;
                          do
                            v227 = __ldaxr(v226);
                          while (__stlxr(v227 - 1, v226));
                          if (!v227)
                          {
                            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                            std::__shared_weak_count::__release_weak(v225);
                          }
                        }
                        MEMORY[0x212BC6398](v221, 0x10F0C40B62ED6C6);
                        v228 = v428;
                        v428 = 0;
                        if (v228)
                        {
                          v229 = (std::__shared_weak_count *)*((_QWORD *)v228 + 4);
                          if (v229)
                          {
                            v230 = (unint64_t *)&v229->__shared_owners_;
                            do
                              v231 = __ldaxr(v230);
                            while (__stlxr(v231 - 1, v230));
                            if (!v231)
                            {
                              ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                              std::__shared_weak_count::__release_weak(v229);
                            }
                          }
                          v232 = (std::__shared_weak_count *)*((_QWORD *)v228 + 2);
                          if (v232)
                          {
                            v233 = (unint64_t *)&v232->__shared_owners_;
                            do
                              v234 = __ldaxr(v233);
                            while (__stlxr(v234 - 1, v233));
                            if (!v234)
                            {
                              ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                              std::__shared_weak_count::__release_weak(v232);
                            }
                          }
                          MEMORY[0x212BC6398](v228, 0x10F0C40B62ED6C6);
                        }
                      }
                      v235 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
                      if (*((_QWORD *)&v431 + 1))
                      {
                        v236 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
                        do
                          v237 = __ldaxr(v236);
                        while (__stlxr(v237 - 1, v236));
                        if (!v237)
                        {
                          ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                          std::__shared_weak_count::__release_weak(v235);
                        }
                      }
                      v238 = *(std::__shared_weak_count **)&v430[16];
                      if (*(_QWORD *)&v430[16])
                      {
                        v239 = (unint64_t *)(*(_QWORD *)&v430[16] + 8);
                        do
                          v240 = __ldaxr(v239);
                        while (__stlxr(v240 - 1, v239));
                        if (!v240)
                        {
                          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                          std::__shared_weak_count::__release_weak(v238);
                        }
                      }
LABEL_333:
                      if (v193)
                      {
                        v241 = (const char *)&__dst;
                        if (v409 < 0)
                          v241 = __dst;
                        sub_20E8C003C((uint64_t)__p, "%s", v241);
                        sub_20E863570((uint64_t)__p);
                      }
                      sub_20E863570((uint64_t)__p);
                      v155 = v406;
                      if (!v406)
                        goto LABEL_487;
                      v242 = (unint64_t *)&v406->__shared_owners_;
                      do
                        v157 = __ldaxr(v242);
                      while (__stlxr(v157 - 1, v242));
LABEL_485:
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                        std::__shared_weak_count::__release_weak(v155);
                      }
LABEL_487:
                      if (SHIBYTE(v409) < 0)
                        operator delete(__dst);
                      v410 = (void *)*MEMORY[0x24BEDB7F0];
                      v331 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(void **)((char *)&v410 + *((_QWORD *)v410 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                      *((_QWORD *)&v411 + 1) = v331;
                      v412 = MEMORY[0x24BEDB848] + 16;
                      if (v419 < 0)
                        operator delete(v418);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v422);
                      return 0;
                    }
                  }
                  memcpy(v191, v172, v190);
                  goto LABEL_273;
                }
              }
              memmove(v182, v174, v175);
              goto LABEL_254;
            }
          }
          memmove(v179, v177, v178);
          goto LABEL_246;
        }
      }
      memmove(v11, v169, v10);
      goto LABEL_225;
    }
  }
  return 0;
}

void sub_20EA92D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v31 - 192);
  sub_20EA93848((_QWORD **)(v31 - 216));
  _Unwind_Resume(a1);
}

void sub_20EA92D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *object,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  uint64_t v35;

  if (*(_BYTE *)(v35 - 168) && *(char *)(v35 - 169) < 0)
    operator delete(*(void **)(v35 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (*(char *)(v35 - 233) < 0)
  {
    operator delete(*(void **)(v35 - 256));
    sub_20E863784((uint64_t)&object);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_20EA93468(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AD60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD60))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.calibration");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AD58);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AD60);
  }
  *a1 = qword_254A5AD58;
}

void sub_20EA93504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AD60);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AD60);
  _Unwind_Resume(a1);
}

void sub_20EA9355C(double *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v10 = operator new();
  v11 = *a1;
  v14 = &off_24C9C2508;
  *(_OWORD *)v15 = *(_OWORD *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v18 = v12;
  v19 = v13;
  v20 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  sub_20EB1B278(v10, (uint64_t)&v14, *a3, *a4, v11);
  *a5 = v10;
  v14 = &off_24C9C2508;
  if (v19)
    MEMORY[0x212BC6368](v19, 0x1000C808070C27FLL);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
}

void sub_20EA9365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EA93718(&a9);
  MEMORY[0x212BC6398](v9, 0x10A0C404E62F5DALL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA93688(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v4;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(a3 - a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v4 >> 3)];
    a1[2] = v7;
    memcpy(v6, a2, v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_20EA936FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA93718(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_24C9C2508;
  v2 = a1[7];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C808070C27FLL);
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EA93780(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_24C9C24B8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = v4;
    a1[1] = v5;
    if (!v7)
      return a1;
  }
  else
  {
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = 0;
    a1[1] = 0;
    if (!v7)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

_QWORD **sub_20EA93848(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *v2 = &off_24C9C2508;
    v3 = v2[7];
    if (v3)
      MEMORY[0x212BC6368](v3, 0x1000C808070C27FLL);
    v4 = (void *)v2[4];
    if (v4)
    {
      v2[5] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[1];
    if (v5)
    {
      v2[2] = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x10A0C404E62F5DALL);
  }
  return a1;
}

uint64_t sub_20EA938D4(uint64_t a1, int a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD v14[133];
  int v15;
  char v16;

  v4 = *(_DWORD **)a1;
  v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    while (*v4 != a2)
    {
      v4 += 272;
      if (v4 == v5)
        goto LABEL_7;
    }
  }
  if (v4 != v5)
    return 0;
LABEL_7:
  sub_20EA96B70((uint64_t)v14);
  v7 = *(_DWORD *)(a1 + 2288);
  LODWORD(v14[0]) = a2;
  v15 = v7;
  v16 = *(_BYTE *)(a1 + 2292);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 >= *(_QWORD *)(a1 + 16))
  {
    v9 = (uint64_t *)sub_20EA96D40((uint64_t *)a1, (uint64_t)v14);
  }
  else
  {
    sub_20E89E038(*(_QWORD *)(a1 + 8), (uint64_t)v14);
    v9 = (uint64_t *)(v8 + 1088);
    *(_QWORD *)(a1 + 8) = v8 + 1088;
  }
  v10 = *(uint64_t **)a1;
  v11 = 126 - 2 * __clz(0xF0F0F0F0F0F0F0F1 * (((uint64_t)v9 - *(_QWORD *)a1) >> 6));
  v12 = v9 == *(uint64_t **)a1;
  *(_QWORD *)(a1 + 8) = v9;
  if (v12)
    v13 = 0;
  else
    v13 = v11;
  sub_20EA971F4(v10, v9, v13, 1);
  sub_20E86A6B8(v14);
  return 1;
}

void sub_20EA939E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20E86A6B8(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA939F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86A6B8(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EA93A0C(uint64_t a1, int a2, int a3)
{
  _DWORD *v3;
  _DWORD *v4;
  std::logic_error *exception;

  v3 = *(_DWORD **)a1;
  v4 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v4)
  {
    while (*v3 != a2)
    {
      v3 += 272;
      if (v3 == v4)
        goto LABEL_4;
    }
  }
  if (v3 == v4)
  {
LABEL_4:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    goto LABEL_5;
  }
  if (a3 != 1)
  {
    if (!a3)
      return v3 + 2;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested stream id not found.");
LABEL_5:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return v3 + 134;
}

void sub_20EA93ABC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EA93AD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA93AE4@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 *v12;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  v4 = result[1];
  v9 = 0uLL;
  v10 = 0;
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v8 = 0uLL;
  }
  else
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 >> 6);
    if (v6 >> 62)
      sub_20E867F44();
    *(_QWORD *)&v9 = operator new(0xC3C3C3C3C3C3C3C4 * (v5 >> 6));
    *((_QWORD *)&v9 + 1) = v9;
    v10 = v9 + 4 * v6;
    v12 = &v9;
    do
    {
      if (*(_DWORD *)(v3 + 4) == 1)
        v7 = 1;
      else
        v7 = 2;
      v11 = v7;
      result = sub_20EA9AB98((uint64_t *)&v12, &v11);
      v3 += 1088;
    }
    while (v3 != v4);
    v8 = v9;
    v5 = v10;
  }
  *(_OWORD *)a2 = v8;
  a2[2] = v5;
  return result;
}

void sub_20EA93BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA93BD0(uint64_t *a1)
{
  float64x2_t v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  uint64_t v15;

  v1 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
  v2.f64[0] = round(*((double *)a1 + 9) * 1000000000.0) / 1000000000.0;
  *(float64x2_t *)(a1 + 3) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 3), v1)), v1);
  *(float64x2_t *)(a1 + 5) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 5), v1)), v1);
  *(_QWORD *)&v2.f64[1] = a1[10];
  v3 = vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 7), v1));
  *((double *)a1 + 11) = round(*((double *)a1 + 11) * 1000000000.0) / 1000000000.0;
  *(float64x2_t *)(a1 + 7) = vdivq_f64(vrndaq_f64(vmulq_f64(vdivq_f64(v3, v1), v1)), v1);
  *(float64x2_t *)(a1 + 9) = vdivq_f64(vrndaq_f64(vmulq_f64(v2, v1)), v1);
  *(float64x2_t *)(a1 + 15) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 15), v1)), v1);
  *(float64x2_t *)(a1 + 17) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 17), v1)), v1);
  *(float64x2_t *)(a1 + 19) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 19), v1)), v1);
  *(float64x2_t *)(a1 + 21) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 21), v1)), v1);
  *(float64x2_t *)(a1 + 23) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 23), v1)), v1);
  *(float64x2_t *)(a1 + 25) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 25), v1)), v1);
  *(float64x2_t *)(a1 + 27) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 27), v1)), v1);
  *(float64x2_t *)(a1 + 29) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 29), v1)), v1);
  *(float64x2_t *)(a1 + 31) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 31), v1)), v1);
  v4 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 35), v1)), v1);
  *(float64x2_t *)(a1 + 33) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 33), v1)), v1);
  *(float64x2_t *)(a1 + 35) = v4;
  v5 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 39), v1)), v1);
  *(float64x2_t *)(a1 + 37) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 37), v1)), v1);
  *(float64x2_t *)(a1 + 39) = v5;
  v6 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 43), v1)), v1);
  *(float64x2_t *)(a1 + 41) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 41), v1)), v1);
  *(float64x2_t *)(a1 + 43) = v6;
  v7 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 47), v1)), v1);
  *(float64x2_t *)(a1 + 45) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 45), v1)), v1);
  *(float64x2_t *)(a1 + 47) = v7;
  v8 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 51), v1)), v1);
  *(float64x2_t *)(a1 + 49) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 49), v1)), v1);
  *(float64x2_t *)(a1 + 51) = v8;
  v9 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 55), v1)), v1);
  *(float64x2_t *)(a1 + 53) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 53), v1)), v1);
  *(float64x2_t *)(a1 + 55) = v9;
  v10 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 59), v1)), v1);
  *(float64x2_t *)(a1 + 57) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 57), v1)), v1);
  *(float64x2_t *)(a1 + 59) = v10;
  v11 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 63), v1)), v1);
  *(float64x2_t *)(a1 + 61) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 61), v1)), v1);
  *(float64x2_t *)(a1 + 63) = v11;
  v12 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 65), v1)), v1);
  v13 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 67), v1)), v1);
  *(float64x2_t *)(a1 + 65) = v12;
  *(float64x2_t *)(a1 + 67) = v13;
  v14 = *(double *)a1;
  v15 = a1[1];
  if (*a1 != v15)
  {
    do
    {
      sub_20EA93E7C(*(_QWORD *)&v14 + 8);
      sub_20EA93E7C(*(_QWORD *)&v14 + 536);
      *(_QWORD *)&v14 += 1088;
    }
    while (*(_QWORD *)&v14 != v15);
  }
}

float64x2_t sub_20EA93E7C(uint64_t a1)
{
  float64x2_t *v1;
  float64x2_t *v2;
  int64_t v3;
  double *v4;
  unint64_t v5;
  float64x2_t *v6;
  float64x2_t v7;
  uint64_t v8;
  float64x2_t v9;
  double *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t result;

  v2 = *(float64x2_t **)(a1 + 16);
  v1 = *(float64x2_t **)(a1 + 24);
  v3 = (char *)v1 - (char *)v2;
  if (v1 != v2)
  {
    v4 = *(double **)(a1 + 16);
    if ((unint64_t)(v3 - 8) < 0x18)
      goto LABEL_6;
    v5 = ((unint64_t)(v3 - 8) >> 3) + 1;
    v4 = &v2->f64[v5 & 0x3FFFFFFFFFFFFFFCLL];
    v6 = v2 + 1;
    v7 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
    v8 = v5 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v9 = vdivq_f64(vrndaq_f64(vmulq_f64(*v6, v7)), v7);
      v6[-1] = vdivq_f64(vrndaq_f64(vmulq_f64(v6[-1], v7)), v7);
      *v6 = v9;
      v6 += 2;
      v8 -= 4;
    }
    while (v8);
    if (v5 != (v5 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v10 = (double *)((char *)v2->f64 + (v3 & 0xFFFFFFFFFFFFFFF8));
      do
      {
        *v4 = round(*v4 * 1000000000.0) / 1000000000.0;
        ++v4;
      }
      while (v4 != v10);
    }
  }
  v11 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
  v12 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 80), v11)), v11);
  *(float64x2_t *)(a1 + 64) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 64), v11)), v11);
  *(float64x2_t *)(a1 + 80) = v12;
  v13 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 112), v11)), v11);
  *(float64x2_t *)(a1 + 96) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 96), v11)), v11);
  *(float64x2_t *)(a1 + 112) = v13;
  v14 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 144), v11)), v11);
  *(float64x2_t *)(a1 + 128) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 128), v11)), v11);
  *(float64x2_t *)(a1 + 144) = v14;
  *(float64x2_t *)(a1 + 160) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 160), v11)), v11);
  *(double *)(a1 + 176) = round(*(double *)(a1 + 176) * 1000000000.0) / 1000000000.0;
  *(float64x2_t *)(a1 + 200) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 200), v11)), v11);
  *(float64x2_t *)(a1 + 216) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 216), v11)), v11);
  *(float64x2_t *)(a1 + 232) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 232), v11)), v11);
  *(float64x2_t *)(a1 + 248) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 248), v11)), v11);
  v15 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 280), v11)), v11);
  *(float64x2_t *)(a1 + 264) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 264), v11)), v11);
  *(float64x2_t *)(a1 + 280) = v15;
  v16 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 312), v11)), v11);
  *(float64x2_t *)(a1 + 296) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 296), v11)), v11);
  *(float64x2_t *)(a1 + 312) = v16;
  v17 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 344), v11)), v11);
  *(float64x2_t *)(a1 + 328) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 328), v11)), v11);
  *(float64x2_t *)(a1 + 344) = v17;
  v18 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 376), v11)), v11);
  *(float64x2_t *)(a1 + 360) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 360), v11)), v11);
  *(float64x2_t *)(a1 + 376) = v18;
  *(double *)(a1 + 392) = round(*(double *)(a1 + 392) * 1000000000.0) / 1000000000.0;
  if (*(_BYTE *)(a1 + 432))
  {
    *(float64x2_t *)(a1 + 408) = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 408), v11)), v11);
    *(double *)(a1 + 424) = round(*(double *)(a1 + 424) * 1000000000.0) / 1000000000.0;
  }
  result = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 440), v11)), v11);
  *(float64x2_t *)(a1 + 440) = result;
  return result;
}

uint64_t *sub_20EA940EC@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  std::logic_error *exception;

  a2[1] = 0;
  v3 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v4 = result[1] - *result;
  if (v4)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 0xF0F0F0F0F0F0F0F1 * (v4 >> 6);
LABEL_6:
    v10 = *v5;
    v9 = v5[1];
    if (*v5 != v9)
    {
      while (*(_DWORD *)v10 != v7)
      {
        v10 += 1088;
        if (v10 == v9)
          goto LABEL_41;
      }
    }
    if (v10 == v9)
    {
LABEL_41:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Requested camera id not found.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v11 = *(_QWORD *)(v10 + 400);
    if (v7 >= 0x10000)
    {
      result = (uint64_t *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    v12 = *v3;
    v13 = v3;
    v14 = v3;
    if (!*v3)
    {
LABEL_21:
      v16 = (uint64_t *)operator new(0x30uLL);
      v16[4] = v6;
      v16[5] = 0;
      *v16 = 0;
      v16[1] = 0;
      v16[2] = (uint64_t)v14;
      *v13 = v16;
      v17 = (uint64_t *)**a2;
      v18 = v16;
      if (v17)
      {
        *a2 = v17;
        v18 = *v13;
      }
      result = sub_20E868578(a2[1], v18);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
      v16[5] = v11;
      if (*(_DWORD *)(v10 + 4) != 2)
        goto LABEL_5;
LABEL_24:
      v19 = *(_QWORD *)(v10 + 928);
      if (v7 >= 0x10000)
      {
        result = (uint64_t *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          abort();
      }
      v20 = *v3;
      v21 = v3;
      v22 = v3;
      if (!*v3)
      {
LABEL_35:
        v25 = (uint64_t *)operator new(0x30uLL);
        v25[4] = v6 | 0x100000000;
        v25[5] = 0;
        *v25 = 0;
        v25[1] = 0;
        v25[2] = (uint64_t)v22;
        *v21 = v25;
        v26 = (uint64_t *)**a2;
        v27 = v25;
        if (v26)
        {
          *a2 = v26;
          v27 = *v21;
        }
        result = sub_20E868578(a2[1], v27);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
LABEL_4:
        v25[5] = v19;
        goto LABEL_5;
      }
      while (2)
      {
        while (1)
        {
          v22 = v20;
          v23 = *((_DWORD *)v20 + 8);
          if (v7 < v23)
            break;
          if (v7 == v23)
          {
            v24 = *((_DWORD *)v22 + 9);
            if (v24 >= 2)
              break;
            if (v24)
            {
              v25 = v22;
              goto LABEL_4;
            }
          }
          v20 = (uint64_t *)v22[1];
          if (!v20)
          {
            v21 = (uint64_t **)(v22 + 1);
            goto LABEL_35;
          }
        }
        v20 = (uint64_t *)*v22;
        v21 = (uint64_t **)v22;
        if (!*v22)
          goto LABEL_35;
        continue;
      }
    }
    while (1)
    {
      v14 = v12;
      v15 = *((_DWORD *)v12 + 8);
      if (v7 < v15)
        goto LABEL_16;
      if (v7 == v15)
      {
        if (!*((_DWORD *)v14 + 9))
        {
          v14[5] = v11;
          if (*(_DWORD *)(v10 + 4) == 2)
            goto LABEL_24;
LABEL_5:
          v6 = ++v7;
          if (v8 <= v7)
            return result;
          goto LABEL_6;
        }
LABEL_16:
        v12 = (uint64_t *)*v14;
        v13 = (uint64_t **)v14;
        if (!*v14)
          goto LABEL_21;
      }
      else
      {
        v12 = (uint64_t *)v14[1];
        if (!v12)
        {
          v13 = (uint64_t **)(v14 + 1);
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_20EA943E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20EA943FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20EA94414(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20EA9442C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20EA94444(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20EA9445C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA9447C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  sub_20E86A980(a1, (uint64_t)"[", 1);
  sub_20E86A980(a1, (uint64_t)"CameraHardwareParams for Primary Camera (CameraID ", 50);
  v4 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v4, (uint64_t)"): [Camera Mode: ", 17);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = sub_20E86A980(v5, (uint64_t)"; ", 2);
  v7 = sub_20EA87044(v6, a2 + 8);
  v8 = sub_20E86A980(v7, (uint64_t)"; ", 2);
  sub_20E86A980(v8, (uint64_t)"Primary Scale Factor: ", 22);
  std::ostream::operator<<();
  if (*(_BYTE *)(a2 + 1080))
  {
    v9 = sub_20E86A980(a1, (uint64_t)"; Multi-camera primary: ", 24);
    if (!*(_BYTE *)(a2 + 1080))
      sub_20E866B34();
    sub_20E86A980(v9, (uint64_t)"[", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v10, (uint64_t)":", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v11, (uint64_t)"]", 1);
  }
  sub_20E86A980(a1, (uint64_t)"]", 1);
  if (*(_DWORD *)(a2 + 4) != 1)
  {
    sub_20E86A980(a1, (uint64_t)"; CameraHardwareParams for Secondary Camera (CameraID ", 54);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = sub_20E86A980(v12, (uint64_t)"): [", 4);
    v14 = sub_20EA87044(v13, a2 + 536);
    sub_20E86A980(v14, (uint64_t)"; Secondary Scale Factor: ", 26);
    v15 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v15, (uint64_t)"]; ", 3);
  }
  v16 = *(_QWORD *)(a2 + 1064);
  if ((v16 & 0xFF00000000) != 0)
  {
    v17 = sub_20E86A980(a1, (uint64_t)"CameraModelType: ", 17);
    sub_20EA8DA34(v16, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20E86A980(v17, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_20E86A980(a1, (uint64_t)"CameraModelType: None", 21);
  }
  sub_20E86A980(a1, (uint64_t)"]", 1);
  return a1;
}

void sub_20EA946B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA946D0(_QWORD *a1, uint64_t a2)
{
  int *v4;
  int *v5;
  _DWORD *v6;
  _DWORD *v7;
  int *v8;
  int *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  std::logic_error *exception;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  char v31;
  char v32;
  int v33;
  void **v34;

  sub_20E86A980(a1, (uint64_t)"HardwareParams: [", 17);
  v26[0] = 0;
  v26[1] = 0;
  v27[0] = 0;
  v4 = *(int **)a2;
  v5 = *(int **)(a2 + 8);
  v34 = v26;
  if (v4 != v5)
  {
    do
    {
      v33 = *v4;
      sub_20EA9AB98((uint64_t *)&v34, &v33);
      v4 += 272;
    }
    while (v4 != v5);
    v6 = v26[0];
    v7 = v26[1];
    if (v26[0] != v26[1])
    {
      do
      {
        v8 = *(int **)a2;
        v9 = *(int **)(a2 + 8);
        if (*(int **)a2 != v9)
        {
          while (*v8 != *v6)
          {
            v8 += 272;
            if (v8 == v9)
              goto LABEL_48;
          }
        }
        if (v8 == v9)
        {
LABEL_48:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Requested camera id not found.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        sub_20EA9447C(a1, (uint64_t)v8);
        sub_20E86A980(a1, (uint64_t)"; ", 2);
        ++v6;
      }
      while (v6 != v7);
      v6 = v26[0];
    }
    if (v6)
    {
      v26[1] = v6;
      operator delete(v6);
    }
  }
  v10 = sub_20EA878F0(a1, a2 + 24);
  sub_20E86A980(v10, (uint64_t)"; ", 2);
  sub_20E8A2514((uint64_t)v26, a2 + 728);
  if (v31)
  {
    sub_20E86A980(a1, (uint64_t)"{", 1);
    if (v31)
      sub_20EA875D8(a1, (uint64_t)v26);
    v11 = "}";
    v12 = 1;
  }
  else
  {
    v11 = "Jasper Calibration: None; ";
    v12 = 26;
  }
  sub_20E86A980(a1, (uint64_t)v11, v12);
  if (v31)
  {
    v13 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (*((_QWORD *)&v28 + 1))
    {
      v29 = *((_QWORD *)&v28 + 1);
      operator delete(*((void **)&v28 + 1));
    }
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
  }
  LOBYTE(v26[0]) = 0;
  v32 = 0;
  if (*(_BYTE *)(a2 + 2232))
  {
    sub_20E89E038((uint64_t)v26, a2 + 1144);
    v32 = 1;
    sub_20E86A980(a1, (uint64_t)"{", 1);
    if (v32)
      sub_20EA9447C(a1, (uint64_t)v26);
    v16 = "}";
    v17 = 1;
  }
  else
  {
    v16 = "Pearl Calibration: None; ";
    v17 = 25;
  }
  sub_20E86A980(a1, (uint64_t)v16, v17);
  if (v32)
    sub_20E86A6B8(v26);
  v18 = *(_OWORD *)(a2 + 2272);
  v19 = *(_OWORD *)(a2 + 2256);
  *(_OWORD *)v26 = *(_OWORD *)(a2 + 2240);
  *(_OWORD *)v27 = v19;
  v28 = v18;
  if (!BYTE8(v18))
  {
    sub_20E86A980(a1, (uint64_t)"Range Sensor Calibration: None; ", 32);
    v20 = *(_QWORD *)(a2 + 2288);
    if ((v20 & 0xFF00000000) != 0)
      goto LABEL_37;
LABEL_46:
    sub_20E86A980(a1, (uint64_t)"CameraModelType: None", 21);
    goto LABEL_47;
  }
  sub_20E86A980(a1, (uint64_t)"{", 1);
  sub_20EA88D2C(a1, (uint64_t)v26);
  sub_20E86A980(a1, (uint64_t)"}", 1);
  v20 = *(_QWORD *)(a2 + 2288);
  if ((v20 & 0xFF00000000) == 0)
    goto LABEL_46;
LABEL_37:
  v21 = sub_20E86A980(a1, (uint64_t)"CameraModelType: ", 17);
  sub_20EA8DA34(v20, (std::string *)v26);
  if (SHIBYTE(v27[0]) >= 0)
    v22 = v26;
  else
    v22 = (void **)v26[0];
  if (SHIBYTE(v27[0]) >= 0)
    v23 = HIBYTE(v27[0]);
  else
    v23 = (uint64_t)v26[1];
  sub_20E86A980(v21, (uint64_t)v22, v23);
  if (SHIBYTE(v27[0]) < 0)
    operator delete(v26[0]);
LABEL_47:
  sub_20E86A980(a1, (uint64_t)"]", 1);
  return a1;
}

void sub_20EA94A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA94AF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  int v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const std::locale::facet *v29;
  std::locale v30;
  char v31;

  MEMORY[0x212BC5BB8](&v31, a1, 0);
  if (!v31)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v29 = std::locale::use_facet(&v30, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v30);
  v7 = 0;
  v8 = a1 + 5;
  if (v5 >= 1)
    v9 = v6;
  else
    v9 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v10 = *(_QWORD **)((char *)v8 + *(_QWORD *)(*a1 - 24));
    v11 = (unsigned __int8 *)v10[3];
    if (v11 == (unsigned __int8 *)v10[4])
      break;
    v12 = *v11;
LABEL_16:
    if ((v12 & 0x80) == 0 && (*((_DWORD *)&v29[1].~facet + v12) & 0x4000) != 0)
    {
      v26 = 0;
      goto LABEL_44;
    }
    v14 = *(char *)(a2 + 23);
    if (v14 < 0)
    {
      v17 = *(_QWORD *)(a2 + 16) & 0x7FFFFFFFFFFFFFFFLL;
      v16 = v17 - 1;
      if (*(_QWORD *)(a2 + 8) == v17 - 1)
      {
        if (v17 == 0x7FFFFFFFFFFFFFF8)
          sub_20E860B7C();
        v15 = *(_BYTE **)a2;
        v18 = 0x7FFFFFFFFFFFFFF7;
        if (v16 <= 0x3FFFFFFFFFFFFFF2)
        {
LABEL_24:
          if (v16 + 1 > 2 * v16)
            v19 = v16 + 1;
          else
            v19 = 2 * v16;
          v20 = (v19 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v20 = v19 | 7;
          if (v19 >= 0x17)
            v18 = v20 + 1;
          else
            v18 = 23;
        }
        v21 = operator new(v18);
        v22 = v21;
        if (!v16 || (memmove(v21, v15, v16), v16 != 22))
          operator delete(v15);
        *(_QWORD *)a2 = v22;
        *(_QWORD *)(a2 + 16) = v18 | 0x8000000000000000;
      }
      else
      {
        v22 = *(_BYTE **)a2;
        v16 = *(_QWORD *)(a2 + 8);
      }
      *(_QWORD *)(a2 + 8) = v16 + 1;
      goto LABEL_39;
    }
    if (*(_BYTE *)(a2 + 23) == 22)
    {
      v15 = (_BYTE *)a2;
      v16 = 22;
      goto LABEL_24;
    }
    v16 = *(unsigned __int8 *)(a2 + 23);
    *(_BYTE *)(a2 + 23) = (v14 + 1) & 0x7F;
    v22 = (_BYTE *)a2;
LABEL_39:
    v23 = &v22[v16];
    *v23 = v12;
    v23[1] = 0;
    v24 = *(_QWORD **)((char *)v8 + *(_QWORD *)(*a1 - 24));
    v25 = v24[3];
    if (v25 == v24[4])
      (*(void (**)(_QWORD *))(*v24 + 80))(v24);
    else
      v24[3] = v25 + 1;
    if (v9 == ++v7)
    {
      v26 = 0;
      v27 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_46;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10);
  v12 = v13;
  if (v13 != -1)
    goto LABEL_16;
  v26 = 2;
LABEL_44:
  v27 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v7)
    v26 |= 4u;
LABEL_46:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v27 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v27 - 24) + 32) | v26);
  return a1;
}

void sub_20EA94DB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  __break(1u);
}

void sub_20EA94E24(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA94E38(uint64_t *a1, __int128 **a2)
{
  char *v3;
  int v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  double v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void *p_p;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void **v41;
  uint64_t v42;
  __int128 v44;
  __int128 v45;
  void *__p;
  size_t v47;
  int64_t v48;
  std::string __b;
  std::string v50;
  void *v51[2];
  int64_t v52;

  v44 = (*a2)[1];
  v45 = **a2;
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *((_DWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 2);
  v5 = *((_QWORD *)v3 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v5 = v6 + 2;
    v7 = v5 + ~v6;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 - 1;
    if (v7 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v10 = v8;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_b = (std::string *)operator new(v12 + 1);
      __b.__r_.__value_.__l.__size_ = v7 - 1;
      __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v7 - 1;
      p_b = &__b;
      if (v7 == 1)
      {
        LODWORD(v7) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = __exp10((double)-(uint64_t)v6);
    v9 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v7) = 4;
  }
  memset(p_b, 32, v9);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v9] = 0;
  v14 = std::string::append(&__b, "0 ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v17 = v6 | 7;
    v18 = v17 + 1;
    p_p = operator new(v17 + 1);
    v47 = v6;
    v48 = v18 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v48) = v6;
  p_p = &__p;
  if (v6)
LABEL_20:
    memset(p_p, 32, v6);
  *((_BYTE *)p_p + v6) = 0;
  if (v48 >= 0)
    v19 = (const std::string::value_type *)&__p;
  else
    v19 = (const std::string::value_type *)__p;
  if (v48 >= 0)
    v20 = HIBYTE(v48);
  else
    v20 = v47;
  v21 = std::string::append(&v50, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v52 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)v51 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_42:
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_43;
  }
  operator delete(__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
LABEL_29:
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_30;
LABEL_43:
  operator delete(__b.__r_.__value_.__l.__data_);
LABEL_30:
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v50.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(a1, (uint64_t)&v50, 1);
  v23 = a1 + 1;
  v25 = a1 + 2;
  v24 = *a1;
  v26 = (int)v7 + (int)v6 + 1;
  v27 = (int)v6 - 3;
  v28 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v28[9] & 1) != 0)
  {
    if (*(double *)&v45 != 0.0)
    {
      *((_QWORD *)v28 + 3) = v26;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v24 - 24)) = v27;
      std::ostream::operator<<();
      goto LABEL_45;
    }
  }
  else if (fabs(*(double *)&v45) >= v10)
  {
    *((_QWORD *)v28 + 3) = v26;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v24 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v24 - 24)) = (int)v6;
    std::ostream::operator<<();
    goto LABEL_45;
  }
  if (v52 >= 0)
    v29 = v51;
  else
    v29 = (void **)v51[0];
  if (v52 >= 0)
    v30 = HIBYTE(v52);
  else
    v30 = (uint64_t)v51[1];
  sub_20E86A980(a1, (uint64_t)v29, v30);
LABEL_45:
  v50.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v50, 1);
  v31 = *a1;
  v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v32[9] & 1) != 0)
  {
    if (*((double *)&v45 + 1) != 0.0)
    {
      *((_QWORD *)v32 + 3) = v26;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v31 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v31 - 24)) = v27;
      std::ostream::operator<<();
      goto LABEL_57;
    }
  }
  else if (fabs(*((double *)&v45 + 1)) >= v10)
  {
    *((_QWORD *)v32 + 3) = v26;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v31 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v31 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v31 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v31 - 24)) = (int)v6;
    std::ostream::operator<<();
    goto LABEL_57;
  }
  if (v52 >= 0)
    v33 = v51;
  else
    v33 = (void **)v51[0];
  if (v52 >= 0)
    v34 = HIBYTE(v52);
  else
    v34 = (uint64_t)v51[1];
  sub_20E86A980(a1, (uint64_t)v33, v34);
LABEL_57:
  v50.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v50, 1);
  v35 = *a1;
  v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v36[9] & 1) != 0)
  {
    if (*(double *)&v44 != 0.0)
    {
      *((_QWORD *)v36 + 3) = v26;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v35 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v35 - 24)) = v27;
      std::ostream::operator<<();
      goto LABEL_69;
    }
  }
  else if (fabs(*(double *)&v44) >= v10)
  {
    *((_QWORD *)v36 + 3) = v26;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v35 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v35 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(v35 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v35 - 24)) = (int)v6;
    std::ostream::operator<<();
    goto LABEL_69;
  }
  if (v52 >= 0)
    v37 = v51;
  else
    v37 = (void **)v51[0];
  if (v52 >= 0)
    v38 = HIBYTE(v52);
  else
    v38 = (uint64_t)v51[1];
  sub_20E86A980(a1, (uint64_t)v37, v38);
LABEL_69:
  v50.__r_.__value_.__s.__data_[0] = 44;
  sub_20E86A980(a1, (uint64_t)&v50, 1);
  v39 = *a1;
  v40 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v40[9] & 1) == 0)
  {
    if (fabs(*((double *)&v44 + 1)) >= v10)
    {
      *((_QWORD *)v40 + 3) = v26;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v39 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v39 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v23 + *(_QWORD *)(v39 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v39 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_81;
    }
LABEL_73:
    if (v52 >= 0)
      v41 = v51;
    else
      v41 = (void **)v51[0];
    if (v52 >= 0)
      v42 = HIBYTE(v52);
    else
      v42 = (uint64_t)v51[1];
    sub_20E86A980(a1, (uint64_t)v41, v42);
    goto LABEL_81;
  }
  if (*((double *)&v44 + 1) == 0.0)
    goto LABEL_73;
  *((_QWORD *)v40 + 3) = v26;
  *(_DWORD *)((char *)v23 + *(_QWORD *)(v39 - 24)) |= 0x400u;
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v39 - 24)) = v27;
  std::ostream::operator<<();
LABEL_81:
  sub_20E86A980(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v4;
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  return a1;
}

void sub_20EA95428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA954BC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_24C9C2508;
  v2 = a1[7];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C808070C27FLL);
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA95534(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X8>)
{
  _QWORD *v8;
  _BOOL4 v9;
  float64x2_t *v10;
  unsigned int v11;
  unsigned int v12;
  float64x2_t *v13;
  unsigned int v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  int v21;
  float64x2_t *v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  unint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64_t v78;
  float64x2_t v79;
  unint64_t v80;
  float64x2_t v81;
  unint64_t v82;
  float64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t *v90;
  unint64_t v91;
  float64x2_t v92;
  unint64_t v93;
  float64x2_t v94;
  unint64_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int8x16_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  int8x16_t v195;
  float64x2_t v196;
  int8x16_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  int8x16_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  _BYTE v210[32];
  double v211;
  double v212;
  double v213;
  double v214;
  float64_t v215;
  float64_t v216;
  float64_t v217;
  float64_t v218;
  double v219;
  double v220;
  double v221;
  double v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  _OWORD v229[6];
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  int8x16_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  int8x16_t v243;
  float64x2_t v244;
  int8x16_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  uint64_t v266;

  v266 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 8);
  v9 = a3 == 0;
  if (a3)
    v10 = (float64x2_t *)&v215;
  else
    v10 = 0;
  sub_20EA95FCC((double **)(a1 + 8), &v219, v10, *a2);
  v12 = v11;
  if (v9)
    v13 = 0;
  else
    v13 = (float64x2_t *)v210;
  sub_20EA95FCC((double **)(a1 + 32), &v211, v13, a2[1]);
  v15 = *(double *)(*v8 + 8 * (v12 + 1)) - *(double *)(*v8 + 8 * v12);
  v16 = *(double *)(*(_QWORD *)(a1 + 32) + 8 * (v14 + 1)) - *(double *)(*(_QWORD *)(a1 + 32) + 8 * v14);
  v17 = *(_DWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = (float64x2_t *)(v18 + 192 * (v17 * v14 + v12));
  v20 = (float64x2_t *)(v18 + 192 * (v17 * v14 + v12 + 1));
  v21 = v17 * (v14 + 1);
  v22 = (float64x2_t *)(v18 + 192 * (v21 + v12));
  v23 = (float64x2_t *)(v18 + 192 * (v21 + v12 + 1));
  v201 = v19[2];
  v204 = (int8x16_t)vmulq_n_f64(v19[5], v15);
  v206 = vmulq_n_f64(v19[4], v15);
  v208 = vmulq_n_f64(v19[3], v15);
  v24 = vmulq_n_f64(v20[5], v15);
  v25 = vmulq_n_f64(v20[4], v15);
  v56 = vmulq_n_f64(v20[3], v15);
  v57 = vmulq_n_f64(v22[5], v15);
  v26 = vmulq_n_f64(v22[4], v15);
  v27 = vmulq_n_f64(v22[3], v15);
  v28 = vmulq_n_f64(v23[5], v15);
  v29 = vmulq_n_f64(v23[4], v15);
  v189 = v23[2];
  v192 = v22[2];
  v197 = (int8x16_t)vmulq_n_f64(v23[3], v15);
  v199 = v20[2];
  v30 = vmulq_n_f64(v19[8], v16);
  v195 = (int8x16_t)vmulq_n_f64(v19[7], v16);
  v58 = vmulq_n_f64(v19[6], v16);
  v31 = vmulq_n_f64(v20[8], v16);
  v32 = vmulq_n_f64(v20[7], v16);
  v187 = (int8x16_t)vmulq_n_f64(v20[6], v16);
  v33 = v15 * v16;
  v34 = vmulq_n_f64(v22[8], v16);
  v35 = vmulq_n_f64(v22[7], v16);
  v36 = vmulq_n_f64(v22[6], v16);
  v37 = vmulq_n_f64(v23[8], v16);
  v38 = vmulq_n_f64(v23[7], v16);
  v39 = vmulq_n_f64(v23[6], v16);
  v40 = vmulq_n_f64(v19[11], v33);
  v41 = vmulq_n_f64(v19[10], v33);
  v42 = vmulq_n_f64(v19[9], v33);
  v43 = vmulq_n_f64(v20[11], v33);
  v44 = vmulq_n_f64(v20[10], v33);
  v45 = vmulq_n_f64(v20[9], v33);
  v46 = vmulq_n_f64(v22[11], v33);
  v47 = vmulq_n_f64(v22[10], v33);
  v48 = vmulq_n_f64(v22[9], v33);
  v49 = vmulq_n_f64(v23[11], v33);
  v50 = vmulq_n_f64(v23[10], v33);
  v51 = vmulq_n_f64(v23[9], v33);
  v52 = v19[1];
  v223 = *v19;
  v224 = v52;
  v225 = v201;
  v53 = v20[1];
  v226 = *v20;
  v227 = v53;
  v228 = v199;
  v54 = v22[1];
  v230 = *v22;
  v231 = v54;
  v232 = v192;
  v55 = v23[1];
  v233 = *v23;
  v234 = v55;
  v235 = v189;
  v229[2] = v204;
  v229[1] = v206;
  v229[0] = v208;
  v229[5] = v24;
  v229[4] = v25;
  v167 = v56;
  v229[3] = v56;
  v168 = v27;
  v169 = v29;
  v236 = v27;
  v237 = v26;
  v171 = v57;
  v238 = v57;
  *(_QWORD *)&v56.f64[0] = v195.i64[0];
  *(_QWORD *)&v57.f64[0] = v197.i64[0];
  v239 = v197;
  v240 = v29;
  v170 = v28;
  v241 = v28;
  v242 = v58;
  v178 = v30;
  v180 = v58;
  *(_QWORD *)&v58.f64[0] = v187.i64[0];
  v243 = v195;
  v244 = v30;
  v245 = v187;
  v246 = v32;
  v174 = v31;
  v176 = v32;
  v247 = v31;
  v248 = v42;
  v249 = v41;
  v250 = v40;
  v182 = v40;
  v59 = v44;
  v251 = v45;
  v252 = v44;
  v253 = v43;
  v254 = v36;
  v185 = v35;
  v255 = v35;
  v256 = v34;
  v190 = v34;
  v193 = v39;
  v257 = v39;
  v258 = v38;
  v202 = v37;
  v259 = v37;
  v260 = v48;
  v261 = v47;
  v262 = v46;
  v263 = v51;
  v264 = v50;
  v265 = v49;
  if (v9)
  {
    v122 = v43;
    v123 = v49;
    *(_QWORD *)&v124.f64[0] = v204.i64[0];
    *(_QWORD *)&v124.f64[1] = vextq_s8(v204, v204, 8uLL).u64[0];
    v125 = v206;
    *(_QWORD *)&v125.f64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
    v126 = v50;
    v127 = v51;
    v128 = v208;
    *(_QWORD *)&v128.f64[1] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u64[0];
    v129 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v223, v219), (float64x2_t)0), vmulq_n_f64(v226, v220)), vmulq_n_f64(v128, v221));
    v130 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v224, v219), (float64x2_t)0), vmulq_n_f64(v227, v220)), vmulq_n_f64(v125, v221));
    v131 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v225, v219), (float64x2_t)0), vmulq_n_f64(v228, v220)), vmulq_n_f64(v124, v221));
    v133 = v167;
    v132 = v24;
    *(_QWORD *)&v133.f64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
    v134 = v25;
    *(_QWORD *)&v134.f64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
    *(_QWORD *)&v132.f64[1] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
    v135 = vmulq_n_f64(vaddq_f64(v129, vmulq_n_f64(v133, v222)), v211);
    v136 = vmulq_n_f64(vaddq_f64(v130, vmulq_n_f64(v134, v222)), v211);
    v137 = vmulq_n_f64(vaddq_f64(v131, vmulq_n_f64(v132, v222)), v211);
    v138 = v168;
    *(_QWORD *)&v138.f64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
    v140 = v171;
    v139 = v26;
    *(_QWORD *)&v139.f64[1] = vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL).u64[0];
    *(_QWORD *)&v140.f64[1] = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
    v141 = vaddq_f64(vmulq_n_f64(v140, v221), vaddq_f64(vaddq_f64(vmulq_n_f64(v232, v219), (float64x2_t)0), vmulq_n_f64(v235, v220)));
    v142 = vaddq_f64(vmulq_n_f64(v139, v221), vaddq_f64(vaddq_f64(vmulq_n_f64(v231, v219), (float64x2_t)0), vmulq_n_f64(v234, v220)));
    v144 = v169;
    v143 = v170;
    *(_QWORD *)&v143.f64[1] = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
    *(_QWORD *)&v144.f64[1] = vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL).u64[0];
    *(_QWORD *)&v57.f64[1] = vextq_s8(v197, v197, 8uLL).u64[0];
    v145 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v143, v222), v141), v212);
    v146 = vaddq_f64(vaddq_f64(v135, (float64x2_t)0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v57, v222), vaddq_f64(vmulq_n_f64(v138, v221), vaddq_f64(vaddq_f64(vmulq_n_f64(v230, v219), (float64x2_t)0), vmulq_n_f64(v233, v220)))), v212));
    v147 = vaddq_f64(vaddq_f64(v136, (float64x2_t)0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v144, v222), v142), v212));
    v148 = v178;
    v149 = v180;
    *(_QWORD *)&v148.f64[1] = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u64[0];
    *(_QWORD *)&v56.f64[1] = vextq_s8(v195, v195, 8uLL).u64[0];
    *(_QWORD *)&v149.f64[1] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
    *(_QWORD *)&v58.f64[1] = vextq_s8(v187, v187, 8uLL).u64[0];
    v151 = v174;
    v150 = v176;
    *(_QWORD *)&v150.f64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u64[0];
    *(_QWORD *)&v151.f64[1] = vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL).u64[0];
    v152 = vaddq_f64(vaddq_f64(v137, (float64x2_t)0), v145);
    v153 = vaddq_f64(vaddq_f64(vmulq_n_f64(v148, v219), (float64x2_t)0), vmulq_n_f64(v151, v220));
    v154 = v182;
    *(_QWORD *)&v154.f64[1] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
    *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    *(_QWORD *)&v45.f64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
    *(_QWORD *)&v59.f64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
    *(_QWORD *)&v122.f64[1] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u64[0];
    v155 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(v153, vmulq_n_f64(v154, v221)), vmulq_n_f64(v122, v222)), v213), v152);
    v156 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v56, v219), (float64x2_t)0), vmulq_n_f64(v150, v220)), vmulq_n_f64(v41, v221)), vmulq_n_f64(v59, v222)), v213), v147);
    v157 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v149, v219), (float64x2_t)0), vmulq_n_f64(v58, v220)), vmulq_n_f64(v42, v221)), vmulq_n_f64(v45, v222)), v213), v146);
    v159 = v36;
    v158 = v185;
    *(_QWORD *)&v159.f64[1] = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
    *(_QWORD *)&v158.f64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u64[0];
    v160 = v190;
    v161 = v193;
    *(_QWORD *)&v160.f64[1] = vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL).u64[0];
    v162 = vaddq_f64(vmulq_n_f64(v160, v219), (float64x2_t)0);
    v163 = vaddq_f64(vmulq_n_f64(v159, v219), (float64x2_t)0);
    v165 = v38;
    v164 = v202;
    *(_QWORD *)&v164.f64[1] = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
    *(_QWORD *)&v165.f64[1] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u64[0];
    *(_QWORD *)&v161.f64[1] = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u64[0];
    *(_QWORD *)&v48.f64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
    *(_QWORD *)&v47.f64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
    *(_QWORD *)&v46.f64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
    *(_QWORD *)&v123.f64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
    *(_QWORD *)&v126.f64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u64[0];
    *(_QWORD *)&v127.f64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
    v166 = vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(v162, vmulq_n_f64(v164, v220)), vmulq_n_f64(v46, v221)), vmulq_n_f64(v123, v222)), v214);
    v84 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(v163, vmulq_n_f64(v161, v220)), vmulq_n_f64(v48, v221)), vmulq_n_f64(v127, v222)), v214), v157);
    v91 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
    v92 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v158, v219), (float64x2_t)0), vmulq_n_f64(v165, v220)), vmulq_n_f64(v47, v221)), vmulq_n_f64(v126, v222)), v214), v156);
    v93 = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
    v94 = vaddq_f64(v166, v155);
    v95 = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
  }
  else
  {
    v60 = 0;
    v61.f64[0] = v215;
    v62.f64[0] = v216;
    v63.f64[0] = v220;
    v64.f64[0] = v221;
    v65.f64[0] = v222;
    v66.f64[0] = v217;
    v67.f64[0] = v218;
    v68.f64[0] = v219;
    v69.f64[0] = v219;
    v69.f64[1] = v219;
    v196 = v69;
    v69.f64[1] = v219;
    v68.f64[1] = v219;
    v198 = v68;
    v68.f64[0] = v215;
    v70.f64[1] = v215;
    v191 = v70;
    v194 = v69;
    v70.f64[0] = 0.0;
    v69.f64[0] = v215;
    v71.f64[0] = v220;
    v72.f64[0] = v220;
    v73.f64[0] = v216;
    v74 = 0;
    v75.f64[0] = v216;
    v76.f64[0] = v221;
    v77.f64[0] = v221;
    v78 = v217;
    v79.f64[0] = 0.0;
    v80 = 0;
    v81.f64[0] = 0.0;
    v69.f64[1] = v215;
    v61.f64[1] = v215;
    v82 = 0;
    v71.f64[1] = v220;
    v186 = v71;
    v188 = v69;
    v72.f64[1] = v220;
    v184 = v72;
    v63.f64[1] = v220;
    v200 = v63;
    v85.f64[0] = v217;
    v86.f64[0] = v222;
    v87.f64[0] = v222;
    v83 = v218;
    v73.f64[1] = v216;
    v84.f64[0] = 0.0;
    v75.f64[1] = v216;
    v181 = v75;
    v183 = v73;
    v89.f64[0] = v218;
    v62.f64[1] = v216;
    v207 = v62;
    v209 = v61;
    v76.f64[1] = v221;
    v77.f64[1] = v221;
    v175 = v77;
    v177 = v76;
    v64.f64[1] = v221;
    v94.f64[1] = v217;
    v85.f64[1] = v217;
    v66.f64[1] = v217;
    v203 = v66;
    v205 = v64;
    v86.f64[1] = v222;
    v87.f64[1] = v222;
    v65.f64[1] = v222;
    v179 = v65;
    v92.f64[1] = v218;
    v88 = v92;
    v89.f64[1] = v218;
    v67.f64[1] = v218;
    v172 = v94;
    v173 = v67;
    v90 = (float64x2_t *)v229;
    v91 = 0;
    v92.f64[0] = 0.0;
    v93 = 0;
    v94.f64[0] = 0.0;
    v95 = 0;
    v96 = 0uLL;
    v97 = 0uLL;
    v98 = 0uLL;
    do
    {
      v99 = v90[-6];
      v100 = v90[-5];
      v101 = v90[-4];
      v102 = v90[-3];
      v103 = v90[-2];
      v104 = v90[-1];
      v105 = vaddq_f64(vaddq_f64(vmulq_f64(v196, v99), (float64x2_t)0), vmulq_f64(v200, v102));
      v106 = vaddq_f64(vaddq_f64(vmulq_f64(v194, v100), (float64x2_t)0), vmulq_f64(v184, v103));
      v107 = vaddq_f64(vaddq_f64(vmulq_f64(v198, v101), (float64x2_t)0), vmulq_f64(v186, v104));
      v108 = vaddq_f64(vaddq_f64(vmulq_f64(v191, v101), (float64x2_t)0), vmulq_f64(v207, v104));
      v109 = vaddq_f64(vaddq_f64(vmulq_f64(v188, v100), (float64x2_t)0), vmulq_f64(v181, v103));
      v110 = v90[1];
      v111 = v90[2];
      v112 = v90[3];
      v113 = vaddq_f64(v106, vmulq_f64(v175, v110));
      v114 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v209, v99), (float64x2_t)0), vmulq_f64(v183, v102)), vmulq_f64(v203, *v90));
      v115 = vaddq_f64(v109, vmulq_f64(v85, v110));
      v116 = v90[4];
      v117 = v90[5];
      v118 = vaddq_f64(vaddq_f64(v105, vmulq_f64(v177, *v90)), vmulq_f64(v179, v112));
      v119 = vaddq_f64(v113, vmulq_f64(v87, v116));
      v120 = vaddq_f64(vaddq_f64(v107, vmulq_f64(v205, v111)), vmulq_f64(v86, v117));
      v121 = vaddq_f64(v115, vmulq_f64(v89, v116));
      *(_QWORD *)&v84.f64[1] = v91;
      v116.f64[0] = *(double *)((char *)&v211 + v60);
      *(_QWORD *)&v92.f64[1] = v93;
      v84 = vaddq_f64(v84, vmulq_n_f64(v118, v116.f64[0]));
      v92 = vaddq_f64(v92, vmulq_n_f64(v119, v116.f64[0]));
      *(_QWORD *)&v94.f64[1] = v95;
      v94 = vaddq_f64(v94, vmulq_n_f64(v120, v116.f64[0]));
      v97 = vaddq_f64(v97, vmulq_n_f64(vaddq_f64(vaddq_f64(v108, vmulq_f64(v172, v111)), vmulq_f64(v173, v117)), v116.f64[0]));
      v96 = vaddq_f64(v96, vmulq_n_f64(v121, v116.f64[0]));
      v98 = vaddq_f64(v98, vmulq_n_f64(vaddq_f64(v114, vmulq_f64(v88, v112)), v116.f64[0]));
      *(_QWORD *)&v70.f64[1] = v74;
      *(_QWORD *)&v79.f64[1] = v80;
      v91 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
      v114.f64[0] = *(float64_t *)&v210[v60];
      *(_QWORD *)&v81.f64[1] = v82;
      v93 = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
      v81 = vaddq_f64(v81, vmulq_n_f64(v120, v114.f64[0]));
      v79 = vaddq_f64(v79, vmulq_n_f64(v119, v114.f64[0]));
      v70 = vaddq_f64(v70, vmulq_n_f64(v118, v114.f64[0]));
      v95 = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
      v74 = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
      v80 = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
      v82 = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
      v60 += 8;
      v90 += 12;
    }
    while (v60 != 32);
    *(_QWORD *)&v98.f64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
    *(_QWORD *)&v96.f64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u64[0];
    *a3 = v98;
    a3[1] = v96;
    *(_QWORD *)&v97.f64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
    *(_QWORD *)&v70.f64[1] = v74;
    a3[2] = v97;
    a3[3] = v70;
    *(_QWORD *)&v79.f64[1] = v80;
    *(_QWORD *)&v81.f64[1] = v82;
    a3[4] = v79;
    a3[5] = v81;
  }
  *(_QWORD *)&v84.f64[1] = v91;
  *(_QWORD *)&v92.f64[1] = v93;
  *a4 = v84;
  a4[1] = v92;
  *(_QWORD *)&v94.f64[1] = v95;
  a4[2] = v94;
}

void sub_20EA95F58(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_20EA95F64(uint64_t a1)
{
  unsigned int v1;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_DWORD *)(a1 + 72);
  v4 = *(_DWORD *)(a1 + 76);
  v5 = v1;
  v3 = sub_20EA963EC(a1);
  return sub_20EA960E4("BicubicHermiteSpline: [U: ", &v5, (std::string *)"; V ",
           &v4,
           (std::string *)"; Hash: ",
           &v3,
           (std::string *)"]");
}

float64x2_t sub_20EA95FCC(double **a1, double *a2, float64x2_t *a3, double a4)
{
  double *v4;
  double *v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  double v16;
  float64x2_t result;
  float64_t v18;
  double v19;
  float64_t v20;
  float64x2_t v21;

  v4 = *a1;
  v5 = a1[1];
  if (*(v5 - 1) <= a4)
  {
    v12 = (char *)v5 - (char *)v4;
    v13 = -2;
  }
  else
  {
    if (v5 != v4)
    {
      v6 = *v4;
      v7 = v5 - v4;
      if (*v4 <= a4)
        v6 = a4;
      v5 = *a1;
      do
      {
        v8 = v7 >> 1;
        v9 = &v5[v7 >> 1];
        v11 = *v9;
        v10 = v9 + 1;
        v7 += ~(v7 >> 1);
        if (v6 < v11)
          v7 = v8;
        else
          v5 = v10;
      }
      while (v7);
    }
    v12 = (char *)v5 - (char *)v4;
    v13 = -1;
  }
  v14 = v13 + (v12 >> 3);
  v15 = v4[v14];
  v16 = 1.0 / (v4[v14 + 1] - v15);
  result.f64[0] = (a4 - v15) * v16;
  v18 = result.f64[0] * (result.f64[0] * result.f64[0]);
  v19 = result.f64[0] * result.f64[0] * 3.0;
  *a2 = v18 + v18 - v19 + 1.0;
  a2[1] = v19 - (v18 + v18);
  a2[2] = result.f64[0] + v18 - (result.f64[0] * result.f64[0] + result.f64[0] * result.f64[0]);
  a2[3] = v18 - result.f64[0] * result.f64[0];
  if (a3)
  {
    v20 = result.f64[0] * result.f64[0] * 6.0;
    a3->f64[0] = v20 - result.f64[0] * 6.0;
    a3->f64[1] = result.f64[0] * 6.0 - v20;
    a3[1].f64[0] = v19 + result.f64[0] * -4.0 + 1.0;
    a3[1].f64[1] = v19 - (result.f64[0] + result.f64[0]);
    v21 = vmulq_n_f64(a3[1], v16);
    result = vmulq_n_f64(*a3, v16);
    *a3 = result;
    a3[1] = v21;
  }
  return result;
}

uint64_t sub_20EA960E4(char *__s, unsigned int *a2, std::string *a3, unsigned int *a4, std::string *a5, unint64_t *a6, std::string *a7)
{
  uint64_t result;
  _DWORD v14[6];
  int v15;
  std::string v16;
  std::string **v17;
  std::string *v18;
  std::string *v19;
  _DWORD *v20;
  std::string *v21;
  std::string *v22;

  v15 = 0;
  sub_20E9955EC(v14, __s);
  std::to_string(&v16, *a2);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20E877AB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C9C2430[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a3;
  v20 = v14;
  v21 = a3;
  v22 = a3;
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C9C2448[v15])(&v16, v14);
  std::to_string(&v16, *a4);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20E877AB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C9C2430[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a5;
  v20 = v14;
  v21 = a5;
  v22 = a5;
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C9C2460[v15])(&v16, v14);
  std::to_string(&v16, *a6);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20E877AB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C9C2430[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a7;
  v20 = v14;
  v21 = a7;
  v22 = a7;
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C9C2478[v15])(&v16, v14);
  if (v15 == -1)
    sub_20E877AB8();
  v18 = &v16;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C9C2490[v15])(&v18, v14);
  if (v15 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C9C2418[v15])(&v18, v14);
  return result;
}

void sub_20EA96390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

unint64_t sub_20EA963EC(uint64_t a1)
{
  double *v2;
  double *v3;
  unint64_t result;
  uint64_t v5;
  double *v6;
  double *i;
  uint64_t v8;
  unsigned int v9;
  double *v10;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(double **)(a1 + 8);
  v3 = *(double **)(a1 + 16);
  if (v2 == v3)
  {
    result = 0;
  }
  else
  {
    result = 0;
    do
    {
      v5 = 2654435769;
      if ((*(_QWORD *)v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v5 = llround(*v2 / 0.001) - 1640531527;
      result ^= (result >> 2) + (result << 6) + v5;
      ++v2;
    }
    while (v2 != v3);
  }
  v6 = *(double **)(a1 + 32);
  for (i = *(double **)(a1 + 40); v6 != i; ++v6)
  {
    v8 = 2654435769;
    if ((*(_QWORD *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v8 = llround(*v6 / 0.001) - 1640531527;
    result ^= (result >> 2) + (result << 6) + v8;
  }
  v9 = *(_DWORD *)(a1 + 76) * *(_DWORD *)(a1 + 72);
  if (v9)
  {
    v10 = *(double **)(a1 + 56);
    v11 = &v10[24 * v9];
    do
    {
      v16 = 2654435769;
      if ((*(_QWORD *)v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v16 = llround(*v10 / 0.001) - 1640531527;
      v17 = 2654435769;
      if (((_QWORD)v10[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v17 = llround(v10[1] / 0.001) - 1640531527;
      v18 = 2654435769;
      if (((_QWORD)v10[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v18 = llround(v10[2] / 0.001) - 1640531527;
      v19 = 2654435769;
      if (((_QWORD)v10[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v19 = llround(v10[3] / 0.001) - 1640531527;
      v20 = 2654435769;
      if (((_QWORD)v10[4] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v20 = llround(v10[4] / 0.001) - 1640531527;
      v21 = 2654435769;
      if (((_QWORD)v10[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v21 = llround(v10[5] / 0.001) - 1640531527;
      v12 = (((((result >> 2) + (result << 6) + v16) ^ result) >> 2)
           + ((((result >> 2) + (result << 6) + v16) ^ result) << 6)
           + v17) ^ ((result >> 2) + (result << 6) + v16) ^ result;
      v13 = ((v12 >> 2) + (v12 << 6) + v18) ^ v12;
      v14 = ((v13 >> 2) + (v13 << 6) + v19) ^ v13;
      v15 = ((v14 >> 2) + (v14 << 6) + v20) ^ v14;
      result = ((v15 >> 2) + (v15 << 6) + v21) ^ v15;
      v10 += 24;
    }
    while (v10 != v11);
  }
  return result;
}

_DWORD *sub_20EA96654(_DWORD ***a1)
{
  return sub_20E878A50(**a1, (char *)(*a1)[1]);
}

void sub_20EA96660(uint64_t a1, uint64_t a2)
{
  sub_20EA96670((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EA96670(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C2418[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EA96824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EA96868(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EA96960((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EA96958(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EA96960(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EA96B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA96B70(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;

  *(_OWORD *)a1 = xmmword_210313020;
  v2 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = operator new(0x20uLL);
  *(_QWORD *)(a1 + 32) = v3 + 2;
  *(_QWORD *)(a1 + 40) = v3 + 2;
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 288) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 256) = xmmword_210313078;
  *(_OWORD *)(a1 + 272) = unk_210313088;
  *(_OWORD *)(a1 + 224) = xmmword_210313058;
  *(_OWORD *)(a1 + 240) = unk_210313068;
  *(_OWORD *)(a1 + 208) = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  v2[20] = 0u;
  v2[21] = 0u;
  v2[22] = 0u;
  v2[23] = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = xmmword_210313030;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = -1;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  v4 = operator new(0x20uLL);
  *(_QWORD *)(a1 + 552) = v4;
  *(_QWORD *)(a1 + 568) = v4 + 2;
  *v4 = 0u;
  v4[1] = 0u;
  *(_QWORD *)(a1 + 560) = v4 + 2;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 816) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 784) = xmmword_210313078;
  *(_OWORD *)(a1 + 800) = unk_210313088;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = xmmword_210313058;
  *(_OWORD *)(a1 + 768) = unk_210313068;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 928) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 976) = xmmword_210313030;
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1056) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1068) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1080) = 0;
  return a1;
}

void sub_20EA96D2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E90BD50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA96D40(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  uint64_t v76;
  char *v77;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 6);
  v4 = v3 + 1;
  if (v3 + 1 > 0x3C3C3C3C3C3C3CLL)
    sub_20E867F44();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 6) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 6);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 6) >= 0x1E1E1E1E1E1E1ELL)
    v6 = 0x3C3C3C3C3C3C3CLL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x3C3C3C3C3C3C3CLL)
      sub_20E877A38();
    v7 = (char *)operator new(1088 * v6);
  }
  else
  {
    v7 = 0;
  }
  v76 = (uint64_t)&v7[1088 * v3];
  v77 = &v7[1088 * v6];
  sub_20E89E038(v76, a2);
  v8 = v76 + 1088;
  v9 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v76;
    a1[1] = v8;
    a1[2] = (uint64_t)v77;
    if (!v10)
      return v76 + 1088;
    goto LABEL_17;
  }
  v11 = 0;
  do
  {
    v12 = v76 + v11;
    v13 = &v10[v11];
    *(_QWORD *)(v76 + v11 - 1088) = *(_QWORD *)&v10[v11 - 1088];
    v14 = *(_QWORD *)&v10[v11 - 1080];
    v15 = v76 + v11 - 1080;
    *(_DWORD *)(v15 + 8) = *(_DWORD *)&v10[v11 - 1072];
    v16 = v76 + v11 - 1064;
    v17 = (uint64_t)&v10[v11 - 1064];
    *(_QWORD *)v16 = 0;
    *(_QWORD *)v15 = v14;
    *(_OWORD *)(v16 + 8) = 0uLL;
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_QWORD *)(v76 + v11 - 1048) = *(_QWORD *)&v10[v11 - 1048];
    *(_QWORD *)(v17 + 16) = 0;
    *(_OWORD *)v17 = 0uLL;
    v18 = v76 + v11 - 1040;
    v19 = (uint64_t)&v10[v11 - 1040];
    *(_QWORD *)(v18 + 16) = 0;
    *(_OWORD *)v18 = 0uLL;
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *(_QWORD *)(v76 + v11 - 1024) = *(_QWORD *)&v10[v11 - 1024];
    *(_QWORD *)(v19 + 16) = 0;
    *(_OWORD *)v19 = 0uLL;
    v20 = v76 + v11 - 1016;
    v22 = *(_OWORD *)&v10[v11 - 936];
    v21 = *(_OWORD *)&v10[v11 - 920];
    v23 = *(_OWORD *)&v10[v11 - 952];
    *(_QWORD *)(v20 + 112) = *(_QWORD *)&v10[v11 - 904];
    *(_OWORD *)(v20 + 80) = v22;
    *(_OWORD *)(v20 + 96) = v21;
    *(_OWORD *)(v20 + 64) = v23;
    v24 = *(_OWORD *)&v10[v11 - 1016];
    v25 = *(_OWORD *)&v10[v11 - 1000];
    v26 = *(_OWORD *)&v10[v11 - 968];
    *(_OWORD *)(v20 + 32) = *(_OWORD *)&v10[v11 - 984];
    *(_OWORD *)(v20 + 48) = v26;
    *(_OWORD *)v20 = v24;
    *(_OWORD *)(v20 + 16) = v25;
    v27 = &v10[v11 - 896];
    *(_OWORD *)(v76 + v11 - 896) = *(_OWORD *)v27;
    *(_OWORD *)v27 = 0uLL;
    v28 = v76 + v11 - 880;
    v30 = *(_OWORD *)&v10[v11 - 832];
    v29 = *(_OWORD *)&v10[v11 - 816];
    v31 = *(_OWORD *)&v10[v11 - 848];
    *(_QWORD *)(v28 + 80) = *(_QWORD *)&v10[v11 - 800];
    *(_OWORD *)(v28 + 48) = v30;
    *(_OWORD *)(v28 + 64) = v29;
    *(_OWORD *)(v28 + 32) = v31;
    v32 = *(_OWORD *)&v10[v11 - 864];
    *(_OWORD *)v28 = *(_OWORD *)&v10[v11 - 880];
    *(_OWORD *)(v28 + 16) = v32;
    v33 = v76 + v11 - 792;
    v34 = *(_OWORD *)&v10[v11 - 712];
    v36 = *(_OWORD *)&v10[v11 - 760];
    v35 = *(_OWORD *)&v10[v11 - 744];
    *(_OWORD *)(v33 + 64) = *(_OWORD *)&v10[v11 - 728];
    *(_OWORD *)(v33 + 80) = v34;
    *(_OWORD *)(v33 + 32) = v36;
    *(_OWORD *)(v33 + 48) = v35;
    v37 = *(_OWORD *)&v10[v11 - 648];
    v39 = *(_OWORD *)&v10[v11 - 696];
    v38 = *(_OWORD *)&v10[v11 - 680];
    *(_OWORD *)(v33 + 128) = *(_OWORD *)&v10[v11 - 664];
    *(_OWORD *)(v33 + 144) = v37;
    *(_OWORD *)(v33 + 96) = v39;
    *(_OWORD *)(v33 + 112) = v38;
    v41 = *(_OWORD *)&v10[v11 - 616];
    v40 = *(_OWORD *)&v10[v11 - 600];
    v42 = *(_OWORD *)&v10[v11 - 632];
    *(_DWORD *)(v33 + 208) = *(_DWORD *)&v10[v11 - 584];
    *(_OWORD *)(v33 + 176) = v41;
    *(_OWORD *)(v33 + 192) = v40;
    *(_OWORD *)(v33 + 160) = v42;
    v43 = *(_OWORD *)&v10[v11 - 776];
    *(_OWORD *)v33 = *(_OWORD *)&v10[v11 - 792];
    *(_OWORD *)(v33 + 16) = v43;
    v44 = &v10[v11 - 576];
    *(_OWORD *)(v76 + v11 - 576) = *(_OWORD *)v44;
    *(_OWORD *)v44 = 0uLL;
    *(_QWORD *)(v76 + v11 - 560) = *(_QWORD *)&v10[v11 - 560];
    v45 = v76 + v11 - 552;
    v46 = *(_QWORD *)&v10[v11 - 552];
    *(_DWORD *)(v45 + 8) = *(_DWORD *)&v10[v11 - 544];
    *(_QWORD *)v45 = v46;
    v47 = v76 + v11 - 536;
    v48 = (uint64_t)&v10[v11 - 536];
    *(_QWORD *)v47 = 0;
    *(_OWORD *)(v47 + 8) = 0uLL;
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *(_QWORD *)(v76 + v11 - 520) = *(_QWORD *)&v10[v11 - 520];
    *(_QWORD *)(v48 + 16) = 0;
    *(_OWORD *)v48 = 0uLL;
    v49 = (_QWORD *)(v76 + v11 - 512);
    v50 = (uint64_t)&v10[v11 - 512];
    *(_QWORD *)(v76 + v11 - 504) = 0;
    *v49 = 0;
    v49[2] = 0;
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *(_QWORD *)(v76 + v11 - 496) = *(_QWORD *)&v10[v11 - 496];
    *(_QWORD *)(v50 + 16) = 0;
    *(_QWORD *)&v10[v11 - 504] = 0;
    v51 = v76 + v11 - 488;
    *(_QWORD *)v50 = 0;
    v53 = *(_OWORD *)&v10[v11 - 408];
    v52 = *(_OWORD *)&v10[v11 - 392];
    v54 = *(_OWORD *)&v10[v11 - 424];
    *(_QWORD *)(v51 + 112) = *(_QWORD *)&v10[v11 - 376];
    *(_OWORD *)(v51 + 80) = v53;
    *(_OWORD *)(v51 + 96) = v52;
    *(_OWORD *)(v51 + 64) = v54;
    v55 = *(_OWORD *)&v10[v11 - 488];
    v56 = *(_OWORD *)&v10[v11 - 472];
    v57 = *(_OWORD *)&v10[v11 - 440];
    *(_OWORD *)(v51 + 32) = *(_OWORD *)&v10[v11 - 456];
    *(_OWORD *)(v51 + 48) = v57;
    *(_OWORD *)v51 = v55;
    *(_OWORD *)(v51 + 16) = v56;
    v58 = &v10[v11 - 368];
    *(_OWORD *)(v76 + v11 - 368) = *(_OWORD *)v58;
    *(_QWORD *)&v10[v11 - 360] = 0;
    v59 = v76 + v11 - 352;
    *(_QWORD *)v58 = 0;
    v61 = *(_OWORD *)&v10[v11 - 304];
    v60 = *(_OWORD *)&v10[v11 - 288];
    v62 = *(_OWORD *)&v10[v11 - 320];
    *(_QWORD *)(v59 + 80) = *(_QWORD *)&v10[v11 - 272];
    *(_OWORD *)(v59 + 48) = v61;
    *(_OWORD *)(v59 + 64) = v60;
    *(_OWORD *)(v59 + 32) = v62;
    v63 = *(_OWORD *)&v10[v11 - 336];
    *(_OWORD *)v59 = *(_OWORD *)&v10[v11 - 352];
    *(_OWORD *)(v59 + 16) = v63;
    v64 = *(_OWORD *)&v10[v11 - 216];
    v65 = *(_OWORD *)&v10[v11 - 200];
    v66 = *(_OWORD *)&v10[v11 - 184];
    *(_OWORD *)(v12 - 232) = *(_OWORD *)&v10[v11 - 232];
    *(_OWORD *)(v12 - 184) = v66;
    *(_OWORD *)(v12 - 200) = v65;
    *(_OWORD *)(v12 - 216) = v64;
    v67 = *(_OWORD *)&v10[v11 - 152];
    v68 = *(_OWORD *)&v10[v11 - 136];
    v69 = *(_OWORD *)&v10[v11 - 120];
    *(_OWORD *)(v12 - 168) = *(_OWORD *)&v10[v11 - 168];
    *(_OWORD *)(v12 - 120) = v69;
    *(_OWORD *)(v12 - 136) = v68;
    *(_OWORD *)(v12 - 152) = v67;
    v70 = *(_OWORD *)&v10[v11 - 88];
    v71 = *(_OWORD *)&v10[v11 - 72];
    LODWORD(v46) = *(_DWORD *)&v10[v11 - 56];
    *(_OWORD *)(v12 - 104) = *(_OWORD *)&v10[v11 - 104];
    *(_DWORD *)(v12 - 56) = v46;
    *(_OWORD *)(v12 - 72) = v71;
    *(_OWORD *)(v12 - 88) = v70;
    v72 = *(_OWORD *)&v10[v11 - 264];
    *(_OWORD *)(v12 - 248) = *(_OWORD *)&v10[v11 - 248];
    *(_OWORD *)(v76 + v11 - 264) = v72;
    *(_OWORD *)(v12 - 48) = *(_OWORD *)&v10[v11 - 48];
    *((_QWORD *)v13 - 6) = 0;
    *((_QWORD *)v13 - 5) = 0;
    v73 = *(_OWORD *)&v10[v11 - 32];
    *(_OWORD *)(v12 - 23) = *(_OWORD *)&v10[v11 - 23];
    *(_OWORD *)(v12 - 32) = v73;
    v11 -= 1088;
  }
  while (&v10[v11] != v9);
  v10 = (char *)*a1;
  v74 = (char *)a1[1];
  *a1 = v76 + v11;
  a1[1] = v8;
  for (a1[2] = (uint64_t)v77; v74 != v10; v74 = (char *)sub_20E86A6B8((_QWORD *)v74 - 136))
    ;
  if (v10)
LABEL_17:
    operator delete(v10);
  return v76 + 1088;
}

void sub_20EA97190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EA971A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA971A4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1088;
    sub_20E86A6B8((_QWORD *)(i - 1088));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20EA971F4(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  _DWORD *v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  char v39;
  char v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t *v45;
  _DWORD *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;

  v6 = (unsigned int *)result;
LABEL_2:
  v7 = a2 - 136;
  v49 = a2 - 408;
  v50 = a2 - 272;
  v8 = (uint64_t *)v6;
  while (2)
  {
    v9 = 1 - a3;
LABEL_4:
    v6 = (unsigned int *)v8;
    v10 = v9;
    v11 = (char *)a2 - (char *)v8;
    v12 = 0xF0F0F0F0F0F0F0F1 * (((char *)a2 - (char *)v8) >> 6);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(_DWORD *)v7 < *(_DWORD *)v8)
          goto LABEL_69;
        return result;
      case 3uLL:
        v41 = v8 + 136;
        v42 = *((_DWORD *)v8 + 272);
        v43 = *(_DWORD *)v7;
        if (v42 < *(_DWORD *)v8)
        {
          if (v43 >= v42)
          {
            result = sub_20EA9A348(v8, v8 + 136);
            if (*(_DWORD *)v7 >= *((_DWORD *)v8 + 272))
              return result;
            v44 = v8 + 136;
          }
          else
          {
LABEL_69:
            v44 = v8;
          }
          v45 = v7;
          return sub_20EA9A348(v44, v45);
        }
        if (v43 < v42)
        {
          v47 = v8 + 136;
          v48 = v7;
LABEL_82:
          result = sub_20EA9A348(v47, v48);
          if (*((_DWORD *)v8 + 272) < *(_DWORD *)v8)
          {
            v44 = v8;
            v45 = v41;
            return sub_20EA9A348(v44, v45);
          }
        }
        return result;
      case 4uLL:
        return sub_20EA9A65C(v8, v8 + 136, v8 + 272, a2 - 136);
      case 5uLL:
        v41 = v8 + 136;
        v46 = v8 + 272;
        result = sub_20EA9A65C(v8, v8 + 136, v8 + 272, v8 + 408);
        if (*(_DWORD *)v7 >= *((_DWORD *)v8 + 816))
          return result;
        result = sub_20EA9A348(v8 + 408, v7);
        if (*((_DWORD *)v8 + 816) >= *v46)
          return result;
        result = sub_20EA9A348(v8 + 272, v8 + 408);
        if (*v46 >= *(_DWORD *)v41)
          return result;
        v47 = v8 + 136;
        v48 = v8 + 272;
        goto LABEL_82;
      default:
        if (v11 > 26111)
        {
          if (v10 == 1)
            return sub_20EA985C4(v8, a2, a2);
          v13 = v12 >> 1;
          v14 = &v8[136 * (v12 >> 1)];
          v15 = *(_DWORD *)v7;
          if ((unint64_t)v11 > 0x22000)
          {
            v16 = *(_DWORD *)v14;
            if (*(_DWORD *)v14 >= *(_DWORD *)v8)
            {
              if (v15 < v16)
              {
                sub_20EA9A348(v14, a2 - 136);
                if (*(_DWORD *)v14 < *(_DWORD *)v8)
                {
                  v17 = v8;
                  v18 = v14;
                  goto LABEL_21;
                }
              }
            }
            else
            {
              v17 = v8;
              if (v15 < v16)
                goto LABEL_12;
              sub_20EA9A348(v8, v14);
              if (*(_DWORD *)v7 < *(_DWORD *)v14)
              {
                v17 = v14;
LABEL_12:
                v18 = a2 - 136;
LABEL_21:
                sub_20EA9A348(v17, v18);
              }
            }
            v22 = v8 + 136;
            v23 = &v8[136 * v13 - 136];
            v24 = *(_DWORD *)v23;
            v25 = *(_DWORD *)v50;
            if (*(_DWORD *)v23 >= v6[272])
            {
              if (v25 < v24)
              {
                sub_20EA9A348((uint64_t *)&v6[272 * v13 - 272], v50);
                if (*(_DWORD *)v23 < *v22)
                {
                  v26 = (uint64_t *)(v6 + 272);
                  v27 = (uint64_t *)&v6[272 * v13 - 272];
                  goto LABEL_33;
                }
              }
            }
            else
            {
              v26 = (uint64_t *)(v6 + 272);
              if (v25 < v24)
                goto LABEL_26;
              sub_20EA9A348(v26, (uint64_t *)&v6[272 * v13 - 272]);
              if (*(_DWORD *)v50 < *(_DWORD *)v23)
              {
                v26 = (uint64_t *)&v6[272 * v13 - 272];
LABEL_26:
                v27 = a2 - 272;
LABEL_33:
                sub_20EA9A348(v26, v27);
              }
            }
            v28 = &v6[272 * v13 + 272];
            v29 = *v28;
            v30 = *(_DWORD *)v49;
            if (*v28 >= v6[544])
            {
              if (v30 < v29)
              {
                sub_20EA9A348((uint64_t *)&v6[272 * v13 + 272], v49);
                if (*v28 < v6[544])
                {
                  v31 = (uint64_t *)(v6 + 544);
                  v32 = (uint64_t *)&v6[272 * v13 + 272];
                  goto LABEL_42;
                }
              }
            }
            else
            {
              v31 = (uint64_t *)(v6 + 544);
              if (v30 < v29)
                goto LABEL_38;
              sub_20EA9A348(v31, (uint64_t *)&v6[272 * v13 + 272]);
              if (*(_DWORD *)v49 < *v28)
              {
                v31 = (uint64_t *)&v6[272 * v13 + 272];
LABEL_38:
                v32 = a2 - 408;
LABEL_42:
                sub_20EA9A348(v31, v32);
              }
            }
            v33 = *(_DWORD *)v14;
            v34 = *v28;
            if (*(_DWORD *)v14 >= *(_DWORD *)v23)
            {
              if (v34 >= v33)
                goto LABEL_52;
              sub_20EA9A348(v14, (uint64_t *)&v6[272 * v13 + 272]);
              if (*(_DWORD *)v14 >= *(_DWORD *)v23)
                goto LABEL_52;
              v36 = (uint64_t *)&v6[272 * v13 - 272];
              v37 = v14;
            }
            else
            {
              v35 = (uint64_t *)&v6[272 * v13 - 272];
              if (v34 < v33)
              {
                sub_20EA9A348(v35, (uint64_t *)&v6[272 * v13 + 272]);
LABEL_52:
                v20 = (uint64_t *)v6;
                v21 = v14;
                goto LABEL_53;
              }
              sub_20EA9A348(v35, v14);
              if (*v28 >= *(_DWORD *)v14)
                goto LABEL_52;
              v36 = v14;
              v37 = (uint64_t *)&v6[272 * v13 + 272];
            }
            sub_20EA9A348(v36, v37);
            goto LABEL_52;
          }
          v19 = *(_DWORD *)v8;
          if (*(_DWORD *)v8 >= *(_DWORD *)v14)
          {
            if (v15 < v19)
            {
              sub_20EA9A348(v8, a2 - 136);
              if (*(_DWORD *)v8 < *(_DWORD *)v14)
              {
                v20 = v14;
                v21 = v8;
                goto LABEL_53;
              }
            }
          }
          else
          {
            v20 = v14;
            if (v15 < v19)
              goto LABEL_17;
            sub_20EA9A348(v14, v8);
            if (*(_DWORD *)v7 < *(_DWORD *)v8)
            {
              v20 = v8;
LABEL_17:
              v21 = a2 - 136;
LABEL_53:
              sub_20EA9A348(v20, v21);
            }
          }
          if ((a4 & 1) == 0 && *(v6 - 272) >= *v6)
          {
            result = (uint64_t *)sub_20EA995C8(v6, a2);
            v8 = result;
LABEL_61:
            a4 = 0;
            a3 = -v10;
            continue;
          }
          v38 = (uint64_t *)sub_20EA99990((uint64_t *)v6, a2);
          if ((v39 & 1) == 0)
            goto LABEL_59;
          v40 = sub_20EA99D6C((uint64_t *)v6, v38);
          v8 = v38 + 136;
          result = (uint64_t *)sub_20EA99D6C(v38 + 136, a2);
          if (!(_DWORD)result)
          {
            v9 = v10 + 1;
            if ((v40 & 1) == 0)
            {
LABEL_59:
              result = (uint64_t *)sub_20EA971F4(v6, v38, -v10, a4 & 1);
              v8 = v38 + 136;
              goto LABEL_61;
            }
            goto LABEL_4;
          }
          a3 = -v10;
          a2 = v38;
          if ((v40 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
          return sub_20EA977CC(v8, a2);
        else
          return sub_20EA97ED8(v8, a2);
    }
  }
}

_QWORD *sub_20EA977CC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  int v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  int v171;
  __int128 v172;
  _OWORD v173[2];
  uint64_t v174;
  uint64_t v175;

  if (result != a2)
  {
    v174 = v2;
    v175 = v3;
    v4 = result;
    v5 = result + 136;
    if (result + 136 != a2)
    {
      v6 = result;
      v98 = a2;
      do
      {
        v9 = v5;
        if (*((_DWORD *)v6 + 272) < *(_DWORD *)v6)
        {
          v99 = *v5;
          v100 = v6[137];
          v101 = *((_DWORD *)v6 + 276);
          v102 = *(_OWORD *)(v6 + 139);
          v103 = v6[141];
          v6[141] = 0;
          v6[139] = 0;
          v6[140] = 0;
          v104 = *((_OWORD *)v6 + 71);
          v105 = v6[144];
          v6[142] = 0;
          v6[143] = 0;
          v6[144] = 0;
          v10 = *(_OWORD *)(v6 + 145);
          v11 = *(_OWORD *)(v6 + 147);
          v12 = *(_OWORD *)(v6 + 151);
          v108 = *(_OWORD *)(v6 + 149);
          v109 = v12;
          v106 = v10;
          v107 = v11;
          v13 = *(_OWORD *)(v6 + 153);
          v14 = *(_OWORD *)(v6 + 155);
          v15 = *(_OWORD *)(v6 + 157);
          v113 = v6[159];
          v111 = v14;
          v112 = v15;
          v110 = v13;
          v16 = *((_OWORD *)v6 + 80);
          v6[161] = 0;
          v6[160] = 0;
          v17 = *((_OWORD *)v6 + 82);
          v115 = *((_OWORD *)v6 + 81);
          v116 = v17;
          v18 = *((_OWORD *)v6 + 83);
          v19 = *((_OWORD *)v6 + 84);
          v20 = *((_OWORD *)v6 + 85);
          v120 = v6[172];
          v118 = v19;
          v119 = v20;
          v117 = v18;
          v21 = *(_OWORD *)(v6 + 175);
          v121 = *(_OWORD *)(v6 + 173);
          v122 = v21;
          v22 = *(_OWORD *)(v6 + 177);
          v23 = *(_OWORD *)(v6 + 179);
          v24 = *(_OWORD *)(v6 + 183);
          v125 = *(_OWORD *)(v6 + 181);
          v126 = v24;
          v123 = v22;
          v124 = v23;
          v25 = *(_OWORD *)(v6 + 185);
          v26 = *(_OWORD *)(v6 + 187);
          v27 = *(_OWORD *)(v6 + 191);
          v129 = *(_OWORD *)(v6 + 189);
          v130 = v27;
          v127 = v25;
          v128 = v26;
          v28 = *(_OWORD *)(v6 + 193);
          v29 = *(_OWORD *)(v6 + 195);
          v30 = *(_OWORD *)(v6 + 197);
          v134 = *((_DWORD *)v6 + 398);
          v132 = v29;
          v133 = v30;
          v131 = v28;
          v31 = *((_OWORD *)v6 + 100);
          v114 = v16;
          v135 = v31;
          v6[201] = 0;
          v6[200] = 0;
          v136 = v6[202];
          v137 = v6[203];
          v138 = *((_DWORD *)v6 + 408);
          v139 = v6[205];
          v32 = *((_OWORD *)v6 + 103);
          v6[205] = 0;
          v6[206] = 0;
          v6[207] = 0;
          v33 = *((_OWORD *)v6 + 104);
          v140 = v32;
          v141 = v33;
          v142 = v6[210];
          v6[209] = 0;
          v6[208] = 0;
          v6[210] = 0;
          v34 = *(_OWORD *)(v6 + 211);
          v35 = *(_OWORD *)(v6 + 213);
          v36 = *(_OWORD *)(v6 + 217);
          v145 = *(_OWORD *)(v6 + 215);
          v146 = v36;
          v143 = v34;
          v144 = v35;
          v37 = *(_OWORD *)(v6 + 219);
          v38 = *(_OWORD *)(v6 + 221);
          v39 = *(_OWORD *)(v6 + 223);
          v150 = v6[225];
          v148 = v38;
          v149 = v39;
          v147 = v37;
          v40 = *((_OWORD *)v6 + 113);
          v6[227] = 0;
          v6[226] = 0;
          v41 = *((_OWORD *)v6 + 115);
          v152 = *((_OWORD *)v6 + 114);
          v153 = v41;
          v42 = *((_OWORD *)v6 + 116);
          v43 = *((_OWORD *)v6 + 117);
          v44 = *((_OWORD *)v6 + 118);
          v157 = v6[238];
          v155 = v43;
          v156 = v44;
          v154 = v42;
          v45 = *(_OWORD *)(v6 + 241);
          v158 = *(_OWORD *)(v6 + 239);
          v159 = v45;
          v46 = *(_OWORD *)(v6 + 243);
          v47 = *(_OWORD *)(v6 + 245);
          v48 = *(_OWORD *)(v6 + 249);
          v162 = *(_OWORD *)(v6 + 247);
          v163 = v48;
          v160 = v46;
          v161 = v47;
          v49 = *(_OWORD *)(v6 + 251);
          v50 = *(_OWORD *)(v6 + 253);
          v51 = *(_OWORD *)(v6 + 257);
          v166 = *(_OWORD *)(v6 + 255);
          v167 = v51;
          v164 = v49;
          v165 = v50;
          v52 = *(_OWORD *)(v6 + 259);
          v53 = *(_OWORD *)(v6 + 261);
          v54 = *(_OWORD *)(v6 + 263);
          v171 = *((_DWORD *)v6 + 530);
          v169 = v53;
          v170 = v54;
          v168 = v52;
          v55 = *((_OWORD *)v6 + 133);
          v151 = v40;
          v172 = v55;
          v6[267] = 0;
          v6[266] = 0;
          v173[0] = *((_OWORD *)v6 + 134);
          v56 = v5;
          *(_OWORD *)((char *)v173 + 9) = *(_OWORD *)((char *)v6 + 2153);
          do
          {
            v57 = v6;
            *v56 = *v6;
            v58 = v6 + 1;
            v56[1] = v6[1];
            *((_DWORD *)v56 + 4) = *((_DWORD *)v6 + 4);
            v59 = (void *)v56[3];
            if (v59)
            {
              v56[4] = v59;
              operator delete(v59);
              v56[4] = 0;
              v56[5] = 0;
            }
            *(_OWORD *)(v56 + 3) = *(_OWORD *)(v57 + 3);
            v56[5] = v57[5];
            v58[2] = 0;
            v58[3] = 0;
            v58[4] = 0;
            v60 = (void *)v56[6];
            if (v60)
            {
              v56[7] = v60;
              operator delete(v60);
              v56[7] = 0;
              v56[8] = 0;
            }
            *((_OWORD *)v56 + 3) = *((_OWORD *)v57 + 3);
            v56[8] = v57[8];
            v57[6] = 0;
            v57[7] = 0;
            v57[8] = 0;
            *(_OWORD *)(v56 + 17) = *(_OWORD *)(v57 + 17);
            *(_OWORD *)(v56 + 19) = *(_OWORD *)(v57 + 19);
            *(_OWORD *)(v56 + 21) = *(_OWORD *)(v57 + 21);
            v56[23] = v57[23];
            *(_OWORD *)(v56 + 9) = *(_OWORD *)(v57 + 9);
            *(_OWORD *)(v56 + 11) = *(_OWORD *)(v57 + 11);
            *(_OWORD *)(v56 + 13) = *(_OWORD *)(v57 + 13);
            *(_OWORD *)(v56 + 15) = *(_OWORD *)(v57 + 15);
            v61 = *((_OWORD *)v57 + 12);
            v57[24] = 0;
            v57[25] = 0;
            v62 = (std::__shared_weak_count *)v56[25];
            *((_OWORD *)v56 + 12) = v61;
            if (v62)
            {
              p_shared_owners = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldaxr(p_shared_owners);
              while (__stlxr(v64 - 1, p_shared_owners));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v65 = *((_OWORD *)v57 + 16);
            *((_OWORD *)v56 + 15) = *((_OWORD *)v57 + 15);
            *((_OWORD *)v56 + 16) = v65;
            *((_OWORD *)v56 + 17) = *((_OWORD *)v57 + 17);
            v56[36] = v57[36];
            v66 = *((_OWORD *)v57 + 14);
            *((_OWORD *)v56 + 13) = *((_OWORD *)v57 + 13);
            *((_OWORD *)v56 + 14) = v66;
            v67 = *(_OWORD *)(v57 + 59);
            *(_OWORD *)(v56 + 57) = *(_OWORD *)(v57 + 57);
            *(_OWORD *)(v56 + 59) = v67;
            *(_OWORD *)(v56 + 61) = *(_OWORD *)(v57 + 61);
            *((_DWORD *)v56 + 126) = *((_DWORD *)v57 + 126);
            v68 = *(_OWORD *)(v57 + 51);
            *(_OWORD *)(v56 + 49) = *(_OWORD *)(v57 + 49);
            *(_OWORD *)(v56 + 51) = v68;
            v69 = *(_OWORD *)(v57 + 55);
            *(_OWORD *)(v56 + 53) = *(_OWORD *)(v57 + 53);
            *(_OWORD *)(v56 + 55) = v69;
            v70 = *(_OWORD *)(v57 + 43);
            *(_OWORD *)(v56 + 41) = *(_OWORD *)(v57 + 41);
            *(_OWORD *)(v56 + 43) = v70;
            v71 = *(_OWORD *)(v57 + 47);
            *(_OWORD *)(v56 + 45) = *(_OWORD *)(v57 + 45);
            *(_OWORD *)(v56 + 47) = v71;
            v72 = *(_OWORD *)(v57 + 39);
            *(_OWORD *)(v56 + 37) = *(_OWORD *)(v57 + 37);
            *(_OWORD *)(v56 + 39) = v72;
            v73 = *((_OWORD *)v57 + 32);
            v57[64] = 0;
            v57[65] = 0;
            v74 = (std::__shared_weak_count *)v56[65];
            *((_OWORD *)v56 + 32) = v73;
            if (v74)
            {
              v75 = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v56[66] = v57[66];
            v56[67] = v57[67];
            *((_DWORD *)v56 + 136) = *((_DWORD *)v57 + 136);
            v77 = (void *)v56[69];
            if (v77)
            {
              v56[70] = v77;
              operator delete(v77);
              v56[71] = 0;
              v56[70] = 0;
            }
            v56[69] = v57[69];
            v56[70] = v57[70];
            v56[71] = v57[71];
            v57[69] = 0;
            v57[70] = 0;
            v57[71] = 0;
            v78 = (void *)v56[72];
            if (v78)
            {
              v56[73] = v78;
              operator delete(v78);
              v56[74] = 0;
              v56[73] = 0;
            }
            *((_OWORD *)v56 + 36) = *((_OWORD *)v57 + 36);
            v56[74] = v57[74];
            v57[72] = 0;
            v57[73] = 0;
            v57[74] = 0;
            v79 = *(_OWORD *)(v57 + 85);
            *(_OWORD *)(v56 + 83) = *(_OWORD *)(v57 + 83);
            *(_OWORD *)(v56 + 85) = v79;
            *(_OWORD *)(v56 + 87) = *(_OWORD *)(v57 + 87);
            v56[89] = v57[89];
            v80 = *(_OWORD *)(v57 + 77);
            *(_OWORD *)(v56 + 75) = *(_OWORD *)(v57 + 75);
            *(_OWORD *)(v56 + 77) = v80;
            v81 = *(_OWORD *)(v57 + 81);
            *(_OWORD *)(v56 + 79) = *(_OWORD *)(v57 + 79);
            *(_OWORD *)(v56 + 81) = v81;
            v82 = *((_OWORD *)v57 + 45);
            v57[90] = 0;
            v57[91] = 0;
            v83 = (std::__shared_weak_count *)v56[91];
            *((_OWORD *)v56 + 45) = v82;
            if (v83)
            {
              v84 = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            v86 = *((_OWORD *)v57 + 49);
            *((_OWORD *)v56 + 48) = *((_OWORD *)v57 + 48);
            *((_OWORD *)v56 + 49) = v86;
            *((_OWORD *)v56 + 50) = *((_OWORD *)v57 + 50);
            v56[102] = v57[102];
            v87 = *((_OWORD *)v57 + 47);
            *((_OWORD *)v56 + 46) = *((_OWORD *)v57 + 46);
            *((_OWORD *)v56 + 47) = v87;
            v88 = *(_OWORD *)(v57 + 125);
            *(_OWORD *)(v56 + 123) = *(_OWORD *)(v57 + 123);
            *(_OWORD *)(v56 + 125) = v88;
            *(_OWORD *)(v56 + 127) = *(_OWORD *)(v57 + 127);
            *((_DWORD *)v56 + 258) = *((_DWORD *)v57 + 258);
            v89 = *(_OWORD *)(v57 + 117);
            *(_OWORD *)(v56 + 115) = *(_OWORD *)(v57 + 115);
            *(_OWORD *)(v56 + 117) = v89;
            v90 = *(_OWORD *)(v57 + 121);
            *(_OWORD *)(v56 + 119) = *(_OWORD *)(v57 + 119);
            *(_OWORD *)(v56 + 121) = v90;
            v91 = *(_OWORD *)(v57 + 109);
            *(_OWORD *)(v56 + 107) = *(_OWORD *)(v57 + 107);
            *(_OWORD *)(v56 + 109) = v91;
            v92 = *(_OWORD *)(v57 + 113);
            *(_OWORD *)(v56 + 111) = *(_OWORD *)(v57 + 111);
            *(_OWORD *)(v56 + 113) = v92;
            v93 = *(_OWORD *)(v57 + 105);
            *(_OWORD *)(v56 + 103) = *(_OWORD *)(v57 + 103);
            *(_OWORD *)(v56 + 105) = v93;
            v94 = *((_OWORD *)v57 + 65);
            v57[130] = 0;
            v57[131] = 0;
            v95 = (std::__shared_weak_count *)v56[131];
            *((_OWORD *)v56 + 65) = v94;
            if (v95)
            {
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            *((_OWORD *)v56 + 66) = *((_OWORD *)v57 + 66);
            *(_OWORD *)((char *)v56 + 1065) = *(_OWORD *)((char *)v57 + 1065);
            if (v57 == v4)
            {
              v7 = v4;
              goto LABEL_5;
            }
            v6 = v57 - 136;
            v56 = v57;
          }
          while (v99 < *((_DWORD *)v57 - 272));
          v7 = v57;
LABEL_5:
          *v7 = v99;
          sub_20E9DA564((uint64_t)v58, &v100);
          v7[66] = v136;
          sub_20E9DA564((uint64_t)(v57 + 67), &v137);
          v8 = *(_OWORD *)((char *)v173 + 9);
          *((_OWORD *)v57 + 66) = v173[0];
          *(_OWORD *)((char *)v57 + 1065) = v8;
          result = sub_20E86A6B8(&v99);
          a2 = v98;
        }
        v5 = v9 + 136;
        v6 = v9;
      }
      while (v9 + 136 != a2);
    }
  }
  return result;
}

_QWORD *sub_20EA97ED8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  int v168;
  __int128 v169;
  _OWORD v170[2];
  uint64_t v171;
  uint64_t v172;

  if (result != a2)
  {
    v4 = result + 136;
    if (result + 136 != a2)
    {
      v171 = v2;
      v172 = v3;
      v95 = a2;
      do
      {
        v6 = v4;
        if (*((_DWORD *)result + 272) < *(_DWORD *)result)
        {
          v96 = *v4;
          v97 = result[137];
          v98 = *((_DWORD *)result + 276);
          v99 = *(_OWORD *)(result + 139);
          v100 = result[141];
          result[141] = 0;
          result[139] = 0;
          result[140] = 0;
          v101 = *((_OWORD *)result + 71);
          v102 = result[144];
          result[142] = 0;
          result[143] = 0;
          result[144] = 0;
          v7 = *(_OWORD *)(result + 145);
          v8 = *(_OWORD *)(result + 147);
          v9 = *(_OWORD *)(result + 151);
          v105 = *(_OWORD *)(result + 149);
          v106 = v9;
          v103 = v7;
          v104 = v8;
          v10 = *(_OWORD *)(result + 153);
          v11 = *(_OWORD *)(result + 155);
          v12 = *(_OWORD *)(result + 157);
          v110 = result[159];
          v108 = v11;
          v109 = v12;
          v107 = v10;
          v13 = *((_OWORD *)result + 80);
          result[161] = 0;
          result[160] = 0;
          v14 = *((_OWORD *)result + 82);
          v112 = *((_OWORD *)result + 81);
          v113 = v14;
          v15 = *((_OWORD *)result + 83);
          v16 = *((_OWORD *)result + 84);
          v17 = *((_OWORD *)result + 85);
          v117 = result[172];
          v115 = v16;
          v116 = v17;
          v114 = v15;
          v18 = *(_OWORD *)(result + 175);
          v118 = *(_OWORD *)(result + 173);
          v119 = v18;
          v19 = *(_OWORD *)(result + 177);
          v20 = *(_OWORD *)(result + 179);
          v21 = *(_OWORD *)(result + 183);
          v122 = *(_OWORD *)(result + 181);
          v123 = v21;
          v120 = v19;
          v121 = v20;
          v22 = *(_OWORD *)(result + 185);
          v23 = *(_OWORD *)(result + 187);
          v24 = *(_OWORD *)(result + 191);
          v126 = *(_OWORD *)(result + 189);
          v127 = v24;
          v124 = v22;
          v125 = v23;
          v25 = *(_OWORD *)(result + 193);
          v26 = *(_OWORD *)(result + 195);
          v27 = *(_OWORD *)(result + 197);
          v131 = *((_DWORD *)result + 398);
          v129 = v26;
          v130 = v27;
          v128 = v25;
          v28 = *((_OWORD *)result + 100);
          v111 = v13;
          v132 = v28;
          result[201] = 0;
          result[200] = 0;
          v133 = result[202];
          v134 = result[203];
          v135 = *((_DWORD *)result + 408);
          v136 = result[205];
          v29 = *((_OWORD *)result + 103);
          result[205] = 0;
          result[206] = 0;
          result[207] = 0;
          v30 = *((_OWORD *)result + 104);
          v137 = v29;
          v138 = v30;
          v139 = result[210];
          result[209] = 0;
          result[208] = 0;
          result[210] = 0;
          v31 = *(_OWORD *)(result + 211);
          v32 = *(_OWORD *)(result + 213);
          v33 = *(_OWORD *)(result + 217);
          v142 = *(_OWORD *)(result + 215);
          v143 = v33;
          v140 = v31;
          v141 = v32;
          v34 = *(_OWORD *)(result + 219);
          v35 = *(_OWORD *)(result + 221);
          v36 = *(_OWORD *)(result + 223);
          v147 = result[225];
          v145 = v35;
          v146 = v36;
          v144 = v34;
          v37 = *((_OWORD *)result + 113);
          result[227] = 0;
          result[226] = 0;
          v38 = *((_OWORD *)result + 115);
          v149 = *((_OWORD *)result + 114);
          v150 = v38;
          v39 = *((_OWORD *)result + 116);
          v40 = *((_OWORD *)result + 117);
          v41 = *((_OWORD *)result + 118);
          v154 = result[238];
          v152 = v40;
          v153 = v41;
          v151 = v39;
          v42 = *(_OWORD *)(result + 241);
          v155 = *(_OWORD *)(result + 239);
          v156 = v42;
          v43 = *(_OWORD *)(result + 243);
          v44 = *(_OWORD *)(result + 245);
          v45 = *(_OWORD *)(result + 249);
          v159 = *(_OWORD *)(result + 247);
          v160 = v45;
          v157 = v43;
          v158 = v44;
          v46 = *(_OWORD *)(result + 251);
          v47 = *(_OWORD *)(result + 253);
          v48 = *(_OWORD *)(result + 257);
          v163 = *(_OWORD *)(result + 255);
          v164 = v48;
          v161 = v46;
          v162 = v47;
          v49 = *(_OWORD *)(result + 259);
          v50 = *(_OWORD *)(result + 261);
          v51 = *(_OWORD *)(result + 263);
          v168 = *((_DWORD *)result + 530);
          v166 = v50;
          v167 = v51;
          v165 = v49;
          v52 = *((_OWORD *)result + 133);
          v148 = v37;
          v169 = v52;
          result[267] = 0;
          result[266] = 0;
          v170[0] = *((_OWORD *)result + 134);
          v53 = v4;
          *(_OWORD *)((char *)v170 + 9) = *(_OWORD *)((char *)result + 2153);
          do
          {
            v54 = v53;
            v53 = result;
            *v54 = *result;
            v55 = result + 1;
            v54[1] = result[1];
            *((_DWORD *)v54 + 4) = *((_DWORD *)result + 4);
            v56 = (void *)v54[3];
            if (v56)
            {
              v54[4] = v56;
              operator delete(v56);
              v54[4] = 0;
              v54[5] = 0;
            }
            *(_OWORD *)(v54 + 3) = *(_OWORD *)(v53 + 3);
            v54[5] = v53[5];
            v55[2] = 0;
            v55[3] = 0;
            v55[4] = 0;
            v57 = (void *)v54[6];
            if (v57)
            {
              v54[7] = v57;
              operator delete(v57);
              v54[7] = 0;
              v54[8] = 0;
            }
            *((_OWORD *)v54 + 3) = *((_OWORD *)v53 + 3);
            v54[8] = v53[8];
            v53[6] = 0;
            v53[7] = 0;
            v53[8] = 0;
            *(_OWORD *)(v54 + 17) = *(_OWORD *)(v53 + 17);
            *(_OWORD *)(v54 + 19) = *(_OWORD *)(v53 + 19);
            *(_OWORD *)(v54 + 21) = *(_OWORD *)(v53 + 21);
            v54[23] = v53[23];
            *(_OWORD *)(v54 + 9) = *(_OWORD *)(v53 + 9);
            *(_OWORD *)(v54 + 11) = *(_OWORD *)(v53 + 11);
            *(_OWORD *)(v54 + 13) = *(_OWORD *)(v53 + 13);
            *(_OWORD *)(v54 + 15) = *(_OWORD *)(v53 + 15);
            v58 = *((_OWORD *)v53 + 12);
            v53[24] = 0;
            v53[25] = 0;
            v59 = (std::__shared_weak_count *)v54[25];
            *((_OWORD *)v54 + 12) = v58;
            if (v59)
            {
              p_shared_owners = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldaxr(p_shared_owners);
              while (__stlxr(v61 - 1, p_shared_owners));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            v62 = *((_OWORD *)v53 + 16);
            *((_OWORD *)v54 + 15) = *((_OWORD *)v53 + 15);
            *((_OWORD *)v54 + 16) = v62;
            *((_OWORD *)v54 + 17) = *((_OWORD *)v53 + 17);
            v54[36] = v53[36];
            v63 = *((_OWORD *)v53 + 14);
            *((_OWORD *)v54 + 13) = *((_OWORD *)v53 + 13);
            *((_OWORD *)v54 + 14) = v63;
            v64 = *(_OWORD *)(v53 + 59);
            *(_OWORD *)(v54 + 57) = *(_OWORD *)(v53 + 57);
            *(_OWORD *)(v54 + 59) = v64;
            *(_OWORD *)(v54 + 61) = *(_OWORD *)(v53 + 61);
            *((_DWORD *)v54 + 126) = *((_DWORD *)v53 + 126);
            v65 = *(_OWORD *)(v53 + 51);
            *(_OWORD *)(v54 + 49) = *(_OWORD *)(v53 + 49);
            *(_OWORD *)(v54 + 51) = v65;
            v66 = *(_OWORD *)(v53 + 55);
            *(_OWORD *)(v54 + 53) = *(_OWORD *)(v53 + 53);
            *(_OWORD *)(v54 + 55) = v66;
            v67 = *(_OWORD *)(v53 + 43);
            *(_OWORD *)(v54 + 41) = *(_OWORD *)(v53 + 41);
            *(_OWORD *)(v54 + 43) = v67;
            v68 = *(_OWORD *)(v53 + 47);
            *(_OWORD *)(v54 + 45) = *(_OWORD *)(v53 + 45);
            *(_OWORD *)(v54 + 47) = v68;
            v69 = *(_OWORD *)(v53 + 39);
            *(_OWORD *)(v54 + 37) = *(_OWORD *)(v53 + 37);
            *(_OWORD *)(v54 + 39) = v69;
            v70 = *((_OWORD *)v53 + 32);
            v53[64] = 0;
            v53[65] = 0;
            v71 = (std::__shared_weak_count *)v54[65];
            *((_OWORD *)v54 + 32) = v70;
            if (v71)
            {
              v72 = (unint64_t *)&v71->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v54[66] = v53[66];
            v54[67] = v53[67];
            *((_DWORD *)v54 + 136) = *((_DWORD *)v53 + 136);
            v74 = (void *)v54[69];
            if (v74)
            {
              v54[70] = v74;
              operator delete(v74);
              v54[71] = 0;
              v54[70] = 0;
            }
            v54[69] = v53[69];
            v54[70] = v53[70];
            v54[71] = v53[71];
            v53[69] = 0;
            v53[70] = 0;
            v53[71] = 0;
            v75 = (void *)v54[72];
            if (v75)
            {
              v54[73] = v75;
              operator delete(v75);
              v54[74] = 0;
              v54[73] = 0;
            }
            *((_OWORD *)v54 + 36) = *((_OWORD *)v53 + 36);
            v54[74] = v53[74];
            v53[72] = 0;
            v53[73] = 0;
            v53[74] = 0;
            v76 = *(_OWORD *)(v53 + 85);
            *(_OWORD *)(v54 + 83) = *(_OWORD *)(v53 + 83);
            *(_OWORD *)(v54 + 85) = v76;
            *(_OWORD *)(v54 + 87) = *(_OWORD *)(v53 + 87);
            v54[89] = v53[89];
            v77 = *(_OWORD *)(v53 + 77);
            *(_OWORD *)(v54 + 75) = *(_OWORD *)(v53 + 75);
            *(_OWORD *)(v54 + 77) = v77;
            v78 = *(_OWORD *)(v53 + 81);
            *(_OWORD *)(v54 + 79) = *(_OWORD *)(v53 + 79);
            *(_OWORD *)(v54 + 81) = v78;
            v79 = *((_OWORD *)v53 + 45);
            v53[90] = 0;
            v53[91] = 0;
            v80 = (std::__shared_weak_count *)v54[91];
            *((_OWORD *)v54 + 45) = v79;
            if (v80)
            {
              v81 = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            v83 = *((_OWORD *)v53 + 49);
            *((_OWORD *)v54 + 48) = *((_OWORD *)v53 + 48);
            *((_OWORD *)v54 + 49) = v83;
            *((_OWORD *)v54 + 50) = *((_OWORD *)v53 + 50);
            v54[102] = v53[102];
            v84 = *((_OWORD *)v53 + 47);
            *((_OWORD *)v54 + 46) = *((_OWORD *)v53 + 46);
            *((_OWORD *)v54 + 47) = v84;
            v85 = *(_OWORD *)(v53 + 125);
            *(_OWORD *)(v54 + 123) = *(_OWORD *)(v53 + 123);
            *(_OWORD *)(v54 + 125) = v85;
            *(_OWORD *)(v54 + 127) = *(_OWORD *)(v53 + 127);
            *((_DWORD *)v54 + 258) = *((_DWORD *)v53 + 258);
            v86 = *(_OWORD *)(v53 + 117);
            *(_OWORD *)(v54 + 115) = *(_OWORD *)(v53 + 115);
            *(_OWORD *)(v54 + 117) = v86;
            v87 = *(_OWORD *)(v53 + 121);
            *(_OWORD *)(v54 + 119) = *(_OWORD *)(v53 + 119);
            *(_OWORD *)(v54 + 121) = v87;
            v88 = *(_OWORD *)(v53 + 109);
            *(_OWORD *)(v54 + 107) = *(_OWORD *)(v53 + 107);
            *(_OWORD *)(v54 + 109) = v88;
            v89 = *(_OWORD *)(v53 + 113);
            *(_OWORD *)(v54 + 111) = *(_OWORD *)(v53 + 111);
            *(_OWORD *)(v54 + 113) = v89;
            v90 = *(_OWORD *)(v53 + 105);
            *(_OWORD *)(v54 + 103) = *(_OWORD *)(v53 + 103);
            *(_OWORD *)(v54 + 105) = v90;
            v91 = *((_OWORD *)v53 + 65);
            v53[130] = 0;
            v53[131] = 0;
            v92 = (std::__shared_weak_count *)v54[131];
            *((_OWORD *)v54 + 65) = v91;
            if (v92)
            {
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            *((_OWORD *)v54 + 66) = *((_OWORD *)v53 + 66);
            *(_OWORD *)((char *)v54 + 1065) = *(_OWORD *)((char *)v53 + 1065);
            result = v53 - 136;
          }
          while (v96 < *((_DWORD *)v53 - 272));
          *v53 = v96;
          sub_20E9DA564((uint64_t)v55, &v97);
          v53[66] = v133;
          sub_20E9DA564((uint64_t)(v53 + 67), &v134);
          v5 = *(_OWORD *)((char *)v170 + 9);
          *((_OWORD *)v53 + 66) = v170[0];
          *(_OWORD *)((char *)v53 + 1065) = v5;
          sub_20E86A6B8(&v96);
          a2 = v95;
        }
        v4 = v6 + 136;
        result = v6;
      }
      while (v6 + 136 != a2);
    }
  }
  return result;
}

uint64_t *sub_20EA985C4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int64_t v14;
  __int128 v15;
  BOOL v16;
  int64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 *v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  void *v102;
  __int128 *v103;
  void *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t *v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  __int128 v245;
  _OWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  char *v263;
  uint64_t *v264;
  int64_t v265;
  int64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  __int128 v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  int v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  int v340;
  __int128 v341;
  _OWORD v342[2];
  uint64_t v343;
  uint64_t v344;
  int v345;
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  uint64_t v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  int v378;
  __int128 v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  __int128 v383;
  uint64_t v384;
  __int128 v385;
  uint64_t v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  uint64_t v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  int v415;
  __int128 v416;
  _OWORD v417[2];
  uint64_t v418;
  uint64_t v419;

  if (result != a2)
  {
    v418 = v3;
    v419 = v4;
    v6 = a2;
    v7 = result;
    v8 = (char *)a2 - (char *)result;
    v9 = ((char *)a2 - (char *)result) / 1088;
    if ((char *)a2 - (char *)result >= 1089)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &result[136 * v10];
      do
      {
        result = sub_20EA9A760(v7, v9, v12);
        v12 -= 136;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      do
      {
        if (*(_DWORD *)v13 < *(_DWORD *)v7)
        {
          sub_20EA9A348(v13, v7);
          result = sub_20EA9A760(v7, v9, v7);
        }
        v13 += 136;
      }
      while (v13 != a3);
    }
    if (v8 >= 1089)
    {
      v14 = v8 / 0x440uLL;
      v261 = v7 + 3;
      v262 = v7 + 1;
      v260 = v7 + 6;
      v258 = v7 + 24;
      v259 = v7 + 9;
      v257 = v7 + 26;
      v256 = v7 + 37;
      v254 = v7 + 67;
      v255 = v7 + 64;
      v253 = v7 + 69;
      v251 = v7 + 75;
      v252 = v7 + 72;
      v249 = v7 + 92;
      v250 = v7 + 90;
      v247 = v7 + 130;
      v248 = v7 + 103;
      v246 = v7 + 132;
      v263 = (char *)v7;
      do
      {
        v17 = 0;
        v264 = v6;
        v268 = *v7;
        v269 = *v262;
        v270 = *((_DWORD *)v262 + 2);
        v271 = *(_OWORD *)(v7 + 3);
        v272 = v7[5];
        v261[1] = 0;
        v261[2] = 0;
        *v261 = 0;
        v273 = *((_OWORD *)v7 + 3);
        v274 = v7[8];
        v260[1] = 0;
        v260[2] = 0;
        *v260 = 0;
        v18 = *(_OWORD *)v259;
        v19 = *((_OWORD *)v259 + 1);
        v20 = *((_OWORD *)v259 + 3);
        v277 = *((_OWORD *)v259 + 2);
        v278 = v20;
        v275 = v18;
        v276 = v19;
        v21 = *((_OWORD *)v259 + 4);
        v22 = *((_OWORD *)v259 + 5);
        v23 = *((_OWORD *)v259 + 6);
        v282 = v259[14];
        v280 = v22;
        v281 = v23;
        v279 = v21;
        v24 = *((_OWORD *)v7 + 12);
        *v258 = 0;
        v258[1] = 0;
        v25 = *((_OWORD *)v257 + 1);
        v284 = *(_OWORD *)v257;
        v285 = v25;
        v26 = *((_OWORD *)v257 + 2);
        v27 = *((_OWORD *)v257 + 3);
        v28 = *((_OWORD *)v257 + 4);
        v289 = v257[10];
        v287 = v27;
        v288 = v28;
        v286 = v26;
        v29 = *((_OWORD *)v256 + 1);
        v290 = *(_OWORD *)v256;
        v291 = v29;
        v30 = *((_OWORD *)v256 + 2);
        v31 = *((_OWORD *)v256 + 3);
        v32 = *((_OWORD *)v256 + 5);
        v294 = *((_OWORD *)v256 + 4);
        v295 = v32;
        v292 = v30;
        v293 = v31;
        v33 = *((_OWORD *)v256 + 6);
        v34 = *((_OWORD *)v256 + 7);
        v35 = *((_OWORD *)v256 + 9);
        v298 = *((_OWORD *)v256 + 8);
        v299 = v35;
        v296 = v33;
        v297 = v34;
        v36 = *((_OWORD *)v256 + 10);
        v37 = *((_OWORD *)v256 + 11);
        v38 = *((_OWORD *)v256 + 12);
        v303 = *((_DWORD *)v256 + 52);
        v301 = v37;
        v302 = v38;
        v300 = v36;
        v39 = *((_OWORD *)v7 + 32);
        v283 = v24;
        v304 = v39;
        *v255 = 0;
        v255[1] = 0;
        v305 = v7[66];
        v306 = *v254;
        v307 = *((_DWORD *)v254 + 2);
        v308 = v7[69];
        v40 = *((_OWORD *)v7 + 35);
        v41 = *((_OWORD *)v7 + 36);
        v253[1] = 0;
        v253[2] = 0;
        *v253 = 0;
        v309 = v40;
        v310 = v41;
        v311 = v7[74];
        *v252 = 0;
        v252[1] = 0;
        v252[2] = 0;
        v42 = *(_OWORD *)v251;
        v43 = *((_OWORD *)v251 + 1);
        v44 = *((_OWORD *)v251 + 3);
        v314 = *((_OWORD *)v251 + 2);
        v315 = v44;
        v312 = v42;
        v313 = v43;
        v45 = *((_OWORD *)v251 + 4);
        v46 = *((_OWORD *)v251 + 5);
        v47 = *((_OWORD *)v251 + 6);
        v319 = v251[14];
        v317 = v46;
        v318 = v47;
        v316 = v45;
        v48 = *((_OWORD *)v7 + 45);
        *v250 = 0;
        v250[1] = 0;
        v49 = *((_OWORD *)v249 + 1);
        v321 = *(_OWORD *)v249;
        v322 = v49;
        v50 = *((_OWORD *)v249 + 2);
        v51 = *((_OWORD *)v249 + 3);
        v52 = *((_OWORD *)v249 + 4);
        v326 = v249[10];
        v324 = v51;
        v325 = v52;
        v323 = v50;
        v53 = *((_OWORD *)v248 + 1);
        v327 = *(_OWORD *)v248;
        v328 = v53;
        v54 = *((_OWORD *)v248 + 2);
        v55 = *((_OWORD *)v248 + 3);
        v56 = *((_OWORD *)v248 + 5);
        v331 = *((_OWORD *)v248 + 4);
        v332 = v56;
        v329 = v54;
        v330 = v55;
        v57 = *((_OWORD *)v248 + 6);
        v58 = *((_OWORD *)v248 + 7);
        v59 = *((_OWORD *)v248 + 9);
        v335 = *((_OWORD *)v248 + 8);
        v336 = v59;
        v333 = v57;
        v334 = v58;
        v60 = *((_OWORD *)v248 + 10);
        v61 = *((_OWORD *)v248 + 11);
        v62 = *((_OWORD *)v248 + 12);
        v340 = *((_DWORD *)v248 + 52);
        v338 = v61;
        v339 = v62;
        v337 = v60;
        v63 = *((_OWORD *)v7 + 65);
        v320 = v48;
        v341 = v63;
        *v247 = 0;
        v247[1] = 0;
        v342[0] = *v246;
        v265 = (unint64_t)(v14 - 2) >> 1;
        v266 = v14;
        *(_OWORD *)((char *)v342 + 9) = *(_OWORD *)((char *)v246 + 9);
        do
        {
          v66 = v7;
          v7 += 136 * v17 + 136;
          v67 = 2 * v17;
          v68 = (2 * v17) | 1;
          if (v67 + 2 < v14 && *(_DWORD *)v7 < *((_DWORD *)v7 + 272))
          {
            v7 += 136;
            v68 = v67 + 2;
          }
          v267 = v68;
          *v66 = *v7;
          v69 = v7[1];
          *((_DWORD *)v66 + 4) = *((_DWORD *)v7 + 4);
          v66[1] = v69;
          v70 = (void *)v66[3];
          if (v70)
          {
            v66[4] = (uint64_t)v70;
            operator delete(v70);
            v66[3] = 0;
            v66[4] = 0;
            v66[5] = 0;
          }
          *(_OWORD *)(v66 + 3) = *(_OWORD *)(v7 + 3);
          v66[5] = v7[5];
          v7[3] = 0;
          v7[4] = 0;
          v7[5] = 0;
          v71 = (void *)v66[6];
          if (v71)
          {
            v66[7] = (uint64_t)v71;
            operator delete(v71);
            v66[6] = 0;
            v66[7] = 0;
            v66[8] = 0;
          }
          *((_OWORD *)v66 + 3) = *((_OWORD *)v7 + 3);
          v66[8] = v7[8];
          v7[7] = 0;
          v7[8] = 0;
          v7[6] = 0;
          v72 = *(_OWORD *)(v7 + 19);
          v73 = *(_OWORD *)(v7 + 21);
          v74 = v7[23];
          *(_OWORD *)(v66 + 17) = *(_OWORD *)(v7 + 17);
          v66[23] = v74;
          *(_OWORD *)(v66 + 21) = v73;
          *(_OWORD *)(v66 + 19) = v72;
          v75 = *(_OWORD *)(v7 + 9);
          v76 = *(_OWORD *)(v7 + 11);
          v77 = *(_OWORD *)(v7 + 13);
          *(_OWORD *)(v66 + 15) = *(_OWORD *)(v7 + 15);
          *(_OWORD *)(v66 + 13) = v77;
          *(_OWORD *)(v66 + 11) = v76;
          *(_OWORD *)(v66 + 9) = v75;
          v78 = *((_OWORD *)v7 + 12);
          v7[24] = 0;
          v7[25] = 0;
          v79 = (std::__shared_weak_count *)v66[25];
          *((_OWORD *)v66 + 12) = v78;
          if (v79)
          {
            p_shared_owners = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(p_shared_owners);
            while (__stlxr(v81 - 1, p_shared_owners));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v82 = *((_OWORD *)v7 + 14);
          *((_OWORD *)v66 + 13) = *((_OWORD *)v7 + 13);
          *((_OWORD *)v66 + 14) = v82;
          v83 = *((_OWORD *)v7 + 15);
          v84 = *((_OWORD *)v7 + 16);
          v85 = *((_OWORD *)v7 + 17);
          v66[36] = v7[36];
          *((_OWORD *)v66 + 16) = v84;
          *((_OWORD *)v66 + 17) = v85;
          *((_OWORD *)v66 + 15) = v83;
          v86 = *(_OWORD *)(v7 + 47);
          v88 = *(_OWORD *)(v7 + 41);
          v87 = *(_OWORD *)(v7 + 43);
          *(_OWORD *)(v66 + 45) = *(_OWORD *)(v7 + 45);
          *(_OWORD *)(v66 + 47) = v86;
          *(_OWORD *)(v66 + 41) = v88;
          *(_OWORD *)(v66 + 43) = v87;
          v89 = *(_OWORD *)(v7 + 55);
          v91 = *(_OWORD *)(v7 + 49);
          v90 = *(_OWORD *)(v7 + 51);
          *(_OWORD *)(v66 + 53) = *(_OWORD *)(v7 + 53);
          *(_OWORD *)(v66 + 55) = v89;
          *(_OWORD *)(v66 + 49) = v91;
          *(_OWORD *)(v66 + 51) = v90;
          v93 = *(_OWORD *)(v7 + 59);
          v92 = *(_OWORD *)(v7 + 61);
          v94 = *(_OWORD *)(v7 + 57);
          *((_DWORD *)v66 + 126) = *((_DWORD *)v7 + 126);
          *(_OWORD *)(v66 + 59) = v93;
          *(_OWORD *)(v66 + 61) = v92;
          *(_OWORD *)(v66 + 57) = v94;
          v95 = *(_OWORD *)(v7 + 39);
          *(_OWORD *)(v66 + 37) = *(_OWORD *)(v7 + 37);
          *(_OWORD *)(v66 + 39) = v95;
          v96 = *((_OWORD *)v7 + 32);
          v7[65] = 0;
          v7[64] = 0;
          v97 = (std::__shared_weak_count *)v66[65];
          *((_OWORD *)v66 + 32) = v96;
          if (v97)
          {
            v98 = (unint64_t *)&v97->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v66[66] = v7[66];
          v100 = v7[67];
          *((_DWORD *)v66 + 136) = *((_DWORD *)v7 + 136);
          v66[67] = v100;
          v101 = v66 + 69;
          v102 = (void *)v66[69];
          if (v102)
          {
            v66[70] = (uint64_t)v102;
            operator delete(v102);
            *v101 = 0;
            v66[70] = 0;
            v66[71] = 0;
          }
          v103 = (__int128 *)(v7 + 69);
          *(_OWORD *)v101 = *(_OWORD *)(v7 + 69);
          v66[71] = v7[71];
          v7[69] = 0;
          v7[70] = 0;
          v7[71] = 0;
          v104 = (void *)v66[72];
          if (v104)
          {
            v66[73] = (uint64_t)v104;
            operator delete(v104);
            v66[72] = 0;
            v66[73] = 0;
            v66[74] = 0;
          }
          *((_OWORD *)v66 + 36) = *((_OWORD *)v7 + 36);
          v66[74] = v7[74];
          v7[73] = 0;
          v7[74] = 0;
          v7[72] = 0;
          v106 = *(_OWORD *)(v7 + 85);
          v105 = *(_OWORD *)(v7 + 87);
          v107 = *(_OWORD *)(v7 + 83);
          v66[89] = v7[89];
          *(_OWORD *)(v66 + 85) = v106;
          *(_OWORD *)(v66 + 87) = v105;
          *(_OWORD *)(v66 + 83) = v107;
          v108 = *(_OWORD *)(v7 + 75);
          v109 = *(_OWORD *)(v7 + 77);
          v110 = *(_OWORD *)(v7 + 81);
          *(_OWORD *)(v66 + 79) = *(_OWORD *)(v7 + 79);
          *(_OWORD *)(v66 + 81) = v110;
          *(_OWORD *)(v66 + 75) = v108;
          *(_OWORD *)(v66 + 77) = v109;
          v111 = *((_OWORD *)v7 + 45);
          v7[91] = 0;
          v7[90] = 0;
          v112 = (std::__shared_weak_count *)v66[91];
          *((_OWORD *)v66 + 45) = v111;
          v17 = v267;
          if (v112)
          {
            v113 = (unint64_t *)&v112->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
              v17 = v267;
            }
          }
          v115 = *((_OWORD *)v7 + 47);
          *((_OWORD *)v66 + 46) = *((_OWORD *)v7 + 46);
          *((_OWORD *)v66 + 47) = v115;
          v116 = *((_OWORD *)v7 + 48);
          v117 = *((_OWORD *)v7 + 49);
          v118 = *((_OWORD *)v7 + 50);
          v66[102] = v7[102];
          *((_OWORD *)v66 + 49) = v117;
          *((_OWORD *)v66 + 50) = v118;
          *((_OWORD *)v66 + 48) = v116;
          v119 = *(_OWORD *)(v7 + 113);
          v121 = *(_OWORD *)(v7 + 107);
          v120 = *(_OWORD *)(v7 + 109);
          *(_OWORD *)(v66 + 111) = *(_OWORD *)(v7 + 111);
          *(_OWORD *)(v66 + 113) = v119;
          *(_OWORD *)(v66 + 107) = v121;
          *(_OWORD *)(v66 + 109) = v120;
          v122 = *(_OWORD *)(v7 + 121);
          v124 = *(_OWORD *)(v7 + 115);
          v123 = *(_OWORD *)(v7 + 117);
          *(_OWORD *)(v66 + 119) = *(_OWORD *)(v7 + 119);
          *(_OWORD *)(v66 + 121) = v122;
          *(_OWORD *)(v66 + 115) = v124;
          *(_OWORD *)(v66 + 117) = v123;
          v126 = *(_OWORD *)(v7 + 125);
          v125 = *(_OWORD *)(v7 + 127);
          v127 = *(_OWORD *)(v7 + 123);
          *((_DWORD *)v66 + 258) = *((_DWORD *)v7 + 258);
          *(_OWORD *)(v66 + 125) = v126;
          *(_OWORD *)(v66 + 127) = v125;
          *(_OWORD *)(v66 + 123) = v127;
          v128 = *(_OWORD *)(v7 + 105);
          *(_OWORD *)(v66 + 103) = *(_OWORD *)(v7 + 103);
          *(_OWORD *)(v66 + 105) = v128;
          v129 = *((_OWORD *)v7 + 65);
          v7[131] = 0;
          v7[130] = 0;
          v130 = (std::__shared_weak_count *)v66[131];
          *((_OWORD *)v66 + 65) = v129;
          v14 = v266;
          if (v130)
          {
            v131 = (unint64_t *)&v130->__shared_owners_;
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
              v17 = v267;
            }
          }
          v64 = (__int128 *)(v7 + 132);
          v65 = *((_OWORD *)v7 + 66);
          *(_OWORD *)((char *)v66 + 1065) = *(_OWORD *)((char *)v7 + 1065);
          *((_OWORD *)v66 + 66) = v65;
        }
        while (v17 <= v265);
        v133 = v264 - 136;
        if (v7 == v264 - 136)
        {
          *v7 = v268;
          sub_20E9DA564((uint64_t)(v7 + 1), &v269);
          v7[66] = v305;
          sub_20E9DA564((uint64_t)(v7 + 67), &v306);
          v15 = *(_OWORD *)((char *)v342 + 9);
          *v64 = v342[0];
          *(_OWORD *)((char *)v7 + 1065) = v15;
        }
        else
        {
          *v7 = *v133;
          sub_20E9DA564((uint64_t)(v7 + 1), v264 - 135);
          v7[66] = *(v264 - 70);
          sub_20E9DA564((uint64_t)(v7 + 67), v264 - 69);
          v134 = *((_OWORD *)v264 - 2);
          *(_OWORD *)((char *)v7 + 1065) = *(_OWORD *)((char *)v264 - 23);
          *v64 = v134;
          *v133 = v268;
          sub_20E9DA564((uint64_t)(v264 - 135), &v269);
          *(v264 - 70) = v305;
          v14 = v266;
          sub_20E9DA564((uint64_t)(v264 - 69), &v306);
          *((_OWORD *)v264 - 2) = v342[0];
          *(_OWORD *)((char *)v264 - 23) = *(_OWORD *)((char *)v342 + 9);
          v135 = (char *)v7 - v263 + 1088;
          if (v135 >= 1089)
          {
            v136 = (v135 / 0x440uLL - 2) >> 1;
            v137 = (uint64_t *)&v263[1088 * v136];
            if (*(_DWORD *)v137 < *(_DWORD *)v7)
            {
              v343 = *v7;
              v138 = v7[1];
              v345 = *((_DWORD *)v7 + 4);
              v344 = v138;
              v346 = *(_OWORD *)(v7 + 3);
              v347 = v7[5];
              v7[3] = 0;
              v7[4] = 0;
              v7[5] = 0;
              v348 = *((_OWORD *)v7 + 3);
              v349 = v7[8];
              v7[7] = 0;
              v7[8] = 0;
              v7[6] = 0;
              v140 = *(_OWORD *)(v7 + 19);
              v139 = *(_OWORD *)(v7 + 21);
              v141 = *(_OWORD *)(v7 + 17);
              v357 = v7[23];
              v355 = v140;
              v356 = v139;
              v354 = v141;
              v142 = *(_OWORD *)(v7 + 9);
              v143 = *(_OWORD *)(v7 + 11);
              v144 = *(_OWORD *)(v7 + 15);
              v352 = *(_OWORD *)(v7 + 13);
              v353 = v144;
              v350 = v142;
              v351 = v143;
              v358 = *((_OWORD *)v7 + 12);
              v7[24] = 0;
              v7[25] = 0;
              v146 = *((_OWORD *)v7 + 16);
              v145 = *((_OWORD *)v7 + 17);
              v147 = *((_OWORD *)v7 + 15);
              v364 = v7[36];
              v362 = v146;
              v363 = v145;
              v361 = v147;
              v148 = *((_OWORD *)v7 + 14);
              v359 = *((_OWORD *)v7 + 13);
              v360 = v148;
              v149 = *(_OWORD *)(v7 + 47);
              v151 = *(_OWORD *)(v7 + 41);
              v150 = *(_OWORD *)(v7 + 43);
              v369 = *(_OWORD *)(v7 + 45);
              v370 = v149;
              v367 = v151;
              v368 = v150;
              v152 = *(_OWORD *)(v7 + 55);
              v154 = *(_OWORD *)(v7 + 49);
              v153 = *(_OWORD *)(v7 + 51);
              v373 = *(_OWORD *)(v7 + 53);
              v374 = v152;
              v371 = v154;
              v372 = v153;
              v156 = *(_OWORD *)(v7 + 59);
              v155 = *(_OWORD *)(v7 + 61);
              v157 = *(_OWORD *)(v7 + 57);
              v378 = *((_DWORD *)v7 + 126);
              v376 = v156;
              v377 = v155;
              v375 = v157;
              v158 = *(_OWORD *)(v7 + 39);
              v365 = *(_OWORD *)(v7 + 37);
              v366 = v158;
              v379 = *((_OWORD *)v7 + 32);
              v7[64] = 0;
              v7[65] = 0;
              v380 = v7[66];
              v159 = v7[67];
              v382 = *((_DWORD *)v7 + 136);
              v381 = v159;
              v383 = *v103;
              v384 = v7[71];
              *(_QWORD *)v103 = 0;
              v7[70] = 0;
              v7[71] = 0;
              v385 = *((_OWORD *)v7 + 36);
              v386 = v7[74];
              v7[73] = 0;
              v7[74] = 0;
              v7[72] = 0;
              v161 = *(_OWORD *)(v7 + 85);
              v160 = *(_OWORD *)(v7 + 87);
              v162 = *(_OWORD *)(v7 + 83);
              v394 = v7[89];
              v392 = v161;
              v393 = v160;
              v391 = v162;
              v163 = *(_OWORD *)(v7 + 75);
              v164 = *(_OWORD *)(v7 + 77);
              v165 = *(_OWORD *)(v7 + 81);
              v389 = *(_OWORD *)(v7 + 79);
              v390 = v165;
              v387 = v163;
              v388 = v164;
              v395 = *((_OWORD *)v7 + 45);
              v7[90] = 0;
              v7[91] = 0;
              v167 = *((_OWORD *)v7 + 49);
              v166 = *((_OWORD *)v7 + 50);
              v168 = *((_OWORD *)v7 + 48);
              v401 = v7[102];
              v399 = v167;
              v400 = v166;
              v398 = v168;
              v169 = *((_OWORD *)v7 + 47);
              v396 = *((_OWORD *)v7 + 46);
              v397 = v169;
              v170 = *(_OWORD *)(v7 + 113);
              v172 = *(_OWORD *)(v7 + 107);
              v171 = *(_OWORD *)(v7 + 109);
              v406 = *(_OWORD *)(v7 + 111);
              v407 = v170;
              v404 = v172;
              v405 = v171;
              v173 = *(_OWORD *)(v7 + 121);
              v175 = *(_OWORD *)(v7 + 115);
              v174 = *(_OWORD *)(v7 + 117);
              v410 = *(_OWORD *)(v7 + 119);
              v411 = v173;
              v408 = v175;
              v409 = v174;
              v177 = *(_OWORD *)(v7 + 125);
              v176 = *(_OWORD *)(v7 + 127);
              v178 = *(_OWORD *)(v7 + 123);
              v415 = *((_DWORD *)v7 + 258);
              v413 = v177;
              v414 = v176;
              v412 = v178;
              v179 = *(_OWORD *)(v7 + 105);
              v402 = *(_OWORD *)(v7 + 103);
              v403 = v179;
              v416 = *((_OWORD *)v7 + 65);
              v7[130] = 0;
              v7[131] = 0;
              v180 = *v64;
              *(_OWORD *)((char *)v417 + 9) = *(_OWORD *)((char *)v7 + 1065);
              v417[0] = v180;
              do
              {
                v181 = v137;
                *v7 = *v137;
                v183 = (uint64_t)(v137 + 1);
                v182 = v137[1];
                *((_DWORD *)v7 + 4) = *(_DWORD *)(v183 + 8);
                v7[1] = v182;
                v184 = (void *)v7[3];
                if (v184)
                {
                  v7[4] = (uint64_t)v184;
                  operator delete(v184);
                  v7[3] = 0;
                  v7[4] = 0;
                  v7[5] = 0;
                }
                *(_OWORD *)(v7 + 3) = *(_OWORD *)(v181 + 3);
                v7[5] = v181[5];
                *(_QWORD *)(v183 + 16) = 0;
                *(_QWORD *)(v183 + 24) = 0;
                *(_QWORD *)(v183 + 32) = 0;
                v185 = (void *)v7[6];
                if (v185)
                {
                  v7[7] = (uint64_t)v185;
                  operator delete(v185);
                  v7[6] = 0;
                  v7[7] = 0;
                  v7[8] = 0;
                }
                *((_OWORD *)v7 + 3) = *((_OWORD *)v181 + 3);
                v7[8] = v181[8];
                v181[7] = 0;
                v181[8] = 0;
                v181[6] = 0;
                v186 = *(_OWORD *)(v181 + 19);
                v187 = *(_OWORD *)(v181 + 21);
                v188 = v181[23];
                *(_OWORD *)(v7 + 17) = *(_OWORD *)(v181 + 17);
                v7[23] = v188;
                *(_OWORD *)(v7 + 21) = v187;
                *(_OWORD *)(v7 + 19) = v186;
                v189 = *(_OWORD *)(v181 + 9);
                v190 = *(_OWORD *)(v181 + 11);
                v191 = *(_OWORD *)(v181 + 13);
                *(_OWORD *)(v7 + 15) = *(_OWORD *)(v181 + 15);
                *(_OWORD *)(v7 + 13) = v191;
                *(_OWORD *)(v7 + 11) = v190;
                *(_OWORD *)(v7 + 9) = v189;
                v192 = *((_OWORD *)v181 + 12);
                v181[24] = 0;
                v181[25] = 0;
                v193 = (std::__shared_weak_count *)v7[25];
                *((_OWORD *)v7 + 12) = v192;
                if (v193)
                {
                  v194 = (unint64_t *)&v193->__shared_owners_;
                  do
                    v195 = __ldaxr(v194);
                  while (__stlxr(v195 - 1, v194));
                  if (!v195)
                  {
                    ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                    std::__shared_weak_count::__release_weak(v193);
                  }
                }
                v196 = *((_OWORD *)v181 + 14);
                *((_OWORD *)v7 + 13) = *((_OWORD *)v181 + 13);
                *((_OWORD *)v7 + 14) = v196;
                v197 = *((_OWORD *)v181 + 15);
                v198 = *((_OWORD *)v181 + 16);
                v199 = *((_OWORD *)v181 + 17);
                v7[36] = v181[36];
                *((_OWORD *)v7 + 16) = v198;
                *((_OWORD *)v7 + 17) = v199;
                *((_OWORD *)v7 + 15) = v197;
                v200 = *(_OWORD *)(v181 + 47);
                v202 = *(_OWORD *)(v181 + 41);
                v201 = *(_OWORD *)(v181 + 43);
                *(_OWORD *)(v7 + 45) = *(_OWORD *)(v181 + 45);
                *(_OWORD *)(v7 + 47) = v200;
                *(_OWORD *)(v7 + 41) = v202;
                *(_OWORD *)(v7 + 43) = v201;
                v203 = *(_OWORD *)(v181 + 55);
                v205 = *(_OWORD *)(v181 + 49);
                v204 = *(_OWORD *)(v181 + 51);
                *(_OWORD *)(v7 + 53) = *(_OWORD *)(v181 + 53);
                *(_OWORD *)(v7 + 55) = v203;
                *(_OWORD *)(v7 + 49) = v205;
                *(_OWORD *)(v7 + 51) = v204;
                v207 = *(_OWORD *)(v181 + 59);
                v206 = *(_OWORD *)(v181 + 61);
                v208 = *(_OWORD *)(v181 + 57);
                *((_DWORD *)v7 + 126) = *((_DWORD *)v181 + 126);
                *(_OWORD *)(v7 + 59) = v207;
                *(_OWORD *)(v7 + 61) = v206;
                *(_OWORD *)(v7 + 57) = v208;
                v209 = *(_OWORD *)(v181 + 39);
                *(_OWORD *)(v7 + 37) = *(_OWORD *)(v181 + 37);
                *(_OWORD *)(v7 + 39) = v209;
                v210 = *((_OWORD *)v181 + 32);
                v181[65] = 0;
                v181[64] = 0;
                v211 = (std::__shared_weak_count *)v7[65];
                *((_OWORD *)v7 + 32) = v210;
                if (v211)
                {
                  v212 = (unint64_t *)&v211->__shared_owners_;
                  do
                    v213 = __ldaxr(v212);
                  while (__stlxr(v213 - 1, v212));
                  if (!v213)
                  {
                    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                    std::__shared_weak_count::__release_weak(v211);
                  }
                }
                v7[66] = v181[66];
                v214 = v181[67];
                *((_DWORD *)v7 + 136) = *((_DWORD *)v181 + 136);
                v7[67] = v214;
                v215 = (void *)v7[69];
                if (v215)
                {
                  v7[70] = (uint64_t)v215;
                  operator delete(v215);
                  v7[69] = 0;
                  v7[70] = 0;
                  v7[71] = 0;
                }
                v7[69] = v181[69];
                v7[70] = v181[70];
                v7[71] = v181[71];
                v181[69] = 0;
                v181[70] = 0;
                v181[71] = 0;
                v216 = (void *)v7[72];
                if (v216)
                {
                  v7[73] = (uint64_t)v216;
                  operator delete(v216);
                  v7[72] = 0;
                  v7[73] = 0;
                  v7[74] = 0;
                }
                *((_OWORD *)v7 + 36) = *((_OWORD *)v181 + 36);
                v7[74] = v181[74];
                v181[73] = 0;
                v181[74] = 0;
                v181[72] = 0;
                v218 = *(_OWORD *)(v181 + 85);
                v217 = *(_OWORD *)(v181 + 87);
                v219 = *(_OWORD *)(v181 + 83);
                v7[89] = v181[89];
                *(_OWORD *)(v7 + 85) = v218;
                *(_OWORD *)(v7 + 87) = v217;
                *(_OWORD *)(v7 + 83) = v219;
                v220 = *(_OWORD *)(v181 + 75);
                v221 = *(_OWORD *)(v181 + 77);
                v222 = *(_OWORD *)(v181 + 81);
                *(_OWORD *)(v7 + 79) = *(_OWORD *)(v181 + 79);
                *(_OWORD *)(v7 + 81) = v222;
                *(_OWORD *)(v7 + 75) = v220;
                *(_OWORD *)(v7 + 77) = v221;
                v223 = *((_OWORD *)v181 + 45);
                v181[91] = 0;
                v181[90] = 0;
                v224 = (std::__shared_weak_count *)v7[91];
                *((_OWORD *)v7 + 45) = v223;
                if (v224)
                {
                  v225 = (unint64_t *)&v224->__shared_owners_;
                  do
                    v226 = __ldaxr(v225);
                  while (__stlxr(v226 - 1, v225));
                  if (!v226)
                  {
                    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                    std::__shared_weak_count::__release_weak(v224);
                  }
                }
                v227 = *((_OWORD *)v181 + 47);
                *((_OWORD *)v7 + 46) = *((_OWORD *)v181 + 46);
                *((_OWORD *)v7 + 47) = v227;
                v228 = *((_OWORD *)v181 + 48);
                v229 = *((_OWORD *)v181 + 49);
                v230 = *((_OWORD *)v181 + 50);
                v7[102] = v181[102];
                *((_OWORD *)v7 + 49) = v229;
                *((_OWORD *)v7 + 50) = v230;
                *((_OWORD *)v7 + 48) = v228;
                v231 = *(_OWORD *)(v181 + 113);
                v233 = *(_OWORD *)(v181 + 107);
                v232 = *(_OWORD *)(v181 + 109);
                *(_OWORD *)(v7 + 111) = *(_OWORD *)(v181 + 111);
                *(_OWORD *)(v7 + 113) = v231;
                *(_OWORD *)(v7 + 107) = v233;
                *(_OWORD *)(v7 + 109) = v232;
                v234 = *(_OWORD *)(v181 + 121);
                v236 = *(_OWORD *)(v181 + 115);
                v235 = *(_OWORD *)(v181 + 117);
                *(_OWORD *)(v7 + 119) = *(_OWORD *)(v181 + 119);
                *(_OWORD *)(v7 + 121) = v234;
                *(_OWORD *)(v7 + 115) = v236;
                *(_OWORD *)(v7 + 117) = v235;
                v238 = *(_OWORD *)(v181 + 125);
                v237 = *(_OWORD *)(v181 + 127);
                v239 = *(_OWORD *)(v181 + 123);
                *((_DWORD *)v7 + 258) = *((_DWORD *)v181 + 258);
                *(_OWORD *)(v7 + 125) = v238;
                *(_OWORD *)(v7 + 127) = v237;
                *(_OWORD *)(v7 + 123) = v239;
                v240 = *(_OWORD *)(v181 + 105);
                *(_OWORD *)(v7 + 103) = *(_OWORD *)(v181 + 103);
                *(_OWORD *)(v7 + 105) = v240;
                v241 = *((_OWORD *)v181 + 65);
                v181[131] = 0;
                v181[130] = 0;
                v242 = (std::__shared_weak_count *)v7[131];
                *((_OWORD *)v7 + 65) = v241;
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldaxr(v243);
                  while (__stlxr(v244 - 1, v243));
                  if (!v244)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v245 = *((_OWORD *)v181 + 66);
                *(_OWORD *)((char *)v7 + 1065) = *(_OWORD *)((char *)v181 + 1065);
                *((_OWORD *)v7 + 66) = v245;
                if (!v136)
                  break;
                v136 = (v136 - 1) >> 1;
                v137 = (uint64_t *)&v263[1088 * v136];
                v7 = v181;
              }
              while (*(_DWORD *)v137 < v343);
              *v181 = v343;
              sub_20E9DA564(v183, &v344);
              v181[66] = v380;
              sub_20E9DA564((uint64_t)(v181 + 67), &v381);
              *((_OWORD *)v181 + 66) = v417[0];
              *(_OWORD *)((char *)v181 + 1065) = *(_OWORD *)((char *)v417 + 9);
              sub_20E86A6B8(&v343);
              v14 = v266;
            }
          }
        }
        result = sub_20E86A6B8(&v268);
        v16 = v14-- <= 2;
        v7 = (uint64_t *)v263;
        v6 = v264 - 136;
      }
      while (!v16);
    }
  }
  return result;
}

unsigned int *sub_20EA995C8(unsigned int *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  unsigned int v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  __int128 v136;
  _OWORD v137[2];

  v2 = a2;
  v5 = (uint64_t)(a1 + 2);
  v4 = *((_QWORD *)a1 + 1);
  v63 = *(_QWORD *)a1;
  v64 = v4;
  v65 = a1[4];
  v66 = *(_OWORD *)(a1 + 6);
  v67 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  v68 = *((_OWORD *)a1 + 3);
  v69 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 8) = 0;
  v6 = *(_OWORD *)(a1 + 18);
  v7 = *(_OWORD *)(a1 + 22);
  v8 = *(_OWORD *)(a1 + 30);
  v72 = *(_OWORD *)(a1 + 26);
  v73 = v8;
  v70 = v6;
  v71 = v7;
  v9 = *(_OWORD *)(a1 + 34);
  v10 = *(_OWORD *)(a1 + 38);
  v11 = *(_OWORD *)(a1 + 42);
  v77 = *((_QWORD *)a1 + 23);
  v76 = v11;
  v75 = v10;
  v74 = v9;
  v12 = *((_OWORD *)a1 + 12);
  v13 = *((_OWORD *)a1 + 13);
  *((_QWORD *)a1 + 24) = 0;
  *((_QWORD *)a1 + 25) = 0;
  v78 = v12;
  v79 = v13;
  v14 = *((_OWORD *)a1 + 14);
  v15 = *((_OWORD *)a1 + 15);
  v16 = *((_OWORD *)a1 + 16);
  v17 = *((_OWORD *)a1 + 17);
  v84 = *((_QWORD *)a1 + 36);
  v83 = v17;
  v82 = v16;
  v80 = v14;
  v81 = v15;
  v18 = *(_OWORD *)(a1 + 78);
  v85 = *(_OWORD *)(a1 + 74);
  v86 = v18;
  v19 = *(_OWORD *)(a1 + 82);
  v20 = *(_OWORD *)(a1 + 86);
  v21 = *(_OWORD *)(a1 + 94);
  v89 = *(_OWORD *)(a1 + 90);
  v90 = v21;
  v87 = v19;
  v88 = v20;
  v22 = *(_OWORD *)(a1 + 98);
  v23 = *(_OWORD *)(a1 + 102);
  v24 = *(_OWORD *)(a1 + 110);
  v93 = *(_OWORD *)(a1 + 106);
  v94 = v24;
  v91 = v22;
  v92 = v23;
  v25 = a1[126];
  v26 = *(_OWORD *)(a1 + 114);
  v27 = *(_OWORD *)(a1 + 122);
  v96 = *(_OWORD *)(a1 + 118);
  v97 = v27;
  v95 = v26;
  v98 = v25;
  v99 = *((_OWORD *)a1 + 32);
  *((_QWORD *)a1 + 65) = 0;
  *((_QWORD *)a1 + 64) = 0;
  v100 = *((_QWORD *)a1 + 66);
  v28 = (uint64_t)(a1 + 134);
  v101 = *((_QWORD *)a1 + 67);
  v102 = a1[136];
  v103 = *((_QWORD *)a1 + 69);
  *((_QWORD *)a1 + 69) = 0;
  v29 = *((_OWORD *)a1 + 35);
  v30 = *((_OWORD *)a1 + 36);
  *((_QWORD *)a1 + 70) = 0;
  *((_QWORD *)a1 + 71) = 0;
  v104 = v29;
  v105 = v30;
  v106 = *((_QWORD *)a1 + 74);
  *((_QWORD *)a1 + 73) = 0;
  *((_QWORD *)a1 + 72) = 0;
  *((_QWORD *)a1 + 74) = 0;
  v31 = *(_OWORD *)(a1 + 150);
  v32 = *(_OWORD *)(a1 + 154);
  v33 = *(_OWORD *)(a1 + 162);
  v109 = *(_OWORD *)(a1 + 158);
  v110 = v33;
  v107 = v31;
  v108 = v32;
  v34 = *((_QWORD *)a1 + 89);
  v35 = *(_OWORD *)(a1 + 166);
  v36 = *(_OWORD *)(a1 + 174);
  v112 = *(_OWORD *)(a1 + 170);
  v113 = v36;
  v111 = v35;
  v114 = v34;
  v37 = *((_OWORD *)a1 + 45);
  v38 = *((_OWORD *)a1 + 46);
  *((_QWORD *)a1 + 91) = 0;
  *((_QWORD *)a1 + 90) = 0;
  v115 = v37;
  v116 = v38;
  v39 = *((_OWORD *)a1 + 47);
  v40 = *((_OWORD *)a1 + 48);
  v41 = *((_OWORD *)a1 + 49);
  v42 = *((_OWORD *)a1 + 50);
  v121 = *((_QWORD *)a1 + 102);
  v120 = v42;
  v119 = v41;
  v117 = v39;
  v118 = v40;
  v43 = *(_OWORD *)(a1 + 210);
  v122 = *(_OWORD *)(a1 + 206);
  v123 = v43;
  v44 = *(_OWORD *)(a1 + 214);
  v45 = *(_OWORD *)(a1 + 218);
  v46 = *(_OWORD *)(a1 + 226);
  v126 = *(_OWORD *)(a1 + 222);
  v127 = v46;
  v124 = v44;
  v125 = v45;
  v47 = *(_OWORD *)(a1 + 230);
  v48 = *(_OWORD *)(a1 + 234);
  v49 = *(_OWORD *)(a1 + 242);
  v130 = *(_OWORD *)(a1 + 238);
  v131 = v49;
  v128 = v47;
  v129 = v48;
  LODWORD(v34) = a1[258];
  v50 = *(_OWORD *)(a1 + 246);
  v51 = *(_OWORD *)(a1 + 254);
  v133 = *(_OWORD *)(a1 + 250);
  v134 = v51;
  v132 = v50;
  v135 = v34;
  v136 = *((_OWORD *)a1 + 65);
  *((_QWORD *)a1 + 131) = 0;
  *((_QWORD *)a1 + 130) = 0;
  v52 = a1 + 264;
  *(_OWORD *)((char *)v137 + 9) = *(_OWORD *)((char *)a1 + 1065);
  v137[0] = *((_OWORD *)a1 + 66);
  if (v63 >= *((_DWORD *)a2 - 272))
  {
    v56 = a1 + 272;
    do
    {
      v54 = v56;
      if (v56 >= (unsigned int *)a2)
        break;
      v57 = *v56;
      v56 += 272;
    }
    while (v63 >= v57);
  }
  else
  {
    v53 = a1;
    do
    {
      v54 = v53 + 272;
      v55 = v53[272];
      v53 += 272;
    }
    while (v63 >= v55);
  }
  if (v54 < (unsigned int *)a2)
  {
    do
      v2 -= 136;
    while (v63 < *(_DWORD *)v2);
  }
  while (v54 < (unsigned int *)v2)
  {
    sub_20EA9A348((uint64_t *)v54, v2);
    do
    {
      v58 = v54[272];
      v54 += 272;
    }
    while (v63 >= v58);
    do
      v2 -= 136;
    while (v63 < *(_DWORD *)v2);
  }
  v59 = v54 - 272;
  if (v54 - 272 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)v59;
    sub_20E9DA564(v5, (uint64_t *)v54 - 135);
    *((_QWORD *)a1 + 66) = *((_QWORD *)v54 - 70);
    sub_20E9DA564(v28, (uint64_t *)v54 - 69);
    v60 = *(_OWORD *)((char *)v54 - 23);
    *v52 = *((_OWORD *)v54 - 2);
    *(_OWORD *)((char *)v52 + 9) = v60;
  }
  *(_QWORD *)v59 = v63;
  sub_20E9DA564((uint64_t)(v54 - 270), &v64);
  *((_QWORD *)v54 - 70) = v100;
  sub_20E9DA564((uint64_t)(v54 - 138), &v101);
  v61 = *(_OWORD *)((char *)v137 + 9);
  *((_OWORD *)v54 - 2) = v137[0];
  *(_OWORD *)((char *)v54 - 23) = v61;
  sub_20E86A6B8(&v63);
  return v54;
}

unint64_t sub_20EA99990(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t *v58;
  __int128 v59;
  __int128 v60;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  __int128 v136;
  _OWORD v137[2];

  v4 = 0;
  v6 = (uint64_t)(a1 + 1);
  v5 = a1[1];
  v63 = *a1;
  v64 = v5;
  v65 = *((_DWORD *)a1 + 4);
  v66 = *(_OWORD *)(a1 + 3);
  v67 = a1[5];
  a1[3] = 0;
  a1[4] = 0;
  v68 = *((_OWORD *)a1 + 3);
  v69 = a1[8];
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v7 = *(_OWORD *)(a1 + 9);
  v8 = *(_OWORD *)(a1 + 11);
  v9 = *(_OWORD *)(a1 + 15);
  v72 = *(_OWORD *)(a1 + 13);
  v73 = v9;
  v70 = v7;
  v71 = v8;
  v10 = *(_OWORD *)(a1 + 17);
  v11 = *(_OWORD *)(a1 + 19);
  v12 = *(_OWORD *)(a1 + 21);
  v77 = a1[23];
  v76 = v12;
  v75 = v11;
  v74 = v10;
  v13 = *((_OWORD *)a1 + 12);
  v14 = *((_OWORD *)a1 + 13);
  a1[24] = 0;
  a1[25] = 0;
  v78 = v13;
  v79 = v14;
  v15 = *((_OWORD *)a1 + 14);
  v16 = *((_OWORD *)a1 + 15);
  v17 = *((_OWORD *)a1 + 16);
  v18 = *((_OWORD *)a1 + 17);
  v84 = a1[36];
  v83 = v18;
  v82 = v17;
  v80 = v15;
  v81 = v16;
  v19 = *(_OWORD *)(a1 + 39);
  v85 = *(_OWORD *)(a1 + 37);
  v86 = v19;
  v20 = *(_OWORD *)(a1 + 41);
  v21 = *(_OWORD *)(a1 + 43);
  v22 = *(_OWORD *)(a1 + 47);
  v89 = *(_OWORD *)(a1 + 45);
  v90 = v22;
  v87 = v20;
  v88 = v21;
  v23 = *(_OWORD *)(a1 + 49);
  v24 = *(_OWORD *)(a1 + 51);
  v25 = *(_OWORD *)(a1 + 55);
  v93 = *(_OWORD *)(a1 + 53);
  v94 = v25;
  v91 = v23;
  v92 = v24;
  v26 = *((_DWORD *)a1 + 126);
  v27 = *(_OWORD *)(a1 + 57);
  v28 = *(_OWORD *)(a1 + 61);
  v96 = *(_OWORD *)(a1 + 59);
  v97 = v28;
  v95 = v27;
  v98 = v26;
  v99 = *((_OWORD *)a1 + 32);
  a1[65] = 0;
  a1[64] = 0;
  v100 = a1[66];
  v29 = (uint64_t)(a1 + 67);
  v101 = a1[67];
  v102 = *((_DWORD *)a1 + 136);
  v103 = a1[69];
  a1[69] = 0;
  v30 = *((_OWORD *)a1 + 35);
  v31 = *((_OWORD *)a1 + 36);
  a1[70] = 0;
  a1[71] = 0;
  v104 = v30;
  v105 = v31;
  v106 = a1[74];
  a1[73] = 0;
  a1[72] = 0;
  a1[74] = 0;
  v32 = *(_OWORD *)(a1 + 75);
  v33 = *(_OWORD *)(a1 + 77);
  v34 = *(_OWORD *)(a1 + 81);
  v109 = *(_OWORD *)(a1 + 79);
  v110 = v34;
  v107 = v32;
  v108 = v33;
  v35 = a1[89];
  v36 = *(_OWORD *)(a1 + 83);
  v37 = *(_OWORD *)(a1 + 87);
  v112 = *(_OWORD *)(a1 + 85);
  v113 = v37;
  v111 = v36;
  v114 = v35;
  v38 = *((_OWORD *)a1 + 45);
  v39 = *((_OWORD *)a1 + 46);
  a1[91] = 0;
  a1[90] = 0;
  v115 = v38;
  v116 = v39;
  v40 = *((_OWORD *)a1 + 47);
  v41 = *((_OWORD *)a1 + 48);
  v42 = *((_OWORD *)a1 + 49);
  v43 = *((_OWORD *)a1 + 50);
  v121 = a1[102];
  v120 = v43;
  v119 = v42;
  v117 = v40;
  v118 = v41;
  v44 = *(_OWORD *)(a1 + 105);
  v122 = *(_OWORD *)(a1 + 103);
  v123 = v44;
  v45 = *(_OWORD *)(a1 + 107);
  v46 = *(_OWORD *)(a1 + 109);
  v47 = *(_OWORD *)(a1 + 113);
  v126 = *(_OWORD *)(a1 + 111);
  v127 = v47;
  v124 = v45;
  v125 = v46;
  v48 = *(_OWORD *)(a1 + 115);
  v49 = *(_OWORD *)(a1 + 117);
  v50 = *(_OWORD *)(a1 + 121);
  v130 = *(_OWORD *)(a1 + 119);
  v131 = v50;
  v128 = v48;
  v129 = v49;
  LODWORD(v35) = *((_DWORD *)a1 + 258);
  v51 = *(_OWORD *)(a1 + 123);
  v52 = *(_OWORD *)(a1 + 127);
  v133 = *(_OWORD *)(a1 + 125);
  v134 = v52;
  v132 = v51;
  v135 = v35;
  v136 = *((_OWORD *)a1 + 65);
  a1[131] = 0;
  a1[130] = 0;
  v62 = a1 + 132;
  *(_OWORD *)((char *)v137 + 9) = *(_OWORD *)((char *)a1 + 1065);
  v137[0] = *((_OWORD *)a1 + 66);
  do
  {
    v53 = a1[v4 + 136];
    v4 += 136;
  }
  while (v53 < v63);
  v54 = (unint64_t)&a1[v4];
  if (v4 == 136)
  {
    do
    {
      if (v54 >= (unint64_t)a2)
        break;
      a2 -= 136;
    }
    while (*(_DWORD *)a2 >= v63);
  }
  else
  {
    do
      a2 -= 136;
    while (*(_DWORD *)a2 >= v63);
  }
  v55 = (unint64_t)&a1[v4];
  if (v54 < (unint64_t)a2)
  {
    v56 = a2;
    do
    {
      sub_20EA9A348((uint64_t *)v55, v56);
      do
      {
        v57 = *(_DWORD *)(v55 + 1088);
        v55 += 1088;
      }
      while (v57 < v63);
      do
        v56 -= 136;
      while (*(_DWORD *)v56 >= v63);
    }
    while (v55 < (unint64_t)v56);
  }
  v58 = (uint64_t *)(v55 - 1088);
  if ((uint64_t *)(v55 - 1088) != a1)
  {
    *a1 = *v58;
    sub_20E9DA564(v6, (uint64_t *)(v55 - 1080));
    a1[66] = *(_QWORD *)(v55 - 560);
    sub_20E9DA564(v29, (uint64_t *)(v55 - 552));
    v59 = *(_OWORD *)(v55 - 23);
    *v62 = *(_OWORD *)(v55 - 32);
    *(_OWORD *)((char *)v62 + 9) = v59;
  }
  *v58 = v63;
  sub_20E9DA564(v55 - 1080, &v64);
  *(_QWORD *)(v55 - 560) = v100;
  sub_20E9DA564(v55 - 552, &v101);
  v60 = *(_OWORD *)((char *)v137 + 9);
  *(_OWORD *)(v55 - 32) = v137[0];
  *(_OWORD *)(v55 - 23) = v60;
  sub_20E86A6B8(&v63);
  return v55 - 1088;
}

uint64_t sub_20EA99D6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _BOOL8 v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150;
  __int128 v151;
  _OWORD v152[2];

  v2 = a2;
  v3 = a1;
  v4 = 1;
  switch(0xF0F0F0F0F0F0F0F1 * (((char *)a2 - (char *)a1) >> 6))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = a2 - 136;
      if (*((_DWORD *)v2 - 272) < *(_DWORD *)a1)
        sub_20EA9A348(a1, v5);
      return v4;
    case 3uLL:
      v6 = a1 + 136;
      v7 = a2 - 136;
      v8 = *((_DWORD *)a1 + 272);
      v9 = *((_DWORD *)a2 - 272);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v9 >= v8)
          return 1;
        v13 = a1 + 136;
        v14 = a2 - 136;
        goto LABEL_19;
      }
      if (v9 >= v8)
      {
        sub_20EA9A348(a1, a1 + 136);
        if (*(_DWORD *)v7 >= *((_DWORD *)v3 + 272))
          return 1;
        a1 = v3 + 136;
      }
      v19 = v7;
      goto LABEL_39;
    case 4uLL:
      sub_20EA9A65C(a1, a1 + 136, a1 + 272, a2 - 136);
      return v4;
    case 5uLL:
      v6 = a1 + 136;
      v10 = a1 + 272;
      v11 = a1 + 408;
      v12 = a2 - 136;
      sub_20EA9A65C(a1, a1 + 136, a1 + 272, a1 + 408);
      if (*(_DWORD *)v12 < *((_DWORD *)v3 + 816))
      {
        sub_20EA9A348(v3 + 408, v12);
        if (*v11 < *v10)
        {
          sub_20EA9A348(v3 + 272, v3 + 408);
          if (*v10 < *(_DWORD *)v6)
          {
            v13 = v3 + 136;
            v14 = v3 + 272;
LABEL_19:
            sub_20EA9A348(v13, v14);
            if (*((_DWORD *)v3 + 272) < *(_DWORD *)v3)
            {
              a1 = v3;
              v19 = v6;
LABEL_39:
              sub_20EA9A348(a1, v19);
            }
          }
        }
      }
      return 1;
    default:
      v15 = a1 + 272;
      v16 = *((_DWORD *)a1 + 272);
      v17 = *((_DWORD *)a1 + 544);
      if (v16 < *(_DWORD *)a1)
      {
        if (v17 >= v16)
        {
          sub_20EA9A348(a1, a1 + 136);
          if (*((_DWORD *)v3 + 544) >= *((_DWORD *)v3 + 272))
            goto LABEL_25;
          a1 = v3 + 136;
        }
        v18 = v3 + 272;
        goto LABEL_24;
      }
      if (v17 < v16)
      {
        sub_20EA9A348(a1 + 136, a1 + 272);
        if (*((_DWORD *)v3 + 272) < *(_DWORD *)v3)
        {
          a1 = v3;
          v18 = v3 + 136;
LABEL_24:
          sub_20EA9A348(a1, v18);
        }
      }
LABEL_25:
      v20 = v3 + 408;
      if (v3 + 408 != v2)
      {
        v21 = 0;
        v22 = 0;
        v76 = v2;
        do
        {
          if (*(_DWORD *)v20 < *(_DWORD *)v15)
          {
            v77 = v22;
            v78 = *v20;
            v79 = v20[1];
            v80 = *((_DWORD *)v20 + 4);
            v81 = *(_OWORD *)(v20 + 3);
            v82 = v20[5];
            v20[3] = 0;
            v20[4] = 0;
            v83 = *((_OWORD *)v20 + 3);
            v84 = v20[8];
            v20[5] = 0;
            v20[6] = 0;
            v20[7] = 0;
            v20[8] = 0;
            v23 = *(_OWORD *)(v20 + 9);
            v24 = *(_OWORD *)(v20 + 11);
            v25 = *(_OWORD *)(v20 + 15);
            v87 = *(_OWORD *)(v20 + 13);
            v88 = v25;
            v85 = v23;
            v86 = v24;
            v26 = *(_OWORD *)(v20 + 17);
            v27 = *(_OWORD *)(v20 + 19);
            v28 = *(_OWORD *)(v20 + 21);
            v92 = v20[23];
            v90 = v27;
            v91 = v28;
            v89 = v26;
            v29 = *((_OWORD *)v20 + 12);
            v30 = *((_OWORD *)v20 + 13);
            v20[24] = 0;
            v20[25] = 0;
            v31 = *((_OWORD *)v20 + 14);
            v32 = *((_OWORD *)v20 + 15);
            v94 = v30;
            v95 = v31;
            v33 = *((_OWORD *)v20 + 16);
            v34 = *((_OWORD *)v20 + 17);
            v99 = v20[36];
            v97 = v33;
            v98 = v34;
            v96 = v32;
            v35 = *(_OWORD *)(v20 + 39);
            v100 = *(_OWORD *)(v20 + 37);
            v101 = v35;
            v36 = *(_OWORD *)(v20 + 41);
            v37 = *(_OWORD *)(v20 + 43);
            v38 = *(_OWORD *)(v20 + 47);
            v104 = *(_OWORD *)(v20 + 45);
            v105 = v38;
            v102 = v36;
            v103 = v37;
            v39 = *(_OWORD *)(v20 + 49);
            v40 = *(_OWORD *)(v20 + 51);
            v41 = *(_OWORD *)(v20 + 55);
            v108 = *(_OWORD *)(v20 + 53);
            v109 = v41;
            v106 = v39;
            v107 = v40;
            v42 = *(_OWORD *)(v20 + 57);
            v43 = *(_OWORD *)(v20 + 59);
            v44 = *(_OWORD *)(v20 + 61);
            v113 = *((_DWORD *)v20 + 126);
            v111 = v43;
            v112 = v44;
            v110 = v42;
            v45 = *((_OWORD *)v20 + 32);
            v93 = v29;
            v114 = v45;
            v20[65] = 0;
            v20[64] = 0;
            v115 = v20[66];
            v116 = v20[67];
            v117 = *((_DWORD *)v20 + 136);
            v118 = v20[69];
            v20[69] = 0;
            v46 = *((_OWORD *)v20 + 35);
            v47 = *((_OWORD *)v20 + 36);
            v20[70] = 0;
            v20[71] = 0;
            v119 = v46;
            v120 = v47;
            v121 = v20[74];
            v20[73] = 0;
            v20[72] = 0;
            v20[74] = 0;
            v48 = *(_OWORD *)(v20 + 75);
            v49 = *(_OWORD *)(v20 + 77);
            v50 = *(_OWORD *)(v20 + 81);
            v124 = *(_OWORD *)(v20 + 79);
            v125 = v50;
            v122 = v48;
            v123 = v49;
            v51 = *(_OWORD *)(v20 + 83);
            v52 = *(_OWORD *)(v20 + 85);
            v53 = *(_OWORD *)(v20 + 87);
            v129 = v20[89];
            v127 = v52;
            v128 = v53;
            v126 = v51;
            v54 = *((_OWORD *)v20 + 45);
            v55 = *((_OWORD *)v20 + 46);
            v20[91] = 0;
            v20[90] = 0;
            v56 = *((_OWORD *)v20 + 47);
            v57 = *((_OWORD *)v20 + 48);
            v131 = v55;
            v132 = v56;
            v58 = *((_OWORD *)v20 + 49);
            v59 = *((_OWORD *)v20 + 50);
            v136 = v20[102];
            v134 = v58;
            v135 = v59;
            v133 = v57;
            v60 = *(_OWORD *)(v20 + 105);
            v137 = *(_OWORD *)(v20 + 103);
            v138 = v60;
            v61 = *(_OWORD *)(v20 + 107);
            v62 = *(_OWORD *)(v20 + 109);
            v63 = *(_OWORD *)(v20 + 113);
            v141 = *(_OWORD *)(v20 + 111);
            v142 = v63;
            v139 = v61;
            v140 = v62;
            v64 = *(_OWORD *)(v20 + 115);
            v65 = *(_OWORD *)(v20 + 117);
            v66 = *(_OWORD *)(v20 + 121);
            v145 = *(_OWORD *)(v20 + 119);
            v146 = v66;
            v143 = v64;
            v144 = v65;
            v67 = *(_OWORD *)(v20 + 123);
            v68 = *(_OWORD *)(v20 + 125);
            v69 = *(_OWORD *)(v20 + 127);
            v150 = *((_DWORD *)v20 + 258);
            v148 = v68;
            v149 = v69;
            v147 = v67;
            v70 = *((_OWORD *)v20 + 65);
            v130 = v54;
            v151 = v70;
            v20[131] = 0;
            v20[130] = 0;
            v152[0] = *((_OWORD *)v20 + 66);
            v71 = v21;
            *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)((char *)v20 + 1065);
            while (1)
            {
              v72 = (char *)v3 + v71;
              *(uint64_t *)((char *)v3 + v71 + 3264) = *(uint64_t *)((char *)v3 + v71 + 2176);
              v73 = (uint64_t *)((char *)v3 + v71 + 2184);
              sub_20E9DA564((uint64_t)v3 + v71 + 3272, v73);
              *((_QWORD *)v72 + 474) = *((_QWORD *)v72 + 338);
              sub_20E9DA564((uint64_t)(v72 + 3800), (uint64_t *)v72 + 339);
              *((_OWORD *)v72 + 270) = *((_OWORD *)v72 + 202);
              *(_OWORD *)(v72 + 4329) = *(_OWORD *)(v72 + 3241);
              if (v71 == -2176)
                break;
              v71 -= 1088;
              if (v78 >= *((_DWORD *)v72 + 272))
              {
                v74 = (uint64_t *)((char *)v3 + v71 + 3264);
                goto LABEL_34;
              }
            }
            v74 = v3;
LABEL_34:
            *v74 = v78;
            sub_20E9DA564((uint64_t)v73, &v79);
            v74[66] = v115;
            sub_20E9DA564((uint64_t)(v72 + 2712), &v116);
            *((_OWORD *)v72 + 202) = v152[0];
            *(_OWORD *)(v72 + 3241) = *(_OWORD *)((char *)v152 + 9);
            ++v22;
            if (v77 == 7)
            {
              v4 = v20 + 136 == v76;
              sub_20E86A6B8(&v78);
              return v4;
            }
            sub_20E86A6B8(&v78);
            v2 = v76;
          }
          v15 = v20;
          v21 += 1088;
          v20 += 136;
        }
        while (v20 != v2);
      }
      return 1;
  }
}

_QWORD *sub_20EA9A348(uint64_t *a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int v128;
  __int128 v129;
  _OWORD v130[2];

  v5 = a1[1];
  v4 = a1 + 1;
  v56 = *a1;
  v6 = v56;
  v57 = v5;
  v58 = *((_DWORD *)a1 + 4);
  v59 = *(_OWORD *)(a1 + 3);
  v60 = a1[5];
  a1[3] = 0;
  a1[4] = 0;
  v61 = *((_OWORD *)a1 + 3);
  v62 = a1[8];
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v7 = *(_OWORD *)(a1 + 9);
  v8 = *(_OWORD *)(a1 + 11);
  v9 = *(_OWORD *)(a1 + 15);
  v65 = *(_OWORD *)(a1 + 13);
  v66 = v9;
  v63 = v7;
  v64 = v8;
  v10 = *(_OWORD *)(a1 + 17);
  v11 = *(_OWORD *)(a1 + 19);
  v12 = *(_OWORD *)(a1 + 21);
  v70 = a1[23];
  v69 = v12;
  v68 = v11;
  v67 = v10;
  v13 = *((_OWORD *)a1 + 12);
  v14 = *((_OWORD *)a1 + 13);
  a1[24] = 0;
  a1[25] = 0;
  v71 = v13;
  v72 = v14;
  v15 = *((_OWORD *)a1 + 14);
  v16 = *((_OWORD *)a1 + 15);
  v17 = *((_OWORD *)a1 + 16);
  v18 = *((_OWORD *)a1 + 17);
  v77 = a1[36];
  v76 = v18;
  v75 = v17;
  v73 = v15;
  v74 = v16;
  v19 = v4[19];
  v78 = v4[18];
  v79 = v19;
  v20 = v4[20];
  v21 = v4[21];
  v22 = v4[23];
  v82 = v4[22];
  v83 = v22;
  v80 = v20;
  v81 = v21;
  v23 = v4[24];
  v24 = v4[25];
  v25 = v4[27];
  v86 = v4[26];
  v87 = v25;
  v84 = v23;
  v85 = v24;
  v26 = *((_DWORD *)a1 + 126);
  v27 = v4[28];
  v28 = v4[30];
  v89 = v4[29];
  v90 = v28;
  v88 = v27;
  v91 = v26;
  v92 = *((_OWORD *)a1 + 32);
  a1[65] = 0;
  a1[64] = 0;
  v93 = a1[66];
  v94 = a1[67];
  v95 = *((_DWORD *)a1 + 136);
  v96 = a1[69];
  a1[69] = 0;
  v29 = *((_OWORD *)a1 + 35);
  v30 = *((_OWORD *)a1 + 36);
  a1[70] = 0;
  a1[71] = 0;
  v97 = v29;
  v98 = v30;
  v99 = a1[74];
  a1[73] = 0;
  a1[72] = 0;
  a1[74] = 0;
  v31 = *(_OWORD *)(a1 + 75);
  v32 = *(_OWORD *)(a1 + 77);
  v33 = *(_OWORD *)(a1 + 81);
  v102 = *(_OWORD *)(a1 + 79);
  v103 = v33;
  v100 = v31;
  v101 = v32;
  v34 = a1[89];
  v35 = *(_OWORD *)(a1 + 83);
  v36 = *(_OWORD *)(a1 + 87);
  v105 = *(_OWORD *)(a1 + 85);
  v106 = v36;
  v104 = v35;
  v107 = v34;
  v37 = *((_OWORD *)a1 + 45);
  v38 = *((_OWORD *)a1 + 46);
  a1[91] = 0;
  a1[90] = 0;
  v108 = v37;
  v109 = v38;
  v39 = *((_OWORD *)a1 + 47);
  v40 = *((_OWORD *)a1 + 48);
  v41 = *((_OWORD *)a1 + 49);
  v42 = *((_OWORD *)a1 + 50);
  v114 = a1[102];
  v113 = v42;
  v112 = v41;
  v110 = v39;
  v111 = v40;
  v43 = *(_OWORD *)(a1 + 105);
  v115 = *(_OWORD *)(a1 + 103);
  v116 = v43;
  v44 = *(_OWORD *)(a1 + 107);
  v45 = *(_OWORD *)(a1 + 109);
  v46 = *(_OWORD *)(a1 + 113);
  v119 = *(_OWORD *)(a1 + 111);
  v120 = v46;
  v117 = v44;
  v118 = v45;
  v47 = *(_OWORD *)(a1 + 115);
  v48 = *(_OWORD *)(a1 + 117);
  v49 = *(_OWORD *)(a1 + 121);
  v123 = *(_OWORD *)(a1 + 119);
  v124 = v49;
  v121 = v47;
  v122 = v48;
  LODWORD(v34) = *((_DWORD *)a1 + 258);
  v50 = *(_OWORD *)(a1 + 123);
  v51 = *(_OWORD *)(a1 + 127);
  v126 = *(_OWORD *)(a1 + 125);
  v127 = v51;
  v125 = v50;
  v128 = v34;
  v129 = *((_OWORD *)a1 + 65);
  a1[131] = 0;
  a1[130] = 0;
  *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)((char *)a1 + 1065);
  v52 = *((_OWORD *)a1 + 66);
  *a1 = *a2;
  v53 = (uint64_t)(a2 + 1);
  v130[0] = v52;
  sub_20E9DA564((uint64_t)v4, a2 + 1);
  a1[66] = a2[66];
  sub_20E9DA564((uint64_t)(a1 + 67), a2 + 67);
  v54 = *((_OWORD *)a2 + 66);
  *(_OWORD *)((char *)a1 + 1065) = *(_OWORD *)((char *)a2 + 1065);
  *((_OWORD *)a1 + 66) = v54;
  *a2 = v6;
  sub_20E9DA564(v53, &v57);
  a2[66] = v93;
  sub_20E9DA564((uint64_t)(a2 + 67), &v94);
  *((_OWORD *)a2 + 66) = v130[0];
  *(_OWORD *)((char *)a2 + 1065) = *(_OWORD *)((char *)v130 + 9);
  return sub_20E86A6B8(&v56);
}

uint64_t *sub_20EA9A65C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;

  v7 = result;
  v8 = *(_DWORD *)a2;
  v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 >= *(_DWORD *)result)
  {
    if (v9 < v8)
    {
      result = sub_20EA9A348(a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)v7)
      {
        result = v7;
        v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      v10 = a3;
LABEL_9:
      result = sub_20EA9A348(result, v10);
      goto LABEL_10;
    }
    result = sub_20EA9A348(result, a2);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      result = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    result = sub_20EA9A348(a3, a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      result = sub_20EA9A348(a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)v7)
        return sub_20EA9A348(v7, a2);
    }
  }
  return result;
}

_QWORD *sub_20EA9A760(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  int v137;
  __int128 v138;
  _OWORD v139[2];
  uint64_t v140;
  uint64_t v141;

  v5 = a2 - 2;
  if (a2 < 2)
    return result;
  v140 = v3;
  v141 = v4;
  v6 = a3;
  v7 = result;
  v64 = v5 >> 1;
  if ((uint64_t)(v5 >> 1) < (uint64_t)(0xF0F0F0F0F0F0F0F1 * (((char *)a3 - (char *)result) >> 6)))
    return result;
  v9 = (0xE1E1E1E1E1E1E1E2 * (((char *)a3 - (char *)result) >> 6)) | 1;
  v10 = &result[136 * v9];
  if ((uint64_t)(0xE1E1E1E1E1E1E1E2 * (((char *)a3 - (char *)result) >> 6) + 2) >= a2)
  {
    if (*(_DWORD *)v10 < *(_DWORD *)a3)
      return result;
  }
  else
  {
    v11 = *(_DWORD *)v10;
    v12 = *((_DWORD *)v10 + 272);
    if (*(_DWORD *)v10 <= v12)
      v11 = *((_DWORD *)v10 + 272);
    if (*(_DWORD *)v10 < v12)
    {
      v10 += 136;
      v9 = 0xE1E1E1E1E1E1E1E2 * (((char *)a3 - (char *)result) >> 6) + 2;
    }
    if (v11 < *(_DWORD *)a3)
      return result;
  }
  v13 = a3[1];
  v65 = *a3;
  v66 = v13;
  v67 = *((_DWORD *)a3 + 4);
  v68 = *(_OWORD *)(a3 + 3);
  v69 = a3[5];
  a3[3] = 0;
  a3[4] = 0;
  v70 = *((_OWORD *)a3 + 3);
  v71 = a3[8];
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0;
  v14 = *(_OWORD *)(a3 + 9);
  v15 = *(_OWORD *)(a3 + 11);
  v16 = *(_OWORD *)(a3 + 15);
  v74 = *(_OWORD *)(a3 + 13);
  v75 = v16;
  v72 = v14;
  v73 = v15;
  v17 = *(_OWORD *)(a3 + 17);
  v18 = *(_OWORD *)(a3 + 19);
  v19 = *(_OWORD *)(a3 + 21);
  v79 = a3[23];
  v78 = v19;
  v77 = v18;
  v76 = v17;
  v20 = *((_OWORD *)a3 + 12);
  v21 = *((_OWORD *)a3 + 13);
  a3[24] = 0;
  a3[25] = 0;
  v80 = v20;
  v81 = v21;
  v22 = *((_OWORD *)a3 + 14);
  v23 = *((_OWORD *)a3 + 15);
  v24 = *((_OWORD *)a3 + 16);
  v25 = *((_OWORD *)a3 + 17);
  v86 = a3[36];
  v85 = v25;
  v84 = v24;
  v82 = v22;
  v83 = v23;
  v26 = *(_OWORD *)(a3 + 39);
  v87 = *(_OWORD *)(a3 + 37);
  v88 = v26;
  v27 = *(_OWORD *)(a3 + 41);
  v28 = *(_OWORD *)(a3 + 43);
  v29 = *(_OWORD *)(a3 + 47);
  v91 = *(_OWORD *)(a3 + 45);
  v92 = v29;
  v89 = v27;
  v90 = v28;
  v30 = *(_OWORD *)(a3 + 49);
  v31 = *(_OWORD *)(a3 + 51);
  v32 = *(_OWORD *)(a3 + 55);
  v95 = *(_OWORD *)(a3 + 53);
  v96 = v32;
  v93 = v30;
  v94 = v31;
  v33 = *((_DWORD *)a3 + 126);
  v34 = *(_OWORD *)(a3 + 57);
  v35 = *(_OWORD *)(a3 + 61);
  v98 = *(_OWORD *)(a3 + 59);
  v99 = v35;
  v97 = v34;
  v100 = v33;
  v101 = *((_OWORD *)a3 + 32);
  a3[65] = 0;
  a3[64] = 0;
  v102 = a3[66];
  v103 = a3[67];
  v104 = *((_DWORD *)a3 + 136);
  v105 = a3[69];
  a3[69] = 0;
  v36 = *((_OWORD *)a3 + 35);
  v37 = *((_OWORD *)a3 + 36);
  a3[70] = 0;
  a3[71] = 0;
  v106 = v36;
  v107 = v37;
  v108 = a3[74];
  a3[73] = 0;
  a3[72] = 0;
  a3[74] = 0;
  v38 = *(_OWORD *)(a3 + 75);
  v39 = *(_OWORD *)(a3 + 77);
  v40 = *(_OWORD *)(a3 + 81);
  v111 = *(_OWORD *)(a3 + 79);
  v112 = v40;
  v109 = v38;
  v110 = v39;
  v41 = a3[89];
  v42 = *(_OWORD *)(a3 + 83);
  v43 = *(_OWORD *)(a3 + 87);
  v114 = *(_OWORD *)(a3 + 85);
  v115 = v43;
  v113 = v42;
  v116 = v41;
  v44 = *((_OWORD *)a3 + 45);
  v45 = *((_OWORD *)a3 + 46);
  a3[91] = 0;
  a3[90] = 0;
  v117 = v44;
  v118 = v45;
  v46 = *((_OWORD *)a3 + 47);
  v47 = *((_OWORD *)a3 + 48);
  v48 = *((_OWORD *)a3 + 49);
  v49 = *((_OWORD *)a3 + 50);
  v123 = a3[102];
  v122 = v49;
  v121 = v48;
  v119 = v46;
  v120 = v47;
  v50 = *(_OWORD *)(a3 + 105);
  v124 = *(_OWORD *)(a3 + 103);
  v125 = v50;
  v51 = *(_OWORD *)(a3 + 107);
  v52 = *(_OWORD *)(a3 + 109);
  v53 = *(_OWORD *)(a3 + 113);
  v128 = *(_OWORD *)(a3 + 111);
  v129 = v53;
  v126 = v51;
  v127 = v52;
  v54 = *(_OWORD *)(a3 + 115);
  v55 = *(_OWORD *)(a3 + 117);
  v56 = *(_OWORD *)(a3 + 121);
  v132 = *(_OWORD *)(a3 + 119);
  v133 = v56;
  v130 = v54;
  v131 = v55;
  LODWORD(v41) = *((_DWORD *)a3 + 258);
  v57 = *(_OWORD *)(a3 + 123);
  v58 = *(_OWORD *)(a3 + 127);
  v135 = *(_OWORD *)(a3 + 125);
  v136 = v58;
  v134 = v57;
  v137 = v41;
  v138 = *((_OWORD *)a3 + 65);
  a3[131] = 0;
  a3[130] = 0;
  *(_OWORD *)((char *)v139 + 9) = *(_OWORD *)((char *)a3 + 1065);
  v139[0] = *((_OWORD *)a3 + 66);
  while (1)
  {
    v61 = v10;
    *v6 = *v10;
    sub_20E9DA564((uint64_t)(v6 + 1), v10 + 1);
    v6[66] = v61[66];
    sub_20E9DA564((uint64_t)(v6 + 67), v61 + 67);
    v62 = *(_OWORD *)((char *)v61 + 1065);
    *((_OWORD *)v6 + 66) = *((_OWORD *)v61 + 66);
    *(_OWORD *)((char *)v6 + 1065) = v62;
    if (v64 < v9)
      break;
    v10 = &v7[136 * ((2 * v9) | 1)];
    if (2 * v9 + 2 < a2)
    {
      v59 = *(_DWORD *)v10;
      v60 = *((_DWORD *)v10 + 272);
      if (*(_DWORD *)v10 <= v60)
        v59 = *((_DWORD *)v10 + 272);
      if (*(_DWORD *)v10 >= v60)
      {
        v9 = (2 * v9) | 1;
      }
      else
      {
        v10 += 136;
        v9 = 2 * v9 + 2;
      }
      v6 = v61;
      if (v59 < v65)
        break;
    }
    else
    {
      v9 = (2 * v9) | 1;
      v6 = v61;
      if (*(_DWORD *)v10 < v65)
        break;
    }
  }
  *v61 = v65;
  sub_20E9DA564((uint64_t)(v61 + 1), &v66);
  v61[66] = v102;
  sub_20E9DA564((uint64_t)(v61 + 67), &v103);
  v63 = *(_OWORD *)((char *)v139 + 9);
  *((_OWORD *)v61 + 66) = v139[0];
  *(_OWORD *)((char *)v61 + 1065) = v63;
  return sub_20E86A6B8(&v65);
}

uint64_t *sub_20EA9AB98(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_20E867F44();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_20E877A38();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_20EA9AD08(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EA9B27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EA9B2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9B2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EA9B30C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EA9B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EA9B8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9B8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EA9B910(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EA9BE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EA9BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9BEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EA9BF14(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EA9C488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EA9C4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9C4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EA9C518(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EA9CA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EA9CAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9CAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EA9CB1C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EA9D090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EA9D0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9D0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EA9D120(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EA9D4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9D4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9D4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EA9D50C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EA9D89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA9D8D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EA9D8FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA9D920(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    *v1 = &off_24C9C2508;
    v2 = v1[7];
    if (v2)
      MEMORY[0x212BC6368](v2, 0x1000C808070C27FLL);
    v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EA9D9A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio8geometry22FreeformLensDistortionIdEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio8geometry22FreeformLensDistortionIdEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio8geometry22FreeformLensDistortionIdEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio8geometry22FreeformLensDistortionIdEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EA9DA18(std::string *this, _QWORD *a2, _QWORD *a3)
{
  _BOOL4 v6;
  int v7;
  int v8;
  std::string::value_type *v9;
  std::string::value_type v10;
  uint64_t v11;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    if (!a2)
    {
      if (!a3)
        return;
      a2 = 0;
      if (a3[3] != a3[4])
        goto LABEL_20;
      v6 = 1;
      goto LABEL_17;
    }
    if (a2[3] != a2[4])
    {
      if (!a3)
        goto LABEL_20;
      if (a3[3] != a3[4])
        return;
      v6 = 0;
      goto LABEL_17;
    }
    v7 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    v6 = v7 == -1;
    if (v7 == -1)
      a2 = 0;
    if (a3)
      break;
    if (v7 == -1)
      return;
    a3 = 0;
    v9 = (std::string::value_type *)a2[3];
    if (v9 == (std::string::value_type *)a2[4])
    {
LABEL_24:
      v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
      goto LABEL_25;
    }
LABEL_21:
    v10 = *v9;
LABEL_25:
    std::string::push_back(this, v10);
    v11 = a2[3];
    if (v11 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v11 + 1;
  }
  if (a3[3] != a3[4])
  {
    if (v7 != -1)
      return;
LABEL_20:
    v9 = (std::string::value_type *)a2[3];
    if (v9 == (std::string::value_type *)a2[4])
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_17:
  v8 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  if (v8 == -1)
    a3 = 0;
  if (v6 != (v8 == -1))
    goto LABEL_20;
}

void sub_20EA9DB60(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_20EA9DB7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EA9DB90(double *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2568;
  *(_QWORD *)(v2 + 8) = &unk_24C9C25E0;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2608;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v9 = (uint64_t)off_24C9C29F0 + 1;
  v10[0] = a1;
  sub_20EA9FD18((uint64_t *)(v2 + 120), &v9);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v10, v10, 2);
    }
    v9 = 0;
  }
  v5 = (_QWORD *)operator new();
  *v5 = &off_24C9C28E8;
  v5[1] = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = (uint64_t)v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20EA9FE98(a1);
  v7 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v2 + 184) = v12;
  return v2;
}

void sub_20EA9DCDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EA9DE50((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA9DCF0(unsigned int *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2A50;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2AC8;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2AF0;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v9 = (uint64_t)off_24C9C2C58 + 1;
  v10[0] = a1;
  sub_20EAA1358((uint64_t *)(v2 + 120), &v9);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v10, v10, 2);
    }
    v9 = 0;
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9C2C20;
  *(_DWORD *)(v5 + 8) = *a1;
  v6 = *v3;
  *v3 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20E9F6A6C(a1);
  v7 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v2 + 184) = v12;
  return v2;
}

void sub_20EA9DE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EA9FF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA9DE50(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_20EA9DEA0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EA9E3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EA9E4B4(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EA9E4D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EA9E4F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EA9E4FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EA9E504(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EA9E55C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  std::runtime_error v11;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if ((const char *)result == v6 || (result = strcmp((const char *)result, v6), !(_DWORD)result))
  {
    v7 = (_QWORD *)(*a2 + 8);
    v8 = *(_QWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
LABEL_9:
    *v8 = *v7;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 120);
  v10 = nullsub_213;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    if (!v9)
    {
      std::runtime_error::runtime_error(&v11, "call to empty boost::function");
      v11.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v11);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v7);
  }
  return result;
}

void sub_20EA9E658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA9E66C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2568;
  *(_QWORD *)(a1 + 8) = &unk_24C9C25E0;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2608;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EA9EA34(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EA9EA34(a1);
}

void sub_20EA9E6D4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2568;
  *(_QWORD *)(a1 + 8) = &unk_24C9C25E0;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2608;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EA9EA34(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EA9E750(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EA9EB00(a2, a3);
  }
}

uint64_t sub_20EA9E7CC()
{
  return MEMORY[0x24BEDB780];
}

uint64_t sub_20EA9E7D8(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EA9E7E0()
{
  return MEMORY[0x24BEDB780];
}

uint64_t sub_20EA9E7EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2568;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C25E0;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2608;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EA9EA34(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EA9EA34(v2);
}

void sub_20EA9E85C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2568;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C25E0;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2608;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EA9EA34(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EA9E8E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2568;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C25E0;
  *(_QWORD *)a1 = &unk_24C9C2608;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EA9EA34(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EA9EA34(v2);
}

void sub_20EA9E950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2568;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C25E0;
  *(_QWORD *)a1 = &unk_24C9C2608;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EA9EA34(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EA9E9D4(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EA9E9E0(uint64_t a1)
{
  sub_20EA9EA34(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA9EA04(uint64_t a1)
{
  return sub_20EA9EA34(a1 - 8);
}

void sub_20EA9EA0C(uint64_t a1)
{
  sub_20EA9EA34(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA9EA34(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9C26A0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2710;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EA9EB00(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  unsigned __int8 *p_dst;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::bad_cast v12;
  void *v13;
  uint64_t v14;
  __int128 __dst;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v16 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  v6 = HIBYTE(v16);
  if (v16 >= 0)
    p_dst = (unsigned __int8 *)&__dst;
  else
    p_dst = (unsigned __int8 *)__dst;
  if (v16 < 0)
    v6 = *((_QWORD *)&__dst + 1);
  v17 = 0;
  v18 = p_dst;
  v19 = &p_dst[v6];
  if (!sub_20EA9EEEC(p_dst, &p_dst[v6], (double *)&v17, "NAN", "nan", "INFINITY", "infinity", 0x28u, 0x29u))
  {
    if (!sub_20EA9ED70((uint64_t *)&v18, (uint64_t)&v17)
      || (v8 = *(v19 - 1) - 43, v8 <= 0x3A) && ((1 << v8) & 0x400000004000005) != 0)
    {
      std::bad_cast::bad_cast(&v12);
      v12.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
      v13 = &unk_24C9AB9F0;
      v14 = MEMORY[0x24BEDB780];
      sub_20EA9F254((uint64_t)&v12);
    }
  }
  v9 = v17;
  v10 = (_QWORD *)operator new();
  *v10 = &off_24C9C28E8;
  v10[1] = v9;
  v11 = *a1;
  *a1 = (uint64_t)v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__dst);
}

void sub_20EA9ECA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  __break(1u);
}

void sub_20EA9ECEC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20EA9ED04);
}

void sub_20EA9ED20(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20EA9F7F4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9C2920, (void (*)(void *))sub_20EA9F85C);
}

void sub_20EA9ED5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20EA9ED70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &off_24C9C2750;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v11[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 17;
  v8 = (_QWORD *)MEMORY[0x212BC5BDC](v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_20EA9EE94(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t sub_20EA9EEEC(unsigned __int8 *a1, unsigned __int8 *a2, double *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 a8, unsigned __int8 a9)
{
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  int64_t v12;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  double v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  double v28;

  if (a1 == a2)
    return 0;
  v9 = *a1;
  v10 = v9 == 45 || v9 == 43;
  v11 = v10 ? a1 + 1 : a1;
  v12 = a2 - v11;
  if (a2 - v11 < 3)
    return 0;
  v14 = *v11;
  if (v14 == *a5 || v14 == *a4)
  {
    v15 = v11[1];
    if (v15 == a5[1] || v15 == a4[1])
    {
      v16 = v11[2];
      if (v16 == a5[2] || v16 == a4[2])
      {
        v17 = v11 + 3;
        if (v17 == a2 || a2 - v17 >= 2 && *v17 == a8 && *(a2 - 1) == a9)
        {
          v18 = NAN;
          if (v9 == 45)
            v18 = NAN;
          *a3 = v18;
          return 1;
        }
        return 0;
      }
    }
  }
  if (v12 == 8)
  {
    if (v14 != *a7 && v14 != *a6)
      return 0;
    v22 = v11[1];
    if (v22 != a7[1] && v22 != a6[1])
      return 0;
    v23 = v11[2];
    if (v23 != a7[2] && v23 != a6[2])
      return 0;
    v24 = v11[3];
    if (v24 != a7[3] && v24 != a6[3])
      return 0;
    v25 = v11[4];
    if (v25 != a7[4] && v25 != a6[4])
      return 0;
    v26 = v11[5];
    if (v26 != a7[5] && v26 != a6[5])
      return 0;
    v27 = v11[6];
    if (v27 != a7[6] && v27 != a6[6])
      return 0;
    v20 = v11[7];
    if (v20 == a7[7])
      goto LABEL_48;
    v21 = a6[7];
  }
  else
  {
    if (v12 != 3 || v14 != *a7 && v14 != *a6)
      return 0;
    v19 = v11[1];
    if (v19 != a7[1] && v19 != a6[1])
      return 0;
    v20 = v11[2];
    if (v20 == a7[2])
      goto LABEL_48;
    v21 = a6[2];
  }
  if (v20 != v21)
    return 0;
LABEL_48:
  v28 = INFINITY;
  if (v9 == 45)
    v28 = -INFINITY;
  *a3 = v28;
  return 1;
}

_QWORD *sub_20EA9F124(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

void sub_20EA9F138()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x212BC6398);
}

double sub_20EA9F15C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  if ((a4 & 0x10) != 0)
  {
    v7 = -1;
    goto LABEL_19;
  }
  v5 = a1[2];
  v6 = a1[4] - v5;
  if (!a3)
  {
    v7 = -1;
    if (a2 < 0 || v6 < a2)
      goto LABEL_19;
    v9 = v5 + a2;
LABEL_15:
    v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    v7 = -1;
    v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6)
      goto LABEL_19;
    v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    v9 = a1[3];
    goto LABEL_18;
  }
  v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    v8 = a1[4];
    v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    v7 = v9 - v5;
  }
LABEL_19:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v7;
  return result;
}

double sub_20EA9F20C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if ((a3 & 0x10) == 0)
  {
    v4 = a1[2];
    v5 = *(_QWORD *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      v6 = v4 + v5;
      v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = -1;
  return result;
}

void sub_20EA9F254(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_20EA9F2A8(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9C27F0, (void (*)(void *))sub_20EA9F2F8);
}

void sub_20EA9F290(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20EA9F2A8(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_24C9ABB08;
  a1->n128_u64[1] = (unint64_t)&unk_24C9C28C0;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_24C9C2848;
  a1->n128_u64[1] = (unint64_t)&unk_24C9C2878;
  a1[2].n128_u64[0] = (unint64_t)&unk_24C9C28A0;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::exception *sub_20EA9F2F8(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

uint64_t sub_20EA9F350(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  *(_QWORD *)(v2 + 8) = &unk_24C9C28C0;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &unk_24C9C2848;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2878;
  *(_QWORD *)(v2 + 32) = &unk_24C9C28A0;
  sub_20E86E24C(v2 + 32, a1 + 32);
  return v2;
}

void sub_20EA9F424(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C405FFD4875);
  _Unwind_Resume(a1);
}

void sub_20EA9F450(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20EA9F46C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_20EA9F6CC((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9C27F0, (void (*)(void *))sub_20EA9F2F8);
}

void sub_20EA9F4A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EA9F4BC(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA9F524(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
}

void sub_20EA9F574(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
  JUMPOUT(0x212BC6398);
}

const char *sub_20EA9F5E0()
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void sub_20EA9F5EC(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
}

void sub_20EA9F63C(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
  JUMPOUT(0x212BC6398);
}

void sub_20EA9F6A8(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA9F6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  *(_QWORD *)(a1 + 8) = &unk_24C9C28C0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_24C9C2848;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2878;
  *(_QWORD *)(a1 + 32) = &unk_24C9C28A0;
  return a1;
}

void sub_20EA9F774(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EA9F78C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA9F7A0()
{
  return MEMORY[0x24BEDB780];
}

double sub_20EA9F7AC(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24C9C28E8;
  result = *(double *)(a1 + 8);
  *(double *)(v2 + 8) = result;
  return result;
}

uint64_t sub_20EA9F7F4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &unk_24C9C2978;
  *(_QWORD *)(a1 + 8) = &unk_24C9C29A8;
  *(_QWORD *)(a1 + 136) = &unk_24C9C29E0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t sub_20EA9F85C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 8) = off_24C9AE570;
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_8:
    operator delete(*(void **)(a1 + 80));
    goto LABEL_6;
  }
  if (*(char *)(a1 + 103) < 0)
    goto LABEL_8;
LABEL_6:
  sub_20E8AE92C(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_20E866B68(a1 + 32, *(_QWORD *)(a1 + 40));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

uint64_t sub_20EA9F90C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20EA9FC08(v2, a1);
  sub_20E86E24C(v2 + 136, a1 + 136);
  return v2;
}

void sub_20EA9F95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20EA9F978(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10F3C40A4C9CEECLL);
  _Unwind_Resume(a1);
}

void sub_20EA9F99C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0xB0uLL);
  sub_20EA9FC08((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9C2920, (void (*)(void *))sub_20EA9F85C);
}

void sub_20EA9F9D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EA9F9EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 8) = off_24C9AE570;
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_6:
    sub_20E8AE92C(a1 + 56, *(_QWORD **)(a1 + 64));
    sub_20E866B68(a1 + 32, *(_QWORD *)(a1 + 40));
    std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
    JUMPOUT(0x212BC6398);
  }
  operator delete(*(void **)(a1 + 80));
  goto LABEL_6;
}

void sub_20EA9FAAC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 128) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = off_24C9AE570;
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_8:
    operator delete(*(void **)(a1 + 72));
    goto LABEL_6;
  }
  if (*(char *)(a1 + 95) < 0)
    goto LABEL_8;
LABEL_6:
  sub_20E8AE92C(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_20E866B68(a1 + 24, *(_QWORD *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_20EA9FB50(uint64_t a1)
{
  sub_20EA9F9EC(a1 - 8);
}

void sub_20EA9FB58(std::logic_error *a1)
{
  const char *imp;

  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  a1[-8].__vftable = (std::logic_error_vtbl *)off_24C9AE570;
  if (SHIBYTE(a1[-1].__vftable) < 0)
  {
    operator delete(a1[-2].__vftable);
    if ((SHIBYTE(a1[-3].__imp_.__imp_) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_8:
    operator delete((void *)a1[-4].__imp_.__imp_);
    goto LABEL_6;
  }
  if (SHIBYTE(a1[-3].__imp_.__imp_) < 0)
    goto LABEL_8;
LABEL_6:
  sub_20E8AE92C((uint64_t)&a1[-5], (_QWORD *)a1[-5].__imp_.__imp_);
  sub_20E866B68((uint64_t)&a1[-7].__imp_, (uint64_t)a1[-6].__vftable);
  std::logic_error::~logic_error(a1 - 8);
}

void sub_20EA9FC00(uint64_t a1)
{
  sub_20EA9F9EC(a1 - 136);
}

uint64_t sub_20EA9FC08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  sub_20E8AF514(a1 + 8, a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 8) = &unk_24C9AE500;
  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 144) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)a1 = &unk_24C9C2978;
  *(_QWORD *)(a1 + 8) = &unk_24C9C29A8;
  *(_QWORD *)(a1 + 136) = &unk_24C9C29E0;
  return a1;
}

void sub_20EA9FCBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::logic_error *v2;

  *(_QWORD *)(v1 + 8) = off_24C9AE570;
  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  sub_20E8AE92C(v1 + 56, *(_QWORD **)(v1 + 64));
  sub_20E866B68(v1 + 32, *(_QWORD *)(v1 + 40));
  std::logic_error::~logic_error(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA9FD18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EA9FDB8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EA9FDC8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EA9FDDC(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C2A00;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIdEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKdE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIdEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKdE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

double sub_20EA9FE88(_QWORD **a1, double *a2)
{
  double result;

  result = *a2;
  **a1 = *(_QWORD *)a2;
  return result;
}

uint64_t sub_20EA9FE98(double *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20E87876C((uint64_t)v5, (uint64_t)v2, a1);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C2A28[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C2A10[v3])(v5, v2);
  return result;
}

void sub_20EA9FF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9C2A10[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA9FF68(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_20EA9FFB8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EAA04C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EAA05CC(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EAA05EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EAA060C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EAA0614(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EAA061C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EAA0674(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  std::runtime_error v11;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if ((const char *)result == v6 || (result = strcmp((const char *)result, v6), !(_DWORD)result))
  {
    v7 = (_DWORD *)(*a2 + 8);
    v8 = *(_DWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = *(_DWORD **)(a1 + 16);
  if (v8)
LABEL_9:
    *v8 = *v7;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 120);
  v10 = nullsub_215;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    if (!v9)
    {
      std::runtime_error::runtime_error(&v11, "call to empty boost::function");
      v11.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v11);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v7);
  }
  return result;
}

void sub_20EAA0770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA0784(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2A50;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2AC8;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2AF0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EAA0B4C(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EAA0B4C(a1);
}

void sub_20EAA07EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2A50;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2AC8;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2AF0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EAA0B4C(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EAA0868(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EAA0C18(a2, a3);
  }
}

uint64_t sub_20EAA08E4()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t sub_20EAA08F0(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EAA08F8()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t sub_20EAA0904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2A50;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C2AC8;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2AF0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EAA0B4C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA0B4C(v2);
}

void sub_20EAA0974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2A50;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C2AC8;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2AF0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EAA0B4C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA09F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2A50;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C2AC8;
  *(_QWORD *)a1 = &unk_24C9C2AF0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EAA0B4C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA0B4C(v2);
}

void sub_20EAA0A68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2A50;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C2AC8;
  *(_QWORD *)a1 = &unk_24C9C2AF0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EAA0B4C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA0AEC(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EAA0AF8(uint64_t a1)
{
  sub_20EAA0B4C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA0B1C(uint64_t a1)
{
  return sub_20EAA0B4C(a1 - 8);
}

void sub_20EAA0B24(uint64_t a1)
{
  sub_20EAA0B4C(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA0B4C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9C2B88;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2BF8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EAA0C18(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  unsigned __int8 *p_dst;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  __int128 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::bad_cast v15[16];
  __int128 __dst;
  uint64_t v17;
  int v18;
  char v19[4];
  int v20;
  int *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v17 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  v18 = 0;
  p_dst = (unsigned __int8 *)&__dst;
  v7 = *((_QWORD *)&__dst + 1);
  if (v17 >= 0)
    v7 = HIBYTE(v17);
  else
    p_dst = (unsigned __int8 *)__dst;
  if (!v7)
  {
LABEL_22:
    std::bad_cast::bad_cast(v15);
    v15[0].__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v15[1].__vftable = (std::bad_cast_vtbl *)&unk_24C9AB9F0;
    v15[2].__vftable = (std::bad_cast_vtbl *)MEMORY[0x24BEDB7A0];
    sub_20EA9F254((uint64_t)v15);
  }
  v8 = &p_dst[v7];
  v9 = *p_dst;
  if (v9 == 45 || v9 == 43)
  {
    v10 = &__dst;
    if (v17 < 0)
      v10 = (__int128 *)__dst;
    p_dst = (unsigned __int8 *)v10 + 1;
  }
  v19[0] = 0;
  v20 = 1;
  v21 = &v18;
  v22 = p_dst;
  v23 = v8;
  v11 = sub_20EAA0E1C((uint64_t)v19);
  if (v9 == 45)
  {
    v12 = -v18;
    v18 = -v18;
    if ((v11 & 1) == 0)
      goto LABEL_22;
  }
  else
  {
    if (!v11)
      goto LABEL_22;
    v12 = v18;
  }
  v13 = operator new();
  *(_QWORD *)v13 = &off_24C9C2C20;
  *(_DWORD *)(v13 + 8) = v12;
  v14 = *a1;
  *a1 = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__dst);
}

void sub_20EAA0DA0()
{
  __break(1u);
}

void sub_20EAA0DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20EAA0E00);
}

uint64_t sub_20EAA0E1C(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  const std::locale *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  const std::locale::facet *v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  char v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned __int8 v23;
  _BYTE *p_p;
  char v25;
  unint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  _BYTE *v37;
  char v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  void *__p;
  uint64_t v47;
  unsigned __int8 v48;
  std::locale v49;

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v1 - 1;
  v2 = *(_DWORD **)(a1 + 8);
  *v2 = 0;
  if (*(_QWORD *)(a1 + 16) > (unint64_t)(v1 - 1))
    return 0;
  v3 = *(unsigned __int8 *)(v1 - 1);
  if ((v3 - 58) < 0xFFFFFFF6)
    return 0;
  *v2 = v3 - 48;
  *(_QWORD *)(a1 + 24) = v1 - 2;
  MEMORY[0x212BC61AC](&v49);
  v6 = std::locale::classic();
  if (std::locale::operator==(&v49, v6))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_BYTE **)(a1 + 24);
    if ((unint64_t)v8 >= v7)
    {
      v12 = *(_BYTE *)a1 != 0;
      while (1)
      {
        v15 = *(_DWORD *)(a1 + 4);
        v12 |= v15 > 0x19999999;
        *(_BYTE *)a1 = v12 & 1;
        v16 = 10 * v15;
        *(_DWORD *)(a1 + 4) = 10 * v15;
        v17 = (char)*v8;
        if ((*v8 - 58) < 0xF6u)
          break;
        v18 = v17 - 48;
        v19 = (v17 - 48) * v16;
        if (v18)
        {
          if ((v12 & 1) != 0)
            break;
          if (((v18 * (unint64_t)v16) & 0xFFFFFFFF00000000) != 0)
            break;
          v13 = *(_DWORD **)(a1 + 8);
          v14 = *v13;
          if (__CFADD__(v19, *v13))
            break;
        }
        else
        {
          v13 = *(_DWORD **)(a1 + 8);
          v14 = *v13;
        }
        *v13 = v14 + v19;
        *(_QWORD *)(a1 + 24) = --v8;
        if ((unint64_t)v8 < v7)
          goto LABEL_6;
      }
      v9 = 0;
    }
    else
    {
LABEL_6:
      v9 = 1;
    }
    goto LABEL_66;
  }
  v10 = std::locale::use_facet(&v49, MEMORY[0x24BEDB588]);
  ((void (*)(void **__return_ptr))v10->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v48 < 0)
  {
    v11 = v47;
    if (!v47 || *(char *)__p <= 0)
    {
LABEL_27:
      v26 = *(_QWORD *)(a1 + 16);
      v27 = *(_BYTE **)(a1 + 24);
      if ((unint64_t)v27 >= v26)
      {
        v38 = *(_BYTE *)a1 != 0;
        while (1)
        {
          v41 = *(_DWORD *)(a1 + 4);
          v38 |= v41 > 0x19999999;
          *(_BYTE *)a1 = v38 & 1;
          v42 = 10 * v41;
          *(_DWORD *)(a1 + 4) = 10 * v41;
          v43 = (char)*v27;
          if ((*v27 - 58) < 0xF6u)
            break;
          v44 = v43 - 48;
          v45 = (v43 - 48) * v42;
          if (v44)
          {
            if ((v38 & 1) != 0)
              break;
            if (((v44 * (unint64_t)v42) & 0xFFFFFFFF00000000) != 0)
              break;
            v39 = *(_DWORD **)(a1 + 8);
            v40 = *v39;
            if (__CFADD__(v45, *v39))
              break;
          }
          else
          {
            v39 = *(_DWORD **)(a1 + 8);
            v40 = *v39;
          }
          *v39 = v40 + v45;
          *(_QWORD *)(a1 + 24) = --v27;
          if ((unint64_t)v27 < v26)
            goto LABEL_28;
        }
LABEL_64:
        v9 = 0;
        if (((char)v48 & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_65;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v11 = v48;
    if (!v48 || (char)__p <= 0)
      goto LABEL_27;
  }
  v20 = ((uint64_t (*)(const std::locale::facet *))v10->__vftable[1].~facet_0)(v10);
  v21 = *(_BYTE **)(a1 + 16);
  v22 = *(_BYTE **)(a1 + 24);
  if (v22 >= v21)
  {
    v23 = 0;
    p_p = __p;
    if ((v48 & 0x80u) == 0)
      p_p = &__p;
    v25 = *p_p - 1;
    while (1)
    {
      while (v25)
      {
        v30 = *(_DWORD *)(a1 + 4);
        if (*(_BYTE *)a1)
          v31 = 1;
        else
          v31 = v30 > 0x19999999;
        v32 = v31;
        *(_BYTE *)a1 = v32;
        v33 = 10 * v30;
        *(_DWORD *)(a1 + 4) = 10 * v30;
        v34 = (char)*v22;
        if ((*v22 - 58) < 0xF6u)
          goto LABEL_64;
        v35 = v34 - 48;
        v36 = (v34 - 48) * v33;
        if (v35)
        {
          if ((v32 & 1) != 0)
            goto LABEL_64;
          if (((v35 * (unint64_t)v33) & 0xFFFFFFFF00000000) != 0)
            goto LABEL_64;
          v28 = *(_DWORD **)(a1 + 8);
          v29 = *v28;
          if (__CFADD__(v36, *v28))
            goto LABEL_64;
        }
        else
        {
          v28 = *(_DWORD **)(a1 + 8);
          v29 = *v28;
        }
        *v28 = v29 + v36;
        --v25;
        *(_QWORD *)(a1 + 24) = --v22;
        if (v22 < v21)
          goto LABEL_28;
      }
      if (*v22 != v20)
        break;
      if (v22 == v21)
        goto LABEL_64;
      if (v11 - 1 > (unint64_t)v23)
        ++v23;
      if ((v48 & 0x80u) == 0)
        v37 = &__p;
      else
        v37 = __p;
      v25 = v37[v23];
      *(_QWORD *)(a1 + 24) = --v22;
      if (v22 < v21)
        goto LABEL_28;
    }
    v9 = sub_20EAA1234(a1);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_28:
  v9 = 1;
  if ((char)v48 < 0)
LABEL_65:
    operator delete(__p);
LABEL_66:
  std::locale::~locale(&v49);
  return v9;
}

void sub_20EAA11F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA1234(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  char v4;
  _DWORD *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE **)(a1 + 24);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v7 = *(_DWORD *)(a1 + 4);
    v4 |= v7 > 0x19999999;
    *(_BYTE *)a1 = v4 & 1;
    v8 = 10 * v7;
    *(_DWORD *)(a1 + 4) = 10 * v7;
    v9 = (char)*v2;
    if ((*v2 - 58) < 0xF6u)
      break;
    v10 = v9 - 48;
    v11 = (v9 - 48) * v8;
    if (v10)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (((v10 * (unint64_t)v8) & 0xFFFFFFFF00000000) != 0)
        return 0;
      v5 = *(_DWORD **)(a1 + 8);
      v6 = *v5;
      if (__CFADD__(v11, *v5))
        return 0;
    }
    else
    {
      v5 = *(_DWORD **)(a1 + 8);
      v6 = *v5;
    }
    *v5 = v6 + v11;
    *(_QWORD *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

void sub_20EAA12F0()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA1304()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t sub_20EAA1310(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9C2C20;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t *sub_20EAA1358(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EAA13F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EAA1408(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA141C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C2C68;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIjEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKjE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIjEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKjE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20EAA14C8(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20EAA14D8(_BYTE *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2CE8;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2D60;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2D88;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v9 = (uint64_t)off_24C9C2DD8 + 1;
  v10[0] = a1;
  sub_20EAA2AA8((uint64_t *)(v2 + 120), &v9);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v10, v10, 2);
    }
    v9 = 0;
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9AEA48;
  *(_BYTE *)(v5 + 8) = *a1;
  v6 = *v3;
  *v3 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20EAA2C28(a1);
  v7 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v2 + 184) = v12;
  return v2;
}

void sub_20EAA1624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAA26B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA1638(_OWORD *a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  _OWORD *v4;
  uint64_t v5;
  void *__p;
  void *v8;
  _OWORD *v9;
  uint64_t v10;
  _QWORD v11[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2E20;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v10 = (uint64_t)off_24C9C3138 + 1;
  v11[0] = a1;
  sub_20EAA459C((uint64_t *)(v2 + 120), &v10);
  if (v10)
  {
    if ((v10 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v11, v11, 2);
    }
    v10 = 0;
  }
  v4 = operator new(0x10uLL);
  v8 = v4 + 1;
  v9 = v4 + 1;
  __p = v4;
  *v4 = *a1;
  v5 = sub_20EAA2D64(v2, (uint64_t)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_20EAA1740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAA1770(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v4;
  uint64_t v5;
  void *__p;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2E20;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v10 = (uint64_t)off_24C9C3158 + 1;
  v11[0] = a1;
  sub_20EAA459C((uint64_t *)(v2 + 120), &v10);
  if (v10)
  {
    if ((v10 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v11, v11, 2);
    }
    v10 = 0;
  }
  v4 = operator new(0x18uLL);
  v8 = v4 + 3;
  v9 = v4 + 3;
  __p = v4;
  *(_OWORD *)v4 = *(_OWORD *)a1;
  v4[2] = *(_QWORD *)(a1 + 16);
  v5 = sub_20EAA2D64(v2, (uint64_t)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_20EAA1880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAA18B0(char *__s, const char **a2, _BYTE *a3, const char **a4)
{
  const char *v7;
  uint64_t result;
  _DWORD v9[6];
  int v10;
  const char *v11;
  _QWORD **v12;
  const char **v13;
  _DWORD *v14;
  const char **v15;
  const char **v16;
  _QWORD *v17;

  v10 = 0;
  sub_20E877AF0(v9, __s);
  v12 = (_QWORD **)v9;
  v13 = a2;
  v14 = v9;
  v15 = a2;
  v16 = a2;
  if (v10 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2CA8[v10])(&v17, v9);
  v7 = "true";
  if (!*a3)
    v7 = "false";
  v11 = v7;
  v12 = (_QWORD **)v9;
  v13 = &v11;
  v14 = v9;
  v15 = &v11;
  v16 = &v11;
  if (v10 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2DF8[v10])(&v17, v9);
  v12 = (_QWORD **)v9;
  v13 = a4;
  v14 = v9;
  v15 = a4;
  v16 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2CC0[v10])(&v17, v9);
  if (v10 == -1)
    sub_20E877AB8();
  v12 = &v17;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C2C90[v10])(&v12, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C2C78[v10])(&v12, v9);
  return result;
}

void sub_20EAA1A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA1AB0(char *__s, const char **a2, _BYTE *a3, const char **a4)
{
  const char *v7;
  uint64_t result;
  _DWORD v9[6];
  int v10;
  const char *v11;
  _QWORD **v12;
  const char **v13;
  _DWORD *v14;
  const char **v15;
  const char **v16;
  _QWORD *v17;

  v10 = 0;
  sub_20EA76F04(v9, __s);
  v12 = (_QWORD **)v9;
  v13 = a2;
  v14 = v9;
  v15 = a2;
  v16 = a2;
  if (v10 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2CA8[v10])(&v17, v9);
  v7 = "true";
  if (!*a3)
    v7 = "false";
  v11 = v7;
  v12 = (_QWORD **)v9;
  v13 = &v11;
  v14 = v9;
  v15 = &v11;
  v16 = &v11;
  if (v10 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2DF8[v10])(&v17, v9);
  v12 = (_QWORD **)v9;
  v13 = a4;
  v14 = v9;
  v15 = a4;
  v16 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2CC0[v10])(&v17, v9);
  if (v10 == -1)
    sub_20E877AB8();
  v12 = &v17;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C2C90[v10])(&v12, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C2C78[v10])(&v12, v9);
  return result;
}

void sub_20EAA1C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA1CB0(unint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v10;
  _QWORD v11[3];
  __int128 v12;
  uint64_t v13;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C3188;
  *(_QWORD *)(v2 + 8) = &unk_24C9C3200;
  *(_QWORD *)(v2 + 152) = &unk_24C9C3228;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v10 = (uint64_t)off_24C9C3390 + 1;
  v11[0] = a1;
  sub_20EAA6744((uint64_t *)(v2 + 120), &v10);
  if (v10)
  {
    if ((v10 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v11, v11, 2);
    }
    v10 = 0;
  }
  v5 = (_QWORD *)operator new();
  v6 = *a1;
  *v5 = &off_24C9C3358;
  v5[1] = v6;
  v7 = *v3;
  *v3 = (uint64_t)v5;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_20E9F6B94(a1);
  v8 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(v2 + 184) = v13;
  return v2;
}

void sub_20EAA1DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAA5364((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA1E0C(char *__s, uint64_t a2, double *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_20EAA4DC4(v9, __s);
  v11 = (_QWORD **)v9;
  v12 = a2;
  v13 = v9;
  v14 = a2;
  v15 = a2;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2CA8[v10])(&v16, v9);
  sub_20E87876C((uint64_t)&v8, (uint64_t)v9, a3);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C2CC0[v10])(&v16, v9);
  if (v10 == -1)
    sub_20E877AB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C2C90[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C2C78[v10])(&v11, v9);
  return result;
}

void sub_20EAA1F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAA1FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EAA1FB8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EAA20A8(_DWORD ***a1)
{
  return sub_20EAA20C4(**a1, (char *)(*a1)[1]);
}

void sub_20EAA20B4(uint64_t a1, uint64_t a2)
{
  sub_20EAA21B4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EAA20C4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EAA21B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C2C78[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EAA2368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EAA23AC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EAA24A4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EAA249C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EAA24A4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EAA26A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAA26B4(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20EAA2704(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2CE8;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2D60;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2D88;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EAA29E0(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EAA29E0(a1);
}

void sub_20EAA276C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2CE8;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2D60;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2D88;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EAA29E0(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

uint64_t sub_20EAA27E8(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EAA27F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2CE8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C2D60;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2D88;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EAA29E0(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA29E0(v2);
}

void sub_20EAA2860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2CE8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C2D60;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2D88;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EAA29E0(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA28E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2CE8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C2D60;
  *(_QWORD *)a1 = &unk_24C9C2D88;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EAA29E0(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA29E0(v2);
}

void sub_20EAA2954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2CE8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C2D60;
  *(_QWORD *)a1 = &unk_24C9C2D88;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EAA29E0(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA29D8(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_20EAA29E0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9AE978;
  *(_QWORD *)(a1 + 8) = &unk_24C9AE9E8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t *sub_20EAA2AA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EAA2B48(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EAA2B58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA2B6C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C2DE8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIbEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKbE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIbEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKbE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_BYTE **sub_20EAA2C18(_BYTE **result, _BYTE *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20EAA2C28(_BYTE *a1)
{
  const char *v1;
  uint64_t result;
  _DWORD v3[6];
  int v4;
  char v5;
  const char *v6[2];

  v4 = 0;
  v1 = "true";
  if (!*a1)
    v1 = "false";
  v6[0] = v1;
  sub_20E87999C(v3, v6);
  if (v4 == -1)
    sub_20E877AB8();
  v6[0] = &v5;
  result = ((uint64_t (*)(const char **, _DWORD *))off_24C9C2C90[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(const char **, _DWORD *))off_24C9C2C78[v4])(v6, v3);
  return result;
}

void sub_20EAA2CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9C2C78[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EAA2D14(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20EAA2D64(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  double *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void **v11;
  __int128 v13;
  uint64_t v14;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  *v4 = &off_24C9C3000;
  v4[2] = 0;
  v4[3] = 0;
  v6 = *(double **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    v4[1] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    v4[3] = v9;
    memcpy(v8, v6, v7);
    v4[2] = v9;
  }
  v10 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v4;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_20EAA4794((double **)a2, (uint64_t)&v13);
  v11 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v13;
  *(_QWORD *)(a1 + 184) = v14;
  return a1;
}

void sub_20EAA2E60(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x212BC6398](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_20EAA2E94(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EAA33A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EAA34A8(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EAA34C8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EAA34E8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EAA34F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EAA34F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

char **sub_20EAA3550(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  char **v6;
  char **result;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)(0x8000000210313640 & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)(0x8000000210313640 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = (char **)(*a2 + 8);
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  if (result != v6)
    result = (char **)sub_20E86811C(result, *v6, v6[1], (v6[1] - *v6) >> 3);
LABEL_11:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_217;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (char **)(*(uint64_t (**)(uint64_t, char **))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20EAA3664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA3678(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2E20;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2EC0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EAA3A40(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EAA3A40(a1);
}

void sub_20EAA36E0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C2E20;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(a1 + 152) = &unk_24C9C2EC0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EAA3A40(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

_QWORD *sub_20EAA375C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  if (*a3 != a3[1])
    return (_QWORD *)sub_20EAA3B0C((_QWORD **)a2, a3);
  v5 = *(_QWORD *)(a1 + 80);
  if (!v5)
    return (_QWORD *)sub_20EAA3B0C((_QWORD **)a2, a3);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  result = (_QWORD *)*a2;
  *a2 = v6;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

void *sub_20EAA37D8()
{
  return &unk_24C9C2FE0;
}

uint64_t sub_20EAA37E4(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20EAA37EC()
{
  return &unk_24C9C2FE0;
}

uint64_t sub_20EAA37F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2E20;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C2E98;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2EC0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EAA3A40(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA3A40(v2);
}

void sub_20EAA3868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C2E20;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C2E98;
  *(_QWORD *)(a1 + 144) = &unk_24C9C2EC0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EAA3A40(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA38EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2E20;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C2E98;
  *(_QWORD *)a1 = &unk_24C9C2EC0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EAA3A40(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA3A40(v2);
}

void sub_20EAA395C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C2E20;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C2E98;
  *(_QWORD *)a1 = &unk_24C9C2EC0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EAA3A40(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA39E0(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EAA39EC(uint64_t a1)
{
  sub_20EAA3A40(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA3A10(uint64_t a1)
{
  return sub_20EAA3A40(a1 - 8);
}

void sub_20EAA3A18(uint64_t a1)
{
  sub_20EAA3A40(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA3A40(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9C2F58;
  *(_QWORD *)(a1 + 8) = &unk_24C9C2FC8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20EAA3B0C(_QWORD **a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  void **v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void **v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  std::bad_cast v46;

  v4 = *a1;
  if (v4)
    goto LABEL_2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9C3000;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  v41 = *a1;
  *a1 = v4;
  if (!v41 || ((*(void (**)(_QWORD *))(*v41 + 8))(v41), (v4 = *a1) != 0))
LABEL_2:
    v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  else
    v5 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v5 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result != (0x8000000210313640 & 0x7FFFFFFFFFFFFFFFLL))
  {
    result = strcmp((const char *)result, (const char *)(0x8000000210313640 & 0x7FFFFFFFFFFFFFFFLL));
    if ((_DWORD)result)
    {
      v7 = 0;
      v8 = *a2;
      if (a2[1] == *a2)
        return result;
      goto LABEL_8;
    }
  }
  v7 = (uint64_t)(*a1 + 1);
  v8 = *a2;
  if (a2[1] != *a2)
  {
LABEL_8:
    v9 = 0;
    v10 = 0;
    v11 = MEMORY[0x24BEDB780];
    do
    {
      v45 = 0;
      __p = 0;
      v43 = 0;
      v44 = 0;
      v43 = sub_20E8ADE68((uint64_t *)&__p, (__int128 *)(v8 + 24 * v9));
      sub_20EA9EB00((uint64_t *)&v45, &__p);
      if (v45)
      {
        v12 = (const char *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v45 + 16))(v45) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v13 = (const char *)(*(_QWORD *)(v11 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v12 == v13)
          goto LABEL_15;
      }
      else
      {
        v12 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v13 = (const char *)(*(_QWORD *)(v11 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v12 == v13)
          goto LABEL_15;
      }
      if (strcmp(v12, v13))
      {
        v46.__vftable = 0;
        std::bad_cast::bad_cast(&v46);
        v46.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
        sub_20EAA40CC();
      }
LABEL_15:
      v14 = v45[1];
      v16 = *(char **)(v7 + 8);
      v15 = *(_QWORD *)(v7 + 16);
      if ((unint64_t)v16 >= v15)
      {
        v18 = v11;
        v19 = *(char **)v7;
        v20 = (uint64_t)&v16[-*(_QWORD *)v7];
        v21 = v20 >> 3;
        v22 = (v20 >> 3) + 1;
        if (v22 >> 61)
          sub_20E867F44();
        v23 = v15 - (_QWORD)v19;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 61)
            sub_20E877A38();
          v25 = operator new(8 * v24);
          v26 = &v25[8 * v21];
          *v26 = v14;
          v27 = (uint64_t)(v26 + 1);
          v28 = v16 - v19;
          if (v16 != v19)
          {
LABEL_27:
            v29 = v28 - 8;
            if (v29 < 0x58)
            {
              v11 = v18;
              goto LABEL_35;
            }
            v30 = v16 - &v25[v20];
            v11 = v18;
            if (v30 < 0x20)
              goto LABEL_57;
            v31 = (v29 >> 3) + 1;
            v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            v33 = &v16[-v32];
            v26 = (_QWORD *)((char *)v26 - v32);
            v34 = &v25[8 * v21 - 16];
            v35 = v16 - 16;
            v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 4;
            }
            while (v36);
            v16 = v33;
            if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_57:
              do
              {
LABEL_35:
                v38 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *--v26 = v38;
              }
              while (v16 != v19);
            }
LABEL_36:
            *(_QWORD *)v7 = v26;
            *(_QWORD *)(v7 + 8) = v27;
            *(_QWORD *)(v7 + 16) = &v25[8 * v24];
            if (v19)
              operator delete(v19);
            *(_QWORD *)(v7 + 8) = v27;
            v17 = (void **)__p;
            if (!__p)
              goto LABEL_46;
LABEL_39:
            v39 = (void **)v43;
            v40 = v17;
            if ((void **)v43 != v17)
            {
              do
              {
                if (*((char *)v39 - 1) < 0)
                  operator delete(*(v39 - 3));
                v39 -= 3;
              }
              while (v39 != v17);
              v40 = __p;
            }
            v43 = (uint64_t)v17;
            operator delete(v40);
            goto LABEL_46;
          }
        }
        else
        {
          v25 = 0;
          v26 = (_QWORD *)(8 * v21);
          *(_QWORD *)(8 * v21) = v14;
          v27 = 8 * v21 + 8;
          v28 = v16 - v19;
          if (v16 != v19)
            goto LABEL_27;
        }
        v11 = v18;
        goto LABEL_36;
      }
      *(_QWORD *)v16 = v14;
      *(_QWORD *)(v7 + 8) = v16 + 8;
      v17 = (void **)__p;
      if (__p)
        goto LABEL_39;
LABEL_46:
      result = (uint64_t)v45;
      if (v45)
        result = (*(uint64_t (**)(_QWORD *))(*v45 + 8))(v45);
      v8 = *a2;
      v9 = ++v10;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  }
  return result;
}

void sub_20EAA3EE8(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  va_list va;

  va_start(va, a3);
  sub_20E89FB98((void **)va);
  v8 = *(_QWORD *)(v5 - 120);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C((void **)va, *v3 + 24 * v4);
    sub_20EA9ED20((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void sub_20EAA3F58(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20EAA3F70);
}

uint64_t sub_20EAA3F7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20EAA3FAC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void *sub_20EAA3FEC()
{
  return &unk_24C9C2FE0;
}

_QWORD *sub_20EAA3FF8(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  *v2 = &off_24C9C3000;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_20EAA4098(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x212BC6398](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_20EAA40CC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exception = &unk_24C9C30A8;
  exception[1] = &unk_24C9C30D8;
  exception[2] = &unk_24C9C3100;
  exception[3] = 0;
  __cxa_throw(exception, (struct type_info *)&unk_24C9C3050, (void (*)(void *))sub_20EAA411C);
}

std::exception *sub_20EAA411C(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[2].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[3].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

uint64_t sub_20EAA4174(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  *(_QWORD *)(v2 + 8) = &unk_24C9C3120;
  *(_QWORD *)(v2 + 16) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &unk_24C9C30A8;
  *(_QWORD *)(v2 + 8) = &unk_24C9C30D8;
  *(_QWORD *)(v2 + 16) = &unk_24C9C3100;
  sub_20E86E24C(v2 + 16, a1 + 16);
  return v2;
}

void sub_20EAA4240(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void sub_20EAA426C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20EAA4288(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_20EAA44E8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9C3050, (void (*)(void *))sub_20EAA411C);
}

void sub_20EAA42C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EAA42D8(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[2].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[3].__vftable = 0;
  std::exception::~exception(a1 + 1);
  JUMPOUT(0x212BC6398);
}

void sub_20EAA4340(std::exception *this)
{
  std::exception_vtbl *v2;

  this[1].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[2].__vftable = 0;
  std::exception::~exception(this);
}

void sub_20EAA4390(std::exception *this)
{
  std::exception_vtbl *v2;

  this[1].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[2].__vftable = 0;
  std::exception::~exception(this);
  JUMPOUT(0x212BC6398);
}

const char *sub_20EAA43FC()
{
  return "boost::bad_any_cast: failed conversion using boost::any_cast";
}

void sub_20EAA4408(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 1);
}

void sub_20EAA4458(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 1);
  JUMPOUT(0x212BC6398);
}

void sub_20EAA44C4(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA44E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  *(_QWORD *)(a1 + 8) = &unk_24C9C3120;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24C9C30A8;
  *(_QWORD *)(a1 + 8) = &unk_24C9C30D8;
  *(_QWORD *)(a1 + 16) = &unk_24C9C3100;
  return a1;
}

void sub_20EAA4588(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAA459C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EAA463C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EAA464C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA4660(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C3148;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm2EEPN5boost15program_options"
                                      "11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlR"
                                      "KNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm2EEPN5boost15program_options11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlRKNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

__n128 sub_20EAA470C(__n128 **a1, __n128 **a2)
{
  __n128 *v2;
  uint64_t v3;
  __n128 *v4;
  __n128 result;

  v2 = *a2;
  v3 = ((char *)a2[1] - (char *)*a2) >> 3;
  if (v3 == 2)
  {
    result = *v2;
    **a1 = *v2;
  }
  else
  {
    if (v3 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ProgramOptions/include/Kit/ProgramOptions/ProgramOptionsParserUtil.h", 161, (uint64_t)"", 0, (uint64_t)"invalid size of array parameter", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v4 = *a1;
    v4->n128_u64[0] = v2->n128_u64[0];
    result.n128_u64[0] = v2->n128_u64[0];
    v4->n128_u64[1] = v2->n128_u64[0];
  }
  return result;
}

std::string *sub_20EAA4794@<X0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double *v3;
  double *v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string v10;
  void *__p[2];
  int64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  char *v16;

  *(_BYTE *)(a2 + 23) = 1;
  *(_WORD *)a2 = 123;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v14 = 0;
      sub_20E87876C((uint64_t)&v16, (uint64_t)v13, v3);
      if (v14 == -1)
        sub_20E877AB8();
      v16 = &v15;
      ((void (*)(std::string *__return_ptr, char **, _BYTE *))off_24C9C2C90[v14])(&v10, &v16, v13);
      if (v14 != -1)
        ((void (*)(char **, _BYTE *))off_24C9C2C78[v14])(&v16, v13);
      v5 = std::string::append(&v10, ", ", 2uLL);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v12 = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if (v12 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if (v12 >= 0)
        v8 = HIBYTE(v12);
      else
        v8 = (std::string::size_type)__p[1];
      std::string::append((std::string *)a2, (const std::string::value_type *)v7, v8);
      if (SHIBYTE(v12) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
          operator delete(v10.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_17;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return std::string::append((std::string *)a2, "}", 1uLL);
}

void sub_20EAA4904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if ((*(char *)(v23 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAA499C(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t *v14;

  v9 = a2;
  v10 = "{";
  v11 = a2;
  v12 = "{";
  v13 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **))off_24C9C2CC0[v3])(&v14);
  sub_20E87876C((uint64_t)&v9, a2, a3);
  v9 = a2;
  v10 = ",";
  v11 = a2;
  v12 = ",";
  v13 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_24C9C2CC0[v6])(&v14, a2);
  sub_20E87876C((uint64_t)&v9, a2, a3 + 1);
  v9 = a2;
  v10 = "}";
  v11 = a2;
  v12 = "}";
  v13 = "}";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
LABEL_5:
    sub_20E877AB8();
  v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C9C2CC0[v7])(&v14, a2);
}

_DWORD *sub_20EAA4AA0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EAA4B90(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20EAA4C80(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C3168;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm3EEPN5boost15program_options"
                                      "11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlR"
                                      "KNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm3EEPN5boost15program_options11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlRKNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

__n128 sub_20EAA4D2C(__n128 **a1, __n128 **a2)
{
  __n128 *v2;
  uint64_t v3;
  __n128 *v4;
  __n128 result;
  __n128 *v6;

  v2 = *a2;
  v3 = ((char *)a2[1] - (char *)*a2) >> 3;
  if (v3 == 3)
  {
    v6 = *a1;
    result = *v2;
    v6[1].n128_u64[0] = v2[1].n128_u64[0];
    *v6 = result;
  }
  else
  {
    if (v3 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ProgramOptions/include/Kit/ProgramOptions/ProgramOptionsParserUtil.h", 161, (uint64_t)"", 0, (uint64_t)"invalid size of array parameter", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v4 = *a1;
    v4->n128_u64[0] = v2->n128_u64[0];
    v4->n128_u64[1] = v2->n128_u64[0];
    result.n128_u64[0] = v2->n128_u64[0];
    v4[1].n128_u64[0] = v2->n128_u64[0];
  }
  return result;
}

_DWORD *sub_20EAA4DC4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EAA4EB4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EAA4FA4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EAA5094(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EAA5184(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EAA5274(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t *sub_20EAA5364(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_20EAA53B4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EAA58C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EAA59C8(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EAA59E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EAA5A08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EAA5A10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EAA5A18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EAA5A70(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  std::runtime_error v11;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7B0] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if ((const char *)result == v6 || (result = strcmp((const char *)result, v6), !(_DWORD)result))
  {
    v7 = (_QWORD *)(*a2 + 8);
    v8 = *(_QWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
LABEL_9:
    *v8 = *v7;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 120);
  v10 = nullsub_218;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    if (!v9)
    {
      std::runtime_error::runtime_error(&v11, "call to empty boost::function");
      v11.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v11);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v7);
  }
  return result;
}

void sub_20EAA5B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA5B80(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C3188;
  *(_QWORD *)(a1 + 8) = &unk_24C9C3200;
  *(_QWORD *)(a1 + 152) = &unk_24C9C3228;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EAA5F48(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EAA5F48(a1);
}

void sub_20EAA5BE8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C3188;
  *(_QWORD *)(a1 + 8) = &unk_24C9C3200;
  *(_QWORD *)(a1 + 152) = &unk_24C9C3228;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EAA5F48(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EAA5C64(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EAA6014(a2, a3);
  }
}

uint64_t sub_20EAA5CE0()
{
  return MEMORY[0x24BEDB7B0];
}

uint64_t sub_20EAA5CEC(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EAA5CF4()
{
  return MEMORY[0x24BEDB7B0];
}

uint64_t sub_20EAA5D00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C3188;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C3200;
  *(_QWORD *)(a1 + 144) = &unk_24C9C3228;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EAA5F48(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA5F48(v2);
}

void sub_20EAA5D70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C3188;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C3200;
  *(_QWORD *)(a1 + 144) = &unk_24C9C3228;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EAA5F48(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA5DF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C3188;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C3200;
  *(_QWORD *)a1 = &unk_24C9C3228;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EAA5F48(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA5F48(v2);
}

void sub_20EAA5E64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C3188;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C3200;
  *(_QWORD *)a1 = &unk_24C9C3228;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EAA5F48(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA5EE8(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EAA5EF4(uint64_t a1)
{
  sub_20EAA5F48(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA5F18(uint64_t a1)
{
  return sub_20EAA5F48(a1 - 8);
}

void sub_20EAA5F20(uint64_t a1)
{
  sub_20EAA5F48(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA5F48(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9C32C0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C3330;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EAA6014(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  unsigned __int8 *p_dst;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::bad_cast v15[16];
  __int128 __dst;
  uint64_t v17;
  uint64_t v18;
  char v19[8];
  uint64_t v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v17 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  v18 = 0;
  p_dst = (unsigned __int8 *)&__dst;
  v7 = *((_QWORD *)&__dst + 1);
  if (v17 >= 0)
    v7 = HIBYTE(v17);
  else
    p_dst = (unsigned __int8 *)__dst;
  if (!v7)
  {
LABEL_22:
    std::bad_cast::bad_cast(v15);
    v15[0].__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v15[1].__vftable = (std::bad_cast_vtbl *)&unk_24C9AB9F0;
    v15[2].__vftable = (std::bad_cast_vtbl *)MEMORY[0x24BEDB7B0];
    sub_20EA9F254((uint64_t)v15);
  }
  v8 = &p_dst[v7];
  v9 = *p_dst;
  if (v9 == 45 || v9 == 43)
  {
    v10 = &__dst;
    if (v17 < 0)
      v10 = (__int128 *)__dst;
    p_dst = (unsigned __int8 *)v10 + 1;
  }
  v19[0] = 0;
  v20 = 1;
  v21 = &v18;
  v22 = p_dst;
  v23 = v8;
  v11 = sub_20EAA6210((uint64_t)v19);
  if (v9 == 45)
  {
    v12 = -v18;
    v18 = -v18;
    if ((v11 & 1) == 0)
      goto LABEL_22;
  }
  else
  {
    if (!v11)
      goto LABEL_22;
    v12 = v18;
  }
  v13 = (_QWORD *)operator new();
  *v13 = &off_24C9C3358;
  v13[1] = v12;
  v14 = *a1;
  *a1 = (uint64_t)v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__dst);
}

void sub_20EAA6194()
{
  __break(1u);
}

void sub_20EAA61DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20EAA61F4);
}

uint64_t sub_20EAA6210(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  const std::locale *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  const std::locale::facet *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  char *v22;
  unsigned __int8 v23;
  _BYTE *p_p;
  char v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  unsigned __int8 v48;
  std::locale v49;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v1 - 1;
  v2 = *(_QWORD **)(a1 + 16);
  *v2 = 0;
  if (*(_QWORD *)(a1 + 24) > (unint64_t)(v1 - 1))
    return 0;
  v3 = *(unsigned __int8 *)(v1 - 1);
  if ((v3 - 58) < 0xFFFFFFF6)
    return 0;
  *v2 = (v3 - 48);
  *(_QWORD *)(a1 + 32) = v1 - 2;
  MEMORY[0x212BC61AC](&v49);
  v6 = std::locale::classic();
  if (std::locale::operator==(&v49, v6))
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(char **)(a1 + 32);
    if ((unint64_t)v8 >= v7)
    {
      v12 = *(_BYTE *)a1 != 0;
      while (1)
      {
        v15 = *(_QWORD *)(a1 + 8);
        v12 |= v15 > 0x1999999999999999;
        *(_BYTE *)a1 = v12 & 1;
        v16 = 10 * v15;
        *(_QWORD *)(a1 + 8) = 10 * v15;
        v17 = *v8;
        if ((v17 - 58) < 0xF6u)
          break;
        v18 = v17 - 48;
        v19 = v16 * (v17 - 48);
        if ((_DWORD)v18)
        {
          if ((v12 & 1) != 0)
            break;
          if (!is_mul_ok(v18, v16))
            break;
          v13 = *(_QWORD **)(a1 + 16);
          v14 = *v13;
          if (__CFADD__(v19, *v13))
            break;
        }
        else
        {
          v13 = *(_QWORD **)(a1 + 16);
          v14 = *v13;
        }
        *v13 = v14 + v19;
        *(_QWORD *)(a1 + 32) = --v8;
        if ((unint64_t)v8 < v7)
          goto LABEL_6;
      }
      v9 = 0;
    }
    else
    {
LABEL_6:
      v9 = 1;
    }
    goto LABEL_66;
  }
  v10 = std::locale::use_facet(&v49, MEMORY[0x24BEDB588]);
  ((void (*)(void **__return_ptr))v10->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v48 < 0)
  {
    v11 = v47;
    if (!v47 || *(char *)__p <= 0)
    {
LABEL_27:
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(char **)(a1 + 32);
      if ((unint64_t)v27 >= v26)
      {
        v38 = *(_BYTE *)a1 != 0;
        while (1)
        {
          v41 = *(_QWORD *)(a1 + 8);
          v38 |= v41 > 0x1999999999999999;
          *(_BYTE *)a1 = v38 & 1;
          v42 = 10 * v41;
          *(_QWORD *)(a1 + 8) = 10 * v41;
          v43 = *v27;
          if ((v43 - 58) < 0xF6u)
            break;
          v44 = v43 - 48;
          v45 = v42 * (v43 - 48);
          if ((_DWORD)v44)
          {
            if ((v38 & 1) != 0)
              break;
            if (!is_mul_ok(v44, v42))
              break;
            v39 = *(_QWORD **)(a1 + 16);
            v40 = *v39;
            if (__CFADD__(v45, *v39))
              break;
          }
          else
          {
            v39 = *(_QWORD **)(a1 + 16);
            v40 = *v39;
          }
          *v39 = v40 + v45;
          *(_QWORD *)(a1 + 32) = --v27;
          if ((unint64_t)v27 < v26)
            goto LABEL_28;
        }
LABEL_64:
        v9 = 0;
        if (((char)v48 & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_65;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v11 = v48;
    if (!v48 || (char)__p <= 0)
      goto LABEL_27;
  }
  v20 = ((uint64_t (*)(const std::locale::facet *))v10->__vftable[1].~facet_0)(v10);
  v21 = *(char **)(a1 + 24);
  v22 = *(char **)(a1 + 32);
  if (v22 >= v21)
  {
    v23 = 0;
    p_p = __p;
    if ((v48 & 0x80u) == 0)
      p_p = &__p;
    v25 = *p_p - 1;
    while (1)
    {
      while (v25)
      {
        v30 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)a1)
          v31 = 1;
        else
          v31 = v30 > 0x1999999999999999;
        v32 = v31;
        *(_BYTE *)a1 = v32;
        v33 = 10 * v30;
        *(_QWORD *)(a1 + 8) = 10 * v30;
        v34 = *v22;
        if ((v34 - 58) < 0xF6u)
          goto LABEL_64;
        v35 = v34 - 48;
        v36 = v33 * (v34 - 48);
        if ((_DWORD)v35)
        {
          if ((v32 & 1) != 0)
            goto LABEL_64;
          if (!is_mul_ok(v35, v33))
            goto LABEL_64;
          v28 = *(_QWORD **)(a1 + 16);
          v29 = *v28;
          if (__CFADD__(v36, *v28))
            goto LABEL_64;
        }
        else
        {
          v28 = *(_QWORD **)(a1 + 16);
          v29 = *v28;
        }
        *v28 = v29 + v36;
        --v25;
        *(_QWORD *)(a1 + 32) = --v22;
        if (v22 < v21)
          goto LABEL_28;
      }
      if (*v22 != v20)
        break;
      if (v22 == v21)
        goto LABEL_64;
      if (v11 - 1 > (unint64_t)v23)
        ++v23;
      if ((v48 & 0x80u) == 0)
        v37 = &__p;
      else
        v37 = __p;
      v25 = v37[v23];
      *(_QWORD *)(a1 + 32) = --v22;
      if (v22 < v21)
        goto LABEL_28;
    }
    v9 = sub_20EAA6624(a1);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_28:
  v9 = 1;
  if ((char)v48 < 0)
LABEL_65:
    operator delete(__p);
LABEL_66:
  std::locale::~locale(&v49);
  return v9;
}

void sub_20EAA65E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA6624(uint64_t a1)
{
  unint64_t v1;
  char *v2;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v4 |= v7 > 0x1999999999999999;
    *(_BYTE *)a1 = v4 & 1;
    v8 = 10 * v7;
    *(_QWORD *)(a1 + 8) = 10 * v7;
    v9 = *v2;
    if ((v9 - 58) < 0xF6u)
      break;
    v10 = v9 - 48;
    v11 = v8 * (v9 - 48);
    if ((_DWORD)v10)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (!is_mul_ok(v10, v8))
        return 0;
      v5 = *(_QWORD **)(a1 + 16);
      v6 = *v5;
      if (__CFADD__(v11, *v5))
        return 0;
    }
    else
    {
      v5 = *(_QWORD **)(a1 + 16);
      v6 = *v5;
    }
    *v5 = v6 + v11;
    *(_QWORD *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

void sub_20EAA66E0()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA66F4()
{
  return MEMORY[0x24BEDB7B0];
}

_QWORD *sub_20EAA6700(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9C3358;
  result[1] = v3;
  return result;
}

uint64_t *sub_20EAA6744(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EAA67E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EAA67F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA6808(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C33A0;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentImEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKmE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentImEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKmE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_QWORD **sub_20EAA68B4(_QWORD **result, _QWORD *a2)
{
  **result = *a2;
  return result;
}

_DWORD *sub_20EAA68C4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C2C78[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20EAA69B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *v8;
  void **v10;
  void **v11;

  v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(a1 + 200))
  {
    v4 = *(void ***)(a1 + 176);
    if (v4)
    {
      do
      {
        v10 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v10;
      }
      while (v10);
    }
    v5 = *(void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    if (v5)
      operator delete(v5);
  }
  v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(_QWORD *)(a1 + 144) = v6;
    operator delete(v6);
  }
  sub_20E86872C(a1 + 88, *(_QWORD **)(a1 + 96));
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(void ***)(a1 + 48);
    if (v7)
    {
      do
      {
        v11 = (void **)*v7;
        if (*((char *)v7 + 39) < 0)
          operator delete(v7[2]);
        operator delete(v7);
        v7 = v11;
      }
      while (v11);
    }
    v8 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v8)
      operator delete(v8);
  }
  return a1;
}

uint64_t sub_20EAA6AA8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20EAA6BE8(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_20EAA6BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8CEB24(v1);
  _Unwind_Resume(a1);
}

void sub_20EAA6BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8CEB24(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAA6BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x58uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v25 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v25 + 72) = *(_OWORD *)(a3 + 56);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20EAA703C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EAA7050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EAA7068()
{
  sub_20E860B90("vector");
}

_QWORD *sub_20EAA707C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_23:
      sub_20EAA7068();
    v13 = 5 * v12;
    result = operator new(40 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 7);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 7;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 7);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 7;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_20EAA71FC(int *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C33C0;
  *(_QWORD *)(v2 + 8) = &unk_24C9C3438;
  *(_QWORD *)(v2 + 152) = &unk_24C9C3460;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v9 = (uint64_t)off_24C9C35C8 + 1;
  v10[0] = a1;
  sub_20EAA8294((uint64_t *)(v2 + 120), &v9);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v10, v10, 2);
    }
    v9 = 0;
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9C3590;
  *(_DWORD *)(v5 + 8) = *a1;
  v6 = *v3;
  *v3 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20E8A9280(a1);
  v7 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v2 + 184) = v12;
  return v2;
}

void sub_20EAA7348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAA735C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAA735C(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_20EAA73AC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EAA78BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EAA79C0(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EAA79E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EAA7A00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EAA7A08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EAA7A10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EAA7A68(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  std::runtime_error v11;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if ((const char *)result == v6 || (result = strcmp((const char *)result, v6), !(_DWORD)result))
  {
    v7 = (_DWORD *)(*a2 + 8);
    v8 = *(_DWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = *(_DWORD **)(a1 + 16);
  if (v8)
LABEL_9:
    *v8 = *v7;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 120);
  v10 = nullsub_220;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    if (!v9)
    {
      std::runtime_error::runtime_error(&v11, "call to empty boost::function");
      v11.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v11);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v7);
  }
  return result;
}

void sub_20EAA7B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA7B78(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C33C0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C3438;
  *(_QWORD *)(a1 + 152) = &unk_24C9C3460;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EAA7F40(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EAA7F40(a1);
}

void sub_20EAA7BE0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C33C0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C3438;
  *(_QWORD *)(a1 + 152) = &unk_24C9C3460;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EAA7F40(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EAA7C5C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EAA800C(a2, a3);
  }
}

uint64_t sub_20EAA7CD8()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_20EAA7CE4(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EAA7CEC()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_20EAA7CF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C33C0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C3438;
  *(_QWORD *)(a1 + 144) = &unk_24C9C3460;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EAA7F40(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA7F40(v2);
}

void sub_20EAA7D68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C33C0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C3438;
  *(_QWORD *)(a1 + 144) = &unk_24C9C3460;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EAA7F40(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA7DEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C33C0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C3438;
  *(_QWORD *)a1 = &unk_24C9C3460;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EAA7F40(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAA7F40(v2);
}

void sub_20EAA7E5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C33C0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C3438;
  *(_QWORD *)a1 = &unk_24C9C3460;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EAA7F40(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAA7EE0(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EAA7EEC(uint64_t a1)
{
  sub_20EAA7F40(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA7F10(uint64_t a1)
{
  return sub_20EAA7F40(a1 - 8);
}

void sub_20EAA7F18(uint64_t a1)
{
  sub_20EAA7F40(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA7F40(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9C34F8;
  *(_QWORD *)(a1 + 8) = &unk_24C9C3568;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EAA800C(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  unsigned __int8 *p_dst;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  __int128 *v10;
  char v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  std::bad_cast v17[16];
  __int128 __dst;
  uint64_t v19;
  char v20[4];
  int v21;
  int *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v19 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  p_dst = (unsigned __int8 *)&__dst;
  v7 = *((_QWORD *)&__dst + 1);
  if (v19 >= 0)
    v7 = HIBYTE(v19);
  else
    p_dst = (unsigned __int8 *)__dst;
  if (!v7)
    goto LABEL_27;
  v8 = &p_dst[v7];
  v25 = 0;
  v9 = *p_dst;
  if (v9 == 45 || v9 == 43)
  {
    v10 = &__dst;
    if (v19 < 0)
      v10 = (__int128 *)__dst;
    p_dst = (unsigned __int8 *)v10 + 1;
  }
  v20[0] = 0;
  v21 = 1;
  v22 = &v25;
  v23 = p_dst;
  v24 = v8;
  v11 = sub_20EAA0E1C((uint64_t)v20);
  v12 = v25;
  if (v9 == 45)
  {
    if (v25 < 0x80000001)
      v13 = v11;
    else
      v13 = 0;
    if ((v13 & 1) != 0)
    {
      v12 = -v25;
      goto LABEL_23;
    }
LABEL_27:
    std::bad_cast::bad_cast(v17);
    v17[0].__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v17[1].__vftable = (std::bad_cast_vtbl *)&unk_24C9AB9F0;
    v17[2].__vftable = (std::bad_cast_vtbl *)MEMORY[0x24BEDB798];
    sub_20EA9F254((uint64_t)v17);
  }
  if (v25 >= 0)
    v14 = v11;
  else
    v14 = 0;
  if ((v14 & 1) == 0)
    goto LABEL_27;
LABEL_23:
  v15 = operator new();
  *(_QWORD *)v15 = &off_24C9C3590;
  *(_DWORD *)(v15 + 8) = v12;
  v16 = *a1;
  *a1 = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__dst);
}

void sub_20EAA81AC()
{
  __break(1u);
}

void sub_20EAA81F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20EAA820CLL);
}

void sub_20EAA822C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAA8240()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_20EAA824C(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9C3590;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t *sub_20EAA8294(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EAA8334(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EAA8344(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA8358(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C35D8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIiEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKiE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIiEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKiE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20EAA8404(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20EAA8414(uint64_t a1, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  void *__p[2];
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  while (v3 != v4)
  {
    if (*((char *)v3 + 23) < 0)
    {
      sub_20E860C04(__p, *(void **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v8 = *((_QWORD *)v3 + 2);
      *(_OWORD *)__p = v5;
    }
    sub_20EAA85F8(a1, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    v3 = (__int128 *)((char *)v3 + 24);
  }
  return a1;
}

void sub_20EAA84B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v16;
  void *v17;
  void **v18;

  v16 = *(void ***)(v14 + 16);
  if (v16)
  {
    do
    {
      v18 = (void **)*v16;
      if (*((char *)v16 + 39) < 0)
        operator delete(v16[2]);
      operator delete(v16);
      v16 = v18;
    }
    while (v18);
  }
  v17 = *(void **)v14;
  *(_QWORD *)v14 = 0;
  if (v17)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAA8518(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20EAA8580(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x212BC6398);
}

unsigned __int8 *sub_20EAA85F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  _QWORD *v43;
  float v44;
  float v45;
  uint64_t v46;
  _QWORD *v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t prime;
  int8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD v59[2];
  char v60;

  v5 = (unsigned __int8 *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v59, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v11 - 1;
        v16 = *((_QWORD *)v5 + 1);
        if ((v5[23] & 0x80u) == 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if ((v5[23] & 0x80) != 0)
        {
          v26 = *(const void **)v5;
          if (v12.u32[0] < 2uLL)
          {
            while (1)
            {
              v27 = *((_QWORD *)v14 + 1);
              if (v27 == v10)
              {
                v28 = v14[39];
                v29 = (char)v28;
                if ((v28 & 0x80u) != 0)
                  v28 = *((_QWORD *)v14 + 3);
                if (v17 == v28)
                {
                  v30 = v29 >= 0 ? (char *)(v14 + 16) : (char *)*((_QWORD *)v14 + 2);
                  if (!memcmp(v26, v30, v16))
                    return v14;
                }
              }
              else if ((v27 & v15) != v3)
              {
                goto LABEL_91;
              }
              v14 = *(unsigned __int8 **)v14;
              if (!v14)
                goto LABEL_91;
            }
          }
          while (1)
          {
            v31 = *((_QWORD *)v14 + 1);
            if (v31 == v10)
            {
              v32 = v14[39];
              v33 = (char)v32;
              if ((v32 & 0x80u) != 0)
                v32 = *((_QWORD *)v14 + 3);
              if (v17 == v32)
              {
                v34 = v33 >= 0 ? (char *)(v14 + 16) : (char *)*((_QWORD *)v14 + 2);
                if (!memcmp(v26, v34, v16))
                  return v14;
              }
            }
            else
            {
              if (v31 >= v11)
                v31 %= v11;
              if (v31 != v3)
                goto LABEL_91;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_91;
          }
        }
        if (v12.u32[0] > 1uLL)
        {
          if (!v5[23])
          {
            while (1)
            {
              v35 = *((_QWORD *)v14 + 1);
              if (v35 == v9)
              {
                v36 = v14[39];
                if ((v36 & 0x80u) != 0)
                  v36 = *((_QWORD *)v14 + 3);
                if (v17 == v36)
                  return v14;
              }
              else
              {
                if (v35 >= v11)
                  v35 %= v11;
                if (v35 != v3)
                  goto LABEL_91;
              }
              v14 = *(unsigned __int8 **)v14;
              if (!v14)
                goto LABEL_91;
            }
          }
          while (1)
          {
            v37 = *((_QWORD *)v14 + 1);
            if (v37 == v9)
            {
              v38 = v14[39];
              v39 = (char)v38;
              if ((v38 & 0x80u) != 0)
                v38 = *((_QWORD *)v14 + 3);
              if (v17 == v38)
              {
                if (v39 >= 0)
                  v40 = v14 + 16;
                else
                  v40 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
                v41 = v5;
                v42 = v5[23];
                while (*v41 == *v40)
                {
                  ++v41;
                  ++v40;
                  if (!--v42)
                    return v14;
                }
              }
            }
            else
            {
              if (v37 >= v11)
                v37 %= v11;
              if (v37 != v3)
                goto LABEL_91;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_91;
          }
        }
        if (!v5[23])
        {
          while (1)
          {
            v18 = *((_QWORD *)v14 + 1);
            if (v18 == v9)
            {
              v19 = v14[39];
              if ((v19 & 0x80u) != 0)
                v19 = *((_QWORD *)v14 + 3);
              if (v17 == v19)
                return v14;
            }
            else if ((v18 & v15) != v3)
            {
              goto LABEL_91;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_91;
          }
        }
        do
        {
          v20 = *((_QWORD *)v14 + 1);
          if (v20 == v9)
          {
            v21 = v14[39];
            v22 = (char)v21;
            if ((v21 & 0x80u) != 0)
              v21 = *((_QWORD *)v14 + 3);
            if (v17 == v21)
            {
              if (v22 >= 0)
                v23 = v14 + 16;
              else
                v23 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
              v24 = v5;
              v25 = v5[23];
              while (*v24 == *v23)
              {
                ++v24;
                ++v23;
                if (!--v25)
                  return v14;
              }
            }
          }
          else if ((v20 & v15) != v3)
          {
            break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_91:
  v43 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x28uLL);
  v59[0] = v14;
  v59[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v60 = 1;
  v44 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v45 = *(float *)(a1 + 32);
  if (v11 && (float)(v45 * (float)v11) >= v44)
  {
    v46 = *(_QWORD *)a1;
    v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v47)
    {
LABEL_94:
      *(_QWORD *)v14 = *v47;
LABEL_129:
      *v47 = v14;
      goto LABEL_130;
    }
  }
  else
  {
    v48 = 1;
    if (v11 >= 3)
      v48 = (v11 & (v11 - 1)) != 0;
    v49 = v48 | (2 * v11);
    v50 = vcvtps_u32_f32(v44 / v45);
    if (v49 <= v50)
      prime = v50;
    else
      prime = v49;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v52 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v52)
      goto LABEL_105;
    if (prime < *(_QWORD *)&v52)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v52 < 3uLL || (v54 = (uint8x8_t)vcnt_s8(v52), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (prime <= v53)
        prime = v53;
      if (prime < *(_QWORD *)&v52)
LABEL_105:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v56 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v46 = *(_QWORD *)a1;
        v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v47)
          goto LABEL_94;
      }
      else
      {
        v3 = v10;
        v46 = *(_QWORD *)a1;
        v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v47)
          goto LABEL_94;
      }
    }
    else
    {
      v3 = v56 & v10;
      v46 = *(_QWORD *)a1;
      v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v56 & v10));
      if (v47)
        goto LABEL_94;
    }
  }
  *(_QWORD *)v14 = *v43;
  *v43 = v14;
  *(_QWORD *)(v46 + 8 * v3) = v43;
  if (*(_QWORD *)v14)
  {
    v57 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v57 >= v11)
        v57 %= v11;
    }
    else
    {
      v57 &= v11 - 1;
    }
    v47 = (_QWORD *)(*(_QWORD *)a1 + 8 * v57);
    goto LABEL_129;
  }
LABEL_130:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20EAA8B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAA8B88(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char v42;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v42, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (!*v11)
    return 0;
  v13 = *(_QWORD *)&v7 - 1;
  v14 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
    v15 = v2[23];
  else
    v15 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80) != 0)
  {
    v25 = *(const void **)v2;
    if (v9.u32[0] < 2uLL)
    {
      while (1)
      {
        v26 = v12[1];
        if (v8 == v26)
        {
          v27 = *((unsigned __int8 *)v12 + 39);
          v28 = (char)v27;
          if ((v27 & 0x80u) != 0)
            v27 = v12[3];
          if (v15 == v27)
          {
            v29 = v28 >= 0 ? v12 + 2 : (uint64_t *)v12[2];
            if (!memcmp(v25, v29, v14))
              return v12;
          }
        }
        else if ((v26 & v13) != v10)
        {
          return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
    while (1)
    {
      v30 = v12[1];
      if (v8 == v30)
      {
        v31 = *((unsigned __int8 *)v12 + 39);
        v32 = (char)v31;
        if ((v31 & 0x80u) != 0)
          v31 = v12[3];
        if (v15 == v31)
        {
          v33 = v32 >= 0 ? v12 + 2 : (uint64_t *)v12[2];
          if (!memcmp(v25, v33, v14))
            return v12;
        }
      }
      else
      {
        if (v30 >= *(_QWORD *)&v7)
          v30 %= *(_QWORD *)&v7;
        if (v30 != v10)
          return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  if (v9.u32[0] > 1uLL)
  {
    if (!v2[23])
    {
      while (1)
      {
        v34 = v12[1];
        if (v8 == v34)
        {
          v35 = *((unsigned __int8 *)v12 + 39);
          if ((v35 & 0x80u) != 0)
            v35 = v12[3];
          if (v15 == v35)
            return v12;
        }
        else
        {
          if (v34 >= *(_QWORD *)&v7)
            v34 %= *(_QWORD *)&v7;
          if (v34 != v10)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
    while (1)
    {
      v36 = v12[1];
      if (v8 == v36)
      {
        v37 = *((unsigned __int8 *)v12 + 39);
        v38 = (char)v37;
        if ((v37 & 0x80u) != 0)
          v37 = v12[3];
        if (v15 == v37)
        {
          if (v38 >= 0)
            v39 = (unsigned __int8 *)(v12 + 2);
          else
            v39 = (unsigned __int8 *)v12[2];
          v40 = v2;
          v41 = v2[23];
          while (*v40 == *v39)
          {
            ++v40;
            ++v39;
            if (!--v41)
              return v12;
          }
        }
      }
      else
      {
        if (v36 >= *(_QWORD *)&v7)
          v36 %= *(_QWORD *)&v7;
        if (v36 != v10)
          return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  if (!v2[23])
  {
    while (1)
    {
      v17 = v12[1];
      if (v8 == v17)
      {
        v18 = *((unsigned __int8 *)v12 + 39);
        if ((v18 & 0x80u) != 0)
          v18 = v12[3];
        if (v15 == v18)
          return v12;
      }
      else if ((v17 & v13) != v10)
      {
        return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  do
  {
    v19 = v12[1];
    if (v8 == v19)
    {
      v20 = *((unsigned __int8 *)v12 + 39);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = v12[3];
      if (v15 == v20)
      {
        if (v21 >= 0)
          v22 = (unsigned __int8 *)(v12 + 2);
        else
          v22 = (unsigned __int8 *)v12[2];
        v23 = v2;
        v24 = v2[23];
        while (*v23 == *v22)
        {
          ++v23;
          ++v22;
          if (!--v24)
            return v12;
        }
      }
    }
    else if ((v19 & v13) != v10)
    {
      return 0;
    }
    result = 0;
    v12 = (uint64_t *)*v12;
  }
  while (v12);
  return result;
}

uint64_t *sub_20EAA8F0C(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char v42;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v42, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (!*v11)
    return 0;
  v13 = *(_QWORD *)&v7 - 1;
  v14 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
    v15 = v2[23];
  else
    v15 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80) != 0)
  {
    v25 = *(const void **)v2;
    if (v9.u32[0] < 2uLL)
    {
      while (1)
      {
        v26 = v12[1];
        if (v26 == v8)
        {
          v27 = *((unsigned __int8 *)v12 + 39);
          v28 = (char)v27;
          if ((v27 & 0x80u) != 0)
            v27 = v12[3];
          if (v15 == v27)
          {
            v29 = v28 >= 0 ? v12 + 2 : (uint64_t *)v12[2];
            if (!memcmp(v25, v29, v14))
              return v12;
          }
        }
        else if ((v26 & v13) != v10)
        {
          return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
    while (1)
    {
      v30 = v12[1];
      if (v30 == v8)
      {
        v31 = *((unsigned __int8 *)v12 + 39);
        v32 = (char)v31;
        if ((v31 & 0x80u) != 0)
          v31 = v12[3];
        if (v15 == v31)
        {
          v33 = v32 >= 0 ? v12 + 2 : (uint64_t *)v12[2];
          if (!memcmp(v25, v33, v14))
            return v12;
        }
      }
      else
      {
        if (v30 >= *(_QWORD *)&v7)
          v30 %= *(_QWORD *)&v7;
        if (v30 != v10)
          return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  if (v9.u32[0] > 1uLL)
  {
    if (!v2[23])
    {
      while (1)
      {
        v34 = v12[1];
        if (v34 == v8)
        {
          v35 = *((unsigned __int8 *)v12 + 39);
          if ((v35 & 0x80u) != 0)
            v35 = v12[3];
          if (v15 == v35)
            return v12;
        }
        else
        {
          if (v34 >= *(_QWORD *)&v7)
            v34 %= *(_QWORD *)&v7;
          if (v34 != v10)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
    while (1)
    {
      v36 = v12[1];
      if (v36 == v8)
      {
        v37 = *((unsigned __int8 *)v12 + 39);
        v38 = (char)v37;
        if ((v37 & 0x80u) != 0)
          v37 = v12[3];
        if (v15 == v37)
        {
          if (v38 >= 0)
            v39 = (unsigned __int8 *)(v12 + 2);
          else
            v39 = (unsigned __int8 *)v12[2];
          v40 = v2;
          v41 = v2[23];
          while (*v40 == *v39)
          {
            ++v40;
            ++v39;
            if (!--v41)
              return v12;
          }
        }
      }
      else
      {
        if (v36 >= *(_QWORD *)&v7)
          v36 %= *(_QWORD *)&v7;
        if (v36 != v10)
          return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  if (!v2[23])
  {
    while (1)
    {
      v17 = v12[1];
      if (v17 == v8)
      {
        v18 = *((unsigned __int8 *)v12 + 39);
        if ((v18 & 0x80u) != 0)
          v18 = v12[3];
        if (v15 == v18)
          return v12;
      }
      else if ((v17 & v13) != v10)
      {
        return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  do
  {
    v19 = v12[1];
    if (v19 == v8)
    {
      v20 = *((unsigned __int8 *)v12 + 39);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = v12[3];
      if (v15 == v20)
      {
        if (v21 >= 0)
          v22 = (unsigned __int8 *)(v12 + 2);
        else
          v22 = (unsigned __int8 *)v12[2];
        v23 = v2;
        v24 = v2[23];
        while (*v23 == *v22)
        {
          ++v23;
          ++v22;
          if (!--v24)
            return v12;
        }
      }
    }
    else if ((v19 & v13) != v10)
    {
      return 0;
    }
    result = 0;
    v12 = (uint64_t *)*v12;
  }
  while (v12);
  return result;
}

_QWORD *sub_20EAA9290(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t ***v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **i;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v3 = *a2;
  if (*(_QWORD *)(a3 + 16))
  {
    sub_20E86A980(v3, (uint64_t)"{", 1);
    v6 = *(uint64_t ****)(a3 + 16);
    v7 = *((char *)v6 + 39);
    if (v7 >= 0)
      v8 = (uint64_t)(v6 + 2);
    else
      v8 = (uint64_t)v6[2];
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)v6 + 39);
    else
      v9 = (uint64_t)v6[3];
    sub_20E86A980(*a2, v8, v9);
    for (i = *v6; i; i = (uint64_t **)*i)
    {
      sub_20E86A980(*a2, (uint64_t)",", 1);
      v11 = *((char *)i + 39);
      if (v11 >= 0)
        v12 = (uint64_t)(i + 2);
      else
        v12 = (uint64_t)i[2];
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)i + 39);
      else
        v13 = (uint64_t)i[3];
      sub_20E86A980(*a2, v12, v13);
    }
    v3 = *a2;
    v14 = "}";
    v15 = 1;
  }
  else
  {
    v14 = "{}";
    v15 = 2;
  }
  return sub_20E86A980(v3, (uint64_t)v14, v15);
}

void sub_20EAA937C(char **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *__p;
  int v8[2];

  sub_20EAA9F44((char **)&__p, a1 + 3);
  sub_20EAAA1D0(&__p, *(uint64_t *)v8, *a1, a1[1], 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 5));
  sub_20EAA9460(a2, (uint64_t *)&__p);
  v4 = __p;
  if (__p)
  {
    v5 = *(_QWORD *)v8;
    v6 = __p;
    if (*(void **)v8 != __p)
    {
      do
      {
        if (*(_BYTE *)(v5 - 8))
        {
          if (*(char *)(v5 - 9) < 0)
            operator delete(*(void **)(v5 - 32));
        }
        v5 -= 416;
      }
      while ((void *)v5 != v4);
      v6 = __p;
    }
    *(_QWORD *)v8 = v4;
    operator delete(v6);
  }
}

void sub_20EAA9438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAA9608((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EAA944C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAA9608((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EAA9460(_QWORD *a1, uint64_t *a2)
{
  __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  const std::nothrow_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  CFArrayCallBacks callBacks;

  callBacks.version = 0;
  callBacks.retain = (CFArrayRetainCallBack)sub_20EAADB98;
  callBacks.copyDescription = 0;
  callBacks.equal = 0;
  callBacks.release = (CFArrayReleaseCallBack)sub_20EAADB68;
  v4 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &callBacks);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    do
    {
      v8 = (unsigned int *)operator new(0x158uLL, v7);
      if (v8)
      {
        v9 = v8;
        sub_20EAAD5FC((uint64_t)(v8 + 2), v5, 1);
        v10 = v9 + 84;
        v9[84] = 1;
        *(_QWORD *)v9 = off_24C9C3740;
        CFArrayAppendValue(v4, v9);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
      }
      else
      {
        CFArrayAppendValue(v4, 0);
      }
      v5 += 416;
    }
    while (v5 != v6);
  }
  sub_20E8EACA0(&v16, (std::__shared_weak_count_vtbl *)v4, 0);
  sub_20E8EAEEC(a1, (uint64_t)&v16);
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20EAA95F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20EAA9608(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 52;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EAA9680(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __CFArray *v4;
  uint64_t *v5;
  uint64_t *v6;
  const std::nothrow_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFArrayCallBacks callBacks;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[4];
  uint64_t v20;

  callBacks.version = 0;
  callBacks.retain = (CFArrayRetainCallBack)sub_20EAADB98;
  callBacks.copyDescription = 0;
  callBacks.equal = 0;
  callBacks.release = (CFArrayReleaseCallBack)sub_20EAADB68;
  v4 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &callBacks);
  v5 = *(uint64_t **)(a1 + 72);
  v6 = *(uint64_t **)(a1 + 80);
  if (v5 != v6)
  {
    v7 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    do
    {
      v20 = 0x3FF0000000000000;
      v19[0] = xmmword_210313A80;
      v19[1] = *(_OWORD *)algn_210313A90;
      v19[2] = xmmword_210313AA0;
      v19[3] = unk_210313AB0;
      v17 = 0uLL;
      v18 = 0;
      v8 = (unsigned int *)operator new(0x158uLL, v7);
      if (v8)
      {
        v9 = v8;
        sub_20EAAA8D8((uint64_t)v8, v5, (uint64_t)(v5 + 2), (uint64_t)v19, &v17);
        *(_QWORD *)v9 = off_24C9C3740;
        CFArrayAppendValue(v4, v9);
        v10 = v9 + 84;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
      }
      else
      {
        CFArrayAppendValue(v4, 0);
      }
      v5 += 6;
    }
    while (v5 != v6);
  }
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)v19, (std::__shared_weak_count_vtbl *)v4, 0);
  sub_20E8EAEEC(a2, (uint64_t)v19);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
  if (*((_QWORD *)&v19[0] + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20EAA9848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EAA988C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __CFArray *Mutable;
  CFUUIDBytes *v5;
  CFUUIDBytes *i;
  uint64_t v7;
  int v8;
  BOOL v9;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *value;
  std::__shared_weak_count *v19;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v5 = *(CFUUIDBytes **)(a1 + 120);
  for (i = *(CFUUIDBytes **)(a1 + 128); v5 != i; ++v5)
  {
    v7 = 0;
    do
    {
      v8 = *(&v5->byte0 + v7);
      if (*(&v5->byte0 + v7))
        v9 = 1;
      else
        v9 = v7 == 15;
      ++v7;
    }
    while (!v9);
    if (!v8
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/AnchorUpdate.cpp", 35, (uint64_t)"!request.IsNull()", 17, (uint64_t)&unk_210250A11, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    Default = CFAllocatorGetDefault();
    v11 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *v5);
    sub_20EA68D1C((std::__shared_weak_count_vtbl **)&value, v11, 0);
    CFArrayAppendValue(Mutable, value);
    v12 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)&value, (std::__shared_weak_count_vtbl *)Mutable, 0);
  sub_20E8EAEEC(a2, (uint64_t)&value);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20EAA9A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAA9A94(uint64_t a1, uint64_t a2)
{
  char **v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  v4 = sub_20EAA9F44((char **)a1, (char **)a2);
  sub_20EAA9F44(v4 + 3, (char **)(a2 + 24));
  sub_20EAA9F44((char **)(a1 + 48), (char **)(a2 + 48));
  sub_20EAA9CB0((_QWORD *)(a1 + 72), (uint64_t *)(a2 + 72));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v6 = *(_BYTE **)(a2 + 96);
  v5 = *(_BYTE **)(a2 + 104);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E969238();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v8;
    v9 = &v8[16 * (v7 >> 4)];
    *(_QWORD *)(a1 + 112) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 104) = v9;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v11 = *(_BYTE **)(a2 + 120);
  v10 = *(_BYTE **)(a2 + 128);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E969238();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = v13;
    v14 = &v13[16 * (v12 >> 4)];
    *(_QWORD *)(a1 + 136) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 128) = v14;
  }
  return a1;
}

void sub_20EAA9BAC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;

  sub_20EAA9608(v3);
  sub_20EAA9608(v2);
  sub_20EAA9608(v1);
  _Unwind_Resume(a1);
}

void **sub_20EAA9C38(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EAA9CB0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      sub_20EAA9DC0();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_20EAA9DD4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20EAA9D58(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void **v4;
  void **v5;
  void *v6;

  v1[1] = v2;
  v4 = (void **)*v1;
  if (*v1)
  {
    v5 = (void **)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        if (*((_BYTE *)v5 - 8))
        {
          if (*((char *)v5 - 9) < 0)
            operator delete(*(v5 - 4));
        }
        v5 -= 6;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EAA9DC0()
{
  sub_20E860B90("vector");
}

uint64_t sub_20EAA9DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 24;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)(v6 - 24);
      *(_BYTE *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 40) = 0;
      if (*(_BYTE *)(v6 + 16))
      {
        if (*(char *)(v6 + 15) < 0)
        {
          sub_20E860C04((_BYTE *)(v4 + 16), *(void **)(v6 - 8), *(_QWORD *)v6);
          v8 = v11;
        }
        else
        {
          v7 = *(_OWORD *)(v6 - 8);
          *(_QWORD *)(v4 + 32) = *(_QWORD *)(v6 + 8);
          *(_OWORD *)(v4 + 16) = v7;
          v8 = v4;
        }
        *(_BYTE *)(v4 + 40) = 1;
        v4 = v8;
      }
      v9 = v6 - 24;
      v4 += 48;
      v11 = v4;
      v6 += 48;
    }
    while (v9 + 48 != a3);
  }
  return v4;
}

void sub_20EAA9EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(_BYTE *)(v9 + 40))
  {
    if (*(char *)(v9 + 39) < 0)
      operator delete(*v10);
  }
  sub_20EAA9EDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAA9EDC(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 - 8) && *(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 48;
    }
  }
  return a1;
}

char **sub_20EAA9F44(char **a1, char **a2)
{
  int v3;
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (_DWORD)a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 5);
    if (v7 >= 0x9D89D89D89D89ELL)
      sub_20EAA9DC0();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[416 * v7];
    a1[1] = sub_20EAAA060(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20EAA9FF8(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void **v4;
  void **v5;
  void *v6;

  v1[1] = v2;
  v4 = (void **)*v1;
  if (*v1)
  {
    v5 = (void **)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        if (*((_BYTE *)v5 - 8))
        {
          if (*((char *)v5 - 9) < 0)
            operator delete(*(v5 - 4));
        }
        v5 -= 52;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20EAAA060(int a1, char *__src, char *a3, char *__dst)
{
  char *v4;
  char *v6;
  __int128 v7;
  char *v8;
  char *v10;

  v4 = __dst;
  v10 = __dst;
  if (__src != a3)
  {
    v6 = __src;
    do
    {
      memcpy(v4, v6, 0x179uLL);
      v4[384] = 0;
      v4[408] = 0;
      if (v6[408])
      {
        if (v6[407] < 0)
        {
          sub_20E860C04(v4 + 384, *((void **)v6 + 48), *((_QWORD *)v6 + 49));
          v8 = v10;
        }
        else
        {
          v7 = *((_OWORD *)v6 + 24);
          *((_QWORD *)v4 + 50) = *((_QWORD *)v6 + 50);
          *((_OWORD *)v4 + 24) = v7;
          v8 = v4;
        }
        v4[408] = 1;
        v4 = v8;
      }
      v4 += 416;
      v10 = v4;
      v6 += 416;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_20EAAA13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(_BYTE *)(v9 + 408))
  {
    if (*(char *)(v9 + 407) < 0)
      operator delete(*v10);
  }
  sub_20EAAA168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAAA168(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 - 8) && *(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 416;
    }
  }
  return a1;
}

char *sub_20EAAA1D0(_QWORD *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void **v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  void **v42;
  void *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  void *v56;
  char *v58;
  char *v59;
  void **v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;

  v5 = (char *)*a1;
  v6 = (a2 - *a1) / 416;
  v7 = *a1 + 416 * v6;
  if (a5 < 1)
    return (char *)v7;
  v9 = a3;
  v13 = a1[2];
  v11 = a1 + 2;
  v12 = v13;
  v14 = *(v11 - 1);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - v14) >> 5) >= a5)
  {
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v14 - v7) >> 5) >= a5)
    {
      v61 = &a3[416 * a5];
      v20 = (char *)*(v11 - 1);
      goto LABEL_16;
    }
    v19 = &a3[32 * ((uint64_t)(v14 - v7) >> 5)];
    v20 = sub_20EAAA7D0((int)v11, v19, a4, (char *)*(v11 - 1));
    a1[1] = v20;
    if ((uint64_t)(v14 - v7) >= 1)
    {
      v61 = v19;
LABEL_16:
      v21 = (char *)(v7 + 416 * a5);
      v22 = &v20[-416 * a5];
      v23 = v20;
      if ((unint64_t)v22 < v14)
      {
        v24 = v22;
        v23 = v20;
        do
        {
          memcpy(v23, v24, 0x179uLL);
          v23[384] = 0;
          v23[408] = 0;
          if (v24[408])
          {
            v25 = *((_OWORD *)v24 + 24);
            *((_QWORD *)v23 + 50) = *((_QWORD *)v24 + 50);
            *((_OWORD *)v23 + 24) = v25;
            *((_QWORD *)v24 + 49) = 0;
            *((_QWORD *)v24 + 50) = 0;
            *((_QWORD *)v24 + 48) = 0;
            v23[408] = 1;
          }
          v23 += 416;
          v24 += 416;
        }
        while ((unint64_t)v24 < v14);
      }
      a1[1] = v23;
      if (v20 != v21)
      {
        v26 = 0;
        v27 = -32 * ((v20 - v21) >> 5);
        do
        {
          v28 = &v22[v26];
          v29 = &v20[v26];
          memcpy(&v20[v26 - 416], &v22[v26 - 416], 0x179uLL);
          v30 = (void **)&v20[v26 - 32];
          v31 = &v22[v26 - 32];
          if (v20[v26 - 8] == v22[v26 - 8])
          {
            if (v20[v26 - 8])
            {
              if (v20[v26 - 9] < 0)
                operator delete(*v30);
              v32 = *(_OWORD *)v31;
              *((_QWORD *)v29 - 2) = *((_QWORD *)v28 - 2);
              *(_OWORD *)v30 = v32;
              v22[v26 - 9] = 0;
              *v31 = 0;
            }
          }
          else if (v20[v26 - 8])
          {
            if (v20[v26 - 9] < 0)
              operator delete(*v30);
            *(v29 - 8) = 0;
          }
          else
          {
            v33 = *(_OWORD *)v31;
            *((_QWORD *)v29 - 2) = *((_QWORD *)v28 - 2);
            *(_OWORD *)v30 = v33;
            *((_QWORD *)v28 - 3) = 0;
            *((_QWORD *)v28 - 2) = 0;
            *(_QWORD *)v31 = 0;
            *(v29 - 8) = 1;
          }
          v26 -= 416;
        }
        while (v27 != v26);
      }
      if (v61 != v9)
      {
        v34 = (char *)v7;
        do
        {
          memcpy(v34, v9, 0x179uLL);
          sub_20E869118((uint64_t)(v34 + 384), (_QWORD *)v9 + 48);
          v9 += 416;
          v34 += 416;
        }
        while (v9 != v61);
      }
    }
    return (char *)v7;
  }
  v15 = a5 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v14 - (_QWORD)v5) >> 5);
  if (v15 > 0x9D89D89D89D89DLL)
    sub_20EAA9DC0();
  v16 = 0x4EC4EC4EC4EC4EC5 * ((v12 - (uint64_t)v5) >> 5);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x4EC4EC4EC4EC4ELL)
    v17 = 0x9D89D89D89D89DLL;
  else
    v17 = v15;
  v60 = (void **)a1;
  if (v17)
  {
    if (v17 > 0x9D89D89D89D89DLL)
      sub_20E877A38();
    v18 = (char *)operator new(416 * v17);
  }
  else
  {
    v18 = 0;
  }
  v36 = 0;
  v62 = v6;
  v37 = &v18[416 * v6];
  v63 = v37;
  v64 = &v18[416 * v17];
  v58 = v18;
  v59 = &v37[416 * a5];
  do
  {
    v39 = &v9[v36];
    v40 = &v37[v36];
    memcpy(&v37[v36], &v9[v36], 0x179uLL);
    v40[384] = 0;
    v40[408] = 0;
    if (v9[v36 + 408])
    {
      v41 = v40 + 384;
      v42 = (void **)(v39 + 384);
      if (v39[407] < 0)
      {
        sub_20E860C04(v41, *v42, *(_QWORD *)&v9[v36 + 392]);
      }
      else
      {
        v38 = *(_OWORD *)v42;
        *((_QWORD *)v40 + 50) = *((_QWORD *)v39 + 50);
        *(_OWORD *)v41 = v38;
      }
      v40[408] = 1;
    }
    v36 += 416;
  }
  while (416 * a5 != v36);
  v35 = v37;
  v43 = *v60;
  v44 = v37;
  if (*v60 != (void *)v7)
  {
    v45 = 0;
    do
    {
      v46 = &v63[v45];
      v47 = v7 + v45;
      memcpy(&v63[v45 - 416], (const void *)(v7 + v45 - 416), 0x179uLL);
      *(v46 - 32) = 0;
      *(v46 - 8) = 0;
      if (*(_BYTE *)(v7 + v45 - 8))
      {
        v48 = *(_OWORD *)(v47 - 32);
        *((_QWORD *)v46 - 2) = *(_QWORD *)(v47 - 16);
        *((_OWORD *)v46 - 2) = v48;
        *(_QWORD *)(v47 - 24) = 0;
        *(_QWORD *)(v47 - 16) = 0;
        *(_QWORD *)(v47 - 32) = 0;
        *(v46 - 8) = 1;
      }
      v45 -= 416;
    }
    while ((void *)(v7 + v45) != v43);
    v44 = &v63[v45];
  }
  v49 = (char *)v60[1];
  v50 = v59;
  if (v49 != (char *)v7)
  {
    v51 = 416 * v62;
    v52 = &v58[416 * a5];
    do
    {
      v53 = &v52[v51];
      v54 = &v5[v51];
      memcpy(&v52[v51], &v5[v51], 0x179uLL);
      v53[384] = 0;
      v53[408] = 0;
      if (v5[v51 + 408])
      {
        v55 = *((_OWORD *)v54 + 24);
        *((_QWORD *)v53 + 50) = *((_QWORD *)v54 + 50);
        *((_OWORD *)v53 + 24) = v55;
        *((_QWORD *)v54 + 49) = 0;
        *((_QWORD *)v54 + 50) = 0;
        *((_QWORD *)v54 + 48) = 0;
        v53[408] = 1;
      }
      v52 += 416;
      v5 += 416;
    }
    while (v54 + 416 != v49);
    v7 = (uint64_t)v60[1];
    v50 = &v52[416 * v62];
  }
  v56 = *v60;
  *v60 = v44;
  v60[1] = v50;
  v60[2] = v64;
  while ((void *)v7 != v56)
  {
    if (*(_BYTE *)(v7 - 8))
    {
      if (*(char *)(v7 - 9) < 0)
        operator delete(*(void **)(v7 - 32));
    }
    v7 -= 416;
  }
  if (v56)
    operator delete(v56);
  return v35;
}

void sub_20EAAA728(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EAAA730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = v16 + v17;
  if (*(_BYTE *)(v16 + v17 + 408))
  {
    if (*(char *)(v19 + 407) < 0)
      operator delete(*(void **)(v19 + 384));
  }
  a16 = v16 + v17;
  sub_20EAAA764((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAAA764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 416;
      *(_QWORD *)(a1 + 16) = v2 - 416;
      if (*(_BYTE *)(v2 - 8) && *(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EAAA7D0(int a1, char *__src, char *a3, char *__dst)
{
  char *v4;
  char *v6;
  __int128 v7;
  char *v8;
  char *v10;

  v4 = __dst;
  v10 = __dst;
  if (__src != a3)
  {
    v6 = __src;
    do
    {
      memcpy(v4, v6, 0x179uLL);
      v4[384] = 0;
      v4[408] = 0;
      if (v6[408])
      {
        if (v6[407] < 0)
        {
          sub_20E860C04(v4 + 384, *((void **)v6 + 48), *((_QWORD *)v6 + 49));
          v8 = v10;
        }
        else
        {
          v7 = *((_OWORD *)v6 + 24);
          *((_QWORD *)v4 + 50) = *((_QWORD *)v6 + 50);
          *((_OWORD *)v4 + 24) = v7;
          v8 = v4;
        }
        v4[408] = 1;
        v4 = v8;
      }
      v4 += 416;
      v10 = v4;
      v6 += 416;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_20EAAA8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(_BYTE *)(v9 + 408))
  {
    if (*(char *)(v9 + 407) < 0)
      operator delete(*v10);
  }
  sub_20EAAA168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAAA8D8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v12;
  char v13;

  v8 = *a2;
  v9 = a2[1];
  LOBYTE(__p[0]) = 0;
  v13 = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20E860C04(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v12 = *(_QWORD *)(a3 + 16);
    }
    v13 = 1;
  }
  sub_20EAAD408(a1 + 8, v8, v9, (__int128 *)__p, a4, a5, 1);
  if (v13 && SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_24C9B00A0;
  *(_DWORD *)(a1 + 336) = 1;
  return a1;
}

void sub_20EAAA9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAAA9D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EAAAA7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAAAB28(uint64_t a1, uint64_t a2, CFTypeRef *a3, double a4)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  CFTypeRef v24;
  unint64_t *p_shared_owners;
  CFTypeRef v26;
  unint64_t *v27;
  const std::error_category *v28;
  CFTypeRef v29;
  unint64_t *v30;
  char *v31;
  void *__p;
  __int128 v33;
  CFTypeRef cf;
  std::__shared_weak_count *v35;
  std::error_condition v36;

  if (a4 >= 0.0)
  {
    if (*(_DWORD *)(a1 + 4) >= 2u)
    {
      __p = operator new(0x20uLL);
      v33 = xmmword_2102DBFF0;
      strcpy((char *)__p, "Stream ID must be either 0 or 1");
      v5 = (char *)operator new(0x58uLL);
      v31 = v5;
      strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/CameraFrame.cpp");
      if (a3)
      {
        *(_QWORD *)&v36.__val_ = 22;
        v36.__cat_ = std::generic_category();
        sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v24 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v24;
        v7 = v35;
        if (!v35)
          goto LABEL_51;
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        goto LABEL_49;
      }
      goto LABEL_52;
    }
    v11 = *(_QWORD *)(a2 + 8);
    if (!v11)
      goto LABEL_41;
    v12 = *(std::__shared_weak_count **)(v11 + 8);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v16 = *(uint64_t **)(a2 + 8);
    if (!v16)
      goto LABEL_41;
    v18 = *v16;
    v17 = (std::__shared_weak_count *)v16[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (!v18)
    {
LABEL_41:
      __p = operator new(0x28uLL);
      v33 = xmmword_2102DC280;
      strcpy((char *)__p, "CVPixelBuffer can not be nullptr");
      v5 = (char *)operator new(0x58uLL);
      v31 = v5;
      strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/CameraFrame.cpp");
      if (a3)
      {
        *(_QWORD *)&v36.__val_ = 22;
        v36.__cat_ = std::generic_category();
        sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v26 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v26;
        v7 = v35;
        if (!v35)
          goto LABEL_51;
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v9 = __ldaxr(v27);
        while (__stlxr(v9 - 1, v27));
        goto LABEL_49;
      }
      goto LABEL_52;
    }
    v22 = sub_21015BE44(a2);
    if (v22 != 875704422)
    {
      if (v22 == 1278226488)
      {
        if ((char *)&v33 - (char *)&__p != 12)
          return 1;
      }
      else if (v22 == 875704438)
      {
        if ((char *)&__p + 4 - (char *)&__p != 12)
          return 1;
      }
      else if ((char *)&v33 + 4 - (char *)&__p != 12)
      {
        return 1;
      }
      __p = operator new(0xC0uLL);
      v33 = xmmword_210313AE0;
      strcpy((char *)__p, "CVPixelBuffer has an invalid format. Valid formats are kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange, kCVPixelFormatType_420YpCbCr8BiPlanarFullRange or kCVPixelFormatType_OneComponent8.");
      v5 = (char *)operator new(0x58uLL);
      v31 = v5;
      strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/CameraFrame.cpp");
      if (!a3)
        goto LABEL_52;
      v28 = std::generic_category();
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = v28;
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v29 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v29;
      v7 = v35;
      if (!v35)
        goto LABEL_51;
      v30 = (unint64_t *)&v35->__shared_owners_;
      do
        v9 = __ldaxr(v30);
      while (__stlxr(v9 - 1, v30));
      goto LABEL_49;
    }
    return 1;
  }
  __p = operator new(0x40uLL);
  v33 = xmmword_2102DBBD0;
  strcpy((char *)__p, "SLAM Camera timestamp must be greater than or equal to 0");
  v5 = (char *)operator new(0x58uLL);
  v31 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/CameraFrame.cpp");
  if (a3)
  {
    *(_QWORD *)&v36.__val_ = 22;
    v36.__cat_ = std::generic_category();
    sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v35;
    if (!v35)
      goto LABEL_51;
    v8 = (unint64_t *)&v35->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
LABEL_49:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_51:
    v5 = v31;
  }
LABEL_52:
  operator delete(v5);
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  return 0;
}

void sub_20EAAB0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAAB158(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v1 = (std::__shared_weak_count *)a1[11];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = a1[12];
  v5 = (std::__shared_weak_count *)a1[13];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    do
      v8 = __ldxr(v6);
    while (__stxr(v8 + 1, v6));
  }
  if (v4)
  {
    v10 = *(uint64_t **)(v4 + 8);
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (!v5)
      goto LABEL_18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if (!v5)
      goto LABEL_18;
  }
  v13 = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v10)
      goto LABEL_19;
LABEL_26:
    v15 = 0;
    goto LABEL_27;
  }
LABEL_18:
  if (!v10)
    goto LABEL_26;
LABEL_19:
  v15 = *v10;
  v16 = (std::__shared_weak_count *)v10[1];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (!v9)
    goto LABEL_31;
LABEL_27:
  v20 = (unint64_t *)&v9->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      goto LABEL_37;
  }
  else
  {
LABEL_31:
    if (!v5)
      goto LABEL_37;
  }
  v22 = (unint64_t *)&v5->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_37:
  if (!v1)
    return v15;
  v24 = (unint64_t *)&v1->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
    return v15;
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  return v15;
}

uint64_t sub_20EAAB344(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p;
  __int128 v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v8 = *v4;
    v7 = (std::__shared_weak_count *)v4[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      if (v8)
      {
LABEL_8:
        v12 = operator new(0x30uLL);
        v12[1] = 0;
        v12[2] = 0;
        *v12 = &off_24CA18420;
        v12[3] = &off_24CA1A9A0;
        v13 = *(_QWORD *)(a2 + 16);
        v12[4] = *(_QWORD *)(a2 + 8);
        v12[5] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(std::__shared_weak_count **)(a1 + 104);
        *(_QWORD *)(a1 + 96) = v12 + 3;
        *(_QWORD *)(a1 + 104) = v12;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        return 1;
      }
    }
  }
  __p = operator new(0x30uLL);
  v26 = xmmword_2102DCA00;
  strcpy((char *)__p, "The hwfp cannot be NULL when adding hwfp.");
  v20 = (char *)operator new(0x58uLL);
  strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/CameraFrame.cpp");
  if (a3)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v21 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v21;
    v22 = v28;
    if (v28)
    {
      v23 = (unint64_t *)&v28->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  operator delete(v20);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return 0;
}

void sub_20EAAB5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EAAB5EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _OWORD v15[17];
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  sub_20F425A48((unint64_t *)a1, (uint64_t)&v18);
  v4 = **(unsigned __int8 **)(a1 + 104);
  memset(v15, 0, sizeof(v15));
  v16 = 0u;
  v17 = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = 0;
  v18 = 0uLL;
  v19 = 0;
  *(_DWORD *)(a2 + 112) = v4;
  *(_BYTE *)(a2 + 116) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  sub_20E8A049C((_QWORD *)(a2 + 192), (uint64_t *)v15);
  v5 = *((_QWORD *)&v16 + 1);
  *(_QWORD *)(a2 + 464) = v16;
  *(_QWORD *)(a2 + 472) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_BYTE *)(a2 + 480) = v17;
    *(_BYTE *)(a2 + 488) = 1;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    *(_BYTE *)(a2 + 480) = v17;
    *(_BYTE *)(a2 + 488) = 1;
  }
  sub_20E86177C(v15);
  v11 = v18;
  if ((_QWORD)v18)
  {
    v12 = *((_QWORD *)&v18 + 1);
    v13 = (void *)v18;
    if (*((_QWORD *)&v18 + 1) != (_QWORD)v18)
    {
      do
      {
        if (*(_QWORD *)(v12 - 104))
        {
          v14 = *(void **)(v12 - 120);
          if ((void *)(v12 - 96) != v14)
            operator delete(v14);
        }
        v12 -= 120;
      }
      while (v12 != v11);
      v13 = (void *)v18;
    }
    *((_QWORD *)&v18 + 1) = v11;
    operator delete(v13);
  }
}

void **sub_20EAAB76C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_QWORD *)v3 - 13))
        {
          v5 = (char *)*((_QWORD *)v3 - 15);
          if (v3 - 96 != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EAAB7E8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20EAAB828(uint64_t a1, unint64_t a2, int a3)
{
  size_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = 8 * a2;
  if (a2)
  {
    if (a2 >> 61)
      sub_20E867F44();
    v7 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 24) = &v7[8 * a2];
    bzero(v7, v6);
    *(_QWORD *)(a1 + 16) = &v7[v6];
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = xmmword_210313B70;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (a2)
  {
    v8 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 144) = v8;
    *(_QWORD *)(a1 + 160) = &v8[8 * a2];
    bzero(v8, v6);
    *(_QWORD *)(a1 + 152) = &v8[v6];
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 248) = xmmword_210313B70;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  v9 = operator new(0x20uLL);
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0;
  *v9 = &off_24C9C36D8;
  *(_QWORD *)(a1 + 288) = v9 + 3;
  *(_QWORD *)(a1 + 296) = v9;
  *(_DWORD *)(a1 + 304) = a3;
  *(_BYTE *)(a1 + 312) = 0;
  return a1;
}

void sub_20EAAB970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EAAB9B8(unsigned int *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 v28;
  int v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  int v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  __uint64_t v59[2];
  void *v60;
  _BYTE v61[10];
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  _BYTE v65[10];
  double v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  unsigned int v70;
  void *v71;
  char v72;
  char v73;
  void *v74;
  char v75;
  void *__p;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 22))
  {
    v2 = *((_QWORD *)a1 + 11);
    if (v2)
    {
      v3 = *((unsigned __int8 *)a1 + 12);
      v4 = *((_QWORD *)a1 + 7) + 8 * v2;
      v5 = *((_QWORD *)a1 + 28);
      if (v5)
      {
LABEL_4:
        v6 = *((_QWORD *)a1 + 24);
        goto LABEL_7;
      }
    }
    else
    {
      v3 = *((unsigned __int8 *)a1 + 12);
      v4 = *((_QWORD *)a1 + 7) + 8 * ((uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 3);
      v5 = *((_QWORD *)a1 + 28);
      if (v5)
        goto LABEL_4;
    }
    v6 = *((_QWORD *)a1 + 24);
    v5 = (*((_QWORD *)a1 + 25) - v6) >> 3;
LABEL_7:
    v7 = *(_QWORD *)(v4 - 8);
    v8 = *(_QWORD *)(v6 + 8 * v5 - 8);
    if (*((_BYTE *)a1 + 24))
      v9 = *((double *)a1 + 2);
    else
      v9 = NAN;
    if (*((_BYTE *)a1 + 40))
      v10 = *((double *)a1 + 4);
    else
      v10 = NAN;
    if (v3)
    {
      v11 = *((unsigned __int8 *)a1 + 360);
      *((_BYTE *)a1 + 360) = 0;
      v12 = *((_QWORD *)a1 + 42);
      if (!v11)
      {
        if (*(_BYTE *)(v12 + 4))
        {
          v37 = a1[88];
          if (v37)
          {
            if (*(_DWORD *)v12 < v37 - 1)
            {
              ++*(_DWORD *)v12;
              goto LABEL_55;
            }
          }
        }
      }
      *(_DWORD *)v12 = 0;
      *(_BYTE *)(v12 + 4) = 1;
      v13 = sub_210219C18();
      v14 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
      {
LABEL_53:
        if (os_signpost_enabled((os_log_t)*v13))
        {
          v39 = *a1;
          v40 = a1[1];
          v41 = a1[2];
          LODWORD(v60) = 67110656;
          HIDWORD(v60) = v39;
          *(_WORD *)v61 = 2048;
          *(_QWORD *)&v61[2] = v7;
          v62 = 2048;
          v63 = v8;
          v64 = 2048;
          *(double *)v65 = v9;
          *(_WORD *)&v65[8] = 2048;
          v66 = v10;
          v67 = 1024;
          v68 = v40;
          v69 = 1024;
          v70 = v41;
          _os_signpost_emit_unreliably_with_name_impl();
        }
LABEL_55:
        v42 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
        if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
        {
          sub_20FCFB524();
          __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6D9C8);
        }
        v43 = *((_QWORD *)a1 + 11);
        if (v43)
        {
          v44 = *a1;
          v45 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 8 * v43 - 8);
          v46 = *((_QWORD *)a1 + 28);
          if (v46)
          {
LABEL_58:
            v47 = *((_QWORD *)a1 + 24);
LABEL_61:
            v48 = *((double *)a1 + 2);
            v49 = 0x7FF8000000000000;
            if (!*((_BYTE *)a1 + 24))
              v48 = NAN;
            if (*((_BYTE *)a1 + 40))
              v49 = *((_QWORD *)a1 + 4);
            sub_210237040("Frame: Camera ID: [%02u], Rate:%f, Latency:%f, Expiration timestamp:%f, FP Expiration timestamp:%f, Illum. current:%u, Illum. pulse width:%u", (std::string *)&v60, v44, v45, *(_QWORD *)(v47 + 8 * v46 - 8), *(_QWORD *)&v48, v49, a1[1], a1[2]);
            sub_20EA5C6C8((uint64_t)&v60, qword_254A6D9A8);
LABEL_90:
            if (SBYTE3(v63) < 0)
              operator delete(v60);
            return;
          }
        }
        else
        {
          v44 = *a1;
          v45 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 8 * ((uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 3) - 8);
          v46 = *((_QWORD *)a1 + 28);
          if (v46)
            goto LABEL_58;
        }
        v47 = *((_QWORD *)a1 + 24);
        v46 = (*((_QWORD *)a1 + 25) - v47) >> 3;
        goto LABEL_61;
      }
      v16 = *a1;
      v17 = a1[1];
      v18 = a1[2];
      LODWORD(v60) = 67110656;
      HIDWORD(v60) = v16;
      *(_WORD *)v61 = 2048;
      *(_QWORD *)&v61[2] = v7;
      v62 = 2048;
      v63 = v8;
      v64 = 2048;
      *(double *)v65 = v9;
      *(_WORD *)&v65[8] = 2048;
      v66 = v10;
      v67 = 1024;
      v68 = v17;
      v69 = 1024;
      v70 = v18;
      v19 = (char *)_os_log_send_and_compose_impl();
      v20 = strlen(v19);
      v59[0] = 0;
      pthread_threadid_np(0, v59);
      v21 = v59[0];
      timespec_get((timespec *)v59, 1);
      sub_210219E20(&v60, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v13 + 1), (__int128 *)(v13 + 5), "Frame: Camera ID: [%02u], Rate:%f, Latency:%f, Expiration timestamp:%f, FP Expiration timestamp:%f, Illum. current:%u, Illum. pulse width:%u", 0x8CuLL, v19, v20, v21, v59);
      std::mutex::lock(&stru_254A5A410);
      v22 = qword_254A5A458;
      for (i = unk_254A5A460; v22 != i; v22 += 40)
      {
        v24 = *(_QWORD *)(v22 + 32);
        if (!v24)
          sub_20E86D37C();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 48))(v24, &v60);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v77 < 0)
      {
        operator delete(__p);
        if ((v75 & 0x80000000) == 0)
        {
LABEL_22:
          if (!v73)
          {
LABEL_46:
            if ((_BYTE)v70 && SHIBYTE(v69) < 0)
              operator delete(*(void **)&v65[2]);
            if ((v65[1] & 0x80000000) != 0)
              operator delete(*(void **)v61);
            if (v19)
              free(v19);
            goto LABEL_53;
          }
LABEL_44:
          if (v72 < 0)
            operator delete(v71);
          goto LABEL_46;
        }
      }
      else if ((v75 & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(v74);
      if (!v73)
        goto LABEL_46;
      goto LABEL_44;
    }
    v25 = *((unsigned __int8 *)a1 + 360);
    *((_BYTE *)a1 + 360) = 0;
    v26 = *((_QWORD *)a1 + 42);
    if (!v25)
    {
      if (*(_BYTE *)(v26 + 4))
      {
        v38 = a1[88];
        if (v38)
        {
          if (*(_DWORD *)v26 < v38 - 1)
          {
            ++*(_DWORD *)v26;
            goto LABEL_79;
          }
        }
      }
    }
    *(_DWORD *)v26 = 0;
    *(_BYTE *)(v26 + 4) = 1;
    v27 = sub_210219C18();
    v28 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_77:
      if (os_signpost_enabled((os_log_t)*v27))
      {
        v50 = *a1;
        LODWORD(v60) = 67110144;
        HIDWORD(v60) = v50;
        *(_WORD *)v61 = 2048;
        *(_QWORD *)&v61[2] = v7;
        v62 = 2048;
        v63 = v8;
        v64 = 2048;
        *(double *)v65 = v9;
        *(_WORD *)&v65[8] = 2048;
        v66 = v10;
        _os_signpost_emit_unreliably_with_name_impl();
      }
LABEL_79:
      v51 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
      {
        sub_20FCFB524();
        __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6D9C8);
      }
      v52 = *((_QWORD *)a1 + 11);
      if (v52)
      {
        v53 = *a1;
        v54 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 8 * v52 - 8);
        v55 = *((_QWORD *)a1 + 28);
        if (v55)
        {
LABEL_82:
          v56 = *((_QWORD *)a1 + 24);
LABEL_85:
          v57 = *((double *)a1 + 2);
          v58 = 0x7FF8000000000000;
          if (!*((_BYTE *)a1 + 24))
            v57 = NAN;
          if (*((_BYTE *)a1 + 40))
            v58 = *((_QWORD *)a1 + 4);
          sub_210237040("Frame: Camera ID: [%02u], Rate:%f, Latency:%f, Expiration timestamp:%f, FP Expiration timestamp:%f", (std::string *)&v60, v53, v54, *(_QWORD *)(v56 + 8 * v55 - 8), *(_QWORD *)&v57, v58);
          sub_20EA5C6C8((uint64_t)&v60, qword_254A6D9A8);
          goto LABEL_90;
        }
      }
      else
      {
        v53 = *a1;
        v54 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 8 * ((uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 3) - 8);
        v55 = *((_QWORD *)a1 + 28);
        if (v55)
          goto LABEL_82;
      }
      v56 = *((_QWORD *)a1 + 24);
      v55 = (*((_QWORD *)a1 + 25) - v56) >> 3;
      goto LABEL_85;
    }
    v30 = *a1;
    LODWORD(v60) = 67110144;
    HIDWORD(v60) = v30;
    *(_WORD *)v61 = 2048;
    *(_QWORD *)&v61[2] = v7;
    v62 = 2048;
    v63 = v8;
    v64 = 2048;
    *(double *)v65 = v9;
    *(_WORD *)&v65[8] = 2048;
    v66 = v10;
    v31 = (char *)_os_log_send_and_compose_impl();
    v32 = strlen(v31);
    v59[0] = 0;
    pthread_threadid_np(0, v59);
    v33 = v59[0];
    timespec_get((timespec *)v59, 1);
    sub_210219E20(&v60, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v27 + 1), (__int128 *)(v27 + 5), "Frame: Camera ID: [%02u], Rate:%f, Latency:%f, Expiration timestamp:%f, FP Expiration timestamp:%f", 0x62uLL, v31, v32, v33, v59);
    std::mutex::lock(&stru_254A5A410);
    v34 = qword_254A5A458;
    for (j = unk_254A5A460; v34 != j; v34 += 40)
    {
      v36 = *(_QWORD *)(v34 + 32);
      if (!v36)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v36 + 48))(v36, &v60);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v77 < 0)
    {
      operator delete(__p);
      if ((v75 & 0x80000000) == 0)
      {
LABEL_32:
        if (!v73)
        {
LABEL_70:
          if ((_BYTE)v70 && SHIBYTE(v69) < 0)
            operator delete(*(void **)&v65[2]);
          if ((v65[1] & 0x80000000) != 0)
            operator delete(*(void **)v61);
          if (v31)
            free(v31);
          goto LABEL_77;
        }
LABEL_68:
        if (v72 < 0)
          operator delete(v71);
        goto LABEL_70;
      }
    }
    else if ((v75 & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v74);
    if (!v73)
      goto LABEL_70;
    goto LABEL_68;
  }
}

void sub_20EAAC2E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20EAAC300(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20EAAC318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;

  if (a54 < 0)
  {
    operator delete(__p);
    if ((a48 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a42)
        goto LABEL_9;
LABEL_7:
      if (a41 < 0)
        operator delete(a36);
LABEL_9:
      if (a35 && a34 < 0)
        operator delete(a29);
      if (a28 < 0)
        operator delete(a20);
      if (v54)
      {
        free(v54);
        _Unwind_Resume(exception_object);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a48 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a43);
  if (!a42)
    goto LABEL_9;
  goto LABEL_7;
}

double sub_20EAAC490(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  return result;
}

void sub_20EAAC4AC(uint64_t a1, double *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  uint8x8_t v21;
  char **v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  unint64_t v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  double v54;
  double v55;
  char v56;
  double v57;
  double v58;
  char v59;
  double v60;
  double v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  BOOL v69;
  int v70;
  int v72;
  double v74;
  double v75;
  double v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  __int128 v106;
  _BYTE v107[25];
  void *v108;
  void *v109[2];
  void *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char *v114;

  v3 = a3;
  v6 = *(_DWORD *)(a3 + 4);
  if (v6 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *(_DWORD *)(v3 + 4);
  }
  v7 = v6 + 10 * *(_DWORD *)v3;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6 + 10 * *(_DWORD *)v3;
      if (v8 <= v7)
        v10 = v7 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v7)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
                goto LABEL_137;
            }
            else if ((v14 & (v8 - 1)) != v10)
            {
              goto LABEL_24;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_24;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v7)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
              goto LABEL_137;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v10)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_24:
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_DWORD *)(a1 + 48);
  LODWORD(v106) = v7;
  BYTE4(v106) = 0;
  BYTE12(v106) = 0;
  v107[0] = 0;
  v107[8] = 0;
  v107[16] = 0;
  v107[24] = 0;
  v108 = 0;
  v17 = 8 * v15;
  if (v15)
  {
    if (v15 >> 61)
      sub_20E867F44();
    v18 = (char *)operator new(8 * v15);
    v108 = v18;
    v104 = &v18[8 * v15];
    bzero(v18, 8 * v15);
    v103 = &v18[v17];
  }
  else
  {
    v103 = 0;
    v104 = 0;
    v18 = 0;
  }
  *(_OWORD *)v109 = 0u;
  v110 = 0;
  if (v15)
  {
    v19 = (char *)operator new(8 * v15);
    v110 = v19;
    v102 = &v19[8 * v15];
    bzero(v19, 8 * v15);
    v101 = &v19[v17];
  }
  else
  {
    v101 = 0;
    v102 = 0;
    v19 = 0;
  }
  v111 = 0u;
  *(_QWORD *)&v112 = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)&v112 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  LOBYTE(v113) = 0;
  BYTE8(v113) = 0;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C36D8;
  v20[1].__vftable = 0;
  v105 = v3;
  if (!v8)
    goto LABEL_53;
  v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v3 = v7;
    if (v8 <= v7)
      v3 = v7 % v8;
  }
  else
  {
    v3 = ((_DWORD)v8 - 1) & v7;
  }
  v22 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
  if (!v22)
  {
LABEL_53:
    v114 = (char *)operator new(0x188uLL);
    *(_QWORD *)v114 = 0;
    *((_QWORD *)v114 + 1) = v7;
    *((_DWORD *)v114 + 4) = v7;
    *(_OWORD *)(v114 + 24) = v106;
    *(_OWORD *)(v114 + 40) = *(_OWORD *)v107;
    *(_OWORD *)(v114 + 49) = *(_OWORD *)&v107[9];
    *((_QWORD *)v114 + 9) = v15;
    *((_QWORD *)v114 + 10) = v18;
    *((_QWORD *)v114 + 11) = v103;
    *((_QWORD *)v114 + 12) = v104;
    *(_OWORD *)(v114 + 152) = 0u;
    *(_OWORD *)(v114 + 168) = 0u;
    *(_OWORD *)(v114 + 184) = xmmword_210313B70;
    *((_OWORD *)v114 + 19) = 0u;
    *((_OWORD *)v114 + 20) = v112;
    v108 = 0;
    *(_OWORD *)(v114 + 104) = 0u;
    *(_OWORD *)(v114 + 120) = 0u;
    *(_OWORD *)(v114 + 136) = 0u;
    v109[1] = 0;
    *((_QWORD *)v114 + 25) = 0;
    *((_QWORD *)v114 + 26) = v15;
    v26 = (_QWORD *)(a1 + 16);
    *((_QWORD *)v114 + 27) = v19;
    *((_QWORD *)v114 + 28) = v101;
    *((_QWORD *)v114 + 29) = v102;
    v110 = 0;
    *((_OWORD *)v114 + 15) = 0u;
    *((_OWORD *)v114 + 16) = 0u;
    *((_QWORD *)&v111 + 1) = 0;
    *((_QWORD *)v114 + 42) = 0;
    *((_OWORD *)v114 + 17) = 0u;
    *((_OWORD *)v114 + 18) = 0u;
    *(_OWORD *)(v114 + 344) = v113;
    *((_QWORD *)v114 + 45) = v20 + 1;
    *((_QWORD *)v114 + 46) = v20;
    *((_DWORD *)v114 + 94) = v16;
    v114[384] = 0;
    v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v28 = *(float *)(a1 + 32);
    if (v8 && (float)(v28 * (float)v8) >= v27)
    {
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      v12 = v114;
      if (v29)
      {
LABEL_56:
        *(_QWORD *)v12 = *v29;
        v3 = v105;
        goto LABEL_124;
      }
LABEL_118:
      *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v26;
      v3 = v105;
      if (!*(_QWORD *)v12)
      {
LABEL_125:
        ++*(_QWORD *)(a1 + 24);
        goto LABEL_129;
      }
      v51 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v51 >= v8)
          v51 %= v8;
      }
      else
      {
        v51 &= v8 - 1;
      }
      v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v51);
LABEL_124:
      *v29 = v12;
      goto LABEL_125;
    }
    v30 = v8 < 3 || (v8 & (v8 - 1)) != 0;
    v31 = v30 | (2 * v8);
    v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if (prime > v8)
    {
LABEL_68:
      if (prime >> 61)
        sub_20E877A38();
      v34 = operator new(8 * prime);
      v35 = *(void **)a1;
      *(_QWORD *)a1 = v34;
      if (v35)
        operator delete(v35);
      v36 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v36++) = 0;
      while (prime != v36);
      v37 = (_QWORD *)*v26;
      if (!*v26)
        goto LABEL_100;
      v38 = v37[1];
      v39 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v40 = v38 & v39;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v26;
        for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
        {
          v42 = i[1] & v39;
          if (v42 == v40)
          {
            v37 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
          {
            *v37 = *i;
            v43 = 8 * v42;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v43);
            **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v37;
            v37 = i;
            v40 = v42;
          }
        }
        goto LABEL_100;
      }
      if (v38 >= prime)
        v38 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v26;
      v47 = (_QWORD *)*v37;
      if (!*v37)
      {
LABEL_100:
        v8 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_101;
        goto LABEL_117;
      }
      while (1)
      {
        v49 = v47[1];
        if (v49 >= prime)
          v49 %= prime;
        if (v49 == v38)
          goto LABEL_94;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v49))
        {
          *v37 = *v47;
          v48 = 8 * v49;
          *v47 = **(_QWORD **)(*(_QWORD *)a1 + v48);
          **(_QWORD **)(*(_QWORD *)a1 + v48) = v47;
          v47 = v37;
LABEL_94:
          v37 = v47;
          v47 = (_QWORD *)*v47;
          if (!v47)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v37;
          v37 = v47;
          v47 = (_QWORD *)*v47;
          v38 = v49;
          if (!v47)
            goto LABEL_100;
        }
      }
    }
    if (prime < v8)
    {
      v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime < v8)
      {
        if (!prime)
        {
          v50 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v50)
            operator delete(v50);
          v8 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          goto LABEL_117;
        }
        goto LABEL_68;
      }
      v8 = *(_QWORD *)(a1 + 8);
    }
    if ((v8 & (v8 - 1)) != 0)
    {
LABEL_101:
      if (v8 <= v7)
      {
        v3 = v7 % v8;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        v12 = v114;
        if (v29)
          goto LABEL_56;
      }
      else
      {
        v3 = v7;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        v12 = v114;
        if (v29)
          goto LABEL_56;
      }
      goto LABEL_118;
    }
LABEL_117:
    v3 = ((_DWORD)v8 - 1) & v7;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    v12 = v114;
    if (v29)
      goto LABEL_56;
    goto LABEL_118;
  }
  v23 = v16;
  v12 = *v22;
  if (!*v22)
  {
LABEL_52:
    v16 = v23;
    goto LABEL_53;
  }
  if (v21.u32[0] < 2uLL)
  {
    while (1)
    {
      v25 = *((_QWORD *)v12 + 1);
      if (v25 == v7)
      {
        if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
          goto LABEL_106;
      }
      else if ((v25 & (v8 - 1)) != v3)
      {
        goto LABEL_52;
      }
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_52;
    }
  }
  while (1)
  {
    v24 = *((_QWORD *)v12 + 1);
    if (v24 == v7)
      break;
    if (v24 >= v8)
      v24 %= v8;
    if (v24 != v3)
      goto LABEL_52;
LABEL_42:
    v12 = *(char **)v12;
    if (!v12)
      goto LABEL_52;
  }
  if (*((_DWORD *)v12 + 4) != (_DWORD)v7)
    goto LABEL_42;
LABEL_106:
  v3 = v105;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v53 = __ldaxr(p_shared_owners);
  while (__stlxr(v53 - 1, p_shared_owners));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_129:
  if (*((_QWORD *)&v111 + 1))
    operator delete(*((void **)&v111 + 1));
  if (v110)
    operator delete(v110);
  if (v109[1])
    operator delete(v109[1]);
  if (v108)
    operator delete(v108);
LABEL_137:
  v54 = *(double *)(v3 + 24);
  v55 = *a2 - v54;
  v56 = *(_BYTE *)(v3 + 200);
  v57 = *(double *)(v3 + 192) - *a2;
  if (v56)
    v58 = *(double *)(v3 + 192) - *a2;
  else
    v58 = 0.0;
  v59 = *(_BYTE *)(v3 + 216);
  v60 = *(double *)(v3 + 208);
  v61 = v60 - *a2;
  if (v59)
    v62 = v60 - *a2;
  else
    v62 = 0.0;
  if (v12[352])
  {
    v63 = v54 - *((double *)v12 + 43);
    if (*((_QWORD *)v12 + 25))
    {
      v64 = *((_QWORD *)v12 + 15);
      if (v64)
      {
        if (vabdd_f64(v63, *((double *)v12 + 21) / (double)v64) > *((double *)v12 + 21) / (double)v64 * 0.2)
          goto LABEL_156;
      }
      else if (vabdd_f64(v63, -1.0) > -1.0 * 0.2)
      {
        goto LABEL_156;
      }
    }
    if (*((_QWORD *)v12 + 42))
    {
      v65 = *((_QWORD *)v12 + 32);
      if (v65)
      {
        v66 = *((double *)v12 + 38);
        v67 = vabdd_f64(v55, v66 / (double)v65);
        if (v65 == 1
          || (v68 = 1.0 / (double)v65 * *((double *)v12 + 39) - 1.0 / (double)v65 * v66 * (1.0 / (double)v65 * v66),
              v68 < 0.0))
        {
          v68 = 0.0;
        }
      }
      else
      {
        v67 = fabs(v55 + 1.0);
        v68 = 0.0;
      }
      if (v67 > sqrt(v68) * 4.0)
      {
LABEL_156:
        v69 = 1;
        goto LABEL_191;
      }
    }
    if (*(_BYTE *)(v3 + 200))
    {
      if (v57 * 1000.0 == 100.0)
        v70 = 0;
      else
        v70 = -127;
      if (v57 * 1000.0 > 100.0)
        v70 = 1;
      if (v57 * 1000.0 < 100.0)
        v70 = -1;
      v69 = v70 != -127 && v70 < 0;
      if (!*(_BYTE *)(v3 + 216) || v69)
      {
LABEL_191:
        v12[384] = v69;
        v74 = v63 * v63 + *((double *)v12 + 20);
        *((double *)v12 + 19) = v63 + *((double *)v12 + 19);
        *((double *)v12 + 20) = v74;
        ++*((_QWORD *)v12 + 25);
        v75 = v63 + *((double *)v12 + 21);
        v76 = v63 * v63 + *((double *)v12 + 22);
        *((double *)v12 + 21) = v75;
        *((double *)v12 + 22) = v76;
        v77 = *((_QWORD *)v12 + 15);
        v78 = *((_QWORD *)v12 + 10);
        v79 = (*((_QWORD *)v12 + 11) - v78) >> 3;
        if (v77 >= v79)
        {
          v80 = *(double *)(v78 + 8 * *((_QWORD *)v12 + 13));
          *((double *)v12 + 21) = v75 - v80;
          *((double *)v12 + 22) = v76 - v80 * v80;
        }
        v81 = *((_QWORD *)v12 + 14);
        *(double *)(v78 + 8 * v81) = v63;
        v82 = v81 + 1;
        if (v81 + 1 >= v79)
          v83 = v79;
        else
          v83 = 0;
        *((_QWORD *)v12 + 14) = v82 - v83;
        if (v77 == v79)
        {
          v84 = *((_QWORD *)v12 + 13) + 1;
          if (v84 < v77)
            v77 = 0;
          *((_QWORD *)v12 + 13) = v84 - v77;
        }
        else
        {
          *((_QWORD *)v12 + 15) = v77 + 1;
        }
        v85 = *((double *)v12 + 23);
        v86 = *((double *)v12 + 24);
        if (v85 < v63)
          v85 = v63;
        if (v86 > v63)
          v86 = v63;
        *((double *)v12 + 23) = v85;
        *((double *)v12 + 24) = v86;
        goto LABEL_206;
      }
    }
    else if (!*(_BYTE *)(v3 + 216))
    {
      v69 = 0;
      goto LABEL_191;
    }
    if (v61 * 1000.0 == 100.0)
      v72 = 0;
    else
      v72 = -127;
    if (v61 * 1000.0 > 100.0)
      v72 = 1;
    if (v61 * 1000.0 < 100.0)
      v72 = -1;
    v69 = v72 != -127 && v72 < 0;
    goto LABEL_191;
  }
LABEL_206:
  v87 = v55 * v55 + *((double *)v12 + 37);
  *((double *)v12 + 36) = v55 + *((double *)v12 + 36);
  *((double *)v12 + 37) = v87;
  ++*((_QWORD *)v12 + 42);
  v88 = v55 + *((double *)v12 + 38);
  v89 = v55 * v55 + *((double *)v12 + 39);
  *((double *)v12 + 38) = v88;
  *((double *)v12 + 39) = v89;
  v90 = *((_QWORD *)v12 + 32);
  v91 = *((_QWORD *)v12 + 27);
  v92 = (*((_QWORD *)v12 + 28) - v91) >> 3;
  if (v90 >= v92)
  {
    v93 = *(double *)(v91 + 8 * *((_QWORD *)v12 + 30));
    *((double *)v12 + 38) = v88 - v93;
    *((double *)v12 + 39) = v89 - v93 * v93;
  }
  v94 = *((_QWORD *)v12 + 31);
  *(double *)(v91 + 8 * v94) = v55;
  v95 = v94 + 1;
  if (v94 + 1 >= v92)
    v96 = v92;
  else
    v96 = 0;
  *((_QWORD *)v12 + 31) = v95 - v96;
  if (v90 == v92)
  {
    v97 = *((_QWORD *)v12 + 30) + 1;
    if (v97 < v90)
      v90 = 0;
    *((_QWORD *)v12 + 30) = v97 - v90;
  }
  else
  {
    *((_QWORD *)v12 + 32) = v90 + 1;
  }
  v98 = *((double *)v12 + 40);
  v99 = *((double *)v12 + 41);
  if (v98 < v55)
    v98 = v55;
  if (v99 > v55)
    v99 = v55;
  *((double *)v12 + 40) = v98;
  *((double *)v12 + 41) = v99;
  v100 = *(_QWORD *)(v3 + 224);
  v12[36] = *(_BYTE *)(v3 + 232);
  *(_QWORD *)(v12 + 28) = v100;
  *((double *)v12 + 5) = v58;
  v12[48] = v56;
  *((double *)v12 + 7) = v62;
  v12[64] = v59;
  if (!v12[352])
    v12[352] = 1;
  *((double *)v12 + 43) = v54;
}

void sub_20EAAD10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;

  if (v42)
    operator delete(v42);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EAAD184(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (std::__shared_weak_count *)a1[43];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[30];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[30];
  if (v5)
  {
LABEL_6:
    a1[31] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[13];
  if (v7)
  {
    a1[14] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20EAAD228(_QWORD *a1, _DWORD *a2)
{
  unsigned int v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  if (v4 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = a2[1];
  }
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_25;
  v6 = v4 + 10 * *a2;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (*(_QWORD *)&v5 <= v6)
      v8 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (v5.i32[0] - 1) & v6;
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9 || (v10 = *v9) == 0)
LABEL_25:
    sub_20E89FD20("unordered_map::at: key not found");
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == v6)
      {
        if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
          goto LABEL_24;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_25;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == v6)
      break;
    if (v12 >= *(_QWORD *)&v5)
      v12 %= *(_QWORD *)&v5;
    if (v12 != v8)
      goto LABEL_25;
LABEL_14:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (*((_DWORD *)v10 + 4) != (_DWORD)v6)
    goto LABEL_14;
LABEL_24:
  sub_20EAAB9B8((unsigned int *)v10 + 6);
}

void sub_20EAAD37C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C36D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EAAD38C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C36D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAAD3C4(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20E86A8D8(v2 + 2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EAAD408(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, int a7)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  BOOL v16;
  char v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a4 + 24))
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v8;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a5;
  v9 = *(_OWORD *)(a5 + 16);
  v10 = *(_OWORD *)(a5 + 32);
  v11 = *(_OWORD *)(a5 + 48);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 64) = v9;
  v12 = *a6;
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (a7)
  {
    v13 = 0;
    v14 = a1 + 48;
    v15 = (double *)(a1 + 120);
    do
    {
      v16 = *(double *)(v14 + v13) != 0.0
         && ((*(_QWORD *)(v14 + v13) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      v17 = v16;
      if (v16)
        break;
      v18 = v13 == 64;
      v13 += 8;
    }
    while (!v18);
    if ((v17 & 1) != 0)
      goto LABEL_41;
    v19 = *v15 != 0.0 && ((*(_QWORD *)v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    v20 = v19;
    if (!v19)
    {
      v21 = *(double *)(a1 + 128) != 0.0
         && ((*(_QWORD *)(a1 + 128) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      v20 = v21;
      if (!v21)
        v20 = *(double *)(a1 + 136) != 0.0
           && ((*(_QWORD *)(a1 + 136) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    }
    if (v20)
    {
LABEL_41:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamAnchor.cpp", 37, (uint64_t)"HasValidPose()", 14, (uint64_t)&unk_210250DD9, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
  }
  return a1;
}

void sub_20EAAD5D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  sub_20E869AA8(v2);
  if (*(_BYTE *)(v1 + 40))
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EAAD5FC(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  BOOL v15;
  char v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 408))
  {
    if (*(char *)(a2 + 407) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 16), *(void **)(a2 + 384), *(_QWORD *)(a2 + 392));
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 16) = v6;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  v10 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v10;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  v11 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 304) = v11;
  if (a3)
  {
    v12 = 0;
    v13 = a1 + 48;
    v14 = (double *)(a1 + 120);
    do
    {
      v15 = *(double *)(v13 + v12) != 0.0
         && ((*(_QWORD *)(v13 + v12) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      v16 = v15;
      if (v15)
        break;
      v17 = v12 == 64;
      v12 += 8;
    }
    while (!v17);
    if ((v16 & 1) != 0)
      goto LABEL_44;
    v18 = *v14 != 0.0 && ((*(_QWORD *)v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    v19 = v18;
    if (!v18)
    {
      v20 = *(double *)(a1 + 128) != 0.0
         && ((*(_QWORD *)(a1 + 128) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      v19 = v20;
      if (!v20)
        v19 = *(double *)(a1 + 136) != 0.0
           && ((*(_QWORD *)(a1 + 136) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    }
    if (v19)
    {
LABEL_44:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamAnchor.cpp", 48, (uint64_t)"HasValidPose()", 14, (uint64_t)&unk_210250DD9, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
  }
  return a1;
}

void sub_20EAAD7EC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 40))
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20EAAD820(uint64_t a1, _OWORD *a2, CFTypeRef *a3)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  unsigned int v7;
  float v8;
  __int128 v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  unsigned int v17;
  char *v19;
  CFTypeRef v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *__p;
  __int128 v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (a2)
  {
    *(float *)&v4 = *(double *)(a1 + 48);
    *(float *)&v5 = *(double *)(a1 + 72);
    *(_QWORD *)&v6 = __PAIR64__(v5, v4);
    *(float *)&v7 = *(double *)(a1 + 96);
    *((_QWORD *)&v6 + 1) = v7;
    v8 = *(double *)(a1 + 56);
    *(float *)&v9 = v8;
    v10 = *(double *)(a1 + 80);
    *(float *)&v11 = *(double *)(a1 + 104);
    *((float *)&v9 + 1) = v10;
    *((_QWORD *)&v9 + 1) = v11;
    *(float *)&v12 = *(double *)(a1 + 64);
    *(float *)&v13 = *(double *)(a1 + 88);
    *(_QWORD *)&v14 = __PAIR64__(v13, v12);
    *(float *)&v15 = *(double *)(a1 + 112);
    *((_QWORD *)&v14 + 1) = v15;
    *(float32x2_t *)&v16 = vcvt_f32_f64(*(float64x2_t *)(a1 + 120));
    *(float *)&v17 = *(double *)(a1 + 136);
    *((_QWORD *)&v16 + 1) = __PAIR64__(1.0, v17);
    *a2 = v6;
    a2[1] = v9;
    a2[2] = v14;
    a2[3] = v16;
  }
  else
  {
    __p = operator new(0x40uLL);
    v26 = xmmword_2102DBC00;
    strcpy((char *)__p, "T_G_to_A can not be null when getting the pose from an anchor");
    v19 = (char *)operator new(0x58uLL);
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamAnchor.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v20 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v20;
      v21 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    operator delete(v19);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
  }
  return a2 != 0;
}

void sub_20EAADA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAADA58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 304))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 296);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EAADAE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 304))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 296);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAADB68(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  if (a2)
  {
    v2 = a2 + 84;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

uint64_t sub_20EAADB98(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;

  result = a2;
  if (a2)
  {
    v3 = (unsigned int *)(a2 + 336);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return result;
}

void sub_20EAADBB8()
{
  uint64_t v0;
  void **v1;
  void **v2;
  char *v3;
  char *v4;
  __int128 v5;
  void *v6;
  char *v7;
  int v8;
  char *v9;
  char *v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  char *v14;
  int v15;
  const char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  void *v20;
  char *v21;
  int v22;
  const char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  void *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  size_t v33;
  __int128 *p_dst;
  unint64_t v35;
  unint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  void *v47;
  char *v48;
  int v49;
  int v50;
  const char *v51;
  size_t v52;
  char *v53;
  __int128 v54;
  void *v55;
  char *v56;
  int v57;
  uint64_t v58;
  int v59;
  size_t v60;
  __int128 *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  void *v74;
  char *v75;
  int v76;
  const char *v77;
  char *v78;
  __int128 v79;
  void *v80;
  char *v81;
  int v82;
  const char *v83;
  char *v84;
  char *v85;
  __int128 v86;
  void *v87;
  char *v88;
  int v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char *v116;
  char *v117;
  unint64_t v118;
  char *v119;
  int v120;
  char *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  int v125;
  char *v126;
  char *v127;
  unint64_t v128;
  char *v129;
  int v130;
  size_t v131;
  size_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  const char *v136;
  char *v137;
  __int128 v138;
  char *v139;
  int v140;
  int v141;
  size_t v142;
  unint64_t v143;
  __int128 *v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  const char *v148;
  char *v149;
  __int128 v150;
  unint64_t v151;
  char *v152;
  int v153;
  int v154;
  size_t v155;
  unint64_t v156;
  __int128 *v157;
  uint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  const char *v161;
  char *v162;
  __int128 v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  int v167;
  _OWORD v168[3];
  void *v169[3];
  void *v170[2];
  unint64_t v171;
  void *v172[107];
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  void *v178;
  void *v179;
  char *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  void *__src[2];
  void *v204;
  void *v205[2];
  unint64_t v206;
  __int128 v207;
  void *v208;
  __int128 __dst;
  unint64_t v210;
  int v211;
  char v212;
  const char *v213;
  void *__p[3];
  __int128 v215;
  void *v216;
  uint64_t v217;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v217 = *MEMORY[0x24BDAC8D0];
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  sub_20E9F6A6C((unsigned int *)v0);
  v3 = (char *)operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_2102DBA80;
  strcpy(v3, "image_processing_width_for_points");
  v215 = *(_OWORD *)v172;
  __p[0] = v3;
  v216 = v172[2];
  memset(v172, 0, 24);
  v4 = (char *)v2[1];
  if (v4 >= v2[2])
  {
    v7 = sub_20E9A1704(v2, (uint64_t)__p);
    v8 = SHIBYTE(v216);
    v2[1] = v7;
    if (v8 < 0)
    {
      operator delete((void *)v215);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
LABEL_3:
    operator delete(__p[0]);
    if ((SHIBYTE(v172[2]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_4;
  }
  v5 = *(_OWORD *)__p;
  *((void **)v4 + 2) = __p[2];
  *(_OWORD *)v4 = v5;
  memset(__p, 0, sizeof(__p));
  v6 = v216;
  *(_OWORD *)(v4 + 24) = v215;
  *((_QWORD *)v4 + 5) = v6;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v4 + 48;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_3;
LABEL_7:
  if (SHIBYTE(v172[2]) < 0)
LABEL_4:
    operator delete(v172[0]);
LABEL_8:
  sub_20E9F6A6C((unsigned int *)(v0 + 4));
  v9 = (char *)operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_2102DC280;
  strcpy(v9, "image_processing_width_for_lines");
  v215 = *(_OWORD *)v172;
  __p[0] = v9;
  v216 = v172[2];
  memset(v172, 0, 24);
  v10 = (char *)v2[1];
  if (v10 >= v2[2])
  {
    v14 = sub_20E9A1704(v2, (uint64_t)__p);
    v15 = SHIBYTE(v216);
    v2[1] = v14;
    if (v15 < 0)
    {
      operator delete((void *)v215);
      v13 = v0 + 12848;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_14;
    }
    else
    {
      v13 = v0 + 12848;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_14;
    }
LABEL_10:
    operator delete(__p[0]);
    if ((SHIBYTE(v172[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_11;
  }
  v11 = *(_OWORD *)__p;
  *((void **)v10 + 2) = __p[2];
  *(_OWORD *)v10 = v11;
  memset(__p, 0, sizeof(__p));
  v12 = v216;
  *(_OWORD *)(v10 + 24) = v215;
  *((_QWORD *)v10 + 5) = v12;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v10 + 48;
  v13 = v0 + 12848;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_10;
LABEL_14:
  if (SHIBYTE(v172[2]) < 0)
LABEL_11:
    operator delete(v172[0]);
LABEL_15:
  LODWORD(v172[3]) = 0;
  if (*(_BYTE *)(v13 + 24))
    v16 = "true";
  else
    v16 = "false";
  *(_QWORD *)&__dst = v16;
  sub_20E87999C(v172, (const char **)&__dst);
  if (LODWORD(v172[3]) == -1)
    sub_20E877AB8();
  *(_QWORD *)&__dst = &v207;
  ((void (*)(void **__return_ptr, __int128 *, void **))off_24C9C3780[LODWORD(v172[3])])(v169, &__dst, v172);
  if (LODWORD(v172[3]) != -1)
    ((void (*)(__int128 *, void **))off_24C9C3768[LODWORD(v172[3])])(&__dst, v172);
  v17 = (char *)operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2102DB470;
  strcpy(v17, "skip_extrinsic_serialize_key");
  v215 = *(_OWORD *)v169;
  __p[0] = v17;
  v216 = v169[2];
  memset(v169, 0, sizeof(v169));
  v18 = (char *)v2[1];
  if (v18 >= v2[2])
  {
    v21 = sub_20E9A1704(v2, (uint64_t)__p);
    v22 = SHIBYTE(v216);
    v2[1] = v21;
    if (v22 < 0)
    {
      operator delete((void *)v215);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
LABEL_23:
    operator delete(__p[0]);
    if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v19 = *(_OWORD *)__p;
  *((void **)v18 + 2) = __p[2];
  *(_OWORD *)v18 = v19;
  memset(__p, 0, sizeof(__p));
  v20 = v216;
  *(_OWORD *)(v18 + 24) = v215;
  *((_QWORD *)v18 + 5) = v20;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v18 + 48;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_23;
LABEL_27:
  if (SHIBYTE(v169[2]) < 0)
LABEL_24:
    operator delete(v169[0]);
LABEL_28:
  LODWORD(v172[3]) = 0;
  v23 = "false";
  if (*(_BYTE *)(v13 + 25))
    v23 = "true";
  *(_QWORD *)&__dst = v23;
  sub_20E87999C(v172, (const char **)&__dst);
  if (LODWORD(v172[3]) == -1)
    sub_20E877AB8();
  *(_QWORD *)&__dst = &v207;
  ((void (*)(void **__return_ptr, __int128 *, void **))off_24C9C3780[LODWORD(v172[3])])(v169, &__dst, v172);
  if (LODWORD(v172[3]) != -1)
    ((void (*)(__int128 *, void **))off_24C9C3768[LODWORD(v172[3])])(&__dst, v172);
  v24 = (char *)operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2102DBF70;
  strcpy(v24, "skip_extrinsic_deserialize_key");
  v215 = *(_OWORD *)v169;
  __p[0] = v24;
  v216 = v169[2];
  memset(v169, 0, sizeof(v169));
  v25 = (char *)v2[1];
  if (v25 >= v2[2])
  {
    v28 = sub_20E9A1704(v2, (uint64_t)__p);
    v29 = SHIBYTE(v216);
    v2[1] = v28;
    if (v29 < 0)
    {
      operator delete((void *)v215);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_35:
    operator delete(__p[0]);
    if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
  v26 = *(_OWORD *)__p;
  *((void **)v25 + 2) = __p[2];
  *(_OWORD *)v25 = v26;
  memset(__p, 0, sizeof(__p));
  v27 = v216;
  *(_OWORD *)(v25 + 24) = v215;
  *((_QWORD *)v25 + 5) = v27;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v25 + 48;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(v169[2]) < 0)
LABEL_36:
    operator delete(v169[0]);
LABEL_40:
  LODWORD(v170[0]) = 0;
  v30 = operator new();
  *(_QWORD *)&v168[0] = v13;
  *(_QWORD *)(v30 + 272) = 0;
  *(_OWORD *)(v30 + 240) = 0u;
  *(_OWORD *)(v30 + 256) = 0u;
  *(_OWORD *)(v30 + 208) = 0u;
  *(_OWORD *)(v30 + 224) = 0u;
  *(_OWORD *)(v30 + 176) = 0u;
  *(_OWORD *)(v30 + 192) = 0u;
  *(_OWORD *)(v30 + 144) = 0u;
  *(_OWORD *)(v30 + 160) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 128) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)v30 = 0u;
  sub_20E863438(v30);
  v172[0] = (void *)v30;
  v31 = *(int *)(v0 + 12876);
  if (v31 <= 3)
    sub_20E86A980((_QWORD *)(v30 + 16), (uint64_t)off_24C9C37C8[v31], qword_210313C10[v31]);
  v32 = *(_DWORD *)(v30 + 120);
  if ((v32 & 0x10) != 0)
  {
    v35 = *(_QWORD *)(v30 + 112);
    v36 = *(_QWORD *)(v30 + 72);
    if (v35 < v36)
    {
      *(_QWORD *)(v30 + 112) = v36;
      v35 = v36;
    }
    v37 = *(const void **)(v30 + 64);
    v33 = v35 - (_QWORD)v37;
    if (v35 - (unint64_t)v37 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_148;
  }
  else
  {
    if ((v32 & 8) == 0)
    {
      v33 = 0;
      HIBYTE(v210) = 0;
      p_dst = &__dst;
      goto LABEL_55;
    }
    v37 = *(const void **)(v30 + 40);
    v33 = *(_QWORD *)(v30 + 56) - (_QWORD)v37;
    if (v33 > 0x7FFFFFFFFFFFFFF7)
LABEL_148:
      sub_20E860B7C();
  }
  if (v33 >= 0x17)
  {
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    p_dst = (__int128 *)operator new(v38 + 1);
    v210 = v39 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    *((_QWORD *)&__dst + 1) = v33;
    goto LABEL_54;
  }
  HIBYTE(v210) = v33;
  p_dst = &__dst;
  if (v33)
LABEL_54:
    memmove(p_dst, v37, v33);
LABEL_55:
  *((_BYTE *)p_dst + v33) = 0;
  v40 = (char *)v172[0];
  v41 = (uint64_t *)MEMORY[0x24BEDB7F0];
  v42 = MEMORY[0x24BEDB848];
  if (v172[0])
  {
    v43 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v172[0] = *MEMORY[0x24BEDB7F0];
    v44 = v41[9];
    *(_QWORD *)&v40[*(_QWORD *)(v43 - 24)] = v41[8];
    *((_QWORD *)v40 + 3) = v42 + 16;
    *((_QWORD *)v40 + 2) = v44;
    if (v40[111] < 0)
      operator delete(*((void **)v40 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v40 + 128);
    MEMORY[0x212BC6398](v40, 0x10B2C40EED050F3);
  }
  v172[0] = v169;
  v172[1] = &__dst;
  v172[2] = v169;
  v172[3] = &__dst;
  v172[4] = &__dst;
  if (LODWORD(v170[0]) == -1)
    sub_20E877AB8();
  v205[0] = v172;
  ((void (*)(void **, void **))off_24C9C3750[LODWORD(v170[0])])(v205, v169);
  if (SHIBYTE(v210) < 0)
    operator delete((void *)__dst);
  if (LODWORD(v170[0]) == -1)
    sub_20E877AB8();
  v172[0] = &__dst;
  ((void (*)(__int128 *__return_ptr, void **, void **))off_24C9C3780[LODWORD(v170[0])])(&v207, v172, v169);
  if (LODWORD(v170[0]) != -1)
    ((void (*)(void **, void **))off_24C9C3768[LODWORD(v170[0])])(v172, v169);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "multi_camera_mode");
  v215 = v207;
  v216 = v208;
  v207 = 0uLL;
  v208 = 0;
  v45 = (char *)v2[1];
  if (v45 >= v2[2])
  {
    v48 = sub_20E9A1704(v2, (uint64_t)__p);
    v49 = SHIBYTE(v216);
    v2[1] = v48;
    if (v49 < 0)
    {
      operator delete((void *)v215);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_71;
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_71;
    }
LABEL_67:
    operator delete(__p[0]);
    if ((SHIBYTE(v208) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_68;
  }
  v46 = *(_OWORD *)__p;
  *((void **)v45 + 2) = __p[2];
  *(_OWORD *)v45 = v46;
  memset(__p, 0, sizeof(__p));
  v47 = v216;
  *(_OWORD *)(v45 + 24) = v215;
  *((_QWORD *)v45 + 5) = v47;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v45 + 48;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_67;
LABEL_71:
  if (SHIBYTE(v208) < 0)
LABEL_68:
    operator delete((void *)v207);
LABEL_72:
  v50 = *(_DWORD *)(v0 + 12880);
  if (v50)
    v51 = "nondeterministic";
  else
    v51 = "deterministic";
  if (v50)
    v52 = 16;
  else
    v52 = 13;
  HIBYTE(v204) = v52;
  memcpy(__src, v51, v52);
  *((_BYTE *)__src + v52) = 0;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "scheduling_mode");
  if (SHIBYTE(v204) < 0)
  {
    sub_20E860C04(&v215, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    v215 = *(_OWORD *)__src;
    v216 = v204;
  }
  v53 = (char *)v2[1];
  if (v53 < v2[2])
  {
    v54 = *(_OWORD *)__p;
    *((void **)v53 + 2) = __p[2];
    *(_OWORD *)v53 = v54;
    memset(__p, 0, sizeof(__p));
    v55 = v216;
    *(_OWORD *)(v53 + 24) = v215;
    *((_QWORD *)v53 + 5) = v55;
    v216 = 0;
    v215 = 0uLL;
    v2[1] = v53 + 48;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_86;
    goto LABEL_83;
  }
  v56 = sub_20E9A1704(v2, (uint64_t)__p);
  v57 = SHIBYTE(v216);
  v2[1] = v56;
  if ((v57 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_86;
LABEL_83:
    operator delete(__p[0]);
    goto LABEL_86;
  }
  operator delete((void *)v215);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_83;
LABEL_86:
  LODWORD(v170[0]) = 0;
  v58 = operator new();
  *(_QWORD *)(v58 + 272) = 0;
  *(_OWORD *)(v58 + 240) = 0u;
  *(_OWORD *)(v58 + 256) = 0u;
  *(_OWORD *)(v58 + 208) = 0u;
  *(_OWORD *)(v58 + 224) = 0u;
  *(_OWORD *)(v58 + 176) = 0u;
  *(_OWORD *)(v58 + 192) = 0u;
  *(_OWORD *)(v58 + 144) = 0u;
  *(_OWORD *)(v58 + 160) = 0u;
  *(_OWORD *)(v58 + 112) = 0u;
  *(_OWORD *)(v58 + 128) = 0u;
  *(_OWORD *)(v58 + 80) = 0u;
  *(_OWORD *)(v58 + 96) = 0u;
  *(_OWORD *)(v58 + 48) = 0u;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 16) = 0u;
  *(_OWORD *)(v58 + 32) = 0u;
  *(_OWORD *)v58 = 0u;
  sub_20E863438(v58);
  v172[0] = (void *)v58;
  sub_210218440((_QWORD *)(v58 + 16), v0 + 12884);
  v59 = *(_DWORD *)(v58 + 120);
  if ((v59 & 0x10) != 0)
  {
    v63 = *(_QWORD *)(v58 + 112);
    v64 = *(_QWORD *)(v58 + 72);
    if (v63 < v64)
    {
      *(_QWORD *)(v58 + 112) = v64;
      v63 = v64;
    }
    v65 = *(const void **)(v58 + 64);
    v60 = v63 - (_QWORD)v65;
    if (v63 - (unint64_t)v65 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_150;
  }
  else
  {
    if ((v59 & 8) == 0)
    {
      v60 = 0;
      HIBYTE(v210) = 0;
      v61 = &__dst;
      v62 = *(char **)&v168[0];
      goto LABEL_99;
    }
    v65 = *(const void **)(v58 + 40);
    v60 = *(_QWORD *)(v58 + 56) - (_QWORD)v65;
    if (v60 > 0x7FFFFFFFFFFFFFF7)
LABEL_150:
      sub_20E860B7C();
  }
  if (v60 >= 0x17)
  {
    v66 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v66 = v60 | 7;
    v67 = v66 + 1;
    v61 = (__int128 *)operator new(v66 + 1);
    v210 = v67 | 0x8000000000000000;
    *(_QWORD *)&__dst = v61;
    *((_QWORD *)&__dst + 1) = v60;
    v62 = *(char **)&v168[0];
    goto LABEL_98;
  }
  HIBYTE(v210) = v60;
  v61 = &__dst;
  v62 = *(char **)&v168[0];
  if (v60)
LABEL_98:
    memmove(v61, v65, v60);
LABEL_99:
  *((_BYTE *)v61 + v60) = 0;
  v68 = (char *)v172[0];
  if (v172[0])
  {
    v69 = *v41;
    *(_QWORD *)v172[0] = *v41;
    v70 = v41[9];
    *(_QWORD *)&v68[*(_QWORD *)(v69 - 24)] = v41[8];
    *((_QWORD *)v68 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v68 + 2) = v70;
    if (v68[111] < 0)
      operator delete(*((void **)v68 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v68 + 128);
    MEMORY[0x212BC6398](v68, 0x10B2C40EED050F3);
  }
  v172[0] = v169;
  v172[1] = &__dst;
  v172[2] = v169;
  v172[3] = &__dst;
  v172[4] = &__dst;
  if (LODWORD(v170[0]) == -1)
    sub_20E877AB8();
  v205[0] = v172;
  ((void (*)(void **, void **))off_24C9C3750[LODWORD(v170[0])])(v205, v169);
  if (SHIBYTE(v210) < 0)
    operator delete((void *)__dst);
  if (LODWORD(v170[0]) == -1)
    sub_20E877AB8();
  v172[0] = &__dst;
  ((void (*)(__int128 *__return_ptr, void **, void **))off_24C9C3780[LODWORD(v170[0])])(&v207, v172, v169);
  if (LODWORD(v170[0]) != -1)
    ((void (*)(void **, void **))off_24C9C3768[LODWORD(v170[0])])(v172, v169);
  v71 = (char *)operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2102DB480;
  strcpy(v71, "scheduling_priority_config");
  v215 = v207;
  __p[0] = v71;
  v216 = v208;
  v207 = 0uLL;
  v208 = 0;
  v72 = (char *)v2[1];
  if (v72 >= v2[2])
  {
    v75 = sub_20E9A1704(v2, (uint64_t)__p);
    v76 = SHIBYTE(v216);
    v2[1] = v75;
    if (v76 < 0)
    {
      operator delete((void *)v215);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_115;
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_115;
    }
LABEL_111:
    operator delete(__p[0]);
    if ((SHIBYTE(v208) & 0x80000000) == 0)
      goto LABEL_116;
    goto LABEL_112;
  }
  v73 = *(_OWORD *)__p;
  *((void **)v72 + 2) = __p[2];
  *(_OWORD *)v72 = v73;
  memset(__p, 0, sizeof(__p));
  v74 = v216;
  *(_OWORD *)(v72 + 24) = v215;
  *((_QWORD *)v72 + 5) = v74;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v72 + 48;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_111;
LABEL_115:
  if (SHIBYTE(v208) < 0)
LABEL_112:
    operator delete((void *)v207);
LABEL_116:
  LODWORD(v172[3]) = 0;
  v77 = "false";
  if (v62[44])
    v77 = "true";
  *(_QWORD *)&__dst = v77;
  sub_20E87999C(v172, (const char **)&__dst);
  if (LODWORD(v172[3]) == -1)
    sub_20E877AB8();
  *(_QWORD *)&__dst = &v207;
  ((void (*)(void **__return_ptr, __int128 *, void **))off_24C9C3780[LODWORD(v172[3])])(v169, &__dst, v172);
  if (LODWORD(v172[3]) != -1)
    ((void (*)(__int128 *, void **))off_24C9C3768[LODWORD(v172[3])])(&__dst, v172);
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "use_hw_feature_points");
  v215 = *(_OWORD *)v169;
  v216 = v169[2];
  memset(v169, 0, sizeof(v169));
  v78 = (char *)v2[1];
  if (v78 >= v2[2])
  {
    v81 = sub_20E9A1704(v2, (uint64_t)__p);
    v82 = SHIBYTE(v216);
    v2[1] = v81;
    if (v82 < 0)
    {
      operator delete((void *)v215);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_127;
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_127;
    }
LABEL_123:
    operator delete(__p[0]);
    if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
      goto LABEL_128;
    goto LABEL_124;
  }
  v79 = *(_OWORD *)__p;
  *((void **)v78 + 2) = __p[2];
  *(_OWORD *)v78 = v79;
  memset(__p, 0, sizeof(__p));
  v80 = v216;
  *(_OWORD *)(v78 + 24) = v215;
  *((_QWORD *)v78 + 5) = v80;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v78 + 48;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_123;
LABEL_127:
  if (SHIBYTE(v169[2]) < 0)
LABEL_124:
    operator delete(v169[0]);
LABEL_128:
  LODWORD(v172[3]) = 0;
  v83 = "false";
  if (v62[45])
    v83 = "true";
  *(_QWORD *)&__dst = v83;
  sub_20E87999C(v172, (const char **)&__dst);
  if (LODWORD(v172[3]) == -1)
    sub_20E877AB8();
  *(_QWORD *)&__dst = &v207;
  ((void (*)(void **__return_ptr, __int128 *, void **))off_24C9C3780[LODWORD(v172[3])])(v169, &__dst, v172);
  if (LODWORD(v172[3]) != -1)
    ((void (*)(__int128 *, void **))off_24C9C3768[LODWORD(v172[3])])(&__dst, v172);
  v84 = (char *)operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2102DBFB0;
  strcpy(v84, "enable_frame_passthrough");
  v215 = *(_OWORD *)v169;
  __p[0] = v84;
  v216 = v169[2];
  memset(v169, 0, sizeof(v169));
  v85 = (char *)v2[1];
  if (v85 >= v2[2])
  {
    v88 = sub_20E9A1704(v2, (uint64_t)__p);
    v89 = SHIBYTE(v216);
    v2[1] = v88;
    if (v89 < 0)
    {
      operator delete((void *)v215);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_139;
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_139;
    }
LABEL_135:
    operator delete(__p[0]);
    if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
      goto LABEL_140;
    goto LABEL_136;
  }
  v86 = *(_OWORD *)__p;
  *((void **)v85 + 2) = __p[2];
  *(_OWORD *)v85 = v86;
  memset(__p, 0, sizeof(__p));
  v87 = v216;
  *(_OWORD *)(v85 + 24) = v215;
  *((_QWORD *)v85 + 5) = v87;
  v216 = 0;
  v215 = 0uLL;
  v2[1] = v85 + 48;
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_135;
LABEL_139:
  if (SHIBYTE(v169[2]) < 0)
LABEL_136:
    operator delete(v169[0]);
LABEL_140:
  sub_20E86AC88((uint64_t)__p, v0 + 8);
  sub_20EE84BF0((uint64_t)__p, v172);
  sub_20EADE898((uint64_t)v172, v2);
  sub_20E869298((uint64_t)v172);
  memcpy(v172, (const void *)(v0 + 11432), 0x356uLL);
  v90 = *(_OWORD *)(v0 + 12304);
  v91 = *(_OWORD *)(v0 + 12336);
  v175 = *(_OWORD *)(v0 + 12320);
  v176 = v91;
  v173 = *(_OWORD *)(v0 + 12288);
  v174 = v90;
  v177 = *(_QWORD *)(v0 + 12352);
  v178 = 0;
  v180 = 0;
  v179 = 0;
  v92 = *(char **)(v0 + 12360);
  v93 = *(char **)(v0 + 12368);
  v94 = v93 - v92;
  if (v93 == v92)
    goto LABEL_174;
  if (0xAAAAAAAAAAAAAAABLL * (v94 >> 3) >= 0xAAAAAAAAAAAAAABLL)
    sub_20E867F44();
  v95 = (char *)operator new(v93 - v92);
  v178 = v95;
  v180 = &v95[8 * (v94 >> 3)];
  if ((unint64_t)(v94 - 24) >= 0x108)
  {
    v98 = (v94 - 24) / 0x18uLL;
    v99 = 24 * v98 + 24;
    if (v95 >= &v92[v99] || v92 >= &v95[v99])
    {
      v100 = v98 + 1;
      v101 = (v98 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v96 = &v92[24 * v101];
      v97 = &v95[24 * v101];
      v102 = v101;
      do
      {
        v103 = *((_OWORD *)v92 + 1);
        v105 = *((_OWORD *)v92 + 4);
        v104 = *((_OWORD *)v92 + 5);
        v106 = *((_OWORD *)v92 + 2);
        v107 = *((_OWORD *)v92 + 3);
        *(_OWORD *)v95 = *(_OWORD *)v92;
        *((_OWORD *)v95 + 1) = v103;
        *((_OWORD *)v95 + 2) = v106;
        *((_OWORD *)v95 + 3) = v107;
        *((_OWORD *)v95 + 4) = v105;
        *((_OWORD *)v95 + 5) = v104;
        v95 += 96;
        v92 += 96;
        v102 -= 4;
      }
      while (v102);
      if (v100 == v101)
        goto LABEL_173;
    }
    else
    {
      v96 = v92;
      v97 = v95;
    }
  }
  else
  {
    v96 = v92;
    v97 = v95;
  }
  do
  {
    *(_QWORD *)v97 = *(_QWORD *)v96;
    *((_QWORD *)v97 + 1) = *((_QWORD *)v96 + 1);
    *((_QWORD *)v97 + 2) = *((_QWORD *)v96 + 2);
    v97 += 24;
    v96 += 24;
  }
  while (v96 != v93);
LABEL_173:
  v179 = v97;
LABEL_174:
  v108 = *(_OWORD *)(v0 + 12400);
  v181 = *(_OWORD *)(v0 + 12384);
  v182 = v108;
  v109 = *(_OWORD *)(v0 + 12432);
  v183 = *(_OWORD *)(v0 + 12416);
  v184 = v109;
  v110 = *(_OWORD *)(v0 + 12592);
  v193 = *(_OWORD *)(v0 + 12576);
  v194 = v110;
  v111 = *(_OWORD *)(v0 + 12624);
  v195 = *(_OWORD *)(v0 + 12608);
  v196 = v111;
  v112 = *(_OWORD *)(v0 + 12528);
  v189 = *(_OWORD *)(v0 + 12512);
  v190 = v112;
  v113 = *(_OWORD *)(v0 + 12560);
  v191 = *(_OWORD *)(v0 + 12544);
  v192 = v113;
  v114 = *(_OWORD *)(v0 + 12464);
  v185 = *(_OWORD *)(v0 + 12448);
  v186 = v114;
  v115 = *(_OWORD *)(v0 + 12496);
  v187 = *(_OWORD *)(v0 + 12480);
  v188 = v115;
  sub_20E86F7FC((uint64_t)&v197, v0 + 12640);
  v202 = *v62;
  sub_20F1AE3B0((uint64_t)v172, v169);
  sub_20EADE898((uint64_t)v169, v2);
  sub_20E869298((uint64_t)v169);
  BYTE7(v168[2]) = 21;
  strcpy((char *)v168, "frame_selector_cframe_selector_config");
  v116 = (char *)operator new(0x30uLL);
  *(_OWORD *)v116 = v168[0];
  strcpy(v116 + 13, "r_config.burst_mode_framerate");
  sub_20E8A9280((int *)(v0 + 12856));
  v169[0] = v116;
  *(_OWORD *)&v169[1] = xmmword_2102E3F90;
  *(_OWORD *)v170 = __dst;
  v171 = v210;
  __dst = 0uLL;
  v210 = 0;
  v117 = (char *)v2[1];
  if (v117 >= v2[2])
  {
    v119 = sub_20E9A1704(v2, (uint64_t)v169);
    v120 = SHIBYTE(v171);
    v2[1] = v119;
    if (v120 < 0)
    {
      operator delete(v170[0]);
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        goto LABEL_180;
    }
    else if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
    {
      goto LABEL_180;
    }
LABEL_176:
    operator delete(v169[0]);
    if ((SHIBYTE(v210) & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_177;
  }
  *(_QWORD *)v117 = v116;
  *(_OWORD *)(v117 + 8) = xmmword_2102E3F90;
  memset(v169, 0, sizeof(v169));
  v118 = v171;
  *(_OWORD *)(v117 + 24) = *(_OWORD *)v170;
  *((_QWORD *)v117 + 5) = v118;
  v170[1] = 0;
  v171 = 0;
  v170[0] = 0;
  v2[1] = v117 + 48;
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_176;
LABEL_180:
  if (SHIBYTE(v210) < 0)
LABEL_177:
    operator delete((void *)__dst);
LABEL_181:
  v121 = (char *)operator new(0x30uLL);
  *(_OWORD *)v121 = v168[0];
  strcpy(v121 + 13, "r_config.burst_mode_duration");
  v211 = 0;
  sub_20E89F7C4((uint64_t)v205, (uint64_t)&__dst, (float *)(v0 + 12860));
  if (v211 == -1)
    sub_20E877AB8();
  v205[0] = &v213;
  ((void (*)(__int128 *__return_ptr, void **, __int128 *))off_24C9C3780[v211])(&v207, v205, &__dst);
  if (v211 != -1)
    ((void (*)(void **, __int128 *))off_24C9C3768[v211])(v205, &__dst);
  v169[0] = v121;
  *(_OWORD *)&v169[1] = xmmword_2102DCA00;
  *(_OWORD *)v170 = v207;
  v171 = (unint64_t)v208;
  v207 = 0uLL;
  v208 = 0;
  v122 = (char *)v2[1];
  if (v122 >= v2[2])
  {
    v124 = sub_20E9A1704(v2, (uint64_t)v169);
    v125 = SHIBYTE(v171);
    v2[1] = v124;
    if (v125 < 0)
    {
      operator delete(v170[0]);
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        goto LABEL_190;
    }
    else if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
    {
      goto LABEL_190;
    }
LABEL_186:
    operator delete(v169[0]);
    if ((SHIBYTE(v208) & 0x80000000) == 0)
      goto LABEL_191;
    goto LABEL_187;
  }
  *(_QWORD *)v122 = v121;
  *(_OWORD *)(v122 + 8) = xmmword_2102DCA00;
  memset(v169, 0, sizeof(v169));
  v123 = v171;
  *(_OWORD *)(v122 + 24) = *(_OWORD *)v170;
  *((_QWORD *)v122 + 5) = v123;
  v170[1] = 0;
  v171 = 0;
  v170[0] = 0;
  v2[1] = v122 + 48;
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_186;
LABEL_190:
  if (SHIBYTE(v208) < 0)
LABEL_187:
    operator delete((void *)v207);
LABEL_191:
  v126 = (char *)operator new(0x30uLL);
  *(_OWORD *)v126 = v168[1];
  *(_QWORD *)(v126 + 13) = *(_QWORD *)((char *)&v168[1] + 13);
  strcpy(v126 + 21, ".normal_mode_framerate");
  v211 = 0;
  sub_20E89F7C4((uint64_t)v205, (uint64_t)&__dst, (float *)(v0 + 12864));
  if (v211 == -1)
    sub_20E877AB8();
  v205[0] = &v213;
  ((void (*)(__int128 *__return_ptr, void **, __int128 *))off_24C9C3780[v211])(&v207, v205, &__dst);
  if (v211 != -1)
    ((void (*)(void **, __int128 *))off_24C9C3768[v211])(v205, &__dst);
  v169[0] = v126;
  *(_OWORD *)&v169[1] = xmmword_2102DC8E0;
  *(_OWORD *)v170 = v207;
  v171 = (unint64_t)v208;
  v207 = 0uLL;
  v208 = 0;
  v127 = (char *)v2[1];
  if (v127 >= v2[2])
  {
    v129 = sub_20E9A1704(v2, (uint64_t)v169);
    v130 = SHIBYTE(v171);
    v2[1] = v129;
    if (v130 < 0)
    {
      operator delete(v170[0]);
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        goto LABEL_200;
    }
    else if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
    {
      goto LABEL_200;
    }
LABEL_196:
    operator delete(v169[0]);
    if ((SHIBYTE(v208) & 0x80000000) == 0)
      goto LABEL_201;
    goto LABEL_197;
  }
  *(_QWORD *)v127 = v126;
  *(_OWORD *)(v127 + 8) = xmmword_2102DC8E0;
  memset(v169, 0, sizeof(v169));
  v128 = v171;
  *(_OWORD *)(v127 + 24) = *(_OWORD *)v170;
  *((_QWORD *)v127 + 5) = v128;
  v170[1] = 0;
  v171 = 0;
  v170[0] = 0;
  v2[1] = v127 + 48;
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_196;
LABEL_200:
  if (SHIBYTE(v208) < 0)
LABEL_197:
    operator delete((void *)v207);
LABEL_201:
  if ((SBYTE7(v168[2]) & 0x80u) == 0)
    v131 = BYTE7(v168[2]);
  else
    v131 = 0x635F726F7463656CLL;
  v132 = ((v131 + 32) | 7) + 1;
  v133 = (char *)operator new(v132);
  v134 = v133;
  if (v131)
  {
    if ((SBYTE7(v168[2]) & 0x80u) == 0)
      v135 = (uint64_t)&v168[1];
    else
      v135 = 0x65735F656D617266;
    memcpy(v133, (const void *)v135, v131);
  }
  strcpy(&v134[v131], ".use_accelerate_for_downsampling");
  v211 = 0;
  v136 = "false";
  if (v62[20])
    v136 = "true";
  v205[0] = (void *)v136;
  sub_20E87999C(&__dst, (const char **)v205);
  if (v211 == -1)
    sub_20E877AB8();
  v205[0] = &v213;
  ((void (*)(__int128 *__return_ptr, void **, __int128 *))off_24C9C3780[v211])(&v207, v205, &__dst);
  if (v211 != -1)
    ((void (*)(void **, __int128 *))off_24C9C3768[v211])(v205, &__dst);
  v169[0] = v134;
  v169[1] = (void *)(v131 + 32);
  v169[2] = (void *)(v132 | 0x8000000000000000);
  *(_OWORD *)v170 = v207;
  v171 = (unint64_t)v208;
  v207 = 0uLL;
  v208 = 0;
  v137 = (char *)v2[1];
  if (v137 >= v2[2])
  {
    v139 = sub_20E9A1704(v2, (uint64_t)v169);
    v140 = SHIBYTE(v171);
    v2[1] = v139;
    if (v140 < 0)
    {
      operator delete(v170[0]);
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        goto LABEL_220;
    }
    else if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
    {
      goto LABEL_220;
    }
LABEL_216:
    operator delete(v169[0]);
    if ((SHIBYTE(v208) & 0x80000000) == 0)
      goto LABEL_221;
    goto LABEL_217;
  }
  *(_QWORD *)v137 = v134;
  *((_QWORD *)v137 + 1) = v131 + 32;
  *((_QWORD *)v137 + 2) = v132 | 0x8000000000000000;
  memset(v169, 0, sizeof(v169));
  v138 = *(_OWORD *)v170;
  *((_QWORD *)v137 + 5) = v171;
  *(_OWORD *)(v137 + 24) = v138;
  v170[1] = 0;
  v171 = 0;
  v170[0] = 0;
  v2[1] = v137 + 48;
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_216;
LABEL_220:
  if (SHIBYTE(v208) < 0)
LABEL_217:
    operator delete((void *)v207);
LABEL_221:
  v141 = SBYTE7(v168[2]);
  if ((SBYTE7(v168[2]) & 0x80u) == 0)
    v142 = BYTE7(v168[2]);
  else
    v142 = *((_QWORD *)&v168[1] + 1);
  v143 = v142 + 28;
  if (v142 + 28 > 0x7FFFFFFFFFFFFFF7)
LABEL_299:
    sub_20E860B7C();
  if (v143 <= 0x16)
  {
    v208 = 0;
    v207 = 0uLL;
    v144 = &v207;
    HIBYTE(v208) = v142 + 28;
LABEL_230:
    if (v141 >= 0)
      v147 = &v168[1];
    else
      v147 = *(_OWORD **)&v168[1];
    memmove(v144, v147, v142);
    goto LABEL_234;
  }
  v145 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v143 | 7) != 0x17)
    v145 = v143 | 7;
  v146 = v145 + 1;
  v144 = (__int128 *)operator new(v145 + 1);
  v208 = (void *)(v146 | 0x8000000000000000);
  *(_QWORD *)&v207 = v144;
  *((_QWORD *)&v207 + 1) = v142 + 28;
  if (v142)
    goto LABEL_230;
LABEL_234:
  strcpy((char *)v144 + v142, ".select_frames_with_features");
  v211 = 0;
  v148 = "false";
  if (v62[21])
    v148 = "true";
  v213 = v148;
  sub_20E87999C(&__dst, &v213);
  if (v211 == -1)
    sub_20E877AB8();
  v213 = &v212;
  ((void (*)(void **__return_ptr, const char **, __int128 *))off_24C9C3780[v211])(v205, &v213, &__dst);
  if (v211 != -1)
    ((void (*)(const char **, __int128 *))off_24C9C3768[v211])(&v213, &__dst);
  *(_OWORD *)v169 = v207;
  v169[2] = v208;
  *(_OWORD *)v170 = *(_OWORD *)v205;
  v171 = v206;
  v205[1] = 0;
  v205[0] = 0;
  v206 = 0;
  v149 = (char *)v2[1];
  if (v149 >= v2[2])
  {
    v152 = sub_20E9A1704(v2, (uint64_t)v169);
    v153 = SHIBYTE(v171);
    v2[1] = v152;
    if (v153 < 0)
    {
      operator delete(v170[0]);
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        goto LABEL_245;
    }
    else if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
    {
      goto LABEL_245;
    }
LABEL_241:
    operator delete(v169[0]);
    if ((SHIBYTE(v206) & 0x80000000) == 0)
      goto LABEL_246;
    goto LABEL_242;
  }
  v150 = v207;
  *((_QWORD *)v149 + 2) = v208;
  *(_OWORD *)v149 = v150;
  memset(v169, 0, sizeof(v169));
  v151 = v171;
  *(_OWORD *)(v149 + 24) = *(_OWORD *)v170;
  *((_QWORD *)v149 + 5) = v151;
  v170[1] = 0;
  v171 = 0;
  v170[0] = 0;
  v2[1] = v149 + 48;
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_241;
LABEL_245:
  if (SHIBYTE(v206) < 0)
LABEL_242:
    operator delete(v205[0]);
LABEL_246:
  v154 = SBYTE7(v168[2]);
  if ((SBYTE7(v168[2]) & 0x80u) == 0)
    v155 = BYTE7(v168[2]);
  else
    v155 = *((_QWORD *)&v168[1] + 1);
  v156 = v155 + 24;
  if (v155 + 24 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_299;
  if (v156 <= 0x16)
  {
    v208 = 0;
    v207 = 0uLL;
    v157 = &v207;
    HIBYTE(v208) = v155 + 24;
LABEL_255:
    if (v154 >= 0)
      v160 = &v168[1];
    else
      v160 = *(_OWORD **)&v168[1];
    memmove(v157, v160, v155);
    goto LABEL_259;
  }
  v158 = (v156 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v156 | 7) != 0x17)
    v158 = v156 | 7;
  v159 = v158 + 1;
  v157 = (__int128 *)operator new(v158 + 1);
  v208 = (void *)(v159 | 0x8000000000000000);
  *(_QWORD *)&v207 = v157;
  *((_QWORD *)&v207 + 1) = v155 + 24;
  if (v155)
    goto LABEL_255;
LABEL_259:
  strcpy((char *)v157 + v155, ".enable_camera_switching");
  v211 = 0;
  v161 = "false";
  if (v62[22])
    v161 = "true";
  v213 = v161;
  sub_20E87999C(&__dst, &v213);
  if (v211 == -1)
    sub_20E877AB8();
  v213 = &v212;
  ((void (*)(void **__return_ptr, const char **, __int128 *))off_24C9C3780[v211])(v205, &v213, &__dst);
  if (v211 != -1)
    ((void (*)(const char **, __int128 *))off_24C9C3768[v211])(&v213, &__dst);
  *(_OWORD *)v169 = v207;
  v169[2] = v208;
  *(_OWORD *)v170 = *(_OWORD *)v205;
  v171 = v206;
  v205[1] = 0;
  v205[0] = 0;
  v206 = 0;
  v162 = (char *)v2[1];
  if (v162 >= v2[2])
  {
    v166 = sub_20E9A1704(v2, (uint64_t)v169);
    v167 = SHIBYTE(v171);
    v2[1] = v166;
    if (v167 < 0)
    {
      operator delete(v170[0]);
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        goto LABEL_272;
    }
    else if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
    {
      goto LABEL_272;
    }
LABEL_266:
    operator delete(v169[0]);
    if (SHIBYTE(v206) < 0)
      goto LABEL_267;
    goto LABEL_273;
  }
  v163 = v207;
  *((_QWORD *)v162 + 2) = v208;
  *(_OWORD *)v162 = v163;
  memset(v169, 0, sizeof(v169));
  v164 = v171;
  *(_OWORD *)(v162 + 24) = *(_OWORD *)v170;
  *((_QWORD *)v162 + 5) = v164;
  v170[1] = 0;
  v171 = 0;
  v170[0] = 0;
  v2[1] = v162 + 48;
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_266;
LABEL_272:
  if (SHIBYTE(v206) < 0)
  {
LABEL_267:
    operator delete(v205[0]);
    if (SBYTE7(v168[2]) < 0)
      goto LABEL_268;
LABEL_274:
    v165 = v201;
    if (!v201)
      goto LABEL_276;
    goto LABEL_275;
  }
LABEL_273:
  if ((SBYTE7(v168[2]) & 0x80000000) == 0)
    goto LABEL_274;
LABEL_268:
  operator delete(*(void **)&v168[1]);
  v165 = v201;
  if (v201)
LABEL_275:
    MEMORY[0x212BC6368](v165, 0x1000C8000313F17);
LABEL_276:
  if (v200)
    MEMORY[0x212BC6368](v200, 0x1000C8000313F17);
  if (v199)
    MEMORY[0x212BC6368](v199, 0x1000C8000313F17);
  if (v198)
    MEMORY[0x212BC6368](v198, 0x1000C8000313F17);
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  sub_20E869418((uint64_t)__p);
  if (SHIBYTE(v204) < 0)
    operator delete(__src[0]);
}

void sub_20EAAF9C0(_Unwind_Exception *a1)
{
  void **v1;

  if (SLOBYTE(STACK[0x6B7]) < 0)
    operator delete((void *)STACK[0x6A0]);
  if (SLOBYTE(STACK[0x63F]) < 0)
    operator delete((void *)STACK[0x628]);
  sub_20E90F568(v1);
  _Unwind_Resume(a1);
}

void sub_20EAAFD3C(signed int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const std::error_category *v14;
  __int128 v15;
  unsigned int v16;
  signed int v17;
  std::error_condition v18;
  unsigned int *v19;
  unsigned int *v20;
  char v21;

  v16 = a2;
  v17 = a1;
  v7 = 4;
  if (a1 <= 1439)
  {
    if (a1 == 640)
    {
      if ((a3 - 1) < 3)
        v7 = 1;
      else
        v7 = 2;
      if (0x280 / v7 - 160 > 0x1E0)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (a1 == 1280)
    {
LABEL_18:
      if (a1 / v7 - 160 > 0x1E0)
        goto LABEL_26;
      goto LABEL_19;
    }
LABEL_8:
    sub_20FD9B76C(a1, a2, &v19);
    v8 = v19;
    if (v19 != v20)
    {
      v9 = v19 + 1;
      v8 = v19;
      if (v19 + 1 != v20)
      {
        v10 = *v19;
        v8 = v19;
        v11 = v19 + 1;
        do
        {
          v13 = *v11++;
          v12 = v13;
          if (v13 < v10)
          {
            v10 = v12;
            v8 = v9;
          }
          v9 = v11;
        }
        while (v11 != v20);
      }
    }
    if (v8 == v20)
    {
      v7 = -1;
      if (!v19)
      {
LABEL_17:
        if (!v7)
          goto LABEL_26;
        goto LABEL_18;
      }
    }
    else
    {
      v7 = *v8;
      if (!v19)
        goto LABEL_17;
    }
    v20 = v19;
    operator delete(v19);
    goto LABEL_17;
  }
  if (a1 == 1440 || a1 == 1920)
    goto LABEL_18;
  if (a1 != 3840)
    goto LABEL_8;
  v7 = 8;
LABEL_19:
  if (a2 / v7 - 160 < 0x1F61)
  {
    *(_DWORD *)a4 = v7;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
LABEL_26:
  sub_20EAAFF28("Image resolution ", (unsigned int *)&v17, (std::string *)"x", &v16, (std::string *)" is not supported for hardware features");
  v14 = std::generic_category();
  *(_QWORD *)&v18.__val_ = 102;
  v18.__cat_ = v14;
  sub_20EA67538(&v18, (uint64_t)&v19, (CFErrorRef *)&v15);
  *(_OWORD *)a4 = v15;
  *(_BYTE *)(a4 + 16) = 0;
  if (v21 < 0)
    operator delete(v19);
}

void sub_20EAAFF0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAAFF28(char *__s, unsigned int *a2, std::string *a3, unsigned int *a4, std::string *a5)
{
  uint64_t result;
  _DWORD v10[6];
  int v11;
  std::string v12;
  std::string **v13;
  std::string *v14;
  std::string *v15;
  _DWORD *v16;
  std::string *v17;
  std::string *v18;

  v11 = 0;
  sub_20E8ECB20(v10, __s);
  std::to_string(&v12, *a2);
  v14 = (std::string *)v10;
  v15 = &v12;
  v16 = v10;
  v17 = &v12;
  v18 = &v12;
  if (v11 == -1)
    sub_20E877AB8();
  v13 = &v14;
  ((void (*)(std::string ***, _DWORD *))off_24C9C3750[v11])(&v13, v10);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v14 = (std::string *)v10;
  v15 = a3;
  v16 = v10;
  v17 = a3;
  v18 = a3;
  if (v11 == -1)
    sub_20E877AB8();
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, _DWORD *))off_24C9C3798[v11])(&v12, v10);
  std::to_string(&v12, *a4);
  v14 = (std::string *)v10;
  v15 = &v12;
  v16 = v10;
  v17 = &v12;
  v18 = &v12;
  if (v11 == -1)
    sub_20E877AB8();
  v13 = &v14;
  ((void (*)(std::string ***, _DWORD *))off_24C9C3750[v11])(&v13, v10);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v14 = (std::string *)v10;
  v15 = a5;
  v16 = v10;
  v17 = a5;
  v18 = a5;
  if (v11 == -1)
    sub_20E877AB8();
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, _DWORD *))off_24C9C37B0[v11])(&v12, v10);
  if (v11 == -1)
    sub_20E877AB8();
  v14 = &v12;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C9C3780[v11])(&v14, v10);
  if (v11 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C9C3768[v11])(&v14, v10);
  return result;
}

void sub_20EAB0124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EAB0174(_DWORD ***a1)
{
  return sub_20E877AF0(**a1, (char *)(*a1)[1]);
}

void sub_20EAB0180(uint64_t a1, uint64_t a2)
{
  sub_20EAB0190((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EAB0190(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C3768[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EAB0344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EAB0388(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EAB0480((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EAB0478(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EAB0480(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EAB067C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_20EAB0690()
{
  return "Slam Error";
}

void sub_20EAB069C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

double sub_20EAB06C8()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DCEA0;
  strcpy(v1, "IMU processing rate has fallen below pre-set threshold");
  return *(double *)"elow pre-set threshold";
}

double sub_20EAB0714()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x40uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBBD0;
  strcpy(v1, "Frame processing rate has fallen below pre-set threshold");
  return *(double *)" below pre-set threshold";
}

double sub_20EAB0760()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DB420;
  strcpy(v1, "IMU timestamps are either out of order or repeating");
  return *(double *)" order or repeating";
}

double sub_20EAB07B0()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DCA30;
  strcpy(v1, "Frame timestamps are either out of order or repeating");
  return *(double *)"of order or repeating";
}

char *sub_20EAB07FC()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x50uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_210313C50;
  strcpy(result, "Hardware failed to transfer/convert input frame pixels, frame will be dropped");
  return result;
}

double sub_20EAB0848()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x40uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBBF0;
  strcpy(v1, "Fatal error occurred in the SLAM engine during frame processing");
  return *(double *)"frame processing";
}

double sub_20EAB0894()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x40uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBC30;
  strcpy(v1, "Non fatal error occurred due to significant drop in a IMU data");
  return *(double *)"op in a IMU data";
}

double sub_20EAB08E0()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x48uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DAFE0;
  strcpy(v1, "Non fatal error occurred due to significant drop in a frame data");
  return *(double *)"significant drop in a frame data";
}

char *sub_20EAB0924()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x58uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_210313C40;
  strcpy(result, "Non critical error occurred due to IMU and camera sensor are not pushed real time");
  return result;
}

double sub_20EAB0978()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x48uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102E3F80;
  strcpy(v1, "FrameDownsampler failed to allocate target frame. Frame was dropped");
  return *(double *)"ate target frame. Frame was dropped";
}

double sub_20EAB0A44()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DC7C0;
  strcpy(v1, "Depth frames are arriving with significant delays");
  return *(double *)"ignificant delays";
}

double sub_20EAB0A90()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DCA60;
  strcpy(v1, "IMU processing rate has exceeded pre-set threshold");
  return *(double *)" pre-set threshold";
}

double sub_20EAB0ADC()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBF00;
  strcpy(v1, "IMU latency has fallen below pre-set threshold");
  return *(double *)"re-set threshold";
}

double sub_20EAB0B20()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102E3F90;
  strcpy(v1, "IMU latency has exceeded pre-set threshold");
  return *(double *)"re-set threshold";
}

double sub_20EAB0B64()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBF10;
  strcpy(v1, "Frame processing rate has exceeded pre-set threshold");
  return *(double *)"ed pre-set threshold";
}

double sub_20EAB0BB4()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DCA50;
  strcpy(v1, "Frame latency has fallen below pre-set threshold");
  return *(double *)"re-set threshold";
}

double sub_20EAB0BF8()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DC900;
  strcpy(v1, "Frame latency has exceeded pre-set threshold");
  return *(double *)"re-set threshold";
}

double sub_20EAB0CA4()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DC8E0;
  strcpy(v1, "IO error while reading/writing data to disk");
  return *(double *)"ing data to disk";
}

double sub_20EAB0CE8()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x20uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DC000;
  strcpy(v1, "Requested anchor ID not found");
  return *(double *)"hor ID not found";
}

void sub_20EAB0D2C()
{
  char *v0;

  v0[23] = 21;
  strcpy(v0, "Unable to open stream");
}

void sub_20EAB0D60()
{
  char *v0;

  v0[23] = 13;
  strcpy(v0, "Generic Error");
}

char *sub_20EAB0D94()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBA80;
  strcpy(result, "Unable to delete the anchor group");
  return result;
}

char *sub_20EAB0DD8()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_2102DC910;
  strcpy(result, "The frame has expired and was dropped");
  return result;
}

char *sub_20EAB0E1C()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_2102DB450;
  strcpy(result, "The hwfp have expired and were dropped");
  return result;
}

double sub_20EAB0E84()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x20uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBFE0;
  strcpy(v1, "Unable to request anchors");
  return *(double *)" request anchors";
}

void sub_20EAB0EC8()
{
  char *v0;

  v0[23] = 17;
  strcpy(v0, "HWFPs are corrupt");
}

char *sub_20EAB0EFC()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_2102DBFB0;
  strcpy(result, "Feature store is invalid");
  return result;
}

void sub_20EAB0F44(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAB0F68(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EAB0FD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EAB103C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EAB1050(_QWORD *a1, _DWORD *a2)
{
  _QWORD *result;
  char __p[21];
  char v5;

  switch(*a2)
  {
    case 0:
      v5 = 8;
      strcpy(__p, "No Error");
      sub_20E86A980(a1, (uint64_t)__p, 8);
      goto LABEL_8;
    case 1:
      v5 = 5;
      strcpy(__p, "Error");
      sub_20E86A980(a1, (uint64_t)__p, 5);
      goto LABEL_8;
    case 2:
      v5 = 19;
      strcpy(__p, "Insufficient Memory");
      sub_20E86A980(a1, (uint64_t)__p, 19);
      goto LABEL_8;
    case 3:
      v5 = 15;
      strcpy(__p, "Invalid Context");
      sub_20E86A980(a1, (uint64_t)__p, 15);
      goto LABEL_8;
    case 4:
      v5 = 17;
      strcpy(__p, "Invalid Parameter");
      sub_20E86A980(a1, (uint64_t)__p, 17);
      goto LABEL_8;
    case 5:
      v5 = 20;
      strcpy(__p, "CM Map Not Available");
      sub_20E86A980(a1, (uint64_t)__p, 20);
LABEL_8:
      if ((v5 & 0x80000000) == 0)
        goto LABEL_9;
      operator delete(*(void **)__p);
      result = a1;
      break;
    default:
LABEL_9:
      result = a1;
      break;
  }
  return result;
}

void sub_20EAB1204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAB1234(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EAB129C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EAB1304(_QWORD *a1, CFDataRef theData)
{
  size_t Length;
  const UInt8 *BytePtr;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v25[2];
  void (**v26)();
  void *__p;
  void *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  void *v34;
  char v35;
  uint64_t v36;
  __int128 __dst;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[24];
  uint64_t v51;
  _BYTE v52[72];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  char v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  Length = CFDataGetLength(theData);
  if (Length)
  {
    BytePtr = CFDataGetBytePtr(theData);
    bzero(v52, 0x3B8uLL);
    v40 = 0xBFF0000000000000;
    v45 = 0u;
    v48 = 1065353216;
    *(_OWORD *)&v50[8] = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v46 = 0u;
    v47 = 0u;
    LODWORD(v45) = 1065353216;
    *(_DWORD *)&v50[16] = 1065353216;
    v49 = 0u;
    *(_OWORD *)v50 = 0u;
    bzero(&v51, 0x2F9uLL);
    v70 = xmmword_210313E68;
    v71 = unk_210313E78;
    v72 = xmmword_210313E88;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)&v52[56] = 0u;
    v69 = 0;
    v74 = 0x3FF0000000000000;
    v73 = unk_210313E98;
    v81 = 0;
    v75 = 0;
    v77 = 0;
    v76 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v88 = 0;
    *(_WORD *)((char *)&v83 + 9) = 257;
    BYTE12(v83) = 1;
    *(_QWORD *)&v84 = 0xBFF0000000000000;
    v89 = -1;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    if (Length >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (Length >= 0x17)
    {
      v7 = (Length & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((Length | 7) != 0x17)
        v7 = Length | 7;
      v8 = v7 + 1;
      p_dst = (__int128 *)operator new(v7 + 1);
      *((_QWORD *)&__dst + 1) = Length;
      v38 = v8 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v38) = Length;
      p_dst = &__dst;
    }
    memcpy(p_dst, BytePtr, Length);
    *((_BYTE *)p_dst + Length) = 0;
    sub_20E909E50((uint64_t)&v30, &__dst, 8);
    v39 = 1;
    sub_20E9EECEC(v25, &v39, (uint64_t)&v30, Length);
    v25[0] = &off_24C9B0298;
    v26 = (void (**)())&unk_24C9B03E0;
    LODWORD(v39) = 17;
    sub_20E9EDADC(v29, &v39);
    sub_20EABBA4C(v25, (uint64_t)&v40, v39);
    v25[0] = &off_24C9B71C0;
    v26 = (void (**)())&unk_24C9B7308;
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      sub_20E9EF740((_QWORD *)(v9 + 8));
      MEMORY[0x212BC6398](v9, 0x10F2C40853B94B7);
    }
    v26 = off_24C9B7428;
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    *(_QWORD *)&v30 = *MEMORY[0x24BEDB7F8];
    *(_QWORD *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
    *(_QWORD *)&v31 = MEMORY[0x24BEDB848] + 16;
    if (v35 < 0)
      operator delete(v34);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x212BC6290](&v36);
    if (SHIBYTE(v38) < 0)
      operator delete((void *)__dst);
    sub_20EB0CA74();
    v10 = (char *)operator new(0x50uLL);
    v11 = v31;
    *(_OWORD *)(v10 + 24) = v30;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = &off_24C9C3988;
    v30 = 0uLL;
    *(_OWORD *)(v10 + 40) = v11;
    v31 = 0uLL;
    *(_OWORD *)(v10 + 56) = v32;
    v32 = 0uLL;
    v10[72] = v33;
    v12 = (std::__shared_weak_count *)a1[1];
    *a1 = v10 + 24;
    a1[1] = v10;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    sub_20EAB9778((uint64_t)&v40);
  }
  return a1;
}

void sub_20EAB17B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  sub_20E91D88C(&a17);
  sub_20EAB9778((uint64_t)&a56);
  sub_20E86665C(v56);
  _Unwind_Resume(a1);
}

void sub_20EAB17D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,char a59)
{
  uint64_t v59;

  sub_20EAB9778((uint64_t)&a59);
  sub_20E86665C(v59);
  _Unwind_Resume(a1);
}

void sub_20EAB181C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EAB1830(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20E9EEE68((uint64_t *)va);
  JUMPOUT(0x20EAB183CLL);
}

void sub_20EAB186C(char ***a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p;
  _BYTE *v6;
  _BYTE v7[2048];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*a1)
  {
    sub_20EB0C2C0((uint64_t)v7, *a1);
    v3[0] = 0;
    v3[1] = 0;
    v4 = 0;
    sub_20EAB19B0((uint64_t)v7, (uint64_t)v3, &__p);
    sub_20EA5EE78((const UInt8 *)__p, v6 - (_BYTE *)__p, a2);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v4) < 0)
      operator delete(v3[0]);
    sub_20EAB9778((uint64_t)v7);
  }
  else
  {
    sub_20EA5EE78(0, 0, a2);
  }
}

void sub_20EAB1950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      sub_20EAB9778((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  sub_20EAB9778((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB19B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  size_t prime;
  uint64_t *i;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void ***v22;
  char v23;
  float v24;
  void ****v25;
  void ***v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE *v52;
  _BYTE *v53;
  int64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE *v70;
  _BYTE *v71;
  int64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  int64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  void **v86;
  __int128 *v87;
  void **v88;
  __int128 v89;
  void **v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _BYTE *v97;
  _BYTE *v98;
  int64_t v99;
  char *v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE *v110;
  _BYTE *v111;
  int64_t v112;
  char *v113;
  int8x8_t v114;
  BOOL v115;
  _BYTE *v116;
  _BYTE *v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  void **v124;
  uint64_t v125;
  void **v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  int64_t v130;
  char *v131;
  char *v132;
  _BYTE *v133;
  _BYTE *v134;
  int64_t v135;
  char *v136;
  _QWORD *v137;
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t *v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t **v151;
  BOOL v152;
  unint64_t v153;
  uint64_t **v154;
  uint64_t **v155;
  unint64_t v156;
  uint64_t *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  void ***v164;
  uint64_t v165;
  uint64_t v166;
  int64_t v167;
  unint64_t v168;
  void **v169;
  uint64_t v170;
  char *v171;
  void **v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  int64_t v176;
  char *v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  int64_t v187;
  char *v188;
  char *v189;
  _BYTE *v190;
  _BYTE *v191;
  int64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  int64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  __int128 v207;
  _BYTE *v208;
  _BYTE *v209;
  int64_t v210;
  char *v211;
  _BYTE *v212;
  _BYTE *v213;
  int64_t v214;
  char *v215;
  char *v216;
  char *v217;
  int64_t v218;
  unint64_t v219;
  void **v220;
  uint64_t v221;
  uint64_t v222;
  int64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  __int128 v229;
  __int128 v230;
  _BYTE *v231;
  _BYTE *v232;
  int64_t v233;
  uint64_t v234;
  _BYTE *v235;
  _BYTE *v236;
  int64_t v237;
  char *v238;
  size_t v239;
  uint64_t *p_dst;
  unint64_t v241;
  const void *v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  size_t v246;
  char *v247;
  uint64_t **v248;
  uint64_t v249;
  void *v250;
  unint64_t v252;
  uint8x8_t v253;
  uint64_t v254;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  _QWORD v260[2];
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  const void *v265;
  uint64_t v266;
  const void *v267;
  unint64_t v268;
  void *__p[2];
  __int128 v270;
  int v271;
  uint64_t v272[19];
  void **v273;
  char v274;
  void **v275;
  void **v276;
  char v277;
  void ***v278;
  void ***v279;
  void ***v280;
  char v281;
  uint64_t *__dst;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  float v287;
  char v288;
  uint64_t v289;
  _DWORD v290[12];
  char *v291;
  char *v292;
  char *v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  char *v298;
  char *v299;
  char *v300;
  char v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  _BYTE v308[481];
  _QWORD v309[3];
  _QWORD v310[3];
  _QWORD v311[3];
  _QWORD v312[3];
  __int128 v313;
  uint64_t v314;
  char *v315;
  char *v316;
  char *v317;
  char v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  void **v323;
  void **v324;
  void **v325;
  _QWORD v326[41];
  char v327;
  char *v328;
  char *v329;
  char *v330;
  uint64_t v331[3];
  _BYTE v332[281];
  char v333;
  char v334;
  uint64_t v335;
  uint64_t **v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  void **v349;
  void **v350;
  void **v351;
  char v352;
  __int128 v353;
  uint64_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  uint64_t v360;
  char *v361;
  char *v362;
  char *v363;
  __int128 v364;
  __int128 v365;
  uint64_t v366;

  v366 = *MEMORY[0x24BDAC8D0];
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v272[0] = MEMORY[0x24BEDB870] + 64;
  v263 = v8;
  *(uint64_t *)((char *)&v263 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v263 + *(_QWORD *)(v263 - 24));
  std::ios_base::init(v10, &v264);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v263 = v6 + 24;
  v272[0] = v7;
  std::streambuf::basic_streambuf();
  v264 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v270 = 0u;
  v271 = 16;
  v260[1] = 1;
  v11 = operator new();
  *(_QWORD *)v11 = &v263;
  *(_QWORD *)(v11 + 8) = &v263;
  *(_BYTE *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 40) = 0;
  *(_BYTE *)(v11 + 48) = 0;
  *(_BYTE *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  v260[0] = &off_24C9B4468;
  v261 = &unk_24C9B45B8;
  v262 = v11;
  v12 = *(unsigned __int8 *)(a2 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 8);
  if (v12 && (sub_20E9F5254((uint64_t)&__dst, v11 + 8, a2), v11 = v262, *(_BYTE *)(v262 + 40)))
  {
    __dst = (uint64_t *)(v262 + 16);
    sub_20E9F3D4C(&__dst, 0x11u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&__dst, v11 + 8);
  }
  __dst = *(uint64_t **)a1;
  v283 = *(_OWORD *)(a1 + 8);
  v284 = *(_OWORD *)(a1 + 24);
  v285 = 0u;
  v286 = 0u;
  v287 = *(float *)(a1 + 72);
  prime = *(_QWORD *)(a1 + 48);
  if (prime == 1)
  {
    prime = 2;
LABEL_9:
    sub_20E8D2B3C((uint64_t)&v285, prime);
    goto LABEL_10;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a1 + 48));
    v114 = *(int8x8_t *)((char *)&v285 + 8);
    v115 = prime >= *((_QWORD *)&v285 + 1);
    if (prime > *((_QWORD *)&v285 + 1))
      goto LABEL_9;
  }
  else
  {
    v114 = 0;
    v115 = 1;
    if (prime)
      goto LABEL_9;
  }
  if (!v115)
  {
    v252 = vcvtps_u32_f32((float)*((unint64_t *)&v286 + 1) / v287);
    if (*(_QWORD *)&v114 < 3uLL || (v253 = (uint8x8_t)vcnt_s8(v114), v253.i16[0] = vaddlv_u8(v253), v253.u32[0] > 1uLL))
    {
      v252 = std::__next_prime(v252);
    }
    else
    {
      v254 = 1 << -(char)__clz(v252 - 1);
      if (v252 >= 2)
        v252 = v254;
    }
    if (prime <= v252)
      prime = v252;
    if (prime < *(_QWORD *)&v114)
      goto LABEL_9;
  }
LABEL_10:
  for (i = *(uint64_t **)(a1 + 56); i; i = (uint64_t *)*i)
  {
    v15 = *((unsigned int *)i + 4);
    v16 = *((_QWORD *)&v285 + 1);
    if (*((_QWORD *)&v285 + 1))
    {
      v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v285 + 8));
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v3 = *((unsigned int *)i + 4);
        if (*((_QWORD *)&v285 + 1) <= v15)
          v3 = v15 % *((_QWORD *)&v285 + 1);
      }
      else
      {
        v3 = (DWORD2(v285) - 1) & v15;
      }
      v18 = *(uint64_t ***)(v285 + 8 * v3);
      if (v18)
      {
        v19 = *v18;
        if (v19)
        {
          if (v17.u32[0] < 2uLL)
          {
            while (1)
            {
              v21 = v19[1];
              if (v21 == v15)
              {
                if (*((_DWORD *)v19 + 4) == (_DWORD)v15)
                  goto LABEL_70;
              }
              else if ((v21 & (*((_QWORD *)&v285 + 1) - 1)) != v3)
              {
                goto LABEL_31;
              }
              v19 = (uint64_t *)*v19;
              if (!v19)
                goto LABEL_31;
            }
          }
          do
          {
            v20 = v19[1];
            if (v20 == v15)
            {
              if (*((_DWORD *)v19 + 4) == (_DWORD)v15)
                goto LABEL_70;
            }
            else
            {
              if (v20 >= *((_QWORD *)&v285 + 1))
                v20 %= *((_QWORD *)&v285 + 1);
              if (v20 != v3)
                break;
            }
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_31:
    v22 = (void ***)operator new(0x48uLL);
    v278 = v22;
    v279 = (void ***)&v286;
    LOBYTE(v280) = 0;
    *v22 = 0;
    v22[1] = (void **)v15;
    *((_DWORD *)v22 + 4) = *((_DWORD *)i + 4);
    v23 = *((_BYTE *)i + 28);
    *((_DWORD *)v22 + 6) = *((_DWORD *)i + 6);
    *((_BYTE *)v22 + 28) = v23;
    sub_20E96A108((uint64_t)(v22 + 4), (uint64_t)(i + 4));
    LOBYTE(v280) = 1;
    v24 = (float)(unint64_t)(*((_QWORD *)&v286 + 1) + 1);
    if (v16 && (float)(v287 * (float)v16) >= v24)
    {
      v25 = *(void *****)(v285 + 8 * v3);
      v26 = v278;
      if (v25)
        goto LABEL_34;
    }
    else
    {
      v27 = (v16 & (v16 - 1)) != 0;
      if (v16 < 3)
        v27 = 1;
      v28 = v27 | (2 * v16);
      v29 = vcvtps_u32_f32(v24 / v287);
      if (v28 <= v29)
        v30 = v29;
      else
        v30 = v28;
      if (v30 == 1)
      {
        v30 = 2;
      }
      else if ((v30 & (v30 - 1)) != 0)
      {
        v30 = std::__next_prime(v30);
      }
      v31 = *((_QWORD *)&v285 + 1);
      if (v30 > *((_QWORD *)&v285 + 1))
        goto LABEL_45;
      if (v30 < *((_QWORD *)&v285 + 1))
      {
        v32 = vcvtps_u32_f32((float)*((unint64_t *)&v286 + 1) / v287);
        if (*((_QWORD *)&v285 + 1) < 3uLL
          || (v33 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v285 + 8)), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (v30 <= v32)
          v30 = v32;
        if (v30 < v31)
LABEL_45:
          sub_20E8D2B3C((uint64_t)&v285, v30);
      }
      v16 = *((_QWORD *)&v285 + 1);
      if ((*((_QWORD *)&v285 + 1) & (*((_QWORD *)&v285 + 1) - 1)) != 0)
      {
        if (*((_QWORD *)&v285 + 1) <= v15)
        {
          v3 = v15 % *((_QWORD *)&v285 + 1);
          v25 = *(void *****)(v285 + 8 * (v15 % *((_QWORD *)&v285 + 1)));
          v26 = v278;
          if (v25)
          {
LABEL_34:
            *v26 = (void **)*v25;
            *v25 = v278;
            goto LABEL_69;
          }
        }
        else
        {
          v3 = v15;
          v25 = *(void *****)(v285 + 8 * v15);
          v26 = v278;
          if (v25)
            goto LABEL_34;
        }
      }
      else
      {
        v3 = (DWORD2(v285) - 1) & v15;
        v25 = *(void *****)(v285 + 8 * v3);
        v26 = v278;
        if (v25)
          goto LABEL_34;
      }
    }
    *v26 = (void **)v286;
    *(_QWORD *)&v286 = v278;
    *(_QWORD *)(v285 + 8 * v3) = &v286;
    if (*v278)
    {
      v35 = (unint64_t)(*v278)[1];
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v35 >= v16)
          v35 %= v16;
      }
      else
      {
        v35 &= v16 - 1;
      }
      *(_QWORD *)(v285 + 8 * v35) = v278;
    }
LABEL_69:
    ++*((_QWORD *)&v286 + 1);
LABEL_70:
    ;
  }
  v288 = *(_BYTE *)(a1 + 80);
  sub_20E96A108((uint64_t)&v289, a1 + 88);
  sub_20E96A108((uint64_t)v290, a1 + 128);
  v290[10] = *(_DWORD *)(a1 + 168);
  v293 = 0;
  v291 = 0;
  v292 = 0;
  v36 = *(_QWORD *)(a1 + 176);
  v37 = *(_QWORD *)(a1 + 184);
  v38 = v37 - v36;
  if (v37 != v36)
  {
    v39 = 0xF0F0F0F0F0F0F0F1 * (v38 >> 3);
    if (v39 > 0x1E1E1E1E1E1E1E1)
      sub_20EABADD4();
    v40 = (char *)operator new(v38);
    v41 = 0;
    v291 = v40;
    v292 = v40;
    v293 = &v40[136 * v39];
    do
    {
      v42 = v36 + v41;
      v43 = &v40[v41];
      *(_QWORD *)v43 = *(_QWORD *)(v36 + v41);
      v44 = *(_OWORD *)(v36 + v41 + 8);
      v45 = *(_OWORD *)(v36 + v41 + 24);
      v46 = *(_OWORD *)(v36 + v41 + 40);
      *(_OWORD *)(v43 + 56) = *(_OWORD *)(v36 + v41 + 56);
      *(_OWORD *)(v43 + 40) = v46;
      *(_OWORD *)(v43 + 24) = v45;
      *(_OWORD *)(v43 + 8) = v44;
      v47 = *(_OWORD *)(v36 + v41 + 72);
      v48 = *(_OWORD *)(v36 + v41 + 88);
      v49 = *(_OWORD *)(v36 + v41 + 104);
      *(_OWORD *)(v43 + 120) = *(_OWORD *)(v36 + v41 + 120);
      *(_OWORD *)(v43 + 104) = v49;
      *(_OWORD *)(v43 + 88) = v48;
      *(_OWORD *)(v43 + 72) = v47;
      v41 += 136;
    }
    while (v42 + 136 != v37);
    v292 = &v40[v41];
  }
  LOBYTE(v294) = 0;
  v301 = 0;
  if (*(_BYTE *)(a1 + 288))
  {
    v50 = *(_OWORD *)(a1 + 216);
    v294 = *(_OWORD *)(a1 + 200);
    v295 = v50;
    v51 = *(_OWORD *)(a1 + 248);
    v296 = *(_OWORD *)(a1 + 232);
    v297 = v51;
    v300 = 0;
    v298 = 0;
    v299 = 0;
    v53 = *(_BYTE **)(a1 + 264);
    v52 = *(_BYTE **)(a1 + 272);
    v54 = v52 - v53;
    if (v52 != v53)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v54 >> 3) >= 0x666666666666667)
        sub_20EABADD4();
      v298 = (char *)operator new(v54);
      v299 = v298;
      v55 = &v298[8 * (v54 >> 3)];
      v300 = v55;
      memcpy(v298, v53, v54 - 7);
      v299 = v55;
    }
    v301 = 1;
  }
  v303 = 0;
  v302 = 0;
  v304 = 0;
  v56 = *(_QWORD *)(a1 + 296);
  v57 = *(_QWORD *)(a1 + 304);
  v58 = v57 - v56;
  if (v57 != v56)
  {
    v59 = 0x8E38E38E38E38E39 * (v58 >> 4);
    if (v59 >= 0x1C71C71C71C71C8)
      sub_20EABADD4();
    v60 = (char *)operator new(v58);
    v61 = 0;
    v302 = v60;
    v303 = v60;
    v304 = &v60[144 * v59];
    do
    {
      v62 = v56 + v61;
      v63 = &v60[v61];
      *(_OWORD *)v63 = *(_OWORD *)(v56 + v61);
      v64 = *(_OWORD *)(v56 + v61 + 128);
      v66 = *(_OWORD *)(v56 + v61 + 80);
      v65 = *(_OWORD *)(v56 + v61 + 96);
      *((_OWORD *)v63 + 7) = *(_OWORD *)(v56 + v61 + 112);
      *((_OWORD *)v63 + 8) = v64;
      *((_OWORD *)v63 + 5) = v66;
      *((_OWORD *)v63 + 6) = v65;
      v67 = *(_OWORD *)(v56 + v61 + 16);
      v68 = *(_OWORD *)(v56 + v61 + 32);
      v69 = *(_OWORD *)(v56 + v61 + 64);
      *((_OWORD *)v63 + 3) = *(_OWORD *)(v56 + v61 + 48);
      *((_OWORD *)v63 + 4) = v69;
      *((_OWORD *)v63 + 1) = v67;
      *((_OWORD *)v63 + 2) = v68;
      v61 += 144;
    }
    while (v62 + 144 != v57);
    v303 = &v60[v61];
  }
  v306 = 0;
  v305 = 0;
  v307 = 0;
  v71 = *(_BYTE **)(a1 + 320);
  v70 = *(_BYTE **)(a1 + 328);
  v72 = v70 - v71;
  if (v70 != v71)
  {
    if (v72 < 0)
      sub_20E92CED8();
    v305 = (char *)operator new(v70 - v71);
    v306 = v305;
    v73 = &v305[8 * (v72 >> 3)];
    v307 = v73;
    memcpy(v305, v71, v72);
    v306 = v73;
  }
  memcpy(v308, (const void *)(a1 + 344), sizeof(v308));
  memset(v309, 0, sizeof(v309));
  sub_20EACF374(v309, *(_QWORD *)(a1 + 832), *(_QWORD *)(a1 + 840), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 840) - *(_QWORD *)(a1 + 832)) >> 4));
  memset(v310, 0, sizeof(v310));
  sub_20EACF374(v310, *(_QWORD *)(a1 + 856), *(_QWORD *)(a1 + 864), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 4));
  memset(v311, 0, sizeof(v311));
  sub_20E8ADB20((char *)v311, *(__int128 **)(a1 + 880), *(__int128 **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 3));
  memset(v312, 0, sizeof(v312));
  sub_20E8ADB20((char *)v312, *(__int128 **)(a1 + 904), *(__int128 **)(a1 + 912), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 912) - *(_QWORD *)(a1 + 904)) >> 3));
  v313 = *(_OWORD *)(a1 + 928);
  v314 = *(_QWORD *)(a1 + 944);
  LOBYTE(v315) = 0;
  v318 = 0;
  v257 = a1;
  if (*(_BYTE *)(a1 + 976))
  {
    v315 = 0;
    v316 = 0;
    v317 = 0;
    v74 = a1;
    v75 = *(uint64_t **)(a1 + 952);
    v76 = *(uint64_t **)(v74 + 960);
    v276 = (void **)&v315;
    v277 = 0;
    v77 = (char *)v76 - (char *)v75;
    if (v76 != v75)
    {
      v78 = 0x84BDA12F684BDA13 * (v77 >> 3);
      if (v78 >= 0x12F684BDA12F685)
        sub_20EABADD4();
      v315 = (char *)operator new(v77);
      v316 = v315;
      v317 = &v315[216 * v78];
      v79 = v315;
      do
      {
        *((_QWORD *)v79 + 2) = 0;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
        v82 = *v75;
        v83 = v75[1];
        v84 = v83 - *v75;
        if (v83 != *v75)
        {
          v85 = 0xF0F0F0F0F0F0F0F1 * (v84 >> 3);
          if (v85 > 0x1E1E1E1E1E1E1E1)
            sub_20EABADD4();
          v86 = (void **)operator new(v84);
          *(_QWORD *)v79 = v86;
          *((_QWORD *)v79 + 1) = v86;
          *((_QWORD *)v79 + 2) = &v86[17 * v85];
          v273 = v86;
          v275 = v86;
          v278 = (void ***)(v79 + 16);
          v279 = &v275;
          v280 = &v273;
          v281 = 0;
          v87 = (__int128 *)(v82 + 104);
          v88 = v86;
          do
          {
            v92 = *(__int128 *)((char *)v87 - 104);
            v93 = *(__int128 *)((char *)v87 - 72);
            *((_OWORD *)v88 + 1) = *(__int128 *)((char *)v87 - 88);
            *((_OWORD *)v88 + 2) = v93;
            *(_OWORD *)v88 = v92;
            v94 = *(__int128 *)((char *)v87 - 56);
            v95 = *(__int128 *)((char *)v87 - 40);
            v96 = *(__int128 *)((char *)v87 - 24);
            *((_BYTE *)v88 + 96) = *((_BYTE *)v87 - 8);
            *((_OWORD *)v88 + 4) = v95;
            *((_OWORD *)v88 + 5) = v96;
            *((_OWORD *)v88 + 3) = v94;
            *((_BYTE *)v88 + 104) = 0;
            *((_BYTE *)v88 + 128) = 0;
            if (*((_BYTE *)v87 + 24))
            {
              if (*((char *)v87 + 23) < 0)
              {
                sub_20E860C04((_BYTE *)v88 + 104, *(void **)v87, *((_QWORD *)v87 + 1));
                v90 = v273;
              }
              else
              {
                v89 = *v87;
                v88[15] = (void *)*((_QWORD *)v87 + 2);
                *(_OWORD *)(v88 + 13) = v89;
                v90 = v88;
              }
              *((_BYTE *)v88 + 128) = 1;
              v88 = v90;
            }
            v91 = (uint64_t)v87 - 104;
            v88 += 17;
            v273 = v88;
            v87 = (__int128 *)((char *)v87 + 136);
          }
          while (v91 + 136 != v83);
          *((_QWORD *)v79 + 1) = v88;
        }
        *((_QWORD *)v79 + 3) = 0;
        *((_QWORD *)v79 + 4) = 0;
        *((_QWORD *)v79 + 5) = 0;
        v98 = (_BYTE *)v75[3];
        v97 = (_BYTE *)v75[4];
        v99 = v97 - v98;
        if (v97 != v98)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v99 >> 2) >= 0x1555555555555556)
            sub_20EABADD4();
          v100 = (char *)operator new(v99);
          *((_QWORD *)v79 + 3) = v100;
          *((_QWORD *)v79 + 4) = v100;
          v101 = &v100[4 * (v99 >> 2)];
          *((_QWORD *)v79 + 5) = v101;
          memcpy(v100, v98, v99);
          *((_QWORD *)v79 + 4) = v101;
        }
        v102 = *((_OWORD *)v75 + 7);
        v103 = *((_OWORD *)v75 + 8);
        v104 = *((_OWORD *)v75 + 9);
        v105 = *((_OWORD *)v75 + 10);
        v106 = *((_OWORD *)v75 + 3);
        v107 = *((_OWORD *)v75 + 4);
        v108 = *((_OWORD *)v75 + 5);
        v109 = *((_OWORD *)v75 + 6);
        *((_QWORD *)v79 + 22) = 0;
        *((_OWORD *)v79 + 5) = v108;
        *((_OWORD *)v79 + 6) = v109;
        *((_OWORD *)v79 + 3) = v106;
        *((_OWORD *)v79 + 4) = v107;
        *((_OWORD *)v79 + 9) = v104;
        *((_OWORD *)v79 + 10) = v105;
        *((_OWORD *)v79 + 7) = v102;
        *((_OWORD *)v79 + 8) = v103;
        *((_QWORD *)v79 + 23) = 0;
        *((_QWORD *)v79 + 24) = 0;
        v111 = (_BYTE *)v75[22];
        v110 = (_BYTE *)v75[23];
        v112 = v110 - v111;
        if (v110 != v111)
        {
          if (v112 < 0)
            sub_20EABADD4();
          v113 = (char *)operator new(v110 - v111);
          *((_QWORD *)v79 + 22) = v113;
          *((_QWORD *)v79 + 23) = v113;
          v80 = &v113[4 * (v112 >> 2)];
          *((_QWORD *)v79 + 24) = v80;
          memcpy(v113, v111, v112);
          *((_QWORD *)v79 + 23) = v80;
        }
        v81 = v75[25];
        v79[208] = *((_BYTE *)v75 + 208);
        *((_QWORD *)v79 + 25) = v81;
        v75 += 27;
        v79 += 216;
      }
      while (v75 != v76);
      v316 = v79;
    }
    v318 = 1;
    a1 = v257;
  }
  v319 = 0u;
  v320 = 0;
  v116 = *(_BYTE **)(a1 + 984);
  v117 = *(_BYTE **)(a1 + 992);
  v118 = v117 - v116;
  if (v117 != v116)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v118 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_20EABADD4();
    *(_QWORD *)&v319 = operator new(v118);
    *((_QWORD *)&v319 + 1) = v319;
    v119 = v319 + 8 * (v118 >> 3);
    v320 = v119;
    memcpy((void *)v319, v116, v118);
    *((_QWORD *)&v319 + 1) = v119;
  }
  v321 = *(_QWORD *)(a1 + 1008);
  v322 = *(_BYTE *)(a1 + 1016);
  v323 = 0;
  v325 = 0;
  v324 = 0;
  v120 = *(_QWORD *)(a1 + 1024);
  v121 = *(_QWORD *)(a1 + 1032);
  v122 = v121 - v120;
  if (v121 != v120)
  {
    v123 = 0xAAAAAAAAAAAAAAABLL * (v122 >> 3);
    if (v123 > 0xAAAAAAAAAAAAAAALL)
      sub_20EABADD4();
    v124 = (void **)operator new(v122);
    v125 = 0;
    v323 = v124;
    v324 = v124;
    v325 = &v124[3 * v123];
    v276 = v124;
    v273 = v124;
    v278 = &v325;
    v279 = &v273;
    v280 = &v276;
    v281 = 0;
    do
    {
      v126 = &v124[v125];
      v127 = v120 + v125 * 8;
      *v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      v129 = *(_BYTE **)(v120 + v125 * 8);
      v128 = *(_BYTE **)(v120 + v125 * 8 + 8);
      v130 = v128 - v129;
      if (v128 != v129)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v130 >> 5)) >= 0x124924924924925)
          sub_20EABADD4();
        v131 = (char *)operator new(v130);
        *v126 = v131;
        v126[1] = v131;
        v132 = &v131[32 * (v130 >> 5)];
        v126[2] = v132;
        memcpy(v131, v129, v130 - 7);
        v126[1] = v132;
        a1 = v257;
      }
      v276 = v126 + 3;
      v125 += 3;
    }
    while (v127 + 24 != v121);
    v324 = &v124[v125];
  }
  memcpy(v326, (const void *)(a1 + 1048), sizeof(v326));
  v327 = 0;
  v334 = 0;
  if (*(_BYTE *)(a1 + 1728))
  {
    v329 = 0;
    v328 = 0;
    v330 = 0;
    v133 = *(_BYTE **)(a1 + 1384);
    v134 = *(_BYTE **)(a1 + 1392);
    v135 = v134 - v133;
    if (v134 != v133)
    {
      if (v135 < 0)
        sub_20E867F44();
      v328 = (char *)operator new(v134 - v133);
      v329 = v328;
      v136 = &v328[8 * (v135 >> 3)];
      v330 = v136;
      memcpy(v328, v133, v135);
      v329 = v136;
    }
    LOBYTE(v331[0]) = 0;
    v333 = 0;
    if (*(_BYTE *)(a1 + 1720))
    {
      sub_20EACF7CC(v331, (uint64_t *)(a1 + 1408));
      memcpy(v332, (const void *)(a1 + 1432), sizeof(v332));
      v333 = 1;
    }
    v334 = 1;
  }
  LOBYTE(v335) = 0;
  v352 = 0;
  if (*(_BYTE *)(a1 + 1872))
  {
    v335 = *(_QWORD *)(a1 + 1736);
    v338 = 0;
    v337 = 0;
    v336 = &v337;
    v137 = *(_QWORD **)(a1 + 1744);
    if (v137 == (_QWORD *)(a1 + 1752))
    {
LABEL_135:
      v339 = *(_QWORD *)(a1 + 1768);
      v340 = 0;
      v342 = 0;
      v341 = 0;
      v138 = *(_BYTE **)(a1 + 1776);
      v139 = *(_BYTE **)(a1 + 1784);
      v140 = v139 - v138;
      if (v139 != v138)
      {
        if (v140 < 0)
          sub_20E9DEF2C();
        v340 = (char *)operator new(v139 - v138);
        v341 = v340;
        v141 = &v340[16 * (v140 >> 4)];
        v342 = v141;
        memcpy(v340, v138, v140 - 4);
        v341 = v141;
      }
      v344 = 0;
      v343 = 0;
      v345 = 0;
      v142 = *(_QWORD *)(a1 + 1800);
      v143 = *(_QWORD *)(a1 + 1808);
      v273 = (void **)&v343;
      v274 = 0;
      v256 = v143;
      v144 = v143 - v142;
      if (v143 != v142)
      {
        v145 = 0x2E8BA2E8BA2E8BA3 * (v144 >> 4);
        if (v145 >= 0x1745D1745D1745ELL)
          sub_20EABADD4();
        v146 = 0;
        v343 = (char *)operator new(v144);
        v344 = v343;
        v345 = &v343[176 * v145];
        v147 = v343;
        do
        {
          *(_QWORD *)v147 = *(_QWORD *)v142;
          v161 = *(_OWORD *)(v142 + 8);
          v162 = *(_OWORD *)(v142 + 24);
          v163 = *(_QWORD *)(v142 + 40);
          *((_QWORD *)v147 + 8) = 0;
          v164 = (void ***)(v147 + 64);
          *((_QWORD *)v147 + 5) = v163;
          *(_OWORD *)(v147 + 24) = v162;
          *(_OWORD *)(v147 + 8) = v161;
          *((_QWORD *)v147 + 6) = 0;
          *((_QWORD *)v147 + 7) = 0;
          v258 = v142;
          v259 = v147;
          v165 = *(_QWORD *)(v142 + 48);
          v166 = *(_QWORD *)(v142 + 56);
          v167 = v166 - v165;
          if (v166 != v165)
          {
            v168 = 0xAAAAAAAAAAAAAAABLL * (v167 >> 3);
            if (v168 > 0xAAAAAAAAAAAAAAALL)
              sub_20EABADD4();
            v169 = (void **)operator new(v167);
            v170 = 0;
            *((_QWORD *)v259 + 6) = v169;
            *((_QWORD *)v259 + 7) = v169;
            *((_QWORD *)v259 + 8) = &v169[3 * v168];
            v275 = v169;
            v276 = v169;
            v278 = v164;
            v279 = &v275;
            v280 = &v276;
            v281 = 0;
            do
            {
              v172 = &v169[v170];
              v173 = v165 + v170 * 8;
              *v172 = 0;
              v172[1] = 0;
              v172[2] = 0;
              v175 = *(_BYTE **)(v165 + v170 * 8);
              v174 = *(_BYTE **)(v165 + v170 * 8 + 8);
              v176 = v174 - v175;
              if (v174 != v175)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v176 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  sub_20EABADD4();
                v177 = (char *)operator new(v176);
                *v172 = v177;
                v172[1] = v177;
                v171 = &v177[8 * (v176 >> 3)];
                v172[2] = v171;
                memcpy(v177, v175, v176 - 4);
                v172[1] = v171;
              }
              v276 = v172 + 3;
              v170 += 3;
            }
            while (v173 + 24 != v166);
            v178 = &v169[v170];
            v147 = v259;
            *((_QWORD *)v259 + 7) = v178;
          }
          *((_QWORD *)v147 + 9) = 0;
          *((_QWORD *)v147 + 10) = 0;
          *((_QWORD *)v147 + 11) = 0;
          v160 = v258;
          v179 = *(_QWORD *)(v258 + 72);
          v180 = *(_QWORD *)(v258 + 80);
          v278 = (void ***)(v147 + 72);
          LOBYTE(v279) = 0;
          v181 = v180 - v179;
          if (v180 != v179)
          {
            v182 = 0x6DB6DB6DB6DB6DB7 * (v181 >> 4);
            if (v182 >= 0x24924924924924ALL)
              sub_20EABADD4();
            v183 = (char *)operator new(v181);
            v184 = 0;
            *((_QWORD *)v259 + 9) = v183;
            *((_QWORD *)v259 + 10) = v183;
            *((_QWORD *)v259 + 11) = &v183[112 * v182];
            v160 = v258;
            do
            {
              sub_20EACFB94((uint64_t)&v183[v184], (_QWORD *)(v179 + v184));
              v184 += 112;
            }
            while (v179 + v184 != v180);
            v147 = v259;
            *((_QWORD *)v259 + 10) = &v183[v184];
          }
          *((_QWORD *)v147 + 12) = 0;
          *((_QWORD *)v147 + 13) = 0;
          *((_QWORD *)v147 + 14) = 0;
          v186 = *(_BYTE **)(v160 + 96);
          v185 = *(_BYTE **)(v160 + 104);
          v187 = v185 - v186;
          if (v185 != v186)
          {
            if (v187 < 0)
              sub_20E867F44();
            v188 = (char *)operator new(v185 - v186);
            v147 = v259;
            *((_QWORD *)v259 + 12) = v188;
            *((_QWORD *)v259 + 13) = v188;
            v189 = &v188[8 * (v187 >> 3)];
            *((_QWORD *)v259 + 14) = v189;
            memcpy(v188, v186, v187);
            *((_QWORD *)v259 + 13) = v189;
          }
          *((_QWORD *)v147 + 15) = 0;
          *((_QWORD *)v147 + 16) = 0;
          *((_QWORD *)v147 + 17) = 0;
          v191 = *(_BYTE **)(v160 + 120);
          v190 = *(_BYTE **)(v160 + 128);
          v192 = v190 - v191;
          if (v190 != v191)
          {
            if (0xCBEEA4E1A08AD8F3 * (v192 >> 3) >= 0x8AD8F2FBA93869)
              sub_20E92CED8();
            v193 = (char *)operator new(v192);
            v147 = v259;
            *((_QWORD *)v259 + 15) = v193;
            *((_QWORD *)v259 + 16) = v193;
            v194 = &v193[8 * (v192 >> 3)];
            *((_QWORD *)v259 + 17) = v194;
            memcpy(v193, v191, v192 - 4);
            *((_QWORD *)v259 + 16) = v194;
          }
          *((_QWORD *)v147 + 18) = 0;
          *((_QWORD *)v147 + 19) = 0;
          *((_QWORD *)v147 + 20) = 0;
          v195 = *(char **)(v160 + 144);
          v196 = *(char **)(v160 + 152);
          v276 = (void **)(v147 + 144);
          v277 = 0;
          if (v196 != v195)
          {
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v196 - v195) >> 3)) > 0x492492492492492)
              sub_20EABADD4();
            v197 = (char *)operator new(v196 - v195);
            *((_QWORD *)v259 + 18) = v197;
            *((_QWORD *)v259 + 19) = v197;
            *((_QWORD *)v259 + 20) = &v197[8 * ((v196 - v195) >> 3)];
            v198 = v197;
            do
            {
              *v198 = *v195;
              *((_QWORD *)v198 + 1) = 0;
              *((_QWORD *)v198 + 2) = 0;
              *((_QWORD *)v198 + 3) = 0;
              v200 = *((_QWORD *)v195 + 1);
              v201 = *((_QWORD *)v195 + 2);
              v278 = (void ***)(v198 + 8);
              LOBYTE(v279) = 0;
              v202 = v201 - v200;
              if (v201 != v200)
              {
                v203 = 0xF0F0F0F0F0F0F0F1 * (v202 >> 3);
                if (v203 > 0x1E1E1E1E1E1E1E1)
                  sub_20EABADD4();
                v204 = (char *)operator new(v202);
                v205 = 0;
                *((_QWORD *)v198 + 1) = v204;
                *((_QWORD *)v198 + 2) = v204;
                *((_QWORD *)v198 + 3) = &v204[136 * v203];
                do
                {
                  v206 = &v204[v205];
                  v207 = *(_OWORD *)(v200 + v205);
                  *((_QWORD *)v206 + 2) = *(_QWORD *)(v200 + v205 + 16);
                  *(_OWORD *)v206 = v207;
                  sub_20EACFB94((uint64_t)&v204[v205 + 24], (_QWORD *)(v200 + v205 + 24));
                  v205 += 136;
                }
                while (v200 + v205 != v201);
                *((_QWORD *)v198 + 2) = &v204[v205];
              }
              *((_QWORD *)v198 + 4) = 0;
              *((_QWORD *)v198 + 5) = 0;
              *((_QWORD *)v198 + 6) = 0;
              v209 = (_BYTE *)*((_QWORD *)v195 + 4);
              v208 = (_BYTE *)*((_QWORD *)v195 + 5);
              v210 = v208 - v209;
              if (v208 != v209)
              {
                if (v210 < 0)
                  sub_20E867F44();
                v211 = (char *)operator new(v208 - v209);
                *((_QWORD *)v198 + 4) = v211;
                *((_QWORD *)v198 + 5) = v211;
                v199 = &v211[4 * (v210 >> 2)];
                *((_QWORD *)v198 + 6) = v199;
                memcpy(v211, v209, v210);
                *((_QWORD *)v198 + 5) = v199;
              }
              v195 += 56;
              v198 += 56;
            }
            while (v195 != v196);
            v160 = v258;
            v147 = v259;
            *((_QWORD *)v259 + 19) = v198;
          }
          *((_WORD *)v147 + 84) = *(_WORD *)(v160 + 168);
          v142 = v160 + 176;
          v147 += 176;
          v146 += 176;
        }
        while (v142 != v256);
        v344 = v147;
        a1 = v257;
      }
      v346 = 0;
      v348 = 0;
      v347 = 0;
      v212 = *(_BYTE **)(a1 + 1824);
      v213 = *(_BYTE **)(a1 + 1832);
      v214 = v213 - v212;
      if (v213 != v212)
      {
        if (v214 < 0)
          sub_20E92CED8();
        v346 = (char *)operator new(v213 - v212);
        v347 = v346;
        v215 = &v346[8 * (v214 >> 3)];
        v348 = v215;
        memcpy(v346, v212, v214);
        v347 = v215;
      }
      v350 = 0;
      v349 = 0;
      v351 = 0;
      v216 = *(char **)(a1 + 1848);
      v217 = *(char **)(a1 + 1856);
      v218 = v217 - v216;
      if (v217 != v216)
      {
        v219 = 0xAAAAAAAAAAAAAAABLL * (v218 >> 3);
        if (v219 > 0xAAAAAAAAAAAAAAALL)
          sub_20EABADD4();
        v349 = (void **)operator new(v218);
        v350 = v349;
        v351 = &v349[3 * v219];
        v276 = v349;
        v273 = v349;
        v278 = &v351;
        v279 = &v273;
        v280 = &v276;
        v281 = 0;
        v220 = v349;
        do
        {
          *v220 = 0;
          v220[1] = 0;
          v220[2] = 0;
          v221 = *(_QWORD *)v216;
          v222 = *((_QWORD *)v216 + 1);
          v223 = v222 - *(_QWORD *)v216;
          if (v222 != *(_QWORD *)v216)
          {
            v224 = 0x6DB6DB6DB6DB6DB7 * (v223 >> 3);
            if (v224 > 0x492492492492492)
              sub_20EABADD4();
            v225 = (char *)operator new(v223);
            v226 = 0;
            *v220 = v225;
            v220[1] = v225;
            v220[2] = &v225[56 * v224];
            do
            {
              v227 = v221 + v226;
              v228 = &v225[v226];
              v229 = *(_OWORD *)(v221 + v226);
              *((_QWORD *)v228 + 2) = *(_QWORD *)(v221 + v226 + 16);
              *(_OWORD *)v228 = v229;
              v230 = *(_OWORD *)(v221 + v226 + 24);
              *(_OWORD *)(v228 + 40) = *(_OWORD *)(v221 + v226 + 40);
              *(_OWORD *)(v228 + 24) = v230;
              v226 += 56;
            }
            while (v227 + 56 != v222);
            v220[1] = &v225[v226];
          }
          v216 += 24;
          v220 += 3;
          v276 = v220;
        }
        while (v216 != v217);
        v350 = v220;
        a1 = v257;
      }
      v352 = 1;
      goto LABEL_220;
    }
    while (1)
    {
      v148 = v337;
      v149 = &v337;
      if (v336 != &v337)
      {
        v150 = v337;
        v151 = &v337;
        if (v337)
        {
          do
          {
            v149 = (uint64_t **)v150;
            v150 = (uint64_t *)v150[1];
          }
          while (v150);
        }
        else
        {
          do
          {
            v149 = (uint64_t **)v151[2];
            v152 = *v149 == (uint64_t *)v151;
            v151 = v149;
          }
          while (v152);
        }
        v153 = v137[4];
        if ((unint64_t)v149[4] >= v153)
          break;
      }
      if (v337)
        v154 = v149;
      else
        v154 = &v337;
      if (v337)
        v155 = v149 + 1;
      else
        v155 = &v337;
      if (!*v155)
        goto LABEL_163;
LABEL_166:
      v158 = (_QWORD *)v137[1];
      if (v158)
      {
        do
        {
          v159 = v158;
          v158 = (_QWORD *)*v158;
        }
        while (v158);
      }
      else
      {
        do
        {
          v159 = (_QWORD *)v137[2];
          v152 = *v159 == (_QWORD)v137;
          v137 = v159;
        }
        while (!v152);
      }
      v137 = v159;
      if (v159 == (_QWORD *)(a1 + 1752))
        goto LABEL_135;
    }
    v155 = &v337;
    v154 = &v337;
    if (v337)
    {
      while (1)
      {
        while (1)
        {
          v154 = (uint64_t **)v148;
          v156 = v148[4];
          if (v156 <= v153)
            break;
          v148 = *v154;
          v155 = v154;
          if (!*v154)
            goto LABEL_163;
        }
        if (v156 >= v153)
          goto LABEL_166;
        v148 = v154[1];
        if (!v148)
        {
          v155 = v154 + 1;
          break;
        }
      }
    }
LABEL_163:
    v157 = (uint64_t *)operator new(0x1E8uLL);
    v157[4] = v137[4];
    sub_20E994B14((uint64_t)(v157 + 5), (uint64_t)(v137 + 5));
    *v157 = 0;
    v157[1] = 0;
    v157[2] = (uint64_t)v154;
    *v155 = v157;
    if (*v336)
    {
      v336 = (uint64_t **)*v336;
      v157 = *v155;
    }
    sub_20E868578(v337, v157);
    ++v338;
    goto LABEL_166;
  }
LABEL_220:
  v353 = 0u;
  v354 = 0;
  v231 = *(_BYTE **)(a1 + 1880);
  v232 = *(_BYTE **)(a1 + 1888);
  v233 = v232 - v231;
  if (v232 != v231)
  {
    if (v233 < 0)
      sub_20EABADD4();
    *(_QWORD *)&v353 = operator new(v232 - v231);
    *((_QWORD *)&v353 + 1) = v353;
    v234 = v353 + 16 * (v233 >> 4);
    v354 = v234;
    memcpy((void *)v353, v231, v233);
    *((_QWORD *)&v353 + 1) = v234;
  }
  v357 = *(_OWORD *)(a1 + 1936);
  v358 = *(_OWORD *)(a1 + 1952);
  v359 = *(_OWORD *)(a1 + 1968);
  v360 = *(_QWORD *)(a1 + 1984);
  v355 = *(_OWORD *)(a1 + 1904);
  v356 = *(_OWORD *)(a1 + 1920);
  v361 = 0;
  v363 = 0;
  v362 = 0;
  v235 = *(_BYTE **)(a1 + 1992);
  v236 = *(_BYTE **)(a1 + 2000);
  v237 = v236 - v235;
  if (v236 != v235)
  {
    if (v237 < 0)
      sub_20EABADD4();
    v361 = (char *)operator new(v236 - v235);
    v362 = v361;
    v238 = &v361[32 * (v237 >> 5)];
    v363 = v238;
    memcpy(v361, v235, v237);
    v362 = v238;
  }
  v364 = *(_OWORD *)(a1 + 2016);
  v365 = *(_OWORD *)(a1 + 2032);
  sub_20EACA81C((uint64_t)v260, (uint64_t)&__dst, 0x11u);
  sub_20EAB9778((uint64_t)&__dst);
  if ((v271 & 0x10) != 0)
  {
    v241 = *((_QWORD *)&v270 + 1);
    if (*((_QWORD *)&v270 + 1) < v268)
    {
      *((_QWORD *)&v270 + 1) = v268;
      v241 = v268;
    }
    v242 = v267;
    v239 = v241 - (_QWORD)v267;
    if (v241 - (unint64_t)v267 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_269;
  }
  else
  {
    if ((v271 & 8) == 0)
    {
      v239 = 0;
      HIBYTE(v283) = 0;
      p_dst = (uint64_t *)&__dst;
      goto LABEL_239;
    }
    v242 = v265;
    v239 = v266 - (_QWORD)v265;
    if ((unint64_t)(v266 - (_QWORD)v265) >= 0x7FFFFFFFFFFFFFF8)
LABEL_269:
      sub_20E860B7C();
  }
  if (v239 >= 0x17)
  {
    v243 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17)
      v243 = v239 | 7;
    v244 = v243 + 1;
    p_dst = (uint64_t *)operator new(v243 + 1);
    *(_QWORD *)&v283 = v239;
    *((_QWORD *)&v283 + 1) = v244 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_238;
  }
  HIBYTE(v283) = v239;
  p_dst = (uint64_t *)&__dst;
  if (v239)
LABEL_238:
    memmove(p_dst, v242, v239);
LABEL_239:
  *((_BYTE *)p_dst + v239) = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v245 = SHIBYTE(v283);
  if (v283 >= 0)
    v246 = HIBYTE(v283);
  else
    v246 = v283;
  if (v246)
  {
    if ((v246 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v247 = (char *)operator new(v246);
    bzero(v247, v246);
    *a3 = v247;
    a3[1] = &v247[v246];
    a3[2] = &v247[v246];
    if (v245 >= 0)
      v248 = &__dst;
    else
      v248 = (uint64_t **)__dst;
    memmove(v247, v248, v246);
  }
  if (v245 < 0)
    operator delete(__dst);
  v260[0] = &off_24C9B7040;
  v249 = v262;
  v261 = &unk_24C9B7190;
  v262 = 0;
  if (v249)
  {
    v250 = *(void **)(v249 + 80);
    if (v250)
    {
      *(_QWORD *)(v249 + 88) = v250;
      operator delete(v250);
    }
    if (*(_BYTE *)(v249 + 72))
      free(*(void **)(v249 + 56));
    if (*(_BYTE *)(v249 + 40))
      free(*(void **)(v249 + 24));
    MEMORY[0x212BC6398](v249, 0x1030C408C1A3048);
  }
  v263 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v263 + *(_QWORD *)(v263 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v264 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v270) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BC6290](v272);
}

void sub_20EAB3484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;

  if (LOBYTE(STACK[0x8A8]))
  {
    v73 = STACK[0x770];
    if (STACK[0x770])
    {
      v74 = STACK[0x778];
      v75 = (void *)STACK[0x770];
      if (STACK[0x778] != v73)
      {
        do
        {
          v76 = *(void **)(v74 - 176);
          if (v76)
          {
            *(_QWORD *)(v74 - 168) = v76;
            operator delete(v76);
          }
          v74 -= 272;
        }
        while (v74 != v73);
        v75 = (void *)STACK[0x770];
      }
      STACK[0x778] = v73;
      operator delete(v75);
    }
  }
  v77 = (void *)STACK[0x758];
  if (STACK[0x758])
  {
    STACK[0x760] = (unint64_t)v77;
    operator delete(v77);
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    if (LOBYTE(STACK[0x8A8]))
    {
      v78 = STACK[0x770];
      if (STACK[0x770])
      {
        v79 = STACK[0x778];
        v80 = (void *)STACK[0x770];
        if (STACK[0x778] != v78)
        {
          do
          {
            v81 = *(void **)(v79 - 176);
            if (v81)
            {
              *(_QWORD *)(v79 - 168) = v81;
              operator delete(v81);
            }
            v79 -= 272;
          }
          while (v79 != v78);
          v80 = (void *)STACK[0x770];
        }
        STACK[0x778] = v78;
        operator delete(v80);
      }
    }
    v82 = (void *)STACK[0x758];
    if (STACK[0x758])
    {
      STACK[0x760] = (unint64_t)v82;
      operator delete(v82);
    }
  }
  sub_20EAB99A0((uint64_t)&STACK[0x5E0]);
  v83 = (void *)STACK[0x5C8];
  if (STACK[0x5C8])
  {
    STACK[0x5D0] = (unint64_t)v83;
    operator delete(v83);
  }
  sub_20EAB9A14(a12);
  sub_20EAB9E54(a11);
  sub_20EAB9A54((uint64_t)&STACK[0x298]);
  sub_20EABA078(&a72);
  sub_20E9EE6A8(&a25);
  sub_20E9977BC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB3D4C(uint64_t **a1, unsigned int a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t *v5;
  double *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *a1;
  if (!*a1)
    return 3;
  v8 = (double *)v5[4];
  if (v8)
  {
    v9 = *v5;
    if (*v8 < *(double *)(v9 + 40))
      return 3;
    result = 4;
    if (a4 && a5)
    {
      sub_20F3EA6AC((uint64_t)v8, (_QWORD *)(v9 + 776), a2, a3, &v19);
      goto LABEL_13;
    }
  }
  else
  {
    result = 4;
    if (a4 && a5)
    {
      sub_20F3E7B6C(*v5 + 32, a2, a3, &v19);
LABEL_13:
      v12 = v20;
      v11 = v21;
      v13 = v22;
      v15 = v23;
      v14 = v24;
      v16 = v25;
      v18 = v26;
      v17 = v27;
      result = 0;
      *(float64x2_t *)a4 = v19;
      *(_QWORD *)(a4 + 16) = v12;
      *(_OWORD *)(a4 + 24) = v13;
      *(_QWORD *)(a4 + 40) = v15;
      *(_OWORD *)(a4 + 48) = v16;
      *(_QWORD *)(a4 + 64) = v18;
      *a5 = v11;
      a5[1] = v14;
      a5[2] = v17;
    }
  }
  return result;
}

uint64_t sub_20EAB3E48(uint64_t **a1, uint64_t a2, float64x2_t *a3, unsigned int a4, unsigned int a5, uint64_t a6, double *a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v35;
  float64x2_t v44;
  double v45;
  double v46;

  if (!*a1)
    return 3;
  v7 = **a1;
  if (!v7)
    return 3;
  result = 4;
  if (a2)
  {
    if (a3)
    {
      if (a6)
      {
        if (a7)
        {
          v9 = *(_QWORD *)(v7 + 784);
          v10 = *(_QWORD *)(v7 + 776);
          if (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3) > a4)
          {
            v12 = (uint64_t *)(v10 + 24 * a4);
            v11 = *v12;
            if (0x84BDA12F684BDA13 * ((v12[1] - *v12) >> 3) > a5)
            {
              result = 0;
              v13 = (double *)(v11 + 216 * a5);
              v14 = v13[1];
              v15 = v13[2];
              v16 = v13[3];
              v18 = v13[4];
              v17 = v13[5];
              v20 = v13[6];
              v19 = v13[7];
              v21 = v13[10];
              v22 = v13[11];
              v23 = v13[8];
              v24 = v13[9];
              v25 = -(*v13 * v24 + v16 * v21 + v20 * v22);
              v26 = -(v14 * v24 + v18 * v21 + v19 * v22);
              v27 = -(v15 * v24 + v17 * v21 + v23 * v22);
              v28 = a3[1].f64[0];
              _Q26 = *a3;
              v30.f64[0] = *(float64_t *)(a2 + 16);
              v31 = *(float64x2_t *)a2;
              _D23 = *(double *)(a2 + 40);
              v33 = *(float64x2_t *)(a2 + 24);
              _D24 = *(double *)(a2 + 64);
              v35 = *(float64x2_t *)(a2 + 48);
              _Q28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, a3->f64[0]), v33, *a3, 1), v35, v28);
              __asm { FMLA            D29, D23, V26.D[1] }
              _D25 = _D29 + _D24 * v28;
              _D30 = *(_QWORD *)(a2 + 56);
              __asm { FMLS            D26, D30, V28.D[1] }
              v30.f64[1] = _D23;
              v44 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)v33), vnegq_f64(_Q28).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)v33), _Q28, 1), v30, _D25, 0);
              __asm { FMLS            D26, D24, V25.D[0] }
              v45 = v16 * _D23 + *v13 * v30.f64[0] + v20 * _D24;
              v46 = v25 - *v13 * v44.f64[0] - v20 * _Q26.f64[0] - vmuld_lane_f64(v16, v44, 1);
              *(float64x2_t *)a6 = vaddq_f64(vmulq_n_f64(v35, v20), vaddq_f64(vmulq_n_f64(*(float64x2_t *)a2, *v13), vmulq_n_f64(v33, v16)));
              *(double *)(a6 + 16) = v45;
              *(float64x2_t *)(a6 + 24) = vaddq_f64(vmulq_n_f64(v35, v19), vaddq_f64(vmulq_n_f64(v31, v14), vmulq_n_f64(v33, v18)));
              *(double *)(a6 + 40) = v18 * _D23 + v14 * v30.f64[0] + v19 * _D24;
              *(float64x2_t *)(a6 + 48) = vaddq_f64(vmulq_n_f64(v33, v17), vaddq_f64(vmulq_n_f64(v31, v15), vmulq_n_f64(v35, v23)));
              *(double *)(a6 + 64) = v17 * _D23 + v15 * v30.f64[0] + v23 * _D24;
              *a7 = v46;
              a7[1] = v26 - v14 * v44.f64[0] - v19 * _Q26.f64[0] - vmuld_lane_f64(v18, v44, 1);
              a7[2] = v27 - v23 * _Q26.f64[0] - v15 * v44.f64[0] - vmuld_lane_f64(v17, v44, 1);
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_20EAB4060(uint64_t **a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  const std::error_category *v20;
  std::string::size_type v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  const std::error_category *v26;
  std::string::size_type v27;
  unint64_t *v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  std::string v35;
  void *__p;
  __int128 v37;
  std::string *v38;
  std::string *v39;
  void **p_p;

  if (!*a1 || (v5 = **a1) == 0)
  {
    __p = operator new(0x30uLL);
    v37 = xmmword_2102DBF00;
    strcpy((char *)__p, "VIO Metadata is empty or PoseMetadata is empty");
    v14 = (char *)operator new(0x58uLL);
    v32 = (uint64_t)v14;
    v33 = xmmword_2102DB400;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
    if (a4)
    {
      v35.__r_.__value_.__r.__words[0] = 22;
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      sub_20EA67538((const std::error_condition *)&v35, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v15;
      v16 = v30;
      if (!v30)
        goto LABEL_16;
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v33) & 0x80000000) == 0)
        {
LABEL_17:
          if ((SHIBYTE(v37) & 0x80000000) == 0)
            return -1.0;
LABEL_48:
          v25 = __p;
          goto LABEL_49;
        }
      }
      else
      {
LABEL_16:
        if ((SHIBYTE(v33) & 0x80000000) == 0)
          goto LABEL_17;
      }
      v14 = (char *)v32;
    }
    operator delete(v14);
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      return -1.0;
    goto LABEL_48;
  }
  v8 = *(_QWORD *)(v5 + 784);
  v9 = *(_QWORD *)(v5 + 776);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) > a2)
  {
    v11 = (uint64_t *)(v9 + 24 * a2);
    v10 = *v11;
    if (0x84BDA12F684BDA13 * ((v11[1] - *v11) >> 3) > a3)
    {
      v12 = v10 + 216 * a3;
      if (*(_BYTE *)(v12 + 200))
        return *(double *)(v12 + 192);
      v34 = 0;
      sub_20E9966B8(&v32, "Invalid temperature for camera ");
      std::to_string(&v35, a2);
      __p = &v32;
      *(_QWORD *)&v37 = &v35;
      *((_QWORD *)&v37 + 1) = &v32;
      v38 = &v35;
      v39 = &v35;
      if (v34 == -1)
        sub_20E877AB8();
      p_p = &__p;
      ((void (*)(void ***, uint64_t *))off_24C9C39E0[v34])(&p_p, &v32);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      __p = &v32;
      *(_QWORD *)&v37 = " ,";
      *((_QWORD *)&v37 + 1) = &v32;
      v38 = (std::string *)" ,";
      v39 = (std::string *)" ,";
      if (v34 == -1)
        sub_20E877AB8();
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      ((void (*)(std::string *, uint64_t *))off_24C9C39F8[v34])(&v35, &v32);
      std::to_string(&v35, a3);
      __p = &v32;
      *(_QWORD *)&v37 = &v35;
      *((_QWORD *)&v37 + 1) = &v32;
      v38 = &v35;
      v39 = &v35;
      if (v34 == -1)
        sub_20E877AB8();
      p_p = &__p;
      ((void (*)(void ***, uint64_t *))off_24C9C39E0[v34])(&p_p, &v32);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (v34 == -1)
        sub_20E877AB8();
      __p = &v35;
      ((void (*)(CFTypeRef *__return_ptr, void **, uint64_t *))off_24C9C3A10[v34])(&cf, &__p, &v32);
      if (v34 != -1)
        ((void (*)(void **, uint64_t *))off_24C9C39C8[v34])(&__p, &v32);
      v19 = operator new(0x58uLL);
      __p = v19;
      v37 = xmmword_2102DB400;
      strcpy((char *)v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
      if (!a4)
        goto LABEL_41;
      v26 = std::generic_category();
      v32 = 22;
      *(_QWORD *)&v33 = v26;
      sub_20EA67538((const std::error_condition *)&v32, (uint64_t)&cf, (CFErrorRef *)&v35);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v27 = v35.__r_.__value_.__r.__words[0];
      if (v35.__r_.__value_.__r.__words[0])
        CFRetain(v35.__r_.__value_.__l.__data_);
      *a4 = (CFTypeRef)v27;
      size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
      if (!v35.__r_.__value_.__l.__size_)
        goto LABEL_39;
      v28 = (unint64_t *)(v35.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v28);
      while (__stlxr(v24 - 1, v28));
      goto LABEL_37;
    }
  }
  v34 = 0;
  sub_20E991A58(&v32, "Invalid camera or stream id ");
  std::to_string(&v35, a2);
  __p = &v32;
  *(_QWORD *)&v37 = &v35;
  *((_QWORD *)&v37 + 1) = &v32;
  v38 = &v35;
  v39 = &v35;
  if (v34 == -1)
    sub_20E877AB8();
  p_p = &__p;
  ((void (*)(void ***, uint64_t *))off_24C9C39E0[v34])(&p_p, &v32);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  __p = &v32;
  *(_QWORD *)&v37 = " ,";
  *((_QWORD *)&v37 + 1) = &v32;
  v38 = (std::string *)" ,";
  v39 = (std::string *)" ,";
  if (v34 == -1)
    sub_20E877AB8();
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, uint64_t *))off_24C9C39F8[v34])(&v35, &v32);
  std::to_string(&v35, a3);
  __p = &v32;
  *(_QWORD *)&v37 = &v35;
  *((_QWORD *)&v37 + 1) = &v32;
  v38 = &v35;
  v39 = &v35;
  if (v34 == -1)
    sub_20E877AB8();
  p_p = &__p;
  ((void (*)(void ***, uint64_t *))off_24C9C39E0[v34])(&p_p, &v32);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v34 == -1)
    sub_20E877AB8();
  __p = &v35;
  ((void (*)(CFTypeRef *__return_ptr, void **, uint64_t *))off_24C9C3A10[v34])(&cf, &__p, &v32);
  if (v34 != -1)
    ((void (*)(void **, uint64_t *))off_24C9C39C8[v34])(&__p, &v32);
  v19 = operator new(0x58uLL);
  __p = v19;
  v37 = xmmword_2102DB400;
  strcpy((char *)v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (!a4)
    goto LABEL_41;
  v20 = std::generic_category();
  v32 = 22;
  *(_QWORD *)&v33 = v20;
  sub_20EA67538((const std::error_condition *)&v32, (uint64_t)&cf, (CFErrorRef *)&v35);
  if (*a4)
    CFRelease(*a4);
  *a4 = 0;
  v21 = v35.__r_.__value_.__r.__words[0];
  if (v35.__r_.__value_.__r.__words[0])
    CFRetain(v35.__r_.__value_.__l.__data_);
  *a4 = (CFTypeRef)v21;
  size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
  if (v35.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v35.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
LABEL_37:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_39:
  if ((SHIBYTE(v37) & 0x80000000) == 0)
    goto LABEL_42;
  v19 = __p;
LABEL_41:
  operator delete(v19);
LABEL_42:
  if ((v31 & 0x80000000) == 0)
    return -1.0;
  v25 = (void *)cf;
LABEL_49:
  operator delete(v25);
  return -1.0;
}

void sub_20EAB4718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  operator delete(v30);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20EAB4894(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return *(_QWORD *)(v3 + 4528) != *(_QWORD *)(v3 + 4536);
  }
  v12 = 16;
  strcpy(__p, "Empty slam state");
  v5 = (char *)operator new(0x58uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20EAB4A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFMutableArrayRef sub_20EAB4A64(uint64_t **a1, CFTypeRef *a2)
{
  CFMutableArrayRef Mutable;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __CFArray *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *value;
  __int128 v23;
  char __p[17];
  char v25;
  CFTypeRef cf;
  std::__shared_weak_count *v27;
  std::error_condition v28;

  if (*a1 && **a1)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    *(_QWORD *)__p = Mutable;
    v5 = (_QWORD *)operator new();
    *v5 = &off_24C9AFE18;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = Mutable;
    *(_QWORD *)&__p[8] = v5;
    v6 = **a1;
    v7 = *(char **)(v6 + 4528);
    v8 = *(char **)(v6 + 4536);
    if (v7 == v8)
    {
      if (!Mutable)
        goto LABEL_29;
    }
    else
    {
      do
      {
        v9 = *(__CFArray **)__p;
        sub_20EA5E260(v7, (CFNumberRef *)&value);
        CFArrayAppendValue(v9, value);
        v10 = (std::__shared_weak_count *)v23;
        if ((_QWORD)v23)
        {
          v11 = (unint64_t *)(v23 + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v7 += 8;
      }
      while (v7 != v8);
      Mutable = *(CFMutableArrayRef *)__p;
      if (!*(_QWORD *)__p)
        goto LABEL_29;
    }
    CFRetain(Mutable);
LABEL_29:
    v19 = *(std::__shared_weak_count **)&__p[8];
    if (!*(_QWORD *)&__p[8])
      return Mutable;
    v20 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return Mutable;
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return Mutable;
  }
  v25 = 16;
  strcpy(__p, "Empty slam state");
  v13 = operator new(0x58uLL);
  value = v13;
  v23 = xmmword_2102DB400;
  strcpy((char *)v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (!a2)
    goto LABEL_23;
  *(_QWORD *)&v28.__val_ = 22;
  v28.__cat_ = std::generic_category();
  sub_20EA67538(&v28, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v14 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v14;
  v15 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  if (SHIBYTE(v23) < 0)
  {
LABEL_22:
    v13 = value;
LABEL_23:
    operator delete(v13);
  }
LABEL_24:
  if (v25 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20EAB4D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAB4D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EAB4D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAB4D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

double sub_20EAB4DB8(uint64_t **a1, _OWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  double result;

  if (*a1)
  {
    v7 = **a1;
    if (*(_BYTE *)(v7 + 2776))
    {
      if (a3 && a6 && a4 && a2 && a5 && a7)
      {
        if ((unint64_t)a2 - v7 - 976 >= 0x20)
        {
          v9 = *(_OWORD *)(v7 + 992);
          *a2 = *(_OWORD *)(v7 + 976);
          a2[1] = v9;
          v10 = *(_OWORD *)(v7 + 1024);
          a2[2] = *(_OWORD *)(v7 + 1008);
          a2[3] = v10;
          v11 = *(_OWORD *)(v7 + 1056);
          a2[4] = *(_OWORD *)(v7 + 1040);
          a2[5] = v11;
          v12 = *(_OWORD *)(v7 + 1088);
          a2[6] = *(_OWORD *)(v7 + 1072);
          a2[7] = v12;
          v13 = *(_OWORD *)(v7 + 1120);
          a2[8] = *(_OWORD *)(v7 + 1104);
          a2[9] = v13;
          v14 = *(_OWORD *)(v7 + 1152);
          a2[10] = *(_OWORD *)(v7 + 1136);
          a2[11] = v14;
          v15 = *(_OWORD *)(v7 + 1184);
          a2[12] = *(_OWORD *)(v7 + 1168);
          a2[13] = v15;
          v16 = *(_OWORD *)(v7 + 1216);
          a2[14] = *(_OWORD *)(v7 + 1200);
          a2[15] = v16;
          v17 = *(_OWORD *)(v7 + 1248);
          a2[16] = *(_OWORD *)(v7 + 1232);
          a2[17] = v17;
          v18 = *(_OWORD *)(v7 + 1280);
          a2[18] = *(_OWORD *)(v7 + 1264);
          a2[19] = v18;
          v19 = *(_OWORD *)(v7 + 1312);
          a2[20] = *(_OWORD *)(v7 + 1296);
          a2[21] = v19;
          v20 = *(_OWORD *)(v7 + 1344);
          a2[22] = *(_OWORD *)(v7 + 1328);
          a2[23] = v20;
          v21 = *(_OWORD *)(v7 + 1376);
          a2[24] = *(_OWORD *)(v7 + 1360);
          a2[25] = v21;
          v22 = *(_OWORD *)(v7 + 1408);
          a2[26] = *(_OWORD *)(v7 + 1392);
          a2[27] = v22;
          v23 = *(_OWORD *)(v7 + 1440);
          a2[28] = *(_OWORD *)(v7 + 1424);
          a2[29] = v23;
          v24 = *(_OWORD *)(v7 + 1472);
          a2[30] = *(_OWORD *)(v7 + 1456);
          a2[31] = v24;
          v25 = *(_OWORD *)(v7 + 1504);
          a2[32] = *(_OWORD *)(v7 + 1488);
          a2[33] = v25;
          v26 = *(_OWORD *)(v7 + 1536);
          a2[34] = *(_OWORD *)(v7 + 1520);
          a2[35] = v26;
          v27 = *(_OWORD *)(v7 + 1568);
          a2[36] = *(_OWORD *)(v7 + 1552);
          a2[37] = v27;
          v28 = *(_OWORD *)(v7 + 1600);
          a2[38] = *(_OWORD *)(v7 + 1584);
          a2[39] = v28;
          v29 = *(_OWORD *)(v7 + 1632);
          a2[40] = *(_OWORD *)(v7 + 1616);
          a2[41] = v29;
          v30 = *(_OWORD *)(v7 + 1664);
          a2[42] = *(_OWORD *)(v7 + 1648);
          a2[43] = v30;
          v31 = *(_OWORD *)(v7 + 1696);
          a2[44] = *(_OWORD *)(v7 + 1680);
          a2[45] = v31;
          v32 = *(_OWORD *)(v7 + 1728);
          a2[46] = *(_OWORD *)(v7 + 1712);
          a2[47] = v32;
          v33 = *(_OWORD *)(v7 + 1760);
          a2[48] = *(_OWORD *)(v7 + 1744);
          a2[49] = v33;
          v34 = *(_OWORD *)(v7 + 1792);
          a2[50] = *(_OWORD *)(v7 + 1776);
          a2[51] = v34;
          v35 = *(_OWORD *)(v7 + 1824);
          a2[52] = *(_OWORD *)(v7 + 1808);
          a2[53] = v35;
          v36 = *(_OWORD *)(v7 + 1856);
          a2[54] = *(_OWORD *)(v7 + 1840);
          a2[55] = v36;
          v37 = *(_OWORD *)(v7 + 1888);
          a2[56] = *(_OWORD *)(v7 + 1872);
          a2[57] = v37;
          v38 = *(_OWORD *)(v7 + 1920);
          a2[58] = *(_OWORD *)(v7 + 1904);
          a2[59] = v38;
          v39 = *(_OWORD *)(v7 + 1952);
          a2[60] = *(_OWORD *)(v7 + 1936);
          a2[61] = v39;
          v40 = *(_OWORD *)(v7 + 1984);
          a2[62] = *(_OWORD *)(v7 + 1968);
          a2[63] = v40;
          v41 = *(_OWORD *)(v7 + 2016);
          a2[64] = *(_OWORD *)(v7 + 2000);
          a2[65] = v41;
          v42 = *(_OWORD *)(v7 + 2048);
          a2[66] = *(_OWORD *)(v7 + 2032);
          a2[67] = v42;
          v43 = *(_OWORD *)(v7 + 2080);
          a2[68] = *(_OWORD *)(v7 + 2064);
          a2[69] = v43;
          v44 = *(_OWORD *)(v7 + 2112);
          a2[70] = *(_OWORD *)(v7 + 2096);
          a2[71] = v44;
          v45 = *(_OWORD *)(v7 + 2144);
          a2[72] = *(_OWORD *)(v7 + 2128);
          a2[73] = v45;
          v46 = *(_OWORD *)(v7 + 2176);
          a2[74] = *(_OWORD *)(v7 + 2160);
          a2[75] = v46;
          v47 = *(_OWORD *)(v7 + 2208);
          a2[76] = *(_OWORD *)(v7 + 2192);
          a2[77] = v47;
          v48 = *(_OWORD *)(v7 + 2240);
          a2[78] = *(_OWORD *)(v7 + 2224);
          a2[79] = v48;
          v49 = *(_OWORD *)(v7 + 2272);
          a2[80] = *(_OWORD *)(v7 + 2256);
          a2[81] = v49;
          v50 = *(_OWORD *)(v7 + 2304);
          a2[82] = *(_OWORD *)(v7 + 2288);
          a2[83] = v50;
          v51 = *(_OWORD *)(v7 + 2336);
          a2[84] = *(_OWORD *)(v7 + 2320);
          a2[85] = v51;
          v52 = *(_OWORD *)(v7 + 2368);
          a2[86] = *(_OWORD *)(v7 + 2352);
          a2[87] = v52;
          v53 = *(_OWORD *)(v7 + 2400);
          a2[88] = *(_OWORD *)(v7 + 2384);
          a2[89] = v53;
          v54 = *(_OWORD *)(v7 + 2432);
          a2[90] = *(_OWORD *)(v7 + 2416);
          a2[91] = v54;
          v55 = *(_OWORD *)(v7 + 2464);
          a2[92] = *(_OWORD *)(v7 + 2448);
          a2[93] = v55;
          v56 = *(_OWORD *)(v7 + 2496);
          a2[94] = *(_OWORD *)(v7 + 2480);
          a2[95] = v56;
          v57 = *(_OWORD *)(v7 + 2528);
          a2[96] = *(_OWORD *)(v7 + 2512);
          a2[97] = v57;
          v58 = *(_OWORD *)(v7 + 2560);
          a2[98] = *(_OWORD *)(v7 + 2544);
          a2[99] = v58;
          v59 = *(_OWORD *)(v7 + 2592);
          a2[100] = *(_OWORD *)(v7 + 2576);
          a2[101] = v59;
          v60 = *(_OWORD *)(v7 + 2624);
          a2[102] = *(_OWORD *)(v7 + 2608);
          a2[103] = v60;
          v61 = *(_OWORD *)(v7 + 2656);
          a2[104] = *(_OWORD *)(v7 + 2640);
          a2[105] = v61;
          v62 = *(_OWORD *)(v7 + 2688);
          a2[106] = *(_OWORD *)(v7 + 2672);
          a2[107] = v62;
          v63 = *(_OWORD *)(v7 + 2720);
          a2[108] = *(_OWORD *)(v7 + 2704);
          a2[109] = v63;
          v64 = *(_OWORD *)(v7 + 2752);
          a2[110] = *(_OWORD *)(v7 + 2736);
          a2[111] = v64;
          v8 = 224;
        }
        else
        {
          v8 = 0;
        }
        v65 = 8 * v8;
        do
        {
          *(_QWORD *)((char *)a2 + v65) = *(_QWORD *)(v7 + 976 + v65);
          v65 += 8;
        }
        while (v65 != 1800);
        *a5 = *(_QWORD *)(v7 + 800);
        a5[1] = *(_QWORD *)(v7 + 808);
        a5[2] = *(_QWORD *)(v7 + 816);
        a5[3] = *(_QWORD *)(v7 + 824);
        a5[4] = *(_QWORD *)(v7 + 832);
        a5[5] = *(_QWORD *)(v7 + 840);
        a5[6] = *(_QWORD *)(v7 + 848);
        a5[7] = *(_QWORD *)(v7 + 856);
        a5[8] = *(_QWORD *)(v7 + 864);
        *a7 = *(_QWORD *)(v7 + 872);
        a7[1] = *(_QWORD *)(v7 + 880);
        a7[2] = *(_QWORD *)(v7 + 888);
        *a4 = *(_QWORD *)(v7 + 896);
        a4[1] = *(_QWORD *)(v7 + 904);
        a4[2] = *(_QWORD *)(v7 + 912);
        *a6 = *(_QWORD *)(v7 + 920);
        a6[1] = *(_QWORD *)(v7 + 928);
        a6[2] = *(_QWORD *)(v7 + 936);
        *(_QWORD *)a3 = *(_QWORD *)(v7 + 944);
        *(_QWORD *)(a3 + 8) = *(_QWORD *)(v7 + 952);
        result = *(double *)(v7 + 960);
        *(double *)(a3 + 16) = result;
      }
    }
  }
  return result;
}

uint64_t sub_20EAB51D0(_QWORD **a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *a1;
  if (!*a1)
    return 3;
  result = 4;
  if (a2 && a5 && a3 && a4 && a6)
  {
    v8 = (_QWORD *)v6[4];
    if (v8)
    {
      v9 = v8 + 1;
      v10 = v8 + 2;
      v11 = v8 + 3;
      v12 = v8 + 4;
      v13 = v8 + 5;
      v14 = 0uLL;
      v15 = v8 + 6;
      v16 = 0;
      v17 = v8 + 7;
      v18 = 0;
      v19 = v8 + 8;
      v20 = v8 + 9;
      v21 = 0;
      v22 = v8 + 10;
      v23 = 0uLL;
      v24 = v8 + 11;
      v25 = v8 + 12;
      v26 = 0uLL;
    }
    else
    {
      v27 = *v6;
      v9 = (_QWORD *)(*v6 + 48);
      v10 = (uint64_t *)(v27 + 56);
      v11 = (uint64_t *)(v27 + 64);
      v12 = (uint64_t *)(v27 + 72);
      v13 = (uint64_t *)(v27 + 80);
      v15 = (uint64_t *)(v27 + 88);
      v17 = (uint64_t *)(v27 + 96);
      v19 = (uint64_t *)(v27 + 104);
      v20 = (uint64_t *)(v27 + 112);
      v14 = *(_OWORD *)(v27 + 120);
      v16 = *(_QWORD *)(v27 + 136);
      v23 = *(_OWORD *)(v27 + 144);
      v18 = *(_QWORD *)(v27 + 160);
      v26 = *(_OWORD *)(v27 + 168);
      v21 = *(_QWORD *)(v27 + 184);
      v22 = (uint64_t *)(v27 + 192);
      v24 = (uint64_t *)(v27 + 200);
      v25 = (uint64_t *)(v27 + 208);
    }
    result = 0;
    v28 = *v10;
    v29 = *v11;
    v30 = *v12;
    v31 = *v13;
    v32 = *v15;
    v33 = *v17;
    v34 = *v19;
    v35 = *v20;
    v36 = *v22;
    v37 = *v24;
    v38 = *v25;
    *a4 = *v9;
    a4[1] = v28;
    a4[2] = v29;
    a4[3] = v30;
    a4[4] = v31;
    a4[5] = v32;
    a4[6] = v33;
    a4[7] = v34;
    a4[8] = v35;
    *(_OWORD *)a6 = v14;
    *(_QWORD *)(a6 + 16) = v16;
    *(_OWORD *)a3 = v23;
    *(_QWORD *)(a3 + 16) = v18;
    *(_OWORD *)a5 = v26;
    *(_QWORD *)(a5 + 16) = v21;
    *a2 = v36;
    a2[1] = v37;
    a2[2] = v38;
  }
  return result;
}

BOOL sub_20EAB5304(uint64_t **a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (*a1 && (v5 = **a1) != 0)
  {
    v6 = *(_QWORD *)(v5 + 784);
    v7 = *(_QWORD *)(v5 + 776);
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > a2)
    {
      v9 = (uint64_t *)(v7 + 24 * a2);
      v8 = *v9;
      if (0x84BDA12F684BDA13 * ((v9[1] - *v9) >> 3) > a3)
        return *(_BYTE *)(v8 + 216 * a3 + 208) != 0;
    }
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2102E0950;
    strcpy((char *)__p[0], "Invalid camera ID / stream ID combo.");
    v16 = (char *)operator new(0x58uLL);
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
    if (a4)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v17;
      v18 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    operator delete(v16);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Empty slam state");
    v11 = (char *)operator new(0x58uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
    if (a4)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v12;
      v13 = v23;
      if (v23)
      {
        v14 = (unint64_t *)&v23->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20EAB5638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB5680(uint64_t **a1, CFMutableArrayRef theArray)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *value;
  std::__shared_weak_count *v11;

  if (!*a1)
    return 3;
  if (!theArray)
    return 4;
  v3 = **a1;
  CFArrayRemoveAllValues(theArray);
  v4 = *(_QWORD *)(v3 + 4296);
  for (i = *(_QWORD *)(v3 + 4304); v4 != i; v4 += 416)
  {
    sub_20F3E93CC(v4, &value);
    CFArrayAppendValue(theArray, value);
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void sub_20EAB5768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAB57AC(uint64_t **a1, CFMutableArrayRef theArray)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *value;
  std::__shared_weak_count *v11;

  if (!*a1)
    return 3;
  if (!theArray)
    return 4;
  v3 = **a1;
  CFArrayRemoveAllValues(theArray);
  v4 = *(_QWORD *)(v3 + 4272);
  for (i = *(_QWORD *)(v3 + 4280); v4 != i; v4 += 416)
  {
    sub_20F3E93CC(v4, &value);
    CFArrayAppendValue(theArray, value);
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void sub_20EAB5894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

__CFArray *sub_20EAB58D8(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return sub_20EAB5ABC((uint64_t *)(v3 + 4296));
  }
  __p = operator new(0x30uLL);
  v11 = xmmword_2102DBF00;
  strcpy((char *)__p, "VIO Metadata is empty or PoseMetadata is empty");
  v5 = (char *)operator new(0x58uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_20EAB5A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *sub_20EAB5ABC(uint64_t *a1)
{
  __CFArray *v2;
  uint64_t v3;
  uint64_t v4;
  const std::nothrow_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  CFArrayCallBacks callBacks;

  callBacks.version = 0;
  callBacks.retain = (CFArrayRetainCallBack)sub_20EAADB98;
  callBacks.copyDescription = 0;
  callBacks.equal = 0;
  callBacks.release = (CFArrayReleaseCallBack)sub_20EAADB68;
  v2 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &callBacks);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    do
    {
      v6 = (unsigned int *)operator new(0x158uLL, v5);
      if (v6)
      {
        v7 = v6;
        sub_20EAAD5FC((uint64_t)(v6 + 2), v3, 1);
        v8 = v7 + 84;
        v7[84] = 1;
        *(_QWORD *)v7 = off_24C9C3740;
        CFArrayAppendValue(v2, v7);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
      else
      {
        CFArrayAppendValue(v2, 0);
      }
      v3 += 416;
    }
    while (v3 != v4);
  }
  return v2;
}

__CFArray *sub_20EAB5BF4(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return sub_20EAB5ABC((uint64_t *)(v3 + 4272));
  }
  __p = operator new(0x30uLL);
  v11 = xmmword_2102DBF00;
  strcpy((char *)__p, "VIO Metadata is empty or PoseMetadata is empty");
  v5 = (char *)operator new(0x58uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_20EAB5D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *sub_20EAB5DD8(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return sub_20EAB5ABC((uint64_t *)(v3 + 4320));
  }
  __p = operator new(0x30uLL);
  v11 = xmmword_2102DBF00;
  strcpy((char *)__p, "VIO Metadata is empty or PoseMetadata is empty");
  v5 = (char *)operator new(0x58uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_20EAB5F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *sub_20EAB5FBC(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __CFArray *v5;
  uint64_t *v6;
  uint64_t *v7;
  const std::nothrow_t *v8;
  char *version;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  std::error_condition v22;
  uint64_t v23;
  _BYTE __p[32];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  CFArrayCallBacks callBacks;

  v3 = *a1;
  if (*a1)
  {
    v4 = *v3;
    if (*v3)
    {
      callBacks.version = 0;
      callBacks.retain = (CFArrayRetainCallBack)sub_20EAADB98;
      callBacks.copyDescription = 0;
      callBacks.equal = 0;
      callBacks.release = (CFArrayReleaseCallBack)sub_20EAADB68;
      v5 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &callBacks);
      v6 = *(uint64_t **)(v4 + 4344);
      v7 = *(uint64_t **)(v4 + 4352);
      if (v6 != v7)
      {
        v8 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
        do
        {
          v27 = 0x3FF0000000000000;
          *(_OWORD *)__p = xmmword_210313E68;
          *(_OWORD *)&__p[16] = unk_210313E78;
          v25 = xmmword_210313E88;
          v26 = unk_210313E98;
          *(_QWORD *)&v22.__val_ = 0;
          v22.__cat_ = 0;
          v23 = 0;
          v15 = (unsigned int *)operator new(0x158uLL, v8);
          if (v15)
          {
            v16 = v15;
            sub_20EAAA8D8((uint64_t)v15, v6, (uint64_t)(v6 + 2), (uint64_t)__p, (__int128 *)&v22.__val_);
            *(_QWORD *)v16 = off_24C9C3740;
            CFArrayAppendValue(v5, v16);
            v17 = v16 + 84;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
              (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
          }
          else
          {
            CFArrayAppendValue(v5, 0);
          }
          v6 += 6;
        }
        while (v6 != v7);
      }
      return v5;
    }
  }
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DBF00;
  strcpy(*(char **)__p, "VIO Metadata is empty or PoseMetadata is empty");
  version = (char *)operator new(0x58uLL);
  callBacks.version = (CFIndex)version;
  *(_OWORD *)&callBacks.retain = xmmword_2102DB400;
  strcpy(version, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (!a2)
    goto LABEL_16;
  *(_QWORD *)&v22.__val_ = 22;
  v22.__cat_ = std::generic_category();
  sub_20EA67538(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v10 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v10;
  v11 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((SHIBYTE(callBacks.release) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_15;
    }
  }
  if (SHIBYTE(callBacks.release) < 0)
  {
LABEL_15:
    version = (char *)callBacks.version;
LABEL_16:
    operator delete(version);
  }
LABEL_17:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

__CFArray *sub_20EAB62B4(uint64_t **a1, CFTypeRef *a2)
{
  __CFArray *Mutable;
  _QWORD *v5;
  uint64_t v6;
  CFUUIDBytes *v7;
  CFUUIDBytes *v8;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *value;
  __int128 v24;
  CFMutableArrayRef theArray;
  __int128 v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (*a1 && **a1)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    theArray = Mutable;
    v5 = (_QWORD *)operator new();
    *v5 = &off_24C9AFE18;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = Mutable;
    *(_QWORD *)&v26 = v5;
    v6 = **a1;
    v7 = *(CFUUIDBytes **)(v6 + 4368);
    v8 = *(CFUUIDBytes **)(v6 + 4376);
    if (v7 == v8)
    {
      if (!Mutable)
        goto LABEL_29;
    }
    else
    {
      do
      {
        Default = CFAllocatorGetDefault();
        v10 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *v7);
        sub_20EA68D1C((std::__shared_weak_count_vtbl **)&value, v10, 0);
        CFArrayAppendValue(theArray, value);
        v11 = (std::__shared_weak_count *)v24;
        if ((_QWORD)v24)
        {
          v12 = (unint64_t *)(v24 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        ++v7;
      }
      while (v7 != v8);
      Mutable = theArray;
      if (!theArray)
        goto LABEL_29;
    }
    CFRetain(Mutable);
LABEL_29:
    v20 = (std::__shared_weak_count *)v26;
    if (!(_QWORD)v26)
      return Mutable;
    v21 = (unint64_t *)(v26 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22)
      return Mutable;
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    return Mutable;
  }
  theArray = (CFMutableArrayRef)operator new(0x30uLL);
  v26 = xmmword_2102DBF00;
  strcpy((char *)theArray, "VIO Metadata is empty or PoseMetadata is empty");
  v14 = operator new(0x58uLL);
  value = v14;
  v24 = xmmword_2102DB400;
  strcpy((char *)v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (!a2)
    goto LABEL_23;
  *(_QWORD *)&v29.__val_ = 22;
  v29.__cat_ = std::generic_category();
  sub_20EA67538(&v29, (uint64_t)&theArray, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v15 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v15;
  v16 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  if (SHIBYTE(v24) < 0)
  {
LABEL_22:
    v14 = value;
LABEL_23:
    operator delete(v14);
  }
LABEL_24:
  if (SHIBYTE(v26) < 0)
    operator delete(theArray);
  return 0;
}

void sub_20EAB6584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAB6598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EAB65FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20EAB6618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB662C(uint64_t **a1, CFMutableArrayRef theArray)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *value;
  std::__shared_weak_count *v12;

  if (!*a1)
    return 3;
  if (!theArray)
    return 4;
  CFArrayRemoveAllValues(theArray);
  v4 = **a1;
  v5 = *(uint64_t **)(v4 + 4128);
  v6 = *(uint64_t **)(v4 + 4136);
  while (v5 != v6)
  {
    sub_20F3EA25C(v5, (uint64_t)(v5 + 1), &value);
    CFArrayAppendValue(theArray, value);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 += 17;
  }
  return 0;
}

void sub_20EAB671C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB6730(_QWORD *a1, __CFData *a2)
{
  const __CFData *v3;
  int Length;
  const UInt8 *BytePtr;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const __CFData *v10;
  std::__shared_weak_count *v11;

  if (!*a1)
    return 3;
  if (!a2)
    return 4;
  sub_20F3EA108(*(_QWORD *)*a1 + 3840, &v10);
  v3 = v10;
  CFDataSetLength(a2, 0);
  if (v3)
  {
    Length = CFDataGetLength(v3);
    BytePtr = CFDataGetBytePtr(v3);
    CFDataAppendBytes(a2, BytePtr, Length);
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 0;
}

void sub_20EAB681C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB6830(uint64_t **a1, _QWORD *a2, CFTypeRef *a3)
{
  uint64_t v4;
  void *__p[4];

  if (*a1)
  {
    v4 = **a1;
    if (v4)
    {
      if (a2)
      {
        *a2 = *(_QWORD *)(v4 + 5448);
        return 1;
      }
      __p[0] = operator new(0x38uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DCA60;
      sub_20E8ECD2C(a3, 0x16u, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_8;
      return 0;
    }
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "Empty slam state");
  sub_20E8ECD2C(a3, 0x16u, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_8:
  operator delete(__p[0]);
  return 0;
}

void sub_20EAB692C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20EAB694C(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  void *__p[4];

  if (*a1)
  {
    v3 = **a1;
    if (v3)
    {
      if (*(_BYTE *)(v3 + 5136))
        return *(double *)(v3 + 5128);
      __p[0] = operator new(0x28uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DC280;
      strcpy((char *)__p[0], "MCAM camera lux is not avaliable");
      sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_8;
      return -1.0;
    }
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "Empty slam state");
  sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return -1.0;
LABEL_8:
  operator delete(__p[0]);
  return -1.0;
}

void sub_20EAB6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAB6A58(uint64_t **a1, _QWORD *a2, CFTypeRef *a3)
{
  uint64_t v4;
  void *__p[4];

  if (*a1)
  {
    v4 = **a1;
    if (v4)
    {
      if (a2)
      {
        *a2 = *(_QWORD *)(v4 + 3720);
        a2[1] = *(unsigned int *)(v4 + 3728);
        return 1;
      }
      __p[0] = operator new(0x30uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DBF00;
      sub_20E8ECD2C(a3, 0x16u, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_8;
      return 0;
    }
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "Empty slam state");
  sub_20E8ECD2C(a3, 0x16u, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_8:
  operator delete(__p[0]);
  return 0;
}

void sub_20EAB6B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAB6B74(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  int64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  __int128 v14;
  int64x2_t v15;
  int64x2_t v16;
  void *__p[4];

  v7 = *a1;
  if (*a1)
  {
    v8 = *v7;
    if (*v7)
    {
      if (*(_BYTE *)(v8 + 5024))
      {
        if (a2 && a3 && a4 && a5)
        {
          *a2 = *(_QWORD *)(v8 + 4552);
          a2[1] = *(unsigned int *)(v8 + 4560);
          *a3 = *(_QWORD *)(v8 + 4576);
          a3[1] = *(unsigned int *)(v8 + 4584);
          *(_QWORD *)&v9 = *(_QWORD *)(v8 + 4616);
          v10 = *(int64x2_t *)(v8 + 4632);
          v11 = *(_QWORD *)(v8 + 4680);
          v12 = *(int64x2_t *)(v8 + 4664);
          v13 = *(_QWORD *)(v8 + 4712);
          v14 = *(_OWORD *)(v8 + 4696);
          *((_QWORD *)&v9 + 1) = *(_QWORD *)(v8 + 4648);
          v15 = vzip1q_s64(*(int64x2_t *)(v8 + 4600), v10);
          v16 = vzip2q_s64(v10, v12);
          v12.i64[1] = *(_QWORD *)(v8 + 4608);
          *(int64x2_t *)a4 = v15;
          *(int64x2_t *)(a4 + 16) = v12;
          *(int64x2_t *)(a4 + 32) = v16;
          *(_OWORD *)(a4 + 48) = v9;
          *(_QWORD *)(a4 + 64) = v11;
          *(_OWORD *)a5 = v14;
          *(_QWORD *)(a5 + 16) = v13;
          return 1;
        }
        __p[0] = operator new(0x38uLL);
        *(_OWORD *)&__p[1] = xmmword_2102DB420;
        strcpy((char *)__p[0], "input parameter is NULL in CopyRelocalizationResult");
        sub_20E8ECD2C(a6, 0x16u, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_12;
        return 0;
      }
    }
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "Empty slam state");
  sub_20E8ECD2C(a6, 0x16u, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_12:
  operator delete(__p[0]);
  return 0;
}

void sub_20EAB6CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAB6D0C(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t result;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char __p[17];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (*a1 && (v3 = **a1) != 0)
  {
    result = *(unsigned __int8 *)(v3 + 5032);
    if ((_DWORD)result == 2)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp", 886, (uint64_t)"vio_metadata->pose_metadata->pose_prediction_info_metadata.slam_mode != cv_types::SLAMMode::kUnknown", 100, (uint64_t)"SLAM instance must be in invalid mode", 37, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      return *(unsigned __int8 *)(**a1 + 5032);
    }
  }
  else
  {
    v13 = 16;
    strcpy(__p, "Empty slam state");
    v6 = (char *)operator new(0x58uLL);
    v11 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = v11;
    }
    operator delete(v6);
    if (v13 < 0)
      operator delete(*(void **)__p);
    return 2;
  }
  return result;
}

void sub_20EAB6EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB6F28(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return *(unsigned __int8 *)(v3 + 3);
  }
  v12 = 16;
  strcpy(__p, "Empty slam state");
  v5 = (char *)operator new(0x58uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20EAB70B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB70EC(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
    {
      v4 = (unsigned __int8 *)(v3 + 5088);
      if (v4[8])
        return *v4;
      __p[0] = operator new(0x28uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DC280;
      strcpy((char *)__p[0], "VisualSLAMState is not available");
      v11 = (char *)operator new(0x58uLL);
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
      if (a2)
      {
        *(_QWORD *)&v19.__val_ = 22;
        v19.__cat_ = std::generic_category();
        sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v13 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      operator delete(v11);
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_30;
      return 3;
    }
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "Empty slam state");
  v6 = (char *)operator new(0x58uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 3;
LABEL_30:
  operator delete(__p[0]);
  return 3;
}

void sub_20EAB73A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAB73E8(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
    {
      if (*(_BYTE *)(v3 + 5096))
        return *(unsigned int *)(v3 + 5056);
      __p[0] = operator new(0x28uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DC280;
      strcpy((char *)__p[0], "VisualSLAMState is not available");
      v10 = (char *)operator new(0x58uLL);
      strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
      if (a2)
      {
        *(_QWORD *)&v18.__val_ = 22;
        v18.__cat_ = std::generic_category();
        sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v11 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v11;
        v12 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      operator delete(v10);
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_30;
      return 0xFFFFFFFFLL;
    }
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "Empty slam state");
  v5 = (char *)operator new(0x58uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v18.__val_ = 22;
    v18.__cat_ = std::generic_category();
    sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v17;
    if (v17)
    {
      v8 = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0xFFFFFFFFLL;
LABEL_30:
  operator delete(__p[0]);
  return 0xFFFFFFFFLL;
}

void sub_20EAB7698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20EAB76E0(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char __p[17];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
    {
      v4 = (unsigned __int8 *)(v3 + 5033);
      if (v4[1])
        return *v4 != 0;
      return 0;
    }
  }
  v13 = 16;
  strcpy(__p, "Empty slam state");
  v6 = (char *)operator new(0x58uLL);
  v11 = v6;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = v11;
  }
  operator delete(v6);
  if ((v13 & 0x80000000) == 0)
    return 0;
  operator delete(*(void **)__p);
  return 0;
}

void sub_20EAB7880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20EAB78BC(unsigned __int8 ***a1, CFTypeRef *a2)
{
  unsigned __int8 *v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return *v3 != 0;
  }
  v12 = 16;
  strcpy(__p, "Empty slam state");
  v5 = (char *)operator new(0x58uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20EAB7A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20EAB7A88(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return *(_BYTE *)(v3 + 5049) != 0;
  }
  v12 = 16;
  strcpy(__p, "Empty slam state");
  v5 = (char *)operator new(0x58uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20EAB7C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20EAB7C58(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (*a1)
  {
    v3 = **a1;
    if (v3)
      return *(_BYTE *)(v3 + 5104) != 0;
  }
  v12 = 16;
  strcpy(__p, "Empty slam state");
  v5 = (char *)operator new(0x58uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20EAB7DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *sub_20EAB7E28(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __CFArray *Mutable;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  CFNumberRef v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition valuePtr;
  void *__p[4];
  int v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (!*a1 || (v4 = *v3) == 0)
  {
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBF00;
    strcpy((char *)__p[0], "VIO Metadata is empty or PoseMetadata is empty");
    v12 = (char *)operator new(0x58uLL);
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
    if (a2)
    {
      *(_QWORD *)&valuePtr.__val_ = 22;
      valuePtr.__cat_ = std::generic_category();
      sub_20EA67538(&valuePtr, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v13;
      v14 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    operator delete(v12);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  v29[0] = &off_24C9C3A38;
  v30 = v29;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE18;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  memset(__p, 0, sizeof(__p));
  v28 = 1065353216;
  v8 = *(unsigned int **)(v4 + 3840);
  v9 = *(unsigned int **)(v4 + 3848);
  while (v8 != v9)
  {
    sub_20EABA148((uint64_t)__p, v8, v8);
    if ((v10 & 1) != 0)
    {
      valuePtr.__val_ = 0;
      if (!v30)
        sub_20E86D37C();
      valuePtr.__val_ = (*(uint64_t (**)(_QWORD *, unsigned int *))(*v30 + 48))(v30, v8);
      v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
    }
    v8 += 8;
  }
  if (Mutable)
    CFRetain(Mutable);
  v17 = __p[2];
  if (__p[2])
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = __p[0];
  __p[0] = 0;
  if (v19)
    operator delete(v19);
  do
    v20 = __ldaxr(v7);
  while (__stlxr(v20 - 1, v7));
  if (v20)
  {
    v21 = v30;
    if (v30 != v29)
      goto LABEL_31;
LABEL_34:
    v22 = 4;
    v21 = v29;
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  v21 = v30;
  if (v30 == v29)
    goto LABEL_34;
LABEL_31:
  if (v21)
  {
    v22 = 5;
LABEL_35:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  return Mutable;
}

void sub_20EAB8170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EAB8244);
}

void sub_20EAB8178(void *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      CFRelease(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x20EAB8244);
}

void sub_20EAB819C()
{
  __cxa_end_catch();
  JUMPOUT(0x20EAB8214);
}

void sub_20EAB81A8(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20EAB8244);
}

void sub_20EAB81B8()
{
  JUMPOUT(0x20EAB8214);
}

void sub_20EAB81C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20EAB81CCLL);
}

void sub_20EAB8200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20E8C25A8((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == (_QWORD *)(v2 - 88))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(a1);
}

CFMutableArrayRef sub_20EAB824C(uint64_t a1, CFTypeRef *a2)
{
  char *v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFMutableArrayRef Mutable;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  __p = operator new(0x28uLL);
  v14 = xmmword_2102DC8F0;
  strcpy((char *)__p, "CopyCameraFrameRates not supported");
  v3 = (char *)operator new(0x58uLL);
  strcpy(v3, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (a2)
  {
    *(_QWORD *)&v17.__val_ = 78;
    v17.__cat_ = std::generic_category();
    sub_20EA67538(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v4 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v4;
    v5 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(v3);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  __p = Mutable;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  v10 = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE18;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  *(_QWORD *)&v14 = v9;
  if (Mutable)
    CFRetain(Mutable);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return Mutable;
}

void sub_20EAB8450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAB8464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *sub_20EAB84C8(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  char *v11;
  unsigned int *v12;
  unsigned int *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  CFTypeRef v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  __CFArray *Mutable;
  unint64_t v38;
  double v39;
  double *v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  double v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  const __CFAllocator *v47;
  double *v48;
  CFNumberRef v49;
  unint64_t v50;
  void *__p;
  __int128 v53;
  CFTypeRef cf;
  std::__shared_weak_count *v55;
  std::error_condition valuePtr;

  v3 = *a1;
  if (!*a1 || (v4 = *v3) == 0)
  {
    __p = operator new(0x30uLL);
    v53 = xmmword_2102DBF00;
    strcpy((char *)__p, "VIO Metadata is empty or PoseMetadata is empty");
    v32 = (char *)operator new(0x58uLL);
    strcpy(v32, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
    if (a2)
    {
      *(_QWORD *)&valuePtr.__val_ = 22;
      valuePtr.__cat_ = std::generic_category();
      sub_20EA67538(&valuePtr, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v33 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v33;
      v34 = v55;
      if (v55)
      {
        p_shared_owners = (unint64_t *)&v55->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    operator delete(v32);
    if (SHIBYTE(v53) < 0)
      operator delete(__p);
    return 0;
  }
  __p = 0;
  v53 = 0uLL;
  v5 = *(_QWORD *)(v4 + 3848);
  v6 = *(_QWORD *)(v4 + 3840);
  v7 = v5 - v6;
  if (v5 == v6)
  {
    v11 = 0;
    v10 = 0;
LABEL_53:
    *((_QWORD *)&v53 + 1) = v11;
    v39 = 0.0;
    v14 = v10;
    goto LABEL_59;
  }
  if (v7 < 0)
    sub_20E867F44();
  v8 = (char *)operator new((unint64_t)v7 >> 2);
  v10 = v8;
  v11 = &v8[8 * (v7 >> 5)];
  __p = v8;
  *(_QWORD *)&v53 = v8;
  v12 = *(unsigned int **)(v4 + 3840);
  v13 = *(unsigned int **)(v4 + 3848);
  if (v12 == v13)
    goto LABEL_53;
  v14 = v8;
  v15 = v8;
  v16 = v8;
  do
  {
    v19 = (v16 - v15) >> 3;
    v17 = *v12;
    if (v19 < *v12 + 1)
    {
      if (v16 < v11)
      {
        *(_QWORD *)v16 = 0;
        v10 = v16 + 8;
LABEL_8:
        v17 = *v12;
        v16 = (char *)v10;
        goto LABEL_9;
      }
      if ((v11 - v15) >> 2 <= v19 + 1)
        v20 = v19 + 1;
      else
        v20 = (v11 - v15) >> 2;
      if ((unint64_t)(v11 - v15) >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21 >> 61)
      {
        __p = v14;
        *((_QWORD *)&v53 + 1) = v11;
        sub_20E877A38();
      }
      v22 = operator new(8 * v21);
      v14 = &v22[8 * v19];
      v11 = &v22[8 * v21];
      *v14 = 0;
      v10 = v14 + 1;
      if (v16 == v15)
        goto LABEL_24;
      v23 = v16 - v15 - 8;
      if (v23 >= 0x168)
      {
        v26 = (v16 - 8 - v15) & 0xFFFFFFFFFFFFFFF8;
        if (&v22[v16 - v15 - 8 - v26] > &v22[v16 - v15 - 8])
        {
          v24 = v16;
        }
        else if (&v16[-v26 - 8] > v16 - 8)
        {
          v24 = v16;
        }
        else if ((unint64_t)(v15 - v22) >= 0x20)
        {
          v27 = (v23 >> 3) + 1;
          v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
          v24 = &v16[-v28];
          v14 = (_QWORD *)((char *)v14 - v28);
          v29 = &v22[8 * v19 - 16];
          v30 = v16 - 16;
          v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v9 = *(_OWORD *)v30;
            *(v29 - 1) = *((_OWORD *)v30 - 1);
            *v29 = v9;
            v29 -= 2;
            v30 -= 32;
            v31 -= 4;
          }
          while (v31);
          if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_23:
            if (!v15)
            {
LABEL_25:
              v15 = (char *)v14;
              goto LABEL_8;
            }
LABEL_24:
            operator delete(v15);
            goto LABEL_25;
          }
        }
        else
        {
          v24 = v16;
        }
      }
      else
      {
        v24 = v16;
      }
      do
      {
        v25 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        DWORD1(v9) = HIDWORD(v25);
        *--v14 = v25;
      }
      while (v24 != v15);
      goto LABEL_23;
    }
LABEL_9:
    LODWORD(v9) = v12[2];
    v18 = 8 * v17;
    *(double *)&v9 = *(double *)&v15[v18] + (double)(unint64_t)v9;
    *(_QWORD *)&v15[v18] = v9;
    v12 += 8;
  }
  while (v12 != v13);
  __p = v14;
  *(_QWORD *)&v53 = v10;
  *((_QWORD *)&v53 + 1) = v11;
  if (v15 == v16)
  {
    v39 = 0.0;
  }
  else
  {
    v38 = v16 - v15 - 8;
    v39 = 0.0;
    if (v38 < 8)
    {
      v40 = (double *)v15;
      goto LABEL_58;
    }
    v41 = (v38 >> 3) + 1;
    v40 = (double *)&v15[8 * (v41 & 0x3FFFFFFFFFFFFFFELL)];
    v42 = (double *)(v15 + 8);
    v43 = v41 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v39 = v39 + *(v42 - 1) + *v42;
      v42 += 2;
      v43 -= 2;
    }
    while (v43);
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_58:
        v44 = *v40++;
        v39 = v39 + v44;
      }
      while (v40 != (double *)v16);
    }
  }
LABEL_59:
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v45 = (std::__shared_weak_count *)operator new();
  v45->__shared_owners_ = 0;
  v46 = (unint64_t *)&v45->__shared_owners_;
  v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE18;
  v45->__shared_weak_owners_ = 0;
  v45[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  if (v39 > 0.0 && v14 != (_QWORD *)v53)
  {
    v47 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v48 = (double *)v14;
    do
    {
      *(double *)&valuePtr.__val_ = *v48 / v39;
      v49 = CFNumberCreate(v47, kCFNumberDoubleType, &valuePtr);
      CFArrayAppendValue(Mutable, v49);
      CFRelease(v49);
      ++v48;
    }
    while (v48 != (double *)v53);
  }
  if (Mutable)
    CFRetain(Mutable);
  do
    v50 = __ldaxr(v46);
  while (__stlxr(v50 - 1, v46));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (__p)
  {
    *(_QWORD *)&v53 = __p;
    operator delete(__p);
  }
  return Mutable;
}

void sub_20EAB89DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  if (a17 < 0)
    JUMPOUT(0x20EAB8A7CLL);
  JUMPOUT(0x20EAB8A80);
}

void sub_20EAB89E4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EAB89FC()
{
  __cxa_end_catch();
  JUMPOUT(0x20EAB8A70);
}

void sub_20EAB8A0C()
{
  JUMPOUT(0x20EAB8A70);
}

void sub_20EAB8A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20EAB8A20);
}

void sub_20EAB8A2C()
{
  JUMPOUT(0x20EAB8A70);
}

void sub_20EAB8A4C()
{
  JUMPOUT(0x20EAB8A70);
}

void sub_20EAB8A54()
{
  JUMPOUT(0x20EAB8A70);
}

void sub_20EAB8A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  sub_20E86665C((uint64_t)&a9);
  if (v13)
  {
    a13 = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

__CFArray *sub_20EAB8A88(uint64_t **a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __CFArray *Mutable;
  _QWORD *v7;
  const __CFAllocator **v8;
  const __CFAllocator *v9;
  int v10;
  CFNumberRef v11;
  unsigned int *v12;
  unsigned int *v13;
  const __CFAllocator *v14;
  CFNumberRef v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v25;
  __int128 v26;
  CFMutableArrayRef theArray;
  __int128 v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  std::error_condition v31;

  v3 = *a1;
  if (*a1)
  {
    v4 = *v3;
    if (*v3)
    {
      v5 = (uint64_t)(*(_QWORD *)(v4 + 3848) - *(_QWORD *)(v4 + 3840)) >> 5;
      Mutable = CFArrayCreateMutable(0, v5, MEMORY[0x24BDBD690]);
      theArray = Mutable;
      v7 = (_QWORD *)operator new();
      *v7 = &off_24C9AFE18;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = Mutable;
      *(_QWORD *)&v28 = v7;
      v25 = 0;
      v8 = (const __CFAllocator **)MEMORY[0x24BDBD240];
      if ((_DWORD)v5)
      {
        v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v10 = v5;
        do
        {
          v11 = CFNumberCreate(v9, kCFNumberDoubleType, &v25);
          CFArrayAppendValue(Mutable, v11);
          CFRelease(v11);
          --v10;
        }
        while (v10);
      }
      v12 = *(unsigned int **)(v4 + 3840);
      v13 = *(unsigned int **)(v4 + 3848);
      if (v12 != v13)
      {
        v14 = *v8;
        do
        {
          if (*v12 < v5)
          {
            v15 = CFNumberCreate(v14, kCFNumberDoubleType, v12 + 6);
            Mutable = theArray;
            CFArraySetValueAtIndex(theArray, *v12, v15);
            CFRelease(v15);
          }
          v12 += 8;
        }
        while (v12 != v13);
      }
      if (Mutable)
        CFRetain(Mutable);
      v21 = (std::__shared_weak_count *)v28;
      if ((_QWORD)v28)
      {
        v22 = (unint64_t *)(v28 + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      return Mutable;
    }
  }
  theArray = (CFMutableArrayRef)operator new(0x30uLL);
  v28 = xmmword_2102DBF00;
  strcpy((char *)theArray, "VIO Metadata is empty or PoseMetadata is empty");
  v16 = (char *)operator new(0x58uLL);
  v25 = v16;
  v26 = xmmword_2102DB400;
  strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamState.cpp");
  if (!a2)
    goto LABEL_22;
  *(_QWORD *)&v31.__val_ = 22;
  v31.__cat_ = std::generic_category();
  sub_20EA67538(&v31, (uint64_t)&theArray, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v17 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v17;
  v18 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_21;
    }
  }
  if (SHIBYTE(v26) < 0)
  {
LABEL_21:
    v16 = v25;
LABEL_22:
    operator delete(v16);
  }
LABEL_23:
  if (SHIBYTE(v28) < 0)
    operator delete(theArray);
  return 0;
}

void sub_20EAB8D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAB8D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EAB8DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAB8DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20EAB8DF8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  double *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  char *result;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int __val[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD v33[6];
  int v34;
  std::string v35;
  std::string **v36;
  std::string *v37;
  std::string *v38;
  _DWORD *v39;
  std::string *v40;
  std::string *v41;

  v3 = *a1;
  if (!*a1 || (v4 = *v3) == 0)
  {
    result = (char *)operator new(0x28uLL);
    *(_QWORD *)a2 = result;
    *(_OWORD *)(a2 + 8) = xmmword_2102DCA10;
    strcpy(result, "Invalid state, metadata was nullptr");
    return result;
  }
  v6 = (double *)v3[4];
  v7 = (std::__shared_weak_count *)v3[5];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    v10 = *v6;
    if (*v6 < *(double *)(v4 + 40))
    {
      v11 = 0;
      v12 = 0;
      if (!v7)
        goto LABEL_17;
LABEL_13:
      v14 = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      goto LABEL_17;
    }
  }
  else
  {
    v10 = *(double *)(v4 + 32);
  }
  v11 = 1;
  v12 = *(_QWORD *)&v10;
  if (v7)
    goto LABEL_13;
LABEL_17:
  v16 = 3;
  if (v11)
    v16 = v12;
  v31 = v16;
  v32 = v11;
  v17 = *a1;
  if (*a1)
  {
    v18 = *v17;
    v19 = *(unsigned __int8 *)(*v17 + 400) | 0x100000000;
    v20 = *(unsigned __int8 *)(v18 + 17) | 0x100000000;
    v21 = *(unsigned int *)(v18 + 4120) | 0x100000000;
  }
  else
  {
    v19 = 3;
    v20 = 3;
    v21 = 3;
  }
  v29 = v20;
  v30 = v19;
  *(_QWORD *)__val = v21;
  v22 = *(_QWORD *)(v4 + 4304);
  v23 = *(_QWORD *)(v4 + 4296);
  v24 = *(_QWORD *)(v4 + 4352);
  v25 = *(_QWORD *)(v4 + 4344);
  v26 = *(_QWORD *)(v4 + 4328);
  v27 = *(_QWORD *)(v4 + 4320);
  v34 = 0;
  sub_20EADCD90(v33, "Timestamp: ");
  if ((_BYTE)v32)
  {
    sub_20E87876C((uint64_t)&v37, (uint64_t)v33, (double *)&v31);
  }
  else
  {
    v37 = (std::string *)v33;
    v38 = (std::string *)"unexpected{";
    v39 = v33;
    v40 = (std::string *)"unexpected{";
    v41 = (std::string *)"unexpected{";
    if (v34 == -1)
      goto LABEL_63;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    ((void (*)(std::string *, _DWORD *))off_24C9C3AB8[v34])(&v35, v33);
    sub_20E920A5C((uint64_t)&v37, (uint64_t)v33, &v31);
    v37 = (std::string *)v33;
    v38 = (std::string *)"}";
    v39 = v33;
    v40 = (std::string *)"}";
    v41 = (std::string *)"}";
    if (v34 == -1)
LABEL_63:
      sub_20E877AB8();
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    ((void (*)(std::string *, _DWORD *))off_24C9C3AD0[v34])(&v35, v33);
  }
  v37 = (std::string *)v33;
  v38 = (std::string *)"; Health: ";
  v39 = v33;
  v40 = (std::string *)"; Health: ";
  v41 = (std::string *)"; Health: ";
  if (v34 == -1)
    sub_20E877AB8();
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  ((void (*)(std::string *, _DWORD *))off_24C9C3AE8[v34])(&v35, v33);
  sub_20EADCC2C((uint64_t)v33, (uint64_t)&v30);
  v37 = (std::string *)v33;
  v38 = (std::string *)"; Init Finished: ";
  v39 = v33;
  v40 = (std::string *)"; Init Finished: ";
  v41 = (std::string *)"; Init Finished: ";
  if (v34 == -1)
    sub_20E877AB8();
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  ((void (*)(std::string *, _DWORD *))off_24C9C3B18[v34])(&v35, v33);
  sub_20EADCC2C((uint64_t)v33, (uint64_t)&v29);
  v37 = (std::string *)v33;
  v38 = (std::string *)"; Map Size: ";
  v39 = v33;
  v40 = (std::string *)"; Map Size: ";
  v41 = (std::string *)"; Map Size: ";
  if (v34 == -1)
    sub_20E877AB8();
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  ((void (*)(std::string *, _DWORD *))off_24C9C3B30[v34])(&v35, v33);
  if (LOBYTE(__val[1]))
  {
    std::to_string(&v35, __val[0]);
    v37 = (std::string *)v33;
    v38 = &v35;
    v39 = v33;
    v40 = &v35;
    v41 = &v35;
    if (v34 == -1)
      sub_20E877AB8();
    v36 = &v37;
    ((void (*)(std::string ***, _DWORD *))off_24C9C39E0[v34])(&v36, v33);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    v37 = (std::string *)v33;
    v38 = (std::string *)"unexpected{";
    v39 = v33;
    v40 = (std::string *)"unexpected{";
    v41 = (std::string *)"unexpected{";
    if (v34 == -1)
      goto LABEL_64;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    ((void (*)(std::string *, _DWORD *))off_24C9C3AB8[v34])(&v35, v33);
    sub_20E920A5C((uint64_t)&v37, (uint64_t)v33, __val);
    v37 = (std::string *)v33;
    v38 = (std::string *)"}";
    v39 = v33;
    v40 = (std::string *)"}";
    v41 = (std::string *)"}";
    if (v34 == -1)
LABEL_64:
      sub_20E877AB8();
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    ((void (*)(std::string *, _DWORD *))off_24C9C3AD0[v34])(&v35, v33);
  }
  v37 = (std::string *)v33;
  v38 = (std::string *)"; Updated anchors: ";
  v39 = v33;
  v40 = (std::string *)"; Updated anchors: ";
  v41 = (std::string *)"; Updated anchors: ";
  if (v34 == -1)
    sub_20E877AB8();
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  ((void (*)(std::string *, _DWORD *))off_24C9C3B48[v34])(&v35, v33);
  std::to_string(&v35, 0x4EC4EC4EC4EC4EC5 * ((v22 - v23) >> 5));
  v37 = (std::string *)v33;
  v38 = &v35;
  v39 = v33;
  v40 = &v35;
  v41 = &v35;
  if (v34 == -1)
    sub_20E877AB8();
  v36 = &v37;
  ((void (*)(std::string ***, _DWORD *))off_24C9C39E0[v34])(&v36, v33);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v37 = (std::string *)v33;
  v38 = (std::string *)"; External anchors: ";
  v39 = v33;
  v40 = (std::string *)"; External anchors: ";
  v41 = (std::string *)"; External anchors: ";
  if (v34 == -1)
    sub_20E877AB8();
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  ((void (*)(std::string *, _DWORD *))off_24C9C3B60[v34])(&v35, v33);
  std::to_string(&v35, 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 4));
  v37 = (std::string *)v33;
  v38 = &v35;
  v39 = v33;
  v40 = &v35;
  v41 = &v35;
  if (v34 == -1)
    sub_20E877AB8();
  v36 = &v37;
  ((void (*)(std::string ***, _DWORD *))off_24C9C39E0[v34])(&v36, v33);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v37 = (std::string *)v33;
  v38 = (std::string *)"; Removed anchors: ";
  v39 = v33;
  v40 = (std::string *)"; Removed anchors: ";
  v41 = (std::string *)"; Removed anchors: ";
  if (v34 == -1)
    sub_20E877AB8();
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  ((void (*)(std::string *, _DWORD *))off_24C9C3B48[v34])(&v35, v33);
  std::to_string(&v35, 0x4EC4EC4EC4EC4EC5 * ((v26 - v27) >> 5));
  v37 = (std::string *)v33;
  v38 = &v35;
  v39 = v33;
  v40 = &v35;
  v41 = &v35;
  if (v34 == -1)
    sub_20E877AB8();
  v36 = &v37;
  ((void (*)(std::string ***, _DWORD *))off_24C9C39E0[v34])(&v36, v33);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v34 == -1)
    sub_20E877AB8();
  v37 = &v35;
  result = (char *)((uint64_t (*)(std::string **, _DWORD *))off_24C9C3A10[v34])(&v37, v33);
  if (v34 != -1)
    return (char *)((uint64_t (*)(std::string **, _DWORD *))off_24C9C39C8[v34])(&v37, v33);
  return result;
}

void sub_20EAB953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20E877A60((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EAB95B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;

  v2 = (std::__shared_weak_count *)a1[686];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[682];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[682];
  if (v5)
  {
LABEL_6:
    a1[683] = v5;
    operator delete(v5);
  }
LABEL_7:
  sub_20E91E818((uint64_t)(a1 + 515));
  v6 = (std::__shared_weak_count *)a1[488];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)a1[486];
    if (!v9)
      goto LABEL_19;
  }
  else
  {
LABEL_11:
    v9 = (std::__shared_weak_count *)a1[486];
    if (!v9)
      goto LABEL_19;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_19:
  v12 = (void *)a1[480];
  if (v12)
  {
    a1[481] = v12;
    operator delete(v12);
  }
  sub_20E91EA40((uint64_t)(a1 + 4));
  return a1;
}

uint64_t sub_20EAB96CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20EAB9778(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void **v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = *(void **)(a1 + 1992);
  if (v2)
  {
    *(_QWORD *)(a1 + 2000) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1880);
  if (v3)
  {
    *(_QWORD *)(a1 + 1888) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(a1 + 1872))
    sub_20EAB9ABC(a1 + 1736);
  if (*(_BYTE *)(a1 + 1728))
  {
    if (*(_BYTE *)(a1 + 1720))
    {
      v4 = *(_QWORD *)(a1 + 1408);
      if (v4)
      {
        v5 = *(_QWORD *)(a1 + 1416);
        v6 = *(void **)(a1 + 1408);
        if (v5 != v4)
        {
          do
          {
            v7 = *(void **)(v5 - 176);
            if (v7)
            {
              *(_QWORD *)(v5 - 168) = v7;
              operator delete(v7);
            }
            v5 -= 272;
          }
          while (v5 != v4);
          v6 = *(void **)(a1 + 1408);
        }
        *(_QWORD *)(a1 + 1416) = v4;
        operator delete(v6);
      }
    }
    v8 = *(void **)(a1 + 1384);
    if (v8)
    {
      *(_QWORD *)(a1 + 1392) = v8;
      operator delete(v8);
    }
  }
  v9 = *(_QWORD *)(a1 + 1024);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 1032);
    v11 = *(void **)(a1 + 1024);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(a1 + 1032);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 1024);
    }
    *(_QWORD *)(a1 + 1032) = v9;
    operator delete(v11);
  }
  v15 = *(void **)(a1 + 984);
  if (v15)
  {
    *(_QWORD *)(a1 + 992) = v15;
    operator delete(v15);
  }
  if (*(_BYTE *)(a1 + 976))
  {
    v16 = *(void ***)(a1 + 952);
    if (v16)
    {
      sub_20EAB9D1C(a1 + 952, v16);
      operator delete(*(void **)(a1 + 952));
    }
  }
  sub_20EAB9E54((void **)(a1 + 832));
  v17 = *(void **)(a1 + 320);
  if (v17)
  {
    *(_QWORD *)(a1 + 328) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 296);
  if (v18)
  {
    *(_QWORD *)(a1 + 304) = v18;
    operator delete(v18);
  }
  if (*(_BYTE *)(a1 + 288))
  {
    v19 = *(void **)(a1 + 264);
    if (v19)
    {
      *(_QWORD *)(a1 + 272) = v19;
      operator delete(v19);
    }
  }
  v20 = *(void **)(a1 + 176);
  if (v20)
  {
    *(_QWORD *)(a1 + 184) = v20;
    operator delete(v20);
  }
  sub_20EABA078((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_20EAB9910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 352))
  {
    if (*(_BYTE *)(a1 + 344))
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2)
      {
        v3 = *(_QWORD *)(a1 + 40);
        v4 = *(void **)(a1 + 32);
        if (v3 != v2)
        {
          do
          {
            v5 = *(void **)(v3 - 176);
            if (v5)
            {
              *(_QWORD *)(v3 - 168) = v5;
              operator delete(v5);
            }
            v3 -= 272;
          }
          while (v3 != v2);
          v4 = *(void **)(a1 + 32);
        }
        *(_QWORD *)(a1 + 40) = v2;
        operator delete(v4);
      }
    }
    v6 = *(void **)(a1 + 8);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

uint64_t sub_20EAB99A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EAB9A14(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
  {
    sub_20EAB9D1C(a1, *(void ***)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20EAB9A54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v4 = *(void **)(a1 + 96);
    if (v4)
    {
      *(_QWORD *)(a1 + 104) = v4;
      operator delete(v4);
    }
  }
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20EAB9ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 120);
    v4 = *(void **)(a1 + 112);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 120);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v4);
  }
  v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 72);
    v11 = *(void **)(a1 + 64);
    if (v10 != v9)
    {
      do
      {
        v12 = v10 - 176;
        sub_20E991548((_QWORD *)(v10 - 168));
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v9;
    operator delete(v11);
  }
  v13 = *(void **)(a1 + 40);
  if (v13)
  {
    *(_QWORD *)(a1 + 48) = v13;
    operator delete(v13);
  }
  sub_20EAB9CD4(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void **sub_20EAB9B98(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 176;
        sub_20E991548((_QWORD *)v3 - 21);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EAB9BFC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_20E991750(v3 - 14);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EAB9C54(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EAB9CD4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20EAB9CD4(a1, *a2);
    sub_20EAB9CD4(a1, a2[1]);
    sub_20E94FADC((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void sub_20EAB9D1C(uint64_t a1, void **a2)
{
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v6 = *(v4 - 5);
      if (v6)
      {
        *(v4 - 4) = v6;
        operator delete(v6);
      }
      v7 = *(v4 - 24);
      if (v7)
      {
        *(v4 - 23) = v7;
        operator delete(v7);
      }
      v8 = v4 - 27;
      v9 = (void **)*(v4 - 27);
      if (v9)
      {
        v10 = (void **)*(v4 - 26);
        v5 = *(v4 - 27);
        if (v10 != v9)
        {
          do
          {
            if (*((_BYTE *)v10 - 8) && *((char *)v10 - 9) < 0)
              operator delete(*(v10 - 4));
            v10 -= 17;
          }
          while (v10 != v9);
          v5 = *v8;
        }
        *(v4 - 26) = v9;
        operator delete(v5);
      }
      v4 -= 27;
    }
    while (v8 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void **sub_20EAB9DDC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 17;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EAB9E54(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;

  v2 = (void **)a1[9];
  if (v2)
  {
    v3 = (void **)a1[10];
    v4 = a1[9];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  v5 = (void **)a1[6];
  if (v5)
  {
    v6 = (void **)a1[7];
    v7 = a1[6];
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = a1[6];
    }
    a1[7] = v5;
    operator delete(v7);
  }
  v8 = (void **)a1[3];
  if (v8)
  {
    v9 = (void **)a1[4];
    v10 = a1[3];
    if (v9 != v8)
    {
      do
      {
        while (1)
        {
          if (*((_BYTE *)v9 - 8) && *((char *)v9 - 9) < 0)
            operator delete(*(v9 - 4));
          if (*((char *)v9 - 153) < 0)
            break;
          v9 -= 22;
          if (v9 == v8)
            goto LABEL_26;
        }
        operator delete(*(v9 - 22));
        v9 -= 22;
      }
      while (v9 != v8);
LABEL_26:
      v10 = a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
  v11 = (void **)*a1;
  if (*a1)
  {
    v12 = (void **)a1[1];
    v13 = *a1;
    if (v12 != v11)
    {
      do
      {
        while (1)
        {
          if (*((_BYTE *)v12 - 8) && *((char *)v12 - 9) < 0)
            operator delete(*(v12 - 4));
          if (*((char *)v12 - 153) < 0)
            break;
          v12 -= 22;
          if (v12 == v11)
            goto LABEL_37;
        }
        operator delete(*(v12 - 22));
        v12 -= 22;
      }
      while (v12 != v11);
LABEL_37:
      v13 = *a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

void **sub_20EAB9FE4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        while (1)
        {
          if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
            operator delete(*(v3 - 4));
          if (*((char *)v3 - 153) < 0)
            break;
          v3 -= 22;
          if (v3 == v2)
            goto LABEL_10;
        }
        operator delete(*(v3 - 22));
        v3 -= 22;
      }
      while (v3 != v2);
LABEL_10:
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EABA078(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[15];
  a1[15] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[12];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[10];
  a1[10] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[6];
  if (v8)
  {
    do
    {
      v11 = (_QWORD *)*v8;
      v12 = (_QWORD *)v8[6];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = (void *)v8[4];
      v8[4] = 0;
      if (v14)
        operator delete(v14);
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  v9 = (void *)a1[4];
  a1[4] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

uint64_t *sub_20EABA148(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20EABA434(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EABA448(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  char *v47;
  char *v48;

  v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)a1 = v4;
  sub_20EABA7A0(a1 + 32, (uint64_t)(a2 + 2));
  v5 = a2[238];
  *(_OWORD *)(a1 + 3824) = a2[239];
  *(_OWORD *)(a1 + 3808) = v5;
  *(_QWORD *)(a1 + 3840) = 0;
  *(_QWORD *)(a1 + 3856) = 0;
  *(_QWORD *)(a1 + 3848) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 480);
  v7 = (_BYTE *)*((_QWORD *)a2 + 481);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      sub_20EABADD4();
    v9 = (char *)operator new(v7 - v6);
    *(_QWORD *)(a1 + 3840) = v9;
    *(_QWORD *)(a1 + 3848) = v9;
    v10 = &v9[32 * (v8 >> 5)];
    *(_QWORD *)(a1 + 3856) = v10;
    memcpy(v9, v6, v8);
    *(_QWORD *)(a1 + 3848) = v10;
  }
  v11 = *((_QWORD *)a2 + 483);
  *(_BYTE *)(a1 + 3872) = *((_BYTE *)a2 + 3872);
  *(_QWORD *)(a1 + 3864) = v11;
  *(_QWORD *)(a1 + 3880) = *((_QWORD *)a2 + 485);
  v12 = *((_QWORD *)a2 + 486);
  *(_QWORD *)(a1 + 3888) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 3896) = *((_QWORD *)a2 + 487);
  v15 = *((_QWORD *)a2 + 488);
  *(_QWORD *)(a1 + 3904) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(__int128 *)((char *)a2 + 4056);
  v19 = *(__int128 *)((char *)a2 + 4072);
  v20 = *(__int128 *)((char *)a2 + 4088);
  *(_OWORD *)(a1 + 4099) = *(__int128 *)((char *)a2 + 4099);
  *(_OWORD *)(a1 + 3912) = *(__int128 *)((char *)a2 + 3912);
  v21 = *(__int128 *)((char *)a2 + 3928);
  v22 = *(__int128 *)((char *)a2 + 3944);
  v23 = *(__int128 *)((char *)a2 + 3960);
  *(_OWORD *)(a1 + 3976) = *(__int128 *)((char *)a2 + 3976);
  *(_OWORD *)(a1 + 3960) = v23;
  *(_OWORD *)(a1 + 3944) = v22;
  *(_OWORD *)(a1 + 3928) = v21;
  v24 = *(__int128 *)((char *)a2 + 3992);
  v25 = *(__int128 *)((char *)a2 + 4008);
  v26 = *(__int128 *)((char *)a2 + 4024);
  *(_OWORD *)(a1 + 4040) = *(__int128 *)((char *)a2 + 4040);
  *(_OWORD *)(a1 + 4024) = v26;
  *(_OWORD *)(a1 + 4008) = v25;
  *(_OWORD *)(a1 + 3992) = v24;
  *(_OWORD *)(a1 + 4088) = v20;
  *(_OWORD *)(a1 + 4072) = v19;
  *(_OWORD *)(a1 + 4056) = v18;
  sub_20EABB2F4(a1 + 4120, (uint64_t *)a2 + 515);
  v27 = *(__int128 *)((char *)a2 + 5032);
  v28 = *(__int128 *)((char *)a2 + 5064);
  *(_OWORD *)(a1 + 5048) = *(__int128 *)((char *)a2 + 5048);
  *(_OWORD *)(a1 + 5064) = v28;
  *(_OWORD *)(a1 + 5032) = v27;
  v29 = *(__int128 *)((char *)a2 + 5080);
  v30 = *(__int128 *)((char *)a2 + 5096);
  v31 = *(__int128 *)((char *)a2 + 5128);
  *(_OWORD *)(a1 + 5112) = *(__int128 *)((char *)a2 + 5112);
  *(_OWORD *)(a1 + 5128) = v31;
  *(_OWORD *)(a1 + 5080) = v29;
  *(_OWORD *)(a1 + 5096) = v30;
  v32 = *(__int128 *)((char *)a2 + 5160);
  *(_OWORD *)(a1 + 5144) = *(__int128 *)((char *)a2 + 5144);
  *(_OWORD *)(a1 + 5160) = v32;
  v33 = *(__int128 *)((char *)a2 + 5176);
  *(_QWORD *)(a1 + 5192) = *((_QWORD *)a2 + 649);
  *(_OWORD *)(a1 + 5176) = v33;
  *(_QWORD *)(a1 + 5200) = *((_QWORD *)a2 + 650);
  v34 = *(__int128 *)((char *)a2 + 5208);
  *(_QWORD *)(a1 + 5224) = *((_QWORD *)a2 + 653);
  *(_OWORD *)(a1 + 5208) = v34;
  v35 = a2[327];
  *(_QWORD *)(a1 + 5248) = *((_QWORD *)a2 + 656);
  *(_OWORD *)(a1 + 5232) = v35;
  v36 = *(__int128 *)((char *)a2 + 5256);
  *(_QWORD *)(a1 + 5272) = *((_QWORD *)a2 + 659);
  *(_OWORD *)(a1 + 5256) = v36;
  v37 = a2[330];
  *(_QWORD *)(a1 + 5296) = *((_QWORD *)a2 + 662);
  *(_OWORD *)(a1 + 5280) = v37;
  v39 = *(__int128 *)((char *)a2 + 5336);
  v38 = *(__int128 *)((char *)a2 + 5352);
  v40 = *(__int128 *)((char *)a2 + 5320);
  *(_QWORD *)(a1 + 5368) = *((_QWORD *)a2 + 671);
  *(_OWORD *)(a1 + 5336) = v39;
  *(_OWORD *)(a1 + 5352) = v38;
  *(_OWORD *)(a1 + 5320) = v40;
  *(_OWORD *)(a1 + 5304) = *(__int128 *)((char *)a2 + 5304);
  v41 = a2[338];
  v42 = a2[339];
  v43 = *((_QWORD *)a2 + 680);
  *(_OWORD *)(a1 + 5392) = a2[337];
  *(_QWORD *)(a1 + 5440) = v43;
  *(_OWORD *)(a1 + 5424) = v42;
  *(_OWORD *)(a1 + 5408) = v41;
  *(_OWORD *)(a1 + 5376) = a2[336];
  *(_QWORD *)(a1 + 5448) = *((_QWORD *)a2 + 681);
  *(_QWORD *)(a1 + 5456) = 0;
  *(_QWORD *)(a1 + 5472) = 0;
  *(_QWORD *)(a1 + 5464) = 0;
  v44 = (_BYTE *)*((_QWORD *)a2 + 682);
  v45 = (_BYTE *)*((_QWORD *)a2 + 683);
  v46 = v45 - v44;
  if (v45 != v44)
  {
    if (v46 < 0)
      sub_20EABADD4();
    v47 = (char *)operator new(v46);
    *(_QWORD *)(a1 + 5456) = v47;
    *(_QWORD *)(a1 + 5464) = v47;
    v48 = &v47[32 * (v46 >> 5)];
    *(_QWORD *)(a1 + 5472) = v48;
    memcpy(v47, v44, v46);
    *(_QWORD *)(a1 + 5464) = v48;
  }
  return a1;
}

void sub_20EABA740(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20EAB96CC(v2);
  sub_20E91EA40(v1);
  _Unwind_Resume(a1);
}

void sub_20EABA77C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 3848) = v5;
    operator delete(v5);
  }
  sub_20E91EA40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EABA7A0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  v8 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v12;
  v13 = *(_OWORD *)(a2 + 216);
  v14 = *(_OWORD *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  v16 = *(_OWORD *)(a2 + 280);
  v17 = *(_OWORD *)(a2 + 296);
  v18 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 296) = v17;
  *(_OWORD *)(a1 + 312) = v18;
  *(_OWORD *)(a1 + 280) = v16;
  sub_20E960080(a1 + 344, (__int128 *)(a2 + 344));
  sub_20E969484(a1 + 520, (_BYTE *)(a2 + 520));
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  sub_20EABA9B0((_QWORD *)(a1 + 744), (uint64_t *)(a2 + 744));
  memcpy((void *)(a1 + 768), (const void *)(a2 + 768), 0x7C0uLL);
  *(_BYTE *)(a1 + 2752) = 0;
  *(_BYTE *)(a1 + 3648) = 0;
  if (*(_BYTE *)(a2 + 3648))
  {
    sub_20EABABF8(a1 + 2752, (__int128 *)(a2 + 2752));
    *(_BYTE *)(a1 + 3648) = 1;
  }
  *(_BYTE *)(a1 + 3656) = 0;
  *(_BYTE *)(a1 + 3672) = 0;
  if (*(_BYTE *)(a2 + 3672))
  {
    *(_QWORD *)(a1 + 3656) = *(_QWORD *)(a2 + 3656);
    v19 = *(_QWORD *)(a2 + 3664);
    *(_QWORD *)(a1 + 3664) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *(_BYTE *)(a1 + 3672) = 1;
  }
  v22 = *(_OWORD *)(a2 + 3680);
  *(_DWORD *)(a1 + 3696) = *(_DWORD *)(a2 + 3696);
  *(_OWORD *)(a1 + 3680) = v22;
  sub_20EABADE8(a1 + 3704, a2 + 3704);
  v23 = *(_OWORD *)(a2 + 3744);
  *(_OWORD *)(a1 + 3757) = *(_OWORD *)(a2 + 3757);
  *(_OWORD *)(a1 + 3744) = v23;
  return a1;
}

void sub_20EABA948(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v6;

  if (*(_BYTE *)(v1 + 3648))
  {
    v6 = *(void **)(v1 + 3496);
    if (v6)
    {
      *(_QWORD *)(v1 + 3504) = v6;
      operator delete(v6);
    }
  }
  sub_20E9DD680(v4);
  sub_20E91E690(v3);
  sub_20E91E748(v2);
  _Unwind_Resume(a1);
}

void sub_20EABA99C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E91E748(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EABA9B0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E91EF00();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20EABAABC(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20EABAA58(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EABAABC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (0x84BDA12F684BDA13 * (v10 >> 3) >= 0x12F684BDA12F685)
          sub_20E91EF00();
        v11 = (char *)operator new(v10);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10 - 7);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EABABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EABABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EABABF8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  memcpy((void *)(a1 + 168), (char *)a2 + 168, 0x120uLL);
  memcpy((void *)(a1 + 456), (char *)a2 + 456, 0x120uLL);
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  v12 = *((_QWORD *)a2 + 93);
  v13 = *((_QWORD *)a2 + 94);
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = 0x6DB6DB6DB6DB6DB7 * (v14 >> 3);
    if (v15 >= 0x492492492492493)
      sub_20EABADD4();
    v16 = (char *)operator new(v14);
    v17 = 0;
    *(_QWORD *)(a1 + 744) = v16;
    *(_QWORD *)(a1 + 752) = v16;
    *(_QWORD *)(a1 + 760) = &v16[56 * v15];
    do
    {
      v18 = v12 + v17;
      v19 = &v16[v17];
      *(_QWORD *)v19 = *(_QWORD *)(v12 + v17);
      v20 = *(_OWORD *)(v12 + v17 + 8);
      *((_QWORD *)v19 + 3) = *(_QWORD *)(v12 + v17 + 24);
      *(_OWORD *)(v19 + 8) = v20;
      v21 = *(_OWORD *)(v12 + v17 + 32);
      *((_QWORD *)v19 + 6) = *(_QWORD *)(v12 + v17 + 48);
      *((_OWORD *)v19 + 2) = v21;
      v17 += 56;
    }
    while (v18 + 56 != v13);
    *(_QWORD *)(a1 + 752) = &v16[v17];
  }
  v22 = a2[48];
  *(_QWORD *)(a1 + 784) = *((_QWORD *)a2 + 98);
  *(_OWORD *)(a1 + 768) = v22;
  v23 = *(__int128 *)((char *)a2 + 792);
  *(_QWORD *)(a1 + 808) = *((_QWORD *)a2 + 101);
  *(_OWORD *)(a1 + 792) = v23;
  *(_OWORD *)(a1 + 816) = a2[51];
  *(_OWORD *)(a1 + 832) = a2[52];
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  if (*((_BYTE *)a2 + 872))
  {
    v24 = a2[53];
    *(_QWORD *)(a1 + 864) = *((_QWORD *)a2 + 108);
    *(_OWORD *)(a1 + 848) = v24;
    *(_BYTE *)(a1 + 872) = 1;
  }
  v25 = *((_QWORD *)a2 + 110);
  *(_BYTE *)(a1 + 888) = *((_BYTE *)a2 + 888);
  *(_QWORD *)(a1 + 880) = v25;
  return a1;
}

void sub_20EABADB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 752) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EABADD4()
{
  sub_20E860B90("vector");
}

uint64_t sub_20EABADE8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_20EABAF28(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_20EABAF00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20EABAF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EABAF28(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_74;
  }
  v7 = a2[1];
  if (v7 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2[1];
      goto LABEL_6;
    }
LABEL_74:
    abort();
  }
LABEL_6:
  v8 = *a2;
  v9 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (unsigned __int16)v7 | ((unsigned __int16)v8 << 16);
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_36;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_36;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_36:
  v19 = operator new(0xC8uLL);
  *v19 = 0;
  v19[1] = v9;
  v20 = *(_OWORD *)(a3 + 144);
  *((_OWORD *)v19 + 9) = *(_OWORD *)(a3 + 128);
  *((_OWORD *)v19 + 10) = v20;
  *((_OWORD *)v19 + 11) = *(_OWORD *)(a3 + 160);
  v19[24] = *(_QWORD *)(a3 + 176);
  v21 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v19 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v19 + 6) = v21;
  v22 = *(_OWORD *)(a3 + 112);
  *((_OWORD *)v19 + 7) = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v19 + 8) = v22;
  v23 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v19 + 2) = v23;
  v24 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v19 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v19 + 4) = v24;
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (v10 && (float)(v26 * (float)v10) >= v25)
  {
    v9 = v3;
  }
  else
  {
    v27 = 1;
    if (v10 >= 3)
      v27 = (v10 & (v10 - 1)) != 0;
    v28 = v27 | (2 * v10);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_49;
    if (prime < v10)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < v10)
LABEL_49:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v34 = *(_QWORD *)a1;
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v35)
  {
    *v19 = *v35;
LABEL_72:
    *v35 = v19;
    goto LABEL_73;
  }
  *v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(v34 + 8 * v9) = a1 + 16;
  if (*v19)
  {
    v36 = *(_QWORD *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10)
        v36 %= v10;
    }
    else
    {
      v36 &= v10 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(a1 + 24);
  return v19;
}

void sub_20EABB2E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EABB2F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  _BYTE *v53;
  _BYTE *v54;
  int64_t v55;
  char *v56;
  char *v57;
  _BYTE *v58;
  _BYTE *v59;
  int64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char v71;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a2[1];
  v6 = a2[2];
  v7 = v6 - v5;
  if (v6 != v5)
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * (v7 >> 3);
    if (v8 >= 0x1E1E1E1E1E1E1E2)
      sub_20EABADD4();
    v9 = (char *)operator new(v7);
    v10 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = &v9[136 * v8];
    do
    {
      v11 = v5 + v10;
      v12 = &v9[v10];
      *(_QWORD *)v12 = *(_QWORD *)(v5 + v10);
      v13 = *(_OWORD *)(v5 + v10 + 8);
      v14 = *(_OWORD *)(v5 + v10 + 24);
      v15 = *(_OWORD *)(v5 + v10 + 40);
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(v5 + v10 + 56);
      *(_OWORD *)(v12 + 40) = v15;
      *(_OWORD *)(v12 + 24) = v14;
      *(_OWORD *)(v12 + 8) = v13;
      v16 = *(_OWORD *)(v5 + v10 + 72);
      v17 = *(_OWORD *)(v5 + v10 + 88);
      v18 = *(_OWORD *)(v5 + v10 + 104);
      *(_OWORD *)(v12 + 120) = *(_OWORD *)(v5 + v10 + 120);
      *(_OWORD *)(v12 + 104) = v18;
      *(_OWORD *)(v12 + 88) = v17;
      *(_OWORD *)(v12 + 72) = v16;
      v10 += 136;
    }
    while (v11 + 136 != v6);
    *(_QWORD *)(a1 + 16) = &v9[v10];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v19 = a2[4];
  v20 = a2[5];
  v21 = v20 - v19;
  if (v20 != v19)
  {
    v22 = 0x8E38E38E38E38E39 * (v21 >> 4);
    if (v22 > 0x1C71C71C71C71C7)
      sub_20EABADD4();
    v23 = (char *)operator new(v21);
    v24 = 0;
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = &v23[144 * v22];
    do
    {
      v25 = v19 + v24;
      v26 = &v23[v24];
      *(_OWORD *)v26 = *(_OWORD *)(v19 + v24);
      v27 = *(_OWORD *)(v19 + v24 + 128);
      v29 = *(_OWORD *)(v19 + v24 + 80);
      v28 = *(_OWORD *)(v19 + v24 + 96);
      *((_OWORD *)v26 + 7) = *(_OWORD *)(v19 + v24 + 112);
      *((_OWORD *)v26 + 8) = v27;
      *((_OWORD *)v26 + 5) = v29;
      *((_OWORD *)v26 + 6) = v28;
      v30 = *(_OWORD *)(v19 + v24 + 16);
      v31 = *(_OWORD *)(v19 + v24 + 32);
      v32 = *(_OWORD *)(v19 + v24 + 64);
      *((_OWORD *)v26 + 3) = *(_OWORD *)(v19 + v24 + 48);
      *((_OWORD *)v26 + 4) = v32;
      *((_OWORD *)v26 + 1) = v30;
      *((_OWORD *)v26 + 2) = v31;
      v24 += 144;
    }
    while (v25 + 144 != v20);
    *(_QWORD *)(a1 + 40) = &v23[v24];
  }
  sub_20EABB834(a1 + 56, (__int128 *)(a2 + 7));
  sub_20EAA9A94(a1 + 152, (uint64_t)(a2 + 19));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v33 = a2[37];
  v34 = a2[38];
  v35 = v34 - v33;
  if (v34 != v33)
  {
    v36 = 0x8E38E38E38E38E39 * (v35 >> 4);
    if (v36 > 0x1C71C71C71C71C7)
      sub_20EABADD4();
    v37 = (char *)operator new(v35);
    v38 = 0;
    *(_QWORD *)(a1 + 296) = v37;
    *(_QWORD *)(a1 + 304) = v37;
    *(_QWORD *)(a1 + 312) = &v37[144 * v36];
    do
    {
      v39 = v33 + v38;
      v40 = &v37[v38];
      *(_OWORD *)v40 = *(_OWORD *)(v33 + v38);
      v41 = *(_OWORD *)(v33 + v38 + 128);
      v43 = *(_OWORD *)(v33 + v38 + 80);
      v42 = *(_OWORD *)(v33 + v38 + 96);
      *((_OWORD *)v40 + 7) = *(_OWORD *)(v33 + v38 + 112);
      *((_OWORD *)v40 + 8) = v41;
      *((_OWORD *)v40 + 5) = v43;
      *((_OWORD *)v40 + 6) = v42;
      v44 = *(_OWORD *)(v33 + v38 + 16);
      v45 = *(_OWORD *)(v33 + v38 + 32);
      v46 = *(_OWORD *)(v33 + v38 + 64);
      *((_OWORD *)v40 + 3) = *(_OWORD *)(v33 + v38 + 48);
      *((_OWORD *)v40 + 4) = v46;
      *((_OWORD *)v40 + 1) = v44;
      *((_OWORD *)v40 + 2) = v45;
      v38 += 144;
    }
    while (v39 + 144 != v34);
    *(_QWORD *)(a1 + 304) = &v37[v38];
  }
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v48 = (_BYTE *)a2[40];
  v47 = (_BYTE *)a2[41];
  v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v49 < 0)
      sub_20E92CED8();
    v50 = (char *)operator new(v47 - v48);
    *(_QWORD *)(a1 + 320) = v50;
    *(_QWORD *)(a1 + 328) = v50;
    v51 = &v50[8 * (v49 >> 3)];
    *(_QWORD *)(a1 + 336) = v51;
    memcpy(v50, v48, v49);
    *(_QWORD *)(a1 + 328) = v51;
  }
  v52 = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 354) = *(_OWORD *)((char *)a2 + 354);
  *(_OWORD *)(a1 + 344) = v52;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v54 = (_BYTE *)a2[47];
  v53 = (_BYTE *)a2[48];
  v55 = v53 - v54;
  if (v53 != v54)
  {
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v55 >> 3)) >= 0x276276276276277)
      sub_20EABADD4();
    v56 = (char *)operator new(v55);
    *(_QWORD *)(a1 + 376) = v56;
    *(_QWORD *)(a1 + 384) = v56;
    v57 = &v56[8 * (v55 >> 3)];
    *(_QWORD *)(a1 + 392) = v57;
    memcpy(v56, v54, v55 - 4);
    *(_QWORD *)(a1 + 384) = v57;
  }
  *(_DWORD *)(a1 + 400) = *((_DWORD *)a2 + 100);
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v59 = (_BYTE *)a2[51];
  v58 = (_BYTE *)a2[52];
  v60 = v58 - v59;
  if (v58 != v59)
  {
    if (v60 < 0)
      sub_20E867F44();
    v61 = (char *)operator new(v58 - v59);
    *(_QWORD *)(a1 + 408) = v61;
    *(_QWORD *)(a1 + 416) = v61;
    v62 = &v61[8 * (v60 >> 3)];
    *(_QWORD *)(a1 + 424) = v62;
    memcpy(v61, v59, v60);
    *(_QWORD *)(a1 + 416) = v62;
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  if (*((_BYTE *)a2 + 904))
  {
    v63 = *((_OWORD *)a2 + 27);
    v64 = *((_OWORD *)a2 + 28);
    *(_OWORD *)(a1 + 460) = *(_OWORD *)((char *)a2 + 460);
    *(_OWORD *)(a1 + 432) = v63;
    *(_OWORD *)(a1 + 448) = v64;
    v65 = *((_OWORD *)a2 + 37);
    v67 = *((_OWORD *)a2 + 34);
    v66 = *((_OWORD *)a2 + 35);
    *(_OWORD *)(a1 + 576) = *((_OWORD *)a2 + 36);
    *(_OWORD *)(a1 + 592) = v65;
    *(_OWORD *)(a1 + 544) = v67;
    *(_OWORD *)(a1 + 560) = v66;
    v68 = *((_OWORD *)a2 + 30);
    v69 = *((_OWORD *)a2 + 31);
    v70 = *((_OWORD *)a2 + 33);
    *(_OWORD *)(a1 + 512) = *((_OWORD *)a2 + 32);
    *(_OWORD *)(a1 + 528) = v70;
    *(_OWORD *)(a1 + 480) = v68;
    *(_OWORD *)(a1 + 496) = v69;
    memcpy((void *)(a1 + 608), a2 + 76, 0x120uLL);
    v71 = *((_BYTE *)a2 + 900);
    *(_DWORD *)(a1 + 896) = *((_DWORD *)a2 + 224);
    *(_BYTE *)(a1 + 900) = v71;
    *(_BYTE *)(a1 + 904) = 1;
  }
  return a1;
}

void sub_20EABB734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;

  if (*(_BYTE *)(v10 + 144))
  {
    v13 = *(void **)(v10 + 120);
    if (v13)
    {
      *(_QWORD *)(v10 + 128) = v13;
      operator delete(v13);
    }
  }
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v14;
    operator delete(v14);
  }
  v15 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EABB824()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EABB81CLL);
  JUMPOUT(0x20EABB814);
}

uint64_t sub_20EABB834(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)a1 = v3;
    *(_OWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v7 = (_BYTE *)*((_QWORD *)a2 + 8);
    v6 = (_BYTE *)*((_QWORD *)a2 + 9);
    v8 = v6 - v7;
    if (v6 != v7)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v8 >> 3) >= 0x666666666666667)
        sub_20EAA7068();
      v9 = (char *)operator new(v8);
      *(_QWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 72) = v9;
      v10 = &v9[8 * (v8 >> 3)];
      *(_QWORD *)(a1 + 80) = v10;
      memcpy(v9, v7, v8 - 7);
      *(_QWORD *)(a1 + 72) = v10;
    }
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

void sub_20EABB8FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  if (*(_BYTE *)(v1 + 88))
  {
    v5 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 72) = v5;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EABB930(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C3988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EABB940(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C3988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EABB970(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20EABBA4C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  size_t prime;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  double **v47;
  uint64_t v48;
  double *v49;
  double *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  size_t v59;
  double *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  double *v67;
  double *v68;
  uint64_t v69;
  _QWORD *v70;
  char *j;
  uint64_t v72;
  void (*v73)(uint64_t);
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  char **v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  char **v98;
  char *v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  size_t v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char *v117;
  double *v118;
  uint64_t v119;
  _QWORD *v120;
  char *k;
  uint64_t v122;
  void (*v123)(uint64_t);
  _QWORD *v124;
  _QWORD *v125;
  char *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  unsigned int v132;
  double *v133;
  void ***v134;
  char **v135;
  uint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  __int128 v148;
  char *v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  double *v160;
  double *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  size_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  char v196;
  __int128 v197;
  BOOL v198;
  char *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  void *v205;
  char *v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  unint64_t v214;
  size_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  size_t v219;
  char *v220;
  char *v221;
  size_t v222;
  char *v223;
  unint64_t v224;
  char *v225;
  __int128 *v226;
  unint64_t v227;
  __int128 v228;
  char *v229;
  uint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  char v234;
  char *v235;
  uint64_t v236;
  _QWORD *v237;
  char *m;
  uint64_t v239;
  void (*v240)(uint64_t);
  _QWORD *v241;
  _QWORD *v242;
  double *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  double *v248;
  uint64_t v249;
  _DWORD *v250;
  uint64_t v251;
  double *v252;
  _QWORD *v253;
  uint64_t n;
  uint64_t v255;
  uint64_t **v256;
  uint64_t *v257;
  uint64_t **v258;
  unint64_t v259;
  char *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 *v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  _QWORD *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char *v299;
  char *v300;
  size_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  int v305;
  _DWORD *v306;
  char *v307;
  char *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD **v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  size_t v325;
  char *v326;
  __int128 v327;
  _QWORD *v328;
  _QWORD *v329;
  void *v330;
  void *v331;
  _QWORD *v332;
  _QWORD *v333;
  void *v334;
  void *v335;
  size_t v336;
  _QWORD *v337;
  void **v338;
  uint64_t v339;
  char *v340;
  char **v341;
  char *v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  char *v348;
  char *v349;
  size_t v350;
  char *v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  char *v355;
  char *v356;
  size_t v357;
  _QWORD *v358;
  char *ii;
  uint64_t v360;
  void (*v361)(uint64_t);
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  char *jj;
  uint64_t v366;
  void (*v367)(uint64_t);
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  char *kk;
  uint64_t v372;
  void (*v373)(uint64_t);
  _QWORD *v374;
  _QWORD *v375;
  _QWORD *v376;
  char *mm;
  uint64_t v378;
  void (*v379)(uint64_t);
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  _QWORD *v383;
  char *nn;
  uint64_t v385;
  void (*v386)(uint64_t);
  _QWORD *v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t *v392;
  _QWORD *v393;
  uint64_t *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  char *v399;
  uint64_t *v400;
  uint64_t v401;
  _QWORD *v402;
  char *i1;
  uint64_t v404;
  void (*v405)(uint64_t);
  _QWORD *v406;
  _QWORD *v407;
  _QWORD *v408;
  char *i2;
  uint64_t v410;
  void (*v411)(uint64_t);
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  char *i3;
  uint64_t v416;
  void (*v417)(uint64_t);
  _QWORD *v418;
  _QWORD *v419;
  _QWORD *v420;
  char *i4;
  uint64_t v422;
  void (*v423)(uint64_t);
  _QWORD *v424;
  _QWORD *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  std::bad_cast *exception;
  std::bad_cast *v434;
  std::bad_cast *v435;
  std::bad_cast *v436;
  std::bad_cast *v437;
  std::bad_cast *v438;
  std::bad_cast *v439;
  std::bad_cast *v440;
  std::bad_cast *v441;
  std::bad_cast *v442;
  std::bad_cast *v443;
  std::bad_cast *v444;
  std::bad_cast *v445;
  std::bad_cast *v446;
  std::bad_cast *v447;
  std::bad_cast *v448;
  std::bad_cast *v449;
  std::bad_cast *v450;
  std::bad_cast *v451;
  std::bad_cast *v452;
  std::bad_cast *v453;
  std::bad_cast *v454;
  std::bad_cast *v455;
  std::bad_cast *v456;
  _QWORD **v457;
  uint64_t v458;
  unsigned int v459;
  _QWORD *v460;
  char *v462;
  _QWORD *v463;
  size_t v464;
  uint64_t **v465;
  unint64_t v466;
  char *v467;
  char *v468;
  uint64_t v469;
  _QWORD v470[2];
  char v471;
  char v472;
  char v473;
  unint64_t v474;
  _BYTE v475[96];
  __int128 v476;
  __int128 v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  __int128 v481;
  _QWORD v482[4];
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  uint64_t v497;
  __int128 *v498;
  __int128 v499;
  __int128 v500;
  _OWORD v501[2];
  uint64_t v502;
  uint64_t v503;

  v503 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 6;
  sub_20E9EE078(a1[6], (double *)a2);
  sub_20E9EE1A4(*v6, (_BYTE *)(a2 + 1360));
  v469 = a2;
  sub_20E9EDA2C(*v6, (_DWORD *)(a2 + 1364));
  *(_DWORD *)v475 = 6;
  sub_20E9EDADC(*v6, v475);
  v7 = *(_DWORD *)v475;
  sub_20E9EE078(*v6, (double *)(v469 + 8));
  sub_20E9EDADC(*v6, (_DWORD *)(v469 + 16));
  sub_20E9EDADC(*v6, (_DWORD *)(v469 + 20));
  if (v7 >= 2)
  {
    sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 24));
    if (v7 != 2)
    {
      sub_20E9EE078(*v6, (double *)(v469 + 32));
      v474 = 0;
      sub_20E9EDE6C(*v6, &v474);
      v459 = v7;
      v8 = (uint64_t *)(v469 + 40);
      if (*(_QWORD *)(v469 + 64))
      {
        v9 = *(_QWORD **)(v469 + 56);
        if (v9)
        {
          do
          {
            v41 = (_QWORD *)*v9;
            v42 = (_QWORD *)v9[6];
            if (v42)
            {
              do
              {
                v43 = (_QWORD *)*v42;
                operator delete(v42);
                v42 = v43;
              }
              while (v43);
            }
            v44 = (void *)v9[4];
            v9[4] = 0;
            if (v44)
              operator delete(v44);
            operator delete(v9);
            v9 = v41;
          }
          while (v41);
        }
        *(_QWORD *)(v469 + 56) = 0;
        v10 = *(_QWORD *)(v469 + 48);
        if (v10)
        {
          for (i = 0; i != v10; ++i)
            *(_QWORD *)(*v8 + 8 * i) = 0;
        }
        *(_QWORD *)(v469 + 64) = 0;
      }
      v466 = v474;
      if (v474)
      {
        v12 = 0;
        v13 = (_QWORD *)(v469 + 56);
        do
        {
          memset(&v475[8], 0, 48);
          *(_DWORD *)v475 = 0;
          *(_DWORD *)&v475[48] = 1065353216;
          sub_20E9EDADC(*v6, v475);
          LODWORD(v470[0]) = 2;
          sub_20E9EDADC(*v6, v470);
          v14 = v470[0];
          sub_20E9EDADC(*v6, &v475[8]);
          sub_20E9EE1A4(*v6, &v475[12]);
          if (v14 >= 2)
            sub_20EABFA58((uint64_t)a1, (uint64_t)&v475[16]);
          v15 = *(unsigned int *)v475;
          v16 = *(_QWORD *)(v469 + 48);
          if (v16)
          {
            v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
            v17.i16[0] = vaddlv_u8(v17);
            if (v17.u32[0] > 1uLL)
            {
              prime = *(unsigned int *)v475;
              if (v16 <= *(unsigned int *)v475)
                prime = *(unsigned int *)v475 % v16;
            }
            else
            {
              prime = (v16 - 1) & *(_DWORD *)v475;
            }
            v18 = *(uint64_t ***)(*v8 + 8 * prime);
            if (v18)
            {
              v19 = *v18;
              if (v19)
              {
                if (v17.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v21 = v19[1];
                    if (v21 == *(unsigned int *)v475)
                    {
                      if (*((_DWORD *)v19 + 4) == *(_DWORD *)v475)
                        goto LABEL_79;
                    }
                    else if ((v21 & (v16 - 1)) != prime)
                    {
                      goto LABEL_34;
                    }
                    v19 = (uint64_t *)*v19;
                    if (!v19)
                      goto LABEL_34;
                  }
                }
                do
                {
                  v20 = v19[1];
                  if (v20 == *(unsigned int *)v475)
                  {
                    if (*((_DWORD *)v19 + 4) == *(_DWORD *)v475)
                      goto LABEL_79;
                  }
                  else
                  {
                    if (v20 >= v16)
                      v20 %= v16;
                    if (v20 != prime)
                      break;
                  }
                  v19 = (uint64_t *)*v19;
                }
                while (v19);
              }
            }
          }
LABEL_34:
          v22 = operator new(0x48uLL);
          v23 = v22;
          v470[0] = v22;
          v470[1] = v469 + 56;
          *v22 = 0;
          v22[1] = v15;
          *((_DWORD *)v22 + 4) = v15;
          *((_DWORD *)v22 + 6) = *(_DWORD *)&v475[8];
          *((_BYTE *)v22 + 28) = v475[12];
          v24 = *(_OWORD *)&v475[16];
          *(_OWORD *)&v475[16] = 0uLL;
          *((_OWORD *)v22 + 2) = v24;
          v25 = *(_OWORD *)&v475[32];
          *((_OWORD *)v22 + 3) = *(_OWORD *)&v475[32];
          *((_DWORD *)v22 + 16) = *(_DWORD *)&v475[48];
          if (*((_QWORD *)&v25 + 1))
          {
            v26 = *(_QWORD *)(v25 + 8);
            if ((*((_QWORD *)&v24 + 1) & (*((_QWORD *)&v24 + 1) - 1)) != 0)
            {
              if (v26 >= *((_QWORD *)&v24 + 1))
                v26 %= *((_QWORD *)&v24 + 1);
            }
            else
            {
              v26 &= *((_QWORD *)&v24 + 1) - 1;
            }
            *(_QWORD *)(v24 + 8 * v26) = v22 + 6;
            *(_OWORD *)&v475[32] = 0uLL;
          }
          v471 = 1;
          v27 = (float)(unint64_t)(*(_QWORD *)(v469 + 64) + 1);
          v28 = *(float *)(v469 + 72);
          if (v16 && (float)(v28 * (float)v16) >= v27)
          {
            v15 = prime;
          }
          else
          {
            v29 = v16 < 3 || (v16 & (v16 - 1)) != 0;
            v30 = v29 | (2 * v16);
            v31 = vcvtps_u32_f32(v27 / v28);
            if (v30 <= v31)
              prime = v31;
            else
              prime = v30;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v16 = *(_QWORD *)(v469 + 48);
            }
            if (prime > v16)
              goto LABEL_54;
            if (prime < v16)
            {
              v32 = vcvtps_u32_f32((float)*(unint64_t *)(v469 + 64) / *(float *)(v469 + 72));
              if (v16 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
              {
                v32 = std::__next_prime(v32);
              }
              else
              {
                v34 = 1 << -(char)__clz(v32 - 1);
                if (v32 >= 2)
                  v32 = v34;
              }
              if (prime <= v32)
                prime = v32;
              if (prime < v16)
LABEL_54:
                sub_20E8D2B3C((uint64_t)v8, prime);
            }
            v16 = *(_QWORD *)(v469 + 48);
            if ((v16 & (v16 - 1)) != 0)
            {
              if (v16 <= v15)
                v15 %= v16;
            }
            else
            {
              v15 = ((_DWORD)v16 - 1) & v15;
            }
          }
          v35 = *v8;
          v36 = *(_QWORD **)(*v8 + 8 * v15);
          if (v36)
          {
            *v23 = *v36;
          }
          else
          {
            *v23 = *v13;
            *v13 = v23;
            *(_QWORD *)(v35 + 8 * v15) = v13;
            if (!*v23)
              goto LABEL_78;
            v37 = *(_QWORD *)(*v23 + 8);
            if ((v16 & (v16 - 1)) != 0)
            {
              if (v37 >= v16)
                v37 %= v16;
            }
            else
            {
              v37 &= v16 - 1;
            }
            v36 = (_QWORD *)(*v8 + 8 * v37);
          }
          *v36 = v23;
LABEL_78:
          ++*(_QWORD *)(v469 + 64);
LABEL_79:
          v38 = *(_QWORD **)&v475[32];
          if (*(_QWORD *)&v475[32])
          {
            do
            {
              v39 = (_QWORD *)*v38;
              operator delete(v38);
              v38 = v39;
            }
            while (v39);
          }
          v40 = *(void **)&v475[16];
          *(_QWORD *)&v475[16] = 0;
          if (v40)
            operator delete(v40);
          ++v12;
        }
        while (v12 != v466);
      }
      if (v459 >= 4)
      {
        sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 80));
        if (v459 != 4)
        {
          sub_20EABFA58((uint64_t)a1, v469 + 88);
          if (v459 >= 6)
            sub_20EABFA58((uint64_t)a1, v469 + 128);
        }
      }
    }
  }
  *(_DWORD *)v475 = 6;
  sub_20E9EDADC(*v6, v475);
  v45 = *(_DWORD *)v475;
  sub_20E9EDA2C(*v6, (_DWORD *)(v469 + 168));
  v46 = *v6;
  if (v45 < 2)
    goto LABEL_222;
  v47 = (double **)(v469 + 176);
  v470[0] = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(v469 + 184) - *(_QWORD *)(v469 + 176)) >> 3);
  sub_20E9EDE6C(v46, v470);
  v48 = v470[0];
  v49 = *(double **)(v469 + 184);
  v50 = *(double **)(v469 + 176);
  v51 = 0xF0F0F0F0F0F0F0F1 * (v49 - v50);
  v52 = v470[0] - v51;
  if (v470[0] <= v51)
  {
    if (v470[0] < v51)
    {
      v49 = &v50[17 * v470[0]];
      *(_QWORD *)(v469 + 184) = v49;
    }
    if (v49 != v50)
      goto LABEL_113;
  }
  else
  {
    v53 = *(_QWORD *)(v469 + 192);
    if (0xF0F0F0F0F0F0F0F1 * ((v53 - (uint64_t)v49) >> 3) >= v52)
    {
      bzero(v49, 136 * ((136 * v52 - 136) / 0x88) + 136);
      v60 = &v49[17 * ((136 * v52 - 136) / 0x88) + 17];
      *(_QWORD *)(v469 + 184) = v60;
    }
    else
    {
      if (v470[0] > 0x1E1E1E1E1E1E1E1uLL)
        sub_20EABADD4();
      v54 = 0xF0F0F0F0F0F0F0F1 * ((v53 - (uint64_t)v50) >> 3);
      if (2 * v54 > v470[0])
        v48 = 2 * v54;
      if (v54 >= 0xF0F0F0F0F0F0F0)
        v55 = 0x1E1E1E1E1E1E1E1;
      else
        v55 = v48;
      if (v55 > 0x1E1E1E1E1E1E1E1)
        sub_20E877A38();
      v56 = (char *)operator new(136 * v55);
      v57 = &v56[8 * (v49 - v50)];
      v58 = &v56[136 * v55];
      v59 = 136 * ((136 * v52 - 136) / 0x88) + 136;
      bzero(v57, v59);
      v60 = (double *)&v57[v59];
      if (v49 != v50)
      {
        do
        {
          *(_OWORD *)(v57 - 136) = *(_OWORD *)(v49 - 17);
          v61 = *(_OWORD *)(v49 - 15);
          v62 = *(_OWORD *)(v49 - 13);
          v63 = *(_OWORD *)(v49 - 11);
          *(_OWORD *)(v57 - 72) = *(_OWORD *)(v49 - 9);
          *(_OWORD *)(v57 - 88) = v63;
          *(_OWORD *)(v57 - 104) = v62;
          *(_OWORD *)(v57 - 120) = v61;
          v64 = *(_OWORD *)(v49 - 7);
          v65 = *(_OWORD *)(v49 - 5);
          v66 = *(_OWORD *)(v49 - 3);
          *((double *)v57 - 1) = *(v49 - 1);
          *(_OWORD *)(v57 - 24) = v66;
          *(_OWORD *)(v57 - 40) = v65;
          *(_OWORD *)(v57 - 56) = v64;
          v57 -= 136;
          v49 -= 17;
        }
        while (v49 != v50);
        v49 = v50;
      }
      *(_QWORD *)(v469 + 176) = v57;
      *(_QWORD *)(v469 + 184) = v60;
      *(_QWORD *)(v469 + 192) = v58;
      if (v49)
      {
        operator delete(v49);
        v60 = *(double **)(v469 + 184);
      }
    }
    v50 = *v47;
    v49 = v60;
    if (v60 != *v47)
    {
LABEL_113:
      v67 = v49;
      do
      {
        sub_20E9EDE6C(*v6, v50);
        v68 = v50 + 1;
        v69 = *v6;
        v50 += 17;
        do
        {
          sub_20E9EFAC4(v69, (uint64_t)v475);
          if (*(_DWORD *)v475 == 2)
          {
            *v68 = (double)*(unint64_t *)&v475[8];
            v70 = *(_QWORD **)&v475[24];
            *(_QWORD *)&v475[24] = 0;
            if (!v70)
              goto LABEL_117;
LABEL_126:
            for (j = (char *)v70[4]; j != (char *)v70[6]; j -= 16)
            {
              v73 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v72 = *((_QWORD *)j - 1);
              v73(v72);
            }
            free(j);
            v74 = (_QWORD *)v70[3];
            if (v74)
            {
              do
              {
                v75 = (_QWORD *)*v74;
                free(v74);
                v74 = v75;
              }
              while (v75);
            }
            free(v70);
            goto LABEL_117;
          }
          if (*(_DWORD *)v475 == 3)
          {
            *v68 = (double)*(uint64_t *)&v475[8];
            v70 = *(_QWORD **)&v475[24];
            *(_QWORD *)&v475[24] = 0;
            if (!v70)
              goto LABEL_117;
            goto LABEL_126;
          }
          if (*(_DWORD *)v475 != 4)
          {
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            v434 = std::bad_cast::bad_cast(exception);
            v434->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v434, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          *v68 = *(double *)&v475[8];
          v70 = *(_QWORD **)&v475[24];
          *(_QWORD *)&v475[24] = 0;
          if (v70)
            goto LABEL_126;
LABEL_117:
          ++v68;
        }
        while (v68 != v50);
      }
      while (v50 != v67);
    }
  }
  LOBYTE(v474) = 0;
  sub_20E9ED7B4(*v6, &v474);
  if ((_BYTE)v474)
  {
    v76 = (_QWORD *)(v469 + 200);
    if (!*(_BYTE *)(v469 + 288))
    {
      *(_QWORD *)(v469 + 280) = 0;
      *(_OWORD *)(v469 + 248) = 0u;
      *(_OWORD *)(v469 + 264) = 0u;
      *(_OWORD *)(v469 + 216) = 0u;
      *(_OWORD *)(v469 + 232) = 0u;
      *(_OWORD *)v76 = 0u;
      *(_BYTE *)(v469 + 288) = 1;
    }
    *(_DWORD *)v475 = 1;
    sub_20E9EDADC(*v6, v475);
    sub_20E9EDE6C(*v6, v76);
    *(_DWORD *)v475 = 1;
    sub_20E9EDADC(*v6, v475);
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 208));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 212));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 216));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 220));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 224));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 228));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 232));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 236));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 240));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 244));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 248));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 252));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 256));
    sub_20E9EDADC(*v6, (_DWORD *)(v469 + 260));
    *(_QWORD *)v475 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v469 + 272) - *(_QWORD *)(v469 + 264)) >> 3);
    sub_20E9EDE6C(*v6, v475);
    v77 = (char **)(v469 + 264);
    v78 = *(_QWORD *)v475;
    v79 = *(char **)(v469 + 272);
    v80 = *(char **)(v469 + 264);
    v81 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v80) >> 3);
    v82 = *(_QWORD *)v475 - v81;
    if (*(_QWORD *)v475 <= v81)
    {
      if (*(_QWORD *)v475 < v81)
      {
        v79 = &v80[40 * *(_QWORD *)v475];
        *(_QWORD *)(v469 + 272) = v79;
      }
      if (v79 != v80)
        goto LABEL_163;
    }
    else
    {
      v83 = *(_QWORD *)(v469 + 280);
      if (0xCCCCCCCCCCCCCCCDLL * ((v83 - (uint64_t)v79) >> 3) >= v82)
      {
        v89 = &v79[40 * v82];
        v95 = 40 * *(_QWORD *)v475 - 8 * ((v79 - v80) >> 3);
        do
        {
          *((_QWORD *)v79 + 3) = 0;
          *((_QWORD *)v79 + 4) = 0;
          *(_QWORD *)v79 = -1;
          *((_QWORD *)v79 + 1) = 0;
          *((_QWORD *)v79 + 2) = 0;
          v79[32] = 0;
          v79 += 40;
          v95 -= 40;
        }
        while (v95);
        *(_QWORD *)(v469 + 272) = v89;
      }
      else
      {
        if (*(_QWORD *)v475 > 0x666666666666666uLL)
          sub_20EABADD4();
        v84 = 0xCCCCCCCCCCCCCCCDLL * ((v83 - (uint64_t)v80) >> 3);
        v85 = 2 * v84;
        if (2 * v84 <= *(_QWORD *)v475)
          v85 = *(_QWORD *)v475;
        if (v84 >= 0x333333333333333)
          v86 = 0x666666666666666;
        else
          v86 = v85;
        if (v86 > 0x666666666666666)
          sub_20E877A38();
        v87 = (char *)operator new(40 * v86);
        v88 = &v87[8 * ((v79 - v80) >> 3)];
        v89 = &v87[40 * v78];
        v90 = 40 * v78 - 8 * ((v79 - v80) >> 3);
        v91 = v88;
        do
        {
          *((_QWORD *)v91 + 3) = 0;
          *((_QWORD *)v91 + 4) = 0;
          *(_QWORD *)v91 = -1;
          *((_QWORD *)v91 + 1) = 0;
          *((_QWORD *)v91 + 2) = 0;
          v91[32] = 0;
          v91 += 40;
          v90 -= 40;
        }
        while (v90);
        if (v79 != v80)
        {
          do
          {
            v92 = *(_OWORD *)(v79 - 40);
            v93 = *(_OWORD *)(v79 - 24);
            *(v88 - 8) = *(v79 - 8);
            *(_OWORD *)(v88 - 24) = v93;
            *(_OWORD *)(v88 - 40) = v92;
            v88 -= 40;
            v79 -= 40;
          }
          while (v79 != v80);
          v79 = v80;
        }
        *(_QWORD *)(v469 + 264) = v88;
        *(_QWORD *)(v469 + 272) = v89;
        *(_QWORD *)(v469 + 280) = &v87[40 * v86];
        if (v79)
        {
          operator delete(v79);
          v89 = *(char **)(v469 + 272);
        }
      }
      v80 = *v77;
      v79 = v89;
      if (v89 != *v77)
      {
        do
        {
LABEL_163:
          LODWORD(v470[0]) = 1;
          sub_20E9EDADC(*v6, v470);
          sub_20E9EDE6C(*v6, v80);
          sub_20E9EDADC(*v6, (_DWORD *)v80 + 2);
          sub_20E9EDADC(*v6, (_DWORD *)v80 + 3);
          sub_20E9EDADC(*v6, (_DWORD *)v80 + 4);
          sub_20E9EDADC(*v6, (_DWORD *)v80 + 5);
          sub_20E9EDADC(*v6, (_DWORD *)v80 + 6);
          sub_20E9EDADC(*v6, (_DWORD *)v80 + 7);
          v96 = v80 + 32;
          sub_20E9EE1A4(*v6, v80 + 32);
          v80 += 40;
        }
        while (v96 + 1 != (_QWORD *)v79);
      }
    }
  }
  else if (*(_BYTE *)(v469 + 288))
  {
    v94 = *(void **)(v469 + 264);
    if (v94)
    {
      *(_QWORD *)(v469 + 272) = v94;
      operator delete(v94);
    }
    *(_BYTE *)(v469 + 288) = 0;
  }
  v46 = *v6;
  if (v45 >= 3)
  {
    v470[0] = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v469 + 304) - *(_QWORD *)(v469 + 296)) >> 4);
    sub_20E9EDE6C(v46, v470);
    v97 = v470[0];
    v98 = (char **)(v469 + 296);
    v99 = *(char **)(v469 + 304);
    v100 = *(char **)(v469 + 296);
    v101 = 0x8E38E38E38E38E39 * ((v99 - v100) >> 4);
    v102 = v470[0] - v101;
    if (v470[0] <= v101)
    {
      if (v470[0] < v101)
      {
        v99 = &v100[144 * v470[0]];
        *(_QWORD *)(v469 + 304) = v99;
      }
      if (v99 != v100)
        goto LABEL_185;
    }
    else
    {
      v103 = *(_QWORD *)(v469 + 312);
      if (0x8E38E38E38E38E39 * ((v103 - (uint64_t)v99) >> 4) >= v102)
      {
        bzero(*(void **)(v469 + 304), 144 * ((144 * v102 - 144) / 0x90) + 144);
        v110 = &v99[144 * ((144 * v102 - 144) / 0x90) + 144];
        *(_QWORD *)(v469 + 304) = v110;
      }
      else
      {
        if (v470[0] > 0x1C71C71C71C71C7uLL)
          sub_20EABADD4();
        v104 = 0x8E38E38E38E38E39 * ((v103 - (uint64_t)v100) >> 4);
        if (2 * v104 > v470[0])
          v97 = 2 * v104;
        if (v104 >= 0xE38E38E38E38E3)
          v105 = 0x1C71C71C71C71C7;
        else
          v105 = v97;
        if (v105 > 0x1C71C71C71C71C7)
          sub_20E877A38();
        v106 = (char *)operator new(144 * v105);
        v107 = &v106[16 * ((v99 - v100) >> 4)];
        v108 = &v106[144 * v105];
        v109 = 144 * ((144 * v102 - 144) / 0x90) + 144;
        bzero(v107, v109);
        v110 = &v107[v109];
        if (v99 != v100)
        {
          do
          {
            *((_OWORD *)v107 - 9) = *((_OWORD *)v99 - 9);
            v111 = *((_OWORD *)v99 - 8);
            v112 = *((_OWORD *)v99 - 7);
            v113 = *((_OWORD *)v99 - 5);
            *((_OWORD *)v107 - 6) = *((_OWORD *)v99 - 6);
            *((_OWORD *)v107 - 5) = v113;
            *((_OWORD *)v107 - 8) = v111;
            *((_OWORD *)v107 - 7) = v112;
            v114 = *((_OWORD *)v99 - 4);
            v115 = *((_OWORD *)v99 - 3);
            v116 = *((_OWORD *)v99 - 1);
            *((_OWORD *)v107 - 2) = *((_OWORD *)v99 - 2);
            *((_OWORD *)v107 - 1) = v116;
            *((_OWORD *)v107 - 4) = v114;
            *((_OWORD *)v107 - 3) = v115;
            v107 -= 144;
            v99 -= 144;
          }
          while (v99 != v100);
          v99 = v100;
        }
        *(_QWORD *)(v469 + 296) = v107;
        *(_QWORD *)(v469 + 304) = v110;
        *(_QWORD *)(v469 + 312) = v108;
        if (v99)
        {
          operator delete(v99);
          v110 = *(char **)(v469 + 304);
        }
      }
      v100 = *v98;
      v99 = v110;
      if (v110 != *v98)
      {
LABEL_185:
        v117 = v99;
        do
        {
          sub_20E9EDE6C(*v6, v100);
          sub_20E9EDADC(*v6, (_DWORD *)v100 + 2);
          v118 = (double *)(v100 + 16);
          v119 = *v6;
          v100 += 144;
          do
          {
            sub_20E9EFAC4(v119, (uint64_t)v475);
            if (*(_DWORD *)v475 == 2)
            {
              *v118 = (double)*(unint64_t *)&v475[8];
              v120 = *(_QWORD **)&v475[24];
              *(_QWORD *)&v475[24] = 0;
              if (!v120)
                goto LABEL_189;
LABEL_198:
              for (k = (char *)v120[4]; k != (char *)v120[6]; k -= 16)
              {
                v123 = (void (*)(uint64_t))*((_QWORD *)k - 2);
                v122 = *((_QWORD *)k - 1);
                v123(v122);
              }
              free(k);
              v124 = (_QWORD *)v120[3];
              if (v124)
              {
                do
                {
                  v125 = (_QWORD *)*v124;
                  free(v124);
                  v124 = v125;
                }
                while (v125);
              }
              free(v120);
              goto LABEL_189;
            }
            if (*(_DWORD *)v475 == 3)
            {
              *v118 = (double)*(uint64_t *)&v475[8];
              v120 = *(_QWORD **)&v475[24];
              *(_QWORD *)&v475[24] = 0;
              if (!v120)
                goto LABEL_189;
              goto LABEL_198;
            }
            if (*(_DWORD *)v475 != 4)
            {
              v435 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v435->__vftable = 0;
              v436 = std::bad_cast::bad_cast(v435);
              v436->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
              __cxa_throw(v436, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
            }
            *v118 = *(double *)&v475[8];
            v120 = *(_QWORD **)&v475[24];
            *(_QWORD *)&v475[24] = 0;
            if (v120)
              goto LABEL_198;
LABEL_189:
            ++v118;
          }
          while (v118 != (double *)v100);
        }
        while (v100 != v117);
      }
    }
    v46 = *v6;
    if (v45 != 3)
    {
      *(_QWORD *)v475 = (uint64_t)(*(_QWORD *)(v469 + 328) - *(_QWORD *)(v469 + 320)) >> 3;
      sub_20E9EDE6C(v46, v475);
      v126 = *(char **)(v469 + 328);
      v127 = *(char **)(v469 + 320);
      v128 = (v126 - v127) >> 3;
      if (*(_QWORD *)v475 <= v128)
      {
        if (*(_QWORD *)v475 < v128)
        {
          v126 = &v127[8 * *(_QWORD *)v475];
          *(_QWORD *)(v469 + 328) = v126;
        }
      }
      else
      {
        sub_20E93DAE8(v469 + 320, *(_QWORD *)v475 - v128);
        v127 = *(char **)(v469 + 320);
        v126 = *(char **)(v469 + 328);
      }
      v46 = *v6;
      v129 = v126 - v127;
      if (v129)
      {
        v130 = 8 * (v129 >> 3);
        do
        {
          sub_20E9EDE6C(v46, v127);
          v127 += 8;
          v130 -= 8;
        }
        while (v130);
        v46 = *v6;
      }
      if (v45 >= 5)
      {
        sub_20E9ED7B4(v46, (_BYTE *)(v469 + 344));
        v46 = *v6;
        if (v45 != 5)
        {
          LOBYTE(v470[0]) = 0;
          sub_20E9ED7B4(v46, v470);
          if (LOBYTE(v470[0]))
          {
            v131 = (_DWORD *)(v469 + 352);
            if (!*(_BYTE *)(v469 + 824))
            {
              *(_QWORD *)(v469 + 816) = 0;
              *(_OWORD *)(v469 + 784) = 0u;
              *(_OWORD *)(v469 + 800) = 0u;
              *(_OWORD *)(v469 + 752) = 0u;
              *(_OWORD *)(v469 + 768) = 0u;
              *(_OWORD *)(v469 + 720) = 0u;
              *(_OWORD *)(v469 + 736) = 0u;
              *(_OWORD *)(v469 + 688) = 0u;
              *(_OWORD *)(v469 + 704) = 0u;
              *(_OWORD *)(v469 + 656) = 0u;
              *(_OWORD *)(v469 + 672) = 0u;
              *(_OWORD *)(v469 + 624) = 0u;
              *(_OWORD *)(v469 + 640) = 0u;
              *(_OWORD *)(v469 + 592) = 0u;
              *(_OWORD *)(v469 + 608) = 0u;
              *(_OWORD *)(v469 + 560) = 0u;
              *(_OWORD *)(v469 + 576) = 0u;
              *(_OWORD *)(v469 + 528) = 0u;
              *(_OWORD *)(v469 + 544) = 0u;
              *(_OWORD *)(v469 + 496) = 0u;
              *(_OWORD *)(v469 + 512) = 0u;
              *(_OWORD *)(v469 + 464) = 0u;
              *(_OWORD *)(v469 + 480) = 0u;
              *(_OWORD *)(v469 + 432) = 0u;
              *(_OWORD *)(v469 + 448) = 0u;
              *(_OWORD *)(v469 + 400) = 0u;
              *(_OWORD *)(v469 + 416) = 0u;
              *(_OWORD *)(v469 + 368) = 0u;
              *(_OWORD *)(v469 + 384) = 0u;
              *(_OWORD *)v131 = 0u;
              *(_BYTE *)(v469 + 824) = 1;
            }
            *(_DWORD *)v475 = 4;
            sub_20E9EDADC(a1[6], v475);
            sub_20E9403B0((uint64_t)v475, (uint64_t)a1, v131, *(unsigned int *)v475);
          }
          else if (*(_BYTE *)(v469 + 824))
          {
            *(_BYTE *)(v469 + 824) = 0;
          }
          v46 = *v6;
        }
      }
    }
  }
LABEL_222:
  *(_DWORD *)v475 = 3;
  sub_20E9EDADC(v46, v475);
  v132 = *(_DWORD *)v475;
  sub_20EABFDDC((uint64_t)a1, v469 + 832);
  sub_20EABFDDC((uint64_t)a1, v469 + 856);
  if (v132 >= 2)
  {
    sub_20EAC02F0((uint64_t)a1, v469 + 880);
    if (v132 != 2)
      sub_20EAC02F0((uint64_t)a1, v469 + 904);
  }
  LOBYTE(v470[0]) = 0;
  sub_20E9ED7B4(*v6, v470);
  if (LOBYTE(v470[0]))
  {
    v133 = (double *)(v469 + 928);
    if (!*(_BYTE *)(v469 + 944))
    {
      *v133 = 0.0;
      *(_QWORD *)(v469 + 936) = 0;
      *(_BYTE *)(v469 + 944) = 1;
    }
    *(_DWORD *)v475 = 1;
    sub_20E9EDADC(*v6, v475);
    sub_20E9EE078(*v6, v133);
    sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 936));
    sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 937));
    sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 938));
    sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 939));
  }
  else if (*(_BYTE *)(v469 + 944))
  {
    *(_BYTE *)(v469 + 944) = 0;
  }
  if (a3 < 2)
    return;
  v475[0] = 0;
  sub_20E9ED7B4(*v6, v475);
  v134 = (void ***)(v469 + 952);
  if (v475[0])
  {
    if (!*(_BYTE *)(v469 + 976))
    {
      *v134 = 0;
      *(_QWORD *)(v469 + 960) = 0;
      *(_QWORD *)(v469 + 968) = 0;
      *(_BYTE *)(v469 + 976) = 1;
    }
    sub_20EAC05DC((uint64_t)a1, (uint64_t)v134);
  }
  else if (*(_BYTE *)(v469 + 976))
  {
    if (*v134)
    {
      sub_20EAB9D1C(v469 + 952, *v134);
      operator delete(*v134);
    }
    *(_BYTE *)(v469 + 976) = 0;
  }
  *(_QWORD *)v475 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v469 + 992) - *(_QWORD *)(v469 + 984)) >> 3);
  sub_20E9EDE6C(*v6, v475);
  v135 = (char **)(v469 + 984);
  v136 = *(_QWORD *)v475;
  v137 = *(char **)(v469 + 992);
  v138 = *(char **)(v469 + 984);
  v139 = 0xAAAAAAAAAAAAAAABLL * ((v137 - v138) >> 3);
  v140 = *(_QWORD *)v475 - v139;
  if (*(_QWORD *)v475 <= v139)
  {
    if (*(_QWORD *)v475 < v139)
    {
      v137 = &v138[24 * *(_QWORD *)v475];
      *(_QWORD *)(v469 + 992) = v137;
    }
    if (v137 == v138)
      goto LABEL_261;
  }
  else
  {
    v141 = *(_QWORD *)(v469 + 1000);
    if (0xAAAAAAAAAAAAAAABLL * ((v141 - (uint64_t)v137) >> 3) >= v140)
    {
      bzero(*(void **)(v469 + 992), 24 * ((24 * v140 - 24) / 0x18) + 24);
      v147 = &v137[24 * ((24 * v140 - 24) / 0x18) + 24];
      *(_QWORD *)(v469 + 992) = v147;
    }
    else
    {
      if (*(_QWORD *)v475 > 0xAAAAAAAAAAAAAAAuLL)
        sub_20EABADD4();
      v142 = 0xAAAAAAAAAAAAAAABLL * ((v141 - (uint64_t)v138) >> 3);
      if (2 * v142 > *(_QWORD *)v475)
        v136 = 2 * v142;
      if (v142 >= 0x555555555555555)
        v143 = 0xAAAAAAAAAAAAAAALL;
      else
        v143 = v136;
      if (v143 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v144 = (char *)operator new(24 * v143);
      v145 = &v144[8 * ((v137 - v138) >> 3)];
      v146 = &v144[24 * v143];
      bzero(v145, 24 * ((24 * v140 - 24) / 0x18) + 24);
      v147 = &v145[24 * ((24 * v140 - 24) / 0x18) + 24];
      if (v137 != v138)
      {
        do
        {
          v148 = *(_OWORD *)(v137 - 24);
          *((_QWORD *)v145 - 1) = *((_QWORD *)v137 - 1);
          *(_OWORD *)(v145 - 24) = v148;
          v145 -= 24;
          v137 -= 24;
        }
        while (v137 != v138);
        v137 = v138;
      }
      *(_QWORD *)(v469 + 984) = v145;
      *(_QWORD *)(v469 + 992) = v147;
      *(_QWORD *)(v469 + 1000) = v146;
      if (v137)
      {
        operator delete(v137);
        v147 = *(char **)(v469 + 992);
      }
    }
    v138 = *v135;
    v137 = v147;
    if (v147 == *v135)
      goto LABEL_261;
  }
  do
  {
    sub_20E9EDADC(*v6, v138);
    sub_20E9EDADC(*v6, (_DWORD *)v138 + 1);
    sub_20E9EDADC(*v6, (_DWORD *)v138 + 2);
    sub_20E9EDADC(*v6, (_DWORD *)v138 + 3);
    v149 = v138 + 16;
    sub_20E9EE078(*v6, (double *)v138 + 2);
    v138 += 24;
  }
  while (v149 + 8 != v137);
LABEL_261:
  if (a3 >= 3)
  {
    *(_DWORD *)v475 = 5;
    sub_20E9EDADC(*v6, v475);
    v150 = *(_DWORD *)v475;
    sub_20E9EE078(*v6, (double *)(v469 + 1008));
    sub_20E9ED7B4(*v6, (_BYTE *)(v469 + 1016));
    if (v150 >= 2)
    {
      *(_DWORD *)v475 = 1;
      sub_20E9EDADC(a1[6], v475);
      sub_20EAC2698((uint64_t)a1, (char **)(v469 + 1024));
      if (v150 != 2)
      {
        *(_DWORD *)v475 = 1;
        sub_20E9EDADC(*v6, v475);
        v151 = *v6;
        sub_20E9EE078(*v6, (double *)(v469 + 1048));
        sub_20E9EE078(v151, (double *)(v469 + 1056));
        sub_20E9EE078(v151, (double *)(v469 + 1064));
        v152 = *v6;
        sub_20E9EE078(*v6, (double *)(v469 + 1072));
        sub_20E9EE078(v152, (double *)(v469 + 1080));
        sub_20E9EE078(v152, (double *)(v469 + 1088));
        v153 = *v6;
        sub_20E9EE078(*v6, (double *)(v469 + 1096));
        sub_20E9EE078(v153, (double *)(v469 + 1104));
        sub_20E9EE078(v153, (double *)(v469 + 1112));
        sub_20E9EE078(v153, (double *)(v469 + 1120));
        sub_20E9EE078(v153, (double *)(v469 + 1128));
        sub_20E9EE078(v153, (double *)(v469 + 1136));
        sub_20E9EE078(v153, (double *)(v469 + 1144));
        sub_20E9EE078(v153, (double *)(v469 + 1152));
        sub_20E9EE078(v153, (double *)(v469 + 1160));
        v154 = *v6;
        sub_20E9EE078(*v6, (double *)(v469 + 1168));
        sub_20E9EE078(v154, (double *)(v469 + 1176));
        sub_20E9EE078(v154, (double *)(v469 + 1184));
        v155 = *v6;
        sub_20E9EE078(*v6, (double *)(v469 + 1192));
        sub_20E9EE078(v155, (double *)(v469 + 1200));
        sub_20E9EE078(v155, (double *)(v469 + 1208));
        if (v150 >= 4)
        {
          sub_20E9EDE6C(*v6, (_QWORD *)(v469 + 1216));
          sub_20E9EDADC(*v6, (_DWORD *)(v469 + 1224));
          if (v150 != 4)
          {
            *(_DWORD *)v475 = 1;
            sub_20E9EDADC(*v6, v475);
            sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 1232));
            v156 = *v6;
            sub_20E9EE078(*v6, (double *)(v469 + 1240));
            sub_20E9EE078(v156, (double *)(v469 + 1248));
            sub_20E9EE078(v156, (double *)(v469 + 1256));
            v157 = *v6;
            sub_20E9EE078(*v6, (double *)(v469 + 1264));
            sub_20E9EE078(v157, (double *)(v469 + 1272));
            sub_20E9EE078(v157, (double *)(v469 + 1280));
            sub_20E9EE078(v157, (double *)(v469 + 1288));
            sub_20E9EE078(v157, (double *)(v469 + 1296));
            sub_20E9EE078(v157, (double *)(v469 + 1304));
            sub_20E9EE078(v157, (double *)(v469 + 1312));
            sub_20E9EE078(v157, (double *)(v469 + 1320));
            sub_20E9EE078(v157, (double *)(v469 + 1328));
            v158 = *v6;
            sub_20E9EE078(*v6, (double *)(v469 + 1336));
            sub_20E9EE078(v158, (double *)(v469 + 1344));
            sub_20E9EE078(v158, (double *)(v469 + 1352));
          }
        }
      }
    }
    if (a3 != 3)
    {
      sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 1361));
      if (a3 >= 5)
      {
        v472 = 0;
        sub_20E9ED7B4(*v6, &v472);
        if (v472)
        {
          if (!*(_BYTE *)(v469 + 1728))
          {
            *(_OWORD *)(v469 + 1696) = 0u;
            *(_OWORD *)(v469 + 1712) = 0u;
            *(_OWORD *)(v469 + 1664) = 0u;
            *(_OWORD *)(v469 + 1680) = 0u;
            *(_OWORD *)(v469 + 1632) = 0u;
            *(_OWORD *)(v469 + 1648) = 0u;
            *(_OWORD *)(v469 + 1600) = 0u;
            *(_OWORD *)(v469 + 1616) = 0u;
            *(_OWORD *)(v469 + 1568) = 0u;
            *(_OWORD *)(v469 + 1584) = 0u;
            *(_OWORD *)(v469 + 1536) = 0u;
            *(_OWORD *)(v469 + 1552) = 0u;
            *(_OWORD *)(v469 + 1504) = 0u;
            *(_OWORD *)(v469 + 1520) = 0u;
            *(_OWORD *)(v469 + 1472) = 0u;
            *(_OWORD *)(v469 + 1488) = 0u;
            *(_OWORD *)(v469 + 1440) = 0u;
            *(_OWORD *)(v469 + 1456) = 0u;
            *(_OWORD *)(v469 + 1408) = 0u;
            *(_OWORD *)(v469 + 1424) = 0u;
            *(_OWORD *)(v469 + 1376) = 0u;
            *(_OWORD *)(v469 + 1392) = 0u;
            *(_BYTE *)(v469 + 1728) = 1;
          }
          *(_DWORD *)v475 = 2;
          sub_20E9EDADC(*v6, v475);
          v159 = *(_DWORD *)v475;
          *(_DWORD *)v475 = 1;
          sub_20E9EDADC(*v6, v475);
          *(_QWORD *)v475 = (uint64_t)(*(_QWORD *)(v469 + 1392) - *(_QWORD *)(v469 + 1384)) >> 3;
          sub_20E9EDE6C(*v6, v475);
          v160 = *(double **)(v469 + 1392);
          v161 = *(double **)(v469 + 1384);
          v162 = v160 - v161;
          if (*(_QWORD *)v475 <= v162)
          {
            if (*(_QWORD *)v475 < v162)
            {
              v160 = &v161[*(_QWORD *)v475];
              *(_QWORD *)(v469 + 1392) = v160;
            }
          }
          else
          {
            sub_20E93D8FC(v469 + 1384, *(_QWORD *)v475 - v162);
            v161 = *(double **)(v469 + 1384);
            v160 = *(double **)(v469 + 1392);
          }
          v168 = (char *)v160 - (char *)v161;
          if (v168)
          {
            v169 = *v6;
            v170 = 8 * (v168 >> 3);
            do
            {
              sub_20E9EE078(v169, v161++);
              v170 -= 8;
            }
            while (v170);
          }
          if (v159 >= 2)
          {
            v473 = 0;
            sub_20E9ED7B4(*v6, &v473);
            v171 = (_OWORD *)(v469 + 1408);
            if (v473)
            {
              if (!*(_BYTE *)(v469 + 1720))
              {
                *(_QWORD *)(v469 + 1712) = 0;
                *(_OWORD *)(v469 + 1680) = 0u;
                *(_OWORD *)(v469 + 1696) = 0u;
                *(_OWORD *)(v469 + 1648) = 0u;
                *(_OWORD *)(v469 + 1664) = 0u;
                *(_OWORD *)(v469 + 1616) = 0u;
                *(_OWORD *)(v469 + 1632) = 0u;
                *(_OWORD *)(v469 + 1584) = 0u;
                *(_OWORD *)(v469 + 1600) = 0u;
                *(_OWORD *)(v469 + 1552) = 0u;
                *(_OWORD *)(v469 + 1568) = 0u;
                *(_OWORD *)(v469 + 1520) = 0u;
                *(_OWORD *)(v469 + 1536) = 0u;
                *(_OWORD *)(v469 + 1488) = 0u;
                *(_OWORD *)(v469 + 1504) = 0u;
                *(_OWORD *)(v469 + 1456) = 0u;
                *(_OWORD *)(v469 + 1472) = 0u;
                *(_OWORD *)(v469 + 1424) = 0u;
                *(_OWORD *)(v469 + 1440) = 0u;
                *v171 = 0u;
                *(_BYTE *)(v469 + 1720) = 1;
              }
              *(_DWORD *)v475 = 1;
              sub_20E9EDADC(*v6, v475);
              v474 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(v469 + 1416) - *(_QWORD *)(v469 + 1408)) >> 4);
              sub_20E9EDE6C(*v6, &v474);
              v172 = v474;
              v173 = *(char **)(v469 + 1416);
              v174 = *(char **)(v469 + 1408);
              v175 = 0xF0F0F0F0F0F0F0F1 * ((v173 - v174) >> 4);
              v176 = v474 - v175;
              if (v474 <= v175)
              {
                if (v474 >= v175)
                {
                  v206 = *(char **)(v469 + 1416);
                }
                else
                {
                  v206 = &v174[272 * v474];
                  while (v173 != v206)
                  {
                    v207 = (void *)*((_QWORD *)v173 - 22);
                    if (v207)
                    {
                      *((_QWORD *)v173 - 21) = v207;
                      operator delete(v207);
                    }
                    v173 -= 272;
                  }
                  *(_QWORD *)(v469 + 1416) = v206;
                }
              }
              else
              {
                v177 = *(_QWORD *)(v469 + 1424);
                if (0xF0F0F0F0F0F0F0F1 * ((v177 - (uint64_t)v173) >> 4) >= v176)
                {
                  bzero(*(void **)(v469 + 1416), 272 * ((272 * v176 - 272) / 0x110) + 272);
                  *(_QWORD *)(v469 + 1416) = &v173[272 * ((272 * v176 - 272) / 0x110) + 272];
                }
                else
                {
                  if (v474 > 0xF0F0F0F0F0F0F0)
                    sub_20EABADD4();
                  v178 = 0xF0F0F0F0F0F0F0F1 * ((v177 - (uint64_t)v174) >> 4);
                  if (2 * v178 > v474)
                    v172 = 2 * v178;
                  if (v178 >= 0x78787878787878)
                    v179 = 0xF0F0F0F0F0F0F0;
                  else
                    v179 = v172;
                  if (v179 > 0xF0F0F0F0F0F0F0)
                    sub_20E877A38();
                  v180 = (char *)operator new(272 * v179);
                  v181 = &v180[16 * ((v173 - v174) >> 4)];
                  v182 = &v180[272 * v179];
                  v183 = 272 * ((272 * v176 - 272) / 0x110) + 272;
                  bzero(v181, v183);
                  v184 = &v181[v183];
                  if (v173 == v174)
                  {
                    *(_QWORD *)(v469 + 1408) = v181;
                    *(_QWORD *)(v469 + 1416) = v184;
                    *(_QWORD *)(v469 + 1424) = v182;
                  }
                  else
                  {
                    v185 = v173 - 272;
                    v186 = (uint64_t)&v180[16 * ((v173 - v174) >> 4) - 272];
                    do
                    {
                      v187 = *((_OWORD *)v185 + 1);
                      *(_OWORD *)v186 = *(_OWORD *)v185;
                      *(_OWORD *)(v186 + 16) = v187;
                      v188 = *((_OWORD *)v185 + 2);
                      v189 = *((_OWORD *)v185 + 3);
                      v190 = *((_OWORD *)v185 + 5);
                      *(_OWORD *)(v186 + 64) = *((_OWORD *)v185 + 4);
                      *(_OWORD *)(v186 + 80) = v190;
                      *(_OWORD *)(v186 + 32) = v188;
                      *(_OWORD *)(v186 + 48) = v189;
                      *(_OWORD *)(v186 + 96) = *((_OWORD *)v185 + 6);
                      *(_QWORD *)(v186 + 112) = *((_QWORD *)v185 + 14);
                      *((_QWORD *)v185 + 13) = 0;
                      *((_QWORD *)v185 + 14) = 0;
                      *((_QWORD *)v185 + 12) = 0;
                      v191 = *(_OWORD *)(v185 + 168);
                      v192 = *(_OWORD *)(v185 + 184);
                      v193 = *(_OWORD *)(v185 + 200);
                      *(_OWORD *)(v186 + 152) = *(_OWORD *)(v185 + 152);
                      *(_OWORD *)(v186 + 200) = v193;
                      *(_OWORD *)(v186 + 184) = v192;
                      *(_OWORD *)(v186 + 168) = v191;
                      v194 = *(_OWORD *)(v185 + 232);
                      v195 = *(_OWORD *)(v185 + 248);
                      v196 = v185[264];
                      *(_OWORD *)(v186 + 216) = *(_OWORD *)(v185 + 216);
                      *(_BYTE *)(v186 + 264) = v196;
                      *(_OWORD *)(v186 + 248) = v195;
                      *(_OWORD *)(v186 + 232) = v194;
                      v197 = *(_OWORD *)(v185 + 120);
                      *(_OWORD *)(v186 + 136) = *(_OWORD *)(v185 + 136);
                      *(_OWORD *)(v186 + 120) = v197;
                      v186 -= 272;
                      v198 = v185 == v174;
                      v185 -= 272;
                    }
                    while (!v198);
                    v173 = *(char **)(v469 + 1408);
                    v199 = *(char **)(v469 + 1416);
                    *(_QWORD *)(v469 + 1408) = v186 + 272;
                    *(_QWORD *)(v469 + 1416) = v184;
                    *(_QWORD *)(v469 + 1424) = v182;
                    while (v199 != v173)
                    {
                      v200 = (void *)*((_QWORD *)v199 - 22);
                      if (v200)
                      {
                        *((_QWORD *)v199 - 21) = v200;
                        operator delete(v200);
                      }
                      v199 -= 272;
                    }
                  }
                  if (v173)
                    operator delete(v173);
                }
                v206 = *(char **)(v469 + 1416);
              }
              v209 = *(_QWORD *)v171;
              if (v206 != (char *)v209)
              {
                v467 = v206;
                while (1)
                {
                  *(_DWORD *)v475 = 1;
                  sub_20E9EDADC(*v6, v475);
                  sub_20E9EE078(*v6, (double *)v209);
                  sub_20E9EDADC(*v6, (_DWORD *)(v209 + 8));
                  sub_20E9EDADC(*v6, (_DWORD *)(v209 + 12));
                  sub_20E9EDADC(*v6, (_DWORD *)(v209 + 16));
                  sub_20E9EDADC(*v6, (_DWORD *)(v209 + 20));
                  v210 = *v6;
                  sub_20E9EE078(*v6, (double *)(v209 + 24));
                  sub_20E9EE078(v210, (double *)(v209 + 32));
                  sub_20E9EE078(v210, (double *)(v209 + 40));
                  sub_20E9EE078(v210, (double *)(v209 + 48));
                  sub_20E9EE078(v210, (double *)(v209 + 56));
                  sub_20E9EE078(v210, (double *)(v209 + 64));
                  sub_20E9EE078(v210, (double *)(v209 + 72));
                  sub_20E9EE078(v210, (double *)(v209 + 80));
                  sub_20E9EE078(v210, (double *)(v209 + 88));
                  v470[0] = *(_QWORD *)(v209 + 104) - *(_QWORD *)(v209 + 96);
                  sub_20E9EDE6C(*v6, v470);
                  v211 = v470[0];
                  v212 = *(char **)(v209 + 104);
                  v213 = *(char **)(v209 + 96);
                  v214 = v212 - v213;
                  v215 = v470[0] - (v212 - v213);
                  if (v470[0] <= (unint64_t)(v212 - v213))
                  {
                    if (v470[0] < v214)
                    {
                      v212 = &v213[v470[0]];
                      *(_QWORD *)(v209 + 104) = &v213[v470[0]];
                    }
                    goto LABEL_372;
                  }
                  v216 = *(_QWORD *)(v209 + 112);
                  if (v216 - (uint64_t)v212 < v215)
                    break;
                  bzero(v212, v470[0] - v214);
                  *(_QWORD *)(v209 + 104) = &v212[v215];
                  v212 += v215;
LABEL_372:
                  v235 = *(char **)(v209 + 96);
                  v236 = *v6;
                  if (v212 != v235)
                  {
                    do
                    {
                      sub_20E9EFAC4(v236, (uint64_t)v475);
                      if (*(_DWORD *)v475 != 2 || *(_QWORD *)&v475[8] >= 0x100uLL)
                      {
                        v455 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                        v455->__vftable = 0;
                        v456 = std::bad_cast::bad_cast(v455);
                        v456->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                        __cxa_throw(v456, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                      }
                      *v235 = v475[8];
                      v237 = *(_QWORD **)&v475[24];
                      *(_QWORD *)&v475[24] = 0;
                      if (v237)
                      {
                        for (m = (char *)v237[4]; m != (char *)v237[6]; m -= 16)
                        {
                          v240 = (void (*)(uint64_t))*((_QWORD *)m - 2);
                          v239 = *((_QWORD *)m - 1);
                          v240(v239);
                        }
                        free(m);
                        v241 = (_QWORD *)v237[3];
                        if (v241)
                        {
                          do
                          {
                            v242 = (_QWORD *)*v241;
                            free(v241);
                            v241 = v242;
                          }
                          while (v242);
                        }
                        free(v237);
                      }
                      ++v235;
                    }
                    while (v235 != v212);
                    v236 = *v6;
                  }
                  sub_20E9EE078(v236, (double *)(v209 + 120));
                  sub_20E9EE078(v236, (double *)(v209 + 128));
                  sub_20E9EE078(v236, (double *)(v209 + 136));
                  sub_20E9EE078(v236, (double *)(v209 + 144));
                  sub_20E9EE078(v236, (double *)(v209 + 152));
                  sub_20E9EE078(v236, (double *)(v209 + 160));
                  sub_20E9EE078(v236, (double *)(v209 + 168));
                  sub_20E9EE078(v236, (double *)(v209 + 176));
                  sub_20E9EE078(v236, (double *)(v209 + 184));
                  v475[0] = 0;
                  sub_20E9ED7B4(*v6, v475);
                  if (v475[0])
                  {
                    v243 = (double *)(v209 + 192);
                    if (!*(_BYTE *)(v209 + 264))
                    {
                      *(_QWORD *)(v209 + 256) = 0;
                      *(_OWORD *)(v209 + 224) = 0u;
                      *(_OWORD *)(v209 + 240) = 0u;
                      *(_OWORD *)v243 = 0u;
                      *(_OWORD *)(v209 + 208) = 0u;
                      *(_BYTE *)(v209 + 264) = 1;
                    }
                    v244 = *v6;
                    sub_20E9EE078(*v6, v243);
                    sub_20E9EE078(v244, (double *)(v209 + 200));
                    sub_20E9EE078(v244, (double *)(v209 + 208));
                    sub_20E9EE078(v244, (double *)(v209 + 216));
                    sub_20E9EE078(v244, (double *)(v209 + 224));
                    sub_20E9EE078(v244, (double *)(v209 + 232));
                    sub_20E9EE078(v244, (double *)(v209 + 240));
                    sub_20E9EE078(v244, (double *)(v209 + 248));
                    sub_20E9EE078(v244, (double *)(v209 + 256));
                  }
                  else if (*(_BYTE *)(v209 + 264))
                  {
                    *(_BYTE *)(v209 + 264) = 0;
                  }
                  v209 += 272;
                  if ((char *)v209 == v467)
                    goto LABEL_392;
                }
                if ((v470[0] & 0x8000000000000000) != 0)
                  sub_20E867F44();
                v217 = v216 - (_QWORD)v213;
                v218 = 2 * v217;
                if (2 * v217 <= v470[0])
                  v218 = v470[0];
                if (v217 >= 0x3FFFFFFFFFFFFFFFLL)
                  v219 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v219 = v218;
                v464 = v219;
                v220 = (char *)operator new(v219);
                v462 = &v220[v214];
                bzero(&v220[v214], v215);
                if (v212 == v213)
                {
                  v213 = v212;
                  v223 = &v220[v214];
                  v222 = v464;
                  goto LABEL_370;
                }
                if (v214 < 8)
                {
                  v221 = &v220[v214];
                  goto LABEL_367;
                }
                v221 = &v220[v214];
                if ((unint64_t)(v213 - v220) >= 0x20)
                {
                  if (v214 < 0x20)
                  {
                    v224 = 0;
                    goto LABEL_362;
                  }
                  v224 = v214 & 0xFFFFFFFFFFFFFFE0;
                  v225 = &v220[v214 - 16];
                  v226 = (__int128 *)(v212 - 16);
                  v227 = v214 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v228 = *v226;
                    *((_OWORD *)v225 - 1) = *(v226 - 1);
                    *(_OWORD *)v225 = v228;
                    v225 -= 32;
                    v226 -= 2;
                    v227 -= 32;
                  }
                  while (v227);
                  if (v214 == v224)
                    goto LABEL_369;
                  if ((v214 & 0x18) != 0)
                  {
LABEL_362:
                    v221 = &v462[-(v214 & 0xFFFFFFFFFFFFFFF8)];
                    v229 = &v220[&v212[-v224] - v213 - 8];
                    v230 = (uint64_t *)&v212[-v224 - 8];
                    v231 = v224 - (v214 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v232 = *v230--;
                      *(_QWORD *)v229 = v232;
                      v229 -= 8;
                      v231 += 8;
                    }
                    while (v231);
                    v212 -= v214 & 0xFFFFFFFFFFFFFFF8;
                    if (v214 == (v214 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_369;
                    goto LABEL_367;
                  }
                  v221 = &v462[-v224];
                  v212 -= v224;
                }
LABEL_367:
                v233 = v221 - 1;
                do
                {
                  v234 = *--v212;
                  *v233-- = v234;
                }
                while (v212 != v213);
LABEL_369:
                v223 = v220;
                v222 = v464;
LABEL_370:
                v212 = &v220[v211];
                *(_QWORD *)(v209 + 96) = v223;
                *(_QWORD *)(v209 + 104) = &v220[v211];
                *(_QWORD *)(v209 + 112) = &v220[v222];
                if (v213)
                {
                  operator delete(v213);
                  v212 = *(char **)(v209 + 104);
                }
                goto LABEL_372;
              }
LABEL_392:
              sub_20E9EDADC(*v6, (_DWORD *)(v469 + 1432));
              v245 = *v6;
              sub_20E9EE078(*v6, (double *)(v469 + 1440));
              sub_20E9EE078(v245, (double *)(v469 + 1448));
              sub_20E9EE078(v245, (double *)(v469 + 1456));
              v246 = *v6;
              sub_20E9EE078(*v6, (double *)(v469 + 1464));
              sub_20E9EE078(v246, (double *)(v469 + 1472));
              sub_20E9EE078(v246, (double *)(v469 + 1480));
              sub_20E9EE078(v246, (double *)(v469 + 1488));
              sub_20E9EE078(v246, (double *)(v469 + 1496));
              sub_20E9EE078(v246, (double *)(v469 + 1504));
              sub_20E9EE078(v246, (double *)(v469 + 1512));
              sub_20E9EE078(v246, (double *)(v469 + 1520));
              sub_20E9EE078(v246, (double *)(v469 + 1528));
              v247 = *v6;
              sub_20E9EE078(*v6, (double *)(v469 + 1536));
              sub_20E9EE078(v247, (double *)(v469 + 1544));
              sub_20E9EE078(v247, (double *)(v469 + 1552));
              sub_20E9EE078(v247, (double *)(v469 + 1560));
              sub_20E9EE078(v247, (double *)(v469 + 1568));
              sub_20E9EE078(v247, (double *)(v469 + 1576));
              sub_20E9EE078(v247, (double *)(v469 + 1584));
              sub_20E9EE078(v247, (double *)(v469 + 1592));
              sub_20E9EE078(v247, (double *)(v469 + 1600));
              v475[0] = 0;
              sub_20E9ED7B4(*v6, v475);
              if (v475[0])
              {
                v248 = (double *)(v469 + 1608);
                if (!*(_BYTE *)(v469 + 1680))
                {
                  *(_QWORD *)(v469 + 1672) = 0;
                  *(_OWORD *)(v469 + 1640) = 0u;
                  *(_OWORD *)(v469 + 1656) = 0u;
                  *(_OWORD *)v248 = 0u;
                  *(_OWORD *)(v469 + 1624) = 0u;
                  *(_BYTE *)(v469 + 1680) = 1;
                }
                v249 = *v6;
                sub_20E9EE078(*v6, v248);
                sub_20E9EE078(v249, (double *)(v469 + 1616));
                sub_20E9EE078(v249, (double *)(v469 + 1624));
                sub_20E9EE078(v249, (double *)(v469 + 1632));
                sub_20E9EE078(v249, (double *)(v469 + 1640));
                sub_20E9EE078(v249, (double *)(v469 + 1648));
                sub_20E9EE078(v249, (double *)(v469 + 1656));
                sub_20E9EE078(v249, (double *)(v469 + 1664));
                sub_20E9EE078(v249, (double *)(v469 + 1672));
              }
              else if (*(_BYTE *)(v469 + 1680))
              {
                *(_BYTE *)(v469 + 1680) = 0;
              }
              v475[0] = 0;
              sub_20E9ED7B4(*v6, v475);
              if (v475[0])
              {
                v250 = (_DWORD *)(v469 + 1688);
                if (!*(_BYTE *)(v469 + 1708))
                {
                  *(_QWORD *)v250 = 0;
                  *(_QWORD *)(v469 + 1696) = 0;
                  *(_DWORD *)(v469 + 1704) = 0;
                  *(_BYTE *)(v469 + 1708) = 1;
                }
                v251 = *v6;
                sub_20E9EDADC(*v6, v250);
                sub_20E9EDADC(v251, (_DWORD *)(v469 + 1692));
                sub_20E9EDADC(v251, (_DWORD *)(v469 + 1696));
                sub_20E9EDADC(v251, (_DWORD *)(v469 + 1700));
                sub_20E9EDADC(v251, (_DWORD *)(v469 + 1704));
              }
              else if (*(_BYTE *)(v469 + 1708))
              {
                *(_BYTE *)(v469 + 1708) = 0;
              }
              sub_20E9ED7B4(*v6, (_BYTE *)(v469 + 1712));
            }
            else if (*(_BYTE *)(v469 + 1720))
            {
              v201 = *(_QWORD *)v171;
              v202 = v469;
              if (*(_QWORD *)v171)
              {
                v203 = *(_QWORD *)(v469 + 1416);
                v204 = *(void **)v171;
                if (v203 != v201)
                {
                  do
                  {
                    v205 = *(void **)(v203 - 176);
                    if (v205)
                    {
                      *(_QWORD *)(v203 - 168) = v205;
                      operator delete(v205);
                    }
                    v203 -= 272;
                  }
                  while (v203 != v201);
                  v204 = *(void **)v171;
                }
                v202 = v469;
                *(_QWORD *)(v469 + 1416) = v201;
                operator delete(v204);
              }
              *(_BYTE *)(v202 + 1720) = 0;
            }
          }
        }
        else if (*(_BYTE *)(v469 + 1728))
        {
          v163 = v469;
          if (*(_BYTE *)(v469 + 1720))
          {
            v164 = *(_QWORD *)(v469 + 1408);
            if (v164)
            {
              v165 = *(_QWORD *)(v469 + 1416);
              v166 = *(void **)(v469 + 1408);
              if (v165 != v164)
              {
                do
                {
                  v167 = *(void **)(v165 - 176);
                  if (v167)
                  {
                    *(_QWORD *)(v165 - 168) = v167;
                    operator delete(v167);
                  }
                  v165 -= 272;
                }
                while (v165 != v164);
                v163 = v469;
                v166 = *(void **)(v469 + 1408);
              }
              *(_QWORD *)(v163 + 1416) = v164;
              operator delete(v166);
            }
          }
          v208 = *(void **)(v163 + 1384);
          if (v208)
          {
            *(_QWORD *)(v163 + 1392) = v208;
            operator delete(v208);
          }
          *(_BYTE *)(v163 + 1728) = 0;
        }
        if (a3 != 5)
        {
          v473 = 0;
          sub_20E9ED7B4(*v6, &v473);
          v252 = (double *)(v469 + 1736);
          if (v473)
          {
            if (!*(_BYTE *)(v469 + 1872))
            {
              *(_OWORD *)v252 = 0u;
              *(_OWORD *)(v469 + 1752) = 0u;
              *(_QWORD *)(v469 + 1744) = v469 + 1752;
              *(_QWORD *)(v469 + 1864) = 0;
              *(_OWORD *)(v469 + 1768) = 0u;
              *(_OWORD *)(v469 + 1784) = 0u;
              *(_OWORD *)(v469 + 1800) = 0u;
              *(_OWORD *)(v469 + 1816) = 0u;
              *(_OWORD *)(v469 + 1832) = 0u;
              *(_OWORD *)(v469 + 1848) = 0u;
              *(_BYTE *)(v469 + 1872) = 1;
            }
            *(_DWORD *)v475 = 1;
            sub_20E9EDADC(a1[6], v475);
            v253 = a1 + 2;
            sub_20E90A71C(a1 + 2);
            sub_20E9EE078(a1[6], v252);
            v470[0] = 0;
            sub_20E9EDE6C(a1[6], v470);
            sub_20EAB9CD4(v469 + 1744, *(_QWORD **)(v469 + 1752));
            *(_QWORD *)(v469 + 1744) = v469 + 1752;
            *(_QWORD *)(v469 + 1760) = 0;
            *(_QWORD *)(v469 + 1752) = 0;
            v457 = (_QWORD **)(v469 + 1744);
            v458 = v470[0];
            if (v470[0])
            {
              for (n = 0; n != v458; ++n)
              {
                v477 = 0u;
                memset(&v475[32], 0, 64);
                memset(v475, 0, 24);
                *(_QWORD *)&v475[24] = &v475[32];
                v476 = 0u;
                *(_QWORD *)&v477 = 0;
                BYTE8(v477) = 3;
                v479 = 0;
                v480 = 0;
                v484 = 0;
                v485 = 0;
                memset(v482, 0, sizeof(v482));
                v481 = 0u;
                v478 = &v479;
                v483 = &v484;
                v487 = 0;
                v488 = 0;
                v486 = &v487;
                v489 = -1;
                *(_QWORD *)&v495 = 0;
                v493 = 0u;
                v494 = 0u;
                v491 = 0u;
                v492 = 0u;
                v490 = 0u;
                v502 = 0;
                v499 = 0u;
                v496 = 0u;
                v497 = 0;
                *((_QWORD *)&v495 + 1) = -1;
                v498 = &v499;
                v500 = 0u;
                memset(v501, 0, sizeof(v501));
                sub_20E9EDE6C(*v6, v475);
                sub_20E9450C0((uint64_t)&v474, a1, (uint64_t)&v475[8]);
                v255 = *(_QWORD *)v475;
                v256 = (uint64_t **)(v469 + 1752);
                while (1)
                {
                  v257 = *v256;
                  v258 = v256;
                  if (!*v256)
                    break;
                  while (1)
                  {
                    v256 = (uint64_t **)v257;
                    v259 = v257[4];
                    if (v259 > *(_QWORD *)v475)
                      break;
                    if (v259 >= *(_QWORD *)v475)
                      goto LABEL_412;
                    v257 = v256[1];
                    if (!v257)
                    {
                      v258 = v256 + 1;
                      goto LABEL_419;
                    }
                  }
                }
LABEL_419:
                v260 = (char *)operator new(0x1E8uLL);
                v261 = (uint64_t *)v260;
                v263 = *(_QWORD *)&v475[24];
                v262 = *(_QWORD *)&v475[32];
                *((_QWORD *)v260 + 8) = *(_QWORD *)&v475[32];
                v264 = v260 + 64;
                *((_QWORD *)v260 + 4) = v255;
                *((_QWORD *)v260 + 7) = v263;
                v265 = *(_QWORD *)&v475[40];
                *((_QWORD *)v260 + 9) = *(_QWORD *)&v475[40];
                if (v265)
                {
                  *(_QWORD *)(v262 + 16) = v264;
                  *(_QWORD *)&v475[24] = &v475[32];
                  *(_OWORD *)&v475[32] = 0uLL;
                }
                else
                {
                  *((_QWORD *)v260 + 7) = v264;
                }
                *((_OWORD *)v260 + 5) = *(_OWORD *)&v475[48];
                *((_QWORD *)v260 + 12) = *(_QWORD *)&v475[64];
                memset(&v475[48], 0, 24);
                *(_OWORD *)(v260 + 104) = *(_OWORD *)&v475[72];
                v266 = v477;
                *((_QWORD *)v260 + 15) = *(_QWORD *)&v475[88];
                memset(&v475[72], 0, 24);
                *((_OWORD *)v260 + 8) = v476;
                *((_QWORD *)v260 + 18) = v266;
                v476 = 0uLL;
                *(_QWORD *)&v477 = 0;
                v260[152] = BYTE8(v477);
                v267 = v479;
                *((_QWORD *)v260 + 20) = v478;
                v268 = v480;
                *((_QWORD *)v260 + 21) = v267;
                *((_QWORD *)v260 + 22) = v268;
                v269 = v260 + 168;
                if (v268)
                {
                  *(_QWORD *)(v267 + 16) = v269;
                  v478 = &v479;
                  v479 = 0;
                  v480 = 0;
                }
                else
                {
                  *((_QWORD *)v260 + 20) = v269;
                }
                *(_OWORD *)(v260 + 184) = v481;
                v270 = v482[3];
                *((_QWORD *)v260 + 25) = v482[0];
                v482[0] = 0;
                v481 = 0uLL;
                *((_OWORD *)v260 + 13) = *(_OWORD *)&v482[1];
                memset(&v482[1], 0, 24);
                v271 = v483;
                v272 = v484;
                *((_QWORD *)v260 + 28) = v270;
                *((_QWORD *)v260 + 29) = v271;
                v273 = v485;
                *((_QWORD *)v260 + 30) = v272;
                *((_QWORD *)v260 + 31) = v273;
                v274 = v260 + 240;
                if (v273)
                {
                  *(_QWORD *)(v272 + 16) = v274;
                  v483 = &v484;
                  v484 = 0;
                  v485 = 0;
                  v275 = v260 + 264;
                  v276 = v487;
                  *((_QWORD *)v260 + 32) = v486;
                  *((_QWORD *)v260 + 33) = v276;
                  v277 = v488;
                  *((_QWORD *)v260 + 34) = v488;
                  if (v277)
                    goto LABEL_427;
                }
                else
                {
                  *((_QWORD *)v260 + 29) = v274;
                  v275 = v260 + 264;
                  v276 = v487;
                  *((_QWORD *)v260 + 32) = v486;
                  *((_QWORD *)v260 + 33) = v276;
                  v278 = v488;
                  *((_QWORD *)v260 + 34) = v488;
                  if (v278)
                  {
LABEL_427:
                    *(_QWORD *)(v276 + 16) = v275;
                    v486 = &v487;
                    v487 = 0;
                    v488 = 0;
                    goto LABEL_430;
                  }
                }
                *((_QWORD *)v260 + 32) = v275;
LABEL_430:
                v279 = v491;
                *((_QWORD *)v260 + 35) = v489;
                *((_OWORD *)v260 + 18) = v490;
                *(_QWORD *)&v491 = 0;
                v490 = 0uLL;
                v280 = *((_QWORD *)&v491 + 1);
                v281 = v497;
                *((_QWORD *)v260 + 38) = v279;
                *((_QWORD *)v260 + 39) = v280;
                v282 = v492;
                v492 = 0uLL;
                *((_QWORD *)&v491 + 1) = 0;
                v283 = v493;
                v284 = v495;
                *((_OWORD *)v260 + 22) = v494;
                *((_OWORD *)v260 + 23) = v284;
                *((_OWORD *)v260 + 20) = v282;
                *((_OWORD *)v260 + 21) = v283;
                *((_OWORD *)v260 + 24) = v496;
                v496 = 0uLL;
                v497 = 0;
                v285 = v498;
                v286 = v499;
                *((_QWORD *)v260 + 50) = v281;
                *((_QWORD *)v260 + 51) = v285;
                v287 = v260 + 416;
                v288 = *((_QWORD *)&v499 + 1);
                *((_QWORD *)v260 + 52) = v286;
                *((_QWORD *)v260 + 53) = v288;
                if (v288)
                {
                  *(_QWORD *)(v286 + 16) = v287;
                  v498 = &v499;
                  v499 = 0uLL;
                }
                else
                {
                  *((_QWORD *)v260 + 51) = v287;
                }
                v289 = v501[0];
                *((_OWORD *)v260 + 27) = v500;
                *((_OWORD *)v260 + 28) = v289;
                *((_OWORD *)v260 + 29) = v501[1];
                *((_DWORD *)v260 + 120) = v502;
                *(_QWORD *)v260 = 0;
                *((_QWORD *)v260 + 1) = 0;
                *((_QWORD *)v260 + 2) = v256;
                *v258 = (uint64_t *)v260;
                v290 = (_QWORD *)**v457;
                if (v290)
                {
                  *v457 = v290;
                  v261 = *v258;
                }
                sub_20E868578(*(uint64_t **)(v469 + 1752), v261);
                ++*(_QWORD *)(v469 + 1760);
LABEL_412:
                sub_20E94FADC((uint64_t)&v475[8]);
              }
            }
            sub_20E9EDE6C(*v6, (_QWORD *)(v469 + 1768));
            *(_QWORD *)v475 = (uint64_t)(*(_QWORD *)(v469 + 1784) - *(_QWORD *)(v469 + 1776)) >> 4;
            sub_20E9EDE6C(*v6, v475);
            v291 = *(_QWORD *)v475;
            v292 = *(char **)(v469 + 1784);
            v293 = *(char **)(v469 + 1776);
            v294 = (v292 - v293) >> 4;
            v295 = *(_QWORD *)v475 - v294;
            if (*(_QWORD *)v475 <= v294)
            {
              if (*(_QWORD *)v475 < v294)
              {
                v292 = &v293[16 * *(_QWORD *)v475];
                *(_QWORD *)(v469 + 1784) = v292;
              }
            }
            else
            {
              v296 = *(_QWORD *)(v469 + 1792);
              if (v295 <= (v296 - (uint64_t)v292) >> 4)
              {
                bzero(*(void **)(v469 + 1784), 16 * v295);
                v303 = &v292[16 * v295];
                *(_QWORD *)(v469 + 1784) = v303;
              }
              else
              {
                if (*(_QWORD *)v475 >> 60)
                  sub_20E9DEF2C();
                v297 = v296 - (_QWORD)v293;
                if ((unint64_t)(v297 >> 3) > *(_QWORD *)v475)
                  v291 = v297 >> 3;
                if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFF0)
                  v298 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v298 = v291;
                if (v298 >> 60)
                  sub_20E877A38();
                v299 = (char *)operator new(16 * v298);
                v300 = &v299[16 * v294];
                v301 = 16 * v295;
                v302 = &v299[16 * v298];
                bzero(v300, v301);
                v303 = &v300[v301];
                if (v292 != v293)
                {
                  do
                  {
                    v304 = *((_QWORD *)v292 - 2);
                    v292 -= 16;
                    v305 = *((_DWORD *)v292 + 2);
                    *((_QWORD *)v300 - 2) = v304;
                    v300 -= 16;
                    *((_DWORD *)v300 + 2) = v305;
                  }
                  while (v292 != v293);
                  v292 = v293;
                }
                *(_QWORD *)(v469 + 1776) = v300;
                *(_QWORD *)(v469 + 1784) = v303;
                *(_QWORD *)(v469 + 1792) = v302;
                if (v292)
                {
                  operator delete(v292);
                  v303 = *(char **)(v469 + 1784);
                }
              }
              v293 = *(char **)(v469 + 1776);
              v292 = v303;
            }
            if (v292 != v293)
            {
              do
              {
                sub_20E9EDE6C(*v6, v293);
                v306 = v293 + 8;
                sub_20E9EDADC(*v6, (_DWORD *)v293 + 2);
                v293 += 16;
              }
              while (v306 + 2 != (_DWORD *)v292);
            }
            sub_20EAC74D4((uint64_t)a1, (char **)(v469 + 1800));
            *(_QWORD *)v475 = (uint64_t)(*(_QWORD *)(v469 + 1832) - *(_QWORD *)(v469 + 1824)) >> 3;
            sub_20E9EDE6C(a1[6], v475);
            v307 = *(char **)(v469 + 1832);
            v308 = *(char **)(v469 + 1824);
            v309 = (v307 - v308) >> 3;
            if (*(_QWORD *)v475 <= v309)
            {
              if (*(_QWORD *)v475 < v309)
              {
                v307 = &v308[8 * *(_QWORD *)v475];
                *(_QWORD *)(v469 + 1832) = v307;
              }
            }
            else
            {
              sub_20E93DAE8(v469 + 1824, *(_QWORD *)v475 - v309);
              v308 = *(char **)(v469 + 1824);
              v307 = *(char **)(v469 + 1832);
            }
            v310 = *v6;
            v311 = v307 - v308;
            if (v311)
            {
              v312 = 8 * (v311 >> 3);
              do
              {
                sub_20E9EDE6C(v310, v308);
                v308 += 8;
                v312 -= 8;
              }
              while (v312);
              v310 = *v6;
            }
            v474 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v469 + 1856) - *(_QWORD *)(v469 + 1848)) >> 3);
            sub_20E9EDE6C(v310, &v474);
            v313 = (_QWORD **)(v469 + 1848);
            v314 = v474;
            v315 = *(_QWORD **)(v469 + 1856);
            v316 = *(_QWORD **)(v469 + 1848);
            v317 = 0xAAAAAAAAAAAAAAABLL * (v315 - v316);
            v318 = v474 - v317;
            if (v474 <= v317)
            {
              if (v474 >= v317)
              {
                v332 = *(_QWORD **)(v469 + 1856);
              }
              else
              {
                v332 = &v316[3 * v474];
                if (v315 != v332)
                {
                  v333 = *(_QWORD **)(v469 + 1856);
                  do
                  {
                    v335 = (void *)*(v333 - 3);
                    v333 -= 3;
                    v334 = v335;
                    if (v335)
                    {
                      *(v315 - 2) = v334;
                      operator delete(v334);
                    }
                    v315 = v333;
                  }
                  while (v333 != v332);
                }
                *(_QWORD *)(v469 + 1856) = v332;
              }
            }
            else
            {
              v319 = *(_QWORD *)(v469 + 1864);
              if (0xAAAAAAAAAAAAAAABLL * ((v319 - (uint64_t)v315) >> 3) >= v318)
              {
                v336 = 24 * ((24 * v318 - 24) / 0x18) + 24;
                bzero(*(void **)(v469 + 1856), v336);
                *(_QWORD *)(v469 + 1856) = (char *)v315 + v336;
              }
              else
              {
                if (v474 > 0xAAAAAAAAAAAAAAALL)
                  sub_20EABADD4();
                v320 = 0xAAAAAAAAAAAAAAABLL * ((v319 - (uint64_t)v316) >> 3);
                if (2 * v320 > v474)
                  v314 = 2 * v320;
                if (v320 >= 0x555555555555555)
                  v321 = 0xAAAAAAAAAAAAAAALL;
                else
                  v321 = v314;
                if (v321 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v322 = (char *)operator new(24 * v321);
                v323 = &v322[8 * (v315 - v316)];
                v324 = &v322[24 * v321];
                v325 = 24 * ((24 * v318 - 24) / 0x18) + 24;
                bzero(v323, v325);
                v326 = &v323[v325];
                if (v315 == v316)
                {
                  *(_QWORD *)(v469 + 1848) = v323;
                  *(_QWORD *)(v469 + 1856) = v326;
                  *(_QWORD *)(v469 + 1864) = v324;
                }
                else
                {
                  do
                  {
                    v327 = *(_OWORD *)(v315 - 3);
                    v315 -= 3;
                    *(_OWORD *)(v323 - 24) = v327;
                    v323 -= 24;
                    *((_QWORD *)v323 + 2) = v315[2];
                    *v315 = 0;
                    v315[1] = 0;
                    v315[2] = 0;
                  }
                  while (v315 != v316);
                  v315 = *(_QWORD **)(v469 + 1848);
                  v328 = *(_QWORD **)(v469 + 1856);
                  *(_QWORD *)(v469 + 1848) = v323;
                  *(_QWORD *)(v469 + 1856) = v326;
                  *(_QWORD *)(v469 + 1864) = v324;
                  if (v328 != v315)
                  {
                    v329 = v328;
                    do
                    {
                      v331 = (void *)*(v329 - 3);
                      v329 -= 3;
                      v330 = v331;
                      if (v331)
                      {
                        *(v328 - 2) = v330;
                        operator delete(v330);
                      }
                      v328 = v329;
                    }
                    while (v329 != v315);
                  }
                }
                if (v315)
                  operator delete(v315);
              }
              v332 = *(_QWORD **)(v469 + 1856);
            }
            v337 = *v313;
            if (v332 != *v313)
            {
              v465 = (uint64_t **)(a1 + 3);
              v460 = v332;
              while (1)
              {
                v338 = (void **)(v337 + 1);
                v463 = v337;
                v470[0] = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v337[1] - *v337) >> 3);
                sub_20E9EDE6C(*v6, v470);
                v339 = v470[0];
                v340 = (char *)*v338;
                v341 = (char **)v463;
                v342 = (char *)*v463;
                v343 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v340[-*v463] >> 3);
                v344 = v470[0] - v343;
                if (v470[0] <= v343)
                {
                  if (v470[0] < v343)
                  {
                    v340 = &v342[56 * v470[0]];
                    v463[1] = v340;
                  }
                }
                else
                {
                  v345 = v463[2];
                  if (0x6DB6DB6DB6DB6DB7 * ((v345 - (uint64_t)v340) >> 3) >= v344)
                  {
                    v357 = 56 * ((56 * v344 - 56) / 0x38) + 56;
                    bzero(v340, v357);
                    v356 = &v340[v357];
                    v463[1] = &v340[v357];
                  }
                  else
                  {
                    if (v470[0] > 0x492492492492492uLL)
                      sub_20EABADD4();
                    v346 = 0x6DB6DB6DB6DB6DB7 * ((v345 - (uint64_t)v342) >> 3);
                    if (2 * v346 > v470[0])
                      v339 = 2 * v346;
                    if (v346 >= 0x249249249249249)
                      v347 = 0x492492492492492;
                    else
                      v347 = v339;
                    if (v347 > 0x492492492492492)
                      sub_20E877A38();
                    v348 = (char *)operator new(56 * v347);
                    v349 = &v348[56 * v343];
                    v350 = 56 * ((56 * v344 - 56) / 0x38) + 56;
                    bzero(v349, v350);
                    v351 = v349;
                    if (v340 != v342)
                    {
                      do
                      {
                        v352 = *(_OWORD *)(v340 - 56);
                        v353 = *(_OWORD *)(v340 - 40);
                        v354 = *(_OWORD *)(v340 - 24);
                        *((_QWORD *)v351 - 1) = *((_QWORD *)v340 - 1);
                        *(_OWORD *)(v351 - 24) = v354;
                        *(_OWORD *)(v351 - 40) = v353;
                        *(_OWORD *)(v351 - 56) = v352;
                        v351 -= 56;
                        v340 -= 56;
                      }
                      while (v340 != v342);
                      v340 = v342;
                    }
                    v355 = &v348[56 * v347];
                    v356 = &v349[v350];
                    v341 = (char **)v463;
                    *v463 = v351;
                    v463[1] = &v349[v350];
                    v463[2] = v355;
                    if (v340)
                    {
                      operator delete(v340);
                      v356 = (char *)v463[1];
                    }
                  }
                  v342 = *v341;
                  v340 = v356;
                }
                if (v340 != v342)
                  break;
LABEL_496:
                v337 = v463 + 3;
                if (v463 + 3 == v460)
                  goto LABEL_612;
              }
              v468 = v340;
              while (1)
              {
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2)
                {
                  v439 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v439->__vftable = 0;
                  v440 = std::bad_cast::bad_cast(v439);
                  v440->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v440, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                *(_QWORD *)v342 = *(_QWORD *)&v475[8];
                v358 = *(_QWORD **)&v475[24];
                *(_QWORD *)&v475[24] = 0;
                if (v358)
                {
                  for (ii = (char *)v358[4]; ii != (char *)v358[6]; ii -= 16)
                  {
                    v361 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
                    v360 = *((_QWORD *)ii - 1);
                    v361(v360);
                  }
                  free(ii);
                  v362 = (_QWORD *)v358[3];
                  if (v362)
                  {
                    do
                    {
                      v363 = (_QWORD *)*v362;
                      free(v362);
                      v362 = v363;
                    }
                    while (v363);
                  }
                  free(v358);
                }
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2 || HIDWORD(*(_QWORD *)&v475[8]))
                {
                  v437 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v437->__vftable = 0;
                  v438 = std::bad_cast::bad_cast(v437);
                  v438->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v438, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                *((_DWORD *)v342 + 2) = *(_DWORD *)&v475[8];
                v364 = *(_QWORD **)&v475[24];
                *(_QWORD *)&v475[24] = 0;
                if (v364)
                {
                  for (jj = (char *)v364[4]; jj != (char *)v364[6]; jj -= 16)
                  {
                    v367 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
                    v366 = *((_QWORD *)jj - 1);
                    v367(v366);
                  }
                  free(jj);
                  v368 = (_QWORD *)v364[3];
                  if (v368)
                  {
                    do
                    {
                      v369 = (_QWORD *)*v368;
                      free(v368);
                      v368 = v369;
                    }
                    while (v369);
                  }
                  free(v364);
                }
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2 || HIDWORD(*(_QWORD *)&v475[8]))
                {
                  v441 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v441->__vftable = 0;
                  v442 = std::bad_cast::bad_cast(v441);
                  v442->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v442, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                *((_DWORD *)v342 + 4) = *(_DWORD *)&v475[8];
                v370 = *(_QWORD **)&v475[24];
                *(_QWORD *)&v475[24] = 0;
                if (v370)
                {
                  for (kk = (char *)v370[4]; kk != (char *)v370[6]; kk -= 16)
                  {
                    v373 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
                    v372 = *((_QWORD *)kk - 1);
                    v373(v372);
                  }
                  free(kk);
                  v374 = (_QWORD *)v370[3];
                  if (v374)
                  {
                    do
                    {
                      v375 = (_QWORD *)*v374;
                      free(v374);
                      v374 = v375;
                    }
                    while (v375);
                  }
                  free(v370);
                }
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2 || HIDWORD(*(_QWORD *)&v475[8]))
                {
                  v443 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v443->__vftable = 0;
                  v444 = std::bad_cast::bad_cast(v443);
                  v444->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v444, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                v376 = *(_QWORD **)&v475[24];
                *(_QWORD *)&v475[24] = 0;
                if (v376)
                {
                  for (mm = (char *)v376[4]; mm != (char *)v376[6]; mm -= 16)
                  {
                    v379 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
                    v378 = *((_QWORD *)mm - 1);
                    v379(v378);
                  }
                  free(mm);
                  v380 = (_QWORD *)v376[3];
                  if (v380)
                  {
                    do
                    {
                      v381 = (_QWORD *)*v380;
                      free(v380);
                      v380 = v381;
                    }
                    while (v381);
                  }
                  free(v376);
                }
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2)
                {
                  v447 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v447->__vftable = 0;
                  v448 = std::bad_cast::bad_cast(v447);
                  v448->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v448, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                v382 = *(_QWORD *)&v475[8];
                v383 = *(_QWORD **)&v475[24];
                *(_QWORD *)&v475[24] = 0;
                if (v383)
                {
                  for (nn = (char *)v383[4]; nn != (char *)v383[6]; nn -= 16)
                  {
                    v386 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
                    v385 = *((_QWORD *)nn - 1);
                    v386(v385);
                  }
                  free(nn);
                  v387 = (_QWORD *)v383[3];
                  if (v387)
                  {
                    do
                    {
                      v388 = (_QWORD *)*v387;
                      free(v387);
                      v387 = v388;
                    }
                    while (v388);
                  }
                  free(v383);
                }
                v389 = (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2);
                v390 = v389;
                v392 = (uint64_t *)a1[4];
                v391 = a1[5];
                if ((unint64_t)v392 >= v391)
                {
                  v394 = *v465;
                  v395 = ((char *)v392 - (char *)*v465) >> 4;
                  v396 = v395 + 1;
                  if ((unint64_t)(v395 + 1) >> 60)
                    sub_20E90A8BC();
                  v397 = v391 - (_QWORD)v394;
                  if (v397 >> 3 > v396)
                    v396 = v397 >> 3;
                  if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFF0)
                    v398 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v398 = v396;
                  if (v398)
                  {
                    if (v398 >> 60)
                      sub_20E877A38();
                    v399 = (char *)operator new(16 * v398);
                    v400 = (uint64_t *)&v399[16 * v395];
                    *v400 = v390;
                    v400[1] = v382;
                    v401 = (uint64_t)v400;
                    if (v392 != v394)
                    {
                      do
                      {
LABEL_609:
                        *(_OWORD *)(v401 - 16) = *((_OWORD *)v392 - 1);
                        v401 -= 16;
                        v392 -= 2;
                      }
                      while (v392 != v394);
                      v392 = *v465;
                      v393 = v400 + 2;
                      a1[3] = v401;
                      a1[4] = v400 + 2;
                      a1[5] = &v399[16 * v398];
                      if (!v392)
                        goto LABEL_574;
LABEL_573:
                      operator delete(v392);
                      goto LABEL_574;
                    }
                  }
                  else
                  {
                    v399 = 0;
                    v400 = (uint64_t *)(16 * v395);
                    *v400 = v390;
                    v400[1] = v382;
                    v401 = 16 * v395;
                    if (v392 != v394)
                      goto LABEL_609;
                  }
                  v393 = v400 + 2;
                  a1[3] = v401;
                  a1[4] = v400 + 2;
                  a1[5] = &v399[16 * v398];
                  if (v392)
                    goto LABEL_573;
                }
                else
                {
                  *v392 = v389;
                  v392[1] = v382;
                  v393 = v392 + 2;
                }
LABEL_574:
                a1[4] = v393;
                sub_20E9EFAC4(a1[6], (uint64_t)v475);
                if (*(_DWORD *)v475 != 2)
                {
                  v445 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v445->__vftable = 0;
                  v446 = std::bad_cast::bad_cast(v445);
                  v446->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v446, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                *((_QWORD *)v342 + 3) = *(_QWORD *)&v475[8];
                v402 = *(_QWORD **)&v475[24];
                *(_QWORD *)&v475[24] = 0;
                if (v402)
                {
                  for (i1 = (char *)v402[4]; i1 != (char *)v402[6]; i1 -= 16)
                  {
                    v405 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
                    v404 = *((_QWORD *)i1 - 1);
                    v405(v404);
                  }
                  free(i1);
                  v406 = (_QWORD *)v402[3];
                  if (v406)
                  {
                    do
                    {
                      v407 = (_QWORD *)*v406;
                      free(v406);
                      v406 = v407;
                    }
                    while (v407);
                  }
                  free(v402);
                }
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2)
                {
                  v449 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v449->__vftable = 0;
                  v450 = std::bad_cast::bad_cast(v449);
                  v450->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v450, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                v408 = *(_QWORD **)&v475[24];
                *((_QWORD *)v342 + 4) = *(_QWORD *)&v475[8];
                *(_QWORD *)&v475[24] = 0;
                if (v408)
                {
                  for (i2 = (char *)v408[4]; i2 != (char *)v408[6]; i2 -= 16)
                  {
                    v411 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
                    v410 = *((_QWORD *)i2 - 1);
                    v411(v410);
                  }
                  free(i2);
                  v412 = (_QWORD *)v408[3];
                  if (v412)
                  {
                    do
                    {
                      v413 = (_QWORD *)*v412;
                      free(v412);
                      v412 = v413;
                    }
                    while (v413);
                  }
                  free(v408);
                }
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2)
                {
                  v451 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v451->__vftable = 0;
                  v452 = std::bad_cast::bad_cast(v451);
                  v452->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v452, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                v414 = *(_QWORD **)&v475[24];
                *((_QWORD *)v342 + 5) = *(_QWORD *)&v475[8];
                *(_QWORD *)&v475[24] = 0;
                if (v414)
                {
                  for (i3 = (char *)v414[4]; i3 != (char *)v414[6]; i3 -= 16)
                  {
                    v417 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
                    v416 = *((_QWORD *)i3 - 1);
                    v417(v416);
                  }
                  free(i3);
                  v418 = (_QWORD *)v414[3];
                  if (v418)
                  {
                    do
                    {
                      v419 = (_QWORD *)*v418;
                      free(v418);
                      v418 = v419;
                    }
                    while (v419);
                  }
                  free(v414);
                }
                sub_20E9EFAC4(*v6, (uint64_t)v475);
                if (*(_DWORD *)v475 != 2)
                {
                  v453 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v453->__vftable = 0;
                  v454 = std::bad_cast::bad_cast(v453);
                  v454->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v454, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                }
                v420 = *(_QWORD **)&v475[24];
                *((_QWORD *)v342 + 6) = *(_QWORD *)&v475[8];
                *(_QWORD *)&v475[24] = 0;
                if (v420)
                {
                  for (i4 = (char *)v420[4]; i4 != (char *)v420[6]; i4 -= 16)
                  {
                    v423 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
                    v422 = *((_QWORD *)i4 - 1);
                    v423(v422);
                  }
                  free(i4);
                  v424 = (_QWORD *)v420[3];
                  if (v424)
                  {
                    do
                    {
                      v425 = (_QWORD *)*v424;
                      free(v424);
                      v424 = v425;
                    }
                    while (v425);
                  }
                  free(v420);
                }
                v426 = a1[4];
                v427 = *(_QWORD *)(v426 - 16)
                     - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
                     + *(_QWORD *)(v426 - 8);
                if (v427)
                  (*(void (**)(_QWORD *, uint64_t))(*v253 + 40))(a1 + 2, v427);
                a1[4] -= 16;
                v342 += 56;
                if (v342 == v468)
                  goto LABEL_496;
              }
            }
LABEL_612:
            v428 = a1[4];
            v429 = *(_QWORD *)(v428 - 16)
                 - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
                 + *(_QWORD *)(v428 - 8);
            if (v429)
              (*(void (**)(_QWORD *, uint64_t))(*v253 + 40))(a1 + 2, v429);
            a1[4] -= 16;
          }
          else if (*(_BYTE *)(v469 + 1872))
          {
            sub_20EAB9ABC(v469 + 1736);
            *(_BYTE *)(v469 + 1872) = 0;
          }
          if (a3 >= 7)
          {
            *(_DWORD *)v475 = 1;
            sub_20E9EDADC(a1[6], v475);
            sub_20EACA190((uint64_t)a1, (char **)(v469 + 1880));
            if (a3 != 7)
            {
              *(_DWORD *)v475 = 6;
              sub_20E9EDADC(a1[6], v475);
              sub_20EACA3F0((uint64_t)a1, v469 + 1904, *(unsigned int *)v475);
              if (a3 >= 9)
              {
                sub_20EACA4A0((uint64_t)a1, v469 + 1928);
                if (a3 != 9)
                {
                  sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 1976));
                  if (a3 >= 0xB)
                  {
                    sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 1372));
                    if (a3 != 11)
                    {
                      sub_20E9EDA2C(*v6, (_DWORD *)(v469 + 1368));
                      if (a3 >= 0xD)
                      {
                        sub_20E9EDE6C(*v6, (_QWORD *)(v469 + 1984));
                        if (a3 != 13)
                        {
                          *(_QWORD *)v475 = (uint64_t)(*(_QWORD *)(v469 + 2000) - *(_QWORD *)(v469 + 1992)) >> 5;
                          sub_20E9EDE6C(*v6, v475);
                          v430 = *(_QWORD *)(v469 + 2000);
                          v431 = *(_QWORD *)(v469 + 1992);
                          v432 = (v430 - v431) >> 5;
                          if (*(_QWORD *)v475 <= v432)
                          {
                            if (*(_QWORD *)v475 < v432)
                            {
                              v430 = v431 + 32 * *(_QWORD *)v475;
                              *(_QWORD *)(v469 + 2000) = v430;
                            }
                          }
                          else
                          {
                            sub_20EACA628((char **)(v469 + 1992), *(_QWORD *)v475 - v432);
                            v431 = *(_QWORD *)(v469 + 1992);
                            v430 = *(_QWORD *)(v469 + 2000);
                          }
                          sub_20EACA588((uint64_t)a1, (v430 - v431) >> 5, v431);
                          if (a3 >= 0xF)
                          {
                            v475[0] = 0;
                            sub_20E9ED7B4(*v6, v475);
                            *(_BYTE *)(v469 + 1977) = v475[0];
                            if (a3 != 15)
                            {
                              sub_20EACA74C((uint64_t)a1, v469 + 2016);
                              if (a3 >= 0x11)
                                sub_20E9EE1A4(*v6, (_BYTE *)(v469 + 1978));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_20EABF588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20E94FADC(a26);
  _Unwind_Resume(a1);
}

void sub_20EABF59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E96A09C((uint64_t)&a28);
  sub_20EABFA10((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20EABF5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,_QWORD *a36)
{
  char *i;
  uint64_t v38;
  void (*v39)(uint64_t);
  _QWORD *v40;
  _QWORD *v41;

  if (a36)
  {
    for (i = (char *)a36[4]; i != (char *)a36[6]; i -= 16)
    {
      v39 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v38 = *((_QWORD *)i - 1);
      v39(v38);
    }
    free(i);
    v40 = (_QWORD *)a36[3];
    if (v40)
    {
      do
      {
        v41 = (_QWORD *)*v40;
        free(v40);
        v40 = v41;
      }
      while (v41);
    }
    free(a36);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EABFA10(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_20EABFA58(uint64_t a1, uint64_t a2)
{
  size_t prime;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = 0;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v33);
  if (*(_QWORD *)(a2 + 24))
  {
    v5 = *(_QWORD **)(a2 + 16);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(a2 + 16) = 0;
    v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)a2 + 8 * i) = 0;
    }
    *(_QWORD *)(a2 + 24) = 0;
  }
  v9 = v33;
  if (v33)
  {
    v10 = 0;
    v11 = (_QWORD *)(a2 + 16);
    do
    {
      v32 = 0;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v32);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)&v32 + 1);
      v12 = v32;
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = v32;
          if (v13 <= v32)
            prime = v32 % v13;
        }
        else
        {
          prime = ((_DWORD)v13 - 1) & v32;
        }
        v15 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * prime);
        if (v15)
        {
          v16 = *v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v32)
                {
                  if (*((_DWORD *)v16 + 4) == (_DWORD)v32)
                    goto LABEL_68;
                }
                else if ((v18 & (v13 - 1)) != prime)
                {
                  goto LABEL_30;
                }
                v16 = (uint64_t *)*v16;
                if (!v16)
                  goto LABEL_30;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v32)
              {
                if (*((_DWORD *)v16 + 4) == (_DWORD)v32)
                  goto LABEL_68;
              }
              else
              {
                if (v17 >= v13)
                  v17 %= v13;
                if (v17 != prime)
                  break;
              }
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_30:
      v31 = v32;
      v19 = operator new(0x18uLL);
      *v19 = 0;
      v19[1] = v12;
      v19[2] = v31;
      v20 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
      v21 = *(float *)(a2 + 32);
      if (v13 && (float)(v21 * (float)v13) >= v20)
      {
        v12 = prime;
      }
      else
      {
        v22 = (v13 & (v13 - 1)) != 0;
        if (v13 < 3)
          v22 = 1;
        v23 = v22 | (2 * v13);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          prime = v24;
        else
          prime = v23;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v13 = *(_QWORD *)(a2 + 8);
        }
        if (prime > v13)
          goto LABEL_53;
        if (prime < v13)
        {
          v25 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
          if (v13 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
          {
            v25 = std::__next_prime(v25);
          }
          else
          {
            v27 = 1 << -(char)__clz(v25 - 1);
            if (v25 >= 2)
              v25 = v27;
          }
          if (prime <= v25)
            prime = v25;
          if (prime < v13)
LABEL_53:
            sub_20E8D2B3C(a2, prime);
        }
        v13 = *(_QWORD *)(a2 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v13 <= v12)
            v12 %= v13;
        }
        else
        {
          v12 = ((_DWORD)v13 - 1) & v12;
        }
      }
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v12);
      if (v29)
      {
        *v19 = *v29;
      }
      else
      {
        *v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v28 + 8 * v12) = v11;
        if (!*v19)
          goto LABEL_67;
        v30 = *(_QWORD *)(*v19 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v30 >= v13)
            v30 %= v13;
        }
        else
        {
          v30 &= v13 - 1;
        }
        v29 = (_QWORD *)(*(_QWORD *)a2 + 8 * v30);
      }
      *v29 = v19;
LABEL_67:
      ++*(_QWORD *)(a2 + 24);
LABEL_68:
      ++v10;
    }
    while (v10 != v9);
  }
}

void sub_20EABFDC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EABFDDC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void **v27;
  size_t v28;
  char *v29;
  void **v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void **v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  void **v41;
  unint64_t v42;
  char v43;
  unsigned int v44;

  v42 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v42);
  v4 = v42;
  v6 = *(void ***)a2;
  v5 = *(void ***)(a2 + 8);
  v7 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v5 - *(_QWORD *)a2) >> 4);
  v8 = v42 - v7;
  if (v42 <= v7)
  {
    if (v42 >= v7)
    {
      v30 = *(void ***)a2;
      v31 = (uint64_t)v5 - *(_QWORD *)a2;
      if (v5 == *(void ***)a2)
        return;
      goto LABEL_41;
    }
    v27 = &v6[22 * v42];
    while (v5 != v27)
    {
      if (*((_BYTE *)v5 - 8) && *((char *)v5 - 9) < 0)
        operator delete(*(v5 - 4));
      if (*((char *)v5 - 153) < 0)
        operator delete(*(v5 - 22));
      v5 -= 22;
    }
    *(_QWORD *)(a2 + 8) = v27;
    v30 = *(void ***)a2;
    v31 = (uint64_t)v27 - *(_QWORD *)a2;
    if (v27 != *(void ***)a2)
      goto LABEL_41;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (0x2E8BA2E8BA2E8BA3 * ((v9 - (uint64_t)v5) >> 4) >= v8)
    {
      v28 = 176 * ((176 * v8 - 176) / 0xB0) + 176;
      bzero(*(void **)(a2 + 8), v28);
      *(_QWORD *)(a2 + 8) = (char *)v5 + v28;
      v29 = (char *)v5 + v28;
      v30 = *(void ***)a2;
      v31 = (uint64_t)&v29[-*(_QWORD *)a2];
      if (v29 == *(char **)a2)
        return;
      goto LABEL_41;
    }
    if (v42 > 0x1745D1745D1745DLL)
      sub_20EABADD4();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - (uint64_t)v6) >> 4);
    if (2 * v10 > v42)
      v4 = 2 * v10;
    if (v10 >= 0xBA2E8BA2E8BA2ELL)
      v4 = 0x1745D1745D1745DLL;
    if (v4 > 0x1745D1745D1745DLL)
      sub_20E877A38();
    v11 = 176 * v4;
    v12 = (char *)operator new(176 * v4);
    v13 = &v12[176 * v7];
    v14 = &v12[v11];
    bzero(v13, 176 * ((176 * v8 - 176) / 0xB0) + 176);
    v15 = &v13[176 * ((176 * v8 - 176) / 0xB0) + 176];
    if (v5 == v6)
    {
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 16) = v14;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v13[v16 * 8];
        v18 = &v5[v16];
        v19 = *(_OWORD *)&v5[v16 - 22];
        *((_QWORD *)v17 - 20) = v5[v16 - 20];
        *((_OWORD *)v17 - 11) = v19;
        *(v18 - 21) = 0;
        *(v18 - 20) = 0;
        *(v18 - 22) = 0;
        v20 = *(_OWORD *)&v5[v16 - 19];
        v21 = *(_OWORD *)&v5[v16 - 17];
        v22 = *(_OWORD *)&v5[v16 - 15];
        *(_OWORD *)(v17 - 104) = *(_OWORD *)&v5[v16 - 13];
        *(_OWORD *)(v17 - 120) = v22;
        *(_OWORD *)(v17 - 136) = v21;
        *(_OWORD *)(v17 - 152) = v20;
        v23 = *(_OWORD *)&v5[v16 - 11];
        v24 = *(_OWORD *)&v5[v16 - 9];
        v25 = *(_OWORD *)&v5[v16 - 7];
        *(v17 - 40) = (char)v5[v16 - 5];
        *(_OWORD *)(v17 - 56) = v25;
        *(_OWORD *)(v17 - 72) = v24;
        *(_OWORD *)(v17 - 88) = v23;
        v13[v16 * 8 - 32] = 0;
        *(v17 - 8) = 0;
        if (LOBYTE(v5[v16 - 1]))
        {
          v26 = *((_OWORD *)v18 - 2);
          *(_QWORD *)&v13[v16 * 8 - 16] = *(v18 - 2);
          *(_OWORD *)&v13[v16 * 8 - 32] = v26;
          *(v18 - 3) = 0;
          *(v18 - 2) = 0;
          *(v18 - 4) = 0;
          *(v17 - 8) = 1;
        }
        v16 -= 22;
      }
      while (&v5[v16] != v6);
      v5 = *(void ***)a2;
      v32 = *(void ***)(a2 + 8);
      *(_QWORD *)a2 = &v13[v16 * 8];
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 16) = v14;
      while (v32 != v5)
      {
        if (*((_BYTE *)v32 - 8) && *((char *)v32 - 9) < 0)
          operator delete(*(v32 - 4));
        if (*((char *)v32 - 153) < 0)
          operator delete(*(v32 - 22));
        v32 -= 22;
      }
    }
    if (v5)
      operator delete(v5);
    v30 = *(void ***)a2;
    v33 = *(_QWORD *)(a2 + 8);
    v31 = v33 - *(_QWORD *)a2;
    if (v33 != *(_QWORD *)a2)
    {
LABEL_41:
      v34 = 0;
      v35 = 176 * (v31 / 176);
      do
      {
        v36 = &v30[v34 / 8];
        v44 = 2;
        sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v44);
        v37 = v44;
        sub_20E9EE280(*(_QWORD *)(a1 + 48), (std::string *)&v30[v34 / 8]);
        v38 = *(_QWORD *)(a1 + 48);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 3]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 4]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 5]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 6]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 7]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 8]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 9]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 10]);
        sub_20E9EE078(v38, (double *)&v30[v34 / 8 + 11]);
        v39 = *(_QWORD *)(a1 + 48);
        sub_20E9EE078(v39, (double *)&v30[v34 / 8 + 12]);
        sub_20E9EE078(v39, (double *)&v30[v34 / 8 + 13]);
        sub_20E9EE078(v39, (double *)&v30[v34 / 8 + 14]);
        v43 = 0;
        sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v43);
        if (v43)
        {
          if (!LOBYTE(v30[v34 / 8 + 17]))
          {
            v36[15] = 0;
            v36[16] = 0;
            *((_BYTE *)v36 + 136) = 1;
          }
          v44 = 0;
          sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v44);
          LODWORD(v30[v34 / 8 + 16]) = v44 >> 4;
          sub_20E9EDE6C(*(_QWORD *)(a1 + 48), v36 + 15);
        }
        else if (LOBYTE(v30[v34 / 8 + 17]))
        {
          *((_BYTE *)v36 + 136) = 0;
        }
        if (v37 >= 2)
        {
          v40 = &v30[v34 / 8];
          v41 = &v30[v34 / 8 + 18];
          LOBYTE(v44) = 0;
          sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v44);
          if ((_BYTE)v44)
          {
            if (!LOBYTE(v30[v34 / 8 + 21]))
            {
              *v41 = 0;
              v30[v34 / 8 + 19] = 0;
              v30[v34 / 8 + 20] = 0;
              *((_BYTE *)v40 + 168) = 1;
            }
            sub_20E9EE280(*(_QWORD *)(a1 + 48), (std::string *)&v30[v34 / 8 + 18]);
          }
          else if (LOBYTE(v30[v34 / 8 + 21]))
          {
            if (SHIBYTE(v30[v34 / 8 + 20]) < 0)
              operator delete(*v41);
            *((_BYTE *)v40 + 168) = 0;
          }
        }
        v34 += 176;
      }
      while (v35 != v34);
    }
  }
}

void sub_20EAC02F0(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unint64_t v5;
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v13);
  v4 = *(std::string **)(a2 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a2) >> 3);
  if (v13 > v5)
  {
    sub_20EAC040C((char **)a2, v13 - v5);
    v8 = a2;
    v6 = *(std::string **)a2;
    v7 = *(std::string **)(v8 + 8);
    v9 = (char *)v7 - (char *)v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v13 >= v5)
  {
    v6 = *(std::string **)a2;
    v9 = (char *)v4 - (char *)v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)a2 + 24 * v13;
  while (v4 != (std::string *)v10)
  {
    if (SHIBYTE(v4[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4[-1].__r_.__value_.__l.__data_);
    --v4;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v6 = *(std::string **)a2;
  v9 = v10 - (_QWORD)v6;
  if ((std::string *)v10 != v6)
  {
LABEL_13:
    v11 = *(_QWORD *)(a1 + 48);
    v12 = 24 * (v9 / 24);
    do
    {
      sub_20E9EE280(v11, v6++);
      v12 -= 24;
    }
    while (v12);
  }
}

void sub_20EAC040C(char **a1, unint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  void **v18;

  v5 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v4 - v5) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 = (void **)((char *)v5 + v12);
    }
    a1[1] = (char *)v5;
  }
  else
  {
    v6 = (void **)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 3);
        *((_QWORD *)v13 - 1) = *(v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *(v5 - 2) = 0;
        *(v5 - 1) = 0;
        *(v5 - 3) = 0;
        v5 -= 3;
      }
      while (v5 != v6);
      v5 = (void **)*a1;
      v18 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      while (v18 != v5)
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20EAC05DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  void **v27;
  void *v28;
  void *v29;
  void *v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  size_t v57;
  char *v58;
  float **v59;
  unint64_t v60;
  float *v61;
  float *v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  size_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  float *v74;
  float *v75;
  uint64_t v76;
  float v77;
  _QWORD *v78;
  char *k;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  float v85;
  char *i;
  uint64_t v87;
  void (*v88)(uint64_t);
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  float v92;
  char *j;
  uint64_t v94;
  void (*v95)(uint64_t);
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v104;
  char *m;
  uint64_t v106;
  void (*v107)(uint64_t);
  _QWORD *v108;
  _QWORD *v109;
  void **v110;
  int v111;
  _QWORD *v113;
  char *n;
  uint64_t v115;
  void (*v116)(uint64_t);
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  char *i9;
  uint64_t v122;
  void (*v123)(uint64_t);
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  char *ii;
  uint64_t v128;
  void (*v129)(uint64_t);
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  char *jj;
  uint64_t v134;
  void (*v135)(uint64_t);
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  char *kk;
  uint64_t v140;
  void (*v141)(uint64_t);
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  char *mm;
  uint64_t v146;
  void (*v147)(uint64_t);
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  char *nn;
  uint64_t v152;
  void (*v153)(uint64_t);
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  char *i1;
  uint64_t v158;
  void (*v159)(uint64_t);
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  char *i8;
  uint64_t v165;
  void (*v166)(uint64_t);
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  char *i7;
  uint64_t v171;
  void (*v172)(uint64_t);
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *i2;
  uint64_t v177;
  void (*v178)(uint64_t);
  _QWORD *v179;
  _QWORD *v180;
  char v181;
  _QWORD *v182;
  char *i3;
  uint64_t v184;
  void (*v185)(uint64_t);
  _QWORD *v186;
  _QWORD *v187;
  double *v188;
  _QWORD *v189;
  char *i4;
  uint64_t v191;
  void (*v192)(uint64_t);
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v196;
  char *i5;
  uint64_t v198;
  void (*v199)(uint64_t);
  _QWORD *v200;
  _QWORD *v201;
  char v202;
  _QWORD *v203;
  char *i6;
  uint64_t v205;
  void (*v206)(uint64_t);
  _QWORD *v207;
  _QWORD *v208;
  std::string *v209;
  std::bad_cast *v210;
  std::bad_cast *v211;
  std::bad_cast *exception;
  std::bad_cast *v213;
  std::bad_cast *v214;
  std::bad_cast *v215;
  std::bad_cast *v216;
  std::bad_cast *v217;
  std::bad_cast *v218;
  std::bad_cast *v219;
  std::bad_cast *v220;
  std::bad_cast *v221;
  std::bad_cast *v222;
  std::bad_cast *v223;
  std::bad_cast *v224;
  std::bad_cast *v225;
  std::bad_cast *v226;
  std::bad_cast *v227;
  std::bad_cast *v228;
  std::bad_cast *v229;
  std::bad_cast *v230;
  std::bad_cast *v231;
  std::bad_cast *v232;
  std::bad_cast *v233;
  std::bad_cast *v234;
  std::bad_cast *v235;
  std::bad_cast *v236;
  std::bad_cast *v237;
  std::bad_cast *v238;
  std::bad_cast *v239;
  std::bad_cast *v240;
  std::bad_cast *v241;
  std::bad_cast *v242;
  std::bad_cast *v243;
  void **v244;
  unsigned int v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  double v249;
  _QWORD *v250;

  v246 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v246);
  v4 = v246;
  v6 = *(void ***)a2;
  v5 = *(void ***)(a2 + 8);
  v7 = 0x84BDA12F684BDA13 * (((uint64_t)v5 - *(_QWORD *)a2) >> 3);
  v8 = v246 - v7;
  if (v246 <= v7)
  {
    if (v246 < v7)
      sub_20EAB9D1C(a2, &v6[27 * v246]);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (0x84BDA12F684BDA13 * ((v9 - (uint64_t)v5) >> 3) >= v8)
    {
      bzero(*(void **)(a2 + 8), 216 * ((216 * v8 - 216) / 0xD8) + 216);
      *(_QWORD *)(a2 + 8) = &v5[27 * ((216 * v8 - 216) / 0xD8) + 27];
    }
    else
    {
      if (v246 > 0x12F684BDA12F684)
        sub_20EABADD4();
      v10 = 0x84BDA12F684BDA13 * ((v9 - (uint64_t)v6) >> 3);
      if (2 * v10 > v246)
        v4 = 2 * v10;
      if (v10 >= 0x97B425ED097B42)
        v4 = 0x12F684BDA12F684;
      if (v4 > 0x12F684BDA12F684)
LABEL_382:
        sub_20E877A38();
      v11 = 216 * v4;
      v12 = (char *)operator new(216 * v4);
      v13 = &v12[216 * v7];
      v14 = &v12[v11];
      bzero(v13, 216 * ((216 * v8 - 216) / 0xD8) + 216);
      v15 = &v13[216 * ((216 * v8 - 216) / 0xD8) + 216];
      if (v5 == v6)
      {
        *(_QWORD *)a2 = v13;
        *(_QWORD *)(a2 + 8) = v15;
        *(_QWORD *)(a2 + 16) = v14;
      }
      else
      {
        v16 = 0;
        do
        {
          v17 = &v13[v16 * 8];
          v18 = &v5[v16];
          *(_OWORD *)(v17 - 216) = *(_OWORD *)&v5[v16 - 27];
          *((_QWORD *)v17 - 25) = v5[v16 - 25];
          *(v18 - 27) = 0;
          *(v18 - 26) = 0;
          v19 = *(_OWORD *)&v5[v16 - 24];
          *(v18 - 25) = 0;
          *((_OWORD *)v17 - 12) = v19;
          *((_QWORD *)v17 - 22) = v5[v16 - 22];
          *(v18 - 23) = 0;
          *(v18 - 22) = 0;
          *(v18 - 24) = 0;
          v20 = *(_OWORD *)&v5[v16 - 11];
          v21 = *(_OWORD *)&v5[v16 - 9];
          v22 = *(_OWORD *)&v5[v16 - 7];
          *(_OWORD *)(v17 - 104) = *(_OWORD *)&v5[v16 - 13];
          *(_OWORD *)(v17 - 56) = v22;
          *(_OWORD *)(v17 - 72) = v21;
          *(_OWORD *)(v17 - 88) = v20;
          v23 = *(_OWORD *)&v5[v16 - 21];
          v24 = *(_OWORD *)&v5[v16 - 19];
          v25 = *(_OWORD *)&v5[v16 - 17];
          *(_OWORD *)(v17 - 120) = *(_OWORD *)&v5[v16 - 15];
          *(_OWORD *)(v17 - 136) = v25;
          *(_OWORD *)(v17 - 152) = v24;
          *(_OWORD *)(v17 - 168) = v23;
          *(_OWORD *)(v17 - 40) = *(_OWORD *)&v5[v16 - 5];
          *((_QWORD *)v17 - 3) = v5[v16 - 3];
          *(v18 - 5) = 0;
          *(v18 - 4) = 0;
          *(v18 - 3) = 0;
          v26 = v5[v16 - 2];
          *(v17 - 8) = (char)v5[v16 - 1];
          *((_QWORD *)v17 - 2) = v26;
          v16 -= 27;
        }
        while (&v5[v16] != v6);
        v5 = *(void ***)a2;
        v27 = *(void ***)(a2 + 8);
        *(_QWORD *)a2 = &v13[v16 * 8];
        *(_QWORD *)(a2 + 8) = v15;
        *(_QWORD *)(a2 + 16) = v14;
        if (v27 != v5)
        {
          do
          {
            v29 = *(v27 - 5);
            if (v29)
            {
              *(v27 - 4) = v29;
              operator delete(v29);
            }
            v30 = *(v27 - 24);
            if (v30)
            {
              *(v27 - 23) = v30;
              operator delete(v30);
            }
            v31 = v27 - 27;
            v32 = (void **)*(v27 - 27);
            if (v32)
            {
              v33 = (void **)*(v27 - 26);
              v28 = *(v27 - 27);
              if (v33 != v32)
              {
                do
                {
                  if (*((_BYTE *)v33 - 8) && *((char *)v33 - 9) < 0)
                    operator delete(*(v33 - 4));
                  v33 -= 17;
                }
                while (v33 != v32);
                v28 = *v31;
              }
              *(v27 - 26) = v32;
              operator delete(v28);
            }
            v27 -= 27;
          }
          while (v31 != v5);
        }
      }
      if (v5)
        operator delete(v5);
    }
  }
  v34 = *(void ***)a2;
  v244 = *(void ***)(a2 + 8);
  if (v244 != *(void ***)a2)
  {
    while (1)
    {
      v248 = 2;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v248);
      v245 = v248;
      v247 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)v34[1] - (_BYTE *)*v34) >> 3);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v247);
      v35 = v247;
      v37 = (char *)*v34;
      v36 = (char *)v34[1];
      v38 = 0xF0F0F0F0F0F0F0F1 * ((v36 - (_BYTE *)*v34) >> 3);
      v39 = v247 - v38;
      if (v247 <= v38)
        break;
      v40 = v34[2];
      if (0xF0F0F0F0F0F0F0F1 * ((v40 - v36) >> 3) >= v39)
      {
        v57 = 136 * ((136 * v39 - 136) / 0x88) + 136;
        bzero(v34[1], v57);
        v34[1] = &v36[v57];
        v36 += v57;
        v58 = (char *)*v34;
        if (v36 != *v34)
          goto LABEL_163;
      }
      else
      {
        if (v247 > 0x1E1E1E1E1E1E1E1)
          sub_20EABADD4();
        v41 = 0xF0F0F0F0F0F0F0F1 * ((v40 - v37) >> 3);
        if (2 * v41 > v247)
          v35 = 2 * v41;
        if (v41 >= 0xF0F0F0F0F0F0F0)
          v35 = 0x1E1E1E1E1E1E1E1;
        if (v35 > 0x1E1E1E1E1E1E1E1)
          goto LABEL_382;
        v42 = 136 * v35;
        v43 = (char *)operator new(136 * v35);
        v44 = &v43[136 * v38];
        v45 = &v43[v42];
        bzero(v44, 136 * ((136 * v39 - 136) / 0x88) + 136);
        v46 = &v44[136 * ((136 * v39 - 136) / 0x88) + 136];
        if (v36 == v37)
        {
          *v34 = v44;
          v34[1] = v46;
          v34[2] = v45;
        }
        else
        {
          v47 = 0;
          do
          {
            v48 = &v44[v47];
            v49 = &v36[v47];
            v50 = *(_OWORD *)&v36[v47 - 136];
            v51 = *(_OWORD *)&v36[v47 - 120];
            *(_OWORD *)(v48 - 104) = *(_OWORD *)&v36[v47 - 104];
            *(_OWORD *)(v48 - 120) = v51;
            *(_OWORD *)(v48 - 136) = v50;
            v52 = *(_OWORD *)&v36[v47 - 88];
            v53 = *(_OWORD *)&v36[v47 - 72];
            v54 = *(_OWORD *)&v36[v47 - 56];
            *(v48 - 40) = v36[v47 - 40];
            *(_OWORD *)(v48 - 56) = v54;
            *(_OWORD *)(v48 - 72) = v53;
            *(_OWORD *)(v48 - 88) = v52;
            v44[v47 - 32] = 0;
            *(v48 - 8) = 0;
            if (v36[v47 - 8])
            {
              v55 = *((_OWORD *)v49 - 2);
              *(_QWORD *)&v44[v47 - 16] = *((_QWORD *)v49 - 2);
              *(_OWORD *)&v44[v47 - 32] = v55;
              *((_QWORD *)v49 - 3) = 0;
              *((_QWORD *)v49 - 2) = 0;
              *((_QWORD *)v49 - 4) = 0;
              *(v48 - 8) = 1;
            }
            v47 -= 136;
          }
          while (&v36[v47] != v37);
          v36 = (char *)*v34;
          v110 = (void **)v34[1];
          *v34 = &v44[v47];
          v34[1] = v46;
          v34[2] = v45;
          while (v110 != (void **)v36)
          {
            if (*((_BYTE *)v110 - 8))
            {
              if (*((char *)v110 - 9) < 0)
                operator delete(*(v110 - 4));
            }
            v110 -= 17;
          }
        }
        if (v36)
          operator delete(v36);
        v58 = (char *)*v34;
        v36 = (char *)v34[1];
        if (v36 != *v34)
          goto LABEL_163;
      }
LABEL_61:
      v59 = (float **)(v34 + 3);
      v247 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v34[4] - (_BYTE *)v34[3]) >> 2);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v247);
      v60 = v247;
      v62 = (float *)v34[3];
      v61 = (float *)v34[4];
      v63 = 0xAAAAAAAAAAAAAAABLL * (v61 - v62);
      v64 = v247 - v63;
      if (v247 <= v63)
      {
        if (v247 < v63)
        {
          v61 = &v62[3 * v247];
          v34[4] = v61;
        }
        if (v61 == v62)
          goto LABEL_125;
LABEL_80:
        v75 = v61;
        while (1)
        {
          v76 = *(_QWORD *)(a1 + 48);
          sub_20E9EFAC4(v76, (uint64_t)&v248);
          if (v248 == 2)
            break;
          if (v248 == 3)
          {
            *v62 = (float)*(uint64_t *)&v249;
            v78 = v250;
            v250 = 0;
            if (!v78)
              goto LABEL_97;
            goto LABEL_91;
          }
          if (v248 != 4)
            goto LABEL_368;
          v77 = v249;
          *v62 = v77;
          v78 = v250;
          v250 = 0;
          if (v78)
            goto LABEL_91;
LABEL_97:
          sub_20E9EFAC4(v76, (uint64_t)&v248);
          if (v248 == 2)
          {
            v62[1] = (float)*(unint64_t *)&v249;
            v84 = v250;
            v250 = 0;
            if (!v84)
              goto LABEL_111;
LABEL_105:
            for (i = (char *)v84[4]; i != (char *)v84[6]; i -= 16)
            {
              v88 = (void (*)(uint64_t))*((_QWORD *)i - 2);
              v87 = *((_QWORD *)i - 1);
              v88(v87);
            }
            free(i);
            v89 = (_QWORD *)v84[3];
            if (v89)
            {
              do
              {
                v90 = (_QWORD *)*v89;
                free(v89);
                v89 = v90;
              }
              while (v90);
            }
            free(v84);
            goto LABEL_111;
          }
          if (v248 == 4)
          {
            v85 = v249;
            v62[1] = v85;
            v84 = v250;
            v250 = 0;
            if (!v84)
              goto LABEL_111;
            goto LABEL_105;
          }
          if (v248 != 3)
            goto LABEL_368;
          v62[1] = (float)*(uint64_t *)&v249;
          v84 = v250;
          v250 = 0;
          if (v84)
            goto LABEL_105;
LABEL_111:
          sub_20E9EFAC4(v76, (uint64_t)&v248);
          switch(v248)
          {
            case 2:
              v62[2] = (float)*(unint64_t *)&v249;
              v91 = v250;
              v250 = 0;
              if (v91)
                goto LABEL_119;
              break;
            case 4:
              v92 = v249;
              v62[2] = v92;
              v91 = v250;
              v250 = 0;
              if (v91)
                goto LABEL_119;
              break;
            case 3:
              v62[2] = (float)*(uint64_t *)&v249;
              v91 = v250;
              v250 = 0;
              if (v91)
              {
LABEL_119:
                for (j = (char *)v91[4]; j != (char *)v91[6]; j -= 16)
                {
                  v95 = (void (*)(uint64_t))*((_QWORD *)j - 2);
                  v94 = *((_QWORD *)j - 1);
                  v95(v94);
                }
                free(j);
                v96 = (_QWORD *)v91[3];
                if (v96)
                {
                  do
                  {
                    v97 = (_QWORD *)*v96;
                    free(v96);
                    v96 = v97;
                  }
                  while (v97);
                }
                free(v91);
              }
              break;
            default:
LABEL_368:
              exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              exception->__vftable = 0;
              v213 = std::bad_cast::bad_cast(exception);
              v213->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
              __cxa_throw(v213, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          v62 += 3;
          if (v62 == v75)
            goto LABEL_125;
        }
        *v62 = (float)*(unint64_t *)&v249;
        v78 = v250;
        v250 = 0;
        if (!v78)
          goto LABEL_97;
LABEL_91:
        for (k = (char *)v78[4]; k != (char *)v78[6]; k -= 16)
        {
          v81 = (void (*)(uint64_t))*((_QWORD *)k - 2);
          v80 = *((_QWORD *)k - 1);
          v81(v80);
        }
        free(k);
        v82 = (_QWORD *)v78[3];
        if (v82)
        {
          do
          {
            v83 = (_QWORD *)*v82;
            free(v82);
            v82 = v83;
          }
          while (v83);
        }
        free(v78);
        goto LABEL_97;
      }
      v65 = v34[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v65 - (_BYTE *)v61) >> 2) >= v64)
      {
        bzero(v34[4], 12 * ((12 * v64 - 12) / 0xC) + 12);
        v74 = &v61[3 * ((12 * v64 - 12) / 0xC) + 3];
        v34[4] = v74;
      }
      else
      {
        if (v247 > 0x1555555555555555)
          sub_20EABADD4();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((v65 - (_BYTE *)v62) >> 2);
        if (2 * v66 > v247)
          v60 = 2 * v66;
        if (v66 >= 0xAAAAAAAAAAAAAAALL)
          v60 = 0x1555555555555555;
        if (v60 > 0x1555555555555555)
          goto LABEL_382;
        v67 = 12 * v60;
        v68 = (char *)operator new(12 * v60);
        v69 = &v68[4 * (v61 - v62)];
        v70 = 12 * ((12 * v64 - 12) / 0xC) + 12;
        bzero(v69, v70);
        v71 = v69;
        if (v61 != v62)
        {
          do
          {
            v72 = *(_QWORD *)(v61 - 3);
            v61 -= 3;
            v73 = *((_DWORD *)v61 + 2);
            *(_QWORD *)(v71 - 12) = v72;
            v71 -= 12;
            *((_DWORD *)v71 + 2) = v73;
          }
          while (v61 != v62);
          v61 = *v59;
        }
        v74 = (float *)&v69[v70];
        v34[3] = v71;
        v34[4] = &v69[v70];
        v34[5] = &v68[v67];
        if (v61)
        {
          operator delete(v61);
          v74 = (float *)v34[4];
        }
      }
      v62 = *v59;
      v61 = v74;
      if (v74 != *v59)
        goto LABEL_80;
LABEL_125:
      v98 = *(_QWORD *)(a1 + 48);
      sub_20E9EE078(v98, (double *)v34 + 6);
      sub_20E9EE078(v98, (double *)v34 + 7);
      sub_20E9EE078(v98, (double *)v34 + 8);
      sub_20E9EE078(v98, (double *)v34 + 9);
      sub_20E9EE078(v98, (double *)v34 + 10);
      sub_20E9EE078(v98, (double *)v34 + 11);
      sub_20E9EE078(v98, (double *)v34 + 12);
      sub_20E9EE078(v98, (double *)v34 + 13);
      sub_20E9EE078(v98, (double *)v34 + 14);
      sub_20E9EE078(v98, (double *)v34 + 15);
      sub_20E9EE078(v98, (double *)v34 + 16);
      sub_20E9EE078(v98, (double *)v34 + 17);
      sub_20E9EE078(v98, (double *)v34 + 18);
      sub_20E9EE078(v98, (double *)v34 + 19);
      sub_20E9EE078(v98, (double *)v34 + 20);
      sub_20E9EE078(v98, (double *)v34 + 21);
      v247 = ((_BYTE *)v34[23] - (_BYTE *)v34[22]) >> 2;
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v247);
      v99 = v34[22];
      v100 = v34[23];
      v101 = v100 - v99;
      if (v247 <= v101)
      {
        if (v247 < v101)
        {
          v100 = &v99[v247];
          v34[23] = v100;
        }
      }
      else
      {
        sub_20EAC24FC((uint64_t)(v34 + 22), v247 - v101);
        v99 = v34[22];
        v100 = v34[23];
      }
      v102 = *(_QWORD *)(a1 + 48);
      if (v100 != v99)
      {
        do
        {
          sub_20E9EFAC4(v102, (uint64_t)&v248);
          if (v248 == 3)
          {
            if (*(uint64_t *)&v249 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
              goto LABEL_367;
          }
          else if (v248 != 2 || *(_QWORD *)&v249 >> 31 != 0)
          {
LABEL_367:
            v210 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v210->__vftable = 0;
            v211 = std::bad_cast::bad_cast(v210);
            v211->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v211, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          *v99 = LODWORD(v249);
          v104 = v250;
          v250 = 0;
          if (v104)
          {
            for (m = (char *)v104[4]; m != (char *)v104[6]; m -= 16)
            {
              v107 = (void (*)(uint64_t))*((_QWORD *)m - 2);
              v106 = *((_QWORD *)m - 1);
              v107(v106);
            }
            free(m);
            v108 = (_QWORD *)v104[3];
            if (v108)
            {
              do
              {
                v109 = (_QWORD *)*v108;
                free(v108);
                v108 = v109;
              }
              while (v109);
            }
            free(v104);
          }
          ++v99;
        }
        while (v99 != v100);
        sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)v34 + 25);
        if (v245 < 2)
          goto LABEL_36;
LABEL_149:
        sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)v34 + 208);
        goto LABEL_36;
      }
      sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)v34 + 25);
      if (v245 >= 2)
        goto LABEL_149;
LABEL_36:
      v34 += 27;
      if (v34 == v244)
        return;
    }
    if (v247 < v38)
    {
      v56 = &v37[136 * v247];
      while (v36 != v56)
      {
        if (*(v36 - 8) && *(v36 - 9) < 0)
          operator delete(*((void **)v36 - 4));
        v36 -= 136;
      }
      v34[1] = v56;
      v36 = v56;
    }
    v58 = (char *)*v34;
    if (v36 == *v34)
      goto LABEL_61;
    while (1)
    {
LABEL_163:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
      v111 = LODWORD(v249);
      if (v248 != 2 || HIDWORD(*(_QWORD *)&v249) != 0)
      {
        v214 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v214->__vftable = 0;
        v215 = std::bad_cast::bad_cast(v214);
        v215->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v215, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v113 = v250;
      v250 = 0;
      if (v113)
      {
        for (n = (char *)v113[4]; n != (char *)v113[6]; n -= 16)
        {
          v116 = (void (*)(uint64_t))*((_QWORD *)n - 2);
          v115 = *((_QWORD *)n - 1);
          v116(v115);
        }
        free(n);
        v117 = (_QWORD *)v113[3];
        if (v117)
        {
          do
          {
            v118 = (_QWORD *)*v117;
            free(v117);
            v117 = v118;
          }
          while (v118);
        }
        free(v113);
      }
      v119 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v119, (uint64_t)&v248);
      if (v248 == 2)
        break;
      if (v248 == 3)
      {
        *(double *)v58 = (double)*(uint64_t *)&v249;
        v120 = v250;
        v250 = 0;
        if (!v120)
          goto LABEL_189;
        goto LABEL_183;
      }
      if (v248 != 4)
      {
        v226 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v226->__vftable = 0;
        v227 = std::bad_cast::bad_cast(v226);
        v227->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v227, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(double *)v58 = v249;
      v120 = v250;
      v250 = 0;
      if (v120)
        goto LABEL_183;
LABEL_189:
      sub_20E9EFAC4(v119, (uint64_t)&v248);
      if (v248 == 2)
      {
        *((double *)v58 + 1) = (double)*(unint64_t *)&v249;
        v126 = v250;
        v250 = 0;
        if (!v126)
          goto LABEL_203;
LABEL_197:
        for (ii = (char *)v126[4]; ii != (char *)v126[6]; ii -= 16)
        {
          v129 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
          v128 = *((_QWORD *)ii - 1);
          v129(v128);
        }
        free(ii);
        v130 = (_QWORD *)v126[3];
        if (v130)
        {
          do
          {
            v131 = (_QWORD *)*v130;
            free(v130);
            v130 = v131;
          }
          while (v131);
        }
        free(v126);
        goto LABEL_203;
      }
      if (v248 == 3)
      {
        *((double *)v58 + 1) = (double)*(uint64_t *)&v249;
        v126 = v250;
        v250 = 0;
        if (!v126)
          goto LABEL_203;
        goto LABEL_197;
      }
      if (v248 != 4)
      {
        v228 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v228->__vftable = 0;
        v229 = std::bad_cast::bad_cast(v228);
        v229->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v229, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((double *)v58 + 1) = v249;
      v126 = v250;
      v250 = 0;
      if (v126)
        goto LABEL_197;
LABEL_203:
      sub_20E9EFAC4(v119, (uint64_t)&v248);
      if (v248 == 2)
      {
        *((double *)v58 + 2) = (double)*(unint64_t *)&v249;
        v132 = v250;
        v250 = 0;
        if (!v132)
          goto LABEL_217;
LABEL_211:
        for (jj = (char *)v132[4]; jj != (char *)v132[6]; jj -= 16)
        {
          v135 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v134 = *((_QWORD *)jj - 1);
          v135(v134);
        }
        free(jj);
        v136 = (_QWORD *)v132[3];
        if (v136)
        {
          do
          {
            v137 = (_QWORD *)*v136;
            free(v136);
            v136 = v137;
          }
          while (v137);
        }
        free(v132);
        goto LABEL_217;
      }
      if (v248 == 3)
      {
        *((double *)v58 + 2) = (double)*(uint64_t *)&v249;
        v132 = v250;
        v250 = 0;
        if (!v132)
          goto LABEL_217;
        goto LABEL_211;
      }
      if (v248 != 4)
      {
        v224 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v224->__vftable = 0;
        v225 = std::bad_cast::bad_cast(v224);
        v225->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v225, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((double *)v58 + 2) = v249;
      v132 = v250;
      v250 = 0;
      if (v132)
        goto LABEL_211;
LABEL_217:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
      if (v248 == 2)
      {
        *((double *)v58 + 3) = (double)*(unint64_t *)&v249;
        v138 = v250;
        v250 = 0;
        if (!v138)
          goto LABEL_231;
LABEL_225:
        for (kk = (char *)v138[4]; kk != (char *)v138[6]; kk -= 16)
        {
          v141 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
          v140 = *((_QWORD *)kk - 1);
          v141(v140);
        }
        free(kk);
        v142 = (_QWORD *)v138[3];
        if (v142)
        {
          do
          {
            v143 = (_QWORD *)*v142;
            free(v142);
            v142 = v143;
          }
          while (v143);
        }
        free(v138);
        goto LABEL_231;
      }
      if (v248 == 3)
      {
        *((double *)v58 + 3) = (double)*(uint64_t *)&v249;
        v138 = v250;
        v250 = 0;
        if (!v138)
          goto LABEL_231;
        goto LABEL_225;
      }
      if (v248 != 4)
      {
        v234 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v234->__vftable = 0;
        v235 = std::bad_cast::bad_cast(v234);
        v235->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v235, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((double *)v58 + 3) = v249;
      v138 = v250;
      v250 = 0;
      if (v138)
        goto LABEL_225;
LABEL_231:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
      if (v248 == 2)
      {
        *((double *)v58 + 4) = (double)*(unint64_t *)&v249;
        v144 = v250;
        v250 = 0;
        if (!v144)
          goto LABEL_245;
LABEL_239:
        for (mm = (char *)v144[4]; mm != (char *)v144[6]; mm -= 16)
        {
          v147 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
          v146 = *((_QWORD *)mm - 1);
          v147(v146);
        }
        free(mm);
        v148 = (_QWORD *)v144[3];
        if (v148)
        {
          do
          {
            v149 = (_QWORD *)*v148;
            free(v148);
            v148 = v149;
          }
          while (v149);
        }
        free(v144);
        goto LABEL_245;
      }
      if (v248 == 3)
      {
        *((double *)v58 + 4) = (double)*(uint64_t *)&v249;
        v144 = v250;
        v250 = 0;
        if (!v144)
          goto LABEL_245;
        goto LABEL_239;
      }
      if (v248 != 4)
      {
        v232 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v232->__vftable = 0;
        v233 = std::bad_cast::bad_cast(v232);
        v233->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v233, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((double *)v58 + 4) = v249;
      v144 = v250;
      v250 = 0;
      if (v144)
        goto LABEL_239;
LABEL_245:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
      if (v248 == 2)
      {
        *((double *)v58 + 5) = (double)*(unint64_t *)&v249;
        v150 = v250;
        v250 = 0;
        if (!v150)
          goto LABEL_259;
LABEL_253:
        for (nn = (char *)v150[4]; nn != (char *)v150[6]; nn -= 16)
        {
          v153 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v152 = *((_QWORD *)nn - 1);
          v153(v152);
        }
        free(nn);
        v154 = (_QWORD *)v150[3];
        if (v154)
        {
          do
          {
            v155 = (_QWORD *)*v154;
            free(v154);
            v154 = v155;
          }
          while (v155);
        }
        free(v150);
        goto LABEL_259;
      }
      if (v248 == 3)
      {
        *((double *)v58 + 5) = (double)*(uint64_t *)&v249;
        v150 = v250;
        v250 = 0;
        if (!v150)
          goto LABEL_259;
        goto LABEL_253;
      }
      if (v248 != 4)
      {
        v236 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v236->__vftable = 0;
        v237 = std::bad_cast::bad_cast(v236);
        v237->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v237, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((double *)v58 + 5) = v249;
      v150 = v250;
      v250 = 0;
      if (v150)
        goto LABEL_253;
LABEL_259:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
      if (v248 == 2)
      {
        *((double *)v58 + 6) = (double)*(unint64_t *)&v249;
        v156 = v250;
        v250 = 0;
        if (!v156)
          goto LABEL_273;
LABEL_267:
        for (i1 = (char *)v156[4]; i1 != (char *)v156[6]; i1 -= 16)
        {
          v159 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v158 = *((_QWORD *)i1 - 1);
          v159(v158);
        }
        free(i1);
        v160 = (_QWORD *)v156[3];
        if (v160)
        {
          do
          {
            v161 = (_QWORD *)*v160;
            free(v160);
            v160 = v161;
          }
          while (v161);
        }
        free(v156);
        goto LABEL_273;
      }
      if (v248 == 3)
      {
        *((double *)v58 + 6) = (double)*(uint64_t *)&v249;
        v156 = v250;
        v250 = 0;
        if (!v156)
          goto LABEL_273;
        goto LABEL_267;
      }
      if (v248 != 4)
      {
        v230 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v230->__vftable = 0;
        v231 = std::bad_cast::bad_cast(v230);
        v231->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v231, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((double *)v58 + 6) = v249;
      v156 = v250;
      v250 = 0;
      if (v156)
        goto LABEL_267;
LABEL_273:
      if ((v111 & 0xFFFFFFFE) != 0)
      {
        v162 = *(_QWORD *)(a1 + 48);
        sub_20E9EFAC4(v162, (uint64_t)&v248);
        switch(v248)
        {
          case 2:
            *((double *)v58 + 7) = (double)*(unint64_t *)&v249;
            v163 = v250;
            v250 = 0;
            if (!v163)
              goto LABEL_288;
            break;
          case 3:
            *((double *)v58 + 7) = (double)*(uint64_t *)&v249;
            v163 = v250;
            v250 = 0;
            if (!v163)
              goto LABEL_288;
            break;
          case 4:
            *((double *)v58 + 7) = v249;
            v163 = v250;
            v250 = 0;
            if (!v163)
            {
LABEL_288:
              sub_20E9EFAC4(v162, (uint64_t)&v248);
              switch(v248)
              {
                case 2:
                  *((double *)v58 + 8) = (double)*(unint64_t *)&v249;
                  v169 = v250;
                  v250 = 0;
                  if (!v169)
                    goto LABEL_302;
                  break;
                case 3:
                  *((double *)v58 + 8) = (double)*(uint64_t *)&v249;
                  v169 = v250;
                  v250 = 0;
                  if (!v169)
                    goto LABEL_302;
                  break;
                case 4:
                  *((double *)v58 + 8) = v249;
                  v169 = v250;
                  v250 = 0;
                  if (!v169)
                  {
LABEL_302:
                    sub_20E9EFAC4(v162, (uint64_t)&v248);
                    switch(v248)
                    {
                      case 2:
                        *((double *)v58 + 9) = (double)*(unint64_t *)&v249;
                        v175 = v250;
                        v250 = 0;
                        if (v175)
                          goto LABEL_310;
                        break;
                      case 3:
                        *((double *)v58 + 9) = (double)*(uint64_t *)&v249;
                        v175 = v250;
                        v250 = 0;
                        if (v175)
                          goto LABEL_310;
                        break;
                      case 4:
                        *((double *)v58 + 9) = v249;
                        v175 = v250;
                        v250 = 0;
                        if (!v175)
                          break;
LABEL_310:
                        for (i2 = (char *)v175[4]; i2 != (char *)v175[6]; i2 -= 16)
                        {
                          v178 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
                          v177 = *((_QWORD *)i2 - 1);
                          v178(v177);
                        }
                        free(i2);
                        v179 = (_QWORD *)v175[3];
                        if (v179)
                        {
                          do
                          {
                            v180 = (_QWORD *)*v179;
                            free(v179);
                            v179 = v180;
                          }
                          while (v180);
                        }
                        free(v175);
                        break;
                      default:
                        v240 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                        v240->__vftable = 0;
                        v241 = std::bad_cast::bad_cast(v240);
                        v241->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                        __cxa_throw(v241, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                    }
                    sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
                    if (v248 != 2 || (v181 = LOBYTE(v249), *(_QWORD *)&v249 >= 0x100uLL))
                    {
                      v216 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                      v216->__vftable = 0;
                      v217 = std::bad_cast::bad_cast(v216);
                      v217->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                      __cxa_throw(v217, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                    }
                    v182 = v250;
                    v250 = 0;
                    if (v182)
                    {
                      for (i3 = (char *)v182[4]; i3 != (char *)v182[6]; i3 -= 16)
                      {
                        v185 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
                        v184 = *((_QWORD *)i3 - 1);
                        v185(v184);
                      }
                      free(i3);
                      v186 = (_QWORD *)v182[3];
                      if (v186)
                      {
                        do
                        {
                          v187 = (_QWORD *)*v186;
                          free(v186);
                          v186 = v187;
                        }
                        while (v187);
                      }
                      free(v182);
                    }
                    if (v181)
                    {
                      v188 = (double *)(v58 + 80);
                      if (!v58[96])
                      {
                        *v188 = 0.0;
                        *((_QWORD *)v58 + 11) = 0;
                        v58[96] = 1;
                      }
                      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
                      if (v248 != 2)
                      {
                        v222 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                        v222->__vftable = 0;
                        v223 = std::bad_cast::bad_cast(v222);
                        v223->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                        __cxa_throw(v223, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                      }
                      v189 = v250;
                      *v188 = v249;
                      v250 = 0;
                      if (v189)
                      {
                        for (i4 = (char *)v189[4]; i4 != (char *)v189[6]; i4 -= 16)
                        {
                          v192 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
                          v191 = *((_QWORD *)i4 - 1);
                          v192(v191);
                        }
                        free(i4);
                        v193 = (_QWORD *)v189[3];
                        if (v193)
                        {
                          do
                          {
                            v194 = (_QWORD *)*v193;
                            free(v193);
                            v193 = v194;
                          }
                          while (v194);
                        }
                        free(v189);
                      }
                      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
                      if (v248 != 2 || HIDWORD(*(_QWORD *)&v249) != 0)
                      {
                        v220 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                        v220->__vftable = 0;
                        v221 = std::bad_cast::bad_cast(v220);
                        v221->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                        __cxa_throw(v221, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                      }
                      *((_DWORD *)v58 + 22) = LODWORD(v249);
                      v196 = v250;
                      v250 = 0;
                      if (v196)
                      {
                        for (i5 = (char *)v196[4]; i5 != (char *)v196[6]; i5 -= 16)
                        {
                          v199 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
                          v198 = *((_QWORD *)i5 - 1);
                          v199(v198);
                        }
                        free(i5);
                        v200 = (_QWORD *)v196[3];
                        if (v200)
                        {
                          do
                          {
                            v201 = (_QWORD *)*v200;
                            free(v200);
                            v200 = v201;
                          }
                          while (v201);
                        }
                        free(v196);
                      }
                    }
                    else if (v58[96])
                    {
                      v58[96] = 0;
                    }
                    sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v248);
                    if (v248 != 2 || (v202 = LOBYTE(v249), *(_QWORD *)&v249 >= 0x100uLL))
                    {
                      v218 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                      v218->__vftable = 0;
                      v219 = std::bad_cast::bad_cast(v218);
                      v219->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                      __cxa_throw(v219, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                    }
                    v203 = v250;
                    v250 = 0;
                    if (v203)
                    {
                      for (i6 = (char *)v203[4]; i6 != (char *)v203[6]; i6 -= 16)
                      {
                        v206 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
                        v205 = *((_QWORD *)i6 - 1);
                        v206(v205);
                      }
                      free(i6);
                      v207 = (_QWORD *)v203[3];
                      if (v207)
                      {
                        do
                        {
                          v208 = (_QWORD *)*v207;
                          free(v207);
                          v207 = v208;
                        }
                        while (v208);
                      }
                      free(v203);
                    }
                    v209 = (std::string *)(v58 + 104);
                    if (v202)
                    {
                      if (!v58[128])
                      {
                        v209->__r_.__value_.__r.__words[0] = 0;
                        *((_QWORD *)v58 + 14) = 0;
                        *((_QWORD *)v58 + 15) = 0;
                        v58[128] = 1;
                      }
                      sub_20E9EE280(*(_QWORD *)(a1 + 48), v209);
                    }
                    else if (v58[128])
                    {
                      if (v58[127] < 0)
                        operator delete(v209->__r_.__value_.__l.__data_);
                      v58[128] = 0;
                    }
                    goto LABEL_162;
                  }
                  break;
                default:
                  v238 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v238->__vftable = 0;
                  v239 = std::bad_cast::bad_cast(v238);
                  v239->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v239, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              for (i7 = (char *)v169[4]; i7 != (char *)v169[6]; i7 -= 16)
              {
                v172 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
                v171 = *((_QWORD *)i7 - 1);
                v172(v171);
              }
              free(i7);
              v173 = (_QWORD *)v169[3];
              if (v173)
              {
                do
                {
                  v174 = (_QWORD *)*v173;
                  free(v173);
                  v173 = v174;
                }
                while (v174);
              }
              free(v169);
              goto LABEL_302;
            }
            break;
          default:
            v242 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v242->__vftable = 0;
            v243 = std::bad_cast::bad_cast(v242);
            v243->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v243, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        for (i8 = (char *)v163[4]; i8 != (char *)v163[6]; i8 -= 16)
        {
          v166 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v165 = *((_QWORD *)i8 - 1);
          v166(v165);
        }
        free(i8);
        v167 = (_QWORD *)v163[3];
        if (v167)
        {
          do
          {
            v168 = (_QWORD *)*v167;
            free(v167);
            v167 = v168;
          }
          while (v168);
        }
        free(v163);
        goto LABEL_288;
      }
LABEL_162:
      v58 += 136;
      if (v58 == v36)
        goto LABEL_61;
    }
    *(double *)v58 = (double)*(unint64_t *)&v249;
    v120 = v250;
    v250 = 0;
    if (!v120)
      goto LABEL_189;
LABEL_183:
    for (i9 = (char *)v120[4]; i9 != (char *)v120[6]; i9 -= 16)
    {
      v123 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
      v122 = *((_QWORD *)i9 - 1);
      v123(v122);
    }
    free(i9);
    v124 = (_QWORD *)v120[3];
    if (v124)
    {
      do
      {
        v125 = (_QWORD *)*v124;
        free(v124);
        v124 = v125;
      }
      while (v125);
    }
    free(v120);
    goto LABEL_189;
  }
}

void sub_20EAC24FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_20EABADD4();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_20EAC2698(uint64_t a1, char **a2)
{
  char **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  size_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  char **v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  _QWORD *v58;
  char *i;
  uint64_t v60;
  void (*v61)(uint64_t);
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  char *j;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  char *i21;
  uint64_t v70;
  void (*v71)(uint64_t);
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  char *i20;
  uint64_t v81;
  void (*v82)(uint64_t);
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  char *i47;
  uint64_t v87;
  void (*v88)(uint64_t);
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  char *i19;
  uint64_t v93;
  void (*v94)(uint64_t);
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  char *i22;
  uint64_t v99;
  void (*v100)(uint64_t);
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  char *i18;
  uint64_t v105;
  void (*v106)(uint64_t);
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  char *i23;
  uint64_t v111;
  void (*v112)(uint64_t);
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  char *i17;
  uint64_t v117;
  void (*v118)(uint64_t);
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  char *i24;
  uint64_t v123;
  void (*v124)(uint64_t);
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  char *i16;
  uint64_t v129;
  void (*v130)(uint64_t);
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  char *i25;
  uint64_t v135;
  void (*v136)(uint64_t);
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  char *i15;
  uint64_t v141;
  void (*v142)(uint64_t);
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  char *i26;
  uint64_t v147;
  void (*v148)(uint64_t);
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  char *i14;
  uint64_t v153;
  void (*v154)(uint64_t);
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  char *i27;
  uint64_t v159;
  void (*v160)(uint64_t);
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  char *i13;
  uint64_t v165;
  void (*v166)(uint64_t);
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  char *i28;
  uint64_t v171;
  void (*v172)(uint64_t);
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *i12;
  uint64_t v177;
  void (*v178)(uint64_t);
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  char *i29;
  uint64_t v184;
  void (*v185)(uint64_t);
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  char *i11;
  uint64_t v191;
  void (*v192)(uint64_t);
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  char *i30;
  uint64_t v197;
  void (*v198)(uint64_t);
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  char *i10;
  uint64_t v203;
  void (*v204)(uint64_t);
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  char *i31;
  uint64_t v209;
  void (*v210)(uint64_t);
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  char *i9;
  uint64_t v215;
  void (*v216)(uint64_t);
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  char *i32;
  uint64_t v221;
  void (*v222)(uint64_t);
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  char *i8;
  uint64_t v227;
  void (*v228)(uint64_t);
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  char *i33;
  uint64_t v233;
  void (*v234)(uint64_t);
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  char *i7;
  uint64_t v239;
  void (*v240)(uint64_t);
  _QWORD *v241;
  _QWORD *v242;
  int v243;
  _QWORD *v244;
  char *k;
  uint64_t v246;
  void (*v247)(uint64_t);
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  char *i34;
  uint64_t v253;
  void (*v254)(uint64_t);
  _QWORD *v255;
  _QWORD *v256;
  int v257;
  _QWORD *v258;
  char *i35;
  uint64_t v260;
  void (*v261)(uint64_t);
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  char *i6;
  uint64_t v267;
  void (*v268)(uint64_t);
  _QWORD *v269;
  _QWORD *v270;
  _QWORD *v271;
  char *i36;
  uint64_t v273;
  void (*v274)(uint64_t);
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  char *i5;
  uint64_t v279;
  void (*v280)(uint64_t);
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  char *i37;
  uint64_t v285;
  void (*v286)(uint64_t);
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  char *i4;
  uint64_t v291;
  void (*v292)(uint64_t);
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  char *i38;
  uint64_t v297;
  void (*v298)(uint64_t);
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  char *i3;
  uint64_t v303;
  void (*v304)(uint64_t);
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  char *i39;
  uint64_t v309;
  void (*v310)(uint64_t);
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  char *i2;
  uint64_t v315;
  void (*v316)(uint64_t);
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  char *i40;
  uint64_t v321;
  void (*v322)(uint64_t);
  _QWORD *v323;
  _QWORD *v324;
  _QWORD *v325;
  char *i1;
  uint64_t v327;
  void (*v328)(uint64_t);
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  char *i41;
  uint64_t v333;
  void (*v334)(uint64_t);
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  char *nn;
  uint64_t v339;
  void (*v340)(uint64_t);
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  char *i42;
  uint64_t v345;
  void (*v346)(uint64_t);
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  char *mm;
  uint64_t v351;
  void (*v352)(uint64_t);
  _QWORD *v353;
  _QWORD *v354;
  _QWORD *v355;
  char *i43;
  uint64_t v357;
  void (*v358)(uint64_t);
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  char *m;
  uint64_t v363;
  void (*v364)(uint64_t);
  _QWORD *v365;
  _QWORD *v366;
  char *i44;
  uint64_t v368;
  void (*v369)(uint64_t);
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  char *n;
  uint64_t v375;
  void (*v376)(uint64_t);
  _QWORD *v377;
  _QWORD *v378;
  char v379;
  _QWORD *v380;
  char *ii;
  uint64_t v382;
  void (*v383)(uint64_t);
  _QWORD *v384;
  _QWORD *v385;
  _QWORD *v386;
  char *i45;
  uint64_t v388;
  void (*v389)(uint64_t);
  _QWORD *v390;
  _QWORD *v391;
  _QWORD *v392;
  char *jj;
  uint64_t v394;
  void (*v395)(uint64_t);
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  char *kk;
  uint64_t v400;
  void (*v401)(uint64_t);
  _QWORD *v402;
  _QWORD *v403;
  char *i46;
  uint64_t v405;
  void (*v406)(uint64_t);
  _QWORD *v407;
  _QWORD *v408;
  std::bad_cast *exception;
  std::bad_cast *v410;
  std::bad_cast *v411;
  std::bad_cast *v412;
  std::bad_cast *v413;
  std::bad_cast *v414;
  std::bad_cast *v415;
  std::bad_cast *v416;
  std::bad_cast *v417;
  std::bad_cast *v418;
  std::bad_cast *v419;
  std::bad_cast *v420;
  std::bad_cast *v421;
  std::bad_cast *v422;
  std::bad_cast *v423;
  std::bad_cast *v424;
  std::bad_cast *v425;
  std::bad_cast *v426;
  std::bad_cast *v427;
  std::bad_cast *v428;
  std::bad_cast *v429;
  std::bad_cast *v430;
  std::bad_cast *v431;
  std::bad_cast *v432;
  std::bad_cast *v433;
  std::bad_cast *v434;
  std::bad_cast *v435;
  std::bad_cast *v436;
  std::bad_cast *v437;
  std::bad_cast *v438;
  std::bad_cast *v439;
  std::bad_cast *v440;
  std::bad_cast *v441;
  std::bad_cast *v442;
  std::bad_cast *v443;
  std::bad_cast *v444;
  std::bad_cast *v445;
  std::bad_cast *v446;
  std::bad_cast *v447;
  std::bad_cast *v448;
  std::bad_cast *v449;
  std::bad_cast *v450;
  std::bad_cast *v451;
  std::bad_cast *v452;
  std::bad_cast *v453;
  std::bad_cast *v454;
  std::bad_cast *v455;
  std::bad_cast *v456;
  std::bad_cast *v457;
  std::bad_cast *v458;
  std::bad_cast *v459;
  std::bad_cast *v460;
  std::bad_cast *v461;
  std::bad_cast *v462;
  std::bad_cast *v463;
  std::bad_cast *v464;
  std::bad_cast *v465;
  std::bad_cast *v466;
  std::bad_cast *v467;
  std::bad_cast *v468;
  std::bad_cast *v469;
  std::bad_cast *v470;
  std::bad_cast *v471;
  std::bad_cast *v472;
  std::bad_cast *v473;
  std::bad_cast *v474;
  std::bad_cast *v475;
  std::bad_cast *v476;
  std::bad_cast *v477;
  std::bad_cast *v478;
  std::bad_cast *v479;
  std::bad_cast *v480;
  std::bad_cast *v481;
  std::bad_cast *v482;
  std::bad_cast *v483;
  std::bad_cast *v484;
  std::bad_cast *v485;
  std::bad_cast *v486;
  std::bad_cast *v487;
  std::bad_cast *v488;
  std::bad_cast *v489;
  std::bad_cast *v490;
  std::bad_cast *v491;
  std::bad_cast *v492;
  std::bad_cast *v493;
  std::bad_cast *v494;
  std::bad_cast *v495;
  std::bad_cast *v496;
  std::bad_cast *v497;
  std::bad_cast *v498;
  std::bad_cast *v499;
  std::bad_cast *v500;
  std::bad_cast *v501;
  std::bad_cast *v502;
  std::bad_cast *v503;
  std::bad_cast *v504;
  std::bad_cast *v505;
  std::bad_cast *v506;
  std::bad_cast *v507;
  std::bad_cast *v508;
  std::bad_cast *v509;
  std::bad_cast *v510;
  std::bad_cast *v511;
  std::bad_cast *v512;
  std::bad_cast *v513;
  std::bad_cast *v514;
  std::bad_cast *v515;
  std::bad_cast *v516;
  std::bad_cast *v517;
  std::bad_cast *v518;
  std::bad_cast *v519;
  std::bad_cast *v520;
  std::bad_cast *v521;
  std::bad_cast *v522;
  char *v523;
  char **v524;
  char *v525;
  unint64_t v526;
  unint64_t v527;
  _BYTE v528[200];
  int v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  _BYTE v541[24];
  char v542[8];
  uint64_t v543;

  v543 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 1;
  v526 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v526);
  v5 = v526;
  v6 = *v4;
  v7 = *a2;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
  v9 = v526 - v8;
  if (v526 <= v8)
  {
    if (v526 >= v8)
    {
      v28 = *a2;
      v523 = v6;
      if (v6 != *a2)
        goto LABEL_35;
      return;
    }
    v23 = &v7[24 * v526];
    if (v6 != v23)
    {
      v24 = v6;
      do
      {
        v26 = (void *)*((_QWORD *)v24 - 3);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *((_QWORD *)v6 - 2) = v25;
          operator delete(v25);
        }
        v6 = v24;
      }
      while (v24 != v23);
    }
    a2[1] = v23;
    v28 = *a2;
    v523 = v23;
    if (v23 == *a2)
      return;
    while (1)
    {
LABEL_35:
      v524 = (char **)v28;
      v529 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v529);
      v527 = 0x6DB6DB6DB6DB6DB7 * ((v524[1] - *v524) >> 5);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v527);
      v29 = v527;
      v30 = v524[1];
      v31 = *v524;
      v32 = 0x6DB6DB6DB6DB6DB7 * ((v30 - *v524) >> 5);
      v33 = v527 - v32;
      if (v527 <= v32)
      {
        if (v527 < v32)
        {
          v30 = &v31[224 * v527];
          v524[1] = v30;
        }
      }
      else
      {
        v34 = v524[2];
        if (0x6DB6DB6DB6DB6DB7 * ((v34 - v30) >> 5) >= v33)
        {
          v40 = &v30[224 * v33];
          do
          {
            *((_OWORD *)v30 + 12) = 0uLL;
            *((_OWORD *)v30 + 13) = 0uLL;
            *((_OWORD *)v30 + 10) = 0uLL;
            *((_OWORD *)v30 + 11) = 0uLL;
            *((_OWORD *)v30 + 8) = 0uLL;
            *((_OWORD *)v30 + 9) = 0uLL;
            *((_OWORD *)v30 + 6) = 0uLL;
            *((_OWORD *)v30 + 7) = 0uLL;
            *((_OWORD *)v30 + 4) = 0uLL;
            *((_OWORD *)v30 + 5) = 0uLL;
            *((_OWORD *)v30 + 2) = 0uLL;
            *((_OWORD *)v30 + 3) = 0uLL;
            *(_OWORD *)v30 = 0uLL;
            *((_OWORD *)v30 + 1) = 0uLL;
            *((_QWORD *)v30 + 24) = 0x3FF0000000000000;
            v30 += 224;
          }
          while (v30 != v40);
          v53 = v524;
          v524[1] = v40;
        }
        else
        {
          if (v527 > 0x124924924924924)
            sub_20EABADD4();
          v35 = 0x6DB6DB6DB6DB6DB7 * ((v34 - v31) >> 5);
          v36 = 2 * v35;
          if (2 * v35 <= v527)
            v36 = v527;
          if (v35 >= 0x92492492492492)
            v37 = 0x124924924924924;
          else
            v37 = v36;
          if (v37 > 0x124924924924924)
            sub_20E877A38();
          v38 = (char *)operator new(224 * v37);
          v39 = &v38[224 * v32];
          v40 = &v38[224 * v29];
          v41 = v39;
          do
          {
            *((_OWORD *)v41 + 12) = 0uLL;
            *((_OWORD *)v41 + 13) = 0uLL;
            *((_OWORD *)v41 + 10) = 0uLL;
            *((_OWORD *)v41 + 11) = 0uLL;
            *((_OWORD *)v41 + 8) = 0uLL;
            *((_OWORD *)v41 + 9) = 0uLL;
            *((_OWORD *)v41 + 6) = 0uLL;
            *((_OWORD *)v41 + 7) = 0uLL;
            *((_OWORD *)v41 + 4) = 0uLL;
            *((_OWORD *)v41 + 5) = 0uLL;
            *((_OWORD *)v41 + 2) = 0uLL;
            *((_OWORD *)v41 + 3) = 0uLL;
            *(_OWORD *)v41 = 0uLL;
            *((_OWORD *)v41 + 1) = 0uLL;
            *((_QWORD *)v41 + 24) = 0x3FF0000000000000;
            v41 += 224;
          }
          while (v41 != v40);
          if (v30 != v31)
          {
            do
            {
              v42 = *((_OWORD *)v30 - 13);
              *((_OWORD *)v39 - 14) = *((_OWORD *)v30 - 14);
              *((_OWORD *)v39 - 13) = v42;
              v43 = *((_OWORD *)v30 - 12);
              v44 = *((_OWORD *)v30 - 11);
              v45 = *((_OWORD *)v30 - 9);
              *((_OWORD *)v39 - 10) = *((_OWORD *)v30 - 10);
              *((_OWORD *)v39 - 9) = v45;
              *((_OWORD *)v39 - 12) = v43;
              *((_OWORD *)v39 - 11) = v44;
              v46 = *((_OWORD *)v30 - 8);
              v47 = *((_OWORD *)v30 - 7);
              v48 = *((_OWORD *)v30 - 5);
              *((_OWORD *)v39 - 6) = *((_OWORD *)v30 - 6);
              *((_OWORD *)v39 - 5) = v48;
              *((_OWORD *)v39 - 8) = v46;
              *((_OWORD *)v39 - 7) = v47;
              v49 = *((_OWORD *)v30 - 4);
              v50 = *((_OWORD *)v30 - 3);
              v51 = *((_OWORD *)v30 - 2);
              *(_OWORD *)(v39 - 23) = *(_OWORD *)(v30 - 23);
              *((_OWORD *)v39 - 3) = v50;
              *((_OWORD *)v39 - 2) = v51;
              *((_OWORD *)v39 - 4) = v49;
              v39 -= 224;
              v30 -= 224;
            }
            while (v30 != v31);
            v30 = v31;
          }
          v52 = &v38[224 * v37];
          v53 = v524;
          *v524 = v39;
          v524[1] = v40;
          v524[2] = v52;
          if (v30)
          {
            operator delete(v30);
            v40 = v524[1];
          }
        }
        v31 = *v53;
        v30 = v40;
      }
      if (v30 != v31)
        break;
LABEL_34:
      v28 = (char *)(v524 + 3);
      if (v524 + 3 == (char **)v523)
        return;
    }
    v525 = v30;
    while (1)
    {
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
      v56 = v530;
      if (v529 != 2 || DWORD1(v530) != 0)
      {
        exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        exception->__vftable = 0;
        v410 = std::bad_cast::bad_cast(exception);
        v410->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v410, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v58 = (_QWORD *)v531;
      *(_QWORD *)&v531 = 0;
      if (v58)
      {
        for (i = (char *)v58[4]; i != (char *)v58[6]; i -= 16)
        {
          v61 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v60 = *((_QWORD *)i - 1);
          v61(v60);
        }
        free(i);
        v62 = (_QWORD *)v58[3];
        if (v62)
        {
          do
          {
            v63 = (_QWORD *)*v62;
            free(v62);
            v62 = v63;
          }
          while (v63);
        }
        free(v58);
      }
      if (v56 >= 4)
      {
        sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
        if (v529 != 2 || DWORD1(v530))
        {
          v411 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v411->__vftable = 0;
          v412 = std::bad_cast::bad_cast(v411);
          v412->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v412, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        v64 = (_QWORD *)v531;
        *(_QWORD *)&v531 = 0;
        if (v64)
        {
          for (j = (char *)v64[4]; j != (char *)v64[6]; j -= 16)
          {
            v67 = (void (*)(uint64_t))*((_QWORD *)j - 2);
            v66 = *((_QWORD *)j - 1);
            v67(v66);
          }
          free(j);
          v72 = (_QWORD *)v64[3];
          if (v72)
          {
            do
            {
              v73 = (_QWORD *)*v72;
              free(v72);
              v72 = v73;
            }
            while (v73);
          }
          free(v64);
        }
        v74 = *(_QWORD *)(a1 + 48);
        sub_20E9EFAC4(v74, (uint64_t)&v529);
        switch(v529)
        {
          case 2:
            *((double *)v31 + 1) = (double)(unint64_t)v530;
            v75 = (_QWORD *)v531;
            *(_QWORD *)&v531 = 0;
            if (!v75)
              goto LABEL_113;
            break;
          case 3:
            *((double *)v31 + 1) = (double)(uint64_t)v530;
            v75 = (_QWORD *)v531;
            *(_QWORD *)&v531 = 0;
            if (!v75)
              goto LABEL_113;
            break;
          case 4:
            *((_QWORD *)v31 + 1) = v530;
            v75 = (_QWORD *)v531;
            *(_QWORD *)&v531 = 0;
            if (!v75)
            {
LABEL_113:
              sub_20E9EFAC4(v74, (uint64_t)&v529);
              switch(v529)
              {
                case 2:
                  *((double *)v31 + 2) = (double)(unint64_t)v530;
                  v85 = (_QWORD *)v531;
                  *(_QWORD *)&v531 = 0;
                  if (!v85)
                    goto LABEL_141;
                  break;
                case 3:
                  *((double *)v31 + 2) = (double)(uint64_t)v530;
                  v85 = (_QWORD *)v531;
                  *(_QWORD *)&v531 = 0;
                  if (!v85)
                    goto LABEL_141;
                  break;
                case 4:
                  *((_QWORD *)v31 + 2) = v530;
                  v85 = (_QWORD *)v531;
                  *(_QWORD *)&v531 = 0;
                  if (!v85)
                  {
LABEL_141:
                    sub_20E9EFAC4(v74, (uint64_t)&v529);
                    switch(v529)
                    {
                      case 2:
                        *((double *)v31 + 3) = (double)(unint64_t)v530;
                        v97 = (_QWORD *)v531;
                        *(_QWORD *)&v531 = 0;
                        if (!v97)
                          goto LABEL_169;
                        break;
                      case 3:
                        *((double *)v31 + 3) = (double)(uint64_t)v530;
                        v97 = (_QWORD *)v531;
                        *(_QWORD *)&v531 = 0;
                        if (!v97)
                          goto LABEL_169;
                        break;
                      case 4:
                        *((_QWORD *)v31 + 3) = v530;
                        v97 = (_QWORD *)v531;
                        *(_QWORD *)&v531 = 0;
                        if (!v97)
                        {
LABEL_169:
                          sub_20E9EFAC4(v74, (uint64_t)&v529);
                          switch(v529)
                          {
                            case 2:
                              *((double *)v31 + 4) = (double)(unint64_t)v530;
                              v109 = (_QWORD *)v531;
                              *(_QWORD *)&v531 = 0;
                              if (!v109)
                                goto LABEL_197;
                              break;
                            case 3:
                              *((double *)v31 + 4) = (double)(uint64_t)v530;
                              v109 = (_QWORD *)v531;
                              *(_QWORD *)&v531 = 0;
                              if (!v109)
                                goto LABEL_197;
                              break;
                            case 4:
                              *((_QWORD *)v31 + 4) = v530;
                              v109 = (_QWORD *)v531;
                              *(_QWORD *)&v531 = 0;
                              if (!v109)
                              {
LABEL_197:
                                sub_20E9EFAC4(v74, (uint64_t)&v529);
                                switch(v529)
                                {
                                  case 2:
                                    *((double *)v31 + 5) = (double)(unint64_t)v530;
                                    v121 = (_QWORD *)v531;
                                    *(_QWORD *)&v531 = 0;
                                    if (!v121)
                                      goto LABEL_225;
                                    break;
                                  case 3:
                                    *((double *)v31 + 5) = (double)(uint64_t)v530;
                                    v121 = (_QWORD *)v531;
                                    *(_QWORD *)&v531 = 0;
                                    if (!v121)
                                      goto LABEL_225;
                                    break;
                                  case 4:
                                    *((_QWORD *)v31 + 5) = v530;
                                    v121 = (_QWORD *)v531;
                                    *(_QWORD *)&v531 = 0;
                                    if (!v121)
                                    {
LABEL_225:
                                      sub_20E9EFAC4(v74, (uint64_t)&v529);
                                      switch(v529)
                                      {
                                        case 2:
                                          *((double *)v31 + 6) = (double)(unint64_t)v530;
                                          v133 = (_QWORD *)v531;
                                          *(_QWORD *)&v531 = 0;
                                          if (!v133)
                                            goto LABEL_253;
                                          break;
                                        case 3:
                                          *((double *)v31 + 6) = (double)(uint64_t)v530;
                                          v133 = (_QWORD *)v531;
                                          *(_QWORD *)&v531 = 0;
                                          if (!v133)
                                            goto LABEL_253;
                                          break;
                                        case 4:
                                          *((_QWORD *)v31 + 6) = v530;
                                          v133 = (_QWORD *)v531;
                                          *(_QWORD *)&v531 = 0;
                                          if (!v133)
                                          {
LABEL_253:
                                            sub_20E9EFAC4(v74, (uint64_t)&v529);
                                            switch(v529)
                                            {
                                              case 2:
                                                *((double *)v31 + 7) = (double)(unint64_t)v530;
                                                v145 = (_QWORD *)v531;
                                                *(_QWORD *)&v531 = 0;
                                                if (!v145)
                                                  goto LABEL_281;
                                                break;
                                              case 3:
                                                *((double *)v31 + 7) = (double)(uint64_t)v530;
                                                v145 = (_QWORD *)v531;
                                                *(_QWORD *)&v531 = 0;
                                                if (!v145)
                                                  goto LABEL_281;
                                                break;
                                              case 4:
                                                *((_QWORD *)v31 + 7) = v530;
                                                v145 = (_QWORD *)v531;
                                                *(_QWORD *)&v531 = 0;
                                                if (!v145)
                                                {
LABEL_281:
                                                  sub_20E9EFAC4(v74, (uint64_t)&v529);
                                                  switch(v529)
                                                  {
                                                    case 2:
                                                      *((double *)v31 + 8) = (double)(unint64_t)v530;
                                                      v157 = (_QWORD *)v531;
                                                      *(_QWORD *)&v531 = 0;
                                                      if (!v157)
                                                        goto LABEL_309;
                                                      break;
                                                    case 3:
                                                      *((double *)v31 + 8) = (double)(uint64_t)v530;
                                                      v157 = (_QWORD *)v531;
                                                      *(_QWORD *)&v531 = 0;
                                                      if (!v157)
                                                        goto LABEL_309;
                                                      break;
                                                    case 4:
                                                      *((_QWORD *)v31 + 8) = v530;
                                                      v157 = (_QWORD *)v531;
                                                      *(_QWORD *)&v531 = 0;
                                                      if (!v157)
                                                      {
LABEL_309:
                                                        sub_20E9EFAC4(v74, (uint64_t)&v529);
                                                        switch(v529)
                                                        {
                                                          case 2:
                                                            *((double *)v31 + 9) = (double)(unint64_t)v530;
                                                            v169 = (_QWORD *)v531;
                                                            *(_QWORD *)&v531 = 0;
                                                            if (!v169)
                                                              goto LABEL_337;
                                                            break;
                                                          case 3:
                                                            *((double *)v31 + 9) = (double)(uint64_t)v530;
                                                            v169 = (_QWORD *)v531;
                                                            *(_QWORD *)&v531 = 0;
                                                            if (!v169)
                                                              goto LABEL_337;
                                                            break;
                                                          case 4:
                                                            *((_QWORD *)v31 + 9) = v530;
                                                            v169 = (_QWORD *)v531;
                                                            *(_QWORD *)&v531 = 0;
                                                            if (!v169)
                                                            {
LABEL_337:
                                                              v181 = *(_QWORD *)(a1 + 48);
                                                              sub_20E9EFAC4(v181, (uint64_t)&v529);
                                                              switch(v529)
                                                              {
                                                                case 2:
                                                                  *((double *)v31 + 10) = (double)(unint64_t)v530;
                                                                  v182 = (_QWORD *)v531;
                                                                  *(_QWORD *)&v531 = 0;
                                                                  if (!v182)
                                                                    goto LABEL_365;
                                                                  break;
                                                                case 3:
                                                                  *((double *)v31 + 10) = (double)(uint64_t)v530;
                                                                  v182 = (_QWORD *)v531;
                                                                  *(_QWORD *)&v531 = 0;
                                                                  if (!v182)
                                                                    goto LABEL_365;
                                                                  break;
                                                                case 4:
                                                                  *((_QWORD *)v31 + 10) = v530;
                                                                  v182 = (_QWORD *)v531;
                                                                  *(_QWORD *)&v531 = 0;
                                                                  if (!v182)
                                                                  {
LABEL_365:
                                                                    sub_20E9EFAC4(v181, (uint64_t)&v529);
                                                                    switch(v529)
                                                                    {
                                                                      case 2:
                                                                        *((double *)v31 + 11) = (double)(unint64_t)v530;
                                                                        v195 = (_QWORD *)v531;
                                                                        *(_QWORD *)&v531 = 0;
                                                                        if (!v195)
                                                                          goto LABEL_393;
                                                                        break;
                                                                      case 3:
                                                                        *((double *)v31 + 11) = (double)(uint64_t)v530;
                                                                        v195 = (_QWORD *)v531;
                                                                        *(_QWORD *)&v531 = 0;
                                                                        if (!v195)
                                                                          goto LABEL_393;
                                                                        break;
                                                                      case 4:
                                                                        *((_QWORD *)v31 + 11) = v530;
                                                                        v195 = (_QWORD *)v531;
                                                                        *(_QWORD *)&v531 = 0;
                                                                        if (!v195)
                                                                        {
LABEL_393:
                                                                          sub_20E9EFAC4(v181, (uint64_t)&v529);
                                                                          switch(v529)
                                                                          {
                                                                            case 2:
                                                                              *((double *)v31 + 12) = (double)(unint64_t)v530;
                                                                              v207 = (_QWORD *)v531;
                                                                              *(_QWORD *)&v531 = 0;
                                                                              if (!v207)
                                                                                goto LABEL_421;
                                                                              break;
                                                                            case 3:
                                                                              *((double *)v31 + 12) = (double)(uint64_t)v530;
                                                                              v207 = (_QWORD *)v531;
                                                                              *(_QWORD *)&v531 = 0;
                                                                              if (!v207)
                                                                                goto LABEL_421;
                                                                              break;
                                                                            case 4:
                                                                              *((_QWORD *)v31 + 12) = v530;
                                                                              v207 = (_QWORD *)v531;
                                                                              *(_QWORD *)&v531 = 0;
                                                                              if (!v207)
                                                                              {
LABEL_421:
                                                                                sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
                                                                                switch(v529)
                                                                                {
                                                                                  case 2:
                                                                                    *((double *)v31 + 13) = (double)(unint64_t)v530;
                                                                                    v219 = (_QWORD *)v531;
                                                                                    *(_QWORD *)&v531 = 0;
                                                                                    if (!v219)
                                                                                      goto LABEL_449;
                                                                                    break;
                                                                                  case 3:
                                                                                    *((double *)v31 + 13) = (double)(uint64_t)v530;
                                                                                    v219 = (_QWORD *)v531;
                                                                                    *(_QWORD *)&v531 = 0;
                                                                                    if (!v219)
                                                                                      goto LABEL_449;
                                                                                    break;
                                                                                  case 4:
                                                                                    *((_QWORD *)v31 + 13) = v530;
                                                                                    v219 = (_QWORD *)v531;
                                                                                    *(_QWORD *)&v531 = 0;
                                                                                    if (!v219)
                                                                                    {
LABEL_449:
                                                                                      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
                                                                                      switch(v529)
                                                                                      {
                                                                                        case 2:
                                                                                          *((double *)v31 + 14) = (double)(unint64_t)v530;
                                                                                          v231 = (_QWORD *)v531;
                                                                                          *(_QWORD *)&v531 = 0;
                                                                                          if (!v231)
                                                                                            goto LABEL_477;
                                                                                          break;
                                                                                        case 3:
                                                                                          *((double *)v31 + 14) = (double)(uint64_t)v530;
                                                                                          v231 = (_QWORD *)v531;
                                                                                          *(_QWORD *)&v531 = 0;
                                                                                          if (!v231)
                                                                                            goto LABEL_477;
                                                                                          break;
                                                                                        case 4:
                                                                                          *((_QWORD *)v31 + 14) = v530;
                                                                                          v231 = (_QWORD *)v531;
                                                                                          *(_QWORD *)&v531 = 0;
                                                                                          if (!v231)
                                                                                          {
LABEL_477:
                                                                                            sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
                                                                                            if (v529 != 2
                                                                                              || (v243 = v530,
                                                                                                  DWORD1(v530)))
                                                                                            {
                                                                                              v415 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                              v415->__vftable = 0;
                                                                                              v416 = std::bad_cast::bad_cast(v415);
                                                                                              v416->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                              __cxa_throw(v416, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                            }
                                                                                            v244 = (_QWORD *)v531;
                                                                                            *(_QWORD *)&v531 = 0;
                                                                                            if (v244)
                                                                                            {
                                                                                              for (k = (char *)v244[4];
                                                                                                    k != (char *)v244[6];
                                                                                                    k -= 16)
                                                                                              {
                                                                                                v247 = (void (*)(uint64_t))*((_QWORD *)k - 2);
                                                                                                v246 = *((_QWORD *)k - 1);
                                                                                                v247(v246);
                                                                                              }
                                                                                              free(k);
                                                                                              v248 = (_QWORD *)v244[3];
                                                                                              if (v248)
                                                                                              {
                                                                                                do
                                                                                                {
                                                                                                  v249 = (_QWORD *)*v248;
                                                                                                  free(v248);
                                                                                                  v248 = v249;
                                                                                                }
                                                                                                while (v249);
                                                                                              }
                                                                                              free(v244);
                                                                                            }
                                                                                            v250 = *(_QWORD *)(a1 + 48);
                                                                                            sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                            switch(v529)
                                                                                            {
                                                                                              case 2:
                                                                                                *((double *)v31 + 15) = (double)(unint64_t)v530;
                                                                                                v251 = (_QWORD *)v531;
                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                if (!v251)
                                                                                                  goto LABEL_523;
                                                                                                break;
                                                                                              case 3:
                                                                                                *((double *)v31 + 15) = (double)(uint64_t)v530;
                                                                                                v251 = (_QWORD *)v531;
                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                if (!v251)
                                                                                                  goto LABEL_523;
                                                                                                break;
                                                                                              case 4:
                                                                                                *((_QWORD *)v31 + 15) = v530;
                                                                                                v251 = (_QWORD *)v531;
                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                if (!v251)
                                                                                                {
LABEL_523:
                                                                                                  sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                  switch(v529)
                                                                                                  {
                                                                                                    case 2:
                                                                                                      *((double *)v31 + 16) = (double)(unint64_t)v530;
                                                                                                      v271 = (_QWORD *)v531;
                                                                                                      *(_QWORD *)&v531 = 0;
                                                                                                      if (!v271)
                                                                                                        goto LABEL_551;
                                                                                                      break;
                                                                                                    case 3:
                                                                                                      *((double *)v31 + 16) = (double)(uint64_t)v530;
                                                                                                      v271 = (_QWORD *)v531;
                                                                                                      *(_QWORD *)&v531 = 0;
                                                                                                      if (!v271)
                                                                                                        goto LABEL_551;
                                                                                                      break;
                                                                                                    case 4:
                                                                                                      *((_QWORD *)v31 + 16) = v530;
                                                                                                      v271 = (_QWORD *)v531;
                                                                                                      *(_QWORD *)&v531 = 0;
                                                                                                      if (!v271)
                                                                                                      {
LABEL_551:
                                                                                                        sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                        switch(v529)
                                                                                                        {
                                                                                                          case 2:
                                                                                                            *((double *)v31 + 17) = (double)(unint64_t)v530;
                                                                                                            v283 = (_QWORD *)v531;
                                                                                                            *(_QWORD *)&v531 = 0;
                                                                                                            if (!v283)
                                                                                                              goto LABEL_579;
                                                                                                            break;
                                                                                                          case 3:
                                                                                                            *((double *)v31 + 17) = (double)(uint64_t)v530;
                                                                                                            v283 = (_QWORD *)v531;
                                                                                                            *(_QWORD *)&v531 = 0;
                                                                                                            if (!v283)
                                                                                                              goto LABEL_579;
                                                                                                            break;
                                                                                                          case 4:
                                                                                                            *((_QWORD *)v31 + 17) = v530;
                                                                                                            v283 = (_QWORD *)v531;
                                                                                                            *(_QWORD *)&v531 = 0;
                                                                                                            if (!v283)
                                                                                                            {
LABEL_579:
                                                                                                              sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                              switch(v529)
                                                                                                              {
                                                                                                                case 2:
                                                                                                                  *((double *)v31 + 18) = (double)(unint64_t)v530;
                                                                                                                  v295 = (_QWORD *)v531;
                                                                                                                  *(_QWORD *)&v531 = 0;
                                                                                                                  if (!v295)
                                                                                                                    goto LABEL_607;
                                                                                                                  break;
                                                                                                                case 3:
                                                                                                                  *((double *)v31 + 18) = (double)(uint64_t)v530;
                                                                                                                  v295 = (_QWORD *)v531;
                                                                                                                  *(_QWORD *)&v531 = 0;
                                                                                                                  if (!v295)
                                                                                                                    goto LABEL_607;
                                                                                                                  break;
                                                                                                                case 4:
                                                                                                                  *((_QWORD *)v31 + 18) = v530;
                                                                                                                  v295 = (_QWORD *)v531;
                                                                                                                  *(_QWORD *)&v531 = 0;
                                                                                                                  if (!v295)
                                                                                                                  {
LABEL_607:
                                                                                                                    sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                                    switch(v529)
                                                                                                                    {
                                                                                                                      case 2:
                                                                                                                        *((double *)v31 + 19) = (double)(unint64_t)v530;
                                                                                                                        v307 = (_QWORD *)v531;
                                                                                                                        *(_QWORD *)&v531 = 0;
                                                                                                                        if (!v307)
                                                                                                                          goto LABEL_635;
                                                                                                                        break;
                                                                                                                      case 3:
                                                                                                                        *((double *)v31 + 19) = (double)(uint64_t)v530;
                                                                                                                        v307 = (_QWORD *)v531;
                                                                                                                        *(_QWORD *)&v531 = 0;
                                                                                                                        if (!v307)
                                                                                                                          goto LABEL_635;
                                                                                                                        break;
                                                                                                                      case 4:
                                                                                                                        *((_QWORD *)v31 + 19) = v530;
                                                                                                                        v307 = (_QWORD *)v531;
                                                                                                                        *(_QWORD *)&v531 = 0;
                                                                                                                        if (!v307)
                                                                                                                        {
LABEL_635:
                                                                                                                          sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                                          switch(v529)
                                                                                                                          {
                                                                                                                            case 2:
                                                                                                                              *((double *)v31 + 20) = (double)(unint64_t)v530;
                                                                                                                              v319 = (_QWORD *)v531;
                                                                                                                              *(_QWORD *)&v531 = 0;
                                                                                                                              if (!v319)
                                                                                                                                goto LABEL_663;
                                                                                                                              break;
                                                                                                                            case 3:
                                                                                                                              *((double *)v31 + 20) = (double)(uint64_t)v530;
                                                                                                                              v319 = (_QWORD *)v531;
                                                                                                                              *(_QWORD *)&v531 = 0;
                                                                                                                              if (!v319)
                                                                                                                                goto LABEL_663;
                                                                                                                              break;
                                                                                                                            case 4:
                                                                                                                              *((_QWORD *)v31 + 20) = v530;
                                                                                                                              v319 = (_QWORD *)v531;
                                                                                                                              *(_QWORD *)&v531 = 0;
                                                                                                                              if (!v319)
                                                                                                                              {
LABEL_663:
                                                                                                                                sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                                                switch(v529)
                                                                                                                                {
                                                                                                                                  case 2:
                                                                                                                                    *((double *)v31 + 21) = (double)(unint64_t)v530;
                                                                                                                                    v331 = (_QWORD *)v531;
                                                                                                                                    *(_QWORD *)&v531 = 0;
                                                                                                                                    if (!v331)
                                                                                                                                      goto LABEL_691;
                                                                                                                                    break;
                                                                                                                                  case 3:
                                                                                                                                    *((double *)v31 + 21) = (double)(uint64_t)v530;
                                                                                                                                    v331 = (_QWORD *)v531;
                                                                                                                                    *(_QWORD *)&v531 = 0;
                                                                                                                                    if (!v331)
                                                                                                                                      goto LABEL_691;
                                                                                                                                    break;
                                                                                                                                  case 4:
                                                                                                                                    *((_QWORD *)v31 + 21) = v530;
                                                                                                                                    v331 = (_QWORD *)v531;
                                                                                                                                    *(_QWORD *)&v531 = 0;
                                                                                                                                    if (!v331)
                                                                                                                                    {
LABEL_691:
                                                                                                                                      sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                                                      switch(v529)
                                                                                                                                      {
                                                                                                                                        case 2:
                                                                                                                                          *((double *)v31 + 22) = (double)(unint64_t)v530;
                                                                                                                                          v343 = (_QWORD *)v531;
                                                                                                                                          *(_QWORD *)&v531 = 0;
                                                                                                                                          if (!v343)
                                                                                                                                            goto LABEL_719;
                                                                                                                                          break;
                                                                                                                                        case 3:
                                                                                                                                          *((double *)v31 + 22) = (double)(uint64_t)v530;
                                                                                                                                          v343 = (_QWORD *)v531;
                                                                                                                                          *(_QWORD *)&v531 = 0;
                                                                                                                                          if (!v343)
                                                                                                                                            goto LABEL_719;
                                                                                                                                          break;
                                                                                                                                        case 4:
                                                                                                                                          *((_QWORD *)v31 + 22) = v530;
                                                                                                                                          v343 = (_QWORD *)v531;
                                                                                                                                          *(_QWORD *)&v531 = 0;
                                                                                                                                          if (!v343)
                                                                                                                                          {
LABEL_719:
                                                                                                                                            sub_20E9EFAC4(v250, (uint64_t)&v529);
                                                                                                                                            switch(v529)
                                                                                                                                            {
                                                                                                                                              case 2:
                                                                                                                                                *((double *)v31 + 23) = (double)(unint64_t)v530;
                                                                                                                                                v355 = (_QWORD *)v531;
                                                                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                                                                if (!v355)
                                                                                                                                                  goto LABEL_753;
                                                                                                                                                break;
                                                                                                                                              case 3:
                                                                                                                                                *((double *)v31 + 23) = (double)(uint64_t)v530;
                                                                                                                                                v355 = (_QWORD *)v531;
                                                                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                                                                if (!v355)
                                                                                                                                                  goto LABEL_753;
                                                                                                                                                break;
                                                                                                                                              case 4:
                                                                                                                                                *((_QWORD *)v31 + 23) = v530;
                                                                                                                                                v355 = (_QWORD *)v531;
                                                                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                                                                if (!v355)
                                                                                                                                                {
LABEL_753:
                                                                                                                                                  if ((v243 & 0xFFFFFFFE) != 0)
                                                                                                                                                    goto LABEL_754;
                                                                                                                                                  goto LABEL_777;
                                                                                                                                                }
                                                                                                                                                break;
                                                                                                                                              default:
                                                                                                                                                v509 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                                                v509->__vftable = 0;
                                                                                                                                                v510 = std::bad_cast::bad_cast(v509);
                                                                                                                                                v510->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                                                __cxa_throw(v510, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                                            }
                                                                                                                                            for (m = (char *)v355[4];
                                                                                                                                                  m != (char *)v355[6];
                                                                                                                                                  m -= 16)
                                                                                                                                            {
                                                                                                                                              v364 = (void (*)(uint64_t))*((_QWORD *)m - 2);
                                                                                                                                              v363 = *((_QWORD *)m - 1);
                                                                                                                                              v364(v363);
                                                                                                                                            }
                                                                                                                                            free(m);
                                                                                                                                            v365 = (_QWORD *)v355[3];
                                                                                                                                            if (v365)
                                                                                                                                            {
                                                                                                                                              do
                                                                                                                                              {
                                                                                                                                                v366 = (_QWORD *)*v365;
                                                                                                                                                free(v365);
                                                                                                                                                v365 = v366;
                                                                                                                                              }
                                                                                                                                              while (v366);
                                                                                                                                            }
                                                                                                                                            free(v355);
                                                                                                                                            if ((v243 & 0xFFFFFFFE) != 0)
                                                                                                                                            {
LABEL_754:
                                                                                                                                              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
                                                                                                                                              switch(v529)
                                                                                                                                              {
                                                                                                                                                case 2:
                                                                                                                                                  *((double *)v31 + 24) = (double)(unint64_t)v530;
                                                                                                                                                  v372 = (_QWORD *)v531;
                                                                                                                                                  *(_QWORD *)&v531 = 0;
                                                                                                                                                  if (!v372)
                                                                                                                                                    goto LABEL_777;
                                                                                                                                                  break;
                                                                                                                                                case 3:
                                                                                                                                                  *((double *)v31 + 24) = (double)(uint64_t)v530;
                                                                                                                                                  v372 = (_QWORD *)v531;
                                                                                                                                                  *(_QWORD *)&v531 = 0;
                                                                                                                                                  if (!v372)
                                                                                                                                                    goto LABEL_777;
                                                                                                                                                  break;
                                                                                                                                                case 4:
                                                                                                                                                  *((_QWORD *)v31 + 24) = v530;
                                                                                                                                                  v372 = (_QWORD *)v531;
                                                                                                                                                  *(_QWORD *)&v531 = 0;
                                                                                                                                                  if (!v372)
                                                                                                                                                    goto LABEL_777;
                                                                                                                                                  break;
                                                                                                                                                default:
                                                                                                                                                  v517 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                                                  v517->__vftable = 0;
                                                                                                                                                  v518 = std::bad_cast::bad_cast(v517);
                                                                                                                                                  v518->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                                                  __cxa_throw(v518, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                                              }
                                                                                                                                              for (n = (char *)v372[4];
                                                                                                                                                    n != (char *)v372[6];
                                                                                                                                                    n -= 16)
                                                                                                                                              {
                                                                                                                                                v376 = (void (*)(uint64_t))*((_QWORD *)n - 2);
                                                                                                                                                v375 = *((_QWORD *)n - 1);
                                                                                                                                                v376(v375);
                                                                                                                                              }
                                                                                                                                              free(n);
                                                                                                                                              v377 = (_QWORD *)v372[3];
                                                                                                                                              if (v377)
                                                                                                                                              {
                                                                                                                                                do
                                                                                                                                                {
                                                                                                                                                  v378 = (_QWORD *)*v377;
                                                                                                                                                  free(v377);
                                                                                                                                                  v377 = v378;
                                                                                                                                                }
                                                                                                                                                while (v378);
                                                                                                                                              }
                                                                                                                                              free(v372);
                                                                                                                                            }
LABEL_777:
                                                                                                                                            sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
                                                                                                                                            if (v529 != 2 || (v379 = v530, (unint64_t)v530 >= 0x100))
                                                                                                                                            {
                                                                                                                                              v419 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                                              v419->__vftable = 0;
                                                                                                                                              v420 = std::bad_cast::bad_cast(v419);
                                                                                                                                              v420->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                                              __cxa_throw(v420, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                                            }
                                                                                                                                            v380 = (_QWORD *)v531;
                                                                                                                                            *(_QWORD *)&v531 = 0;
                                                                                                                                            if (v380)
                                                                                                                                            {
                                                                                                                                              for (ii = (char *)v380[4];
                                                                                                                                                    ii != (char *)v380[6];
                                                                                                                                                    ii -= 16)
                                                                                                                                              {
                                                                                                                                                v383 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
                                                                                                                                                v382 = *((_QWORD *)ii - 1);
                                                                                                                                                v383(v382);
                                                                                                                                              }
                                                                                                                                              free(ii);
                                                                                                                                              v384 = (_QWORD *)v380[3];
                                                                                                                                              if (v384)
                                                                                                                                              {
                                                                                                                                                do
                                                                                                                                                {
                                                                                                                                                  v385 = (_QWORD *)*v384;
                                                                                                                                                  free(v384);
                                                                                                                                                  v384 = v385;
                                                                                                                                                }
                                                                                                                                                while (v385);
                                                                                                                                              }
                                                                                                                                              free(v380);
                                                                                                                                            }
                                                                                                                                            if (!v379)
                                                                                                                                            {
                                                                                                                                              if (v31[208])
                                                                                                                                                v31[208] = 0;
                                                                                                                                              goto LABEL_818;
                                                                                                                                            }
                                                                                                                                            if (!v31[208])
                                                                                                                                            {
                                                                                                                                              *((_QWORD *)v31 + 25) = 0;
                                                                                                                                              v31[208] = 1;
                                                                                                                                            }
                                                                                                                                            sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
                                                                                                                                            switch(v529)
                                                                                                                                            {
                                                                                                                                              case 2:
                                                                                                                                                *((double *)v31 + 25) = (double)(unint64_t)v530;
                                                                                                                                                v386 = (_QWORD *)v531;
                                                                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                                                                if (v386)
                                                                                                                                                  goto LABEL_812;
                                                                                                                                                break;
                                                                                                                                              case 3:
                                                                                                                                                *((double *)v31 + 25) = (double)(uint64_t)v530;
                                                                                                                                                v386 = (_QWORD *)v531;
                                                                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                                                                if (v386)
                                                                                                                                                  goto LABEL_812;
                                                                                                                                                break;
                                                                                                                                              case 4:
                                                                                                                                                *((_QWORD *)v31 + 25) = v530;
                                                                                                                                                v386 = (_QWORD *)v531;
                                                                                                                                                *(_QWORD *)&v531 = 0;
                                                                                                                                                if (!v386)
                                                                                                                                                  break;
LABEL_812:
                                                                                                                                                for (jj = (char *)v386[4];
                                                                                                                                                      jj != (char *)v386[6];
                                                                                                                                                      jj -= 16)
                                                                                                                                                {
                                                                                                                                                  v395 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
                                                                                                                                                  v394 = *((_QWORD *)jj - 1);
                                                                                                                                                  v395(v394);
                                                                                                                                                }
                                                                                                                                                free(jj);
                                                                                                                                                v396 = (_QWORD *)v386[3];
                                                                                                                                                if (v396)
                                                                                                                                                {
                                                                                                                                                  do
                                                                                                                                                  {
                                                                                                                                                    v397 = (_QWORD *)*v396;
                                                                                                                                                    free(v396);
                                                                                                                                                    v396 = v397;
                                                                                                                                                  }
                                                                                                                                                  while (v397);
                                                                                                                                                }
                                                                                                                                                free(v386);
                                                                                                                                                break;
                                                                                                                                              default:
                                                                                                                                                v515 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                                                v515->__vftable = 0;
                                                                                                                                                v516 = std::bad_cast::bad_cast(v515);
                                                                                                                                                v516->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                                                __cxa_throw(v516, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                                            }
LABEL_818:
                                                                                                                                            sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&v529);
                                                                                                                                            if (v529 != 1)
                                                                                                                                            {
                                                                                                                                              v421 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                                              v421->__vftable = 0;
                                                                                                                                              v422 = std::bad_cast::bad_cast(v421);
                                                                                                                                              v422->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                                              __cxa_throw(v422, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                                            }
                                                                                                                                            v31[216] = v530;
                                                                                                                                            v398 = (_QWORD *)v531;
                                                                                                                                            *(_QWORD *)&v531 = 0;
                                                                                                                                            if (v398)
                                                                                                                                            {
                                                                                                                                              for (kk = (char *)v398[4];
                                                                                                                                                    kk != (char *)v398[6];
                                                                                                                                                    kk -= 16)
                                                                                                                                              {
                                                                                                                                                v401 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
                                                                                                                                                v400 = *((_QWORD *)kk - 1);
                                                                                                                                                v401(v400);
                                                                                                                                              }
                                                                                                                                              free(kk);
                                                                                                                                              v402 = (_QWORD *)v398[3];
                                                                                                                                              if (v402)
                                                                                                                                              {
                                                                                                                                                do
                                                                                                                                                {
                                                                                                                                                  v403 = (_QWORD *)*v402;
                                                                                                                                                  free(v402);
                                                                                                                                                  v402 = v403;
                                                                                                                                                }
                                                                                                                                                while (v403);
                                                                                                                                              }
                                                                                                                                              free(v398);
                                                                                                                                            }
                                                                                                                                            goto LABEL_60;
                                                                                                                                          }
                                                                                                                                          break;
                                                                                                                                        default:
                                                                                                                                          v501 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                                          v501->__vftable = 0;
                                                                                                                                          v502 = std::bad_cast::bad_cast(v501);
                                                                                                                                          v502->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                                          __cxa_throw(v502, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                                      }
                                                                                                                                      for (mm = (char *)v343[4];
                                                                                                                                            mm != (char *)v343[6];
                                                                                                                                            mm -= 16)
                                                                                                                                      {
                                                                                                                                        v352 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
                                                                                                                                        v351 = *((_QWORD *)mm - 1);
                                                                                                                                        v352(v351);
                                                                                                                                      }
                                                                                                                                      free(mm);
                                                                                                                                      v353 = (_QWORD *)v343[3];
                                                                                                                                      if (v353)
                                                                                                                                      {
                                                                                                                                        do
                                                                                                                                        {
                                                                                                                                          v354 = (_QWORD *)*v353;
                                                                                                                                          free(v353);
                                                                                                                                          v353 = v354;
                                                                                                                                        }
                                                                                                                                        while (v354);
                                                                                                                                      }
                                                                                                                                      free(v343);
                                                                                                                                      goto LABEL_719;
                                                                                                                                    }
                                                                                                                                    break;
                                                                                                                                  default:
                                                                                                                                    v511 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                                    v511->__vftable = 0;
                                                                                                                                    v512 = std::bad_cast::bad_cast(v511);
                                                                                                                                    v512->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                                    __cxa_throw(v512, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                                }
                                                                                                                                for (nn = (char *)v331[4];
                                                                                                                                      nn != (char *)v331[6];
                                                                                                                                      nn -= 16)
                                                                                                                                {
                                                                                                                                  v340 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
                                                                                                                                  v339 = *((_QWORD *)nn - 1);
                                                                                                                                  v340(v339);
                                                                                                                                }
                                                                                                                                free(nn);
                                                                                                                                v341 = (_QWORD *)v331[3];
                                                                                                                                if (v341)
                                                                                                                                {
                                                                                                                                  do
                                                                                                                                  {
                                                                                                                                    v342 = (_QWORD *)*v341;
                                                                                                                                    free(v341);
                                                                                                                                    v341 = v342;
                                                                                                                                  }
                                                                                                                                  while (v342);
                                                                                                                                }
                                                                                                                                free(v331);
                                                                                                                                goto LABEL_691;
                                                                                                                              }
                                                                                                                              break;
                                                                                                                            default:
                                                                                                                              v495 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                              v495->__vftable = 0;
                                                                                                                              v496 = std::bad_cast::bad_cast(v495);
                                                                                                                              v496->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                              __cxa_throw(v496, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                          }
                                                                                                                          for (i1 = (char *)v319[4];
                                                                                                                                i1 != (char *)v319[6];
                                                                                                                                i1 -= 16)
                                                                                                                          {
                                                                                                                            v328 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
                                                                                                                            v327 = *((_QWORD *)i1 - 1);
                                                                                                                            v328(v327);
                                                                                                                          }
                                                                                                                          free(i1);
                                                                                                                          v329 = (_QWORD *)v319[3];
                                                                                                                          if (v329)
                                                                                                                          {
                                                                                                                            do
                                                                                                                            {
                                                                                                                              v330 = (_QWORD *)*v329;
                                                                                                                              free(v329);
                                                                                                                              v329 = v330;
                                                                                                                            }
                                                                                                                            while (v330);
                                                                                                                          }
                                                                                                                          free(v319);
                                                                                                                          goto LABEL_663;
                                                                                                                        }
                                                                                                                        break;
                                                                                                                      default:
                                                                                                                        v507 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                        v507->__vftable = 0;
                                                                                                                        v508 = std::bad_cast::bad_cast(v507);
                                                                                                                        v508->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                        __cxa_throw(v508, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                                    }
                                                                                                                    for (i2 = (char *)v307[4];
                                                                                                                          i2 != (char *)v307[6];
                                                                                                                          i2 -= 16)
                                                                                                                    {
                                                                                                                      v316 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
                                                                                                                      v315 = *((_QWORD *)i2 - 1);
                                                                                                                      v316(v315);
                                                                                                                    }
                                                                                                                    free(i2);
                                                                                                                    v317 = (_QWORD *)v307[3];
                                                                                                                    if (v317)
                                                                                                                    {
                                                                                                                      do
                                                                                                                      {
                                                                                                                        v318 = (_QWORD *)*v317;
                                                                                                                        free(v317);
                                                                                                                        v317 = v318;
                                                                                                                      }
                                                                                                                      while (v318);
                                                                                                                    }
                                                                                                                    free(v307);
                                                                                                                    goto LABEL_635;
                                                                                                                  }
                                                                                                                  break;
                                                                                                                default:
                                                                                                                  v487 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                                  v487->__vftable = 0;
                                                                                                                  v488 = std::bad_cast::bad_cast(v487);
                                                                                                                  v488->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                                  __cxa_throw(v488, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                              }
                                                                                                              for (i3 = (char *)v295[4];
                                                                                                                    i3 != (char *)v295[6];
                                                                                                                    i3 -= 16)
                                                                                                              {
                                                                                                                v304 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
                                                                                                                v303 = *((_QWORD *)i3 - 1);
                                                                                                                v304(v303);
                                                                                                              }
                                                                                                              free(i3);
                                                                                                              v305 = (_QWORD *)v295[3];
                                                                                                              if (v305)
                                                                                                              {
                                                                                                                do
                                                                                                                {
                                                                                                                  v306 = (_QWORD *)*v305;
                                                                                                                  free(v305);
                                                                                                                  v305 = v306;
                                                                                                                }
                                                                                                                while (v306);
                                                                                                              }
                                                                                                              free(v295);
                                                                                                              goto LABEL_607;
                                                                                                            }
                                                                                                            break;
                                                                                                          default:
                                                                                                            v461 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                            v461->__vftable = 0;
                                                                                                            v462 = std::bad_cast::bad_cast(v461);
                                                                                                            v462->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                            __cxa_throw(v462, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                        }
                                                                                                        for (i4 = (char *)v283[4];
                                                                                                              i4 != (char *)v283[6];
                                                                                                              i4 -= 16)
                                                                                                        {
                                                                                                          v292 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
                                                                                                          v291 = *((_QWORD *)i4 - 1);
                                                                                                          v292(v291);
                                                                                                        }
                                                                                                        free(i4);
                                                                                                        v293 = (_QWORD *)v283[3];
                                                                                                        if (v293)
                                                                                                        {
                                                                                                          do
                                                                                                          {
                                                                                                            v294 = (_QWORD *)*v293;
                                                                                                            free(v293);
                                                                                                            v293 = v294;
                                                                                                          }
                                                                                                          while (v294);
                                                                                                        }
                                                                                                        free(v283);
                                                                                                        goto LABEL_579;
                                                                                                      }
                                                                                                      break;
                                                                                                    default:
                                                                                                      v453 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                      v453->__vftable = 0;
                                                                                                      v454 = std::bad_cast::bad_cast(v453);
                                                                                                      v454->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                      __cxa_throw(v454, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                                  }
                                                                                                  for (i5 = (char *)v271[4];
                                                                                                        i5 != (char *)v271[6];
                                                                                                        i5 -= 16)
                                                                                                  {
                                                                                                    v280 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
                                                                                                    v279 = *((_QWORD *)i5 - 1);
                                                                                                    v280(v279);
                                                                                                  }
                                                                                                  free(i5);
                                                                                                  v281 = (_QWORD *)v271[3];
                                                                                                  if (v281)
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v282 = (_QWORD *)*v281;
                                                                                                      free(v281);
                                                                                                      v281 = v282;
                                                                                                    }
                                                                                                    while (v282);
                                                                                                  }
                                                                                                  free(v271);
                                                                                                  goto LABEL_551;
                                                                                                }
                                                                                                break;
                                                                                              default:
                                                                                                v481 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                                v481->__vftable = 0;
                                                                                                v482 = std::bad_cast::bad_cast(v481);
                                                                                                v482->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                                __cxa_throw(v482, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                            }
                                                                                            for (i6 = (char *)v251[4];
                                                                                                  i6 != (char *)v251[6];
                                                                                                  i6 -= 16)
                                                                                            {
                                                                                              v268 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
                                                                                              v267 = *((_QWORD *)i6 - 1);
                                                                                              v268(v267);
                                                                                            }
                                                                                            free(i6);
                                                                                            v269 = (_QWORD *)v251[3];
                                                                                            if (v269)
                                                                                            {
                                                                                              do
                                                                                              {
                                                                                                v270 = (_QWORD *)*v269;
                                                                                                free(v269);
                                                                                                v269 = v270;
                                                                                              }
                                                                                              while (v270);
                                                                                            }
                                                                                            free(v251);
                                                                                            goto LABEL_523;
                                                                                          }
                                                                                          break;
                                                                                        default:
                                                                                          v455 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                          v455->__vftable = 0;
                                                                                          v456 = std::bad_cast::bad_cast(v455);
                                                                                          v456->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                          __cxa_throw(v456, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                      }
                                                                                      for (i7 = (char *)v231[4];
                                                                                            i7 != (char *)v231[6];
                                                                                            i7 -= 16)
                                                                                      {
                                                                                        v240 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
                                                                                        v239 = *((_QWORD *)i7 - 1);
                                                                                        v240(v239);
                                                                                      }
                                                                                      free(i7);
                                                                                      v241 = (_QWORD *)v231[3];
                                                                                      if (v241)
                                                                                      {
                                                                                        do
                                                                                        {
                                                                                          v242 = (_QWORD *)*v241;
                                                                                          free(v241);
                                                                                          v241 = v242;
                                                                                        }
                                                                                        while (v242);
                                                                                      }
                                                                                      free(v231);
                                                                                      goto LABEL_477;
                                                                                    }
                                                                                    break;
                                                                                  default:
                                                                                    v463 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                                    v463->__vftable = 0;
                                                                                    v464 = std::bad_cast::bad_cast(v463);
                                                                                    v464->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                                    __cxa_throw(v464, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                                }
                                                                                for (i8 = (char *)v219[4];
                                                                                      i8 != (char *)v219[6];
                                                                                      i8 -= 16)
                                                                                {
                                                                                  v228 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
                                                                                  v227 = *((_QWORD *)i8 - 1);
                                                                                  v228(v227);
                                                                                }
                                                                                free(i8);
                                                                                v229 = (_QWORD *)v219[3];
                                                                                if (v229)
                                                                                {
                                                                                  do
                                                                                  {
                                                                                    v230 = (_QWORD *)*v229;
                                                                                    free(v229);
                                                                                    v229 = v230;
                                                                                  }
                                                                                  while (v230);
                                                                                }
                                                                                free(v219);
                                                                                goto LABEL_449;
                                                                              }
                                                                              break;
                                                                            default:
                                                                              v479 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                              v479->__vftable = 0;
                                                                              v480 = std::bad_cast::bad_cast(v479);
                                                                              v480->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                              __cxa_throw(v480, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                          }
                                                                          for (i9 = (char *)v207[4];
                                                                                i9 != (char *)v207[6];
                                                                                i9 -= 16)
                                                                          {
                                                                            v216 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
                                                                            v215 = *((_QWORD *)i9 - 1);
                                                                            v216(v215);
                                                                          }
                                                                          free(i9);
                                                                          v217 = (_QWORD *)v207[3];
                                                                          if (v217)
                                                                          {
                                                                            do
                                                                            {
                                                                              v218 = (_QWORD *)*v217;
                                                                              free(v217);
                                                                              v217 = v218;
                                                                            }
                                                                            while (v218);
                                                                          }
                                                                          free(v207);
                                                                          goto LABEL_421;
                                                                        }
                                                                        break;
                                                                      default:
                                                                        v451 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                        v451->__vftable = 0;
                                                                        v452 = std::bad_cast::bad_cast(v451);
                                                                        v452->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                        __cxa_throw(v452, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                                    }
                                                                    for (i10 = (char *)v195[4];
                                                                          i10 != (char *)v195[6];
                                                                          i10 -= 16)
                                                                    {
                                                                      v204 = (void (*)(uint64_t))*((_QWORD *)i10 - 2);
                                                                      v203 = *((_QWORD *)i10 - 1);
                                                                      v204(v203);
                                                                    }
                                                                    free(i10);
                                                                    v205 = (_QWORD *)v195[3];
                                                                    if (v205)
                                                                    {
                                                                      do
                                                                      {
                                                                        v206 = (_QWORD *)*v205;
                                                                        free(v205);
                                                                        v205 = v206;
                                                                      }
                                                                      while (v206);
                                                                    }
                                                                    free(v195);
                                                                    goto LABEL_393;
                                                                  }
                                                                  break;
                                                                default:
                                                                  v471 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                                  v471->__vftable = 0;
                                                                  v472 = std::bad_cast::bad_cast(v471);
                                                                  v472->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                                  __cxa_throw(v472, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                              }
                                                              for (i11 = (char *)v182[4]; i11 != (char *)v182[6]; i11 -= 16)
                                                              {
                                                                v192 = (void (*)(uint64_t))*((_QWORD *)i11 - 2);
                                                                v191 = *((_QWORD *)i11 - 1);
                                                                v192(v191);
                                                              }
                                                              free(i11);
                                                              v193 = (_QWORD *)v182[3];
                                                              if (v193)
                                                              {
                                                                do
                                                                {
                                                                  v194 = (_QWORD *)*v193;
                                                                  free(v193);
                                                                  v193 = v194;
                                                                }
                                                                while (v194);
                                                              }
                                                              free(v182);
                                                              goto LABEL_365;
                                                            }
                                                            break;
                                                          default:
                                                            v459 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                            v459->__vftable = 0;
                                                            v460 = std::bad_cast::bad_cast(v459);
                                                            v460->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                            __cxa_throw(v460, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                        }
                                                        for (i12 = (char *)v169[4]; i12 != (char *)v169[6]; i12 -= 16)
                                                        {
                                                          v178 = (void (*)(uint64_t))*((_QWORD *)i12 - 2);
                                                          v177 = *((_QWORD *)i12 - 1);
                                                          v178(v177);
                                                        }
                                                        free(i12);
                                                        v179 = (_QWORD *)v169[3];
                                                        if (v179)
                                                        {
                                                          do
                                                          {
                                                            v180 = (_QWORD *)*v179;
                                                            free(v179);
                                                            v179 = v180;
                                                          }
                                                          while (v180);
                                                        }
                                                        free(v169);
                                                        goto LABEL_337;
                                                      }
                                                      break;
                                                    default:
                                                      v443 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                      v443->__vftable = 0;
                                                      v444 = std::bad_cast::bad_cast(v443);
                                                      v444->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                      __cxa_throw(v444, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                                  }
                                                  for (i13 = (char *)v157[4]; i13 != (char *)v157[6]; i13 -= 16)
                                                  {
                                                    v166 = (void (*)(uint64_t))*((_QWORD *)i13 - 2);
                                                    v165 = *((_QWORD *)i13 - 1);
                                                    v166(v165);
                                                  }
                                                  free(i13);
                                                  v167 = (_QWORD *)v157[3];
                                                  if (v167)
                                                  {
                                                    do
                                                    {
                                                      v168 = (_QWORD *)*v167;
                                                      free(v167);
                                                      v167 = v168;
                                                    }
                                                    while (v168);
                                                  }
                                                  free(v157);
                                                  goto LABEL_309;
                                                }
                                                break;
                                              default:
                                                v469 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                                v469->__vftable = 0;
                                                v470 = std::bad_cast::bad_cast(v469);
                                                v470->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                                __cxa_throw(v470, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                            }
                                            for (i14 = (char *)v145[4]; i14 != (char *)v145[6]; i14 -= 16)
                                            {
                                              v154 = (void (*)(uint64_t))*((_QWORD *)i14 - 2);
                                              v153 = *((_QWORD *)i14 - 1);
                                              v154(v153);
                                            }
                                            free(i14);
                                            v155 = (_QWORD *)v145[3];
                                            if (v155)
                                            {
                                              do
                                              {
                                                v156 = (_QWORD *)*v155;
                                                free(v155);
                                                v155 = v156;
                                              }
                                              while (v156);
                                            }
                                            free(v145);
                                            goto LABEL_281;
                                          }
                                          break;
                                        default:
                                          v485 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                          v485->__vftable = 0;
                                          v486 = std::bad_cast::bad_cast(v485);
                                          v486->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                          __cxa_throw(v486, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                      }
                                      for (i15 = (char *)v133[4]; i15 != (char *)v133[6]; i15 -= 16)
                                      {
                                        v142 = (void (*)(uint64_t))*((_QWORD *)i15 - 2);
                                        v141 = *((_QWORD *)i15 - 1);
                                        v142(v141);
                                      }
                                      free(i15);
                                      v143 = (_QWORD *)v133[3];
                                      if (v143)
                                      {
                                        do
                                        {
                                          v144 = (_QWORD *)*v143;
                                          free(v143);
                                          v143 = v144;
                                        }
                                        while (v144);
                                      }
                                      free(v133);
                                      goto LABEL_253;
                                    }
                                    break;
                                  default:
                                    v425 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                                    v425->__vftable = 0;
                                    v426 = std::bad_cast::bad_cast(v425);
                                    v426->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                                    __cxa_throw(v426, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                                }
                                for (i16 = (char *)v121[4]; i16 != (char *)v121[6]; i16 -= 16)
                                {
                                  v130 = (void (*)(uint64_t))*((_QWORD *)i16 - 2);
                                  v129 = *((_QWORD *)i16 - 1);
                                  v130(v129);
                                }
                                free(i16);
                                v131 = (_QWORD *)v121[3];
                                if (v131)
                                {
                                  do
                                  {
                                    v132 = (_QWORD *)*v131;
                                    free(v131);
                                    v131 = v132;
                                  }
                                  while (v132);
                                }
                                free(v121);
                                goto LABEL_225;
                              }
                              break;
                            default:
                              v435 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                              v435->__vftable = 0;
                              v436 = std::bad_cast::bad_cast(v435);
                              v436->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                              __cxa_throw(v436, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                          }
                          for (i17 = (char *)v109[4]; i17 != (char *)v109[6]; i17 -= 16)
                          {
                            v118 = (void (*)(uint64_t))*((_QWORD *)i17 - 2);
                            v117 = *((_QWORD *)i17 - 1);
                            v118(v117);
                          }
                          free(i17);
                          v119 = (_QWORD *)v109[3];
                          if (v119)
                          {
                            do
                            {
                              v120 = (_QWORD *)*v119;
                              free(v119);
                              v119 = v120;
                            }
                            while (v120);
                          }
                          free(v109);
                          goto LABEL_197;
                        }
                        break;
                      default:
                        v429 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                        v429->__vftable = 0;
                        v430 = std::bad_cast::bad_cast(v429);
                        v430->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                        __cxa_throw(v430, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
                    }
                    for (i18 = (char *)v97[4]; i18 != (char *)v97[6]; i18 -= 16)
                    {
                      v106 = (void (*)(uint64_t))*((_QWORD *)i18 - 2);
                      v105 = *((_QWORD *)i18 - 1);
                      v106(v105);
                    }
                    free(i18);
                    v107 = (_QWORD *)v97[3];
                    if (v107)
                    {
                      do
                      {
                        v108 = (_QWORD *)*v107;
                        free(v107);
                        v107 = v108;
                      }
                      while (v108);
                    }
                    free(v97);
                    goto LABEL_169;
                  }
                  break;
                default:
                  v423 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v423->__vftable = 0;
                  v424 = std::bad_cast::bad_cast(v423);
                  v424->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                  __cxa_throw(v424, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              for (i19 = (char *)v85[4]; i19 != (char *)v85[6]; i19 -= 16)
              {
                v94 = (void (*)(uint64_t))*((_QWORD *)i19 - 2);
                v93 = *((_QWORD *)i19 - 1);
                v94(v93);
              }
              free(i19);
              v95 = (_QWORD *)v85[3];
              if (v95)
              {
                do
                {
                  v96 = (_QWORD *)*v95;
                  free(v95);
                  v95 = v96;
                }
                while (v96);
              }
              free(v85);
              goto LABEL_141;
            }
            break;
          default:
            v433 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v433->__vftable = 0;
            v434 = std::bad_cast::bad_cast(v433);
            v434->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v434, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        for (i20 = (char *)v75[4]; i20 != (char *)v75[6]; i20 -= 16)
        {
          v82 = (void (*)(uint64_t))*((_QWORD *)i20 - 2);
          v81 = *((_QWORD *)i20 - 1);
          v82(v81);
        }
        free(i20);
        v83 = (_QWORD *)v75[3];
        if (v83)
        {
          do
          {
            v84 = (_QWORD *)*v83;
            free(v83);
            v83 = v84;
          }
          while (v84);
        }
        free(v75);
        goto LABEL_113;
      }
      *(_QWORD *)v541 = 0;
      v539 = 0u;
      v540 = 0u;
      v537 = 0u;
      v538 = 0u;
      v535 = 0u;
      v536 = 0u;
      v533 = 0u;
      v534 = 0u;
      v531 = 0u;
      v532 = 0u;
      v530 = 0u;
      *(_OWORD *)&v541[8] = xmmword_21030D320;
      v542[0] = 0;
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)v528);
      if (*(_DWORD *)v528 != 2 || HIDWORD(*(_QWORD *)&v528[8]))
      {
        v413 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v413->__vftable = 0;
        v414 = std::bad_cast::bad_cast(v413);
        v414->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v414, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v68 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v68)
      {
        for (i21 = (char *)v68[4]; i21 != (char *)v68[6]; i21 -= 16)
        {
          v71 = (void (*)(uint64_t))*((_QWORD *)i21 - 2);
          v70 = *((_QWORD *)i21 - 1);
          v71(v70);
        }
        free(i21);
        v76 = (_QWORD *)v68[3];
        if (v76)
        {
          do
          {
            v77 = (_QWORD *)*v76;
            free(v76);
            v76 = v77;
          }
          while (v77);
        }
        free(v68);
      }
      v78 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
        break;
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v530 = (double)*(uint64_t *)&v528[8];
        v79 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v79)
          goto LABEL_125;
        goto LABEL_119;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v427 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v427->__vftable = 0;
        v428 = std::bad_cast::bad_cast(v427);
        v428->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v428, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v530 = *(_QWORD *)&v528[8];
      v79 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v79)
        goto LABEL_119;
LABEL_125:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v530 + 1) = (double)*(unint64_t *)&v528[8];
        v91 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v91)
          goto LABEL_153;
LABEL_147:
        for (i22 = (char *)v91[4]; i22 != (char *)v91[6]; i22 -= 16)
        {
          v100 = (void (*)(uint64_t))*((_QWORD *)i22 - 2);
          v99 = *((_QWORD *)i22 - 1);
          v100(v99);
        }
        free(i22);
        v101 = (_QWORD *)v91[3];
        if (v101)
        {
          do
          {
            v102 = (_QWORD *)*v101;
            free(v101);
            v101 = v102;
          }
          while (v102);
        }
        free(v91);
        goto LABEL_153;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v530 + 1) = (double)*(uint64_t *)&v528[8];
        v91 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v91)
          goto LABEL_153;
        goto LABEL_147;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v437 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v437->__vftable = 0;
        v438 = std::bad_cast::bad_cast(v437);
        v438->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v438, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v530 + 1) = *(_QWORD *)&v528[8];
      v91 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v91)
        goto LABEL_147;
LABEL_153:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v531 = (double)*(unint64_t *)&v528[8];
        v103 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v103)
          goto LABEL_181;
LABEL_175:
        for (i23 = (char *)v103[4]; i23 != (char *)v103[6]; i23 -= 16)
        {
          v112 = (void (*)(uint64_t))*((_QWORD *)i23 - 2);
          v111 = *((_QWORD *)i23 - 1);
          v112(v111);
        }
        free(i23);
        v113 = (_QWORD *)v103[3];
        if (v113)
        {
          do
          {
            v114 = (_QWORD *)*v113;
            free(v113);
            v113 = v114;
          }
          while (v114);
        }
        free(v103);
        goto LABEL_181;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v531 = (double)*(uint64_t *)&v528[8];
        v103 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v103)
          goto LABEL_181;
        goto LABEL_175;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v431 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v431->__vftable = 0;
        v432 = std::bad_cast::bad_cast(v431);
        v432->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v432, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v531 = *(_QWORD *)&v528[8];
      v103 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v103)
        goto LABEL_175;
LABEL_181:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v531 + 1) = (double)*(unint64_t *)&v528[8];
        v115 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v115)
          goto LABEL_209;
LABEL_203:
        for (i24 = (char *)v115[4]; i24 != (char *)v115[6]; i24 -= 16)
        {
          v124 = (void (*)(uint64_t))*((_QWORD *)i24 - 2);
          v123 = *((_QWORD *)i24 - 1);
          v124(v123);
        }
        free(i24);
        v125 = (_QWORD *)v115[3];
        if (v125)
        {
          do
          {
            v126 = (_QWORD *)*v125;
            free(v125);
            v125 = v126;
          }
          while (v126);
        }
        free(v115);
        goto LABEL_209;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v531 + 1) = (double)*(uint64_t *)&v528[8];
        v115 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v115)
          goto LABEL_209;
        goto LABEL_203;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v439 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v439->__vftable = 0;
        v440 = std::bad_cast::bad_cast(v439);
        v440->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v440, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v531 + 1) = *(_QWORD *)&v528[8];
      v115 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v115)
        goto LABEL_203;
LABEL_209:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v532 = (double)*(unint64_t *)&v528[8];
        v127 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v127)
          goto LABEL_237;
LABEL_231:
        for (i25 = (char *)v127[4]; i25 != (char *)v127[6]; i25 -= 16)
        {
          v136 = (void (*)(uint64_t))*((_QWORD *)i25 - 2);
          v135 = *((_QWORD *)i25 - 1);
          v136(v135);
        }
        free(i25);
        v137 = (_QWORD *)v127[3];
        if (v137)
        {
          do
          {
            v138 = (_QWORD *)*v137;
            free(v137);
            v137 = v138;
          }
          while (v138);
        }
        free(v127);
        goto LABEL_237;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v532 = (double)*(uint64_t *)&v528[8];
        v127 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v127)
          goto LABEL_237;
        goto LABEL_231;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v441 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v441->__vftable = 0;
        v442 = std::bad_cast::bad_cast(v441);
        v442->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v442, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v532 = *(_QWORD *)&v528[8];
      v127 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v127)
        goto LABEL_231;
LABEL_237:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v532 + 1) = (double)*(unint64_t *)&v528[8];
        v139 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v139)
          goto LABEL_265;
LABEL_259:
        for (i26 = (char *)v139[4]; i26 != (char *)v139[6]; i26 -= 16)
        {
          v148 = (void (*)(uint64_t))*((_QWORD *)i26 - 2);
          v147 = *((_QWORD *)i26 - 1);
          v148(v147);
        }
        free(i26);
        v149 = (_QWORD *)v139[3];
        if (v149)
        {
          do
          {
            v150 = (_QWORD *)*v149;
            free(v149);
            v149 = v150;
          }
          while (v150);
        }
        free(v139);
        goto LABEL_265;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v532 + 1) = (double)*(uint64_t *)&v528[8];
        v139 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v139)
          goto LABEL_265;
        goto LABEL_259;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v457 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v457->__vftable = 0;
        v458 = std::bad_cast::bad_cast(v457);
        v458->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v458, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v532 + 1) = *(_QWORD *)&v528[8];
      v139 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v139)
        goto LABEL_259;
LABEL_265:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v533 = (double)*(unint64_t *)&v528[8];
        v151 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v151)
          goto LABEL_293;
LABEL_287:
        for (i27 = (char *)v151[4]; i27 != (char *)v151[6]; i27 -= 16)
        {
          v160 = (void (*)(uint64_t))*((_QWORD *)i27 - 2);
          v159 = *((_QWORD *)i27 - 1);
          v160(v159);
        }
        free(i27);
        v161 = (_QWORD *)v151[3];
        if (v161)
        {
          do
          {
            v162 = (_QWORD *)*v161;
            free(v161);
            v161 = v162;
          }
          while (v162);
        }
        free(v151);
        goto LABEL_293;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v533 = (double)*(uint64_t *)&v528[8];
        v151 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v151)
          goto LABEL_293;
        goto LABEL_287;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v449 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v449->__vftable = 0;
        v450 = std::bad_cast::bad_cast(v449);
        v450->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v450, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v533 = *(_QWORD *)&v528[8];
      v151 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v151)
        goto LABEL_287;
LABEL_293:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v533 + 1) = (double)*(unint64_t *)&v528[8];
        v163 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v163)
          goto LABEL_321;
LABEL_315:
        for (i28 = (char *)v163[4]; i28 != (char *)v163[6]; i28 -= 16)
        {
          v172 = (void (*)(uint64_t))*((_QWORD *)i28 - 2);
          v171 = *((_QWORD *)i28 - 1);
          v172(v171);
        }
        free(i28);
        v173 = (_QWORD *)v163[3];
        if (v173)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            free(v173);
            v173 = v174;
          }
          while (v174);
        }
        free(v163);
        goto LABEL_321;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v533 + 1) = (double)*(uint64_t *)&v528[8];
        v163 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v163)
          goto LABEL_321;
        goto LABEL_315;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v483 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v483->__vftable = 0;
        v484 = std::bad_cast::bad_cast(v483);
        v484->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v484, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v533 + 1) = *(_QWORD *)&v528[8];
      v163 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v163)
        goto LABEL_315;
LABEL_321:
      sub_20E9EFAC4(v78, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v534 = (double)*(unint64_t *)&v528[8];
        v175 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v175)
          goto LABEL_349;
LABEL_343:
        for (i29 = (char *)v175[4]; i29 != (char *)v175[6]; i29 -= 16)
        {
          v185 = (void (*)(uint64_t))*((_QWORD *)i29 - 2);
          v184 = *((_QWORD *)i29 - 1);
          v185(v184);
        }
        free(i29);
        v186 = (_QWORD *)v175[3];
        if (v186)
        {
          do
          {
            v187 = (_QWORD *)*v186;
            free(v186);
            v186 = v187;
          }
          while (v187);
        }
        free(v175);
        goto LABEL_349;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v534 = (double)*(uint64_t *)&v528[8];
        v175 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v175)
          goto LABEL_349;
        goto LABEL_343;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v477 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v477->__vftable = 0;
        v478 = std::bad_cast::bad_cast(v477);
        v478->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v478, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v534 = *(_QWORD *)&v528[8];
      v175 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v175)
        goto LABEL_343;
LABEL_349:
      v188 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v188, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v534 + 1) = (double)*(unint64_t *)&v528[8];
        v189 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v189)
          goto LABEL_377;
LABEL_371:
        for (i30 = (char *)v189[4]; i30 != (char *)v189[6]; i30 -= 16)
        {
          v198 = (void (*)(uint64_t))*((_QWORD *)i30 - 2);
          v197 = *((_QWORD *)i30 - 1);
          v198(v197);
        }
        free(i30);
        v199 = (_QWORD *)v189[3];
        if (v199)
        {
          do
          {
            v200 = (_QWORD *)*v199;
            free(v199);
            v199 = v200;
          }
          while (v200);
        }
        free(v189);
        goto LABEL_377;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v534 + 1) = (double)*(uint64_t *)&v528[8];
        v189 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v189)
          goto LABEL_377;
        goto LABEL_371;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v491 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v491->__vftable = 0;
        v492 = std::bad_cast::bad_cast(v491);
        v492->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v492, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v534 + 1) = *(_QWORD *)&v528[8];
      v189 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v189)
        goto LABEL_371;
LABEL_377:
      sub_20E9EFAC4(v188, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v535 = (double)*(unint64_t *)&v528[8];
        v201 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v201)
          goto LABEL_405;
LABEL_399:
        for (i31 = (char *)v201[4]; i31 != (char *)v201[6]; i31 -= 16)
        {
          v210 = (void (*)(uint64_t))*((_QWORD *)i31 - 2);
          v209 = *((_QWORD *)i31 - 1);
          v210(v209);
        }
        free(i31);
        v211 = (_QWORD *)v201[3];
        if (v211)
        {
          do
          {
            v212 = (_QWORD *)*v211;
            free(v211);
            v211 = v212;
          }
          while (v212);
        }
        free(v201);
        goto LABEL_405;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v535 = (double)*(uint64_t *)&v528[8];
        v201 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v201)
          goto LABEL_405;
        goto LABEL_399;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v467 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v467->__vftable = 0;
        v468 = std::bad_cast::bad_cast(v467);
        v468->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v468, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v535 = *(_QWORD *)&v528[8];
      v201 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v201)
        goto LABEL_399;
LABEL_405:
      sub_20E9EFAC4(v188, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v535 + 1) = (double)*(unint64_t *)&v528[8];
        v213 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v213)
          goto LABEL_433;
LABEL_427:
        for (i32 = (char *)v213[4]; i32 != (char *)v213[6]; i32 -= 16)
        {
          v222 = (void (*)(uint64_t))*((_QWORD *)i32 - 2);
          v221 = *((_QWORD *)i32 - 1);
          v222(v221);
        }
        free(i32);
        v223 = (_QWORD *)v213[3];
        if (v223)
        {
          do
          {
            v224 = (_QWORD *)*v223;
            free(v223);
            v223 = v224;
          }
          while (v224);
        }
        free(v213);
        goto LABEL_433;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v535 + 1) = (double)*(uint64_t *)&v528[8];
        v213 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v213)
          goto LABEL_433;
        goto LABEL_427;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v465 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v465->__vftable = 0;
        v466 = std::bad_cast::bad_cast(v465);
        v466->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v466, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v535 + 1) = *(_QWORD *)&v528[8];
      v213 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v213)
        goto LABEL_427;
LABEL_433:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v536 = (double)*(unint64_t *)&v528[8];
        v225 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v225)
          goto LABEL_461;
LABEL_455:
        for (i33 = (char *)v225[4]; i33 != (char *)v225[6]; i33 -= 16)
        {
          v234 = (void (*)(uint64_t))*((_QWORD *)i33 - 2);
          v233 = *((_QWORD *)i33 - 1);
          v234(v233);
        }
        free(i33);
        v235 = (_QWORD *)v225[3];
        if (v235)
        {
          do
          {
            v236 = (_QWORD *)*v235;
            free(v235);
            v235 = v236;
          }
          while (v236);
        }
        free(v225);
        goto LABEL_461;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v536 = (double)*(uint64_t *)&v528[8];
        v225 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v225)
          goto LABEL_461;
        goto LABEL_455;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v493 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v493->__vftable = 0;
        v494 = std::bad_cast::bad_cast(v493);
        v494->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v494, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v536 = *(_QWORD *)&v528[8];
      v225 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v225)
        goto LABEL_455;
LABEL_461:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v536 + 1) = (double)*(unint64_t *)&v528[8];
        v237 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v237)
          goto LABEL_498;
        goto LABEL_492;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v536 + 1) = (double)*(uint64_t *)&v528[8];
        v237 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v237)
          goto LABEL_498;
LABEL_492:
        for (i34 = (char *)v237[4]; i34 != (char *)v237[6]; i34 -= 16)
        {
          v254 = (void (*)(uint64_t))*((_QWORD *)i34 - 2);
          v253 = *((_QWORD *)i34 - 1);
          v254(v253);
        }
        free(i34);
        v255 = (_QWORD *)v237[3];
        if (v255)
        {
          do
          {
            v256 = (_QWORD *)*v255;
            free(v255);
            v255 = v256;
          }
          while (v256);
        }
        free(v237);
        goto LABEL_498;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v475 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v475->__vftable = 0;
        v476 = std::bad_cast::bad_cast(v475);
        v476->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v476, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v536 + 1) = *(_QWORD *)&v528[8];
      v237 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v237)
        goto LABEL_492;
LABEL_498:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)v528);
      if (*(_DWORD *)v528 != 2 || (v257 = *(_DWORD *)&v528[8], HIDWORD(*(_QWORD *)&v528[8])))
      {
        v417 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v417->__vftable = 0;
        v418 = std::bad_cast::bad_cast(v417);
        v418->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v418, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v258 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v258)
      {
        for (i35 = (char *)v258[4]; i35 != (char *)v258[6]; i35 -= 16)
        {
          v261 = (void (*)(uint64_t))*((_QWORD *)i35 - 2);
          v260 = *((_QWORD *)i35 - 1);
          v261(v260);
        }
        free(i35);
        v262 = (_QWORD *)v258[3];
        if (v262)
        {
          do
          {
            v263 = (_QWORD *)*v262;
            free(v262);
            v262 = v263;
          }
          while (v263);
        }
        free(v258);
      }
      v264 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v537 = (double)*(unint64_t *)&v528[8];
        v265 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v265)
          goto LABEL_535;
LABEL_529:
        for (i36 = (char *)v265[4]; i36 != (char *)v265[6]; i36 -= 16)
        {
          v274 = (void (*)(uint64_t))*((_QWORD *)i36 - 2);
          v273 = *((_QWORD *)i36 - 1);
          v274(v273);
        }
        free(i36);
        v275 = (_QWORD *)v265[3];
        if (v275)
        {
          do
          {
            v276 = (_QWORD *)*v275;
            free(v275);
            v275 = v276;
          }
          while (v276);
        }
        free(v265);
        goto LABEL_535;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v537 = (double)*(uint64_t *)&v528[8];
        v265 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v265)
          goto LABEL_535;
        goto LABEL_529;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v473 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v473->__vftable = 0;
        v474 = std::bad_cast::bad_cast(v473);
        v474->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v474, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v537 = *(_QWORD *)&v528[8];
      v265 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v265)
        goto LABEL_529;
LABEL_535:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v537 + 1) = (double)*(unint64_t *)&v528[8];
        v277 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v277)
          goto LABEL_563;
LABEL_557:
        for (i37 = (char *)v277[4]; i37 != (char *)v277[6]; i37 -= 16)
        {
          v286 = (void (*)(uint64_t))*((_QWORD *)i37 - 2);
          v285 = *((_QWORD *)i37 - 1);
          v286(v285);
        }
        free(i37);
        v287 = (_QWORD *)v277[3];
        if (v287)
        {
          do
          {
            v288 = (_QWORD *)*v287;
            free(v287);
            v287 = v288;
          }
          while (v288);
        }
        free(v277);
        goto LABEL_563;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v537 + 1) = (double)*(uint64_t *)&v528[8];
        v277 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v277)
          goto LABEL_563;
        goto LABEL_557;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v447 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v447->__vftable = 0;
        v448 = std::bad_cast::bad_cast(v447);
        v448->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v448, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v537 + 1) = *(_QWORD *)&v528[8];
      v277 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v277)
        goto LABEL_557;
LABEL_563:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v538 = (double)*(unint64_t *)&v528[8];
        v289 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v289)
          goto LABEL_591;
LABEL_585:
        for (i38 = (char *)v289[4]; i38 != (char *)v289[6]; i38 -= 16)
        {
          v298 = (void (*)(uint64_t))*((_QWORD *)i38 - 2);
          v297 = *((_QWORD *)i38 - 1);
          v298(v297);
        }
        free(i38);
        v299 = (_QWORD *)v289[3];
        if (v299)
        {
          do
          {
            v300 = (_QWORD *)*v299;
            free(v299);
            v299 = v300;
          }
          while (v300);
        }
        free(v289);
        goto LABEL_591;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v538 = (double)*(uint64_t *)&v528[8];
        v289 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v289)
          goto LABEL_591;
        goto LABEL_585;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v489 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v489->__vftable = 0;
        v490 = std::bad_cast::bad_cast(v489);
        v490->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v490, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v538 = *(_QWORD *)&v528[8];
      v289 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v289)
        goto LABEL_585;
LABEL_591:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v538 + 1) = (double)*(unint64_t *)&v528[8];
        v301 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v301)
          goto LABEL_619;
LABEL_613:
        for (i39 = (char *)v301[4]; i39 != (char *)v301[6]; i39 -= 16)
        {
          v310 = (void (*)(uint64_t))*((_QWORD *)i39 - 2);
          v309 = *((_QWORD *)i39 - 1);
          v310(v309);
        }
        free(i39);
        v311 = (_QWORD *)v301[3];
        if (v311)
        {
          do
          {
            v312 = (_QWORD *)*v311;
            free(v311);
            v311 = v312;
          }
          while (v312);
        }
        free(v301);
        goto LABEL_619;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v538 + 1) = (double)*(uint64_t *)&v528[8];
        v301 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v301)
          goto LABEL_619;
        goto LABEL_613;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v445 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v445->__vftable = 0;
        v446 = std::bad_cast::bad_cast(v445);
        v446->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v446, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v538 + 1) = *(_QWORD *)&v528[8];
      v301 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v301)
        goto LABEL_613;
LABEL_619:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v539 = (double)*(unint64_t *)&v528[8];
        v313 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v313)
          goto LABEL_647;
LABEL_641:
        for (i40 = (char *)v313[4]; i40 != (char *)v313[6]; i40 -= 16)
        {
          v322 = (void (*)(uint64_t))*((_QWORD *)i40 - 2);
          v321 = *((_QWORD *)i40 - 1);
          v322(v321);
        }
        free(i40);
        v323 = (_QWORD *)v313[3];
        if (v323)
        {
          do
          {
            v324 = (_QWORD *)*v323;
            free(v323);
            v323 = v324;
          }
          while (v324);
        }
        free(v313);
        goto LABEL_647;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v539 = (double)*(uint64_t *)&v528[8];
        v313 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v313)
          goto LABEL_647;
        goto LABEL_641;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v499 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v499->__vftable = 0;
        v500 = std::bad_cast::bad_cast(v499);
        v500->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v500, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v539 = *(_QWORD *)&v528[8];
      v313 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v313)
        goto LABEL_641;
LABEL_647:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v539 + 1) = (double)*(unint64_t *)&v528[8];
        v325 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v325)
          goto LABEL_675;
LABEL_669:
        for (i41 = (char *)v325[4]; i41 != (char *)v325[6]; i41 -= 16)
        {
          v334 = (void (*)(uint64_t))*((_QWORD *)i41 - 2);
          v333 = *((_QWORD *)i41 - 1);
          v334(v333);
        }
        free(i41);
        v335 = (_QWORD *)v325[3];
        if (v335)
        {
          do
          {
            v336 = (_QWORD *)*v335;
            free(v335);
            v335 = v336;
          }
          while (v336);
        }
        free(v325);
        goto LABEL_675;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v539 + 1) = (double)*(uint64_t *)&v528[8];
        v325 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v325)
          goto LABEL_675;
        goto LABEL_669;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v505 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v505->__vftable = 0;
        v506 = std::bad_cast::bad_cast(v505);
        v506->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v506, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v539 + 1) = *(_QWORD *)&v528[8];
      v325 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v325)
        goto LABEL_669;
LABEL_675:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v540 = (double)*(unint64_t *)&v528[8];
        v337 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v337)
          goto LABEL_703;
LABEL_697:
        for (i42 = (char *)v337[4]; i42 != (char *)v337[6]; i42 -= 16)
        {
          v346 = (void (*)(uint64_t))*((_QWORD *)i42 - 2);
          v345 = *((_QWORD *)i42 - 1);
          v346(v345);
        }
        free(i42);
        v347 = (_QWORD *)v337[3];
        if (v347)
        {
          do
          {
            v348 = (_QWORD *)*v347;
            free(v347);
            v347 = v348;
          }
          while (v348);
        }
        free(v337);
        goto LABEL_703;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v540 = (double)*(uint64_t *)&v528[8];
        v337 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v337)
          goto LABEL_703;
        goto LABEL_697;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v503 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v503->__vftable = 0;
        v504 = std::bad_cast::bad_cast(v503);
        v504->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v504, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v540 = *(_QWORD *)&v528[8];
      v337 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v337)
        goto LABEL_697;
LABEL_703:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *((double *)&v540 + 1) = (double)*(unint64_t *)&v528[8];
        v349 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v349)
          goto LABEL_731;
LABEL_725:
        for (i43 = (char *)v349[4]; i43 != (char *)v349[6]; i43 -= 16)
        {
          v358 = (void (*)(uint64_t))*((_QWORD *)i43 - 2);
          v357 = *((_QWORD *)i43 - 1);
          v358(v357);
        }
        free(i43);
        v359 = (_QWORD *)v349[3];
        if (v359)
        {
          do
          {
            v360 = (_QWORD *)*v359;
            free(v359);
            v359 = v360;
          }
          while (v360);
        }
        free(v349);
        goto LABEL_731;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *((double *)&v540 + 1) = (double)*(uint64_t *)&v528[8];
        v349 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v349)
          goto LABEL_731;
        goto LABEL_725;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v497 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v497->__vftable = 0;
        v498 = std::bad_cast::bad_cast(v497);
        v498->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v498, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *((_QWORD *)&v540 + 1) = *(_QWORD *)&v528[8];
      v349 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v349)
        goto LABEL_725;
LABEL_731:
      sub_20E9EFAC4(v264, (uint64_t)v528);
      switch(*(_DWORD *)v528)
      {
        case 2:
          *(double *)v541 = (double)*(unint64_t *)&v528[8];
          v361 = *(_QWORD **)&v528[24];
          *(_QWORD *)&v528[24] = 0;
          if (v361)
            goto LABEL_745;
          break;
        case 3:
          *(double *)v541 = (double)*(uint64_t *)&v528[8];
          v361 = *(_QWORD **)&v528[24];
          *(_QWORD *)&v528[24] = 0;
          if (v361)
            goto LABEL_745;
          break;
        case 4:
          *(_QWORD *)v541 = *(_QWORD *)&v528[8];
          v361 = *(_QWORD **)&v528[24];
          *(_QWORD *)&v528[24] = 0;
          if (v361)
          {
LABEL_745:
            for (i44 = (char *)v361[4]; i44 != (char *)v361[6]; i44 -= 16)
            {
              v369 = (void (*)(uint64_t))*((_QWORD *)i44 - 2);
              v368 = *((_QWORD *)i44 - 1);
              v369(v368);
            }
            free(i44);
            v370 = (_QWORD *)v361[3];
            if (v370)
            {
              do
              {
                v371 = (_QWORD *)*v370;
                free(v370);
                v370 = v371;
              }
              while (v371);
            }
            free(v361);
            if ((v257 & 0xFFFFFFFE) == 0)
              goto LABEL_803;
            goto LABEL_761;
          }
          break;
        default:
          v513 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v513->__vftable = 0;
          v514 = std::bad_cast::bad_cast(v513);
          v514->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v514, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      if ((v257 & 0xFFFFFFFE) == 0)
        goto LABEL_803;
LABEL_761:
      sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)v528);
      if (*(_DWORD *)v528 == 2)
      {
        *(double *)&v541[8] = (double)*(unint64_t *)&v528[8];
        v373 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v373)
          goto LABEL_803;
LABEL_797:
        for (i45 = (char *)v373[4]; i45 != (char *)v373[6]; i45 -= 16)
        {
          v389 = (void (*)(uint64_t))*((_QWORD *)i45 - 2);
          v388 = *((_QWORD *)i45 - 1);
          v389(v388);
        }
        free(i45);
        v390 = (_QWORD *)v373[3];
        if (v390)
        {
          do
          {
            v391 = (_QWORD *)*v390;
            free(v390);
            v390 = v391;
          }
          while (v391);
        }
        free(v373);
        goto LABEL_803;
      }
      if (*(_DWORD *)v528 == 3)
      {
        *(double *)&v541[8] = (double)*(uint64_t *)&v528[8];
        v373 = *(_QWORD **)&v528[24];
        *(_QWORD *)&v528[24] = 0;
        if (!v373)
          goto LABEL_803;
        goto LABEL_797;
      }
      if (*(_DWORD *)v528 != 4)
      {
        v519 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v519->__vftable = 0;
        v520 = std::bad_cast::bad_cast(v519);
        v520->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v520, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v541[8] = *(_QWORD *)&v528[8];
      v373 = *(_QWORD **)&v528[24];
      *(_QWORD *)&v528[24] = 0;
      if (v373)
        goto LABEL_797;
LABEL_803:
      if (v56 >= 2)
      {
        sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)v528);
        switch(*(_DWORD *)v528)
        {
          case 2:
            *(double *)&v541[16] = (double)*(unint64_t *)&v528[8];
            v392 = *(_QWORD **)&v528[24];
            *(_QWORD *)&v528[24] = 0;
            if (v392)
              goto LABEL_829;
            break;
          case 3:
            *(double *)&v541[16] = (double)*(uint64_t *)&v528[8];
            v392 = *(_QWORD **)&v528[24];
            *(_QWORD *)&v528[24] = 0;
            if (v392)
              goto LABEL_829;
            break;
          case 4:
            *(_QWORD *)&v541[16] = *(_QWORD *)&v528[8];
            v392 = *(_QWORD **)&v528[24];
            *(_QWORD *)&v528[24] = 0;
            if (!v392)
              break;
LABEL_829:
            for (i46 = (char *)v392[4]; i46 != (char *)v392[6]; i46 -= 16)
            {
              v406 = (void (*)(uint64_t))*((_QWORD *)i46 - 2);
              v405 = *((_QWORD *)i46 - 1);
              v406(v405);
            }
            free(i46);
            v407 = (_QWORD *)v392[3];
            if (v407)
            {
              do
              {
                v408 = (_QWORD *)*v407;
                free(v407);
                v407 = v408;
              }
              while (v408);
            }
            free(v392);
            break;
          default:
            v521 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v521->__vftable = 0;
            v522 = std::bad_cast::bad_cast(v521);
            v522->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v522, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        if (v56 != 2)
          sub_20E9EE1A4(*(_QWORD *)(a1 + 48), v542);
      }
      *(_OWORD *)&v528[72] = v534;
      *(_OWORD *)&v528[88] = v535;
      *(_OWORD *)&v528[104] = v536;
      *(_OWORD *)&v528[8] = v530;
      *(_OWORD *)&v528[24] = v531;
      *(_OWORD *)&v528[40] = v532;
      *(_OWORD *)&v528[56] = v533;
      *(_OWORD *)&v528[120] = v537;
      *(_OWORD *)&v528[136] = v538;
      *(_OWORD *)&v528[152] = v539;
      *(_OWORD *)&v528[168] = v540;
      *(_OWORD *)&v528[184] = *(_OWORD *)v541;
      v54 = *(_QWORD *)&v541[16];
      v55 = v542[0];
      *((_OWORD *)v31 + 5) = *(_OWORD *)&v528[80];
      *((_OWORD *)v31 + 6) = *(_OWORD *)&v528[96];
      *((_OWORD *)v31 + 7) = *(_OWORD *)&v528[112];
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v528[16];
      *((_OWORD *)v31 + 2) = *(_OWORD *)&v528[32];
      *((_OWORD *)v31 + 3) = *(_OWORD *)&v528[48];
      *((_OWORD *)v31 + 4) = *(_OWORD *)&v528[64];
      *(_OWORD *)v31 = *(_OWORD *)v528;
      *((_OWORD *)v31 + 9) = *(_OWORD *)&v528[144];
      *((_OWORD *)v31 + 10) = *(_OWORD *)&v528[160];
      *((_OWORD *)v31 + 11) = *(_OWORD *)&v528[176];
      *((_QWORD *)v31 + 24) = *(_QWORD *)&v528[192];
      *((_OWORD *)v31 + 8) = *(_OWORD *)&v528[128];
      *((_QWORD *)v31 + 25) = v54;
      v31[208] = 1;
      v31[216] = v55;
LABEL_60:
      v31 += 224;
      if (v31 == v525)
        goto LABEL_34;
    }
    *(double *)&v530 = (double)*(unint64_t *)&v528[8];
    v79 = *(_QWORD **)&v528[24];
    *(_QWORD *)&v528[24] = 0;
    if (!v79)
      goto LABEL_125;
LABEL_119:
    for (i47 = (char *)v79[4]; i47 != (char *)v79[6]; i47 -= 16)
    {
      v88 = (void (*)(uint64_t))*((_QWORD *)i47 - 2);
      v87 = *((_QWORD *)i47 - 1);
      v88(v87);
    }
    free(i47);
    v89 = (_QWORD *)v79[3];
    if (v89)
    {
      do
      {
        v90 = (_QWORD *)*v89;
        free(v89);
        v89 = v90;
      }
      while (v90);
    }
    free(v79);
    goto LABEL_125;
  }
  v10 = a2[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 3) >= v9)
  {
    v27 = 24 * ((24 * v9 - 24) / 0x18) + 24;
    bzero(v6, v27);
    a2[1] = &v6[v27];
    v28 = *a2;
    v523 = &v6[v27];
    if (&v6[v27] != *a2)
      goto LABEL_35;
  }
  else
  {
    if (v526 > 0xAAAAAAAAAAAAAAALL)
      sub_20EABADD4();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v7) >> 3);
    if (2 * v11 > v526)
      v5 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v5;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
    v14 = &v13[24 * v8];
    v15 = &v13[24 * v12];
    v16 = 24 * ((24 * v9 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v6 == v7)
    {
      *a2 = v14;
      a2[1] = v17;
      a2[2] = v15;
    }
    else
    {
      do
      {
        v18 = *(_OWORD *)(v6 - 24);
        v6 -= 24;
        *(_OWORD *)(v14 - 24) = v18;
        v14 -= 24;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v6 + 2);
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
        *((_QWORD *)v6 + 2) = 0;
      }
      while (v6 != v7);
      v6 = *a2;
      v19 = a2[1];
      *a2 = v14;
      a2[1] = v17;
      a2[2] = v15;
      if (v19 != v6)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*((_QWORD *)v20 - 3);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *((_QWORD *)v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v6);
      }
    }
    if (v6)
      operator delete(v6);
    v28 = *a2;
    v523 = a2[1];
    if (v523 != *a2)
      goto LABEL_35;
  }
}

void sub_20EAC5F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  char *i;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;

  if (a20)
  {
    for (i = (char *)a20[4]; i != (char *)a20[6]; i -= 16)
    {
      v48 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v47 = *((_QWORD *)i - 1);
      v48(v47);
    }
    free(i);
    v49 = (_QWORD *)a20[3];
    if (v49)
    {
      do
      {
        v50 = (_QWORD *)*v49;
        free(v49);
        v49 = v50;
      }
      while (v50);
    }
    free(a20);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAC7338(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  v2 = (_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v3;
  v4 = result + 16;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 8) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v4;
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(result + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  v6 = (_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 120) = v7;
  v8 = result + 120;
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 128) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 112) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 128) = 0;
  }
  else
  {
    *(_QWORD *)(result + 112) = v8;
  }
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_OWORD *)(result + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(result + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_OWORD *)(result + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(result + 184) = *(_QWORD *)(a2 + 184);
  v10 = (_QWORD *)(a2 + 192);
  v11 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(result + 192) = v11;
  v12 = result + 192;
  v13 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(result + 200) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(a2 + 184) = v10;
    *v10 = 0;
    *(_QWORD *)(a2 + 200) = 0;
  }
  else
  {
    *(_QWORD *)(result + 184) = v12;
  }
  *(_QWORD *)(result + 208) = *(_QWORD *)(a2 + 208);
  v14 = (_QWORD *)(a2 + 216);
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(result + 216) = v15;
  v16 = result + 216;
  v17 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(result + 224) = v17;
  if (v17)
  {
    *(_QWORD *)(v15 + 16) = v16;
    *(_QWORD *)(a2 + 208) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 224) = 0;
  }
  else
  {
    *(_QWORD *)(result + 208) = v16;
  }
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  return result;
}

void sub_20EAC74D4(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  uint64_t i;
  char ***v52;
  unint64_t v53;
  char **v54;
  char **v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char **v67;
  char **v68;
  unint64_t v69;
  char *v70;
  char *j;
  uint64_t v72;
  void (*v73)(uint64_t);
  _QWORD *v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  size_t v87;
  char *v88;
  __int128 v89;
  char *v90;
  char *v91;
  char *v92;
  char *k;
  uint64_t v94;
  void (*v95)(uint64_t);
  _QWORD *v96;
  _QWORD *v97;
  char *v99;
  char *m;
  uint64_t v101;
  void (*v102)(uint64_t);
  _QWORD *v103;
  _QWORD *v104;
  char *v106;
  char *n;
  uint64_t v108;
  void (*v109)(uint64_t);
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  char *v113;
  char *v114;
  char *v115;
  void **v116;
  char *v117;
  char *v118;
  void *v119;
  void *v120;
  void **v121;
  char **ii;
  void *v123;
  char *v124;
  char *v125;
  char *v126;
  void **v127;
  char *v128;
  char *v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  unsigned int v135;
  char *v137;
  char *jj;
  uint64_t v139;
  void (*v140)(uint64_t);
  _QWORD *v141;
  _QWORD *v142;
  char *v143;
  int64x2_t *v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  size_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  int64x2_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *kk;
  uint64_t v163;
  void (*v164)(uint64_t);
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  __int32 v169;
  char *v171;
  char *mm;
  uint64_t v173;
  void (*v174)(uint64_t);
  _QWORD *v175;
  _QWORD *v176;
  char *v177;
  char *nn;
  uint64_t v179;
  void (*v180)(uint64_t);
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  char *v184;
  char *i1;
  uint64_t v186;
  void (*v187)(uint64_t);
  _QWORD *v188;
  _QWORD *v189;
  void **v190;
  char *v191;
  char *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  __int128 v207;
  char *v208;
  void **v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void *v217;
  char *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void *v226;
  size_t v227;
  char *v228;
  unint64_t v229;
  char *v230;
  char *i6;
  uint64_t v232;
  void (*v233)(uint64_t);
  _QWORD *v234;
  _QWORD *v235;
  _DWORD *v236;
  _DWORD *v237;
  unint64_t v238;
  uint64_t v239;
  char *v241;
  char *i7;
  uint64_t v243;
  void (*v244)(uint64_t);
  _QWORD *v245;
  _QWORD *v246;
  char *v247;
  char *i2;
  uint64_t v249;
  void (*v250)(uint64_t);
  _QWORD *v251;
  _QWORD *v252;
  char *v254;
  char *i3;
  uint64_t v256;
  void (*v257)(uint64_t);
  _QWORD *v258;
  _QWORD *v259;
  char *v261;
  char *i4;
  uint64_t v263;
  void (*v264)(uint64_t);
  _QWORD *v265;
  _QWORD *v266;
  unsigned int v267;
  char *v269;
  char *i5;
  uint64_t v271;
  void (*v272)(uint64_t);
  _QWORD *v273;
  _QWORD *v274;
  std::bad_cast *v275;
  std::bad_cast *v276;
  std::bad_cast *v277;
  std::bad_cast *v278;
  std::bad_cast *v279;
  std::bad_cast *v280;
  std::bad_cast *v281;
  std::bad_cast *v282;
  std::bad_cast *v283;
  std::bad_cast *v284;
  std::bad_cast *v285;
  std::bad_cast *v286;
  std::bad_cast *v287;
  std::bad_cast *v288;
  std::bad_cast *v289;
  std::bad_cast *v290;
  std::bad_cast *v291;
  std::bad_cast *v292;
  std::bad_cast *exception;
  std::bad_cast *v294;
  std::bad_cast *v295;
  std::bad_cast *v296;
  std::bad_cast *v297;
  std::bad_cast *v298;
  std::bad_cast *v299;
  std::bad_cast *v300;
  std::bad_cast *v301;
  std::bad_cast *v302;
  std::bad_cast *v303;
  std::bad_cast *v304;
  char *v305;
  unsigned int v306;
  char *v307;
  unint64_t v308;
  unint64_t v309;
  void *__p;
  int64x2_t v311;
  char *v312;
  char *v313;

  v308 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v308);
  v4 = v308;
  v6 = *a2;
  v5 = a2[1];
  v7 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a2) >> 4);
  v8 = v308 - v7;
  if (v308 <= v7)
  {
    if (v308 >= v7)
    {
      v24 = a2[1];
      v25 = *a2;
      if (v5 == *a2)
        return;
    }
    else
    {
      v24 = &v6[176 * v308];
      if (v5 != v24)
      {
        do
        {
          v26 = v5 - 176;
          v27 = v5 - 168;
          v28 = v24;
          sub_20E991548(v27);
          v24 = v28;
          v5 = v26;
        }
        while (v26 != v24);
      }
      a2[1] = v24;
      v25 = *a2;
      if (v24 == *a2)
        return;
    }
LABEL_26:
    v305 = v24;
    while (1)
    {
      sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)v25);
      LODWORD(__p) = 4;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &__p);
      v306 = __p;
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), v25 + 8);
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), v25 + 9);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v25 + 3);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)v25 + 2);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v25 + 6);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v25 + 8);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)v25 + 5);
      v29 = (uint64_t *)(v25 + 48);
      v309 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v25 + 7) - *((_QWORD *)v25 + 6)) >> 3);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v309);
      v30 = v309;
      v32 = (_QWORD *)*((_QWORD *)v25 + 6);
      v31 = (_QWORD *)*((_QWORD *)v25 + 7);
      v33 = 0xAAAAAAAAAAAAAAABLL * (v31 - v32);
      v34 = v309 - v33;
      v307 = v25;
      if (v309 <= v33)
      {
        if (v309 < v33)
        {
          v47 = &v32[3 * v309];
          if (v31 != v47)
          {
            v48 = (_QWORD *)*((_QWORD *)v25 + 7);
            do
            {
              v50 = (void *)*(v48 - 3);
              v48 -= 3;
              v49 = v50;
              if (v50)
              {
                *(v31 - 2) = v49;
                operator delete(v49);
              }
              v31 = v48;
            }
            while (v48 != v47);
          }
          *((_QWORD *)v307 + 7) = v47;
          v31 = v47;
        }
        for (i = *v29; (_QWORD *)i != v31; i += 24)
        {
LABEL_71:
          sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
          if ((_DWORD)__p != 2)
          {
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            v294 = std::bad_cast::bad_cast(exception);
            v294->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v294, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          v69 = v311.i64[0];
          v70 = v312;
          v312 = 0;
          if (v70)
          {
            for (j = (char *)*((_QWORD *)v70 + 4); j != *((char **)v70 + 6); j -= 16)
            {
              v73 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v72 = *((_QWORD *)j - 1);
              v73(v72);
            }
            free(j);
            v74 = (_QWORD *)*((_QWORD *)v70 + 3);
            if (v74)
            {
              do
              {
                v75 = (_QWORD *)*v74;
                free(v74);
                v74 = v75;
              }
              while (v75);
            }
            free(v70);
          }
          v77 = *(char **)i;
          v76 = *(char **)(i + 8);
          v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v76[-*(_QWORD *)i] >> 3);
          v79 = v69 - v78;
          if (v69 <= v78)
          {
            if (v69 < v78)
            {
              v76 = &v77[24 * v69];
              *(_QWORD *)(i + 8) = v76;
            }
          }
          else
          {
            v80 = *(_QWORD *)(i + 16);
            if (0xAAAAAAAAAAAAAAABLL * ((v80 - (uint64_t)v76) >> 3) >= v79)
            {
              bzero(*(void **)(i + 8), 24 * ((24 * v79 - 24) / 0x18) + 24);
              v90 = &v76[24 * ((24 * v79 - 24) / 0x18) + 24];
              *(_QWORD *)(i + 8) = v90;
            }
            else
            {
              if (v69 > 0xAAAAAAAAAAAAAAALL)
                sub_20EABADD4();
              v81 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (uint64_t)v77) >> 3);
              v82 = 2 * v81;
              if (2 * v81 <= v69)
                v82 = v69;
              if (v81 >= 0x555555555555555)
                v83 = 0xAAAAAAAAAAAAAAALL;
              else
                v83 = v82;
              if (v83 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_404;
              v84 = 24 * v83;
              v85 = (char *)operator new(24 * v83);
              v86 = &v85[24 * v78];
              v87 = 24 * ((24 * v79 - 24) / 0x18) + 24;
              bzero(v86, v87);
              v88 = v86;
              if (v76 != v77)
              {
                do
                {
                  v89 = *(_OWORD *)(v76 - 24);
                  *((_DWORD *)v88 - 2) = *((_DWORD *)v76 - 2);
                  *(_OWORD *)(v88 - 24) = v89;
                  v88 -= 24;
                  v76 -= 24;
                }
                while (v76 != v77);
                v76 = v77;
              }
              v90 = &v86[v87];
              *(_QWORD *)i = v88;
              *(_QWORD *)(i + 8) = &v86[v87];
              *(_QWORD *)(i + 16) = &v85[v84];
              if (v76)
              {
                operator delete(v76);
                v90 = *(char **)(i + 8);
              }
            }
            v77 = *(char **)i;
            v76 = v90;
          }
          if (v76 != v77)
          {
            v91 = v76;
            do
            {
              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
              if ((_DWORD)__p != 2)
              {
                v277 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v277->__vftable = 0;
                v278 = std::bad_cast::bad_cast(v277);
                v278->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v278, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              *(_QWORD *)v77 = v311.i64[0];
              v92 = v312;
              v312 = 0;
              if (v92)
              {
                for (k = (char *)*((_QWORD *)v92 + 4); k != *((char **)v92 + 6); k -= 16)
                {
                  v95 = (void (*)(uint64_t))*((_QWORD *)k - 2);
                  v94 = *((_QWORD *)k - 1);
                  v95(v94);
                }
                free(k);
                v96 = (_QWORD *)*((_QWORD *)v92 + 3);
                if (v96)
                {
                  do
                  {
                    v97 = (_QWORD *)*v96;
                    free(v96);
                    v96 = v97;
                  }
                  while (v97);
                }
                free(v92);
              }
              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
              if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
              {
                v275 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v275->__vftable = 0;
                v276 = std::bad_cast::bad_cast(v275);
                v276->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v276, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              *((_DWORD *)v77 + 2) = v311.i32[0];
              v99 = v312;
              v312 = 0;
              if (v99)
              {
                for (m = (char *)*((_QWORD *)v99 + 4); m != *((char **)v99 + 6); m -= 16)
                {
                  v102 = (void (*)(uint64_t))*((_QWORD *)m - 2);
                  v101 = *((_QWORD *)m - 1);
                  v102(v101);
                }
                free(m);
                v103 = (_QWORD *)*((_QWORD *)v99 + 3);
                if (v103)
                {
                  do
                  {
                    v104 = (_QWORD *)*v103;
                    free(v103);
                    v103 = v104;
                  }
                  while (v104);
                }
                free(v99);
              }
              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
              if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
              {
                v279 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v279->__vftable = 0;
                v280 = std::bad_cast::bad_cast(v279);
                v280->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v280, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              *((_DWORD *)v77 + 4) = v311.i32[0];
              v106 = v312;
              v312 = 0;
              if (v106)
              {
                for (n = (char *)*((_QWORD *)v106 + 4); n != *((char **)v106 + 6); n -= 16)
                {
                  v109 = (void (*)(uint64_t))*((_QWORD *)n - 2);
                  v108 = *((_QWORD *)n - 1);
                  v109(v108);
                }
                free(n);
                v110 = (_QWORD *)*((_QWORD *)v106 + 3);
                if (v110)
                {
                  do
                  {
                    v111 = (_QWORD *)*v110;
                    free(v110);
                    v110 = v111;
                  }
                  while (v111);
                }
                free(v106);
              }
              v77 += 24;
            }
            while (v77 != v91);
          }
        }
      }
      else
      {
        v35 = *((_QWORD *)v25 + 8);
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - (uint64_t)v31) >> 3) >= v34)
        {
          bzero(v31, 24 * ((24 * v34 - 24) / 0x18) + 24);
          *((_QWORD *)v25 + 7) = &v31[3 * ((24 * v34 - 24) / 0x18) + 3];
        }
        else
        {
          if (v309 > 0xAAAAAAAAAAAAAAALL)
            sub_20EABADD4();
          v36 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (uint64_t)v32) >> 3);
          if (2 * v36 > v309)
            v30 = 2 * v36;
          if (v36 >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          if (v30 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_404;
          v37 = 24 * v30;
          v38 = (char *)operator new(24 * v30);
          v39 = &v38[8 * (v31 - v32)];
          v40 = &v38[v37];
          bzero(v39, 24 * ((24 * v34 - 24) / 0x18) + 24);
          v41 = &v39[24 * ((24 * v34 - 24) / 0x18) + 24];
          if (v31 == v32)
          {
            *((_QWORD *)v307 + 6) = v39;
            *((_QWORD *)v307 + 7) = v41;
            *((_QWORD *)v307 + 8) = v40;
          }
          else
          {
            do
            {
              v42 = *(_OWORD *)(v31 - 3);
              v31 -= 3;
              *(_OWORD *)(v39 - 24) = v42;
              v39 -= 24;
              *((_QWORD *)v39 + 2) = v31[2];
              *v31 = 0;
              v31[1] = 0;
              v31[2] = 0;
            }
            while (v31 != v32);
            v31 = (_QWORD *)*((_QWORD *)v307 + 6);
            v43 = (_QWORD *)*((_QWORD *)v307 + 7);
            *((_QWORD *)v307 + 6) = v39;
            *((_QWORD *)v307 + 7) = v41;
            *((_QWORD *)v307 + 8) = v40;
            if (v43 != v31)
            {
              v44 = v43;
              do
              {
                v46 = (void *)*(v44 - 3);
                v44 -= 3;
                v45 = v46;
                if (v46)
                {
                  *(v43 - 2) = v45;
                  operator delete(v45);
                }
                v43 = v44;
              }
              while (v44 != v31);
            }
          }
          if (v31)
            operator delete(v31);
        }
        v31 = (_QWORD *)*((_QWORD *)v307 + 7);
        i = *v29;
        if (v31 != (_QWORD *)i)
          goto LABEL_71;
      }
      v52 = (char ***)(v307 + 72);
      v309 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v307 + 10) - *((_QWORD *)v307 + 9)) >> 4);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v309);
      v53 = v309;
      v54 = (char **)*((_QWORD *)v307 + 9);
      v55 = (char **)*((_QWORD *)v307 + 10);
      v56 = 0x6DB6DB6DB6DB6DB7 * (((char *)v55 - (char *)v54) >> 4);
      v57 = v309 - v56;
      if (v309 <= v56)
      {
        if (v309 < v56)
        {
          v121 = (void **)&v54[14 * v309];
          if (v55 != (char **)v121)
          {
            do
            {
              v124 = *(v55 - 4);
              if (v124)
              {
                *(v55 - 3) = v124;
                operator delete(v124);
              }
              v125 = *(v55 - 7);
              if (v125)
              {
                *(v55 - 6) = v125;
                operator delete(v125);
              }
              v126 = *(v55 - 11);
              if (v126)
              {
                *(v55 - 10) = v126;
                operator delete(v126);
              }
              v127 = (void **)(v55 - 14);
              v128 = *(v55 - 14);
              if (v128)
              {
                v129 = *(v55 - 13);
                v123 = *(v55 - 14);
                if (v129 != v128)
                {
                  do
                  {
                    v130 = (void *)*((_QWORD *)v129 - 3);
                    if (v130)
                    {
                      *((_QWORD *)v129 - 2) = v130;
                      operator delete(v130);
                    }
                    v131 = (void *)*((_QWORD *)v129 - 6);
                    if (v131)
                    {
                      *((_QWORD *)v129 - 5) = v131;
                      operator delete(v131);
                    }
                    v129 -= 112;
                  }
                  while (v129 != v128);
                  v123 = *v127;
                }
                *(v55 - 13) = v128;
                operator delete(v123);
              }
              v55 -= 14;
            }
            while (v127 != v121);
          }
          *((_QWORD *)v307 + 10) = v121;
          v55 = (char **)v121;
        }
        ii = *v52;
        if (v55 != ii)
          goto LABEL_181;
      }
      else
      {
        v58 = *((_QWORD *)v307 + 11);
        if (0x6DB6DB6DB6DB6DB7 * ((v58 - (uint64_t)v55) >> 4) >= v57)
        {
          bzero(*((void **)v307 + 10), 112 * ((((112 * v57 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112);
          *((_QWORD *)v307 + 10) = &v55[14
                                      * ((((112 * v57 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                      + 14];
        }
        else
        {
          if (v309 > 0x249249249249249)
            sub_20EABADD4();
          v59 = 0x6DB6DB6DB6DB6DB7 * ((v58 - (uint64_t)v54) >> 4);
          if (2 * v59 > v309)
            v53 = 2 * v59;
          if (v59 >= 0x124924924924924)
            v53 = 0x249249249249249;
          if (v53 > 0x249249249249249)
            goto LABEL_404;
          v60 = 112 * v53;
          v61 = (char *)operator new(112 * v53);
          v62 = &v61[16 * (((char *)v55 - (char *)v54) >> 4)];
          v63 = &v61[v60];
          bzero(v62, 112 * ((((112 * v57 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112);
          v64 = &v62[112 * ((((112 * v57 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112];
          if (v55 == v54)
          {
            *((_QWORD *)v307 + 9) = v62;
            *((_QWORD *)v307 + 10) = v64;
            *((_QWORD *)v307 + 11) = v63;
          }
          else
          {
            v65 = 0;
            do
            {
              v66 = &v62[v65 * 8];
              v67 = &v55[v65];
              *((_OWORD *)v66 - 7) = *(_OWORD *)&v55[v65 - 14];
              *((_QWORD *)v66 - 12) = v55[v65 - 12];
              *(v67 - 14) = 0;
              *(v67 - 13) = 0;
              *(v67 - 12) = 0;
              *(_OWORD *)(v66 - 88) = *(_OWORD *)&v55[v65 - 11];
              *((_QWORD *)v66 - 9) = v55[v65 - 9];
              *(v67 - 10) = 0;
              *(v67 - 9) = 0;
              *(v67 - 11) = 0;
              *((_QWORD *)v66 - 8) = v55[v65 - 8];
              *(_OWORD *)(v66 - 56) = *(_OWORD *)&v55[v65 - 7];
              *((_QWORD *)v66 - 5) = v55[v65 - 5];
              *(v67 - 7) = 0;
              *(v67 - 6) = 0;
              *(v67 - 5) = 0;
              *((_OWORD *)v66 - 2) = *(_OWORD *)&v55[v65 - 4];
              *((_QWORD *)v66 - 2) = v55[v65 - 2];
              *(v67 - 4) = 0;
              *(v67 - 3) = 0;
              *(v67 - 2) = 0;
              *((_WORD *)v66 - 4) = v55[v65 - 1];
              v65 -= 14;
            }
            while (&v55[v65] != v54);
            v55 = (char **)*((_QWORD *)v307 + 9);
            v68 = (char **)*((_QWORD *)v307 + 10);
            *((_QWORD *)v307 + 9) = &v62[v65 * 8];
            *((_QWORD *)v307 + 10) = v64;
            *((_QWORD *)v307 + 11) = v63;
            if (v68 != v55)
            {
              do
              {
                v113 = *(v68 - 4);
                if (v113)
                {
                  *(v68 - 3) = v113;
                  operator delete(v113);
                }
                v114 = *(v68 - 7);
                if (v114)
                {
                  *(v68 - 6) = v114;
                  operator delete(v114);
                }
                v115 = *(v68 - 11);
                if (v115)
                {
                  *(v68 - 10) = v115;
                  operator delete(v115);
                }
                v116 = (void **)(v68 - 14);
                v117 = *(v68 - 14);
                if (v117)
                {
                  v118 = *(v68 - 13);
                  v112 = *(v68 - 14);
                  if (v118 != v117)
                  {
                    do
                    {
                      v119 = (void *)*((_QWORD *)v118 - 3);
                      if (v119)
                      {
                        *((_QWORD *)v118 - 2) = v119;
                        operator delete(v119);
                      }
                      v120 = (void *)*((_QWORD *)v118 - 6);
                      if (v120)
                      {
                        *((_QWORD *)v118 - 5) = v120;
                        operator delete(v120);
                      }
                      v118 -= 112;
                    }
                    while (v118 != v117);
                    v112 = *v116;
                  }
                  *(v68 - 13) = v117;
                  operator delete(v112);
                }
                v68 -= 14;
              }
              while (v116 != (void **)v55);
            }
          }
          if (v55)
            operator delete(v55);
        }
        v55 = (char **)*((_QWORD *)v307 + 10);
        for (ii = *v52; ii != v55; ii += 14)
        {
LABEL_181:
          sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
          v135 = v311.i32[0];
          if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
          {
            v291 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v291->__vftable = 0;
            v292 = std::bad_cast::bad_cast(v291);
            v292->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v292, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          v137 = v312;
          v312 = 0;
          if (v137)
          {
            for (jj = (char *)*((_QWORD *)v137 + 4); jj != *((char **)v137 + 6); jj -= 16)
            {
              v140 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
              v139 = *((_QWORD *)jj - 1);
              v140(v139);
            }
            free(jj);
            v141 = (_QWORD *)*((_QWORD *)v137 + 3);
            if (v141)
            {
              do
              {
                v142 = (_QWORD *)*v141;
                free(v141);
                v141 = v142;
              }
              while (v142);
            }
            free(v137);
          }
          sub_20EAC9648(a1, ii, v135);
        }
      }
      v309 = (uint64_t)(*((_QWORD *)v307 + 13) - *((_QWORD *)v307 + 12)) >> 3;
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v309);
      v132 = (_QWORD *)*((_QWORD *)v307 + 12);
      v133 = (_QWORD *)*((_QWORD *)v307 + 13);
      v134 = v133 - v132;
      if (v309 <= v134)
      {
        if (v309 < v134)
        {
          v133 = &v132[v309];
          *((_QWORD *)v307 + 13) = v133;
        }
      }
      else
      {
        sub_20EAC9ECC((uint64_t)(v307 + 96), v309 - v134);
        v132 = (_QWORD *)*((_QWORD *)v307 + 12);
        v133 = (_QWORD *)*((_QWORD *)v307 + 13);
      }
      if (v133 != v132)
      {
        v160 = *(_QWORD *)(a1 + 48);
        do
        {
          sub_20E9EFAC4(v160, (uint64_t)&__p);
          if ((_DWORD)__p != 2)
          {
            v295 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v295->__vftable = 0;
            v296 = std::bad_cast::bad_cast(v295);
            v296->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v296, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          *v132 = v311.i64[0];
          v161 = v312;
          v312 = 0;
          if (v161)
          {
            for (kk = (char *)*((_QWORD *)v161 + 4); kk != *((char **)v161 + 6); kk -= 16)
            {
              v164 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v163 = *((_QWORD *)kk - 1);
              v164(v163);
            }
            free(kk);
            v165 = (_QWORD *)*((_QWORD *)v161 + 3);
            if (v165)
            {
              do
              {
                v166 = (_QWORD *)*v165;
                free(v165);
                v165 = v166;
              }
              while (v166);
            }
            free(v161);
          }
          ++v132;
        }
        while (v132 != v133);
      }
      v143 = v307;
      sub_20E9400E0(a1, (char **)v307 + 15);
      if (v306 < 2)
        goto LABEL_27;
      v144 = (int64x2_t *)(v307 + 144);
      v309 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v307 + 19) - *((_QWORD *)v307 + 18)) >> 3);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v309);
      v145 = v309;
      v146 = (char *)*((_QWORD *)v307 + 18);
      v147 = (char *)*((_QWORD *)v307 + 19);
      v148 = 0x6DB6DB6DB6DB6DB7 * ((v147 - v146) >> 3);
      v149 = v309 - v148;
      if (v309 <= v148)
      {
        if (v309 < v148)
          sub_20E991630((uint64_t)v144, (uint64_t)&v146[56 * v309]);
      }
      else
      {
        v150 = (char *)*((_QWORD *)v307 + 20);
        if (0x6DB6DB6DB6DB6DB7 * ((v150 - v147) >> 3) >= v149)
        {
          bzero(v147, 56 * ((56 * v149 - 56) / 0x38) + 56);
          *((_QWORD *)v307 + 19) = &v147[56 * ((56 * v149 - 56) / 0x38) + 56];
        }
        else
        {
          if (v309 > 0x492492492492492)
            sub_20EABADD4();
          if (0xDB6DB6DB6DB6DB6ELL * ((v150 - v146) >> 3) > v309)
            v145 = 0xDB6DB6DB6DB6DB6ELL * ((v150 - v146) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v150 - v146) >> 3)) >= 0x249249249249249)
            v145 = 0x492492492492492;
          v313 = v307 + 160;
          if (v145 > 0x492492492492492)
            goto LABEL_404;
          v151 = 56 * v145;
          v152 = (char *)operator new(56 * v145);
          v153 = &v152[8 * ((v147 - v146) >> 3)];
          v154 = 56 * ((56 * v149 - 56) / 0x38) + 56;
          bzero(v153, v154);
          if (v147 == v146)
          {
            v158 = vdupq_n_s64((unint64_t)v147);
            v159 = &v152[8 * ((v147 - v146) >> 3)];
          }
          else
          {
            v155 = 0;
            do
            {
              v156 = &v153[v155];
              v157 = &v147[v155];
              *(v156 - 56) = v147[v155 - 56];
              *((_OWORD *)v156 - 3) = *(_OWORD *)&v147[v155 - 48];
              *((_QWORD *)v156 - 4) = *(_QWORD *)&v147[v155 - 32];
              *((_QWORD *)v157 - 6) = 0;
              *((_QWORD *)v157 - 5) = 0;
              *((_QWORD *)v157 - 4) = 0;
              *(_OWORD *)(v156 - 24) = *(_OWORD *)&v147[v155 - 24];
              *((_QWORD *)v156 - 1) = *(_QWORD *)&v147[v155 - 8];
              *((_QWORD *)v157 - 3) = 0;
              *((_QWORD *)v157 - 2) = 0;
              *((_QWORD *)v157 - 1) = 0;
              v155 -= 56;
            }
            while (&v147[v155] != v146);
            v158 = *v144;
            v150 = (char *)*((_QWORD *)v307 + 20);
            v159 = &v153[v155];
          }
          *((_QWORD *)v307 + 18) = v159;
          *((_QWORD *)v307 + 19) = &v153[v154];
          v311 = v158;
          *((_QWORD *)v307 + 20) = &v152[v151];
          v312 = v150;
          __p = (void *)v158.i64[0];
          sub_20EACA068((uint64_t)&__p, v158.i64[0]);
          if (__p)
            operator delete(__p);
        }
      }
      v167 = *((_QWORD *)v307 + 18);
      v168 = *((_QWORD *)v307 + 19);
      if (v168 != v167)
      {
        while (1)
        {
          sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
          v169 = v311.i32[0];
          if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
          {
            v297 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v297->__vftable = 0;
            v298 = std::bad_cast::bad_cast(v297);
            v298->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v298, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          v171 = v312;
          v312 = 0;
          if (v171)
          {
            for (mm = (char *)*((_QWORD *)v171 + 4); mm != *((char **)v171 + 6); mm -= 16)
            {
              v174 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
              v173 = *((_QWORD *)mm - 1);
              v174(v173);
            }
            free(mm);
            v175 = (_QWORD *)*((_QWORD *)v171 + 3);
            if (v175)
            {
              do
              {
                v176 = (_QWORD *)*v175;
                free(v175);
                v175 = v176;
              }
              while (v176);
            }
            free(v171);
          }
          sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
          if ((_DWORD)__p != 1)
          {
            v299 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v299->__vftable = 0;
            v300 = std::bad_cast::bad_cast(v299);
            v300->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v300, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          *(_BYTE *)v167 = v311.i8[0];
          v177 = v312;
          v312 = 0;
          if (v177)
          {
            for (nn = (char *)*((_QWORD *)v177 + 4); nn != *((char **)v177 + 6); nn -= 16)
            {
              v180 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
              v179 = *((_QWORD *)nn - 1);
              v180(v179);
            }
            free(nn);
            v181 = (_QWORD *)*((_QWORD *)v177 + 3);
            if (v181)
            {
              do
              {
                v182 = (_QWORD *)*v181;
                free(v181);
                v181 = v182;
              }
              while (v182);
            }
            free(v177);
          }
          if ((v169 & 0xFFFFFFFE) == 0)
            goto LABEL_230;
          sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
          if ((_DWORD)__p != 2)
          {
            v301 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v301->__vftable = 0;
            v302 = std::bad_cast::bad_cast(v301);
            v302->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v302, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          v183 = v311.i64[0];
          v184 = v312;
          v312 = 0;
          if (v184)
          {
            for (i1 = (char *)*((_QWORD *)v184 + 4); i1 != *((char **)v184 + 6); i1 -= 16)
            {
              v187 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
              v186 = *((_QWORD *)i1 - 1);
              v187(v186);
            }
            free(i1);
            v188 = (_QWORD *)*((_QWORD *)v184 + 3);
            if (v188)
            {
              do
              {
                v189 = (_QWORD *)*v188;
                free(v188);
                v188 = v189;
              }
              while (v189);
            }
            free(v184);
          }
          v190 = (void **)(v167 + 8);
          v191 = *(char **)(v167 + 8);
          v192 = *(char **)(v167 + 16);
          v193 = 0xF0F0F0F0F0F0F0F1 * ((v192 - v191) >> 3);
          v194 = v183 - v193;
          if (v183 <= v193)
          {
            if (v183 < v193)
            {
              v218 = &v191[136 * v183];
              while (v192 != v218)
              {
                v220 = (void *)*((_QWORD *)v192 - 4);
                if (v220)
                {
                  *((_QWORD *)v192 - 3) = v220;
                  operator delete(v220);
                }
                v221 = (void *)*((_QWORD *)v192 - 7);
                if (v221)
                {
                  *((_QWORD *)v192 - 6) = v221;
                  operator delete(v221);
                }
                v222 = (void *)*((_QWORD *)v192 - 11);
                if (v222)
                {
                  *((_QWORD *)v192 - 10) = v222;
                  operator delete(v222);
                }
                v223 = *((_QWORD *)v192 - 14);
                if (v223)
                {
                  v224 = *((_QWORD *)v192 - 13);
                  v219 = (void *)*((_QWORD *)v192 - 14);
                  if (v224 != v223)
                  {
                    do
                    {
                      v225 = *(void **)(v224 - 24);
                      if (v225)
                      {
                        *(_QWORD *)(v224 - 16) = v225;
                        operator delete(v225);
                      }
                      v226 = *(void **)(v224 - 48);
                      if (v226)
                      {
                        *(_QWORD *)(v224 - 40) = v226;
                        operator delete(v226);
                      }
                      v224 -= 112;
                    }
                    while (v224 != v223);
                    v219 = (void *)*((_QWORD *)v192 - 14);
                  }
                  *((_QWORD *)v192 - 13) = v223;
                  operator delete(v219);
                }
                v192 -= 136;
              }
              *(_QWORD *)(v167 + 16) = v218;
              v192 = v218;
            }
            v228 = (char *)*v190;
            if (v192 == *v190)
              goto LABEL_315;
            do
            {
LABEL_350:
              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
              if ((_DWORD)__p != 2)
              {
                v281 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v281->__vftable = 0;
                v282 = std::bad_cast::bad_cast(v281);
                v282->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v282, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              *(_QWORD *)v228 = v311.i64[0];
              v247 = v312;
              v312 = 0;
              if (v247)
              {
                for (i2 = (char *)*((_QWORD *)v247 + 4); i2 != *((char **)v247 + 6); i2 -= 16)
                {
                  v250 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
                  v249 = *((_QWORD *)i2 - 1);
                  v250(v249);
                }
                free(i2);
                v251 = (_QWORD *)*((_QWORD *)v247 + 3);
                if (v251)
                {
                  do
                  {
                    v252 = (_QWORD *)*v251;
                    free(v251);
                    v251 = v252;
                  }
                  while (v252);
                }
                free(v247);
              }
              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
              if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
              {
                v283 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v283->__vftable = 0;
                v284 = std::bad_cast::bad_cast(v283);
                v284->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v284, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              *((_DWORD *)v228 + 2) = v311.i32[0];
              v254 = v312;
              v312 = 0;
              if (v254)
              {
                for (i3 = (char *)*((_QWORD *)v254 + 4); i3 != *((char **)v254 + 6); i3 -= 16)
                {
                  v257 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
                  v256 = *((_QWORD *)i3 - 1);
                  v257(v256);
                }
                free(i3);
                v258 = (_QWORD *)*((_QWORD *)v254 + 3);
                if (v258)
                {
                  do
                  {
                    v259 = (_QWORD *)*v258;
                    free(v258);
                    v258 = v259;
                  }
                  while (v259);
                }
                free(v254);
              }
              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
              if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
              {
                v287 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v287->__vftable = 0;
                v288 = std::bad_cast::bad_cast(v287);
                v288->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v288, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              *((_DWORD *)v228 + 4) = v311.i32[0];
              v261 = v312;
              v312 = 0;
              if (v261)
              {
                for (i4 = (char *)*((_QWORD *)v261 + 4); i4 != *((char **)v261 + 6); i4 -= 16)
                {
                  v264 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
                  v263 = *((_QWORD *)i4 - 1);
                  v264(v263);
                }
                free(i4);
                v265 = (_QWORD *)*((_QWORD *)v261 + 3);
                if (v265)
                {
                  do
                  {
                    v266 = (_QWORD *)*v265;
                    free(v265);
                    v265 = v266;
                  }
                  while (v266);
                }
                free(v261);
              }
              sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
              v267 = v311.i32[0];
              if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
              {
                v285 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v285->__vftable = 0;
                v286 = std::bad_cast::bad_cast(v285);
                v286->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v286, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              v269 = v312;
              v312 = 0;
              if (v269)
              {
                for (i5 = (char *)*((_QWORD *)v269 + 4); i5 != *((char **)v269 + 6); i5 -= 16)
                {
                  v272 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
                  v271 = *((_QWORD *)i5 - 1);
                  v272(v271);
                }
                free(i5);
                v273 = (_QWORD *)*((_QWORD *)v269 + 3);
                if (v273)
                {
                  do
                  {
                    v274 = (_QWORD *)*v273;
                    free(v273);
                    v273 = v274;
                  }
                  while (v274);
                }
                free(v269);
              }
              sub_20EAC9648(a1, (char **)v228 + 3, v267);
              v228 += 136;
            }
            while (v228 != v192);
            goto LABEL_315;
          }
          v195 = *(_QWORD *)(v167 + 24);
          if (0xF0F0F0F0F0F0F0F1 * ((v195 - (uint64_t)v192) >> 3) >= v194)
          {
            v227 = 136 * ((136 * v194 - 136) / 0x88) + 136;
            bzero(*(void **)(v167 + 16), v227);
            *(_QWORD *)(v167 + 16) = &v192[v227];
            v192 += v227;
            v228 = (char *)*v190;
            if (v192 != *v190)
              goto LABEL_350;
            goto LABEL_315;
          }
          if (v183 > 0x1E1E1E1E1E1E1E1)
            sub_20EABADD4();
          v196 = 0xF0F0F0F0F0F0F0F1 * ((v195 - (uint64_t)v191) >> 3);
          v197 = 2 * v196;
          if (2 * v196 <= v183)
            v197 = v183;
          if (v196 >= 0xF0F0F0F0F0F0F0)
            v198 = 0x1E1E1E1E1E1E1E1;
          else
            v198 = v197;
          if (v198 > 0x1E1E1E1E1E1E1E1)
            goto LABEL_404;
          v199 = 136 * v198;
          v200 = (char *)operator new(136 * v198);
          v201 = &v200[8 * ((v192 - v191) >> 3)];
          v202 = &v200[v199];
          bzero(v201, 136 * ((136 * v194 - 136) / 0x88) + 136);
          v203 = &v201[136 * ((136 * v194 - 136) / 0x88) + 136];
          if (v192 == v191)
            break;
          v204 = 0;
          do
          {
            v205 = &v201[v204];
            v206 = &v192[v204];
            v207 = *(_OWORD *)&v192[v204 - 136];
            *((_QWORD *)v205 - 15) = *(_QWORD *)&v192[v204 - 120];
            *(_OWORD *)(v205 - 136) = v207;
            *((_OWORD *)v205 - 7) = *(_OWORD *)&v192[v204 - 112];
            *((_QWORD *)v205 - 12) = *(_QWORD *)&v192[v204 - 96];
            *((_QWORD *)v206 - 14) = 0;
            *((_QWORD *)v206 - 13) = 0;
            *((_QWORD *)v206 - 12) = 0;
            *(_OWORD *)(v205 - 88) = *(_OWORD *)&v192[v204 - 88];
            *((_QWORD *)v205 - 9) = *(_QWORD *)&v192[v204 - 72];
            *((_QWORD *)v206 - 11) = 0;
            *((_QWORD *)v206 - 10) = 0;
            *((_QWORD *)v206 - 9) = 0;
            *((_QWORD *)v205 - 8) = *(_QWORD *)&v192[v204 - 64];
            *(_OWORD *)(v205 - 56) = *(_OWORD *)&v192[v204 - 56];
            *((_QWORD *)v205 - 5) = *(_QWORD *)&v192[v204 - 40];
            *((_QWORD *)v206 - 7) = 0;
            *((_QWORD *)v206 - 6) = 0;
            *((_QWORD *)v206 - 5) = 0;
            *((_OWORD *)v205 - 2) = *(_OWORD *)&v192[v204 - 32];
            *((_QWORD *)v205 - 2) = *(_QWORD *)&v192[v204 - 16];
            *((_QWORD *)v206 - 4) = 0;
            *((_QWORD *)v206 - 3) = 0;
            *((_QWORD *)v206 - 2) = 0;
            *((_WORD *)v205 - 4) = *(_WORD *)&v192[v204 - 8];
            v204 -= 136;
          }
          while (&v192[v204] != v191);
          v192 = *(char **)(v167 + 8);
          v208 = *(char **)(v167 + 16);
          *(_QWORD *)(v167 + 8) = &v201[v204];
          *(_QWORD *)(v167 + 16) = v203;
          *(_QWORD *)(v167 + 24) = v202;
          if (v208 != v192)
          {
            v209 = (void **)(v167 + 8);
            do
            {
              v211 = (void *)*((_QWORD *)v208 - 4);
              if (v211)
              {
                *((_QWORD *)v208 - 3) = v211;
                operator delete(v211);
              }
              v212 = (void *)*((_QWORD *)v208 - 7);
              if (v212)
              {
                *((_QWORD *)v208 - 6) = v212;
                operator delete(v212);
              }
              v213 = (void *)*((_QWORD *)v208 - 11);
              if (v213)
              {
                *((_QWORD *)v208 - 10) = v213;
                operator delete(v213);
              }
              v214 = *((_QWORD *)v208 - 14);
              if (v214)
              {
                v215 = *((_QWORD *)v208 - 13);
                v210 = (void *)*((_QWORD *)v208 - 14);
                if (v215 != v214)
                {
                  do
                  {
                    v216 = *(void **)(v215 - 24);
                    if (v216)
                    {
                      *(_QWORD *)(v215 - 16) = v216;
                      operator delete(v216);
                    }
                    v217 = *(void **)(v215 - 48);
                    if (v217)
                    {
                      *(_QWORD *)(v215 - 40) = v217;
                      operator delete(v217);
                    }
                    v215 -= 112;
                  }
                  while (v215 != v214);
                  v210 = (void *)*((_QWORD *)v208 - 14);
                }
                *((_QWORD *)v208 - 13) = v214;
                operator delete(v210);
              }
              v208 -= 136;
            }
            while (v208 != v192);
LABEL_344:
            if (!v192)
              goto LABEL_346;
LABEL_345:
            operator delete(v192);
            goto LABEL_346;
          }
          v209 = (void **)(v167 + 8);
          if (v192)
            goto LABEL_345;
LABEL_346:
          v192 = *(char **)(v167 + 16);
          v228 = (char *)*v209;
          if (v192 != *v209)
            goto LABEL_350;
LABEL_315:
          sub_20E9EFAC4(*(_QWORD *)(a1 + 48), (uint64_t)&__p);
          if ((_DWORD)__p != 2)
          {
            v303 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v303->__vftable = 0;
            v304 = std::bad_cast::bad_cast(v303);
            v304->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v304, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          v229 = v311.i64[0];
          v230 = v312;
          v312 = 0;
          if (v230)
          {
            for (i6 = (char *)*((_QWORD *)v230 + 4); i6 != *((char **)v230 + 6); i6 -= 16)
            {
              v233 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
              v232 = *((_QWORD *)i6 - 1);
              v233(v232);
            }
            free(i6);
            v234 = (_QWORD *)*((_QWORD *)v230 + 3);
            if (v234)
            {
              do
              {
                v235 = (_QWORD *)*v234;
                free(v234);
                v234 = v235;
              }
              while (v235);
            }
            free(v230);
          }
          v236 = *(_DWORD **)(v167 + 32);
          v237 = *(_DWORD **)(v167 + 40);
          v238 = v237 - v236;
          if (v229 <= v238)
          {
            if (v229 < v238)
            {
              v237 = &v236[v229];
              *(_QWORD *)(v167 + 40) = v237;
            }
          }
          else
          {
            sub_20E93DC84(v167 + 32, v229 - v238);
            v236 = *(_DWORD **)(v167 + 32);
            v237 = *(_DWORD **)(v167 + 40);
          }
          if (v237 != v236)
          {
            v239 = *(_QWORD *)(a1 + 48);
            do
            {
              sub_20E9EFAC4(v239, (uint64_t)&__p);
              if ((_DWORD)__p != 2 || HIDWORD(v311.i64[0]) != 0)
              {
                v289 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v289->__vftable = 0;
                v290 = std::bad_cast::bad_cast(v289);
                v290->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
                __cxa_throw(v290, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
              }
              *v236 = v311.i32[0];
              v241 = v312;
              v312 = 0;
              if (v241)
              {
                for (i7 = (char *)*((_QWORD *)v241 + 4); i7 != *((char **)v241 + 6); i7 -= 16)
                {
                  v244 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
                  v243 = *((_QWORD *)i7 - 1);
                  v244(v243);
                }
                free(i7);
                v245 = (_QWORD *)*((_QWORD *)v241 + 3);
                if (v245)
                {
                  do
                  {
                    v246 = (_QWORD *)*v245;
                    free(v245);
                    v245 = v246;
                  }
                  while (v246);
                }
                free(v241);
              }
              ++v236;
            }
            while (v236 != v237);
          }
LABEL_230:
          v167 += 56;
          if (v167 == v168)
            goto LABEL_227;
        }
        *(_QWORD *)(v167 + 8) = v201;
        *(_QWORD *)(v167 + 16) = v203;
        *(_QWORD *)(v167 + 24) = v202;
        v209 = (void **)(v167 + 8);
        goto LABEL_344;
      }
LABEL_227:
      v143 = v307;
      if (v306 != 2)
      {
        sub_20E9EE1A4(*(_QWORD *)(a1 + 48), v307 + 168);
        if (v306 >= 4)
          sub_20E9EE1A4(*(_QWORD *)(a1 + 48), v307 + 169);
      }
LABEL_27:
      v25 = v143 + 176;
      if (v25 == v305)
        return;
    }
  }
  v9 = a2[2];
  if (0x2E8BA2E8BA2E8BA3 * ((v9 - v5) >> 4) < v8)
  {
    if (v308 > 0x1745D1745D1745DLL)
      sub_20EABADD4();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - v6) >> 4);
    if (2 * v10 > v308)
      v4 = 2 * v10;
    if (v10 >= 0xBA2E8BA2E8BA2ELL)
      v4 = 0x1745D1745D1745DLL;
    if (v4 > 0x1745D1745D1745DLL)
LABEL_404:
      sub_20E877A38();
    v11 = 176 * v4;
    v12 = (char *)operator new(176 * v4);
    v13 = &v12[176 * v7];
    v14 = &v12[v11];
    bzero(v13, 176 * ((176 * v8 - 176) / 0xB0) + 176);
    v15 = &v13[176 * ((176 * v8 - 176) / 0xB0) + 176];
    if (v5 == v6)
    {
      *a2 = v13;
      a2[1] = v15;
      a2[2] = v14;
      if (v5)
LABEL_15:
        operator delete(v5);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v5[v16];
        v18 = &v13[v16];
        *((_QWORD *)v18 - 22) = *(_QWORD *)&v5[v16 - 176];
        v19 = *(_OWORD *)&v5[v16 - 168];
        v20 = *(_OWORD *)&v5[v16 - 152];
        *((_QWORD *)v18 - 17) = *(_QWORD *)&v5[v16 - 136];
        *(_OWORD *)(v18 - 152) = v20;
        *(_OWORD *)(v18 - 168) = v19;
        *((_OWORD *)v18 - 8) = *(_OWORD *)&v5[v16 - 128];
        *((_QWORD *)v18 - 14) = *(_QWORD *)&v5[v16 - 112];
        *((_QWORD *)v17 - 16) = 0;
        *((_QWORD *)v17 - 15) = 0;
        *((_QWORD *)v17 - 14) = 0;
        *(_OWORD *)(v18 - 104) = *(_OWORD *)&v5[v16 - 104];
        *((_QWORD *)v18 - 11) = *(_QWORD *)&v5[v16 - 88];
        *((_QWORD *)v17 - 13) = 0;
        *((_QWORD *)v17 - 12) = 0;
        *((_QWORD *)v17 - 11) = 0;
        *((_OWORD *)v18 - 5) = *(_OWORD *)&v5[v16 - 80];
        *((_QWORD *)v18 - 8) = *(_QWORD *)&v5[v16 - 64];
        *((_QWORD *)v17 - 10) = 0;
        *((_QWORD *)v17 - 9) = 0;
        v21 = *(_OWORD *)&v5[v16 - 56];
        *((_QWORD *)v17 - 8) = 0;
        *(_OWORD *)(v18 - 56) = v21;
        *((_QWORD *)v18 - 5) = *(_QWORD *)&v5[v16 - 40];
        *((_QWORD *)v17 - 7) = 0;
        *((_QWORD *)v17 - 6) = 0;
        *((_QWORD *)v17 - 5) = 0;
        *((_OWORD *)v18 - 2) = *(_OWORD *)&v5[v16 - 32];
        *((_QWORD *)v18 - 2) = *(_QWORD *)&v5[v16 - 16];
        *((_QWORD *)v17 - 4) = 0;
        *((_QWORD *)v17 - 3) = 0;
        *((_QWORD *)v17 - 2) = 0;
        *((_WORD *)v18 - 4) = *(_WORD *)&v5[v16 - 8];
        v16 -= 176;
      }
      while (&v5[v16] != v6);
      v5 = *a2;
      v22 = a2[1];
      *a2 = &v13[v16];
      a2[1] = v15;
      a2[2] = v14;
      if (v22 != v5)
      {
        do
        {
          v23 = v22 - 176;
          sub_20E991548((_QWORD *)v22 - 21);
          v22 = v23;
        }
        while (v23 != v5);
      }
      if (v5)
        goto LABEL_15;
    }
    v25 = *a2;
    v24 = a2[1];
    if (v24 == *a2)
      return;
    goto LABEL_26;
  }
  bzero(a2[1], 176 * ((176 * v8 - 176) / 0xB0) + 176);
  v24 = &v5[176 * ((176 * v8 - 176) / 0xB0) + 176];
  a2[1] = v24;
  v25 = *a2;
  if (v24 != *a2)
    goto LABEL_26;
}

void sub_20EAC9648(uint64_t a1, char **a2, unsigned int a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  void *v22;
  void *v23;
  char *v24;
  void *v25;
  void *v26;
  char *i;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  char *j;
  uint64_t v36;
  void (*v37)(uint64_t);
  _QWORD *v38;
  _QWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  char *k;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::bad_cast *exception;
  std::bad_cast *v72;
  std::bad_cast *v73;
  std::bad_cast *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;

  v75 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v75);
  v6 = v75;
  v7 = *a2;
  v8 = a2[1];
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - *a2) >> 4);
  v10 = v75 - v9;
  if (v75 <= v9)
  {
    if (v75 >= v9)
    {
      v24 = a2[1];
      i = *a2;
      if (v24 == *a2)
        goto LABEL_79;
      goto LABEL_37;
    }
    v24 = &v7[112 * v75];
    while (v8 != v24)
    {
      v25 = (void *)*((_QWORD *)v8 - 3);
      if (v25)
      {
        *((_QWORD *)v8 - 2) = v25;
        operator delete(v25);
      }
      v26 = (void *)*((_QWORD *)v8 - 6);
      if (v26)
      {
        *((_QWORD *)v8 - 5) = v26;
        operator delete(v26);
      }
      v8 -= 112;
    }
    a2[1] = v24;
    for (i = *a2; i != v24; i += 112)
    {
LABEL_37:
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), i);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)i + 2);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)i + 4);
      LODWORD(v77) = 2;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v77);
      v28 = v77;
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), i + 24);
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), i + 25);
      sub_20E9EDCA8(*(_QWORD *)(a1 + 48), (_QWORD *)i + 4);
      sub_20E9EDCA8(*(_QWORD *)(a1 + 48), (_QWORD *)i + 5);
      sub_20E9EDCA8(*(_QWORD *)(a1 + 48), (_QWORD *)i + 6);
      sub_20E9EDCA8(*(_QWORD *)(a1 + 48), (_QWORD *)i + 7);
      if (v28 >= 2)
      {
        v76 = (uint64_t)(*((_QWORD *)i + 9) - *((_QWORD *)i + 8)) >> 2;
        sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v76);
        v30 = (_DWORD *)*((_QWORD *)i + 8);
        v29 = (_DWORD *)*((_QWORD *)i + 9);
        v31 = v29 - v30;
        if (v76 <= v31)
        {
          if (v76 < v31)
          {
            v29 = &v30[v76];
            *((_QWORD *)i + 9) = v29;
          }
        }
        else
        {
          sub_20E93DC84((uint64_t)(i + 64), v76 - v31);
          v30 = (_DWORD *)*((_QWORD *)i + 8);
          v29 = (_DWORD *)*((_QWORD *)i + 9);
        }
        v32 = *(_QWORD *)(a1 + 48);
        if (v29 != v30)
        {
          do
          {
            sub_20E9EFAC4(v32, (uint64_t)&v77);
            if ((_DWORD)v77 != 2 || HIDWORD(v78) != 0)
            {
              exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              exception->__vftable = 0;
              v72 = std::bad_cast::bad_cast(exception);
              v72->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
              __cxa_throw(v72, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
            }
            *v30 = v78;
            v34 = v79;
            v79 = 0;
            if (v34)
            {
              for (j = (char *)v34[4]; j != (char *)v34[6]; j -= 16)
              {
                v37 = (void (*)(uint64_t))*((_QWORD *)j - 2);
                v36 = *((_QWORD *)j - 1);
                v37(v36);
              }
              free(j);
              v38 = (_QWORD *)v34[3];
              if (v38)
              {
                do
                {
                  v39 = (_QWORD *)*v38;
                  free(v38);
                  v38 = v39;
                }
                while (v39);
              }
              free(v34);
            }
            ++v30;
          }
          while (v30 != v29);
          v32 = *(_QWORD *)(a1 + 48);
        }
        v76 = (uint64_t)(*((_QWORD *)i + 12) - *((_QWORD *)i + 11)) >> 2;
        sub_20E9EDE6C(v32, &v76);
        v41 = (_DWORD *)*((_QWORD *)i + 11);
        v40 = (_DWORD *)*((_QWORD *)i + 12);
        v42 = v40 - v41;
        if (v76 <= v42)
        {
          if (v76 < v42)
          {
            v40 = &v41[v76];
            *((_QWORD *)i + 12) = v40;
          }
        }
        else
        {
          sub_20E93DC84((uint64_t)(i + 88), v76 - v42);
          v41 = (_DWORD *)*((_QWORD *)i + 11);
          v40 = (_DWORD *)*((_QWORD *)i + 12);
        }
        if (v40 != v41)
        {
          v43 = *(_QWORD *)(a1 + 48);
          do
          {
            sub_20E9EFAC4(v43, (uint64_t)&v77);
            if ((_DWORD)v77 != 2 || HIDWORD(v78) != 0)
            {
              v73 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v73->__vftable = 0;
              v74 = std::bad_cast::bad_cast(v73);
              v74->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
              __cxa_throw(v74, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
            }
            *v41 = v78;
            v45 = v79;
            v79 = 0;
            if (v45)
            {
              for (k = (char *)v45[4]; k != (char *)v45[6]; k -= 16)
              {
                v48 = (void (*)(uint64_t))*((_QWORD *)k - 2);
                v47 = *((_QWORD *)k - 1);
                v48(v47);
              }
              free(k);
              v49 = (_QWORD *)v45[3];
              if (v49)
              {
                do
                {
                  v50 = (_QWORD *)*v49;
                  free(v49);
                  v49 = v50;
                }
                while (v50);
              }
              free(v45);
            }
            ++v41;
          }
          while (v41 != v40);
        }
      }
    }
  }
  else
  {
    v11 = a2[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v11 - v8) >> 4) >= v10)
    {
      bzero(v8, 112 * ((((112 * v10 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112);
      a2[1] = &v8[112 * ((((112 * v10 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112];
    }
    else
    {
      if (v75 > 0x249249249249249)
        sub_20EABADD4();
      v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v7) >> 4);
      if (2 * v12 > v75)
        v6 = 2 * v12;
      if (v12 >= 0x124924924924924)
        v6 = 0x249249249249249;
      if (v6 > 0x249249249249249)
        sub_20E877A38();
      v13 = 112 * v6;
      v14 = (char *)operator new(112 * v6);
      v15 = &v14[112 * v9];
      v16 = &v14[v13];
      bzero(v15, 112 * ((((112 * v10 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112);
      v17 = &v15[112 * ((((112 * v10 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112];
      if (v8 == v7)
      {
        *a2 = v15;
        a2[1] = v17;
        a2[2] = v16;
      }
      else
      {
        do
        {
          v18 = *((_OWORD *)v8 - 7);
          *((_QWORD *)v15 - 12) = *((_QWORD *)v8 - 12);
          *((_OWORD *)v15 - 7) = v18;
          v19 = *(_OWORD *)(v8 - 88);
          v20 = *(_OWORD *)(v8 - 72);
          *((_QWORD *)v15 - 7) = *((_QWORD *)v8 - 7);
          *(_OWORD *)(v15 - 72) = v20;
          *(_OWORD *)(v15 - 88) = v19;
          *((_OWORD *)v15 - 3) = *((_OWORD *)v8 - 3);
          *((_QWORD *)v15 - 4) = *((_QWORD *)v8 - 4);
          *((_QWORD *)v8 - 6) = 0;
          *((_QWORD *)v8 - 5) = 0;
          *((_QWORD *)v8 - 4) = 0;
          *(_OWORD *)(v15 - 24) = *(_OWORD *)(v8 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v8 - 1);
          v15 -= 112;
          *((_QWORD *)v8 - 3) = 0;
          *((_QWORD *)v8 - 2) = 0;
          *((_QWORD *)v8 - 1) = 0;
          v8 -= 112;
        }
        while (v8 != v7);
        v8 = *a2;
        v21 = a2[1];
        *a2 = v15;
        a2[1] = v17;
        a2[2] = v16;
        while (v21 != v8)
        {
          v22 = (void *)*((_QWORD *)v21 - 3);
          if (v22)
          {
            *((_QWORD *)v21 - 2) = v22;
            operator delete(v22);
          }
          v23 = (void *)*((_QWORD *)v21 - 6);
          if (v23)
          {
            *((_QWORD *)v21 - 5) = v23;
            operator delete(v23);
          }
          v21 -= 112;
        }
      }
      if (v8)
        operator delete(v8);
    }
    i = *a2;
    v24 = a2[1];
    if (v24 != *a2)
      goto LABEL_37;
  }
LABEL_79:
  v77 = (a2[4] - a2[3]) >> 3;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v77);
  v51 = v77;
  v53 = a2[3];
  v52 = a2[4];
  v54 = (v52 - v53) >> 3;
  if (v77 <= v54)
  {
    v55 = a3;
    if (v77 >= v54)
    {
      v56 = *(_QWORD *)(a1 + 48);
      v57 = v52 - v53;
      if (v57)
        goto LABEL_81;
    }
    else
    {
      a2[4] = &v53[8 * v77];
      v56 = *(_QWORD *)(a1 + 48);
      v57 = 8 * v51;
      if (8 * v51)
        goto LABEL_81;
    }
  }
  else
  {
    sub_20EAC9ECC((uint64_t)(a2 + 3), v77 - v54);
    v53 = a2[3];
    v55 = a3;
    v56 = *(_QWORD *)(a1 + 48);
    v57 = a2[4] - v53;
    if (v57)
    {
LABEL_81:
      v58 = 8 * (v57 >> 3);
      do
      {
        sub_20E9EDCA8(v56, v53);
        v53 += 8;
        v58 -= 8;
      }
      while (v58);
      sub_20E9EDCA8(*(_QWORD *)(a1 + 48), a2 + 6);
      if (v55 < 2)
        return;
      goto LABEL_90;
    }
  }
  sub_20E9EDCA8(v56, a2 + 6);
  if (v55 < 2)
    return;
LABEL_90:
  v77 = (a2[8] - a2[7]) >> 2;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v77);
  v60 = a2[7];
  v59 = a2[8];
  v61 = (v59 - v60) >> 2;
  if (v77 <= v61)
  {
    if (v77 < v61)
    {
      v59 = &v60[4 * v77];
      a2[8] = v59;
    }
  }
  else
  {
    sub_20E93DC84((uint64_t)(a2 + 7), v77 - v61);
    v60 = a2[7];
    v59 = a2[8];
  }
  v62 = *(_QWORD *)(a1 + 48);
  v63 = v59 - v60;
  if (v63)
  {
    v64 = 4 * (v63 >> 2);
    do
    {
      sub_20E9EDADC(v62, v60);
      v60 += 4;
      v64 -= 4;
    }
    while (v64);
    v62 = *(_QWORD *)(a1 + 48);
  }
  v77 = (a2[11] - a2[10]) >> 2;
  sub_20E9EDE6C(v62, &v77);
  v66 = a2[10];
  v65 = a2[11];
  v67 = (v65 - v66) >> 2;
  if (v77 <= v67)
  {
    if (v77 < v67)
    {
      v65 = &v66[4 * v77];
      a2[11] = v65;
    }
  }
  else
  {
    sub_20E93DC84((uint64_t)(a2 + 10), v77 - v67);
    v66 = a2[10];
    v65 = a2[11];
  }
  v68 = *(_QWORD *)(a1 + 48);
  v69 = v65 - v66;
  if (v69)
  {
    v70 = 4 * (v69 >> 2);
    do
    {
      sub_20E9EDADC(v68, v66);
      v66 += 4;
      v70 -= 4;
    }
    while (v70);
    v68 = *(_QWORD *)(a1 + 48);
  }
  sub_20E9EE1A4(v68, (_BYTE *)a2 + 104);
  sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)a2 + 105);
}

void sub_20EAC9ECC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_20EACA068(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v6 = *(void **)(i - 24);
    if (v6)
    {
      *(_QWORD *)(i - 16) = v6;
      operator delete(v6);
    }
    v7 = *(_QWORD *)(i - 48);
    if (v7)
    {
      v8 = *(_QWORD *)(i - 40);
      v5 = *(void **)(i - 48);
      if (v8 != v7)
      {
        do
        {
          v10 = *(void **)(v8 - 32);
          if (v10)
          {
            *(_QWORD *)(v8 - 24) = v10;
            operator delete(v10);
          }
          v11 = *(void **)(v8 - 56);
          if (v11)
          {
            *(_QWORD *)(v8 - 48) = v11;
            operator delete(v11);
          }
          v12 = *(void **)(v8 - 88);
          if (v12)
          {
            *(_QWORD *)(v8 - 80) = v12;
            operator delete(v12);
          }
          v13 = *(_QWORD *)(v8 - 112);
          if (v13)
          {
            v14 = *(_QWORD *)(v8 - 104);
            v9 = *(void **)(v8 - 112);
            if (v14 != v13)
            {
              do
              {
                v15 = *(void **)(v14 - 24);
                if (v15)
                {
                  *(_QWORD *)(v14 - 16) = v15;
                  operator delete(v15);
                }
                v16 = *(void **)(v14 - 48);
                if (v16)
                {
                  *(_QWORD *)(v14 - 40) = v16;
                  operator delete(v16);
                }
                v14 -= 112;
              }
              while (v14 != v13);
              v9 = *(void **)(v8 - 112);
            }
            *(_QWORD *)(v8 - 104) = v13;
            operator delete(v9);
          }
          v8 -= 136;
        }
        while (v8 != v7);
        v5 = *(void **)(i - 48);
      }
      *(_QWORD *)(i - 40) = v7;
      operator delete(v5);
    }
  }
}

void sub_20EACA190(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;

  v28 = (a2[1] - *a2) >> 4;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v28);
  v4 = v28;
  v5 = *a2;
  v6 = a2[1];
  v7 = v6;
  v8 = v6 - *a2;
  v9 = v28 - (v8 >> 4);
  if (v28 <= v8 >> 4)
  {
    if (v28 < v8 >> 4)
    {
      v7 = &v5[16 * v28];
      a2[1] = v7;
    }
  }
  else
  {
    v10 = a2[2];
    if (v9 <= (v10 - v6) >> 4)
    {
      v16 = &v6[16 * v9];
      v22 = 16 * v28 - v8 - 16;
      if (v22 < 0x30)
        goto LABEL_39;
      v23 = (v22 >> 4) + 1;
      v7 = &v6[16 * (v23 & 0x1FFFFFFFFFFFFFFCLL)];
      v24 = v6 + 32;
      v25 = v23 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v24 - 2) = xmmword_21030D330;
        *(v24 - 1) = xmmword_21030D330;
        *v24 = xmmword_21030D330;
        v24[1] = xmmword_21030D330;
        v24 += 4;
        v25 -= 4;
      }
      while (v25);
      if (v23 != (v23 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0xBFF0000000000000;
          v7 += 16;
        }
        while (v7 != v16);
      }
      a2[1] = v16;
    }
    else
    {
      if (v28 >> 60)
        sub_20EABADD4();
      v11 = v10 - v5;
      v12 = (v10 - v5) >> 3;
      if (v12 <= v28)
        v12 = v28;
      if (v11 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13 >> 60)
        sub_20E877A38();
      v14 = (char *)operator new(16 * v13);
      v15 = &v14[16 * (v8 >> 4)];
      v16 = &v14[16 * v4];
      v17 = 16 * v4 - v8 - 16;
      v18 = v15;
      if (v17 < 0x30)
        goto LABEL_40;
      v19 = (v17 >> 4) + 1;
      v18 = &v15[16 * (v19 & 0x1FFFFFFFFFFFFFFCLL)];
      v20 = v15 + 32;
      v21 = v19 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v20 - 2) = xmmword_21030D330;
        *(v20 - 1) = xmmword_21030D330;
        *v20 = xmmword_21030D330;
        v20[1] = xmmword_21030D330;
        v20 += 4;
        v21 -= 4;
      }
      while (v21);
      if (v19 != (v19 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_40:
        do
        {
          *(_QWORD *)v18 = 0;
          *((_QWORD *)v18 + 1) = 0xBFF0000000000000;
          v18 += 16;
        }
        while (v18 != v16);
      }
      if (v6 != v5)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
          v15 -= 16;
          v7 -= 16;
        }
        while (v7 != v5);
        v7 = v5;
      }
      *a2 = v15;
      a2[1] = v16;
      a2[2] = &v14[16 * v13];
      if (v7)
      {
        operator delete(v7);
        v16 = a2[1];
      }
    }
    v5 = *a2;
    v7 = v16;
  }
  if (v7 != v5)
  {
    v26 = 16 * ((v7 - v5) >> 4);
    do
    {
      v29 = 2;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v29);
      v27 = v29;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), v5);
      if (v27 >= 2)
        sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)v5 + 1);
      v5 += 16;
      v26 -= 16;
    }
    while (v26);
  }
}

void sub_20EACA3F0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), (_BYTE *)a2);
  if (a3 >= 2)
  {
    sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 1));
    sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 2));
    if (a3 != 2)
    {
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 3));
      if (a3 >= 4)
      {
        sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 4));
        if (a3 != 4)
        {
          sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 8));
          if (a3 >= 6)
            sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 16));
        }
      }
    }
  }
}

void sub_20EACA4A0(uint64_t a1, uint64_t a2)
{
  unsigned int v9;
  char v10;
  int v11;

  v10 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a2 + 8) = _Q0;
      *(_QWORD *)(a2 + 32) = 0xBFF0000000000000;
      *(_BYTE *)(a2 + 40) = 1;
    }
    v11 = 2;
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v11);
    v9 = v11;
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)a2);
    sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 8));
    sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 16));
    sub_20E9ED7B4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 24));
    if (v9 >= 2)
      sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 32));
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    *(_BYTE *)(a2 + 40) = 0;
  }
}

void sub_20EACA588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;

  if (a2)
  {
    v3 = a3;
    v5 = a3 + 32 * a2;
    do
    {
      v6 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v6);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v3);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(v3 + 4));
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(v3 + 8));
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(v3 + 12));
      sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(v3 + 16));
      sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(v3 + 24));
      v3 += 32;
    }
    while (v3 != v5);
  }
}

void sub_20EACA628(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v12 = 32 * a2;
      bzero(a1[1], 32 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      sub_20EABADD4();
    v9 = v4 - v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        sub_20E877A38();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[32 * v7];
    v14 = 32 * a2;
    v15 = &v11[32 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20EACA74C(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  char v6;

  v4 = 1;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v4);
  v5 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v5);
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
    sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)a2);
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
  v6 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v6);
  if (v6)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 16));
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_20EACA81C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *i;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t *j;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *k;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *m;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *n;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t ii;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  size_t v100;
  size_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  const void **v139;
  const void **v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  const void **v147;
  const void **v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  size_t v171;
  size_t v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  size_t v180;
  size_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  size_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  size_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  size_t v202;
  size_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  size_t v210;
  size_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  size_t v218;
  size_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  size_t v226;
  size_t v227;
  char *v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  size_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  size_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  size_t v249;
  int v250;
  const void *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  size_t v255;
  size_t v256;
  char *v257;
  const void *v258;
  unsigned int *v259;
  unsigned int *jj;
  char *v261;
  char *v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  size_t v267;
  size_t v268;
  char *v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  size_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  size_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unsigned int *v302;
  unsigned int *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  _BYTE *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _BYTE *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t *v325;
  unint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t kk;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  char *v348;
  char *v349;
  int64_t v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  std::bad_alloc *exception;
  std::bad_alloc *v399;
  std::bad_alloc *v400;
  std::bad_alloc *v401;
  std::bad_alloc *v402;
  std::bad_alloc *v403;
  std::bad_alloc *v404;
  std::bad_alloc *v405;
  std::bad_alloc *v406;
  std::bad_alloc *v407;
  std::bad_alloc *v408;
  std::bad_alloc *v409;
  std::bad_alloc *v410;
  std::bad_alloc *v411;
  std::bad_alloc *v412;
  std::bad_alloc *v413;
  std::bad_alloc *v414;
  std::bad_alloc *v415;
  std::bad_alloc *v416;
  std::bad_alloc *v417;
  std::bad_alloc *v418;
  std::bad_alloc *v419;
  std::bad_alloc *v420;
  std::bad_alloc *v421;
  std::bad_alloc *v422;
  std::bad_alloc *v423;
  std::bad_alloc *v424;
  std::bad_alloc *v425;
  std::runtime_error *v426;
  _QWORD *v428;
  uint64_t v431;
  _QWORD *v432;
  char v433;
  _BYTE v434[9];
  uint64_t v435;

  v435 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 24;
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v3 + 40))
  {
    *(_QWORD *)v434 = v3 + 16;
    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)a2);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v434[0] = -53;
    *(_QWORD *)&v434[1] = bswap64(v5);
    std::ostream::write();
  }
  v6 = (_BYTE *)(a2 + 1360);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v6);
  }
  else
  {
    if (*v6)
      v434[0] = -61;
    else
      v434[0] = -62;
    std::ostream::write();
  }
  if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    sub_20E9F3C50();
    v7 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      goto LABEL_12;
LABEL_14:
    sub_20E9F3FC0((uint64_t)v434, v7 + 8);
    goto LABEL_15;
  }
  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
  sub_20E9F3834((uint64_t **)v434, *(_DWORD *)(a2 + 1364));
  v7 = *(_QWORD *)v4;
  if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
    goto LABEL_14;
LABEL_12:
  *(_QWORD *)v434 = v7 + 16;
  sub_20E9F3D4C((uint64_t **)v434, 6u);
LABEL_15:
  v8 = (unint64_t *)(a2 + 8);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v8);
  }
  else
  {
    v9 = *v8;
    v434[0] = -53;
    *(_QWORD *)&v434[1] = bswap64(v9);
    std::ostream::write();
  }
  v10 = *(_QWORD *)v4;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v10 + 16;
    sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 16));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v434, v10 + 8);
  }
  v11 = *(_QWORD *)v4;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v11 + 16;
    sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 20));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v434, v11 + 8);
  }
  v12 = (_BYTE *)(a2 + 24);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v12);
  }
  else
  {
    if (*v12)
      v434[0] = -61;
    else
      v434[0] = -62;
    std::ostream::write();
  }
  v13 = (unint64_t *)(a2 + 32);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v13);
  }
  else
  {
    v14 = *v13;
    v434[0] = -53;
    *(_QWORD *)&v434[1] = bswap64(v14);
    std::ostream::write();
  }
  v15 = *(_QWORD *)(a2 + 64);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v15);
  }
  else
  {
    sub_20E9F4A34();
  }
  for (i = *(uint64_t **)(a2 + 56); i; i = (uint64_t *)*i)
  {
    v17 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v17 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)i + 4));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v17 + 8);
    }
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F3D4C((uint64_t **)v434, 2u);
    }
    else
    {
      v434[0] = 2;
      std::ostream::write();
    }
    v18 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v18 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)i + 6));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v18 + 8);
    }
    v19 = (char *)i + 28;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v19);
    }
    else
    {
      if (*v19)
        v434[0] = -61;
      else
        v434[0] = -62;
      std::ostream::write();
    }
    v20 = i[7];
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F472C((uint64_t **)v434, v20);
    }
    else
    {
      sub_20E9F4A34();
    }
    for (j = (uint64_t *)i[6]; j; j = (uint64_t *)*j)
    {
      v22 = *(_QWORD *)v4;
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = v22 + 16;
        sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)j + 4));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v434, v22 + 8);
      }
      v23 = *(_QWORD *)v4;
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = v23 + 16;
        sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)j + 5));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v434, v23 + 8);
      }
    }
  }
  v24 = (_BYTE *)(a2 + 80);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v24);
  }
  else
  {
    if (*v24)
      v434[0] = -61;
    else
      v434[0] = -62;
    std::ostream::write();
  }
  v25 = *(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v25);
  }
  else
  {
    sub_20E9F4A34();
  }
  v26 = a2;
  for (k = *(uint64_t **)(a2 + 104); k; v26 = a2)
  {
    v29 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v29 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)k + 4));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v29 + 8);
    }
    v30 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v30 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)k + 5));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v30 + 8);
    }
    k = (uint64_t *)*k;
  }
  v28 = *(_QWORD *)(v26 + 152);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v28);
  }
  else
  {
    sub_20E9F4A34();
  }
  for (m = *(uint64_t **)(a2 + 144); m; m = (uint64_t *)*m)
  {
    v33 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v33 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)m + 4));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v33 + 8);
    }
    v34 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v34 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)m + 5));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v34 + 8);
    }
  }
  v32 = *(_QWORD *)v4;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v32 + 16;
    sub_20E9F3D4C((uint64_t **)v434, 6u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v434, v32 + 8);
  }
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F3834((uint64_t **)v434, *(_DWORD *)(a2 + 168));
  }
  else
  {
    sub_20E9F3C50();
  }
  v35 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v35);
  }
  else
  {
    sub_20E9F4A34();
  }
  v36 = *(unint64_t **)(a2 + 176);
  for (n = *(unint64_t **)(a2 + 184); v36 != n; v36 += 17)
  {
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F472C((uint64_t **)v434, *v36);
    }
    else
    {
      sub_20E9F4A34();
    }
    v38 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      v39 = v36 + 1;
      v40 = *(_QWORD *)(v38 + 16);
      do
      {
        v43 = *v39;
        v44 = *(_QWORD *)(v38 + 32);
        if ((unint64_t)(v44 - v40) >= 9)
        {
          v41 = *(char **)(v38 + 24);
        }
        else
        {
          if (v44)
            v45 = 2 * v44;
          else
            v45 = 0x2000;
          v46 = v40 + 9;
          while (v45 < v46)
          {
            v47 = (uint64_t)v45 <= 0;
            v45 *= 2;
            if (v47)
            {
              v45 = v46;
              break;
            }
          }
          v41 = (char *)malloc_type_realloc(*(void **)(v38 + 24), v45, 0xAD6A59EEuLL);
          if (!v41)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v399 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v399, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v38 + 24) = v41;
          *(_QWORD *)(v38 + 32) = v45;
          v40 = *(_QWORD *)(v38 + 16);
        }
        v42 = &v41[v40];
        *v42 = -53;
        *(_QWORD *)(v42 + 1) = bswap64(v43);
        v40 = *(_QWORD *)(v38 + 16) + 9;
        *(_QWORD *)(v38 + 16) = v40;
        ++v39;
      }
      while (v39 != v36 + 17);
    }
    else
    {
      *(_QWORD *)&v434[1] = bswap64(v36[1]);
      v434[0] = -53;
      std::ostream::write();
      v48 = v36[2];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v48);
      std::ostream::write();
      v49 = v36[3];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v49);
      std::ostream::write();
      v50 = v36[4];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v50);
      std::ostream::write();
      v51 = v36[5];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v51);
      std::ostream::write();
      v52 = v36[6];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v52);
      std::ostream::write();
      v53 = v36[7];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v53);
      std::ostream::write();
      v54 = v36[8];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v54);
      std::ostream::write();
      v55 = v36[9];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v55);
      std::ostream::write();
      v56 = v36[10];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v56);
      std::ostream::write();
      v57 = v36[11];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v57);
      std::ostream::write();
      v58 = v36[12];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v58);
      std::ostream::write();
      v59 = v36[13];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v59);
      std::ostream::write();
      v60 = v36[14];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v60);
      std::ostream::write();
      v61 = v36[15];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v61);
      std::ostream::write();
      v62 = v36[16];
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v62);
      std::ostream::write();
    }
  }
  v63 = *(_QWORD *)v4;
  if (*(_BYTE *)(a2 + 288))
  {
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v63 + 16;
      sub_20E9F3164((uint64_t **)v434, 1);
    }
    else
    {
      v434[0] = 1;
      std::ostream::write();
    }
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F3D4C((uint64_t **)v434, 1u);
    }
    else
    {
      v434[0] = 1;
      std::ostream::write();
    }
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F472C((uint64_t **)v434, *(_QWORD *)(a2 + 200));
    }
    else
    {
      sub_20E9F4A34();
    }
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F3D4C((uint64_t **)v434, 1u);
    }
    else
    {
      v434[0] = 1;
      std::ostream::write();
    }
    v64 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v64 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 208));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v64 + 8);
    }
    v65 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v65 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 212));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v65 + 8);
    }
    v66 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v66 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 216));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v66 + 8);
    }
    v67 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v67 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 220));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v67 + 8);
    }
    v68 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v68 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 224));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v68 + 8);
    }
    v69 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v69 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 228));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v69 + 8);
    }
    v70 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v70 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 232));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v70 + 8);
    }
    v71 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v71 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 236));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v71 + 8);
    }
    v72 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v72 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 240));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v72 + 8);
    }
    v73 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v73 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 244));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v73 + 8);
    }
    v74 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v74 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 248));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v74 + 8);
    }
    v75 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v75 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 252));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v75 + 8);
    }
    v76 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v76 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 256));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v76 + 8);
    }
    v77 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v77 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 260));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v77 + 8);
    }
    v78 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 3);
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F472C((uint64_t **)v434, v78);
    }
    else
    {
      sub_20E9F4A34();
    }
    v79 = *(_QWORD *)(a2 + 264);
    v80 = *(_QWORD *)(a2 + 272) - v79;
    if (v80)
    {
      v81 = (_BYTE *)(v79 + 32);
      v82 = 40 * (v80 / 40);
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
          sub_20E9F3D4C((uint64_t **)v434, 1u);
        }
        else
        {
          v434[0] = 1;
          std::ostream::write();
        }
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
          sub_20E9F472C((uint64_t **)v434, *((_QWORD *)v81 - 4));
        }
        else
        {
          sub_20E9F4A34();
        }
        v83 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v83 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v81 - 6));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v83 + 8);
        }
        v84 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v84 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v81 - 5));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v84 + 8);
        }
        v85 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v85 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v81 - 4));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v85 + 8);
        }
        v86 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v86 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v81 - 3));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v86 + 8);
        }
        v87 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v87 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v81 - 2));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v87 + 8);
        }
        v88 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v88 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v81 - 1));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v88 + 8);
        }
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
          sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v81);
        }
        else
        {
          if (*v81)
            v434[0] = -61;
          else
            v434[0] = -62;
          std::ostream::write();
        }
        v81 += 40;
        v82 -= 40;
      }
      while (v82);
    }
  }
  else if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v63 + 16;
    sub_20E9F3164((uint64_t **)v434, 0);
  }
  else
  {
    v434[0] = 0;
    std::ostream::write();
  }
  v89 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v89);
  }
  else
  {
    sub_20E9F4A34();
  }
  v90 = *(_QWORD *)(a2 + 296);
  for (ii = *(_QWORD *)(a2 + 304); v90 != ii; v90 += 144)
  {
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F472C((uint64_t **)v434, *(_QWORD *)v90);
    }
    else
    {
      sub_20E9F4A34();
    }
    v92 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v92 + 16;
      sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(v90 + 8));
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v434, v92 + 8);
    }
    v93 = *(_QWORD *)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      v94 = (unint64_t *)(v90 + 16);
      v95 = *(_QWORD *)(v93 + 16);
      do
      {
        v98 = *v94;
        v99 = *(_QWORD *)(v93 + 32);
        if ((unint64_t)(v99 - v95) >= 9)
        {
          v96 = *(char **)(v93 + 24);
        }
        else
        {
          if (v99)
            v100 = 2 * v99;
          else
            v100 = 0x2000;
          v101 = v95 + 9;
          while (v100 < v101)
          {
            v47 = (uint64_t)v100 <= 0;
            v100 *= 2;
            if (v47)
            {
              v100 = v101;
              break;
            }
          }
          v96 = (char *)malloc_type_realloc(*(void **)(v93 + 24), v100, 0xAD6A59EEuLL);
          if (!v96)
          {
            v400 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v401 = std::bad_alloc::bad_alloc(v400);
            __cxa_throw(v401, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v93 + 24) = v96;
          *(_QWORD *)(v93 + 32) = v100;
          v95 = *(_QWORD *)(v93 + 16);
        }
        v97 = &v96[v95];
        *v97 = -53;
        *(_QWORD *)(v97 + 1) = bswap64(v98);
        v95 = *(_QWORD *)(v93 + 16) + 9;
        *(_QWORD *)(v93 + 16) = v95;
        ++v94;
      }
      while (v94 != (unint64_t *)(v90 + 144));
    }
    else
    {
      *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(v90 + 16));
      v434[0] = -53;
      std::ostream::write();
      v102 = *(_QWORD *)(v90 + 24);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v102);
      std::ostream::write();
      v103 = *(_QWORD *)(v90 + 32);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v103);
      std::ostream::write();
      v104 = *(_QWORD *)(v90 + 40);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v104);
      std::ostream::write();
      v105 = *(_QWORD *)(v90 + 48);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v105);
      std::ostream::write();
      v106 = *(_QWORD *)(v90 + 56);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v106);
      std::ostream::write();
      v107 = *(_QWORD *)(v90 + 64);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v107);
      std::ostream::write();
      v108 = *(_QWORD *)(v90 + 72);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v108);
      std::ostream::write();
      v109 = *(_QWORD *)(v90 + 80);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v109);
      std::ostream::write();
      v110 = *(_QWORD *)(v90 + 88);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v110);
      std::ostream::write();
      v111 = *(_QWORD *)(v90 + 96);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v111);
      std::ostream::write();
      v112 = *(_QWORD *)(v90 + 104);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v112);
      std::ostream::write();
      v113 = *(_QWORD *)(v90 + 112);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v113);
      std::ostream::write();
      v114 = *(_QWORD *)(v90 + 120);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v114);
      std::ostream::write();
      v115 = *(_QWORD *)(v90 + 128);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v115);
      std::ostream::write();
      v116 = *(_QWORD *)(v90 + 136);
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v116);
      std::ostream::write();
    }
  }
  v117 = (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 3;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v117);
  }
  else
  {
    sub_20E9F4A34();
  }
  v119 = *(unint64_t **)(a2 + 320);
  v118 = *(unint64_t **)(a2 + 328);
  v120 = v118 - v119;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    if (v118 != v119)
    {
      v121 = 8 * v120;
      do
      {
        sub_20E9F472C((uint64_t **)v434, *v119++);
        v121 -= 8;
      }
      while (v121);
    }
  }
  else if (v118 != v119)
  {
    v122 = 8 * v120;
    do
    {
      sub_20E9F4A34();
      ++v119;
      v122 -= 8;
    }
    while (v122);
  }
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F3164((uint64_t **)v434, *(_BYTE *)(a2 + 344));
  }
  else
  {
    v123 = *(char *)(a2 + 344);
    if (v123 < 0)
    {
      v434[0] = -52;
      v434[1] = v123;
    }
    else
    {
      v434[0] = *(_BYTE *)(a2 + 344);
    }
    std::ostream::write();
  }
  if (*(_BYTE *)(a2 + 824))
  {
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F3164((uint64_t **)v434, 1);
    }
    else
    {
      v434[0] = 1;
      std::ostream::write();
    }
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F3D4C((uint64_t **)v434, 4u);
    }
    else
    {
      v434[0] = 4;
      std::ostream::write();
    }
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    sub_20EAD0214(a1, a2 + 352, 4u);
    v124 = *(_QWORD *)(a1 + 24);
    v125 = *(_QWORD *)(*(_QWORD *)(v124 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v124 + 48), *(_QWORD *)(v124 + 16) - v125 - 9);
    v126 = *(_QWORD *)(v124 + 48);
    if (v126)
      memmove((void *)(*(_QWORD *)(v124 + 24) + v125), *(const void **)(v124 + 56), v126);
    *(_QWORD *)(v124 + 48) = 0;
    v127 = *(_QWORD *)(v124 + 80);
    v128 = *(_QWORD *)(v124 + 88) - 8;
    *(_QWORD *)(v124 + 88) = v128;
    if (v127 == v128)
    {
      std::ostream::write();
      if (*(_BYTE *)(v124 + 40))
      {
        free(*(void **)(v124 + 24));
        *(_BYTE *)(v124 + 40) = 0;
      }
    }
  }
  else
  {
    v434[0] = 0;
    sub_20E9ED13C(a1, v434);
  }
  v129 = *(_QWORD *)v4;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v129 + 16;
    sub_20E9F3D4C((uint64_t **)v434, 3u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v434, v129 + 8);
  }
  v130 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 840) - *(_QWORD *)(a2 + 832)) >> 4);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v130);
  }
  else
  {
    sub_20E9F4A34();
  }
  v131 = *(_QWORD *)(a2 + 832);
  v132 = *(_QWORD *)(a2 + 840) - v131;
  if (v132)
  {
    v133 = 176 * (v132 / 176);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
        sub_20E9F3D4C((uint64_t **)v434, 2u);
      }
      else
      {
        v434[0] = 2;
        std::ostream::write();
      }
      sub_20EAD09DC(a1, v131, 2u);
      v131 += 176;
      v133 -= 176;
    }
    while (v133);
  }
  v134 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 864) - *(_QWORD *)(a2 + 856)) >> 4);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v134);
  }
  else
  {
    sub_20E9F4A34();
  }
  v135 = *(_QWORD *)(a2 + 856);
  v136 = *(_QWORD *)(a2 + 864) - v135;
  if (v136)
  {
    v137 = 176 * (v136 / 176);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
        sub_20E9F3D4C((uint64_t **)v434, 2u);
      }
      else
      {
        v434[0] = 2;
        std::ostream::write();
      }
      sub_20EAD09DC(a1, v135, 2u);
      v135 += 176;
      v137 -= 176;
    }
    while (v137);
  }
  v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 888) - *(_QWORD *)(a2 + 880)) >> 3);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v138);
  }
  else
  {
    sub_20E9F4A34();
  }
  v139 = *(const void ***)(a2 + 880);
  v140 = *(const void ***)(a2 + 888);
  v141 = ((char *)v140 - (char *)v139) / 24;
  v142 = *(_QWORD *)v4;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v142 + 16;
    if (v140 != v139)
    {
      v143 = 24 * v141;
      do
      {
        sub_20E9F4E1C((uint64_t)&v433, (uint64_t **)v434, v139);
        v139 += 3;
        v143 -= 24;
      }
      while (v143);
    }
  }
  else if (v140 != v139)
  {
    v144 = v142 + 8;
    v145 = 24 * v141;
    do
    {
      sub_20E9F5254((uint64_t)v434, v144, (uint64_t)v139);
      v139 += 3;
      v145 -= 24;
    }
    while (v145);
  }
  v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 912) - *(_QWORD *)(a2 + 904)) >> 3);
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
    sub_20E9F472C((uint64_t **)v434, v146);
  }
  else
  {
    sub_20E9F4A34();
  }
  v147 = *(const void ***)(a2 + 904);
  v148 = *(const void ***)(a2 + 912);
  v149 = ((char *)v148 - (char *)v147) / 24;
  v150 = *(_QWORD *)v4;
  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v150 + 16;
    if (v148 != v147)
    {
      v151 = 24 * v149;
      do
      {
        sub_20E9F4E1C((uint64_t)&v433, (uint64_t **)v434, v147);
        v147 += 3;
        v151 -= 24;
      }
      while (v151);
    }
  }
  else if (v148 != v147)
  {
    v152 = v150 + 8;
    v153 = 24 * v149;
    do
    {
      sub_20E9F5254((uint64_t)v434, v152, (uint64_t)v147);
      v147 += 3;
      v153 -= 24;
    }
    while (v153);
  }
  v154 = *(_QWORD *)v4;
  if (*(_BYTE *)(a2 + 944))
  {
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = v154 + 16;
      sub_20E9F3164((uint64_t **)v434, 1);
    }
    else
    {
      v434[0] = 1;
      std::ostream::write();
    }
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F3D4C((uint64_t **)v434, 1u);
    }
    else
    {
      v434[0] = 1;
      std::ostream::write();
    }
    v155 = (unint64_t *)(a2 + 928);
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v155);
    }
    else
    {
      v156 = *v155;
      v434[0] = -53;
      *(_QWORD *)&v434[1] = bswap64(v156);
      std::ostream::write();
    }
    v157 = (_BYTE *)(a2 + 936);
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v157);
    }
    else
    {
      if (*v157)
        v434[0] = -61;
      else
        v434[0] = -62;
      std::ostream::write();
    }
    v158 = (_BYTE *)(a2 + 937);
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v158);
    }
    else
    {
      if (*v158)
        v434[0] = -61;
      else
        v434[0] = -62;
      std::ostream::write();
    }
    v159 = (_BYTE *)(a2 + 938);
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v159);
    }
    else
    {
      if (*v159)
        v434[0] = -61;
      else
        v434[0] = -62;
      std::ostream::write();
    }
    v160 = (_BYTE *)(a2 + 939);
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v160);
    }
    else
    {
      if (*v160)
        v434[0] = -61;
      else
        v434[0] = -62;
      std::ostream::write();
    }
  }
  else if (*(_BYTE *)(*(_QWORD *)v4 + 40))
  {
    *(_QWORD *)v434 = v154 + 16;
    sub_20E9F3164((uint64_t **)v434, 0);
  }
  else
  {
    v434[0] = 0;
    std::ostream::write();
  }
  if (a3 >= 2)
  {
    v161 = *(_QWORD *)v4;
    if (*(_BYTE *)(a2 + 976))
    {
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = v161 + 16;
        sub_20E9F3164((uint64_t **)v434, 1);
      }
      else
      {
        v434[0] = 1;
        std::ostream::write();
      }
      v162 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a2 + 960) - *(_QWORD *)(a2 + 952)) >> 3);
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
        sub_20E9F472C((uint64_t **)v434, v162);
      }
      else
      {
        sub_20E9F4A34();
      }
      v163 = a2;
      v432 = *(_QWORD **)(a2 + 952);
      v428 = *(_QWORD **)(a2 + 960);
      if (v428 != v432)
      {
        while (1)
        {
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F3D4C((uint64_t **)v434, 2u);
          }
          else
          {
            v434[0] = 2;
            std::ostream::write();
          }
          v164 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v432[1] - *v432) >> 3);
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F472C((uint64_t **)v434, v164);
          }
          else
          {
            sub_20E9F4A34();
          }
          v165 = *v432;
          v431 = v432[1];
          if (v431 != *v432)
            break;
LABEL_378:
          v166 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v432[4] - v432[3]) >> 2);
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F472C((uint64_t **)v434, v166);
          }
          else
          {
            sub_20E9F4A34();
          }
          v259 = (unsigned int *)v432[3];
          for (jj = (unsigned int *)v432[4]; v259 != jj; v259 += 3)
          {
            v263 = *(_QWORD *)v4;
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              v264 = *v259;
              v265 = *(_QWORD *)(v263 + 32);
              v266 = *(_QWORD *)(v263 + 16);
              if ((unint64_t)(v265 - v266) >= 5)
              {
                v269 = *(char **)(v263 + 24);
              }
              else
              {
                if (v265)
                  v267 = 2 * v265;
                else
                  v267 = 0x2000;
                v268 = v266 + 5;
                while (v267 < v268)
                {
                  v47 = (uint64_t)v267 <= 0;
                  v267 *= 2;
                  if (v47)
                  {
                    v267 = v268;
                    break;
                  }
                }
                v269 = (char *)malloc_type_realloc(*(void **)(v263 + 24), v267, 0xAD6A59EEuLL);
                if (!v269)
                {
LABEL_794:
                  v402 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                  v403 = std::bad_alloc::bad_alloc(v402);
                  __cxa_throw(v403, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
                }
                *(_QWORD *)(v263 + 24) = v269;
                *(_QWORD *)(v263 + 32) = v267;
                v266 = *(_QWORD *)(v263 + 16);
              }
              v273 = &v269[v266];
              *v273 = -54;
              *(_DWORD *)(v273 + 1) = bswap32(v264);
              v274 = *(_QWORD *)(v263 + 16);
              v275 = v274 + 5;
              *(_QWORD *)(v263 + 16) = v274 + 5;
              v276 = v259[1];
              v277 = *(_QWORD *)(v263 + 32);
              if ((unint64_t)(v277 - (v274 + 5)) >= 5)
              {
                v279 = *(char **)(v263 + 24);
              }
              else
              {
                if (v277)
                  v278 = 2 * v277;
                else
                  v278 = 0x2000;
                while (v278 < v274 + 10)
                {
                  v47 = (uint64_t)v278 <= 0;
                  v278 *= 2;
                  if (v47)
                  {
                    v278 = v274 + 10;
                    break;
                  }
                }
                v279 = (char *)malloc_type_realloc(*(void **)(v263 + 24), v278, 0xAD6A59EEuLL);
                if (!v279)
                  goto LABEL_794;
                *(_QWORD *)(v263 + 24) = v279;
                *(_QWORD *)(v263 + 32) = v278;
                v275 = *(_QWORD *)(v263 + 16);
              }
              v280 = &v279[v275];
              *v280 = -54;
              *(_DWORD *)(v280 + 1) = bswap32(v276);
              v281 = *(_QWORD *)(v263 + 16);
              v282 = v281 + 5;
              *(_QWORD *)(v263 + 16) = v281 + 5;
              v283 = v259[2];
              v284 = *(_QWORD *)(v263 + 32);
              if ((unint64_t)(v284 - (v281 + 5)) >= 5)
              {
                v261 = *(char **)(v263 + 24);
              }
              else
              {
                if (v284)
                  v285 = 2 * v284;
                else
                  v285 = 0x2000;
                while (v285 < v281 + 10)
                {
                  v47 = (uint64_t)v285 <= 0;
                  v285 *= 2;
                  if (v47)
                  {
                    v285 = v281 + 10;
                    break;
                  }
                }
                v261 = (char *)malloc_type_realloc(*(void **)(v263 + 24), v285, 0xAD6A59EEuLL);
                if (!v261)
                  goto LABEL_794;
                *(_QWORD *)(v263 + 24) = v261;
                *(_QWORD *)(v263 + 32) = v285;
                v282 = *(_QWORD *)(v263 + 16);
              }
              v262 = &v261[v282];
              *v262 = -54;
              *(_DWORD *)(v262 + 1) = bswap32(v283);
              *(_QWORD *)(v263 + 16) += 5;
            }
            else
            {
              v270 = *v259;
              v434[0] = -54;
              *(_DWORD *)&v434[1] = bswap32(v270);
              std::ostream::write();
              v271 = v259[1];
              v434[0] = -54;
              *(_DWORD *)&v434[1] = bswap32(v271);
              std::ostream::write();
              v272 = v259[2];
              v434[0] = -54;
              *(_DWORD *)&v434[1] = bswap32(v272);
              std::ostream::write();
            }
          }
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 6);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 7);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 8);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 9);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 10);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 11);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 12);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 13);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 14);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 15);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 16);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 17);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 18);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 19);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 20);
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v432 + 21);
          }
          else
          {
            *(_QWORD *)&v434[1] = bswap64(v432[6]);
            v434[0] = -53;
            std::ostream::write();
            v286 = v432[7];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v286);
            std::ostream::write();
            v287 = v432[8];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v287);
            std::ostream::write();
            v288 = v432[9];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v288);
            std::ostream::write();
            v289 = v432[10];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v289);
            std::ostream::write();
            v290 = v432[11];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v290);
            std::ostream::write();
            v291 = v432[12];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v291);
            std::ostream::write();
            v292 = v432[13];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v292);
            std::ostream::write();
            v293 = v432[14];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v293);
            std::ostream::write();
            v294 = v432[15];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v294);
            std::ostream::write();
            v295 = v432[16];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v295);
            std::ostream::write();
            v296 = v432[17];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v296);
            std::ostream::write();
            v297 = v432[18];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v297);
            std::ostream::write();
            v298 = v432[19];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v298);
            std::ostream::write();
            v299 = v432[20];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v299);
            std::ostream::write();
            v300 = v432[21];
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v300);
            std::ostream::write();
          }
          v301 = (uint64_t)(v432[23] - v432[22]) >> 2;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F472C((uint64_t **)v434, v301);
          }
          else
          {
            sub_20E9F4A34();
          }
          v303 = (unsigned int *)v432[22];
          v302 = (unsigned int *)v432[23];
          v304 = v302 - v303;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            if (v302 != v303)
            {
              v305 = 4 * v304;
              do
              {
                sub_20E9F3834((uint64_t **)v434, *v303++);
                v305 -= 4;
              }
              while (v305);
            }
          }
          else if (v302 != v303)
          {
            v306 = 4 * v304;
            do
            {
              sub_20E9F3C50();
              ++v303;
              v306 -= 4;
            }
            while (v306);
          }
          v307 = v432 + 25;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v307);
          }
          else
          {
            v308 = *v307;
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v308);
            std::ostream::write();
          }
          v309 = v432 + 26;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v309);
          }
          else
          {
            if (*v309)
              v434[0] = -61;
            else
              v434[0] = -62;
            std::ostream::write();
          }
          v432 += 27;
          v163 = a2;
          if (v432 == v428)
            goto LABEL_618;
        }
        while (1)
        {
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F3D4C((uint64_t **)v434, 2u);
          }
          else
          {
            v434[0] = 2;
            std::ostream::write();
          }
          v167 = *(_QWORD *)v4;
          v168 = *(_QWORD *)v165;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            v169 = *(_QWORD *)(v167 + 32);
            v170 = *(_QWORD *)(v167 + 16);
            if ((unint64_t)(v169 - v170) >= 9)
            {
              v173 = *(char **)(v167 + 24);
            }
            else
            {
              if (v169)
                v171 = 2 * v169;
              else
                v171 = 0x2000;
              v172 = v170 + 9;
              while (v171 < v172)
              {
                v47 = (uint64_t)v171 <= 0;
                v171 *= 2;
                if (v47)
                {
                  v171 = v172;
                  break;
                }
              }
              v173 = (char *)malloc_type_realloc(*(void **)(v167 + 24), v171, 0xAD6A59EEuLL);
              if (!v173)
              {
                v412 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v413 = std::bad_alloc::bad_alloc(v412);
                __cxa_throw(v413, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
              }
              *(_QWORD *)(v167 + 24) = v173;
              *(_QWORD *)(v167 + 32) = v171;
              v170 = *(_QWORD *)(v167 + 16);
            }
            v183 = &v173[v170];
            *v183 = -53;
            *(_QWORD *)(v183 + 1) = bswap64(v168);
            v184 = *(_QWORD *)(v167 + 16);
            v185 = v184 + 9;
            *(_QWORD *)(v167 + 16) = v184 + 9;
            v186 = *(_QWORD *)(v165 + 8);
            v187 = *(_QWORD *)(v167 + 32);
            if ((unint64_t)(v187 - (v184 + 9)) >= 9)
            {
              v189 = *(char **)(v167 + 24);
            }
            else
            {
              if (v187)
                v188 = 2 * v187;
              else
                v188 = 0x2000;
              while (v188 < v184 + 18)
              {
                v47 = (uint64_t)v188 <= 0;
                v188 *= 2;
                if (v47)
                {
                  v188 = v184 + 18;
                  break;
                }
              }
              v189 = (char *)malloc_type_realloc(*(void **)(v167 + 24), v188, 0xAD6A59EEuLL);
              if (!v189)
              {
                v410 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v411 = std::bad_alloc::bad_alloc(v410);
                __cxa_throw(v411, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
              }
              *(_QWORD *)(v167 + 24) = v189;
              *(_QWORD *)(v167 + 32) = v188;
              v185 = *(_QWORD *)(v167 + 16);
            }
            v190 = &v189[v185];
            *v190 = -53;
            *(_QWORD *)(v190 + 1) = bswap64(v186);
            v191 = *(_QWORD *)(v167 + 16);
            v192 = v191 + 9;
            *(_QWORD *)(v167 + 16) = v191 + 9;
            v193 = *(_QWORD *)(v165 + 16);
            v194 = *(_QWORD *)(v167 + 32);
            if ((unint64_t)(v194 - (v191 + 9)) >= 9)
            {
              v196 = *(char **)(v167 + 24);
            }
            else
            {
              if (v194)
                v195 = 2 * v194;
              else
                v195 = 0x2000;
              while (v195 < v191 + 18)
              {
                v47 = (uint64_t)v195 <= 0;
                v195 *= 2;
                if (v47)
                {
                  v195 = v191 + 18;
                  break;
                }
              }
              v196 = (char *)malloc_type_realloc(*(void **)(v167 + 24), v195, 0xAD6A59EEuLL);
              if (!v196)
              {
                v404 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v405 = std::bad_alloc::bad_alloc(v404);
                __cxa_throw(v405, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
              }
              *(_QWORD *)(v167 + 24) = v196;
              *(_QWORD *)(v167 + 32) = v195;
              v192 = *(_QWORD *)(v167 + 16);
            }
            v197 = &v196[v192];
            *v197 = -53;
            *(_QWORD *)(v197 + 1) = bswap64(v193);
            *(_QWORD *)(v167 + 16) += 9;
            v176 = *(_QWORD *)v4;
            v177 = *(_QWORD *)(v165 + 24);
            if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
LABEL_433:
              v434[0] = -53;
              *(_QWORD *)&v434[1] = bswap64(v177);
              std::ostream::write();
              v198 = *(_QWORD *)v4;
              v199 = *(_QWORD *)(v165 + 32);
              if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
                goto LABEL_447;
              goto LABEL_434;
            }
          }
          else
          {
            *(_QWORD *)&v434[1] = bswap64(v168);
            v434[0] = -53;
            std::ostream::write();
            v174 = *(_QWORD *)(v165 + 8);
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v174);
            std::ostream::write();
            v175 = *(_QWORD *)(v165 + 16);
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v175);
            std::ostream::write();
            v176 = *(_QWORD *)v4;
            v177 = *(_QWORD *)(v165 + 24);
            if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
              goto LABEL_433;
          }
          v178 = *(_QWORD *)(v176 + 32);
          v179 = *(_QWORD *)(v176 + 16);
          if ((unint64_t)(v178 - v179) >= 9)
          {
            v182 = *(char **)(v176 + 24);
          }
          else
          {
            if (v178)
              v180 = 2 * v178;
            else
              v180 = 0x2000;
            v181 = v179 + 9;
            while (v180 < v181)
            {
              v47 = (uint64_t)v180 <= 0;
              v180 *= 2;
              if (v47)
              {
                v180 = v181;
                break;
              }
            }
            v182 = (char *)malloc_type_realloc(*(void **)(v176 + 24), v180, 0xAD6A59EEuLL);
            if (!v182)
            {
              v418 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v419 = std::bad_alloc::bad_alloc(v418);
              __cxa_throw(v419, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v176 + 24) = v182;
            *(_QWORD *)(v176 + 32) = v180;
            v179 = *(_QWORD *)(v176 + 16);
          }
          v205 = &v182[v179];
          *v205 = -53;
          *(_QWORD *)(v205 + 1) = bswap64(v177);
          *(_QWORD *)(v176 + 16) += 9;
          v198 = *(_QWORD *)v4;
          v199 = *(_QWORD *)(v165 + 32);
          if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
LABEL_447:
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v199);
            std::ostream::write();
            v206 = *(_QWORD *)v4;
            v207 = *(_QWORD *)(v165 + 40);
            if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
              goto LABEL_461;
            goto LABEL_448;
          }
LABEL_434:
          v200 = *(_QWORD *)(v198 + 32);
          v201 = *(_QWORD *)(v198 + 16);
          if ((unint64_t)(v200 - v201) >= 9)
          {
            v204 = *(char **)(v198 + 24);
          }
          else
          {
            if (v200)
              v202 = 2 * v200;
            else
              v202 = 0x2000;
            v203 = v201 + 9;
            while (v202 < v203)
            {
              v47 = (uint64_t)v202 <= 0;
              v202 *= 2;
              if (v47)
              {
                v202 = v203;
                break;
              }
            }
            v204 = (char *)malloc_type_realloc(*(void **)(v198 + 24), v202, 0xAD6A59EEuLL);
            if (!v204)
            {
              v422 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v423 = std::bad_alloc::bad_alloc(v422);
              __cxa_throw(v423, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v198 + 24) = v204;
            *(_QWORD *)(v198 + 32) = v202;
            v201 = *(_QWORD *)(v198 + 16);
          }
          v213 = &v204[v201];
          *v213 = -53;
          *(_QWORD *)(v213 + 1) = bswap64(v199);
          *(_QWORD *)(v198 + 16) += 9;
          v206 = *(_QWORD *)v4;
          v207 = *(_QWORD *)(v165 + 40);
          if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
LABEL_461:
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v207);
            std::ostream::write();
            v214 = *(_QWORD *)v4;
            v215 = *(_QWORD *)(v165 + 48);
            if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
              goto LABEL_475;
            goto LABEL_462;
          }
LABEL_448:
          v208 = *(_QWORD *)(v206 + 32);
          v209 = *(_QWORD *)(v206 + 16);
          if ((unint64_t)(v208 - v209) >= 9)
          {
            v212 = *(char **)(v206 + 24);
          }
          else
          {
            if (v208)
              v210 = 2 * v208;
            else
              v210 = 0x2000;
            v211 = v209 + 9;
            while (v210 < v211)
            {
              v47 = (uint64_t)v210 <= 0;
              v210 *= 2;
              if (v47)
              {
                v210 = v211;
                break;
              }
            }
            v212 = (char *)malloc_type_realloc(*(void **)(v206 + 24), v210, 0xAD6A59EEuLL);
            if (!v212)
            {
              v406 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v407 = std::bad_alloc::bad_alloc(v406);
              __cxa_throw(v407, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v206 + 24) = v212;
            *(_QWORD *)(v206 + 32) = v210;
            v209 = *(_QWORD *)(v206 + 16);
          }
          v221 = &v212[v209];
          *v221 = -53;
          *(_QWORD *)(v221 + 1) = bswap64(v207);
          *(_QWORD *)(v206 + 16) += 9;
          v214 = *(_QWORD *)v4;
          v215 = *(_QWORD *)(v165 + 48);
          if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
LABEL_475:
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v215);
            std::ostream::write();
            v222 = *(_QWORD *)v4;
            v223 = *(_QWORD *)(v165 + 56);
            if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
              goto LABEL_489;
            goto LABEL_476;
          }
LABEL_462:
          v216 = *(_QWORD *)(v214 + 32);
          v217 = *(_QWORD *)(v214 + 16);
          if ((unint64_t)(v216 - v217) >= 9)
          {
            v220 = *(char **)(v214 + 24);
          }
          else
          {
            if (v216)
              v218 = 2 * v216;
            else
              v218 = 0x2000;
            v219 = v217 + 9;
            while (v218 < v219)
            {
              v47 = (uint64_t)v218 <= 0;
              v218 *= 2;
              if (v47)
              {
                v218 = v219;
                break;
              }
            }
            v220 = (char *)malloc_type_realloc(*(void **)(v214 + 24), v218, 0xAD6A59EEuLL);
            if (!v220)
            {
              v408 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v409 = std::bad_alloc::bad_alloc(v408);
              __cxa_throw(v409, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v214 + 24) = v220;
            *(_QWORD *)(v214 + 32) = v218;
            v217 = *(_QWORD *)(v214 + 16);
          }
          v229 = &v220[v217];
          *v229 = -53;
          *(_QWORD *)(v229 + 1) = bswap64(v215);
          *(_QWORD *)(v214 + 16) += 9;
          v222 = *(_QWORD *)v4;
          v223 = *(_QWORD *)(v165 + 56);
          if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
LABEL_489:
            *(_QWORD *)&v434[1] = bswap64(v223);
            v434[0] = -53;
            std::ostream::write();
            v230 = *(_QWORD *)(v165 + 64);
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v230);
            std::ostream::write();
            v231 = *(_QWORD *)(v165 + 72);
            v434[0] = -53;
            *(_QWORD *)&v434[1] = bswap64(v231);
            std::ostream::write();
            if (!*(_BYTE *)(v165 + 96))
              goto LABEL_516;
            goto LABEL_490;
          }
LABEL_476:
          v224 = *(_QWORD *)(v222 + 32);
          v225 = *(_QWORD *)(v222 + 16);
          if ((unint64_t)(v224 - v225) >= 9)
          {
            v228 = *(char **)(v222 + 24);
          }
          else
          {
            if (v224)
              v226 = 2 * v224;
            else
              v226 = 0x2000;
            v227 = v225 + 9;
            while (v226 < v227)
            {
              v47 = (uint64_t)v226 <= 0;
              v226 *= 2;
              if (v47)
              {
                v226 = v227;
                break;
              }
            }
            v228 = (char *)malloc_type_realloc(*(void **)(v222 + 24), v226, 0xAD6A59EEuLL);
            if (!v228)
            {
              v420 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v421 = std::bad_alloc::bad_alloc(v420);
              __cxa_throw(v421, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v222 + 24) = v228;
            *(_QWORD *)(v222 + 32) = v226;
            v225 = *(_QWORD *)(v222 + 16);
          }
          v232 = &v228[v225];
          *v232 = -53;
          *(_QWORD *)(v232 + 1) = bswap64(v223);
          v233 = *(_QWORD *)(v222 + 16);
          v234 = v233 + 9;
          *(_QWORD *)(v222 + 16) = v233 + 9;
          v235 = *(_QWORD *)(v165 + 64);
          v236 = *(_QWORD *)(v222 + 32);
          if ((unint64_t)(v236 - (v233 + 9)) >= 9)
          {
            v238 = *(char **)(v222 + 24);
          }
          else
          {
            if (v236)
              v237 = 2 * v236;
            else
              v237 = 0x2000;
            while (v237 < v233 + 18)
            {
              v47 = (uint64_t)v237 <= 0;
              v237 *= 2;
              if (v47)
              {
                v237 = v233 + 18;
                break;
              }
            }
            v238 = (char *)malloc_type_realloc(*(void **)(v222 + 24), v237, 0xAD6A59EEuLL);
            if (!v238)
            {
              v416 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v417 = std::bad_alloc::bad_alloc(v416);
              __cxa_throw(v417, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v222 + 24) = v238;
            *(_QWORD *)(v222 + 32) = v237;
            v234 = *(_QWORD *)(v222 + 16);
          }
          v239 = &v238[v234];
          *v239 = -53;
          *(_QWORD *)(v239 + 1) = bswap64(v235);
          v240 = *(_QWORD *)(v222 + 16);
          v241 = v240 + 9;
          *(_QWORD *)(v222 + 16) = v240 + 9;
          v242 = *(_QWORD *)(v165 + 72);
          v243 = *(_QWORD *)(v222 + 32);
          if ((unint64_t)(v243 - (v240 + 9)) >= 9)
          {
            v245 = *(char **)(v222 + 24);
          }
          else
          {
            if (v243)
              v244 = 2 * v243;
            else
              v244 = 0x2000;
            while (v244 < v240 + 18)
            {
              v47 = (uint64_t)v244 <= 0;
              v244 *= 2;
              if (v47)
              {
                v244 = v240 + 18;
                break;
              }
            }
            v245 = (char *)malloc_type_realloc(*(void **)(v222 + 24), v244, 0xAD6A59EEuLL);
            if (!v245)
            {
              v414 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v415 = std::bad_alloc::bad_alloc(v414);
              __cxa_throw(v415, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v222 + 24) = v245;
            *(_QWORD *)(v222 + 32) = v244;
            v241 = *(_QWORD *)(v222 + 16);
          }
          v246 = &v245[v241];
          *v246 = -53;
          *(_QWORD *)(v246 + 1) = bswap64(v242);
          *(_QWORD *)(v222 + 16) += 9;
          if (!*(_BYTE *)(v165 + 96))
          {
LABEL_516:
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
              sub_20E9F3164((uint64_t **)v434, 0);
            }
            else
            {
              v434[0] = 0;
              std::ostream::write();
            }
            goto LABEL_526;
          }
LABEL_490:
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F3164((uint64_t **)v434, 1);
          }
          else
          {
            v434[0] = 1;
            std::ostream::write();
          }
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F472C((uint64_t **)v434, *(_QWORD *)(v165 + 80));
          }
          else
          {
            sub_20E9F4A34();
          }
          v247 = *(_QWORD *)v4;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = v247 + 16;
            sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(v165 + 88));
          }
          else
          {
            sub_20E9F3FC0((uint64_t)v434, v247 + 8);
          }
LABEL_526:
          if (!*(_BYTE *)(v165 + 128))
          {
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
              sub_20E9F3164((uint64_t **)v434, 0);
            }
            else
            {
              v434[0] = 0;
              std::ostream::write();
            }
            goto LABEL_381;
          }
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
            sub_20E9F3164((uint64_t **)v434, 1);
          }
          else
          {
            v434[0] = 1;
            std::ostream::write();
          }
          v248 = *(_QWORD *)v4;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
            *(_QWORD *)v434 = v248 + 16;
            if (*(char *)(v165 + 127) < 0)
            {
              v249 = *(_QWORD *)(v165 + 112);
              if (HIDWORD(v249))
              {
                v426 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                sub_20E9F520C(v426, "container size overflow");
                __cxa_throw(v426, (struct type_info *)&unk_24C9B76C0, (void (*)(void *))std::runtime_error::~runtime_error);
              }
            }
            else
            {
              v249 = *(unsigned __int8 *)(v165 + 127);
            }
            sub_20E9F4F7C((uint64_t **)v434, v249);
            v250 = *(char *)(v165 + 127);
            v251 = *(const void **)(v165 + 104);
            v252 = *(uint64_t **)v434;
            v253 = *(_QWORD *)(*(_QWORD *)v434 + 16);
            v254 = **(_QWORD **)v434;
            if (v253 - **(_QWORD **)v434 >= v249)
            {
              v257 = *(char **)(*(_QWORD *)v434 + 8);
            }
            else
            {
              if (v253)
                v255 = 2 * v253;
              else
                v255 = 0x2000;
              v256 = v254 + v249;
              while (v255 < v256)
              {
                v47 = (uint64_t)v255 <= 0;
                v255 *= 2;
                if (v47)
                {
                  v255 = v256;
                  break;
                }
              }
              v257 = (char *)malloc_type_realloc(*(void **)(*(_QWORD *)v434 + 8), v255, 0xAD6A59EEuLL);
              if (!v257)
              {
                v424 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v425 = std::bad_alloc::bad_alloc(v424);
                __cxa_throw(v425, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
              }
              v252[1] = (uint64_t)v257;
              v252[2] = v255;
              v254 = *v252;
            }
            if (v250 >= 0)
              v258 = (const void *)(v165 + 104);
            else
              v258 = v251;
            memcpy(&v257[v254], v258, v249);
            *v252 += v249;
            v165 += 136;
            if (v165 == v431)
              goto LABEL_378;
          }
          else
          {
            sub_20E9F5254((uint64_t)v434, v248 + 8, v165 + 104);
LABEL_381:
            v165 += 136;
            if (v165 == v431)
              goto LABEL_378;
          }
        }
      }
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = v161 + 16;
        sub_20E9F3164((uint64_t **)v434, 0);
      }
      else
      {
        v434[0] = 0;
        std::ostream::write();
      }
      v163 = a2;
    }
LABEL_618:
    v310 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v163 + 992) - *(_QWORD *)(v163 + 984)) >> 3);
    if (*(_BYTE *)(*(_QWORD *)v4 + 40))
    {
      *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
      sub_20E9F472C((uint64_t **)v434, v310);
    }
    else
    {
      sub_20E9F4A34();
    }
    v311 = *(_QWORD *)(a2 + 984);
    v312 = *(_QWORD *)(a2 + 992) - v311;
    if (v312)
    {
      v313 = (unint64_t *)(v311 + 16);
      v314 = 24 * (v312 / 24);
      do
      {
        v316 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v316 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v313 - 4));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v316 + 8);
        }
        v317 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v317 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v313 - 3));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v317 + 8);
        }
        v318 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v318 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v313 - 2));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v318 + 8);
        }
        v319 = *(_QWORD *)v4;
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = v319 + 16;
          sub_20E9F3D4C((uint64_t **)v434, *((_DWORD *)v313 - 1));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)v434, v319 + 8);
        }
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
          sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v313);
        }
        else
        {
          v315 = *v313;
          v434[0] = -53;
          *(_QWORD *)&v434[1] = bswap64(v315);
          std::ostream::write();
        }
        v313 += 3;
        v314 -= 24;
      }
      while (v314);
    }
    if (a3 != 2)
    {
      v320 = *(_QWORD *)v4;
      if (*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        *(_QWORD *)v434 = v320 + 16;
        sub_20E9F3D4C((uint64_t **)v434, 5u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v434, v320 + 8);
      }
      sub_20EAD0EB0(a1, a2 + 1008, 5u);
      if (a3 >= 4)
      {
        v321 = (_BYTE *)(a2 + 1361);
        if (*(_BYTE *)(*(_QWORD *)v4 + 40))
        {
          *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
          sub_20E9F4CE4((uint64_t)&v433, (uint64_t **)v434, v321);
        }
        else
        {
          v434[0] = *v321 ? -61 : -62;
          std::ostream::write();
        }
        if (a3 != 4)
        {
          v322 = *(_QWORD *)v4;
          if (*(_BYTE *)(a2 + 1728))
          {
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              *(_QWORD *)v434 = v322 + 16;
              sub_20E9F3164((uint64_t **)v434, 1);
            }
            else
            {
              v434[0] = 1;
              std::ostream::write();
            }
            v323 = *(_QWORD *)v4;
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              *(_QWORD *)v434 = v323 + 16;
              sub_20E9F3D4C((uint64_t **)v434, 2u);
            }
            else
            {
              sub_20E9F3FC0((uint64_t)v434, v323 + 8);
            }
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
              sub_20E9F3D4C((uint64_t **)v434, 1u);
            }
            else
            {
              v434[0] = 1;
              std::ostream::write();
            }
            v324 = (uint64_t)(*(_QWORD *)(a2 + 1392) - *(_QWORD *)(a2 + 1384)) >> 3;
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
              sub_20E9F472C((uint64_t **)v434, v324);
            }
            else
            {
              sub_20E9F4A34();
            }
            v325 = *(unint64_t **)(a2 + 1384);
            v326 = *(unint64_t **)(a2 + 1392);
            v327 = v326 - v325;
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            {
              *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
              if (v326 != v325)
              {
                v328 = 8 * v327;
                do
                {
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, v325++);
                  v328 -= 8;
                }
                while (v328);
              }
            }
            else if (v326 != v325)
            {
              v329 = 8 * v327;
              do
              {
                v330 = *v325;
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v330);
                std::ostream::write();
                ++v325;
                v329 -= 8;
              }
              while (v329);
            }
            if (*(_BYTE *)(a2 + 1720))
            {
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F3164((uint64_t **)v434, 1);
              }
              else
              {
                v434[0] = 1;
                std::ostream::write();
              }
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F3D4C((uint64_t **)v434, 1u);
              }
              else
              {
                v434[0] = 1;
                std::ostream::write();
              }
              v331 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 1416) - *(_QWORD *)(a2 + 1408)) >> 4);
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F472C((uint64_t **)v434, v331);
              }
              else
              {
                sub_20E9F4A34();
              }
              v332 = *(_QWORD *)(a2 + 1408);
              for (kk = *(_QWORD *)(a2 + 1416); v332 != kk; v332 += 272)
              {
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F3D4C((uint64_t **)v434, 1u);
                }
                else
                {
                  v434[0] = 1;
                  std::ostream::write();
                }
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)v332);
                }
                else
                {
                  v334 = *(_QWORD *)v332;
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v334);
                  std::ostream::write();
                }
                v335 = *(_QWORD *)v4;
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = v335 + 16;
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(v332 + 8));
                }
                else
                {
                  sub_20E9F3FC0((uint64_t)v434, v335 + 8);
                }
                v336 = *(_QWORD *)v4;
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = v336 + 16;
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(v332 + 12));
                }
                else
                {
                  sub_20E9F3FC0((uint64_t)v434, v336 + 8);
                }
                v337 = *(_QWORD *)v4;
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = v337 + 16;
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(v332 + 16));
                }
                else
                {
                  sub_20E9F3FC0((uint64_t)v434, v337 + 8);
                }
                v338 = *(_QWORD *)v4;
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = v338 + 16;
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(v332 + 20));
                }
                else
                {
                  sub_20E9F3FC0((uint64_t)v434, v338 + 8);
                }
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 24));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 32));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 40));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 48));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 56));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 64));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 72));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 80));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 88));
                }
                else
                {
                  *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(v332 + 24));
                  v434[0] = -53;
                  std::ostream::write();
                  v339 = *(_QWORD *)(v332 + 32);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v339);
                  std::ostream::write();
                  v340 = *(_QWORD *)(v332 + 40);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v340);
                  std::ostream::write();
                  v341 = *(_QWORD *)(v332 + 48);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v341);
                  std::ostream::write();
                  v342 = *(_QWORD *)(v332 + 56);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v342);
                  std::ostream::write();
                  v343 = *(_QWORD *)(v332 + 64);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v343);
                  std::ostream::write();
                  v344 = *(_QWORD *)(v332 + 72);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v344);
                  std::ostream::write();
                  v345 = *(_QWORD *)(v332 + 80);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v345);
                  std::ostream::write();
                  v346 = *(_QWORD *)(v332 + 88);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v346);
                  std::ostream::write();
                }
                v347 = *(_QWORD *)(v332 + 104) - *(_QWORD *)(v332 + 96);
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F472C((uint64_t **)v434, v347);
                }
                else
                {
                  sub_20E9F4A34();
                }
                v349 = *(char **)(v332 + 96);
                v348 = *(char **)(v332 + 104);
                v350 = v348 - v349;
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  if (v348 != v349)
                  {
                    do
                    {
                      sub_20E9F3164((uint64_t **)v434, *v349++);
                      --v350;
                    }
                    while (v350);
                  }
                }
                else if (v348 != v349)
                {
                  do
                  {
                    v351 = *v349;
                    if (v351 < 0)
                    {
                      v434[0] = -52;
                      v434[1] = v351;
                    }
                    else
                    {
                      v434[0] = *v349;
                    }
                    std::ostream::write();
                    ++v349;
                    --v350;
                  }
                  while (v350);
                }
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 120));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 128));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 136));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 144));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 152));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 160));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 168));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 176));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 184));
                }
                else
                {
                  *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(v332 + 120));
                  v434[0] = -53;
                  std::ostream::write();
                  v352 = *(_QWORD *)(v332 + 128);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v352);
                  std::ostream::write();
                  v353 = *(_QWORD *)(v332 + 136);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v353);
                  std::ostream::write();
                  v354 = *(_QWORD *)(v332 + 144);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v354);
                  std::ostream::write();
                  v355 = *(_QWORD *)(v332 + 152);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v355);
                  std::ostream::write();
                  v356 = *(_QWORD *)(v332 + 160);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v356);
                  std::ostream::write();
                  v357 = *(_QWORD *)(v332 + 168);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v357);
                  std::ostream::write();
                  v358 = *(_QWORD *)(v332 + 176);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v358);
                  std::ostream::write();
                  v359 = *(_QWORD *)(v332 + 184);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v359);
                  std::ostream::write();
                }
                if (*(_BYTE *)(v332 + 264))
                {
                  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                  {
                    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                    sub_20E9F3164((uint64_t **)v434, 1);
                  }
                  else
                  {
                    v434[0] = 1;
                    std::ostream::write();
                  }
                  if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                  {
                    *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 192));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 200));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 208));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 216));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 224));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 232));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 240));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 248));
                    sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(v332 + 256));
                  }
                  else
                  {
                    *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(v332 + 192));
                    v434[0] = -53;
                    std::ostream::write();
                    v360 = *(_QWORD *)(v332 + 200);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v360);
                    std::ostream::write();
                    v361 = *(_QWORD *)(v332 + 208);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v361);
                    std::ostream::write();
                    v362 = *(_QWORD *)(v332 + 216);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v362);
                    std::ostream::write();
                    v363 = *(_QWORD *)(v332 + 224);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v363);
                    std::ostream::write();
                    v364 = *(_QWORD *)(v332 + 232);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v364);
                    std::ostream::write();
                    v365 = *(_QWORD *)(v332 + 240);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v365);
                    std::ostream::write();
                    v366 = *(_QWORD *)(v332 + 248);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v366);
                    std::ostream::write();
                    v367 = *(_QWORD *)(v332 + 256);
                    v434[0] = -53;
                    *(_QWORD *)&v434[1] = bswap64(v367);
                    std::ostream::write();
                  }
                }
                else if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F3164((uint64_t **)v434, 0);
                }
                else
                {
                  v434[0] = 0;
                  std::ostream::write();
                }
              }
              v368 = *(_QWORD *)v4;
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = v368 + 16;
                sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 1432));
              }
              else
              {
                sub_20E9F3FC0((uint64_t)v434, v368 + 8);
              }
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1440));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1448));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1456));
              }
              else
              {
                *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(a2 + 1440));
                v434[0] = -53;
                std::ostream::write();
                v369 = *(_QWORD *)(a2 + 1448);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v369);
                std::ostream::write();
                v370 = *(_QWORD *)(a2 + 1456);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v370);
                std::ostream::write();
              }
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1464));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1472));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1480));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1488));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1496));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1504));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1512));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1520));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1528));
              }
              else
              {
                *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(a2 + 1464));
                v434[0] = -53;
                std::ostream::write();
                v371 = *(_QWORD *)(a2 + 1472);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v371);
                std::ostream::write();
                v372 = *(_QWORD *)(a2 + 1480);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v372);
                std::ostream::write();
                v373 = *(_QWORD *)(a2 + 1488);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v373);
                std::ostream::write();
                v374 = *(_QWORD *)(a2 + 1496);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v374);
                std::ostream::write();
                v375 = *(_QWORD *)(a2 + 1504);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v375);
                std::ostream::write();
                v376 = *(_QWORD *)(a2 + 1512);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v376);
                std::ostream::write();
                v377 = *(_QWORD *)(a2 + 1520);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v377);
                std::ostream::write();
                v378 = *(_QWORD *)(a2 + 1528);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v378);
                std::ostream::write();
              }
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1536));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1544));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1552));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1560));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1568));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1576));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1584));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1592));
                sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1600));
              }
              else
              {
                *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(a2 + 1536));
                v434[0] = -53;
                std::ostream::write();
                v379 = *(_QWORD *)(a2 + 1544);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v379);
                std::ostream::write();
                v380 = *(_QWORD *)(a2 + 1552);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v380);
                std::ostream::write();
                v381 = *(_QWORD *)(a2 + 1560);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v381);
                std::ostream::write();
                v382 = *(_QWORD *)(a2 + 1568);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v382);
                std::ostream::write();
                v383 = *(_QWORD *)(a2 + 1576);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v383);
                std::ostream::write();
                v384 = *(_QWORD *)(a2 + 1584);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v384);
                std::ostream::write();
                v385 = *(_QWORD *)(a2 + 1592);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v385);
                std::ostream::write();
                v386 = *(_QWORD *)(a2 + 1600);
                v434[0] = -53;
                *(_QWORD *)&v434[1] = bswap64(v386);
                std::ostream::write();
              }
              if (*(_BYTE *)(a2 + 1680))
              {
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F3164((uint64_t **)v434, 1);
                }
                else
                {
                  v434[0] = 1;
                  std::ostream::write();
                }
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1608));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1616));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1624));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1632));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1640));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1648));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1656));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1664));
                  sub_20E9F4C08((uint64_t)&v433, (uint64_t **)v434, (unint64_t *)(a2 + 1672));
                }
                else
                {
                  *(_QWORD *)&v434[1] = bswap64(*(_QWORD *)(a2 + 1608));
                  v434[0] = -53;
                  std::ostream::write();
                  v387 = *(_QWORD *)(a2 + 1616);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v387);
                  std::ostream::write();
                  v388 = *(_QWORD *)(a2 + 1624);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v388);
                  std::ostream::write();
                  v389 = *(_QWORD *)(a2 + 1632);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v389);
                  std::ostream::write();
                  v390 = *(_QWORD *)(a2 + 1640);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v390);
                  std::ostream::write();
                  v391 = *(_QWORD *)(a2 + 1648);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v391);
                  std::ostream::write();
                  v392 = *(_QWORD *)(a2 + 1656);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v392);
                  std::ostream::write();
                  v393 = *(_QWORD *)(a2 + 1664);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v393);
                  std::ostream::write();
                  v394 = *(_QWORD *)(a2 + 1672);
                  v434[0] = -53;
                  *(_QWORD *)&v434[1] = bswap64(v394);
                  std::ostream::write();
                }
              }
              else if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F3164((uint64_t **)v434, 0);
              }
              else
              {
                v434[0] = 0;
                std::ostream::write();
              }
              if (*(_BYTE *)(a2 + 1708))
              {
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                  sub_20E9F3164((uint64_t **)v434, 1);
                }
                else
                {
                  v434[0] = 1;
                  std::ostream::write();
                }
                v395 = *(_QWORD *)v4;
                if (*(_BYTE *)(*(_QWORD *)v4 + 40))
                {
                  *(_QWORD *)v434 = v395 + 16;
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 1688));
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 1692));
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 1696));
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 1700));
                  sub_20E9F3D4C((uint64_t **)v434, *(_DWORD *)(a2 + 1704));
                }
                else
                {
                  v396 = v395 + 8;
                  sub_20E9F3FC0((uint64_t)v434, v395 + 8);
                  sub_20E9F3FC0((uint64_t)v434, v396);
                  sub_20E9F3FC0((uint64_t)v434, v396);
                  sub_20E9F3FC0((uint64_t)v434, v396);
                  sub_20E9F3FC0((uint64_t)v434, v396);
                }
              }
              else if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F3164((uint64_t **)v434, 0);
              }
              else
              {
                v434[0] = 0;
                std::ostream::write();
              }
              if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              {
                *(_QWORD *)v434 = *(_QWORD *)v4 + 16;
                sub_20E9F3164((uint64_t **)v434, *(_BYTE *)(a2 + 1712));
              }
              else
              {
                v397 = *(char *)(a2 + 1712);
                if (v397 < 0)
                {
                  v434[0] = -52;
                  v434[1] = v397;
                }
                else
                {
                  v434[0] = *(_BYTE *)(a2 + 1712);
                }
                std::ostream::write();
              }
              goto LABEL_775;
            }
            v322 = *(_QWORD *)v4;
            if (*(_BYTE *)(*(_QWORD *)v4 + 40))
              goto LABEL_655;
          }
          else if (*(_BYTE *)(*(_QWORD *)v4 + 40))
          {
LABEL_655:
            *(_QWORD *)v434 = v322 + 16;
            sub_20E9F3164((uint64_t **)v434, 0);
            goto LABEL_775;
          }
          v434[0] = 0;
          std::ostream::write();
LABEL_775:
          if (a3 >= 6)
          {
            if (*(_BYTE *)(a2 + 1872))
            {
              v434[0] = 1;
              sub_20E9ED13C(a1, v434);
              *(_DWORD *)v434 = 1;
              sub_20E9ED2CC(a1, (unsigned int *)v434);
              sub_20E9EE95C(*(_QWORD *)(a1 + 24));
              sub_20EAD3180(a1, (unint64_t *)(a2 + 1736));
              sub_20E9EEBC4(a1);
            }
            else
            {
              v434[0] = 0;
              sub_20E9ED13C(a1, v434);
            }
            if (a3 >= 7)
            {
              sub_20EADBF08(a1, (uint64_t *)(a2 + 1880));
              if (a3 != 7)
              {
                *(_DWORD *)v434 = 6;
                sub_20E9ED2CC(a1, (unsigned int *)v434);
                sub_20EADC0E0(a1, (char *)(a2 + 1904), *(unsigned int *)v434);
                if (a3 >= 9)
                {
                  sub_20EADC3E0(a1, a2 + 1928);
                  if (a3 != 9)
                  {
                    sub_20E9ED370(a1, (_BYTE *)(a2 + 1976));
                    if (a3 >= 0xB)
                    {
                      sub_20E9ED370(a1, (_BYTE *)(a2 + 1372));
                      if (a3 != 11)
                      {
                        sub_20E9ED280(a1, (unsigned int *)(a2 + 1368));
                        if (a3 >= 0xD)
                        {
                          sub_20E9ED324(a1, (unint64_t *)(a2 + 1984));
                          if (a3 != 13)
                          {
                            *(_QWORD *)v434 = (uint64_t)(*(_QWORD *)(a2 + 2000) - *(_QWORD *)(a2 + 1992)) >> 5;
                            sub_20E9ED324(a1, (unint64_t *)v434);
                            sub_20EADC6A0(a1, (uint64_t)(*(_QWORD *)(a2 + 2000) - *(_QWORD *)(a2 + 1992)) >> 5, *(_QWORD *)(a2 + 1992));
                            if (a3 >= 0xF)
                            {
                              v434[0] = *(_BYTE *)(a2 + 1977);
                              sub_20E9ED13C(a1, v434);
                              if (a3 != 15)
                              {
                                *(_DWORD *)v434 = 1;
                                sub_20E9ED2CC(a1, (unsigned int *)v434);
                                sub_20EADC918(a1, a2 + 2016);
                                if (a3 >= 0x11)
                                  sub_20E9ED370(a1, (_BYTE *)(a2 + 1978));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_20EACF35C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20EACF374(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void **v14;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x1745D1745D1745ELL)
      sub_20EABADD4();
    result = operator new(176 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[176 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          sub_20E860C04(v10, *(void **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          *((_QWORD *)v10 + 2) = *(_QWORD *)(v11 + 16);
        }
        v12 = a2 + v9;
        v13 = &v8[v9];
        *(_OWORD *)(v13 + 88) = *(_OWORD *)(a2 + v9 + 88);
        *(_OWORD *)(v13 + 104) = *(_OWORD *)(a2 + v9 + 104);
        *(_OWORD *)(v13 + 120) = *(_OWORD *)(a2 + v9 + 120);
        v13[136] = *(_BYTE *)(a2 + v9 + 136);
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(a2 + v9 + 24);
        *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + v9 + 40);
        *(_OWORD *)(v13 + 56) = *(_OWORD *)(a2 + v9 + 56);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(a2 + v9 + 72);
        v8[v9 + 144] = 0;
        result = &v8[v9 + 144];
        v13[168] = 0;
        if (*(_BYTE *)(a2 + v9 + 168))
        {
          v14 = (void **)(v12 + 144);
          if (*(char *)(v12 + 167) < 0)
          {
            result = sub_20E860C04(result, *v14, *(_QWORD *)(a2 + v9 + 152));
          }
          else
          {
            *(_OWORD *)result = *(_OWORD *)v14;
            *(_QWORD *)&v8[v9 + 160] = *(_QWORD *)(v12 + 160);
          }
          v13[168] = 1;
        }
        v9 += 176;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EACF4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EACF59C(&a9);
  _Unwind_Resume(a1);
}

void sub_20EACF508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v13 = v10 + v11;
  if (*(_BYTE *)(v10 + v11 + 168) && *(char *)(v13 + 167) < 0)
    operator delete(*(void **)(v13 + 144));
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  for (; v11; v11 -= 176)
  {
    while (1)
    {
      v14 = v10 + v11;
      if (*(_BYTE *)(v10 + v11 - 8))
      {
        if (*(char *)(v14 - 9) < 0)
          operator delete(*(void **)(v14 - 32));
      }
      if (*(char *)(v14 - 153) < 0)
        break;
      v11 -= 176;
      if (!v11)
        goto LABEL_14;
    }
    operator delete(*(void **)(v14 - 176));
  }
LABEL_14:
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EACF59C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EACF59C(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          while (1)
          {
            if (*((_BYTE *)v4 - 8))
            {
              if (*((char *)v4 - 9) < 0)
                operator delete(*(v4 - 4));
            }
            if (*((char *)v4 - 153) < 0)
              break;
            v4 -= 22;
            if (v4 == v3)
              goto LABEL_12;
          }
          operator delete(*(v4 - 22));
          v4 -= 22;
        }
        while (v4 != v3);
LABEL_12:
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void ***sub_20EACF654(void ***a1)
{
  void **v3;
  void **v4;

  if (*((_BYTE *)a1 + 8))
    return a1;
  v3 = *a1;
  v4 = (void **)**a1;
  if (!v4)
    return a1;
  sub_20EAB9D1C((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

uint64_t sub_20EACF6A8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 - 8) && *(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 136;
    }
  }
  return a1;
}

void sub_20EACF710(void **a1, void **a2)
{
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v5 = *(v2 - 5);
      if (v5)
      {
        *(v2 - 4) = v5;
        operator delete(v5);
      }
      v6 = *(v2 - 24);
      if (v6)
      {
        *(v2 - 23) = v6;
        operator delete(v6);
      }
      v7 = v2 - 27;
      v8 = (void **)*(v2 - 27);
      if (v8)
      {
        v9 = (void **)*(v2 - 26);
        v4 = *(v2 - 27);
        if (v9 != v8)
        {
          do
          {
            if (*((_BYTE *)v9 - 8))
            {
              if (*((char *)v9 - 9) < 0)
                operator delete(*(v9 - 4));
            }
            v9 -= 17;
          }
          while (v9 != v8);
          v4 = *v7;
        }
        *(v2 - 26) = v8;
        operator delete(v4);
      }
      v2 -= 27;
    }
    while (v7 != a1);
  }
}

_QWORD *sub_20EACF7CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * (v6 >> 4);
    if (v7 >= 0xF0F0F0F0F0F0F1)
      sub_20EABADD4();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[272 * v7];
    a1[1] = sub_20EACF8D4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20EACF874(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 22);
        if (v7)
        {
          *((_QWORD *)v5 - 21) = v7;
          operator delete(v7);
        }
        v5 -= 272;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EACF8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  char *v22;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v15 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a4 = *(_OWORD *)v6;
      *(_OWORD *)(a4 + 16) = v15;
      v16 = *(_OWORD *)(v6 + 32);
      v17 = *(_OWORD *)(v6 + 48);
      v18 = *(_OWORD *)(v6 + 80);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(a4 + 80) = v18;
      *(_OWORD *)(a4 + 32) = v16;
      *(_OWORD *)(a4 + 48) = v17;
      *(_QWORD *)(a4 + 104) = 0;
      *(_QWORD *)(a4 + 112) = 0;
      *(_QWORD *)(a4 + 96) = 0;
      v20 = *(_BYTE **)(v6 + 96);
      v19 = *(_BYTE **)(v6 + 104);
      v21 = v19 - v20;
      if (v19 != v20)
      {
        if ((v21 & 0x8000000000000000) != 0)
          sub_20E867F44();
        v22 = (char *)operator new(v19 - v20);
        *(_QWORD *)(a4 + 96) = v22;
        *(_QWORD *)(a4 + 104) = v22;
        v7 = &v22[v21];
        *(_QWORD *)(a4 + 112) = &v22[v21];
        memcpy(v22, v20, v21);
        *(_QWORD *)(a4 + 104) = v7;
      }
      v8 = *(_OWORD *)(v6 + 120);
      *(_OWORD *)(a4 + 136) = *(_OWORD *)(v6 + 136);
      *(_OWORD *)(a4 + 120) = v8;
      v9 = *(_OWORD *)(v6 + 152);
      v10 = *(_OWORD *)(v6 + 168);
      v11 = *(_OWORD *)(v6 + 184);
      *(_OWORD *)(a4 + 200) = *(_OWORD *)(v6 + 200);
      *(_OWORD *)(a4 + 184) = v11;
      *(_OWORD *)(a4 + 168) = v10;
      *(_OWORD *)(a4 + 152) = v9;
      v12 = *(_OWORD *)(v6 + 216);
      v13 = *(_OWORD *)(v6 + 232);
      v14 = *(_OWORD *)(v6 + 248);
      *(_BYTE *)(a4 + 264) = *(_BYTE *)(v6 + 264);
      *(_OWORD *)(a4 + 248) = v14;
      *(_OWORD *)(a4 + 232) = v13;
      *(_OWORD *)(a4 + 216) = v12;
      a4 += 272;
      v6 += 272;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EACFA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 96);
  if (v11)
  {
    *(_QWORD *)(v9 + 104) = v11;
    operator delete(v11);
  }
  sub_20EACFA28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EACFA28(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 176);
      if (v5)
      {
        *(_QWORD *)(v3 - 168) = v5;
        operator delete(v5);
      }
      v3 -= 272;
    }
  }
  return a1;
}

void ***sub_20EACFA88(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = v4 - 22;
          sub_20E991548(v4 - 21);
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void ***sub_20EACFB10(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **v1;
      if (v4 != v3)
      {
        do
          v4 = sub_20E991750(v4 - 14);
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EACFB94(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  int64_t v38;
  char *v39;
  char *v40;

  v2 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 4);
    if (v7 >= 0x24924924924924ALL)
      sub_20EABADD4();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[112 * v7];
    do
    {
      v11 = v4 + v9;
      v12 = &v8[v9];
      v13 = *(_OWORD *)(v4 + v9);
      *((_QWORD *)v12 + 2) = *(_QWORD *)(v4 + v9 + 16);
      *(_OWORD *)v12 = v13;
      v14 = *(_OWORD *)(v4 + v9 + 24);
      v15 = *(_OWORD *)(v4 + v9 + 40);
      *((_QWORD *)v12 + 7) = *(_QWORD *)(v4 + v9 + 56);
      *(_OWORD *)(v12 + 40) = v15;
      *(_QWORD *)&v8[v9 + 64] = 0;
      *(_OWORD *)(v12 + 24) = v14;
      *((_QWORD *)v12 + 9) = 0;
      *((_QWORD *)v12 + 10) = 0;
      v17 = *(_BYTE **)(v4 + v9 + 64);
      v16 = *(_BYTE **)(v4 + v9 + 72);
      v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0)
          sub_20E867F44();
        v19 = (char *)operator new(v16 - v17);
        *(_QWORD *)&v8[v9 + 64] = v19;
        v20 = &v19[4 * (v18 >> 2)];
        *((_QWORD *)v12 + 9) = v19;
        *((_QWORD *)v12 + 10) = v20;
        memcpy(v19, v17, v18);
        *((_QWORD *)v12 + 9) = v20;
      }
      *((_QWORD *)v12 + 11) = 0;
      *((_QWORD *)v12 + 12) = 0;
      *((_QWORD *)v12 + 13) = 0;
      v22 = *(_BYTE **)(v11 + 88);
      v21 = *(_BYTE **)(v11 + 96);
      v23 = v21 - v22;
      if (v21 != v22)
      {
        if (v23 < 0)
          sub_20E867F44();
        v24 = (char *)operator new(v21 - v22);
        *((_QWORD *)v12 + 11) = v24;
        v10 = &v24[4 * (v23 >> 2)];
        *((_QWORD *)v12 + 12) = v24;
        *((_QWORD *)v12 + 13) = v10;
        memcpy(v24, v22, v23);
        *((_QWORD *)v12 + 12) = v10;
      }
      v9 += 112;
    }
    while (v11 + 112 != v5);
    *(_QWORD *)(a1 + 8) = &v8[v9];
    v2 = a2;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v26 = (_BYTE *)v2[3];
  v25 = (_BYTE *)v2[4];
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0)
      sub_20E867F44();
    v28 = (char *)operator new(v25 - v26);
    *(_QWORD *)(a1 + 24) = v28;
    *(_QWORD *)(a1 + 32) = v28;
    v29 = &v28[8 * (v27 >> 3)];
    *(_QWORD *)(a1 + 40) = v29;
    memcpy(v28, v26, v27);
    *(_QWORD *)(a1 + 32) = v29;
  }
  v30 = v2[6];
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v30;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v32 = (_BYTE *)v2[7];
  v31 = (_BYTE *)v2[8];
  v33 = v31 - v32;
  if (v31 != v32)
  {
    if (v33 < 0)
      sub_20E867F44();
    v34 = (char *)operator new(v31 - v32);
    *(_QWORD *)(a1 + 56) = v34;
    *(_QWORD *)(a1 + 64) = v34;
    v35 = &v34[4 * (v33 >> 2)];
    *(_QWORD *)(a1 + 72) = v35;
    memcpy(v34, v32, v33);
    *(_QWORD *)(a1 + 64) = v35;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v37 = (_BYTE *)v2[10];
  v36 = (_BYTE *)v2[11];
  v38 = v36 - v37;
  if (v36 != v37)
  {
    if (v38 < 0)
      sub_20E867F44();
    v39 = (char *)operator new(v36 - v37);
    *(_QWORD *)(a1 + 80) = v39;
    *(_QWORD *)(a1 + 88) = v39;
    v40 = &v39[4 * (v38 >> 2)];
    *(_QWORD *)(a1 + 96) = v40;
    memcpy(v39, v37, v38);
    *(_QWORD *)(a1 + 88) = v40;
  }
  *(_WORD *)(a1 + 104) = *((_WORD *)v2 + 52);
  return a1;
}

void sub_20EACFE54(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 88) = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 64) = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
  {
LABEL_4:
    sub_20EAB9C54((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(_QWORD *)(v1 + 32) = v8;
  operator delete(v8);
  sub_20EAB9C54((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20EACFED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20EACFF80((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20EACFEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a3);
  v10 = v4 + v5;
  v11 = *(void **)(v4 + v5 + 88);
  if (v11)
  {
    *(_QWORD *)(v10 + 96) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v10 + 64);
  if (v12)
  {
    *(_QWORD *)(v4 + v5 + 72) = v12;
    operator delete(v12);
  }
  for (; v5; v5 -= 112)
  {
    v6 = v4 + v5;
    v7 = *(void **)(v4 + v5 - 24);
    if (v7)
    {
      *(_QWORD *)(v6 - 16) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v6 - 48);
    if (v8)
    {
      *(_QWORD *)(v4 + v5 - 40) = v8;
      operator delete(v8);
    }
  }
  *(_QWORD *)(v3 + 8) = v4;
  sub_20EACFF80((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_20EACFF80(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 6);
          if (v7)
          {
            *((_QWORD *)v4 - 5) = v7;
            operator delete(v7);
          }
          v4 -= 112;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void ***sub_20EAD0024(void ***a1)
{
  uint64_t *v3;
  uint64_t v4;

  if (*((_BYTE *)a1 + 8))
    return a1;
  v3 = (uint64_t *)*a1;
  v4 = (uint64_t)**a1;
  if (!v4)
    return a1;
  sub_20E991630((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void ***sub_20EAD0078(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = v4 - 17;
          sub_20E991750(v4 - 14);
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20EAD0100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  if (a2 != a4)
  {
    v5 = a2;
    do
    {
      v7 = *(void **)(v5 - 24);
      if (v7)
      {
        *(_QWORD *)(v5 - 16) = v7;
        operator delete(v7);
      }
      v8 = *(_QWORD *)(v5 - 48);
      if (v8)
      {
        v9 = *(_QWORD *)(v5 - 40);
        v6 = *(void **)(v5 - 48);
        if (v9 != v8)
        {
          do
          {
            v11 = *(void **)(v9 - 32);
            if (v11)
            {
              *(_QWORD *)(v9 - 24) = v11;
              operator delete(v11);
            }
            v12 = *(void **)(v9 - 56);
            if (v12)
            {
              *(_QWORD *)(v9 - 48) = v12;
              operator delete(v12);
            }
            v13 = *(void **)(v9 - 88);
            if (v13)
            {
              *(_QWORD *)(v9 - 80) = v13;
              operator delete(v13);
            }
            v14 = *(_QWORD *)(v9 - 112);
            if (v14)
            {
              v15 = *(_QWORD *)(v9 - 104);
              v10 = *(void **)(v9 - 112);
              if (v15 != v14)
              {
                do
                {
                  v16 = *(void **)(v15 - 24);
                  if (v16)
                  {
                    *(_QWORD *)(v15 - 16) = v16;
                    operator delete(v16);
                  }
                  v17 = *(void **)(v15 - 48);
                  if (v17)
                  {
                    *(_QWORD *)(v15 - 40) = v17;
                    operator delete(v17);
                  }
                  v15 -= 112;
                }
                while (v15 != v14);
                v10 = *(void **)(v9 - 112);
              }
              *(_QWORD *)(v9 - 104) = v14;
              operator delete(v10);
            }
            v9 -= 136;
          }
          while (v9 != v8);
          v6 = *(void **)(v5 - 48);
        }
        *(_QWORD *)(v5 - 40) = v8;
        operator delete(v6);
      }
      v5 -= 56;
    }
    while (v5 != a4);
  }
}

_BYTE *sub_20EAD0214(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v32;
  _BYTE v33[9];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/RelocalizationResultSample.hpp", 75, (uint64_t)"version > 3u", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v33 = v5 + 16;
    sub_20E9F472C((uint64_t **)v33, *(_QWORD *)a2);
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
LABEL_5:
      *(_QWORD *)v33 = v6 + 16;
      sub_20E9F3D4C((uint64_t **)v33, *(_DWORD *)(a2 + 8));
      goto LABEL_8;
    }
  }
  else
  {
    sub_20E9F4A34();
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_5;
  }
  sub_20E9F3FC0((uint64_t)v33, v6 + 8);
LABEL_8:
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    *(_QWORD *)v33 = v7 + 16;
    sub_20E9F3D4C((uint64_t **)v33, *(_DWORD *)(a2 + 16));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v33, v7 + 8);
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_QWORD *)v33 = v8 + 16;
    sub_20E9F472C((uint64_t **)v33, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
    {
LABEL_13:
      *(_QWORD *)v33 = v9 + 16;
      sub_20E9F3D4C((uint64_t **)v33, *(_DWORD *)(a2 + 32));
      goto LABEL_16;
    }
  }
  else
  {
    sub_20E9F4A34();
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_13;
  }
  sub_20E9F3FC0((uint64_t)v33, v9 + 8);
LABEL_16:
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v10 + 40))
  {
    *(_QWORD *)v33 = v10 + 16;
    sub_20E9F3D4C((uint64_t **)v33, *(_DWORD *)(a2 + 40));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v33, v10 + 8);
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    *(_QWORD *)v33 = v11 + 16;
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 48));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 56));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 64));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 72));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 80));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 88));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 96));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 104));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 112));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 120));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 128));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 136));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 144));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 152));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 160));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 168));
  }
  else
  {
    *(_QWORD *)&v33[1] = bswap64(*(_QWORD *)(a2 + 48));
    v33[0] = -53;
    std::ostream::write();
    v12 = *(_QWORD *)(a2 + 56);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v12);
    std::ostream::write();
    v13 = *(_QWORD *)(a2 + 64);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v13);
    std::ostream::write();
    v14 = *(_QWORD *)(a2 + 72);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v14);
    std::ostream::write();
    v15 = *(_QWORD *)(a2 + 80);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v15);
    std::ostream::write();
    v16 = *(_QWORD *)(a2 + 88);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v16);
    std::ostream::write();
    v17 = *(_QWORD *)(a2 + 96);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v17);
    std::ostream::write();
    v18 = *(_QWORD *)(a2 + 104);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v18);
    std::ostream::write();
    v19 = *(_QWORD *)(a2 + 112);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v19);
    std::ostream::write();
    v20 = *(_QWORD *)(a2 + 120);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v20);
    std::ostream::write();
    v21 = *(_QWORD *)(a2 + 128);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v21);
    std::ostream::write();
    v22 = *(_QWORD *)(a2 + 136);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v22);
    std::ostream::write();
    v23 = *(_QWORD *)(a2 + 144);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v23);
    std::ostream::write();
    v24 = *(_QWORD *)(a2 + 152);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v24);
    std::ostream::write();
    v25 = *(_QWORD *)(a2 + 160);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v25);
    std::ostream::write();
    v26 = *(_QWORD *)(a2 + 168);
    v33[0] = -53;
    *(_QWORD *)&v33[1] = bswap64(v26);
    std::ostream::write();
  }
  v27 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v27 + 40))
  {
    *(_QWORD *)v33 = v27 + 16;
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 176));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 184));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 192));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 200));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 208));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 216));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 224));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 232));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 240));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 248));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 256));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 264));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 272));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 280));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 288));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 296));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 304));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 312));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 320));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 328));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 336));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 344));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 352));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 360));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 368));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 376));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 384));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 392));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 400));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 408));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 416));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 424));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 432));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 440));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 448));
    sub_20E9F4C08((uint64_t)&v32, (uint64_t **)v33, (unint64_t *)(a2 + 456));
  }
  else
  {
    for (i = 176; i != 464; i += 8)
    {
      v29 = *(_QWORD *)(a2 + i);
      v33[0] = -53;
      *(_QWORD *)&v33[1] = bswap64(v29);
      std::ostream::write();
    }
  }
  v30 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v30 + 40))
    return (_BYTE *)sub_20E9F3FC0((uint64_t)v33, v30 + 8);
  *(_QWORD *)v33 = v30 + 16;
  return sub_20E9F3D4C((uint64_t **)v33, *(_DWORD *)(a2 + 464));
}

char *sub_20EAD09DC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *result;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  uint64_t v28;
  char v29;
  _BYTE v30[9];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v30 = v6 + 16;
    sub_20E9F4E1C((uint64_t)&v29, (uint64_t **)v30, (const void **)a2);
  }
  else
  {
    sub_20E9F5254((uint64_t)v30, v6 + 8, a2);
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    *(_QWORD *)v30 = v7 + 16;
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 24));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 32));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 40));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 48));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 56));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 64));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 72));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 80));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 88));
  }
  else
  {
    *(_QWORD *)&v30[1] = bswap64(*(_QWORD *)(a2 + 24));
    v30[0] = -53;
    std::ostream::write();
    v8 = *(_QWORD *)(a2 + 32);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v8);
    std::ostream::write();
    v9 = *(_QWORD *)(a2 + 40);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v9);
    std::ostream::write();
    v10 = *(_QWORD *)(a2 + 48);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v10);
    std::ostream::write();
    v11 = *(_QWORD *)(a2 + 56);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v11);
    std::ostream::write();
    v12 = *(_QWORD *)(a2 + 64);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v12);
    std::ostream::write();
    v13 = *(_QWORD *)(a2 + 72);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v13);
    std::ostream::write();
    v14 = *(_QWORD *)(a2 + 80);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v14);
    std::ostream::write();
    v15 = *(_QWORD *)(a2 + 88);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v15);
    std::ostream::write();
  }
  v16 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v16 + 40))
  {
    *(_QWORD *)v30 = v16 + 16;
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 96));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 104));
    sub_20E9F4C08((uint64_t)&v29, (uint64_t **)v30, (unint64_t *)(a2 + 112));
  }
  else
  {
    *(_QWORD *)&v30[1] = bswap64(*(_QWORD *)(a2 + 96));
    v30[0] = -53;
    std::ostream::write();
    v17 = *(_QWORD *)(a2 + 104);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v17);
    std::ostream::write();
    v18 = *(_QWORD *)(a2 + 112);
    v30[0] = -53;
    *(_QWORD *)&v30[1] = bswap64(v18);
    std::ostream::write();
  }
  if (*(_BYTE *)(a2 + 136))
  {
    v19 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v19 + 40))
    {
      *(_QWORD *)v30 = v19 + 16;
      sub_20E9F3164((uint64_t **)v30, 1);
    }
    else
    {
      v30[0] = 1;
      std::ostream::write();
    }
    v22 = (16 * *(_DWORD *)(a2 + 128)) | 2;
    v23 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v23 + 40))
    {
      *(_QWORD *)v30 = v23 + 16;
      sub_20E9F3D4C((uint64_t **)v30, v22);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v30, v23 + 8);
    }
    v24 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v24 + 40))
    {
      *(_QWORD *)v30 = v24 + 16;
      result = sub_20E9F472C((uint64_t **)v30, *(_QWORD *)(a2 + 120));
    }
    else
    {
      result = (char *)sub_20E9F4A34();
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
    {
      *(_QWORD *)v30 = v20 + 16;
      result = sub_20E9F3164((uint64_t **)v30, 0);
    }
    else
    {
      v30[0] = 0;
      result = (char *)std::ostream::write();
    }
  }
  if (a3 >= 2)
  {
    if (*(_BYTE *)(a2 + 168))
    {
      v25 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)v30 = v25 + 16;
        sub_20E9F3164((uint64_t **)v30, 1);
      }
      else
      {
        v30[0] = 1;
        std::ostream::write();
      }
      v27 = (const void **)(a2 + 144);
      v28 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v28 + 40))
      {
        *(_QWORD *)v30 = v28 + 16;
        return (char *)sub_20E9F4E1C((uint64_t)&v29, (uint64_t **)v30, v27);
      }
      else
      {
        return (char *)sub_20E9F5254((uint64_t)v30, v28 + 8, (uint64_t)v27);
      }
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v26 + 40))
      {
        *(_QWORD *)v30 = v26 + 16;
        return sub_20E9F3164((uint64_t **)v30, 0);
      }
      else
      {
        v30[0] = 0;
        return (char *)std::ostream::write();
      }
    }
  }
  return result;
}

uint64_t **sub_20EAD0EB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t **result;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  BOOL v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  size_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  size_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  size_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  size_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  size_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  size_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  size_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  size_t v128;
  size_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  size_t v138;
  size_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  size_t v153;
  size_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  size_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  size_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  size_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  size_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  size_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  size_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  size_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  size_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  size_t v222;
  size_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _BYTE *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  std::bad_alloc *v268;
  std::bad_alloc *v269;
  std::bad_alloc *v270;
  std::bad_alloc *v271;
  std::bad_alloc *v272;
  std::bad_alloc *v273;
  std::bad_alloc *exception;
  std::bad_alloc *v275;
  std::bad_alloc *v276;
  std::bad_alloc *v277;
  std::bad_alloc *v278;
  std::bad_alloc *v279;
  std::bad_alloc *v280;
  std::bad_alloc *v281;
  std::bad_alloc *v282;
  std::bad_alloc *v283;
  std::bad_alloc *v284;
  std::bad_alloc *v285;
  std::bad_alloc *v286;
  std::bad_alloc *v287;
  std::bad_alloc *v288;
  std::bad_alloc *v289;
  std::bad_alloc *v290;
  std::bad_alloc *v291;
  std::bad_alloc *v292;
  std::bad_alloc *v293;
  std::bad_alloc *v294;
  std::bad_alloc *v295;
  std::bad_alloc *v296;
  std::bad_alloc *v297;
  std::bad_alloc *v298;
  std::bad_alloc *v299;
  std::bad_alloc *v300;
  std::bad_alloc *v301;
  std::bad_alloc *v302;
  std::bad_alloc *v303;
  std::bad_alloc *v304;
  std::bad_alloc *v305;
  std::bad_alloc *v306;
  std::bad_alloc *v307;
  std::bad_alloc *v308;
  std::bad_alloc *v309;
  std::bad_alloc *v310;
  std::bad_alloc *v311;
  std::bad_alloc *v312;
  std::bad_alloc *v313;
  std::bad_alloc *v314;
  std::bad_alloc *v315;
  std::bad_alloc *v316;
  std::bad_alloc *v317;
  uint64_t *v320;
  char v321;
  _BYTE v322[9];
  uint64_t v323;

  v323 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v322 = v4 + 16;
    sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)a2);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v322[0] = -53;
    *(_QWORD *)&v322[1] = bswap64(v5);
    std::ostream::write();
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v322 = v6 + 16;
    result = (uint64_t **)sub_20E9F3164((uint64_t **)v322, *(_BYTE *)(a2 + 8));
  }
  else
  {
    v8 = *(char *)(a2 + 8);
    if (v8 < 0)
    {
      v322[0] = -52;
      v322[1] = v8;
    }
    else
    {
      v322[0] = *(_BYTE *)(a2 + 8);
    }
    result = (uint64_t **)std::ostream::write();
  }
  if (a3 >= 2)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
    {
      *(_QWORD *)v322 = v9 + 16;
      sub_20E9F3D4C((uint64_t **)v322, 1u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v322, v9 + 8);
    }
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
    {
      *(_QWORD *)v322 = v11 + 16;
      result = (uint64_t **)sub_20E9F472C((uint64_t **)v322, v10);
    }
    else
    {
      result = (uint64_t **)sub_20E9F4A34();
    }
    v12 = *(uint64_t **)(a2 + 16);
    v320 = *(uint64_t **)(a2 + 24);
    if (v320 != v12)
    {
      while (1)
      {
        v13 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v13 + 40))
        {
          *(_QWORD *)v322 = v13 + 16;
          sub_20E9F3D4C((uint64_t **)v322, 1u);
        }
        else
        {
          v322[0] = 1;
          std::ostream::write();
        }
        v14 = 0x6DB6DB6DB6DB6DB7 * ((v12[1] - *v12) >> 5);
        v15 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v15 + 40))
        {
          *(_QWORD *)v322 = v15 + 16;
          result = (uint64_t **)sub_20E9F472C((uint64_t **)v322, v14);
        }
        else
        {
          result = (uint64_t **)sub_20E9F4A34();
        }
        v16 = *v12;
        v17 = v12[1];
        if (v17 != *v12)
          break;
LABEL_19:
        v12 += 3;
        if (v12 == v320)
          goto LABEL_349;
      }
      while (1)
      {
        v18 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v18 + 40))
        {
          *(_QWORD *)v322 = v18 + 16;
          sub_20E9F3D4C((uint64_t **)v322, 4u);
        }
        else
        {
          v322[0] = 4;
          std::ostream::write();
        }
        v19 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v19 + 40))
        {
          *(_QWORD *)v322 = v19 + 16;
          sub_20E9F3D4C((uint64_t **)v322, 1u);
        }
        else
        {
          v322[0] = 1;
          std::ostream::write();
        }
        v20 = *(_QWORD *)(a1 + 24);
        v21 = *(_QWORD *)(v16 + 8);
        if (*(_BYTE *)(v20 + 40))
        {
          v22 = *(_QWORD *)(v20 + 32);
          v23 = *(_QWORD *)(v20 + 16);
          if ((unint64_t)(v22 - v23) >= 9)
          {
            v27 = *(char **)(v20 + 24);
          }
          else
          {
            if (v22)
              v24 = 2 * v22;
            else
              v24 = 0x2000;
            v25 = v23 + 9;
            while (v24 < v25)
            {
              v26 = (uint64_t)v24 <= 0;
              v24 *= 2;
              if (v26)
              {
                v24 = v25;
                break;
              }
            }
            v27 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v24, 0xAD6A59EEuLL);
            if (!v27)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v275 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v275, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v27;
            *(_QWORD *)(v20 + 32) = v24;
            v23 = *(_QWORD *)(v20 + 16);
          }
          v43 = &v27[v23];
          *v43 = -53;
          *(_QWORD *)(v43 + 1) = bswap64(v21);
          v44 = *(_QWORD *)(v20 + 16);
          v45 = v44 + 9;
          *(_QWORD *)(v20 + 16) = v44 + 9;
          v46 = *(_QWORD *)(v16 + 16);
          v47 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v47 - (v44 + 9)) >= 9)
          {
            v49 = *(char **)(v20 + 24);
          }
          else
          {
            if (v47)
              v48 = 2 * v47;
            else
              v48 = 0x2000;
            while (v48 < v44 + 18)
            {
              v26 = (uint64_t)v48 <= 0;
              v48 *= 2;
              if (v26)
              {
                v48 = v44 + 18;
                break;
              }
            }
            v49 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v48, 0xAD6A59EEuLL);
            if (!v49)
            {
              v312 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v313 = std::bad_alloc::bad_alloc(v312);
              __cxa_throw(v313, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v49;
            *(_QWORD *)(v20 + 32) = v48;
            v45 = *(_QWORD *)(v20 + 16);
          }
          v50 = &v49[v45];
          *v50 = -53;
          *(_QWORD *)(v50 + 1) = bswap64(v46);
          v51 = *(_QWORD *)(v20 + 16);
          v52 = v51 + 9;
          *(_QWORD *)(v20 + 16) = v51 + 9;
          v53 = *(_QWORD *)(v16 + 24);
          v54 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v54 - (v51 + 9)) >= 9)
          {
            v56 = *(char **)(v20 + 24);
          }
          else
          {
            if (v54)
              v55 = 2 * v54;
            else
              v55 = 0x2000;
            while (v55 < v51 + 18)
            {
              v26 = (uint64_t)v55 <= 0;
              v55 *= 2;
              if (v26)
              {
                v55 = v51 + 18;
                break;
              }
            }
            v56 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v55, 0xAD6A59EEuLL);
            if (!v56)
            {
              v302 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v303 = std::bad_alloc::bad_alloc(v302);
              __cxa_throw(v303, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v56;
            *(_QWORD *)(v20 + 32) = v55;
            v52 = *(_QWORD *)(v20 + 16);
          }
          v57 = &v56[v52];
          *v57 = -53;
          *(_QWORD *)(v57 + 1) = bswap64(v53);
          v58 = *(_QWORD *)(v20 + 16);
          v59 = v58 + 9;
          *(_QWORD *)(v20 + 16) = v58 + 9;
          v60 = *(_QWORD *)(v16 + 32);
          v61 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v61 - (v58 + 9)) >= 9)
          {
            v63 = *(char **)(v20 + 24);
          }
          else
          {
            if (v61)
              v62 = 2 * v61;
            else
              v62 = 0x2000;
            while (v62 < v58 + 18)
            {
              v26 = (uint64_t)v62 <= 0;
              v62 *= 2;
              if (v26)
              {
                v62 = v58 + 18;
                break;
              }
            }
            v63 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v62, 0xAD6A59EEuLL);
            if (!v63)
            {
              v288 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v289 = std::bad_alloc::bad_alloc(v288);
              __cxa_throw(v289, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v63;
            *(_QWORD *)(v20 + 32) = v62;
            v59 = *(_QWORD *)(v20 + 16);
          }
          v64 = &v63[v59];
          *v64 = -53;
          *(_QWORD *)(v64 + 1) = bswap64(v60);
          v65 = *(_QWORD *)(v20 + 16);
          v66 = v65 + 9;
          *(_QWORD *)(v20 + 16) = v65 + 9;
          v67 = *(_QWORD *)(v16 + 40);
          v68 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v68 - (v65 + 9)) >= 9)
          {
            v70 = *(char **)(v20 + 24);
          }
          else
          {
            if (v68)
              v69 = 2 * v68;
            else
              v69 = 0x2000;
            while (v69 < v65 + 18)
            {
              v26 = (uint64_t)v69 <= 0;
              v69 *= 2;
              if (v26)
              {
                v69 = v65 + 18;
                break;
              }
            }
            v70 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v69, 0xAD6A59EEuLL);
            if (!v70)
            {
              v284 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v285 = std::bad_alloc::bad_alloc(v284);
              __cxa_throw(v285, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v70;
            *(_QWORD *)(v20 + 32) = v69;
            v66 = *(_QWORD *)(v20 + 16);
          }
          v71 = &v70[v66];
          *v71 = -53;
          *(_QWORD *)(v71 + 1) = bswap64(v67);
          v72 = *(_QWORD *)(v20 + 16);
          v73 = v72 + 9;
          *(_QWORD *)(v20 + 16) = v72 + 9;
          v74 = *(_QWORD *)(v16 + 48);
          v75 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v75 - (v72 + 9)) >= 9)
          {
            v77 = *(char **)(v20 + 24);
          }
          else
          {
            if (v75)
              v76 = 2 * v75;
            else
              v76 = 0x2000;
            while (v76 < v72 + 18)
            {
              v26 = (uint64_t)v76 <= 0;
              v76 *= 2;
              if (v26)
              {
                v76 = v72 + 18;
                break;
              }
            }
            v77 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v76, 0xAD6A59EEuLL);
            if (!v77)
            {
              v272 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v273 = std::bad_alloc::bad_alloc(v272);
              __cxa_throw(v273, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v77;
            *(_QWORD *)(v20 + 32) = v76;
            v73 = *(_QWORD *)(v20 + 16);
          }
          v78 = &v77[v73];
          *v78 = -53;
          *(_QWORD *)(v78 + 1) = bswap64(v74);
          v79 = *(_QWORD *)(v20 + 16);
          v80 = v79 + 9;
          *(_QWORD *)(v20 + 16) = v79 + 9;
          v81 = *(_QWORD *)(v16 + 56);
          v82 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v82 - (v79 + 9)) >= 9)
          {
            v84 = *(char **)(v20 + 24);
          }
          else
          {
            if (v82)
              v83 = 2 * v82;
            else
              v83 = 0x2000;
            while (v83 < v79 + 18)
            {
              v26 = (uint64_t)v83 <= 0;
              v83 *= 2;
              if (v26)
              {
                v83 = v79 + 18;
                break;
              }
            }
            v84 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v83, 0xAD6A59EEuLL);
            if (!v84)
            {
              v308 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v309 = std::bad_alloc::bad_alloc(v308);
              __cxa_throw(v309, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v84;
            *(_QWORD *)(v20 + 32) = v83;
            v80 = *(_QWORD *)(v20 + 16);
          }
          v85 = &v84[v80];
          *v85 = -53;
          *(_QWORD *)(v85 + 1) = bswap64(v81);
          v86 = *(_QWORD *)(v20 + 16);
          v87 = v86 + 9;
          *(_QWORD *)(v20 + 16) = v86 + 9;
          v88 = *(_QWORD *)(v16 + 64);
          v89 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v89 - (v86 + 9)) >= 9)
          {
            v91 = *(char **)(v20 + 24);
          }
          else
          {
            if (v89)
              v90 = 2 * v89;
            else
              v90 = 0x2000;
            while (v90 < v86 + 18)
            {
              v26 = (uint64_t)v90 <= 0;
              v90 *= 2;
              if (v26)
              {
                v90 = v86 + 18;
                break;
              }
            }
            v91 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v90, 0xAD6A59EEuLL);
            if (!v91)
            {
              v300 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v301 = std::bad_alloc::bad_alloc(v300);
              __cxa_throw(v301, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v91;
            *(_QWORD *)(v20 + 32) = v90;
            v87 = *(_QWORD *)(v20 + 16);
          }
          v92 = &v91[v87];
          *v92 = -53;
          *(_QWORD *)(v92 + 1) = bswap64(v88);
          v93 = *(_QWORD *)(v20 + 16);
          v94 = v93 + 9;
          *(_QWORD *)(v20 + 16) = v93 + 9;
          v95 = *(_QWORD *)(v16 + 72);
          v96 = *(_QWORD *)(v20 + 32);
          if ((unint64_t)(v96 - (v93 + 9)) >= 9)
          {
            v98 = *(char **)(v20 + 24);
          }
          else
          {
            if (v96)
              v97 = 2 * v96;
            else
              v97 = 0x2000;
            while (v97 < v93 + 18)
            {
              v26 = (uint64_t)v97 <= 0;
              v97 *= 2;
              if (v26)
              {
                v97 = v93 + 18;
                break;
              }
            }
            v98 = (char *)malloc_type_realloc(*(void **)(v20 + 24), v97, 0xAD6A59EEuLL);
            if (!v98)
            {
              v292 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v293 = std::bad_alloc::bad_alloc(v292);
              __cxa_throw(v293, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v20 + 24) = v98;
            *(_QWORD *)(v20 + 32) = v97;
            v94 = *(_QWORD *)(v20 + 16);
          }
          v99 = &v98[v94];
          *v99 = -53;
          *(_QWORD *)(v99 + 1) = bswap64(v95);
          *(_QWORD *)(v20 + 16) += 9;
          v36 = *(_QWORD *)(a1 + 24);
          v37 = *(_QWORD *)(v16 + 80);
          if (!*(_BYTE *)(v36 + 40))
          {
LABEL_150:
            *(_QWORD *)&v322[1] = bswap64(v37);
            v322[0] = -53;
            std::ostream::write();
            v100 = *(_QWORD *)(v16 + 88);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v100);
            std::ostream::write();
            v101 = *(_QWORD *)(v16 + 96);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v101);
            std::ostream::write();
            v102 = *(_QWORD *)(a1 + 24);
            v103 = *(_QWORD *)(v16 + 104);
            if (!*(_BYTE *)(v102 + 40))
              goto LABEL_186;
            goto LABEL_151;
          }
        }
        else
        {
          *(_QWORD *)&v322[1] = bswap64(v21);
          v322[0] = -53;
          std::ostream::write();
          v28 = *(_QWORD *)(v16 + 16);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v28);
          std::ostream::write();
          v29 = *(_QWORD *)(v16 + 24);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v29);
          std::ostream::write();
          v30 = *(_QWORD *)(v16 + 32);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v30);
          std::ostream::write();
          v31 = *(_QWORD *)(v16 + 40);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v31);
          std::ostream::write();
          v32 = *(_QWORD *)(v16 + 48);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v32);
          std::ostream::write();
          v33 = *(_QWORD *)(v16 + 56);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v33);
          std::ostream::write();
          v34 = *(_QWORD *)(v16 + 64);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v34);
          std::ostream::write();
          v35 = *(_QWORD *)(v16 + 72);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v35);
          std::ostream::write();
          v36 = *(_QWORD *)(a1 + 24);
          v37 = *(_QWORD *)(v16 + 80);
          if (!*(_BYTE *)(v36 + 40))
            goto LABEL_150;
        }
        v38 = *(_QWORD *)(v36 + 32);
        v39 = *(_QWORD *)(v36 + 16);
        if ((unint64_t)(v38 - v39) >= 9)
        {
          v42 = *(char **)(v36 + 24);
        }
        else
        {
          if (v38)
            v40 = 2 * v38;
          else
            v40 = 0x2000;
          v41 = v39 + 9;
          while (v40 < v41)
          {
            v26 = (uint64_t)v40 <= 0;
            v40 *= 2;
            if (v26)
            {
              v40 = v41;
              break;
            }
          }
          v42 = (char *)malloc_type_realloc(*(void **)(v36 + 24), v40, 0xAD6A59EEuLL);
          if (!v42)
          {
            v298 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v299 = std::bad_alloc::bad_alloc(v298);
            __cxa_throw(v299, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v36 + 24) = v42;
          *(_QWORD *)(v36 + 32) = v40;
          v39 = *(_QWORD *)(v36 + 16);
        }
        v109 = &v42[v39];
        *v109 = -53;
        *(_QWORD *)(v109 + 1) = bswap64(v37);
        v110 = *(_QWORD *)(v36 + 16);
        v111 = v110 + 9;
        *(_QWORD *)(v36 + 16) = v110 + 9;
        v112 = *(_QWORD *)(v16 + 88);
        v113 = *(_QWORD *)(v36 + 32);
        if ((unint64_t)(v113 - (v110 + 9)) >= 9)
        {
          v115 = *(char **)(v36 + 24);
        }
        else
        {
          if (v113)
            v114 = 2 * v113;
          else
            v114 = 0x2000;
          while (v114 < v110 + 18)
          {
            v26 = (uint64_t)v114 <= 0;
            v114 *= 2;
            if (v26)
            {
              v114 = v110 + 18;
              break;
            }
          }
          v115 = (char *)malloc_type_realloc(*(void **)(v36 + 24), v114, 0xAD6A59EEuLL);
          if (!v115)
          {
            v294 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v295 = std::bad_alloc::bad_alloc(v294);
            __cxa_throw(v295, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v36 + 24) = v115;
          *(_QWORD *)(v36 + 32) = v114;
          v111 = *(_QWORD *)(v36 + 16);
        }
        v116 = &v115[v111];
        *v116 = -53;
        *(_QWORD *)(v116 + 1) = bswap64(v112);
        v117 = *(_QWORD *)(v36 + 16);
        v118 = v117 + 9;
        *(_QWORD *)(v36 + 16) = v117 + 9;
        v119 = *(_QWORD *)(v16 + 96);
        v120 = *(_QWORD *)(v36 + 32);
        if ((unint64_t)(v120 - (v117 + 9)) >= 9)
        {
          v122 = *(char **)(v36 + 24);
        }
        else
        {
          if (v120)
            v121 = 2 * v120;
          else
            v121 = 0x2000;
          while (v121 < v117 + 18)
          {
            v26 = (uint64_t)v121 <= 0;
            v121 *= 2;
            if (v26)
            {
              v121 = v117 + 18;
              break;
            }
          }
          v122 = (char *)malloc_type_realloc(*(void **)(v36 + 24), v121, 0xAD6A59EEuLL);
          if (!v122)
          {
            v280 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v281 = std::bad_alloc::bad_alloc(v280);
            __cxa_throw(v281, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v36 + 24) = v122;
          *(_QWORD *)(v36 + 32) = v121;
          v118 = *(_QWORD *)(v36 + 16);
        }
        v123 = &v122[v118];
        *v123 = -53;
        *(_QWORD *)(v123 + 1) = bswap64(v119);
        *(_QWORD *)(v36 + 16) += 9;
        v102 = *(_QWORD *)(a1 + 24);
        v103 = *(_QWORD *)(v16 + 104);
        if (!*(_BYTE *)(v102 + 40))
        {
LABEL_186:
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v103);
          std::ostream::write();
          v124 = *(_QWORD *)(a1 + 24);
          v125 = *(_QWORD *)(v16 + 112);
          if (!*(_BYTE *)(v124 + 40))
            goto LABEL_200;
          goto LABEL_187;
        }
LABEL_151:
        v104 = *(_QWORD *)(v102 + 32);
        v105 = *(_QWORD *)(v102 + 16);
        if ((unint64_t)(v104 - v105) >= 9)
        {
          v108 = *(char **)(v102 + 24);
        }
        else
        {
          if (v104)
            v106 = 2 * v104;
          else
            v106 = 0x2000;
          v107 = v105 + 9;
          while (v106 < v107)
          {
            v26 = (uint64_t)v106 <= 0;
            v106 *= 2;
            if (v26)
            {
              v106 = v107;
              break;
            }
          }
          v108 = (char *)malloc_type_realloc(*(void **)(v102 + 24), v106, 0xAD6A59EEuLL);
          if (!v108)
          {
            v310 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v311 = std::bad_alloc::bad_alloc(v310);
            __cxa_throw(v311, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v102 + 24) = v108;
          *(_QWORD *)(v102 + 32) = v106;
          v105 = *(_QWORD *)(v102 + 16);
        }
        v131 = &v108[v105];
        *v131 = -53;
        *(_QWORD *)(v131 + 1) = bswap64(v103);
        *(_QWORD *)(v102 + 16) += 9;
        v124 = *(_QWORD *)(a1 + 24);
        v125 = *(_QWORD *)(v16 + 112);
        if (!*(_BYTE *)(v124 + 40))
        {
LABEL_200:
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v125);
          std::ostream::write();
          v132 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v132 + 40))
            goto LABEL_201;
          goto LABEL_204;
        }
LABEL_187:
        v126 = *(_QWORD *)(v124 + 32);
        v127 = *(_QWORD *)(v124 + 16);
        if ((unint64_t)(v126 - v127) >= 9)
        {
          v130 = *(char **)(v124 + 24);
        }
        else
        {
          if (v126)
            v128 = 2 * v126;
          else
            v128 = 0x2000;
          v129 = v127 + 9;
          while (v128 < v129)
          {
            v26 = (uint64_t)v128 <= 0;
            v128 *= 2;
            if (v26)
            {
              v128 = v129;
              break;
            }
          }
          v130 = (char *)malloc_type_realloc(*(void **)(v124 + 24), v128, 0xAD6A59EEuLL);
          if (!v130)
          {
            v276 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v277 = std::bad_alloc::bad_alloc(v276);
            __cxa_throw(v277, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v124 + 24) = v130;
          *(_QWORD *)(v124 + 32) = v128;
          v127 = *(_QWORD *)(v124 + 16);
        }
        v133 = &v130[v127];
        *v133 = -53;
        *(_QWORD *)(v133 + 1) = bswap64(v125);
        *(_QWORD *)(v124 + 16) += 9;
        v132 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v132 + 40))
        {
LABEL_201:
          *(_QWORD *)v322 = v132 + 16;
          sub_20E9F3D4C((uint64_t **)v322, 2u);
          goto LABEL_205;
        }
LABEL_204:
        v322[0] = 2;
        std::ostream::write();
LABEL_205:
        v134 = *(_QWORD *)(a1 + 24);
        v135 = *(_QWORD *)(v16 + 120);
        if (*(_BYTE *)(v134 + 40))
        {
          v136 = *(_QWORD *)(v134 + 32);
          v137 = *(_QWORD *)(v134 + 16);
          if ((unint64_t)(v136 - v137) >= 9)
          {
            v140 = *(char **)(v134 + 24);
          }
          else
          {
            if (v136)
              v138 = 2 * v136;
            else
              v138 = 0x2000;
            v139 = v137 + 9;
            while (v138 < v139)
            {
              v26 = (uint64_t)v138 <= 0;
              v138 *= 2;
              if (v26)
              {
                v138 = v139;
                break;
              }
            }
            v140 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v138, 0xAD6A59EEuLL);
            if (!v140)
            {
              v306 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v307 = std::bad_alloc::bad_alloc(v306);
              __cxa_throw(v307, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v140;
            *(_QWORD *)(v134 + 32) = v138;
            v137 = *(_QWORD *)(v134 + 16);
          }
          v156 = &v140[v137];
          *v156 = -53;
          *(_QWORD *)(v156 + 1) = bswap64(v135);
          v157 = *(_QWORD *)(v134 + 16);
          v158 = v157 + 9;
          *(_QWORD *)(v134 + 16) = v157 + 9;
          v159 = *(_QWORD *)(v16 + 128);
          v160 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v160 - (v157 + 9)) >= 9)
          {
            v162 = *(char **)(v134 + 24);
          }
          else
          {
            if (v160)
              v161 = 2 * v160;
            else
              v161 = 0x2000;
            while (v161 < v157 + 18)
            {
              v26 = (uint64_t)v161 <= 0;
              v161 *= 2;
              if (v26)
              {
                v161 = v157 + 18;
                break;
              }
            }
            v162 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v161, 0xAD6A59EEuLL);
            if (!v162)
            {
              v296 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v297 = std::bad_alloc::bad_alloc(v296);
              __cxa_throw(v297, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v162;
            *(_QWORD *)(v134 + 32) = v161;
            v158 = *(_QWORD *)(v134 + 16);
          }
          v163 = &v162[v158];
          *v163 = -53;
          *(_QWORD *)(v163 + 1) = bswap64(v159);
          v164 = *(_QWORD *)(v134 + 16);
          v165 = v164 + 9;
          *(_QWORD *)(v134 + 16) = v164 + 9;
          v166 = *(_QWORD *)(v16 + 136);
          v167 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v167 - (v164 + 9)) >= 9)
          {
            v169 = *(char **)(v134 + 24);
          }
          else
          {
            if (v167)
              v168 = 2 * v167;
            else
              v168 = 0x2000;
            while (v168 < v164 + 18)
            {
              v26 = (uint64_t)v168 <= 0;
              v168 *= 2;
              if (v26)
              {
                v168 = v164 + 18;
                break;
              }
            }
            v169 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v168, 0xAD6A59EEuLL);
            if (!v169)
            {
              v286 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v287 = std::bad_alloc::bad_alloc(v286);
              __cxa_throw(v287, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v169;
            *(_QWORD *)(v134 + 32) = v168;
            v165 = *(_QWORD *)(v134 + 16);
          }
          v170 = &v169[v165];
          *v170 = -53;
          *(_QWORD *)(v170 + 1) = bswap64(v166);
          v171 = *(_QWORD *)(v134 + 16);
          v172 = v171 + 9;
          *(_QWORD *)(v134 + 16) = v171 + 9;
          v173 = *(_QWORD *)(v16 + 144);
          v174 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v174 - (v171 + 9)) >= 9)
          {
            v176 = *(char **)(v134 + 24);
          }
          else
          {
            if (v174)
              v175 = 2 * v174;
            else
              v175 = 0x2000;
            while (v175 < v171 + 18)
            {
              v26 = (uint64_t)v175 <= 0;
              v175 *= 2;
              if (v26)
              {
                v175 = v171 + 18;
                break;
              }
            }
            v176 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v175, 0xAD6A59EEuLL);
            if (!v176)
            {
              v278 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v279 = std::bad_alloc::bad_alloc(v278);
              __cxa_throw(v279, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v176;
            *(_QWORD *)(v134 + 32) = v175;
            v172 = *(_QWORD *)(v134 + 16);
          }
          v177 = &v176[v172];
          *v177 = -53;
          *(_QWORD *)(v177 + 1) = bswap64(v173);
          v178 = *(_QWORD *)(v134 + 16);
          v179 = v178 + 9;
          *(_QWORD *)(v134 + 16) = v178 + 9;
          v180 = *(_QWORD *)(v16 + 152);
          v181 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v181 - (v178 + 9)) >= 9)
          {
            v183 = *(char **)(v134 + 24);
          }
          else
          {
            if (v181)
              v182 = 2 * v181;
            else
              v182 = 0x2000;
            while (v182 < v178 + 18)
            {
              v26 = (uint64_t)v182 <= 0;
              v182 *= 2;
              if (v26)
              {
                v182 = v178 + 18;
                break;
              }
            }
            v183 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v182, 0xAD6A59EEuLL);
            if (!v183)
            {
              v268 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v269 = std::bad_alloc::bad_alloc(v268);
              __cxa_throw(v269, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v183;
            *(_QWORD *)(v134 + 32) = v182;
            v179 = *(_QWORD *)(v134 + 16);
          }
          v184 = &v183[v179];
          *v184 = -53;
          *(_QWORD *)(v184 + 1) = bswap64(v180);
          v185 = *(_QWORD *)(v134 + 16);
          v186 = v185 + 9;
          *(_QWORD *)(v134 + 16) = v185 + 9;
          v187 = *(_QWORD *)(v16 + 160);
          v188 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v188 - (v185 + 9)) >= 9)
          {
            v190 = *(char **)(v134 + 24);
          }
          else
          {
            if (v188)
              v189 = 2 * v188;
            else
              v189 = 0x2000;
            while (v189 < v185 + 18)
            {
              v26 = (uint64_t)v189 <= 0;
              v189 *= 2;
              if (v26)
              {
                v189 = v185 + 18;
                break;
              }
            }
            v190 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v189, 0xAD6A59EEuLL);
            if (!v190)
            {
              v314 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v315 = std::bad_alloc::bad_alloc(v314);
              __cxa_throw(v315, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v190;
            *(_QWORD *)(v134 + 32) = v189;
            v186 = *(_QWORD *)(v134 + 16);
          }
          v191 = &v190[v186];
          *v191 = -53;
          *(_QWORD *)(v191 + 1) = bswap64(v187);
          v192 = *(_QWORD *)(v134 + 16);
          v193 = v192 + 9;
          *(_QWORD *)(v134 + 16) = v192 + 9;
          v194 = *(_QWORD *)(v16 + 168);
          v195 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v195 - (v192 + 9)) >= 9)
          {
            v197 = *(char **)(v134 + 24);
          }
          else
          {
            if (v195)
              v196 = 2 * v195;
            else
              v196 = 0x2000;
            while (v196 < v192 + 18)
            {
              v26 = (uint64_t)v196 <= 0;
              v196 *= 2;
              if (v26)
              {
                v196 = v192 + 18;
                break;
              }
            }
            v197 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v196, 0xAD6A59EEuLL);
            if (!v197)
            {
              v304 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v305 = std::bad_alloc::bad_alloc(v304);
              __cxa_throw(v305, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v197;
            *(_QWORD *)(v134 + 32) = v196;
            v193 = *(_QWORD *)(v134 + 16);
          }
          v198 = &v197[v193];
          *v198 = -53;
          *(_QWORD *)(v198 + 1) = bswap64(v194);
          v199 = *(_QWORD *)(v134 + 16);
          v200 = v199 + 9;
          *(_QWORD *)(v134 + 16) = v199 + 9;
          v201 = *(_QWORD *)(v16 + 176);
          v202 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v202 - (v199 + 9)) >= 9)
          {
            v204 = *(char **)(v134 + 24);
          }
          else
          {
            if (v202)
              v203 = 2 * v202;
            else
              v203 = 0x2000;
            while (v203 < v199 + 18)
            {
              v26 = (uint64_t)v203 <= 0;
              v203 *= 2;
              if (v26)
              {
                v203 = v199 + 18;
                break;
              }
            }
            v204 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v203, 0xAD6A59EEuLL);
            if (!v204)
            {
              v290 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v291 = std::bad_alloc::bad_alloc(v290);
              __cxa_throw(v291, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v204;
            *(_QWORD *)(v134 + 32) = v203;
            v200 = *(_QWORD *)(v134 + 16);
          }
          v205 = &v204[v200];
          *v205 = -53;
          *(_QWORD *)(v205 + 1) = bswap64(v201);
          v206 = *(_QWORD *)(v134 + 16);
          v207 = v206 + 9;
          *(_QWORD *)(v134 + 16) = v206 + 9;
          v208 = *(_QWORD *)(v16 + 184);
          v209 = *(_QWORD *)(v134 + 32);
          if ((unint64_t)(v209 - (v206 + 9)) >= 9)
          {
            v211 = *(char **)(v134 + 24);
          }
          else
          {
            if (v209)
              v210 = 2 * v209;
            else
              v210 = 0x2000;
            while (v210 < v206 + 18)
            {
              v26 = (uint64_t)v210 <= 0;
              v210 *= 2;
              if (v26)
              {
                v210 = v206 + 18;
                break;
              }
            }
            v211 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v210, 0xAD6A59EEuLL);
            if (!v211)
            {
              v282 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v283 = std::bad_alloc::bad_alloc(v282);
              __cxa_throw(v283, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v134 + 24) = v211;
            *(_QWORD *)(v134 + 32) = v210;
            v207 = *(_QWORD *)(v134 + 16);
          }
          v212 = &v211[v207];
          *v212 = -53;
          *(_QWORD *)(v212 + 1) = bswap64(v208);
          *(_QWORD *)(v134 + 16) += 9;
          v149 = *(_QWORD *)(a1 + 24);
          v150 = *(_QWORD *)(v16 + 192);
          if (!*(_BYTE *)(v149 + 40))
          {
LABEL_319:
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v150);
            std::ostream::write();
            if (!*(_BYTE *)(v16 + 208))
              goto LABEL_324;
            goto LABEL_320;
          }
        }
        else
        {
          *(_QWORD *)&v322[1] = bswap64(v135);
          v322[0] = -53;
          std::ostream::write();
          v141 = *(_QWORD *)(v16 + 128);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v141);
          std::ostream::write();
          v142 = *(_QWORD *)(v16 + 136);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v142);
          std::ostream::write();
          v143 = *(_QWORD *)(v16 + 144);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v143);
          std::ostream::write();
          v144 = *(_QWORD *)(v16 + 152);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v144);
          std::ostream::write();
          v145 = *(_QWORD *)(v16 + 160);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v145);
          std::ostream::write();
          v146 = *(_QWORD *)(v16 + 168);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v146);
          std::ostream::write();
          v147 = *(_QWORD *)(v16 + 176);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v147);
          std::ostream::write();
          v148 = *(_QWORD *)(v16 + 184);
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v148);
          std::ostream::write();
          v149 = *(_QWORD *)(a1 + 24);
          v150 = *(_QWORD *)(v16 + 192);
          if (!*(_BYTE *)(v149 + 40))
            goto LABEL_319;
        }
        v151 = *(_QWORD *)(v149 + 32);
        v152 = *(_QWORD *)(v149 + 16);
        if ((unint64_t)(v151 - v152) >= 9)
        {
          v155 = *(char **)(v149 + 24);
        }
        else
        {
          if (v151)
            v153 = 2 * v151;
          else
            v153 = 0x2000;
          v154 = v152 + 9;
          while (v153 < v154)
          {
            v26 = (uint64_t)v153 <= 0;
            v153 *= 2;
            if (v26)
            {
              v153 = v154;
              break;
            }
          }
          v155 = (char *)malloc_type_realloc(*(void **)(v149 + 24), v153, 0xAD6A59EEuLL);
          if (!v155)
          {
            v270 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v271 = std::bad_alloc::bad_alloc(v270);
            __cxa_throw(v271, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v149 + 24) = v155;
          *(_QWORD *)(v149 + 32) = v153;
          v152 = *(_QWORD *)(v149 + 16);
        }
        v214 = &v155[v152];
        *v214 = -53;
        *(_QWORD *)(v214 + 1) = bswap64(v150);
        *(_QWORD *)(v149 + 16) += 9;
        if (!*(_BYTE *)(v16 + 208))
        {
LABEL_324:
          v215 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v215 + 40))
          {
            *(_QWORD *)v322 = v215 + 16;
            sub_20E9F3164((uint64_t **)v322, 0);
          }
          else
          {
            v322[0] = 0;
            std::ostream::write();
          }
LABEL_326:
          v216 = (_BYTE *)(v16 + 216);
          v217 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v217 + 40))
            goto LABEL_344;
          goto LABEL_28;
        }
LABEL_320:
        v213 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v213 + 40))
        {
          *(_QWORD *)v322 = v213 + 16;
          sub_20E9F3164((uint64_t **)v322, 1);
        }
        else
        {
          v322[0] = 1;
          std::ostream::write();
        }
        v218 = *(_QWORD *)(a1 + 24);
        v219 = *(_QWORD *)(v16 + 200);
        if (!*(_BYTE *)(v218 + 40))
        {
          v322[0] = -53;
          *(_QWORD *)&v322[1] = bswap64(v219);
          std::ostream::write();
          goto LABEL_326;
        }
        v220 = *(_QWORD *)(v218 + 32);
        v221 = *(_QWORD *)(v218 + 16);
        if ((unint64_t)(v220 - v221) >= 9)
        {
          v224 = *(char **)(v218 + 24);
        }
        else
        {
          if (v220)
            v222 = 2 * v220;
          else
            v222 = 0x2000;
          v223 = v221 + 9;
          while (v222 < v223)
          {
            v26 = (uint64_t)v222 <= 0;
            v222 *= 2;
            if (v26)
            {
              v222 = v223;
              break;
            }
          }
          v224 = (char *)malloc_type_realloc(*(void **)(v218 + 24), v222, 0xAD6A59EEuLL);
          if (!v224)
          {
            v316 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v317 = std::bad_alloc::bad_alloc(v316);
            __cxa_throw(v317, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v218 + 24) = v224;
          *(_QWORD *)(v218 + 32) = v222;
          v221 = *(_QWORD *)(v218 + 16);
        }
        v225 = &v224[v221];
        *v225 = -53;
        *(_QWORD *)(v225 + 1) = bswap64(v219);
        *(_QWORD *)(v218 + 16) += 9;
        v216 = (_BYTE *)(v16 + 216);
        v217 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v217 + 40))
        {
LABEL_344:
          if (*v216)
            v322[0] = -61;
          else
            v322[0] = -62;
          result = (uint64_t **)std::ostream::write();
          goto LABEL_29;
        }
LABEL_28:
        *(_QWORD *)v322 = v217 + 16;
        result = sub_20E9F4CE4((uint64_t)&v321, (uint64_t **)v322, v216);
LABEL_29:
        v16 += 224;
        if (v16 == v17)
          goto LABEL_19;
      }
    }
LABEL_349:
    if (a3 != 2)
    {
      v226 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v226 + 40))
      {
        *(_QWORD *)v322 = v226 + 16;
        sub_20E9F3D4C((uint64_t **)v322, 1u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v322, v226 + 8);
      }
      v227 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v227 + 40))
      {
        *(_QWORD *)v322 = v227 + 16;
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 40));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 48));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 56));
      }
      else
      {
        *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 40));
        v322[0] = -53;
        std::ostream::write();
        v228 = *(_QWORD *)(a2 + 48);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v228);
        std::ostream::write();
        v229 = *(_QWORD *)(a2 + 56);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v229);
        std::ostream::write();
      }
      v230 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v230 + 40))
      {
        *(_QWORD *)v322 = v230 + 16;
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 64));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 72));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 80));
      }
      else
      {
        *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 64));
        v322[0] = -53;
        std::ostream::write();
        v231 = *(_QWORD *)(a2 + 72);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v231);
        std::ostream::write();
        v232 = *(_QWORD *)(a2 + 80);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v232);
        std::ostream::write();
      }
      v233 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v233 + 40))
      {
        *(_QWORD *)v322 = v233 + 16;
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 88));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 96));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 104));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 112));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 120));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 128));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 136));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 144));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 152));
      }
      else
      {
        *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 88));
        v322[0] = -53;
        std::ostream::write();
        v234 = *(_QWORD *)(a2 + 96);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v234);
        std::ostream::write();
        v235 = *(_QWORD *)(a2 + 104);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v235);
        std::ostream::write();
        v236 = *(_QWORD *)(a2 + 112);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v236);
        std::ostream::write();
        v237 = *(_QWORD *)(a2 + 120);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v237);
        std::ostream::write();
        v238 = *(_QWORD *)(a2 + 128);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v238);
        std::ostream::write();
        v239 = *(_QWORD *)(a2 + 136);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v239);
        std::ostream::write();
        v240 = *(_QWORD *)(a2 + 144);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v240);
        std::ostream::write();
        v241 = *(_QWORD *)(a2 + 152);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v241);
        std::ostream::write();
      }
      v242 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v242 + 40))
      {
        *(_QWORD *)v322 = v242 + 16;
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 160));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 168));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 176));
      }
      else
      {
        *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 160));
        v322[0] = -53;
        std::ostream::write();
        v243 = *(_QWORD *)(a2 + 168);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v243);
        std::ostream::write();
        v244 = *(_QWORD *)(a2 + 176);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v244);
        std::ostream::write();
      }
      v245 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v245 + 40))
      {
        *(_QWORD *)v322 = v245 + 16;
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 184));
        sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 192));
        result = sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 200));
      }
      else
      {
        *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 184));
        v322[0] = -53;
        std::ostream::write();
        v246 = *(_QWORD *)(a2 + 192);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v246);
        std::ostream::write();
        v247 = *(_QWORD *)(a2 + 200);
        v322[0] = -53;
        *(_QWORD *)&v322[1] = bswap64(v247);
        result = (uint64_t **)std::ostream::write();
      }
      if (a3 >= 4)
      {
        v248 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v248 + 40))
        {
          *(_QWORD *)v322 = v248 + 16;
          sub_20E9F472C((uint64_t **)v322, *(_QWORD *)(a2 + 208));
        }
        else
        {
          sub_20E9F4A34();
        }
        v249 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v249 + 40))
        {
          *(_QWORD *)v322 = v249 + 16;
          result = (uint64_t **)sub_20E9F3D4C((uint64_t **)v322, *(_DWORD *)(a2 + 216));
        }
        else
        {
          result = (uint64_t **)sub_20E9F3FC0((uint64_t)v322, v249 + 8);
        }
        if (a3 != 4)
        {
          v250 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v250 + 40))
          {
            *(_QWORD *)v322 = v250 + 16;
            sub_20E9F3D4C((uint64_t **)v322, 1u);
          }
          else
          {
            sub_20E9F3FC0((uint64_t)v322, v250 + 8);
          }
          v251 = (_BYTE *)(a2 + 224);
          v252 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v252 + 40))
          {
            *(_QWORD *)v322 = v252 + 16;
            sub_20E9F4CE4((uint64_t)&v321, (uint64_t **)v322, v251);
          }
          else
          {
            if (*v251)
              v322[0] = -61;
            else
              v322[0] = -62;
            std::ostream::write();
          }
          v253 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v253 + 40))
          {
            *(_QWORD *)v322 = v253 + 16;
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 232));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 240));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 248));
          }
          else
          {
            *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 232));
            v322[0] = -53;
            std::ostream::write();
            v254 = *(_QWORD *)(a2 + 240);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v254);
            std::ostream::write();
            v255 = *(_QWORD *)(a2 + 248);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v255);
            std::ostream::write();
          }
          v256 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v256 + 40))
          {
            *(_QWORD *)v322 = v256 + 16;
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 256));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 264));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 272));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 280));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 288));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 296));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 304));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 312));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 320));
          }
          else
          {
            *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 256));
            v322[0] = -53;
            std::ostream::write();
            v257 = *(_QWORD *)(a2 + 264);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v257);
            std::ostream::write();
            v258 = *(_QWORD *)(a2 + 272);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v258);
            std::ostream::write();
            v259 = *(_QWORD *)(a2 + 280);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v259);
            std::ostream::write();
            v260 = *(_QWORD *)(a2 + 288);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v260);
            std::ostream::write();
            v261 = *(_QWORD *)(a2 + 296);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v261);
            std::ostream::write();
            v262 = *(_QWORD *)(a2 + 304);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v262);
            std::ostream::write();
            v263 = *(_QWORD *)(a2 + 312);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v263);
            std::ostream::write();
            v264 = *(_QWORD *)(a2 + 320);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v264);
            std::ostream::write();
          }
          v265 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v265 + 40))
          {
            *(_QWORD *)v322 = v265 + 16;
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 328));
            sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 336));
            return sub_20E9F4C08((uint64_t)&v321, (uint64_t **)v322, (unint64_t *)(a2 + 344));
          }
          else
          {
            *(_QWORD *)&v322[1] = bswap64(*(_QWORD *)(a2 + 328));
            v322[0] = -53;
            std::ostream::write();
            v266 = *(_QWORD *)(a2 + 336);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v266);
            std::ostream::write();
            v267 = *(_QWORD *)(a2 + 344);
            v322[0] = -53;
            *(_QWORD *)&v322[1] = bswap64(v267);
            return (uint64_t **)std::ostream::write();
          }
        }
      }
    }
  }
  return result;
}

void sub_20EAD3180(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t k;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  size_t v89;
  BOOL v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t j;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  _BYTE *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  size_t v161;
  size_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  std::bad_alloc *v172;
  std::bad_alloc *v173;
  std::bad_alloc *exception;
  std::bad_alloc *v175;
  unint64_t v176;
  unint64_t v178;
  uint64_t *v179;
  char v180;
  _BYTE v181[9];
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v3 + 40))
  {
    *(_QWORD *)v181 = v3 + 16;
    sub_20E9F4C08((uint64_t)&v180, (uint64_t **)v181, a2);
  }
  else
  {
    v4 = *a2;
    v181[0] = -53;
    *(_QWORD *)&v181[1] = bswap64(v4);
    std::ostream::write();
  }
  v5 = a2;
  v6 = a2[3];
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    *(_QWORD *)v181 = v7 + 16;
    sub_20E9F472C((uint64_t **)v181, v6);
    v5 = a2;
    v8 = (unint64_t *)a2[1];
    v9 = a2 + 2;
    if (v8 == a2 + 2)
      goto LABEL_27;
  }
  else
  {
    sub_20E9F4A34();
    v8 = (unint64_t *)a2[1];
    v9 = a2 + 2;
    if (v8 == a2 + 2)
      goto LABEL_27;
  }
  do
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v10 + 40))
    {
      *(_QWORD *)v181 = v10 + 16;
      sub_20E9F472C((uint64_t **)v181, v8[4]);
    }
    else
    {
      sub_20E9F4A34();
    }
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
    {
      *(_QWORD *)v181 = v11 + 16;
      sub_20E9F3D4C((uint64_t **)v181, 8u);
    }
    else
    {
      v181[0] = 8;
      std::ostream::write();
    }
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    sub_20EAD500C(a1, v8 + 5);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v12 + 48), *(_QWORD *)(v12 + 16) - v13 - 9);
    if (*(_QWORD *)(v12 + 48))
      memmove((void *)(*(_QWORD *)(v12 + 24) + v13), *(const void **)(v12 + 56), *(_QWORD *)(v12 + 48));
    *(_QWORD *)(v12 + 48) = 0;
    v14 = *(_QWORD *)(v12 + 80);
    v15 = *(_QWORD *)(v12 + 88) - 8;
    *(_QWORD *)(v12 + 88) = v15;
    if (v14 == v15)
    {
      std::ostream::write();
      if (*(_BYTE *)(v12 + 40))
      {
        free(*(void **)(v12 + 24));
        *(_BYTE *)(v12 + 40) = 0;
      }
    }
    v16 = (unint64_t *)v8[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (unint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (unint64_t *)v8[2];
        v18 = *v17 == (_QWORD)v8;
        v8 = v17;
      }
      while (!v18);
    }
    v8 = v17;
    v5 = a2;
  }
  while (v17 != v9);
LABEL_27:
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    *(_QWORD *)v181 = v19 + 16;
    sub_20E9F472C((uint64_t **)v181, v5[4]);
    v20 = (uint64_t)(a2[6] - a2[5]) >> 4;
    v21 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v21 + 40))
    {
LABEL_29:
      *(_QWORD *)v181 = v21 + 16;
      sub_20E9F472C((uint64_t **)v181, v20);
      goto LABEL_32;
    }
  }
  else
  {
    sub_20E9F4A34();
    v20 = (uint64_t)(v5[6] - v5[5]) >> 4;
    v21 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v21 + 40))
      goto LABEL_29;
  }
  sub_20E9F4A34();
LABEL_32:
  v22 = a2;
  v23 = a2[5];
  v24 = a2[6] - v23;
  if (v24)
  {
    v25 = (unsigned int *)(v23 + 8);
    v26 = 16 * (v24 >> 4);
    do
    {
      v27 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v27 + 40))
      {
        *(_QWORD *)v181 = v27 + 16;
        sub_20E9F472C((uint64_t **)v181, *((_QWORD *)v25 - 1));
      }
      else
      {
        sub_20E9F4A34();
      }
      v28 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v28 + 40))
      {
        *(_QWORD *)v181 = v28 + 16;
        sub_20E9F3D4C((uint64_t **)v181, *v25);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v181, v28 + 8);
      }
      v25 += 4;
      v26 -= 16;
      v22 = a2;
    }
    while (v26);
  }
  v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22[9] - v22[8]) >> 4);
  v30 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v30 + 40))
  {
    *(_QWORD *)v181 = v30 + 16;
    sub_20E9F472C((uint64_t **)v181, v29);
  }
  else
  {
    sub_20E9F4A34();
  }
  v31 = a2;
  v178 = a2[8];
  v176 = a2[9];
  if (v176 != v178)
  {
    while (1)
    {
      v32 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v32 + 40))
      {
        *(_QWORD *)v181 = v32 + 16;
        sub_20E9F4C08((uint64_t)&v180, (uint64_t **)v181, (unint64_t *)v178);
      }
      else
      {
        v33 = *(_QWORD *)v178;
        v181[0] = -53;
        *(_QWORD *)&v181[1] = bswap64(v33);
        std::ostream::write();
      }
      v34 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v34 + 40))
      {
        *(_QWORD *)v181 = v34 + 16;
        sub_20E9F3D4C((uint64_t **)v181, 4u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v181, v34 + 8);
      }
      v35 = (_BYTE *)(v178 + 8);
      v36 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v36 + 40))
      {
        *(_QWORD *)v181 = v36 + 16;
        sub_20E9F4CE4((uint64_t)&v180, (uint64_t **)v181, v35);
      }
      else
      {
        v181[0] = *v35 ? -61 : -62;
        std::ostream::write();
      }
      v37 = (_BYTE *)(v178 + 9);
      v38 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v38 + 40))
      {
        *(_QWORD *)v181 = v38 + 16;
        sub_20E9F4CE4((uint64_t)&v180, (uint64_t **)v181, v37);
      }
      else
      {
        v181[0] = *v37 ? -61 : -62;
        std::ostream::write();
      }
      v39 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v39 + 40))
      {
        *(_QWORD *)v181 = v39 + 16;
        sub_20E9F3D4C((uint64_t **)v181, *(_DWORD *)(v178 + 12));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v181, v39 + 8);
      }
      v40 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v40 + 40))
      {
        *(_QWORD *)v181 = v40 + 16;
        sub_20E9F472C((uint64_t **)v181, *(_QWORD *)(v178 + 16));
      }
      else
      {
        sub_20E9F4A34();
      }
      v41 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v41 + 40))
      {
        *(_QWORD *)v181 = v41 + 16;
        sub_20E9F3D4C((uint64_t **)v181, *(_DWORD *)(v178 + 24));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v181, v41 + 8);
      }
      v42 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v42 + 40))
      {
        *(_QWORD *)v181 = v42 + 16;
        sub_20E9F3D4C((uint64_t **)v181, *(_DWORD *)(v178 + 32));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v181, v42 + 8);
      }
      v43 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v43 + 40))
      {
        *(_QWORD *)v181 = v43 + 16;
        sub_20E9F472C((uint64_t **)v181, *(_QWORD *)(v178 + 40));
      }
      else
      {
        sub_20E9F4A34();
      }
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v178 + 56) - *(_QWORD *)(v178 + 48)) >> 3);
      v45 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v45 + 40))
      {
        *(_QWORD *)v181 = v45 + 16;
        sub_20E9F472C((uint64_t **)v181, v44);
      }
      else
      {
        sub_20E9F4A34();
      }
      v46 = *(_QWORD **)(v178 + 48);
      v47 = *(_QWORD **)(v178 + 56);
      if (v47 != v46)
        break;
LABEL_85:
      v48 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v178 + 80) - *(_QWORD *)(v178 + 72)) >> 4);
      v49 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v49 + 40))
      {
        *(_QWORD *)v181 = v49 + 16;
        sub_20E9F472C((uint64_t **)v181, v48);
      }
      else
      {
        sub_20E9F4A34();
      }
      v63 = *(_QWORD **)(v178 + 72);
      v64 = *(_QWORD *)(v178 + 80) - (_QWORD)v63;
      if (v64)
      {
        v65 = 112 * (v64 / 112);
        do
        {
          v66 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v66 + 40))
          {
            *(_QWORD *)v181 = v66 + 16;
            sub_20E9F3D4C((uint64_t **)v181, 2u);
          }
          else
          {
            v181[0] = 2;
            std::ostream::write();
          }
          sub_20EADB644(a1, v63, 2u);
          v63 += 14;
          v65 -= 112;
        }
        while (v65);
      }
      v67 = (uint64_t)(*(_QWORD *)(v178 + 104) - *(_QWORD *)(v178 + 96)) >> 3;
      v68 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)v181 = v68 + 16;
        sub_20E9F472C((uint64_t **)v181, v67);
      }
      else
      {
        sub_20E9F4A34();
      }
      v70 = *(unint64_t **)(v178 + 96);
      v69 = *(unint64_t **)(v178 + 104);
      v71 = v69 - v70;
      v72 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v72 + 40))
      {
        if (v69 == v70)
          goto LABEL_163;
        v74 = 8 * v71;
        while (1)
        {
          v75 = *v70;
          if (*v70 > 0xFF)
          {
            if (!(v75 >> 16))
            {
              v181[0] = -51;
              *(_WORD *)&v181[1] = bswap32(v75) >> 16;
              std::ostream::write();
              goto LABEL_153;
            }
            if (HIDWORD(v75))
            {
              v181[0] = -49;
              *(_QWORD *)&v181[1] = bswap64(v75);
            }
            else
            {
              v181[0] = -50;
              *(_DWORD *)&v181[1] = bswap32(v75);
            }
          }
          else if (v75 <= 0x7F)
          {
            v181[0] = *v70;
          }
          else
          {
            v181[0] = -52;
            v181[1] = v75;
          }
          std::ostream::write();
LABEL_153:
          ++v70;
          v74 -= 8;
          if (!v74)
            goto LABEL_163;
        }
      }
      *(_QWORD *)v181 = v72 + 16;
      if (v69 != v70)
      {
        v73 = 8 * v71;
        do
        {
          sub_20E9F472C((uint64_t **)v181, *v70++);
          v73 -= 8;
        }
        while (v73);
      }
LABEL_163:
      v76 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(v178 + 128) - *(_QWORD *)(v178 + 120)) >> 3);
      v77 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v77 + 40))
      {
        *(_QWORD *)v181 = v77 + 16;
        sub_20E9F472C((uint64_t **)v181, v76);
      }
      else
      {
        sub_20E9F4A34();
      }
      v78 = *(_QWORD *)(v178 + 120);
      for (i = *(_QWORD *)(v178 + 128); v78 != i; v78 += 472)
      {
        v82 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v82 + 40))
        {
          *(_QWORD *)v181 = v82 + 16;
          sub_20E9F3D4C((uint64_t **)v181, 4u);
        }
        else
        {
          v181[0] = 4;
          std::ostream::write();
        }
        sub_20E9EE95C(*(_QWORD *)(a1 + 24));
        sub_20EAD0214(a1, v78, 4u);
        v83 = *(_QWORD *)(a1 + 24);
        v84 = *(_QWORD *)(*(_QWORD *)(v83 + 88) - 8);
        v85 = *(_QWORD *)(v83 + 16);
        v86 = *(_QWORD *)(v83 + 64);
        v87 = *(_QWORD *)(v83 + 48);
        if ((unint64_t)(v86 - v87) >= 9)
        {
          v91 = *(char **)(v83 + 56);
        }
        else
        {
          if (v86)
            v88 = 2 * v86;
          else
            v88 = 0x2000;
          v89 = v87 + 9;
          while (v88 < v89)
          {
            v90 = (uint64_t)v88 <= 0;
            v88 *= 2;
            if (v90)
            {
              v88 = v89;
              break;
            }
          }
          v91 = (char *)malloc_type_realloc(*(void **)(v83 + 56), v88, 0xAD6A59EEuLL);
          if (!v91)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v175 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v175, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v83 + 56) = v91;
          *(_QWORD *)(v83 + 64) = v88;
          v87 = *(_QWORD *)(v83 + 48);
        }
        v92 = &v91[v87];
        *v92 = -49;
        *(_QWORD *)(v92 + 1) = bswap64(v85 - v84 - 9);
        v93 = *(_QWORD *)(v83 + 48);
        *(_QWORD *)(v83 + 48) = v93 + 9;
        if (v93 != -9)
          memmove((void *)(*(_QWORD *)(v83 + 24) + v84), *(const void **)(v83 + 56), v93 + 9);
        *(_QWORD *)(v83 + 48) = 0;
        v94 = *(_QWORD *)(v83 + 80);
        v95 = *(_QWORD *)(v83 + 88) - 8;
        *(_QWORD *)(v83 + 88) = v95;
        if (v94 == v95)
        {
          std::ostream::write();
          if (*(_BYTE *)(v83 + 40))
          {
            free(*(void **)(v83 + 24));
            *(_BYTE *)(v83 + 40) = 0;
          }
        }
      }
      v80 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v178 + 152) - *(_QWORD *)(v178 + 144)) >> 3);
      v81 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v81 + 40))
      {
        *(_QWORD *)v181 = v81 + 16;
        sub_20E9F472C((uint64_t **)v181, v80);
      }
      else
      {
        sub_20E9F4A34();
      }
      v96 = *(_QWORD *)(v178 + 144);
      v97 = *(_QWORD *)(v178 + 152);
      if (v97 != v96)
      {
        while (1)
        {
          v100 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v100 + 40))
          {
            *(_QWORD *)v181 = v100 + 16;
            sub_20E9F3D4C((uint64_t **)v181, 2u);
          }
          else
          {
            v181[0] = 2;
            std::ostream::write();
          }
          v101 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v101 + 40))
          {
            *(_QWORD *)v181 = v101 + 16;
            sub_20E9F4CE4((uint64_t)&v180, (uint64_t **)v181, (_BYTE *)v96);
          }
          else
          {
            if (*(_BYTE *)v96)
              v181[0] = -61;
            else
              v181[0] = -62;
            std::ostream::write();
          }
          v102 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 3);
          v103 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v103 + 40))
          {
            *(_QWORD *)v181 = v103 + 16;
            sub_20E9F472C((uint64_t **)v181, v102);
            goto LABEL_206;
          }
          if (v102 <= 0xFF)
            break;
          if (v102 >> 16)
          {
            if (HIDWORD(v102))
            {
              v181[0] = -49;
              *(_QWORD *)&v181[1] = bswap64(v102);
            }
            else
            {
              v181[0] = -50;
              *(_DWORD *)&v181[1] = bswap32(v102);
            }
            goto LABEL_255;
          }
          v181[0] = -51;
          *(_WORD *)&v181[1] = bswap32(v102) >> 16;
          std::ostream::write();
LABEL_206:
          v104 = *(_QWORD *)(v96 + 8);
          v105 = *(_QWORD *)(v96 + 16) - v104;
          if (v105)
          {
            v106 = (_QWORD *)(v104 + 24);
            for (j = 136 * (v105 / 136); j; j -= 136)
            {
              v108 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v108 + 40))
              {
                *(_QWORD *)v181 = v108 + 16;
                sub_20E9F472C((uint64_t **)v181, *(v106 - 3));
              }
              else
              {
                v112 = *(v106 - 3);
                if (v112 > 0xFF)
                {
                  if (!(v112 >> 16))
                  {
                    v181[0] = -51;
                    *(_WORD *)&v181[1] = bswap32(v112) >> 16;
                    std::ostream::write();
                    goto LABEL_210;
                  }
                  if (HIDWORD(v112))
                  {
                    v181[0] = -49;
                    *(_QWORD *)&v181[1] = bswap64(v112);
                  }
                  else
                  {
                    v181[0] = -50;
                    *(_DWORD *)&v181[1] = bswap32(v112);
                  }
                }
                else if (v112 > 0x7F)
                {
                  v181[0] = -52;
                  v181[1] = v112;
                }
                else
                {
                  v181[0] = *(v106 - 3);
                }
                std::ostream::write();
              }
LABEL_210:
              v109 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v109 + 40))
              {
                *(_QWORD *)v181 = v109 + 16;
                sub_20E9F3D4C((uint64_t **)v181, *((_DWORD *)v106 - 4));
              }
              else
              {
                v113 = *((_DWORD *)v106 - 4);
                if (v113 > 0xFF)
                {
                  v115 = HIWORD(v113);
                  v116 = bswap32(v113);
                  if (v115)
                  {
                    v181[0] = -50;
                    *(_DWORD *)&v181[1] = v116;
                  }
                  else
                  {
                    v181[0] = -51;
                    *(_WORD *)&v181[1] = HIWORD(v116);
                  }
                }
                else if (v113 > 0x7F)
                {
                  v181[0] = -52;
                  v181[1] = v113;
                }
                else
                {
                  v181[0] = *((_DWORD *)v106 - 4);
                }
                std::ostream::write();
              }
              v110 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v110 + 40))
              {
                *(_QWORD *)v181 = v110 + 16;
                sub_20E9F3D4C((uint64_t **)v181, *((_DWORD *)v106 - 2));
              }
              else
              {
                v114 = *((_DWORD *)v106 - 2);
                if (v114 > 0xFF)
                {
                  v117 = HIWORD(v114);
                  v118 = bswap32(v114);
                  if (v117)
                  {
                    v181[0] = -50;
                    *(_DWORD *)&v181[1] = v118;
                  }
                  else
                  {
                    v181[0] = -51;
                    *(_WORD *)&v181[1] = HIWORD(v118);
                  }
                }
                else if (v114 > 0x7F)
                {
                  v181[0] = -52;
                  v181[1] = v114;
                }
                else
                {
                  v181[0] = *((_DWORD *)v106 - 2);
                }
                std::ostream::write();
              }
              v111 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v111 + 40))
              {
                *(_QWORD *)v181 = v111 + 16;
                sub_20E9F3D4C((uint64_t **)v181, 2u);
              }
              else
              {
                v181[0] = 2;
                std::ostream::write();
              }
              sub_20EADB644(a1, v106, 2u);
              v106 += 17;
            }
          }
          v119 = *(_QWORD *)(v96 + 40) - *(_QWORD *)(v96 + 32);
          v120 = (uint64_t)v119 >> 2;
          v121 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v121 + 40))
          {
            *(_QWORD *)v181 = v121 + 16;
            sub_20E9F472C((uint64_t **)v181, v120);
          }
          else
          {
            if (v119 > 0x3FF)
            {
              if (!(v119 >> 18))
              {
                v181[0] = -51;
                *(_WORD *)&v181[1] = bswap32(v119 >> 2) >> 16;
                std::ostream::write();
                goto LABEL_247;
              }
              if (v119 >> 34)
              {
                v181[0] = -49;
                *(_QWORD *)&v181[1] = bswap64(v120);
              }
              else
              {
                v181[0] = -50;
                *(_DWORD *)&v181[1] = bswap32(v119 >> 2);
              }
            }
            else if (v119 > 0x1FF)
            {
              v181[0] = -52;
              v181[1] = v119 >> 2;
            }
            else
            {
              v181[0] = v119 >> 2;
            }
            std::ostream::write();
          }
LABEL_247:
          v123 = *(unsigned int **)(v96 + 32);
          v122 = *(unsigned int **)(v96 + 40);
          v124 = v122 - v123;
          v125 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v125 + 40))
          {
            *(_QWORD *)v181 = v125 + 16;
            if (v122 != v123)
            {
              v126 = 4 * v124;
              do
              {
                sub_20E9F3D4C((uint64_t **)v181, *v123++);
                v126 -= 4;
              }
              while (v126);
            }
          }
          else if (v122 != v123)
          {
            v127 = 4 * v124;
            do
            {
              v128 = *v123;
              if (*v123 > 0xFF)
              {
                if (HIWORD(v128))
                {
                  v181[0] = -50;
                  *(_DWORD *)&v181[1] = bswap32(v128);
                }
                else
                {
                  v181[0] = -51;
                  *(_WORD *)&v181[1] = bswap32(v128) >> 16;
                }
              }
              else if (v128 > 0x7F)
              {
                v181[0] = -52;
                v181[1] = v128;
              }
              else
              {
                v181[0] = *v123;
              }
              std::ostream::write();
              ++v123;
              v127 -= 4;
            }
            while (v127);
          }
          v96 += 56;
          if (v96 == v97)
            goto LABEL_192;
        }
        if (v102 > 0x7F)
        {
          v181[0] = -52;
          v181[1] = v102;
        }
        else
        {
          v181[0] = -15 * ((uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 3);
        }
LABEL_255:
        std::ostream::write();
        goto LABEL_206;
      }
LABEL_192:
      v98 = (_BYTE *)(v178 + 168);
      v99 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v99 + 40))
      {
        *(_QWORD *)v181 = v99 + 16;
        sub_20E9F4CE4((uint64_t)&v180, (uint64_t **)v181, v98);
      }
      else
      {
        if (*v98)
          v181[0] = -61;
        else
          v181[0] = -62;
        std::ostream::write();
      }
      v129 = (_BYTE *)(v178 + 169);
      v130 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v130 + 40))
      {
        *(_QWORD *)v181 = v130 + 16;
        sub_20E9F4CE4((uint64_t)&v180, (uint64_t **)v181, v129);
      }
      else
      {
        if (*v129)
          v181[0] = -61;
        else
          v181[0] = -62;
        std::ostream::write();
      }
      v178 += 176;
      v31 = a2;
      if (v178 == v176)
        goto LABEL_292;
    }
    while (1)
    {
      v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46[1] - *v46) >> 3);
      v51 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v51 + 40))
      {
        *(_QWORD *)v181 = v51 + 16;
        sub_20E9F472C((uint64_t **)v181, v50);
        goto LABEL_90;
      }
      if (v50 <= 0xFF)
        break;
      if (v50 >> 16)
      {
        if (HIDWORD(v50))
        {
          v181[0] = -49;
          *(_QWORD *)&v181[1] = bswap64(v50);
        }
        else
        {
          v181[0] = -50;
          *(_DWORD *)&v181[1] = bswap32(v50);
        }
        goto LABEL_128;
      }
      v181[0] = -51;
      *(_WORD *)&v181[1] = bswap32(v50) >> 16;
      std::ostream::write();
LABEL_90:
      v52 = v46[1] - *v46;
      if (v52)
      {
        v53 = (unsigned int *)(*v46 + 16);
        for (k = 24 * (v52 / 24); k; k -= 24)
        {
          v55 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v55 + 40))
          {
            *(_QWORD *)v181 = v55 + 16;
            sub_20E9F472C((uint64_t **)v181, *((_QWORD *)v53 - 2));
          }
          else
          {
            v59 = *((_QWORD *)v53 - 2);
            if (v59 > 0xFF)
            {
              if (!(v59 >> 16))
              {
                v181[0] = -51;
                *(_WORD *)&v181[1] = bswap32(v59) >> 16;
                std::ostream::write();
                goto LABEL_96;
              }
              if (HIDWORD(v59))
              {
                v181[0] = -49;
                *(_QWORD *)&v181[1] = bswap64(v59);
              }
              else
              {
                v181[0] = -50;
                *(_DWORD *)&v181[1] = bswap32(v59);
              }
            }
            else if (v59 > 0x7F)
            {
              v181[0] = -52;
              v181[1] = v59;
            }
            else
            {
              v181[0] = *((_QWORD *)v53 - 2);
            }
            std::ostream::write();
          }
LABEL_96:
          v56 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v56 + 40))
          {
            *(_QWORD *)v181 = v56 + 16;
            sub_20E9F3D4C((uint64_t **)v181, *(v53 - 2));
          }
          else
          {
            v60 = *(v53 - 2);
            if (v60 > 0xFF)
            {
              v61 = HIWORD(v60);
              v62 = bswap32(v60);
              if (v61)
              {
                v181[0] = -50;
                *(_DWORD *)&v181[1] = v62;
              }
              else
              {
                v181[0] = -51;
                *(_WORD *)&v181[1] = HIWORD(v62);
              }
            }
            else if (v60 > 0x7F)
            {
              v181[0] = -52;
              v181[1] = v60;
            }
            else
            {
              v181[0] = *(v53 - 2);
            }
            std::ostream::write();
          }
          v57 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v57 + 40))
          {
            *(_QWORD *)v181 = v57 + 16;
            sub_20E9F3D4C((uint64_t **)v181, *v53);
          }
          else
          {
            v58 = *v53;
            if (*v53 > 0xFF)
            {
              if (HIWORD(v58))
              {
                v181[0] = -50;
                *(_DWORD *)&v181[1] = bswap32(v58);
              }
              else
              {
                v181[0] = -51;
                *(_WORD *)&v181[1] = bswap32(v58) >> 16;
              }
            }
            else if (v58 > 0x7F)
            {
              v181[0] = -52;
              v181[1] = v58;
            }
            else
            {
              v181[0] = *v53;
            }
            std::ostream::write();
          }
          v53 += 6;
        }
      }
      v46 += 3;
      if (v46 == v47)
        goto LABEL_85;
    }
    if (v50 > 0x7F)
    {
      v181[0] = -52;
      v181[1] = v50;
    }
    else
    {
      v181[0] = -85 * ((uint64_t)(v46[1] - *v46) >> 3);
    }
LABEL_128:
    std::ostream::write();
    goto LABEL_90;
  }
LABEL_292:
  v131 = (uint64_t)(v31[12] - v31[11]) >> 3;
  v132 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v132 + 40))
  {
    *(_QWORD *)v181 = v132 + 16;
    sub_20E9F472C((uint64_t **)v181, v131);
  }
  else
  {
    sub_20E9F4A34();
  }
  v134 = (unint64_t *)a2[11];
  v133 = (unint64_t *)a2[12];
  v135 = v133 - v134;
  v136 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v136 + 40))
  {
    *(_QWORD *)v181 = v136 + 16;
    if (v133 != v134)
    {
      v137 = 8 * v135;
      do
      {
        sub_20E9F472C((uint64_t **)v181, *v134++);
        v137 -= 8;
      }
      while (v137);
    }
  }
  else if (v133 != v134)
  {
    v138 = 8 * v135;
    do
    {
      sub_20E9F4A34();
      ++v134;
      v138 -= 8;
    }
    while (v138);
  }
  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[15] - a2[14]) >> 3);
  v140 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v140 + 40))
  {
    *(_QWORD *)v181 = v140 + 16;
    sub_20E9F472C((uint64_t **)v181, v139);
  }
  else
  {
    sub_20E9F4A34();
  }
  v141 = (uint64_t *)a2[14];
  v179 = (uint64_t *)a2[15];
  if (v179 != v141)
  {
    while (1)
    {
      v142 = 0x6DB6DB6DB6DB6DB7 * ((v141[1] - *v141) >> 3);
      v143 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v143 + 40))
      {
        *(_QWORD *)v181 = v143 + 16;
        sub_20E9F472C((uint64_t **)v181, v142);
      }
      else
      {
        sub_20E9F4A34();
      }
      v144 = *v141;
      v145 = v141[1];
      if (v145 != *v141)
        break;
LABEL_308:
      v141 += 3;
      if (v141 == v179)
        return;
    }
    while (1)
    {
      v146 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v146 + 40))
      {
        *(_QWORD *)v181 = v146 + 16;
        sub_20E9F472C((uint64_t **)v181, *(_QWORD *)v144);
        goto LABEL_317;
      }
      v150 = *(_QWORD *)v144;
      if (*(_QWORD *)v144 <= 0xFFuLL)
        break;
      if (v150 >> 16)
      {
        if (HIDWORD(v150))
        {
          v181[0] = -49;
          *(_QWORD *)&v181[1] = bswap64(v150);
        }
        else
        {
          v181[0] = -50;
          *(_DWORD *)&v181[1] = bswap32(v150);
        }
        goto LABEL_326;
      }
      v181[0] = -51;
      *(_WORD *)&v181[1] = bswap32(v150) >> 16;
      std::ostream::write();
LABEL_317:
      v147 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v147 + 40))
      {
        *(_QWORD *)v181 = v147 + 16;
        sub_20E9F3D4C((uint64_t **)v181, *(_DWORD *)(v144 + 8));
      }
      else
      {
        v151 = *(_DWORD *)(v144 + 8);
        if (v151 > 0xFF)
        {
          if (HIWORD(v151))
          {
            v181[0] = -50;
            *(_DWORD *)&v181[1] = bswap32(v151);
          }
          else
          {
            v181[0] = -51;
            *(_WORD *)&v181[1] = bswap32(v151) >> 16;
          }
        }
        else if (v151 > 0x7F)
        {
          v181[0] = -52;
          v181[1] = v151;
        }
        else
        {
          v181[0] = *(_DWORD *)(v144 + 8);
        }
        std::ostream::write();
      }
      v148 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v148 + 40))
      {
        *(_QWORD *)v181 = v148 + 16;
        sub_20E9F3D4C((uint64_t **)v181, *(_DWORD *)(v144 + 16));
      }
      else
      {
        v152 = *(_DWORD *)(v144 + 16);
        if (v152 > 0xFF)
        {
          if (HIWORD(v152))
          {
            v181[0] = -50;
            *(_DWORD *)&v181[1] = bswap32(v152);
          }
          else
          {
            v181[0] = -51;
            *(_WORD *)&v181[1] = bswap32(v152) >> 16;
          }
        }
        else if (v152 > 0x7F)
        {
          v181[0] = -52;
          v181[1] = v152;
        }
        else
        {
          v181[0] = *(_DWORD *)(v144 + 16);
        }
        std::ostream::write();
      }
      v149 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v149 + 40))
      {
        *(_QWORD *)v181 = v149 + 16;
        sub_20E9F3D4C((uint64_t **)v181, 1u);
      }
      else
      {
        v181[0] = 1;
        std::ostream::write();
      }
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 40))
      {
        *(_QWORD *)v181 = *(_QWORD *)(a1 + 24) + 16;
        sub_20E9F472C((uint64_t **)v181, *(_QWORD *)(v144 + 24));
        goto LABEL_338;
      }
      v168 = *(_QWORD *)(v144 + 24);
      if (v168 <= 0xFF)
      {
        if (v168 > 0x7F)
        {
          v181[0] = -52;
          v181[1] = v168;
        }
        else
        {
          v181[0] = *(_QWORD *)(v144 + 24);
        }
LABEL_364:
        std::ostream::write();
        goto LABEL_338;
      }
      if (v168 >> 16)
      {
        if (HIDWORD(v168))
        {
          v181[0] = -49;
          *(_QWORD *)&v181[1] = bswap64(v168);
        }
        else
        {
          v181[0] = -50;
          *(_DWORD *)&v181[1] = bswap32(v168);
        }
        goto LABEL_364;
      }
      v181[0] = -51;
      *(_WORD *)&v181[1] = bswap32(v168) >> 16;
      std::ostream::write();
LABEL_338:
      v153 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v153 + 40))
      {
        *(_QWORD *)v181 = v153 + 16;
        sub_20E9F472C((uint64_t **)v181, *(_QWORD *)(v144 + 32));
        goto LABEL_340;
      }
      v169 = *(_QWORD *)(v144 + 32);
      if (v169 <= 0xFF)
      {
        if (v169 > 0x7F)
        {
          v181[0] = -52;
          v181[1] = v169;
        }
        else
        {
          v181[0] = *(_QWORD *)(v144 + 32);
        }
LABEL_368:
        std::ostream::write();
        goto LABEL_340;
      }
      if (v169 >> 16)
      {
        if (HIDWORD(v169))
        {
          v181[0] = -49;
          *(_QWORD *)&v181[1] = bswap64(v169);
        }
        else
        {
          v181[0] = -50;
          *(_DWORD *)&v181[1] = bswap32(v169);
        }
        goto LABEL_368;
      }
      v181[0] = -51;
      *(_WORD *)&v181[1] = bswap32(v169) >> 16;
      std::ostream::write();
LABEL_340:
      v154 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v154 + 40))
      {
        *(_QWORD *)v181 = v154 + 16;
        sub_20E9F472C((uint64_t **)v181, *(_QWORD *)(v144 + 40));
        goto LABEL_342;
      }
      v170 = *(_QWORD *)(v144 + 40);
      if (v170 <= 0xFF)
      {
        if (v170 > 0x7F)
        {
          v181[0] = -52;
          v181[1] = v170;
        }
        else
        {
          v181[0] = *(_QWORD *)(v144 + 40);
        }
LABEL_372:
        std::ostream::write();
        goto LABEL_342;
      }
      if (v170 >> 16)
      {
        if (HIDWORD(v170))
        {
          v181[0] = -49;
          *(_QWORD *)&v181[1] = bswap64(v170);
        }
        else
        {
          v181[0] = -50;
          *(_DWORD *)&v181[1] = bswap32(v170);
        }
        goto LABEL_372;
      }
      v181[0] = -51;
      *(_WORD *)&v181[1] = bswap32(v170) >> 16;
      std::ostream::write();
LABEL_342:
      v155 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v155 + 40))
      {
        *(_QWORD *)v181 = v155 + 16;
        sub_20E9F472C((uint64_t **)v181, *(_QWORD *)(v144 + 48));
      }
      else
      {
        v171 = *(_QWORD *)(v144 + 48);
        if (v171 > 0xFF)
        {
          if (!(v171 >> 16))
          {
            v181[0] = -51;
            *(_WORD *)&v181[1] = bswap32(v171) >> 16;
            std::ostream::write();
            goto LABEL_344;
          }
          if (HIDWORD(v171))
          {
            v181[0] = -49;
            *(_QWORD *)&v181[1] = bswap64(v171);
          }
          else
          {
            v181[0] = -50;
            *(_DWORD *)&v181[1] = bswap32(v171);
          }
        }
        else if (v171 > 0x7F)
        {
          v181[0] = -52;
          v181[1] = v171;
        }
        else
        {
          v181[0] = *(_QWORD *)(v144 + 48);
        }
        std::ostream::write();
      }
LABEL_344:
      v156 = *(_QWORD *)(a1 + 24);
      v157 = *(_QWORD *)(*(_QWORD *)(v156 + 88) - 8);
      v158 = *(_QWORD *)(v156 + 16);
      v159 = *(_QWORD *)(v156 + 64);
      v160 = *(_QWORD *)(v156 + 48);
      if ((unint64_t)(v159 - v160) >= 9)
      {
        v163 = *(char **)(v156 + 56);
      }
      else
      {
        if (v159)
          v161 = 2 * v159;
        else
          v161 = 0x2000;
        v162 = v160 + 9;
        while (v161 < v162)
        {
          v90 = (uint64_t)v161 <= 0;
          v161 *= 2;
          if (v90)
          {
            v161 = v162;
            break;
          }
        }
        v163 = (char *)malloc_type_realloc(*(void **)(v156 + 56), v161, 0xAD6A59EEuLL);
        if (!v163)
        {
          v172 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v173 = std::bad_alloc::bad_alloc(v172);
          __cxa_throw(v173, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        *(_QWORD *)(v156 + 56) = v163;
        *(_QWORD *)(v156 + 64) = v161;
        v160 = *(_QWORD *)(v156 + 48);
      }
      v164 = &v163[v160];
      *v164 = -49;
      *(_QWORD *)(v164 + 1) = bswap64(v158 - v157 - 9);
      v165 = *(_QWORD *)(v156 + 48);
      *(_QWORD *)(v156 + 48) = v165 + 9;
      if (v165 != -9)
        memmove((void *)(*(_QWORD *)(v156 + 24) + v157), *(const void **)(v156 + 56), v165 + 9);
      *(_QWORD *)(v156 + 48) = 0;
      v166 = *(_QWORD *)(v156 + 80);
      v167 = *(_QWORD *)(v156 + 88) - 8;
      *(_QWORD *)(v156 + 88) = v167;
      if (v166 == v167)
      {
        std::ostream::write();
        if (*(_BYTE *)(v156 + 40))
        {
          free(*(void **)(v156 + 24));
          *(_BYTE *)(v156 + 40) = 0;
        }
      }
      v144 += 56;
      if (v144 == v145)
        goto LABEL_308;
    }
    if (v150 > 0x7F)
    {
      v181[0] = -52;
      v181[1] = v150;
    }
    else
    {
      v181[0] = *(_QWORD *)v144;
    }
LABEL_326:
    std::ostream::write();
    goto LABEL_317;
  }
}

void sub_20EAD500C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v4 = a2 + 1;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v29 = (uint64_t *)(v5 + 16);
    sub_20E9F3D4C(&v29, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v29, v5 + 8);
  }
  sub_20EAD5334(a1, v4);
  v6 = (uint64_t)(a2[32] - a2[31]) >> 4;
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
  {
    sub_20E9F4A34();
    v8 = a2[31];
    v9 = a2[32] - v8;
    if (!v9)
      goto LABEL_15;
    goto LABEL_8;
  }
  v29 = (uint64_t *)(v7 + 16);
  sub_20E9F472C(&v29, v6);
  v8 = a2[31];
  v9 = a2[32] - v8;
  if (v9)
  {
LABEL_8:
    v10 = (unint64_t *)(v8 + 8);
    v11 = 16 * (v9 >> 4);
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
        v29 = (uint64_t *)(v12 + 16);
        sub_20E9F472C(&v29, *(v10 - 1));
        v13 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v13 + 40))
          goto LABEL_9;
LABEL_14:
        v29 = (uint64_t *)(v13 + 16);
        v14 = *v10;
        v10 += 2;
        sub_20E9F40B0(&v29, v14);
        v11 -= 16;
        if (!v11)
          break;
      }
      else
      {
        sub_20E9F4A34();
        v13 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v13 + 40))
          goto LABEL_14;
LABEL_9:
        v10 += 2;
        sub_20E9F45EC();
        v11 -= 16;
        if (!v11)
          break;
      }
    }
  }
LABEL_15:
  sub_20EAD9954(a1, a2 + 34);
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v29 = (uint64_t *)(v15 + 16);
    sub_20E9F3D4C(&v29, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v29, v15 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20EADAE9C(a1, (uint64_t)(a2 + 37));
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v16 + 48), *(_QWORD *)(v16 + 16) - v17 - 9);
  v18 = *(_QWORD *)(v16 + 48);
  if (v18)
    memmove((void *)(*(_QWORD *)(v16 + 24) + v17), *(const void **)(v16 + 56), v18);
  *(_QWORD *)(v16 + 48) = 0;
  v19 = *(_QWORD *)(v16 + 80);
  v20 = *(_QWORD *)(v16 + 88) - 8;
  *(_QWORD *)(v16 + 88) = v20;
  if (v19 == v20)
  {
    std::ostream::write();
    if (*(_BYTE *)(v16 + 40))
    {
      free(*(void **)(v16 + 24));
      *(_BYTE *)(v16 + 40) = 0;
    }
  }
  v21 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v21 + 40))
  {
    v29 = (uint64_t *)(v21 + 16);
    sub_20E9F40B0(&v29, a2[42]);
    v22 = (uint64_t)(a2 + 43);
    v23 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v23 + 40))
    {
LABEL_25:
      v29 = (uint64_t *)(v23 + 16);
      sub_20E9F3D4C(&v29, 4u);
      goto LABEL_28;
    }
  }
  else
  {
    sub_20E9F45EC();
    v22 = (uint64_t)(a2 + 43);
    v23 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v23 + 40))
      goto LABEL_25;
  }
  sub_20E9F3FC0((uint64_t)&v29, v23 + 8);
LABEL_28:
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20EADB180(a1, v22, 4u);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(*(_QWORD *)(v24 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v24 + 48), *(_QWORD *)(v24 + 16) - v25 - 9);
  v26 = *(_QWORD *)(v24 + 48);
  if (v26)
    memmove((void *)(*(_QWORD *)(v24 + 24) + v25), *(const void **)(v24 + 56), v26);
  *(_QWORD *)(v24 + 48) = 0;
  v27 = *(_QWORD *)(v24 + 80);
  v28 = *(_QWORD *)(v24 + 88) - 8;
  *(_QWORD *)(v24 + 88) = v28;
  if (v27 == v28)
  {
    std::ostream::write();
    if (*(_BYTE *)(v24 + 40))
    {
      free(*(void **)(v24 + 24));
      *(_BYTE *)(v24 + 40) = 0;
    }
  }
}

_BYTE *sub_20EAD5334(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;

  v4 = (uint64_t)(a2 + 1);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v30 = (uint64_t *)(v5 + 16);
    sub_20E9F3D4C(&v30, 3u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v30, v5 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20EAD56A0(a1, v4, 3);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    v30 = (uint64_t *)(v11 + 16);
    sub_20E9F3D4C(&v30, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v30, v11 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20EAD7FF8(a1, a2 + 14);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v12 + 48), *(_QWORD *)(v12 + 16) - v13 - 9);
  v14 = *(_QWORD *)(v12 + 48);
  if (v14)
    memmove((void *)(*(_QWORD *)(v12 + 24) + v13), *(const void **)(v12 + 56), v14);
  *(_QWORD *)(v12 + 48) = 0;
  v15 = *(_QWORD *)(v12 + 80);
  v16 = *(_QWORD *)(v12 + 88) - 8;
  *(_QWORD *)(v12 + 88) = v16;
  if (v15 == v16)
  {
    std::ostream::write();
    if (*(_BYTE *)(v12 + 40))
    {
      free(*(void **)(v12 + 24));
      *(_BYTE *)(v12 + 40) = 0;
    }
  }
  v17 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(a2[21] - a2[20]) >> 3);
  v18 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v18 + 40))
  {
    v30 = (uint64_t *)(v18 + 16);
    sub_20E9F472C(&v30, v17);
    v19 = a2[20];
    v20 = a2[21] - v19;
    if (!v20)
      goto LABEL_31;
  }
  else
  {
    sub_20E9F4A34();
    v19 = a2[20];
    v20 = a2[21] - v19;
    if (!v20)
      goto LABEL_31;
  }
  v21 = 472 * (v20 / 472);
  do
  {
    v22 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v22 + 40))
    {
      v30 = (uint64_t *)(v22 + 16);
      sub_20E9F3D4C(&v30, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v30, v22 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    sub_20EAD0214(a1, v19, 4u);
    v23 = *(_QWORD *)(a1 + 24);
    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v23 + 48), *(_QWORD *)(v23 + 16) - v24 - 9);
    v25 = *(_QWORD *)(v23 + 48);
    if (v25)
      memmove((void *)(*(_QWORD *)(v23 + 24) + v24), *(const void **)(v23 + 56), v25);
    *(_QWORD *)(v23 + 48) = 0;
    v26 = *(_QWORD *)(v23 + 80);
    v27 = *(_QWORD *)(v23 + 88) - 8;
    *(_QWORD *)(v23 + 88) = v27;
    if (v26 == v27)
    {
      std::ostream::write();
      if (*(_BYTE *)(v23 + 40))
      {
        free(*(void **)(v23 + 24));
        *(_BYTE *)(v23 + 40) = 0;
      }
    }
    v19 += 472;
    v21 -= 472;
  }
  while (v21);
LABEL_31:
  sub_20EAD8BB8(a1, a2 + 23);
  sub_20EAD8EFC(a1, a2 + 26);
  v28 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v28 + 40))
    return (_BYTE *)sub_20E9F4A34();
  v30 = (uint64_t *)(v28 + 16);
  return sub_20E9F472C(&v30, a2[29]);
}

uint64_t sub_20EAD56A0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v32 = (uint64_t *)(v7 + 16);
    sub_20E9F472C(&v32, v6);
    v8 = (_QWORD *)(a2 + 8);
    v9 = *(_QWORD **)a2;
    if (*(_QWORD *)a2 == a2 + 8)
      goto LABEL_5;
  }
  else
  {
    sub_20E9F4A34();
    v8 = (_QWORD *)(a2 + 8);
    v9 = *(_QWORD **)a2;
    if (*(_QWORD *)a2 == a2 + 8)
      goto LABEL_5;
  }
  do
  {
    sub_20EAD5A04(a1, (uint64_t)(v9 + 4));
    v14 = (_QWORD *)v9[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v9[2];
        v16 = *v15 == (_QWORD)v9;
        v9 = v15;
      }
      while (!v16);
    }
    v9 = v15;
  }
  while (v15 != v8);
LABEL_5:
  v10 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    v32 = (uint64_t *)(v11 + 16);
    sub_20E9F472C(&v32, v10);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 32) - v12;
    if (!v13)
      goto LABEL_21;
  }
  else
  {
    sub_20E9F4A34();
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 32) - v12;
    if (!v13)
      goto LABEL_21;
  }
  v17 = 800 * (v13 / 800);
  do
  {
    v18 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v18 + 40))
    {
      v32 = (uint64_t *)(v18 + 16);
      sub_20E9F3D4C(&v32, 3u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v32, v18 + 8);
    }
    sub_20EAD5EAC(a1, v12, 3u);
    v12 += 800;
    v17 -= 800;
  }
  while (v17);
LABEL_21:
  v19 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  v20 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v20 + 40))
  {
    v32 = (uint64_t *)(v20 + 16);
    sub_20E9F472C(&v32, v19);
    v21 = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(a2 + 56) - v21;
    if (!v22)
      goto LABEL_30;
  }
  else
  {
    sub_20E9F4A34();
    v21 = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(a2 + 56) - v21;
    if (!v22)
      goto LABEL_30;
  }
  v23 = 168 * (v22 / 168);
  do
  {
    v24 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v24 + 40))
    {
      v32 = (uint64_t *)(v24 + 16);
      sub_20E9F3D4C(&v32, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v32, v24 + 8);
    }
    sub_20EAD6E78(a1, v21, 5u);
    v21 += 168;
    v23 -= 168;
  }
  while (v23);
LABEL_30:
  v25 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4);
  v26 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v26 + 40))
  {
    v32 = (uint64_t *)(v26 + 16);
    result = (uint64_t)sub_20E9F472C(&v32, v25);
    v28 = *(_QWORD *)(a2 + 72);
    v29 = *(_QWORD *)(a2 + 80) - v28;
    if (!v29)
      goto LABEL_39;
  }
  else
  {
    result = sub_20E9F4A34();
    v28 = *(_QWORD *)(a2 + 72);
    v29 = *(_QWORD *)(a2 + 80) - v28;
    if (!v29)
      goto LABEL_39;
  }
  v30 = 176 * (v29 / 176);
  do
  {
    v31 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v31 + 40))
    {
      v32 = (uint64_t *)(v31 + 16);
      sub_20E9F3D4C(&v32, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v32, v31 + 8);
    }
    result = (uint64_t)sub_20EAD798C(a1, v28, 4u);
    v28 += 176;
    v30 -= 176;
  }
  while (v30);
LABEL_39:
  *(_BYTE *)(a2 + 96) = a3;
  return result;
}

uint64_t sub_20EAD5A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BYTE v32[9];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v32 = v4 + 16;
    sub_20E9F3D4C((uint64_t **)v32, *(_DWORD *)a2);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v32, v4 + 8);
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v32 = v5 + 16;
    sub_20E9F3D4C((uint64_t **)v32, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v32, v5 + 8);
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v32 = v6 + 16;
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 8));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 16));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 24));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 32));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 40));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 48));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 56));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 64));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 72));
  }
  else
  {
    *(_QWORD *)&v32[1] = bswap64(*(_QWORD *)(a2 + 8));
    v32[0] = -53;
    std::ostream::write();
    v7 = *(_QWORD *)(a2 + 16);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v7);
    std::ostream::write();
    v8 = *(_QWORD *)(a2 + 24);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v8);
    std::ostream::write();
    v9 = *(_QWORD *)(a2 + 32);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v9);
    std::ostream::write();
    v10 = *(_QWORD *)(a2 + 40);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v10);
    std::ostream::write();
    v11 = *(_QWORD *)(a2 + 48);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v11);
    std::ostream::write();
    v12 = *(_QWORD *)(a2 + 56);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v12);
    std::ostream::write();
    v13 = *(_QWORD *)(a2 + 64);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v13);
    std::ostream::write();
    v14 = *(_QWORD *)(a2 + 72);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v14);
    std::ostream::write();
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    *(_QWORD *)v32 = v15 + 16;
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 80));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 88));
    sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, (unint64_t *)(a2 + 96));
  }
  else
  {
    *(_QWORD *)&v32[1] = bswap64(*(_QWORD *)(a2 + 80));
    v32[0] = -53;
    std::ostream::write();
    v16 = *(_QWORD *)(a2 + 88);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v16);
    std::ostream::write();
    v17 = *(_QWORD *)(a2 + 96);
    v32[0] = -53;
    *(_QWORD *)&v32[1] = bswap64(v17);
    std::ostream::write();
  }
  v18 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v18 + 40))
  {
    *(_QWORD *)v32 = v18 + 16;
    sub_20E9F3D4C((uint64_t **)v32, 4u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v32, v18 + 8);
  }
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    *(_QWORD *)v32 = v19 + 16;
    sub_20E9F3164((uint64_t **)v32, *(_BYTE *)(a2 + 104));
  }
  else
  {
    v20 = *(char *)(a2 + 104);
    if (v20 < 0)
    {
      v32[0] = -52;
      v32[1] = v20;
    }
    else
    {
      v32[0] = *(_BYTE *)(a2 + 104);
    }
    std::ostream::write();
  }
  v21 = (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3;
  v22 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v22 + 40))
  {
    *(_QWORD *)v32 = v22 + 16;
    result = (uint64_t)sub_20E9F472C((uint64_t **)v32, v21);
  }
  else
  {
    result = sub_20E9F4A34();
  }
  v25 = *(unint64_t **)(a2 + 112);
  v24 = *(unint64_t **)(a2 + 120);
  v26 = v24 - v25;
  v27 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v27 + 40))
  {
    *(_QWORD *)v32 = v27 + 16;
    if (v24 != v25)
    {
      v28 = 8 * v26;
      do
      {
        result = (uint64_t)sub_20E9F4C08((uint64_t)&v31, (uint64_t **)v32, v25++);
        v28 -= 8;
      }
      while (v28);
    }
  }
  else if (v24 != v25)
  {
    v29 = 8 * v26;
    do
    {
      v30 = *v25;
      v32[0] = -53;
      *(_QWORD *)&v32[1] = bswap64(v30);
      result = std::ostream::write();
      ++v25;
      v29 -= 8;
    }
    while (v29);
  }
  return result;
}

uint64_t **sub_20EAD5EAC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  uint64_t j;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *k;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  size_t v45;
  BOOL v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  size_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  size_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  size_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t **result;
  unint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  std::bad_alloc *v96;
  std::bad_alloc *v97;
  std::bad_alloc *exception;
  std::bad_alloc *v99;
  char v101;
  _BYTE v102[9];
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v102 = v5 + 16;
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)a2);
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 8));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 16));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 24));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 32));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 40));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 48));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 56));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 64));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 72));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 80));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 88));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 96));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 104));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 112));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 120));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 128));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 136));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 144));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 152));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 160));
  }
  else
  {
    *(_QWORD *)&v102[1] = bswap64(*(_QWORD *)a2);
    v102[0] = -53;
    std::ostream::write();
    v6 = *(_QWORD *)(a2 + 8);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v6);
    std::ostream::write();
    v7 = *(_QWORD *)(a2 + 16);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v7);
    std::ostream::write();
    v8 = *(_QWORD *)(a2 + 24);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v8);
    std::ostream::write();
    v9 = *(_QWORD *)(a2 + 32);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v9);
    std::ostream::write();
    v10 = *(_QWORD *)(a2 + 40);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v10);
    std::ostream::write();
    v11 = *(_QWORD *)(a2 + 48);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v11);
    std::ostream::write();
    v12 = *(_QWORD *)(a2 + 56);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v12);
    std::ostream::write();
    v13 = *(_QWORD *)(a2 + 64);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v13);
    std::ostream::write();
    v14 = *(_QWORD *)(a2 + 72);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v14);
    std::ostream::write();
    v15 = *(_QWORD *)(a2 + 80);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v15);
    std::ostream::write();
    v16 = *(_QWORD *)(a2 + 88);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v16);
    std::ostream::write();
    v17 = *(_QWORD *)(a2 + 96);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v17);
    std::ostream::write();
    v18 = *(_QWORD *)(a2 + 104);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v18);
    std::ostream::write();
    v19 = *(_QWORD *)(a2 + 112);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v19);
    std::ostream::write();
    v20 = *(_QWORD *)(a2 + 120);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v20);
    std::ostream::write();
    v21 = *(_QWORD *)(a2 + 128);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v21);
    std::ostream::write();
    v22 = *(_QWORD *)(a2 + 136);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v22);
    std::ostream::write();
    v23 = *(_QWORD *)(a2 + 144);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v23);
    std::ostream::write();
    v24 = *(_QWORD *)(a2 + 152);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v24);
    std::ostream::write();
    v25 = *(_QWORD *)(a2 + 160);
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v25);
    std::ostream::write();
  }
  v26 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v26 + 40))
  {
    *(_QWORD *)v102 = v26 + 16;
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 168));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 176));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 184));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 192));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 200));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 208));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 216));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 224));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 232));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 240));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 248));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 256));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 264));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 272));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 280));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 288));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 296));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 304));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 312));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 320));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 328));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 336));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 344));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 352));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 360));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 368));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 376));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 384));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 392));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 400));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 408));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 416));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 424));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 432));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 440));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 448));
  }
  else
  {
    for (i = 168; i != 456; i += 8)
    {
      v28 = *(_QWORD *)(a2 + i);
      v102[0] = -53;
      *(_QWORD *)&v102[1] = bswap64(v28);
      std::ostream::write();
    }
  }
  v29 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v29 + 40))
  {
    *(_QWORD *)v102 = v29 + 16;
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 456));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 464));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 472));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 480));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 488));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 496));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 504));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 512));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 520));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 528));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 536));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 544));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 552));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 560));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 568));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 576));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 584));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 592));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 600));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 608));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 616));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 624));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 632));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 640));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 648));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 656));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 664));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 672));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 680));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 688));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 696));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 704));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 712));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 720));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 728));
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, (unint64_t *)(a2 + 736));
  }
  else
  {
    for (j = 0; j != 288; j += 8)
    {
      v31 = *(_QWORD *)(a2 + 456 + j);
      v102[0] = -53;
      *(_QWORD *)&v102[1] = bswap64(v31);
      std::ostream::write();
    }
  }
  v32 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 752) - *(_QWORD *)(a2 + 744)) >> 3);
  v33 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v33 + 40))
  {
    *(_QWORD *)v102 = v33 + 16;
    sub_20E9F472C((uint64_t **)v102, v32);
  }
  else
  {
    sub_20E9F4A34();
  }
  v34 = *(unint64_t **)(a2 + 744);
  for (k = *(unint64_t **)(a2 + 752); v34 != k; v34 += 7)
  {
    v38 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v38 + 40))
    {
      *(_QWORD *)v102 = v38 + 16;
      sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, v34);
    }
    else
    {
      v39 = *v34;
      v102[0] = -53;
      *(_QWORD *)&v102[1] = bswap64(v39);
      std::ostream::write();
    }
    v40 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v40 + 40))
    {
      v41 = v34[1];
      v42 = *(_QWORD *)(v40 + 32);
      v43 = *(_QWORD *)(v40 + 16);
      if ((unint64_t)(v42 - v43) >= 9)
      {
        v47 = *(char **)(v40 + 24);
      }
      else
      {
        if (v42)
          v44 = 2 * v42;
        else
          v44 = 0x2000;
        v45 = v43 + 9;
        while (v44 < v45)
        {
          v46 = (uint64_t)v44 <= 0;
          v44 *= 2;
          if (v46)
          {
            v44 = v45;
            break;
          }
        }
        v47 = (char *)malloc_type_realloc(*(void **)(v40 + 24), v44, 0xAD6A59EEuLL);
        if (!v47)
        {
LABEL_109:
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v99 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v99, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        *(_QWORD *)(v40 + 24) = v47;
        *(_QWORD *)(v40 + 32) = v44;
        v43 = *(_QWORD *)(v40 + 16);
      }
      v57 = &v47[v43];
      *v57 = -53;
      *(_QWORD *)(v57 + 1) = bswap64(v41);
      v58 = *(_QWORD *)(v40 + 16);
      v59 = v58 + 9;
      *(_QWORD *)(v40 + 16) = v58 + 9;
      v60 = v34[2];
      v61 = *(_QWORD *)(v40 + 32);
      if ((unint64_t)(v61 - (v58 + 9)) >= 9)
      {
        v63 = *(char **)(v40 + 24);
      }
      else
      {
        if (v61)
          v62 = 2 * v61;
        else
          v62 = 0x2000;
        while (v62 < v58 + 18)
        {
          v46 = (uint64_t)v62 <= 0;
          v62 *= 2;
          if (v46)
          {
            v62 = v58 + 18;
            break;
          }
        }
        v63 = (char *)malloc_type_realloc(*(void **)(v40 + 24), v62, 0xAD6A59EEuLL);
        if (!v63)
          goto LABEL_109;
        *(_QWORD *)(v40 + 24) = v63;
        *(_QWORD *)(v40 + 32) = v62;
        v59 = *(_QWORD *)(v40 + 16);
      }
      v64 = &v63[v59];
      *v64 = -53;
      *(_QWORD *)(v64 + 1) = bswap64(v60);
      v65 = *(_QWORD *)(v40 + 16);
      v66 = v65 + 9;
      *(_QWORD *)(v40 + 16) = v65 + 9;
      v67 = v34[3];
      v68 = *(_QWORD *)(v40 + 32);
      if ((unint64_t)(v68 - (v65 + 9)) >= 9)
      {
        v70 = *(char **)(v40 + 24);
      }
      else
      {
        if (v68)
          v69 = 2 * v68;
        else
          v69 = 0x2000;
        while (v69 < v65 + 18)
        {
          v46 = (uint64_t)v69 <= 0;
          v69 *= 2;
          if (v46)
          {
            v69 = v65 + 18;
            break;
          }
        }
        v70 = (char *)malloc_type_realloc(*(void **)(v40 + 24), v69, 0xAD6A59EEuLL);
        if (!v70)
          goto LABEL_109;
        *(_QWORD *)(v40 + 24) = v70;
        *(_QWORD *)(v40 + 32) = v69;
        v66 = *(_QWORD *)(v40 + 16);
      }
      v71 = &v70[v66];
      *v71 = -53;
      *(_QWORD *)(v71 + 1) = bswap64(v67);
      *(_QWORD *)(v40 + 16) += 9;
      v50 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v50 + 40))
      {
LABEL_71:
        *(_QWORD *)&v102[1] = bswap64(v34[4]);
        v102[0] = -53;
        std::ostream::write();
        v72 = v34[5];
        v102[0] = -53;
        *(_QWORD *)&v102[1] = bswap64(v72);
        std::ostream::write();
        v73 = v34[6];
        v102[0] = -53;
        *(_QWORD *)&v102[1] = bswap64(v73);
        std::ostream::write();
        continue;
      }
    }
    else
    {
      *(_QWORD *)&v102[1] = bswap64(v34[1]);
      v102[0] = -53;
      std::ostream::write();
      v48 = v34[2];
      v102[0] = -53;
      *(_QWORD *)&v102[1] = bswap64(v48);
      std::ostream::write();
      v49 = v34[3];
      v102[0] = -53;
      *(_QWORD *)&v102[1] = bswap64(v49);
      std::ostream::write();
      v50 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v50 + 40))
        goto LABEL_71;
    }
    v51 = v34[4];
    v52 = *(_QWORD *)(v50 + 32);
    v53 = *(_QWORD *)(v50 + 16);
    if ((unint64_t)(v52 - v53) >= 9)
    {
      v56 = *(char **)(v50 + 24);
    }
    else
    {
      if (v52)
        v54 = 2 * v52;
      else
        v54 = 0x2000;
      v55 = v53 + 9;
      while (v54 < v55)
      {
        v46 = (uint64_t)v54 <= 0;
        v54 *= 2;
        if (v46)
        {
          v54 = v55;
          break;
        }
      }
      v56 = (char *)malloc_type_realloc(*(void **)(v50 + 24), v54, 0xAD6A59EEuLL);
      if (!v56)
      {
LABEL_108:
        v96 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v97 = std::bad_alloc::bad_alloc(v96);
        __cxa_throw(v97, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *(_QWORD *)(v50 + 24) = v56;
      *(_QWORD *)(v50 + 32) = v54;
      v53 = *(_QWORD *)(v50 + 16);
    }
    v74 = &v56[v53];
    *v74 = -53;
    *(_QWORD *)(v74 + 1) = bswap64(v51);
    v75 = *(_QWORD *)(v50 + 16);
    v76 = v75 + 9;
    *(_QWORD *)(v50 + 16) = v75 + 9;
    v77 = v34[5];
    v78 = *(_QWORD *)(v50 + 32);
    if ((unint64_t)(v78 - (v75 + 9)) >= 9)
    {
      v80 = *(char **)(v50 + 24);
    }
    else
    {
      if (v78)
        v79 = 2 * v78;
      else
        v79 = 0x2000;
      while (v79 < v75 + 18)
      {
        v46 = (uint64_t)v79 <= 0;
        v79 *= 2;
        if (v46)
        {
          v79 = v75 + 18;
          break;
        }
      }
      v80 = (char *)malloc_type_realloc(*(void **)(v50 + 24), v79, 0xAD6A59EEuLL);
      if (!v80)
        goto LABEL_108;
      *(_QWORD *)(v50 + 24) = v80;
      *(_QWORD *)(v50 + 32) = v79;
      v76 = *(_QWORD *)(v50 + 16);
    }
    v81 = &v80[v76];
    *v81 = -53;
    *(_QWORD *)(v81 + 1) = bswap64(v77);
    v82 = *(_QWORD *)(v50 + 16);
    v83 = v82 + 9;
    *(_QWORD *)(v50 + 16) = v82 + 9;
    v84 = v34[6];
    v85 = *(_QWORD *)(v50 + 32);
    if ((unint64_t)(v85 - (v82 + 9)) >= 9)
    {
      v36 = *(char **)(v50 + 24);
    }
    else
    {
      if (v85)
        v86 = 2 * v85;
      else
        v86 = 0x2000;
      while (v86 < v82 + 18)
      {
        v46 = (uint64_t)v86 <= 0;
        v86 *= 2;
        if (v46)
        {
          v86 = v82 + 18;
          break;
        }
      }
      v36 = (char *)malloc_type_realloc(*(void **)(v50 + 24), v86, 0xAD6A59EEuLL);
      if (!v36)
        goto LABEL_108;
      *(_QWORD *)(v50 + 24) = v36;
      *(_QWORD *)(v50 + 32) = v86;
      v83 = *(_QWORD *)(v50 + 16);
    }
    v37 = &v36[v83];
    *v37 = -53;
    *(_QWORD *)(v37 + 1) = bswap64(v84);
    *(_QWORD *)(v50 + 16) += 9;
  }
  v87 = (unint64_t *)(a2 + 768);
  v88 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v88 + 40))
  {
    *(_QWORD *)v102 = v88 + 16;
    sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, v87);
  }
  else
  {
    v89 = *v87;
    v102[0] = -53;
    *(_QWORD *)&v102[1] = bswap64(v89);
    std::ostream::write();
  }
  v90 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v90 + 40))
  {
    *(_QWORD *)v102 = v90 + 16;
    sub_20E9F472C((uint64_t **)v102, *(_QWORD *)(a2 + 784));
  }
  else
  {
    sub_20E9F4A34();
  }
  v91 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v91 + 40))
  {
    *(_QWORD *)v102 = v91 + 16;
    result = (uint64_t **)sub_20E9F3D4C((uint64_t **)v102, *(_DWORD *)(a2 + 792));
  }
  else
  {
    result = (uint64_t **)sub_20E9F3FC0((uint64_t)v102, v91 + 8);
  }
  if (a3 >= 3)
  {
    v93 = (unint64_t *)(a2 + 776);
    v94 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v94 + 40))
    {
      *(_QWORD *)v102 = v94 + 16;
      return sub_20E9F4C08((uint64_t)&v101, (uint64_t **)v102, v93);
    }
    else
    {
      v95 = *v93;
      v102[0] = -53;
      *(_QWORD *)&v102[1] = bswap64(v95);
      return (uint64_t **)std::ostream::write();
    }
  }
  return result;
}

uint64_t sub_20EAD6E78(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *i;
  uint64_t v16;
  uint64_t j;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[9];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v54 = v6 + 16;
    sub_20E9F472C((uint64_t **)v54, *(_QWORD *)a2);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
LABEL_3:
      *(_QWORD *)v54 = v7 + 16;
      sub_20E9F3D4C((uint64_t **)v54, *(_DWORD *)(a2 + 8));
      goto LABEL_6;
    }
  }
  else
  {
    sub_20E9F4A34();
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
  }
  sub_20E9F3FC0((uint64_t)v54, v7 + 8);
LABEL_6:
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_QWORD *)v54 = v8 + 16;
    sub_20E9F3D4C((uint64_t **)v54, *(_DWORD *)(a2 + 16));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v54, v8 + 8);
  }
  v9 = (unint64_t *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v10 + 40))
  {
    *(_QWORD *)v54 = v10 + 16;
    sub_20E9F4C08((uint64_t)&v53, (uint64_t **)v54, v9);
  }
  else
  {
    v11 = *v9;
    v54[0] = -53;
    *(_QWORD *)&v54[1] = bswap64(v11);
    std::ostream::write();
  }
  sub_20EAD74D0(a1, (uint64_t *)(a2 + 32));
  v12 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 6;
  v13 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v13 + 40))
  {
    *(_QWORD *)v54 = v13 + 16;
    sub_20E9F472C((uint64_t **)v54, v12);
  }
  else
  {
    sub_20E9F4A34();
  }
  v14 = *(unsigned int **)(a2 + 56);
  for (i = *(unsigned int **)(a2 + 64); v14 != i; v14 += 16)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
    {
      *(_QWORD *)v54 = v16 + 16;
      sub_20E9F3D4C((uint64_t **)v54, *v14);
      sub_20E9F3D4C((uint64_t **)v54, v14[1]);
      sub_20E9F3D4C((uint64_t **)v54, v14[2]);
      sub_20E9F3D4C((uint64_t **)v54, v14[3]);
      sub_20E9F3D4C((uint64_t **)v54, v14[4]);
      sub_20E9F3D4C((uint64_t **)v54, v14[5]);
      sub_20E9F3D4C((uint64_t **)v54, v14[6]);
      sub_20E9F3D4C((uint64_t **)v54, v14[7]);
      sub_20E9F3D4C((uint64_t **)v54, v14[8]);
      sub_20E9F3D4C((uint64_t **)v54, v14[9]);
      sub_20E9F3D4C((uint64_t **)v54, v14[10]);
      sub_20E9F3D4C((uint64_t **)v54, v14[11]);
      sub_20E9F3D4C((uint64_t **)v54, v14[12]);
      sub_20E9F3D4C((uint64_t **)v54, v14[13]);
      sub_20E9F3D4C((uint64_t **)v54, v14[14]);
      sub_20E9F3D4C((uint64_t **)v54, v14[15]);
    }
    else
    {
      for (j = 0; j != 16; ++j)
      {
        v18 = v14[j];
        if (v18 > 0xFF)
        {
          v19 = HIWORD(v18);
          v20 = bswap32(v18);
          if (v19)
          {
            v54[0] = -50;
            *(_DWORD *)&v54[1] = v20;
          }
          else
          {
            v54[0] = -51;
            *(_WORD *)&v54[1] = HIWORD(v20);
          }
        }
        else if (v18 > 0x7F)
        {
          v54[0] = -52;
          v54[1] = v18;
        }
        else
        {
          v54[0] = v14[j];
        }
        std::ostream::write();
      }
    }
  }
  v21 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v21 + 40))
  {
    *(_QWORD *)v54 = v21 + 16;
    sub_20E9F3D4C((uint64_t **)v54, 4u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v54, v21 + 8);
  }
  v22 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v22 + 40))
  {
    *(_QWORD *)v54 = v22 + 16;
    sub_20E9F3164((uint64_t **)v54, *(_BYTE *)(a2 + 80));
  }
  else
  {
    v23 = *(char *)(a2 + 80);
    if (v23 < 0)
    {
      v54[0] = -52;
      v54[1] = v23;
    }
    else
    {
      v54[0] = *(_BYTE *)(a2 + 80);
    }
    std::ostream::write();
  }
  v24 = (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3;
  v25 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v25 + 40))
  {
    *(_QWORD *)v54 = v25 + 16;
    sub_20E9F472C((uint64_t **)v54, v24);
  }
  else
  {
    sub_20E9F4A34();
  }
  v27 = *(unint64_t **)(a2 + 88);
  v26 = *(unint64_t **)(a2 + 96);
  v28 = v26 - v27;
  v29 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v29 + 40))
  {
    *(_QWORD *)v54 = v29 + 16;
    if (v26 != v27)
    {
      v30 = 8 * v28;
      do
      {
        sub_20E9F4C08((uint64_t)&v53, (uint64_t **)v54, v27++);
        v30 -= 8;
      }
      while (v30);
    }
  }
  else if (v26 != v27)
  {
    v31 = 8 * v28;
    do
    {
      v32 = *v27;
      v54[0] = -53;
      *(_QWORD *)&v54[1] = bswap64(v32);
      std::ostream::write();
      ++v27;
      v31 -= 8;
    }
    while (v31);
  }
  v33 = (_BYTE *)(a2 + 112);
  v34 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v34 + 40))
  {
    *(_QWORD *)v54 = v34 + 16;
    result = (uint64_t)sub_20E9F4CE4((uint64_t)&v53, (uint64_t **)v54, v33);
  }
  else
  {
    if (*v33)
      v54[0] = -61;
    else
      v54[0] = -62;
    result = std::ostream::write();
  }
  if (a3 >= 4)
  {
    v36 = (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3;
    v37 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v37 + 40))
    {
      *(_QWORD *)v54 = v37 + 16;
      result = (uint64_t)sub_20E9F472C((uint64_t **)v54, v36);
    }
    else
    {
      result = sub_20E9F4A34();
    }
    v39 = *(unint64_t **)(a2 + 120);
    v38 = *(unint64_t **)(a2 + 128);
    v40 = v38 - v39;
    v41 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v41 + 40))
    {
      *(_QWORD *)v54 = v41 + 16;
      if (v38 != v39)
      {
        v42 = 8 * v40;
        do
        {
          result = (uint64_t)sub_20E9F472C((uint64_t **)v54, *v39++);
          v42 -= 8;
        }
        while (v42);
      }
    }
    else if (v38 != v39)
    {
      v43 = 8 * v40;
      do
      {
        result = sub_20E9F4A34();
        ++v39;
        v43 -= 8;
      }
      while (v43);
    }
    if (a3 != 4)
    {
      v44 = (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2;
      v45 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v45 + 40))
      {
        *(_QWORD *)v54 = v45 + 16;
        result = (uint64_t)sub_20E9F472C((uint64_t **)v54, v44);
      }
      else
      {
        result = sub_20E9F4A34();
      }
      v47 = *(unsigned int **)(a2 + 144);
      v46 = *(unsigned int **)(a2 + 152);
      v48 = v46 - v47;
      v49 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v49 + 40))
      {
        *(_QWORD *)v54 = v49 + 16;
        if (v46 != v47)
        {
          v50 = 4 * v48;
          do
          {
            result = (uint64_t)sub_20E9F3D4C((uint64_t **)v54, *v47++);
            v50 -= 4;
          }
          while (v50);
        }
      }
      else if (v46 != v47)
      {
        v51 = v49 + 8;
        v52 = 4 * v48;
        do
        {
          result = sub_20E9F3FC0((uint64_t)v54, v51);
          ++v47;
          v52 -= 4;
        }
        while (v52);
      }
    }
  }
  return result;
}

uint64_t sub_20EAD74D0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  std::bad_alloc *exception;
  std::bad_alloc *v48;
  std::bad_alloc *v49;
  std::bad_alloc *v50;
  char v51;
  _BYTE v52[9];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    result = sub_20E9F4A34();
    v7 = *a2;
    v8 = a2[1];
    if (v8 == *a2)
      return result;
    while (1)
    {
LABEL_8:
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        *(_QWORD *)v52 = v10 + 16;
        sub_20E9F3D4C((uint64_t **)v52, 2u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v52, v10 + 8);
      }
      v11 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v11 + 40))
      {
        *(_QWORD *)v52 = v11 + 16;
        sub_20E9F3D4C((uint64_t **)v52, *(_DWORD *)v7);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v52, v11 + 8);
      }
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
        v13 = *(_QWORD *)(v7 + 8);
        v14 = *(_QWORD *)(v12 + 32);
        v15 = *(_QWORD *)(v12 + 16);
        if ((unint64_t)(v14 - v15) >= 9)
        {
          v19 = *(char **)(v12 + 24);
        }
        else
        {
          if (v14)
            v16 = 2 * v14;
          else
            v16 = 0x2000;
          v17 = v15 + 9;
          while (v16 < v17)
          {
            v18 = (uint64_t)v16 <= 0;
            v16 *= 2;
            if (v18)
            {
              v16 = v17;
              break;
            }
          }
          v19 = (char *)malloc_type_realloc(*(void **)(v12 + 24), v16, 0xAD6A59EEuLL);
          if (!v19)
          {
LABEL_68:
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v48 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v48, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v12 + 24) = v19;
          *(_QWORD *)(v12 + 32) = v16;
          v15 = *(_QWORD *)(v12 + 16);
        }
        v28 = &v19[v15];
        *v28 = -53;
        *(_QWORD *)(v28 + 1) = bswap64(v13);
        v29 = *(_QWORD *)(v12 + 16);
        v30 = v29 + 9;
        *(_QWORD *)(v12 + 16) = v29 + 9;
        v31 = *(_QWORD *)(v7 + 16);
        v32 = *(_QWORD *)(v12 + 32);
        if ((unint64_t)(v32 - (v29 + 9)) >= 9)
        {
          v34 = *(char **)(v12 + 24);
        }
        else
        {
          if (v32)
            v33 = 2 * v32;
          else
            v33 = 0x2000;
          while (v33 < v29 + 18)
          {
            v18 = (uint64_t)v33 <= 0;
            v33 *= 2;
            if (v18)
            {
              v33 = v29 + 18;
              break;
            }
          }
          v34 = (char *)malloc_type_realloc(*(void **)(v12 + 24), v33, 0xAD6A59EEuLL);
          if (!v34)
            goto LABEL_68;
          *(_QWORD *)(v12 + 24) = v34;
          *(_QWORD *)(v12 + 32) = v33;
          v30 = *(_QWORD *)(v12 + 16);
        }
        v35 = &v34[v30];
        *v35 = -53;
        *(_QWORD *)(v35 + 1) = bswap64(v31);
        *(_QWORD *)(v12 + 16) += 9;
        v21 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v21 + 40))
        {
LABEL_51:
          *(_QWORD *)&v52[1] = bswap64(*(_QWORD *)(v7 + 24));
          v52[0] = -53;
          std::ostream::write();
          v36 = *(_QWORD *)(v7 + 32);
          v52[0] = -53;
          *(_QWORD *)&v52[1] = bswap64(v36);
          std::ostream::write();
          v37 = (unint64_t *)(v7 + 40);
          v38 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v38 + 40))
            goto LABEL_66;
          goto LABEL_6;
        }
      }
      else
      {
        *(_QWORD *)&v52[1] = bswap64(*(_QWORD *)(v7 + 8));
        v52[0] = -53;
        std::ostream::write();
        v20 = *(_QWORD *)(v7 + 16);
        v52[0] = -53;
        *(_QWORD *)&v52[1] = bswap64(v20);
        std::ostream::write();
        v21 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v21 + 40))
          goto LABEL_51;
      }
      v22 = *(_QWORD *)(v7 + 24);
      v23 = *(_QWORD *)(v21 + 32);
      v24 = *(_QWORD *)(v21 + 16);
      if ((unint64_t)(v23 - v24) >= 9)
      {
        v27 = *(char **)(v21 + 24);
      }
      else
      {
        if (v23)
          v25 = 2 * v23;
        else
          v25 = 0x2000;
        v26 = v24 + 9;
        while (v25 < v26)
        {
          v18 = (uint64_t)v25 <= 0;
          v25 *= 2;
          if (v18)
          {
            v25 = v26;
            break;
          }
        }
        v27 = (char *)malloc_type_realloc(*(void **)(v21 + 24), v25, 0xAD6A59EEuLL);
        if (!v27)
        {
LABEL_69:
          v49 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v50 = std::bad_alloc::bad_alloc(v49);
          __cxa_throw(v50, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        *(_QWORD *)(v21 + 24) = v27;
        *(_QWORD *)(v21 + 32) = v25;
        v24 = *(_QWORD *)(v21 + 16);
      }
      v39 = &v27[v24];
      *v39 = -53;
      *(_QWORD *)(v39 + 1) = bswap64(v22);
      v40 = *(_QWORD *)(v21 + 16);
      v41 = v40 + 9;
      *(_QWORD *)(v21 + 16) = v40 + 9;
      v42 = *(_QWORD *)(v7 + 32);
      v43 = *(_QWORD *)(v21 + 32);
      if ((unint64_t)(v43 - (v40 + 9)) >= 9)
      {
        v45 = *(char **)(v21 + 24);
      }
      else
      {
        if (v43)
          v44 = 2 * v43;
        else
          v44 = 0x2000;
        while (v44 < v40 + 18)
        {
          v18 = (uint64_t)v44 <= 0;
          v44 *= 2;
          if (v18)
          {
            v44 = v40 + 18;
            break;
          }
        }
        v45 = (char *)malloc_type_realloc(*(void **)(v21 + 24), v44, 0xAD6A59EEuLL);
        if (!v45)
          goto LABEL_69;
        *(_QWORD *)(v21 + 24) = v45;
        *(_QWORD *)(v21 + 32) = v44;
        v41 = *(_QWORD *)(v21 + 16);
      }
      v46 = &v45[v41];
      *v46 = -53;
      *(_QWORD *)(v46 + 1) = bswap64(v42);
      *(_QWORD *)(v21 + 16) += 9;
      v37 = (unint64_t *)(v7 + 40);
      v38 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v38 + 40))
      {
LABEL_66:
        *(_QWORD *)v52 = v38 + 16;
        result = (uint64_t)sub_20E9F4C08((uint64_t)&v51, (uint64_t **)v52, v37);
        goto LABEL_7;
      }
LABEL_6:
      v9 = *v37;
      v52[0] = -53;
      *(_QWORD *)&v52[1] = bswap64(v9);
      result = std::ostream::write();
LABEL_7:
      v7 += 48;
      if (v7 == v8)
        return result;
    }
  }
  *(_QWORD *)v52 = v5 + 16;
  result = (uint64_t)sub_20E9F472C((uint64_t **)v52, v4);
  v7 = *a2;
  v8 = a2[1];
  if (v8 != *a2)
    goto LABEL_8;
  return result;
}

uint64_t **sub_20EAD798C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **result;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  char v39;
  _BYTE v40[9];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v40 = v6 + 16;
    sub_20E9F472C((uint64_t **)v40, *(_QWORD *)a2);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
LABEL_3:
      *(_QWORD *)v40 = v7 + 16;
      sub_20E9F3D4C((uint64_t **)v40, *(_DWORD *)(a2 + 8));
      goto LABEL_6;
    }
  }
  else
  {
    sub_20E9F4A34();
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
  }
  sub_20E9F3FC0((uint64_t)v40, v7 + 8);
LABEL_6:
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_QWORD *)v40 = v8 + 16;
    sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 16));
    sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 24));
    sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 32));
  }
  else
  {
    *(_QWORD *)&v40[1] = bswap64(*(_QWORD *)(a2 + 16));
    v40[0] = -53;
    std::ostream::write();
    v9 = *(_QWORD *)(a2 + 24);
    v40[0] = -53;
    *(_QWORD *)&v40[1] = bswap64(v9);
    std::ostream::write();
    v10 = *(_QWORD *)(a2 + 32);
    v40[0] = -53;
    *(_QWORD *)&v40[1] = bswap64(v10);
    std::ostream::write();
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    *(_QWORD *)v40 = v11 + 16;
    sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 40));
    sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 48));
    sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 56));
  }
  else
  {
    *(_QWORD *)&v40[1] = bswap64(*(_QWORD *)(a2 + 40));
    v40[0] = -53;
    std::ostream::write();
    v12 = *(_QWORD *)(a2 + 48);
    v40[0] = -53;
    *(_QWORD *)&v40[1] = bswap64(v12);
    std::ostream::write();
    v13 = *(_QWORD *)(a2 + 56);
    v40[0] = -53;
    *(_QWORD *)&v40[1] = bswap64(v13);
    std::ostream::write();
  }
  if (*(_BYTE *)(a2 + 136))
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v14 + 40))
    {
      *(_QWORD *)v40 = v14 + 16;
      sub_20E9F3164((uint64_t **)v40, 1);
    }
    else
    {
      v40[0] = 1;
      std::ostream::write();
    }
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
    {
      *(_QWORD *)v40 = v16 + 16;
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 64));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 72));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 80));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 88));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 96));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 104));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 112));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 120));
      sub_20E9F4C08((uint64_t)&v39, (uint64_t **)v40, (unint64_t *)(a2 + 128));
    }
    else
    {
      *(_QWORD *)&v40[1] = bswap64(*(_QWORD *)(a2 + 64));
      v40[0] = -53;
      std::ostream::write();
      v17 = *(_QWORD *)(a2 + 72);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v17);
      std::ostream::write();
      v18 = *(_QWORD *)(a2 + 80);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v18);
      std::ostream::write();
      v19 = *(_QWORD *)(a2 + 88);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v19);
      std::ostream::write();
      v20 = *(_QWORD *)(a2 + 96);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v20);
      std::ostream::write();
      v21 = *(_QWORD *)(a2 + 104);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v21);
      std::ostream::write();
      v22 = *(_QWORD *)(a2 + 112);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v22);
      std::ostream::write();
      v23 = *(_QWORD *)(a2 + 120);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v23);
      std::ostream::write();
      v24 = *(_QWORD *)(a2 + 128);
      v40[0] = -53;
      *(_QWORD *)&v40[1] = bswap64(v24);
      std::ostream::write();
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v15 + 40))
    {
      *(_QWORD *)v40 = v15 + 16;
      sub_20E9F3164((uint64_t **)v40, 0);
    }
    else
    {
      v40[0] = 0;
      std::ostream::write();
    }
  }
  v25 = (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3;
  v26 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v26 + 40))
  {
    *(_QWORD *)v40 = v26 + 16;
    result = (uint64_t **)sub_20E9F472C((uint64_t **)v40, v25);
  }
  else
  {
    result = (uint64_t **)sub_20E9F4A34();
  }
  v28 = *(_QWORD *)(a2 + 144);
  v29 = *(_QWORD *)(a2 + 152) - v28;
  if (v29)
  {
    v30 = (unsigned int *)(v28 + 4);
    v31 = 8 * (v29 >> 3);
    do
    {
      v32 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v32 + 40))
      {
        *(_QWORD *)v40 = v32 + 16;
        sub_20E9F3D4C((uint64_t **)v40, *(v30 - 1));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v40, v32 + 8);
      }
      v33 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v33 + 40))
      {
        *(_QWORD *)v40 = v33 + 16;
        result = (uint64_t **)sub_20E9F3D4C((uint64_t **)v40, *v30);
      }
      else
      {
        result = (uint64_t **)sub_20E9F3FC0((uint64_t)v40, v33 + 8);
      }
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
  }
  if (a3 >= 2)
  {
    v34 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v34 + 40))
    {
      *(_QWORD *)v40 = v34 + 16;
      result = (uint64_t **)sub_20E9F3D4C((uint64_t **)v40, *(_DWORD *)(a2 + 168));
    }
    else
    {
      result = (uint64_t **)sub_20E9F3FC0((uint64_t)v40, v34 + 8);
    }
    if (a3 != 2)
    {
      v35 = (_BYTE *)(a2 + 172);
      v36 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v36 + 40))
      {
        *(_QWORD *)v40 = v36 + 16;
        result = sub_20E9F4CE4((uint64_t)&v39, (uint64_t **)v40, v35);
      }
      else
      {
        if (*v35)
          v40[0] = -61;
        else
          v40[0] = -62;
        result = (uint64_t **)std::ostream::write();
      }
      if (a3 >= 4)
      {
        v37 = (_BYTE *)(a2 + 173);
        v38 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v38 + 40))
        {
          *(_QWORD *)v40 = v38 + 16;
          return sub_20E9F4CE4((uint64_t)&v39, (uint64_t **)v40, v37);
        }
        else
        {
          if (*v37)
            v40[0] = -61;
          else
            v40[0] = -62;
          return (uint64_t **)std::ostream::write();
        }
      }
    }
  }
  return result;
}

void sub_20EAD7FF8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  sub_20EAD817C(a1, a2);
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[4] - a2[3]) >> 5);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v15 = (uint64_t *)(v5 + 16);
    sub_20E9F472C(&v15, v4);
    v6 = (char *)a2[3];
    v7 = a2[4] - (_QWORD)v6;
    if (!v7)
      return;
  }
  else
  {
    sub_20E9F4A34();
    v6 = (char *)a2[3];
    v7 = a2[4] - (_QWORD)v6;
    if (!v7)
      return;
  }
  v8 = 480 * (v7 / 480);
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
    {
      v15 = (uint64_t *)(v9 + 16);
      sub_20E9F3D4C(&v15, 3u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v15, v9 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    sub_20EAD83D0(a1, v6);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
    v12 = *(_QWORD *)(v10 + 48);
    if (v12)
      memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
    *(_QWORD *)(v10 + 48) = 0;
    v13 = *(_QWORD *)(v10 + 80);
    v14 = *(_QWORD *)(v10 + 88) - 8;
    *(_QWORD *)(v10 + 88) = v14;
    if (v13 == v14)
    {
      std::ostream::write();
      if (*(_BYTE *)(v10 + 40))
      {
        free(*(void **)(v10 + 24));
        *(_BYTE *)(v10 + 40) = 0;
      }
    }
    v6 += 480;
    v8 -= 480;
  }
  while (v8);
}

void sub_20EAD817C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t *v25;

  v4 = a2[2];
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    sub_20E9F4A34();
    v9 = (_QWORD *)*a2;
    v6 = a2 + 1;
    v7 = v9;
    if (v9 == v6)
      return;
    while (1)
    {
LABEL_7:
      v10 = v7[4];
      v11 = *((_DWORD *)v7 + 10);
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
        v25 = (uint64_t *)(v12 + 16);
        sub_20E9F472C(&v25, v10);
        v13 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v13 + 40))
          goto LABEL_9;
      }
      else
      {
        sub_20E9F4A34();
        v13 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v13 + 40))
        {
LABEL_9:
          v25 = (uint64_t *)(v13 + 16);
          sub_20E9F3D4C(&v25, v11);
          v14 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v14 + 40))
            goto LABEL_10;
          goto LABEL_15;
        }
      }
      sub_20E9F3FC0((uint64_t)&v25, v13 + 8);
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
      {
LABEL_10:
        v25 = (uint64_t *)(v14 + 16);
        sub_20E9F3D4C(&v25, 2u);
        sub_20E9EE95C(*(_QWORD *)(a1 + 24));
        v15 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v15 + 40))
          goto LABEL_11;
        goto LABEL_16;
      }
LABEL_15:
      sub_20E9F3FC0((uint64_t)&v25, v14 + 8);
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v15 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v15 + 40))
      {
LABEL_11:
        v25 = (uint64_t *)(v15 + 16);
        sub_20E9F472C(&v25, v7[6]);
        v16 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v16 + 40))
          goto LABEL_17;
        goto LABEL_12;
      }
LABEL_16:
      sub_20E9F4A34();
      v16 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v16 + 40))
      {
LABEL_17:
        sub_20E9F3FC0((uint64_t)&v25, v16 + 8);
        goto LABEL_18;
      }
LABEL_12:
      v25 = (uint64_t *)(v16 + 16);
      sub_20E9F3D4C(&v25, *((_DWORD *)v7 + 14));
LABEL_18:
      v17 = *(_QWORD *)(a1 + 24);
      v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) - 8);
      sub_20E9EE4D0((uint64_t *)(v17 + 48), *(_QWORD *)(v17 + 16) - v18 - 9);
      v19 = *(_QWORD *)(v17 + 48);
      if (v19)
        memmove((void *)(*(_QWORD *)(v17 + 24) + v18), *(const void **)(v17 + 56), v19);
      *(_QWORD *)(v17 + 48) = 0;
      v20 = *(_QWORD *)(v17 + 80);
      v21 = *(_QWORD *)(v17 + 88) - 8;
      *(_QWORD *)(v17 + 88) = v21;
      if (v20 == v21)
      {
        std::ostream::write();
        if (*(_BYTE *)(v17 + 40))
        {
          free(*(void **)(v17 + 24));
          *(_BYTE *)(v17 + 40) = 0;
        }
      }
      v22 = (_QWORD *)v7[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v7[2];
          v24 = *v23 == (_QWORD)v7;
          v7 = v23;
        }
        while (!v24);
      }
      v7 = v23;
      if (v23 == v6)
        return;
    }
  }
  v25 = (uint64_t *)(v5 + 16);
  sub_20E9F472C(&v25, v4);
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
    goto LABEL_7;
}

_BYTE *sub_20EAD83D0(uint64_t a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v33;
  _BYTE v34[9];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v34 = v4 + 16;
    sub_20E9F3164((uint64_t **)v34, *a2);
  }
  else
  {
    v5 = *a2;
    if (v5 < 0)
    {
      v34[0] = -52;
      v34[1] = v5;
    }
    else
    {
      v34[0] = *a2;
    }
    std::ostream::write();
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v34 = v6 + 16;
    sub_20E9F472C((uint64_t **)v34, *((_QWORD *)a2 + 1));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
LABEL_9:
      *(_QWORD *)v34 = v7 + 16;
      sub_20E9F3D4C((uint64_t **)v34, *((_DWORD *)a2 + 4));
      goto LABEL_12;
    }
  }
  else
  {
    sub_20E9F4A34();
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_9;
  }
  sub_20E9F3FC0((uint64_t)v34, v7 + 8);
LABEL_12:
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_QWORD *)v34 = v8 + 16;
    sub_20E9F3D4C((uint64_t **)v34, *((_DWORD *)a2 + 6));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v34, v8 + 8);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    *(_QWORD *)v34 = v9 + 16;
    sub_20E9F472C((uint64_t **)v34, *((_QWORD *)a2 + 4));
    v10 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v10 + 40))
    {
LABEL_17:
      *(_QWORD *)v34 = v10 + 16;
      sub_20E9F3D4C((uint64_t **)v34, *((_DWORD *)a2 + 10));
      goto LABEL_20;
    }
  }
  else
  {
    sub_20E9F4A34();
    v10 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v10 + 40))
      goto LABEL_17;
  }
  sub_20E9F3FC0((uint64_t)v34, v10 + 8);
LABEL_20:
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    *(_QWORD *)v34 = v11 + 16;
    sub_20E9F3D4C((uint64_t **)v34, *((_DWORD *)a2 + 12));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v34, v11 + 8);
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v34 = v12 + 16;
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 7);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 8);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 9);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 10);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 11);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 12);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 13);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 14);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 15);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 16);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 17);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 18);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 19);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 20);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 21);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 22);
  }
  else
  {
    *(_QWORD *)&v34[1] = bswap64(*((_QWORD *)a2 + 7));
    v34[0] = -53;
    std::ostream::write();
    v13 = *((_QWORD *)a2 + 8);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v13);
    std::ostream::write();
    v14 = *((_QWORD *)a2 + 9);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v14);
    std::ostream::write();
    v15 = *((_QWORD *)a2 + 10);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v15);
    std::ostream::write();
    v16 = *((_QWORD *)a2 + 11);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v16);
    std::ostream::write();
    v17 = *((_QWORD *)a2 + 12);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v17);
    std::ostream::write();
    v18 = *((_QWORD *)a2 + 13);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v18);
    std::ostream::write();
    v19 = *((_QWORD *)a2 + 14);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v19);
    std::ostream::write();
    v20 = *((_QWORD *)a2 + 15);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v20);
    std::ostream::write();
    v21 = *((_QWORD *)a2 + 16);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v21);
    std::ostream::write();
    v22 = *((_QWORD *)a2 + 17);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v22);
    std::ostream::write();
    v23 = *((_QWORD *)a2 + 18);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v23);
    std::ostream::write();
    v24 = *((_QWORD *)a2 + 19);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v24);
    std::ostream::write();
    v25 = *((_QWORD *)a2 + 20);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v25);
    std::ostream::write();
    v26 = *((_QWORD *)a2 + 21);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v26);
    std::ostream::write();
    v27 = *((_QWORD *)a2 + 22);
    v34[0] = -53;
    *(_QWORD *)&v34[1] = bswap64(v27);
    std::ostream::write();
  }
  v28 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v28 + 40))
  {
    *(_QWORD *)v34 = v28 + 16;
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 23);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 24);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 25);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 26);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 27);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 28);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 29);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 30);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 31);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 32);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 33);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 34);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 35);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 36);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 37);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 38);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 39);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 40);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 41);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 42);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 43);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 44);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 45);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 46);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 47);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 48);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 49);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 50);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 51);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 52);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 53);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 54);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 55);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 56);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 57);
    sub_20E9F4C08((uint64_t)&v33, (uint64_t **)v34, (unint64_t *)a2 + 58);
  }
  else
  {
    for (i = 184; i != 472; i += 8)
    {
      v30 = *(_QWORD *)&a2[i];
      v34[0] = -53;
      *(_QWORD *)&v34[1] = bswap64(v30);
      std::ostream::write();
    }
  }
  v31 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v31 + 40))
    return (_BYTE *)sub_20E9F3FC0((uint64_t)v34, v31 + 8);
  *(_QWORD *)v34 = v31 + 16;
  return sub_20E9F3D4C((uint64_t **)v34, *((_DWORD *)a2 + 118));
}

void sub_20EAD8BB8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  BOOL v26;
  uint64_t i;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  std::bad_alloc *exception;
  std::bad_alloc *v38;
  uint64_t *v39;

  v4 = a2[2];
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    sub_20E9F4A34();
    v9 = (_QWORD *)*a2;
    v6 = a2 + 1;
    v7 = v9;
    if (v9 == v6)
      return;
    while (1)
    {
LABEL_7:
      v10 = v7[4];
      v11 = *((_DWORD *)v7 + 10);
      v12 = *((_DWORD *)v7 + 12);
      v13 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v13 + 40))
      {
        v39 = (uint64_t *)(v13 + 16);
        sub_20E9F472C(&v39, v10);
        v14 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v14 + 40))
          goto LABEL_9;
      }
      else
      {
        sub_20E9F4A34();
        v14 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v14 + 40))
        {
LABEL_9:
          v39 = (uint64_t *)(v14 + 16);
          sub_20E9F3D4C(&v39, v11);
          v15 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v15 + 40))
            goto LABEL_10;
          goto LABEL_28;
        }
      }
      sub_20E9F3FC0((uint64_t)&v39, v14 + 8);
      v15 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v15 + 40))
      {
LABEL_10:
        v39 = (uint64_t *)(v15 + 16);
        sub_20E9F3D4C(&v39, v12);
        v16 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v16 + 40))
          goto LABEL_11;
        goto LABEL_29;
      }
LABEL_28:
      sub_20E9F3FC0((uint64_t)&v39, v15 + 8);
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
LABEL_11:
        v39 = (uint64_t *)(v16 + 16);
        sub_20E9F3D4C(&v39, 2u);
        v17 = (unsigned int *)(v7 + 7);
        sub_20E9EE95C(*(_QWORD *)(a1 + 24));
        v18 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v18 + 40))
          goto LABEL_12;
        goto LABEL_30;
      }
LABEL_29:
      sub_20E9F3FC0((uint64_t)&v39, v16 + 8);
      v17 = (unsigned int *)(v7 + 7);
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v18 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v18 + 40))
      {
LABEL_12:
        v19 = *(_QWORD *)(v18 + 16);
        do
        {
          v22 = *v17;
          v23 = *(_QWORD *)(v18 + 32);
          if ((unint64_t)(v23 - v19) >= 5)
          {
            v20 = *(char **)(v18 + 24);
          }
          else
          {
            if (v23)
              v24 = 2 * v23;
            else
              v24 = 0x2000;
            v25 = v19 + 5;
            while (v24 < v25)
            {
              v26 = (uint64_t)v24 <= 0;
              v24 *= 2;
              if (v26)
              {
                v24 = v25;
                break;
              }
            }
            v20 = (char *)malloc_type_realloc(*(void **)(v18 + 24), v24, 0xAD6A59EEuLL);
            if (!v20)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v38 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v38, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v18 + 24) = v20;
            *(_QWORD *)(v18 + 32) = v24;
            v19 = *(_QWORD *)(v18 + 16);
          }
          v21 = &v20[v19];
          *v21 = -54;
          *(_DWORD *)(v21 + 1) = bswap32(v22);
          v19 = *(_QWORD *)(v18 + 16) + 5;
          *(_QWORD *)(v18 + 16) = v19;
          ++v17;
        }
        while (v17 != (unsigned int *)(v7 + 71));
        goto LABEL_32;
      }
LABEL_30:
      for (i = 0; i != 128; ++i)
      {
        v28 = v17[i];
        LOBYTE(v39) = -54;
        *(_DWORD *)((char *)&v39 + 1) = bswap32(v28);
        std::ostream::write();
      }
LABEL_32:
      v29 = *(_QWORD *)(a1 + 24);
      v30 = *(_QWORD *)(*(_QWORD *)(v29 + 88) - 8);
      sub_20E9EE4D0((uint64_t *)(v29 + 48), *(_QWORD *)(v29 + 16) - v30 - 9);
      v31 = *(_QWORD *)(v29 + 48);
      if (v31)
        memmove((void *)(*(_QWORD *)(v29 + 24) + v30), *(const void **)(v29 + 56), v31);
      *(_QWORD *)(v29 + 48) = 0;
      v32 = *(_QWORD *)(v29 + 80);
      v33 = *(_QWORD *)(v29 + 88) - 8;
      *(_QWORD *)(v29 + 88) = v33;
      if (v32 == v33)
      {
        std::ostream::write();
        if (*(_BYTE *)(v29 + 40))
        {
          free(*(void **)(v29 + 24));
          *(_BYTE *)(v29 + 40) = 0;
        }
      }
      v34 = (_QWORD *)v7[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v7[2];
          v36 = *v35 == (_QWORD)v7;
          v7 = v35;
        }
        while (!v36);
      }
      v7 = v35;
      if (v35 == v6)
        return;
    }
  }
  v39 = (uint64_t *)(v5 + 16);
  sub_20E9F472C(&v39, v4);
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
    goto LABEL_7;
}

void sub_20EAD8EFC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  char v21;
  uint64_t *v22;

  v4 = a2[2];
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    sub_20E9F4A34();
    v9 = (_QWORD *)*a2;
    v6 = a2 + 1;
    v7 = v9;
    if (v9 == v6)
      return;
    while (1)
    {
LABEL_7:
      v10 = (const void **)(v7 + 4);
      v11 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v11 + 40))
      {
        v22 = (uint64_t *)(v11 + 16);
        sub_20E9F4E1C((uint64_t)&v21, &v22, v10);
        v12 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v12 + 40))
          goto LABEL_11;
      }
      else
      {
        sub_20E9F5254((uint64_t)&v22, v11 + 8, (uint64_t)v10);
        v12 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v12 + 40))
        {
LABEL_11:
          sub_20E9F3FC0((uint64_t)&v22, v12 + 8);
          goto LABEL_12;
        }
      }
      v22 = (uint64_t *)(v12 + 16);
      sub_20E9F3D4C(&v22, 2u);
LABEL_12:
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      sub_20EAD90B0(a1, (uint64_t)(v7 + 7));
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
      sub_20E9EE4D0((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
      v15 = *(_QWORD *)(v13 + 48);
      if (v15)
        memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
      *(_QWORD *)(v13 + 48) = 0;
      v16 = *(_QWORD *)(v13 + 80);
      v17 = *(_QWORD *)(v13 + 88) - 8;
      *(_QWORD *)(v13 + 88) = v17;
      if (v16 == v17)
      {
        std::ostream::write();
        if (*(_BYTE *)(v13 + 40))
        {
          free(*(void **)(v13 + 24));
          *(_BYTE *)(v13 + 40) = 0;
        }
      }
      v18 = (_QWORD *)v7[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v7[2];
          v20 = *v19 == (_QWORD)v7;
          v7 = v19;
        }
        while (!v20);
      }
      v7 = v19;
      if (v19 == v6)
        return;
    }
  }
  v22 = (uint64_t *)(v5 + 16);
  sub_20E9F472C(&v22, v4);
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
    goto LABEL_7;
}

char *sub_20EAD90B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[9];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v48 = v4 + 16;
    sub_20E9F4E1C((uint64_t)&v47, (uint64_t **)v48, (const void **)a2);
  }
  else
  {
    sub_20E9F5254((uint64_t)v48, v4 + 8, a2);
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v48 = v5 + 16;
    sub_20E9F472C((uint64_t **)v48, *(_QWORD *)(a2 + 24));
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_6;
LABEL_9:
    sub_20E9F4A34();
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_7;
    goto LABEL_10;
  }
  sub_20E9F4A34();
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_9;
LABEL_6:
  *(_QWORD *)v48 = v6 + 16;
  sub_20E9F472C((uint64_t **)v48, *(_QWORD *)(a2 + 32));
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
LABEL_7:
    *(_QWORD *)v48 = v7 + 16;
    sub_20E9F3D4C((uint64_t **)v48, *(_DWORD *)(a2 + 40));
    goto LABEL_11;
  }
LABEL_10:
  sub_20E9F3FC0((uint64_t)v48, v7 + 8);
LABEL_11:
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_QWORD *)v48 = v8 + 16;
    sub_20E9F3D4C((uint64_t **)v48, *(_DWORD *)(a2 + 48));
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v48, v8 + 8);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    *(_QWORD *)v48 = v9 + 16;
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 56));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 64));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 72));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 80));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 88));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 96));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 104));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 112));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 120));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 128));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 136));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 144));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 152));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 160));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 168));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 176));
  }
  else
  {
    *(_QWORD *)&v48[1] = bswap64(*(_QWORD *)(a2 + 56));
    v48[0] = -53;
    std::ostream::write();
    v10 = *(_QWORD *)(a2 + 64);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v10);
    std::ostream::write();
    v11 = *(_QWORD *)(a2 + 72);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v11);
    std::ostream::write();
    v12 = *(_QWORD *)(a2 + 80);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v12);
    std::ostream::write();
    v13 = *(_QWORD *)(a2 + 88);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v13);
    std::ostream::write();
    v14 = *(_QWORD *)(a2 + 96);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v14);
    std::ostream::write();
    v15 = *(_QWORD *)(a2 + 104);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v15);
    std::ostream::write();
    v16 = *(_QWORD *)(a2 + 112);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v16);
    std::ostream::write();
    v17 = *(_QWORD *)(a2 + 120);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v17);
    std::ostream::write();
    v18 = *(_QWORD *)(a2 + 128);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v18);
    std::ostream::write();
    v19 = *(_QWORD *)(a2 + 136);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v19);
    std::ostream::write();
    v20 = *(_QWORD *)(a2 + 144);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v20);
    std::ostream::write();
    v21 = *(_QWORD *)(a2 + 152);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v21);
    std::ostream::write();
    v22 = *(_QWORD *)(a2 + 160);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v22);
    std::ostream::write();
    v23 = *(_QWORD *)(a2 + 168);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v23);
    std::ostream::write();
    v24 = *(_QWORD *)(a2 + 176);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v24);
    std::ostream::write();
  }
  v25 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v25 + 40))
  {
    *(_QWORD *)v48 = v25 + 16;
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 184));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 192));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 200));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 208));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 216));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 224));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 232));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 240));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 248));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 256));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 264));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 272));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 280));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 288));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 296));
    sub_20E9F4C08((uint64_t)&v47, (uint64_t **)v48, (unint64_t *)(a2 + 304));
  }
  else
  {
    *(_QWORD *)&v48[1] = bswap64(*(_QWORD *)(a2 + 184));
    v48[0] = -53;
    std::ostream::write();
    v26 = *(_QWORD *)(a2 + 192);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v26);
    std::ostream::write();
    v27 = *(_QWORD *)(a2 + 200);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v27);
    std::ostream::write();
    v28 = *(_QWORD *)(a2 + 208);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v28);
    std::ostream::write();
    v29 = *(_QWORD *)(a2 + 216);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v29);
    std::ostream::write();
    v30 = *(_QWORD *)(a2 + 224);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v30);
    std::ostream::write();
    v31 = *(_QWORD *)(a2 + 232);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v31);
    std::ostream::write();
    v32 = *(_QWORD *)(a2 + 240);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v32);
    std::ostream::write();
    v33 = *(_QWORD *)(a2 + 248);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v33);
    std::ostream::write();
    v34 = *(_QWORD *)(a2 + 256);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v34);
    std::ostream::write();
    v35 = *(_QWORD *)(a2 + 264);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v35);
    std::ostream::write();
    v36 = *(_QWORD *)(a2 + 272);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v36);
    std::ostream::write();
    v37 = *(_QWORD *)(a2 + 280);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v37);
    std::ostream::write();
    v38 = *(_QWORD *)(a2 + 288);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v38);
    std::ostream::write();
    v39 = *(_QWORD *)(a2 + 296);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v39);
    std::ostream::write();
    v40 = *(_QWORD *)(a2 + 304);
    v48[0] = -53;
    *(_QWORD *)&v48[1] = bswap64(v40);
    std::ostream::write();
  }
  if (*(_BYTE *)(a2 + 328))
  {
    v41 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v41 + 40))
    {
      *(_QWORD *)v48 = v41 + 16;
      sub_20E9F3164((uint64_t **)v48, 1);
    }
    else
    {
      v48[0] = 1;
      std::ostream::write();
    }
    v44 = (16 * *(_DWORD *)(a2 + 320)) | 2;
    v45 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v45 + 40))
    {
      *(_QWORD *)v48 = v45 + 16;
      sub_20E9F3D4C((uint64_t **)v48, v44);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v48, v45 + 8);
    }
    v46 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v46 + 40))
    {
      *(_QWORD *)v48 = v46 + 16;
      return sub_20E9F472C((uint64_t **)v48, *(_QWORD *)(a2 + 312));
    }
    else
    {
      return (char *)sub_20E9F4A34();
    }
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v42 + 40))
    {
      *(_QWORD *)v48 = v42 + 16;
      return sub_20E9F3164((uint64_t **)v48, 0);
    }
    else
    {
      v48[0] = 0;
      return (char *)std::ostream::write();
    }
  }
}

void sub_20EAD9954(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = 0x641511E8D2B3183BLL * ((a2[1] - *a2) >> 3);
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    sub_20E9F4A34();
    v6 = *a2;
    v7 = a2[1] - *a2;
    if (!v7)
      return;
    goto LABEL_5;
  }
  v18 = (uint64_t *)(v5 + 16);
  sub_20E9F472C(&v18, v4);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
LABEL_5:
    v8 = v6 + 16;
    for (i = 1944 * (v7 / 1944); i; i -= 1944)
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        v18 = (uint64_t *)(v10 + 16);
        sub_20E9F472C(&v18, *(_QWORD *)(v8 - 16));
        v11 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v11 + 40))
          goto LABEL_9;
      }
      else
      {
        sub_20E9F4A34();
        v11 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v11 + 40))
        {
LABEL_9:
          v18 = (uint64_t *)(v11 + 16);
          sub_20E9F3D4C(&v18, *(_DWORD *)(v8 - 8));
          v12 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v12 + 40))
            goto LABEL_13;
          goto LABEL_10;
        }
      }
      sub_20E9F3FC0((uint64_t)&v18, v11 + 8);
      v12 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v12 + 40))
      {
LABEL_13:
        sub_20E9F3FC0((uint64_t)&v18, v12 + 8);
        goto LABEL_14;
      }
LABEL_10:
      v18 = (uint64_t *)(v12 + 16);
      sub_20E9F3D4C(&v18, 1u);
LABEL_14:
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      sub_20EAD9B5C(a1, v8);
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
      sub_20E9EE4D0((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
      v15 = *(_QWORD *)(v13 + 48);
      if (v15)
        memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
      *(_QWORD *)(v13 + 48) = 0;
      v16 = *(_QWORD *)(v13 + 80);
      v17 = *(_QWORD *)(v13 + 88) - 8;
      *(_QWORD *)(v13 + 88) = v17;
      if (v16 == v17)
      {
        std::ostream::write();
        if (*(_BYTE *)(v13 + 40))
        {
          free(*(void **)(v13 + 24));
          *(_BYTE *)(v13 + 40) = 0;
        }
      }
      v8 += 1944;
    }
  }
}

uint64_t **sub_20EAD9B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v22;
  char v23;
  _BYTE v24[9];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v24 = v4 + 16;
    sub_20E9F472C((uint64_t **)v24, *(_QWORD *)a2);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
LABEL_3:
      *(_QWORD *)v24 = v5 + 16;
      sub_20E9F3D4C((uint64_t **)v24, *(_DWORD *)(a2 + 8));
      goto LABEL_6;
    }
  }
  else
  {
    sub_20E9F4A34();
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_3;
  }
  sub_20E9F3FC0((uint64_t)v24, v5 + 8);
LABEL_6:
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v24 = v6 + 16;
    sub_20E9F472C((uint64_t **)v24, *(_QWORD *)(a2 + 16));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
LABEL_8:
      *(_QWORD *)v24 = v7 + 16;
      sub_20E9F3D4C((uint64_t **)v24, *(_DWORD *)(a2 + 24));
      goto LABEL_11;
    }
  }
  else
  {
    sub_20E9F4A34();
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_8;
  }
  sub_20E9F3FC0((uint64_t)v24, v7 + 8);
LABEL_11:
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_QWORD *)v24 = v8 + 16;
    sub_20E9F3D4C((uint64_t **)v24, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v24, v8 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20EAD9EAC(a1, (unint64_t *)(a2 + 32));
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  if (*(_QWORD *)(v9 + 48))
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), *(_QWORD *)(v9 + 48));
  *(_QWORD *)(v9 + 48) = 0;
  v11 = *(_QWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v13 + 40))
  {
    *(_QWORD *)v24 = v13 + 16;
    sub_20E9F4C08((uint64_t)&v23, (uint64_t **)v24, (unint64_t *)(a2 + 1888));
    sub_20E9F4C08((uint64_t)&v23, (uint64_t **)v24, (unint64_t *)(a2 + 1896));
    sub_20E9F4C08((uint64_t)&v23, (uint64_t **)v24, (unint64_t *)(a2 + 1904));
  }
  else
  {
    *(_QWORD *)&v24[1] = bswap64(*(_QWORD *)(a2 + 1888));
    v24[0] = -53;
    std::ostream::write();
    v14 = *(_QWORD *)(a2 + 1896);
    v24[0] = -53;
    *(_QWORD *)&v24[1] = bswap64(v14);
    std::ostream::write();
    v15 = *(_QWORD *)(a2 + 1904);
    v24[0] = -53;
    *(_QWORD *)&v24[1] = bswap64(v15);
    std::ostream::write();
  }
  v16 = (unint64_t *)(a2 + 1912);
  v17 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v17 + 40))
  {
    *(_QWORD *)v24 = v17 + 16;
    sub_20E9F4C08((uint64_t)&v23, (uint64_t **)v24, v16);
  }
  else
  {
    v18 = *v16;
    v24[0] = -53;
    *(_QWORD *)&v24[1] = bswap64(v18);
    std::ostream::write();
  }
  v19 = (unint64_t *)(a2 + 1920);
  v20 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v20 + 40))
  {
    *(_QWORD *)v24 = v20 + 16;
    return sub_20E9F4C08((uint64_t)&v23, (uint64_t **)v24, v19);
  }
  else
  {
    v22 = *v19;
    v24[0] = -53;
    *(_QWORD *)&v24[1] = bswap64(v22);
    return (uint64_t **)std::ostream::write();
  }
}

uint64_t sub_20EAD9EAC(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  uint64_t j;
  unint64_t v84;
  char v85;
  _BYTE v86[9];
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v86 = v4 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 1);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 2);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(*a2);
    v86[0] = -53;
    std::ostream::write();
    v5 = a2[1];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v5);
    std::ostream::write();
    v6 = a2[2];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v6);
    std::ostream::write();
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    *(_QWORD *)v86 = v7 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 3);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 4);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 5);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[3]);
    v86[0] = -53;
    std::ostream::write();
    v8 = a2[4];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v8);
    std::ostream::write();
    v9 = a2[5];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v9);
    std::ostream::write();
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v10 + 40))
  {
    *(_QWORD *)v86 = v10 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 6);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 7);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 8);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 9);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[6]);
    v86[0] = -53;
    std::ostream::write();
    v11 = a2[7];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v11);
    std::ostream::write();
    v12 = a2[8];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v12);
    std::ostream::write();
    v13 = a2[9];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v13);
    std::ostream::write();
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    *(_QWORD *)v86 = v14 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 10);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 11);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 12);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 13);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 14);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 15);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 16);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 17);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 18);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[10]);
    v86[0] = -53;
    std::ostream::write();
    v15 = a2[11];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v15);
    std::ostream::write();
    v16 = a2[12];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v16);
    std::ostream::write();
    v17 = a2[13];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v17);
    std::ostream::write();
    v18 = a2[14];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v18);
    std::ostream::write();
    v19 = a2[15];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v19);
    std::ostream::write();
    v20 = a2[16];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v20);
    std::ostream::write();
    v21 = a2[17];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v21);
    std::ostream::write();
    v22 = a2[18];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v22);
    std::ostream::write();
  }
  v23 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v23 + 40))
  {
    *(_QWORD *)v86 = v23 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 19);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 20);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 21);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 22);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 23);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 24);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 25);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 26);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 27);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[19]);
    v86[0] = -53;
    std::ostream::write();
    v24 = a2[20];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v24);
    std::ostream::write();
    v25 = a2[21];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v25);
    std::ostream::write();
    v26 = a2[22];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v26);
    std::ostream::write();
    v27 = a2[23];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v27);
    std::ostream::write();
    v28 = a2[24];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v28);
    std::ostream::write();
    v29 = a2[25];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v29);
    std::ostream::write();
    v30 = a2[26];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v30);
    std::ostream::write();
    v31 = a2[27];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v31);
    std::ostream::write();
  }
  v32 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v32 + 40))
  {
    *(_QWORD *)v86 = v32 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 28);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 29);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 30);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[28]);
    v86[0] = -53;
    std::ostream::write();
    v33 = a2[29];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v33);
    std::ostream::write();
    v34 = a2[30];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v34);
    std::ostream::write();
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v35 + 40))
  {
    *(_QWORD *)v86 = v35 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 31);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 32);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 33);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[31]);
    v86[0] = -53;
    std::ostream::write();
    v36 = a2[32];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v36);
    std::ostream::write();
    v37 = a2[33];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v37);
    std::ostream::write();
  }
  v38 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v38 + 40))
  {
    *(_QWORD *)v86 = v38 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 34);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 35);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 36);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 37);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 38);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 39);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 40);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 41);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 42);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[34]);
    v86[0] = -53;
    std::ostream::write();
    v39 = a2[35];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v39);
    std::ostream::write();
    v40 = a2[36];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v40);
    std::ostream::write();
    v41 = a2[37];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v41);
    std::ostream::write();
    v42 = a2[38];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v42);
    std::ostream::write();
    v43 = a2[39];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v43);
    std::ostream::write();
    v44 = a2[40];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v44);
    std::ostream::write();
    v45 = a2[41];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v45);
    std::ostream::write();
    v46 = a2[42];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v46);
    std::ostream::write();
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v47 + 40))
  {
    *(_QWORD *)v86 = v47 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 43);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 44);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 45);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 46);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 47);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 48);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 49);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 50);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 51);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[43]);
    v86[0] = -53;
    std::ostream::write();
    v48 = a2[44];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v48);
    std::ostream::write();
    v49 = a2[45];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v49);
    std::ostream::write();
    v50 = a2[46];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v50);
    std::ostream::write();
    v51 = a2[47];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v51);
    std::ostream::write();
    v52 = a2[48];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v52);
    std::ostream::write();
    v53 = a2[49];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v53);
    std::ostream::write();
    v54 = a2[50];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v54);
    std::ostream::write();
    v55 = a2[51];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v55);
    std::ostream::write();
  }
  v56 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v56 + 40))
  {
    *(_QWORD *)v86 = v56 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 52);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 53);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 54);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 55);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 56);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 57);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 58);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 59);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 60);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[52]);
    v86[0] = -53;
    std::ostream::write();
    v57 = a2[53];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v57);
    std::ostream::write();
    v58 = a2[54];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v58);
    std::ostream::write();
    v59 = a2[55];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v59);
    std::ostream::write();
    v60 = a2[56];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v60);
    std::ostream::write();
    v61 = a2[57];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v61);
    std::ostream::write();
    v62 = a2[58];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v62);
    std::ostream::write();
    v63 = a2[59];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v63);
    std::ostream::write();
    v64 = a2[60];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v64);
    std::ostream::write();
  }
  v65 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v65 + 40))
  {
    *(_QWORD *)v86 = v65 + 16;
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 61);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 62);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 63);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 64);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 65);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 66);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 67);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 68);
    sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, a2 + 69);
  }
  else
  {
    *(_QWORD *)&v86[1] = bswap64(a2[61]);
    v86[0] = -53;
    std::ostream::write();
    v66 = a2[62];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v66);
    std::ostream::write();
    v67 = a2[63];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v67);
    std::ostream::write();
    v68 = a2[64];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v68);
    std::ostream::write();
    v69 = a2[65];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v69);
    std::ostream::write();
    v70 = a2[66];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v70);
    std::ostream::write();
    v71 = a2[67];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v71);
    std::ostream::write();
    v72 = a2[68];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v72);
    std::ostream::write();
    v73 = a2[69];
    v86[0] = -53;
    *(_QWORD *)&v86[1] = bswap64(v73);
    std::ostream::write();
  }
  v74 = a2 + 70;
  v75 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v75 + 40))
  {
    v76 = 0;
    *(_QWORD *)v86 = v75 + 16;
    do
      sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, &v74[v76++]);
    while (v76 != 81);
  }
  else
  {
    for (i = 0; i != 81; ++i)
    {
      v78 = v74[i];
      v86[0] = -53;
      *(_QWORD *)&v86[1] = bswap64(v78);
      std::ostream::write();
    }
  }
  v79 = a2 + 151;
  v80 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v80 + 40))
  {
    v81 = 0;
    *(_QWORD *)v86 = v80 + 16;
    do
      result = (uint64_t)sub_20E9F4C08((uint64_t)&v85, (uint64_t **)v86, &v79[v81++]);
    while (v81 != 81);
  }
  else
  {
    for (j = 0; j != 81; ++j)
    {
      v84 = v79[j];
      v86[0] = -53;
      *(_QWORD *)&v86[1] = bswap64(v84);
      result = std::ostream::write();
    }
  }
  return result;
}

char *sub_20EADAE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;

  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v16 = (uint64_t *)(v4 + 16);
    sub_20E9F3D4C(&v16, *(_DWORD *)a2);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_3;
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v16, v4 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
LABEL_3:
      v16 = (uint64_t *)(v5 + 16);
      sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 4));
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v6 + 40))
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  sub_20E9F3FC0((uint64_t)&v16, v5 + 8);
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
LABEL_4:
    v16 = (uint64_t *)(v6 + 16);
    sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 8));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  sub_20E9F3FC0((uint64_t)&v16, v6 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
LABEL_5:
    v16 = (uint64_t *)(v7 + 16);
    sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 12));
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  sub_20E9F3FC0((uint64_t)&v16, v7 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
LABEL_6:
    v16 = (uint64_t *)(v8 + 16);
    sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 16));
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  sub_20E9F3FC0((uint64_t)&v16, v8 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_7:
    v16 = (uint64_t *)(v9 + 16);
    sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 20));
    if (*(_BYTE *)(a2 + 36))
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  sub_20E9F3FC0((uint64_t)&v16, v9 + 8);
  if (*(_BYTE *)(a2 + 36))
  {
LABEL_8:
    v10 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v10 + 40))
    {
      v16 = (uint64_t *)(v10 + 16);
      sub_20E9F3164(&v16, 1);
      v11 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v11 + 40))
        goto LABEL_10;
    }
    else
    {
      LOBYTE(v16) = 1;
      std::ostream::write();
      v11 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v11 + 40))
      {
LABEL_10:
        v16 = (uint64_t *)(v11 + 16);
        sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 24));
        v12 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v12 + 40))
          goto LABEL_11;
        goto LABEL_23;
      }
    }
    sub_20E9F3FC0((uint64_t)&v16, v11 + 8);
    v12 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v12 + 40))
    {
LABEL_11:
      v16 = (uint64_t *)(v12 + 16);
      sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 28));
      v13 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v13 + 40))
      {
LABEL_12:
        v16 = (uint64_t *)(v13 + 16);
        return sub_20E9F3D4C(&v16, *(_DWORD *)(a2 + 32));
      }
      return (char *)sub_20E9F3FC0((uint64_t)&v16, v13 + 8);
    }
LABEL_23:
    sub_20E9F3FC0((uint64_t)&v16, v12 + 8);
    v13 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v13 + 40))
      goto LABEL_12;
    return (char *)sub_20E9F3FC0((uint64_t)&v16, v13 + 8);
  }
LABEL_19:
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v16 = (uint64_t *)(v15 + 16);
    return sub_20E9F3164(&v16, 0);
  }
  else
  {
    LOBYTE(v16) = 0;
    return (char *)std::ostream::write();
  }
}

void sub_20EADB180(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v22 = (uint64_t *)(v7 + 16);
    sub_20E9F472C(&v22, v6);
    v8 = *(uint64_t **)a2;
    v9 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    sub_20E9F4A34();
    v8 = *(uint64_t **)a2;
    v9 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v9)
      goto LABEL_10;
  }
  v10 = 48 * (v9 / 48);
  do
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
    {
      v22 = (uint64_t *)(v11 + 16);
      sub_20E9F3D4C(&v22, 1u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v22, v11 + 8);
    }
    sub_20EADB434(a1, v8);
    v8 += 6;
    v10 -= 48;
  }
  while (v10);
LABEL_10:
  if (a3 < 2)
    return;
  sub_20EAD8BB8(a1, (_QWORD *)(a2 + 24));
  if (a3 == 2)
    return;
  v12 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v12 + 40))
  {
    v22 = (uint64_t *)(v12 + 16);
    sub_20E9F3D4C(&v22, *(_DWORD *)(a2 + 48));
    v13 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v13 + 40))
      goto LABEL_14;
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v22, v12 + 8);
    v13 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v13 + 40))
    {
LABEL_14:
      v22 = (uint64_t *)(v13 + 16);
      sub_20E9F3D4C(&v22, *(_DWORD *)(a2 + 52));
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
        goto LABEL_15;
LABEL_19:
      sub_20E9F3FC0((uint64_t)&v22, v14 + 8);
      if (a3 < 4)
        return;
      goto LABEL_20;
    }
  }
  sub_20E9F3FC0((uint64_t)&v22, v13 + 8);
  v14 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v14 + 40))
    goto LABEL_19;
LABEL_15:
  v22 = (uint64_t *)(v14 + 16);
  sub_20E9F3D4C(&v22, *(_DWORD *)(a2 + 56));
  if (a3 < 4)
    return;
LABEL_20:
  v15 = a2 + 60;
  v16 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v16 + 40))
  {
    v22 = (uint64_t *)(v16 + 16);
    sub_20E9F3D4C(&v22, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v22, v16 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20EADAE9C(a1, v15);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v17 + 48), *(_QWORD *)(v17 + 16) - v18 - 9);
  v19 = *(_QWORD *)(v17 + 48);
  if (v19)
    memmove((void *)(*(_QWORD *)(v17 + 24) + v18), *(const void **)(v17 + 56), v19);
  *(_QWORD *)(v17 + 48) = 0;
  v20 = *(_QWORD *)(v17 + 80);
  v21 = *(_QWORD *)(v17 + 88) - 8;
  *(_QWORD *)(v17 + 88) = v21;
  if (v20 == v21)
  {
    std::ostream::write();
    if (*(_BYTE *)(v17 + 40))
    {
      free(*(void **)(v17 + 24));
      *(_BYTE *)(v17 + 40) = 0;
    }
  }
}

_BYTE *sub_20EADB434(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;

  v4 = (a2[1] - *a2) >> 6;
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    sub_20E9F4A34();
    v6 = *a2;
    v7 = a2[1];
    if (v7 == *a2)
      goto LABEL_18;
    while (1)
    {
LABEL_7:
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
      {
        v17 = (uint64_t *)(v8 + 16);
        sub_20E9F3D4C(&v17, 1u);
        v9 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v9 + 40))
          goto LABEL_13;
      }
      else
      {
        sub_20E9F3FC0((uint64_t)&v17, v8 + 8);
        v9 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v9 + 40))
        {
LABEL_13:
          for (i = 0; i != 64; ++i)
          {
            while (1)
            {
              v12 = *(char *)(v6 + i);
              if ((v12 & 0x80000000) == 0)
                break;
              LOBYTE(v17) = -52;
              BYTE1(v17) = v12;
              std::ostream::write();
              if (++i == 64)
                goto LABEL_6;
            }
            LOBYTE(v17) = *(_BYTE *)(v6 + i);
            std::ostream::write();
          }
          goto LABEL_6;
        }
      }
      v10 = 0;
      v17 = (uint64_t *)(v9 + 16);
      do
        sub_20E9F3164(&v17, *(_BYTE *)(v6 + v10++));
      while (v10 != 64);
LABEL_6:
      v6 += 64;
      if (v6 == v7)
        goto LABEL_18;
    }
  }
  v17 = (uint64_t *)(v5 + 16);
  sub_20E9F472C(&v17, v4);
  v6 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
    goto LABEL_7;
LABEL_18:
  v13 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v13 + 40))
  {
    v17 = (uint64_t *)(v13 + 16);
    sub_20E9F472C(&v17, a2[3]);
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v14 + 40))
      goto LABEL_20;
LABEL_23:
    sub_20E9F3FC0((uint64_t)&v17, v14 + 8);
    v15 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v15 + 40))
      goto LABEL_21;
    return (_BYTE *)sub_20E9F3FC0((uint64_t)&v17, v15 + 8);
  }
  sub_20E9F4A34();
  v14 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v14 + 40))
    goto LABEL_23;
LABEL_20:
  v17 = (uint64_t *)(v14 + 16);
  sub_20E9F3D4C(&v17, *((_DWORD *)a2 + 8));
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
LABEL_21:
    v17 = (uint64_t *)(v15 + 16);
    return sub_20E9F3D4C(&v17, *((_DWORD *)a2 + 10));
  }
  return (_BYTE *)sub_20E9F3FC0((uint64_t)&v17, v15 + 8);
}

uint64_t **sub_20EADB644(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t **result;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t *v81;
  char v82;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
  {
    sub_20E9F4A34();
    v7 = *a2;
    v8 = a2[1];
    if (v8 == *a2)
      goto LABEL_67;
    while (1)
    {
LABEL_7:
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        v81 = (uint64_t *)(v9 + 16);
        sub_20E9F472C(&v81, *(_QWORD *)v7);
        v10 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v10 + 40))
          goto LABEL_9;
      }
      else
      {
        sub_20E9F4A34();
        v10 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v10 + 40))
        {
LABEL_9:
          v81 = (uint64_t *)(v10 + 16);
          sub_20E9F3D4C(&v81, *(_DWORD *)(v7 + 8));
          v11 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v11 + 40))
            goto LABEL_10;
          goto LABEL_25;
        }
      }
      sub_20E9F3FC0((uint64_t)&v81, v10 + 8);
      v11 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v11 + 40))
      {
LABEL_10:
        v81 = (uint64_t *)(v11 + 16);
        sub_20E9F3D4C(&v81, *(_DWORD *)(v7 + 16));
        v12 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v12 + 40))
          goto LABEL_11;
        goto LABEL_26;
      }
LABEL_25:
      sub_20E9F3FC0((uint64_t)&v81, v11 + 8);
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
LABEL_11:
        v81 = (uint64_t *)(v12 + 16);
        sub_20E9F3D4C(&v81, 2u);
        v13 = (_BYTE *)(v7 + 24);
        v14 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v14 + 40))
          goto LABEL_12;
        goto LABEL_27;
      }
LABEL_26:
      LOBYTE(v81) = 2;
      std::ostream::write();
      v13 = (_BYTE *)(v7 + 24);
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
      {
LABEL_12:
        v81 = (uint64_t *)(v14 + 16);
        sub_20E9F4CE4((uint64_t)&v82, &v81, v13);
        v15 = (_BYTE *)(v7 + 25);
        v16 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v16 + 40))
          goto LABEL_13;
        goto LABEL_31;
      }
LABEL_27:
      if (*v13)
        v29 = -61;
      else
        v29 = -62;
      LOBYTE(v81) = v29;
      std::ostream::write();
      v15 = (_BYTE *)(v7 + 25);
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
LABEL_13:
        v81 = (uint64_t *)(v16 + 16);
        sub_20E9F4CE4((uint64_t)&v82, &v81, v15);
        v17 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v17 + 40))
          goto LABEL_14;
        goto LABEL_35;
      }
LABEL_31:
      if (*v15)
        v30 = -61;
      else
        v30 = -62;
      LOBYTE(v81) = v30;
      std::ostream::write();
      v17 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v17 + 40))
      {
LABEL_14:
        v81 = (uint64_t *)(v17 + 16);
        sub_20E9F472C(&v81, *(_QWORD *)(v7 + 32));
        v18 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v18 + 40))
          goto LABEL_15;
        goto LABEL_36;
      }
LABEL_35:
      sub_20E9F4A34();
      v18 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v18 + 40))
      {
LABEL_15:
        v81 = (uint64_t *)(v18 + 16);
        sub_20E9F472C(&v81, *(_QWORD *)(v7 + 40));
        v19 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v19 + 40))
          goto LABEL_16;
        goto LABEL_37;
      }
LABEL_36:
      sub_20E9F4A34();
      v19 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v19 + 40))
      {
LABEL_16:
        v81 = (uint64_t *)(v19 + 16);
        sub_20E9F472C(&v81, *(_QWORD *)(v7 + 48));
        v20 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v20 + 40))
          goto LABEL_17;
        goto LABEL_38;
      }
LABEL_37:
      sub_20E9F4A34();
      v20 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v20 + 40))
      {
LABEL_17:
        v81 = (uint64_t *)(v20 + 16);
        sub_20E9F472C(&v81, *(_QWORD *)(v7 + 56));
        v21 = (uint64_t)(*(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 64)) >> 2;
        v22 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v22 + 40))
          goto LABEL_18;
        goto LABEL_39;
      }
LABEL_38:
      sub_20E9F4A34();
      v21 = (uint64_t)(*(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 64)) >> 2;
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
LABEL_18:
        v81 = (uint64_t *)(v22 + 16);
        sub_20E9F472C(&v81, v21);
        v24 = *(unsigned int **)(v7 + 64);
        v23 = *(unsigned int **)(v7 + 72);
        v25 = v23 - v24;
        v26 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v26 + 40))
          goto LABEL_19;
        goto LABEL_40;
      }
LABEL_39:
      sub_20E9F4A34();
      v24 = *(unsigned int **)(v7 + 64);
      v23 = *(unsigned int **)(v7 + 72);
      v25 = v23 - v24;
      v26 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v26 + 40))
      {
LABEL_19:
        v81 = (uint64_t *)(v26 + 16);
        if (v23 != v24)
        {
          v27 = 4 * v25;
          do
          {
            v28 = *v24++;
            sub_20E9F3D4C(&v81, v28);
            v27 -= 4;
          }
          while (v27);
        }
        goto LABEL_50;
      }
LABEL_40:
      if (v23 != v24)
      {
        v31 = 4 * v25;
        do
        {
          v32 = *v24;
          if (*v24 > 0xFF)
          {
            if (HIWORD(v32))
            {
              LOBYTE(v81) = -50;
              *(_DWORD *)((char *)&v81 + 1) = bswap32(v32);
            }
            else
            {
              LOBYTE(v81) = -51;
              *(_WORD *)((char *)&v81 + 1) = bswap32(v32) >> 16;
            }
          }
          else if (v32 > 0x7F)
          {
            LOBYTE(v81) = -52;
            BYTE1(v81) = v32;
          }
          else
          {
            LOBYTE(v81) = *v24;
          }
          std::ostream::write();
          ++v24;
          v31 -= 4;
        }
        while (v31);
      }
LABEL_50:
      v33 = (uint64_t)(*(_QWORD *)(v7 + 96) - *(_QWORD *)(v7 + 88)) >> 2;
      v34 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v34 + 40))
      {
        v81 = (uint64_t *)(v34 + 16);
        sub_20E9F472C(&v81, v33);
        v36 = *(unsigned int **)(v7 + 88);
        v35 = *(unsigned int **)(v7 + 96);
        v37 = v35 - v36;
        v38 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v38 + 40))
          goto LABEL_57;
      }
      else
      {
        sub_20E9F4A34();
        v36 = *(unsigned int **)(v7 + 88);
        v35 = *(unsigned int **)(v7 + 96);
        v37 = v35 - v36;
        v38 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v38 + 40))
        {
LABEL_57:
          if (v35 != v36)
          {
            v41 = 4 * v37;
            do
            {
              v42 = *v36;
              if (*v36 > 0xFF)
              {
                if (HIWORD(v42))
                {
                  LOBYTE(v81) = -50;
                  *(_DWORD *)((char *)&v81 + 1) = bswap32(v42);
                }
                else
                {
                  LOBYTE(v81) = -51;
                  *(_WORD *)((char *)&v81 + 1) = bswap32(v42) >> 16;
                }
              }
              else if (v42 > 0x7F)
              {
                LOBYTE(v81) = -52;
                BYTE1(v81) = v42;
              }
              else
              {
                LOBYTE(v81) = *v36;
              }
              std::ostream::write();
              ++v36;
              v41 -= 4;
            }
            while (v41);
          }
          goto LABEL_6;
        }
      }
      v81 = (uint64_t *)(v38 + 16);
      if (v35 != v36)
      {
        v39 = 4 * v37;
        do
        {
          v40 = *v36++;
          sub_20E9F3D4C(&v81, v40);
          v39 -= 4;
        }
        while (v39);
      }
LABEL_6:
      v7 += 112;
      if (v7 == v8)
        goto LABEL_67;
    }
  }
  v81 = (uint64_t *)(v6 + 16);
  sub_20E9F472C(&v81, v5);
  v7 = *a2;
  v8 = a2[1];
  if (v8 != *a2)
    goto LABEL_7;
LABEL_67:
  v43 = (uint64_t)(a2[4] - a2[3]) >> 3;
  v44 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v44 + 40))
  {
    v81 = (uint64_t *)(v44 + 16);
    sub_20E9F472C(&v81, v43);
    v46 = (unint64_t *)a2[3];
    v45 = (unint64_t *)a2[4];
    v47 = v45 - v46;
    v48 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v48 + 40))
      goto LABEL_69;
  }
  else
  {
    sub_20E9F4A34();
    v46 = (unint64_t *)a2[3];
    v45 = (unint64_t *)a2[4];
    v47 = v45 - v46;
    v48 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v48 + 40))
    {
LABEL_69:
      v81 = (uint64_t *)(v48 + 16);
      if (v45 != v46)
      {
        v49 = 8 * v47;
        do
        {
          v50 = *v46++;
          sub_20E9F472C(&v81, v50);
          v49 -= 8;
        }
        while (v49);
      }
      goto LABEL_77;
    }
  }
  if (v45 != v46)
  {
    v51 = 8 * v47;
    do
    {
      ++v46;
      sub_20E9F4A34();
      v51 -= 8;
    }
    while (v51);
  }
LABEL_77:
  v52 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v52 + 40))
  {
    v81 = (uint64_t *)(v52 + 16);
    result = (uint64_t **)sub_20E9F472C(&v81, a2[6]);
    if (a3 < 2)
      return result;
  }
  else
  {
    result = (uint64_t **)sub_20E9F4A34();
    if (a3 < 2)
      return result;
  }
  v54 = (uint64_t)(a2[8] - a2[7]) >> 2;
  v55 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v55 + 40))
  {
    v81 = (uint64_t *)(v55 + 16);
    sub_20E9F472C(&v81, v54);
    v57 = (unsigned int *)a2[7];
    v56 = (unsigned int *)a2[8];
    v58 = v56 - v57;
    v59 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v59 + 40))
      goto LABEL_83;
  }
  else
  {
    sub_20E9F4A34();
    v57 = (unsigned int *)a2[7];
    v56 = (unsigned int *)a2[8];
    v58 = v56 - v57;
    v59 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v59 + 40))
    {
LABEL_83:
      v81 = (uint64_t *)(v59 + 16);
      if (v56 != v57)
      {
        v60 = 4 * v58;
        do
        {
          v61 = *v57++;
          sub_20E9F3D4C(&v81, v61);
          v60 -= 4;
        }
        while (v60);
      }
      goto LABEL_91;
    }
  }
  if (v56 != v57)
  {
    v62 = v59 + 8;
    v63 = 4 * v58;
    do
    {
      ++v57;
      sub_20E9F3FC0((uint64_t)&v81, v62);
      v63 -= 4;
    }
    while (v63);
  }
LABEL_91:
  v64 = (uint64_t)(a2[11] - a2[10]) >> 2;
  v65 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v65 + 40))
  {
    v81 = (uint64_t *)(v65 + 16);
    sub_20E9F472C(&v81, v64);
    v67 = (unsigned int *)a2[10];
    v66 = (unsigned int *)a2[11];
    v68 = v66 - v67;
    v69 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v69 + 40))
      goto LABEL_93;
  }
  else
  {
    sub_20E9F4A34();
    v67 = (unsigned int *)a2[10];
    v66 = (unsigned int *)a2[11];
    v68 = v66 - v67;
    v69 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v69 + 40))
    {
LABEL_93:
      v81 = (uint64_t *)(v69 + 16);
      if (v66 != v67)
      {
        v70 = 4 * v68;
        do
        {
          v71 = *v67++;
          sub_20E9F3D4C(&v81, v71);
          v70 -= 4;
        }
        while (v70);
      }
      goto LABEL_101;
    }
  }
  if (v66 != v67)
  {
    v72 = v69 + 8;
    v73 = 4 * v68;
    do
    {
      ++v67;
      sub_20E9F3FC0((uint64_t)&v81, v72);
      v73 -= 4;
    }
    while (v73);
  }
LABEL_101:
  v74 = a2 + 13;
  v75 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v75 + 40))
  {
    v81 = (uint64_t *)(v75 + 16);
    sub_20E9F4CE4((uint64_t)&v82, &v81, v74);
    v76 = (char *)a2 + 105;
    v77 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v77 + 40))
    {
LABEL_103:
      v81 = (uint64_t *)(v77 + 16);
      return sub_20E9F4CE4((uint64_t)&v82, &v81, v76);
    }
  }
  else
  {
    if (*v74)
      v78 = -61;
    else
      v78 = -62;
    LOBYTE(v81) = v78;
    std::ostream::write();
    v76 = (char *)a2 + 105;
    v77 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v77 + 40))
      goto LABEL_103;
  }
  if (*v76)
    v79 = -61;
  else
    v79 = -62;
  LOBYTE(v81) = v79;
  return (uint64_t **)std::ostream::write();
}

uint64_t sub_20EADBF08(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[9];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v17 = v4 + 16;
    sub_20E9F3D4C((uint64_t **)v17, 1u);
    v5 = (a2[1] - *a2) >> 4;
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_3;
LABEL_6:
    result = sub_20E9F4A34();
    v8 = *a2;
    v9 = a2[1] - *a2;
    if (!v9)
      return result;
    goto LABEL_7;
  }
  sub_20E9F3FC0((uint64_t)v17, v4 + 8);
  v5 = (a2[1] - *a2) >> 4;
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)v17 = v6 + 16;
  result = (uint64_t)sub_20E9F472C((uint64_t **)v17, v5);
  v8 = *a2;
  v9 = a2[1] - *a2;
  if (v9)
  {
LABEL_7:
    v10 = (unint64_t *)(v8 + 8);
    v11 = 16 * (v9 >> 4);
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v13 + 40))
      {
        *(_QWORD *)v17 = v13 + 16;
        sub_20E9F3D4C((uint64_t **)v17, 2u);
        v14 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v14 + 40))
          goto LABEL_11;
LABEL_14:
        sub_20E9F3FC0((uint64_t)v17, v14 + 8);
        v15 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v15 + 40))
          goto LABEL_15;
LABEL_8:
        v12 = *v10;
        v10 += 2;
        v17[0] = -53;
        *(_QWORD *)&v17[1] = bswap64(v12);
        result = std::ostream::write();
        v11 -= 16;
        if (!v11)
          return result;
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v17, v13 + 8);
        v14 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v14 + 40))
          goto LABEL_14;
LABEL_11:
        *(_QWORD *)v17 = v14 + 16;
        sub_20E9F3D4C((uint64_t **)v17, *((_DWORD *)v10 - 2));
        v15 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v15 + 40))
          goto LABEL_8;
LABEL_15:
        *(_QWORD *)v17 = v15 + 16;
        result = (uint64_t)sub_20E9F4C08((uint64_t)&v16, (uint64_t **)v17, v10);
        v10 += 2;
        v11 -= 16;
        if (!v11)
          return result;
      }
    }
  }
  return result;
}

uint64_t **sub_20EADC0E0(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t **result;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  char v26;
  char v27;
  _BYTE v28[9];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)v28 = v6 + 16;
    result = (uint64_t **)sub_20E9F3164((uint64_t **)v28, *a2);
    if (a3 < 2)
      return result;
  }
  else
  {
    v8 = *a2;
    if (v8 < 0)
    {
      v28[0] = -52;
      v28[1] = v8;
      result = (uint64_t **)std::ostream::write();
      if (a3 < 2)
        return result;
    }
    else
    {
      v28[0] = *a2;
      result = (uint64_t **)std::ostream::write();
      if (a3 < 2)
        return result;
    }
  }
  v9 = a2 + 1;
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v10 + 40))
  {
    *(_QWORD *)v28 = v10 + 16;
    sub_20E9F4CE4((uint64_t)&v27, (uint64_t **)v28, v9);
    v11 = a2 + 2;
    v12 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v12 + 40))
      goto LABEL_10;
LABEL_16:
    if (*v11)
      v14 = -61;
    else
      v14 = -62;
    v28[0] = v14;
    result = (uint64_t **)std::ostream::write();
    if (a3 == 2)
      return result;
    goto LABEL_20;
  }
  if (*v9)
    v13 = -61;
  else
    v13 = -62;
  v28[0] = v13;
  std::ostream::write();
  v11 = a2 + 2;
  v12 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v12 + 40))
    goto LABEL_16;
LABEL_10:
  *(_QWORD *)v28 = v12 + 16;
  result = sub_20E9F4CE4((uint64_t)&v27, (uint64_t **)v28, v11);
  if (a3 == 2)
    return result;
LABEL_20:
  v15 = a2 + 3;
  v16 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v16 + 40))
  {
    *(_QWORD *)v28 = v16 + 16;
    result = sub_20E9F4CE4((uint64_t)&v27, (uint64_t **)v28, v15);
    if (a3 < 4)
      return result;
  }
  else
  {
    if (*v15)
      v17 = -61;
    else
      v17 = -62;
    v28[0] = v17;
    result = (uint64_t **)std::ostream::write();
    if (a3 < 4)
      return result;
  }
  v18 = a2 + 4;
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    *(_QWORD *)v28 = v19 + 16;
    result = sub_20E9F4CE4((uint64_t)&v27, (uint64_t **)v28, v18);
    if (a3 == 4)
      return result;
  }
  else
  {
    if (*v18)
      v20 = -61;
    else
      v20 = -62;
    v28[0] = v20;
    result = (uint64_t **)std::ostream::write();
    if (a3 == 4)
      return result;
  }
  v21 = (unint64_t *)(a2 + 8);
  v22 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v22 + 40))
  {
    *(_QWORD *)v28 = v22 + 16;
    result = sub_20E9F4C08((uint64_t)&v27, (uint64_t **)v28, v21);
    if (a3 < 6)
      return result;
  }
  else
  {
    v23 = *v21;
    v28[0] = -53;
    *(_QWORD *)&v28[1] = bswap64(v23);
    result = (uint64_t **)std::ostream::write();
    if (a3 < 6)
      return result;
  }
  v24 = a2 + 16;
  v25 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v25 + 40))
  {
    *(_QWORD *)v28 = v25 + 16;
    return sub_20E9F4CE4((uint64_t)&v27, (uint64_t **)v28, v24);
  }
  else
  {
    if (*v24)
      v26 = -61;
    else
      v26 = -62;
    v28[0] = v26;
    return (uint64_t **)std::ostream::write();
  }
}

char *sub_20EADC3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  char v19;
  _BYTE v20[9];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      *(_QWORD *)v20 = v2 + 16;
      sub_20E9F3164((uint64_t **)v20, 1);
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v5 + 40))
        goto LABEL_4;
    }
    else
    {
      v20[0] = 1;
      std::ostream::write();
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v5 + 40))
      {
LABEL_4:
        *(_QWORD *)v20 = v5 + 16;
        sub_20E9F3D4C((uint64_t **)v20, 2u);
        v6 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v6 + 40))
          goto LABEL_5;
        goto LABEL_14;
      }
    }
    sub_20E9F3FC0((uint64_t)v20, v5 + 8);
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
LABEL_5:
      *(_QWORD *)v20 = v6 + 16;
      sub_20E9F3D4C((uint64_t **)v20, *(_DWORD *)a2);
      v7 = (unint64_t *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_14:
    sub_20E9F3FC0((uint64_t)v20, v6 + 8);
    v7 = (unint64_t *)(a2 + 8);
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
LABEL_6:
      *(_QWORD *)v20 = v8 + 16;
      sub_20E9F4C08((uint64_t)&v19, (uint64_t **)v20, v7);
      v9 = (unint64_t *)(a2 + 16);
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
        goto LABEL_7;
      goto LABEL_16;
    }
LABEL_15:
    v15 = *v7;
    v20[0] = -53;
    *(_QWORD *)&v20[1] = bswap64(v15);
    std::ostream::write();
    v9 = (unint64_t *)(a2 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v10 + 40))
    {
LABEL_7:
      *(_QWORD *)v20 = v10 + 16;
      sub_20E9F4C08((uint64_t)&v19, (uint64_t **)v20, v9);
      v11 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v11 + 40))
        goto LABEL_8;
      goto LABEL_17;
    }
LABEL_16:
    v16 = *v9;
    v20[0] = -53;
    *(_QWORD *)&v20[1] = bswap64(v16);
    std::ostream::write();
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
    {
LABEL_8:
      *(_QWORD *)v20 = v11 + 16;
      sub_20E9F3164((uint64_t **)v20, *(_BYTE *)(a2 + 24));
      v12 = (unint64_t *)(a2 + 32);
      v13 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v13 + 40))
      {
LABEL_9:
        *(_QWORD *)v20 = v13 + 16;
        return (char *)sub_20E9F4C08((uint64_t)&v19, (uint64_t **)v20, v12);
      }
      goto LABEL_22;
    }
LABEL_17:
    v17 = *(char *)(a2 + 24);
    if (v17 < 0)
    {
      v20[0] = -52;
      v20[1] = v17;
      std::ostream::write();
      v12 = (unint64_t *)(a2 + 32);
      v13 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v13 + 40))
        goto LABEL_9;
    }
    else
    {
      v20[0] = *(_BYTE *)(a2 + 24);
      std::ostream::write();
      v12 = (unint64_t *)(a2 + 32);
      v13 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v13 + 40))
        goto LABEL_9;
    }
LABEL_22:
    v18 = *v12;
    v20[0] = -53;
    *(_QWORD *)&v20[1] = bswap64(v18);
    return (char *)std::ostream::write();
  }
  if (*(_BYTE *)(v2 + 40))
  {
    *(_QWORD *)v20 = v2 + 16;
    return sub_20E9F3164((uint64_t **)v20, 0);
  }
  v20[0] = 0;
  return (char *)std::ostream::write();
}

uint64_t sub_20EADC6A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _BYTE v18[9];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    v4 = (_BYTE *)(a3 + 12);
    v5 = 32 * a2;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 24);
      if (*(_BYTE *)(v7 + 40))
      {
        *(_QWORD *)v18 = v7 + 16;
        sub_20E9F3D4C((uint64_t **)v18, 1u);
        v8 = *(_QWORD *)(v3 + 24);
        if (*(_BYTE *)(v8 + 40))
          goto LABEL_6;
LABEL_13:
        sub_20E9F3FC0((uint64_t)v18, v8 + 8);
        v9 = *(_QWORD *)(v3 + 24);
        if (!*(_BYTE *)(v9 + 40))
          goto LABEL_14;
LABEL_7:
        *(_QWORD *)v18 = v9 + 16;
        sub_20E9F3D4C((uint64_t **)v18, *((_DWORD *)v4 - 2));
        v10 = *(_QWORD *)(v3 + 24);
        if (*(_BYTE *)(v10 + 40))
          goto LABEL_8;
LABEL_15:
        sub_20E9F3FC0((uint64_t)v18, v10 + 8);
        v11 = *(_QWORD *)(v3 + 24);
        if (!*(_BYTE *)(v11 + 40))
          goto LABEL_16;
LABEL_9:
        *(_QWORD *)v18 = v11 + 16;
        sub_20E9F4CE4((uint64_t)&v17, (uint64_t **)v18, v4);
        v12 = (unint64_t *)(v4 + 4);
        v13 = *(_QWORD *)(v3 + 24);
        if (*(_BYTE *)(v13 + 40))
          goto LABEL_10;
LABEL_20:
        v16 = *v12;
        v18[0] = -53;
        *(_QWORD *)&v18[1] = bswap64(v16);
        std::ostream::write();
        v14 = (unint64_t *)(v4 + 12);
        v15 = *(_QWORD *)(v3 + 24);
        if (*(_BYTE *)(v15 + 40))
          goto LABEL_21;
LABEL_3:
        v6 = *v14;
        v18[0] = -53;
        *(_QWORD *)&v18[1] = bswap64(v6);
        result = std::ostream::write();
        v4 += 32;
        v5 -= 32;
        if (!v5)
          return result;
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v18, v7 + 8);
        v8 = *(_QWORD *)(v3 + 24);
        if (!*(_BYTE *)(v8 + 40))
          goto LABEL_13;
LABEL_6:
        *(_QWORD *)v18 = v8 + 16;
        sub_20E9F3D4C((uint64_t **)v18, *((_DWORD *)v4 - 3));
        v9 = *(_QWORD *)(v3 + 24);
        if (*(_BYTE *)(v9 + 40))
          goto LABEL_7;
LABEL_14:
        sub_20E9F3FC0((uint64_t)v18, v9 + 8);
        v10 = *(_QWORD *)(v3 + 24);
        if (!*(_BYTE *)(v10 + 40))
          goto LABEL_15;
LABEL_8:
        *(_QWORD *)v18 = v10 + 16;
        sub_20E9F3D4C((uint64_t **)v18, *((_DWORD *)v4 - 1));
        v11 = *(_QWORD *)(v3 + 24);
        if (*(_BYTE *)(v11 + 40))
          goto LABEL_9;
LABEL_16:
        if (*v4)
          v18[0] = -61;
        else
          v18[0] = -62;
        std::ostream::write();
        v12 = (unint64_t *)(v4 + 4);
        v13 = *(_QWORD *)(v3 + 24);
        if (!*(_BYTE *)(v13 + 40))
          goto LABEL_20;
LABEL_10:
        *(_QWORD *)v18 = v13 + 16;
        sub_20E9F4C08((uint64_t)&v17, (uint64_t **)v18, v12);
        v14 = (unint64_t *)(v4 + 12);
        v15 = *(_QWORD *)(v3 + 24);
        if (!*(_BYTE *)(v15 + 40))
          goto LABEL_3;
LABEL_21:
        *(_QWORD *)v18 = v15 + 16;
        result = (uint64_t)sub_20E9F4C08((uint64_t)&v17, (uint64_t **)v18, v14);
        v4 += 32;
        v5 -= 32;
        if (!v5)
          return result;
      }
    }
  }
  return result;
}

char *sub_20EADC918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _BYTE v14[9];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 8))
  {
    if (*(_BYTE *)(v4 + 40))
    {
      *(_QWORD *)v14 = v4 + 16;
      sub_20E9F3164((uint64_t **)v14, 0);
      if (*(_BYTE *)(a2 + 24))
        goto LABEL_14;
    }
    else
    {
      v14[0] = 0;
      std::ostream::write();
      if (*(_BYTE *)(a2 + 24))
        goto LABEL_14;
    }
LABEL_8:
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      *(_QWORD *)v14 = v6 + 16;
      return sub_20E9F3164((uint64_t **)v14, 0);
    }
    v14[0] = 0;
    return (char *)std::ostream::write();
  }
  if (*(_BYTE *)(v4 + 40))
  {
    *(_QWORD *)v14 = v4 + 16;
    sub_20E9F3164((uint64_t **)v14, 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_4;
LABEL_11:
    v8 = *(_QWORD *)a2;
    v14[0] = -53;
    *(_QWORD *)&v14[1] = bswap64(v8);
    std::ostream::write();
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_8;
    goto LABEL_14;
  }
  v14[0] = 1;
  std::ostream::write();
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
    goto LABEL_11;
LABEL_4:
  *(_QWORD *)v14 = v5 + 16;
  sub_20E9F4C08((uint64_t)&v13, (uint64_t **)v14, (unint64_t *)a2);
  if (!*(_BYTE *)(a2 + 24))
    goto LABEL_8;
LABEL_14:
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    *(_QWORD *)v14 = v9 + 16;
    sub_20E9F3164((uint64_t **)v14, 1);
    v10 = (unint64_t *)(a2 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
    {
LABEL_16:
      *(_QWORD *)v14 = v11 + 16;
      return (char *)sub_20E9F4C08((uint64_t)&v13, (uint64_t **)v14, v10);
    }
  }
  else
  {
    v14[0] = 1;
    std::ostream::write();
    v10 = (unint64_t *)(a2 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
      goto LABEL_16;
  }
  v12 = *v10;
  v14[0] = -53;
  *(_QWORD *)&v14[1] = bswap64(v12);
  return (char *)std::ostream::write();
}

void sub_20EADCB24()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EADCB38()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9C3A38;
  return result;
}

void sub_20EADCB5C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9C3A38;
}

uint64_t sub_20EADCB74(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  _QWORD *exception;

  result = *a2;
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_20EADCBB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EADCC20()
{
  return &unk_24C9C3AA8;
}

uint64_t sub_20EADCC2C(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  _QWORD *exception;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t *v16;

  if (!*(_BYTE *)(a2 + 4))
  {
    v11 = a1;
    v12 = "unexpected{";
    v13 = a1;
    v14 = "unexpected{";
    v15 = "unexpected{";
    v7 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v7 != -1)
    {
      v16 = &v11;
      ((void (*)(uint64_t **, uint64_t))off_24C9C3AB8[v7])(&v16, a1);
      if (*(_BYTE *)(a2 + 4))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C9B4620;
        __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
      }
      sub_20E920A5C((uint64_t)&v11, a1, (_DWORD *)a2);
      v11 = a1;
      v12 = "}";
      v13 = a1;
      v14 = "}";
      v15 = "}";
      v5 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v5 != -1)
      {
        v16 = &v11;
        v6 = off_24C9C3AD0;
        return ((uint64_t (*)(uint64_t **, uint64_t))v6[v5])(&v16, a1);
      }
    }
LABEL_11:
    sub_20E877AB8();
  }
  v4 = "true";
  if (!*(_BYTE *)a2)
    v4 = "false";
  v10 = v4;
  v11 = a1;
  v12 = (const char *)&v10;
  v13 = a1;
  v14 = (const char *)&v10;
  v15 = (const char *)&v10;
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  v16 = &v11;
  v6 = off_24C9C3B00;
  return ((uint64_t (*)(uint64_t **, uint64_t))v6[v5])(&v16, a1);
}

_DWORD *sub_20EADCD74(_DWORD ***a1)
{
  return sub_20EADCD90(**a1, (char *)(*a1)[1]);
}

void sub_20EADCD80(uint64_t a1, uint64_t a2)
{
  sub_20EADCE80((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EADCD90(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C39C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EADCE80(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C39C8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EADD034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EADD078(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EADD170((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EADD168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EADD170(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EADD36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EADD380(_DWORD ***a1)
{
  return sub_20E8ECB20(**a1, (char *)(*a1)[1]);
}

void sub_20EADD38C(uint64_t a1, uint64_t a2)
{
  sub_20EADD39C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EADD39C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C39C8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EADD550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EADD594(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EADD68C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EADD684(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EADD68C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EADD888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EADD89C(_DWORD ***a1)
{
  return sub_20EADD8B8(**a1, (char *)(*a1)[1]);
}

void sub_20EADD8A8(uint64_t a1, uint64_t a2)
{
  sub_20EADD9A8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EADD8B8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C39C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EADD9A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C39C8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EADDB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EADDBA0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EADDC98((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EADDC90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EADDC98(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EADDE94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EADDEA8(_DWORD ***a1)
{
  return sub_20EADDEC4(**a1, (char *)(*a1)[1]);
}

void sub_20EADDEB4(uint64_t a1, uint64_t a2)
{
  sub_20EADDFB4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EADDEC4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C39C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EADDFB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C39C8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EADE168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EADE1AC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EADE2A4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EADE29C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EADE2A4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EADE4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EADE4B4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C9C3C08[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 1088) = -1;
  return a1;
}

uint64_t sub_20EADE50C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C9C3C08[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 1088) = -1;
  return MEMORY[0x212BC6398](a1, 0x10E3C4054EAF917);
}

uint64_t sub_20EADE578(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  unint64_t **v6;
  uint64_t result;
  std::bad_cast v8;
  int v9;
  char v10;
  _QWORD v11[2];

  v3 = *(_QWORD *)(a2 + 160);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 != (const char *)(0x8000000210314124 & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v5, (const char *)(0x8000000210314124 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v8.__vftable = 0;
    std::bad_cast::bad_cast(&v8);
    v8.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
    sub_20EAA40CC();
  }
  v6 = (unint64_t **)(*(_QWORD *)(a2 + 160) + 8);
  v9 = 0;
  sub_20EAE00A0((uint64_t)v11, (uint64_t)&v8, v6);
  if (v9 == -1)
    sub_20E877AB8();
  v11[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, std::bad_cast *))off_24C9C3DC0[v9])(v11, &v8);
  if (v9 != -1)
    return ((uint64_t (*)(_QWORD *, std::bad_cast *))off_24C9C3D78[v9])(v11, &v8);
  return result;
}

void sub_20EADE68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void sub_20EADE6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9C3D78[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void *sub_20EADE6D8(const void *a1)
{
  void *result;

  result = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C3E80, 0);
  if (!result)
    __cxa_bad_cast();
  return result;
}

uint64_t sub_20EADE708(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  char **v6;
  uint64_t result;
  std::bad_cast v8;
  int v9;
  char v10;
  _QWORD v11[2];

  v3 = *(_QWORD *)(a2 + 160);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 != (const char *)(0x8000000210314148 & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v5, (const char *)(0x8000000210314148 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v8.__vftable = 0;
    std::bad_cast::bad_cast(&v8);
    v8.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
    sub_20EAA40CC();
  }
  v6 = (char **)(*(_QWORD *)(a2 + 160) + 8);
  v9 = 0;
  sub_20EAE02EC((uint64_t)v11, (uint64_t)&v8, v6);
  if (v9 == -1)
    sub_20E877AB8();
  v11[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, std::bad_cast *))off_24C9C3DC0[v9])(v11, &v8);
  if (v9 != -1)
    return ((uint64_t (*)(_QWORD *, std::bad_cast *))off_24C9C3D78[v9])(v11, &v8);
  return result;
}

void sub_20EADE81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void sub_20EADE830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9C3D78[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void *sub_20EADE868(const void *a1)
{
  void *result;

  result = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C3EF0, 0);
  if (!result)
    __cxa_bad_cast();
  return result;
}

void sub_20EADE898(uint64_t a1, void **a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  char *v24;
  void *v25;
  uint64_t (***v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  double v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  float v53;
  std::string::size_type v54;
  std::string *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::string::size_type v66;
  std::string *v67;
  unint64_t v68;
  const void **v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  int v76;
  size_t v77;
  unint64_t v78;
  std::string::value_type *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  const void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  double *v90;
  double *v91;
  unint64_t v92;
  const void **v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  float *v100;
  float *v101;
  std::string *v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  std::bad_cast_vtbl *v110;
  unsigned int *v111;
  std::bad_cast_vtbl *v112;
  __int128 v113;
  std::bad_cast_vtbl *v114;
  std::bad_cast_vtbl *v115;
  __int128 v116;
  __int128 v117;
  std::string *v118;
  int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string v137;
  void *lpsrc;
  unsigned int *v139;
  uint64_t v140;
  unsigned int *v141;
  _QWORD v142[2];
  uint64_t v143;
  _QWORD v144[2];
  _QWORD v145[3];
  uint64_t v146;
  unint64_t v147;
  void *v148;
  char v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  _QWORD v153[2];
  uint64_t v154;
  _QWORD v155[2];
  _QWORD v156[3];
  uint64_t v157;
  unint64_t v158;
  void *__p;
  char v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  std::bad_cast v164;
  std::bad_cast_vtbl *v165;
  std::bad_cast_vtbl *v166;
  std::bad_cast_vtbl *v167;
  _QWORD *v168;
  char v169;
  char *v170;
  char v171;
  _QWORD v172[5];
  _QWORD *v173;
  _QWORD v174[5];
  _QWORD *v175;
  char v176;
  char v177;
  char *v178;
  char v179;
  _QWORD v180[5];
  _QWORD *v181;
  _QWORD v182[5];
  _QWORD *v183;
  char v184;
  std::string v185;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 4);
  v5 = (_QWORD *)sub_20E8B394C(a1);
  v6 = v4 + ((uint64_t)(v5[1] - *v5) >> 4);
  v7 = (void **)*a2;
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[2] - (_BYTE *)*a2) >> 4) < v6)
  {
    if (v6 > 0x555555555555555)
      sub_20E867F44();
    v8 = (void **)a2[1];
    v9 = 48 * v6;
    v10 = (char *)operator new(48 * v6);
    v11 = &v10[v9];
    v12 = &v10[(char *)v8 - (char *)v7];
    if (v8 != v7)
    {
      v13 = &v10[(char *)v8 - (char *)v7];
      do
      {
        v14 = *((_OWORD *)v8 - 3);
        *((_QWORD *)v13 - 4) = *(v8 - 4);
        *((_OWORD *)v13 - 3) = v14;
        *(v8 - 5) = 0;
        *(v8 - 4) = 0;
        *(v8 - 6) = 0;
        v15 = *(_OWORD *)(v8 - 3);
        *((_QWORD *)v13 - 1) = *(v8 - 1);
        *(_OWORD *)(v13 - 24) = v15;
        v13 -= 48;
        *(v8 - 2) = 0;
        *(v8 - 1) = 0;
        *(v8 - 3) = 0;
        v8 -= 6;
      }
      while (v8 != v7);
      v7 = (void **)*a2;
      v16 = (void **)a2[1];
      *a2 = v13;
      a2[1] = v12;
      a2[2] = v11;
      while (1)
      {
        if (v16 == v7)
          goto LABEL_14;
        if (*((char *)v16 - 1) < 0)
        {
          operator delete(*(v16 - 3));
          if ((*((char *)v16 - 25) & 0x80000000) == 0)
            goto LABEL_8;
        }
        else if ((*((char *)v16 - 25) & 0x80000000) == 0)
        {
          goto LABEL_8;
        }
        operator delete(*(v16 - 6));
LABEL_8:
        v16 -= 6;
      }
    }
    *a2 = v12;
    a2[1] = v12;
    a2[2] = v11;
LABEL_14:
    if (v7)
      operator delete(v7);
  }
  v17 = sub_20E8B394C(a1);
  v18 = *(uint64_t **)v17;
  v19 = *(uint64_t **)(v17 + 8);
  if (*(uint64_t **)v17 != v19)
  {
    v135 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v136 = *MEMORY[0x24BEDB7F0];
    v134 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v133 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v21 = *v18;
      v20 = (unsigned int *)v18[1];
      v140 = *v18;
      v141 = v20;
      if (v20)
      {
        v22 = v20 + 2;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      if (!v21)
        goto LABEL_241;
      sub_20E8B2E60(v21, &lpsrc);
      if (!lpsrc
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/StringFormattingUtil.cpp", 122, (uint64_t)"semantic_val_ptr", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v24 = (char *)sub_20E8B2A5C(v21);
      v25 = lpsrc;
      v26 = (uint64_t (***)(_QWORD))__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9AB9A8, -2);
      if (!v26)
        __cxa_bad_cast();
      v27 = (**v26)(v26);
      v28 = *(_QWORD *)(v27 + 8);
      v29 = *(_QWORD *)(MEMORY[0x24BEDB780] + 8);
      if (v28 == v29
        || (v29 & v28) < 0 != __OFSUB__(v28, v29)
        && !strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v29 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        break;
      }
      v35 = *(_QWORD *)(MEMORY[0x24BEDB788] + 8);
      if (v28 == v35
        || (v35 & v28) < 0 != __OFSUB__(v28, v35)
        && !strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v36 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C3C80, 0);
        if (!v36)
          goto LABEL_253;
        v31 = v36;
        v37 = v36[20];
        if (v37)
        {
          v38 = (const char *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37) + 8) & 0x7FFFFFFFFFFFFFFFLL);
          v39 = (const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL);
          if (v38 == (const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_64;
        }
        else
        {
          v38 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
          v39 = (const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL);
          if (v38 == (const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_64;
        }
        if (strcmp(v38, v39))
        {
          v164.__vftable = 0;
          std::bad_cast::bad_cast(&v164);
          v164.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
          sub_20EAA40CC();
        }
LABEL_64:
        v53 = *(float *)(v31[20] + 8);
        if (v53 == 3.4028e38)
        {
LABEL_65:
          *((_BYTE *)&v137.__r_.__value_.__s + 23) = 7;
          v46 = 1599360070;
          goto LABEL_66;
        }
        if (v53 == -3.4028e38)
        {
LABEL_85:
          *((_BYTE *)&v137.__r_.__value_.__s + 23) = 8;
          v47 = 1414284845;
          goto LABEL_86;
        }
        if (v53 == 0.0 || fabsf(v53) >= 0.000001)
          goto LABEL_98;
        sub_20E863438((uint64_t)v153);
        *(_DWORD *)((char *)v155 + *(_QWORD *)(v154 - 24)) = *(_DWORD *)((_BYTE *)v155 + *(_QWORD *)(v154 - 24)) & 0xFFFFFEFB | 0x100;
        std::ostream::operator<<();
        if ((v162 & 0x10) != 0)
        {
          v68 = v161;
          v69 = (const void **)&v157;
          if (v161 < v158)
          {
            v161 = v158;
            v68 = v158;
            v69 = (const void **)&v157;
          }
        }
        else
        {
          if ((v162 & 8) == 0)
          {
            v54 = 0;
            *((_BYTE *)&v137.__r_.__value_.__s + 23) = 0;
            v55 = &v137;
            goto LABEL_144;
          }
          v68 = v156[2];
          v69 = (const void **)v156;
        }
        v84 = *v69;
        v54 = v68 - (_QWORD)*v69;
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v54 >= 0x17)
        {
          v85 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v85 = v54 | 7;
          v86 = v85 + 1;
          v55 = (std::string *)operator new(v85 + 1);
          v137.__r_.__value_.__l.__size_ = v54;
          v137.__r_.__value_.__r.__words[2] = v86 | 0x8000000000000000;
          v137.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        }
        else
        {
          *((_BYTE *)&v137.__r_.__value_.__s + 23) = v68 - *(_BYTE *)v69;
          v55 = &v137;
          if (!v54)
            goto LABEL_144;
        }
        memmove(v55, v84, v54);
LABEL_144:
        v55->__r_.__value_.__s.__data_[v54] = 0;
        v153[0] = v136;
        *(_QWORD *)((char *)v153 + *(_QWORD *)(v136 - 24)) = v135;
        v154 = v134;
        v155[0] = MEMORY[0x24BEDB848] + 16;
        if (v160 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x212BC6290](&v163);
        goto LABEL_199;
      }
      v40 = *(_QWORD *)(MEMORY[0x24BEDB7B0] + 8);
      if (v28 == v40
        || (v40 & v28) < 0 != __OFSUB__(v28, v40)
        && !strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v40 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v41 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C3278, 0);
        if (!v41)
          goto LABEL_253;
        v31 = v41;
        v42 = v41[20];
        if (v42)
        {
          v43 = (const char *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42) + 8) & 0x7FFFFFFFFFFFFFFFLL);
          v44 = (const char *)(v40 & 0x7FFFFFFFFFFFFFFFLL);
          if (v43 == (const char *)(v40 & 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_82;
LABEL_81:
          if (strcmp(v43, v44))
          {
            v164.__vftable = 0;
            std::bad_cast::bad_cast(&v164);
            v164.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
            sub_20EAA40CC();
          }
          goto LABEL_82;
        }
        v43 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v44 = (const char *)(v40 & 0x7FFFFFFFFFFFFFFFLL);
        if (v43 != (const char *)(v40 & 0x7FFFFFFFFFFFFFFFLL))
          goto LABEL_81;
LABEL_82:
        if (*(_QWORD *)(v31[20] + 8) == -1)
        {
          *((_BYTE *)&v137.__r_.__value_.__s + 23) = 8;
          v47 = 1163544915;
          goto LABEL_86;
        }
LABEL_98:
        v64 = (*(uint64_t (**)(_QWORD *))(*v31 + 96))(v31);
        if ((*(char *)(v64 + 23) & 0x80000000) == 0)
          goto LABEL_99;
LABEL_251:
        sub_20E860C04(&v137, *(void **)v64, *(_QWORD *)(v64 + 8));
        goto LABEL_199;
      }
      v48 = *(_QWORD *)(MEMORY[0x24BEDB7D8] + 8);
      if (v28 == v48
        || (v48 & v28) < 0 != __OFSUB__(v28, v48)
        && !strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v48 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v49 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C3CF0, 0);
        if (!v49)
          goto LABEL_253;
        v31 = v49;
        v50 = v49[20];
        if (v50)
        {
          v51 = (const char *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50) + 8) & 0x7FFFFFFFFFFFFFFFLL);
          v52 = (const char *)(v48 & 0x7FFFFFFFFFFFFFFFLL);
          if (v51 == (const char *)(v48 & 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_97;
        }
        else
        {
          v51 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
          v52 = (const char *)(v48 & 0x7FFFFFFFFFFFFFFFLL);
          if (v51 == (const char *)(v48 & 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_97;
        }
        if (strcmp(v51, v52))
        {
          v164.__vftable = 0;
          std::bad_cast::bad_cast(&v164);
          v164.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
          sub_20EAA40CC();
        }
LABEL_97:
        if (*(_QWORD *)(v31[20] + 8) == -1)
        {
          *((_BYTE *)&v137.__r_.__value_.__s + 23) = 10;
          strcpy((char *)&v137, "UINT64_MAX");
          goto LABEL_199;
        }
        goto LABEL_98;
      }
      if (v28 == 0x80000002102D7028
        || ((v28 & 0x80000002102D7028 & 0x8000000000000000) != 0) != __OFSUB__(v28, 0x80000002102D7028)
        && !strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002102D7028 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v56 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C3D28, 0);
        if (!v56)
          goto LABEL_253;
        v57 = v56;
        v58 = v56[20];
        if (v58)
          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
        else
          v59 = MEMORY[0x24BEDB7C8];
        v74 = (const char *)(*(_QWORD *)(v59 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v74 != (const char *)(0x80000002102D7028 & 0x7FFFFFFFFFFFFFFFLL)
          && strcmp(v74, (const char *)(0x80000002102D7028 & 0x7FFFFFFFFFFFFFFFLL)))
        {
          v164.__vftable = 0;
          std::bad_cast::bad_cast(&v164);
          v164.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
          sub_20EAA40CC();
        }
        v75 = v57[20];
        v76 = *(char *)(v75 + 31);
        if (v76 >= 0)
          v77 = *(unsigned __int8 *)(v75 + 31);
        else
          v77 = *(_QWORD *)(v75 + 16);
        v78 = v77 + 1;
        if (v77 + 1 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v78 >= 0x17)
        {
          v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17)
            v80 = v78 | 7;
          v81 = v80 + 1;
          v82 = operator new(v80 + 1);
          v185.__r_.__value_.__l.__size_ = v77 + 1;
          v185.__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          *v82 = 34;
          v79 = v82 + 1;
        }
        else
        {
          v185.__r_.__value_.__r.__words[2] = 0;
          *(_OWORD *)&v185.__r_.__value_.__l.__data_ = 0x22uLL;
          *((_BYTE *)&v185.__r_.__value_.__s + 23) = v77 + 1;
          v79 = &v185.__r_.__value_.__s.__data_[1];
          if (!v77)
          {
LABEL_133:
            v79[v77] = 0;
            std::string::push_back(&v185, 34);
            v137 = v185;
            goto LABEL_199;
          }
        }
        if (v76 >= 0)
          v83 = (const void *)(v75 + 8);
        else
          v83 = *(const void **)(v75 + 8);
        memmove(v79, v83, v77);
        goto LABEL_133;
      }
      if (v28 == 0x8000000210313640
        || ((v28 & 0x8000000210313640 & 0x8000000000000000) != 0) != __OFSUB__(v28, 0x8000000210313640)
        && !strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000210313640 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v60 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C2F10, 0);
        if (!v60)
          goto LABEL_253;
        v61 = v60;
        v62 = v60[20];
        if (v62)
          v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
        else
          v63 = MEMORY[0x24BEDB7C8];
        v88 = (const char *)(*(_QWORD *)(v63 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v88 != (const char *)(0x8000000210313640 & 0x7FFFFFFFFFFFFFFFLL)
          && strcmp(v88, (const char *)(0x8000000210313640 & 0x7FFFFFFFFFFFFFFFLL)))
        {
          v164.__vftable = 0;
          std::bad_cast::bad_cast(&v164);
          v164.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
          sub_20EAA40CC();
        }
        v89 = v61[20];
        LODWORD(v167) = 0;
        if ((uint64_t)(*(_QWORD *)(v89 + 16) - *(_QWORD *)(v89 + 8)) > 7)
        {
          sub_20E89FDB0(&v164, "{");
          v90 = *(double **)(v89 + 8);
          sub_20E87876C((uint64_t)&v179, (uint64_t)&v164, v90);
          v91 = *(double **)(v89 + 16);
          while (++v90 != v91)
          {
            v182[0] = &v164;
            v182[1] = ",";
            v182[2] = &v164;
            v182[3] = ",";
            v182[4] = ",";
            if ((_DWORD)v167 == -1)
              goto LABEL_256;
            v183 = v182;
            ((void (*)(_QWORD **, std::bad_cast *))off_24C9C3D90[v167])(&v183, &v164);
            sub_20E87876C((uint64_t)&v184, (uint64_t)&v164, v90);
          }
          v180[0] = &v164;
          v180[1] = "}";
          v180[2] = &v164;
          v180[3] = "}";
          v180[4] = "}";
          if ((_DWORD)v167 == -1)
LABEL_256:
            sub_20E877AB8();
          v181 = v180;
          ((void (*)(_QWORD **, std::bad_cast *))off_24C9C3D90[v167])(&v181, &v164);
        }
        else
        {
          sub_20EA5D220(&v164, "{}");
        }
        if ((_DWORD)v167 == -1)
          sub_20E877AB8();
        v178 = &v177;
        ((void (*)(std::string *__return_ptr, char **, std::bad_cast *))off_24C9C3DC0[v167])(&v137, &v178, &v164);
        if ((_DWORD)v167 != -1)
          ((void (*)(char **, std::bad_cast *))off_24C9C3D78[v167])(&v178, &v164);
      }
      else
      {
        if (v28 != 0x8000000210314100
          && (((v28 & 0x8000000210314100 & 0x8000000000000000) != 0) == __OFSUB__(v28, 0x8000000210314100)
           || strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000210314100 & 0x7FFFFFFFFFFFFFFFLL))))
        {
          if (v28 == 0x8000000210314124
            || ((v28 & 0x8000000210314124 & 0x8000000000000000) != 0) != __OFSUB__(v28, 0x8000000210314124)
            && !strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000210314124 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            v87 = sub_20EADE6D8(v25);
            sub_20EADE578((uint64_t)&v137, (uint64_t)v87);
            goto LABEL_199;
          }
          if (sub_20E8B692C(v27, (uint64_t)&unk_24C9C3C38))
          {
            v97 = sub_20EADE868(v25);
            sub_20EADE708((uint64_t)&v137, (uint64_t)v97);
            goto LABEL_199;
          }
          v132 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24CA181E0, -2);
          if (!v132)
            __cxa_bad_cast();
          v64 = (*(uint64_t (**)(void *))(*(_QWORD *)v132 + 16))(v132);
          if ((*(char *)(v64 + 23) & 0x80000000) == 0)
          {
LABEL_99:
            v65 = *(_OWORD *)v64;
            v137.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 16);
            *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v65;
            goto LABEL_199;
          }
          goto LABEL_251;
        }
        v70 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C3E10, 0);
        if (!v70)
LABEL_253:
          __cxa_bad_cast();
        v71 = v70;
        v72 = v70[20];
        if (v72)
          v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
        else
          v73 = MEMORY[0x24BEDB7C8];
        v98 = (const char *)(*(_QWORD *)(v73 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v98 != (const char *)(0x8000000210314100 & 0x7FFFFFFFFFFFFFFFLL)
          && strcmp(v98, (const char *)(0x8000000210314100 & 0x7FFFFFFFFFFFFFFFLL)))
        {
          v164.__vftable = 0;
          std::bad_cast::bad_cast(&v164);
          v164.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
          sub_20EAA40CC();
        }
        v99 = v71[20];
        LODWORD(v167) = 0;
        if ((uint64_t)(*(_QWORD *)(v99 + 16) - *(_QWORD *)(v99 + 8)) > 3)
        {
          sub_20E89FDB0(&v164, "{");
          v100 = *(float **)(v99 + 8);
          sub_20E89F7C4((uint64_t)&v171, (uint64_t)&v164, v100);
          v101 = *(float **)(v99 + 16);
          while (++v100 != v101)
          {
            v174[0] = &v164;
            v174[1] = ",";
            v174[2] = &v164;
            v174[3] = ",";
            v174[4] = ",";
            if ((_DWORD)v167 == -1)
              goto LABEL_258;
            v175 = v174;
            ((void (*)(_QWORD **, std::bad_cast *))off_24C9C3D90[v167])(&v175, &v164);
            sub_20E89F7C4((uint64_t)&v176, (uint64_t)&v164, v100);
          }
          v172[0] = &v164;
          v172[1] = "}";
          v172[2] = &v164;
          v172[3] = "}";
          v172[4] = "}";
          if ((_DWORD)v167 == -1)
LABEL_258:
            sub_20E877AB8();
          v173 = v172;
          ((void (*)(_QWORD **, std::bad_cast *))off_24C9C3D90[v167])(&v173, &v164);
        }
        else
        {
          sub_20EA5D220(&v164, "{}");
        }
        if ((_DWORD)v167 == -1)
          sub_20E877AB8();
        v170 = &v169;
        ((void (*)(std::string *__return_ptr, char **, std::bad_cast *))off_24C9C3DC0[v167])(&v137, &v170, &v164);
        if ((_DWORD)v167 != -1)
          ((void (*)(char **, std::bad_cast *))off_24C9C3D78[v167])(&v170, &v164);
      }
LABEL_199:
      v103 = (std::string *)a2[1];
      v102 = (std::string *)a2[2];
      if (v103 >= v102)
      {
        v105 = (std::string *)*a2;
        v106 = 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (_BYTE *)*a2) >> 4);
        v107 = v106 + 1;
        if (v106 + 1 > 0x555555555555555)
          sub_20E867F44();
        v108 = 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v105) >> 4);
        if (2 * v108 > v107)
          v107 = 2 * v108;
        if (v108 >= 0x2AAAAAAAAAAAAAALL)
          v109 = 0x555555555555555;
        else
          v109 = v107;
        v168 = a2 + 2;
        if (v109)
        {
          if (v109 > 0x555555555555555)
            sub_20E877A38();
          v110 = (std::bad_cast_vtbl *)operator new(48 * v109);
        }
        else
        {
          v110 = 0;
        }
        v112 = v110 + 2 * v106;
        v164.__vftable = v110;
        v165 = v112;
        v166 = v112;
        v167 = &v110[2 * v109];
        if (v24[23] < 0)
        {
          sub_20E860C04(v112, *(void **)v24, *((_QWORD *)v24 + 1));
          v114 = v166;
          v112 = v165;
          v105 = (std::string *)*a2;
          v103 = (std::string *)a2[1];
        }
        else
        {
          v113 = *(_OWORD *)v24;
          v112->what = (const char *(__cdecl *)(const std::bad_cast *__hidden))*((_QWORD *)v24 + 2);
          *(_OWORD *)&v112->~bad_cast = v113;
          v114 = v110 + 2 * v106;
        }
        *((std::string *)&v110[1] + 2 * v106) = v137;
        memset(&v137, 0, sizeof(v137));
        v115 = v114 + 2;
        if (v103 != v105)
        {
          do
          {
            v116 = *(_OWORD *)&v103[-2].__r_.__value_.__l.__data_;
            v112[-2].what = (const char *(__cdecl *)(const std::bad_cast *__hidden))v103[-2].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v112[-2].~bad_cast = v116;
            v103[-2].__r_.__value_.__l.__size_ = 0;
            v103[-2].__r_.__value_.__r.__words[2] = 0;
            v103[-2].__r_.__value_.__r.__words[0] = 0;
            v117 = *(_OWORD *)&v103[-1].__r_.__value_.__l.__data_;
            v112[-1].what = (const char *(__cdecl *)(const std::bad_cast *__hidden))v103[-1].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v112[-1].~bad_cast = v117;
            v112 -= 2;
            v103[-1].__r_.__value_.__l.__size_ = 0;
            v103[-1].__r_.__value_.__r.__words[2] = 0;
            v103[-1].__r_.__value_.__r.__words[0] = 0;
            v103 -= 2;
          }
          while (v103 != v105);
          v105 = (std::string *)*a2;
          v118 = (std::string *)a2[1];
          *a2 = v112;
          a2[1] = v115;
          a2[2] = v167;
          while (2)
          {
            if (v118 == v105)
              goto LABEL_228;
            if (SHIBYTE(v118[-1].__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v118[-1].__r_.__value_.__l.__data_);
              if (SHIBYTE(v118[-2].__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_226;
            }
            else if (SHIBYTE(v118[-2].__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_226:
              operator delete(v118[-2].__r_.__value_.__l.__data_);
            }
            v118 -= 2;
            continue;
          }
        }
        *a2 = v112;
        a2[1] = v115;
        a2[2] = v167;
LABEL_228:
        if (v105)
          operator delete(v105);
        v119 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
        a2[1] = v115;
        if (v119 < 0)
        {
          operator delete(v137.__r_.__value_.__l.__data_);
          v111 = v139;
          if (v139)
            goto LABEL_232;
        }
        else
        {
          v111 = v139;
          if (v139)
            goto LABEL_232;
        }
      }
      else
      {
        if (v24[23] < 0)
        {
          sub_20E860C04(a2[1], *(void **)v24, *((_QWORD *)v24 + 1));
        }
        else
        {
          v104 = *(_OWORD *)v24;
          v103->__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
          *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
        }
        v103[1] = v137;
        a2[1] = &v103[2];
        v111 = v139;
        if (v139)
        {
LABEL_232:
          v120 = v111 + 2;
          do
          {
            v121 = __ldaxr(v120);
            v122 = v121 - 1;
          }
          while (__stlxr(v122, v120));
          if (!v122)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v111 + 16))(v111);
            v123 = v111 + 3;
            do
            {
              v124 = __ldaxr(v123);
              v125 = v124 - 1;
            }
            while (__stlxr(v125, v123));
            if (!v125)
              (*(void (**)(unsigned int *))(*(_QWORD *)v111 + 24))(v111);
          }
        }
      }
      v20 = v141;
LABEL_241:
      if (v20)
      {
        v126 = v20 + 2;
        do
        {
          v127 = __ldaxr(v126);
          v128 = v127 - 1;
        }
        while (__stlxr(v128, v126));
        if (!v128)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
          v129 = v20 + 3;
          do
          {
            v130 = __ldaxr(v129);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v129));
          if (!v131)
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 24))(v20);
        }
      }
      v18 += 2;
      if (v18 == v19)
        return;
    }
    v30 = __dynamic_cast(v25, (const struct __class_type_info *)&unk_24C9AE600, (const struct __class_type_info *)&unk_24C9C2658, 0);
    if (!v30)
      goto LABEL_253;
    v31 = v30;
    v32 = v30[20];
    if (v32)
    {
      v33 = (const char *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      v34 = (const char *)(v29 & 0x7FFFFFFFFFFFFFFFLL);
      if (v33 == (const char *)(v29 & 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_49;
    }
    else
    {
      v33 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
      v34 = (const char *)(v29 & 0x7FFFFFFFFFFFFFFFLL);
      if (v33 == (const char *)(v29 & 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_49;
    }
    if (strcmp(v33, v34))
    {
      v164.__vftable = 0;
      std::bad_cast::bad_cast(&v164);
      v164.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
      sub_20EAA40CC();
    }
LABEL_49:
    v45 = *(double *)(v31[20] + 8);
    if (v45 == 1.79769313e308)
    {
      *((_BYTE *)&v137.__r_.__value_.__s + 23) = 7;
      v46 = 1598833220;
LABEL_66:
      LODWORD(v137.__r_.__value_.__l.__data_) = v46;
      strcpy(&v137.__r_.__value_.__s.__data_[3], "_MAX");
      goto LABEL_199;
    }
    if (v45 == 3.40282347e38)
      goto LABEL_65;
    if (v45 == -1.79769313e308)
    {
      *((_BYTE *)&v137.__r_.__value_.__s + 23) = 8;
      v47 = 1279411245;
LABEL_86:
      v137.__r_.__value_.__r.__words[0] = v47 | 0x58414D5F00000000;
      v137.__r_.__value_.__s.__data_[8] = 0;
      goto LABEL_199;
    }
    if (v45 == -3.40282347e38)
      goto LABEL_85;
    if (v45 == 0.0 || fabs(v45) >= 0.000001)
      goto LABEL_98;
    sub_20E863438((uint64_t)v142);
    *(_DWORD *)((char *)v144 + *(_QWORD *)(v143 - 24)) = *(_DWORD *)((_BYTE *)v144 + *(_QWORD *)(v143 - 24)) & 0xFFFFFEFB | 0x100;
    std::ostream::operator<<();
    if ((v151 & 0x10) != 0)
    {
      v92 = v150;
      v93 = (const void **)&v146;
      if (v150 < v147)
      {
        v150 = v147;
        v92 = v147;
        v93 = (const void **)&v146;
      }
    }
    else
    {
      if ((v151 & 8) == 0)
      {
        v66 = 0;
        *((_BYTE *)&v137.__r_.__value_.__s + 23) = 0;
        v67 = &v137;
        goto LABEL_177;
      }
      v92 = v145[2];
      v93 = (const void **)v145;
    }
    v94 = *v93;
    v66 = v92 - (_QWORD)*v93;
    if (v66 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v66 >= 0x17)
    {
      v95 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17)
        v95 = v66 | 7;
      v96 = v95 + 1;
      v67 = (std::string *)operator new(v95 + 1);
      v137.__r_.__value_.__l.__size_ = v66;
      v137.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
      v137.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    }
    else
    {
      *((_BYTE *)&v137.__r_.__value_.__s + 23) = v92 - *(_BYTE *)v93;
      v67 = &v137;
      if (!v66)
        goto LABEL_177;
    }
    memmove(v67, v94, v66);
LABEL_177:
    v67->__r_.__value_.__s.__data_[v66] = 0;
    v142[0] = v136;
    *(_QWORD *)((char *)v142 + *(_QWORD *)(v136 - 24)) = v135;
    v143 = v134;
    v144[0] = v133;
    if (v149 < 0)
      operator delete(v148);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v152);
    goto LABEL_199;
  }
}

void sub_20EADFE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  sub_20EADFF28((uint64_t)&a35);
  sub_20EADFFA4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20EADFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20EADFFA4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_20EADFF28(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t sub_20EADFFA4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t sub_20EAE0020(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EAE00A0(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t *v21;

  if ((char *)a3[1] - (char *)*a3 <= 7)
  {
    v16 = a2;
    v17 = (std::string *)"{}";
    v18 = a2;
    v19 = (std::string *)"{}";
    v20 = (std::string *)"{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
      return ((uint64_t (*)(std::string *, uint64_t))off_24C9C3D60[v4])(&v15, a2);
    }
LABEL_19:
    sub_20E877AB8();
  }
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = a2;
  v19 = (std::string *)"{";
  v20 = (std::string *)"{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24C9C3D90[v6])(&v15, a2);
  v8 = *a3;
  std::to_string(&v15, **a3);
  v16 = a2;
  v17 = &v15;
  v18 = a2;
  v19 = &v15;
  v20 = &v15;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9C3DA8[v9])(&v21, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v16 = a2;
        v17 = (std::string *)",";
        v18 = a2;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        v12 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_19;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, uint64_t))off_24C9C3D90[v12])(&v15, a2);
        std::to_string(&v15, *v11);
        v16 = a2;
        v17 = &v15;
        v18 = a2;
        v19 = &v15;
        v20 = &v15;
        v13 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v13 == -1)
          sub_20E877AB8();
        v21 = &v16;
        ((void (*)(uint64_t **, uint64_t))off_24C9C3DA8[v13])(&v21, a2);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
      goto LABEL_12;
  }
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = a2;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C9C3D90[v14])(&v15, a2);
}

void sub_20EAE02C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAE02EC(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v4;
  uint64_t v6;
  char *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t *v21;

  if (a3[1] - *a3 <= 1)
  {
    v16 = a2;
    v17 = (std::string *)"{}";
    v18 = a2;
    v19 = (std::string *)"{}";
    v20 = (std::string *)"{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
      return ((uint64_t (*)(std::string *, uint64_t))off_24C9C3D60[v4])(&v15, a2);
    }
LABEL_19:
    sub_20E877AB8();
  }
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = a2;
  v19 = (std::string *)"{";
  v20 = (std::string *)"{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24C9C3D90[v6])(&v15, a2);
  v8 = *a3;
  std::to_string(&v15, *(unsigned __int16 *)*a3);
  v16 = a2;
  v17 = &v15;
  v18 = a2;
  v19 = &v15;
  v20 = &v15;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9C3DA8[v9])(&v21, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = (unsigned __int16 *)a3[1];
    v11 = (unsigned __int16 *)(v8 + 2);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v16 = a2;
        v17 = (std::string *)",";
        v18 = a2;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        v12 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_19;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, uint64_t))off_24C9C3D90[v12])(&v15, a2);
        std::to_string(&v15, *v11);
        v16 = a2;
        v17 = &v15;
        v18 = a2;
        v19 = &v15;
        v20 = &v15;
        v13 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v13 == -1)
          sub_20E877AB8();
        v21 = &v16;
        ((void (*)(uint64_t **, uint64_t))off_24C9C3DA8[v13])(&v21, a2);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = (unsigned __int16 *)a3[1];
    v11 = (unsigned __int16 *)(v8 + 2);
    if (v11 != v10)
      goto LABEL_12;
  }
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = a2;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C9C3D90[v14])(&v15, a2);
}

void sub_20EAE0514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20EAE0538(uint64_t a1, unsigned __int16 a2, int a3)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  size_t v8;
  void **p_dst;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  std::string::size_type v15;
  const char *v16;
  size_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  _QWORD *v32;
  size_t v33;
  size_t v34;
  _BYTE *v35;
  void *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  const char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  _BOOL8 v93;
  unint64_t *v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  const char *v98;
  std::string *v99;
  std::string::size_type v100;
  size_t v101;
  const char *v102;
  uint64_t v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  const char *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  size_t v118;
  void *v119;
  _QWORD *v120;
  size_t v121;
  size_t v122;
  void **v123;
  void *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  size_t v128;
  size_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  const char *v176;
  int v177;
  const char *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *exception;
  _QWORD *v187;
  uint64_t v188;
  std::string::size_type v189;
  const char *v190;
  int v191;
  int v192;
  unint64_t v193;
  uint64_t v194[2];
  std::string v195;
  uint64_t v196;
  _QWORD v197[4];
  uint64_t v198;
  uint64_t v199;
  std::string *v200;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v202;
  int v203;
  const char *v204;
  int v205;
  const char *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  _QWORD v209[2];
  void *v210[2];
  char v211;
  const void *v212;
  void *v213;
  uint64_t v214;
  const void *v215;
  unint64_t v216;
  void *v217;
  void *__p;
  char v219;
  char v220;
  char v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  unsigned __int16 v226;
  _BYTE v227[24];
  __int128 v228;
  char *v229;
  _BYTE v230[24];
  char *v231;
  std::__shared_weak_count *v232;
  void **__dst;
  __int128 v234;
  _BYTE v235[56];
  unint64_t v236;
  char v237;
  _BYTE v238[24];
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v226 = a2;
  v225 = a3;
  sub_20EAE1E6C(&v195);
  if (**(int **)(v195.__r_.__value_.__r.__words[0] + 56) > 3)
    goto LABEL_142;
  v4 = *(unsigned __int8 *)(v195.__r_.__value_.__r.__words[0] + 72);
  v5 = sub_20E8C31DC((uint64_t)v195.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
  v6 = v5;
  if (!v4 && v5 == 0)
    goto LABEL_142;
  sub_20E863438((uint64_t)v209);
  sub_20E86A980(v210, (uint64_t)"Setting up Network VisualLogger for SLAM.", 41);
  v192 = v4;
  if ((v223 & 0x10) != 0)
  {
    v10 = v222;
    if (v222 < v216)
    {
      v222 = v216;
      v10 = v216;
    }
    v11 = v215;
    v8 = v10 - (_QWORD)v215;
    if (v10 - (unint64_t)v215 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v223 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v234) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_19;
    }
    v11 = v212;
    v8 = v214 - (_QWORD)v212;
    if ((unint64_t)(v214 - (_QWORD)v212) > 0x7FFFFFFFFFFFFFF7)
LABEL_64:
      sub_20E860B7C();
  }
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    *(_QWORD *)&v234 = v8;
    *((_QWORD *)&v234 + 1) = v13 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_18;
  }
  HIBYTE(v234) = v8;
  p_dst = (void **)&__dst;
  if (v8)
LABEL_18:
    memmove(p_dst, v11, v8);
LABEL_19:
  *((_BYTE *)p_dst + v8) = 0;
  v200 = &v195;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v202 = std::chrono::system_clock::now().__d_.__rep_;
  v203 = 3;
  v204 = "unknown file";
  v205 = 34;
  v207 = 0;
  v208 = 0;
  v206 = "unknown function";
  if (v234 >= 0)
    v14 = (const char *)&__dst;
  else
    v14 = (const char *)__dst;
  v15 = v200->__r_.__value_.__r.__words[0];
  v16 = (const char *)(v200->__r_.__value_.__r.__words[0] + 16);
  v190 = v16;
  if (*(char *)(v200->__r_.__value_.__r.__words[0] + 39) < 0)
  {
    v16 = *(const char **)(v15 + 16);
    v17 = *(_QWORD *)(v15 + 24);
    v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v19 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    v17 = *(unsigned __int8 *)(v200->__r_.__value_.__r.__words[0] + 39);
    v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v18 & 1) != 0)
      goto LABEL_26;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v235);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v235);
    if (v235[24] && (v235[23] & 0x80000000) != 0)
      operator delete(*(void **)v235);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_26:
  if (byte_254A4A4F8[23] >= 0)
    v20 = byte_254A4A4F8;
  else
    v20 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v21 = byte_254A4A4F8[23];
  else
    v21 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v235 = os_log_create(v20, v16);
  v22 = &v235[8];
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v21 >= 0x17)
  {
    v23 = a1;
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    v22 = operator new(v24 + 1);
    *(_QWORD *)&v235[16] = v21;
    *(_QWORD *)&v235[24] = v25 | 0x8000000000000000;
    *(_QWORD *)&v235[8] = v22;
    a1 = v23;
    goto LABEL_39;
  }
  v235[31] = v21;
  if (v21)
LABEL_39:
    memmove(v22, v20, v21);
  v22[v21] = 0;
  v235[32] = 1;
  v26 = &v235[40];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v28 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v28 = v17 | 7;
    v29 = v28 + 1;
    v26 = operator new(v28 + 1);
    *(_QWORD *)&v235[48] = v17;
    v236 = v29 | 0x8000000000000000;
    *(_QWORD *)&v235[40] = v26;
  }
  else
  {
    HIBYTE(v236) = v17;
    if (!v17)
    {
      v235[40] = 0;
      v237 = 1;
      v27 = *(NSObject **)v235;
      if ((SHIBYTE(v236) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_50;
    }
  }
  memmove(v26, v16, v17);
  v26[v17] = 0;
  v237 = 1;
  v27 = *(NSObject **)v235;
  if ((SHIBYTE(v236) & 0x80000000) == 0)
  {
LABEL_44:
    if (!v235[32])
      goto LABEL_53;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(*(void **)&v235[40]);
  if (!v235[32])
    goto LABEL_53;
LABEL_51:
  if ((v235[31] & 0x80000000) != 0)
    operator delete(*(void **)&v235[8]);
LABEL_53:
  if (*(_QWORD *)v235)
    os_release(*(void **)v235);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    *(_DWORD *)v235 = 136315138;
    *(_QWORD *)&v235[4] = v14;
    v36 = (void *)_os_log_send_and_compose_impl();
    v37 = v192;
    if (v36)
      free(v36);
    goto LABEL_128;
  }
  v30 = _os_log_pack_size();
  v31 = operator new(v30, (std::align_val_t)8uLL);
  v32 = (_QWORD *)operator new();
  *v32 = &off_24C9ABB80;
  v32[1] = 0;
  v32[2] = 0;
  v32[3] = v31;
  *(_QWORD *)v227 = v31;
  *(_QWORD *)&v227[8] = v31;
  *(_QWORD *)&v227[16] = v32;
  v228 = 0uLL;
  v33 = strlen(v14);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    v35 = operator new(v38 + 1);
    *(_QWORD *)&v230[16] = v39 | 0x8000000000000000;
    *(_QWORD *)v230 = v35;
    *(_QWORD *)&v230[8] = v34;
    goto LABEL_68;
  }
  v230[23] = v33;
  v35 = v230;
  if (v33)
LABEL_68:
    memcpy(v35, v14, v34);
  v35[v34] = 0;
  v40 = *(_QWORD *)v230;
  *(_QWORD *)v238 = *(_QWORD *)&v230[8];
  *(_QWORD *)&v238[7] = *(_QWORD *)&v230[15];
  v41 = v230[23];
  v42 = operator new(0x38uLL);
  v42[1] = 0;
  v42[2] = 0;
  v42[3] = off_24C9ABC20;
  *v42 = &off_24C9ABBD0;
  v43 = *(_QWORD *)v238;
  v42[4] = v40;
  v42[5] = v43;
  *(_QWORD *)((char *)v42 + 47) = *(_QWORD *)&v238[7];
  *((_BYTE *)v42 + 55) = v41;
  *(_QWORD *)v238 = 0;
  *(_QWORD *)&v238[7] = 0;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  *(_QWORD *)&v228 = v42 + 3;
  *((_QWORD *)&v228 + 1) = v42;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_OWORD *)v235 = *(_OWORD *)v227;
  v47 = v228;
  *(_QWORD *)&v235[16] = *(_QWORD *)&v227[16];
  if (*(_QWORD *)&v227[16])
  {
    v48 = (unint64_t *)(*(_QWORD *)&v227[16] + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  *(_QWORD *)&v235[24] = v47;
  *(_QWORD *)&v235[32] = *((_QWORD *)&v228 + 1);
  if (*((_QWORD *)&v228 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    *(_QWORD *)&v235[40] = v47;
    do
      v53 = __ldaxr(v51);
    while (__stlxr(v53 - 1, v51));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  else
  {
    *(_QWORD *)&v235[40] = v47;
  }
  v54 = *(std::__shared_weak_count **)&v227[16];
  if (*(_QWORD *)&v227[16])
  {
    v55 = (unint64_t *)(*(_QWORD *)&v227[16] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(_QWORD *)v235;
  if (*(char *)(*(_QWORD *)&v235[40] + 31) >= 0)
    v58 = *(_QWORD *)&v235[40] + 8;
  else
    v58 = *(_QWORD *)(*(_QWORD *)&v235[40] + 8);
  v59 = _os_log_pack_fill();
  *(_DWORD *)v59 = 136315138;
  *(_QWORD *)(v59 + 4) = v58;
  v60 = operator new();
  v61 = *(unsigned __int8 *)(v15 + 39);
  v62 = v190;
  if ((v61 & 0x80u) != 0)
  {
    v62 = *(const char **)(v15 + 16);
    v61 = *(_QWORD *)(v15 + 24);
  }
  *(_QWORD *)v60 = v57;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)&v235[8];
  *(_QWORD *)&v235[8] = 0;
  *(_QWORD *)&v235[16] = 0;
  *(_OWORD *)(v60 + 24) = *(_OWORD *)&v235[24];
  *(_QWORD *)&v235[24] = 0;
  *(_QWORD *)&v235[32] = 0;
  *(_QWORD *)(v60 + 40) = v62;
  *(_QWORD *)(v60 + 48) = v61;
  *(_BYTE *)(v60 + 56) = 1;
  *(_QWORD *)v230 = 0;
  *(_QWORD *)v227 = v60;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), v227);
  v63 = *(_QWORD *)v227;
  *(_QWORD *)v227 = 0;
  if (v63)
  {
    v64 = *(std::__shared_weak_count **)(v63 + 32);
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = *(std::__shared_weak_count **)(v63 + 16);
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
    v70 = *(_QWORD *)v230;
    *(_QWORD *)v230 = 0;
    if (v70)
    {
      v71 = *(std::__shared_weak_count **)(v70 + 32);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = *(std::__shared_weak_count **)(v70 + 16);
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      MEMORY[0x212BC6398](v70, 0x10F0C40B62ED6C6);
    }
  }
  v77 = *(std::__shared_weak_count **)&v235[32];
  v37 = v192;
  if (*(_QWORD *)&v235[32])
  {
    v78 = (unint64_t *)(*(_QWORD *)&v235[32] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *(std::__shared_weak_count **)&v235[16];
  if (*(_QWORD *)&v235[16])
  {
    v81 = (unint64_t *)(*(_QWORD *)&v235[16] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
LABEL_128:
  if (v37)
  {
    v83 = (const char *)&__dst;
    if (v234 < 0)
      v83 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v200, "%s", v83);
    sub_20E863570((uint64_t)&v200);
  }
  sub_20E863570((uint64_t)&v200);
  v84 = v208;
  if (v208)
  {
    v85 = (unint64_t *)&v208->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (SHIBYTE(v234) < 0)
    operator delete(__dst);
  v209[0] = *MEMORY[0x24BEDB7F0];
  v87 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v209 + *(_QWORD *)(v209[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v210[0] = v87;
  v210[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v221 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v224);
LABEL_142:
  v198 = 0;
  v199 = 0;
  v197[0] = a1;
  v197[1] = &v226;
  v197[2] = &v225;
  v197[3] = &v198;
  *(_QWORD *)v235 = &off_24C9C3F38;
  *(_QWORD *)&v235[8] = v197;
  sub_210235BBC((uint64_t)v235, (uint64_t)v209);
  if ((_BYTE)v223)
  {
    v88 = sub_20FF3F5E8();
    v89 = (std::__shared_weak_count *)v199;
    if (v198)
      v90 = v198 + 8;
    else
      v90 = 0;
    v194[0] = v90;
    v194[1] = v199;
    if (v199)
    {
      v91 = (unint64_t *)(v199 + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v93 = sub_20FF407BC((uint64_t)v88, v194);
    if (v89)
    {
      v94 = (unint64_t *)&v89->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    goto LABEL_304;
  }
  sub_20EAE1E6C(&v196);
  if (**(int **)(v196 + 56) <= 5)
  {
    v96 = *(unsigned __int8 *)(v196 + 72);
    v97 = sub_20E8C31DC(v196, "OSLogSurrogateAppender", 1, 0);
    if (v96 || v97)
    {
      v193 = v97;
      v200 = (std::string *)&v196;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v202 = std::chrono::system_clock::now().__d_.__rep_;
      v203 = 5;
      v204 = "unknown file";
      v205 = 49;
      v207 = 0;
      v208 = 0;
      v206 = "unknown function";
      if (*(char *)(a1 + 23) >= 0)
        v98 = (const char *)a1;
      else
        v98 = *(const char **)a1;
      if ((_BYTE)v223)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C9B4620;
        __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
      }
      sub_2102341F0((uint64_t)v209, &v195);
      v191 = v96;
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = &v195;
      else
        v99 = (std::string *)v195.__r_.__value_.__r.__words[0];
      v100 = v200->__r_.__value_.__r.__words[0];
      if (*(char *)(v200->__r_.__value_.__r.__words[0] + 39) < 0)
      {
        v102 = *(const char **)(v100 + 16);
        v101 = *(_QWORD *)(v100 + 24);
        v188 = v200->__r_.__value_.__r.__words[0] + 16;
        v189 = v200->__r_.__value_.__r.__words[0];
        v103 = a1;
        v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v105 & 1) != 0)
          goto LABEL_168;
      }
      else
      {
        v101 = *(unsigned __int8 *)(v200->__r_.__value_.__r.__words[0] + 39);
        v102 = (const char *)(v200->__r_.__value_.__r.__words[0] + 16);
        v188 = (uint64_t)v102;
        v189 = v200->__r_.__value_.__r.__words[0];
        v103 = a1;
        v104 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v104 & 1) != 0)
          goto LABEL_168;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v235);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v235);
        if (v235[24] && (v235[23] & 0x80000000) != 0)
          operator delete(*(void **)v235);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_168:
      if (byte_254A4A4F8[23] >= 0)
        v106 = byte_254A4A4F8;
      else
        v106 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v107 = byte_254A4A4F8[23];
      else
        v107 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v235 = os_log_create(v106, v102);
      v108 = &v235[8];
      if (v107 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v107 >= 0x17)
      {
        v109 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v107 | 7) != 0x17)
          v109 = v107 | 7;
        v110 = v109 + 1;
        v108 = operator new(v109 + 1);
        *(_QWORD *)&v235[16] = v107;
        *(_QWORD *)&v235[24] = v110 | 0x8000000000000000;
        *(_QWORD *)&v235[8] = v108;
      }
      else
      {
        v235[31] = v107;
        if (!v107)
        {
LABEL_182:
          v108[v107] = 0;
          v235[32] = 1;
          v111 = &v235[40];
          if (v101 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v112 = v103;
          if (v101 >= 0x17)
          {
            v115 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v101 | 7) != 0x17)
              v115 = v101 | 7;
            v116 = v115 + 1;
            v111 = operator new(v115 + 1);
            v113 = (const char *)v99;
            *(_QWORD *)&v235[48] = v101;
            v236 = v116 | 0x8000000000000000;
            *(_QWORD *)&v235[40] = v111;
            v114 = v98;
          }
          else
          {
            HIBYTE(v236) = v101;
            v113 = (const char *)v99;
            v114 = v98;
            if (!v101)
            {
LABEL_190:
              v111[v101] = 0;
              v237 = 1;
              v117 = *(NSObject **)v235;
              if (SHIBYTE(v236) < 0)
                operator delete(*(void **)&v235[40]);
              if (v235[32] && (v235[31] & 0x80000000) != 0)
                operator delete(*(void **)&v235[8]);
              if (*(_QWORD *)v235)
                os_release(*(void **)v235);
              if (!v193 || !*(_QWORD *)(v193 + 24))
              {
                os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v235 = 136315650;
                *(_QWORD *)&v235[4] = v114;
                *(_WORD *)&v235[12] = 1024;
                *(_DWORD *)&v235[14] = v226;
                *(_WORD *)&v235[18] = 2080;
                *(_QWORD *)&v235[20] = v113;
                v124 = (void *)_os_log_send_and_compose_impl();
                v125 = v191;
                if (v124)
                  free(v124);
                goto LABEL_284;
              }
              v118 = _os_log_pack_size();
              v119 = operator new(v118, (std::align_val_t)8uLL);
              v120 = (_QWORD *)operator new();
              *v120 = &off_24C9ABB80;
              v120[1] = 0;
              v120[2] = 0;
              v120[3] = v119;
              *(_QWORD *)v230 = v119;
              *(_QWORD *)&v230[8] = v119;
              v232 = 0;
              *(_QWORD *)&v230[16] = v120;
              v231 = 0;
              v121 = strlen(v114);
              if (v121 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v122 = v121;
              if (v121 >= 0x17)
              {
                v126 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v121 | 7) != 0x17)
                  v126 = v121 | 7;
                v127 = v126 + 1;
                v123 = (void **)operator new(v126 + 1);
                *(_QWORD *)&v234 = v122;
                *((_QWORD *)&v234 + 1) = v127 | 0x8000000000000000;
                __dst = v123;
              }
              else
              {
                HIBYTE(v234) = v121;
                v123 = (void **)&__dst;
                if (!v121)
                {
LABEL_209:
                  *((_BYTE *)v123 + v122) = 0;
                  v128 = strlen(v113);
                  if (v128 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v129 = v128;
                  if (v128 >= 0x17)
                  {
                    v131 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v128 | 7) != 0x17)
                      v131 = v128 | 7;
                    v132 = v131 + 1;
                    v130 = operator new(v131 + 1);
                    *(_QWORD *)&v238[8] = v129;
                    *(_QWORD *)&v238[16] = v132 | 0x8000000000000000;
                    *(_QWORD *)v238 = v130;
                  }
                  else
                  {
                    v238[23] = v128;
                    v130 = v238;
                    if (!v128)
                      goto LABEL_217;
                  }
                  memcpy(v130, v113, v129);
LABEL_217:
                  v130[v129] = 0;
                  *(_QWORD *)&v235[8] = __dst;
                  *(_QWORD *)&v235[16] = v234;
                  *(_QWORD *)&v235[23] = *(_QWORD *)((char *)&v234 + 7);
                  *(_QWORD *)&v235[32] = *(_QWORD *)v238;
                  *(_QWORD *)&v235[40] = *(_QWORD *)&v238[8];
                  *(_QWORD *)&v235[47] = *(_QWORD *)&v238[15];
                  *(_QWORD *)v235 = off_24C9C4028;
                  v235[31] = HIBYTE(v234);
                  v235[55] = v238[23];
                  v133 = (char *)operator new(0x50uLL);
                  *((_QWORD *)v133 + 3) = off_24C9C4028;
                  *((_QWORD *)v133 + 1) = 0;
                  *((_QWORD *)v133 + 2) = 0;
                  *(_QWORD *)v133 = &off_24C9C3FD8;
                  *((_OWORD *)v133 + 2) = *(_OWORD *)&v235[8];
                  *((_QWORD *)v133 + 6) = *(_QWORD *)&v235[24];
                  memset(&v235[8], 0, 24);
                  *(_OWORD *)(v133 + 56) = *(_OWORD *)&v235[32];
                  *((_QWORD *)v133 + 9) = *(_QWORD *)&v235[48];
                  memset(&v235[32], 0, 24);
                  v134 = v232;
                  v231 = v133 + 24;
                  v232 = (std::__shared_weak_count *)v133;
                  if (v134)
                  {
                    v135 = (unint64_t *)&v134->__shared_owners_;
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
                  if ((v235[55] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)&v235[32]);
                    if ((v235[31] & 0x80000000) == 0)
                    {
LABEL_224:
                      *(_OWORD *)v227 = *(_OWORD *)v230;
                      v137 = v231;
                      v138 = *(_QWORD *)&v230[16];
                      *(_QWORD *)&v227[16] = *(_QWORD *)&v230[16];
                      if (!*(_QWORD *)&v230[16])
                        goto LABEL_230;
                      goto LABEL_228;
                    }
                  }
                  else if ((v235[31] & 0x80000000) == 0)
                  {
                    goto LABEL_224;
                  }
                  operator delete(*(void **)&v235[8]);
                  *(_OWORD *)v227 = *(_OWORD *)v230;
                  v137 = v231;
                  v138 = *(_QWORD *)&v230[16];
                  *(_QWORD *)&v227[16] = *(_QWORD *)&v230[16];
                  if (!*(_QWORD *)&v230[16])
                  {
LABEL_230:
                    v141 = v232;
                    *(_QWORD *)&v228 = v137;
                    *((_QWORD *)&v228 + 1) = v232;
                    if (v232)
                    {
                      v142 = (unint64_t *)&v232->__shared_owners_;
                      do
                        v143 = __ldxr(v142);
                      while (__stxr(v143 + 1, v142));
                      v229 = v137;
                      do
                        v144 = __ldaxr(v142);
                      while (__stlxr(v144 - 1, v142));
                      if (!v144)
                      {
                        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                        std::__shared_weak_count::__release_weak(v141);
                      }
                    }
                    else
                    {
                      v229 = v137;
                    }
                    v145 = *(std::__shared_weak_count **)&v230[16];
                    if (*(_QWORD *)&v230[16])
                    {
                      v146 = (unint64_t *)(*(_QWORD *)&v230[16] + 8);
                      do
                        v147 = __ldaxr(v146);
                      while (__stlxr(v147 - 1, v146));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                        std::__shared_weak_count::__release_weak(v145);
                      }
                    }
                    v148 = *(_QWORD *)v227;
                    if (v229[31] >= 0)
                      v149 = v229 + 8;
                    else
                      v149 = (char *)*((_QWORD *)v229 + 1);
                    if (v229[55] >= 0)
                      v150 = v229 + 32;
                    else
                      v150 = (char *)*((_QWORD *)v229 + 4);
                    v151 = _os_log_pack_fill();
                    v152 = v226;
                    *(_DWORD *)v151 = 136315650;
                    *(_QWORD *)(v151 + 4) = v149;
                    *(_WORD *)(v151 + 12) = 1024;
                    *(_DWORD *)(v151 + 14) = v152;
                    *(_WORD *)(v151 + 18) = 2080;
                    *(_QWORD *)(v151 + 20) = v150;
                    v153 = operator new();
                    v154 = *(unsigned __int8 *)(v189 + 39);
                    v155 = v188;
                    if ((v154 & 0x80u) != 0)
                    {
                      v155 = *(_QWORD *)(v189 + 16);
                      v154 = *(_QWORD *)(v189 + 24);
                    }
                    *(_QWORD *)v153 = v148;
                    *(_OWORD *)(v153 + 8) = *(_OWORD *)&v227[8];
                    *(_QWORD *)&v227[8] = 0;
                    *(_QWORD *)&v227[16] = 0;
                    *(_OWORD *)(v153 + 24) = v228;
                    v228 = 0uLL;
                    *(_QWORD *)(v153 + 40) = v155;
                    *(_QWORD *)(v153 + 48) = v154;
                    *(_BYTE *)(v153 + 56) = 16;
                    *(_QWORD *)v230 = 0;
                    *(_QWORD *)v235 = v153;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v193 + 24) + 40))(*(_QWORD *)(v193 + 24), v235);
                    v125 = v191;
                    v156 = *(_QWORD *)v235;
                    *(_QWORD *)v235 = 0;
                    if (v156)
                    {
                      v157 = *(std::__shared_weak_count **)(v156 + 32);
                      if (v157)
                      {
                        v158 = (unint64_t *)&v157->__shared_owners_;
                        do
                          v159 = __ldaxr(v158);
                        while (__stlxr(v159 - 1, v158));
                        if (!v159)
                        {
                          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                          std::__shared_weak_count::__release_weak(v157);
                        }
                      }
                      v160 = *(std::__shared_weak_count **)(v156 + 16);
                      if (v160)
                      {
                        v161 = (unint64_t *)&v160->__shared_owners_;
                        do
                          v162 = __ldaxr(v161);
                        while (__stlxr(v162 - 1, v161));
                        if (!v162)
                        {
                          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                          std::__shared_weak_count::__release_weak(v160);
                        }
                      }
                      MEMORY[0x212BC6398](v156, 0x10F0C40B62ED6C6);
                      v163 = *(_QWORD *)v230;
                      *(_QWORD *)v230 = 0;
                      if (v163)
                      {
                        v164 = *(std::__shared_weak_count **)(v163 + 32);
                        if (v164)
                        {
                          v165 = (unint64_t *)&v164->__shared_owners_;
                          do
                            v166 = __ldaxr(v165);
                          while (__stlxr(v166 - 1, v165));
                          if (!v166)
                          {
                            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                            std::__shared_weak_count::__release_weak(v164);
                          }
                        }
                        v167 = *(std::__shared_weak_count **)(v163 + 16);
                        if (v167)
                        {
                          v168 = (unint64_t *)&v167->__shared_owners_;
                          do
                            v169 = __ldaxr(v168);
                          while (__stlxr(v169 - 1, v168));
                          if (!v169)
                          {
                            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                            std::__shared_weak_count::__release_weak(v167);
                          }
                        }
                        MEMORY[0x212BC6398](v163, 0x10F0C40B62ED6C6);
                      }
                    }
                    v170 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
                    if (*((_QWORD *)&v228 + 1))
                    {
                      v171 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
                      do
                        v172 = __ldaxr(v171);
                      while (__stlxr(v172 - 1, v171));
                      if (!v172)
                      {
                        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                        std::__shared_weak_count::__release_weak(v170);
                      }
                    }
                    v173 = *(std::__shared_weak_count **)&v227[16];
                    if (*(_QWORD *)&v227[16])
                    {
                      v174 = (unint64_t *)(*(_QWORD *)&v227[16] + 8);
                      do
                        v175 = __ldaxr(v174);
                      while (__stlxr(v175 - 1, v174));
                      if (!v175)
                      {
                        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                        std::__shared_weak_count::__release_weak(v173);
                      }
                    }
LABEL_284:
                    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v195.__r_.__value_.__l.__data_);
                    if (v125)
                    {
                      if (*(char *)(v112 + 23) >= 0)
                        v176 = (const char *)v112;
                      else
                        v176 = *(const char **)v112;
                      if ((_BYTE)v223)
                      {
                        v187 = __cxa_allocate_exception(8uLL);
                        *v187 = &off_24C9B4620;
                        __cxa_throw(v187, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
                      }
                      v177 = v226;
                      sub_2102341F0((uint64_t)v209, (std::string *)v235);
                      if (v235[23] >= 0)
                        v178 = v235;
                      else
                        v178 = *(const char **)v235;
                      sub_20E8C003C((uint64_t)&v200, "VisualLoggerServer %s:%d not running: %s", v176, v177, v178);
                      if ((v235[23] & 0x80000000) != 0)
                        operator delete(*(void **)v235);
                      sub_20E863570((uint64_t)&v200);
                    }
                    sub_20E863570((uint64_t)&v200);
                    v179 = v208;
                    if (v208)
                    {
                      v180 = (unint64_t *)&v208->__shared_owners_;
                      do
                        v181 = __ldaxr(v180);
                      while (__stlxr(v181 - 1, v180));
                      if (!v181)
                      {
                        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                        std::__shared_weak_count::__release_weak(v179);
                      }
                    }
                    goto LABEL_302;
                  }
LABEL_228:
                  v139 = (unint64_t *)(v138 + 8);
                  do
                    v140 = __ldxr(v139);
                  while (__stxr(v140 + 1, v139));
                  goto LABEL_230;
                }
              }
              memcpy(v123, v114, v122);
              goto LABEL_209;
            }
          }
          memmove(v111, v102, v101);
          goto LABEL_190;
        }
      }
      memmove(v108, v106, v107);
      goto LABEL_182;
    }
  }
LABEL_302:
  if (!(_BYTE)v223 && (_BYTE)v222)
  {
    if (v220)
    {
      if (v219 < 0)
        operator delete(v217);
      if (SHIBYTE(v215) < 0)
        operator delete(v213);
    }
    if ((_BYTE)v212 && v211 < 0)
      operator delete(v210[0]);
  }
  v93 = 0;
LABEL_304:
  v182 = (std::__shared_weak_count *)v199;
  if (v199)
  {
    v183 = (unint64_t *)(v199 + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  return v93;
}

void sub_20EAE1B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (*(_BYTE *)(v40 - 184) && *(char *)(v40 - 185) < 0)
    operator delete(*(void **)(v40 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  if (a23 < 0)
    operator delete(__p);
  sub_20E863714((uint64_t)&a31);
  sub_20E89ED1C((uint64_t)&a40);
  sub_20E86665C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20EAE1E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E86665C((uint64_t)&a16);
  sub_20E86665C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20EAE1E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E86665C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20EAE1E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E86665C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20EAE1E60(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20EAE1E6C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AD70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD70))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.capi");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AD68);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AD70);
  }
  *a1 = qword_254A5AD68;
}

void sub_20EAE1F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AD70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AD70);
  _Unwind_Resume(a1);
}

BOOL sub_20EAE1F60(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  size_t v8;
  void **v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  size_t v36;
  size_t v37;
  uint64_t *v38;
  void *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  __int128 *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::__fs::filesystem::path::__string_view v100;
  int v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  void *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t *v121;
  unint64_t v122;
  _BOOL8 v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  const char *v131;
  const char *v132;
  int v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void *v136;
  _DWORD *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v138;
  int v139;
  __int128 v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  void *__dst[2];
  int64_t v144;
  void *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  const void *v151;
  unint64_t v152;
  void *__p;
  char v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  _BYTE v161[24];
  __int128 v162;
  void *v163[2];
  unint64_t v164;
  uint64_t v165;
  _QWORD v166[2];
  __int128 v167;
  std::__shared_weak_count *v168;
  __int128 *v169;
  std::__shared_weak_count *v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  sub_20EAE1E6C(&v158);
  if (**(int **)(v158 + 56) > 3)
    goto LABEL_143;
  v4 = *(unsigned __int8 *)(v158 + 72);
  v5 = sub_20E8C31DC(v158, "OSLogSurrogateAppender", 1, 0);
  v6 = v5;
  if (!v4 && v5 == 0)
    goto LABEL_143;
  sub_20E863438((uint64_t)&v145);
  sub_20E86A980(&v147, (uint64_t)"Setting up File VisualLogger for SLAM.", 38);
  if ((v156 & 0x10) != 0)
  {
    v10 = v155;
    if (v155 < v152)
    {
      v155 = v152;
      v10 = v152;
    }
    v11 = v151;
    v8 = v10 - (_QWORD)v151;
    if (v10 - (unint64_t)v151 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v156 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v144) = 0;
      v9 = __dst;
      goto LABEL_19;
    }
    v11 = (const void *)*((_QWORD *)&v149 + 1);
    v8 = *((_QWORD *)&v150 + 1) - *((_QWORD *)&v149 + 1);
    if (*((_QWORD *)&v150 + 1) - *((_QWORD *)&v149 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      sub_20E860B7C();
  }
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v9 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v8;
    v144 = v13 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_18;
  }
  HIBYTE(v144) = v8;
  v9 = __dst;
  if (v8)
LABEL_18:
    memmove(v9, v11, v8);
LABEL_19:
  *((_BYTE *)v9 + v8) = 0;
  v136 = &v158;
  rep = (_DWORD *)std::chrono::steady_clock::now().__d_.__rep_;
  v138 = std::chrono::system_clock::now().__d_.__rep_;
  v139 = 3;
  *(_QWORD *)&v140 = "unknown file";
  DWORD2(v140) = 57;
  *((_QWORD *)&v141 + 1) = 0;
  v142 = 0;
  *(_QWORD *)&v141 = "unknown function";
  if (v144 >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  v15 = *(_QWORD *)v136;
  v16 = (const char *)(*(_QWORD *)v136 + 16);
  v132 = v16;
  if (*(char *)(*(_QWORD *)v136 + 39) < 0)
  {
    v16 = *(const char **)(v15 + 16);
    v17 = *(_QWORD *)(v15 + 24);
    v133 = v4;
    v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v19 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    v17 = *(unsigned __int8 *)(*(_QWORD *)v136 + 39);
    v133 = v4;
    v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v18 & 1) != 0)
      goto LABEL_26;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v161);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v161);
    if ((_BYTE)v162 && (v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_26:
  if (byte_254A4A4F8[23] >= 0)
    v20 = byte_254A4A4F8;
  else
    v20 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v21 = byte_254A4A4F8[23];
  else
    v21 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v161 = os_log_create(v20, v16);
  v22 = &v161[8];
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v21 >= 0x17)
  {
    v131 = v16;
    v23 = v6;
    v24 = v15;
    v25 = v14;
    v26 = a2;
    v27 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v27 = v21 | 7;
    v28 = v27 + 1;
    v22 = operator new(v27 + 1);
    *(_QWORD *)&v161[16] = v21;
    *(_QWORD *)&v162 = v28 | 0x8000000000000000;
    *(_QWORD *)&v161[8] = v22;
    a2 = v26;
    v14 = v25;
    v15 = v24;
    v6 = v23;
    v16 = v131;
    goto LABEL_39;
  }
  BYTE7(v162) = v21;
  if (v21)
LABEL_39:
    memmove(v22, v20, v21);
  v22[v21] = 0;
  BYTE8(v162) = 1;
  v29 = v163;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v31 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v31 = v17 | 7;
    v32 = v31 + 1;
    v29 = (void **)operator new(v31 + 1);
    v163[1] = (void *)v17;
    v164 = v32 | 0x8000000000000000;
    v163[0] = v29;
  }
  else
  {
    HIBYTE(v164) = v17;
    if (!v17)
    {
      LOBYTE(v163[0]) = 0;
      LOBYTE(v165) = 1;
      v30 = *(NSObject **)v161;
      if ((SHIBYTE(v164) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_50;
    }
  }
  memmove(v29, v16, v17);
  *((_BYTE *)v29 + v17) = 0;
  LOBYTE(v165) = 1;
  v30 = *(NSObject **)v161;
  if ((SHIBYTE(v164) & 0x80000000) == 0)
  {
LABEL_44:
    if (!BYTE8(v162))
      goto LABEL_53;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v163[0]);
  if (!BYTE8(v162))
    goto LABEL_53;
LABEL_51:
  if (SBYTE7(v162) < 0)
    operator delete(*(void **)&v161[8]);
LABEL_53:
  if (*(_QWORD *)v161)
    os_release(*(void **)v161);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
    *(_DWORD *)v161 = 136315138;
    *(_QWORD *)&v161[4] = v14;
    v39 = (void *)_os_log_send_and_compose_impl();
    v40 = v133;
    if (v39)
      free(v39);
    goto LABEL_129;
  }
  v33 = _os_log_pack_size();
  v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
  v35 = (std::__shared_weak_count *)operator new();
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v35->__shared_owners_ = 0;
  v35->__shared_weak_owners_ = 0;
  v35[1].__vftable = v34;
  *(_QWORD *)&v167 = v34;
  *((_QWORD *)&v167 + 1) = v34;
  v169 = 0;
  v170 = 0;
  v168 = v35;
  v36 = strlen(v14);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v41 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v41 = v36 | 7;
    v42 = v41 + 1;
    v38 = (uint64_t *)operator new(v41 + 1);
    *(_QWORD *)&v160 = v37;
    *((_QWORD *)&v160 + 1) = v42 | 0x8000000000000000;
    v159 = (uint64_t)v38;
    goto LABEL_68;
  }
  HIBYTE(v160) = v36;
  v38 = &v159;
  if (v36)
LABEL_68:
    memcpy(v38, v14, v37);
  *((_BYTE *)v38 + v37) = 0;
  v43 = v159;
  v166[0] = v160;
  *(_QWORD *)((char *)v166 + 7) = *(_QWORD *)((char *)&v160 + 7);
  v44 = HIBYTE(v160);
  v45 = (char *)operator new(0x38uLL);
  *((_QWORD *)v45 + 1) = 0;
  *((_QWORD *)v45 + 2) = 0;
  *((_QWORD *)v45 + 3) = off_24C9ABC20;
  *(_QWORD *)v45 = &off_24C9ABBD0;
  v46 = v166[0];
  *((_QWORD *)v45 + 4) = v43;
  *((_QWORD *)v45 + 5) = v46;
  *(_QWORD *)(v45 + 47) = *(_QWORD *)((char *)v166 + 7);
  v45[55] = v44;
  v166[0] = 0;
  *(_QWORD *)((char *)v166 + 7) = 0;
  v47 = v170;
  v169 = (__int128 *)(v45 + 24);
  v170 = (std::__shared_weak_count *)v45;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(_OWORD *)v161 = v167;
  v50 = v169;
  *(_QWORD *)&v161[16] = v168;
  if (v168)
  {
    v51 = (unint64_t *)&v168->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = v170;
  *(_QWORD *)&v162 = v50;
  *((_QWORD *)&v162 + 1) = v170;
  if (v170)
  {
    v54 = (unint64_t *)&v170->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    v163[0] = v50;
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 - 1, v54));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  else
  {
    v163[0] = v50;
  }
  v57 = v168;
  if (v168)
  {
    v58 = (unint64_t *)&v168->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = *(_QWORD *)v161;
  if (*((char *)v163[0] + 31) >= 0)
    v61 = (char *)v163[0] + 8;
  else
    v61 = (char *)*((_QWORD *)v163[0] + 1);
  v62 = _os_log_pack_fill();
  *(_DWORD *)v62 = 136315138;
  *(_QWORD *)(v62 + 4) = v61;
  v63 = operator new();
  v64 = *(unsigned __int8 *)(v15 + 39);
  v65 = *(const char **)(v15 + 16);
  v66 = *(_QWORD *)(v15 + 24);
  v67 = v162;
  *(_OWORD *)(v63 + 8) = *(_OWORD *)&v161[8];
  if ((v64 & 0x80u) != 0)
    v64 = v66;
  else
    v65 = v132;
  *(_QWORD *)v63 = v60;
  *(_QWORD *)&v161[8] = 0;
  *(_QWORD *)&v161[16] = 0;
  *(_OWORD *)(v63 + 24) = v67;
  v162 = 0uLL;
  *(_QWORD *)(v63 + 40) = v65;
  *(_QWORD *)(v63 + 48) = v64;
  *(_BYTE *)(v63 + 56) = 1;
  v159 = 0;
  *(_QWORD *)&v167 = v63;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v167);
  v68 = v167;
  *(_QWORD *)&v167 = 0;
  v40 = v133;
  if (v68)
  {
    v69 = *(std::__shared_weak_count **)(v68 + 32);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = *(std::__shared_weak_count **)(v68 + 16);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
    v75 = v159;
    v159 = 0;
    if (v75)
    {
      v76 = *(std::__shared_weak_count **)(v75 + 32);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = *(std::__shared_weak_count **)(v75 + 16);
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *(std::__shared_weak_count **)&v161[16];
  if (*(_QWORD *)&v161[16])
  {
    v86 = (unint64_t *)(*(_QWORD *)&v161[16] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_129:
  if (v40)
  {
    v88 = (const char *)__dst;
    if (v144 < 0)
      v88 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v136, "%s", v88);
    sub_20E863570((uint64_t)&v136);
  }
  sub_20E863570((uint64_t)&v136);
  v89 = v142;
  if (v142)
  {
    v90 = (unint64_t *)&v142->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(__dst[0]);
  v145 = (void *)*MEMORY[0x24BEDB7F0];
  v92 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&v145 + *((_QWORD *)v145 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v147 = v92;
  v148 = MEMORY[0x24BEDB848] + 16;
  if (v154 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v157);
LABEL_143:
  v93 = sub_20FF3F5E8();
  v94 = v93[2];
  if (!v94)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v94 = v93[2];
  }
  v95 = *(_QWORD *)(v94 + 64);
  std::mutex::lock((std::mutex *)(v95 + 32));
  sub_20FF000DC(&v145, v95 + 96);
  std::mutex::unlock((std::mutex *)(v95 + 32));
  v96 = v145;
  v97 = v146;
  if (v145 == v146)
  {
    v101 = 1;
    if (v145)
    {
LABEL_164:
      v102 = v146;
      if (v146 == v96)
      {
        v146 = v96;
        operator delete(v96);
        if (!v101)
          return 0;
      }
      else
      {
        do
        {
          v103 = (std::__shared_weak_count *)*(v102 - 1);
          if (v103)
          {
            v104 = (unint64_t *)&v103->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          v102 -= 2;
        }
        while (v102 != v96);
        v146 = v96;
        operator delete(v145);
        if (!v101)
          return 0;
      }
      goto LABEL_174;
    }
  }
  else
  {
    do
    {
      v98 = *v96;
      if (*v96 && *(uint64_t (***)())v98 == &off_24CA0B548)
      {
        v99 = *(char *)(a1 + 23);
        v100.__data_ = v99 >= 0 ? (const std::string_view::value_type *)a1 : *(const std::string_view::value_type **)a1;
        v100.__size_ = v99 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
        if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(*(_QWORD *)(v98 + 8) + 32), v100))
        {
          v101 = 0;
          v96 = v145;
          if (v145)
            goto LABEL_164;
          goto LABEL_161;
        }
      }
      v96 += 2;
    }
    while (v96 != v97);
    v101 = 1;
    v96 = v145;
    if (v145)
      goto LABEL_164;
  }
LABEL_161:
  if (!v101)
    return 0;
LABEL_174:
  LOBYTE(v145) = 0;
  LOBYTE(v148) = 0;
  LOBYTE(v149) = 0;
  LOBYTE(v150) = 0;
  *((_QWORD *)&v150 + 1) = 0;
  *(_QWORD *)&v162 = v161;
  *(_QWORD *)v161 = &off_24CA0B8B0;
  *(_DWORD *)&v161[8] = 2;
  BYTE8(v162) = 1;
  v106 = operator new(0x30uLL);
  v106[1] = 0;
  v106[2] = 0;
  *v106 = &off_24C9C4060;
  LOBYTE(v136) = 0;
  LOBYTE(v139) = 0;
  v140 = v149;
  v141 = v150;
  LOBYTE(v167) = 0;
  v169 = &v167;
  sub_20FF0A264((uint64_t)v161, (uint64_t)&v167);
  LOBYTE(v170) = 1;
  sub_20FF06264(v106 + 3, a1, (uint64_t *)&v136, (uint64_t)&v167, a2);
  if ((_BYTE)v170)
  {
    v108 = v169;
    if (v169 == &v167)
    {
      v109 = 4;
      v108 = &v167;
      goto LABEL_179;
    }
    if (v169)
    {
      v109 = 5;
LABEL_179:
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v108 + 8 * v109))(v108, v107);
    }
  }
  if ((_BYTE)v139)
  {
    v110 = v136;
    if (v136)
    {
      v111 = rep;
      v112 = v136;
      if (rep != v136)
      {
        do
        {
          if (*((_BYTE *)v111 - 8))
          {
            v113 = *(v111 - 4);
            if ((_DWORD)v113 != -1)
              ((void (*)(void **, _DWORD *))off_24C9C3FB8[v113])(__dst, v111 - 12);
            *(v111 - 4) = -1;
          }
          *((_QWORD *)v111 - 102) = &off_24CA0BEA8;
          sub_20FF18588((uint64_t)(v111 - 200));
          v111 -= 204;
        }
        while (v111 != v110);
        v112 = v136;
      }
      rep = v110;
      operator delete(v112);
    }
  }
  v159 = (uint64_t)(v106 + 3);
  *(_QWORD *)&v160 = v106;
  if (!BYTE8(v162))
    goto LABEL_197;
  v114 = (_QWORD *)v162;
  if ((_BYTE *)v162 == v161)
  {
    v115 = 4;
    v114 = v161;
  }
  else
  {
    if (!(_QWORD)v162)
      goto LABEL_197;
    v115 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v114 + 8 * v115))(v114, v107);
LABEL_197:
  if ((_BYTE)v148)
  {
    v116 = v145;
    if (v145)
    {
      v117 = v146;
      v118 = v145;
      if (v146 != v145)
      {
        do
        {
          if (*((_BYTE *)v117 - 8))
          {
            v119 = *((unsigned int *)v117 - 4);
            if ((_DWORD)v119 != -1)
              ((void (*)(_BYTE *, _QWORD *))off_24C9C3FB8[v119])(v161, v117 - 6);
            *((_DWORD *)v117 - 4) = -1;
          }
          *(v117 - 102) = &off_24CA0BEA8;
          sub_20FF18588((uint64_t)(v117 - 100));
          v117 -= 102;
        }
        while (v117 != v116);
        v118 = v145;
      }
      v146 = v116;
      operator delete(v118);
    }
  }
  v120 = sub_20FF3F5E8();
  v134 = v159;
  v135 = (std::__shared_weak_count *)v160;
  if ((_QWORD)v160)
  {
    v121 = (unint64_t *)(v160 + 8);
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  v123 = sub_20FF407BC((uint64_t)v120, &v134);
  v124 = v135;
  if (v135)
  {
    v125 = (unint64_t *)&v135->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = (std::__shared_weak_count *)v160;
  if ((_QWORD)v160)
  {
    v128 = (unint64_t *)(v160 + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  return v123;
}

void sub_20EAE324C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,void *a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a36 && a35 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v40 - 240);
  std::exception::~exception((std::exception *)(v40 - 160));
  __cxa_end_catch();
  JUMPOUT(0x20EAE3314);
}

void sub_20EAE32EC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EAE330C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

uint64_t sub_20EAE3324(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_DWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(_DWORD **)(a1 + 8);
      v4 = *(_DWORD **)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((_BYTE *)v3 - 8))
          {
            v5 = *(v3 - 4);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, _DWORD *))off_24C9C3FB8[v5])(&v7, v3 - 12);
            *(v3 - 4) = -1;
          }
          *((_QWORD *)v3 - 102) = &off_24CA0BEA8;
          sub_20FF18588((uint64_t)(v3 - 200));
          v3 -= 204;
        }
        while (v3 != v2);
        v4 = *(_DWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20EAE33F4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AD80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD80))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3dapi.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AD78);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AD80);
  }
  *a1 = qword_254A5AD78;
}

void sub_20EAE3490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AD80);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AD80);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAE34E8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  _QWORD v6[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C40B0;
  *(_QWORD *)(v2 + 8) = &unk_24C9C4128;
  *(_QWORD *)(v2 + 152) = &unk_24C9C4150;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v5 = (uint64_t)off_24C9C42C8 + 1;
  v6[0] = a1;
  sub_20EAE8070((uint64_t *)(v2 + 120), &v5);
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v6, v6, 2);
    }
    v5 = 0;
  }
  return sub_20EAE6DF0(v2, a1);
}

void sub_20EAE35BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EAE6DA0(&a9);
  _Unwind_Resume(a1);
}

void sub_20EAE35D0(_BYTE *__s, uint64_t a2, int a3)
{
  size_t v6;
  void *v7;
  _BYTE *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  const char *v26;
  std::string::size_type *p_size;
  unint64_t v28;
  const char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  void *v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  _QWORD *p_dst;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;
  const char *v59;
  size_t v60;
  std::string::size_type *v61;
  unint64_t v62;
  const char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  size_t v71;
  void *v72;
  _QWORD *v73;
  size_t v74;
  size_t v75;
  _QWORD *v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  std::string::size_type v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  const char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::string *v111;
  BOOL v112;
  std::runtime_error *exception;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::string::size_type v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  std::string::size_type v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  const char *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  const std::string *v162;
  __int128 v163;
  unsigned __int16 v164;
  std::string::size_type v165;
  std::string::size_type size;
  void *v167;
  char *v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  size_t v175;
  const char *v176;
  uint64_t *v177;
  uint64_t *v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  size_t v187;
  const char *v188;
  unsigned __int8 v189;
  unsigned __int8 v190;
  const char *v191;
  size_t v192;
  std::string::size_type *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  NSObject *v197;
  uint64_t v198;
  uint64_t v199;
  size_t v200;
  void *v201;
  _QWORD *v202;
  size_t v203;
  size_t v204;
  _QWORD *v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  char v210;
  _QWORD *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  char *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::string::size_type v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  std::string::size_type v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  _QWORD *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  const char *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  unsigned __int8 v262;
  const char *v263;
  size_t v264;
  std::string::size_type *v265;
  unint64_t v266;
  const char *v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  NSObject *v276;
  size_t v277;
  std::__shared_weak_count_vtbl *v278;
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  std::string::size_type v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  std::string::size_type v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  void *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  std::runtime_error *v314;
  std::runtime_error *v315;
  uint64_t *v316;
  const char *v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void *__src;
  const char *__srca;
  void *__srcb;
  uint64_t v325;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v328;
  const char *v329;
  int v330;
  const char *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  std::string v334;
  __int128 v335;
  _QWORD *__dst;
  __int128 v337;
  __int128 v338;
  std::string v339;
  __int128 v340;
  char *v341;
  size_t v342;
  unint64_t v343;
  char v344;
  uint64_t v345[5];

  v345[2] = *MEMORY[0x24BDAC8D0];
  if (!__s || !__s[24])
    return;
  if ((char)__s[23] < 0)
  {
    v7 = *(void **)__s;
    v6 = *((_QWORD *)__s + 1);
    if (!v6)
      goto LABEL_16;
  }
  else
  {
    v6 = __s[23];
    v7 = __s;
    if (!__s[23])
      goto LABEL_16;
  }
  v8 = memchr(v7, 58, v6);
  if (!v8 || v8 - (_BYTE *)v7 == -1)
  {
LABEL_16:
    sub_20EAE1E6C(v345);
    if (**(int **)(v345[0] + 56) > 3
      || (v16 = *(unsigned __int8 *)(v345[0] + 72),
          v17 = sub_20E8C31DC(v345[0], "OSLogSurrogateAppender", 1, 0),
          v18 = v17,
          !v16)
      && !v17)
    {
LABEL_173:
      memset(&v339, 0, sizeof(v339));
      v110 = __s[23];
      if ((v110 & 0x80u) == 0)
        v111 = (std::string *)__s;
      else
        v111 = *(std::string **)__s;
      if ((v110 & 0x80u) != 0)
        v110 = *((_QWORD *)__s + 1);
      sub_20E8A9678(&v339, v111, (std::string *)((char *)v111 + v110));
      v112 = sub_20EAE1F60((uint64_t)&v339, a2);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      if (!v112)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Failed to initialize file logger!");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_272;
    }
    __p[0] = v345;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v328 = 3;
    v329 = "unknown file";
    v330 = 121;
    v332 = 0;
    v333 = 0;
    v331 = "unknown function";
    v19 = __s;
    if ((char)__s[23] < 0)
      v19 = *(const char **)__s;
    v20 = *(_QWORD *)__p[0];
    v21 = (const char *)(*(_QWORD *)__p[0] + 16);
    v318 = v21;
    v320 = *(_QWORD *)__p[0];
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v21 = *(const char **)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
    }
    else
    {
      v22 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
    }
    __src = (void *)a2;
    v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v339);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v339);
      if ((_BYTE)v340 && SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v24 = byte_254A4A4F8;
    else
      v24 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v25 = byte_254A4A4F8[23];
    else
      v25 = *(_QWORD *)&byte_254A4A4F8[8];
    v26 = v21;
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v24, v21);
    p_size = &v339.__r_.__value_.__l.__size_;
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v25 >= 0x17)
    {
      v28 = v18;
      v29 = v19;
      v30 = v16;
      v31 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v31 = v25 | 7;
      v32 = v31 + 1;
      p_size = (std::string::size_type *)operator new(v31 + 1);
      v339.__r_.__value_.__r.__words[2] = v25;
      *(_QWORD *)&v340 = v32 | 0x8000000000000000;
      v339.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      v16 = v30;
      v19 = v29;
      v18 = v28;
    }
    else
    {
      BYTE7(v340) = v25;
      if (!v25)
      {
LABEL_39:
        *((_BYTE *)p_size + v25) = 0;
        BYTE8(v340) = 1;
        v33 = (char *)&v341;
        if (v22 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v22 >= 0x17)
        {
          v34 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v34 = v22 | 7;
          v35 = v34 + 1;
          v33 = (char *)operator new(v34 + 1);
          v342 = v22;
          v343 = v35 | 0x8000000000000000;
          v341 = v33;
        }
        else
        {
          HIBYTE(v343) = v22;
          if (!v22)
          {
LABEL_47:
            v33[v22] = 0;
            v344 = 1;
            v36 = v339.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v343) < 0)
              operator delete(v341);
            if (BYTE8(v340) && SBYTE7(v340) < 0)
              operator delete((void *)v339.__r_.__value_.__l.__size_);
            if (v339.__r_.__value_.__r.__words[0])
              os_release(v339.__r_.__value_.__l.__data_);
            if (!v18 || !*(_QWORD *)(v18 + 24))
            {
              os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
              LODWORD(v339.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v339.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
              v43 = (void *)_os_log_send_and_compose_impl();
              a2 = (uint64_t)__src;
              if (v43)
                free(v43);
              goto LABEL_164;
            }
            v37 = _os_log_pack_size();
            v38 = operator new(v37, (std::align_val_t)8uLL);
            v39 = (_QWORD *)operator new();
            *v39 = &off_24C9ABB80;
            v39[1] = 0;
            v39[2] = 0;
            v39[3] = v38;
            v334.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
            v334.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
            v335 = 0uLL;
            v334.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
            v40 = strlen(v19);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v44 = v40 | 7;
              v45 = v44 + 1;
              p_dst = operator new(v44 + 1);
              *(_QWORD *)&v337 = v41;
              *((_QWORD *)&v337 + 1) = v45 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v337) = v40;
              p_dst = &__dst;
              if (!v40)
              {
LABEL_66:
                *((_BYTE *)p_dst + v41) = 0;
                v46 = __dst;
                *(_QWORD *)&v338 = v337;
                *(_QWORD *)((char *)&v338 + 7) = *(_QWORD *)((char *)&v337 + 7);
                v47 = HIBYTE(v337);
                v48 = operator new(0x38uLL);
                v48[1] = 0;
                v48[2] = 0;
                v48[3] = off_24C9ABC20;
                *v48 = &off_24C9ABBD0;
                v49 = v338;
                v48[4] = v46;
                v48[5] = v49;
                *(_QWORD *)((char *)v48 + 47) = *(_QWORD *)((char *)&v338 + 7);
                *((_BYTE *)v48 + 55) = v47;
                *(_QWORD *)&v338 = 0;
                *(_QWORD *)((char *)&v338 + 7) = 0;
                v50 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
                *(_QWORD *)&v335 = v48 + 3;
                *((_QWORD *)&v335 + 1) = v48;
                if (v50)
                {
                  p_shared_owners = (unint64_t *)&v50->__shared_owners_;
                  do
                    v52 = __ldaxr(p_shared_owners);
                  while (__stlxr(v52 - 1, p_shared_owners));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                  }
                }
                v339 = v334;
                if (v334.__r_.__value_.__r.__words[2])
                {
                  v53 = (unint64_t *)(v334.__r_.__value_.__r.__words[2] + 8);
                  do
                    v54 = __ldxr(v53);
                  while (__stxr(v54 + 1, v53));
                }
                v340 = v335;
                if (*((_QWORD *)&v335 + 1))
                {
                  v55 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
                  do
                    v56 = __ldxr(v55);
                  while (__stxr(v56 + 1, v55));
                  v341 = (char *)v335;
                  do
                    v57 = __ldaxr(v55);
                  while (__stlxr(v57 - 1, v55));
                  if (!v57)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v335 + 1) + 16))(*((_QWORD *)&v335 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v335 + 1));
                  }
                }
                else
                {
                  v341 = (char *)v335;
                }
                if (v334.__r_.__value_.__r.__words[2])
                {
                  v78 = (unint64_t *)(v334.__r_.__value_.__r.__words[2] + 8);
                  do
                    v79 = __ldaxr(v78);
                  while (__stlxr(v79 - 1, v78));
                  if (!v79)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v334.__r_.__value_.__r.__words[2] + 16))(v334.__r_.__value_.__r.__words[2]);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v334.__r_.__value_.__r.__words[2]);
                  }
                }
                v80 = v339.__r_.__value_.__r.__words[0];
                if (v341[31] >= 0)
                  v81 = v341 + 8;
                else
                  v81 = (char *)*((_QWORD *)v341 + 1);
                v82 = _os_log_pack_fill();
                *(_DWORD *)v82 = 136315138;
                *(_QWORD *)(v82 + 4) = v81;
                v83 = operator new();
                v84 = *(unsigned __int8 *)(v320 + 39);
                v85 = v318;
                if ((v84 & 0x80u) != 0)
                {
                  v85 = *(const char **)(v320 + 16);
                  v84 = *(_QWORD *)(v320 + 24);
                }
                *(_QWORD *)v83 = v80;
                *(_OWORD *)(v83 + 8) = *(_OWORD *)&v339.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v83 + 24) = v340;
                v340 = 0uLL;
                *(_QWORD *)(v83 + 40) = v85;
                *(_QWORD *)(v83 + 48) = v84;
                *(_BYTE *)(v83 + 56) = 1;
                __dst = 0;
                v334.__r_.__value_.__r.__words[0] = v83;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v334);
                v86 = v334.__r_.__value_.__r.__words[0];
                v334.__r_.__value_.__r.__words[0] = 0;
                a2 = (uint64_t)__src;
                if (v86)
                {
                  v87 = *(std::__shared_weak_count **)(v86 + 32);
                  if (v87)
                  {
                    v88 = (unint64_t *)&v87->__shared_owners_;
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                  v90 = *(std::__shared_weak_count **)(v86 + 16);
                  if (v90)
                  {
                    v91 = (unint64_t *)&v90->__shared_owners_;
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
                  MEMORY[0x212BC6398](v86, 0x10F0C40B62ED6C6);
                  v93 = __dst;
                  __dst = 0;
                  if (v93)
                  {
                    v94 = (std::__shared_weak_count *)v93[4];
                    if (v94)
                    {
                      v95 = (unint64_t *)&v94->__shared_owners_;
                      do
                        v96 = __ldaxr(v95);
                      while (__stlxr(v96 - 1, v95));
                      if (!v96)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                    }
                    v97 = (std::__shared_weak_count *)v93[2];
                    if (v97)
                    {
                      v98 = (unint64_t *)&v97->__shared_owners_;
                      do
                        v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                        std::__shared_weak_count::__release_weak(v97);
                      }
                    }
                    MEMORY[0x212BC6398](v93, 0x10F0C40B62ED6C6);
                  }
                }
                v100 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
                if (*((_QWORD *)&v340 + 1))
                {
                  v101 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                    std::__shared_weak_count::__release_weak(v100);
                  }
                }
                v103 = (std::__shared_weak_count *)v339.__r_.__value_.__r.__words[2];
                if (v339.__r_.__value_.__r.__words[2])
                {
                  v104 = (unint64_t *)(v339.__r_.__value_.__r.__words[2] + 8);
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
LABEL_164:
                if (v16)
                {
                  v106 = __s;
                  if ((char)__s[23] < 0)
                    v106 = *(const char **)__s;
                  sub_20E8C003C((uint64_t)__p, "Initializing VisualLogger file exporter %s", v106);
                  sub_20E863570((uint64_t)__p);
                }
                sub_20E863570((uint64_t)__p);
                v107 = v333;
                if (v333)
                {
                  v108 = (unint64_t *)&v333->__shared_owners_;
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
                goto LABEL_173;
              }
            }
            memcpy(p_dst, v19, v41);
            goto LABEL_66;
          }
        }
        memmove(v33, v26, v22);
        goto LABEL_47;
      }
    }
    memmove(p_size, v24, v25);
    goto LABEL_39;
  }
  sub_20EAE1E6C(v345);
  if (**(int **)(v345[0] + 56) <= 3)
  {
    v9 = *(unsigned __int8 *)(v345[0] + 72);
    v10 = sub_20E8C31DC(v345[0], "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10)
    {
      __p[0] = v345;
      __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v328 = 3;
      v329 = "unknown file";
      v330 = 107;
      v332 = 0;
      v333 = 0;
      v331 = "unknown function";
      v12 = __s;
      if ((char)__s[23] < 0)
        v12 = *(const char **)__s;
      v13 = *(_QWORD *)__p[0];
      v14 = (const char *)(*(_QWORD *)__p[0] + 16);
      v317 = v14;
      v319 = *(_QWORD *)__p[0];
      if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
      {
        v14 = *(const char **)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
      }
      else
      {
        v15 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      }
      v58 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v339);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v339);
        if ((_BYTE)v340 && SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v59 = byte_254A4A4F8;
      else
        v59 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v60 = byte_254A4A4F8[23];
      else
        v60 = *(_QWORD *)&byte_254A4A4F8[8];
      __srca = v14;
      v339.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v59, v14);
      v61 = &v339.__r_.__value_.__l.__size_;
      if (v60 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v60 >= 0x17)
      {
        v62 = v11;
        v63 = v12;
        v64 = v9;
        v65 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17)
          v65 = v60 | 7;
        v66 = v65 + 1;
        v61 = (std::string::size_type *)operator new(v65 + 1);
        v339.__r_.__value_.__r.__words[2] = v60;
        *(_QWORD *)&v340 = v66 | 0x8000000000000000;
        v339.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
        v9 = v64;
        v12 = v63;
        v11 = v62;
      }
      else
      {
        BYTE7(v340) = v60;
        if (!v60)
        {
LABEL_97:
          *((_BYTE *)v61 + v60) = 0;
          BYTE8(v340) = 1;
          v67 = (char *)&v341;
          if (v15 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v15 >= 0x17)
          {
            v68 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17)
              v68 = v15 | 7;
            v69 = v68 + 1;
            v67 = (char *)operator new(v68 + 1);
            v342 = v15;
            v343 = v69 | 0x8000000000000000;
            v341 = v67;
          }
          else
          {
            HIBYTE(v343) = v15;
            if (!v15)
            {
LABEL_105:
              v67[v15] = 0;
              v344 = 1;
              v70 = v339.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v343) < 0)
                operator delete(v341);
              if (BYTE8(v340) && SBYTE7(v340) < 0)
                operator delete((void *)v339.__r_.__value_.__l.__size_);
              if (v339.__r_.__value_.__r.__words[0])
                os_release(v339.__r_.__value_.__l.__data_);
              if (!v11 || !*(_QWORD *)(v11 + 24))
              {
                os_log_type_enabled(v70, OS_LOG_TYPE_INFO);
                LODWORD(v339.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v339.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
                v77 = (void *)_os_log_send_and_compose_impl();
                if (v77)
                  free(v77);
                goto LABEL_245;
              }
              v71 = _os_log_pack_size();
              v72 = operator new(v71, (std::align_val_t)8uLL);
              v73 = (_QWORD *)operator new();
              *v73 = &off_24C9ABB80;
              v73[1] = 0;
              v73[2] = 0;
              v73[3] = v72;
              v334.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
              v334.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
              v335 = 0uLL;
              v334.__r_.__value_.__r.__words[2] = (std::string::size_type)v73;
              v74 = strlen(v12);
              if (v74 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v75 = v74;
              if (v74 >= 0x17)
              {
                v114 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v74 | 7) != 0x17)
                  v114 = v74 | 7;
                v115 = v114 + 1;
                v76 = operator new(v114 + 1);
                *(_QWORD *)&v337 = v75;
                *((_QWORD *)&v337 + 1) = v115 | 0x8000000000000000;
                __dst = v76;
              }
              else
              {
                HIBYTE(v337) = v74;
                v76 = &__dst;
                if (!v74)
                {
LABEL_186:
                  *((_BYTE *)v76 + v75) = 0;
                  v116 = __dst;
                  *(_QWORD *)&v338 = v337;
                  *(_QWORD *)((char *)&v338 + 7) = *(_QWORD *)((char *)&v337 + 7);
                  v117 = HIBYTE(v337);
                  v118 = operator new(0x38uLL);
                  v118[1] = 0;
                  v118[2] = 0;
                  v118[3] = off_24C9ABC20;
                  *v118 = &off_24C9ABBD0;
                  v119 = v338;
                  v118[4] = v116;
                  v118[5] = v119;
                  *(_QWORD *)((char *)v118 + 47) = *(_QWORD *)((char *)&v338 + 7);
                  *((_BYTE *)v118 + 55) = v117;
                  *(_QWORD *)&v338 = 0;
                  *(_QWORD *)((char *)&v338 + 7) = 0;
                  v120 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
                  *(_QWORD *)&v335 = v118 + 3;
                  *((_QWORD *)&v335 + 1) = v118;
                  if (v120)
                  {
                    v121 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                  v339 = v334;
                  if (v334.__r_.__value_.__r.__words[2])
                  {
                    v123 = (unint64_t *)(v334.__r_.__value_.__r.__words[2] + 8);
                    do
                      v124 = __ldxr(v123);
                    while (__stxr(v124 + 1, v123));
                  }
                  v340 = v335;
                  if (*((_QWORD *)&v335 + 1))
                  {
                    v125 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
                    do
                      v126 = __ldxr(v125);
                    while (__stxr(v126 + 1, v125));
                    v341 = (char *)v335;
                    do
                      v127 = __ldaxr(v125);
                    while (__stlxr(v127 - 1, v125));
                    if (!v127)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v335 + 1) + 16))(*((_QWORD *)&v335 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v335 + 1));
                    }
                  }
                  else
                  {
                    v341 = (char *)v335;
                  }
                  if (v334.__r_.__value_.__r.__words[2])
                  {
                    v128 = (unint64_t *)(v334.__r_.__value_.__r.__words[2] + 8);
                    do
                      v129 = __ldaxr(v128);
                    while (__stlxr(v129 - 1, v128));
                    if (!v129)
                    {
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v334.__r_.__value_.__r.__words[2]
                                                                     + 16))(v334.__r_.__value_.__r.__words[2]);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v334.__r_.__value_.__r.__words[2]);
                    }
                  }
                  v130 = v339.__r_.__value_.__r.__words[0];
                  if (v341[31] >= 0)
                    v131 = v341 + 8;
                  else
                    v131 = (char *)*((_QWORD *)v341 + 1);
                  v132 = _os_log_pack_fill();
                  *(_DWORD *)v132 = 136315138;
                  *(_QWORD *)(v132 + 4) = v131;
                  v133 = operator new();
                  v134 = *(unsigned __int8 *)(v319 + 39);
                  v135 = v317;
                  if ((v134 & 0x80u) != 0)
                  {
                    v135 = *(const char **)(v319 + 16);
                    v134 = *(_QWORD *)(v319 + 24);
                  }
                  *(_QWORD *)v133 = v130;
                  *(_OWORD *)(v133 + 8) = *(_OWORD *)&v339.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v133 + 24) = v340;
                  v340 = 0uLL;
                  *(_QWORD *)(v133 + 40) = v135;
                  *(_QWORD *)(v133 + 48) = v134;
                  *(_BYTE *)(v133 + 56) = 1;
                  __dst = 0;
                  v334.__r_.__value_.__r.__words[0] = v133;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v334);
                  v136 = v334.__r_.__value_.__r.__words[0];
                  v334.__r_.__value_.__r.__words[0] = 0;
                  if (v136)
                  {
                    v137 = *(std::__shared_weak_count **)(v136 + 32);
                    if (v137)
                    {
                      v138 = (unint64_t *)&v137->__shared_owners_;
                      do
                        v139 = __ldaxr(v138);
                      while (__stlxr(v139 - 1, v138));
                      if (!v139)
                      {
                        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                        std::__shared_weak_count::__release_weak(v137);
                      }
                    }
                    v140 = *(std::__shared_weak_count **)(v136 + 16);
                    if (v140)
                    {
                      v141 = (unint64_t *)&v140->__shared_owners_;
                      do
                        v142 = __ldaxr(v141);
                      while (__stlxr(v142 - 1, v141));
                      if (!v142)
                      {
                        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                        std::__shared_weak_count::__release_weak(v140);
                      }
                    }
                    MEMORY[0x212BC6398](v136, 0x10F0C40B62ED6C6);
                    v143 = __dst;
                    __dst = 0;
                    if (v143)
                    {
                      v144 = (std::__shared_weak_count *)v143[4];
                      if (v144)
                      {
                        v145 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v146 = __ldaxr(v145);
                        while (__stlxr(v146 - 1, v145));
                        if (!v146)
                        {
                          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                          std::__shared_weak_count::__release_weak(v144);
                        }
                      }
                      v147 = (std::__shared_weak_count *)v143[2];
                      if (v147)
                      {
                        v148 = (unint64_t *)&v147->__shared_owners_;
                        do
                          v149 = __ldaxr(v148);
                        while (__stlxr(v149 - 1, v148));
                        if (!v149)
                        {
                          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                          std::__shared_weak_count::__release_weak(v147);
                        }
                      }
                      MEMORY[0x212BC6398](v143, 0x10F0C40B62ED6C6);
                    }
                  }
                  v150 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
                  if (*((_QWORD *)&v340 + 1))
                  {
                    v151 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
                    do
                      v152 = __ldaxr(v151);
                    while (__stlxr(v152 - 1, v151));
                    if (!v152)
                    {
                      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                      std::__shared_weak_count::__release_weak(v150);
                    }
                  }
                  v153 = (std::__shared_weak_count *)v339.__r_.__value_.__r.__words[2];
                  if (v339.__r_.__value_.__r.__words[2])
                  {
                    v154 = (unint64_t *)(v339.__r_.__value_.__r.__words[2] + 8);
                    do
                      v155 = __ldaxr(v154);
                    while (__stlxr(v155 - 1, v154));
                    if (!v155)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v153);
                    }
                  }
LABEL_245:
                  if (v9)
                  {
                    v156 = __s;
                    if ((char)__s[23] < 0)
                      v156 = *(const char **)__s;
                    sub_20E8C003C((uint64_t)__p, "Connecting to VisualLogger server %s", v156);
                    sub_20E863570((uint64_t)__p);
                  }
                  sub_20E863570((uint64_t)__p);
                  v157 = v333;
                  if (v333)
                  {
                    v158 = (unint64_t *)&v333->__shared_owners_;
                    do
                      v159 = __ldaxr(v158);
                    while (__stlxr(v159 - 1, v158));
                    if (!v159)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                    }
                  }
                  goto LABEL_254;
                }
              }
              memcpy(v76, v12, v75);
              goto LABEL_186;
            }
          }
          memmove(v67, __srca, v15);
          goto LABEL_105;
        }
      }
      memmove(v61, v59, v60);
      goto LABEL_97;
    }
  }
LABEL_254:
  if ((char)__s[23] < 0)
  {
    v161 = *(char **)__s;
    v160 = *((_QWORD *)__s + 1);
  }
  else
  {
    v160 = __s[23];
    v161 = __s;
  }
  sub_20E9E507C(v161, v160, ":", 1, 0, (uint64_t)&v339);
  v162 = (const std::string *)v339.__r_.__value_.__r.__words[0];
  if (v339.__r_.__value_.__l.__size_ - v339.__r_.__value_.__r.__words[0] != 48)
  {
    v314 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __cxa_throw(v314, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (*(char *)(v339.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)v339.__r_.__value_.__l.__data_, *(_QWORD *)(v339.__r_.__value_.__r.__words[0] + 8));
    v162 = (const std::string *)v339.__r_.__value_.__r.__words[0];
  }
  else
  {
    v163 = *(_OWORD *)v339.__r_.__value_.__l.__data_;
    rep = *(_QWORD *)(v339.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)__p = v163;
  }
  v164 = std::stoi(v162 + 1, 0, 10);
  if (!sub_20EAE0538((uint64_t)__p, v164, a3))
  {
    v315 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v315, "Failed to initialize network logger!");
    __cxa_throw(v315, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(rep) < 0)
    operator delete(__p[0]);
  v165 = v339.__r_.__value_.__r.__words[0];
  if (v339.__r_.__value_.__r.__words[0])
  {
    size = v339.__r_.__value_.__l.__size_;
    v167 = (void *)v339.__r_.__value_.__r.__words[0];
    if (v339.__r_.__value_.__l.__size_ != v339.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0)
          operator delete(*(void **)(size - 24));
        size -= 24;
      }
      while (size != v165);
      v167 = (void *)v339.__r_.__value_.__r.__words[0];
    }
    v339.__r_.__value_.__l.__size_ = v165;
    operator delete(v167);
  }
LABEL_272:
  if (!__s[56])
  {
    sub_20EAE1E6C(&v338);
    if (**(int **)(v338 + 56) > 3
      || (v170 = *(unsigned __int8 *)(v338 + 72),
          v171 = sub_20E8C31DC(v338, "OSLogSurrogateAppender", 1, 0),
          v172 = v171,
          !v170)
      && !v171)
    {
LABEL_511:
      v312 = sub_20FF3F5E8();
      v313 = (*(uint64_t (**)(_QWORD *, const char *, _QWORD))(v312[1] + 48))(v312 + 1, "", 0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v313 + 40))(v313, 1);
      return;
    }
    __p[0] = &v338;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v328 = 3;
    v329 = "unknown file";
    v330 = 138;
    v332 = 0;
    v333 = 0;
    v331 = "unknown function";
    v173 = *(_QWORD *)__p[0];
    v174 = *(_QWORD *)__p[0] + 16;
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v176 = *(const char **)(v173 + 16);
      v175 = *(_QWORD *)(v173 + 24);
    }
    else
    {
      v175 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      v176 = (const char *)(*(_QWORD *)__p[0] + 16);
    }
    v262 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v262 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v339);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v339);
      if ((_BYTE)v340 && SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v263 = byte_254A4A4F8;
    else
      v263 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v264 = byte_254A4A4F8[23];
    else
      v264 = *(_QWORD *)&byte_254A4A4F8[8];
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v263, v176);
    v265 = &v339.__r_.__value_.__l.__size_;
    if (v264 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v264 >= 0x17)
    {
      v266 = v172;
      v267 = v176;
      v268 = v173;
      v269 = v170;
      v270 = v174;
      v271 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v264 | 7) != 0x17)
        v271 = v264 | 7;
      v272 = v271 + 1;
      v265 = (std::string::size_type *)operator new(v271 + 1);
      v339.__r_.__value_.__r.__words[2] = v264;
      *(_QWORD *)&v340 = v272 | 0x8000000000000000;
      v339.__r_.__value_.__l.__size_ = (std::string::size_type)v265;
      v174 = v270;
      v170 = v269;
      v173 = v268;
      v176 = v267;
      v172 = v266;
    }
    else
    {
      BYTE7(v340) = v264;
      if (!v264)
      {
LABEL_441:
        *((_BYTE *)v265 + v264) = 0;
        BYTE8(v340) = 1;
        v273 = (char *)&v341;
        if (v175 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v175 >= 0x17)
        {
          v274 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v175 | 7) != 0x17)
            v274 = v175 | 7;
          v275 = v274 + 1;
          v273 = (char *)operator new(v274 + 1);
          v342 = v175;
          v343 = v275 | 0x8000000000000000;
          v341 = v273;
        }
        else
        {
          HIBYTE(v343) = v175;
          if (!v175)
            goto LABEL_449;
        }
        memmove(v273, v176, v175);
LABEL_449:
        v273[v175] = 0;
        v344 = 1;
        v276 = v339.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v343) < 0)
          operator delete(v341);
        if (BYTE8(v340) && SBYTE7(v340) < 0)
          operator delete((void *)v339.__r_.__value_.__l.__size_);
        if (v339.__r_.__value_.__r.__words[0])
          os_release(v339.__r_.__value_.__l.__data_);
        if (v172 && *(_QWORD *)(v172 + 24))
        {
          v277 = _os_log_pack_size();
          v278 = (std::__shared_weak_count_vtbl *)operator new(v277, (std::align_val_t)8uLL);
          v279 = (std::__shared_weak_count *)operator new();
          v280 = v279;
          v279->__shared_owners_ = 0;
          v281 = (unint64_t *)&v279->__shared_owners_;
          v279->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v279->__shared_weak_owners_ = 0;
          v279[1].__vftable = v278;
          v339.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
          v339.__r_.__value_.__l.__size_ = (std::string::size_type)v278;
          v339.__r_.__value_.__r.__words[2] = (std::string::size_type)v279;
          do
            v282 = __ldxr(v281);
          while (__stxr(v282 + 1, v281));
          v340 = 0uLL;
          v341 = 0;
          do
            v283 = __ldaxr(v281);
          while (__stlxr(v283 - 1, v281));
          if (!v283)
          {
            ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
            std::__shared_weak_count::__release_weak(v280);
          }
          v284 = v339.__r_.__value_.__r.__words[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v285 = operator new();
          v286 = *(unsigned __int8 *)(v173 + 39);
          if ((v286 & 0x80u) == 0)
            v287 = v174;
          else
            v287 = *(_QWORD *)(v173 + 16);
          if ((v286 & 0x80u) != 0)
            v286 = *(_QWORD *)(v173 + 24);
          *(_QWORD *)v285 = v284;
          *(_OWORD *)(v285 + 8) = *(_OWORD *)&v339.__r_.__value_.__r.__words[1];
          *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)(v285 + 24) = v340;
          v340 = 0uLL;
          *(_QWORD *)(v285 + 40) = v287;
          *(_QWORD *)(v285 + 48) = v286;
          *(_BYTE *)(v285 + 56) = 1;
          __dst = 0;
          v334.__r_.__value_.__r.__words[0] = v285;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v172 + 24) + 40))(*(_QWORD *)(v172 + 24), &v334);
          v288 = v334.__r_.__value_.__r.__words[0];
          v334.__r_.__value_.__r.__words[0] = 0;
          if (v288)
          {
            v289 = *(std::__shared_weak_count **)(v288 + 32);
            if (v289)
            {
              v290 = (unint64_t *)&v289->__shared_owners_;
              do
                v291 = __ldaxr(v290);
              while (__stlxr(v291 - 1, v290));
              if (!v291)
              {
                ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                std::__shared_weak_count::__release_weak(v289);
              }
            }
            v292 = *(std::__shared_weak_count **)(v288 + 16);
            if (v292)
            {
              v293 = (unint64_t *)&v292->__shared_owners_;
              do
                v294 = __ldaxr(v293);
              while (__stlxr(v294 - 1, v293));
              if (!v294)
              {
                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                std::__shared_weak_count::__release_weak(v292);
              }
            }
            MEMORY[0x212BC6398](v288, 0x10F0C40B62ED6C6);
            v295 = __dst;
            __dst = 0;
            if (v295)
            {
              v296 = (std::__shared_weak_count *)v295[4];
              if (v296)
              {
                v297 = (unint64_t *)&v296->__shared_owners_;
                do
                  v298 = __ldaxr(v297);
                while (__stlxr(v298 - 1, v297));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                  std::__shared_weak_count::__release_weak(v296);
                }
              }
              v299 = (std::__shared_weak_count *)v295[2];
              if (v299)
              {
                v300 = (unint64_t *)&v299->__shared_owners_;
                do
                  v301 = __ldaxr(v300);
                while (__stlxr(v301 - 1, v300));
                if (!v301)
                {
                  ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                  std::__shared_weak_count::__release_weak(v299);
                }
              }
              MEMORY[0x212BC6398](v295, 0x10F0C40B62ED6C6);
            }
          }
          v302 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
          if (*((_QWORD *)&v340 + 1))
          {
            v303 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
            do
              v304 = __ldaxr(v303);
            while (__stlxr(v304 - 1, v303));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
              std::__shared_weak_count::__release_weak(v302);
            }
          }
          v305 = (std::__shared_weak_count *)v339.__r_.__value_.__r.__words[2];
          if (v339.__r_.__value_.__r.__words[2])
          {
            v306 = (unint64_t *)(v339.__r_.__value_.__r.__words[2] + 8);
            do
              v307 = __ldaxr(v306);
            while (__stlxr(v307 - 1, v306));
            if (!v307)
            {
              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
              std::__shared_weak_count::__release_weak(v305);
            }
          }
        }
        else
        {
          os_log_type_enabled(v276, OS_LOG_TYPE_INFO);
          LOWORD(v339.__r_.__value_.__l.__data_) = 0;
          v308 = (void *)_os_log_send_and_compose_impl();
          if (v308)
            free(v308);
        }
        if (v170)
        {
          sub_20E8C003C((uint64_t)__p, "Enabling root logging context");
          sub_20E863570((uint64_t)__p);
        }
        sub_20E863570((uint64_t)__p);
        v309 = v333;
        if (v333)
        {
          v310 = (unint64_t *)&v333->__shared_owners_;
          do
            v311 = __ldaxr(v310);
          while (__stlxr(v311 - 1, v310));
          if (!v311)
          {
            ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
            std::__shared_weak_count::__release_weak(v309);
          }
        }
        goto LABEL_511;
      }
    }
    memmove(v265, v263, v264);
    goto LABEL_441;
  }
  if ((char)__s[55] < 0)
  {
    v168 = (char *)*((_QWORD *)__s + 4);
    v169 = *((_QWORD *)__s + 5);
  }
  else
  {
    v168 = __s + 32;
    v169 = __s[55];
  }
  sub_20E9E507C(v168, v169, ",", 1, 0, (uint64_t)&v338);
  v177 = (uint64_t *)*((_QWORD *)&v338 + 1);
  v178 = (uint64_t *)v338;
  if ((_QWORD)v338 == *((_QWORD *)&v338 + 1))
    goto LABEL_417;
  v316 = (uint64_t *)*((_QWORD *)&v338 + 1);
  do
  {
    sub_20EAE1E6C(&v325);
    if (**(int **)(v325 + 56) > 3)
      goto LABEL_403;
    v179 = *(unsigned __int8 *)(v325 + 72);
    v180 = sub_20E8C31DC(v325, "OSLogSurrogateAppender", 1, 0);
    v181 = v180;
    if (!v179 && v180 == 0)
      goto LABEL_403;
    __p[0] = &v325;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v328 = 3;
    v329 = "unknown file";
    v330 = 133;
    v331 = "unknown function";
    v332 = 0;
    v333 = 0;
    v183 = (const char *)v178;
    if (*((char *)v178 + 23) < 0)
    {
      v183 = (const char *)*v178;
      v184 = *(_QWORD *)__p[0];
      v185 = *(_QWORD *)__p[0] + 16;
      v186 = *(char *)(*(_QWORD *)__p[0] + 39);
      v321 = *(_QWORD *)__p[0];
      if (v186 < 0)
      {
LABEL_293:
        v188 = *(const char **)(v184 + 16);
        v187 = *(_QWORD *)(v184 + 24);
        __srcb = (void *)v185;
        v190 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v190 & 1) != 0)
          goto LABEL_294;
        goto LABEL_412;
      }
    }
    else
    {
      v184 = *(_QWORD *)__p[0];
      v185 = *(_QWORD *)__p[0] + 16;
      v186 = *(char *)(*(_QWORD *)__p[0] + 39);
      v321 = *(_QWORD *)__p[0];
      if (v186 < 0)
        goto LABEL_293;
    }
    v187 = v186;
    v188 = (const char *)v185;
    __srcb = (void *)v185;
    v189 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v189 & 1) != 0)
      goto LABEL_294;
LABEL_412:
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v334);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v334);
      if ((_BYTE)v335 && SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v334.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_294:
    if (byte_254A4A4F8[23] >= 0)
      v191 = byte_254A4A4F8;
    else
      v191 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v192 = byte_254A4A4F8[23];
    else
      v192 = *(_QWORD *)&byte_254A4A4F8[8];
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v191, v188);
    if (v192 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v192 >= 0x17)
    {
      v194 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v192 | 7) != 0x17)
        v194 = v192 | 7;
      v195 = v194 + 1;
      v193 = (std::string::size_type *)operator new(v194 + 1);
      v339.__r_.__value_.__r.__words[2] = v192;
      *(_QWORD *)&v340 = v195 | 0x8000000000000000;
      v339.__r_.__value_.__l.__size_ = (std::string::size_type)v193;
LABEL_307:
      memmove(v193, v191, v192);
      goto LABEL_308;
    }
    BYTE7(v340) = v192;
    v193 = &v339.__r_.__value_.__l.__size_;
    if (v192)
      goto LABEL_307;
LABEL_308:
    *((_BYTE *)v193 + v192) = 0;
    BYTE8(v340) = 1;
    if (v187 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v187 >= 0x17)
    {
      v198 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v187 | 7) != 0x17)
        v198 = v187 | 7;
      v199 = v198 + 1;
      v196 = (char *)operator new(v198 + 1);
      v342 = v187;
      v343 = v199 | 0x8000000000000000;
      v341 = v196;
    }
    else
    {
      HIBYTE(v343) = v187;
      v196 = (char *)&v341;
      if (!v187)
      {
        LOBYTE(v341) = 0;
        v344 = 1;
        v197 = v339.__r_.__value_.__r.__words[0];
        if ((SHIBYTE(v343) & 0x80000000) == 0)
          goto LABEL_312;
        goto LABEL_318;
      }
    }
    memmove(v196, v188, v187);
    v196[v187] = 0;
    v344 = 1;
    v197 = v339.__r_.__value_.__r.__words[0];
    if ((SHIBYTE(v343) & 0x80000000) == 0)
    {
LABEL_312:
      if (!BYTE8(v340))
        goto LABEL_321;
      goto LABEL_319;
    }
LABEL_318:
    operator delete(v341);
    if (!BYTE8(v340))
      goto LABEL_321;
LABEL_319:
    if (SBYTE7(v340) < 0)
      operator delete((void *)v339.__r_.__value_.__l.__size_);
LABEL_321:
    if (v339.__r_.__value_.__r.__words[0])
      os_release(v339.__r_.__value_.__l.__data_);
    if (!v181 || !*(_QWORD *)(v181 + 24))
    {
      os_log_type_enabled(v197, OS_LOG_TYPE_INFO);
      LODWORD(v339.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v339.__r_.__value_.__r.__words + 4) = (std::string::size_type)v183;
      v206 = (void *)_os_log_send_and_compose_impl();
      if (v206)
      {
        free(v206);
        if (v179)
          goto LABEL_394;
        goto LABEL_397;
      }
LABEL_393:
      if (v179)
        goto LABEL_394;
      goto LABEL_397;
    }
    v200 = _os_log_pack_size();
    v201 = operator new(v200, (std::align_val_t)8uLL);
    v202 = (_QWORD *)operator new();
    *v202 = &off_24C9ABB80;
    v202[1] = 0;
    v202[2] = 0;
    v202[3] = v201;
    v334.__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
    v334.__r_.__value_.__l.__size_ = (std::string::size_type)v201;
    v334.__r_.__value_.__r.__words[2] = (std::string::size_type)v202;
    v335 = 0uLL;
    v203 = strlen(v183);
    if (v203 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v204 = v203;
    if (v203 >= 0x17)
    {
      v207 = (v203 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v203 | 7) != 0x17)
        v207 = v203 | 7;
      v208 = v207 + 1;
      v205 = operator new(v207 + 1);
      *(_QWORD *)&v337 = v204;
      *((_QWORD *)&v337 + 1) = v208 | 0x8000000000000000;
      __dst = v205;
    }
    else
    {
      HIBYTE(v337) = v203;
      v205 = &__dst;
      if (!v203)
        goto LABEL_336;
    }
    memcpy(v205, v183, v204);
LABEL_336:
    *((_BYTE *)v205 + v204) = 0;
    v209 = __dst;
    v345[0] = v337;
    *(uint64_t *)((char *)v345 + 7) = *(_QWORD *)((char *)&v337 + 7);
    v210 = HIBYTE(v337);
    v211 = operator new(0x38uLL);
    v211[1] = 0;
    v211[2] = 0;
    v211[3] = off_24C9ABC20;
    *v211 = &off_24C9ABBD0;
    v212 = v345[0];
    v211[4] = v209;
    v211[5] = v212;
    *(_QWORD *)((char *)v211 + 47) = *(uint64_t *)((char *)v345 + 7);
    *((_BYTE *)v211 + 55) = v210;
    memset(v345, 0, 15);
    v213 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
    *(_QWORD *)&v335 = v211 + 3;
    *((_QWORD *)&v335 + 1) = v211;
    if (v213)
    {
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v339 = v334;
    v216 = (char *)v335;
    if (v334.__r_.__value_.__r.__words[2])
    {
      v217 = (unint64_t *)(v334.__r_.__value_.__r.__words[2] + 8);
      do
        v218 = __ldxr(v217);
      while (__stxr(v218 + 1, v217));
    }
    v219 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
    *(_QWORD *)&v340 = v216;
    *((_QWORD *)&v340 + 1) = *((_QWORD *)&v335 + 1);
    if (*((_QWORD *)&v335 + 1))
    {
      v220 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
      v341 = v216;
      do
        v222 = __ldaxr(v220);
      while (__stlxr(v222 - 1, v220));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
        std::__shared_weak_count::__release_weak(v219);
      }
    }
    else
    {
      v341 = v216;
    }
    v223 = (std::__shared_weak_count *)v334.__r_.__value_.__r.__words[2];
    if (v334.__r_.__value_.__r.__words[2])
    {
      v224 = (unint64_t *)(v334.__r_.__value_.__r.__words[2] + 8);
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    v226 = v339.__r_.__value_.__r.__words[0];
    if (v341[31] >= 0)
      v227 = v341 + 8;
    else
      v227 = (char *)*((_QWORD *)v341 + 1);
    v228 = _os_log_pack_fill();
    *(_DWORD *)v228 = 136315138;
    *(_QWORD *)(v228 + 4) = v227;
    v229 = operator new();
    v230 = *(unsigned __int8 *)(v321 + 39);
    v231 = __srcb;
    if ((v230 & 0x80u) != 0)
    {
      v231 = *(void **)(v321 + 16);
      v230 = *(_QWORD *)(v321 + 24);
    }
    *(_QWORD *)v229 = v226;
    *(_OWORD *)(v229 + 8) = *(_OWORD *)&v339.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v229 + 24) = v340;
    v340 = 0uLL;
    *(_QWORD *)(v229 + 40) = v231;
    *(_QWORD *)(v229 + 48) = v230;
    *(_BYTE *)(v229 + 56) = 1;
    __dst = 0;
    v334.__r_.__value_.__r.__words[0] = v229;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v181 + 24) + 40))(*(_QWORD *)(v181 + 24), &v334);
    v232 = v334.__r_.__value_.__r.__words[0];
    v334.__r_.__value_.__r.__words[0] = 0;
    if (v232)
    {
      v233 = *(std::__shared_weak_count **)(v232 + 32);
      if (v233)
      {
        v234 = (unint64_t *)&v233->__shared_owners_;
        do
          v235 = __ldaxr(v234);
        while (__stlxr(v235 - 1, v234));
        if (!v235)
        {
          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
          std::__shared_weak_count::__release_weak(v233);
        }
      }
      v236 = *(std::__shared_weak_count **)(v232 + 16);
      if (v236)
      {
        v237 = (unint64_t *)&v236->__shared_owners_;
        do
          v238 = __ldaxr(v237);
        while (__stlxr(v238 - 1, v237));
        if (!v238)
        {
          ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
          std::__shared_weak_count::__release_weak(v236);
        }
      }
      MEMORY[0x212BC6398](v232, 0x10F0C40B62ED6C6);
      v239 = __dst;
      __dst = 0;
      if (v239)
      {
        v240 = (std::__shared_weak_count *)v239[4];
        if (v240)
        {
          v241 = (unint64_t *)&v240->__shared_owners_;
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        v243 = (std::__shared_weak_count *)v239[2];
        if (v243)
        {
          v244 = (unint64_t *)&v243->__shared_owners_;
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        MEMORY[0x212BC6398](v239, 0x10F0C40B62ED6C6);
      }
    }
    v246 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
    if (!*((_QWORD *)&v340 + 1))
      goto LABEL_389;
    v247 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
      v249 = (std::__shared_weak_count *)v339.__r_.__value_.__r.__words[2];
      if (!v339.__r_.__value_.__r.__words[2])
        goto LABEL_393;
    }
    else
    {
LABEL_389:
      v249 = (std::__shared_weak_count *)v339.__r_.__value_.__r.__words[2];
      if (!v339.__r_.__value_.__r.__words[2])
        goto LABEL_393;
    }
    v250 = (unint64_t *)&v249->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (v251)
      goto LABEL_393;
    ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
    std::__shared_weak_count::__release_weak(v249);
    if (v179)
    {
LABEL_394:
      v252 = (const char *)v178;
      if (*((char *)v178 + 23) < 0)
        v252 = (const char *)*v178;
      sub_20E8C003C((uint64_t)__p, "Enabling logging context: %s", v252);
      sub_20E863570((uint64_t)__p);
    }
LABEL_397:
    sub_20E863570((uint64_t)__p);
    v253 = v333;
    if (v333)
    {
      v254 = (unint64_t *)&v333->__shared_owners_;
      do
        v255 = __ldaxr(v254);
      while (__stlxr(v255 - 1, v254));
      if (!v255)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
    v177 = v316;
LABEL_403:
    v256 = sub_20FF3F5E8();
    if (*((char *)v178 + 23) < 0)
    {
      v258 = (uint64_t *)*v178;
      v257 = v178[1];
    }
    else
    {
      v257 = *((unsigned __int8 *)v178 + 23);
      v258 = v178;
    }
    v259 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(v256[1] + 48))(v256 + 1, v258, v257);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v259 + 40))(v259, 1);
    v178 += 3;
  }
  while (v178 != v177);
  v178 = (uint64_t *)v338;
LABEL_417:
  if (v178)
  {
    v260 = (uint64_t *)*((_QWORD *)&v338 + 1);
    v261 = v178;
    if (*((uint64_t **)&v338 + 1) != v178)
    {
      do
      {
        if (*((char *)v260 - 1) < 0)
          operator delete((void *)*(v260 - 3));
        v260 -= 3;
      }
      while (v260 != v178);
      v261 = (uint64_t *)v338;
    }
    *((_QWORD *)&v338 + 1) = v178;
    operator delete(v261);
  }
}

void sub_20EAE5974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  if (*(_BYTE *)(v17 - 168))
  {
    if (*(char *)(v17 - 169) < 0)
      operator delete(*(void **)(v17 - 192));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAE59C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  uint64_t v41;

  if (a41)
  {
    if (a40 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a25);
  sub_20E89FB98((void **)(v41 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20E86E8C4(&a35);
  sub_20E86E8C4((uint64_t *)(v35 - 240));
  sub_20E86E658(v35 - 192);
  sub_20E863714((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20EAE5B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAE5B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAE5B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAE5BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89FB98((void **)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_20EAE5BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v32;

  if (*(_BYTE *)(v30 - 160) && *(char *)(v30 - 161) < 0)
    operator delete(*(void **)(v30 - 184));
  v32 = *(void **)(v30 - 192);
  if (v32)
    os_release(v32);
  sub_20E863714((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_20EAE5CCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EAE5CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a25);
  sub_20E89FB98((void **)(v35 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
  {
    operator delete(*(void **)(v1 - 192));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EAE5D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20E86E658(&a35);
  sub_20E863714(&a25);
  sub_20E89FB98(v35 - 216);
  _Unwind_Resume(a1);
}

void sub_20EAE5D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20E86E8C4(&a35);
  sub_20E86E8C4((uint64_t *)(v35 - 240));
  sub_20E86E658(v35 - 192);
  sub_20E863714((uint64_t)&a25);
  sub_20E89FB98((void **)(v35 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (v35 < 0)
    operator delete(v36);
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a25);
  sub_20E89FB98((void **)(v37 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);
  MEMORY[0x212BC6398](v17, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  sub_20E89FB98((void **)(v18 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5DDC()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  v1 = *(void **)(v0 - 192);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20EAE5E50);
}

void sub_20EAE5E30(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EAE5E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20E863714((uint64_t)va);
  sub_20E89FB98((void **)(v17 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89FB98((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89FB98((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89FB98((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20EAE5EA8()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EAE5EBC(uint64_t a1)
{
  __int128 **v1;
  _QWORD *v2;
  __int128 *v3;
  __int128 v4;
  __int16 v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE *v38;
  char v39;
  _BYTE v40[24];
  _BYTE *v41;
  char v42;
  __int128 __dst;
  uint64_t v44;
  __int16 v45;
  int v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  _BYTE *v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v1 = *(__int128 ***)(a1 + 8);
  LOBYTE(__p[0]) = 0;
  v29 = 0;
  LOWORD(v30) = 0;
  BYTE2(v30) = 0;
  BYTE8(v30) = 0;
  LOBYTE(v31) = 0;
  v2 = v32;
  LOBYTE(v32[0]) = 0;
  v34 = 0;
  LOBYTE(v35) = 0;
  LOBYTE(v36) = 0;
  v3 = *v1;
  if (*((char *)*v1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)v3, *((_QWORD *)v3 + 1));
    v5 = *(_WORD *)v1[1];
    v45 = v5;
    v6 = *(_DWORD *)v1[2];
    v46 = v6;
  }
  else
  {
    v4 = *v3;
    v44 = *((_QWORD *)v3 + 2);
    __dst = v4;
    v5 = *(_WORD *)v1[1];
    v6 = *(_DWORD *)v1[2];
  }
  *(_OWORD *)__p = __dst;
  v26 = v44;
  v27 = v5;
  v28 = v6;
  v29 = 1;
  v35 = 0uLL;
  LOBYTE(v36) = 1;
  LOWORD(v30) = 2;
  BYTE2(v30) = 0;
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v7 = sub_20FF3F5E8();
  v8 = operator new(0x38uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C9C3F78;
  LOBYTE(__dst) = 0;
  v47 = 0;
  if (v29)
  {
    __dst = *(_OWORD *)__p;
    v44 = v26;
    __p[1] = 0;
    v26 = 0;
    __p[0] = 0;
    v45 = v27;
    v46 = v28;
    v47 = 1;
  }
  v48 = v30;
  v49 = v31;
  v9 = v50;
  v50[0] = 0;
  v52 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v33 == v32)
      {
        v51 = v50;
        (*(void (**)(_QWORD *, _BYTE *))(v32[0] + 24))(v32, v50);
      }
      else
      {
        v51 = v33;
        v33 = 0;
      }
    }
    else
    {
      v51 = 0;
    }
    v52 = 1;
  }
  v53 = v35;
  v54 = v36;
  v40[0] = 0;
  v42 = 0;
  if ((_BYTE)v24)
  {
    if (*((_QWORD *)&v23 + 1))
    {
      if (*((__int128 **)&v23 + 1) == &v22)
      {
        v41 = v40;
        (*(void (**)(__int128 *, _BYTE *))(v22 + 24))(&v22, v40);
      }
      else
      {
        v41 = (_BYTE *)*((_QWORD *)&v23 + 1);
        *((_QWORD *)&v23 + 1) = 0;
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = 1;
  }
  v37[0] = 0;
  v39 = 0;
  sub_20FDCF9B0((uint64_t)(v8 + 3), (uint64_t)&__dst, (uint64_t)v40, (uint64_t)v37, (uint64_t)v7, 1);
  if (v39)
  {
    v10 = v38;
    if (v38 == v37)
    {
      v11 = 4;
      v10 = v37;
    }
    else
    {
      if (!v38)
        goto LABEL_27;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
LABEL_27:
  if (!v42)
    goto LABEL_33;
  v12 = v41;
  if (v41 == v40)
  {
    v13 = 4;
    v12 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_33;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_33:
  if (v52)
  {
    if (v51 == v50)
    {
      v14 = 4;
      goto LABEL_38;
    }
    if (v51)
    {
      v14 = 5;
      v9 = v51;
LABEL_38:
      (*(void (**)(_QWORD *))(*v9 + 8 * v14))(v9);
    }
  }
  if (v47 && SHIBYTE(v44) < 0)
    operator delete((void *)__dst);
  v15 = v1[3];
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 1);
  *(_QWORD *)v15 = v8 + 3;
  *((_QWORD *)v15 + 1) = v8;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if ((_BYTE)v24)
  {
    v19 = (__int128 *)*((_QWORD *)&v23 + 1);
    if (*((__int128 **)&v23 + 1) == &v22)
    {
      v20 = 4;
      v19 = &v22;
    }
    else
    {
      if (!*((_QWORD *)&v23 + 1))
        goto LABEL_53;
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  }
LABEL_53:
  if (!v34)
    goto LABEL_59;
  if (v33 == v32)
  {
    v21 = 4;
  }
  else
  {
    if (!v33)
      goto LABEL_59;
    v21 = 5;
    v2 = v33;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v21))(v2);
LABEL_59:
  if (v29)
  {
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
  }
}

void sub_20EAE6328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAE6464(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(_QWORD **)(a1 + 96);
    if (v2 == (_QWORD *)(a1 + 72))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 72);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

void sub_20EAE64E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C3F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EAE64F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C3F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAE6524(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20EAE6538(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*v2 + 40))(a2[3]);
  return result;
}

uint64_t sub_20EAE6578(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EAE65D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C3FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EAE65E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C3FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EAE6610(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_20EAE6660(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

void sub_20EAE66BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EAE66CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C4060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EAE66FC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_20FF0981C(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EAE679C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EAE6D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EAE6D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAE6D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAE6DA0(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20EAE6DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 v9;
  uint64_t v10;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = off_24C9C4290;
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)(v4 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 16);
    }
    *(_BYTE *)(v5 + 32) = 1;
  }
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20EAE81E8(a2);
  v7 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v9;
  *(_QWORD *)(a1 + 184) = v10;
  return a1;
}

void sub_20EAE6ED8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*v2);
  }
  MEMORY[0x212BC6398](v1, 0x1093C40EF66AD57);
  _Unwind_Resume(a1);
}

void sub_20EAE6F14(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EAE7424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EAE7528(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EAE7548(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EAE7568(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EAE7570(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EAE7578(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

void sub_20EAE75D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)((unint64_t)"N4cv3d3kit2po8OptionalINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)((unint64_t)"N4cv3d3kit2po8OptionalINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = (_QWORD *)(*a2 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
LABEL_9:
    sub_20E869118(v7, v6);
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_228;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    (*(void (**)(uint64_t, _QWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
}

void sub_20EAE76CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAE76E0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C40B0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C4128;
  *(_QWORD *)(a1 + 152) = &unk_24C9C4150;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EAE7AA8(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EAE7AA8(a1);
}

void sub_20EAE7748(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C40B0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C4128;
  *(_QWORD *)(a1 + 152) = &unk_24C9C4150;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EAE7AA8(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EAE77C4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EAE7B74(a2, a3);
  }
}

void *sub_20EAE7840()
{
  return &unk_24C9C4270;
}

uint64_t sub_20EAE784C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20EAE7854()
{
  return &unk_24C9C4270;
}

uint64_t sub_20EAE7860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C40B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C4128;
  *(_QWORD *)(a1 + 144) = &unk_24C9C4150;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EAE7AA8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAE7AA8(v2);
}

void sub_20EAE78D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C40B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C4128;
  *(_QWORD *)(a1 + 144) = &unk_24C9C4150;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EAE7AA8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAE7954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C40B0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C4128;
  *(_QWORD *)a1 = &unk_24C9C4150;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EAE7AA8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EAE7AA8(v2);
}

void sub_20EAE79C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C40B0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C4128;
  *(_QWORD *)a1 = &unk_24C9C4150;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EAE7AA8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EAE7A48(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EAE7A54(uint64_t a1)
{
  sub_20EAE7AA8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAE7A78(uint64_t a1)
{
  return sub_20EAE7AA8(a1 - 8);
}

void sub_20EAE7A80(uint64_t a1)
{
  sub_20EAE7AA8(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EAE7AA8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9C41E8;
  *(_QWORD *)(a1 + 8) = &unk_24C9C4258;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EAE7B74(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  std::bad_cast_vtbl *p_dst;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::bad_cast *v11;
  void *__p[2];
  __int128 v13;
  __int128 __dst;
  uint64_t v15;
  std::bad_cast v16;
  char *v17;
  void *v18;

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v15 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v6 = HIBYTE(v15);
  p_dst = (std::bad_cast_vtbl *)&__dst;
  if (v15 < 0)
  {
    v6 = *((_QWORD *)&__dst + 1);
    p_dst = (std::bad_cast_vtbl *)__dst;
  }
  v16.__vftable = p_dst;
  v17 = (char *)p_dst + v6;
  if (!sub_20EAE7D84((uint64_t *)&v16, (uint64_t)__p))
  {
    v11 = std::bad_cast::bad_cast(&v16);
    v16.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v17 = (char *)&unk_24C9AB9F0;
    v18 = &unk_24C9C4270;
    sub_20EA9F254((uint64_t)v11);
  }
  v8 = operator new();
  *(_QWORD *)v8 = off_24C9C4290;
  *(_BYTE *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  v9 = BYTE8(v13);
  if (BYTE8(v13))
  {
    *(_OWORD *)(v8 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(v8 + 24) = v13;
    __p[1] = 0;
    *(_QWORD *)&v13 = 0;
    __p[0] = 0;
    *(_BYTE *)(v8 + 32) = 1;
  }
  v10 = *a1;
  *a1 = v8;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9 = BYTE8(v13);
  }
  if (v9 && SBYTE7(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__dst);
}

void sub_20EAE7CEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __break(1u);
}

void sub_20EAE7D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20EAE7D68);
}

BOOL sub_20EAE7D84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v10[2];
  std::ios_base v11;
  uint64_t v12;
  int v13;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &off_24C9C2750;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v10[1] = 0;
  v11.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v10[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v11, __sb);
  v12 = 0;
  v13 = -1;
  v6 = (std::ios_base *)((char *)v10 + *(_QWORD *)(v10[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v10[0];
  *(_DWORD *)((char *)&v10[1] + *(_QWORD *)(v10[0] - 24)) &= ~0x1000u;
  *(_QWORD *)((char *)&v10[2] + *(_QWORD *)(v7 - 24)) = 6;
  sub_2101020B0(v10, a2);
  v8 = (*((_BYTE *)&v11.__precision_ + *(_QWORD *)(v10[0] - 24)) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v8;
}

void sub_20EAE7EA8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAE7F00(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 32))
  {
    if (*(char *)(result + 31) < 0)
    {
      operator delete(*(void **)(result + 8));
      return v1;
    }
  }
  return result;
}

void sub_20EAE7F48(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x212BC6398);
}

void *sub_20EAE7F90()
{
  return &unk_24C9C4270;
}

uint64_t sub_20EAE7F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_24C9C4290;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_20E860C04((_BYTE *)(v2 + 8), *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
      *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 24);
    }
    *(_BYTE *)(v3 + 32) = 1;
  }
  return v3;
}

void sub_20EAE8034(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*v2);
  }
  MEMORY[0x212BC6398](v1, 0x1093C40EF66AD57);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EAE8070(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EAE8110(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EAE8120(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EAE8134(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C42D8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3kit2po8OptionalINSt3__112basic_"
                                      "stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEPN5boost15program_options11typ"
                                      "ed_valueIT_cEERSF_EUlRKSB_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3kit2po8OptionalINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEPN5boost15program_options11typed_valueIT_cEERSF_EUlRKSB_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

void sub_20EAE81E0(uint64_t *a1, _QWORD *a2)
{
  sub_20E869118(*a1, a2);
}

uint64_t sub_20EAE81E8(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  void *__p[2];
  char v5;
  _QWORD v6[5];
  _QWORD *v7;

  v3 = 0;
  sub_20EAE830C(a1, __p);
  v6[0] = v2;
  v6[1] = __p;
  v6[2] = v2;
  v6[3] = __p;
  v6[4] = __p;
  v7 = v6;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v7, v2);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v3 == -1)
    sub_20E877AB8();
  v6[0] = __p;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C4318[v3])(v6, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9C4300[v3])(v6, v2);
  return result;
}

void sub_20EAE82D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EAE82E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void *sub_20EAE830C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v21 = v4;
  sub_20E86A980((_QWORD *)(v4 + 16), (uint64_t)"{", 1);
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = *(char *)(a1 + 23);
    if (v5 >= 0)
      v6 = a1;
    else
      v6 = *(_QWORD *)a1;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 23);
    else
      v7 = *(_QWORD *)(a1 + 8);
    sub_20E86A980((_QWORD *)(v4 + 16), v6, v7);
  }
  result = sub_20E86A980((_QWORD *)(v4 + 16), (uint64_t)"}", 1);
  v9 = *(_DWORD *)(v4 + 120);
  if ((v9 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v4 + 112);
    v12 = *(_QWORD *)(v4 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v4 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v4 + 64);
    v14 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      a2[23] = 0;
      *a2 = 0;
      v10 = v4;
      if (!v4)
        return result;
LABEL_19:
      v15 = MEMORY[0x24BEDB7F0];
      v16 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v10 = *MEMORY[0x24BEDB7F0];
      v17 = *(_QWORD *)(v15 + 72);
      *(_QWORD *)(v10 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
      *(_QWORD *)(v10 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v10 + 16) = v17;
      if (*(char *)(v10 + 111) < 0)
        operator delete(*(void **)(v10 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v10 + 128);
      JUMPOUT(0x212BC6398);
    }
    v13 = *(const void **)(v4 + 40);
    v14 = *(_QWORD *)(v4 + 56) - (_QWORD)v13;
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20E860B7C();
  }
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
  }
  else
  {
    a2[23] = v14;
    if (!v14)
    {
      *a2 = 0;
      v10 = v21;
      if (v21)
        goto LABEL_19;
      return result;
    }
  }
  result = memmove(a2, v13, v14);
  a2[v14] = 0;
  v10 = v21;
  if (v21)
    goto LABEL_19;
  return result;
}

void sub_20EAE854C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EAE8570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EAE8584(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  std::chrono::steady_clock::time_point v37;
  uint64_t *v38;
  double v39;
  unsigned __int8 v40;
  unint64_t v41;
  double v42;
  char *v43;
  size_t v44;
  __darwin_time_t tv_sec;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  timespec v50;
  int v51;
  double v52[3];
  char v53;
  void *v54;
  char v55;
  char v56;
  void *v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *__p;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = (__int128 *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 8);
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 8) = v7;
  v10 = *(_OWORD *)(a2 + 72);
  v11 = *(_OWORD *)(a2 + 88);
  v12 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v12;
  *(_OWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 72) = v10;
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  v15 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  v16 = *(_OWORD *)(a2 + 192);
  v17 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v17;
  *(_OWORD *)(a1 + 192) = v16;
  v18 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = v18;
  v20 = *(_OWORD *)(a2 + 296);
  v19 = *(_OWORD *)(a2 + 312);
  v21 = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 296) = v20;
  *(_OWORD *)(a1 + 312) = v19;
  *(_OWORD *)(a1 + 280) = v21;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  if (*(char *)(a2 + 367) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 344), *(void **)(a2 + 344), *(_QWORD *)(a2 + 352));
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 344) = v22;
  }
  v23 = *(_OWORD *)(a2 + 368);
  v24 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v24;
  *(_OWORD *)(a1 + 368) = v23;
  v25 = *(_OWORD *)(a2 + 432);
  v26 = *(_OWORD *)(a2 + 448);
  v27 = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 448) = v26;
  *(_OWORD *)(a1 + 464) = v27;
  *(_OWORD *)(a1 + 432) = v25;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0xBFF0000000000000;
  sub_20F1E8494(a1 + 512, v6);
  *(_QWORD *)(a1 + 2720) = 0;
  *(_OWORD *)(a1 + 2704) = 0u;
  v28 = (char *)operator new(0x27100uLL);
  *(_QWORD *)(a1 + 2704) = v28;
  *(_QWORD *)(a1 + 2712) = v28;
  *(_QWORD *)(a1 + 2720) = v28 + 160000;
  v29 = v28 + 8;
  v30 = 5000;
  do
  {
    *(v29 - 1) = 0xBFF0000000000000;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    v29 += 4;
    --v30;
  }
  while (v30);
  *(_QWORD *)(a1 + 2712) = v28 + 160000;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  v31 = (char *)operator new(0x27100uLL);
  *(_QWORD *)(a1 + 2752) = v31;
  *(_QWORD *)(a1 + 2760) = v31;
  *(_QWORD *)(a1 + 2768) = v31 + 160000;
  v32 = v31 + 8;
  v33 = 5000;
  do
  {
    *(v32 - 1) = 0xBFF0000000000000;
    *v32 = 0;
    v32[1] = 0;
    v32[2] = 0;
    v32 += 4;
    --v33;
  }
  while (v33);
  *(_QWORD *)(a1 + 2760) = v31 + 160000;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  v34 = (char *)operator new(0x27100uLL);
  *(_QWORD *)(a1 + 2800) = v34;
  *(_QWORD *)(a1 + 2808) = v34;
  *(_QWORD *)(a1 + 2816) = v34 + 160000;
  v35 = v34 + 8;
  v36 = 5000;
  do
  {
    *(v35 - 1) = 0xBFF0000000000000;
    *v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
    v35 += 4;
    --v36;
  }
  while (v36);
  *(_QWORD *)(a1 + 2808) = v34 + 160000;
  *(_QWORD *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 2848) = xmmword_210314980;
  *(_OWORD *)(a1 + 3024) = xmmword_2103149C8;
  *(_OWORD *)(a1 + 3056) = xmmword_2103149E0;
  *(_OWORD *)(a1 + 3072) = *(_OWORD *)algn_2103149F0;
  *(_OWORD *)(a1 + 3088) = xmmword_210314A00;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2896) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_QWORD *)(a1 + 2888) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 2920) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 3040) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 3048) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3120) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 3104) = unk_210314A10;
  *(_BYTE *)(a1 + 3184) = 0;
  *(_BYTE *)(a1 + 3192) = 0;
  *(_WORD *)(a1 + 3200) = 0;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_BYTE *)(a1 + 3176) = 0;
  *(_QWORD *)(a1 + 3208) = 0x4059000000000000;
  *(_OWORD *)(a1 + 3216) = xmmword_210314990;
  *(_OWORD *)(a1 + 3232) = xmmword_2102DD520;
  *(_BYTE *)(a1 + 3248) = 0;
  *(_BYTE *)(a1 + 3608) = 0;
  *(_BYTE *)(a1 + 3616) = 0;
  *(_BYTE *)(a1 + 3976) = 0;
  *(_BYTE *)(a1 + 3984) = 0;
  *(_DWORD *)(a1 + 4016) = 0;
  *(_QWORD *)(a1 + 4008) = 0;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_QWORD *)(a1 + 4024) = 1;
  *(_OWORD *)(a1 + 4032) = xmmword_2103149A0;
  *(_QWORD *)(a1 + 4048) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a1 + 4056) = 1;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(_OWORD *)(a1 + 4112) = 0u;
  *(_OWORD *)(a1 + 4128) = 0u;
  *(_OWORD *)(a1 + 4144) = 0u;
  *(_QWORD *)(a1 + 4160) = 0xC059000000000000;
  *(_BYTE *)(a1 + 4248) = 0;
  *(_BYTE *)(a1 + 4256) = 0;
  *(_OWORD *)(a1 + 4225) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (a3)
    *(_BYTE *)(a1 + 417) = 0;
  *(_BYTE *)(a1 + 3176) = 0;
  *(_BYTE *)(a1 + 3184) = 0;
  *(_BYTE *)(a1 + 848) = *(_BYTE *)(a1 + 418);
  sub_20F3F9E98(*(unsigned __int8 *)(a2 + 440), *(_BYTE *)(a2 + 441), *(_BYTE *)(a2 + 442), a1 + 3200);
  sub_20EAE8D8C((char **)(a1 + 4064), 2uLL);
  sub_20EAE8F2C((char **)(a1 + 4112), 2uLL);
  v38 = sub_210219C18();
  v39 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v37.__d_.__rep_);
  v40 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v41 = atomic_load(&qword_254A5A450);
  v42 = v39 / 1000000.0;
  if (v41)
  {
    v51 = 134217984;
    v52[0] = v42;
    v43 = (char *)_os_log_send_and_compose_impl();
    v44 = strlen(v43);
    v50.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v50);
    tv_sec = v50.tv_sec;
    timespec_get(&v50, 1);
    sub_210219E20(&v51, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v38 + 1), (__int128 *)(v38 + 5), "3DoF Tracker construction completed in %f ms", 0x2CuLL, v43, v44, tv_sec, &v50);
    std::mutex::lock(&stru_254A5A410);
    v46 = qword_254A5A458;
    for (i = unk_254A5A460; v46 != i; v46 += 40)
    {
      v48 = *(_QWORD *)(v46 + 32);
      if (!v48)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v48 + 48))(v48, &v51);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v63 < 0)
    {
      operator delete(__p);
      if ((v61 & 0x80000000) == 0)
      {
LABEL_19:
        if (!v59)
        {
LABEL_25:
          if (v56 && v55 < 0)
            operator delete(v54);
          if (v53 < 0)
            operator delete(*(void **)((char *)v52 + 4));
          if (v43)
            free(v43);
          goto LABEL_32;
        }
LABEL_23:
        if (v58 < 0)
          operator delete(v57);
        goto LABEL_25;
      }
    }
    else if ((v61 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v60);
    if (!v59)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_32:
  if (os_signpost_enabled((os_log_t)*v38))
  {
    v51 = 134217984;
    v52[0] = v42;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return a1;
}

void sub_20EAE8C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a9);
  sub_20E96E218((uint64_t)va);
  if (v12)
  {
    free(v12);
    sub_20EAE90CC(v11);
    v14 = *(void **)(v9 + 2800);
    if (!v14)
    {
LABEL_3:
      v15 = *(void **)(v9 + 2752);
      if (!v15)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    sub_20EAE90CC(v11);
    v14 = *(void **)(v9 + 2800);
    if (!v14)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 2808) = v14;
  operator delete(v14);
  v15 = *(void **)(v9 + 2752);
  if (!v15)
  {
LABEL_4:
    v16 = *a6;
    if (!*a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_11:
  *(_QWORD *)(v9 + 2760) = v15;
  operator delete(v15);
  v16 = *a6;
  if (!*a6)
  {
LABEL_6:
    sub_20EAF59D4(a7);
    if (*(char *)(v9 + 367) < 0)
      operator delete(*v10);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(_QWORD *)(v9 + 2712) = v16;
  operator delete(v16);
  goto LABEL_6;
}

double sub_20EAE8D8C(char **a1, unint64_t a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  char *v12;
  char *v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  double result;
  char *v18;
  __int128 v19;

  if (a2 != (a1[1] - *a1) >> 5)
  {
    v2 = a2;
    if (a2)
    {
      v18 = 0;
      v19 = 0uLL;
      sub_20EAF5F94(&v18, a2);
      v4 = v18;
      v5 = a1[5];
      v6 = (unint64_t)v5 > v2;
      if ((unint64_t)v5 < v2)
        v2 = (unint64_t)a1[5];
      if (v6)
      {
        v7 = 1;
        v8 = v18;
        do
        {
          do
          {
            v9 = v7;
            v10 = (unint64_t)&(*a1)[32 * ((unint64_t)&a1[3][v7 - 1] % ((a1[1] - *a1) >> 5))];
            *(_QWORD *)v8 = *(_QWORD *)v10;
            v11 = *(_OWORD *)(v10 + 8);
            *((_QWORD *)v8 + 3) = *(_QWORD *)(v10 + 24);
            *(_OWORD *)(v8 + 8) = v11;
            v7 = v9 + 1;
            v8 += 32;
          }
          while (v2 != v9);
        }
        while ((char *)v9 == a1[5]);
      }
      else if (v5)
      {
        v12 = 0;
        v13 = v18;
        do
        {
          v14 = (unint64_t)&(*a1)[32 * ((unint64_t)&a1[3][(_QWORD)v12] % ((a1[1] - *a1) >> 5))];
          *(_QWORD *)v13 = *(_QWORD *)v14;
          v15 = *(_OWORD *)(v14 + 8);
          *((_QWORD *)v13 + 3) = *(_QWORD *)(v14 + 24);
          *(_OWORD *)(v13 + 8) = v15;
          ++v12;
          v13 += 32;
        }
        while (v12 != a1[5]);
      }
      v16 = *a1;
      if (*a1)
      {
        a1[1] = v16;
        operator delete(v16);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        v4 = v18;
      }
      *a1 = v4;
      result = *(double *)&v19;
      *(_OWORD *)(a1 + 1) = v19;
      a1[3] = 0;
      a1[4] = (char *)(v2 % ((uint64_t)(*(_QWORD *)&result - (_QWORD)v4) >> 5));
      a1[5] = (char *)v2;
    }
    else
    {
      a1[1] = *a1;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
  return result;
}

void sub_20EAE8F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20EAE8F2C(char **a1, unint64_t a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  char *v12;
  char *v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  double result;
  char *v18;
  __int128 v19;

  if (a2 != (a1[1] - *a1) >> 5)
  {
    v2 = a2;
    if (a2)
    {
      v18 = 0;
      v19 = 0uLL;
      sub_20EAF5F94(&v18, a2);
      v4 = v18;
      v5 = a1[5];
      v6 = (unint64_t)v5 > v2;
      if ((unint64_t)v5 < v2)
        v2 = (unint64_t)a1[5];
      if (v6)
      {
        v7 = 1;
        v8 = v18;
        do
        {
          do
          {
            v9 = v7;
            v10 = (unint64_t)&(*a1)[32 * ((unint64_t)&a1[3][v7 - 1] % ((a1[1] - *a1) >> 5))];
            *(_QWORD *)v8 = *(_QWORD *)v10;
            v11 = *(_OWORD *)(v10 + 8);
            *((_QWORD *)v8 + 3) = *(_QWORD *)(v10 + 24);
            *(_OWORD *)(v8 + 8) = v11;
            v7 = v9 + 1;
            v8 += 32;
          }
          while (v2 != v9);
        }
        while ((char *)v9 == a1[5]);
      }
      else if (v5)
      {
        v12 = 0;
        v13 = v18;
        do
        {
          v14 = (unint64_t)&(*a1)[32 * ((unint64_t)&a1[3][(_QWORD)v12] % ((a1[1] - *a1) >> 5))];
          *(_QWORD *)v13 = *(_QWORD *)v14;
          v15 = *(_OWORD *)(v14 + 8);
          *((_QWORD *)v13 + 3) = *(_QWORD *)(v14 + 24);
          *(_OWORD *)(v13 + 8) = v15;
          ++v12;
          v13 += 32;
        }
        while (v12 != a1[5]);
      }
      v16 = *a1;
      if (*a1)
      {
        a1[1] = v16;
        operator delete(v16);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        v4 = v18;
      }
      *a1 = v4;
      result = *(double *)&v19;
      *(_OWORD *)(a1 + 1) = v19;
      a1[3] = 0;
      a1[4] = (char *)(v2 % ((uint64_t)(*(_QWORD *)&result - (_QWORD)v4) >> 5));
      a1[5] = (char *)v2;
    }
    else
    {
      a1[1] = *a1;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
  return result;
}

void sub_20EAE90B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EAE90CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 912);
  if (v2)
  {
    *(_QWORD *)(a1 + 920) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 864);
  if (v3)
  {
    *(_QWORD *)(a1 + 872) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 792);
  if (v4)
  {
    *(_QWORD *)(a1 + 800) = v4;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 776))
    sub_20EAF58EC(a1 + 416);
  if (*(_BYTE *)(a1 + 408))
    sub_20EAF58EC(a1 + 48);
  return a1;
}

void sub_20EAE913C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::steady_clock::time_point *v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::chrono::steady_clock::time_point v21;
  std::chrono::steady_clock::time_point *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned __int8 v25;
  double v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unsigned __int8 v37;
  unint64_t v38;
  __int16 *v39;
  double v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _BOOL4 v75;
  __uint64_t v76[2];
  uint64_t v77;
  __uint64_t v78[2];
  _BYTE v79[22];
  char v80;
  void *v81;
  char v82;
  char v83;
  void *v84;
  char v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 417))
    return;
  if (!*(_QWORD *)(a1 + 2744))
  {
    v7 = *(double *)a2;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(a1 + 2736);
  v5 = *(_QWORD *)(a1 + 2704);
  if (v4)
    v6 = *(_QWORD *)(a1 + 2736);
  else
    v6 = (*(_QWORD *)(a1 + 2712) - v5) >> 5;
  v7 = *(double *)a2;
  if (*(double *)(v5 + 32 * v6 - 32) + 0.1 + *(double *)(a1 + 3392) <= *(double *)a2)
  {
    if (!v4)
      v4 = (*(_QWORD *)(a1 + 2712) - v5) >> 5;
    v13 = atomic_load((unsigned __int8 *)&qword_254A5AD90);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD90))
    {
      v74 = operator new(0x28uLL);
      v74[1] = 0;
      v74[2] = 0;
      *v74 = &off_24C9C4340;
      *((_BYTE *)v74 + 24) = 0;
      *((_BYTE *)v74 + 32) = 0;
      qword_254A5AED0 = (uint64_t)(v74 + 3);
      unk_254A5AED8 = v74;
      qword_254A5AEE0 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AED0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5AD90);
    }
    v14 = (_QWORD *)qword_254A5AED0;
    v15 = *(unsigned __int8 *)(qword_254A5AED0 + 8);
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v15)
    {
      if (v16.__d_.__rep_ - *v14 < 1000000000)
      {
LABEL_89:
        sub_20EAEA1D4(a1);
        return;
      }
      v17 = (std::chrono::steady_clock::time_point *)qword_254A5AED0;
    }
    else
    {
      v17 = (std::chrono::steady_clock::time_point *)qword_254A5AED0;
      if (!*(_BYTE *)(qword_254A5AED0 + 8))
        *(_BYTE *)(qword_254A5AED0 + 8) = 1;
    }
    v35 = (uint64_t *)(v5 + 32 * v4 - 32);
    v17->__d_.__rep_ = v16.__d_.__rep_;
    v36 = sub_210219C18();
    v37 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v38 = atomic_load(&qword_254A5A450);
    v39 = &word_210313000;
    if (!v38)
    {
LABEL_87:
      if (os_signpost_enabled((os_log_t)*v36))
      {
        v62 = *(double *)a2;
        v63 = *v35;
        *(_DWORD *)v79 = *((_QWORD *)v39 + 368);
        *(double *)&v79[4] = v62;
        *(_WORD *)&v79[12] = 2048;
        *(_QWORD *)&v79[14] = v63;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_89;
    }
    v40 = *(double *)a2;
    v41 = *v35;
    *(_DWORD *)v79 = 134218240;
    *(double *)&v79[4] = v40;
    *(_WORD *)&v79[12] = 2048;
    *(_QWORD *)&v79[14] = v41;
    v42 = (char *)_os_log_send_and_compose_impl();
    v43 = strlen(v42);
    v76[0] = 0;
    pthread_threadid_np(0, v76);
    v44 = v76[0];
    timespec_get((timespec *)v76, 1);
    sub_210219E20(v79, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v36 + 1), (__int128 *)(v36 + 5), "ThreeDOFTracker: Gyro data has a large imu gap at pushed timestamp %lf, last timestamp(after filtering) in buffer was %lf", 0x79uLL, v42, v43, v44, v76);
    std::mutex::lock(&stru_254A5A410);
    v45 = qword_254A5A458;
    for (i = unk_254A5A460; v45 != i; v45 += 40)
    {
      v47 = *(_QWORD *)(v45 + 32);
      if (!v47)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v47 + 48))(v47, v79);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v90 < 0)
    {
      operator delete(v89);
      v39 = &word_210313000;
      if ((v88 & 0x80000000) == 0)
      {
LABEL_45:
        if (!v86)
        {
LABEL_80:
          if (v83 && v82 < 0)
            operator delete(v81);
          if (v80 < 0)
            operator delete(*(void **)&v79[8]);
          if (v42)
            free(v42);
          goto LABEL_87;
        }
LABEL_78:
        if (v85 < 0)
          operator delete(v84);
        goto LABEL_80;
      }
    }
    else
    {
      v39 = &word_210313000;
      if ((v88 & 0x80000000) == 0)
        goto LABEL_45;
    }
    operator delete(v87);
    if (!v86)
      goto LABEL_80;
    goto LABEL_78;
  }
LABEL_8:
  *(_OWORD *)v76 = *(_OWORD *)(a2 + 8);
  v77 = *(_QWORD *)(a2 + 24);
  v75 = 0;
  if ((sub_20F3EB2B4((uint64_t *)(a1 + 3248), (__int128 *)v76, &v75, v7, 1.79769313e308) & 1) == 0)
  {
    v10 = *(_QWORD *)(a1 + 2736);
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 2704);
      v12 = atomic_load((unsigned __int8 *)&qword_254A5AD98);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 2704);
      v10 = (*(_QWORD *)(a1 + 2712) - v11) >> 5;
      v18 = atomic_load((unsigned __int8 *)&qword_254A5AD98);
      if ((v18 & 1) != 0)
        goto LABEL_22;
    }
    if (__cxa_guard_acquire(&qword_254A5AD98))
    {
      v73 = operator new(0x28uLL);
      v73[1] = 0;
      v73[2] = 0;
      *v73 = &off_24C9C4340;
      *((_BYTE *)v73 + 24) = 0;
      *((_BYTE *)v73 + 32) = 0;
      qword_254A5AEE8 = (uint64_t)(v73 + 3);
      unk_254A5AEF0 = v73;
      qword_254A5AEF8 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AEE8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5AD98);
    }
LABEL_22:
    v19 = (_QWORD *)qword_254A5AEE8;
    v20 = *(unsigned __int8 *)(qword_254A5AEE8 + 8);
    v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v20)
    {
      if (v21.__d_.__rep_ - *v19 < 1000000000)
      {
LABEL_75:
        *(_QWORD *)(a1 + 2736) = 0;
        *(_QWORD *)(a1 + 2728) = 0;
        *(_QWORD *)(a1 + 2744) = 0;
        return;
      }
      v22 = (std::chrono::steady_clock::time_point *)qword_254A5AEE8;
    }
    else
    {
      v22 = (std::chrono::steady_clock::time_point *)qword_254A5AEE8;
      if (!*(_BYTE *)(qword_254A5AEE8 + 8))
        *(_BYTE *)(qword_254A5AEE8 + 8) = 1;
    }
    v22->__d_.__rep_ = v21.__d_.__rep_;
    v23 = sub_210219C18();
    v24 = (uint64_t *)(v11 + 32 * v10 - 32);
    v25 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_73:
      if (os_signpost_enabled((os_log_t)*v23))
      {
        v60 = *(double *)a2;
        v61 = *v24;
        *(_DWORD *)v79 = 134218240;
        *(double *)&v79[4] = v60;
        *(_WORD *)&v79[12] = 2048;
        *(_QWORD *)&v79[14] = v61;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_75;
    }
    v27 = *(double *)a2;
    v28 = *v24;
    *(_DWORD *)v79 = 134218240;
    *(double *)&v79[4] = v27;
    *(_WORD *)&v79[12] = 2048;
    *(_QWORD *)&v79[14] = v28;
    v29 = (char *)_os_log_send_and_compose_impl();
    v30 = strlen(v29);
    v78[0] = 0;
    pthread_threadid_np(0, v78);
    v31 = v78[0];
    timespec_get((timespec *)v78, 1);
    sub_210219E20(v79, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v23 + 1), (__int128 *)(v23 + 5), "ThreeDOFTracker: PushGyroFiltering : Gyro data issue with timestamp %lf, last %lf", 0x51uLL, v29, v30, v31, v78);
    std::mutex::lock(&stru_254A5A410);
    v32 = qword_254A5A458;
    for (j = unk_254A5A460; v32 != j; v32 += 40)
    {
      v34 = *(_QWORD *)(v32 + 32);
      if (!v34)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v34 + 48))(v34, v79);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v90 < 0)
    {
      operator delete(v89);
      if ((v88 & 0x80000000) == 0)
      {
LABEL_34:
        if (!v86)
        {
LABEL_66:
          if (v83 && v82 < 0)
            operator delete(v81);
          if (v80 < 0)
            operator delete(*(void **)&v79[8]);
          if (v29)
            free(v29);
          goto LABEL_73;
        }
LABEL_64:
        if (v85 < 0)
          operator delete(v84);
        goto LABEL_66;
      }
    }
    else if ((v88 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v87);
    if (!v86)
      goto LABEL_66;
    goto LABEL_64;
  }
  *(_QWORD *)(a1 + 4096) = 0;
  *(_QWORD *)(a1 + 4088) = 0;
  *(_QWORD *)(a1 + 4104) = 0;
  *(_QWORD *)v79 = 0xBFF0000000000000;
  if (*(_QWORD *)(a1 + 2744))
  {
    v8 = *(_QWORD *)(a1 + 2736);
    v9 = *(_QWORD *)(a1 + 2704);
    if (!v8)
      v8 = (*(_QWORD *)(a1 + 2712) - v9) >> 5;
    v48 = v9 + 32 * v8;
    v49 = *(_QWORD *)(v48 - 32);
    v50 = *(_OWORD *)(v48 - 24);
    v51 = *(_QWORD *)(v48 - 8);
    v52 = *(_QWORD *)(a1 + 4064);
    *(_QWORD *)v52 = v49;
    *(_QWORD *)(v52 + 24) = v51;
    *(_OWORD *)(v52 + 8) = v50;
    v53 = (uint64_t)(*(_QWORD *)(a1 + 4072) - *(_QWORD *)(a1 + 4064)) >> 5;
    v54 = *(_QWORD *)(a1 + 4096) + 1;
    if (v54 >= v53)
      v55 = (uint64_t)(*(_QWORD *)(a1 + 4072) - *(_QWORD *)(a1 + 4064)) >> 5;
    else
      v55 = 0;
    *(_QWORD *)(a1 + 4096) = v54 - v55;
    v56 = *(_QWORD *)(a1 + 4104);
    if (v56 == v53)
    {
      v57 = *(_QWORD *)(a1 + 4088) + 1;
      if (v57 < v53)
        v53 = 0;
      *(_QWORD *)(a1 + 4088) = v57 - v53;
    }
    else
    {
      *(_QWORD *)(a1 + 4104) = v56 + 1;
    }
    *(_QWORD *)v79 = v49;
  }
  if ((!v75 || *(_DWORD *)(a1 + 3472) == 1)
    && sub_20F3EF948((uint64_t *)(a1 + 3248), (_QWORD *)(a1 + 4064), (double *)v79))
  {
    v58 = *(_QWORD *)(a1 + 4096);
    v59 = *(_QWORD *)(a1 + 4064);
    if (!v58)
      v58 = (*(_QWORD *)(a1 + 4072) - v59) >> 5;
    v64 = v59 + 32 * v58;
    v65 = *(_QWORD *)(a1 + 2704) + 32 * *(_QWORD *)(a1 + 2736);
    v66 = *(_QWORD *)(v64 - 8);
    v67 = *(_OWORD *)(v64 - 24);
    *(_QWORD *)v65 = *(_QWORD *)(v64 - 32);
    *(_OWORD *)(v65 + 8) = v67;
    *(_QWORD *)(v65 + 24) = v66;
    v68 = (uint64_t)(*(_QWORD *)(a1 + 2712) - *(_QWORD *)(a1 + 2704)) >> 5;
    v69 = *(_QWORD *)(a1 + 2736) + 1;
    if (v69 >= v68)
      v70 = (uint64_t)(*(_QWORD *)(a1 + 2712) - *(_QWORD *)(a1 + 2704)) >> 5;
    else
      v70 = 0;
    *(_QWORD *)(a1 + 2736) = v69 - v70;
    v71 = *(_QWORD *)(a1 + 2744);
    if (v71 == v68)
    {
      v72 = *(_QWORD *)(a1 + 2728) + 1;
      if (v72 < v68)
        v68 = 0;
      *(_QWORD *)(a1 + 2728) = v72 - v68;
    }
    else
    {
      *(_QWORD *)(a1 + 2744) = v71 + 1;
    }
  }
}

void sub_20EAE9AD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AD90);
  _Unwind_Resume(a1);
}

void sub_20EAE9AEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AD98);
  _Unwind_Resume(a1);
}

void sub_20EAE9B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  void **v62;

  if (a61 < 0)
  {
    operator delete(v62[15]);
    if ((a55 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a49)
        goto LABEL_9;
LABEL_7:
      if (a48 < 0)
        operator delete(v62[8]);
LABEL_9:
      if (a42 && a41 < 0)
        operator delete(v62[4]);
      if (a35 < 0)
        operator delete(__p);
      if (v61)
      {
        free(v61);
        _Unwind_Resume(exception_object);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a55 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v62[12]);
  if (!a49)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep sub_20EAE9C5C(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  int v18;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned __int8 v22;
  double v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  double v32;
  uint64_t v33;
  _QWORD *v34;
  __uint64_t v35[2];
  int v36;
  _BYTE v37[18];
  char v38;
  void *v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 417))
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 2736);
    if (*(_QWORD *)(result + 2744))
    {
      if (v4)
      {
        v5 = *(_QWORD *)(result + 2704);
        v6 = v4 - 1;
        v7 = *(double *)a2;
        if (*(double *)(v5 + 32 * (v4 - 1)) >= *(double *)a2)
          goto LABEL_17;
      }
      else
      {
        v5 = *(_QWORD *)(result + 2704);
        v6 = ((*(_QWORD *)(result + 2712) - v5) >> 5) - 1;
        v7 = *(double *)a2;
        if (*(double *)(v5 + 32 * v6) >= *(double *)a2)
        {
LABEL_17:
          v16 = atomic_load((unsigned __int8 *)&qword_254A5AD88);
          if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD88))
          {
            v34 = operator new(0x28uLL);
            v34[1] = 0;
            v34[2] = 0;
            *v34 = &off_24C9C4340;
            *((_BYTE *)v34 + 24) = 0;
            *((_BYTE *)v34 + 32) = 0;
            qword_254A5AEB8 = (uint64_t)(v34 + 3);
            unk_254A5AEC0 = v34;
            qword_254A5AEC8 = 1000000000;
            __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AEB8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A5AD88);
          }
          v17 = (_QWORD *)qword_254A5AEB8;
          v18 = *(unsigned __int8 *)(qword_254A5AEB8 + 8);
          result = std::chrono::steady_clock::now().__d_.__rep_;
          if (v18)
          {
            if (result - *v17 < 1000000000)
            {
LABEL_45:
              v3[342] = 0;
              v3[341] = 0;
              v3[343] = 0;
              return result;
            }
            v19 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AEB8;
          }
          else
          {
            v19 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AEB8;
            if (!*(_BYTE *)(qword_254A5AEB8 + 8))
              *(_BYTE *)(qword_254A5AEB8 + 8) = 1;
          }
          v20 = (uint64_t *)(v5 + 32 * v6);
          *v19 = result;
          v21 = sub_210219C18();
          v22 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_43:
            result = os_signpost_enabled((os_log_t)*v21);
            if ((_DWORD)result)
            {
              v32 = *(double *)a2;
              v33 = *v20;
              v36 = 134218240;
              *(double *)v37 = v32;
              *(_WORD *)&v37[8] = 2048;
              *(_QWORD *)&v37[10] = v33;
              result = _os_signpost_emit_unreliably_with_name_impl();
            }
            goto LABEL_45;
          }
          v24 = *(double *)a2;
          v25 = *v20;
          v36 = 134218240;
          *(double *)v37 = v24;
          *(_WORD *)&v37[8] = 2048;
          *(_QWORD *)&v37[10] = v25;
          v26 = (char *)_os_log_send_and_compose_impl();
          v27 = strlen(v26);
          v35[0] = 0;
          pthread_threadid_np(0, v35);
          v28 = v35[0];
          timespec_get((timespec *)v35, 1);
          sub_210219E20(&v36, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v21 + 1), (__int128 *)(v21 + 5), "ThreeDOFTracker: PushGyro data out of order timestamp %lf, last %lf", 0x43uLL, v26, v27, v28, v35);
          std::mutex::lock(&stru_254A5A410);
          v29 = qword_254A5A458;
          for (i = unk_254A5A460; v29 != i; v29 += 40)
          {
            v31 = *(_QWORD *)(v29 + 32);
            if (!v31)
              sub_20E86D37C();
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v31 + 48))(v31, &v36);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v48 < 0)
          {
            operator delete(__p);
            if ((v46 & 0x80000000) == 0)
            {
LABEL_30:
              if (!v44)
              {
LABEL_36:
                if (v41 && v40 < 0)
                  operator delete(v39);
                if (v38 < 0)
                  operator delete(*(void **)&v37[4]);
                if (v26)
                  free(v26);
                goto LABEL_43;
              }
LABEL_34:
              if (v43 < 0)
                operator delete(v42);
              goto LABEL_36;
            }
          }
          else if ((v46 & 0x80000000) == 0)
          {
            goto LABEL_30;
          }
          operator delete(v45);
          if (!v44)
            goto LABEL_36;
          goto LABEL_34;
        }
        v4 = 0;
      }
    }
    else
    {
      v5 = *(_QWORD *)(result + 2704);
      v7 = *(double *)a2;
    }
    v8 = v5 + 32 * v4;
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 8);
    *(double *)v8 = v7;
    *(_OWORD *)(v8 + 8) = v10;
    *(_QWORD *)(v8 + 24) = v9;
    v11 = (uint64_t)(*(_QWORD *)(result + 2712) - *(_QWORD *)(result + 2704)) >> 5;
    v12 = *(_QWORD *)(result + 2736) + 1;
    if (v12 >= v11)
      v13 = (uint64_t)(*(_QWORD *)(result + 2712) - *(_QWORD *)(result + 2704)) >> 5;
    else
      v13 = 0;
    *(_QWORD *)(result + 2736) = v12 - v13;
    v14 = *(_QWORD *)(result + 2744);
    if (v14 == v11)
    {
      v15 = *(_QWORD *)(result + 2728) + 1;
      if (v15 < v11)
        v11 = 0;
      *(_QWORD *)(result + 2728) = v15 - v11;
    }
    else
    {
      *(_QWORD *)(result + 2744) = v14 + 1;
    }
  }
  return result;
}

void sub_20EAEA108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AD88);
  _Unwind_Resume(a1);
}

void sub_20EAEA120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;

  if (a51 < 0)
  {
    operator delete(__p);
    if ((a45 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a39)
        goto LABEL_9;
LABEL_7:
      if (a38 < 0)
        operator delete(a33);
LABEL_9:
      if (a32 && a31 < 0)
        operator delete(a26);
      if (a25 < 0)
        operator delete(a20);
      if (!v51)
        _Unwind_Resume(exception_object);
      free(v51);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a45 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a40);
  if (!a39)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20EAEA1D4(uint64_t a1)
{
  float64x2_t v2;
  __int128 v3;
  double v4;
  float64x2_t v7;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;

  *(_QWORD *)(a1 + 3048) = 0xBFF0000000000000;
  v2.f64[1] = 1.0;
  *(_OWORD *)(a1 + 2848) = xmmword_210314980;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 2864) = 0;
  *(_QWORD *)(a1 + 2880) = 0;
  *(_QWORD *)(a1 + 2888) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 2896) = 0;
  *(_QWORD *)(a1 + 2912) = 0;
  *(_QWORD *)(a1 + 2904) = 0;
  *(_QWORD *)(a1 + 2920) = 0x3FF0000000000000;
  v3 = 0uLL;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  v4 = *(double *)(a1 + 3144);
  _Q1 = *(float64x2_t *)(a1 + 3128);
  _D4 = *(_QWORD *)(a1 + 2896);
  v7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 2856), _Q1.f64[0]), *(float64x2_t *)(a1 + 2880), _Q1, 1), *(float64x2_t *)(a1 + 2904), v4);
  __asm { FMLA            D2, D4, V1.D[1] }
  v2.f64[0] = _D2 + *(double *)(a1 + 2920) * v4;
  *(float64x2_t *)(a1 + 3152) = vaddq_f64(v7, (float64x2_t)0);
  *(_QWORD *)(a1 + 3168) = *(_OWORD *)&vaddq_f64(v2, (float64x2_t)0);
  *(_QWORD *)(a1 + 2784) = 0;
  *(_QWORD *)(a1 + 2776) = 0;
  *(_QWORD *)(a1 + 2792) = 0;
  *(_QWORD *)(a1 + 2736) = 0;
  *(_QWORD *)(a1 + 2728) = 0;
  *(_QWORD *)(a1 + 2744) = 0;
  *(_QWORD *)(a1 + 2832) = 0;
  *(_QWORD *)(a1 + 2824) = 0;
  *(_QWORD *)(a1 + 2840) = 0;
  v13 = *(_QWORD *)(a1 + 2616);
  if (v13)
  {
    v14 = *(void **)(v13 + 80);
    v15 = *(_QWORD *)(v13 + 88) - (_QWORD)v14;
    if (v15 >= 1)
    {
      bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
      v3 = 0uLL;
    }
    if (*(_BYTE *)(v13 + 112))
      *(_BYTE *)(v13 + 112) = 0;
  }
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 520) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 576) = 1;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_BYTE *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2184) = 0;
  *(_QWORD *)(a1 + 2584) = 0;
  *(_OWORD *)(a1 + 2248) = v3;
  *(_OWORD *)(a1 + 2264) = v3;
  *(_OWORD *)(a1 + 2280) = v3;
  *(_OWORD *)(a1 + 2296) = v3;
  *(_OWORD *)(a1 + 2312) = v3;
  *(_OWORD *)(a1 + 2328) = v3;
  *(_OWORD *)(a1 + 2344) = v3;
  *(_OWORD *)(a1 + 2360) = v3;
  *(_OWORD *)(a1 + 2376) = v3;
  *(_OWORD *)(a1 + 2392) = v3;
  *(_OWORD *)(a1 + 2408) = v3;
  *(_OWORD *)(a1 + 2424) = v3;
  *(_OWORD *)(a1 + 2440) = v3;
  *(_OWORD *)(a1 + 2456) = v3;
  *(_OWORD *)(a1 + 2472) = v3;
  *(_OWORD *)(a1 + 2488) = v3;
  *(_OWORD *)(a1 + 2504) = v3;
  *(_OWORD *)(a1 + 2520) = v3;
  *(_OWORD *)(a1 + 2536) = v3;
  *(_OWORD *)(a1 + 2552) = v3;
  *(_OWORD *)(a1 + 2568) = v3;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 992) = v3;
  *(_OWORD *)(a1 + 1008) = v3;
  *(_OWORD *)(a1 + 1024) = v3;
  *(_OWORD *)(a1 + 1040) = v3;
  *(_OWORD *)(a1 + 1056) = v3;
  *(_WORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1488) = 0;
  *(_QWORD *)(a1 + 1984) = *(_QWORD *)(a1 + 1976);
  if (sub_20EAF5B90())
  {
    v16 = sub_210219C18();
    sub_20EAF5CE0((uint64_t)&v17, (uint64_t)v16, 0xEEEEB0B5B2B2EEEELL);
  }
  *(_BYTE *)(a1 + 3176) = 0;
  *(_BYTE *)(a1 + 3184) = 0;
  sub_20F402C8C(a1 + 3296);
  *(_QWORD *)(a1 + 3488) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3480) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3272) = 0;
  *(_QWORD *)(a1 + 3288) = 0;
  *(_QWORD *)(a1 + 3512) = *(_QWORD *)(a1 + 3504);
  *(_QWORD *)(a1 + 3536) = *(_QWORD *)(a1 + 3528);
  *(_QWORD *)(a1 + 3560) = *(_QWORD *)(a1 + 3552);
  *(_QWORD *)(a1 + 3584) = *(_QWORD *)(a1 + 3576);
  *(_QWORD *)(a1 + 3280) = 0;
  sub_20F402C8C(a1 + 3664);
  *(_QWORD *)(a1 + 3856) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3848) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3640) = 0;
  *(_QWORD *)(a1 + 3656) = 0;
  *(_QWORD *)(a1 + 3648) = 0;
  *(_QWORD *)(a1 + 3880) = *(_QWORD *)(a1 + 3872);
  *(_QWORD *)(a1 + 3904) = *(_QWORD *)(a1 + 3896);
  *(_QWORD *)(a1 + 3928) = *(_QWORD *)(a1 + 3920);
  *(_QWORD *)(a1 + 3952) = *(_QWORD *)(a1 + 3944);
}

void sub_20EAEA444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::steady_clock::time_point *v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::chrono::steady_clock::time_point v21;
  std::chrono::steady_clock::time_point *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned __int8 v25;
  double v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unsigned __int8 v37;
  unint64_t v38;
  __int16 *v39;
  double v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _BOOL4 v75;
  __uint64_t v76[2];
  uint64_t v77;
  __uint64_t v78[2];
  _BYTE v79[22];
  char v80;
  void *v81;
  char v82;
  char v83;
  void *v84;
  char v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 417))
    return;
  if (!*(_QWORD *)(a1 + 2792))
  {
    v7 = *(double *)a2;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(a1 + 2784);
  v5 = *(_QWORD *)(a1 + 2752);
  if (v4)
    v6 = *(_QWORD *)(a1 + 2784);
  else
    v6 = (*(_QWORD *)(a1 + 2760) - v5) >> 5;
  v7 = *(double *)a2;
  if (*(double *)(v5 + 32 * v6 - 32) + 0.1 + *(double *)(a1 + 3760) <= *(double *)a2)
  {
    if (!v4)
      v4 = (*(_QWORD *)(a1 + 2760) - v5) >> 5;
    v13 = atomic_load((unsigned __int8 *)&qword_254A5ADA8);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADA8))
    {
      v74 = operator new(0x28uLL);
      v74[1] = 0;
      v74[2] = 0;
      *v74 = &off_24C9C4340;
      *((_BYTE *)v74 + 24) = 0;
      *((_BYTE *)v74 + 32) = 0;
      qword_254A5AF18 = (uint64_t)(v74 + 3);
      unk_254A5AF20 = v74;
      qword_254A5AF28 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AF18, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5ADA8);
    }
    v14 = (_QWORD *)qword_254A5AF18;
    v15 = *(unsigned __int8 *)(qword_254A5AF18 + 8);
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v15)
    {
      if (v16.__d_.__rep_ - *v14 < 1000000000)
      {
LABEL_89:
        sub_20EAEA1D4(a1);
        return;
      }
      v17 = (std::chrono::steady_clock::time_point *)qword_254A5AF18;
    }
    else
    {
      v17 = (std::chrono::steady_clock::time_point *)qword_254A5AF18;
      if (!*(_BYTE *)(qword_254A5AF18 + 8))
        *(_BYTE *)(qword_254A5AF18 + 8) = 1;
    }
    v35 = (uint64_t *)(v5 + 32 * v4 - 32);
    v17->__d_.__rep_ = v16.__d_.__rep_;
    v36 = sub_210219C18();
    v37 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v38 = atomic_load(&qword_254A5A450);
    v39 = &word_210313000;
    if (!v38)
    {
LABEL_87:
      if (os_signpost_enabled((os_log_t)*v36))
      {
        v62 = *(double *)a2;
        v63 = *v35;
        *(_DWORD *)v79 = *((_QWORD *)v39 + 368);
        *(double *)&v79[4] = v62;
        *(_WORD *)&v79[12] = 2048;
        *(_QWORD *)&v79[14] = v63;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_89;
    }
    v40 = *(double *)a2;
    v41 = *v35;
    *(_DWORD *)v79 = 134218240;
    *(double *)&v79[4] = v40;
    *(_WORD *)&v79[12] = 2048;
    *(_QWORD *)&v79[14] = v41;
    v42 = (char *)_os_log_send_and_compose_impl();
    v43 = strlen(v42);
    v76[0] = 0;
    pthread_threadid_np(0, v76);
    v44 = v76[0];
    timespec_get((timespec *)v76, 1);
    sub_210219E20(v79, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v36 + 1), (__int128 *)(v36 + 5), "ThreeDOFTracker: Accel data has a large imu gap at pushed timestamp %lf, last timestamp(after filtering) in buffer was %lf", 0x7AuLL, v42, v43, v44, v76);
    std::mutex::lock(&stru_254A5A410);
    v45 = qword_254A5A458;
    for (i = unk_254A5A460; v45 != i; v45 += 40)
    {
      v47 = *(_QWORD *)(v45 + 32);
      if (!v47)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v47 + 48))(v47, v79);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v90 < 0)
    {
      operator delete(v89);
      v39 = &word_210313000;
      if ((v88 & 0x80000000) == 0)
      {
LABEL_45:
        if (!v86)
        {
LABEL_80:
          if (v83 && v82 < 0)
            operator delete(v81);
          if (v80 < 0)
            operator delete(*(void **)&v79[8]);
          if (v42)
            free(v42);
          goto LABEL_87;
        }
LABEL_78:
        if (v85 < 0)
          operator delete(v84);
        goto LABEL_80;
      }
    }
    else
    {
      v39 = &word_210313000;
      if ((v88 & 0x80000000) == 0)
        goto LABEL_45;
    }
    operator delete(v87);
    if (!v86)
      goto LABEL_80;
    goto LABEL_78;
  }
LABEL_8:
  *(_OWORD *)v76 = *(_OWORD *)(a2 + 8);
  v77 = *(_QWORD *)(a2 + 24);
  v75 = 0;
  if ((sub_20F3F11C4((uint64_t *)(a1 + 3616), (__int128 *)v76, &v75, v7, 1.79769313e308) & 1) == 0)
  {
    v10 = *(_QWORD *)(a1 + 2784);
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 2752);
      v12 = atomic_load((unsigned __int8 *)&qword_254A5ADB0);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 2752);
      v10 = (*(_QWORD *)(a1 + 2760) - v11) >> 5;
      v18 = atomic_load((unsigned __int8 *)&qword_254A5ADB0);
      if ((v18 & 1) != 0)
        goto LABEL_22;
    }
    if (__cxa_guard_acquire(&qword_254A5ADB0))
    {
      v73 = operator new(0x28uLL);
      v73[1] = 0;
      v73[2] = 0;
      *v73 = &off_24C9C4340;
      *((_BYTE *)v73 + 24) = 0;
      *((_BYTE *)v73 + 32) = 0;
      qword_254A5AF30 = (uint64_t)(v73 + 3);
      unk_254A5AF38 = v73;
      qword_254A5AF40 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AF30, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5ADB0);
    }
LABEL_22:
    v19 = (_QWORD *)qword_254A5AF30;
    v20 = *(unsigned __int8 *)(qword_254A5AF30 + 8);
    v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v20)
    {
      if (v21.__d_.__rep_ - *v19 < 1000000000)
      {
LABEL_75:
        *(_QWORD *)(a1 + 2784) = 0;
        *(_QWORD *)(a1 + 2776) = 0;
        *(_QWORD *)(a1 + 2792) = 0;
        return;
      }
      v22 = (std::chrono::steady_clock::time_point *)qword_254A5AF30;
    }
    else
    {
      v22 = (std::chrono::steady_clock::time_point *)qword_254A5AF30;
      if (!*(_BYTE *)(qword_254A5AF30 + 8))
        *(_BYTE *)(qword_254A5AF30 + 8) = 1;
    }
    v22->__d_.__rep_ = v21.__d_.__rep_;
    v23 = sub_210219C18();
    v24 = (uint64_t *)(v11 + 32 * v10 - 32);
    v25 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_73:
      if (os_signpost_enabled((os_log_t)*v23))
      {
        v60 = *(double *)a2;
        v61 = *v24;
        *(_DWORD *)v79 = 134218240;
        *(double *)&v79[4] = v60;
        *(_WORD *)&v79[12] = 2048;
        *(_QWORD *)&v79[14] = v61;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_75;
    }
    v27 = *(double *)a2;
    v28 = *v24;
    *(_DWORD *)v79 = 134218240;
    *(double *)&v79[4] = v27;
    *(_WORD *)&v79[12] = 2048;
    *(_QWORD *)&v79[14] = v28;
    v29 = (char *)_os_log_send_and_compose_impl();
    v30 = strlen(v29);
    v78[0] = 0;
    pthread_threadid_np(0, v78);
    v31 = v78[0];
    timespec_get((timespec *)v78, 1);
    sub_210219E20(v79, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v23 + 1), (__int128 *)(v23 + 5), "ThreeDOFTracker: PushAccelFiltering : Accel data issue with timestamp %lf, last %lf", 0x53uLL, v29, v30, v31, v78);
    std::mutex::lock(&stru_254A5A410);
    v32 = qword_254A5A458;
    for (j = unk_254A5A460; v32 != j; v32 += 40)
    {
      v34 = *(_QWORD *)(v32 + 32);
      if (!v34)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v34 + 48))(v34, v79);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v90 < 0)
    {
      operator delete(v89);
      if ((v88 & 0x80000000) == 0)
      {
LABEL_34:
        if (!v86)
        {
LABEL_66:
          if (v83 && v82 < 0)
            operator delete(v81);
          if (v80 < 0)
            operator delete(*(void **)&v79[8]);
          if (v29)
            free(v29);
          goto LABEL_73;
        }
LABEL_64:
        if (v85 < 0)
          operator delete(v84);
        goto LABEL_66;
      }
    }
    else if ((v88 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v87);
    if (!v86)
      goto LABEL_66;
    goto LABEL_64;
  }
  *(_QWORD *)(a1 + 4144) = 0;
  *(_QWORD *)(a1 + 4136) = 0;
  *(_QWORD *)(a1 + 4152) = 0;
  *(_QWORD *)v79 = 0xBFF0000000000000;
  if (*(_QWORD *)(a1 + 2792))
  {
    v8 = *(_QWORD *)(a1 + 2784);
    v9 = *(_QWORD *)(a1 + 2752);
    if (!v8)
      v8 = (*(_QWORD *)(a1 + 2760) - v9) >> 5;
    v48 = v9 + 32 * v8;
    v49 = *(_QWORD *)(v48 - 32);
    v50 = *(_OWORD *)(v48 - 24);
    v51 = *(_QWORD *)(v48 - 8);
    v52 = *(_QWORD *)(a1 + 4112);
    *(_QWORD *)v52 = v49;
    *(_QWORD *)(v52 + 24) = v51;
    *(_OWORD *)(v52 + 8) = v50;
    v53 = (uint64_t)(*(_QWORD *)(a1 + 4120) - *(_QWORD *)(a1 + 4112)) >> 5;
    v54 = *(_QWORD *)(a1 + 4144) + 1;
    if (v54 >= v53)
      v55 = (uint64_t)(*(_QWORD *)(a1 + 4120) - *(_QWORD *)(a1 + 4112)) >> 5;
    else
      v55 = 0;
    *(_QWORD *)(a1 + 4144) = v54 - v55;
    v56 = *(_QWORD *)(a1 + 4152);
    if (v56 == v53)
    {
      v57 = *(_QWORD *)(a1 + 4136) + 1;
      if (v57 < v53)
        v53 = 0;
      *(_QWORD *)(a1 + 4136) = v57 - v53;
    }
    else
    {
      *(_QWORD *)(a1 + 4152) = v56 + 1;
    }
    *(_QWORD *)v79 = v49;
  }
  if ((!v75 || *(_DWORD *)(a1 + 3840) == 1)
    && sub_20F3F5858((uint64_t *)(a1 + 3616), (_QWORD *)(a1 + 4112), (double *)v79))
  {
    v58 = *(_QWORD *)(a1 + 4144);
    v59 = *(_QWORD *)(a1 + 4112);
    if (!v58)
      v58 = (*(_QWORD *)(a1 + 4120) - v59) >> 5;
    v64 = v59 + 32 * v58;
    v65 = *(_QWORD *)(a1 + 2752) + 32 * *(_QWORD *)(a1 + 2784);
    v66 = *(_QWORD *)(v64 - 8);
    v67 = *(_OWORD *)(v64 - 24);
    *(_QWORD *)v65 = *(_QWORD *)(v64 - 32);
    *(_OWORD *)(v65 + 8) = v67;
    *(_QWORD *)(v65 + 24) = v66;
    v68 = (uint64_t)(*(_QWORD *)(a1 + 2760) - *(_QWORD *)(a1 + 2752)) >> 5;
    v69 = *(_QWORD *)(a1 + 2784) + 1;
    if (v69 >= v68)
      v70 = (uint64_t)(*(_QWORD *)(a1 + 2760) - *(_QWORD *)(a1 + 2752)) >> 5;
    else
      v70 = 0;
    *(_QWORD *)(a1 + 2784) = v69 - v70;
    v71 = *(_QWORD *)(a1 + 2792);
    if (v71 == v68)
    {
      v72 = *(_QWORD *)(a1 + 2776) + 1;
      if (v72 < v68)
        v68 = 0;
      *(_QWORD *)(a1 + 2776) = v72 - v68;
    }
    else
    {
      *(_QWORD *)(a1 + 2792) = v71 + 1;
    }
  }
}

void sub_20EAEADE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADA8);
  _Unwind_Resume(a1);
}

void sub_20EAEADFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADB0);
  _Unwind_Resume(a1);
}

void sub_20EAEAE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  void **v62;

  if (a61 < 0)
  {
    operator delete(v62[15]);
    if ((a55 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a49)
        goto LABEL_9;
LABEL_7:
      if (a48 < 0)
        operator delete(v62[8]);
LABEL_9:
      if (a42 && a41 < 0)
        operator delete(v62[4]);
      if (a35 < 0)
        operator delete(__p);
      if (v61)
      {
        free(v61);
        _Unwind_Resume(exception_object);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a55 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v62[12]);
  if (!a49)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep sub_20EAEAF6C(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  int v18;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned __int8 v22;
  double v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  double v32;
  uint64_t v33;
  _QWORD *v34;
  __uint64_t v35[2];
  int v36;
  _BYTE v37[18];
  char v38;
  void *v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 417))
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 2784);
    if (*(_QWORD *)(result + 2792))
    {
      if (v4)
      {
        v5 = *(_QWORD *)(result + 2752);
        v6 = v4 - 1;
        v7 = *(double *)a2;
        if (*(double *)(v5 + 32 * (v4 - 1)) >= *(double *)a2)
          goto LABEL_17;
      }
      else
      {
        v5 = *(_QWORD *)(result + 2752);
        v6 = ((*(_QWORD *)(result + 2760) - v5) >> 5) - 1;
        v7 = *(double *)a2;
        if (*(double *)(v5 + 32 * v6) >= *(double *)a2)
        {
LABEL_17:
          v16 = atomic_load((unsigned __int8 *)&qword_254A5ADA0);
          if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADA0))
          {
            v34 = operator new(0x28uLL);
            v34[1] = 0;
            v34[2] = 0;
            *v34 = &off_24C9C4340;
            *((_BYTE *)v34 + 24) = 0;
            *((_BYTE *)v34 + 32) = 0;
            qword_254A5AF00 = (uint64_t)(v34 + 3);
            unk_254A5AF08 = v34;
            qword_254A5AF10 = 1000000000;
            __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AF00, &dword_20E81F000);
            __cxa_guard_release(&qword_254A5ADA0);
          }
          v17 = (_QWORD *)qword_254A5AF00;
          v18 = *(unsigned __int8 *)(qword_254A5AF00 + 8);
          result = std::chrono::steady_clock::now().__d_.__rep_;
          if (v18)
          {
            if (result - *v17 < 1000000000)
            {
LABEL_45:
              v3[348] = 0;
              v3[347] = 0;
              v3[349] = 0;
              return result;
            }
            v19 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AF00;
          }
          else
          {
            v19 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AF00;
            if (!*(_BYTE *)(qword_254A5AF00 + 8))
              *(_BYTE *)(qword_254A5AF00 + 8) = 1;
          }
          v20 = (uint64_t *)(v5 + 32 * v6);
          *v19 = result;
          v21 = sub_210219C18();
          v22 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_43:
            result = os_signpost_enabled((os_log_t)*v21);
            if ((_DWORD)result)
            {
              v32 = *(double *)a2;
              v33 = *v20;
              v36 = 134218240;
              *(double *)v37 = v32;
              *(_WORD *)&v37[8] = 2048;
              *(_QWORD *)&v37[10] = v33;
              result = _os_signpost_emit_unreliably_with_name_impl();
            }
            goto LABEL_45;
          }
          v24 = *(double *)a2;
          v25 = *v20;
          v36 = 134218240;
          *(double *)v37 = v24;
          *(_WORD *)&v37[8] = 2048;
          *(_QWORD *)&v37[10] = v25;
          v26 = (char *)_os_log_send_and_compose_impl();
          v27 = strlen(v26);
          v35[0] = 0;
          pthread_threadid_np(0, v35);
          v28 = v35[0];
          timespec_get((timespec *)v35, 1);
          sub_210219E20(&v36, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v21 + 1), (__int128 *)(v21 + 5), "ThreeDOFTracker: PushAccel data out of order timestamp %lf, last %lf", 0x44uLL, v26, v27, v28, v35);
          std::mutex::lock(&stru_254A5A410);
          v29 = qword_254A5A458;
          for (i = unk_254A5A460; v29 != i; v29 += 40)
          {
            v31 = *(_QWORD *)(v29 + 32);
            if (!v31)
              sub_20E86D37C();
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v31 + 48))(v31, &v36);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v48 < 0)
          {
            operator delete(__p);
            if ((v46 & 0x80000000) == 0)
            {
LABEL_30:
              if (!v44)
              {
LABEL_36:
                if (v41 && v40 < 0)
                  operator delete(v39);
                if (v38 < 0)
                  operator delete(*(void **)&v37[4]);
                if (v26)
                  free(v26);
                goto LABEL_43;
              }
LABEL_34:
              if (v43 < 0)
                operator delete(v42);
              goto LABEL_36;
            }
          }
          else if ((v46 & 0x80000000) == 0)
          {
            goto LABEL_30;
          }
          operator delete(v45);
          if (!v44)
            goto LABEL_36;
          goto LABEL_34;
        }
        v4 = 0;
      }
    }
    else
    {
      v5 = *(_QWORD *)(result + 2752);
      v7 = *(double *)a2;
    }
    v8 = v5 + 32 * v4;
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 8);
    *(double *)v8 = v7;
    *(_OWORD *)(v8 + 8) = v10;
    *(_QWORD *)(v8 + 24) = v9;
    v11 = (uint64_t)(*(_QWORD *)(result + 2760) - *(_QWORD *)(result + 2752)) >> 5;
    v12 = *(_QWORD *)(result + 2784) + 1;
    if (v12 >= v11)
      v13 = (uint64_t)(*(_QWORD *)(result + 2760) - *(_QWORD *)(result + 2752)) >> 5;
    else
      v13 = 0;
    *(_QWORD *)(result + 2784) = v12 - v13;
    v14 = *(_QWORD *)(result + 2792);
    if (v14 == v11)
    {
      v15 = *(_QWORD *)(result + 2776) + 1;
      if (v15 < v11)
        v11 = 0;
      *(_QWORD *)(result + 2776) = v15 - v11;
    }
    else
    {
      *(_QWORD *)(result + 2792) = v14 + 1;
    }
  }
  return result;
}

void sub_20EAEB418(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADA0);
  _Unwind_Resume(a1);
}

void sub_20EAEB430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;

  if (a51 < 0)
  {
    operator delete(__p);
    if ((a45 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a39)
        goto LABEL_9;
LABEL_7:
      if (a38 < 0)
        operator delete(a33);
LABEL_9:
      if (a32 && a31 < 0)
        operator delete(a26);
      if (a25 < 0)
        operator delete(a20);
      if (!v51)
        _Unwind_Resume(exception_object);
      free(v51);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a45 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a40);
  if (!a39)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep sub_20EAEB4E4(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result, float32x2_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  _QWORD *v16;
  int v17;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  float32x2_t v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  float32x2_t v31;
  uint64_t v32;
  _QWORD *v33;
  __uint64_t v34[2];
  int v35;
  _BYTE v36[18];
  char v37;
  void *v38;
  char v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  void *v44;
  char v45;
  void *__p;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 417))
  {
    v3 = (_QWORD *)result;
    if (*(_QWORD *)(result + 2840))
    {
      v4 = *(_QWORD *)(result + 2832);
      if (v4)
      {
        v5 = *(_QWORD *)(result + 2800);
        v6 = v4 - 1;
        v7 = *(double *)a2;
        if (*(double *)(v5 + 32 * (v4 - 1)) >= *(double *)a2)
          goto LABEL_17;
      }
      else
      {
        v5 = *(_QWORD *)(result + 2800);
        v6 = ((*(_QWORD *)(result + 2808) - v5) >> 5) - 1;
        v7 = *(double *)a2;
        if (*(double *)(v5 + 32 * v6) >= *(double *)a2)
        {
LABEL_17:
          v15 = atomic_load((unsigned __int8 *)&qword_254A5ADB8);
          if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADB8))
          {
            v33 = operator new(0x28uLL);
            v33[1] = 0;
            v33[2] = 0;
            *v33 = &off_24C9C4340;
            *((_BYTE *)v33 + 24) = 0;
            *((_BYTE *)v33 + 32) = 0;
            qword_254A5AF48 = (uint64_t)(v33 + 3);
            unk_254A5AF50 = v33;
            qword_254A5AF58 = 1000000000;
            __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AF48, &dword_20E81F000);
            __cxa_guard_release(&qword_254A5ADB8);
          }
          v16 = (_QWORD *)qword_254A5AF48;
          v17 = *(unsigned __int8 *)(qword_254A5AF48 + 8);
          result = std::chrono::steady_clock::now().__d_.__rep_;
          if (v17)
          {
            if (result - *v16 < 1000000000)
            {
LABEL_45:
              v3[354] = 0;
              v3[353] = 0;
              v3[355] = 0;
              return result;
            }
            v18 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AF48;
          }
          else
          {
            v18 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AF48;
            if (!*(_BYTE *)(qword_254A5AF48 + 8))
              *(_BYTE *)(qword_254A5AF48 + 8) = 1;
          }
          v19 = (uint64_t *)(v5 + 32 * v6);
          *v18 = result;
          v20 = sub_210219C18();
          v21 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_43:
            result = os_signpost_enabled((os_log_t)*v20);
            if ((_DWORD)result)
            {
              v31 = *a2;
              v32 = *v19;
              v35 = 134218240;
              *(float32x2_t *)v36 = v31;
              *(_WORD *)&v36[8] = 2048;
              *(_QWORD *)&v36[10] = v32;
              result = _os_signpost_emit_unreliably_with_name_impl();
            }
            goto LABEL_45;
          }
          v23 = *a2;
          v24 = *v19;
          v35 = 134218240;
          *(float32x2_t *)v36 = v23;
          *(_WORD *)&v36[8] = 2048;
          *(_QWORD *)&v36[10] = v24;
          v25 = (char *)_os_log_send_and_compose_impl();
          v26 = strlen(v25);
          v34[0] = 0;
          pthread_threadid_np(0, v34);
          v27 = v34[0];
          timespec_get((timespec *)v34, 1);
          sub_210219E20(&v35, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v20 + 1), (__int128 *)(v20 + 5), "ThreeDOFTracker: PushCompass data out of order timestamp %lf, last %lf", 0x46uLL, v25, v26, v27, v34);
          std::mutex::lock(&stru_254A5A410);
          v28 = qword_254A5A458;
          for (i = unk_254A5A460; v28 != i; v28 += 40)
          {
            v30 = *(_QWORD *)(v28 + 32);
            if (!v30)
              sub_20E86D37C();
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v30 + 48))(v30, &v35);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v47 < 0)
          {
            operator delete(__p);
            if ((v45 & 0x80000000) == 0)
            {
LABEL_30:
              if (!v43)
              {
LABEL_36:
                if (v40 && v39 < 0)
                  operator delete(v38);
                if (v37 < 0)
                  operator delete(*(void **)&v36[4]);
                if (v25)
                  free(v25);
                goto LABEL_43;
              }
LABEL_34:
              if (v42 < 0)
                operator delete(v41);
              goto LABEL_36;
            }
          }
          else if ((v45 & 0x80000000) == 0)
          {
            goto LABEL_30;
          }
          operator delete(v44);
          if (!v43)
            goto LABEL_36;
          goto LABEL_34;
        }
        v4 = 0;
      }
    }
    else
    {
      v7 = *(double *)a2;
      v4 = *(_QWORD *)(result + 2832);
      v5 = *(_QWORD *)(result + 2800);
    }
    v8 = a2[2].f32[0];
    v9 = v5 + 32 * v4;
    *(double *)v9 = v7;
    *(float64x2_t *)(v9 + 8) = vcvtq_f64_f32(a2[1]);
    *(double *)(v9 + 24) = v8;
    v10 = (uint64_t)(*(_QWORD *)(result + 2808) - *(_QWORD *)(result + 2800)) >> 5;
    v11 = *(_QWORD *)(result + 2832) + 1;
    if (v11 >= v10)
      v12 = (uint64_t)(*(_QWORD *)(result + 2808) - *(_QWORD *)(result + 2800)) >> 5;
    else
      v12 = 0;
    *(_QWORD *)(result + 2832) = v11 - v12;
    v13 = *(_QWORD *)(result + 2840);
    if (v13 == v10)
    {
      v14 = *(_QWORD *)(result + 2824) + 1;
      if (v14 < v10)
        v10 = 0;
      *(_QWORD *)(result + 2824) = v14 - v10;
    }
    else
    {
      *(_QWORD *)(result + 2840) = v13 + 1;
    }
  }
  return result;
}

void sub_20EAEB99C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ADB8);
  _Unwind_Resume(a1);
}

void sub_20EAEB9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep sub_20EAEBA68@<X0>(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result@<X0>, float64x2_t ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  float64x2_t **v6;
  float64x2_t *v7;
  double v8;
  long double v9;
  double v10;
  long double v11;
  long double v12;
  int v13;
  unsigned __int8 v14;
  _QWORD *v15;
  int v16;
  std::chrono::steady_clock::time_point v17;
  float64x2_t v18;
  std::chrono::steady_clock::time_point v19;
  float64x2_t v20;
  std::chrono::steady_clock::time_point *v21;
  float64x2_t **v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v27;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v28;
  unsigned __int8 v29;
  _QWORD *v30;
  int v31;
  std::chrono::steady_clock::time_point v32;
  std::chrono::steady_clock::time_point *v33;
  uint64_t *v34;
  unsigned __int8 v35;
  float64_t v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t *v45;
  unsigned __int8 v46;
  char *v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t m;
  uint64_t v53;
  unsigned __int8 v54;
  _QWORD *v55;
  int v56;
  std::chrono::steady_clock::time_point v57;
  std::chrono::steady_clock::time_point *v58;
  float64_t v59;
  uint64_t v60;
  float64x2_t **v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  _BOOL4 v66;
  int v67;
  uint64_t *v68;
  unsigned __int8 v69;
  char *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t j;
  uint64_t v76;
  uint64_t *v77;
  unsigned __int8 v78;
  char *v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t k;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v89;
  char v90;
  unsigned __int8 v91;
  _QWORD *v92;
  int v93;
  std::chrono::steady_clock::time_point v94;
  std::chrono::steady_clock::time_point *v95;
  const char *v96;
  unsigned __int8 v97;
  _QWORD *v98;
  int v99;
  std::chrono::steady_clock::time_point v100;
  std::chrono::steady_clock::time_point *v101;
  double v102;
  uint64_t *v104;
  unsigned __int8 v105;
  void *v107;
  double v108;
  uint64_t *v109;
  std::mutex *v110;
  uint64_t v112;
  void *v113;
  unsigned int v114;
  int v115;
  float64x2_t *v116;
  int v117;
  uint64_t *v118;
  unsigned __int8 v119;
  char *v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t n;
  uint64_t v126;
  uint64_t *v127;
  unsigned __int8 v128;
  char *v130;
  size_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ii;
  uint64_t v135;
  double v136;
  double v137;
  uint64_t *v138;
  int v139;
  uint64_t *v140;
  unsigned __int8 v141;
  char *v143;
  size_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t jj;
  uint64_t v148;
  uint64_t *v149;
  unsigned __int8 v150;
  void *v152;
  int v153;
  uint64_t *v154;
  float64x2_t *v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t *v159;
  float64x2_t *v160;
  float64x2_t *v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  float64x2_t v173;
  double v176;
  double v177;
  float64x2_t v179;
  double v183;
  double v184;
  float64x2_t v185;
  double v186;
  float64x2_t v187;
  float64x2_t *v188;
  double v189;
  double v190;
  double v191;
  unsigned __int8 v192;
  _QWORD *v193;
  int v194;
  std::chrono::steady_clock::time_point v195;
  std::chrono::steady_clock::time_point *v196;
  int v197;
  unsigned __int8 v198;
  _QWORD *v199;
  int v200;
  std::chrono::steady_clock::time_point v201;
  std::chrono::steady_clock::time_point *v202;
  uint64_t *v203;
  unsigned __int8 v204;
  unint64_t v205;
  char *v206;
  __int16 v207;
  uint64_t v208;
  char *v209;
  size_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t nn;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  unsigned __int8 v217;
  _QWORD *v218;
  int v219;
  std::chrono::steady_clock::time_point v220;
  float64x2_t v221;
  std::chrono::steady_clock::time_point *v222;
  uint64_t *v223;
  unsigned __int8 v224;
  double v225;
  double v226;
  double v227;
  float64_t v229;
  double v230;
  float64_t v231;
  void *v232;
  uint64_t v233;
  double v234;
  double v235;
  double v236;
  int v237;
  __int16 v238;
  unsigned __int8 v239;
  _QWORD *v240;
  int v241;
  std::chrono::steady_clock::time_point v242;
  std::chrono::steady_clock::time_point *v243;
  unsigned __int8 v244;
  _QWORD *v245;
  int v246;
  std::chrono::steady_clock::time_point v247;
  std::chrono::steady_clock::time_point *v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t *v255;
  unsigned __int8 v256;
  char *v258;
  size_t v259;
  __darwin_time_t tv_sec;
  uint64_t v261;
  uint64_t kk;
  uint64_t v263;
  uint64_t *v264;
  unsigned __int8 v265;
  char *v267;
  size_t v268;
  __darwin_time_t v269;
  uint64_t v270;
  uint64_t mm;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t *v276;
  float64x2_t *v277;
  __int16 v278;
  float64x2_t *v279;
  float64_t v280;
  float64x2_t *v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t *v290;
  float64_t v291;
  float64x2_t v292;
  float64x2_t *v293;
  float64x2_t v296;
  double v297;
  double v298;
  double v299;
  unsigned __int8 v300;
  _QWORD *v301;
  int v302;
  std::chrono::steady_clock::time_point v303;
  std::chrono::steady_clock::time_point *v304;
  uint64_t *v305;
  unsigned __int8 v306;
  __int16 v308;
  float64_t v309;
  double v310;
  float64_t v311;
  char *v312;
  size_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t i2;
  uint64_t v317;
  float64_t v318;
  double v319;
  float64_t v320;
  double v321;
  double v322;
  double v323;
  unsigned __int8 v324;
  _QWORD *v325;
  int v326;
  std::chrono::steady_clock::time_point v327;
  std::chrono::steady_clock::time_point *v328;
  uint64_t *v329;
  double v330;
  double v331;
  double v332;
  unsigned __int8 v333;
  double v334;
  char *v336;
  size_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t i3;
  uint64_t v341;
  double v342;
  double v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  double v350;
  unsigned __int8 v351;
  _QWORD *v352;
  int v353;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v354;
  uint64_t *v355;
  unsigned __int8 v356;
  char *v358;
  size_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t i4;
  uint64_t v363;
  float64x2_t **v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t *v367;
  double v368;
  double v369;
  double v370;
  std::mutex *v371;
  uint64_t v373;
  float64_t v374;
  double v375;
  float64_t v376;
  void *v377;
  float64_t v378;
  double v379;
  float64_t v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  double v386;
  float64_t v387;
  double v388;
  float64_t v389;
  float64x2_t *v390;
  float64x2_t v393;
  _QWORD *v395;
  int v396;
  std::chrono::steady_clock::time_point v397;
  __int16 v398;
  std::chrono::steady_clock::time_point *v399;
  uint64_t *v400;
  unsigned __int8 v401;
  unint64_t v402;
  char *v403;
  __int16 v404;
  uint64_t v405;
  uint64_t v406;
  double v407;
  char *v408;
  size_t v409;
  __darwin_time_t v410;
  uint64_t v411;
  uint64_t i1;
  uint64_t v413;
  _BOOL4 v414;
  uint64_t v415;
  uint64_t v416;
  double v417;
  _QWORD *v418;
  _QWORD *v419;
  _QWORD *v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  _QWORD *v432;
  int v433;
  __int16 v434;
  __int16 v435;
  double v436;
  double v437;
  double v438;
  double v439;
  int v440;
  double v441;
  double v442;
  double v443;
  uint64_t v444;
  float64_t v445;
  uint64_t v446;
  __uint64_t v447[2];
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  uint64_t v457;
  __int128 v458;
  uint64_t v459;
  timespec v460;
  _BYTE v461[24];
  double v462;
  _BYTE v463[10];
  __int16 v464;
  double v465;
  __int16 v466;
  double v467;
  __int16 v468;
  void *v469;
  char v470;
  char v471;
  void *v472;
  char v473;
  void *__p;
  char v475;
  uint64_t v476;

  v4 = result;
  v476 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(result + 417))
      goto LABEL_3;
LABEL_11:
    v22 = a2[1];
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 1);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    goto LABEL_67;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/3DOFTracker.cpp", 313, (uint64_t)"metadata", 8, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  if ((result & 1) != 0)
    goto LABEL_669;
  v6 = *a2;
  if (!*(_BYTE *)(v4 + 417))
    goto LABEL_11;
LABEL_3:
  v7 = *v6;
  v8 = (*v6)[2].f64[0];
  v446 = a3;
  if (v8 <= *(double *)(v4 + 3048))
  {
    v25 = atomic_load((unsigned __int8 *)&qword_254A5ADC0);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADC0))
    {
      v418 = operator new(0x28uLL);
      v418[1] = 0;
      v418[2] = 0;
      *v418 = &off_24C9C4340;
      *((_BYTE *)v418 + 24) = 0;
      *((_BYTE *)v418 + 32) = 0;
      qword_254A5AF60 = (uint64_t)(v418 + 3);
      unk_254A5AF68 = v418;
      qword_254A5AF70 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AF60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5ADC0);
    }
    v26 = (_QWORD *)qword_254A5AF60;
    v27 = *(unsigned __int8 *)(qword_254A5AF60 + 8);
    result = std::chrono::steady_clock::now().__d_.__rep_;
    if (v27)
    {
      if (result - *v26 < 1000000000)
      {
LABEL_64:
        v61 = a2[1];
        *(_QWORD *)a3 = *a2;
        *(_QWORD *)(a3 + 8) = v61;
        if (v61)
        {
          v62 = (unint64_t *)(v61 + 1);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
LABEL_67:
        *(_WORD *)(a3 + 16) = 0;
        return result;
      }
      v28 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AF60;
    }
    else
    {
      v28 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5AF60;
      if (!*(_BYTE *)(qword_254A5AF60 + 8))
        *(_BYTE *)(qword_254A5AF60 + 8) = 1;
    }
    *v28 = result;
    v34 = sub_210219C18();
    v35 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_62:
      result = os_signpost_enabled((os_log_t)*v34);
      if ((_DWORD)result)
      {
        v59 = v7[2].f64[0];
        v60 = *(_QWORD *)(v4 + 3048);
        *(_DWORD *)v461 = 134218240;
        *(float64_t *)&v461[4] = v59;
        *(_WORD *)&v461[12] = 2048;
        *(_QWORD *)&v461[14] = v60;
        result = _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_64;
    }
    v37 = v7[2].f64[0];
    v38 = *(_QWORD *)(v4 + 3048);
    *(_DWORD *)v461 = 134218240;
    *(float64_t *)&v461[4] = v37;
    *(_WORD *)&v461[12] = 2048;
    *(_QWORD *)&v461[14] = v38;
    v39 = (char *)_os_log_send_and_compose_impl();
    v40 = strlen(v39);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v41 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v34 + 1), (__int128 *)(v34 + 5), "ThreeDOFTracker: Metadata latest_state_timestamp = %lf is before latest 3dof state timestamp = %lf", 0x62uLL, v39, v40, v41, v447);
    std::mutex::lock(&stru_254A5A410);
    v42 = qword_254A5A458;
    for (i = unk_254A5A460; v42 != i; v42 += 40)
    {
      v44 = *(_QWORD *)(v42 + 32);
      if (!v44)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v44 + 48))(v44, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
      {
LABEL_33:
        if (!v471)
        {
LABEL_55:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v39)
            free(v39);
          goto LABEL_62;
        }
LABEL_53:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_55;
      }
    }
    else
    {
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_33;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_55;
    goto LABEL_53;
  }
  v9 = v7[3].f64[0];
  v10 = v7[3].f64[1];
  v11 = v7[4].f64[0];
  v442 = v7[5].f64[1];
  v12 = v7[7].f64[0];
  v438 = v7[12].f64[1];
  v439 = v7[12].f64[0];
  v437 = v7[13].f64[0];
  v13 = *(unsigned __int8 *)(v4 + 496);
  if (!*(_BYTE *)(v4 + 416))
  {
    if (LOBYTE(v7[314].f64[1]) == 1)
    {
      v29 = atomic_load((unsigned __int8 *)&qword_254A5AE18);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE18))
      {
        v425 = operator new(0x28uLL);
        v425[1] = 0;
        v425[2] = 0;
        *((_BYTE *)v425 + 24) = 0;
        *v425 = &off_24C9C4340;
        *((_BYTE *)v425 + 32) = 0;
        qword_254A5B068 = (uint64_t)(v425 + 3);
        qword_254A5B070 = (uint64_t)v425;
        qword_254A5B078 = 1000000000;
        __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B068, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5AE18);
      }
      v30 = (_QWORD *)qword_254A5B068;
      v31 = *(unsigned __int8 *)(qword_254A5B068 + 8);
      v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v31)
      {
        if (v32.__d_.__rep_ - *v30 < 1000000000)
          goto LABEL_222;
        v33 = (std::chrono::steady_clock::time_point *)qword_254A5B068;
      }
      else
      {
        v33 = (std::chrono::steady_clock::time_point *)qword_254A5B068;
        if (!*(_BYTE *)(qword_254A5B068 + 8))
          *(_BYTE *)(qword_254A5B068 + 8) = 1;
      }
      v33->__d_.__rep_ = v32.__d_.__rep_;
      v68 = sub_210219C18();
      v69 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_120;
      *(_WORD *)v461 = 0;
      v71 = (char *)_os_log_send_and_compose_impl();
      v72 = strlen(v71);
      v447[0] = 0;
      pthread_threadid_np(0, v447);
      v73 = v447[0];
      timespec_get((timespec *)v447, 1);
      sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v68 + 1), (__int128 *)(v68 + 5), "ThreeDOFTracker: Output 6DOF pose because in visual SLAM", 0x38uLL, v71, v72, v73, v447);
      std::mutex::lock(&stru_254A5A410);
      v74 = qword_254A5A458;
      for (j = unk_254A5A460; v74 != j; v74 += 40)
      {
        v76 = *(_QWORD *)(v74 + 32);
        if (!v76)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 48))(v76, v461);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v475 < 0)
      {
        operator delete(__p);
        a3 = v446;
        if ((v473 & 0x80000000) == 0)
        {
LABEL_94:
          if (!v471)
          {
LABEL_113:
            if (BYTE2(v467) && SBYTE1(v467) < 0)
              operator delete(*(void **)v463);
            if (SHIBYTE(v462) < 0)
              operator delete(*(void **)&v461[8]);
            if (v71)
              free(v71);
LABEL_120:
            if (os_signpost_enabled((os_log_t)*v68))
            {
              *(_WORD *)v461 = 0;
LABEL_198:
              _os_signpost_emit_unreliably_with_name_impl();
              v64 = 0;
              goto LABEL_223;
            }
            goto LABEL_222;
          }
LABEL_111:
          if (v470 < 0)
            operator delete(v469);
          goto LABEL_113;
        }
      }
      else
      {
        a3 = v446;
        if ((v473 & 0x80000000) == 0)
          goto LABEL_94;
      }
      operator delete(v472);
      if (!v471)
        goto LABEL_113;
      goto LABEL_111;
    }
    if (v8 < *(double *)(v4 + 4160) + 5.0)
    {
      v54 = atomic_load((unsigned __int8 *)&qword_254A5AE20);
      if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE20))
      {
        v429 = operator new(0x28uLL);
        v429[1] = 0;
        v429[2] = 0;
        *((_BYTE *)v429 + 24) = 0;
        *v429 = &off_24C9C4340;
        *((_BYTE *)v429 + 32) = 0;
        qword_254A5B080 = (uint64_t)(v429 + 3);
        qword_254A5B088 = (uint64_t)v429;
        qword_254A5B090 = 1000000000;
        __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B080, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5AE20);
      }
      v55 = (_QWORD *)qword_254A5B080;
      v56 = *(unsigned __int8 *)(qword_254A5B080 + 8);
      v57.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v56)
      {
        if (v57.__d_.__rep_ - *v55 < 1000000000)
          goto LABEL_222;
        v58 = (std::chrono::steady_clock::time_point *)qword_254A5B080;
      }
      else
      {
        v58 = (std::chrono::steady_clock::time_point *)qword_254A5B080;
        if (!*(_BYTE *)(qword_254A5B080 + 8))
          *(_BYTE *)(qword_254A5B080 + 8) = 1;
      }
      v58->__d_.__rep_ = v57.__d_.__rep_;
      v77 = sub_210219C18();
      v78 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_138;
      *(_WORD *)v461 = 0;
      v80 = (char *)_os_log_send_and_compose_impl();
      v81 = strlen(v80);
      v447[0] = 0;
      pthread_threadid_np(0, v447);
      v82 = v447[0];
      timespec_get((timespec *)v447, 1);
      sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v77 + 1), (__int128 *)(v77 + 5), "ThreeDOFTracker: Output 6DOF pose because in the significant data drop window", 0x4DuLL, v80, v81, v82, v447);
      std::mutex::lock(&stru_254A5A410);
      v83 = qword_254A5A458;
      for (k = unk_254A5A460; v83 != k; v83 += 40)
      {
        v85 = *(_QWORD *)(v83 + 32);
        if (!v85)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 48))(v85, v461);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v475 < 0)
      {
        operator delete(__p);
        a3 = v446;
        if ((v473 & 0x80000000) == 0)
        {
LABEL_107:
          if (!v471)
          {
LABEL_131:
            if (BYTE2(v467) && SBYTE1(v467) < 0)
              operator delete(*(void **)v463);
            if (SHIBYTE(v462) < 0)
              operator delete(*(void **)&v461[8]);
            if (v80)
              free(v80);
LABEL_138:
            if (os_signpost_enabled((os_log_t)*v77))
            {
              *(_WORD *)v461 = 0;
              goto LABEL_198;
            }
LABEL_222:
            v64 = 0;
            goto LABEL_223;
          }
LABEL_129:
          if (v470 < 0)
            operator delete(v469);
          goto LABEL_131;
        }
      }
      else
      {
        a3 = v446;
        if ((v473 & 0x80000000) == 0)
          goto LABEL_107;
      }
      operator delete(v472);
      if (!v471)
        goto LABEL_131;
      goto LABEL_129;
    }
    if (LOBYTE(v7[1].f64[0]))
    {
      v65 = LOBYTE(v7[23].f64[0]);
      v66 = v65 < 3;
      if (*(_BYTE *)(v4 + 496))
      {
        v67 = 0;
        goto LABEL_140;
      }
      if (v65 < 3)
      {
        *(_QWORD *)(v4 + 488) = 0;
        v67 = 1;
        v66 = 1;
        goto LABEL_140;
      }
    }
    else if (*(_BYTE *)(v4 + 496))
    {
      v67 = 0;
      v66 = 0;
      goto LABEL_140;
    }
    v86 = *(_QWORD *)(v4 + 480);
    v87 = *(_QWORD *)(v4 + 488) + 1;
    *(_QWORD *)(v4 + 488) = v87;
    _CF = v86 >= v87;
    v89 = v86 - v87;
    if (v89 != 0 && _CF)
    {
      *(_QWORD *)v461 = v89;
      sub_20EAF0B20((uint64_t *)v461);
      goto LABEL_222;
    }
    v66 = 0;
    *(_QWORD *)(v4 + 488) = v86;
    v67 = 1;
LABEL_140:
    if (*(_BYTE *)(v4 + 3184))
    {
      *(float64x2_t *)v447 = *(float64x2_t *)((char *)v7 + 5128);
      if (LOBYTE(v447[1]))
      {
        if (!v67)
        {
          v102 = (double)*(unint64_t *)(v4 + 432);
          if (*(double *)v447 >= v102 && v66)
          {
            sub_20EAF244C();
            v64 = 0;
            goto LABEL_223;
          }
          if (*(double *)v447 < v102)
          {
            sub_20EAF285C((uint64_t *)v447, (uint64_t *)(v4 + 432));
          }
          else
          {
            v108 = *(double *)(v4 + 504);
            if (v108 == -1.0)
            {
              sub_20EAF3504();
            }
            else
            {
              if (v8 - v108 > *(double *)(v4 + 448))
              {
                sub_20EAF30F4();
                v64 = 0;
                goto LABEL_223;
              }
              sub_20EAF2CE4();
            }
          }
          goto LABEL_81;
        }
        v90 = *(double *)v447 > (double)*(unint64_t *)(v4 + 424) || v66;
        if ((v90 & 1) == 0 && !(BYTE1(v7[319].f64[0]) | LOBYTE(v7->f64[0])))
        {
          sub_20EAF0F84();
          goto LABEL_81;
        }
        if (v66)
        {
          sub_20EAF1394();
          v64 = 0;
          goto LABEL_223;
        }
        if (LOBYTE(v7->f64[0]))
        {
          sub_20EAF17A4();
          v64 = 0;
          goto LABEL_223;
        }
        if (BYTE1(v7[319].f64[0]))
        {
          sub_20EAF1BB4();
          v64 = 0;
          goto LABEL_223;
        }
        sub_20EAF1FC4((uint64_t *)v447, (uint64_t *)(v4 + 424));
        goto LABEL_222;
      }
      if (v67)
        v96 = "6DOF";
      else
        v96 = "3DOF";
      v97 = atomic_load((unsigned __int8 *)&qword_254A5AE38);
      if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE38))
      {
        v432 = operator new(0x28uLL);
        v432[1] = 0;
        v432[2] = 0;
        *((_BYTE *)v432 + 24) = 0;
        *v432 = &off_24C9C4340;
        *((_BYTE *)v432 + 32) = 0;
        qword_254A5B0C8 = (uint64_t)(v432 + 3);
        qword_254A5B0D0 = (uint64_t)v432;
        qword_254A5B0D8 = 1000000000;
        __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B0C8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5AE38);
      }
      v98 = (_QWORD *)qword_254A5B0C8;
      v99 = *(unsigned __int8 *)(qword_254A5B0C8 + 8);
      v100.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v99)
      {
        if (v100.__d_.__rep_ - *v98 < 1000000000)
        {
LABEL_215:
          v64 = *(_BYTE *)(v4 + 496) != 0;
          a3 = v446;
          goto LABEL_223;
        }
        v101 = (std::chrono::steady_clock::time_point *)qword_254A5B0C8;
      }
      else
      {
        v101 = (std::chrono::steady_clock::time_point *)qword_254A5B0C8;
        if (!*(_BYTE *)(qword_254A5B0C8 + 8))
          *(_BYTE *)(qword_254A5B0C8 + 8) = 1;
      }
      v101->__d_.__rep_ = v100.__d_.__rep_;
      v109 = sub_210219C18();
      v110 = sub_21021A1E0();
      if (!atomic_load((unint64_t *)&v110[1]))
      {
LABEL_213:
        if (os_signpost_enabled((os_log_t)*v109))
        {
          *(_DWORD *)v461 = 136315138;
          *(_QWORD *)&v461[4] = v96;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        goto LABEL_215;
      }
      v112 = (uint64_t)v110;
      *(_DWORD *)v461 = 136315138;
      *(_QWORD *)&v461[4] = v96;
      v113 = (void *)_os_log_send_and_compose_impl();
      *(_QWORD *)&v458 = v113;
      sub_21021A118(v461, (uint64_t)v109, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "ThreeDOFTracker: Output %s pose because MCAM lux is not avaliable", 0x41uLL, (const char **)&v458);
      sub_21021A2DC(v112, (uint64_t)v461);
      if (v475 < 0)
      {
        operator delete(__p);
        if ((v473 & 0x80000000) == 0)
        {
LABEL_183:
          if (!v471)
          {
LABEL_206:
            if (BYTE2(v467) && SBYTE1(v467) < 0)
              operator delete(*(void **)v463);
            if (SHIBYTE(v462) < 0)
              operator delete(*(void **)&v461[8]);
            if (v113)
              free(v113);
            goto LABEL_213;
          }
LABEL_204:
          if (v470 < 0)
            operator delete(v469);
          goto LABEL_206;
        }
      }
      else if ((v473 & 0x80000000) == 0)
      {
        goto LABEL_183;
      }
      operator delete(v472);
      if (!v471)
        goto LABEL_206;
      goto LABEL_204;
    }
    v91 = atomic_load((unsigned __int8 *)&qword_254A5AE30);
    if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE30))
    {
      v431 = operator new(0x28uLL);
      v431[1] = 0;
      v431[2] = 0;
      *((_BYTE *)v431 + 24) = 0;
      *v431 = &off_24C9C4340;
      *((_BYTE *)v431 + 32) = 0;
      qword_254A5B0B0 = (uint64_t)(v431 + 3);
      qword_254A5B0B8 = (uint64_t)v431;
      qword_254A5B0C0 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B0B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5AE30);
    }
    v92 = (_QWORD *)qword_254A5B0B0;
    v93 = *(unsigned __int8 *)(qword_254A5B0B0 + 8);
    v94.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v93)
    {
      if (v94.__d_.__rep_ - *v92 < 1000000000)
        goto LABEL_222;
      v95 = (std::chrono::steady_clock::time_point *)qword_254A5B0B0;
    }
    else
    {
      v95 = (std::chrono::steady_clock::time_point *)qword_254A5B0B0;
      if (!*(_BYTE *)(qword_254A5B0B0 + 8))
        *(_BYTE *)(qword_254A5B0B0 + 8) = 1;
    }
    v95->__d_.__rep_ = v94.__d_.__rep_;
    v104 = sub_210219C18();
    v105 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_196:
      if (os_signpost_enabled((os_log_t)*v104))
      {
        *(_WORD *)v461 = 0;
        goto LABEL_198;
      }
      goto LABEL_222;
    }
    *(_WORD *)v461 = 0;
    v107 = (void *)_os_log_send_and_compose_impl();
    v447[0] = (__uint64_t)v107;
    sub_21021A118(v461, (uint64_t)v104, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "ThreeDOFTracker: Output 6DOF pose because the attitude filter is not initialized", 0x50uLL, (const char **)v447);
    sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)v461);
    if (v475 < 0)
    {
      operator delete(__p);
      if ((v473 & 0x80000000) == 0)
      {
LABEL_171:
        if (!v471)
        {
LABEL_189:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v107)
            free(v107);
          goto LABEL_196;
        }
LABEL_187:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_189;
      }
    }
    else if ((v473 & 0x80000000) == 0)
    {
      goto LABEL_171;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_189;
    goto LABEL_187;
  }
  v14 = atomic_load((unsigned __int8 *)&qword_254A5AE10);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE10))
  {
    v422 = operator new(0x28uLL);
    v422[1] = 0;
    v422[2] = 0;
    *((_BYTE *)v422 + 24) = 0;
    *v422 = &off_24C9C4340;
    *((_BYTE *)v422 + 32) = 0;
    qword_254A5B050 = (uint64_t)(v422 + 3);
    qword_254A5B058 = (uint64_t)v422;
    qword_254A5B060 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B050, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE10);
  }
  v15 = (_QWORD *)qword_254A5B050;
  v16 = *(unsigned __int8 *)(qword_254A5B050 + 8);
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v16)
  {
    v21 = (std::chrono::steady_clock::time_point *)qword_254A5B050;
    if (!*(_BYTE *)(qword_254A5B050 + 8))
      *(_BYTE *)(qword_254A5B050 + 8) = 1;
LABEL_37:
    v21->__d_.__rep_ = v17.__d_.__rep_;
    v45 = sub_210219C18();
    v46 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_79;
    *(_WORD *)v461 = 0;
    v48 = (char *)_os_log_send_and_compose_impl();
    v49 = strlen(v48);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v50 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v45 + 1), (__int128 *)(v45 + 5), "ThreeDOFTracker: Output 3DOF pose because the tracker is forced into 3DOF", 0x49uLL, v48, v49, v50, v447);
    std::mutex::lock(&stru_254A5A410);
    v51 = qword_254A5A458;
    for (m = unk_254A5A460; v51 != m; v51 += 40)
    {
      v53 = *(_QWORD *)(v51 + 32);
      if (!v53)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v53 + 48))(v53, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
      {
LABEL_44:
        if (!v471)
        {
LABEL_72:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v48)
            free(v48);
LABEL_79:
          if (os_signpost_enabled((os_log_t)*v45))
          {
            *(_WORD *)v461 = 0;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_81;
        }
LABEL_70:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_72;
      }
    }
    else
    {
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_44;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_72;
    goto LABEL_70;
  }
  if (v17.__d_.__rep_ - *v15 >= 1000000000)
  {
    v21 = (std::chrono::steady_clock::time_point *)qword_254A5B050;
    goto LABEL_37;
  }
LABEL_81:
  v64 = 1;
LABEL_223:
  if (v13 != v64)
  {
    *(_QWORD *)(v4 + 488) = 0;
    *(_BYTE *)(v4 + 496) = v64;
    *(_QWORD *)(v4 + 504) = 0xBFF0000000000000;
    *(_BYTE *)(v4 + 3192) = 0;
  }
  if (*(_BYTE *)(v4 + 416))
    goto LABEL_226;
  if (v13)
    v115 = 0;
  else
    v115 = v64;
  v116 = **a2;
  if (!v13 || (v64 & 1) != 0)
    goto LABEL_245;
  if (v116[2].f64[0] < *(double *)(v4 + 4160) + *(double *)(v4 + 472))
  {
    v117 = v64;
    v118 = sub_210219C18();
    v119 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_302:
      if (os_signpost_enabled((os_log_t)*v118))
      {
        *(_WORD *)v461 = 0;
LABEL_322:
        _os_signpost_emit_unreliably_with_name_impl();
        goto LABEL_323;
      }
      goto LABEL_323;
    }
    *(_WORD *)v461 = 0;
    v121 = (char *)_os_log_send_and_compose_impl();
    v122 = strlen(v121);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v123 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v118 + 1), (__int128 *)(v118 + 5), "ThreeDOFTracker: Resume SLAM because changing from 3DOF to 6DOF and sensor data drops", 0x55uLL, v121, v122, v123, v447);
    std::mutex::lock(&stru_254A5A410);
    v124 = qword_254A5A458;
    for (n = unk_254A5A460; v124 != n; v124 += 40)
    {
      v126 = *(_QWORD *)(v124 + 32);
      if (!v126)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v126 + 48))(v126, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
      {
LABEL_242:
        if (!v471)
        {
LABEL_295:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v121)
            free(v121);
          goto LABEL_302;
        }
LABEL_293:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_295;
      }
    }
    else
    {
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_242;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_295;
    goto LABEL_293;
  }
  if (*(_BYTE *)(v4 + 3184))
  {
LABEL_245:
    if (v115)
    {
      v117 = v64;
      v127 = sub_210219C18();
      v128 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_282;
      *(_WORD *)v461 = 0;
      v130 = (char *)_os_log_send_and_compose_impl();
      v131 = strlen(v130);
      v447[0] = 0;
      pthread_threadid_np(0, v447);
      v132 = v447[0];
      timespec_get((timespec *)v447, 1);
      sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v127 + 1), (__int128 *)(v127 + 5), "ThreeDOFTracker: Pause SLAM because changing from 6DOF to 3DOF", 0x3EuLL, v130, v131, v132, v447);
      std::mutex::lock(&stru_254A5A410);
      v133 = qword_254A5A458;
      for (ii = unk_254A5A460; v133 != ii; v133 += 40)
      {
        v135 = *(_QWORD *)(v133 + 32);
        if (!v135)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v135 + 48))(v135, v461);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v475 < 0)
      {
        operator delete(__p);
        a3 = v446;
        if ((v473 & 0x80000000) == 0)
        {
LABEL_253:
          if (!v471)
          {
LABEL_275:
            if (BYTE2(v467) && SBYTE1(v467) < 0)
              operator delete(*(void **)v463);
            if (SHIBYTE(v462) < 0)
              operator delete(*(void **)&v461[8]);
            if (v130)
              free(v130);
LABEL_282:
            if (os_signpost_enabled((os_log_t)*v127))
            {
              *(_WORD *)v461 = 0;
              _os_signpost_emit_unreliably_with_name_impl();
            }
            v139 = 1;
            goto LABEL_324;
          }
LABEL_273:
          if (v470 < 0)
            operator delete(v469);
          goto LABEL_275;
        }
      }
      else
      {
        a3 = v446;
        if ((v473 & 0x80000000) == 0)
          goto LABEL_253;
      }
      operator delete(v472);
      if (!v471)
        goto LABEL_275;
      goto LABEL_273;
    }
    if (!v64)
    {
LABEL_226:
      LOWORD(v114) = 0;
      goto LABEL_227;
    }
    *(float64x2_t *)v447 = *(float64x2_t *)((char *)v116 + 5128);
    if (LOBYTE(v447[1]))
    {
      if (v13
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/3DOFTracker.cpp", 771, (uint64_t)"last_frame_3dof && current_frame_3dof", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v136 = (double)*(unint64_t *)(v4 + 432);
        v137 = *(double *)(v4 + 504);
        v19.__d_.__rep_ = -1.0;
        if (v137 == -1.0 && *(double *)v447 >= v136)
        {
          v138 = sub_210219C18();
          sub_20EAF3914((uint64_t)v138, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)v447, (uint64_t *)(v4 + 432));
          v139 = 0;
        }
        else
        {
          v139 = 0;
          if (v137 == -1.0)
          {
            LOWORD(v114) = 0;
            goto LABEL_227;
          }
          v153 = 0;
          if (*(double *)v447 >= v136)
            goto LABEL_325;
          v154 = sub_210219C18();
          sub_20EAF3C44((uint64_t)v154, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)v447, (uint64_t *)(v4 + 432));
          v139 = 1;
        }
        LOWORD(v114) = v139 | 0x100;
        if ((v139 | 0x100u) >= 0x100)
          goto LABEL_326;
        goto LABEL_227;
      }
LABEL_669:
      abort();
    }
    v149 = sub_210219C18();
    v150 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_655:
      if (os_signpost_enabled((os_log_t)*v149))
      {
        *(_WORD *)v461 = 0;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_226;
    }
    *(_WORD *)v461 = 0;
    v152 = (void *)_os_log_send_and_compose_impl();
    *(_QWORD *)&v458 = v152;
    sub_21021A118(v461, (uint64_t)v149, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "ThreeDOFTracker: mcam lux data drops", 0x24uLL, (const char **)&v458);
    sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)v461);
    if (v475 < 0)
    {
      operator delete(__p);
      if ((v473 & 0x80000000) == 0)
      {
LABEL_289:
        if (!v471)
        {
LABEL_648:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v152)
            free(v152);
          goto LABEL_655;
        }
LABEL_646:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_648;
      }
    }
    else if ((v473 & 0x80000000) == 0)
    {
      goto LABEL_289;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_648;
    goto LABEL_646;
  }
  v117 = v64;
  v140 = sub_210219C18();
  v141 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_WORD *)v461 = 0;
    v143 = (char *)_os_log_send_and_compose_impl();
    v144 = strlen(v143);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v145 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v140 + 1), (__int128 *)(v140 + 5), "ThreeDOFTracker: Resume SLAM because changing from 3DOF to 6DOF and AttitudeFilter is not initialized", 0x65uLL, v143, v144, v145, v447);
    std::mutex::lock(&stru_254A5A410);
    v146 = qword_254A5A458;
    for (jj = unk_254A5A460; v146 != jj; v146 += 40)
    {
      v148 = *(_QWORD *)(v146 + 32);
      if (!v148)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v148 + 48))(v148, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
      {
LABEL_269:
        if (!v471)
        {
LABEL_313:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v143)
            free(v143);
          goto LABEL_320;
        }
LABEL_311:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_313;
      }
    }
    else
    {
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_269;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_313;
    goto LABEL_311;
  }
LABEL_320:
  if (os_signpost_enabled((os_log_t)*v140))
  {
    *(_WORD *)v461 = 0;
    goto LABEL_322;
  }
LABEL_323:
  v139 = 0;
LABEL_324:
  v153 = 1;
  v64 = v117;
LABEL_325:
  v114 = v139 | (v153 << 8);
  if (v114 >= 0x100)
  {
LABEL_326:
    if (v139)
    {
      *(double *)(v4 + 504) = -1.0;
      v444 = v4 + 3128;
      v440 = v64;
      if ((v64 & 1) != 0)
        goto LABEL_346;
    }
    else
    {
      *(float64_t *)(v4 + 504) = (*v6)[2].f64[0];
      v444 = v4 + 3128;
      v440 = v64;
      if ((v64 & 1) != 0)
        goto LABEL_346;
    }
    goto LABEL_330;
  }
LABEL_227:
  v444 = v4 + 3128;
  v440 = v64;
  if ((v64 & 1) != 0)
    goto LABEL_346;
LABEL_330:
  v155 = **a2;
  if (!LOBYTE(v155[1].f64[0]) || LOBYTE(v155[23].f64[0]) > 2u)
  {
LABEL_346:
    if (!*(_BYTE *)(v4 + 464)
      || !*(_BYTE *)(v444 + 1120)
      || *(_BYTE *)(v4 + 3184)
      || *(double *)(v4 + 4240) + *(double *)(v4 + 456) <= (*v6)[2].f64[0])
    {
      goto LABEL_396;
    }
    v197 = *(unsigned __int8 *)(v4 + 2696);
    *(_QWORD *)(v4 + 2640) = *(_QWORD *)(v4 + 4184);
    *(_OWORD *)(v4 + 2624) = *(_OWORD *)(v4 + 4168);
    *(_OWORD *)(v4 + 2648) = *(_OWORD *)(v4 + 4192);
    *(_QWORD *)(v4 + 2664) = *(_QWORD *)(v4 + 4208);
    *(_QWORD *)(v4 + 2688) = *(_QWORD *)(v4 + 4232);
    *(_OWORD *)(v4 + 2672) = *(_OWORD *)(v4 + 4216);
    if (!v197)
      *(_BYTE *)(v4 + 2696) = 1;
    v198 = atomic_load((unsigned __int8 *)&qword_254A5ADE0);
    if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADE0))
    {
      v426 = operator new(0x28uLL);
      v426[1] = 0;
      v426[2] = 0;
      *((_BYTE *)v426 + 24) = 0;
      *v426 = &off_24C9C4340;
      *((_BYTE *)v426 + 32) = 0;
      qword_254A5AFC0 = (uint64_t)(v426 + 3);
      unk_254A5AFC8 = v426;
      qword_254A5AFD0 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AFC0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5ADE0);
      a3 = v446;
    }
    v199 = (_QWORD *)qword_254A5AFC0;
    v200 = *(unsigned __int8 *)(qword_254A5AFC0 + 8);
    v201.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v200)
    {
      if (v201.__d_.__rep_ - *v199 < 1000000000)
        goto LABEL_396;
      v202 = (std::chrono::steady_clock::time_point *)qword_254A5AFC0;
    }
    else
    {
      v202 = (std::chrono::steady_clock::time_point *)qword_254A5AFC0;
      if (!*(_BYTE *)(qword_254A5AFC0 + 8))
        *(_BYTE *)(qword_254A5AFC0 + 8) = 1;
    }
    v202->__d_.__rep_ = v201.__d_.__rep_;
    v203 = sub_210219C18();
    v204 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v205 = atomic_load(&qword_254A5A450);
    v206 = "5program_options14invalid_syntaxE";
    if (!v205)
    {
LABEL_394:
      if (os_signpost_enabled((os_log_t)*v203))
      {
        v233 = *(_QWORD *)(v4 + 4240);
        *(_DWORD *)v461 = *((_QWORD *)v206 + 434);
        *(_QWORD *)&v461[4] = v233;
        _os_signpost_emit_unreliably_with_name_impl();
      }
LABEL_396:
      v234 = *(double *)(v4 + 2848);
      v18.f64[0] = -1.0;
      if (v234 == -1.0)
        v235 = -1.0;
      else
        v235 = v234 + 0.001;
      v236 = (*v6)[2].f64[0];
      *(double *)(v4 + 2848) = v236;
      v457 = 0;
      v455 = 0u;
      v456 = 0u;
      v453 = 0u;
      v454 = 0u;
      v451 = 0u;
      v452 = 0u;
      v449 = 0u;
      v450 = 0u;
      *(_OWORD *)v447 = 0u;
      v448 = 0u;
      v237 = sub_20EAF08BC(v4, (uint64_t)v447, (uint64_t)&v458, v235, v236, v18, *(double *)&v19.__d_.__rep_, v20);
      v238 = v237;
      if (v237 != 1)
      {
        if (v237 != 2)
        {
          v249 = *(_QWORD *)(v4 + 2848);
          *(_QWORD *)(v4 + 3048) = v249;
          *(_QWORD *)(v4 + 3016) = v457;
          v250 = v456;
          *(_OWORD *)(v4 + 2984) = v455;
          *(_OWORD *)(v4 + 3000) = v250;
          v251 = v452;
          *(_OWORD *)(v4 + 2920) = v451;
          *(_OWORD *)(v4 + 2936) = v251;
          v252 = v454;
          *(_OWORD *)(v4 + 2952) = v453;
          *(_OWORD *)(v4 + 2968) = v252;
          v253 = v448;
          *(_OWORD *)(v4 + 2856) = *(_OWORD *)v447;
          *(_OWORD *)(v4 + 2872) = v253;
          v254 = v450;
          *(_OWORD *)(v4 + 2888) = v449;
          *(_OWORD *)(v4 + 2904) = v254;
          *(_OWORD *)(v4 + 3024) = v458;
          *(_QWORD *)(v4 + 3040) = v459;
          if (!*(_BYTE *)(v4 + 3184))
          {
            *(_QWORD *)(v4 + 3176) = v249;
            *(_BYTE *)(v4 + 3184) = 1;
          }
          *(_QWORD *)(v4 + 4184) = *(_QWORD *)(v4 + 1832);
          *(_OWORD *)(v4 + 4168) = *(_OWORD *)(v4 + 1816);
          *(_QWORD *)(v4 + 4208) = *(_QWORD *)(v4 + 1896);
          *(_OWORD *)(v4 + 4192) = *(_OWORD *)(v4 + 1880);
          *(_QWORD *)(v4 + 4232) = *(_QWORD *)(v4 + 1864);
          *(_OWORD *)(v4 + 4216) = *(_OWORD *)(v4 + 1848);
          *(double *)(v4 + 4240) = v236;
          *(_BYTE *)(v444 + 1120) = 1;
          goto LABEL_469;
        }
        v239 = atomic_load((unsigned __int8 *)&qword_254A5ADE8);
        if ((v239 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADE8))
        {
          v423 = operator new(0x28uLL);
          v423[1] = 0;
          v423[2] = 0;
          *((_BYTE *)v423 + 24) = 0;
          *v423 = &off_24C9C4340;
          *((_BYTE *)v423 + 32) = 0;
          qword_254A5AFD8 = (uint64_t)(v423 + 3);
          unk_254A5AFE0 = v423;
          qword_254A5AFE8 = 1000000000;
          __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AFD8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A5ADE8);
          a3 = v446;
        }
        v240 = (_QWORD *)qword_254A5AFD8;
        v241 = *(unsigned __int8 *)(qword_254A5AFD8 + 8);
        v242.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (v241)
        {
          if (v242.__d_.__rep_ - *v240 < 1000000000)
          {
LABEL_468:
            *(_BYTE *)(v4 + 3176) = 0;
            *(_BYTE *)(v4 + 3184) = 0;
LABEL_469:
            v277 = *v6;
            v278 = v238 | 0x100;
            goto LABEL_470;
          }
          v243 = (std::chrono::steady_clock::time_point *)qword_254A5AFD8;
        }
        else
        {
          v243 = (std::chrono::steady_clock::time_point *)qword_254A5AFD8;
          if (!*(_BYTE *)(qword_254A5AFD8 + 8))
            *(_BYTE *)(qword_254A5AFD8 + 8) = 1;
        }
        v243->__d_.__rep_ = v242.__d_.__rep_;
        v255 = sub_210219C18();
        v256 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v256 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
        {
LABEL_445:
          if (os_signpost_enabled((os_log_t)*v255))
          {
            *(_DWORD *)v461 = 134217984;
            *(double *)&v461[4] = v236;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_468;
        }
        v434 = v114;
        *(_DWORD *)v461 = 134217984;
        *(double *)&v461[4] = v236;
        v258 = (char *)_os_log_send_and_compose_impl();
        v259 = strlen(v258);
        v460.tv_sec = 0;
        pthread_threadid_np(0, (__uint64_t *)&v460);
        tv_sec = v460.tv_sec;
        timespec_get(&v460, 1);
        sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v255 + 1), (__int128 *)(v255 + 5), "ThreeDOFTracker: GET 3DOF STATE FAILED DUE TO UNINTITIALIZED 3DOF TRACKER at timestamp:%lf ", 0x5BuLL, v258, v259, tv_sec, &v460);
        std::mutex::lock(&stru_254A5A410);
        v261 = qword_254A5A458;
        for (kk = unk_254A5A460; v261 != kk; v261 += 40)
        {
          v263 = *(_QWORD *)(v261 + 32);
          if (!v263)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v263 + 48))(v263, v461);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v475 < 0)
        {
          operator delete(__p);
          a3 = v446;
          LOWORD(v114) = v434;
          if ((v473 & 0x80000000) == 0)
          {
LABEL_421:
            if (!v471)
            {
LABEL_438:
              if (BYTE2(v467) && SBYTE1(v467) < 0)
                operator delete(*(void **)v463);
              if (SHIBYTE(v462) < 0)
                operator delete(*(void **)&v461[8]);
              if (v258)
                free(v258);
              goto LABEL_445;
            }
LABEL_436:
            if (v470 < 0)
              operator delete(v469);
            goto LABEL_438;
          }
        }
        else
        {
          a3 = v446;
          LOWORD(v114) = v434;
          if ((v473 & 0x80000000) == 0)
            goto LABEL_421;
        }
        operator delete(v472);
        if (!v471)
          goto LABEL_438;
        goto LABEL_436;
      }
      v244 = atomic_load((unsigned __int8 *)&qword_254A5ADF0);
      if ((v244 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADF0))
      {
        v424 = operator new(0x28uLL);
        v424[1] = 0;
        v424[2] = 0;
        *((_BYTE *)v424 + 24) = 0;
        *v424 = &off_24C9C4340;
        *((_BYTE *)v424 + 32) = 0;
        qword_254A5AFF0 = (uint64_t)(v424 + 3);
        qword_254A5AFF8 = (uint64_t)v424;
        qword_254A5B000 = 1000000000;
        __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AFF0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5ADF0);
        a3 = v446;
      }
      v245 = (_QWORD *)qword_254A5AFF0;
      v246 = *(unsigned __int8 *)(qword_254A5AFF0 + 8);
      v247.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v246)
      {
        if (v247.__d_.__rep_ - *v245 < 1000000000)
        {
LABEL_460:
          v273 = *(_QWORD *)(v4 + 2616);
          if (v273)
          {
            v274 = *(void **)(v273 + 80);
            v275 = *(_QWORD *)(v273 + 88) - (_QWORD)v274;
            if (v275 >= 1)
              bzero(v274, 4 * (((unint64_t)v275 >> 2) - ((unint64_t)v275 > 3)) + 4);
            if (*(_BYTE *)(v273 + 112))
              *(_BYTE *)(v273 + 112) = 0;
          }
          *(_QWORD *)(v4 + 512) = *(_QWORD *)(v4 + 744);
          *(_QWORD *)(v4 + 520) = 0xBFF0000000000000;
          *(_DWORD *)(v4 + 576) = 1;
          *(_QWORD *)(v4 + 1256) = 0;
          *(_QWORD *)(v4 + 1272) = 0;
          *(_QWORD *)(v4 + 1264) = 0;
          *(_BYTE *)(v4 + 2192) = 0;
          *(_QWORD *)(v4 + 2184) = 0;
          *(_QWORD *)(v4 + 2584) = 0;
          *(_OWORD *)(v4 + 2248) = 0u;
          *(_OWORD *)(v4 + 2264) = 0u;
          *(_OWORD *)(v4 + 2280) = 0u;
          *(_OWORD *)(v4 + 2296) = 0u;
          *(_OWORD *)(v4 + 2312) = 0u;
          *(_OWORD *)(v4 + 2328) = 0u;
          *(_OWORD *)(v4 + 2344) = 0u;
          *(_OWORD *)(v4 + 2360) = 0u;
          *(_OWORD *)(v4 + 2376) = 0u;
          *(_OWORD *)(v4 + 2392) = 0u;
          *(_OWORD *)(v4 + 2408) = 0u;
          *(_OWORD *)(v4 + 2424) = 0u;
          *(_OWORD *)(v4 + 2440) = 0u;
          *(_OWORD *)(v4 + 2456) = 0u;
          *(_OWORD *)(v4 + 2472) = 0u;
          *(_OWORD *)(v4 + 2488) = 0u;
          *(_OWORD *)(v4 + 2504) = 0u;
          *(_OWORD *)(v4 + 2520) = 0u;
          *(_OWORD *)(v4 + 2536) = 0u;
          *(_OWORD *)(v4 + 2552) = 0u;
          *(_OWORD *)(v4 + 2568) = 0u;
          *(_QWORD *)(v4 + 1112) = 0;
          *(_QWORD *)(v4 + 1104) = 0;
          *(_QWORD *)(v4 + 1120) = 0;
          *(_OWORD *)(v4 + 992) = 0u;
          *(_OWORD *)(v4 + 1008) = 0u;
          *(_OWORD *)(v4 + 1024) = 0u;
          *(_OWORD *)(v4 + 1040) = 0u;
          *(_OWORD *)(v4 + 1056) = 0u;
          *(_WORD *)(v4 + 1448) = 0;
          *(_QWORD *)(v4 + 1480) = 0;
          *(_QWORD *)(v4 + 1496) = 0;
          *(_QWORD *)(v4 + 1488) = 0;
          *(_QWORD *)(v4 + 1984) = *(_QWORD *)(v4 + 1976);
          if (sub_20EAF5B90())
          {
            v276 = sub_210219C18();
            sub_20EAF5CE0((uint64_t)v461, (uint64_t)v276, 0xEEEEB0B5B2B2EEEELL);
          }
          *(_QWORD *)(v4 + 2848) = 0xBFF0000000000000;
          goto LABEL_468;
        }
        v248 = (std::chrono::steady_clock::time_point *)qword_254A5AFF0;
      }
      else
      {
        v248 = (std::chrono::steady_clock::time_point *)qword_254A5AFF0;
        if (!*(_BYTE *)(qword_254A5AFF0 + 8))
          *(_BYTE *)(qword_254A5AFF0 + 8) = 1;
      }
      v248->__d_.__rep_ = v247.__d_.__rep_;
      v264 = sub_210219C18();
      v265 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v265 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
      {
LABEL_458:
        if (os_signpost_enabled((os_log_t)*v264))
        {
          *(_DWORD *)v461 = 134217984;
          *(double *)&v461[4] = v236;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        goto LABEL_460;
      }
      v435 = v114;
      *(_DWORD *)v461 = 134217984;
      *(double *)&v461[4] = v236;
      v267 = (char *)_os_log_send_and_compose_impl();
      v268 = strlen(v267);
      v460.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v460);
      v269 = v460.tv_sec;
      timespec_get(&v460, 1);
      sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v264 + 1), (__int128 *)(v264 + 5), "ThreeDOFTracker: GET 3DOF STATE FAILED DUE TO IMU ISSUE in 3DOF TRACKER at timestamp:%lf ", 0x59uLL, v267, v268, v269, &v460);
      std::mutex::lock(&stru_254A5A410);
      v270 = qword_254A5A458;
      for (mm = unk_254A5A460; v270 != mm; v270 += 40)
      {
        v272 = *(_QWORD *)(v270 + 32);
        if (!v272)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v272 + 48))(v272, v461);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v475 < 0)
      {
        operator delete(__p);
        a3 = v446;
        LOWORD(v114) = v435;
        if ((v473 & 0x80000000) == 0)
        {
LABEL_432:
          if (!v471)
          {
LABEL_451:
            if (BYTE2(v467) && SBYTE1(v467) < 0)
              operator delete(*(void **)v463);
            if (SHIBYTE(v462) < 0)
              operator delete(*(void **)&v461[8]);
            if (v267)
              free(v267);
            goto LABEL_458;
          }
LABEL_449:
          if (v470 < 0)
            operator delete(v469);
          goto LABEL_451;
        }
      }
      else
      {
        a3 = v446;
        LOWORD(v114) = v435;
        if ((v473 & 0x80000000) == 0)
          goto LABEL_432;
      }
      operator delete(v472);
      if (!v471)
        goto LABEL_451;
      goto LABEL_449;
    }
    v207 = v114;
    v208 = *(_QWORD *)(v4 + 4240);
    *(_DWORD *)v461 = 134217984;
    *(_QWORD *)&v461[4] = v208;
    v209 = (char *)_os_log_send_and_compose_impl();
    v210 = strlen(v209);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v211 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v203 + 1), (__int128 *)(v203 + 5), "ThreeDOFTracker: Update AttitudeFilter to initialize with gyro bias saved at timestamp=%lf", 0x5AuLL, v209, v210, v211, v447);
    std::mutex::lock(&stru_254A5A410);
    v212 = qword_254A5A458;
    for (nn = unk_254A5A460; v212 != nn; v212 += 40)
    {
      v214 = *(_QWORD *)(v212 + 32);
      if (!v214)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v214 + 48))(v214, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      LOWORD(v114) = v207;
      v206 = "5program_options14invalid_syntaxE";
      if ((v473 & 0x80000000) == 0)
      {
LABEL_365:
        if (!v471)
        {
LABEL_387:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v209)
            free(v209);
          goto LABEL_394;
        }
LABEL_385:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_387;
      }
    }
    else
    {
      a3 = v446;
      LOWORD(v114) = v207;
      v206 = "N5boost15program_options14invalid_syntaxE" + 8;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_365;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_387;
    goto LABEL_385;
  }
  v156 = *(_QWORD *)(v4 + 2616);
  if (v156)
  {
    v157 = *(void **)(v156 + 80);
    v158 = *(_QWORD *)(v156 + 88) - (_QWORD)v157;
    if (v158 >= 1)
      bzero(v157, 4 * (((unint64_t)v158 >> 2) - ((unint64_t)v158 > 3)) + 4);
    if (*(_BYTE *)(v156 + 112))
      *(_BYTE *)(v156 + 112) = 0;
  }
  *(_QWORD *)(v4 + 512) = *(_QWORD *)(v4 + 744);
  *(_QWORD *)(v4 + 520) = 0xBFF0000000000000;
  *(_DWORD *)(v4 + 576) = 1;
  *(_QWORD *)(v4 + 1256) = 0;
  *(_QWORD *)(v4 + 1272) = 0;
  *(_QWORD *)(v4 + 1264) = 0;
  *(_BYTE *)(v4 + 2192) = 0;
  *(_OWORD *)(v4 + 2248) = 0u;
  *(_OWORD *)(v4 + 2264) = 0u;
  *(_QWORD *)(v4 + 2184) = 0;
  *(_QWORD *)(v4 + 2584) = 0;
  *(_OWORD *)(v4 + 2280) = 0u;
  *(_OWORD *)(v4 + 2296) = 0u;
  *(_OWORD *)(v4 + 2312) = 0u;
  *(_OWORD *)(v4 + 2328) = 0u;
  *(_OWORD *)(v4 + 2344) = 0u;
  *(_OWORD *)(v4 + 2360) = 0u;
  *(_OWORD *)(v4 + 2376) = 0u;
  *(_OWORD *)(v4 + 2392) = 0u;
  *(_OWORD *)(v4 + 2408) = 0u;
  *(_OWORD *)(v4 + 2424) = 0u;
  *(_OWORD *)(v4 + 2440) = 0u;
  *(_OWORD *)(v4 + 2456) = 0u;
  *(_OWORD *)(v4 + 2472) = 0u;
  *(_OWORD *)(v4 + 2488) = 0u;
  *(_OWORD *)(v4 + 2504) = 0u;
  *(_OWORD *)(v4 + 2520) = 0u;
  *(_OWORD *)(v4 + 2536) = 0u;
  *(_OWORD *)(v4 + 2552) = 0u;
  *(_OWORD *)(v4 + 2568) = 0u;
  *(_QWORD *)(v4 + 1112) = 0;
  *(_QWORD *)(v4 + 1104) = 0;
  *(_QWORD *)(v4 + 1120) = 0;
  *(_OWORD *)(v4 + 992) = 0u;
  *(_OWORD *)(v4 + 1008) = 0u;
  *(_OWORD *)(v4 + 1024) = 0u;
  *(_OWORD *)(v4 + 1040) = 0u;
  *(_OWORD *)(v4 + 1056) = 0u;
  *(_WORD *)(v4 + 1448) = 0;
  *(_QWORD *)(v4 + 1480) = 0;
  *(_QWORD *)(v4 + 1496) = 0;
  *(_QWORD *)(v4 + 1488) = 0;
  *(_QWORD *)(v4 + 1984) = *(_QWORD *)(v4 + 1976);
  if (sub_20EAF5B90())
  {
    v159 = sub_210219C18();
    sub_20EAF5CE0((uint64_t)v461, (uint64_t)v159, 0xEEEEB0B5B2B2EEEELL);
  }
  v160 = *v6;
  v161 = (float64x2_t *)((char *)*v6 + 5304);
  v162 = (*v6)[330].f64[0];
  v163 = (*v6)[330].f64[1];
  v164 = (*v6)[329].f64[0];
  v165 = (*v6)[331].f64[0];
  v166 = (*v6)[329].f64[1];
  v167 = (*v6)[332].f64[1];
  v168 = (*v6)[334].f64[0];
  v169 = (*v6)[333];
  v170 = *(float64x2_t *)((char *)*v6 + 5352);
  v171 = (*v6)[335].f64[1];
  v172 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v161, (*v6)[328].f64[1]), (float64x2_t)0, v169), (float64x2_t)0, v170);
  v173 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(*v161, v162), v169, v164), (float64x2_t)0, v170);
  _D1 = v167 * v162 + v168 * v164 + v171 * 0.0;
  _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v161, v163), v169, v165), v170, v166);
  v176 = v167 * v163 + v168 * v165 + v171 * v166;
  v177 = (*v6)[340].f64[0];
  _Q17 = (*v6)[339];
  *(_QWORD *)&v170.f64[0] = *(_OWORD *)&vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v172, (*v6)[336].f64[0]), v173, (*v6)[336], 1), _Q3, (*v6)[337].f64[0]);
  v179 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v172, (*v6)[337].f64[1]), v173, *(float64x2_t *)((char *)*v6 + 5400), 1), _Q3, (*v6)[338].f64[1]);
  __asm { FMLA            D3, D1, V17.D[1] }
  v170.f64[1] = v179.f64[1];
  v183 = (*v6)[2].f64[0];
  *(float64x2_t *)v461 = v170;
  *(double *)&v461[16] = _Q3.f64[0] + v176 * v177;
  v447[0] = 0;
  v447[1] = 0;
  *(_QWORD *)&v448 = 0;
  v458 = 0uLL;
  v459 = 0;
  sub_20F1EDF30(v4 + 512, 1, (uint64_t)&v160[3], (uint64_t)v461, (__int128 *)v447, &v458, v183);
  v184 = (*v6)[2].f64[0];
  v457 = 0;
  v455 = 0u;
  v456 = 0u;
  v453 = 0u;
  v454 = 0u;
  v451 = 0u;
  v452 = 0u;
  v449 = 0u;
  v450 = 0u;
  *(_OWORD *)v447 = 0u;
  v448 = 0u;
  v433 = sub_20EAF08BC(v4, (uint64_t)v447, (uint64_t)&v458, v184, v184, v185, v186, v187);
  v188 = *v6;
  v189 = atan2(-(*v6)[5].f64[1], (*v6)[7].f64[0]);
  v190 = asin(v188[4].f64[0]);
  v191 = atan2(-v188[3].f64[1], v188[3].f64[0]);
  if (v433 == 1)
  {
    v215 = *(_QWORD *)(v4 + 2616);
    if (v215)
      sub_20F21440C(v215);
    *(_QWORD *)(v4 + 512) = *(_QWORD *)(v4 + 744);
    *(_QWORD *)(v4 + 520) = 0xBFF0000000000000;
    *(_DWORD *)(v4 + 576) = 1;
    *(_QWORD *)(v4 + 1264) = 0;
    *(_QWORD *)(v4 + 1272) = 0;
    *(_QWORD *)(v4 + 1256) = 0;
    *(_BYTE *)(v4 + 2192) = 0;
    *(_QWORD *)(v4 + 2184) = 0;
    *(_OWORD *)(v4 + 2248) = 0u;
    *(_OWORD *)(v4 + 2264) = 0u;
    *(_OWORD *)(v4 + 2280) = 0u;
    *(_OWORD *)(v4 + 2296) = 0u;
    *(_OWORD *)(v4 + 2312) = 0u;
    *(_OWORD *)(v4 + 2328) = 0u;
    *(_OWORD *)(v4 + 2344) = 0u;
    *(_OWORD *)(v4 + 2360) = 0u;
    *(_OWORD *)(v4 + 2376) = 0u;
    *(_OWORD *)(v4 + 2392) = 0u;
    *(_OWORD *)(v4 + 2408) = 0u;
    *(_OWORD *)(v4 + 2424) = 0u;
    *(_OWORD *)(v4 + 2440) = 0u;
    *(_OWORD *)(v4 + 2456) = 0u;
    *(_OWORD *)(v4 + 2472) = 0u;
    *(_OWORD *)(v4 + 2488) = 0u;
    *(_OWORD *)(v4 + 2504) = 0u;
    *(_OWORD *)(v4 + 2520) = 0u;
    *(_OWORD *)(v4 + 2536) = 0u;
    *(_OWORD *)(v4 + 2552) = 0u;
    *(_OWORD *)(v4 + 2568) = 0u;
    *(_QWORD *)(v4 + 2584) = 0;
    *(_QWORD *)(v4 + 1104) = 0;
    *(_QWORD *)(v4 + 1112) = 0;
    *(_QWORD *)(v4 + 1120) = 0;
    *(_OWORD *)(v4 + 992) = 0u;
    *(_OWORD *)(v4 + 1008) = 0u;
    *(_OWORD *)(v4 + 1024) = 0u;
    *(_OWORD *)(v4 + 1040) = 0u;
    *(_OWORD *)(v4 + 1056) = 0u;
    *(_WORD *)(v4 + 1448) = 0;
    *(_QWORD *)(v4 + 1488) = 0;
    *(_QWORD *)(v4 + 1496) = 0;
    *(_QWORD *)(v4 + 1480) = 0;
    *(_QWORD *)(v4 + 1984) = *(_QWORD *)(v4 + 1976);
    a3 = v446;
    if (sub_20EAF5B90())
    {
      v216 = sub_210219C18();
      sub_20EAF5CE0((uint64_t)v461, (uint64_t)v216, 0xEEEEB0B5B2B2EEEELL);
    }
    *(_QWORD *)(v4 + 2848) = 0xBFF0000000000000;
    v217 = atomic_load((unsigned __int8 *)&qword_254A5ADC8);
    if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADC8))
    {
      v430 = operator new(0x28uLL);
      v430[1] = 0;
      v430[2] = 0;
      *((_BYTE *)v430 + 24) = 0;
      *v430 = &off_24C9C4340;
      *((_BYTE *)v430 + 32) = 0;
      qword_254A5AF78 = (uint64_t)(v430 + 3);
      unk_254A5AF80 = v430;
      qword_254A5AF88 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AF78, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5ADC8);
      a3 = v446;
    }
    v218 = (_QWORD *)qword_254A5AF78;
    v219 = *(unsigned __int8 *)(qword_254A5AF78 + 8);
    v220.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (v219)
    {
      if (v220.__d_.__rep_ - *v218 < 1000000000)
      {
LABEL_614:
        *(_BYTE *)(v4 + 3176) = 0;
        *(_BYTE *)(v4 + 3184) = 0;
        goto LABEL_615;
      }
      v222 = (std::chrono::steady_clock::time_point *)qword_254A5AF78;
    }
    else
    {
      v222 = (std::chrono::steady_clock::time_point *)qword_254A5AF78;
      if (!*(_BYTE *)(qword_254A5AF78 + 8))
        *(_BYTE *)(qword_254A5AF78 + 8) = 1;
    }
    v222->__d_.__rep_ = v220.__d_.__rep_;
    v367 = sub_210219C18();
    v368 = v189 * 57.2957795;
    v369 = v190 * 57.2957795;
    v370 = v191 * 57.2957795;
    v371 = sub_21021A1E0();
    if (!atomic_load((unint64_t *)&v371[1]))
    {
LABEL_612:
      a3 = v446;
      if (os_signpost_enabled((os_log_t)*v367))
      {
        v387 = v188[12].f64[0];
        v388 = v188[12].f64[1];
        v389 = v188[13].f64[0];
        *(_DWORD *)v461 = 134219520;
        *(double *)&v461[4] = v368;
        *(_WORD *)&v461[12] = 2048;
        *(double *)&v461[14] = v369;
        *(_WORD *)&v461[22] = 2048;
        v462 = v370;
        *(_WORD *)v463 = 2048;
        *(float64_t *)&v463[2] = v387;
        v464 = 2048;
        v465 = v388;
        v466 = 2048;
        v467 = v389;
        v468 = 2048;
        v469 = *(void **)&v184;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_614;
    }
    v373 = (uint64_t)v371;
    v374 = v188[12].f64[0];
    v375 = v188[12].f64[1];
    v376 = v188[13].f64[0];
    *(_DWORD *)v461 = 134219520;
    *(double *)&v461[4] = v368;
    *(_WORD *)&v461[12] = 2048;
    *(double *)&v461[14] = v369;
    *(_WORD *)&v461[22] = 2048;
    v462 = v370;
    *(_WORD *)v463 = 2048;
    *(float64_t *)&v463[2] = v374;
    v464 = 2048;
    v465 = v375;
    v466 = 2048;
    v467 = v376;
    v468 = 2048;
    v469 = *(void **)&v184;
    v377 = (void *)_os_log_send_and_compose_impl();
    v460.tv_sec = (__darwin_time_t)v377;
    sub_21021A118(v461, (uint64_t)v367, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "ThreeDOFTracker: FAIL update 3DOF State with 6DOF State (RollPitchYaw/pos) %lf %lf %lf %lf %lf %lf at timestamp:%lf ", 0x74uLL, (const char **)&v460);
    sub_21021A2DC(v373, (uint64_t)v461);
    if (v475 < 0)
    {
      operator delete(__p);
      if ((v473 & 0x80000000) == 0)
      {
LABEL_579:
        if (!v471)
        {
LABEL_605:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v377)
            free(v377);
          goto LABEL_612;
        }
LABEL_603:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_605;
      }
    }
    else if ((v473 & 0x80000000) == 0)
    {
      goto LABEL_579;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_605;
    goto LABEL_603;
  }
  if (v433 == 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/3DOFTracker.cpp", 375, (uint64_t)"return_status != EResultGet3DOFStateAtTime::ThreeDOFNotInit", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v192 = atomic_load((unsigned __int8 *)&qword_254A5ADD0);
  if ((v192 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADD0))
  {
    v428 = operator new(0x28uLL);
    v428[1] = 0;
    v428[2] = 0;
    *((_BYTE *)v428 + 24) = 0;
    *v428 = &off_24C9C4340;
    *((_BYTE *)v428 + 32) = 0;
    qword_254A5AF90 = (uint64_t)(v428 + 3);
    unk_254A5AF98 = v428;
    qword_254A5AFA0 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AF90, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5ADD0);
    a3 = v446;
  }
  v193 = (_QWORD *)qword_254A5AF90;
  v194 = *(unsigned __int8 *)(qword_254A5AF90 + 8);
  v195.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v194)
  {
    v196 = (std::chrono::steady_clock::time_point *)qword_254A5AF90;
    if (!*(_BYTE *)(qword_254A5AF90 + 8))
      *(_BYTE *)(qword_254A5AF90 + 8) = 1;
LABEL_377:
    v196->__d_.__rep_ = v195.__d_.__rep_;
    v223 = sub_210219C18();
    v224 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v224 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v225 = v189 * 57.2957795;
    v226 = v190 * 57.2957795;
    v227 = v191 * 57.2957795;
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_592;
    v229 = v188[12].f64[0];
    v230 = v188[12].f64[1];
    v231 = v188[13].f64[0];
    *(_DWORD *)v461 = 134219520;
    *(double *)&v461[4] = v225;
    *(_WORD *)&v461[12] = 2048;
    *(double *)&v461[14] = v226;
    *(_WORD *)&v461[22] = 2048;
    v462 = v227;
    *(_WORD *)v463 = 2048;
    *(float64_t *)&v463[2] = v229;
    v464 = 2048;
    v465 = v230;
    v466 = 2048;
    v467 = v231;
    v468 = 2048;
    v469 = *(void **)&v184;
    v232 = (void *)_os_log_send_and_compose_impl();
    v460.tv_sec = (__darwin_time_t)v232;
    sub_21021A118(v461, (uint64_t)v223, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "ThreeDOFTracker: SUCCESS update 3DOF State with 6DOF State (RollPitchYaw/pos) %lf %lf %lf %lf %lf %lf at timestamp:%lf ", 0x77uLL, (const char **)&v460);
    sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)v461);
    if (v475 < 0)
    {
      operator delete(__p);
      if ((v473 & 0x80000000) == 0)
      {
LABEL_381:
        if (!v471)
        {
LABEL_585:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v232)
            free(v232);
LABEL_592:
          if (os_signpost_enabled((os_log_t)*v223))
          {
            v378 = v188[12].f64[0];
            v379 = v188[12].f64[1];
            v380 = v188[13].f64[0];
            *(_DWORD *)v461 = 134219520;
            *(double *)&v461[4] = v225;
            *(_WORD *)&v461[12] = 2048;
            *(double *)&v461[14] = v226;
            *(_WORD *)&v461[22] = 2048;
            v462 = v227;
            *(_WORD *)v463 = 2048;
            *(float64_t *)&v463[2] = v378;
            v464 = 2048;
            v465 = v379;
            v466 = 2048;
            v467 = v380;
            v468 = 2048;
            v469 = *(void **)&v184;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_594;
        }
LABEL_583:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_585;
      }
    }
    else if ((v473 & 0x80000000) == 0)
    {
      goto LABEL_381;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_585;
    goto LABEL_583;
  }
  if (v195.__d_.__rep_ - *v193 >= 1000000000)
  {
    v196 = (std::chrono::steady_clock::time_point *)qword_254A5AF90;
    goto LABEL_377;
  }
LABEL_594:
  *(double *)(v4 + 2848) = v184;
  *(double *)(v4 + 3048) = v184;
  *(_QWORD *)(v4 + 3016) = v457;
  v381 = v456;
  *(_OWORD *)(v4 + 2984) = v455;
  *(_OWORD *)(v4 + 3000) = v381;
  v382 = v452;
  *(_OWORD *)(v4 + 2920) = v451;
  *(_OWORD *)(v4 + 2936) = v382;
  v383 = v454;
  *(_OWORD *)(v4 + 2952) = v453;
  *(_OWORD *)(v4 + 2968) = v383;
  v384 = v448;
  *(_OWORD *)(v4 + 2856) = *(_OWORD *)v447;
  *(_OWORD *)(v4 + 2872) = v384;
  v385 = v450;
  *(_OWORD *)(v4 + 2888) = v449;
  *(_OWORD *)(v4 + 2904) = v385;
  *(_OWORD *)(v4 + 3024) = v458;
  *(_QWORD *)(v4 + 3040) = v459;
  if (!*(_BYTE *)(v4 + 3184))
  {
    *(double *)(v4 + 3176) = v184;
    *(_BYTE *)(v4 + 3184) = 1;
  }
  *(_QWORD *)(v4 + 4184) = *(_QWORD *)(v4 + 1832);
  *(_OWORD *)(v4 + 4168) = *(_OWORD *)(v4 + 1816);
  *(_QWORD *)(v4 + 4208) = *(_QWORD *)(v4 + 1896);
  *(_OWORD *)(v4 + 4192) = *(_OWORD *)(v4 + 1880);
  *(_QWORD *)(v4 + 4232) = *(_QWORD *)(v4 + 1864);
  v221 = *(float64x2_t *)(v4 + 1848);
  *(float64x2_t *)(v4 + 4216) = v221;
  *(double *)(v4 + 4240) = v184;
  *(_BYTE *)(v444 + 1120) = 1;
  v386 = *(double *)(v4 + 2000);
  if (*(_DWORD *)(v4 + 576)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/3DOFTracker.cpp", 416, (uint64_t)"status == attitude_filter::FilterStatus::Initialized", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (v386 != (*v6)[2].f64[0]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/src/3DOFTracker.cpp", 418, (uint64_t)"ExactlyEqual(state.first, pose_metadata->odometry_metadata.latest_state_timestamp)", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_615:
  v390 = *v6;
  v221.f64[0] = *(float64_t *)(v444 + 16);
  _Q1 = *(float64x2_t *)v444;
  _D4 = (*v6)[5].f64[1];
  v393 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((*v6)[3], *(double *)v444), *(float64x2_t *)((char *)*v6 + 72), *(float64x2_t *)v444, 1), (*v6)[6], v221.f64[0]);
  __asm { FMLA            D2, D4, V1.D[1] }
  v221.f64[0] = _D2 + (*v6)[7].f64[0] * v221.f64[0];
  *(float64_t *)(v444 + 40) = v221.f64[0];
  *(float64x2_t *)(v444 + 24) = v393;
  _Q1.f64[0] = v390[13].f64[0];
  *(float64x2_t *)(v444 + 24) = vaddq_f64(v393, v390[12]);
  *(_QWORD *)(v444 + 40) = *(_OWORD *)&vaddq_f64(v221, _Q1);
  LOBYTE(v390) = atomic_load((unsigned __int8 *)&qword_254A5ADD8);
  if ((v390 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADD8))
  {
    v427 = operator new(0x28uLL);
    v427[1] = 0;
    v427[2] = 0;
    *((_BYTE *)v427 + 24) = 0;
    *v427 = &off_24C9C4340;
    *((_BYTE *)v427 + 32) = 0;
    qword_254A5AFA8 = (uint64_t)(v427 + 3);
    unk_254A5AFB0 = v427;
    qword_254A5AFB8 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5AFA8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5ADD8);
    a3 = v446;
  }
  v395 = (_QWORD *)qword_254A5AFA8;
  v396 = *(unsigned __int8 *)(qword_254A5AFA8 + 8);
  v397.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v398 = v433;
  if (!v396)
  {
    v399 = (std::chrono::steady_clock::time_point *)qword_254A5AFA8;
    if (!*(_BYTE *)(qword_254A5AFA8 + 8))
      *(_BYTE *)(qword_254A5AFA8 + 8) = 1;
LABEL_621:
    v399->__d_.__rep_ = v397.__d_.__rep_;
    v400 = sub_210219C18();
    v401 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v401 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v402 = atomic_load(&qword_254A5A450);
    v403 = "K4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0";
    if (!v402)
      goto LABEL_641;
    v404 = v114;
    v405 = *(_QWORD *)(v4 + 3152);
    v406 = *(_QWORD *)(v4 + 3160);
    v407 = *(double *)(v4 + 3168);
    *(_DWORD *)v461 = 134218752;
    *(_QWORD *)&v461[4] = v405;
    *(_WORD *)&v461[12] = 2048;
    *(_QWORD *)&v461[14] = v406;
    *(_WORD *)&v461[22] = 2048;
    v462 = v407;
    *(_WORD *)v463 = 2048;
    *(double *)&v463[2] = v184;
    v408 = (char *)_os_log_send_and_compose_impl();
    v409 = strlen(v408);
    v460.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v460);
    v410 = v460.tv_sec;
    timespec_get(&v460, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v400 + 1), (__int128 *)(v400 + 5), "ThreeDOFTracker: Calculate 3DOF neck position %lf %lf %lf at timestamp:%lf ", 0x4BuLL, v408, v409, v410, &v460);
    std::mutex::lock(&stru_254A5A410);
    v411 = qword_254A5A458;
    for (i1 = unk_254A5A460; v411 != i1; v411 += 40)
    {
      v413 = *(_QWORD *)(v411 + 32);
      if (!v413)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v413 + 48))(v413, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      LOWORD(v114) = v404;
      v403 = "K4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0";
      if ((v473 & 0x80000000) == 0)
      {
LABEL_628:
        if (!v471)
        {
LABEL_634:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v408)
            free(v408);
LABEL_641:
          v414 = os_signpost_enabled((os_log_t)*v400);
          v398 = v433;
          if (v414)
          {
            v415 = *(_QWORD *)(v4 + 3152);
            v416 = *(_QWORD *)(v4 + 3160);
            v417 = *(double *)(v4 + 3168);
            *(_DWORD *)v461 = *((_QWORD *)v403 + 312);
            *(_QWORD *)&v461[4] = v415;
            *(_WORD *)&v461[12] = 2048;
            *(_QWORD *)&v461[14] = v416;
            *(_WORD *)&v461[22] = 2048;
            v462 = v417;
            *(_WORD *)v463 = 2048;
            *(double *)&v463[2] = v184;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_643;
        }
LABEL_632:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_634;
      }
    }
    else
    {
      a3 = v446;
      LOWORD(v114) = v404;
      v403 = "ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0" + 2;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_628;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_634;
    goto LABEL_632;
  }
  if (v397.__d_.__rep_ - *v395 >= 1000000000)
  {
    v399 = (std::chrono::steady_clock::time_point *)qword_254A5AFA8;
    goto LABEL_621;
  }
LABEL_643:
  v277 = *v6;
  v278 = v398 | 0x100;
LABEL_470:
  LOWORD(v277[22].f64[1]) = v278;
  v279 = *v6;
  LOBYTE(v279[13].f64[1]) = v440;
  v280 = *(double *)(v4 + 3176);
  LOBYTE(v279[22].f64[0]) = *(_BYTE *)(v4 + 3184);
  v279[21].f64[1] = v280;
  v281 = *v6;
  v281[14].f64[0] = *(float64_t *)(v4 + 3152);
  v281[14].f64[1] = *(float64_t *)(v4 + 3160);
  v281[15].f64[0] = *(float64_t *)(v4 + 3168);
  v281[15].f64[1] = *(float64_t *)(v4 + 3056);
  v281[16].f64[0] = *(float64_t *)(v4 + 3064);
  v281[16].f64[1] = *(float64_t *)(v4 + 3072);
  v281[17].f64[0] = *(float64_t *)(v4 + 3080);
  v281[17].f64[1] = *(float64_t *)(v4 + 3088);
  v281[18].f64[0] = *(float64_t *)(v4 + 3096);
  v281[18].f64[1] = *(float64_t *)(v4 + 3104);
  v281[19].f64[0] = *(float64_t *)(v4 + 3112);
  v281[19].f64[1] = *(float64_t *)(v4 + 3120);
  v281[20].f64[0] = *(float64_t *)(v4 + 3128);
  v281[20].f64[1] = *(float64_t *)(v4 + 3136);
  v281[21].f64[0] = *(float64_t *)(v4 + 3144);
  BYTE2(v281[22].f64[1]) = *(_BYTE *)(v4 + 3192);
  if (v440)
  {
    v282 = *(float64x2_t *)(v4 + 2856);
    v283 = *(float64x2_t *)(v4 + 2888);
    v281[4] = *(float64x2_t *)(v4 + 2872);
    v281[5] = v283;
    v281[3] = v282;
    v284 = *(float64x2_t *)(v4 + 2904);
    v285 = *(float64x2_t *)(v4 + 2920);
    v286 = *(float64x2_t *)(v4 + 2952);
    v281[8] = *(float64x2_t *)(v4 + 2936);
    v281[9] = v286;
    v281[6] = v284;
    v281[7] = v285;
    v287 = *(float64x2_t *)(v4 + 2968);
    v288 = *(float64x2_t *)(v4 + 2984);
    _Q2 = *(float64x2_t *)(v4 + 3000);
    v281[13].f64[0] = *(float64_t *)(v4 + 3016);
    v281[11] = v288;
    v281[12] = _Q2;
    v281[10] = v287;
    v290 = *v6;
    v291 = *(double *)(v4 + 3040);
    v292 = *(float64x2_t *)(v4 + 3024);
    *(float64x2_t *)((char *)v290 + 5256) = v292;
    v290[329].f64[1] = v291;
    v293 = *v6;
    v292.f64[0] = *(float64_t *)(v444 + 16);
    _Q1 = *(float64x2_t *)v444;
    _D4 = (*v6)[5].f64[1];
    v296 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((*v6)[3], *(double *)v444), *(float64x2_t *)((char *)*v6 + 72), *(float64x2_t *)v444, 1), (*v6)[6], v292.f64[0]);
    __asm { FMLA            D2, D4, V1.D[1] }
    v292.f64[0] = _Q2.f64[0] + (*v6)[7].f64[0] * v292.f64[0];
    v293[13].f64[0] = v292.f64[0];
    v293[12] = v296;
    _Q1.f64[0] = *(float64_t *)(v444 + 40);
    v293[12] = vsubq_f64(*(float64x2_t *)(v444 + 24), v296);
    *(_QWORD *)&v293[13].f64[0] = *(_OWORD *)&vsubq_f64(_Q1, v292);
    v281 = *v6;
  }
  v445 = v281[2].f64[0];
  v443 = atan2(-v442, v12);
  v441 = asin(v11);
  v436 = atan2(-v10, v9);
  v297 = atan2(-v281[5].f64[1], v281[7].f64[0]);
  v298 = asin(v281[4].f64[0]);
  v299 = atan2(-v281[3].f64[1], v281[3].f64[0]);
  v300 = atomic_load((unsigned __int8 *)&qword_254A5ADF8);
  if ((v300 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ADF8))
  {
    v419 = operator new(0x28uLL);
    v419[1] = 0;
    v419[2] = 0;
    *((_BYTE *)v419 + 24) = 0;
    *v419 = &off_24C9C4340;
    *((_BYTE *)v419 + 32) = 0;
    qword_254A5B008 = (uint64_t)(v419 + 3);
    qword_254A5B010 = (uint64_t)v419;
    qword_254A5B018 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B008, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5ADF8);
    a3 = v446;
  }
  v301 = (_QWORD *)qword_254A5B008;
  v302 = *(unsigned __int8 *)(qword_254A5B008 + 8);
  v303.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v302)
  {
    if (v303.__d_.__rep_ - *v301 < 1000000000)
      goto LABEL_500;
    v304 = (std::chrono::steady_clock::time_point *)qword_254A5B008;
  }
  else
  {
    v304 = (std::chrono::steady_clock::time_point *)qword_254A5B008;
    if (!*(_BYTE *)(qword_254A5B008 + 8))
      *(_BYTE *)(qword_254A5B008 + 8) = 1;
  }
  v304->__d_.__rep_ = v303.__d_.__rep_;
  v305 = sub_210219C18();
  v306 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v306 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v308 = v114;
    v309 = v281[12].f64[0];
    v310 = v281[12].f64[1];
    v311 = v281[13].f64[0];
    *(_DWORD *)v461 = 134219520;
    *(double *)&v461[4] = v297 * 57.2957795;
    *(_WORD *)&v461[12] = 2048;
    *(double *)&v461[14] = v298 * 57.2957795;
    *(_WORD *)&v461[22] = 2048;
    v462 = v299 * 57.2957795;
    *(_WORD *)v463 = 2048;
    *(float64_t *)&v463[2] = v309;
    v464 = 2048;
    v465 = v310;
    v466 = 2048;
    v467 = v311;
    v468 = 2048;
    v469 = *(void **)&v445;
    v312 = (char *)_os_log_send_and_compose_impl();
    v313 = strlen(v312);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v314 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v305 + 1), (__int128 *)(v305 + 5), "ThreeDOFTracker: RETURNED State (RollPitchYaw/pos) %lf %lf %lf %lf %lf %lf at timestamp:%lf", 0x5BuLL, v312, v313, v314, v447);
    std::mutex::lock(&stru_254A5A410);
    v315 = qword_254A5A458;
    for (i2 = unk_254A5A460; v315 != i2; v315 += 40)
    {
      v317 = *(_QWORD *)(v315 + 32);
      if (!v317)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v317 + 48))(v317, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      LOWORD(v114) = v308;
      if ((v473 & 0x80000000) == 0)
      {
LABEL_485:
        if (!v471)
        {
LABEL_491:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v312)
            free(v312);
          goto LABEL_498;
        }
LABEL_489:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_491;
      }
    }
    else
    {
      a3 = v446;
      LOWORD(v114) = v308;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_485;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_491;
    goto LABEL_489;
  }
LABEL_498:
  if (os_signpost_enabled((os_log_t)*v305))
  {
    v318 = v281[12].f64[0];
    v319 = v281[12].f64[1];
    v320 = v281[13].f64[0];
    *(_DWORD *)v461 = 134219520;
    *(double *)&v461[4] = v297 * 57.2957795;
    *(_WORD *)&v461[12] = 2048;
    *(double *)&v461[14] = v298 * 57.2957795;
    *(_WORD *)&v461[22] = 2048;
    v462 = v299 * 57.2957795;
    *(_WORD *)v463 = 2048;
    *(float64_t *)&v463[2] = v318;
    v464 = 2048;
    v465 = v319;
    v466 = 2048;
    v467 = v320;
    v468 = 2048;
    v469 = *(void **)&v445;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_500:
  v321 = v281[12].f64[0];
  v322 = v281[12].f64[1];
  v323 = v281[13].f64[0];
  v324 = atomic_load((unsigned __int8 *)&qword_254A5AE00);
  if ((v324 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE00))
  {
    v420 = operator new(0x28uLL);
    v420[1] = 0;
    v420[2] = 0;
    *((_BYTE *)v420 + 24) = 0;
    *v420 = &off_24C9C4340;
    *((_BYTE *)v420 + 32) = 0;
    qword_254A5B020 = (uint64_t)(v420 + 3);
    qword_254A5B028 = (uint64_t)v420;
    qword_254A5B030 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B020, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE00);
    a3 = v446;
  }
  v325 = (_QWORD *)qword_254A5B020;
  v326 = *(unsigned __int8 *)(qword_254A5B020 + 8);
  v327.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v326)
  {
    if (v327.__d_.__rep_ - *v325 < 1000000000)
      goto LABEL_528;
    v328 = (std::chrono::steady_clock::time_point *)qword_254A5B020;
  }
  else
  {
    v328 = (std::chrono::steady_clock::time_point *)qword_254A5B020;
    if (!*(_BYTE *)(qword_254A5B020 + 8))
      *(_BYTE *)(qword_254A5B020 + 8) = 1;
  }
  v328->__d_.__rep_ = v327.__d_.__rep_;
  v329 = sub_210219C18();
  v330 = v297 - v443;
  v331 = v298 - v441;
  v332 = v299 - v436;
  v333 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v333 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v334 = v323 - v437;
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)v461 = 134219520;
    *(double *)&v461[4] = v330 * 57.2957795;
    *(_WORD *)&v461[12] = 2048;
    *(double *)&v461[14] = v331 * 57.2957795;
    *(_WORD *)&v461[22] = 2048;
    v462 = v332 * 57.2957795;
    *(_WORD *)v463 = 2048;
    *(double *)&v463[2] = v321 - v439;
    v464 = 2048;
    v465 = v322 - v438;
    v466 = 2048;
    v467 = v334;
    v468 = 2048;
    v469 = *(void **)&v445;
    v336 = (char *)_os_log_send_and_compose_impl();
    v337 = strlen(v336);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v338 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v329 + 1), (__int128 *)(v329 + 5), "ThreeDOFTracker: 3DOF RollPitchYaw/pos - 6DOF RollPitchYaw/pos %lf %lf %lf %lf %lf %lf at timestamp:%lf ", 0x68uLL, v336, v337, v338, v447);
    std::mutex::lock(&stru_254A5A410);
    v339 = qword_254A5A458;
    for (i3 = unk_254A5A460; v339 != i3; v339 += 40)
    {
      v341 = *(_QWORD *)(v339 + 32);
      if (!v341)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v341 + 48))(v341, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
      {
LABEL_513:
        if (!v471)
        {
LABEL_519:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v336)
            free(v336);
          goto LABEL_526;
        }
LABEL_517:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_519;
      }
    }
    else
    {
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_513;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_519;
    goto LABEL_517;
  }
LABEL_526:
  if (os_signpost_enabled((os_log_t)*v329))
  {
    *(_DWORD *)v461 = 134219520;
    *(double *)&v461[4] = v330 * 57.2957795;
    *(_WORD *)&v461[12] = 2048;
    *(double *)&v461[14] = v331 * 57.2957795;
    *(_WORD *)&v461[22] = 2048;
    v462 = v332 * 57.2957795;
    *(_WORD *)v463 = 2048;
    *(double *)&v463[2] = v321 - v439;
    v464 = 2048;
    v465 = v322 - v438;
    v466 = 2048;
    v467 = v334;
    v468 = 2048;
    v469 = *(void **)&v445;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_528:
  v342 = -1.0;
  v343 = -1.0;
  if (*(_QWORD *)(v4 + 2744))
  {
    v344 = *(_QWORD *)(v4 + 2736);
    v345 = *(_QWORD *)(v4 + 2704);
    if (!v344)
      v344 = (*(_QWORD *)(v4 + 2712) - v345) >> 5;
    v343 = *(double *)(v345 + 32 * v344 - 32);
  }
  if (*(_QWORD *)(v4 + 2792))
  {
    v346 = *(_QWORD *)(v4 + 2784);
    v347 = *(_QWORD *)(v4 + 2752);
    if (!v346)
      v346 = (*(_QWORD *)(v4 + 2760) - v347) >> 5;
    v342 = *(double *)(v347 + 32 * v346 - 32);
  }
  if (*(_QWORD *)(v4 + 2840))
  {
    v348 = *(_QWORD *)(v4 + 2832);
    v349 = *(_QWORD *)(v4 + 2800);
    if (!v348)
      v348 = (*(_QWORD *)(v4 + 2808) - v349) >> 5;
    v350 = *(double *)(v349 + 32 * v348 - 32);
  }
  else
  {
    v350 = -1.0;
  }
  v351 = atomic_load((unsigned __int8 *)&qword_254A5AE08);
  if ((v351 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AE08))
  {
    v421 = operator new(0x28uLL);
    v421[1] = 0;
    v421[2] = 0;
    *((_BYTE *)v421 + 24) = 0;
    *v421 = &off_24C9C4340;
    *((_BYTE *)v421 + 32) = 0;
    qword_254A5B038 = (uint64_t)(v421 + 3);
    qword_254A5B040 = (uint64_t)v421;
    qword_254A5B048 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5B038, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AE08);
    a3 = v446;
  }
  v352 = (_QWORD *)qword_254A5B038;
  v353 = *(unsigned __int8 *)(qword_254A5B038 + 8);
  result = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v353)
  {
    v354 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5B038;
    if (!*(_BYTE *)(qword_254A5B038 + 8))
      *(_BYTE *)(qword_254A5B038 + 8) = 1;
LABEL_548:
    *v354 = result;
    v355 = sub_210219C18();
    v356 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v356 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_568;
    *(_DWORD *)v461 = 134218752;
    *(double *)&v461[4] = v343;
    *(_WORD *)&v461[12] = 2048;
    *(double *)&v461[14] = v342;
    *(_WORD *)&v461[22] = 2048;
    v462 = v350;
    *(_WORD *)v463 = 2048;
    *(float64_t *)&v463[2] = v445;
    v358 = (char *)_os_log_send_and_compose_impl();
    v359 = strlen(v358);
    v447[0] = 0;
    pthread_threadid_np(0, v447);
    v360 = v447[0];
    timespec_get((timespec *)v447, 1);
    sub_210219E20(v461, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v355 + 1), (__int128 *)(v355 + 5), "ThreeDOFTracker: Latest Gyro timestamp=%lf/Latest Accel timestamp=%lf/Latest Mag timestamp=%lf, state timestamp = %lf", 0x75uLL, v358, v359, v360, v447);
    std::mutex::lock(&stru_254A5A410);
    v361 = qword_254A5A458;
    for (i4 = unk_254A5A460; v361 != i4; v361 += 40)
    {
      v363 = *(_QWORD *)(v361 + 32);
      if (!v363)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v363 + 48))(v363, v461);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v475 < 0)
    {
      operator delete(__p);
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
      {
LABEL_555:
        if (!v471)
        {
LABEL_561:
          if (BYTE2(v467) && SBYTE1(v467) < 0)
            operator delete(*(void **)v463);
          if (SHIBYTE(v462) < 0)
            operator delete(*(void **)&v461[8]);
          if (v358)
            free(v358);
LABEL_568:
          result = os_signpost_enabled((os_log_t)*v355);
          if ((_DWORD)result)
          {
            *(_DWORD *)v461 = 134218752;
            *(double *)&v461[4] = v343;
            *(_WORD *)&v461[12] = 2048;
            *(double *)&v461[14] = v342;
            *(_WORD *)&v461[22] = 2048;
            v462 = v350;
            *(_WORD *)v463 = 2048;
            *(float64_t *)&v463[2] = v445;
            result = _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_570;
        }
LABEL_559:
        if (v470 < 0)
          operator delete(v469);
        goto LABEL_561;
      }
    }
    else
    {
      a3 = v446;
      if ((v473 & 0x80000000) == 0)
        goto LABEL_555;
    }
    operator delete(v472);
    if (!v471)
      goto LABEL_561;
    goto LABEL_559;
  }
  if (result - *v352 >= 1000000000)
  {
    v354 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A5B038;
    goto LABEL_548;
  }
LABEL_570:
  v364 = a2[1];
  *(_QWORD *)a3 = *a2;
  *(_QWORD *)(a3 + 8) = v364;
  if (v364)
  {
    v365 = (unint64_t *)(v364 + 1);
    do
      v366 = __ldxr(v365);
    while (__stxr(v366 + 1, v365));
  }
  *(_WORD *)(a3 + 16) = v114;
  return result;
}

