void sub_20F2DAD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a68;
  void *__p;
  uint64_t a71;
  uint64_t v71;

  if (*(_BYTE *)(v71 - 232) && *(char *)(v71 - 233) < 0)
    operator delete(*(void **)(v71 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a44);
  sub_20E9BCAA8((_QWORD *)a65);
  sub_20E9BCAA8((_QWORD *)a68);
  if (__p)
  {
    a71 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20E9BCAA8((_QWORD *)STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_20F2DB2A8(uint64_t a1@<X0>, double *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X7>, uint64_t *a9@<X8>, char a10, uint64_t a11)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v15;
  _QWORD *v17;
  double v18;
  unint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  float64x2_t v45;
  float64x2_t v47;
  float64x2_t v48;
  int8x16_t v54;
  float64x2_t v56;
  int8x16_t v57;
  float64x2_t v58;
  int8x16_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  int8x16_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float64x2_t v86;
  float64x2_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double v100;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  double v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int64x2_t v135;
  int64x2_t v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  uint64_t *v144;
  uint64_t v145;
  double v146;
  uint64_t *v147;
  double v151;
  float64x2_t v152;
  double v153;
  float64x2_t v154;
  double v155;
  float64x2_t v156;
  double v157;
  float64x2_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v11 = a7;
  v12 = (uint64_t *)a6;
  v15 = a1;
  v179 = *MEMORY[0x24BDAC8D0];
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v17 = a7 + 72;
  v18 = *(double *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 128))
    sub_20F2DBAC4(a6, v17, v19, &v172, &v169, v18);
  else
    sub_20EDCA350(a6, v17, v19, 0, &v172, &v169, v18);
  v24.f64[0] = *(float64_t *)(a4 + 16);
  v20 = *(int64x2_t *)a4;
  v21 = *(int64x2_t *)(a4 + 24);
  v22 = *(double *)(a4 + 64);
  v23 = *(float64x2_t *)(a4 + 48);
  v24.f64[1] = *(float64_t *)(a4 + 40);
  v25 = *(double *)(a4 + 88);
  v26 = *(float64x2_t *)(a4 + 72);
  v28 = *a3;
  v27 = a3[1];
  v29 = *(__int128 *)((char *)a3 + 8);
  v30 = *(__int128 *)((char *)a3 + 24);
  v32 = a3[2];
  v31 = a3[3];
  v33 = *(__int128 *)((char *)a3 + 40);
  v34 = *(__int128 *)((char *)a3 + 56);
  v36 = a3[4];
  v35 = a3[5];
  v37 = *(__int128 *)((char *)a3 + 72);
  v38 = *((double *)a3 + 11);
  v40 = v172;
  v39 = v173;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v41 = v39 - v40;
  if (v39 != v40)
  {
    v135 = v21;
    v136 = v20;
    v137 = v26;
    v138 = v25;
    v139 = v23;
    v140 = v22;
    v141 = *(double *)&v28;
    v142 = *(double *)&v29;
    v143 = *(double *)&v27;
    v146 = *(double *)&v30;
    v151 = *(double *)&v32;
    v153 = *(double *)&v33;
    v155 = *(double *)&v31;
    v157 = *(double *)&v34;
    v159 = *(double *)&v36;
    v161 = *(double *)&v37;
    v163 = *(double *)&v35;
    v165 = v38;
    v167 = v24;
    v144 = a9;
    if ((unint64_t)v41 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20E867F44();
    v42 = (char *)operator new(4 * v41);
    v43 = 0;
    v44 = 0;
    v45 = (float64x2_t)vzip1q_s64(v136, v135);
    _V6.D[1] = v139.f64[1];
    v47 = (float64x2_t)vzip2q_s64(v136, v135);
    v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v137.f64[0]), v47, v137, 1), v167, v138);
    _Q4 = vmulq_f64(v139, v137);
    _D5 = v137.f64[1];
    __asm { FMLA            D4, D5, V6.D[1] }
    _Q4.f64[0] = _Q4.f64[0] + v140 * v138;
    v54 = vextq_s8((int8x16_t)v47, (int8x16_t)vdupq_laneq_s64((int64x2_t)v139, 1), 8uLL);
    *(_QWORD *)&v47.f64[1] = v54.i64[0];
    __asm { FMOV            V16.2D, #1.0 }
    *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vnegq_f64(_Q4);
    v56 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v141), v47, v142), v167, v143), (float64x2_t)0, v48);
    v57 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v139.f64[0], v141), (float64x2_t)v54.u64[1], v142), (float64x2_t)*(unint64_t *)&v140, v143), (float64x2_t)0, _Q16);
    v58 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v146), v47, v151), v167, v153), (float64x2_t)0, v48);
    v59 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v139.f64[0], v146), (float64x2_t)v54.u64[1], v151), (float64x2_t)*(unint64_t *)&v140, v153), (float64x2_t)0, _Q16);
    v60 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v155), v47, v157), v167, v159), (float64x2_t)0, v48);
    v61 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v139.f64[0], v155), (float64x2_t)v54.u64[1], v157), (float64x2_t)*(unint64_t *)&v140, v159), (float64x2_t)0, _Q16);
    v62 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v161), v47, v163), v167, v165), v48);
    v63 = (int8x16_t)vaddq_f64(_Q16, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v139.f64[0], v161), (float64x2_t)v54.u64[1], v163), (float64x2_t)*(unint64_t *)&v140, v165));
    v64 = (float64x2_t)vextq_s8((int8x16_t)v62, v63, 8uLL);
    v65 = (float64x2_t)vzip1q_s64((int64x2_t)v57, (int64x2_t)v56);
    v66 = (float64x2_t)vextq_s8((int8x16_t)v56, v59, 8uLL);
    v67 = (float64x2_t)vextq_s8((int8x16_t)v56, v57, 8uLL);
    v56.f64[1] = v58.f64[1];
    v68 = (float64x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v61, 8uLL);
    v61.f64[1] = v60.f64[0];
    v69 = (float64x2_t)vzip1q_s64((int64x2_t)v63, (int64x2_t)v62);
    v70 = (float64x2_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v58);
    v71 = vmulq_f64(v66, v62);
    v72 = vmulq_f64(v58, v69);
    v73 = vmlsq_f64(vmulq_f64(v65, v64), v67, v69);
    v74 = vmlsq_f64(vmulq_f64(v61, v64), v68, v69);
    v75 = vmlsq_laneq_f64(vmulq_laneq_f64(v62, v60, 1), v60, v62, 1);
    v76 = vmlsq_f64(v72, v70, v62);
    v77 = vmlsq_f64(v71, v56, v64);
    v78 = (float64x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v76, 8uLL);
    v79 = vmulq_f64(v75, v75);
    v80 = vmulq_f64(v74, v74);
    v81 = vmulq_f64(v76, v76);
    v82 = vmulq_f64(v77, v77);
    v79.f64[0] = 1.0
               / sqrt(v79.f64[0]+ v80.f64[1]+ v80.f64[0]+ v81.f64[1]+ v81.f64[0]+ v82.f64[1]+ v82.f64[0]+ vaddvq_f64(vmulq_f64(v73, v73)));
    *(_QWORD *)&v168 = *(_OWORD *)&vmulq_f64(v77, v79);
    v83 = (int8x16_t)vmulq_n_f64(v73, v79.f64[0]);
    v84 = (int8x16_t)vmulq_n_f64(v78, v79.f64[0]);
    *(_QWORD *)&v162 = *(_OWORD *)&vmulq_laneq_f64(v79, v76, 1);
    *(_QWORD *)&v160 = *(_OWORD *)&vmulq_f64(v75, v79);
    v85 = (int8x16_t)vmulq_n_f64(v74, v79.f64[0]);
    v86 = (float64x2_t)vzip1q_s64((int64x2_t)v73, (int64x2_t)v78);
    v87 = (float64x2_t)vzip2q_s64((int64x2_t)v73, (int64x2_t)v78);
    *(_QWORD *)&v77.f64[1] = vdupq_laneq_s64((int64x2_t)v76, 1).u64[0];
    v88 = (int8x16_t)vmulq_n_f64(v86, v79.f64[0]);
    v89 = (int8x16_t)vmulq_n_f64(v87, v79.f64[0]);
    v90 = (int8x16_t)vmulq_n_f64(v77, v79.f64[0]);
    v91 = v41 >> 2;
    *a9 = (uint64_t)v42;
    a9[1] = (uint64_t)v42;
    a9[2] = (uint64_t)&v42[16 * v91];
    v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
    v166 = (float64x2_t)v83;
    v84.i64[1] = vextq_s8(v84, v84, 8uLL).u64[0];
    v164 = (float64x2_t)v84;
    v85.i64[1] = vextq_s8(v85, v85, 8uLL).u64[0];
    v88.i64[1] = vextq_s8(v88, v88, 8uLL).u64[0];
    v156 = (float64x2_t)v88;
    v158 = (float64x2_t)v85;
    v89.i64[1] = vextq_s8(v89, v89, 8uLL).u64[0];
    v90.i64[1] = vextq_s8(v90, v90, 8uLL).u64[0];
    v152 = (float64x2_t)v90;
    v154 = (float64x2_t)v89;
    v145 = v15;
    v147 = v11;
    while (1)
    {
      v92 = 4 * v43;
      v93 = *(unsigned int *)&v172[4 * v43];
      v94 = v12[9] + 40 * v93;
      v95 = v11[9] + 40 * *(unsigned int *)&v169[v92];
      v96 = *(double *)(v94 + 16);
      v97 = *(double *)(v94 + 24);
      _D3 = *(double *)(v95 + 24);
      _Q4 = vaddq_f64(v158, vmlaq_n_f64(vmulq_n_f64(v166, v96), v164, v97));
      v100 = v160 + v168 * v96 + v162 * v97;
      __asm { FMLA            D1, D3, V4.D[1] }
      v102 = v100 + _D1;
      v103 = vaddq_f64(v152, vmlaq_n_f64(vmulq_n_f64(v156, *(double *)(v95 + 16)), v154, _D3));
      v104 = vmulq_f64(_Q4, _Q4);
      v105 = vmulq_f64(v103, v103);
      v106 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v105, 1), vaddq_f64(vaddq_f64(v104, (float64x2_t)vdupq_laneq_s64((int64x2_t)v104, 1)), v105)).f64[0];
      if (v106 == 0.0)
        v107 = 1.0;
      else
        v107 = 1.0 / v106;
      if (v102 * v102 * v107 > *(double *)(v15 + 48))
        goto LABEL_8;
      v108 = *(_DWORD *)(*a5 + 4 * v93);
      v109 = v15;
      v110 = *v12;
      v111 = *(double *)(v109 + 32);
      if (*(_BYTE *)(a11 + 32))
        break;
      v177[0] = &off_24C9FD0A0;
      v178 = v177;
      v113 = sub_20F2DCD14(v110, v108, v12, v11, a2, v94, (float32x2_t *)v95, a8, v111, (uint64_t)v177);
      v114 = v178;
      if (v178 == v177)
      {
        v114 = v177;
LABEL_25:
        v115 = 4;
        goto LABEL_26;
      }
LABEL_22:
      if (v114)
      {
        v115 = 5;
LABEL_26:
        (*(void (**)(void))(*v114 + 8 * v115))();
      }
      if (v113)
      {
        v117 = *(_QWORD *)(v113 + 24);
        v116 = *(_QWORD *)(v113 + 32);
        if (!a10 || (v117 == v110 ? (_ZF = v108 == (_DWORD)v116) : (_ZF = 0), v117 = v110, _ZF))
        {
          v119 = v12;
          v120 = v91;
          v121 = v144;
          v123 = (_QWORD *)v144[1];
          v122 = v144[2];
          if ((unint64_t)v123 < v122)
          {
            *v123 = v117;
            v123[1] = v116;
            v124 = v123 + 2;
            v11 = v147;
LABEL_49:
            v15 = v145;
            v121[1] = (uint64_t)v124;
            v91 = v120;
            v12 = v119;
            goto LABEL_8;
          }
          v125 = (_QWORD *)*v144;
          v126 = ((uint64_t)v123 - *v144) >> 4;
          v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 60)
            sub_20E867F44();
          v128 = v122 - (_QWORD)v125;
          if (v128 >> 3 > v127)
            v127 = v128 >> 3;
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF0)
            v129 = 0xFFFFFFFFFFFFFFFLL;
          else
            v129 = v127;
          if (v129)
          {
            if (v129 >> 60)
              sub_20E877A38();
            v130 = (char *)operator new(16 * v129);
            v131 = (unint64_t *)&v130[16 * v126];
            *v131 = v117;
            v131[1] = v116;
            v132 = (uint64_t)v131;
            if (v123 != v125)
              goto LABEL_45;
LABEL_51:
            v121 = v144;
            v11 = v147;
            v124 = v131 + 2;
            *v144 = v132;
            v144[1] = (uint64_t)(v131 + 2);
            v144[2] = (uint64_t)&v130[16 * v129];
            if (!v123)
              goto LABEL_49;
          }
          else
          {
            v130 = 0;
            v131 = (unint64_t *)(16 * v126);
            *v131 = v117;
            v131[1] = v116;
            v132 = 16 * v126;
            if (v123 == v125)
              goto LABEL_51;
LABEL_45:
            v11 = v147;
            do
            {
              v133 = *(v123 - 2);
              v123 -= 2;
              v134 = *((_DWORD *)v123 + 2);
              *(_QWORD *)(v132 - 16) = v133;
              v132 -= 16;
              *(_DWORD *)(v132 + 8) = v134;
            }
            while (v123 != v125);
            v121 = v144;
            v123 = (_QWORD *)*v144;
            v124 = v131 + 2;
            *v144 = v132;
            v144[1] = (uint64_t)(v131 + 2);
            v144[2] = (uint64_t)&v130[16 * v129];
            if (!v123)
              goto LABEL_49;
          }
          operator delete(v123);
          goto LABEL_49;
        }
      }
      v15 = v145;
      v11 = v147;
LABEL_8:
      v43 = ++v44;
      if (v91 <= v44)
        goto LABEL_53;
    }
    v112 = *(_QWORD *)(a11 + 24);
    if (v112)
    {
      if (v112 == a11)
      {
        v176 = v175;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a11 + 24))(a11, v175);
LABEL_21:
        v113 = sub_20F2DCD14(v110, v108, v12, v11, a2, v94, (float32x2_t *)v95, a8, v111, (uint64_t)v175);
        v114 = v176;
        if (v176 == v175)
        {
          v114 = v175;
          goto LABEL_25;
        }
        goto LABEL_22;
      }
      v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
    }
    v176 = (_BYTE *)v112;
    goto LABEL_21;
  }
LABEL_53:
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
}

void sub_20F2DB9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  v33 = *(void **)(v31 - 224);
  if (v33)
  {
    *(_QWORD *)(v31 - 216) = v33;
    operator delete(v33);
    v34 = *(void **)(v31 - 200);
    if (!v34)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v34 = *(void **)(v31 - 200);
    if (!v34)
      goto LABEL_3;
  }
  *(_QWORD *)(v31 - 192) = v34;
  operator delete(v34);
  _Unwind_Resume(exception_object);
}

void sub_20F2DBAC4(uint64_t a1, _QWORD *a2, unint64_t a3, char **a4, char **a5, double a6)
{
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  void *v16;
  void *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t *v22;
  float v23;
  unint64_t v24;
  float v25;
  unsigned int *v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v12 = (unsigned int **)(a1 + 464);
  if (!*(_BYTE *)(a1 + 488))
  {
    v28 = 0;
    v29 = 2;
    sub_20F236D98((uint64_t)&v26, (uint64_t)&v28);
    if (*(_BYTE *)(a1 + 488))
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *(unsigned int **)(a1 + 472);
        v15 = *v12;
        if (v14 != v13)
        {
          do
          {
            v16 = (void *)*((_QWORD *)v14 - 4);
            if (v16)
            {
              *((_QWORD *)v14 - 3) = v16;
              operator delete(v16);
            }
            v17 = (void *)*((_QWORD *)v14 - 7);
            if (v17)
            {
              *((_QWORD *)v14 - 6) = v17;
              operator delete(v17);
            }
            v14 -= 16;
          }
          while (v14 != v13);
          v15 = *v12;
        }
        *(_QWORD *)(a1 + 472) = v13;
        operator delete(v15);
      }
      v18 = v26;
      *(_QWORD *)(a1 + 464) = v26;
      v21 = (unsigned int *)v27;
      *(_OWORD *)(a1 + 472) = v27;
      v20 = v21;
      if (v18 == v21)
      {
LABEL_17:
        if (!*(_BYTE *)(a1 + 488))
          return;
        goto LABEL_18;
      }
    }
    else
    {
      v18 = v26;
      *(_QWORD *)(a1 + 464) = v26;
      v19 = (unsigned int *)v27;
      *(_OWORD *)(a1 + 472) = v27;
      *(_BYTE *)(a1 + 488) = 1;
      v20 = v19;
      if (v18 == v19)
        goto LABEL_17;
    }
    do
    {
      sub_20F2925E8(v18, (_QWORD *)(a1 + 576));
      v18 += 16;
    }
    while (v18 != v20);
    goto LABEL_17;
  }
LABEL_18:
  v22 = (uint64_t *)(a1 + 576);
  if (a3 == 1)
  {
    v23 = a6;
    sub_20F244E64(v12, v22, a2, a4, a5, v23, 1, 0, 0);
  }
  else
  {
    v24 = (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 6;
    if (v24 <= (uint64_t)(a2[1] - *a2) >> 6)
      v24 = (uint64_t)(a2[1] - *a2) >> 6;
    v25 = a6;
    if (v24 <= a3)
      sub_20F245348(v12, v22, a2, a4, a5, v25, a3, 0, 0);
    else
      sub_20F24586C(v12, v22, a2, a4, a5, a3, 0, 0, v25);
  }
}

uint64_t sub_20F2DBD04(unint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, float32x2_t *a7, _QWORD *a8, double a9, uint64_t a10)
{
  float64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  float64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64_t v66;
  float64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t *v74;
  __int128 *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int16 v116;
  uint64_t *v117;
  int8x16_t v118;
  double v121;
  int8x16_t v122;
  double v123;
  double v124;
  uint64_t *v125;
  uint64_t v126;
  float v127;
  __int128 v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  float64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  char v150;
  uint64_t v151;
  __int128 v152;
  int8x16_t v153;
  int8x16_t v154;
  float64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  float64x2_t v158;
  float64_t v159;
  float64x2_t v160;
  float64_t v161;
  int8x16_t v162;
  double v163;
  float64x2_t v164;
  float64_t v165;
  float64x2_t v166;
  unint64_t v167;
  double v168;
  unint64_t v169;
  int8x16_t v170;
  uint64_t **v171;
  uint64_t v172;
  int8x16_t v174;
  double v175;
  int8x16_t v176;
  double v177;
  std::__shared_weak_count *v178;
  float64x2_t v179;
  float64x2_t v180;
  double *v181[2];
  double v182;
  double v183;
  std::__shared_weak_count *v184;
  _OWORD v185[3];
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  float64x2_t v203[3];
  float64x2_t v204;
  double v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  v182 = a9 * a9;
  v181[0] = (double *)a5;
  v181[1] = &v182;
  LODWORD(v203[0].f64[0]) = *(_DWORD *)(a6 + 4);
  sub_20F2E000C(&v186, (uint64_t)a8, a3, (unsigned int *)v203);
  v17 = v186.f64[1];
  v180 = v186;
  if (*(_QWORD *)&v186.f64[1])
  {
    v18 = (unint64_t *)(*(_QWORD *)&v186.f64[1] + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v17 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v17));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v17);
    }
  }
  LODWORD(v203[0].f64[0]) = a7->i32[1];
  sub_20F2E000C(&v186, (uint64_t)a8, a4, (unsigned int *)v203);
  v21 = v186.f64[1];
  v179 = v186;
  if (!*(_QWORD *)&v186.f64[1])
    goto LABEL_12;
  v22 = (unint64_t *)(*(_QWORD *)&v186.f64[1] + 8);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (v24)
  {
LABEL_12:
    v25 = *(_QWORD *)&v179.f64[0];
    v26 = *(_QWORD *)&v180.f64[0];
    if (*(_QWORD *)&v179.f64[0])
      goto LABEL_13;
LABEL_44:
    if (v26)
    {
      v68 = v26 + 40;
      if (!*(_BYTE *)(v26 + 528))
        v68 = 0;
      v186 = vcvtq_f64_f32(a7[1]);
      v203[0].f64[0] = a7[4].f32[0];
      if (!sub_20F2DFB1C(v181, a4, (double *)(v68 + 8), &v186, v203[0].f64))
        goto LABEL_85;
      sub_20F2DFD80(v26, (__int128 *)a4, (uint64_t)a7);
      *(_QWORD *)&v186.f64[0] = v26;
      v69 = *(_QWORD *)(a10 + 24);
      if (v69)
      {
        if (((*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v69 + 48))(v69, &v186, a4) & 1) != 0)
          goto LABEL_86;
        v186 = *(float64x2_t *)(v26 + 24);
        sub_20F2DFE8C(a8, (uint64_t *)&v186);
        goto LABEL_85;
      }
LABEL_207:
      sub_20E86D37C();
    }
    v171 = (uint64_t **)a8;
    v74 = (uint64_t *)a8[1];
    v73 = a8 + 1;
    v72 = v74;
    v75 = (__int128 *)a4;
    if (!v74)
      goto LABEL_69;
    v76 = v73;
    do
    {
      v77 = v72[4];
      if (v77 < a1)
      {
        ++v72;
      }
      else if (v77 == a1)
      {
        if (*((_DWORD *)v72 + 10) < a2)
          ++v72;
        else
          v76 = v72;
      }
      else
      {
        v76 = v72;
      }
      v72 = (uint64_t *)*v72;
    }
    while (v72);
    if (v76 == v73 || (v78 = v76[4], a1 < v78) || a1 == v78 && *((_DWORD *)v76 + 10) > a2)
    {
LABEL_69:
      *(double *)&v178 = 0.0;
      goto LABEL_108;
    }
    v26 = v76[6];
    v88 = (std::__shared_weak_count *)v76[7];
    if (v88)
    {
      p_shared_owners = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldxr(p_shared_owners);
      while (__stxr(v90 + 1, p_shared_owners));
      v178 = v88;
      do
        v91 = __ldxr(p_shared_owners);
      while (__stxr(v91 + 1, p_shared_owners));
      do
        v92 = __ldaxr(p_shared_owners);
      while (__stlxr(v92 - 1, p_shared_owners));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
      v75 = (__int128 *)a4;
      if (!v26)
      {
LABEL_108:
        v93 = (uint64_t *)*v73;
        v94 = a3;
        if (*v73)
        {
          v95 = v73;
          do
          {
            v96 = v93[4];
            if (v96 < a1)
            {
              ++v93;
            }
            else if (v96 == a1)
            {
              if (*((_DWORD *)v93 + 10) < a2)
                ++v93;
              else
                v95 = v93;
            }
            else
            {
              v95 = v93;
            }
            v93 = (uint64_t *)*v93;
          }
          while (v93);
          if (v95 != v73)
          {
            v97 = v95[4];
            if (a1 >= v97 && (a1 != v97 || *((_DWORD *)v95 + 10) <= a2))
            {
              v98 = v95[6];
              v99 = (std::__shared_weak_count *)v95[7];
              if (v99)
              {
                v100 = (unint64_t *)&v99->__shared_owners_;
                do
                  v101 = __ldxr(v100);
                while (__stxr(v101 + 1, v100));
                do
                  v102 = __ldxr(v100);
                while (__stxr(v102 + 1, v100));
                do
                  v103 = __ldaxr(v100);
                while (__stlxr(v103 - 1, v100));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
                do
                  v104 = __ldaxr(v100);
                while (__stlxr(v104 - 1, v100));
                if (!v104)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
              v94 = a3;
              if (v98)
              {
                v94 = a3;
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 477, (uint64_t)"!track_set.findTrack(new_track_key)", 35, (uint64_t)"The new track ID must not be used in the track_set.", 51, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
              }
            }
          }
        }
        v176 = *(int8x16_t *)(a6 + 16);
        v105 = *v94;
        *(_QWORD *)&v186.f64[0] = &off_24C9FD220;
        *(_QWORD *)&v186.f64[1] = v105;
        *(_QWORD *)&v187.f64[0] = a2;
        *(_QWORD *)&v187.f64[1] = a6;
        v188.f64[0] = 0.0;
        v106 = sub_20F2E2098(v171 + 3, v94);
        sub_20F2E16E0(v171, (int8x8_t *)v106, (uint64_t)&v186, (uint64_t *)&v183);
        v107 = *(_QWORD *)&v183;
        if (v183 == 0.0)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 195, (uint64_t)"new_track", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_209;
          }
          v107 = *(_QWORD *)&v183;
        }
        if (*(_QWORD *)(v107 + 544) - *(_QWORD *)(v107 + 536) == 32)
        {
LABEL_140:
          if (!*(_BYTE *)(v107 + 528))
          {
            memset(v203, 0, sizeof(v203));
            v186 = 0u;
            v187 = 0u;
            v188 = 0u;
            v189 = 0u;
            v190 = 0u;
            v191 = 0u;
            v192 = 0u;
            v193 = 0u;
            v194 = 0u;
            v195 = 0u;
            v196 = 0u;
            v197 = 0u;
            v198 = 0u;
            v199 = 0u;
            v200 = 0u;
            v201 = 0u;
            v202 = 0;
            memset(v185, 0, 39);
            *(_QWORD *)(v107 + 56) = 0;
            *(_QWORD *)(v107 + 64) = 0;
            *(_QWORD *)(v107 + 48) = 0;
            *(float64_t *)(v107 + 88) = v203[2].f64[1];
            *(float64x2_t *)(v107 + 72) = *(float64x2_t *)((char *)&v203[1] + 8);
            *(_BYTE *)(v107 + 96) = 1;
            *(_WORD *)(v107 + 97) = 0;
            *(_QWORD *)(v107 + 104) = 0;
            *(_QWORD *)(v107 + 112) = 0;
            *(_QWORD *)(v107 + 120) = 0;
            *(_QWORD *)(v107 + 128) = 0xFFEFFFFFFFFFFFFFLL;
            *(_QWORD *)(v107 + 136) = 0;
            *(_QWORD *)(v107 + 144) = 0x3FF0000000000000;
            *(_OWORD *)(v107 + 232) = 0u;
            *(_OWORD *)(v107 + 216) = 0u;
            *(_OWORD *)(v107 + 200) = 0u;
            *(_OWORD *)(v107 + 184) = 0u;
            *(_OWORD *)(v107 + 168) = 0u;
            *(_OWORD *)(v107 + 152) = 0u;
            v108 = v193;
            *(_OWORD *)(v107 + 248) = v192;
            v109 = v194;
            v110 = v196;
            v111 = v197;
            *(_OWORD *)(v107 + 296) = v195;
            *(_OWORD *)(v107 + 312) = v110;
            *(_OWORD *)(v107 + 264) = v108;
            *(_OWORD *)(v107 + 280) = v109;
            v112 = v198;
            v113 = v199;
            *(_OWORD *)(v107 + 328) = v111;
            *(_OWORD *)(v107 + 344) = v112;
            v114 = v200;
            v115 = v201;
            *(_QWORD *)(v107 + 408) = v202;
            *(_OWORD *)(v107 + 376) = v114;
            *(_OWORD *)(v107 + 392) = v115;
            *(_OWORD *)(v107 + 360) = v113;
            *(int64x2_t *)(v107 + 416) = vdupq_n_s64(0x7FF8000000000000uLL);
            *(_WORD *)(v107 + 432) = 0;
            *(_BYTE *)(v107 + 440) = 0;
            *(_BYTE *)(v107 + 464) = 0;
            *(_QWORD *)(v107 + 472) = 0;
            *(_QWORD *)(v107 + 480) = 0xBFF0000000000000;
            *(_QWORD *)(v107 + 40) = &off_24C9FD120;
            *(_DWORD *)(v107 + 520) = 0;
            *(_OWORD *)(v107 + 488) = 0u;
            *(_OWORD *)(v107 + 504) = 0u;
            v116 = WORD2(v185[2]);
            *(_BYTE *)(v107 + 526) = BYTE6(v185[2]);
            *(_WORD *)(v107 + 524) = v116;
            *(_BYTE *)(v107 + 528) = 1;
          }
          *(_QWORD *)(v107 + 48) = 0;
          *(_QWORD *)(v107 + 56) = 0;
          *(_QWORD *)(v107 + 64) = 0;
          *(_BYTE *)(v107 + 526) = 1;
          v117 = sub_20E9DF85C((_QWORD *)(a5 + 1784), v94);
          v118 = v176;
          _D1 = *(double *)&v176.i64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v121 = 1.0 / sqrt(_D0 + 1.0);
          v122 = (int8x16_t)vmulq_n_f64((float64x2_t)v176, v121);
          *(_QWORD *)&v123 = vextq_s8(v118, v118, 8uLL).u64[0];
          *(_QWORD *)&v124 = vextq_s8(v122, v122, 8uLL).u64[0];
          if (v117)
            v125 = v117 + 5;
          else
            v125 = 0;
          if (*(_BYTE *)(*(_QWORD *)&v183 + 528))
            v126 = *(_QWORD *)&v183 + 40;
          else
            v126 = 0;
          v127 = *(float *)(a6 + 12);
          v168 = v124;
          v172 = v122.i64[0];
          v177 = v121;
          if (fabs(sqrt(*(double *)v118.i64 * v121 * *(double *)v122.i64 + v123 * v121 * v124 + v121 * v121) + -1.0) > 0.000001
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_208;
          }
          v128 = *(_OWORD *)v94;
          *(_DWORD *)(v126 + 48) = *((_DWORD *)v94 + 4);
          *(_OWORD *)(v126 + 32) = v128;
          *(_QWORD *)&v128 = v172;
          *((double *)&v128 + 1) = v168;
          *(_QWORD *)(v126 + 96) = v125;
          *(_OWORD *)(v126 + 64) = v128;
          *(double *)(v126 + 80) = v177;
          *(double *)(v126 + 88) = v127;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 16))(v126) & 1) == 0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 206, (uint64_t)"ret", 3, (uint64_t)"We should not failing set a anchor", 34, (void (*)(void **))sub_21023DDB0))
          {
LABEL_208:
            abort();
          }
          v26 = *(_QWORD *)&v183;
          v129 = v184;
          if (v184)
          {
            v130 = (unint64_t *)&v184->__shared_owners_;
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 - 1, v130));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          v132 = v26 + 40;
          if (!*(_BYTE *)(v26 + 528))
            v132 = 0;
          *(_BYTE *)(v132 + 485) = 1;
          sub_20F2DFD80(v26, v75, (uint64_t)a7);
          goto LABEL_160;
        }
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 196, (uint64_t)"new_track->getTrackLength() == 1u", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v107 = *(_QWORD *)&v183;
          goto LABEL_140;
        }
LABEL_209:
        abort();
      }
    }
    else
    {
      v75 = (__int128 *)a4;
      *(double *)&v178 = 0.0;
      if (!v26)
        goto LABEL_108;
    }
    if (*(_BYTE *)(v26 + 528))
      v79 = v26 + 40;
    else
      v79 = 0;
    v186 = vcvtq_f64_f32(a7[1]);
    *(double *)v185 = a7[4].f32[0];
    if (!sub_20F2DFB1C(v181, (uint64_t *)v75, (double *)(v79 + 8), &v186, (double *)v185))
      goto LABEL_83;
    v80 = *(_BYTE *)(v26 + 528) ? v26 + 40 : 0;
    v203[0] = vcvtq_f64_f32(*(float32x2_t *)(a6 + 8));
    v183 = *(float *)(a6 + 32);
    if (!sub_20F2DFB1C(v181, a3, (double *)(v80 + 8), v203, &v183))
      goto LABEL_83;
    sub_20F2DFD80(v26, (__int128 *)a3, a6);
    sub_20F2DFD80(v26, v75, (uint64_t)a7);
    *(_QWORD *)&v186.f64[0] = v26;
    v81 = *(_QWORD *)(a10 + 24);
    if (v81)
    {
      if (!(*(unsigned int (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v81 + 48))(v81, &v186, a3))
      {
LABEL_82:
        v186 = *(float64x2_t *)(v26 + 24);
        sub_20F2DFE8C(v171, (uint64_t *)&v186);
LABEL_83:
        v26 = 0;
        goto LABEL_160;
      }
      *(_QWORD *)&v186.f64[0] = v26;
      v82 = *(_QWORD *)(a10 + 24);
      if (v82)
      {
        if (((*(uint64_t (**)(uint64_t, float64x2_t *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v186, v75) & 1) != 0)
        {
LABEL_160:
          v133 = *(double *)&v178;
          if (*(double *)&v178 == 0.0)
            goto LABEL_86;
          v134 = (unint64_t *)&v178->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          goto LABEL_197;
        }
        goto LABEL_82;
      }
    }
    sub_20E86D37C();
  }
  (*(void (**)(float64_t))(**(_QWORD **)&v21 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v21));
  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v21);
  v25 = *(_QWORD *)&v179.f64[0];
  v26 = *(_QWORD *)&v180.f64[0];
  if (!*(_QWORD *)&v179.f64[0])
    goto LABEL_44;
LABEL_13:
  if (!v26)
  {
    v70 = v25 + 40;
    if (!*(_BYTE *)(v25 + 528))
      v70 = 0;
    v186 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 8));
    v203[0].f64[0] = *(float *)(a6 + 32);
    if (!sub_20F2DFB1C(v181, a3, (double *)(v70 + 8), &v186, v203[0].f64))
      goto LABEL_85;
    sub_20F2DFD80(v25, (__int128 *)a3, a6);
    *(_QWORD *)&v186.f64[0] = v25;
    v71 = *(_QWORD *)(a10 + 24);
    if (v71)
    {
      if (((*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v71 + 48))(v71, &v186, a3) & 1) != 0)
      {
        v26 = v25;
        goto LABEL_86;
      }
      v186 = *(float64x2_t *)(v25 + 24);
      sub_20F2DFE8C(a8, (uint64_t *)&v186);
      goto LABEL_85;
    }
    goto LABEL_207;
  }
  if (*(_QWORD *)(v26 + 24) == *(_QWORD *)(v25 + 24) && *(_DWORD *)(v26 + 32) == *(_DWORD *)(v25 + 32))
    goto LABEL_86;
  v28 = (uint64_t **)a8;
  if (*(_BYTE *)(v26 + 528))
    v29 = v26 + 40;
  else
    v29 = 0;
  v186 = vcvtq_f64_f32(a7[1]);
  v203[0].f64[0] = a7[4].f32[0];
  if (!sub_20F2DFB1C(v181, a4, (double *)(v29 + 8), &v186, v203[0].f64)
    || (*(_BYTE *)(v25 + 528) ? (v30 = v25 + 40) : (v30 = 0),
        v186 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 8)),
        v203[0].f64[0] = *(float *)(a6 + 32),
        !sub_20F2DFB1C(v181, a3, (double *)(v30 + 8), &v186, v203[0].f64)))
  {
LABEL_85:
    v26 = 0;
    goto LABEL_86;
  }
  v34 = *(unsigned __int8 *)(v26 + 528);
  if (*(_BYTE *)(v26 + 528))
    v35 = v26 + 40;
  else
    v35 = 0;
  v36 = *(unsigned __int8 *)(v25 + 528);
  if (!*(_BYTE *)(v35 + 485) || (*(_BYTE *)(v25 + 528) ? (v37 = v25 + 40) : (v37 = 0), !*(_BYTE *)(v37 + 485)))
  {
    *(_BYTE *)(v35 + 485) = 0;
    if (v36)
      v38 = v25 + 40;
    else
      v38 = 0;
    *(_BYTE *)(v38 + 485) = 0;
  }
  v39 = 0;
  if (v34)
  {
    v174.i64[0] = v31;
    v169 = v31;
    v167 = v31;
    if (!v36)
      goto LABEL_166;
    if (*(_BYTE *)(v26 + 524) && *(_BYTE *)(v25 + 524))
    {
      v163 = *(double *)(v26 + 64);
      v175 = *(double *)(v25 + 64);
      v170 = *(int8x16_t *)(v25 + 48);
      v40.f64[0] = *(float *)(v26 + 496);
      v40.f64[1] = *(float *)(v26 + 500);
      v161 = *(float *)(v26 + 504);
      v162 = *(int8x16_t *)(v26 + 48);
      v41.f64[0] = v161;
      v41.f64[1] = *(float *)(v26 + 508);
      v32.f64[0] = *(float *)(v26 + 520);
      v42.f64[0] = *(float *)(v25 + 496);
      v42.f64[1] = *(float *)(v25 + 500);
      v43.f64[0] = *(float *)(v25 + 504);
      v154 = (int8x16_t)v42;
      v155 = v43.f64[0];
      v43.f64[1] = *(float *)(v25 + 508);
      v33.f64[0] = *(float *)(v25 + 520);
      v156 = (int8x16_t)v41;
      v157 = (int8x16_t)v40;
      v153 = (int8x16_t)v43;
      v165 = v32.f64[0];
      v166 = vcvtq_f64_f32(*(float32x2_t *)(v26 + 488));
      v159 = v33.f64[0];
      v160 = vcvtq_f64_f32(*(float32x2_t *)(v25 + 488));
      v164 = vcvtq_f64_f32(*(float32x2_t *)(v26 + 512));
      v158 = vcvtq_f64_f32(*(float32x2_t *)(v25 + 512));
      *(_QWORD *)&v190 = *(_OWORD *)&vaddq_f64(v32, v33);
      v188 = vaddq_f64(v41, v43);
      v189 = vaddq_f64(v164, v158);
      v186 = vaddq_f64(v166, v160);
      v187 = vaddq_f64(v40, v42);
      sub_20E8BE424((uint64_t)v203);
      v44 = (float64x2_t)vextq_s8(v162, v162, 8uLL);
      v45 = (float64x2_t)vextq_s8(v170, v170, 8uLL);
      *(_QWORD *)&_Q2.f64[0] = vextq_s8(v157, v157, 8uLL).u64[0];
      _D1 = vextq_s8(v156, v156, 8uLL).u64[0];
      *(_QWORD *)&_Q18.f64[0] = vextq_s8(v154, v154, 8uLL).u64[0];
      _D19 = vextq_s8(v153, v153, 8uLL).u64[0];
      _V17.D[1] = v203[0].f64[1];
      _V6.D[1] = v203[2].f64[0];
      _V4.D[1] = v204.f64[1];
      _Q18.f64[1] = v155;
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, v203[0].f64[0]), _Q18, v203[0], 1), v158, v203[1].f64[0]);
      __asm { FMLA            D21, D19, V17.D[1] }
      v58 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, v203[1].f64[1]), _Q18, *(float64x2_t *)((char *)&v203[1] + 8), 1), v158, v203[2].f64[1]);
      __asm { FMLA            D23, D19, V6.D[1] }
      v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, v204.f64[0]), _Q18, v204, 1), v158, v205);
      __asm { FMLA            D18, D19, V4.D[1] }
      v61 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q20, *(double *)v162.i64), v58, v44.f64[0]), v60, v163);
      v44.f64[0] = (_D21 + v159 * v203[1].f64[0]) * *(double *)v162.i64
                 + (_D23 + v159 * v203[2].f64[1]) * v44.f64[0]
                 + (_Q18.f64[0] + v159 * v205) * v163;
      _Q2.f64[1] = v161;
      v62 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, v203[0].f64[0]), _Q2, v203[0], 1), v164, v203[1].f64[0]);
      __asm { FMLA            D20, D1, V17.D[1] }
      v63 = _Q20.f64[0] + v165 * v203[1].f64[0];
      v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, v203[1].f64[1]), _Q2, *(float64x2_t *)((char *)&v203[1] + 8), 1), v164, v203[2].f64[1]);
      __asm { FMLA            D20, D1, V6.D[1] }
      v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, v204.f64[0]), _Q2, v204, 1), v164, v205);
      __asm { FMLA            D2, D1, V4.D[1] }
      v66 = _Q2.f64[0] + v165 * v205;
      v67 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, *(double *)v170.i64), v64, v45.f64[0]), v65, v175);
      v45.f64[0] = v63 * *(double *)v170.i64 + (_Q20.f64[0] + v165 * v203[2].f64[1]) * v45.f64[0] + v66 * v175;
      v174 = (int8x16_t)vaddq_f64(v61, v67);
      v167 = *(_OWORD *)&vaddq_f64(v44, v45);
      v169 = vextq_s8(v174, v174, 8uLL).u64[0];
      v39 = 1;
      goto LABEL_166;
    }
    v39 = 0;
  }
  v174.i64[0] = v31;
  v169 = v31;
  v167 = v31;
LABEL_166:
  v136 = (uint64_t *)(v28 + 1);
  v137 = v28[1];
  if (!v137)
    goto LABEL_193;
  v139 = *(_QWORD *)(v26 + 24);
  v138 = *(_QWORD *)(v26 + 32);
  v141 = *(_QWORD *)(v25 + 24);
  v140 = *(_QWORD *)(v25 + 32);
  v142 = (uint64_t *)(v28 + 1);
  v143 = (uint64_t)(v28 + 1);
  v144 = (uint64_t)v28[1];
  do
  {
    v145 = *(_QWORD *)(v144 + 32);
    if (v145 < v139)
    {
      v144 += 8;
    }
    else if (v145 == v139)
    {
      if (*(_DWORD *)(v144 + 40) < v138)
        v144 += 8;
      else
        v143 = v144;
    }
    else
    {
      v143 = v144;
    }
    v144 = *(_QWORD *)v144;
  }
  while (v144);
  if ((uint64_t *)v143 == v136)
    goto LABEL_193;
  v146 = *(_QWORD *)(v143 + 32);
  if (v139 < v146 || v139 == v146 && *(_DWORD *)(v143 + 40) > v138)
    goto LABEL_193;
  do
  {
    v147 = v137[4];
    if (v147 < v141)
    {
      ++v137;
    }
    else if (v147 == v141)
    {
      if (*((_DWORD *)v137 + 10) < v140)
        ++v137;
      else
        v142 = v137;
    }
    else
    {
      v142 = v137;
    }
    v137 = (uint64_t *)*v137;
  }
  while (v137);
  if (v142 == v136 || (v148 = v142[4], v141 < v148) || v141 == v148 && *((_DWORD *)v142 + 10) > v140)
  {
LABEL_193:
    v26 = 0;
    v186 = 0uLL;
  }
  else
  {
    sub_20F2E0134(v28, v143, v142, &v186);
    v26 = *(_QWORD *)&v186.f64[0];
    v150 = v39 ^ 1;
    if (!*(_QWORD *)&v186.f64[0])
      v150 = 1;
    if ((v150 & 1) == 0)
    {
      v151 = *(_QWORD *)&v186.f64[0] + 40;
      if (!*(_BYTE *)(*(_QWORD *)&v186.f64[0] + 528))
        v151 = 0;
      *(_QWORD *)(v151 + 24) = v167;
      *(_QWORD *)&v152 = v174.i64[0];
      *((_QWORD *)&v152 + 1) = v169;
      *(_OWORD *)(v151 + 8) = v152;
    }
  }
  v133 = v186.f64[1];
  if (*(_QWORD *)&v186.f64[1])
  {
    v149 = (unint64_t *)(*(_QWORD *)&v186.f64[1] + 8);
    do
      v135 = __ldaxr(v149);
    while (__stlxr(v135 - 1, v149));
LABEL_197:
    if (!v135)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v133 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v133));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v133);
    }
  }
LABEL_86:
  if (*(_QWORD *)&v179.f64[1])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v179.f64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v179.f64[1] + 16))(*(_QWORD *)&v179.f64[1]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v179.f64[1]);
    }
  }
  if (*(_QWORD *)&v180.f64[1])
  {
    v85 = (unint64_t *)(*(_QWORD *)&v180.f64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v180.f64[1] + 16))(*(_QWORD *)&v180.f64[1]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v180.f64[1]);
    }
  }
  return v26;
}

void sub_20F2DCC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,char a50)
{
  sub_20E86665C((uint64_t)&a48);
  sub_20E86665C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_20F2DCCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_20E86665C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2DCD14(unint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, double *a5, uint64_t a6, float32x2_t *a7, _QWORD *a8, double a9, uint64_t a10)
{
  unint64_t *v17;
  unint64_t v18;
  float64_t v19;
  unint64_t *v20;
  unint64_t v21;
  float64x2_t v22;
  unint64_t *v23;
  unint64_t v24;
  float64_t v25;
  unint64_t *v26;
  unint64_t v27;
  float64_t v28;
  float64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t v34;
  float64x2_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  float64x2_t v42;
  int64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v62;
  double v64;
  double v66;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  double *v74;
  double *v75;
  unint64_t v76;
  unint64_t v77;
  double *v78;
  double *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v103;
  uint64_t *v104;
  float64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  char v128;
  uint64_t v129;
  __int128 v130;
  int8x16_t v131;
  int8x16_t v132;
  float64x2_t v133;
  float64_t v134;
  float64x2_t v135;
  float64x2_t v136;
  int8x16_t v137;
  double v138;
  float64x2_t v139;
  float64_t v140;
  float64x2_t v141;
  float64x2_t v142;
  unint64_t v143;
  unint64_t v144;
  int8x16_t v145;
  int8x16_t v146;
  double v147;
  double v149;
  double v150;
  double v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  double *v155[2];
  double v156;
  float64x2_t v157;
  double v158;
  float64x2_t v159;
  double v160;
  float64x2_t v161;
  double v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  uint64_t v167;

  v156 = a9 * a9;
  v155[0] = a5;
  v155[1] = &v156;
  LODWORD(v157.f64[0]) = *(_DWORD *)(a6 + 4);
  sub_20F289C58((uint64_t)a8, a3, (unsigned int *)&v157, &v163);
  v154 = v163;
  if (*(_QWORD *)&v163.f64[1])
  {
    v17 = (unint64_t *)(*(_QWORD *)&v163.f64[1] + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = v163.f64[1];
    if (*(_QWORD *)&v163.f64[1])
    {
      v20 = (unint64_t *)(*(_QWORD *)&v163.f64[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v19 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v19));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v19);
      }
    }
  }
  LODWORD(v157.f64[0]) = a7->i32[1];
  sub_20F289C58((uint64_t)a8, a4, (unsigned int *)&v157, &v163);
  v153 = v163;
  if (!*(_QWORD *)&v163.f64[1])
    goto LABEL_16;
  v23 = (unint64_t *)(*(_QWORD *)&v163.f64[1] + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = v163.f64[1];
  if (!*(_QWORD *)&v163.f64[1])
    goto LABEL_16;
  v26 = (unint64_t *)(*(_QWORD *)&v163.f64[1] + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_16:
    v28 = v153.f64[0];
    v29 = v154.f64[0];
    if (*(_QWORD *)&v153.f64[0])
      goto LABEL_17;
LABEL_54:
    if (v29 != 0.0)
    {
      v71 = *(_QWORD *)&v29 + 40;
      if (!*(_BYTE *)(*(_QWORD *)&v29 + 192))
        v71 = 0;
      v163 = vcvtq_f64_f32(a7[1]);
      v157.f64[0] = a7[4].f32[0];
      if (!sub_20F2DFB1C(v155, a4, (double *)(v71 + 8), &v163, v157.f64))
        goto LABEL_85;
      sub_20F287E70(*(uint64_t **)&v29, (__int128 *)a4, (uint64_t)a7);
      v163.f64[0] = v29;
      v72 = *(_QWORD *)(a10 + 24);
      if (v72)
      {
        if (((*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v72 + 48))(v72, &v163, a4) & 1) != 0)
          goto LABEL_86;
        v163 = *(float64x2_t *)(*(_QWORD *)&v29 + 24);
        sub_20F25F344(a8, (uint64_t *)&v163);
        goto LABEL_85;
      }
      goto LABEL_189;
    }
    v74 = (double *)(a8 + 1);
    v73 = (double *)a8[1];
    if (v73)
    {
      v75 = (double *)(a8 + 1);
      do
      {
        v76 = *((_QWORD *)v73 + 4);
        if (v76 < a1)
        {
          ++v73;
        }
        else if (v76 == a1)
        {
          if (*((_DWORD *)v73 + 10) < a2)
            ++v73;
          else
            v75 = v73;
        }
        else
        {
          v75 = v73;
        }
        v73 = *(double **)v73;
      }
      while (v73);
      if (v75 == v74)
      {
        v29 = 0.0;
LABEL_98:
        v151 = v29;
        v152 = 0.0;
        if (v29 != 0.0)
          goto LABEL_99;
LABEL_74:
        v78 = *(double **)v74;
        if (*(_QWORD *)v74)
        {
          v79 = (double *)(a8 + 1);
          do
          {
            v80 = *((_QWORD *)v78 + 4);
            if (v80 < a1)
            {
              ++v78;
            }
            else if (v80 == a1)
            {
              if (*((_DWORD *)v78 + 10) < a2)
                ++v78;
              else
                v79 = v78;
            }
            else
            {
              v79 = v78;
            }
            v78 = *(double **)v78;
          }
          while (v78);
          if (v79 != v74)
          {
            v92 = *((_QWORD *)v79 + 4);
            if (a1 >= v92 && (a1 != v92 || *((_DWORD *)v79 + 10) <= a2))
            {
              v94 = *((_QWORD *)v79 + 6);
              v93 = (std::__shared_weak_count *)*((_QWORD *)v79 + 7);
              if (v93)
              {
                p_shared_owners = (unint64_t *)&v93->__shared_owners_;
                do
                  v96 = __ldxr(p_shared_owners);
                while (__stxr(v96 + 1, p_shared_owners));
                do
                  v97 = __ldxr(p_shared_owners);
                while (__stxr(v97 + 1, p_shared_owners));
                do
                  v98 = __ldaxr(p_shared_owners);
                while (__stlxr(v98 - 1, p_shared_owners));
                if (!v98)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
                do
                  v99 = __ldaxr(p_shared_owners);
                while (__stlxr(v99 - 1, p_shared_owners));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              if (v94
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 477, (uint64_t)"!track_set.findTrack(new_track_key)", 35, (uint64_t)"The new track ID must not be used in the track_set.", 51, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
          }
        }
        _Q0 = *(float64x2_t *)(a6 + 16);
        v22.f64[0] = 1.0;
        _Q2 = vmulq_f64(_Q0, _Q0);
        _D3 = *(_QWORD *)(a6 + 24);
        __asm { FMLA            D2, D3, V0.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + 1.0 * 1.0);
        v163 = vmulq_n_f64(_Q0, _Q2.f64[0]);
        *(_QWORD *)&v164.f64[0] = *(_OWORD *)&vmulq_f64(v22, _Q2);
        v157 = 0uLL;
        v158 = 0.0;
        *(double *)&v103 = COERCE_DOUBLE(sub_20F25C29C(a2, a3, (uint64_t)a5, (__int128 *)&v157, (__int128 *)&v163, (uint64_t)a8, a6));
        v29 = *(double *)&v103;
        v104 = v103 + 5;
        if (!*((_BYTE *)v103 + 192))
          v104 = 0;
        *((_BYTE *)v104 + 149) = 1;
        sub_20F287E70(v103, (__int128 *)a4, (uint64_t)a7);
        goto LABEL_132;
      }
      v77 = *((_QWORD *)v75 + 4);
      if (a1 >= v77 && (a1 != v77 || *((_DWORD *)v75 + 10) <= a2))
      {
        v29 = v75[6];
        v108 = (std::__shared_weak_count *)*((_QWORD *)v75 + 7);
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
          v151 = v29;
          v152 = *(double *)&v108;
          do
            v111 = __ldxr(v109);
          while (__stxr(v111 + 1, v109));
          do
            v112 = __ldaxr(v109);
          while (__stlxr(v112 - 1, v109));
          if (!v112)
          {
            v113 = v108;
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v113);
          }
          v29 = v151;
          if (v151 == 0.0)
            goto LABEL_74;
LABEL_99:
          if (*(_BYTE *)(*(_QWORD *)&v29 + 192))
            v88 = *(_QWORD *)&v29 + 40;
          else
            v88 = 0;
          v163 = vcvtq_f64_f32(a7[1]);
          v150 = a7[4].f32[0];
          if (!sub_20F2DFB1C(v155, a4, (double *)(v88 + 8), &v163, &v150))
            goto LABEL_112;
          v89 = *(_BYTE *)(*(_QWORD *)&v29 + 192) ? *(_QWORD *)&v29 + 40 : 0;
          v157 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 8));
          v149 = *(float *)(a6 + 32);
          if (!sub_20F2DFB1C(v155, a3, (double *)(v89 + 8), &v157, &v149))
            goto LABEL_112;
          sub_20F287E70(*(uint64_t **)&v29, (__int128 *)a3, a6);
          sub_20F287E70(*(uint64_t **)&v29, (__int128 *)a4, (uint64_t)a7);
          v163.f64[0] = v29;
          v90 = *(_QWORD *)(a10 + 24);
          if (v90)
          {
            if (!(*(unsigned int (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v90 + 48))(v90, &v163, a3))
            {
LABEL_111:
              v163 = *(float64x2_t *)(*(_QWORD *)&v29 + 24);
              sub_20F25F344(a8, (uint64_t *)&v163);
LABEL_112:
              v29 = 0.0;
              goto LABEL_132;
            }
            v163.f64[0] = v29;
            v91 = *(_QWORD *)(a10 + 24);
            if (v91)
            {
              if (((*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v91 + 48))(v91, &v163, a4) & 1) != 0)
              {
LABEL_132:
                v105 = v152;
                if (v152 == 0.0)
                  goto LABEL_86;
                v106 = (unint64_t *)(*(_QWORD *)&v152 + 8);
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 - 1, v106));
                goto LABEL_179;
              }
              goto LABEL_111;
            }
          }
          sub_20E86D37C();
        }
        goto LABEL_98;
      }
    }
    v151 = 0.0;
    v152 = 0.0;
    goto LABEL_74;
  }
  (*(void (**)(float64_t))(**(_QWORD **)&v25 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v25));
  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v25);
  v28 = v153.f64[0];
  v29 = v154.f64[0];
  if (!*(_QWORD *)&v153.f64[0])
    goto LABEL_54;
LABEL_17:
  if (v29 == 0.0)
  {
    v69 = *(_QWORD *)&v28 + 40;
    if (!*(_BYTE *)(*(_QWORD *)&v28 + 192))
      v69 = 0;
    v163 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 8));
    v157.f64[0] = *(float *)(a6 + 32);
    if (!sub_20F2DFB1C(v155, a3, (double *)(v69 + 8), &v163, v157.f64))
      goto LABEL_85;
    sub_20F287E70(*(uint64_t **)&v28, (__int128 *)a3, a6);
    v163.f64[0] = v28;
    v70 = *(_QWORD *)(a10 + 24);
    if (v70)
    {
      if (((*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v70 + 48))(v70, &v163, a3) & 1) != 0)
      {
        v29 = v28;
        goto LABEL_86;
      }
      v163 = *(float64x2_t *)(*(_QWORD *)&v28 + 24);
      sub_20F25F344(a8, (uint64_t *)&v163);
      goto LABEL_85;
    }
LABEL_189:
    sub_20E86D37C();
  }
  if (*(_QWORD *)(*(_QWORD *)&v29 + 24) == *(_QWORD *)(*(_QWORD *)&v28 + 24)
    && *(_DWORD *)(*(_QWORD *)&v29 + 32) == *(_DWORD *)(*(_QWORD *)&v28 + 32))
  {
    goto LABEL_86;
  }
  if (*(_BYTE *)(*(_QWORD *)&v29 + 192))
    v31 = *(_QWORD *)&v29 + 40;
  else
    v31 = 0;
  v163 = vcvtq_f64_f32(a7[1]);
  v157.f64[0] = a7[4].f32[0];
  if (!sub_20F2DFB1C(v155, a4, (double *)(v31 + 8), &v163, v157.f64)
    || (*(_BYTE *)(*(_QWORD *)&v28 + 192) ? (v32 = *(_QWORD *)&v28 + 40) : (v32 = 0),
        v163 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 8)),
        v157.f64[0] = *(float *)(a6 + 32),
        !sub_20F2DFB1C(v155, a3, (double *)(v32 + 8), &v163, v157.f64)))
  {
LABEL_85:
    v29 = 0.0;
    goto LABEL_86;
  }
  v36 = *(unsigned __int8 *)(*(_QWORD *)&v29 + 192);
  if (*(_BYTE *)(*(_QWORD *)&v29 + 192))
    v37 = *(_QWORD *)&v29 + 40;
  else
    v37 = 0;
  v38 = *(unsigned __int8 *)(*(_QWORD *)&v28 + 192);
  if (!*(_BYTE *)(v37 + 149)
    || (*(_BYTE *)(*(_QWORD *)&v28 + 192) ? (v39 = *(_QWORD *)&v28 + 40) : (v39 = 0), !*(_BYTE *)(v39 + 149)))
  {
    *(_BYTE *)(v37 + 149) = 0;
    if (v38)
      v40 = *(_QWORD *)&v28 + 40;
    else
      v40 = 0;
    *(_BYTE *)(v40 + 149) = 0;
  }
  v41 = 0;
  if (v36)
  {
    v146.i64[0] = v33;
    v144 = v33;
    v143 = v33;
    if (!v38)
      goto LABEL_150;
    if (*(_BYTE *)(*(_QWORD *)&v29 + 188) && *(_BYTE *)(*(_QWORD *)&v28 + 188))
    {
      v138 = *(double *)(*(_QWORD *)&v29 + 64);
      v137 = *(int8x16_t *)(*(_QWORD *)&v29 + 48);
      v147 = *(double *)(*(_QWORD *)&v28 + 64);
      v42 = *(float64x2_t *)(*(_QWORD *)&v28 + 48);
      *(double *)v34.i64 = *(float *)(*(_QWORD *)&v29 + 160);
      v43 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v29 + 164));
      *(_QWORD *)&v44.f64[0] = vdupq_laneq_s64(v43, 1).u64[0];
      v145 = (int8x16_t)v42;
      v141 = (float64x2_t)v43;
      v45 = (float64x2_t)vzip1q_s64(v34, v43);
      v44.f64[1] = *(float *)(*(_QWORD *)&v29 + 172);
      v35.f64[0] = *(float *)(*(_QWORD *)&v29 + 184);
      v42.f64[0] = *(float *)(*(_QWORD *)&v28 + 160);
      v46 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v28 + 164));
      v136 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v28 + 152));
      v47 = (float64x2_t)vzip1q_s64((int64x2_t)v42, v46);
      v135 = (float64x2_t)v46;
      *(_QWORD *)&v48.f64[0] = vdupq_laneq_s64(v46, 1).u64[0];
      v48.f64[1] = *(float *)(*(_QWORD *)&v28 + 172);
      v42.f64[0] = *(float *)(*(_QWORD *)&v28 + 184);
      v131 = (int8x16_t)v48;
      v132 = (int8x16_t)v44;
      v139 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v29 + 176));
      v140 = v35.f64[0];
      v133 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v28 + 176));
      v134 = v42.f64[0];
      v142 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v29 + 152));
      v167 = *(_OWORD *)&vaddq_f64(v35, v42);
      v165 = vaddq_f64(v44, v48);
      v166 = vaddq_f64(v139, v133);
      v163 = vaddq_f64(v142, v136);
      v164 = vaddq_f64(v45, v47);
      sub_20E8BE424((uint64_t)&v157);
      v49 = (float64x2_t)vextq_s8(v137, v137, 8uLL);
      v50 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
      _D1 = vextq_s8(v132, v132, 8uLL).u64[0];
      _D7 = vextq_s8(v131, v131, 8uLL).u64[0];
      _V17.D[1] = v157.f64[1];
      _V5.D[1] = v159.f64[1];
      _V3.D[1] = v161.f64[1];
      __asm
      {
        FMLA            D19, D7, V17.D[1]
        FMLA            D21, D7, V5.D[1]
        FMLA            D23, D7, V3.D[1]
      }
      v62 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v136, v157.f64[0]), v135, v157, 1), v133, v158), *(double *)v137.i64), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v136, v159.f64[0]), v135, v159, 1), v133, v160), v49.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v136, v161.f64[0]), v135, v161, 1), v133, v162), v138);
      v49.f64[0] = (_D19 + v134 * v158) * *(double *)v137.i64
                 + (_D21 + v134 * v160) * v49.f64[0]
                 + (_D23 + v134 * v162) * v138;
      __asm { FMLA            D19, D1, V17.D[1] }
      v64 = _D19 + v140 * v158;
      __asm { FMLA            D19, D1, V5.D[1] }
      v66 = _D19 + v140 * v160;
      __asm { FMLA            D19, D1, V3.D[1] }
      v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v157.f64[0]), v141, v157, 1), v139, v158), *(double *)v145.i64), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v159.f64[0]), v141, v159, 1), v139, v160), v50.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v161.f64[0]), v141, v161, 1), v139, v162), v147);
      v50.f64[0] = v64 * *(double *)v145.i64 + v66 * v50.f64[0] + (_D19 + v140 * v162) * v147;
      v146 = (int8x16_t)vaddq_f64(v62, v68);
      v143 = *(_OWORD *)&vaddq_f64(v49, v50);
      v144 = vextq_s8(v146, v146, 8uLL).u64[0];
      v41 = 1;
      goto LABEL_150;
    }
    v41 = 0;
  }
  v146.i64[0] = v33;
  v144 = v33;
  v143 = v33;
LABEL_150:
  v114 = a8 + 1;
  v115 = (uint64_t *)a8[1];
  if (!v115)
    goto LABEL_175;
  v117 = *(_QWORD *)(*(_QWORD *)&v29 + 24);
  v116 = *(_QWORD *)(*(_QWORD *)&v29 + 32);
  v119 = *(_QWORD *)(*(_QWORD *)&v28 + 24);
  v118 = *(_QWORD *)(*(_QWORD *)&v28 + 32);
  v120 = a8 + 1;
  v121 = (uint64_t)(a8 + 1);
  v122 = a8[1];
  do
  {
    v123 = *(_QWORD *)(v122 + 32);
    if (v123 < v117)
    {
      v122 += 8;
    }
    else if (v123 == v117)
    {
      if (*(_DWORD *)(v122 + 40) < v116)
        v122 += 8;
      else
        v121 = v122;
    }
    else
    {
      v121 = v122;
    }
    v122 = *(_QWORD *)v122;
  }
  while (v122);
  if ((uint64_t *)v121 == v114)
    goto LABEL_175;
  v124 = *(_QWORD *)(v121 + 32);
  if (v117 < v124 || v117 == v124 && *(_DWORD *)(v121 + 40) > v116)
    goto LABEL_175;
  do
  {
    v125 = v115[4];
    if (v125 < v119)
    {
      ++v115;
    }
    else if (v125 == v119)
    {
      if (*((_DWORD *)v115 + 10) < v118)
        ++v115;
      else
        v120 = v115;
    }
    else
    {
      v120 = v115;
    }
    v115 = (uint64_t *)*v115;
  }
  while (v115);
  if (v120 == v114 || (v126 = v120[4], v119 < v126) || v119 == v126 && *((_DWORD *)v120 + 10) > v118)
  {
LABEL_175:
    v29 = 0.0;
    v163 = 0uLL;
  }
  else
  {
    sub_20F28ACAC((uint64_t **)a8, v121, v120, &v163);
    v29 = v163.f64[0];
    v128 = v41 ^ 1;
    if (!*(_QWORD *)&v163.f64[0])
      v128 = 1;
    if ((v128 & 1) == 0)
    {
      v129 = *(_QWORD *)&v163.f64[0] + 40;
      if (!*(_BYTE *)(*(_QWORD *)&v163.f64[0] + 192))
        v129 = 0;
      *(_QWORD *)(v129 + 24) = v143;
      *(_QWORD *)&v130 = v146.i64[0];
      *((_QWORD *)&v130 + 1) = v144;
      *(_OWORD *)(v129 + 8) = v130;
    }
  }
  v105 = v163.f64[1];
  if (*(_QWORD *)&v163.f64[1])
  {
    v127 = (unint64_t *)(*(_QWORD *)&v163.f64[1] + 8);
    do
      v107 = __ldaxr(v127);
    while (__stlxr(v107 - 1, v127));
LABEL_179:
    if (!v107)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v105 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v105));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v105);
    }
  }
LABEL_86:
  v81 = *(std::__shared_weak_count **)&v153.f64[1];
  if (*(_QWORD *)&v153.f64[1])
  {
    v82 = (unint64_t *)(*(_QWORD *)&v153.f64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *(std::__shared_weak_count **)&v154.f64[1];
  if (*(_QWORD *)&v154.f64[1])
  {
    v85 = (unint64_t *)(*(_QWORD *)&v154.f64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  return *(_QWORD *)&v29;
}

void sub_20F2DD8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  sub_20E86665C((uint64_t)&a46);
  sub_20E86665C((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F2DD96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_20E86665C((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F2DD980(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, _BYTE *a11)
{
  float64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  float64x2_t v17;
  float64x2_t v18;
  int8x16_t v19;
  float64x2_t v20;
  float64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  __int128 v35;
  double v36;
  float64x2_t v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int8x16_t v48;
  int8x16_t v49;
  float64x2_t v50;
  int8x16_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  int8x16_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  double v107;
  uint64_t v108;
  _OWORD *v109;
  double v110;
  float64x2_t v111;
  double v112;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  double v119;
  double v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  _OWORD *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  float v150;
  double v151;
  int v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  double *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  __int128 *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  double v174;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  _OWORD *v188;
  char *v189;
  _OWORD *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  _OWORD *v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  float v212;
  double v213;
  int v214;
  uint64_t v215;
  double v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  double *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  __int128 *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  int8x16_t v237;
  int8x16_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  int64x2_t v244;
  uint64_t v245;
  __int128 v246;
  float64x2_t v247;
  char *v248;
  unint64_t v249;
  unsigned int v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  float32x2_t *v255;
  unsigned int v256;
  unint64_t v257;
  double v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  unint64_t v265;
  _DWORD *v266;
  _DWORD *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t *v277;
  uint64_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int8x16_t v284;
  uint64_t v285;
  float64x2_t v286;
  __n128 v287;
  unint64_t v288;
  float64_t v293;
  float64_t v294;
  __int128 v295;
  uint64_t v296;
  __int128 v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t *v301;
  unint64_t v302;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  char *v309;
  __int128 v310;
  __int128 v311;
  void *v312;
  unint64_t v313;
  uint64_t v314;
  int64x2_t v315;
  double v316;
  _BYTE v317[72];
  __int128 v318;
  double v319;
  float64x2_t v320;
  double v321;
  float64x2_t v322;
  double v323;
  void *__p;
  void *v325;
  uint64_t v326;
  void *v327;
  _BYTE *v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  int64x2_t v332;
  uint64_t v333;
  float64x2_t v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  _QWORD __src[39];

  __src[36] = *MEMORY[0x24BDAC8D0];
  v328 = 0;
  v327 = 0;
  v329 = 0;
  v325 = 0;
  __p = 0;
  v326 = 0;
  sub_20EDCA350((uint64_t)a6, a7 + 72, *(_QWORD *)(a1 + 40), 0, (char **)&v327, (char **)&__p, *(double *)(a1 + 24));
  v14 = v328 - (_BYTE *)v327;
  if ((unint64_t)(v328 - (_BYTE *)v327) <= 0x77)
    goto LABEL_264;
  v18.f64[0] = *(float64_t *)(a4 + 16);
  v15 = *(int64x2_t *)(a4 + 24);
  _Q5 = *(int64x2_t *)(a4 + 48);
  v17 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a4, v15);
  v29 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, v15);
  v18.f64[1] = *(float64_t *)(a4 + 40);
  v19 = vextq_s8((int8x16_t)v29, (int8x16_t)vdupq_laneq_s64(_Q5, 1), 8uLL);
  v13.f64[0] = *(float64_t *)(a4 + 88);
  v20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, *(double *)(a4 + 72)), v29, *(float64x2_t *)(a4 + 72), 1), v18, v13.f64[0]);
  _D7 = *(_QWORD *)(a4 + 80);
  __asm { FMLA            D17, D7, V5.D[1] }
  v13.f64[0] = _D17 + *(double *)(a4 + 64) * v13.f64[0];
  *(_QWORD *)&v27 = *(_OWORD *)&vnegq_f64(v13);
  v28 = (float64x2_t)*(unint64_t *)(a4 + 48);
  *(_QWORD *)&v29.f64[1] = v19.i64[0];
  v30 = (float64x2_t)_D7;
  *(_QWORD *)&v30.f64[0] = v19.i64[1];
  v31 = (float64x2_t)*(unint64_t *)(a4 + 64);
  __asm { FMOV            V21.2D, #1.0 }
  v33.f64[1] = *((float64_t *)&_Q21 + 1);
  v33.f64[0] = v27;
  _Q17 = *(_OWORD *)(a3 + 72);
  v35 = *(_OWORD *)(a3 + 80);
  v36 = *(double *)(a3 + 88);
  _Q27 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17, *(double *)&_Q17), v29, *(double *)&v35), v18, v36), v20);
  v38 = vaddq_f64(v33, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v28.f64[0], *(double *)&_Q17), (float64x2_t)*(unint64_t *)&v30.f64[0], *(double *)&v35), (float64x2_t)*(unint64_t *)&v31.f64[0], v36));
  _D8 = _Q27.f64[1];
  __asm { FMLA            D17, D8, V27.D[1] }
  if (sqrt(vmlad_n_f64(*(double *)&_Q17, v38.f64[0], v38.f64[0])) < 0.00000001)
  {
LABEL_264:
    if (*(_BYTE *)(a10 + 128))
      *(_BYTE *)(a10 + 128) = 0;
    if (a11[288])
      a11[288] = 0;
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    goto LABEL_8;
  }
  v278 = *((_QWORD *)&_Q21 + 1);
  v40 = *(_OWORD *)(a3 + 16);
  v41 = *(_OWORD *)(a3 + 8);
  v42 = *(_OWORD *)(a3 + 24);
  v43 = *(_OWORD *)(a3 + 32);
  v44 = *(_OWORD *)(a3 + 48);
  v45 = *(_OWORD *)(a3 + 40);
  v46 = *(_OWORD *)(a3 + 56);
  v47 = *(_OWORD *)(a3 + 64);
  v48 = (int8x16_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17, *(double *)a3), v29, *(double *)&v41), v18, *(double *)&v40), (float64x2_t)0, v20);
  v49 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, *(double *)a3), v30, *(double *)&v41), v31, *(double *)&v40), (float64x2_t)0, v33);
  v50 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17, *(double *)&v42), v29, *(double *)&v43), v18, *(double *)&v45), (float64x2_t)0, v20);
  v51 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, *(double *)&v42), v30, *(double *)&v43), v31, *(double *)&v45), (float64x2_t)0, v33);
  v52 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17, *(double *)&v44), v29, *(double *)&v46), v18, *(double *)&v47), (float64x2_t)0, v20);
  v53 = (float64x2_t)vextq_s8((int8x16_t)_Q27, (int8x16_t)_Q27, 8uLL);
  v54.f64[0] = v38.f64[0];
  v54.f64[1] = _Q27.f64[0];
  v55.f64[0] = _Q27.f64[0];
  v55.f64[1] = v53.f64[0];
  v56 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, *(double *)&v44), v30, *(double *)&v46), v31, *(double *)&v47), (float64x2_t)0, v33);
  v57 = vmlsq_f64(vmulq_laneq_f64(_Q27, v52, 1), v53, v52);
  v53.f64[1] = v38.f64[0];
  *(_QWORD *)&v58.f64[0] = v56.i64[0];
  v58.f64[1] = v52.f64[0];
  *(_QWORD *)&v59.f64[0] = v48.i64[0];
  v59.f64[1] = v50.f64[1];
  v60 = vmlsq_f64(vmulq_f64(v53, (float64x2_t)vzip1q_s64((int64x2_t)v49, (int64x2_t)v48)), v54, (float64x2_t)vextq_s8(v48, v49, 8uLL));
  v61 = vmlsq_f64(vmulq_f64(v55, (float64x2_t)vextq_s8(v48, v51, 8uLL)), v53, v59);
  v62 = vmlsq_f64(vmulq_f64(v54, v50), v55, (float64x2_t)vzip1q_s64((int64x2_t)v51, (int64x2_t)v50));
  v63 = vmlsq_f64(vmulq_f64(v53, v58), v54, (float64x2_t)vextq_s8((int8x16_t)v52, v56, 8uLL));
  v64 = vmulq_f64(v63, v63);
  v65 = vmulq_f64(v62, v62);
  v66 = vmulq_f64(v61, v61);
  v64.f64[0] = sqrt(vmulq_f64(v57, v57).f64[0]+ v64.f64[1]+ v64.f64[0]+ v65.f64[1]+ v65.f64[0]+ v66.f64[1]+ v66.f64[0]+ vaddvq_f64(vmulq_f64(v60, v60)));
  v67 = (float64x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v62, 8uLL);
  v60.f64[1] = v61.f64[1];
  v61.f64[1] = v62.f64[1];
  v64.f64[0] = 1.0 / v64.f64[0];
  v318 = (__int128)vmulq_n_f64(v60, v64.f64[0]);
  v320 = vmulq_n_f64(v67, v64.f64[0]);
  *(_QWORD *)&v319 = *(_OWORD *)&vmulq_f64(v63, v64);
  *(_QWORD *)&v321 = *(_OWORD *)&vmulq_laneq_f64(v64, v63, 1);
  v322 = vmulq_n_f64(v61, v64.f64[0]);
  *(_QWORD *)&v323 = *(_OWORD *)&vmulq_f64(v57, v64);
  v279 = vzip1q_s64((int64x2_t)v48, (int64x2_t)v50);
  v280 = (int64x2_t)v56;
  v315 = v279;
  v316 = v52.f64[0];
  v285 = v48.i64[1];
  v286 = _Q27;
  *(float64_t *)v317 = _Q27.f64[0];
  v283 = (int64x2_t)v50;
  v284 = v49;
  v281 = (int64x2_t)v52;
  v282 = (int64x2_t)v51;
  *(int64x2_t *)&v317[8] = vzip2q_s64((int64x2_t)v48, (int64x2_t)v50);
  *(int64x2_t *)&v317[24] = vzip2q_s64((int64x2_t)v52, (int64x2_t)v55);
  *(_QWORD *)&v55.f64[0] = v56.i64[0];
  v287 = (__n128)v38;
  v55.f64[1] = v38.f64[0];
  *(int64x2_t *)&v317[40] = vzip1q_s64((int64x2_t)v49, (int64x2_t)v51);
  *(float64x2_t *)&v317[56] = v55;
  v312 = 0;
  v313 = 0;
  v314 = 0;
  v311 = 0uLL;
  v308 = 0;
  v309 = 0;
  v310 = 0uLL;
  v288 = v328 - (_BYTE *)v327;
  v68 = v14 >> 2;
  v305 = 0;
  v306 = 0;
  v307 = 0;
  sub_20E8B3B5C((char **)&v312, v14 >> 2);
  if (v68)
  {
    if (v288 > 0x3FFFFFFFFFFFFFFCLL)
      goto LABEL_259;
    v73 = v311;
    v74 = (char *)operator new(4 * v288);
    v75 = &v74[v311 & 0xFFFFFFFFFFFFFFF0];
    v76 = v75;
    if ((_QWORD)v311)
    {
      v77 = &v74[v311 & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v76 = v77 - 16;
        *((_OWORD *)v77 - 1) = *(_OWORD *)(v73 - 16);
        v73 -= 16;
        v77 -= 16;
      }
      while (v73);
    }
    *((_QWORD *)&v310 + 1) = v76;
    *(_QWORD *)&v311 = v75;
    *((_QWORD *)&v311 + 1) = &v74[16 * v68];
  }
  v78 = (char *)v308;
  if (v68 <= (uint64_t)(v310 - (_QWORD)v308) >> 4)
    goto LABEL_26;
  if (v288 >= 0x3FFFFFFFFFFFFFFDLL)
LABEL_259:
    sub_20E867F44();
  v79 = v309;
  v80 = (char *)operator new(4 * v288);
  v81 = &v80[(v309 - (_BYTE *)v308) & 0xFFFFFFFFFFFFFFF0];
  v82 = v81;
  if (v309 != v308)
  {
    v83 = &v80[(v309 - (_BYTE *)v308) & 0xFFFFFFFFFFFFFFF0];
    do
    {
      v82 = v83 - 16;
      *((_OWORD *)v83 - 1) = *((_OWORD *)v79 - 1);
      v79 -= 16;
      v83 -= 16;
    }
    while (v79 != v78);
  }
  v308 = v82;
  v309 = v81;
  *(_QWORD *)&v310 = &v80[16 * v68];
  if (v78)
    operator delete(v78);
LABEL_26:
  v84 = v305;
  if (v68 > (v307 - (uint64_t)v305) >> 3)
  {
    if (v288 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20E867F44();
    v85 = v306;
    v86 = (char *)operator new(2 * v288);
    v87 = v306 - (_QWORD)v305;
    v88 = (uint64_t)&v86[(v306 - (_QWORD)v305) & 0xFFFFFFFFFFFFFFF8];
    v89 = (char *)v88;
    if ((void *)v306 == v305)
      goto LABEL_36;
    if ((unint64_t)(v87 - 8) >= 0x58)
    {
      v89 = &v86[(v306 - (_QWORD)v305) & 0xFFFFFFFFFFFFFFF8];
      if (v306 - (_QWORD)v86 - (v87 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v90 = v87 >> 3;
        v91 = ((unint64_t)(v87 - 8) >> 3) + 1;
        v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        v93 = v306 - v92;
        v89 = (char *)(v88 - v92);
        v94 = &v86[8 * v90 - 16];
        v95 = (__int128 *)(v306 - 16);
        v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v97 = *v95;
          *((_OWORD *)v94 - 1) = *(v95 - 1);
          *(_OWORD *)v94 = v97;
          v94 -= 32;
          v95 -= 2;
          v96 -= 4;
        }
        while (v96);
        v85 = v93;
        if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          v305 = v89;
          v306 = v88;
          v307 = (uint64_t)&v86[8 * v68];
          if (v84)
            operator delete(v84);
          goto LABEL_38;
        }
      }
    }
    else
    {
      v89 = &v86[(v306 - (_QWORD)v305) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v98 = *(_QWORD *)(v85 - 8);
      v85 -= 8;
      *((_QWORD *)v89 - 1) = v98;
      v89 -= 8;
    }
    while ((void *)v85 != v84);
    goto LABEL_36;
  }
LABEL_38:
  v99 = 0;
  v100 = 0;
  v301 = a7 + 9;
  v302 = v68;
  v299 = 0;
  do
  {
    while (1)
    {
      v102 = 4 * v99;
      v103 = *(_DWORD *)((char *)v327 + v102);
      v104 = a6[9];
      v105 = v104 + 40 * v103;
      v107 = *(double *)(v105 + 16);
      *(_QWORD *)&_Q16 = *(_QWORD *)(v105 + 24);
      v106 = (_OWORD *)(v105 + 16);
      v108 = *v301 + 40 * *(unsigned int *)((char *)__p + v102);
      v110 = *(double *)(v108 + 16);
      *(_QWORD *)&_Q6 = *(_QWORD *)(v108 + 24);
      v109 = (_OWORD *)(v108 + 16);
      v111.f64[0] = v319;
      v112 = v323;
      _V17.D[1] = v322.f64[1];
      v111.f64[1] = v321;
      _Q3 = vaddq_f64(v111, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v318, (int64x2_t)v320), v107), (float64x2_t)vzip2q_s64((int64x2_t)v318, (int64x2_t)v320), *(double *)&_Q16));
      v115 = vaddq_f64(v322, vmlaq_n_f64(vmulq_n_f64((float64x2_t)v318, v110), v320, *(double *)&_Q6));
      v116 = vmulq_f64(_Q3, _Q3);
      v117 = vmulq_f64(v115, v115);
      v118 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v117, 1), vaddq_f64(vaddq_f64(v116, (float64x2_t)vdupq_laneq_s64((int64x2_t)v116, 1)), v117)).f64[0];
      if (v118 == 0.0)
        v119 = 1.0;
      else
        v119 = 1.0 / v118;
      v120 = *(double *)(a1 + 48);
      v121 = v313;
      if (v313 == v314 << 6)
      {
        v293 = _Q3.f64[1];
        v294 = v322.f64[1];
        v295 = _Q16;
        v296 = v71;
        v297 = _Q6;
        v298 = v69;
        if ((uint64_t)(v313 + 1) < 0)
          sub_20E867F44();
        v122 = v314 << 7;
        if (v314 << 7 <= (v313 & 0xFFFFFFFFFFFFFFC0) + 64)
          v122 = (v313 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v313 <= 0x3FFFFFFFFFFFFFFELL)
          v123 = v122;
        else
          v123 = 0x7FFFFFFFFFFFFFFFLL;
        sub_20E8B3B5C((char **)&v312, v123);
        v121 = v313;
        _Q6 = v297;
        v69 = v298;
        _Q16 = v295;
        v71 = v296;
        _Q3.f64[1] = v293;
        _V17.D[1] = v294;
      }
      __asm
      {
        FMLA            D0, D16, V17.D[1]
        FMLA            D1, D6, V3.D[1]
      }
      v313 = v121 + 1;
      v126 = v121 >> 6;
      v127 = 1 << v121;
      v128 = 8 * v126;
      if ((v112 + _D0 + _D1) * (v112 + _D0 + _D1) * v119 <= v120)
        break;
      *(_QWORD *)((char *)v312 + v128) &= ~v127;
      v101 = v302;
      v99 = ++v100;
      if (v302 <= v100)
        goto LABEL_119;
    }
    *(_QWORD *)((char *)v312 + v128) |= v127;
    v129 = (char *)v311;
    if ((unint64_t)v311 < *((_QWORD *)&v311 + 1))
    {
      *(_OWORD *)v311 = *v106;
      v130 = v129 + 16;
      goto LABEL_65;
    }
    v131 = (char *)*((_QWORD *)&v310 + 1);
    v132 = (uint64_t)(v311 - *((_QWORD *)&v310 + 1)) >> 4;
    v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 60)
      goto LABEL_251;
    v134 = *((_QWORD *)&v311 + 1) - *((_QWORD *)&v310 + 1);
    if ((uint64_t)(*((_QWORD *)&v311 + 1) - *((_QWORD *)&v310 + 1)) >> 3 > v133)
      v133 = v134 >> 3;
    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF0)
      v135 = 0xFFFFFFFFFFFFFFFLL;
    else
      v135 = v133;
    if (v135)
    {
      if (v135 >> 60)
        goto LABEL_248;
      v136 = (char *)operator new(16 * v135);
      v137 = &v136[16 * v132];
      *(_OWORD *)v137 = *v106;
      v138 = (uint64_t)v137;
      if (v129 == v131)
      {
LABEL_63:
        v130 = v137 + 16;
        *((_QWORD *)&v310 + 1) = v138;
        *(_QWORD *)&v311 = v137 + 16;
        *((_QWORD *)&v311 + 1) = &v136[16 * v135];
        if (!v129)
          goto LABEL_65;
LABEL_64:
        operator delete(v129);
        goto LABEL_65;
      }
    }
    else
    {
      v136 = 0;
      v137 = (char *)(16 * v132);
      *(_OWORD *)(16 * v132) = *v106;
      v138 = 16 * v132;
      if (v129 == v131)
        goto LABEL_63;
    }
    do
    {
      *(_OWORD *)(v138 - 16) = *((_OWORD *)v129 - 1);
      v138 -= 16;
      v129 -= 16;
    }
    while (v129 != v131);
    v129 = (char *)*((_QWORD *)&v310 + 1);
    v130 = v137 + 16;
    *((_QWORD *)&v310 + 1) = v138;
    *(_QWORD *)&v311 = v137 + 16;
    *((_QWORD *)&v311 + 1) = &v136[16 * v135];
    if (v129)
      goto LABEL_64;
LABEL_65:
    *(_QWORD *)&v311 = v130;
    v139 = v309;
    if ((unint64_t)v309 >= (unint64_t)v310)
    {
      v141 = (char *)v308;
      v142 = (v309 - (_BYTE *)v308) >> 4;
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 60)
LABEL_251:
        sub_20E867F44();
      v144 = v310 - (_QWORD)v308;
      if ((uint64_t)(v310 - (_QWORD)v308) >> 3 > v143)
        v143 = v144 >> 3;
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF0)
        v145 = 0xFFFFFFFFFFFFFFFLL;
      else
        v145 = v143;
      if (v145)
      {
        if (v145 >> 60)
LABEL_248:
          sub_20E877A38();
        v146 = (char *)operator new(16 * v145);
        v147 = &v146[16 * v142];
        *(_OWORD *)v147 = *v109;
        v148 = v147;
        if (v139 != v141)
        {
          do
          {
LABEL_106:
            *((_OWORD *)v148 - 1) = *((_OWORD *)v139 - 1);
            v148 -= 16;
            v139 -= 16;
          }
          while (v139 != v141);
          v139 = (char *)v308;
          v140 = v147 + 16;
          v308 = v148;
          v309 = v147 + 16;
          *(_QWORD *)&v310 = &v146[16 * v145];
          if (!v139)
            goto LABEL_78;
LABEL_77:
          operator delete(v139);
          goto LABEL_78;
        }
      }
      else
      {
        v146 = 0;
        v147 = (char *)(16 * v142);
        *(_OWORD *)(16 * v142) = *v109;
        v148 = (char *)(16 * v142);
        if (v139 != v141)
          goto LABEL_106;
      }
      v140 = v147 + 16;
      v308 = v148;
      v309 = v147 + 16;
      *(_QWORD *)&v310 = &v146[16 * v145];
      if (v139)
        goto LABEL_77;
    }
    else
    {
      *(_OWORD *)v309 = *v109;
      v140 = v139 + 16;
    }
LABEL_78:
    v309 = v140;
    v149 = a7[3];
    v150 = *(float *)(v104 + 40 * v103 + 32);
    v151 = *(double *)(a1 + 72);
    v152 = *(_DWORD *)(v149 + 992);
    if (v152 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_244;
      }
      v152 = *(_DWORD *)(v149 + 992);
    }
    if (!v152)
      goto LABEL_243;
    if (*(double *)v149 <= 0.0)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 322, (uint64_t)"impl().camera_matrix()[0] > 0", 29, (uint64_t)"Camera intrinsic focal length is smaller than zero", 50, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_244;
      }
      v152 = *(_DWORD *)(v149 + 992);
    }
    if (v152 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_244;
      }
      v152 = *(_DWORD *)(v149 + 992);
    }
    if (!v152)
    {
LABEL_243:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_244:
      abort();
    }
    v153 = v306;
    v154 = v151 * v150 / *(double *)v149;
    if (v306 < (unint64_t)v307)
    {
      *(double *)v306 = v154;
      v155 = v153 + 8;
      goto LABEL_118;
    }
    v156 = v305;
    v157 = v306 - (_QWORD)v305;
    v158 = (v306 - (uint64_t)v305) >> 3;
    v159 = v158 + 1;
    if ((unint64_t)(v158 + 1) >> 61)
      sub_20E867F44();
    v160 = v307 - (_QWORD)v305;
    if ((v307 - (uint64_t)v305) >> 2 > v159)
      v159 = v160 >> 2;
    if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
      v161 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v161 = v159;
    if (v161)
    {
      if (v161 >> 61)
        sub_20E877A38();
      v162 = (char *)operator new(8 * v161);
      v163 = (double *)&v162[8 * v158];
      *v163 = v154;
      v155 = (uint64_t)(v163 + 1);
      v164 = v153 - (_QWORD)v156;
      if ((void *)v153 == v156)
        goto LABEL_116;
LABEL_110:
      v165 = v164 - 8;
      if (v165 < 0x58)
        goto LABEL_265;
      if ((unint64_t)(v153 - (_QWORD)v162 - v157) < 0x20)
        goto LABEL_265;
      v166 = (v165 >> 3) + 1;
      v167 = 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
      v168 = v153 - v167;
      v163 = (double *)((char *)v163 - v167);
      v169 = &v162[8 * v158 - 16];
      v170 = (__int128 *)(v153 - 16);
      v171 = v166 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v172 = *v170;
        *((_OWORD *)v169 - 1) = *(v170 - 1);
        *(_OWORD *)v169 = v172;
        v169 -= 32;
        v170 -= 2;
        v171 -= 4;
      }
      while (v171);
      v153 = v168;
      if (v166 != (v166 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_265:
        do
        {
          v173 = *(_QWORD *)(v153 - 8);
          v153 -= 8;
          *((_QWORD *)v163-- - 1) = v173;
        }
        while ((void *)v153 != v156);
      }
      goto LABEL_116;
    }
    v162 = 0;
    v163 = (double *)(8 * v158);
    *(double *)(8 * v158) = v154;
    v155 = 8 * v158 + 8;
    v164 = v153 - (_QWORD)v156;
    if ((void *)v153 != v156)
      goto LABEL_110;
LABEL_116:
    v305 = v163;
    v306 = v155;
    v307 = (uint64_t)&v162[8 * v161];
    if (v156)
      operator delete(v156);
LABEL_118:
    v101 = v302;
    ++v299;
    v306 = v155;
    v99 = ++v100;
  }
  while (v302 > v100);
LABEL_119:
  v174 = (double)v299 / (double)v101;
  if (v174 <= 0.3 || v299 <= 0x1E)
  {
    v313 = 0;
    LOBYTE(__src[0]) = 0;
    LOBYTE(__src[3]) = 0;
    v332.i8[0] = 0;
    LOBYTE(v334.f64[0]) = 0;
    v176 = sub_20F243A10((uint64_t)a6, v301, 2, (unsigned int **)&v327, (unsigned int **)&__p, (uint64_t)&v312, (uint64_t)&v318, 1, &v315, 1, (uint64_t)__src, (uint64_t)&v332);
    v180 = 0;
    v181 = 0;
    v299 = v176;
    v174 = (double)(unint64_t)v176 / (double)v101;
    *(_QWORD *)&v311 = *((_QWORD *)&v310 + 1);
    v309 = (char *)v308;
    v306 = (uint64_t)v305;
    while (2)
    {
      if (((*(_QWORD *)((char *)v312 + ((v180 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v180) & 1) == 0)
        goto LABEL_126;
      v183 = 4 * v180;
      v184 = *(_DWORD *)((char *)v327 + v183);
      v185 = a6[9];
      v186 = *(_DWORD *)((char *)__p + v183);
      v187 = *v301;
      v188 = (_OWORD *)(v185 + 40 * v184 + 16);
      v189 = (char *)v311;
      if ((unint64_t)v311 < *((_QWORD *)&v311 + 1))
      {
        *(_OWORD *)v311 = *v188;
        *(_QWORD *)&v311 = v189 + 16;
        v190 = (_OWORD *)(v187 + 40 * v186 + 16);
        v192 = v309;
        v191 = v310;
        if ((unint64_t)v309 < (unint64_t)v310)
          goto LABEL_130;
LABEL_143:
        v203 = (char *)v308;
        v204 = (v192 - (_BYTE *)v308) >> 4;
        v205 = v204 + 1;
        if ((unint64_t)(v204 + 1) >> 60)
LABEL_255:
          sub_20E867F44();
        v206 = v191 - (_QWORD)v308;
        if (v206 >> 3 > v205)
          v205 = v206 >> 3;
        if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF0)
          v207 = 0xFFFFFFFFFFFFFFFLL;
        else
          v207 = v205;
        if (v207)
        {
          if (v207 >> 60)
LABEL_252:
            sub_20E877A38();
          v208 = (char *)operator new(16 * v207);
          v209 = &v208[16 * v204];
          *(_OWORD *)v209 = *v190;
          v210 = v209;
          if (v192 == v203)
          {
LABEL_160:
            v193 = v209 + 16;
            v308 = v210;
            v309 = v209 + 16;
            *(_QWORD *)&v310 = &v208[16 * v207];
            if (v192)
              operator delete(v192);
            goto LABEL_162;
          }
        }
        else
        {
          v208 = 0;
          v209 = (char *)(16 * v204);
          *(_OWORD *)(16 * v204) = *v190;
          v210 = (char *)(16 * v204);
          if (v192 == v203)
            goto LABEL_160;
        }
        do
        {
          *((_OWORD *)v210 - 1) = *((_OWORD *)v192 - 1);
          v210 -= 16;
          v192 -= 16;
        }
        while (v192 != v203);
        v192 = (char *)v308;
        goto LABEL_160;
      }
      v194 = (char *)*((_QWORD *)&v310 + 1);
      v195 = (uint64_t)(v311 - *((_QWORD *)&v310 + 1)) >> 4;
      v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 60)
        goto LABEL_255;
      v197 = *((_QWORD *)&v311 + 1) - *((_QWORD *)&v310 + 1);
      if ((uint64_t)(*((_QWORD *)&v311 + 1) - *((_QWORD *)&v310 + 1)) >> 3 > v196)
        v196 = v197 >> 3;
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF0)
        v198 = 0xFFFFFFFFFFFFFFFLL;
      else
        v198 = v196;
      if (v198)
      {
        if (v198 >> 60)
          goto LABEL_252;
        v199 = (char *)operator new(16 * v198);
        v200 = &v199[16 * v195];
        *(_OWORD *)v200 = *v188;
        v201 = (uint64_t)v200;
        if (v189 == v194)
        {
LABEL_140:
          v202 = v200 + 16;
          *((_QWORD *)&v310 + 1) = v201;
          *(_QWORD *)&v311 = v200 + 16;
          *((_QWORD *)&v311 + 1) = &v199[16 * v198];
          if (v189)
            goto LABEL_141;
          goto LABEL_142;
        }
      }
      else
      {
        v199 = 0;
        v200 = (char *)(16 * v195);
        *(_OWORD *)(16 * v195) = *v188;
        v201 = 16 * v195;
        if (v189 == v194)
          goto LABEL_140;
      }
      do
      {
        *(_OWORD *)(v201 - 16) = *((_OWORD *)v189 - 1);
        v201 -= 16;
        v189 -= 16;
      }
      while (v189 != v194);
      v189 = (char *)*((_QWORD *)&v310 + 1);
      v202 = v200 + 16;
      *((_QWORD *)&v310 + 1) = v201;
      *(_QWORD *)&v311 = v200 + 16;
      *((_QWORD *)&v311 + 1) = &v199[16 * v198];
      if (v189)
LABEL_141:
        operator delete(v189);
LABEL_142:
      *(_QWORD *)&v311 = v202;
      v190 = (_OWORD *)(v187 + 40 * v186 + 16);
      v192 = v309;
      v191 = v310;
      if ((unint64_t)v309 >= (unint64_t)v310)
        goto LABEL_143;
LABEL_130:
      *(_OWORD *)v192 = *v190;
      v193 = v192 + 16;
LABEL_162:
      v309 = v193;
      v211 = a7[3];
      v212 = *(float *)(v185 + 40 * v184 + 32);
      v213 = *(double *)(a1 + 72);
      v214 = *(_DWORD *)(v211 + 992);
      if (v214 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_246;
        }
        v214 = *(_DWORD *)(v211 + 992);
      }
      if (!v214)
        goto LABEL_245;
      if (*(double *)v211 <= 0.0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 322, (uint64_t)"impl().camera_matrix()[0] > 0", 29, (uint64_t)"Camera intrinsic focal length is smaller than zero", 50, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_246;
        }
        v214 = *(_DWORD *)(v211 + 992);
      }
      if (v214 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_246;
        }
        v214 = *(_DWORD *)(v211 + 992);
      }
      if (!v214)
      {
LABEL_245:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_246:
        abort();
      }
      v215 = v306;
      v216 = v213 * v212 / *(double *)v211;
      if (v306 >= (unint64_t)v307)
      {
        v217 = v305;
        v218 = v306 - (_QWORD)v305;
        v219 = (v306 - (uint64_t)v305) >> 3;
        v220 = v219 + 1;
        if ((unint64_t)(v219 + 1) >> 61)
          sub_20E867F44();
        v221 = v307 - (_QWORD)v305;
        if ((v307 - (uint64_t)v305) >> 2 > v220)
          v220 = v221 >> 2;
        if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFF8)
          v222 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v222 = v220;
        if (v222)
        {
          if (v222 >> 61)
            sub_20E877A38();
          v223 = (char *)operator new(8 * v222);
          v224 = (double *)&v223[8 * v219];
          *v224 = v216;
          v182 = (uint64_t)(v224 + 1);
          v225 = v215 - (_QWORD)v217;
          if ((void *)v215 == v217)
          {
LABEL_191:
            v305 = v224;
            v306 = v182;
            v307 = (uint64_t)&v223[8 * v222];
            if (v217)
              operator delete(v217);
LABEL_125:
            v306 = v182;
            v101 = v302;
LABEL_126:
            v180 = ++v181;
            if (v101 <= v181)
              goto LABEL_194;
            continue;
          }
        }
        else
        {
          v223 = 0;
          v224 = (double *)(8 * v219);
          *(double *)(8 * v219) = v216;
          v182 = 8 * v219 + 8;
          v225 = v215 - (_QWORD)v217;
          if ((void *)v215 == v217)
            goto LABEL_191;
        }
        v226 = v225 - 8;
        if (v226 < 0x58)
          goto LABEL_266;
        if ((unint64_t)(v215 - (_QWORD)v223 - v218) < 0x20)
          goto LABEL_266;
        v227 = (v226 >> 3) + 1;
        v228 = 8 * (v227 & 0x3FFFFFFFFFFFFFFCLL);
        v229 = v215 - v228;
        v224 = (double *)((char *)v224 - v228);
        v230 = &v223[8 * v219 - 16];
        v231 = (__int128 *)(v215 - 16);
        v232 = v227 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v233 = *v231;
          *((_OWORD *)v230 - 1) = *(v231 - 1);
          *(_OWORD *)v230 = v233;
          v230 -= 32;
          v231 -= 2;
          v232 -= 4;
        }
        while (v232);
        v215 = v229;
        if (v227 != (v227 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_266:
          do
          {
            v234 = *(_QWORD *)(v215 - 8);
            v215 -= 8;
            *((_QWORD *)v224-- - 1) = v234;
          }
          while ((void *)v215 != v217);
        }
        goto LABEL_191;
      }
      break;
    }
    *(double *)v306 = v216;
    v182 = v215 + 8;
    goto LABEL_125;
  }
  _Q2 = v286;
  _Q0 = vmulq_f64(_Q2, _Q2);
  __asm { FMLA            D0, D8, V2.D[1] }
  _Q0.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q0.f64[0], v287.n128_f64[0], v287.n128_f64[0]));
  v237 = (int8x16_t)vmulq_n_f64(v286, _Q0.f64[0]);
  v315 = v279;
  v316 = *(double *)v281.i64;
  v238 = vextq_s8(v237, v284, 8uLL);
  v237.i64[1] = v285;
  *(int8x16_t *)v317 = v237;
  *(int64x2_t *)&v317[16] = vzip2q_s64(v283, v281);
  *(int8x16_t *)&v317[32] = v238;
  *(int64x2_t *)&v317[48] = vzip1q_s64(v282, v280);
  *(_QWORD *)&v317[64] = *(_OWORD *)&vmulq_f64((float64x2_t)v287, _Q0);
  sub_20EB871A8((uint64_t)&v315, *((double **)&v310 + 1), (float64x2_t *)v308, (uint64_t)(v311 - *((_QWORD *)&v310 + 1)) >> 4, *(_DWORD *)(a1 + 176), *(double *)(a1 + 136), *(double *)(a1 + 192), *(double *)(a1 + 200), v287);
  *(double *)&v318 = *(double *)&v317[32] * *(double *)&v317[40] - *(double *)&v317[64] * *(double *)&v317[8];
  *((double *)&v318 + 1) = *(double *)&v317[32] * *(double *)&v317[48] - *(double *)&v317[64] * *(double *)&v317[16];
  v319 = *(double *)&v317[32] * *(double *)&v317[56] - *(double *)&v317[64] * *(double *)&v317[24];
  v320.f64[0] = *(double *)&v317[64] * *(double *)v315.i64 - *(double *)&v317[40] * *(double *)v317;
  v320.f64[1] = *(double *)&v317[64] * *(double *)&v315.i64[1] - *(double *)&v317[48] * *(double *)v317;
  v321 = *(double *)&v317[64] * v316 - *(double *)&v317[56] * *(double *)v317;
  v322.f64[0] = *(double *)&v317[8] * *(double *)v317 - *(double *)&v317[32] * *(double *)v315.i64;
  v322.f64[1] = *(double *)&v317[16] * *(double *)v317 - *(double *)&v317[32] * *(double *)&v315.i64[1];
  v323 = *(double *)&v317[24] * *(double *)v317 - *(double *)&v317[32] * v316;
LABEL_194:
  if (v174 >= 0.3 && v299 > 0x1D)
  {
    *(_OWORD *)(a10 + 64) = xmmword_2103AC178;
    *(_OWORD *)(a10 + 80) = unk_2103AC188;
    *(_OWORD *)(a10 + 96) = xmmword_2103AC198;
    *(_OWORD *)(a10 + 112) = unk_2103AC1A8;
    *(_OWORD *)a10 = xmmword_2103AC138;
    *(_OWORD *)(a10 + 16) = unk_2103AC148;
    *(_OWORD *)(a10 + 32) = xmmword_2103AC158;
    *(_OWORD *)(a10 + 48) = unk_2103AC168;
    if (!*(_BYTE *)(a10 + 128))
      *(_BYTE *)(a10 + 128) = 1;
    *((_QWORD *)&v239 + 1) = v278;
    if (!a11[288])
      a11[288] = 1;
    *(_QWORD *)&v241 = v315.i64[1];
    *(_QWORD *)&v240 = v315.i64[0];
    *(double *)&v242 = v316;
    *(_QWORD *)&v243 = *(_QWORD *)v317;
    *((_QWORD *)&v240 + 1) = *(_QWORD *)&v317[8];
    *((_QWORD *)&v241 + 1) = *(_QWORD *)&v317[16];
    *((_QWORD *)&v242 + 1) = *(_QWORD *)&v317[24];
    *((_QWORD *)&v243 + 1) = *(_QWORD *)&v317[32];
    *(_QWORD *)&v239 = *(_QWORD *)&v317[64];
    *(_QWORD *)&v177 = *(_QWORD *)&v317[40];
    *(_QWORD *)&v178 = *(_QWORD *)&v317[48];
    *(_QWORD *)&v179 = *(_QWORD *)&v317[56];
    *(_OWORD *)(a10 + 96) = v243;
    *(_OWORD *)(a10 + 112) = v239;
    *(_OWORD *)(a10 + 64) = v242;
    *(_OWORD *)(a10 + 80) = v179;
    *(_OWORD *)(a10 + 32) = v241;
    *(_OWORD *)(a10 + 48) = v178;
    *(_OWORD *)a10 = v240;
    *(_OWORD *)(a10 + 16) = v177;
    *(_QWORD *)&v240 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)&v241 = *(_QWORD *)(a10 + 16);
    v244 = *(int64x2_t *)(a10 + 32);
    v245 = *(_QWORD *)(a10 + 80);
    v246 = *(_OWORD *)(a10 + 64);
    v247 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a10, v244);
    *((_QWORD *)&v241 + 1) = *(_QWORD *)(a10 + 48);
    v332 = vzip1q_s64(*(int64x2_t *)a10, v244);
    v335 = *((_QWORD *)&v246 + 1);
    v334 = v247;
    v333 = v246;
    v337 = v245;
    v336 = v241;
    v330 = *(_OWORD *)(a10 + 96);
    v331 = *(_QWORD *)(a10 + 112);
    sub_20FC84F84((_QWORD *)&v310 + 1, &v308, &v305, (uint64_t)&v332, (uint64_t)&v330, (uint64_t)__src, *(double *)&v240, *(double *)&v330, v247);
    memcpy(a11, __src, 0x120uLL);
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    if (v288 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20E867F44();
    v248 = (char *)operator new(4 * v288);
    v249 = 0;
    v250 = 0;
    *a9 = (uint64_t)v248;
    a9[1] = (uint64_t)v248;
    a9[2] = (uint64_t)&v248[16 * v101];
    while (2)
    {
      if (((*(_QWORD *)((char *)v312 + ((v249 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v249) & 1) == 0)
        goto LABEL_204;
      v252 = 4 * v249;
      v253 = *(unsigned int *)((char *)v327 + v252);
      v254 = a6[9] + 40 * v253;
      v255 = (float32x2_t *)(a7[9] + 40 * *(unsigned int *)((char *)__p + v252));
      v256 = *(_DWORD *)(*a5 + 4 * v253);
      v257 = *a6;
      v258 = *(double *)(a1 + 32);
      __src[0] = &off_24C9FD0A0;
      __src[3] = __src;
      v259 = sub_20F2DCD14(v257, v256, a6, a7, a2, v254, v255, a8, v258, (uint64_t)__src);
      v260 = (_QWORD *)__src[3];
      if ((_QWORD *)__src[3] == __src)
      {
        v260 = __src;
        v261 = 4;
LABEL_210:
        (*(void (**)(void))(*v260 + 8 * v261))();
      }
      else if (__src[3])
      {
        v261 = 5;
        goto LABEL_210;
      }
      if (!v259)
        goto LABEL_204;
      v263 = *(_QWORD *)(v259 + 24);
      v262 = *(_QWORD *)(v259 + 32);
      v264 = a9;
      v266 = (_DWORD *)a9[1];
      v265 = a9[2];
      if ((unint64_t)v266 < v265)
      {
        *(_QWORD *)v266 = v263;
        *((_QWORD *)v266 + 1) = v262;
        v251 = v266 + 4;
      }
      else
      {
        v267 = (_DWORD *)*a9;
        v268 = ((uint64_t)v266 - *a9) >> 4;
        v269 = v268 + 1;
        if ((unint64_t)(v268 + 1) >> 60)
          sub_20E867F44();
        v270 = v265 - (_QWORD)v267;
        if (v270 >> 3 > v269)
          v269 = v270 >> 3;
        if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF0)
          v271 = 0xFFFFFFFFFFFFFFFLL;
        else
          v271 = v269;
        if (v271)
        {
          if (v271 >> 60)
            sub_20E877A38();
          v272 = (char *)operator new(16 * v271);
          v273 = &v272[16 * v268];
          *(_QWORD *)v273 = v263;
          *((_QWORD *)v273 + 1) = v262;
          v274 = (uint64_t)v273;
          if (v266 == v267)
          {
LABEL_227:
            v277 = a9;
            v251 = v273 + 16;
            *a9 = v274;
            a9[1] = (uint64_t)(v273 + 16);
            a9[2] = (uint64_t)&v272[16 * v271];
            if (!v266)
              goto LABEL_228;
LABEL_226:
            operator delete(v266);
            v264 = a9;
            goto LABEL_229;
          }
        }
        else
        {
          v272 = 0;
          v273 = (char *)(16 * v268);
          *(_QWORD *)v273 = v263;
          *((_QWORD *)v273 + 1) = v262;
          v274 = 16 * v268;
          if (v266 == v267)
            goto LABEL_227;
        }
        do
        {
          v275 = *((_QWORD *)v266 - 2);
          v266 -= 4;
          v276 = v266[2];
          *(_QWORD *)(v274 - 16) = v275;
          v274 -= 16;
          *(_DWORD *)(v274 + 8) = v276;
        }
        while (v266 != v267);
        v277 = a9;
        v266 = (_DWORD *)*a9;
        v251 = v273 + 16;
        *a9 = v274;
        a9[1] = (uint64_t)(v273 + 16);
        a9[2] = (uint64_t)&v272[16 * v271];
        if (v266)
          goto LABEL_226;
LABEL_228:
        v264 = v277;
LABEL_229:
        v101 = v302;
      }
      v264[1] = (uint64_t)v251;
LABEL_204:
      v249 = ++v250;
      if (v101 <= v250)
        goto LABEL_235;
      continue;
    }
  }
  if (*(_BYTE *)(a10 + 128))
    *(_BYTE *)(a10 + 128) = 0;
  if (a11[288])
    a11[288] = 0;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
LABEL_235:
  if (v305)
  {
    v306 = (uint64_t)v305;
    operator delete(v305);
  }
  if (v308)
  {
    v309 = (char *)v308;
    operator delete(v308);
  }
  if (*((_QWORD *)&v310 + 1))
  {
    *(_QWORD *)&v311 = *((_QWORD *)&v310 + 1);
    operator delete(*((void **)&v310 + 1));
  }
  if (v312)
    operator delete(v312);
LABEL_8:
  if (__p)
  {
    v325 = __p;
    operator delete(__p);
  }
  if (v327)
  {
    v328 = v327;
    operator delete(v327);
  }
}

void sub_20F2DF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,uint64_t a62,void *a63)
{
  void *a66;
  void *a69;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  if (__p)
  {
    operator delete(__p);
    v69 = a63;
    if (a63)
    {
LABEL_10:
      operator delete(v69);
      v70 = a66;
      if (a66)
      {
LABEL_11:
        operator delete(v70);
        v71 = a69;
        if (a69)
        {
LABEL_12:
          operator delete(v71);
          v72 = (void *)STACK[0x2A0];
          if (STACK[0x2A0])
          {
LABEL_13:
            STACK[0x2A8] = (unint64_t)v72;
            operator delete(v72);
            v73 = (void *)STACK[0x2B8];
            if (STACK[0x2B8])
            {
LABEL_14:
              STACK[0x2C0] = (unint64_t)v73;
              operator delete(v73);
              _Unwind_Resume(a1);
            }
LABEL_7:
            _Unwind_Resume(a1);
          }
LABEL_6:
          v73 = (void *)STACK[0x2B8];
          if (STACK[0x2B8])
            goto LABEL_14;
          goto LABEL_7;
        }
LABEL_5:
        v72 = (void *)STACK[0x2A0];
        if (STACK[0x2A0])
          goto LABEL_13;
        goto LABEL_6;
      }
LABEL_4:
      v71 = a69;
      if (a69)
        goto LABEL_12;
      goto LABEL_5;
    }
  }
  else
  {
    v69 = a63;
    if (a63)
      goto LABEL_10;
  }
  v70 = a66;
  if (a66)
    goto LABEL_11;
  goto LABEL_4;
}

uint64_t sub_20F2DF21C(uint64_t a1, uint64_t ***a2, uint64_t a3, unsigned int **a4, unsigned int a5, double a6)
{
  uint64_t **v6;
  uint64_t **v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int8x16_t *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _BOOL8 v45;
  unsigned int *v46;
  unsigned int *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int8x16_t *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t *v64;
  int8x16_t *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  int8x16_t *v75;
  unsigned int v76;
  unsigned int v77;
  int v79;
  int v80;
  uint64_t v81;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6 || (v9 = *a4, v10 = a4[1], *a4 == v10))
  {
    LOBYTE(v19) = 0;
    v20 = 0;
    LODWORD(v21) = 0;
    return v20 & 0x100000000 | v19 | ((_DWORD)v21 << 8);
  }
  v14 = v6 - v7;
  if (v14 == 2)
  {
    v36 = *(_QWORD *)(a1 + 200);
    v37 = *(_QWORD *)(a1 + 208);
    if (v36 == v37)
    {
LABEL_88:
      v20 = 0;
      LODWORD(v19) = 0;
      goto LABEL_92;
    }
    v81 = **v7;
    v79 = *((_DWORD *)*v7 + 2);
    v38 = *((_DWORD *)*v7 + 4);
    v39 = *(v6 - 1);
    v40 = *v39;
    v41 = *((_DWORD *)v39 + 2);
    v42 = *((_DWORD *)v39 + 4);
    while (1)
    {
      v43 = *(_DWORD *)(v36 + 16);
      if (v43 != v38 || *(_QWORD *)v36 != v81 || (v44 = v38, *(_DWORD *)(v36 + 8) != v79))
      {
        if (v43 == v42 && *(_QWORD *)v36 == v40 && *(_DWORD *)(v36 + 8) == v41)
        {
LABEL_43:
          v45 = *(_DWORD *)(v36 + 8) == v41;
          v46 = *a4;
          v47 = a4[1];
          if (*a4 != v47)
            goto LABEL_46;
          goto LABEL_31;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapTrackingUtil.cpp", 556, (uint64_t)"(image_id == ref_frame_image_id1 || image_id == ref_frame_image_id2)", 68, (uint64_t)"Failed to find query frame", 26, (void (*)(void **))sub_21023DDB0))
        {
LABEL_94:
          abort();
        }
        v44 = *(_DWORD *)(v36 + 16);
      }
      if (v44 == v42 && *(_QWORD *)v36 == v40)
        goto LABEL_43;
      v45 = 0;
      v46 = *a4;
      v47 = a4[1];
      if (*a4 != v47)
      {
LABEL_46:
        v19 = v7[v45][72] + ((unint64_t)*(unsigned int *)(*(_QWORD *)(v36 + 24) + 4) << 6);
        v48 = *(int8x16_t *)v19;
        v49 = *(int8x16_t *)(v19 + 16);
        v50 = *(int8x16_t *)(v19 + 32);
        v51 = *(int8x16_t *)(v19 + 48);
        v52 = -1;
        v53 = -1;
        LODWORD(v19) = -1;
        do
        {
          v55 = *v46++;
          v54 = v55;
          v56 = (int8x16_t *)(*(_QWORD *)(a3 + 576) + ((unint64_t)v55 << 6));
          v57 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v56[1], v49)), vcntq_s8(veorq_s8(*v56, v48))), vaddq_s8(vcntq_s8(veorq_s8(v56[2], v50)), vcntq_s8(veorq_s8(v56[3], v51)))));
          if (v57 < v52)
            v52 = v57;
          if (v57 >= v53)
          {
            v58 = v53;
          }
          else
          {
            LODWORD(v19) = v54;
            v58 = v57;
          }
          if (v57 < v53)
            v52 = v53;
          v53 = v58;
        }
        while (v46 != v47);
        if (v58 <= a5 && (v52 == -1 || (double)v52 * a6 > (double)v58))
          goto LABEL_91;
        goto LABEL_32;
      }
LABEL_31:
      if (a5 == -1)
      {
        LODWORD(v19) = -1;
LABEL_91:
        v20 = 0x100000000;
LABEL_92:
        LODWORD(v21) = v19 >> 8;
        return v20 & 0x100000000 | v19 | ((_DWORD)v21 << 8);
      }
LABEL_32:
      v36 += 32;
      if (v36 == v37)
        goto LABEL_88;
    }
  }
  if (v14 == 1)
  {
    v15 = *(_QWORD *)(a1 + 200);
    v16 = *(_QWORD *)(a1 + 208);
    if (v15 != v16)
    {
      v17 = **v7;
      v80 = *((_DWORD *)*v7 + 2);
      v18 = *((_DWORD *)*v7 + 4);
      while (1)
      {
        if (*(_DWORD *)(v15 + 16) != v18 || *(_QWORD *)v15 != v17 || *(_DWORD *)(v15 + 8) != v80)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapTrackingUtil.cpp", 543, (uint64_t)"image_id == ref_frame_image_id", 30, (uint64_t)"Failed to find query frame", 26, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_94;
          }
          v9 = *a4;
          v10 = a4[1];
        }
        if (v9 == v10)
        {
          if (a5 == -1)
            goto LABEL_89;
        }
        else
        {
          v22 = (int8x16_t *)((*v7)[72] + ((unint64_t)*(unsigned int *)(*(_QWORD *)(v15 + 24) + 4) << 6));
          v23 = *v22;
          v24 = v22[1];
          v25 = v22[2];
          v26 = v22[3];
          v27 = -1;
          v28 = -1;
          v29 = v9;
          v30 = -1;
          do
          {
            v32 = *v29++;
            v31 = v32;
            v33 = (int8x16_t *)(*(_QWORD *)(a3 + 576) + ((unint64_t)v32 << 6));
            v34 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v33[1], v24)), vcntq_s8(veorq_s8(*v33, v23))), vaddq_s8(vcntq_s8(veorq_s8(v33[2], v25)), vcntq_s8(veorq_s8(v33[3], v26)))));
            if (v34 < v27)
              v27 = v34;
            if (v34 >= v28)
            {
              v35 = v28;
            }
            else
            {
              v30 = v31;
              v35 = v34;
            }
            if (v34 < v28)
              v27 = v28;
            v28 = v35;
          }
          while (v29 != v10);
          if (v35 <= a5 && (v27 == -1 || (double)v27 * a6 > (double)v35))
            goto LABEL_85;
        }
        v15 += 32;
        if (v15 == v16)
          goto LABEL_86;
      }
    }
    goto LABEL_86;
  }
  v59 = *(_QWORD *)(a1 + 200);
  v60 = *(_QWORD *)(a1 + 208);
  if (v59 == v60)
  {
LABEL_86:
    v20 = 0;
    v30 = 0;
    goto LABEL_87;
  }
  while (1)
  {
    v62 = *a2;
    v63 = a2[1];
    if (*a2 != v63)
    {
      while (1)
      {
        v64 = *v62;
        if (*((_DWORD *)*v62 + 4) == *(_DWORD *)(v59 + 16)
          && *v64 == *(_QWORD *)v59
          && *((_DWORD *)v64 + 2) == *(_DWORD *)(v59 + 8))
        {
          break;
        }
        if (++v62 == v63)
          goto LABEL_70;
      }
    }
    if (v62 == v63)
    {
LABEL_70:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapTrackingUtil.cpp", 566, (uint64_t)"ref_frame_iter != ref_frames.end()", 34, (uint64_t)"Failed to find query frame", 26, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_94;
      }
      v9 = *a4;
      v10 = a4[1];
      v62 = v63;
    }
    if (v9 == v10)
      break;
    v65 = (int8x16_t *)((*v62)[72] + ((unint64_t)*(unsigned int *)(*(_QWORD *)(v59 + 24) + 4) << 6));
    v66 = *v65;
    v67 = v65[1];
    v68 = v65[2];
    v69 = v65[3];
    v70 = -1;
    v71 = -1;
    v72 = v9;
    v30 = -1;
    do
    {
      v74 = *v72++;
      v73 = v74;
      v75 = (int8x16_t *)(*(_QWORD *)(a3 + 576) + ((unint64_t)v74 << 6));
      v76 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v75[1], v67)), vcntq_s8(veorq_s8(*v75, v66))), vaddq_s8(vcntq_s8(veorq_s8(v75[2], v68)), vcntq_s8(veorq_s8(v75[3], v69)))));
      if (v76 < v70)
        v70 = v76;
      if (v76 >= v71)
      {
        v77 = v71;
      }
      else
      {
        v30 = v73;
        v77 = v76;
      }
      if (v76 < v71)
        v70 = v71;
      v71 = v77;
    }
    while (v72 != v10);
    if (v77 <= a5 && (v70 == -1 || (double)v70 * a6 > (double)v77))
    {
LABEL_85:
      v20 = 0x100000000;
      goto LABEL_87;
    }
LABEL_62:
    v59 += 32;
    if (v59 == v60)
      goto LABEL_86;
  }
  if (a5 != -1)
    goto LABEL_62;
LABEL_89:
  v30 = -1;
  v20 = 0x100000000;
LABEL_87:
  v19 = v20 | v30;
  v21 = v19 >> 8;
  return v20 & 0x100000000 | v19 | ((_DWORD)v21 << 8);
}

uint64_t sub_20F2DF7E0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20F2DF820(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F2DF830(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F2DF860(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20F2DF878(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20F2DF8BC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F2DF8D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9FD0A0;
  return result;
}

void sub_20F2DF8F4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9FD0A0;
}

uint64_t sub_20F2DF90C()
{
  return 1;
}

uint64_t sub_20F2DF914(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb0EEEEEPNT_12MapT"
                     "rackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStateSetTypeEdRNS5_11Featu"
                     "reTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb0EEEE"
                                "EPNT_12MapTrackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStat"
                                "eSetTypeEdRNS5_11FeatureTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb0EEEEEPNT_12MapTrackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStateSetTypeEdRNS5_11FeatureTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb0EEEEEPNT_12MapTrackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStateSetTypeEdRNS5_11FeatureTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F2DF980()
{
  return &unk_24C9FD100;
}

_QWORD *sub_20F2DF98C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = a2[4], v6 > a5))
  {
    v7 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v13 = a2;
      do
      {
        v9 = (_QWORD *)v13[2];
        v14 = *v9 == (_QWORD)v13;
        v13 = v9;
      }
      while (v14);
    }
    if (v9[4] < a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v18 <= a5)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_21;
        }
        if (v18 >= a5)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_21:
    *a3 = v17;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (_QWORD *)a2[1];
    do
    {
      v12 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  else
  {
    v19 = a2;
    do
    {
      v12 = (_QWORD *)v19[2];
      v14 = *v12 == (_QWORD)v19;
      v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && v12[4] <= a5)
  {
    v20 = (_QWORD *)*v5;
    if (!*v5)
    {
      *a3 = v5;
      return a1 + 1;
    }
    do
    {
      while (1)
      {
        v17 = v20;
        v21 = v20[4];
        if (v21 <= a5)
          break;
        v20 = (_QWORD *)*v17;
        v5 = v17;
        if (!*v17)
          goto LABEL_21;
      }
      if (v21 >= a5)
        break;
      v5 = v17 + 1;
      v20 = (_QWORD *)v17[1];
    }
    while (v20);
    goto LABEL_21;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

BOOL sub_20F2DFB1C(double **a1, uint64_t *a2, double *a3, float64x2_t *a4, double *a5)
{
  uint64_t *v9;
  int64x2_t **v10;
  uint64_t v11;
  double *v12;
  int64x2_t *v13;
  double *v14;
  double v16;
  float64x2_t v17;
  float64x2_t v19;
  double v25;
  double v27;
  float64x2_t v29;
  int v31;
  float64x2_t v32;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;

  v9 = sub_20E9DF85C((_QWORD *)*a1 + 223, a2);
  if (v9)
    v10 = (int64x2_t **)(v9 + 5);
  else
    v10 = 0;
  if (!v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 340, (uint64_t)"pose_ref", 8, (uint64_t)"No pose ref found", 17, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_13;
  }
  v11 = (uint64_t)v10[8];
  v12 = (double *)v10[2];
  v13 = v10[4];
  v14 = (double *)v10[6];
  _D1 = a3[1] - v12[1];
  v16 = a3[2] - v12[2];
  *(_QWORD *)&v17.f64[0] = (*v10)[1].i64[0];
  _Q7 = (*v10)[3];
  *(_QWORD *)&v17.f64[1] = (*v10)[2].i64[1];
  v19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v10, *(int64x2_t *)((char *)*v10 + 24)), *a3 - *v12), (float64x2_t)vzip2q_s64(**v10, *(int64x2_t *)((char *)*v10 + 24)), _D1), v17, v16);
  __asm { FMLA            D0, D1, V7.D[1] }
  v25 = _D0 + *(double *)(*v10)[4].i64 * v16;
  _D2 = v19.f64[1] - v14[1];
  v27 = v25 - v14[2];
  *(_QWORD *)&v17.f64[0] = v13[1].i64[0];
  _Q7 = v13[3];
  *(_QWORD *)&v17.f64[1] = v13[2].i64[1];
  v29 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v13, *(int64x2_t *)((char *)v13 + 24)), v19.f64[0] - *v14), (float64x2_t)vzip2q_s64(*v13, *(int64x2_t *)((char *)v13 + 24)), _D2), v17, v27);
  __asm { FMLA            D1, D2, V7.D[1] }
  v37 = _D1 + *(double *)v13[4].i64 * v27;
  v36 = v29;
  if ((sub_20FCF1564(v11, &v36, (uint64_t)&v38) & 1) == 0)
    return 0;
  v31 = *(_DWORD *)(v11 + 992);
  if (v31 == -1)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BBDAE, 0, (void (*)(void **))sub_21023DDB0))
    {
      v31 = *(_DWORD *)(v11 + 992);
      goto LABEL_10;
    }
LABEL_13:
    abort();
  }
LABEL_10:
  if (!v31)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BBDAE, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v32.f64[0] = *(double *)(v11 + 16) + *(double *)v11 * v38 + *(double *)(v11 + 8) * v39;
  v32.f64[1] = v39 * *(double *)(v11 + 32) + *(double *)(v11 + 40);
  _D2 = vsubq_f64(v32, *a4).f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  return _D1 <= *a1[1] * (*a5 * *a5);
}

void sub_20F2DFD80(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a3;
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  v16 = a3;
  v5 = *(_QWORD *)(a1 + 536);
  v6 = *(char **)(a1 + 544);
  if (v6 != (char *)v5)
  {
    v7 = (uint64_t)&v6[-v5] >> 5;
    while (1)
    {
      v8 = v7 >> 1;
      v9 = v5 + 32 * (v7 >> 1);
      v10 = *(_DWORD *)(v9 + 16);
      v11 = v10 >= v15;
      if (v10 != (_DWORD)v15)
        goto LABEL_9;
      if (*(_QWORD *)v9 >= (unint64_t)v14)
        break;
LABEL_3:
      v5 = v9 + 32;
      v8 = v7 + ~v8;
LABEL_4:
      v7 = v8;
      if (!v8)
        goto LABEL_12;
    }
    if (*(_QWORD *)v9 != (_QWORD)v14)
      goto LABEL_4;
    v11 = *(_DWORD *)(v9 + 8) >= DWORD2(v14);
LABEL_9:
    if (v11)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if ((char *)v5 == v6
    || *(_DWORD *)(v5 + 16) != *((_DWORD *)a2 + 4)
    || *(_QWORD *)v5 != *(_QWORD *)a2
    || (v12 = *(char **)(a1 + 544), *(_DWORD *)(v5 + 8) != *((_DWORD *)a2 + 2)))
  {
    v12 = sub_20F2E0A38((char **)(a1 + 536), (char *)v5, &v14);
    v6 = *(char **)(a1 + 544);
  }
  if (v6 != v12)
    sub_20F2E0CA4((uint64_t *)a1, (uint64_t *)a2, (uint64_t)&v13);
}

_QWORD *sub_20F2DFE8C(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *i;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v3 = a1 + 1;
  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 2);
    v7 = a1 + 1;
    do
    {
      v8 = v2[4];
      if (v8 < v5)
      {
        ++v2;
      }
      else if (v8 == v5)
      {
        if (*((_DWORD *)v2 + 10) < v6)
          ++v2;
        else
          v7 = v2;
      }
      else
      {
        v7 = v2;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
    if (v7 != v3)
    {
      v9 = v7[4];
      if (v5 >= v9 && (v5 != v9 || v6 >= *((_DWORD *)v7 + 10)))
      {
        v10 = v7[6];
        v11 = *(uint64_t **)(v10 + 536);
        for (i = *(uint64_t **)(v10 + 544); v11 != i; v11 += 4)
          sub_20EE6BF60(a1 + 3, v11, *(_DWORD *)(v11[3] + 4));
        v13 = (_QWORD *)v7[1];
        if (v13)
        {
          do
          {
            v3 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          v14 = v7;
          do
          {
            v3 = (_QWORD *)v14[2];
            v15 = *v3 == (_QWORD)v14;
            v14 = v3;
          }
          while (!v15);
        }
        if ((_QWORD *)*a1 == v7)
          *a1 = v3;
        v16 = (uint64_t *)a1[1];
        --a1[2];
        sub_20E8D2134(v16, v7);
        v17 = (std::__shared_weak_count *)v7[7];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v7);
      }
    }
  }
  return v3;
}

uint64_t *sub_20F2E000C(_QWORD *a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t *result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  result = sub_20E9DF85C((_QWORD *)(a2 + 24), a3);
  if (!result)
    goto LABEL_22;
  v7 = (int8x8_t)result[6];
  if (!*(_QWORD *)&v7)
    goto LABEL_22;
  v8 = *a4;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a4;
    if (*(_QWORD *)&v7 <= v8)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (v7.i32[0] - 1) & v8;
  }
  v11 = *(uint64_t ***)(result[5] + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_22:
    *a1 = 0;
    a1[1] = 0;
    return result;
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == v8)
      {
        if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
          goto LABEL_24;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_22;
      }
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v14 == v8)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_22;
LABEL_12:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_22;
  }
  if (*((_DWORD *)v12 + 4) != (_DWORD)v8)
    goto LABEL_12;
LABEL_24:
  v16 = v12[4];
  *a1 = v12[3];
  a1[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return result;
}

void sub_20F2E0134(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t *v37;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  BOOL v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t **v79;
  _QWORD *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(uint64_t **)(v8 + 536);
  v10 = *(uint64_t **)(v8 + 544);
  v11 = a3[6];
  v12 = *(__int128 **)(v11 + 536);
  v13 = *(__int128 **)(v11 + 544);
  if (v9 == v10)
  {
    v14 = (char *)v13 - (char *)v12;
LABEL_21:
    if (v12 == v13)
      goto LABEL_87;
    v77 = v14;
    v78 = v9;
    v80 = a4;
    v79 = a1;
    v25 = a1 + 3;
    while (1)
    {
      v26 = *(_QWORD *)(a2 + 48);
      v27 = *(_QWORD *)(v26 + 536);
      v28 = *(_QWORD *)(v26 + 544);
      v29 = *(_QWORD *)v12;
      v30 = *((_DWORD *)v12 + 2);
      v31 = *((_DWORD *)v12 + 4);
      if (v28 != v27)
      {
        v32 = (v28 - v27) >> 5;
        while (1)
        {
          v33 = v32 >> 1;
          v34 = v27 + 32 * (v32 >> 1);
          v35 = *(_DWORD *)(v34 + 16);
          v36 = v35 >= v31;
          if (v35 != v31)
            goto LABEL_33;
          if (*(_QWORD *)v34 >= v29)
            break;
LABEL_27:
          v27 = v34 + 32;
          v33 = v32 + ~v33;
LABEL_28:
          v32 = v33;
          if (!v33)
            goto LABEL_36;
        }
        if (*(_QWORD *)v34 != v29)
          goto LABEL_28;
        v36 = *(_DWORD *)(v34 + 8) >= v30;
LABEL_33:
        if (v36)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_36:
      if (v27 == v28 || *(_DWORD *)(v27 + 16) != v31 || *(_QWORD *)v27 != v29 || *(_DWORD *)(v27 + 8) != v30)
        break;
      sub_20EE6BF60(v25, (uint64_t *)v12, *(_DWORD *)(*((_QWORD *)v12 + 3) + 4));
LABEL_24:
      v12 += 2;
      if (v12 == v13)
      {
        a4 = v80;
        v11 = a3[6];
        v9 = v78;
        a1 = v79;
        v14 = v77;
        goto LABEL_87;
      }
    }
    v37 = sub_20E9DF85C(v25, (uint64_t *)v12);
    v38 = (int8x8_t)v37[6];
    if (v38)
    {
      v39 = *(unsigned int *)(*((_QWORD *)v12 + 3) + 4);
      v40 = (uint8x8_t)vcnt_s8(v38);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v41 = *(unsigned int *)(*((_QWORD *)v12 + 3) + 4);
        if (*(_QWORD *)&v38 <= v39)
          v41 = v39 % *(_QWORD *)&v38;
      }
      else
      {
        v41 = (v38.i32[0] - 1) & v39;
      }
      v42 = *(uint64_t ***)(v37[5] + 8 * v41);
      if (v42)
      {
        v43 = *v42;
        if (v43)
        {
          if (v40.u32[0] < 2uLL)
          {
            v44 = *(_QWORD *)&v38 - 1;
            while (1)
            {
              v46 = v43[1];
              if (v46 == v39)
              {
                if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
                  goto LABEL_62;
              }
              else if ((v46 & v44) != v41)
              {
                goto LABEL_61;
              }
              v43 = (uint64_t *)*v43;
              if (!v43)
                goto LABEL_61;
            }
          }
          do
          {
            v45 = v43[1];
            if (v45 == v39)
            {
              if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
                goto LABEL_62;
            }
            else
            {
              if (v45 >= *(_QWORD *)&v38)
                v45 %= *(_QWORD *)&v38;
              if (v45 != v41)
                break;
            }
            v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
      }
    }
LABEL_61:
    v47 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 890, (uint64_t)"fitT != kfit->second.end()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v43 = 0;
    if (v47)
      abort();
LABEL_62:
    v49 = *(_QWORD *)(a2 + 48);
    v48 = *(_QWORD *)(a2 + 56);
    if (v48)
    {
      v50 = (unint64_t *)(v48 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = (std::__shared_weak_count *)v43[4];
    v43[3] = v49;
    v43[4] = v48;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(p_shared_owners);
      while (__stlxr(v54 - 1, p_shared_owners));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(_QWORD *)(a2 + 48);
    v57 = *((_QWORD *)v12 + 2);
    v56 = *((_QWORD *)v12 + 3);
    v81 = *v12;
    v82 = v57;
    v83 = v56;
    v58 = *(_QWORD *)(v55 + 536);
    v59 = *(_QWORD *)(v55 + 544);
    if (v59 == v58)
    {
LABEL_81:
      if (v58 == v59
        || *(_DWORD *)(v58 + 16) != *((_DWORD *)v12 + 4)
        || *(_QWORD *)v58 != *(_QWORD *)v12
        || *(_DWORD *)(v58 + 8) != *((_DWORD *)v12 + 2))
      {
        sub_20F2E0A38((char **)(v55 + 536), (char *)v58, &v81);
      }
      goto LABEL_24;
    }
    v60 = (v59 - v58) >> 5;
    while (1)
    {
      v61 = v60 >> 1;
      v62 = v58 + 32 * (v60 >> 1);
      v63 = *(_DWORD *)(v62 + 16);
      v64 = v63 >= v82;
      if (v63 != (_DWORD)v82)
        goto LABEL_78;
      if (*(_QWORD *)v62 >= (unint64_t)v81)
        break;
LABEL_72:
      v58 = v62 + 32;
      v61 = v60 + ~v61;
LABEL_73:
      v60 = v61;
      if (!v61)
        goto LABEL_81;
    }
    if (*(_QWORD *)v62 != (_QWORD)v81)
      goto LABEL_73;
    v64 = *(_DWORD *)(v62 + 8) >= DWORD2(v81);
LABEL_78:
    if (v64)
      goto LABEL_73;
    goto LABEL_72;
  }
  v14 = (char *)v13 - (char *)v12;
  if (v13 != v12)
  {
    v15 = v9;
    while (1)
    {
      v16 = *v15;
      v17 = *((_DWORD *)v15 + 2);
      v18 = *(_QWORD *)(v11 + 536);
      v19 = v14 >> 5;
      v20 = *((_DWORD *)v15 + 4);
      do
      {
        v21 = v19 >> 1;
        v22 = v18 + 32 * (v19 >> 1);
        v23 = *(_DWORD *)(v22 + 16);
        v24 = v23 >= v20;
        if (v23 != v20)
          goto LABEL_12;
        if (*(_QWORD *)v22 < v16)
          goto LABEL_6;
        if (*(_QWORD *)v22 == v16)
        {
          v24 = *(_DWORD *)(v22 + 8) >= v17;
LABEL_12:
          if (!v24)
          {
LABEL_6:
            v18 = v22 + 32;
            v21 = v19 + ~v21;
          }
        }
        v19 = v21;
      }
      while (v21);
      if ((__int128 *)v18 != v13
        && *(_DWORD *)(v18 + 16) == v20
        && *(_QWORD *)v18 == v16
        && *(_DWORD *)(v18 + 8) == v17)
      {
        *a4 = 0;
        a4[1] = 0;
        return;
      }
      v15 += 4;
      if (v15 == v10)
        goto LABEL_21;
    }
  }
LABEL_87:
  if (*(_BYTE *)(v11 + 528))
  {
    v65 = *(_QWORD *)(a2 + 48);
    if (v14 > (unint64_t)((char *)v10 - (char *)v9) || !*(_BYTE *)(v65 + 528))
      sub_20F2E0670(v65, v11 + 40);
  }
  v66 = (uint64_t *)a3[1];
  if (v66)
  {
    do
    {
      v67 = v66;
      v66 = (uint64_t *)*v66;
    }
    while (v66);
  }
  else
  {
    v68 = a3;
    do
    {
      v67 = (uint64_t *)v68[2];
      v69 = *v67 == (_QWORD)v68;
      v68 = v67;
    }
    while (!v69);
  }
  if (*a1 == a3)
    *a1 = v67;
  v70 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_20E8D2134(v70, a3);
  v71 = (std::__shared_weak_count *)a3[7];
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  operator delete(a3);
  v74 = *(_QWORD *)(a2 + 56);
  *a4 = *(_QWORD *)(a2 + 48);
  a4[1] = v74;
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
}

__n128 sub_20F2E0670(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int16 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  int v22;
  char v23;
  __int128 v24;
  __n128 result;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int16 v29;
  __int16 v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __n128 v41;
  _BYTE v42[23];
  __int128 v43;
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  if (*(_BYTE *)(a1 + 528))
  {
    v2 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 48) = v2;
    v3 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 72) = v3;
    v4 = *(_WORD *)(a2 + 56);
    *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 58);
    *(_WORD *)(a1 + 96) = v4;
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 104) = v5;
    v6 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 128) = v6;
    v7 = *(_OWORD *)(a2 + 176);
    v8 = *(_OWORD *)(a2 + 192);
    v9 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 232) = v8;
    *(_OWORD *)(a1 + 216) = v7;
    *(_OWORD *)(a1 + 200) = v9;
    v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 152) = v10;
    v11 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 248) = v11;
    v12 = *(_OWORD *)(a2 + 240);
    v13 = *(_OWORD *)(a2 + 256);
    v14 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 328) = v14;
    *(_OWORD *)(a1 + 280) = v12;
    *(_OWORD *)(a1 + 296) = v13;
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 304);
    v15 = *(_OWORD *)(a2 + 320);
    v16 = *(_OWORD *)(a2 + 336);
    v17 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 376) = v16;
    *(_OWORD *)(a1 + 392) = v17;
    *(_OWORD *)(a1 + 360) = v15;
    v18 = *(_OWORD *)(a2 + 376);
    *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 392);
    *(_OWORD *)(a1 + 416) = v18;
    v19 = (_OWORD *)(a1 + 440);
    v20 = (__int128 *)(a2 + 400);
    if (*(unsigned __int8 *)(a1 + 464) == *(unsigned __int8 *)(a2 + 424))
    {
      if (*(_BYTE *)(a1 + 464))
      {
        v21 = *v20;
        *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 416);
        *v19 = v21;
      }
    }
    else if (*(_BYTE *)(a1 + 464))
    {
      *(_BYTE *)(a1 + 464) = 0;
    }
    else
    {
      v27 = *v20;
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 416);
      *v19 = v27;
      *(_BYTE *)(a1 + 464) = 1;
    }
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 432);
    result = *(__n128 *)(a2 + 448);
    v28 = *(_OWORD *)(a2 + 464);
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 480);
    *(__n128 *)(a1 + 488) = result;
    *(_OWORD *)(a1 + 504) = v28;
    v29 = *(_WORD *)(a2 + 484);
    *(_BYTE *)(a1 + 526) = *(_BYTE *)(a2 + 486);
    *(_WORD *)(a1 + 524) = v29;
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 32);
    v37 = *(_QWORD *)(a2 + 48);
    v34 = *(_WORD *)(a2 + 56);
    v35 = *(_BYTE *)(a2 + 58);
    v63 = *(_QWORD *)(a2 + 80);
    v62 = *(_OWORD *)(a2 + 64);
    v33 = *(_QWORD *)(a2 + 104);
    v32 = *(_OWORD *)(a2 + 88);
    v56 = *(_OWORD *)(a2 + 112);
    v57 = *(_OWORD *)(a2 + 128);
    v60 = *(_OWORD *)(a2 + 176);
    v61 = *(_OWORD *)(a2 + 192);
    v58 = *(_OWORD *)(a2 + 144);
    v59 = *(_OWORD *)(a2 + 160);
    v50 = *(_OWORD *)(a2 + 208);
    v51 = *(_OWORD *)(a2 + 224);
    v54 = *(_OWORD *)(a2 + 272);
    v55 = *(_OWORD *)(a2 + 288);
    v52 = *(_OWORD *)(a2 + 240);
    v53 = *(_OWORD *)(a2 + 256);
    v49 = *(_QWORD *)(a2 + 368);
    v47 = *(_OWORD *)(a2 + 336);
    v48 = *(_OWORD *)(a2 + 352);
    v45 = *(_OWORD *)(a2 + 304);
    v46 = *(_OWORD *)(a2 + 320);
    v44 = *(_WORD *)(a2 + 392);
    v43 = *(_OWORD *)(a2 + 376);
    v22 = *(unsigned __int8 *)(a2 + 424);
    if (*(_BYTE *)(a2 + 424))
    {
      v23 = *(_BYTE *)(a2 + 400);
      *(_QWORD *)&v42[15] = *(_QWORD *)(a2 + 416);
      *(_OWORD *)v42 = *(_OWORD *)(a2 + 401);
    }
    else
    {
      v23 = 0;
    }
    v41 = *(__n128 *)(a2 + 432);
    v38 = *(_OWORD *)(a2 + 448);
    v39 = *(_OWORD *)(a2 + 464);
    v40 = *(_DWORD *)(a2 + 480);
    v30 = *(_WORD *)(a2 + 484);
    v31 = *(_BYTE *)(a2 + 486);
    v24 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 88) = v37;
    *(_OWORD *)(a1 + 72) = v36;
    *(_BYTE *)(a1 + 98) = v35;
    *(_WORD *)(a1 + 96) = v34;
    *(_QWORD *)(a1 + 120) = v63;
    *(_OWORD *)(a1 + 104) = v62;
    *(_QWORD *)(a1 + 144) = v33;
    *(_OWORD *)(a1 + 128) = v32;
    *(_OWORD *)(a1 + 168) = v57;
    *(_OWORD *)(a1 + 152) = v56;
    *(_OWORD *)(a1 + 232) = v61;
    *(_OWORD *)(a1 + 216) = v60;
    *(_OWORD *)(a1 + 200) = v59;
    *(_OWORD *)(a1 + 184) = v58;
    *(_OWORD *)(a1 + 248) = v50;
    *(_OWORD *)(a1 + 296) = v53;
    *(_OWORD *)(a1 + 312) = v54;
    *(_OWORD *)(a1 + 264) = v51;
    *(_OWORD *)(a1 + 280) = v52;
    *(_OWORD *)(a1 + 328) = v55;
    *(_OWORD *)(a1 + 344) = v45;
    *(_QWORD *)(a1 + 408) = v49;
    *(_OWORD *)(a1 + 376) = v47;
    *(_OWORD *)(a1 + 392) = v48;
    *(_OWORD *)(a1 + 360) = v46;
    *(_WORD *)(a1 + 432) = v44;
    *(_OWORD *)(a1 + 416) = v43;
    *(_BYTE *)(a1 + 440) = 0;
    *(_BYTE *)(a1 + 464) = 0;
    if (v22)
    {
      *(_BYTE *)(a1 + 440) = v23;
      *(_QWORD *)(a1 + 456) = *(_QWORD *)&v42[15];
      *(_OWORD *)(a1 + 441) = *(_OWORD *)v42;
      *(_BYTE *)(a1 + 464) = 1;
    }
    result = v41;
    *(_QWORD *)(a1 + 40) = &off_24C9FD120;
    v26 = a1 + 40;
    *(__n128 *)(v26 + 432) = v41;
    *(_OWORD *)(v26 + 448) = v38;
    *(_OWORD *)(v26 + 464) = v39;
    *(_DWORD *)(v26 + 480) = v40;
    *(_WORD *)(v26 + 484) = v30;
    *(_BYTE *)(v26 + 486) = v31;
    *(_BYTE *)(v26 + 488) = 1;
  }
  return result;
}

char *sub_20F2E0A38(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  int64_t v32;
  char *v33;
  __int128 v35;
  __int128 v36;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      v23 = a3[1];
      *(_OWORD *)v8 = *a3;
      *((_OWORD *)v8 + 1) = v23;
      a1[1] = v8 + 32;
    }
    else
    {
      v35 = *a3;
      v36 = a3[1];
      v10 = v8 + 32;
      v11 = (__int128 *)(v5 - 32);
      v12 = a1[1];
      if (v5 >= 0x20)
      {
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v11 += 2;
          *(_OWORD *)v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12 += 32;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10)
        memmove((void *)(v5 - 32 * ((uint64_t)(v5 - (_QWORD)v10) >> 5)), v8, v5 - (_QWORD)v10);
      *(_OWORD *)v8 = v35;
      *((_OWORD *)v8 + 1) = v36;
    }
    return v8;
  }
  v15 = ((uint64_t)(v5 - (_QWORD)v6) >> 5) + 1;
  if (v15 >> 59)
    sub_20E867F44();
  v17 = v9 - (_QWORD)v6;
  if (v17 >> 4 > v15)
    v15 = v17 >> 4;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
    v18 = 0x7FFFFFFFFFFFFFFLL;
  else
    v18 = v15;
  if (v18)
  {
    if (v18 >> 59)
      sub_20E877A38();
    v19 = (char *)operator new(32 * v18);
    v20 = v7 >> 5;
    v21 = &v19[32 * (v7 >> 5)];
    v22 = &v19[32 * v18];
    if (v7 >> 5 != v18)
      goto LABEL_31;
    goto LABEL_20;
  }
  v19 = 0;
  v20 = v7 >> 5;
  v21 = (char *)(32 * (v7 >> 5));
  v22 = 0;
  if (!(v7 >> 5))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2)
        v25 = 1;
      else
        v25 = v7 >> 4;
      if (v25 >> 59)
        sub_20E877A38();
      v21 = (char *)operator new(32 * v25);
      v22 = &v21[32 * v25];
      if (v19)
      {
        operator delete(v19);
        v6 = *a1;
      }
    }
    else
    {
      if (v20 >= -1)
        v24 = v20 + 1;
      else
        v24 = v20 + 2;
      v21 -= 32 * (v24 >> 1);
    }
  }
LABEL_31:
  v26 = a3[1];
  *(_OWORD *)v21 = *a3;
  *((_OWORD *)v21 + 1) = v26;
  v27 = v21;
  if (v6 != v8)
  {
    v28 = v8;
    v29 = v21;
    do
    {
      v30 = *((_OWORD *)v28 - 1);
      v27 = v29 - 32;
      *((_OWORD *)v29 - 2) = *((_OWORD *)v28 - 2);
      *((_OWORD *)v29 - 1) = v30;
      v28 -= 32;
      v29 -= 32;
    }
    while (v28 != v6);
  }
  v31 = a1[1];
  v32 = v31 - v8;
  if (v31 != v8)
    memmove(v21 + 32, v8, v31 - v8);
  v33 = *a1;
  *a1 = v27;
  a1[1] = &v21[v32 + 32];
  a1[2] = v22;
  if (v33)
    operator delete(v33);
  return v21;
}

void sub_20F2E0C74(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F2E0C90()
{
  JUMPOUT(0x212BC6398);
}

void sub_20F2E0CA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  std::__shared_weak_count *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  int v18;

  v3 = (_QWORD *)a1[2];
  if (v3)
  {
    if (!a1[1] || (v6 = *a1, (v7 = std::__shared_weak_count::lock((std::__shared_weak_count *)a1[1])) == 0))
      sub_20EE6CA64();
    v16 = v7;
    v8 = *(_DWORD *)(*(_QWORD *)a3 + 4);
    *(_QWORD *)&v17 = v6;
    *((_QWORD *)&v17 + 1) = v7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v18 = v8;
    sub_20F2E0E14(v3, a2, &v17);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20F2E0DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E0E14(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  float v12;
  uint64_t v13;
  unint64_t prime;
  int8x8_t v15;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  size_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  int v25;

  v6 = sub_20E9DF85C(a1, a2);
  if (v6)
  {
    LODWORD(v23) = *((_DWORD *)a3 + 4);
    v7 = (int)v23;
    v24 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v25 = v7;
    sub_20F2E1038((uint64_t)(v6 + 5), (unsigned int *)&v23, (uint64_t)&v23);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (!*((_QWORD *)&v24 + 1))
      return;
    v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10)
      return;
LABEL_29:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  v23 = (__int128 *)a2;
  v11 = sub_20F2E1378((uint64_t)a1, a2, (uint64_t)&unk_2102DB95C, &v23);
  v12 = (float)(unint64_t)a1[5];
  v13 = (uint64_t)(v11 + 40);
  prime = vcvtps_u32_f32(v12 / *((float *)v11 + 18));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v15 = *(int8x8_t *)(v11 + 48);
  if (prime > *(_QWORD *)&v15)
    goto LABEL_12;
  if (prime >= *(_QWORD *)&v15)
    goto LABEL_25;
  v16 = vcvtps_u32_f32((float)*((unint64_t *)v11 + 8) / *((float *)v11 + 18));
  if (*(_QWORD *)&v15 >= 3uLL)
  {
    v17 = (uint8x8_t)vcnt_s8(v15);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] <= 1uLL)
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
      if (prime <= v16)
        prime = v16;
      if (prime >= *(_QWORD *)&v15)
        goto LABEL_25;
LABEL_12:
      sub_20E8D2B3C(v13, prime);
      goto LABEL_25;
    }
  }
  v19 = std::__next_prime(v16);
  if (prime <= v19)
    prime = v19;
  if (prime < *(_QWORD *)&v15)
    goto LABEL_12;
LABEL_25:
  LODWORD(v23) = *((_DWORD *)a3 + 4);
  v20 = (int)v23;
  v24 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v25 = v20;
  sub_20F2E1038(v13, (unsigned int *)&v23, (uint64_t)&v23);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
      goto LABEL_29;
  }
}

void sub_20F2E1010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E1024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20F2E1038(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v10 + 10) = *(_DWORD *)(a3 + 24);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(_QWORD *)v10 = *v17;
LABEL_61:
      *v17 = v10;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v17)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v17)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20F2E1364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20F2E1378(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v7 = *((_DWORD *)a2 + 4);
  v8 = *((_DWORD *)a2 + 2);
  v9 = v8 ^ __ROR4__(v7, 13);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v10 <= v9)
        v4 = v9 % v10;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        v14 = *a2;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 8) == v7 && *((_QWORD *)v13 + 2) == v14 && *((_DWORD *)v13 + 6) == v8)
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v13 = *(char **)v13;
            if (!v13)
              goto LABEL_27;
          }
        }
        do
        {
          v15 = *((_QWORD *)v13 + 1);
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 8) == v7 && *((_QWORD *)v13 + 2) == v14 && *((_DWORD *)v13 + 6) == v8)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v4)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_27:
  v17 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x50uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  v18 = **a4;
  *((_QWORD *)v13 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v13 + 1) = v18;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *((_DWORD *)v13 + 18) = 1065353216;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    v9 = v4;
  }
  else
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_40;
    if (prime < v10)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v10)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v29)
  {
    *(_QWORD *)v13 = *v29;
LABEL_63:
    *v29 = v13;
    goto LABEL_64;
  }
  *(_QWORD *)v13 = *v17;
  *v17 = v13;
  *(_QWORD *)(v28 + 8 * v9) = v17;
  if (*(_QWORD *)v13)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20F2E16C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE6C9B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E16E0(uint64_t **a1@<X0>, int8x8_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  unint64_t v38;
  int v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  _OWORD *v46;
  uint64_t *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int8x8_t v79;
  unint64_t v80;
  uint8x8_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  __int128 v107;
  _BYTE v108[24];
  std::__shared_weak_count *v109;

  v8 = a1 + 1;
  v9 = a1 + 1;
  v11 = a3 + 8;
  v10 = *(uint64_t **)(a3 + 8);
  v12 = *(_DWORD *)(a3 + 16);
  v13 = v10 == (uint64_t *)-1 && v12 == -1;
  v14 = !v13;
  if (v13)
    goto LABEL_20;
  v15 = (uint64_t)*v9;
  if (!*v9)
    goto LABEL_20;
  v16 = a1 + 1;
  do
  {
    v17 = *(_QWORD *)(v15 + 32);
    if (v17 < (unint64_t)v10)
    {
      v15 += 8;
    }
    else if ((uint64_t *)v17 == v10)
    {
      if (*(_DWORD *)(v15 + 40) < v12)
        v15 += 8;
      else
        v16 = (uint64_t **)v15;
    }
    else
    {
      v16 = (uint64_t **)v15;
    }
    v15 = *(_QWORD *)v15;
  }
  while (v15);
  if (v16 == v8 || (v18 = v16[4], v10 < v18) || v10 == v18 && v12 < *((_DWORD *)v16 + 10))
  {
LABEL_20:
    v19 = a2[6];
    if (v19)
    {
      v20 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
      v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
        if (*(_QWORD *)&v19 <= v20)
          v22 = v20 % *(_QWORD *)&v19;
      }
      else
      {
        v22 = (v19.i32[0] - 1) & v20;
      }
      v23 = *(uint64_t ***)(*(_QWORD *)&a2[5] + 8 * v22);
      if (v23)
      {
        v24 = *v23;
        if (v24)
        {
          if (v21.u32[0] < 2uLL)
          {
            v25 = *(_QWORD *)&v19 - 1;
            while (1)
            {
              v27 = v24[1];
              if (v27 == v20)
              {
                if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
                  goto LABEL_131;
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_40;
              }
              v24 = (uint64_t *)*v24;
              if (!v24)
                goto LABEL_40;
            }
          }
          do
          {
            v26 = v24[1];
            if (v26 == v20)
            {
              if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
              {
LABEL_131:
                v83 = v24[3];
                v84 = v24[4];
                if (v84)
                {
                  v85 = (unint64_t *)(v84 + 8);
                  do
                    v86 = __ldxr(v85);
                  while (__stxr(v86 + 1, v85));
                }
                if (!*(_BYTE *)(v83 + 528))
                {
                  v87 = *(_QWORD *)(a3 + 32);
                  if (v87)
                    sub_20F2E0670(v83, v87);
                }
                *a4 = v83;
                a4[1] = v84;
                return;
              }
            }
            else
            {
              if (v26 >= *(_QWORD *)&v19)
                v26 %= *(_QWORD *)&v19;
              if (v26 != v22)
                break;
            }
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_40:
    v28 = a1[9];
    if (v28)
    {
      sub_20F2E22D8(v28, (std::__shared_weak_count_vtbl **)v108);
      v29 = *(_QWORD *)v108;
      *(_QWORD *)(*(_QWORD *)v108 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_DWORD *)(v29 + 32) = 0;
      if (*(_BYTE *)(v29 + 528))
        *(_BYTE *)(v29 + 528) = 0;
      *(_QWORD *)(v29 + 544) = *(_QWORD *)(v29 + 536);
      *(_DWORD *)(v29 + 560) = 0;
      v30 = *(std::__shared_weak_count **)&v108[8];
      *(_QWORD *)&v107 = v29;
      *((_QWORD *)&v107 + 1) = *(_QWORD *)&v108[8];
      *(_QWORD *)(v29 + 16) = a1 + 3;
      if (v14)
      {
LABEL_44:
        v31 = *(_QWORD *)v11;
        *(_DWORD *)(v29 + 32) = *(_DWORD *)(v11 + 8);
        *(_QWORD *)(v29 + 24) = v31;
        v32 = *(_QWORD *)(v29 + 32);
        *(_QWORD *)v108 = v31;
        *(_QWORD *)&v108[8] = v32;
        *(_QWORD *)&v108[16] = v29;
        v109 = v30;
        if (!v30)
          goto LABEL_59;
        goto LABEL_57;
      }
    }
    else
    {
      v33 = operator new();
      *(_BYTE *)(v33 + 40) = 0;
      *(_BYTE *)(v33 + 528) = 0;
      *(_OWORD *)v33 = 0u;
      *(_OWORD *)(v33 + 16) = 0u;
      *(_DWORD *)(v33 + 32) = 0;
      *(_QWORD *)(v33 + 536) = 0;
      *(_QWORD *)(v33 + 552) = 0;
      *(_QWORD *)(v33 + 544) = 0;
      *(_DWORD *)(v33 + 560) = 0;
      sub_20F2E2CD4((std::__shared_weak_count_vtbl **)v108, (std::__shared_weak_count_vtbl *)v33);
      v30 = *(std::__shared_weak_count **)&v108[8];
      v29 = *(_QWORD *)v108;
      v107 = *(_OWORD *)v108;
      *(_QWORD *)(*(_QWORD *)v108 + 16) = a1 + 3;
      if (v14)
        goto LABEL_44;
    }
    v34 = a1[2];
    if (v34)
    {
      v35 = (uint64_t)*v9;
      if (*v9)
      {
        do
        {
          v36 = v35;
          v35 = *(_QWORD *)(v35 + 8);
        }
        while (v35);
      }
      else
      {
        v37 = v9;
        do
        {
          v36 = (uint64_t)v37[2];
          v13 = *(_QWORD *)v36 == (_QWORD)v37;
          v37 = (uint64_t **)v36;
        }
        while (v13);
      }
      v38 = *(unsigned int *)(v36 + 40);
      if ((unint64_t)v34 >= v38)
        LODWORD(v34) = v38;
      else
        LODWORD(v34) = 0;
    }
    *(int8x8_t *)v108 = a2[2];
    *(_DWORD *)&v108[8] = (_DWORD)v34;
    v31 = sub_20F25BF64((uint64_t)a1, (unint64_t *)v108);
    *(_QWORD *)(v29 + 24) = v31;
    *(_DWORD *)(v29 + 32) = v39;
    v32 = *(_QWORD *)(v29 + 32);
    *(_QWORD *)v108 = v31;
    *(_QWORD *)&v108[8] = v32;
    *(_QWORD *)&v108[16] = v29;
    v109 = v30;
    if (!v30)
    {
LABEL_59:
      v42 = (uint64_t)*v9;
      v43 = (uint64_t)v9;
      if (!*v9)
        goto LABEL_70;
      while (1)
      {
        v43 = v42;
        v44 = *(_QWORD *)(v42 + 32);
        if (v31 < v44)
          goto LABEL_61;
        if (v31 != v44)
        {
          if (v44 >= v31)
            goto LABEL_73;
          goto LABEL_68;
        }
        v45 = *(_DWORD *)(v43 + 40);
        if (v45 > v32)
        {
LABEL_61:
          v42 = *(_QWORD *)v43;
          v9 = (uint64_t **)v43;
          if (!*(_QWORD *)v43)
            goto LABEL_70;
        }
        else
        {
          if (v45 >= v32)
            goto LABEL_73;
LABEL_68:
          v42 = *(_QWORD *)(v43 + 8);
          if (!v42)
          {
            v9 = (uint64_t **)(v43 + 8);
LABEL_70:
            v46 = operator new(0x40uLL);
            v46[2] = *(_OWORD *)v108;
            *((_QWORD *)v46 + 6) = v29;
            *((_QWORD *)v46 + 7) = v30;
            *(_QWORD *)&v108[16] = 0;
            v109 = 0;
            *(_QWORD *)v46 = 0;
            *((_QWORD *)v46 + 1) = 0;
            *((_QWORD *)v46 + 2) = v43;
            *v9 = (uint64_t *)v46;
            v47 = (uint64_t *)**a1;
            if (v47)
            {
              *a1 = v47;
              v46 = *v9;
            }
            sub_20E868578(a1[1], (uint64_t *)v46);
            a1[2] = (uint64_t *)((char *)a1[2] + 1);
            v30 = v109;
            if (!v30)
              goto LABEL_77;
LABEL_73:
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
              v50 = *(_QWORD *)(a3 + 32);
              v51 = v107;
              if (v50)
LABEL_78:
                sub_20F2E0670(v51, v50);
            }
            else
            {
LABEL_77:
              v50 = *(_QWORD *)(a3 + 32);
              v51 = v107;
              if (v50)
                goto LABEL_78;
            }
LABEL_79:
            v52 = *(std::__shared_weak_count **)(a3 + 24);
            *(_OWORD *)v108 = *(_OWORD *)a2[2].i8;
            *(int8x8_t *)&v108[16] = a2[4];
            v109 = v52;
            v53 = *(_QWORD *)(v51 + 536);
            v54 = *(_QWORD *)(v51 + 544);
            if (v54 != v53)
            {
              v55 = (v54 - v53) >> 5;
              while (1)
              {
                v56 = v55 >> 1;
                v57 = v53 + 32 * (v55 >> 1);
                v58 = *(_DWORD *)(v57 + 16);
                v59 = v58 >= *(_DWORD *)&v108[16];
                if (v58 != *(_DWORD *)&v108[16])
                  goto LABEL_87;
                if (*(_QWORD *)v57 >= *(_QWORD *)v108)
                  break;
LABEL_81:
                v53 = v57 + 32;
                v56 = v55 + ~v56;
LABEL_82:
                v55 = v56;
                if (!v56)
                  goto LABEL_90;
              }
              if (*(_QWORD *)v57 != *(_QWORD *)v108)
                goto LABEL_82;
              v59 = *(_DWORD *)(v57 + 8) >= *(_DWORD *)&v108[8];
LABEL_87:
              if (v59)
                goto LABEL_82;
              goto LABEL_81;
            }
LABEL_90:
            if ((v53 == v54
               || *(_DWORD *)(v53 + 16) != a2[4].i32[0]
               || *(_QWORD *)v53 != *(_QWORD *)&a2[2]
               || *(_DWORD *)(v53 + 8) != a2[3].i32[0])
              && *(char **)(v107 + 544) != sub_20F2E0A38((char **)(v51 + 536), (char *)v53, v108))
            {
              v60 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4);
              v61 = v60;
              if (*((_QWORD *)&v107 + 1))
              {
                v62 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
                v61 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4);
                do
                  v64 = __ldxr(v62);
                while (__stxr(v64 + 1, v62));
              }
              *(_DWORD *)v108 = v60;
              *(_OWORD *)&v108[8] = v107;
              LODWORD(v109) = v61;
              sub_20F2E1038((uint64_t)&a2[5], (unsigned int *)v108, (uint64_t)v108);
              v66 = v65;
              v67 = *(std::__shared_weak_count **)&v108[16];
              if (*(_QWORD *)&v108[16])
              {
                v68 = (unint64_t *)(*(_QWORD *)&v108[16] + 8);
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_109;
              v70 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v107 + 1) + 16))(*((_QWORD *)&v107 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v107 + 1));
                if ((v66 & 1) == 0)
                  goto LABEL_110;
              }
              else
              {
LABEL_109:
                if ((v66 & 1) == 0)
                  goto LABEL_110;
              }
              v72 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              *(_OWORD *)a4 = v107;
              if (!*((_QWORD *)&v107 + 1))
                return;
              v73 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
              goto LABEL_119;
            }
LABEL_110:
            *a4 = 0;
            a4[1] = 0;
            v72 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
            goto LABEL_111;
          }
        }
      }
    }
LABEL_57:
    v40 = (unint64_t *)&v30->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    goto LABEL_59;
  }
  v51 = (uint64_t)v16[6];
  v72 = (std::__shared_weak_count *)v16[7];
  if (v72)
  {
    v77 = (unint64_t *)&v72->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  *(_QWORD *)&v107 = v51;
  *((_QWORD *)&v107 + 1) = v72;
  v79 = a2[6];
  if (!*(_QWORD *)&v79)
    goto LABEL_156;
  v80 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
  v81 = (uint8x8_t)vcnt_s8(v79);
  v81.i16[0] = vaddlv_u8(v81);
  if (v81.u32[0] > 1uLL)
  {
    v82 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
    if (*(_QWORD *)&v79 <= v80)
      v82 = v80 % *(_QWORD *)&v79;
  }
  else
  {
    v82 = (v79.i32[0] - 1) & v80;
  }
  v88 = *(uint64_t ***)(*(_QWORD *)&a2[5] + 8 * v82);
  if (!v88 || (v89 = *v88) == 0)
  {
LABEL_156:
    if (!*(_BYTE *)(v51 + 528))
    {
      v93 = *(_QWORD *)(a3 + 32);
      if (v93)
        sub_20F2E0670(v51, v93);
    }
    goto LABEL_79;
  }
  if (v81.u32[0] < 2uLL)
  {
    v90 = *(_QWORD *)&v79 - 1;
    while (1)
    {
      v92 = v89[1];
      if (v92 == v80)
      {
        if (*((_DWORD *)v89 + 4) == (_DWORD)v80)
          goto LABEL_159;
      }
      else if ((v92 & v90) != v82)
      {
        goto LABEL_156;
      }
      v89 = (uint64_t *)*v89;
      if (!v89)
        goto LABEL_156;
    }
  }
  while (1)
  {
    v91 = v89[1];
    if (v91 == v80)
      break;
    if (v91 >= *(_QWORD *)&v79)
      v91 %= *(_QWORD *)&v79;
    if (v91 != v82)
      goto LABEL_156;
LABEL_146:
    v89 = (uint64_t *)*v89;
    if (!v89)
      goto LABEL_156;
  }
  if (*((_DWORD *)v89 + 4) != (_DWORD)v80)
    goto LABEL_146;
LABEL_159:
  v94 = *(_QWORD *)(v51 + 24);
  v95 = *(_DWORD *)(v51 + 32);
  v96 = v89[3];
  v97 = *(uint64_t **)(v96 + 24);
  v98 = *(_DWORD *)(v96 + 32);
  if ((uint64_t *)v94 == v97 && v95 == v98)
  {
    *a4 = v51;
    a4[1] = (uint64_t)v72;
    return;
  }
  v100 = (uint64_t)*v9;
  if (!*v9)
    goto LABEL_189;
  v101 = (uint64_t)(a1 + 1);
  v102 = (uint64_t)*v9;
  do
  {
    v103 = *(_QWORD *)(v102 + 32);
    if (v103 < v94)
    {
      v102 += 8;
    }
    else if (v103 == v94)
    {
      if (*(_DWORD *)(v102 + 40) < v95)
        v102 += 8;
      else
        v101 = v102;
    }
    else
    {
      v101 = v102;
    }
    v102 = *(_QWORD *)v102;
  }
  while (v102);
  if ((uint64_t **)v101 == v8)
    goto LABEL_189;
  v104 = *(_QWORD *)(v101 + 32);
  if (v94 < v104 || v94 == v104 && *(_DWORD *)(v101 + 40) > v95)
    goto LABEL_189;
  do
  {
    v105 = *(_QWORD *)(v100 + 32);
    if (v105 < (unint64_t)v97)
    {
      v100 += 8;
    }
    else if ((uint64_t *)v105 == v97)
    {
      if (*(_DWORD *)(v100 + 40) < v98)
        v100 += 8;
      else
        v9 = (uint64_t **)v100;
    }
    else
    {
      v9 = (uint64_t **)v100;
    }
    v100 = *(_QWORD *)v100;
  }
  while (v100);
  if (v9 == v8 || (v106 = v9[4], v97 < v106) || v97 == v106 && *((_DWORD *)v9 + 10) > v98)
  {
LABEL_189:
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    sub_20F2E0134(a1, v101, (uint64_t *)v9, a4);
  }
LABEL_111:
  if (v72)
  {
LABEL_119:
    v75 = (unint64_t *)&v72->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_20F2E1FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E1FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E2000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E2014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_20E8C2824((uint64_t)va3);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F2E2040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E2054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20F28AC44((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E2070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E2084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2E2098(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  void *v6;
  unint64_t prime;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int8x8_t v12;
  size_t v13;
  uint8x8_t v14;
  uint64_t v15;
  size_t v16;
  __int128 v18;
  uint64_t v19;
  void *__p;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;

  v4 = sub_20E9DF85C(a1, a2);
  if (v4)
    return v4;
  v18 = *(_OWORD *)a2;
  v19 = a2[2];
  __p = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 1065353216;
  v4 = sub_20F2E2F4C((uint64_t)a1, (uint64_t *)&v18, (uint64_t)&v18);
  v5 = v22;
  if (v22)
  {
    do
    {
      v8 = v5;
      v5 = (_QWORD *)*v5;
      v9 = (std::__shared_weak_count *)v8[4];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      operator delete(v8);
    }
    while (v5);
  }
  v6 = __p;
  __p = 0;
  if (v6)
    operator delete(v6);
  prime = vcvtps_u32_f32((float)(unint64_t)a1[5] / *((float *)v4 + 18));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v12 = (int8x8_t)v4[6];
  if (prime > *(_QWORD *)&v12)
    goto LABEL_16;
  if (prime >= *(_QWORD *)&v12)
    return v4;
  v13 = vcvtps_u32_f32((float)(unint64_t)v4[8] / *((float *)v4 + 18));
  if (*(_QWORD *)&v12 >= 3uLL)
  {
    v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] <= 1uLL)
    {
      v15 = 1 << -(char)__clz(v13 - 1);
      if (v13 >= 2)
        v13 = v15;
      if (prime <= v13)
        prime = v13;
      if (prime >= *(_QWORD *)&v12)
        return v4;
LABEL_16:
      sub_20E8D2B3C((uint64_t)(v4 + 5), prime);
      return v4;
    }
  }
  v16 = std::__next_prime(v13);
  if (prime <= v16)
    prime = v16;
  if (prime < *(_QWORD *)&v12)
    goto LABEL_16;
  return v4;
}

void sub_20F2E22BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20F28C018((uint64_t)va1);
  sub_20F2828AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E22D8(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20[2];
  std::__shared_weak_count *v21;

  v4 = a1[6];
  v3 = (std::__shared_weak_count *)a1[7];
  v20[1] = v4;
  v21 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_20F2E2468(a1, v20);
  v7 = (std::__shared_weak_count_vtbl *)v20[0];
  *((_QWORD *)&v19 + 1) = v3;
  v20[0] = 0;
  *(_QWORD *)&v19 = v4;
  if (v3)
  {
    v8 = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20F2E2624(a2, v7, &v19);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20[0];
  v20[0] = 0;
  if (v13)
  {
    if (*(_BYTE *)(v13 + 528))
      *(_BYTE *)(v13 + 528) = 0;
    v14 = *(void **)(v13 + 536);
    *(_QWORD *)(v13 + 544) = v14;
    *(_DWORD *)(v13 + 560) = 0;
    if (v14)
      operator delete(v14);
    v15 = *(std::__shared_weak_count **)(v13 + 8);
    if (v15)
      std::__shared_weak_count::__release_weak(v15);
    MEMORY[0x212BC6398](v13, 0x10E2C4097628474);
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20F2E2430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20F2E25B4((uint64_t *)va1);
  sub_20E86665C((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F2E2454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20F2E2468@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  double result;
  unint64_t v13;
  uint64_t v14;
  std::runtime_error *exception;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v13 = a1[4];
    if (v13 >= a1[5])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    a1[4] = v13 + 1;
    v14 = operator new();
    *(_BYTE *)(v14 + 40) = 0;
    *(_BYTE *)(v14 + 528) = 0;
    result = 0.0;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_DWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 536) = 0;
    *(_QWORD *)(v14 + 552) = 0;
    *(_QWORD *)(v14 + 544) = 0;
    *(_DWORD *)(v14 + 560) = 0;
    *a2 = v14;
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = a1[2];
    v9 = *(_QWORD *)(v6 - 8);
    v8 = (_QWORD *)(v6 - 8);
    v7 = v9;
    *v8 = 0;
    if (v9)
    {
      if (*(_BYTE *)(v7 + 528))
        *(_BYTE *)(v7 + 528) = 0;
      v10 = *(void **)(v7 + 536);
      *(_QWORD *)(v7 + 544) = v10;
      *(_DWORD *)(v7 + 560) = 0;
      if (v10)
        operator delete(v10);
      v11 = *(std::__shared_weak_count **)(v7 + 8);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      MEMORY[0x212BC6398](v7, 0x10E2C4097628474);
    }
    a1[2] = v8;
    *a2 = v5;
  }
  return result;
}

void sub_20F2E25A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2E25B4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 528))
      *(_BYTE *)(v2 + 528) = 0;
    v3 = *(void **)(v2 + 536);
    *(_QWORD *)(v2 + 544) = v3;
    *(_DWORD *)(v2 + 560) = 0;
    if (v3)
      operator delete(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    MEMORY[0x212BC6398](v2, 0x10E2C4097628474);
  }
  return a1;
}

std::__shared_weak_count_vtbl **sub_20F2E2624(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2, __int128 *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;

  *a1 = a2;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v8 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD180;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = a2;
  *(_OWORD *)&v6[1].__shared_owners_ = v8;
  a1[1] = (std::__shared_weak_count_vtbl *)v6;
  if (!a2)
    return a1;
  v9 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v9)
  {
    if (v9->__shared_owners_ != -1)
      return a1;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20F2E2758(void *a1)
{
  uint64_t v1;
  std::mutex **v2;

  __cxa_begin_catch(a1);
  sub_20F2E2784(v2, v1);
  __cxa_rethrow();
}

void sub_20F2E2770(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20F2E2784(std::mutex **a1, uint64_t a2)
{
  _BOOL8 result;
  void *v4;
  std::__shared_weak_count *v5;

  result = sub_20F2E2A14(*a1, a2);
  if (a2 && !result)
  {
    if (*(_BYTE *)(a2 + 528))
      *(_BYTE *)(a2 + 528) = 0;
    v4 = *(void **)(a2 + 536);
    *(_QWORD *)(a2 + 544) = v4;
    *(_DWORD *)(a2 + 560) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20F2E27FC(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD180;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20F2E2870(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD180;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F2E28E8(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20F2E2A14(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 528))
      *(_BYTE *)(v2 + 528) = 0;
    v5 = *(void **)(v2 + 536);
    *(_QWORD *)(v2 + 544) = v5;
    *(_DWORD *)(v2 + 560) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    MEMORY[0x212BC6398](v2, 0x10E2C4097628474);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20F2E29A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdL"
                     "b1EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializ"
                     "erIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_dele"
                     "teIS9_EEEESF_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3"
                                "DWithCovIdLb1EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_2"
                                "3PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_1"
                                "0unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb1EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb1EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20F2E2A14(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v11;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v11 = a2;
    v5 = (uint64_t *)sig[2];
    if ((unint64_t)v5 >= sig[3])
    {
      v6 = sub_20F2E2AFC(sig + 1, &v11);
      v7 = v11;
      sig[2] = v6;
      v11 = 0;
      if (v7)
      {
        if (*(_BYTE *)(v7 + 528))
          *(_BYTE *)(v7 + 528) = 0;
        v8 = *(void **)(v7 + 536);
        *(_QWORD *)(v7 + 544) = v8;
        *(_DWORD *)(v7 + 560) = 0;
        if (v8)
          operator delete(v8);
        v9 = *(std::__shared_weak_count **)(v7 + 8);
        if (v9)
          std::__shared_weak_count::__release_weak(v9);
        MEMORY[0x212BC6398](v7, 0x10E2C4097628474);
      }
    }
    else
    {
      *v5 = a2;
      sig[2] = v5 + 1;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20F2E2AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20F2E25B4((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F2E2AFC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_20E867F44();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_20E877A38();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_37;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v4 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*(_BYTE *)(v27 + 528))
          *(_BYTE *)(v27 + 528) = 0;
        v29 = *(void **)(v27 + 536);
        *(_QWORD *)(v27 + 544) = v29;
        *(_DWORD *)(v27 + 560) = 0;
        if (v29)
          operator delete(v29);
        v30 = *(std::__shared_weak_count **)(v27 + 8);
        if (v30)
          std::__shared_weak_count::__release_weak(v30);
        MEMORY[0x212BC6398](v27, 0x10E2C4097628474);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

std::__shared_weak_count_vtbl **sub_20F2E2CD4(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD1D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (a2)
  {
    v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_20F2E2E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F2E25B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F2E2E4C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2E2E70(uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 528))
      *(_BYTE *)(v1 + 528) = 0;
    v2 = *(void **)(v1 + 536);
    *(_QWORD *)(v1 + 544) = v2;
    *(_DWORD *)(v1 + 560) = 0;
    if (v2)
      operator delete(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20F2E2EDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb1EEELb"
                     "0EEEE27__shared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCo"
                                "vIdLb1EEELb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb1EEELb0EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb1EEELb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20F2E2F4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x50uLL);
  v12 = v17;
  *v17 = 0;
  v17[1] = v8;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  v19 = *(_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v17[4] = v19;
  v17[5] = v18;
  v17[6] = v20;
  v21 = *(_QWORD *)(a3 + 40);
  v17[7] = v21;
  v22 = *(_QWORD *)(a3 + 48);
  v17[8] = v22;
  *((_DWORD *)v17 + 18) = *(_DWORD *)(a3 + 56);
  if (v22)
  {
    v23 = *(_QWORD *)(v21 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      v25 = v23 >= v20;
      v24 = v23 % v20;
      if (!v25)
        v24 = v23;
    }
    else
    {
      v24 = v23 & (v20 - 1);
    }
    *(_QWORD *)(v18 + 8 * v24) = v17 + 7;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
  }
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (v9 && (float)(v27 * (float)v9) >= v26)
  {
    v28 = *(_QWORD *)a1;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v29)
    {
LABEL_36:
      *v12 = *v29;
LABEL_71:
      *v29 = v12;
      goto LABEL_72;
    }
  }
  else
  {
    v30 = 1;
    if (v9 >= 3)
      v30 = (v9 & (v9 - 1)) != 0;
    v31 = v30 | (2 * v9);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_47;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_47:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        v3 = v8 % v9;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v29)
          goto LABEL_36;
      }
      else
      {
        v3 = v8;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v29)
          goto LABEL_36;
      }
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
      v28 = *(_QWORD *)a1;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v29)
        goto LABEL_36;
    }
  }
  *v12 = *v16;
  *v16 = v12;
  *(_QWORD *)(v28 + 8 * v3) = v16;
  if (*v12)
  {
    v38 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_71;
  }
LABEL_72:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20F2E3308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE6C9B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E331C()
{
  JUMPOUT(0x212BC6398);
}

void sub_20F2E3334()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F2E3348()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9FD258;
  return result;
}

void sub_20F2E336C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9FD258;
}

uint64_t sub_20F2E3384()
{
  return 1;
}

uint64_t sub_20F2E338C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb1EEEEEPNT_12MapT"
                     "rackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStateSetTypeEdRNS5_11Featu"
                     "reTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb1EEEE"
                                "EPNT_12MapTrackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStat"
                                "eSetTypeEdRNS5_11FeatureTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb1EEEEEPNT_12MapTrackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStateSetTypeEdRNS5_11FeatureTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping33AddCorrespondenceBetweenKeyframesINS0_13MapDataTraitsILb1EEEEEPNT_12MapTrackTypeENS0_4util18UUIDHashU32KeyPairERKNS5_11ImageIDTypeESC_RKNS5_15VIOStateSetTypeEdRNS5_11FeatureTypeESH_RNS5_15MapTrackSetTypeEEUlRKS5_RKT0_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F2E33F8()
{
  return &unk_24C9FD2C8;
}

uint64_t sub_20F2E3404(uint64_t a1, uint64_t a2)
{
  _QWORD *v8;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1025) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1216) = _Q0;
  *(_QWORD *)(a1 + 1232) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1242) = 0;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_WORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1264) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 1272) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  *(_BYTE *)(a1 + 1352) = 0;
  *(_BYTE *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_WORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_QWORD *)(a1 + 2312) = a2;
  *(_WORD *)(a1 + 2320) = 0;
  *(_BYTE *)(a1 + 2328) = 0;
  *(_BYTE *)(a1 + 2408) = 0;
  *(_BYTE *)(a1 + 2416) = 0;
  *(_BYTE *)(a1 + 2528) = 0;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_QWORD *)(a1 + 2576) = -1;
  v8 = operator new(0x68uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C9FD518;
  v8[3] = 850045863;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  v8[10] = 0;
  v8[11] = a1 + 2536;
  *(_QWORD *)(a1 + 2584) = v8 + 3;
  *(_QWORD *)(a1 + 2592) = v8;
  *(_BYTE *)(a1 + 2600) = 0;
  *(_BYTE *)(a1 + 2696) = 0;
  *(_BYTE *)(a1 + 2704) = 0;
  *(_BYTE *)(a1 + 2752) = 0;
  *(_BYTE *)(a1 + 2760) = 0;
  *(_BYTE *)(a1 + 2832) = 0;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 2864) = 0;
  return a1;
}

void sub_20F2E35C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, _QWORD **a14, _QWORD *a15, _QWORD *a16)
{
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD **v44;
  _QWORD *v45;

  v44 = v21;
  v45 = v23;
  sub_20F02C8DC(v20);
  v27 = *(void **)(v16 + 2288);
  if (v27)
  {
    *(_QWORD *)(v16 + 2296) = v27;
    operator delete(v27);
    sub_20E86665C(v18);
    if (!*(_BYTE *)(v16 + 2264))
    {
LABEL_3:
      v28 = *v17;
      if (!*v17)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    sub_20E86665C(v18);
    if (!*(_BYTE *)(v16 + 2264))
      goto LABEL_3;
  }
  sub_20E91E818(v19);
  v28 = *v17;
  if (!*v17)
  {
LABEL_4:
    v29 = *(void **)(v16 + 1016);
    if (!v29)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v16 + 1304) = v28;
  operator delete(v28);
  v29 = *(void **)(v16 + 1016);
  if (!v29)
  {
LABEL_5:
    v30 = *(void **)(v16 + 992);
    if (!v30)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(v16 + 1024) = v29;
  operator delete(v29);
  v30 = *(void **)(v16 + 992);
  if (!v30)
  {
LABEL_6:
    v31 = (_QWORD *)*v22;
    if ((_QWORD *)*v22 == v25)
    {
LABEL_7:
      v32 = 4;
      goto LABEL_15;
    }
LABEL_13:
    if (!v31)
      goto LABEL_16;
    v32 = 5;
    v25 = v31;
LABEL_15:
    (*(void (**)(_QWORD *))(*v25 + 8 * v32))(v25);
LABEL_16:
    v33 = *(_QWORD **)(v16 + 952);
    if (v33 == v23)
    {
      v34 = 4;
    }
    else
    {
      if (!v33)
        goto LABEL_21;
      v34 = 5;
      v45 = *(_QWORD **)(v16 + 952);
    }
    (*(void (**)(void))(*v45 + 8 * v34))();
LABEL_21:
    v35 = *(_QWORD **)(v16 + 920);
    if (v35 == a15)
    {
      v36 = 4;
    }
    else
    {
      if (!v35)
        goto LABEL_26;
      v36 = 5;
      a15 = *(_QWORD **)(v16 + 920);
    }
    (*(void (**)(void))(*a15 + 8 * v36))();
LABEL_26:
    v37 = *(_QWORD **)(v16 + 888);
    if (v37 == a16)
    {
      v38 = 4;
    }
    else
    {
      if (!v37)
      {
        if (*(_BYTE *)(v16 + 856))
          goto LABEL_44;
        goto LABEL_30;
      }
      v38 = 5;
      a16 = *(_QWORD **)(v16 + 888);
    }
    (*(void (**)(void))(*a16 + 8 * v38))();
    if (*(_BYTE *)(v16 + 856))
    {
LABEL_44:
      sub_20F279C38(a12);
      if (*(_BYTE *)(v16 + 472))
      {
LABEL_45:
        sub_20F279C38(a13);
        v39 = *(_QWORD *)(v16 + 88);
        *(_QWORD *)(v16 + 88) = 0;
        if (!v39)
        {
LABEL_33:
          sub_20F2E3840(a14);
          sub_20F2E3884(v44);
          v40 = *(_QWORD *)(v16 + 64);
          *(_QWORD *)(v16 + 64) = 0;
          if (v40)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            v41 = *(_QWORD *)(v16 + 56);
            *(_QWORD *)(v16 + 56) = 0;
            if (!v41)
            {
LABEL_35:
              v42 = *(_QWORD *)(v16 + 48);
              *(_QWORD *)(v16 + 48) = 0;
              if (!v42)
                goto LABEL_36;
              goto LABEL_40;
            }
          }
          else
          {
            v41 = *(_QWORD *)(v16 + 56);
            *(_QWORD *)(v16 + 56) = 0;
            if (!v41)
              goto LABEL_35;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          v42 = *(_QWORD *)(v16 + 48);
          *(_QWORD *)(v16 + 48) = 0;
          if (!v42)
          {
LABEL_36:
            v43 = *v24;
            *v24 = 0;
            if (!v43)
              goto LABEL_37;
            goto LABEL_41;
          }
LABEL_40:
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          v43 = *v24;
          *v24 = 0;
          if (!v43)
          {
LABEL_37:
            sub_20F2E38C8(v16);
            _Unwind_Resume(a1);
          }
LABEL_41:
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          sub_20F2E38C8(v16);
          _Unwind_Resume(a1);
        }
LABEL_32:
        MEMORY[0x212BC6398](v39, 0x1000C40A7F4E9B4);
        goto LABEL_33;
      }
LABEL_31:
      v39 = *(_QWORD *)(v16 + 88);
      *(_QWORD *)(v16 + 88) = 0;
      if (!v39)
        goto LABEL_33;
      goto LABEL_32;
    }
LABEL_30:
    if (*(_BYTE *)(v16 + 472))
      goto LABEL_45;
    goto LABEL_31;
  }
LABEL_12:
  *(_QWORD *)(v16 + 1000) = v30;
  operator delete(v30);
  v31 = (_QWORD *)*v22;
  if ((_QWORD *)*v22 == v25)
    goto LABEL_7;
  goto LABEL_13;
}

_QWORD **sub_20F2E3840(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F31B238(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C400A790E06);
  }
  return a1;
}

_QWORD **sub_20F2E3884(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F312580(v2);
    MEMORY[0x212BC6398](v3, 0x10E0C4071504F1DLL);
  }
  return a1;
}

uint64_t sub_20F2E38C8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20F3122B4((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20F2E3924(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  std::mutex *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  void **v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;

  v2 = (_QWORD *)(a1 + 2840);
  v3 = *(_QWORD **)(a1 + 2864);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_20EE62CA8(a1 + 2760);
  if (*(_BYTE *)(a1 + 2752))
  {
    v5 = *(_QWORD *)(a1 + 2728);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 2736);
      v7 = *(void **)(a1 + 2728);
      if (v6 != v5)
      {
        v8 = *(_QWORD *)(a1 + 2736);
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v6 - 16) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = *(void **)(a1 + 2728);
      }
      *(_QWORD *)(a1 + 2736) = v5;
      operator delete(v7);
    }
    v11 = *(void **)(a1 + 2704);
    if (v11)
    {
      *(_QWORD *)(a1 + 2712) = v11;
      operator delete(v11);
    }
  }
  if (*(_BYTE *)(a1 + 2696))
    sub_20EE62D7C((void **)(a1 + 2600));
  v12 = *(std::mutex **)(a1 + 2584);
  if (v12)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 2584));
    v12[1].__m_.__sig = 0;
    std::mutex::unlock(v12);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 2592);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD **)(a1 + 2544);
  if (v16)
  {
    v17 = *(_QWORD **)(a1 + 2552);
    v18 = *(void **)(a1 + 2544);
    if (v17 != v16)
    {
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
        {
          v21 = sub_20F31342C(v19);
          MEMORY[0x212BC6398](v21, 0x10B2C40714111CFLL);
        }
      }
      while (v17 != v16);
      v18 = *(void **)(a1 + 2544);
    }
    *(_QWORD *)(a1 + 2552) = v16;
    operator delete(v18);
  }
  if (*(_BYTE *)(a1 + 2528))
    sub_20F04BEB4((_QWORD *)(a1 + 2416));
  if (*(_BYTE *)(a1 + 2408))
  {
    v22 = *(void ***)(a1 + 2376);
    if (v22)
    {
      do
      {
        v36 = (void **)*v22;
        if (*((char *)v22 + 39) < 0)
          operator delete(v22[2]);
        operator delete(v22);
        v22 = v36;
      }
      while (v36);
    }
    v23 = *(void **)(a1 + 2360);
    *(_QWORD *)(a1 + 2360) = 0;
    if (v23)
      operator delete(v23);
    v24 = *(std::__shared_weak_count **)(a1 + 2344);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v27 = *(void **)(a1 + 2288);
  if (v27)
  {
    *(_QWORD *)(a1 + 2296) = v27;
    operator delete(v27);
  }
  v28 = *(std::__shared_weak_count **)(a1 + 2280);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (*(_BYTE *)(a1 + 2264))
    sub_20E91E818(a1 + 1352);
  v31 = *(void **)(a1 + 1296);
  if (v31)
  {
    *(_QWORD *)(a1 + 1304) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 1016);
  if (v32)
  {
    *(_QWORD *)(a1 + 1024) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(a1 + 992);
  if (v33)
  {
    *(_QWORD *)(a1 + 1000) = v33;
    operator delete(v33);
  }
  v34 = *(_QWORD **)(a1 + 984);
  if (v34 == (_QWORD *)(a1 + 960))
  {
    v35 = 4;
    v34 = (_QWORD *)(a1 + 960);
  }
  else
  {
    if (!v34)
      goto LABEL_68;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_68:
  v37 = *(_QWORD **)(a1 + 952);
  if (v37 == (_QWORD *)(a1 + 928))
  {
    v38 = 4;
    v37 = (_QWORD *)(a1 + 928);
  }
  else
  {
    if (!v37)
      goto LABEL_73;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_73:
  v39 = *(_QWORD **)(a1 + 920);
  if (v39 == (_QWORD *)(a1 + 896))
  {
    v40 = 4;
    v39 = (_QWORD *)(a1 + 896);
  }
  else
  {
    if (!v39)
      goto LABEL_78;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_78:
  v41 = *(_QWORD **)(a1 + 888);
  if (v41 == (_QWORD *)(a1 + 864))
  {
    v42 = 4;
    v41 = (_QWORD *)(a1 + 864);
  }
  else
  {
    if (!v41)
      goto LABEL_83;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_83:
  if (*(_BYTE *)(a1 + 856))
    sub_20F279C38((void **)(a1 + 480));
  if (*(_BYTE *)(a1 + 472))
    sub_20F279C38((void **)(a1 + 96));
  v43 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v43)
    MEMORY[0x212BC6398](v43, 0x1000C40A7F4E9B4);
  v44 = *(_QWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v44)
  {
    v45 = sub_20F31B238(v44);
    MEMORY[0x212BC6398](v45, 0x10F2C400A790E06);
  }
  v46 = *(_QWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v46)
  {
    v47 = sub_20F312580(v46);
    MEMORY[0x212BC6398](v47, 0x10E0C4071504F1DLL);
  }
  v48 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_QWORD **)(a1 + 16);
  if (v52)
  {
    do
    {
      v53 = (_QWORD *)*v52;
      sub_20F3122B4((uint64_t)(v52 + 3));
      operator delete(v52);
      v52 = v53;
    }
    while (v53);
  }
  v54 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v54)
    operator delete(v54);
  return a1;
}

void sub_20F2E3D9C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v13;
  void **v14;
  void *v15;
  void **v16;
  void **v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void **v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (***v51)();
  uint64_t v52;
  uint64_t **v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  void **v90;
  uint64_t v91;
  uint64_t (***v92)();
  uint64_t v93;
  uint64_t v94;
  void **v95;
  void **v96;
  uint64_t v97;
  uint64_t (***v98)();
  uint64_t v99;
  uint64_t v100;
  void **v101;
  void **v102;
  uint64_t v103;
  uint64_t (***v104)();
  uint64_t v105;
  uint64_t v106;
  void **v107;
  void **v108;
  uint64_t v109;
  uint64_t (***v110)();
  uint64_t v111;
  uint64_t v112;
  void **v113;
  void **v114;
  uint64_t v115;
  uint64_t (***v116)();
  uint64_t v117;
  uint64_t v118;
  void **v119;
  void **v120;
  uint64_t v121;
  uint64_t (***v122)();
  uint64_t v123;
  uint64_t v124;
  void **v125;
  void **v126;
  void *v127;
  double v128;
  uint64_t v129;
  void **v130;
  void **v131;
  void *v132;
  void **v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  size_t v137;
  char *v138;
  char *v139;
  char *v140;
  void *v141;
  void **v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  unsigned __int8 v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  void **v151;
  void *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  void **v158;
  _BYTE *v162;
  std::__shared_weak_count *v163;
  void **v164;
  char v165;
  void *__p[6];
  void *v167[2];
  void *v168[2];
  _BYTE v169[32];
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  _BYTE v173[44];
  __int128 v174;
  int v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  char v182;
  void *v183;
  void **v184;
  uint64_t v185;
  void **v186;
  unsigned __int8 v187;
  uint64_t (**v188)();
  _QWORD *v189;
  uint64_t (***v190)();
  uint64_t *v191[3];
  uint64_t **v192;
  uint64_t (**v193)();
  _QWORD *v194;
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  v13 = (_QWORD *)a7[3];
  if (v13)
  {
    if (v13 == a7)
    {
      __p[3] = __p;
      (*(void (**)(_QWORD *, void **))(*a7 + 24))(a7, __p);
    }
    else
    {
      __p[3] = (void *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    }
  }
  else
  {
    __p[3] = 0;
  }
  v14 = (void **)(a1 + 355);
  if (a1 + 355 == __p)
  {
LABEL_15:
    v17 = (void **)__p[3];
    if (__p[3] == __p)
      goto LABEL_10;
    goto LABEL_16;
  }
  v15 = __p[3];
  v16 = (void **)a1[358];
  if (__p[3] == __p)
  {
    if (v16 == v14)
    {
      (*((void (**)(void **, void **))__p[0] + 3))(__p, &v183);
      (*(void (**)(void *))(*(_QWORD *)__p[3] + 32))(__p[3]);
      __p[3] = 0;
      (*(void (**)(_QWORD, void **))(*(_QWORD *)a1[358] + 24))(a1[358], __p);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[358] + 32))(a1[358]);
      a1[358] = 0;
      __p[3] = __p;
      (*((void (**)(void **, _QWORD *))v183 + 3))(&v183, a1 + 355);
      (*((void (**)(void **))v183 + 4))(&v183);
      a1[358] = v14;
      v17 = (void **)__p[3];
      if (__p[3] == __p)
        goto LABEL_10;
    }
    else
    {
      (*((void (**)(void **, _QWORD *))__p[0] + 3))(__p, a1 + 355);
      (*(void (**)(void *))(*(_QWORD *)__p[3] + 32))(__p[3]);
      __p[3] = *((void **)a1 + 358);
      v19 = (void **)__p[3];
      a1[358] = v14;
      v17 = v19;
      if (v19 == __p)
        goto LABEL_10;
    }
    goto LABEL_16;
  }
  if (v16 == v14)
  {
    (*((void (**)(_QWORD *, void **))*v14 + 3))(a1 + 355, __p);
    (*(void (**)(_QWORD))(*(_QWORD *)a1[358] + 32))(a1[358]);
    a1[358] = __p[3];
    __p[3] = __p;
    goto LABEL_15;
  }
  __p[3] = *((void **)a1 + 358);
  a1[358] = v15;
  v17 = v16;
  if (v16 == __p)
  {
LABEL_10:
    v18 = 4;
    v17 = __p;
LABEL_18:
    (*((void (**)(void))*v17 + v18))();
    goto LABEL_19;
  }
LABEL_16:
  if (v17)
  {
    v18 = 5;
    goto LABEL_18;
  }
LABEL_19:
  if (!a1[358]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 74, (uint64_t)"next_submap_session_cb_", 23, (uint64_t)"Next submap session ID callback is not set!", 43, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v20 = operator new();
  v21 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(v20 + 16) = v21;
  *(_BYTE *)(v20 + 32) = 1;
  *(_DWORD *)(v20 + 36) = 0;
  v22 = a1[11];
  a1[11] = v20;
  if (v22)
    MEMORY[0x212BC6398](v22, 0x1000C40A7F4E9B4);
  if (*((_BYTE *)a1 + 472))
  {
    v23 = (void **)(a1 + 60);
    if (*((_BYTE *)a1 + 856))
      goto LABEL_71;
    goto LABEL_33;
  }
  sub_20F42C6A0(a2 + 1176, a2 + 1200, *(_BYTE *)(a2 + 1224), 0, (uint64_t)&v183);
  if (*((unsigned __int8 *)a1 + 472) == v187)
  {
    if (*((_BYTE *)a1 + 472))
    {
      sub_20F30F420((uint64_t)__p, (uint64_t)&v183);
      sub_20F30F334((uint64_t)(a1 + 12), (uint64_t)__p);
      sub_20F279C38(__p);
      sub_20EDB1780((char **)&v183);
      v23 = (void **)(a1 + 60);
      if (*((_BYTE *)a1 + 856))
        goto LABEL_71;
      goto LABEL_33;
    }
LABEL_32:
    sub_20EDB1780((char **)&v183);
    v23 = (void **)(a1 + 60);
    if (*((_BYTE *)a1 + 856))
      goto LABEL_71;
    goto LABEL_33;
  }
  if (*((_BYTE *)a1 + 472))
  {
    sub_20F279C38((void **)a1 + 12);
    *((_BYTE *)a1 + 472) = 0;
    goto LABEL_32;
  }
  sub_20F30F420((uint64_t)(a1 + 12), (uint64_t)&v183);
  *((_BYTE *)a1 + 472) = 1;
  sub_20EDB1780((char **)&v183);
  v23 = (void **)(a1 + 60);
  if (*((_BYTE *)a1 + 856))
    goto LABEL_71;
LABEL_33:
  if (!*(_BYTE *)(a2 + 1225))
    goto LABEL_71;
  if (*(_DWORD *)(a2 + 2584) != 4)
  {
    sub_20F42C6A0(a2 + 1232, a2 + 1256, *(_BYTE *)(a2 + 1224), 1, (uint64_t)&v183);
    if (*((unsigned __int8 *)a1 + 856) == v187)
    {
      if (*((_BYTE *)a1 + 856))
      {
        sub_20F30F420((uint64_t)__p, (uint64_t)&v183);
        sub_20F30F334((uint64_t)v23, (uint64_t)__p);
        sub_20F279C38(__p);
        sub_20EDB1780((char **)&v183);
        if (!*((_BYTE *)a1 + 856))
          goto LABEL_71;
        goto LABEL_60;
      }
    }
    else
    {
      if (!*((_BYTE *)a1 + 856))
      {
        sub_20F30F420((uint64_t)v23, (uint64_t)&v183);
        *((_BYTE *)a1 + 856) = 1;
        sub_20EDB1780((char **)&v183);
        if (!*((_BYTE *)a1 + 856))
          goto LABEL_71;
        goto LABEL_60;
      }
      sub_20F279C38(v23);
      *((_BYTE *)a1 + 856) = 0;
    }
    sub_20EDB1780((char **)&v183);
    if (!*((_BYTE *)a1 + 856))
      goto LABEL_71;
    goto LABEL_60;
  }
  v181 = 0u;
  v175 = 0;
  v171 = 0;
  *(_QWORD *)v169 = 0;
  *(_OWORD *)&v169[16] = 0u;
  *(_OWORD *)v167 = 0u;
  *(_OWORD *)v168 = 0u;
  memset(__p, 0, sizeof(__p));
  *(_QWORD *)&v169[8] = &off_24CA000E0;
  *(_DWORD *)&v169[24] = 10;
  v170 = 0uLL;
  v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v174 = 0uLL;
  v176 = 0;
  v177 = 0uLL;
  v178 = 0uLL;
  v179 = 0uLL;
  v180 = 0uLL;
  sub_20F30F420((uint64_t)v23, (uint64_t)__p);
  *((_BYTE *)a1 + 856) = 1;
  sub_20F42FE8C(&v169[8]);
  if (v168[0])
    MEMORY[0x212BC6368](v168[0], 0x1000C8052888210);
  v24 = (char *)__p[0];
  if (__p[0])
  {
    v25 = (char *)__p[1];
    v26 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        if (v27)
        {
          *((_QWORD *)v25 - 2) = v27;
          operator delete(v27);
        }
        v28 = *((_QWORD *)v25 - 7);
        if (v28)
          MEMORY[0x212BC6368](v28, 0x1000C80BDFB0063);
        v29 = (void *)*((_QWORD *)v25 - 14);
        if (v29)
        {
          *((_QWORD *)v25 - 13) = v29;
          operator delete(v29);
        }
        v25 -= 112;
      }
      while (v25 != v24);
      v26 = __p[0];
    }
    __p[1] = v24;
    operator delete(v26);
  }
  v30 = *(_DWORD *)(a2 + 2760);
  a1[66] = *(_QWORD *)(a2 + 2752);
  *((_DWORD *)a1 + 134) = v30;
  v31 = *(_DWORD *)(a2 + 2760);
  v32 = *((unsigned __int8 *)a1 + 524);
  a1[64] = *(_QWORD *)(a2 + 2752);
  *((_DWORD *)a1 + 130) = v31;
  if (!v32)
    *((_BYTE *)a1 + 524) = 1;
  a1[96] = 0;
  *((_DWORD *)a1 + 194) = 0;
  if (*((_BYTE *)a1 + 856))
  {
LABEL_60:
    if (*((_BYTE *)a1 + 524)
      && (*((_DWORD *)a1 + 128) != *(_DWORD *)(a2 + 2752)
       || *((_DWORD *)a1 + 129) != *(_DWORD *)(a2 + 2756)
       || *((_DWORD *)a1 + 130) != *(_DWORD *)(a2 + 2760)))
    {
      LOBYTE(__p[0]) = 0;
      v182 = 0;
      sub_20F279C38(v23);
      *((_BYTE *)a1 + 856) = 0;
      if (v182)
        sub_20F279C38(__p);
    }
  }
LABEL_71:
  v33 = a1 + 108;
  __p[0] = &off_24C9FD568;
  __p[1] = a1;
  __p[3] = __p;
  sub_20F313738(__p, a1 + 108);
  v34 = (void **)__p[3];
  if (__p[3] == __p)
  {
    v35 = 4;
    v34 = __p;
  }
  else
  {
    if (!__p[3])
      goto LABEL_76;
    v35 = 5;
  }
  (*((void (**)(void))*v34 + v35))();
LABEL_76:
  v36 = a1 + 112;
  __p[0] = &off_24C9FD5F8;
  __p[1] = a1;
  __p[3] = __p;
  sub_20F313738(__p, a1 + 112);
  v37 = (void **)__p[3];
  if (__p[3] == __p)
  {
    v38 = 4;
    v37 = __p;
  }
  else
  {
    if (!__p[3])
      goto LABEL_81;
    v38 = 5;
  }
  (*((void (**)(void))*v37 + v38))();
LABEL_81:
  v39 = (void **)(a1 + 116);
  __p[0] = &off_24C9FD678;
  __p[1] = a1;
  v40 = __p;
  __p[3] = __p;
  if (a1 + 116 == __p)
  {
    v41 = 4;
    goto LABEL_89;
  }
  v40 = (void **)a1[119];
  if (v40 == v39)
  {
    v183 = &off_24C9FD678;
    v184 = (void **)a1;
    __p[3] = 0;
    (*(void (**)(_QWORD *, void **))(a1[116] + 24))(a1 + 116, __p);
    (*(void (**)(_QWORD))(*(_QWORD *)a1[119] + 32))(a1[119]);
    a1[119] = 0;
    __p[3] = __p;
    (*((void (**)(void **, _QWORD *))v183 + 3))(&v183, a1 + 116);
    (*((void (**)(void **))v183 + 4))(&v183);
    a1[119] = v39;
    v40 = (void **)__p[3];
    if (__p[3] != __p)
      goto LABEL_84;
LABEL_88:
    v41 = 4;
    v40 = __p;
    goto LABEL_89;
  }
  a1[116] = &off_24C9FD678;
  a1[117] = a1;
  __p[3] = v40;
  a1[119] = v39;
  if (v40 == __p)
    goto LABEL_88;
LABEL_84:
  if (!v40)
    goto LABEL_90;
  v41 = 5;
LABEL_89:
  (*((void (**)(void))*v40 + v41))();
LABEL_90:
  v42 = (void **)(a1 + 120);
  __p[0] = &off_24C9FD708;
  __p[1] = a1;
  v43 = __p;
  __p[3] = __p;
  if (a1 + 120 == __p)
  {
    v44 = 4;
    goto LABEL_98;
  }
  v43 = (void **)a1[123];
  if (v43 == v42)
  {
    v183 = &off_24C9FD708;
    v184 = (void **)a1;
    __p[3] = 0;
    (*(void (**)(_QWORD *, void **))(a1[120] + 24))(a1 + 120, __p);
    (*(void (**)(_QWORD))(*(_QWORD *)a1[123] + 32))(a1[123]);
    a1[123] = 0;
    __p[3] = __p;
    (*((void (**)(void **, _QWORD *))v183 + 3))(&v183, a1 + 120);
    (*((void (**)(void **))v183 + 4))(&v183);
    a1[123] = v42;
    v43 = (void **)__p[3];
    if (__p[3] != __p)
      goto LABEL_93;
LABEL_97:
    v44 = 4;
    v43 = __p;
    goto LABEL_98;
  }
  a1[120] = &off_24C9FD708;
  a1[121] = a1;
  __p[3] = v43;
  a1[123] = v42;
  if (v43 == __p)
    goto LABEL_97;
LABEL_93:
  if (!v43)
    goto LABEL_99;
  v44 = 5;
LABEL_98:
  (*((void (**)(void))*v43 + v44))();
LABEL_99:
  if (*((_BYTE *)a1 + 472))
  {
    v193 = (uint64_t (**)())(a1 + 12);
    LOBYTE(v194) = 1;
    v45 = *((_BYTE *)a1 + 856);
    if (v45)
    {
LABEL_101:
      v164 = v23;
      v45 = 1;
      goto LABEL_104;
    }
  }
  else
  {
    LOBYTE(v193) = 0;
    LOBYTE(v194) = 0;
    v45 = *((_BYTE *)a1 + 856);
    if (v45)
      goto LABEL_101;
  }
  LOBYTE(v164) = 0;
LABEL_104:
  v165 = v45;
  v46 = operator new();
  v47 = (_QWORD *)a1[111];
  if (!v47)
  {
LABEL_107:
    __p[3] = v47;
    goto LABEL_109;
  }
  if (v47 != v33)
  {
    v47 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v47 + 16))(v47);
    goto LABEL_107;
  }
  __p[3] = __p;
  (*(void (**)(_QWORD *, void **))(*v33 + 24))(a1 + 108, __p);
LABEL_109:
  v48 = a1[115];
  if (!v48)
  {
LABEL_112:
    v186 = (void **)v48;
    goto LABEL_114;
  }
  if ((_QWORD *)v48 != v36)
  {
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    goto LABEL_112;
  }
  v186 = &v183;
  (*(void (**)(_QWORD *, void **))(*v36 + 24))(a1 + 112, &v183);
LABEL_114:
  v49 = a1[119];
  if (!v49)
  {
LABEL_117:
    v192 = (uint64_t **)v49;
    goto LABEL_119;
  }
  if ((void **)v49 != v39)
  {
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
    goto LABEL_117;
  }
  v192 = v191;
  (*((void (**)(_QWORD *, uint64_t **))*v39 + 3))(a1 + 116, v191);
LABEL_119:
  v50 = a1[123];
  if (!v50)
  {
LABEL_122:
    v190 = (uint64_t (***)())v50;
    goto LABEL_124;
  }
  if ((void **)v50 != v42)
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    goto LABEL_122;
  }
  v190 = &v188;
  (*((void (**)(_QWORD *, uint64_t (***)()))*v42 + 3))(a1 + 120, &v188);
LABEL_124:
  sub_20F31B524(v46, a5, a4, a2, a9, (uint64_t)&v193, (uint64_t)&v164, (uint64_t)__p, (uint64_t)&v183, (uint64_t)v191, (uint64_t)&v188);
  v51 = v190;
  if (v190 == &v188)
  {
    v52 = 4;
    v51 = &v188;
  }
  else
  {
    if (!v190)
      goto LABEL_129;
    v52 = 5;
  }
  (*v51)[v52]();
LABEL_129:
  v53 = v192;
  if (v192 == v191)
  {
    v54 = 4;
    v53 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_134;
    v54 = 5;
  }
  ((void (*)(void))(*v53)[v54])();
LABEL_134:
  v55 = v186;
  if (v186 == &v183)
  {
    v56 = 4;
    v55 = &v183;
  }
  else
  {
    if (!v186)
      goto LABEL_139;
    v56 = 5;
  }
  (*((void (**)(void))*v55 + v56))();
LABEL_139:
  v57 = (void **)__p[3];
  if (__p[3] == __p)
  {
    v58 = 4;
    v57 = __p;
  }
  else
  {
    if (!__p[3])
      goto LABEL_144;
    v58 = 5;
  }
  (*((void (**)(void))*v57 + v58))();
LABEL_144:
  v59 = (_QWORD *)a1[10];
  a1[10] = v46;
  if (v59)
  {
    v60 = sub_20F31B238(v59);
    MEMORY[0x212BC6398](v60, 0x10F2C400A790E06);
    v46 = a1[10];
  }
  v61 = *a6;
  *(_QWORD *)(v46 + 2968) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(v46 + 2952) = v61;
  if (a1[3])
  {
    v62 = (_QWORD *)a1[2];
    if (v62)
    {
      do
      {
        v63 = (_QWORD *)*v62;
        sub_20F3122B4((uint64_t)(v62 + 3));
        operator delete(v62);
        v62 = v63;
      }
      while (v63);
    }
    a1[2] = 0;
    v64 = a1[1];
    if (v64)
    {
      for (i = 0; i != v64; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
  v66 = a1[5];
  a1[5] = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = a1[7];
  a1[7] = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = a1[8];
  a1[8] = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (_QWORD *)a1[9];
  a1[9] = 0;
  if (v69)
  {
    v70 = sub_20F312580(v69);
    MEMORY[0x212BC6398](v70, 0x10E0C4071504F1DLL);
  }
  v71 = operator new();
  *(_OWORD *)(v71 + 464) = 0u;
  *(_OWORD *)(v71 + 480) = 0u;
  *(_OWORD *)(v71 + 432) = 0u;
  *(_OWORD *)(v71 + 448) = 0u;
  *(_OWORD *)(v71 + 400) = 0u;
  *(_OWORD *)(v71 + 416) = 0u;
  *(_OWORD *)(v71 + 368) = 0u;
  *(_OWORD *)(v71 + 384) = 0u;
  *(_OWORD *)(v71 + 336) = 0u;
  *(_OWORD *)(v71 + 352) = 0u;
  *(_OWORD *)(v71 + 304) = 0u;
  *(_OWORD *)(v71 + 320) = 0u;
  *(_OWORD *)(v71 + 272) = 0u;
  *(_OWORD *)(v71 + 288) = 0u;
  *(_OWORD *)(v71 + 240) = 0u;
  *(_OWORD *)(v71 + 256) = 0u;
  *(_OWORD *)(v71 + 208) = 0u;
  *(_OWORD *)(v71 + 224) = 0u;
  *(_OWORD *)(v71 + 192) = 0u;
  *(_QWORD *)v71 = off_24C9FBC78;
  *(_OWORD *)(v71 + 8) = 0u;
  *(_OWORD *)(v71 + 24) = 0u;
  *(_OWORD *)(v71 + 40) = 0u;
  *(_OWORD *)(v71 + 56) = 0u;
  *(_OWORD *)(v71 + 72) = 0u;
  *(_OWORD *)(v71 + 88) = 0u;
  *(_OWORD *)(v71 + 104) = 0u;
  *(_OWORD *)(v71 + 120) = 0u;
  *(_OWORD *)(v71 + 136) = 0u;
  *(_OWORD *)(v71 + 152) = 0u;
  *(_OWORD *)(v71 + 168) = 0u;
  *(_OWORD *)(v71 + 184) = 0u;
  *(_OWORD *)(v71 + 448) = 0u;
  *(_OWORD *)(v71 + 464) = 0u;
  *(_QWORD *)(v71 + 480) = 0;
  *(_DWORD *)(v71 + 488) = 1065353216;
  v72 = a1[7];
  a1[7] = v71;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = operator new();
  *(_OWORD *)(v73 + 99) = 0u;
  *(_OWORD *)(v73 + 88) = 0u;
  *(_OWORD *)(v73 + 72) = 0u;
  *(_OWORD *)(v73 + 56) = 0u;
  *(_OWORD *)(v73 + 40) = 0u;
  *(_OWORD *)(v73 + 24) = 0u;
  *(_OWORD *)(v73 + 8) = 0u;
  *(_BYTE *)(v73 + 115) = 1;
  *(_DWORD *)(v73 + 116) = 1;
  *(_QWORD *)v73 = &off_24C9FBCA8;
  *(_QWORD *)(v73 + 120) = a1;
  v74 = a1[5];
  a1[5] = v73;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = operator new();
  sub_20F233984(v75, (uint64_t)a1);
  v76 = a1[6];
  a1[6] = v75;
  if (v76)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    v75 = a1[6];
  }
  v77 = a1[10];
  v78 = a1[5];
  if (*(_BYTE *)(v77 + 2614))
  {
    *(_BYTE *)(v78 + 112) = 1;
    *(_BYTE *)(v75 + 112) = 1;
  }
  if (*(_BYTE *)(v77 + 2615))
  {
    *(_BYTE *)(v78 + 113) = 1;
    *(_BYTE *)(v75 + 113) = 1;
  }
  *(_BYTE *)(v75 + 114) = *(_BYTE *)(v77 + 2616);
  *(_DWORD *)(v75 + 116) = *(_DWORD *)(v77 + 2604);
  *(_DWORD *)(v78 + 116) = *(_DWORD *)(v77 + 2608);
  v183 = &off_24C9FD7D8;
  v184 = (void **)a1;
  v186 = &v183;
  v79 = *(_QWORD *)(v78 + 40);
  if (v79 >= *(_QWORD *)(v78 + 48))
  {
    v80 = sub_20F233760((uint64_t *)(v78 + 32), &v183);
  }
  else
  {
    *(_QWORD *)(v79 + 24) = v79;
    (*((void (**)(void **, unint64_t))*v186 + 3))(v186, v79);
    v80 = v79 + 32;
    *(_QWORD *)(v78 + 40) = v79 + 32;
  }
  *(_QWORD *)(v78 + 40) = v80;
  v81 = v186;
  if (v186 == &v183)
  {
    v82 = 4;
    v81 = &v183;
  }
  else
  {
    if (!v186)
      goto LABEL_179;
    v82 = 5;
  }
  (*((void (**)(void))*v81 + v82))();
LABEL_179:
  v83 = (uint64_t *)a1[6];
  if (!v83)
    goto LABEL_188;
  v191[0] = (uint64_t *)&off_24C9FD858;
  v191[1] = a1;
  v192 = v191;
  v84 = v83[5];
  if (v84 >= v83[6])
  {
    v85 = sub_20F233760(v83 + 4, v191);
  }
  else
  {
    *(_QWORD *)(v84 + 24) = v84;
    ((void (*)(uint64_t **, unint64_t))(*v192)[3])(v192, v84);
    v85 = v84 + 32;
    v83[5] = v84 + 32;
  }
  v83[5] = v85;
  v86 = v192;
  if (v192 == v191)
  {
    v87 = 4;
    v86 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_188;
    v87 = 5;
  }
  ((void (*)(void))(*v86)[v87])();
LABEL_188:
  v88 = a1[7];
  if (!v88)
    goto LABEL_273;
  v188 = &off_24C9FD8D8;
  v189 = a1;
  v190 = &v188;
  v89 = (void **)(v88 + 264);
  v90 = __p;
  __p[3] = __p;
  __p[0] = &off_24C9FD8D8;
  __p[1] = a1;
  if ((void **)(v88 + 264) == __p)
  {
    v91 = 4;
    goto LABEL_197;
  }
  v90 = *(void ***)(v88 + 288);
  if (v90 == v89)
  {
    v193 = &off_24C9FD8D8;
    v194 = a1;
    __p[3] = 0;
    (*((void (**)(uint64_t, void **))*v89 + 3))(v88 + 264, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v88 + 288) + 32))(*(_QWORD *)(v88 + 288));
    *(_QWORD *)(v88 + 288) = 0;
    __p[3] = __p;
    ((void (*)(uint64_t (***)(), uint64_t))v193[3])(&v193, v88 + 264);
    ((void (*)(uint64_t (***)()))v193[4])(&v193);
    *(_QWORD *)(v88 + 288) = v89;
    v90 = (void **)__p[3];
    if (__p[3] != __p)
      goto LABEL_192;
LABEL_196:
    v91 = 4;
    v90 = __p;
    goto LABEL_197;
  }
  *(_QWORD *)(v88 + 264) = &off_24C9FD8D8;
  *(_QWORD *)(v88 + 272) = a1;
  __p[3] = v90;
  *(_QWORD *)(v88 + 288) = v89;
  if (v90 == __p)
    goto LABEL_196;
LABEL_192:
  if (!v90)
    goto LABEL_198;
  v91 = 5;
LABEL_197:
  (*((void (**)(void))*v90 + v91))();
LABEL_198:
  v92 = v190;
  if (v190 == &v188)
  {
    v93 = 4;
    v92 = &v188;
  }
  else
  {
    if (!v190)
      goto LABEL_203;
    v93 = 5;
  }
  (*v92)[v93]();
LABEL_203:
  v94 = a1[7];
  v188 = &off_24C9FD968;
  v189 = a1;
  v190 = &v188;
  v95 = (void **)(v94 + 200);
  v96 = __p;
  __p[3] = __p;
  __p[0] = &off_24C9FD968;
  __p[1] = a1;
  if ((void **)(v94 + 200) == __p)
  {
    v97 = 4;
    goto LABEL_211;
  }
  v96 = *(void ***)(v94 + 224);
  if (v96 == v95)
  {
    v193 = &off_24C9FD968;
    v194 = a1;
    __p[3] = 0;
    (*((void (**)(uint64_t, void **))*v95 + 3))(v94 + 200, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v94 + 224) + 32))(*(_QWORD *)(v94 + 224));
    *(_QWORD *)(v94 + 224) = 0;
    __p[3] = __p;
    ((void (*)(uint64_t (***)(), uint64_t))v193[3])(&v193, v94 + 200);
    ((void (*)(uint64_t (***)()))v193[4])(&v193);
    *(_QWORD *)(v94 + 224) = v95;
    v96 = (void **)__p[3];
    if (__p[3] != __p)
      goto LABEL_206;
LABEL_210:
    v97 = 4;
    v96 = __p;
    goto LABEL_211;
  }
  *(_QWORD *)(v94 + 200) = &off_24C9FD968;
  *(_QWORD *)(v94 + 208) = a1;
  __p[3] = v96;
  *(_QWORD *)(v94 + 224) = v95;
  if (v96 == __p)
    goto LABEL_210;
LABEL_206:
  if (!v96)
    goto LABEL_212;
  v97 = 5;
LABEL_211:
  (*((void (**)(void))*v96 + v97))();
LABEL_212:
  v98 = v190;
  if (v190 == &v188)
  {
    v99 = 4;
    v98 = &v188;
  }
  else
  {
    if (!v190)
      goto LABEL_217;
    v99 = 5;
  }
  (*v98)[v99]();
LABEL_217:
  v100 = a1[7];
  v188 = &off_24C9FD9F8;
  v189 = a1;
  v190 = &v188;
  v101 = (void **)(v100 + 232);
  v102 = __p;
  __p[3] = __p;
  __p[0] = &off_24C9FD9F8;
  __p[1] = a1;
  if ((void **)(v100 + 232) == __p)
  {
    v103 = 4;
    goto LABEL_225;
  }
  v102 = *(void ***)(v100 + 256);
  if (v102 == v101)
  {
    v193 = &off_24C9FD9F8;
    v194 = a1;
    __p[3] = 0;
    (*((void (**)(uint64_t, void **))*v101 + 3))(v100 + 232, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v100 + 256) + 32))(*(_QWORD *)(v100 + 256));
    *(_QWORD *)(v100 + 256) = 0;
    __p[3] = __p;
    ((void (*)(uint64_t (***)(), uint64_t))v193[3])(&v193, v100 + 232);
    ((void (*)(uint64_t (***)()))v193[4])(&v193);
    *(_QWORD *)(v100 + 256) = v101;
    v102 = (void **)__p[3];
    if (__p[3] != __p)
      goto LABEL_220;
LABEL_224:
    v103 = 4;
    v102 = __p;
    goto LABEL_225;
  }
  *(_QWORD *)(v100 + 232) = &off_24C9FD9F8;
  *(_QWORD *)(v100 + 240) = a1;
  __p[3] = v102;
  *(_QWORD *)(v100 + 256) = v101;
  if (v102 == __p)
    goto LABEL_224;
LABEL_220:
  if (!v102)
    goto LABEL_226;
  v103 = 5;
LABEL_225:
  (*((void (**)(void))*v102 + v103))();
LABEL_226:
  v104 = v190;
  if (v190 == &v188)
  {
    v105 = 4;
    v104 = &v188;
  }
  else
  {
    if (!v190)
      goto LABEL_231;
    v105 = 5;
  }
  (*v104)[v105]();
LABEL_231:
  v106 = a1[7];
  v188 = &off_24C9FDA88;
  v189 = a1;
  v190 = &v188;
  v107 = (void **)(v106 + 328);
  v108 = __p;
  __p[3] = __p;
  __p[0] = &off_24C9FDA88;
  __p[1] = a1;
  if ((void **)(v106 + 328) == __p)
  {
    v109 = 4;
    goto LABEL_239;
  }
  v108 = *(void ***)(v106 + 352);
  if (v108 == v107)
  {
    v193 = &off_24C9FDA88;
    v194 = a1;
    __p[3] = 0;
    (*((void (**)(uint64_t, void **))*v107 + 3))(v106 + 328, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v106 + 352) + 32))(*(_QWORD *)(v106 + 352));
    *(_QWORD *)(v106 + 352) = 0;
    __p[3] = __p;
    ((void (*)(uint64_t (***)(), uint64_t))v193[3])(&v193, v106 + 328);
    ((void (*)(uint64_t (***)()))v193[4])(&v193);
    *(_QWORD *)(v106 + 352) = v107;
    v108 = (void **)__p[3];
    if (__p[3] != __p)
      goto LABEL_234;
LABEL_238:
    v109 = 4;
    v108 = __p;
    goto LABEL_239;
  }
  *(_QWORD *)(v106 + 328) = &off_24C9FDA88;
  *(_QWORD *)(v106 + 336) = a1;
  __p[3] = v108;
  *(_QWORD *)(v106 + 352) = v107;
  if (v108 == __p)
    goto LABEL_238;
LABEL_234:
  if (!v108)
    goto LABEL_240;
  v109 = 5;
LABEL_239:
  (*((void (**)(void))*v108 + v109))();
LABEL_240:
  v110 = v190;
  if (v190 == &v188)
  {
    v111 = 4;
    v110 = &v188;
  }
  else
  {
    if (!v190)
      goto LABEL_245;
    v111 = 5;
  }
  (*v110)[v111]();
LABEL_245:
  v112 = a1[7];
  v188 = &off_24C9FDB18;
  v189 = a1;
  v190 = &v188;
  v113 = (void **)(v112 + 392);
  v114 = __p;
  __p[3] = __p;
  __p[0] = &off_24C9FDB18;
  __p[1] = a1;
  if ((void **)(v112 + 392) == __p)
  {
    v115 = 4;
  }
  else
  {
    v114 = *(void ***)(v112 + 416);
    if (v114 == v113)
    {
      __p[3] = 0;
      v114 = __p;
      (*((void (**)(uint64_t, void **))*v113 + 3))(v112 + 392, __p);
      (*(void (**)(_QWORD))(**(_QWORD **)(v112 + 416) + 32))(*(_QWORD *)(v112 + 416));
      __p[3] = __p;
      *(_QWORD *)(v112 + 392) = &off_24C9FDB18;
      *(_QWORD *)(v112 + 400) = a1;
      v115 = 4;
      *(_QWORD *)(v112 + 416) = v113;
    }
    else
    {
      *(_QWORD *)(v112 + 392) = &off_24C9FDB18;
      *(_QWORD *)(v112 + 400) = a1;
      __p[3] = v114;
      *(_QWORD *)(v112 + 416) = v113;
      if (v114 == __p)
      {
        v115 = 4;
        v114 = __p;
      }
      else
      {
        if (!v114)
        {
          v116 = &v188;
          v117 = 4;
          goto LABEL_258;
        }
        v115 = 5;
      }
    }
  }
  (*((void (**)(void **))*v114 + v115))(v114);
  v116 = v190;
  if (v190 == &v188)
  {
    v117 = 4;
    v116 = &v188;
  }
  else
  {
    if (!v190)
      goto LABEL_259;
    v117 = 5;
  }
LABEL_258:
  (*v116)[v117]();
LABEL_259:
  v118 = a1[7];
  v188 = &off_24C9FDBA8;
  v189 = a1;
  v190 = &v188;
  v119 = (void **)(v118 + 424);
  v120 = __p;
  __p[3] = __p;
  __p[0] = &off_24C9FDBA8;
  __p[1] = a1;
  if ((void **)(v118 + 424) == __p)
  {
    v121 = 4;
  }
  else
  {
    v120 = *(void ***)(v118 + 448);
    if (v120 == v119)
    {
      __p[3] = 0;
      v120 = __p;
      (*((void (**)(uint64_t, void **))*v119 + 3))(v118 + 424, __p);
      (*(void (**)(_QWORD))(**(_QWORD **)(v118 + 448) + 32))(*(_QWORD *)(v118 + 448));
      __p[3] = __p;
      *(_QWORD *)(v118 + 424) = &off_24C9FDBA8;
      *(_QWORD *)(v118 + 432) = a1;
      v121 = 4;
      *(_QWORD *)(v118 + 448) = v119;
    }
    else
    {
      *(_QWORD *)(v118 + 424) = &off_24C9FDBA8;
      *(_QWORD *)(v118 + 432) = a1;
      __p[3] = v120;
      *(_QWORD *)(v118 + 448) = v119;
      if (v120 == __p)
      {
        v121 = 4;
        v120 = __p;
      }
      else
      {
        if (!v120)
        {
          v122 = &v188;
          v123 = 4;
          goto LABEL_272;
        }
        v121 = 5;
      }
    }
  }
  (*((void (**)(void **))*v120 + v121))(v120);
  v122 = v190;
  if (v190 == &v188)
  {
    v123 = 4;
    v122 = &v188;
  }
  else
  {
    if (!v190)
      goto LABEL_273;
    v123 = 5;
  }
LABEL_272:
  (*v122)[v123]();
LABEL_273:
  v124 = a1[10];
  if (*(char *)(v124 + 2447) < 0)
  {
    if (!*(_QWORD *)(v124 + 2432))
      goto LABEL_303;
  }
  else if (!*(_BYTE *)(v124 + 2447))
  {
    goto LABEL_303;
  }
  if (!*((_BYTE *)a1 + 2528) || !a1[314] || a1[308] == a1[309])
  {
    __p[0] = (void *)0x80000000CLL;
    memset(&__p[1], 0, 32);
    LODWORD(__p[5]) = 1065353216;
    *(_OWORD *)v167 = 0u;
    *(_OWORD *)v168 = 0u;
    memset(v169, 0, 28);
    v183 = 0;
    v184 = 0;
    v185 = 0;
    sub_20EAC040C((char **)&v183, 0x32uLL);
    v191[0] = (uint64_t *)&v183;
    sub_20F43AFA4((uint64_t)&v188, (uint64_t)&v193, v191);
    sub_210213844((int *)__p, v124 + 2424, (std::string **)&v183);
    v125 = (void **)v183;
    if (v183)
    {
      v126 = v184;
      v127 = v183;
      if (v184 != v183)
      {
        do
        {
          if (*((char *)v126 - 1) < 0)
            operator delete(*(v126 - 3));
          v126 -= 3;
        }
        while (v126 != v125);
        v127 = v183;
      }
      v184 = v125;
      operator delete(v127);
    }
    v128 = sub_20FDBE57C(a1 + 302, (uint64_t)__p);
    v129 = *(_QWORD *)&v169[16];
    *(_QWORD *)&v169[16] = 0;
    if (v129)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v129 + 8))(v129, v128);
    if (v168[1])
    {
      *(void **)v169 = v168[1];
      operator delete(v168[1]);
    }
    v130 = (void **)v167[0];
    if (v167[0])
    {
      v131 = (void **)v167[1];
      v132 = v167[0];
      if (v167[1] != v167[0])
      {
        do
        {
          if (*((char *)v131 - 1) < 0)
            operator delete(*(v131 - 3));
          v131 -= 3;
        }
        while (v131 != v130);
        v132 = v167[0];
      }
      v167[1] = v130;
      operator delete(v132);
    }
    v133 = (void **)__p[3];
    if (__p[3])
    {
      do
      {
        v142 = (void **)*v133;
        if (*((char *)v133 + 39) < 0)
          operator delete(v133[2]);
        operator delete(v133);
        v133 = v142;
      }
      while (v142);
    }
    v134 = __p[1];
    __p[1] = 0;
    if (v134)
      operator delete(v134);
  }
LABEL_303:
  if (**(_BYTE **)a3 && !*((_BYTE *)a1 + 2408))
  {
    v143 = *(std::__shared_weak_count **)(a3 + 8);
    v162 = *(_BYTE **)a3;
    v163 = v143;
    if (v143)
    {
      p_shared_owners = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldxr(p_shared_owners);
      while (__stxr(v145 + 1, p_shared_owners));
    }
    v146 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
    if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA78))
    {
      sub_20FDBEA28(qword_254A6DA60);
      __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DA78);
    }
    LODWORD(__p[0]) = 600;
    if (v163)
    {
      v147 = (unint64_t *)&v163->__shared_owners_;
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
      __p[1] = v162;
      __p[2] = v163;
      do
        v149 = __ldxr(v147);
      while (__stxr(v149 + 1, v147));
      __p[3] = qword_254A6DA60;
      do
        v150 = __ldaxr(v147);
      while (__stlxr(v150 - 1, v147));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    else
    {
      __p[1] = v162;
      __p[2] = 0;
      __p[3] = qword_254A6DA60;
    }
    *(_OWORD *)&__p[4] = 0u;
    *(_OWORD *)v167 = 0u;
    LODWORD(v168[0]) = 1065353216;
    LODWORD(v168[1]) = 0;
    sub_20FDBE430((uint64_t)(a1 + 291), (uint64_t)__p);
    v151 = (void **)v167[0];
    if (v167[0])
    {
      do
      {
        v158 = (void **)*v151;
        if (*((char *)v151 + 39) < 0)
          operator delete(v151[2]);
        operator delete(v151);
        v151 = v158;
      }
      while (v158);
    }
    v152 = __p[4];
    __p[4] = 0;
    if (v152)
      operator delete(v152);
    v153 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v154 = (unint64_t *)((char *)__p[2] + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    if (v163)
    {
      v156 = (unint64_t *)&v163->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
  }
  if (*((_BYTE *)a1 + 2408) || *((_BYTE *)a1 + 2528) && a1[314] && a1[308] != a1[309])
  {
    v135 = a1[10];
    *(_QWORD *)(v135 + 3008) = a1 + 291;
    *(_QWORD *)(v135 + 3016) = 1;
  }
  v136 = *(unsigned int *)(a2 + 2796);
  if (!(_DWORD)v136)
  {
    v138 = 0;
    v140 = 0;
    v139 = 0;
    v141 = (void *)a1[162];
    if (!v141)
      goto LABEL_310;
    goto LABEL_309;
  }
  v137 = 16 * v136;
  v138 = (char *)operator new(16 * v136);
  v139 = &v138[16 * v136];
  bzero(v138, v137);
  v140 = &v138[v137];
  v141 = (void *)a1[162];
  if (v141)
  {
LABEL_309:
    a1[163] = v141;
    operator delete(v141);
    a1[162] = 0;
    a1[163] = 0;
    a1[164] = 0;
  }
LABEL_310:
  a1[162] = v138;
  a1[163] = v140;
  a1[164] = v139;
  a1[165] = 0;
  a1[167] = 0;
  a1[166] = 0;
  a1[359] = a8;
}

void sub_20F2E56E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_254A6DA78);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E5704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char *a68;

  sub_20EDB1780(&a68);
  _Unwind_Resume(a1);
}

void sub_20F2E5718(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void **sub_20F2E5988(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  sub_20F42FE8C(a1 + 11);
  v2 = a1[8];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8052888210);
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v7 = *((_QWORD *)v4 - 7);
        if (v7)
          MEMORY[0x212BC6368](v7, 0x1000C80BDFB0063);
        v8 = (void *)*((_QWORD *)v4 - 14);
        if (v8)
        {
          *((_QWORD *)v4 - 13) = v8;
          operator delete(v8);
        }
        v4 -= 112;
      }
      while (v4 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_20F2E5A48(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t *j;
  uint64_t v16;
  __uint64_t *v17;
  __uint64_t *v18;
  uint64_t v19;
  __uint64_t *v20;
  void *v21;
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  void *__p;
  char v33;
  __uint64_t v34[2];

  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v20) = 0;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v34[0] = 0;
    pthread_threadid_np(0, v34);
    v11 = v34[0];
    timespec_get((timespec *)v34, 1);
    sub_210219E20(&v20, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "MI:MapReinitialize", 0x12uLL, v9, v10, v11, v34);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __uint64_t **))(*(_QWORD *)v14 + 48))(v14, &v20);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v33 < 0)
    {
      operator delete(__p);
      if ((v31 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v29)
        {
LABEL_14:
          if (v26 && v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(v21);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v28 < 0)
          operator delete(v27);
        goto LABEL_14;
      }
    }
    else if ((v31 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v30);
    if (!v29)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    LOWORD(v20) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20F2E5E94((_QWORD *)a1);
  for (j = *(uint64_t **)(a1 + 16); j; j = (uint64_t *)*j)
    *((_DWORD *)j + 82) &= ~0x100u;
  v16 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(v16 + 2637) || *(_QWORD *)(a1 + 24) >= 2uLL)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    sub_20F215D9C(*(_QWORD *)(v16 + 2944), (uint64_t)&v20);
    v17 = v20;
    v18 = (__uint64_t *)v21;
    if (v20 != v21)
    {
      do
      {
        v34[0] = *v17;
        sub_20F30DBBC((int8x8_t *)a1, v34);
        ++v17;
      }
      while (v17 != v18);
      v17 = v20;
    }
    if (v17)
    {
      v21 = v17;
      operator delete(v17);
    }
  }
  sub_20F2E6100((int8x8_t *)a1, *(_BYTE *)a2, *(_BYTE *)(a2 + 6), a3);
  v19 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(v19 + 32) = 1;
  *(_DWORD *)(v19 + 36) = 0;
  sub_20F31D5EC(*(_QWORD *)(a1 + 80));
  if (*(_BYTE *)(a1 + 1345))
    *(_BYTE *)(a1 + 1345) = 0;
  *(_BYTE *)(a1 + 1040) = 0;
  if (*(_BYTE *)(a1 + 1192))
    *(_BYTE *)(a1 + 1192) = 0;
  *(_BYTE *)(a1 + 1256) = 1;
  *(_BYTE *)(a1 + 2321) = 1;
}

void sub_20F2E5DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
LABEL_7:
      if (a32 < 0)
        operator delete(a27);
LABEL_9:
      if (a26 && a25 < 0)
        operator delete(a20);
      if (a19 < 0)
        operator delete(a14);
      if (v45)
      {
        free(v45);
        _Unwind_Resume(exception_object);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F2E5E94(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *__p;
  void *v25;

  v2 = a1[10];
  v3 = *(char **)(v2 + 2824);
  v4 = *(char **)(v2 + 2832);
  if (v3 == v4)
    goto LABEL_22;
  v5 = v4 - v3 - 4472;
  if (v5 >> 3 < 0x22F)
  {
    v6 = 0;
    v7 = *(char **)(v2 + 2824);
    do
    {
LABEL_7:
      v6 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v7 + 2) + 424) + 64)
          - ((uint64_t)(*((_QWORD *)v7 + 5) - *((_QWORD *)v7 + 4)) >> 4);
      v7 += 4472;
    }
    while (v7 != v4);
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  v10 = v5 / 0x1178 + 1;
  v7 = &v3[4472 * (v10 & 0x1FFFFFFFFFFFFELL)];
  v11 = v10 & 0x1FFFFFFFFFFFFELL;
  do
  {
    v8 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v3 + 2) + 424) + 64)
        - ((uint64_t)(*((_QWORD *)v3 + 5) - *((_QWORD *)v3 + 4)) >> 4);
    v9 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v3 + 561) + 424) + 64)
        - ((uint64_t)(*((_QWORD *)v3 + 564) - *((_QWORD *)v3 + 563)) >> 4);
    v3 += 8944;
    v11 -= 2;
  }
  while (v11);
  v6 = v9 + v8;
  if (v10 != (v10 & 0x1FFFFFFFFFFFFELL))
    goto LABEL_7;
LABEL_8:
  if (v6)
  {
    v12 = a1[358];
    if (!v12)
      sub_20E86D37C();
    __p = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    sub_20F2F19AC((uint64_t)a1, (uint64_t *)&__p, 1);
    if (a1[5])
    {
      if (a1[7])
      {
        if (a1[8])
        {
          v13 = a1[9];
          if (v13)
          {
            v15 = *(_QWORD *)(v13 + 80);
            v14 = *(_QWORD *)(v13 + 88);
            if (v15 != v14)
            {
              v16 = v14 - v15 - 24;
              v17 = v15;
              if (v16 < 0x18)
                goto LABEL_31;
              v18 = v16 / 0x18 + 1;
              v17 = v15 + 24 * (v18 & 0x1FFFFFFFFFFFFFFELL);
              v19 = (_BYTE *)(v15 + 40);
              v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
              do
              {
                *(v19 - 24) = 1;
                *v19 = 1;
                v19 += 48;
                v20 -= 2;
              }
              while (v20);
              if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
              {
LABEL_31:
                do
                {
                  *(_BYTE *)(v17 + 16) = 1;
                  v17 += 24;
                }
                while (v17 != v14);
              }
            }
            while (sub_20F2F6D34((uint64_t)a1))
              ;
          }
        }
      }
    }
    sub_20F337D6C(a1[10]);
    v2 = a1[10];
  }
LABEL_22:
  sub_20F31E364(v2);
  sub_20F300600((uint64_t)a1, (uint64_t *)&__p);
  v21 = __p;
  if (__p)
  {
    v22 = (uint64_t)v25;
    v23 = __p;
    if (v25 != __p)
    {
      do
        v22 = sub_20F3122B4(v22 - 4472);
      while ((void *)v22 != v21);
      v23 = __p;
    }
    v25 = v21;
    operator delete(v23);
  }
}

void sub_20F2E60EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F300EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F2E6100(int8x8_t *a1, unsigned __int8 a2, char a3, double a4)
{
  int8x8_t v4;
  BOOL v5;
  int8x8_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  double v18;
  char *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  int8x8_t v25;
  int8x8_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  void *v48;
  _QWORD *v49;
  uint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char **v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  _BYTE *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unsigned int v81;
  char *v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  unsigned __int8 v90;
  char *v92;
  size_t v93;
  __darwin_time_t tv_sec;
  uint64_t v95;
  uint64_t i;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *k;
  uint64_t v109;
  unsigned __int8 v110;
  const char *v111;
  size_t v112;
  _BYTE *v113;
  unint64_t v114;
  const char *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  size_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v157;
  char *v159;
  char *v160;
  char v161;
  unint64_t *v162;
  unint64_t *v163;
  int8x8_t v164;
  unint64_t v165;
  uint8x8_t v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *j;
  unint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v183;
  uint64_t v184;
  size_t v185;
  const char *v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  size_t v191;
  const char *v192;
  unsigned __int8 v193;
  const char *v194;
  size_t v195;
  _BYTE *v196;
  unint64_t v197;
  const char *v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  NSObject *v207;
  size_t v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unsigned __int8 v243;
  const char *v244;
  size_t v245;
  _BYTE *v246;
  unint64_t v247;
  const char *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  NSObject *v256;
  size_t v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  void *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  char *v292;
  char *m;
  void *v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  const char *v299;
  size_t v300;
  unsigned __int8 v301;
  const char *v302;
  size_t v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  NSObject *v310;
  size_t v311;
  std::__shared_weak_count_vtbl *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  void *v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void *v341[2];
  __int128 v342;
  void *v343;
  char *v344;
  char *v345;
  timespec v346;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v348;
  const char *v349;
  int v350;
  const char *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  char v357;
  char v358;
  unint64_t v359;
  uint64_t v360;
  _BYTE object[24];
  __int128 v362;
  void *v363;
  size_t v364;
  unint64_t v365;
  void *v366;
  char v367;
  char v368;
  void *v369;
  char v370;
  void *__p;
  char v372;
  uint64_t v373;

  v373 = *MEMORY[0x24BDAC8D0];
  v4 = a1[10];
  if (*(_BYTE *)(*(_QWORD *)&v4 + 2793))
    v5 = a3 == 0;
  else
    v5 = 1;
  if (v5 || a2 > 0x11u || ((1 << a2) & 0x2640C) == 0)
    return;
  v9 = a1 + 2;
  while (1)
  {
    v9 = (int8x8_t *)*v9;
    if (!v9)
      break;
    if (*(_QWORD *)&v9[7] != *(_QWORD *)&v9[8] || *(_QWORD *)&v9[10] != *(_QWORD *)&v9[11])
    {
      sub_20F2FC0E0(&v343);
      if (**((int **)v343 + 7) > 5)
        return;
      v10 = *((unsigned __int8 *)v343 + 72);
      v11 = sub_20E8C31DC((uint64_t)v343, "OSLogSurrogateAppender", 1, 0);
      v12 = v11;
      if (!v10 && v11 == 0)
        return;
      v346.tv_sec = (__darwin_time_t)&v343;
      v346.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v348 = 5;
      v349 = "unknown file";
      v350 = 3312;
      v352 = 0;
      v353 = 0;
      v351 = "unknown function";
      v14 = *(_QWORD *)v346.tv_sec;
      v15 = *(_QWORD *)v346.tv_sec + 16;
      if (*(char *)(*(_QWORD *)v346.tv_sec + 39) < 0)
      {
        v17 = *(const char **)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
      }
      else
      {
        v16 = *(unsigned __int8 *)(*(_QWORD *)v346.tv_sec + 39);
        v17 = (const char *)(*(_QWORD *)v346.tv_sec + 16);
      }
      v110 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v362 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v111 = byte_254A4A4F8;
      else
        v111 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v112 = byte_254A4A4F8[23];
      else
        v112 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v111, v17);
      v113 = &object[8];
      if (v112 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v112 >= 0x17)
      {
        v114 = v12;
        v115 = v17;
        v116 = v14;
        v117 = v10;
        v118 = v15;
        v119 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v112 | 7) != 0x17)
          v119 = v112 | 7;
        v120 = v119 + 1;
        v113 = operator new(v119 + 1);
        *(_QWORD *)&object[16] = v112;
        *(_QWORD *)&v362 = v120 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v113;
        v15 = v118;
        v10 = v117;
        v14 = v116;
        v17 = v115;
        v12 = v114;
      }
      else
      {
        BYTE7(v362) = v112;
        if (!v112)
        {
LABEL_197:
          v113[v112] = 0;
          BYTE8(v362) = 1;
          v121 = &v363;
          if (v16 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v16 >= 0x17)
          {
            v122 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17)
              v122 = v16 | 7;
            v123 = v122 + 1;
            v121 = operator new(v122 + 1);
            v364 = v16;
            v365 = v123 | 0x8000000000000000;
            v363 = v121;
          }
          else
          {
            HIBYTE(v365) = v16;
            if (!v16)
              goto LABEL_205;
          }
          memmove(v121, v17, v16);
LABEL_205:
          *((_BYTE *)v121 + v16) = 0;
          LOBYTE(v366) = 1;
          v124 = *(NSObject **)object;
          if (SHIBYTE(v365) < 0)
            operator delete(v363);
          if (BYTE8(v362) && SBYTE7(v362) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v12 && *(_QWORD *)(v12 + 24))
          {
            v125 = _os_log_pack_size();
            v126 = (std::__shared_weak_count_vtbl *)operator new(v125, (std::align_val_t)8uLL);
            v127 = (std::__shared_weak_count *)operator new();
            v128 = v127;
            v127->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v127->__shared_owners_;
            v127->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v127->__shared_weak_owners_ = 0;
            v127[1].__vftable = v126;
            *(_QWORD *)object = v126;
            *(_QWORD *)&object[8] = v126;
            *(_QWORD *)&object[16] = v127;
            do
              v130 = __ldxr(p_shared_owners);
            while (__stxr(v130 + 1, p_shared_owners));
            v362 = 0uLL;
            v363 = 0;
            do
              v131 = __ldaxr(p_shared_owners);
            while (__stlxr(v131 - 1, p_shared_owners));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v128);
            }
            v132 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v133 = operator new();
            v134 = *(unsigned __int8 *)(v14 + 39);
            if ((v134 & 0x80u) == 0)
              v135 = v15;
            else
              v135 = *(_QWORD *)(v14 + 16);
            if ((v134 & 0x80u) != 0)
              v134 = *(_QWORD *)(v14 + 24);
            *(_QWORD *)v133 = v132;
            *(_OWORD *)(v133 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v133 + 24) = v362;
            v362 = 0uLL;
            *(_QWORD *)(v133 + 40) = v135;
            *(_QWORD *)(v133 + 48) = v134;
            *(_BYTE *)(v133 + 56) = 16;
            v341[0] = 0;
            v355 = v133;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v355);
            v136 = v355;
            v355 = 0;
            if (v136)
            {
              v137 = *(std::__shared_weak_count **)(v136 + 32);
              if (v137)
              {
                v138 = (unint64_t *)&v137->__shared_owners_;
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              v140 = *(std::__shared_weak_count **)(v136 + 16);
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              MEMORY[0x212BC6398](v136, 0x10F0C40B62ED6C6);
              v341[0] = 0;
            }
            v143 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
            if (*((_QWORD *)&v362 + 1))
            {
              v144 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            v146 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v147 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
          }
          else
          {
            os_log_type_enabled(v124, OS_LOG_TYPE_ERROR);
            *(_WORD *)object = 0;
            v149 = (void *)_os_log_send_and_compose_impl();
            if (v149)
              free(v149);
          }
          if (v10)
          {
            sub_20E8C003C((uint64_t)&v346, "Still exists weak/sliding states before corrupted map removal.");
            sub_20E863570((uint64_t)&v346);
          }
          sub_20E863570((uint64_t)&v346);
          v150 = v353;
          if (v353)
          {
            v151 = (unint64_t *)&v353->__shared_owners_;
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          return;
        }
      }
      memmove(v113, v111, v112);
      goto LABEL_197;
    }
  }
  v18 = *(double *)(*(_QWORD *)&v4 + 2800);
  v343 = 0;
  v344 = 0;
  v345 = 0;
  if (!*(_QWORD *)&a1[167] || !*(_QWORD *)&a1[1])
  {
    *(_OWORD *)v341 = 0u;
    v342 = 0u;
    goto LABEL_162;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = a4 - v18;
  v24 = 1.79769313e308;
  do
  {
    while (1)
    {
      v25 = a1[1];
      if (v25)
      {
        v26 = a1[162];
        v27 = (*(_QWORD *)&a1[165] + v22) % (unint64_t)((uint64_t)(*(_QWORD *)&a1[163] - *(_QWORD *)&v26) >> 4);
        v28 = *(_QWORD *)(*(_QWORD *)&v26 + 16 * v27);
        v29 = (uint8x8_t)vcnt_s8(v25);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          v30 = *(_QWORD *)(*(_QWORD *)&v26 + 16 * v27);
          if (v28 >= *(_QWORD *)&v25)
            v30 = v28 % *(_QWORD *)&v25;
        }
        else
        {
          v30 = (*(_QWORD *)&v25 - 1) & v28;
        }
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
        if (v31)
        {
          v32 = (_QWORD *)*v31;
          if (*v31)
            break;
        }
      }
LABEL_93:
      if (++v22 == *(_QWORD *)&a1[167])
        goto LABEL_111;
    }
    if (v29.u32[0] < 2uLL)
    {
      v33 = *(_QWORD *)&v25 - 1;
      while (1)
      {
        v34 = v32[1];
        if (v34 == v28)
        {
          if (v32[2] == v28)
            goto LABEL_47;
        }
        else if ((v34 & v33) != v30)
        {
          goto LABEL_93;
        }
        v32 = (_QWORD *)*v32;
        if (!v32)
          goto LABEL_93;
      }
    }
    while (1)
    {
      v35 = v32[1];
      if (v35 == v28)
        break;
      if (v35 >= *(_QWORD *)&v25)
        v35 %= *(_QWORD *)&v25;
      if (v35 != v30)
        goto LABEL_93;
LABEL_41:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_93;
    }
    if (v32[2] != v28)
      goto LABEL_41;
LABEL_47:
    if (!v20 || v21 != v28)
    {
      v36 = v344;
      if (v344 >= v345)
      {
        v37 = (char *)v343;
        v38 = (v344 - (_BYTE *)v343) >> 5;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 59)
          sub_20E867F44();
        v40 = v345 - (_BYTE *)v343;
        if ((v345 - (_BYTE *)v343) >> 4 > v39)
          v39 = v40 >> 4;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
          v41 = 0x7FFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 59)
            sub_20E877A38();
          v42 = (char *)operator new(32 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[32 * v38];
        *(_OWORD *)v43 = 0u;
        *((_OWORD *)v43 + 1) = 0u;
        if (v36 == v37)
        {
          v343 = v43;
          v345 = &v42[32 * v41];
        }
        else
        {
          v44 = 0;
          do
          {
            v45 = &v43[v44];
            v46 = &v36[v44];
            *((_QWORD *)v45 - 4) = *(_QWORD *)&v36[v44 - 32];
            *((_QWORD *)v45 - 2) = 0;
            *((_QWORD *)v45 - 1) = 0;
            *(_OWORD *)(v45 - 24) = *(_OWORD *)&v36[v44 - 24];
            *((_QWORD *)v45 - 1) = *(_QWORD *)&v36[v44 - 8];
            *((_QWORD *)v46 - 3) = 0;
            *((_QWORD *)v46 - 2) = 0;
            *((_QWORD *)v46 - 1) = 0;
            v44 -= 32;
          }
          while (&v36[v44] != v37);
          v36 = (char *)v343;
          v47 = v344;
          v343 = &v43[v44];
          v345 = &v42[32 * v41];
          while (v47 != v36)
          {
            v48 = (void *)*((_QWORD *)v47 - 3);
            if (v48)
            {
              *((_QWORD *)v47 - 2) = v48;
              operator delete(v48);
            }
            v47 -= 32;
          }
        }
        v19 = v43 + 32;
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_OWORD *)v344 = 0u;
        *((_OWORD *)v36 + 1) = 0u;
        v19 = v36 + 32;
      }
      v344 = v19;
      *((_QWORD *)v19 - 4) = v32 + 3;
      v26 = a1[162];
      v27 = (*(_QWORD *)&a1[165] + v22) % (unint64_t)((uint64_t)(*(_QWORD *)&a1[163] - *(_QWORD *)&v26) >> 4);
      v21 = *(_QWORD *)(*(_QWORD *)&v26 + 16 * v27);
    }
    v49 = (_QWORD *)(**(_QWORD **)(v32[5] + 424) + 56);
    v50 = (uint64_t *)*v49;
    if (!*v49)
      goto LABEL_92;
    v51 = *(_QWORD *)&v26 + 16 * v27;
    v52 = *(_DWORD *)(v51 + 8);
    v53 = v49;
    do
    {
      v54 = v50[4];
      if (v54 < v21)
      {
        ++v50;
      }
      else if (v54 == v21)
      {
        if (*((_DWORD *)v50 + 10) < v52)
          ++v50;
        else
          v53 = v50;
      }
      else
      {
        v53 = v50;
      }
      v50 = (uint64_t *)*v50;
    }
    while (v50);
    if (v53 == v49 || (v55 = v53[4], v21 < v55) || v21 == v55 && *((_DWORD *)v53 + 10) > v52 || (v56 = v53[6]) == 0)
    {
LABEL_92:
      v20 = 1;
      goto LABEL_93;
    }
    v57 = *(double *)(v56 + 816);
    if (v24 < v57)
    {
      sub_20F2FC0E0(&v360);
      if (**(int **)(v360 + 56) > 5)
        goto LABEL_512;
      v295 = *(unsigned __int8 *)(v360 + 72);
      v296 = sub_20E8C31DC(v360, "OSLogSurrogateAppender", 1, 0);
      v297 = v296;
      if (!v295 && !v296)
        goto LABEL_512;
      v346.tv_sec = (__darwin_time_t)&v360;
      v346.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v348 = 5;
      v349 = "unknown file";
      v350 = 3350;
      v352 = 0;
      v353 = 0;
      v351 = "unknown function";
      v298 = v360;
      v299 = (const char *)(v360 + 16);
      v340 = v360 + 16;
      if (*(char *)(v360 + 39) < 0)
      {
        v299 = *(const char **)(v360 + 16);
        v300 = *(_QWORD *)(v360 + 24);
      }
      else
      {
        v300 = *(unsigned __int8 *)(v360 + 39);
      }
      v301 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v301 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v362 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v302 = byte_254A4A4F8;
      else
        v302 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v303 = byte_254A4A4F8[23];
      else
        v303 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v302, v299);
      v304 = &object[8];
      if (v303 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v303 >= 0x17)
      {
        v305 = (v303 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v303 | 7) != 0x17)
          v305 = v303 | 7;
        v306 = v305 + 1;
        v304 = operator new(v305 + 1);
        *(_QWORD *)&object[16] = v303;
        *(_QWORD *)&v362 = v306 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v304;
      }
      else
      {
        BYTE7(v362) = v303;
        if (!v303)
        {
LABEL_540:
          v304[v303] = 0;
          BYTE8(v362) = 1;
          v307 = &v363;
          if (v300 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v300 >= 0x17)
          {
            v308 = (v300 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v300 | 7) != 0x17)
              v308 = v300 | 7;
            v309 = v308 + 1;
            v307 = operator new(v308 + 1);
            v364 = v300;
            v365 = v309 | 0x8000000000000000;
            v363 = v307;
          }
          else
          {
            HIBYTE(v365) = v300;
            if (!v300)
              goto LABEL_548;
          }
          memmove(v307, v299, v300);
LABEL_548:
          *((_BYTE *)v307 + v300) = 0;
          LOBYTE(v366) = 1;
          v310 = *(NSObject **)object;
          if (SHIBYTE(v365) < 0)
            operator delete(v363);
          if (BYTE8(v362) && SBYTE7(v362) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v297 && *(_QWORD *)(v297 + 24))
          {
            v311 = _os_log_pack_size();
            v312 = (std::__shared_weak_count_vtbl *)operator new(v311, (std::align_val_t)8uLL);
            v313 = (std::__shared_weak_count *)operator new();
            v314 = v313;
            v313->__shared_owners_ = 0;
            v315 = (unint64_t *)&v313->__shared_owners_;
            v313->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v313->__shared_weak_owners_ = 0;
            v313[1].__vftable = v312;
            *(_QWORD *)object = v312;
            *(_QWORD *)&object[8] = v312;
            *(_QWORD *)&object[16] = v313;
            do
              v316 = __ldxr(v315);
            while (__stxr(v316 + 1, v315));
            v362 = 0uLL;
            v363 = 0;
            do
              v317 = __ldaxr(v315);
            while (__stlxr(v317 - 1, v315));
            if (!v317)
            {
              ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
              std::__shared_weak_count::__release_weak(v314);
            }
            v318 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v319 = operator new();
            v320 = *(unsigned __int8 *)(v298 + 39);
            v321 = v340;
            if ((v320 & 0x80u) != 0)
            {
              v321 = *(_QWORD *)(v298 + 16);
              v320 = *(_QWORD *)(v298 + 24);
            }
            *(_QWORD *)v319 = v318;
            *(_OWORD *)(v319 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v319 + 24) = v362;
            v362 = 0uLL;
            *(_QWORD *)(v319 + 40) = v321;
            *(_QWORD *)(v319 + 48) = v320;
            *(_BYTE *)(v319 + 56) = 16;
            v341[0] = 0;
            v355 = v319;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v297 + 24) + 40))(*(_QWORD *)(v297 + 24), &v355);
            v322 = v355;
            v355 = 0;
            if (v322)
            {
              v323 = *(std::__shared_weak_count **)(v322 + 32);
              if (v323)
              {
                v324 = (unint64_t *)&v323->__shared_owners_;
                do
                  v325 = __ldaxr(v324);
                while (__stlxr(v325 - 1, v324));
                if (!v325)
                {
                  ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                  std::__shared_weak_count::__release_weak(v323);
                }
              }
              v326 = *(std::__shared_weak_count **)(v322 + 16);
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldaxr(v327);
                while (__stlxr(v328 - 1, v327));
                if (!v328)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
              MEMORY[0x212BC6398](v322, 0x10F0C40B62ED6C6);
              v341[0] = 0;
            }
            v329 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
            if (*((_QWORD *)&v362 + 1))
            {
              v330 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
              do
                v331 = __ldaxr(v330);
              while (__stlxr(v331 - 1, v330));
              if (!v331)
              {
                ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                std::__shared_weak_count::__release_weak(v329);
              }
            }
            v332 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v333 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v334 = __ldaxr(v333);
              while (__stlxr(v334 - 1, v333));
              if (!v334)
              {
                ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                std::__shared_weak_count::__release_weak(v332);
              }
            }
          }
          else
          {
            os_log_type_enabled(v310, OS_LOG_TYPE_ERROR);
            *(_WORD *)object = 0;
            v335 = (void *)_os_log_send_and_compose_impl();
            if (v335)
              free(v335);
          }
          if (v295)
          {
            sub_20E8C003C((uint64_t)&v346, "Input states are not properly sorted from latest to oldest. DeleteCorruptedExternalMapStates() aborted.");
            sub_20E863570((uint64_t)&v346);
          }
          sub_20E863570((uint64_t)&v346);
          v336 = v353;
          if (v353)
          {
            v337 = (unint64_t *)&v353->__shared_owners_;
            do
              v338 = __ldaxr(v337);
            while (__stlxr(v338 - 1, v337));
            if (!v338)
            {
              ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
              std::__shared_weak_count::__release_weak(v336);
            }
          }
          goto LABEL_512;
        }
      }
      memmove(v304, v302, v303);
      goto LABEL_540;
    }
    if (v57 < v23)
      break;
    v19 = v344;
    v59 = (char *)*((_QWORD *)v344 - 2);
    v58 = *((_QWORD *)v344 - 1);
    if ((unint64_t)v59 >= v58)
    {
      v61 = (char **)(v344 - 24);
      v62 = (char *)*((_QWORD *)v344 - 3);
      v63 = (v59 - v62) >> 4;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 60)
        sub_20E867F44();
      v65 = v58 - (_QWORD)v62;
      if (v65 >> 3 > v64)
        v64 = v65 >> 3;
      v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v64;
      if (v66)
      {
        if (v66 >> 60)
          sub_20E877A38();
        v67 = (char *)operator new(16 * v66);
      }
      else
      {
        v67 = 0;
      }
      v68 = &v67[16 * v63];
      *(_OWORD *)v68 = *(_OWORD *)v51;
      v69 = v68;
      if (v59 != v62)
      {
        do
        {
          v70 = *((_QWORD *)v59 - 2);
          v59 -= 16;
          v71 = *((_DWORD *)v59 + 2);
          *((_QWORD *)v69 - 2) = v70;
          v69 -= 16;
          *((_DWORD *)v69 + 2) = v71;
        }
        while (v59 != v62);
        v59 = *v61;
      }
      v60 = v68 + 16;
      *((_QWORD *)v19 - 3) = v69;
      *((_QWORD *)v19 - 2) = v68 + 16;
      *((_QWORD *)v19 - 1) = &v67[16 * v66];
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(_OWORD *)v59 = *(_OWORD *)v51;
      v60 = v59 + 16;
    }
    *((_QWORD *)v19 - 2) = v60;
    v20 = 1;
    ++v22;
    v24 = v57;
  }
  while (v22 != *(_QWORD *)&a1[167]);
LABEL_111:
  v72 = v343;
  *(_OWORD *)v341 = 0u;
  v342 = 0u;
  if (v19 == v343)
    goto LABEL_162;
  v73 = 0;
  while (2)
  {
    v74 = &v72[32 * v73];
    v75 = (_QWORD *)*v74;
    v76 = *(_QWORD *)(*v74 + 16);
    v77 = *(_QWORD *)(v76 + 160);
    v359 = v77;
    v78 = **(_QWORD **)(v76 + 424);
    v79 = (char *)v74[1];
    v80 = (char *)v74[2];
    if (v79 == v80 || !*(_QWORD *)(v78 + 56))
    {
      v81 = 0;
    }
    else
    {
      v81 = 0;
      v82 = v79;
      do
      {
        while (1)
        {
          v83 = *(_QWORD *)v82;
          v84 = *((_DWORD *)v82 + 2);
          v85 = (uint64_t *)(v78 + 56);
          v86 = *(uint64_t **)(v78 + 56);
          do
          {
            v87 = v86[4];
            if (v87 < v83)
            {
              ++v86;
            }
            else if (v87 == v83)
            {
              if (*((_DWORD *)v86 + 10) < v84)
                ++v86;
              else
                v85 = v86;
            }
            else
            {
              v85 = v86;
            }
            v86 = (uint64_t *)*v86;
          }
          while (v86);
          if (v85 != (uint64_t *)(v78 + 56))
          {
            v88 = v85[4];
            if (v83 >= v88 && (v83 != v88 || *((_DWORD *)v85 + 10) <= v84))
              break;
          }
          v82 += 16;
          if (v82 == v80)
            goto LABEL_136;
        }
        if (v85[6])
          ++v81;
        v82 += 16;
      }
      while (v82 != v80);
    }
LABEL_136:
    if ((double)v81 >= (double)(unint64_t)(*(_QWORD *)(v78 + 64) - ((uint64_t)(v75[5] - v75[4]) >> 4)))
    {
      sub_20F30EFF4(a1, &v359);
      v89 = sub_210219C18();
      v90 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (atomic_load(&qword_254A5A450))
      {
        *(_DWORD *)object = 134217984;
        *(_QWORD *)&object[4] = v77;
        v92 = (char *)_os_log_send_and_compose_impl();
        v93 = strlen(v92);
        v346.tv_sec = 0;
        pthread_threadid_np(0, (__uint64_t *)&v346);
        tv_sec = v346.tv_sec;
        timespec_get(&v346, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v89 + 1), (__int128 *)(v89 + 5), "TRACE:VDCES:ID: %llu", 0x14uLL, v92, v93, tv_sec, &v346);
        std::mutex::lock(&stru_254A5A410);
        v95 = qword_254A5A458;
        for (i = unk_254A5A460; v95 != i; v95 += 40)
        {
          v97 = *(_QWORD *)(v95 + 32);
          if (!v97)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v97 + 48))(v97, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v372 < 0)
        {
          operator delete(__p);
          if (v370 < 0)
            goto LABEL_147;
LABEL_144:
          if (v368)
          {
LABEL_148:
            if (v367 < 0)
              operator delete(v366);
          }
        }
        else
        {
          if ((v370 & 0x80000000) == 0)
            goto LABEL_144;
LABEL_147:
          operator delete(v369);
          if (v368)
            goto LABEL_148;
        }
        if ((_BYTE)v365 && SHIBYTE(v364) < 0)
          operator delete(*((void **)&v362 + 1));
        if (SBYTE7(v362) < 0)
          operator delete(*(void **)&object[8]);
        if (v92)
          free(v92);
      }
      if (os_signpost_enabled((os_log_t)*v89))
      {
        *(_DWORD *)object = 134217984;
        *(_QWORD *)&object[4] = v77;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      ++v73;
      v72 = v343;
      v19 = v344;
      if (v73 >= (v344 - (_BYTE *)v343) >> 5)
        goto LABEL_162;
      continue;
    }
    break;
  }
  if (v73 != ((v19 - v72) >> 5) - 1)
  {
    sub_20F2FC0E0(&v354);
    if (**(int **)(v354 + 56) > 5)
      goto LABEL_510;
    v187 = *(unsigned __int8 *)(v354 + 72);
    v188 = sub_20E8C31DC(v354, "OSLogSurrogateAppender", 1, 0);
    v189 = v188;
    if (!v187 && !v188)
      goto LABEL_510;
    v346.tv_sec = (__darwin_time_t)&v354;
    v346.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v348 = 5;
    v349 = "unknown file";
    v350 = 3163;
    v352 = 0;
    v353 = 0;
    v351 = "unknown function";
    v190 = *(_QWORD *)v346.tv_sec;
    if (*(char *)(*(_QWORD *)v346.tv_sec + 39) < 0)
    {
      v192 = *(const char **)(v190 + 16);
      v191 = *(_QWORD *)(v190 + 24);
    }
    else
    {
      v191 = *(unsigned __int8 *)(*(_QWORD *)v346.tv_sec + 39);
      v192 = (const char *)(*(_QWORD *)v346.tv_sec + 16);
    }
    v339 = *(_QWORD *)v346.tv_sec + 16;
    v243 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v243 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v362 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v244 = byte_254A4A4F8;
    else
      v244 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v245 = byte_254A4A4F8[23];
    else
      v245 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v244, v192);
    v246 = &object[8];
    if (v245 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v245 >= 0x17)
    {
      v247 = v189;
      v248 = v192;
      v249 = v190;
      v250 = v187;
      v251 = (v245 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v245 | 7) != 0x17)
        v251 = v245 | 7;
      v252 = v251 + 1;
      v246 = operator new(v251 + 1);
      *(_QWORD *)&object[16] = v245;
      *(_QWORD *)&v362 = v252 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v246;
      v187 = v250;
      v190 = v249;
      v192 = v248;
      v189 = v247;
    }
    else
    {
      BYTE7(v362) = v245;
      if (!v245)
      {
LABEL_443:
        v246[v245] = 0;
        BYTE8(v362) = 1;
        v253 = &v363;
        if (v191 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v191 >= 0x17)
        {
          v254 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v191 | 7) != 0x17)
            v254 = v191 | 7;
          v255 = v254 + 1;
          v253 = operator new(v254 + 1);
          v364 = v191;
          v365 = v255 | 0x8000000000000000;
          v363 = v253;
        }
        else
        {
          HIBYTE(v365) = v191;
          if (!v191)
            goto LABEL_451;
        }
        memmove(v253, v192, v191);
LABEL_451:
        *((_BYTE *)v253 + v191) = 0;
        LOBYTE(v366) = 1;
        v256 = *(NSObject **)object;
        if (SHIBYTE(v365) < 0)
          operator delete(v363);
        if (BYTE8(v362) && SBYTE7(v362) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v189 && *(_QWORD *)(v189 + 24))
        {
          v257 = _os_log_pack_size();
          v258 = (std::__shared_weak_count_vtbl *)operator new(v257, (std::align_val_t)8uLL);
          v259 = (std::__shared_weak_count *)operator new();
          v260 = v259;
          v259->__shared_owners_ = 0;
          v261 = (unint64_t *)&v259->__shared_owners_;
          v259->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v259->__shared_weak_owners_ = 0;
          v259[1].__vftable = v258;
          *(_QWORD *)object = v258;
          *(_QWORD *)&object[8] = v258;
          *(_QWORD *)&object[16] = v259;
          do
            v262 = __ldxr(v261);
          while (__stxr(v262 + 1, v261));
          v362 = 0uLL;
          v363 = 0;
          do
            v263 = __ldaxr(v261);
          while (__stlxr(v263 - 1, v261));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v260);
          }
          v264 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v265 = operator new();
          v266 = *(unsigned __int8 *)(v190 + 39);
          v267 = v339;
          if ((v266 & 0x80u) != 0)
          {
            v267 = *(_QWORD *)(v190 + 16);
            v266 = *(_QWORD *)(v190 + 24);
          }
          *(_QWORD *)v265 = v264;
          *(_OWORD *)(v265 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v265 + 24) = v362;
          v362 = 0uLL;
          *(_QWORD *)(v265 + 40) = v267;
          *(_QWORD *)(v265 + 48) = v266;
          *(_BYTE *)(v265 + 56) = 16;
          v360 = 0;
          v355 = v265;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v189 + 24) + 40))(*(_QWORD *)(v189 + 24), &v355);
          v268 = v355;
          v355 = 0;
          if (v268)
          {
            v269 = *(std::__shared_weak_count **)(v268 + 32);
            if (v269)
            {
              v270 = (unint64_t *)&v269->__shared_owners_;
              do
                v271 = __ldaxr(v270);
              while (__stlxr(v271 - 1, v270));
              if (!v271)
              {
                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                std::__shared_weak_count::__release_weak(v269);
              }
            }
            v272 = *(std::__shared_weak_count **)(v268 + 16);
            if (v272)
            {
              v273 = (unint64_t *)&v272->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                std::__shared_weak_count::__release_weak(v272);
              }
            }
            MEMORY[0x212BC6398](v268, 0x10F0C40B62ED6C6);
            v275 = v360;
            v360 = 0;
            if (v275)
            {
              v276 = *(std::__shared_weak_count **)(v275 + 32);
              if (v276)
              {
                v277 = (unint64_t *)&v276->__shared_owners_;
                do
                  v278 = __ldaxr(v277);
                while (__stlxr(v278 - 1, v277));
                if (!v278)
                {
                  ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                  std::__shared_weak_count::__release_weak(v276);
                }
              }
              v279 = *(std::__shared_weak_count **)(v275 + 16);
              if (v279)
              {
                v280 = (unint64_t *)&v279->__shared_owners_;
                do
                  v281 = __ldaxr(v280);
                while (__stlxr(v281 - 1, v280));
                if (!v281)
                {
                  ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                  std::__shared_weak_count::__release_weak(v279);
                }
              }
              MEMORY[0x212BC6398](v275, 0x10F0C40B62ED6C6);
            }
          }
          v282 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
          if (*((_QWORD *)&v362 + 1))
          {
            v283 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
            do
              v284 = __ldaxr(v283);
            while (__stlxr(v284 - 1, v283));
            if (!v284)
            {
              ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
              std::__shared_weak_count::__release_weak(v282);
            }
          }
          v285 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v286 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v287 = __ldaxr(v286);
            while (__stlxr(v287 - 1, v286));
            if (!v287)
            {
              ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
              std::__shared_weak_count::__release_weak(v285);
            }
          }
        }
        else
        {
          os_log_type_enabled(v256, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v288 = (void *)_os_log_send_and_compose_impl();
          if (v288)
            free(v288);
        }
        if (v187)
        {
          sub_20E8C003C((uint64_t)&v346, "Information missing from the input states. VerifyAndDeleteCorruptedExternalSubmaps() aborted.");
          sub_20E863570((uint64_t)&v346);
        }
        sub_20E863570((uint64_t)&v346);
        v289 = v353;
        if (v353)
        {
          v290 = (unint64_t *)&v353->__shared_owners_;
          do
            v291 = __ldaxr(v290);
          while (__stlxr(v291 - 1, v290));
          if (!v291)
          {
            ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
            std::__shared_weak_count::__release_weak(v289);
          }
        }
        goto LABEL_510;
      }
    }
    memmove(v246, v244, v245);
    goto LABEL_443;
  }
  v341[0] = v75;
  if (&v72[32 * v73] != (_BYTE *)v341)
    sub_20F04DCF4(&v341[1], v79, v80, (v80 - v79) >> 4);
LABEL_162:
  v98 = v341[0];
  if (v341[0])
  {
    v99 = v341[1];
    if (v341[1] != (void *)v342)
    {
      v100 = *((_QWORD *)v341[0] + 2);
      v101 = *(_QWORD *)(v100 + 176);
      if (v101)
      {
        v102 = v101 - 1;
        v103 = *(_QWORD *)(v100 + 168);
        if ((v101 & (v101 - 1)) != 0)
        {
          v104 = 0;
          do
          {
            v174 = *((unsigned int *)v99 + 2);
            v175 = v174;
            if (v101 <= v174)
              v175 = v174 % v101;
            j = *(uint64_t **)(v103 + 8 * v175);
            if (j)
            {
              for (j = (uint64_t *)*j; j; j = (uint64_t *)*j)
              {
                v178 = j[1];
                if (v178 == v174)
                {
                  if (j[2] == *v99 && *((_DWORD *)j + 6) == (_DWORD)v174)
                    break;
                }
                else
                {
                  if (v178 >= v101)
                    v178 %= v101;
                  if (v178 != v175)
                  {
                    j = 0;
                    break;
                  }
                }
              }
            }
            if (j)
              ++v104;
            v99 += 2;
          }
          while (v99 != (_QWORD *)v342);
        }
        else
        {
          v104 = 0;
          v105 = v101 + 0xFFFFFFFF;
          do
          {
            v106 = *((unsigned int *)v99 + 2);
            k = *(uint64_t **)(v103 + 8 * (v105 & v106));
            if (k)
            {
              for (k = (uint64_t *)*k; k; k = (uint64_t *)*k)
              {
                v109 = k[1];
                if (v109 == v106)
                {
                  if (k[2] == *v99 && *((_DWORD *)k + 6) == (_DWORD)v106)
                    break;
                }
                else if ((v109 & v102) != (v105 & v106))
                {
                  k = 0;
                  break;
                }
              }
            }
            if (k)
              ++v104;
            v99 += 2;
          }
          while (v99 != (_QWORD *)v342);
        }
      }
      else
      {
        v104 = 0;
      }
      if (*(_QWORD *)(**(_QWORD **)(v100 + 424) + 64)
         - ((uint64_t)(*((_QWORD *)v341[0] + 5) - *((_QWORD *)v341[0] + 4)) >> 4) <= (unint64_t)v104)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3193, (uint64_t)"num_states_to_remove < submap.NumberOfRegularStates()", 53, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v100 = v98[2];
      }
      LOBYTE(v355) = 0;
      v356 = 0;
      v357 = 0;
      v358 = 0;
      v154 = *(_QWORD *)(v100 + 208);
      v153 = *(_QWORD *)(v100 + 216);
      if (v154 != v153)
      {
        v155 = 0;
        do
        {
          if (*(_DWORD *)(v154 + 464) == 2 && v155 <= 1)
          {
            v157 = &v355 + 2 * v155;
            *v157 = *(_QWORD *)(v154 + 24);
            *((_BYTE *)v157 + 8) = 1;
            ++v155;
          }
          v154 += 472;
        }
        while (v154 != v153);
        if (v356 && v358 != 0)
        {
          sub_20F2FC0E0(&v354);
          if (**(int **)(v354 + 56) > 5)
            goto LABEL_510;
          v179 = *(unsigned __int8 *)(v354 + 72);
          v180 = sub_20E8C31DC(v354, "OSLogSurrogateAppender", 1, 0);
          v181 = v180;
          if (!v179 && v180 == 0)
            goto LABEL_510;
          v346.tv_sec = (__darwin_time_t)&v354;
          v346.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v348 = 5;
          v349 = "unknown file";
          v350 = 3199;
          v352 = 0;
          v353 = 0;
          v351 = "unknown function";
          v183 = *(_QWORD *)v346.tv_sec;
          v184 = *(_QWORD *)v346.tv_sec + 16;
          if (*(char *)(*(_QWORD *)v346.tv_sec + 39) < 0)
          {
            v186 = *(const char **)(v183 + 16);
            v185 = *(_QWORD *)(v183 + 24);
          }
          else
          {
            v185 = *(unsigned __int8 *)(*(_QWORD *)v346.tv_sec + 39);
            v186 = (const char *)(*(_QWORD *)v346.tv_sec + 16);
          }
          v193 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v193 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if ((_BYTE)v362 && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v194 = byte_254A4A4F8;
          else
            v194 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v195 = byte_254A4A4F8[23];
          else
            v195 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v194, v186);
          v196 = &object[8];
          if (v195 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v195 >= 0x17)
          {
            v197 = v181;
            v198 = v186;
            v199 = v183;
            v200 = v179;
            v201 = v184;
            v202 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v195 | 7) != 0x17)
              v202 = v195 | 7;
            v203 = v202 + 1;
            v196 = operator new(v202 + 1);
            *(_QWORD *)&object[16] = v195;
            *(_QWORD *)&v362 = v203 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v196;
            v184 = v201;
            v179 = v200;
            v183 = v199;
            v186 = v198;
            v181 = v197;
          }
          else
          {
            BYTE7(v362) = v195;
            if (!v195)
            {
LABEL_357:
              v196[v195] = 0;
              BYTE8(v362) = 1;
              v204 = &v363;
              if (v185 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v185 >= 0x17)
              {
                v205 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v185 | 7) != 0x17)
                  v205 = v185 | 7;
                v206 = v205 + 1;
                v204 = operator new(v205 + 1);
                v364 = v185;
                v365 = v206 | 0x8000000000000000;
                v363 = v204;
              }
              else
              {
                HIBYTE(v365) = v185;
                if (!v185)
                {
LABEL_365:
                  *((_BYTE *)v204 + v185) = 0;
                  LOBYTE(v366) = 1;
                  v207 = *(NSObject **)object;
                  if (SHIBYTE(v365) < 0)
                    operator delete(v363);
                  if (BYTE8(v362) && SBYTE7(v362) < 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (v181 && *(_QWORD *)(v181 + 24))
                  {
                    v208 = _os_log_pack_size();
                    v209 = (std::__shared_weak_count_vtbl *)operator new(v208, (std::align_val_t)8uLL);
                    v210 = (std::__shared_weak_count *)operator new();
                    v211 = v210;
                    v210->__shared_owners_ = 0;
                    v212 = (unint64_t *)&v210->__shared_owners_;
                    v210->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v210->__shared_weak_owners_ = 0;
                    v210[1].__vftable = v209;
                    *(_QWORD *)object = v209;
                    *(_QWORD *)&object[8] = v209;
                    *(_QWORD *)&object[16] = v210;
                    do
                      v213 = __ldxr(v212);
                    while (__stxr(v213 + 1, v212));
                    v362 = 0uLL;
                    v363 = 0;
                    do
                      v214 = __ldaxr(v212);
                    while (__stlxr(v214 - 1, v212));
                    if (!v214)
                    {
                      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                      std::__shared_weak_count::__release_weak(v211);
                    }
                    v215 = *(_QWORD *)object;
                    *(_WORD *)_os_log_pack_fill() = 0;
                    v216 = operator new();
                    v217 = *(unsigned __int8 *)(v183 + 39);
                    if ((v217 & 0x80u) == 0)
                      v218 = v184;
                    else
                      v218 = *(_QWORD *)(v183 + 16);
                    if ((v217 & 0x80u) != 0)
                      v217 = *(_QWORD *)(v183 + 24);
                    *(_QWORD *)v216 = v215;
                    *(_OWORD *)(v216 + 8) = *(_OWORD *)&object[8];
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v216 + 24) = v362;
                    v362 = 0uLL;
                    *(_QWORD *)(v216 + 40) = v218;
                    *(_QWORD *)(v216 + 48) = v217;
                    *(_BYTE *)(v216 + 56) = 16;
                    v359 = 0;
                    v360 = v216;
                    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v181 + 24) + 40))(*(_QWORD *)(v181 + 24), &v360);
                    v219 = v360;
                    v360 = 0;
                    if (v219)
                    {
                      v220 = *(std::__shared_weak_count **)(v219 + 32);
                      if (v220)
                      {
                        v221 = (unint64_t *)&v220->__shared_owners_;
                        do
                          v222 = __ldaxr(v221);
                        while (__stlxr(v222 - 1, v221));
                        if (!v222)
                        {
                          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                          std::__shared_weak_count::__release_weak(v220);
                        }
                      }
                      v223 = *(std::__shared_weak_count **)(v219 + 16);
                      if (v223)
                      {
                        v224 = (unint64_t *)&v223->__shared_owners_;
                        do
                          v225 = __ldaxr(v224);
                        while (__stlxr(v225 - 1, v224));
                        if (!v225)
                        {
                          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                          std::__shared_weak_count::__release_weak(v223);
                        }
                      }
                      MEMORY[0x212BC6398](v219, 0x10F0C40B62ED6C6);
                      v226 = v359;
                      v359 = 0;
                      if (v226)
                      {
                        v227 = *(std::__shared_weak_count **)(v226 + 32);
                        if (v227)
                        {
                          v228 = (unint64_t *)&v227->__shared_owners_;
                          do
                            v229 = __ldaxr(v228);
                          while (__stlxr(v229 - 1, v228));
                          if (!v229)
                          {
                            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                            std::__shared_weak_count::__release_weak(v227);
                          }
                        }
                        v230 = *(std::__shared_weak_count **)(v226 + 16);
                        if (v230)
                        {
                          v231 = (unint64_t *)&v230->__shared_owners_;
                          do
                            v232 = __ldaxr(v231);
                          while (__stlxr(v232 - 1, v231));
                          if (!v232)
                          {
                            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                            std::__shared_weak_count::__release_weak(v230);
                          }
                        }
                        MEMORY[0x212BC6398](v226, 0x10F0C40B62ED6C6);
                      }
                    }
                    v233 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
                    if (*((_QWORD *)&v362 + 1))
                    {
                      v234 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
                      do
                        v235 = __ldaxr(v234);
                      while (__stlxr(v235 - 1, v234));
                      if (!v235)
                      {
                        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                        std::__shared_weak_count::__release_weak(v233);
                      }
                    }
                    v236 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v237 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v238 = __ldaxr(v237);
                      while (__stlxr(v238 - 1, v237));
                      if (!v238)
                      {
                        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                        std::__shared_weak_count::__release_weak(v236);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v207, OS_LOG_TYPE_ERROR);
                    *(_WORD *)object = 0;
                    v239 = (void *)_os_log_send_and_compose_impl();
                    if (v239)
                      free(v239);
                  }
                  if (v179)
                  {
                    sub_20E8C003C((uint64_t)&v346, "Corrupted states should be in a tail submap. DeleteCorruptedStates() aborted.");
                    sub_20E863570((uint64_t)&v346);
                  }
                  sub_20E863570((uint64_t)&v346);
                  v240 = v353;
                  if (v353)
                  {
                    v241 = (unint64_t *)&v353->__shared_owners_;
                    do
                      v242 = __ldaxr(v241);
                    while (__stlxr(v242 - 1, v241));
                    if (!v242)
                    {
                      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                      std::__shared_weak_count::__release_weak(v240);
                    }
                  }
                  goto LABEL_510;
                }
              }
              memmove(v204, v186, v185);
              goto LABEL_365;
            }
          }
          memmove(v196, v194, v195);
          goto LABEL_357;
        }
      }
      v159 = (char *)v341[1];
      v160 = (char *)v342;
      if (v341[1] != (void *)v342)
      {
        do
        {
          sub_20F24E76C((uint64_t)v98, object);
          v162 = *(unint64_t **)object;
          v163 = *(unint64_t **)&object[8];
          if (*(_QWORD *)object != *(_QWORD *)&object[8])
          {
            v164 = a1[1];
            if (v164)
            {
LABEL_284:
              v165 = *v162;
              v166 = (uint8x8_t)vcnt_s8(v164);
              v166.i16[0] = vaddlv_u8(v166);
              if (v166.u32[0] > 1uLL)
              {
                v167 = *v162;
                if (v165 >= *(_QWORD *)&v164)
                  v167 = v165 % *(_QWORD *)&v164;
              }
              else
              {
                v167 = v165 & (*(_QWORD *)&v164 - 1);
              }
              v168 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v167);
              if (v168)
              {
                v169 = (_QWORD *)*v168;
                if (v169)
                {
                  if (v166.u32[0] < 2uLL)
                  {
                    v170 = *(_QWORD *)&v164 - 1;
                    while (1)
                    {
                      v172 = v169[1];
                      if (v172 == v165)
                      {
                        if (v169[2] == v165)
                          goto LABEL_304;
                      }
                      else if ((v172 & v170) != v167)
                      {
                        goto LABEL_305;
                      }
                      v169 = (_QWORD *)*v169;
                      if (!v169)
                        goto LABEL_305;
                    }
                  }
                  do
                  {
                    v171 = v169[1];
                    if (v171 == v165)
                    {
                      if (v169[2] == v165)
                      {
LABEL_304:
                        sub_20F261368(v169 + 3, (uint64_t)v159, 0);
                        break;
                      }
                    }
                    else
                    {
                      if (v171 >= *(_QWORD *)&v164)
                        v171 %= *(_QWORD *)&v164;
                      if (v171 != v167)
                        break;
                    }
                    v169 = (_QWORD *)*v169;
                  }
                  while (v169);
                }
              }
LABEL_305:
              while (++v162 != v163)
              {
                v164 = a1[1];
                if (v164)
                  goto LABEL_284;
              }
            }
          }
          v173 = sub_20F2601D4((uint64_t)v98, (uint64_t)v159);
          if (*(_QWORD *)object)
          {
            *(_QWORD *)&object[8] = *(_QWORD *)object;
            operator delete(*(void **)object);
          }
          v159 += 16;
          if (v159 == v160)
            v161 = 0;
          else
            v161 = v173;
        }
        while ((v161 & 1) != 0);
      }
    }
  }
LABEL_510:
  if (v341[1])
  {
    *(void **)&v342 = v341[1];
    operator delete(v341[1]);
  }
LABEL_512:
  v292 = (char *)v343;
  if (v343)
  {
    for (m = v344; m != v292; m -= 32)
    {
      v294 = (void *)*((_QWORD *)m - 3);
      if (v294)
      {
        *((_QWORD *)m - 2) = v294;
        operator delete(v294);
      }
    }
    operator delete(v292);
  }
}

void sub_20F2E87C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a23);
  sub_20EDC76A4(&a20);
  _Unwind_Resume(a1);
}

void sub_20F2E880C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,void *__p,void *a43,int a44,__int16 a45,char a46,char a47,char a48,int a49,__int16 a50,char a51,char a52)
{
  if (a48 && a47 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a23);
  if (a16)
    operator delete(a16);
  sub_20EDC76A4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2E8CA4(_QWORD *a1, _BYTE *a2)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v12 = 0u;
  v13 = 0u;
  v14 = 733223848;
  kdebug_trace();
  if (*a2)
    v4 = a2[1] == 0;
  else
    v4 = 0;
  v5 = v4;
  sub_20F2E8E34((uint64_t)a1, v5);
  sub_20F2E8FA8((uint64_t)a1);
  sub_20F2E9A98(a1);
  if (*(_BYTE *)(a1[10] + 2499))
  {
    v6 = a1[11];
    if (*(_BYTE *)(v6 + 32))
    {
      if (*(_DWORD *)(v6 + 36))
      {
        *(_BYTE *)(v6 + 32) = 0;
        sub_20F2CE4C4();
        v7 = *(_DWORD *)(v6 + 36);
        v8 = (_BYTE *)a1[10];
        if (v8[1000] && v7 == 1)
        {
          if (v8[2499] && v8[2640])
            sub_20F2F1704((uint64_t)a1);
          sub_20F2E5E94(a1);
        }
        else
        {
          v9 = a1[358];
          if (!v9)
            sub_20E86D37C();
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
          sub_20F2F19AC((uint64_t)a1, &v11, v7 == 1);
        }
      }
    }
  }
  return kdebug_trace();
}

void sub_20F2E8DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E8DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E8E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E8E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2E8E34(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  _BYTE v12[8];
  __int128 v13;
  char v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  __int128 v18;
  __int128 v19;
  int v20;

  v18 = 0u;
  v19 = 0u;
  v20 = 733223776;
  kdebug_trace();
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(v4 + 2816);
    if (*(_BYTE *)(v5 + 224))
    {
      v6 = (__int128 *)(v5 + 208);
      sub_20F32F7A0(v4, (__int128 *)(v5 + 208), (void **)&v15);
      v7 = v15;
      v8 = v16;
      if (v15 != v16)
      {
        do
        {
          v13 = *v6;
          v14 = 1;
          v9 = v7 + 1;
          sub_20F30418C((_QWORD *)a1, (uint64_t)&v13, v7, (uint64_t)(v7 + 1));
          v7 = v9 + 1;
        }
        while (v9 + 1 != v8);
        v7 = v15;
      }
      if (v7)
      {
        v16 = v7;
        operator delete(v7);
      }
    }
  }
  if (*(_BYTE *)(a1 + 1345))
  {
    v10 = *(unsigned __int8 *)(a1 + 1344);
    *(_WORD *)(a1 + 1344) = 256;
    if (v10)
    {
      LOBYTE(v15) = 0;
      v17 = 0;
      LOBYTE(v13) = 0;
      BYTE4(v13) = 0;
      v12[0] = 0;
      v12[4] = 0;
      sub_20F30418C((_QWORD *)a1, (uint64_t)&v15, (uint64_t *)&v13, (uint64_t)v12);
    }
  }
  return kdebug_trace();
}

void sub_20F2E8F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2E8F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  sub_20E8E69C4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2E8FA8(uint64_t a1)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  double v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *i;
  char *v14;
  void **v15;
  char *v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void **v29;
  char *v30;
  _QWORD *v31;
  unint64_t v32;
  std::chrono::system_clock::time_point v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  void *v37;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  int8x8_t v42;
  uint8x8_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  void **v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  unint64_t *v66;
  char *v67;
  int64_t v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  unint64_t *v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t *v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  unint64_t v98;
  __int128 v100;
  void *v101;
  void *v102;
  void *v103;
  char *v104;
  uint64_t v105;
  void *v106;
  char *v107;
  uint64_t v108;
  int v109[2];
  __int128 v110;
  void *__p[2];
  void *v112;
  char v113;
  _OWORD __src[24];
  __int128 v115;
  void *v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v10 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v10 + 2499))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      if (*(_QWORD *)(a1 + 56))
      {
        if (*(_QWORD *)(a1 + 64))
        {
          v11 = *(_QWORD *)(a1 + 72);
          if (v11)
          {
            v12 = *(uint64_t **)(v11 + 144);
            if (v12)
            {
              while (!*((_BYTE *)v12 + 28))
              {
                v12 = (uint64_t *)*v12;
                if (!v12)
                  goto LABEL_9;
              }
LABEL_10:
              if (!*(_BYTE *)(v10 + 2637))
                goto LABEL_52;
              goto LABEL_51;
            }
          }
        }
      }
    }
LABEL_9:
    if (*(_BYTE *)(v10 + 940))
      goto LABEL_10;
    if (!*(_BYTE *)(v10 + 2637) || *(_QWORD *)(a1 + 24) >= 2uLL)
    {
      for (i = *(unint64_t **)(a1 + 16); i; i = (unint64_t *)*i)
      {
        if ((i[41] & 0x20) != 0)
          sub_20F30EFF4((int8x8_t *)a1, i + 2);
      }
    }
    if (!*(_BYTE *)(a1 + 2264))
    {
      bzero((void *)(a1 + 1352), 0x390uLL);
      *(_BYTE *)(a1 + 2264) = 1;
    }
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    sub_20F31E6F4(*(_QWORD **)(a1 + 80), (uint64_t)&v103, (uint64_t)&v106, (uint64_t *)&v101);
    v110 = 0uLL;
    *(_QWORD *)v109 = 0;
    sub_20EE1D52C((uint64_t)v109, 0xAAAAAAAAAAAAAAABLL * ((v104 - (_BYTE *)v103) >> 4));
    v14 = v104;
    if (v103 != v104)
    {
      v15 = (void **)((char *)v103 + 24);
      do
      {
        v16 = (char *)(v15 - 3);
        v17 = *(_OWORD *)(v15 - 3);
        LOBYTE(__p[0]) = 0;
        v113 = 0;
        v18 = *((unsigned __int8 *)v15 + 16);
        if (*((_BYTE *)v15 + 16))
        {
          if (*((char *)v15 + 15) < 0)
          {
            v100 = v17;
            sub_20E860C04(__p, *(v15 - 1), (unint64_t)*v15);
            v17 = v100;
          }
          else
          {
            v19 = *(_OWORD *)(v15 - 1);
            v112 = v15[1];
            *(_OWORD *)__p = v19;
          }
          v113 = 1;
        }
        __src[2] = 0uLL;
        __src[4] = 0uLL;
        __src[6] = 0uLL;
        v20 = *(_QWORD *)(a1 + 2312);
        __src[0] = v17;
        __src[1] = 0x3FF0000000000000uLL;
        __src[3] = 0x3FF0000000000000uLL;
        __src[5] = 0x3FF0000000000000uLL;
        *(_QWORD *)&__src[7] = v20;
        DWORD2(__src[7]) = 0;
        LOBYTE(__src[8]) = 1;
        BYTE8(__src[8]) = 0;
        BYTE8(__src[23]) = 0;
        LOBYTE(v115) = 0;
        v117 = 0;
        if (v18)
        {
          if (SHIBYTE(v112) < 0)
          {
            sub_20E860C04(&v115, __p[0], (unint64_t)__p[1]);
            v117 = 1;
            if (v113 && SHIBYTE(v112) < 0)
              operator delete(__p[0]);
          }
          else
          {
            v115 = *(_OWORD *)__p;
            v116 = v112;
            v117 = 1;
          }
        }
        v21 = v110;
        if ((unint64_t)v110 >= *((_QWORD *)&v110 + 1))
        {
          v23 = sub_20EE1E1C8((char **)v109, (uint64_t)__src);
        }
        else
        {
          memcpy((void *)v110, __src, 0x179uLL);
          *(_BYTE *)(v21 + 384) = 0;
          *(_BYTE *)(v21 + 408) = 0;
          if (v117)
          {
            v22 = v115;
            *(_QWORD *)(v21 + 400) = v116;
            *(_OWORD *)(v21 + 384) = v22;
            v116 = 0;
            v115 = 0uLL;
            *(_BYTE *)(v21 + 408) = 1;
          }
          v23 = (char *)(v21 + 416);
        }
        *(_QWORD *)&v110 = v23;
        if (v117 && SHIBYTE(v116) < 0)
          operator delete((void *)v115);
        v15 += 6;
      }
      while (v16 + 48 != v14);
    }
    v24 = *(char **)v109;
    v25 = (char *)v110;
    sub_20EAAA1D0((_QWORD *)(a1 + 1552), *(_QWORD *)(a1 + 1560), *(char **)v109, (char *)v110, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v110 - *(_QWORD *)v109) >> 5));
    sub_20F300600(a1, (uint64_t *)&v101);
    sub_20EFA5354((unint64_t *)(a1 + 1672), *(void **)(a1 + 1680), (char *)v106, v107, (v107 - (_BYTE *)v106) >> 3);
    sub_20EFA5354((unint64_t *)(a1 + 2288), *(void **)(a1 + 2296), (char *)v106, v107, (v107 - (_BYTE *)v106) >> 3);
    if (v24)
    {
      while (v25 != v24)
      {
        if (*(v25 - 8) && *(v25 - 9) < 0)
          operator delete(*((void **)v25 - 4));
        v25 -= 416;
      }
      operator delete(v24);
      v26 = v101;
      if (v101)
      {
LABEL_44:
        v27 = (uint64_t)v102;
        v28 = v26;
        if (v102 != v26)
        {
          do
            v27 = sub_20F3122B4(v27 - 4472);
          while ((void *)v27 != v26);
          v28 = v101;
        }
        v102 = v26;
        operator delete(v28);
        v29 = (void **)v103;
        if (!v103)
        {
LABEL_48:
          v30 = (char *)v106;
          if (!v106)
            goto LABEL_50;
          goto LABEL_49;
        }
LABEL_100:
        v52 = (void **)v104;
        if (v104 == (char *)v29)
        {
          v104 = (char *)v29;
          operator delete(v29);
          v30 = (char *)v106;
          if (!v106)
            goto LABEL_50;
        }
        else
        {
          do
          {
            if (*((_BYTE *)v52 - 8) && *((char *)v52 - 9) < 0)
              operator delete(*(v52 - 4));
            v52 -= 6;
          }
          while (v52 != v29);
          v104 = (char *)v29;
          operator delete(v103);
          v30 = (char *)v106;
          if (!v106)
          {
LABEL_50:
            v10 = *(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(v10 + 2637))
              goto LABEL_52;
LABEL_51:
            if (*(_QWORD *)(a1 + 24) < 2uLL)
              goto LABEL_113;
LABEL_52:
            v31 = *(_QWORD **)(a1 + 16);
            if (v31)
            {
              v32 = 0;
              do
              {
                v32 += *(_QWORD *)(**(_QWORD **)(v31[5] + 424) + 64) - ((uint64_t)(v31[8] - v31[7]) >> 4);
                v31 = (_QWORD *)*v31;
              }
              while (v31);
              if (v32 < *(_QWORD *)(v10 + 64))
                goto LABEL_113;
            }
            else if (*(_QWORD *)(v10 + 64))
            {
              goto LABEL_113;
            }
            v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            v34 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 2712);
            LOBYTE(__p[0]) = 0;
            v35 = *(_QWORD **)(a1 + 16);
            if (v35)
            {
              v36 = 0;
              v37 = __p[0];
              v38 = v33.__d_.__rep_ / 1000000 - v34;
              v39 = 1;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v40 = (_QWORD *)v35[5];
                    v41 = v35[2];
                    v42 = (int8x8_t)v40[46];
                    if (!*(_QWORD *)&v42)
                      goto LABEL_85;
                    v43 = (uint8x8_t)vcnt_s8(v42);
                    v43.i16[0] = vaddlv_u8(v43);
                    if (v43.u32[0] > 1uLL)
                    {
                      v44 = v35[2];
                      if (v41 >= *(_QWORD *)&v42)
                        v44 = v41 % *(_QWORD *)&v42;
                    }
                    else
                    {
                      v44 = (*(_QWORD *)&v42 - 1) & v41;
                    }
                    v45 = *(_QWORD **)(v40[45] + 8 * v44);
                    if (v45)
                    {
                      v46 = (_QWORD *)*v45;
                      if (*v45)
                      {
                        if (v43.u32[0] < 2uLL)
                        {
                          v47 = *(_QWORD *)&v42 - 1;
                          while (1)
                          {
                            v49 = v46[1];
                            if (v41 == v49)
                            {
                              if (v46[2] == v41)
                                goto LABEL_86;
                            }
                            else if ((v49 & v47) != v44)
                            {
                              goto LABEL_85;
                            }
                            v46 = (_QWORD *)*v46;
                            if (!v46)
                              goto LABEL_86;
                          }
                        }
                        do
                        {
                          v48 = v46[1];
                          if (v41 == v48)
                          {
                            if (v46[2] == v41)
                              break;
                          }
                          else
                          {
                            if (v48 >= *(_QWORD *)&v42)
                              v48 %= *(_QWORD *)&v42;
                            if (v48 != v44)
                              goto LABEL_85;
                          }
                          v46 = (_QWORD *)*v46;
                        }
                        while (v46);
                      }
                    }
                    else
                    {
LABEL_85:
                      v46 = 0;
                    }
LABEL_86:
                    v50 = (unsigned __int8 *)v40[2];
                    if (!v50)
                      goto LABEL_110;
                    v51 = 0;
                    do
                    {
                      sub_210232668(v50 + 16, (uint64_t)__src);
                      v51 += LOBYTE(__src[1]);
                      v50 = *(unsigned __int8 **)v50;
                    }
                    while (v50);
                    if (!v51)
                    {
                      v41 = v35[2];
LABEL_110:
                      __p[0] = (void *)v41;
                      LOBYTE(__p[1]) = 1;
LABEL_111:
                      sub_20F30DBBC((int8x8_t *)a1, (unint64_t *)__p);
                      goto LABEL_112;
                    }
                    if (v46)
                      break;
                    v38 = 0;
                    v39 = 0;
                    v37 = (void *)v35[2];
                    v35 = (_QWORD *)*v35;
                    v36 = 1;
                    if (!v35)
                      goto LABEL_97;
                  }
                  if (v46[3] >= v38)
                    break;
                  v38 = v46[3];
                  v39 = 0;
                  v37 = (void *)v35[2];
                  v35 = (_QWORD *)*v35;
                  v36 = 1;
                  if (!v35)
                  {
LABEL_97:
                    LOBYTE(__p[1]) = 1;
                    __p[0] = v37;
                    goto LABEL_111;
                  }
                }
                v35 = (_QWORD *)*v35;
              }
              while (v35);
              LOBYTE(__p[1]) = v36;
              __p[0] = v37;
              if ((v39 & 1) == 0)
                goto LABEL_111;
            }
LABEL_112:
            v10 = *(_QWORD *)(a1 + 80);
LABEL_113:
            v53 = sub_20F31F4FC(v10, v2, v3, v4, v5, v6, v7, v8, v9);
            if (!v54)
              return kdebug_trace();
            v55 = v53;
            if (*(_BYTE *)(a1 + 2264))
            {
              v56 = *(unint64_t **)(a1 + 1680);
              v57 = *(_QWORD *)(a1 + 1688);
              if ((unint64_t)v56 < v57)
              {
                *v56 = v53;
                v58 = (uint64_t)(v56 + 1);
                goto LABEL_141;
              }
              v59 = *(unint64_t **)(a1 + 1672);
              v60 = (char *)v56 - (char *)v59;
              v61 = v56 - v59;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_166;
            }
            else
            {
              bzero((void *)(a1 + 1352), 0x390uLL);
              v59 = 0;
              v56 = 0;
              v57 = 0;
              *(_BYTE *)(a1 + 2264) = 1;
              v60 = 0;
              v61 = 0;
              v62 = 1;
            }
            v63 = v57 - (_QWORD)v59;
            if (v63 >> 2 > v62)
              v62 = v63 >> 2;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              if (v64 >> 61)
                goto LABEL_167;
              v65 = operator new(8 * v64);
              v66 = (unint64_t *)&v65[8 * v61];
              v67 = &v65[8 * v64];
              *v66 = v55;
              v58 = (uint64_t)(v66 + 1);
              v68 = (char *)v56 - (char *)v59;
              if (v56 == v59)
                goto LABEL_139;
            }
            else
            {
              v65 = 0;
              v66 = (unint64_t *)(8 * v61);
              v67 = 0;
              *(_QWORD *)(8 * v61) = v55;
              v58 = 8 * v61 + 8;
              v68 = (char *)v56 - (char *)v59;
              if (v56 == v59)
                goto LABEL_139;
            }
            v69 = v68 - 8;
            if (v69 >= 0x58)
            {
              if ((unint64_t)((char *)v56 - v65 - v60) >= 0x20)
              {
                v71 = (v69 >> 3) + 1;
                v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
                v70 = &v56[v72 / 0xFFFFFFFFFFFFFFF8];
                v66 = (unint64_t *)((char *)v66 - v72);
                v73 = &v65[8 * v61 - 16];
                v74 = v56 - 2;
                v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v76 = *(_OWORD *)v74;
                  *(v73 - 1) = *((_OWORD *)v74 - 1);
                  *v73 = v76;
                  v73 -= 2;
                  v74 -= 4;
                  v75 -= 4;
                }
                while (v75);
                if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_139:
                  *(_QWORD *)(a1 + 1672) = v66;
                  *(_QWORD *)(a1 + 1680) = v58;
                  *(_QWORD *)(a1 + 1688) = v67;
                  if (v59)
                    operator delete(v59);
LABEL_141:
                  *(_QWORD *)(a1 + 1680) = v58;
                  v78 = *(char **)(a1 + 2296);
                  v79 = *(_QWORD *)(a1 + 2304);
                  if ((unint64_t)v78 < v79)
                  {
                    *(_QWORD *)v78 = v55;
                    v80 = (uint64_t)(v78 + 8);
LABEL_162:
                    *(_QWORD *)(a1 + 2296) = v80;
                    return kdebug_trace();
                  }
                  v81 = *(char **)(a1 + 2288);
                  v82 = (v78 - v81) >> 3;
                  v83 = v82 + 1;
                  if (!((unint64_t)(v82 + 1) >> 61))
                  {
                    v84 = v79 - (_QWORD)v81;
                    if (v84 >> 2 > v83)
                      v83 = v84 >> 2;
                    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                      v85 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v85 = v83;
                    if (!v85)
                    {
                      v86 = 0;
                      v87 = (unint64_t *)(8 * v82);
                      v88 = 0;
                      *(_QWORD *)(8 * v82) = v55;
                      v80 = 8 * v82 + 8;
                      v89 = v78 - v81;
                      if (v78 == v81)
                        goto LABEL_160;
                      goto LABEL_154;
                    }
                    if (!(v85 >> 61))
                    {
                      v86 = operator new(8 * v85);
                      v87 = (unint64_t *)&v86[8 * v82];
                      v88 = &v86[8 * v85];
                      *v87 = v55;
                      v80 = (uint64_t)(v87 + 1);
                      v89 = v78 - v81;
                      if (v78 == v81)
                      {
LABEL_160:
                        *(_QWORD *)(a1 + 2288) = v87;
                        *(_QWORD *)(a1 + 2296) = v80;
                        *(_QWORD *)(a1 + 2304) = v88;
                        if (v81)
                          operator delete(v81);
                        goto LABEL_162;
                      }
LABEL_154:
                      v90 = v89 - 8;
                      if (v90 < 0x58)
                        goto LABEL_170;
                      if ((unint64_t)(v81 - v86) < 0x20)
                        goto LABEL_170;
                      v91 = (v90 >> 3) + 1;
                      v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                      v93 = &v78[-v92];
                      v87 = (unint64_t *)((char *)v87 - v92);
                      v94 = &v86[8 * v82 - 16];
                      v95 = v78 - 16;
                      v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v97 = *(_OWORD *)v95;
                        *(v94 - 1) = *((_OWORD *)v95 - 1);
                        *v94 = v97;
                        v94 -= 2;
                        v95 -= 32;
                        v96 -= 4;
                      }
                      while (v96);
                      v78 = v93;
                      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_170:
                        do
                        {
                          v98 = *((_QWORD *)v78 - 1);
                          v78 -= 8;
                          *--v87 = v98;
                        }
                        while (v78 != v81);
                      }
                      goto LABEL_160;
                    }
LABEL_167:
                    sub_20E877A38();
                  }
LABEL_166:
                  sub_20E92CED8();
                }
              }
              else
              {
                v70 = v56;
              }
            }
            else
            {
              v70 = v56;
            }
            do
            {
              v77 = *--v70;
              *--v66 = v77;
            }
            while (v70 != v59);
            goto LABEL_139;
          }
        }
LABEL_49:
        v107 = v30;
        operator delete(v30);
        goto LABEL_50;
      }
    }
    else
    {
      v26 = v101;
      if (v101)
        goto LABEL_44;
    }
    v29 = (void **)v103;
    if (!v103)
      goto LABEL_48;
    goto LABEL_100;
  }
  return kdebug_trace();
}

void sub_20F2E99B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2E9A98(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *i;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;
  _BOOL4 v90;
  __int128 *v91;
  _DWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char v120;
  uint64_t v121;
  __int128 *v122;
  __int128 *v123;
  __int128 *v124;
  __int128 *v125;
  __int128 *v126;
  _BOOL4 v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  void *v155;
  uint64_t v156;
  _OWORD *v157;
  _OWORD *v158;
  void *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  _OWORD *v165;
  uint64_t v166;
  _OWORD *v167;
  _OWORD *v168;
  _OWORD *v169;
  _OWORD *v170;
  void *v171;
  _OWORD *v172;
  void *v173;
  void *v174;
  _OWORD *v175;
  _OWORD *v176;
  char v177;
  _OWORD *m;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  _OWORD *v182;
  _OWORD *v183;
  uint64_t v184;
  __int128 v185;
  char v186;
  _BOOL4 v187;
  uint64_t v188;
  __int128 v189;
  char v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  char v195;
  char *v196;
  char *v197;
  void *v198;
  void *v199;
  void **v200;
  void **v201;
  __int128 v202;
  __int128 *v203;
  __int128 *v204;
  __int128 *v205;
  void *v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  void *v210;
  void **v211;
  void *v212;
  char *v213;
  char *v214;
  char *v215;
  void *v216;
  _QWORD *v217;
  const void **v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  size_t v222;
  const void *v223;
  int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  char *v246;
  _QWORD *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  void **v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t j;
  uint64_t *v256;
  uint64_t *v257;
  char v258;
  uint64_t *k;
  void *v260;
  uint64_t v261;
  char v262;
  uint64_t v263;
  __int128 *v264;
  __int128 *v265;
  __int128 *v266;
  __int128 *v267;
  __int128 *v268;
  _BOOL4 v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t *v274;
  _BOOL4 v275;
  void **v276;
  uint64_t v277;
  uint64_t v278;
  _BOOL4 v279;
  uint64_t *v280;
  uint64_t v281;
  char v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  _BOOL4 v286;
  uint64_t v287;
  char v288;
  char v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  uint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  char *v301;
  int64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  uint64_t *v308;
  uint64_t v309;
  int v310;
  unsigned int v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  int64_t v319;
  char *v320;
  char *v321;
  unint64_t v322;
  char *v323;
  void *v324;
  _QWORD *v325;
  uint64_t v326;
  void **v327;
  uint64_t v328;
  uint64_t v329;
  void **v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  int v334;
  char *v335;
  char *v336;
  char *v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  _QWORD *v342;
  char *v343;
  _QWORD *v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  __int128 *v370;
  __int128 *v371;
  __int128 *v372;
  __int128 *v373;
  __int128 *v374;
  _BOOL4 v375;
  void *v376;
  uint64_t v377;
  void **v378;
  uint64_t v379;
  _QWORD *v380;
  void **v381;
  unint64_t v382;
  unint64_t v383;
  void **v384;
  char *v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  uint64_t v391;
  void **v392;
  void **v393;
  char v394;
  char v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  unint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  char *v407;
  void **v408;
  uint64_t v409;
  void **v410;
  uint64_t v411;
  uint64_t v412;
  void *v413;
  uint64_t v414;
  void *v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  void *v420;
  void **v421;
  void **v422;
  void *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  _QWORD *v428;
  void *v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  void *v434;
  std::ios_base *v435;
  uint64_t v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  unsigned int *v440;
  uint64_t v441;
  char *v442;
  char *v443;
  unsigned int v444;
  uint64_t v445;
  size_t v446;
  size_t v447;
  BOOL v448;
  uint64_t n;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  size_t *v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int *v459;
  uint64_t v460;
  unsigned int v461;
  unsigned int v462;
  unint64_t v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  _BYTE *v468;
  uint64_t v469;
  int64_t v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t *v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  unint64_t v484;
  char *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  size_t *v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD **v492;
  unint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  char *v497;
  unint64_t v498;
  uint64_t v499;
  size_t v500;
  size_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  size_t v515;
  size_t v516;
  char *v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  _QWORD *v521;
  char *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  size_t v527;
  char *v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  size_t v534;
  char *v535;
  char *v536;
  _QWORD **v537;
  uint64_t v538;
  uint64_t v539;
  size_t *v540;
  uint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  _QWORD *v544;
  void *v545;
  uint64_t v546;
  uint64_t v547;
  size_t *v548;
  uint64_t v549;
  uint64_t v550;
  size_t v551;
  void *v552;
  unint64_t v553;
  const void *v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  size_t v558;
  char *v559;
  void **v560;
  uint64_t v561;
  uint64_t v562;
  void *v563;
  uint64_t v564;
  _QWORD *v565;
  _QWORD *v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  char v584;
  int v585;
  _QWORD *v586;
  unint64_t v587;
  uint8x8_t v588;
  unint64_t v589;
  uint64_t **v590;
  uint64_t *v591;
  unint64_t v592;
  unint64_t v593;
  uint64_t v594;
  char v595;
  int v596;
  uint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  void *v609;
  int v610;
  int v611;
  _QWORD *v612;
  void *v613;
  int v614;
  int v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  int v622;
  _QWORD *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  void *v627;
  void *v628;
  std::ios_base *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  size_t *v635;
  uint64_t v636;
  uint64_t v637;
  size_t v638;
  void *v639;
  unint64_t v640;
  const void *v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  size_t v645;
  char *v646;
  void **v647;
  uint64_t v648;
  void *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  void *v663;
  size_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  _QWORD *v669;
  uint64_t v670;
  uint64_t v671;
  __int128 *v672;
  __int128 *v673;
  _QWORD *v674;
  uint64_t v675;
  uint64_t v676;
  __int128 v677;
  void *v678;
  int v679;
  uint64_t v680;
  void *v681;
  uint64_t v682;
  void *v683;
  void *v684;
  std::ios_base *v685;
  uint64_t v686;
  size_t *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  size_t v692;
  void *v693;
  _BYTE *v694;
  const void *v695;
  uint64_t v696;
  uint64_t v697;
  int v698;
  size_t v699;
  char *v700;
  void **v701;
  uint64_t v702;
  void *v703;
  uint64_t v704;
  __int128 *v705;
  __int128 *v706;
  void **v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  _BYTE *v711;
  _BYTE *v712;
  int v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  void *v717;
  void *v718;
  std::ios_base *v719;
  uint64_t v720;
  uint64_t v721;
  int64_t v722;
  char *v723;
  uint64_t v724;
  uint64_t v725;
  size_t *v726;
  uint64_t v727;
  uint64_t v728;
  size_t v729;
  void *v730;
  unint64_t v731;
  const void *v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  size_t v736;
  char *v737;
  void **v738;
  uint64_t v739;
  void *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  void *v750;
  uint64_t v751;
  _OWORD *v752;
  _OWORD *v753;
  void *v754;
  uint64_t v755;
  uint64_t v756;
  char *v757;
  char *v758;
  uint64_t v759;
  _QWORD *v760;
  uint64_t v761;
  uint64_t v762;
  _QWORD *v763;
  uint64_t v764;
  unint64_t v765;
  int64_t v766;
  unint64_t v767;
  char *v768;
  char *v769;
  char *v770;
  _QWORD *v771;
  _QWORD *v772;
  uint64_t v773;
  void *v774;
  void *v775;
  void *v776;
  std::ios_base *v777;
  uint64_t v778;
  uint64_t v779;
  int64_t v780;
  unsigned int *v781;
  unsigned int *v782;
  unint64_t v783;
  unsigned int *v784;
  uint64_t ii;
  uint64_t v786;
  size_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  size_t *v792;
  uint64_t v793;
  uint64_t v794;
  size_t v795;
  void *v796;
  _BYTE *v797;
  const void *v798;
  uint64_t v799;
  uint64_t v800;
  int v801;
  size_t v802;
  char *v803;
  void **v804;
  uint64_t v805;
  uint64_t v806;
  void *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  char *v813;
  uint64_t v814;
  void *v815;
  void *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  char *v820;
  _QWORD *v821;
  void *v822;
  char *v823;
  void *v824;
  void *v825;
  _QWORD *v826;
  char *v827;
  _QWORD *v828;
  void *v829;
  char *v830;
  void *v831;
  void *v832;
  uint64_t *v833;
  uint64_t v834;
  void *v835;
  uint64_t v836;
  void *v837;
  void *v838;
  std::ios_base *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  size_t *v845;
  uint64_t v846;
  uint64_t v847;
  size_t v848;
  int64x2_t *v849;
  _BYTE *v850;
  const void *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  int v856;
  size_t v857;
  char *v858;
  int64x2_t *v859;
  uint64_t v860;
  void *v861;
  uint64_t v862;
  char *v863;
  _QWORD *v864;
  void *v865;
  char *v866;
  void *v867;
  void *v868;
  uint64_t v869;
  uint64_t v870;
  _QWORD *v871;
  _QWORD *v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t jj;
  _QWORD *v878;
  uint64_t v879;
  uint64_t v880;
  std::bad_alloc *exception;
  std::bad_alloc *v883;
  _QWORD *v884;
  __int128 *v885;
  _QWORD *__dst;
  char __src;
  void *__srca;
  const void **__srcb;
  void *__srcc;
  char *__srcd;
  void *__srce;
  void *__srcf;
  _QWORD *v894;
  void *v895;
  uint64_t v896;
  uint64_t v897;
  void *v898[2];
  _BYTE v899[25];
  void *v900;
  uint64_t v901;
  void *v902;
  uint64_t v903;
  int v904;
  uint64_t v905;
  const void *v906;
  unint64_t v907;
  __int128 v908;
  __int128 v909;
  int v910;
  _QWORD v911[19];
  char v912;
  void *v913[100];
  void *v914;
  void *v915;
  void *v916;
  void *v917;
  _QWORD **v918;
  _QWORD *v919[2];
  __int128 v920;
  __int128 v921;
  uint64_t v922;
  void *__p[94];
  void *v924;
  _BYTE *v925;
  char *v926;
  __int128 v927;
  uint64_t v928;
  void *v929;
  __int128 v930;
  _BYTE v931[25];
  void *v932;
  _BYTE *v933;
  unint64_t v934;
  _QWORD **v935;
  _QWORD *v936[2];
  __int128 v937;
  __int128 v938;
  uint64_t v939;
  int64x2_t v940;
  char *v941;
  uint64_t v942;
  int v943;
  __int128 v944;
  char *v945;
  int64x2_t v946;
  char *v947;
  uint64_t v948;
  _BYTE v949[9];
  __int128 v950;
  uint64_t v951;
  uint64_t v952;

  v952 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    if (*(_BYTE *)(a1[10] + 2499))
    {
      sub_20F233284(v2);
    }
    else
    {
      while (1)
      {
        v3 = (_QWORD *)a1[6];
        if (v3[1] == v3[2])
          break;
        sub_20F233284(v3);
      }
    }
  }
  v4 = (_QWORD *)a1[7];
  v894 = a1;
  if (!v4)
    goto LABEL_229;
  v5 = v4[28];
  if (v5)
  {
    v7 = v4[1];
    v6 = v4[2];
    if (v7 != v6)
    {
      v8 = -v7;
      while (!*(_BYTE *)(v7 + 992))
      {
        v7 += 1000;
        v8 -= 1000;
        if (v7 == v6)
          goto LABEL_23;
      }
      if (v7 != v6)
      {
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v7))
        {
          v9 = 1000 - v8;
          v10 = v4[2];
          if (1000 - v8 == v10)
          {
            v11 = -v8;
          }
          else
          {
            do
            {
              sub_20F310360((char **)(v9 - 1000), v9);
              *(_BYTE *)(v9 - 8) = *(_BYTE *)(v9 + 992);
              v9 += 1000;
            }
            while (v9 != v10);
            v11 = v9 - 1000;
            v9 = v4[2];
          }
          while (v9 != v11)
          {
            v9 -= 1000;
            sub_20E9549C4((char **)v9);
          }
          v4[2] = v11;
        }
        else
        {
          *(_BYTE *)(v7 + 992) = 0;
        }
      }
    }
  }
LABEL_23:
  v12 = (_QWORD *)a1[7];
  v13 = v12[32];
  if (v13)
  {
    v15 = v12[4];
    v14 = v12[5];
    if (v15 != v14)
    {
      while (!*(_BYTE *)(v15 + 368))
      {
        v15 += 376;
        if (v15 == v14)
          goto LABEL_39;
      }
    }
    if (v15 != v14)
    {
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, v15))
      {
        sub_20F22F948((uint64_t)__p, v15 + 376, v12[5], v15);
        v17 = v16;
        v18 = v12[5];
        if (v18 != v16)
        {
          v19 = v18 - 352;
          do
          {
            while (1)
            {
              if (*(_BYTE *)(v19 + 336) && *(char *)(v19 + 335) < 0)
                operator delete(*(void **)(v19 + 312));
              if (*(char *)(v19 + 23) < 0)
                break;
              v20 = v19 - 24;
              v19 -= 376;
              if (v20 == v17)
                goto LABEL_38;
            }
            operator delete(*(void **)v19);
            v21 = v19 - 24;
            v19 -= 376;
          }
          while (v21 != v17);
        }
LABEL_38:
        v12[5] = v17;
      }
      else
      {
        *(_BYTE *)(v15 + 368) = 0;
        v122 = (__int128 *)(v15 + 376);
        v123 = (__int128 *)v12[5];
        if ((__int128 *)(v15 + 376) != v123)
        {
          sub_20F3105EC((__int128 *)v15, (__int128 *)(v15 + 376));
          v124 = (__int128 *)(v15 + 752);
          if (v124 != v123)
          {
            do
            {
              if ((__int128 *)((char *)v124 - 376) == v122)
                v122 = v124;
              sub_20F3105EC((__int128 *)((char *)v124 - 376), v124);
              v124 = (__int128 *)((char *)v124 + 376);
            }
            while (v124 != v123);
            v125 = (__int128 *)((char *)v124 - 376);
            if (v125 != v122)
            {
              v126 = v122;
              while (1)
              {
                sub_20F3105EC(v125, v126);
                v126 = (__int128 *)((char *)v126 + 376);
                v127 = (__int128 *)((char *)v125 + 376) == v122;
                if (v126 == v123)
                {
                  if ((__int128 *)((char *)v125 + 376) == v122)
                    break;
                  v126 = (__int128 *)((char *)v122 + 376);
                  v125 += 47;
                  while (1)
                  {
                    sub_20F3105EC((__int128 *)((char *)v125 - 376), v122);
                    v127 = v125 == v122;
                    if (v126 != v123)
                      break;
                    v225 = v125 == v122;
                    v125 = (__int128 *)((char *)v125 + 376);
                    if (v225)
                      goto LABEL_39;
                  }
                }
                else
                {
                  v125 = (__int128 *)((char *)v125 + 376);
                }
                if (v127)
                  v122 = v126;
              }
            }
          }
        }
      }
    }
  }
LABEL_39:
  v22 = (_QWORD *)a1[7];
  v23 = v913;
  v913[0] = &off_24C9FD2E8;
  v913[3] = v913;
  if (v22[36])
  {
    v884 = v22;
    v25 = v22[7];
    v24 = v22[8];
    if (v25 == v24)
      goto LABEL_44;
LABEL_41:
    while (!*(_BYTE *)(v25 + 472))
    {
      v25 += 480;
      if (v25 == v24)
        goto LABEL_90;
    }
LABEL_44:
    while (v25 != v24)
    {
      v26 = v22[36];
      if (!v26)
        goto LABEL_1567;
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(v26, v25);
      LOWORD(v900) = v27;
      BYTE2(v900) = BYTE2(v27);
      if ((v27 & 0xFFFFFF) != 0)
      {
        v28 = v22[8];
        if (v25 + 480 != v28)
        {
          do
          {
            v29 = v25 + 480;
            v30 = *(_OWORD *)(v25 + 496);
            *(_OWORD *)v25 = *(_OWORD *)(v25 + 480);
            *(_OWORD *)(v25 + 16) = v30;
            *(_OWORD *)(v25 + 28) = *(_OWORD *)(v25 + 508);
            v31 = *(_OWORD *)(v25 + 608);
            *(_OWORD *)(v25 + 112) = *(_OWORD *)(v25 + 592);
            *(_OWORD *)(v25 + 128) = v31;
            v32 = *(_OWORD *)(v25 + 640);
            *(_OWORD *)(v25 + 144) = *(_OWORD *)(v25 + 624);
            *(_OWORD *)(v25 + 160) = v32;
            v33 = *(_OWORD *)(v25 + 544);
            *(_OWORD *)(v25 + 48) = *(_OWORD *)(v25 + 528);
            *(_OWORD *)(v25 + 64) = v33;
            v34 = *(_OWORD *)(v25 + 576);
            *(_OWORD *)(v25 + 80) = *(_OWORD *)(v25 + 560);
            *(_OWORD *)(v25 + 96) = v34;
            memcpy((void *)(v25 + 176), (const void *)(v25 + 656), 0x125uLL);
            *(_BYTE *)(v25 + 472) = *(_BYTE *)(v25 + 952);
            v35 = v25 + 960;
            v25 += 480;
          }
          while (v35 != v28);
          v25 = v29;
        }
        v22[8] = v25;
        if (!v913[3])
LABEL_1567:
          sub_20E86D37C();
        if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v913[3] + 48))(v913[3], &v900))
        {
          a1 = v894;
          break;
        }
      }
      else
      {
        *(_BYTE *)(v25 + 472) = 0;
        v36 = (__int128 *)(v25 + 480);
        v885 = (__int128 *)v22[8];
        if ((__int128 *)(v25 + 480) != v885)
        {
          __src = 0;
          for (i = (__int128 *)(v25 + 480); ; i += 30)
          {
            v38 = *(i - 30);
            v39 = *(i - 29);
            *(_OWORD *)((char *)&__p[3] + 4) = *(__int128 *)((char *)i - 452);
            *(_OWORD *)&__p[2] = v39;
            *(_OWORD *)__p = v38;
            v40 = *(i - 20);
            v42 = *(i - 23);
            v41 = *(i - 22);
            *(_OWORD *)&__p[18] = *(i - 21);
            *(_OWORD *)&__p[20] = v40;
            *(_OWORD *)&__p[14] = v42;
            *(_OWORD *)&__p[16] = v41;
            v43 = *(i - 27);
            v44 = *(i - 26);
            v45 = *(i - 24);
            *(_OWORD *)&__p[10] = *(i - 25);
            *(_OWORD *)&__p[12] = v45;
            *(_OWORD *)&__p[6] = v43;
            *(_OWORD *)&__p[8] = v44;
            memcpy(&__p[22], i - 19, 0x120uLL);
            v46 = *((_DWORD *)i - 4);
            BYTE4(__p[58]) = *((_BYTE *)i - 12);
            LODWORD(__p[58]) = v46;
            v47 = i[1];
            *(i - 30) = *i;
            *(i - 29) = v47;
            *(__int128 *)((char *)i - 452) = *(__int128 *)((char *)i + 28);
            v48 = i[8];
            *(i - 23) = i[7];
            *(i - 22) = v48;
            v49 = i[10];
            *(i - 21) = i[9];
            *(i - 20) = v49;
            v50 = i[4];
            *(i - 27) = i[3];
            *(i - 26) = v50;
            v51 = i[6];
            *(i - 25) = i[5];
            *(i - 24) = v51;
            memcpy(i - 19, i + 11, 0x125uLL);
            *((_BYTE *)i - 8) = *((_BYTE *)i + 472);
            v52 = *(_OWORD *)&__p[2];
            v53 = *(_OWORD *)__p;
            *(__int128 *)((char *)i + 28) = *(_OWORD *)((char *)&__p[3] + 4);
            *i = v53;
            i[1] = v52;
            v54 = *(_OWORD *)&__p[16];
            v55 = *(_OWORD *)&__p[18];
            v56 = *(_OWORD *)&__p[20];
            i[7] = *(_OWORD *)&__p[14];
            i[8] = v54;
            i[9] = v55;
            i[10] = v56;
            v57 = *(_OWORD *)&__p[8];
            v58 = *(_OWORD *)&__p[10];
            v59 = *(_OWORD *)&__p[12];
            i[3] = *(_OWORD *)&__p[6];
            i[4] = v57;
            i[5] = v58;
            i[6] = v59;
            memcpy(i + 11, &__p[22], 0x120uLL);
            v60 = BYTE4(__p[58]);
            *((_DWORD *)i + 116) = __p[58];
            *((_BYTE *)i + 468) = v60;
            *((_BYTE *)i + 472) = __src;
            if (i + 30 == v885)
              break;
            if (i == v36)
              v36 = i + 30;
            __src = *((_BYTE *)i + 472);
          }
          if (i != v36)
          {
            v61 = v36;
            while (1)
            {
              v62 = *i;
              v63 = i[1];
              *(_OWORD *)((char *)&__p[3] + 4) = *(__int128 *)((char *)i + 28);
              *(_OWORD *)&__p[2] = v63;
              *(_OWORD *)__p = v62;
              v64 = i[6];
              v66 = i[3];
              v65 = i[4];
              *(_OWORD *)&__p[10] = i[5];
              *(_OWORD *)&__p[12] = v64;
              *(_OWORD *)&__p[6] = v66;
              *(_OWORD *)&__p[8] = v65;
              v67 = i[10];
              v69 = i[7];
              v68 = i[8];
              *(_OWORD *)&__p[18] = i[9];
              *(_OWORD *)&__p[20] = v67;
              *(_OWORD *)&__p[14] = v69;
              *(_OWORD *)&__p[16] = v68;
              memcpy(&__p[22], i + 11, 0x120uLL);
              v70 = *((_DWORD *)i + 116);
              BYTE4(__p[58]) = *((_BYTE *)i + 468);
              LODWORD(__p[58]) = v70;
              v71 = *((_BYTE *)i + 472);
              v72 = *v61;
              v73 = v61[1];
              *(__int128 *)((char *)i + 28) = *(__int128 *)((char *)v61 + 28);
              *i = v72;
              i[1] = v73;
              v74 = v61[5];
              v75 = v61[6];
              v76 = v61[4];
              i[3] = v61[3];
              i[4] = v76;
              i[5] = v74;
              i[6] = v75;
              v77 = v61[10];
              v79 = v61[7];
              v78 = v61[8];
              i[9] = v61[9];
              i[10] = v77;
              i[7] = v79;
              i[8] = v78;
              memcpy(i + 11, v61 + 11, 0x120uLL);
              v80 = *((_BYTE *)v61 + 468);
              *((_DWORD *)i + 116) = *((_DWORD *)v61 + 116);
              *((_BYTE *)i + 468) = v80;
              *((_BYTE *)i + 472) = *((_BYTE *)v61 + 472);
              v81 = *(_OWORD *)((char *)&__p[3] + 4);
              v82 = *(_OWORD *)&__p[2];
              *v61 = *(_OWORD *)__p;
              v61[1] = v82;
              *(__int128 *)((char *)v61 + 28) = v81;
              v84 = *(_OWORD *)&__p[14];
              v83 = *(_OWORD *)&__p[16];
              v85 = *(_OWORD *)&__p[20];
              v61[9] = *(_OWORD *)&__p[18];
              v61[10] = v85;
              v61[7] = v84;
              v61[8] = v83;
              v86 = *(_OWORD *)&__p[8];
              v87 = *(_OWORD *)&__p[10];
              v88 = *(_OWORD *)&__p[12];
              v61[3] = *(_OWORD *)&__p[6];
              v61[4] = v86;
              v61[5] = v87;
              v61[6] = v88;
              memcpy(v61 + 11, &__p[22], 0x120uLL);
              v89 = BYTE4(__p[58]);
              *((_DWORD *)v61 + 116) = __p[58];
              *((_BYTE *)v61 + 468) = v89;
              *((_BYTE *)v61 + 472) = v71;
              i += 30;
              v61 += 30;
              v90 = i == v36;
              if (v61 == v885)
              {
                if (i == v36)
                  break;
                v91 = v36 + 3;
                __srca = v36 + 11;
                v92 = v36 + 29;
                v61 = v36 + 30;
                while (1)
                {
                  v93 = *i;
                  v94 = i[1];
                  *(_OWORD *)((char *)&__p[3] + 4) = *(__int128 *)((char *)i + 28);
                  *(_OWORD *)&__p[2] = v94;
                  *(_OWORD *)__p = v93;
                  v95 = i[10];
                  v97 = i[7];
                  v96 = i[8];
                  *(_OWORD *)&__p[18] = i[9];
                  *(_OWORD *)&__p[20] = v95;
                  *(_OWORD *)&__p[14] = v97;
                  *(_OWORD *)&__p[16] = v96;
                  v98 = i[3];
                  v99 = i[4];
                  v100 = i[6];
                  *(_OWORD *)&__p[10] = i[5];
                  *(_OWORD *)&__p[12] = v100;
                  *(_OWORD *)&__p[6] = v98;
                  *(_OWORD *)&__p[8] = v99;
                  memcpy(&__p[22], i + 11, 0x120uLL);
                  v101 = *((_BYTE *)i + 468);
                  LODWORD(__p[58]) = *((_DWORD *)i + 116);
                  BYTE4(__p[58]) = v101;
                  v102 = *((_BYTE *)i + 472);
                  v103 = *v36;
                  v104 = v36[1];
                  *(__int128 *)((char *)i + 28) = *(__int128 *)((char *)v36 + 28);
                  *i = v103;
                  i[1] = v104;
                  v105 = v36[5];
                  v106 = v36[6];
                  v107 = v36[4];
                  i[3] = *v91;
                  i[4] = v107;
                  i[5] = v105;
                  i[6] = v106;
                  v108 = v36[10];
                  v110 = v36[7];
                  v109 = v36[8];
                  i[9] = v36[9];
                  i[10] = v108;
                  i[7] = v110;
                  i[8] = v109;
                  memcpy(i + 11, __srca, 0x120uLL);
                  v111 = *((_BYTE *)v36 + 468);
                  *((_DWORD *)i + 116) = *v92;
                  *((_BYTE *)i + 468) = v111;
                  *((_BYTE *)i + 472) = *((_BYTE *)v36 + 472);
                  v112 = *(_OWORD *)&__p[2];
                  v113 = *(_OWORD *)__p;
                  *(__int128 *)((char *)v36 + 28) = *(_OWORD *)((char *)&__p[3] + 4);
                  *v36 = v113;
                  v36[1] = v112;
                  v115 = *(_OWORD *)&__p[14];
                  v114 = *(_OWORD *)&__p[16];
                  v116 = *(_OWORD *)&__p[20];
                  v36[9] = *(_OWORD *)&__p[18];
                  v36[10] = v116;
                  v36[7] = v115;
                  v36[8] = v114;
                  v117 = *(_OWORD *)&__p[8];
                  v118 = *(_OWORD *)&__p[10];
                  v119 = *(_OWORD *)&__p[12];
                  *v91 = *(_OWORD *)&__p[6];
                  v36[4] = v117;
                  v36[5] = v118;
                  v36[6] = v119;
                  memcpy(__srca, &__p[22], 0x120uLL);
                  v120 = BYTE4(__p[58]);
                  *v92 = __p[58];
                  *((_BYTE *)v36 + 468) = v120;
                  *((_BYTE *)v36 + 472) = v102;
                  i += 30;
                  v90 = i == v36;
                  if (v61 != v885)
                    break;
                  if (i == v36)
                    goto LABEL_52;
                }
              }
              if (v90)
                v36 = v61;
            }
          }
        }
      }
LABEL_52:
      a1 = v894;
      v22 = v884;
      v25 = v884[7];
      v24 = v884[8];
      if (v25 != v24)
        goto LABEL_41;
    }
LABEL_90:
    v23 = (void **)v913[3];
    if (v913[3] == v913)
    {
      v121 = 4;
      v23 = v913;
    }
    else
    {
      if (!v913[3])
        goto LABEL_95;
      v121 = 5;
    }
  }
  else
  {
    v121 = 4;
  }
  (*((void (**)(void))*v23 + v121))();
LABEL_95:
  v128 = (_QWORD *)a1[7];
  v129 = v128[40];
  if (v129)
  {
    v131 = v128[10];
    v130 = v128[11];
    if (v131 != v130)
    {
      while (!*(_BYTE *)(v131 + 432))
      {
        v131 += 440;
        if (v131 == v130)
          goto LABEL_108;
      }
    }
    if (v131 != v130)
    {
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 48))(v129, v131))
      {
        v132 = v131 + 440;
        v133 = v128[11];
        if (v131 + 440 != v133)
        {
          do
          {
            v134 = v131 + 440;
            sub_20F310B54(v131, v131 + 440);
            *(_BYTE *)(v131 + 432) = *(_BYTE *)(v131 + 872);
            v135 = v131 + 880;
            v131 += 440;
          }
          while (v135 != v133);
          v132 = v128[11];
          v131 = v134;
        }
        while (v132 != v131)
          v132 = sub_20E9545B0(v132 - 440);
        v128[11] = v131;
      }
      else
      {
        *(_BYTE *)(v131 + 432) = 0;
        v253 = v131 + 440;
        v254 = v128[11];
        if (v253 != v254)
        {
          for (j = v253; ; j += 440)
          {
            sub_20E9573E4((uint64_t)__p, (uint64_t *)(j - 440));
            LOBYTE(__p[54]) = *(_BYTE *)(j - 8);
            sub_20F310B54(j - 440, j);
            *(_BYTE *)(j - 8) = *(_BYTE *)(j + 432);
            sub_20F310B54(j, (uint64_t)__p);
            *(_BYTE *)(j + 432) = __p[54];
            sub_20E9545B0((uint64_t)__p);
            if (j + 440 == v254)
              break;
            if (j == v253)
              v253 = j + 440;
          }
          if (j != v253)
          {
            v278 = v253;
            while (1)
            {
              sub_20E9573E4((uint64_t)__p, (uint64_t *)j);
              LOBYTE(__p[54]) = *(_BYTE *)(j + 432);
              sub_20F310B54(j, v278);
              *(_BYTE *)(j + 432) = *(_BYTE *)(v278 + 432);
              sub_20F310B54(v278, (uint64_t)__p);
              *(_BYTE *)(v278 + 432) = __p[54];
              sub_20E9545B0((uint64_t)__p);
              v278 += 440;
              v279 = j + 440 == v253;
              if (v278 == v254)
              {
                if (j + 440 == v253)
                  break;
                v278 = v253 + 440;
                j += 880;
                while (1)
                {
                  sub_20E9573E4((uint64_t)__p, (uint64_t *)(j - 440));
                  LOBYTE(__p[54]) = *(_BYTE *)(j - 8);
                  sub_20F310B54(j - 440, v253);
                  *(_BYTE *)(j - 8) = *(_BYTE *)(v253 + 432);
                  sub_20F310B54(v253, (uint64_t)__p);
                  *(_BYTE *)(v253 + 432) = __p[54];
                  sub_20E9545B0((uint64_t)__p);
                  v279 = j == v253;
                  if (v278 != v254)
                    break;
                  v225 = j == v253;
                  j += 440;
                  if (v225)
                    goto LABEL_108;
                }
              }
              else
              {
                j += 440;
              }
              if (v279)
                v253 = v278;
            }
          }
        }
      }
    }
  }
LABEL_108:
  v136 = (_QWORD *)a1[7];
  v137 = v136[44];
  if (v137)
  {
    v139 = v136[13];
    v138 = v136[14];
    if (v139 != v138)
    {
      while (!*(_BYTE *)(v139 + 24))
      {
        v139 += 32;
        if (v139 == v138)
          goto LABEL_126;
      }
    }
    if (v139 != v138)
    {
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 48))(v137, v139))
      {
        v140 = v139 + 32;
        v141 = v136[14];
        if (v139 + 32 != v141)
        {
          do
          {
            v142 = (void **)(v140 - 32);
            if (*(char *)(v140 - 9) < 0)
              operator delete(*v142);
            *(_OWORD *)v142 = *(_OWORD *)v140;
            *(_QWORD *)(v140 - 16) = *(_QWORD *)(v140 + 16);
            *(_BYTE *)(v140 + 23) = 0;
            *(_BYTE *)v140 = 0;
            *(_BYTE *)(v140 - 8) = *(_BYTE *)(v140 + 24);
            v140 += 32;
          }
          while (v140 != v141);
          v139 = v140 - 32;
          v140 = v136[14];
        }
        while (v140 != v139)
        {
          if (*(char *)(v140 - 9) < 0)
            operator delete(*(void **)(v140 - 32));
          v140 -= 32;
        }
        v136[14] = v139;
      }
      else
      {
        *(_BYTE *)(v139 + 24) = 0;
        v256 = (uint64_t *)(v139 + 32);
        v257 = (uint64_t *)v136[14];
        if (v256 != v257)
        {
          v258 = 0;
          for (k = v256; ; k += 4)
          {
            v261 = *(k - 4);
            v260 = (void *)*(k - 3);
            *(void **)((char *)__p + 7) = *(void **)((char *)k - 17);
            __p[0] = v260;
            v262 = *((_BYTE *)k - 9);
            *(k - 2) = k[2];
            *((_OWORD *)k - 2) = *(_OWORD *)k;
            *((_BYTE *)k + 23) = 0;
            *(_BYTE *)k = 0;
            *((_BYTE *)k - 8) = *((_BYTE *)k + 24);
            *k = v261;
            v263 = *(uint64_t *)((char *)__p + 7);
            k[1] = (uint64_t)__p[0];
            *(uint64_t *)((char *)k + 15) = v263;
            *((_BYTE *)k + 23) = v262;
            *((_BYTE *)k + 24) = v258;
            if (k + 4 == v257)
              break;
            if (k == v256)
              v256 = k + 4;
            v258 = *((_BYTE *)k + 24);
          }
          if (k != v256)
          {
            v280 = v256;
            while (1)
            {
              v281 = *k;
              __p[0] = (void *)k[1];
              *(void **)((char *)__p + 7) = *(void **)((char *)k + 15);
              v282 = *((_BYTE *)k + 23);
              k[1] = 0;
              k[2] = 0;
              *k = 0;
              v283 = *((_BYTE *)k + 24);
              v284 = v280[2];
              *(_OWORD *)k = *(_OWORD *)v280;
              k[2] = v284;
              *((_BYTE *)v280 + 23) = 0;
              *(_BYTE *)v280 = 0;
              *((_BYTE *)k + 24) = *((_BYTE *)v280 + 24);
              if (*((char *)v280 + 23) < 0)
                operator delete((void *)*v280);
              *v280 = v281;
              v285 = *(uint64_t *)((char *)__p + 7);
              v280[1] = (uint64_t)__p[0];
              *(uint64_t *)((char *)v280 + 15) = v285;
              *((_BYTE *)v280 + 23) = v282;
              *((_BYTE *)v280 + 24) = v283;
              k += 4;
              v280 += 4;
              v286 = k == v256;
              if (v280 == v257)
              {
                if (k == v256)
                  break;
                v280 = v256 + 4;
                while (1)
                {
                  v287 = *k;
                  __p[0] = (void *)k[1];
                  *(void **)((char *)__p + 7) = *(void **)((char *)k + 15);
                  v288 = *((_BYTE *)k + 23);
                  k[1] = 0;
                  k[2] = 0;
                  *k = 0;
                  v289 = *((_BYTE *)k + 24);
                  v290 = v256[2];
                  *(_OWORD *)k = *(_OWORD *)v256;
                  k[2] = v290;
                  *((_BYTE *)v256 + 23) = 0;
                  *(_BYTE *)v256 = 0;
                  *((_BYTE *)k + 24) = *((_BYTE *)v256 + 24);
                  if (*((char *)v256 + 23) < 0)
                    operator delete((void *)*v256);
                  *v256 = v287;
                  v291 = *(uint64_t *)((char *)__p + 7);
                  v256[1] = (uint64_t)__p[0];
                  *(uint64_t *)((char *)v256 + 15) = v291;
                  *((_BYTE *)v256 + 23) = v288;
                  *((_BYTE *)v256 + 24) = v289;
                  k += 4;
                  v286 = k == v256;
                  if (v280 != v257)
                    break;
                  if (k == v256)
                    goto LABEL_126;
                }
              }
              if (v286)
                v256 = v280;
            }
          }
        }
      }
    }
  }
LABEL_126:
  v143 = (_QWORD *)a1[7];
  v144 = v143[48];
  if (v144)
  {
    v146 = v143[16];
    v145 = v143[17];
    if (v146 != v145)
    {
      while (!*(_BYTE *)(v146 + 896))
      {
        v146 += 904;
        if (v146 == v145)
          goto LABEL_150;
      }
    }
    if (v146 != v145)
    {
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v144 + 48))(v144, v146))
      {
        v147 = v146 + 904;
        v148 = v143[17];
        if (v146 + 904 != v148)
        {
          do
          {
            v149 = v146;
            *(_QWORD *)(v146 + 160) = *(_QWORD *)(v146 + 1064);
            v150 = *(_OWORD *)(v146 + 1048);
            *(_OWORD *)(v146 + 128) = *(_OWORD *)(v146 + 1032);
            *(_OWORD *)(v146 + 144) = v150;
            v151 = *(_OWORD *)(v146 + 984);
            *(_OWORD *)(v146 + 64) = *(_OWORD *)(v146 + 968);
            *(_OWORD *)(v146 + 80) = v151;
            v152 = *(_OWORD *)(v146 + 1016);
            *(_OWORD *)(v146 + 96) = *(_OWORD *)(v146 + 1000);
            *(_OWORD *)(v146 + 112) = v152;
            v153 = *(_OWORD *)(v146 + 920);
            *(_OWORD *)v146 = *(_OWORD *)(v146 + 904);
            *(_OWORD *)(v146 + 16) = v153;
            v154 = *(_OWORD *)(v146 + 952);
            *(_OWORD *)(v146 + 32) = *(_OWORD *)(v146 + 936);
            *(_OWORD *)(v146 + 48) = v154;
            memcpy((void *)(v146 + 168), (const void *)(v146 + 1072), 0x120uLL);
            memcpy((void *)(v146 + 456), (const void *)(v146 + 1360), 0x120uLL);
            v155 = *(void **)(v146 + 744);
            if (v155)
            {
              *(_QWORD *)(v146 + 752) = v155;
              operator delete(v155);
              *(_OWORD *)(v146 + 752) = 0u;
            }
            *(_OWORD *)(v146 + 744) = *(_OWORD *)(v146 + 1648);
            *(_QWORD *)(v146 + 760) = *(_QWORD *)(v146 + 1664);
            *(_QWORD *)(v146 + 1664) = 0;
            *(_OWORD *)(v146 + 1648) = 0u;
            *(_QWORD *)(v146 + 784) = *(_QWORD *)(v146 + 1688);
            *(_OWORD *)(v146 + 768) = *(_OWORD *)(v146 + 1672);
            *(_OWORD *)(v146 + 792) = *(_OWORD *)(v146 + 1696);
            *(_QWORD *)(v146 + 808) = *(_QWORD *)(v146 + 1712);
            *(_OWORD *)(v146 + 816) = *(_OWORD *)(v146 + 1720);
            v156 = *(_QWORD *)(v146 + 1736);
            *(_DWORD *)(v146 + 840) = *(_DWORD *)(v146 + 1744);
            *(_QWORD *)(v146 + 832) = v156;
            v157 = (_OWORD *)(v146 + 848);
            v158 = (_OWORD *)(v146 + 1752);
            if (*(unsigned __int8 *)(v146 + 872) == *(unsigned __int8 *)(v146 + 1776))
            {
              if (*(_BYTE *)(v146 + 872))
              {
                *v157 = *v158;
                *(_QWORD *)(v146 + 864) = *(_QWORD *)(v146 + 1768);
              }
            }
            else if (*(_BYTE *)(v146 + 872))
            {
              *(_BYTE *)(v146 + 872) = 0;
            }
            else
            {
              *v157 = *v158;
              *(_QWORD *)(v146 + 864) = *(_QWORD *)(v146 + 1768);
              *(_BYTE *)(v146 + 872) = 1;
            }
            *(_QWORD *)(v146 + 880) = *(_QWORD *)(v146 + 1784);
            *(_BYTE *)(v146 + 888) = *(_BYTE *)(v146 + 1792);
            *(_BYTE *)(v146 + 896) = *(_BYTE *)(v146 + 1800);
            v146 += 904;
          }
          while (v149 + 1808 != v148);
          v147 = v143[17];
        }
        while (v147 != v146)
        {
          v159 = *(void **)(v147 - 160);
          if (v159)
          {
            *(_QWORD *)(v147 - 152) = v159;
            operator delete(v159);
          }
          v147 -= 904;
        }
        v143[17] = v146;
      }
      else
      {
        *(_BYTE *)(v146 + 896) = 0;
        v264 = (__int128 *)(v146 + 904);
        v265 = (__int128 *)v143[17];
        if ((__int128 *)(v146 + 904) != v265)
        {
          sub_20F3110B0((__int128 *)v146, (__int128 *)(v146 + 904));
          v266 = (__int128 *)(v146 + 1808);
          if (v266 != v265)
          {
            do
            {
              if ((__int128 *)((char *)v266 - 904) == v264)
                v264 = v266;
              sub_20F3110B0((__int128 *)((char *)v266 - 904), v266);
              v266 = (__int128 *)((char *)v266 + 904);
            }
            while (v266 != v265);
            v267 = (__int128 *)((char *)v266 - 904);
            if (v267 != v264)
            {
              v268 = v264;
              while (1)
              {
                sub_20F3110B0(v267, v268);
                v268 = (__int128 *)((char *)v268 + 904);
                v269 = (__int128 *)((char *)v267 + 904) == v264;
                if (v268 == v265)
                {
                  if ((__int128 *)((char *)v267 + 904) == v264)
                    break;
                  v268 = (__int128 *)((char *)v264 + 904);
                  v267 += 113;
                  while (1)
                  {
                    sub_20F3110B0((__int128 *)((char *)v267 - 904), v264);
                    v269 = v267 == v264;
                    if (v268 != v265)
                      break;
                    v225 = v267 == v264;
                    v267 = (__int128 *)((char *)v267 + 904);
                    if (v225)
                      goto LABEL_150;
                  }
                }
                else
                {
                  v267 = (__int128 *)((char *)v267 + 904);
                }
                if (v269)
                  v264 = v268;
              }
            }
          }
        }
      }
    }
  }
LABEL_150:
  v160 = (_QWORD *)a1[7];
  if (v160[52])
  {
    while (1)
    {
      while (1)
      {
LABEL_157:
        v165 = (_OWORD *)v160[19];
        v164 = (_OWORD *)v160[20];
        if (v165 != v164)
        {
          while (!*((_BYTE *)v165 + 24))
          {
            v165 += 2;
            if (v165 == v164)
              goto LABEL_151;
          }
        }
        if (v165 == v164)
          goto LABEL_151;
        v166 = v160[52];
        if (!v166)
          sub_20E86D37C();
        if ((*(unsigned __int8 (**)(uint64_t, _OWORD *))(*(_QWORD *)v166 + 48))(v166, v165))
          break;
        *((_BYTE *)v165 + 24) = 0;
        v175 = v165 + 2;
        v176 = (_OWORD *)v160[20];
        if (v165 + 2 != v176)
        {
          v177 = 0;
          for (m = v165; ; v165 = m)
          {
            v179 = *((_QWORD *)v165 + 2);
            v180 = *v165;
            v181 = m[2];
            m += 2;
            *v165 = v181;
            *((_QWORD *)v165 + 2) = *((_QWORD *)v165 + 6);
            *((_BYTE *)v165 + 24) = *((_BYTE *)v165 + 56);
            *m = v180;
            *((_QWORD *)v165 + 6) = v179;
            *((_BYTE *)v165 + 56) = v177;
            if (v165 + 4 == v176)
              break;
            if (m == v175)
              v175 = v165 + 4;
            v177 = *((_BYTE *)v165 + 56);
          }
          if (m != v175)
          {
            v182 = v165 + 2;
            v183 = v175;
            while (1)
            {
              v184 = *((_QWORD *)v182 + 2);
              v185 = *v182;
              *((_QWORD *)v182 + 1) = 0;
              *((_QWORD *)v182 + 2) = 0;
              *(_QWORD *)v182 = 0;
              v186 = *((_BYTE *)v182 + 24);
              *v182 = *v183;
              *((_QWORD *)v182 + 2) = *((_QWORD *)v183 + 2);
              *((_BYTE *)v182 + 24) = *((_BYTE *)v183 + 24);
              *v183 = v185;
              *((_QWORD *)v183 + 2) = v184;
              *((_BYTE *)v183 + 24) = v186;
              v182 += 2;
              v183 += 2;
              v187 = v182 == v175;
              if (v183 == v176)
              {
                if (v182 == v175)
                  goto LABEL_157;
                v183 = v175 + 2;
                while (1)
                {
                  v188 = *((_QWORD *)v182 + 2);
                  v189 = *v182;
                  *((_QWORD *)v182 + 1) = 0;
                  *((_QWORD *)v182 + 2) = 0;
                  *(_QWORD *)v182 = 0;
                  v190 = *((_BYTE *)v182 + 24);
                  *v182 = *v175;
                  *((_QWORD *)v182 + 2) = *((_QWORD *)v175 + 2);
                  *((_BYTE *)v182 + 24) = *((_BYTE *)v175 + 24);
                  *v175 = v189;
                  *((_QWORD *)v175 + 2) = v188;
                  *((_BYTE *)v175 + 24) = v190;
                  v182 += 2;
                  v187 = v182 == v175;
                  if (v183 != v176)
                    break;
                  if (v182 == v175)
                    goto LABEL_157;
                }
              }
              if (v187)
                v175 = v183;
            }
          }
        }
      }
      v167 = v165 + 2;
      v168 = (_OWORD *)v160[20];
      if (v165 + 2 == v168)
        break;
      do
      {
        v171 = *(void **)v165;
        if (*(_QWORD *)v165)
        {
          *((_QWORD *)v165 + 1) = v171;
          operator delete(v171);
          *((_QWORD *)v165 + 1) = 0;
          *((_QWORD *)v165 + 2) = 0;
        }
        v169 = v165 + 2;
        *v165 = v165[2];
        *((_QWORD *)v165 + 2) = *((_QWORD *)v165 + 6);
        *((_QWORD *)v165 + 5) = 0;
        *((_QWORD *)v165 + 6) = 0;
        *((_QWORD *)v165 + 4) = 0;
        *((_BYTE *)v165 + 24) = *((_BYTE *)v165 + 56);
        v170 = v165 + 4;
        v165 += 2;
      }
      while (v170 != v168);
      v167 = (_OWORD *)v160[20];
      v165 = v169;
      if (v167 != v169)
        goto LABEL_171;
LABEL_156:
      v160[20] = v165;
    }
    if (v167 == v165)
      goto LABEL_156;
LABEL_171:
    v172 = v167;
    do
    {
      v174 = (void *)*((_QWORD *)v172 - 4);
      v172 -= 2;
      v173 = v174;
      if (v174)
      {
        *((_QWORD *)v167 - 3) = v173;
        operator delete(v173);
      }
      v167 = v172;
    }
    while (v172 != v165);
    goto LABEL_156;
  }
LABEL_151:
  v161 = (_QWORD *)a1[7];
  if (v161[56])
  {
    v163 = v161[22];
    v162 = v161[23];
    if (v163 != v162)
    {
      while (!*(_BYTE *)(v163 + 104))
      {
        v163 += 112;
        if (v163 == v162)
          goto LABEL_229;
      }
    }
    if (v163 != v162)
    {
      sub_20F22F360(__p, (__int128 **)v163);
      __p[5] = 0;
      __p[4] = 0;
      __p[3] = &__p[4];
      sub_20F22F56C((uint64_t *)&__p[3], *(_QWORD **)(v163 + 24), (_QWORD *)(v163 + 32));
      v191 = *(_OWORD *)(v163 + 48);
      v192 = *(_OWORD *)(v163 + 64);
      v193 = *(_OWORD *)(v163 + 80);
      LODWORD(__p[12]) = *(_DWORD *)(v163 + 96);
      *(_OWORD *)&__p[10] = v193;
      *(_OWORD *)&__p[8] = v192;
      *(_OWORD *)&__p[6] = v191;
      v194 = v161[56];
      if (!v194)
        sub_20E86D37C();
      v195 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v194 + 48))(v194, __p);
      sub_20E86872C((uint64_t)&__p[3], (_QWORD *)__p[4]);
      v196 = (char *)__p[0];
      if (__p[0])
      {
        v197 = (char *)__p[1];
        v198 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v199 = (void *)*((_QWORD *)v197 - 3);
            if (v199)
            {
              *((_QWORD *)v197 - 2) = v199;
              operator delete(v199);
            }
            v197 -= 48;
          }
          while (v197 != v196);
          v198 = __p[0];
        }
        __p[1] = v196;
        operator delete(v198);
      }
      if (v195)
      {
        v200 = (void **)(v163 + 112);
        v201 = (void **)v161[23];
        if ((void **)(v163 + 112) != v201)
        {
          do
          {
            v203 = *(__int128 **)v163;
            if (*(_QWORD *)v163)
            {
              v204 = *(__int128 **)(v163 + 8);
              v205 = *(__int128 **)v163;
              if (v204 != v203)
              {
                do
                {
                  v206 = (void *)*((_QWORD *)v204 - 3);
                  if (v206)
                  {
                    *((_QWORD *)v204 - 2) = v206;
                    operator delete(v206);
                  }
                  v204 -= 3;
                }
                while (v204 != v203);
                v205 = *(__int128 **)v163;
              }
              *(_QWORD *)(v163 + 8) = v203;
              operator delete(v205);
              *(_QWORD *)v163 = 0;
              *(_QWORD *)(v163 + 8) = 0;
              *(_QWORD *)(v163 + 16) = 0;
            }
            *(_OWORD *)v163 = *(_OWORD *)v200;
            *(_QWORD *)(v163 + 16) = v200[2];
            *v200 = 0;
            v200[1] = 0;
            v200[2] = 0;
            v207 = v163 + 32;
            sub_20E86872C(v163 + 24, *(_QWORD **)(v163 + 32));
            *(_QWORD *)(v163 + 24) = v200[3];
            v208 = v200 + 4;
            v209 = v200[4];
            *(_QWORD *)(v163 + 32) = v209;
            v210 = v200[5];
            *(_QWORD *)(v163 + 40) = v210;
            if (v210)
            {
              v209[2] = v207;
              v200[3] = v208;
              *v208 = 0;
              v200[5] = 0;
            }
            else
            {
              *(_QWORD *)(v163 + 24) = v207;
            }
            v202 = *((_OWORD *)v200 + 4);
            *(_OWORD *)(v163 + 48) = *((_OWORD *)v200 + 3);
            *(_OWORD *)(v163 + 64) = v202;
            *(_OWORD *)(v163 + 80) = *((_OWORD *)v200 + 5);
            *(_DWORD *)(v163 + 96) = *((_DWORD *)v200 + 24);
            *(_BYTE *)(v163 + 104) = *((_BYTE *)v200 + 104);
            v200 += 14;
            v163 += 112;
          }
          while (v200 != v201);
          v200 = (void **)v161[23];
        }
        if (v200 != (void **)v163)
        {
          v211 = v200;
          do
          {
            sub_20E86872C((uint64_t)(v200 - 11), *(v200 - 10));
            v214 = (char *)*(v211 - 14);
            v211 -= 14;
            v213 = v214;
            if (v214)
            {
              v215 = (char *)*(v200 - 13);
              v212 = v213;
              if (v215 != v213)
              {
                do
                {
                  v216 = (void *)*((_QWORD *)v215 - 3);
                  if (v216)
                  {
                    *((_QWORD *)v215 - 2) = v216;
                    operator delete(v216);
                  }
                  v215 -= 48;
                }
                while (v215 != v213);
                v212 = *v211;
              }
              *(v200 - 13) = v213;
              operator delete(v212);
            }
            v200 = v211;
          }
          while (v211 != (void **)v163);
        }
        v161[23] = v163;
      }
      else
      {
        *(_BYTE *)(v163 + 104) = 0;
        v270 = (uint64_t *)(v163 + 112);
        v271 = (uint64_t *)v161[23];
        if ((uint64_t *)(v163 + 112) != v271)
        {
          sub_20F3114A0(v163, (uint64_t *)(v163 + 112));
          v272 = (uint64_t *)(v163 + 224);
          if (v272 != v271)
          {
            do
            {
              if (v272 - 14 == v270)
                v270 = v272;
              sub_20F3114A0((uint64_t)(v272 - 14), v272);
              v272 += 14;
            }
            while (v272 != v271);
            v273 = (uint64_t)(v272 - 14);
            if ((uint64_t *)v273 != v270)
            {
              v274 = v270;
              while (1)
              {
                sub_20F3114A0(v273, v274);
                v274 += 14;
                v275 = v273 + 112 == (_QWORD)v270;
                if (v274 == v271)
                {
                  if ((uint64_t *)(v273 + 112) == v270)
                    break;
                  v274 = v270 + 14;
                  v273 += 224;
                  while (1)
                  {
                    sub_20F3114A0(v273 - 112, v270);
                    v275 = v273 == (_QWORD)v270;
                    if (v274 != v271)
                      break;
                    v225 = v273 == (_QWORD)v270;
                    v273 += 112;
                    if (v225)
                      goto LABEL_229;
                  }
                }
                else
                {
                  v273 += 112;
                }
                if (v275)
                  v270 = v274;
              }
            }
          }
        }
      }
    }
  }
LABEL_229:
  v217 = (_QWORD *)a1[5];
  if (v217)
    sub_20F233284(v217);
  if (a1[9] && a1[8])
  {
    kdebug_trace();
    sub_20F23A57C(a1[9], (uint64_t)&v900);
    v218 = (const void **)v900;
    __srcb = (const void **)v901;
    if (v900 != (void *)v901)
    {
      do
      {
        v219 = a1[10];
        if (!*(_BYTE *)(v219 + 2499) || !*(_BYTE *)(v219 + 2623))
          goto LABEL_256;
        HIBYTE(__p[2]) = 7;
        strcpy((char *)__p, "origin_");
        v220 = *((unsigned __int8 *)v218 + 23);
        v221 = (v220 & 0x80u) == 0 ? *((unsigned __int8 *)v218 + 23) : (unint64_t)v218[1];
        if (v221 > 6)
        {
          if ((v220 & 0x80) != 0)
          {
            v222 = (unint64_t)v218[1] >= 7 ? 7 : (size_t)v218[1];
            v223 = *v218;
          }
          else
          {
            v222 = v220 >= 7 ? 7 : *((unsigned __int8 *)v218 + 23);
            v223 = v218;
          }
          v224 = memcmp(v223, __p, v222);
          v225 = v222 == 7 && v224 == 0;
          a1 = v894;
          if (v225)
          {
LABEL_256:
            v226 = *(_QWORD *)(v219 + 2824);
            v227 = *(_QWORD *)(v219 + 2832);
            if (v226 == v227)
            {
LABEL_259:
              LOBYTE(v913[0]) = 0;
              LOBYTE(v913[46]) = 0;
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 644, (uint64_t)"opt_object_anchor_cm", 20, (uint64_t)"Cannot create object anchor cm!", 31, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            else
            {
              while (1)
              {
                sub_20FCCC180(*(_QWORD **)(*(_QWORD *)(v226 + 192) + 8), *(unint64_t **)(v226 + 192), (__int128 *)v218, (uint64_t)v913);
                if (LOBYTE(v913[46]))
                  break;
                v226 += 4472;
                if (v226 == v227)
                  goto LABEL_259;
              }
            }
            v228 = v894[8];
            *(_OWORD *)__p = *(_OWORD *)v913;
            __p[2] = v913[2];
            if (SHIBYTE(v913[5]) < 0)
            {
              sub_20E860C04(&__p[3], v913[3], (unint64_t)v913[4]);
            }
            else
            {
              *(_OWORD *)&__p[3] = *(_OWORD *)&v913[3];
              __p[5] = v913[5];
            }
            __p[6] = v913[6];
            *(_OWORD *)&__p[15] = *(_OWORD *)&v913[15];
            *(_OWORD *)&__p[17] = *(_OWORD *)&v913[17];
            *(_OWORD *)&__p[19] = *(_OWORD *)&v913[19];
            *(_OWORD *)&__p[21] = *(_OWORD *)&v913[21];
            *(_OWORD *)&__p[7] = *(_OWORD *)&v913[7];
            *(_OWORD *)&__p[9] = *(_OWORD *)&v913[9];
            *(_OWORD *)&__p[11] = *(_OWORD *)&v913[11];
            *(_OWORD *)&__p[13] = *(_OWORD *)&v913[13];
            *(_OWORD *)&__p[31] = *(_OWORD *)&v913[31];
            *(_OWORD *)&__p[33] = *(_OWORD *)&v913[33];
            *(_OWORD *)&__p[35] = *(_OWORD *)&v913[35];
            *(_OWORD *)&__p[37] = *(_OWORD *)&v913[37];
            *(_OWORD *)&__p[23] = *(_OWORD *)&v913[23];
            *(_OWORD *)&__p[25] = *(_OWORD *)&v913[25];
            *(_OWORD *)&__p[27] = *(_OWORD *)&v913[27];
            *(_OWORD *)&__p[29] = *(_OWORD *)&v913[29];
            __p[41] = v913[41];
            *(_OWORD *)&__p[39] = *(_OWORD *)&v913[39];
            LOBYTE(__p[42]) = 0;
            LOBYTE(__p[45]) = 0;
            if (LOBYTE(v913[45]))
            {
              if (SHIBYTE(v913[44]) < 0)
              {
                sub_20E860C04(&__p[42], v913[42], (unint64_t)v913[43]);
              }
              else
              {
                *(_OWORD *)&__p[42] = *(_OWORD *)&v913[42];
                __p[44] = v913[44];
              }
              LOBYTE(__p[45]) = 1;
            }
            LOBYTE(__p[46]) = 1;
            v229 = *(_QWORD *)(v228 + 40);
            if (v229 >= *(_QWORD *)(v228 + 48))
            {
              v246 = sub_20F22EB34((void **)(v228 + 32), (uint64_t)__p);
            }
            else
            {
              v230 = *(_OWORD *)__p;
              *(void **)(v229 + 16) = __p[2];
              *(_OWORD *)v229 = v230;
              v231 = *(_OWORD *)&__p[3];
              *(void **)(v229 + 40) = __p[5];
              *(_OWORD *)(v229 + 24) = v231;
              memset(&__p[3], 0, 24);
              *(void **)(v229 + 48) = __p[6];
              v232 = *(_OWORD *)&__p[7];
              v233 = *(_OWORD *)&__p[9];
              v234 = *(_OWORD *)&__p[11];
              *(_OWORD *)(v229 + 104) = *(_OWORD *)&__p[13];
              *(_OWORD *)(v229 + 88) = v234;
              *(_OWORD *)(v229 + 72) = v233;
              *(_OWORD *)(v229 + 56) = v232;
              v235 = *(_OWORD *)&__p[15];
              v236 = *(_OWORD *)&__p[17];
              v237 = *(_OWORD *)&__p[19];
              *(_OWORD *)(v229 + 168) = *(_OWORD *)&__p[21];
              *(_OWORD *)(v229 + 152) = v237;
              *(_OWORD *)(v229 + 136) = v236;
              *(_OWORD *)(v229 + 120) = v235;
              v238 = *(_OWORD *)&__p[23];
              v239 = *(_OWORD *)&__p[25];
              v240 = *(_OWORD *)&__p[27];
              *(_OWORD *)(v229 + 232) = *(_OWORD *)&__p[29];
              *(_OWORD *)(v229 + 216) = v240;
              *(_OWORD *)(v229 + 200) = v239;
              *(_OWORD *)(v229 + 184) = v238;
              v241 = *(_OWORD *)&__p[31];
              v242 = *(_OWORD *)&__p[33];
              v243 = *(_OWORD *)&__p[37];
              *(_OWORD *)(v229 + 280) = *(_OWORD *)&__p[35];
              *(_OWORD *)(v229 + 296) = v243;
              *(_OWORD *)(v229 + 264) = v242;
              *(_OWORD *)(v229 + 248) = v241;
              v244 = *(_OWORD *)&__p[39];
              *(void **)(v229 + 328) = __p[41];
              *(_OWORD *)(v229 + 312) = v244;
              *(_BYTE *)(v229 + 336) = 0;
              *(_BYTE *)(v229 + 360) = 0;
              if (LOBYTE(__p[45]))
              {
                v245 = *(_OWORD *)&__p[42];
                *(void **)(v229 + 352) = __p[44];
                *(_OWORD *)(v229 + 336) = v245;
                memset(&__p[42], 0, 24);
                *(_BYTE *)(v229 + 360) = 1;
              }
              *(_BYTE *)(v229 + 368) = __p[46];
              v246 = (char *)(v229 + 376);
            }
            *(_QWORD *)(v228 + 40) = v246;
            if (LOBYTE(__p[45]) && SHIBYTE(__p[44]) < 0)
              operator delete(__p[42]);
            a1 = v894;
            if (SHIBYTE(__p[5]) < 0)
            {
              operator delete(__p[3]);
              if (LOBYTE(v913[46]))
              {
LABEL_280:
                if (LOBYTE(v913[45]) && SHIBYTE(v913[44]) < 0)
                  operator delete(v913[42]);
                if (SHIBYTE(v913[5]) < 0)
                  operator delete(v913[3]);
              }
            }
            else if (LOBYTE(v913[46]))
            {
              goto LABEL_280;
            }
          }
        }
        v218 += 3;
      }
      while (v218 != __srcb);
    }
    sub_20F2F6D34((uint64_t)a1);
    sub_20F239A38(a1[9], v898);
    if (!v899[0] || !*(_BYTE *)(a1[10] + 2500))
      goto LABEL_373;
    v247 = operator new(0x20uLL);
    *v247 = &off_24C9FD378;
    v247[1] = a1;
    v248 = (char *)(v247 + 1);
    v247[2] = v898[0];
    *((_DWORD *)v247 + 6) = v898[1];
    __p[3] = v247;
    LOBYTE(__p[4]) = 1;
    v249 = a1[8];
    v250 = (char *)operator new(0x20uLL);
    *(_QWORD *)v250 = &off_24C9FD378;
    *(_OWORD *)(v250 + 8) = *(_OWORD *)v248;
    *((_QWORD *)v250 + 3) = *((_QWORD *)v248 + 2);
    v913[3] = v250;
    sub_20F2F7080((_QWORD *)(v249 + 8), v913);
    v251 = (void **)v913[3];
    if (v913[3] == v913)
    {
      v252 = 4;
      v251 = v913;
    }
    else
    {
      if (!v913[3])
        goto LABEL_340;
      v252 = 5;
    }
    (*((void (**)(void))*v251 + v252))();
LABEL_340:
    if (!LOBYTE(__p[4]))
      goto LABEL_373;
    v276 = (void **)__p[3];
    if (__p[3] == __p)
    {
      v277 = 4;
      v276 = __p;
    }
    else
    {
      if (!__p[3])
        goto LABEL_373;
      v277 = 5;
    }
    (*((void (**)(void))*v276 + v277))();
LABEL_373:
    v292 = a1[9];
    if (*(_BYTE *)(v292 + 180))
    {
      v293 = *(_DWORD *)(v292 + 172);
      v294 = v293 + 1;
      v295 = *(_DWORD *)(v292 + 12);
      v296 = v293 + 1 < v295 ? v293 + 1 : 0;
      *(_DWORD *)(v292 + 172) = v296;
      if (v294 >= v295)
      {
        v297 = a1[8];
        memset(v913, 0, 24);
        sub_20F320BEC((_QWORD *)a1[10], (uint64_t *)__p);
        v298 = (char *)__p[0];
        v299 = (char *)__p[1];
        v300 = a1[3];
        v301 = (char *)__p[2];
        v913[0] = __p[0];
        v913[1] = __p[1];
        v913[2] = __p[2];
        v302 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v303 = v302 + v300;
        if (v302 + v300 <= (unint64_t)(((char *)__p[2] - (char *)__p[0]) >> 4))
        {
          v306 = (char *)__p[0];
          v305 = (char *)__p[1];
          v308 = (uint64_t *)a1[2];
          if (v308)
            goto LABEL_388;
        }
        else
        {
          if (v303 >> 60)
            sub_20E92CED8();
          v304 = (char *)operator new(16 * v303);
          v305 = &v304[16 * v302];
          v301 = &v304[16 * v303];
          v306 = v305;
          if (v299 != v298)
          {
            v307 = v305;
            do
            {
              v306 = v307 - 16;
              *((_OWORD *)v307 - 1) = *((_OWORD *)v299 - 1);
              v299 -= 16;
              v307 -= 16;
            }
            while (v299 != v298);
          }
          v913[0] = v306;
          v913[1] = v305;
          v913[2] = &v304[16 * v303];
          if (v298)
            operator delete(v298);
          v308 = (uint64_t *)a1[2];
          if (v308)
          {
            while (1)
            {
              while (1)
              {
LABEL_388:
                v309 = *(_QWORD *)(v308[5] + 160);
                v310 = *((_DWORD *)v308 + 83);
                v311 = *((_DWORD *)v308 + 82);
                if ((v311 & 1) == 0
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 4186, (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsActive>() == true", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v311 & 2) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 4187, (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsPrimary>() == false", 64, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| ((v311 >> 2) & 1) != (v308[41] & 4) >> 2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp",
                       4189,
                       (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsSelfSubmap>() == submap.IsSelfSubmap()",
                       83,
                       (uint64_t)"",
                       0,
                       (void (*)(void **))sub_21023DDB0)
                  || (v311 & 8) != 0
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 4190, (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsLocalized>() == false", 66, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  v913[1] = v305;
                  v913[2] = v301;
                  v913[0] = v306;
                  abort();
                }
                if (v305 >= v301)
                  break;
                *(_QWORD *)v305 = v309;
                *((_DWORD *)v305 + 2) = v310;
                *((_DWORD *)v305 + 3) = v311;
                v305 += 16;
                a1 = v894;
                v308 = (uint64_t *)*v308;
                if (!v308)
                  goto LABEL_415;
              }
              v312 = (v305 - v306) >> 4;
              v313 = v312 + 1;
              if ((unint64_t)(v312 + 1) >> 60)
              {
                v913[1] = v305;
                v913[2] = v301;
                v913[0] = v306;
                sub_20E92CED8();
              }
              if ((v301 - v306) >> 3 > v313)
                v313 = (v301 - v306) >> 3;
              if ((unint64_t)(v301 - v306) >= 0x7FFFFFFFFFFFFFF0)
                v314 = 0xFFFFFFFFFFFFFFFLL;
              else
                v314 = v313;
              if (v314)
              {
                if (v314 >> 60)
                {
                  v913[1] = v305;
                  v913[2] = v301;
                  v913[0] = v306;
                  sub_20E877A38();
                }
                v315 = (char *)operator new(16 * v314);
                v316 = (uint64_t)&v315[16 * v312];
                *(_QWORD *)v316 = v309;
                *(_DWORD *)(v316 + 8) = v310;
                *(_DWORD *)(v316 + 12) = v311;
                if (v305 == v306)
                {
LABEL_413:
                  v318 = (char *)v316;
                  a1 = v894;
                  v301 = &v315[16 * v314];
                  v305 = (char *)(v316 + 16);
                  if (!v306)
                    goto LABEL_410;
                  goto LABEL_409;
                }
              }
              else
              {
                v315 = 0;
                v316 = 16 * v312;
                *(_QWORD *)v316 = v309;
                *(_DWORD *)(v316 + 8) = v310;
                *(_DWORD *)(v316 + 12) = v311;
                if (v305 == v306)
                  goto LABEL_413;
              }
              v317 = v316;
              a1 = v894;
              do
              {
                v318 = (char *)(v317 - 16);
                *(_OWORD *)(v317 - 16) = *((_OWORD *)v305 - 1);
                v305 -= 16;
                v317 -= 16;
              }
              while (v305 != v306);
              v301 = &v315[16 * v314];
              v305 = (char *)(v316 + 16);
              if (!v306)
                goto LABEL_410;
LABEL_409:
              operator delete(v306);
LABEL_410:
              v306 = v318;
              v308 = (uint64_t *)*v308;
              if (!v308)
              {
LABEL_415:
                v913[1] = v305;
                v913[2] = v301;
                v913[0] = v306;
                memset(__p, 0, 24);
                v319 = v305 - v306;
                if (v305 != v306)
                  goto LABEL_416;
LABEL_421:
                v321 = 0;
                v320 = 0;
                LOBYTE(__p[3]) = 1;
                v322 = *(_QWORD *)(v297 + 160);
                if (v322 >= *(_QWORD *)(v297 + 168))
                  goto LABEL_422;
LABEL_418:
                *(_QWORD *)(v322 + 8) = v321;
                *(_QWORD *)(v322 + 16) = 0;
                *(_QWORD *)v322 = v320;
                *(void **)(v322 + 16) = __p[2];
                *(_BYTE *)(v322 + 24) = 1;
                *(_QWORD *)(v297 + 160) = v322 + 32;
                goto LABEL_424;
              }
            }
          }
        }
        v306 = (char *)v913[0];
        memset(__p, 0, 24);
        v319 = (char *)v913[1] - (char *)v913[0];
        if (v913[1] == v913[0])
          goto LABEL_421;
LABEL_416:
        if (v319 < 0)
          sub_20E92CED8();
        v320 = (char *)operator new(v319);
        v321 = &v320[16 * (v319 >> 4)];
        __p[0] = v320;
        __p[2] = v321;
        memcpy(v320, v306, v319);
        __p[1] = v321;
        LOBYTE(__p[3]) = 1;
        v322 = *(_QWORD *)(v297 + 160);
        if (v322 < *(_QWORD *)(v297 + 168))
          goto LABEL_418;
LABEL_422:
        v323 = sub_20F22F210((void **)(v297 + 152), (uint64_t)__p);
        v324 = __p[0];
        *(_QWORD *)(v297 + 160) = v323;
        if (v324)
        {
          __p[1] = v324;
          operator delete(v324);
        }
LABEL_424:
        if (v913[0])
        {
          v913[1] = v913[0];
          operator delete(v913[0]);
        }
      }
    }
    sub_20F23ACC8(a1[9], &v940);
    if (v940.i64[0] == v940.i64[1])
      goto LABEL_636;
    v325 = (_QWORD *)a1[7];
    if (v325[32])
    {
      while (1)
      {
LABEL_502:
        v362 = v325[4];
        v361 = v325[5];
        if (v362 != v361)
        {
          while (!*(_BYTE *)(v362 + 368))
          {
            v362 += 376;
            if (v362 == v361)
              goto LABEL_428;
          }
        }
        if (v362 == v361)
          break;
        v363 = v325[32];
        if (!v363)
          sub_20E86D37C();
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v363 + 48))(v363, v362))
        {
          sub_20F22F948((uint64_t)__p, v362 + 376, v325[5], v362);
          v365 = v364;
          v366 = v325[5];
          if (v366 != v364)
          {
            v367 = v366 - 352;
            do
            {
              while (1)
              {
                if (*(_BYTE *)(v367 + 336) && *(char *)(v367 + 335) < 0)
                  operator delete(*(void **)(v367 + 312));
                if (*(char *)(v367 + 23) < 0)
                  break;
                v368 = v367 - 24;
                v367 -= 376;
                if (v368 == v365)
                  goto LABEL_501;
              }
              operator delete(*(void **)v367);
              v369 = v367 - 24;
              v367 -= 376;
            }
            while (v369 != v365);
          }
LABEL_501:
          v325[5] = v365;
        }
        else
        {
          *(_BYTE *)(v362 + 368) = 0;
          v370 = (__int128 *)(v362 + 376);
          v371 = (__int128 *)v325[5];
          if ((__int128 *)(v362 + 376) != v371)
          {
            sub_20F3105EC((__int128 *)v362, (__int128 *)(v362 + 376));
            v372 = (__int128 *)(v362 + 752);
            if (v372 != v371)
            {
              do
              {
                if ((__int128 *)((char *)v372 - 376) == v370)
                  v370 = v372;
                sub_20F3105EC((__int128 *)((char *)v372 - 376), v372);
                v372 = (__int128 *)((char *)v372 + 376);
              }
              while (v372 != v371);
              v373 = (__int128 *)((char *)v372 - 376);
              if (v373 != v370)
              {
                v374 = v370;
                while (1)
                {
                  sub_20F3105EC(v373, v374);
                  v374 = (__int128 *)((char *)v374 + 376);
                  v375 = (__int128 *)((char *)v373 + 376) == v370;
                  if (v374 == v371)
                  {
                    if ((__int128 *)((char *)v373 + 376) == v370)
                      goto LABEL_502;
                    v374 = (__int128 *)((char *)v370 + 376);
                    v373 += 47;
                    while (1)
                    {
                      sub_20F3105EC((__int128 *)((char *)v373 - 376), v370);
                      v375 = v373 == v370;
                      if (v374 != v371)
                        break;
                      v225 = v373 == v370;
                      v373 = (__int128 *)((char *)v373 + 376);
                      if (v225)
                        goto LABEL_502;
                    }
                  }
                  else
                  {
                    v373 = (__int128 *)((char *)v373 + 376);
                  }
                  if (v375)
                    v370 = v374;
                }
              }
            }
          }
        }
      }
    }
LABEL_428:
    v946 = 0uLL;
    v947 = 0;
    v326 = v940.i64[1];
    v327 = (void **)v940.i64[0];
    v328 = v940.i64[1] - v940.i64[0];
    if (v940.i64[1] == v940.i64[0])
      goto LABEL_636;
    if ((unint64_t)v328 >= 0x1C71C71C71C71C71)
      sub_20E867F44();
    v329 = v328 >> 3;
    v946.i64[0] = (uint64_t)operator new(72 * (v328 >> 3));
    v946.i64[1] = v946.i64[0];
    v947 = (char *)(v946.i64[0] + 72 * v329);
    __srcc = (void *)v326;
    while (1)
    {
      v332 = *v327;
      v333 = a1[10];
      v334 = *(unsigned __int8 *)(v333 + 2500);
      if (!*(_BYTE *)(v333 + 2500))
        break;
      __p[0] = &off_24C9FD498;
      __p[1] = a1;
      __p[2] = v332;
      __p[3] = __p;
      LOBYTE(__p[4]) = 1;
      v336 = (char *)v946.i64[1];
      v335 = v947;
      if (v946.i64[1] >= (unint64_t)v947)
        goto LABEL_441;
LABEL_436:
      a1 = v894;
      *(_QWORD *)v336 = &off_24C9FD408;
      *((_QWORD *)v336 + 1) = v894;
      *((_QWORD *)v336 + 2) = v332;
      *((_QWORD *)v336 + 3) = v336;
      v336[32] = 0;
      v336[64] = 0;
      if (LOBYTE(__p[4]))
      {
        if (__p[3])
        {
          if (__p[3] == __p)
          {
            *((_QWORD *)v336 + 7) = v336 + 32;
            (*((void (**)(void **))__p[0] + 3))(__p);
          }
          else
          {
            *((void **)v336 + 7) = __p[3];
            __p[3] = 0;
          }
        }
        else
        {
          *((_QWORD *)v336 + 7) = 0;
        }
        v336[64] = 1;
      }
      v345 = (uint64_t)(v336 + 72);
LABEL_495:
      v946.i64[1] = v345;
      if (LOBYTE(__p[4]))
      {
        v330 = (void **)__p[3];
        if (__p[3] == __p)
        {
          v330 = __p;
          v331 = 4;
        }
        else
        {
          if (!__p[3])
            goto LABEL_433;
          v331 = 5;
        }
        (*((void (**)(void))*v330 + v331))();
      }
LABEL_433:
      if (++v327 == (void **)v326)
      {
        v376 = (void *)v946.i64[1];
        v377 = v946.i64[0];
        if (v946.i64[0] == v946.i64[1])
          goto LABEL_617;
LABEL_541:
        v380 = (_QWORD *)a1[8];
        v381 = *(void ***)(v377 + 24);
        if (v381)
        {
          if (v381 == (void **)v377)
          {
            v913[3] = v913;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v377 + 24) + 24))(*(_QWORD *)(v377 + 24), v913);
            v381 = (void **)v913[3];
            if (!v913[3])
              goto LABEL_549;
            goto LABEL_547;
          }
          v381 = (void **)(*((uint64_t (**)(void **))*v381 + 2))(v381);
        }
        v913[3] = v381;
        if (!v381)
          goto LABEL_549;
LABEL_547:
        if (v381 == v913)
        {
          __p[3] = __p;
          (*((void (**)(void **, void **))v913[0] + 3))(v913, __p);
LABEL_551:
          LOBYTE(__p[4]) = 1;
          v383 = v380[11];
          v382 = v380[12];
          if (v383 < v382)
          {
            if (__p[3])
            {
              if (__p[3] == __p)
              {
                *(_QWORD *)(v383 + 24) = v383;
                (*(void (**)(void *, unint64_t))(*(_QWORD *)__p[3] + 24))(__p[3], v383);
                v394 = (char)__p[4];
                goto LABEL_572;
              }
              *(void **)(v383 + 24) = __p[3];
              v384 = &__p[3];
            }
            else
            {
              v384 = (void **)(v383 + 24);
            }
            *v384 = 0;
            v394 = 1;
LABEL_572:
            *(_BYTE *)(v383 + 32) = v394;
            v396 = v383 + 40;
            goto LABEL_593;
          }
          v385 = (char *)v380[10];
          v386 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v383 - (_QWORD)v385) >> 3);
          v387 = v386 + 1;
          if (v386 + 1 > 0x666666666666666)
            sub_20E867F44();
          v388 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v382 - (_QWORD)v385) >> 3);
          if (2 * v388 > v387)
            v387 = 2 * v388;
          if (v388 >= 0x333333333333333)
            v389 = 0x666666666666666;
          else
            v389 = v387;
          if (v389)
          {
            if (v389 > 0x666666666666666)
              sub_20E877A38();
            v390 = operator new(40 * v389);
            v391 = (uint64_t)&v390[8 * ((uint64_t)(v383 - (_QWORD)v385) >> 3)];
            v392 = (void **)__p[3];
            if (__p[3])
              goto LABEL_564;
          }
          else
          {
            v390 = 0;
            v391 = 8 * ((uint64_t)(v383 - (_QWORD)v385) >> 3);
            v392 = (void **)__p[3];
            if (__p[3])
            {
LABEL_564:
              if (v392 == __p)
              {
                *(_QWORD *)(v391 + 24) = v391;
                (*((void (**)(void **, uint64_t))__p[0] + 3))(__p, v391);
                v385 = (char *)v380[10];
                v383 = v380[11];
                v395 = (char)__p[4];
                goto LABEL_574;
              }
              *(_QWORD *)(v391 + 24) = v392;
              v393 = &__p[3];
LABEL_570:
              *v393 = 0;
              v395 = 1;
LABEL_574:
              v397 = &v390[40 * v389];
              v390[40 * v386 + 32] = v395;
              v396 = v391 + 40;
              if ((char *)v383 == v385)
              {
                v380[10] = v391;
                v380[11] = v396;
                v380[12] = v397;
                if (!v385)
                  goto LABEL_593;
                goto LABEL_592;
              }
              v398 = 0;
              v399 = v383;
              while (1)
              {
                v401 = v391 + v398;
                v402 = v383 + v398;
                v403 = *(_QWORD *)(v383 + v398 - 16);
                if (v403)
                {
                  if (v402 - 40 == v403)
                  {
                    *(_QWORD *)(v401 - 16) = v401 - 40;
                    (*(void (**)(_QWORD))(**(_QWORD **)(v402 - 16) + 24))(*(_QWORD *)(v402 - 16));
                    goto LABEL_578;
                  }
                  v400 = (_QWORD *)(v399 - 16);
                  *(_QWORD *)(v401 - 16) = v403;
                }
                else
                {
                  v400 = (_QWORD *)(v401 - 16);
                }
                *v400 = 0;
LABEL_578:
                v399 -= 40;
                *(_BYTE *)(v391 + v398 - 8) = *(_BYTE *)(v383 + v398 - 8);
                v398 -= 40;
                if ((char *)(v383 + v398) == v385)
                {
                  v385 = (char *)v380[10];
                  v404 = (char *)v380[11];
                  v380[10] = v391 + v398;
                  v380[11] = v396;
                  v380[12] = v397;
                  if (v404 != v385)
                  {
                    while (2)
                    {
                      v407 = v404 - 40;
                      v405 = (char *)*((_QWORD *)v404 - 2);
                      if (v404 - 40 == v405)
                      {
                        v405 = v404 - 40;
                        v406 = 4;
                        goto LABEL_586;
                      }
                      if (v405)
                      {
                        v406 = 5;
LABEL_586:
                        (*(void (**)(void))(*(_QWORD *)v405 + 8 * v406))();
                      }
                      v404 = v407;
                      if (v407 != v385)
                        continue;
                      break;
                    }
                    if (v385)
                      goto LABEL_592;
LABEL_593:
                    v380[11] = v396;
                    v408 = (void **)__p[3];
                    if (__p[3] == __p)
                    {
                      v408 = __p;
                      v409 = 4;
                      a1 = v894;
LABEL_597:
                      (*((void (**)(void))*v408 + v409))();
                    }
                    else
                    {
                      a1 = v894;
                      if (__p[3])
                      {
                        v409 = 5;
                        goto LABEL_597;
                      }
                    }
                    v410 = (void **)v913[3];
                    if (v913[3] == v913)
                    {
                      v410 = v913;
                      v411 = 4;
LABEL_602:
                      (*((void (**)(void))*v410 + v411))();
                    }
                    else if (v913[3])
                    {
                      v411 = 5;
                      goto LABEL_602;
                    }
                    if (*(_BYTE *)(v377 + 64))
                    {
                      v412 = a1[8];
                      v413 = *(void **)(v377 + 56);
                      if (!v413)
                        goto LABEL_607;
                      if (v413 == (void *)(v377 + 32))
                      {
                        __p[3] = __p;
                        (*(void (**)(uint64_t, void **))(*(_QWORD *)(v377 + 32) + 24))(v377 + 32, __p);
                      }
                      else
                      {
                        v413 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v413 + 16))(v413);
LABEL_607:
                        __p[3] = v413;
                      }
                      sub_20F2F7080((_QWORD *)(v412 + 8), __p);
                      v378 = (void **)__p[3];
                      if (__p[3] == __p)
                      {
                        v378 = __p;
                        v379 = 4;
                        goto LABEL_539;
                      }
                      if (__p[3])
                      {
                        v379 = 5;
LABEL_539:
                        (*((void (**)(void))*v378 + v379))();
                      }
                    }
                    v377 += 72;
                    if ((void *)v377 != v376)
                      goto LABEL_541;
                    v376 = (void *)v946.i64[0];
LABEL_617:
                    if (!v376)
                    {
LABEL_636:
                      kdebug_trace();
                      if (v940.i64[0])
                      {
                        v940.i64[1] = v940.i64[0];
                        operator delete((void *)v940.i64[0]);
                      }
                      v421 = (void **)v900;
                      if (v900)
                      {
                        v422 = (void **)v901;
                        v423 = v900;
                        if ((void *)v901 != v900)
                        {
                          do
                          {
                            if (*((char *)v422 - 1) < 0)
                              operator delete(*(v422 - 3));
                            v422 -= 3;
                          }
                          while (v422 != v421);
                          v423 = v900;
                        }
                        v901 = (uint64_t)v421;
                        operator delete(v423);
                      }
                      goto LABEL_646;
                    }
                    v414 = v946.i64[1];
                    v415 = v376;
                    if ((void *)v946.i64[1] == v376)
                    {
LABEL_635:
                      v946.i64[1] = (uint64_t)v376;
                      operator delete(v415);
                      goto LABEL_636;
                    }
                    while (2)
                    {
                      if (*(_BYTE *)(v414 - 8))
                      {
                        v418 = *(_QWORD **)(v414 - 16);
                        if ((_QWORD *)(v414 - 40) == v418)
                        {
                          v418 = (_QWORD *)(v414 - 40);
                          v419 = 4;
LABEL_630:
                          (*(void (**)(void))(*v418 + 8 * v419))();
                        }
                        else if (v418)
                        {
                          v419 = 5;
                          goto LABEL_630;
                        }
                      }
                      v420 = (void *)(v414 - 72);
                      v416 = *(_QWORD **)(v414 - 48);
                      if ((_QWORD *)(v414 - 72) != v416)
                      {
                        if (v416)
                        {
                          v417 = 5;
LABEL_623:
                          (*(void (**)(void))(*v416 + 8 * v417))();
                        }
                        v414 -= 72;
                        if (v420 == v376)
                        {
                          v415 = (void *)v946.i64[0];
                          goto LABEL_635;
                        }
                        continue;
                      }
                      break;
                    }
                    v416 = (_QWORD *)(v414 - 72);
                    v417 = 4;
                    goto LABEL_623;
                  }
                  if (!v385)
                    goto LABEL_593;
LABEL_592:
                  operator delete(v385);
                  goto LABEL_593;
                }
              }
            }
          }
          v393 = (void **)(v391 + 24);
          goto LABEL_570;
        }
        v381 = (void **)(*((uint64_t (**)(void **))*v381 + 2))(v381);
LABEL_549:
        __p[3] = v381;
        goto LABEL_551;
      }
    }
    LOBYTE(__p[0]) = 0;
    LOBYTE(__p[4]) = 0;
    v336 = (char *)v946.i64[1];
    v335 = v947;
    if (v946.i64[1] < (unint64_t)v947)
      goto LABEL_436;
LABEL_441:
    v337 = (char *)v946.i64[0];
    v338 = 0x8E38E38E38E38E39 * ((uint64_t)&v336[-v946.i64[0]] >> 3);
    v339 = v338 + 1;
    if (v338 + 1 > 0x38E38E38E38E38ELL)
      sub_20E867F44();
    v340 = 0x8E38E38E38E38E39 * ((uint64_t)&v335[-v946.i64[0]] >> 3);
    if (2 * v340 > v339)
      v339 = 2 * v340;
    if (v340 >= 0x1C71C71C71C71C7)
      v341 = 0x38E38E38E38E38ELL;
    else
      v341 = v339;
    if (v341)
    {
      if (v341 > 0x38E38E38E38E38ELL)
        sub_20E877A38();
      v342 = operator new(72 * v341);
    }
    else
    {
      v342 = 0;
    }
    v343 = (char *)&v342[9 * v338];
    *(_QWORD *)v343 = &off_24C9FD408;
    *((_QWORD *)v343 + 1) = v894;
    *((_QWORD *)v343 + 2) = v332;
    *((_QWORD *)v343 + 3) = v343;
    v343[32] = 0;
    v343[64] = 0;
    if (v334)
    {
      if (__p[3])
      {
        v344 = &v342[9 * v338 + 7];
        if (__p[3] == __p)
        {
          *v344 = v343 + 32;
          (*((void (**)(void **))__p[0] + 3))(__p);
          v336 = (char *)v946.i64[1];
          v337 = (char *)v946.i64[0];
        }
        else
        {
          *v344 = __p[3];
          __p[3] = 0;
        }
      }
      else
      {
        v342[9 * v338 + 7] = 0;
      }
      v343[64] = 1;
    }
    v346 = (char *)&v342[9 * v341];
    v345 = (uint64_t)(v343 + 72);
    if (v336 == v337)
    {
      v946.i64[0] = (uint64_t)v343;
      v946.i64[1] = (uint64_t)(v343 + 72);
      v947 = v346;
      a1 = v894;
LABEL_492:
      if (!v337)
        goto LABEL_494;
    }
    else
    {
      v347 = 0;
      v348 = v336;
      do
      {
        v349 = &v343[v347];
        v350 = &v336[v347];
        v351 = *(char **)&v336[v347 - 48];
        if (v351)
        {
          if (v350 - 72 == v351)
          {
            *((_QWORD *)v349 - 6) = v349 - 72;
            (*(void (**)(_QWORD))(**((_QWORD **)v350 - 6) + 24))(*((_QWORD *)v350 - 6));
          }
          else
          {
            *((_QWORD *)v349 - 6) = v351;
            *((_QWORD *)v348 - 6) = 0;
          }
        }
        else
        {
          *((_QWORD *)v349 - 6) = 0;
        }
        v343[v347 - 40] = 0;
        v352 = &v336[v347];
        v343[v347 - 8] = 0;
        if (v336[v347 - 8])
        {
          v353 = (char *)*((_QWORD *)v352 - 2);
          if (v353)
          {
            v354 = &v343[v347];
            if (v352 - 40 == v353)
            {
              *((_QWORD *)v354 - 2) = &v343[v347 - 40];
              (*(void (**)(_QWORD))(**((_QWORD **)v352 - 2) + 24))(*((_QWORD *)v352 - 2));
            }
            else
            {
              *((_QWORD *)v354 - 2) = v353;
              *((_QWORD *)v348 - 2) = 0;
            }
          }
          else
          {
            *(_QWORD *)&v343[v347 - 16] = 0;
          }
          v343[v347 - 8] = 1;
        }
        v348 -= 72;
        v347 -= 72;
      }
      while (&v336[v347] != v337);
      v355 = (char *)v946.i64[1];
      v337 = (char *)v946.i64[0];
      v946.i64[0] = (uint64_t)&v343[v347];
      v946.i64[1] = (uint64_t)(v343 + 72);
      v947 = v346;
      if (v355 != v337)
      {
        a1 = v894;
        while (1)
        {
          if (!*(v355 - 8))
            goto LABEL_488;
          v358 = (char *)*((_QWORD *)v355 - 2);
          if (v355 - 40 == v358)
          {
            v358 = v355 - 40;
            v359 = 4;
          }
          else
          {
            if (!v358)
              goto LABEL_488;
            v359 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v358 + 8 * v359))();
LABEL_488:
          v360 = v355 - 72;
          v356 = (char *)*((_QWORD *)v355 - 6);
          if (v355 - 72 == v356)
          {
            v356 = v355 - 72;
            v357 = 4;
          }
          else
          {
            if (!v356)
              goto LABEL_481;
            v357 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v356 + 8 * v357))();
LABEL_481:
          v355 -= 72;
          if (v360 == v337)
            goto LABEL_492;
        }
      }
      a1 = v894;
      if (!v337)
      {
LABEL_494:
        v326 = (uint64_t)__srcc;
        goto LABEL_495;
      }
    }
    operator delete(v337);
    goto LABEL_494;
  }
LABEL_646:
  v424 = (_QWORD *)a1[8];
  if (!v424)
    goto LABEL_1546;
  v426 = v424[1];
  v425 = v424[2];
  __dst = (_QWORD *)a1[8];
  if (v426 != v425)
  {
    while (!*(_BYTE *)(v426 + 992))
    {
      v426 += 1000;
      if (v426 == v425)
        goto LABEL_951;
    }
  }
  if (v426 != v425)
  {
    *(_OWORD *)v898 = 0u;
    *(_OWORD *)v899 = 0u;
    *(_DWORD *)&v899[16] = 733222324;
    kdebug_trace();
    if (!v424[28])
    {
LABEL_945:
      v568 = v426 + 1000;
      v569 = v424[2];
      if (v426 + 1000 != v569)
      {
        do
        {
          sub_20F310360((char **)(v568 - 1000), v568);
          *(_BYTE *)(v568 - 8) = *(_BYTE *)(v568 + 992);
          v568 += 1000;
        }
        while (v568 != v569);
        v426 = v568 - 1000;
        v568 = v424[2];
      }
      while (v568 != v426)
      {
        v568 -= 1000;
        sub_20E9549C4((char **)v568);
      }
      v424[2] = v426;
      kdebug_trace();
      goto LABEL_951;
    }
    v919[1] = 0;
    v919[0] = 0;
    bzero(&v913[1], 0x368uLL);
    v918 = v919;
    BYTE4(v922) = 0;
    v920 = 0uLL;
    *(_QWORD *)&v921 = 0;
    BYTE8(v921) = 0;
    sub_20F4636E0(v426, (uint64_t)__p);
    sub_20E941D88((uint64_t)&v913[1], (uint64_t)&__p[1]);
    v920 = v937;
    v921 = v938;
    v922 = v939;
    sub_20E86872C((uint64_t)&v935, v936[0]);
    if (v932)
    {
      v933 = v932;
      operator delete(v932);
    }
    if (v929)
    {
      *(_QWORD *)&v930 = v929;
      operator delete(v929);
    }
    if (__p[4])
    {
      __p[5] = __p[4];
      operator delete(__p[4]);
    }
    v427 = __p[1];
    if (__p[1])
    {
      v428 = __p[2];
      v429 = __p[1];
      if (__p[2] != __p[1])
      {
        do
        {
          v428 -= 89;
          sub_20E9385B0(v428);
        }
        while (v428 != v427);
        v429 = __p[1];
      }
      __p[2] = v427;
      operator delete(v429);
    }
    v430 = (uint64_t *)__dst[29];
    if (v430)
      sub_20F467994(v430, v913);
    v950 = 0uLL;
    v951 = 0;
    v431 = MEMORY[0x24BEDB870];
    v432 = MEMORY[0x24BEDB870] + 64;
    v433 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v434 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v911[0] = MEMORY[0x24BEDB870] + 64;
    v900 = v433;
    *(void **)((char *)&v900 + *((_QWORD *)v433 - 3)) = v434;
    v435 = (std::ios_base *)((char *)&v900 + *((_QWORD *)v900 - 3));
    std::ios_base::init(v435, &v901);
    v435[1].__vftable = 0;
    v435[1].__fmtflags_ = -1;
    v900 = (void *)(v431 + 24);
    v911[0] = v432;
    std::streambuf::basic_streambuf();
    v901 = MEMORY[0x24BEDB848] + 16;
    v908 = 0u;
    v909 = 0u;
    v910 = 16;
    v940.i64[0] = (uint64_t)&off_24C9B7040;
    v940.i64[1] = 1;
    v941 = (char *)&unk_24C9B7190;
    v436 = operator new();
    *(_QWORD *)v436 = &v900;
    *(_QWORD *)(v436 + 8) = &v900;
    *(_BYTE *)(v436 + 16) = 0;
    *(_BYTE *)(v436 + 40) = 0;
    *(_BYTE *)(v436 + 48) = 0;
    *(_BYTE *)(v436 + 72) = 0;
    *(_QWORD *)(v436 + 88) = 0;
    *(_QWORD *)(v436 + 96) = 0;
    *(_QWORD *)(v436 + 80) = 0;
    v942 = v436;
    v940.i64[0] = (uint64_t)&off_24C9B4468;
    v941 = (char *)&unk_24C9B45B8;
    v437 = HIBYTE(v951);
    if (v951 < 0)
      v437 = *((_QWORD *)&v950 + 1);
    if (v437 && (sub_20E9F5254((uint64_t)__p, v436 + 8, (uint64_t)&v950), *(_BYTE *)(v942 + 40)))
    {
      __p[0] = (void *)(v942 + 16);
      sub_20E9F3D4C((uint64_t **)__p, 2u);
    }
    else
    {
      LOBYTE(__p[0]) = 2;
      std::ostream::write();
    }
    sub_20E9EE95C(v942);
    sub_20E941218((uint64_t)&__p[1], (uint64_t)&v913[1]);
    v937 = v920;
    v938 = v921;
    v939 = v922;
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F3D4C((uint64_t **)&v944, 1u);
    }
    else
    {
      LOBYTE(v944) = 1;
      std::ostream::write();
    }
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F472C((uint64_t **)&v944, 0xF47E8FD1FA3F47E9 * (((char *)__p[2] - (char *)__p[1]) >> 3));
    }
    else
    {
      sub_20E9F4A34();
    }
    v438 = (char *)__p[1];
    __srcd = (char *)__p[2];
    if (__p[2] != __p[1])
    {
      while (1)
      {
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, 1u);
        }
        else
        {
          LOBYTE(v944) = 1;
          std::ostream::write();
        }
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, 5u);
        }
        else
        {
          LOBYTE(v944) = 5;
          std::ostream::write();
        }
        sub_20EAD6E78((uint64_t)&v940, (uint64_t)(v438 + 8), 5u);
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, 2u);
        }
        else
        {
          LOBYTE(v944) = 2;
          std::ostream::write();
        }
        sub_20E9EE95C(v942);
        v439 = v942;
        if (*(_BYTE *)(v942 + 40))
        {
          v440 = (unsigned int *)(v438 + 176);
          v441 = *(_QWORD *)(v942 + 16);
          do
          {
            v444 = *v440;
            v445 = *(_QWORD *)(v439 + 32);
            if ((unint64_t)(v445 - v441) >= 5)
            {
              v442 = *(char **)(v439 + 24);
            }
            else
            {
              if (v445)
                v446 = 2 * v445;
              else
                v446 = 0x2000;
              v447 = v441 + 5;
              while (v446 < v447)
              {
                v448 = (uint64_t)v446 <= 0;
                v446 *= 2;
                if (v448)
                {
                  v446 = v447;
                  break;
                }
              }
              v442 = (char *)malloc_type_realloc(*(void **)(v439 + 24), v446, 0xAD6A59EEuLL);
              if (!v442)
              {
LABEL_1560:
                exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v883 = std::bad_alloc::bad_alloc(exception);
                __cxa_throw(v883, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
              }
              *(_QWORD *)(v439 + 24) = v442;
              *(_QWORD *)(v439 + 32) = v446;
              v441 = *(_QWORD *)(v439 + 16);
            }
            v443 = &v442[v441];
            *v443 = -54;
            *(_DWORD *)(v443 + 1) = bswap32(v444);
            v441 = *(_QWORD *)(v439 + 16) + 5;
            *(_QWORD *)(v439 + 16) = v441;
            ++v440;
          }
          while (v440 != (unsigned int *)(v438 + 688));
        }
        else
        {
          for (n = 176; n != 688; n += 4)
          {
            v450 = *(_DWORD *)&v438[n];
            LOBYTE(v944) = -54;
            *(_DWORD *)((char *)&v944 + 1) = bswap32(v450);
            std::ostream::write();
          }
        }
        v451 = v942;
        v452 = *(_QWORD *)(*(_QWORD *)(v942 + 88) - 8);
        v453 = (size_t *)(v942 + 48);
        sub_20E9EE4D0((uint64_t *)(v942 + 48), *(_QWORD *)(v942 + 16) - v452 - 9);
        if (*v453)
          memmove((void *)(*(_QWORD *)(v451 + 24) + v452), *(const void **)(v451 + 56), *v453);
        *(_QWORD *)(v451 + 48) = 0;
        v454 = *(_QWORD *)(v451 + 80);
        v455 = *(_QWORD *)(v451 + 88) - 8;
        *(_QWORD *)(v451 + 88) = v455;
        if (v454 == v455)
        {
          std::ostream::write();
          if (*(_BYTE *)(v451 + 40))
          {
            free(*(void **)(v451 + 24));
            *(_BYTE *)(v451 + 40) = 0;
          }
        }
        v456 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v438 + 87) - *((_QWORD *)v438 + 86)) >> 3);
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F472C((uint64_t **)&v944, v456);
        }
        else
        {
          sub_20E9F4A34();
        }
        v457 = *((_QWORD *)v438 + 86);
        v458 = *((_QWORD *)v438 + 87) - v457;
        if (v458)
          break;
LABEL_680:
        v438 += 712;
        if (v438 == __srcd)
          goto LABEL_753;
      }
      v459 = (unsigned int *)(v457 + 16);
      v460 = 24 * (v458 / 24);
      while (1)
      {
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, 1u);
        }
        else
        {
          LOBYTE(v944) = 1;
          std::ostream::write();
        }
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, *(v459 - 4));
        }
        else
        {
          v462 = *(v459 - 4);
          if (v462 > 0xFF)
          {
            v464 = HIWORD(v462);
            v465 = bswap32(v462);
            if (v464)
            {
              LOBYTE(v944) = -50;
              *(_DWORD *)((char *)&v944 + 1) = v465;
            }
            else
            {
              LOBYTE(v944) = -51;
              *(_WORD *)((char *)&v944 + 1) = HIWORD(v465);
            }
          }
          else if (v462 > 0x7F)
          {
            LOBYTE(v944) = -52;
            BYTE1(v944) = v462;
          }
          else
          {
            LOBYTE(v944) = *(v459 - 4);
          }
          std::ostream::write();
        }
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F472C((uint64_t **)&v944, *((_QWORD *)v459 - 1));
        }
        else
        {
          v463 = *((_QWORD *)v459 - 1);
          if (v463 > 0xFF)
          {
            if (!(v463 >> 16))
            {
              LOBYTE(v944) = -51;
              *(_WORD *)((char *)&v944 + 1) = bswap32(v463) >> 16;
              std::ostream::write();
              goto LABEL_726;
            }
            if (HIDWORD(v463))
            {
              LOBYTE(v944) = -49;
              *(_QWORD *)((char *)&v944 + 1) = bswap64(v463);
            }
            else
            {
              LOBYTE(v944) = -50;
              *(_DWORD *)((char *)&v944 + 1) = bswap32(v463);
            }
          }
          else if (v463 > 0x7F)
          {
            LOBYTE(v944) = -52;
            BYTE1(v944) = v463;
          }
          else
          {
            LOBYTE(v944) = *((_QWORD *)v459 - 1);
          }
          std::ostream::write();
        }
LABEL_726:
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, *v459);
        }
        else
        {
          v461 = *v459;
          if (*v459 > 0xFF)
          {
            v466 = HIWORD(v461);
            v467 = bswap32(v461);
            if (v466)
            {
              LOBYTE(v944) = -50;
              *(_DWORD *)((char *)&v944 + 1) = v467;
            }
            else
            {
              LOBYTE(v944) = -51;
              *(_WORD *)((char *)&v944 + 1) = HIWORD(v467);
            }
          }
          else if (v461 > 0x7F)
          {
            LOBYTE(v944) = -52;
            BYTE1(v944) = v461;
          }
          else
          {
            LOBYTE(v944) = *v459;
          }
          std::ostream::write();
        }
        v459 += 6;
        v460 -= 24;
        if (!v460)
          goto LABEL_680;
      }
    }
LABEL_753:
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F472C((uint64_t **)&v944, 0xEEEEEEEEEEEEEEEFLL * (((char *)__p[5] - (char *)__p[4]) >> 3));
    }
    else
    {
      sub_20E9F4A34();
    }
    v468 = __p[4];
    if (__p[5] != __p[4])
    {
      v469 = 0;
      v470 = 120 * (((char *)__p[5] - (char *)__p[4]) / 120);
      do
      {
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, 1u);
        }
        else
        {
          LOBYTE(v944) = 1;
          std::ostream::write();
        }
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F472C((uint64_t **)&v944, *(_QWORD *)&v468[v469]);
        }
        else
        {
          sub_20E9F4A34();
        }
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, *(_DWORD *)&v468[v469 + 8]);
        }
        else
        {
          sub_20E9F3FC0((uint64_t)&v944, v942 + 8);
        }
        v471 = (unint64_t *)&v468[v469 + 16];
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, v471);
          sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 24]);
          sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 32]);
        }
        else
        {
          v472 = *v471;
          LOBYTE(v944) = -53;
          *(_QWORD *)((char *)&v944 + 1) = bswap64(v472);
          std::ostream::write();
          v473 = *(_QWORD *)&v468[v469 + 24];
          LOBYTE(v944) = -53;
          *(_QWORD *)((char *)&v944 + 1) = bswap64(v473);
          std::ostream::write();
          v474 = *(_QWORD *)&v468[v469 + 32];
          LOBYTE(v944) = -53;
          *(_QWORD *)((char *)&v944 + 1) = bswap64(v474);
          std::ostream::write();
        }
        if (v468[v469 + 112])
        {
          if (*(_BYTE *)(v942 + 40))
          {
            *(_QWORD *)&v944 = v942 + 16;
            sub_20E9F3164((uint64_t **)&v944, 1);
          }
          else
          {
            LOBYTE(v944) = 1;
            std::ostream::write();
          }
          v475 = (unint64_t *)&v468[v469 + 40];
          if (*(_BYTE *)(v942 + 40))
          {
            *(_QWORD *)&v944 = v942 + 16;
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, v475);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 48]);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 56]);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 64]);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 72]);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 80]);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 88]);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 96]);
            sub_20E9F4C08((uint64_t)&v895, (uint64_t **)&v944, (unint64_t *)&v468[v469 + 104]);
          }
          else
          {
            v476 = *v475;
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v476);
            std::ostream::write();
            v477 = *(_QWORD *)&v468[v469 + 48];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v477);
            std::ostream::write();
            v478 = *(_QWORD *)&v468[v469 + 56];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v478);
            std::ostream::write();
            v479 = *(_QWORD *)&v468[v469 + 64];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v479);
            std::ostream::write();
            v480 = *(_QWORD *)&v468[v469 + 72];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v480);
            std::ostream::write();
            v481 = *(_QWORD *)&v468[v469 + 80];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v481);
            std::ostream::write();
            v482 = *(_QWORD *)&v468[v469 + 88];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v482);
            std::ostream::write();
            v483 = *(_QWORD *)&v468[v469 + 96];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v483);
            std::ostream::write();
            v484 = *(_QWORD *)&v468[v469 + 104];
            LOBYTE(v944) = -53;
            *(_QWORD *)((char *)&v944 + 1) = bswap64(v484);
            std::ostream::write();
          }
        }
        else if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3164((uint64_t **)&v944, 0);
        }
        else
        {
          LOBYTE(v944) = 0;
          std::ostream::write();
        }
        v469 += 120;
      }
      while (v470 != v469);
    }
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F3D4C((uint64_t **)&v944, 3u);
    }
    else
    {
      LOBYTE(v944) = 3;
      std::ostream::write();
    }
    sub_20EAD5EAC((uint64_t)&v940, (uint64_t)&__p[7], 3u);
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F472C((uint64_t **)&v944, 0xCBEEA4E1A08AD8F3 * ((v933 - (_BYTE *)v932) >> 3));
    }
    else
    {
      sub_20E9F4A34();
    }
    v485 = (char *)v932;
    if (v933 != v932)
    {
      v486 = 472 * ((v933 - (_BYTE *)v932) / 472);
      do
      {
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, 4u);
        }
        else
        {
          LOBYTE(v944) = 4;
          std::ostream::write();
        }
        sub_20E9EE95C(v942);
        sub_20EAD0214((uint64_t)&v940, (uint64_t)v485, 4u);
        v487 = v942;
        v488 = *(_QWORD *)(*(_QWORD *)(v942 + 88) - 8);
        v489 = (size_t *)(v942 + 48);
        sub_20E9EE4D0((uint64_t *)(v942 + 48), *(_QWORD *)(v942 + 16) - v488 - 9);
        if (*v489)
          memmove((void *)(*(_QWORD *)(v487 + 24) + v488), *(const void **)(v487 + 56), *v489);
        *(_QWORD *)(v487 + 48) = 0;
        v490 = *(_QWORD *)(v487 + 80);
        v491 = *(_QWORD *)(v487 + 88) - 8;
        *(_QWORD *)(v487 + 88) = v491;
        if (v490 == v491)
        {
          std::ostream::write();
          if (*(_BYTE *)(v487 + 40))
          {
            free(*(void **)(v487 + 24));
            *(_BYTE *)(v487 + 40) = 0;
          }
        }
        v485 += 472;
        v486 -= 472;
      }
      while (v486);
    }
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F472C((uint64_t **)&v944, v934);
    }
    else
    {
      sub_20E9F4A34();
    }
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F472C((uint64_t **)&v944, (unint64_t)v936[1]);
    }
    else
    {
      sub_20E9F4A34();
    }
    v492 = v935;
    if (v935 != v936)
    {
      do
      {
        if (*(_BYTE *)(v942 + 40))
        {
          *(_QWORD *)&v944 = v942 + 16;
          sub_20E9F3D4C((uint64_t **)&v944, *((_DWORD *)v492 + 8));
        }
        else
        {
          sub_20E9F3FC0((uint64_t)&v944, v942 + 8);
        }
        v493 = (unint64_t *)(v492 + 5);
        v494 = v942;
        if (*(_BYTE *)(v942 + 40))
        {
          v495 = *(_QWORD *)(v942 + 16);
          while (1)
          {
            v498 = *v493;
            v499 = *(_QWORD *)(v494 + 32);
            if ((unint64_t)(v499 - v495) >= 9)
            {
              v496 = *(char **)(v494 + 24);
            }
            else
            {
              if (v499)
                v500 = 2 * v499;
              else
                v500 = 0x2000;
              v501 = v495 + 9;
              while (v500 < v501)
              {
                v448 = (uint64_t)v500 <= 0;
                v500 *= 2;
                if (v448)
                {
                  v500 = v501;
                  break;
                }
              }
              v496 = (char *)malloc_type_realloc(*(void **)(v494 + 24), v500, 0xAD6A59EEuLL);
              if (!v496)
                goto LABEL_1560;
              *(_QWORD *)(v494 + 24) = v496;
              *(_QWORD *)(v494 + 32) = v500;
              v495 = *(_QWORD *)(v494 + 16);
            }
            v497 = &v496[v495];
            *v497 = -53;
            *(_QWORD *)(v497 + 1) = bswap64(v498);
            v495 = *(_QWORD *)(v494 + 16) + 9;
            *(_QWORD *)(v494 + 16) = v495;
            if (++v493 == (unint64_t *)(v492 + 14))
              goto LABEL_826;
          }
        }
        v502 = *v493;
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v502);
        std::ostream::write();
        v503 = (unint64_t)v492[6];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v503);
        std::ostream::write();
        v504 = (unint64_t)v492[7];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v504);
        std::ostream::write();
        v505 = (unint64_t)v492[8];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v505);
        std::ostream::write();
        v506 = (unint64_t)v492[9];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v506);
        std::ostream::write();
        v507 = (unint64_t)v492[10];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v507);
        std::ostream::write();
        v508 = (unint64_t)v492[11];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v508);
        std::ostream::write();
        v509 = (unint64_t)v492[12];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v509);
        std::ostream::write();
        v510 = (unint64_t)v492[13];
        LOBYTE(v944) = -53;
        *(_QWORD *)((char *)&v944 + 1) = bswap64(v510);
        std::ostream::write();
LABEL_826:
        v511 = v942;
        if (*(_BYTE *)(v942 + 40))
        {
          v512 = (unint64_t)v492[14];
          v513 = *(_QWORD *)(v942 + 32);
          v514 = *(_QWORD *)(v942 + 16);
          if ((unint64_t)(v513 - v514) >= 9)
          {
            v517 = *(char **)(v942 + 24);
          }
          else
          {
            if (v513)
              v515 = 2 * v513;
            else
              v515 = 0x2000;
            v516 = v514 + 9;
            while (v515 < v516)
            {
              v448 = (uint64_t)v515 <= 0;
              v515 *= 2;
              if (v448)
              {
                v515 = v516;
                break;
              }
            }
            v517 = (char *)malloc_type_realloc(*(void **)(v942 + 24), v515, 0xAD6A59EEuLL);
            if (!v517)
              goto LABEL_1560;
            *(_QWORD *)(v511 + 24) = v517;
            *(_QWORD *)(v511 + 32) = v515;
            v514 = *(_QWORD *)(v511 + 16);
          }
          v522 = &v517[v514];
          *v522 = -53;
          *(_QWORD *)(v522 + 1) = bswap64(v512);
          v523 = *(_QWORD *)(v511 + 16);
          v524 = v523 + 9;
          *(_QWORD *)(v511 + 16) = v523 + 9;
          v525 = (unint64_t)v492[15];
          v526 = *(_QWORD *)(v511 + 32);
          if ((unint64_t)(v526 - (v523 + 9)) >= 9)
          {
            v528 = *(char **)(v511 + 24);
          }
          else
          {
            if (v526)
              v527 = 2 * v526;
            else
              v527 = 0x2000;
            while (v527 < v523 + 18)
            {
              v448 = (uint64_t)v527 <= 0;
              v527 *= 2;
              if (v448)
              {
                v527 = v523 + 18;
                break;
              }
            }
            v528 = (char *)malloc_type_realloc(*(void **)(v511 + 24), v527, 0xAD6A59EEuLL);
            if (!v528)
              goto LABEL_1560;
            *(_QWORD *)(v511 + 24) = v528;
            *(_QWORD *)(v511 + 32) = v527;
            v524 = *(_QWORD *)(v511 + 16);
          }
          v529 = &v528[v524];
          *v529 = -53;
          *(_QWORD *)(v529 + 1) = bswap64(v525);
          v530 = *(_QWORD *)(v511 + 16);
          v531 = v530 + 9;
          *(_QWORD *)(v511 + 16) = v530 + 9;
          v532 = (unint64_t)v492[16];
          v533 = *(_QWORD *)(v511 + 32);
          if ((unint64_t)(v533 - (v530 + 9)) >= 9)
          {
            v535 = *(char **)(v511 + 24);
          }
          else
          {
            if (v533)
              v534 = 2 * v533;
            else
              v534 = 0x2000;
            while (v534 < v530 + 18)
            {
              v448 = (uint64_t)v534 <= 0;
              v534 *= 2;
              if (v448)
              {
                v534 = v530 + 18;
                break;
              }
            }
            v535 = (char *)malloc_type_realloc(*(void **)(v511 + 24), v534, 0xAD6A59EEuLL);
            if (!v535)
              goto LABEL_1560;
            *(_QWORD *)(v511 + 24) = v535;
            *(_QWORD *)(v511 + 32) = v534;
            v531 = *(_QWORD *)(v511 + 16);
          }
          v536 = &v535[v531];
          *v536 = -53;
          *(_QWORD *)(v536 + 1) = bswap64(v532);
          *(_QWORD *)(v511 + 16) += 9;
          v521 = v492[1];
          if (!v521)
          {
            do
            {
LABEL_866:
              v537 = (_QWORD **)v492[2];
              v225 = *v537 == v492;
              v492 = v537;
            }
            while (!v225);
            goto LABEL_806;
          }
        }
        else
        {
          v518 = (unint64_t)v492[14];
          LOBYTE(v944) = -53;
          *(_QWORD *)((char *)&v944 + 1) = bswap64(v518);
          std::ostream::write();
          v519 = (unint64_t)v492[15];
          LOBYTE(v944) = -53;
          *(_QWORD *)((char *)&v944 + 1) = bswap64(v519);
          std::ostream::write();
          v520 = (unint64_t)v492[16];
          LOBYTE(v944) = -53;
          *(_QWORD *)((char *)&v944 + 1) = bswap64(v520);
          std::ostream::write();
          v521 = v492[1];
          if (!v521)
            goto LABEL_866;
        }
        do
        {
          v537 = (_QWORD **)v521;
          v521 = (_QWORD *)*v521;
        }
        while (v521);
LABEL_806:
        v492 = v537;
      }
      while (v537 != v936);
    }
    if (*(_BYTE *)(v942 + 40))
    {
      *(_QWORD *)&v944 = v942 + 16;
      sub_20E9F3D4C((uint64_t **)&v944, 1u);
    }
    else
    {
      LOBYTE(v944) = 1;
      std::ostream::write();
    }
    v424 = __dst;
    sub_20E9EE95C(v942);
    sub_20EADAE9C((uint64_t)&v940, (uint64_t)&v937);
    v538 = v942;
    v539 = *(_QWORD *)(*(_QWORD *)(v942 + 88) - 8);
    v540 = (size_t *)(v942 + 48);
    sub_20E9EE4D0((uint64_t *)(v942 + 48), *(_QWORD *)(v942 + 16) - v539 - 9);
    if (*v540)
      memmove((void *)(*(_QWORD *)(v538 + 24) + v539), *(const void **)(v538 + 56), *v540);
    *(_QWORD *)(v538 + 48) = 0;
    v541 = *(_QWORD *)(v538 + 80);
    v542 = *(_QWORD *)(v538 + 88) - 8;
    *(_QWORD *)(v538 + 88) = v542;
    if (v541 == v542)
    {
      std::ostream::write();
      if (*(_BYTE *)(v538 + 40))
      {
        free(*(void **)(v538 + 24));
        *(_BYTE *)(v538 + 40) = 0;
      }
    }
    sub_20E86872C((uint64_t)&v935, v936[0]);
    if (v932)
    {
      v933 = v932;
      operator delete(v932);
    }
    if (v929)
    {
      *(_QWORD *)&v930 = v929;
      operator delete(v929);
    }
    if (__p[4])
    {
      __p[5] = __p[4];
      operator delete(__p[4]);
    }
    v543 = __p[1];
    if (__p[1])
    {
      v544 = __p[2];
      v545 = __p[1];
      if (__p[2] != __p[1])
      {
        do
        {
          v544 -= 89;
          sub_20E9385B0(v544);
        }
        while (v544 != v543);
        v545 = __p[1];
      }
      __p[2] = v543;
      operator delete(v545);
    }
    v546 = v942;
    v547 = *(_QWORD *)(*(_QWORD *)(v942 + 88) - 8);
    v548 = (size_t *)(v942 + 48);
    sub_20E9EE4D0((uint64_t *)(v942 + 48), *(_QWORD *)(v942 + 16) - v547 - 9);
    if (*v548)
      memmove((void *)(*(_QWORD *)(v546 + 24) + v547), *(const void **)(v546 + 56), *v548);
    *(_QWORD *)(v546 + 48) = 0;
    v549 = *(_QWORD *)(v546 + 80);
    v550 = *(_QWORD *)(v546 + 88) - 8;
    *(_QWORD *)(v546 + 88) = v550;
    if (v549 == v550)
    {
      std::ostream::write();
      if (*(_BYTE *)(v546 + 40))
      {
        free(*(void **)(v546 + 24));
        *(_BYTE *)(v546 + 40) = 0;
      }
    }
    if ((v910 & 0x10) != 0)
    {
      v553 = *((_QWORD *)&v909 + 1);
      if (*((_QWORD *)&v909 + 1) < v907)
      {
        *((_QWORD *)&v909 + 1) = v907;
        v553 = v907;
      }
      v554 = v906;
      v551 = v553 - (_QWORD)v906;
      if (v553 - (unint64_t)v906 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_968;
    }
    else
    {
      if ((v910 & 8) == 0)
      {
        v551 = 0;
        HIBYTE(__p[2]) = 0;
        v552 = __p;
        goto LABEL_906;
      }
      v554 = (const void *)v903;
      v551 = v905 - v903;
      if ((unint64_t)(v905 - v903) > 0x7FFFFFFFFFFFFFF7)
LABEL_968:
        sub_20E860B7C();
    }
    if (v551 >= 0x17)
    {
      v555 = (v551 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v551 | 7) != 0x17)
        v555 = v551 | 7;
      v556 = v555 + 1;
      v552 = operator new(v555 + 1);
      __p[2] = (void *)(v556 | 0x8000000000000000);
      __p[0] = v552;
      __p[1] = (void *)v551;
    }
    else
    {
      HIBYTE(__p[2]) = v551;
      v552 = __p;
      if (!v551)
        goto LABEL_906;
    }
    memmove(v552, v554, v551);
LABEL_906:
    *((_BYTE *)v552 + v551) = 0;
    v947 = 0;
    v946 = 0uLL;
    v557 = SHIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v558 = HIBYTE(__p[2]);
    else
      v558 = (size_t)__p[1];
    if (v558)
    {
      if ((v558 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v559 = (char *)operator new(v558);
      bzero(v559, v558);
      v946.i64[0] = (uint64_t)v559;
      v946.i64[1] = (uint64_t)&v559[v558];
      v947 = &v559[v558];
      if (v557 >= 0)
        v560 = __p;
      else
        v560 = (void **)__p[0];
      memmove(v559, v560, v558);
    }
    if (v557 < 0)
      operator delete(__p[0]);
    v940.i64[0] = (uint64_t)&off_24C9B7040;
    v561 = v942;
    v941 = (char *)&unk_24C9B7190;
    v942 = 0;
    v562 = MEMORY[0x24BEDB800];
    if (v561)
    {
      v563 = *(void **)(v561 + 80);
      if (v563)
      {
        *(_QWORD *)(v561 + 88) = v563;
        operator delete(v563);
      }
      if (*(_BYTE *)(v561 + 72))
        free(*(void **)(v561 + 56));
      if (*(_BYTE *)(v561 + 40))
        free(*(void **)(v561 + 24));
      MEMORY[0x212BC6398](v561, 0x1030C408C1A3048);
    }
    v900 = *(void **)v562;
    *(void **)((char *)&v900 + *((_QWORD *)v900 - 3)) = *(void **)(v562 + 24);
    v901 = MEMORY[0x24BEDB848] + 16;
    if (SBYTE7(v909) < 0)
      operator delete((void *)v908);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x212BC6290](v911);
    if (SHIBYTE(v951) < 0)
      operator delete((void *)v950);
    memset(__p, 0, 24);
    LOBYTE(v900) = 0;
    v564 = __dst[28];
    if (!v564)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **, int64x2_t *, void **))(*(_QWORD *)v564 + 48))(v564, &v900, &v946, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v946.i64[0])
    {
      v946.i64[1] = v946.i64[0];
      operator delete((void *)v946.i64[0]);
    }
    sub_20E86872C((uint64_t)&v918, v919[0]);
    if (v916)
    {
      v917 = v916;
      operator delete(v916);
    }
    if (v914)
    {
      v915 = v914;
      operator delete(v914);
    }
    if (v913[4])
    {
      v913[5] = v913[4];
      operator delete(v913[4]);
    }
    v565 = v913[1];
    if (v913[1])
    {
      v566 = v913[2];
      v567 = v913[1];
      if (v913[2] != v913[1])
      {
        do
        {
          v566 -= 89;
          sub_20E9385B0(v566);
        }
        while (v566 != v565);
        v567 = v913[1];
      }
      v913[2] = v565;
      operator delete(v567);
    }
    goto LABEL_945;
  }
LABEL_951:
  v571 = v424[4];
  v570 = v424[5];
  if (v571 != v570)
  {
    while (!*(_BYTE *)(v571 + 368))
    {
      v571 += 376;
      if (v571 == v570)
        goto LABEL_1011;
    }
  }
  if (v571 != v570)
  {
    v900 = (void *)1;
    v901 = 0;
    v902 = 0;
    v903 = 0;
    v904 = 733222324;
    kdebug_trace();
    if (v424[28])
    {
      memset(__p, 0, 24);
      __p[4] = 0;
      LODWORD(__p[5]) = 0;
      if (*(char *)(v571 + 47) < 0)
      {
        sub_20E860C04(v913, *(void **)(v571 + 24), *(_QWORD *)(v571 + 32));
      }
      else
      {
        *(_OWORD *)v913 = *(_OWORD *)(v571 + 24);
        v913[2] = *(void **)(v571 + 40);
      }
      v913[3] = *(void **)(v571 + 48);
      v913[4] = *(void **)v571;
      LODWORD(v913[5]) = *(_DWORD *)(v571 + 8);
      LODWORD(v913[6]) = *(_DWORD *)(v571 + 16);
      v572 = *(_OWORD *)(v571 + 120);
      v573 = *(_OWORD *)(v571 + 168);
      v574 = *(_OWORD *)(v571 + 152);
      *(_OWORD *)&v913[17] = *(_OWORD *)(v571 + 136);
      *(_OWORD *)&v913[19] = v574;
      *(_OWORD *)&v913[21] = v573;
      *(_OWORD *)&v913[15] = v572;
      v575 = *(_OWORD *)(v571 + 56);
      v576 = *(_OWORD *)(v571 + 104);
      v577 = *(_OWORD *)(v571 + 88);
      *(_OWORD *)&v913[9] = *(_OWORD *)(v571 + 72);
      *(_OWORD *)&v913[11] = v577;
      *(_OWORD *)&v913[13] = v576;
      *(_OWORD *)&v913[7] = v575;
      v578 = *(_OWORD *)(v571 + 248);
      v579 = *(_OWORD *)(v571 + 264);
      v580 = *(_OWORD *)(v571 + 296);
      *(_OWORD *)&v913[35] = *(_OWORD *)(v571 + 280);
      *(_OWORD *)&v913[37] = v580;
      *(_OWORD *)&v913[33] = v579;
      v581 = *(_OWORD *)(v571 + 184);
      v582 = *(_OWORD *)(v571 + 200);
      v583 = *(_OWORD *)(v571 + 216);
      *(_OWORD *)&v913[29] = *(_OWORD *)(v571 + 232);
      *(_OWORD *)&v913[27] = v583;
      *(_OWORD *)&v913[25] = v582;
      *(_OWORD *)&v913[23] = v581;
      *(_OWORD *)&v913[31] = v578;
      v584 = *(_BYTE *)(v571 + 328);
      if (v584)
      {
        v585 = *(_DWORD *)(v571 + 320);
        v913[39] = *(void **)(v571 + 312);
        LODWORD(v913[40]) = v585;
        v584 = 1;
      }
      else
      {
        LOBYTE(v913[39]) = 0;
      }
      LOBYTE(v913[41]) = v584;
      v586 = (_QWORD *)v424[29];
      *(_OWORD *)__p = *(_OWORD *)v913;
      __p[2] = v913[2];
      memcpy(&__p[3], &v913[3], 0x131uLL);
      if (v586)
      {
        v587 = v586[1];
        if (v587)
        {
          v588 = (uint8x8_t)vcnt_s8((int8x8_t)v587);
          v588.i16[0] = vaddlv_u8(v588);
          if (v588.u32[0] > 1uLL)
          {
            v589 = LODWORD(__p[6]);
            if (v587 <= LODWORD(__p[6]))
              v589 = LODWORD(__p[6]) % v587;
          }
          else
          {
            v589 = (v587 - 1) & (uint64_t)__p[6];
          }
          v590 = *(uint64_t ***)(*v586 + 8 * v589);
          if (v590)
          {
            v591 = *v590;
            if (v591)
            {
              if (v588.u32[0] < 2uLL)
              {
                v592 = v587 - 1;
                while (1)
                {
                  v594 = v591[1];
                  if (v594 == LODWORD(__p[6]))
                  {
                    if (*((_DWORD *)v591 + 4) == LODWORD(__p[6]))
                      goto LABEL_987;
                  }
                  else if ((v594 & v592) != v589)
                  {
                    goto LABEL_988;
                  }
                  v591 = (uint64_t *)*v591;
                  if (!v591)
                    goto LABEL_988;
                }
              }
              do
              {
                v593 = v591[1];
                if (v593 == LODWORD(__p[6]))
                {
                  if (*((_DWORD *)v591 + 4) == LODWORD(__p[6]))
                  {
LABEL_987:
                    LODWORD(__p[6]) = *((_DWORD *)v591 + 5);
                    break;
                  }
                }
                else
                {
                  if (v593 >= v587)
                    v593 %= v587;
                  if (v593 != v589)
                    break;
                }
                v591 = (uint64_t *)*v591;
              }
              while (v591);
            }
          }
        }
      }
LABEL_988:
      v898[0] = 0;
      v898[1] = 0;
      *(_QWORD *)v899 = 0;
      sub_20EE1BB24((uint64_t)__p, (uint64_t)v898, v913);
      if ((v899[7] & 0x80000000) != 0)
        operator delete(v898[0]);
      v946 = 0uLL;
      sub_210232668((unsigned __int8 *)(v571 + 24), (uint64_t)&v940);
      v595 = (char)v941;
      if ((_BYTE)v941)
        v946 = v940;
      v596 = *(unsigned __int8 *)(v571 + 328);
      v597 = *(_QWORD *)(v571 + 312);
      v598 = operator new(0x20uLL);
      if (v596)
        v599 = v597;
      else
        v599 = -1;
      v898[0] = v598;
      v898[1] = v598 + 4;
      *(_QWORD *)v899 = v598 + 4;
      *v598 = v599;
      *(int64x2_t *)(v598 + 1) = v946;
      *((_BYTE *)v598 + 24) = v595;
      v940.i8[0] = 1;
      v424 = __dst;
      v600 = __dst[28];
      if (!v600)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int64x2_t *, void **, void **))(*(_QWORD *)v600 + 48))(v600, &v940, v913, v898);
      if (v898[0])
      {
        v898[1] = v898[0];
        operator delete(v898[0]);
      }
      if (v913[0])
      {
        v913[1] = v913[0];
        operator delete(v913[0]);
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    sub_20F22F948((uint64_t)__p, v571 + 376, v424[5], v571);
    v602 = v601;
    v603 = v424[5];
    if (v603 != v601)
    {
      v604 = v603 - 352;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v604 + 336) && *(char *)(v604 + 335) < 0)
            operator delete(*(void **)(v604 + 312));
          if (*(char *)(v604 + 23) < 0)
            break;
          v605 = v604 - 24;
          v604 -= 376;
          if (v605 == v602)
            goto LABEL_1010;
        }
        operator delete(*(void **)v604);
        v606 = v604 - 24;
        v604 -= 376;
      }
      while (v606 != v602);
    }
LABEL_1010:
    v424[5] = v602;
    kdebug_trace();
  }
LABEL_1011:
  v608 = v424[7];
  v607 = v424[8];
  if (v608 != v607)
  {
    while (!*(_BYTE *)(v608 + 472))
    {
      v608 += 480;
      if (v608 == v607)
        goto LABEL_1075;
    }
  }
  if (v608 != v607)
  {
    v898[0] = (void *)2;
    v898[1] = 0;
    *(_OWORD *)v899 = 0uLL;
    *(_DWORD *)&v899[16] = 733222324;
    kdebug_trace();
    if (!v424[28])
    {
LABEL_1071:
      v651 = v424[8];
      if (v608 + 480 != v651)
      {
        do
        {
          v652 = v608 + 480;
          v653 = *(_OWORD *)(v608 + 496);
          *(_OWORD *)v608 = *(_OWORD *)(v608 + 480);
          *(_OWORD *)(v608 + 16) = v653;
          *(_OWORD *)(v608 + 28) = *(_OWORD *)(v608 + 508);
          v654 = *(_OWORD *)(v608 + 608);
          *(_OWORD *)(v608 + 112) = *(_OWORD *)(v608 + 592);
          *(_OWORD *)(v608 + 128) = v654;
          v655 = *(_OWORD *)(v608 + 640);
          *(_OWORD *)(v608 + 144) = *(_OWORD *)(v608 + 624);
          *(_OWORD *)(v608 + 160) = v655;
          v656 = *(_OWORD *)(v608 + 544);
          *(_OWORD *)(v608 + 48) = *(_OWORD *)(v608 + 528);
          *(_OWORD *)(v608 + 64) = v656;
          v657 = *(_OWORD *)(v608 + 576);
          *(_OWORD *)(v608 + 80) = *(_OWORD *)(v608 + 560);
          *(_OWORD *)(v608 + 96) = v657;
          memcpy((void *)(v608 + 176), (const void *)(v608 + 656), 0x125uLL);
          *(_BYTE *)(v608 + 472) = *(_BYTE *)(v608 + 952);
          v658 = v608 + 960;
          v608 += 480;
        }
        while (v658 != v651);
        v608 = v652;
      }
      v424[8] = v608;
      kdebug_trace();
      goto LABEL_1075;
    }
    v609 = *(void **)v608;
    v610 = *(_DWORD *)(v608 + 8);
    v611 = *(_DWORD *)(v608 + 16);
    v612 = v424;
    v613 = *(void **)(v608 + 24);
    v614 = *(_DWORD *)(v608 + 32);
    v615 = *(_DWORD *)(v608 + 40);
    v617 = *(_OWORD *)(v608 + 48);
    v616 = *(_OWORD *)(v608 + 64);
    v618 = *(_OWORD *)(v608 + 80);
    *(_OWORD *)((char *)&__p[6] + 4) = *(_OWORD *)(v608 + 96);
    *(_OWORD *)((char *)&__p[4] + 4) = v618;
    v620 = *(_OWORD *)(v608 + 112);
    v619 = *(_OWORD *)(v608 + 128);
    v621 = *(_OWORD *)(v608 + 144);
    *(_OWORD *)((char *)&__p[14] + 4) = *(_OWORD *)(v608 + 160);
    *(_OWORD *)((char *)&__p[12] + 4) = v621;
    *(_OWORD *)((char *)&__p[8] + 4) = v620;
    *(_OWORD *)((char *)&__p[10] + 4) = v619;
    *(_OWORD *)((char *)__p + 4) = v617;
    *(_OWORD *)((char *)&__p[2] + 4) = v616;
    memcpy(&v913[22], (const void *)(v608 + 176), 0x120uLL);
    *(_OWORD *)((char *)&v913[15] + 4) = *(_OWORD *)&__p[10];
    *(_OWORD *)((char *)&v913[17] + 4) = *(_OWORD *)&__p[12];
    *(_OWORD *)((char *)&v913[19] + 4) = *(_OWORD *)&__p[14];
    *(_OWORD *)((char *)&v913[7] + 4) = *(_OWORD *)&__p[2];
    *(_OWORD *)((char *)&v913[9] + 4) = *(_OWORD *)&__p[4];
    *(_OWORD *)((char *)&v913[11] + 4) = *(_OWORD *)&__p[6];
    *(_OWORD *)((char *)&v913[13] + 4) = *(_OWORD *)&__p[8];
    v622 = *(_DWORD *)(v608 + 464);
    v913[0] = v609;
    LODWORD(v913[1]) = v610;
    LODWORD(v913[2]) = v611;
    v913[3] = v613;
    LODWORD(v913[4]) = v614;
    LODWORD(v913[5]) = v615;
    *(_OWORD *)((char *)&v913[5] + 4) = *(_OWORD *)__p;
    HIDWORD(v913[21]) = __p[16];
    LODWORD(v913[58]) = v622;
    v623 = (_QWORD *)v612[29];
    if (v623)
      sub_20F467D8C(v623, (uint64_t)v913);
    v950 = 0uLL;
    v951 = 0;
    v624 = MEMORY[0x24BEDB870];
    v625 = MEMORY[0x24BEDB870] + 64;
    v626 = MEMORY[0x24BEDB800];
    v627 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v628 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v911[0] = MEMORY[0x24BEDB870] + 64;
    v900 = v627;
    *(void **)((char *)&v900 + *((_QWORD *)v627 - 3)) = v628;
    v629 = (std::ios_base *)((char *)&v900 + *((_QWORD *)v900 - 3));
    std::ios_base::init(v629, &v901);
    v629[1].__vftable = 0;
    v629[1].__fmtflags_ = -1;
    v900 = (void *)(v624 + 24);
    v911[0] = v625;
    std::streambuf::basic_streambuf();
    v630 = MEMORY[0x24BEDB848];
    v901 = MEMORY[0x24BEDB848] + 16;
    v908 = 0u;
    v909 = 0u;
    v910 = 16;
    v940.i64[0] = (uint64_t)&off_24C9B7040;
    v940.i64[1] = 1;
    v941 = (char *)&unk_24C9B7190;
    v631 = operator new();
    *(_QWORD *)v631 = &v900;
    *(_QWORD *)(v631 + 8) = &v900;
    *(_BYTE *)(v631 + 16) = 0;
    *(_BYTE *)(v631 + 40) = 0;
    *(_BYTE *)(v631 + 48) = 0;
    *(_BYTE *)(v631 + 72) = 0;
    *(_QWORD *)(v631 + 88) = 0;
    *(_QWORD *)(v631 + 96) = 0;
    *(_QWORD *)(v631 + 80) = 0;
    v942 = v631;
    v940.i64[0] = (uint64_t)&off_24C9B4468;
    v941 = (char *)&unk_24C9B45B8;
    v632 = HIBYTE(v951);
    if (v951 < 0)
      v632 = *((_QWORD *)&v950 + 1);
    if (v632 && (sub_20E9F5254((uint64_t)__p, v631 + 8, (uint64_t)&v950), *(_BYTE *)(v942 + 40)))
    {
      __p[0] = (void *)(v942 + 16);
      sub_20E9F3D4C((uint64_t **)__p, 4u);
    }
    else
    {
      LOBYTE(__p[0]) = 4;
      std::ostream::write();
    }
    sub_20E9EE95C(v942);
    memcpy(__p, v913, 0x1D8uLL);
    sub_20EAD0214((uint64_t)&v940, (uint64_t)__p, 4u);
    v633 = v942;
    v634 = *(_QWORD *)(*(_QWORD *)(v942 + 88) - 8);
    v635 = (size_t *)(v942 + 48);
    sub_20E9EE4D0((uint64_t *)(v942 + 48), *(_QWORD *)(v942 + 16) - v634 - 9);
    if (*v635)
      memmove((void *)(*(_QWORD *)(v633 + 24) + v634), *(const void **)(v633 + 56), *v635);
    *(_QWORD *)(v633 + 48) = 0;
    v636 = *(_QWORD *)(v633 + 80);
    v637 = *(_QWORD *)(v633 + 88) - 8;
    *(_QWORD *)(v633 + 88) = v637;
    if (v636 == v637)
    {
      std::ostream::write();
      if (*(_BYTE *)(v633 + 40))
      {
        free(*(void **)(v633 + 24));
        *(_BYTE *)(v633 + 40) = 0;
      }
    }
    if ((v910 & 0x10) != 0)
    {
      v640 = *((_QWORD *)&v909 + 1);
      if (*((_QWORD *)&v909 + 1) < v907)
      {
        *((_QWORD *)&v909 + 1) = v907;
        v640 = v907;
      }
      v641 = v906;
      v638 = v640 - (_QWORD)v906;
      if (v640 - (unint64_t)v906 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1136;
    }
    else
    {
      if ((v910 & 8) == 0)
      {
        v638 = 0;
        HIBYTE(__p[2]) = 0;
        v639 = __p;
        goto LABEL_1043;
      }
      v641 = (const void *)v903;
      v638 = v905 - v903;
      if ((unint64_t)(v905 - v903) > 0x7FFFFFFFFFFFFFF7)
LABEL_1136:
        sub_20E860B7C();
    }
    if (v638 >= 0x17)
    {
      v642 = (v638 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v638 | 7) != 0x17)
        v642 = v638 | 7;
      v643 = v642 + 1;
      v639 = operator new(v642 + 1);
      __p[2] = (void *)(v643 | 0x8000000000000000);
      __p[0] = v639;
      __p[1] = (void *)v638;
    }
    else
    {
      HIBYTE(__p[2]) = v638;
      v639 = __p;
      if (!v638)
        goto LABEL_1043;
    }
    memmove(v639, v641, v638);
LABEL_1043:
    *((_BYTE *)v639 + v638) = 0;
    v947 = 0;
    v946 = 0uLL;
    v644 = SHIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v645 = HIBYTE(__p[2]);
    else
      v645 = (size_t)__p[1];
    if (v645)
    {
      if ((v645 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v646 = (char *)operator new(v645);
      bzero(v646, v645);
      v946.i64[0] = (uint64_t)v646;
      v946.i64[1] = (uint64_t)&v646[v645];
      v947 = &v646[v645];
      if (v644 >= 0)
        v647 = __p;
      else
        v647 = (void **)__p[0];
      memmove(v646, v647, v645);
    }
    if (v644 < 0)
      operator delete(__p[0]);
    v940.i64[0] = (uint64_t)&off_24C9B7040;
    v648 = v942;
    v941 = (char *)&unk_24C9B7190;
    v942 = 0;
    if (v648)
    {
      v649 = *(void **)(v648 + 80);
      if (v649)
      {
        *(_QWORD *)(v648 + 88) = v649;
        operator delete(v649);
      }
      if (*(_BYTE *)(v648 + 72))
        free(*(void **)(v648 + 56));
      if (*(_BYTE *)(v648 + 40))
        free(*(void **)(v648 + 24));
      MEMORY[0x212BC6398](v648, 0x1030C408C1A3048);
    }
    v900 = *(void **)v626;
    *(void **)((char *)&v900 + *((_QWORD *)v900 - 3)) = *(void **)(v626 + 24);
    v901 = v630 + 16;
    if (SBYTE7(v909) < 0)
      operator delete((void *)v908);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x212BC6290](v911);
    v424 = __dst;
    if (SHIBYTE(v951) < 0)
      operator delete((void *)v950);
    memset(__p, 0, 24);
    LOBYTE(v900) = 2;
    v650 = __dst[28];
    if (!v650)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **, int64x2_t *, void **))(*(_QWORD *)v650 + 48))(v650, &v900, &v946, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v946.i64[0])
    {
      v946.i64[1] = v946.i64[0];
      operator delete((void *)v946.i64[0]);
    }
    goto LABEL_1071;
  }
LABEL_1075:
  v660 = v424[10];
  v659 = v424[11];
  if (v660 != v659)
  {
    while (!*(_BYTE *)(v660 + 32))
    {
      v660 += 40;
      if (v660 == v659)
        goto LABEL_1115;
    }
  }
  if (v660 != v659)
  {
    v900 = (void *)3;
    v901 = 0;
    v902 = 0;
    v903 = 0;
    v904 = 733222324;
    kdebug_trace();
    if (v424[28])
    {
      v661 = *(_QWORD *)(v660 + 24);
      v913[2] = &v913[3];
      memset(&v913[3], 0, 88);
      LOBYTE(v913[14]) = 3;
      memset(&v913[16], 0, 64);
      v913[15] = &v913[16];
      v913[25] = 0;
      v913[24] = &v913[25];
      v913[29] = 0;
      v913[28] = 0;
      v913[26] = 0;
      v913[27] = &v913[28];
      memset(&v913[31], 0, 88);
      v913[30] = (void *)-1;
      memset(&v913[43], 0, 24);
      memset(&v913[47], 0, 72);
      v913[42] = (void *)-1;
      v913[46] = &v913[47];
      if (!v661)
        sub_20E86D37C();
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v661 + 48))(__p);
      if (LOBYTE(__p[56]))
      {
        sub_20E94BF80((uint64_t)v913, (uint64_t)__p);
        if (LOBYTE(__p[56]))
          sub_20E94FADC((uint64_t)__p);
        v662 = (uint64_t *)v424[29];
        if (v662)
          sub_20F448AAC(v662, (uint64_t)v913);
        memset(__p, 0, 24);
        sub_20EE676A4((uint64_t)v913, (uint64_t)__p, v898);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        sub_20F467758(v913, (uint64_t *)__p);
        v940 = 0uLL;
        v941 = 0;
        v663 = __p[0];
        v664 = (LODWORD(__p[1]) - LODWORD(__p[0])) & 0xFFFFFFF0;
        if (((LODWORD(__p[1]) - LODWORD(__p[0])) & 0xFFFFFFF0) != 0)
        {
          v940.i64[0] = (uint64_t)operator new((LODWORD(__p[1]) - LODWORD(__p[0])) & 0xFFFFFFF0);
          v940.i64[1] = v940.i64[0] + v664;
          v941 = (char *)(v940.i64[0] + v664);
          memmove((void *)v940.i64[0], v663, v664);
        }
        if (v663)
        {
          __p[1] = v663;
          operator delete(v663);
        }
        LOBYTE(__p[0]) = 3;
        v665 = v424[28];
        if (!v665)
          sub_20E86D37C();
        (*(void (**)(uint64_t, void **, void **, int64x2_t *))(*(_QWORD *)v665 + 48))(v665, __p, v898, &v940);
        if (v940.i64[0])
        {
          v940.i64[1] = v940.i64[0];
          operator delete((void *)v940.i64[0]);
        }
        if (v898[0])
        {
          v898[1] = v898[0];
          operator delete(v898[0]);
        }
      }
      sub_20E94FADC((uint64_t)v913);
    }
    v666 = v660 + 40;
    v667 = v424[11];
    if (v660 + 40 == v667)
    {
      v424 = __dst;
      if (v666 != v660)
        goto LABEL_1122;
LABEL_1114:
      v424[11] = v660;
      kdebug_trace();
      goto LABEL_1115;
    }
    while (1)
    {
      v668 = (_QWORD *)(v666 - 16);
      v669 = *(_QWORD **)(v666 - 16);
      *(_QWORD *)(v666 - 16) = 0;
      if ((_QWORD *)(v666 - 40) == v669)
      {
        v669 = (_QWORD *)(v666 - 40);
        v670 = 4;
      }
      else
      {
        if (!v669)
          goto LABEL_1110;
        v670 = 5;
      }
      (*(void (**)(void))(*v669 + 8 * v670))();
LABEL_1110:
      v671 = *(_QWORD *)(v666 + 24);
      if (v671)
      {
        if (v666 == v671)
        {
          *(_QWORD *)(v666 - 16) = v666 - 40;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v666 + 24))(v666, v666 - 40);
          goto LABEL_1104;
        }
        *v668 = v671;
        v668 = (_QWORD *)(v666 + 24);
      }
      *v668 = 0;
LABEL_1104:
      *(_BYTE *)(v666 - 8) = *(_BYTE *)(v666 + 32);
      v666 += 40;
      if (v666 == v667)
      {
        v660 = v666 - 40;
        v424 = __dst;
        v666 = __dst[11];
        if (v666 == v660)
          goto LABEL_1114;
LABEL_1122:
        while (2)
        {
          v676 = v666 - 40;
          v674 = *(_QWORD **)(v666 - 16);
          if ((_QWORD *)(v666 - 40) != v674)
          {
            if (v674)
            {
              v675 = 5;
LABEL_1120:
              (*(void (**)(void))(*v674 + 8 * v675))();
            }
            v666 -= 40;
            if (v676 == v660)
              goto LABEL_1114;
            continue;
          }
          break;
        }
        v674 = (_QWORD *)(v666 - 40);
        v675 = 4;
        goto LABEL_1120;
      }
    }
  }
LABEL_1115:
  v673 = (__int128 *)v424[13];
  v672 = (__int128 *)v424[14];
  if (v673 != v672)
  {
    while (!*((_BYTE *)v673 + 24))
    {
      v673 += 2;
      if (v673 == v672)
        goto LABEL_1206;
    }
  }
  if (v673 != v672)
  {
    v913[0] = (void *)4;
    memset(&v913[1], 0, 24);
    LODWORD(v913[4]) = 733222324;
    kdebug_trace();
    if (!v424[28])
      goto LABEL_1193;
    if (*((char *)v673 + 23) < 0)
    {
      sub_20E860C04(__p, *(void **)v673, *((_QWORD *)v673 + 1));
    }
    else
    {
      v677 = *v673;
      __p[2] = *((void **)v673 + 2);
      *(_OWORD *)__p = v677;
    }
    __srce = __p[0];
    v678 = __p[1];
    LODWORD(v944) = __p[2];
    *(_DWORD *)((char *)&v944 + 3) = *(_DWORD *)((char *)&__p[2] + 3);
    v679 = SHIBYTE(__p[2]);
    v946 = 0uLL;
    v947 = 0;
    v680 = MEMORY[0x24BEDB870];
    v681 = (void *)(MEMORY[0x24BEDB870] + 64);
    v682 = MEMORY[0x24BEDB800];
    v683 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v684 = *(void **)(MEMORY[0x24BEDB800] + 16);
    __p[14] = (void *)(MEMORY[0x24BEDB870] + 64);
    __p[0] = v683;
    *(void **)((char *)__p + *((_QWORD *)v683 - 3)) = v684;
    v685 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v685, &__p[1]);
    v685[1].__vftable = 0;
    v685[1].__fmtflags_ = -1;
    __p[0] = (void *)(v680 + 24);
    __p[14] = v681;
    std::streambuf::basic_streambuf();
    __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    memset(&__p[9], 0, 32);
    LODWORD(__p[13]) = 16;
    v901 = 1;
    v686 = operator new();
    *(_QWORD *)v686 = __p;
    *(_QWORD *)(v686 + 8) = __p;
    *(_BYTE *)(v686 + 16) = 0;
    *(_BYTE *)(v686 + 40) = 0;
    *(_BYTE *)(v686 + 48) = 0;
    v687 = (size_t *)(v686 + 48);
    *(_BYTE *)(v686 + 72) = 0;
    *(_QWORD *)(v686 + 88) = 0;
    *(_QWORD *)(v686 + 96) = 0;
    *(_QWORD *)(v686 + 80) = 0;
    v900 = &off_24C9B4468;
    v902 = &unk_24C9B45B8;
    v903 = v686;
    v688 = HIBYTE(v947);
    if (SHIBYTE(v947) < 0)
      v688 = v946.i64[1];
    if (v688 && (sub_20E9F5254((uint64_t)v898, v686 + 8, (uint64_t)&v946), *(_BYTE *)(v686 + 40)))
    {
      v898[0] = (void *)(v686 + 16);
      sub_20E9F3D4C((uint64_t **)v898, 2u);
    }
    else
    {
      LOBYTE(v898[0]) = 2;
      std::ostream::write();
    }
    sub_20E9EE95C(v686);
    if (v679 < 0)
    {
      sub_20E860C04(v898, __srce, (unint64_t)v678);
    }
    else
    {
      v898[0] = __srce;
      v898[1] = v678;
      *(_DWORD *)v899 = v944;
      *(_DWORD *)&v899[3] = *(_DWORD *)((char *)&v944 + 3);
      v899[7] = v679;
    }
    if (*(_BYTE *)(v686 + 40))
    {
      *(_QWORD *)&v950 = v686 + 16;
      sub_20E9F4E1C((uint64_t)&v895, (uint64_t **)&v950, (const void **)v898);
    }
    else
    {
      sub_20E9F5254((uint64_t)&v950, v686 + 8, (uint64_t)v898);
    }
    if ((v899[7] & 0x80000000) != 0)
      operator delete(v898[0]);
    v689 = *(_QWORD *)(*(_QWORD *)(v686 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v686 + 48), *(_QWORD *)(v686 + 16) - v689 - 9);
    if (*v687)
      memmove((void *)(*(_QWORD *)(v686 + 24) + v689), *(const void **)(v686 + 56), *v687);
    *(_QWORD *)(v686 + 48) = 0;
    v690 = *(_QWORD *)(v686 + 80);
    v691 = *(_QWORD *)(v686 + 88) - 8;
    *(_QWORD *)(v686 + 88) = v691;
    if (v690 == v691)
    {
      std::ostream::write();
      if (*(_BYTE *)(v686 + 40))
      {
        free(*(void **)(v686 + 24));
        *(_BYTE *)(v686 + 40) = 0;
      }
    }
    if (((uint64_t)__p[13] & 0x10) != 0)
    {
      v694 = __p[12];
      if (__p[12] < __p[7])
      {
        __p[12] = __p[7];
        v694 = __p[7];
      }
      v695 = __p[6];
      v692 = v694 - (char *)__p[6];
      if ((unint64_t)(v694 - (char *)__p[6]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1220;
    }
    else
    {
      if (((uint64_t)__p[13] & 8) == 0)
      {
        v692 = 0;
        v899[7] = 0;
        v693 = v898;
        goto LABEL_1164;
      }
      v695 = __p[3];
      v692 = (char *)__p[5] - (char *)__p[3];
      if ((void *)((char *)__p[5] - (char *)__p[3]) > (void *)0x7FFFFFFFFFFFFFF7)
LABEL_1220:
        sub_20E860B7C();
    }
    if (v692 >= 0x17)
    {
      v696 = (v692 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v692 | 7) != 0x17)
        v696 = v692 | 7;
      v697 = v696 + 1;
      v693 = operator new(v696 + 1);
      v898[1] = (void *)v692;
      *(_QWORD *)v899 = v697 | 0x8000000000000000;
      v898[0] = v693;
    }
    else
    {
      v899[7] = v692;
      v693 = v898;
      if (!v692)
      {
LABEL_1164:
        *((_BYTE *)v693 + v692) = 0;
        v941 = 0;
        v940 = 0uLL;
        v698 = v899[7];
        if (v899[7] >= 0)
          v699 = v899[7];
        else
          v699 = (size_t)v898[1];
        if (v699)
        {
          if ((v699 & 0x8000000000000000) != 0)
            sub_20E867F44();
          v700 = (char *)operator new(v699);
          bzero(v700, v699);
          v940.i64[0] = (uint64_t)v700;
          v940.i64[1] = (uint64_t)&v700[v699];
          v941 = &v700[v699];
          if (v698 >= 0)
            v701 = v898;
          else
            v701 = (void **)v898[0];
          memmove(v700, v701, v699);
        }
        if (v698 < 0)
          operator delete(v898[0]);
        v702 = v903;
        if (v903)
        {
          v703 = *(void **)(v903 + 80);
          if (v703)
          {
            *(_QWORD *)(v903 + 88) = v703;
            operator delete(v703);
          }
          if (*(_BYTE *)(v702 + 72))
            free(*(void **)(v702 + 56));
          if (*(_BYTE *)(v702 + 40))
            free(*(void **)(v702 + 24));
          MEMORY[0x212BC6398](v702, 0x1030C408C1A3048);
        }
        __p[0] = *(void **)v682;
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v682 + 24);
        __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
        if (SHIBYTE(__p[11]) < 0)
          operator delete(__p[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x212BC6290](&__p[14]);
        if (SHIBYTE(v947) < 0)
          operator delete((void *)v946.i64[0]);
        memset(__p, 0, 24);
        LOBYTE(v900) = 4;
        v424 = __dst;
        v704 = __dst[28];
        if (!v704)
          sub_20E86D37C();
        (*(void (**)(uint64_t, void **, int64x2_t *, void **))(*(_QWORD *)v704 + 48))(v704, &v900, &v940, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v940.i64[0])
        {
          v940.i64[1] = v940.i64[0];
          operator delete((void *)v940.i64[0]);
        }
        if (v679 < 0)
        {
          operator delete(__srce);
          v705 = v673 + 2;
          v706 = (__int128 *)__dst[14];
          if (v673 + 2 == v706)
            goto LABEL_1202;
          goto LABEL_1198;
        }
LABEL_1193:
        v705 = v673 + 2;
        v706 = (__int128 *)v424[14];
        if (v673 + 2 == v706)
        {
LABEL_1202:
          while (v705 != v673)
          {
            if (*((char *)v705 - 9) < 0)
              operator delete(*((void **)v705 - 4));
            v705 -= 2;
          }
          v424[14] = v673;
          kdebug_trace();
          goto LABEL_1206;
        }
        do
        {
LABEL_1198:
          v707 = (void **)(v705 - 2);
          if (*((char *)v705 - 9) < 0)
            operator delete(*v707);
          *(_OWORD *)v707 = *v705;
          *((_QWORD *)v705 - 2) = *((_QWORD *)v705 + 2);
          *((_BYTE *)v705 + 23) = 0;
          *(_BYTE *)v705 = 0;
          *((_BYTE *)v705 - 8) = *((_BYTE *)v705 + 24);
          v705 += 2;
        }
        while (v705 != v706);
        v673 = v705 - 2;
        v705 = (__int128 *)v424[14];
        goto LABEL_1202;
      }
    }
    memmove(v693, v695, v692);
    goto LABEL_1164;
  }
LABEL_1206:
  v709 = v424[16];
  v708 = v424[17];
  if (v709 != v708)
  {
    while (!*(_BYTE *)(v709 + 896))
    {
      v709 += 904;
      if (v709 == v708)
        goto LABEL_1314;
    }
  }
  if (v709 != v708)
  {
    v940 = (int64x2_t)5uLL;
    v941 = 0;
    v942 = 0;
    v943 = 733222324;
    kdebug_trace();
    if (!v424[28])
    {
LABEL_1297:
      v742 = v709 + 904;
      v743 = v424[17];
      if (v709 + 904 != v743)
      {
        do
        {
          v744 = v709;
          *(_QWORD *)(v709 + 160) = *(_QWORD *)(v709 + 1064);
          v745 = *(_OWORD *)(v709 + 1048);
          *(_OWORD *)(v709 + 128) = *(_OWORD *)(v709 + 1032);
          *(_OWORD *)(v709 + 144) = v745;
          v746 = *(_OWORD *)(v709 + 984);
          *(_OWORD *)(v709 + 64) = *(_OWORD *)(v709 + 968);
          *(_OWORD *)(v709 + 80) = v746;
          v747 = *(_OWORD *)(v709 + 1016);
          *(_OWORD *)(v709 + 96) = *(_OWORD *)(v709 + 1000);
          *(_OWORD *)(v709 + 112) = v747;
          v748 = *(_OWORD *)(v709 + 920);
          *(_OWORD *)v709 = *(_OWORD *)(v709 + 904);
          *(_OWORD *)(v709 + 16) = v748;
          v749 = *(_OWORD *)(v709 + 952);
          *(_OWORD *)(v709 + 32) = *(_OWORD *)(v709 + 936);
          *(_OWORD *)(v709 + 48) = v749;
          memcpy((void *)(v709 + 168), (const void *)(v709 + 1072), 0x120uLL);
          memcpy((void *)(v709 + 456), (const void *)(v709 + 1360), 0x120uLL);
          v750 = *(void **)(v709 + 744);
          if (v750)
          {
            *(_QWORD *)(v709 + 752) = v750;
            operator delete(v750);
            *(_OWORD *)(v709 + 752) = 0u;
          }
          *(_OWORD *)(v709 + 744) = *(_OWORD *)(v709 + 1648);
          *(_QWORD *)(v709 + 760) = *(_QWORD *)(v709 + 1664);
          *(_QWORD *)(v709 + 1664) = 0;
          *(_OWORD *)(v709 + 1648) = 0u;
          *(_QWORD *)(v709 + 784) = *(_QWORD *)(v709 + 1688);
          *(_OWORD *)(v709 + 768) = *(_OWORD *)(v709 + 1672);
          *(_OWORD *)(v709 + 792) = *(_OWORD *)(v709 + 1696);
          *(_QWORD *)(v709 + 808) = *(_QWORD *)(v709 + 1712);
          *(_OWORD *)(v709 + 816) = *(_OWORD *)(v709 + 1720);
          v751 = *(_QWORD *)(v709 + 1736);
          *(_DWORD *)(v709 + 840) = *(_DWORD *)(v709 + 1744);
          *(_QWORD *)(v709 + 832) = v751;
          v752 = (_OWORD *)(v709 + 848);
          v753 = (_OWORD *)(v709 + 1752);
          if (*(unsigned __int8 *)(v709 + 872) == *(unsigned __int8 *)(v709 + 1776))
          {
            if (*(_BYTE *)(v709 + 872))
            {
              *v752 = *v753;
              *(_QWORD *)(v709 + 864) = *(_QWORD *)(v709 + 1768);
            }
          }
          else if (*(_BYTE *)(v709 + 872))
          {
            *(_BYTE *)(v709 + 872) = 0;
          }
          else
          {
            *v752 = *v753;
            *(_QWORD *)(v709 + 864) = *(_QWORD *)(v709 + 1768);
            *(_BYTE *)(v709 + 872) = 1;
          }
          *(_QWORD *)(v709 + 880) = *(_QWORD *)(v709 + 1784);
          *(_BYTE *)(v709 + 888) = *(_BYTE *)(v709 + 1792);
          *(_BYTE *)(v709 + 896) = *(_BYTE *)(v709 + 1800);
          v709 += 904;
        }
        while (v744 + 1808 != v743);
        v424 = __dst;
        v742 = __dst[17];
      }
      while (v742 != v709)
      {
        v754 = *(void **)(v742 - 160);
        if (v754)
        {
          *(_QWORD *)(v742 - 152) = v754;
          operator delete(v754);
        }
        v742 -= 904;
      }
      v424[17] = v709;
      kdebug_trace();
      goto LABEL_1314;
    }
    sub_20FCD0980(*(_QWORD *)(v709 + 832), *(_QWORD *)(v709 + 840), v709, (uint64_t)&__p[1]);
    LOBYTE(v930) = 0;
    v931[8] = 0;
    if (*(_BYTE *)(v709 + 872))
    {
      v710 = *(_QWORD *)(v709 + 864);
      v930 = *(_OWORD *)(v709 + 848);
      *(_QWORD *)v931 = v710;
      v931[8] = 1;
    }
    *(_QWORD *)&v931[16] = *(_QWORD *)(v709 + 880);
    v931[24] = *(_BYTE *)(v709 + 888);
    memcpy(&v913[1], &__p[1], 0x2E8uLL);
    v711 = v925;
    v712 = v924;
    v950 = v927;
    v951 = v928;
    v713 = (int)v929;
    *(_OWORD *)v898 = v930;
    *(_OWORD *)v899 = *(_OWORD *)v931;
    *(_OWORD *)&v899[9] = *(_OWORD *)&v931[9];
    v895 = 0;
    v896 = 0;
    v897 = 0;
    v714 = MEMORY[0x24BEDB870];
    v715 = MEMORY[0x24BEDB870] + 64;
    v716 = MEMORY[0x24BEDB800];
    v717 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v718 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v911[0] = MEMORY[0x24BEDB870] + 64;
    v900 = v717;
    *(void **)((char *)&v900 + *((_QWORD *)v717 - 3)) = v718;
    v719 = (std::ios_base *)((char *)&v900 + *((_QWORD *)v900 - 3));
    std::ios_base::init(v719, &v901);
    v719[1].__vftable = 0;
    v719[1].__fmtflags_ = -1;
    v900 = (void *)(v714 + 24);
    v911[0] = v715;
    std::streambuf::basic_streambuf();
    v901 = MEMORY[0x24BEDB848] + 16;
    v908 = 0u;
    v909 = 0u;
    v910 = 16;
    v946.i64[0] = (uint64_t)&off_24C9B7040;
    v946.i64[1] = 1;
    v947 = (char *)&unk_24C9B7190;
    v720 = operator new();
    *(_QWORD *)v720 = &v900;
    *(_QWORD *)(v720 + 8) = &v900;
    *(_BYTE *)(v720 + 16) = 0;
    *(_BYTE *)(v720 + 40) = 0;
    *(_BYTE *)(v720 + 48) = 0;
    *(_BYTE *)(v720 + 72) = 0;
    *(_QWORD *)(v720 + 88) = 0;
    *(_QWORD *)(v720 + 96) = 0;
    *(_QWORD *)(v720 + 80) = 0;
    v948 = v720;
    v946.i64[0] = (uint64_t)&off_24C9B4468;
    v947 = (char *)&unk_24C9B45B8;
    v721 = HIBYTE(v897);
    if (v897 < 0)
      v721 = v896;
    if (v721 && (sub_20E9F5254((uint64_t)__p, v720 + 8, (uint64_t)&v895), *(_BYTE *)(v948 + 40)))
    {
      __p[0] = (void *)(v948 + 16);
      sub_20E9F3D4C((uint64_t **)__p, 3u);
    }
    else
    {
      LOBYTE(__p[0]) = 3;
      std::ostream::write();
    }
    sub_20E9EE95C(v948);
    memcpy(&__p[1], &v913[1], 0x2E8uLL);
    v924 = 0;
    v926 = 0;
    v925 = 0;
    v722 = v711 - v712;
    if (v711 != v712)
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v722 >> 3)) >= 0x492492492492493)
        sub_20E92CED8();
      v924 = operator new(v722);
      v723 = (char *)v924 + 8 * (v722 >> 3);
      v926 = v723;
      memcpy(v924, v712, v722);
      v925 = v723;
    }
    v927 = v950;
    v928 = v951;
    LODWORD(v929) = v713;
    v930 = *(_OWORD *)v898;
    *(_OWORD *)v931 = *(_OWORD *)v899;
    *(_OWORD *)&v931[9] = *(_OWORD *)&v899[9];
    if (*(_BYTE *)(v948 + 40))
    {
      *(_QWORD *)v949 = v948 + 16;
      sub_20E9F3D4C((uint64_t **)v949, 3u);
    }
    else
    {
      v949[0] = 3;
      std::ostream::write();
    }
    sub_20EAD5EAC((uint64_t)&v946, (uint64_t)&__p[1], 3u);
    if (v931[8])
    {
      if (*(_BYTE *)(v948 + 40))
      {
        *(_QWORD *)v949 = v948 + 16;
        sub_20E9F3164((uint64_t **)v949, 1);
      }
      else
      {
        v949[0] = 1;
        std::ostream::write();
      }
      if (*(_BYTE *)(v948 + 40))
      {
        *(_QWORD *)v949 = v948 + 16;
        sub_20E9F4C08((uint64_t)&v912, (uint64_t **)v949, (unint64_t *)&v930);
        sub_20E9F4C08((uint64_t)&v912, (uint64_t **)v949, (unint64_t *)&v930 + 1);
        sub_20E9F4C08((uint64_t)&v912, (uint64_t **)v949, (unint64_t *)v931);
      }
      else
      {
        v949[0] = -53;
        *(_QWORD *)&v949[1] = bswap64(v930);
        std::ostream::write();
        v949[0] = -53;
        *(_QWORD *)&v949[1] = bswap64(*((unint64_t *)&v930 + 1));
        std::ostream::write();
        v949[0] = -53;
        *(_QWORD *)&v949[1] = bswap64(*(unint64_t *)v931);
        std::ostream::write();
      }
    }
    else if (*(_BYTE *)(v948 + 40))
    {
      *(_QWORD *)v949 = v948 + 16;
      sub_20E9F3164((uint64_t **)v949, 0);
    }
    else
    {
      v949[0] = 0;
      std::ostream::write();
    }
    if (*(_BYTE *)(v948 + 40))
    {
      *(_QWORD *)v949 = v948 + 16;
      sub_20E9F4C08((uint64_t)&v912, (uint64_t **)v949, (unint64_t *)&v931[16]);
    }
    else
    {
      v949[0] = -53;
      *(_QWORD *)&v949[1] = bswap64(*(unint64_t *)&v931[16]);
      std::ostream::write();
    }
    if (*(_BYTE *)(v948 + 40))
    {
      *(_QWORD *)v949 = v948 + 16;
      sub_20E9F4CE4((uint64_t)&v912, (uint64_t **)v949, &v931[24]);
    }
    else
    {
      if (v931[24])
        v949[0] = -61;
      else
        v949[0] = -62;
      std::ostream::write();
    }
    if (v924)
    {
      v925 = v924;
      operator delete(v924);
    }
    v724 = v948;
    v725 = *(_QWORD *)(*(_QWORD *)(v948 + 88) - 8);
    v726 = (size_t *)(v948 + 48);
    sub_20E9EE4D0((uint64_t *)(v948 + 48), *(_QWORD *)(v948 + 16) - v725 - 9);
    if (*v726)
      memmove((void *)(*(_QWORD *)(v724 + 24) + v725), *(const void **)(v724 + 56), *v726);
    *(_QWORD *)(v724 + 48) = 0;
    v727 = *(_QWORD *)(v724 + 80);
    v728 = *(_QWORD *)(v724 + 88) - 8;
    *(_QWORD *)(v724 + 88) = v728;
    if (v727 == v728)
    {
      std::ostream::write();
      if (*(_BYTE *)(v724 + 40))
      {
        free(*(void **)(v724 + 24));
        *(_BYTE *)(v724 + 40) = 0;
      }
    }
    if ((v910 & 0x10) != 0)
    {
      v731 = *((_QWORD *)&v909 + 1);
      if (*((_QWORD *)&v909 + 1) < v907)
      {
        *((_QWORD *)&v909 + 1) = v907;
        v731 = v907;
      }
      v732 = v906;
      v729 = v731 - (_QWORD)v906;
      if (v731 - (unint64_t)v906 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1350;
    }
    else
    {
      if ((v910 & 8) == 0)
      {
        v729 = 0;
        HIBYTE(__p[2]) = 0;
        v730 = __p;
        goto LABEL_1267;
      }
      v732 = (const void *)v903;
      v729 = v905 - v903;
      if ((unint64_t)(v905 - v903) > 0x7FFFFFFFFFFFFFF7)
LABEL_1350:
        sub_20E860B7C();
    }
    if (v729 >= 0x17)
    {
      v733 = (v729 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v729 | 7) != 0x17)
        v733 = v729 | 7;
      v734 = v733 + 1;
      v730 = operator new(v733 + 1);
      __p[2] = (void *)(v734 | 0x8000000000000000);
      __p[0] = v730;
      __p[1] = (void *)v729;
    }
    else
    {
      HIBYTE(__p[2]) = v729;
      v730 = __p;
      if (!v729)
        goto LABEL_1267;
    }
    memmove(v730, v732, v729);
LABEL_1267:
    *((_BYTE *)v730 + v729) = 0;
    v945 = 0;
    v944 = 0uLL;
    v735 = SHIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v736 = HIBYTE(__p[2]);
    else
      v736 = (size_t)__p[1];
    if (v736)
    {
      if ((v736 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v737 = (char *)operator new(v736);
      bzero(v737, v736);
      *(_QWORD *)&v944 = v737;
      *((_QWORD *)&v944 + 1) = &v737[v736];
      v945 = &v737[v736];
      if (v735 >= 0)
        v738 = __p;
      else
        v738 = (void **)__p[0];
      memmove(v737, v738, v736);
    }
    if (v735 < 0)
      operator delete(__p[0]);
    v946.i64[0] = (uint64_t)&off_24C9B7040;
    v739 = v948;
    v947 = (char *)&unk_24C9B7190;
    v948 = 0;
    if (v739)
    {
      v740 = *(void **)(v739 + 80);
      if (v740)
      {
        *(_QWORD *)(v739 + 88) = v740;
        operator delete(v740);
      }
      if (*(_BYTE *)(v739 + 72))
        free(*(void **)(v739 + 56));
      if (*(_BYTE *)(v739 + 40))
        free(*(void **)(v739 + 24));
      MEMORY[0x212BC6398](v739, 0x1030C408C1A3048);
    }
    v900 = *(void **)v716;
    *(void **)((char *)&v900 + *((_QWORD *)v900 - 3)) = *(void **)(v716 + 24);
    v901 = MEMORY[0x24BEDB848] + 16;
    if (SBYTE7(v909) < 0)
      operator delete((void *)v908);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x212BC6290](v911);
    if (SHIBYTE(v897) < 0)
      operator delete(v895);
    memset(__p, 0, 24);
    LOBYTE(v900) = 5;
    v424 = __dst;
    v741 = __dst[28];
    if (!v741)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **, __int128 *, void **))(*(_QWORD *)v741 + 48))(v741, &v900, &v944, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((_QWORD)v944)
    {
      *((_QWORD *)&v944 + 1) = v944;
      operator delete((void *)v944);
    }
    if (v712)
      operator delete(v712);
    goto LABEL_1297;
  }
LABEL_1314:
  v756 = v424[19];
  v755 = v424[20];
  if (v756 != v755)
  {
    while (!*(_BYTE *)(v756 + 24))
    {
      v756 += 32;
      if (v756 == v755)
        goto LABEL_1438;
    }
  }
  if (v756 != v755)
  {
    v913[0] = (void *)8;
    memset(&v913[1], 0, 24);
    LODWORD(v913[4]) = 733222324;
    kdebug_trace();
    if (!v424[28])
      goto LABEL_1426;
    v757 = *(char **)v756;
    v758 = *(char **)(v756 + 8);
    memset(__p, 0, 24);
    v759 = v758 - v757;
    if (v758 != v757)
    {
      if (v759 < 0)
        sub_20E92CED8();
      v760 = operator new(v758 - v757);
      __p[0] = v760;
      __p[1] = v760;
      __p[2] = &v760[2 * (v759 >> 4)];
      while (1)
      {
        while (1)
        {
          v762 = *(_QWORD *)v757;
          v761 = *((_QWORD *)v757 + 1);
          if (v760 >= __p[2])
            break;
          *v760 = v762;
          v760[1] = v761;
          v760 += 2;
          __p[1] = v760;
          v757 += 16;
          if (v757 == v758)
            goto LABEL_1342;
        }
        v763 = __p[0];
        v764 = ((char *)v760 - (char *)__p[0]) >> 4;
        v765 = v764 + 1;
        if ((unint64_t)(v764 + 1) >> 60)
          sub_20E92CED8();
        v766 = (char *)__p[2] - (char *)__p[0];
        if (((char *)__p[2] - (char *)__p[0]) >> 3 > v765)
          v765 = v766 >> 3;
        if ((unint64_t)v766 >= 0x7FFFFFFFFFFFFFF0)
          v767 = 0xFFFFFFFFFFFFFFFLL;
        else
          v767 = v765;
        if (v767)
        {
          if (v767 >> 60)
            sub_20E877A38();
          v768 = (char *)operator new(16 * v767);
          v769 = &v768[16 * v764];
          v770 = &v768[16 * v767];
          *(_QWORD *)v769 = v762;
          *((_QWORD *)v769 + 1) = v761;
          v771 = v769 + 16;
          if (v760 == v763)
            goto LABEL_1340;
          do
          {
LABEL_1336:
            *((_OWORD *)v769 - 1) = *((_OWORD *)v760 - 1);
            v769 -= 16;
            v760 -= 2;
          }
          while (v760 != v763);
          __p[0] = v769;
          __p[2] = v770;
          if (v763)
            goto LABEL_1341;
          v760 = v771;
          __p[1] = v771;
          v757 += 16;
          if (v757 == v758)
            goto LABEL_1342;
        }
        else
        {
          v769 = (char *)(16 * v764);
          v770 = 0;
          *(_QWORD *)v769 = v762;
          *((_QWORD *)v769 + 1) = v761;
          v771 = (_QWORD *)(16 * v764 + 16);
          if (v760 != v763)
            goto LABEL_1336;
LABEL_1340:
          __p[0] = v769;
          __p[2] = v770;
          v763 = v760;
LABEL_1341:
          operator delete(v763);
          v760 = v771;
          __p[1] = v771;
          v757 += 16;
          if (v757 == v758)
          {
LABEL_1342:
            v772 = __p[0];
            goto LABEL_1344;
          }
        }
      }
    }
    v760 = 0;
    v772 = 0;
LABEL_1344:
    v946 = 0uLL;
    v947 = 0;
    v773 = MEMORY[0x24BEDB870];
    v774 = (void *)(MEMORY[0x24BEDB870] + 64);
    v775 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v776 = *(void **)(MEMORY[0x24BEDB800] + 16);
    __p[14] = (void *)(MEMORY[0x24BEDB870] + 64);
    __p[0] = v775;
    *(void **)((char *)__p + *((_QWORD *)v775 - 3)) = v776;
    v777 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    __srcf = v772;
    std::ios_base::init(v777, &__p[1]);
    v777[1].__vftable = 0;
    v777[1].__fmtflags_ = -1;
    __p[0] = (void *)(v773 + 24);
    __p[14] = v774;
    std::streambuf::basic_streambuf();
    __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    memset(&__p[9], 0, 32);
    LODWORD(__p[13]) = 16;
    v901 = 1;
    v778 = operator new();
    *(_QWORD *)(v778 + 8) = __p;
    *(_BYTE *)(v778 + 16) = 0;
    *(_QWORD *)v778 = __p;
    *(_BYTE *)(v778 + 40) = 0;
    *(_BYTE *)(v778 + 48) = 0;
    *(_BYTE *)(v778 + 72) = 0;
    *(_QWORD *)(v778 + 88) = 0;
    *(_QWORD *)(v778 + 96) = 0;
    *(_QWORD *)(v778 + 80) = 0;
    v900 = &off_24C9B4468;
    v902 = &unk_24C9B45B8;
    v903 = v778;
    v779 = HIBYTE(v947);
    if (SHIBYTE(v947) < 0)
      v779 = v946.i64[1];
    if (v779 && (sub_20E9F5254((uint64_t)v898, v778 + 8, (uint64_t)&v946), *(_BYTE *)(v778 + 40)))
    {
      v898[0] = (void *)(v778 + 16);
      sub_20E9F3D4C((uint64_t **)v898, 1u);
    }
    else
    {
      LOBYTE(v898[0]) = 1;
      std::ostream::write();
    }
    sub_20E9EE95C(v778);
    v898[0] = 0;
    v898[1] = 0;
    *(_QWORD *)v899 = 0;
    v780 = (char *)v760 - (char *)v772;
    if (v760 == v772)
    {
      v781 = 0;
      v782 = 0;
      v783 = 0;
      if (*(_BYTE *)(v778 + 40))
      {
LABEL_1355:
        *(_QWORD *)&v950 = v778 + 16;
        sub_20E9F472C((uint64_t **)&v950, v783);
        goto LABEL_1358;
      }
    }
    else
    {
      if (v780 < 0)
        sub_20E92CED8();
      v781 = (unsigned int *)operator new((char *)v760 - (char *)v772);
      v782 = &v781[4 * (v780 >> 4)];
      memcpy(v781, v772, v780);
      v783 = (16 * (v780 >> 4)) >> 4;
      if (*(_BYTE *)(v778 + 40))
        goto LABEL_1355;
    }
    sub_20E9F4A34();
LABEL_1358:
    if (v782 != v781)
    {
      v784 = v781 + 3;
      for (ii = 16 * v783; ii; ii -= 16)
      {
        if (*(_BYTE *)(v778 + 40))
        {
          *(_QWORD *)&v950 = v778 + 16;
          sub_20E9F3D4C((uint64_t **)&v950, 1u);
        }
        else
        {
          LOBYTE(v950) = 1;
          std::ostream::write();
        }
        sub_20E9EE95C(v778);
        if (*(_BYTE *)(v778 + 40))
        {
          *(_QWORD *)&v950 = v778 + 16;
          sub_20E9F472C((uint64_t **)&v950, *(_QWORD *)(v784 - 3));
          if (*(_BYTE *)(v778 + 40))
            goto LABEL_1366;
        }
        else
        {
          sub_20E9F4A34();
          v778 = v903;
          if (*(_BYTE *)(v903 + 40))
          {
LABEL_1366:
            *(_QWORD *)&v950 = v778 + 16;
            sub_20E9F3D4C((uint64_t **)&v950, *(v784 - 1));
            if (!*(_BYTE *)(v778 + 40))
              goto LABEL_1370;
            goto LABEL_1367;
          }
        }
        sub_20E9F3FC0((uint64_t)&v950, v778 + 8);
        v778 = v903;
        if (!*(_BYTE *)(v903 + 40))
        {
LABEL_1370:
          sub_20E9F3FC0((uint64_t)&v950, v778 + 8);
          v778 = v903;
          goto LABEL_1371;
        }
LABEL_1367:
        *(_QWORD *)&v950 = v778 + 16;
        sub_20E9F3D4C((uint64_t **)&v950, *v784);
LABEL_1371:
        v786 = *(_QWORD *)(*(_QWORD *)(v778 + 88) - 8);
        sub_20E9EE4D0((uint64_t *)(v778 + 48), *(_QWORD *)(v778 + 16) - v786 - 9);
        v787 = *(_QWORD *)(v778 + 48);
        if (v787)
          memmove((void *)(*(_QWORD *)(v778 + 24) + v786), *(const void **)(v778 + 56), v787);
        *(_QWORD *)(v778 + 48) = 0;
        v788 = *(_QWORD *)(v778 + 80);
        v789 = *(_QWORD *)(v778 + 88) - 8;
        *(_QWORD *)(v778 + 88) = v789;
        if (v788 == v789)
        {
          std::ostream::write();
          if (*(_BYTE *)(v778 + 40))
          {
            free(*(void **)(v778 + 24));
            *(_BYTE *)(v778 + 40) = 0;
          }
        }
        v784 += 4;
      }
    }
    if (v781)
      operator delete(v781);
    v790 = v903;
    v791 = *(_QWORD *)(*(_QWORD *)(v903 + 88) - 8);
    v792 = (size_t *)(v903 + 48);
    sub_20E9EE4D0((uint64_t *)(v903 + 48), *(_QWORD *)(v903 + 16) - v791 - 9);
    if (*v792)
      memmove((void *)(*(_QWORD *)(v790 + 24) + v791), *(const void **)(v790 + 56), *v792);
    *(_QWORD *)(v790 + 48) = 0;
    v793 = *(_QWORD *)(v790 + 80);
    v794 = *(_QWORD *)(v790 + 88) - 8;
    *(_QWORD *)(v790 + 88) = v794;
    if (v793 == v794)
    {
      std::ostream::write();
      if (*(_BYTE *)(v790 + 40))
      {
        free(*(void **)(v790 + 24));
        *(_BYTE *)(v790 + 40) = 0;
      }
    }
    if (((uint64_t)__p[13] & 0x10) != 0)
    {
      v797 = __p[12];
      if (__p[12] < __p[7])
      {
        __p[12] = __p[7];
        v797 = __p[7];
      }
      v798 = __p[6];
      v795 = v797 - (char *)__p[6];
      if ((unint64_t)(v797 - (char *)__p[6]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1453;
    }
    else
    {
      if (((uint64_t)__p[13] & 8) == 0)
      {
        v795 = 0;
        v899[7] = 0;
        v796 = v898;
        goto LABEL_1396;
      }
      v798 = __p[3];
      v795 = (char *)__p[5] - (char *)__p[3];
      if ((void *)((char *)__p[5] - (char *)__p[3]) > (void *)0x7FFFFFFFFFFFFFF7)
LABEL_1453:
        sub_20E860B7C();
    }
    if (v795 >= 0x17)
    {
      v799 = (v795 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v795 | 7) != 0x17)
        v799 = v795 | 7;
      v800 = v799 + 1;
      v796 = operator new(v799 + 1);
      v898[1] = (void *)v795;
      *(_QWORD *)v899 = v800 | 0x8000000000000000;
      v898[0] = v796;
    }
    else
    {
      v899[7] = v795;
      v796 = v898;
      if (!v795)
        goto LABEL_1396;
    }
    memmove(v796, v798, v795);
LABEL_1396:
    *((_BYTE *)v796 + v795) = 0;
    v941 = 0;
    v940 = 0uLL;
    v801 = v899[7];
    if (v899[7] >= 0)
      v802 = v899[7];
    else
      v802 = (size_t)v898[1];
    if (v802)
    {
      if ((v802 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v803 = (char *)operator new(v802);
      bzero(v803, v802);
      v940.i64[0] = (uint64_t)v803;
      v940.i64[1] = (uint64_t)&v803[v802];
      v941 = &v803[v802];
      if (v801 >= 0)
        v804 = v898;
      else
        v804 = (void **)v898[0];
      memmove(v803, v804, v802);
    }
    if (v801 < 0)
      operator delete(v898[0]);
    v805 = v903;
    v806 = MEMORY[0x24BEDB800];
    if (v903)
    {
      v807 = *(void **)(v903 + 80);
      if (v807)
      {
        *(_QWORD *)(v903 + 88) = v807;
        operator delete(v807);
      }
      if (*(_BYTE *)(v805 + 72))
        free(*(void **)(v805 + 56));
      if (*(_BYTE *)(v805 + 40))
        free(*(void **)(v805 + 24));
      MEMORY[0x212BC6398](v805, 0x1030C408C1A3048);
    }
    __p[0] = *(void **)v806;
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v806 + 24);
    __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    if (SHIBYTE(__p[11]) < 0)
      operator delete(__p[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x212BC6290](&__p[14]);
    if (SHIBYTE(v947) < 0)
      operator delete((void *)v946.i64[0]);
    memset(__p, 0, 24);
    LOBYTE(v900) = 8;
    v424 = __dst;
    v808 = __dst[28];
    if (!v808)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **, int64x2_t *, void **))(*(_QWORD *)v808 + 48))(v808, &v900, &v940, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v940.i64[0])
    {
      v940.i64[1] = v940.i64[0];
      operator delete((void *)v940.i64[0]);
    }
    if (__srcf)
      operator delete(__srcf);
LABEL_1426:
    v809 = v756 + 32;
    v810 = v424[20];
    if (v756 + 32 == v810)
    {
      if (v809 == v756)
      {
LABEL_1437:
        v424[20] = v756;
        kdebug_trace();
        goto LABEL_1438;
      }
    }
    else
    {
      do
      {
        v813 = *(char **)v756;
        if (*(_QWORD *)v756)
        {
          *(_QWORD *)(v756 + 8) = v813;
          operator delete(v813);
          *(_QWORD *)(v756 + 8) = 0;
          *(_QWORD *)(v756 + 16) = 0;
        }
        v811 = v756 + 32;
        *(_OWORD *)v756 = *(_OWORD *)(v756 + 32);
        *(_QWORD *)(v756 + 16) = *(_QWORD *)(v756 + 48);
        *(_QWORD *)(v756 + 40) = 0;
        *(_QWORD *)(v756 + 48) = 0;
        *(_QWORD *)(v756 + 32) = 0;
        *(_BYTE *)(v756 + 24) = *(_BYTE *)(v756 + 56);
        v812 = v756 + 64;
        v756 += 32;
      }
      while (v812 != v810);
      v809 = v424[20];
      v756 = v811;
      if (v809 == v811)
        goto LABEL_1437;
    }
    v814 = v809;
    do
    {
      v816 = *(void **)(v814 - 32);
      v814 -= 32;
      v815 = v816;
      if (v816)
      {
        *(_QWORD *)(v809 - 24) = v815;
        operator delete(v815);
      }
      v809 = v814;
    }
    while (v814 != v756);
    goto LABEL_1437;
  }
LABEL_1438:
  v818 = v424[22];
  v817 = v424[23];
  if (v818 != v817)
  {
    while (!*(_BYTE *)(v818 + 32))
    {
      v818 += 40;
      if (v818 == v817)
        goto LABEL_1546;
    }
  }
  if (v818 != v817)
  {
    v900 = (void *)9;
    v901 = 0;
    v902 = 0;
    v903 = 0;
    v904 = 733222324;
    kdebug_trace();
    if (!v424[28])
      goto LABEL_1530;
    v819 = *(_QWORD *)(v818 + 24);
    memset(v913, 0, 24);
    memset(&v913[4], 0, 53);
    v913[3] = &v913[4];
    LOBYTE(v913[12]) = 0;
    if (!v819)
      sub_20E86D37C();
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v819 + 48))(__p);
    if (!LOBYTE(__p[13]))
    {
LABEL_1522:
      sub_20E86872C((uint64_t)&v913[3], (_QWORD *)v913[4]);
      v863 = (char *)v913[0];
      if (v913[0])
      {
        v864 = v913[1];
        v865 = v913[0];
        if (v913[1] != v913[0])
        {
          v866 = (char *)v913[1];
          do
          {
            v868 = (void *)*((_QWORD *)v866 - 6);
            v866 -= 48;
            v867 = v868;
            if (v868)
            {
              *(v864 - 5) = v867;
              operator delete(v867);
            }
            v864 = v866;
          }
          while (v866 != v863);
          v865 = v913[0];
        }
        v913[1] = v863;
        operator delete(v865);
      }
LABEL_1530:
      v869 = v818 + 40;
      v870 = v424[23];
      if (v818 + 40 == v870)
      {
        if (v869 != v818)
          goto LABEL_1553;
LABEL_1545:
        v424[23] = v818;
        kdebug_trace();
        goto LABEL_1546;
      }
      while (1)
      {
        v871 = (_QWORD *)(v869 - 16);
        v872 = *(_QWORD **)(v869 - 16);
        *(_QWORD *)(v869 - 16) = 0;
        if ((_QWORD *)(v869 - 40) == v872)
        {
          v872 = (_QWORD *)(v869 - 40);
          v873 = 4;
        }
        else
        {
          if (!v872)
            goto LABEL_1541;
          v873 = 5;
        }
        (*(void (**)(void))(*v872 + 8 * v873))();
LABEL_1541:
        v874 = *(_QWORD *)(v869 + 24);
        if (v874)
        {
          if (v869 == v874)
          {
            *(_QWORD *)(v869 - 16) = v869 - 40;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v869 + 24))(v869, v869 - 40);
            goto LABEL_1535;
          }
          *v871 = v874;
          v871 = (_QWORD *)(v869 + 24);
        }
        *v871 = 0;
LABEL_1535:
        *(_BYTE *)(v869 - 8) = *(_BYTE *)(v869 + 32);
        v869 += 40;
        if (v869 == v870)
        {
          v818 = v869 - 40;
          v424 = __dst;
          v869 = __dst[23];
          if (v869 == v818)
            goto LABEL_1545;
LABEL_1553:
          while (2)
          {
            v880 = v869 - 40;
            v878 = *(_QWORD **)(v869 - 16);
            if ((_QWORD *)(v869 - 40) != v878)
            {
              if (v878)
              {
                v879 = 5;
LABEL_1551:
                (*(void (**)(void))(*v878 + 8 * v879))();
              }
              v869 -= 40;
              if (v880 == v818)
                goto LABEL_1545;
              continue;
            }
            break;
          }
          v878 = (_QWORD *)(v869 - 40);
          v879 = 4;
          goto LABEL_1551;
        }
      }
    }
    v820 = (char *)v913[0];
    if (v913[0])
    {
      v821 = v913[1];
      v822 = v913[0];
      if (v913[1] != v913[0])
      {
        v823 = (char *)v913[1];
        do
        {
          v825 = (void *)*((_QWORD *)v823 - 6);
          v823 -= 48;
          v824 = v825;
          if (v825)
          {
            *(v821 - 5) = v824;
            operator delete(v824);
          }
          v821 = v823;
        }
        while (v823 != v820);
        v822 = v913[0];
      }
      v913[1] = v820;
      operator delete(v822);
    }
    *(_OWORD *)v913 = *(_OWORD *)__p;
    v913[2] = __p[2];
    memset(__p, 0, 24);
    sub_20E86872C((uint64_t)&v913[3], (_QWORD *)v913[4]);
    v826 = __p[4];
    v913[3] = __p[3];
    v913[4] = __p[4];
    v913[5] = __p[5];
    if (__p[5])
    {
      *((_QWORD *)__p[4] + 2) = &v913[4];
      __p[3] = &__p[4];
      __p[4] = 0;
      __p[5] = 0;
      v826 = 0;
    }
    else
    {
      v913[3] = &v913[4];
    }
    *(_OWORD *)&v913[6] = *(_OWORD *)&__p[6];
    *(_OWORD *)&v913[8] = *(_OWORD *)&__p[8];
    *(_OWORD *)&v913[10] = *(_OWORD *)&__p[10];
    LODWORD(v913[12]) = __p[12];
    if (LOBYTE(__p[13]))
    {
      sub_20E86872C((uint64_t)&__p[3], v826);
      v827 = (char *)__p[0];
      if (__p[0])
      {
        v828 = __p[1];
        v829 = __p[0];
        if (__p[1] != __p[0])
        {
          v830 = (char *)__p[1];
          do
          {
            v832 = (void *)*((_QWORD *)v830 - 6);
            v830 -= 48;
            v831 = v832;
            if (v832)
            {
              *(v828 - 5) = v831;
              operator delete(v831);
            }
            v828 = v830;
          }
          while (v830 != v827);
          v829 = __p[0];
        }
        __p[1] = v827;
        operator delete(v829);
      }
    }
    v833 = (uint64_t *)__dst[29];
    if (v833)
      sub_20F46840C(v833, v913);
    v950 = 0uLL;
    v951 = 0;
    v834 = MEMORY[0x24BEDB870];
    v835 = (void *)(MEMORY[0x24BEDB870] + 64);
    v836 = MEMORY[0x24BEDB800];
    v837 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v838 = *(void **)(MEMORY[0x24BEDB800] + 16);
    __p[14] = (void *)(MEMORY[0x24BEDB870] + 64);
    __p[0] = v837;
    *(void **)((char *)__p + *((_QWORD *)v837 - 3)) = v838;
    v839 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v839, &__p[1]);
    v839[1].__vftable = 0;
    v839[1].__fmtflags_ = -1;
    __p[0] = (void *)(v834 + 24);
    __p[14] = v835;
    std::streambuf::basic_streambuf();
    v840 = MEMORY[0x24BEDB848];
    __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    memset(&__p[9], 0, 32);
    LODWORD(__p[13]) = 16;
    v898[0] = &off_24C9B7040;
    v898[1] = (void *)1;
    *(_QWORD *)v899 = &unk_24C9B7190;
    v841 = operator new();
    *(_QWORD *)v841 = __p;
    *(_QWORD *)(v841 + 8) = __p;
    *(_BYTE *)(v841 + 16) = 0;
    *(_BYTE *)(v841 + 40) = 0;
    *(_BYTE *)(v841 + 48) = 0;
    *(_BYTE *)(v841 + 72) = 0;
    *(_QWORD *)(v841 + 88) = 0;
    *(_QWORD *)(v841 + 96) = 0;
    *(_QWORD *)(v841 + 80) = 0;
    *(_QWORD *)&v899[8] = v841;
    v898[0] = &off_24C9B4468;
    *(_QWORD *)v899 = &unk_24C9B45B8;
    v842 = HIBYTE(v951);
    if (v951 < 0)
      v842 = *((_QWORD *)&v950 + 1);
    if (v842 && (sub_20E9F5254((uint64_t)&v940, v841 + 8, (uint64_t)&v950), *(_BYTE *)(*(_QWORD *)&v899[8] + 40)))
    {
      v940.i64[0] = *(_QWORD *)&v899[8] + 16;
      sub_20E9F3D4C((uint64_t **)&v940, 4u);
    }
    else
    {
      v940.i8[0] = 4;
      std::ostream::write();
    }
    sub_20E9EE95C(*(uint64_t *)&v899[8]);
    sub_20EF99314((uint64_t)v898, (uint64_t)v913, 4u);
    v843 = *(_QWORD *)&v899[8];
    v844 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v899[8] + 88) - 8);
    v845 = (size_t *)(*(_QWORD *)&v899[8] + 48);
    sub_20E9EE4D0((uint64_t *)(*(_QWORD *)&v899[8] + 48), *(_QWORD *)(*(_QWORD *)&v899[8] + 16) - v844 - 9);
    if (*v845)
      memmove((void *)(*(_QWORD *)(v843 + 24) + v844), *(const void **)(v843 + 56), *v845);
    *(_QWORD *)(v843 + 48) = 0;
    v846 = *(_QWORD *)(v843 + 80);
    v847 = *(_QWORD *)(v843 + 88) - 8;
    *(_QWORD *)(v843 + 88) = v847;
    if (v846 == v847)
    {
      std::ostream::write();
      if (*(_BYTE *)(v843 + 40))
      {
        free(*(void **)(v843 + 24));
        *(_BYTE *)(v843 + 40) = 0;
      }
    }
    if (((uint64_t)__p[13] & 0x10) != 0)
    {
      v850 = __p[12];
      if (__p[12] < __p[7])
      {
        __p[12] = __p[7];
        v850 = __p[7];
      }
      v851 = __p[6];
      v848 = v850 - (char *)__p[6];
      if ((unint64_t)(v850 - (char *)__p[6]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1559;
    }
    else
    {
      if (((uint64_t)__p[13] & 8) == 0)
      {
        v848 = 0;
        HIBYTE(v941) = 0;
        v849 = &v940;
        goto LABEL_1494;
      }
      v851 = __p[3];
      v848 = (char *)__p[5] - (char *)__p[3];
      if ((void *)((char *)__p[5] - (char *)__p[3]) > (void *)0x7FFFFFFFFFFFFFF7)
LABEL_1559:
        sub_20E860B7C();
    }
    if (v848 >= 0x17)
    {
      v852 = v836;
      v853 = v840;
      v854 = (v848 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v848 | 7) != 0x17)
        v854 = v848 | 7;
      v855 = v854 + 1;
      v849 = (int64x2_t *)operator new(v854 + 1);
      v940.i64[1] = v848;
      v941 = (char *)(v855 | 0x8000000000000000);
      v940.i64[0] = (uint64_t)v849;
      v840 = v853;
      v836 = v852;
    }
    else
    {
      HIBYTE(v941) = v848;
      v849 = &v940;
      if (!v848)
        goto LABEL_1494;
    }
    memmove(v849, v851, v848);
LABEL_1494:
    v849->i8[v848] = 0;
    v947 = 0;
    v946 = 0uLL;
    v856 = SHIBYTE(v941);
    if (SHIBYTE(v941) >= 0)
      v857 = HIBYTE(v941);
    else
      v857 = v940.u64[1];
    if (v857)
    {
      if ((v857 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v858 = (char *)operator new(v857);
      bzero(v858, v857);
      v946.i64[0] = (uint64_t)v858;
      v946.i64[1] = (uint64_t)&v858[v857];
      v947 = &v858[v857];
      if (v856 >= 0)
        v859 = &v940;
      else
        v859 = (int64x2_t *)v940.i64[0];
      memmove(v858, v859, v857);
    }
    if (v856 < 0)
      operator delete((void *)v940.i64[0]);
    v898[0] = &off_24C9B7040;
    v860 = *(_QWORD *)&v899[8];
    *(_OWORD *)v899 = (unint64_t)&unk_24C9B7190;
    if (v860)
    {
      v861 = *(void **)(v860 + 80);
      if (v861)
      {
        *(_QWORD *)(v860 + 88) = v861;
        operator delete(v861);
      }
      if (*(_BYTE *)(v860 + 72))
        free(*(void **)(v860 + 56));
      if (*(_BYTE *)(v860 + 40))
        free(*(void **)(v860 + 24));
      MEMORY[0x212BC6398](v860, 0x1030C408C1A3048);
    }
    __p[0] = *(void **)v836;
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v836 + 24);
    __p[1] = (void *)(v840 + 16);
    if (SHIBYTE(__p[11]) < 0)
      operator delete(__p[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x212BC6290](&__p[14]);
    if (SHIBYTE(v951) < 0)
      operator delete((void *)v950);
    memset(__p, 0, 24);
    LOBYTE(v898[0]) = 9;
    v424 = __dst;
    v862 = __dst[28];
    if (!v862)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **, int64x2_t *, void **))(*(_QWORD *)v862 + 48))(v862, v898, &v946, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v946.i64[0])
    {
      v946.i64[1] = v946.i64[0];
      operator delete((void *)v946.i64[0]);
    }
    goto LABEL_1522;
  }
LABEL_1546:
  v875 = v894[10];
  if (*(_BYTE *)(v875 + 2499))
  {
    v876 = *(_QWORD *)(v875 + 2824);
    for (jj = *(_QWORD *)(v875 + 2832); v876 != jj; v876 += 4472)
      sub_20F3B4108(*(_QWORD **)(v876 + 192), **(_QWORD **)(*(_QWORD *)(v876 + 16) + 424));
  }
  else
  {
    sub_20F3B4108(*(_QWORD **)(*(_QWORD *)(v875 + 2816) + 192), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v875 + 2816) + 16) + 424));
  }
  kdebug_trace();
  return 0;
}

void sub_20F2F0DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a64;
  void *v65;

  v65 = (void *)STACK[0x570];
  if (STACK[0x570])
  {
    STACK[0x578] = (unint64_t)v65;
    operator delete(v65);
  }
  if (a63)
  {
    a64 = a63;
    operator delete(a63);
  }
  sub_20E89FB98(&a29);
  sub_20E8E69C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F2F1704(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *i;
  int v23;
  BOOL v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  char *v29;
  int v30;
  void **v31;

  sub_20F324230(*(uint64_t **)(a1 + 80), (uint64_t)&v25);
  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if (v3)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = operator new(4 * v3);
    v5 = v4;
    v27 = v4;
    v28 = v4;
    v29 = &v4[4 * v3];
    v31 = (void **)&v27;
    if (!v2)
    {
LABEL_4:
      v6 = v25;
      v7 = v26;
      if (v25 != v26)
        goto LABEL_5;
LABEL_14:
      LOBYTE(v10) = 0;
      if (v4 == v5)
        goto LABEL_27;
      goto LABEL_15;
    }
  }
  else
  {
    v5 = 0;
    v31 = (void **)&v27;
    v4 = 0;
    if (!v2)
      goto LABEL_4;
  }
  do
  {
    v30 = *((_DWORD *)v2 + 82);
    sub_20EA9AB98((uint64_t *)&v31, &v30);
    v2 = (uint64_t *)*v2;
  }
  while (v2);
  v4 = v27;
  v5 = v28;
  v6 = v25;
  v7 = v26;
  if (v25 == v26)
    goto LABEL_14;
LABEL_5:
  v8 = v6 + 4;
  do
  {
    v9 = *((_DWORD *)v8 - 1);
    v10 = (v9 >> 4) & 1;
    if ((v9 & 0x10) != 0)
      break;
    v24 = v8 == v7;
    v8 += 4;
  }
  while (!v24);
  if (v4 == v5)
  {
LABEL_27:
    v14 = *(_QWORD *)(a1 + 80);
    v15 = *(_QWORD *)(v14 + 2824);
    v16 = *(_QWORD *)(v14 + 2832);
    if (v15 == v16)
      goto LABEL_34;
    v17 = v16 - v15 - 4472;
    if (v17 >> 3 >= 0x22F)
    {
      v19 = v17 / 0x1178 + 1;
      v18 = v15 + 4472 * (v19 & 0x1FFFFFFFFFFFFELL);
      v20 = v19 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v21 = *(_DWORD *)(v15 + 4776) | 0x80;
        *(_DWORD *)(v15 + 304) |= 0x80u;
        *(_DWORD *)(v15 + 4776) = v21;
        v15 += 8944;
        v20 -= 2;
      }
      while (v20);
      if (v19 == (v19 & 0x1FFFFFFFFFFFFELL))
      {
LABEL_34:
        for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
        {
          v23 = *((_DWORD *)i + 82);
          v24 = (v23 & 0x140) != 0 && (i[41] & 0x200) == 0;
          if (v24)
            *((_DWORD *)i + 82) = v23 | 0x80;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v18 = v15;
    }
    do
    {
      *(_DWORD *)(v18 + 304) |= 0x80u;
      v18 += 4472;
    }
    while (v18 != v16);
    goto LABEL_34;
  }
LABEL_15:
  v11 = v4;
  while ((*v11 & 0x10) == 0)
  {
    v11 += 4;
    if (v11 == v5)
    {
      v12 = v4;
      goto LABEL_25;
    }
  }
  v12 = v4;
  if ((v10 & 1) != 0)
  {
LABEL_25:
    while ((*v12 & 0x80) == 0)
    {
      v12 += 4;
      if (v12 == v5)
        goto LABEL_27;
    }
  }
  else
  {
    v13 = v4;
    do
    {
      if ((*v13 & 0x10) != 0 && (*v13 & 0x140) != 0)
      {
        v12 = v4;
        goto LABEL_25;
      }
      ++v13;
    }
    while (v13 != (_DWORD *)v5);
  }
LABEL_43:
  if (v4)
  {
    operator delete(v4);
    v6 = v25;
  }
  if (v6)
    operator delete(v6);
}

void sub_20F2F1970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v14;

  if (__p)
  {
    operator delete(__p);
    v14 = a9;
    if (!a9)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v14 = a9;
    if (!a9)
      goto LABEL_3;
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_20F2F19AC(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  void *object;
  void *v72[2];
  __int128 v73;
  void *__p[2];
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  if (!*(_BYTE *)(a1 + 2264))
  {
    bzero((void *)(a1 + 1352), 0x390uLL);
    *(_BYTE *)(a1 + 2264) = 1;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a1 + 1712))
  {
LABEL_12:
    v6 = *a2;
    goto LABEL_98;
  }
  v6 = *a2;
  if (*(_QWORD *)(a1 + 1696) != *a2)
  {
LABEL_97:
    *(_BYTE *)(a1 + 1712) = 0;
    goto LABEL_98;
  }
  sub_20F2FC0E0(&v70);
  if (**(int **)(v70 + 56) > 4)
    goto LABEL_96;
  v7 = *(unsigned __int8 *)(v70 + 72);
  v8 = sub_20E8C31DC(v70, "OSLogSurrogateAppender", 1, 0);
  if (!v7 && v8 == 0)
    goto LABEL_96;
  v10 = v8;
  v63[0] = &v70;
  v63[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v63[2] = std::chrono::system_clock::now().__d_.__rep_;
  v64 = 4;
  v65 = "unknown file";
  v66 = 1606;
  v68 = 0;
  v69 = 0;
  v67 = "unknown function";
  v62 = v70;
  if (*(char *)(v70 + 39) < 0)
  {
    v12 = *(const char **)(v70 + 16);
    v11 = *(_QWORD *)(v70 + 24);
  }
  else
  {
    v11 = *(unsigned __int8 *)(v70 + 39);
    v12 = (const char *)(v70 + 16);
  }
  v61 = v70 + 16;
  v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v73 && SHIBYTE(v72[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8;
  else
    v14 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8[23];
  else
    v15 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v14, v12);
  v16 = v72;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v60 = v12;
    v17 = v10;
    v18 = v7;
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v16 = operator new(v19 + 1);
    v72[1] = (void *)v15;
    *(_QWORD *)&v73 = v20 | 0x8000000000000000;
    v72[0] = v16;
    v7 = v18;
    v10 = v17;
    v12 = v60;
    goto LABEL_28;
  }
  BYTE7(v73) = v15;
  if (v15)
LABEL_28:
    memmove(v16, v14, v15);
  *((_BYTE *)v16 + v15) = 0;
  BYTE8(v73) = 1;
  v21 = __p;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v11 >= 0x17)
  {
    v22 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v22 = v11 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    __p[1] = (void *)v11;
    v75 = v23 | 0x8000000000000000;
    __p[0] = v21;
  }
  else
  {
    HIBYTE(v75) = v11;
    if (!v11)
      goto LABEL_37;
  }
  memmove(v21, v12, v11);
LABEL_37:
  *((_BYTE *)v21 + v11) = 0;
  v76 = 1;
  v24 = object;
  if (SHIBYTE(v75) < 0)
    operator delete(__p[0]);
  if (BYTE8(v73) && SBYTE7(v73) < 0)
    operator delete(v72[0]);
  if (object)
    os_release(object);
  if (v10 && *(_QWORD *)(v10 + 24))
  {
    v25 = _os_log_pack_size();
    v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
    v27 = (std::__shared_weak_count *)operator new();
    v28 = v27;
    v27->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = v26;
    object = v26;
    v72[0] = v26;
    v72[1] = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v73 = 0uLL;
    __p[0] = 0;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v32 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v33 = operator new();
    v34 = *(unsigned __int8 *)(v62 + 39);
    v35 = v61;
    if ((v34 & 0x80u) != 0)
    {
      v35 = *(_QWORD *)(v62 + 16);
      v34 = *(_QWORD *)(v62 + 24);
    }
    *(_QWORD *)v33 = v32;
    *(_OWORD *)(v33 + 8) = *(_OWORD *)v72;
    v72[0] = 0;
    v72[1] = 0;
    *(_OWORD *)(v33 + 24) = v73;
    v73 = 0uLL;
    *(_QWORD *)(v33 + 40) = v35;
    *(_QWORD *)(v33 + 48) = v34;
    *(_BYTE *)(v33 + 56) = 16;
    v77 = 0;
    v78 = v33;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v78);
    v36 = v78;
    v78 = 0;
    if (v36)
    {
      v37 = *(std::__shared_weak_count **)(v36 + 32);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(std::__shared_weak_count **)(v36 + 16);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MEMORY[0x212BC6398](v36, 0x10F0C40B62ED6C6);
      v43 = v77;
      v77 = 0;
      if (v43)
      {
        v44 = *(std::__shared_weak_count **)(v43 + 32);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = *(std::__shared_weak_count **)(v43 + 16);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)v72[1];
    if (v72[1])
    {
      v54 = (unint64_t *)((char *)v72[1] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v56 = (void *)_os_log_send_and_compose_impl();
    if (v56)
      free(v56);
  }
  if (v7)
  {
    sub_20E8C003C((uint64_t)v63, "The new submap id is not consumed by front-end, resend again");
    sub_20E863570((uint64_t)v63);
  }
  sub_20E863570((uint64_t)v63);
  v57 = v69;
  if (v69)
  {
    v58 = (unint64_t *)&v69->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
LABEL_96:
  v6 = *a2;
  if (*(_BYTE *)(a1 + 1712))
    goto LABEL_97;
LABEL_98:
  *(_QWORD *)(a1 + 1696) = v6;
  *(_BYTE *)(a1 + 1704) = a3;
  *(_DWORD *)(a1 + 1708) = *(_DWORD *)((char *)&object + 3);
  *(_DWORD *)(a1 + 1705) = (_DWORD)object;
  *(_BYTE *)(a1 + 1712) = 1;
}

void sub_20F2F20D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F2F2118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v7 - 96));
  sub_20E86E8C4((uint64_t *)(v7 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2F2144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2F2160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v7, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2F218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2F21A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2F21BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a32 && a31 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__n128 sub_20F2F2200@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  float64x2_t v93;
  float64x2_t v94;
  uint64_t v95;
  BOOL v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  double v104;
  uint64_t v110;
  unsigned int v111;
  uint64_t *v112;
  unsigned int v113;
  BOOL v114;
  _QWORD *v116;
  _BOOL4 v117;
  unint64_t *v118;
  int8x8_t *v119;
  int8x8_t v120;
  unint64_t v121;
  uint8x8_t v122;
  unint64_t v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *i;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  _BYTE *v147;
  _BYTE *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  char *j;
  uint64_t v161;
  uint64_t v162;
  double v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  double v168;
  float64x2_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t k;
  void **v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  void *v187;
  void *v188;
  void *v189;
  _OWORD *v190;
  void **v191;
  _QWORD *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  void *v196;
  __n128 result;
  __int128 v198;
  void *__p;
  void *v201;
  __int128 v202;
  __int128 v203;
  int v204;
  _BYTE v205[32];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  char v213;
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 *)(a2 + 347);
  if (*(_BYTE *)(a2 + 347))
    _ZF = 1;
  else
    _ZF = *(_BYTE *)(a1 + 2321) == 0;
  if (_ZF)
  {
    if (*(_BYTE *)(a1 + 2321))
      goto LABEL_216;
    v7 = sub_20F2F3290((_QWORD *)a1);
    if (*(_BYTE *)(a2 + 560))
    {
LABEL_10:
      v14 = (__int128 *)(a2 + 432);
      v15 = *(_QWORD *)(a1 + 80);
      v16 = *(_QWORD *)(v15 + 2824);
      v17 = *(_QWORD *)(v15 + 2832);
      if (v16 == v17)
      {
        v19 = (_OWORD *)(v7 + 992);
        v20 = *(unsigned __int8 *)(v7 + 1120);
        if (v20 == 1)
          goto LABEL_13;
      }
      else
      {
        do
        {
          v18 = *(_QWORD *)(v16 + 16);
          sub_20FCE8D4C(a2 + 432, *(_QWORD **)(v18 + 424));
          sub_20FCC8C14((uint64_t *)v18, **(_QWORD **)(v18 + 424));
          (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 200) + 16))(*(_QWORD *)(v16 + 200));
          v16 += 4472;
        }
        while (v16 != v17);
        v19 = (_OWORD *)(v7 + 992);
        v20 = *(unsigned __int8 *)(v7 + 1120);
        if (v20 == *(unsigned __int8 *)(a2 + 560))
        {
LABEL_13:
          if (v20)
          {
            v21 = *v14;
            v22 = *(_OWORD *)(a2 + 448);
            v23 = *(_OWORD *)(a2 + 480);
            v19[2] = *(_OWORD *)(a2 + 464);
            v19[3] = v23;
            *v19 = v21;
            v19[1] = v22;
            v24 = *(_OWORD *)(a2 + 496);
            v25 = *(_OWORD *)(a2 + 512);
            v26 = *(_OWORD *)(a2 + 544);
            v19[6] = *(_OWORD *)(a2 + 528);
            v19[7] = v26;
            v19[4] = v24;
            v19[5] = v25;
          }
          goto LABEL_19;
        }
      }
      if (v20)
      {
        *(_BYTE *)(v7 + 1120) = 0;
      }
      else
      {
        v27 = *v14;
        v28 = *(_OWORD *)(a2 + 448);
        v29 = *(_OWORD *)(a2 + 480);
        v19[2] = *(_OWORD *)(a2 + 464);
        v19[3] = v29;
        *v19 = v27;
        v19[1] = v28;
        v30 = *(_OWORD *)(a2 + 496);
        v31 = *(_OWORD *)(a2 + 512);
        v32 = *(_OWORD *)(a2 + 544);
        v19[6] = *(_OWORD *)(a2 + 528);
        v19[7] = v32;
        v19[4] = v30;
        v19[5] = v31;
        *(_BYTE *)(v7 + 1120) = 1;
      }
LABEL_19:
      *(_WORD *)(v7 + 984) = 257;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 2321) = 0;
    v8 = sub_20F2F3290((_QWORD *)a1);
    v7 = v8;
    if (*(_BYTE *)(a2 + 560))
      goto LABEL_10;
  }
  *(_BYTE *)(a1 + 1040) = *(_BYTE *)(a2 + 394);
  v33 = (uint64_t *)(a2 + 48);
  v34 = (_QWORD *)(a1 + 1048);
  v35 = *(unsigned __int8 *)(a1 + 1192);
  if (v35 == *(unsigned __int8 *)(a2 + 192))
  {
    if (*(_BYTE *)(a1 + 1192))
    {
      LOBYTE(v35) = 0;
      v36 = *v33;
      *(_DWORD *)(a1 + 1056) = *(_DWORD *)(a2 + 56);
      *v34 = v36;
      v37 = *(_OWORD *)(a2 + 176);
      v39 = *(_OWORD *)(a2 + 128);
      v38 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 1176) = v37;
      *(_OWORD *)(a1 + 1128) = v39;
      *(_OWORD *)(a1 + 1144) = v38;
      v40 = *(_OWORD *)(a2 + 64);
      v41 = *(_OWORD *)(a2 + 80);
      v42 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 1112) = v42;
      *(_OWORD *)(a1 + 1064) = v40;
      *(_OWORD *)(a1 + 1080) = v41;
      v43 = *(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(v43 + 2652))
        goto LABEL_31;
      goto LABEL_29;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1192))
    {
      *(_OWORD *)v34 = *(_OWORD *)v33;
      v44 = *(_OWORD *)(a2 + 112);
      v46 = *(_OWORD *)(a2 + 64);
      v45 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 1112) = v44;
      *(_OWORD *)(a1 + 1064) = v46;
      *(_OWORD *)(a1 + 1080) = v45;
      v47 = *(_OWORD *)(a2 + 128);
      v48 = *(_OWORD *)(a2 + 144);
      v49 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 1176) = v49;
      *(_OWORD *)(a1 + 1128) = v47;
      *(_OWORD *)(a1 + 1144) = v48;
      *(_BYTE *)(a1 + 1192) = 1;
      v43 = *(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(v43 + 2652))
        goto LABEL_31;
      goto LABEL_29;
    }
    *(_BYTE *)(a1 + 1192) = 0;
  }
  LOBYTE(v35) = 1;
  v43 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(v43 + 2652))
    goto LABEL_31;
LABEL_29:
  if ((v35 & 1) != 0 || !sub_20F325654(v43, (uint64_t *)(a1 + 1048)))
    goto LABEL_87;
LABEL_31:
  v50 = sub_20F32E01C(v43);
  if ((v50 & 0xFF00000000) == 0 || (_DWORD)v50 && !*(_BYTE *)(a1 + 1040))
    goto LABEL_87;
  kdebug_trace();
  if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 556))
  {
    v202 = 0u;
    v203 = 0u;
    v204 = 733223968;
    kdebug_trace();
    if (*(_QWORD *)(a1 + 40)
      && *(_QWORD *)(a1 + 56)
      && *(_QWORD *)(a1 + 64)
      && (v51 = *(_QWORD *)(a1 + 72)) != 0
      && (v52 = *(uint64_t **)(v51 + 144)) != 0)
    {
      do
      {
        v53 = *((_BYTE *)v52 + 28) == 0;
        if (*((_BYTE *)v52 + 28))
          break;
        v52 = (uint64_t *)*v52;
      }
      while (v52);
    }
    else
    {
      v53 = 1;
    }
    v54 = *(_QWORD *)(a1 + 80);
    v55 = *(unsigned __int8 *)(v54 + 2652);
    v205[0] = 0;
    v213 = 0;
    if (v55 && *(_BYTE *)(a1 + 1192))
    {
      v56 = *(_OWORD *)v34;
      v57 = *(_OWORD *)(a1 + 1128);
      v58 = *(_OWORD *)(a1 + 1160);
      v59 = *(_OWORD *)(a1 + 1176);
      v210 = *(_OWORD *)(a1 + 1144);
      v211 = v58;
      v212 = v59;
      v60 = *(_OWORD *)(a1 + 1064);
      v61 = *(_OWORD *)(a1 + 1080);
      *(_OWORD *)v205 = v56;
      *(_OWORD *)&v205[16] = v60;
      v62 = *(_OWORD *)(a1 + 1096);
      v63 = *(_OWORD *)(a1 + 1112);
      v206 = v61;
      v207 = v62;
      v208 = v63;
      v209 = v57;
      v213 = 1;
    }
    sub_20F328EE8(v54, v53, (uint64_t *)v205, &__p);
    sub_20F300600(a1, (uint64_t *)&__p);
    if (v213)
      v64 = sub_20F325654(*(_QWORD *)(a1 + 80), (uint64_t *)v205) == 0;
    else
      v64 = 1;
    v65 = sub_20F2F3290((_QWORD *)a1);
    *(_BYTE *)(v65 + 984) = 1;
    *(_BYTE *)(v65 + 985) = v64;
    if (!*(_BYTE *)(a1 + 2264))
    {
      bzero((void *)(a1 + 1352), 0x390uLL);
      *(_BYTE *)(a1 + 2264) = 1;
    }
    v66 = *(_QWORD **)(a1 + 80);
    v67 = v66[353];
    v68 = v66[354];
    if (v67 == v68)
    {
      v70 = 0;
    }
    else
    {
      v69 = v68 - v67 - 4472;
      if (v69 >> 3 >= 0x22F)
      {
        v70 = 0;
        v72 = 0;
        v73 = v69 / 0x1178 + 1;
        v71 = v67 + 4472 * (v73 & 0x1FFFFFFFFFFFFELL);
        v74 = v73 & 0x1FFFFFFFFFFFFELL;
        do
        {
          v75 = *(_QWORD *)(v67 + 232);
          v76 = *(_QWORD *)(v67 + 4704);
          v77 = *(unsigned __int8 *)(v75 + 32);
          v78 = *(unsigned __int8 *)(v76 + 32);
          v79 = *(_DWORD *)(v75 + 24);
          v80 = *(_DWORD *)(v76 + 24);
          if (v77)
            v79 = 0;
          if (v78)
            v80 = 0;
          if (v70 <= v79)
            v70 = v79;
          if (v72 <= v80)
            v72 = v80;
          v67 += 8944;
          v74 -= 2;
        }
        while (v74);
        if (v70 <= v72)
          v70 = v72;
        if (v73 == (v73 & 0x1FFFFFFFFFFFFELL))
          goto LABEL_74;
      }
      else
      {
        v70 = 0;
        v71 = v66[353];
      }
      do
      {
        v81 = *(_QWORD *)(v71 + 232);
        v82 = *(unsigned __int8 *)(v81 + 32);
        v83 = *(_DWORD *)(v81 + 24);
        if (v82)
          v83 = 0;
        if (v70 <= v83)
          v70 = v83;
        v71 += 4472;
      }
      while (v71 != v68);
    }
LABEL_74:
    v84 = v66[384];
    v85 = *(unsigned __int8 *)(v84 + 32);
    v86 = *(_DWORD *)(v84 + 24);
    if (v85)
      v86 = 0;
    if (v70 > v86)
      v86 = v70;
    *(_DWORD *)(a1 + 1752) = v86;
    v87 = __p;
    if (__p)
    {
      v88 = (uint64_t)v201;
      if (v201 == __p)
      {
        v89 = __p;
      }
      else
      {
        do
          v88 = sub_20F3122B4(v88 - 4472);
        while ((void *)v88 != v87);
        v89 = __p;
      }
      v201 = v87;
      operator delete(v89);
    }
    kdebug_trace();
  }
  kdebug_trace();
LABEL_87:
  v90 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v90 + 2499))
    v91 = *(_BYTE *)(a2 + 338) == 0;
  else
    v91 = 1;
  if (!v91)
  {
    v92 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)v205 = *(_QWORD *)(v90 + 2808);
    *(_QWORD *)&v205[8] = sub_20F2505E4(*(_QWORD **)(v90 + 2816));
    v95 = *(_QWORD *)(a1 + 80);
    v96 = (!*(_BYTE *)(v95 + 2499)
        || !*(_BYTE *)(v95 + 2638)
        || !*(_QWORD *)(a1 + 40)
        || !*(_QWORD *)(a1 + 56)
        || !*(_QWORD *)(a1 + 64)
        || !*(_QWORD *)(a1 + 72))
       && *(double *)(a2 + 384) < *(double *)(v95 + 984);
    v205[16] = v96;
    v97 = **(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(v95 + 2816) + 16) + 424);
    if (v97[8])
    {
      v98 = *(_QWORD *)(v97[6] + 48);
      if (*(_BYTE *)(a2 + 424))
      {
        v99 = a2 + 400;
      }
      else
      {
        v102 = (_QWORD *)v97[7];
        v100 = v97 + 7;
        v101 = v102;
        if (v102)
        {
          do
          {
            v103 = v101;
            v101 = (_QWORD *)v101[1];
          }
          while (v101);
        }
        else
        {
          do
          {
            v103 = (_QWORD *)v100[2];
            _ZF = *v103 == (_QWORD)v100;
            v100 = v103;
          }
          while (_ZF);
        }
        v99 = v103[6] + 72;
      }
      v93.f64[0] = *(float64_t *)(v99 + 16);
      v94.f64[0] = *(float64_t *)(v98 + 88);
      *(_QWORD *)&v104 = *(_OWORD *)&vsubq_f64(v93, v94);
      _D3 = vsubq_f64(*(float64x2_t *)v99, *(float64x2_t *)(v98 + 72)).f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v93.f64[0] = sqrt(vmlad_n_f64(_D2, v104, v104));
    }
    else
    {
      v93.f64[0] = 0.0;
    }
    *(float64_t *)&v205[24] = v93.f64[0];
    sub_20F3B2BEC(v92, (uint64_t)v205);
  }
  if (*(_BYTE *)(a2 + 424))
    sub_20F324408(*(_QWORD *)(a1 + 80), (uint64_t **)(a2 + 224), (float64x2_t *)(a2 + 400), v9, v10, v11, v12, v13);
  v110 = *(_QWORD *)(a1 + 72);
  if (v110)
  {
    v111 = *(_DWORD *)(v110 + 176) + 1;
    *(_DWORD *)(v110 + 176) = v111;
    v112 = *(uint64_t **)(v110 + 144);
    if (v112)
    {
      do
      {
        v113 = *((_DWORD *)v112 + 6);
        if (v111 < v113)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/TransmitterLogicNode.cpp", 98, (uint64_t)"num_cycle_cnt_ >= ext_map_session_info.second.last_count", 56, (uint64_t)&unk_21029C5A9, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v111 = *(_DWORD *)(v110 + 176);
          v113 = *((_DWORD *)v112 + 6);
        }
        *((_BYTE *)v112 + 28) = v111 - v113 < *(_DWORD *)(v110 + 16);
        v112 = (uint64_t *)*v112;
      }
      while (v112);
      v110 = *(_QWORD *)(a1 + 72);
    }
    *(_BYTE *)(v110 + 224) = *(_BYTE *)(a2 + 338);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 930))
    v114 = *(_BYTE *)(a2 + 392) == 0;
  else
    v114 = 1;
  if (v114 || *(_BYTE *)(a2 + 393) == 0)
    goto LABEL_184;
  v116 = *(_QWORD **)(a1 + 16);
  if (!v116)
    goto LABEL_184;
LABEL_134:
  v118 = v116 + 2;
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 56))
    {
      if (*(_QWORD *)(a1 + 64))
      {
        v119 = *(int8x8_t **)(a1 + 72);
        if (v119)
        {
          v120 = v119[17];
          if (!*(_QWORD *)&v120)
            goto LABEL_133;
          v121 = *v118;
          v122 = (uint8x8_t)vcnt_s8(v120);
          v122.i16[0] = vaddlv_u8(v122);
          if (v122.u32[0] > 1uLL)
          {
            v123 = *v118;
            if (v121 >= *(_QWORD *)&v120)
              v123 = v121 % *(_QWORD *)&v120;
          }
          else
          {
            v123 = (*(_QWORD *)&v120 - 1) & v121;
          }
          v124 = *(uint64_t ***)(*(_QWORD *)&v119[16] + 8 * v123);
          if (!v124)
            goto LABEL_133;
          v125 = *v124;
          if (!v125)
            goto LABEL_133;
          if (v122.u32[0] < 2uLL)
          {
            v126 = *(_QWORD *)&v120 - 1;
            while (1)
            {
              v128 = v125[1];
              if (v121 == v128)
              {
                if (v125[2] == v121)
                  goto LABEL_159;
              }
              else if ((v128 & v126) != v123)
              {
                goto LABEL_133;
              }
              v125 = (uint64_t *)*v125;
              if (!v125)
                goto LABEL_133;
            }
          }
          while (1)
          {
            v127 = v125[1];
            if (v121 == v127)
            {
              if (v125[2] == v121)
              {
LABEL_159:
                if (*((_BYTE *)v125 + 28))
                  break;
LABEL_133:
                v116 = (_QWORD *)*v116;
                if (!v116)
                  goto LABEL_184;
                goto LABEL_134;
              }
            }
            else
            {
              if (v127 >= *(_QWORD *)&v120)
                v127 %= *(_QWORD *)&v120;
              if (v127 != v123)
                goto LABEL_133;
            }
            v125 = (uint64_t *)*v125;
            if (!v125)
              goto LABEL_133;
          }
        }
      }
    }
  }
  v129 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v129 + 2499))
  {
    v130 = v116[5];
    v131 = *(_QWORD *)(v130 + 208);
    v132 = *(_QWORD *)(v130 + 216);
    if (v131 != v132)
    {
      v133 = *(_QWORD *)(v129 + 2832);
      if (*(_QWORD *)(v129 + 2824) != v133)
      {
LABEL_173:
        v138 = *(_QWORD *)(v129 + 2824);
        while (1)
        {
          v139 = *(_QWORD *)(v138 + 16);
          if (v139)
          {
            if (*(_QWORD *)(v139 + 160) == *(_QWORD *)(v131 + 24))
              break;
          }
          v138 += 4472;
          if (v138 == v133)
          {
LABEL_172:
            v131 += 472;
            if (v131 == v132)
              goto LABEL_163;
            goto LABEL_173;
          }
        }
        if (v138 == v133)
          goto LABEL_172;
        goto LABEL_133;
      }
    }
  }
LABEL_163:
  sub_20FCCBC60(v118, (std::string *)v205);
  v134 = *(_QWORD *)(v129 + 2824);
  v135 = *(_QWORD *)(v129 + 2832);
  if (v134 == v135)
  {
    v117 = 0;
    if ((v205[23] & 0x80000000) == 0)
      goto LABEL_132;
LABEL_170:
    operator delete(*(void **)v205);
    if (v117)
      goto LABEL_133;
  }
  else
  {
    do
    {
      v136 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v134 + 192) + 8), (uint64_t)v205);
      v117 = v136 != 0;
      v134 += 4472;
      if (v136)
        v137 = 1;
      else
        v137 = v134 == v135;
    }
    while (!v137);
    if ((v205[23] & 0x80000000) != 0)
      goto LABEL_170;
LABEL_132:
    if (v117)
      goto LABEL_133;
  }
  v140 = *(uint64_t **)(a2 + 224);
  for (i = *(uint64_t **)(a2 + 232); v140 != i; v140 += 2)
  {
    v142 = *(_QWORD *)(a1 + 80);
    v143 = *v140;
    v144 = v140[1];
    *(_QWORD *)v205 = operator new(0x28uLL);
    *(_OWORD *)&v205[8] = xmmword_2102DC910;
    strcpy(*(char **)v205, "MappingInterface::UpdateByFrontEndVIO");
    sub_20F24ED70(*(_QWORD **)(v142 + 2816), v143, v144, (uint64_t)v205);
    if ((v205[23] & 0x80000000) != 0)
      operator delete(*(void **)v205);
  }
LABEL_184:
  v145 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v145 + 2644))
  {
    if (!*(_BYTE *)(a1 + 2264))
    {
      bzero((void *)(a1 + 1352), 0x390uLL);
      *(_BYTE *)(a1 + 2264) = 1;
    }
    sub_20F327E24(v145, (uint64_t *)(a2 + 224), (uint64_t *)v205, *(double *)(v145 + 208));
    v146 = *(void **)(a1 + 1600);
    if (v146)
    {
      *(_QWORD *)(a1 + 1608) = v146;
      operator delete(v146);
      *(_QWORD *)(a1 + 1600) = 0;
      *(_QWORD *)(a1 + 1608) = 0;
      *(_QWORD *)(a1 + 1616) = 0;
    }
    *(_OWORD *)(a1 + 1600) = *(_OWORD *)v205;
    *(_QWORD *)(a1 + 1616) = *(_QWORD *)&v205[16];
  }
  if (!*(_BYTE *)(v7 + 984))
    goto LABEL_213;
  memset(v205, 0, 24);
  v148 = *(_BYTE **)(a2 + 24);
  v147 = *(_BYTE **)(a2 + 32);
  v149 = v147 - v148;
  if (v147 != v148)
  {
    if (v149 < 0)
      sub_20E867F44();
    v150 = (char *)operator new(v147 - v148);
    v151 = &v150[16 * (v149 >> 4)];
    *(_QWORD *)v205 = v150;
    *(_QWORD *)&v205[16] = v151;
    memcpy(v150, v148, v149 - 4);
    *(_QWORD *)&v205[8] = v151;
    v152 = *(_QWORD *)(a1 + 80);
    v153 = *(_QWORD *)(v152 + 2816);
    if (!*(_BYTE *)(v153 + 224))
      goto LABEL_211;
    goto LABEL_196;
  }
  v150 = 0;
  v151 = 0;
  v152 = *(_QWORD *)(a1 + 80);
  v153 = *(_QWORD *)(v152 + 2816);
  if (*(_BYTE *)(v153 + 224))
  {
LABEL_196:
    v154 = v151 - v150;
    v155 = (v151 - v150) >> 4;
    v156 = v155 + 1;
    if ((unint64_t)(v155 + 1) >> 60)
      sub_20E867F44();
    if (v154 >> 3 > v156)
      v156 = v154 >> 3;
    if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0)
      v157 = 0xFFFFFFFFFFFFFFFLL;
    else
      v157 = v156;
    if (v157)
    {
      if (v157 >> 60)
        sub_20E877A38();
      v158 = (char *)operator new(16 * v157);
    }
    else
    {
      v158 = 0;
    }
    v159 = &v158[16 * v155];
    *(_OWORD *)v159 = *(_OWORD *)(v153 + 208);
    for (j = v159 + 16; v151 != v150; *((_DWORD *)v159 + 2) = *((_DWORD *)v151 + 2))
    {
      v161 = *((_QWORD *)v151 - 2);
      v151 -= 16;
      *((_QWORD *)v159 - 2) = v161;
      v159 -= 16;
    }
    *(_QWORD *)v205 = v159;
    *(_QWORD *)&v205[16] = &v158[16 * v157];
    if (v150)
      operator delete(v150);
    *(_QWORD *)&v205[8] = j;
    v152 = *(_QWORD *)(a1 + 80);
  }
LABEL_211:
  sub_20F3253E0(v152, a2, (uint64_t *)(v7 + 936));
  sub_20F327218(*(_QWORD *)(a1 + 80), (uint64_t **)v205, v7 + 960);
  if (*(_QWORD *)v205)
  {
    *(_QWORD *)&v205[8] = *(_QWORD *)v205;
    operator delete(*(void **)v205);
  }
LABEL_213:
  if (v5 && !*(_BYTE *)(a1 + 2321))
    sub_20F2E5A48(a1, a2 + 341, *(double *)(a2 + 568));
LABEL_216:
  v162 = sub_20F2F3290((_QWORD *)a1);
  sub_20F2F35D0((uint64_t)v205, a1, (uint64_t **)(a2 + 200));
  sub_20EB0E45C(v162, (uint64_t)v205);
  sub_20E91E818((uint64_t)v205);
  *(_BYTE *)(v162 + 1392) = *(_BYTE *)(a1 + 2321);
  v170 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 2816);
  if (v170)
  {
    v171 = **(_QWORD **)(*(_QWORD *)(v170 + 16) + 424);
    v172 = *(_QWORD *)(v171 + 64);
    if (v172)
    {
      v175 = *(_QWORD *)(v171 + 56);
      v173 = v171 + 56;
      v174 = v175;
      if (v175)
      {
        do
        {
          v172 = v174;
          v174 = *(_QWORD *)(v174 + 8);
        }
        while (v174);
      }
      else
      {
        do
        {
          v172 = *(_QWORD *)(v173 + 16);
          _ZF = *(_QWORD *)v172 == v173;
          v173 = v172;
        }
        while (_ZF);
      }
      LOBYTE(v170) = *(_BYTE *)(v172 + 32);
      *(_QWORD *)v205 = *(_QWORD *)(v172 + 33);
      *(_QWORD *)&v205[7] = *(_QWORD *)(v172 + 40);
      LOBYTE(v172) = 1;
    }
    else
    {
      LOBYTE(v170) = 0;
    }
  }
  else
  {
    LOBYTE(v172) = 0;
  }
  *(_BYTE *)(v162 + 1232) = v170;
  *(_QWORD *)(v162 + 1240) = *(_QWORD *)&v205[7];
  *(_QWORD *)(v162 + 1233) = *(_QWORD *)v205;
  *(_BYTE *)(v162 + 1248) = v172;
  v176 = (_QWORD *)(v162 + 1336);
  *(_WORD *)(v162 + 1393) = sub_20F338AA4(*(_QWORD *)(a1 + 80), v163, v164, v165, v166, v167, v168, v169);
  if (*(_BYTE *)(v162 + 1392))
  {
    if (*(_BYTE *)(a2 + 349))
    {
      sub_20F2E5E94((_QWORD *)a1);
      if (*(_QWORD *)(a1 + 24))
      {
        v177 = *(_QWORD **)(a1 + 16);
        if (v177)
        {
          do
          {
            v178 = (_QWORD *)*v177;
            sub_20F3122B4((uint64_t)(v177 + 3));
            operator delete(v177);
            v177 = v178;
          }
          while (v178);
        }
        *(_QWORD *)(a1 + 16) = 0;
        v179 = *(_QWORD *)(a1 + 8);
        if (v179)
        {
          for (k = 0; k != v179; ++k)
            *(_QWORD *)(*(_QWORD *)a1 + 8 * k) = 0;
        }
        *(_QWORD *)(a1 + 24) = 0;
      }
    }
  }
  v181 = (void **)(v162 + 1128);
  if (*(unsigned __int8 *)(v162 + 1224) != *(unsigned __int8 *)(a1 + 2696))
  {
    if (*(_BYTE *)(v162 + 1224))
    {
      sub_20EE62D7C(v181);
      *(_BYTE *)(v162 + 1224) = 0;
      if (!*(_BYTE *)(a1 + 2696))
        goto LABEL_238;
    }
    else
    {
      *v181 = 0;
      *(_QWORD *)(v162 + 1136) = 0;
      *(_QWORD *)(v162 + 1144) = 0;
      *(_QWORD *)(v162 + 1128) = *(_QWORD *)(a1 + 2600);
      *(_QWORD *)(v162 + 1136) = *(_QWORD *)(a1 + 2608);
      *(_QWORD *)(v162 + 1144) = *(_QWORD *)(a1 + 2616);
      *(_QWORD *)(a1 + 2600) = 0;
      *(_QWORD *)(a1 + 2608) = 0;
      *(_QWORD *)(a1 + 2616) = 0;
      *(_QWORD *)(v162 + 1160) = 0;
      *(_QWORD *)(v162 + 1152) = 0;
      *(_QWORD *)(v162 + 1168) = 0;
      *(_OWORD *)(v162 + 1152) = *(_OWORD *)(a1 + 2624);
      *(_QWORD *)(v162 + 1168) = *(_QWORD *)(a1 + 2640);
      *(_QWORD *)(a1 + 2632) = 0;
      *(_QWORD *)(a1 + 2624) = 0;
      *(_QWORD *)(a1 + 2640) = 0;
      *(_QWORD *)(v162 + 1184) = 0;
      *(_QWORD *)(v162 + 1176) = 0;
      *(_QWORD *)(v162 + 1192) = 0;
      *(_QWORD *)(v162 + 1176) = *(_QWORD *)(a1 + 2648);
      *(_QWORD *)(v162 + 1184) = *(_QWORD *)(a1 + 2656);
      *(_QWORD *)(v162 + 1192) = *(_QWORD *)(a1 + 2664);
      *(_QWORD *)(a1 + 2656) = 0;
      *(_QWORD *)(a1 + 2648) = 0;
      *(_QWORD *)(a1 + 2664) = 0;
      *(_QWORD *)(v162 + 1208) = 0;
      *(_QWORD *)(v162 + 1200) = 0;
      *(_QWORD *)(v162 + 1216) = 0;
      *(_OWORD *)(v162 + 1200) = *(_OWORD *)(a1 + 2672);
      *(_QWORD *)(v162 + 1216) = *(_QWORD *)(a1 + 2688);
      *(_QWORD *)(a1 + 2680) = 0;
      *(_QWORD *)(a1 + 2672) = 0;
      *(_QWORD *)(a1 + 2688) = 0;
      *(_BYTE *)(v162 + 1224) = 1;
      if (!*(_BYTE *)(a1 + 2696))
        goto LABEL_238;
    }
LABEL_237:
    sub_20EE62D7C((void **)(a1 + 2600));
    *(_BYTE *)(a1 + 2696) = 0;
    goto LABEL_238;
  }
  if (*(_BYTE *)(v162 + 1224))
  {
    sub_20F27E254((char **)v181, a1 + 2600);
    if (*(_BYTE *)(a1 + 2696))
      goto LABEL_237;
  }
LABEL_238:
  v182 = (void **)(a1 + 2704);
  sub_20F27E600(v162 + 1256, a1 + 2704);
  if (*(_BYTE *)(a1 + 2752))
  {
    v183 = *(_QWORD *)(a1 + 2728);
    if (v183)
    {
      v184 = *(_QWORD *)(a1 + 2736);
      v185 = *(void **)(a1 + 2728);
      if (v184 != v183)
      {
        v186 = *(_QWORD *)(a1 + 2736);
        do
        {
          v188 = *(void **)(v186 - 24);
          v186 -= 24;
          v187 = v188;
          if (v188)
          {
            *(_QWORD *)(v184 - 16) = v187;
            operator delete(v187);
          }
          v184 = v186;
        }
        while (v186 != v183);
        v185 = *(void **)(a1 + 2728);
      }
      *(_QWORD *)(a1 + 2736) = v183;
      operator delete(v185);
    }
    v189 = *v182;
    if (*v182)
    {
      *(_QWORD *)(a1 + 2712) = v189;
      operator delete(v189);
    }
    *(_BYTE *)(a1 + 2752) = 0;
  }
  v190 = (_OWORD *)(a1 + 2760);
  v191 = (void **)(v162 + 376);
  v192 = (_QWORD *)(v162 + 1312);
  if (*(unsigned __int8 *)(v162 + 1384) == *(unsigned __int8 *)(a1 + 2832))
  {
    if (*(_BYTE *)(v162 + 1384))
      sub_20F27E4B4((uint64_t)v192, a1 + 2760);
  }
  else if (*(_BYTE *)(v162 + 1384))
  {
    sub_20EE6560C((uint64_t)v192);
  }
  else
  {
    *v192 = 0;
    *(_QWORD *)(v162 + 1320) = 0;
    *(_QWORD *)(v162 + 1328) = 0;
    *(_OWORD *)(v162 + 1312) = *v190;
    *(_QWORD *)(v162 + 1328) = *(_QWORD *)(a1 + 2776);
    *(_QWORD *)v190 = 0;
    *(_QWORD *)(a1 + 2768) = 0;
    *(_QWORD *)(a1 + 2776) = 0;
    *v176 = 0;
    *(_QWORD *)(v162 + 1344) = 0;
    *(_QWORD *)(v162 + 1352) = 0;
    *(_OWORD *)v176 = *(_OWORD *)(a1 + 2784);
    *(_QWORD *)(v162 + 1352) = *(_QWORD *)(a1 + 2800);
    *(_QWORD *)(a1 + 2792) = 0;
    *(_QWORD *)(a1 + 2784) = 0;
    *(_QWORD *)(a1 + 2800) = 0;
    *(_QWORD *)(v162 + 1368) = 0;
    *(_QWORD *)(v162 + 1360) = 0;
    *(_QWORD *)(v162 + 1376) = 0;
    *(_OWORD *)(v162 + 1360) = *(_OWORD *)(a1 + 2808);
    *(_QWORD *)(v162 + 1376) = *(_QWORD *)(a1 + 2824);
    *(_QWORD *)(a1 + 2808) = 0;
    *(_QWORD *)(a1 + 2816) = 0;
    *(_QWORD *)(a1 + 2824) = 0;
    *(_BYTE *)(v162 + 1384) = 1;
  }
  sub_20EE6560C(a1 + 2760);
  v193 = *(_QWORD *)(a1 + 48);
  v194 = *(_OWORD *)(v193 + 80);
  v195 = *(_QWORD *)(v193 + 96);
  *(_QWORD *)(v193 + 80) = 0;
  *(_QWORD *)(v193 + 88) = 0;
  *(_QWORD *)(v193 + 96) = 0;
  v196 = *v191;
  if (*v191)
  {
    *(_QWORD *)(v162 + 384) = v196;
    v198 = v194;
    operator delete(v196);
    v194 = v198;
  }
  *(_OWORD *)v191 = v194;
  *(_QWORD *)(v162 + 392) = v195;
  result = *(__n128 *)(a1 + 2272);
  *(_OWORD *)(a1 + 2272) = 0u;
  *a3 = result;
  return result;
}

void sub_20F2F31E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2F3290(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  std::runtime_error *exception;

  result = a1[284];
  if (result)
    return result;
  v3 = a1[323];
  v4 = (std::__shared_weak_count *)a1[324];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a1[319];
  if (a1[318] == v7)
  {
    v14 = a1[321];
    if (v14 >= a1[322])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    a1[321] = v14 + 1;
    v8 = (void *)operator new();
    bzero(v8, 0x578uLL);
    if (!v4)
      goto LABEL_14;
  }
  else
  {
    v8 = *(void **)(v7 - 8);
    *(_QWORD *)(v7 - 8) = 0;
    v9 = a1[319];
    v12 = *(_QWORD *)(v9 - 8);
    v11 = (_QWORD *)(v9 - 8);
    v10 = v12;
    *v11 = 0;
    if (v12)
    {
      v13 = sub_20F31342C(v10);
      MEMORY[0x212BC6398](v13, 0x10B2C40714111CFLL);
    }
    a1[319] = v11;
    if (!v4)
      goto LABEL_14;
  }
  v15 = (unint64_t *)&v4->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_14:
  v17 = (_QWORD *)operator new();
  *v17 = &off_24C9FDE90;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v8;
  v17[4] = v3;
  v17[5] = v4;
  if (v4)
  {
    v18 = (unint64_t *)&v4->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[284] = v8;
  v20 = (std::__shared_weak_count *)a1[285];
  a1[285] = v17;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a1[284];
  *(_QWORD *)(v23 + 944) = *(_QWORD *)(v23 + 936);
  *(_QWORD *)(v23 + 968) = *(_QWORD *)(v23 + 960);
  *(_WORD *)(v23 + 984) = 0;
  if (*(_BYTE *)(v23 + 1120))
    *(_BYTE *)(v23 + 1120) = 0;
  v24 = *(_QWORD *)(v23 + 920);
  v25 = *(_QWORD *)(v23 + 912);
  while (v24 != v25)
  {
    v26 = *(void **)(v24 - 24);
    if (v26)
    {
      *(_QWORD *)(v24 - 16) = v26;
      operator delete(v26);
    }
    v27 = *(void **)(v24 - 48);
    if (v27)
    {
      *(_QWORD *)(v24 - 40) = v27;
      operator delete(v27);
    }
    v24 -= 56;
  }
  *(_QWORD *)(v23 + 920) = v25;
  if (*(_BYTE *)(v23 + 1224))
  {
    sub_20EE62D7C((void **)(v23 + 1128));
    *(_BYTE *)(v23 + 1224) = 0;
  }
  sub_20EE6560C(v23 + 1312);
  if (*(_BYTE *)(v23 + 1248))
    *(_BYTE *)(v23 + 1248) = 0;
  *(_BYTE *)(v23 + 1392) = 0;
  if (*(_BYTE *)(v23 + 1394))
    *(_BYTE *)(v23 + 1394) = 0;
  return a1[284];
}

void sub_20F2F3530()
{
  __break(1u);
}

void sub_20F2F35A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  __cxa_end_catch();
  sub_20E86665C((uint64_t)va);
  sub_20F3133E8((uint64_t *)va1);
  sub_20E86665C((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F2F35D0(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void **v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *i;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  int8x16_t v39;
  int64x2_t v40;
  float64x2_t v43;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  int v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  _QWORD *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unsigned __int8 *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  std::string *v154;
  std::string::size_type v155;
  _QWORD *v156;
  _QWORD *v157;
  int v158;
  _BYTE *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  size_t v166;
  _BYTE *v167;
  const char *v168;
  const void *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  std::string::value_type v174;
  size_t v175;
  void *v176;
  std::string::pointer v177;
  const void *v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  uint64_t v182;
  size_t v183;
  const char *v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  const char *v187;
  size_t v188;
  const char *v189;
  _BYTE *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  NSObject *v198;
  size_t v199;
  void *v200;
  _QWORD *v201;
  size_t v202;
  size_t v203;
  _BYTE *v204;
  void *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  _QWORD *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  void **v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::string::size_type v256;
  uint64_t v257;
  std::string::size_type *p_size;
  _QWORD *size;
  _QWORD *v260;
  void *v261;
  void *v262;
  void *v263;
  std::string::size_type v264;
  int v265;
  void **v266;
  void *v267;
  unint64_t *v268;
  std::string::size_type v269;
  std::string::size_type *v270;
  unint64_t v271;
  unint64_t v272;
  _OWORD *v273;
  __int128 v274;
  __int128 v275;
  std::string *v276;
  std::string *v277;
  unint64_t v278;
  __int128 v279;
  _OWORD *v280;
  std::string::size_type v281;
  int v282;
  unint64_t v283;
  unint64_t v284;
  void **v286;
  uint64_t v287;
  std::string::value_type v288;
  size_t v289;
  __int128 *v290;
  __int128 v291;
  __int128 v292;
  std::string *v293;
  std::string *v294;
  std::string::pointer data;
  const void *v296;
  uint64_t v297;
  uint64_t v298;
  __int128 *v299;
  unsigned __int8 *v300;
  uint64_t v301;
  size_t v302;
  const char *v303;
  unsigned __int8 v304;
  unsigned __int8 v305;
  const char *v306;
  size_t v307;
  void **v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  NSObject *v314;
  size_t v315;
  void *v316;
  _QWORD *v317;
  size_t v318;
  size_t v319;
  uint64_t *v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  char v325;
  _QWORD *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *p_shared_owners;
  unint64_t v330;
  void *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  void *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t *v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  const char *v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::string::size_type v371;
  uint64_t v372;
  uint64_t j;
  double **v374;
  void *v375;
  std::string::size_type v376;
  double *v377;
  double *v378;
  double *v379;
  double v380;
  unint64_t v381;
  double *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  _BYTE *v388;
  double *v389;
  int64_t v390;
  unint64_t v391;
  double *v392;
  uint64_t v393;
  double *v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _OWORD *v398;
  double *v399;
  uint64_t v400;
  __int128 v401;
  char *v402;
  char *k;
  uint64_t v404;
  uint64_t v405;
  float64x2_t v406;
  int64x2_t v407;
  int64x2_t v408;
  float64x2_t v410;
  float64x2_t v411;
  int8x16_t v412;
  float64x2_t v415;
  void **v419;
  void **m;
  int v421;
  __int128 v422;
  std::string::size_type v423;
  unint64_t v424;
  __int128 v425;
  char *v426;
  uint64_t v427;
  uint64_t v429;
  char *v430;
  char *v431;
  _QWORD *v432;
  unint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v437;
  unint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  void **v443;
  __int128 *v444;
  __int128 v445;
  __int128 v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  char *v451;
  void **v452;
  char *v453;
  __int128 v454;
  __int128 v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  int v462;
  _QWORD *v463;
  _OWORD *v464;
  _OWORD *v465;
  unint64_t v466;
  _BYTE *v467;
  _BYTE *v468;
  char *v469;
  char *v470;
  char *v471;
  char *v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  _OWORD *v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  _OWORD *v486;
  unint64_t v487;
  _OWORD *v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  char *v493;
  char *v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  char *v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  char *__s;
  unint64_t v519;
  unint64_t v520;
  uint64_t **v521;
  __int128 v522;
  unsigned int v523;
  __int128 v524;
  unint64_t v525;
  __int128 v526;
  unsigned int v527;
  __int128 v528;
  unint64_t v529;
  __int128 v530;
  unsigned int v531;
  float64x2_t v532;
  unsigned int v533;
  uint64_t v534;
  float64x2_t v535;
  float64x2_t v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  void *v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  unint64_t v544;
  std::string v545;
  uint64_t *v546;
  __int128 v547;
  int v548;
  const char *v549;
  int v550;
  const char *v551;
  uint64_t v552;
  std::__shared_weak_count *v553;
  void *v554[2];
  int64_t v555;
  uint64_t v556;
  void **__sb;
  void **rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v559;
  int v560;
  const char *v561;
  const void *v562;
  const char *v563;
  uint64_t v564;
  __int128 v565;
  __int128 v566;
  int v567;
  __int128 v568;
  int64_t v569;
  char *v570;
  std::__shared_weak_count *v571;
  std::string __p[16];
  __int128 v573;
  uint64_t v574;
  char v575;
  void *object[3];
  __int128 v577;
  void *v578[2];
  unint64_t v579;
  char v580;
  uint64_t v581;
  int v582;
  _BYTE __dst[24];
  __int128 v584;
  void *v585[2];
  unint64_t v586;
  char v587;
  _QWORD v588[2];
  _BYTE v589[24];
  uint64_t v590;

  v590 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 1352;
  if (!*(_BYTE *)(a2 + 2264))
  {
    bzero((void *)(a2 + 1352), 0x390uLL);
    *(_BYTE *)(a2 + 2264) = 1;
  }
  sub_20EE69B5C(a1, v6);
  if (*(_BYTE *)(a2 + 2264))
  {
    sub_20E91E818(v6);
    *(_BYTE *)(a2 + 2264) = 0;
  }
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(char **)(v7 + 2824);
  v9 = *(char **)(v7 + 2832);
  if (v8 == v9)
  {
    LODWORD(v13) = 0;
    *(_DWORD *)a1 = 0;
    goto LABEL_9;
  }
  v10 = v9 - v8 - 4472;
  if (v10 >> 3 < 0x22F)
  {
    v11 = 0;
    v12 = *(char **)(v7 + 2824);
    do
    {
LABEL_54:
      v11 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v12 + 2) + 424) + 64)
           - ((uint64_t)(*((_QWORD *)v12 + 5) - *((_QWORD *)v12 + 4)) >> 4);
      v12 += 4472;
    }
    while (v12 != v9);
    goto LABEL_55;
  }
  v71 = 0;
  v72 = 0;
  v73 = v10 / 0x1178 + 1;
  v12 = &v8[4472 * (v73 & 0x1FFFFFFFFFFFFELL)];
  v74 = v73 & 0x1FFFFFFFFFFFFELL;
  v75 = *(_QWORD **)(v7 + 2824);
  do
  {
    v71 += *(_QWORD *)(**(_QWORD **)(v75[2] + 424) + 64) - ((uint64_t)(v75[5] - v75[4]) >> 4);
    v72 += *(_QWORD *)(**(_QWORD **)(v75[561] + 424) + 64) - ((uint64_t)(v75[564] - v75[563]) >> 4);
    v75 += 1118;
    v74 -= 2;
  }
  while (v74);
  v11 = v72 + v71;
  if (v73 != (v73 & 0x1FFFFFFFFFFFFELL))
    goto LABEL_54;
LABEL_55:
  v13 = 0;
  *(_DWORD *)a1 = v11;
  do
  {
    v77 = *(_QWORD *)(*((_QWORD *)v8 + 2) + 424);
    v78 = *(_QWORD *)(v77 + 40);
    v79 = *(_QWORD *)(v77 + 48);
    if (v78 == v79)
    {
      v76 = 0;
    }
    else
    {
      v76 = 0;
      v80 = v78;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v80 + 736)
          || *(_QWORD *)(*(_QWORD *)v80 + 624) == *(_QWORD *)(*(_QWORD *)v80 + 616))
        {
          ++v76;
        }
        v80 += 16;
      }
      while (v80 != v79);
    }
    v13 = v13 - v76 + ((v79 - v78) >> 4);
    v8 += 4472;
  }
  while (v8 != v9);
LABEL_9:
  *(_DWORD *)(a1 + 4) = v13;
  sub_20F323924(v7, (void **)&__p[0].__r_.__value_.__l.__data_);
  v521 = a3;
  v15 = (void **)(a1 + 8);
  v14 = *(void **)(a1 + 8);
  if (v14)
  {
    *(_QWORD *)(a1 + 16) = v14;
    operator delete(v14);
    *v15 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(std::string *)(a1 + 8) = __p[0];
  v538 = a2;
  v539 = a1;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 80) + 2499))
  {
    for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v538 + 80) + 2816);
      sub_20FCCBC60(i + 2, __p);
      v29 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v28 + 192) + 8), (uint64_t)__p);
      v30 = v29;
      if (v29)
        v31 = v29 + 5;
      else
        v31 = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        a1 = v539;
        if (!v30)
          continue;
      }
      else
      {
        a1 = v539;
        if (!v29)
          continue;
      }
      *(_QWORD *)&v38.f64[0] = v31[21];
      v32 = *(int64x2_t *)(v31 + 19);
      v33 = *(int64x2_t *)(v31 + 23);
      _D2 = v31[29];
      v35 = *(int64x2_t *)(v31 + 27);
      v36 = (float64x2_t)vzip1q_s64(v32, v33);
      _Q0 = (float64x2_t)vzip2q_s64(v32, v33);
      *(_QWORD *)&v38.f64[1] = v31[25];
      v39 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(v35, 1), 8uLL);
      v40 = vzip1q_s64(v35, (int64x2_t)_Q0);
      _D5 = *((double *)v31 + 33);
      _Q6 = *(float64x2_t *)(v31 + 31);
      v43 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v36, vnegq_f64(_Q6).f64[0]), _Q0, _Q6, 1), v38, _D5, 0);
      *(_QWORD *)&_Q0.f64[0] = v31[28];
      __asm { FMLS            D7, D0, V6.D[1] }
      *(_QWORD *)&v48 = vdupq_laneq_s64(v40, 1).u64[0];
      __asm { FMLS            D7, D2, V5.D[0] }
      *((_QWORD *)&v48 + 1) = v39.i64[0];
      v49 = (unint64_t)_D2;
      v50 = (unint64_t)_D2;
      *(_QWORD *)&v50 = v39.i64[1];
      *((_QWORD *)&_Q7 + 1) = 1.0;
      v52 = a1;
      v53 = i[2];
      v55 = *(char **)(v52 + 16);
      v54 = *(_QWORD *)(v52 + 24);
      if ((unint64_t)v55 < v54)
      {
        *(_QWORD *)v55 = v53;
        *(float64x2_t *)(v55 + 8) = v36;
        *(_OWORD *)(v55 + 24) = v40.u64[0];
        *(_OWORD *)(v55 + 40) = v48;
        *(_OWORD *)(v55 + 56) = v50;
        *(float64x2_t *)(v55 + 72) = v38;
        *(_OWORD *)(v55 + 88) = v49;
        *(float64x2_t *)(v55 + 104) = v43;
        v27 = v55 + 136;
        *(_OWORD *)(v55 + 120) = _Q7;
        a1 = v539;
      }
      else
      {
        v56 = (char *)*v15;
        v57 = 0xF0F0F0F0F0F0F0F1 * ((v55 - (_BYTE *)*v15) >> 3);
        v58 = v57 + 1;
        if (v57 + 1 > 0x1E1E1E1E1E1E1E1)
          sub_20EABADD4();
        v522 = v40.u64[0];
        v524 = v50;
        v526 = v48;
        v528 = v49;
        v530 = _Q7;
        v532 = v43;
        v535 = v36;
        v536 = v38;
        v59 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v54 - (_QWORD)v56) >> 3);
        if (2 * v59 > v58)
          v58 = 2 * v59;
        if (v59 >= 0xF0F0F0F0F0F0F0)
          v60 = 0x1E1E1E1E1E1E1E1;
        else
          v60 = v58;
        if (v60 > 0x1E1E1E1E1E1E1E1)
          sub_20E877A38();
        v61 = (char *)operator new(136 * v60);
        v62 = &v61[136 * v57];
        *(_QWORD *)v62 = v53;
        *(_OWORD *)(v62 + 56) = v524;
        *(_OWORD *)(v62 + 40) = v526;
        *(_OWORD *)(v62 + 24) = v522;
        *(float64x2_t *)(v62 + 8) = v535;
        *(float64x2_t *)(v62 + 72) = v536;
        *(_OWORD *)(v62 + 88) = v528;
        *(float64x2_t *)(v62 + 104) = v532;
        *(_OWORD *)(v62 + 120) = v530;
        v63 = v62;
        if (v55 != v56)
        {
          a1 = v539;
          do
          {
            v64 = *((_QWORD *)v55 - 17);
            v55 -= 136;
            *((_QWORD *)v63 - 17) = v64;
            v63 -= 136;
            v65 = *(_OWORD *)(v55 + 8);
            v66 = *(_OWORD *)(v55 + 24);
            v67 = *(_OWORD *)(v55 + 40);
            *(_OWORD *)(v63 + 56) = *(_OWORD *)(v55 + 56);
            *(_OWORD *)(v63 + 40) = v67;
            *(_OWORD *)(v63 + 24) = v66;
            *(_OWORD *)(v63 + 8) = v65;
            v68 = *(_OWORD *)(v55 + 72);
            v69 = *(_OWORD *)(v55 + 88);
            v70 = *(_OWORD *)(v55 + 104);
            *(_OWORD *)(v63 + 120) = *(_OWORD *)(v55 + 120);
            *(_OWORD *)(v63 + 104) = v70;
            *(_OWORD *)(v63 + 88) = v69;
            *(_OWORD *)(v63 + 72) = v68;
          }
          while (v55 != v56);
          v55 = v56;
          v27 = v62 + 136;
          *(_QWORD *)(v539 + 8) = v63;
          *(_QWORD *)(v539 + 16) = v62 + 136;
          *(_QWORD *)(v539 + 24) = &v61[136 * v60];
          if (!v55)
            goto LABEL_27;
LABEL_50:
          operator delete(v55);
          goto LABEL_27;
        }
        a1 = v539;
        v27 = v62 + 136;
        *(_QWORD *)(v539 + 8) = v62;
        *(_QWORD *)(v539 + 16) = v62 + 136;
        *(_QWORD *)(v539 + 24) = &v61[136 * v60];
        if (v55)
          goto LABEL_50;
      }
LABEL_27:
      *(_QWORD *)(a1 + 16) = v27;
    }
  }
  v16 = (_QWORD *)v538;
  if (*(_QWORD *)(v538 + 40) && *(_QWORD *)(v538 + 56) && *(_QWORD *)(v538 + 64) && *(_QWORD *)(v538 + 72))
  {
    sub_20F323C88(*(_QWORD *)(v538 + 80), (void **)&__p[0].__r_.__value_.__l.__data_);
    v17 = *(void **)(a1 + 32);
    if (v17)
    {
      *(_QWORD *)(a1 + 40) = v17;
      operator delete(v17);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
    }
    *(std::string *)(a1 + 32) = __p[0];
  }
  v18 = *(_QWORD *)(v538 + 80);
  if (*(_BYTE *)(v18 + 2496))
  {
    v543 = 0u;
    v541 = 0u;
    v542 = 0u;
    *(_OWORD *)&v545.__r_.__value_.__r.__words[1] = 0uLL;
    v544 = 0;
    v545.__r_.__value_.__r.__words[0] = (std::string::size_type)&v545.__r_.__value_.__l.__size_;
    v540 = *(void **)(*(_QWORD *)(*(_QWORD *)(v18 + 2816) + 16) + 160);
    v19 = *(_QWORD *)(v538 + 40);
    if (v19)
    {
      v21 = *(_QWORD *)(v19 + 8);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = -1227133513 * ((unint64_t)(v20 - v21) >> 4);
      if (v20 != v21)
      {
        v23 = v20 - v21 - 112;
        if (v23 >= 0x70)
        {
          v81 = 0;
          v82 = 0;
          v83 = (((v23 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
          v25 = v21 + 112 * (v83 & 0x7FFFFFFFFFFFFFELL);
          v84 = (unsigned __int8 *)(v21 + 216);
          v85 = v83 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            v86 = *(v84 - 112);
            v87 = *v84;
            v84 += 224;
            v81 += v86;
            v82 += v87;
            v85 -= 2;
          }
          while (v85);
          v24 = v82 + v81;
          if (v83 == (v83 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_71:
            v88 = *(_QWORD *)(v538 + 48);
            if (v88)
            {
              v90 = *(_QWORD *)(v88 + 8);
              v89 = *(_QWORD *)(v88 + 16);
              v22 -= 1227133513 * ((unint64_t)(v89 - v90) >> 4);
              if (v89 != v90)
              {
                v91 = v89 - v90 - 112;
                if (v91 < 0x70)
                {
                  v92 = v90;
                  do
                  {
LABEL_78:
                    v24 += *(unsigned __int8 *)(v92 + 104);
                    v92 += 112;
                  }
                  while (v92 != v89);
                  goto LABEL_79;
                }
                v93 = 0;
                v94 = (((v91 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
                v92 = v90 + 112 * (v94 & 0x7FFFFFFFFFFFFFELL);
                v95 = (unsigned __int8 *)(v90 + 216);
                v96 = v94 & 0x7FFFFFFFFFFFFFELL;
                do
                {
                  v97 = *(v95 - 112);
                  v98 = *v95;
                  v95 += 224;
                  v24 += v97;
                  v93 += v98;
                  v96 -= 2;
                }
                while (v96);
                v24 += v93;
                if (v94 != (v94 & 0x7FFFFFFFFFFFFFELL))
                  goto LABEL_78;
              }
            }
LABEL_79:
            v99 = *(_QWORD **)(v538 + 56);
            v533 = v22;
            if (!v99)
            {
              v105 = 0;
              v106 = 0;
              v107 = 0;
              LODWORD(v108) = 0;
              v109 = 0;
              v531 = 0;
              v110 = 0;
              v111 = 0;
              v112 = *(_QWORD **)(v538 + 64);
              if (v112)
              {
LABEL_297:
                v114 = 652835029 * ((v112[2] - v112[1]) >> 3);
                v113 = -286331153 * ((v112[8] - v112[7]) >> 5);
                v115 = 1736263375 * ((v112[5] - v112[4]) >> 3);
                v112 = (_QWORD *)((v112[14] - v112[13]) >> 5);
LABEL_298:
                *(_QWORD *)&v541 = __PAIR64__(v105, v533);
                *((_QWORD *)&v541 + 1) = __PAIR64__(v107, v106);
                *(_QWORD *)&v542 = __PAIR64__(v113, v108);
                *((_QWORD *)&v542 + 1) = __PAIR64__(v115, v114);
                *(_QWORD *)&v543 = __PAIR64__(v24, v112);
                *((_QWORD *)&v543 + 1) = __PAIR64__(v531, v109);
                v544 = __PAIR64__(v111, v110);
                v16 = (_QWORD *)v538;
                v257 = *(_QWORD *)(v538 + 80);
                if (*(_BYTE *)(v257 + 2499))
                {
                  a1 = v539;
                  sub_20F323840(v257, (uint64_t **)__p);
                  p_size = &v545.__r_.__value_.__l.__size_;
                  sub_20E86872C((uint64_t)&v545, (_QWORD *)v545.__r_.__value_.__l.__size_);
                  size = (_QWORD *)__p[0].__r_.__value_.__l.__size_;
                  v545 = __p[0];
                  if (__p[0].__r_.__value_.__r.__words[2])
                  {
                    *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 16) = &v545.__r_.__value_.__l.__size_;
                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__l.__size_;
                    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
                    size = 0;
                  }
                  else
                  {
                    v545.__r_.__value_.__r.__words[0] = (std::string::size_type)&v545.__r_.__value_.__l.__size_;
                  }
                  sub_20E86872C((uint64_t)__p, size);
                  memset(object, 0, sizeof(object));
                  sub_20F29DCA0((uint64_t *)object, v538, (uint64_t **)__p);
                  v261 = object[0];
                  if (object[0])
                  {
                    v262 = object[1];
                    v263 = object[0];
                    if (object[1] != object[0])
                    {
                      do
                        v262 = (void *)sub_20F3122B4((uint64_t)v262 - 4472);
                      while (v262 != v261);
                      v263 = object[0];
                    }
                    object[1] = v261;
                    operator delete(v263);
                  }
                  v264 = __p[0].__r_.__value_.__r.__words[0];
                  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[1])
                  {
                    do
                    {
                      v268 = (unint64_t *)(v264 + 32);
                      v269 = v545.__r_.__value_.__l.__size_;
                      v270 = &v545.__r_.__value_.__l.__size_;
                      if (v545.__r_.__value_.__l.__size_)
                      {
                        v271 = *v268;
                        while (1)
                        {
                          while (1)
                          {
                            p_size = (std::string::size_type *)v269;
                            v272 = *(_QWORD *)(v269 + 32);
                            if (v271 >= v272)
                              break;
                            v269 = *p_size;
                            v270 = p_size;
                            if (!*p_size)
                              goto LABEL_323;
                          }
                          if (v272 >= v271)
                            break;
                          v269 = p_size[1];
                          if (!v269)
                          {
                            v270 = p_size + 1;
                            goto LABEL_323;
                          }
                        }
                      }
                      else
                      {
LABEL_323:
                        v273 = operator new(0x50uLL);
                        v274 = *(_OWORD *)v268;
                        v275 = *(_OWORD *)(v264 + 64);
                        v273[3] = *(_OWORD *)(v264 + 48);
                        v273[4] = v275;
                        v273[2] = v274;
                        *(_QWORD *)v273 = 0;
                        *((_QWORD *)v273 + 1) = 0;
                        *((_QWORD *)v273 + 2) = p_size;
                        *v270 = (std::string::size_type)v273;
                        if (*(_QWORD *)v545.__r_.__value_.__l.__data_)
                        {
                          v545.__r_.__value_.__r.__words[0] = *(_QWORD *)v545.__r_.__value_.__l.__data_;
                          v273 = (_OWORD *)*v270;
                        }
                        sub_20E868578((uint64_t *)v545.__r_.__value_.__l.__size_, (uint64_t *)v273);
                        ++v545.__r_.__value_.__r.__words[2];
                      }
                      v276 = *(std::string **)(v264 + 8);
                      if (v276)
                      {
                        do
                        {
                          v277 = v276;
                          v276 = (std::string *)v276->__r_.__value_.__r.__words[0];
                        }
                        while (v276);
                      }
                      else
                      {
                        do
                        {
                          v277 = *(std::string **)(v264 + 16);
                          _ZF = v277->__r_.__value_.__r.__words[0] == v264;
                          v264 = (std::string::size_type)v277;
                        }
                        while (!_ZF);
                      }
                      v264 = (std::string::size_type)v277;
                      p_size = &v545.__r_.__value_.__l.__size_;
                    }
                    while (v277 != (std::string *)&__p[0].__r_.__value_.__r.__words[1]);
                  }
                  v260 = (_QWORD *)__p[0].__r_.__value_.__l.__size_;
                }
                else
                {
                  a1 = v539;
                  sub_20F29D568(*(_QWORD *)(v257 + 2816), v538, (uint64_t **)__p);
                  sub_20E86872C((uint64_t)&v545, (_QWORD *)v545.__r_.__value_.__l.__size_);
                  v260 = (_QWORD *)__p[0].__r_.__value_.__l.__size_;
                  v545 = __p[0];
                  if (__p[0].__r_.__value_.__r.__words[2])
                  {
                    *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 16) = &v545.__r_.__value_.__l.__size_;
                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__l.__size_;
                    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
                    v260 = 0;
                  }
                  else
                  {
                    v545.__r_.__value_.__r.__words[0] = (std::string::size_type)&v545.__r_.__value_.__l.__size_;
                  }
                }
                sub_20E86872C((uint64_t)__p, v260);
                v265 = *(unsigned __int8 *)(a1 + 144);
                *(_OWORD *)(a1 + 56) = 0u;
                v266 = (void **)(a1 + 120);
                *(_OWORD *)(a1 + 72) = 0u;
                *(_OWORD *)(a1 + 88) = 0u;
                *(_OWORD *)(a1 + 104) = 0u;
                if (v265)
                {
                  v267 = *v266;
                  if (*v266)
                  {
                    *(_QWORD *)(a1 + 128) = v267;
                    operator delete(v267);
                    *v266 = 0;
                    *(_QWORD *)(a1 + 128) = 0;
                    *(_QWORD *)(a1 + 136) = 0;
                  }
                  *v266 = 0;
                  *(_QWORD *)(a1 + 128) = 0;
                  *(_QWORD *)(a1 + 136) = 0;
                }
                else
                {
                  *v266 = 0;
                  *(_QWORD *)(a1 + 128) = 0;
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_BYTE *)(a1 + 144) = 1;
                }
                v278 = v545.__r_.__value_.__r.__words[2];
                *(_QWORD *)(a1 + 56) = v540;
                v279 = v542;
                *(_OWORD *)(a1 + 64) = v541;
                *(_OWORD *)(a1 + 80) = v279;
                *(_OWORD *)(a1 + 96) = v543;
                *(_QWORD *)(a1 + 112) = v544;
                if (v278)
                {
                  if (v278 >= 0x666666666666667)
                    sub_20EAA7068();
                  v280 = operator new(40 * v278);
                  bzero(v280, 40 * ((40 * v278 - 40) / 0x28) + 40);
                  *(_QWORD *)(a1 + 120) = v280;
                  *(_QWORD *)(a1 + 128) = (char *)v280 + 40 * ((40 * v278 - 40) / 0x28) + 40;
                  *(_QWORD *)(a1 + 136) = (char *)v280 + 40 * v278;
                  v281 = v545.__r_.__value_.__r.__words[0];
                  if ((std::string::size_type *)v545.__r_.__value_.__l.__data_ == &v545.__r_.__value_.__r.__words[1])
                  {
LABEL_338:
                    sub_20F2FC0E0(v554);
                    if (**((int **)v554[0] + 7) > 2
                      || ((v282 = *((unsigned __int8 *)v554[0] + 72),
                           v283 = sub_20E8C31DC((uint64_t)v554[0], "OSLogSurrogateAppender", 1, 0),
                           v284 = v283,
                           !v282)
                        ? (_ZF = v283 == 0)
                        : (_ZF = 0),
                          _ZF))
                    {
LABEL_495:
                      v372 = *(_QWORD *)(a1 + 120);
                      for (j = *(_QWORD *)(a1 + 128); v372 != j; v372 += 40)
                        kdebug_trace();
                      kdebug_trace();
                      sub_20E86872C((uint64_t)&v545, (_QWORD *)v545.__r_.__value_.__l.__size_);
                      v18 = v16[10];
                      goto LABEL_498;
                    }
                    sub_20E863438((uint64_t)__p);
                    sub_20F45F830((uint64_t)&v540, object);
                    if (SHIBYTE(object[2]) >= 0)
                      v286 = object;
                    else
                      v286 = (void **)object[0];
                    if (SHIBYTE(object[2]) >= 0)
                      v287 = HIBYTE(object[2]);
                    else
                      v287 = (uint64_t)object[1];
                    sub_20E86A980(&__p[0].__r_.__value_.__r.__words[2], (uint64_t)v286, v287);
                    if (SHIBYTE(object[2]) < 0)
                    {
                      operator delete(object[0]);
                      v288 = __p[5].__r_.__value_.__s.__data_[0];
                      v537 = v282;
                      if ((__p[5].__r_.__value_.__s.__data_[0] & 0x10) == 0)
                      {
LABEL_351:
                        if ((v288 & 8) == 0)
                        {
                          v289 = 0;
                          HIBYTE(v569) = 0;
                          v290 = &v568;
                          goto LABEL_372;
                        }
                        v296 = (const void *)__p[1].__r_.__value_.__r.__words[2];
                        v289 = __p[2].__r_.__value_.__l.__size_ - __p[1].__r_.__value_.__r.__words[2];
                        if (__p[2].__r_.__value_.__l.__size_ - __p[1].__r_.__value_.__r.__words[2] > 0x7FFFFFFFFFFFFFF7)
LABEL_417:
                          sub_20E860B7C();
LABEL_365:
                        if (v289 >= 0x17)
                        {
                          v297 = (v289 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v289 | 7) != 0x17)
                            v297 = v289 | 7;
                          v298 = v297 + 1;
                          v290 = (__int128 *)operator new(v297 + 1);
                          v569 = v298 | 0x8000000000000000;
                          *(_QWORD *)&v568 = v290;
                          *((_QWORD *)&v568 + 1) = v289;
                        }
                        else
                        {
                          HIBYTE(v569) = v289;
                          v290 = &v568;
                          if (!v289)
                          {
LABEL_372:
                            *((_BYTE *)v290 + v289) = 0;
                            __sb = v554;
                            rep = (void **)std::chrono::steady_clock::now().__d_.__rep_;
                            v559 = std::chrono::system_clock::now().__d_.__rep_;
                            v560 = 2;
                            v561 = "unknown file";
                            LODWORD(v562) = 2854;
                            v564 = 0;
                            *(_QWORD *)&v565 = 0;
                            v563 = "unknown function";
                            if (v569 >= 0)
                              v299 = &v568;
                            else
                              v299 = (__int128 *)v568;
                            v300 = (unsigned __int8 *)*__sb;
                            v301 = (uint64_t)*__sb + 16;
                            if (*((char *)*__sb + 39) < 0)
                            {
                              v303 = (const char *)*((_QWORD *)v300 + 2);
                              v302 = *((_QWORD *)v300 + 3);
                              v305 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                              if ((v305 & 1) != 0)
                                goto LABEL_379;
                            }
                            else
                            {
                              v302 = *((unsigned __int8 *)*__sb + 39);
                              v303 = (char *)*__sb + 16;
                              v304 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                              if ((v304 & 1) != 0)
                                goto LABEL_379;
                            }
                            if (__cxa_guard_acquire(&qword_254A4A510))
                            {
                              sub_20E9E46F8((uint64_t)object);
                              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                              if ((_BYTE)v577 && SHIBYTE(object[2]) < 0)
                                operator delete(object[0]);
                              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                              __cxa_guard_release(&qword_254A4A510);
                            }
LABEL_379:
                            if (byte_254A4A4F8[23] >= 0)
                              v306 = byte_254A4A4F8;
                            else
                              v306 = *(const char **)byte_254A4A4F8;
                            if (byte_254A4A4F8[23] >= 0)
                              v307 = byte_254A4A4F8[23];
                            else
                              v307 = *(_QWORD *)&byte_254A4A4F8[8];
                            object[0] = os_log_create(v306, v303);
                            v308 = &object[1];
                            if (v307 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            if (v307 >= 0x17)
                            {
                              v309 = (v307 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v307 | 7) != 0x17)
                                v309 = v307 | 7;
                              v310 = v309 + 1;
                              v308 = (void **)operator new(v309 + 1);
                              *(_QWORD *)&v577 = v310 | 0x8000000000000000;
                              object[1] = v308;
                              object[2] = (void *)v307;
                            }
                            else
                            {
                              BYTE7(v577) = v307;
                              if (!v307)
                              {
LABEL_393:
                                *((_BYTE *)v308 + v307) = 0;
                                BYTE8(v577) = 1;
                                v311 = v578;
                                if (v302 > 0x7FFFFFFFFFFFFFF7)
                                  sub_20E860B7C();
                                v16 = (_QWORD *)v538;
                                if (v302 >= 0x17)
                                {
                                  v312 = (v302 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v302 | 7) != 0x17)
                                    v312 = v302 | 7;
                                  v313 = v312 + 1;
                                  v311 = operator new(v312 + 1);
                                  v579 = v313 | 0x8000000000000000;
                                  v578[0] = v311;
                                  v578[1] = (void *)v302;
                                }
                                else
                                {
                                  HIBYTE(v579) = v302;
                                  if (!v302)
                                  {
LABEL_401:
                                    *((_BYTE *)v311 + v302) = 0;
                                    v580 = 1;
                                    v314 = object[0];
                                    if (SHIBYTE(v579) < 0)
                                      operator delete(v578[0]);
                                    if (BYTE8(v577) && SBYTE7(v577) < 0)
                                      operator delete(object[1]);
                                    if (object[0])
                                      os_release(object[0]);
                                    if (!v284 || !*(_QWORD *)(v284 + 24))
                                    {
                                      os_log_type_enabled(v314, OS_LOG_TYPE_DEBUG);
                                      LODWORD(object[0]) = 136315138;
                                      *(void **)((char *)object + 4) = v299;
                                      v321 = (void *)_os_log_send_and_compose_impl();
                                      a1 = v539;
                                      if (v321)
                                        free(v321);
                                      goto LABEL_481;
                                    }
                                    v315 = _os_log_pack_size();
                                    v316 = operator new(v315, (std::align_val_t)8uLL);
                                    v317 = (_QWORD *)operator new();
                                    *v317 = &off_24C9ABB80;
                                    v317[1] = 0;
                                    v317[2] = 0;
                                    v317[3] = v316;
                                    *(_QWORD *)__dst = v316;
                                    *(_QWORD *)&__dst[8] = v316;
                                    v584 = 0uLL;
                                    *(_QWORD *)&__dst[16] = v317;
                                    v318 = strlen((const char *)v299);
                                    if (v318 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    v319 = v318;
                                    v534 = v301;
                                    if (v318 >= 0x17)
                                    {
                                      v322 = (v318 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v318 | 7) != 0x17)
                                        v322 = v318 | 7;
                                      v323 = v322 + 1;
                                      v320 = (uint64_t *)operator new(v322 + 1);
                                      *(_QWORD *)&v547 = v319;
                                      *((_QWORD *)&v547 + 1) = v323 | 0x8000000000000000;
                                      v546 = v320;
                                    }
                                    else
                                    {
                                      HIBYTE(v547) = v318;
                                      v320 = (uint64_t *)&v546;
                                      if (!v318)
                                      {
LABEL_422:
                                        *((_BYTE *)v320 + v319) = 0;
                                        v324 = v546;
                                        *(_QWORD *)v589 = v547;
                                        *(_QWORD *)&v589[7] = *(_QWORD *)((char *)&v547 + 7);
                                        v325 = HIBYTE(v547);
                                        v326 = operator new(0x38uLL);
                                        v326[1] = 0;
                                        v326[2] = 0;
                                        v326[3] = off_24C9ABC20;
                                        *v326 = &off_24C9ABBD0;
                                        v327 = *(_QWORD *)v589;
                                        v326[4] = v324;
                                        v326[5] = v327;
                                        *(_QWORD *)((char *)v326 + 47) = *(_QWORD *)&v589[7];
                                        *((_BYTE *)v326 + 55) = v325;
                                        *(_QWORD *)v589 = 0;
                                        *(_QWORD *)&v589[7] = 0;
                                        v328 = (std::__shared_weak_count *)*((_QWORD *)&v584 + 1);
                                        *(_QWORD *)&v584 = v326 + 3;
                                        *((_QWORD *)&v584 + 1) = v326;
                                        if (v328)
                                        {
                                          p_shared_owners = (unint64_t *)&v328->__shared_owners_;
                                          do
                                            v330 = __ldaxr(p_shared_owners);
                                          while (__stlxr(v330 - 1, p_shared_owners));
                                          if (!v330)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                                            std::__shared_weak_count::__release_weak(v328);
                                          }
                                        }
                                        *(_OWORD *)object = *(_OWORD *)__dst;
                                        v331 = (void *)v584;
                                        object[2] = *(void **)&__dst[16];
                                        if (*(_QWORD *)&__dst[16])
                                        {
                                          v332 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                                          do
                                            v333 = __ldxr(v332);
                                          while (__stxr(v333 + 1, v332));
                                        }
                                        v334 = (std::__shared_weak_count *)*((_QWORD *)&v584 + 1);
                                        *(_QWORD *)&v577 = v331;
                                        *((_QWORD *)&v577 + 1) = *((_QWORD *)&v584 + 1);
                                        if (*((_QWORD *)&v584 + 1))
                                        {
                                          v335 = (unint64_t *)(*((_QWORD *)&v584 + 1) + 8);
                                          do
                                            v336 = __ldxr(v335);
                                          while (__stxr(v336 + 1, v335));
                                          v578[0] = v331;
                                          do
                                            v337 = __ldaxr(v335);
                                          while (__stlxr(v337 - 1, v335));
                                          if (!v337)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                                            std::__shared_weak_count::__release_weak(v334);
                                          }
                                        }
                                        else
                                        {
                                          v578[0] = v331;
                                        }
                                        v338 = *(std::__shared_weak_count **)&__dst[16];
                                        if (*(_QWORD *)&__dst[16])
                                        {
                                          v339 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                                          do
                                            v340 = __ldaxr(v339);
                                          while (__stlxr(v340 - 1, v339));
                                          if (!v340)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                                            std::__shared_weak_count::__release_weak(v338);
                                          }
                                        }
                                        v341 = object[0];
                                        if (*((char *)v578[0] + 31) >= 0)
                                          v342 = (char *)v578[0] + 8;
                                        else
                                          v342 = (char *)*((_QWORD *)v578[0] + 1);
                                        v343 = _os_log_pack_fill();
                                        *(_DWORD *)v343 = 136315138;
                                        *(_QWORD *)(v343 + 4) = v342;
                                        v344 = operator new();
                                        v345 = v300[39];
                                        v346 = v534;
                                        if ((v345 & 0x80u) != 0)
                                        {
                                          v346 = *((_QWORD *)v300 + 2);
                                          v345 = *((_QWORD *)v300 + 3);
                                        }
                                        *(_QWORD *)v344 = v341;
                                        *(_OWORD *)(v344 + 8) = *(_OWORD *)&object[1];
                                        object[1] = 0;
                                        object[2] = 0;
                                        *(_OWORD *)(v344 + 24) = v577;
                                        v577 = 0uLL;
                                        *(_QWORD *)(v344 + 40) = v346;
                                        *(_QWORD *)(v344 + 48) = v345;
                                        *(_BYTE *)(v344 + 56) = 2;
                                        v546 = 0;
                                        *(_QWORD *)__dst = v344;
                                        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v284 + 24) + 40))(*(_QWORD *)(v284 + 24), __dst);
                                        v347 = *(_QWORD *)__dst;
                                        *(_QWORD *)__dst = 0;
                                        a1 = v539;
                                        if (v347)
                                        {
                                          v348 = *(std::__shared_weak_count **)(v347 + 32);
                                          if (v348)
                                          {
                                            v349 = (unint64_t *)&v348->__shared_owners_;
                                            do
                                              v350 = __ldaxr(v349);
                                            while (__stlxr(v350 - 1, v349));
                                            if (!v350)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                                              std::__shared_weak_count::__release_weak(v348);
                                            }
                                          }
                                          v351 = *(std::__shared_weak_count **)(v347 + 16);
                                          if (v351)
                                          {
                                            v352 = (unint64_t *)&v351->__shared_owners_;
                                            do
                                              v353 = __ldaxr(v352);
                                            while (__stlxr(v353 - 1, v352));
                                            if (!v353)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                                              std::__shared_weak_count::__release_weak(v351);
                                            }
                                          }
                                          MEMORY[0x212BC6398](v347, 0x10F0C40B62ED6C6);
                                          v354 = v546;
                                          v546 = 0;
                                          if (v354)
                                          {
                                            v355 = (std::__shared_weak_count *)v354[4];
                                            if (v355)
                                            {
                                              v356 = (unint64_t *)&v355->__shared_owners_;
                                              do
                                                v357 = __ldaxr(v356);
                                              while (__stlxr(v357 - 1, v356));
                                              if (!v357)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                                                std::__shared_weak_count::__release_weak(v355);
                                              }
                                            }
                                            v358 = (std::__shared_weak_count *)v354[2];
                                            if (v358)
                                            {
                                              v359 = (unint64_t *)&v358->__shared_owners_;
                                              do
                                                v360 = __ldaxr(v359);
                                              while (__stlxr(v360 - 1, v359));
                                              if (!v360)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                                                std::__shared_weak_count::__release_weak(v358);
                                              }
                                            }
                                            MEMORY[0x212BC6398](v354, 0x10F0C40B62ED6C6);
                                          }
                                        }
                                        v361 = (std::__shared_weak_count *)*((_QWORD *)&v577 + 1);
                                        if (*((_QWORD *)&v577 + 1))
                                        {
                                          v362 = (unint64_t *)(*((_QWORD *)&v577 + 1) + 8);
                                          do
                                            v363 = __ldaxr(v362);
                                          while (__stlxr(v363 - 1, v362));
                                          if (!v363)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                                            std::__shared_weak_count::__release_weak(v361);
                                          }
                                        }
                                        v364 = (std::__shared_weak_count *)object[2];
                                        if (object[2])
                                        {
                                          v365 = (unint64_t *)((char *)object[2] + 8);
                                          do
                                            v366 = __ldaxr(v365);
                                          while (__stlxr(v366 - 1, v365));
                                          if (!v366)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                                            std::__shared_weak_count::__release_weak(v364);
                                          }
                                        }
LABEL_481:
                                        if (v537)
                                        {
                                          v367 = (const char *)&v568;
                                          if (v569 < 0)
                                            v367 = (const char *)v568;
                                          sub_20E8C003C((uint64_t)&__sb, "%s", v367);
                                          sub_20E863570((uint64_t)&__sb);
                                        }
                                        sub_20E863570((uint64_t)&__sb);
                                        v368 = (std::__shared_weak_count *)v565;
                                        if ((_QWORD)v565)
                                        {
                                          v369 = (unint64_t *)(v565 + 8);
                                          do
                                            v370 = __ldaxr(v369);
                                          while (__stlxr(v370 - 1, v369));
                                          if (!v370)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                                            std::__shared_weak_count::__release_weak(v368);
                                          }
                                        }
                                        if (SHIBYTE(v569) < 0)
                                          operator delete((void *)v568);
                                        __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                                        v371 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                                                  + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                        __p[0].__r_.__value_.__r.__words[2] = v371;
                                        __p[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
                                        if (__p[4].__r_.__value_.__s.__data_[15] < 0)
                                          operator delete((void *)__p[3].__r_.__value_.__r.__words[2]);
                                        std::streambuf::~streambuf();
                                        std::iostream::~basic_iostream();
                                        MEMORY[0x212BC6290](&__p[5].__r_.__value_.__r.__words[1]);
                                        goto LABEL_495;
                                      }
                                    }
                                    memcpy(v320, v299, v319);
                                    goto LABEL_422;
                                  }
                                }
                                memmove(v311, v303, v302);
                                goto LABEL_401;
                              }
                            }
                            memmove(v308, v306, v307);
                            goto LABEL_393;
                          }
                        }
                        memmove(v290, v296, v289);
                        goto LABEL_372;
                      }
                    }
                    else
                    {
                      v288 = __p[5].__r_.__value_.__s.__data_[0];
                      v537 = v282;
                      if ((__p[5].__r_.__value_.__s.__data_[0] & 0x10) == 0)
                        goto LABEL_351;
                    }
                    data = (std::string::pointer)__p[4].__r_.__value_.__r.__words[2];
                    if (__p[4].__r_.__value_.__r.__words[2] < __p[3].__r_.__value_.__r.__words[0])
                    {
                      __p[4].__r_.__value_.__r.__words[2] = __p[3].__r_.__value_.__r.__words[0];
                      data = __p[3].__r_.__value_.__l.__data_;
                    }
                    v296 = (const void *)__p[2].__r_.__value_.__r.__words[2];
                    v289 = (size_t)&data[-__p[2].__r_.__value_.__r.__words[2]];
                    if ((unint64_t)&data[-__p[2].__r_.__value_.__r.__words[2]] > 0x7FFFFFFFFFFFFFF7)
                      goto LABEL_417;
                    goto LABEL_365;
                  }
                }
                else
                {
                  v280 = 0;
                  v281 = v545.__r_.__value_.__r.__words[0];
                  if ((std::string::size_type *)v545.__r_.__value_.__l.__data_ == &v545.__r_.__value_.__r.__words[1])
                    goto LABEL_338;
                }
                do
                {
                  v291 = *(_OWORD *)(v281 + 40);
                  v292 = *(_OWORD *)(v281 + 56);
                  *((_BYTE *)v280 + 32) = *(_BYTE *)(v281 + 72);
                  *v280 = v291;
                  v280[1] = v292;
                  v293 = *(std::string **)(v281 + 8);
                  if (v293)
                  {
                    do
                    {
                      v294 = v293;
                      v293 = (std::string *)v293->__r_.__value_.__r.__words[0];
                    }
                    while (v293);
                  }
                  else
                  {
                    do
                    {
                      v294 = *(std::string **)(v281 + 16);
                      _ZF = v294->__r_.__value_.__r.__words[0] == v281;
                      v281 = (std::string::size_type)v294;
                    }
                    while (!_ZF);
                  }
                  v280 = (_OWORD *)((char *)v280 + 40);
                  v281 = (std::string::size_type)v294;
                }
                while (v294 != (std::string *)&v545.__r_.__value_.__r.__words[1]);
                goto LABEL_338;
              }
LABEL_84:
              v113 = 0;
              v114 = 0;
              v115 = 0;
              goto LABEL_298;
            }
            v101 = v99[1];
            v100 = v99[2];
            v102 = v100 - v101;
            if (v100 == v101)
            {
              v103 = 0;
              goto LABEL_90;
            }
            if (v102 - 1000 >= 0x3E8)
            {
              v116 = 0;
              v117 = 0;
              v118 = (v102 - 1000) / 0x3E8 + 1;
              v104 = v101 + 1000 * (v118 & 0xFFFFFFFFFFFFFELL);
              v119 = v118 & 0xFFFFFFFFFFFFFELL;
              do
              {
                v116 += *(unsigned __int8 *)(v101 + 992);
                v117 += *(unsigned __int8 *)(v101 + 1992);
                v101 += 2000;
                v119 -= 2;
              }
              while (v119);
              v103 = v117 + v116;
              if (v118 == (v118 & 0xFFFFFFFFFFFFFELL))
              {
LABEL_90:
                v121 = v99[7];
                v120 = v99[8];
                v122 = v120 - v121;
                if (v120 == v121)
                {
                  v123 = 0;
                  goto LABEL_98;
                }
                if (v122 - 480 >= 0x1E0)
                {
                  v125 = 0;
                  v126 = 0;
                  v127 = (v122 - 480) / 0x1E0 + 1;
                  v124 = v121 + 480 * (v127 & 0x1FFFFFFFFFFFFFELL);
                  v128 = v127 & 0x1FFFFFFFFFFFFFELL;
                  do
                  {
                    v125 += *(unsigned __int8 *)(v121 + 472);
                    v126 += *(unsigned __int8 *)(v121 + 952);
                    v121 += 960;
                    v128 -= 2;
                  }
                  while (v128);
                  v123 = v126 + v125;
                  if (v127 == (v127 & 0x1FFFFFFFFFFFFFELL))
                  {
LABEL_98:
                    v130 = v99[4];
                    v129 = v99[5];
                    v527 = v123;
                    v520 = v129 - v130;
                    if (v129 == v130)
                    {
                      v132 = 0;
                      goto LABEL_106;
                    }
                    v131 = v129 - v130 - 376;
                    if (v131 >= 0x178)
                    {
                      v134 = 0;
                      v135 = 0;
                      v136 = v131 / 0x178 + 1;
                      v133 = v130 + 376 * (v136 & 0x1FFFFFFFFFFFFFELL);
                      v137 = v136 & 0x1FFFFFFFFFFFFFELL;
                      do
                      {
                        v134 += *(unsigned __int8 *)(v130 + 368);
                        v135 += *(unsigned __int8 *)(v130 + 744);
                        v130 += 752;
                        v137 -= 2;
                      }
                      while (v137);
                      v132 = v135 + v134;
                      if (v136 == (v136 & 0x1FFFFFFFFFFFFFELL))
                      {
LABEL_106:
                        v523 = v132;
                        v139 = v99[13];
                        v138 = v99[14];
                        v140 = v138 - v139;
                        v529 = v102;
                        v525 = v122;
                        v519 = v138 - v139;
                        if (v138 == v139)
                        {
                          v111 = 0;
                          goto LABEL_114;
                        }
                        if ((unint64_t)(v140 - 32) >= 0x20)
                        {
                          v142 = 0;
                          v143 = 0;
                          v144 = ((unint64_t)(v140 - 32) >> 5) + 1;
                          v141 = v139 + 32 * (v144 & 0xFFFFFFFFFFFFFFELL);
                          v145 = (unsigned __int8 *)(v139 + 56);
                          v146 = v144 & 0xFFFFFFFFFFFFFFELL;
                          do
                          {
                            v147 = *(v145 - 32);
                            v148 = *v145;
                            v145 += 64;
                            v142 += v147;
                            v143 += v148;
                            v146 -= 2;
                          }
                          while (v146);
                          v111 = v143 + v142;
                          if (v144 == (v144 & 0xFFFFFFFFFFFFFFELL))
                          {
LABEL_114:
                            std::streambuf::basic_streambuf();
                            __sb = (void **)(MEMORY[0x24BEDB848] + 16);
                            v565 = 0u;
                            v566 = 0u;
                            v567 = 24;
                            object[0] = (void *)(MEMORY[0x24BEDB828] + 24);
                            object[1] = (void *)(MEMORY[0x24BEDB828] + 64);
                            std::ios_base::init((std::ios_base *)&object[1], &__sb);
                            v531 = v103;
                            v581 = 0;
                            v582 = -1;
                            sub_20E86A980(object, (uint64_t)"----Reloc result:\n", 18);
                            v149 = *(_QWORD *)(v538 + 56);
                            v151 = *(_QWORD *)(v149 + 56);
                            v150 = *(_QWORD *)(v149 + 64);
                            if (v151 != v150)
                            {
                              while (1)
                              {
                                v152 = sub_20E86A980(object, (uint64_t)"-------- ", 9);
                                v153 = *(_DWORD *)(v151 + 8);
                                *(_QWORD *)__dst = *(_QWORD *)v151;
                                *(_DWORD *)&__dst[8] = v153;
                                sub_210216370((uint64_t)__dst);
                                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v154 = __p;
                                else
                                  v154 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v155 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                                else
                                  v155 = __p[0].__r_.__value_.__l.__size_;
                                v156 = sub_20E86A980(v152, (uint64_t)v154, v155);
                                v157 = sub_20E86A980(v156, (uint64_t)"<->", 3);
                                v158 = *(_DWORD *)(v151 + 32);
                                v546 = *(uint64_t **)(v151 + 24);
                                LODWORD(v547) = v158;
                                sub_210216370((uint64_t)&v546);
                                if (__dst[23] >= 0)
                                  v159 = __dst;
                                else
                                  v159 = *(_BYTE **)__dst;
                                if (__dst[23] >= 0)
                                  v160 = __dst[23];
                                else
                                  v160 = *(_QWORD *)&__dst[8];
                                v161 = sub_20E86A980(v157, (uint64_t)v159, v160);
                                sub_20E86A980(v161, (uint64_t)" type:", 6);
                                v162 = (_QWORD *)std::ostream::operator<<();
                                sub_20E86A980(v162, (uint64_t)"\n", 1);
                                if ((__dst[23] & 0x80000000) != 0)
                                {
                                  operator delete(*(void **)__dst);
                                  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_117;
LABEL_132:
                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                  v151 += 480;
                                  if (v151 == v150)
                                    break;
                                }
                                else
                                {
                                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                    goto LABEL_132;
LABEL_117:
                                  v151 += 480;
                                  if (v151 == v150)
                                    break;
                                }
                              }
                            }
                            sub_20F2FC0E0(&v556);
                            if (**(int **)(v556 + 56) > 2
                              || (v163 = *(unsigned __int8 *)(v556 + 72),
                                  v164 = sub_20E8C31DC(v556, "OSLogSurrogateAppender", 1, 0),
                                  v165 = v164,
                                  !v163)
                              && !v164)
                            {
LABEL_294:
                              v106 = 652835029 * (v529 >> 3);
                              v105 = -286331153 * (v525 >> 5);
                              v108 = v519 >> 5;
                              v107 = 1736263375 * (v520 >> 3);
                              std::ostream::~ostream();
                              __sb = (void **)(MEMORY[0x24BEDB848] + 16);
                              if (SBYTE7(v566) < 0)
                                operator delete((void *)v565);
                              std::streambuf::~streambuf();
                              v109 = v527;
                              v110 = v523;
                              v112 = *(_QWORD **)(v538 + 64);
                              if (v112)
                                goto LABEL_297;
                              goto LABEL_84;
                            }
                            sub_20E863438((uint64_t)__p);
                            if ((v567 & 0x10) != 0)
                            {
                              v168 = (const char *)*((_QWORD *)&v566 + 1);
                              if (*((_QWORD *)&v566 + 1) < (unint64_t)v563)
                              {
                                *((_QWORD *)&v566 + 1) = v563;
                                v168 = v563;
                              }
                              v169 = v562;
                              v166 = v168 - (_BYTE *)v562;
                              if ((unint64_t)(v168 - (_BYTE *)v562) > 0x7FFFFFFFFFFFFFF7)
                                goto LABEL_214;
                            }
                            else
                            {
                              if ((v567 & 8) == 0)
                              {
                                v166 = 0;
                                __dst[23] = 0;
                                v167 = __dst;
                                goto LABEL_149;
                              }
                              v169 = (const void *)v559;
                              v166 = (size_t)&v561[-v559];
                              if ((unint64_t)&v561[-v559] > 0x7FFFFFFFFFFFFFF7)
LABEL_214:
                                sub_20E860B7C();
                            }
                            if (v166 >= 0x17)
                            {
                              v170 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v166 | 7) != 0x17)
                                v170 = v166 | 7;
                              v171 = v170 + 1;
                              v167 = operator new(v170 + 1);
                              *(_QWORD *)&__dst[8] = v166;
                              *(_QWORD *)&__dst[16] = v171 | 0x8000000000000000;
                              *(_QWORD *)__dst = v167;
                            }
                            else
                            {
                              __dst[23] = v166;
                              v167 = __dst;
                              if (!v166)
                              {
LABEL_149:
                                v167[v166] = 0;
                                if (__dst[23] >= 0)
                                  v172 = __dst;
                                else
                                  v172 = *(_BYTE **)__dst;
                                if (__dst[23] >= 0)
                                  v173 = __dst[23];
                                else
                                  v173 = *(_QWORD *)&__dst[8];
                                sub_20E86A980(&__p[0].__r_.__value_.__r.__words[2], (uint64_t)v172, v173);
                                if ((__dst[23] & 0x80000000) != 0)
                                {
                                  operator delete(*(void **)__dst);
                                  v174 = __p[5].__r_.__value_.__s.__data_[0];
                                  if ((__p[5].__r_.__value_.__s.__data_[0] & 0x10) == 0)
                                  {
LABEL_157:
                                    if ((v174 & 8) == 0)
                                    {
                                      v175 = 0;
                                      HIBYTE(v555) = 0;
                                      v176 = v554;
                                      goto LABEL_170;
                                    }
                                    v178 = (const void *)__p[1].__r_.__value_.__r.__words[2];
                                    v175 = __p[2].__r_.__value_.__l.__size_ - __p[1].__r_.__value_.__r.__words[2];
                                    if (__p[2].__r_.__value_.__l.__size_ - __p[1].__r_.__value_.__r.__words[2] > 0x7FFFFFFFFFFFFFF7)
LABEL_216:
                                      sub_20E860B7C();
LABEL_163:
                                    if (v175 >= 0x17)
                                    {
                                      v179 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v175 | 7) != 0x17)
                                        v179 = v175 | 7;
                                      v180 = v179 + 1;
                                      v176 = operator new(v179 + 1);
                                      v554[1] = (void *)v175;
                                      v555 = v180 | 0x8000000000000000;
                                      v554[0] = v176;
                                    }
                                    else
                                    {
                                      HIBYTE(v555) = v175;
                                      v176 = v554;
                                      if (!v175)
                                      {
LABEL_170:
                                        *((_BYTE *)v176 + v175) = 0;
                                        v546 = &v556;
                                        *(std::chrono::steady_clock::time_point *)&v547 = std::chrono::steady_clock::now();
                                        *((std::chrono::system_clock::time_point *)&v547 + 1) = std::chrono::system_clock::now();
                                        v548 = 2;
                                        v549 = "unknown file";
                                        v550 = 1748;
                                        v552 = 0;
                                        v553 = 0;
                                        v551 = "unknown function";
                                        v181 = v554;
                                        if (v555 < 0)
                                          v181 = (void **)v554[0];
                                        __s = (char *)v181;
                                        v182 = *v546;
                                        if (*(char *)(*v546 + 39) < 0)
                                        {
                                          v184 = *(const char **)(v182 + 16);
                                          v183 = *(_QWORD *)(v182 + 24);
                                          v516 = *v546 + 16;
                                          v517 = *v546;
                                          v186 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                          if ((v186 & 1) != 0)
                                            goto LABEL_176;
                                        }
                                        else
                                        {
                                          v183 = *(unsigned __int8 *)(*v546 + 39);
                                          v184 = (const char *)(*v546 + 16);
                                          v516 = (uint64_t)v184;
                                          v517 = *v546;
                                          v185 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                          if ((v185 & 1) != 0)
                                            goto LABEL_176;
                                        }
                                        if (__cxa_guard_acquire(&qword_254A4A510))
                                        {
                                          sub_20E9E46F8((uint64_t)__dst);
                                          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
                                          if ((_BYTE)v584 && (__dst[23] & 0x80000000) != 0)
                                            operator delete(*(void **)__dst);
                                          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                          __cxa_guard_release(&qword_254A4A510);
                                        }
LABEL_176:
                                        if (byte_254A4A4F8[23] >= 0)
                                          v187 = byte_254A4A4F8;
                                        else
                                          v187 = *(const char **)byte_254A4A4F8;
                                        if (byte_254A4A4F8[23] >= 0)
                                          v188 = byte_254A4A4F8[23];
                                        else
                                          v188 = *(_QWORD *)&byte_254A4A4F8[8];
                                        v189 = v184;
                                        *(_QWORD *)__dst = os_log_create(v187, v184);
                                        v190 = &__dst[8];
                                        if (v188 > 0x7FFFFFFFFFFFFFF7)
                                          sub_20E860B7C();
                                        if (v188 >= 0x17)
                                        {
                                          v191 = v165;
                                          v192 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v188 | 7) != 0x17)
                                            v192 = v188 | 7;
                                          v193 = v192 + 1;
                                          v190 = operator new(v192 + 1);
                                          *(_QWORD *)&__dst[16] = v188;
                                          *(_QWORD *)&v584 = v193 | 0x8000000000000000;
                                          *(_QWORD *)&__dst[8] = v190;
                                          v165 = v191;
                                        }
                                        else
                                        {
                                          BYTE7(v584) = v188;
                                          if (!v188)
                                          {
LABEL_190:
                                            v190[v188] = 0;
                                            BYTE8(v584) = 1;
                                            v194 = v585;
                                            if (v183 > 0x7FFFFFFFFFFFFFF7)
                                              sub_20E860B7C();
                                            if (v183 >= 0x17)
                                            {
                                              v195 = v165;
                                              v196 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
                                              if ((v183 | 7) != 0x17)
                                                v196 = v183 | 7;
                                              v197 = v196 + 1;
                                              v194 = (void **)operator new(v196 + 1);
                                              v585[1] = (void *)v183;
                                              v586 = v197 | 0x8000000000000000;
                                              v585[0] = v194;
                                              v165 = v195;
                                            }
                                            else
                                            {
                                              HIBYTE(v586) = v183;
                                              if (!v183)
                                              {
LABEL_198:
                                                *((_BYTE *)v194 + v183) = 0;
                                                v587 = 1;
                                                v198 = *(NSObject **)__dst;
                                                if (SHIBYTE(v586) < 0)
                                                  operator delete(v585[0]);
                                                if (BYTE8(v584) && SBYTE7(v584) < 0)
                                                  operator delete(*(void **)&__dst[8]);
                                                if (*(_QWORD *)__dst)
                                                  os_release(*(void **)__dst);
                                                if (!v165 || !*(_QWORD *)(v165 + 24))
                                                {
                                                  os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG);
                                                  *(_DWORD *)__dst = 136315138;
                                                  *(_QWORD *)&__dst[4] = __s;
                                                  v205 = (void *)_os_log_send_and_compose_impl();
                                                  if (v205)
                                                    free(v205);
                                                  goto LABEL_280;
                                                }
                                                v199 = _os_log_pack_size();
                                                v200 = operator new(v199, (std::align_val_t)8uLL);
                                                v201 = (_QWORD *)operator new();
                                                *v201 = &off_24C9ABB80;
                                                v201[1] = 0;
                                                v201[2] = 0;
                                                v201[3] = v200;
                                                *(_QWORD *)&v568 = v200;
                                                *((_QWORD *)&v568 + 1) = v200;
                                                v571 = 0;
                                                v569 = (int64_t)v201;
                                                v570 = 0;
                                                v202 = strlen(__s);
                                                if (v202 > 0x7FFFFFFFFFFFFFF7)
                                                  sub_20E860B7C();
                                                v203 = v202;
                                                if (v202 >= 0x17)
                                                {
                                                  v206 = v165;
                                                  v207 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                  if ((v202 | 7) != 0x17)
                                                    v207 = v202 | 7;
                                                  v208 = v207 + 1;
                                                  v204 = operator new(v207 + 1);
                                                  *(_QWORD *)&v589[8] = v203;
                                                  *(_QWORD *)&v589[16] = v208 | 0x8000000000000000;
                                                  *(_QWORD *)v589 = v204;
                                                  v165 = v206;
                                                }
                                                else
                                                {
                                                  v589[23] = v202;
                                                  v204 = v589;
                                                  if (!v202)
                                                  {
LABEL_221:
                                                    v204[v203] = 0;
                                                    v209 = *(_QWORD *)v589;
                                                    v588[0] = *(_QWORD *)&v589[8];
                                                    *(_QWORD *)((char *)v588 + 7) = *(_QWORD *)&v589[15];
                                                    v210 = v589[23];
                                                    v211 = operator new(0x38uLL);
                                                    v211[1] = 0;
                                                    v211[2] = 0;
                                                    v211[3] = off_24C9ABC20;
                                                    *v211 = &off_24C9ABBD0;
                                                    v212 = v588[0];
                                                    v211[4] = v209;
                                                    v211[5] = v212;
                                                    *(_QWORD *)((char *)v211 + 47) = *(_QWORD *)((char *)v588 + 7);
                                                    *((_BYTE *)v211 + 55) = v210;
                                                    v588[0] = 0;
                                                    *(_QWORD *)((char *)v588 + 7) = 0;
                                                    v213 = v571;
                                                    v570 = (char *)(v211 + 3);
                                                    v571 = (std::__shared_weak_count *)v211;
                                                    if (v213)
                                                    {
                                                      v214 = (unint64_t *)&v213->__shared_owners_;
                                                      do
                                                        v215 = __ldaxr(v214);
                                                      while (__stlxr(v215 - 1, v214));
                                                      if (!v215)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                                                        std::__shared_weak_count::__release_weak(v213);
                                                      }
                                                    }
                                                    *(_OWORD *)__dst = v568;
                                                    v216 = v570;
                                                    *(_QWORD *)&__dst[16] = v569;
                                                    if (v569)
                                                    {
                                                      v217 = (unint64_t *)(v569 + 8);
                                                      do
                                                        v218 = __ldxr(v217);
                                                      while (__stxr(v218 + 1, v217));
                                                    }
                                                    v219 = v571;
                                                    *(_QWORD *)&v584 = v216;
                                                    *((_QWORD *)&v584 + 1) = v571;
                                                    if (v571)
                                                    {
                                                      v220 = (unint64_t *)&v571->__shared_owners_;
                                                      do
                                                        v221 = __ldxr(v220);
                                                      while (__stxr(v221 + 1, v220));
                                                      v585[0] = v216;
                                                      do
                                                        v222 = __ldaxr(v220);
                                                      while (__stlxr(v222 - 1, v220));
                                                      if (!v222)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                                                        std::__shared_weak_count::__release_weak(v219);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v585[0] = v216;
                                                    }
                                                    v223 = (std::__shared_weak_count *)v569;
                                                    if (v569)
                                                    {
                                                      v224 = (unint64_t *)(v569 + 8);
                                                      do
                                                        v225 = __ldaxr(v224);
                                                      while (__stlxr(v225 - 1, v224));
                                                      if (!v225)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                                                        std::__shared_weak_count::__release_weak(v223);
                                                      }
                                                    }
                                                    v226 = *(_QWORD *)__dst;
                                                    if (*((char *)v585[0] + 31) >= 0)
                                                      v227 = (char *)v585[0] + 8;
                                                    else
                                                      v227 = (char *)*((_QWORD *)v585[0] + 1);
                                                    v228 = _os_log_pack_fill();
                                                    *(_DWORD *)v228 = 136315138;
                                                    *(_QWORD *)(v228 + 4) = v227;
                                                    v229 = operator new();
                                                    v230 = *(unsigned __int8 *)(v517 + 39);
                                                    v231 = v516;
                                                    if ((v230 & 0x80u) != 0)
                                                    {
                                                      v231 = *(_QWORD *)(v517 + 16);
                                                      v230 = *(_QWORD *)(v517 + 24);
                                                    }
                                                    *(_QWORD *)v229 = v226;
                                                    *(_OWORD *)(v229 + 8) = *(_OWORD *)&__dst[8];
                                                    *(_QWORD *)&__dst[8] = 0;
                                                    *(_QWORD *)&__dst[16] = 0;
                                                    *(_OWORD *)(v229 + 24) = v584;
                                                    v584 = 0uLL;
                                                    *(_QWORD *)(v229 + 40) = v231;
                                                    *(_QWORD *)(v229 + 48) = v230;
                                                    *(_BYTE *)(v229 + 56) = 2;
                                                    *(_QWORD *)v589 = 0;
                                                    *(_QWORD *)&v568 = v229;
                                                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v165 + 24)
                                                                                               + 40))(*(_QWORD *)(v165 + 24), &v568);
                                                    v232 = v568;
                                                    *(_QWORD *)&v568 = 0;
                                                    if (v232)
                                                    {
                                                      v233 = *(std::__shared_weak_count **)(v232 + 32);
                                                      if (v233)
                                                      {
                                                        v234 = (unint64_t *)&v233->__shared_owners_;
                                                        do
                                                          v235 = __ldaxr(v234);
                                                        while (__stlxr(v235 - 1, v234));
                                                        if (!v235)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                                                          std::__shared_weak_count::__release_weak(v233);
                                                        }
                                                      }
                                                      v236 = *(std::__shared_weak_count **)(v232 + 16);
                                                      if (v236)
                                                      {
                                                        v237 = (unint64_t *)&v236->__shared_owners_;
                                                        do
                                                          v238 = __ldaxr(v237);
                                                        while (__stlxr(v238 - 1, v237));
                                                        if (!v238)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                                                          std::__shared_weak_count::__release_weak(v236);
                                                        }
                                                      }
                                                      MEMORY[0x212BC6398](v232, 0x10F0C40B62ED6C6);
                                                      v239 = *(_QWORD *)v589;
                                                      *(_QWORD *)v589 = 0;
                                                      if (v239)
                                                      {
                                                        v240 = *(std::__shared_weak_count **)(v239 + 32);
                                                        if (v240)
                                                        {
                                                          v241 = (unint64_t *)&v240->__shared_owners_;
                                                          do
                                                            v242 = __ldaxr(v241);
                                                          while (__stlxr(v242 - 1, v241));
                                                          if (!v242)
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                                                            std::__shared_weak_count::__release_weak(v240);
                                                          }
                                                        }
                                                        v243 = *(std::__shared_weak_count **)(v239 + 16);
                                                        if (v243)
                                                        {
                                                          v244 = (unint64_t *)&v243->__shared_owners_;
                                                          do
                                                            v245 = __ldaxr(v244);
                                                          while (__stlxr(v245 - 1, v244));
                                                          if (!v245)
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                                                            std::__shared_weak_count::__release_weak(v243);
                                                          }
                                                        }
                                                        MEMORY[0x212BC6398](v239, 0x10F0C40B62ED6C6);
                                                      }
                                                    }
                                                    v246 = (std::__shared_weak_count *)*((_QWORD *)&v584 + 1);
                                                    if (*((_QWORD *)&v584 + 1))
                                                    {
                                                      v247 = (unint64_t *)(*((_QWORD *)&v584 + 1) + 8);
                                                      do
                                                        v248 = __ldaxr(v247);
                                                      while (__stlxr(v248 - 1, v247));
                                                      if (!v248)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                                                        std::__shared_weak_count::__release_weak(v246);
                                                      }
                                                    }
                                                    v249 = *(std::__shared_weak_count **)&__dst[16];
                                                    if (*(_QWORD *)&__dst[16])
                                                    {
                                                      v250 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                                                      do
                                                        v251 = __ldaxr(v250);
                                                      while (__stlxr(v251 - 1, v250));
                                                      if (!v251)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                                                        std::__shared_weak_count::__release_weak(v249);
                                                      }
                                                    }
LABEL_280:
                                                    if (v163)
                                                    {
                                                      v252 = v554;
                                                      if (v555 < 0)
                                                        v252 = (void **)v554[0];
                                                      sub_20E8C003C((uint64_t)&v546, "%s", (const char *)v252);
                                                      sub_20E863570((uint64_t)&v546);
                                                    }
                                                    sub_20E863570((uint64_t)&v546);
                                                    v253 = v553;
                                                    if (v553)
                                                    {
                                                      v254 = (unint64_t *)&v553->__shared_owners_;
                                                      do
                                                        v255 = __ldaxr(v254);
                                                      while (__stlxr(v255 - 1, v254));
                                                      if (!v255)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                                                        std::__shared_weak_count::__release_weak(v253);
                                                      }
                                                    }
                                                    if (SHIBYTE(v555) < 0)
                                                      operator delete(v554[0]);
                                                    __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                                                    v256 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                                    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                                                              + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0]
                                                                                          - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                                    __p[0].__r_.__value_.__r.__words[2] = v256;
                                                    __p[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
                                                    if (__p[4].__r_.__value_.__s.__data_[15] < 0)
                                                      operator delete((void *)__p[3].__r_.__value_.__r.__words[2]);
                                                    std::streambuf::~streambuf();
                                                    std::iostream::~basic_iostream();
                                                    MEMORY[0x212BC6290](&__p[5].__r_.__value_.__r.__words[1]);
                                                    goto LABEL_294;
                                                  }
                                                }
                                                memcpy(v204, __s, v203);
                                                goto LABEL_221;
                                              }
                                            }
                                            memmove(v194, v189, v183);
                                            goto LABEL_198;
                                          }
                                        }
                                        memmove(v190, v187, v188);
                                        goto LABEL_190;
                                      }
                                    }
                                    memmove(v176, v178, v175);
                                    goto LABEL_170;
                                  }
                                }
                                else
                                {
                                  v174 = __p[5].__r_.__value_.__s.__data_[0];
                                  if ((__p[5].__r_.__value_.__s.__data_[0] & 0x10) == 0)
                                    goto LABEL_157;
                                }
                                v177 = (std::string::pointer)__p[4].__r_.__value_.__r.__words[2];
                                if (__p[4].__r_.__value_.__r.__words[2] < __p[3].__r_.__value_.__r.__words[0])
                                {
                                  __p[4].__r_.__value_.__r.__words[2] = __p[3].__r_.__value_.__r.__words[0];
                                  v177 = __p[3].__r_.__value_.__l.__data_;
                                }
                                v178 = (const void *)__p[2].__r_.__value_.__r.__words[2];
                                v175 = (size_t)&v177[-__p[2].__r_.__value_.__r.__words[2]];
                                if ((unint64_t)&v177[-__p[2].__r_.__value_.__r.__words[2]] > 0x7FFFFFFFFFFFFFF7)
                                  goto LABEL_216;
                                goto LABEL_163;
                              }
                            }
                            memmove(v167, v169, v166);
                            goto LABEL_149;
                          }
                        }
                        else
                        {
                          v111 = 0;
                          v141 = v99[13];
                        }
                        do
                        {
                          v111 += *(unsigned __int8 *)(v141 + 24);
                          v141 += 32;
                        }
                        while (v141 != v138);
                        goto LABEL_114;
                      }
                    }
                    else
                    {
                      v132 = 0;
                      v133 = v99[4];
                    }
                    do
                    {
                      v132 += *(unsigned __int8 *)(v133 + 368);
                      v133 += 376;
                    }
                    while (v133 != v129);
                    goto LABEL_106;
                  }
                }
                else
                {
                  v123 = 0;
                  v124 = v99[7];
                }
                do
                {
                  v123 += *(unsigned __int8 *)(v124 + 472);
                  v124 += 480;
                }
                while (v124 != v120);
                goto LABEL_98;
              }
            }
            else
            {
              v103 = 0;
              v104 = v99[1];
            }
            do
            {
              v103 += *(unsigned __int8 *)(v104 + 992);
              v104 += 1000;
            }
            while (v104 != v100);
            goto LABEL_90;
          }
        }
        else
        {
          v24 = 0;
          v25 = v21;
        }
        do
        {
          v24 += *(unsigned __int8 *)(v25 + 104);
          v25 += 112;
        }
        while (v25 != v20);
        goto LABEL_71;
      }
    }
    else
    {
      v22 = 0;
    }
    v24 = 0;
    goto LABEL_71;
  }
LABEL_498:
  sub_20F3250B8(v18, (double **)__p);
  v374 = (double **)(a1 + 408);
  v375 = *(void **)(a1 + 408);
  if (v375)
  {
    *(_QWORD *)(a1 + 416) = v375;
    operator delete(v375);
    *v374 = 0;
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
  }
  *(_QWORD *)(a1 + 408) = __p[0].__r_.__value_.__r.__words[0];
  v376 = __p[0].__r_.__value_.__l.__size_;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1];
  v377 = (double *)v16[2];
  if (v377)
  {
    v378 = (double *)v376;
    do
    {
      v380 = v377[561];
      if (v380 < 0.0)
        goto LABEL_504;
      v381 = *(_QWORD *)(a1 + 424);
      if ((unint64_t)v378 < v381)
      {
        *v378 = v380;
        v379 = v378 + 1;
      }
      else
      {
        v382 = *v374;
        v383 = (char *)v378 - (char *)*v374;
        v384 = v383 >> 3;
        v385 = (v383 >> 3) + 1;
        if (v385 >> 61)
          sub_20E867F44();
        v386 = v381 - (_QWORD)v382;
        if (v386 >> 2 > v385)
          v385 = v386 >> 2;
        if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFF8)
          v387 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v387 = v385;
        if (v387)
        {
          if (v387 >> 61)
            sub_20E877A38();
          v388 = operator new(8 * v387);
          v389 = (double *)&v388[8 * v384];
          *v389 = v380;
          v379 = v389 + 1;
          v390 = (char *)v378 - (char *)v382;
          if (v378 != v382)
          {
LABEL_516:
            v391 = v390 - 8;
            if (v391 < 0x168
              || (v395 = ((char *)(v378 - 1) - (char *)v382) & 0xFFFFFFFFFFFFFFF8,
                  &v388[v383 - 8 - v395] > &v388[v383 - 8])
              || (double *)((char *)v378 - v395 - 8) > v378 - 1
              || (unint64_t)((char *)v378 - &v388[v383]) < 0x20)
            {
              v392 = v378;
              v16 = (_QWORD *)v538;
            }
            else
            {
              v396 = (v391 >> 3) + 1;
              v397 = 8 * (v396 & 0x3FFFFFFFFFFFFFFCLL);
              v392 = &v378[v397 / 0xFFFFFFFFFFFFFFF8];
              v389 = (double *)((char *)v389 - v397);
              v398 = &v388[v383 - 16];
              v399 = v378 - 2;
              v400 = v396 & 0x3FFFFFFFFFFFFFFCLL;
              v16 = (_QWORD *)v538;
              do
              {
                v401 = *(_OWORD *)v399;
                *(v398 - 1) = *((_OWORD *)v399 - 1);
                *v398 = v401;
                v398 -= 2;
                v399 -= 4;
                v400 -= 4;
              }
              while (v400);
              if (v396 == (v396 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_519:
                *(_QWORD *)(a1 + 408) = v389;
                *(_QWORD *)(a1 + 416) = v379;
                *(_QWORD *)(a1 + 424) = &v388[8 * v387];
                if (!v382)
                  goto LABEL_503;
LABEL_523:
                operator delete(v382);
                goto LABEL_503;
              }
            }
            do
            {
              v393 = *((_QWORD *)v392-- - 1);
              *((_QWORD *)v389-- - 1) = v393;
            }
            while (v392 != v382);
            goto LABEL_519;
          }
        }
        else
        {
          v388 = 0;
          v389 = (double *)(8 * v384);
          v394 = (double *)(8 * v384);
          *v394 = v380;
          v379 = v394 + 1;
          v390 = (char *)v378 - (char *)v382;
          if (v378 != v382)
            goto LABEL_516;
        }
        v16 = (_QWORD *)v538;
        *(_QWORD *)(a1 + 408) = v389;
        *(_QWORD *)(a1 + 416) = v379;
        *(_QWORD *)(a1 + 424) = &v388[8 * v387];
        if (v382)
          goto LABEL_523;
      }
LABEL_503:
      *(_QWORD *)(a1 + 416) = v379;
      v378 = v379;
LABEL_504:
      v377 = *(double **)v377;
    }
    while (v377);
  }
  sub_20F327C50(v16[10], (uint64_t)object);
  sub_20F3026D0((uint64_t)v16, (__int128 **)object, a1 + 176);
  sub_20F327B58(v16[10], (uint64_t)__p);
  sub_20F3026D0((uint64_t)v16, (__int128 **)__p, a1 + 152);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v16[359])
  {
    v402 = (char *)object[0];
    for (k = (char *)object[1]; v402 != k; v402 += 344)
    {
      if (v402[24] == 3)
      {
        if (*((_DWORD *)v402 + 4) != 1)
          sub_20E877AB8();
        v404 = v16[359];
        v405 = *(_QWORD *)v402;
        v406.f64[0] = *((float64_t *)v402 + 25);
        v407 = *(int64x2_t *)(v402 + 184);
        v408 = *(int64x2_t *)(v402 + 216);
        _D3 = *((_QWORD *)v402 + 33);
        v410 = (float64x2_t)vzip1q_s64(v407, v408);
        v411 = (float64x2_t)vzip2q_s64(v407, v408);
        v406.f64[1] = *((float64_t *)v402 + 29);
        v412 = vextq_s8((int8x16_t)v411, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v402 + 248), 1), 8uLL);
        _D6 = *((double *)v402 + 37);
        _Q7 = *(float64x2_t *)(v402 + 280);
        v415 = vmlsq_laneq_f64(vmulq_n_f64(v410, vnegq_f64(_Q7).f64[0]), v411, _Q7, 1);
        _D18 = *((_QWORD *)v402 + 32);
        __asm { FMLS            D16, D18, V7.D[1] }
        _Q7.f64[0] = *((float64_t *)v402 + 31);
        *(_QWORD *)&v411.f64[1] = v412.i64[0];
        __asm { FMLS            D16, D3, V6.D[0] }
        *(float64x2_t *)&__p[2].__r_.__value_.__r.__words[2] = v406;
        *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1] = _D3;
        *(float64x2_t *)&__p[1].__r_.__value_.__r.__words[1] = v411;
        *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v412.u64[1];
        *(float64x2_t *)&__p[0].__r_.__value_.__l.__data_ = v410;
        *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = *(unint64_t *)&_Q7.f64[0];
        *(float64x2_t *)&__p[4].__r_.__value_.__l.__data_ = vmlsq_lane_f64(v415, v406, _D6, 0);
        __p[4].__r_.__value_.__r.__words[2] = _D16;
        __p[5].__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v404 + 40))(v404, v405, __p);
      }
    }
  }
  sub_20F327D48(v16[10], (uint64_t)&__sb);
  sub_20EE1D52C(a1 + 200, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5)+ (((char *)rep - (char *)__sb) >> 5));
  v419 = __sb;
  for (m = rep; v419 != m; v419 += 4)
  {
    v421 = *((unsigned __int8 *)v419 + 24);
    if (v421 == 1)
    {
      if (*((_DWORD *)v419 + 4))
        sub_20E877AB8();
      v422 = *(_OWORD *)v419;
      memset(&__p[1], 0, sizeof(std::string));
      __p[3].__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&__p[2].__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&__p[4].__r_.__value_.__l.__data_ = 0uLL;
      v423 = *(_QWORD *)(v538 + 2312);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v422;
      __p[0].__r_.__value_.__r.__words[2] = 0x3FF0000000000000;
      __p[2].__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
      *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1] = 0x3FF0000000000000uLL;
      __p[4].__r_.__value_.__r.__words[2] = v423;
      LODWORD(__p[5].__r_.__value_.__l.__data_) = 0;
      __p[5].__r_.__value_.__s.__data_[8] = 1;
      __p[5].__r_.__value_.__s.__data_[16] = 0;
      __p[15].__r_.__value_.__s.__data_[16] = 0;
      LOBYTE(v573) = 0;
      v575 = 0;
      v424 = *(_QWORD *)(v539 + 208);
      if (v424 >= *(_QWORD *)(v539 + 216))
      {
        v426 = sub_20EE1E1C8((char **)(a1 + 200), (uint64_t)__p);
      }
      else
      {
        memcpy(*(void **)(v539 + 208), __p, 0x179uLL);
        *(_BYTE *)(v424 + 384) = 0;
        *(_BYTE *)(v424 + 408) = 0;
        if (v575)
        {
          v425 = v573;
          *(_QWORD *)(v424 + 400) = v574;
          *(_OWORD *)(v424 + 384) = v425;
          v574 = 0;
          v573 = 0uLL;
          *(_BYTE *)(v424 + 408) = 1;
        }
        v426 = (char *)(v424 + 416);
      }
      *(_QWORD *)(v539 + 208) = v426;
      if (v575 && SHIBYTE(v574) < 0)
        operator delete((void *)v573);
    }
    else
    {
      v427 = *(_QWORD *)(v538 + 2872);
      if (v421 == 3 && v427 != 0)
      {
        if (*((_DWORD *)v419 + 4) != 1)
          sub_20E877AB8();
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v427 + 48))(v427, *v419);
      }
    }
  }
  v429 = v539;
  v430 = *(char **)(v539 + 224);
  v431 = *(char **)(v539 + 232);
  if (v430 == v431)
  {
    v431 = *(char **)(v539 + 224);
    v434 = (_QWORD *)v538;
    goto LABEL_596;
  }
  v432 = *(_QWORD **)(v539 + 184);
  if (*(_QWORD **)(v539 + 176) != v432)
  {
    v433 = *(_QWORD *)(v539 + 224);
    v434 = (_QWORD *)v538;
    do
    {
      v435 = *(_QWORD **)(v539 + 176);
      while (*v435 != *(_QWORD *)v433 || v435[1] != *(_QWORD *)(v433 + 8))
      {
        v435 += 52;
        if (v435 == v432)
          goto LABEL_563;
      }
      if (v435 != v432)
        goto LABEL_573;
LABEL_563:
      v433 += 48;
    }
    while ((char *)v433 != v431);
LABEL_596:
    v447 = v431;
    v448 = v434[10];
    if (!*(_BYTE *)(v448 + 2792))
      goto LABEL_636;
LABEL_620:
    v456 = *(_QWORD *)(v539 + 176);
    v457 = *(_QWORD *)(v539 + 184);
    if (v456 == v457 && *(_QWORD *)(v539 + 224) == (_QWORD)v447)
      goto LABEL_636;
    if (v456 == v457)
    {
      *(_QWORD *)(v539 + 184) = v456;
      v459 = *(_QWORD *)(v448 + 2824);
      v460 = *(_QWORD *)(v448 + 2832);
      if (v459 == v460)
        goto LABEL_634;
    }
    else
    {
      do
      {
        if (*(_BYTE *)(v457 - 8) && *(char *)(v457 - 9) < 0)
          operator delete(*(void **)(v457 - 32));
        v457 -= 416;
      }
      while (v457 != v456);
      v448 = v434[10];
      *(_QWORD *)(v539 + 184) = v456;
      v459 = *(_QWORD *)(v448 + 2824);
      v460 = *(_QWORD *)(v448 + 2832);
      if (v459 == v460)
        goto LABEL_634;
    }
    do
    {
      sub_20FCC8FF4(*(_QWORD **)(v459 + 16));
      v459 += 4472;
    }
    while (v459 != v460);
    v448 = v434[10];
LABEL_634:
    sub_20F327C50(v448, (uint64_t)__p);
    sub_20F3026D0((uint64_t)v434, (__int128 **)__p, a1 + 176);
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    goto LABEL_636;
  }
  v433 = (unint64_t)&v430[48 * ((v431 - v430 - 48) / 0x30uLL) + 48];
  v434 = (_QWORD *)v538;
LABEL_573:
  if ((char *)v433 == v431)
    goto LABEL_596;
  v437 = (_QWORD *)(v433 + 48);
  if ((char *)(v433 + 48) != v431)
  {
    v438 = v433;
    do
    {
      v439 = v437;
      v440 = *(_QWORD **)(v539 + 176);
      v441 = *(_QWORD **)(v539 + 184);
      if (v440 != v441)
      {
        while (*v440 != *v439 || v440[1] != v439[1])
        {
          v440 += 52;
          if (v440 == v441)
            goto LABEL_587;
        }
      }
      if (v440 == v441)
      {
LABEL_587:
        *(_OWORD *)v438 = *(_OWORD *)v439;
        v443 = (void **)(v438 + 16);
        v444 = (__int128 *)(v433 + 64);
        if (*(unsigned __int8 *)(v438 + 40) == *(unsigned __int8 *)(v433 + 88))
        {
          if (*(_BYTE *)(v438 + 40))
          {
            if (*(char *)(v438 + 39) < 0)
              operator delete(*v443);
            v445 = *v444;
            *(_QWORD *)(v438 + 32) = *(_QWORD *)(v433 + 80);
            *(_OWORD *)v443 = v445;
            *(_BYTE *)(v433 + 87) = 0;
            *(_BYTE *)(v433 + 64) = 0;
          }
        }
        else if (*(_BYTE *)(v438 + 40))
        {
          if (*(char *)(v438 + 39) < 0)
            operator delete(*v443);
          *(_BYTE *)(v438 + 40) = 0;
        }
        else
        {
          v446 = *v444;
          *(_QWORD *)(v438 + 32) = *(_QWORD *)(v433 + 80);
          *(_OWORD *)v443 = v446;
          *(_QWORD *)(v433 + 72) = 0;
          *(_QWORD *)(v433 + 80) = 0;
          *(_QWORD *)v444 = 0;
          *(_BYTE *)(v438 + 40) = 1;
        }
        v438 += 48;
      }
      v437 = v439 + 6;
      v433 = (unint64_t)v439;
    }
    while (v439 + 6 != (_QWORD *)v431);
    v430 = *(char **)(v539 + 224);
    v431 = *(char **)(v539 + 232);
    v433 = v438;
  }
  if ((char *)v433 == v431)
    goto LABEL_596;
  v449 = (uint64_t)(v433 - (_QWORD)v430) / 48;
  v447 = &v430[48 * v449];
  v450 = &v431[-v433];
  if (&v431[(_QWORD)v447 - v433] != v431)
  {
    v451 = &v430[48 * v449 + 39];
    do
    {
      *(_OWORD *)(v451 - 39) = *(_OWORD *)&v450[(_QWORD)v451 - 39];
      v452 = (void **)(v451 - 23);
      v453 = &v450[(_QWORD)v451 - 23];
      if (v451[1] == v450[(_QWORD)v451 + 1])
      {
        if (v451[1])
        {
          if (*v451 < 0)
            operator delete(*v452);
          v454 = *(_OWORD *)v453;
          *(_QWORD *)(v451 - 7) = *(_QWORD *)&v450[(_QWORD)v451 - 7];
          *(_OWORD *)v452 = v454;
          v450[(_QWORD)v451] = 0;
          *v453 = 0;
        }
      }
      else if (v451[1])
      {
        if (*v451 < 0)
          operator delete(*v452);
        v451[1] = 0;
      }
      else
      {
        v455 = *(_OWORD *)v453;
        *(_QWORD *)(v451 - 7) = *(_QWORD *)&v450[(_QWORD)v451 - 7];
        *(_OWORD *)v452 = v455;
        *(_QWORD *)&v450[(_QWORD)v451 - 15] = 0;
        *(_QWORD *)&v450[(_QWORD)v451 - 7] = 0;
        *(_QWORD *)v453 = 0;
        v451[1] = 1;
      }
      v451 += 48;
    }
    while (&v450[(_QWORD)v451 - 39] != v431);
    v431 = *(char **)(v539 + 232);
    v447 = v451 - 39;
  }
  while (v431 != v447)
  {
    if (*(v431 - 8) && *(v431 - 9) < 0)
      operator delete(*((void **)v431 - 4));
    v431 -= 48;
  }
  *(_QWORD *)(v539 + 232) = v447;
  v448 = v434[10];
  if (*(_BYTE *)(v448 + 2792))
    goto LABEL_620;
LABEL_636:
  if (v434[5])
  {
    v461 = v521;
    v462 = v434[7] && v434[8] && v434[9] != 0;
  }
  else
  {
    v462 = 0;
    v461 = v521;
  }
  sub_20F31DDC8(v434[10], v461, v462, (__n128 **)__p);
  v540 = 0;
  v541 = 0uLL;
  sub_20F327218(v434[10], (uint64_t **)__p, (uint64_t)&v540);
  v463 = (_QWORD *)(v539 + 296);
  v465 = v540;
  v464 = (_OWORD *)v541;
  v466 = 0x8E38E38E38E38E39 * ((uint64_t)(v541 - (_QWORD)v540) >> 4);
  v467 = *(_BYTE **)(v539 + 296);
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v539 + 312) - (_QWORD)v467) >> 4) < v466)
  {
    if (v466 > 0x1C71C71C71C71C7)
      sub_20EABADD4();
    v468 = *(_BYTE **)(v539 + 304);
    v469 = (char *)operator new(v541 - (_QWORD)v540);
    v470 = &v469[v468 - v467];
    v471 = v470;
    if (v468 != v467)
    {
      v472 = &v469[v468 - v467];
      do
      {
        v471 = v472 - 144;
        *((_OWORD *)v472 - 9) = *((_OWORD *)v468 - 9);
        v473 = *((_OWORD *)v468 - 1);
        v475 = *((_OWORD *)v468 - 4);
        v474 = *((_OWORD *)v468 - 3);
        *((_OWORD *)v472 - 2) = *((_OWORD *)v468 - 2);
        *((_OWORD *)v472 - 1) = v473;
        *((_OWORD *)v472 - 4) = v475;
        *((_OWORD *)v472 - 3) = v474;
        v476 = *((_OWORD *)v468 - 8);
        v477 = *((_OWORD *)v468 - 7);
        v478 = *((_OWORD *)v468 - 5);
        *((_OWORD *)v472 - 6) = *((_OWORD *)v468 - 6);
        *((_OWORD *)v472 - 5) = v478;
        *((_OWORD *)v472 - 8) = v476;
        *((_OWORD *)v472 - 7) = v477;
        v468 -= 144;
        v472 -= 144;
      }
      while (v468 != v467);
    }
    *(_QWORD *)(v539 + 296) = v471;
    *(_QWORD *)(v539 + 304) = v470;
    *(_QWORD *)(v539 + 312) = &v469[144 * v466];
    if (v467)
    {
      operator delete(v467);
      v465 = v540;
      v464 = (_OWORD *)v541;
    }
  }
  if (v465 != v464)
  {
    v479 = *(_OWORD **)(v539 + 304);
    do
    {
      v487 = *(_QWORD *)(v429 + 312);
      if ((unint64_t)v479 < v487)
      {
        *v479 = *v465;
        v480 = v465[8];
        v482 = v465[5];
        v481 = v465[6];
        v479[7] = v465[7];
        v479[8] = v480;
        v479[5] = v482;
        v479[6] = v481;
        v483 = v465[1];
        v484 = v465[2];
        v485 = v465[4];
        v479[3] = v465[3];
        v479[4] = v485;
        v479[1] = v483;
        v479[2] = v484;
        v486 = v479 + 9;
      }
      else
      {
        v488 = (_OWORD *)*v463;
        v489 = 0x8E38E38E38E38E39 * (((uint64_t)v479 - *v463) >> 4);
        v490 = v489 + 1;
        if (v489 + 1 > 0x1C71C71C71C71C7)
          sub_20EABADD4();
        v491 = 0x8E38E38E38E38E39 * ((uint64_t)(v487 - (_QWORD)v488) >> 4);
        if (2 * v491 > v490)
          v490 = 2 * v491;
        if (v491 >= 0xE38E38E38E38E3)
          v492 = 0x1C71C71C71C71C7;
        else
          v492 = v490;
        if (v492)
        {
          if (v492 > 0x1C71C71C71C71C7)
            sub_20E877A38();
          v493 = (char *)operator new(144 * v492);
        }
        else
        {
          v493 = 0;
        }
        v494 = &v493[144 * v489];
        *(_OWORD *)v494 = *v465;
        v495 = v465[8];
        v497 = v465[5];
        v496 = v465[6];
        *((_OWORD *)v494 + 7) = v465[7];
        *((_OWORD *)v494 + 8) = v495;
        *((_OWORD *)v494 + 5) = v497;
        *((_OWORD *)v494 + 6) = v496;
        v498 = v465[1];
        v499 = v465[2];
        v500 = v465[4];
        *((_OWORD *)v494 + 3) = v465[3];
        *((_OWORD *)v494 + 4) = v500;
        *((_OWORD *)v494 + 1) = v498;
        *((_OWORD *)v494 + 2) = v499;
        v501 = v494;
        if (v479 != v488)
        {
          do
          {
            *((_OWORD *)v501 - 9) = *(v479 - 9);
            v502 = *(v479 - 1);
            v504 = *(v479 - 4);
            v503 = *(v479 - 3);
            *((_OWORD *)v501 - 2) = *(v479 - 2);
            *((_OWORD *)v501 - 1) = v502;
            *((_OWORD *)v501 - 4) = v504;
            *((_OWORD *)v501 - 3) = v503;
            v505 = *(v479 - 8);
            v506 = *(v479 - 7);
            v507 = *(v479 - 5);
            *((_OWORD *)v501 - 6) = *(v479 - 6);
            *((_OWORD *)v501 - 5) = v507;
            *((_OWORD *)v501 - 8) = v505;
            *((_OWORD *)v501 - 7) = v506;
            v501 -= 144;
            v479 -= 9;
          }
          while (v479 != v488);
          v479 = (_OWORD *)*v463;
        }
        v486 = v494 + 144;
        v429 = v539;
        *(_QWORD *)(v539 + 296) = v501;
        *(_QWORD *)(v539 + 304) = v494 + 144;
        *(_QWORD *)(v539 + 312) = &v493[144 * v492];
        if (v479)
          operator delete(v479);
      }
      *(_QWORD *)(v429 + 304) = v486;
      v465 += 9;
      v479 = v486;
    }
    while (v465 != v464);
  }
  *(_BYTE *)(v429 + 368) = *(_BYTE *)(v538 + 2320);
  sub_20F445850(-991146299 * ((*(_QWORD *)(v429 + 160) - *(_QWORD *)(v429 + 152)) >> 5), -991146299 * ((*(_QWORD *)(v429 + 184) - *(_QWORD *)(v429 + 176)) >> 5), -1431655765 * ((*(_QWORD *)(v429 + 232) - *(_QWORD *)(v429 + 224)) >> 4), -991146299 * ((*(_QWORD *)(v429 + 208) - *(_QWORD *)(v429 + 200)) >> 5), v538 + 2328);
  v508 = *(_QWORD *)(v538 + 40) && *(_QWORD *)(v538 + 56) && *(_QWORD *)(v538 + 64) && *(_QWORD *)(v538 + 72) != 0;
  sub_20F441EF8(v508, v538 + 2328);
  v514 = *(_QWORD **)(v538 + 16);
  if (v514)
  {
    v515 = 0;
    do
    {
      v515 += *(_QWORD *)(**(_QWORD **)(v514[5] + 424) + 64) - ((uint64_t)(v514[8] - v514[7]) >> 4);
      v514 = (_QWORD *)*v514;
    }
    while (v514);
  }
  else
  {
    v515 = 0;
  }
  sub_20F4438B4(*(_QWORD *)(v538 + 24), v515, v538 + 2328, v509, v510, v511, v512, v513);
  if (*(_BYTE *)(v538 + 2408))
  {
    ++*(_DWORD *)(v538 + 2400);
    sub_20FDBBA84(v538 + 2328);
    if (!*(_BYTE *)(v538 + 2528))
      goto LABEL_687;
  }
  else if (!*(_BYTE *)(v538 + 2528)
         || !*(_QWORD *)(v538 + 2512)
         || *(_QWORD *)(v538 + 2464) == *(_QWORD *)(v538 + 2472))
  {
    goto LABEL_687;
  }
  if (*(_QWORD *)(v538 + 2512) && *(_QWORD *)(v538 + 2464) != *(_QWORD *)(v538 + 2472))
    sub_210214754(v538 + 2416, NAN);
LABEL_687:
  if (v540)
  {
    *(_QWORD *)&v541 = v540;
    operator delete(v540);
  }
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (__sb)
  {
    rep = __sb;
    operator delete(__sb);
  }
  if (object[0])
  {
    object[1] = object[0];
    operator delete(object[0]);
  }
}

void sub_20F2F68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,_QWORD *a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  if (*(_BYTE *)(v63 - 216) && *(char *)(v63 - 217) < 0)
    operator delete(*(void **)(v63 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  if (a61 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&STACK[0x230]);
  std::ostream::~ostream();
  sub_20F23197C((uint64_t)&a63);
  sub_20E86872C(a29, a45);
  sub_20E91E818(a35);
  _Unwind_Resume(a1);
}

BOOL sub_20F2F6D34(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30[124];
  __int128 v31;
  unsigned __int8 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _BYTE v48[288];
  _BYTE v49[288];
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;

  sub_20F239C2C(*(unsigned int **)(a1 + 72), (uint64_t)&v31);
  v2 = v32;
  if (v32)
  {
    v3 = *(uint64_t **)(a1 + 64);
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(v4 + 2824);
    v6 = *(_QWORD *)(v4 + 2832);
    if (v5 != v6)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v5 + 16);
        if (v7)
        {
          if (*(_QWORD *)(v7 + 160) == (_QWORD)v31)
            break;
        }
        v5 += 4472;
        if (v5 == v6)
          goto LABEL_9;
      }
    }
    if (v5 == v6 || !v5)
    {
LABEL_9:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2600, (uint64_t)"submap", 6, (uint64_t)"Invalid submap request", 22, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = 0;
    }
    sub_20F26CD28(v5, &v31, v30);
    sub_20F22E258((uint64_t)&v33, (uint64_t)v30);
    v67 = 1;
    v8 = v3[2];
    if (v8 >= v3[3])
    {
      v23 = sub_20F22DD3C(v3 + 1, (uint64_t)&v33);
    }
    else
    {
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)v8 = v33;
      *(_QWORD *)(v8 + 16) = v34;
      v33 = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 24) = v35;
      *(_QWORD *)(v8 + 40) = v36;
      v35 = 0u;
      v34 = 0;
      v36 = 0;
      v9 = v37;
      v10 = v39;
      *(_OWORD *)(v8 + 64) = v38;
      *(_OWORD *)(v8 + 80) = v10;
      *(_OWORD *)(v8 + 48) = v9;
      v11 = v40;
      v12 = v41;
      v13 = v43;
      *(_OWORD *)(v8 + 128) = v42;
      *(_OWORD *)(v8 + 144) = v13;
      *(_OWORD *)(v8 + 96) = v11;
      *(_OWORD *)(v8 + 112) = v12;
      v14 = v44;
      v15 = v45;
      v16 = v46;
      *(_QWORD *)(v8 + 208) = v47;
      *(_OWORD *)(v8 + 176) = v15;
      *(_OWORD *)(v8 + 192) = v16;
      *(_OWORD *)(v8 + 160) = v14;
      memcpy((void *)(v8 + 216), v48, 0x120uLL);
      memcpy((void *)(v8 + 504), v49, 0x120uLL);
      *(_QWORD *)(v8 + 792) = 0;
      *(_OWORD *)(v8 + 800) = 0u;
      *(_OWORD *)(v8 + 792) = v50;
      *(_QWORD *)(v8 + 808) = v51;
      v50 = 0u;
      v51 = 0;
      v17 = v53;
      *(_OWORD *)(v8 + 816) = v52;
      *(_QWORD *)(v8 + 832) = v17;
      v18 = v55;
      *(_OWORD *)(v8 + 840) = v54;
      *(_QWORD *)(v8 + 856) = v18;
      *(_OWORD *)(v8 + 864) = v56;
      v19 = v57;
      *(_QWORD *)(v8 + 896) = v58;
      *(_OWORD *)(v8 + 880) = v19;
      *(_QWORD *)(v8 + 920) = 0;
      *(_OWORD *)(v8 + 904) = 0u;
      *(_OWORD *)(v8 + 904) = v59;
      *(_QWORD *)(v8 + 920) = v60;
      v59 = 0u;
      v60 = 0;
      *(_QWORD *)(v8 + 928) = v61;
      v20 = v8 + 936;
      v21 = v62;
      *(_QWORD *)(v8 + 936) = v62;
      v22 = v63;
      *(_QWORD *)(v8 + 944) = v63;
      if (v22)
      {
        *(_QWORD *)(v21 + 16) = v20;
        v61 = &v62;
        v62 = 0;
        v63 = 0;
      }
      else
      {
        *(_QWORD *)(v8 + 928) = v20;
      }
      v24 = v64;
      v25 = v65;
      *(_QWORD *)(v8 + 984) = v66;
      *(_OWORD *)(v8 + 952) = v24;
      *(_OWORD *)(v8 + 968) = v25;
      *(_BYTE *)(v8 + 992) = v67;
      v23 = v8 + 1000;
    }
    v3[2] = v23;
    sub_20E9549C4((char **)&v33);
    sub_20E9549C4((char **)v30);
    v26 = *(_QWORD *)(a1 + 72);
    v27 = *(_QWORD *)(v26 + 104);
    v28 = *(_QWORD *)(v26 + 112);
    if (v27 != v28)
    {
      while (*(_QWORD *)v27 != (_QWORD)v31 || *(_DWORD *)(v27 + 8) != DWORD2(v31))
      {
        v27 += 24;
        if (v27 == v28)
          return v2 != 0;
      }
      *(_BYTE *)(v27 + 16) = 1;
    }
  }
  return v2 != 0;
}

void sub_20F2F7050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9549C4((char **)&STACK[0x400]);
  sub_20E9549C4((char **)va);
  _Unwind_Resume(a1);
}

void sub_20F2F706C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9549C4((char **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F2F7080(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *result;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v33 = v32;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v32);
    }
    else
    {
      v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v33 = 0;
  }
  v34 = 1;
  v5 = a1[22];
  v4 = a1[23];
  if (v5 < v4)
  {
    if (v33)
    {
      if (v33 == v32)
      {
        *(_QWORD *)(v5 + 24) = v5;
        (*(void (**)(_QWORD *, unint64_t))(*v33 + 24))(v33, v5);
        v16 = v34;
        goto LABEL_27;
      }
      v6 = &v33;
      *(_QWORD *)(v5 + 24) = v33;
    }
    else
    {
      v6 = (_QWORD *)(v5 + 24);
    }
    *v6 = 0;
    v16 = 1;
LABEL_27:
    *(_BYTE *)(v5 + 32) = v16;
    v18 = v5 + 40;
    goto LABEL_49;
  }
  v7 = (char *)a1[21];
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v7) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0x666666666666666)
    sub_20E867F44();
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v7) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v9;
  if (!v11)
  {
    v12 = 0;
    v13 = 8 * ((uint64_t)(v5 - (_QWORD)v7) >> 3);
    v14 = v33;
    if (v33)
      goto LABEL_19;
LABEL_24:
    v15 = (_QWORD *)(v13 + 24);
    goto LABEL_25;
  }
  if (v11 > 0x666666666666666)
    sub_20E877A38();
  v12 = operator new(40 * v11);
  v13 = (uint64_t)&v12[8 * ((uint64_t)(v5 - (_QWORD)v7) >> 3)];
  v14 = v33;
  if (!v33)
    goto LABEL_24;
LABEL_19:
  if (v14 != v32)
  {
    v15 = &v33;
    *(_QWORD *)(v13 + 24) = v14;
LABEL_25:
    *v15 = 0;
    v17 = 1;
    goto LABEL_29;
  }
  *(_QWORD *)(v13 + 24) = v13;
  (*(void (**)(_QWORD *, uint64_t))(v32[0] + 24))(v32, v13);
  v7 = (char *)a1[21];
  v5 = a1[22];
  v17 = v34;
LABEL_29:
  v19 = &v12[40 * v11];
  v12[40 * v8 + 32] = v17;
  v18 = v13 + 40;
  if ((char *)v5 != v7)
  {
    v20 = 0;
    v21 = v5;
    while (1)
    {
      v23 = v13 + v20;
      v24 = v5 + v20;
      v25 = *(_QWORD *)(v5 + v20 - 16);
      if (v25)
      {
        if (v24 - 40 == v25)
        {
          *(_QWORD *)(v23 - 16) = v23 - 40;
          (*(void (**)(_QWORD))(**(_QWORD **)(v24 - 16) + 24))(*(_QWORD *)(v24 - 16));
          goto LABEL_33;
        }
        v22 = (_QWORD *)(v21 - 16);
        *(_QWORD *)(v23 - 16) = v25;
      }
      else
      {
        v22 = (_QWORD *)(v23 - 16);
      }
      *v22 = 0;
LABEL_33:
      v21 -= 40;
      *(_BYTE *)(v13 + v20 - 8) = *(_BYTE *)(v5 + v20 - 8);
      v20 -= 40;
      if ((char *)(v5 + v20) == v7)
      {
        v7 = (char *)a1[21];
        v26 = (char *)a1[22];
        a1[21] = v13 + v20;
        a1[22] = v18;
        a1[23] = v19;
        if (v26 == v7)
          goto LABEL_47;
        while (2)
        {
          v29 = v26 - 40;
          v27 = (char *)*((_QWORD *)v26 - 2);
          if (v26 - 40 != v27)
          {
            if (v27)
            {
              v28 = 5;
LABEL_41:
              (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
            }
            v26 = v29;
            if (v29 == v7)
              goto LABEL_47;
            continue;
          }
          break;
        }
        v27 = v26 - 40;
        v28 = 4;
        goto LABEL_41;
      }
    }
  }
  a1[21] = v13;
  a1[22] = v18;
  a1[23] = v19;
LABEL_47:
  if (v7)
    operator delete(v7);
LABEL_49:
  a1[22] = v18;
  result = v33;
  if (v33 == v32)
  {
    v31 = 4;
    result = v32;
  }
  else
  {
    if (!v33)
      return result;
    v31 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
}

void sub_20F2F73C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void **sub_20F2F7434(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (!*(v3 - 8))
        goto LABEL_13;
      v7 = (char *)*((_QWORD *)v3 - 2);
      if (v3 - 40 == v7)
      {
        v7 = v3 - 40;
        v8 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_13;
        v8 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_13:
      v9 = v3 - 72;
      v5 = (char *)*((_QWORD *)v3 - 6);
      if (v3 - 72 == v5)
      {
        v5 = v3 - 72;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 -= 72;
      if (v9 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

uint64_t sub_20F2F74F8(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  float64_t *v20;
  uint64_t v21;
  uint64_t v22;
  float64_t *v23;
  float64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  float64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  __uint64_t v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  float64_t v46;
  unint64_t *v47;
  unint64_t v48;
  float64_t v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BOOL4 v61;
  uint64_t v62;
  char v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  size_t v74;
  void **p_dst;
  _BYTE *v76;
  float64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  uint64_t v81;
  size_t v82;
  const char *v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  const char *v86;
  size_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  size_t v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  size_t v98;
  size_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  const char *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  float64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  __int128 *v160;
  uint64_t v161;
  __uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  float64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  __int128 *v175;
  uint64_t v176;
  char *v177;
  __int128 *v178;
  __uint64_t v179;
  __int128 v180;
  __int128 v181;
  _BYTE *v182;
  _BYTE *v183;
  int64_t v184;
  char *v185;
  __uint64_t v186;
  uint64_t v187;
  float64_t v188;
  _QWORD *v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  _BYTE *v193;
  _BYTE *v194;
  int64_t v195;
  char *v196;
  char *v197;
  float64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  char *v204;
  __int128 v205;
  __int128 v206;
  char *v207;
  void *v208;
  char *v209;
  __uint64_t v210;
  __uint64_t v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __uint64_t v215;
  char *v216;
  __int128 v217;
  __int128 v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  int64_t v224;
  uint64_t v225;
  uint64_t v226;
  _OWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  _OWORD *v261;
  uint64_t v262;
  char *v263;
  char *v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  _OWORD *v268;
  _OWORD *v269;
  char *v270;
  _OWORD *v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  _OWORD *v275;
  _OWORD *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  _OWORD *v283;
  unint64_t v284;
  _OWORD *v285;
  unint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  _BYTE *v290;
  void **v291;
  int64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  char *v302;
  unint64_t v303;
  _OWORD *v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  __int128 v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  _BYTE *v333;
  _BYTE *v334;
  int64_t v335;
  char *v336;
  char *v337;
  void *v338;
  char *v339;
  void *v340;
  void *v341;
  char *v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  const void *v355;
  void *v356;
  char **v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  char *v369;
  char **v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  void **v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  char *v379;
  uint64_t v380;
  float64_t v381;
  char *v382;
  char *v383;
  uint64_t v384;
  char *v385;
  size_t v386;
  uint64_t v387;
  float64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  char *v393;
  char *v394;
  void *v395;
  void *v396;
  _BYTE *v397;
  _BYTE *v398;
  int64_t v399;
  char *v400;
  char *v401;
  void *v402;
  void *v403;
  uint64_t v404;
  char *v405;
  char *v406;
  void *v407;
  char *v408;
  void *v409;
  void *v410;
  char *v411;
  char *v412;
  void *v413;
  char *v414;
  void *v415;
  void *v416;
  char *v417;
  void *v418;
  char *v419;
  void (***v420)(char *);
  void (**v421)(char *);
  void *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  unint64_t v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  _OWORD *v442;
  _OWORD *v443;
  char v444;
  _QWORD *v445;
  uint64_t v446;
  _OWORD *v447;
  _OWORD *v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  float64x2_t v458;
  float64x2_t v459;
  __int128 v460;
  float64x2_t v461;
  float64x2_t v462;
  __int128 v463;
  float64x2_t v464;
  uint64_t v465;
  uint64_t v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  uint64_t v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  __int128 v497;
  __int128 v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  uint64_t v511;
  int v512;
  float64_t v513;
  int8x16_t v514;
  float64_t v515;
  float64_t v516;
  int8x16_t v517;
  unint64_t v518;
  float64_t v519;
  float64x2_t v520;
  float64x2_t v521;
  BOOL v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  int8x16_t v535;
  int8x16_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  _BYTE *v597;
  uint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  _BYTE *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  _BYTE *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  _BYTE *v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  float64_t v653;
  _BYTE *v654;
  unsigned __int8 v655;
  unint64_t v656;
  char *v657;
  size_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t j;
  uint64_t v662;
  _BYTE *v663;
  int8x8_t *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  char *v668;
  char *v669;
  unint64_t v670;
  unint64_t v671;
  char *v672;
  char *v673;
  void *v674;
  char *v675;
  void (***v676)(char *);
  void (**v677)(char *);
  uint64_t *v678;
  uint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  float64_t v682;
  float64_t v683;
  _QWORD *v684;
  uint64_t v685;
  uint64_t v686;
  float64_t v687;
  float64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  char v695;
  __int128 v696;
  uint64_t v697;
  uint64_t v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  char *v703;
  char *v704;
  void *v705;
  char *v706;
  void *v707;
  void *v708;
  char *v709;
  void *v710;
  char *v711;
  void (***v712)(char *);
  void (**v713)(char *);
  char *v714;
  char *v715;
  void *v716;
  char *v717;
  void *v718;
  void *v719;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  float64x2_t v732;
  float64x2_t v733;
  const char *__s;
  void **__sa;
  char *__sb;
  char *__sc;
  float64x2_t __sd;
  int __src;
  __int128 *__srca;
  float64_t __srcb;
  _BYTE *__srcc;
  uint64_t *__srcd;
  float64x2_t __srce;
  uint64_t v745;
  unsigned __int8 *v746;
  unsigned __int8 *v747;
  char v748;
  float64x2_t v749;
  float64x2_t v750;
  unsigned int v751;
  uint64_t v752;
  const char *v753;
  uint64_t v754;
  int v755;
  unsigned int v756;
  uint64_t v757;
  uint64_t v758;
  void *v759[3];
  void *v760;
  char *v761;
  void *v762;
  char *v763;
  char v764;
  void *v765;
  void *v766;
  char *v767;
  void *v768;
  char *v769;
  char v770;
  void *v771[12];
  char v772;
  __int128 v773;
  std::__shared_weak_count *v774;
  __int128 v775;
  uint64_t v776;
  uint64_t v777;
  char v778;
  void *v779;
  __int128 v780;
  void *v781;
  char *v782;
  void *v783;
  char *v784;
  char v785;
  void **__dst;
  _BYTE *v787;
  int64_t v788;
  void *v789;
  char *v790;
  char v791;
  uint64_t v792;
  __int128 v793;
  __int128 v794;
  int v795;
  __int128 v796;
  __int128 v797;
  int v798;
  __uint64_t v799[2];
  _BYTE v800[32];
  float64x2_t v801;
  _BYTE v802[32];
  float64x2_t v803;
  _BYTE v804[32];
  float64x2_t v805;
  _BYTE v806[32];
  float64x2_t v807;
  _BYTE v808[32];
  float64x2_t v809;
  _BYTE v810[32];
  __int128 v811;
  float64x2_t object[3];
  float64x2_t v813;
  void *v814[2];
  float64x2_t v815;
  void *v816[2];
  void *v817[2];
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820[18];
  _OWORD v821[3];
  uint64_t v822;
  __int128 v823;
  uint64_t v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  uint64_t v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  uint64_t v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  uint64_t v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  uint64_t v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  uint64_t v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  uint64_t v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  uint64_t v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  uint64_t v866;
  _BYTE v867[696];
  _BYTE v868[648];
  _OWORD v869[43];
  char v870;
  _BYTE oslog[24];
  __int128 v872;
  void *v873;
  const char *v874;
  unint64_t v875;
  std::__shared_weak_count *v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  _BYTE v880[296];
  char v881;
  char v882;
  uint64_t v883;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  i = v1;
  v8 = v7;
  v883 = *MEMORY[0x24BDAC8D0];
  sub_20F2FC0E0(&v779);
  v757 = i;
  v758 = v5;
  v745 = v8;
  if (**((int **)v779 + 7) > 3)
    goto LABEL_80;
  v9 = *((unsigned __int8 *)v779 + 72);
  v10 = sub_20E8C31DC((uint64_t)v779, "OSLogSurrogateAppender", 1, 0);
  v11 = v10;
  v12 = !v9 && v10 == 0;
  if (v12)
    goto LABEL_80;
  v746 = v3;
  *(_QWORD *)oslog = &v779;
  *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
  LODWORD(v872) = 3;
  *((_QWORD *)&v872 + 1) = "unknown file";
  LODWORD(v873) = 720;
  v876 = 0;
  v874 = "unknown function";
  v875 = 0;
  v13 = **(_QWORD **)oslog;
  v14 = (const char *)(**(_QWORD **)oslog + 16);
  v753 = v14;
  if (*(char *)(**(_QWORD **)oslog + 39) < 0)
  {
    v14 = *(const char **)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    v755 = v9;
    v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v17 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v15 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
    v755 = v9;
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[1].f64[1]) && SHIBYTE(object[1].f64[0]) < 0)
      operator delete(*(void **)&object[0].f64[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v18 = byte_254A4A4F8;
  else
    v18 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v19 = byte_254A4A4F8[23];
  else
    v19 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)&object[0].f64[0] = os_log_create(v18, v14);
  v20 = &object[0].f64[1];
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19 >= 0x17)
  {
    v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v21 = v19 | 7;
    v22 = v21 + 1;
    v20 = (float64_t *)operator new(v21 + 1);
    *(_QWORD *)&object[1].f64[1] = v22 | 0x8000000000000000;
    *(_QWORD *)&object[0].f64[1] = v20;
    *(_QWORD *)&object[1].f64[0] = v19;
    v5 = v758;
    goto LABEL_23;
  }
  HIBYTE(object[1].f64[1]) = v19;
  if (v19)
LABEL_23:
    memmove(v20, v18, v19);
  *((_BYTE *)v20 + v19) = 0;
  LOBYTE(object[2].f64[0]) = 1;
  v23 = &object[2].f64[1];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (float64_t *)operator new(v25 + 1);
    *(_QWORD *)&v813.f64[1] = v26 | 0x8000000000000000;
    *(_QWORD *)&object[2].f64[1] = v23;
    *(_QWORD *)&v813.f64[0] = v15;
    v5 = v758;
  }
  else
  {
    HIBYTE(v813.f64[1]) = v15;
    if (!v15)
    {
      LOBYTE(object[2].f64[1]) = 0;
      LOBYTE(v814[0]) = 1;
      v24 = object[0].f64[0];
      if ((SHIBYTE(v813.f64[1]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v23, v14, v15);
  *((_BYTE *)v23 + v15) = 0;
  LOBYTE(v814[0]) = 1;
  v24 = object[0].f64[0];
  if ((SHIBYTE(v813.f64[1]) & 0x80000000) == 0)
  {
LABEL_28:
    if (!LOBYTE(object[2].f64[0]))
      goto LABEL_37;
LABEL_35:
    if (SHIBYTE(object[1].f64[1]) < 0)
      operator delete(*(void **)&object[0].f64[1]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(*(void **)&object[2].f64[1]);
  if (LOBYTE(object[2].f64[0]))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)&object[0].f64[0])
    os_release(*(void **)&object[0].f64[0]);
  if (v11 && *(_QWORD *)(v11 + 24))
  {
    v27 = _os_log_pack_size();
    v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v29;
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    *(_QWORD *)&object[0].f64[0] = v28;
    *(_QWORD *)&object[0].f64[1] = v28;
    *(_QWORD *)&object[1].f64[0] = v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    memset(&object[1].f64[1], 0, 24);
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
    }
    v34 = object[0].f64[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v35 = operator new();
    v36 = *(unsigned __int8 *)(v13 + 39);
    v37 = v753;
    if ((v36 & 0x80u) != 0)
    {
      v37 = *(const char **)(v13 + 16);
      v36 = *(_QWORD *)(v13 + 24);
    }
    *(float64_t *)v35 = v34;
    *(float64x2_t *)(v35 + 8) = *(float64x2_t *)((char *)object + 8);
    object[0].f64[1] = 0.0;
    object[1].f64[0] = 0.0;
    *(float64x2_t *)(v35 + 24) = *(float64x2_t *)((char *)&object[1] + 8);
    object[1].f64[1] = 0.0;
    object[2].f64[0] = 0.0;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = 1;
    *(_QWORD *)&v773 = 0;
    v799[0] = v35;
    (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), v799);
    v38 = v799[0];
    v799[0] = 0;
    v3 = v746;
    v39 = v755;
    if (v38)
    {
      v40 = *(std::__shared_weak_count **)(v38 + 32);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = *(std::__shared_weak_count **)(v38 + 16);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
      *(_QWORD *)&v773 = 0;
    }
    v46 = object[2].f64[0];
    if (*(_QWORD *)&object[2].f64[0])
    {
      v47 = (unint64_t *)(*(_QWORD *)&object[2].f64[0] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v46 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v46));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v46);
      }
    }
    v49 = object[1].f64[0];
    if (*(_QWORD *)&object[1].f64[0])
    {
      v50 = (unint64_t *)(*(_QWORD *)&object[1].f64[0] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v49 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v49));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v49);
      }
    }
  }
  else
  {
    os_log_type_enabled(*(os_log_t *)&v24, OS_LOG_TYPE_INFO);
    LOWORD(object[0].f64[0]) = 0;
    v52 = (void *)_os_log_send_and_compose_impl();
    v3 = v746;
    v39 = v755;
    if (v52)
      free(v52);
  }
  if (v39)
  {
    sub_20E8C003C((uint64_t)oslog, "Attempt to add a new frame into map");
    sub_20E863570((uint64_t)oslog);
  }
  sub_20E863570((uint64_t)oslog);
  v53 = v876;
  if (v876)
  {
    v54 = (unint64_t *)&v876->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
LABEL_80:
  v797 = 0u;
  v796 = 0u;
  v798 = 733220952;
  kdebug_trace();
  v794 = 0u;
  v793 = 0u;
  v795 = 733223688;
  kdebug_trace();
  v56 = *(_QWORD *)(i + 80);
  v57 = *(_QWORD *)(*(_QWORD *)(v5 + 1096) + 56);
  v58 = *(_QWORD *)(v56 + 2808);
  v752 = v57;
  v754 = v58;
  if (*(_BYTE *)(*(_QWORD *)(v56 + 2816) + 224))
  {
    v751 = 0;
    v59 = *v3;
    v61 = v59 == 2 && v57 == v58;
    v756 = v61;
    if (v59 == 3 && v57 == v58)
    {
      v62 = *(_QWORD *)(i + 40);
      if (v62)
      {
        v62 = *(_QWORD *)(i + 56);
        if (v62)
        {
          v62 = *(_QWORD *)(i + 64);
          if (v62)
            LODWORD(v62) = *(_QWORD *)(i + 72) != 0;
        }
      }
      v751 = v62 ^ 1;
    }
    if (v57 == v58)
    {
      v63 = 0;
      goto LABEL_249;
    }
    if (v61)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 749, (uint64_t)"!add_as_weak_keyframe", 21, (uint64_t)"No weak keyframes are allowed to create new submap", 50, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v756 = 1;
    }
    else
    {
      v756 = 0;
    }
LABEL_102:
    sub_20F2FC0E0(&v792);
    if (**(int **)(v792 + 56) > 2
      || (v64 = *(unsigned __int8 *)(v792 + 72),
          v65 = sub_20E8C31DC(v792, "OSLogSurrogateAppender", 1, 0),
          v66 = v65,
          !v64)
      && !v65)
    {
LABEL_248:
      sub_20F337D6C(*(_QWORD *)(i + 80));
      v149 = *(_QWORD *)(i + 88);
      v150 = *(_DWORD *)(v149 + 36);
      *(_BYTE *)(v149 + 32) = 1;
      *(_DWORD *)(v149 + 36) = 0;
      v63 = v150 == 1;
      v56 = *(_QWORD *)(i + 80);
      goto LABEL_249;
    }
    sub_20E863438((uint64_t)object);
    v67 = sub_20E86A980((float64x2_t *)object[1].f64, (uint64_t)"create new map session ", 23);
    v68 = *(_QWORD *)(v5 + 1096);
    v69 = *(_QWORD *)(v68 + 56);
    LODWORD(v68) = *(_DWORD *)(v68 + 48);
    v799[0] = v69;
    LODWORD(v799[1]) = v68;
    sub_210216370((uint64_t)v799);
    if (oslog[23] >= 0)
      v70 = oslog;
    else
      v70 = *(_BYTE **)oslog;
    if (oslog[23] >= 0)
      v71 = oslog[23];
    else
      v71 = *(_QWORD *)&oslog[8];
    v72 = sub_20E86A980(v67, (uint64_t)v70, v71);
    sub_20E86A980(v72, (uint64_t)" ", 1);
    std::ostream::operator<<();
    if ((oslog[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)oslog);
      v73 = (char)v817[1];
      v747 = v3;
      if (((uint64_t)v817[1] & 0x10) == 0)
      {
LABEL_113:
        if ((v73 & 8) == 0)
        {
          v74 = 0;
          HIBYTE(v788) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_126;
        }
        v77 = object[2].f64[1];
        v74 = *(_QWORD *)&v813.f64[1] - *(_QWORD *)&object[2].f64[1];
        if (*(_QWORD *)&v813.f64[1] - *(_QWORD *)&object[2].f64[1] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_170:
          sub_20E860B7C();
LABEL_119:
        if (v74 >= 0x17)
        {
          v78 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v74 | 7) != 0x17)
            v78 = v74 | 7;
          v79 = v78 + 1;
          p_dst = (void **)operator new(v78 + 1);
          v788 = v79 | 0x8000000000000000;
          __dst = p_dst;
          v787 = (_BYTE *)v74;
          v5 = v758;
        }
        else
        {
          HIBYTE(v788) = v74;
          p_dst = (void **)&__dst;
          if (!v74)
          {
LABEL_126:
            __src = v64;
            *((_BYTE *)p_dst + v74) = 0;
            v799[0] = (__uint64_t)&v792;
            v799[1] = std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)v800 = std::chrono::system_clock::now();
            *(_DWORD *)&v800[8] = 2;
            *(_QWORD *)&v800[16] = "unknown file";
            *(_DWORD *)&v800[24] = 752;
            *(_QWORD *)v802 = 0;
            *(_QWORD *)&v801.f64[0] = "unknown function";
            v801.f64[1] = 0.0;
            v80 = (void **)&__dst;
            if (v788 < 0)
              v80 = __dst;
            __s = (const char *)v80;
            v81 = *(_QWORD *)v799[0];
            if (*(char *)(*(_QWORD *)v799[0] + 39) < 0)
            {
              v83 = *(const char **)(v81 + 16);
              v82 = *(_QWORD *)(v81 + 24);
              v728 = *(_QWORD *)v799[0] + 16;
              v85 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v85 & 1) != 0)
                goto LABEL_132;
            }
            else
            {
              v82 = *(unsigned __int8 *)(*(_QWORD *)v799[0] + 39);
              v83 = (const char *)(*(_QWORD *)v799[0] + 16);
              v728 = (uint64_t)v83;
              v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v84 & 1) != 0)
                goto LABEL_132;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)oslog);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
              if ((_BYTE)v872 && (oslog[23] & 0x80000000) != 0)
                operator delete(*(void **)oslog);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
              v5 = v758;
            }
LABEL_132:
            if (byte_254A4A4F8[23] >= 0)
              v86 = byte_254A4A4F8;
            else
              v86 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v87 = byte_254A4A4F8[23];
            else
              v87 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)oslog = os_log_create(v86, v83);
            v88 = &oslog[8];
            if (v87 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v87 >= 0x17)
            {
              v89 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v87 | 7) != 0x17)
                v89 = v87 | 7;
              v90 = v89 + 1;
              v88 = operator new(v89 + 1);
              *(_QWORD *)&v872 = v90 | 0x8000000000000000;
              *(_QWORD *)&oslog[8] = v88;
              *(_QWORD *)&oslog[16] = v87;
              v5 = v758;
            }
            else
            {
              BYTE7(v872) = v87;
              if (!v87)
              {
LABEL_146:
                v88[v87] = 0;
                BYTE8(v872) = 1;
                v91 = &v873;
                if (v82 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v82 >= 0x17)
                {
                  v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v82 | 7) != 0x17)
                    v92 = v82 | 7;
                  v93 = v92 + 1;
                  v91 = operator new(v92 + 1);
                  v875 = v93 | 0x8000000000000000;
                  v873 = v91;
                  v874 = (const char *)v82;
                }
                else
                {
                  HIBYTE(v875) = v82;
                  if (!v82)
                  {
LABEL_154:
                    *((_BYTE *)v91 + v82) = 0;
                    LOBYTE(v876) = 1;
                    v94 = *(NSObject **)oslog;
                    if (SHIBYTE(v875) < 0)
                      operator delete(v873);
                    if (BYTE8(v872) && SBYTE7(v872) < 0)
                      operator delete(*(void **)&oslog[8]);
                    if (*(_QWORD *)oslog)
                      os_release(*(void **)oslog);
                    if (!v66 || !*(_QWORD *)(v66 + 24))
                    {
                      os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)oslog = 136315138;
                      *(_QWORD *)&oslog[4] = __s;
                      v101 = (void *)_os_log_send_and_compose_impl();
                      if (v101)
                        free(v101);
                      goto LABEL_234;
                    }
                    v95 = _os_log_pack_size();
                    v96 = (std::__shared_weak_count_vtbl *)operator new(v95, (std::align_val_t)8uLL);
                    v97 = (std::__shared_weak_count *)operator new();
                    v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v97->__shared_owners_ = 0;
                    v97->__shared_weak_owners_ = 0;
                    v97[1].__vftable = v96;
                    *(_QWORD *)&v773 = v96;
                    *((_QWORD *)&v773 + 1) = v96;
                    v774 = v97;
                    v775 = 0uLL;
                    v98 = strlen(__s);
                    if (v98 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v99 = v98;
                    if (v98 >= 0x17)
                    {
                      v102 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v98 | 7) != 0x17)
                        v102 = v98 | 7;
                      v103 = v102 + 1;
                      v100 = operator new(v102 + 1);
                      *((_QWORD *)&v780 + 1) = v103 | 0x8000000000000000;
                      v779 = v100;
                      *(_QWORD *)&v780 = v99;
                      v5 = v758;
                    }
                    else
                    {
                      HIBYTE(v780) = v98;
                      v100 = &v779;
                      if (!v98)
                      {
LABEL_175:
                        *((_BYTE *)v100 + v99) = 0;
                        v104 = v779;
                        *(_QWORD *)&v811 = v780;
                        *(_QWORD *)((char *)&v811 + 7) = *(_QWORD *)((char *)&v780 + 7);
                        v105 = HIBYTE(v780);
                        v106 = operator new(0x38uLL);
                        v106[1] = 0;
                        v106[2] = 0;
                        v106[3] = off_24C9ABC20;
                        *v106 = &off_24C9ABBD0;
                        v107 = v811;
                        v106[4] = v104;
                        v106[5] = v107;
                        *(_QWORD *)((char *)v106 + 47) = *(_QWORD *)((char *)&v811 + 7);
                        *((_BYTE *)v106 + 55) = v105;
                        *(_QWORD *)&v811 = 0;
                        *(_QWORD *)((char *)&v811 + 7) = 0;
                        v108 = (std::__shared_weak_count *)*((_QWORD *)&v775 + 1);
                        *(_QWORD *)&v775 = v106 + 3;
                        *((_QWORD *)&v775 + 1) = v106;
                        if (v108)
                        {
                          v109 = (unint64_t *)&v108->__shared_owners_;
                          do
                            v110 = __ldaxr(v109);
                          while (__stlxr(v110 - 1, v109));
                          if (!v110)
                          {
                            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                            std::__shared_weak_count::__release_weak(v108);
                          }
                        }
                        *(_OWORD *)oslog = v773;
                        *(_QWORD *)&oslog[16] = v774;
                        if (v774)
                        {
                          v111 = &v774->__shared_owners_;
                          do
                            v112 = __ldxr((unint64_t *)v111);
                          while (__stxr(v112 + 1, (unint64_t *)v111));
                        }
                        v872 = v775;
                        if (*((_QWORD *)&v775 + 1))
                        {
                          v113 = (unint64_t *)(*((_QWORD *)&v775 + 1) + 8);
                          do
                            v114 = __ldxr(v113);
                          while (__stxr(v114 + 1, v113));
                          v873 = (void *)v775;
                          do
                            v115 = __ldaxr(v113);
                          while (__stlxr(v115 - 1, v113));
                          if (!v115)
                          {
                            (*(void (**)(_QWORD))(**((_QWORD **)&v775 + 1) + 16))(*((_QWORD *)&v775 + 1));
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v775 + 1));
                          }
                        }
                        else
                        {
                          v873 = (void *)v775;
                        }
                        if (v774)
                        {
                          v116 = &v774->__shared_owners_;
                          do
                            v117 = __ldaxr((unint64_t *)v116);
                          while (__stlxr(v117 - 1, (unint64_t *)v116));
                          if (!v117)
                          {
                            ((void (*)(std::__shared_weak_count *))v774->__on_zero_shared)(v774);
                            std::__shared_weak_count::__release_weak(v774);
                          }
                        }
                        v118 = *(_QWORD *)oslog;
                        if (*((char *)v873 + 31) >= 0)
                          v119 = (char *)v873 + 8;
                        else
                          v119 = (char *)*((_QWORD *)v873 + 1);
                        v120 = _os_log_pack_fill();
                        *(_DWORD *)v120 = 136315138;
                        *(_QWORD *)(v120 + 4) = v119;
                        v121 = operator new();
                        v122 = *(unsigned __int8 *)(v81 + 39);
                        v123 = v728;
                        if ((v122 & 0x80u) != 0)
                        {
                          v123 = *(_QWORD *)(v81 + 16);
                          v122 = *(_QWORD *)(v81 + 24);
                        }
                        *(_QWORD *)v121 = v118;
                        *(_OWORD *)(v121 + 8) = *(_OWORD *)&oslog[8];
                        *(_QWORD *)&oslog[8] = 0;
                        *(_QWORD *)&oslog[16] = 0;
                        *(_OWORD *)(v121 + 24) = v872;
                        v872 = 0uLL;
                        *(_QWORD *)(v121 + 40) = v123;
                        *(_QWORD *)(v121 + 48) = v122;
                        *(_BYTE *)(v121 + 56) = 2;
                        v779 = 0;
                        *(_QWORD *)&v773 = v121;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v66 + 24) + 40))(*(_QWORD *)(v66 + 24), &v773);
                        v124 = v773;
                        *(_QWORD *)&v773 = 0;
                        if (v124)
                        {
                          v125 = *(std::__shared_weak_count **)(v124 + 32);
                          if (v125)
                          {
                            v126 = (unint64_t *)&v125->__shared_owners_;
                            do
                              v127 = __ldaxr(v126);
                            while (__stlxr(v127 - 1, v126));
                            if (!v127)
                            {
                              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                              std::__shared_weak_count::__release_weak(v125);
                            }
                          }
                          v128 = *(std::__shared_weak_count **)(v124 + 16);
                          if (v128)
                          {
                            v129 = (unint64_t *)&v128->__shared_owners_;
                            do
                              v130 = __ldaxr(v129);
                            while (__stlxr(v130 - 1, v129));
                            if (!v130)
                            {
                              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                              std::__shared_weak_count::__release_weak(v128);
                            }
                          }
                          MEMORY[0x212BC6398](v124, 0x10F0C40B62ED6C6);
                          v131 = v779;
                          v779 = 0;
                          if (v131)
                          {
                            v132 = (std::__shared_weak_count *)*((_QWORD *)v131 + 4);
                            if (v132)
                            {
                              v133 = (unint64_t *)&v132->__shared_owners_;
                              do
                                v134 = __ldaxr(v133);
                              while (__stlxr(v134 - 1, v133));
                              if (!v134)
                              {
                                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                                std::__shared_weak_count::__release_weak(v132);
                              }
                            }
                            v135 = (std::__shared_weak_count *)*((_QWORD *)v131 + 2);
                            if (v135)
                            {
                              v136 = (unint64_t *)&v135->__shared_owners_;
                              do
                                v137 = __ldaxr(v136);
                              while (__stlxr(v137 - 1, v136));
                              if (!v137)
                              {
                                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                                std::__shared_weak_count::__release_weak(v135);
                              }
                            }
                            MEMORY[0x212BC6398](v131, 0x10F0C40B62ED6C6);
                          }
                        }
                        v138 = (std::__shared_weak_count *)*((_QWORD *)&v872 + 1);
                        if (*((_QWORD *)&v872 + 1))
                        {
                          v139 = (unint64_t *)(*((_QWORD *)&v872 + 1) + 8);
                          do
                            v140 = __ldaxr(v139);
                          while (__stlxr(v140 - 1, v139));
                          if (!v140)
                          {
                            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                            std::__shared_weak_count::__release_weak(v138);
                          }
                        }
                        v141 = *(std::__shared_weak_count **)&oslog[16];
                        if (*(_QWORD *)&oslog[16])
                        {
                          v142 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                          do
                            v143 = __ldaxr(v142);
                          while (__stlxr(v143 - 1, v142));
                          if (!v143)
                          {
                            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                            std::__shared_weak_count::__release_weak(v141);
                          }
                        }
LABEL_234:
                        if (__src)
                        {
                          v144 = (const char *)&__dst;
                          if (v788 < 0)
                            v144 = (const char *)__dst;
                          sub_20E8C003C((uint64_t)v799, "%s", v144);
                          sub_20E863570((uint64_t)v799);
                        }
                        sub_20E863570((uint64_t)v799);
                        v145 = *(std::__shared_weak_count **)v802;
                        if (*(_QWORD *)v802)
                        {
                          v146 = (unint64_t *)(*(_QWORD *)v802 + 8);
                          do
                            v147 = __ldaxr(v146);
                          while (__stlxr(v147 - 1, v146));
                          if (!v147)
                          {
                            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                            std::__shared_weak_count::__release_weak(v145);
                          }
                        }
                        if (SHIBYTE(v788) < 0)
                          operator delete(__dst);
                        object[0].f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
                        v148 = *(double *)(MEMORY[0x24BEDB7F0] + 72);
                        *(float64_t *)((char *)object[0].f64 + *(_QWORD *)(*(_QWORD *)&object[0].f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
                        object[1].f64[0] = v148;
                        *(_QWORD *)&object[1].f64[1] = MEMORY[0x24BEDB848] + 16;
                        if (SHIBYTE(v816[1]) < 0)
                          operator delete(*(void **)&v815.f64[1]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v818);
                        v3 = v747;
                        goto LABEL_248;
                      }
                    }
                    memcpy(v100, __s, v99);
                    goto LABEL_175;
                  }
                }
                memmove(v91, v83, v82);
                goto LABEL_154;
              }
            }
            memmove(v88, v86, v87);
            goto LABEL_146;
          }
        }
        memmove(p_dst, *(const void **)&v77, v74);
        goto LABEL_126;
      }
    }
    else
    {
      v73 = (char)v817[1];
      v747 = v3;
      if (((uint64_t)v817[1] & 0x10) == 0)
        goto LABEL_113;
    }
    v76 = v817[0];
    if (v817[0] < v814[1])
    {
      v817[0] = v814[1];
      v76 = v814[1];
    }
    v77 = *(double *)v814;
    v74 = v76 - (char *)v814[0];
    if ((unint64_t)(v76 - (char *)v814[0]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_170;
    goto LABEL_119;
  }
  v756 = 0;
  v751 = 0;
  v63 = 0;
  if (v57 != v58)
    goto LABEL_102;
LABEL_249:
  LOBYTE(__dst) = 0;
  v791 = 0;
  LOBYTE(v779) = 0;
  v785 = 0;
  sub_20F31D778(v56, v5, v756, v751, v63, v3[1], (uint64_t)&__dst, (uint64_t)&v779, (uint64_t)&v773);
  v151 = *(_QWORD *)(v5 + 1096);
  v152 = *(_QWORD *)(i + 1320);
  v153 = *(_QWORD *)(i + 1296);
  v154 = (*(_QWORD *)(i + 1304) - v153) >> 4;
  if (!v152)
    v152 = (*(_QWORD *)(i + 1304) - v153) >> 4;
  v155 = v152 - 1;
  *(_QWORD *)(i + 1320) = v155;
  v156 = v153 + 16 * v155;
  v157 = *(_QWORD *)(v151 + 56);
  v158 = *(_DWORD *)(v151 + 48);
  *(_QWORD *)v156 = v157;
  *(_DWORD *)(v156 + 8) = v158;
  v159 = *(_QWORD *)(i + 1336);
  if (v159 != v154)
  {
    *(_QWORD *)(i + 1336) = v159 + 1;
    v748 = v63;
    if (!v778)
      goto LABEL_382;
LABEL_257:
    if (!*(_BYTE *)(i + 2696))
    {
      sub_20EE63B44((_QWORD *)(i + 2600), (uint64_t)&v773);
      LOBYTE(v771[0]) = 0;
      v772 = 0;
      if (!*(_BYTE *)(i + 2696))
        goto LABEL_382;
      sub_20EE64874(v771, i + 2600);
      goto LABEL_381;
    }
    __srca = (__int128 *)*((_QWORD *)&v773 + 1);
    v160 = (__int128 *)v773;
    v161 = (uint64_t)(*((_QWORD *)&v773 + 1) - v773) >> 6;
    __sa = (void **)(i + 2600);
    if (v161 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v775 + 1) - v775) >> 3))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/VIOMLFeatureEvent.h", 49, (uint64_t)"rhs.frames_info.size() == rhs.frames_features.size()", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_786;
      }
      __srca = (__int128 *)*((_QWORD *)&v773 + 1);
      v160 = (__int128 *)v773;
      v161 = (uint64_t)(*((_QWORD *)&v773 + 1) - v773) >> 6;
    }
    if (v161 >= 1)
    {
      v162 = *(_QWORD *)(i + 2608);
      v163 = i;
      v164 = *(_QWORD *)(i + 2600);
      v165 = v162 - v164;
      v166 = (char *)(v164 + ((v162 - v164) & 0xFFFFFFFFFFFFFFC0));
      *(_QWORD *)&v167 = v163 + 2616;
      v168 = *(_QWORD *)(v163 + 2616);
      if (v161 <= (uint64_t)(v168 - v162) >> 6)
      {
        v174 = (uint64_t)(v162 - (_QWORD)v166) >> 6;
        if (v174 >= v161)
        {
          v175 = &v160[4 * v161];
          v186 = v162;
          i = v757;
        }
        else
        {
          *(_QWORD *)oslog = v162;
          v799[0] = v162;
          v175 = &v160[4 * v174];
          object[0].f64[0] = v167;
          *(_QWORD *)&object[0].f64[1] = v799;
          *(_QWORD *)&object[1].f64[0] = oslog;
          LOBYTE(object[1].f64[1]) = 0;
          if (v175 == __srca)
          {
            v186 = v162;
            i = v757;
            *(_QWORD *)(v757 + 2608) = v162;
            if ((uint64_t)(v162 - (_QWORD)v166) < 1)
              goto LABEL_314;
          }
          else
          {
            v729 = v161;
            v176 = 0;
            do
            {
              v178 = &v175[v176];
              v179 = v162 + v176 * 16;
              v180 = v175[v176];
              v181 = v175[v176 + 1];
              *(_QWORD *)(v179 + 29) = *(_QWORD *)((char *)&v175[v176 + 1] + 13);
              *(_OWORD *)v179 = v180;
              *(_OWORD *)(v179 + 16) = v181;
              *(_QWORD *)(v179 + 48) = 0;
              *(_QWORD *)(v179 + 56) = 0;
              *(_QWORD *)(v179 + 40) = 0;
              v183 = (_BYTE *)*((_QWORD *)&v175[v176 + 2] + 1);
              v182 = *(_BYTE **)&v175[v176 + 3];
              v184 = v182 - v183;
              if (v182 != v183)
              {
                if (v184 < 0)
                  sub_20E867F44();
                v185 = (char *)operator new(v182 - v183);
                *(_QWORD *)(v179 + 40) = v185;
                *(_QWORD *)(v179 + 48) = v185;
                v177 = &v185[4 * (v184 >> 2)];
                *(_QWORD *)(v179 + 56) = v177;
                memcpy(v185, v183, v184);
                *(_QWORD *)(v179 + 48) = v177;
              }
              *(_QWORD *)oslog = v179 + 64;
              v176 += 4;
            }
            while (v178 + 4 != __srca);
            v186 = v162 + v176 * 16;
            v161 = v729;
            i = v757;
            *(_QWORD *)(v757 + 2608) = v186;
            if ((uint64_t)(v162 - (_QWORD)v166) < 1)
              goto LABEL_314;
          }
        }
        v209 = &v166[64 * v161];
        v210 = v186 - (v161 << 6);
        v211 = v186;
        if (v210 < v162)
        {
          v211 = v186;
          do
          {
            v212 = *(_OWORD *)v210;
            v213 = *(_OWORD *)(v210 + 16);
            *(_QWORD *)(v211 + 29) = *(_QWORD *)(v210 + 29);
            *(_OWORD *)v211 = v212;
            *(_OWORD *)(v211 + 16) = v213;
            *(_QWORD *)(v211 + 48) = 0;
            *(_QWORD *)(v211 + 56) = 0;
            *(_QWORD *)(v211 + 40) = 0;
            *(_OWORD *)(v211 + 40) = *(_OWORD *)(v210 + 40);
            *(_QWORD *)(v211 + 56) = *(_QWORD *)(v210 + 56);
            *(_QWORD *)(v210 + 40) = 0;
            *(_QWORD *)(v210 + 48) = 0;
            *(_QWORD *)(v210 + 56) = 0;
            v211 += 64;
            v210 += 64;
          }
          while (v210 < v162);
        }
        *(_QWORD *)(i + 2608) = v211;
        if ((char *)v186 != v209)
        {
          v214 = (uint64_t)(v186 - (_QWORD)v209) >> 6 << 6;
          v215 = v186 - 24;
          do
          {
            v216 = &v166[v214];
            v217 = *(_OWORD *)&v166[v214 - 64];
            v218 = *(_OWORD *)&v166[v214 - 48];
            *(_QWORD *)(v215 - 11) = *(_QWORD *)&v166[v214 - 35];
            *(_OWORD *)(v215 - 24) = v218;
            *(_OWORD *)(v215 - 40) = v217;
            v219 = *(void **)v215;
            if (*(_QWORD *)v215)
            {
              *(_QWORD *)(v215 + 8) = v219;
              operator delete(v219);
              *(_QWORD *)v215 = 0;
              *(_QWORD *)(v215 + 8) = 0;
              *(_QWORD *)(v215 + 16) = 0;
            }
            *(_OWORD *)v215 = *(_OWORD *)(v216 - 24);
            *(_QWORD *)(v215 + 16) = *((_QWORD *)v216 - 1);
            *((_QWORD *)v216 - 3) = 0;
            *((_QWORD *)v216 - 2) = 0;
            *((_QWORD *)v216 - 1) = 0;
            v215 -= 64;
            v214 -= 64;
          }
          while (v214);
        }
        for (i = v757; v160 != v175; v166 += 64)
        {
          v234 = *v160;
          v235 = v160[1];
          *(_QWORD *)(v166 + 29) = *(_QWORD *)((char *)v160 + 29);
          *(_OWORD *)v166 = v234;
          *((_OWORD *)v166 + 1) = v235;
          if (v160 != (__int128 *)v166)
            sub_20E867E00((_QWORD *)v166 + 5, *((char **)v160 + 5), *((char **)v160 + 6), (uint64_t)(*((_QWORD *)v160 + 6) - *((_QWORD *)v160 + 5)) >> 2);
          v160 += 4;
        }
        goto LABEL_314;
      }
      v169 = v165 >> 6;
      v170 = (v165 >> 6) + v161;
      if (v170 >> 58)
        sub_20E867F44();
      v171 = v168 - v164;
      if (v171 >> 5 > v170)
        v170 = v171 >> 5;
      if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFC0)
        v172 = 0x3FFFFFFFFFFFFFFLL;
      else
        v172 = v170;
      object[2].f64[0] = v167;
      if (v172)
      {
        if (v172 >> 58)
          goto LABEL_787;
        v173 = (char *)operator new(v172 << 6);
      }
      else
      {
        v173 = 0;
      }
      v730 = v169;
      *(_QWORD *)&object[0].f64[0] = v173;
      *(_QWORD *)&object[0].f64[1] = &v173[64 * v169];
      object[1].f64[0] = object[0].f64[1];
      *(_QWORD *)&object[1].f64[1] = &v173[64 * v172];
      v187 = v161 << 6;
      *(_QWORD *)&v188 = *(_QWORD *)&object[0].f64[1] + (v161 << 6);
      __srcb = object[0].f64[1];
      v189 = (_QWORD *)(*(_QWORD *)&object[0].f64[1] + 40);
      do
      {
        v191 = *v160;
        v192 = v160[1];
        *(_QWORD *)((char *)v189 - 11) = *(_QWORD *)((char *)v160 + 29);
        *(_OWORD *)(v189 - 3) = v192;
        *(_OWORD *)(v189 - 5) = v191;
        v189[1] = 0;
        v189[2] = 0;
        *v189 = 0;
        v194 = (_BYTE *)*((_QWORD *)v160 + 5);
        v193 = (_BYTE *)*((_QWORD *)v160 + 6);
        v195 = v193 - v194;
        if (v193 != v194)
        {
          if (v195 < 0)
            sub_20E867F44();
          v196 = (char *)operator new(v193 - v194);
          *v189 = v196;
          v189[1] = v196;
          v190 = &v196[4 * (v195 >> 2)];
          v189[2] = v190;
          memcpy(v196, v194, v195);
          v189[1] = v190;
        }
        v189 += 8;
        v160 += 4;
        v187 -= 64;
      }
      while (v187);
      object[1].f64[0] = v188;
      v197 = (char *)*__sa;
      v198 = __srcb;
      if (*__sa != v166)
      {
        v199 = v730 << 6;
        do
        {
          v200 = &v173[v199];
          v201 = v164 + v199;
          v202 = *(_OWORD *)(v164 + v199 - 64);
          v203 = *(_OWORD *)(v164 + v199 - 48);
          *(_QWORD *)(v200 - 35) = *(_QWORD *)(v164 + v199 - 35);
          *((_OWORD *)v200 - 4) = v202;
          *((_OWORD *)v200 - 3) = v203;
          *(_OWORD *)(v200 - 24) = *(_OWORD *)(v164 + v199 - 24);
          *((_QWORD *)v200 - 1) = *(_QWORD *)(v164 + v199 - 8);
          *(_QWORD *)(v201 - 24) = 0;
          *(_QWORD *)(v201 - 16) = 0;
          *(_QWORD *)(v201 - 8) = 0;
          v164 -= 64;
          v173 -= 64;
        }
        while ((char *)(v164 + v199) != v197);
        v188 = object[1].f64[0];
        *(_QWORD *)&v198 = &v173[64 * v730];
      }
      i = v757;
      v204 = *(char **)(v757 + 2608);
      if (v204 != v166)
      {
        do
        {
          v205 = *(_OWORD *)v166;
          v206 = *((_OWORD *)v166 + 1);
          *(_QWORD *)(*(_QWORD *)&v188 + 29) = *(_QWORD *)(v166 + 29);
          **(_OWORD **)&v188 = v205;
          *(_OWORD *)(*(_QWORD *)&v188 + 16) = v206;
          *(_QWORD *)(*(_QWORD *)&v188 + 48) = 0;
          *(_QWORD *)(*(_QWORD *)&v188 + 56) = 0;
          *(_QWORD *)(*(_QWORD *)&v188 + 40) = 0;
          *(_OWORD *)(*(_QWORD *)&v188 + 40) = *(_OWORD *)(v166 + 40);
          *(_QWORD *)(*(_QWORD *)&v188 + 56) = *((_QWORD *)v166 + 7);
          *((_QWORD *)v166 + 5) = 0;
          *((_QWORD *)v166 + 6) = 0;
          *((_QWORD *)v166 + 7) = 0;
          *(_QWORD *)&v188 += 64;
          v166 += 64;
        }
        while (v166 != v204);
        v166 = *(char **)(v757 + 2608);
      }
      v207 = *(char **)(v757 + 2600);
      *(float64_t *)(v757 + 2600) = v198;
      *(float64_t *)(v757 + 2608) = v188;
      *(float64_t *)(v757 + 2616) = object[1].f64[1];
      while (v166 != v207)
      {
        v208 = (void *)*((_QWORD *)v166 - 3);
        if (v208)
        {
          *((_QWORD *)v166 - 2) = v208;
          operator delete(v208);
        }
        v166 -= 64;
      }
      if (v207)
        operator delete(v207);
    }
LABEL_314:
    sub_20F31175C((void **)(i + 2624), *(_QWORD *)(i + 2632), (char **)v775, *((uint64_t *)&v775 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v775 + 1) - v775) >> 3));
    v220 = v776;
    v221 = v777;
    v222 = v777 - v776;
    if (v777 - v776 >= 1)
    {
      v223 = *(_QWORD *)(v757 + 2656);
      v224 = 0x8F5C28F5C28F5C29 * (v222 >> 4);
      v225 = *(_QWORD *)(v757 + 2648);
      v226 = (uint64_t)(v223 - v225) / 400;
      v227 = (_OWORD *)(v225 + 400 * v226);
      v228 = *(_QWORD *)(v757 + 2664);
      if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)(v228 - v223) >> 4)) < v224)
      {
        v229 = (_QWORD *)(v757 + 2648);
        v230 = v226 - 0x70A3D70A3D70A3D7 * (v222 >> 4);
        if (v230 > 0xA3D70A3D70A3D7)
          sub_20E867F44();
        v231 = 0x8F5C28F5C28F5C29 * ((v228 - v225) >> 4);
        if (2 * v231 > v230)
          v230 = 2 * v231;
        if (v231 >= 0x51EB851EB851EBLL)
          v232 = 0xA3D70A3D70A3D7;
        else
          v232 = v230;
        if (v232)
        {
          if (v232 > 0xA3D70A3D70A3D7)
            goto LABEL_787;
          v233 = (char *)operator new(400 * v232);
        }
        else
        {
          v233 = 0;
        }
        v248 = &v233[400 * v226];
        v249 = &v248[400 * v224];
        v250 = v248;
        do
        {
          *(_OWORD *)v250 = *(_OWORD *)v220;
          v251 = *(_OWORD *)(v220 + 16);
          v252 = *(_OWORD *)(v220 + 32);
          v253 = *(_OWORD *)(v220 + 48);
          *(_OWORD *)(v250 + 57) = *(_OWORD *)(v220 + 57);
          *((_OWORD *)v250 + 2) = v252;
          *((_OWORD *)v250 + 3) = v253;
          *((_OWORD *)v250 + 1) = v251;
          *((_QWORD *)v250 + 10) = *(_QWORD *)(v220 + 80);
          v254 = *(_QWORD *)(v220 + 88);
          *((_QWORD *)v250 + 11) = v254;
          if (v254)
          {
            v255 = (unint64_t *)(v254 + 8);
            do
              v256 = __ldxr(v255);
            while (__stxr(v256 + 1, v255));
          }
          *((_QWORD *)v250 + 12) = *(_QWORD *)(v220 + 96);
          v257 = *(_QWORD *)(v220 + 104);
          *((_QWORD *)v250 + 13) = v257;
          if (v257)
          {
            v258 = (unint64_t *)(v257 + 8);
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
          }
          memcpy(v250 + 112, (const void *)(v220 + 112), 0x120uLL);
          v250 += 400;
          v220 += 400;
        }
        while (v250 != v249);
        v260 = 400 * v232;
        v261 = (_OWORD *)*v229;
        if ((_OWORD *)*v229 != v227)
        {
          v262 = 400 * v226;
          v263 = v233;
          do
          {
            v264 = &v263[v262 - 400];
            *(_OWORD *)v264 = *(_OWORD *)(v225 + v262 - 400);
            v265 = *(_OWORD *)(v225 + v262 - 384);
            v266 = *(_OWORD *)(v225 + v262 - 368);
            v267 = *(_OWORD *)(v225 + v262 - 352);
            *(_OWORD *)(v264 + 57) = *(_OWORD *)(v225 + v262 - 343);
            *((_OWORD *)v264 + 2) = v266;
            *((_OWORD *)v264 + 3) = v267;
            *((_OWORD *)v264 + 1) = v265;
            v268 = (_OWORD *)(v225 + v262 - 320);
            *(_OWORD *)&v263[v262 - 320] = *v268;
            *(_QWORD *)(v225 + v262 - 312) = 0;
            *(_QWORD *)v268 = 0;
            v269 = (_OWORD *)(v225 + v262 - 304);
            *(_OWORD *)&v263[v262 - 304] = *v269;
            *(_QWORD *)(v225 + v262 - 296) = 0;
            *(_QWORD *)v269 = 0;
            memcpy(&v263[v262 - 288], (const void *)(v225 + v262 - 288), 0x120uLL);
            v225 -= 400;
            v263 -= 400;
          }
          while ((_OWORD *)(v225 + v262) != v261);
          v248 = &v263[400 * v226];
        }
        v270 = &v233[v260];
        v271 = *(_OWORD **)(v757 + 2656);
        if (v271 == v227)
        {
          v275 = *(_OWORD **)(v757 + 2648);
          *(_QWORD *)(v757 + 2648) = v248;
          *(_QWORD *)(v757 + 2656) = v249;
          *(_QWORD *)(v757 + 2664) = v270;
          if (v227 != v275)
            goto LABEL_362;
          goto LABEL_359;
        }
        do
        {
          *(_OWORD *)v249 = *v227;
          v272 = v227[1];
          v273 = v227[2];
          v274 = v227[3];
          *(_OWORD *)(v249 + 57) = *(_OWORD *)((char *)v227 + 57);
          *((_OWORD *)v249 + 2) = v273;
          *((_OWORD *)v249 + 3) = v274;
          *((_OWORD *)v249 + 1) = v272;
          *((_OWORD *)v249 + 5) = v227[5];
          *((_QWORD *)v227 + 10) = 0;
          *((_QWORD *)v227 + 11) = 0;
          *((_OWORD *)v249 + 6) = v227[6];
          *((_QWORD *)v227 + 12) = 0;
          *((_QWORD *)v227 + 13) = 0;
          memcpy(v249 + 112, v227 + 7, 0x120uLL);
          v249 += 400;
          v227 += 25;
        }
        while (v227 != v271);
        v227 = *(_OWORD **)(v757 + 2656);
        v275 = *(_OWORD **)(v757 + 2648);
        *(_QWORD *)(v757 + 2648) = v248;
        *(_QWORD *)(v757 + 2656) = v249;
        *(_QWORD *)(v757 + 2664) = v270;
        if (v227 == v275)
        {
LABEL_359:
          if (v275)
            operator delete(v275);
          goto LABEL_380;
        }
        while (1)
        {
LABEL_362:
          v276 = v227 - 25;
          v277 = (std::__shared_weak_count *)*((_QWORD *)v227 - 37);
          if (!v277)
            goto LABEL_366;
          v278 = (unint64_t *)&v277->__shared_owners_;
          do
            v279 = __ldaxr(v278);
          while (__stlxr(v279 - 1, v278));
          if (!v279)
          {
            ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
            std::__shared_weak_count::__release_weak(v277);
            v280 = (std::__shared_weak_count *)*((_QWORD *)v227 - 39);
            if (v280)
            {
LABEL_367:
              v281 = (unint64_t *)&v280->__shared_owners_;
              do
                v282 = __ldaxr(v281);
              while (__stlxr(v282 - 1, v281));
              if (!v282)
              {
                ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                std::__shared_weak_count::__release_weak(v280);
              }
            }
          }
          else
          {
LABEL_366:
            v280 = (std::__shared_weak_count *)*((_QWORD *)v227 - 39);
            if (v280)
              goto LABEL_367;
          }
          v227 -= 25;
          if (v276 == v275)
            goto LABEL_359;
        }
      }
      if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)(v223 - (_QWORD)v227) >> 4)) >= v224)
      {
        v236 = v776 + 16 * (v222 >> 4);
        v238 = *(_QWORD *)(v757 + 2656);
      }
      else
      {
        v236 = v776 + 16 * ((uint64_t)(v223 - (_QWORD)v227) >> 4);
        if (v236 == v777)
        {
          v238 = *(_QWORD *)(v757 + 2656);
        }
        else
        {
          v237 = v776 + 16 * ((uint64_t)(v223 - (_QWORD)v227) >> 4);
          v238 = *(_QWORD *)(v757 + 2656);
          do
          {
            *(_OWORD *)v238 = *(_OWORD *)v237;
            v239 = *(_OWORD *)(v237 + 16);
            v240 = *(_OWORD *)(v237 + 32);
            v241 = *(_OWORD *)(v237 + 48);
            *(_OWORD *)(v238 + 57) = *(_OWORD *)(v237 + 57);
            *(_OWORD *)(v238 + 32) = v240;
            *(_OWORD *)(v238 + 48) = v241;
            *(_OWORD *)(v238 + 16) = v239;
            *(_QWORD *)(v238 + 80) = *(_QWORD *)(v237 + 80);
            v242 = *(_QWORD *)(v237 + 88);
            *(_QWORD *)(v238 + 88) = v242;
            if (v242)
            {
              v243 = (unint64_t *)(v242 + 8);
              do
                v244 = __ldxr(v243);
              while (__stxr(v244 + 1, v243));
            }
            *(_QWORD *)(v238 + 96) = *(_QWORD *)(v237 + 96);
            v245 = *(_QWORD *)(v237 + 104);
            *(_QWORD *)(v238 + 104) = v245;
            if (v245)
            {
              v246 = (unint64_t *)(v245 + 8);
              do
                v247 = __ldxr(v246);
              while (__stxr(v247 + 1, v246));
            }
            memcpy((void *)(v238 + 112), (const void *)(v237 + 112), 0x120uLL);
            v237 += 400;
            v238 += 400;
          }
          while (v237 != v221);
        }
        *(_QWORD *)(v757 + 2656) = v238;
        if ((uint64_t)(v223 - (_QWORD)v227) < 1)
          goto LABEL_380;
      }
      v283 = &v227[25 * v224];
      v284 = v238 - 400 * v224;
      v285 = (_OWORD *)v238;
      if (v284 < v223)
      {
        v286 = v238 - 400 * v224;
        v285 = (_OWORD *)v238;
        do
        {
          *v285 = *(_OWORD *)v286;
          v287 = *(_OWORD *)(v286 + 16);
          v288 = *(_OWORD *)(v286 + 32);
          v289 = *(_OWORD *)(v286 + 48);
          *(_OWORD *)((char *)v285 + 57) = *(_OWORD *)(v286 + 57);
          v285[2] = v288;
          v285[3] = v289;
          v285[1] = v287;
          v285[5] = *(_OWORD *)(v286 + 80);
          *(_QWORD *)(v286 + 80) = 0;
          *(_QWORD *)(v286 + 88) = 0;
          v285[6] = *(_OWORD *)(v286 + 96);
          *(_QWORD *)(v286 + 96) = 0;
          *(_QWORD *)(v286 + 104) = 0;
          memcpy(v285 + 7, (const void *)(v286 + 112), 0x120uLL);
          v285 += 25;
          v286 += 400;
        }
        while (v286 < v223);
      }
      *(_QWORD *)(v757 + 2656) = v285;
      if ((_OWORD *)v238 != v283)
      {
        do
        {
          v303 = v284 - 400;
          v304 = (_OWORD *)(v238 - 400);
          *v304 = *(_OWORD *)(v284 - 400);
          v305 = *(_OWORD *)(v284 - 384);
          v306 = *(_OWORD *)(v284 - 368);
          v307 = *(_OWORD *)(v284 - 352);
          *(_OWORD *)((char *)v304 + 57) = *(_OWORD *)(v284 - 343);
          v304[2] = v306;
          v304[3] = v307;
          v304[1] = v305;
          v308 = *(_OWORD *)(v284 - 320);
          *(_QWORD *)(v303 + 80) = 0;
          *(_QWORD *)(v303 + 88) = 0;
          v309 = *(std::__shared_weak_count **)(v238 - 312);
          v304[5] = v308;
          if (v309)
          {
            v310 = (unint64_t *)&v309->__shared_owners_;
            do
              v311 = __ldaxr(v310);
            while (__stlxr(v311 - 1, v310));
            if (!v311)
            {
              ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
              std::__shared_weak_count::__release_weak(v309);
            }
          }
          v312 = *(_OWORD *)(v284 - 304);
          *(_QWORD *)(v284 - 304) = 0;
          *(_QWORD *)(v284 - 296) = 0;
          v313 = *(std::__shared_weak_count **)(v238 - 296);
          *(_OWORD *)(v238 - 304) = v312;
          if (v313)
          {
            v314 = (unint64_t *)&v313->__shared_owners_;
            do
              v315 = __ldaxr(v314);
            while (__stlxr(v315 - 1, v314));
            if (!v315)
            {
              ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
              std::__shared_weak_count::__release_weak(v313);
            }
          }
          memcpy((void *)(v238 - 288), (const void *)(v284 - 288), 0x120uLL);
          v238 -= 400;
          v284 -= 400;
        }
        while ((_OWORD *)v303 != v227);
      }
      for (; v220 != v236; v227 += 25)
      {
        *v227 = *(_OWORD *)v220;
        v316 = *(_OWORD *)(v220 + 16);
        v317 = *(_OWORD *)(v220 + 32);
        v318 = *(_OWORD *)(v220 + 48);
        *(_OWORD *)((char *)v227 + 57) = *(_OWORD *)(v220 + 57);
        v227[2] = v317;
        v227[3] = v318;
        v227[1] = v316;
        v320 = *(_QWORD *)(v220 + 80);
        v319 = *(_QWORD *)(v220 + 88);
        if (v319)
        {
          v321 = (unint64_t *)(v319 + 8);
          do
            v322 = __ldxr(v321);
          while (__stxr(v322 + 1, v321));
        }
        v323 = (std::__shared_weak_count *)*((_QWORD *)v227 + 11);
        *((_QWORD *)v227 + 10) = v320;
        *((_QWORD *)v227 + 11) = v319;
        if (v323)
        {
          v324 = (unint64_t *)&v323->__shared_owners_;
          do
            v325 = __ldaxr(v324);
          while (__stlxr(v325 - 1, v324));
          if (!v325)
          {
            ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
            std::__shared_weak_count::__release_weak(v323);
          }
        }
        v327 = *(_QWORD *)(v220 + 96);
        v326 = *(_QWORD *)(v220 + 104);
        if (v326)
        {
          v328 = (unint64_t *)(v326 + 8);
          do
            v329 = __ldxr(v328);
          while (__stxr(v329 + 1, v328));
        }
        v330 = (std::__shared_weak_count *)*((_QWORD *)v227 + 13);
        *((_QWORD *)v227 + 12) = v327;
        *((_QWORD *)v227 + 13) = v326;
        if (v330)
        {
          v331 = (unint64_t *)&v330->__shared_owners_;
          do
            v332 = __ldaxr(v331);
          while (__stlxr(v332 - 1, v331));
          if (!v332)
          {
            ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
            std::__shared_weak_count::__release_weak(v330);
          }
        }
        memcpy(v227 + 7, (const void *)(v220 + 112), 0x120uLL);
        v220 += 400;
      }
    }
LABEL_380:
    sub_20EE64874(v771, (uint64_t)__sa);
    i = v757;
LABEL_381:
    v772 = 1;
    sub_20EE62D7C(v771);
    goto LABEL_382;
  }
  if (*(_QWORD *)(i + 1328))
    v154 = *(_QWORD *)(i + 1328);
  *(_QWORD *)(i + 1328) = v154 - 1;
  v748 = v63;
  if (v778)
    goto LABEL_257;
LABEL_382:
  if (!v791)
    goto LABEL_521;
  if (*(_BYTE *)(i + 2752))
  {
    v290 = v787;
    v291 = __dst;
    v292 = 0x8E38E38E38E38E39 * ((v787 - (_BYTE *)__dst) >> 5);
    if (v292 == 0xAAAAAAAAAAAAAAABLL * ((v790 - (_BYTE *)v789) >> 3))
      goto LABEL_387;
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/VIODepthFeatureEvent.h", 49, (uint64_t)"rhs.frames_info.size() == rhs.frames_features.size()", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v291 = __dst;
      v290 = v787;
      v292 = 0x8E38E38E38E38E39 * ((v787 - (_BYTE *)__dst) >> 5);
      i = v757;
LABEL_387:
      if (v292 < 1)
        goto LABEL_460;
      v293 = *(char **)(i + 2712);
      v294 = *(_QWORD *)(i + 2704);
      v295 = i;
      v296 = (uint64_t)&v293[-v294] / 288;
      v297 = (_BYTE *)(v294 + 288 * v296);
      v298 = *(_QWORD *)(v295 + 2720);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v298 - (uint64_t)v293) >> 5)) < v292)
      {
        v299 = v296 + v292;
        if ((unint64_t)(v296 + v292) > 0xE38E38E38E38E3)
          sub_20E867F44();
        v300 = 0x8E38E38E38E38E39 * ((v298 - v294) >> 5);
        if (2 * v300 > v299)
          v299 = 2 * v300;
        if (v300 >= 0x71C71C71C71C71)
          v301 = 0xE38E38E38E38E3;
        else
          v301 = v299;
        __srcc = (_BYTE *)(v294 + 288 * v296);
        if (v301)
        {
          if (v301 > 0xE38E38E38E38E3)
            goto LABEL_787;
          v302 = (char *)operator new(288 * v301);
        }
        else
        {
          v302 = 0;
        }
        v349 = &v302[288 * v296];
        v350 = 288 * v292;
        __sb = &v349[v350];
        v351 = v349;
        do
        {
          memcpy(v351, v291, 0x120uLL);
          v351 += 288;
          v291 += 36;
          v350 -= 288;
        }
        while (v350);
        v352 = 288 * v301;
        if ((unint64_t)&v293[-v294 + 287] >= 0x23F)
        {
          v353 = 288 * v296;
          v354 = v294 - 288;
          do
          {
            v355 = (const void *)(v354 + v353);
            v353 -= 288;
            memcpy(&v302[v353], v355, 0x120uLL);
          }
          while (v353);
          v293 = *(char **)(v757 + 2712);
          v349 = v302;
        }
        if (v293 != __srcc)
          memmove(__sb, __srcc, v293 - __srcc);
        i = v757;
        v356 = *(void **)(v757 + 2704);
        *(_QWORD *)(v757 + 2704) = v349;
        *(_QWORD *)(v757 + 2712) = &__sb[v293 - __srcc];
        *(_QWORD *)(v757 + 2720) = &v302[v352];
        if (v356)
          operator delete(v356);
LABEL_460:
        __srcd = (uint64_t *)(i + 2728);
        v357 = (char **)v789;
        if (v790 - (_BYTE *)v789 >= 1)
        {
          v358 = *(char **)(i + 2736);
          v359 = (v790 - (_BYTE *)v789) / 24;
          v360 = i;
          v361 = *(_QWORD *)(i + 2728);
          v362 = (uint64_t)&v358[-v361] / 24;
          v363 = (char *)(v361 + 24 * v362);
          v364 = v360 + 2744;
          v365 = *(_QWORD *)(v360 + 2744);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v365 - (uint64_t)v358) >> 3)) < v359)
          {
            v366 = v362 + v359;
            if ((unint64_t)(v362 + v359) > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v367 = 0xAAAAAAAAAAAAAAABLL * ((v365 - v361) >> 3);
            if (2 * v367 > v366)
              v366 = 2 * v367;
            if (v367 >= 0x555555555555555)
              v368 = 0xAAAAAAAAAAAAAAALL;
            else
              v368 = v366;
            *(_QWORD *)&object[2].f64[0] = v364;
            if (!v368)
            {
              v369 = 0;
LABEL_489:
              v731 = (uint64_t)&v358[-v361] / 24;
              v379 = &v369[24 * v362];
              *(_QWORD *)&object[0].f64[0] = v369;
              *(_QWORD *)&object[0].f64[1] = v379;
              *(_QWORD *)&object[1].f64[0] = v379;
              *(_QWORD *)&object[1].f64[1] = &v369[24 * v368];
              v380 = 24 * v359;
              *(_QWORD *)&v381 = &v379[24 * v359];
              __sc = v379;
              do
              {
                *(_QWORD *)v379 = 0;
                *((_QWORD *)v379 + 1) = 0;
                *((_QWORD *)v379 + 2) = 0;
                v383 = *v357;
                v382 = v357[1];
                v384 = v382 - *v357;
                if (v382 != *v357)
                {
                  if (v384 < 0)
                    sub_20E867F44();
                  v385 = (char *)operator new(v382 - *v357);
                  *(_QWORD *)v379 = v385;
                  *((_QWORD *)v379 + 1) = v385;
                  *((_QWORD *)v379 + 2) = &v385[16 * (v384 >> 4)];
                  v386 = v384 & 0xFFFFFFFFFFFFFFF0;
                  memcpy(v385, v383, v386);
                  *((_QWORD *)v379 + 1) = &v385[v386];
                }
                v379 += 24;
                v357 += 3;
                v380 -= 24;
              }
              while (v380);
              object[1].f64[0] = v381;
              v387 = *__srcd;
              v388 = *(double *)&__sc;
              if ((char *)*__srcd != v363)
              {
                v389 = 24 * v731;
                do
                {
                  v390 = &v369[v389];
                  v391 = v361 + v389;
                  *(_OWORD *)(v390 - 24) = *(_OWORD *)(v361 + v389 - 24);
                  *((_QWORD *)v390 - 1) = *(_QWORD *)(v361 + v389 - 8);
                  *(_QWORD *)(v391 - 24) = 0;
                  *(_QWORD *)(v391 - 16) = 0;
                  *(_QWORD *)(v391 - 8) = 0;
                  v369 -= 24;
                  v361 -= 24;
                }
                while (v361 + v389 != v387);
                v381 = object[1].f64[0];
                *(_QWORD *)&v388 = &v369[24 * v731];
              }
              object[0].f64[1] = v388;
              i = v757;
              v392 = *(char **)(v757 + 2736);
              if (v392 != v363)
              {
                do
                {
                  **(_QWORD **)&v381 = 0;
                  *(_QWORD *)(*(_QWORD *)&v381 + 8) = 0;
                  *(_QWORD *)(*(_QWORD *)&v381 + 16) = 0;
                  **(_OWORD **)&v381 = *(_OWORD *)v363;
                  *(_QWORD *)(*(_QWORD *)&v381 + 16) = *((_QWORD *)v363 + 2);
                  *(_QWORD *)v363 = 0;
                  *((_QWORD *)v363 + 1) = 0;
                  *((_QWORD *)v363 + 2) = 0;
                  *(_QWORD *)&v381 += 24;
                  v363 += 24;
                }
                while (v363 != v392);
                v388 = object[0].f64[1];
                v363 = *(char **)(v757 + 2736);
              }
              v393 = *(char **)(v757 + 2728);
              *(float64_t *)(v757 + 2728) = v388;
              *(float64_t *)(v757 + 2736) = v381;
              *(float64_t *)(v757 + 2744) = object[1].f64[1];
              if (v363 != v393)
              {
                v394 = v363;
                do
                {
                  v396 = (void *)*((_QWORD *)v394 - 3);
                  v394 -= 24;
                  v395 = v396;
                  if (v396)
                  {
                    *((_QWORD *)v363 - 2) = v395;
                    operator delete(v395);
                  }
                  v363 = v394;
                }
                while (v394 != v393);
              }
              if (v393)
                operator delete(v393);
              goto LABEL_508;
            }
            if (v368 <= 0xAAAAAAAAAAAAAAALL)
            {
              v369 = (char *)operator new(24 * v368);
              goto LABEL_489;
            }
LABEL_787:
            sub_20E877A38();
          }
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v358 - v363) >> 3)) >= v359)
          {
            v370 = (char **)((char *)v789 + 24 * v359);
            v371 = v358;
            i = v757;
          }
          else
          {
            v370 = (char **)((char *)v789 + 8 * ((v358 - v363) >> 3));
            i = v757;
            v371 = (char *)sub_20EDB5440(v364, (uint64_t)v370, (uint64_t)v790, v358);
            *(_QWORD *)(v757 + 2736) = v371;
            if (v358 - v363 < 1)
              goto LABEL_508;
          }
          v372 = &v363[24 * v359];
          v373 = &v371[-24 * v359];
          v374 = v371;
          if (v373 < v358)
          {
            v374 = v371;
            do
            {
              *(_QWORD *)v374 = 0;
              *((_QWORD *)v374 + 1) = 0;
              *((_QWORD *)v374 + 2) = 0;
              *(_OWORD *)v374 = *(_OWORD *)v373;
              *((_QWORD *)v374 + 2) = *((_QWORD *)v373 + 2);
              *(_QWORD *)v373 = 0;
              *((_QWORD *)v373 + 1) = 0;
              *((_QWORD *)v373 + 2) = 0;
              v374 += 24;
              v373 += 24;
            }
            while (v373 < v358);
          }
          *(_QWORD *)(i + 2736) = v374;
          if (v371 != v372)
          {
            v375 = (void **)(v371 - 24);
            v376 = 8 * ((v371 - v372) >> 3);
            do
            {
              v378 = *v375;
              if (*v375)
              {
                v375[1] = v378;
                operator delete(v378);
                *v375 = 0;
                v375[1] = 0;
                v375[2] = 0;
              }
              v377 = (uint64_t)&v363[v376 - 24];
              *(_OWORD *)v375 = *(_OWORD *)v377;
              v375[2] = *(void **)&v363[v376 - 8];
              *(_QWORD *)v377 = 0;
              *(_QWORD *)(v377 + 8) = 0;
              *(_QWORD *)(v377 + 16) = 0;
              v375 -= 3;
              v376 -= 24;
            }
            while (v376);
          }
          for (i = v757; v357 != v370; v363 += 24)
          {
            if (v357 != (char **)v363)
              sub_20E9BF954(v363, *v357, v357[1], (v357[1] - *v357) >> 4);
            v357 += 3;
          }
        }
LABEL_508:
        v766 = 0;
        v765 = 0;
        v767 = 0;
        v397 = *(_BYTE **)(i + 2704);
        v398 = *(_BYTE **)(i + 2712);
        v399 = v398 - v397;
        if (v398 != v397)
        {
          if (0x8E38E38E38E38E39 * (v399 >> 5) > 0xE38E38E38E38E3)
            sub_20E867F44();
          v765 = operator new(v399);
          v767 = (char *)v765 + 32 * (v399 >> 5);
          memcpy(v765, v397, v399);
          v766 = v767;
        }
        sub_20EE65438(&v768, __srcd);
        v770 = 1;
        v336 = (char *)v768;
        if (!v768)
          goto LABEL_519;
        v400 = v769;
        v338 = v768;
        if (v769 == v768)
          goto LABEL_518;
        v401 = v769;
        do
        {
          v403 = (void *)*((_QWORD *)v401 - 3);
          v401 -= 24;
          v402 = v403;
          if (v403)
          {
            *((_QWORD *)v400 - 2) = v402;
            operator delete(v402);
          }
          v400 = v401;
        }
        while (v401 != v336);
        goto LABEL_517;
      }
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v293 - v297) >> 5)) >= v292)
      {
        v342 = (char *)&v291[36 * v292];
        v344 = v293;
        i = v757;
      }
      else
      {
        v342 = (char *)&v291[4 * ((v293 - v297) >> 5)];
        v343 = v290 - v342;
        if (v290 != v342)
          memmove(v293, &v291[4 * ((v293 - v297) >> 5)], v290 - v342);
        v344 = &v293[v343];
        *(_QWORD *)(v757 + 2712) = &v293[v343];
        i = v757;
        if (v293 - v297 < 1)
          goto LABEL_460;
      }
      v345 = 288 * v292;
      v346 = &v297[288 * v292];
      v347 = &v344[-v345];
      v348 = v344;
      if (&v344[-v345] < v293)
      {
        v348 = v344;
        do
        {
          memcpy(v348, v347, 0x120uLL);
          v347 += 288;
          v348 += 288;
        }
        while (v347 < v293);
      }
      *(_QWORD *)(i + 2712) = v348;
      if (v344 != v346)
        memmove(v346, v297, v344 - v346);
      if (v342 != (char *)v291)
        memmove(v297, v291, v342 - (char *)v291);
      goto LABEL_460;
    }
LABEL_786:
    abort();
  }
  sub_20EE64D58(i + 2704, (uint64_t)&__dst);
  LOBYTE(v765) = 0;
  v770 = 0;
  if (!*(_BYTE *)(i + 2752))
    goto LABEL_521;
  v766 = 0;
  v765 = 0;
  v767 = 0;
  v333 = *(_BYTE **)(i + 2704);
  v334 = *(_BYTE **)(i + 2712);
  v335 = v334 - v333;
  if (v334 != v333)
  {
    if (0x8E38E38E38E38E39 * (v335 >> 5) > 0xE38E38E38E38E3)
      sub_20E867F44();
    v765 = operator new(v335);
    v767 = (char *)v765 + 32 * (v335 >> 5);
    memcpy(v765, v333, v335);
    v766 = v767;
  }
  sub_20EE65438(&v768, (uint64_t *)(i + 2728));
  v770 = 1;
  v336 = (char *)v768;
  if (v768)
  {
    v337 = v769;
    v338 = v768;
    if (v769 == v768)
    {
LABEL_518:
      v769 = v336;
      operator delete(v338);
      goto LABEL_519;
    }
    v339 = v769;
    do
    {
      v341 = (void *)*((_QWORD *)v339 - 3);
      v339 -= 24;
      v340 = v341;
      if (v341)
      {
        *((_QWORD *)v337 - 2) = v340;
        operator delete(v340);
      }
      v337 = v339;
    }
    while (v339 != v336);
LABEL_517:
    v338 = v768;
    goto LABEL_518;
  }
LABEL_519:
  if (v765)
  {
    v766 = v765;
    operator delete(v765);
  }
LABEL_521:
  if (!v785)
    goto LABEL_547;
  if (*(_BYTE *)(i + 2832))
  {
    v404 = sub_20F2FC1D4(i + 2760, (uint64_t)&v779);
    sub_20EE65B84(v759, v404);
    v764 = 1;
    v405 = (char *)v762;
    if (v762)
    {
      v406 = v763;
      v407 = v762;
      if (v763 != v762)
      {
        v408 = v763;
        do
        {
          v410 = (void *)*((_QWORD *)v408 - 3);
          v408 -= 24;
          v409 = v410;
          if (v410)
          {
            *((_QWORD *)v406 - 2) = v409;
            operator delete(v409);
          }
          v406 = v408;
        }
        while (v408 != v405);
        v407 = v762;
      }
      v763 = v405;
      operator delete(v407);
    }
    v417 = (char *)v760;
    i = v757;
    if (v760)
    {
      v418 = v760;
      if (v761 != v760)
      {
        v419 = v761 - 24;
        v420 = (void (***)(char *))(v761 - 24);
        do
        {
          v421 = *v420;
          v420 -= 3;
          (*v421)(v419);
          v12 = v419 == v417;
          v419 = (char *)v420;
        }
        while (!v12);
        v418 = v760;
      }
      v761 = v417;
      operator delete(v418);
    }
    v422 = v759[0];
    if (v759[0])
    {
LABEL_546:
      v759[1] = v422;
      operator delete(v422);
    }
  }
  else
  {
    sub_20EE65544(i + 2760, (uint64_t)&v779);
    LOBYTE(v759[0]) = 0;
    v764 = 0;
    if (*(_BYTE *)(i + 2832))
    {
      sub_20EE65B84(v759, i + 2760);
      v764 = 1;
      v411 = (char *)v762;
      if (v762)
      {
        v412 = v763;
        v413 = v762;
        if (v763 != v762)
        {
          v414 = v763;
          do
          {
            v416 = (void *)*((_QWORD *)v414 - 3);
            v414 -= 24;
            v415 = v416;
            if (v416)
            {
              *((_QWORD *)v412 - 2) = v415;
              operator delete(v415);
            }
            v412 = v414;
          }
          while (v414 != v411);
          v413 = v762;
        }
        v763 = v411;
        operator delete(v413);
      }
      v673 = (char *)v760;
      if (v760)
      {
        v674 = v760;
        if (v761 != v760)
        {
          v675 = v761 - 24;
          v676 = (void (***)(char *))(v761 - 24);
          do
          {
            v677 = *v676;
            v676 -= 3;
            (*v677)(v675);
            v12 = v675 == v673;
            v675 = (char *)v676;
          }
          while (!v12);
          v674 = v760;
        }
        v761 = v673;
        operator delete(v674);
      }
      v422 = v759[0];
      if (v759[0])
        goto LABEL_546;
    }
  }
LABEL_547:
  if ((v756 & 1) == 0)
  {
    v423 = *(_QWORD *)(i + 80);
    v424 = *(_QWORD *)(v423 + 2824);
    v425 = *(_QWORD *)(v423 + 2832);
    if (v424 != v425)
    {
      v426 = 0;
      do
      {
        v428 = *(_QWORD *)(*(_QWORD *)(v424 + 16) + 424);
        v429 = *(char **)(v428 + 40);
        v430 = *(char **)(v428 + 48);
        if (v429 == v430)
        {
          v427 = 0;
        }
        else
        {
          v431 = v430 - v429 - 16;
          if (v431 >= 0x10)
          {
            v433 = 0;
            v434 = 0;
            v435 = (v431 >> 4) + 1;
            v432 = &v429[16 * (v435 & 0x1FFFFFFFFFFFFFFELL)];
            v436 = (uint64_t *)(v429 + 16);
            v437 = v435 & 0x1FFFFFFFFFFFFFFELL;
            do
            {
              v438 = *(v436 - 2);
              v439 = *v436;
              v436 += 4;
              v433 += *(unsigned __int8 *)(v438 + 736);
              v434 += *(unsigned __int8 *)(v439 + 736);
              v437 -= 2;
            }
            while (v437);
            v427 = v434 + v433;
            if (v435 == (v435 & 0x1FFFFFFFFFFFFFFELL))
              goto LABEL_551;
          }
          else
          {
            v427 = 0;
            v432 = v429;
          }
          do
          {
            v440 = *(_QWORD *)v432;
            v432 += 16;
            v427 += *(unsigned __int8 *)(v440 + 736);
          }
          while (v432 != v430);
        }
LABEL_551:
        v426 = v426 - v427 + ((v430 - v429) >> 4);
        v424 += 4472;
      }
      while (v424 != v425);
    }
    kdebug_trace();
  }
  sub_20F2FC2B4((_QWORD *)i);
  v441 = v758;
  v442 = (_OWORD *)(v758 + 1128);
  v443 = (_OWORD *)(v758 + 1112);
  v444 = v748;
  if (!*(_BYTE *)(v758 + 4288))
    v444 = 1;
  v445 = (_QWORD *)v757;
  v446 = v752;
  if ((v444 & 1) == 0 && v752 != v754)
  {
    *(_QWORD *)&v872 = -1;
    v881 = 0;
    v882 = 0;
    v877 = 0u;
    v878 = 0u;
    LOBYTE(v879) = 0;
    *(_OWORD *)&oslog[8] = *v442;
    *(_DWORD *)oslog = 3;
    DWORD2(v872) = -1;
    v447 = operator new(0x10uLL);
    memset(&v880[80], 0, 208);
    *v447 = *v443;
    *((_QWORD *)&v877 + 1) = v447;
    *(_QWORD *)&v878 = v447 + 1;
    v879 = 0u;
    memset(v880, 0, 80);
    *((_QWORD *)&v878 + 1) = v447 + 1;
    *(_QWORD *)&v880[288] = 0;
    v881 = 1;
    v448 = operator new(0x80uLL);
    v449 = *(_OWORD *)(v758 + 1224);
    v448[4] = *(_OWORD *)(v758 + 1208);
    v448[5] = v449;
    v450 = *(_OWORD *)(v758 + 1256);
    v448[6] = *(_OWORD *)(v758 + 1240);
    v448[7] = v450;
    v451 = *(_OWORD *)(v758 + 1160);
    *v448 = *(_OWORD *)(v758 + 1144);
    v448[1] = v451;
    v452 = *(_OWORD *)(v758 + 1192);
    v448[2] = *(_OWORD *)(v758 + 1176);
    v448[3] = v452;
    *(_QWORD *)v880 = v448 + 8;
    *(_QWORD *)&v879 = v448;
    *((_QWORD *)&v879 + 1) = v448 + 8;
    memcpy(&v880[8], (const void *)(v758 + 1272), 0x120uLL);
    v453 = *(_QWORD *)(v758 + 1112);
    v454 = *(_QWORD *)(v757 + 80);
    v455 = *(_QWORD *)(v454 + 2824);
    v456 = *(_QWORD *)(v454 + 2832);
    if (v455 != v456)
    {
      while (1)
      {
        v457 = *(_QWORD *)(v455 + 16);
        if (v457)
        {
          if (*(_QWORD *)(v457 + 160) == v453)
            break;
        }
        v455 += 4472;
        if (v455 == v456)
          goto LABEL_587;
      }
    }
    if (v455 != v456 && v455 && *(_BYTE *)(v455 + 3552))
    {
      v458 = *(float64x2_t *)(v455 + 408);
      v459 = *(float64x2_t *)(v455 + 424);
      object[0] = *(float64x2_t *)(v455 + 376);
      *(float64x2_t *)((char *)object + 12) = *(float64x2_t *)(v455 + 388);
      v460 = *(_OWORD *)(v455 + 472);
      v461 = *(float64x2_t *)(v455 + 504);
      v462 = *(float64x2_t *)(v455 + 520);
      *(_OWORD *)v817 = *(_OWORD *)(v455 + 488);
      v818 = v461;
      v819 = v462;
      object[2] = v458;
      v463 = *(_OWORD *)(v455 + 440);
      v464 = *(float64x2_t *)(v455 + 456);
      v813 = v459;
      *(_OWORD *)v814 = v463;
      *(_OWORD *)v816 = v460;
      v815 = v464;
      memcpy(v820, (const void *)(v455 + 536), sizeof(v820));
      LOBYTE(v821[0]) = 0;
      v870 = 0;
      if (*(_BYTE *)(v455 + 3544))
      {
        v821[0] = *(_OWORD *)(v455 + 824);
        *(_OWORD *)((char *)v821 + 12) = *(_OWORD *)(v455 + 836);
        v465 = *(_QWORD *)(v455 + 872);
        v821[2] = *(_OWORD *)(v455 + 856);
        v823 = *(_OWORD *)(v455 + 880);
        v466 = *(_QWORD *)(v455 + 896);
        v822 = v465;
        v824 = v466;
        v467 = *(_OWORD *)(v455 + 904);
        v826 = *(_OWORD *)(v455 + 920);
        v825 = v467;
        v468 = *(_OWORD *)(v455 + 936);
        v469 = *(_OWORD *)(v455 + 952);
        v470 = *(_OWORD *)(v455 + 968);
        v471 = *(_OWORD *)(v455 + 984);
        v831 = *(_QWORD *)(v455 + 1000);
        v830 = v471;
        v829 = v470;
        v827 = v468;
        v828 = v469;
        v832 = *(_OWORD *)(v455 + 1008);
        v472 = *(_QWORD *)(v455 + 1072);
        v473 = *(_OWORD *)(v455 + 1024);
        v474 = *(_OWORD *)(v455 + 1040);
        v835 = *(_OWORD *)(v455 + 1056);
        v834 = v474;
        v833 = v473;
        v836 = v472;
        v475 = *(_OWORD *)(v455 + 1080);
        v476 = *(_OWORD *)(v455 + 1096);
        v477 = *(_OWORD *)(v455 + 1112);
        v478 = *(_OWORD *)(v455 + 1128);
        v841 = *(_QWORD *)(v455 + 1144);
        v840 = v478;
        v839 = v477;
        v837 = v475;
        v838 = v476;
        v479 = *(_OWORD *)(v455 + 1152);
        v480 = *(_QWORD *)(v455 + 1216);
        v481 = *(_OWORD *)(v455 + 1168);
        v482 = *(_OWORD *)(v455 + 1200);
        v844 = *(_OWORD *)(v455 + 1184);
        v845 = v482;
        v842 = v479;
        v843 = v481;
        v846 = v480;
        v483 = *(_OWORD *)(v455 + 1224);
        v484 = *(_OWORD *)(v455 + 1240);
        v485 = *(_OWORD *)(v455 + 1256);
        v486 = *(_OWORD *)(v455 + 1272);
        v851 = *(_QWORD *)(v455 + 1288);
        v850 = v486;
        v849 = v485;
        v847 = v483;
        v848 = v484;
        v487 = *(_OWORD *)(v455 + 1296);
        v488 = *(_QWORD *)(v455 + 1360);
        v489 = *(_OWORD *)(v455 + 1312);
        v490 = *(_OWORD *)(v455 + 1344);
        v854 = *(_OWORD *)(v455 + 1328);
        v855 = v490;
        v852 = v487;
        v853 = v489;
        v856 = v488;
        v491 = *(_OWORD *)(v455 + 1368);
        v492 = *(_OWORD *)(v455 + 1384);
        v493 = *(_OWORD *)(v455 + 1400);
        v494 = *(_OWORD *)(v455 + 1416);
        v861 = *(_QWORD *)(v455 + 1432);
        v860 = v494;
        v859 = v493;
        v857 = v491;
        v858 = v492;
        v495 = *(_OWORD *)(v455 + 1440);
        v496 = *(_QWORD *)(v455 + 1504);
        v497 = *(_OWORD *)(v455 + 1456);
        v498 = *(_OWORD *)(v455 + 1488);
        v864 = *(_OWORD *)(v455 + 1472);
        v865 = v498;
        v862 = v495;
        v863 = v497;
        v866 = v496;
        memcpy(v867, (const void *)(v455 + 1512), sizeof(v867));
        memcpy(v868, (const void *)(v455 + 2208), sizeof(v868));
        memcpy(v869, (const void *)(v455 + 2856), sizeof(v869));
        v870 = 1;
      }
      if ((*(_QWORD *)&object[1].f64[0] != v453 || LODWORD(object[1].f64[1]) != *(_DWORD *)(v758 + 1120))
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPoseFactorUtil.cpp", 357, (uint64_t)"accumulated_pose_info.state_id1 == delta_pose_info.state_id0", 60, (uint64_t)&unk_2102BA29B, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      object[1].f64[0] = *(float64_t *)v442;
      LODWORD(object[1].f64[1]) = *(_DWORD *)(v758 + 1136);
      v500 = *(float64x2_t *)(v758 + 1144);
      v499 = *(float64x2_t *)(v758 + 1160);
      v502 = *(float64x2_t *)(v758 + 1176);
      v501 = *(float64x2_t *)(v758 + 1192);
      v504 = *(float64x2_t *)(v758 + 1208);
      v503 = *(float64x2_t *)(v758 + 1224);
      v506 = *(float64x2_t *)(v758 + 1240);
      v505 = *(float64x2_t *)(v758 + 1256);
      v507 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v499, object[2].f64[0]), v501, object[2], 1), v503, v813.f64[0]), v505, v813, 1);
      v508 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v499, *(double *)v814), v501, *(float64x2_t *)v814, 1), v503, v815.f64[0]), v505, v815, 1);
      v509 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v499, *(double *)v816), v501, *(float64x2_t *)v816, 1), v503, *(double *)v817), v505, *(float64x2_t *)v817, 1);
      object[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, object[2].f64[0]), v502, object[2], 1), v504, v813.f64[0]), v506, v813, 1);
      v813 = v507;
      *(float64x2_t *)v814 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, *(double *)v814), v502, *(float64x2_t *)v814, 1), v504, v815.f64[0]), v506, v815, 1);
      v815 = v508;
      *(float64x2_t *)v816 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, *(double *)v816), v502, *(float64x2_t *)v816, 1), v504, *(double *)v817), v506, *(float64x2_t *)v817, 1);
      *(float64x2_t *)v817 = v509;
      v510 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v499, v818.f64[0]), v501, v818, 1), v503, v819.f64[0]), v505, v819, 1);
      v818 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, v818.f64[0]), v502, v818, 1), v504, v819.f64[0]), v506, v819, 1);
      v819 = v510;
      sub_20EB70E00((uint64_t)&object[2]);
      v511 = 0;
      v512 = 0;
      v513 = *(double *)(v758 + 1160);
      v514 = *(int8x16_t *)(v758 + 1144);
      *(_QWORD *)&v515 = vextq_s8(v514, v514, 8uLL).u64[0];
      v516 = *(double *)(v758 + 1192);
      v517 = *(int8x16_t *)(v758 + 1176);
      v518 = vextq_s8(v517, v517, 8uLL).u64[0];
      v519 = *(double *)(v758 + 1224);
      v520 = *(float64x2_t *)(v758 + 1208);
      v521 = (float64x2_t)vextq_s8((int8x16_t)v520, (int8x16_t)v520, 8uLL);
      *(float64_t *)v800 = v513;
      *(int8x16_t *)v799 = v514;
      *(float64_t *)v802 = v516;
      v801 = (float64x2_t)v517;
      *(float64_t *)v804 = v519;
      v803 = v520;
      do
      {
        v805.f64[v511] = 0.0;
        v522 = v512 < 2;
        if (v512 < 2)
          ++v512;
        else
          v512 = 0;
        if (v522)
          ++v511;
        else
          v511 += 4;
      }
      while (v511 != 18);
      v523 = *(float64x2_t *)(v758 + 1240);
      v524.f64[0] = v515;
      v524.f64[1] = v516;
      v525 = vmulq_f64(v524, v523);
      v524.f64[0] = *(float64_t *)(v758 + 1256);
      v526 = (float64x2_t)vzip1q_s64((int64x2_t)v524, (int64x2_t)v523);
      *(_QWORD *)&v527.f64[0] = v517.i64[0];
      *(_QWORD *)&v527.f64[1] = v518;
      v528 = (float64x2_t)vextq_s8((int8x16_t)v523, (int8x16_t)v524, 8uLL);
      v529.f64[0] = v513;
      *(_QWORD *)&v529.f64[1] = v514.i64[0];
      v530 = vmulq_f64(v529, v528);
      v529.f64[0] = v519;
      v529.f64[1] = v520.f64[0];
      v531.f64[0] = v521.f64[0];
      v531.f64[1] = v519;
      v532 = vmlsq_f64(vmulq_f64(v529, v528), v531, v526);
      v531.f64[0] = v515;
      v531.f64[1] = v513;
      v533.f64[0] = v516;
      *(_QWORD *)&v533.f64[1] = v517.i64[0];
      v534 = vmlsq_f64(v530, v531, v526);
      v535 = (int8x16_t)vmlsq_f64(vmulq_f64(v527, v526), v533, v523);
      *(_QWORD *)&v526.f64[0] = v514.i64[0];
      *(_QWORD *)&v526.f64[1] = v518;
      v536 = (int8x16_t)vmlsq_f64(v525, v526, v528);
      *(float64x2_t *)&v800[8] = v534;
      *(_QWORD *)&v800[24] = v536.i64[0];
      *(float64x2_t *)&v804[8] = v532;
      *(_QWORD *)&v804[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v521, v523), v520, v523, 1);
      v517.i64[1] = v518;
      *(int8x16_t *)&v808[8] = v517;
      *(float64_t *)&v806[24] = v513;
      *(float64_t *)&v808[24] = v516;
      v537 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v799, v820[0].f64[0]), v801, v820[0], 1), v803, v820[1].f64[0]), v805, v820[1], 1), v807, v820[2].f64[0]), v809, v820[2], 1);
      *(_QWORD *)&v802[24] = v535.i64[1];
      *(int8x16_t *)&v802[8] = vextq_s8(v536, v535, 8uLL);
      *(float64_t *)&v514.i64[1] = v515;
      *(int8x16_t *)&v806[8] = v514;
      v520.f64[1] = v521.f64[0];
      *(float64x2_t *)&v810[8] = v520;
      *(float64_t *)&v810[24] = v519;
      v538 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v800, v820[0].f64[0]), *(float64x2_t *)v802, v820[0], 1), *(float64x2_t *)v804, v820[1].f64[0]), *(float64x2_t *)v806, v820[1], 1), *(float64x2_t *)v808, v820[2].f64[0]), *(float64x2_t *)v810, v820[2], 1);
      v539 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v800[16], v820[0].f64[0]), *(float64x2_t *)&v802[16], v820[0], 1), *(float64x2_t *)&v804[16], v820[1].f64[0]), *(float64x2_t *)&v806[16], v820[1], 1), *(float64x2_t *)&v808[16], v820[2].f64[0]), *(float64x2_t *)&v810[16], v820[2], 1);
      v540 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v799, v820[3].f64[0]), v801, v820[3], 1), v803, v820[4].f64[0]), v805, v820[4], 1), v807, v820[5].f64[0]), v809, v820[5], 1);
      v541 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v800, v820[3].f64[0]), *(float64x2_t *)v802, v820[3], 1), *(float64x2_t *)v804, v820[4].f64[0]), *(float64x2_t *)v806, v820[4], 1), *(float64x2_t *)v808, v820[5].f64[0]), *(float64x2_t *)v810, v820[5], 1);
      v542 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v800[16], v820[3].f64[0]), *(float64x2_t *)&v802[16], v820[3], 1), *(float64x2_t *)&v804[16], v820[4].f64[0]), *(float64x2_t *)&v806[16], v820[4], 1), *(float64x2_t *)&v808[16], v820[5].f64[0]), *(float64x2_t *)&v810[16], v820[5], 1);
      v732 = vmlaq_n_f64(vmulq_n_f64(v537, *(double *)v799), v540, v801.f64[0]);
      v725 = vmlaq_n_f64(vmulq_n_f64(v538, *(double *)v799), v541, v801.f64[0]);
      v724 = vmlaq_laneq_f64(vmulq_laneq_f64(v537, *(float64x2_t *)v799, 1), v540, v801, 1);
      v723 = vmlaq_n_f64(vmulq_n_f64(v537, *(double *)v800), v540, *(double *)v802);
      v726 = vmlaq_laneq_f64(vmulq_laneq_f64(v537, *(float64x2_t *)v800, 1), v540, *(float64x2_t *)v802, 1);
      v543 = vmlaq_n_f64(vmulq_n_f64(v537, *(double *)&v800[16]), v540, *(double *)&v802[16]);
      v544 = vmlaq_laneq_f64(vmulq_laneq_f64(v537, *(float64x2_t *)&v800[16], 1), v540, *(float64x2_t *)&v802[16], 1);
      v545 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v800[16], v820[6].f64[0]), *(float64x2_t *)&v802[16], v820[6], 1), *(float64x2_t *)&v804[16], v820[7].f64[0]), *(float64x2_t *)&v806[16], v820[7], 1), *(float64x2_t *)&v808[16], v820[8].f64[0]), *(float64x2_t *)&v810[16], v820[8], 1);
      v749 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v799, v820[9].f64[0]), v801, v820[9], 1), v803, v820[10].f64[0]), v805, v820[10], 1), v807, v820[11].f64[0]), v809, v820[11], 1);
      v721 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v800, v820[9].f64[0]), *(float64x2_t *)v802, v820[9], 1), *(float64x2_t *)v804, v820[10].f64[0]), *(float64x2_t *)v806, v820[10], 1), *(float64x2_t *)v808, v820[11].f64[0]), *(float64x2_t *)v810, v820[11], 1);
      v722 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v800[16], v820[9].f64[0]), *(float64x2_t *)&v802[16], v820[9], 1), *(float64x2_t *)&v804[16], v820[10].f64[0]), *(float64x2_t *)&v806[16], v820[10], 1), *(float64x2_t *)&v808[16], v820[11].f64[0]), *(float64x2_t *)&v810[16], v820[11], 1);
      __srce = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v799, v820[12].f64[0]), v801, v820[12], 1), v803, v820[13].f64[0]), v805, v820[13], 1), v807, v820[14].f64[0]), v809, v820[14], 1);
      __sd = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v800, v820[12].f64[0]), *(float64x2_t *)v802, v820[12], 1), *(float64x2_t *)v804, v820[13].f64[0]), *(float64x2_t *)v806, v820[13], 1), *(float64x2_t *)v808, v820[14].f64[0]), *(float64x2_t *)v810, v820[14], 1);
      v546 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v800[16], v820[12].f64[0]), *(float64x2_t *)&v802[16], v820[12], 1), *(float64x2_t *)&v804[16], v820[13].f64[0]), *(float64x2_t *)&v806[16], v820[13], 1), *(float64x2_t *)&v808[16], v820[14].f64[0]), *(float64x2_t *)&v810[16], v820[14], 1);
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v799, v820[6].f64[0]), v801, v820[6], 1), v803, v820[7].f64[0]), v805, v820[7], 1), v807, v820[8].f64[0]), v809, v820[8], 1);
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v800, v820[6].f64[0]), *(float64x2_t *)v802, v820[6], 1), *(float64x2_t *)v804, v820[7].f64[0]), *(float64x2_t *)v806, v820[7], 1), *(float64x2_t *)v808, v820[8].f64[0]), *(float64x2_t *)v810, v820[8], 1);
      v549 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v539, *(double *)v799), v542, v801.f64[0]), v545, v803.f64[0]);
      v550 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v538, *(float64x2_t *)v799, 1), v541, v801, 1), v548, v803, 1);
      v551 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v539, *(float64x2_t *)v799, 1), v542, v801, 1), v545, v803, 1);
      v552 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v538, *(double *)v800), v541, *(double *)v802), v548, *(double *)v804);
      v727 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v539, *(double *)v800), v542, *(double *)v802), v545, *(double *)v804);
      v553 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v538, *(float64x2_t *)v800, 1), v541, *(float64x2_t *)v802, 1), v548, *(float64x2_t *)v804, 1);
      v554 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v539, *(float64x2_t *)v800, 1), v542, *(float64x2_t *)v802, 1), v545, *(float64x2_t *)v804, 1);
      v555 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v538, *(double *)&v800[16]), v541, *(double *)&v802[16]), v548, *(double *)&v804[16]);
      v556 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v538, *(float64x2_t *)&v800[16], 1), v541, *(float64x2_t *)&v802[16], 1), v548, *(float64x2_t *)&v804[16], 1);
      v557 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v539, *(double *)&v800[16]), v542, *(double *)&v802[16]), v545, *(double *)&v804[16]);
      v558 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v539, *(float64x2_t *)&v800[16], 1), v542, *(float64x2_t *)&v802[16], 1), v545, *(float64x2_t *)&v804[16], 1);
      v559 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v799, v820[15].f64[0]), v801, v820[15], 1), v803, v820[16].f64[0]), v805, v820[16], 1), v807, v820[17].f64[0]), v809, v820[17], 1);
      v560 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v800, v820[15].f64[0]), *(float64x2_t *)v802, v820[15], 1), *(float64x2_t *)v804, v820[16].f64[0]), *(float64x2_t *)v806, v820[16], 1), *(float64x2_t *)v808, v820[17].f64[0]), *(float64x2_t *)v810, v820[17], 1);
      v561 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v800[16], v820[15].f64[0]), *(float64x2_t *)&v802[16], v820[15], 1), *(float64x2_t *)&v804[16], v820[16].f64[0]), *(float64x2_t *)&v806[16], v820[16], 1), *(float64x2_t *)&v808[16], v820[17].f64[0]), *(float64x2_t *)&v810[16], v820[17], 1);
      v733 = vmlaq_n_f64(vmlaq_n_f64(v732, v547, v803.f64[0]), v749, v805.f64[0]);
      v562 = vmlaq_n_f64(vmlaq_n_f64(v725, v548, v803.f64[0]), v721, v805.f64[0]);
      v563 = vmlaq_n_f64(v549, v722, v805.f64[0]);
      v564 = vmlaq_laneq_f64(vmlaq_laneq_f64(v724, v547, v803, 1), v749, v805, 1);
      v565 = vmlaq_laneq_f64(v551, v722, v805, 1);
      v566 = vmlaq_n_f64(vmlaq_n_f64(v723, v547, *(double *)v804), v749, *(double *)v806);
      v567 = vmlaq_laneq_f64(vmlaq_laneq_f64(v726, v547, *(float64x2_t *)v804, 1), v749, *(float64x2_t *)v806, 1);
      v568 = vmlaq_n_f64(vmlaq_n_f64(v543, v547, *(double *)&v804[16]), v749, *(double *)&v514.i64[1]);
      v569 = vmlaq_laneq_f64(vmlaq_laneq_f64(v544, v547, *(float64x2_t *)&v804[16], 1), v749, *(float64x2_t *)&v806[16], 1);
      v570 = vaddq_f64(*(float64x2_t *)(v758 + 1304), vmlaq_n_f64(vmlaq_n_f64(v563, v546, v807.f64[0]), v561, v809.f64[0]));
      v750 = vaddq_f64(*(float64x2_t *)(v758 + 1288), vmlaq_n_f64(vmlaq_n_f64(v562, __sd, v807.f64[0]), v560, v809.f64[0]));
      v571 = vaddq_f64(*(float64x2_t *)(v758 + 1352), vmlaq_laneq_f64(vmlaq_laneq_f64(v565, v546, v807, 1), v561, v809, 1));
      v572 = vaddq_f64(*(float64x2_t *)(v758 + 1336), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v550, v721, v805, 1), __sd, v807, 1), v560, v809, 1));
      v573 = vaddq_f64(*(float64x2_t *)(v758 + 1320), vmlaq_laneq_f64(vmlaq_laneq_f64(v564, __srce, v807, 1), v559, v809, 1));
      v574 = vmlaq_laneq_f64(vmlaq_laneq_f64(v554, v722, *(float64x2_t *)v806, 1), v546, *(float64x2_t *)v808, 1);
      v575 = vmlaq_n_f64(vmlaq_n_f64(v555, v721, *(double *)&v514.i64[1]), __sd, *(double *)&v808[16]);
      v576 = vmlaq_n_f64(vmlaq_n_f64(v557, v722, *(double *)&v514.i64[1]), v546, *(double *)&v808[16]);
      v577 = vmlaq_laneq_f64(vmlaq_laneq_f64(v558, v722, *(float64x2_t *)&v806[16], 1), v546, *(float64x2_t *)&v808[16], 1);
      v578 = vaddq_f64(*(float64x2_t *)(v758 + 1400), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v727, v722, *(double *)v806), v546, *(double *)v808), v561, *(double *)v810));
      v579 = vaddq_f64(*(float64x2_t *)(v758 + 1384), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v552, v721, *(double *)v806), __sd, *(double *)v808), v560, *(double *)v810));
      v580 = vaddq_f64(*(float64x2_t *)(v758 + 1368), vmlaq_n_f64(vmlaq_n_f64(v566, __srce, *(double *)v808), v559, *(double *)v810));
      v581 = vaddq_f64(*(float64x2_t *)(v758 + 1448), vmlaq_laneq_f64(v574, v561, *(float64x2_t *)v810, 1));
      v582 = vaddq_f64(*(float64x2_t *)(v758 + 1432), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v553, v721, *(float64x2_t *)v806, 1), __sd, *(float64x2_t *)v808, 1), v560, *(float64x2_t *)v810, 1));
      v583 = vaddq_f64(*(float64x2_t *)(v758 + 1416), vmlaq_laneq_f64(vmlaq_laneq_f64(v567, __srce, *(float64x2_t *)v808, 1), v559, *(float64x2_t *)v810, 1));
      v584 = vmlaq_n_f64(vmlaq_n_f64(v568, __srce, *(double *)&v808[16]), v559, v520.f64[1]);
      v585 = vmlaq_n_f64(v575, v560, v520.f64[1]);
      v586 = vaddq_f64(*(float64x2_t *)(v758 + 1496), vmlaq_n_f64(v576, v561, v520.f64[1]));
      v587 = vaddq_f64(*(float64x2_t *)(v758 + 1480), v585);
      v588 = vaddq_f64(*(float64x2_t *)(v758 + 1464), v584);
      v589 = vaddq_f64(*(float64x2_t *)(v758 + 1544), vmlaq_laneq_f64(v577, v561, *(float64x2_t *)&v810[16], 1));
      v590 = vaddq_f64(*(float64x2_t *)(v758 + 1512), vmlaq_laneq_f64(vmlaq_laneq_f64(v569, __srce, *(float64x2_t *)&v808[16], 1), v559, *(float64x2_t *)&v810[16], 1));
      v820[0] = vaddq_f64(*(float64x2_t *)(v758 + 1272), vmlaq_n_f64(vmlaq_n_f64(v733, __srce, v807.f64[0]), v559, v809.f64[0]));
      v820[1] = v750;
      v820[2] = v570;
      v820[3] = v573;
      v820[4] = v572;
      v820[5] = v571;
      v820[6] = v580;
      v820[7] = v579;
      v820[8] = v578;
      v820[9] = v583;
      v820[10] = v582;
      v820[11] = v581;
      v820[12] = v588;
      v820[13] = v587;
      v820[14] = v586;
      v820[15] = v590;
      v820[16] = vaddq_f64(*(float64x2_t *)(v758 + 1528), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v556, v721, *(float64x2_t *)&v806[16], 1), __sd, *(float64x2_t *)&v808[16], 1), v560, *(float64x2_t *)&v810[16], 1));
      v820[17] = v589;
      memcpy(&v880[8], v820, 0x120uLL);
      v441 = v758;
    }
LABEL_587:
    sub_20F2FC438(v757, (uint64_t)oslog);
    v446 = v752;
    if (v881 && (_QWORD)v879)
    {
      *((_QWORD *)&v879 + 1) = v879;
      operator delete((void *)v879);
    }
    if (*((_QWORD *)&v877 + 1))
    {
      *(_QWORD *)&v878 = *((_QWORD *)&v877 + 1);
      operator delete(*((void **)&v877 + 1));
    }
  }
  v591 = *(_QWORD *)(v757 + 40);
  if (v591)
  {
    v593 = *(_QWORD *)(v591 + 8);
    v592 = *(_QWORD *)(v591 + 16);
    if (v593 != v592)
    {
      v594 = v592 - v593 - 112;
      v595 = v593;
      if (v594 < 0x70)
        goto LABEL_814;
      v596 = (((v594 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
      v595 = v593 + 112 * (v596 & 0x7FFFFFFFFFFFFFELL);
      v597 = (_BYTE *)(v593 + 216);
      v598 = v596 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        *(v597 - 112) = 1;
        *v597 = 1;
        v597 += 224;
        v598 -= 2;
      }
      while (v598);
      if (v596 != (v596 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_814:
        do
        {
          *(_BYTE *)(v595 + 104) = 1;
          v595 += 112;
        }
        while (v595 != v592);
      }
    }
  }
  v599 = *(_QWORD **)(v757 + 56);
  if (v599)
  {
    v601 = v599[1];
    v600 = v599[2];
    if (v601 == v600)
      goto LABEL_607;
    v602 = v600 - v601 - 1000;
    if (v602 >= 0x3E8)
    {
      v604 = v602 / 0x3E8 + 1;
      v603 = v601 + 1000 * (v604 & 0xFFFFFFFFFFFFFELL);
      v605 = v604 & 0xFFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v601 + 992) = 1;
        *(_BYTE *)(v601 + 1992) = 1;
        v601 += 2000;
        v605 -= 2;
      }
      while (v605);
      if (v604 == (v604 & 0xFFFFFFFFFFFFFELL))
      {
LABEL_607:
        v607 = v599[4];
        v606 = v599[5];
        if (v607 == v606)
          goto LABEL_614;
        v608 = v606 - v607 - 376;
        if (v608 >= 0x178)
        {
          v610 = v608 / 0x178 + 1;
          v609 = v607 + 376 * (v610 & 0x1FFFFFFFFFFFFFELL);
          v611 = v610 & 0x1FFFFFFFFFFFFFELL;
          do
          {
            *(_BYTE *)(v607 + 368) = 1;
            *(_BYTE *)(v607 + 744) = 1;
            v607 += 752;
            v611 -= 2;
          }
          while (v611);
          if (v610 == (v610 & 0x1FFFFFFFFFFFFFELL))
          {
LABEL_614:
            v613 = v599[7];
            v612 = v599[8];
            if (v613 == v612)
              goto LABEL_621;
            v614 = v612 - v613 - 480;
            if (v614 >= 0x1E0)
            {
              v616 = v614 / 0x1E0 + 1;
              v615 = v613 + 480 * (v616 & 0x1FFFFFFFFFFFFFELL);
              v617 = v616 & 0x1FFFFFFFFFFFFFELL;
              do
              {
                *(_BYTE *)(v613 + 472) = 1;
                *(_BYTE *)(v613 + 952) = 1;
                v613 += 960;
                v617 -= 2;
              }
              while (v617);
              if (v616 == (v616 & 0x1FFFFFFFFFFFFFELL))
              {
LABEL_621:
                v619 = v599[10];
                v618 = v599[11];
                if (v619 == v618)
                  goto LABEL_628;
                v620 = v618 - v619 - 440;
                if (v620 >= 0x1B8)
                {
                  v622 = v620 / 0x1B8 + 1;
                  v621 = v619 + 440 * (v622 & 0x1FFFFFFFFFFFFFELL);
                  v623 = v622 & 0x1FFFFFFFFFFFFFELL;
                  do
                  {
                    *(_BYTE *)(v619 + 432) = 1;
                    *(_BYTE *)(v619 + 872) = 1;
                    v619 += 880;
                    v623 -= 2;
                  }
                  while (v623);
                  if (v622 == (v622 & 0x1FFFFFFFFFFFFFELL))
                  {
LABEL_628:
                    v625 = v599[13];
                    v624 = v599[14];
                    if (v625 != v624)
                    {
                      v626 = v624 - v625 - 32;
                      v627 = v599[13];
                      if (v626 < 0x20)
                        goto LABEL_815;
                      v628 = (v626 >> 5) + 1;
                      v627 = v625 + 32 * (v628 & 0xFFFFFFFFFFFFFFELL);
                      v629 = (_BYTE *)(v625 + 56);
                      v630 = v628 & 0xFFFFFFFFFFFFFFELL;
                      do
                      {
                        *(v629 - 32) = 1;
                        *v629 = 1;
                        v629 += 64;
                        v630 -= 2;
                      }
                      while (v630);
                      if (v628 != (v628 & 0xFFFFFFFFFFFFFFELL))
                      {
LABEL_815:
                        do
                        {
                          *(_BYTE *)(v627 + 24) = 1;
                          v627 += 32;
                        }
                        while (v627 != v624);
                      }
                    }
                    v632 = v599[16];
                    v631 = v599[17];
                    if (v632 == v631)
                      goto LABEL_641;
                    v633 = v631 - v632 - 904;
                    if (v633 >= 0x388)
                    {
                      v635 = v633 / 0x388 + 1;
                      v634 = v632 + 904 * (v635 & 0xFFFFFFFFFFFFFELL);
                      v636 = v635 & 0xFFFFFFFFFFFFFELL;
                      do
                      {
                        *(_BYTE *)(v632 + 896) = 1;
                        *(_BYTE *)(v632 + 1800) = 1;
                        v632 += 1808;
                        v636 -= 2;
                      }
                      while (v636);
                      if (v635 == (v635 & 0xFFFFFFFFFFFFFELL))
                        goto LABEL_641;
                    }
                    else
                    {
                      v634 = v599[16];
                    }
                    do
                    {
                      *(_BYTE *)(v634 + 896) = 1;
                      v634 += 904;
                    }
                    while (v634 != v631);
LABEL_641:
                    v638 = v599[19];
                    v637 = v599[20];
                    if (v638 != v637)
                    {
                      v639 = v637 - v638 - 32;
                      v640 = v599[19];
                      if (v639 < 0x20)
                        goto LABEL_816;
                      v641 = (v639 >> 5) + 1;
                      v640 = v638 + 32 * (v641 & 0xFFFFFFFFFFFFFFELL);
                      v642 = (_BYTE *)(v638 + 56);
                      v643 = v641 & 0xFFFFFFFFFFFFFFELL;
                      do
                      {
                        *(v642 - 32) = 1;
                        *v642 = 1;
                        v642 += 64;
                        v643 -= 2;
                      }
                      while (v643);
                      if (v641 != (v641 & 0xFFFFFFFFFFFFFFELL))
                      {
LABEL_816:
                        do
                        {
                          *(_BYTE *)(v640 + 24) = 1;
                          v640 += 32;
                        }
                        while (v640 != v637);
                      }
                    }
                    v645 = v599[22];
                    v644 = v599[23];
                    if (v645 != v644)
                    {
                      v646 = v644 - v645 - 112;
                      v647 = v645;
                      if (v646 < 0x70)
                        goto LABEL_817;
                      v648 = (((v646 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
                      v647 = v645 + 112 * (v648 & 0x7FFFFFFFFFFFFFELL);
                      v649 = (_BYTE *)(v645 + 216);
                      v650 = v648 & 0x7FFFFFFFFFFFFFELL;
                      do
                      {
                        *(v649 - 112) = 1;
                        *v649 = 1;
                        v649 += 224;
                        v650 -= 2;
                      }
                      while (v650);
                      if (v648 != (v648 & 0x7FFFFFFFFFFFFFELL))
                      {
LABEL_817:
                        do
                        {
                          *(_BYTE *)(v647 + 104) = 1;
                          v647 += 112;
                        }
                        while (v647 != v644);
                      }
                    }
                    goto LABEL_653;
                  }
                }
                else
                {
                  v621 = v599[10];
                }
                do
                {
                  *(_BYTE *)(v621 + 432) = 1;
                  v621 += 440;
                }
                while (v621 != v618);
                goto LABEL_628;
              }
            }
            else
            {
              v615 = v599[7];
            }
            do
            {
              *(_BYTE *)(v615 + 472) = 1;
              v615 += 480;
            }
            while (v615 != v612);
            goto LABEL_621;
          }
        }
        else
        {
          v609 = v599[4];
        }
        do
        {
          *(_BYTE *)(v609 + 368) = 1;
          v609 += 376;
        }
        while (v609 != v606);
        goto LABEL_614;
      }
    }
    else
    {
      v603 = v599[1];
    }
    do
    {
      *(_BYTE *)(v603 + 992) = 1;
      v603 += 1000;
    }
    while (v603 != v600);
    goto LABEL_607;
  }
LABEL_653:
  if (!*(_BYTE *)(v758 + 4792))
    goto LABEL_682;
  sub_20F2FC438(v757, v441 + 4296);
  v651 = sub_210219C18();
  v652 = *(_QWORD *)(v758 + 1096);
  v653 = *(double *)(v652 + 56);
  LODWORD(v652) = *(_DWORD *)(v652 + 48);
  object[0].f64[0] = v653;
  LODWORD(object[0].f64[1]) = v652;
  sub_210216370((uint64_t)object);
  if (oslog[23] >= 0)
    v654 = oslog;
  else
    v654 = *(_BYTE **)oslog;
  v655 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v655 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v656 = atomic_load(&qword_254A5A450);
  v445 = (_QWORD *)v757;
  if (v656)
  {
    LODWORD(object[0].f64[0]) = 136315138;
    *(_QWORD *)((char *)object[0].f64 + 4) = v654;
    v657 = (char *)_os_log_send_and_compose_impl();
    v658 = strlen(v657);
    v799[0] = 0;
    pthread_threadid_np(0, v799);
    v659 = v799[0];
    timespec_get((timespec *)v799, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v651 + 1), (__int128 *)(v651 + 5), "MI:RelocToBackend: VSID:%s", 0x1AuLL, v657, v658, v659, v799);
    std::mutex::lock(&stru_254A5A410);
    v660 = qword_254A5A458;
    for (j = unk_254A5A460; v660 != j; v660 += 40)
    {
      v662 = *(_QWORD *)(v660 + 32);
      if (!v662)
        sub_20E86D37C();
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v662 + 48))(v662, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v818.f64[1]) < 0)
    {
      operator delete(v817[1]);
      v445 = (_QWORD *)v757;
      if ((SHIBYTE(v817[0]) & 0x80000000) == 0)
      {
LABEL_664:
        if (!LOBYTE(v815.f64[1]))
        {
LABEL_670:
          if (LOBYTE(v813.f64[1]) && SHIBYTE(v813.f64[0]) < 0)
            operator delete(*(void **)&object[2].f64[0]);
          if (SHIBYTE(object[1].f64[1]) < 0)
            operator delete(*(void **)&object[0].f64[1]);
          if (v657)
            free(v657);
          goto LABEL_677;
        }
LABEL_668:
        if (SHIBYTE(v815.f64[0]) < 0)
          operator delete(v814[0]);
        goto LABEL_670;
      }
    }
    else
    {
      v445 = (_QWORD *)v757;
      if ((SHIBYTE(v817[0]) & 0x80000000) == 0)
        goto LABEL_664;
    }
    operator delete(v816[0]);
    if (!LOBYTE(v815.f64[1]))
      goto LABEL_670;
    goto LABEL_668;
  }
LABEL_677:
  if (os_signpost_enabled((os_log_t)*v651))
  {
    LODWORD(object[0].f64[0]) = 136315138;
    *(_QWORD *)((char *)object[0].f64 + 4) = v654;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v441 = v758;
  if ((oslog[23] & 0x80000000) != 0)
    operator delete(*(void **)oslog);
  v446 = v752;
LABEL_682:
  v663 = (_BYTE *)v445[10];
  if (v446 != v754)
    goto LABEL_725;
  if (!v663[2618])
    goto LABEL_725;
  if (!v663[2499])
    goto LABEL_725;
  v664 = *(int8x8_t **)(v441 + 1096);
  if (!v664 || v756 && !v663[2620])
    goto LABEL_725;
  v665 = v664[6].u32[0];
  *(int8x8_t *)&v811 = v664[7];
  *((_QWORD *)&v811 + 1) = v665;
  memset(object, 0, 32);
  LODWORD(object[2].f64[0]) = 733223624;
  kdebug_trace();
  v666 = v445[10];
  if ((_QWORD)v811 == *(_QWORD *)(v666 + 2808))
  {
    v667 = *(_QWORD *)(v666 + 2816);
    v668 = *(char **)(v667 + 32);
    v669 = *(char **)(v667 + 40);
    if (v669 != v668)
    {
      v670 = (v669 - v668) >> 4;
      do
      {
        v671 = v670 >> 1;
        v672 = &v668[16 * (v670 >> 1)];
        if (*(_QWORD *)v672 < (unint64_t)v811
          || *(_QWORD *)v672 == (_QWORD)v811 && *(_DWORD *)&v668[16 * v671 + 8] < DWORD2(v811))
        {
          v668 = v672 + 16;
          v671 = v670 + ~v671;
        }
        v670 = v671;
      }
      while (v671);
    }
    if (v668 != v669 && *(_QWORD *)v668 == (_QWORD)v811 && *((_DWORD *)v668 + 2) == DWORD2(v811))
    {
      sub_20F268698(*(_QWORD *)(v666 + 2816), (uint64_t)&v811);
      v666 = v445[10];
    }
  }
  sub_20F32F9D0(v666, (uint64_t)&v811, v664, (uint64_t)oslog);
  v678 = *(uint64_t **)oslog;
  if (*(_QWORD *)oslog != *(_QWORD *)&oslog[8])
  {
    v679 = v445[10];
    v799[1] = 0;
    v799[0] = 0;
    *(_QWORD *)v800 = 0;
    sub_20F24ED70(*(_QWORD **)(v679 + 2816), v811, *((uint64_t *)&v811 + 1), (uint64_t)v799);
    if ((v800[7] & 0x80000000) != 0)
    {
      operator delete((void *)v799[0]);
      v678 = *(uint64_t **)oslog;
      v680 = *(uint64_t **)&oslog[8];
      if (*(_QWORD *)oslog == *(_QWORD *)&oslog[8])
        goto LABEL_722;
    }
    else
    {
      v678 = *(uint64_t **)oslog;
      v680 = *(uint64_t **)&oslog[8];
      if (*(_QWORD *)oslog == *(_QWORD *)&oslog[8])
        goto LABEL_722;
    }
    do
    {
      v799[1] = 0;
      v799[0] = 0;
      *(_QWORD *)v800 = 0;
      sub_20F302D9C((uint64_t)v445, v678, (uint64_t)v799);
      if ((v800[7] & 0x80000000) != 0)
        operator delete((void *)v799[0]);
      v678 += 59;
    }
    while (v678 != v680);
    v678 = *(uint64_t **)oslog;
  }
LABEL_722:
  if (v678)
  {
    *(_QWORD *)&oslog[8] = v678;
    operator delete(v678);
  }
  kdebug_trace();
  v663 = (_BYTE *)v445[10];
LABEL_725:
  if (v663[768])
  {
    v681 = *(_QWORD *)(v441 + 1096);
    v682 = *(double *)(v681 + 56);
    *(_QWORD *)&v683 = *(unsigned int *)(v681 + 48);
    object[0].f64[0] = v682;
    object[0].f64[1] = v683;
    sub_20F33D8C8((uint64_t)v663, (__int128 *)object);
  }
  if ((v756 & 1) == 0)
  {
    if (v445[8])
    {
      v684 = (_QWORD *)v445[9];
      v685 = v445[10];
      if (v684)
      {
        if (*(_QWORD *)(*(_QWORD *)(v685 + 2816) + 184))
        {
          v686 = *(_QWORD *)(v441 + 1096);
          v687 = *(double *)(v686 + 56);
          *(_QWORD *)&v688 = *(unsigned int *)(v686 + 48);
          object[0].f64[0] = v687;
          object[0].f64[1] = v688;
          sub_20F237E70(v684, (uint64_t)object);
          v685 = v445[10];
          if (*(_BYTE *)(v685 + 2499))
          {
            if (*(_BYTE *)(v758 + 4792))
            {
              v689 = v445[9];
              v690 = *(_QWORD *)(v689 + 80);
              v691 = *(_QWORD *)(v689 + 88);
              if (v690 != v691)
              {
                v692 = *(_QWORD *)(v441 + 1096);
                v693 = *(_QWORD *)(v692 + 56);
                v694 = *(_DWORD *)(v692 + 48);
                while (*(_QWORD *)v690 != v693 || *(_DWORD *)(v690 + 8) != v694)
                {
                  v690 += 24;
                  if (v690 == v691)
                    goto LABEL_740;
                }
                *(_BYTE *)(v690 + 16) = 1;
              }
            }
          }
        }
      }
    }
    else
    {
      v685 = v445[10];
    }
LABEL_740:
    v12 = *(_BYTE *)(v685 + 2623) == 0;
    v695 = v751;
    if (v12)
      v695 = 1;
    if ((v695 & 1) == 0)
    {
      sub_20F2FD840((uint64_t)v445, v441 + 120, (uint64_t)object);
      if (!BYTE1(object[1].f64[0])
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 889, (uint64_t)"res.second", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
  }
  sub_20F441DF0(v446 != v754, (uint64_t)(v445 + 291));
  *(_QWORD *)&v696 = -1;
  *((_QWORD *)&v696 + 1) = -1;
  *(_OWORD *)v745 = v696;
  *(_OWORD *)(v745 + 16) = v696;
  *(_OWORD *)(v745 + 96) = xmmword_2103AD368;
  *(_OWORD *)(v745 + 112) = unk_2103AD378;
  *(_OWORD *)(v745 + 128) = xmmword_2103AD388;
  *(_OWORD *)(v745 + 144) = unk_2103AD398;
  *(_OWORD *)(v745 + 32) = xmmword_2103AD328;
  *(_OWORD *)(v745 + 48) = unk_2103AD338;
  *(_OWORD *)(v745 + 64) = xmmword_2103AD348;
  *(_OWORD *)(v745 + 80) = unk_2103AD358;
  v697 = *(_QWORD *)(v758 + 1096);
  v698 = *(_QWORD *)(v697 + 56);
  LODWORD(v697) = *(_DWORD *)(v697 + 48);
  *(_QWORD *)(v745 + 16) = v698;
  *(_DWORD *)(v745 + 24) = v697;
  if (*(_BYTE *)(v758 + 4288))
  {
    *(_QWORD *)v745 = *(_QWORD *)v443;
    *(_DWORD *)(v745 + 8) = *(_DWORD *)(v758 + 1120);
    v699 = *(_OWORD *)(v758 + 1224);
    *(_OWORD *)(v745 + 96) = *(_OWORD *)(v758 + 1208);
    *(_OWORD *)(v745 + 112) = v699;
    v700 = *(_OWORD *)(v758 + 1256);
    *(_OWORD *)(v745 + 128) = *(_OWORD *)(v758 + 1240);
    *(_OWORD *)(v745 + 144) = v700;
    v701 = *(_OWORD *)(v758 + 1160);
    *(_OWORD *)(v745 + 32) = *(_OWORD *)(v758 + 1144);
    *(_OWORD *)(v745 + 48) = v701;
    v702 = *(_OWORD *)(v758 + 1192);
    *(_OWORD *)(v745 + 64) = *(_OWORD *)(v758 + 1176);
    *(_OWORD *)(v745 + 80) = v702;
  }
  if (v778)
    sub_20EE62D7C((void **)&v773);
  if (v785)
  {
    v703 = (char *)v783;
    if (v783)
    {
      v704 = v784;
      v705 = v783;
      if (v784 != v783)
      {
        v706 = v784;
        do
        {
          v708 = (void *)*((_QWORD *)v706 - 3);
          v706 -= 24;
          v707 = v708;
          if (v708)
          {
            *((_QWORD *)v704 - 2) = v707;
            operator delete(v707);
          }
          v704 = v706;
        }
        while (v706 != v703);
        v705 = v783;
      }
      v784 = v703;
      operator delete(v705);
    }
    v709 = (char *)v781;
    if (v781)
    {
      v710 = v781;
      if (v782 != v781)
      {
        v711 = v782 - 24;
        v712 = (void (***)(char *))(v782 - 24);
        do
        {
          v713 = *v712;
          v712 -= 3;
          (*v713)(v711);
          v12 = v711 == v709;
          v711 = (char *)v712;
        }
        while (!v12);
        v710 = v781;
      }
      v782 = v709;
      operator delete(v710);
    }
    if (v779)
    {
      *(_QWORD *)&v780 = v779;
      operator delete(v779);
    }
  }
  if (v791)
  {
    v714 = (char *)v789;
    if (v789)
    {
      v715 = v790;
      v716 = v789;
      if (v790 != v789)
      {
        v717 = v790;
        do
        {
          v719 = (void *)*((_QWORD *)v717 - 3);
          v717 -= 24;
          v718 = v719;
          if (v719)
          {
            *((_QWORD *)v715 - 2) = v718;
            operator delete(v718);
          }
          v715 = v717;
        }
        while (v717 != v714);
        v716 = v789;
      }
      v790 = v714;
      operator delete(v716);
    }
    if (__dst)
    {
      v787 = __dst;
      operator delete(__dst);
    }
  }
  kdebug_trace();
  return kdebug_trace();
}

void sub_20F2FBB98(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 3224) && *(char *)(v1 + 3223) < 0)
    operator delete((void *)STACK[0x1210]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x470]);
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete((void *)STACK[0x3D0]);
  sub_20E863784((uint64_t)&STACK[0x5A0]);
  sub_20E8E69C4((uint64_t)&STACK[0x410]);
  sub_20E8E69C4((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F2FBEB0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x5C0]) && SLOBYTE(STACK[0x5BF]) < 0)
    operator delete((void *)STACK[0x5A8]);
  if (STACK[0x5A0])
    os_release((void *)STACK[0x5A0]);
  sub_20E863714((uint64_t)&STACK[0x1210]);
  _Unwind_Resume(a1);
}

void sub_20F2FBEF8()
{
  JUMPOUT(0x20F2FBF0CLL);
}

void sub_20F2FBF38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 + v1 + 40);
  if (v4)
  {
    *(_QWORD *)(v2 + v1 + 48) = v4;
    operator delete(v4);
  }
  sub_20EE63F74((uint64_t)&STACK[0x5A0]);
  *(_QWORD *)(STACK[0x210] + 2608) = v2;
  if (LOBYTE(STACK[0x370]))
    sub_20EE62D7C((void **)&STACK[0x310]);
  sub_20EE62CA8((uint64_t)&STACK[0x380]);
  sub_20EE58430((uint64_t)&STACK[0x3D0]);
  sub_20E8E69C4((uint64_t)&STACK[0x410]);
  sub_20E8E69C4((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F2FBF68(_Unwind_Exception *a1)
{
  sub_20E8E69C4((uint64_t)&STACK[0x410]);
  sub_20E8E69C4((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F2FBF8C(_Unwind_Exception *a1)
{
  sub_20F2FD7F8((uint64_t)&STACK[0x1210]);
  if (LOBYTE(STACK[0x370]))
    sub_20EE62D7C((void **)&STACK[0x310]);
  sub_20EE62CA8((uint64_t)&STACK[0x380]);
  sub_20EE58430((uint64_t)&STACK[0x3D0]);
  sub_20E8E69C4((uint64_t)&STACK[0x410]);
  sub_20E8E69C4((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F2FBFA0()
{
  JUMPOUT(0x20F2FC0B8);
}

void sub_20F2FBFAC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F2FBFC8()
{
  JUMPOUT(0x20F2FC084);
}

void sub_20F2FC008(_Unwind_Exception *a1)
{
  unint64_t v1;

  STACK[0x5B0] = v1;
  sub_20EB143E8((uint64_t)&STACK[0x5A0]);
  if (LOBYTE(STACK[0x370]))
    sub_20EE62D7C((void **)&STACK[0x310]);
  sub_20EE62CA8((uint64_t)&STACK[0x380]);
  sub_20EE58430((uint64_t)&STACK[0x3D0]);
  sub_20E8E69C4((uint64_t)&STACK[0x410]);
  sub_20E8E69C4((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F2FC034(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  STACK[0x5B0] = v1 - 40;
  sub_20F3116F0((uint64_t)&STACK[0x5A0]);
  if (LOBYTE(STACK[0x370]))
    sub_20EE62D7C((void **)&STACK[0x310]);
  sub_20EE62CA8((uint64_t)&STACK[0x380]);
  sub_20EE58430((uint64_t)&STACK[0x3D0]);
  sub_20E8E69C4((uint64_t)&STACK[0x410]);
  sub_20E8E69C4((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F2FC060(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x370]))
    sub_20EE62D7C(&STACK[0x310]);
  sub_20EE62CA8(&STACK[0x380]);
  sub_20EE58430(&STACK[0x3D0]);
  sub_20E8E69C4(&STACK[0x410]);
  sub_20E8E69C4(&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F2FC068()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F2FC07CLL);
}

void sub_20F2FC0E0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254A68868);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A68868))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68860);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_254A68868);
  }
  *a1 = qword_254A68860;
}

void sub_20F2FC17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254A68868);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A68868);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2FC1D4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  v4 = *(char **)a2;
  v5 = *(char **)(a2 + 8);
  v6 = (uint64_t)&v5[-*(_QWORD *)a2] >> 5;
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/VIOFrameDebugEvent.h", 79, (uint64_t)"rhs.frames_info.size() == rhs.frames_features.size()", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(char **)a2;
    v5 = *(char **)(a2 + 8);
    v6 = (uint64_t)&v5[-*(_QWORD *)a2] >> 5;
  }
  sub_20F311CAC(a1, *(char **)(a1 + 8), v4, v5, v6);
  sub_20F311EE8((void **)(a1 + 24), *(_QWORD **)(a1 + 32), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  sub_20F31175C((void **)(a1 + 48), *(_QWORD *)(a1 + 56), *(char ***)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  return a1;
}

void sub_20F2FC2B4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  std::string __p;
  char v11;

  if (a1[5] && a1[7] && a1[8] && a1[9])
  {
    v2 = a1[10];
  }
  else
  {
    v2 = a1[10];
    if (!*(_BYTE *)(v2 + 2499))
      return;
  }
  sub_20F264ADC(*(uint64_t **)(v2 + 2816), &__p);
  if (v11)
  {
    v3 = (_QWORD *)a1[9];
    if (!v3 || !a1[8])
    {
LABEL_22:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
    v4 = v3[5];
    v5 = v3[6];
    v6 = 170 * ((v5 - v4) >> 3) - 1;
    if (v5 == v4)
      v6 = 0;
    if (v6 == v3[9] + v3[8])
    {
      sub_20F23D70C(v3 + 4);
      v4 = v3[5];
      v5 = v3[6];
    }
    if (v5 == v4)
    {
      v8 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
    }
    else
    {
      v7 = v3[9] + v3[8];
      v8 = *(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v8 = v9;
        goto LABEL_21;
      }
    }
    sub_20E860C04((_BYTE *)v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_21:
    ++v3[9];
    if (!v11)
      return;
    goto LABEL_22;
  }
}

void sub_20F2FC414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F2FC438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  void *v26;
  uint64_t v27;
  char v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  const void **v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  NSObject *v48;
  unint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  size_t v56;
  size_t v57;
  _QWORD *v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  char *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  const char *v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  const char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  unsigned __int8 v111;
  char *v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t i;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  void **v128;
  unint64_t v129;
  void *v130;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v132;
  int v133;
  const char *v134;
  int v135;
  const char *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void *__dst[2];
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE __p[44];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD v150[3];
  _BYTE v151[288];
  int v152;
  char v153;
  char v154;
  void *v155[2];
  std::__shared_weak_count *v156;
  char *v157;
  std::__shared_weak_count *v158;
  _QWORD *v159;
  __int128 v160;
  _BYTE object[48];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _DWORD v170[74];
  _QWORD v171[5];

  v171[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(v2 + 560) || !*(_BYTE *)(v2 + 2499))
    return;
  v4 = a1;
  if (*(_BYTE *)(a2 + 480))
    goto LABEL_6;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3731, (uint64_t)"reloc_info.opt_rel_pose_estimate", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v2 = *(_QWORD *)(v4 + 80);
  if (*(_BYTE *)(a2 + 480))
  {
LABEL_6:
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)__p = operator new(0x40uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DBBF0;
    strcpy(*(char **)__p, "MappingInterface::AddLoopClosureRelativePoseMeasurements, query");
    sub_20F24ED70(*(_QWORD **)(v2 + 2816), v5, v6, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      v7 = *(uint64_t **)(a2 + 144);
      v8 = *(uint64_t **)(a2 + 152);
      if (v7 == v8)
        goto LABEL_14;
    }
    else
    {
      v7 = *(uint64_t **)(a2 + 144);
      v8 = *(uint64_t **)(a2 + 152);
      if (v7 == v8)
      {
LABEL_14:
        v2 = *(_QWORD *)(v4 + 80);
        if (!*(_BYTE *)(v2 + 2498))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 1237, (uint64_t)"this->map_->config().enable_inter_session_regular_states_check", 62, (uint64_t)"In the new pose-graph, the two states have to be regular to support submapping", 78, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v2 = *(_QWORD *)(v4 + 80);
        }
        goto LABEL_17;
      }
    }
    do
    {
      v9 = *(_QWORD *)(v4 + 80);
      v10 = *v7;
      v11 = v7[1];
      *(_QWORD *)__p = operator new(0x40uLL);
      *(_OWORD *)&__p[8] = xmmword_2102DBC00;
      strcpy(*(char **)__p, "MappingInterface::AddLoopClosureRelativePoseMeasurements, ref");
      sub_20F24ED70(*(_QWORD **)(v9 + 2816), v10, v11, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v7 += 2;
    }
    while (v7 != v8);
    goto LABEL_14;
  }
LABEL_17:
  sub_20F3284E0(v2, a2, (uint64_t)&v142);
  v12 = v142;
  v13 = v143;
  if (v142 == v143)
  {
    v14 = v142;
    v13 = v142;
LABEL_187:
    if (!v142)
      goto LABEL_189;
    goto LABEL_188;
  }
  v14 = v142;
  while ((*(_DWORD *)(v14 + 464) & 0xFFFFFFFD) == 0)
  {
    v14 += 472;
    if (v14 == v143)
    {
      v14 = v143;
      break;
    }
  }
  if (!*(_QWORD *)(v4 + 64) || !*(_BYTE *)(*(_QWORD *)(v4 + 80) + 2499))
    goto LABEL_187;
  v121 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v122 = *MEMORY[0x24BEDB7F0];
  v120 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v119 = MEMORY[0x24BEDB848] + 16;
  v123 = v143;
  v126 = v4;
  do
  {
    if (!*(_BYTE *)(*(_QWORD *)(v4 + 80) + 2499))
      goto LABEL_26;
    v15 = *(_QWORD *)(v4 + 64);
    *(_OWORD *)object = *(_OWORD *)v12;
    *(_OWORD *)&object[16] = *(_OWORD *)(v12 + 16);
    *(_OWORD *)&object[28] = *(_OWORD *)(v12 + 28);
    v166 = *(_OWORD *)(v12 + 112);
    v167 = *(_OWORD *)(v12 + 128);
    v168 = *(_OWORD *)(v12 + 144);
    v169 = *(_OWORD *)(v12 + 160);
    v162 = *(_OWORD *)(v12 + 48);
    v163 = *(_OWORD *)(v12 + 64);
    v164 = *(_OWORD *)(v12 + 80);
    v165 = *(_OWORD *)(v12 + 96);
    memcpy(v170, (const void *)(v12 + 176), 0x125uLL);
    *(_OWORD *)__p = *(_OWORD *)object;
    *(_OWORD *)&__p[16] = *(_OWORD *)&object[16];
    *(_OWORD *)&__p[28] = *(_OWORD *)&object[28];
    v149 = v166;
    v150[0] = v167;
    v150[1] = v168;
    v150[2] = v169;
    v145 = v162;
    v146 = v163;
    v147 = v164;
    v148 = v165;
    memcpy(v151, v170, sizeof(v151));
    v152 = v170[72];
    v153 = v170[73];
    v154 = 1;
    sub_20F22EEA0(v15 + 56, (__int128 *)__p);
    sub_20F2FC0E0(&v141);
    if (**(int **)(v141 + 56) > 2)
      goto LABEL_26;
    v16 = *(unsigned __int8 *)(v141 + 72);
    v129 = sub_20E8C31DC(v141, "OSLogSurrogateAppender", 1, 0);
    if (!v16 && !v129)
      goto LABEL_26;
    sub_20E863438((uint64_t)__p);
    v17 = sub_20E86A980(&__p[16], (uint64_t)"----transmit reloc_result from ", 31);
    v18 = sub_20E86A980(v17, (uint64_t)"AddLoopClosureRelativePoseMeasurements", 38);
    v19 = sub_20E86A980(v18, (uint64_t)" ", 1);
    v20 = *(_DWORD *)(v12 + 8);
    v130 = *(void **)v12;
    LODWORD(rep) = v20;
    sub_210216370((uint64_t)&v130);
    if (object[23] >= 0)
      v21 = object;
    else
      v21 = *(_BYTE **)object;
    if (object[23] >= 0)
      v22 = object[23];
    else
      v22 = *(_QWORD *)&object[8];
    v23 = sub_20E86A980(v19, (uint64_t)v21, v22);
    v24 = sub_20E86A980(v23, (uint64_t)"<->", 3);
    v25 = *(_DWORD *)(v12 + 32);
    v155[0] = *(void **)(v12 + 24);
    LODWORD(v155[1]) = v25;
    sub_210216370((uint64_t)v155);
    if (v132 >= 0)
      v26 = &v130;
    else
      v26 = v130;
    if (v132 >= 0)
      v27 = HIBYTE(v132);
    else
      v27 = rep;
    sub_20E86A980(v24, (uint64_t)v26, v27);
    if (SHIBYTE(v132) < 0)
    {
      operator delete(v130);
      if ((object[23] & 0x80000000) == 0)
      {
LABEL_45:
        v28 = BYTE8(v149);
        if ((BYTE8(v149) & 0x10) != 0)
          goto LABEL_50;
        goto LABEL_46;
      }
    }
    else if ((object[23] & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(*(void **)object);
    v28 = BYTE8(v149);
    if ((BYTE8(v149) & 0x10) != 0)
    {
LABEL_50:
      v31 = v149;
      v32 = (const void **)&v146;
      if ((unint64_t)v149 < *((_QWORD *)&v146 + 1))
      {
        *(_QWORD *)&v149 = *((_QWORD *)&v146 + 1);
        v31 = *((_QWORD *)&v146 + 1);
        v32 = (const void **)&v146;
      }
      goto LABEL_53;
    }
LABEL_46:
    if ((v28 & 8) == 0)
    {
      v29 = 0;
      HIBYTE(v140) = 0;
      v30 = __dst;
      goto LABEL_61;
    }
    v31 = *((_QWORD *)&v145 + 1);
    v32 = (const void **)&__p[40];
LABEL_53:
    v33 = *v32;
    v29 = v31 - (_QWORD)*v32;
    if (v29 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v29 >= 0x17)
    {
      v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v34 = v29 | 7;
      v35 = v34 + 1;
      v30 = (void **)operator new(v34 + 1);
      __dst[1] = (void *)v29;
      v140 = v35 | 0x8000000000000000;
      __dst[0] = v30;
LABEL_60:
      memmove(v30, v33, v29);
      goto LABEL_61;
    }
    HIBYTE(v140) = v31 - *(_BYTE *)v32;
    v30 = __dst;
    if (v29)
      goto LABEL_60;
LABEL_61:
    *((_BYTE *)v30 + v29) = 0;
    v130 = &v141;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v132 = std::chrono::system_clock::now().__d_.__rep_;
    v133 = 2;
    v134 = "unknown file";
    v135 = 1261;
    v136 = "unknown function";
    v137 = 0;
    v138 = 0;
    v36 = __dst;
    if (v140 < 0)
      v36 = (void **)__dst[0];
    v128 = v36;
    v37 = *(_QWORD *)v130;
    v38 = (const char *)(*(_QWORD *)v130 + 16);
    v124 = v38;
    v125 = *(_QWORD *)v130;
    if (*(char *)(*(_QWORD *)v130 + 39) < 0)
    {
      v38 = *(const char **)(v37 + 16);
      v39 = *(_QWORD *)(v37 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      v127 = v16;
      if ((v41 & 1) != 0)
        goto LABEL_67;
    }
    else
    {
      v39 = *(unsigned __int8 *)(*(_QWORD *)v130 + 39);
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      v127 = v16;
      if ((v40 & 1) != 0)
        goto LABEL_67;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v155);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v155);
      if ((_BYTE)v157 && SHIBYTE(v156) < 0)
        operator delete(v155[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_67:
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v42, v38);
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v45 = v43 | 7;
      v46 = v45 + 1;
      v44 = operator new(v45 + 1);
      *(_QWORD *)&object[24] = v46 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v44;
      *(_QWORD *)&object[16] = v43;
LABEL_80:
      memmove(v44, v42, v43);
      goto LABEL_81;
    }
    object[31] = v43;
    v44 = &object[8];
    if (v43)
      goto LABEL_80;
LABEL_81:
    v44[v43] = 0;
    object[32] = 1;
    if (v39 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v4 = v126;
    if (v39 >= 0x17)
    {
      v51 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v51 = v39 | 7;
      v52 = v51 + 1;
      v47 = operator new(v51 + 1);
      *((_QWORD *)&v162 + 1) = v52 | 0x8000000000000000;
      *(_QWORD *)&object[40] = v47;
      *(_QWORD *)&v162 = v39;
    }
    else
    {
      HIBYTE(v162) = v39;
      v47 = &object[40];
      if (!v39)
      {
        object[40] = 0;
        LOBYTE(v163) = 1;
        v48 = *(NSObject **)object;
        if ((SHIBYTE(v162) & 0x80000000) == 0)
          goto LABEL_85;
        goto LABEL_91;
      }
    }
    memmove(v47, v38, v39);
    v47[v39] = 0;
    LOBYTE(v163) = 1;
    v48 = *(NSObject **)object;
    if ((SHIBYTE(v162) & 0x80000000) == 0)
    {
LABEL_85:
      v49 = v129;
      v50 = (const char *)v128;
      if (!object[32])
        goto LABEL_94;
      goto LABEL_92;
    }
LABEL_91:
    operator delete(*(void **)&object[40]);
    v49 = v129;
    v50 = (const char *)v128;
    if (!object[32])
      goto LABEL_94;
LABEL_92:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
LABEL_94:
    if (*(_QWORD *)object)
      os_release(*(void **)object);
    if (v49 && *(_QWORD *)(v49 + 24))
    {
      v53 = _os_log_pack_size();
      v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
      v55 = (std::__shared_weak_count *)operator new();
      v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
      v55->__shared_owners_ = 0;
      v55->__shared_weak_owners_ = 0;
      v55[1].__vftable = v54;
      v155[0] = v54;
      v155[1] = v54;
      v156 = v55;
      v157 = 0;
      v158 = 0;
      v56 = strlen(v50);
      if (v56 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v57 = v56;
      if (v56 >= 0x17)
      {
        v61 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v56 | 7) != 0x17)
          v61 = v56 | 7;
        v62 = v61 + 1;
        v58 = operator new(v61 + 1);
        *((_QWORD *)&v160 + 1) = v62 | 0x8000000000000000;
        v159 = v58;
        *(_QWORD *)&v160 = v57;
      }
      else
      {
        HIBYTE(v160) = v56;
        v58 = &v159;
        if (!v56)
        {
LABEL_108:
          *((_BYTE *)v58 + v57) = 0;
          v63 = v159;
          v171[0] = v160;
          *(_QWORD *)((char *)v171 + 7) = *(_QWORD *)((char *)&v160 + 7);
          v64 = HIBYTE(v160);
          v65 = operator new(0x38uLL);
          v65[1] = 0;
          v65[2] = 0;
          v65[3] = off_24C9ABC20;
          *v65 = &off_24C9ABBD0;
          v66 = v171[0];
          v65[4] = v63;
          v65[5] = v66;
          *(_QWORD *)((char *)v65 + 47) = *(_QWORD *)((char *)v171 + 7);
          *((_BYTE *)v65 + 55) = v64;
          v171[0] = 0;
          *(_QWORD *)((char *)v171 + 7) = 0;
          v67 = v158;
          v157 = (char *)(v65 + 3);
          v158 = (std::__shared_weak_count *)v65;
          v4 = v126;
          if (v67)
          {
            p_shared_owners = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldaxr(p_shared_owners);
            while (__stlxr(v69 - 1, p_shared_owners));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          *(_OWORD *)object = *(_OWORD *)v155;
          v70 = v157;
          *(_QWORD *)&object[16] = v156;
          if (v156)
          {
            v71 = (unint64_t *)&v156->__shared_owners_;
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v73 = v158;
          *(_QWORD *)&object[24] = v70;
          *(_QWORD *)&object[32] = v158;
          if (v158)
          {
            v74 = (unint64_t *)&v158->__shared_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
            *(_QWORD *)&object[40] = v70;
            do
              v76 = __ldaxr(v74);
            while (__stlxr(v76 - 1, v74));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          else
          {
            *(_QWORD *)&object[40] = v70;
          }
          v77 = v156;
          if (v156)
          {
            v78 = (unint64_t *)&v156->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = *(_QWORD *)object;
          if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
            v81 = *(_QWORD *)&object[40] + 8;
          else
            v81 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
          v82 = _os_log_pack_fill();
          *(_DWORD *)v82 = 136315138;
          *(_QWORD *)(v82 + 4) = v81;
          v83 = (char *)operator new();
          v84 = *(unsigned __int8 *)(v125 + 39);
          v85 = v124;
          if ((v84 & 0x80u) != 0)
          {
            v85 = *(const char **)(v125 + 16);
            v84 = *(_QWORD *)(v125 + 24);
          }
          *(_QWORD *)v83 = v80;
          *(_OWORD *)(v83 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v83 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v83 + 5) = v85;
          *((_QWORD *)v83 + 6) = v84;
          v83[56] = 2;
          v159 = 0;
          v155[0] = v83;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v129 + 24) + 40))(*(_QWORD *)(v129 + 24), v155);
          v13 = v123;
          v59 = v127;
          v86 = v155[0];
          v155[0] = 0;
          if (v86)
          {
            v87 = (std::__shared_weak_count *)*((_QWORD *)v86 + 4);
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            v90 = (std::__shared_weak_count *)*((_QWORD *)v86 + 2);
            if (v90)
            {
              v91 = (unint64_t *)&v90->__shared_owners_;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            MEMORY[0x212BC6398](v86, 0x10F0C40B62ED6C6);
            v93 = v159;
            v159 = 0;
            if (v93)
            {
              v94 = (std::__shared_weak_count *)v93[4];
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v97 = (std::__shared_weak_count *)v93[2];
              if (v97)
              {
                v98 = (unint64_t *)&v97->__shared_owners_;
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              MEMORY[0x212BC6398](v93, 0x10F0C40B62ED6C6);
            }
          }
          v100 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v101 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          v103 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v104 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          goto LABEL_167;
        }
      }
      memcpy(v58, v50, v57);
      goto LABEL_108;
    }
    os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG);
    v59 = v127;
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v50;
    v60 = (void *)_os_log_send_and_compose_impl();
    v13 = v123;
    if (v60)
      free(v60);
LABEL_167:
    if (v59)
    {
      v106 = (const char *)__dst;
      if (v140 < 0)
        v106 = (const char *)__dst[0];
      sub_20E8C003C((uint64_t)&v130, "%s", v106);
      sub_20E863570((uint64_t)&v130);
    }
    sub_20E863570((uint64_t)&v130);
    v107 = v138;
    if (v138)
    {
      v108 = (unint64_t *)&v138->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
        if ((SHIBYTE(v140) & 0x80000000) == 0)
          goto LABEL_177;
LABEL_176:
        operator delete(__dst[0]);
        goto LABEL_177;
      }
    }
    if (SHIBYTE(v140) < 0)
      goto LABEL_176;
LABEL_177:
    *(_QWORD *)__p = v122;
    *(_QWORD *)&__p[*(_QWORD *)(v122 - 24)] = v121;
    *(_QWORD *)&__p[16] = v120;
    *(_QWORD *)&__p[24] = v119;
    if (SHIBYTE(v148) < 0)
      operator delete(*((void **)&v147 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v150);
LABEL_26:
    v12 += 472;
  }
  while (v12 != v13);
  v12 = v142;
  if (v142)
  {
LABEL_188:
    v143 = v12;
    operator delete((void *)v12);
  }
LABEL_189:
  if (v14 == v13)
  {
    v110 = sub_210219C18();
    v111 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v111 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (atomic_load(&qword_254A5A450))
    {
      *(_WORD *)__p = 0;
      v113 = (char *)_os_log_send_and_compose_impl();
      v114 = strlen(v113);
      *(_QWORD *)object = 0;
      pthread_threadid_np(0, (__uint64_t *)object);
      v115 = *(_QWORD *)object;
      timespec_get((timespec *)object, 1);
      sub_210219E20(__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v110 + 1), (__int128 *)(v110 + 5), "MI:AddRelocalizationInfo Failed", 0x1FuLL, v113, v114, v115, object);
      std::mutex::lock(&stru_254A5A410);
      v116 = qword_254A5A458;
      for (i = unk_254A5A460; v116 != i; v116 += 40)
      {
        v118 = *(_QWORD *)(v116 + 32);
        if (!v118)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v118 + 48))(v118, __p);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (SHIBYTE(v150[0]) < 0)
      {
        operator delete(*((void **)&v149 + 1));
        if (SBYTE7(v149) < 0)
          goto LABEL_202;
LABEL_197:
        if (BYTE8(v147))
        {
LABEL_203:
          if (SBYTE7(v147) < 0)
            operator delete((void *)v146);
        }
      }
      else
      {
        if ((SBYTE7(v149) & 0x80000000) == 0)
          goto LABEL_197;
LABEL_202:
        operator delete((void *)v148);
        if (BYTE8(v147))
          goto LABEL_203;
      }
      if (BYTE8(v145) && SBYTE7(v145) < 0)
        operator delete(*(void **)&__p[32]);
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      if (v113)
        free(v113);
    }
    if (os_signpost_enabled((os_log_t)*v110))
    {
      *(_WORD *)__p = 0;
      _os_signpost_emit_unreliably_with_name_impl();
    }
  }
}

void sub_20F2FD5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;

  if (LOBYTE(STACK[0x398]) && SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a45);
  if (a59 < 0)
    operator delete(a54);
  sub_20E863784((uint64_t)&a64);
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F2FD7F8(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 480))
  {
    v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(_QWORD *)(a1 + 176) = v2;
      operator delete(v2);
    }
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20F2FD840(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 2321))
  {
    *(_BYTE *)a3 = 0;
    *(_WORD *)(a3 + 16) = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 2312);
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(_DWORD *)(v6 + 2708);
    if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
      v7 = *(_DWORD *)(v6 + 968);
    *(_QWORD *)&v16 = v5;
    *((_QWORD *)&v16 + 1) = v7;
    LOBYTE(v17) = 1;
    sub_20F327784(v6, a2, &v16, a3);
    if (*(_BYTE *)(a3 + 17))
    {
      v8 = *(_QWORD **)(a1 + 72);
      if (v8)
      {
        if (*(_QWORD *)(a1 + 64))
        {
          sub_2102323F4((unsigned __int8 *)a3, &v16);
          v9 = operator new(0x28uLL);
          v10 = v17;
          *v9 = v16;
          v9[1] = v10;
          *((_DWORD *)v9 + 8) = v18;
          *((_BYTE *)v9 + 36) = 0;
          v11 = v8[5];
          v12 = v8[6];
          v13 = 170 * ((v12 - v11) >> 3) - 1;
          if (v12 == v11)
            v13 = 0;
          if (v13 == v8[9] + v8[8])
          {
            sub_20F23D70C(v8 + 4);
            v11 = v8[5];
            v12 = v8[6];
          }
          if (v12 == v11)
          {
            v15 = 0;
          }
          else
          {
            v14 = v8[9] + v8[8];
            v15 = (_BYTE *)(*(_QWORD *)(v11 + 8 * (v14 / 0xAA)) + 24 * (v14 % 0xAA));
          }
          sub_20E860C04(v15, v9, 0x24uLL);
          ++v8[9];
          operator delete(v9);
        }
      }
    }
  }
}

void sub_20F2FD9D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2FD9F0()
{
  unint64_t v0;
  uint64_t result;
  int v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD **v62;
  _OWORD **v63;
  _QWORD *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v69;
  const char *v70;
  size_t v71;
  _QWORD *v72;
  unsigned __int8 v73;
  int v74;
  uint64_t v75;
  unsigned __int8 v76;
  const char *v77;
  size_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  const char *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  int v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  _OWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *j;
  uint64_t v132;
  uint64_t k;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  int8x8_t *v140;
  int v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  int8x8_t v145;
  unint64_t v146;
  uint8x8_t v147;
  unint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  char v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  __int128 v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 v181;
  char *v183;
  size_t v184;
  void *v185;
  uint64_t v186;
  uint64_t i;
  uint64_t v188;
  uint64_t v189;
  _OWORD **v190;
  const char *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  void *__p[2];
  _BYTE v196[28];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  _DWORD v205[76];
  uint64_t v206[5];
  int v207;
  unsigned int v208;
  void *v209[2];
  char v210;
  char v211;
  uint64_t v212;
  _BYTE v213[24];
  _BYTE *v214;
  _BYTE v215[24];
  _BYTE *v216;
  _BYTE v217[24];
  _BYTE *v218;
  _BYTE v219[24];
  _BYTE *v220;
  _BYTE object[48];
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _BYTE v230[288];
  int v231;
  char v232;
  int v233;
  uint64_t v234;

  result = MEMORY[0x24BDAC7A8]();
  v5 = v4;
  v234 = *MEMORY[0x24BDAC8D0];
  v208 = v4;
  if (*(_BYTE *)(result + 472))
  {
    v6 = result;
    if (*(_BYTE *)(*(_QWORD *)(result + 80) + 2056))
    {
      v7 = (uint64_t *)v3;
      v8 = v2;
      v9 = *(_QWORD *)(v3 + 160);
      result = sub_20F2FF5B8((_QWORD *)result, v9);
      if ((result & 1) == 0)
      {
        v206[1] = v9;
        memset(&v206[2], 0, 24);
        v207 = 733222268;
        kdebug_trace();
        if ((v5 & 8) != 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 931, (uint64_t)"submap_state.Get<mapping_types::SubmapRuntimeState::Flag::kIsLocalized>() == false", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(v6 + 2264))
        {
          bzero((void *)(v6 + 1352), 0x390uLL);
          *(_BYTE *)(v6 + 2264) = 1;
        }
        sub_20FCCAB74((uint64_t)v7, v6 + 1576);
        if (!*(_BYTE *)(v6 + 472))
          sub_20E866B34();
        v10 = *(_QWORD *)(v6 + 80);
        v11 = *(unsigned __int8 *)(v6 + 856);
        v12 = operator new();
        sub_20E9573E4(v12, v7);
        v209[0] = v13;
        v14 = (std::__shared_weak_count *)operator new();
        v14->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE890;
        v14->__shared_weak_owners_ = 0;
        v14[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
        v209[1] = v14;
        v212 = 0;
        v16 = *(_QWORD *)(v6 + 888);
        if (v16)
        {
          if (v16 == v6 + 864)
          {
            v220 = v219;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 24))(v16, v219);
LABEL_14:
            v17 = *(_QWORD *)(v6 + 920);
            if (v17)
            {
              if (v17 == v6 + 896)
              {
                v218 = v217;
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 24))(v17, v217);
LABEL_19:
                v18 = *(_QWORD *)(v6 + 952);
                if (v18)
                {
                  if (v18 == v6 + 928)
                  {
                    v216 = v215;
                    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 24))(v18, v215);
LABEL_24:
                    v19 = *(_QWORD *)(v6 + 984);
                    if (v19)
                    {
                      if (v19 == v6 + 960)
                      {
                        v214 = v213;
                        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 24))(v19, v213);
                        goto LABEL_29;
                      }
                      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
                    }
                    v214 = (_BYTE *)v19;
LABEL_29:
                    if ((_DWORD)v11)
                      v20 = v6 + 480;
                    else
                      v20 = 0;
                    sub_20F24C274((uint64_t)object, v10, v6 + 96, 1, v20, v11, &v208, v209, *(double *)(v6 + 1264), (uint64_t)v219, (uint64_t)v217, (uint64_t)v215, (uint64_t)v213);
                    v21 = *(_QWORD *)(v6 + 8);
                    if (v21)
                    {
                      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
                      v22.i16[0] = vaddlv_u8(v22);
                      if (v22.u32[0] > 1uLL)
                      {
                        v0 = v9;
                        if (v21 <= v9)
                          v0 = v9 % v21;
                      }
                      else
                      {
                        v0 = (v21 - 1) & v9;
                      }
                      v23 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v0);
                      if (v23)
                      {
                        v24 = (_QWORD *)*v23;
                        if (v24)
                        {
                          if (v22.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v26 = v24[1];
                              if (v26 == v9)
                              {
                                if (v24[2] == v9)
                                  goto LABEL_92;
                              }
                              else if ((v26 & (v21 - 1)) != v0)
                              {
                                goto LABEL_53;
                              }
                              v24 = (_QWORD *)*v24;
                              if (!v24)
                                goto LABEL_53;
                            }
                          }
                          do
                          {
                            v25 = v24[1];
                            if (v25 == v9)
                            {
                              if (v24[2] == v9)
                                goto LABEL_92;
                            }
                            else
                            {
                              if (v25 >= v21)
                                v25 %= v21;
                              if (v25 != v0)
                                break;
                            }
                            v24 = (_QWORD *)*v24;
                          }
                          while (v24);
                        }
                      }
                    }
LABEL_53:
                    v27 = operator new(0x1190uLL);
                    v28 = (_QWORD *)(v6 + 16);
                    __p[0] = v27;
                    __p[1] = (void *)(v6 + 16);
                    *v27 = 0;
                    v27[1] = v9;
                    v27[2] = v9;
                    sub_20F314370((uint64_t)(v27 + 3), (uint64_t)object);
                    v196[0] = 1;
                    v29 = (float)(unint64_t)(*(_QWORD *)(v6 + 24) + 1);
                    v30 = *(float *)(v6 + 32);
                    if (!v21 || (float)(v30 * (float)v21) < v29)
                    {
                      v31 = v21 < 3 || (v21 & (v21 - 1)) != 0;
                      v32 = v31 | (2 * v21);
                      v33 = vcvtps_u32_f32(v29 / v30);
                      if (v32 <= v33)
                        prime = v33;
                      else
                        prime = v32;
                      if (prime == 1)
                      {
                        prime = 2;
                      }
                      else if ((prime & (prime - 1)) != 0)
                      {
                        prime = std::__next_prime(prime);
                      }
                      v35 = *(int8x8_t *)(v6 + 8);
                      if (prime > *(_QWORD *)&v35)
                        goto LABEL_66;
                      if (prime < *(_QWORD *)&v35)
                      {
                        v36 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 24) / *(float *)(v6 + 32));
                        if (*(_QWORD *)&v35 < 3uLL
                          || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
                        {
                          v36 = std::__next_prime(v36);
                        }
                        else
                        {
                          v38 = 1 << -(char)__clz(v36 - 1);
                          if (v36 >= 2)
                            v36 = v38;
                        }
                        if (prime <= v36)
                          prime = v36;
                        if (prime < *(_QWORD *)&v35)
LABEL_66:
                          sub_20E8D2B3C(v6, prime);
                      }
                      v21 = *(_QWORD *)(v6 + 8);
                      if ((v21 & (v21 - 1)) != 0)
                      {
                        if (v21 <= v9)
                          v0 = v9 % v21;
                        else
                          v0 = v9;
                      }
                      else
                      {
                        v0 = (v21 - 1) & v9;
                      }
                    }
                    v39 = *(_QWORD *)v6;
                    v40 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v0);
                    if (v40)
                    {
                      *v27 = *v40;
                    }
                    else
                    {
                      *v27 = *v28;
                      *v28 = v27;
                      *(_QWORD *)(v39 + 8 * v0) = v28;
                      if (!*v27)
                      {
LABEL_91:
                        ++*(_QWORD *)(v6 + 24);
LABEL_92:
                        sub_20F3122B4((uint64_t)object);
                        v42 = v214;
                        if (v214 == v213)
                        {
                          v43 = 4;
                          v42 = v213;
                        }
                        else
                        {
                          if (!v214)
                            goto LABEL_97;
                          v43 = 5;
                        }
                        (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_97:
                        v44 = v216;
                        if (v216 == v215)
                        {
                          v45 = 4;
                          v44 = v215;
                        }
                        else
                        {
                          if (!v216)
                            goto LABEL_102;
                          v45 = 5;
                        }
                        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_102:
                        v46 = v218;
                        if (v218 == v217)
                        {
                          v47 = 4;
                          v46 = v217;
                        }
                        else
                        {
                          if (!v218)
                            goto LABEL_107;
                          v47 = 5;
                        }
                        (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_107:
                        v48 = v220;
                        if (v220 == v219)
                        {
                          v49 = 4;
                          v48 = v219;
                        }
                        else
                        {
                          if (!v220)
                            goto LABEL_112;
                          v49 = 5;
                        }
                        (*(void (**)(void))(*v48 + 8 * v49))();
                        do
LABEL_112:
                          v50 = __ldaxr(p_shared_owners);
                        while (__stlxr(v50 - 1, p_shared_owners));
                        if (!v50)
                        {
                          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                          std::__shared_weak_count::__release_weak(v14);
                        }
                        if (v212)
                        {
                          v51 = sub_20E9545B0(v212);
                          MEMORY[0x212BC6398](v51, 0x10A0C401749CDD1);
                        }
                        v52 = *(int8x8_t *)(v6 + 8);
                        if (v52)
                        {
                          v53 = (uint8x8_t)vcnt_s8(v52);
                          v53.i16[0] = vaddlv_u8(v53);
                          if (v53.u32[0] > 1uLL)
                          {
                            v54 = v9;
                            if (v9 >= *(_QWORD *)&v52)
                              v54 = v9 % *(_QWORD *)&v52;
                          }
                          else
                          {
                            v54 = (*(_QWORD *)&v52 - 1) & v9;
                          }
                          v55 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v54);
                          if (v55)
                          {
                            v56 = (_QWORD *)*v55;
                            if (*v55)
                            {
                              if (v53.u32[0] < 2uLL)
                              {
                                v57 = *(_QWORD *)&v52 - 1;
                                while (1)
                                {
                                  v59 = v56[1];
                                  if (v59 == v9)
                                  {
                                    if (v56[2] == v9)
                                      goto LABEL_139;
                                  }
                                  else if ((v59 & v57) != v54)
                                  {
                                    goto LABEL_137;
                                  }
                                  v56 = (_QWORD *)*v56;
                                  if (!v56)
                                    goto LABEL_137;
                                }
                              }
                              do
                              {
                                v58 = v56[1];
                                if (v58 == v9)
                                {
                                  if (v56[2] == v9)
                                    goto LABEL_139;
                                }
                                else
                                {
                                  if (v58 >= *(_QWORD *)&v52)
                                    v58 %= *(_QWORD *)&v52;
                                  if (v58 != v54)
                                    break;
                                }
                                v56 = (_QWORD *)*v56;
                              }
                              while (v56);
                            }
                          }
                        }
LABEL_137:
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 952, (uint64_t)"external_map_iter != external_submaps_.end()", 44, (uint64_t)"Failed to find the newly added external map", 43, (void (*)(void **))sub_21023DDB0))
                        {
                          abort();
                        }
                        v56 = 0;
LABEL_139:
                        if (!v56[26]
                          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 956, (uint64_t)"external_submap.slam_relocalization()", 37, (uint64_t)"External map info must have a relocalization module", 51, (void (*)(void **))sub_21023DDB0)|| !v56[5]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 957, (uint64_t)"external_submap.data()", 22, (uint64_t)"External map info must have a Map Data", 38, (void (*)(void **))sub_21023DDB0))
                        {
                          abort();
                        }
                        v60 = *(_QWORD *)(v6 + 80);
                        if (!*(_BYTE *)(v60 + 2499))
                          sub_20FCE86E0(**(_QWORD ***)(v56[5] + 424), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v60 + 2816) + 16) + 424));
                        v194 = v6;
                        if (v8)
                        {
                          if (*(_QWORD *)(v6 + 40))
                          {
                            v61 = *(_QWORD *)(v56[5] + 424);
                            v62 = *(_OWORD ***)(v61 + 40);
                            v63 = *(_OWORD ***)(v61 + 48);
                            if (v62 != v63)
                            {
                              v190 = *(_OWORD ***)(v61 + 48);
                              v64 = &object[8];
                              while (1)
                              {
                                if (!*((_BYTE *)*v62 + 736))
                                {
                                  v64[1] = -1;
                                  v64[2] = -1;
                                  *v64 = -1;
                                  object[32] = 0;
                                  BYTE8(v222) = 0;
                                  LOBYTE(v223) = 0;
                                  BYTE4(v223) = 0;
                                  LOBYTE(v225) = 0;
                                  v224 = 0uLL;
                                  *((_QWORD *)&v223 + 1) = 0;
                                  *(_QWORD *)object = *(_QWORD *)(v56[5] + 160);
                                  v74 = *((_DWORD *)*v62 + 4);
                                  *(_OWORD *)v64 = **v62;
                                  *((_DWORD *)v64 + 4) = v74;
                                  v75 = *(_QWORD *)(v6 + 40);
                                  __p[0] = 0;
                                  __p[1] = 0;
                                  *(_QWORD *)v196 = 0;
                                  sub_20F23216C(v75, (uint64_t)object, (uint64_t)__p);
                                  if ((v196[7] & 0x80000000) != 0)
                                    operator delete(__p[0]);
                                  if (*((_QWORD *)&v223 + 1))
                                  {
                                    *(_QWORD *)&v224 = *((_QWORD *)&v223 + 1);
                                    operator delete(*((void **)&v223 + 1));
                                  }
                                  goto LABEL_150;
                                }
                                sub_20F2FC0E0(v206);
                                if (**(int **)(v206[0] + 56) <= 3)
                                {
                                  v65 = *(unsigned __int8 *)(v206[0] + 72);
                                  v66 = sub_20E8C31DC(v206[0], "OSLogSurrogateAppender", 1, 0);
                                  v67 = v66;
                                  if (v65 || v66 != 0)
                                    break;
                                }
LABEL_149:
                                v6 = v194;
LABEL_150:
                                v62 += 2;
                                if (v62 == v63)
                                  goto LABEL_251;
                              }
                              v193 = v65;
                              __p[0] = v206;
                              __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
                              *(std::chrono::system_clock::time_point *)v196 = std::chrono::system_clock::now();
                              *(_DWORD *)&v196[8] = 3;
                              *(_QWORD *)&v196[16] = "unknown file";
                              *(_DWORD *)&v196[24] = 974;
                              *(_QWORD *)&v197 = "unknown function";
                              *((_QWORD *)&v197 + 1) = 0;
                              *(_QWORD *)&v198 = 0;
                              v69 = *(_QWORD *)__p[0];
                              v70 = (const char *)(*(_QWORD *)__p[0] + 16);
                              v191 = v70;
                              if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
                              {
                                v70 = *(const char **)(v69 + 16);
                                v71 = *(_QWORD *)(v69 + 24);
                                v192 = *(_QWORD *)__p[0];
                                v72 = v64;
                                v76 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                if ((v76 & 1) != 0)
                                  goto LABEL_165;
                              }
                              else
                              {
                                v71 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
                                v192 = *(_QWORD *)__p[0];
                                v72 = v64;
                                v73 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                if ((v73 & 1) != 0)
                                  goto LABEL_165;
                              }
                              if (__cxa_guard_acquire(&qword_254A4A510))
                              {
                                sub_20E9E46F8((uint64_t)v209);
                                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v209);
                                if (v211 && v210 < 0)
                                  operator delete(v209[0]);
                                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                __cxa_guard_release(&qword_254A4A510);
                              }
LABEL_165:
                              if (byte_254A4A4F8[23] >= 0)
                                v77 = byte_254A4A4F8;
                              else
                                v77 = *(const char **)byte_254A4A4F8;
                              if (byte_254A4A4F8[23] >= 0)
                                v78 = byte_254A4A4F8[23];
                              else
                                v78 = *(_QWORD *)&byte_254A4A4F8[8];
                              *(_QWORD *)object = os_log_create(v77, v70);
                              if (v78 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              if (v78 >= 0x17)
                              {
                                v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v78 | 7) != 0x17)
                                  v80 = v78 | 7;
                                v81 = v80 + 1;
                                v79 = operator new(v80 + 1);
                                *(_QWORD *)&object[24] = v81 | 0x8000000000000000;
                                *(_QWORD *)&object[8] = v79;
                                *(_QWORD *)&object[16] = v78;
                              }
                              else
                              {
                                object[31] = v78;
                                v79 = v72;
                                if (!v78)
                                {
LABEL_179:
                                  v79[v78] = 0;
                                  object[32] = 1;
                                  if (v71 > 0x7FFFFFFFFFFFFFF7)
                                    sub_20E860B7C();
                                  v64 = v72;
                                  if (v71 >= 0x17)
                                  {
                                    v84 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v71 | 7) != 0x17)
                                      v84 = v71 | 7;
                                    v85 = v84 + 1;
                                    v82 = operator new(v84 + 1);
                                    *((_QWORD *)&v222 + 1) = v85 | 0x8000000000000000;
                                    *(_QWORD *)&object[40] = v82;
                                    *(_QWORD *)&v222 = v71;
                                  }
                                  else
                                  {
                                    HIBYTE(v222) = v71;
                                    v82 = &object[40];
                                    if (!v71)
                                    {
                                      object[40] = 0;
                                      LOBYTE(v223) = 1;
                                      v83 = *(NSObject **)object;
                                      if ((SHIBYTE(v222) & 0x80000000) == 0)
                                        goto LABEL_183;
                                      goto LABEL_189;
                                    }
                                  }
                                  memmove(v82, v70, v71);
                                  v82[v71] = 0;
                                  LOBYTE(v223) = 1;
                                  v83 = *(NSObject **)object;
                                  if ((SHIBYTE(v222) & 0x80000000) == 0)
                                  {
LABEL_183:
                                    if (!object[32])
                                      goto LABEL_192;
                                    goto LABEL_190;
                                  }
LABEL_189:
                                  operator delete(*(void **)&object[40]);
                                  if (!object[32])
                                  {
LABEL_192:
                                    if (*(_QWORD *)object)
                                      os_release(*(void **)object);
                                    if (v67 && *(_QWORD *)(v67 + 24))
                                    {
                                      v86 = _os_log_pack_size();
                                      v87 = (std::__shared_weak_count_vtbl *)operator new(v86, (std::align_val_t)8uLL);
                                      v88 = (std::__shared_weak_count *)operator new();
                                      v89 = v88;
                                      v88->__shared_owners_ = 0;
                                      v90 = (unint64_t *)&v88->__shared_owners_;
                                      v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                      v88->__shared_weak_owners_ = 0;
                                      v88[1].__vftable = v87;
                                      *(_QWORD *)object = v87;
                                      *(_QWORD *)&object[8] = v87;
                                      *(_QWORD *)&object[16] = v88;
                                      do
                                        v91 = __ldxr(v90);
                                      while (__stxr(v91 + 1, v90));
                                      memset(&object[24], 0, 24);
                                      v63 = v190;
                                      do
                                        v92 = __ldaxr(v90);
                                      while (__stlxr(v92 - 1, v90));
                                      if (!v92)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                                        std::__shared_weak_count::__release_weak(v89);
                                      }
                                      v93 = *(_QWORD *)object;
                                      *(_WORD *)_os_log_pack_fill() = 0;
                                      v94 = (char *)operator new();
                                      v95 = *(unsigned __int8 *)(v192 + 39);
                                      v96 = v191;
                                      if ((v95 & 0x80u) != 0)
                                      {
                                        v96 = *(const char **)(v192 + 16);
                                        v95 = *(_QWORD *)(v192 + 24);
                                      }
                                      *(_QWORD *)v94 = v93;
                                      *(_OWORD *)(v94 + 8) = *(_OWORD *)&object[8];
                                      *v72 = 0;
                                      v72[1] = 0;
                                      *(_OWORD *)(v94 + 24) = *(_OWORD *)&object[24];
                                      *(_QWORD *)&object[24] = 0;
                                      *(_QWORD *)&object[32] = 0;
                                      *((_QWORD *)v94 + 5) = v96;
                                      *((_QWORD *)v94 + 6) = v95;
                                      v94[56] = 1;
                                      v212 = 0;
                                      v209[0] = v94;
                                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v67 + 24) + 40))(*(_QWORD *)(v67 + 24), v209);
                                      v97 = v209[0];
                                      v209[0] = 0;
                                      if (v97)
                                      {
                                        v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
                                        if (v98)
                                        {
                                          v99 = (unint64_t *)&v98->__shared_owners_;
                                          do
                                            v100 = __ldaxr(v99);
                                          while (__stlxr(v100 - 1, v99));
                                          if (!v100)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                                            std::__shared_weak_count::__release_weak(v98);
                                          }
                                        }
                                        v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
                                        if (v101)
                                        {
                                          v102 = (unint64_t *)&v101->__shared_owners_;
                                          do
                                            v103 = __ldaxr(v102);
                                          while (__stlxr(v103 - 1, v102));
                                          if (!v103)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                                            std::__shared_weak_count::__release_weak(v101);
                                          }
                                        }
                                        MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
                                        v104 = v212;
                                        v212 = 0;
                                        if (v104)
                                        {
                                          v105 = *(std::__shared_weak_count **)(v104 + 32);
                                          if (v105)
                                          {
                                            v106 = (unint64_t *)&v105->__shared_owners_;
                                            do
                                              v107 = __ldaxr(v106);
                                            while (__stlxr(v107 - 1, v106));
                                            if (!v107)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                                              std::__shared_weak_count::__release_weak(v105);
                                            }
                                          }
                                          v108 = *(std::__shared_weak_count **)(v104 + 16);
                                          if (v108)
                                          {
                                            v109 = (unint64_t *)&v108->__shared_owners_;
                                            do
                                              v110 = __ldaxr(v109);
                                            while (__stlxr(v110 - 1, v109));
                                            if (!v110)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                                              std::__shared_weak_count::__release_weak(v108);
                                            }
                                          }
                                          MEMORY[0x212BC6398](v104, 0x10F0C40B62ED6C6);
                                        }
                                      }
                                      v111 = *(std::__shared_weak_count **)&object[32];
                                      v112 = v193;
                                      if (*(_QWORD *)&object[32])
                                      {
                                        v113 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                        do
                                          v114 = __ldaxr(v113);
                                        while (__stlxr(v114 - 1, v113));
                                        if (!v114)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                                          std::__shared_weak_count::__release_weak(v111);
                                        }
                                      }
                                      v115 = *(std::__shared_weak_count **)&object[16];
                                      if (*(_QWORD *)&object[16])
                                      {
                                        v116 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                        do
                                          v117 = __ldaxr(v116);
                                        while (__stlxr(v117 - 1, v116));
                                        if (!v117)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                                          std::__shared_weak_count::__release_weak(v115);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      os_log_type_enabled(v83, OS_LOG_TYPE_INFO);
                                      v63 = v190;
                                      *(_WORD *)object = 0;
                                      v118 = (void *)_os_log_send_and_compose_impl();
                                      v112 = v193;
                                      if (v118)
                                        free(v118);
                                    }
                                    if (v112)
                                    {
                                      sub_20E8C003C((uint64_t)__p, "Received a weak-keyframe, which should not be shared with others");
                                      sub_20E863570((uint64_t)__p);
                                    }
                                    sub_20E863570((uint64_t)__p);
                                    v119 = (std::__shared_weak_count *)v198;
                                    if ((_QWORD)v198)
                                    {
                                      v120 = (unint64_t *)(v198 + 8);
                                      do
                                        v121 = __ldaxr(v120);
                                      while (__stlxr(v121 - 1, v120));
                                      if (!v121)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                                        std::__shared_weak_count::__release_weak(v119);
                                      }
                                    }
                                    goto LABEL_149;
                                  }
LABEL_190:
                                  if ((object[31] & 0x80000000) != 0)
                                    operator delete(*(void **)&object[8]);
                                  goto LABEL_192;
                                }
                              }
                              memmove(v79, v77, v78);
                              goto LABEL_179;
                            }
                          }
                        }
LABEL_251:
                        if (!*(_QWORD *)(v6 + 56))
                        {
LABEL_351:
                          if (*(_BYTE *)(v6 + 1257))
                          {
LABEL_377:
                            *(_WORD *)(v6 + 1344) = 257;
                            return kdebug_trace();
                          }
                          if (!*(_BYTE *)(v6 + 1208))
                          {
LABEL_376:
                            *(_BYTE *)(v6 + 1257) = 1;
                            goto LABEL_377;
                          }
                          v177 = sub_210219C18();
                          v178 = *(_QWORD *)(v6 + 1216);
                          v179 = *(_QWORD *)(v6 + 1224);
                          v180 = *(_QWORD *)(v6 + 1232);
                          v181 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                          if ((v181 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                          {
                            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A6DDD0);
                          }
                          if (!atomic_load(&qword_254A5A450))
                          {
LABEL_373:
                            if (os_signpost_enabled((os_log_t)*v177))
                            {
                              *(_DWORD *)object = 134218496;
                              *(_QWORD *)&object[4] = v178;
                              *(_WORD *)&object[12] = 2048;
                              *(_QWORD *)&object[14] = v179;
                              *(_WORD *)&object[22] = 2048;
                              *(_QWORD *)&object[24] = v180;
                              _os_signpost_emit_unreliably_with_name_impl();
                            }
                            v189 = *(_QWORD *)(v6 + 1232);
                            *(_QWORD *)(v6 + 1224) = v189;
                            *(_QWORD *)(v6 + 1216) = v189;
                            *(_BYTE *)(v6 + 1208) = 1;
                            goto LABEL_376;
                          }
                          *(_DWORD *)object = 134218496;
                          *(_QWORD *)&object[4] = v178;
                          *(_WORD *)&object[12] = 2048;
                          *(_QWORD *)&object[14] = v179;
                          *(_WORD *)&object[22] = 2048;
                          *(_QWORD *)&object[24] = v180;
                          v183 = (char *)_os_log_send_and_compose_impl();
                          v184 = strlen(v183);
                          __p[0] = 0;
                          pthread_threadid_np(0, (__uint64_t *)__p);
                          v185 = __p[0];
                          timespec_get((timespec *)__p, 1);
                          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v177 + 1), (__int128 *)(v177 + 5), "TTFL:ReinitializedTimer i:%f, s:%f, l:%f", 0x28uLL, v183, v184, (uint64_t)v185, __p);
                          std::mutex::lock(&stru_254A5A410);
                          v186 = qword_254A5A458;
                          for (i = unk_254A5A460; v186 != i; v186 += 40)
                          {
                            v188 = *(_QWORD *)(v186 + 32);
                            if (!v188)
                              sub_20E86D37C();
                            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v188 + 48))(v188, object);
                          }
                          std::mutex::unlock(&stru_254A5A410);
                          if (SHIBYTE(v227) < 0)
                          {
                            operator delete(*((void **)&v226 + 1));
                            if ((SBYTE7(v226) & 0x80000000) == 0)
                            {
LABEL_360:
                              if (!BYTE8(v224))
                              {
LABEL_366:
                                if (BYTE8(v222) && SBYTE7(v222) < 0)
                                  operator delete(*(void **)&object[32]);
                                if ((object[31] & 0x80000000) != 0)
                                  operator delete(*(void **)&object[8]);
                                if (v183)
                                  free(v183);
                                goto LABEL_373;
                              }
LABEL_364:
                              if (SBYTE7(v224) < 0)
                                operator delete((void *)v223);
                              goto LABEL_366;
                            }
                          }
                          else if ((SBYTE7(v226) & 0x80000000) == 0)
                          {
                            goto LABEL_360;
                          }
                          operator delete((void *)v225);
                          if (!BYTE8(v224))
                            goto LABEL_366;
                          goto LABEL_364;
                        }
                        v122 = *(_QWORD *)(v6 + 80);
                        if (!*(_BYTE *)(v122 + 2499))
                          goto LABEL_261;
                        if (!*(_BYTE *)(v122 + 2749) || (v208 & 0x20) != 0)
                        {
                          v123 = v56[5];
                          v124 = *(_OWORD **)(v123 + 208);
                          v125 = *(_OWORD **)(v123 + 216);
                          if (v124 != v125)
                          {
                            do
                            {
                              v126 = *(_QWORD *)(v194 + 56);
                              *(_OWORD *)__p = *v124;
                              *(_OWORD *)v196 = v124[1];
                              *(_OWORD *)&v196[12] = *(_OWORD *)((char *)v124 + 28);
                              v201 = v124[7];
                              v202 = v124[8];
                              v203 = v124[9];
                              v204 = v124[10];
                              v197 = v124[3];
                              v198 = v124[4];
                              v199 = v124[5];
                              v200 = v124[6];
                              memcpy(v205, v124 + 11, 0x125uLL);
                              *(_OWORD *)object = *(_OWORD *)__p;
                              *(_OWORD *)&object[16] = *(_OWORD *)v196;
                              *(_OWORD *)&object[28] = *(_OWORD *)&v196[12];
                              v226 = v201;
                              v227 = v202;
                              v228 = v203;
                              v229 = v204;
                              v222 = v197;
                              v223 = v198;
                              v224 = v199;
                              v225 = v200;
                              memcpy(v230, v205, sizeof(v230));
                              v231 = v205[72];
                              v232 = v205[73];
                              v233 = 2;
                              v212 = v126;
                              v209[0] = &v212;
                              sub_20F22D258((uint64_t **)v209, (uint64_t)object);
                              if (v233 != -1)
                                ((void (*)(void **, _BYTE *))off_24C9FD788[v233])(v209, object);
                              v124 = (_OWORD *)((char *)v124 + 472);
                            }
                            while (v124 != v125);
                            v6 = v194;
                            if (!*(_BYTE *)(*(_QWORD *)(v194 + 80) + 2499))
                            {
LABEL_261:
                              v127 = (_QWORD *)v56[5];
                              v127[27] = v127[26];
                              v128 = v56[45];
                              if (v128)
                              {
                                v129 = v127[53];
                                if (v129)
                                {
                                  if (*(_QWORD *)(*(_QWORD *)v129 + 64))
                                  {
                                    *(_QWORD *)object = v127[20];
                                    LOBYTE(__p[0]) = 0;
                                    (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v128 + 48))(v128, object, __p);
                                  }
                                }
                              }
                            }
                          }
                        }
                        v130 = v56[5];
                        memset(object, 0, 24);
                        sub_20E9099B8((uint64_t)object, *(_QWORD *)(v130 + 24));
                        for (j = *(uint64_t **)(v130 + 16); j; v6 = v194)
                        {
                          v140 = *(int8x8_t **)(v6 + 56);
                          v141 = *((char *)j + 39);
                          if (v141 >= 0)
                            v142 = j + 2;
                          else
                            v142 = (uint64_t *)j[2];
                          if (v141 >= 0)
                            v143 = *((unsigned __int8 *)j + 39);
                          else
                            v143 = j[3];
                          v144 = sub_20E8D177C((uint64_t)__p, v142, v143);
                          v145 = v140[58];
                          if (v145)
                          {
                            v146 = v144;
                            v147 = (uint8x8_t)vcnt_s8(v145);
                            v147.i16[0] = vaddlv_u8(v147);
                            if (v147.u32[0] > 1uLL)
                            {
                              v148 = v144;
                              if (v144 >= *(_QWORD *)&v145)
                                v148 = v144 % *(_QWORD *)&v145;
                            }
                            else
                            {
                              v148 = (*(_QWORD *)&v145 - 1) & v144;
                            }
                            v149 = *(uint64_t ***)(*(_QWORD *)&v140[57] + 8 * v148);
                            if (v149)
                            {
                              v150 = *v149;
                              if (*v149)
                              {
                                v151 = *((_BYTE *)j + 39);
                                if (v151 >= 0)
                                  v152 = *((unsigned __int8 *)j + 39);
                                else
                                  v152 = j[3];
                                if (v151 >= 0)
                                  v153 = (unsigned __int8 *)(j + 2);
                                else
                                  v153 = (unsigned __int8 *)j[2];
                                if (v147.u32[0] < 2uLL)
                                {
                                  v154 = *(_QWORD *)&v145 - 1;
                                  while (1)
                                  {
                                    v159 = v150[1];
                                    if (v146 == v159)
                                    {
                                      v160 = *((unsigned __int8 *)v150 + 39);
                                      if ((v160 & 0x80u) == 0)
                                        v161 = *((unsigned __int8 *)v150 + 39);
                                      else
                                        v161 = v150[3];
                                      if (v161 == v152)
                                      {
                                        if ((v160 & 0x80) != 0)
                                        {
                                          if (!memcmp((const void *)v150[2], v153, v150[3]))
                                            goto LABEL_328;
                                        }
                                        else
                                        {
                                          if (!*((_BYTE *)v150 + 39))
                                            goto LABEL_328;
                                          v162 = 0;
                                          while (*((unsigned __int8 *)v150 + v162 + 16) == v153[v162])
                                          {
                                            if (v160 == ++v162)
                                              goto LABEL_327;
                                          }
                                        }
                                      }
                                    }
                                    else if ((v159 & v154) != v148)
                                    {
                                      goto LABEL_273;
                                    }
                                    v150 = (uint64_t *)*v150;
                                    if (!v150)
                                      goto LABEL_273;
                                  }
                                }
                                do
                                {
                                  v155 = v150[1];
                                  if (v146 == v155)
                                  {
                                    v156 = *((unsigned __int8 *)v150 + 39);
                                    if ((v156 & 0x80u) == 0)
                                      v157 = *((unsigned __int8 *)v150 + 39);
                                    else
                                      v157 = v150[3];
                                    if (v157 == v152)
                                    {
                                      if ((v156 & 0x80) != 0)
                                      {
                                        if (!memcmp((const void *)v150[2], v153, v150[3]))
                                        {
LABEL_328:
                                          v163 = *(_OWORD **)&object[8];
                                          if (*(_QWORD *)&object[8] >= *(_QWORD *)&object[16])
                                          {
                                            v139 = sub_20E8A311C((char **)object, (uint64_t)(j + 2));
                                          }
                                          else
                                          {
                                            if (*((char *)j + 39) < 0)
                                            {
                                              sub_20E860C04(*(_BYTE **)&object[8], (void *)j[2], j[3]);
                                            }
                                            else
                                            {
                                              v164 = *((_OWORD *)j + 1);
                                              *(_QWORD *)(*(_QWORD *)&object[8] + 16) = j[4];
                                              *v163 = v164;
                                            }
                                            v139 = (char *)v163 + 24;
                                          }
                                          *(_QWORD *)&object[8] = v139;
                                          break;
                                        }
                                      }
                                      else
                                      {
                                        if (!*((_BYTE *)v150 + 39))
                                          goto LABEL_328;
                                        v158 = 0;
                                        while (*((unsigned __int8 *)v150 + v158 + 16) == v153[v158])
                                        {
                                          if (v156 == ++v158)
                                          {
LABEL_327:
                                            if (!v150)
                                              goto LABEL_273;
                                            goto LABEL_328;
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (v155 >= *(_QWORD *)&v145)
                                      v155 %= *(_QWORD *)&v145;
                                    if (v155 != v148)
                                      break;
                                  }
                                  v150 = (uint64_t *)*v150;
                                }
                                while (v150);
                              }
                            }
                          }
LABEL_273:
                          j = (uint64_t *)*j;
                        }
                        v132 = *(_QWORD *)object;
                        for (k = *(_QWORD *)&object[8]; v132 != k; v132 += 24)
                          sub_20F26170C(v56 + 3, v132);
                        v134 = *(_QWORD **)(v6 + 56);
                        v136 = v134[7];
                        v135 = v134[8];
                        if (v136 != v135)
                        {
                          v137 = v135 - v136 - 480;
                          if (v137 >= 0x1E0)
                          {
                            v165 = v137 / 0x1E0 + 1;
                            v138 = v136 + 480 * (v165 & 0x1FFFFFFFFFFFFFELL);
                            v166 = v165 & 0x1FFFFFFFFFFFFFELL;
                            do
                            {
                              *(_BYTE *)(v136 + 472) = 1;
                              *(_BYTE *)(v136 + 952) = 1;
                              v136 += 960;
                              v166 -= 2;
                            }
                            while (v166);
                            if (v165 == (v165 & 0x1FFFFFFFFFFFFFELL))
                              goto LABEL_337;
                          }
                          else
                          {
                            v138 = v134[7];
                          }
                          do
                          {
                            *(_BYTE *)(v138 + 472) = 1;
                            v138 += 480;
                          }
                          while (v138 != v135);
                        }
LABEL_337:
                        v168 = v134[22];
                        v167 = v134[23];
                        if (v168 != v167)
                        {
                          v169 = v167 - v168 - 112;
                          v170 = v168;
                          if (v169 < 0x70)
                            goto LABEL_390;
                          v171 = (((v169 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
                          v170 = v168 + 112 * (v171 & 0x7FFFFFFFFFFFFFELL);
                          v172 = (_BYTE *)(v168 + 216);
                          v173 = v171 & 0x7FFFFFFFFFFFFFELL;
                          do
                          {
                            *(v172 - 112) = 1;
                            *v172 = 1;
                            v172 += 224;
                            v173 -= 2;
                          }
                          while (v173);
                          if (v171 != (v171 & 0x7FFFFFFFFFFFFFELL))
                          {
LABEL_390:
                            do
                            {
                              *(_BYTE *)(v170 + 104) = 1;
                              v170 += 112;
                            }
                            while (v170 != v167);
                          }
                        }
                        v174 = *(_QWORD *)object;
                        if (*(_QWORD *)object)
                        {
                          v175 = *(_QWORD *)&object[8];
                          v176 = *(void **)object;
                          if (*(_QWORD *)&object[8] != *(_QWORD *)object)
                          {
                            do
                            {
                              if (*(char *)(v175 - 1) < 0)
                                operator delete(*(void **)(v175 - 24));
                              v175 -= 24;
                            }
                            while (v175 != v174);
                            v176 = *(void **)object;
                          }
                          *(_QWORD *)&object[8] = v174;
                          operator delete(v176);
                        }
                        goto LABEL_351;
                      }
                      v41 = *(_QWORD *)(*v27 + 8);
                      if ((v21 & (v21 - 1)) != 0)
                      {
                        if (v41 >= v21)
                          v41 %= v21;
                      }
                      else
                      {
                        v41 &= v21 - 1;
                      }
                      v40 = (_QWORD *)(*(_QWORD *)v6 + 8 * v41);
                    }
                    *v40 = v27;
                    goto LABEL_91;
                  }
                  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
                }
                v216 = (_BYTE *)v18;
                goto LABEL_24;
              }
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
            }
            v218 = (_BYTE *)v17;
            goto LABEL_19;
          }
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        }
        v220 = (_BYTE *)v16;
        goto LABEL_14;
      }
    }
  }
  return result;
}

void sub_20F2FF2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  if (LOBYTE(STACK[0x2A0]))
  {
    if (SLOBYTE(STACK[0x29F]) < 0)
      operator delete((void *)STACK[0x288]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  sub_20E8E69C4((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2FF5B8(_QWORD *a1, unint64_t a2)
{
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  unint64_t v18;
  unint64_t v20;
  size_t v21;
  const char *v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  unint64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  int v76;
  const char *v77;
  int v78;
  const char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE object[24];
  __int128 v86;
  void *__p[2];
  unint64_t v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v4 = (int8x8_t)a1[1];
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (*(_QWORD *)&v4 <= a2)
        v6 = a2 % *(_QWORD *)&v4;
    }
    else
    {
      v6 = (*(_QWORD *)&v4 - 1) & a2;
    }
    v7 = *(_QWORD **)(*a1 + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == a2)
            {
              if (v8[2] == a2)
                goto LABEL_29;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_21;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_21;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == a2)
          {
            if (v8[2] == a2)
              goto LABEL_29;
          }
          else
          {
            if (v10 >= *(_QWORD *)&v4)
              v10 %= *(_QWORD *)&v4;
            if (v10 != v6)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_21:
  v12 = a1[10];
  v13 = *(_QWORD *)(v12 + 2824);
  v14 = *(_QWORD *)(v12 + 2832);
  if (v13 != v14)
  {
    while (1)
    {
      v15 = *(_QWORD *)(v13 + 16);
      if (v15)
      {
        if (*(_QWORD *)(v15 + 160) == a2)
          break;
      }
      v13 += 4472;
      if (v13 == v14)
        return 0;
    }
  }
  result = 0;
  if (v13 != v14 && v13)
  {
    if (*(_BYTE *)(v12 + 2499))
    {
LABEL_29:
      sub_20F2FC0E0(&v82);
      if (**(int **)(v82 + 56) > 3)
        return 1;
      v17 = *(unsigned __int8 *)(v82 + 72);
      v18 = sub_20E8C31DC(v82, "OSLogSurrogateAppender", 1, 0);
      if (!v17 && v18 == 0)
        return 1;
      v20 = v18;
      v75[0] = &v82;
      v75[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v75[2] = std::chrono::system_clock::now().__d_.__rep_;
      v76 = 3;
      v77 = "unknown file";
      v78 = 2228;
      v80 = 0;
      v81 = 0;
      v79 = "unknown function";
      v73 = v82;
      if (*(char *)(v82 + 39) < 0)
      {
        v22 = *(const char **)(v82 + 16);
        v21 = *(_QWORD *)(v82 + 24);
      }
      else
      {
        v21 = *(unsigned __int8 *)(v82 + 39);
        v22 = (const char *)(v82 + 16);
      }
      v72 = v82 + 16;
      v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[10] + 2816) + 16) + 160);
      v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v86 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v24 = byte_254A4A4F8;
      else
        v24 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v25 = byte_254A4A4F8[23];
      else
        v25 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v24, v22);
      v26 = &object[8];
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v25 >= 0x17)
      {
        v27 = v20;
        v28 = v22;
        v29 = v17;
        v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v30 = v25 | 7;
        v31 = v30 + 1;
        v26 = operator new(v30 + 1);
        *(_QWORD *)&object[16] = v25;
        *(_QWORD *)&v86 = v31 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v26;
        v17 = v29;
        v22 = v28;
        v20 = v27;
      }
      else
      {
        BYTE7(v86) = v25;
        if (!v25)
        {
LABEL_54:
          v26[v25] = 0;
          BYTE8(v86) = 1;
          v32 = __p;
          if (v21 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v21 >= 0x17)
          {
            v33 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v33 = v21 | 7;
            v34 = v33 + 1;
            v32 = operator new(v33 + 1);
            __p[1] = (void *)v21;
            v88 = v34 | 0x8000000000000000;
            __p[0] = v32;
          }
          else
          {
            HIBYTE(v88) = v21;
            if (!v21)
              goto LABEL_62;
          }
          memmove(v32, v22, v21);
LABEL_62:
          *((_BYTE *)v32 + v21) = 0;
          v89 = 1;
          v35 = *(NSObject **)object;
          if (SHIBYTE(v88) < 0)
            operator delete(__p[0]);
          if (BYTE8(v86) && SBYTE7(v86) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v20 && *(_QWORD *)(v20 + 24))
          {
            v36 = _os_log_pack_size();
            v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
            v38 = (std::__shared_weak_count *)operator new();
            v39 = v38;
            v38->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v38->__shared_weak_owners_ = 0;
            v38[1].__vftable = v37;
            *(_QWORD *)object = v37;
            *(_QWORD *)&object[8] = v37;
            *(_QWORD *)&object[16] = v38;
            do
              v41 = __ldxr(p_shared_owners);
            while (__stxr(v41 + 1, p_shared_owners));
            v86 = 0uLL;
            __p[0] = 0;
            do
              v42 = __ldaxr(p_shared_owners);
            while (__stlxr(v42 - 1, p_shared_owners));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
            v43 = *(_QWORD *)object;
            v44 = _os_log_pack_fill();
            *(_DWORD *)v44 = 134218240;
            *(_QWORD *)(v44 + 4) = a2;
            *(_WORD *)(v44 + 12) = 2048;
            *(_QWORD *)(v44 + 14) = v74;
            v45 = operator new();
            v46 = *(unsigned __int8 *)(v73 + 39);
            v47 = v72;
            if ((v46 & 0x80u) != 0)
            {
              v47 = *(_QWORD *)(v73 + 16);
              v46 = *(_QWORD *)(v73 + 24);
            }
            *(_QWORD *)v45 = v43;
            *(_OWORD *)(v45 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v45 + 24) = v86;
            v86 = 0uLL;
            *(_QWORD *)(v45 + 40) = v47;
            *(_QWORD *)(v45 + 48) = v46;
            *(_BYTE *)(v45 + 56) = 1;
            v83 = 0;
            v84 = v45;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), &v84);
            v48 = v84;
            v84 = 0;
            if (v48)
            {
              v49 = *(std::__shared_weak_count **)(v48 + 32);
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = *(std::__shared_weak_count **)(v48 + 16);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
              v55 = v83;
              v83 = 0;
              if (v55)
              {
                v56 = *(std::__shared_weak_count **)(v55 + 32);
                if (v56)
                {
                  v57 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v59 = *(std::__shared_weak_count **)(v55 + 16);
                if (v59)
                {
                  v60 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                MEMORY[0x212BC6398](v55, 0x10F0C40B62ED6C6);
              }
            }
            v62 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
            if (*((_QWORD *)&v86 + 1))
            {
              v63 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v65 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v66 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
          }
          else
          {
            os_log_type_enabled(v35, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134218240;
            *(_QWORD *)&object[4] = a2;
            *(_WORD *)&object[12] = 2048;
            *(_QWORD *)&object[14] = v74;
            v68 = (void *)_os_log_send_and_compose_impl();
            if (v68)
              free(v68);
          }
          if (v17)
          {
            sub_20E8C003C((uint64_t)v75, "Duplicated user %llu for session %llu", a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[10] + 2816) + 16) + 160));
            sub_20E863570((uint64_t)v75);
          }
          sub_20E863570((uint64_t)v75);
          v69 = v81;
          if (v81)
          {
            v70 = (unint64_t *)&v81->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          return 1;
        }
      }
      memmove(v26, v24, v25);
      goto LABEL_54;
    }
    return 0;
  }
  return result;
}

void sub_20F2FFE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F2FFE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86E8C4(&a26);
  sub_20E86E8C4(&a25);
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F2FFEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F2FFEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v7, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2FFEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2FFF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F2FFF80(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  char *v3;
  char *v4;
  int64x2_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char *v13;
  int64x2_t v14;
  char *v15;
  _QWORD *v16;
  int64x2_t *v17;

  v1 = *(_QWORD **)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v14 = 0uLL;
  v15 = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v2);
    v4 = &v3[8 * v2];
    v14.i64[0] = (uint64_t)v3;
    v14.i64[1] = (uint64_t)v3;
    v15 = v4;
    v17 = &v14;
    if (v1)
      goto LABEL_4;
LABEL_7:
    v5 = vdupq_n_s64((unint64_t)v3);
    goto LABEL_8;
  }
  v4 = 0;
  v3 = 0;
  v17 = &v14;
  if (!v1)
    goto LABEL_7;
  do
  {
LABEL_4:
    v16 = v1 + 3;
    sub_20EA61104((void ***)&v17, &v16);
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  v5 = v14;
  v4 = v15;
LABEL_8:
  *(int64x2_t *)__p = v5;
  v13 = v4;
  sub_20F384E04((void ***)__p, &v14);
  v7 = (_QWORD *)v14.i64[1];
  v6 = (_QWORD *)v14.i64[0];
  if (v14.i64[0] == v14.i64[1])
  {
    if (!v14.i64[0])
      goto LABEL_11;
    goto LABEL_10;
  }
  do
  {
    v8 = (uint64_t *)__p[0];
    v9 = (uint64_t *)__p[0];
    if (__p[0] != __p[1])
    {
      v9 = (uint64_t *)__p[0];
      while (*(_QWORD *)(*(_QWORD *)(*v9 + 16) + 160) != *v6)
      {
        if (++v9 == __p[1])
          goto LABEL_23;
      }
    }
    if (v9 == __p[1])
    {
LABEL_23:
      v10 = 0;
      if (__p[0] != __p[1])
      {
LABEL_24:
        while (*(_QWORD *)(*(_QWORD *)(*v8 + 16) + 160) != v6[2])
        {
          if (++v8 == __p[1])
            goto LABEL_14;
        }
      }
    }
    else
    {
      v10 = *v9;
      if (__p[0] != __p[1])
        goto LABEL_24;
    }
    if (v8 != __p[1])
    {
      if (v10)
      {
        v11 = *v8;
        if (*v8)
        {
          sub_20F261B00(v10, (uint64_t)(v6 + 2), (uint64_t)v6);
          sub_20F261B00(v11, (uint64_t)v6, (uint64_t)(v6 + 2));
        }
      }
    }
LABEL_14:
    v6 += 4;
  }
  while (v6 != v7);
  v6 = (_QWORD *)v14.i64[0];
  if (v14.i64[0])
  {
LABEL_10:
    v14.i64[1] = (uint64_t)v6;
    operator delete(v6);
  }
LABEL_11:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20F300144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F300190(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x24BDAC8D0];
  if (!a2[3])
    return;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)v6 = &off_24C9FBF00;
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = a3;
  v7 = a1[8];
  a1[8] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[8];
  }
  v8 = (_QWORD *)a2[3];
  if (!v8)
  {
    v22 = 0;
    v9 = (_QWORD *)(v6 + 200);
    goto LABEL_12;
  }
  if (v8 == a2)
  {
    v22 = v21;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v21);
    v8 = v22;
    v9 = (_QWORD *)(v6 + 200);
    if (v22)
      goto LABEL_10;
LABEL_12:
    v24 = v8;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  v22 = v8;
  v9 = (_QWORD *)(v6 + 200);
  if (!v8)
    goto LABEL_12;
LABEL_10:
  if (v8 != v21)
  {
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    goto LABEL_12;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _QWORD *))(v21[0] + 24))(v21, v23);
LABEL_13:
  if (v9 == v23)
    goto LABEL_23;
  v10 = v24;
  v11 = (_QWORD *)v9[3];
  if (v24 == v23)
  {
    if (v11 != v9)
    {
      (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v9);
      (*(void (**)(_QWORD *))(*v24 + 32))(v24);
      v24 = (_QWORD *)v9[3];
      v9[3] = v9;
      v12 = v24;
      if (v24 == v23)
        goto LABEL_27;
      goto LABEL_24;
    }
    (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v25);
    (*(void (**)(_QWORD *))(*v24 + 32))(v24);
    v24 = 0;
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v9[3] + 24))(v9[3], v23);
    (*(void (**)(_QWORD))(*(_QWORD *)v9[3] + 32))(v9[3]);
    v9[3] = 0;
    v24 = v23;
    (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v9);
    (*(void (**)(_QWORD *))(v25[0] + 32))(v25);
    v9[3] = v9;
    v12 = v24;
    if (v24 != v23)
      goto LABEL_24;
LABEL_27:
    v13 = 4;
    v12 = v23;
    goto LABEL_28;
  }
  if (v11 == v9)
  {
    (*(void (**)(_QWORD *, _QWORD *))(*v9 + 24))(v9, v23);
    (*(void (**)(_QWORD))(*(_QWORD *)v9[3] + 32))(v9[3]);
    v9[3] = v24;
    v24 = v23;
LABEL_23:
    v12 = v24;
    if (v24 != v23)
      goto LABEL_24;
    goto LABEL_27;
  }
  v24 = (_QWORD *)v9[3];
  v9[3] = v10;
  v12 = v24;
  if (v24 == v23)
    goto LABEL_27;
LABEL_24:
  if (!v12)
    goto LABEL_29;
  v13 = 5;
LABEL_28:
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_29:
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_33;
  }
  if (v22)
  {
    v15 = 5;
LABEL_33:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = a1[10];
  if (!v16)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 1659, (uint64_t)"this->map()", 11, (uint64_t)"Mapping manager is not instantiated", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v16 = a1[10];
  }
  v17 = operator new();
  v18 = *(_QWORD *)(v16 + 960);
  *(_OWORD *)v17 = *(_OWORD *)(v16 + 944);
  *(_QWORD *)(v17 + 16) = v18;
  *(_QWORD *)(v17 + 24) = v16;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_DWORD *)(v17 + 160) = 1065353216;
  *(_DWORD *)(v17 + 176) = 0;
  *(_BYTE *)(v17 + 180) = 1;
  *(_OWORD *)(v17 + 184) = 0u;
  *(_OWORD *)(v17 + 200) = 0u;
  *(_DWORD *)(v17 + 216) = 1065353216;
  *(_BYTE *)(v17 + 224) = 0;
  *(_QWORD *)(v17 + 168) = *(_QWORD *)(v17 + 8);
  v19 = (_QWORD *)a1[9];
  a1[9] = v17;
  if (v19)
  {
    v20 = sub_20F312580(v19);
    MEMORY[0x212BC6398](v20, 0x10E0C4071504F1DLL);
  }
  sub_20F2FC2B4(a1);
}

void sub_20F300598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  if (a12 == &a9)
  {
    (*(void (**)(void))(a9 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a12)
  {
    (*(void (**)(void))(*a12 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F300600(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  float v42;
  float v43;
  unint64_t v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  size_t prime;
  int8x8_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int8x8_t v61;
  uint64_t v62;
  __int128 v63;
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _DWORD v73[76];
  void *__p[2];
  _OWORD v75[10];
  _BYTE v76[288];
  int v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t *v81[2];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 2642))
    goto LABEL_46;
  v4 = *a2;
  v5 = a2[1];
  __p[1] = 0;
  __p[0] = 0;
  *(_QWORD *)&v75[0] = 0;
  if (v5 == v4)
  {
    v7 = 0;
    v6 = 0;
    v8 = *(uint64_t **)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    __p[1] = 0;
    __p[0] = 0;
    *(_QWORD *)&v75[0] = 0;
    if (v9)
      goto LABEL_7;
LABEL_12:
    v11 = 0;
    *(_QWORD *)&v63 = __p;
    v10 = 0;
    if (!v8)
      goto LABEL_9;
    goto LABEL_13;
  }
  if ((unint64_t)(0x3175B2258D8284CFLL * ((v5 - v4) >> 3)) >> 62)
    sub_20E867F44();
  __p[0] = operator new(0xC5D6C896360A133CLL * ((v5 - v4) >> 3));
  __p[1] = __p[0];
  *(_QWORD *)&v75[0] = (char *)__p[0] - 0x3A293769C9F5ECC4 * ((v5 - v4) >> 3);
  *(_QWORD *)&v63 = __p;
  do
  {
    LODWORD(v81[0]) = *(_DWORD *)(v4 + 304);
    sub_20EA9AB98((uint64_t *)&v63, v81);
    v4 += 4472;
  }
  while (v4 != v5);
  v6 = __p[0];
  v7 = __p[1];
  v8 = *(uint64_t **)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  __p[1] = 0;
  __p[0] = 0;
  *(_QWORD *)&v75[0] = 0;
  if (!v9)
    goto LABEL_12;
LABEL_7:
  if (v9 >> 62)
    sub_20E867F44();
  v10 = (char *)operator new(4 * v9);
  v11 = v10;
  __p[0] = v10;
  __p[1] = v10;
  *(_QWORD *)&v75[0] = &v10[4 * v9];
  *(_QWORD *)&v63 = __p;
  if (!v8)
  {
LABEL_9:
    if (v6 == v7)
      goto LABEL_21;
    goto LABEL_15;
  }
  do
  {
LABEL_13:
    LODWORD(v81[0]) = *((_DWORD *)v8 + 82);
    sub_20EA9AB98((uint64_t *)&v63, v81);
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  v10 = (char *)__p[0];
  v11 = (char *)__p[1];
  if (v6 == v7)
  {
LABEL_21:
    if (v10 != v11)
    {
      v14 = v10;
      while ((*v14 & 0x10) == 0)
      {
        v14 += 4;
        if (v14 == v11)
        {
          v15 = v10;
          while ((*v15 & 0x80) == 0)
          {
            v15 += 4;
            if (v15 == v11)
              goto LABEL_42;
          }
          break;
        }
      }
      v16 = v10;
      do
      {
        if ((~*(_DWORD *)v16 & 0x110) == 0)
          goto LABEL_42;
        v16 += 4;
      }
      while (v16 != v11);
      v17 = v10;
      do
      {
        if ((~*(_DWORD *)v17 & 0x180) == 0)
          goto LABEL_42;
        v17 += 4;
      }
      while (v17 != v11);
      v19 = *a2;
      v18 = a2[1];
      if (*a2 == v18)
        goto LABEL_42;
      v20 = v18 - v19 - 4472;
      if (v20 >> 3 < 0x22F)
      {
        v21 = *a2;
        do
        {
LABEL_41:
          *(_DWORD *)(v21 + 304) = *(_DWORD *)(v21 + 304) & 0xFFFFFCFF | 0x200;
          v21 += 4472;
        }
        while (v21 != v18);
        goto LABEL_42;
      }
      v22 = v20 / 0x1178 + 1;
      v21 = v19 + 4472 * (v22 & 0x1FFFFFFFFFFFFELL);
      v23 = v22 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v24 = *(_DWORD *)(v19 + 4776) & 0xFFFFFCFF | 0x200;
        *(_DWORD *)(v19 + 304) = *(_DWORD *)(v19 + 304) & 0xFFFFFCFF | 0x200;
        *(_DWORD *)(v19 + 4776) = v24;
        v19 += 8944;
        v23 -= 2;
      }
      while (v23);
      if (v22 != (v22 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_41;
    }
    goto LABEL_42;
  }
LABEL_15:
  v12 = v6;
  while ((*v12 & 0x10) == 0)
  {
    v12 += 4;
    if (v12 == v7)
    {
      v13 = v6;
      while ((*v13 & 0x80) == 0)
      {
        v13 += 4;
        if (v13 == v7)
          goto LABEL_21;
      }
      break;
    }
  }
LABEL_42:
  if (v10)
    operator delete(v10);
  if (v6)
    operator delete(v6);
LABEL_46:
  v25 = *a2;
  v59 = a2[1];
  if (*a2 != v59)
  {
    v58 = a1 + 1576;
    v60 = (_QWORD *)(a1 + 16);
    do
    {
      sub_20F3B4B8C(*(_QWORD *)(v25 + 192));
      v62 = v25;
      v26 = *(_QWORD **)(v25 + 16);
      v27 = (__int128 *)v26[26];
      v28 = (__int128 *)v26[27];
      if (v27 == v28)
      {
        v29 = v62;
        v30 = v26[20];
        *(_DWORD *)(v62 + 304) &= ~8u;
        if (!*(_BYTE *)(a1 + 2264))
          goto LABEL_57;
      }
      else
      {
        do
        {
          v31 = *(_QWORD *)(a1 + 56);
          v63 = *v27;
          v64[0] = v27[1];
          *(_OWORD *)((char *)v64 + 12) = *(__int128 *)((char *)v27 + 28);
          v69 = v27[7];
          v70 = v27[8];
          v71 = v27[9];
          v72 = v27[10];
          v65 = v27[3];
          v66 = v27[4];
          v67 = v27[5];
          v68 = v27[6];
          memcpy(v73, v27 + 11, 0x125uLL);
          *(_OWORD *)__p = v63;
          v75[0] = v64[0];
          *(_OWORD *)((char *)v75 + 12) = *(_OWORD *)((char *)v64 + 12);
          v75[6] = v69;
          v75[7] = v70;
          v75[8] = v71;
          v75[9] = v72;
          v75[2] = v65;
          v75[3] = v66;
          v75[4] = v67;
          v75[5] = v68;
          memcpy(v76, v73, sizeof(v76));
          v77 = v73[72];
          v78 = v73[73];
          v79 = 2;
          v80 = v31;
          v81[0] = &v80;
          sub_20F22D258(v81, (uint64_t)__p);
          if (v79 != -1)
            ((void (*)(uint64_t **, void **))off_24C9FD788[v79])(v81, __p);
          v27 = (__int128 *)((char *)v27 + 472);
        }
        while (v27 != v28);
        v29 = v62;
        v26 = *(_QWORD **)(v62 + 16);
        v30 = v26[20];
        *(_DWORD *)(v62 + 304) &= ~8u;
        if (!*(_BYTE *)(a1 + 2264))
        {
LABEL_57:
          bzero((void *)(a1 + 1352), 0x390uLL);
          *(_BYTE *)(a1 + 2264) = 1;
          sub_20FCCAB74(*(_QWORD *)(v29 + 16), v58);
          v32 = *(_QWORD *)(a1 + 8);
          if (!v32)
            goto LABEL_77;
          goto LABEL_58;
        }
      }
      sub_20FCCAB74((uint64_t)v26, v58);
      v32 = *(_QWORD *)(a1 + 8);
      if (!v32)
        goto LABEL_77;
LABEL_58:
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        v34 = v30;
        if (v32 <= v30)
          v34 = v30 % v32;
      }
      else
      {
        v34 = (v32 - 1) & v30;
      }
      v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
      v61 = (int8x8_t)v34;
      if (v35)
      {
        v36 = (_QWORD *)*v35;
        if (v36)
        {
          if (v33.u32[0] < 2uLL)
          {
            while (1)
            {
              v38 = v36[1];
              if (v38 == v30)
              {
                if (v36[2] == v30)
                  goto LABEL_116;
              }
              else if ((v38 & (v32 - 1)) != v34)
              {
                goto LABEL_77;
              }
              v36 = (_QWORD *)*v36;
              if (!v36)
                goto LABEL_77;
            }
          }
          do
          {
            v37 = v36[1];
            if (v37 == v30)
            {
              if (v36[2] == v30)
                goto LABEL_116;
            }
            else
            {
              if (v37 >= v32)
                v37 %= v32;
              if (v37 != v34)
                break;
            }
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
      }
LABEL_77:
      v39 = operator new(0x1190uLL);
      v40 = v29;
      v41 = v39;
      __p[0] = v39;
      __p[1] = (void *)(a1 + 16);
      *v39 = 0;
      v39[1] = v30;
      v39[2] = v30;
      sub_20F314370((uint64_t)(v39 + 3), v40);
      LOBYTE(v75[0]) = 1;
      v42 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v43 = *(float *)(a1 + 32);
      v44 = (unint64_t)v61;
      if (v32 && (float)(v43 * (float)v32) >= v42)
        goto LABEL_105;
      v45 = (v32 & (v32 - 1)) != 0;
      if (v32 < 3)
        v45 = 1;
      v46 = v45 | (2 * v32);
      v47 = vcvtps_u32_f32(v42 / v43);
      if (v46 <= v47)
        prime = v47;
      else
        prime = v46;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v49 = *(int8x8_t *)(a1 + 8);
      v61 = v49;
      if (prime > *(_QWORD *)&v49)
        goto LABEL_89;
      if (prime < *(_QWORD *)&v49)
      {
        v50 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v49 < 3uLL || (v51 = (uint8x8_t)vcnt_s8(v49), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
        {
          v50 = std::__next_prime(v50);
        }
        else
        {
          v52 = 1 << -(char)__clz(v50 - 1);
          if (v50 >= 2)
            v50 = v52;
        }
        if (prime <= v50)
          prime = v50;
        if (prime < *(_QWORD *)&v61)
LABEL_89:
          sub_20E8D2B3C(a1, prime);
      }
      v32 = *(_QWORD *)(a1 + 8);
      v53 = v32 - 1;
      if ((v32 & (v32 - 1)) == 0)
      {
        v44 = v53 & v30;
        v54 = *(_QWORD *)a1;
        v55 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v53 & v30));
        if (v55)
          goto LABEL_106;
        goto LABEL_108;
      }
      if (v32 > v30)
      {
        v44 = v30;
LABEL_105:
        v54 = *(_QWORD *)a1;
        v55 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v44);
        if (v55)
          goto LABEL_106;
        goto LABEL_108;
      }
      v44 = v30 % v32;
      v54 = *(_QWORD *)a1;
      v55 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 % v32));
      if (v55)
      {
LABEL_106:
        *v41 = *v55;
        goto LABEL_114;
      }
LABEL_108:
      *v41 = *v60;
      *v60 = v41;
      *(_QWORD *)(v54 + 8 * v44) = v60;
      if (!*v41)
        goto LABEL_115;
      v56 = *(_QWORD *)(*v41 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v56 >= v32)
          v56 %= v32;
      }
      else
      {
        v56 &= v32 - 1;
      }
      v55 = (_QWORD *)(*(_QWORD *)a1 + 8 * v56);
LABEL_114:
      *v55 = v41;
LABEL_115:
      ++*(_QWORD *)(a1 + 24);
      v29 = v62;
LABEL_116:
      v25 = v29 + 4472;
    }
    while (v25 != v59);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 2749) && *a2 != a2[1])
    sub_20F2FFF80(a1);
  v57 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(v57 + 32) = 1;
  *(_DWORD *)(v57 + 36) = 0;
}

void sub_20F300E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;

  v3 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v3;
    operator delete(v3);
  }
  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void **sub_20F300EA8(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20F3122B4(v3 - 4472);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F300F0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  char *v12;
  int v13;
  void *v14[2];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  char v18;

  v4 = a1[10];
  v5 = *(_QWORD **)(v4 + 2824);
  v6 = *(_QWORD **)(v4 + 2832);
  if (v5 == v6)
  {
LABEL_4:
    v7 = (_QWORD *)a1[2];
    if (!v7)
      goto LABEL_6;
    do
    {
LABEL_5:
      sub_20F26170C(v7 + 3, a2);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    goto LABEL_6;
  }
  while (!sub_20EB07858(*(_QWORD **)(v5[24] + 8), a2))
  {
    v5 += 559;
    if (v5 == v6)
      goto LABEL_4;
  }
  sub_20F26170C(v5, a2);
  v7 = (_QWORD *)a1[2];
  if (v7)
    goto LABEL_5;
LABEL_6:
  v8 = a1[7];
  if (v8)
  {
    sub_20E8D771C(v8 + 456, a2, a2);
    sub_20F22C240(v8, (_QWORD *)a2);
  }
  v9 = a1[8];
  if (!v9)
    return;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    sub_20E860C04(__p, v14[0], (unint64_t)v14[1]);
    goto LABEL_16;
  }
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (SHIBYTE(v15) < 0)
    goto LABEL_15;
LABEL_11:
  *(_OWORD *)__p = *(_OWORD *)v14;
  v17 = v15;
LABEL_16:
  v18 = 1;
  v10 = *(_QWORD *)(v9 + 112);
  if (v10 >= *(_QWORD *)(v9 + 120))
  {
    v12 = sub_20F22F0D8((void **)(v9 + 104), (uint64_t)__p);
    v13 = SHIBYTE(v17);
    *(_QWORD *)(v9 + 112) = v12;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
      return;
    }
LABEL_23:
    operator delete(v14[0]);
    return;
  }
  v11 = *(_OWORD *)__p;
  *(_QWORD *)(v10 + 16) = v17;
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(v10 + 24) = v18;
  *(_QWORD *)(v9 + 112) = v10 + 32;
  if (SHIBYTE(v15) < 0)
    goto LABEL_23;
}

void sub_20F3010C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F30110C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  char v20;
  uint8x8_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  unsigned int v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int8x8_t v58;
  unint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  unsigned int v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  _BOOL4 v81;
  _QWORD *v82;
  uint64_t *v83;
  unsigned int v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  int v93;
  double v94;
  double v95;
  double v96;
  double v97;
  int8x16_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v111;
  uint64_t v112;
  _BOOL4 v113;
  uint64_t *j;
  unsigned int v115;
  uint64_t v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t *v187;
  unsigned __int8 v188;
  char *v190;
  size_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t k;
  uint64_t v195;
  int v196;
  __uint64_t v198[2];
  void *v199[3];
  void *v200[2];
  _BYTE v201[28];
  __int128 v202;
  void *v203[2];
  __int128 v204;
  void *v205[2];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _BYTE v210[293];
  char v211;
  __int128 *v212[5];

  kdebug_trace();
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v200[0]) = 0;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v198[0] = 0;
    pthread_threadid_np(0, v198);
    v9 = v198[0];
    timespec_get((timespec *)v198, 1);
    sub_210219E20(v200, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "PRR:BEGIN", 9uLL, v7, v8, v9, v198);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v200);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v207) < 0)
    {
      operator delete(*((void **)&v206 + 1));
      if ((SBYTE7(v206) & 0x80000000) == 0)
      {
LABEL_8:
        if (!BYTE8(v204))
        {
LABEL_14:
          if (BYTE8(v202) && SBYTE7(v202) < 0)
            operator delete(*(void **)&v201[16]);
          if ((v201[15] & 0x80000000) != 0)
            operator delete(v200[1]);
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (SBYTE7(v204) < 0)
          operator delete(v203[0]);
        goto LABEL_14;
      }
    }
    else if ((SBYTE7(v206) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v205[0]);
    if (!BYTE8(v204))
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LOWORD(v200[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v13 = sub_20F328638(*(_QWORD *)(a1 + 80), a2);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 2499))
  {
    v19 = *(_QWORD **)(a1 + 16);
    if (v19)
    {
      v20 = 0;
      do
      {
        v20 |= sub_20F44AD90((int8x16_t *)a2, v19[5]) != 2;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
      goto LABEL_130;
    }
    goto LABEL_129;
  }
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)a2;
  v16 = *(int8x8_t *)(a1 + 8);
  if (v14 == *(_QWORD *)a2)
  {
    if (v16)
    {
      v17 = (uint8x8_t)vcnt_s8(v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v18 = *(_QWORD *)(a2 + 24);
        if (v14 >= *(_QWORD *)&v16)
          v18 = v14 % *(_QWORD *)&v16;
      }
      else
      {
        v18 = (*(_QWORD *)&v16 - 1) & v14;
      }
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v18);
      if (v23)
      {
        v24 = (_QWORD *)*v23;
        if (v24)
        {
          if (v17.u32[0] < 2uLL)
          {
            v25 = *(_QWORD *)&v16 - 1;
            while (1)
            {
              v27 = v24[1];
              if (v27 == v14)
              {
                if (v24[2] == v14)
                  goto LABEL_91;
              }
              else if ((v27 & v25) != v18)
              {
                goto LABEL_129;
              }
              v20 = 0;
              v24 = (_QWORD *)*v24;
              if (!v24)
                goto LABEL_130;
            }
          }
          while (1)
          {
            v26 = v24[1];
            if (v26 == v14)
            {
              if (v24[2] == v14)
              {
LABEL_91:
                v20 = sub_20F269420((uint64_t)(v24 + 3), a2, 1) != 2;
                goto LABEL_130;
              }
            }
            else
            {
              if (v26 >= *(_QWORD *)&v16)
                v26 %= *(_QWORD *)&v16;
              if (v26 != v18)
                goto LABEL_129;
            }
            v20 = 0;
            v24 = (_QWORD *)*v24;
            if (!v24)
              goto LABEL_130;
          }
        }
      }
    }
    goto LABEL_129;
  }
  if (!*(_QWORD *)&v16)
    goto LABEL_129;
  v21 = (uint8x8_t)vcnt_s8(v16);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v22 = *(_QWORD *)a2;
    if (v15 >= *(_QWORD *)&v16)
      v22 = v15 % *(_QWORD *)&v16;
  }
  else
  {
    v22 = (*(_QWORD *)&v16 - 1) & v15;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v22);
  if (v28)
  {
    v28 = (_QWORD *)*v28;
    if (v28)
    {
      if (v21.u32[0] < 2uLL)
      {
        while (1)
        {
          v30 = v28[1];
          if (v30 == v15)
          {
            if (v28[2] == v15)
              goto LABEL_71;
          }
          else if ((v30 & (*(_QWORD *)&v16 - 1)) != v22)
          {
            goto LABEL_70;
          }
          v28 = (_QWORD *)*v28;
          if (!v28)
            goto LABEL_71;
        }
      }
      do
      {
        v29 = v28[1];
        if (v29 == v15)
        {
          if (v28[2] == v15)
            break;
        }
        else
        {
          if (v29 >= *(_QWORD *)&v16)
            v29 %= *(_QWORD *)&v16;
          if (v29 != v22)
          {
LABEL_70:
            v28 = 0;
            break;
          }
        }
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
  }
LABEL_71:
  if (v21.u32[0] > 1uLL)
  {
    v31 = *(_QWORD *)(a2 + 24);
    if (v14 >= *(_QWORD *)&v16)
      v31 = v14 % *(_QWORD *)&v16;
  }
  else
  {
    v31 = (*(_QWORD *)&v16 - 1) & v14;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
  if (!v32)
    goto LABEL_129;
  v33 = (_QWORD *)*v32;
  if (!v33)
    goto LABEL_129;
  if (v21.u32[0] < 2uLL)
  {
    v34 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v36 = v33[1];
      if (v36 == v14)
      {
        if (v33[2] == v14)
          goto LABEL_92;
      }
      else if ((v36 & v34) != v31)
      {
        goto LABEL_129;
      }
      v20 = 0;
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_130;
    }
  }
  while (1)
  {
    v35 = v33[1];
    if (v35 == v14)
      break;
    if (v35 >= *(_QWORD *)&v16)
      v35 %= *(_QWORD *)&v16;
    if (v35 != v31)
      goto LABEL_129;
LABEL_80:
    v20 = 0;
    v33 = (_QWORD *)*v33;
    if (!v33)
      goto LABEL_130;
  }
  if (v33[2] != v14)
    goto LABEL_80;
LABEL_92:
  if (!v28)
    goto LABEL_129;
  v37 = (_QWORD *)(**(_QWORD **)(v28[5] + 424) + 56);
  v38 = (uint64_t *)*v37;
  if (!*v37)
    goto LABEL_129;
  v39 = (uint64_t)(v28 + 3);
  v40 = (uint64_t)(v33 + 3);
  v41 = *(_DWORD *)(a2 + 8);
  v42 = v37;
  do
  {
    v43 = v38[4];
    if (v43 < v15)
    {
      ++v38;
    }
    else if (v43 == v15)
    {
      if (*((_DWORD *)v38 + 10) < v41)
        ++v38;
      else
        v42 = v38;
    }
    else
    {
      v42 = v38;
    }
    v38 = (uint64_t *)*v38;
  }
  while (v38);
  if (v42 == v37)
    goto LABEL_129;
  v44 = v42[4];
  if (v15 < v44 || v15 == v44 && *((_DWORD *)v42 + 10) > v41)
    goto LABEL_129;
  if (!v42[6])
    goto LABEL_129;
  v45 = (_QWORD *)(**(_QWORD **)(v33[5] + 424) + 56);
  v46 = (uint64_t *)*v45;
  if (!*v45)
    goto LABEL_129;
  v47 = *(_DWORD *)(a2 + 32);
  v48 = v45;
  do
  {
    v49 = v46[4];
    if (v49 < v14)
    {
      ++v46;
    }
    else if (v49 == v14)
    {
      if (*((_DWORD *)v46 + 10) < v47)
        ++v46;
      else
        v48 = v46;
    }
    else
    {
      v48 = v46;
    }
    v46 = (uint64_t *)*v46;
  }
  while (v46);
  if (v48 == v45 || (v50 = v48[4], v14 < v50) || v14 == v50 && *((_DWORD *)v48 + 10) > v47 || !v48[6])
  {
LABEL_129:
    v20 = 0;
    goto LABEL_130;
  }
  v51 = sub_20F269D10(v39, (uint64_t *)a2);
  sub_20FC89E80(a2, (uint64_t)v200);
  v52 = sub_20F269D10(v40, (uint64_t *)v200);
  v20 = v51 != 2 && v52 != 2;
LABEL_130:
  v54 = *(_QWORD *)(a1 + 80);
  v55 = sub_20F325654(v54, (uint64_t *)a2);
  v56 = sub_20F325654(v54, (uint64_t *)(a2 + 24));
  if (!v55)
  {
    if (!v56)
      goto LABEL_138;
    goto LABEL_135;
  }
  if (v56)
  {
LABEL_135:
    v57 = 1;
    v58 = *(int8x8_t *)(a1 + 8);
    if (v58)
      goto LABEL_136;
LABEL_138:
    v63 = 0;
    goto LABEL_322;
  }
  v57 = 0;
  v58 = *(int8x8_t *)(a1 + 8);
  if (!*(_QWORD *)&v58)
    goto LABEL_138;
LABEL_136:
  v59 = *(_QWORD *)a2;
  v60 = *(_QWORD *)(a2 + 24);
  v61 = (uint8x8_t)vcnt_s8(v58);
  v61.i16[0] = vaddlv_u8(v61);
  if (v61.u32[0] > 1uLL)
  {
    v62 = *(_QWORD *)a2;
    if (v59 >= *(_QWORD *)&v58)
      v62 = v59 % *(_QWORD *)&v58;
  }
  else
  {
    v62 = (*(_QWORD *)&v58 - 1) & v59;
  }
  v64 = *(_QWORD *)a1;
  v65 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v62);
  if (!v65)
  {
LABEL_151:
    v66 = 0;
    if (v61.u32[0] <= 1uLL)
      goto LABEL_162;
LABEL_152:
    v68 = *(_QWORD *)(a2 + 24);
    if (v60 >= *(_QWORD *)&v58)
      v68 = v60 % *(_QWORD *)&v58;
    v69 = *(_QWORD **)(v64 + 8 * v68);
    if (v69)
      goto LABEL_163;
    goto LABEL_177;
  }
  v66 = (_QWORD *)*v65;
  if (!*v65)
    goto LABEL_161;
  if (v61.u32[0] >= 2uLL)
  {
    while (1)
    {
      v67 = v66[1];
      if (v67 == v59)
      {
        if (v66[2] == v59)
          goto LABEL_161;
      }
      else
      {
        if (v67 >= *(_QWORD *)&v58)
          v67 %= *(_QWORD *)&v58;
        if (v67 != v62)
          goto LABEL_151;
      }
      v66 = (_QWORD *)*v66;
      if (!v66)
        goto LABEL_161;
    }
  }
  while (2)
  {
    v70 = v66[1];
    if (v70 == v59)
    {
      if (v66[2] == v59)
        goto LABEL_161;
LABEL_157:
      v66 = (_QWORD *)*v66;
      if (!v66)
        goto LABEL_161;
      continue;
    }
    break;
  }
  if ((v70 & (*(_QWORD *)&v58 - 1)) == v62)
    goto LABEL_157;
  v66 = 0;
LABEL_161:
  if (v61.u32[0] > 1uLL)
    goto LABEL_152;
LABEL_162:
  v68 = (*(_QWORD *)&v58 - 1) & v60;
  v69 = *(_QWORD **)(v64 + 8 * v68);
  if (!v69)
  {
LABEL_177:
    v71 = 0;
    goto LABEL_178;
  }
LABEL_163:
  v71 = (_QWORD *)*v69;
  if (*v69)
  {
    if (v61.u32[0] < 2uLL)
    {
      v72 = *(_QWORD *)&v58 - 1;
      while (1)
      {
        v74 = v71[1];
        if (v74 == v60)
        {
          if (v71[2] == v60)
            goto LABEL_178;
        }
        else if ((v74 & v72) != v68)
        {
          goto LABEL_177;
        }
        v71 = (_QWORD *)*v71;
        if (!v71)
          goto LABEL_178;
      }
    }
    do
    {
      v73 = v71[1];
      if (v73 == v60)
      {
        if (v71[2] == v60)
          break;
      }
      else
      {
        if (v73 >= *(_QWORD *)&v58)
          v73 %= *(_QWORD *)&v58;
        if (v73 != v68)
          goto LABEL_177;
      }
      v71 = (_QWORD *)*v71;
    }
    while (v71);
  }
LABEL_178:
  if (!v66)
  {
    v81 = 0;
    if (v71)
      goto LABEL_194;
LABEL_225:
    v63 = 0;
    goto LABEL_322;
  }
  v75 = (_QWORD *)(**(_QWORD **)(v66[5] + 424) + 56);
  v76 = (uint64_t *)*v75;
  if (!*v75)
    goto LABEL_191;
  v77 = *(_DWORD *)(a2 + 8);
  v78 = v75;
  do
  {
    v79 = v76[4];
    if (v79 < v59)
    {
      ++v76;
    }
    else if (v79 == v59)
    {
      if (*((_DWORD *)v76 + 10) < v77)
        ++v76;
      else
        v78 = v76;
    }
    else
    {
      v78 = v76;
    }
    v76 = (uint64_t *)*v76;
  }
  while (v76);
  if (v78 == v75 || (v80 = v78[4], v59 < v80) || v59 == v80 && *((_DWORD *)v78 + 10) > v77)
  {
LABEL_191:
    v81 = 0;
    if (v71)
      goto LABEL_194;
    goto LABEL_215;
  }
  v81 = v78[6] != 0;
  if (!v71)
    goto LABEL_215;
LABEL_194:
  v82 = (_QWORD *)(**(_QWORD **)(v71[5] + 424) + 56);
  v83 = (uint64_t *)*v82;
  if (!*v82)
    goto LABEL_215;
  v84 = *(_DWORD *)(a2 + 32);
  v85 = v82;
  do
  {
    v86 = v83[4];
    if (v86 < v60)
    {
      ++v83;
    }
    else if (v86 == v60)
    {
      if (*((_DWORD *)v83 + 10) < v84)
        ++v83;
      else
        v85 = v83;
    }
    else
    {
      v85 = v83;
    }
    v83 = (uint64_t *)*v83;
  }
  while (v83);
  if (v85 == v82 || (v87 = v85[4], v60 < v87) || v60 == v87 && *((_DWORD *)v85 + 10) > v84 || !v85[6] || !v55)
  {
LABEL_215:
    v99 = v57 ^ 1;
    if (!v81)
      v99 = 1;
    if ((v99 & 1) == 0)
    {
      v100 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v200 = *(_OWORD *)a2;
      *(_OWORD *)v201 = v100;
      *(_OWORD *)&v201[12] = *(_OWORD *)(a2 + 28);
      v101 = *(_OWORD *)(a2 + 128);
      v206 = *(_OWORD *)(a2 + 112);
      v207 = v101;
      v102 = *(_OWORD *)(a2 + 160);
      v208 = *(_OWORD *)(a2 + 144);
      v209 = v102;
      v103 = *(_OWORD *)(a2 + 64);
      v202 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v203 = v103;
      v104 = *(_OWORD *)(a2 + 96);
      v204 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)v205 = v104;
      memcpy(v210, (const void *)(a2 + 176), sizeof(v210));
      v211 = 1;
      v71 = v66;
      goto LABEL_219;
    }
    goto LABEL_225;
  }
  *(_OWORD *)v200 = *(_OWORD *)a2;
  *(_QWORD *)v201 = *(_QWORD *)(a2 + 16);
  v88 = *(_OWORD *)(a2 + 128);
  v206 = *(_OWORD *)(a2 + 112);
  v207 = v88;
  v89 = *(_OWORD *)(a2 + 160);
  v208 = *(_OWORD *)(a2 + 144);
  v209 = v89;
  v90 = *(_OWORD *)(a2 + 64);
  v202 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v203 = v90;
  v91 = *(_OWORD *)(a2 + 96);
  v204 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v205 = v91;
  memcpy(v210, (const void *)(a2 + 176), sizeof(v210));
  v211 = 1;
  *(_OWORD *)v200 = *(_OWORD *)(a2 + 24);
  v92 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)&v201[8] = *(_OWORD *)a2;
  v93 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)v201 = v92;
  *(_DWORD *)&v201[24] = v93;
  sub_20FC89580((uint64_t)&v202, (float64x2_t *)v210, *(double *)&v201[8], v94, v95, v96, v97, v98);
  if (!v211)
    goto LABEL_225;
LABEL_219:
  v105 = 0;
  v106 = *((_DWORD *)v71 + 82);
  if (*(_BYTE *)(v54 + 2641) && (v106 & 0x80) != 0)
  {
    v107 = *(_QWORD *)(v54 + 2824);
    v108 = *(_QWORD *)(v54 + 2832);
    if (v107 == v108)
    {
      v105 = 1;
    }
    else
    {
      do
      {
        v105 = (*(_DWORD *)(v107 + 304) & 0x80) == 0;
        if ((*(_DWORD *)(v107 + 304) & 0x80) != 0)
          break;
        v107 += 4472;
      }
      while (v107 != v108);
    }
  }
  if (*(_BYTE *)(v54 + 2642))
    v109 = (v71[41] & 0x10) == 0;
  else
    v109 = 1;
  if (!v109 && (v71[41] & 0x100) == 0)
  {
    v111 = *(_QWORD *)(v54 + 2824);
    v112 = *(_QWORD *)(v54 + 2832);
    if (v111 == v112)
    {
      v113 = 1;
    }
    else
    {
      do
      {
        v113 = (*(_DWORD *)(v111 + 304) & 0x10) == 0;
        if ((*(_DWORD *)(v111 + 304) & 0x10) != 0)
          break;
        v111 += 4472;
      }
      while (v111 != v112);
    }
    v105 |= v113;
  }
  sub_20F30D884((uint64_t *)v199, a1, *(void **)(v71[5] + 160));
  sub_20F335FE8(*(_QWORD *)(a1 + 80), (uint64_t *)v200, v199, v105, (_QWORD *)a1, (uint64_t)v198);
  if (*(_BYTE *)(a1 + 2264))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 2633))
      goto LABEL_243;
LABEL_252:
    *(_BYTE *)(a1 + 1721) = 1;
  }
  else
  {
    bzero((void *)(a1 + 1352), 0x390uLL);
    *(_BYTE *)(a1 + 2264) = 1;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 2633))
      goto LABEL_252;
LABEL_243:
    if ((v106 & 0x90) != 0)
    {
      *(_BYTE *)(a1 + 1721) = 1;
      for (j = *(uint64_t **)(a1 + 16); j; j = (uint64_t *)*j)
      {
        v115 = j[41] & v106;
        if ((v115 & 0x10) != 0 || ((v115 >> 7) & 1) != 0)
        {
          v116 = j[5];
          sub_20FCE8D4C((uint64_t)v198, *(_QWORD **)(v116 + 424));
          sub_20FCC8C14((uint64_t *)v116, **(_QWORD **)(v116 + 424));
          (*(void (**)(uint64_t))(*(_QWORD *)j[28] + 16))(j[28]);
          *((_DWORD *)j + 82) = j[41] & 0xFFFFFC3F | 0x140;
          sub_20F26502C((uint64_t)(j + 3), (uint64_t *)v212);
          sub_20F3026D0(a1, v212, a1 + 1528);
          if (v212[0])
          {
            v212[1] = v212[0];
            operator delete(v212[0]);
          }
        }
      }
    }
  }
  v117 = *(unsigned __int8 *)(a1 + 2256);
  v118 = *(_OWORD *)(a2 + 28);
  v119 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 1784) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1800) = v119;
  *(_OWORD *)(a1 + 1812) = v118;
  v121 = *(_OWORD *)(a2 + 112);
  v120 = *(_OWORD *)(a2 + 128);
  v122 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 1928) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 1944) = v122;
  *(_OWORD *)(a1 + 1896) = v121;
  *(_OWORD *)(a1 + 1912) = v120;
  v123 = *(_OWORD *)(a2 + 64);
  v124 = *(_OWORD *)(a2 + 80);
  v125 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 1848) = v123;
  *(_OWORD *)(a1 + 1864) = v124;
  *(_OWORD *)(a1 + 1880) = v125;
  memcpy((void *)(a1 + 1960), (const void *)(a2 + 176), 0x120uLL);
  v126 = *(_BYTE *)(a2 + 468);
  *(_DWORD *)(a1 + 2248) = *(_DWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 2252) = v126;
  if (v117)
  {
    if (v105)
      goto LABEL_255;
LABEL_258:
    v127 = *(_QWORD *)(a1 + 40);
    if (v127)
      goto LABEL_259;
  }
  else
  {
    *(_BYTE *)(a1 + 2256) = 1;
    if (!v105)
      goto LABEL_258;
LABEL_255:
    *(_WORD *)(sub_20F2F3290((_QWORD *)a1) + 984) = 257;
    v127 = *(_QWORD *)(a1 + 40);
    if (v127)
    {
LABEL_259:
      v129 = *(_QWORD *)(v127 + 8);
      v128 = *(_QWORD *)(v127 + 16);
      if (v129 != v128)
      {
        v130 = v128 - v129 - 112;
        v131 = v129;
        if (v130 < 0x70)
          goto LABEL_356;
        v132 = (((v130 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
        v131 = v129 + 112 * (v132 & 0x7FFFFFFFFFFFFFELL);
        v133 = (_BYTE *)(v129 + 216);
        v134 = v132 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          *(v133 - 112) = 1;
          *v133 = 1;
          v133 += 224;
          v134 -= 2;
        }
        while (v134);
        if (v132 != (v132 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_356:
          do
          {
            *(_BYTE *)(v131 + 104) = 1;
            v131 += 112;
          }
          while (v131 != v128);
        }
      }
    }
  }
  v135 = *(_QWORD **)(a1 + 56);
  if (v135)
  {
    v137 = v135[1];
    v136 = v135[2];
    if (v137 != v136)
    {
      v138 = v136 - v137 - 1000;
      if (v138 < 0x3E8)
      {
        v139 = v135[1];
        goto LABEL_272;
      }
      v140 = v138 / 0x3E8 + 1;
      v139 = v137 + 1000 * (v140 & 0xFFFFFFFFFFFFFELL);
      v141 = v140 & 0xFFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v137 + 992) = 1;
        *(_BYTE *)(v137 + 1992) = 1;
        v137 += 2000;
        v141 -= 2;
      }
      while (v141);
      if (v140 != (v140 & 0xFFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_272:
          *(_BYTE *)(v139 + 992) = 1;
          v139 += 1000;
        }
        while (v139 != v136);
      }
    }
    v143 = v135[4];
    v142 = v135[5];
    if (v143 != v142)
    {
      v144 = v142 - v143 - 376;
      if (v144 < 0x178)
      {
        v145 = v135[4];
        goto LABEL_279;
      }
      v146 = v144 / 0x178 + 1;
      v145 = v143 + 376 * (v146 & 0x1FFFFFFFFFFFFFELL);
      v147 = v146 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v143 + 368) = 1;
        *(_BYTE *)(v143 + 744) = 1;
        v143 += 752;
        v147 -= 2;
      }
      while (v147);
      if (v146 != (v146 & 0x1FFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_279:
          *(_BYTE *)(v145 + 368) = 1;
          v145 += 376;
        }
        while (v145 != v142);
      }
    }
    v149 = v135[7];
    v148 = v135[8];
    if (v149 != v148)
    {
      v150 = v148 - v149 - 480;
      if (v150 < 0x1E0)
      {
        v151 = v135[7];
        goto LABEL_286;
      }
      v152 = v150 / 0x1E0 + 1;
      v151 = v149 + 480 * (v152 & 0x1FFFFFFFFFFFFFELL);
      v153 = v152 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v149 + 472) = 1;
        *(_BYTE *)(v149 + 952) = 1;
        v149 += 960;
        v153 -= 2;
      }
      while (v153);
      if (v152 != (v152 & 0x1FFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_286:
          *(_BYTE *)(v151 + 472) = 1;
          v151 += 480;
        }
        while (v151 != v148);
      }
    }
    v155 = v135[10];
    v154 = v135[11];
    if (v155 != v154)
    {
      v156 = v154 - v155 - 440;
      if (v156 < 0x1B8)
      {
        v157 = v135[10];
        goto LABEL_293;
      }
      v158 = v156 / 0x1B8 + 1;
      v157 = v155 + 440 * (v158 & 0x1FFFFFFFFFFFFFELL);
      v159 = v158 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v155 + 432) = 1;
        *(_BYTE *)(v155 + 872) = 1;
        v155 += 880;
        v159 -= 2;
      }
      while (v159);
      if (v158 != (v158 & 0x1FFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_293:
          *(_BYTE *)(v157 + 432) = 1;
          v157 += 440;
        }
        while (v157 != v154);
      }
    }
    v161 = v135[13];
    v160 = v135[14];
    if (v161 != v160)
    {
      v162 = v160 - v161 - 32;
      v163 = v135[13];
      if (v162 < 0x20)
        goto LABEL_357;
      v164 = (v162 >> 5) + 1;
      v163 = v161 + 32 * (v164 & 0xFFFFFFFFFFFFFFELL);
      v165 = (_BYTE *)(v161 + 56);
      v166 = v164 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v165 - 32) = 1;
        *v165 = 1;
        v165 += 64;
        v166 -= 2;
      }
      while (v166);
      if (v164 != (v164 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_357:
        do
        {
          *(_BYTE *)(v163 + 24) = 1;
          v163 += 32;
        }
        while (v163 != v160);
      }
    }
    v168 = v135[16];
    v167 = v135[17];
    if (v168 != v167)
    {
      v169 = v167 - v168 - 904;
      if (v169 < 0x388)
      {
        v170 = v135[16];
        goto LABEL_306;
      }
      v171 = v169 / 0x388 + 1;
      v170 = v168 + 904 * (v171 & 0xFFFFFFFFFFFFFELL);
      v172 = v171 & 0xFFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v168 + 896) = 1;
        *(_BYTE *)(v168 + 1800) = 1;
        v168 += 1808;
        v172 -= 2;
      }
      while (v172);
      if (v171 != (v171 & 0xFFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_306:
          *(_BYTE *)(v170 + 896) = 1;
          v170 += 904;
        }
        while (v170 != v167);
      }
    }
    v174 = v135[19];
    v173 = v135[20];
    if (v174 != v173)
    {
      v175 = v173 - v174 - 32;
      v176 = v135[19];
      if (v175 < 0x20)
        goto LABEL_358;
      v177 = (v175 >> 5) + 1;
      v176 = v174 + 32 * (v177 & 0xFFFFFFFFFFFFFFELL);
      v178 = (_BYTE *)(v174 + 56);
      v179 = v177 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v178 - 32) = 1;
        *v178 = 1;
        v178 += 64;
        v179 -= 2;
      }
      while (v179);
      if (v177 != (v177 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_358:
        do
        {
          *(_BYTE *)(v176 + 24) = 1;
          v176 += 32;
        }
        while (v176 != v173);
      }
    }
    v181 = v135[22];
    v180 = v135[23];
    if (v181 != v180)
    {
      v182 = v180 - v181 - 112;
      v183 = v181;
      if (v182 < 0x70)
        goto LABEL_359;
      v184 = (((v182 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
      v183 = v181 + 112 * (v184 & 0x7FFFFFFFFFFFFFELL);
      v185 = (_BYTE *)(v181 + 216);
      v186 = v184 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        *(v185 - 112) = 1;
        *v185 = 1;
        v185 += 224;
        v186 -= 2;
      }
      while (v186);
      if (v184 != (v184 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_359:
        do
        {
          *(_BYTE *)(v183 + 104) = 1;
          v183 += 112;
        }
        while (v183 != v180);
      }
    }
  }
  if (v199[0])
  {
    v199[1] = v199[0];
    operator delete(v199[0]);
  }
  v63 = 0x10000;
LABEL_322:
  v187 = sub_210219C18();
  v188 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v200[0]) = 0;
    v190 = (char *)_os_log_send_and_compose_impl();
    v191 = strlen(v190);
    v198[0] = 0;
    pthread_threadid_np(0, v198);
    v192 = v198[0];
    timespec_get((timespec *)v198, 1);
    sub_210219E20(v200, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v187 + 1), (__int128 *)(v187 + 5), "PRR:END", 7uLL, v190, v191, v192, v198);
    std::mutex::lock(&stru_254A5A410);
    v193 = qword_254A5A458;
    for (k = unk_254A5A460; v193 != k; v193 += 40)
    {
      v195 = *(_QWORD *)(v193 + 32);
      if (!v195)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v195 + 48))(v195, v200);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v207) < 0)
    {
      operator delete(*((void **)&v206 + 1));
      if (SBYTE7(v206) < 0)
        goto LABEL_332;
LABEL_329:
      if (BYTE8(v204))
      {
LABEL_333:
        if (SBYTE7(v204) < 0)
          operator delete(v203[0]);
      }
    }
    else
    {
      if ((SBYTE7(v206) & 0x80000000) == 0)
        goto LABEL_329;
LABEL_332:
      operator delete(v205[0]);
      if (BYTE8(v204))
        goto LABEL_333;
    }
    if (BYTE8(v202) && SBYTE7(v202) < 0)
      operator delete(*(void **)&v201[16]);
    if ((v201[15] & 0x80000000) != 0)
      operator delete(v200[1]);
    if (v190)
      free(v190);
  }
  if (os_signpost_enabled((os_log_t)*v187))
  {
    LOWORD(v200[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  kdebug_trace();
  if ((v20 & 1) != 0)
    v196 = 256;
  else
    v196 = 0;
  return v196 | (v13 != 2) | v63;
}

void sub_20F3025A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39)
{
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
    sub_20E8E69C4((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_20E8E69C4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F3026D0(uint64_t a1, __int128 **a2, uint64_t a3)
{
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  float64x2_t v17;
  int64x2_t v18;
  std::string::size_type v19;
  int64x2_t v20;
  double v21;
  double v23;
  __int128 v25;
  float64x2_t v26;
  unint64_t v32;
  std::string::size_type v33;
  float64x2_t v34;
  std::string::size_type v36;
  int64x2_t v37;
  double v38;
  __int128 v42;
  float64x2_t v43;
  __int128 v46;
  int64x2_t v47;
  std::string::size_type v48;
  int64x2_t v49;
  double v50;
  float64x2_t v52;
  float64x2_t v53;
  int64x2_t v55;
  int64x2_t v56;
  float64x2_t v58;
  int8x16_t v60;
  int64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  float64x2_t v76;
  __int128 v77;
  char *v78;
  unint64_t v80;
  std::string __p[16];
  __int128 v82;
  uint64_t v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  sub_20EE1D52C(a3, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5)- 0x7D05F417D05F417DLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*((_BYTE *)v5 + 24) != 1)
    {
LABEL_3:
      v5 = (__int128 *)((char *)v5 + 344);
      if (v5 == v6)
        return;
    }
    if (*((_DWORD *)v5 + 4))
      sub_20E877AB8();
    v7 = *(_QWORD *)(a1 + 80);
    if (!*(_BYTE *)(v7 + 2623))
    {
      v18 = *(int64x2_t *)((char *)v5 + 184);
      v19 = *((_QWORD *)v5 + 29);
      v20 = *(int64x2_t *)((char *)v5 + 216);
      v21 = *((double *)v5 + 33);
      _Q5 = *(float64x2_t *)((char *)v5 + 248);
      v23 = *((double *)v5 + 37);
      _Q7 = *(float64x2_t *)((char *)v5 + 280);
      v25 = *v5;
      __p[1].__r_.__value_.__l.__size_ = *((_QWORD *)v5 + 25);
      *(_QWORD *)&v17.f64[0] = __p[1].__r_.__value_.__l.__size_;
      *(_QWORD *)&v17.f64[1] = v19;
      v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v18, v20), _Q7.f64[0]), (float64x2_t)vzip2q_s64(v18, v20), _Q7, 1), v17, v23);
      _Q0 = vmulq_f64(_Q5, _Q7);
      _Q7.f64[0] = _Q7.f64[1];
      __asm { FMLA            D0, D7, V5.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + v21 * v23;
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v25;
      *(int64x2_t *)&__p[0].__r_.__value_.__r.__words[2] = v18;
      *(int64x2_t *)&__p[1].__r_.__value_.__r.__words[2] = v20;
      __p[2].__r_.__value_.__l.__size_ = v19;
      *(float64x2_t *)&__p[2].__r_.__value_.__r.__words[2] = _Q5;
      *(double *)&__p[3].__r_.__value_.__l.__size_ = v21;
      *(float64x2_t *)&__p[3].__r_.__value_.__r.__words[2] = vnegq_f64(v26);
      __p[4].__r_.__value_.__l.__size_ = *(_OWORD *)&vnegq_f64(_Q0);
      __p[5].__r_.__value_.__s.__data_[8] = *((_BYTE *)v5 + 336);
      *(_OWORD *)&__p[4].__r_.__value_.__r.__words[2] = v5[20];
      __p[5].__r_.__value_.__s.__data_[16] = 0;
      __p[15].__r_.__value_.__s.__data_[16] = 0;
      LOBYTE(v82) = 0;
      v84 = 0;
      v32 = *(_QWORD *)(a3 + 8);
      if (v32 < *(_QWORD *)(a3 + 16))
      {
LABEL_29:
        memcpy((void *)v32, __p, 0x179uLL);
        *(_BYTE *)(v32 + 384) = 0;
        *(_BYTE *)(v32 + 408) = 0;
        if (v84)
        {
          v77 = v82;
          *(_QWORD *)(v32 + 400) = v83;
          *(_OWORD *)(v32 + 384) = v77;
          v83 = 0;
          v82 = 0uLL;
          *(_BYTE *)(v32 + 408) = 1;
        }
        v78 = (char *)(v32 + 416);
        goto LABEL_33;
      }
LABEL_32:
      v78 = sub_20EE1E1C8((char **)a3, (uint64_t)__p);
LABEL_33:
      *(_QWORD *)(a3 + 8) = v78;
      if (v84)
      {
        if (SHIBYTE(v83) < 0)
          operator delete((void *)v82);
      }
      goto LABEL_3;
    }
    v8 = v5 + 2;
    v9 = *(_QWORD *)(v7 + 2824);
    v10 = *(_QWORD *)(v7 + 2832);
    if (v9 != v10)
    {
      while (1)
      {
        v11 = *(_QWORD *)(v9 + 16);
        if (v11)
        {
          if (*(_QWORD *)(v11 + 160) == *v8)
            break;
        }
        v9 += 4472;
      }
    }
    if (v9 == v10)
      v12 = 0;
    else
      v12 = v9;
    v13 = *(_QWORD *)(v12 + 192);
    v80 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 160);
    sub_20FCCBC60(&v80, __p);
    v14 = sub_20EB07858(*(_QWORD **)(v13 + 8), (uint64_t)__p);
    v15 = v14;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v15)
        v16 = v15 + 5;
      else
        v16 = 0;
      if (v15)
        goto LABEL_28;
    }
    else
    {
      if (v14)
        v16 = v14 + 5;
      else
        v16 = 0;
      if (v14)
        goto LABEL_28;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3709, (uint64_t)"opt_origin_anchor", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
LABEL_28:
    v33 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 160);
    _Q3 = *(float64x2_t *)((char *)v5 + 184);
    v36 = *((_QWORD *)v5 + 29);
    v37 = *(int64x2_t *)((char *)v5 + 216);
    v38 = *((double *)v5 + 33);
    _Q7 = *(float64x2_t *)((char *)v5 + 248);
    _D0 = *((double *)v5 + 37);
    _Q1 = *(float64x2_t *)((char *)v5 + 280);
    v42 = *v5;
    __p[1].__r_.__value_.__l.__size_ = *((_QWORD *)v5 + 25);
    *(_QWORD *)&v34.f64[0] = __p[1].__r_.__value_.__l.__size_;
    *(_QWORD *)&v34.f64[1] = v36;
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q3, v37), _Q1.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, v37), _Q1, 1), v34, _D0);
    _Q2 = vmulq_f64(_Q7, _Q1);
    _D18 = _Q1.f64[1];
    __asm { FMLA            D2, D18, V7.D[1] }
    _Q2.f64[0] = _Q2.f64[0] + v38 * _D0;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v42;
    *(float64x2_t *)&__p[0].__r_.__value_.__r.__words[2] = _Q3;
    *(int64x2_t *)&__p[1].__r_.__value_.__r.__words[2] = v37;
    __p[2].__r_.__value_.__l.__size_ = v36;
    *(float64x2_t *)&__p[2].__r_.__value_.__r.__words[2] = _Q7;
    *(double *)&__p[3].__r_.__value_.__l.__size_ = v38;
    *(float64x2_t *)&__p[3].__r_.__value_.__r.__words[2] = vnegq_f64(v43);
    __p[4].__r_.__value_.__l.__size_ = *(_OWORD *)&vnegq_f64(_Q2);
    __p[5].__r_.__value_.__s.__data_[8] = *((_BYTE *)v5 + 336);
    *(_OWORD *)&__p[4].__r_.__value_.__r.__words[2] = v5[20];
    LOBYTE(v82) = 0;
    v84 = 0;
    __p[7].__r_.__value_.__r.__words[0] = 0;
    __p[15].__r_.__value_.__s.__data_[16] = 1;
    *(_OWORD *)&__p[5].__r_.__value_.__r.__words[2] = *v5;
    v46 = *(_OWORD *)v8;
    LODWORD(__p[7].__r_.__value_.__l.__data_) = *((_DWORD *)v5 + 12);
    *(_OWORD *)&__p[6].__r_.__value_.__r.__words[1] = v46;
    __p[7].__r_.__value_.__l.__size_ = v33;
    v47 = *(int64x2_t *)((char *)v5 + 56);
    v48 = *((_QWORD *)v5 + 13);
    v49 = *(int64x2_t *)((char *)v5 + 88);
    v50 = *((double *)v5 + 17);
    _Q7 = *(float64x2_t *)((char *)v5 + 120);
    __p[12].__r_.__value_.__l.__size_ = *((_QWORD *)v5 + 9);
    *(_QWORD *)&_Q3.f64[0] = __p[12].__r_.__value_.__l.__size_;
    *(int64x2_t *)&__p[11].__r_.__value_.__r.__words[2] = v47;
    *(int64x2_t *)&__p[12].__r_.__value_.__r.__words[2] = v49;
    __p[13].__r_.__value_.__l.__size_ = v48;
    *(float64x2_t *)&__p[13].__r_.__value_.__r.__words[2] = _Q7;
    *(double *)&__p[14].__r_.__value_.__l.__size_ = v50;
    v43.f64[0] = *((float64_t *)v5 + 21);
    v52 = *(float64x2_t *)((char *)v5 + 152);
    *(_QWORD *)&_Q3.f64[1] = v48;
    v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v47, v49), v52.f64[0]), (float64x2_t)vzip2q_s64(v47, v49), v52, 1), _Q3, v43.f64[0]);
    _Q2 = vmulq_f64(_Q7, v52);
    _Q3.f64[0] = *((float64_t *)v5 + 20);
    __asm { FMLA            D2, D3, V7.D[1] }
    _Q2.f64[0] = _Q2.f64[0] + v50 * v43.f64[0];
    *(float64x2_t *)&__p[14].__r_.__value_.__r.__words[2] = vnegq_f64(v53);
    __p[15].__r_.__value_.__l.__size_ = *(_OWORD *)&vnegq_f64(_Q2);
    _Q2.f64[0] = *((float64_t *)v5 + 25);
    v55 = *(int64x2_t *)((char *)v5 + 184);
    v56 = *(int64x2_t *)((char *)v5 + 216);
    _Q6 = *(int64x2_t *)((char *)v5 + 248);
    v58 = (float64x2_t)vzip1q_s64(v55, v56);
    _Q4 = (float64x2_t)vzip2q_s64(v55, v56);
    _Q2.f64[1] = *((float64_t *)v5 + 29);
    v60 = vextq_s8((int8x16_t)_Q4, (int8x16_t)vdupq_laneq_s64(_Q6, 1), 8uLL);
    v61 = vzip1q_s64(_Q6, (int64x2_t)_Q4);
    v62 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v58, vnegq_f64(_Q1).f64[0]), _Q4, _Q1, 1), _Q2, _D0, 0);
    _Q6.i64[0] = *((_QWORD *)v5 + 32);
    *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64(v61, 1).u64[0];
    __asm { FMLS            D4, D6, V1.D[1] }
    *(_QWORD *)&_Q7.f64[1] = v60.i64[0];
    _Q1.f64[0] = *((float64_t *)v5 + 33);
    v60.i64[0] = v61.i64[0];
    __asm { FMLS            D4, D16, V0.D[0] }
    _Q4.f64[1] = 1.0;
    v64 = *(float64x2_t *)(v16 + 31);
    v63 = (float64x2_t *)(v16 + 31);
    v66 = v63[-6];
    v65 = v63[-5];
    v68 = v63[-4];
    v67 = v63[-3];
    v70 = v63[-2];
    v69 = v63[-1];
    v71 = v63[1];
    v72 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v66.f64[0]), _Q7, v66, 1), _Q2, v65.f64[0]), v62, v65, 1);
    v73 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v60.u64[0], v66.f64[0]), (float64x2_t)v60.u64[1], v66, 1), (float64x2_t)*(unint64_t *)&_Q1.f64[0], v65.f64[0]), _Q4, v65, 1);
    v74 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v68.f64[0]), _Q7, v68, 1), _Q2, v67.f64[0]), v62, v67, 1);
    v75 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v60.u64[0], v68.f64[0]), (float64x2_t)v60.u64[1], v68, 1), (float64x2_t)*(unint64_t *)&_Q1.f64[0], v67.f64[0]), _Q4, v67, 1);
    v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v70.f64[0]), _Q7, v70, 1), _Q2, v69.f64[0]), v62, v69, 1);
    *(int64x2_t *)&__p[7].__r_.__value_.__r.__words[2] = vzip1q_s64(v72, v74);
    __p[9].__r_.__value_.__l.__size_ = *(_QWORD *)&v76.f64[1];
    *(int64x2_t *)&__p[8].__r_.__value_.__r.__words[2] = vzip2q_s64(v72, v74);
    *(int64x2_t *)&__p[9].__r_.__value_.__r.__words[2] = vzip1q_s64(v73, v75);
    __p[8].__r_.__value_.__l.__size_ = *(_QWORD *)&v76.f64[0];
    __p[10].__r_.__value_.__l.__size_ = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v60.u64[0], v70.f64[0]), (float64x2_t)v60.u64[1], v70, 1), (float64x2_t)*(unint64_t *)&_Q1.f64[0], v69.f64[0]), _Q4, v69, 1);
    *(float64x2_t *)&__p[10].__r_.__value_.__r.__words[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v64.f64[0]), _Q7, v64, 1), _Q2, v71.f64[0]), v62, v71, 1);
    __p[11].__r_.__value_.__l.__size_ = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v60.u64[0], v64.f64[0]), (float64x2_t)v60.u64[1], v64, 1), (float64x2_t)*(unint64_t *)&_Q1.f64[0], v71.f64[0]), _Q4, v71, 1);
    v32 = *(_QWORD *)(a3 + 8);
    if (v32 < *(_QWORD *)(a3 + 16))
      goto LABEL_29;
    goto LABEL_32;
  }
}

void sub_20F302C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;

  if (a69)
  {
    if (a68 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F302CD4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  uint64_t *j;
  int v10;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = (_QWORD *)a1[9];
  a1[9] = 0;
  if (result)
  {
    v4 = sub_20F312580(result);
    result = (_QWORD *)MEMORY[0x212BC6398](v4, 0x10E0C4071504F1DLL);
  }
  v5 = a1[10];
  if (*(_BYTE *)(v5 + 940))
  {
    v6 = *(_QWORD *)(v5 + 2824);
    for (i = *(_QWORD *)(v5 + 2832); v6 != i; v6 += 4472)
    {
      v8 = *(_DWORD *)(v6 + 304);
      if ((v8 & 0x20) != 0)
        *(_DWORD *)(v6 + 304) = v8 & 0xFFFFFFCF | 0x10;
    }
    for (j = (uint64_t *)a1[2]; j; j = (uint64_t *)*j)
    {
      v10 = *((_DWORD *)j + 82);
      if ((v10 & 0x20) != 0)
        *((_DWORD *)j + 82) = v10 & 0xFFFFFFCF | 0x10;
    }
  }
  return result;
}

uint64_t sub_20F302D9C(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  void *p_p;
  uint64_t v42;
  char v43;
  size_t v44;
  void **v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  size_t v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  const char *v56;
  size_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  size_t v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  size_t v72;
  size_t v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  const char *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  const char *v128;
  const char *v129;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v132;
  int v133;
  const char *v134;
  int v135;
  const char *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void *__dst[2];
  int64_t v140;
  uint64_t v141;
  __int128 v142;
  _OWORD v143[2];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _DWORD v152[74];
  char v153;
  int v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  char *v157;
  std::__shared_weak_count *v158;
  _QWORD *v159;
  __int128 v160;
  _BYTE v161[24];
  __int128 v162;
  void *v163[2];
  unint64_t v164;
  char v165;
  _QWORD v166[5];

  v5 = result;
  v166[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(void **)(result + 56);
  if (v6)
  {
    v7 = *((_OWORD *)a2 + 1);
    v142 = *(_OWORD *)a2;
    v143[0] = v7;
    *(_OWORD *)((char *)v143 + 12) = *(_OWORD *)((char *)a2 + 28);
    v8 = *((_OWORD *)a2 + 8);
    v148 = *((_OWORD *)a2 + 7);
    v149 = v8;
    v9 = *((_OWORD *)a2 + 10);
    v150 = *((_OWORD *)a2 + 9);
    v151 = v9;
    v10 = *((_OWORD *)a2 + 4);
    v144 = *((_OWORD *)a2 + 3);
    v145 = v10;
    v11 = *((_OWORD *)a2 + 6);
    v146 = *((_OWORD *)a2 + 5);
    v147 = v11;
    memcpy(v152, a2 + 22, 0x120uLL);
    v152[72] = *((_DWORD *)a2 + 116);
    LOBYTE(v152[73]) = *((_BYTE *)a2 + 468);
    v154 = 2;
    __p = v6;
    *(_QWORD *)v161 = &__p;
    result = sub_20F22D258((uint64_t **)v161, (uint64_t)&v142);
    if (v154 != -1)
      result = ((uint64_t (*)(_BYTE *, __int128 *))off_24C9FD788[v154])(v161, &v142);
  }
  v12 = *(_QWORD *)(v5 + 72);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 80);
    v14 = *(_QWORD *)(v12 + 88);
    if (v13 != v14)
    {
      v15 = *a2;
      v16 = *((_DWORD *)a2 + 2);
      v17 = a2[3];
      v18 = *((_DWORD *)a2 + 8);
      do
      {
        if (*(_QWORD *)v13 == v15 && *(_DWORD *)(v13 + 8) == v16
          || *(_QWORD *)v13 == v17 && *(_DWORD *)(v13 + 8) == v18)
        {
          *(_BYTE *)(v13 + 16) = 1;
        }
        v13 += 24;
      }
      while (v13 != v14);
    }
  }
  v19 = *(_QWORD *)(v5 + 64);
  if (v19)
  {
    v20 = v19 + 56;
    v21 = *((_OWORD *)a2 + 1);
    v142 = *(_OWORD *)a2;
    v143[0] = v21;
    *(_OWORD *)((char *)v143 + 12) = *(_OWORD *)((char *)a2 + 28);
    v22 = *((_OWORD *)a2 + 8);
    v148 = *((_OWORD *)a2 + 7);
    v149 = v22;
    v23 = *((_OWORD *)a2 + 10);
    v150 = *((_OWORD *)a2 + 9);
    v151 = v23;
    v24 = *((_OWORD *)a2 + 4);
    v144 = *((_OWORD *)a2 + 3);
    v145 = v24;
    v25 = *((_OWORD *)a2 + 6);
    v146 = *((_OWORD *)a2 + 5);
    v147 = v25;
    memcpy(v152, a2 + 22, 0x125uLL);
    v153 = 1;
    result = (uint64_t)sub_20F22EEA0(v20, &v142);
    v26 = *(unsigned __int8 *)(a3 + 23);
    if ((v26 & 0x80u) != 0)
      v26 = *(_QWORD *)(a3 + 8);
    if (v26)
    {
      sub_20F2FC0E0(&v141);
      result = v141;
      if (**(int **)(v141 + 56) <= 2)
      {
        v27 = *(unsigned __int8 *)(v141 + 72);
        result = sub_20E8C31DC(v141, "OSLogSurrogateAppender", 1, 0);
        v28 = result;
        if (v27 || result)
        {
          sub_20E863438((uint64_t)&v142);
          v29 = sub_20E86A980(v143, (uint64_t)"----transmit reloc_result from ", 31);
          v30 = *(char *)(a3 + 23);
          if (v30 >= 0)
            v31 = a3;
          else
            v31 = *(_QWORD *)a3;
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a3 + 23);
          else
            v32 = *(_QWORD *)(a3 + 8);
          v33 = sub_20E86A980(v29, v31, v32);
          v34 = sub_20E86A980(v33, (uint64_t)" ", 1);
          v35 = *((_DWORD *)a2 + 2);
          __p = (void *)*a2;
          LODWORD(rep) = v35;
          sub_210216370((uint64_t)&__p);
          if (v161[23] >= 0)
            v36 = v161;
          else
            v36 = *(_BYTE **)v161;
          if (v161[23] >= 0)
            v37 = v161[23];
          else
            v37 = *(_QWORD *)&v161[8];
          v38 = sub_20E86A980(v34, (uint64_t)v36, v37);
          v39 = sub_20E86A980(v38, (uint64_t)"<->", 3);
          v40 = *((_DWORD *)a2 + 8);
          *(_QWORD *)&v155 = a2[3];
          DWORD2(v155) = v40;
          sub_210216370((uint64_t)&v155);
          if (v132 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v132 >= 0)
            v42 = HIBYTE(v132);
          else
            v42 = rep;
          sub_20E86A980(v39, (uint64_t)p_p, v42);
          if (SHIBYTE(v132) < 0)
          {
            operator delete(__p);
            if ((v161[23] & 0x80000000) == 0)
            {
LABEL_41:
              v43 = BYTE8(v148);
              if ((BYTE8(v148) & 0x10) == 0)
                goto LABEL_42;
              goto LABEL_46;
            }
          }
          else if ((v161[23] & 0x80000000) == 0)
          {
            goto LABEL_41;
          }
          operator delete(*(void **)v161);
          v43 = BYTE8(v148);
          if ((BYTE8(v148) & 0x10) == 0)
          {
LABEL_42:
            if ((v43 & 8) == 0)
            {
              v44 = 0;
              HIBYTE(v140) = 0;
              v45 = __dst;
              goto LABEL_56;
            }
            v47 = (const void *)*((_QWORD *)&v143[1] + 1);
            v44 = *((_QWORD *)&v144 + 1) - *((_QWORD *)&v143[1] + 1);
            if (*((_QWORD *)&v144 + 1) - *((_QWORD *)&v143[1] + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_101:
              sub_20E860B7C();
LABEL_49:
            if (v44 >= 0x17)
            {
              v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v44 | 7) != 0x17)
                v48 = v44 | 7;
              v49 = v48 + 1;
              v45 = (void **)operator new(v48 + 1);
              __dst[1] = (void *)v44;
              v140 = v49 | 0x8000000000000000;
              __dst[0] = v45;
            }
            else
            {
              HIBYTE(v140) = v44;
              v45 = __dst;
              if (!v44)
              {
LABEL_56:
                *((_BYTE *)v45 + v44) = 0;
                __p = &v141;
                rep = std::chrono::steady_clock::now().__d_.__rep_;
                v132 = std::chrono::system_clock::now().__d_.__rep_;
                v133 = 2;
                v134 = "unknown file";
                v135 = 1638;
                v137 = 0;
                v138 = 0;
                v136 = "unknown function";
                if (v140 >= 0)
                  v50 = (const char *)__dst;
                else
                  v50 = (const char *)__dst[0];
                v51 = *(_QWORD *)__p;
                v52 = (const char *)(*(_QWORD *)__p + 16);
                v129 = v52;
                if (*(char *)(*(_QWORD *)__p + 39) < 0)
                {
                  v52 = *(const char **)(v51 + 16);
                  v53 = *(_QWORD *)(v51 + 24);
                  v55 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v55 & 1) != 0)
                    goto LABEL_63;
                }
                else
                {
                  v53 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
                  v54 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v54 & 1) != 0)
                    goto LABEL_63;
                }
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v161);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v161);
                  if ((_BYTE)v162 && (v161[23] & 0x80000000) != 0)
                    operator delete(*(void **)v161);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
LABEL_63:
                if (byte_254A4A4F8[23] >= 0)
                  v56 = byte_254A4A4F8;
                else
                  v56 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v57 = byte_254A4A4F8[23];
                else
                  v57 = *(_QWORD *)&byte_254A4A4F8[8];
                *(_QWORD *)v161 = os_log_create(v56, v52);
                v58 = &v161[8];
                if (v57 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v57 >= 0x17)
                {
                  v128 = v52;
                  v59 = v51;
                  v60 = v28;
                  v61 = v50;
                  v62 = v27;
                  v63 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v57 | 7) != 0x17)
                    v63 = v57 | 7;
                  v64 = v63 + 1;
                  v58 = operator new(v63 + 1);
                  *(_QWORD *)&v161[16] = v57;
                  *(_QWORD *)&v162 = v64 | 0x8000000000000000;
                  *(_QWORD *)&v161[8] = v58;
                  v27 = v62;
                  v50 = v61;
                  v28 = v60;
                  v51 = v59;
                  v52 = v128;
                }
                else
                {
                  BYTE7(v162) = v57;
                  if (!v57)
                  {
LABEL_77:
                    v58[v57] = 0;
                    BYTE8(v162) = 1;
                    v65 = v163;
                    if (v53 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v53 >= 0x17)
                    {
                      v66 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v53 | 7) != 0x17)
                        v66 = v53 | 7;
                      v67 = v66 + 1;
                      v65 = (void **)operator new(v66 + 1);
                      v163[1] = (void *)v53;
                      v164 = v67 | 0x8000000000000000;
                      v163[0] = v65;
                    }
                    else
                    {
                      HIBYTE(v164) = v53;
                      if (!v53)
                      {
LABEL_85:
                        *((_BYTE *)v65 + v53) = 0;
                        v165 = 1;
                        v68 = *(NSObject **)v161;
                        if (SHIBYTE(v164) < 0)
                          operator delete(v163[0]);
                        if (BYTE8(v162) && SBYTE7(v162) < 0)
                          operator delete(*(void **)&v161[8]);
                        if (*(_QWORD *)v161)
                          os_release(*(void **)v161);
                        if (!v28 || !*(_QWORD *)(v28 + 24))
                        {
                          os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG);
                          *(_DWORD *)v161 = 136315138;
                          *(_QWORD *)&v161[4] = v50;
                          v75 = (void *)_os_log_send_and_compose_impl();
                          if (v75)
                            free(v75);
                          goto LABEL_166;
                        }
                        v69 = _os_log_pack_size();
                        v70 = (std::__shared_weak_count_vtbl *)operator new(v69, (std::align_val_t)8uLL);
                        v71 = (std::__shared_weak_count *)operator new();
                        v71->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v71->__shared_owners_ = 0;
                        v71->__shared_weak_owners_ = 0;
                        v71[1].__vftable = v70;
                        *(_QWORD *)&v155 = v70;
                        *((_QWORD *)&v155 + 1) = v70;
                        v157 = 0;
                        v158 = 0;
                        v156 = v71;
                        v72 = strlen(v50);
                        if (v72 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        v73 = v72;
                        if (v72 >= 0x17)
                        {
                          v76 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v72 | 7) != 0x17)
                            v76 = v72 | 7;
                          v77 = v76 + 1;
                          v74 = operator new(v76 + 1);
                          *(_QWORD *)&v160 = v73;
                          *((_QWORD *)&v160 + 1) = v77 | 0x8000000000000000;
                          v159 = v74;
                        }
                        else
                        {
                          HIBYTE(v160) = v72;
                          v74 = &v159;
                          if (!v72)
                          {
LABEL_106:
                            *((_BYTE *)v74 + v73) = 0;
                            v78 = v159;
                            v166[0] = v160;
                            *(_QWORD *)((char *)v166 + 7) = *(_QWORD *)((char *)&v160 + 7);
                            v79 = HIBYTE(v160);
                            v80 = operator new(0x38uLL);
                            v80[1] = 0;
                            v80[2] = 0;
                            v80[3] = off_24C9ABC20;
                            *v80 = &off_24C9ABBD0;
                            v81 = v166[0];
                            v80[4] = v78;
                            v80[5] = v81;
                            *(_QWORD *)((char *)v80 + 47) = *(_QWORD *)((char *)v166 + 7);
                            *((_BYTE *)v80 + 55) = v79;
                            v166[0] = 0;
                            *(_QWORD *)((char *)v166 + 7) = 0;
                            v82 = v158;
                            v157 = (char *)(v80 + 3);
                            v158 = (std::__shared_weak_count *)v80;
                            if (v82)
                            {
                              p_shared_owners = (unint64_t *)&v82->__shared_owners_;
                              do
                                v84 = __ldaxr(p_shared_owners);
                              while (__stlxr(v84 - 1, p_shared_owners));
                              if (!v84)
                              {
                                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                std::__shared_weak_count::__release_weak(v82);
                              }
                            }
                            *(_OWORD *)v161 = v155;
                            v85 = v157;
                            *(_QWORD *)&v161[16] = v156;
                            if (v156)
                            {
                              v86 = (unint64_t *)&v156->__shared_owners_;
                              do
                                v87 = __ldxr(v86);
                              while (__stxr(v87 + 1, v86));
                            }
                            v88 = v158;
                            *(_QWORD *)&v162 = v85;
                            *((_QWORD *)&v162 + 1) = v158;
                            if (v158)
                            {
                              v89 = (unint64_t *)&v158->__shared_owners_;
                              do
                                v90 = __ldxr(v89);
                              while (__stxr(v90 + 1, v89));
                              v163[0] = v85;
                              do
                                v91 = __ldaxr(v89);
                              while (__stlxr(v91 - 1, v89));
                              if (!v91)
                              {
                                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                                std::__shared_weak_count::__release_weak(v88);
                              }
                            }
                            else
                            {
                              v163[0] = v85;
                            }
                            v92 = v156;
                            if (v156)
                            {
                              v93 = (unint64_t *)&v156->__shared_owners_;
                              do
                                v94 = __ldaxr(v93);
                              while (__stlxr(v94 - 1, v93));
                              if (!v94)
                              {
                                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                                std::__shared_weak_count::__release_weak(v92);
                              }
                            }
                            v95 = *(_QWORD *)v161;
                            if (*((char *)v163[0] + 31) >= 0)
                              v96 = (char *)v163[0] + 8;
                            else
                              v96 = (char *)*((_QWORD *)v163[0] + 1);
                            v97 = _os_log_pack_fill();
                            *(_DWORD *)v97 = 136315138;
                            *(_QWORD *)(v97 + 4) = v96;
                            v98 = operator new();
                            v99 = *(unsigned __int8 *)(v51 + 39);
                            v100 = *(const char **)(v51 + 16);
                            v101 = *(_QWORD *)(v51 + 24);
                            v102 = v162;
                            *(_OWORD *)(v98 + 8) = *(_OWORD *)&v161[8];
                            if ((v99 & 0x80u) != 0)
                              v99 = v101;
                            else
                              v100 = v129;
                            *(_QWORD *)v98 = v95;
                            *(_QWORD *)&v161[8] = 0;
                            *(_QWORD *)&v161[16] = 0;
                            *(_OWORD *)(v98 + 24) = v102;
                            v162 = 0uLL;
                            *(_QWORD *)(v98 + 40) = v100;
                            *(_QWORD *)(v98 + 48) = v99;
                            *(_BYTE *)(v98 + 56) = 2;
                            v159 = 0;
                            *(_QWORD *)&v155 = v98;
                            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v155);
                            v103 = v155;
                            *(_QWORD *)&v155 = 0;
                            if (v103)
                            {
                              v104 = *(std::__shared_weak_count **)(v103 + 32);
                              if (v104)
                              {
                                v105 = (unint64_t *)&v104->__shared_owners_;
                                do
                                  v106 = __ldaxr(v105);
                                while (__stlxr(v106 - 1, v105));
                                if (!v106)
                                {
                                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                                  std::__shared_weak_count::__release_weak(v104);
                                }
                              }
                              v107 = *(std::__shared_weak_count **)(v103 + 16);
                              if (v107)
                              {
                                v108 = (unint64_t *)&v107->__shared_owners_;
                                do
                                  v109 = __ldaxr(v108);
                                while (__stlxr(v109 - 1, v108));
                                if (!v109)
                                {
                                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                                  std::__shared_weak_count::__release_weak(v107);
                                }
                              }
                              MEMORY[0x212BC6398](v103, 0x10F0C40B62ED6C6);
                              v110 = v159;
                              v159 = 0;
                              if (v110)
                              {
                                v111 = (std::__shared_weak_count *)v110[4];
                                if (v111)
                                {
                                  v112 = (unint64_t *)&v111->__shared_owners_;
                                  do
                                    v113 = __ldaxr(v112);
                                  while (__stlxr(v113 - 1, v112));
                                  if (!v113)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                                    std::__shared_weak_count::__release_weak(v111);
                                  }
                                }
                                v114 = (std::__shared_weak_count *)v110[2];
                                if (v114)
                                {
                                  v115 = (unint64_t *)&v114->__shared_owners_;
                                  do
                                    v116 = __ldaxr(v115);
                                  while (__stlxr(v116 - 1, v115));
                                  if (!v116)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                                    std::__shared_weak_count::__release_weak(v114);
                                  }
                                }
                                MEMORY[0x212BC6398](v110, 0x10F0C40B62ED6C6);
                              }
                            }
                            v117 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
                            if (*((_QWORD *)&v162 + 1))
                            {
                              v118 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
                              do
                                v119 = __ldaxr(v118);
                              while (__stlxr(v119 - 1, v118));
                              if (!v119)
                              {
                                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                std::__shared_weak_count::__release_weak(v117);
                              }
                            }
                            v120 = *(std::__shared_weak_count **)&v161[16];
                            if (*(_QWORD *)&v161[16])
                            {
                              v121 = (unint64_t *)(*(_QWORD *)&v161[16] + 8);
                              do
                                v122 = __ldaxr(v121);
                              while (__stlxr(v122 - 1, v121));
                              if (!v122)
                              {
                                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                                std::__shared_weak_count::__release_weak(v120);
                              }
                            }
LABEL_166:
                            if (v27)
                            {
                              v123 = (const char *)__dst;
                              if (v140 < 0)
                                v123 = (const char *)__dst[0];
                              sub_20E8C003C((uint64_t)&__p, "%s", v123);
                              sub_20E863570((uint64_t)&__p);
                            }
                            sub_20E863570((uint64_t)&__p);
                            v124 = v138;
                            if (v138)
                            {
                              v125 = (unint64_t *)&v138->__shared_owners_;
                              do
                                v126 = __ldaxr(v125);
                              while (__stlxr(v126 - 1, v125));
                              if (!v126)
                              {
                                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                                std::__shared_weak_count::__release_weak(v124);
                              }
                            }
                            if (SHIBYTE(v140) < 0)
                              operator delete(__dst[0]);
                            *(_QWORD *)&v142 = *MEMORY[0x24BEDB7F0];
                            v127 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                            *(_QWORD *)((char *)&v143[-1] + *(_QWORD *)(v142 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
                            *(_QWORD *)&v143[0] = v127;
                            *((_QWORD *)&v143[0] + 1) = MEMORY[0x24BEDB848] + 16;
                            if (SHIBYTE(v147) < 0)
                              operator delete(*((void **)&v146 + 1));
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            return MEMORY[0x212BC6290](&v149);
                          }
                        }
                        memcpy(v74, v50, v73);
                        goto LABEL_106;
                      }
                    }
                    memmove(v65, v52, v53);
                    goto LABEL_85;
                  }
                }
                memmove(v58, v56, v57);
                goto LABEL_77;
              }
            }
            memmove(v45, v47, v44);
            goto LABEL_56;
          }
LABEL_46:
          v46 = v148;
          if ((unint64_t)v148 < *((_QWORD *)&v145 + 1))
          {
            *(_QWORD *)&v148 = *((_QWORD *)&v145 + 1);
            v46 = *((_QWORD *)&v145 + 1);
          }
          v47 = (const void *)v145;
          v44 = v46 - v145;
          if ((unint64_t)(v46 - v145) > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_101;
          goto LABEL_49;
        }
      }
    }
  }
  return result;
}

void sub_20F303A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 168) && *(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a31 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F303C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20EC46050((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F303C30(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t *v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  double *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int8x8_t v38;
  uint8x8_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  unsigned int v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;

  sub_20F3376BC(a1[10], 1, 1, a2, a3);
  v5 = a1[6];
  if (v5)
  {
    v6 = *(_QWORD **)(v5 + 56);
    v7 = *(_OWORD *)(v5 + 64);
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    v8 = (_QWORD *)v7;
    sub_20EB0F560(a3 + 152, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 160) - *(_QWORD *)(a3 + 152)) >> 4)- 0x30C30C30C30C30C3 * ((uint64_t)(v7 - (_QWORD)v6) >> 3));
    if (v6 != v8)
    {
      v9 = v6;
      do
      {
        v11 = a1[10];
        v12 = v9[1];
        v13 = *(_QWORD *)(v11 + 2824);
        v14 = *(_QWORD *)(v11 + 2832);
        if (v13 != v14)
        {
          while (1)
          {
            v15 = *(_QWORD *)(v13 + 16);
            if (v15)
            {
              if (*(_QWORD *)(v15 + 160) == v12)
                break;
            }
            v13 += 4472;
            if (v13 == v14)
              goto LABEL_8;
          }
        }
        if (v13 != v14 && v13 != 0)
        {
          v17 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(v13 + 16) + 424) + 56);
          v18 = (uint64_t *)*v17;
          if (*v17)
          {
            v19 = *((_DWORD *)v9 + 4);
            v20 = v17;
            do
            {
              v21 = v18[4];
              if (v21 < v12)
              {
                ++v18;
              }
              else if (v21 == v12)
              {
                if (*((_DWORD *)v18 + 10) < v19)
                  ++v18;
                else
                  v20 = v18;
              }
              else
              {
                v20 = v18;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
            if (v20 != v17)
            {
              v22 = v20[4];
              if (v12 >= v22 && (v12 != v22 || *((_DWORD *)v20 + 10) <= v19))
              {
                v23 = v20[6];
                if (v23)
                {
                  v24 = *(double **)(a3 + 160);
                  v25 = *(double *)(v23 + 824);
                  if ((unint64_t)v24 >= *(_QWORD *)(a3 + 168))
                  {
                    v10 = sub_20F312808((double **)(a3 + 152), (__int128 *)v9, v25);
                  }
                  else
                  {
                    *v24 = v25;
                    sub_20EE6CA98((uint64_t)(v24 + 1), (__int128 *)v9);
                    v10 = v24 + 22;
                    *(_QWORD *)(a3 + 160) = v24 + 22;
                  }
                  *(_QWORD *)(a3 + 160) = v10;
                }
              }
            }
          }
        }
LABEL_8:
        v9 += 21;
      }
      while (v9 != v8);
      if (!v6)
        goto LABEL_38;
      do
      {
        v8 -= 21;
        sub_20E991548(v8);
      }
      while (v8 != v6);
      goto LABEL_37;
    }
    if (v6)
LABEL_37:
      operator delete(v6);
  }
LABEL_38:
  v26 = a1[5];
  if (!v26)
    return;
  v27 = *(_QWORD **)(v26 + 56);
  v28 = *(_OWORD *)(v26 + 64);
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 56) = 0;
  v29 = (_QWORD *)v28;
  sub_20EB0F560(a3 + 152, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 160) - *(_QWORD *)(a3 + 152)) >> 4)- 0x30C30C30C30C30C3 * ((uint64_t)(v28 - (_QWORD)v27) >> 3));
  if (v27 == v29)
  {
    if (v27)
      goto LABEL_97;
    return;
  }
  v30 = v27;
  while (2)
  {
    v32 = a1[10];
    v33 = v30[1];
    v34 = *(_QWORD **)(v32 + 2824);
    v35 = *(_QWORD **)(v32 + 2832);
    if (v34 != v35)
    {
      while (1)
      {
        v36 = v34[2];
        if (v36)
        {
          if (*(_QWORD *)(v36 + 160) == v33)
            break;
        }
        v34 += 559;
        if (v34 == v35)
          goto LABEL_56;
      }
    }
    if (v34 != v35 && v34 != 0)
      goto LABEL_78;
LABEL_56:
    v38 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v38)
      goto LABEL_45;
    v39 = (uint8x8_t)vcnt_s8(v38);
    v39.i16[0] = vaddlv_u8(v39);
    if (v39.u32[0] > 1uLL)
    {
      v40 = v30[1];
      if (v33 >= *(_QWORD *)&v38)
        v40 = v33 % *(_QWORD *)&v38;
    }
    else
    {
      v40 = (*(_QWORD *)&v38 - 1) & v33;
    }
    v41 = *(_QWORD **)(*a1 + 8 * v40);
    if (!v41)
      goto LABEL_45;
    v42 = (_QWORD *)*v41;
    if (!v42)
      goto LABEL_45;
    if (v39.u32[0] < 2uLL)
    {
      v43 = *(_QWORD *)&v38 - 1;
      while (1)
      {
        v45 = v42[1];
        if (v33 == v45)
        {
          if (v42[2] == v33)
            goto LABEL_77;
        }
        else if ((v45 & v43) != v40)
        {
          goto LABEL_45;
        }
        v42 = (_QWORD *)*v42;
        if (!v42)
          goto LABEL_45;
      }
    }
    while (1)
    {
      v44 = v42[1];
      if (v33 == v44)
        break;
      if (v44 >= *(_QWORD *)&v38)
        v44 %= *(_QWORD *)&v38;
      if (v44 != v40)
        goto LABEL_45;
LABEL_66:
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_45;
    }
    if (v42[2] != v33)
      goto LABEL_66;
LABEL_77:
    v34 = v42 + 3;
LABEL_78:
    v46 = (_QWORD *)(**(_QWORD **)(v34[2] + 424) + 56);
    v47 = (uint64_t *)*v46;
    if (*v46)
    {
      v48 = *((_DWORD *)v30 + 4);
      v49 = v46;
      do
      {
        v50 = v47[4];
        if (v50 < v33)
        {
          ++v47;
        }
        else if (v50 == v33)
        {
          if (*((_DWORD *)v47 + 10) < v48)
            ++v47;
          else
            v49 = v47;
        }
        else
        {
          v49 = v47;
        }
        v47 = (uint64_t *)*v47;
      }
      while (v47);
      if (v49 != v46)
      {
        v51 = v49[4];
        if (v33 >= v51 && (v33 != v51 || *((_DWORD *)v49 + 10) <= v48))
        {
          v52 = v49[6];
          if (v52)
          {
            v53 = *(double **)(a3 + 160);
            v54 = *(double *)(v52 + 824);
            if ((unint64_t)v53 >= *(_QWORD *)(a3 + 168))
            {
              v31 = sub_20F312808((double **)(a3 + 152), (__int128 *)v30, v54);
            }
            else
            {
              *v53 = v54;
              sub_20EE6CA98((uint64_t)(v53 + 1), (__int128 *)v30);
              v31 = v53 + 22;
              *(_QWORD *)(a3 + 160) = v53 + 22;
            }
            *(_QWORD *)(a3 + 160) = v31;
          }
        }
      }
    }
LABEL_45:
    v30 += 21;
    if (v30 != v29)
      continue;
    break;
  }
  if (v27)
  {
    do
    {
      v29 -= 21;
      sub_20E991548(v29);
    }
    while (v29 != v27);
LABEL_97:
    operator delete(v27);
  }
}

void sub_20F3040E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 160) = v3;
  sub_20F304134((void **)va);
  sub_20EAF9A2C(v2);
  _Unwind_Resume(a1);
}

void sub_20F304118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20F304134((void **)va);
  sub_20EAF9A2C(v2);
  _Unwind_Resume(a1);
}

void **sub_20F304134(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_20E991548(v3 - 21);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F30418C(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  char *v32;
  void *v33;
  char *v35;
  void *v37[2];
  uint64_t v38;
  std::string __p;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  char v47;
  void *v48;
  void *v49;
  uint64_t v50;
  char v51;
  _OWORD v52[2];
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;

  v4 = (_QWORD *)a1[2];
  if (!v4)
    return 0;
  while (1)
  {
    v8 = a1[10];
    if (*(_BYTE *)(v8 + 2499))
    {
      v9 = v4[5];
      v10 = *(_QWORD *)(v9 + 208);
      v11 = *(_QWORD *)(v9 + 216);
      if (v10 != v11)
      {
        v12 = *(_QWORD *)(v8 + 2832);
        if (*(_QWORD *)(v8 + 2824) != v12)
        {
          do
          {
            v18 = *(_QWORD *)(v8 + 2824);
            while (1)
            {
              v19 = *(_QWORD *)(v18 + 16);
              if (v19)
              {
                if (*(_QWORD *)(v19 + 160) == *(_QWORD *)(v10 + 24))
                  break;
              }
              v18 += 4472;
              if (v18 == v12)
                goto LABEL_14;
            }
            if (v18 != v12)
              goto LABEL_23;
LABEL_14:
            v10 += 472;
          }
          while (v10 != v11);
        }
      }
    }
    sub_20FCCBC60(v4 + 2, &__p);
    v13 = *(_QWORD *)(v8 + 2824);
    v14 = *(_QWORD *)(v8 + 2832);
    if (v13 == v14)
    {
      v16 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      do
      {
        v15 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v13 + 192) + 8), (uint64_t)&__p);
        v16 = v15 != 0;
        v13 += 4472;
        if (v15)
          v17 = 1;
        else
          v17 = v13 == v14;
      }
      while (!v17);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_12:
        if (!v16)
          break;
        goto LABEL_23;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v16)
      break;
LABEL_23:
    v4 = (_QWORD *)*v4;
    if (!v4)
      return 0;
  }
  sub_20F336D8C((_QWORD *)a1[10], (uint64_t)a1, a2, a3, a4, &v57);
  v21 = v57;
  v35 = v58;
  v20 = v57 != v58;
  if (v57 == v58 || !a1[6])
    goto LABEL_41;
  while (2)
  {
    v22 = *(_OWORD *)v21;
    *(_OWORD *)((char *)v52 + 12) = *(_OWORD *)(v21 + 12);
    v52[0] = v22;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v24 = (_BYTE *)*((_QWORD *)v21 + 4);
    v23 = (_BYTE *)*((_QWORD *)v21 + 5);
    v25 = v23 - v24;
    if (v23 == v24)
    {
      v27 = 0;
      v26 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v25 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v26 = (char *)operator new(v25);
      v27 = &v26[8 * (v25 >> 3)];
      v53 = v26;
      v55 = v27;
      memcpy(v26, v24, v25 - 4);
      v54 = v27;
    }
    v28 = *((_QWORD *)v21 + 7);
    v41 = -1;
    __p.__r_.__value_.__r.__words[0] = *((_QWORD *)&v52[0] + 1);
    v42 = *(_QWORD *)&v52[0];
    v40 = DWORD2(v52[1]);
    v56 = v28;
    LOBYTE(v46) = 0;
    v47 = 0;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    v51 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)v52 + 8);
    v43 = -1;
    v44 = -1;
    v45 = 1;
    sub_20F27AE20(&v48, v26, v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3));
    v46 = *(_DWORD *)a4;
    v47 = *(_BYTE *)(a4 + 4);
    v29 = a1[6];
    v37[0] = 0;
    v37[1] = 0;
    v38 = 0;
    sub_20F23216C(v29, (uint64_t)&__p, (uint64_t)v37);
    if (SHIBYTE(v38) < 0)
    {
      operator delete(v37[0]);
      v30 = v48;
      if (v48)
      {
LABEL_35:
        v49 = v30;
        operator delete(v30);
      }
    }
    else
    {
      v30 = v48;
      if (v48)
        goto LABEL_35;
    }
    if (v26)
      operator delete(v26);
    v21 += 64;
    if (v21 != v35)
      continue;
    break;
  }
  v21 = v57;
  v20 = v20;
LABEL_41:
  if (v21)
  {
    v31 = v58;
    v32 = v21;
    if (v58 != v21)
    {
      do
      {
        v33 = (void *)*((_QWORD *)v31 - 4);
        if (v33)
        {
          *((_QWORD *)v31 - 3) = v33;
          operator delete(v33);
        }
        v31 -= 64;
      }
      while (v31 != v21);
      v32 = v57;
    }
    v58 = v21;
    operator delete(v32);
  }
  return v20;
}

void sub_20F304500(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F26EE18((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20F304514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;

  if (__p)
    operator delete(__p);
  sub_20F26EE18((void **)(v39 - 112));
  _Unwind_Resume(a1);
}

void sub_20F304588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F3045A4(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  size_t v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v27;
  size_t v28;
  void **v29;
  unint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  size_t v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  size_t v52;
  size_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v77;
  size_t v78;
  void **p_dst;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  const char *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  const void **v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  size_t v123;
  unsigned __int8 v124;
  const char *v125;
  size_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  size_t v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  size_t v137;
  size_t v138;
  _QWORD *v139;
  void *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char v145;
  _QWORD *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  char *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  const char *v189;
  unint64_t *v190;
  uint64_t v191;
  unint64_t v193;
  const void **v194;
  const void *v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  const char *v200;
  size_t v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  size_t v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  size_t v215;
  size_t v216;
  _QWORD *v217;
  void *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  char v223;
  _QWORD *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *p_shared_owners;
  unint64_t v228;
  char *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  _QWORD *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  const char *v267;
  unint64_t *v268;
  const char *v269;
  const char *v270;
  int v271;
  const char *v272;
  int v273;
  uint64_t *v274;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v276;
  int v277;
  const char *v278;
  int v279;
  const char *v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  void **__dst;
  size_t v284;
  int64_t v285;
  _QWORD v286[2];
  _QWORD v287[3];
  _QWORD v288[2];
  unint64_t v289;
  const void *v290;
  unint64_t v291;
  void *__p;
  char v293;
  unint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  __int128 v298;
  std::__shared_weak_count *v299;
  char *v300;
  std::__shared_weak_count *v301;
  _QWORD *v302;
  __int128 v303;
  _BYTE v304[24];
  __int128 v305;
  char *v306;
  size_t v307;
  unint64_t v308;
  char v309;
  _QWORD v310[5];

  v310[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[10];
  v3 = *(_QWORD *)(v2 + 2824);
  v4 = *(_QWORD *)(v2 + 2832);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 160) == a2)
          break;
      }
      v3 += 4472;
      if (v3 == v4)
        goto LABEL_11;
    }
  }
  if (v3 == v4 || v3 == 0)
  {
LABEL_11:
    v7 = (int8x8_t)a1[1];
    if (v7)
    {
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = a2;
        if (*(_QWORD *)&v7 <= a2)
          v9 = a2 % *(_QWORD *)&v7;
      }
      else
      {
        v9 = (*(_QWORD *)&v7 - 1) & a2;
      }
      v18 = *(_QWORD **)(*a1 + 8 * v9);
      if (v18)
      {
        v19 = (_QWORD *)*v18;
        if (v19)
        {
          if (v8.u32[0] < 2uLL)
          {
            v20 = *(_QWORD *)&v7 - 1;
            while (1)
            {
              v22 = v19[1];
              if (v22 == a2)
              {
                if (v19[2] == a2)
                  goto LABEL_103;
              }
              else if ((v22 & v20) != v9)
              {
                goto LABEL_41;
              }
              v19 = (_QWORD *)*v19;
              if (!v19)
                goto LABEL_41;
            }
          }
          do
          {
            v21 = v19[1];
            if (v21 == a2)
            {
              if (v19[2] == a2)
              {
LABEL_103:
                v56 = *(_QWORD *)(v19[5] + 424);
                if (v56 && *(_QWORD *)(*(_QWORD *)v56 + 64))
                  return v19 + 3;
                sub_20F2FC0E0(&v297);
                if (**(int **)(v297 + 56) > 4)
                  return 0;
                v73 = *(unsigned __int8 *)(v297 + 72);
                v74 = sub_20E8C31DC(v297, "OSLogSurrogateAppender", 1, 0);
                v75 = v74;
                if (!v73 && v74 == 0)
                  return 0;
                sub_20E863438((uint64_t)v286);
                sub_20E86A980(v287, (uint64_t)"Submap (", 8);
                v77 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v77, (uint64_t)") in modified list was empty.", 29);
                v273 = v73;
                if ((v295 & 0x10) != 0)
                {
                  v193 = v294;
                  if (v294 < v291)
                  {
                    v294 = v291;
                    v193 = v291;
                  }
                  v194 = &v290;
                }
                else
                {
                  if ((v295 & 8) == 0)
                  {
                    v78 = 0;
                    HIBYTE(v285) = 0;
                    p_dst = (void **)&__dst;
                    goto LABEL_336;
                  }
                  v194 = (const void **)v288;
                  v193 = v289;
                }
                v195 = *v194;
                v78 = v193 - (_QWORD)*v194;
                if (v78 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v78 >= 0x17)
                {
                  v196 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v78 | 7) != 0x17)
                    v196 = v78 | 7;
                  v197 = v196 + 1;
                  p_dst = (void **)operator new(v196 + 1);
                  v284 = v78;
                  v285 = v197 | 0x8000000000000000;
                  __dst = p_dst;
                }
                else
                {
                  HIBYTE(v285) = v193 - *(_BYTE *)v194;
                  p_dst = (void **)&__dst;
                  if (!v78)
                  {
LABEL_336:
                    *((_BYTE *)p_dst + v78) = 0;
                    v274 = &v297;
                    rep = std::chrono::steady_clock::now().__d_.__rep_;
                    v276 = std::chrono::system_clock::now().__d_.__rep_;
                    v277 = 4;
                    v278 = "unknown file";
                    v279 = 1980;
                    v281 = 0;
                    v282 = 0;
                    v280 = "unknown function";
                    if (v285 >= 0)
                      v198 = (const char *)&__dst;
                    else
                      v198 = (const char *)__dst;
                    v199 = *v274;
                    v200 = (const char *)(*v274 + 16);
                    v270 = v200;
                    if (*(char *)(*v274 + 39) < 0)
                    {
                      v200 = *(const char **)(v199 + 16);
                      v201 = *(_QWORD *)(v199 + 24);
                    }
                    else
                    {
                      v201 = *(unsigned __int8 *)(*v274 + 39);
                    }
                    v202 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)v304);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v304);
                      if ((_BYTE)v305 && (v304[23] & 0x80000000) != 0)
                        operator delete(*(void **)v304);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    if (byte_254A4A4F8[23] >= 0)
                      v203 = byte_254A4A4F8;
                    else
                      v203 = *(const char **)byte_254A4A4F8;
                    if (byte_254A4A4F8[23] >= 0)
                      v204 = byte_254A4A4F8[23];
                    else
                      v204 = *(_QWORD *)&byte_254A4A4F8[8];
                    *(_QWORD *)v304 = os_log_create(v203, v200);
                    v205 = &v304[8];
                    if (v204 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v204 >= 0x17)
                    {
                      v206 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v204 | 7) != 0x17)
                        v206 = v204 | 7;
                      v207 = v206 + 1;
                      v205 = operator new(v206 + 1);
                      *(_QWORD *)&v304[16] = v204;
                      *(_QWORD *)&v305 = v207 | 0x8000000000000000;
                      *(_QWORD *)&v304[8] = v205;
                    }
                    else
                    {
                      BYTE7(v305) = v204;
                      if (!v204)
                      {
LABEL_357:
                        v205[v204] = 0;
                        BYTE8(v305) = 1;
                        v208 = (char *)&v306;
                        if (v201 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        if (v201 >= 0x17)
                        {
                          v209 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v201 | 7) != 0x17)
                            v209 = v201 | 7;
                          v210 = v209 + 1;
                          v208 = (char *)operator new(v209 + 1);
                          v307 = v201;
                          v308 = v210 | 0x8000000000000000;
                          v306 = v208;
                        }
                        else
                        {
                          HIBYTE(v308) = v201;
                          if (!v201)
                          {
LABEL_365:
                            v208[v201] = 0;
                            v309 = 1;
                            v211 = *(NSObject **)v304;
                            if (SHIBYTE(v308) < 0)
                              operator delete(v306);
                            if (BYTE8(v305) && SBYTE7(v305) < 0)
                              operator delete(*(void **)&v304[8]);
                            if (*(_QWORD *)v304)
                              os_release(*(void **)v304);
                            if (v75 && *(_QWORD *)(v75 + 24))
                            {
                              v212 = _os_log_pack_size();
                              v213 = (std::__shared_weak_count_vtbl *)operator new(v212, (std::align_val_t)8uLL);
                              v214 = (std::__shared_weak_count *)operator new();
                              v214->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                              v214->__shared_owners_ = 0;
                              v214->__shared_weak_owners_ = 0;
                              v214[1].__vftable = v213;
                              *(_QWORD *)&v298 = v213;
                              *((_QWORD *)&v298 + 1) = v213;
                              v300 = 0;
                              v301 = 0;
                              v299 = v214;
                              v215 = strlen(v198);
                              if (v215 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              v216 = v215;
                              if (v215 >= 0x17)
                              {
                                v220 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v215 | 7) != 0x17)
                                  v220 = v215 | 7;
                                v221 = v220 + 1;
                                v217 = operator new(v220 + 1);
                                *(_QWORD *)&v303 = v216;
                                *((_QWORD *)&v303 + 1) = v221 | 0x8000000000000000;
                                v302 = v217;
                              }
                              else
                              {
                                HIBYTE(v303) = v215;
                                v217 = &v302;
                                if (!v215)
                                  goto LABEL_384;
                              }
                              memcpy(v217, v198, v216);
LABEL_384:
                              *((_BYTE *)v217 + v216) = 0;
                              v222 = v302;
                              v310[0] = v303;
                              *(_QWORD *)((char *)v310 + 7) = *(_QWORD *)((char *)&v303 + 7);
                              v223 = HIBYTE(v303);
                              v224 = operator new(0x38uLL);
                              v224[1] = 0;
                              v224[2] = 0;
                              v224[3] = off_24C9ABC20;
                              *v224 = &off_24C9ABBD0;
                              v225 = v310[0];
                              v224[4] = v222;
                              v224[5] = v225;
                              *(_QWORD *)((char *)v224 + 47) = *(_QWORD *)((char *)v310 + 7);
                              *((_BYTE *)v224 + 55) = v223;
                              v310[0] = 0;
                              *(_QWORD *)((char *)v310 + 7) = 0;
                              v226 = v301;
                              v300 = (char *)(v224 + 3);
                              v301 = (std::__shared_weak_count *)v224;
                              if (v226)
                              {
                                p_shared_owners = (unint64_t *)&v226->__shared_owners_;
                                do
                                  v228 = __ldaxr(p_shared_owners);
                                while (__stlxr(v228 - 1, p_shared_owners));
                                if (!v228)
                                {
                                  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                                  std::__shared_weak_count::__release_weak(v226);
                                }
                              }
                              *(_OWORD *)v304 = v298;
                              v229 = v300;
                              *(_QWORD *)&v304[16] = v299;
                              if (v299)
                              {
                                v230 = (unint64_t *)&v299->__shared_owners_;
                                do
                                  v231 = __ldxr(v230);
                                while (__stxr(v231 + 1, v230));
                              }
                              v232 = v301;
                              *(_QWORD *)&v305 = v229;
                              *((_QWORD *)&v305 + 1) = v301;
                              if (v301)
                              {
                                v233 = (unint64_t *)&v301->__shared_owners_;
                                do
                                  v234 = __ldxr(v233);
                                while (__stxr(v234 + 1, v233));
                                v306 = v229;
                                do
                                  v235 = __ldaxr(v233);
                                while (__stlxr(v235 - 1, v233));
                                if (!v235)
                                {
                                  ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                                  std::__shared_weak_count::__release_weak(v232);
                                }
                              }
                              else
                              {
                                v306 = v229;
                              }
                              v236 = v299;
                              if (v299)
                              {
                                v237 = (unint64_t *)&v299->__shared_owners_;
                                do
                                  v238 = __ldaxr(v237);
                                while (__stlxr(v238 - 1, v237));
                                if (!v238)
                                {
                                  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                                  std::__shared_weak_count::__release_weak(v236);
                                }
                              }
                              v239 = *(_QWORD *)v304;
                              if (v306[31] >= 0)
                                v240 = v306 + 8;
                              else
                                v240 = (char *)*((_QWORD *)v306 + 1);
                              v241 = _os_log_pack_fill();
                              *(_DWORD *)v241 = 136315138;
                              *(_QWORD *)(v241 + 4) = v240;
                              v242 = operator new();
                              v243 = *(unsigned __int8 *)(v199 + 39);
                              v244 = *(const char **)(v199 + 16);
                              v245 = *(_QWORD *)(v199 + 24);
                              v246 = v305;
                              *(_OWORD *)(v242 + 8) = *(_OWORD *)&v304[8];
                              if ((v243 & 0x80u) != 0)
                                v243 = v245;
                              else
                                v244 = v270;
                              *(_QWORD *)v242 = v239;
                              *(_QWORD *)&v304[8] = 0;
                              *(_QWORD *)&v304[16] = 0;
                              *(_OWORD *)(v242 + 24) = v246;
                              v305 = 0uLL;
                              *(_QWORD *)(v242 + 40) = v244;
                              *(_QWORD *)(v242 + 48) = v243;
                              *(_BYTE *)(v242 + 56) = 16;
                              v302 = 0;
                              *(_QWORD *)&v298 = v242;
                              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v75 + 24) + 40))(*(_QWORD *)(v75 + 24), &v298);
                              v247 = v298;
                              *(_QWORD *)&v298 = 0;
                              v219 = v273;
                              if (v247)
                              {
                                v248 = *(std::__shared_weak_count **)(v247 + 32);
                                if (v248)
                                {
                                  v249 = (unint64_t *)&v248->__shared_owners_;
                                  do
                                    v250 = __ldaxr(v249);
                                  while (__stlxr(v250 - 1, v249));
                                  if (!v250)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                                    std::__shared_weak_count::__release_weak(v248);
                                  }
                                }
                                v251 = *(std::__shared_weak_count **)(v247 + 16);
                                if (v251)
                                {
                                  v252 = (unint64_t *)&v251->__shared_owners_;
                                  do
                                    v253 = __ldaxr(v252);
                                  while (__stlxr(v253 - 1, v252));
                                  if (!v253)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                                    std::__shared_weak_count::__release_weak(v251);
                                  }
                                }
                                MEMORY[0x212BC6398](v247, 0x10F0C40B62ED6C6);
                                v254 = v302;
                                v302 = 0;
                                if (v254)
                                {
                                  v255 = (std::__shared_weak_count *)v254[4];
                                  if (v255)
                                  {
                                    v256 = (unint64_t *)&v255->__shared_owners_;
                                    do
                                      v257 = __ldaxr(v256);
                                    while (__stlxr(v257 - 1, v256));
                                    if (!v257)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                                      std::__shared_weak_count::__release_weak(v255);
                                    }
                                  }
                                  v258 = (std::__shared_weak_count *)v254[2];
                                  if (v258)
                                  {
                                    v259 = (unint64_t *)&v258->__shared_owners_;
                                    do
                                      v260 = __ldaxr(v259);
                                    while (__stlxr(v260 - 1, v259));
                                    if (!v260)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                                      std::__shared_weak_count::__release_weak(v258);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v254, 0x10F0C40B62ED6C6);
                                }
                              }
                              v261 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
                              if (*((_QWORD *)&v305 + 1))
                              {
                                v262 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
                                do
                                  v263 = __ldaxr(v262);
                                while (__stlxr(v263 - 1, v262));
                                if (!v263)
                                {
                                  ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                                  std::__shared_weak_count::__release_weak(v261);
                                }
                              }
                              v264 = *(std::__shared_weak_count **)&v304[16];
                              if (*(_QWORD *)&v304[16])
                              {
                                v265 = (unint64_t *)(*(_QWORD *)&v304[16] + 8);
                                do
                                  v266 = __ldaxr(v265);
                                while (__stlxr(v266 - 1, v265));
                                if (!v266)
                                {
                                  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                                  std::__shared_weak_count::__release_weak(v264);
                                }
                              }
                            }
                            else
                            {
                              os_log_type_enabled(v211, OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v304 = 136315138;
                              *(_QWORD *)&v304[4] = v198;
                              v218 = (void *)_os_log_send_and_compose_impl();
                              v219 = v273;
                              if (v218)
                                free(v218);
                            }
                            if (v219)
                            {
                              v267 = (const char *)&__dst;
                              if (v285 < 0)
                                v267 = (const char *)__dst;
                              sub_20E8C003C((uint64_t)&v274, "%s", v267);
                              sub_20E863570((uint64_t)&v274);
                            }
                            sub_20E863570((uint64_t)&v274);
                            v112 = v282;
                            if (v282)
                            {
                              v268 = (unint64_t *)&v282->__shared_owners_;
                              do
                                v114 = __ldaxr(v268);
                              while (__stlxr(v114 - 1, v268));
                              goto LABEL_315;
                            }
LABEL_317:
                            if (SHIBYTE(v285) < 0)
                              operator delete(__dst);
                            v286[0] = *MEMORY[0x24BEDB7F0];
                            v191 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                            *(_QWORD *)((char *)v286 + *(_QWORD *)(v286[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
                            v287[0] = v191;
                            v287[1] = MEMORY[0x24BEDB848] + 16;
                            if (v293 < 0)
                              operator delete(__p);
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            MEMORY[0x212BC6290](&v296);
                            return 0;
                          }
                        }
                        memmove(v208, v200, v201);
                        goto LABEL_365;
                      }
                    }
                    memmove(v205, v203, v204);
                    goto LABEL_357;
                  }
                }
                memmove(p_dst, v195, v78);
                goto LABEL_336;
              }
            }
            else
            {
              if (v21 >= *(_QWORD *)&v7)
                v21 %= *(_QWORD *)&v7;
              if (v21 != v9)
                break;
            }
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_41:
    sub_20F2FC0E0(&v297);
    if (**(int **)(v297 + 56) > 2)
      return 0;
    v23 = *(unsigned __int8 *)(v297 + 72);
    v24 = sub_20E8C31DC(v297, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && v24 == 0)
      return 0;
    sub_20E863438((uint64_t)v286);
    sub_20E86A980(v287, (uint64_t)"Submap: ", 8);
    v27 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v27, (uint64_t)" is not found for serialization", 31);
    if ((v295 & 0x10) != 0)
    {
      v30 = v294;
      if (v294 < v291)
      {
        v294 = v291;
        v30 = v291;
      }
      v31 = v290;
      v28 = v30 - (_QWORD)v290;
      if (v30 - (unint64_t)v290 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_107;
    }
    else
    {
      if ((v295 & 8) == 0)
      {
        v28 = 0;
        HIBYTE(v285) = 0;
        v29 = (void **)&__dst;
        goto LABEL_59;
      }
      v31 = (const void *)v288[0];
      v28 = v289 - v288[0];
      if (v289 - v288[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_107:
        sub_20E860B7C();
    }
    if (v28 >= 0x17)
    {
      v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v32 = v28 | 7;
      v33 = v32 + 1;
      v29 = (void **)operator new(v32 + 1);
      v284 = v28;
      v285 = v33 | 0x8000000000000000;
      __dst = v29;
    }
    else
    {
      HIBYTE(v285) = v28;
      v29 = (void **)&__dst;
      if (!v28)
      {
LABEL_59:
        *((_BYTE *)v29 + v28) = 0;
        v274 = &v297;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v276 = std::chrono::system_clock::now().__d_.__rep_;
        v277 = 2;
        v278 = "unknown file";
        v279 = 1985;
        v281 = 0;
        v282 = 0;
        v280 = "unknown function";
        if (v285 >= 0)
          v34 = (const char *)&__dst;
        else
          v34 = (const char *)__dst;
        v35 = *v274;
        v36 = (const char *)(*v274 + 16);
        v272 = v36;
        if (*(char *)(*v274 + 39) < 0)
        {
          v36 = *(const char **)(v35 + 16);
          v37 = *(_QWORD *)(v35 + 24);
          v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v39 & 1) != 0)
            goto LABEL_66;
        }
        else
        {
          v37 = *(unsigned __int8 *)(*v274 + 39);
          v38 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v38 & 1) != 0)
            goto LABEL_66;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v304);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v304);
          if ((_BYTE)v305 && (v304[23] & 0x80000000) != 0)
            operator delete(*(void **)v304);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_66:
        if (byte_254A4A4F8[23] >= 0)
          v40 = byte_254A4A4F8;
        else
          v40 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v41 = byte_254A4A4F8[23];
        else
          v41 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v304 = os_log_create(v40, v36);
        v42 = &v304[8];
        if (v41 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v41 >= 0x17)
        {
          v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v43 = v41 | 7;
          v44 = v43 + 1;
          v42 = operator new(v43 + 1);
          *(_QWORD *)&v304[16] = v41;
          *(_QWORD *)&v305 = v44 | 0x8000000000000000;
          *(_QWORD *)&v304[8] = v42;
        }
        else
        {
          BYTE7(v305) = v41;
          if (!v41)
          {
LABEL_80:
            v42[v41] = 0;
            BYTE8(v305) = 1;
            v45 = (char *)&v306;
            if (v37 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v37 >= 0x17)
            {
              v46 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v46 = v37 | 7;
              v47 = v46 + 1;
              v45 = (char *)operator new(v46 + 1);
              v307 = v37;
              v308 = v47 | 0x8000000000000000;
              v306 = v45;
            }
            else
            {
              HIBYTE(v308) = v37;
              if (!v37)
              {
LABEL_88:
                v45[v37] = 0;
                v309 = 1;
                v48 = *(NSObject **)v304;
                if (SHIBYTE(v308) < 0)
                  operator delete(v306);
                if (BYTE8(v305) && SBYTE7(v305) < 0)
                  operator delete(*(void **)&v304[8]);
                if (*(_QWORD *)v304)
                  os_release(*(void **)v304);
                if (!v25 || !*(_QWORD *)(v25 + 24))
                {
                  os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v304 = 136315138;
                  *(_QWORD *)&v304[4] = v34;
                  v55 = (void *)_os_log_send_and_compose_impl();
                  if (v55)
                    free(v55);
                  goto LABEL_180;
                }
                v49 = _os_log_pack_size();
                v50 = (std::__shared_weak_count_vtbl *)operator new(v49, (std::align_val_t)8uLL);
                v51 = (std::__shared_weak_count *)operator new();
                v51->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v51->__shared_owners_ = 0;
                v51->__shared_weak_owners_ = 0;
                v51[1].__vftable = v50;
                *(_QWORD *)&v298 = v50;
                *((_QWORD *)&v298 + 1) = v50;
                v300 = 0;
                v301 = 0;
                v299 = v51;
                v52 = strlen(v34);
                if (v52 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v53 = v52;
                if (v52 >= 0x17)
                {
                  v57 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v52 | 7) != 0x17)
                    v57 = v52 | 7;
                  v58 = v57 + 1;
                  v54 = operator new(v57 + 1);
                  *(_QWORD *)&v303 = v53;
                  *((_QWORD *)&v303 + 1) = v58 | 0x8000000000000000;
                  v302 = v54;
                }
                else
                {
                  HIBYTE(v303) = v52;
                  v54 = &v302;
                  if (!v52)
                  {
LABEL_112:
                    *((_BYTE *)v54 + v53) = 0;
                    v59 = v302;
                    v310[0] = v303;
                    *(_QWORD *)((char *)v310 + 7) = *(_QWORD *)((char *)&v303 + 7);
                    v60 = HIBYTE(v303);
                    v61 = operator new(0x38uLL);
                    v61[1] = 0;
                    v61[2] = 0;
                    v61[3] = off_24C9ABC20;
                    *v61 = &off_24C9ABBD0;
                    v62 = v310[0];
                    v61[4] = v59;
                    v61[5] = v62;
                    *(_QWORD *)((char *)v61 + 47) = *(_QWORD *)((char *)v310 + 7);
                    *((_BYTE *)v61 + 55) = v60;
                    v310[0] = 0;
                    *(_QWORD *)((char *)v310 + 7) = 0;
                    v63 = v301;
                    v300 = (char *)(v61 + 3);
                    v301 = (std::__shared_weak_count *)v61;
                    if (v63)
                    {
                      v64 = (unint64_t *)&v63->__shared_owners_;
                      do
                        v65 = __ldaxr(v64);
                      while (__stlxr(v65 - 1, v64));
                      if (!v65)
                      {
                        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                        std::__shared_weak_count::__release_weak(v63);
                      }
                    }
                    *(_OWORD *)v304 = v298;
                    v66 = v300;
                    *(_QWORD *)&v304[16] = v299;
                    if (v299)
                    {
                      v67 = (unint64_t *)&v299->__shared_owners_;
                      do
                        v68 = __ldxr(v67);
                      while (__stxr(v68 + 1, v67));
                    }
                    v69 = v301;
                    *(_QWORD *)&v305 = v66;
                    *((_QWORD *)&v305 + 1) = v301;
                    if (v301)
                    {
                      v70 = (unint64_t *)&v301->__shared_owners_;
                      do
                        v71 = __ldxr(v70);
                      while (__stxr(v71 + 1, v70));
                      v306 = v66;
                      do
                        v72 = __ldaxr(v70);
                      while (__stlxr(v72 - 1, v70));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                        std::__shared_weak_count::__release_weak(v69);
                      }
                    }
                    else
                    {
                      v306 = v66;
                    }
                    v80 = v299;
                    if (v299)
                    {
                      v81 = (unint64_t *)&v299->__shared_owners_;
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    v83 = *(_QWORD *)v304;
                    if (v306[31] >= 0)
                      v84 = v306 + 8;
                    else
                      v84 = (char *)*((_QWORD *)v306 + 1);
                    v85 = _os_log_pack_fill();
                    *(_DWORD *)v85 = 136315138;
                    *(_QWORD *)(v85 + 4) = v84;
                    v86 = operator new();
                    v87 = *(unsigned __int8 *)(v35 + 39);
                    v88 = *(const char **)(v35 + 16);
                    v89 = *(_QWORD *)(v35 + 24);
                    v90 = v305;
                    *(_OWORD *)(v86 + 8) = *(_OWORD *)&v304[8];
                    if ((v87 & 0x80u) != 0)
                      v87 = v89;
                    else
                      v88 = v272;
                    *(_QWORD *)v86 = v83;
                    *(_QWORD *)&v304[8] = 0;
                    *(_QWORD *)&v304[16] = 0;
                    *(_OWORD *)(v86 + 24) = v90;
                    v305 = 0uLL;
                    *(_QWORD *)(v86 + 40) = v88;
                    *(_QWORD *)(v86 + 48) = v87;
                    *(_BYTE *)(v86 + 56) = 2;
                    v302 = 0;
                    *(_QWORD *)&v298 = v86;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), &v298);
                    v91 = v298;
                    *(_QWORD *)&v298 = 0;
                    if (v91)
                    {
                      v92 = *(std::__shared_weak_count **)(v91 + 32);
                      if (v92)
                      {
                        v93 = (unint64_t *)&v92->__shared_owners_;
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                        if (!v94)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
                      v95 = *(std::__shared_weak_count **)(v91 + 16);
                      if (v95)
                      {
                        v96 = (unint64_t *)&v95->__shared_owners_;
                        do
                          v97 = __ldaxr(v96);
                        while (__stlxr(v97 - 1, v96));
                        if (!v97)
                        {
                          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                          std::__shared_weak_count::__release_weak(v95);
                        }
                      }
                      MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                      v98 = v302;
                      v302 = 0;
                      if (v98)
                      {
                        v99 = (std::__shared_weak_count *)v98[4];
                        if (v99)
                        {
                          v100 = (unint64_t *)&v99->__shared_owners_;
                          do
                            v101 = __ldaxr(v100);
                          while (__stlxr(v101 - 1, v100));
                          if (!v101)
                          {
                            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                            std::__shared_weak_count::__release_weak(v99);
                          }
                        }
                        v102 = (std::__shared_weak_count *)v98[2];
                        if (v102)
                        {
                          v103 = (unint64_t *)&v102->__shared_owners_;
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        MEMORY[0x212BC6398](v98, 0x10F0C40B62ED6C6);
                      }
                    }
                    v105 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
                    if (*((_QWORD *)&v305 + 1))
                    {
                      v106 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
                    v108 = *(std::__shared_weak_count **)&v304[16];
                    if (*(_QWORD *)&v304[16])
                    {
                      v109 = (unint64_t *)(*(_QWORD *)&v304[16] + 8);
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
LABEL_180:
                    if (v23)
                    {
                      v111 = (const char *)&__dst;
                      if (v285 < 0)
                        v111 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v274, "%s", v111);
                      sub_20E863570((uint64_t)&v274);
                    }
                    sub_20E863570((uint64_t)&v274);
                    v112 = v282;
                    if (!v282)
                      goto LABEL_317;
                    v113 = (unint64_t *)&v282->__shared_owners_;
                    do
                      v114 = __ldaxr(v113);
                    while (__stlxr(v114 - 1, v113));
LABEL_315:
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                    goto LABEL_317;
                  }
                }
                memcpy(v54, v34, v53);
                goto LABEL_112;
              }
            }
            memmove(v45, v36, v37);
            goto LABEL_88;
          }
        }
        memmove(v42, v40, v41);
        goto LABEL_80;
      }
    }
    memmove(v29, v31, v28);
    goto LABEL_59;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 424);
  if (!v10 || !*(_QWORD *)(*(_QWORD *)v10 + 64))
  {
    sub_20F2FC0E0(&v297);
    if (**(int **)(v297 + 56) > 4)
      return 0;
    v11 = *(unsigned __int8 *)(v297 + 72);
    v12 = sub_20E8C31DC(v297, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (!v11 && v12 == 0)
      return 0;
    sub_20E863438((uint64_t)v286);
    sub_20E86A980(v287, (uint64_t)"Submap (", 8);
    v15 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v15, (uint64_t)") in modified list was empty.", 29);
    v271 = v11;
    if ((v295 & 0x10) != 0)
    {
      v115 = v294;
      if (v294 < v291)
      {
        v294 = v291;
        v115 = v291;
      }
      v116 = &v290;
    }
    else
    {
      if ((v295 & 8) == 0)
      {
        v16 = 0;
        HIBYTE(v285) = 0;
        v17 = (void **)&__dst;
        goto LABEL_200;
      }
      v116 = (const void **)v288;
      v115 = v289;
    }
    v117 = *v116;
    v16 = v115 - (_QWORD)*v116;
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v16 >= 0x17)
    {
      v118 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v118 = v16 | 7;
      v119 = v118 + 1;
      v17 = (void **)operator new(v118 + 1);
      v284 = v16;
      v285 = v119 | 0x8000000000000000;
      __dst = v17;
    }
    else
    {
      HIBYTE(v285) = v115 - *(_BYTE *)v116;
      v17 = (void **)&__dst;
      if (!v16)
      {
LABEL_200:
        *((_BYTE *)v17 + v16) = 0;
        v274 = &v297;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v276 = std::chrono::system_clock::now().__d_.__rep_;
        v277 = 4;
        v278 = "unknown file";
        v279 = 1969;
        v281 = 0;
        v282 = 0;
        v280 = "unknown function";
        if (v285 >= 0)
          v120 = (const char *)&__dst;
        else
          v120 = (const char *)__dst;
        v121 = *v274;
        v122 = (const char *)(*v274 + 16);
        v269 = v122;
        if (*(char *)(*v274 + 39) < 0)
        {
          v122 = *(const char **)(v121 + 16);
          v123 = *(_QWORD *)(v121 + 24);
        }
        else
        {
          v123 = *(unsigned __int8 *)(*v274 + 39);
        }
        v124 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v304);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v304);
          if ((_BYTE)v305 && (v304[23] & 0x80000000) != 0)
            operator delete(*(void **)v304);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v125 = byte_254A4A4F8;
        else
          v125 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v126 = byte_254A4A4F8[23];
        else
          v126 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v304 = os_log_create(v125, v122);
        v127 = &v304[8];
        if (v126 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v126 >= 0x17)
        {
          v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v126 | 7) != 0x17)
            v128 = v126 | 7;
          v129 = v128 + 1;
          v127 = operator new(v128 + 1);
          *(_QWORD *)&v304[16] = v126;
          *(_QWORD *)&v305 = v129 | 0x8000000000000000;
          *(_QWORD *)&v304[8] = v127;
        }
        else
        {
          BYTE7(v305) = v126;
          if (!v126)
          {
LABEL_221:
            v127[v126] = 0;
            BYTE8(v305) = 1;
            v130 = (char *)&v306;
            if (v123 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v123 >= 0x17)
            {
              v131 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v123 | 7) != 0x17)
                v131 = v123 | 7;
              v132 = v131 + 1;
              v130 = (char *)operator new(v131 + 1);
              v307 = v123;
              v308 = v132 | 0x8000000000000000;
              v306 = v130;
            }
            else
            {
              HIBYTE(v308) = v123;
              if (!v123)
              {
LABEL_229:
                v130[v123] = 0;
                v309 = 1;
                v133 = *(NSObject **)v304;
                if (SHIBYTE(v308) < 0)
                  operator delete(v306);
                if (BYTE8(v305) && SBYTE7(v305) < 0)
                  operator delete(*(void **)&v304[8]);
                if (*(_QWORD *)v304)
                  os_release(*(void **)v304);
                if (!v13 || !*(_QWORD *)(v13 + 24))
                {
                  os_log_type_enabled(v133, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v304 = 136315138;
                  *(_QWORD *)&v304[4] = v120;
                  v140 = (void *)_os_log_send_and_compose_impl();
                  v141 = v271;
                  if (v140)
                    free(v140);
                  goto LABEL_308;
                }
                v134 = _os_log_pack_size();
                v135 = (std::__shared_weak_count_vtbl *)operator new(v134, (std::align_val_t)8uLL);
                v136 = (std::__shared_weak_count *)operator new();
                v136->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v136->__shared_owners_ = 0;
                v136->__shared_weak_owners_ = 0;
                v136[1].__vftable = v135;
                *(_QWORD *)&v298 = v135;
                *((_QWORD *)&v298 + 1) = v135;
                v300 = 0;
                v301 = 0;
                v299 = v136;
                v137 = strlen(v120);
                if (v137 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v138 = v137;
                if (v137 >= 0x17)
                {
                  v142 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v137 | 7) != 0x17)
                    v142 = v137 | 7;
                  v143 = v142 + 1;
                  v139 = operator new(v142 + 1);
                  *(_QWORD *)&v303 = v138;
                  *((_QWORD *)&v303 + 1) = v143 | 0x8000000000000000;
                  v302 = v139;
                }
                else
                {
                  HIBYTE(v303) = v137;
                  v139 = &v302;
                  if (!v137)
                  {
LABEL_248:
                    *((_BYTE *)v139 + v138) = 0;
                    v144 = v302;
                    v310[0] = v303;
                    *(_QWORD *)((char *)v310 + 7) = *(_QWORD *)((char *)&v303 + 7);
                    v145 = HIBYTE(v303);
                    v146 = operator new(0x38uLL);
                    v146[1] = 0;
                    v146[2] = 0;
                    v146[3] = off_24C9ABC20;
                    *v146 = &off_24C9ABBD0;
                    v147 = v310[0];
                    v146[4] = v144;
                    v146[5] = v147;
                    *(_QWORD *)((char *)v146 + 47) = *(_QWORD *)((char *)v310 + 7);
                    *((_BYTE *)v146 + 55) = v145;
                    v310[0] = 0;
                    *(_QWORD *)((char *)v310 + 7) = 0;
                    v148 = v301;
                    v300 = (char *)(v146 + 3);
                    v301 = (std::__shared_weak_count *)v146;
                    if (v148)
                    {
                      v149 = (unint64_t *)&v148->__shared_owners_;
                      do
                        v150 = __ldaxr(v149);
                      while (__stlxr(v150 - 1, v149));
                      if (!v150)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                    }
                    *(_OWORD *)v304 = v298;
                    v151 = v300;
                    *(_QWORD *)&v304[16] = v299;
                    if (v299)
                    {
                      v152 = (unint64_t *)&v299->__shared_owners_;
                      do
                        v153 = __ldxr(v152);
                      while (__stxr(v153 + 1, v152));
                    }
                    v154 = v301;
                    *(_QWORD *)&v305 = v151;
                    *((_QWORD *)&v305 + 1) = v301;
                    if (v301)
                    {
                      v155 = (unint64_t *)&v301->__shared_owners_;
                      do
                        v156 = __ldxr(v155);
                      while (__stxr(v156 + 1, v155));
                      v306 = v151;
                      do
                        v157 = __ldaxr(v155);
                      while (__stlxr(v157 - 1, v155));
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                        std::__shared_weak_count::__release_weak(v154);
                      }
                    }
                    else
                    {
                      v306 = v151;
                    }
                    v158 = v299;
                    if (v299)
                    {
                      v159 = (unint64_t *)&v299->__shared_owners_;
                      do
                        v160 = __ldaxr(v159);
                      while (__stlxr(v160 - 1, v159));
                      if (!v160)
                      {
                        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                        std::__shared_weak_count::__release_weak(v158);
                      }
                    }
                    v161 = *(_QWORD *)v304;
                    if (v306[31] >= 0)
                      v162 = v306 + 8;
                    else
                      v162 = (char *)*((_QWORD *)v306 + 1);
                    v163 = _os_log_pack_fill();
                    *(_DWORD *)v163 = 136315138;
                    *(_QWORD *)(v163 + 4) = v162;
                    v164 = operator new();
                    v165 = *(unsigned __int8 *)(v121 + 39);
                    v166 = *(const char **)(v121 + 16);
                    v167 = *(_QWORD *)(v121 + 24);
                    v168 = v305;
                    *(_OWORD *)(v164 + 8) = *(_OWORD *)&v304[8];
                    if ((v165 & 0x80u) != 0)
                      v165 = v167;
                    else
                      v166 = v269;
                    *(_QWORD *)v164 = v161;
                    *(_QWORD *)&v304[8] = 0;
                    *(_QWORD *)&v304[16] = 0;
                    *(_OWORD *)(v164 + 24) = v168;
                    v305 = 0uLL;
                    *(_QWORD *)(v164 + 40) = v166;
                    *(_QWORD *)(v164 + 48) = v165;
                    *(_BYTE *)(v164 + 56) = 16;
                    v302 = 0;
                    *(_QWORD *)&v298 = v164;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &v298);
                    v169 = v298;
                    *(_QWORD *)&v298 = 0;
                    v141 = v271;
                    if (v169)
                    {
                      v170 = *(std::__shared_weak_count **)(v169 + 32);
                      if (v170)
                      {
                        v171 = (unint64_t *)&v170->__shared_owners_;
                        do
                          v172 = __ldaxr(v171);
                        while (__stlxr(v172 - 1, v171));
                        if (!v172)
                        {
                          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                          std::__shared_weak_count::__release_weak(v170);
                        }
                      }
                      v173 = *(std::__shared_weak_count **)(v169 + 16);
                      if (v173)
                      {
                        v174 = (unint64_t *)&v173->__shared_owners_;
                        do
                          v175 = __ldaxr(v174);
                        while (__stlxr(v175 - 1, v174));
                        if (!v175)
                        {
                          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                          std::__shared_weak_count::__release_weak(v173);
                        }
                      }
                      MEMORY[0x212BC6398](v169, 0x10F0C40B62ED6C6);
                      v176 = v302;
                      v302 = 0;
                      if (v176)
                      {
                        v177 = (std::__shared_weak_count *)v176[4];
                        if (v177)
                        {
                          v178 = (unint64_t *)&v177->__shared_owners_;
                          do
                            v179 = __ldaxr(v178);
                          while (__stlxr(v179 - 1, v178));
                          if (!v179)
                          {
                            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                            std::__shared_weak_count::__release_weak(v177);
                          }
                        }
                        v180 = (std::__shared_weak_count *)v176[2];
                        if (v180)
                        {
                          v181 = (unint64_t *)&v180->__shared_owners_;
                          do
                            v182 = __ldaxr(v181);
                          while (__stlxr(v182 - 1, v181));
                          if (!v182)
                          {
                            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                            std::__shared_weak_count::__release_weak(v180);
                          }
                        }
                        MEMORY[0x212BC6398](v176, 0x10F0C40B62ED6C6);
                      }
                    }
                    v183 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
                    if (*((_QWORD *)&v305 + 1))
                    {
                      v184 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
                      do
                        v185 = __ldaxr(v184);
                      while (__stlxr(v185 - 1, v184));
                      if (!v185)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                      }
                    }
                    v186 = *(std::__shared_weak_count **)&v304[16];
                    if (*(_QWORD *)&v304[16])
                    {
                      v187 = (unint64_t *)(*(_QWORD *)&v304[16] + 8);
                      do
                        v188 = __ldaxr(v187);
                      while (__stlxr(v188 - 1, v187));
                      if (!v188)
                      {
                        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                        std::__shared_weak_count::__release_weak(v186);
                      }
                    }
LABEL_308:
                    if (v141)
                    {
                      v189 = (const char *)&__dst;
                      if (v285 < 0)
                        v189 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v274, "%s", v189);
                      sub_20E863570((uint64_t)&v274);
                    }
                    sub_20E863570((uint64_t)&v274);
                    v112 = v282;
                    if (!v282)
                      goto LABEL_317;
                    v190 = (unint64_t *)&v282->__shared_owners_;
                    do
                      v114 = __ldaxr(v190);
                    while (__stlxr(v114 - 1, v190));
                    goto LABEL_315;
                  }
                }
                memcpy(v139, v120, v138);
                goto LABEL_248;
              }
            }
            memmove(v130, v122, v123);
            goto LABEL_229;
          }
        }
        memmove(v127, v125, v126);
        goto LABEL_221;
      }
    }
    memmove(v17, v117, v16);
    goto LABEL_200;
  }
  return (_QWORD *)v3;
}

void sub_20F30635C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168) && *(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F3065F0(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, char ***a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  _DWORD *v39;
  int v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t **v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int64x2_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t *v79;
  unint64_t v80;
  char **v81;
  char **v82;
  char **v83;
  char **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char **v96;
  unint64_t v97;
  _BYTE *v98;
  char **v99;
  int64_t v100;
  unint64_t v101;
  char **v102;
  char *v103;
  char **v104;
  char **v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  char **v110;
  uint64_t v111;
  __int128 v112;
  unint64_t *v113;
  int8x8_t v114;
  unint64_t v115;
  uint8x8_t v116;
  unint64_t v117;
  uint64_t ***v118;
  uint64_t **v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  int64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char **v129;
  _BYTE *v130;
  char **v131;
  unint64_t v132;
  char **v133;
  char *v134;
  char **v135;
  char **v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  char **v141;
  uint64_t v142;
  __int128 v143;
  char **v144;
  char **v145;
  char **v146;
  uint64_t v147;
  char **v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  unint64_t *v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  char *v180;
  uint64_t v181;
  int64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _OWORD *v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  char *v193;
  char *v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t *v201;
  _QWORD *v202;
  unint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  void *v213;
  int v214;
  _DWORD *v215;
  unint64_t v216;
  unint64_t v217;
  int *v218;
  _DWORD *v219;
  int v220;
  _QWORD *v221;
  _QWORD *j;
  __int128 *v223;
  __int128 *v224;
  void *v225;
  unint64_t v226;
  unint64_t v227;
  __int128 *v228;
  __int128 *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  _OWORD *v234;
  __int128 *v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  uint64_t **i;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  char *v243;
  _BYTE *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  unint64_t v263;
  unint64_t v264;
  char **v265;
  uint64_t v266;
  uint64_t v267;
  char v270;
  uint64_t v271;
  _BYTE *__p;
  char **__pa;
  char *__pb;
  uint64_t v275;
  char **v276;
  char **v277;
  char **v278;
  __int128 v279;
  char *v280;
  void *v281[2];
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  int64x2_t v286;
  char *v287;

  v6 = a1;
  v7 = *(_QWORD *)(a1 + 80);
  v275 = v6;
  v270 = a5;
  if ((a2 & 1) != 0 || !*(_BYTE *)(v7 + 2646))
  {
    if (*(_BYTE *)(v7 + 2643))
    {
      sub_20F325324(v7);
      sub_20F324318(*(char ****)(v6 + 80), (uint64_t)&v283);
      v58 = *(uint64_t ***)(v6 + 16);
      v59 = *(_QWORD *)(v6 + 24);
      v286 = 0uLL;
      v287 = 0;
      if (v59)
      {
        if (v59 >> 60)
          sub_20E867F44();
        v60 = (char *)operator new(16 * v59);
        v61 = &v60[16 * v59];
        v286.i64[0] = (uint64_t)v60;
        v286.i64[1] = (uint64_t)v60;
        v287 = v61;
        v276 = (char **)&v286;
        v6 = v275;
        if (v58)
          goto LABEL_76;
      }
      else
      {
        v61 = 0;
        v60 = 0;
        v276 = (char **)&v286;
        v6 = v275;
        if (v58)
        {
          do
          {
LABEL_76:
            v62 = *((unsigned int *)v58 + 82);
            *(_QWORD *)&v279 = v58[5][20];
            *((_QWORD *)&v279 + 1) = v62;
            sub_20F312A6C(&v276, &v279);
            v58 = (uint64_t **)*v58;
          }
          while (v58);
          v63 = v286;
          v61 = v287;
LABEL_91:
          *(int64x2_t *)v281 = v63;
          v282 = v61;
          v286 = 0uLL;
          v287 = 0;
          v279 = 0uLL;
          v280 = 0;
          sub_20F384698((uint64_t *)&v283, (uint64_t *)v281, &v286, (uint64_t)&v279);
          v276 = 0;
          v277 = 0;
          v278 = 0;
          v77 = (_QWORD *)v286.i64[1];
          v78 = (_QWORD *)v286.i64[0];
          v79 = (unint64_t *)v279;
          v80 = ((uint64_t)(*((_QWORD *)&v279 + 1) - v279) >> 3) + ((v286.i64[1] - v286.i64[0]) >> 3);
          if (v80)
          {
            if (v80 >> 61)
              sub_20E867F44();
            v81 = (char **)operator new(8 * v80);
            v82 = &v81[v80];
            v276 = v81;
            v277 = v81;
            v278 = v82;
            if (v78 != v77)
              goto LABEL_94;
          }
          else
          {
            v82 = 0;
            v81 = 0;
            if (v286.i64[0] != v286.i64[1])
            {
LABEL_94:
              v83 = v81;
              v84 = v81;
              while (1)
              {
                v85 = *(_QWORD *)(v6 + 80);
                v86 = *(_QWORD *)(v85 + 2824);
                v87 = *(_QWORD *)(v85 + 2832);
                if (v86 != v87)
                {
                  while (1)
                  {
                    v88 = *(_QWORD *)(v86 + 16);
                    if (v88)
                    {
                      if (*(_QWORD *)(v88 + 160) == *v78)
                        break;
                    }
                    v86 += 4472;
                    if (v86 == v87)
                      goto LABEL_96;
                  }
                }
                v89 = v86 == v87 || v86 == 0;
                if (v89)
                  goto LABEL_96;
                v90 = *(_QWORD *)(v86 + 16);
                v91 = *(_QWORD *)(v90 + 424);
                if (!v91
                  || !*(_QWORD *)(*(_QWORD *)v91 + 64)
                  || !*(_BYTE *)(v85 + 940) && (*(_BYTE *)(v86 + 304) & 0x20) != 0)
                {
                  goto LABEL_96;
                }
                if (v84 >= v82)
                  break;
                *v84++ = (char *)v90;
                v81 = v84;
LABEL_96:
                if (++v78 == v77)
                {
                  v277 = v81;
                  v278 = v82;
                  v276 = v83;
                  v79 = (unint64_t *)v279;
                  if (!*(_BYTE *)(*(_QWORD *)(v6 + 80) + 2613))
                    goto LABEL_197;
                  goto LABEL_139;
                }
              }
              v92 = (char *)v84 - (char *)v83;
              v93 = v84 - v83;
              v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 61)
              {
                v277 = v81;
                v278 = v82;
                v276 = v83;
                sub_20E867F44();
              }
              if (((char *)v82 - (char *)v83) >> 2 > v94)
                v94 = ((char *)v82 - (char *)v83) >> 2;
              if ((unint64_t)((char *)v82 - (char *)v83) >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v94;
              if (v95)
              {
                __pa = v83;
                if (v95 >> 61)
                {
                  v277 = v81;
                  v278 = v82;
                  v276 = v83;
                  sub_20E877A38();
                }
                v96 = v84;
                v97 = v95;
                v98 = operator new(8 * v95);
                v84 = v96;
                v95 = v97;
                v83 = __pa;
                v99 = (char **)&v98[8 * v93];
                *v99 = (char *)v90;
                v81 = v99 + 1;
                v100 = (char *)v96 - (char *)__pa;
                if (v96 != __pa)
                {
LABEL_120:
                  v101 = v100 - 8;
                  if (v101 < 0x168
                    || (v106 = ((char *)(v84 - 1) - (char *)v83) & 0xFFFFFFFFFFFFFFF8,
                        &v98[v92 - 8 - v106] > &v98[v92 - 8])
                    || (char **)((char *)v84 - v106 - 8) > v84 - 1
                    || (unint64_t)((char *)v84 - v98 - v92) < 0x20)
                  {
                    v102 = v84;
                    v6 = v275;
                  }
                  else
                  {
                    v107 = (v101 >> 3) + 1;
                    v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
                    v102 = &v84[v108 / 0xFFFFFFFFFFFFFFF8];
                    v99 = (char **)((char *)v99 - v108);
                    v109 = &v98[8 * v93 - 16];
                    v110 = v84 - 2;
                    v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
                    v6 = v275;
                    do
                    {
                      v112 = *(_OWORD *)v110;
                      *(v109 - 1) = *((_OWORD *)v110 - 1);
                      *v109 = v112;
                      v109 -= 2;
                      v110 -= 4;
                      v111 -= 4;
                    }
                    while (v111);
                    if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_123:
                      v82 = (char **)&v98[8 * v95];
                      if (!v83)
                        goto LABEL_127;
LABEL_124:
                      v104 = v81;
                      v105 = v82;
                      operator delete(v83);
                      v82 = v105;
                      v81 = v104;
                      v83 = v99;
                      v84 = v104;
                      goto LABEL_96;
                    }
                  }
                  do
                  {
                    v103 = *--v102;
                    *--v99 = v103;
                  }
                  while (v102 != v83);
                  goto LABEL_123;
                }
              }
              else
              {
                v98 = 0;
                v99 = (char **)(8 * v93);
                *(_QWORD *)(8 * v93) = v90;
                v81 = (char **)(8 * v93 + 8);
                v100 = (char *)v84 - (char *)v83;
                if (v84 != v83)
                  goto LABEL_120;
              }
              v6 = v275;
              v82 = (char **)&v98[8 * v95];
              if (!v83)
              {
LABEL_127:
                v83 = v99;
                v84 = v81;
                goto LABEL_96;
              }
              goto LABEL_124;
            }
          }
          v83 = v81;
          v84 = v81;
          if (!*(_BYTE *)(*(_QWORD *)(v6 + 80) + 2613))
            goto LABEL_197;
LABEL_139:
          v113 = (unint64_t *)*((_QWORD *)&v279 + 1);
          if (v79 != *((unint64_t **)&v279 + 1))
          {
            v114 = *(int8x8_t *)(v6 + 8);
            if (v114)
            {
LABEL_143:
              v115 = *v79;
              v116 = (uint8x8_t)vcnt_s8(v114);
              v116.i16[0] = vaddlv_u8(v116);
              if (v116.u32[0] > 1uLL)
              {
                v117 = *v79;
                if (v115 >= *(_QWORD *)&v114)
                  v117 = v115 % *(_QWORD *)&v114;
              }
              else
              {
                v117 = v115 & (*(_QWORD *)&v114 - 1);
              }
              v118 = *(uint64_t ****)(*(_QWORD *)v6 + 8 * v117);
              if (v118)
              {
                v119 = *v118;
                if (v119)
                {
                  if (v116.u32[0] < 2uLL)
                  {
                    v120 = *(_QWORD *)&v114 - 1;
                    while (1)
                    {
                      v122 = v119[1];
                      if (v122 == (uint64_t *)v115)
                      {
                        if (v119[2] == (uint64_t *)v115)
                          goto LABEL_163;
                      }
                      else if (((unint64_t)v122 & v120) != v117)
                      {
                        goto LABEL_195;
                      }
                      v119 = (uint64_t **)*v119;
                      if (!v119)
                        goto LABEL_195;
                    }
                  }
                  do
                  {
                    v121 = (unint64_t)v119[1];
                    if (v121 == v115)
                    {
                      if (v119[2] == (uint64_t *)v115)
                      {
LABEL_163:
                        v123 = v119[5];
                        v124 = v123[53];
                        if (!v124
                          || !*(_QWORD *)(*(_QWORD *)v124 + 64)
                          || !*(_BYTE *)(*(_QWORD *)(v6 + 80) + 940) && ((_BYTE)v119[41] & 0x20) != 0)
                        {
                          break;
                        }
                        if (v84 < v82)
                        {
                          *v84++ = (char *)v123;
                          v81 = v84;
                          break;
                        }
                        v125 = (char *)v84 - (char *)v83;
                        v126 = v84 - v83;
                        v127 = v126 + 1;
                        if ((unint64_t)(v126 + 1) >> 61)
                        {
                          v277 = v81;
                          v278 = v82;
                          v276 = v83;
                          sub_20E867F44();
                        }
                        if (((char *)v82 - (char *)v83) >> 2 > v127)
                          v127 = ((char *)v82 - (char *)v83) >> 2;
                        if ((unint64_t)((char *)v82 - (char *)v83) >= 0x7FFFFFFFFFFFFFF8)
                          v128 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v128 = v127;
                        if (v128)
                        {
                          if (v128 >> 61)
                          {
                            v277 = v81;
                            v278 = v82;
                            v276 = v83;
                            sub_20E877A38();
                          }
                          v129 = v84;
                          v130 = operator new(8 * v128);
                          v84 = v129;
                        }
                        else
                        {
                          v130 = 0;
                        }
                        v131 = (char **)&v130[8 * v126];
                        *v131 = (char *)v123;
                        v81 = v131 + 1;
                        if (v84 == v83)
                        {
                          v6 = v275;
                        }
                        else
                        {
                          v132 = (char *)v84 - (char *)v83 - 8;
                          if (v132 < 0x168
                            || (v137 = ((char *)(v84 - 1) - (char *)v83) & 0xFFFFFFFFFFFFFFF8,
                                &v130[v125 - 8 - v137] > &v130[v125 - 8])
                            || (char **)((char *)v84 - v137 - 8) > v84 - 1
                            || (unint64_t)((char *)v84 - v130 - v125) < 0x20)
                          {
                            v133 = v84;
                            v6 = v275;
                          }
                          else
                          {
                            v138 = (v132 >> 3) + 1;
                            v139 = 8 * (v138 & 0x3FFFFFFFFFFFFFFCLL);
                            v133 = &v84[v139 / 0xFFFFFFFFFFFFFFF8];
                            v131 = (char **)((char *)v131 - v139);
                            v140 = &v130[8 * v126 - 16];
                            v141 = v84 - 2;
                            v142 = v138 & 0x3FFFFFFFFFFFFFFCLL;
                            v6 = v275;
                            do
                            {
                              v143 = *(_OWORD *)v141;
                              *(v140 - 1) = *((_OWORD *)v141 - 1);
                              *v140 = v143;
                              v140 -= 2;
                              v141 -= 4;
                              v142 -= 4;
                            }
                            while (v142);
                            if (v138 == (v138 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_185;
                          }
                          do
                          {
                            v134 = *--v133;
                            *--v131 = v134;
                          }
                          while (v133 != v83);
                        }
LABEL_185:
                        v82 = (char **)&v130[8 * v128];
                        if (v83)
                        {
                          v135 = v81;
                          v136 = (char **)&v130[8 * v128];
                          operator delete(v83);
                          v82 = v136;
                          v81 = v135;
                          v83 = v131;
                          v84 = v135;
                        }
                        else
                        {
                          v83 = v131;
                          v84 = v81;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v121 >= *(_QWORD *)&v114)
                        v121 %= *(_QWORD *)&v114;
                      if (v121 != v117)
                        break;
                    }
                    v119 = (uint64_t **)*v119;
                  }
                  while (v119);
                }
              }
LABEL_195:
              while (++v79 != v113)
              {
                v114 = *(int8x8_t *)(v6 + 8);
                if (v114)
                  goto LABEL_143;
              }
              v277 = v81;
              v278 = v82;
              v276 = v83;
              v79 = (unint64_t *)v279;
            }
          }
LABEL_197:
          *(_QWORD *)(v6 + 1000) = *(_QWORD *)(v6 + 992);
          *(_QWORD *)(v6 + 1024) = *(_QWORD *)(v6 + 1016);
          if (v79)
          {
            *((_QWORD *)&v279 + 1) = v79;
            operator delete(v79);
          }
          if (v286.i64[0])
          {
            v286.i64[1] = v286.i64[0];
            operator delete((void *)v286.i64[0]);
          }
          if (v281[0])
          {
            v281[1] = v281[0];
            operator delete(v281[0]);
          }
          if (v283)
          {
            v284 = v283;
            operator delete(v283);
          }
          v145 = v277;
          v144 = v278;
          v146 = v276;
          if (v276 == v277)
            goto LABEL_382;
          goto LABEL_206;
        }
      }
      v63 = vdupq_n_s64((unint64_t)v60);
      goto LABEL_91;
    }
    sub_20F325324(v7);
    sub_20F32358C(*(_QWORD *)(v6 + 80), (char **)&v286);
    if (!*(_BYTE *)(*(_QWORD *)(v6 + 80) + 2613))
      goto LABEL_381;
    v64 = (_BYTE *)v286.i64[1];
    v65 = (_BYTE *)v286.i64[0];
    v66 = v6;
    v67 = (v286.i64[1] - v286.i64[0]) >> 3;
    v68 = v67 + *(_QWORD *)(v66 + 24);
    if (v68 <= (uint64_t)&v287[-v286.i64[0]] >> 3)
    {
LABEL_351:
      v6 = v275;
      for (i = *(uint64_t ***)(v275 + 16); i; i = (uint64_t **)*i)
      {
        v241 = i[5];
        v242 = v241[53];
        if (!v242
          || !*(_QWORD *)(*(_QWORD *)v242 + 64)
          || !*(_BYTE *)(*(_QWORD *)(v6 + 80) + 940) && ((_BYTE)i[41] & 0x20) != 0)
        {
          continue;
        }
        v243 = (char *)v286.i64[1];
        if (v286.i64[1] < (unint64_t)v287)
        {
          *(_QWORD *)v286.i64[1] = v241;
          v240 = (uint64_t)(v243 + 8);
        }
        else
        {
          v244 = (_BYTE *)v286.i64[0];
          v245 = (v286.i64[1] - v286.i64[0]) >> 3;
          v246 = v245 + 1;
          if ((unint64_t)(v245 + 1) >> 61)
            sub_20E867F44();
          v247 = (uint64_t)&v287[-v286.i64[0]];
          if ((uint64_t)&v287[-v286.i64[0]] >> 2 > v246)
            v246 = v247 >> 2;
          if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
            v248 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v248 = v246;
          if (v248)
          {
            if (v248 >> 61)
              sub_20E877A38();
            v249 = (char *)operator new(8 * v248);
            v250 = &v249[8 * v245];
            *(_QWORD *)v250 = v241;
            v240 = (uint64_t)(v250 + 8);
            v251 = (char *)(v243 - v244);
            if (v243 != v244)
            {
LABEL_370:
              v252 = (unint64_t)(v251 - 8);
              if (v252 < 0x58)
                goto LABEL_419;
              if ((unint64_t)(v244 - v249) < 0x20)
                goto LABEL_419;
              v253 = (v252 >> 3) + 1;
              v254 = 8 * (v253 & 0x3FFFFFFFFFFFFFFCLL);
              v255 = &v243[-v254];
              v250 -= v254;
              v256 = &v249[8 * v245 - 16];
              v257 = v243 - 16;
              v258 = v253 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v259 = *(_OWORD *)v257;
                *((_OWORD *)v256 - 1) = *((_OWORD *)v257 - 1);
                *(_OWORD *)v256 = v259;
                v256 -= 32;
                v257 -= 32;
                v258 -= 4;
              }
              while (v258);
              v243 = v255;
              if (v253 != (v253 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_419:
                do
                {
                  v260 = *((_QWORD *)v243 - 1);
                  v243 -= 8;
                  *((_QWORD *)v250 - 1) = v260;
                  v250 -= 8;
                }
                while (v243 != v244);
              }
              v243 = (char *)v286.i64[0];
              v286.i64[0] = (uint64_t)v250;
              v286.i64[1] = v240;
              v287 = &v249[8 * v248];
              v6 = v275;
              if (!v243)
                goto LABEL_354;
LABEL_380:
              operator delete(v243);
              goto LABEL_354;
            }
          }
          else
          {
            v249 = 0;
            v250 = (char *)(8 * v245);
            *(_QWORD *)(8 * v245) = v241;
            v240 = 8 * v245 + 8;
            v251 = (char *)(v243 - v244);
            if (v243 != v244)
              goto LABEL_370;
          }
          v286.i64[0] = (uint64_t)v250;
          v286.i64[1] = v240;
          v287 = &v249[8 * v248];
          v6 = v275;
          if (v243)
            goto LABEL_380;
        }
LABEL_354:
        v286.i64[1] = v240;
      }
LABEL_381:
      *(_QWORD *)(v6 + 1000) = *(_QWORD *)(v6 + 992);
      *(_QWORD *)(v6 + 1024) = *(_QWORD *)(v6 + 1016);
      v145 = (char **)v286.i64[1];
      v144 = (char **)v287;
      v146 = (char **)v286.i64[0];
      if (v286.i64[0] == v286.i64[1])
        goto LABEL_382;
      goto LABEL_206;
    }
    if (v68 >> 61)
      sub_20E867F44();
    v69 = operator new(8 * v68);
    v70 = &v69[8 * v67];
    if (v64 != v65)
    {
      v71 = v64 - v65 - 8;
      if (v71 < 0x58)
      {
        v70 = &v69[8 * v67];
        do
        {
LABEL_348:
          v238 = *((_QWORD *)v64 - 1);
          v64 -= 8;
          *((_QWORD *)v70 - 1) = v238;
          v70 -= 8;
        }
        while (v64 != v65);
        goto LABEL_349;
      }
      v70 = &v69[8 * v67];
      if ((unint64_t)(v65 - v69) < 0x20)
        goto LABEL_348;
      v231 = (v71 >> 3) + 1;
      v232 = 8 * (v231 & 0x3FFFFFFFFFFFFFFCLL);
      v233 = &v64[-v232];
      v70 = &v69[8 * v67 - v232];
      v234 = &v69[8 * v67 - 16];
      v235 = (__int128 *)(v64 - 16);
      v236 = v231 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v237 = *v235;
        *(v234 - 1) = *(v235 - 1);
        *v234 = v237;
        v234 -= 2;
        v235 -= 2;
        v236 -= 4;
      }
      while (v236);
      v64 = v233;
      if (v231 != (v231 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_348;
    }
LABEL_349:
    v286.i64[0] = (uint64_t)v70;
    v286.i64[1] = (uint64_t)&v69[8 * v67];
    v287 = &v69[8 * v68];
    if (v65)
      operator delete(v65);
    goto LABEL_351;
  }
  v8 = v6 + 992;
  v9 = 1016;
  if (a5)
    v9 = 992;
  else
    v8 = v6 + 1016;
  v267 = v9;
  v10 = *(_DWORD **)(v6 + v9);
  v11 = *(_BYTE **)(v8 + 8);
  if (v10 == (_DWORD *)v11)
  {
    v146 = 0;
    v144 = 0;
    goto LABEL_382;
  }
  v266 = v8;
  if (a3)
    v12 = -1;
  else
    v12 = *(_DWORD *)(v7 + 2720);
  v286 = 0uLL;
  v287 = 0;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v13 = v11 - (_BYTE *)v10;
  if (v11 - (_BYTE *)v10 < 0)
    sub_20E867F44();
  v286.i64[0] = (uint64_t)operator new(24 * (v13 >> 4));
  v286.i64[1] = v286.i64[0];
  v287 = (char *)(v286.i64[0] + 24 * (v13 >> 4));
  v14 = 0;
  v283 = (char *)operator new((unint64_t)v13 >> 1);
  v284 = v283;
  v285 = &v283[8 * (v13 >> 4)];
  v6 = v275;
  __p = v11;
  do
  {
    if (v14 <= v12 || *(_DWORD *)(v286.i64[1] - 24) >= v10[2])
    {
      v15 = sub_20F3045A4((_QWORD *)v6, *(_QWORD *)v10);
      v16 = v15;
      if (v15)
      {
        v17 = v15[2];
        v18 = **(_QWORD **)(v17 + 424);
        v281[0] = *(void **)(v17 + 160);
        v19 = sub_20F28293C(*(_QWORD **)(v18 + 48), (_QWORD *)(v18 + 56), (unint64_t *)v281);
        if (v19 == v20)
        {
          v21 = 0;
        }
        else
        {
          v21 = 0;
          do
          {
            v22 = (_QWORD *)v19[1];
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v19[2];
                v89 = *v23 == (_QWORD)v19;
                v19 = v23;
              }
              while (!v89);
            }
            ++v21;
            v19 = v23;
          }
          while (v23 != v20);
        }
        v26 = v16[2];
        v27 = **(_QWORD **)(v26 + 424);
        *(_QWORD *)&v279 = *(_QWORD *)(v26 + 160);
        v28 = sub_20F28293C(*(_QWORD **)(v27 + 48), (_QWORD *)(v27 + 56), (unint64_t *)&v279);
        v6 = v275;
        if (v28 == v29)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          do
          {
            v31 = (_QWORD *)v28[1];
            if (v31)
            {
              do
              {
                v32 = v31;
                v31 = (_QWORD *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v32 = (_QWORD *)v28[2];
                v89 = *v32 == (_QWORD)v28;
                v28 = v32;
              }
              while (!v89);
            }
            ++v30;
            v28 = v32;
          }
          while (v32 != v29);
        }
        v33 = *(void **)v10;
        v34 = v10[2];
        LODWORD(v281[0]) = v34;
        v281[1] = v33;
        LODWORD(v282) = v30;
        v35 = (_DWORD *)v286.i64[0];
        if (v286.i64[1] == v286.i64[0])
        {
          v35 = (_DWORD *)v286.i64[1];
        }
        else
        {
          v36 = 0xAAAAAAAAAAAAAAABLL * ((v286.i64[1] - v286.i64[0]) >> 3);
          do
          {
            v37 = v36 >> 1;
            v38 = &v35[6 * (v36 >> 1)];
            v40 = *v38;
            v39 = v38 + 6;
            v36 += ~(v36 >> 1);
            if (v40 < v34)
              v35 = v39;
            else
              v36 = v37;
          }
          while (v36);
          if ((_DWORD *)v286.i64[1] != v35 && *v35 == v34)
            goto LABEL_13;
        }
        sub_20F3192F8((unint64_t *)&v286, (uint64_t)v35, (__int128 *)v281);
LABEL_13:
        v14 += v21;
        goto LABEL_14;
      }
      v24 = v284;
      if (v284 < v285)
      {
        *(_QWORD *)v284 = *(_QWORD *)v10;
        v25 = (uint64_t)(v24 + 8);
        v6 = v275;
LABEL_71:
        v284 = (char *)v25;
        v11 = __p;
        goto LABEL_14;
      }
      v41 = v283;
      v42 = (v284 - v283) >> 3;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61)
        sub_20E92CED8();
      v44 = v285 - v283;
      if ((v285 - v283) >> 2 > v43)
        v43 = v44 >> 2;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
      {
        if (v45 >> 61)
          sub_20E877A38();
        v46 = operator new(8 * v45);
        v47 = &v46[8 * v42];
        *(_QWORD *)v47 = *(_QWORD *)v10;
        v25 = (uint64_t)(v47 + 8);
        v48 = v24 - v41;
        if (v24 != v41)
        {
LABEL_60:
          v49 = v48 - 8;
          if (v49 >= 0x58)
          {
            v6 = v275;
            if ((unint64_t)(v41 - v46) >= 0x20)
            {
              v50 = (v49 >> 3) + 1;
              v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
              v52 = &v24[-v51];
              v47 -= v51;
              v53 = &v46[8 * v42 - 16];
              v54 = v24 - 16;
              v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v56 = *(_OWORD *)v54;
                *(v53 - 1) = *((_OWORD *)v54 - 1);
                *v53 = v56;
                v53 -= 2;
                v54 -= 32;
                v55 -= 4;
              }
              while (v55);
              v24 = v52;
              if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_69:
                v283 = v47;
                v284 = (char *)v25;
                v285 = &v46[8 * v45];
                if (v41)
                  operator delete(v41);
                goto LABEL_71;
              }
            }
          }
          else
          {
            v6 = v275;
          }
          do
          {
            v57 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v47 - 1) = v57;
            v47 -= 8;
          }
          while (v24 != v41);
          goto LABEL_69;
        }
      }
      else
      {
        v46 = 0;
        v47 = (char *)(8 * v42);
        *(_QWORD *)(8 * v42) = *(_QWORD *)v10;
        v25 = 8 * v42 + 8;
        v48 = v24 - v41;
        if (v24 != v41)
          goto LABEL_60;
      }
      v6 = v275;
      goto LABEL_69;
    }
LABEL_14:
    v10 += 4;
  }
  while (v10 != (_DWORD *)v11);
  v72 = v286.i64[1];
  if (v14 <= v12)
  {
    v74 = v286.i64[0];
  }
  else
  {
    v73 = v286.i64[1];
    v74 = v286.i64[0];
    while (v73 != v286.i64[0])
    {
      v75 = v73 - 24;
      v14 -= *(_DWORD *)(v73 - 8);
      v73 -= 24;
      if (v14 <= v12)
      {
        v76 = v75 + 24;
        goto LABEL_224;
      }
    }
    v76 = v286.i64[0];
LABEL_224:
    v150 = v76 - 24;
    if (v150 != v286.i64[1])
    {
      v286.i64[1] = v150;
      v72 = v150;
    }
  }
  v271 = v72;
  __pb = 0;
  v151 = 0;
  v279 = 0uLL;
  v280 = 0;
  if (v72 != v74)
  {
    v152 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v74) >> 3);
    if (v152 >> 61)
      sub_20E867F44();
    v151 = (char *)operator new(8 * v152);
    *(_QWORD *)&v279 = v151;
    *((_QWORD *)&v279 + 1) = v151;
    __pb = &v151[8 * v152];
    v280 = __pb;
    v72 = v271;
  }
  if (v74 != v72)
  {
    v153 = v151;
    while (1)
    {
      v154 = *(_QWORD *)(v74 + 8);
      v155 = v284;
      if (v284 < v285)
      {
        *(_QWORD *)v284 = v154;
        v156 = (uint64_t)(v155 + 8);
        goto LABEL_255;
      }
      v157 = v283;
      v158 = (v284 - v283) >> 3;
      v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 61)
      {
        *((_QWORD *)&v279 + 1) = v153;
        v280 = __pb;
        *(_QWORD *)&v279 = v151;
        sub_20E92CED8();
      }
      v160 = v285 - v283;
      if ((v285 - v283) >> 2 > v159)
        v159 = v160 >> 2;
      v161 = (unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v159;
      if (v161)
        break;
      v162 = 0;
      v163 = (unint64_t *)(8 * v158);
      *(_QWORD *)(8 * v158) = v154;
      v156 = 8 * v158 + 8;
      v164 = v155 - v157;
      if (v155 != v157)
        goto LABEL_246;
LABEL_252:
      v283 = (char *)v163;
      v284 = (char *)v156;
      v285 = &v162[8 * v161];
      if (v157)
        operator delete(v157);
      v6 = v275;
      v72 = v271;
LABEL_255:
      v284 = (char *)v156;
      v174 = sub_20F3045A4((_QWORD *)v6, v154);
      if (!v174
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 2055, (uint64_t)"const_submap_to_serialize", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        *((_QWORD *)&v279 + 1) = v153;
        v280 = __pb;
        *(_QWORD *)&v279 = v151;
        abort();
      }
      if (!*(_BYTE *)(*(_QWORD *)(v6 + 80) + 940) && (v174[38] & 0x20) != 0)
        goto LABEL_232;
      v175 = v174[2];
      if (v153 >= __pb)
      {
        v176 = (v153 - v151) >> 3;
        v177 = v176 + 1;
        if ((unint64_t)(v176 + 1) >> 61)
        {
          *((_QWORD *)&v279 + 1) = v153;
          v280 = __pb;
          *(_QWORD *)&v279 = v151;
          sub_20E867F44();
        }
        if ((__pb - v151) >> 2 > v177)
          v177 = (__pb - v151) >> 2;
        if ((unint64_t)(__pb - v151) >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          if (v178 >> 61)
          {
            *((_QWORD *)&v279 + 1) = v153;
            v280 = __pb;
            *(_QWORD *)&v279 = v151;
            sub_20E877A38();
          }
          v179 = operator new(8 * v178);
          v180 = &v179[8 * v176];
          *(_QWORD *)v180 = v175;
          v181 = (uint64_t)(v180 + 8);
          v182 = v153 - v151;
          if (v153 != v151)
          {
LABEL_269:
            v183 = v182 - 8;
            if (v183 < 0x168
              || (v186 = (v153 - 8 - v151) & 0xFFFFFFFFFFFFFFF8, &v179[v153 - v151 - 8 - v186] > &v179[v153 - v151 - 8])
              || &v153[-v186 - 8] > v153 - 8
              || (unint64_t)(v151 - v179) < 0x20)
            {
              v184 = v153;
              v6 = v275;
            }
            else
            {
              v187 = (v183 >> 3) + 1;
              v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
              v184 = &v153[-v188];
              v180 -= v188;
              v189 = &v179[8 * v176 - 16];
              v190 = v153 - 16;
              v191 = v187 & 0x3FFFFFFFFFFFFFFCLL;
              v6 = v275;
              do
              {
                v192 = *(_OWORD *)v190;
                *(v189 - 1) = *((_OWORD *)v190 - 1);
                *v189 = v192;
                v189 -= 2;
                v190 -= 32;
                v191 -= 4;
              }
              while (v191);
              if (v187 == (v187 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_272:
                __pb = &v179[8 * v178];
                if (v151)
                  goto LABEL_273;
                goto LABEL_274;
              }
            }
            do
            {
              v185 = *((_QWORD *)v184 - 1);
              v184 -= 8;
              *((_QWORD *)v180 - 1) = v185;
              v180 -= 8;
            }
            while (v184 != v151);
            goto LABEL_272;
          }
        }
        else
        {
          v179 = 0;
          v180 = (char *)(8 * v176);
          *(_QWORD *)(8 * v176) = v175;
          v181 = 8 * v176 + 8;
          v182 = v153 - v151;
          if (v153 != v151)
            goto LABEL_269;
        }
        v6 = v275;
        __pb = &v179[8 * v178];
        if (v151)
LABEL_273:
          operator delete(v151);
LABEL_274:
        v151 = v180;
        v153 = (char *)v181;
        v72 = v271;
        goto LABEL_232;
      }
      *(_QWORD *)v153 = v175;
      v153 += 8;
LABEL_232:
      v74 += 24;
      if (v74 == v72)
      {
        *((_QWORD *)&v279 + 1) = v153;
        v280 = __pb;
        *(_QWORD *)&v279 = v151;
        goto LABEL_286;
      }
    }
    if (v161 >> 61)
    {
      *((_QWORD *)&v279 + 1) = v153;
      v280 = __pb;
      *(_QWORD *)&v279 = v151;
      sub_20E877A38();
    }
    v162 = operator new(8 * v161);
    v163 = (unint64_t *)&v162[8 * v158];
    *v163 = v154;
    v156 = (uint64_t)(v163 + 1);
    v164 = v155 - v157;
    if (v155 == v157)
      goto LABEL_252;
LABEL_246:
    v165 = v164 - 8;
    if (v165 < 0x58)
      goto LABEL_420;
    if ((unint64_t)(v157 - v162) < 0x20)
      goto LABEL_420;
    v166 = (v165 >> 3) + 1;
    v167 = 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
    v168 = &v155[-v167];
    v163 = (unint64_t *)((char *)v163 - v167);
    v169 = &v162[8 * v158 - 16];
    v170 = v155 - 16;
    v171 = v166 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v172 = *(_OWORD *)v170;
      *(v169 - 1) = *((_OWORD *)v170 - 1);
      *v169 = v172;
      v169 -= 2;
      v170 -= 32;
      v171 -= 4;
    }
    while (v171);
    v155 = v168;
    if (v166 != (v166 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_420:
      do
      {
        v173 = *((_QWORD *)v155 - 1);
        v155 -= 8;
        *--v163 = v173;
      }
      while (v155 != v157);
    }
    goto LABEL_252;
  }
LABEL_286:
  v193 = v283;
  v194 = v284;
  v195 = *(_QWORD *)(v6 + v267);
  v196 = *(_QWORD **)(v266 + 8);
  if (v283 != v284)
  {
    do
    {
      v197 = *(_QWORD *)v193;
      if (v196 == (_QWORD *)v195)
        goto LABEL_299;
      v198 = ((uint64_t)v196 - v195) >> 4;
      v199 = (_QWORD *)v195;
      do
      {
        v200 = v198 >> 1;
        v201 = &v199[2 * (v198 >> 1)];
        v203 = *v201;
        v202 = v201 + 2;
        v198 += ~(v198 >> 1);
        if (v203 < v197)
          v199 = v202;
        else
          v198 = v200;
      }
      while (v198);
      if (v196 == v199 || *v199 != v197)
LABEL_299:
        v199 = v196;
      v204 = v199 + 2;
      if (v199 + 2 != v196)
      {
        v205 = (char *)v196 - (char *)v199 - 32;
        if (v205 < 0x10)
          goto LABEL_421;
        v206 = ((uint64_t)v199 - v195) >> 4;
        v207 = (v205 >> 4) + 1;
        v208 = 16 * (v207 & 0x1FFFFFFFFFFFFFFELL);
        v199 = (_QWORD *)((char *)v199 + v208);
        v204 = (_QWORD *)((char *)v204 + v208);
        v209 = v195 + 24 + 16 * v206;
        v210 = v207 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v211 = *(_QWORD *)(v209 + 8);
          *(_QWORD *)(v209 - 24) = *(_QWORD *)(v209 - 8);
          *(_QWORD *)(v209 - 8) = v211;
          LODWORD(v211) = *(_DWORD *)(v209 + 16);
          *(_DWORD *)(v209 - 16) = *(_DWORD *)v209;
          *(_DWORD *)v209 = v211;
          v209 += 32;
          v210 -= 2;
        }
        while (v210);
        if (v207 != (v207 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_421:
          do
          {
            *v199 = *v204;
            *((_DWORD *)v199 + 2) = *((_DWORD *)v204 + 2);
            v199 += 2;
            v204 += 2;
          }
          while (v204 != v196);
        }
      }
      v196 = v199;
      v193 += 8;
    }
    while (v193 != v194);
    *(_QWORD *)(v266 + 8) = v199;
  }
  v212 = (_QWORD *)v286.i64[0];
  v286.i64[1] = v286.i64[0];
  if ((_QWORD *)v195 == v196)
  {
    *(_QWORD *)(v266 + 8) = v195;
    goto LABEL_338;
  }
  while (2)
  {
    v213 = *(void **)v195;
    v214 = *(_DWORD *)(v195 + 8);
    LODWORD(v281[0]) = v214;
    v281[1] = v213;
    LODWORD(v282) = 0;
    v215 = (_DWORD *)v286.i64[0];
    if (v286.i64[1] == v286.i64[0])
    {
      v215 = (_DWORD *)v286.i64[1];
LABEL_310:
      sub_20F3192F8((unint64_t *)&v286, (uint64_t)v215, (__int128 *)v281);
      goto LABEL_311;
    }
    v216 = 0xAAAAAAAAAAAAAAABLL * ((v286.i64[1] - v286.i64[0]) >> 3);
    do
    {
      v217 = v216 >> 1;
      v218 = &v215[6 * (v216 >> 1)];
      v220 = *v218;
      v219 = v218 + 6;
      v216 += ~(v216 >> 1);
      if (v220 < v214)
        v215 = v219;
      else
        v216 = v217;
    }
    while (v216);
    if ((_DWORD *)v286.i64[1] == v215 || *v215 != v214)
      goto LABEL_310;
LABEL_311:
    v195 += 16;
    if ((_QWORD *)v195 != v196)
      continue;
    break;
  }
  v221 = (_QWORD *)v286.i64[1];
  v212 = (_QWORD *)v286.i64[0];
  *(_QWORD *)(v266 + 8) = *(_QWORD *)(v6 + v267);
  if (v212 != v221)
  {
    for (j = v212; j != v221; j += 3)
    {
      v223 = *(__int128 **)(v6 + v267);
      v224 = *(__int128 **)(v266 + 8);
      v225 = (void *)j[1];
      v281[0] = v225;
      v226 = v224 - v223;
      LODWORD(v281[1]) = v226;
      if (v224 == v223)
      {
        v223 = v224;
      }
      else
      {
        do
        {
          v227 = v226 >> 1;
          v228 = &v223[v226 >> 1];
          v230 = *(_QWORD *)v228;
          v229 = v228 + 1;
          v226 += ~(v226 >> 1);
          if (v230 < (unint64_t)v225)
            v223 = v229;
          else
            v226 = v227;
        }
        while (v226);
        if (v224 != v223 && *(void **)v223 == v225)
          continue;
      }
      sub_20F313A5C((char **)v266, v223, (uint64_t *)v281);
    }
  }
LABEL_338:
  if (v283)
  {
    v284 = v283;
    operator delete(v283);
  }
  if (v212)
    operator delete(v212);
  v145 = (char **)*((_QWORD *)&v279 + 1);
  v144 = (char **)v280;
  v146 = (char **)v279;
  if ((_QWORD)v279 != *((_QWORD *)&v279 + 1))
  {
LABEL_206:
    v147 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 2808);
    v148 = v146;
    while (*((_QWORD *)*v148 + 20) != v147)
    {
      if (++v148 == v145)
        goto LABEL_214;
    }
    if (v148 != v145)
    {
      if ((v270 & 1) == 0)
        goto LABEL_215;
      goto LABEL_212;
    }
LABEL_214:
    v147 = *((_QWORD *)*(v145 - 1) + 20);
    if ((v270 & 1) != 0)
      goto LABEL_212;
    goto LABEL_215;
  }
LABEL_382:
  if (!a4)
  {
    v147 = -1;
    v145 = v146;
    if ((v270 & 1) == 0)
      goto LABEL_215;
    goto LABEL_212;
  }
  v261 = *(_QWORD *)(v6 + 80);
  v147 = *(_QWORD *)(v261 + 2808);
  v262 = *(char **)(*(_QWORD *)(v261 + 2816) + 16);
  if (v146 >= v144)
  {
    v263 = ((char *)v144 - (char *)v146) >> 2;
    if (v263 <= 1)
      v263 = 1;
    if ((unint64_t)((char *)v144 - (char *)v146) >= 0x7FFFFFFFFFFFFFF8)
      v264 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v264 = v263;
    if (v264 >> 61)
      sub_20E877A38();
    v265 = (char **)operator new(8 * v264);
    v144 = &v265[v264];
    *v265 = v262;
    v145 = v265 + 1;
    if (v146)
      operator delete(v146);
    v146 = v265;
    v6 = v275;
    if ((v270 & 1) == 0)
      goto LABEL_215;
LABEL_212:
    v149 = *(_QWORD *)(v6 + 1000) - *(_QWORD *)(v6 + 992);
    if (!*(_BYTE *)(v6 + 2408))
      goto LABEL_216;
    goto LABEL_219;
  }
  *v146 = v262;
  v145 = v146 + 1;
  v6 = v275;
  if ((v270 & 1) != 0)
    goto LABEL_212;
LABEL_215:
  v149 = *(_QWORD *)(v6 + 1024) - *(_QWORD *)(v6 + 1016);
  if (*(_BYTE *)(v6 + 2408))
  {
LABEL_219:
    sub_20F444ADC(v145 - v146, v149 >> 4, v6 + 2328);
    goto LABEL_220;
  }
LABEL_216:
  if (*(_BYTE *)(v6 + 2528) && *(_QWORD *)(v6 + 2512) && *(_QWORD *)(v6 + 2464) != *(_QWORD *)(v6 + 2472))
    goto LABEL_219;
LABEL_220:
  *a6 = v146;
  a6[1] = v145;
  a6[2] = v144;
  a6[3] = (char **)v147;
}

void sub_20F307CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (v26)
  {
    operator delete(v26);
    v29 = a22;
    if (!a22)
    {
LABEL_3:
      v30 = *(void **)(v27 - 112);
      if (!v30)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v29 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = *(void **)(v27 - 112);
  if (!v30)
  {
LABEL_4:
    v31 = a25;
    if (!a25)
    {
LABEL_10:
      v32 = *(void **)(v27 - 136);
      if (v32)
      {
        *(_QWORD *)(v27 - 128) = v32;
        operator delete(v32);
      }
      _Unwind_Resume(exception_object);
    }
LABEL_9:
    operator delete(v31);
    goto LABEL_10;
  }
LABEL_8:
  *(_QWORD *)(v27 - 104) = v30;
  operator delete(v30);
  v31 = a25;
  if (!a25)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_20F307E94(uint64_t a1, uint64_t a2, _OWORD *a3, double a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  size_t v17;
  const char *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned __int8 v91;
  const char *v92;
  size_t v93;
  _BYTE *v94;
  unint64_t v95;
  const char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  __int128 *v143;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v145;
  int v146;
  const char *v147;
  int v148;
  const char *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE object[48];
  _BYTE v155[88];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _OWORD v167[2];
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 2321))
    return 0;
  v11 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v11 + 2499) && *(_BYTE *)(v11 + 2623))
  {
    sub_20F2FC0E0(&v152);
    if (**(int **)(v152 + 56) > 5)
      return 0;
    v12 = *(unsigned __int8 *)(v152 + 72);
    v13 = sub_20E8C31DC(v152, "OSLogSurrogateAppender", 1, 0);
    v14 = v13;
    if (!v12 && v13 == 0)
      return 0;
    v143 = (__int128 *)&v152;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v145 = std::chrono::system_clock::now().__d_.__rep_;
    v146 = 5;
    v147 = "unknown file";
    v148 = 2367;
    v150 = 0;
    v151 = 0;
    v149 = "unknown function";
    v16 = v152;
    if (*(char *)(v152 + 39) < 0)
    {
      v18 = *(const char **)(v152 + 16);
      v17 = *(_QWORD *)(v152 + 24);
    }
    else
    {
      v17 = *(unsigned __int8 *)(v152 + 39);
      v18 = (const char *)(*(_QWORD *)v143 + 16);
    }
    v141 = *(_QWORD *)v143 + 16;
    v91 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v92 = byte_254A4A4F8;
    else
      v92 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v93 = byte_254A4A4F8[23];
    else
      v93 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v92, v18);
    v94 = &object[8];
    if (v93 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v93 >= 0x17)
    {
      v95 = v14;
      v96 = v18;
      v97 = v16;
      v98 = v12;
      v99 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v93 | 7) != 0x17)
        v99 = v93 | 7;
      v100 = v99 + 1;
      v94 = operator new(v99 + 1);
      *(_QWORD *)&object[16] = v93;
      *(_QWORD *)&object[24] = v100 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v94;
      v12 = v98;
      v16 = v97;
      v18 = v96;
      v14 = v95;
    }
    else
    {
      object[31] = v93;
      if (!v93)
      {
LABEL_58:
        v94[v93] = 0;
        object[32] = 1;
        v101 = &object[40];
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v17 >= 0x17)
        {
          v102 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v102 = v17 | 7;
          v103 = v102 + 1;
          v101 = operator new(v102 + 1);
          *(_QWORD *)v155 = v17;
          *(_QWORD *)&v155[8] = v103 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v101;
        }
        else
        {
          v155[15] = v17;
          if (!v17)
            goto LABEL_66;
        }
        memmove(v101, v18, v17);
LABEL_66:
        v101[v17] = 0;
        v155[16] = 1;
        v104 = *(NSObject **)object;
        if ((v155[15] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v14 && *(_QWORD *)(v14 + 24))
        {
          v105 = _os_log_pack_size();
          v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
          v107 = (std::__shared_weak_count *)operator new();
          v108 = v107;
          v107->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v107->__shared_owners_;
          v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v107->__shared_weak_owners_ = 0;
          v107[1].__vftable = v106;
          *(_QWORD *)object = v106;
          *(_QWORD *)&object[8] = v106;
          *(_QWORD *)&object[16] = v107;
          do
            v110 = __ldxr(p_shared_owners);
          while (__stxr(v110 + 1, p_shared_owners));
          memset(&object[24], 0, 24);
          do
            v111 = __ldaxr(p_shared_owners);
          while (__stlxr(v111 - 1, p_shared_owners));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v108);
          }
          v112 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v113 = operator new();
          v114 = *(unsigned __int8 *)(v16 + 39);
          v115 = v141;
          if ((v114 & 0x80u) != 0)
          {
            v115 = *(_QWORD *)(v16 + 16);
            v114 = *(_QWORD *)(v16 + 24);
          }
          *(_QWORD *)v113 = v112;
          *(_OWORD *)(v113 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v113 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v113 + 40) = v115;
          *(_QWORD *)(v113 + 48) = v114;
          *(_BYTE *)(v113 + 56) = 16;
          v153 = 0;
          *(_QWORD *)&v142 = v113;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v142);
          v116 = v142;
          *(_QWORD *)&v142 = 0;
          if (v116)
          {
            v117 = *(std::__shared_weak_count **)(v116 + 32);
            if (v117)
            {
              v118 = (unint64_t *)&v117->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            v120 = *(std::__shared_weak_count **)(v116 + 16);
            if (v120)
            {
              v121 = (unint64_t *)&v120->__shared_owners_;
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
            v123 = v153;
            v153 = 0;
            if (v123)
            {
              v124 = *(std::__shared_weak_count **)(v123 + 32);
              if (v124)
              {
                v125 = (unint64_t *)&v124->__shared_owners_;
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 - 1, v125));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                  std::__shared_weak_count::__release_weak(v124);
                }
              }
              v127 = *(std::__shared_weak_count **)(v123 + 16);
              if (v127)
              {
                v128 = (unint64_t *)&v127->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              MEMORY[0x212BC6398](v123, 0x10F0C40B62ED6C6);
            }
          }
          v130 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v131 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v133 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v134 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
        }
        else
        {
          os_log_type_enabled(v104, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v136 = (void *)_os_log_send_and_compose_impl();
          if (v136)
            free(v136);
        }
        if (v12)
        {
          sub_20E8C003C((uint64_t)&v143, "In submapping mode with anchor layer, the user should not call MappingInterface::AddObjectAnchor");
          sub_20E863570((uint64_t)&v143);
        }
        sub_20E863570((uint64_t)&v143);
        v137 = v151;
        if (v151)
        {
          v138 = (unint64_t *)&v151->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        return 0;
      }
    }
    memmove(v94, v92, v93);
    goto LABEL_58;
  }
  if (*(_BYTE *)(v11 + 2634))
  {
    v19 = (_QWORD *)(a1 + 16);
    do
    {
      v19 = (_QWORD *)*v19;
      if (!v19)
      {
        v11 = *(_QWORD *)(a1 + 80);
        goto LABEL_20;
      }
      v20 = sub_20EB07858(*(_QWORD **)(v19[27] + 8), a2);
    }
    while (!v20);
    v21 = v20;
    if (!*(_BYTE *)(a1 + 2264))
    {
      bzero((void *)(a1 + 1352), 0x390uLL);
      *(_BYTE *)(a1 + 2264) = 1;
    }
    sub_20FCCCC58((uint64_t)object, a2);
    v22 = *(_OWORD *)(v21 + 5);
    *(_QWORD *)v155 = v21[7];
    *(_OWORD *)&object[32] = v22;
    v23 = *((_OWORD *)v21 + 6);
    v24 = *((_OWORD *)v21 + 7);
    v25 = *((_OWORD *)v21 + 5);
    *(_OWORD *)&v155[8] = *((_OWORD *)v21 + 4);
    *(_OWORD *)&v155[56] = v24;
    *(_OWORD *)&v155[40] = v23;
    *(_OWORD *)&v155[24] = v25;
    v26 = *((_OWORD *)v21 + 10);
    v27 = *((_OWORD *)v21 + 11);
    v28 = *((_OWORD *)v21 + 9);
    *(_OWORD *)&v155[72] = *((_OWORD *)v21 + 8);
    v158 = v27;
    v157 = v26;
    v156 = v28;
    v29 = *((_OWORD *)v21 + 16);
    v30 = *((_OWORD *)v21 + 17);
    v31 = *((_OWORD *)v21 + 18);
    v166 = *((_OWORD *)v21 + 19);
    v165 = v31;
    v164 = v30;
    v32 = *((_OWORD *)v21 + 12);
    v33 = *((_OWORD *)v21 + 13);
    v34 = *((_OWORD *)v21 + 14);
    v162 = *((_OWORD *)v21 + 15);
    v161 = v34;
    v160 = v33;
    v159 = v32;
    v163 = v29;
    v35 = *((_OWORD *)v21 + 20);
    *(_OWORD *)((char *)v167 + 9) = *(_OWORD *)((char *)v21 + 329);
    v167[0] = v35;
    v36 = (__int128 *)operator new(0x158uLL);
    v143 = v36;
    v145 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v36 + 344;
    v37 = *(_OWORD *)&object[16];
    *v36 = *(_OWORD *)object;
    v36[1] = v37;
    v36[2] = *(_OWORD *)&object[32];
    *((_QWORD *)v36 + 6) = *(_QWORD *)v155;
    v38 = *(_OWORD *)&v155[40];
    *(__int128 *)((char *)v36 + 104) = *(_OWORD *)&v155[56];
    *(__int128 *)((char *)v36 + 88) = v38;
    v39 = *(_OWORD *)&v155[8];
    *(__int128 *)((char *)v36 + 72) = *(_OWORD *)&v155[24];
    *(__int128 *)((char *)v36 + 56) = v39;
    v40 = v157;
    *(__int128 *)((char *)v36 + 168) = v158;
    *(__int128 *)((char *)v36 + 152) = v40;
    v41 = *(_OWORD *)&v155[72];
    *(__int128 *)((char *)v36 + 136) = v156;
    *(__int128 *)((char *)v36 + 120) = v41;
    v42 = v159;
    v43 = v160;
    v44 = v161;
    *(__int128 *)((char *)v36 + 232) = v162;
    *(__int128 *)((char *)v36 + 216) = v44;
    *(__int128 *)((char *)v36 + 200) = v43;
    *(__int128 *)((char *)v36 + 184) = v42;
    v45 = v163;
    v46 = v164;
    v47 = v165;
    *(__int128 *)((char *)v36 + 296) = v166;
    *(__int128 *)((char *)v36 + 280) = v47;
    *(__int128 *)((char *)v36 + 264) = v46;
    *(__int128 *)((char *)v36 + 248) = v45;
    v48 = v167[0];
    *(__int128 *)((char *)v36 + 321) = *(_OWORD *)((char *)v167 + 9);
    *(__int128 *)((char *)v36 + 312) = v48;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v36 + 344;
    sub_20F3026D0(a1, &v143, a1 + 1528);
LABEL_41:
    operator delete(v36);
    return 0;
  }
LABEL_20:
  v49 = *(_DWORD *)(v11 + 2708);
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
    v49 = *(_DWORD *)(v11 + 968);
  *(_QWORD *)&v142 = *(_QWORD *)(a1 + 2312);
  *((_QWORD *)&v142 + 1) = v49;
  v50 = a3[5];
  *(_OWORD *)&v155[16] = a3[4];
  *(_OWORD *)&v155[32] = v50;
  v51 = a3[7];
  *(_OWORD *)&v155[48] = a3[6];
  *(_OWORD *)&v155[64] = v51;
  v52 = a3[1];
  *(_OWORD *)object = *a3;
  *(_OWORD *)&object[16] = v52;
  v53 = a3[2];
  v54 = a3[3];
  *(_OWORD *)&object[32] = v53;
  *(_OWORD *)v155 = v54;
  v55 = *(_QWORD *)(v11 + 2824);
  v56 = *(_QWORD *)(v11 + 2832);
  if (v55 != v56)
  {
    while (1)
    {
      v57 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v55 + 192) + 8), a2);
      if (v57)
        break;
      v55 += 4472;
      if (v55 == v56)
        goto LABEL_28;
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 2635))
      return 0;
    v64 = v57;
    if (!*(_BYTE *)(a1 + 2264))
    {
      bzero((void *)(a1 + 1352), 0x390uLL);
      *(_BYTE *)(a1 + 2264) = 1;
    }
    sub_20FCCCC58((uint64_t)object, a2);
    v65 = *(_OWORD *)(v64 + 5);
    *(_QWORD *)v155 = v64[7];
    *(_OWORD *)&object[32] = v65;
    v66 = *((_OWORD *)v64 + 6);
    v67 = *((_OWORD *)v64 + 7);
    v68 = *((_OWORD *)v64 + 5);
    *(_OWORD *)&v155[8] = *((_OWORD *)v64 + 4);
    *(_OWORD *)&v155[56] = v67;
    *(_OWORD *)&v155[40] = v66;
    *(_OWORD *)&v155[24] = v68;
    v69 = *((_OWORD *)v64 + 10);
    v70 = *((_OWORD *)v64 + 11);
    v71 = *((_OWORD *)v64 + 9);
    *(_OWORD *)&v155[72] = *((_OWORD *)v64 + 8);
    v158 = v70;
    v157 = v69;
    v156 = v71;
    v72 = *((_OWORD *)v64 + 16);
    v73 = *((_OWORD *)v64 + 17);
    v74 = *((_OWORD *)v64 + 18);
    v166 = *((_OWORD *)v64 + 19);
    v165 = v74;
    v164 = v73;
    v75 = *((_OWORD *)v64 + 12);
    v76 = *((_OWORD *)v64 + 13);
    v77 = *((_OWORD *)v64 + 14);
    v162 = *((_OWORD *)v64 + 15);
    v161 = v77;
    v160 = v76;
    v159 = v75;
    v163 = v72;
    v78 = *((_OWORD *)v64 + 20);
    *(_OWORD *)((char *)v167 + 9) = *(_OWORD *)((char *)v64 + 329);
    v167[0] = v78;
    v36 = (__int128 *)operator new(0x158uLL);
    v143 = v36;
    v145 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v36 + 344;
    v79 = *(_OWORD *)&object[16];
    *v36 = *(_OWORD *)object;
    v36[1] = v79;
    v36[2] = *(_OWORD *)&object[32];
    *((_QWORD *)v36 + 6) = *(_QWORD *)v155;
    v80 = *(_OWORD *)&v155[40];
    *(__int128 *)((char *)v36 + 104) = *(_OWORD *)&v155[56];
    *(__int128 *)((char *)v36 + 88) = v80;
    v81 = *(_OWORD *)&v155[8];
    *(__int128 *)((char *)v36 + 72) = *(_OWORD *)&v155[24];
    *(__int128 *)((char *)v36 + 56) = v81;
    v82 = v157;
    *(__int128 *)((char *)v36 + 168) = v158;
    *(__int128 *)((char *)v36 + 152) = v82;
    v83 = *(_OWORD *)&v155[72];
    *(__int128 *)((char *)v36 + 136) = v156;
    *(__int128 *)((char *)v36 + 120) = v83;
    v84 = v159;
    v85 = v160;
    v86 = v161;
    *(__int128 *)((char *)v36 + 232) = v162;
    *(__int128 *)((char *)v36 + 216) = v86;
    *(__int128 *)((char *)v36 + 200) = v85;
    *(__int128 *)((char *)v36 + 184) = v84;
    v87 = v163;
    v88 = v164;
    v89 = v165;
    *(__int128 *)((char *)v36 + 296) = v166;
    *(__int128 *)((char *)v36 + 280) = v89;
    *(__int128 *)((char *)v36 + 264) = v88;
    *(__int128 *)((char *)v36 + 248) = v87;
    v90 = v167[0];
    *(__int128 *)((char *)v36 + 321) = *(_OWORD *)((char *)v167 + 9);
    *(__int128 *)((char *)v36 + 312) = v90;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v36 + 344;
    sub_20F3026D0(a1, &v143, a1 + 1528);
    goto LABEL_41;
  }
LABEL_28:
  if (!sub_20F264904(*(_QWORD **)(v11 + 2816), a2, (float64x2_t *)object, &v142, *(double *)&v53, *(double *)&v54, a6, a7))return 0;
  v58 = *(_QWORD **)(a1 + 72);
  if (v58 && *(_QWORD *)(a1 + 64))
  {
    v59 = v58[5];
    v60 = v58[6];
    v61 = 170 * ((v60 - v59) >> 3) - 1;
    if (v60 == v59)
      v61 = 0;
    if (v61 == v58[9] + v58[8])
    {
      sub_20F23D70C(v58 + 4);
      v59 = v58[5];
      v60 = v58[6];
    }
    if (v60 == v59)
    {
      v63 = 0;
    }
    else
    {
      v62 = v58[9] + v58[8];
      v63 = *(_QWORD *)(v59 + 8 * (v62 / 0xAA)) + 24 * (v62 % 0xAA);
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)v63, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v140 = *(_OWORD *)a2;
      *(_QWORD *)(v63 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v63 = v140;
    }
    ++v58[9];
  }
  return 1;
}

void sub_20F308A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20F308AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20F308AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F308B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x212BC6398](v6, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F308B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F308B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20F308BEC(uint64_t a1, const void **__s1, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  size_t v8;
  int v9;
  size_t v11;
  int v12;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (!*(_QWORD *)(a1 + 2872))
    return 0;
  BYTE7(v36) = 4;
  strcpy((char *)&v35, "sem_");
  v4 = *((unsigned __int8 *)__s1 + 23);
  v5 = (v4 & 0x80u) == 0 ? *((unsigned __int8 *)__s1 + 23) : (unint64_t)__s1[1];
  if (v5 <= 3)
    return 0;
  if ((v4 & 0x80) != 0)
  {
    if ((unint64_t)__s1[1] >= 4)
      v11 = 4;
    else
      v11 = (size_t)__s1[1];
    v12 = memcmp(*__s1, &v35, v11);
    if (v11 != 4 || v12 != 0)
      return 0;
  }
  else
  {
    if (v4 >= 4)
      v8 = 4;
    else
      v8 = *((unsigned __int8 *)__s1 + 23);
    v9 = memcmp(__s1, &v35, v8);
    if (v8 != 4 || v9 != 0)
      return 0;
  }
  if (!*(_BYTE *)(a1 + 2321))
  {
    v15 = *(_QWORD *)(a1 + 80);
    v16 = *(char **)(v15 + 2824);
    v17 = *(char **)(v15 + 2832);
    if (v16 != v17)
    {
      v18 = v17 - v16 - 4472;
      if (v18 >> 3 >= 0x22F)
      {
        v21 = 0;
        v22 = 0;
        v23 = v18 / 0x1178 + 1;
        v20 = &v16[4472 * (v23 & 0x1FFFFFFFFFFFFELL)];
        v24 = v23 & 0x1FFFFFFFFFFFFELL;
        v25 = *(_QWORD **)(v15 + 2824);
        do
        {
          v21 += *(_QWORD *)(**(_QWORD **)(v25[2] + 424) + 64) - ((uint64_t)(v25[5] - v25[4]) >> 4);
          v22 += *(_QWORD *)(**(_QWORD **)(v25[561] + 424) + 64) - ((uint64_t)(v25[564] - v25[563]) >> 4);
          v25 += 1118;
          v24 -= 2;
        }
        while (v24);
        v19 = v22 + v21;
        if (v23 == (v23 & 0x1FFFFFFFFFFFFELL))
        {
LABEL_32:
          if (v19)
          {
            v26 = *(_DWORD *)(v15 + 2708);
            if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 64))
            {
              if (*(_QWORD *)(a1 + 72))
                v26 = *(_DWORD *)(v15 + 968);
            }
            *(_QWORD *)&v43 = *(_QWORD *)(a1 + 2312);
            *((_QWORD *)&v43 + 1) = v26;
            v27 = *(_OWORD *)(a3 + 80);
            v39 = *(_OWORD *)(a3 + 64);
            v40 = v27;
            v28 = *(_OWORD *)(a3 + 112);
            v41 = *(_OWORD *)(a3 + 96);
            v42 = v28;
            v29 = *(_OWORD *)(a3 + 16);
            v35 = *(float64x2_t *)a3;
            v36 = v29;
            v30 = *(_OWORD *)(a3 + 48);
            v37 = *(_OWORD *)(a3 + 32);
            v38 = v30;
            while (!sub_20EB07858(*(_QWORD **)(*((_QWORD *)v16 + 24) + 8), (uint64_t)__s1))
            {
              v16 += 4472;
              if (v16 == v17)
                return sub_20F264904(*(_QWORD **)(v15 + 2816), (uint64_t)__s1, &v35, &v43, v31, v32, v33, v34) != 0;
            }
          }
          return 0;
        }
      }
      else
      {
        v19 = 0;
        v20 = *(char **)(v15 + 2824);
      }
      do
      {
        v19 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v20 + 2) + 424) + 64)
             - ((uint64_t)(*((_QWORD *)v20 + 5) - *((_QWORD *)v20 + 4)) >> 4);
        v20 += 4472;
      }
      while (v20 != v17);
      goto LABEL_32;
    }
  }
  return 0;
}

uint64_t sub_20F308E78(_QWORD *a1, uint64_t a2, _QWORD *a3, char *__src)
{
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[512];
  char v30;
  char v31;
  _BYTE v32[511];
  char v33;
  char v34;
  _BYTE v35[511];
  char v36;
  _BYTE __dst[511];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a2;
  v8 = (int8x8_t)a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *(_QWORD *)a2;
      if (v7 >= *(_QWORD *)&v8)
        v10 = v7 % *(_QWORD *)&v8;
    }
    else
    {
      v10 = (*(_QWORD *)&v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v8 - 1;
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == v7)
                goto LABEL_48;
            }
            else if ((v15 & v13) != v10)
            {
              goto LABEL_21;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_21;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v7)
          {
            if (v12[2] == v7)
            {
LABEL_48:
              v28 = (uint64_t)(v12 + 3);
              v29[0] = 0;
              v30 = 0;
              if (__src[512])
              {
                memcpy(v29, __src, sizeof(v29));
                v30 = 1;
              }
              return sub_20F25A328(v28, a2, a3, v29);
            }
          }
          else
          {
            if (v14 >= *(_QWORD *)&v8)
              v14 %= *(_QWORD *)&v8;
            if (v14 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_21:
  v16 = a1[10];
  v17 = __src[512];
  if (!__src[512])
  {
    if (*(_BYTE *)(v16 + 2499))
    {
      v19 = 0;
      v20 = *(_QWORD *)(v16 + 2824);
      v21 = *(_QWORD *)(v16 + 2832);
      if (v20 != v21)
        goto LABEL_29;
      goto LABEL_31;
    }
    v24 = *(_QWORD *)(v16 + 2816);
    v34 = 0;
    v36 = 0;
LABEL_40:
    result = sub_20F25A328(v24, a2, a3, &v34);
    if ((_DWORD)result == 2)
      return result;
    goto LABEL_41;
  }
  v18 = __src + 1;
  v19 = *__src;
  memcpy(__dst, __src + 1, sizeof(__dst));
  if (!*(_BYTE *)(v16 + 2499))
  {
    v24 = *(_QWORD *)(v16 + 2816);
    v34 = v19;
    memcpy(v35, v18, sizeof(v35));
    v36 = 1;
    goto LABEL_40;
  }
  v20 = *(_QWORD *)(v16 + 2824);
  v21 = *(_QWORD *)(v16 + 2832);
  if (v20 != v21)
  {
LABEL_29:
    while (1)
    {
      v22 = *(_QWORD *)(v20 + 16);
      if (v22)
      {
        if (*(_QWORD *)(v22 + 160) == v7)
          break;
      }
      v20 += 4472;
      if (v20 == v21)
        return 2;
    }
  }
LABEL_31:
  if (v20 == v21 || !v20)
    return 2;
  v31 = 0;
  v33 = 0;
  if (v17)
  {
    v31 = v19;
    memcpy(v32, __dst, sizeof(v32));
    v33 = 1;
  }
  result = sub_20F25A328(v20, a2, a3, &v31);
  if ((_DWORD)result != 2)
  {
LABEL_41:
    v25 = a1[9];
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 104);
      v27 = *(_QWORD *)(v25 + 112);
      if (v26 != v27)
      {
        while (*(_QWORD *)v26 != *(_QWORD *)a2 || *(_DWORD *)(v26 + 8) != *(_DWORD *)(a2 + 8))
        {
          v26 += 24;
          if (v26 == v27)
            return result;
        }
        *(_BYTE *)(v26 + 17) = 1;
      }
    }
  }
  return result;
}

uint64_t sub_20F309184(uint64_t a1, uint64_t a2)
{
  int v2;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  BOOL v19;
  void *v20;
  unsigned int v21;
  void *v22;
  char v23;
  int v24;
  int8x8_t v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  const char *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  size_t v56;
  const char *v57;
  char v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  unsigned __int8 v63;
  const char *v64;
  size_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  int v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unsigned __int8 v113;
  const char *v114;
  size_t v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  size_t v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  int v158;
  void *v159;
  unint64_t *v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  _BYTE *v165;
  uint64_t v166;
  size_t v167;
  void *v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  _BYTE *v173;
  uint64_t v174;
  size_t v175;
  void *v176;
  _BYTE *v177;
  void **v178;
  _BYTE *v179;
  void **v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  const char *v186;
  size_t v187;
  unsigned __int8 v188;
  const char *v189;
  size_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  NSObject *v197;
  size_t v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  size_t v201;
  size_t v202;
  _QWORD *v203;
  void *v204;
  int v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  const char *v211;
  size_t v212;
  unsigned __int8 v213;
  const char *v214;
  size_t v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  size_t v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  size_t v226;
  size_t v227;
  _QWORD *v228;
  void *v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  char v234;
  _QWORD *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  char *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  char v250;
  _QWORD *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  char *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  _QWORD *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  const char *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  void *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  const char *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  const char *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  const char *v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  uint64_t v338;
  void *v339;
  void *v340;
  void *v341;
  int v342;
  int v343;
  unint64_t v344;
  unint64_t v345;
  int __s;
  int __sa;
  char *__sb;
  char *__sc;
  uint64_t v350;
  _QWORD *v351;
  int v352;
  void *v353;
  size_t v354;
  int64_t v355;
  uint64_t v356;
  char v357;
  _BYTE v358[515];
  __int128 v359;
  std::__shared_weak_count *v360;
  char *v361;
  std::__shared_weak_count *v362;
  _QWORD *v363;
  __int128 v364;
  _BYTE v365[511];
  _QWORD __src[64];
  _BYTE __dst[511];
  _QWORD v368[2];
  _BYTE __p[512];
  char v370;
  void *object[64];
  char v372;
  uint64_t v373;

  v373 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 2321))
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  v5 = *(_DWORD **)(a1 + 80);
  if (*(_DWORD *)(a2 + 48) != v5[688]
    || *(_DWORD *)(a2 + 52) != v5[689]
    || *(_DWORD *)(a2 + 56) != v5[690]
    || (v6 = *(_QWORD *)a2, v7 = *(_QWORD *)(a2 + 8), *(_QWORD *)a2 == v7))
  {
    LOBYTE(v2) = 1;
    return v2 & 1;
  }
  v8 = (_QWORD *)(a2 + 32);
  v341 = (void *)*MEMORY[0x24BEDB7F0];
  v339 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  v340 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v338 = MEMORY[0x24BEDB848] + 16;
  v2 = 1;
  v350 = *(_QWORD *)(a2 + 8);
  v351 = (_QWORD *)(a2 + 32);
  while (2)
  {
    if (*(_QWORD *)(v6 + 24) == *(_QWORD *)(v6 + 32))
      goto LABEL_13;
    v352 = v2;
    v11 = *(_QWORD *)(a1 + 80);
    v12 = *(unsigned __int8 *)(v11 + 1225);
    if (!*(_BYTE *)(v11 + 1225))
    {
      v23 = 0;
      v14 = *(_QWORD *)v6;
      v24 = 1;
      v25 = *(int8x8_t *)(a1 + 8);
      if (v25)
        goto LABEL_37;
LABEL_57:
      if (!*(_BYTE *)(a1 + 856))
      {
LABEL_70:
        v33 = 0;
        v34 = 1;
        goto LABEL_71;
      }
      v33 = 0;
      v34 = 1;
      if (*(_DWORD *)(a2 + 60) == *(_DWORD *)(a1 + 528)
        && *(_DWORD *)(a2 + 64) == *(_DWORD *)(a1 + 532)
        && *(_DWORD *)(a2 + 68) == *(_DWORD *)(a1 + 536))
      {
        v33 = 0;
        if (*(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 768)
          && *(_DWORD *)(a2 + 76) == *(_DWORD *)(a1 + 772)
          && *(_DWORD *)(a2 + 80) == *(_DWORD *)(a1 + 776))
        {
          v35 = (*(_BYTE *)(a1 + 524) != 0) == (*(_BYTE *)(a2 + 96) != 0);
          if (!*(_BYTE *)(a1 + 524) || !*(_BYTE *)(a2 + 96))
          {
LABEL_69:
            if (((v24 | !v35) & 1) == 0)
            {
              memcpy(__src, __dst, 0x1FFuLL);
              v34 = 0;
              v33 = v23;
              if (*(_DWORD *)(v11 + 2584) != 4)
                goto LABEL_91;
              goto LABEL_72;
            }
            goto LABEL_70;
          }
          v33 = 0;
          v34 = 1;
          if (*(_DWORD *)(a2 + 84) == *(_DWORD *)(a1 + 512) && *(_DWORD *)(a2 + 88) == *(_DWORD *)(a1 + 516))
          {
            v35 = *(_DWORD *)(a2 + 92) == *(_DWORD *)(a1 + 520);
            goto LABEL_69;
          }
        }
      }
LABEL_71:
      if (*(_DWORD *)(v11 + 2584) != 4)
        goto LABEL_91;
LABEL_72:
      if (*(_BYTE *)(v11 + 1225))
      {
        v8 = v351;
        if ((v34 & 1) != 0)
          goto LABEL_74;
        goto LABEL_95;
      }
LABEL_91:
      v8 = v351;
      if (v34)
      {
        v38 = *(_BYTE *)(v11 + 2499);
        if (v38)
        {
          v33 = 0;
          v39 = 1;
          v40 = *(_QWORD *)(v11 + 2824);
          v41 = *(_QWORD *)(v11 + 2832);
          if (v40 != v41)
          {
LABEL_99:
            while (1)
            {
              v42 = *(_QWORD *)(v40 + 16);
              if (v42)
              {
                if (*(_QWORD *)(v42 + 160) == *(_QWORD *)v6)
                  break;
              }
              v40 += 4472;
              if (v40 == v41)
                goto LABEL_106;
            }
          }
          goto LABEL_101;
        }
        v45 = *(_QWORD *)(v11 + 2816);
        LOBYTE(object[0]) = 0;
LABEL_109:
        v372 = v38;
        v43 = sub_20F25A328(v45, v6, (_QWORD *)(v6 + 24), object);
        v44 = v352;
        goto LABEL_110;
      }
LABEL_95:
      memcpy(v365, __src, sizeof(v365));
      if (*(_BYTE *)(v11 + 2499))
      {
        v39 = 0;
        v40 = *(_QWORD *)(v11 + 2824);
        v41 = *(_QWORD *)(v11 + 2832);
        if (v40 != v41)
          goto LABEL_99;
LABEL_101:
        if (v40 == v41 || !v40)
        {
LABEL_106:
          v44 = v352;
          goto LABEL_118;
        }
        __p[0] = 0;
        v370 = 0;
        if ((v39 & 1) == 0)
        {
          __p[0] = v33;
          memcpy(&__p[1], v365, 0x1FFuLL);
          v370 = 1;
        }
        v43 = sub_20F25A328(v40, v6, (_QWORD *)(v6 + 24), __p);
        v44 = v352;
LABEL_110:
        v8 = v351;
        if (v43 != 3)
        {
          if (v43 != 2)
          {
            if (v43 == 1)
            {
              sub_20F2FC0E0(&v353);
              v8 = v351;
              if (**((int **)v353 + 7) <= 3)
              {
                v46 = *((unsigned __int8 *)v353 + 72);
                v47 = sub_20E8C31DC((uint64_t)v353, "OSLogSurrogateAppender", 1, 0);
                v48 = v47;
                if (v46 || v47)
                {
                  *(_QWORD *)__p = &v353;
                  *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
                  *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
                  *(_DWORD *)&__p[24] = 3;
                  *(_QWORD *)&__p[32] = "unknown file";
                  *(_DWORD *)&__p[40] = 2580;
                  *(_QWORD *)&__p[48] = "unknown function";
                  *(_QWORD *)&__p[56] = 0;
                  *(_QWORD *)&__p[64] = 0;
                  v49 = **(_QWORD **)__p;
                  v334 = **(_QWORD **)__p;
                  if (*(char *)(**(_QWORD **)__p + 39) < 0)
                  {
                    v51 = *(const char **)(v49 + 16);
                    v50 = *(_QWORD *)(v49 + 24);
                  }
                  else
                  {
                    v50 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
                    v51 = (const char *)(**(_QWORD **)__p + 16);
                  }
                  v331 = **(_QWORD **)__p + 16;
                  v343 = v46;
                  __sa = *(_DWORD *)(v6 + 8);
                  v113 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)&v359);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v359);
                    if ((_BYTE)v361 && SHIBYTE(v360) < 0)
                      operator delete((void *)v359);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                    v44 = v352;
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v114 = byte_254A4A4F8;
                  else
                    v114 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v115 = byte_254A4A4F8[23];
                  else
                    v115 = *(_QWORD *)&byte_254A4A4F8[8];
                  object[0] = os_log_create(v114, v51);
                  if (v115 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v115 >= 0x17)
                  {
                    v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v115 | 7) != 0x17)
                      v117 = v115 | 7;
                    v118 = v117 + 1;
                    v116 = (void **)operator new(v117 + 1);
                    object[3] = (void *)(v118 | 0x8000000000000000);
                    object[1] = v116;
                    object[2] = (void *)v115;
                    v44 = v352;
                  }
                  else
                  {
                    HIBYTE(object[3]) = v115;
                    v116 = &object[1];
                    if (!v115)
                    {
LABEL_229:
                      *((_BYTE *)v116 + v115) = 0;
                      LOBYTE(object[4]) = 1;
                      if (v50 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v7 = v350;
                      if (v50 >= 0x17)
                      {
                        v120 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v50 | 7) != 0x17)
                          v120 = v50 | 7;
                        v121 = v120 + 1;
                        v119 = (void **)operator new(v120 + 1);
                        object[7] = (void *)(v121 | 0x8000000000000000);
                        object[5] = v119;
                        object[6] = (void *)v50;
                        v8 = v351;
                      }
                      else
                      {
                        HIBYTE(object[7]) = v50;
                        v119 = &object[5];
                        v8 = v351;
                        if (!v50)
                          goto LABEL_237;
                      }
                      memmove(v119, v51, v50);
LABEL_237:
                      *((_BYTE *)v119 + v50) = 0;
                      LOBYTE(object[8]) = 1;
                      v122 = object[0];
                      if (SHIBYTE(object[7]) < 0)
                        operator delete(object[5]);
                      if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
                        operator delete(object[1]);
                      if (object[0])
                        os_release(object[0]);
                      if (v48 && *(_QWORD *)(v48 + 24))
                      {
                        v123 = _os_log_pack_size();
                        v124 = (std::__shared_weak_count_vtbl *)operator new(v123, (std::align_val_t)8uLL);
                        v125 = (std::__shared_weak_count *)operator new();
                        v126 = v125;
                        v125->__shared_owners_ = 0;
                        p_shared_owners = (unint64_t *)&v125->__shared_owners_;
                        v125->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v125->__shared_weak_owners_ = 0;
                        v125[1].__vftable = v124;
                        object[0] = v124;
                        object[1] = v124;
                        object[2] = v125;
                        do
                          v128 = __ldxr(p_shared_owners);
                        while (__stxr(v128 + 1, p_shared_owners));
                        memset(&object[3], 0, 24);
                        do
                          v129 = __ldaxr(p_shared_owners);
                        while (__stlxr(v129 - 1, p_shared_owners));
                        if (!v129)
                        {
                          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                          std::__shared_weak_count::__release_weak(v126);
                        }
                        v130 = object[0];
                        v131 = _os_log_pack_fill();
                        v132 = *(_QWORD *)v6;
                        v133 = *(_DWORD *)(v6 + 16);
                        *(_DWORD *)v131 = 134218496;
                        *(_QWORD *)(v131 + 4) = v132;
                        *(_WORD *)(v131 + 12) = 1024;
                        *(_DWORD *)(v131 + 14) = __sa;
                        *(_WORD *)(v131 + 18) = 1024;
                        *(_DWORD *)(v131 + 20) = v133;
                        v134 = operator new();
                        v135 = *(unsigned __int8 *)(v334 + 39);
                        v136 = v331;
                        if ((v135 & 0x80u) != 0)
                        {
                          v136 = *(_QWORD *)(v334 + 16);
                          v135 = *(_QWORD *)(v334 + 24);
                        }
                        *(_QWORD *)v134 = v130;
                        *(_OWORD *)(v134 + 8) = *(_OWORD *)&object[1];
                        object[1] = 0;
                        object[2] = 0;
                        *(_OWORD *)(v134 + 24) = *(_OWORD *)&object[3];
                        object[3] = 0;
                        object[4] = 0;
                        *(_QWORD *)(v134 + 40) = v136;
                        *(_QWORD *)(v134 + 48) = v135;
                        *(_BYTE *)(v134 + 56) = 1;
                        v363 = 0;
                        *(_QWORD *)&v359 = v134;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v48 + 24) + 40))(*(_QWORD *)(v48 + 24), &v359);
                        v137 = v359;
                        *(_QWORD *)&v359 = 0;
                        if (v137)
                        {
                          v138 = *(std::__shared_weak_count **)(v137 + 32);
                          if (v138)
                          {
                            v139 = (unint64_t *)&v138->__shared_owners_;
                            do
                              v140 = __ldaxr(v139);
                            while (__stlxr(v140 - 1, v139));
                            if (!v140)
                            {
                              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                              std::__shared_weak_count::__release_weak(v138);
                            }
                          }
                          v141 = *(std::__shared_weak_count **)(v137 + 16);
                          if (v141)
                          {
                            v142 = (unint64_t *)&v141->__shared_owners_;
                            do
                              v143 = __ldaxr(v142);
                            while (__stlxr(v143 - 1, v142));
                            if (!v143)
                            {
                              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                              std::__shared_weak_count::__release_weak(v141);
                            }
                          }
                          MEMORY[0x212BC6398](v137, 0x10F0C40B62ED6C6);
                          v144 = v363;
                          v363 = 0;
                          if (v144)
                          {
                            v145 = (std::__shared_weak_count *)v144[4];
                            if (v145)
                            {
                              v146 = (unint64_t *)&v145->__shared_owners_;
                              do
                                v147 = __ldaxr(v146);
                              while (__stlxr(v147 - 1, v146));
                              if (!v147)
                              {
                                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                                std::__shared_weak_count::__release_weak(v145);
                              }
                            }
                            v148 = (std::__shared_weak_count *)v144[2];
                            if (v148)
                            {
                              v149 = (unint64_t *)&v148->__shared_owners_;
                              do
                                v150 = __ldaxr(v149);
                              while (__stlxr(v150 - 1, v149));
                              if (!v150)
                              {
                                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                                std::__shared_weak_count::__release_weak(v148);
                              }
                            }
                            MEMORY[0x212BC6398](v144, 0x10F0C40B62ED6C6);
                          }
                        }
                        v151 = (std::__shared_weak_count *)object[4];
                        if (object[4])
                        {
                          v152 = (unint64_t *)((char *)object[4] + 8);
                          do
                            v153 = __ldaxr(v152);
                          while (__stlxr(v153 - 1, v152));
                          if (!v153)
                          {
                            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                            std::__shared_weak_count::__release_weak(v151);
                          }
                        }
                        v154 = (std::__shared_weak_count *)object[2];
                        if (object[2])
                        {
                          v155 = (unint64_t *)((char *)object[2] + 8);
                          do
                            v156 = __ldaxr(v155);
                          while (__stlxr(v156 - 1, v155));
                          if (!v156)
                          {
                            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                            std::__shared_weak_count::__release_weak(v154);
                          }
                        }
                      }
                      else
                      {
                        os_log_type_enabled(v122, OS_LOG_TYPE_INFO);
                        v157 = *(void **)v6;
                        v158 = *(_DWORD *)(v6 + 16);
                        LODWORD(object[0]) = 134218496;
                        *(void **)((char *)object + 4) = v157;
                        WORD2(object[1]) = 1024;
                        *(_DWORD *)((char *)&object[1] + 6) = __sa;
                        WORD1(object[2]) = 1024;
                        HIDWORD(object[2]) = v158;
                        v159 = (void *)_os_log_send_and_compose_impl();
                        if (v159)
                          free(v159);
                      }
                      if (v343)
                      {
                        sub_20E8C003C((uint64_t)__p, "Duplicate ML Descriptors from CM in Localized Map for frame:{%llu,%u,%u}", *(_QWORD *)v6, *(_DWORD *)(v6 + 8), *(_DWORD *)(v6 + 16));
                        sub_20E863570((uint64_t)__p);
                      }
                      sub_20E863570((uint64_t)__p);
                      v110 = *(std::__shared_weak_count **)&__p[64];
                      if (!*(_QWORD *)&__p[64])
                        goto LABEL_11;
                      v160 = (unint64_t *)(*(_QWORD *)&__p[64] + 8);
                      do
                        v112 = __ldaxr(v160);
                      while (__stlxr(v112 - 1, v160));
                      goto LABEL_294;
                    }
                  }
                  memmove(v116, v114, v115);
                  goto LABEL_229;
                }
              }
            }
LABEL_11:
            v10 = 1;
LABEL_12:
            v2 = v44 & v10;
            goto LABEL_13;
          }
LABEL_118:
          v10 = 0;
          goto LABEL_12;
        }
        sub_20F2FC0E0(&v353);
        v8 = v351;
        if (**((int **)v353 + 7) > 3)
          goto LABEL_11;
        v52 = *((unsigned __int8 *)v353 + 72);
        v53 = sub_20E8C31DC((uint64_t)v353, "OSLogSurrogateAppender", 1, 0);
        v54 = v53;
        if (!v52 && !v53)
          goto LABEL_11;
        *(_QWORD *)__p = &v353;
        *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
        *(_DWORD *)&__p[24] = 3;
        *(_QWORD *)&__p[32] = "unknown file";
        *(_DWORD *)&__p[40] = 2592;
        *(_QWORD *)&__p[48] = "unknown function";
        *(_QWORD *)&__p[56] = 0;
        *(_QWORD *)&__p[64] = 0;
        v55 = **(_QWORD **)__p;
        v335 = **(_QWORD **)__p;
        if (*(char *)(**(_QWORD **)__p + 39) < 0)
        {
          v57 = *(const char **)(v55 + 16);
          v56 = *(_QWORD *)(v55 + 24);
        }
        else
        {
          v56 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
          v57 = (const char *)(**(_QWORD **)__p + 16);
        }
        v330 = **(_QWORD **)__p + 16;
        v342 = v52;
        __s = *(_DWORD *)(v6 + 8);
        v63 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v359);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v359);
          if ((_BYTE)v361 && SHIBYTE(v360) < 0)
            operator delete((void *)v359);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v44 = v352;
        }
        if (byte_254A4A4F8[23] >= 0)
          v64 = byte_254A4A4F8;
        else
          v64 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v65 = byte_254A4A4F8[23];
        else
          v65 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v64, v57);
        if (v65 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v65 >= 0x17)
        {
          v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17)
            v67 = v65 | 7;
          v68 = v67 + 1;
          v66 = (void **)operator new(v67 + 1);
          object[3] = (void *)(v68 | 0x8000000000000000);
          object[1] = v66;
          object[2] = (void *)v65;
          v44 = v352;
        }
        else
        {
          HIBYTE(object[3]) = v65;
          v66 = &object[1];
          if (!v65)
          {
LABEL_147:
            *((_BYTE *)v66 + v65) = 0;
            LOBYTE(object[4]) = 1;
            if (v56 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v7 = v350;
            if (v56 >= 0x17)
            {
              v70 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v56 | 7) != 0x17)
                v70 = v56 | 7;
              v71 = v70 + 1;
              v69 = (void **)operator new(v70 + 1);
              object[7] = (void *)(v71 | 0x8000000000000000);
              object[5] = v69;
              object[6] = (void *)v56;
              v8 = v351;
            }
            else
            {
              HIBYTE(object[7]) = v56;
              v69 = &object[5];
              v8 = v351;
              if (!v56)
                goto LABEL_155;
            }
            memmove(v69, v57, v56);
LABEL_155:
            *((_BYTE *)v69 + v56) = 0;
            LOBYTE(object[8]) = 1;
            v72 = object[0];
            if (SHIBYTE(object[7]) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            if (v54 && *(_QWORD *)(v54 + 24))
            {
              v73 = _os_log_pack_size();
              v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
              v75 = (std::__shared_weak_count *)operator new();
              v76 = v75;
              v75->__shared_owners_ = 0;
              v77 = (unint64_t *)&v75->__shared_owners_;
              v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v75->__shared_weak_owners_ = 0;
              v75[1].__vftable = v74;
              object[0] = v74;
              object[1] = v74;
              object[2] = v75;
              do
                v78 = __ldxr(v77);
              while (__stxr(v78 + 1, v77));
              memset(&object[3], 0, 24);
              do
                v79 = __ldaxr(v77);
              while (__stlxr(v79 - 1, v77));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v76);
              }
              v80 = object[0];
              v81 = _os_log_pack_fill();
              v82 = *(_QWORD *)v6;
              v83 = *(_DWORD *)(v6 + 16);
              *(_DWORD *)v81 = 134218496;
              *(_QWORD *)(v81 + 4) = v82;
              *(_WORD *)(v81 + 12) = 1024;
              *(_DWORD *)(v81 + 14) = __s;
              *(_WORD *)(v81 + 18) = 1024;
              *(_DWORD *)(v81 + 20) = v83;
              v84 = operator new();
              v85 = *(unsigned __int8 *)(v335 + 39);
              v86 = v330;
              if ((v85 & 0x80u) != 0)
              {
                v86 = *(_QWORD *)(v335 + 16);
                v85 = *(_QWORD *)(v335 + 24);
              }
              *(_QWORD *)v84 = v80;
              *(_OWORD *)(v84 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v84 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v84 + 40) = v86;
              *(_QWORD *)(v84 + 48) = v85;
              *(_BYTE *)(v84 + 56) = 1;
              v363 = 0;
              *(_QWORD *)&v359 = v84;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v54 + 24) + 40))(*(_QWORD *)(v54 + 24), &v359);
              v87 = v359;
              *(_QWORD *)&v359 = 0;
              if (v87)
              {
                v88 = *(std::__shared_weak_count **)(v87 + 32);
                if (v88)
                {
                  v89 = (unint64_t *)&v88->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                v91 = *(std::__shared_weak_count **)(v87 + 16);
                if (v91)
                {
                  v92 = (unint64_t *)&v91->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                MEMORY[0x212BC6398](v87, 0x10F0C40B62ED6C6);
                v94 = v363;
                v363 = 0;
                if (v94)
                {
                  v95 = (std::__shared_weak_count *)v94[4];
                  if (v95)
                  {
                    v96 = (unint64_t *)&v95->__shared_owners_;
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 - 1, v96));
                    if (!v97)
                    {
                      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                  }
                  v98 = (std::__shared_weak_count *)v94[2];
                  if (v98)
                  {
                    v99 = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  MEMORY[0x212BC6398](v94, 0x10F0C40B62ED6C6);
                }
              }
              v101 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v102 = (unint64_t *)((char *)object[4] + 8);
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              v104 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v105 = (unint64_t *)((char *)object[2] + 8);
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
            }
            else
            {
              os_log_type_enabled(v72, OS_LOG_TYPE_INFO);
              v107 = *(void **)v6;
              v108 = *(_DWORD *)(v6 + 16);
              LODWORD(object[0]) = 134218496;
              *(void **)((char *)object + 4) = v107;
              WORD2(object[1]) = 1024;
              *(_DWORD *)((char *)&object[1] + 6) = __s;
              WORD1(object[2]) = 1024;
              HIDWORD(object[2]) = v108;
              v109 = (void *)_os_log_send_and_compose_impl();
              if (v109)
                free(v109);
            }
            if (v342)
            {
              sub_20E8C003C((uint64_t)__p, "Pruning map before ML Descriptors from CM:{%llu,%u,%u}", *(_QWORD *)v6, *(_DWORD *)(v6 + 8), *(_DWORD *)(v6 + 16));
              sub_20E863570((uint64_t)__p);
            }
            sub_20E863570((uint64_t)__p);
            v110 = *(std::__shared_weak_count **)&__p[64];
            if (!*(_QWORD *)&__p[64])
              goto LABEL_11;
            v111 = (unint64_t *)(*(_QWORD *)&__p[64] + 8);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
LABEL_294:
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
            goto LABEL_11;
          }
        }
        memmove(v66, v64, v65);
        goto LABEL_147;
      }
      v45 = *(_QWORD *)(v11 + 2816);
      LOBYTE(object[0]) = v33;
      memcpy((char *)object + 1, __src, 0x1FFuLL);
      v38 = 1;
      goto LABEL_109;
    }
    v13 = (uint64_t *)*v8;
    v14 = *(_QWORD *)v6;
    if (!*v8)
      goto LABEL_36;
    v15 = *(_DWORD *)(v6 + 16);
    v16 = *(_DWORD *)(v6 + 8);
    v17 = v8;
    do
    {
      while (1)
      {
        v18 = *((_DWORD *)v13 + 12);
        v19 = v18 >= v15;
        if (v18 != v15)
          goto LABEL_23;
        v20 = (void *)v13[4];
        if ((unint64_t)v20 >= v14)
          break;
LABEL_18:
        v13 = (uint64_t *)v13[1];
        if (!v13)
          goto LABEL_26;
      }
      if (v20 != (void *)v14)
        goto LABEL_25;
      v19 = *((_DWORD *)v13 + 10) >= v16;
LABEL_23:
      if (!v19)
        goto LABEL_18;
LABEL_25:
      v17 = v13;
      v13 = (uint64_t *)*v13;
    }
    while (v13);
LABEL_26:
    if (v17 == v8)
      goto LABEL_36;
    v21 = *((_DWORD *)v17 + 12);
    if (v15 != v21)
    {
      if (v15 >= v21)
        goto LABEL_31;
LABEL_36:
      v23 = 0;
      v24 = 1;
      v25 = *(int8x8_t *)(a1 + 8);
      if (!*(_QWORD *)&v25)
        goto LABEL_57;
      goto LABEL_37;
    }
    v22 = (void *)v17[4];
    if (v14 < (unint64_t)v22 || (void *)v14 == v22 && v16 < *((_DWORD *)v17 + 10))
      goto LABEL_36;
LABEL_31:
    v23 = *((_BYTE *)v17 + 56);
    memcpy(__dst, (char *)v17 + 57, sizeof(__dst));
    v24 = 0;
    v25 = *(int8x8_t *)(a1 + 8);
    if (!*(_QWORD *)&v25)
      goto LABEL_57;
LABEL_37:
    v26 = (uint8x8_t)vcnt_s8(v25);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      v27 = v14;
      if (v14 >= *(_QWORD *)&v25)
        v27 = v14 % *(_QWORD *)&v25;
    }
    else
    {
      v27 = (*(_QWORD *)&v25 - 1) & v14;
    }
    v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
    if (!v28 || (v29 = (_QWORD *)*v28) == 0)
    {
LABEL_56:
      v7 = v350;
      goto LABEL_57;
    }
    if (v26.u32[0] < 2uLL)
    {
      v30 = *(_QWORD *)&v25 - 1;
      while (1)
      {
        v32 = v29[1];
        if (v32 == v14)
        {
          if (v29[2] == v14)
            goto LABEL_75;
        }
        else if ((v32 & v30) != v27)
        {
          goto LABEL_56;
        }
        v29 = (_QWORD *)*v29;
        if (!v29)
          goto LABEL_56;
      }
    }
    while (2)
    {
      v31 = v29[1];
      if (v31 != v14)
      {
        if (v31 >= *(_QWORD *)&v25)
          v31 %= *(_QWORD *)&v25;
        if (v31 != v27)
          goto LABEL_56;
        goto LABEL_46;
      }
      if (v29[2] != v14)
      {
LABEL_46:
        v29 = (_QWORD *)*v29;
        if (!v29)
          goto LABEL_56;
        continue;
      }
      break;
    }
LABEL_75:
    v36 = v29[5];
    if (*(_DWORD *)(a2 + 60) != *(_DWORD *)(v36 + 320)
      || *(_DWORD *)(a2 + 64) != *(_DWORD *)(v36 + 324)
      || *(_DWORD *)(a2 + 68) != *(_DWORD *)(v36 + 328)
      || *(_DWORD *)(a2 + 72) != *(_DWORD *)(v36 + 332)
      || *(_DWORD *)(a2 + 76) != *(_DWORD *)(v36 + 336)
      || *(_DWORD *)(a2 + 80) != *(_DWORD *)(v36 + 340))
    {
      goto LABEL_87;
    }
    v37 = (*(_BYTE *)(a2 + 96) != 0) == (*(_BYTE *)(v36 + 356) != 0);
    if (!*(_BYTE *)(a2 + 96) || !*(_BYTE *)(v36 + 356))
    {
LABEL_86:
      if ((v24 | !v37) == 1)
        goto LABEL_87;
      v357 = v23;
      memcpy(v358, __dst, 0x1FFuLL);
      v58 = 1;
LABEL_125:
      v358[511] = v58;
      v59 = sub_20F25A328((uint64_t)(v29 + 3), v6, (_QWORD *)(v6 + 24), &v357);
      v7 = v350;
      v44 = v352;
      switch(v59)
      {
        case 0:
          v60 = *(_QWORD *)(a1 + 40);
          v8 = v351;
          if (v60)
          {
            *(_QWORD *)&v61 = -1;
            *((_QWORD *)&v61 + 1) = -1;
            *(_OWORD *)object = v61;
            *(_OWORD *)&object[2] = v61;
            LOBYTE(object[4]) = 0;
            LOBYTE(object[7]) = 0;
            LOBYTE(object[8]) = 0;
            BYTE4(object[8]) = 0;
            memset(&object[9], 0, 25);
            object[0] = *(void **)v6;
            v62 = *(_OWORD *)v6;
            LODWORD(object[3]) = *(_DWORD *)(v6 + 16);
            *(_OWORD *)&object[1] = v62;
            LODWORD(object[8]) = 2;
            BYTE4(object[8]) = 1;
            memset(__p, 0, 24);
            sub_20F23216C(v60, (uint64_t)object, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (object[9])
            {
              object[10] = object[9];
              operator delete(object[9]);
            }
          }
          goto LABEL_11;
        case 1:
          sub_20F2FC0E0(&v356);
          v8 = v351;
          if (**(int **)(v356 + 56) > 3)
            goto LABEL_11;
          v169 = *(unsigned __int8 *)(v356 + 72);
          v170 = sub_20E8C31DC(v356, "OSLogSurrogateAppender", 1, 0);
          v171 = v170;
          if (!v169 && !v170)
            goto LABEL_11;
          sub_20E863438((uint64_t)object);
          v172 = sub_20E86A980(&object[2], (uint64_t)"Duplicate ML Descriptors from CM in External Map for frame: ", 60);
          sub_20F271158(v6, (std::string *)__p);
          if (__p[23] >= 0)
            v173 = __p;
          else
            v173 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v174 = __p[23];
          else
            v174 = *(_QWORD *)&__p[8];
          sub_20E86A980(v172, (uint64_t)v173, v174);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v337 = v169;
          if (((uint64_t)object[15] & 0x10) != 0)
          {
            v179 = object[14];
            v180 = &object[8];
            if (object[14] < object[9])
            {
              object[14] = object[9];
              v179 = object[9];
              v180 = &object[8];
            }
          }
          else
          {
            if (((uint64_t)object[15] & 8) == 0)
            {
              v175 = 0;
              HIBYTE(v355) = 0;
              v176 = &v353;
              goto LABEL_392;
            }
            v179 = object[7];
            v180 = &object[5];
          }
          v206 = *v180;
          v175 = v179 - (_BYTE *)*v180;
          if (v175 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v175 >= 0x17)
          {
            v207 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v175 | 7) != 0x17)
              v207 = v175 | 7;
            v208 = v207 + 1;
            v176 = operator new(v207 + 1);
            v354 = v175;
            v355 = v208 | 0x8000000000000000;
            v353 = v176;
            v8 = v351;
          }
          else
          {
            HIBYTE(v355) = (_BYTE)v179 - *(_BYTE *)v180;
            v176 = &v353;
            if (!v175)
              goto LABEL_392;
          }
          memmove(v176, v206, v175);
LABEL_392:
          v345 = v171;
          *((_BYTE *)v176 + v175) = 0;
          __src[0] = &v356;
          __src[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __src[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(__src[3]) = 3;
          __src[4] = "unknown file";
          LODWORD(__src[5]) = 2527;
          __src[6] = "unknown function";
          __src[7] = 0;
          __src[8] = 0;
          v209 = (char *)&v353;
          if (v355 < 0)
            v209 = (char *)v353;
          __sc = v209;
          v210 = *(_QWORD *)__src[0];
          v211 = (const char *)(*(_QWORD *)__src[0] + 16);
          v333 = v211;
          if (*(char *)(*(_QWORD *)__src[0] + 39) < 0)
          {
            v211 = *(const char **)(v210 + 16);
            v212 = *(_QWORD *)(v210 + 24);
          }
          else
          {
            v212 = *(unsigned __int8 *)(*(_QWORD *)__src[0] + 39);
          }
          v213 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v213 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v359);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v359);
            if ((_BYTE)v361 && SHIBYTE(v360) < 0)
              operator delete((void *)v359);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v8 = v351;
          }
          if (byte_254A4A4F8[23] >= 0)
            v214 = byte_254A4A4F8;
          else
            v214 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v215 = byte_254A4A4F8[23];
          else
            v215 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)__p = os_log_create(v214, v211);
          if (v215 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v215 >= 0x17)
          {
            v217 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v215 | 7) != 0x17)
              v217 = v215 | 7;
            v218 = v217 + 1;
            v216 = operator new(v217 + 1);
            *(_QWORD *)&__p[24] = v218 | 0x8000000000000000;
            *(_QWORD *)&__p[8] = v216;
            *(_QWORD *)&__p[16] = v215;
            v8 = v351;
          }
          else
          {
            __p[31] = v215;
            v216 = &__p[8];
            if (!v215)
              goto LABEL_412;
          }
          memmove(v216, v214, v215);
LABEL_412:
          v216[v215] = 0;
          __p[32] = 1;
          if (v212 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v7 = v350;
          if (v212 >= 0x17)
          {
            v220 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v212 | 7) != 0x17)
              v220 = v212 | 7;
            v221 = v220 + 1;
            v219 = operator new(v220 + 1);
            *(_QWORD *)&__p[56] = v221 | 0x8000000000000000;
            *(_QWORD *)&__p[40] = v219;
            *(_QWORD *)&__p[48] = v212;
          }
          else
          {
            __p[63] = v212;
            v219 = &__p[40];
            if (!v212)
              goto LABEL_420;
          }
          memmove(v219, v211, v212);
LABEL_420:
          v219[v212] = 0;
          __p[64] = 1;
          v222 = *(NSObject **)__p;
          if ((__p[63] & 0x80000000) != 0)
            operator delete(*(void **)&__p[40]);
          if (__p[32] && (__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v345 && *(_QWORD *)(v345 + 24))
          {
            v223 = _os_log_pack_size();
            v224 = (std::__shared_weak_count_vtbl *)operator new(v223, (std::align_val_t)8uLL);
            v225 = (std::__shared_weak_count *)operator new();
            v225->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v225->__shared_owners_ = 0;
            v225->__shared_weak_owners_ = 0;
            v225[1].__vftable = v224;
            *(_QWORD *)&v359 = v224;
            *((_QWORD *)&v359 + 1) = v224;
            v360 = v225;
            v361 = 0;
            v362 = 0;
            v226 = strlen(__sc);
            if (v226 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v227 = v226;
            if (v226 >= 0x17)
            {
              v247 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v226 | 7) != 0x17)
                v247 = v226 | 7;
              v248 = v247 + 1;
              v228 = operator new(v247 + 1);
              *((_QWORD *)&v364 + 1) = v248 | 0x8000000000000000;
              v363 = v228;
              *(_QWORD *)&v364 = v227;
            }
            else
            {
              HIBYTE(v364) = v226;
              v228 = &v363;
              if (!v226)
              {
LABEL_458:
                *((_BYTE *)v228 + v227) = 0;
                v249 = v363;
                v368[0] = v364;
                *(_QWORD *)((char *)v368 + 7) = *(_QWORD *)((char *)&v364 + 7);
                v250 = HIBYTE(v364);
                v251 = operator new(0x38uLL);
                v251[1] = 0;
                v251[2] = 0;
                v251[3] = off_24C9ABC20;
                *v251 = &off_24C9ABBD0;
                v252 = v368[0];
                v251[4] = v249;
                v251[5] = v252;
                *(_QWORD *)((char *)v251 + 47) = *(_QWORD *)((char *)v368 + 7);
                *((_BYTE *)v251 + 55) = v250;
                v368[0] = 0;
                *(_QWORD *)((char *)v368 + 7) = 0;
                v253 = v362;
                v361 = (char *)(v251 + 3);
                v362 = (std::__shared_weak_count *)v251;
                v230 = v337;
                if (v253)
                {
                  v254 = (unint64_t *)&v253->__shared_owners_;
                  do
                    v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                    std::__shared_weak_count::__release_weak(v253);
                  }
                }
                *(_OWORD *)__p = v359;
                v256 = v361;
                *(_QWORD *)&__p[16] = v360;
                if (v360)
                {
                  v257 = (unint64_t *)&v360->__shared_owners_;
                  do
                    v258 = __ldxr(v257);
                  while (__stxr(v258 + 1, v257));
                }
                v259 = v362;
                *(_QWORD *)&__p[24] = v256;
                *(_QWORD *)&__p[32] = v362;
                if (v362)
                {
                  v260 = (unint64_t *)&v362->__shared_owners_;
                  do
                    v261 = __ldxr(v260);
                  while (__stxr(v261 + 1, v260));
                  *(_QWORD *)&__p[40] = v256;
                  do
                    v262 = __ldaxr(v260);
                  while (__stlxr(v262 - 1, v260));
                  if (!v262)
                  {
                    ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                    std::__shared_weak_count::__release_weak(v259);
                  }
                }
                else
                {
                  *(_QWORD *)&__p[40] = v256;
                }
                v297 = v360;
                if (v360)
                {
                  v298 = (unint64_t *)&v360->__shared_owners_;
                  do
                    v299 = __ldaxr(v298);
                  while (__stlxr(v299 - 1, v298));
                  if (!v299)
                  {
                    ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                    std::__shared_weak_count::__release_weak(v297);
                  }
                }
                v300 = *(_QWORD *)__p;
                if (*(char *)(*(_QWORD *)&__p[40] + 31) >= 0)
                  v301 = *(_QWORD *)&__p[40] + 8;
                else
                  v301 = *(_QWORD *)(*(_QWORD *)&__p[40] + 8);
                v302 = _os_log_pack_fill();
                *(_DWORD *)v302 = 136315138;
                *(_QWORD *)(v302 + 4) = v301;
                v303 = operator new();
                v304 = *(unsigned __int8 *)(v210 + 39);
                v305 = v333;
                if ((v304 & 0x80u) != 0)
                {
                  v305 = *(const char **)(v210 + 16);
                  v304 = *(_QWORD *)(v210 + 24);
                }
                *(_QWORD *)v303 = v300;
                *(_OWORD *)(v303 + 8) = *(_OWORD *)&__p[8];
                *(_QWORD *)&__p[8] = 0;
                *(_QWORD *)&__p[16] = 0;
                *(_OWORD *)(v303 + 24) = *(_OWORD *)&__p[24];
                *(_QWORD *)&__p[24] = 0;
                *(_QWORD *)&__p[32] = 0;
                *(_QWORD *)(v303 + 40) = v305;
                *(_QWORD *)(v303 + 48) = v304;
                *(_BYTE *)(v303 + 56) = 1;
                v363 = 0;
                *(_QWORD *)&v359 = v303;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v345 + 24) + 40))(*(_QWORD *)(v345 + 24), &v359);
                v306 = v359;
                *(_QWORD *)&v359 = 0;
                v44 = v352;
                if (v306)
                {
                  v307 = *(std::__shared_weak_count **)(v306 + 32);
                  if (v307)
                  {
                    v308 = (unint64_t *)&v307->__shared_owners_;
                    do
                      v309 = __ldaxr(v308);
                    while (__stlxr(v309 - 1, v308));
                    if (!v309)
                    {
                      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                      std::__shared_weak_count::__release_weak(v307);
                    }
                  }
                  v310 = *(std::__shared_weak_count **)(v306 + 16);
                  if (v310)
                  {
                    v311 = (unint64_t *)&v310->__shared_owners_;
                    do
                      v312 = __ldaxr(v311);
                    while (__stlxr(v312 - 1, v311));
                    if (!v312)
                    {
                      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                      std::__shared_weak_count::__release_weak(v310);
                    }
                  }
                  MEMORY[0x212BC6398](v306, 0x10F0C40B62ED6C6);
                  v313 = v363;
                  v363 = 0;
                  if (v313)
                  {
                    v314 = (std::__shared_weak_count *)v313[4];
                    if (v314)
                    {
                      v315 = (unint64_t *)&v314->__shared_owners_;
                      do
                        v316 = __ldaxr(v315);
                      while (__stlxr(v316 - 1, v315));
                      if (!v316)
                      {
                        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                        std::__shared_weak_count::__release_weak(v314);
                      }
                    }
                    v317 = (std::__shared_weak_count *)v313[2];
                    if (v317)
                    {
                      v318 = (unint64_t *)&v317->__shared_owners_;
                      do
                        v319 = __ldaxr(v318);
                      while (__stlxr(v319 - 1, v318));
                      if (!v319)
                      {
                        ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                        std::__shared_weak_count::__release_weak(v317);
                      }
                    }
                    MEMORY[0x212BC6398](v313, 0x10F0C40B62ED6C6);
                  }
                }
                v320 = *(std::__shared_weak_count **)&__p[32];
                if (*(_QWORD *)&__p[32])
                {
                  v321 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                  do
                    v322 = __ldaxr(v321);
                  while (__stlxr(v322 - 1, v321));
                  if (!v322)
                  {
                    ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                    std::__shared_weak_count::__release_weak(v320);
                  }
                }
                v323 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v324 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v325 = __ldaxr(v324);
                  while (__stlxr(v325 - 1, v324));
                  if (!v325)
                  {
                    ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                    std::__shared_weak_count::__release_weak(v323);
                  }
                }
                goto LABEL_574;
              }
            }
            memcpy(v228, __sc, v227);
            goto LABEL_458;
          }
          os_log_type_enabled(v222, OS_LOG_TYPE_INFO);
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = __sc;
          v229 = (void *)_os_log_send_and_compose_impl();
          v44 = v352;
          v230 = v337;
          if (v229)
            free(v229);
LABEL_574:
          if (v230)
          {
            v326 = (const char *)&v353;
            if (v355 < 0)
              v326 = (const char *)v353;
            sub_20E8C003C((uint64_t)__src, "%s", v326);
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863570((uint64_t)__src);
          v327 = (std::__shared_weak_count *)__src[8];
          if (__src[8])
          {
            v328 = (unint64_t *)(__src[8] + 8);
            do
              v329 = __ldaxr(v328);
            while (__stlxr(v329 - 1, v328));
            if (!v329)
            {
              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
              std::__shared_weak_count::__release_weak(v327);
            }
          }
          if (SHIBYTE(v355) < 0)
            operator delete(v353);
          object[0] = v341;
          *(void **)((char *)object + *((_QWORD *)v341 - 3)) = v340;
          object[2] = v339;
          v296 = (void *)v338;
          goto LABEL_586;
        case 2:
          v11 = *(_QWORD *)(a1 + 80);
          if (!*(_BYTE *)(v11 + 2499))
            goto LABEL_57;
          v10 = 0;
          v8 = v351;
          goto LABEL_12;
        case 3:
          sub_20F2FC0E0(&v356);
          v8 = v351;
          if (**(int **)(v356 + 56) > 3)
            goto LABEL_11;
          v161 = *(unsigned __int8 *)(v356 + 72);
          v162 = sub_20E8C31DC(v356, "OSLogSurrogateAppender", 1, 0);
          v163 = v162;
          if (!v161 && !v162)
            goto LABEL_11;
          sub_20E863438((uint64_t)object);
          v164 = sub_20E86A980(&object[2], (uint64_t)"Pruning map before ML Descriptors from CM: ", 43);
          sub_20F271158(v6, (std::string *)__p);
          if (__p[23] >= 0)
            v165 = __p;
          else
            v165 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v166 = __p[23];
          else
            v166 = *(_QWORD *)&__p[8];
          sub_20E86A980(v164, (uint64_t)v165, v166);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v336 = v161;
          if (((uint64_t)object[15] & 0x10) != 0)
          {
            v177 = object[14];
            v178 = &object[8];
            if (object[14] < object[9])
            {
              object[14] = object[9];
              v177 = object[9];
              v178 = &object[8];
            }
          }
          else
          {
            if (((uint64_t)object[15] & 8) == 0)
            {
              v167 = 0;
              HIBYTE(v355) = 0;
              v168 = &v353;
              goto LABEL_340;
            }
            v177 = object[7];
            v178 = &object[5];
          }
          v181 = *v178;
          v167 = v177 - (_BYTE *)*v178;
          if (v167 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v167 >= 0x17)
          {
            v182 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v167 | 7) != 0x17)
              v182 = v167 | 7;
            v183 = v182 + 1;
            v168 = operator new(v182 + 1);
            v354 = v167;
            v355 = v183 | 0x8000000000000000;
            v353 = v168;
            v8 = v351;
          }
          else
          {
            HIBYTE(v355) = (_BYTE)v177 - *(_BYTE *)v178;
            v168 = &v353;
            if (!v167)
              goto LABEL_340;
          }
          memmove(v168, v181, v167);
LABEL_340:
          v344 = v163;
          *((_BYTE *)v168 + v167) = 0;
          __src[0] = &v356;
          __src[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __src[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(__src[3]) = 3;
          __src[4] = "unknown file";
          LODWORD(__src[5]) = 2546;
          __src[6] = "unknown function";
          __src[7] = 0;
          __src[8] = 0;
          v184 = (char *)&v353;
          if (v355 < 0)
            v184 = (char *)v353;
          __sb = v184;
          v185 = *(_QWORD *)__src[0];
          v186 = (const char *)(*(_QWORD *)__src[0] + 16);
          v332 = v186;
          if (*(char *)(*(_QWORD *)__src[0] + 39) < 0)
          {
            v186 = *(const char **)(v185 + 16);
            v187 = *(_QWORD *)(v185 + 24);
          }
          else
          {
            v187 = *(unsigned __int8 *)(*(_QWORD *)__src[0] + 39);
          }
          v188 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v359);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v359);
            if ((_BYTE)v361 && SHIBYTE(v360) < 0)
              operator delete((void *)v359);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v8 = v351;
          }
          if (byte_254A4A4F8[23] >= 0)
            v189 = byte_254A4A4F8;
          else
            v189 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v190 = byte_254A4A4F8[23];
          else
            v190 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)__p = os_log_create(v189, v186);
          if (v190 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v190 >= 0x17)
          {
            v192 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v190 | 7) != 0x17)
              v192 = v190 | 7;
            v193 = v192 + 1;
            v191 = operator new(v192 + 1);
            *(_QWORD *)&__p[24] = v193 | 0x8000000000000000;
            *(_QWORD *)&__p[8] = v191;
            *(_QWORD *)&__p[16] = v190;
            v8 = v351;
          }
          else
          {
            __p[31] = v190;
            v191 = &__p[8];
            if (!v190)
              goto LABEL_360;
          }
          memmove(v191, v189, v190);
LABEL_360:
          v191[v190] = 0;
          __p[32] = 1;
          if (v187 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v7 = v350;
          if (v187 >= 0x17)
          {
            v195 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v187 | 7) != 0x17)
              v195 = v187 | 7;
            v196 = v195 + 1;
            v194 = operator new(v195 + 1);
            *(_QWORD *)&__p[56] = v196 | 0x8000000000000000;
            *(_QWORD *)&__p[40] = v194;
            *(_QWORD *)&__p[48] = v187;
          }
          else
          {
            __p[63] = v187;
            v194 = &__p[40];
            if (!v187)
              goto LABEL_368;
          }
          memmove(v194, v186, v187);
LABEL_368:
          v194[v187] = 0;
          __p[64] = 1;
          v197 = *(NSObject **)__p;
          if ((__p[63] & 0x80000000) != 0)
            operator delete(*(void **)&__p[40]);
          if (__p[32] && (__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v344 && *(_QWORD *)(v344 + 24))
          {
            v198 = _os_log_pack_size();
            v199 = (std::__shared_weak_count_vtbl *)operator new(v198, (std::align_val_t)8uLL);
            v200 = (std::__shared_weak_count *)operator new();
            v200->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v200->__shared_owners_ = 0;
            v200->__shared_weak_owners_ = 0;
            v200[1].__vftable = v199;
            *(_QWORD *)&v359 = v199;
            *((_QWORD *)&v359 + 1) = v199;
            v360 = v200;
            v361 = 0;
            v362 = 0;
            v201 = strlen(__sb);
            if (v201 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v202 = v201;
            if (v201 >= 0x17)
            {
              v231 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v201 | 7) != 0x17)
                v231 = v201 | 7;
              v232 = v231 + 1;
              v203 = operator new(v231 + 1);
              *((_QWORD *)&v364 + 1) = v232 | 0x8000000000000000;
              v363 = v203;
              *(_QWORD *)&v364 = v202;
            }
            else
            {
              HIBYTE(v364) = v201;
              v203 = &v363;
              if (!v201)
              {
LABEL_439:
                *((_BYTE *)v203 + v202) = 0;
                v233 = v363;
                v368[0] = v364;
                *(_QWORD *)((char *)v368 + 7) = *(_QWORD *)((char *)&v364 + 7);
                v234 = HIBYTE(v364);
                v235 = operator new(0x38uLL);
                v235[1] = 0;
                v235[2] = 0;
                v235[3] = off_24C9ABC20;
                *v235 = &off_24C9ABBD0;
                v236 = v368[0];
                v235[4] = v233;
                v235[5] = v236;
                *(_QWORD *)((char *)v235 + 47) = *(_QWORD *)((char *)v368 + 7);
                *((_BYTE *)v235 + 55) = v234;
                v368[0] = 0;
                *(_QWORD *)((char *)v368 + 7) = 0;
                v237 = v362;
                v361 = (char *)(v235 + 3);
                v362 = (std::__shared_weak_count *)v235;
                v205 = v336;
                if (v237)
                {
                  v238 = (unint64_t *)&v237->__shared_owners_;
                  do
                    v239 = __ldaxr(v238);
                  while (__stlxr(v239 - 1, v238));
                  if (!v239)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    std::__shared_weak_count::__release_weak(v237);
                  }
                }
                *(_OWORD *)__p = v359;
                v240 = v361;
                *(_QWORD *)&__p[16] = v360;
                if (v360)
                {
                  v241 = (unint64_t *)&v360->__shared_owners_;
                  do
                    v242 = __ldxr(v241);
                  while (__stxr(v242 + 1, v241));
                }
                v243 = v362;
                *(_QWORD *)&__p[24] = v240;
                *(_QWORD *)&__p[32] = v362;
                if (v362)
                {
                  v244 = (unint64_t *)&v362->__shared_owners_;
                  do
                    v245 = __ldxr(v244);
                  while (__stxr(v245 + 1, v244));
                  *(_QWORD *)&__p[40] = v240;
                  do
                    v246 = __ldaxr(v244);
                  while (__stlxr(v246 - 1, v244));
                  if (!v246)
                  {
                    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                    std::__shared_weak_count::__release_weak(v243);
                  }
                }
                else
                {
                  *(_QWORD *)&__p[40] = v240;
                }
                v263 = v360;
                if (v360)
                {
                  v264 = (unint64_t *)&v360->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                v266 = *(_QWORD *)__p;
                if (*(char *)(*(_QWORD *)&__p[40] + 31) >= 0)
                  v267 = *(_QWORD *)&__p[40] + 8;
                else
                  v267 = *(_QWORD *)(*(_QWORD *)&__p[40] + 8);
                v268 = _os_log_pack_fill();
                *(_DWORD *)v268 = 136315138;
                *(_QWORD *)(v268 + 4) = v267;
                v269 = operator new();
                v270 = *(unsigned __int8 *)(v185 + 39);
                v271 = v332;
                if ((v270 & 0x80u) != 0)
                {
                  v271 = *(const char **)(v185 + 16);
                  v270 = *(_QWORD *)(v185 + 24);
                }
                *(_QWORD *)v269 = v266;
                *(_OWORD *)(v269 + 8) = *(_OWORD *)&__p[8];
                *(_QWORD *)&__p[8] = 0;
                *(_QWORD *)&__p[16] = 0;
                *(_OWORD *)(v269 + 24) = *(_OWORD *)&__p[24];
                *(_QWORD *)&__p[24] = 0;
                *(_QWORD *)&__p[32] = 0;
                *(_QWORD *)(v269 + 40) = v271;
                *(_QWORD *)(v269 + 48) = v270;
                *(_BYTE *)(v269 + 56) = 1;
                v363 = 0;
                *(_QWORD *)&v359 = v269;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v344 + 24) + 40))(*(_QWORD *)(v344 + 24), &v359);
                v272 = v359;
                *(_QWORD *)&v359 = 0;
                v44 = v352;
                if (v272)
                {
                  v273 = *(std::__shared_weak_count **)(v272 + 32);
                  if (v273)
                  {
                    v274 = (unint64_t *)&v273->__shared_owners_;
                    do
                      v275 = __ldaxr(v274);
                    while (__stlxr(v275 - 1, v274));
                    if (!v275)
                    {
                      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                      std::__shared_weak_count::__release_weak(v273);
                    }
                  }
                  v276 = *(std::__shared_weak_count **)(v272 + 16);
                  if (v276)
                  {
                    v277 = (unint64_t *)&v276->__shared_owners_;
                    do
                      v278 = __ldaxr(v277);
                    while (__stlxr(v278 - 1, v277));
                    if (!v278)
                    {
                      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                      std::__shared_weak_count::__release_weak(v276);
                    }
                  }
                  MEMORY[0x212BC6398](v272, 0x10F0C40B62ED6C6);
                  v279 = v363;
                  v363 = 0;
                  if (v279)
                  {
                    v280 = (std::__shared_weak_count *)v279[4];
                    if (v280)
                    {
                      v281 = (unint64_t *)&v280->__shared_owners_;
                      do
                        v282 = __ldaxr(v281);
                      while (__stlxr(v282 - 1, v281));
                      if (!v282)
                      {
                        ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                        std::__shared_weak_count::__release_weak(v280);
                      }
                    }
                    v283 = (std::__shared_weak_count *)v279[2];
                    if (v283)
                    {
                      v284 = (unint64_t *)&v283->__shared_owners_;
                      do
                        v285 = __ldaxr(v284);
                      while (__stlxr(v285 - 1, v284));
                      if (!v285)
                      {
                        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                        std::__shared_weak_count::__release_weak(v283);
                      }
                    }
                    MEMORY[0x212BC6398](v279, 0x10F0C40B62ED6C6);
                  }
                }
                v286 = *(std::__shared_weak_count **)&__p[32];
                if (*(_QWORD *)&__p[32])
                {
                  v287 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                  do
                    v288 = __ldaxr(v287);
                  while (__stlxr(v288 - 1, v287));
                  if (!v288)
                  {
                    ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                    std::__shared_weak_count::__release_weak(v286);
                  }
                }
                v289 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v290 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v291 = __ldaxr(v290);
                  while (__stlxr(v291 - 1, v290));
                  if (!v291)
                  {
                    ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                    std::__shared_weak_count::__release_weak(v289);
                  }
                }
                goto LABEL_518;
              }
            }
            memcpy(v203, __sb, v202);
            goto LABEL_439;
          }
          os_log_type_enabled(v197, OS_LOG_TYPE_INFO);
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = __sb;
          v204 = (void *)_os_log_send_and_compose_impl();
          v44 = v352;
          v205 = v336;
          if (v204)
            free(v204);
LABEL_518:
          if (v205)
          {
            v292 = (const char *)&v353;
            if (v355 < 0)
              v292 = (const char *)v353;
            sub_20E8C003C((uint64_t)__src, "%s", v292);
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863570((uint64_t)__src);
          v293 = (std::__shared_weak_count *)__src[8];
          if (__src[8])
          {
            v294 = (unint64_t *)(__src[8] + 8);
            do
              v295 = __ldaxr(v294);
            while (__stlxr(v295 - 1, v294));
            if (!v295)
            {
              ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
              std::__shared_weak_count::__release_weak(v293);
            }
          }
          if (SHIBYTE(v355) < 0)
            operator delete(v353);
          object[0] = v341;
          *(void **)((char *)object + *((_QWORD *)v341 - 3)) = v340;
          v296 = (void *)(MEMORY[0x24BEDB848] + 16);
          object[2] = v339;
LABEL_586:
          object[3] = v296;
          if (SHIBYTE(object[13]) < 0)
            operator delete(object[11]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x212BC6290](&object[16]);
          break;
        default:
          v10 = 1;
          v8 = v351;
          goto LABEL_12;
      }
      goto LABEL_11;
    }
    if (*(_DWORD *)(a2 + 84) == *(_DWORD *)(v36 + 344) && *(_DWORD *)(a2 + 88) == *(_DWORD *)(v36 + 348))
    {
      v37 = *(_DWORD *)(a2 + 92) == *(_DWORD *)(v36 + 352);
      goto LABEL_86;
    }
LABEL_87:
    if (!v12 || *(_DWORD *)(v11 + 2584) != 4)
    {
      v58 = 0;
      v357 = 0;
      goto LABEL_125;
    }
    v7 = v350;
    v8 = v351;
LABEL_74:
    v2 = v352;
LABEL_13:
    v6 += 48;
    if (v6 != v7)
      continue;
    return v2 & 1;
  }
}

void sub_20F30BB90(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x378]))
  {
    if (SLOBYTE(STACK[0x377]) < 0)
      operator delete((void *)STACK[0x360]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_20F30BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (LOBYTE(STACK[0x378]) && SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x5A0]);
  if (a53 < 0)
    operator delete(a48);
  sub_20E863784((uint64_t)&STACK[0xBC0]);
  _Unwind_Resume(a1);
}

void sub_20F30BE60(_Unwind_Exception *a1)
{
  void *v2;

  if (SLOBYTE(STACK[0x9C7]) < 0)
    operator delete((void *)STACK[0x9B0]);
  v2 = (void *)STACK[0xC08];
  if (STACK[0xC08])
  {
    STACK[0xC10] = (unint64_t)v2;
    operator delete(v2);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F30C02CLL);
}

void sub_20F30BE8C(_Unwind_Exception *a1)
{
  sub_20E86E8C4((uint64_t *)&STACK[0x360]);
  sub_20E86E8C4((uint64_t *)&STACK[0x388]);
  sub_20E86E658((uint64_t)&STACK[0xBC0]);
  sub_20E863714((uint64_t)&STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_20F30BF20(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_20F30BF34(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0xBDF]) < 0)
    operator delete((void *)STACK[0xBC8]);
  if (STACK[0xBC0])
    os_release((void *)STACK[0xBC0]);
  sub_20E863714((uint64_t)&STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_20F30BFA8()
{
  JUMPOUT(0x20F30BFD4);
}

void sub_20F30BFB0()
{
  JUMPOUT(0x20F30BFC0);
}

void sub_20F30BFE8(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F30C02CLL);
}

void sub_20F30BFF8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_20F30C028(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F30C034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *__p;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v25 = 0u;
  v26 = 0u;
  v27 = 733222836;
  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD **)(v4 + 2824);
  v7 = *(_QWORD **)(v4 + 2832);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = v6[2];
      if (v8)
      {
        if (*(_QWORD *)(v8 + 160) == v5)
          break;
      }
      v6 += 559;
      if (v6 == v7)
        return kdebug_trace();
    }
  }
  if (v6 != v7 && v6)
  {
    v9 = (char *)v6[4];
    v10 = (char *)v6[5];
    if (v10 != v9)
    {
      v11 = (v10 - v9) >> 4;
      do
      {
        v12 = v11 >> 1;
        v13 = (unint64_t *)&v9[16 * (v11 >> 1)];
        if (*v13 < v5 || *v13 == v5 && *(_DWORD *)&v9[16 * v12 + 8] < *(_DWORD *)(a2 + 8))
        {
          v9 = (char *)(v13 + 2);
          v12 = v11 + ~v12;
        }
        v11 = v12;
      }
      while (v12);
    }
    if (v9 == v10 || *(_QWORD *)v9 != v5 || *((_DWORD *)v9 + 2) != *(_DWORD *)(a2 + 8))
    {
      sub_20F335E08(v4, a2, (uint64_t)&v23);
      v14 = v23;
      if (v23 == v24)
        goto LABEL_29;
      v15 = *(_QWORD *)(a1 + 80);
      v16 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      __p = 0;
      v21 = 0;
      v22 = 0;
      sub_20F24ED70(*(_QWORD **)(v15 + 2816), v16, v17, (uint64_t)&__p);
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__p);
        v14 = v23;
        v18 = v24;
        if (v23 == v24)
        {
LABEL_29:
          if (v14)
          {
            v24 = v14;
            operator delete(v14);
          }
          return kdebug_trace();
        }
      }
      else
      {
        v14 = v23;
        v18 = v24;
        if (v23 == v24)
          goto LABEL_29;
      }
      do
      {
        __p = 0;
        v21 = 0;
        v22 = 0;
        sub_20F302D9C(a1, (uint64_t *)v14, (uint64_t)&__p);
        if (SHIBYTE(v22) < 0)
          operator delete(__p);
        v14 += 472;
      }
      while (v14 != v18);
      v14 = v23;
      goto LABEL_29;
    }
  }
  return kdebug_trace();
}

void sub_20F30C228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v19;

  if (a14 < 0)
  {
    operator delete(__p);
    v19 = a15;
    if (!a15)
    {
LABEL_3:
      sub_20E8E69C4((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v19 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v19);
  sub_20E8E69C4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20F30C294(_QWORD *a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t v34;
  uint64_t v35;
  _QWORD **v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  double v42;
  float64x2_t v43;
  uint64_t v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  uint64_t v48;
  unint64_t *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  int8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t *v67;
  float32x4_t v68;
  int v69;
  char v70;
  uint64_t v71;
  char *v73;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  int64x2_t v98;
  float64x2_t v99;
  int64x2_t v100;
  double v101;
  double v103;
  double v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  double v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  double v119;
  float64x2_t v120;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  char *v148;
  __int128 v149;
  _BYTE *v150;
  _BYTE *v151;
  int64_t v152;
  double v153;
  double v154;
  char *v155;
  char *v156;
  int64_t v157;
  void *v158;
  __int128 v159;
  _BYTE *v160;
  _BYTE *v161;
  int64_t v162;
  char *v163;
  char *v164;
  char *v165;
  int8x8_t v166;
  int64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  unint64_t v176;
  uint8x8_t v177;
  unint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE *v185;
  int64_t v186;
  char *v187;
  unint64_t v188;
  char *v189;
  char *v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  unint64_t v195;
  _BOOL4 v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  unint64_t v228;
  double v232;
  float64x2_t v233;
  uint64_t v237;
  float64x2_t v238;
  int v239;
  void *v240;
  char *v241;
  void *v242;
  char *v243;
  void (***v244)(char *);
  void (**v245)(char *);
  char *v246;
  void *v247;
  void *v248;
  char v249;
  char *v250;
  char *i;
  void *v252;
  double v253;
  float64_t v254;
  float64x2_t v255;
  float64x2_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float64x2_t v260;
  int64x2_t v261;
  float64x2_t v262;
  int64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  double v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  double v274;
  float64x2_t v275;
  double v276;
  unint64_t v277;
  float64x2_t v278;
  double v279;
  int64x2_t v280;
  float64x2_t v281;
  float64_t v282;
  float64x2_t v283;
  float64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  float64x2_t v287;
  int64x2_t v288;
  float64x2_t v289;
  __int128 v290;
  float64x2_t v291;
  __int128 v292;
  float64x2_t v293;
  double v294;
  float64x2_t v295;
  __int128 v296;
  float64x2_t v297;
  __int128 v298;
  float64x2_t v299;
  __int128 v300;
  float64x2_t v301;
  __int128 v302;
  float64x2_t v303;
  __int128 v304;
  float64x2_t v305;
  __int128 v306;
  float64x2_t v307;
  double v308;
  float64x2_t v309;
  __int128 v310;
  float64x2_t v311;
  __int128 v312;
  uint64_t v313;
  float64x2_t v314;
  float64x2_t v315;
  uint64_t v316;
  int64x2_t v317;
  float64x2_t v318;
  uint64_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  double v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  double v331;
  float64x2_t v332;
  double v333;
  float64x2_t v334;
  double v335;
  float64x2_t v336;
  float64x2_t v337;
  double v338;
  float64x2_t v339;
  int64x2_t v340;
  float64x2_t v341;
  int64x2_t v342;
  char *v343;
  float64x2_t v345;
  uint64_t v346;
  float64x2_t v347;
  uint64_t v348;
  float64x2_t v349;
  uint64_t v350;
  void *v351[4];
  __int128 v352;
  uint64_t v353;
  __int128 v354;
  uint64_t v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 __p;
  uint64_t v364;
  _BYTE v365[32];
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  void *v374;
  void *v375;
  char *v376;
  void *v377;
  char *v378;
  unint64_t v379;
  void *v380;
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  char *v384;
  char *v385;
  __int128 v386;
  uint64_t v387;
  float64x2_t v388;
  double v389;

  v10 = a1[10];
  if (*(_BYTE *)(v10 + 2499))
  {
    v11 = *(_QWORD **)(v10 + 2824);
    v12 = *(_QWORD **)(v10 + 2832);
    if (v11 != v12)
    {
      while (1)
      {
        v13 = v11[2];
        if (v13)
        {
          if (*(_QWORD *)(v13 + 160) == *a2)
            break;
        }
        v11 += 559;
        if (v11 == v12)
          return 0;
      }
    }
    if (v11 == v12 || !v11)
      return 0;
  }
  else
  {
    v11 = *(_QWORD **)(v10 + 2816);
    if (!v11)
      return 0;
  }
  v14 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v14)
    return 0;
  v15 = *a3;
  v16 = (uint8x8_t)vcnt_s8(v14);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = *a3;
    if (v15 >= *(_QWORD *)&v14)
      v17 = v15 % *(_QWORD *)&v14;
  }
  else
  {
    v17 = (*(_QWORD *)&v14 - 1) & v15;
  }
  v18 = *(_QWORD **)(*a1 + 8 * v17);
  if (!v18)
    return 0;
  v19 = (_QWORD *)*v18;
  if (!*v18)
    return 0;
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v23 = v19[1];
      if (v15 == v23)
      {
        if (v19[2] == v15)
          goto LABEL_33;
      }
      else if ((v23 & v20) != v17)
      {
        return 0;
      }
      v21 = 0;
      v19 = (_QWORD *)*v19;
      if (!v19)
        return v21;
    }
  }
  while (1)
  {
    v22 = v19[1];
    if (v15 == v22)
      break;
    if (v22 >= *(_QWORD *)&v14)
      v22 %= *(_QWORD *)&v14;
    if (v22 != v17)
      return 0;
LABEL_21:
    v21 = 0;
    v19 = (_QWORD *)*v19;
    if (!v19)
      return v21;
  }
  if (v19[2] != v15)
    goto LABEL_21;
LABEL_33:
  v25 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(v11[2] + 424) + 1784), a2);
  v26 = a1;
  if (!v25)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 2692, (uint64_t)"vio_pose_ref", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v259 = a6;
  v27 = v25[5];
  _D13 = *(_QWORD *)(v27 + 40);
  v327 = *(float64x2_t *)(v27 + 24);
  v329 = *(float64x2_t *)v27;
  v29 = *(double *)(v27 + 64);
  v30 = *(float64x2_t *)(v27 + 48);
  v31 = v25[9];
  v335 = *(double *)(v31 + 16);
  v337 = v30;
  v333 = *(double *)(v31 + 40);
  v318 = *(float64x2_t *)v31;
  v321 = *(float64x2_t *)(v31 + 24);
  v331 = *(double *)(v31 + 64);
  v32 = *(float64x2_t *)(v31 + 48);
  v33 = v25[11];
  v323 = *(double *)(v33 + 16);
  v325 = v32;
  v315 = *(float64x2_t *)v33;
  v34.f64[1] = *(float64_t *)(v33 + 8);
  v35 = v25[7];
  v34.f64[0] = *(float64_t *)(v35 + 16);
  v341 = v34;
  v339 = *(float64x2_t *)v35;
  v36 = *(_QWORD ***)(v19[5] + 424);
  v37 = (__int128 *)*v36[5];
  v38 = *((_QWORD *)v37 + 2);
  v386 = *v37;
  v387 = v38;
  v39 = sub_20E9DF85C(*v36 + 223, (uint64_t *)&v386);
  if (!v39)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 2698, (uint64_t)"vio_ref_pose_ref", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v40 = v39[5];
  _D10 = *(_QWORD *)(v40 + 40);
  v270 = *(float64x2_t *)(v40 + 24);
  v272 = *(float64x2_t *)v40;
  v42 = *(double *)(v40 + 64);
  v43 = *(float64x2_t *)(v40 + 48);
  v44 = v39[9];
  v279 = *(double *)(v44 + 16);
  v276 = *(double *)(v44 + 40);
  v262 = *(float64x2_t *)v44;
  v264 = *(float64x2_t *)(v44 + 24);
  v274 = *(double *)(v44 + 64);
  v45 = *(float64x2_t *)(v44 + 48);
  v46 = v39[11];
  v266 = *(double *)(v46 + 16);
  v268 = v45;
  v260 = *(float64x2_t *)v46;
  v47.f64[1] = *(float64_t *)(v46 + 8);
  v48 = v39[7];
  v47.f64[0] = *(float64_t *)(v48 + 16);
  v284 = v47;
  v287 = v43;
  v281 = *(float64x2_t *)v48;
  v294 = *(double *)a5;
  v298 = *(_OWORD *)(a5 + 40);
  v300 = *(_OWORD *)(a5 + 8);
  v304 = *(_OWORD *)(a5 + 48);
  v306 = *(_OWORD *)(a5 + 16);
  v310 = *(_OWORD *)(a5 + 56);
  v312 = *(_OWORD *)(a5 + 24);
  v290 = *(_OWORD *)(a5 + 64);
  v292 = *(_OWORD *)(a5 + 32);
  v296 = *(_OWORD *)(a5 + 72);
  v302 = *(_OWORD *)(a5 + 80);
  v308 = *(double *)(a5 + 88);
  sub_20F30D884((uint64_t *)&v384, (uint64_t)a1, *(void **)(v19[5] + 160));
  v49 = (unint64_t *)v384;
  v50 = v385;
  memset(v351, 0, 24);
  v51 = v385 - v384;
  if (v385 == v384)
  {
    v62 = 0uLL;
  }
  else
  {
    v52 = 0xF0F0F0F0F0F0F0F1 * (v51 >> 3);
    if (v52 >> 61)
      sub_20E867F44();
    v351[0] = operator new(0x8787878787878788 * (v51 >> 3));
    v351[1] = v351[0];
    v351[2] = (char *)v351[0] + 8 * v52;
    *(_QWORD *)v365 = v351;
    do
    {
      v53 = (int8x8_t)a1[1];
      if (v53)
      {
        v54 = *v49;
        v55 = (uint8x8_t)vcnt_s8(v53);
        v55.i16[0] = vaddlv_u8(v55);
        if (v55.u32[0] > 1uLL)
        {
          v56 = *v49;
          if (*(_QWORD *)&v53 <= v54)
            v56 = v54 % *(_QWORD *)&v53;
        }
        else
        {
          v56 = (*(_QWORD *)&v53 - 1) & v54;
        }
        v57 = *(_QWORD **)(*a1 + 8 * v56);
        if (v57)
        {
          v58 = (_QWORD *)*v57;
          if (v58)
          {
            if (v55.u32[0] < 2uLL)
            {
              v59 = *(_QWORD *)&v53 - 1;
              while (1)
              {
                v61 = v58[1];
                if (v61 == v54)
                {
                  if (v58[2] == v54)
                    goto LABEL_60;
                }
                else if ((v61 & v59) != v56)
                {
                  goto LABEL_58;
                }
                v58 = (_QWORD *)*v58;
                if (!v58)
                  goto LABEL_58;
              }
            }
            do
            {
              v60 = v58[1];
              if (v60 == v54)
              {
                if (v58[2] == v54)
                  goto LABEL_60;
              }
              else
              {
                if (v60 >= *(_QWORD *)&v53)
                  v60 %= *(_QWORD *)&v53;
                if (v60 != v56)
                  break;
              }
              v58 = (_QWORD *)*v58;
            }
            while (v58);
          }
        }
      }
LABEL_58:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 2715, (uint64_t)"connected_submap != this->external_submaps_.end()", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v58 = 0;
LABEL_60:
      *(_QWORD *)&v345.f64[0] = v58 + 3;
      sub_20EA61104((void ***)v365, &v345);
      v49 += 17;
    }
    while (v49 != (unint64_t *)v50);
    v62 = *(_OWORD *)v351;
    v51 = (uint64_t)v351[2];
    v26 = a1;
  }
  v382 = v62;
  v383 = v51;
  v63 = v11[23];
  if (*(_BYTE *)(v63 + 225))
  {
    v64 = *(_QWORD *)(v63 + 1072);
    if (v64)
    {
      _ZF = !*(_QWORD *)(v64 + 8) || *(_BYTE *)(a4 + 4) == 0;
      if (!_ZF && *(_DWORD *)a4 == 2)
      {
        v67 = (float32x4_t *)sub_20F2600E4((uint64_t)v11, (uint64_t)a2);
        v69 = 1;
        if (v249)
          goto LABEL_73;
LABEL_178:
        v21 = 0;
        goto LABEL_188;
      }
    }
  }
  v67 = (float32x4_t *)sub_20F25FFF8((uint64_t)v11, (uint64_t)a2);
  v69 = 0;
  if (!v70)
    goto LABEL_178;
LABEL_73:
  v381 = 0uLL;
  v380 = 0;
  sub_20F29CECC(v67, (uint64_t *)&v382, v69, *(unsigned int *)(v26[10] + 1596), v351, v68);
  v73 = (char *)v351[0];
  v380 = v351[0];
  v381 = *(_OWORD *)&v351[1];
  v378 = 0;
  v377 = 0;
  v379 = 0;
  v343 = (char *)v351[1];
  if (v351[0] == v351[1])
  {
    v21 = 1;
    goto LABEL_181;
  }
  v257 = (uint64_t)a2;
  v258 = a4;
  _V2.D[1] = v315.f64[1];
  _Q3.f64[1] = v318.f64[1];
  __asm
  {
    FMLA            D1, D13, V2.D[1]
    FMLA            D2, D13, V3.D[1]
  }
  _V6.D[1] = v321.f64[1];
  __asm { FMLA            D3, D13, V6.D[1] }
  _V6.D[1] = v325.f64[1];
  __asm { FMLA            D4, D13, V6.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + v29 * v323;
  v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v329, v318.f64[0]), v327, v318, 1), v337, v335);
  v85 = _D2 + v29 * v335;
  v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v329, v321.f64[0]), v327, v321, 1), v337, v333);
  _D30 = _D3 + v29 * v333;
  _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v329, v325.f64[0]), v327, v325, 1), v337, v331);
  _D29 = _D4 + v29 * v331;
  _V4.D[1] = v260.f64[1];
  _V6.D[1] = v262.f64[1];
  __asm
  {
    FMLA            D3, D10, V4.D[1]
    FMLA            D5, D10, V6.D[1]
  }
  _V21.D[1] = v264.f64[1];
  __asm { FMLA            D7, D10, V21.D[1] }
  _V21.D[1] = v268.f64[1];
  __asm { FMLA            D17, D10, V21.D[1] }
  _Q3.f64[0] = _D3 + v42 * v266;
  v98 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v262.f64[0]), v270, v262, 1), v287, v279);
  v99.f64[0] = _D5 + v42 * v279;
  v100 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v264.f64[0]), v270, v264, 1), v287, v276);
  v101 = _D7 + v42 * v276;
  _Q16 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v268.f64[0]), v270, v268, 1), v287, v274);
  v103 = _D17 + v42 * v274;
  *(_QWORD *)&v104 = *(_OWORD *)&vaddq_f64(_Q1, v341);
  _Q0 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v329, v315.f64[0]), v327, v315, 1), v337, v323), v339);
  v106 = (float64x2_t)vzip1q_s64((int64x2_t)v84, (int64x2_t)v86);
  v107 = (float64x2_t)vzip2q_s64((int64x2_t)v84, (int64x2_t)v86);
  _Q17.f64[0] = v85;
  _Q17.f64[1] = _D30;
  v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v106, _Q0.f64[0]), v107, _Q0, 1), _Q17, v104);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D17, D0, V20.D[1] }
  _Q17.f64[0] = vmlad_n_f64(_Q17.f64[0], _D29, v104);
  *(_QWORD *)&_D8 = *(_OWORD *)&vnegq_f64(_Q17);
  *(_QWORD *)&v111 = *(_OWORD *)&vaddq_f64(_Q3, v284);
  _Q2 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v260.f64[0]), v270, v260, 1), v287, v266), v281);
  v113 = (float64x2_t)vzip1q_s64(v98, v100);
  v114 = (float64x2_t)vzip2q_s64(v98, v100);
  v99.f64[1] = v101;
  v115 = vmlaq_laneq_f64(vmulq_n_f64(v113, _Q2.f64[0]), v114, _Q2, 1);
  _Q2.f64[0] = _Q2.f64[1];
  __asm { FMLA            D3, D2, V16.D[1] }
  v116 = vmlaq_n_f64(v115, v99, v111);
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v103, v111);
  __asm { FMOV            V24.2D, #1.0 }
  *(_QWORD *)&_Q24.f64[0] = *(_OWORD *)&vnegq_f64(_Q3);
  v275 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q20, 1);
  _Q9 = vnegq_f64(v109);
  *(_QWORD *)&v119 = *(_OWORD *)&vnegq_f64(_Q9);
  v285 = (int64x2_t)v107;
  v288 = (int64x2_t)v106;
  *(_QWORD *)&_Q2.f64[0] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
  v282 = _Q2.f64[0];
  v277 = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
  *(_QWORD *)&_Q2.f64[1] = v277;
  v120 = vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v106, (int64x2_t)v107), v119), _Q2, _Q9, 1);
  *(_QWORD *)&v106.f64[0] = vdupq_laneq_s64(_Q16, 1).u64[0];
  _Q2.f64[0] = _Q20.f64[0];
  _Q2.f64[1] = v275.f64[0];
  _Q1 = vmlsq_lane_f64(v120, _Q2, _D8, 0);
  v122 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, v294), v114, *(double *)&v292), v99, *(double *)&v290);
  v123 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], v294), (float64x2_t)*(unint64_t *)&v106.f64[0], *(double *)&v292), (float64x2_t)*(unint64_t *)&v103, *(double *)&v290);
  v124 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, *(double *)&v300), v114, *(double *)&v298), v99, *(double *)&v296);
  v125 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], *(double *)&v300), (float64x2_t)*(unint64_t *)&v106.f64[0], *(double *)&v298), (float64x2_t)*(unint64_t *)&v103, *(double *)&v296);
  v126 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, *(double *)&v306), v114, *(double *)&v304), v99, *(double *)&v302);
  v127 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], *(double *)&v306), (float64x2_t)*(unint64_t *)&v106.f64[0], *(double *)&v304), (float64x2_t)*(unint64_t *)&v103, *(double *)&v302);
  v299 = v114;
  v301 = v113;
  v293 = (float64x2_t)*(unint64_t *)&v106.f64[0];
  v295 = (float64x2_t)_Q16.u64[0];
  v303 = (float64x2_t)*(unint64_t *)&v103;
  v305 = v99;
  v128 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, *(double *)&v312), v114, *(double *)&v310), v99, v308);
  v129 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v295, *(double *)&v312), (float64x2_t)*(unint64_t *)&v106.f64[0], *(double *)&v310), (float64x2_t)*(unint64_t *)&v103, v308);
  v130 = vmlsq_f64(v122, (float64x2_t)0, v116);
  v131 = vmlsq_f64(v124, (float64x2_t)0, v116);
  v132 = vmlaq_laneq_f64(vmulq_n_f64(v130, v84.f64[0]), v131, v84, 1);
  v133 = vmlaq_laneq_f64(vmulq_n_f64(v130, v86.f64[0]), v131, v86, 1);
  v134 = vmlaq_laneq_f64(vmulq_n_f64(v130, _Q20.f64[0]), v131, _Q20, 1);
  v135 = vmlaq_laneq_f64(vmulq_n_f64(v130, _Q1.f64[0]), v131, _Q1, 1);
  v136 = vmlaq_f64(v123, (float64x2_t)0, _Q24);
  v137 = vmlaq_f64(v125, (float64x2_t)0, _Q24);
  v138 = vmlaq_laneq_f64(vmulq_n_f64(v136, _Q1.f64[0]), v137, _Q1, 1);
  v340 = (int64x2_t)v86;
  v342 = (int64x2_t)v84;
  v139 = vmlaq_laneq_f64(vmulq_n_f64(v136, v84.f64[0]), v137, v84, 1);
  v140 = vmlaq_laneq_f64(vmulq_n_f64(v136, v86.f64[0]), v137, v86, 1);
  v338 = _Q20.f64[0];
  __asm { FMLS            D1, D30, V9.D[1] }
  v313 = *(_QWORD *)&v85;
  __asm { FMLS            D1, D29, V8.D[0] }
  v141 = vmlsq_f64(v126, (float64x2_t)0, v116);
  v142 = vmlaq_n_f64(v135, v141, _Q1.f64[0]);
  v143 = vmlaq_f64(v127, (float64x2_t)0, _Q24);
  v144 = vmlaq_n_f64(v138, v143, _Q1.f64[0]);
  v316 = *(_QWORD *)&_D30;
  v319 = *(_QWORD *)&_D29;
  v145 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v136, _Q20.f64[0]), v137, _Q20, 1), v143, _D29);
  v146 = vsubq_f64(v128, v116);
  v297 = _Q24;
  v147 = vaddq_f64(_Q24, v129);
  v334 = vmlaq_f64(vmlaq_n_f64(v133, v141, _D30), (float64x2_t)0, v146);
  v336 = vmlaq_f64(vmlaq_n_f64(v132, v141, v85), (float64x2_t)0, v146);
  v328 = vmlaq_f64(vmlaq_n_f64(v140, v143, _D30), (float64x2_t)0, v147);
  v330 = vmlaq_f64(vmlaq_n_f64(v139, v143, v85), (float64x2_t)0, v147);
  v332 = vmlaq_f64(vmlaq_n_f64(v134, v141, _D29), (float64x2_t)0, v146);
  v324 = vaddq_f64(v146, v142);
  v326 = vmlaq_f64(v145, (float64x2_t)0, v147);
  v322 = vaddq_f64(v147, v144);
  v291 = vnegq_f64(v116);
  do
  {
    while (1)
    {
      while (1)
      {
        v149 = *(_OWORD *)v73;
        *(_OWORD *)&v365[12] = *(_OWORD *)(v73 + 12);
        *(_OWORD *)v365 = v149;
        v367 = 0.0;
        v368 = 0.0;
        v366 = 0.0;
        v151 = (_BYTE *)*((_QWORD *)v73 + 4);
        v150 = (_BYTE *)*((_QWORD *)v73 + 5);
        v152 = v150 - v151;
        if (v150 == v151)
        {
          v154 = 0.0;
          v153 = 0.0;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v152 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v153 = COERCE_DOUBLE(operator new(v152));
          *(_QWORD *)&v154 = *(_QWORD *)&v153 + 8 * (v152 >> 3);
          v366 = v153;
          v368 = v154;
          memcpy(*(void **)&v153, v151, v152 - 4);
          v367 = v154;
        }
        v155 = (char *)v377;
        v156 = v378;
        *(_OWORD *)v351 = *(_OWORD *)v365;
        *(_OWORD *)((char *)&v351[1] + 4) = *(_OWORD *)&v365[12];
        v353 = 0;
        v352 = 0uLL;
        v157 = *(_QWORD *)&v154 - *(_QWORD *)&v153;
        if (*(_QWORD *)&v154 == *(_QWORD *)&v153)
        {
          v158 = 0;
          if (v377 != v378)
            goto LABEL_89;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v157 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v158 = operator new(v157);
          memcpy(v158, *(const void **)&v153, v157 - 4);
          if (v155 != v156)
          {
LABEL_89:
            while (*(void **)v155 != v351[0]
                 || *((_DWORD *)v155 + 6) != LODWORD(v351[3])
                 || *((void **)v155 + 1) != v351[1]
                 || *((_DWORD *)v155 + 4) != LODWORD(v351[2]))
            {
              v155 += 64;
              if (v155 == v156)
              {
                v155 = v156;
                break;
              }
            }
          }
        }
        if (v158)
          operator delete(v158);
        if (v153 != 0.0)
          operator delete(*(void **)&v153);
        if (v155 == v378)
          break;
        sub_20F23D490((uint64_t)(v155 + 32), *((char **)v155 + 5), *((char **)v73 + 4), *((char **)v73 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v73 + 5) - *((_QWORD *)v73 + 4)) >> 3));
        *((double *)v155 + 7) = fmin(*((double *)v155 + 7), *((double *)v73 + 7));
        v73 += 64;
        if (v73 == v343)
          goto LABEL_106;
      }
      if ((unint64_t)v155 < v379)
        break;
      v378 = sub_20F281A28(&v377, (uint64_t)v73);
      v73 += 64;
      if (v73 == v343)
        goto LABEL_106;
    }
    v159 = *(_OWORD *)v73;
    *(_OWORD *)(v155 + 12) = *(_OWORD *)(v73 + 12);
    *((_QWORD *)v155 + 4) = 0;
    *(_OWORD *)v155 = v159;
    *((_QWORD *)v155 + 5) = 0;
    *((_QWORD *)v155 + 6) = 0;
    v161 = (_BYTE *)*((_QWORD *)v73 + 4);
    v160 = (_BYTE *)*((_QWORD *)v73 + 5);
    v162 = v160 - v161;
    if (v160 != v161)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v162 >> 3) > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v163 = (char *)operator new(v162);
      *((_QWORD *)v155 + 4) = v163;
      *((_QWORD *)v155 + 5) = v163;
      v148 = &v163[8 * (v162 >> 3)];
      *((_QWORD *)v155 + 6) = v148;
      memcpy(v163, v161, v162 - 4);
      *((_QWORD *)v155 + 5) = v148;
    }
    *((_QWORD *)v155 + 7) = *((_QWORD *)v73 + 7);
    v378 = v155 + 64;
    v73 += 64;
  }
  while (v73 != v343);
LABEL_106:
  v164 = (char *)v377;
  v165 = v378;
  v21 = 1;
  if (v377 == v378)
    goto LABEL_170;
  v166 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v166)
    goto LABEL_170;
  _D2 = v316;
  v271 = (float64x2_t)vdupq_lane_s64(v313, 0);
  v273 = (float64x2_t)vdupq_laneq_s64(v342, 1);
  v267 = (float64x2_t)vdupq_lane_s64(v316, 0);
  v269 = (float64x2_t)vdupq_laneq_s64(v340, 1);
  _D1 = v319;
  v265 = (float64x2_t)vdupq_lane_s64(v319, 0);
  _V4.D[1] = _Q9.f64[1];
  __asm { FMLS            D0, D2, V4.D[1] }
  _D3 = _D8;
  __asm { FMLS            D0, D1, V3.D[0] }
  v173 = vdupq_lane_s64(_D0, 0);
  v174.f64[0] = v338;
  v175.f64[0] = v282;
  v174.f64[1] = v275.f64[0];
  *(_QWORD *)&v175.f64[1] = v277;
  v317 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v288, v285), v119), v175, _Q9, 1), v174, _D8, 0);
  v320 = (float64x2_t)v173;
  v314 = (float64x2_t)vdupq_laneq_s64(v317, 1);
  while (1)
  {
    v176 = *(_QWORD *)v164;
    v177 = (uint8x8_t)vcnt_s8(v166);
    v177.i16[0] = vaddlv_u8(v177);
    if (v177.u32[0] > 1uLL)
    {
      v178 = *(_QWORD *)v164;
      if (v176 >= *(_QWORD *)&v166)
        v178 = v176 % *(_QWORD *)&v166;
    }
    else
    {
      v178 = v176 & (*(_QWORD *)&v166 - 1);
    }
    v179 = *(_QWORD **)(*a1 + 8 * v178);
    if (v179)
    {
      v180 = (_QWORD *)*v179;
      if (*v179)
        break;
    }
    do
    {
LABEL_167:
      v164 += 64;
      if (v164 == v165)
      {
        v21 = 1;
        goto LABEL_169;
      }
      v166 = (int8x8_t)a1[1];
    }
    while (!*(_QWORD *)&v166);
  }
  if (v177.u32[0] < 2uLL)
  {
    v181 = *(_QWORD *)&v166 - 1;
    while (1)
    {
      v183 = v180[1];
      if (v176 == v183)
      {
        if (v180[2] == v176)
          goto LABEL_130;
      }
      else if ((v183 & v181) != v178)
      {
        goto LABEL_167;
      }
      v180 = (_QWORD *)*v180;
      if (!v180)
        goto LABEL_167;
    }
  }
  while (2)
  {
    v182 = v180[1];
    if (v176 != v182)
    {
      if (v182 >= *(_QWORD *)&v166)
        v182 %= *(_QWORD *)&v166;
      if (v182 != v178)
        goto LABEL_167;
      goto LABEL_119;
    }
    if (v180[2] != v176)
    {
LABEL_119:
      v180 = (_QWORD *)*v180;
      if (!v180)
        goto LABEL_167;
      continue;
    }
    break;
  }
LABEL_130:
  v375 = 0;
  v374 = 0;
  v376 = 0;
  v185 = (_BYTE *)*((_QWORD *)v164 + 4);
  v184 = (_BYTE *)*((_QWORD *)v164 + 5);
  v186 = v184 - v185;
  if (v184 != v185)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v186 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v374 = operator new(v186);
    v375 = v374;
    v187 = (char *)v374 + 8 * (v186 >> 3);
    v376 = v187;
    memcpy(v374, v185, v186 - 4);
    v375 = v187;
  }
  v358 = 0;
  v355 = 0;
  v357 = 0u;
  v354 = 0u;
  memset(v351, 0, sizeof(v351));
  v352 = 0u;
  v353 = 0x3FF0000000000000;
  v356 = 0x3FF0000000000000;
  v359 = 0x3FF0000000000000;
  v360 = 0u;
  v361 = 0u;
  v362 = 0u;
  __p = 0u;
  v364 = 0;
  if (!sub_20F2655AC(v11, v257, v180 + 3, v258, 1, v259, 1, v71, 0, 0, 0, 0, (char **)&v374, (uint64_t)v365, (uint64_t)v351, 0, 0, 0, 0))
  {
    v239 = 13;
    v240 = (void *)__p;
    if (!(_QWORD)__p)
      goto LABEL_149;
    goto LABEL_148;
  }
  v188 = *(_QWORD *)v164;
  v189 = v384;
  v190 = v385;
  if (v385 != v384)
  {
    v191 = 0xF0F0F0F0F0F0F0F1 * ((v385 - v384) >> 3);
    do
    {
      v192 = v191 >> 1;
      v193 = &v189[136 * (v191 >> 1)];
      v195 = *(_QWORD *)v193;
      v194 = v193 + 136;
      v191 += ~(v191 >> 1);
      if (v195 < v188)
        v189 = v194;
      else
        v191 = v192;
    }
    while (v191);
  }
  if (v385 == v189 || *(_QWORD *)v189 != v188)
  {
    v196 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 2776, (uint64_t)"submap_transform_iter != connected_submap_ids_and_transforms.end()", 66, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v189 = v190;
    if (v196)
      abort();
  }
  v197 = *(float64x2_t *)(v189 + 24);
  v198 = *(float64x2_t *)(v189 + 8);
  v199 = *(float64x2_t *)(v189 + 56);
  v200 = *(float64x2_t *)(v189 + 40);
  v201 = *(float64x2_t *)(v189 + 88);
  v202 = *(float64x2_t *)(v189 + 72);
  v203 = *(float64x2_t *)(v189 + 104);
  v204 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v301, v198.f64[0]), v299, v198, 1), v305, v197.f64[0]), v291, v197, 1);
  v205 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v295, v198.f64[0]), v293, v198, 1), v303, v197.f64[0]), v297, v197, 1);
  v206 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v301, v200.f64[0]), v299, v200, 1), v305, v199.f64[0]), v291, v199, 1);
  v207 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v295, v200.f64[0]), v293, v200, 1), v303, v199.f64[0]), v297, v199, 1);
  v208 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v301, v202.f64[0]), v299, v202, 1), v305, v201.f64[0]), v291, v201, 1);
  v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v295, v202.f64[0]), v293, v202, 1), v303, v201.f64[0]), v297, v201, 1);
  v210 = vmlaq_laneq_f64(vmulq_n_f64(v301, v203.f64[0]), v299, v203, 1);
  v211 = vmlaq_laneq_f64(vmulq_n_f64(v295, v203.f64[0]), v293, v203, 1);
  v212 = *(float64x2_t *)(v189 + 120);
  v213 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v305, v212.f64[0]), v291, v212, 1);
  v214 = vmlaq_laneq_f64(vmlaq_n_f64(v211, v303, v212.f64[0]), v297, v212, 1);
  v215 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v204, *(double *)v365), v206, v366), v208, v370), (float64x2_t)0, v213);
  v216 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v205, *(double *)v365), v207, v366), v209, v370), (float64x2_t)0, v214);
  v217 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v204, *(double *)&v365[8]), v206, v367), v208, v371), (float64x2_t)0, v213);
  v218 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v205, *(double *)&v365[8]), v207, v367), v209, v371), (float64x2_t)0, v214);
  v219 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v204, *(double *)&v365[16]), v206, v368), v208, v372), (float64x2_t)0, v213);
  v220 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v205, *(double *)&v365[16]), v207, v368), v209, v372), (float64x2_t)0, v214);
  v221 = vaddq_f64(v213, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v204, *(double *)&v365[24]), v206, v369), v208, v373));
  v222 = vaddq_f64(v214, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v205, *(double *)&v365[24]), v207, v369), v209, v373));
  v223 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v215, *(double *)v342.i64), v273, v217), v271, v219), (float64x2_t)0, v221);
  v224 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v216, *(double *)v342.i64), v273, v218), v271, v220), (float64x2_t)0, v222);
  v225 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v215, *(double *)v340.i64), v269, v217), v267, v219), (float64x2_t)0, v221);
  v309 = v216;
  v311 = v215;
  v307 = v217;
  v283 = v219;
  v255 = v221;
  v256 = v222;
  v226 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v215, v338), v275, v217), v265, v219), (float64x2_t)0, v221);
  v289 = v218;
  v278 = v220;
  v345 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v336, v223.f64[0]), v334, v225.f64[0]), v332, v226.f64[0]), (float64x2_t)0, v324);
  v346 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v330, v223.f64[0]), v328, v225.f64[0]), v326, v226.f64[0]), (float64x2_t)0, v322);
  v347 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v336, v223, 1), v334, v225, 1), v332, v226, 1), (float64x2_t)0, v324);
  v286 = (int64x2_t)v223;
  v261 = (int64x2_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v216, *(double *)v340.i64), v269, v218), v267, v220), (float64x2_t)0, v222);
  v263 = (int64x2_t)v225;
  *(_QWORD *)&v253 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v216, v338), v275, v218), v265, v220), (float64x2_t)0, v222);
  v254 = v226.f64[1];
  v348 = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v330, v223, 1), v328, v225, 1), v326, v226, 1), (float64x2_t)0, v322);
  v349 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v336, v224.f64[0]), v334, *(double *)v261.i64), v332, v253), (float64x2_t)0, v324);
  v280 = (int64x2_t)v224;
  v350 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v330, v224.f64[0]), v328, *(double *)v261.i64), v326, v253), (float64x2_t)0, v322);
  v388 = 0uLL;
  v389 = 0.0;
  sub_20E9733B8(&v345, v388.f64);
  v227 = vaddq_f64(v255, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v311, *(double *)v317.i64), v314, v307), v320, v283));
  v228 = *(_OWORD *)&vaddq_f64(v256, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v309, *(double *)v317.i64), v314, v289), v320, v278)) ^ 0x8000000000000000;
  _V4.D[1] = v254;
  _D3 = *(_QWORD *)&v227.f64[1] ^ 0x8000000000000000;
  __asm { FMLA            D1, D3, V4.D[1] }
  v232 = vmlad_n_f64(_D1, *(double *)&v228, v253);
  v233 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64(v286, v263), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v227.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v227.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64(v286, v263)), (float64x2_t)vdupq_n_s64(v228), (float64x2_t)vzip1q_s64(v280, v261));
  _Q2 = vaddq_f64(v324, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v336, v233.f64[0]), v334, v233, 1), v332, v232));
  *(_QWORD *)&v233.f64[0] = *(_OWORD *)&vaddq_f64(v322, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v330, v233.f64[0]), v328, v233, 1), v326, v232));
  _D3 = _Q2.f64[1];
  __asm { FMLA            D1, D3, V2.D[1] }
  v237 = a1[10];
  if (sqrt(vmlad_n_f64(_D1, v233.f64[0], v233.f64[0])) > *(double *)(v237 + 1600)
    || (v238 = v388,
        v238.f64[1] = *(double *)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).i64,
        sqrt(vmulq_f64(v238, v238).f64[0] + v238.f64[1] * v238.f64[1] + v389 * v389) > *(double *)(v237 + 1608)))
  {
    v239 = 1;
    v240 = (void *)__p;
    if (!(_QWORD)__p)
      goto LABEL_149;
LABEL_148:
    *((_QWORD *)&__p + 1) = v240;
    operator delete(v240);
    goto LABEL_149;
  }
  v239 = 0;
  v240 = (void *)__p;
  if ((_QWORD)__p)
    goto LABEL_148;
LABEL_149:
  if (*((_QWORD *)&v361 + 1))
  {
    *(_QWORD *)&v362 = *((_QWORD *)&v361 + 1);
    operator delete(*((void **)&v361 + 1));
  }
  if (v351[3])
  {
    *(void **)&v352 = v351[3];
    operator delete(v351[3]);
  }
  v241 = (char *)v351[0];
  if (v351[0])
  {
    v242 = v351[0];
    if (v351[1] != v351[0])
    {
      v243 = (char *)v351[1] - 40;
      v244 = (void (***)(char *))((char *)v351[1] - 40);
      do
      {
        v245 = *v244;
        v244 -= 5;
        (*v245)(v243);
        _ZF = v243 == v241;
        v243 = (char *)v244;
      }
      while (!_ZF);
      v242 = v351[0];
    }
    v351[1] = v241;
    operator delete(v242);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v239 == 13 || !v239)
    goto LABEL_167;
  v21 = 0;
LABEL_169:
  v164 = (char *)v377;
LABEL_170:
  if (v164)
  {
    v246 = v378;
    v247 = v164;
    if (v378 != v164)
    {
      do
      {
        v248 = (void *)*((_QWORD *)v246 - 4);
        if (v248)
        {
          *((_QWORD *)v246 - 3) = v248;
          operator delete(v248);
        }
        v246 -= 64;
      }
      while (v246 != v164);
      v247 = v377;
    }
    v378 = v164;
    operator delete(v247);
  }
LABEL_181:
  v250 = (char *)v380;
  if (v380)
  {
    for (i = (char *)v381; i != v250; i -= 64)
    {
      v252 = (void *)*((_QWORD *)i - 4);
      if (v252)
      {
        *((_QWORD *)i - 3) = v252;
        operator delete(v252);
      }
    }
    operator delete(v250);
  }
LABEL_188:
  if ((_QWORD)v382)
  {
    *((_QWORD *)&v382 + 1) = v382;
    operator delete((void *)v382);
  }
  if (v384)
  {
    v385 = v384;
    operator delete(v384);
  }
  return v21;
}

void sub_20F30D770(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  sub_20F2310C8((void **)&STACK[0x380]);
  v3 = (void *)STACK[0x4A8];
  if (STACK[0x4A8])
  {
    STACK[0x4B0] = (unint64_t)v3;
    operator delete(v3);
  }
  sub_20F26EE18((void **)&STACK[0x4C0]);
  sub_20F26EE18((void **)&STACK[0x4D8]);
  v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(_QWORD *)(v1 - 232) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 216);
  if (v5)
  {
    *(_QWORD *)(v1 - 208) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_20F30D884(uint64_t *a1, uint64_t a2, void *a3)
{
  char v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 __p;
  int v30;
  _BYTE v31[24];
  _BYTE *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *(_BYTE *)(*(_QWORD *)(a2 + 80) + 1084);
  v28 = 0u;
  __p = 0u;
  v30 = 1065353216;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v7 >= 0x1E1E1E1E1E1E1E2)
      sub_20EABADD4();
    v8 = operator new(136 * v7);
    *a1 = (uint64_t)v8;
    a1[1] = (uint64_t)v8;
    a1[2] = (uint64_t)&v8[17 * v7];
  }
  else
  {
    v8 = 0;
  }
  v24 = xmmword_2103AD368;
  v25 = unk_2103AD378;
  v26 = xmmword_2103AD388;
  v27 = unk_2103AD398;
  v20 = xmmword_2103AD328;
  v21 = unk_2103AD338;
  v22 = xmmword_2103AD348;
  v23 = unk_2103AD358;
  v19 = a3;
  sub_20F319948(a1, v8, (uint64_t *)&v19);
  v35[0] = &off_24C9FDD00;
  v35[1] = a2;
  v36 = v35;
  v33[0] = &off_24C9FDD80;
  v33[1] = a2;
  v34 = v33;
  v32 = 0;
  v9 = operator new(0x20uLL);
  *v9 = &off_24C9FDE00;
  v9[1] = a1;
  v9[2] = a2;
  *((_BYTE *)v9 + 24) = v6;
  v32 = v9;
  sub_20F4576F8(a3, (uint64_t)v35, (uint64_t)v33, (uint64_t)v31, &v28);
  v10 = v32;
  if (v32 == v31)
  {
    v11 = 4;
    v10 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  v12 = v34;
  if (v34 == v33)
  {
    v13 = 4;
    v12 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  v14 = v36;
  if (v36 == v35)
  {
    v15 = 4;
    v14 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_20;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_20:
  v16 = (_QWORD *)__p;
  if ((_QWORD)__p)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = (void *)v28;
  *(_QWORD *)&v28 = 0;
  if (v18)
    operator delete(v18);
}

void sub_20F30DAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;

  v31 = *(_QWORD **)(v29 - 128);
  if (v31 == v28)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 152);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  v33 = *(_QWORD **)(v29 - 96);
  if (v33 == (_QWORD *)(v29 - 120))
  {
    v34 = 4;
    v33 = (_QWORD *)(v29 - 120);
  }
  else
  {
    if (!v33)
      goto LABEL_11;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_11:
  v35 = *(_QWORD **)(v29 - 64);
  if (v35 == (_QWORD *)(v29 - 88))
  {
    v36 = 4;
    v35 = (_QWORD *)(v29 - 88);
  }
  else
  {
    if (!v35)
    {
      sub_20E8C25A8((uint64_t)&a27);
      v37 = *(void **)v27;
      if (*(_QWORD *)v27)
        goto LABEL_18;
      goto LABEL_15;
    }
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
  sub_20E8C25A8((uint64_t)&a27);
  v37 = *(void **)v27;
  if (*(_QWORD *)v27)
  {
LABEL_18:
    *(_QWORD *)(v27 + 8) = v37;
    operator delete(v37);
    _Unwind_Resume(a1);
  }
LABEL_15:
  _Unwind_Resume(a1);
}

void sub_20F30DBBC(int8x8_t *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void ***v14;
  void ***v15;
  int8x8_t v16;
  void **v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 *v29;
  unint64_t v30;
  void **p_p;
  _QWORD *v32;
  void *__p;
  __int128 *v34;
  uint64_t v35;
  void *v36;
  void ***v37;

  v2 = a1[1];
  if (!*(_QWORD *)&v2)
    return;
  v5 = *a2;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *a2;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (!v8)
    return;
  v9 = (_QWORD *)*v8;
  if (!v9)
    return;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == v5)
      {
        if (v9[2] == v5)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        return;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v5)
      break;
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
    if (v11 != v7)
      return;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return;
  }
  if (v9[2] != v5)
    goto LABEL_11;
LABEL_22:
  v13 = (uint64_t)(v9 + 3);
  sub_20F24E76C((uint64_t)(v9 + 3), &v36);
  __p = 0;
  v34 = 0;
  v35 = 0;
  v14 = (void ***)v36;
  v15 = v37;
  if (v36 != v37)
  {
    v16 = a1[1];
    if (v16)
    {
LABEL_24:
      v17 = *v14;
      v18 = (uint8x8_t)vcnt_s8(v16);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        v19 = (unint64_t)*v14;
        if ((unint64_t)v17 >= *(_QWORD *)&v16)
          v19 = (unint64_t)v17 % *(_QWORD *)&v16;
      }
      else
      {
        v19 = (unint64_t)v17 & (*(_QWORD *)&v16 - 1);
      }
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v19);
      if (v20)
      {
        v21 = (_QWORD *)*v20;
        if (v21)
        {
          if (v18.u32[0] < 2uLL)
          {
            v22 = *(_QWORD *)&v16 - 1;
            while (1)
            {
              v24 = v21[1];
              if ((void **)v24 == v17)
              {
                if ((void **)v21[2] == v17)
                  goto LABEL_44;
              }
              else if ((v24 & v22) != v19)
              {
                goto LABEL_55;
              }
              v21 = (_QWORD *)*v21;
              if (!v21)
                goto LABEL_55;
            }
          }
          do
          {
            v23 = v21[1];
            if ((void **)v23 == v17)
            {
              if ((void **)v21[2] == v17)
              {
LABEL_44:
                p_p = *v14;
                v32 = v21 + 3;
                v25 = (__int128 *)__p;
                if (v34 == __p)
                {
                  v25 = v34;
                }
                else
                {
                  v26 = ((char *)v34 - (_BYTE *)__p) >> 4;
                  do
                  {
                    v27 = v26 >> 1;
                    v28 = &v25[v26 >> 1];
                    v30 = *(_QWORD *)v28;
                    v29 = v28 + 1;
                    v26 += ~(v26 >> 1);
                    if (v30 < (unint64_t)v17)
                      v25 = v29;
                    else
                      v26 = v27;
                  }
                  while (v26);
                  if (v34 != v25 && *(void ***)v25 == v17)
                    break;
                }
                sub_20F319628((char **)&__p, v25, (uint64_t *)&p_p);
                break;
              }
            }
            else
            {
              if (v23 >= *(_QWORD *)&v16)
                v23 %= *(_QWORD *)&v16;
              if (v23 != v19)
                break;
            }
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
      }
LABEL_55:
      while (++v14 != v15)
      {
        v16 = a1[1];
        if (v16)
          goto LABEL_24;
      }
    }
  }
  sub_20F29EA48(v13);
  p_p = &__p;
  LOBYTE(v32) = 1;
  sub_20F30DEF0(a1, *a2, (uint64_t)&p_p);
  if (__p)
  {
    v34 = (__int128 *)__p;
    operator delete(__p);
  }
  if (v36)
  {
    v37 = (void ***)v36;
    operator delete(v36);
  }
}

void sub_20F30DEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v16;

  if (__p)
  {
    operator delete(__p);
    v16 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v16 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_20F30DEF0(int8x8_t *a1, unint64_t a2, uint64_t a3)
{
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float64x2_t v14;
  float64x2_t v18;
  void **v19;
  _BYTE *v20;
  int8x8_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  double v30;
  float64x2_t *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  char *v37;
  unint64_t v38;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  _BYTE *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  float64x2_t v53;
  unint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  double v65;
  double v67;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  float64x2_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  char *v79;
  void **v80;
  char *v81;
  __int128 v82;
  int v83;
  __int128 v84;
  int8x8_t v85;
  uint64_t v86;
  __int128 v87;
  char *v88;
  void **v89;
  void **v90;
  void **v91;
  _BYTE *v92;
  float64x2_t v93;
  int64x2_t v94;
  float64x2_t v96;
  int8x16_t v98;
  int64x2_t v99;
  float64x2_t v102;
  float64x2_t v103;
  uint64_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  _OWORD *v116;
  double v117;
  float64x2_t v118;
  double v119;
  __int128 v120;
  __int16 v121;
  __int16 v122;
  __int128 v123;
  int8x8_t v124;
  int8x8_t v125;
  __int128 v126;
  char *v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  _QWORD *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _OWORD *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  _QWORD *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  _QWORD *v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  _OWORD *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  void *v168;
  void **v169;
  void **v170;
  void *v171;
  _QWORD *v172;
  __int128 v173;
  void *v174;
  void **v175;
  uint64_t v176;
  void *__p[3];
  char v178;
  void *v179;
  __int128 v180;
  uint64_t v181;
  _OWORD __src[24];
  __int128 v183;
  void *v184;
  char v185;
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v7);
    if (v8)
    {
      v9 = *v8;
      if (*v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                goto LABEL_115;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
            {
LABEL_115:
              v13 = v9;
              if (!a1[283].i8[0])
                goto LABEL_23;
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3387, (uint64_t)"ext_submap_it != this->external_submaps_.end() && \"The iterator must exist to call this function\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = 0;
  v13 = 0;
  if (!a1[283].i8[0])
  {
LABEL_23:
    bzero(&a1[169], 0x390uLL);
    a1[283].i8[0] = 1;
  }
LABEL_24:
  v174 = 0;
  v175 = 0;
  v176 = 0;
  sub_20FCCAB74(v13[5], (uint64_t)&v174);
  v20 = v174;
  v19 = v175;
  if (v174 == v175)
    goto LABEL_149;
  v21 = a1[10];
  if (*(_BYTE *)(*(_QWORD *)&v21 + 2636))
    _ZF = *(_BYTE *)(a3 + 8) == 0;
  else
    _ZF = 1;
  if (_ZF)
    goto LABEL_85;
  v23 = v13[5];
  v24 = *(_QWORD *)(v23 + 208);
  v25 = *(_QWORD *)(v23 + 216);
  if (v24 == v25 || (v26 = **(char ***)a3, v27 = *(char **)(*(_QWORD *)a3 + 8), v27 == v26))
  {
    v29 = 0;
    goto LABEL_52;
  }
  v28 = 0;
  v29 = 0;
  v30 = -1.0;
  do
  {
    while (1)
    {
      v31 = (float64x2_t *)(v24 + 344);
      v32 = *(_QWORD *)(v24 + 24);
      v33 = v26;
      v34 = (v27 - v26) >> 4;
      do
      {
        v35 = v34 >> 1;
        v36 = (unint64_t *)&v33[16 * (v34 >> 1)];
        v38 = *v36;
        v37 = (char *)(v36 + 2);
        v34 += ~(v34 >> 1);
        if (v38 < v32)
          v33 = v37;
        else
          v34 = v35;
      }
      while (v34);
      if (v33 == v27 || *(_QWORD *)v33 != v32)
        goto LABEL_33;
      _Q3 = *v31;
      _Q1.f64[0] = *(float64_t *)(v24 + 408);
      _Q4 = *(float64x2_t *)(v24 + 392);
      _Q5.f64[0] = *(float64_t *)(v24 + 456);
      v40 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q1, 8uLL);
      _Q1.f64[1] = *(float64_t *)(v24 + 392);
      v18 = *(float64x2_t *)(v24 + 440);
      v41 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)_Q5, 8uLL);
      _Q5.f64[1] = *(float64_t *)(v24 + 440);
      _Q5 = vmlsq_f64(vmulq_f64(v40, _Q5), _Q1, v41);
      *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(_Q4, v18, 1), v18, _Q4, 1);
      _Q1 = vmulq_f64(*v31, _Q5);
      _Q4.f64[0] = _Q5.f64[1];
      __asm { FMLA            D1, D4, V3.D[1] }
      _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *(double *)(v24 + 360), v40.f64[0]);
      if (!v28 || _Q1.f64[0] > v30)
        break;
      v28 = 1;
LABEL_33:
      v24 += 472;
      if (v24 == v25)
        goto LABEL_44;
    }
    v29 = (_QWORD *)*((_QWORD *)v33 + 1);
    v28 = 1;
    v24 += 472;
    v30 = _Q1.f64[0];
  }
  while (v24 != v25);
LABEL_44:
  if (v28)
  {
    memset(__p, 0, sizeof(__p));
    v45 = v29[2];
    v46 = operator new(0x10uLL);
    *(_QWORD *)&v180 = v46 + 2;
    *((_QWORD *)&v180 + 1) = v46 + 2;
    *v46 = v45;
    v46[1] = v23;
    v179 = v46;
    v181 = *(_QWORD *)(*(_QWORD *)&v21 + 2064);
    sub_20F3B9C98((uint64_t)&v181);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v47 = *(void **)&__src[0];
    __p[0] = *(void **)&__src[0];
    *(_OWORD *)&__p[1] = *(_OWORD *)((char *)__src + 8);
    if (v179)
    {
      *(_QWORD *)&v180 = v179;
      operator delete(v179);
      v47 = __p[0];
      v48 = __p[1];
      if (__p[0] != __p[1])
        goto LABEL_49;
LABEL_118:
      sub_20F0AD288((char **)__p, 2uLL);
      v47 = __p[0];
      v92 = __p[1];
      *((_OWORD *)__p[0] + 4) = xmmword_2103AD368;
      *((_OWORD *)v47 + 5) = unk_2103AD378;
      *((_OWORD *)v47 + 6) = xmmword_2103AD388;
      *((_OWORD *)v47 + 7) = unk_2103AD398;
      *(_OWORD *)v47 = xmmword_2103AD328;
      *((_OWORD *)v47 + 1) = unk_2103AD338;
      *((_OWORD *)v47 + 2) = xmmword_2103AD348;
      *((_OWORD *)v47 + 3) = unk_2103AD358;
      *((_OWORD *)v47 + 10) = xmmword_2103AD348;
      *((_OWORD *)v47 + 11) = unk_2103AD358;
      *((_OWORD *)v47 + 8) = xmmword_2103AD328;
      *((_OWORD *)v47 + 9) = unk_2103AD338;
      *((_OWORD *)v47 + 14) = xmmword_2103AD388;
      *((_OWORD *)v47 + 15) = unk_2103AD398;
      *((_OWORD *)v47 + 12) = xmmword_2103AD368;
      *((_OWORD *)v47 + 13) = unk_2103AD378;
      if (v92 - (_BYTE *)v47 != 256)
        goto LABEL_119;
    }
    else
    {
      v48 = (_BYTE *)*((_QWORD *)&__src[0] + 1);
      if (*(_QWORD *)&__src[0] == *((_QWORD *)&__src[0] + 1))
        goto LABEL_118;
LABEL_49:
      if (v48 - (_BYTE *)v47 != 256)
      {
LABEL_119:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3452, (uint64_t)"T_Gold_to_Gnew_per_map.size() == 2", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v47 = __p[0];
      }
    }
    v93.f64[0] = *((float64_t *)v47 + 2);
    v94 = *((int64x2_t *)v47 + 2);
    _Q4 = *((int64x2_t *)v47 + 4);
    v96 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v47, v94);
    _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v47, v94);
    v93.f64[1] = *((float64_t *)v47 + 6);
    v98 = vextq_s8((int8x16_t)_Q2, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    v99 = vzip1q_s64(_Q4, (int64x2_t)_Q2);
    _D19 = *((double *)v47 + 14);
    _Q6 = *((float64x2_t *)v47 + 6);
    v102 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v96, vnegq_f64(_Q6).f64[0]), _Q2, _Q6, 1), v93, _D19, 0);
    _Q4.i64[0] = *((_QWORD *)v47 + 9);
    *(_QWORD *)&v103.f64[0] = vdupq_laneq_s64(v99, 1).u64[0];
    __asm { FMLS            D2, D4, V6.D[1] }
    *(_QWORD *)&v103.f64[1] = v98.i64[0];
    _Q4.i64[0] = *((_QWORD *)v47 + 10);
    *(_QWORD *)&_Q6.f64[0] = v98.i64[1];
    v104 = v99.i64[0];
    __asm { FMLS            D2, D16, V19.D[0] }
    _Q2.f64[1] = 1.0;
    v106 = *((float64x2_t *)v47 + 8);
    v105 = *((float64x2_t *)v47 + 9);
    v108 = *((float64x2_t *)v47 + 10);
    v107 = *((float64x2_t *)v47 + 11);
    v110 = *((float64x2_t *)v47 + 12);
    v109 = *((float64x2_t *)v47 + 13);
    v112 = *((float64x2_t *)v47 + 14);
    v111 = *((float64x2_t *)v47 + 15);
    __src[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v106.f64[0]), v103, v106, 1), v93, v105.f64[0]), v102, v105, 1);
    __src[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v104, v106.f64[0]), (float64x2_t)*(unint64_t *)&_Q6.f64[0], v106, 1), (float64x2_t)_Q4.u64[0], v105.f64[0]), _Q2, v105, 1);
    __src[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v108.f64[0]), v103, v108, 1), v93, v107.f64[0]), v102, v107, 1);
    __src[3] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v104, v108.f64[0]), (float64x2_t)*(unint64_t *)&_Q6.f64[0], v108, 1), (float64x2_t)_Q4.u64[0], v107.f64[0]), _Q2, v107, 1);
    __src[4] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v110.f64[0]), v103, v110, 1), v93, v109.f64[0]), v102, v109, 1);
    __src[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v104, v110.f64[0]), (float64x2_t)*(unint64_t *)&_Q6.f64[0], v110, 1), (float64x2_t)_Q4.u64[0], v109.f64[0]), _Q2, v109, 1);
    __src[6] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v112.f64[0]), v103, v112, 1), v93, v111.f64[0]), v102, v111, 1);
    __src[7] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v104, v112.f64[0]), (float64x2_t)*(unint64_t *)&_Q6.f64[0], v112, 1), (float64x2_t)_Q4.u64[0], v111.f64[0]), _Q2, v111, 1);
    v113 = v13[5];
    sub_20FCE8D4C((uint64_t)__src, *(_QWORD **)(v113 + 424));
    sub_20FCC8C14((uint64_t *)v113, **(_QWORD **)(v113 + 424));
    (*(void (**)(_QWORD))(*(_QWORD *)v13[28] + 16))(v13[28]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v64 = (_QWORD *)v13[5];
LABEL_124:
    sub_20FCC8FF4(v64);
    if (!a1[283].i8[0])
    {
      bzero(&a1[169], 0x390uLL);
      a1[283].i8[0] = 1;
    }
    sub_20F26502C((uint64_t)(v13 + 3), (uint64_t *)__p);
    v114 = (char *)__p[0];
    v115 = (char *)__p[1];
    if (__p[0] != __p[1])
    {
      while (2)
      {
        if (v114[24] == 1)
        {
          if (*((_DWORD *)v114 + 4))
            sub_20E877AB8();
          if (!v114[336]
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3498, (uint64_t)"updated_anchor.opt_metadata()", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          sub_2102323F4((unsigned __int8 *)v114, __src);
          v116 = operator new(0x28uLL);
          v179 = v116;
          v180 = xmmword_2102E0950;
          v119 = *(double *)__src;
          v120 = __src[1];
          *v116 = __src[0];
          v116[1] = v120;
          *((_DWORD *)v116 + 8) = __src[2];
          *((_BYTE *)v116 + 36) = 0;
          if (!v114[336])
            sub_20E866B34();
          v121 = sub_20F264904(v29, (uint64_t)&v179, (float64x2_t *)(v114 + 184), (__int128 *)v114 + 20, v119, *(double *)&v120, v117, v118);
          v122 = v121;
          if (SHIBYTE(v180) < 0)
          {
            operator delete(v179);
            if ((v122 & 0x101) == 0)
              goto LABEL_137;
          }
          else if ((v121 & 0x101) == 0)
          {
LABEL_137:
            v123 = *(_OWORD *)v114;
            __src[2] = 0uLL;
            __src[4] = 0uLL;
            __src[6] = 0uLL;
            v124 = a1[289];
            __src[0] = v123;
            __src[1] = 0x3FF0000000000000uLL;
            __src[3] = 0x3FF0000000000000uLL;
            __src[5] = 0x3FF0000000000000uLL;
            *(int8x8_t *)&__src[7] = v124;
            DWORD2(__src[7]) = 0;
            LOBYTE(__src[8]) = 1;
            BYTE8(__src[8]) = 0;
            BYTE8(__src[23]) = 0;
            LOBYTE(v183) = 0;
            v185 = 0;
            v125 = a1[195];
            if (*(_QWORD *)&v125 >= *(_QWORD *)&a1[196])
            {
              v127 = sub_20EE1E1C8((char **)&a1[194], (uint64_t)__src);
            }
            else
            {
              memcpy(*(void **)&a1[195], __src, 0x179uLL);
              *(_BYTE *)(*(_QWORD *)&v125 + 384) = 0;
              *(_BYTE *)(*(_QWORD *)&v125 + 408) = 0;
              if (v185)
              {
                v126 = v183;
                *(_QWORD *)(*(_QWORD *)&v125 + 400) = v184;
                *(_OWORD *)(*(_QWORD *)&v125 + 384) = v126;
                v184 = 0;
                v183 = 0uLL;
                *(_BYTE *)(*(_QWORD *)&v125 + 408) = 1;
              }
              v127 = (char *)(*(_QWORD *)&v125 + 416);
            }
            a1[195] = (int8x8_t)v127;
            if (v185 && SHIBYTE(v184) < 0)
              operator delete((void *)v183);
          }
        }
        v114 += 344;
        if (v114 == v115)
        {
          v114 = (char *)__p[0];
          break;
        }
        continue;
      }
    }
    if (v114)
    {
      __p[1] = v114;
      v91 = (void **)v114;
      goto LABEL_148;
    }
    goto LABEL_149;
  }
LABEL_52:
  v49 = **(_QWORD ***)(v23 + 424);
  v50 = v49[8];
  if (v50)
  {
    v51 = (_QWORD *)v49[6];
    v52 = v49 + 7;
    v53.f64[0] = 0.0;
    v54 = 0;
    v14.f64[0] = 0.0;
    if (v51 != v52)
    {
      do
      {
        v60 = (_QWORD *)v51[1];
        v61 = v51;
        if (v60)
        {
          do
          {
            v62 = v60;
            v60 = (_QWORD *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            v62 = (_QWORD *)v61[2];
            _ZF = *v62 == (_QWORD)v61;
            v61 = v62;
          }
          while (!_ZF);
        }
        v59 = v51[6];
        _Q3.f64[0] = *(float64_t *)(v59 + 88);
        v14 = vaddq_f64(v14, _Q3);
        *(_QWORD *)&v53.f64[1] = v54;
        v53 = vaddq_f64(v53, *(float64x2_t *)(v59 + 72));
        v54 = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
        v51 = v62;
      }
      while (v62 != v52);
    }
    _Q3.f64[0] = 1.0 / (double)v50;
    v55 = vmulq_f64(_Q3, v14);
    *(_QWORD *)&v53.f64[1] = v54;
    v56 = vmulq_n_f64(v53, _Q3.f64[0]);
    v57 = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
    v58 = (_QWORD *)a1[2];
    if (!v58)
      goto LABEL_82;
LABEL_65:
    v63 = 0;
    v64 = (_QWORD *)v13[5];
    v65 = 1.79769313e308;
    *(_QWORD *)&v56.f64[1] = v57;
    do
    {
      if (v58[2] != v64[20])
      {
        v69 = **(_QWORD ***)(v58[5] + 424);
        v70 = v69[8];
        if (!v70)
        {
          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3470, (uint64_t)"neighbor_submap_center", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))LABEL_207:sub_20E866B34();
LABEL_206:
          abort();
        }
        v71 = (_QWORD *)v69[6];
        v72 = v69 + 7;
        v73.f64[0] = 0.0;
        v74 = 0;
        _Q5.f64[0] = 0.0;
        if (v71 != v72)
        {
          do
          {
            v76 = (_QWORD *)v71[1];
            v77 = v71;
            if (v76)
            {
              do
              {
                v78 = v76;
                v76 = (_QWORD *)*v76;
              }
              while (v76);
            }
            else
            {
              do
              {
                v78 = (_QWORD *)v77[2];
                _ZF = *v78 == (_QWORD)v77;
                v77 = v78;
              }
              while (!_ZF);
            }
            v75 = v71[6];
            v18.f64[0] = *(float64_t *)(v75 + 88);
            _Q5 = vaddq_f64(_Q5, v18);
            *(_QWORD *)&v73.f64[1] = v74;
            v73 = vaddq_f64(v73, *(float64x2_t *)(v75 + 72));
            v74 = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
            v71 = v78;
          }
          while (v78 != v72);
        }
        if (!v50)
          goto LABEL_207;
        v18.f64[0] = 1.0 / (double)v70;
        *(_QWORD *)&v73.f64[1] = v74;
        _Q6 = vmlsq_lane_f64(v56, v73, v18.f64[0], 0);
        *(_QWORD *)&v67 = *(_OWORD *)&vmlsq_f64(v55, v18, _Q5);
        _Q5 = vmulq_f64(_Q6, _Q6);
        _D7 = _Q6.f64[1];
        __asm { FMLA            D5, D7, V6.D[1] }
        _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v67, v67);
        if (_Q5.f64[0] < v65)
        {
          v29 = v58 + 3;
          v63 = 1;
          v65 = _Q5.f64[0];
        }
      }
      v58 = (_QWORD *)*v58;
    }
    while (v58);
    if (v63)
      goto LABEL_124;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3463, (uint64_t)"query_submap_center", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_206;
    }
    v56.f64[0] = 0.0;
    v57 = 0;
    v55.f64[0] = 0.0;
    v58 = (_QWORD *)a1[2];
    if (v58)
      goto LABEL_65;
  }
LABEL_82:
  if (*(_BYTE *)(*(_QWORD *)&a1[10] + 2637)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 3406, (uint64_t)"(!this->config().avoid_prune_external_submaps_to_empty || reanchored)", 69, (uint64_t)"reanchor should always succeed if avoid_prune_external_submaps_to_empty is set", 78, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_206;
  }
  v20 = v174;
  v19 = v175;
LABEL_85:
  v172 = v13;
  v179 = 0;
  v180 = 0uLL;
  sub_20EE1D52C((uint64_t)&v179, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - v20) >> 4));
  v79 = (char *)v175;
  if (v174 != v175)
  {
    v80 = (void **)((char *)v174 + 24);
    do
    {
      v81 = (char *)(v80 - 3);
      v82 = *(_OWORD *)(v80 - 3);
      LOBYTE(__p[0]) = 0;
      v178 = 0;
      v83 = *((unsigned __int8 *)v80 + 16);
      if (*((_BYTE *)v80 + 16))
      {
        if (*((char *)v80 + 15) < 0)
        {
          v173 = v82;
          sub_20E860C04(__p, *(v80 - 1), (unint64_t)*v80);
          v82 = v173;
        }
        else
        {
          v84 = *(_OWORD *)(v80 - 1);
          __p[2] = v80[1];
          *(_OWORD *)__p = v84;
        }
        v178 = 1;
      }
      __src[2] = 0uLL;
      __src[4] = 0uLL;
      __src[6] = 0uLL;
      v85 = a1[289];
      __src[0] = v82;
      __src[1] = 0x3FF0000000000000uLL;
      __src[3] = 0x3FF0000000000000uLL;
      __src[5] = 0x3FF0000000000000uLL;
      *(int8x8_t *)&__src[7] = v85;
      DWORD2(__src[7]) = 0;
      LOBYTE(__src[8]) = 1;
      BYTE8(__src[8]) = 0;
      BYTE8(__src[23]) = 0;
      LOBYTE(v183) = 0;
      v185 = 0;
      if (v83)
      {
        if (SHIBYTE(__p[2]) < 0)
        {
          sub_20E860C04(&v183, __p[0], (unint64_t)__p[1]);
          v185 = 1;
          if (v178 && SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v183 = *(_OWORD *)__p;
          v184 = __p[2];
          v185 = 1;
        }
      }
      v86 = v180;
      if ((unint64_t)v180 >= *((_QWORD *)&v180 + 1))
      {
        v88 = sub_20EE1E1C8((char **)&v179, (uint64_t)__src);
      }
      else
      {
        memcpy((void *)v180, __src, 0x179uLL);
        *(_BYTE *)(v86 + 384) = 0;
        *(_BYTE *)(v86 + 408) = 0;
        if (v185)
        {
          v87 = v183;
          *(_QWORD *)(v86 + 400) = v184;
          *(_OWORD *)(v86 + 384) = v87;
          v184 = 0;
          v183 = 0uLL;
          *(_BYTE *)(v86 + 408) = 1;
        }
        v88 = (char *)(v86 + 416);
      }
      *(_QWORD *)&v180 = v88;
      if (v185 && SHIBYTE(v184) < 0)
        operator delete((void *)v183);
      v80 += 6;
    }
    while (v81 + 48 != v79);
  }
  v89 = (void **)v179;
  v90 = (void **)v180;
  sub_20EAAA1D0(&a1[194], *(_QWORD *)&a1[195], (char *)v179, (char *)v180, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v180 - (_QWORD)v179) >> 5));
  v13 = v172;
  if (v89)
  {
    while (v90 != v89)
    {
      if (*((_BYTE *)v90 - 8) && *((char *)v90 - 9) < 0)
        operator delete(*(v90 - 4));
      v90 -= 52;
    }
    v91 = v89;
LABEL_148:
    operator delete(v91);
  }
LABEL_149:
  v128 = (char *)a1[210];
  v129 = (unint64_t)a1[211];
  if ((unint64_t)v128 < v129)
  {
    *(_QWORD *)v128 = v13[2];
    v130 = v128 + 8;
    goto LABEL_170;
  }
  v131 = (char *)a1[209];
  v132 = (v128 - v131) >> 3;
  v133 = v132 + 1;
  if ((unint64_t)(v132 + 1) >> 61)
    goto LABEL_210;
  v134 = v129 - (_QWORD)v131;
  if (v134 >> 2 > v133)
    v133 = v134 >> 2;
  if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
    v135 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v135 = v133;
  if (v135)
  {
    if (!(v135 >> 61))
    {
      v136 = operator new(8 * v135);
      goto LABEL_161;
    }
LABEL_213:
    sub_20E877A38();
  }
  v136 = 0;
LABEL_161:
  v137 = &v136[8 * v132];
  v138 = &v136[8 * v135];
  *v137 = v13[2];
  v130 = v137 + 1;
  if (v128 != v131)
  {
    v139 = v128 - v131 - 8;
    if (v139 < 0x58)
      goto LABEL_217;
    if ((unint64_t)(v131 - v136) < 0x20)
      goto LABEL_217;
    v140 = (v139 >> 3) + 1;
    v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
    v142 = &v128[-v141];
    v137 = (_QWORD *)((char *)v137 - v141);
    v143 = &v136[8 * v132 - 16];
    v144 = v128 - 16;
    v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v146 = *(_OWORD *)v144;
      *(v143 - 1) = *((_OWORD *)v144 - 1);
      *v143 = v146;
      v143 -= 2;
      v144 -= 32;
      v145 -= 4;
    }
    while (v145);
    v128 = v142;
    if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_217:
      do
      {
        v147 = *((_QWORD *)v128 - 1);
        v128 -= 8;
        *--v137 = v147;
      }
      while (v128 != v131);
    }
  }
  a1[209] = (int8x8_t)v137;
  a1[210] = (int8x8_t)v130;
  a1[211] = (int8x8_t)v138;
  if (v131)
    operator delete(v131);
LABEL_170:
  a1[210] = (int8x8_t)v130;
  v148 = (char *)a1[287];
  v149 = (unint64_t)a1[288];
  if ((unint64_t)v148 < v149)
  {
    *(_QWORD *)v148 = v13[2];
    v150 = v148 + 8;
    goto LABEL_191;
  }
  v151 = (char *)a1[286];
  v152 = (v148 - v151) >> 3;
  v153 = v152 + 1;
  if ((unint64_t)(v152 + 1) >> 61)
LABEL_210:
    sub_20E92CED8();
  v154 = v149 - (_QWORD)v151;
  if (v154 >> 2 > v153)
    v153 = v154 >> 2;
  if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
    v155 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v155 = v153;
  if (v155)
  {
    if (v155 >> 61)
      goto LABEL_213;
    v156 = operator new(8 * v155);
  }
  else
  {
    v156 = 0;
  }
  v157 = &v156[8 * v152];
  v158 = &v156[8 * v155];
  *v157 = v13[2];
  v150 = v157 + 1;
  if (v148 != v151)
  {
    v159 = v148 - v151 - 8;
    if (v159 < 0x58)
      goto LABEL_218;
    if ((unint64_t)(v151 - v156) < 0x20)
      goto LABEL_218;
    v160 = (v159 >> 3) + 1;
    v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
    v162 = &v148[-v161];
    v157 = (_QWORD *)((char *)v157 - v161);
    v163 = &v156[8 * v152 - 16];
    v164 = v148 - 16;
    v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v166 = *(_OWORD *)v164;
      *(v163 - 1) = *((_OWORD *)v164 - 1);
      *v163 = v166;
      v163 -= 2;
      v164 -= 32;
      v165 -= 4;
    }
    while (v165);
    v148 = v162;
    if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_218:
      do
      {
        v167 = *((_QWORD *)v148 - 1);
        v148 -= 8;
        *--v157 = v167;
      }
      while (v148 != v151);
    }
  }
  a1[286] = (int8x8_t)v157;
  a1[287] = (int8x8_t)v150;
  a1[288] = (int8x8_t)v158;
  if (v151)
    operator delete(v151);
LABEL_191:
  a1[287] = (int8x8_t)v150;
  sub_20E8D2CE8(a1, v9, (uint64_t)__src);
  v168 = *(void **)&__src[0];
  *(_QWORD *)&__src[0] = 0;
  if (v168)
  {
    if (LOBYTE(__src[1]))
      sub_20F3122B4((uint64_t)v168 + 24);
    operator delete(v168);
  }
  v169 = (void **)v174;
  if (v174)
  {
    v170 = v175;
    v171 = v174;
    if (v175 != v174)
    {
      do
      {
        if (*((_BYTE *)v170 - 8))
        {
          if (*((char *)v170 - 9) < 0)
            operator delete(*(v170 - 4));
        }
        v170 -= 6;
      }
      while (v170 != v169);
      v171 = v174;
    }
    v175 = v169;
    operator delete(v171);
  }
}

void sub_20F30EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
    sub_20EAA9C38(&a18);
    _Unwind_Resume(a1);
  }
  sub_20EAA9C38(&a18);
  _Unwind_Resume(a1);
}

void sub_20F30EFF4(int8x8_t *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 *v28;
  unint64_t v29;
  __int128 *v30;
  __int128 *v31;
  unint64_t v32;
  _QWORD *v33;
  void *__p;
  __int128 *v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;

  v2 = a1[1];
  if (!*(_QWORD *)&v2)
    return;
  v5 = *a2;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *a2;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (!v8)
    return;
  v9 = (_QWORD *)*v8;
  if (!*v8)
    return;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == v5)
      {
        if (v9[2] == v5)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        return;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v5)
      break;
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
    if (v11 != v7)
      return;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return;
  }
  if (v9[2] != v5)
    goto LABEL_11;
LABEL_22:
  sub_20F24E76C((uint64_t)(v9 + 3), &v37);
  __p = 0;
  v35 = 0;
  v36 = 0;
  v13 = (unint64_t *)v37;
  v14 = v38;
  if (v37 != v38)
  {
    v15 = a1[1];
    if (v15)
    {
LABEL_24:
      v16 = *v13;
      v17 = (uint8x8_t)vcnt_s8(v15);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v18 = *v13;
        if (v16 >= *(_QWORD *)&v15)
          v18 = v16 % *(_QWORD *)&v15;
      }
      else
      {
        v18 = v16 & (*(_QWORD *)&v15 - 1);
      }
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v18);
      if (v19)
      {
        v20 = (_QWORD *)*v19;
        if (v20)
        {
          if (v17.u32[0] < 2uLL)
          {
            v21 = *(_QWORD *)&v15 - 1;
            while (1)
            {
              v23 = v20[1];
              if (v23 == v16)
              {
                if (v20[2] == v16)
                  goto LABEL_44;
              }
              else if ((v23 & v21) != v18)
              {
                goto LABEL_55;
              }
              v20 = (_QWORD *)*v20;
              if (!v20)
                goto LABEL_55;
            }
          }
          do
          {
            v22 = v20[1];
            if (v22 == v16)
            {
              if (v20[2] == v16)
              {
LABEL_44:
                v32 = *v13;
                v33 = v20 + 3;
                v24 = (__int128 *)__p;
                if (v35 == __p)
                {
                  v24 = v35;
                }
                else
                {
                  v25 = ((char *)v35 - (_BYTE *)__p) >> 4;
                  do
                  {
                    v26 = v25 >> 1;
                    v27 = &v24[v25 >> 1];
                    v29 = *(_QWORD *)v27;
                    v28 = v27 + 1;
                    v25 += ~(v25 >> 1);
                    if (v29 < v16)
                      v24 = v28;
                    else
                      v25 = v26;
                  }
                  while (v25);
                  if (v35 != v24 && *(_QWORD *)v24 == v16)
                    break;
                }
                sub_20F319628((char **)&__p, v24, (uint64_t *)&v32);
                break;
              }
            }
            else
            {
              if (v22 >= *(_QWORD *)&v15)
                v22 %= *(_QWORD *)&v15;
              if (v22 != v18)
                break;
            }
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
      }
LABEL_55:
      while (++v13 != v14)
      {
        v15 = a1[1];
        if (v15)
          goto LABEL_24;
      }
      v30 = (__int128 *)__p;
      v31 = v35;
      if (__p != v35)
      {
        do
          sub_20F26A100(*((_QWORD *)v30++ + 1), *(_QWORD *)(v9[5] + 160));
        while (v30 != v31);
      }
    }
  }
  LOBYTE(v32) = 0;
  LOBYTE(v33) = 0;
  sub_20F30DEF0(a1, *a2, (uint64_t)&v32);
  if (__p)
  {
    v35 = (__int128 *)__p;
    operator delete(__p);
  }
  if (v37)
  {
    v38 = (unint64_t *)v37;
    operator delete(v37);
  }
}

void sub_20F30F2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v16;

  if (__p)
  {
    operator delete(__p);
    v16 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v16 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F30F334(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;

  sub_20F3102A4((void **)a1, (__n128 *)a2);
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a2 + 64) = v6;
  *(_QWORD *)(a2 + 72) = v7;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  sub_20F3101B4(a1 + 88, a2 + 88);
  v9 = *(void **)(a1 + 304);
  if (v9)
  {
    *(_QWORD *)(a1 + 312) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  v10 = *(void **)(a1 + 328);
  if (v10)
  {
    *(_QWORD *)(a1 + 336) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
  }
  v11 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v11;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  v12 = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = v12;
  return a1;
}

uint64_t sub_20F30F420(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  void *v11;
  int v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = &off_24CA000E0;
  v5 = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 10;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  if (a1 != a2)
  {
    sub_20F30F9B4((void **)a1, *(char **)a2, *(char **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 24) = v6;
    v8 = *(unsigned int *)(a2 + 80);
    if (*(_QWORD *)(a1 + 72) >= v8)
    {
      if (!(_DWORD)v8)
      {
        v12 = 0;
        goto LABEL_9;
      }
      v11 = (void *)*v4;
      v9 = 4 * v8;
    }
    else
    {
      if (*v4)
        MEMORY[0x212BC6368](*v4, 0x1000C8052888210);
      v9 = 4 * v8;
      v10 = (v9 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = v10 >> 2;
      v11 = operator new(v10, (std::align_val_t)0x20uLL);
      *v4 = v11;
    }
    memcpy(v11, *(const void **)(a2 + 64), v9);
    v12 = *(_DWORD *)(a2 + 80);
LABEL_9:
    *(_DWORD *)(a1 + 80) = v12;
  }
  sub_20F30F608(v5, a2 + 88);
  return a1;
}

void sub_20F30F5BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v1 + 328);
  if (v4)
  {
    *(_QWORD *)(v1 + 336) = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_20F2E5988((void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 312) = v5;
  operator delete(v5);
  sub_20F2E5988((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F30F608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  void *v21;
  int v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  int v27;
  size_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  void *v39;
  int v40;
  uint64_t v41;

  v4 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  if (a1 != a2)
  {
    v5 = *(unsigned int *)(a2 + 40);
    if (*(_QWORD *)(a1 + 32) >= v5)
    {
      if (!(_DWORD)v5)
      {
        *(_DWORD *)(a1 + 40) = 0;
        v10 = *(_DWORD *)(a2 + 64);
        v11 = *(_DWORD *)(a2 + 68);
        v12 = (v11 * v10);
        if (*(_QWORD *)(a1 + 56) < v12)
          goto LABEL_9;
        goto LABEL_13;
      }
      v9 = *(void **)(a1 + 24);
      v7 = 4 * v5;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 24);
      if (v6)
        MEMORY[0x212BC6368](v6, 0x1000C8052888210);
      v7 = 4 * v5;
      v8 = (v7 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = v8 >> 2;
      v9 = operator new(v8, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 24) = v9;
    }
    memcpy(v9, *(const void **)(a2 + 24), v7);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    v10 = *(_DWORD *)(a2 + 64);
    v11 = *(_DWORD *)(a2 + 68);
    v12 = (v11 * v10);
    if (*(_QWORD *)(a1 + 56) < v12)
    {
LABEL_9:
      v13 = *(_QWORD *)(a1 + 48);
      if (v13)
        MEMORY[0x212BC6368](v13, 0x1000C8052888210);
      v14 = 4 * v12;
      v15 = (v14 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v15 >> 2;
      v16 = operator new(v15, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 48) = v16;
      goto LABEL_15;
    }
LABEL_13:
    if (!(_DWORD)v12)
      goto LABEL_16;
    v16 = *(void **)(a1 + 48);
    v14 = 4 * v12;
LABEL_15:
    memcpy(v16, *(const void **)(a2 + 48), v14);
    v10 = *(_DWORD *)(a2 + 64);
    v11 = *(_DWORD *)(a2 + 68);
LABEL_16:
    *(_DWORD *)(a1 + 64) = v10;
    *(_DWORD *)(a1 + 68) = v11;
    v17 = *(unsigned int *)(a2 + 88);
    if (*(_QWORD *)(a1 + 80) >= v17)
    {
      if (!(_DWORD)v17)
      {
        v22 = 0;
LABEL_24:
        *(_DWORD *)(a1 + 88) = v22;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        v23 = *(unsigned int *)(a2 + 120);
        if (*(_QWORD *)(a1 + 112) >= v23)
        {
          if (!(_DWORD)v23)
          {
            *(_DWORD *)(a1 + 120) = 0;
            v27 = *(_DWORD *)(a2 + 144);
            v28 = (v27 << 7);
            if (*(_QWORD *)(a1 + 136) < v28)
              goto LABEL_31;
            goto LABEL_35;
          }
          v26 = *(void **)(a1 + 104);
        }
        else
        {
          v24 = *(_QWORD *)(a1 + 104);
          if (v24)
            MEMORY[0x212BC6368](v24, 0x1000C8077774924);
          v25 = (v23 + 31) & 0x1FFFFFFE0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 112) = v25;
          v26 = operator new(v25, (std::align_val_t)0x20uLL);
          *(_QWORD *)(a1 + 104) = v26;
        }
        memcpy(v26, *(const void **)(a2 + 104), v23);
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
        v27 = *(_DWORD *)(a2 + 144);
        v28 = (v27 << 7);
        if (*(_QWORD *)(a1 + 136) < v28)
        {
LABEL_31:
          v29 = *(_QWORD *)(a1 + 128);
          if (v29)
            MEMORY[0x212BC6368](v29, 0x1000C8077774924);
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 136) = v28;
          v30 = operator new(v28, (std::align_val_t)0x20uLL);
          *(_QWORD *)(a1 + 128) = v30;
          goto LABEL_37;
        }
LABEL_35:
        if (!(_DWORD)v28)
          goto LABEL_38;
        v30 = *(void **)(a1 + 128);
LABEL_37:
        memcpy(v30, *(const void **)(a2 + 128), v28);
        v27 = *(_DWORD *)(a2 + 144);
LABEL_38:
        *(_DWORD *)(a1 + 144) = v27;
        v31 = *(unsigned int *)(a2 + 168);
        if (*(_QWORD *)(a1 + 160) >= v31)
        {
          if (!(_DWORD)v31)
          {
            *(_DWORD *)(a1 + 168) = 0;
            v35 = *(unsigned int *)(a2 + 192);
            if (*(_QWORD *)(a1 + 184) < v35)
              goto LABEL_45;
            goto LABEL_49;
          }
          v34 = *(void **)(a1 + 152);
        }
        else
        {
          v32 = *(_QWORD *)(a1 + 152);
          if (v32)
            MEMORY[0x212BC6368](v32, 0x1000C8077774924);
          v33 = (v31 + 31) & 0x1FFFFFFE0;
          *(_QWORD *)(a1 + 152) = 0;
          *(_QWORD *)(a1 + 160) = v33;
          v34 = operator new(v33, (std::align_val_t)0x20uLL);
          *(_QWORD *)(a1 + 152) = v34;
        }
        memcpy(v34, *(const void **)(a2 + 152), v31);
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
        v35 = *(unsigned int *)(a2 + 192);
        if (*(_QWORD *)(a1 + 184) < v35)
        {
LABEL_45:
          v36 = *(_QWORD *)(a1 + 176);
          if (v36)
            MEMORY[0x212BC6368](v36, 0x1000C80BDFB0063);
          v37 = 2 * v35;
          v38 = (v37 + 31) & 0x3FFFFFFE0;
          *(_QWORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 184) = v38 >> 1;
          v39 = operator new(v38, (std::align_val_t)0x20uLL);
          *(_QWORD *)(a1 + 176) = v39;
          goto LABEL_51;
        }
LABEL_49:
        if (!(_DWORD)v35)
        {
          v40 = 0;
          goto LABEL_53;
        }
        v39 = *(void **)(a1 + 176);
        v37 = 2 * v35;
LABEL_51:
        memcpy(v39, *(const void **)(a2 + 176), v37);
        v40 = *(_DWORD *)(a2 + 192);
LABEL_53:
        *(_DWORD *)(a1 + 192) = v40;
        goto LABEL_54;
      }
      v21 = *(void **)(a1 + 72);
      v19 = 4 * v17;
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 72);
      if (v18)
        MEMORY[0x212BC6368](v18, 0x1000C8052888210);
      v19 = 4 * v17;
      v20 = (v19 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = v20 >> 2;
      v21 = operator new(v20, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 72) = v21;
    }
    memcpy(v21, *(const void **)(a2 + 72), v19);
    v22 = *(_DWORD *)(a2 + 88);
    goto LABEL_24;
  }
LABEL_54:
  v41 = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v41;
  return a1;
}

void sub_20F30F9B4(void **a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  void *v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  void *v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;

  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (void *)*((_QWORD *)v10 - 3);
          if (v12)
          {
            *((_QWORD *)v10 - 2) = v12;
            operator delete(v12);
          }
          v13 = *((_QWORD *)v10 - 7);
          if (v13)
            MEMORY[0x212BC6368](v13, 0x1000C80BDFB0063);
          v14 = (void *)*((_QWORD *)v10 - 14);
          if (v14)
          {
            *((_QWORD *)v10 - 13) = v14;
            operator delete(v14);
          }
          v10 -= 112;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x249249249249249)
      goto LABEL_69;
    v40 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    v41 = 2 * v40;
    if (2 * v40 <= a4)
      v41 = a4;
    v42 = v40 >= 0x124924924924924 ? 0x249249249249249 : v41;
    if (v42 > 0x249249249249249)
LABEL_69:
      sub_20E867F44();
    v43 = 112 * v42;
    v44 = (char *)operator new(112 * v42);
    *a1 = v44;
    a1[1] = v44;
    a1[2] = &v44[v43];
    if (a2 != a3)
    {
      v45 = 0;
      do
      {
        sub_20F30FEE0((uint64_t)&v44[v45], (uint64_t)&a2[v45]);
        v45 += 112;
      }
      while (&a2[v45] != a3);
      v44 += v45;
    }
    a1[1] = v44;
    return;
  }
  v15 = (char *)a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 4) >= a4)
  {
    if (a2 == a3)
    {
LABEL_61:
      while (v15 != v9)
      {
        v48 = (void *)*((_QWORD *)v15 - 3);
        if (v48)
        {
          *((_QWORD *)v15 - 2) = v48;
          operator delete(v48);
        }
        v49 = *((_QWORD *)v15 - 7);
        if (v49)
          MEMORY[0x212BC6368](v49, 0x1000C80BDFB0063);
        v50 = (void *)*((_QWORD *)v15 - 14);
        if (v50)
        {
          *((_QWORD *)v15 - 13) = v50;
          operator delete(v50);
        }
        v15 -= 112;
      }
      a1[1] = v9;
      return;
    }
    v29 = 0;
    while (1)
    {
      if (a2 == v9)
        goto LABEL_31;
      v35 = &v9[v29];
      v36 = &a2[v29];
      sub_20F310070(&v9[v29], *(char **)&a2[v29], *(char **)&a2[v29 + 8], (uint64_t)(*(_QWORD *)&a2[v29 + 8] - *(_QWORD *)&a2[v29]) >> 6);
      v37 = *(_OWORD *)&a2[v29 + 24];
      *(_OWORD *)(v35 + 36) = *(_OWORD *)&a2[v29 + 36];
      *(_OWORD *)(v35 + 24) = v37;
      v38 = *(unsigned int *)&a2[v29 + 72];
      if (*(_QWORD *)&v9[v29 + 64] >= v38)
      {
        if (!(_DWORD)v38)
        {
          v33 = 0;
          goto LABEL_30;
        }
        v32 = (void *)*((_QWORD *)v35 + 7);
        v30 = 2 * v38;
      }
      else
      {
        v39 = *((_QWORD *)v35 + 7);
        if (v39)
          MEMORY[0x212BC6368](v39, 0x1000C80BDFB0063);
        v30 = 2 * v38;
        v31 = (v30 + 31) & 0x3FFFFFFE0;
        *((_QWORD *)v35 + 7) = 0;
        *((_QWORD *)v35 + 8) = v31 >> 1;
        v32 = operator new(v31, (std::align_val_t)0x20uLL);
        *((_QWORD *)v35 + 7) = v32;
      }
      memcpy(v32, *((const void **)v36 + 7), v30);
      v33 = *((_DWORD *)v36 + 18);
LABEL_30:
      v34 = &v9[v29];
      *((_DWORD *)v34 + 18) = v33;
      *((_DWORD *)v34 + 20) = *(_DWORD *)&a2[v29 + 80];
      sub_20E867E00(&v9[v29 + 88], *(char **)&a2[v29 + 88], *(char **)&a2[v29 + 96], (uint64_t)(*(_QWORD *)&a2[v29 + 96] - *(_QWORD *)&a2[v29 + 88]) >> 2);
LABEL_31:
      v29 += 112;
      if (&a2[v29] == a3)
      {
        v15 = (char *)a1[1];
        v9 += v29;
        goto LABEL_61;
      }
    }
  }
  v16 = &a2[16 * ((v15 - v9) >> 4)];
  if (v15 == v9)
    goto LABEL_54;
  v17 = 0;
  v18 = 16 * ((v15 - v9) >> 4);
  do
  {
    if (a2 != v9)
    {
      v24 = &v9[v17];
      v25 = &a2[v17];
      sub_20F310070(&v9[v17], *(char **)&a2[v17], *(char **)&a2[v17 + 8], (uint64_t)(*(_QWORD *)&a2[v17 + 8] - *(_QWORD *)&a2[v17]) >> 6);
      v26 = *(_OWORD *)&a2[v17 + 24];
      *(_OWORD *)(v24 + 36) = *(_OWORD *)&a2[v17 + 36];
      *(_OWORD *)(v24 + 24) = v26;
      v27 = *(unsigned int *)&a2[v17 + 72];
      if (*(_QWORD *)&v9[v17 + 64] >= v27)
      {
        if (!(_DWORD)v27)
        {
          v22 = 0;
          goto LABEL_17;
        }
        v21 = (void *)*((_QWORD *)v24 + 7);
        v19 = 2 * v27;
      }
      else
      {
        v28 = *((_QWORD *)v24 + 7);
        if (v28)
          MEMORY[0x212BC6368](v28, 0x1000C80BDFB0063);
        v19 = 2 * v27;
        v20 = (v19 + 31) & 0x3FFFFFFE0;
        *((_QWORD *)v24 + 7) = 0;
        *((_QWORD *)v24 + 8) = v20 >> 1;
        v21 = operator new(v20, (std::align_val_t)0x20uLL);
        *((_QWORD *)v24 + 7) = v21;
      }
      memcpy(v21, *((const void **)v25 + 7), v19);
      v22 = *((_DWORD *)v25 + 18);
LABEL_17:
      v23 = &v9[v17];
      *((_DWORD *)v23 + 18) = v22;
      *((_DWORD *)v23 + 20) = *(_DWORD *)&a2[v17 + 80];
      sub_20E867E00(&v9[v17 + 88], *(char **)&a2[v17 + 88], *(char **)&a2[v17 + 96], (uint64_t)(*(_QWORD *)&a2[v17 + 96] - *(_QWORD *)&a2[v17 + 88]) >> 2);
    }
    v17 += 112;
  }
  while (v18 != v17);
  v9 = (char *)a1[1];
LABEL_54:
  v46 = v9;
  if (v16 != a3)
  {
    v47 = 0;
    do
    {
      sub_20F30FEE0((uint64_t)&v9[v47], (uint64_t)&v16[v47]);
      v47 += 112;
    }
    while (&v16[v47] != a3);
    v46 = &v9[v47];
  }
  a1[1] = v46;
}

void sub_20F30FE74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  if (v3)
  {
    v5 = v2 - 56;
    do
    {
      v6 = v5 + v3;
      v7 = *(void **)(v5 + v3 + 32);
      if (v7)
      {
        *(_QWORD *)(v6 + 40) = v7;
        operator delete(v7);
      }
      v8 = *(_QWORD *)(v5 + v3);
      if (v8)
        MEMORY[0x212BC6368](v8, 0x1000C80BDFB0063);
      v9 = *(void **)(v6 - 56);
      if (v9)
      {
        *(_QWORD *)(v5 + v3 - 48) = v9;
        operator delete(v9);
      }
      v3 -= 112;
    }
    while (v3);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F30FEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[64 * (v6 >> 6)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v9;
  v10 = *(unsigned int *)(a2 + 72);
  v11 = (2 * v10 + 31) & 0x3FFFFFFE0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v11 >> 1;
  v12 = operator new(v11, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 56) = v12;
  if ((_DWORD)v10)
    memcpy(v12, *(const void **)(a2 + 56), 2 * v10);
  v13 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 72) = v10;
  *(_DWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v15 = *(_BYTE **)(a2 + 88);
  v14 = *(_BYTE **)(a2 + 96);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_20E867F44();
    v17 = (char *)operator new(v14 - v15);
    *(_QWORD *)(a1 + 88) = v17;
    *(_QWORD *)(a1 + 96) = v17;
    v18 = &v17[4 * (v16 >> 2)];
    *(_QWORD *)(a1 + 104) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 96) = v18;
  }
  return a1;
}

void sub_20F310000(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F310070(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 6)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_22;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_22:
      sub_20E867F44();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 6;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[64 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

double sub_20F3101B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  result = *(double *)(a2 + 64);
  *(double *)(a1 + 64) = result;
  *(_QWORD *)(a2 + 64) = 0;
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a2 + 72) = v10;
  *(_QWORD *)(a2 + 80) = v11;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a2 + 104) = v13;
  *(_QWORD *)(a2 + 112) = v14;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a2 + 128) = v16;
  *(_QWORD *)(a2 + 136) = v17;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  v19 = *(_QWORD *)(a1 + 152);
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)(a2 + 152) = v19;
  *(_QWORD *)(a2 + 160) = v20;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = 0;
  v22 = *(_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 184);
  v24 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v24;
  *(_QWORD *)(a2 + 176) = v22;
  *(_QWORD *)(a2 + 184) = v23;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  v25 = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v25;
  return result;
}

__n128 sub_20F3102A4(void **a1, __n128 *a2)
{
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __n128 result;

  v4 = (char *)*a1;
  if (*a1)
  {
    v5 = (char *)a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v8 = *((_QWORD *)v5 - 7);
        if (v8)
          MEMORY[0x212BC6368](v8, 0x1000C80BDFB0063);
        v9 = (void *)*((_QWORD *)v5 - 14);
        if (v9)
        {
          *((_QWORD *)v5 - 13) = v9;
          operator delete(v9);
        }
        v5 -= 112;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char **sub_20F310360(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 68);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 -= 552;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v12 = *(_OWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 96);
  v13 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)a1 + 9) = v12;
  *((_OWORD *)a1 + 6) = v14;
  *((_OWORD *)a1 + 7) = v13;
  v16 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 192);
  v17 = *(_OWORD *)(a2 + 160);
  a1[26] = *(char **)(a2 + 208);
  *((_OWORD *)a1 + 11) = v16;
  *((_OWORD *)a1 + 12) = v15;
  *((_OWORD *)a1 + 10) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  v19 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)a1 + 5) = v18;
  *((_OWORD *)a1 + 3) = v19;
  memcpy(a1 + 27, (const void *)(a2 + 216), 0x120uLL);
  memcpy(a1 + 63, (const void *)(a2 + 504), 0x120uLL);
  v20 = a1[99];
  if (v20)
  {
    a1[100] = v20;
    operator delete(v20);
    a1[99] = 0;
    a1[100] = 0;
    a1[101] = 0;
  }
  a1[99] = *(char **)(a2 + 792);
  a1[100] = *(char **)(a2 + 800);
  a1[101] = *(char **)(a2 + 808);
  *(_QWORD *)(a2 + 808) = 0;
  *(_OWORD *)(a2 + 792) = 0u;
  v21 = *(_OWORD *)(a2 + 816);
  a1[104] = *(char **)(a2 + 832);
  *((_OWORD *)a1 + 51) = v21;
  v22 = *(_OWORD *)(a2 + 840);
  a1[107] = *(char **)(a2 + 856);
  *(_OWORD *)(a1 + 105) = v22;
  *((_OWORD *)a1 + 54) = *(_OWORD *)(a2 + 864);
  v23 = *(_OWORD *)(a2 + 880);
  a1[112] = *(char **)(a2 + 896);
  *((_OWORD *)a1 + 55) = v23;
  v24 = a1[113];
  if (v24)
  {
    a1[114] = v24;
    operator delete(v24);
    a1[113] = 0;
    a1[114] = 0;
    a1[115] = 0;
  }
  a1[113] = *(char **)(a2 + 904);
  a1[114] = *(char **)(a2 + 912);
  a1[115] = *(char **)(a2 + 920);
  *(_QWORD *)(a2 + 904) = 0;
  *(_QWORD *)(a2 + 912) = 0;
  *(_QWORD *)(a2 + 920) = 0;
  v25 = (char *)(a1 + 117);
  sub_20E86872C((uint64_t)(a1 + 116), a1[117]);
  a1[116] = *(char **)(a2 + 928);
  v26 = *(_QWORD *)(a2 + 936);
  a1[117] = (char *)v26;
  v27 = *(char **)(a2 + 944);
  a1[118] = v27;
  if (v27)
  {
    *(_QWORD *)(v26 + 16) = v25;
    *(_QWORD *)(a2 + 928) = a2 + 936;
    *(_QWORD *)(a2 + 936) = 0;
    *(_QWORD *)(a2 + 944) = 0;
  }
  else
  {
    a1[116] = v25;
  }
  v28 = *(_OWORD *)(a2 + 952);
  v29 = *(_OWORD *)(a2 + 968);
  a1[123] = *(char **)(a2 + 984);
  *(_OWORD *)(a1 + 119) = v28;
  *(_OWORD *)(a1 + 121) = v29;
  return a1;
}

void sub_20F3105EC(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  void **v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  char v36;
  int v37;
  uint64_t v38;
  char v39;
  __int128 *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  int v50;
  void *v51;
  void *v52;
  void *v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _BYTE v59[15];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[15];

  v57 = *a1;
  v58 = *((_QWORD *)a1 + 2);
  v4 = (uint64_t)a1 + 24;
  v5 = *((_QWORD *)a1 + 3);
  *(_QWORD *)v76 = *((_QWORD *)a1 + 4);
  *(_QWORD *)&v76[7] = *(_QWORD *)((char *)a1 + 39);
  v6 = *((_BYTE *)a1 + 47);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  v7 = *((_QWORD *)a1 + 6);
  v8 = (__int128 *)((char *)a1 + 56);
  v70 = *(__int128 *)((char *)a1 + 88);
  v71 = *(__int128 *)((char *)a1 + 104);
  v68 = *(__int128 *)((char *)a1 + 56);
  v69 = *(__int128 *)((char *)a1 + 72);
  v74 = *(__int128 *)((char *)a1 + 152);
  v75 = *(__int128 *)((char *)a1 + 168);
  v72 = *(__int128 *)((char *)a1 + 120);
  v73 = *(__int128 *)((char *)a1 + 136);
  v9 = (__int128 *)((char *)a1 + 184);
  v62 = *(__int128 *)((char *)a1 + 216);
  v63 = *(__int128 *)((char *)a1 + 232);
  v60 = *(__int128 *)((char *)a1 + 184);
  v61 = *(__int128 *)((char *)a1 + 200);
  v66 = *(__int128 *)((char *)a1 + 280);
  v67 = *(__int128 *)((char *)a1 + 296);
  v64 = *(__int128 *)((char *)a1 + 248);
  v65 = *(__int128 *)((char *)a1 + 264);
  v10 = (uint64_t)a1 + 312;
  v56 = *((_QWORD *)a1 + 41);
  v55 = *(__int128 *)((char *)a1 + 312);
  v11 = *((unsigned __int8 *)a1 + 360);
  if (*((_BYTE *)a1 + 360))
  {
    v12 = (void *)*((_QWORD *)a1 + 42);
    *(_QWORD *)v59 = *((_QWORD *)a1 + 43);
    *(_QWORD *)&v59[7] = *(_QWORD *)((char *)a1 + 351);
    v54 = *((_BYTE *)a1 + 359);
    *((_QWORD *)a1 + 43) = 0;
    *((_QWORD *)a1 + 44) = 0;
    *((_QWORD *)a1 + 42) = 0;
    v13 = 1;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = *((_BYTE *)a1 + 368);
  v15 = *((_DWORD *)a2 + 4);
  *a1 = *a2;
  *((_DWORD *)a1 + 4) = v15;
  v16 = *((_QWORD *)a2 + 5);
  *(_OWORD *)v4 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v4 + 16) = v16;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  v17 = *(__int128 *)((char *)a2 + 56);
  v18 = *(__int128 *)((char *)a2 + 72);
  v19 = *(__int128 *)((char *)a2 + 104);
  v8[2] = *(__int128 *)((char *)a2 + 88);
  v8[3] = v19;
  *v8 = v17;
  v8[1] = v18;
  v20 = *(__int128 *)((char *)a2 + 120);
  v21 = *(__int128 *)((char *)a2 + 136);
  v22 = *(__int128 *)((char *)a2 + 168);
  v8[6] = *(__int128 *)((char *)a2 + 152);
  v8[7] = v22;
  v8[4] = v20;
  v8[5] = v21;
  v23 = (__int128 *)((char *)a2 + 184);
  v24 = *(__int128 *)((char *)a2 + 264);
  v25 = *(__int128 *)((char *)a2 + 296);
  v26 = *(__int128 *)((char *)a2 + 248);
  v9[6] = *(__int128 *)((char *)a2 + 280);
  v9[7] = v25;
  v9[4] = v26;
  v9[5] = v24;
  v27 = *(__int128 *)((char *)a2 + 184);
  v28 = *(__int128 *)((char *)a2 + 200);
  v29 = *(__int128 *)((char *)a2 + 232);
  v9[2] = *(__int128 *)((char *)a2 + 216);
  v9[3] = v29;
  *v9 = v27;
  v9[1] = v28;
  v30 = (uint64_t)a2 + 312;
  v31 = *(__int128 *)((char *)a2 + 312);
  *(_BYTE *)(v10 + 16) = *((_BYTE *)a2 + 328);
  *(_OWORD *)v10 = v31;
  v32 = (void **)(a1 + 21);
  v33 = a2 + 21;
  if (*((unsigned __int8 *)a1 + 360) == *((unsigned __int8 *)a2 + 360))
  {
    if (*((_BYTE *)a1 + 360))
    {
      if (*((char *)a1 + 359) < 0)
      {
        v51 = v12;
        v46 = v14;
        v48 = v6;
        operator delete(*v32);
        v33 = a2 + 21;
        v14 = v46;
        v6 = v48;
        v12 = v51;
      }
      v34 = *v33;
      *((_QWORD *)a1 + 44) = *((_QWORD *)v33 + 2);
      *(_OWORD *)v32 = v34;
      *((_BYTE *)a2 + 359) = 0;
      *((_BYTE *)a2 + 336) = 0;
    }
  }
  else if (*((_BYTE *)a1 + 360))
  {
    if (*((char *)a1 + 359) < 0)
    {
      v52 = v12;
      v47 = v14;
      v49 = v6;
      operator delete(*v32);
      v33 = a2 + 21;
      v14 = v47;
      v6 = v49;
      v12 = v52;
    }
    *((_BYTE *)a1 + 360) = 0;
  }
  else
  {
    v35 = *v33;
    *((_QWORD *)a1 + 44) = *((_QWORD *)a2 + 44);
    *(_OWORD *)v32 = v35;
    *((_QWORD *)a2 + 43) = 0;
    *((_QWORD *)a2 + 44) = 0;
    *(_QWORD *)v33 = 0;
    *((_BYTE *)a1 + 360) = 1;
  }
  *((_BYTE *)a1 + 368) = *((_BYTE *)a2 + 368);
  *a2 = v57;
  *((_DWORD *)a2 + 4) = v58;
  if (*((char *)a2 + 47) < 0)
  {
    v53 = v12;
    v36 = v14;
    v50 = v13;
    v37 = v11;
    v38 = v7;
    v39 = v6;
    v40 = v33;
    operator delete(*((void **)a2 + 3));
    v33 = v40;
    v30 = (uint64_t)a2 + 312;
    v6 = v39;
    v7 = v38;
    v11 = v37;
    v13 = v50;
    v14 = v36;
    v12 = v53;
  }
  *((_QWORD *)a2 + 3) = v5;
  *((_QWORD *)a2 + 4) = *(_QWORD *)v76;
  *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)&v76[7];
  *((_BYTE *)a2 + 47) = v6;
  *((_QWORD *)a2 + 6) = v7;
  *(__int128 *)((char *)a2 + 120) = v72;
  *(__int128 *)((char *)a2 + 136) = v73;
  *(__int128 *)((char *)a2 + 152) = v74;
  *(__int128 *)((char *)a2 + 168) = v75;
  *(__int128 *)((char *)a2 + 56) = v68;
  *(__int128 *)((char *)a2 + 72) = v69;
  *(__int128 *)((char *)a2 + 88) = v70;
  *(__int128 *)((char *)a2 + 104) = v71;
  *(__int128 *)((char *)a2 + 280) = v66;
  *(__int128 *)((char *)a2 + 296) = v67;
  *(__int128 *)((char *)a2 + 248) = v64;
  *(__int128 *)((char *)a2 + 264) = v65;
  *(__int128 *)((char *)a2 + 216) = v62;
  *(__int128 *)((char *)a2 + 232) = v63;
  *v23 = v60;
  *(__int128 *)((char *)a2 + 200) = v61;
  *(_BYTE *)(v30 + 16) = v56;
  *(_OWORD *)v30 = v55;
  if (*((unsigned __int8 *)a2 + 360) == v13)
  {
    v41 = v54;
    if (*((_BYTE *)a2 + 360))
    {
      if (*((char *)a2 + 359) < 0)
      {
        v42 = v12;
        v43 = v14;
        operator delete(*(void **)v33);
        v14 = v43;
        v12 = v42;
      }
      *((_QWORD *)a2 + 42) = v12;
      *((_QWORD *)a2 + 43) = *(_QWORD *)v59;
      *(_QWORD *)((char *)a2 + 351) = *(_QWORD *)&v59[7];
      *((_BYTE *)a2 + 359) = v54;
      goto LABEL_29;
    }
  }
  else
  {
    v41 = v54;
    if (!*((_BYTE *)a2 + 360))
    {
      *((_QWORD *)a2 + 42) = v12;
      *((_QWORD *)a2 + 43) = *(_QWORD *)v59;
      *(_QWORD *)((char *)a2 + 351) = *(_QWORD *)&v59[7];
      *((_BYTE *)a2 + 359) = v54;
      *((_BYTE *)a2 + 360) = 1;
LABEL_29:
      *((_BYTE *)a2 + 368) = v14;
      return;
    }
    if (*((char *)a2 + 359) < 0)
    {
      v44 = v12;
      v45 = v14;
      operator delete(*(void **)v33);
      v14 = v45;
      v12 = v44;
    }
    *((_BYTE *)a2 + 360) = 0;
  }
  *((_BYTE *)a2 + 368) = v14;
  if (v11 && v41 < 0)
    operator delete(v12);
}

void sub_20F310A74()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F310A88()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9FD2E8;
  return result;
}

void sub_20F310AAC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9FD2E8;
}

BOOL sub_20F310AC4(uint64_t a1, unsigned __int8 *a2)
{
  return (a2[2] | *a2) != 0;
}

uint64_t sub_20F310ADC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3vio12area_mapping16MappingInterface32ProcessCollaborativeMappingQueueEvENK3$_0clINS0_13map"
                     "ping_types12CMDataTraitsINS0_20RelocalizationResultEEEEEDaRKT_EUlRKNS5_16CMCallbackReturnIS7_EEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3vio12area_mapping16MappingInterface32ProcessCollaborativeMappingQueueEvENK3$_0c"
                                "lINS0_13mapping_types12CMDataTraitsINS0_20RelocalizationResultEEEEEDaRKT_EUlRKNS5_16CMCa"
                                "llbackReturnIS7_EEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3vio12area_mapping16MappingInterface32ProcessCollaborativeMappingQueueEvENK3$_0clINS0_13mapping_types12CMDataTraitsINS0_20RelocalizationResultEEEEEDaRKT_EUlRKNS5_16CMCallbackReturnIS7_EEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3vio12area_mapping16MappingInterface32ProcessCollaborativeMappingQueueEvENK3$_0clINS0_13mapping_types12CMDataTraitsINS0_20RelocalizationResultEEEEEDaRKT_EUlRKNS5_16CMCallbackReturnIS7_EEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F310B48()
{
  return &unk_24C9FD358;
}

uint64_t sub_20F310B54(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  sub_20F310CC8((_QWORD *)a1, a2);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  sub_20F310F9C(a1 + 168, (uint64_t *)(a2 + 168));
  v4 = *(void **)(a1 + 208);
  if (v4)
  {
    *(_QWORD *)(a1 + 216) = v4;
    operator delete(v4);
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  v5 = a1 + 240;
  sub_20E86872C(a1 + 232, *(_QWORD **)(a1 + 240));
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v6 = (_QWORD *)(a2 + 240);
  v7 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v7;
  v8 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v8;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(a2 + 232) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 248) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v5;
  }
  v9 = *(_OWORD *)(a2 + 256);
  v10 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v9;
  *(_OWORD *)(a1 + 272) = v10;
  v11 = a1 + 304;
  sub_20E86872C(a1 + 296, *(_QWORD **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v12 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = v12;
  v13 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v13;
  if (v13)
  {
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(a2 + 296) = a2 + 304;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 296) = v11;
  }
  v14 = *(_OWORD *)(a2 + 320);
  v15 = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v14;
  *(_OWORD *)(a1 + 336) = v15;
  sub_20EB0F04C(a1 + 360, (uint64_t *)(a2 + 360));
  v16 = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = v16;
  v17 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 424) = 0;
  v18 = *(uint64_t **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v17;
  if (v18)
  {
    v19 = sub_20E8E95B0(v18);
    MEMORY[0x212BC6398](v19, 0x20C40313AD07FLL);
  }
  return a1;
}

_QWORD *sub_20F310CC8(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  sub_20E99090C((uint64_t)a1, (uint64_t *)a2);
  v4 = (void **)(a1 + 5);
  v5 = a1[5];
  if (v5)
  {
    v6 = a1[6];
    v7 = (void *)a1[5];
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v6 - 16);
          v8 = *(void **)(v6 - 24);
          if (v10 != v9)
          {
            do
            {
              if (*(char *)(v10 - 9) < 0)
                operator delete(*(void **)(v10 - 32));
              v10 -= 32;
            }
            while (v10 != v9);
            v8 = *(void **)(v6 - 24);
          }
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v8);
        }
        v6 -= 40;
      }
      while (v6 != v5);
      v7 = *v4;
    }
    a1[6] = v5;
    operator delete(v7);
    *v4 = 0;
    a1[6] = 0;
    a1[7] = 0;
  }
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v11 = (void **)(a1 + 8);
  v12 = a1[8];
  if (v12)
  {
    v13 = a1[9];
    v14 = (void *)a1[8];
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0)
          operator delete(*(void **)(v13 - 24));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = *v11;
    }
    a1[9] = v12;
    operator delete(v14);
    *v11 = 0;
    a1[9] = 0;
    a1[10] = 0;
  }
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  a1[10] = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  sub_20F310E24(a1 + 11, a2 + 88);
  return a1;
}

_QWORD *sub_20F310E24(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v4 = (void **)*a1;
  if (*a1)
  {
    v5 = (void **)a1[1];
    v6 = (void **)*a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = (void **)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = (void **)(a1 + 3);
  v8 = a1[3];
  if (v8)
  {
    v9 = a1[4];
    v10 = (void *)a1[3];
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = *v7;
    }
    a1[4] = v8;
    operator delete(v10);
    *v7 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = (void **)(a1 + 6);
  v12 = a1[6];
  if (v12)
  {
    v13 = a1[7];
    v14 = (void *)a1[6];
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0)
          operator delete(*(void **)(v13 - 24));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = *v11;
    }
    a1[7] = v12;
    operator delete(v14);
    *v11 = 0;
    a1[7] = 0;
    a1[8] = 0;
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return a1;
}

void sub_20F310F9C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (_QWORD *)*v4;
        v17 = (void *)v4[9];
        if (v17)
        {
          v4[10] = v17;
          operator delete(v17);
        }
        v18 = (void *)v4[6];
        if (v18)
        {
          v4[7] = v18;
          operator delete(v18);
        }
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void sub_20F3110B0(__int128 *a1, __int128 *a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[288];
  _BYTE v47[288];
  uint64_t v48;
  char v49;
  _BYTE v50[23];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v43 = a1[8];
  v44 = a1[9];
  v45 = *((_QWORD *)a1 + 20);
  v39 = a1[4];
  v40 = a1[5];
  v41 = a1[6];
  v42 = a1[7];
  v35 = *a1;
  v36 = a1[1];
  v4 = (char *)a1 + 168;
  v37 = a1[2];
  v38 = a1[3];
  memcpy(v46, (char *)a1 + 168, sizeof(v46));
  memcpy(v47, (char *)a1 + 456, sizeof(v47));
  v5 = *(__int128 *)((char *)a1 + 744);
  v27 = *((_QWORD *)a1 + 95);
  v33 = a1[48];
  v6 = a1[52];
  v30 = a1[51];
  v31 = *(__int128 *)((char *)a1 + 792);
  *(__int128 *)((char *)a1 + 744) = 0u;
  *((_QWORD *)a1 + 95) = 0;
  v34 = *((_QWORD *)a1 + 98);
  v32 = *((_QWORD *)a1 + 101);
  v28 = v5;
  v29 = v6;
  if (*((_BYTE *)a1 + 872))
  {
    v24 = *((_BYTE *)a1 + 848);
    *(_QWORD *)&v50[15] = *((_QWORD *)a1 + 108);
    *(_OWORD *)v50 = *(__int128 *)((char *)a1 + 849);
    v25 = 1;
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  v48 = *((_QWORD *)a1 + 110);
  v49 = *((_BYTE *)a1 + 888);
  v26 = *((_BYTE *)a1 + 896);
  v8 = a2[1];
  v7 = a2[2];
  *a1 = *a2;
  a1[1] = v8;
  a1[2] = v7;
  v9 = a2[6];
  v11 = a2[3];
  v10 = a2[4];
  a1[5] = a2[5];
  a1[6] = v9;
  a1[3] = v11;
  a1[4] = v10;
  v13 = a2[8];
  v12 = a2[9];
  v14 = a2[7];
  *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
  a1[8] = v13;
  a1[9] = v12;
  a1[7] = v14;
  memcpy(v4, (char *)a2 + 168, 0x120uLL);
  memcpy((char *)a1 + 456, (char *)a2 + 456, 0x138uLL);
  *(__int128 *)((char *)a2 + 744) = 0u;
  *((_QWORD *)a2 + 95) = 0;
  v15 = *((_QWORD *)a2 + 98);
  a1[48] = a2[48];
  *((_QWORD *)a1 + 98) = v15;
  v16 = *((_QWORD *)a2 + 101);
  *(__int128 *)((char *)a1 + 792) = *(__int128 *)((char *)a2 + 792);
  *((_QWORD *)a1 + 101) = v16;
  a1[51] = a2[51];
  v17 = *((_QWORD *)a2 + 104);
  *((_DWORD *)a1 + 210) = *((_DWORD *)a2 + 210);
  *((_QWORD *)a1 + 104) = v17;
  v18 = a1 + 53;
  v19 = a2 + 53;
  if (*((unsigned __int8 *)a1 + 872) == *((unsigned __int8 *)a2 + 872))
  {
    if (*((_BYTE *)a1 + 872))
    {
      v20 = *v19;
      *((_QWORD *)a1 + 108) = *((_QWORD *)a2 + 108);
      *v18 = v20;
    }
  }
  else if (*((_BYTE *)a1 + 872))
  {
    *((_BYTE *)a1 + 872) = 0;
  }
  else
  {
    v21 = *v19;
    *((_QWORD *)a1 + 108) = *((_QWORD *)a2 + 108);
    *v18 = v21;
    *((_BYTE *)a1 + 872) = 1;
  }
  v22 = *((_QWORD *)a2 + 110);
  *((_BYTE *)a1 + 888) = *((_BYTE *)a2 + 888);
  *((_QWORD *)a1 + 110) = v22;
  *((_BYTE *)a1 + 896) = *((_BYTE *)a2 + 896);
  a2[8] = v43;
  a2[9] = v44;
  *((_QWORD *)a2 + 20) = v45;
  a2[4] = v39;
  a2[5] = v40;
  a2[6] = v41;
  a2[7] = v42;
  *a2 = v35;
  a2[1] = v36;
  a2[2] = v37;
  a2[3] = v38;
  memcpy((char *)a2 + 168, v46, 0x120uLL);
  memcpy((char *)a2 + 456, v47, 0x120uLL);
  v23 = (void *)*((_QWORD *)a2 + 93);
  if (v23)
  {
    *((_QWORD *)a2 + 94) = v23;
    operator delete(v23);
  }
  *(__int128 *)((char *)a2 + 744) = v28;
  *((_QWORD *)a2 + 95) = v27;
  a2[48] = v33;
  *((_QWORD *)a2 + 98) = v34;
  *(__int128 *)((char *)a2 + 792) = v31;
  *((_QWORD *)a2 + 101) = v32;
  a2[51] = v30;
  *((_DWORD *)a2 + 210) = DWORD2(v29);
  *((_QWORD *)a2 + 104) = v29;
  if (*((unsigned __int8 *)a2 + 872) == v25)
  {
    if (*((_BYTE *)a2 + 872))
    {
      *((_BYTE *)a2 + 848) = v24;
      *((_QWORD *)a2 + 108) = *(_QWORD *)&v50[15];
      *(__int128 *)((char *)a2 + 849) = *(_OWORD *)v50;
    }
  }
  else if (*((_BYTE *)a2 + 872))
  {
    *((_BYTE *)a2 + 872) = 0;
  }
  else
  {
    *((_BYTE *)a2 + 848) = v24;
    *((_QWORD *)a2 + 108) = *(_QWORD *)&v50[15];
    *(__int128 *)((char *)a2 + 849) = *(_OWORD *)v50;
    *((_BYTE *)a2 + 872) = 1;
  }
  *((_QWORD *)a2 + 110) = v48;
  *((_BYTE *)a2 + 888) = v49;
  *((_BYTE *)a2 + 896) = v26;
}

void sub_20F3114A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  void *__p[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  char v33;

  *(_OWORD *)__p = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v5 = (_QWORD *)(a1 + 24);
  v25 = v4;
  v26 = *(_QWORD **)(a1 + 24);
  v7 = (_QWORD *)(a1 + 32);
  v6 = *(_QWORD **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v27 = v6;
  v28 = v8;
  if (v8)
  {
    v6[2] = &v27;
    *v5 = v7;
    *v7 = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    v26 = &v27;
  }
  v9 = *(_OWORD *)(a1 + 64);
  v29 = *(_OWORD *)(a1 + 48);
  v30 = v9;
  v31 = *(_OWORD *)(a1 + 80);
  v32 = *(_DWORD *)(a1 + 96);
  v33 = *(_BYTE *)(a1 + 104);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_20E86872C(a1 + 24, *(_QWORD **)(a1 + 32));
  v10 = a2 + 3;
  *(_QWORD *)(a1 + 24) = a2[3];
  v12 = a2 + 4;
  v11 = a2[4];
  *(_QWORD *)(a1 + 32) = v11;
  v13 = a2[5];
  *(_QWORD *)(a1 + 40) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v7;
    *v10 = v12;
    *v12 = 0;
    a2[5] = 0;
  }
  else
  {
    *v5 = v7;
  }
  v14 = *((_OWORD *)a2 + 3);
  v15 = *((_OWORD *)a2 + 4);
  v16 = *((_OWORD *)a2 + 5);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  v17 = *a2;
  if (*a2)
  {
    v18 = a2[1];
    v19 = (void *)*a2;
    if (v18 != v17)
    {
      do
      {
        v20 = *(void **)(v18 - 24);
        if (v20)
        {
          *(_QWORD *)(v18 - 16) = v20;
          operator delete(v20);
        }
        v18 -= 48;
      }
      while (v18 != v17);
      v19 = (void *)*a2;
    }
    a2[1] = v17;
    operator delete(v19);
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  a2[2] = v25;
  sub_20E86872C((uint64_t)(a2 + 3), (_QWORD *)a2[4]);
  v21 = v27;
  a2[3] = (uint64_t)v26;
  a2[4] = (uint64_t)v21;
  v22 = v28;
  a2[5] = v28;
  if (v22)
  {
    v21[2] = v12;
    v21 = 0;
    v26 = &v27;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    *v10 = v12;
  }
  v23 = v30;
  *((_OWORD *)a2 + 3) = v29;
  *((_OWORD *)a2 + 4) = v23;
  *((_OWORD *)a2 + 5) = v31;
  *((_DWORD *)a2 + 24) = v32;
  *((_BYTE *)a2 + 104) = v33;
  sub_20E86872C((uint64_t)&v26, v21);
}

uint64_t sub_20F3116F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 64;
        *(_QWORD *)(a1 + 16) = v2 - 64;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 64;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F31175C(void **a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char **v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char **v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _BYTE *v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  void *v47;
  uint64_t v49;
  char *v50;
  void **v51;
  char *v52;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-v14] >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v7) >> 3)) >= a5)
    {
      v19 = (uint64_t)&a3[3 * a5];
      v20 = *(_QWORD **)(v11 - 8);
    }
    else
    {
      v19 = (uint64_t)&a3[(uint64_t)(v14 - v7) >> 3];
      v20 = sub_20F311BAC(v11, v19, a4, *(_QWORD **)(v11 - 8));
      a1[1] = v20;
      if ((uint64_t)(v14 - v7) < 1)
        return v7;
    }
    v21 = (_QWORD *)(v7 + 24 * a5);
    v22 = &v20[-3 * a5];
    v23 = v20;
    if ((unint64_t)v22 < v14)
    {
      v23 = v20;
      do
      {
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        *(_OWORD *)v23 = *(_OWORD *)v22;
        v23[2] = v22[2];
        *v22 = 0;
        v22[1] = 0;
        v22[2] = 0;
        v23 += 3;
        v22 += 3;
      }
      while ((unint64_t)v22 < v14);
    }
    a1[1] = v23;
    if (v20 != v21)
    {
      v24 = (void **)(v20 - 3);
      v25 = 8 * (v20 - v21);
      do
      {
        v27 = *v24;
        if (*v24)
        {
          v24[1] = v27;
          operator delete(v27);
          *v24 = 0;
          v24[1] = 0;
          v24[2] = 0;
        }
        v26 = v7 + v25 - 24;
        *(_OWORD *)v24 = *(_OWORD *)v26;
        v24[2] = *(void **)(v7 + v25 - 8);
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_QWORD *)(v26 + 16) = 0;
        v24 -= 3;
        v25 -= 24;
      }
      while (v25);
    }
    if ((char **)v19 != v9)
    {
      v28 = (char **)v7;
      do
      {
        if (v9 != v28)
          sub_20EDB6088(v28, *v9, v9[1], (v9[1] - *v9) >> 5);
        v9 += 3;
        v28 += 3;
      }
      while (v9 != (char **)v19);
    }
    return v7;
  }
  v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (_QWORD)v5) >> 3);
  if (v15 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v5) >> 3);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v15;
  v51 = a1;
  if (v17)
  {
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v18 = (char *)operator new(24 * v17);
  }
  else
  {
    v18 = 0;
  }
  v52 = &v18[24 * v17];
  v30 = 24 * a5;
  v31 = &v18[24 * v6 + 24 * a5];
  v49 = v6;
  v50 = &v18[24 * v6];
  v32 = v50;
  do
  {
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = 0;
    v35 = *v9;
    v34 = v9[1];
    v36 = v34 - *v9;
    if (v34 != *v9)
    {
      if (v36 < 0)
        sub_20E867F44();
      v37 = (char *)operator new(v34 - *v9);
      *(_QWORD *)v32 = v37;
      *((_QWORD *)v32 + 1) = v37;
      v33 = &v37[32 * (v36 >> 5)];
      *((_QWORD *)v32 + 2) = v33;
      memcpy(v37, v35, v36);
      *((_QWORD *)v32 + 1) = v33;
    }
    v32 += 24;
    v9 += 3;
    v30 -= 24;
  }
  while (v30);
  v29 = v50;
  v38 = (char *)*v51;
  v39 = v50;
  if (*v51 != (void *)v7)
  {
    v40 = 24 * v49;
    do
    {
      v41 = &v18[v40];
      v42 = &v5[v40];
      *(_OWORD *)(v41 - 24) = *(_OWORD *)&v5[v40 - 24];
      *((_QWORD *)v41 - 1) = *(_QWORD *)&v5[v40 - 8];
      *((_QWORD *)v42 - 3) = 0;
      *((_QWORD *)v42 - 2) = 0;
      *((_QWORD *)v42 - 1) = 0;
      v18 -= 24;
      v5 -= 24;
    }
    while (&v5[v40] != v38);
    v39 = &v18[24 * v49];
  }
  v43 = v51[1];
  if (v43 != (void *)v7)
  {
    do
    {
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      *(_OWORD *)v31 = *(_OWORD *)v7;
      *((_QWORD *)v31 + 2) = *(_QWORD *)(v7 + 16);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      v31 += 24;
      v7 += 24;
    }
    while ((void *)v7 != v43);
    v7 = (uint64_t)v51[1];
  }
  v44 = (char *)*v51;
  *v51 = v39;
  v51[1] = v31;
  v51[2] = v52;
  if ((char *)v7 != v44)
  {
    v45 = (char *)v7;
    do
    {
      v47 = (void *)*((_QWORD *)v45 - 3);
      v45 -= 24;
      v46 = v47;
      if (v47)
      {
        *(_QWORD *)(v7 - 16) = v46;
        operator delete(v46);
      }
      v7 = (uint64_t)v45;
    }
    while (v45 != v44);
  }
  if (v44)
    operator delete(v44);
  return (uint64_t)v29;
}

void sub_20F311B64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_20F311B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F311B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = v14;
  sub_20EB143E8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F311BAC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_20E867F44();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[32 * (v10 >> 5)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20F311C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F311C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20F311CAC(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  int64_t v38;
  char *v39;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (a5 > (v9 - (uint64_t)v10) >> 5)
  {
    v11 = *(char **)a1;
    v12 = a5 + ((uint64_t)&v10[-*(_QWORD *)a1] >> 5);
    if (v12 >> 59)
      sub_20E867F44();
    v13 = v9 - (_QWORD)v11;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 59)
        sub_20E877A38();
      v15 = (char *)operator new(32 * v14);
    }
    else
    {
      v15 = 0;
    }
    v26 = &v15[32 * ((v5 - v11) >> 5)];
    v27 = 32 * a5;
    v28 = &v26[32 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v7;
      v31 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)v29 = v30;
      *((_OWORD *)v29 + 1) = v31;
      v29 += 32;
      v27 -= 32;
    }
    while (v27);
    v32 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v34 = v26;
      v37 = &v15[32 * v14];
      v38 = v10 - v5;
      if (v10 == v5)
        goto LABEL_33;
    }
    else
    {
      v33 = v5;
      v34 = v26;
      do
      {
        v35 = *((_OWORD *)v33 - 2);
        *(_OWORD *)(v34 - 23) = *(_OWORD *)(v33 - 23);
        *((_OWORD *)v34 - 2) = v35;
        v34 -= 32;
        v33 -= 32;
      }
      while (v33 != v32);
      v36 = *(char **)(a1 + 8);
      v37 = &v15[32 * v14];
      v38 = v36 - v5;
      if (v36 == v5)
        goto LABEL_33;
    }
    memmove(v28, v5, v38 - 7);
LABEL_33:
    v39 = *(char **)a1;
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = &v28[v38];
    *(_QWORD *)(a1 + 16) = v37;
    if (v39)
      operator delete(v39);
    return v26;
  }
  v16 = v10 - __dst;
  v17 = (v10 - __dst) >> 5;
  if (v17 >= a5)
  {
    v18 = &__src[32 * a5];
    v20 = *(char **)(a1 + 8);
    v21 = &__dst[32 * a5];
    v22 = &v10[-32 * a5];
    v23 = v20;
    if (v22 >= v10)
    {
LABEL_21:
      *(_QWORD *)(a1 + 8) = v23;
      if (v20 != v21)
        memmove(&v20[-32 * ((v20 - v21) >> 5)], v5, v20 - v21 - 7);
      if (v18 != v7)
        memmove(v5, v7, v18 - v7 - 7);
      return v5;
    }
LABEL_19:
    v23 = v20;
    do
    {
      v24 = *(_OWORD *)v22;
      v25 = *((_OWORD *)v22 + 1);
      v22 += 32;
      *(_OWORD *)v23 = v24;
      *((_OWORD *)v23 + 1) = v25;
      v23 += 32;
    }
    while (v22 < v10);
    goto LABEL_21;
  }
  v18 = &__src[32 * v17];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[32 * v17], v19 - 7);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v16 >= 1)
  {
    v21 = &v5[32 * a5];
    v22 = &v20[-32 * a5];
    v23 = &v10[v19];
    if (v22 >= v10)
      goto LABEL_21;
    goto LABEL_19;
  }
  return v5;
}

char *sub_20F311EE8(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v9;
  _BYTE *v10;
  void (***v11)(_QWORD);
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  void (***v34)(_QWORD);
  void (***v35)(_QWORD);
  void (***v36)(_QWORD);
  void (**v37)(_QWORD);
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;

  v5 = a2;
  if (a5 < 1)
    return (char *)v5;
  v7 = a3;
  v9 = (unint64_t)a1[1];
  v10 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v10[-v9] >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)a2) >> 3)) >= a5)
    {
      v16 = a3 + 24 * a5;
      v18 = a1[1];
    }
    else
    {
      v16 = a3 + 8 * ((uint64_t)(v9 - (_QWORD)a2) >> 3);
      if (v16 == a4)
      {
        v18 = a1[1];
      }
      else
      {
        v17 = a3 + 8 * ((uint64_t)(v9 - (_QWORD)a2) >> 3);
        v18 = a1[1];
        do
        {
          v20 = *(_QWORD *)(v17 + 8);
          v19 = *(_QWORD *)(v17 + 16);
          *v18 = &off_24CA1A9A0;
          v18[1] = v20;
          v18[2] = v19;
          if (v19)
          {
            v21 = (unint64_t *)(v19 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v17 += 24;
          v18 += 3;
        }
        while (v17 != a4);
      }
      a1[1] = v18;
      if ((uint64_t)(v9 - (_QWORD)a2) < 1)
        return (char *)v5;
    }
    v39 = &v18[-3 * a5];
    v40 = v18;
    if ((unint64_t)v39 < v9)
    {
      v41 = &v18[-3 * a5];
      v40 = v18;
      do
      {
        *v40 = &off_24CA1A9A0;
        *(_OWORD *)(v40 + 1) = *(_OWORD *)(v41 + 1);
        v41[1] = 0;
        v41[2] = 0;
        v41 += 3;
        v40 += 3;
      }
      while ((unint64_t)v41 < v9);
    }
    a1[1] = v40;
    if (v18 != &a2[3 * a5])
    {
      do
      {
        v43 = *((_OWORD *)v39 - 1);
        *(v39 - 2) = 0;
        *(v39 - 1) = 0;
        v44 = (std::__shared_weak_count *)*(v18 - 1);
        *((_OWORD *)v18 - 1) = v43;
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v39 -= 3;
        v18 -= 3;
      }
      while (v39 != v5);
    }
    if (v16 != v7)
    {
      v42 = v5;
      do
      {
        v48 = *(_QWORD *)(v7 + 8);
        v47 = *(_QWORD *)(v7 + 16);
        if (v47)
        {
          v49 = (unint64_t *)(v47 + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = (std::__shared_weak_count *)v42[2];
        v42[1] = v48;
        v42[2] = v47;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v7 += 24;
        v42 += 3;
      }
      while (v7 != v16);
    }
    return (char *)v5;
  }
  v11 = (void (***)(_QWORD))*a1;
  v12 = a5 - 0x5555555555555555 * ((uint64_t)(v9 - (_QWORD)*a1) >> 3);
  if (v12 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)v11) >> 3);
  if (2 * v13 > v12)
    v12 = 2 * v13;
  if (v13 >= 0x555555555555555)
    v14 = 0xAAAAAAAAAAAAAAALL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v15 = (char *)operator new(24 * v14);
  }
  else
  {
    v15 = 0;
  }
  v23 = &v15[8 * ((void (***)(_QWORD))v5 - v11)];
  v24 = &v23[24 * a5];
  v25 = v23;
  do
  {
    v27 = *(_QWORD *)(v7 + 8);
    v26 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)v25 = &off_24CA1A9A0;
    *((_QWORD *)v25 + 1) = v27;
    *((_QWORD *)v25 + 2) = v26;
    if (v26)
    {
      v28 = (unint64_t *)(v26 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v25 += 24;
    v7 += 24;
  }
  while (v25 != v24);
  v30 = (char *)*a1;
  v31 = &v15[8 * ((void (***)(_QWORD))v5 - v11)];
  if (*a1 != v5)
  {
    v32 = (char *)v5;
    v31 = &v15[8 * ((void (***)(_QWORD))v5 - v11)];
    do
    {
      *((_QWORD *)v31 - 3) = &off_24CA1A9A0;
      v31 -= 24;
      *(_OWORD *)(v31 + 8) = *((_OWORD *)v32 - 1);
      *((_QWORD *)v32 - 2) = 0;
      *((_QWORD *)v32 - 1) = 0;
      v32 -= 24;
    }
    while (v32 != v30);
  }
  v33 = a1[1];
  if (v33 != v5)
  {
    do
    {
      *(_QWORD *)v24 = &off_24CA1A9A0;
      *(_OWORD *)(v24 + 8) = *(_OWORD *)(v5 + 1);
      v5[1] = 0;
      v5[2] = 0;
      v5 += 3;
      v24 += 24;
    }
    while (v5 != v33);
    v5 = a1[1];
  }
  v34 = (void (***)(_QWORD))*a1;
  *a1 = v31;
  a1[1] = v24;
  a1[2] = &v15[24 * v14];
  if (v5 != v34)
  {
    v35 = (void (***)(_QWORD))(v5 - 3);
    v36 = v35;
    do
    {
      v37 = *v36;
      v36 -= 3;
      (*v37)(v35);
      v38 = v35 == v34;
      v35 = v36;
    }
    while (!v38);
  }
  if (v34)
    operator delete(v34);
  return v23;
}

uint64_t sub_20F3122B4(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  if (*(_BYTE *)(a1 + 4456))
  {
    v2 = *(void **)(a1 + 4368);
    if (v2)
    {
      *(_QWORD *)(a1 + 4376) = v2;
      operator delete(v2);
    }
  }
  v3 = *(void **)(a1 + 3560);
  if (v3)
  {
    *(_QWORD *)(a1 + 3568) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 368);
  if (v4 == (_QWORD *)(a1 + 344))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 344);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(_QWORD **)(a1 + 336);
  if (v6 == (_QWORD *)(a1 + 312))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 312);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v8 = *(_QWORD **)(a1 + 296);
  if (v8 == (_QWORD *)(a1 + 272))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 272);
  }
  else
  {
    if (!v8)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  v10 = *(_QWORD **)(a1 + 264);
  if (v10 == (_QWORD *)(a1 + 240))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 240);
  }
  else
  {
    if (!v10)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_26:
  v12 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v12)
    MEMORY[0x212BC6398](v12, 0x1000C40FD2CF380);
  v13 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 24);
      v17 = *(void **)(v14 + 16);
      if (v16 != v15)
      {
        v18 = v16 - 344;
        do
        {
          while (1)
          {
            if (*(_BYTE *)(v18 + 336) && *(char *)(v18 + 335) < 0)
              operator delete(*(void **)(v18 + 312));
            if (*(char *)(v18 + 23) < 0)
              break;
            v19 = v18 - 24;
            v18 -= 368;
            if (v19 == v15)
              goto LABEL_40;
          }
          operator delete(*(void **)v18);
          v20 = v18 - 24;
          v18 -= 368;
        }
        while (v20 != v15);
LABEL_40:
        v17 = *(void **)(v14 + 16);
      }
      *(_QWORD *)(v14 + 24) = v15;
      operator delete(v17);
    }
    MEMORY[0x212BC6398](v14, 0x1020C402FC4DB2FLL);
  }
  v21 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD **)(a1 + 160);
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v24)
    operator delete(v24);
  v25 = *(_QWORD **)(a1 + 120);
  if (v25)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v27)
    operator delete(v27);
  v28 = *(void **)(a1 + 80);
  if (v28)
  {
    *(_QWORD *)(a1 + 88) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 56);
  if (v29)
  {
    *(_QWORD *)(a1 + 64) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 32);
  if (v30)
  {
    *(_QWORD *)(a1 + 40) = v30;
    operator delete(v30);
  }
  v31 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v31)
    return a1;
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (v33)
    return a1;
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  return a1;
}

_QWORD *sub_20F312580(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (_QWORD *)a1[25];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[23];
  a1[23] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[18];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[16];
  a1[16] = 0;
  if (v7)
    operator delete(v7);
  v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[10];
  if (v9)
  {
    a1[11] = v9;
    operator delete(v9);
  }
  sub_20F312618((uint64_t)(a1 + 4));
  return a1;
}

uint64_t sub_20F312618(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5;
  v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v7 == v8)
    goto LABEL_11;
  do
  {
    if (*(char *)(v7 + 23) < 0)
    {
      v9 = *(void **)v7;
      v7 += 24;
      operator delete(v9);
      v6 = (unint64_t)*v5;
      if (v7 - (_QWORD)*v5 != 4080)
        continue;
    }
    else
    {
      v7 += 24;
      if (v7 - v6 != 4080)
        continue;
    }
    v10 = (unint64_t)v5[1];
    ++v5;
    v6 = v10;
    v7 = v10;
  }
  while (v7 != v8);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_11:
  *(_QWORD *)(a1 + 40) = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_13:
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
LABEL_18:
    *(_QWORD *)(a1 + 32) = v13;
  }
  else if (v12 == 2)
  {
    v13 = 170;
    goto LABEL_18;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F3127B4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 176;
    sub_20E991548((_QWORD *)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double *sub_20F312808(double **a1, __int128 *a2, double a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  double *v14;
  char *v15;
  __int128 v16;
  double v17;
  double *v18;
  double *v19;
  double *v21;
  double *v22;

  v4 = 0x2E8BA2E8BA2E8BA3 * (((char *)a1[1] - (char *)*a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x1745D1745D1745DLL)
    sub_20E867F44();
  if (0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 4) > v5)
    v5 = 0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 4);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)a1[2] - (char *)*a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v8 = 0x1745D1745D1745DLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x1745D1745D1745DLL)
      sub_20E877A38();
    v9 = (char *)operator new(176 * v8);
  }
  else
  {
    v9 = 0;
  }
  v21 = (double *)&v9[176 * v4];
  v22 = (double *)&v9[176 * v8];
  *v21 = a3;
  sub_20EE6CA98((uint64_t)(v21 + 1), a2);
  v10 = v21 + 22;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v21;
    a1[1] = v10;
    a1[2] = v22;
    if (!v12)
      return v21 + 22;
    goto LABEL_17;
  }
  v13 = 0;
  do
  {
    v14 = &v21[v13];
    v15 = (char *)&v12[v13];
    *(v14 - 22) = v12[v13 - 22];
    v16 = *(_OWORD *)&v12[v13 - 21];
    v17 = v12[v13 - 17];
    *(_OWORD *)(v14 - 19) = *(_OWORD *)&v12[v13 - 19];
    *(_OWORD *)(v14 - 21) = v16;
    *(v14 - 17) = v17;
    *(v14 - 16) = 0.0;
    *(v14 - 15) = 0.0;
    *(v14 - 14) = 0.0;
    *((_OWORD *)v14 - 8) = *(_OWORD *)&v12[v13 - 16];
    *(v14 - 14) = v12[v13 - 14];
    *((_QWORD *)v15 - 16) = 0;
    *((_QWORD *)v15 - 15) = 0;
    *((_QWORD *)v15 - 14) = 0;
    *(v14 - 13) = 0.0;
    *(v14 - 12) = 0.0;
    *(v14 - 11) = 0.0;
    *(_OWORD *)(v14 - 13) = *(_OWORD *)&v12[v13 - 13];
    *(v14 - 11) = v12[v13 - 11];
    *((_QWORD *)v15 - 13) = 0;
    *((_QWORD *)v15 - 12) = 0;
    *((_QWORD *)v15 - 11) = 0;
    *(v14 - 10) = 0.0;
    *(v14 - 9) = 0.0;
    *(v14 - 8) = 0.0;
    *((_OWORD *)v14 - 5) = *(_OWORD *)&v12[v13 - 10];
    *(v14 - 8) = v12[v13 - 8];
    *((_QWORD *)v15 - 10) = 0;
    *((_QWORD *)v15 - 9) = 0;
    *((_QWORD *)v15 - 8) = 0;
    *(v14 - 7) = 0.0;
    *(v14 - 6) = 0.0;
    *(v14 - 5) = 0.0;
    *(_OWORD *)(v14 - 7) = *(_OWORD *)&v12[v13 - 7];
    *(v14 - 5) = v12[v13 - 5];
    *((_QWORD *)v15 - 7) = 0;
    *((_QWORD *)v15 - 6) = 0;
    *((_QWORD *)v15 - 5) = 0;
    *(v14 - 4) = 0.0;
    *(v14 - 3) = 0.0;
    *(v14 - 2) = 0.0;
    *((_OWORD *)v14 - 2) = *(_OWORD *)&v12[v13 - 4];
    *(v14 - 2) = v12[v13 - 2];
    *((_QWORD *)v15 - 4) = 0;
    *((_QWORD *)v15 - 3) = 0;
    *((_QWORD *)v15 - 2) = 0;
    *((_WORD *)v14 - 4) = LOWORD(v12[v13 - 1]);
    v13 -= 22;
  }
  while (&v12[v13] != v11);
  v12 = *a1;
  v18 = a1[1];
  *a1 = &v21[v13];
  a1[1] = v10;
  a1[2] = v22;
  if (v18 != v12)
  {
    do
    {
      v19 = v18 - 22;
      sub_20E991548((_QWORD *)v18 - 21);
      v18 = v19;
    }
    while (v19 != v12);
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v21 + 22;
}

void sub_20F312A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F3127B4((uint64_t)va);
  _Unwind_Resume(a1);
}

char ***sub_20F312A6C(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_20E877A38();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

void sub_20F312B80()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F312B94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9FD378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20F312BD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FD378;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F312BFC(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  v3 = (__int128 *)(a1 + 16);
  if (!*(_BYTE *)(v2 + 2499))
  {
    v4 = *(_QWORD **)(v2 + 2816);
LABEL_9:
    sub_20F26D2A4(v4, v3, (uint64_t)a2);
    return;
  }
  v4 = *(_QWORD **)(v2 + 2824);
  v5 = *(_QWORD **)(v2 + 2832);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = v4[2];
      if (v6)
      {
        if (*(_QWORD *)(v6 + 160) == *(_QWORD *)v3)
          break;
      }
      v4 += 559;
      if (v4 == v5)
        goto LABEL_10;
    }
  }
  if (v4 != v5 && v4)
    goto LABEL_9;
LABEL_10:
  *a2 = 0;
  a2[104] = 0;
}

uint64_t sub_20F312C70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping16MappingInterface23MaybeCreateMLKeyframeCMERKNS0_4util18UUIDHashU32KeyPairEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface23MaybeCreateMLKeyframeCMERKNS0_4util18UUIDH"
                                "ashU32KeyPairEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping16MappingInterface23MaybeCreateMLKeyframeCMERKNS0_4util18UUIDHashU32KeyPairEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface23MaybeCreateMLKeyframeCMERKNS0_4util18UUIDHashU32KeyPairEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F312CDC()
{
  return &unk_24C9FD3E8;
}

void sub_20F312CEC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F312D00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9FD408;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F312D38(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FD408;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F312D58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  void *__p[3];
  _BYTE v34[16];
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  v4 = *(_QWORD *)(v3 + 2824);
  v5 = *(_QWORD *)(v3 + 2832);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 160) == *(_QWORD *)(a1 + 16))
          break;
      }
      v4 += 4472;
      if (v4 == v5)
        goto LABEL_11;
    }
  }
  if (v4 == v5 || v4 == 0)
  {
LABEL_11:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 448) = 0;
  }
  else
  {
    v8 = *(_QWORD **)(v4 + 16);
    sub_20F4547BC((uint64_t)v8, *(unsigned __int8 *)(v3 + 928), (uint64_t *)__p);
    sub_20EB063DC((uint64_t)v34, v8, (uint64_t *)__p);
    v10 = v35;
    v9 = v36;
    *(_QWORD *)(a2 + 24) = v36;
    v11 = a2 + 24;
    *(_QWORD *)(a2 + 16) = v10;
    v12 = v37;
    *(_QWORD *)(a2 + 32) = v37;
    if (v12)
    {
      *(_QWORD *)(v9 + 16) = v11;
      v35 = &v36;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 16) = v11;
    }
    *(_OWORD *)(a2 + 40) = v38;
    *(_QWORD *)(a2 + 56) = v39;
    v38 = 0uLL;
    *(_OWORD *)(a2 + 64) = v40;
    *(_QWORD *)(a2 + 80) = v41;
    v39 = 0;
    v40 = 0uLL;
    v41 = 0;
    *(_OWORD *)(a2 + 88) = v42;
    *(_QWORD *)(a2 + 104) = v43;
    v43 = 0;
    v42 = 0uLL;
    *(_BYTE *)(a2 + 112) = v44;
    v13 = v46;
    *(_QWORD *)(a2 + 120) = v45;
    v14 = v47;
    *(_QWORD *)(a2 + 128) = v13;
    *(_QWORD *)(a2 + 136) = v14;
    v15 = a2 + 128;
    if (v14)
    {
      *(_QWORD *)(v13 + 16) = v15;
      v45 = &v46;
      v46 = 0;
      v47 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 120) = v15;
    }
    v17 = v52;
    v16 = v53;
    *(_QWORD *)(a2 + 200) = v53;
    v18 = a2 + 200;
    v19 = v51;
    *(_QWORD *)(a2 + 160) = v49;
    *(_OWORD *)(a2 + 144) = v48;
    v48 = 0uLL;
    *(_OWORD *)(a2 + 168) = v50;
    v49 = 0;
    v50 = 0uLL;
    v51 = 0;
    *(_QWORD *)(a2 + 184) = v19;
    *(_QWORD *)(a2 + 192) = v17;
    v20 = v54;
    *(_QWORD *)(a2 + 208) = v54;
    if (v20)
    {
      *(_QWORD *)(v16 + 16) = v18;
      v52 = &v53;
      v53 = 0;
      v54 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 192) = v18;
    }
    v22 = v55;
    v21 = v56;
    *(_QWORD *)(a2 + 224) = v56;
    v23 = a2 + 224;
    *(_QWORD *)(a2 + 216) = v22;
    v24 = v57;
    *(_QWORD *)(a2 + 232) = v57;
    if (v24)
    {
      *(_QWORD *)(v21 + 16) = v23;
      v55 = &v56;
      v56 = 0;
      v57 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 216) = v23;
    }
    v25 = v60;
    *(_QWORD *)(a2 + 240) = v58;
    *(_OWORD *)(a2 + 248) = v59;
    *(_QWORD *)(a2 + 264) = v25;
    v59 = 0uLL;
    *(_OWORD *)(a2 + 272) = v61;
    v26 = v66;
    *(_QWORD *)(a2 + 288) = v62;
    v60 = 0;
    v61 = 0uLL;
    v62 = 0;
    v27 = v63;
    v28 = v65;
    *(_OWORD *)(a2 + 312) = v64;
    *(_OWORD *)(a2 + 328) = v28;
    *(_OWORD *)(a2 + 296) = v27;
    *(_QWORD *)(a2 + 344) = v26;
    *(_OWORD *)(a2 + 352) = v67;
    v67 = 0uLL;
    v66 = 0;
    v29 = a2 + 376;
    v30 = v69;
    *(_QWORD *)(a2 + 368) = v68;
    *(_QWORD *)(a2 + 376) = v30;
    v31 = v70;
    *(_QWORD *)(a2 + 384) = v70;
    if (v31)
    {
      *(_QWORD *)(v30 + 16) = v29;
      v68 = &v69;
      v69 = 0;
      v70 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 368) = v29;
    }
    *(_DWORD *)(a2 + 440) = v74;
    v32 = v72;
    *(_OWORD *)(a2 + 392) = v71;
    *(_OWORD *)(a2 + 408) = v32;
    *(_OWORD *)(a2 + 424) = v73;
    *(_BYTE *)(a2 + 448) = 1;
    sub_20E94FADC((uint64_t)v34);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_20F313060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F313088(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3__16vectorIy"
                     "NS3_9allocatorIyEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3_"
                                "_16vectorIyNS3_9allocatorIyEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3__16vectorIyNS3_9allocatorIyEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3__16vectorIyNS3_9allocatorIyEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F3130F4()
{
  return &unk_24C9FD478;
}

void sub_20F313104()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F313118(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9FD498;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F313150(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FD498;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F313170(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  void *v19;
  void *v20;
  void *v21[3];
  uint64_t v22;
  int v23;
  void *__p[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  v4 = *(_QWORD *)(v3 + 2824);
  v5 = *(_QWORD *)(v3 + 2832);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 160) == *(_QWORD *)(a1 + 16))
          break;
      }
      v4 += 4472;
      if (v4 == v5)
        goto LABEL_11;
    }
  }
  if (v4 == v5 || v4 == 0)
  {
LABEL_11:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 104) = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 16);
    v22 = 0;
    v23 = 0;
    sub_20F4547BC(v8, *(unsigned __int8 *)(v3 + 928), (uint64_t *)v21);
    sub_20F449410(v8, (uint64_t)&v22, (uint64_t)v21, (char **)__p);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    v9 = v25;
    v10 = v26;
    __p[1] = 0;
    v25 = 0;
    __p[0] = 0;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v10;
    v11 = v27;
    v12 = v28;
    *(_QWORD *)(a2 + 32) = v27;
    v13 = a2 + 32;
    *(_QWORD *)(a2 + 40) = v12;
    if (v12)
    {
      v11[2] = v13;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v11 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v13;
    }
    v14 = v30;
    *(_OWORD *)(a2 + 48) = v29;
    *(_OWORD *)(a2 + 64) = v14;
    *(_OWORD *)(a2 + 80) = v31;
    *(_DWORD *)(a2 + 96) = v32;
    *(_BYTE *)(a2 + 104) = 1;
    sub_20E86872C((uint64_t)&v26, v11);
    v15 = (char *)__p[0];
    if (__p[0])
    {
      v16 = __p[1];
      v17 = __p[0];
      if (__p[1] != __p[0])
      {
        v18 = (char *)__p[1];
        do
        {
          v20 = (void *)*((_QWORD *)v18 - 6);
          v18 -= 48;
          v19 = v20;
          if (v20)
          {
            *(v16 - 5) = v19;
            operator delete(v19);
          }
          v16 = v18;
        }
        while (v18 != v15);
        v17 = __p[0];
      }
      __p[1] = v15;
      operator delete(v17);
    }
    if (v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }
  }
}

void sub_20F313308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F313324(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3__16vectorIy"
                     "NS3_9allocatorIyEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3_"
                                "_16vectorIyNS3_9allocatorIyEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3__16vectorIyNS3_9allocatorIyEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface34CreateTransmitMapDataAndMLRequestsERKNSt3__16vectorIyNS3_9allocatorIyEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F313390()
{
  return &unk_24C9FD4F8;
}

void sub_20F31339C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F3133AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FD518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F3133DC(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_20F3133E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F31342C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40714111CFLL);
  }
  return a1;
}

uint64_t sub_20F31342C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  sub_20EE62CA8(a1 + 1312);
  if (*(_BYTE *)(a1 + 1304))
  {
    v2 = *(_QWORD *)(a1 + 1280);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 1288);
      v4 = *(void **)(a1 + 1280);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 1288);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 1280);
      }
      *(_QWORD *)(a1 + 1288) = v2;
      operator delete(v4);
    }
    v8 = *(void **)(a1 + 1256);
    if (v8)
    {
      *(_QWORD *)(a1 + 1264) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 1224))
    sub_20EE62D7C((void **)(a1 + 1128));
  v9 = *(void **)(a1 + 960);
  if (v9)
  {
    *(_QWORD *)(a1 + 968) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 936);
  if (v10)
  {
    *(_QWORD *)(a1 + 944) = v10;
    operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 912);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 920);
    v13 = *(void **)(a1 + 912);
    if (v12 != v11)
    {
      do
      {
        v14 = *(void **)(v12 - 24);
        if (v14)
        {
          *(_QWORD *)(v12 - 16) = v14;
          operator delete(v14);
        }
        v15 = *(void **)(v12 - 48);
        if (v15)
        {
          *(_QWORD *)(v12 - 40) = v15;
          operator delete(v15);
        }
        v12 -= 56;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 912);
    }
    *(_QWORD *)(a1 + 920) = v11;
    operator delete(v13);
  }
  return sub_20E91E818(a1);
}

void sub_20F31354C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F313560(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD568;
  result[1] = v3;
  return result;
}

uint64_t sub_20F313594(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD568;
  a2[1] = v2;
  return result;
}

void sub_20F3135B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[18];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(v3 + 72);
  if (v4)
  {
    sub_20F237E70(v4, a2);
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(_QWORD *)(v5 + 80);
    v7 = *(_QWORD *)(v5 + 88);
    if (v6 != v7)
    {
      while (*(_QWORD *)v6 != *(_QWORD *)a2 || *(_DWORD *)(v6 + 8) != *(_DWORD *)(a2 + 8))
      {
        v6 += 24;
        if (v6 == v7)
          goto LABEL_8;
      }
      *(_BYTE *)(v6 + 16) = 1;
    }
  }
LABEL_8:
  if (*(_BYTE *)(*(_QWORD *)(v3 + 80) + 2623))
  {
    sub_20F2FD840(v3, a2, (uint64_t)v8);
    if (!v8[17]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 134, (uint64_t)"ret.second", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
}

uint64_t sub_20F3136C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrIN"
                     "S0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorI"
                     "SD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13map"
                     "ping_types7MapDataEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110s"
                                "hared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSenso"
                                "rModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16"
                                "SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F31372C()
{
  return &unk_24C9FD5D8;
}

_QWORD *sub_20F313738(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F3138CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

void sub_20F3138DC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F3138F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD5F8;
  result[1] = v3;
  return result;
}

uint64_t sub_20F313924(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD5F8;
  a2[1] = v2;
  return result;
}

void sub_20F313940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[18];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 80) + 2623))
  {
    sub_20F2FD840(v2, a2, (uint64_t)v3);
    if (!v3[17]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 142, (uint64_t)"ret.second", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
}

uint64_t sub_20F3139E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrIN"
                     "S0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorI"
                     "SD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13map"
                     "ping_types7MapDataEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110s"
                                "hared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSenso"
                                "rModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16"
                                "SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F313A50()
{
  return &unk_24C9FD658;
}

void sub_20F313A5C(char **a1, __int128 *a2, uint64_t *a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  char *v31;
  __int128 *i;
  __int128 v33;
  char *v34;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = *a3;
      v12 = *((_DWORD *)a3 + 2);
      v13 = v9 + 1;
      v14 = (__int128 *)(v5 - 16);
      v15 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v16 = *v14++;
          *(_OWORD *)v15 = v16;
          v15 += 16;
        }
        while ((unint64_t)v14 < v5);
      }
      a1[1] = v15;
      if ((_OWORD *)v5 != v13)
      {
        v17 = (uint64_t)(v5 - (_QWORD)v13) >> 4;
        v18 = (_DWORD *)(v5 - 8);
        v19 = v17;
        do
        {
          *((_QWORD *)v18 - 1) = *(_QWORD *)&v9[v19 - 1];
          *v18 = DWORD2(v9[v19 - 1]);
          v18 -= 4;
          --v19;
        }
        while (v19 * 16);
      }
      *(_QWORD *)v9 = v11;
      DWORD2(v6[v8]) = v12;
    }
    return;
  }
  v20 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v20 >> 60)
    sub_20E867F44();
  v22 = v10 - (_QWORD)v6;
  if (v22 >> 3 > v20)
    v20 = v22 >> 3;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
    v23 = 0xFFFFFFFFFFFFFFFLL;
  else
    v23 = v20;
  if (!v23)
  {
    v24 = 0;
    v25 = (char *)(16 * v8);
    v26 = 0;
    if (v8)
      goto LABEL_31;
    goto LABEL_21;
  }
  if (v23 >> 60)
    sub_20E877A38();
  v24 = (char *)operator new(16 * v23);
  v25 = &v24[16 * v8];
  v26 = &v24[16 * v23];
  if (v8 == v23)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v28 = 1;
      else
        v28 = v7 >> 3;
      if (v28 >> 60)
        sub_20E877A38();
      v25 = (char *)operator new(16 * v28);
      v26 = &v25[16 * v28];
      if (v24)
      {
        operator delete(v24);
        v26 = &v25[16 * v28];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v27 = v8 + 2;
      if (v8 >= -1)
        v27 = v8 + 1;
      v25 -= 16 * (v27 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v25 = *(_OWORD *)a3;
  v29 = v25 + 16;
  if (v6 == v9)
  {
    v31 = v25;
    i = (__int128 *)a1[1];
    if (i == v9)
      goto LABEL_36;
    goto LABEL_35;
  }
  v30 = v9;
  do
  {
    v31 = v25 - 16;
    *((_OWORD *)v25 - 1) = *--v30;
    v25 -= 16;
  }
  while (v30 != v6);
  for (i = (__int128 *)a1[1]; v9 != i; v29 += 16)
  {
LABEL_35:
    v33 = *v9++;
    *(_OWORD *)v29 = v33;
  }
LABEL_36:
  v34 = *a1;
  *a1 = v31;
  a1[1] = v29;
  a1[2] = v26;
  if (v34)
    operator delete(v34);
}

void sub_20F313CC4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F313CE0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F313CF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD678;
  result[1] = v3;
  return result;
}

uint64_t sub_20F313D28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD678;
  a2[1] = v2;
  return result;
}

void sub_20F313D44(uint64_t a1, unint64_t *a2, _BYTE *a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  __int128 *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  __int128 *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  __int128 *v55;
  unint64_t v56;
  unint64_t v57;
  __int128 *v58;
  __int128 *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = *a2;
  if (*a3)
  {
    v5 = v3[127];
    v6 = (char *)v3[128];
    if (v6 != (char *)v5)
    {
      v7 = (uint64_t)&v6[-v5] >> 4;
      v8 = (char *)v3[127];
      do
      {
        v9 = v7 >> 1;
        v10 = (unint64_t *)&v8[16 * (v7 >> 1)];
        v12 = *v10;
        v11 = (char *)(v10 + 2);
        v7 += ~(v7 >> 1);
        if (v12 < v4)
          v8 = v11;
        else
          v7 = v9;
      }
      while (v7);
      if (v6 != v8 && *(_QWORD *)v8 == v4)
      {
        v34 = *((_DWORD *)v8 + 2);
        v35 = (uint64_t)&v8[-v5] >> 4;
        v36 = v8 + 16;
        if (v8 + 16 != v6)
        {
          v37 = v6 - v8 - 32;
          v38 = v8;
          if (v37 < 0x10)
            goto LABEL_72;
          v39 = (v37 >> 4) + 1;
          v40 = 16 * (v39 & 0x1FFFFFFFFFFFFFFELL);
          v38 = &v8[v40];
          v36 += v40;
          v41 = v5 + 16 * v35 + 24;
          v42 = v39 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v43 = *(_QWORD *)(v41 + 8);
            *(_QWORD *)(v41 - 24) = *(_QWORD *)(v41 - 8);
            *(_QWORD *)(v41 - 8) = v43;
            LODWORD(v43) = *(_DWORD *)(v41 + 16);
            *(_DWORD *)(v41 - 16) = *(_DWORD *)v41;
            *(_DWORD *)v41 = v43;
            v41 += 32;
            v42 -= 2;
          }
          while (v42);
          if (v39 != (v39 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_72:
            do
            {
              *(_QWORD *)v38 = *(_QWORD *)v36;
              *((_DWORD *)v38 + 2) = *((_DWORD *)v36 + 2);
              v38 += 16;
              v36 += 16;
            }
            while (v36 != v6);
          }
          v3[128] = v38;
          if ((char *)v5 == v38)
            goto LABEL_51;
          goto LABEL_47;
        }
        v38 = v8;
        v3[128] = v8;
        if ((char *)v5 != v8)
        {
LABEL_47:
          v45 = 16 * v35 + 16 * ((v38 - v8) >> 4);
          v46 = (_DWORD *)(v5 + 8);
          do
          {
            if (*v46 > v34)
              --*v46;
            v46 += 4;
            v45 -= 16;
          }
          while (v45);
        }
      }
    }
LABEL_51:
    v47 = *a2;
    v20 = (__int128 *)v3[124];
    v48 = (__int128 *)v3[125];
    v49 = (char *)v48 - (char *)v20;
    if (v48 == v20)
    {
      v61 = v47;
      v62 = (unint64_t)v49 >> 4;
      v20 = v48;
LABEL_68:
      v44 = (char **)(v3 + 124);
      goto LABEL_69;
    }
    v50 = v49 >> 4;
    v51 = (__int128 *)v3[124];
    v52 = v49 >> 4;
    do
    {
      v53 = v52 >> 1;
      v54 = (unint64_t *)&v51[v52 >> 1];
      v56 = *v54;
      v55 = (__int128 *)(v54 + 2);
      v52 += ~(v52 >> 1);
      if (v56 < v47)
        v51 = v55;
      else
        v52 = v53;
    }
    while (v52);
    if (v48 == v51 || *(_QWORD *)v51 != v47)
    {
      v61 = v47;
      v62 = (unint64_t)v49 >> 4;
      do
      {
        v57 = v50 >> 1;
        v58 = &v20[v50 >> 1];
        v60 = *(_QWORD *)v58;
        v59 = v58 + 1;
        v50 += ~(v50 >> 1);
        if (v60 < v47)
          v20 = v59;
        else
          v50 = v57;
      }
      while (v50);
      if (v48 == v20 || *(_QWORD *)v20 != v47)
        goto LABEL_68;
    }
    return;
  }
  v13 = (char *)v3[124];
  v14 = (char *)v3[125];
  if (v14 == v13)
    goto LABEL_18;
  v15 = (v14 - v13) >> 4;
  do
  {
    v16 = v15 >> 1;
    v17 = (unint64_t *)&v13[16 * (v15 >> 1)];
    v19 = *v17;
    v18 = (char *)(v17 + 2);
    v15 += ~(v15 >> 1);
    if (v19 < v4)
      v13 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v14 == v13 || *(_QWORD *)v13 != v4)
  {
LABEL_18:
    v20 = (__int128 *)v3[127];
    v21 = (__int128 *)v3[128];
    v22 = (char *)v21 - (char *)v20;
    if (v21 == v20)
    {
      v61 = v4;
      v62 = (unint64_t)v22 >> 4;
      v20 = v21;
    }
    else
    {
      v23 = v22 >> 4;
      v24 = (__int128 *)v3[127];
      v25 = v22 >> 4;
      do
      {
        v26 = v25 >> 1;
        v27 = (unint64_t *)&v24[v25 >> 1];
        v29 = *v27;
        v28 = (__int128 *)(v27 + 2);
        v25 += ~(v25 >> 1);
        if (v29 < v4)
          v24 = v28;
        else
          v25 = v26;
      }
      while (v25);
      if (v21 != v24 && *(_QWORD *)v24 == v4)
        return;
      v61 = v4;
      v62 = (unint64_t)v22 >> 4;
      do
      {
        v30 = v23 >> 1;
        v31 = &v20[v23 >> 1];
        v33 = *(_QWORD *)v31;
        v32 = v31 + 1;
        v23 += ~(v23 >> 1);
        if (v33 < v4)
          v20 = v32;
        else
          v23 = v30;
      }
      while (v23);
      if (v21 != v20 && *(_QWORD *)v20 == v4)
        return;
    }
    v44 = (char **)(v3 + 127);
LABEL_69:
    sub_20F313A5C(v44, v20, (uint64_t *)&v61);
  }
}

uint64_t sub_20F314090(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrIN"
                     "S0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorI"
                     "SD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13map"
                     "ping_types7MapDataEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110s"
                                "hared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSenso"
                                "rModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16"
                                "SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F3140FC()
{
  return &unk_24C9FD6E8;
}

void sub_20F31410C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F314120(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD708;
  result[1] = v3;
  return result;
}

uint64_t sub_20F314154(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD708;
  a2[1] = v2;
  return result;
}

void sub_20F314170(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;

  v3 = *(_QWORD **)(a1 + 8);
  if (v3[5])
  {
    if (v3[7])
    {
      v4 = v3[8];
      if (v4)
      {
        if (v3[9])
        {
          v5 = *(_QWORD *)(v4 + 8);
          v6 = *(_QWORD *)(v4 + 16);
          if (v5 != v6)
          {
            v7 = *a2;
            v8 = *a3;
            do
            {
              v9 = *(_QWORD ***)v5;
              v10 = *(_QWORD ***)(v5 + 8);
              while (v9 != v10)
              {
                if (**v9 == v7)
                  sub_20F469DDC((uint64_t)v9, (_QWORD *)(*(_QWORD *)(v8 + 8) + 24));
                v9 += 69;
              }
              v5 += 1000;
            }
            while (v5 != v6);
          }
        }
      }
    }
  }
}

uint64_t sub_20F314218(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrIN"
                     "S0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorI"
                     "SD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13map"
                     "ping_types7MapDataEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110s"
                                "hared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSenso"
                                "rModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16"
                                "SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface4InitERKNS1_20MappingManagerConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEERKNS6_6vectorINS0_8geometry20CameraSetSensorModelENS6_9allocatorISD_EEEERKyRKNS6_5arrayIdLm3EEENS6_8functionIFyvEEEPNS0_8sem_proc16SemanticsManagerERKNS7_INS0_13mapping_types7MapDataEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F314284()
{
  return &unk_24C9FD778;
}

uint64_t sub_20F314290(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  sub_20E86872C(a1 + 888, *(_QWORD **)(a1 + 896));
  v2 = *(void **)(a1 + 856);
  if (v2)
  {
    *(_QWORD *)(a1 + 864) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 800);
  if (v3)
  {
    *(_QWORD *)(a1 + 808) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      do
      {
        v6 -= 89;
        sub_20E9385B0(v6);
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F31432C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20F3122B4((uint64_t)v2 + 24);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20F314370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v5 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v5;
  v6 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(a1 + 112);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v4 + 8 * v7) = a1 + 120;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
  }
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v11;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_QWORD *)(a1 + 152);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v12 %= v13;
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(_QWORD *)(v9 + 8 * v12) = a1 + 160;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
  }
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 184) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v15;
  v16 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v16;
  v17 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v17;
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a1 + 232) = v18;
  v19 = *(_QWORD *)(a2 + 264);
  if (!v19)
  {
    v20 = (_QWORD *)(a1 + 264);
    goto LABEL_17;
  }
  v20 = (_QWORD *)(a2 + 264);
  if (v19 != a2 + 240)
  {
    *(_QWORD *)(a1 + 264) = v19;
LABEL_17:
    *v20 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 264) = a1 + 240;
  (*(void (**)(_QWORD))(*(_QWORD *)*v20 + 24))(*v20);
LABEL_19:
  v21 = *(_QWORD *)(a2 + 296);
  if (!v21)
  {
    v22 = (_QWORD *)(a1 + 296);
    goto LABEL_23;
  }
  v22 = (_QWORD *)(a2 + 296);
  if (v21 != a2 + 272)
  {
    *(_QWORD *)(a1 + 296) = v21;
LABEL_23:
    *v22 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 296) = a1 + 272;
  (*(void (**)(_QWORD))(*(_QWORD *)*v22 + 24))(*v22);
LABEL_25:
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v23 = *(_QWORD *)(a2 + 336);
  if (!v23)
  {
    v24 = (_QWORD *)(a1 + 336);
    goto LABEL_29;
  }
  v24 = (_QWORD *)(a2 + 336);
  if (v23 != a2 + 312)
  {
    *(_QWORD *)(a1 + 336) = v23;
LABEL_29:
    *v24 = 0;
    goto LABEL_31;
  }
  *(_QWORD *)(a1 + 336) = a1 + 312;
  (*(void (**)(_QWORD))(*(_QWORD *)*v24 + 24))(*v24);
LABEL_31:
  v25 = *(_QWORD *)(a2 + 368);
  if (!v25)
  {
    v26 = (_QWORD *)(a1 + 368);
    goto LABEL_35;
  }
  v26 = (_QWORD *)(a2 + 368);
  if (v25 != a2 + 344)
  {
    *(_QWORD *)(a1 + 368) = v25;
LABEL_35:
    *v26 = 0;
    goto LABEL_37;
  }
  *(_QWORD *)(a1 + 368) = a1 + 344;
  (*(void (**)(_QWORD))(*(_QWORD *)*v26 + 24))(*v26);
LABEL_37:
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 3552) = 0;
  if (*(_BYTE *)(a2 + 3552))
  {
    v27 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a2 + 388);
    *(_OWORD *)(a1 + 376) = v27;
    v28 = *(_OWORD *)(a2 + 520);
    v30 = *(_OWORD *)(a2 + 472);
    v29 = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 520) = v28;
    *(_OWORD *)(a1 + 472) = v30;
    *(_OWORD *)(a1 + 488) = v29;
    v31 = *(_OWORD *)(a2 + 408);
    v32 = *(_OWORD *)(a2 + 424);
    v33 = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(a1 + 456) = v33;
    *(_OWORD *)(a1 + 408) = v31;
    *(_OWORD *)(a1 + 424) = v32;
    memcpy((void *)(a1 + 536), (const void *)(a2 + 536), 0x120uLL);
    *(_BYTE *)(a1 + 824) = 0;
    *(_BYTE *)(a1 + 3544) = 0;
    if (*(_BYTE *)(a2 + 3544))
    {
      v34 = *(_OWORD *)(a2 + 824);
      *(_OWORD *)(a1 + 836) = *(_OWORD *)(a2 + 836);
      *(_OWORD *)(a1 + 824) = v34;
      v35 = *(_OWORD *)(a2 + 856);
      *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
      *(_OWORD *)(a1 + 856) = v35;
      v36 = *(_OWORD *)(a2 + 880);
      *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
      *(_OWORD *)(a1 + 880) = v36;
      v37 = *(_OWORD *)(a2 + 920);
      *(_OWORD *)(a1 + 904) = *(_OWORD *)(a2 + 904);
      *(_OWORD *)(a1 + 920) = v37;
      v39 = *(_OWORD *)(a2 + 968);
      v38 = *(_OWORD *)(a2 + 984);
      v40 = *(_OWORD *)(a2 + 952);
      *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
      *(_OWORD *)(a1 + 968) = v39;
      *(_OWORD *)(a1 + 984) = v38;
      *(_OWORD *)(a1 + 952) = v40;
      *(_OWORD *)(a1 + 936) = *(_OWORD *)(a2 + 936);
      *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
      v41 = *(_OWORD *)(a2 + 1024);
      v42 = *(_OWORD *)(a2 + 1040);
      v43 = *(_OWORD *)(a2 + 1056);
      *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
      *(_OWORD *)(a1 + 1056) = v43;
      *(_OWORD *)(a1 + 1040) = v42;
      *(_OWORD *)(a1 + 1024) = v41;
      *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
      v44 = *(_OWORD *)(a2 + 1096);
      v45 = *(_OWORD *)(a2 + 1112);
      v46 = *(_OWORD *)(a2 + 1128);
      *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
      *(_OWORD *)(a1 + 1112) = v45;
      *(_OWORD *)(a1 + 1128) = v46;
      *(_OWORD *)(a1 + 1096) = v44;
      *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
      v47 = *(_OWORD *)(a2 + 1168);
      v48 = *(_OWORD *)(a2 + 1184);
      v49 = *(_OWORD *)(a2 + 1200);
      *(_QWORD *)(a1 + 1216) = *(_QWORD *)(a2 + 1216);
      *(_OWORD *)(a1 + 1200) = v49;
      *(_OWORD *)(a1 + 1184) = v48;
      *(_OWORD *)(a1 + 1168) = v47;
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
      v50 = *(_OWORD *)(a2 + 1240);
      v51 = *(_OWORD *)(a2 + 1256);
      v52 = *(_OWORD *)(a2 + 1272);
      *(_QWORD *)(a1 + 1288) = *(_QWORD *)(a2 + 1288);
      *(_OWORD *)(a1 + 1256) = v51;
      *(_OWORD *)(a1 + 1272) = v52;
      *(_OWORD *)(a1 + 1240) = v50;
      *(_OWORD *)(a1 + 1296) = *(_OWORD *)(a2 + 1296);
      v53 = *(_OWORD *)(a2 + 1312);
      v54 = *(_OWORD *)(a2 + 1328);
      v55 = *(_OWORD *)(a2 + 1344);
      *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a2 + 1360);
      *(_OWORD *)(a1 + 1344) = v55;
      *(_OWORD *)(a1 + 1328) = v54;
      *(_OWORD *)(a1 + 1312) = v53;
      *(_OWORD *)(a1 + 1368) = *(_OWORD *)(a2 + 1368);
      v56 = *(_OWORD *)(a2 + 1384);
      v57 = *(_OWORD *)(a2 + 1400);
      v58 = *(_OWORD *)(a2 + 1416);
      *(_QWORD *)(a1 + 1432) = *(_QWORD *)(a2 + 1432);
      *(_OWORD *)(a1 + 1416) = v58;
      *(_OWORD *)(a1 + 1384) = v56;
      *(_OWORD *)(a1 + 1400) = v57;
      *(_OWORD *)(a1 + 1440) = *(_OWORD *)(a2 + 1440);
      v59 = *(_OWORD *)(a2 + 1456);
      v60 = *(_OWORD *)(a2 + 1472);
      v61 = *(_OWORD *)(a2 + 1488);
      *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
      *(_OWORD *)(a1 + 1488) = v61;
      *(_OWORD *)(a1 + 1472) = v60;
      *(_OWORD *)(a1 + 1456) = v59;
      memcpy((void *)(a1 + 1512), (const void *)(a2 + 1512), 0x288uLL);
      v62 = *(_OWORD *)(a2 + 2160);
      *(_QWORD *)(a1 + 2176) = *(_QWORD *)(a2 + 2176);
      *(_OWORD *)(a1 + 2160) = v62;
      v63 = *(_QWORD *)(a2 + 2200);
      *(_OWORD *)(a1 + 2184) = *(_OWORD *)(a2 + 2184);
      *(_QWORD *)(a1 + 2200) = v63;
      memcpy((void *)(a1 + 2208), (const void *)(a2 + 2208), 0x288uLL);
      memcpy((void *)(a1 + 2856), (const void *)(a2 + 2856), 0x288uLL);
      v64 = *(_OWORD *)(a2 + 3504);
      *(_QWORD *)(a1 + 3520) = *(_QWORD *)(a2 + 3520);
      *(_OWORD *)(a1 + 3504) = v64;
      *(_OWORD *)(a1 + 3528) = *(_OWORD *)(a2 + 3528);
      *(_BYTE *)(a1 + 3544) = 1;
    }
    *(_BYTE *)(a1 + 3552) = 1;
  }
  *(_QWORD *)(a1 + 3576) = 0;
  *(_OWORD *)(a1 + 3560) = 0u;
  *(_QWORD *)(a1 + 3560) = *(_QWORD *)(a2 + 3560);
  *(_QWORD *)(a1 + 3568) = *(_QWORD *)(a2 + 3568);
  *(_QWORD *)(a1 + 3576) = *(_QWORD *)(a2 + 3576);
  *(_QWORD *)(a2 + 3576) = 0;
  *(_OWORD *)(a2 + 3560) = 0u;
  v65 = *(_QWORD *)(a2 + 3584);
  *(_QWORD *)(a2 + 3584) = 0;
  *(_QWORD *)(a1 + 3584) = v65;
  v66 = *(_QWORD *)(a2 + 3592);
  *(_QWORD *)(a2 + 3592) = 0;
  *(_QWORD *)(a1 + 3592) = v66;
  v67 = *(_QWORD *)(a2 + 3600);
  *(_QWORD *)(a2 + 3600) = 0;
  *(_QWORD *)(a1 + 3600) = v67;
  *(_BYTE *)(a1 + 3608) = 0;
  *(_BYTE *)(a1 + 4456) = 0;
  if (*(_BYTE *)(a2 + 4456))
  {
    *(_OWORD *)(a1 + 3608) = *(_OWORD *)(a2 + 3608);
    v68 = *(_OWORD *)(a2 + 3720);
    v70 = *(_OWORD *)(a2 + 3672);
    v69 = *(_OWORD *)(a2 + 3688);
    *(_OWORD *)(a1 + 3704) = *(_OWORD *)(a2 + 3704);
    *(_OWORD *)(a1 + 3720) = v68;
    *(_OWORD *)(a1 + 3672) = v70;
    *(_OWORD *)(a1 + 3688) = v69;
    v72 = *(_OWORD *)(a2 + 3752);
    v71 = *(_OWORD *)(a2 + 3768);
    v73 = *(_OWORD *)(a2 + 3736);
    *(_QWORD *)(a1 + 3784) = *(_QWORD *)(a2 + 3784);
    *(_OWORD *)(a1 + 3752) = v72;
    *(_OWORD *)(a1 + 3768) = v71;
    *(_OWORD *)(a1 + 3736) = v73;
    v74 = *(_OWORD *)(a2 + 3624);
    v75 = *(_OWORD *)(a2 + 3656);
    *(_OWORD *)(a1 + 3640) = *(_OWORD *)(a2 + 3640);
    *(_OWORD *)(a1 + 3656) = v75;
    *(_OWORD *)(a1 + 3624) = v74;
    memcpy((void *)(a1 + 3792), (const void *)(a2 + 3792), 0x120uLL);
    memcpy((void *)(a1 + 4080), (const void *)(a2 + 4080), 0x120uLL);
    *(_QWORD *)(a1 + 4368) = 0;
    *(_OWORD *)(a1 + 4376) = 0u;
    *(_OWORD *)(a1 + 4368) = *(_OWORD *)(a2 + 4368);
    *(_QWORD *)(a1 + 4384) = *(_QWORD *)(a2 + 4384);
    *(_OWORD *)(a2 + 4368) = 0u;
    *(_QWORD *)(a2 + 4384) = 0;
    v76 = *(_QWORD *)(a2 + 4408);
    *(_OWORD *)(a1 + 4392) = *(_OWORD *)(a2 + 4392);
    *(_QWORD *)(a1 + 4408) = v76;
    v77 = *(_QWORD *)(a2 + 4432);
    *(_OWORD *)(a1 + 4416) = *(_OWORD *)(a2 + 4416);
    *(_QWORD *)(a1 + 4432) = v77;
    *(_OWORD *)(a1 + 4440) = *(_OWORD *)(a2 + 4440);
    *(_BYTE *)(a1 + 4456) = 1;
  }
  *(_QWORD *)(a1 + 4464) = *(_QWORD *)(a2 + 4464);
  return a1;
}

void sub_20F3149D8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F3149EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD7D8;
  result[1] = v3;
  return result;
}

uint64_t sub_20F314A20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD7D8;
  a2[1] = v2;
  return result;
}

void sub_20F314A3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  sub_20F302D9C(v2, a2, (uint64_t)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_20F314A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F314AAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F314B18()
{
  return &unk_24C9FD838;
}

void sub_20F314B28()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F314B3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD858;
  result[1] = v3;
  return result;
}

uint64_t sub_20F314B70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD858;
  a2[1] = v2;
  return result;
}

void sub_20F314B8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *a2;
  v6 = a2[1];
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20F24ED70(*(_QWORD **)(v4 + 2816), v5, v6, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20F302D9C(v3, a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
}

void sub_20F314C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F314C3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F314CA8()
{
  return &unk_24C9FD8B8;
}

void sub_20F314CB8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F314CCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD8D8;
  result[1] = v3;
  return result;
}

uint64_t sub_20F314D00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD8D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F314D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  void *p_p;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  size_t v24;
  void **p_dst;
  unint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  size_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  const char *v36;
  size_t v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  size_t v50;
  size_t v51;
  _BYTE *v52;
  void *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  char *v63;
  char *shared_owners;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  const char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  const char *v88;
  uint64_t v89;
  int v90;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v93;
  int v94;
  const char *v95;
  int v96;
  const char *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void **__dst;
  size_t v101;
  int64_t v102;
  _QWORD v103[2];
  _QWORD v104[3];
  const void *v105;
  uint64_t v106;
  const void *v107;
  unint64_t v108;
  void *v109;
  char v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[24];
  unint64_t v116;
  char v117;
  void *v118[2];
  unint64_t v119;
  char v120;
  _QWORD v121[5];

  v121[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  sub_20F2FC0E0(&v114);
  if (**(int **)(v114 + 56) > 2)
    return sub_20F30110C(v3, a2);
  v4 = *(unsigned __int8 *)(v114 + 72);
  v5 = sub_20E8C31DC(v114, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return sub_20F30110C(v3, a2);
  v7 = v5;
  sub_20E863438((uint64_t)v103);
  sub_20E86A980(v104, (uint64_t)"[CM][", 5);
  v8 = (_QWORD *)std::ostream::operator<<();
  v9 = sub_20E86A980(v8, (uint64_t)"] ", 2);
  v10 = sub_20E86A980(v9, (uint64_t)"process ext reloc result: ", 26);
  v11 = sub_20E86A980(v10, (uint64_t)"Edge (", 6);
  v12 = *(_DWORD *)(a2 + 8);
  __p = *(void **)a2;
  LODWORD(rep) = v12;
  sub_210216370((uint64_t)&__p);
  if (v115[23] >= 0)
    v13 = v115;
  else
    v13 = *(_BYTE **)v115;
  if (v115[23] >= 0)
    v14 = v115[23];
  else
    v14 = *(_QWORD *)&v115[8];
  v15 = sub_20E86A980(v11, (uint64_t)v13, v14);
  v16 = sub_20E86A980(v15, (uint64_t)") ", 2);
  v17 = sub_20E86A980(v16, (uint64_t)"-> (", 4);
  v18 = *(_DWORD *)(a2 + 32);
  __dst = *(void ***)(a2 + 24);
  LODWORD(v101) = v18;
  sub_210216370((uint64_t)&__dst);
  if (v93 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v93 >= 0)
    v20 = HIBYTE(v93);
  else
    v20 = rep;
  v21 = sub_20E86A980(v17, (uint64_t)p_p, v20);
  v22 = sub_20E86A980(v21, (uint64_t)"), ", 3);
  sub_20E86A980(v22, (uint64_t)"type ", 5);
  std::ostream::operator<<();
  if (SHIBYTE(v93) < 0)
  {
    operator delete(__p);
    if ((v115[23] & 0x80000000) == 0)
    {
LABEL_20:
      v23 = v112;
      v89 = v3;
      v90 = v4;
      if ((v112 & 0x10) == 0)
        goto LABEL_21;
LABEL_25:
      v26 = v111;
      if (v111 < v108)
      {
        v111 = v108;
        v26 = v108;
      }
      v27 = v107;
      v24 = v26 - (_QWORD)v107;
      if (v26 - (unint64_t)v107 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_80;
      goto LABEL_28;
    }
  }
  else if ((v115[23] & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(*(void **)v115);
  v23 = v112;
  v89 = v3;
  v90 = v4;
  if ((v112 & 0x10) != 0)
    goto LABEL_25;
LABEL_21:
  if ((v23 & 8) == 0)
  {
    v24 = 0;
    HIBYTE(v102) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_35;
  }
  v27 = v105;
  v24 = v106 - (_QWORD)v105;
  if ((unint64_t)(v106 - (_QWORD)v105) > 0x7FFFFFFFFFFFFFF7)
LABEL_80:
    sub_20E860B7C();
LABEL_28:
  if (v24 >= 0x17)
  {
    v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v28 = v24 | 7;
    v29 = v28 + 1;
    p_dst = (void **)operator new(v28 + 1);
    v101 = v24;
    v102 = v29 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_34;
  }
  HIBYTE(v102) = v24;
  p_dst = (void **)&__dst;
  if (v24)
LABEL_34:
    memmove(p_dst, v27, v24);
LABEL_35:
  *((_BYTE *)p_dst + v24) = 0;
  __p = &v114;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v93 = std::chrono::system_clock::now().__d_.__rep_;
  v94 = 2;
  v95 = "unknown file";
  v96 = 1096;
  v98 = 0;
  v99 = 0;
  v97 = "unknown function";
  if (v102 >= 0)
    v30 = (const char *)&__dst;
  else
    v30 = (const char *)__dst;
  v31 = *(_QWORD *)__p;
  v32 = (const char *)(*(_QWORD *)__p + 16);
  v88 = v32;
  if (*(char *)(*(_QWORD *)__p + 39) < 0)
  {
    v32 = *(const char **)(v31 + 16);
    v33 = *(_QWORD *)(v31 + 24);
    v35 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v35 & 1) != 0)
      goto LABEL_42;
  }
  else
  {
    v33 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v34 & 1) != 0)
      goto LABEL_42;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v115);
    if ((_BYTE)v116)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v115;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v115[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_42:
  if (byte_254A4A4F8[23] >= 0)
    v36 = byte_254A4A4F8;
  else
    v36 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v37 = byte_254A4A4F8[23];
  else
    v37 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v115 = os_log_create(v36, v32);
  v38 = &v115[8];
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v37 >= 0x17)
  {
    v39 = v7;
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    v38 = operator new(v40 + 1);
    *(_QWORD *)&v115[16] = v37;
    v116 = v41 | 0x8000000000000000;
    *(_QWORD *)&v115[8] = v38;
    v7 = v39;
    goto LABEL_55;
  }
  HIBYTE(v116) = v37;
  if (v37)
LABEL_55:
    memmove(v38, v36, v37);
  v38[v37] = 0;
  v117 = 1;
  v42 = v118;
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v33 >= 0x17)
  {
    v44 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v44 = v33 | 7;
    v45 = v44 + 1;
    v42 = (void **)operator new(v44 + 1);
    v118[1] = (void *)v33;
    v119 = v45 | 0x8000000000000000;
    v118[0] = v42;
  }
  else
  {
    HIBYTE(v119) = v33;
    if (!v33)
    {
      LOBYTE(v118[0]) = 0;
      v120 = 1;
      v43 = *(NSObject **)v115;
      if ((SHIBYTE(v119) & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_66;
    }
  }
  memmove(v42, v32, v33);
  *((_BYTE *)v42 + v33) = 0;
  v120 = 1;
  v43 = *(NSObject **)v115;
  if ((SHIBYTE(v119) & 0x80000000) == 0)
  {
LABEL_60:
    if (!v117)
      goto LABEL_69;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(v118[0]);
  if (!v117)
    goto LABEL_69;
LABEL_67:
  if (SHIBYTE(v116) < 0)
    operator delete(*(void **)&v115[8]);
LABEL_69:
  if (*(_QWORD *)v115)
    os_release(*(void **)v115);
  if (!v7 || !*(_QWORD *)(v7 + 24))
  {
    os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v115 = 136315138;
    *(_QWORD *)&v115[4] = v30;
    v53 = (void *)_os_log_send_and_compose_impl();
    v54 = v90;
    if (v53)
      free(v53);
    goto LABEL_110;
  }
  v46 = _os_log_pack_size();
  v47 = (std::__shared_weak_count_vtbl *)operator new(v46, (std::align_val_t)8uLL);
  v48 = (std::__shared_weak_count *)operator new();
  v48->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v48->__shared_owners_;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v48->__shared_weak_owners_ = 0;
  v48[1].__vftable = v47;
  v50 = strlen(v30);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v51 = v50;
  v87 = v47;
  if (v50 >= 0x17)
  {
    v55 = v7;
    v56 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v56 = v50 | 7;
    v57 = v56 + 1;
    v52 = operator new(v56 + 1);
    *(_QWORD *)&v115[8] = v51;
    *(_QWORD *)&v115[16] = v57 | 0x8000000000000000;
    *(_QWORD *)v115 = v52;
    v7 = v55;
    goto LABEL_84;
  }
  v115[23] = v50;
  v52 = v115;
  if (v50)
LABEL_84:
    memcpy(v52, v30, v51);
  v86 = v7;
  v52[v51] = 0;
  v121[0] = *(_QWORD *)&v115[8];
  v58 = *(_QWORD *)v115;
  *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)&v115[15];
  v59 = v115[23];
  v60 = operator new(0x38uLL);
  v61 = (std::__shared_weak_count *)v60;
  v60[1] = 0;
  v62 = v60 + 1;
  v60[3] = off_24C9ABC20;
  v63 = (char *)(v60 + 3);
  v60[2] = 0;
  v60[4] = v58;
  shared_owners = (char *)(v60 + 4);
  *v60 = &off_24C9ABBD0;
  v60[5] = v121[0];
  *(_QWORD *)((char *)v60 + 47) = *(_QWORD *)((char *)v121 + 7);
  *((_BYTE *)v60 + 55) = v59;
  do
    v65 = __ldxr(p_shared_owners);
  while (__stxr(v65 + 1, p_shared_owners));
  do
    v66 = __ldxr(v62);
  while (__stxr(v66 + 1, v62));
  do
    v67 = __ldaxr(v62);
  while (__stlxr(v67 - 1, v62));
  if (!v67)
  {
    (*(void (**)(_QWORD *))(*v60 + 16))(v60);
    std::__shared_weak_count::__release_weak(v61);
  }
  do
    v68 = __ldaxr(p_shared_owners);
  while (__stlxr(v68 - 1, p_shared_owners));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  if (SHIBYTE(v61[2].__vftable) < 0)
    shared_owners = (char *)v61[1].__shared_owners_;
  v69 = _os_log_pack_fill();
  *(_DWORD *)v69 = 136315138;
  *(_QWORD *)(v69 + 4) = shared_owners;
  v70 = operator new();
  v71 = *(unsigned __int8 *)(v31 + 39);
  v72 = v88;
  if ((v71 & 0x80u) != 0)
  {
    v72 = *(const char **)(v31 + 16);
    v71 = *(_QWORD *)(v31 + 24);
  }
  *(_QWORD *)v70 = v87;
  *(_QWORD *)(v70 + 8) = v87;
  *(_QWORD *)(v70 + 16) = v48;
  *(_QWORD *)(v70 + 24) = v63;
  *(_QWORD *)(v70 + 32) = v61;
  *(_QWORD *)(v70 + 40) = v72;
  *(_QWORD *)(v70 + 48) = v71;
  *(_BYTE *)(v70 + 56) = 2;
  *(_QWORD *)v115 = v70;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v86 + 24) + 40))(*(_QWORD *)(v86 + 24), v115);
  v73 = *(_QWORD *)v115;
  *(_QWORD *)v115 = 0;
  v54 = v90;
  if (v73)
  {
    v74 = *(std::__shared_weak_count **)(v73 + 32);
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = *(std::__shared_weak_count **)(v73 + 16);
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
  }
LABEL_110:
  if (v54)
  {
    v80 = (const char *)&__dst;
    if (v102 < 0)
      v80 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&__p, "%s", v80);
    sub_20E863570((uint64_t)&__p);
  }
  sub_20E863570((uint64_t)&__p);
  v81 = v99;
  if (v99)
  {
    v82 = (unint64_t *)&v99->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(__dst);
  v103[0] = *MEMORY[0x24BEDB7F0];
  v84 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v103 + *(_QWORD *)(v103[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v104[0] = v84;
  v104[1] = MEMORY[0x24BEDB848] + 16;
  if (v110 < 0)
    operator delete(v109);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v113);
  v3 = v89;
  return sub_20F30110C(v3, a2);
}

void sub_20F315760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  uint64_t v60;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v57 = a30;
  if (a30)
  {
    p_shared_owners = (unint64_t *)&a30->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (a36 < 0)
    operator delete(__p);
  a37 = *MEMORY[0x24BEDB7F0];
  v60 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a37 + *(_QWORD *)(a37 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a39 = v60;
  a40 = MEMORY[0x24BEDB848] + 16;
  if (a53 < 0)
    operator delete(a48);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_20F315A44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F315AB0()
{
  return &unk_24C9FD948;
}

void sub_20F315AC0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F315AD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD968;
  result[1] = v3;
  return result;
}

uint64_t sub_20F315B08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD968;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F315B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  void **v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  size_t v71;
  __int128 *p_dst;
  unint64_t v73;
  unint64_t v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  size_t v82;
  void *v83;
  _BYTE *v84;
  void **v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  const char *v91;
  size_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  const char *v95;
  size_t v96;
  void **v97;
  uint64_t v98;
  uint64_t v99;
  void **v100;
  NSObject *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  size_t v109;
  void *v110;
  void **v111;
  void *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  void *v117;
  char v118;
  _QWORD *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *shared_owners;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  const char *v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  const char *v139;
  std::__shared_weak_count *v140;
  unint64_t *p_shared_owners;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _OWORD **v146;
  _OWORD **v147;
  void *v148;
  int v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 v178;
  const char *v179;
  size_t v180;
  _BYTE *v181;
  unint64_t v182;
  const char *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  size_t v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  void *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t *v218;
  unint64_t v219;
  unsigned int v220;
  uint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  uint64_t v232;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v290;
  int v291;
  uint64_t v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  uint64_t v299[3];
  int v300;
  const char *v301;
  int v302;
  const char *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  void *__p[2];
  unsigned __int8 v307;
  void *v308[2];
  unsigned __int8 v309;
  void *v310[2];
  unsigned __int8 v311;
  void *v312;
  size_t v313;
  int64_t v314;
  uint64_t v315;
  void **v316;
  _BYTE object[24];
  unint64_t v318;
  char v319;
  void *v320[2];
  unint64_t v321;
  _BYTE v322[8];
  void *v323;
  void *v324;
  void *v325;
  char v326;
  char v327;
  _BYTE *v328;
  int v329;
  uint64_t v330;
  void *v331[3];
  __int128 *v332;
  const char *v333;
  void **v334;
  const char *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  __int128 __dst;
  unint64_t v339;
  char v340;
  uint64_t v341;

  v2 = a2;
  v341 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(int8x8_t *)(v3 + 8);
  if (!*(_QWORD *)&v4)
    goto LABEL_43;
  v5 = *(_QWORD *)(a2 + 896);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *(_QWORD *)(a2 + 896);
    if (v5 >= *(_QWORD *)&v4)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (*(_QWORD *)&v4 - 1) & v5;
  }
  v8 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v7);
  if (!v8)
  {
LABEL_43:
    v9 = 0;
    goto LABEL_44;
  }
  v9 = (_QWORD *)*v8;
  if (!*v8)
  {
LABEL_44:
    v31 = 1;
    goto LABEL_45;
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == v5)
      {
        if (v9[2] == v5)
          goto LABEL_21;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_43;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_44;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v5)
      break;
    if (v11 >= *(_QWORD *)&v4)
      v11 %= *(_QWORD *)&v4;
    if (v11 != v7)
      goto LABEL_43;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_44;
  }
  if (v9[2] != v5)
    goto LABEL_11;
LABEL_21:
  v287 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD **)(a2 + 928);
  v14 = (_QWORD *)(a2 + 936);
  if (v13 != (_QWORD *)(a2 + 936))
  {
    v15 = *(uint64_t **)(v9[5] + 424);
    do
    {
      v16 = *v15;
      v17 = *(_QWORD *)(*v15 + 304);
      if (!v17)
        goto LABEL_35;
      v18 = *((_DWORD *)v13 + 8);
      v19 = v16 + 304;
      v20 = v16 + 304;
      do
      {
        v21 = *(_DWORD *)(v17 + 32);
        v22 = v21 >= v18;
        if (v21 >= v18)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 != v19 && *(_DWORD *)(v20 + 32) <= v18)
      {
        *(_OWORD *)(v20 + 40) = *(_OWORD *)(v13 + 5);
        v27 = *(_OWORD *)(v13 + 7);
        v28 = *(_OWORD *)(v13 + 9);
        v29 = *(_OWORD *)(v13 + 11);
        *(_QWORD *)(v20 + 104) = v13[13];
        *(_OWORD *)(v20 + 88) = v29;
        *(_OWORD *)(v20 + 72) = v28;
        *(_OWORD *)(v20 + 56) = v27;
        v30 = *((_OWORD *)v13 + 7);
        *(_QWORD *)(v20 + 128) = v13[16];
        *(_OWORD *)(v20 + 112) = v30;
        v25 = (_QWORD *)v13[1];
        if (!v25)
          goto LABEL_40;
      }
      else
      {
LABEL_35:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 557, (uint64_t)"T_I_to_C_ptr", 12, (uint64_t)"Cannot find the corresponding camera in viodatabase", 51, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_432;
        }
        MEMORY[0x40] = v13[13];
        MEMORY[0x10] = *(_OWORD *)(v13 + 7);
        MEMORY[0x20] = *(_OWORD *)(v13 + 9);
        MEMORY[0x30] = *(_OWORD *)(v13 + 11);
        MEMORY[0] = *(_OWORD *)(v13 + 5);
        v24 = v13[16];
        MEMORY[0x48] = *((_OWORD *)v13 + 7);
        MEMORY[0x58] = v24;
        v25 = (_QWORD *)v13[1];
        if (!v25)
        {
          do
          {
LABEL_40:
            v26 = (_QWORD *)v13[2];
            v49 = *v26 == (_QWORD)v13;
            v13 = v26;
          }
          while (!v49);
          goto LABEL_23;
        }
      }
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
LABEL_23:
      v13 = v26;
    }
    while (v26 != v14);
  }
  v3 = v287;
  v177 = *(_QWORD *)(v287 + 80);
  if (*(_BYTE *)(v177 + 2499))
  {
    v31 = 0;
    v2 = a2;
  }
  else
  {
    v2 = a2;
    sub_20F3374D0(v177, *(_QWORD *)(v177 + 2808), (_QWORD *)(a2 + 928));
    v31 = 0;
  }
LABEL_45:
  v32 = *(_QWORD *)(v3 + 80);
  if (*(_BYTE *)(v32 + 2499))
  {
    sub_20F3374D0(*(_QWORD *)(v3 + 80), *(_QWORD *)(v2 + 896), (_QWORD *)(v2 + 928));
    v32 = *(_QWORD *)(v3 + 80);
  }
  v33 = (uint64_t *)(v2 + 880);
  if (!sub_20F325654(v32, (uint64_t *)(v2 + 880)))
  {
    kdebug_trace();
    v40 = *(_QWORD *)(v3 + 80);
    if (*(_BYTE *)(v40 + 2499))
    {
      v41 = *(_QWORD **)(v40 + 2824);
      v42 = *(_QWORD **)(v40 + 2832);
      if (v41 != v42)
      {
        while (1)
        {
          v43 = v41[2];
          if (v43)
          {
            if (*(_QWORD *)(v43 + 160) == *(_QWORD *)(v2 + 896))
              break;
          }
          v41 += 559;
          if (v41 == v42)
            goto LABEL_237;
        }
      }
      if (v41 == v42 || !v41)
      {
LABEL_237:
        if ((v31 & 1) != 0)
        {
LABEL_238:
          v143 = 0;
LABEL_378:
          kdebug_trace();
          return v143;
        }
        v144 = v9 + 3;
        if (*(_BYTE *)(*(_QWORD *)(v3 + 80) + 2499)
          && (v145 = **(_QWORD **)(v9[5] + 424), *(_QWORD *)(v145 + 64) != (uint64_t)(v9[8] - v9[7]) >> 4))
        {
          v218 = *(uint64_t **)(v145 + 56);
          v216 = (uint64_t *)(v145 + 56);
          v217 = v218;
          if (v218)
          {
            v219 = *(_QWORD *)(v2 + 880);
            v220 = *(_DWORD *)(v2 + 888);
            v221 = v216;
            do
            {
              v222 = v217[4];
              if (v222 < v219)
              {
                ++v217;
              }
              else if (v222 == v219)
              {
                if (*((_DWORD *)v217 + 10) < v220)
                  ++v217;
                else
                  v221 = v217;
              }
              else
              {
                v221 = v217;
              }
              v217 = (uint64_t *)*v217;
            }
            while (v217);
            if (v221 != v216)
            {
              v223 = v221[4];
              if (v219 >= v223 && (v219 != v223 || *((_DWORD *)v221 + 10) <= v220))
              {
                if (v221[6])
                  goto LABEL_377;
              }
            }
          }
          if (!sub_20F26D930(v144, v2))
            goto LABEL_238;
        }
        else
        {
          sub_20F26F3F4((uint64_t)v144, v2);
        }
        if (*(_QWORD *)(v3 + 40))
        {
          v146 = *(_OWORD ***)v2;
          v147 = *(_OWORD ***)(v2 + 8);
          if (*(_OWORD ***)v2 != v147)
          {
            while (1)
            {
              *(_QWORD *)&object[16] = -1;
              v318 = -1;
              *(_QWORD *)&object[8] = -1;
              v319 = 0;
              LOBYTE(v321) = 0;
              v322[0] = 0;
              v322[4] = 0;
              v326 = 0;
              v324 = 0;
              v325 = 0;
              v323 = 0;
              *(_QWORD *)object = *(_QWORD *)(v2 + 896);
              v149 = *((_DWORD *)*v146 + 4);
              *(_OWORD *)&object[8] = **v146;
              LODWORD(v318) = v149;
              v150 = *(_QWORD *)(v3 + 40);
              memset(v331, 0, sizeof(v331));
              sub_20F23216C(v150, (uint64_t)object, (uint64_t)v331);
              if ((SHIBYTE(v331[2]) & 0x80000000) == 0)
                break;
              operator delete(v331[0]);
              v148 = v323;
              if (v323)
                goto LABEL_246;
LABEL_247:
              v146 += 69;
              if (v146 == v147)
                goto LABEL_251;
            }
            v148 = v323;
            if (!v323)
              goto LABEL_247;
LABEL_246:
            v324 = v148;
            operator delete(v148);
            goto LABEL_247;
          }
        }
LABEL_251:
        if (!*(_QWORD *)(v3 + 56))
        {
LABEL_376:
          *(_WORD *)(v3 + 1344) = 257;
LABEL_377:
          v143 = 1;
          goto LABEL_378;
        }
        sub_20F23A0A0(**(_QWORD ***)(v9[5] + 424), (__int128 *)(v2 + 880), (char **)object);
        v151 = *(_QWORD **)(v3 + 56);
        v152 = v151[7];
        v153 = v151[8];
        if (v152 != v153)
        {
          v154 = *(_QWORD *)object;
          v155 = *(_QWORD *)&object[8];
          if (*(_QWORD *)object != *(_QWORD *)&object[8])
          {
            do
            {
              v156 = 0;
              v157 = v154;
              do
              {
                if (*(_DWORD *)(v157 + 16) == *(_DWORD *)(v152 + 16) && *(_QWORD *)v157 == *(_QWORD *)v152)
                  v156 += *(_DWORD *)(v157 + 8) == *(_DWORD *)(v152 + 8);
                v157 += 24;
              }
              while (v157 != v155);
              v158 = 0;
              v159 = v154;
              do
              {
                if (*(_DWORD *)(v159 + 16) == *(_DWORD *)(v152 + 40) && *(_QWORD *)v159 == *(_QWORD *)(v152 + 24))
                  v158 += *(_DWORD *)(v159 + 8) == *(_DWORD *)(v152 + 32);
                v159 += 24;
              }
              while (v159 != v155);
              if (v156 | v158)
                *(_BYTE *)(v152 + 472) = 1;
              v152 += 480;
            }
            while (v152 != v153);
          }
        }
        v174 = v151[4];
        v173 = v151[5];
        if (v174 != v173)
        {
          v175 = v173 - v174 - 376;
          if (v175 >= 0x178)
          {
            v224 = v175 / 0x178 + 1;
            v176 = v174 + 376 * (v224 & 0x1FFFFFFFFFFFFFELL);
            v225 = v224 & 0x1FFFFFFFFFFFFFELL;
            do
            {
              *(_BYTE *)(v174 + 368) = 1;
              *(_BYTE *)(v174 + 744) = 1;
              v174 += 752;
              v225 -= 2;
            }
            while (v225);
            if (v224 == (v224 & 0x1FFFFFFFFFFFFFELL))
              goto LABEL_368;
          }
          else
          {
            v176 = v151[4];
          }
          do
          {
            *(_BYTE *)(v176 + 368) = 1;
            v176 += 376;
          }
          while (v176 != v173);
        }
LABEL_368:
        v227 = v151[22];
        v226 = v151[23];
        if (v227 != v226)
        {
          v228 = v226 - v227 - 112;
          v229 = v227;
          if (v228 < 0x70)
            goto LABEL_449;
          v230 = (((v228 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
          v229 = v227 + 112 * (v230 & 0x7FFFFFFFFFFFFFELL);
          v231 = (_BYTE *)(v227 + 216);
          v232 = v230 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v231 - 112) = 1;
            *v231 = 1;
            v231 += 224;
            v232 -= 2;
          }
          while (v232);
          if (v230 != (v230 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_449:
            do
            {
              *(_BYTE *)(v229 + 104) = 1;
              v229 += 112;
            }
            while (v229 != v226);
          }
        }
        if (*(_QWORD *)object)
        {
          *(_QWORD *)&object[8] = *(_QWORD *)object;
          operator delete(*(void **)object);
        }
        goto LABEL_376;
      }
    }
    else
    {
      v41 = *(_QWORD **)(v40 + 2816);
    }
    if (!sub_20F26D930(v41, v2))
      goto LABEL_237;
    v44 = *(_QWORD *)(v2 + 904);
    v45 = *(_QWORD *)(v2 + 912);
    if (v44 != v45)
    {
      v292 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v294 = *MEMORY[0x24BEDB7F0];
      v296 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v284 = MEMORY[0x24BEDB848] + 16;
      v281 = *(_QWORD *)(v2 + 912);
      v288 = v3;
      v290 = v2;
      while (1)
      {
        sub_20F30110C(v3, v44);
        sub_20F2FC0E0(&v315);
        if (**(int **)(v315 + 56) <= 2)
        {
          v46 = *(unsigned __int8 *)(v315 + 72);
          v47 = sub_20E8C31DC(v315, "OSLogSurrogateAppender", 1, 0);
          v48 = v47;
          v49 = !v46 && v47 == 0;
          if (!v49)
            break;
        }
LABEL_69:
        v44 += 472;
        if (v44 == v45)
          goto LABEL_268;
      }
      sub_20E863438((uint64_t)object);
      v50 = sub_20E86A980(&object[16], (uint64_t)"[CM] ", 5);
      sub_20E86A980(v50, (uint64_t)"[", 1);
      v51 = (_QWORD *)std::ostream::operator<<();
      v52 = sub_20E86A980(v51, (uint64_t)"]", 1);
      v53 = sub_20E86A980(v52, (uint64_t)"Process external keyframe ", 26);
      v54 = *(_DWORD *)(v2 + 888);
      v331[0] = *(void **)(v2 + 880);
      LODWORD(v331[1]) = v54;
      sub_210216370((uint64_t)v331);
      if (v314 >= 0)
        v55 = &v312;
      else
        v55 = v312;
      if (v314 >= 0)
        v56 = HIBYTE(v314);
      else
        v56 = v313;
      v57 = sub_20E86A980(v53, (uint64_t)v55, v56);
      v58 = sub_20E86A980(v57, (uint64_t)"Edge ", 5);
      v59 = *(_DWORD *)(v44 + 32);
      v331[0] = *(void **)(v44 + 24);
      LODWORD(v331[1]) = v59;
      sub_210216370((uint64_t)v331);
      if ((v311 & 0x80u) == 0)
        v60 = v310;
      else
        v60 = (void **)v310[0];
      if ((v311 & 0x80u) == 0)
        v61 = v311;
      else
        v61 = (uint64_t)v310[1];
      v62 = sub_20E86A980(v58, (uint64_t)v60, v61);
      v63 = sub_20E86A980(v62, (uint64_t)"<->", 3);
      v64 = *(_DWORD *)(v44 + 8);
      v331[0] = *(void **)v44;
      LODWORD(v331[1]) = v64;
      sub_210216370((uint64_t)v331);
      if ((v309 & 0x80u) == 0)
        v65 = v308;
      else
        v65 = (void **)v308[0];
      if ((v309 & 0x80u) == 0)
        v66 = v309;
      else
        v66 = (uint64_t)v308[1];
      v67 = sub_20E86A980(v63, (uint64_t)v65, v66);
      v68 = sub_20E86A980(v67, (uint64_t)"is consumed: ", 13);
      v300 = 0;
      v69 = operator new();
      v297 = v48;
      *(_QWORD *)(v69 + 272) = 0;
      *(_OWORD *)(v69 + 240) = 0u;
      *(_OWORD *)(v69 + 256) = 0u;
      *(_OWORD *)(v69 + 208) = 0u;
      *(_OWORD *)(v69 + 224) = 0u;
      *(_OWORD *)(v69 + 176) = 0u;
      *(_OWORD *)(v69 + 192) = 0u;
      *(_OWORD *)(v69 + 144) = 0u;
      *(_OWORD *)(v69 + 160) = 0u;
      *(_OWORD *)(v69 + 112) = 0u;
      *(_OWORD *)(v69 + 128) = 0u;
      *(_OWORD *)(v69 + 80) = 0u;
      *(_OWORD *)(v69 + 96) = 0u;
      *(_OWORD *)(v69 + 48) = 0u;
      *(_OWORD *)(v69 + 64) = 0u;
      *(_OWORD *)(v69 + 16) = 0u;
      *(_OWORD *)(v69 + 32) = 0u;
      *(_OWORD *)v69 = 0u;
      sub_20E863438(v69);
      std::ostream::operator<<();
      v70 = *(_DWORD *)(v69 + 120);
      if ((v70 & 0x10) != 0)
      {
        v73 = *(_QWORD *)(v69 + 112);
        v74 = *(_QWORD *)(v69 + 72);
        if (v73 < v74)
        {
          *(_QWORD *)(v69 + 112) = v74;
          v73 = v74;
        }
        v75 = *(const void **)(v69 + 64);
        v71 = v73 - (_QWORD)v75;
        if (v73 - (unint64_t)v75 > 0x7FFFFFFFFFFFFFF7)
LABEL_438:
          sub_20E860B7C();
      }
      else
      {
        if ((v70 & 8) == 0)
        {
          v71 = 0;
          HIBYTE(v339) = 0;
          p_dst = &__dst;
          goto LABEL_108;
        }
        v75 = *(const void **)(v69 + 40);
        v71 = *(_QWORD *)(v69 + 56) - (_QWORD)v75;
        if (v71 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_438;
      }
      if (v71 >= 0x17)
      {
        v76 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v71 | 7) != 0x17)
          v76 = v71 | 7;
        v77 = v76 + 1;
        p_dst = (__int128 *)operator new(v76 + 1);
        *((_QWORD *)&__dst + 1) = v71;
        v339 = v77 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v339) = v71;
        p_dst = &__dst;
        if (!v71)
        {
LABEL_108:
          v291 = v46;
          *((_BYTE *)p_dst + v71) = 0;
          *(_QWORD *)v69 = v294;
          *(_QWORD *)(v69 + *(_QWORD *)(v294 - 24)) = v292;
          *(_QWORD *)(v69 + 24) = v284;
          *(_QWORD *)(v69 + 16) = v296;
          if (*(char *)(v69 + 111) < 0)
            operator delete(*(void **)(v69 + 88));
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x212BC6290](v69 + 128);
          MEMORY[0x212BC6398](v69, 0x10B2C40EED050F3);
          v331[0] = v299;
          v331[1] = &__dst;
          v331[2] = v299;
          v332 = &__dst;
          v333 = (const char *)&__dst;
          if (v300 == -1)
            sub_20E877AB8();
          v316 = v331;
          ((void (*)(void ***, uint64_t *))off_24C9FDC28[v300])(&v316, v299);
          if (SHIBYTE(v339) < 0)
            operator delete((void *)__dst);
          if (v300 == -1)
            sub_20E877AB8();
          v331[0] = &__dst;
          ((void (*)(void **__return_ptr, void **, uint64_t *))off_24C9FDC58[v300])(__p, v331, v299);
          if (v300 != -1)
            ((void (*)(void **, uint64_t *))off_24C9FDC40[v300])(v331, v299);
          if ((v307 & 0x80u) == 0)
            v78 = __p;
          else
            v78 = (void **)__p[0];
          if ((v307 & 0x80u) == 0)
            v79 = v307;
          else
            v79 = (uint64_t)__p[1];
          v80 = sub_20E86A980(v68, (uint64_t)v78, v79);
          sub_20E86A980(v80, (uint64_t)", type ", 7);
          std::ostream::operator<<();
          if ((char)v307 < 0)
          {
            operator delete(__p[0]);
            if (((char)v309 & 0x80000000) == 0)
            {
LABEL_124:
              if (((char)v311 & 0x80000000) == 0)
                goto LABEL_125;
              goto LABEL_131;
            }
          }
          else if (((char)v309 & 0x80000000) == 0)
          {
            goto LABEL_124;
          }
          operator delete(v308[0]);
          if (((char)v311 & 0x80000000) == 0)
          {
LABEL_125:
            if ((SHIBYTE(v314) & 0x80000000) == 0)
              goto LABEL_126;
            goto LABEL_132;
          }
LABEL_131:
          operator delete(v310[0]);
          if ((SHIBYTE(v314) & 0x80000000) == 0)
          {
LABEL_126:
            v81 = v329;
            if ((v329 & 0x10) == 0)
            {
LABEL_127:
              if ((v81 & 8) == 0)
              {
                v82 = 0;
                HIBYTE(v314) = 0;
                v83 = &v312;
                goto LABEL_144;
              }
              v84 = (_BYTE *)v321;
              v85 = v320;
LABEL_136:
              v86 = *v85;
              v82 = v84 - (_BYTE *)*v85;
              if (v82 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v82 >= 0x17)
              {
                v87 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v82 | 7) != 0x17)
                  v87 = v82 | 7;
                v88 = v87 + 1;
                v83 = operator new(v87 + 1);
                v313 = v82;
                v314 = v88 | 0x8000000000000000;
                v312 = v83;
              }
              else
              {
                HIBYTE(v314) = (_BYTE)v84 - *(_BYTE *)v85;
                v83 = &v312;
                if (!v82)
                {
LABEL_144:
                  *((_BYTE *)v83 + v82) = 0;
                  v299[0] = (uint64_t)&v315;
                  v299[1] = std::chrono::steady_clock::now().__d_.__rep_;
                  v299[2] = std::chrono::system_clock::now().__d_.__rep_;
                  v300 = 2;
                  v301 = "unknown file";
                  v302 = 1420;
                  v303 = "unknown function";
                  v304 = 0;
                  v305 = 0;
                  if (v314 >= 0)
                    v89 = &v312;
                  else
                    v89 = v312;
                  v90 = *(_QWORD *)v299[0];
                  v91 = (const char *)(*(_QWORD *)v299[0] + 16);
                  v285 = v91;
                  v286 = *(_QWORD *)v299[0];
                  if (*(char *)(*(_QWORD *)v299[0] + 39) < 0)
                  {
                    v91 = *(const char **)(v90 + 16);
                    v92 = *(_QWORD *)(v90 + 24);
                    v94 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v94 & 1) != 0)
                      goto LABEL_151;
                  }
                  else
                  {
                    v92 = *(unsigned __int8 *)(*(_QWORD *)v299[0] + 39);
                    v93 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v93 & 1) != 0)
                      goto LABEL_151;
                  }
                  if (__cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)&__dst);
                    if (v340)
                    {
                      *(_OWORD *)byte_254A4A4F8 = __dst;
                      *(_QWORD *)&byte_254A4A4F8[16] = v339;
                    }
                    else
                    {
                      byte_254A4A4F8[23] = 14;
                      strcpy(byte_254A4A4F8, "com.apple.cv3d");
                    }
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                    v45 = v281;
                  }
LABEL_151:
                  if (byte_254A4A4F8[23] >= 0)
                    v95 = byte_254A4A4F8;
                  else
                    v95 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v96 = byte_254A4A4F8[23];
                  else
                    v96 = *(_QWORD *)&byte_254A4A4F8[8];
                  v331[0] = os_log_create(v95, v91);
                  if (v96 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v96 >= 0x17)
                  {
                    v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v96 | 7) != 0x17)
                      v98 = v96 | 7;
                    v99 = v98 + 1;
                    v97 = (void **)operator new(v98 + 1);
                    v331[2] = (void *)v96;
                    v332 = (__int128 *)(v99 | 0x8000000000000000);
                    v331[1] = v97;
                  }
                  else
                  {
                    HIBYTE(v332) = v96;
                    v97 = &v331[1];
                    if (!v96)
                    {
LABEL_165:
                      *((_BYTE *)v97 + v96) = 0;
                      LOBYTE(v333) = 1;
                      if (v92 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v3 = v288;
                      v2 = v290;
                      if (v92 >= 0x17)
                      {
                        v103 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v92 | 7) != 0x17)
                          v103 = v92 | 7;
                        v104 = v103 + 1;
                        v100 = (void **)operator new(v103 + 1);
                        v335 = (const char *)v92;
                        v336 = v104 | 0x8000000000000000;
                        v334 = v100;
                      }
                      else
                      {
                        HIBYTE(v336) = v92;
                        v100 = (void **)&v334;
                        if (!v92)
                        {
                          LOBYTE(v334) = 0;
                          LOBYTE(v337) = 1;
                          v101 = v331[0];
                          if ((SHIBYTE(v336) & 0x80000000) == 0)
                            goto LABEL_169;
                          goto LABEL_175;
                        }
                      }
                      memmove(v100, v91, v92);
                      *((_BYTE *)v100 + v92) = 0;
                      LOBYTE(v337) = 1;
                      v101 = v331[0];
                      if ((SHIBYTE(v336) & 0x80000000) == 0)
                      {
LABEL_169:
                        v102 = v297;
                        if (!(_BYTE)v333)
                          goto LABEL_178;
                        goto LABEL_176;
                      }
LABEL_175:
                      operator delete(v334);
                      v102 = v297;
                      if (!(_BYTE)v333)
                        goto LABEL_178;
LABEL_176:
                      if (SHIBYTE(v332) < 0)
                        operator delete(v331[1]);
LABEL_178:
                      if (v331[0])
                        os_release(v331[0]);
                      if (!v102 || !*(_QWORD *)(v102 + 24))
                      {
                        os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG);
                        LODWORD(v331[0]) = 136315138;
                        *(void **)((char *)v331 + 4) = v89;
                        v112 = (void *)_os_log_send_and_compose_impl();
                        v113 = v291;
                        if (v112)
                          free(v112);
LABEL_218:
                        if (v113)
                        {
                          v139 = (const char *)&v312;
                          if (v314 < 0)
                            v139 = (const char *)v312;
                          sub_20E8C003C((uint64_t)v299, "%s", v139);
                          sub_20E863570((uint64_t)v299);
                        }
                        sub_20E863570((uint64_t)v299);
                        v140 = v305;
                        if (!v305)
                          goto LABEL_226;
                        p_shared_owners = (unint64_t *)&v305->__shared_owners_;
                        do
                          v142 = __ldaxr(p_shared_owners);
                        while (__stlxr(v142 - 1, p_shared_owners));
                        if (!v142)
                        {
                          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                          std::__shared_weak_count::__release_weak(v140);
                          if ((SHIBYTE(v314) & 0x80000000) == 0)
                            goto LABEL_228;
                        }
                        else
                        {
LABEL_226:
                          if ((SHIBYTE(v314) & 0x80000000) == 0)
                          {
LABEL_228:
                            *(_QWORD *)object = v294;
                            *(_QWORD *)&object[*(_QWORD *)(v294 - 24)] = v292;
                            *(_QWORD *)&object[16] = v296;
                            v318 = MEMORY[0x24BEDB848] + 16;
                            if (v327 < 0)
                              operator delete(v325);
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            MEMORY[0x212BC6290](&v330);
                            goto LABEL_69;
                          }
                        }
                        operator delete(v312);
                        goto LABEL_228;
                      }
                      v105 = _os_log_pack_size();
                      v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
                      v107 = (std::__shared_weak_count *)operator new();
                      v107->__shared_owners_ = 0;
                      v108 = (unint64_t *)&v107->__shared_owners_;
                      v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v107->__shared_weak_owners_ = 0;
                      v107[1].__vftable = v106;
                      v283 = v107;
                      v109 = strlen((const char *)v89);
                      if (v109 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v110 = (void *)v109;
                      if (v109 >= 0x17)
                      {
                        v114 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v109 | 7) != 0x17)
                          v114 = v109 | 7;
                        v115 = v114 + 1;
                        v111 = (void **)operator new(v114 + 1);
                        v331[1] = v110;
                        v331[2] = (void *)(v115 | 0x8000000000000000);
                        v331[0] = v111;
                      }
                      else
                      {
                        HIBYTE(v331[2]) = v109;
                        v111 = v331;
                        if (!v109)
                        {
LABEL_192:
                          v116 = v106;
                          *((_BYTE *)v110 + (_QWORD)v111) = 0;
                          v117 = v331[0];
                          *(void **)&__dst = v331[1];
                          *(void **)((char *)&__dst + 7) = *(void **)((char *)&v331[1] + 7);
                          v118 = HIBYTE(v331[2]);
                          v119 = operator new(0x38uLL);
                          v120 = (std::__shared_weak_count *)v119;
                          v119[1] = 0;
                          v121 = v119 + 1;
                          v119[2] = 0;
                          v119[3] = off_24C9ABC20;
                          v282 = (char *)(v119 + 3);
                          v119[4] = v117;
                          v122 = (char *)(v119 + 4);
                          *v119 = &off_24C9ABBD0;
                          v119[5] = __dst;
                          *(_QWORD *)((char *)v119 + 47) = *(_QWORD *)((char *)&__dst + 7);
                          *((_BYTE *)v119 + 55) = v118;
                          do
                            v123 = __ldxr(v108);
                          while (__stxr(v123 + 1, v108));
                          do
                            v124 = __ldxr(v121);
                          while (__stxr(v124 + 1, v121));
                          do
                            v125 = __ldaxr(v121);
                          while (__stlxr(v125 - 1, v121));
                          if (!v125)
                          {
                            (*(void (**)(_QWORD *))(*v119 + 16))(v119);
                            std::__shared_weak_count::__release_weak(v120);
                          }
                          do
                            v126 = __ldaxr(v108);
                          while (__stlxr(v126 - 1, v108));
                          if (!v126)
                          {
                            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                            std::__shared_weak_count::__release_weak(v283);
                          }
                          if (SHIBYTE(v120[2].__vftable) >= 0)
                            shared_owners = v122;
                          else
                            shared_owners = (char *)v120[1].__shared_owners_;
                          v128 = _os_log_pack_fill();
                          *(_DWORD *)v128 = 136315138;
                          *(_QWORD *)(v128 + 4) = shared_owners;
                          v129 = (_QWORD *)operator new();
                          v130 = *(unsigned __int8 *)(v286 + 39);
                          v131 = v285;
                          if ((v130 & 0x80u) != 0)
                          {
                            v131 = *(const char **)(v286 + 16);
                            v130 = *(_QWORD *)(v286 + 24);
                          }
                          *v129 = v116;
                          v129[1] = v116;
                          v129[2] = v283;
                          v129[3] = v282;
                          v129[4] = v120;
                          v129[5] = v131;
                          v129[6] = v130;
                          *((_BYTE *)v129 + 56) = 2;
                          v331[0] = v129;
                          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v297 + 24) + 40))(*(_QWORD *)(v297 + 24), v331);
                          v45 = v281;
                          v132 = v331[0];
                          v331[0] = 0;
                          v3 = v288;
                          v2 = v290;
                          v113 = v291;
                          if (v132)
                          {
                            v133 = (std::__shared_weak_count *)*((_QWORD *)v132 + 4);
                            if (v133)
                            {
                              v134 = (unint64_t *)&v133->__shared_owners_;
                              do
                                v135 = __ldaxr(v134);
                              while (__stlxr(v135 - 1, v134));
                              if (!v135)
                              {
                                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                                std::__shared_weak_count::__release_weak(v133);
                              }
                            }
                            v136 = (std::__shared_weak_count *)*((_QWORD *)v132 + 2);
                            if (v136)
                            {
                              v137 = (unint64_t *)&v136->__shared_owners_;
                              do
                                v138 = __ldaxr(v137);
                              while (__stlxr(v138 - 1, v137));
                              if (!v138)
                              {
                                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                                std::__shared_weak_count::__release_weak(v136);
                              }
                            }
                            MEMORY[0x212BC6398](v132, 0x10F0C40B62ED6C6);
                          }
                          goto LABEL_218;
                        }
                      }
                      memcpy(v111, v89, (size_t)v110);
                      goto LABEL_192;
                    }
                  }
                  memmove(v97, v95, v96);
                  goto LABEL_165;
                }
              }
              memmove(v83, v86, v82);
              goto LABEL_144;
            }
LABEL_133:
            v84 = v328;
            v85 = (void **)v322;
            if (v328 < v323)
            {
              v328 = v323;
              v84 = v323;
              v85 = (void **)v322;
            }
            goto LABEL_136;
          }
LABEL_132:
          operator delete(v312);
          v81 = v329;
          if ((v329 & 0x10) == 0)
            goto LABEL_127;
          goto LABEL_133;
        }
      }
      memmove(p_dst, v75, v71);
      goto LABEL_108;
    }
LABEL_268:
    v160 = *(_QWORD *)(v3 + 40);
    if (v160)
    {
      v162 = *(_QWORD *)(v160 + 8);
      v161 = *(_QWORD *)(v160 + 16);
      if (v162 != v161)
      {
        v163 = v161 - v162 - 112;
        v164 = v162;
        if (v163 < 0x70)
          goto LABEL_450;
        v165 = (((v163 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
        v164 = v162 + 112 * (v165 & 0x7FFFFFFFFFFFFFELL);
        v166 = (_BYTE *)(v162 + 216);
        v167 = v165 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          *(v166 - 112) = 1;
          *v166 = 1;
          v166 += 224;
          v167 -= 2;
        }
        while (v167);
        if (v165 != (v165 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_450:
          do
          {
            *(_BYTE *)(v164 + 104) = 1;
            v164 += 112;
          }
          while (v164 != v161);
        }
      }
    }
    v168 = *(_QWORD **)(v3 + 56);
    if (!v168)
      goto LABEL_377;
    v170 = v168[1];
    v169 = v168[2];
    if (v170 != v169)
    {
      v171 = v169 - v170 - 1000;
      if (v171 < 0x3E8)
      {
        v172 = v168[1];
        do
        {
LABEL_383:
          *(_BYTE *)(v172 + 992) = 1;
          v172 += 1000;
        }
        while (v172 != v169);
        goto LABEL_384;
      }
      v234 = v171 / 0x3E8 + 1;
      v172 = v170 + 1000 * (v234 & 0xFFFFFFFFFFFFFELL);
      v235 = v234 & 0xFFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v170 + 992) = 1;
        *(_BYTE *)(v170 + 1992) = 1;
        v170 += 2000;
        v235 -= 2;
      }
      while (v235);
      if (v234 != (v234 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_383;
    }
LABEL_384:
    v237 = v168[4];
    v236 = v168[5];
    if (v237 == v236)
      goto LABEL_391;
    v238 = v236 - v237 - 376;
    if (v238 >= 0x178)
    {
      v240 = v238 / 0x178 + 1;
      v239 = v237 + 376 * (v240 & 0x1FFFFFFFFFFFFFELL);
      v241 = v240 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v237 + 368) = 1;
        *(_BYTE *)(v237 + 744) = 1;
        v237 += 752;
        v241 -= 2;
      }
      while (v241);
      if (v240 == (v240 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_391:
        v243 = v168[7];
        v242 = v168[8];
        if (v243 == v242)
          goto LABEL_398;
        v244 = v242 - v243 - 480;
        if (v244 >= 0x1E0)
        {
          v246 = v244 / 0x1E0 + 1;
          v245 = v243 + 480 * (v246 & 0x1FFFFFFFFFFFFFELL);
          v247 = v246 & 0x1FFFFFFFFFFFFFELL;
          do
          {
            *(_BYTE *)(v243 + 472) = 1;
            *(_BYTE *)(v243 + 952) = 1;
            v243 += 960;
            v247 -= 2;
          }
          while (v247);
          if (v246 == (v246 & 0x1FFFFFFFFFFFFFELL))
          {
LABEL_398:
            v249 = v168[10];
            v248 = v168[11];
            if (v249 == v248)
              goto LABEL_405;
            v250 = v248 - v249 - 440;
            if (v250 >= 0x1B8)
            {
              v252 = v250 / 0x1B8 + 1;
              v251 = v249 + 440 * (v252 & 0x1FFFFFFFFFFFFFELL);
              v253 = v252 & 0x1FFFFFFFFFFFFFELL;
              do
              {
                *(_BYTE *)(v249 + 432) = 1;
                *(_BYTE *)(v249 + 872) = 1;
                v249 += 880;
                v253 -= 2;
              }
              while (v253);
              if (v252 == (v252 & 0x1FFFFFFFFFFFFFELL))
              {
LABEL_405:
                v255 = v168[13];
                v254 = v168[14];
                if (v255 != v254)
                {
                  v256 = v254 - v255 - 32;
                  v257 = v168[13];
                  if (v256 < 0x20)
                    goto LABEL_451;
                  v258 = (v256 >> 5) + 1;
                  v257 = v255 + 32 * (v258 & 0xFFFFFFFFFFFFFFELL);
                  v259 = (_BYTE *)(v255 + 56);
                  v260 = v258 & 0xFFFFFFFFFFFFFFELL;
                  do
                  {
                    *(v259 - 32) = 1;
                    *v259 = 1;
                    v259 += 64;
                    v260 -= 2;
                  }
                  while (v260);
                  if (v258 != (v258 & 0xFFFFFFFFFFFFFFELL))
                  {
LABEL_451:
                    do
                    {
                      *(_BYTE *)(v257 + 24) = 1;
                      v257 += 32;
                    }
                    while (v257 != v254);
                  }
                }
                v262 = v168[16];
                v261 = v168[17];
                if (v262 != v261)
                {
                  v263 = v261 - v262 - 904;
                  if (v263 < 0x388)
                  {
                    v264 = v168[16];
                    do
                    {
LABEL_417:
                      *(_BYTE *)(v264 + 896) = 1;
                      v264 += 904;
                    }
                    while (v264 != v261);
                    goto LABEL_418;
                  }
                  v265 = v263 / 0x388 + 1;
                  v264 = v262 + 904 * (v265 & 0xFFFFFFFFFFFFFELL);
                  v266 = v265 & 0xFFFFFFFFFFFFFELL;
                  do
                  {
                    *(_BYTE *)(v262 + 896) = 1;
                    *(_BYTE *)(v262 + 1800) = 1;
                    v262 += 1808;
                    v266 -= 2;
                  }
                  while (v266);
                  if (v265 != (v265 & 0xFFFFFFFFFFFFFELL))
                    goto LABEL_417;
                }
LABEL_418:
                v268 = v168[19];
                v267 = v168[20];
                if (v268 != v267)
                {
                  v269 = v267 - v268 - 32;
                  v270 = v168[19];
                  if (v269 < 0x20)
                    goto LABEL_452;
                  v271 = (v269 >> 5) + 1;
                  v270 = v268 + 32 * (v271 & 0xFFFFFFFFFFFFFFELL);
                  v272 = (_BYTE *)(v268 + 56);
                  v273 = v271 & 0xFFFFFFFFFFFFFFELL;
                  do
                  {
                    *(v272 - 32) = 1;
                    *v272 = 1;
                    v272 += 64;
                    v273 -= 2;
                  }
                  while (v273);
                  if (v271 != (v271 & 0xFFFFFFFFFFFFFFELL))
                  {
LABEL_452:
                    do
                    {
                      *(_BYTE *)(v270 + 24) = 1;
                      v270 += 32;
                    }
                    while (v270 != v267);
                  }
                }
                v275 = v168[22];
                v274 = v168[23];
                if (v275 != v274)
                {
                  v276 = v274 - v275 - 112;
                  v277 = v275;
                  if (v276 < 0x70)
                    goto LABEL_429;
                  v278 = (((v276 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
                  v277 = v275 + 112 * (v278 & 0x7FFFFFFFFFFFFFELL);
                  v279 = (_BYTE *)(v275 + 216);
                  v280 = v278 & 0x7FFFFFFFFFFFFFELL;
                  do
                  {
                    *(v279 - 112) = 1;
                    *v279 = 1;
                    v279 += 224;
                    v280 -= 2;
                  }
                  while (v280);
                  if (v278 != (v278 & 0x7FFFFFFFFFFFFFELL))
                  {
LABEL_429:
                    v143 = 1;
                    do
                    {
                      *(_BYTE *)(v277 + 104) = 1;
                      v277 += 112;
                    }
                    while (v277 != v274);
                    goto LABEL_378;
                  }
                }
                goto LABEL_377;
              }
            }
            else
            {
              v251 = v168[10];
            }
            do
            {
              *(_BYTE *)(v251 + 432) = 1;
              v251 += 440;
            }
            while (v251 != v248);
            goto LABEL_405;
          }
        }
        else
        {
          v245 = v168[7];
        }
        do
        {
          *(_BYTE *)(v245 + 472) = 1;
          v245 += 480;
        }
        while (v245 != v242);
        goto LABEL_398;
      }
    }
    else
    {
      v239 = v168[4];
    }
    do
    {
      *(_BYTE *)(v239 + 368) = 1;
      v239 += 376;
    }
    while (v239 != v236);
    goto LABEL_391;
  }
  if (!sub_20F32ED3C(v32, (uint64_t *)(v2 + 880))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 1391, (uint64_t)"map_->HasPoseGraphNode(external_keyframe_info.vio_state_id)", 59, (uint64_t)"External keyframe exist in self map but not in pose graph", 57, (void (*)(void **))sub_21023DDB0))
  {
LABEL_432:
    abort();
  }
  sub_20F2FC0E0(v299);
  if (**(int **)(v299[0] + 56) <= 2)
  {
    v34 = *(unsigned __int8 *)(v299[0] + 72);
    v35 = sub_20E8C31DC(v299[0], "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (v34 || v35)
    {
      v331[0] = v299;
      v331[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      v331[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v332) = 2;
      v333 = "unknown file";
      LODWORD(v334) = 1395;
      v336 = 0;
      v337 = 0;
      v335 = "unknown function";
      v37 = *(_QWORD *)v331[0];
      v38 = (const char *)(*(_QWORD *)v331[0] + 16);
      v293 = v38;
      v295 = *(_QWORD *)v331[0];
      if (*(char *)(*(_QWORD *)v331[0] + 39) < 0)
      {
        v38 = *(const char **)(v37 + 16);
        v39 = *(_QWORD *)(v37 + 24);
      }
      else
      {
        v39 = *(unsigned __int8 *)(*(_QWORD *)v331[0] + 39);
      }
      v298 = *(_DWORD *)(v2 + 888);
      v178 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        if ((_BYTE)v318)
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v179 = byte_254A4A4F8;
      else
        v179 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v180 = byte_254A4A4F8[23];
      else
        v180 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v179, v38);
      v181 = &object[8];
      if (v180 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v180 >= 0x17)
      {
        v182 = v36;
        v183 = v38;
        v184 = v34;
        v185 = v2;
        v186 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v180 | 7) != 0x17)
          v186 = v180 | 7;
        v187 = v186 + 1;
        v181 = operator new(v186 + 1);
        *(_QWORD *)&object[16] = v180;
        v318 = v187 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v181;
        v2 = v185;
        v34 = v184;
        v38 = v183;
        v36 = v182;
      }
      else
      {
        HIBYTE(v318) = v180;
        if (!v180)
        {
LABEL_300:
          v181[v180] = 0;
          v319 = 1;
          v188 = v320;
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v39 >= 0x17)
          {
            v189 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v189 = v39 | 7;
            v190 = v189 + 1;
            v188 = operator new(v189 + 1);
            v320[1] = (void *)v39;
            v321 = v190 | 0x8000000000000000;
            v320[0] = v188;
          }
          else
          {
            HIBYTE(v321) = v39;
            if (!v39)
            {
LABEL_308:
              *((_BYTE *)v188 + v39) = 0;
              v322[0] = 1;
              v191 = *(NSObject **)object;
              if (SHIBYTE(v321) < 0)
                operator delete(v320[0]);
              if (v319 && SHIBYTE(v318) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v36 && *(_QWORD *)(v36 + 24))
              {
                v192 = _os_log_pack_size();
                v193 = (std::__shared_weak_count_vtbl *)operator new(v192, (std::align_val_t)8uLL);
                v194 = (std::__shared_weak_count *)operator new();
                v195 = v194;
                v194->__shared_owners_ = 0;
                v196 = (unint64_t *)&v194->__shared_owners_;
                v194->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v194->__shared_weak_owners_ = 0;
                v194[1].__vftable = v193;
                do
                  v197 = __ldxr(v196);
                while (__stxr(v197 + 1, v196));
                do
                  v198 = __ldaxr(v196);
                while (__stlxr(v198 - 1, v196));
                if (!v198)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v195);
                }
                v199 = _os_log_pack_fill();
                v200 = *v33;
                *(_DWORD *)v199 = 134218240;
                *(_QWORD *)(v199 + 4) = v200;
                *(_WORD *)(v199 + 12) = 1024;
                *(_DWORD *)(v199 + 14) = v298;
                v201 = operator new();
                v202 = *(unsigned __int8 *)(v295 + 39);
                v203 = v293;
                if ((v202 & 0x80u) != 0)
                {
                  v203 = *(const char **)(v295 + 16);
                  v202 = *(_QWORD *)(v295 + 24);
                }
                *(_QWORD *)v201 = v193;
                *(_QWORD *)(v201 + 8) = v193;
                *(_QWORD *)(v201 + 16) = v195;
                *(_QWORD *)(v201 + 24) = 0;
                *(_QWORD *)(v201 + 32) = 0;
                *(_QWORD *)(v201 + 40) = v203;
                *(_QWORD *)(v201 + 48) = v202;
                *(_BYTE *)(v201 + 56) = 2;
                *(_QWORD *)object = v201;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), object);
                v204 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                if (v204)
                {
                  v205 = *(std::__shared_weak_count **)(v204 + 32);
                  if (v205)
                  {
                    v206 = (unint64_t *)&v205->__shared_owners_;
                    do
                      v207 = __ldaxr(v206);
                    while (__stlxr(v207 - 1, v206));
                    if (!v207)
                    {
                      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                      std::__shared_weak_count::__release_weak(v205);
                    }
                  }
                  v208 = *(std::__shared_weak_count **)(v204 + 16);
                  if (v208)
                  {
                    v209 = (unint64_t *)&v208->__shared_owners_;
                    do
                      v210 = __ldaxr(v209);
                    while (__stlxr(v210 - 1, v209));
                    if (!v210)
                    {
                      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                      std::__shared_weak_count::__release_weak(v208);
                    }
                  }
                  MEMORY[0x212BC6398](v204, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG);
                v211 = *v33;
                *(_DWORD *)object = 134218240;
                *(_QWORD *)&object[4] = v211;
                *(_WORD *)&object[12] = 1024;
                *(_DWORD *)&object[14] = v298;
                v212 = (void *)_os_log_send_and_compose_impl();
                if (v212)
                  free(v212);
              }
              if (v34)
              {
                sub_20E8C003C((uint64_t)v331, "[CM] Process external keyframe (%llu,%d) already exist in self map", *(_QWORD *)(v2 + 880), *(_DWORD *)(v2 + 888));
                sub_20E863570((uint64_t)v331);
              }
              sub_20E863570((uint64_t)v331);
              v213 = v337;
              if (v337)
              {
                v214 = (unint64_t *)&v337->__shared_owners_;
                do
                  v215 = __ldaxr(v214);
                while (__stlxr(v215 - 1, v214));
                if (!v215)
                {
                  ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                  std::__shared_weak_count::__release_weak(v213);
                }
              }
              return 1;
            }
          }
          memmove(v188, v38, v39);
          goto LABEL_308;
        }
      }
      memmove(v181, v179, v180);
      goto LABEL_300;
    }
  }
  return 1;
}

void sub_20F317A68(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570(v1 - 208);
  v3 = *(std::__shared_weak_count **)(v1 - 144);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F318068(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F3180D4()
{
  return &unk_24C9FD9D8;
}

void sub_20F3180E4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F3180F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FD9F8;
  result[1] = v3;
  return result;
}

uint64_t sub_20F31812C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FD9F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F318148(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  void **v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  uint64_t ***v57;
  uint64_t **v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  int v70;
  const char *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *object[2];
  size_t v78;
  unint64_t v79;
  char v80;
  void *__p[2];
  unint64_t v82;
  char v83;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(v3 + 80);
  if (*(_QWORD *)(*(_QWORD *)(v4[352] + 16) + 160) == *(_QWORD *)(a2 + 48))
  {
    sub_20F2FC0E0(&v76);
    if (**(int **)(v76 + 56) > 5
      || ((v5 = *(unsigned __int8 *)(v76 + 72), v6 = sub_20E8C31DC(v76, "OSLogSurrogateAppender", 1, 0), v7 = v6, !v5)
        ? (v8 = v6 == 0)
        : (v8 = 0),
          v8))
    {
LABEL_70:
      v4 = *(_QWORD **)(v3 + 80);
      goto LABEL_71;
    }
    v69[0] = &v76;
    v69[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v69[2] = std::chrono::system_clock::now().__d_.__rep_;
    v70 = 5;
    v71 = "unknown file";
    v72 = 1492;
    v74 = 0;
    v75 = 0;
    v73 = "unknown function";
    v9 = (const char *)(v76 + 16);
    v67 = v76 + 16;
    v68 = v76;
    if (*(char *)(v76 + 39) < 0)
    {
      v9 = *(const char **)(v76 + 16);
      v10 = *(_QWORD *)(v76 + 24);
      v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v12 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v76 + 39);
      v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v11 & 1) != 0)
        goto LABEL_11;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if ((_BYTE)v79)
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = v78;
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_11:
    if (byte_254A4A4F8[23] >= 0)
      v13 = byte_254A4A4F8;
    else
      v13 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v14 = byte_254A4A4F8[23];
    else
      v14 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v13, v9);
    v15 = &object[1];
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v14 >= 0x17)
    {
      v16 = v9;
      v17 = v5;
      v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v18 = v14 | 7;
      v19 = v18 + 1;
      v15 = (void **)operator new(v18 + 1);
      v78 = v14;
      v79 = v19 | 0x8000000000000000;
      object[1] = v15;
      v5 = v17;
      v9 = v16;
    }
    else
    {
      HIBYTE(v79) = v14;
      if (!v14)
      {
LABEL_25:
        *((_BYTE *)v15 + v14) = 0;
        v80 = 1;
        v20 = __p;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v10 >= 0x17)
        {
          v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v21 = v10 | 7;
          v22 = v21 + 1;
          v20 = operator new(v21 + 1);
          __p[1] = (void *)v10;
          v82 = v22 | 0x8000000000000000;
          __p[0] = v20;
        }
        else
        {
          HIBYTE(v82) = v10;
          if (!v10)
            goto LABEL_33;
        }
        memmove(v20, v9, v10);
LABEL_33:
        *((_BYTE *)v20 + v10) = 0;
        v83 = 1;
        v23 = object[0];
        if (SHIBYTE(v82) < 0)
          operator delete(__p[0]);
        if (v80 && SHIBYTE(v79) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v7 && *(_QWORD *)(v7 + 24))
        {
          v24 = _os_log_pack_size();
          v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
          v26 = (std::__shared_weak_count *)operator new();
          v27 = v26;
          v26->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v26->__shared_weak_owners_ = 0;
          v26[1].__vftable = v25;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v27);
          }
          *(_WORD *)_os_log_pack_fill() = 0;
          v31 = (_QWORD *)operator new();
          v32 = *(unsigned __int8 *)(v68 + 39);
          v33 = v67;
          if ((v32 & 0x80u) != 0)
          {
            v33 = *(_QWORD *)(v68 + 16);
            v32 = *(_QWORD *)(v68 + 24);
          }
          *v31 = v25;
          v31[1] = v25;
          v31[2] = v27;
          v31[3] = 0;
          v31[4] = 0;
          v31[5] = v33;
          v31[6] = v32;
          *((_BYTE *)v31 + 56) = 16;
          object[0] = v31;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), object);
          v34 = object[0];
          object[0] = 0;
          if (v34)
          {
            v35 = (std::__shared_weak_count *)*((_QWORD *)v34 + 4);
            if (v35)
            {
              v36 = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v38 = (std::__shared_weak_count *)*((_QWORD *)v34 + 2);
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            MEMORY[0x212BC6398](v34, 0x10F0C40B62ED6C6);
          }
        }
        else
        {
          os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          LOWORD(object[0]) = 0;
          v41 = (void *)_os_log_send_and_compose_impl();
          if (v41)
            free(v41);
        }
        if (v5)
        {
          sub_20E8C003C((uint64_t)v69, "External object anchor session should be different from self session");
          sub_20E863570((uint64_t)v69);
        }
        sub_20E863570((uint64_t)v69);
        v42 = v75;
        if (v75)
        {
          v43 = (unint64_t *)&v75->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        goto LABEL_70;
      }
    }
    memmove(v15, v13, v14);
    goto LABEL_25;
  }
LABEL_71:
  v45 = v4[353];
  for (i = v4[354]; v45 != i; v45 += 4472)
  {
    if (sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v45 + 192) + 8), a2 + 24))
      return 1;
  }
  kdebug_trace();
  v47 = *(_QWORD *)(v3 + 80);
  if (*(_BYTE *)(v47 + 2499))
  {
    v48 = *(_QWORD *)(v47 + 2824);
    v49 = *(_QWORD *)(v47 + 2832);
    if (v48 != v49)
    {
      while (1)
      {
        v50 = *(_QWORD *)(v48 + 16);
        if (v50)
        {
          if (*(_QWORD *)(v50 + 160) == *(_QWORD *)a2)
            break;
        }
        v48 += 4472;
        if (v48 == v49)
          goto LABEL_87;
      }
    }
    if (v48 == v49 || !v48)
      goto LABEL_87;
  }
  else
  {
    v48 = *(_QWORD *)(v47 + 2816);
  }
  v52 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(*(_QWORD *)(v48 + 16) + 424) + 1784), (uint64_t *)a2);
  v47 = *(_QWORD *)(v3 + 80);
  if (v52)
  {
    sub_20F3275B8(v47, a2 + 24, (uint64_t *)a2, (float64x2_t *)(a2 + 56), (__int128 *)(a2 + 312));
    goto LABEL_88;
  }
LABEL_87:
  if ((sub_20F327698(v47, a2) & 1) != 0)
    goto LABEL_88;
  v53 = *(int8x8_t *)(v3 + 8);
  if (!*(_QWORD *)&v53)
    goto LABEL_126;
  v54 = *(_QWORD *)(a2 + 48);
  v55 = (uint8x8_t)vcnt_s8(v53);
  v55.i16[0] = vaddlv_u8(v55);
  if (v55.u32[0] > 1uLL)
  {
    v56 = *(_QWORD *)(a2 + 48);
    if (v54 >= *(_QWORD *)&v53)
      v56 = v54 % *(_QWORD *)&v53;
  }
  else
  {
    v56 = (*(_QWORD *)&v53 - 1) & v54;
  }
  v57 = *(uint64_t ****)(*(_QWORD *)v3 + 8 * v56);
  if (!v57)
    goto LABEL_126;
  v58 = *v57;
  if (!*v57)
    goto LABEL_126;
  if (v55.u32[0] < 2uLL)
  {
    v59 = *(_QWORD *)&v53 - 1;
    while (1)
    {
      v61 = v58[1];
      if (v61 == (uint64_t *)v54)
      {
        if (v58[2] == (uint64_t *)v54)
          goto LABEL_110;
      }
      else if (((unint64_t)v61 & v59) != v56)
      {
        goto LABEL_126;
      }
      v51 = 0;
      v58 = (uint64_t **)*v58;
      if (!v58)
        goto LABEL_127;
    }
  }
  while (1)
  {
    v60 = (unint64_t)v58[1];
    if (v60 == v54)
      break;
    if (v60 >= *(_QWORD *)&v53)
      v60 %= *(_QWORD *)&v53;
    if (v60 != v56)
      goto LABEL_126;
LABEL_99:
    v51 = 0;
    v58 = (uint64_t **)*v58;
    if (!v58)
      goto LABEL_127;
  }
  if (v58[2] != (uint64_t *)v54)
    goto LABEL_99;
LABEL_110:
  if (!sub_20E9DF85C((_QWORD *)(*(_QWORD *)v58[5][53] + 1784), (uint64_t *)a2))
  {
LABEL_126:
    v51 = 0;
    goto LABEL_127;
  }
  sub_20FCC6708((_QWORD *)v58[27][1], a2 + 24, *(_QWORD *)v58[5][53], (uint64_t *)a2, (float64x2_t *)(a2 + 56), (__int128 *)(a2 + 312));
  v62 = v58[45];
  if (v62)
  {
    v63 = v58[5];
    v64 = v63[53];
    if (v64)
    {
      if (*(_QWORD *)(*(_QWORD *)v64 + 64))
      {
        object[0] = (void *)v63[20];
        LOBYTE(v69[0]) = 0;
        (*(void (**)(uint64_t *, void **, _QWORD *))(*v62 + 48))(v62, object, v69);
      }
    }
  }
  v65 = *(_QWORD *)(v3 + 80);
  if (*(_BYTE *)(v65 + 2499)
    && *(_BYTE *)(v65 + 2639)
    && *(_QWORD *)(v3 + 40)
    && *(_QWORD *)(v3 + 56)
    && *(_QWORD *)(v3 + 64)
    && *(_QWORD *)(v3 + 72)
    && ((_WORD)v58[41] & 0x140) != 0)
  {
    if (!*(_BYTE *)(v3 + 2264))
    {
      bzero((void *)(v3 + 1352), 0x390uLL);
      *(_BYTE *)(v3 + 2264) = 1;
    }
    sub_20F264D94((uint64_t)(v58 + 3), (uint64_t *)object);
    sub_20F3026D0(v3, (__int128 **)object, v3 + 1528);
    if (object[0])
    {
      object[1] = object[0];
      operator delete(object[0]);
    }
  }
LABEL_88:
  v51 = 1;
LABEL_127:
  kdebug_trace();
  return v51;
}

void sub_20F318A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *__p,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v31 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F318C14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_4"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F318C80()
{
  return &unk_24C9FDA68;
}

void sub_20F318C90()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F318CA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FDA88;
  result[1] = v3;
  return result;
}

uint64_t sub_20F318CD8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FDA88;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F318CF4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[10];
  v5 = *(_QWORD **)(v4 + 2824);
  v6 = *(_QWORD **)(v4 + 2832);
  if (v5 == v6)
  {
LABEL_4:
    i = (_QWORD *)v3[2];
    if (!i)
      goto LABEL_6;
    goto LABEL_5;
  }
  while (!sub_20EB07858(*(_QWORD **)(v5[24] + 8), (uint64_t)a2))
  {
    v5 += 559;
    if (v5 == v6)
      goto LABEL_4;
  }
  sub_20F26170C(v5, (uint64_t)a2);
  for (i = (_QWORD *)v3[2]; i; i = (_QWORD *)*i)
LABEL_5:
    sub_20F26170C(i + 3, (uint64_t)a2);
LABEL_6:
  v8 = v3[7];
  if (v8)
  {
    sub_20E8D771C(v8 + 456, (uint64_t)a2, (uint64_t)a2);
    sub_20F22C240(v8, a2);
  }
  return 1;
}

uint64_t sub_20F318DB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_5"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F318E24()
{
  return &unk_24C9FDAF8;
}

void sub_20F318E34()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F318E48(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FDB18;
  result[1] = v3;
  return result;
}

uint64_t sub_20F318E7C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FDB18;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F318E98(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  if (v2)
    sub_20F238178(v2, a2);
  return 1;
}

uint64_t sub_20F318EBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_6")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_6"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F318F28()
{
  return &unk_24C9FDB88;
}

void sub_20F318F38()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F318F4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FDBA8;
  result[1] = v3;
  return result;
}

uint64_t sub_20F318F80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FDBA8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F318F9C(uint64_t a1, uint64_t a2)
{
  return sub_20F309184(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_20F318FB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_7")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_7" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_7"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface22ConnectProcessingNodesEvE3$_7" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F319020()
{
  return &unk_24C9FDC18;
}

void sub_20F319030()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F319044(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FDC80;
  result[1] = v3;
  return result;
}

uint64_t sub_20F319078(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FDC80;
  a2[1] = v2;
  return result;
}

void sub_20F319094(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  char *v11;
  char *v12;
  const void *v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  char v20[8];
  void *v21;
  char *v22;
  char *v23;
  void *__p[2];
  char *v25;

  v6 = *a2;
  v7 = sub_20F2F3290(*(_QWORD **)(a1 + 8));
  v20[0] = v6;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v9 = *(const void **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v10 = v8 - *(_QWORD *)a3;
  if (v8 == *(_QWORD *)a3)
  {
    v12 = 0;
    v11 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v25 = 0;
    v13 = *(const void **)a4;
    v14 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (!v14)
      goto LABEL_4;
LABEL_7:
    if ((v14 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v16 = (char *)operator new(v14);
    v17 = &v16[v14];
    __p[0] = v16;
    v25 = &v16[v14];
    memcpy(v16, v13, v14);
    __p[1] = v17;
    v15 = *(_QWORD *)(v7 + 920);
    if (v15 < *(_QWORD *)(v7 + 928))
      goto LABEL_5;
    goto LABEL_9;
  }
  if ((v10 & 0x8000000000000000) != 0)
    sub_20E867F44();
  v11 = (char *)operator new(v8 - *(_QWORD *)a3);
  v12 = &v11[v10];
  v21 = v11;
  v23 = &v11[v10];
  memcpy(v11, v9, v10);
  v22 = &v11[v10];
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  v13 = *(const void **)a4;
  v14 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v14)
    goto LABEL_7;
LABEL_4:
  v15 = *(_QWORD *)(v7 + 920);
  if (v15 < *(_QWORD *)(v7 + 928))
  {
LABEL_5:
    *(_BYTE *)v15 = v6;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 8) = v11;
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v23;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(v15 + 48) = v25;
    __p[0] = 0;
    __p[1] = 0;
    v25 = 0;
    *(_QWORD *)(v7 + 920) = v15 + 56;
    goto LABEL_11;
  }
LABEL_9:
  v18 = sub_20EE1D370((void **)(v7 + 912), v20);
  v19 = __p[0];
  *(_QWORD *)(v7 + 920) = v18;
  if (v19)
  {
    __p[1] = v19;
    operator delete(v19);
  }
LABEL_11:
  if (v21)
  {
    v22 = (char *)v21;
    operator delete(v21);
  }
}

void sub_20F319248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F319280(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping16MappingInterface26EnableCollaborativeMappingERKNSt3__113unordered_mapIjj"
                     "NS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjjEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface26EnableCollaborativeMappingERKNSt3__113unord"
                                "ered_mapIjjNS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjjEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping16MappingInterface26EnableCollaborativeMappingERKNSt3__113unordered_mapIjjNS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjjEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping16MappingInterface26EnableCollaborativeMappingERKNSt3__113unordered_mapIjjNS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjjEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F3192EC()
{
  return &unk_24C9FDCE0;
}

void sub_20F3192F8(unint64_t *a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t i;
  __int128 v39;
  void *v40;

  v5 = (char *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)(a2 - *a1) / 24;
  v8 = *a1 + 24 * v7;
  v9 = a1[2];
  if (v6 < v9)
  {
    if (v8 == v6)
    {
      v27 = *a3;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v8 = v27;
      a1[1] = v8 + 24;
    }
    else
    {
      v10 = *(_DWORD *)a3;
      v11 = *((_QWORD *)a3 + 1);
      v12 = *((_DWORD *)a3 + 4);
      v13 = v8 + 24;
      v14 = v6 - 24;
      v15 = a1[1];
      if (v6 >= 0x18)
      {
        do
        {
          v16 = *(_OWORD *)v14;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v15 = v16;
          v15 += 24;
          v14 += 24;
        }
        while (v14 < v6);
      }
      a1[1] = v15;
      if (v6 != v13)
      {
        v17 = 8 * ((uint64_t)(v6 - v13) >> 3);
        v18 = (_DWORD *)(v6 - 8);
        do
        {
          *(v18 - 4) = *(_DWORD *)(v8 + v17 - 24);
          *((_QWORD *)v18 - 1) = *(_QWORD *)(v8 + v17 - 16);
          *v18 = *(_DWORD *)(v8 + v17 - 8);
          v18 -= 6;
          v17 -= 24;
        }
        while (v17);
      }
      *(_DWORD *)v8 = v10;
      v19 = &v5[24 * v7];
      *((_QWORD *)v19 + 1) = v11;
      *((_DWORD *)v19 + 4) = v12;
    }
    return;
  }
  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
  if (v20 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v5) >> 3);
  v22 = 2 * v21;
  if (2 * v21 <= v20)
    v22 = v20;
  if (v21 >= 0x555555555555555)
    v23 = 0xAAAAAAAAAAAAAAALL;
  else
    v23 = v22;
  if (!v23)
  {
    v24 = 0;
    v25 = 24 * v7;
    v26 = 0;
    if (v25)
      goto LABEL_33;
    goto LABEL_22;
  }
  if (v23 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v24 = (char *)operator new(24 * v23);
  v25 = (unint64_t)&v24[24 * v7];
  v26 = &v24[24 * v23];
  if ((char *)v25 == v26)
  {
LABEL_22:
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v24) >> 3);
    if (v25 <= (unint64_t)v24)
    {
      if ((char *)v25 == v24)
        v30 = 1;
      else
        v30 = 0x5555555555555556 * ((uint64_t)(v25 - (_QWORD)v24) >> 3);
      if (v30 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v31 = (char *)operator new(24 * v30);
      v25 = (unint64_t)&v31[24 * (v30 >> 2)];
      v26 = &v31[24 * v30];
      if (v24)
        operator delete(v24);
    }
    else
    {
      if (v28 >= -1)
        v29 = v28 + 1;
      else
        v29 = v28 + 2;
      v26 = (char *)v25;
      v25 -= 24 * (v29 >> 1);
    }
  }
LABEL_33:
  v32 = *a3;
  *(_QWORD *)(v25 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v25 = v32;
  v33 = v25 + 24;
  v34 = (char *)*a1;
  if (*a1 == v8)
  {
    v36 = v25;
    i = a1[1];
    if (i == v8)
      goto LABEL_38;
    goto LABEL_37;
  }
  v35 = v8;
  do
  {
    v36 = v25 - 24;
    v37 = *(_OWORD *)(v35 - 24);
    *(_QWORD *)(v25 - 8) = *(_QWORD *)(v35 - 8);
    *(_OWORD *)(v25 - 24) = v37;
    v35 -= 24;
    v25 -= 24;
  }
  while ((char *)v35 != v34);
  for (i = a1[1]; v8 != i; v8 += 24)
  {
LABEL_37:
    v39 = *(_OWORD *)v8;
    *(_QWORD *)(v33 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v33 = v39;
    v33 += 24;
  }
LABEL_38:
  v40 = (void *)*a1;
  *a1 = v36;
  a1[1] = v33;
  a1[2] = (unint64_t)v26;
  if (v40)
    operator delete(v40);
}

void sub_20F319610(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F319628(char **a1, __int128 *a2, uint64_t *a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  __int128 *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  const double *v44;
  double *v45;
  uint64_t v46;
  const double *v47;
  double *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  __int128 *v52;
  char *v53;
  __int128 *i;
  __int128 v55;
  char *v56;
  float64x2x2_t v58;
  float64x2x2_t v59;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v12 = *a3;
      v11 = a3[1];
      v13 = v9 + 1;
      v14 = v5 - 16;
      v15 = a1[1];
      if (v5 >= 0x10)
      {
        v16 = (__int128 *)(v5 - 16);
        v15 = a1[1];
        do
        {
          v17 = *v16++;
          *(_OWORD *)v15 = v17;
          v15 += 16;
        }
        while ((unint64_t)v16 < v5);
      }
      a1[1] = v15;
      if ((_OWORD *)v5 != v13)
      {
        v18 = v5 - (_QWORD)v13;
        v19 = v5 - (_QWORD)v13 - 16;
        if (v19 < 0x170)
          goto LABEL_8;
        v30 = v18 & 0xFFFFFFFFFFFFFFF0;
        v31 = (v18 & 0xFFFFFFFFFFFFFFF0) - 16;
        v32 = v18 + (v7 & 0xFFFFFFFFFFFFFFF0);
        v33 = (unint64_t)v6 + v32 - v31 - 16;
        v32 -= 8;
        v34 = (char *)v6 + v32;
        v35 = v5 - v30;
        v36 = (unint64_t)v6 + v32 - v31;
        v37 = v35 + 8 >= v14 || v36 >= v5;
        v38 = !v37;
        if (v33 < v5 - 8 && v35 < (unint64_t)v34)
          goto LABEL_8;
        if (v38)
          goto LABEL_8;
        v40 = (v19 >> 4) + 1;
        v41 = 16 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
        v42 = v5 - v41;
        v43 = v14 - v41;
        v44 = (const double *)(v5 - 48);
        v45 = (double *)(v5 - 32);
        v46 = v40 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = vld2q_f64(v44);
          v47 = v44 - 4;
          v59 = vld2q_f64(v47);
          vst2q_f64(v45, v58);
          v48 = v45 - 4;
          vst2q_f64(v48, v59);
          v44 -= 8;
          v45 -= 8;
          v46 -= 4;
        }
        while (v46);
        v5 = v42;
        v14 = v43;
        if (v40 != (v40 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_8:
          v20 = (_QWORD *)(v5 - 8);
          do
          {
            v21 = *(_QWORD *)(v14 - 16);
            v14 -= 16;
            *(v20 - 1) = v21;
            *v20 = *(_QWORD *)(v14 + 8);
            v20 -= 2;
          }
          while ((__int128 *)v14 != v9);
        }
      }
      *(_QWORD *)v9 = v12;
      *((_QWORD *)&v6[v8] + 1) = v11;
    }
    return (char *)v9;
  }
  v22 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v22 >> 60)
    sub_20E867F44();
  v24 = v10 - (_QWORD)v6;
  if (v24 >> 3 > v22)
    v22 = v24 >> 3;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
    v25 = 0xFFFFFFFFFFFFFFFLL;
  else
    v25 = v22;
  if (v25)
  {
    if (v25 >> 60)
      sub_20E877A38();
    v26 = (char *)operator new(16 * v25);
    v27 = &v26[16 * v8];
    v28 = &v26[16 * v25];
    if (v8 != v25)
      goto LABEL_49;
    goto LABEL_23;
  }
  v26 = 0;
  v27 = (char *)(16 * v8);
  v28 = 0;
  if (!v8)
  {
LABEL_23:
    if (v7 < 1)
    {
      if (v6 == a2)
        v49 = 1;
      else
        v49 = v7 >> 3;
      if (v49 >> 60)
        sub_20E877A38();
      v27 = (char *)operator new(16 * v49);
      v28 = &v27[16 * v49];
      if (v26)
      {
        operator delete(v26);
        v28 = &v27[16 * v49];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v29 = v8 + 2;
      if (v8 >= -1)
        v29 = v8 + 1;
      v27 -= 16 * (v29 >> 1);
    }
  }
LABEL_49:
  *(_OWORD *)v27 = *(_OWORD *)a3;
  v50 = v27 + 16;
  v51 = v27;
  if (v6 != v9)
  {
    v52 = v9;
    v53 = v27;
    do
    {
      v51 = v53 - 16;
      *((_OWORD *)v53 - 1) = *--v52;
      v53 -= 16;
    }
    while (v52 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v50 += 16)
  {
    v55 = *v9++;
    *(_OWORD *)v50 = v55;
  }
  v56 = *a1;
  *a1 = v51;
  a1[1] = v50;
  a1[2] = v28;
  if (v56)
    operator delete(v56);
  return v27;
}

void sub_20F319930(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F319948(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  char *v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  unint64_t v45;
  char *v46;
  void *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char *i;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v4 = (char *)a2;
  v7 = (char *)*a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = 0xF0F0F0F0F0F0F0F1 * (v8 >> 3);
  v10 = a1[2];
  if (v6 < v10)
  {
    if (a2 == (_QWORD *)v6)
    {
      *a2 = *a3;
      v28 = &v7[8 * (v8 >> 3)];
      v29 = *(_OWORD *)(a3 + 1);
      v30 = *(_OWORD *)(a3 + 3);
      v31 = *(_OWORD *)(a3 + 5);
      *(_OWORD *)(v28 + 56) = *(_OWORD *)(a3 + 7);
      *(_OWORD *)(v28 + 40) = v31;
      *(_OWORD *)(v28 + 24) = v30;
      *(_OWORD *)(v28 + 8) = v29;
      v32 = *(_OWORD *)(a3 + 9);
      v33 = *(_OWORD *)(a3 + 11);
      v34 = *(_OWORD *)(a3 + 13);
      *(_OWORD *)(v28 + 120) = *(_OWORD *)(a3 + 15);
      *(_OWORD *)(v28 + 104) = v34;
      *(_OWORD *)(v28 + 88) = v33;
      *(_OWORD *)(v28 + 72) = v32;
      a1[1] = (uint64_t)(a2 + 17);
      return;
    }
    v11 = *a3;
    v77 = *(_OWORD *)(a3 + 9);
    v78 = *(_OWORD *)(a3 + 11);
    v79 = *(_OWORD *)(a3 + 13);
    v80 = *(_OWORD *)(a3 + 15);
    v73 = *(_OWORD *)(a3 + 1);
    v74 = *(_OWORD *)(a3 + 3);
    v12 = a2 + 17;
    v13 = v6 - 136;
    v75 = *(_OWORD *)(a3 + 5);
    v76 = *(_OWORD *)(a3 + 7);
    if (v6 < 0x88)
    {
      a1[1] = v6;
      if ((_QWORD *)v6 == v12)
      {
LABEL_28:
        v44 = &v7[8 * (v8 >> 3)];
        *(_OWORD *)(v44 + 72) = v77;
        *(_OWORD *)(v44 + 88) = v78;
        *(_OWORD *)(v44 + 104) = v79;
        *(_OWORD *)(v44 + 120) = v80;
        *(_OWORD *)(v44 + 8) = v73;
        *(_OWORD *)(v44 + 24) = v74;
        *(_OWORD *)(v44 + 40) = v75;
        *a2 = v11;
        *(_OWORD *)(v44 + 56) = v76;
        return;
      }
    }
    else
    {
      v14 = v6 - 136;
      v15 = a1[1];
      do
      {
        *(_QWORD *)v15 = *(_QWORD *)v14;
        v16 = *(_OWORD *)(v14 + 8);
        v17 = *(_OWORD *)(v14 + 24);
        v18 = *(_OWORD *)(v14 + 40);
        *(_OWORD *)(v15 + 56) = *(_OWORD *)(v14 + 56);
        *(_OWORD *)(v15 + 40) = v18;
        *(_OWORD *)(v15 + 24) = v17;
        *(_OWORD *)(v15 + 8) = v16;
        v19 = *(_OWORD *)(v14 + 72);
        v20 = *(_OWORD *)(v14 + 88);
        v21 = *(_OWORD *)(v14 + 104);
        *(_OWORD *)(v15 + 120) = *(_OWORD *)(v14 + 120);
        *(_OWORD *)(v15 + 104) = v21;
        *(_OWORD *)(v15 + 88) = v20;
        *(_OWORD *)(v15 + 72) = v19;
        v15 += 136;
        v14 += 136;
      }
      while (v14 < v6);
      a1[1] = v15;
      if ((_QWORD *)v6 == v12)
        goto LABEL_28;
    }
    v37 = (uint64_t)(v6 - (_QWORD)v12) >> 3;
    do
    {
      *(_QWORD *)v13 = a2[v37 - 17];
      v38 = *(_OWORD *)&a2[v37 - 16];
      v39 = *(_OWORD *)&a2[v37 - 14];
      v40 = *(_OWORD *)&a2[v37 - 12];
      *(_OWORD *)(v13 + 56) = *(_OWORD *)&a2[v37 - 10];
      *(_OWORD *)(v13 + 40) = v40;
      *(_OWORD *)(v13 + 24) = v39;
      *(_OWORD *)(v13 + 8) = v38;
      v41 = *(_OWORD *)&a2[v37 - 8];
      v42 = *(_OWORD *)&a2[v37 - 6];
      v43 = *(_OWORD *)&a2[v37 - 4];
      *(_OWORD *)(v13 + 120) = *(_OWORD *)&a2[v37 - 2];
      *(_OWORD *)(v13 + 104) = v43;
      *(_OWORD *)(v13 + 88) = v42;
      *(_OWORD *)(v13 + 72) = v41;
      v13 -= 136;
      v37 -= 17;
    }
    while (v37 * 8);
    goto LABEL_28;
  }
  v22 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v6 - (_QWORD)v7) >> 3) + 1;
  if (v22 > 0x1E1E1E1E1E1E1E1)
    sub_20EABADD4();
  v23 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v10 - (_QWORD)v7) >> 3);
  if (2 * v23 > v22)
    v22 = 2 * v23;
  if (v23 >= 0xF0F0F0F0F0F0F0)
    v24 = 0x1E1E1E1E1E1E1E1;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 > 0x1E1E1E1E1E1E1E1)
      sub_20E877A38();
    v25 = (char *)operator new(136 * v24);
    v26 = (uint64_t)&v25[8 * (v8 >> 3)];
    v27 = &v25[136 * v24];
    if (v9 != v24)
      goto LABEL_35;
    goto LABEL_20;
  }
  v25 = 0;
  v26 = 8 * (v8 >> 3);
  v27 = 0;
  if (!v9)
  {
LABEL_20:
    if (v8 < 1)
    {
      if (v7 == v4)
        v45 = 1;
      else
        v45 = 0xE1E1E1E1E1E1E1E2 * (v8 >> 3);
      if (v45 > 0x1E1E1E1E1E1E1E1)
        sub_20E877A38();
      v46 = (char *)operator new(136 * v45);
      v26 = (uint64_t)&v46[136 * (v45 >> 2)];
      v27 = &v46[136 * v45];
      if (v25)
      {
        v47 = v25;
        v48 = v27;
        operator delete(v47);
        v27 = v48;
      }
    }
    else
    {
      v35 = 0xF0F0F0F0F0F0F0F1 * ((v26 - (uint64_t)v25) >> 3);
      if (v35 >= -1)
        v36 = v35 + 1;
      else
        v36 = v35 + 2;
      v26 -= 136 * (v36 >> 1);
    }
  }
LABEL_35:
  *(_QWORD *)v26 = *a3;
  v49 = *(_OWORD *)(a3 + 1);
  v50 = *(_OWORD *)(a3 + 3);
  v51 = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(v26 + 56) = *(_OWORD *)(a3 + 7);
  *(_OWORD *)(v26 + 40) = v51;
  *(_OWORD *)(v26 + 24) = v50;
  *(_OWORD *)(v26 + 8) = v49;
  v52 = *(_OWORD *)(a3 + 9);
  v53 = *(_OWORD *)(a3 + 11);
  v54 = *(_OWORD *)(a3 + 13);
  *(_OWORD *)(v26 + 120) = *(_OWORD *)(a3 + 15);
  *(_OWORD *)(v26 + 104) = v54;
  *(_OWORD *)(v26 + 88) = v53;
  *(_OWORD *)(v26 + 72) = v52;
  v55 = v26 + 136;
  v56 = *a1;
  if ((char *)*a1 != v4)
  {
    v57 = v4;
    do
    {
      v58 = *((_QWORD *)v57 - 17);
      v57 -= 136;
      *(_QWORD *)(v26 - 136) = v58;
      v26 -= 136;
      v59 = *(_OWORD *)(v57 + 8);
      v60 = *(_OWORD *)(v57 + 24);
      v61 = *(_OWORD *)(v57 + 40);
      *(_OWORD *)(v26 + 56) = *(_OWORD *)(v57 + 56);
      *(_OWORD *)(v26 + 40) = v61;
      *(_OWORD *)(v26 + 24) = v60;
      *(_OWORD *)(v26 + 8) = v59;
      v62 = *(_OWORD *)(v57 + 72);
      v63 = *(_OWORD *)(v57 + 88);
      v64 = *(_OWORD *)(v57 + 104);
      *(_OWORD *)(v26 + 120) = *(_OWORD *)(v57 + 120);
      *(_OWORD *)(v26 + 104) = v64;
      *(_OWORD *)(v26 + 88) = v63;
      *(_OWORD *)(v26 + 72) = v62;
    }
    while (v57 != (char *)v56);
  }
  for (i = (char *)a1[1]; v4 != i; v4 += 136)
  {
    *(_QWORD *)v55 = *(_QWORD *)v4;
    v66 = *(_OWORD *)(v4 + 8);
    v67 = *(_OWORD *)(v4 + 24);
    v68 = *(_OWORD *)(v4 + 40);
    *(_OWORD *)(v55 + 56) = *(_OWORD *)(v4 + 56);
    *(_OWORD *)(v55 + 40) = v68;
    *(_OWORD *)(v55 + 24) = v67;
    *(_OWORD *)(v55 + 8) = v66;
    v69 = *(_OWORD *)(v4 + 72);
    v70 = *(_OWORD *)(v4 + 88);
    v71 = *(_OWORD *)(v4 + 104);
    *(_OWORD *)(v55 + 120) = *(_OWORD *)(v4 + 120);
    *(_OWORD *)(v55 + 104) = v71;
    *(_OWORD *)(v55 + 88) = v70;
    *(_OWORD *)(v55 + 72) = v69;
    v55 += 136;
  }
  v72 = (void *)*a1;
  *a1 = v26;
  a1[1] = v55;
  a1[2] = (uint64_t)v27;
  if (v72)
    operator delete(v72);
}

void sub_20F319E38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F319E54()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F319E68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FDD00;
  result[1] = v3;
  return result;
}

uint64_t sub_20F319E9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FDD00;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F319EB8(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (int8x8_t)v2[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = *a2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *a2;
    if (*(_QWORD *)&v3 <= v4)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (*(_QWORD *)&v3 - 1) & v4;
  }
  v7 = *(_QWORD **)(*v2 + 8 * v6);
  if (!v7)
    return 0;
  v8 = (_QWORD *)*v7;
  if (!v8)
    return 0;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == v4)
      {
        if (v8[2] == v4)
          return v8[5];
      }
      else if ((v11 & v9) != v6)
      {
        return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return 0;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == v4)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v6)
      return 0;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return 0;
  }
  if (v8[2] != v4)
    goto LABEL_11;
  return v8[5];
}

uint64_t sub_20F319F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDat"
                     "aControllerEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKN"
                                "S1_17MapDataControllerEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDataControllerEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDataControllerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F31A008()
{
  return &unk_24C9FDD60;
}

void sub_20F31A018()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F31A02C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FDD80;
  result[1] = v3;
  return result;
}

uint64_t sub_20F31A060(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FDD80;
  a2[1] = v2;
  return result;
}

BOOL sub_20F31A07C(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = (int8x8_t)v2[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = *a2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *a2;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (*(_QWORD *)&v3 - 1) & v4;
  }
  v7 = *v2;
  v8 = *(_QWORD **)(*v2 + 8 * v6);
  if (v8)
  {
    v8 = (_QWORD *)*v8;
    if (v8)
    {
      if (v5.u32[0] < 2uLL)
      {
        while (1)
        {
          v10 = v8[1];
          if (v4 == v10)
          {
            if (v8[2] == v4)
              goto LABEL_22;
          }
          else if ((v10 & (*(_QWORD *)&v3 - 1)) != v6)
          {
            goto LABEL_21;
          }
          v8 = (_QWORD *)*v8;
          if (!v8)
            goto LABEL_22;
        }
      }
      do
      {
        v9 = v8[1];
        if (v4 == v9)
        {
          if (v8[2] == v4)
            break;
        }
        else
        {
          if (v9 >= *(_QWORD *)&v3)
            v9 %= *(_QWORD *)&v3;
          if (v9 != v6)
          {
LABEL_21:
            v8 = 0;
            break;
          }
        }
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
  }
LABEL_22:
  v11 = a2[3];
  if (v5.u32[0] > 1uLL)
  {
    v12 = a2[3];
    if (v11 >= *(_QWORD *)&v3)
      v12 = v11 % *(_QWORD *)&v3;
  }
  else
  {
    v12 = (*(_QWORD *)&v3 - 1) & v11;
  }
  v13 = *(_QWORD **)(v7 + 8 * v12);
  if (!v13)
    return 0;
  v14 = (_QWORD *)*v13;
  if (!v14)
    return 0;
  if (v5.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v11 == v17)
      {
        if (v14[2] == v11)
          goto LABEL_42;
      }
      else if ((v17 & v15) != v12)
      {
        return 0;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        return 0;
    }
  }
  while (1)
  {
    v16 = v14[1];
    if (v11 == v16)
      break;
    if (v16 >= *(_QWORD *)&v3)
      v16 %= *(_QWORD *)&v3;
    if (v16 != v12)
      return 0;
LABEL_31:
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 0;
  }
  if (v14[2] != v11)
    goto LABEL_31;
LABEL_42:
  if (v8)
    return sub_20F44AEA4((uint64_t)a2, v8[5], v14[5]);
  return 0;
}

uint64_t sub_20F31A22C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDat"
                     "aControllerEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKN"
                                "S1_17MapDataControllerEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDataControllerEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDataControllerEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F31A298()
{
  return &unk_24C9FDDE0;
}

void sub_20F31A2A8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F31A2BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9FDE00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20F31A2FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FDE00;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F31A324(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  float64x2_t v38;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  _BYTE v70[24];
  _BYTE v71[32];
  _BYTE v72[32];
  _BYTE v73[32];
  float64x2_t v74;

  v6 = *a2;
  v7 = *(_QWORD **)(a1 + 8);
  v8 = (_QWORD *)*v7;
  v9 = (_QWORD *)v7[1];
  v10 = (_QWORD *)*v7;
  v11 = (uint64_t)v9 - *v7;
  if (v11)
  {
    v12 = 0xF0F0F0F0F0F0F0F1 * (v11 >> 3);
    v10 = v8;
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[17 * (v12 >> 1)];
      v16 = *v14;
      v15 = v14 + 17;
      v12 += ~(v12 >> 1);
      if (v16 < v6)
        v10 = v15;
      else
        v12 = v13;
    }
    while (v12);
  }
  v17 = *a3;
  v18 = *(uint64_t **)(a1 + 16);
  if (v9 == v10 || *v10 != v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 4018, (uint64_t)"T_G_parent_submap_to_G_reloc_submap_iter != T_G_ext_submap_to_G_reloc_submap_set.end()", 86, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_67;
    }
    v19 = *(_QWORD **)(a1 + 8);
    v10 = v9;
    v8 = (_QWORD *)*v19;
    v9 = (_QWORD *)v19[1];
  }
  v20 = v9;
  if (v9 != v8)
  {
    v21 = 0xF0F0F0F0F0F0F0F1 * (v9 - v8);
    v20 = v8;
    do
    {
      v22 = v21 >> 1;
      v23 = &v20[17 * (v21 >> 1)];
      v25 = *v23;
      v24 = v23 + 17;
      v21 += ~(v21 >> 1);
      if (v25 < v17)
        v20 = v24;
      else
        v21 = v22;
    }
    while (v21);
  }
  if (v9 == v20 || *v20 != v17)
    v20 = v9;
  if (v9 != v20
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingInterface.cpp", 4020, (uint64_t)"T_G_ext_submap_to_G_reloc_submap_set.find(neighbor_submap_id) == T_G_ext_submap_to_G_reloc_submap_set.end()", 107, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_67:
    abort();
  }
  v26 = (int8x8_t)v18[1];
  v27 = (uint8x8_t)vcnt_s8(v26);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v26 <= v6)
      v28 = v6 % *(_QWORD *)&v26;
    else
      v28 = v6;
    v29 = *v18;
    v30 = *(_QWORD **)(*v18 + 8 * v28);
    if (!v30)
    {
LABEL_51:
      v34 = 24;
      if (v27.u32[0] >= 2uLL)
        goto LABEL_45;
      goto LABEL_52;
    }
  }
  else
  {
    v28 = (*(_QWORD *)&v26 - 1) & v6;
    v29 = *v18;
    v30 = *(_QWORD **)(*v18 + 8 * v28);
    if (!v30)
      goto LABEL_51;
  }
  v31 = (_QWORD *)*v30;
  if (!v31)
    goto LABEL_51;
  if (v27.u32[0] < 2uLL)
  {
    while (1)
    {
      v33 = v31[1];
      if (v33 == v6)
      {
        if (v31[2] == v6)
          goto LABEL_44;
      }
      else if ((v33 & (*(_QWORD *)&v26 - 1)) != v28)
      {
        goto LABEL_43;
      }
      v31 = (_QWORD *)*v31;
      if (!v31)
        goto LABEL_44;
    }
  }
  while (1)
  {
    v32 = v31[1];
    if (v32 == v6)
    {
      if (v31[2] == v6)
        goto LABEL_44;
      goto LABEL_33;
    }
    if (v32 >= *(_QWORD *)&v26)
      v32 %= *(_QWORD *)&v26;
    if (v32 != v28)
      break;
LABEL_33:
    v31 = (_QWORD *)*v31;
    if (!v31)
      goto LABEL_44;
  }
LABEL_43:
  v31 = 0;
LABEL_44:
  v34 = (uint64_t)(v31 + 3);
  if (v27.u32[0] < 2uLL)
  {
LABEL_52:
    v36 = *(_QWORD **)(v29 + 8 * ((*(_QWORD *)&v26 - 1) & v17));
    do
    {
      do
        v36 = (_QWORD *)*v36;
      while (v36[1] != v17);
    }
    while (v36[2] != v17);
    goto LABEL_55;
  }
LABEL_45:
  v35 = v17;
  if (*(_QWORD *)&v26 <= v17)
    v35 = v17 % *(_QWORD *)&v26;
  v36 = *(_QWORD **)(v29 + 8 * v35);
  do
  {
    do
      v36 = (_QWORD *)*v36;
    while (v36[1] != v17);
  }
  while (v36[2] != v17);
LABEL_55:
  sub_20F31A810(a4, *(_QWORD *)(*(_QWORD *)(v34 + 16) + 424), *(_QWORD **)(v36[5] + 424), *(unsigned __int8 *)(a1 + 24), (uint64_t)v70);
  _Q6.f64[0] = *(float64_t *)&v70[16];
  v38 = *(float64x2_t *)v70;
  _D1 = *(_QWORD *)&v72[24];
  _D7 = *(_QWORD *)&v73[24];
  _V16.D[1] = *(_QWORD *)&v73[16];
  v42 = *(float64x2_t *)(v10 + 3);
  v43 = *(float64x2_t *)(v10 + 1);
  _Q6.f64[1] = *(float64_t *)&v71[24];
  v44 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v70, *(int64x2_t *)&v71[8]), vnegq_f64(*(float64x2_t *)&v73[8]).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v70, *(int64x2_t *)&v71[8]), *(float64x2_t *)&v73[8], 1), _Q6, *(double *)&v73[24], 0);
  _D18 = *(_QWORD *)&v72[16];
  __asm
  {
    FMLS            D6, D18, V16.D[1]
    FMLS            D6, D1, V7.D[0]
  }
  v50 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)v70 = v17;
  v51 = *(float64x2_t *)(v10 + 7);
  v52 = *(float64x2_t *)(v10 + 5);
  v53 = *(float64x2_t *)(v10 + 11);
  v54 = *(float64x2_t *)(v10 + 9);
  v55 = *(float64x2_t *)(v10 + 15);
  v56 = *(float64x2_t *)(v10 + 13);
  v57 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v43, v38.f64[0]), v52, *(double *)&v71[8]), v54, *(double *)&v72[8]);
  v58 = vmlaq_n_f64(vmulq_n_f64(v42, v38.f64[0]), v51, *(double *)&v71[8]);
  v59 = vmlaq_laneq_f64(vmulq_laneq_f64(v43, v38, 1), v52, *(float64x2_t *)&v71[8], 1);
  v60 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v42, v38, 1), v51, *(float64x2_t *)&v71[8], 1), v53, *(float64x2_t *)&v72[8], 1), (float64x2_t)0, v55);
  v61 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v43, *(double *)&v70[16]), v52, *(double *)&v71[24]), v54, *(double *)&v72[24]), (float64x2_t)0, v56);
  v62 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v42, *(double *)&v70[16]), v51, *(double *)&v71[24]), v53, *(double *)&v72[24]), (float64x2_t)0, v55);
  *(float64x2_t *)&v70[8] = vmlaq_f64(v57, (float64x2_t)0, v56);
  *(float64x2_t *)v71 = vmlaq_f64(vmlaq_n_f64(v58, v53, *(double *)&v72[8]), (float64x2_t)0, v55);
  *(float64x2_t *)&v71[16] = vmlaq_f64(vmlaq_laneq_f64(v59, v54, *(float64x2_t *)&v72[8], 1), (float64x2_t)0, v56);
  *(float64x2_t *)v72 = v60;
  *(float64x2_t *)&v72[16] = v61;
  *(float64x2_t *)v73 = v62;
  *(float64x2_t *)&v73[16] = vaddq_f64(v56, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, v44.f64[0]), v52, v44, 1), v54, _Q6.f64[0]));
  v74 = vaddq_f64(v55, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, v44.f64[0]), v51, v44, 1), v53, _Q6.f64[0]));
  v63 = (_QWORD *)*v50;
  v64 = (_QWORD *)v50[1];
  if (v64 == (_QWORD *)*v50)
  {
    v63 = (_QWORD *)v50[1];
    goto LABEL_65;
  }
  v65 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v64 - *v50) >> 3);
  do
  {
    v66 = v65 >> 1;
    v67 = &v63[17 * (v65 >> 1)];
    v69 = *v67;
    v68 = v67 + 17;
    v65 += ~(v65 >> 1);
    if (v69 < v17)
      v63 = v68;
    else
      v65 = v66;
  }
  while (v65);
  if (v64 == v63 || *v63 != v17)
LABEL_65:
    sub_20F319948(v50, v63, (uint64_t *)v70);
}

uint64_t sub_20F31A798(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDat"
                     "aControllerEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKN"
                                "S1_17MapDataControllerEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDataControllerEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping16MappingInterface38GroupExternalSubmapsFromRelocalizationERKNS1_17MapDataControllerEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F31A804()
{
  return &unk_24C9FDE70;
}

int64x2_t sub_20F31A810@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v25;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v43;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int8x16_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int64x2_t result;
  float64x2_t v67;
  float64x2_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float64x2_t v73;
  __int128 v74;
  uint64_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  int8x16_t v82;
  float64_t v83;
  float64x2_t v85;
  __int128 v86;
  __double2 v87;
  __int128 v88;
  double v90;
  __int128 v91;
  uint64_t v92;
  _OWORD v93[6];

  v8 = *(_QWORD *)(*(_QWORD *)a2 + 56);
  if (!v8)
    goto LABEL_13;
  v9 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v11 = *(_QWORD *)a2 + 56;
  do
  {
    v12 = *(_QWORD *)(v8 + 32);
    if (v12 < v9)
    {
      v8 += 8;
    }
    else if (v12 == v9)
    {
      if (*(_DWORD *)(v8 + 40) < v10)
        v8 += 8;
      else
        v11 = v8;
    }
    else
    {
      v11 = v8;
    }
    v8 = *(_QWORD *)v8;
  }
  while (v8);
  if (v11 == *(_QWORD *)a2 + 56
    || (v13 = *(_QWORD *)(v11 + 32), v9 < v13)
    || v9 == v13 && *(_DWORD *)(v11 + 40) > v10)
  {
LABEL_13:
    v14 = 0;
    v15 = (_QWORD *)(*a3 + 56);
    v16 = (uint64_t *)*v15;
    if (!*v15)
      goto LABEL_32;
  }
  else
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(*a3 + 56);
    v16 = (uint64_t *)*v15;
    if (!*v15)
      goto LABEL_32;
  }
  v17 = a1[3];
  v18 = *((_DWORD *)a1 + 8);
  v19 = v15;
  do
  {
    v20 = v16[4];
    if (v20 < v17)
    {
      ++v16;
    }
    else if (v20 == v17)
    {
      if (*((_DWORD *)v16 + 10) < v18)
        ++v16;
      else
        v19 = v16;
    }
    else
    {
      v19 = v16;
    }
    v16 = (uint64_t *)*v16;
  }
  while (v16);
  if (v19 == v15 || (v21 = v19[4], v17 < v21) || v17 == v21 && *((_DWORD *)v19 + 10) > v18)
  {
LABEL_32:
    v22 = 0;
    if (v14)
      goto LABEL_34;
    goto LABEL_33;
  }
  v22 = v19[6];
  if (v14)
    goto LABEL_34;
LABEL_33:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 1174, (uint64_t)"query_ext_state", 15, (uint64_t)"Failed to find state in ext_map_data", 36, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_46;
  }
LABEL_34:
  if (!v22)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 1175, (uint64_t)"ref_self_state", 14, (uint64_t)"Failed to find state in self_map_data", 37, (void (*)(void **))sub_21023DDB0);
LABEL_46:
    abort();
  }
  _Q6.f64[0] = *(float64_t *)(v22 + 16);
  _Q5 = *(float64x2_t *)(v22 + 24);
  v25 = *(double *)(v22 + 64);
  _Q4 = *(float64x2_t *)(v22 + 48);
  v27 = *(double *)(v22 + 88);
  v29 = *((float64x2_t *)a1 + 3);
  v28 = *((float64x2_t *)a1 + 4);
  v30 = vmulq_n_f64(v29, _Q6.f64[0]);
  v31 = vmulq_n_f64(v28, _Q6.f64[0]);
  _Q6.f64[1] = *(float64_t *)(v22 + 40);
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v22, (int64x2_t)_Q5), *(double *)(v22 + 72)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v22, (int64x2_t)_Q5), *(float64x2_t *)(v22 + 72), 1), _Q6, v27);
  _D16 = *(_QWORD *)(v22 + 80);
  __asm { FMLA            D6, D16, V4.D[1] }
  _Q6.f64[0] = _Q6.f64[0] + v25 * v27;
  *(_QWORD *)&v38 = *(_OWORD *)&vnegq_f64(v32);
  v40 = *((float64x2_t *)a1 + 5);
  v39 = *((float64x2_t *)a1 + 6);
  _Q23 = *((float64x2_t *)a1 + 7);
  v41 = *((float64x2_t *)a1 + 8);
  _Q25 = *((float64x2_t *)a1 + 9);
  v43 = *((float64x2_t *)a1 + 10);
  v45 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v29, *(double *)v22), v40, _Q5.f64[0]), _Q23, _Q4.f64[0]), (float64x2_t)0, _Q25);
  v46 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, *(double *)v22), v39, _Q5.f64[0]), v41, _Q4.f64[0]), (float64x2_t)0, v43);
  v47 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v29, *(float64x2_t *)v22, 1), v40, _Q5, 1), _Q23, _Q4, 1), (float64x2_t)0, _Q25);
  v48 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v28, *(float64x2_t *)v22, 1), v39, _Q5, 1), v41, _Q4, 1), (float64x2_t)0, v43);
  _Q19 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v30, v40, _Q6.f64[1]), _Q23, v25), (float64x2_t)0, _Q25);
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v31, v39, _Q6.f64[1]), v41, v25), (float64x2_t)0, v43);
  _Q3 = vaddq_f64(_Q25, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v29, v38), v40, v32, 1), _Q23, _Q6.f64[0], 0));
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vaddq_f64(v43, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v28, v38), v39, v32, 1), v41, _Q6.f64[0], 0));
  v51 = (float64x2_t)vzip1q_s64(v45, v47);
  v52 = (float64x2_t)vzip2q_s64(v45, v47);
  v53 = (float64x2_t)vzip1q_s64(v46, v48);
  v54 = vextq_s8((int8x16_t)v52, (int8x16_t)vdupq_laneq_s64(_Q19, 1), 8uLL);
  *(_QWORD *)&v55 = *(_QWORD *)&_Q4.f64[0] ^ 0x8000000000000000;
  v56 = vmlaq_f64(vmlaq_f64(vmulq_f64(v51, (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q3.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q3.f64[1] ^ 0x8000000000000000), v52), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q4.f64[0] ^ 0x8000000000000000), v53);
  *(_QWORD *)&_Q5.f64[0] = *(_QWORD *)&_Q3.f64[1] ^ 0x8000000000000000;
  __asm { FMLA            D3, D5, V19.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v55, v31.f64[0]);
  *(_QWORD *)&_Q5.f64[0] = vdupq_lane_s64(*(uint64_t *)&v52.f64[0], 0).u64[0];
  *(_QWORD *)&_Q5.f64[1] = v54.i64[0];
  v54.i64[0] = *(_QWORD *)&v31.f64[0];
  *(_QWORD *)&v39.f64[0] = _Q19.i64[0];
  _Q3.f64[1] = 1.0;
  _Q23.f64[0] = *(float64_t *)(v14 + 16);
  v28.f64[0] = *(float64_t *)(v14 + 40);
  v57 = *(float64x2_t *)(v14 + 24);
  _Q19.i64[0] = *(_QWORD *)(v14 + 64);
  _Q20 = *(float64x2_t *)(v14 + 48);
  v43.f64[0] = *(float64_t *)(v14 + 88);
  v59 = vmulq_n_f64(v51, _Q23.f64[0]);
  v60 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], _Q23.f64[0]);
  _Q23.f64[1] = v28.f64[0];
  v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v14, (int64x2_t)v57), *(double *)(v14 + 72)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v14, (int64x2_t)v57), *(float64x2_t *)(v14 + 72), 1), _Q23, v43.f64[0]);
  _Q25.f64[0] = *(float64_t *)(v14 + 80);
  __asm { FMLA            D23, D25, V20.D[1] }
  _Q23.f64[0] = _Q23.f64[0] + *(double *)_Q19.i64 * v43.f64[0];
  v62 = vmlaq_n_f64(vmulq_n_f64(v51, *(double *)v14), _Q5, v57.f64[0]);
  v63 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], *(double *)v14), (float64x2_t)v54.u64[1], v57.f64[0]);
  v64 = vmlaq_laneq_f64(vmulq_laneq_f64(v51, *(float64x2_t *)v14, 1), _Q5, v57, 1);
  v65 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v39.f64[0], *(float64x2_t *)v14, 1), (float64x2_t)v54.u64[1], v57, 1);
  *(_QWORD *)&v57.f64[0] = *(_OWORD *)&vnegq_f64(v61);
  result = (int64x2_t)vaddq_f64(v56, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v51, v57.f64[0]), _Q5, v61, 1), v53, _Q23.f64[0], 0));
  v67 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], v57.f64[0]), (float64x2_t)v54.u64[1], v61, 1), (float64x2_t)v54.u64[0], _Q23.f64[0], 0);
  *(float64x2_t *)a5 = vmlaq_f64(vmlaq_n_f64(v62, v53, _Q20.f64[0]), (float64x2_t)0, v56);
  *(float64x2_t *)(a5 + 16) = vmlaq_f64(vmlaq_n_f64(v63, (float64x2_t)v54.u64[0], _Q20.f64[0]), (float64x2_t)0, _Q3);
  *(float64x2_t *)(a5 + 32) = vmlaq_f64(vmlaq_laneq_f64(v64, v53, _Q20, 1), (float64x2_t)0, v56);
  *(float64x2_t *)(a5 + 48) = vmlaq_f64(vmlaq_laneq_f64(v65, (float64x2_t)v54.u64[0], _Q20, 1), (float64x2_t)0, _Q3);
  *(float64x2_t *)(a5 + 64) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v59, _Q5, v28.f64[0]), v53, *(double *)_Q19.i64), (float64x2_t)0, v56);
  *(float64x2_t *)(a5 + 80) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v60, (float64x2_t)v54.u64[1], v28.f64[0]), (float64x2_t)v54.u64[0], *(double *)_Q19.i64), (float64x2_t)0, _Q3);
  v68 = vaddq_f64(_Q3, v67);
  *(int64x2_t *)(a5 + 96) = result;
  *(float64x2_t *)(a5 + 112) = v68;
  if (a4)
  {
    v67.f64[0] = *(float64_t *)(a5 + 16);
    v69 = *(int8x16_t *)a5;
    v70.i64[0] = *(_QWORD *)(a5 + 48);
    v71 = *(int32x4_t *)(a5 + 32);
    v72.i64[0] = *(_QWORD *)(a5 + 80);
    v73 = *(float64x2_t *)(a5 + 64);
    *(_QWORD *)&v74 = *(_QWORD *)(a5 + 64);
    *((_QWORD *)&v74 + 1) = result.i64[0];
    v93[0] = vzip1q_s64(*(int64x2_t *)a5, (int64x2_t)v71);
    v93[1] = v74;
    *(float64_t *)&v74 = v67.f64[0];
    *((_QWORD *)&v74 + 1) = v70.i64[0];
    v93[2] = vzip2q_s64((int64x2_t)v69, (int64x2_t)v71);
    v93[3] = vzip2q_s64((int64x2_t)v73, result);
    v75 = v72.i64[0];
    result.i64[1] = *(_QWORD *)&v68.f64[0];
    v93[4] = v74;
    v93[5] = result;
    result.i64[0] = 0x3EE4F8B588E368F1;
    if (fabs(*(double *)v72.i64 + -1.0) > 0.00001)
      goto LABEL_44;
    if (fabs(v73.f64[0]) > 0.00001)
      goto LABEL_44;
    if (fabs(v73.f64[1]) > 0.00001)
      goto LABEL_44;
    if (fabs(v67.f64[0]) > 0.00001)
      goto LABEL_44;
    if (fabs(*(double *)v70.i64) > 0.00001)
      goto LABEL_44;
    v76 = (int64x2_t)vextq_s8(v69, v69, 8uLL);
    *(_QWORD *)&v77.f64[0] = v69.i64[0];
    *(_QWORD *)&v77.f64[1] = v76.i64[0];
    *(_QWORD *)&v78.f64[0] = v71.i64[0];
    v78.f64[1] = *(double *)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).i64;
    v79.f64[0] = v73.f64[0];
    v79.f64[1] = *(double *)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).i64;
    v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v77, *(double *)v69.i64), v78, *(double *)v71.i64), v79, v73.f64[0]);
    v81.f64[0] = v67.f64[0] * *(double *)v69.i64
               + *(double *)v70.i64 * *(double *)v71.i64
               + *(double *)v72.i64 * v73.f64[0];
    v82 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v77, *(double *)v76.i64), v78, v78.f64[1]), v79, v79.f64[1]);
    *(double *)v76.i64 = v67.f64[0] * *(double *)v76.i64
                       + *(double *)v70.i64 * v78.f64[1]
                       + *(double *)v72.i64 * v79.f64[1];
    v69 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v77, v67.f64[0]), v78, *(double *)v70.i64), v79, *(double *)v72.i64);
    v83 = vmulq_f64(v67, v67).f64[0] + *(double *)v70.i64 * *(double *)v70.i64 + *(double *)v72.i64 * *(double *)v72.i64;
    __asm { FMOV            V3.2D, #-1.0 }
    v85 = vaddq_f64((float64x2_t)vextq_s8(v82, (int8x16_t)v80, 8uLL), _Q3);
    v80.f64[0] = v83 + -1.0;
    *(_QWORD *)&v81.f64[1] = v82.i64[0];
    v73 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
    v71 = (int32x4_t)vcgtq_f64(v73, vabsq_f64(v81));
    v72 = (int32x4_t)vcgtq_f64(v73, vabsq_f64(v80));
    v70 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v73, vabsq_f64(v85)), v72);
    *(int8x8_t *)&v67.f64[0] = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16(v70, (int16x8_t)vuzp1q_s32(v71, (int32x4_t)vcgtq_f64(v73, vabsq_f64((float64x2_t)vzip1q_s64(v76, (int64x2_t)v69)))))));
    LOBYTE(v67.f64[0]) = vmaxv_u8(*(uint8x8_t *)&v67.f64[0]);
    if ((LOBYTE(v67.f64[0]) & 1) != 0 || (v67.f64[0] = fabs(*(double *)&v69.i64[1]), v67.f64[0] >= 0.00001))
    {
LABEL_44:
      v90 = 0.0;
      sub_20F02E93C((uint64_t)v93, &v90, &v91, 0.00001, v67.f64[0], *(double *)v70.i64, *(double *)v72.i64, *(double *)v69.i64, *(double *)v71.i64, (int64x2_t)v73);
      v87 = __sincos_stret(v90);
      *(double *)&v86 = v87.__cosval;
      result = (int64x2_t)v87;
      v88 = v91;
      *((double *)&v86 + 1) = -v87.__sinval;
      __asm { FMOV            V4.2D, #1.0 }
      *(_QWORD *)&_Q4 = v92;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 80) = xmmword_21030D320;
      *(_OWORD *)(a5 + 96) = v88;
      *(_OWORD *)(a5 + 112) = _Q4;
      *(__double2 *)(a5 + 32) = v87;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)a5 = v86;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }
  return result;
}

void sub_20F31AE24(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FDE90;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20F31AE98(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FDE90;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F31AF10(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20F31B014(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v5 = sub_20F31342C(v2);
    MEMORY[0x212BC6398](v5, 0x10B2C40714111CFLL);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_20F31AFA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS_3vio12area_mapping13MappingReturnENS1_18AutoReturningMakeTIS5_NS1_"
                     "21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEEENSt3__110shared_ptrIS5_EENS1_19Ob"
                     "jectBorrowingPoolINSC_10unique_ptrIS5_NSC_14default_deleteIS5_EEEESB_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio12area_mapping13MappingReturnENS1_18AutoReturningMa"
                                "keTIS5_NS1_21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEEENSt3__110sh"
                                "ared_ptrIS5_EENS1_19ObjectBorrowingPoolINSC_10unique_ptrIS5_NSC_14default_deleteIS5_EEEE"
                                "SB_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS_3vio12area_mapping13MappingReturnENS1_18AutoReturningMakeTIS5_NS1_21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEEENSt3__110shared_ptrIS5_EENS1_19ObjectBorrowingPoolINSC_10unique_ptrIS5_NSC_14default_deleteIS5_EEEESB_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio12area_mapping13MappingReturnENS1_18AutoReturningMakeTIS5_NS1_21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEEENSt3__110shared_ptrIS5_EENS1_19ObjectBorrowingPoolINSC_10unique_ptrIS5_NSC_14default_deleteIS5_EEEESB_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20F31B014(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v7 = (char *)sig[1];
      v8 = (v6 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20E867F44();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_20E877A38();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v15 = v13 + 8;
      if (v6 == v7)
      {
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
      }
      else
      {
        v16 = v6 - v7 - 8;
        if (v16 < 0x78)
          goto LABEL_38;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v13 && &v12[v6 - v7 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_38;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v13 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v12[8 * v8 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v13 - 1) = v26;
            v13 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (char *)sig[1];
        v27 = (char *)sig[2];
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            v30 = sub_20F31342C(v28);
            MEMORY[0x212BC6398](v30, 0x10B2C40714111CFLL);
          }
        }
      }
      if (v6)
        operator delete(v6);
      sig[2] = v15;
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20F31B21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20F3133E8((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20F31B238(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v2 = (void *)a1[421];
  if (v2)
  {
    a1[422] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[417];
  if (v3)
  {
    a1[418] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[414];
  if (v4)
  {
    a1[415] = v4;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))a1[411];
  if (v5)
  {
    v6 = (void (***)(_QWORD))a1[412];
    v7 = (void *)a1[411];
    if (v6 != v5)
    {
      v8 = v6 - 5;
      v9 = v6 - 5;
      do
      {
        v10 = *v9;
        v9 -= 5;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)a1[411];
    }
    a1[412] = v5;
    operator delete(v7);
  }
  sub_20F3452EC((uint64_t)(a1 + 402));
  v12 = (_QWORD *)a1[401];
  if (v12 == a1 + 398)
  {
    v13 = 4;
    v12 = a1 + 398;
  }
  else
  {
    if (!v12)
      goto LABEL_19;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_19:
  v14 = (_QWORD *)a1[397];
  if (v14 == a1 + 394)
  {
    v15 = 4;
    v14 = a1 + 394;
  }
  else
  {
    if (!v14)
      goto LABEL_24;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_24:
  v16 = (_QWORD *)a1[393];
  if (v16 == a1 + 390)
  {
    v17 = 4;
    v16 = a1 + 390;
  }
  else
  {
    if (!v16)
      goto LABEL_29;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_29:
  v18 = (_QWORD *)a1[389];
  if (v18 == a1 + 386)
  {
    v19 = 4;
    v18 = a1 + 386;
  }
  else
  {
    if (!v18)
      goto LABEL_34;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_34:
  v20 = a1[385];
  a1[385] = 0;
  if (v20)
  {
    v21 = *(void **)(v20 + 8);
    if (v21)
    {
      *(_QWORD *)(v20 + 16) = v21;
      operator delete(v21);
    }
    MEMORY[0x212BC6398](v20, 0x1070C40C9C8FA31);
  }
  v22 = a1[384];
  a1[384] = 0;
  if (v22)
    MEMORY[0x212BC6398](v22, 0x1000C40FD2CF380);
  v23 = a1[368];
  a1[368] = 0;
  if (v23)
    MEMORY[0x212BC6398](v23, 0x1000C402B859E3DLL);
  v24 = a1[367];
  a1[367] = 0;
  if (v24)
    MEMORY[0x212BC6398](v24, 0x1000C4035487F68);
  v25 = a1[366];
  a1[366] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = a1[365];
  a1[365] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (void *)a1[362];
  if (v27)
  {
    a1[363] = v27;
    operator delete(v27);
  }
  v28 = (void *)a1[359];
  if (v28)
  {
    a1[360] = v28;
    operator delete(v28);
  }
  v29 = (void *)a1[356];
  if (v29)
  {
    a1[357] = v29;
    operator delete(v29);
  }
  v30 = a1[353];
  if (v30)
  {
    v31 = a1[354];
    v32 = (void *)a1[353];
    if (v31 != v30)
    {
      do
        v31 = sub_20F3122B4(v31 - 4472);
      while (v31 != v30);
      v32 = (void *)a1[353];
    }
    a1[354] = v30;
    operator delete(v32);
  }
  return sub_20E869924((uint64_t)a1);
}

uint64_t *sub_20F31B4D0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x1070C40C9C8FA31);
  }
  return a1;
}

uint64_t sub_20F31B524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  char **v18;
  char **v19;
  unsigned int **v20;
  unsigned int **v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t i;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t j;
  unsigned __int8 v53;
  unsigned int v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char **v63;
  char **v64;
  unsigned int v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  BOOL v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _BYTE *v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  char *v87;
  unsigned int v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t k;
  unsigned __int8 v92;
  const void *v93;
  size_t v94;
  char *v95;
  unsigned int v96;
  unsigned __int8 v97;
  uint64_t v98;
  uint64_t m;
  unsigned __int8 v100;
  double v101;
  double v102;
  double v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  float64x2_t v152;
  __int128 v153;
  long double v154;
  float64x2_t v155;
  long double v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  int8x16_t v181;
  uint64_t v182;
  int8x16_t v183;
  int8x16_t v184;
  uint64_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  char *v190;
  std::__shared_weak_count *v191;
  _BYTE v192[24];
  _BYTE *v193;
  _BYTE v194[24];
  _BYTE *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  __int128 __dst;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;

  v11 = MEMORY[0x24BDAC7A8]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = v11;
  v222 = *MEMORY[0x24BDAC8D0];
  v26 = sub_20E86C490(v11, v25);
  *(_QWORD *)(v26 + 2808) = 0xFFFFFFFFLL;
  v166 = (uint64_t *)(v26 + 2824);
  *(_QWORD *)(v26 + 2944) = 0;
  *(_OWORD *)(v26 + 2928) = 0u;
  *(_OWORD *)(v26 + 2912) = 0u;
  *(_OWORD *)(v26 + 2896) = 0u;
  *(_OWORD *)(v26 + 2880) = 0u;
  *(_OWORD *)(v26 + 2864) = 0u;
  *(_OWORD *)(v26 + 2848) = 0u;
  *(_OWORD *)(v26 + 2832) = 0u;
  *(_OWORD *)(v26 + 2816) = 0u;
  *(_OWORD *)(v26 + 2952) = xmmword_2103AF548;
  *(_QWORD *)(v26 + 2968) = 0xBFF0000000000000;
  *(_OWORD *)(v26 + 2976) = *v17;
  *(_OWORD *)(v26 + 2992) = *v15;
  *(_BYTE *)(v26 + 3008) = 0;
  *(_BYTE *)(v26 + 3016) = 0;
  *(_BYTE *)(v26 + 3024) = 0;
  *(_BYTE *)(v26 + 3064) = 0;
  v27 = v26 + 3088;
  *(_OWORD *)(v26 + 3072) = 0u;
  v28 = *(_QWORD *)(v13 + 24);
  v170 = v27;
  if (!v28)
    goto LABEL_4;
  if (v28 != v13)
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
LABEL_4:
    *(_QWORD *)(v24 + 3112) = v28;
    goto LABEL_6;
  }
  *(_QWORD *)(v24 + 3112) = v27;
  (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 24) + 24))(*(_QWORD *)(v13 + 24));
LABEL_6:
  v29 = *(_QWORD *)(a9 + 24);
  v169 = v24 + 3120;
  if (!v29)
  {
LABEL_9:
    *(_QWORD *)(v24 + 3144) = v29;
    goto LABEL_11;
  }
  if (v29 != a9)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    goto LABEL_9;
  }
  *(_QWORD *)(v24 + 3144) = v24 + 3120;
  (*(void (**)(_QWORD))(**(_QWORD **)(a9 + 24) + 24))(*(_QWORD *)(a9 + 24));
LABEL_11:
  v30 = *(_QWORD *)(a10 + 24);
  v168 = v24 + 3152;
  if (!v30)
  {
LABEL_14:
    *(_QWORD *)(v24 + 3176) = v30;
    goto LABEL_16;
  }
  if (v30 != a10)
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    goto LABEL_14;
  }
  *(_QWORD *)(v24 + 3176) = v24 + 3152;
  (*(void (**)(_QWORD))(**(_QWORD **)(a10 + 24) + 24))(*(_QWORD *)(a10 + 24));
LABEL_16:
  v31 = *(_QWORD *)(a11 + 24);
  v167 = v24 + 3184;
  if (!v31)
  {
LABEL_19:
    *(_QWORD *)(v24 + 3208) = v31;
    goto LABEL_21;
  }
  if (v31 != a11)
  {
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
    goto LABEL_19;
  }
  *(_QWORD *)(v24 + 3208) = v24 + 3184;
  (*(void (**)(_QWORD))(**(_QWORD **)(a11 + 24) + 24))(*(_QWORD *)(a11 + 24));
LABEL_21:
  *(_OWORD *)(v24 + 3240) = 0u;
  *(_OWORD *)(v24 + 3224) = 0u;
  *(_QWORD *)(v24 + 3256) = -1;
  v32 = operator new(0x68uLL);
  v32[1] = 0;
  v32[2] = 0;
  *v32 = &off_24C9FDFF0;
  v32[3] = 850045863;
  *((_OWORD *)v32 + 2) = 0u;
  *((_OWORD *)v32 + 3) = 0u;
  *((_OWORD *)v32 + 4) = 0u;
  v32[10] = 0;
  v32[11] = v24 + 3216;
  *(_QWORD *)(v24 + 3264) = v32 + 3;
  *(_QWORD *)(v24 + 3272) = v32;
  *(_BYTE *)(v24 + 3280) = 1;
  *(_QWORD *)(v24 + 3368) = 0;
  *(_QWORD *)(v24 + 3384) = 0;
  *(_QWORD *)(v24 + 3376) = 0;
  *(_OWORD *)(v24 + 3288) = 0u;
  *(_OWORD *)(v24 + 3304) = 0u;
  *(_OWORD *)(v24 + 3320) = 0u;
  *(_OWORD *)(v24 + 3336) = 0u;
  *(_OWORD *)(v24 + 3348) = 0u;
  v33 = *v19;
  v172 = v24;
  if (*v19)
  {
    v34 = (std::__shared_weak_count *)v19[1];
    v190 = *v19;
    v191 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
  }
  else
  {
    v37 = (char *)operator new(0x1C8uLL);
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = 0;
    *(_QWORD *)v37 = &off_24C9B6A40;
    *(_OWORD *)(v37 + 40) = 0u;
    *(_OWORD *)(v37 + 56) = 0u;
    *(_OWORD *)(v37 + 72) = 0u;
    *(_OWORD *)(v37 + 88) = 0u;
    *(_OWORD *)(v37 + 104) = 0u;
    *(_OWORD *)(v37 + 120) = 0u;
    *(_OWORD *)(v37 + 136) = 0u;
    *(_OWORD *)(v37 + 152) = 0u;
    *(_OWORD *)(v37 + 168) = 0u;
    *(_OWORD *)(v37 + 184) = 0u;
    *(_OWORD *)(v37 + 200) = 0u;
    *(_OWORD *)(v37 + 216) = 0u;
    *(_OWORD *)(v37 + 232) = 0u;
    *(_OWORD *)(v37 + 248) = 0u;
    *(_OWORD *)(v37 + 24) = 0u;
    *(_OWORD *)(v37 + 280) = 0u;
    *(_OWORD *)(v37 + 296) = 0u;
    *(_OWORD *)(v37 + 312) = 0u;
    *(_OWORD *)(v37 + 328) = 0u;
    *(_OWORD *)(v37 + 344) = 0u;
    *(_OWORD *)(v37 + 360) = 0u;
    *(_OWORD *)(v37 + 376) = 0u;
    *(_OWORD *)(v37 + 392) = 0u;
    *(_OWORD *)(v37 + 408) = 0u;
    *(_OWORD *)(v37 + 424) = 0u;
    *(_OWORD *)(v37 + 440) = 0u;
    *(_OWORD *)(v37 + 264) = 0u;
    *((_DWORD *)v37 + 14) = 1065353216;
    *((_OWORD *)v37 + 4) = 0u;
    *((_OWORD *)v37 + 5) = 0u;
    *((_OWORD *)v37 + 6) = 0u;
    *((_OWORD *)v37 + 7) = 0u;
    *((_OWORD *)v37 + 8) = 0u;
    *((_OWORD *)v37 + 9) = 0u;
    *((_OWORD *)v37 + 10) = 0u;
    *((_QWORD *)v37 + 22) = 0;
    sub_20FCC477C((_QWORD *)v37 + 3);
    *((_QWORD *)v37 + 23) = -1;
    *((_OWORD *)v37 + 12) = 0u;
    *((_OWORD *)v37 + 13) = 0u;
    *((_DWORD *)v37 + 56) = 1065353216;
    *((_QWORD *)v37 + 29) = 0;
    *((_QWORD *)v37 + 30) = 0;
    *((_QWORD *)v37 + 33) = 0;
    *((_QWORD *)v37 + 35) = 0;
    *((_QWORD *)v37 + 34) = 0;
    *((_QWORD *)v37 + 31) = 0;
    *((_QWORD *)v37 + 32) = v37 + 264;
    v37[316] = 0;
    *((_QWORD *)v37 + 37) = 0;
    *((_QWORD *)v37 + 36) = 0;
    v37[304] = 0;
    *((_QWORD *)v37 + 42) = 0;
    *((_QWORD *)v37 + 41) = 0;
    *((_QWORD *)v37 + 40) = v37 + 328;
    v37[380] = 0;
    *((_QWORD *)v37 + 44) = 0;
    *((_QWORD *)v37 + 43) = 0;
    v37[368] = 0;
    *((_QWORD *)v37 + 45) = 0;
    *((_OWORD *)v37 + 24) = 0u;
    *((_OWORD *)v37 + 25) = 0u;
    *((_DWORD *)v37 + 104) = 1065353216;
    *((_QWORD *)v37 + 53) = -1;
    v37[432] = 0;
    *((_DWORD *)v37 + 113) = 0;
    *(_QWORD *)(v37 + 436) = 0;
    *(_QWORD *)(v37 + 444) = 0;
    v190 = v37 + 24;
    v191 = (std::__shared_weak_count *)v37;
    v38 = (uint64_t *)operator new();
    sub_20E8E8A78(v38);
    v39 = (uint64_t *)*((_QWORD *)v37 + 56);
    *((_QWORD *)v37 + 56) = v38;
    if (v39)
    {
      v40 = sub_20E8E95B0(v39);
      MEMORY[0x212BC6398](v40, 0x20C40313AD07FLL);
    }
    *(_QWORD *)(v37 + 436) = *(_QWORD *)(v24 + 2752);
    *((_DWORD *)v37 + 111) = *(_DWORD *)(v24 + 2760);
    v33 = v190;
  }
  *((_QWORD *)v33 + 20) = *v23;
  *((_QWORD *)v33 + 50) = std::chrono::system_clock::now().__d_.__rep_ / 1000000;
  v41 = *v21;
  v171 = v21[1];
  if (*v21 != v171)
  {
    v42 = **((_QWORD **)v33 + 53);
    v43 = (_QWORD *)(v42 + 304);
    v174 = v42 + 360;
    v175 = v42 + 320;
    v180 = v42;
    v173 = v42 + 400;
    while (1)
    {
      v179 = *v41;
      v44 = v41;
      if (*v41 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v176 = v44;
      v178 = -991146299 * ((*((_QWORD *)v44 + 2) - *((_QWORD *)v44 + 1)) >> 7);
      if ((_DWORD)v178)
        break;
LABEL_31:
      v41 = v176 + 8;
      v24 = v172;
      if (v176 + 8 == v171)
        goto LABEL_196;
    }
    v45 = 0;
    while (1)
    {
      if (v179 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v46 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v47 = qword_254A6DE40;
          for (i = qword_254A6DE48; v47 != i; v47 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v47)(*(_QWORD *)(v47 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v49 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_260;
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v45 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v50 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v51 = qword_254A6DE40;
          for (j = qword_254A6DE48; v51 != j; v51 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v51)(*(_QWORD *)(v51 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v53 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_260;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v177 = v179 << 16;
      v54 = (unsigned __int16)v45 | (v179 << 16);
      v55 = (char *)*v43;
      if (!*v43)
        break;
      v56 = v43;
      v57 = *v43;
      do
      {
        v58 = *(_DWORD *)(v57 + 32);
        v59 = v58 >= v54;
        if (v58 >= v54)
          v60 = (uint64_t *)v57;
        else
          v60 = (uint64_t *)(v57 + 8);
        if (v59)
          v56 = (_QWORD *)v57;
        v57 = *v60;
      }
      while (*v60);
      if (v56 == v43 || *((_DWORD *)v56 + 8) > v54)
        break;
LABEL_36:
      if (++v45 == v178)
        goto LABEL_31;
    }
    v61 = *((_QWORD *)v176 + 1) + 1664 * v45;
    if (*(_BYTE *)(v61 + 1536))
      v62 = v61 + 96;
    else
      v62 = 0;
    v183 = *(int8x16_t *)(v61 + 16);
    v184 = *(int8x16_t *)(v61 + 32);
    v181 = *(int8x16_t *)v61;
    v182 = *(_QWORD *)(v61 + 64);
    v186 = *(int8x16_t *)(v61 + 48);
    v188 = *(int8x16_t *)(v61 + 72);
    v185 = *(_QWORD *)(v61 + 88);
    v63 = (char **)v43;
    v64 = (char **)v43;
    if (v55)
    {
      while (1)
      {
        while (1)
        {
          v64 = (char **)v55;
          v65 = *((_DWORD *)v55 + 8);
          if (v65 <= v54)
            break;
          v55 = *v64;
          v63 = v64;
          if (!*v64)
            goto LABEL_76;
        }
        if (v65 >= v54)
          break;
        v55 = v64[1];
        if (!v55)
        {
          v63 = v64 + 1;
          goto LABEL_76;
        }
      }
      v66 = (char *)v64;
    }
    else
    {
LABEL_76:
      v66 = (char *)operator new(0x88uLL);
      *((_DWORD *)v66 + 8) = v54;
      *((_OWORD *)v66 + 3) = 0u;
      *((_OWORD *)v66 + 4) = 0u;
      *((_OWORD *)v66 + 5) = 0u;
      *((_QWORD *)v66 + 5) = 0x3FF0000000000000;
      *((_QWORD *)v66 + 9) = 0x3FF0000000000000;
      *((_QWORD *)v66 + 12) = 0;
      *((_QWORD *)v66 + 13) = 0x3FF0000000000000;
      *((_QWORD *)v66 + 15) = 0;
      *((_QWORD *)v66 + 16) = 0;
      *((_QWORD *)v66 + 14) = 0;
      *(_QWORD *)v66 = 0;
      *((_QWORD *)v66 + 1) = 0;
      *((_QWORD *)v66 + 2) = v64;
      *v63 = v66;
      v67 = v66;
      v68 = **(_QWORD **)(v180 + 296);
      if (v68)
      {
        *(_QWORD *)(v180 + 296) = v68;
        v67 = *v63;
      }
      v69 = (char *)*v43;
      v70 = v67 == (char *)*v43;
      v67[24] = v70;
      if (!v70)
      {
        do
        {
          v71 = *((_QWORD *)v67 + 2);
          if (*(_BYTE *)(v71 + 24))
            break;
          v72 = *(char **)(v71 + 16);
          v73 = *(_QWORD *)v72;
          if (*(_QWORD *)v72 == v71)
          {
            v76 = *((_QWORD *)v72 + 1);
            if (!v76 || (v77 = *(unsigned __int8 *)(v76 + 24), v74 = (_BYTE *)(v76 + 24), v77))
            {
              if (*(char **)v71 == v67)
              {
                *(_BYTE *)(v71 + 24) = 1;
                v72[24] = 0;
                v80 = *(_QWORD *)(v71 + 8);
                *(_QWORD *)v72 = v80;
                if (v80)
                  goto LABEL_93;
              }
              else
              {
                v78 = *(uint64_t **)(v71 + 8);
                v79 = *v78;
                *(_QWORD *)(v71 + 8) = *v78;
                if (v79)
                {
                  *(_QWORD *)(v79 + 16) = v71;
                  v72 = *(char **)(v71 + 16);
                }
                v78[2] = (uint64_t)v72;
                *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8 * (**(_QWORD **)(v71 + 16) != v71)) = v78;
                *v78 = v71;
                *(_QWORD *)(v71 + 16) = v78;
                v72 = (char *)v78[2];
                v71 = *(_QWORD *)v72;
                *((_BYTE *)v78 + 24) = 1;
                v72[24] = 0;
                v80 = *(_QWORD *)(v71 + 8);
                *(_QWORD *)v72 = v80;
                if (v80)
LABEL_93:
                  *(_QWORD *)(v80 + 16) = v72;
              }
              *(_QWORD *)(v71 + 16) = *((_QWORD *)v72 + 2);
              *(_QWORD *)(*((_QWORD *)v72 + 2) + 8 * (**((_QWORD **)v72 + 2) != (_QWORD)v72)) = v71;
              *(_QWORD *)(v71 + 8) = v72;
LABEL_100:
              *((_QWORD *)v72 + 2) = v71;
              break;
            }
          }
          else if (!v73 || (v75 = *(unsigned __int8 *)(v73 + 24), v74 = (_BYTE *)(v73 + 24), v75))
          {
            if (*(char **)v71 == v67)
            {
              v105 = *((_QWORD *)v67 + 1);
              *(_QWORD *)v71 = v105;
              if (v105)
              {
                *(_QWORD *)(v105 + 16) = v71;
                v72 = *(char **)(v71 + 16);
              }
              *((_QWORD *)v67 + 2) = v72;
              *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8 * (**(_QWORD **)(v71 + 16) != v71)) = v67;
              *((_QWORD *)v67 + 1) = v71;
              *(_QWORD *)(v71 + 16) = v67;
              v72 = (char *)*((_QWORD *)v67 + 2);
              v67[24] = 1;
              v72[24] = 0;
              v71 = *((_QWORD *)v72 + 1);
              v81 = *(char **)v71;
              *((_QWORD *)v72 + 1) = *(_QWORD *)v71;
              if (v81)
LABEL_98:
                *((_QWORD *)v81 + 2) = v72;
            }
            else
            {
              *(_BYTE *)(v71 + 24) = 1;
              v72[24] = 0;
              v71 = *((_QWORD *)v72 + 1);
              v81 = *(char **)v71;
              *((_QWORD *)v72 + 1) = *(_QWORD *)v71;
              if (v81)
                goto LABEL_98;
            }
            *(_QWORD *)(v71 + 16) = *((_QWORD *)v72 + 2);
            *(_QWORD *)(*((_QWORD *)v72 + 2) + 8 * (**((_QWORD **)v72 + 2) != (_QWORD)v72)) = v71;
            *(_QWORD *)v71 = v72;
            goto LABEL_100;
          }
          *(_BYTE *)(v71 + 24) = 1;
          v67 = v72;
          v72[24] = v72 == v69;
          *v74 = 1;
        }
        while (v72 != v69);
      }
      ++*(_QWORD *)(v180 + 312);
    }
    v83 = v186;
    v82 = v188;
    v85 = v183;
    v84 = v184;
    v86 = v181;
    v86.i64[1] = vextq_s8(v86, v86, 8uLL).u64[0];
    *(int8x16_t *)(v66 + 40) = v86;
    v85.i64[1] = vextq_s8(v85, v85, 8uLL).u64[0];
    v84.i64[1] = vextq_s8(v84, v84, 8uLL).u64[0];
    *(int8x16_t *)(v66 + 56) = v85;
    *(int8x16_t *)(v66 + 72) = v84;
    *((_QWORD *)v66 + 13) = v182;
    v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
    *(int8x16_t *)(v66 + 88) = v83;
    *((_QWORD *)v66 + 16) = v185;
    v82.i64[1] = vextq_s8(v82, v82, 8uLL).u64[0];
    *((int8x16_t *)v66 + 7) = v82;
    LODWORD(v220) = (unsigned __int16)v45 | v177;
    *(_QWORD *)&__dst = &v220;
    v87 = sub_20F3456E8(v175, (unsigned int *)&v220, (uint64_t)&unk_2102DB95C, (_DWORD **)&__dst);
    v87[56] = 0;
    *(_OWORD *)(v87 + 40) = 0u;
    *(_OWORD *)(v87 + 24) = 0u;
    v87[64] = 0;
    v212 = 0u;
    v213 = 0u;
    v210 = 0u;
    v211 = 0u;
    v208 = 0u;
    v209 = 0u;
    v206 = 0u;
    v207 = 0u;
    v204 = 0u;
    v205 = 0u;
    v202 = 0u;
    v203 = 0u;
    __dst = 0u;
    v201 = 0u;
    v88 = *(_DWORD *)(v62 + 992);
    if (v88 == -1)
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0);
      v89 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v90 = qword_254A6DE40;
        for (k = qword_254A6DE48; v90 != k; v90 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v90)(*(_QWORD *)(v90 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102A1D75, 0);
      }
      v92 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_260;
      qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102A1D75, 0);
      v88 = *(_DWORD *)(v62 + 992);
      if (v88 <= 7)
      {
LABEL_104:
        if (v88 > 3)
        {
          if (v88 == 6)
          {
LABEL_127:
            v93 = (const void *)(v62 + 168);
LABEL_128:
            v94 = 24;
            goto LABEL_134;
          }
        }
        else
        {
          if (v88 <= 1)
            goto LABEL_106;
          if (v88 == 2)
            goto LABEL_127;
        }
        goto LABEL_129;
      }
    }
    else if (v88 <= 7)
    {
      goto LABEL_104;
    }
    if (v88 <= 0xB)
    {
      if (v88 > 9)
      {
        v93 = (const void *)(v62 + 168);
        v94 = 112;
        goto LABEL_134;
      }
      v93 = (const void *)(v62 + 168);
      goto LABEL_119;
    }
    if (v88 <= 0xD)
    {
      if (v88 != 13)
      {
LABEL_129:
        v93 = (const void *)(v62 + 168);
        goto LABEL_130;
      }
      v93 = (const void *)(v62 + 168);
      goto LABEL_125;
    }
    v93 = (const void *)(v62 + 168);
    if (v88 != -1)
    {
LABEL_133:
      v94 = 224;
      goto LABEL_134;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_260;
    }
    v88 = *(_DWORD *)(v62 + 992);
    if (v88 <= 7)
    {
      if (v88 > 3)
      {
        if (v88 == 6)
          goto LABEL_128;
      }
      else
      {
        if (v88 <= 1)
        {
LABEL_106:
          if (!v88)
            goto LABEL_259;
LABEL_135:
          LODWORD(v218) = (unsigned __int16)v45 | v177;
          *(_QWORD *)&v220 = &v218;
          v95 = sub_20F3459FC(v174, (unsigned int *)&v218, (uint64_t)&unk_2102DB95C, (_DWORD **)&v220);
          *(_OWORD *)(v95 + 184) = v210;
          *(_OWORD *)(v95 + 200) = v211;
          *(_OWORD *)(v95 + 216) = v212;
          *(_OWORD *)(v95 + 232) = v213;
          *(_OWORD *)(v95 + 120) = v206;
          *(_OWORD *)(v95 + 136) = v207;
          *(_OWORD *)(v95 + 152) = v208;
          *(_OWORD *)(v95 + 168) = v209;
          *(_OWORD *)(v95 + 56) = v202;
          *(_OWORD *)(v95 + 72) = v203;
          *(_OWORD *)(v95 + 88) = v204;
          *(_OWORD *)(v95 + 104) = v205;
          *(_OWORD *)(v95 + 24) = __dst;
          *(_OWORD *)(v95 + 40) = v201;
          v217 = 0;
          v216 = 0uLL;
          v215 = 0;
          v214 = 0uLL;
          v96 = *(_DWORD *)(v62 + 992);
          if (v96 == -1)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0);
            v97 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v98 = qword_254A6DE40;
              for (m = qword_254A6DE48; v98 != m; v98 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v98)(*(_QWORD *)(v98 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102A1D75, 0);
            }
            v100 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_260;
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102A1D75, 0);
            v96 = *(_DWORD *)(v62 + 992);
            if (v96 <= 7)
            {
LABEL_137:
              if (v96 <= 3)
              {
                if (!v96)
                {
LABEL_259:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102A1D75, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_260:
                  abort();
                }
                goto LABEL_157;
              }
              if (v96 > 6)
              {
                v101 = *(double *)(v62 + 488);
                v220 = *(_OWORD *)(v62 + 496);
                v221 = *(_QWORD *)(v62 + 512);
                v102 = *(double *)(v62 + 520);
                v218 = *(_OWORD *)(v62 + 528);
                v219 = *(_QWORD *)(v62 + 544);
                v103 = *(double *)(v62 + 552);
                goto LABEL_158;
              }
              goto LABEL_157;
            }
          }
          else if (v96 <= 7)
          {
            goto LABEL_137;
          }
          if (v96 > 0xB)
          {
            if (v96 > 0xE)
            {
              v101 = *(double *)(v62 + 904);
              v220 = *(_OWORD *)(v62 + 912);
              v221 = *(_QWORD *)(v62 + 928);
              v102 = *(double *)(v62 + 936);
              v218 = *(_OWORD *)(v62 + 944);
              v219 = *(_QWORD *)(v62 + 960);
              v103 = *(double *)(v62 + 968);
              goto LABEL_158;
            }
          }
          else
          {
            if (v96 > 9)
            {
              if (v96 != 10)
              {
                v101 = *(double *)(v62 + 680);
                v220 = *(_OWORD *)(v62 + 688);
                v221 = *(_QWORD *)(v62 + 704);
                v102 = *(double *)(v62 + 712);
                v218 = *(_OWORD *)(v62 + 720);
                v219 = *(_QWORD *)(v62 + 736);
                v103 = *(double *)(v62 + 744);
                goto LABEL_158;
              }
              goto LABEL_157;
            }
            if (v96 == 9)
            {
              v101 = *(double *)(v62 + 512);
              v221 = *(_QWORD *)(v62 + 536);
              v220 = *(_OWORD *)(v62 + 520);
              v102 = *(double *)(v62 + 544);
              v219 = *(_QWORD *)(v62 + 568);
              v218 = *(_OWORD *)(v62 + 552);
              v103 = *(double *)(v62 + 576);
LABEL_158:
              v216 = v220;
              v217 = v221;
              v214 = v218;
              v215 = v219;
              LODWORD(v218) = (unsigned __int16)v45 | v177;
              *(_QWORD *)&v220 = &v218;
              v104 = sub_20F345D3C(v173, (unsigned int *)&v218, (uint64_t)&unk_2102DB95C, (_DWORD **)&v220);
              *((double *)v104 + 3) = v101;
              *((_OWORD *)v104 + 2) = v216;
              v104[6] = v217;
              *((double *)v104 + 7) = v102;
              *((_OWORD *)v104 + 4) = v214;
              v104[10] = v215;
              *((double *)v104 + 11) = v103;
              sub_20F3454F8(v180, v54, v62);
              goto LABEL_36;
            }
          }
LABEL_157:
          v220 = 0uLL;
          v221 = 0;
          v219 = 0;
          v102 = 1.0;
          v103 = 1.0;
          v101 = 1.0;
          v218 = 0uLL;
          goto LABEL_158;
        }
        if (v88 == 2)
          goto LABEL_128;
      }
LABEL_130:
      v94 = 32;
      goto LABEL_134;
    }
    if (v88 > 0xB)
    {
      if (v88 > 0xD)
        goto LABEL_133;
      if (v88 != 13)
        goto LABEL_130;
    }
    else if (v88 <= 9)
    {
LABEL_119:
      v94 = 56;
LABEL_134:
      memmove(&__dst, v93, v94);
      goto LABEL_135;
    }
LABEL_125:
    v94 = 112;
    goto LABEL_134;
  }
LABEL_196:
  *(_QWORD *)(v24 + 2808) = *v23;
  LODWORD(v220) = 335;
  v106 = *(_QWORD *)(v24 + 2976);
  v107 = *(_QWORD *)(v24 + 2984);
  v108 = *(_QWORD *)(v24 + 2992);
  v109 = *(_QWORD *)(v24 + 3000);
  v110 = *(_QWORD *)(v24 + 3112);
  if (!v110)
    goto LABEL_199;
  if (v110 != v170)
  {
    v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
LABEL_199:
    v199 = (_BYTE *)v110;
    goto LABEL_201;
  }
  v199 = v198;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v170 + 24))(v170, v198);
LABEL_201:
  v111 = *(_QWORD *)(v24 + 3144);
  if (!v111)
  {
LABEL_204:
    v197 = (_BYTE *)v111;
    goto LABEL_206;
  }
  if (v111 != v169)
  {
    v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
    goto LABEL_204;
  }
  v197 = v196;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v169 + 24))(v169, v196);
LABEL_206:
  v112 = *(_QWORD *)(v24 + 3176);
  if (!v112)
  {
LABEL_209:
    v195 = (_BYTE *)v112;
    goto LABEL_211;
  }
  if (v112 != v168)
  {
    v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
    goto LABEL_209;
  }
  v195 = v194;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v168 + 24))(v168, v194);
LABEL_211:
  v113 = *(_QWORD *)(v24 + 3208);
  if (!v113)
  {
LABEL_214:
    v193 = (_BYTE *)v113;
    goto LABEL_216;
  }
  if (v113 != v167)
  {
    v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
    goto LABEL_214;
  }
  v193 = v192;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v167 + 24))(v167, v192);
LABEL_216:
  sub_20F24C274((uint64_t)&__dst, v24, v106, v107, v108, v109, (unsigned int *)&v220, &v190, -1.0, (uint64_t)v198, (uint64_t)v196, (uint64_t)v194, (uint64_t)v192);
  v114 = *(_QWORD *)(v24 + 2832);
  if (v114 >= *(_QWORD *)(v24 + 2840))
    v115 = sub_20F33DAAC(v166, (uint64_t)&__dst);
  else
    v115 = sub_20F314370(v114, (uint64_t)&__dst) + 4472;
  *(_QWORD *)(v24 + 2832) = v115;
  sub_20F3122B4((uint64_t)&__dst);
  v116 = v193;
  if (v193 == v192)
  {
    v117 = 4;
    v116 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_224;
    v117 = 5;
  }
  (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_224:
  v118 = v195;
  if (v195 == v194)
  {
    v119 = 4;
    v118 = v194;
  }
  else
  {
    if (!v195)
      goto LABEL_229;
    v119 = 5;
  }
  (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_229:
  v120 = v197;
  if (v197 == v196)
  {
    v121 = 4;
    v120 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_234;
    v121 = 5;
  }
  (*(void (**)(void))(*v120 + 8 * v121))();
LABEL_234:
  v122 = v199;
  if (v199 == v198)
  {
    v123 = 4;
    v122 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_239;
    v123 = 5;
  }
  (*(void (**)(void))(*v122 + 8 * v123))();
LABEL_239:
  sub_20F31D2E0(v24);
  v124 = operator new();
  v125 = *(_OWORD *)(v24 + 816);
  *(_OWORD *)(v124 + 168) = *(_OWORD *)(v24 + 800);
  *(_OWORD *)(v124 + 184) = v125;
  v126 = *(_OWORD *)(v24 + 848);
  *(_OWORD *)(v124 + 200) = *(_OWORD *)(v24 + 832);
  *(_OWORD *)(v124 + 216) = v126;
  v127 = *(_OWORD *)(v24 + 752);
  *(_OWORD *)(v124 + 104) = *(_OWORD *)(v24 + 736);
  *(_OWORD *)(v124 + 120) = v127;
  v128 = *(_OWORD *)(v24 + 784);
  *(_OWORD *)(v124 + 136) = *(_OWORD *)(v24 + 768);
  *(_OWORD *)(v124 + 152) = v128;
  v129 = *(_OWORD *)(v24 + 688);
  *(_OWORD *)(v124 + 40) = *(_OWORD *)(v24 + 672);
  *(_OWORD *)(v124 + 56) = v129;
  v130 = *(_OWORD *)(v24 + 720);
  *(_OWORD *)(v124 + 72) = *(_OWORD *)(v24 + 704);
  *(_OWORD *)(v124 + 88) = v130;
  v131 = *(_OWORD *)(v24 + 656);
  *(_OWORD *)(v124 + 8) = *(_OWORD *)(v24 + 640);
  *(_OWORD *)(v124 + 24) = v131;
  *(_QWORD *)(v124 + 232) = 0;
  *(_QWORD *)(v124 + 240) = 0;
  *(_QWORD *)(v124 + 248) = 0;
  *(_QWORD *)v124 = &off_24C9FF548;
  *(_DWORD *)(v124 + 256) = 0;
  *(_OWORD *)(v124 + 264) = 0u;
  *(_OWORD *)(v124 + 280) = 0u;
  *(_OWORD *)(v124 + 296) = 0u;
  *(_OWORD *)(v124 + 312) = 0u;
  *(_OWORD *)(v124 + 328) = 0u;
  *(_OWORD *)(v124 + 344) = 0u;
  v132 = *(_QWORD *)(v24 + 2928);
  *(_QWORD *)(v24 + 2928) = v124;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  v133 = operator new();
  v134 = *(_OWORD *)(v24 + 816);
  *(_OWORD *)(v133 + 168) = *(_OWORD *)(v24 + 800);
  *(_OWORD *)(v133 + 184) = v134;
  v135 = *(_OWORD *)(v24 + 848);
  *(_OWORD *)(v133 + 200) = *(_OWORD *)(v24 + 832);
  *(_OWORD *)(v133 + 216) = v135;
  v136 = *(_OWORD *)(v24 + 752);
  *(_OWORD *)(v133 + 104) = *(_OWORD *)(v24 + 736);
  *(_OWORD *)(v133 + 120) = v136;
  v137 = *(_OWORD *)(v24 + 784);
  *(_OWORD *)(v133 + 136) = *(_OWORD *)(v24 + 768);
  *(_OWORD *)(v133 + 152) = v137;
  v138 = *(_OWORD *)(v24 + 688);
  *(_OWORD *)(v133 + 40) = *(_OWORD *)(v24 + 672);
  *(_OWORD *)(v133 + 56) = v138;
  v139 = *(_OWORD *)(v24 + 720);
  *(_OWORD *)(v133 + 72) = *(_OWORD *)(v24 + 704);
  *(_OWORD *)(v133 + 88) = v139;
  v140 = *(_OWORD *)(v24 + 656);
  *(_OWORD *)(v133 + 8) = *(_OWORD *)(v24 + 640);
  *(_OWORD *)(v133 + 24) = v140;
  *(_QWORD *)(v133 + 232) = 0;
  *(_QWORD *)(v133 + 240) = 0;
  *(_QWORD *)(v133 + 248) = 0;
  *(_QWORD *)v133 = &off_24C9FBF58;
  v141 = *(_QWORD *)(v24 + 2920);
  *(_QWORD *)(v24 + 2920) = v133;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = operator new();
  *(_QWORD *)(v142 + 16) = *(_QWORD *)(v24 + 552);
  *(_QWORD *)(v142 + 24) = 0;
  *(_OWORD *)v142 = *(_OWORD *)(v24 + 536);
  *(_WORD *)(v142 + 32) = 1;
  *(_DWORD *)(v142 + 36) = 0;
  v143 = *(_QWORD *)(v24 + 3072);
  *(_QWORD *)(v24 + 3072) = v142;
  if (v143)
    MEMORY[0x212BC6398](v143, 0x1000C40FD2CF380);
  v144 = operator new();
  *(_OWORD *)(v144 + 80) = 0u;
  *(_OWORD *)(v144 + 96) = 0u;
  *(_OWORD *)(v144 + 224) = 0u;
  *(_OWORD *)(v144 + 240) = 0u;
  *(_OWORD *)(v144 + 192) = 0u;
  *(_OWORD *)(v144 + 208) = 0u;
  *(_OWORD *)(v144 + 160) = 0u;
  *(_OWORD *)(v144 + 176) = 0u;
  *(_OWORD *)(v144 + 112) = 0u;
  *(_OWORD *)(v144 + 128) = 0u;
  *(_OWORD *)v144 = xmmword_210385560;
  *(_QWORD *)(v144 + 16) = 0x4038000000000000;
  *(_OWORD *)(v144 + 24) = xmmword_210385570;
  *(_OWORD *)(v144 + 40) = xmmword_210385580;
  *(_OWORD *)(v144 + 88) = xmmword_2103855A0;
  *(_OWORD *)(v144 + 56) = xmmword_210385590;
  *(_QWORD *)(v144 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(v144 + 160) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(v144 + 104) = 0x4014000000000000;
  *(_QWORD *)(v144 + 112) = 100;
  *(_OWORD *)(v144 + 128) = xmmword_210385580;
  *(_OWORD *)(v144 + 144) = xmmword_210385590;
  *(_OWORD *)(v144 + 184) = xmmword_2103AF480;
  *(_OWORD *)(v144 + 200) = xmmword_2103AF490;
  *(_OWORD *)(v144 + 216) = xmmword_2103AF4A0;
  *(_QWORD *)(v144 + 232) = -1;
  *(_QWORD *)(v144 + 240) = -1;
  v145 = *(_QWORD *)(v24 + 2936);
  *(_QWORD *)(v24 + 2936) = v144;
  if (v145)
  {
    MEMORY[0x212BC6398](v145, 0x1000C4035487F68);
    v144 = *(_QWORD *)(v24 + 2936);
  }
  v146 = *(_OWORD *)(v24 + 232);
  *(_OWORD *)v144 = *(_OWORD *)(v24 + 216);
  *(_OWORD *)(v144 + 16) = v146;
  v147 = *(_OWORD *)(v24 + 248);
  v148 = *(_OWORD *)(v24 + 264);
  v149 = *(_OWORD *)(v24 + 280);
  *(_QWORD *)(v144 + 80) = *(_QWORD *)(v24 + 296);
  *(_OWORD *)(v144 + 48) = v148;
  *(_OWORD *)(v144 + 64) = v149;
  *(_OWORD *)(v144 + 32) = v147;
  v151 = *(_OWORD *)(v24 + 352);
  v150 = *(_OWORD *)(v24 + 368);
  v152 = *(float64x2_t *)(v24 + 377);
  *(_OWORD *)(v144 + 120) = *(_OWORD *)(v24 + 336);
  *(float64x2_t *)(v144 + 161) = v152;
  *(_OWORD *)(v144 + 152) = v150;
  *(_OWORD *)(v144 + 136) = v151;
  v153 = *(_OWORD *)(v24 + 304);
  *(_OWORD *)(v144 + 104) = *(_OWORD *)(v24 + 320);
  *(_OWORD *)(v144 + 88) = v153;
  v152.f64[1] = *(float64_t *)(v24 + 224);
  v152.f64[0] = 0.0174532925;
  v187 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v24 + 216), v152);
  v154 = cos(fmax(fmin(*(double *)v187.i64, 3.14159265), 0.0));
  *(int8x16_t *)(v144 + 184) = vextq_s8(v187, v187, 8uLL);
  *(long double *)(v144 + 200) = v154;
  v155.f64[1] = *(float64_t *)(v24 + 312);
  v155.f64[0] = 0.0174532925;
  v189 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v24 + 304), v155);
  v156 = cos(fmax(fmin(*(double *)v189.i64, 3.14159265), 0.0));
  *(int8x16_t *)(v144 + 208) = vextq_s8(v189, v189, 8uLL);
  *(long double *)(v144 + 224) = v156;
  *(_QWORD *)(v144 + 232) = -1;
  *(_DWORD *)(v144 + 240) = -1;
  *(_WORD *)(v144 + 248) = 0;
  *(_DWORD *)(v144 + 250) = 0;
  v157 = operator new();
  *(_BYTE *)(v157 + 16) = 0;
  *(_BYTE *)(v157 + 24) = 0;
  *(_BYTE *)(v157 + 32) = 0;
  *(_BYTE *)(v157 + 40) = 0;
  *(_OWORD *)(v157 + 48) = *(_OWORD *)(v24 + 400);
  *(_QWORD *)(v157 + 64) = *(_QWORD *)(v24 + 416);
  *(_QWORD *)(v157 + 72) = 0;
  *(_QWORD *)(v157 + 80) = -1;
  *(_QWORD *)(v157 + 88) = -1;
  v158 = *(_QWORD *)(v24 + 2944);
  *(_QWORD *)(v24 + 2944) = v157;
  if (v158)
    MEMORY[0x212BC6398](v158, 0x1000C402B859E3DLL);
  v159 = (_QWORD *)operator new();
  *v159 = v24;
  v159[1] = 0;
  v159[2] = 0;
  v159[3] = 0;
  v159[4] = -1;
  v160 = *(_QWORD *)(v24 + 3080);
  *(_QWORD *)(v24 + 3080) = v159;
  if (v160)
  {
    v161 = *(void **)(v160 + 8);
    if (v161)
    {
      *(_QWORD *)(v160 + 16) = v161;
      operator delete(v161);
    }
    MEMORY[0x212BC6398](v160, 0x1070C40C9C8FA31);
  }
  v162 = v191;
  if (v191)
  {
    v163 = (unint64_t *)&v191->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  return v24;
}

void sub_20F31CEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void **a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;

  MEMORY[0x212BC6398](v46, 0x20C40313AD07FLL);
  sub_20E86665C((uint64_t)&a46);
  v48 = (void *)a22[421];
  if (v48)
  {
    a22[422] = v48;
    operator delete(v48);
    v49 = (void *)a22[417];
    if (!v49)
    {
LABEL_3:
      v50 = (void *)a22[414];
      if (!v50)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v49 = (void *)a22[417];
    if (!v49)
      goto LABEL_3;
  }
  a22[418] = v49;
  operator delete(v49);
  v50 = (void *)a22[414];
  if (!v50)
  {
LABEL_5:
    sub_20EDC0730(a13);
    sub_20F3452EC(a14);
    v51 = (_QWORD *)a22[401];
    v52 = a16;
    if (v51 == a16)
    {
      v53 = 4;
    }
    else
    {
      if (!v51)
        goto LABEL_10;
      v53 = 5;
      v52 = (_QWORD *)a22[401];
    }
    (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_10:
    v54 = a19;
    v55 = a17;
    v56 = (_QWORD *)a22[397];
    if (v56 == a17)
    {
      v57 = 4;
    }
    else
    {
      if (!v56)
        goto LABEL_15;
      v57 = 5;
      v55 = (_QWORD *)a22[397];
    }
    (*(void (**)(void))(*v55 + 8 * v57))();
    v54 = a19;
LABEL_15:
    v58 = a18;
    v59 = (_QWORD *)a22[393];
    if (v59 == a18)
    {
      v60 = 4;
    }
    else
    {
      if (!v59)
        goto LABEL_20;
      v60 = 5;
      v58 = (_QWORD *)a22[393];
    }
    (*(void (**)(void))(*v58 + 8 * v60))();
    v54 = a19;
LABEL_20:
    v61 = (_QWORD *)a22[389];
    if (v61 == v54)
    {
      v62 = 4;
    }
    else
    {
      if (!v61)
      {
        sub_20F31B4D0(a22 + 385);
        v63 = a22[384];
        a22[384] = 0;
        if (v63)
          goto LABEL_37;
        goto LABEL_24;
      }
      v62 = 5;
      a19 = (_QWORD *)a22[389];
    }
    (*(void (**)(void))(*a19 + 8 * v62))();
    sub_20F31B4D0(a22 + 385);
    v63 = a22[384];
    a22[384] = 0;
    if (v63)
    {
LABEL_37:
      MEMORY[0x212BC6398](v63, 0x1000C40FD2CF380);
      v64 = a22[368];
      a22[368] = 0;
      if (v64)
      {
LABEL_38:
        MEMORY[0x212BC6398](v64, 0x1000C402B859E3DLL);
        v65 = a22[367];
        a22[367] = 0;
        if (v65)
        {
LABEL_39:
          MEMORY[0x212BC6398](v65, 0x1000C4035487F68);
          v66 = a22[366];
          a22[366] = 0;
          if (v66)
          {
LABEL_40:
            (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
            v67 = a22[365];
            a22[365] = 0;
            if (v67)
            {
LABEL_41:
              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
              v68 = (void *)a22[362];
              if (v68)
              {
LABEL_42:
                a22[363] = v68;
                operator delete(v68);
                v69 = (void *)a22[359];
                if (v69)
                {
LABEL_43:
                  a22[360] = v69;
                  operator delete(v69);
                  v70 = (void *)a22[356];
                  if (v70)
                  {
LABEL_44:
                    a22[357] = v70;
                    operator delete(v70);
                    sub_20F300EA8(a15);
                    sub_20E869924((uint64_t)a22);
                    _Unwind_Resume(a1);
                  }
LABEL_31:
                  sub_20F300EA8(a15);
                  sub_20E869924((uint64_t)a22);
                  _Unwind_Resume(a1);
                }
LABEL_30:
                v70 = (void *)a22[356];
                if (v70)
                  goto LABEL_44;
                goto LABEL_31;
              }
LABEL_29:
              v69 = (void *)a22[359];
              if (v69)
                goto LABEL_43;
              goto LABEL_30;
            }
LABEL_28:
            v68 = (void *)a22[362];
            if (v68)
              goto LABEL_42;
            goto LABEL_29;
          }
LABEL_27:
          v67 = a22[365];
          a22[365] = 0;
          if (v67)
            goto LABEL_41;
          goto LABEL_28;
        }
LABEL_26:
        v66 = a22[366];
        a22[366] = 0;
        if (v66)
          goto LABEL_40;
        goto LABEL_27;
      }
LABEL_25:
      v65 = a22[367];
      a22[367] = 0;
      if (v65)
        goto LABEL_39;
      goto LABEL_26;
    }
LABEL_24:
    v64 = a22[368];
    a22[368] = 0;
    if (v64)
      goto LABEL_38;
    goto LABEL_25;
  }
LABEL_4:
  a22[415] = v50;
  operator delete(v50);
  goto LABEL_5;
}

void sub_20F31D2E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::chrono::system_clock::time_point v6;
  uint64_t v7;
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;

  v2 = *(_QWORD *)(a1 + 2824);
  v3 = *(_QWORD *)(a1 + 2832);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v2 + 16);
      if (v4)
      {
        if (*(_QWORD *)(v4 + 160) == *(_QWORD *)(a1 + 2808))
          break;
      }
      v2 += 4472;
      if (v2 == v3)
        goto LABEL_11;
    }
  }
  if (v2 != v3 && v2 != 0)
  {
    if ((*(_BYTE *)(v2 + 304) & 2) != 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_11:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2849, (uint64_t)"primary_submap", 14, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_50;
  }
  v2 = 0;
  if ((MEMORY[0x130] & 2) == 0)
  {
LABEL_15:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2851, (uint64_t)"primary_submap->submap_state().Get<mapping_types::SubmapRuntimeState::Flag::kIsPrimary>()", 89, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))goto LABEL_16;
LABEL_50:
    abort();
  }
LABEL_16:
  *(_QWORD *)(a1 + 2816) = v2;
  v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v7 = *(_QWORD *)(a1 + 2824);
  v8 = *(_QWORD *)(a1 + 2832);
  if (v7 != v8)
  {
    v9 = v6.__d_.__rep_ / 1000000;
    do
    {
      if (*(_BYTE *)(a1 + 117))
        v10 = 0;
      else
        v10 = v9;
      v11 = *(_QWORD *)(v7 + 16);
      v34 = *(_QWORD *)(v11 + 160);
      v35 = &v34;
      sub_20F282588(v11 + 360, &v34, (uint64_t)&unk_2102DB95C, &v35)[3] = v10;
      v7 += 4472;
    }
    while (v7 != v8);
  }
  v12 = *(char **)(a1 + 2848);
  v13 = *(char **)(a1 + 2856);
  v14 = *(_QWORD *)(a1 + 2808);
  v15 = v12;
  if (v12 != v13)
  {
    while (*(_QWORD *)v15 != v14)
    {
      v15 += 8;
      if (v15 == v13)
      {
        v15 = *(char **)(a1 + 2856);
        break;
      }
    }
  }
  if (v15 == v13)
  {
    v16 = *(_QWORD *)(a1 + 2864);
    if ((unint64_t)v13 < v16)
    {
      *(_QWORD *)v13 = v14;
      v17 = (uint64_t)(v13 + 8);
LABEL_48:
      *(_QWORD *)(a1 + 2856) = v17;
      return;
    }
    v18 = v13 - v12;
    v19 = (v13 - v12) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_20E92CED8();
    v21 = v16 - (_QWORD)v12;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        sub_20E877A38();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v14;
      v17 = (uint64_t)(v24 + 1);
      if (v12 == v13)
        goto LABEL_46;
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v14;
      v17 = 8 * v19 + 8;
      if (v12 == v13)
      {
LABEL_46:
        *(_QWORD *)(a1 + 2848) = v24;
        *(_QWORD *)(a1 + 2856) = v17;
        *(_QWORD *)(a1 + 2864) = v25;
        if (v12)
          operator delete(v12);
        goto LABEL_48;
      }
    }
    if ((unint64_t)(v18 - 8) < 0x58)
      goto LABEL_55;
    if ((unint64_t)(v12 - v23) < 0x20)
      goto LABEL_55;
    v26 = ((unint64_t)(v18 - 8) >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v28 = &v13[-v27];
    v24 = (_QWORD *)((char *)v24 - v27);
    v29 = &v23[8 * v19 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 4;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        v33 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v24 = v33;
      }
      while (v13 != v12);
    }
    goto LABEL_46;
  }
}

void sub_20F31D5EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float64x2_t v12;
  __int128 v13;
  long double v14;
  float64x2_t v15;
  long double v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;

  v2 = *(_QWORD *)(a1 + 2824);
  for (i = *(_QWORD *)(a1 + 2832); v2 != i; v2 += 4472)
  {
    *(_BYTE *)(v2 + 208) = 0;
    *(_BYTE *)(v2 + 224) = 0;
    v4 = *(_QWORD *)(v2 + 232);
    *(_QWORD *)(v4 + 24) = 0;
    *(_WORD *)(v4 + 32) = 1;
    *(_DWORD *)(v4 + 36) = 0;
  }
  v5 = *(_QWORD *)(a1 + 2936);
  v6 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v5 + 16) = v6;
  v7 = *(_OWORD *)(a1 + 248);
  v8 = *(_OWORD *)(a1 + 264);
  v9 = *(_OWORD *)(a1 + 280);
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 296);
  *(_OWORD *)(v5 + 48) = v8;
  *(_OWORD *)(v5 + 64) = v9;
  *(_OWORD *)(v5 + 32) = v7;
  v11 = *(_OWORD *)(a1 + 352);
  v10 = *(_OWORD *)(a1 + 368);
  v12 = *(float64x2_t *)(a1 + 377);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)(a1 + 336);
  *(float64x2_t *)(v5 + 161) = v12;
  *(_OWORD *)(v5 + 152) = v10;
  *(_OWORD *)(v5 + 136) = v11;
  v13 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(v5 + 88) = v13;
  v12.f64[1] = *(float64_t *)(a1 + 224);
  v12.f64[0] = 0.0174532925;
  v18 = (int8x16_t)vmulq_f64(*(float64x2_t *)(a1 + 216), v12);
  v14 = cos(fmax(fmin(*(double *)v18.i64, 3.14159265), 0.0));
  *(int8x16_t *)(v5 + 184) = vextq_s8(v18, v18, 8uLL);
  *(long double *)(v5 + 200) = v14;
  v15.f64[1] = *(float64_t *)(a1 + 312);
  v15.f64[0] = 0.0174532925;
  v19 = (int8x16_t)vmulq_f64(*(float64x2_t *)(a1 + 304), v15);
  v16 = cos(fmax(fmin(*(double *)v19.i64, 3.14159265), 0.0));
  *(int8x16_t *)(v5 + 208) = vextq_s8(v19, v19, 8uLL);
  *(long double *)(v5 + 224) = v16;
  *(_QWORD *)(v5 + 232) = -1;
  *(_DWORD *)(v5 + 240) = -1;
  *(_WORD *)(v5 + 248) = 0;
  *(_DWORD *)(v5 + 250) = 0;
  *(_BYTE *)(a1 + 3280) = 1;
  *(_QWORD *)(a1 + 2880) = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2904) = *(_QWORD *)(a1 + 2896);
  v17 = *(_QWORD *)(a1 + 2944);
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  if (*(_BYTE *)(v17 + 40))
    *(_BYTE *)(v17 + 40) = 0;
  if (*(_BYTE *)(v17 + 24))
    *(_BYTE *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 80) = -1;
  *(_QWORD *)(v17 + 88) = -1;
}

uint64_t sub_20F31D778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v30;
  char *v31;
  size_t v32;
  __darwin_time_t tv_sec;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v38;
  timespec v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  void *v46;
  char v47;
  char v48;
  void *v49;
  char v50;
  char v51;
  void *v52;
  char v53;
  void *__p;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_20F256638(*(_QWORD **)(a1 + 2816), a2, a3, a4, a5, a6, a7, a8, a9);
  v18 = *(_QWORD *)(a1 + 2936);
  v19 = *(_QWORD *)(a2 + 1096);
  v20 = *(_QWORD *)(v19 + 56);
  LODWORD(v19) = *(_DWORD *)(v19 + 48);
  *(_QWORD *)(v18 + 232) = v20;
  *(_DWORD *)(v18 + 240) = v19;
  v21 = *(_QWORD *)(a1 + 2944);
  v22 = *(double *)(a2 + 1056);
  if (!*(_BYTE *)(a2 + 201))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2816) + 16) + 160);
    ++*(_DWORD *)(v21 + 72);
    if (*(_BYTE *)(v21 + 24))
      *(_BYTE *)(v21 + 24) = 0;
    if (*(_BYTE *)(v21 + 40))
    {
      *(double *)v21 = v22 - *(double *)(v21 + 32);
      *(_QWORD *)(v21 + 88) = v23;
      if (!*(_BYTE *)(a1 + 3016))
        goto LABEL_15;
      goto LABEL_13;
    }
    *(double *)(v21 + 32) = v22;
    *(_BYTE *)(v21 + 40) = 1;
    *(_QWORD *)(v21 + 80) = v23;
    *(_QWORD *)(v21 + 88) = v23;
    if (*(_BYTE *)(a1 + 3016))
      goto LABEL_13;
LABEL_15:
    v24 = 0;
    goto LABEL_16;
  }
  ++*(_DWORD *)(v21 + 76);
  if (*(_BYTE *)(v21 + 40))
    *(_BYTE *)(v21 + 40) = 0;
  if (!*(_BYTE *)(v21 + 24))
  {
    *(double *)(v21 + 16) = v22;
    *(_BYTE *)(v21 + 24) = 1;
    if (*(_BYTE *)(a1 + 3016))
      goto LABEL_13;
    goto LABEL_15;
  }
  *(double *)(v21 + 8) = v22 - *(double *)(v21 + 16);
  if (!*(_BYTE *)(a1 + 3016))
    goto LABEL_15;
LABEL_13:
  v24 = *(_QWORD *)(a1 + 3008);
LABEL_16:
  sub_20F442000(a3, a4, v24);
  v25 = sub_210219C18();
  v26 = *(_QWORD *)(a2 + 1096);
  v27 = *(_QWORD *)(v26 + 56);
  v28 = *(_DWORD *)(v26 + 48);
  LOBYTE(v26) = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v40) = 67110144;
    HIDWORD(v40) = (a3 | a4) ^ 1;
    LOWORD(v41) = 1024;
    *(_DWORD *)((char *)&v41 + 2) = a3;
    HIWORD(v41) = 1024;
    v42 = a4;
    v43 = 2048;
    v38 = v27;
    v44 = v27;
    v45 = 1024;
    v30 = v28;
    LODWORD(v46) = v28;
    v31 = (char *)_os_log_send_and_compose_impl();
    v32 = strlen(v31);
    v39.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v39);
    tv_sec = v39.tv_sec;
    timespec_get(&v39, 1);
    sub_210219E20(&v40, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v25 + 1), (__int128 *)(v25 + 5), "MM:AddKF: RKF:%d, WKF:%d, SKF:%d, VSID:[%llu:%u]", 0x30uLL, v31, v32, tv_sec, &v39);
    std::mutex::lock(&stru_254A5A410);
    v34 = qword_254A5A458;
    for (i = unk_254A5A460; v34 != i; v34 += 40)
    {
      v36 = *(_QWORD *)(v34 + 32);
      if (!v36)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 48))(v36, &v40);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v55 < 0)
    {
      operator delete(__p);
      v28 = v30;
      if ((v53 & 0x80000000) == 0)
      {
LABEL_23:
        v27 = v38;
        if (!v51)
        {
LABEL_29:
          if (v48 && v47 < 0)
            operator delete(v46);
          if (SHIBYTE(v45) < 0)
            operator delete(v41);
          if (v31)
            free(v31);
          goto LABEL_36;
        }
LABEL_27:
        if (v50 < 0)
          operator delete(v49);
        goto LABEL_29;
      }
    }
    else
    {
      v28 = v30;
      if ((v53 & 0x80000000) == 0)
        goto LABEL_23;
    }
    operator delete(v52);
    v27 = v38;
    if (!v51)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_36:
  if (os_signpost_enabled((os_log_t)*v25))
  {
    LODWORD(v40) = 67110144;
    HIDWORD(v40) = (a3 | a4) ^ 1;
    LOWORD(v41) = 1024;
    *(_DWORD *)((char *)&v41 + 2) = a3;
    HIWORD(v41) = 1024;
    v42 = a4;
    v43 = 2048;
    v44 = v27;
    v45 = 1024;
    LODWORD(v46) = v28;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  *(_BYTE *)(a1 + 3280) = 1;
  return kdebug_trace();
}

void sub_20F31DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_20E96E218((uint64_t)va1);
  if (v9)
    free(v9);
  if (*(_BYTE *)(a7 + 96))
    sub_20EE62D7C((void **)a7);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F31DCD4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68888);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68888))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68880);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68888);
  }
  *a1 = qword_254A68880;
}

void sub_20F31DD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68888);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68888);
  _Unwind_Resume(a1);
}

void sub_20F31DDC8(uint64_t a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, __n128 **a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  __n128 *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int32 v31;
  __n128 *v32;
  __n128 *v33;
  void *__p;
  __int128 v35;
  __n128 v36;
  char v37;
  _QWORD v38[2];
  _OWORD v39[2];
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  v7 = (char *)v6 - (char *)*a2;
  if (v6 != *a2)
  {
    if (v7 < 0)
      sub_20E867F44();
    v10 = (__n128 *)operator new((char *)v6 - (char *)*a2);
    *a4 = v10;
    a4[1] = v10;
    a4[2] = &v10[v7 >> 4];
    do
    {
      v12 = *(_QWORD *)(a1 + 2824);
      v13 = *(_QWORD *)(a1 + 2832);
      if (v12 != v13)
      {
        while (1)
        {
          v14 = *(_QWORD *)(v12 + 16);
          if (v14)
          {
            if (*(_QWORD *)(v14 + 160) == *v5)
              break;
          }
          v12 += 4472;
          if (v12 == v13)
            goto LABEL_6;
        }
      }
      v15 = v12 == v13 || v12 == 0;
      if (v15 || a3 && (*(_BYTE *)(v12 + 304) & 4) == 0)
        goto LABEL_6;
      sub_20F268E8C((_QWORD *)v12, v5, &v36);
      if (!v37)
        goto LABEL_6;
      v38[0] = v36.n128_u64[0];
      v38[1] = (unint64_t)v36.n128_u32[2] << 32;
      if (*(_BYTE *)(a1 + 2623))
      {
        sub_2102323F4((unsigned __int8 *)v38, v39);
        v16 = operator new(0x28uLL);
        __p = v16;
        v35 = xmmword_2102E0950;
        v17 = v39[1];
        *v16 = v39[0];
        v16[1] = v17;
        *((_DWORD *)v16 + 8) = v40;
        *((_BYTE *)v16 + 36) = 0;
        v18 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v12 + 192) + 8), (uint64_t)&__p);
        v19 = v18;
        if (SHIBYTE(v35) < 0)
        {
          operator delete(__p);
          if (!v19)
            goto LABEL_6;
        }
        else if (!v18)
        {
          goto LABEL_6;
        }
        if (!v37)
          sub_20E866B34();
      }
      v21 = a4[1];
      v20 = (unint64_t)a4[2];
      if ((unint64_t)v21 < v20)
      {
        *v21 = v36;
        v11 = v21 + 1;
      }
      else
      {
        v22 = *a4;
        v23 = v21 - *a4;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60)
          sub_20E867F44();
        v25 = v20 - (_QWORD)v22;
        if (v25 >> 3 > v24)
          v24 = v25 >> 3;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 >> 60)
            sub_20E877A38();
          v27 = (char *)operator new(16 * v26);
          v28 = (__n128 *)&v27[16 * v23];
          *v28 = v36;
          v29 = (uint64_t)v28;
          if (v21 != v22)
          {
            do
            {
LABEL_37:
              v30 = v21[-1].n128_u64[0];
              --v21;
              v31 = v21->n128_u32[2];
              *(_QWORD *)(v29 - 16) = v30;
              v29 -= 16;
              *(_DWORD *)(v29 + 8) = v31;
            }
            while (v21 != v22);
            v21 = *a4;
            v32 = (__n128 *)&v27[16 * v26];
            v11 = v28 + 1;
            *a4 = (__n128 *)v29;
            a4[1] = v28 + 1;
            a4[2] = v32;
            if (!v21)
              goto LABEL_5;
LABEL_41:
            operator delete(v21);
            goto LABEL_5;
          }
        }
        else
        {
          v27 = 0;
          v28 = (__n128 *)(16 * v23);
          *(__n128 *)(16 * v23) = v36;
          v29 = 16 * v23;
          if (v21 != v22)
            goto LABEL_37;
        }
        v33 = (__n128 *)&v27[16 * v26];
        v11 = v28 + 1;
        *a4 = (__n128 *)v29;
        a4[1] = v28 + 1;
        a4[2] = v33;
        if (v21)
          goto LABEL_41;
      }
LABEL_5:
      a4[1] = v11;
LABEL_6:
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_20F31E09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F31E0F8(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 2832);
  v4 = *(_QWORD *)(a1 + 2824);
  if (v3 != v4)
  {
    if ((unint64_t)(0x3175B2258D8284CFLL * ((v3 - v4) >> 3)) >> 61)
      sub_20E92CED8();
    v5 = (char *)operator new(0x8BAD912C6C142678 * ((v3 - v4) >> 3));
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[0x8BAD912C6C142678 * ((v3 - v4) >> 3)];
    while (1)
    {
      if ((*(_BYTE *)(v4 + 304) & 4) == 0)
        goto LABEL_6;
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 160);
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v8)
        break;
      *(_QWORD *)v5 = v7;
      v6 = (uint64_t)(v5 + 8);
LABEL_5:
      a2[1] = (char *)v6;
      v5 = (char *)v6;
LABEL_6:
      v4 += 4472;
      if (v4 == v3)
        return;
    }
    v9 = *a2;
    v10 = v5 - *a2;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20E92CED8();
    v13 = v8 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v7;
      v6 = (uint64_t)(v16 + 8);
      v17 = v5 - v9;
      if (v5 == v9)
        goto LABEL_23;
    }
    else
    {
      v15 = 0;
      v16 = (char *)(8 * v11);
      *(_QWORD *)(8 * v11) = v7;
      v6 = 8 * v11 + 8;
      v17 = v5 - v9;
      if (v5 == v9)
        goto LABEL_23;
    }
    v18 = v17 - 8;
    if (v18 >= 0x168)
    {
      v21 = (v5 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
      if (&v15[v10 - 8 - v21] > &v15[v10 - 8])
      {
        v19 = v5;
      }
      else if (&v5[-v21 - 8] > v5 - 8)
      {
        v19 = v5;
      }
      else if ((unint64_t)(v5 - &v15[v10]) >= 0x20)
      {
        v22 = (v18 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v5[-v23];
        v16 -= v23;
        v24 = &v15[8 * v11 - 16];
        v25 = v5 - 16;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_23;
      }
      else
      {
        v19 = v5;
      }
    }
    else
    {
      v19 = v5;
    }
    do
    {
      v20 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *((_QWORD *)v16 - 1) = v20;
      v16 -= 8;
    }
    while (v19 != v9);
LABEL_23:
    *a2 = v16;
    a2[1] = (char *)v6;
    a2[2] = &v15[8 * v14];
    if (v9)
      operator delete(v9);
    goto LABEL_5;
  }
}

void sub_20F31E340(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F31E364(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;

  v1 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v22 = *MEMORY[0x24BDAC8D0];
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v16[0] = 0;
  v21 = 0;
  sub_20F31E5E8((uint64_t)v2, 0x3175B2258D8284CFLL * ((uint64_t)(v1[354] - v1[353]) >> 3));
  v4 = (_QWORD *)v1[353];
  v5 = (_QWORD *)v1[354];
  if (v4 != v5)
  {
    do
    {
      while (1)
      {
        v4[11] = v4[10];
        v7 = v4[2];
        v8 = *(_QWORD *)(v7 + 424);
        v9 = *(uint64_t **)(v8 + 40);
        v10 = *(uint64_t **)(v8 + 48);
        *(_QWORD *)&v11 = -1;
        for (*((_QWORD *)&v11 + 1) = -1; v9 != v10; *(_OWORD *)(v12 + 712) = v11)
        {
          v12 = *v9;
          v9 += 2;
          *(_QWORD *)(v12 + 728) = -1;
          *(_OWORD *)(v12 + 696) = v11;
        }
        if (*(_QWORD *)(v7 + 160) == v1[351])
          break;
        v13 = v3[1];
        if (v13 < v3[2])
          v6 = sub_20F314370(v13, (uint64_t)v4) + 4472;
        else
          v6 = sub_20F33DAAC(v3, (uint64_t)v4);
        v3[1] = v6;
        v4 += 559;
        if (v4 == v5)
          goto LABEL_14;
      }
      if (v21)
      {
        sub_20F3122B4((uint64_t)v16);
        v21 = 0;
      }
      sub_20F314370((uint64_t)v16, (uint64_t)v4);
      v21 = 1;
      v4 += 559;
    }
    while (v4 != v5);
LABEL_14:
    v4 = (_QWORD *)v1[354];
    v14 = (_QWORD *)v1[353];
    if (v4 != v14)
    {
      do
      {
        v4 -= 559;
        sub_20F3122B4((uint64_t)v4);
      }
      while (v4 != v14);
      v4 = v14;
    }
  }
  v1[354] = v4;
  if (v21)
  {
    if (*(_QWORD *)(**(_QWORD **)(v17 + 424) + 64) == (v19 - v18) >> 4)
      v20 &= 0xFFFFFD7F;
    if ((unint64_t)v4 >= v1[355])
    {
      v15 = sub_20F33DAAC(v1 + 353, (uint64_t)v16);
    }
    else
    {
      sub_20F314370((uint64_t)v4, (uint64_t)v16);
      v15 = (uint64_t)(v4 + 559);
    }
    v1[354] = v15;
  }
  sub_20F31D2E0((uint64_t)v1);
  if (v21)
    sub_20F3122B4((uint64_t)v16);
}

void sub_20F31E5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _BYTE *v3;
  va_list va;

  va_start(va, a2);
  if (*v3)
    sub_20F3122B4((uint64_t)va);
  sub_20F300EA8(v2);
  _Unwind_Resume(a1);
}

void sub_20F31E5E8(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void **)a1;
  if (0x3175B2258D8284CFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xEA79D149BB4E5)
      sub_20E867F44();
    v4 = *(_QWORD *)(a1 + 8);
    v5 = 4472 * a2;
    v6 = (char *)operator new(4472 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - (_QWORD)v2];
    if ((void *)v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = (uint64_t)&v6[v4 - (_QWORD)v2];
      do
      {
        v4 -= 4472;
        v9 = sub_20F314370(v9 - 4472, v4);
      }
      while ((void *)v4 != v2);
      v2 = *(void **)a1;
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while ((void *)v10 != v2)
      {
        v10 -= 4472;
        sub_20F3122B4(v10);
      }
      if (v2)
        goto LABEL_9;
    }
  }
}

void sub_20F31E6F4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v88;
  void *v90;
  _QWORD *v91;
  void *__p;
  _QWORD *v93;
  char *v94;

  v6 = a4;
  v7 = a1[353];
  v8 = a1[354];
  if (v7 != v8)
  {
    v86 = a1[354];
    while (1)
    {
      if ((*(_BYTE *)(v7 + 304) & 0x20) == 0)
        goto LABEL_5;
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 160);
      v12 = *(char **)(a3 + 8);
      v11 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v12 >= v11)
        break;
      *(_QWORD *)v12 = v10;
      v9 = (uint64_t)(v12 + 8);
LABEL_4:
      *(_QWORD *)(a3 + 8) = v9;
LABEL_5:
      v7 += 4472;
      if (v7 == v8)
        goto LABEL_28;
    }
    v13 = *(char **)a3;
    v14 = (uint64_t)&v12[-*(_QWORD *)a3];
    v15 = v14 >> 3;
    v16 = (v14 >> 3) + 1;
    if (v16 >> 61)
      sub_20E92CED8();
    v17 = v11 - (_QWORD)v13;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_20E877A38();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v15];
      *v20 = v10;
      v9 = (uint64_t)(v20 + 1);
      v21 = v12 - v13;
      if (v12 == v13)
        goto LABEL_25;
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v15);
      *(_QWORD *)(8 * v15) = v10;
      v9 = 8 * v15 + 8;
      v21 = v12 - v13;
      if (v12 == v13)
      {
LABEL_25:
        *(_QWORD *)a3 = v20;
        *(_QWORD *)(a3 + 8) = v9;
        *(_QWORD *)(a3 + 16) = &v19[8 * v18];
        if (v13)
          operator delete(v13);
        v6 = a4;
        v8 = v86;
        goto LABEL_4;
      }
    }
    v22 = v21 - 8;
    if (v22 < 0x58)
      goto LABEL_165;
    if ((unint64_t)(v12 - v19 - v14) < 0x20)
      goto LABEL_165;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = &v12[-v24];
    v20 = (_QWORD *)((char *)v20 - v24);
    v26 = &v19[8 * v15 - 16];
    v27 = v12 - 16;
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    v12 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_165:
      do
      {
        v30 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v20 = v30;
      }
      while (v12 != v13);
    }
    goto LABEL_25;
  }
LABEL_28:
  v31 = *(char **)a3;
  v32 = *(char **)(a3 + 8);
  if (*(char **)a3 != v32)
  {
    do
    {
      v33 = (_QWORD *)a1[353];
      v34 = (_QWORD *)a1[354];
      if (v33 != v34)
      {
        while (1)
        {
          v35 = v33[2];
          if (v35)
          {
            if (*(_QWORD *)(v35 + 160) == *(_QWORD *)v31)
              break;
          }
          v33 += 559;
          if (v33 == v34)
            goto LABEL_30;
        }
      }
      if (v33 != v34 && v33 != 0)
      {
        v37 = v33[2];
        if (*(_QWORD *)(v37 + 160) == a1[351])
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2959, (uint64_t)"submap_to_delete->map_session() != this->primary_submap_session()", 65, (uint64_t)"Cannot delete primary submap", 28, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v37 = v33[2];
        }
        sub_20FCCAB74(v37, a2);
        sub_20F24E76C((uint64_t)v33, &__p);
        v38 = __p;
        v39 = v93;
        while (v38 != v39)
        {
          v40 = a1[353];
          v41 = a1[354];
          if (v40 != v41)
          {
            while (1)
            {
              v42 = *(_QWORD *)(v40 + 16);
              if (v42)
              {
                if (*(_QWORD *)(v42 + 160) == *v38)
                  break;
              }
              v40 += 4472;
              if (v40 == v41)
                goto LABEL_44;
            }
          }
          if (v40 != v41 && v40 != 0)
            sub_20F26A100(v40, *(_QWORD *)(v33[2] + 160));
LABEL_44:
          ++v38;
        }
        sub_20F3386A0(a1, v33);
        v6 = a4;
        if (__p)
        {
          v93 = __p;
          operator delete(__p);
        }
      }
LABEL_30:
      v31 += 8;
    }
    while (v31 != v32);
  }
  __p = 0;
  v93 = 0;
  v94 = 0;
  sub_20F31EFC8(&v90, a1);
  v44 = a1[353];
  v45 = a1[354];
  if (v44 != v45)
  {
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v88 = a1[354];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v49 = *(_QWORD *)(*(_QWORD *)(v44 + 16) + 160);
          v50 = v90;
          if (v90 != v91)
          {
            while (*v50 != v49)
            {
              if (++v50 == v91)
              {
                v50 = v91;
                break;
              }
            }
          }
          if (v50 == v91)
            break;
          v44 += 4472;
          if (v44 == v45)
            goto LABEL_95;
        }
        if (v48 >= v47)
          break;
        *(_QWORD *)v48 = v49;
        v48 += 8;
        v93 = v48;
        v44 += 4472;
        if (v44 == v45)
          goto LABEL_95;
      }
      v51 = (v48 - v46) >> 3;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 61)
        sub_20E92CED8();
      if ((v47 - v46) >> 2 > v52)
        v52 = (v47 - v46) >> 2;
      v53 = (unint64_t)(v47 - v46) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v52;
      if (v53)
      {
        if (v53 >> 61)
          sub_20E877A38();
        v54 = operator new(8 * v53);
        v55 = &v54[8 * v51];
        *v55 = v49;
        v56 = (uint64_t)(v55 + 1);
        v57 = v48 - v46;
        if (v48 == v46)
        {
LABEL_86:
          v6 = a4;
          v47 = &v54[8 * v53];
          __p = v55;
          v93 = (_QWORD *)v56;
          v94 = v47;
          if (!v46)
            goto LABEL_83;
LABEL_82:
          operator delete(v46);
          goto LABEL_83;
        }
      }
      else
      {
        v54 = 0;
        v55 = (_QWORD *)(8 * v51);
        *(_QWORD *)(8 * v51) = v49;
        v56 = 8 * v51 + 8;
        v57 = v48 - v46;
        if (v48 == v46)
          goto LABEL_86;
      }
      v58 = v57 - 8;
      if (v58 < 0x168)
        break;
      v61 = (v48 - 8 - v46) & 0xFFFFFFFFFFFFFFF8;
      if (&v54[v48 - v46 - 8 - v61] > &v54[v48 - v46 - 8]
        || &v48[-v61 - 8] > v48 - 8
        || (unint64_t)(v46 - v54) < 0x20)
      {
        break;
      }
      v62 = (v58 >> 3) + 1;
      v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
      v59 = &v48[-v63];
      v55 = (_QWORD *)((char *)v55 - v63);
      v64 = &v54[8 * v51 - 16];
      v65 = (__int128 *)(v48 - 16);
      v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *v65;
        *(v64 - 1) = *(v65 - 1);
        *v64 = v67;
        v64 -= 2;
        v65 -= 2;
        v66 -= 4;
      }
      while (v66);
      v6 = a4;
      if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_80;
LABEL_81:
      v47 = &v54[8 * v53];
      __p = v55;
      v93 = (_QWORD *)v56;
      v94 = v47;
      if (v46)
        goto LABEL_82;
LABEL_83:
      v46 = (char *)v55;
      v45 = v88;
      v93 = (_QWORD *)v56;
      v48 = (char *)v56;
      v44 += 4472;
      if (v44 == v88)
      {
LABEL_95:
        v68 = (char *)__p;
        goto LABEL_97;
      }
    }
    v59 = v48;
    v6 = a4;
    do
    {
LABEL_80:
      v60 = *((_QWORD *)v59 - 1);
      v59 -= 8;
      *--v55 = v60;
    }
    while (v59 != v46);
    goto LABEL_81;
  }
  v68 = 0;
  v48 = 0;
LABEL_97:
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  sub_20F31E5E8((uint64_t)v6, (v48 - v68) >> 3);
  for (; v68 != v48; v68 += 8)
  {
    v70 = a1[353];
    v71 = a1[354];
    if (v70 != v71)
    {
      while (1)
      {
        v72 = *(_QWORD *)(v70 + 16);
        if (v72)
        {
          if (*(_QWORD *)(v72 + 160) == *(_QWORD *)v68)
            break;
        }
        v70 += 4472;
        if (v70 == v71)
          goto LABEL_111;
      }
    }
    if (v70 == v71 || v70 == 0)
    {
LABEL_111:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 3028, (uint64_t)"disconnected_submap_ptr", 23, (uint64_t)"Attempting to move non-existent submap.", 39, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v70 = 0;
    }
    v74 = v6[1];
    if (v74 < v6[2])
      v69 = sub_20F314370(v74, v70) + 4472;
    else
      v69 = sub_20F33DAAC(v6, v70);
    v6[1] = v69;
  }
  v75 = a1[353];
  v76 = a1[354];
  if (v75 != v76)
  {
    while (*(_QWORD *)(v75 + 16))
    {
      v75 += 4472;
      if (v75 == v76)
        goto LABEL_129;
    }
    if (v75 != v76)
    {
      v77 = v75 + 4472;
      if (v75 + 4472 != v76)
      {
        do
        {
          if (*(_QWORD *)(v77 + 16))
          {
            sub_20F34185C(v75, v77);
            v75 += 4472;
          }
          v77 += 4472;
        }
        while (v77 != v76);
        v76 = a1[354];
      }
    }
    if (v75 != v76)
    {
      do
      {
        v76 -= 4472;
        sub_20F3122B4(v76);
      }
      while (v76 != v75);
      a1[354] = v75;
    }
  }
LABEL_129:
  v78 = (char *)a1[356];
  v79 = (char *)a1[357];
  if (v78 != v79)
  {
    v80 = __p;
    v81 = v93;
    if (__p == v93)
    {
      v78 += (v79 - v78) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      while (1)
      {
        v82 = __p;
        while (*v82 != *(_QWORD *)v78)
        {
          if (++v82 == v93)
          {
            v82 = v93;
            break;
          }
        }
        if (v82 != v93)
          break;
        v78 += 8;
        if (v78 == v79)
          goto LABEL_145;
      }
    }
    if (v78 != v79)
    {
      v83 = v78 + 8;
      if (v78 + 8 != v79)
      {
        if (__p == v93)
        {
          memmove(v78, v83, ((v79 - v78 - 16) & 0xFFFFFFFFFFFFFFF8) + 8);
          v78 += ((v79 - v78 - 16) & 0xFFFFFFFFFFFFFFF8) + 8;
        }
        else
        {
          do
          {
            v84 = *(_QWORD *)v83;
            v85 = v80;
            while (*v85 != v84)
            {
              if (++v85 == v81)
              {
                v85 = v81;
                break;
              }
            }
            if (v85 == v81)
            {
              *(_QWORD *)v78 = v84;
              v78 += 8;
            }
            v83 += 8;
          }
          while (v83 != v79);
        }
      }
      if (v78 != v79)
        a1[357] = v78;
    }
  }
LABEL_145:
  sub_20F31D2E0((uint64_t)a1);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (__p)
    operator delete(__p);
}

void sub_20F31EF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F31EFC8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v59 = 0u;
  v60 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = a2[357];
  v5 = a2[356];
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v9 = a2[351];
    v11 = operator new(8uLL);
    *v11 = v9;
    v10 = v11 + 1;
    a1[1] = v11 + 1;
    v8 = a1 + 1;
    *a1 = v11;
    a1[2] = v11 + 1;
  }
  else
  {
    if (v6 < 0)
      sub_20E92CED8();
    v7 = operator new(v4 - v5);
    a1[1] = v7;
    v8 = a1 + 1;
    *a1 = v7;
    a1[2] = &v7[v6 >> 3];
    v9 = a2[351];
    *v7 = v9;
    v10 = v7 + 1;
  }
  *v8 = (uint64_t)v10;
  sub_20F34605C((uint64_t)__p);
  v13 = *((_QWORD *)&v60 + 1);
  v12 = v60;
  v14 = (void **)__p[1];
  v15 = (void **)v59;
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v60 + 1) + (_QWORD)v60) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v60 + 1) + v60) & 0x1FF)) = v9;
  v16 = __CFADD__(v13, 1);
  v17 = v13 + 1;
  *((_QWORD *)&v60 + 1) = v17;
  if (!v16)
  {
    v55 = v8;
    while (1)
    {
      v18 = a2[353];
      v19 = a2[354];
      if (v18 != v19)
      {
        while (1)
        {
          v20 = *(_QWORD *)(v18 + 16);
          if (v20)
          {
            if (*(_QWORD *)(v20 + 160) == (*(_QWORD **)((char *)v14 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF])
              break;
          }
          v18 += 4472;
          if (v18 == v19)
            goto LABEL_21;
        }
      }
      v21 = v18 == v19 || v18 == 0;
      if (!v21)
        break;
LABEL_21:
      --v17;
      *(_QWORD *)&v60 = ++v12;
      *((_QWORD *)&v60 + 1) = v17;
      if (v12 >= 0x400)
      {
        operator delete(*v14);
        v14 = (void **)((char *)__p[1] + 8);
        v12 = v60 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v60 = v60 - 512;
        v17 = *((_QWORD *)&v60 + 1);
      }
      if (!v17)
      {
        v15 = (void **)v59;
        goto LABEL_66;
      }
    }
    sub_20F24E76C(v18, &v56);
    v22 = v56;
    v23 = v57;
    if (v56 == v57)
    {
      if (!v56)
        goto LABEL_20;
      goto LABEL_19;
    }
    while (1)
    {
      v24 = (_QWORD *)a2[356];
      v25 = (_QWORD *)a2[357];
      if (v24 != v25)
      {
        while (*v24 != *v22)
        {
          if (++v24 == v25)
          {
            v24 = (_QWORD *)a2[357];
            break;
          }
        }
      }
      if (v24 == v25)
        goto LABEL_24;
      v26 = (char *)*a1;
      v27 = (char *)a1[1];
      if ((char *)*a1 != v27)
      {
        v28 = (char *)*a1;
        while (*(_QWORD *)v28 != *v22)
        {
          v28 += 8;
          if (v28 == v27)
          {
            v28 = (char *)a1[1];
            break;
          }
        }
        if (v28 != v27)
          goto LABEL_24;
      }
      v29 = a1[2];
      if ((unint64_t)v27 >= v29)
        break;
      *(_QWORD *)v27 = *v22;
      v30 = (uint64_t)(v27 + 8);
LABEL_58:
      v46 = (char *)__p[1];
      v47 = (((_QWORD)v59 - (unint64_t)__p[1]) << 6) - 1;
      v21 = (void *)v59 == __p[1];
      *v8 = v30;
      if (v21)
        v48 = 0;
      else
        v48 = v47;
      v49 = *((_QWORD *)&v60 + 1);
      v50 = *((_QWORD *)&v60 + 1) + v60;
      if (v48 == *((_QWORD *)&v60 + 1) + (_QWORD)v60)
      {
        sub_20F34605C((uint64_t)__p);
        v49 = *((_QWORD *)&v60 + 1);
        v46 = (char *)__p[1];
        v50 = v60 + *((_QWORD *)&v60 + 1);
        v8 = v55;
      }
      *(_QWORD *)(*(_QWORD *)&v46[(v50 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v50 & 0x1FF)) = *v22;
      *((_QWORD *)&v60 + 1) = v49 + 1;
LABEL_24:
      if (++v22 == v23)
      {
        v22 = v56;
        if (!v56)
        {
LABEL_20:
          v14 = (void **)__p[1];
          v17 = *((_QWORD *)&v60 + 1);
          v12 = v60;
          goto LABEL_21;
        }
LABEL_19:
        v57 = v22;
        operator delete(v22);
        goto LABEL_20;
      }
    }
    v31 = v27 - v26;
    v32 = (v27 - v26) >> 3;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      sub_20E92CED8();
    v34 = v29 - (_QWORD)v26;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 61)
        sub_20E877A38();
      v36 = operator new(8 * v35);
      v37 = &v36[8 * v32];
      *v37 = *v22;
      v30 = (uint64_t)(v37 + 1);
      if (v26 == v27)
        goto LABEL_55;
    }
    else
    {
      v36 = 0;
      v37 = (_QWORD *)(8 * v32);
      *(_QWORD *)(8 * v32) = *v22;
      v30 = 8 * v32 + 8;
      if (v26 == v27)
      {
LABEL_55:
        *a1 = v37;
        a1[1] = v30;
        a1[2] = &v36[8 * v35];
        if (v26)
          operator delete(v26);
        v8 = v55;
        goto LABEL_58;
      }
    }
    if ((unint64_t)(v31 - 8) < 0x58)
      goto LABEL_85;
    if ((unint64_t)(v26 - v36) < 0x20)
      goto LABEL_85;
    v38 = ((unint64_t)(v31 - 8) >> 3) + 1;
    v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = &v27[-v39];
    v37 = (_QWORD *)((char *)v37 - v39);
    v41 = &v36[8 * v32 - 16];
    v42 = v27 - 16;
    v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      *v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    v27 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_85:
      do
      {
        v45 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *--v37 = v45;
      }
      while (v27 != v26);
    }
    goto LABEL_55;
  }
LABEL_66:
  *((_QWORD *)&v60 + 1) = 0;
  v51 = (char *)v15 - (char *)v14;
  if ((unint64_t)((char *)v15 - (char *)v14) >= 0x11)
  {
    do
    {
      operator delete(*v14);
      v15 = (void **)v59;
      v14 = (void **)((char *)__p[1] + 8);
      __p[1] = v14;
      v51 = v59 - (_QWORD)v14;
    }
    while ((_QWORD)v59 - (_QWORD)v14 > 0x10uLL);
  }
  v52 = v51 >> 3;
  if (v52 == 1)
  {
    v53 = 256;
    goto LABEL_72;
  }
  if (v52 == 2)
  {
    v53 = 512;
LABEL_72:
    *(_QWORD *)&v60 = v53;
  }
  if (v14 != v15)
  {
    do
    {
      v54 = *v14++;
      operator delete(v54);
    }
    while (v14 != v15);
    if ((void *)v59 != __p[1])
      *(_QWORD *)&v59 = v59 + (((unint64_t)__p[1] - v59 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_20F31F488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  sub_20E8D41E8((uint64_t)&a13);
  v15 = *(void **)v13;
  if (!*(_QWORD *)v13)
    _Unwind_Resume(a1);
  *(_QWORD *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(a1);
}

unint64_t sub_20F31F4FC(uint64_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v9;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  float64x2_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  float64x2_t v65;
  unint64_t v66;
  double v67;
  double v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t *v78;
  unsigned __int8 v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  size_t v85;
  __darwin_time_t tv_sec;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  float64x2_t v99;
  unsigned int v100;
  _QWORD *v101;
  _QWORD *v102;
  unsigned int v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v114;
  unint64_t v115;
  unint64_t v116;
  __int128 *v117;
  __int128 *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  double v124;
  unint64_t v125;
  __int128 *v126;
  unint64_t v127;
  unint64_t v128;
  __int128 *v129;
  __int128 *v130;
  unint64_t v131;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t tv_nsec;
  __darwin_time_t v141;
  _OWORD *v142;
  double v143;
  float64x2_t v144;
  double v145;
  __int128 v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  double v152;
  float64x2_t v153;
  double v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  double v165;
  _QWORD *v166;
  uint64_t *v167;
  unint64_t v171;
  unint64_t v172;
  const void **v173;
  size_t v174;
  int v175;
  size_t v177;
  int v178;
  uint64_t v181;
  unsigned int v182;
  void *v183;
  __int128 *v184;
  uint64_t v185;
  void *v186;
  __int128 v187;
  timespec v188;
  char v189;
  _BYTE __s2[32];
  void *v191;
  char v192;
  char v193;
  void *v194;
  char v195;
  char v196;
  void *v197;
  char v198;
  void *__p;
  char v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 2816);
  v12 = *(_OWORD **)(v11 + 32);
  v13 = *(_OWORD **)(v11 + 40);
  if (v12 != v13 && *(_QWORD *)(*(_QWORD *)v11 + 48) <= (unint64_t)(v13 - v12))
  {
    *(_OWORD *)__s2 = *v12;
    sub_20F250888((_QWORD *)v11, (void **)__s2, 0);
    v11 = *(_QWORD *)(a1 + 2816);
  }
  v14 = *(_OWORD **)(v11 + 56);
  v15 = *(_QWORD *)(v11 + 64) - (_QWORD)v14;
  if (v15)
  {
    v9 = v15 >> 4;
    if ((unint64_t)(v15 >> 4) >= *(_QWORD *)(*(_QWORD *)v11 + 56))
    {
      *(_OWORD *)__s2 = *v14;
      sub_20F250888((_QWORD *)v11, (void **)__s2, 0);
      v17 = *(_QWORD *)(v11 + 56);
      v16 = *(_QWORD *)(v11 + 64);
      if (v9 == (v16 - v17) >> 4)
      {
        v9 = v16 - (v17 + 16);
        if (v16 != v17 + 16)
          memmove(*(void **)(v11 + 56), (const void *)(v17 + 16), v9 - 4);
        *(_QWORD *)(v11 + 64) = v17 + v9;
      }
    }
  }
  v18 = *(unsigned __int8 *)(a1 + 2329);
  if (!*(_BYTE *)(a1 + 2329))
    goto LABEL_25;
  v19 = *(_QWORD **)(a1 + 2848);
  v20 = *(_QWORD **)(a1 + 2856);
  if (v19 == v20)
    goto LABEL_25;
  v21 = 0;
  v22 = *(_QWORD **)(a1 + 2832);
  do
  {
    v23 = *(_QWORD **)(a1 + 2824);
    if (v23 != v22)
    {
      v23 = *(_QWORD **)(a1 + 2824);
      while (1)
      {
        v24 = v23[2];
        if (v24)
        {
          if (*(_QWORD *)(v24 + 160) == *v19)
            break;
        }
        v23 += 559;
        if (v23 == v22)
          goto LABEL_13;
      }
    }
    if (v23 != v22 && v23)
      v21 = *(_QWORD *)(**(_QWORD **)(v23[2] + 424) + 64) + v21 - ((uint64_t)(v23[5] - v23[4]) >> 4);
LABEL_13:
    ++v19;
  }
  while (v19 != v20);
  if (v21 <= *(unsigned int *)(a1 + 2272))
  {
LABEL_25:
    v27 = 0;
    LOBYTE(v25) = 0;
  }
  else
  {
    v25 = sub_20F32061C(a1, 1, *(double *)(a1 + 2312), a3, a4, a5);
    v9 = v25 >> 8;
    v27 = v26 != 0;
    if (v26)
    {
      v182 = 0;
      goto LABEL_67;
    }
  }
  v28 = *(char **)(a1 + 2824);
  v29 = *(char **)(a1 + 2832);
  if (v28 == v29)
    return v25 | (unint64_t)(v9 << 8);
  v30 = v29 - v28 - 4472;
  if (v30 >> 3 < 0x22F)
  {
    v31 = 0;
    v32 = *(char **)(a1 + 2824);
    do
    {
LABEL_32:
      v31 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v32 + 2) + 424) + 64)
           - ((uint64_t)(*((_QWORD *)v32 + 5) - *((_QWORD *)v32 + 4)) >> 4);
      v32 += 4472;
    }
    while (v32 != v29);
    goto LABEL_33;
  }
  v33 = 0;
  v34 = 0;
  v35 = v30 / 0x1178 + 1;
  v32 = &v28[4472 * (v35 & 0x1FFFFFFFFFFFFELL)];
  v36 = v35 & 0x1FFFFFFFFFFFFELL;
  do
  {
    v33 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v28 + 2) + 424) + 64)
         - ((uint64_t)(*((_QWORD *)v28 + 5) - *((_QWORD *)v28 + 4)) >> 4);
    v34 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v28 + 561) + 424) + 64)
         - ((uint64_t)(*((_QWORD *)v28 + 564) - *((_QWORD *)v28 + 563)) >> 4);
    v28 += 8944;
    v36 -= 2;
  }
  while (v36);
  v31 = v34 + v33;
  if (v35 != (v35 & 0x1FFFFFFFFFFFFELL))
    goto LABEL_32;
LABEL_33:
  if (v31 <= *(_QWORD *)(a1 + 40))
    return v25 | (unint64_t)(v9 << 8);
  if (v18)
  {
    v37 = sub_20F32061C(a1, 0, *(double *)(a1 + 2304), a3, a4, a5);
    v27 = v38 != 0;
    if (v38)
    {
      v182 = 0;
      v9 = v37 >> 8;
      LOBYTE(v25) = v37;
      goto LABEL_67;
    }
  }
  v39 = **(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(a1 + 2816) + 16) + 424);
  v40 = v39[8];
  if (!v40)
  {
    v9 = 0;
    LOBYTE(v25) = 0;
    return v25 | (unint64_t)(v9 << 8);
  }
  v41 = (_QWORD *)v39[6];
  v42 = v39 + 7;
  v43.f64[0] = 0.0;
  v44 = 0;
  a5.f64[0] = 0.0;
  if (v41 != v42)
  {
    do
    {
      v54 = (_QWORD *)v41[1];
      v55 = v41;
      if (v54)
      {
        do
        {
          v56 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v55[2];
          _ZF = *v56 == (_QWORD)v55;
          v55 = v56;
        }
        while (!_ZF);
      }
      v53 = v41[6];
      a2.f64[0] = *(float64_t *)(v53 + 88);
      a6 = *(float64x2_t *)(v53 + 72);
      a5 = vaddq_f64(a5, a2);
      *(_QWORD *)&v43.f64[1] = v44;
      v43 = vaddq_f64(v43, a6);
      v44 = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
      v41 = v56;
    }
    while (v56 != v42);
  }
  v45 = *(_QWORD *)(a1 + 2824);
  v46 = *(_QWORD *)(a1 + 2832);
  if (v45 == v46)
  {
    LOBYTE(v25) = 0;
    return v25 | (unint64_t)(v9 << 8);
  }
  LOBYTE(v25) = 0;
  v47 = 0;
  a6.f64[0] = 1.0 / (double)v40;
  v48 = vmulq_f64(a6, a5);
  *(_QWORD *)&v43.f64[1] = v44;
  v49 = vmulq_n_f64(v43, a6.f64[0]);
  v50 = 0.0;
  *(_QWORD *)&v49.f64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  v51 = vnegq_f64(v49);
  v52 = vnegq_f64(v48);
  do
  {
    v57 = *(_QWORD *)(v45 + 16);
    v58 = *(_QWORD *)(v57 + 160);
    if (v58 != *(_QWORD *)(a1 + 2808))
    {
      v59 = *(_QWORD **)(a1 + 2848);
      v60 = *(_QWORD **)(a1 + 2856);
      if (v59 != v60)
      {
        while (*v59 != v58)
        {
          if (++v59 == v60)
          {
            v59 = *(_QWORD **)(a1 + 2856);
            break;
          }
        }
      }
      if (v59 == v60)
      {
        v61 = **(_QWORD ***)(v57 + 424);
        v62 = v61[8];
        if (v62)
        {
          v63 = (_QWORD *)v61[6];
          v64 = v61 + 7;
          v65.f64[0] = 0.0;
          v66 = 0;
          v48.f64[0] = 0.0;
          if (v63 != v64)
          {
            do
            {
              v75 = (_QWORD *)v63[1];
              v76 = v63;
              if (v75)
              {
                do
                {
                  v77 = v75;
                  v75 = (_QWORD *)*v75;
                }
                while (v75);
              }
              else
              {
                do
                {
                  v77 = (_QWORD *)v76[2];
                  _ZF = *v77 == (_QWORD)v76;
                  v76 = v77;
                }
                while (!_ZF);
              }
              v74 = v63[6];
              a9.f64[0] = *(float64_t *)(v74 + 88);
              v48 = vaddq_f64(v48, a9);
              *(_QWORD *)&v65.f64[1] = v66;
              v65 = vaddq_f64(v65, *(float64x2_t *)(v74 + 72));
              v66 = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
              v63 = v77;
            }
            while (v77 != v64);
          }
          a9.f64[0] = 1.0 / (double)v62;
          *(_QWORD *)&v65.f64[1] = v66;
          *(_QWORD *)&v67 = *(_OWORD *)&vmlaq_f64(v52, a9, v48);
          _D5 = vmlaq_n_f64(v51, v65, *(double *)&a9).f64[1];
          __asm { FMLA            D4, D5, V6.D[1] }
          v73 = vmlad_n_f64(_D4, v67, v67);
          if (v73 > v50)
          {
            v9 = v58 >> 8;
            v47 = 1;
            LOBYTE(v25) = v58;
            v50 = v73;
          }
        }
      }
    }
    v45 += 4472;
  }
  while (v45 != v46);
  v182 = v47 != 0;
  if (v47)
  {
LABEL_67:
    v78 = sub_210219C18();
    v79 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v80 = atomic_load(&qword_254A5A450);
    v81 = "t3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE";
    if (!v80)
      goto LABEL_88;
    v82 = v9;
    *(_DWORD *)__s2 = 134218496;
    __s2[4] = v25;
    __s2[5] = v9;
    __s2[6] = BYTE1(v9);
    __s2[7] = BYTE2(v9);
    __s2[8] = BYTE3(v9);
    __s2[9] = BYTE4(v9);
    __s2[10] = BYTE5(v9);
    __s2[11] = BYTE6(v9);
    *(_WORD *)&__s2[12] = 1024;
    v83 = v27;
    *(_DWORD *)&__s2[14] = v27;
    *(_WORD *)&__s2[18] = 1024;
    *(_DWORD *)&__s2[20] = v182;
    v84 = (char *)_os_log_send_and_compose_impl();
    v85 = strlen(v84);
    v188.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v188);
    tv_sec = v188.tv_sec;
    timespec_get(&v188, 1);
    sub_210219E20(__s2, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v78 + 1), (__int128 *)(v78 + 5), "PRUNING: SMID:%llu OL:%d D:%d", 0x1DuLL, v84, v85, tv_sec, &v188);
    std::mutex::lock(&stru_254A5A410);
    v87 = qword_254A5A458;
    for (i = unk_254A5A460; v87 != i; v87 += 40)
    {
      v89 = *(_QWORD *)(v87 + 32);
      if (!v89)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v89 + 48))(v89, __s2);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v200 < 0)
    {
      operator delete(__p);
      v9 = v82;
      v27 = v83;
      if ((v198 & 0x80000000) == 0)
      {
LABEL_74:
        v81 = "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE" + 2;
        if (!v196)
        {
LABEL_81:
          if (v193 && v192 < 0)
            operator delete(v191);
          if ((__s2[31] & 0x80000000) != 0)
            operator delete(*(void **)&__s2[8]);
          if (v84)
            free(v84);
LABEL_88:
          if (os_signpost_enabled((os_log_t)*v78))
          {
            v90 = v25 | (unint64_t)(v9 << 8);
            *(_DWORD *)__s2 = *((_QWORD *)v81 + 198);
            *(_QWORD *)&__s2[4] = v90;
            *(_WORD *)&__s2[12] = 1024;
            *(_DWORD *)&__s2[14] = v27;
            *(_WORD *)&__s2[18] = 1024;
            *(_DWORD *)&__s2[20] = v182;
            _os_signpost_emit_unreliably_with_name_impl();
            if (*(_QWORD *)(a1 + 2808) == v90)
              goto LABEL_202;
          }
          else
          {
            v90 = v25 | (unint64_t)(v9 << 8);
            if (*(_QWORD *)(a1 + 2808) == v90)
              goto LABEL_202;
          }
          v91 = *(_QWORD *)(a1 + 2824);
          v92 = *(_QWORD *)(a1 + 2832);
          if (v91 != v92)
          {
            while (1)
            {
              v93 = *(_QWORD *)(v91 + 16);
              if (v93)
              {
                if (*(_QWORD *)(v93 + 160) == v90)
                  break;
              }
              v91 += 4472;
              if (v91 == v92)
                goto LABEL_202;
            }
          }
          if (v91 != v92 && v91)
          {
            v94 = *(_QWORD *)(v91 + 16);
            v95 = **(_QWORD **)(v94 + 424);
            *(_QWORD *)__s2 = *(_QWORD *)(v94 + 160);
            v96 = sub_20F28293C(*(_QWORD **)(v95 + 48), (_QWORD *)(v95 + 56), (unint64_t *)__s2);
            if (v96 == v97)
            {
              v100 = 0;
            }
            else
            {
              v100 = 0;
              do
              {
                v101 = (_QWORD *)v96[1];
                if (v101)
                {
                  do
                  {
                    v102 = v101;
                    v101 = (_QWORD *)*v101;
                  }
                  while (v101);
                }
                else
                {
                  do
                  {
                    v102 = (_QWORD *)v96[2];
                    _ZF = *v102 == (_QWORD)v96;
                    v96 = v102;
                  }
                  while (!_ZF);
                }
                ++v100;
                v96 = v102;
              }
              while (v102 != v97);
            }
            v103 = v27;
            v104 = v9;
            v105 = v25;
            v184 = 0;
            v185 = 0;
            v183 = 0;
            v106 = *(_QWORD *)(v91 + 16);
            v107 = *(_QWORD *)(v106 + 208);
            v108 = *(_QWORD *)(v106 + 216);
            if (v107 != v108)
            {
              while (1)
              {
                v109 = *(_QWORD *)(v107 + 24);
                v110 = *(_QWORD *)(a1 + 2824);
                v111 = *(_QWORD *)(a1 + 2832);
                if (v110 != v111)
                {
                  while (1)
                  {
                    v112 = *(_QWORD *)(v110 + 16);
                    if (v112)
                    {
                      if (*(_QWORD *)(v112 + 160) == v109)
                        break;
                    }
                    v110 += 4472;
                    if (v110 == v111)
                      goto LABEL_114;
                  }
                }
                _ZF = v110 == v111 || v110 == 0;
                if (_ZF)
                  goto LABEL_114;
                *(_QWORD *)__s2 = *(_QWORD *)(v107 + 24);
                *(_QWORD *)&__s2[8] = v110;
                v114 = (__int128 *)v183;
                if (v184 == v183)
                {
                  v114 = v184;
                }
                else
                {
                  v115 = ((char *)v184 - (_BYTE *)v183) >> 4;
                  do
                  {
                    v116 = v115 >> 1;
                    v117 = &v114[v115 >> 1];
                    v119 = *(_QWORD *)v117;
                    v118 = v117 + 1;
                    v115 += ~(v115 >> 1);
                    if (v119 < v109)
                      v114 = v118;
                    else
                      v115 = v116;
                  }
                  while (v115);
                  if (v184 != v114 && *(_QWORD *)v114 == v109)
                    goto LABEL_114;
                }
                sub_20F319628((char **)&v183, v114, (uint64_t *)__s2);
LABEL_114:
                v107 += 472;
                if (v107 == v108)
                {
                  v106 = *(_QWORD *)(v91 + 16);
                  break;
                }
              }
            }
            v120 = *(_QWORD *)(v106 + 208);
            v121 = *(_QWORD *)(v106 + 216);
            LOBYTE(v25) = v105;
            v9 = v104;
            v27 = v103;
            if (v120 == v121)
              goto LABEL_200;
            v122 = 0;
            v123 = 0;
            v124 = -1.0;
            while (1)
            {
              v125 = *(_QWORD *)(v120 + 24);
              v126 = (__int128 *)v183;
              if (v184 != v183)
              {
                v126 = (__int128 *)v183;
                v127 = ((char *)v184 - (_BYTE *)v183) >> 4;
                do
                {
                  v128 = v127 >> 1;
                  v129 = &v126[v127 >> 1];
                  v131 = *(_QWORD *)v129;
                  v130 = v129 + 1;
                  v127 += ~(v127 >> 1);
                  if (v131 < v125)
                    v126 = v130;
                  else
                    v127 = v128;
                }
                while (v127);
              }
              if (v184 == v126 || *(_QWORD *)v126 != v125)
                goto LABEL_139;
              _Q3 = *(float64x2_t *)(v120 + 344);
              _Q1.f64[0] = *(float64_t *)(v120 + 408);
              _Q4 = *(float64x2_t *)(v120 + 392);
              v99.f64[0] = *(float64_t *)(v120 + 456);
              v134 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q1, 8uLL);
              _Q1.f64[1] = *(float64_t *)(v120 + 392);
              v135 = *(float64x2_t *)(v120 + 440);
              v136 = (float64x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v99, 8uLL);
              v99.f64[1] = *(float64_t *)(v120 + 440);
              v99 = vmlsq_f64(vmulq_f64(v134, v99), _Q1, v136);
              *(_QWORD *)&v134.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(_Q4, v135, 1), v135, _Q4, 1);
              _Q1 = vmulq_f64(_Q3, v99);
              _Q4.f64[0] = v99.f64[1];
              __asm { FMLA            D1, D4, V3.D[1] }
              _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *(double *)(v120 + 360), v134.f64[0]);
              if (v122 && _Q1.f64[0] <= v124)
              {
                v122 = 1;
LABEL_139:
                v120 += 472;
                if (v120 == v121)
                  goto LABEL_151;
              }
              else
              {
                v123 = (_QWORD *)*((_QWORD *)v126 + 1);
                v122 = 1;
                v120 += 472;
                v124 = _Q1.f64[0];
                if (v120 == v121)
                {
LABEL_151:
                  if (v122)
                  {
                    if (*(_QWORD *)(a1 + 2808) != v90)
                    {
                      v137 = *(_QWORD **)(a1 + 2824);
                      v138 = *(_QWORD **)(a1 + 2832);
                      if (v137 != v138)
                      {
                        while (1)
                        {
                          v139 = v137[2];
                          if (v139)
                          {
                            if (*(_QWORD *)(v139 + 160) == v90)
                              break;
                          }
                          v137 += 559;
                          if (v137 == v138)
                            goto LABEL_197;
                        }
                      }
                      if (v137 != v138 && v137)
                      {
                        sub_20FCC8FF4((_QWORD *)v137[2]);
                        sub_20F26502C((uint64_t)v137, &v188.tv_sec);
                        v141 = v188.tv_sec;
                        tv_nsec = v188.tv_nsec;
                        if (v188.tv_sec != v188.tv_nsec)
                        {
                          if (v182)
                          {
                            while (1)
                            {
                              if (*(_BYTE *)(v141 + 24) == 1)
                              {
                                if (*(_DWORD *)(v141 + 16))
                                  goto LABEL_251;
                                sub_2102323F4((unsigned __int8 *)v141, __s2);
                                v142 = operator new(0x28uLL);
                                v186 = v142;
                                v187 = xmmword_2102E0950;
                                v145 = *(double *)__s2;
                                v146 = *(_OWORD *)&__s2[16];
                                *v142 = *(_OWORD *)__s2;
                                v142[1] = v146;
                                *((_DWORD *)v142 + 8) = (_DWORD)v191;
                                *((_BYTE *)v142 + 36) = 0;
                                if (!*(_BYTE *)(v141 + 336))
                                {
                                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2919, (uint64_t)"updated_anchor.opt_metadata()", 29, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
                                  {
                                    goto LABEL_252;
                                  }
                                  if (!*(_BYTE *)(v141 + 336))
                                    goto LABEL_253;
                                }
                                v147 = sub_20F264904(v123, (uint64_t)&v186, (float64x2_t *)(v141 + 184), (__int128 *)(v141 + 320), v145, *(double *)&v146, v143, v144);
                                if ((v147 & 0x100) != 0)
                                {
                                  if ((v147 & 1) != 0 && *(_BYTE *)(a1 + 2330))
                                    sub_20F264C2C(v123, (uint64_t)&v186);
                                }
                                else
                                {
                                  sub_20FCC8A8C(*(_QWORD **)(v123[24] + 8), (uint64_t)&v186);
                                  v148 = v123[42];
                                  if (v148)
                                  {
                                    v149 = v123[2];
                                    v150 = *(_QWORD *)(v149 + 424);
                                    if (v150)
                                    {
                                      if (*(_QWORD *)(*(_QWORD *)v150 + 64))
                                      {
                                        *(_QWORD *)__s2 = *(_QWORD *)(v149 + 160);
                                        v189 = 0;
                                        (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v148 + 48))(v148, __s2, &v189);
                                      }
                                    }
                                  }
                                }
                                if (SHIBYTE(v187) < 0)
                                  operator delete(v186);
                              }
                              v141 += 344;
                              if (v141 == tv_nsec)
                                goto LABEL_193;
                            }
                          }
                          do
                          {
                            if (*(_BYTE *)(v141 + 24) == 1)
                            {
                              if (*(_DWORD *)(v141 + 16))
LABEL_251:
                                sub_20E877AB8();
                              sub_2102323F4((unsigned __int8 *)v141, __s2);
                              v151 = operator new(0x28uLL);
                              v186 = v151;
                              v187 = xmmword_2102E0950;
                              v154 = *(double *)__s2;
                              v155 = *(_OWORD *)&__s2[16];
                              *v151 = *(_OWORD *)__s2;
                              v151[1] = v155;
                              *((_DWORD *)v151 + 8) = (_DWORD)v191;
                              *((_BYTE *)v151 + 36) = 0;
                              if (!*(_BYTE *)(v141 + 336))
                              {
                                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2919, (uint64_t)"updated_anchor.opt_metadata()", 29, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
                                {
LABEL_252:
                                  abort();
                                }
                                if (!*(_BYTE *)(v141 + 336))
LABEL_253:
                                  sub_20E866B34();
                              }
                              if ((sub_20F264904(v123, (uint64_t)&v186, (float64x2_t *)(v141 + 184), (__int128 *)(v141 + 320), v154, *(double *)&v155, v152, v153) & 0x100) == 0)
                              {
                                sub_20FCC8A8C(*(_QWORD **)(v123[24] + 8), (uint64_t)&v186);
                                v156 = v123[42];
                                if (v156)
                                {
                                  v157 = v123[2];
                                  v158 = *(_QWORD *)(v157 + 424);
                                  if (v158)
                                  {
                                    if (*(_QWORD *)(*(_QWORD *)v158 + 64))
                                    {
                                      *(_QWORD *)__s2 = *(_QWORD *)(v157 + 160);
                                      v189 = 0;
                                      (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v156 + 48))(v156, __s2, &v189);
                                    }
                                  }
                                }
                              }
                              if (SHIBYTE(v187) < 0)
                                operator delete(v186);
                            }
                            v141 += 344;
                          }
                          while (v141 != tv_nsec);
LABEL_193:
                          v141 = v188.tv_sec;
                        }
                        if (v141)
                        {
                          v188.tv_nsec = v141;
                          operator delete((void *)v141);
                        }
                        sub_20F29EA48((uint64_t)v137);
                        sub_20F3386A0((_QWORD *)a1, v137);
                      }
                    }
LABEL_197:
                    if (*(_BYTE *)(a1 + 3016))
                    {
                      v159 = *(_QWORD *)(a1 + 3008);
                      if (*(_BYTE *)(v159 + 80)
                        || *(_BYTE *)(v159 + 200)
                        && *(_QWORD *)(v159 + 184)
                        && *(_QWORD *)(v159 + 136) != *(_QWORD *)(v159 + 144))
                      {
                        sub_20F44510C(v100, v159);
                      }
                    }
                  }
LABEL_200:
                  if (v183)
                  {
                    v184 = (__int128 *)v183;
                    operator delete(v183);
                  }
                  break;
                }
              }
            }
          }
LABEL_202:
          if (!*(_BYTE *)(a1 + 3016))
            return v25 | (unint64_t)(v9 << 8);
          v160 = *(_QWORD *)(a1 + 3008);
          if (!*(_BYTE *)(v160 + 80)
            && (!*(_BYTE *)(v160 + 200) || !*(_QWORD *)(v160 + 184)
                                        || *(_QWORD *)(v160 + 136) == *(_QWORD *)(v160 + 144)))
          {
            return v25 | (unint64_t)(v9 << 8);
          }
          sub_20F444EA0(v27, v182, v160);
          v161 = *(_QWORD *)(a1 + 2824);
          v162 = *(_QWORD *)(a1 + 2832);
          if (v161 == v162)
          {
            v164 = 0;
LABEL_242:
            sub_20F4451F4(v164, *(_QWORD *)(a1 + 3008));
            return v25 | (unint64_t)(v9 << 8);
          }
          v181 = v9;
          v163 = 0;
          v164 = 0;
          v165 = 0.0;
          while (1)
          {
            v166 = *(_QWORD **)(v161 + 16);
            v167 = (uint64_t *)v166[2];
            if (v167)
              break;
LABEL_206:
            v164 -= 1601513229 * ((v166[27] - v166[26]) >> 3);
            v161 += 4472;
            if (v161 == v162)
            {
              if (v163)
                sub_20F445024(*(_QWORD *)(a1 + 3008), v165 / (double)v163);
              v9 = v181;
              goto LABEL_242;
            }
          }
          while (1)
          {
            __s2[23] = 7;
            strcpy(__s2, "origin_");
            v171 = *((unsigned __int8 *)v167 + 39);
            if ((v171 & 0x80u) == 0)
              v172 = *((unsigned __int8 *)v167 + 39);
            else
              v172 = v167[3];
            if (v172 > 6)
            {
              v173 = (const void **)(v167 + 2);
              if ((v171 & 0x80) != 0)
              {
                if ((unint64_t)v167[3] >= 7)
                  v177 = 7;
                else
                  v177 = v167[3];
                v178 = memcmp(*v173, __s2, v177);
                if (v177 == 7 && v178 == 0)
                  goto LABEL_210;
              }
              else
              {
                if (v171 >= 7)
                  v174 = 7;
                else
                  v174 = *((unsigned __int8 *)v167 + 39);
                v175 = memcmp(v173, __s2, v174);
                if (v174 == 7 && v175 == 0)
                  goto LABEL_210;
              }
            }
            _Q1 = *((_OWORD *)v167 + 10);
            _D3 = v167[21];
            __asm { FMLA            D2, D3, V1.D[1] }
            v165 = v165 + sqrt(_D2 + *((double *)v167 + 22) * *((double *)v167 + 22));
            ++v163;
LABEL_210:
            v167 = (uint64_t *)*v167;
            if (!v167)
              goto LABEL_206;
          }
        }
LABEL_79:
        if (v195 < 0)
          operator delete(v194);
        goto LABEL_81;
      }
    }
    else
    {
      v9 = v82;
      v27 = v83;
      if ((v198 & 0x80000000) == 0)
        goto LABEL_74;
    }
    operator delete(v197);
    v81 = "t3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE";
    if (!v196)
      goto LABEL_81;
    goto LABEL_79;
  }
  return v25 | (unint64_t)(v9 << 8);
}

void sub_20F320528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v33;
  void *v34;

  if (a27 < 0)
  {
    operator delete(__p);
    v33 = a28;
    if (a28)
      goto LABEL_3;
  }
  else
  {
    v33 = a28;
    if (a28)
    {
LABEL_3:
      operator delete(v33);
      v34 = a19;
      if (!a19)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(v34);
      _Unwind_Resume(a1);
    }
  }
  v34 = a19;
  if (!a19)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20F32061C(uint64_t a1, int a2, double a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t *v33;
  char *v34;
  void *v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  void **v47;
  void **v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unsigned int v59;
  char *v60;
  double v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  void *v76[2];
  uint64_t v77;
  void *__p[2];
  char *v79;
  uint64_t v80;
  void **v81;

  v7 = *(_QWORD *)(a1 + 2808);
  v8 = *(_QWORD *)(a1 + 3080);
  if (v7 == *(_QWORD *)(v8 + 32))
  {
    v9 = 0;
    return v9 | ((_QWORD)v6 << 8);
  }
  *(_QWORD *)(v8 + 32) = v7;
  v13 = *(_QWORD *)(a1 + 2824);
  v14 = *(_QWORD *)(a1 + 2832);
  __p[0] = 0;
  __p[1] = 0;
  v79 = 0;
  v15 = v14 - v13;
  if (v14 == v13)
  {
    v17 = 0uLL;
  }
  else
  {
    v16 = 0x3175B2258D8284CFLL * (v15 >> 3);
    if (v16 >> 61)
      sub_20E867F44();
    __p[0] = operator new(0x8BAD912C6C142678 * (v15 >> 3));
    __p[1] = __p[0];
    v79 = (char *)__p[0] + 8 * v16;
    v81 = __p;
    do
    {
      v80 = v13;
      sub_20EA61104(&v81, &v80);
      v13 += 4472;
    }
    while (v13 != v14);
    v17 = *(_OWORD *)__p;
    v15 = (uint64_t)v79;
  }
  *(_OWORD *)v76 = v17;
  v77 = v15;
  a4.f64[0] = *(float64_t *)(a1 + 992);
  sub_20F2AB080((_DWORD *)(a1 + 2752), v76, *(double *)(a1 + 2280) * a4.f64[0], a4, a5, a6);
  __p[0] = 0;
  __p[1] = 0;
  v79 = 0;
  v6 = *(char **)(a1 + 2856);
  v18 = *(char **)(a1 + 2848);
  v19 = v6 - v18;
  if (v6 == v18)
    goto LABEL_54;
  if (v19 < 0)
    sub_20E867F44();
  v20 = (char *)operator new(v6 - v18);
  __p[0] = v20;
  __p[1] = v20;
  v79 = &v20[8 * (v19 >> 3)];
  if (!a2)
  {
LABEL_54:
    if (a2)
      v47 = __p;
    else
      v47 = v76;
    v48 = &v76[1];
    if (a2)
      v48 = &__p[1];
    v20 = (char *)*v48;
    v49 = (char *)*v47;
    if (*v47 == v20)
      goto LABEL_87;
    goto LABEL_60;
  }
  do
  {
    while (1)
    {
      while (1)
      {
        v21 = *(_QWORD *)(a1 + 2824);
        v22 = *(_QWORD *)(a1 + 2832);
        if (v21 != v22)
        {
          while (1)
          {
            v23 = *(_QWORD *)(v21 + 16);
            if (v23)
            {
              if (*(_QWORD *)(v23 + 160) == *(_QWORD *)v18)
                break;
            }
            v21 += 4472;
            if (v21 == v22)
            {
              v24 = 0;
              v25 = v79;
              if (v20 < v79)
                goto LABEL_13;
              goto LABEL_25;
            }
          }
        }
        v24 = v21 == v22 ? 0 : v21;
        v25 = v79;
        if (v20 >= v79)
          break;
LABEL_13:
        *(_QWORD *)v20 = v24;
        v20 += 8;
        __p[1] = v20;
        v18 += 8;
        if (v18 == v6)
          goto LABEL_86;
      }
LABEL_25:
      v26 = (char *)__p[0];
      v27 = v20 - (char *)__p[0];
      v28 = (v20 - (char *)__p[0]) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        sub_20E867F44();
      v30 = v25 - (char *)__p[0];
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v29;
      if (!v31)
        break;
      if (v31 >> 61)
        sub_20E877A38();
      v32 = operator new(8 * v31);
      v33 = (uint64_t *)&v32[8 * v28];
      v34 = &v32[8 * v31];
      *v33 = v24;
      v35 = v33 + 1;
      v36 = v20 - v26;
      if (v20 == v26)
        goto LABEL_41;
LABEL_34:
      v37 = v36 - 8;
      if (v37 < 0x168)
      {
        v38 = v20;
        goto LABEL_36;
      }
      v40 = (v20 - 8 - v26) & 0xFFFFFFFFFFFFFFF8;
      if (&v32[v27 - 8 - v40] > &v32[v27 - 8])
      {
        v38 = v20;
        do
        {
LABEL_36:
          v39 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v33 = v39;
        }
        while (v38 != v26);
        goto LABEL_37;
      }
      if (&v20[-v40 - 8] > v20 - 8)
      {
        v38 = v20;
        goto LABEL_36;
      }
      if ((unint64_t)(v20 - v32 - v27) < 0x20)
      {
        v38 = v20;
        goto LABEL_36;
      }
      v41 = (v37 >> 3) + 1;
      v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      v38 = &v20[-v42];
      v33 = (uint64_t *)((char *)v33 - v42);
      v43 = &v32[8 * v28 - 16];
      v44 = (__int128 *)(v20 - 16);
      v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v46 = *v44;
        *(v43 - 1) = *(v44 - 1);
        *v43 = v46;
        v43 -= 2;
        v44 -= 2;
        v45 -= 4;
      }
      while (v45);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
LABEL_37:
      v20 = (char *)__p[0];
      __p[0] = v33;
      __p[1] = v35;
      v79 = v34;
      if (v20)
        goto LABEL_42;
      v20 = (char *)v35;
      __p[1] = v35;
      v18 += 8;
      if (v18 == v6)
        goto LABEL_86;
    }
    v32 = 0;
    v33 = (uint64_t *)(8 * v28);
    v34 = 0;
    *(_QWORD *)(8 * v28) = v24;
    v35 = (void *)(8 * v28 + 8);
    v36 = v20 - v26;
    if (v20 != v26)
      goto LABEL_34;
LABEL_41:
    __p[0] = v33;
    __p[1] = v35;
    v79 = v34;
LABEL_42:
    operator delete(v20);
    v20 = (char *)v35;
    __p[1] = v35;
    v18 += 8;
  }
  while (v18 != v6);
LABEL_86:
  v49 = (char *)__p[0];
  if (__p[0] != v20)
  {
LABEL_60:
    v50 = 0;
    v9 = 0;
    v51 = 0;
    v52 = 0;
    while (1)
    {
      v53 = *(_QWORD **)(*(_QWORD *)v49 + 16);
      v54 = v53[20];
      if (v54 != *(_QWORD *)(a1 + 2808))
        break;
LABEL_63:
      v49 += 8;
      if (v49 == v20)
        goto LABEL_88;
    }
    v55 = v53[53];
    v56 = *(char **)(v55 + 40);
    v57 = *(char **)(v55 + 48);
    if (v56 == v57)
    {
      v61 = 0.0;
LABEL_80:
      v71 = v57 - v56;
      v72 = (double)(unint64_t)(v71 >> 4);
      if (!v71)
        v72 = 1.0;
      if (v61 / v72 > a3)
      {
        v73 = v53[50];
        if (!v52 || v73 < v51)
        {
          v6 = (char *)(v54 >> 8);
          v51 = v73;
          v9 = v54;
        }
        ++v50;
        v52 = 1;
      }
      goto LABEL_63;
    }
    v58 = v57 - v56 - 16;
    if (v58 >= 0x10)
    {
      v62 = 0;
      v63 = 0;
      v64 = (v58 >> 4) + 1;
      v60 = &v56[16 * (v64 & 0x1FFFFFFFFFFFFFFELL)];
      v65 = (uint64_t *)(v56 + 16);
      v66 = v64 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v67 = *(v65 - 2);
        v68 = *v65;
        v65 += 4;
        v69 = *(_QWORD *)(v68 + 696);
        if (*(_QWORD *)(v67 + 696) != -1)
          ++v62;
        if (v69 != -1)
          ++v63;
        v66 -= 2;
      }
      while (v66);
      v59 = v63 + v62;
      if (v64 == (v64 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_79;
    }
    else
    {
      v59 = 0;
      v60 = v56;
    }
    do
    {
      v70 = *(_QWORD *)v60;
      v60 += 16;
      if (*(_QWORD *)(v70 + 696) != -1)
        ++v59;
    }
    while (v60 != v57);
LABEL_79:
    v61 = (double)v59;
    goto LABEL_80;
  }
LABEL_87:
  v9 = 0;
  v50 = 0;
LABEL_88:
  if (*(_BYTE *)(a1 + 3016))
  {
    v74 = *(_QWORD *)(a1 + 3008);
    if (*(_BYTE *)(v74 + 80)
      || *(_BYTE *)(v74 + 200) && *(_QWORD *)(v74 + 184) && *(_QWORD *)(v74 + 136) != *(_QWORD *)(v74 + 144))
    {
      sub_20F444C60(v50, ((char *)v76[1] - (char *)v76[0]) >> 3, v74);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  return v9 | ((_QWORD)v6 << 8);
}

void sub_20F320B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_20F320BEC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = a1[353];
  v20 = a1[354];
  if (v3 != v20)
  {
    v5 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 160);
      v8 = *(_DWORD *)(v3 + 308);
      v9 = *(_DWORD *)(v3 + 304);
      v10 = v7;
      if ((v9 & 1) == 0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 579, (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsActive>() == true", 62, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_31;
        }
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 160);
      }
      if ((((v10 != a1[351]) ^ ((v9 & 2) >> 1)) & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 581, (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsPrimary>() == (submap.map_session() == this->primary_submap_session())", 115, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0)|| ((v9 >> 2) & 1) != (*(_BYTE *)(v3 + 304) & 4) >> 2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 583, (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsSelfSubmap>() == submap.IsSelfSubmap()", 83, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0)|| (v9 & 8) == 0&& sub_21023D5B4(
             "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp",
             584,
             (uint64_t)"stats.state.Get<SubmapRuntimeState::Flag::kIsLocalized>() == true",
             65,
             (uint64_t)&unk_2102A1D75,
             0,
             (void (*)(void **))sub_21023DDB0))
      {
LABEL_31:
        abort();
      }
      v11 = a2[2];
      if ((unint64_t)v5 >= v11)
        break;
      *(_QWORD *)v5 = v7;
      v6 = v5 + 16;
      *((_DWORD *)v5 + 2) = v8;
      *((_DWORD *)v5 + 3) = v9;
LABEL_4:
      a2[1] = (uint64_t)v6;
      v3 += 4472;
      v5 = v6;
      if (v3 == v20)
        return;
    }
    v12 = (char *)*a2;
    v13 = (uint64_t)&v5[-*a2] >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_20E92CED8();
    v15 = v11 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 60)
        sub_20E877A38();
      v17 = (char *)operator new(16 * v16);
      v18 = (uint64_t)&v17[16 * v13];
      *(_QWORD *)v18 = v7;
      *(_DWORD *)(v18 + 8) = v8;
      *(_DWORD *)(v18 + 12) = v9;
      v19 = v18;
      if (v5 == v12)
      {
LABEL_24:
        v6 = (char *)(v18 + 16);
        *a2 = v19;
        a2[1] = v18 + 16;
        a2[2] = (uint64_t)&v17[16 * v16];
        if (!v5)
          goto LABEL_4;
        goto LABEL_29;
      }
    }
    else
    {
      v17 = 0;
      v18 = 16 * v13;
      *(_QWORD *)v18 = v7;
      *(_DWORD *)(v18 + 8) = v8;
      *(_DWORD *)(v18 + 12) = v9;
      v19 = 16 * v13;
      if (v5 == v12)
        goto LABEL_24;
    }
    do
    {
      *(_OWORD *)(v19 - 16) = *((_OWORD *)v5 - 1);
      v19 -= 16;
      v5 -= 16;
    }
    while (v5 != v12);
    v5 = (char *)*a2;
    v6 = (char *)(v18 + 16);
    *a2 = v19;
    a2[1] = v18 + 16;
    a2[2] = (uint64_t)&v17[16 * v16];
    if (!v5)
      goto LABEL_4;
LABEL_29:
    operator delete(v5);
    goto LABEL_4;
  }
}

void sub_20F320EA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F320EC0(uint64_t a1, uint64_t a2, double a3, double a4, double a5, float64x2_t a6, double a7, float64x2_t a8, double a9, float64x2_t a10)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  BOOL v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v42;
  uint64_t *v43;
  unsigned __int8 v44;
  char *v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  void **v52;
  void **v53;
  uint64_t v54;
  void **v55;
  void **v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  void **v69;
  void **v70;
  unsigned int v71;
  uint64_t v72;
  void *v73;
  __int16 v74;
  void **v75;
  int v76;
  unint64_t v77;
  BOOL v78;
  _QWORD *v79;
  size_t v80;
  void **p_dst;
  int v82;
  BOOL v83;
  char v84;
  unint64_t v87;
  void **v88;
  const void *v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  size_t v93;
  unsigned __int8 v94;
  const char *v95;
  size_t v96;
  _BYTE *v97;
  uint64_t v98;
  size_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  NSObject *v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  size_t v108;
  size_t v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  const char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _BYTE *v162;
  BOOL v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  float v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v179;
  int v180;
  _BYTE *v181;
  uint64_t v182;
  _QWORD *v183;
  char v184;
  size_t v185;
  void **v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  const char *v193;
  size_t v194;
  unsigned __int8 v195;
  unsigned __int8 v196;
  const char *v197;
  size_t v198;
  _BYTE *v199;
  uint64_t v200;
  unint64_t v201;
  const char *v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  size_t v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  size_t v213;
  size_t v214;
  _QWORD *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  char v220;
  _QWORD *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  char *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  unsigned __int8 v233;
  const char *v234;
  size_t v235;
  __int128 *v236;
  unint64_t v237;
  const char *v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  NSObject *v247;
  size_t v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count *v251;
  unint64_t *p_shared_owners;
  unint64_t v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  _QWORD *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  const char *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _BOOL4 v323;
  char *__s;
  size_t __lena;
  size_t __len;
  char *categorya;
  char *category;
  char *categoryb;
  int v330;
  unint64_t v331;
  void *__src;
  const char *__srca;
  void **v334;
  void **v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  void *v339;
  const char *v340;
  const char *v341;
  int v342;
  _BOOL4 v343;
  int v344;
  uint64_t *v345;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v347;
  int v348;
  const char *v349;
  int v350;
  const char *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  void **__dst;
  size_t v355;
  int64_t v356;
  void *object;
  __int128 v358;
  __int128 v359;
  void *v360;
  size_t v361;
  unint64_t v362;
  void *v363;
  unint64_t v364;
  char v365;
  void *v366;
  void *v367;
  char v368;
  unint64_t v369;
  void *__p;
  _BYTE v371[152];
  uint64_t v372;
  uint64_t v373;
  char v374;
  void *v375;
  char v376;
  __int128 v377;
  std::__shared_weak_count *v378;
  char *v379;
  std::__shared_weak_count *v380;
  _QWORD *v381;
  __int128 v382;
  _BYTE v383[24];
  __int128 v384;
  char *v385;
  const char *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  _QWORD v389[5];

  v389[2] = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD **)(a1 + 2816);
  if (v12)
  {
    v13 = v12[2];
    v14 = **(_QWORD **)(v13 + 424);
    if (*(_QWORD *)(v14 + 64))
    {
      v17 = *(_QWORD *)(v14 + 56);
      v15 = v14 + 56;
      v16 = v17;
      if (v17)
      {
        do
        {
          v18 = v16;
          v16 = *(_QWORD *)(v16 + 8);
        }
        while (v16);
      }
      else
      {
        do
        {
          v18 = *(_QWORD *)(v15 + 16);
          v21 = *(_QWORD *)v18 == v15;
          v15 = v18;
        }
        while (v21);
      }
      if (*(_BYTE *)(a1 + 3280))
      {
        if (!*(_BYTE *)(a2 + 152)
          || ((v19 = *(_QWORD *)(v18 + 32), v20 = *(_DWORD *)(v18 + 40), *(_QWORD *)(a2 + 136) == v19)
            ? (v21 = *(_DWORD *)(a2 + 144) == v20)
            : (v21 = 0),
              !v21))
        {
          sub_20F31DCD4(&v373);
          if (**(int **)(v373 + 56) > 2
            || ((v22 = *(unsigned __int8 *)(v373 + 72),
                 v23 = sub_20E8C31DC(v373, "OSLogSurrogateAppender", 1, 0),
                 v24 = v23,
                 !v22)
              ? (v25 = v23 == 0)
              : (v25 = 0),
                v25))
          {
LABEL_484:
            LOBYTE(v58) = 0;
            v59 = 0;
            v60 = 0;
            return (v59 << 8) | (v60 << 16) | v58;
          }
          *(_QWORD *)v383 = &v373;
          *(std::chrono::steady_clock::time_point *)&v383[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v383[16] = std::chrono::system_clock::now();
          LODWORD(v384) = 2;
          *((_QWORD *)&v384 + 1) = "unknown file";
          LODWORD(v385) = 599;
          v387 = 0;
          v388 = 0;
          v386 = "unknown function";
          v26 = **(_QWORD **)v383;
          v27 = **(_QWORD **)v383 + 16;
          if (*(char *)(**(_QWORD **)v383 + 39) < 0)
          {
            v29 = *(const char **)(v26 + 16);
            v28 = *(_QWORD *)(v26 + 24);
          }
          else
          {
            v28 = *(unsigned __int8 *)(**(_QWORD **)v383 + 39);
            v29 = (const char *)(v26 + 16);
          }
          v233 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v233 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v359 && SHIBYTE(v358) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v234 = byte_254A4A4F8;
          else
            v234 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v235 = byte_254A4A4F8[23];
          else
            v235 = *(_QWORD *)&byte_254A4A4F8[8];
          object = os_log_create(v234, v29);
          v236 = &v358;
          if (v235 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v235 >= 0x17)
          {
            v237 = v24;
            v238 = v29;
            v239 = v26;
            v240 = v22;
            v241 = v27;
            v242 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v235 | 7) != 0x17)
              v242 = v235 | 7;
            v243 = v242 + 1;
            v236 = (__int128 *)operator new(v242 + 1);
            *((_QWORD *)&v358 + 1) = v235;
            *(_QWORD *)&v359 = v243 | 0x8000000000000000;
            *(_QWORD *)&v358 = v236;
            v27 = v241;
            v22 = v240;
            v26 = v239;
            v29 = v238;
            v24 = v237;
          }
          else
          {
            BYTE7(v359) = v235;
            if (!v235)
            {
LABEL_414:
              *((_BYTE *)v236 + v235) = 0;
              BYTE8(v359) = 1;
              v244 = &v360;
              if (v28 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v28 >= 0x17)
              {
                v245 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28 | 7) != 0x17)
                  v245 = v28 | 7;
                v246 = v245 + 1;
                v244 = operator new(v245 + 1);
                v361 = v28;
                v362 = v246 | 0x8000000000000000;
                v360 = v244;
              }
              else
              {
                HIBYTE(v362) = v28;
                if (!v28)
                  goto LABEL_422;
              }
              memmove(v244, v29, v28);
LABEL_422:
              *((_BYTE *)v244 + v28) = 0;
              LOBYTE(v363) = 1;
              v247 = object;
              if (SHIBYTE(v362) < 0)
                operator delete(v360);
              if (BYTE8(v359) && SBYTE7(v359) < 0)
                operator delete((void *)v358);
              if (object)
                os_release(object);
              if (v24 && *(_QWORD *)(v24 + 24))
              {
                v248 = _os_log_pack_size();
                v249 = (std::__shared_weak_count_vtbl *)operator new(v248, (std::align_val_t)8uLL);
                v250 = (std::__shared_weak_count *)operator new();
                v251 = v250;
                v250->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v250->__shared_owners_;
                v250->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v250->__shared_weak_owners_ = 0;
                v250[1].__vftable = v249;
                object = v249;
                *(_QWORD *)&v358 = v249;
                *((_QWORD *)&v358 + 1) = v250;
                do
                  v253 = __ldxr(p_shared_owners);
                while (__stxr(v253 + 1, p_shared_owners));
                v359 = 0uLL;
                v360 = 0;
                do
                  v254 = __ldaxr(p_shared_owners);
                while (__stlxr(v254 - 1, p_shared_owners));
                if (!v254)
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v251);
                }
                v255 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v256 = operator new();
                v257 = *(unsigned __int8 *)(v26 + 39);
                if ((v257 & 0x80u) == 0)
                  v258 = v27;
                else
                  v258 = *(_QWORD *)(v26 + 16);
                if ((v257 & 0x80u) != 0)
                  v257 = *(_QWORD *)(v26 + 24);
                *(_QWORD *)v256 = v255;
                *(_OWORD *)(v256 + 8) = v358;
                v358 = 0uLL;
                *(_OWORD *)(v256 + 24) = v359;
                v359 = 0uLL;
                *(_QWORD *)(v256 + 40) = v258;
                *(_QWORD *)(v256 + 48) = v257;
                *(_BYTE *)(v256 + 56) = 2;
                *(_QWORD *)&v377 = 0;
                v345 = (uint64_t *)v256;
                (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v24 + 24) + 40))(*(_QWORD *)(v24 + 24), &v345);
                v259 = v345;
                v345 = 0;
                if (v259)
                {
                  v260 = (std::__shared_weak_count *)v259[4];
                  if (v260)
                  {
                    v261 = (unint64_t *)&v260->__shared_owners_;
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 - 1, v261));
                    if (!v262)
                    {
                      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                      std::__shared_weak_count::__release_weak(v260);
                    }
                  }
                  v263 = (std::__shared_weak_count *)v259[2];
                  if (v263)
                  {
                    v264 = (unint64_t *)&v263->__shared_owners_;
                    do
                      v265 = __ldaxr(v264);
                    while (__stlxr(v265 - 1, v264));
                    if (!v265)
                    {
                      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                      std::__shared_weak_count::__release_weak(v263);
                    }
                  }
                  MEMORY[0x212BC6398](v259, 0x10F0C40B62ED6C6);
                  v266 = v377;
                  *(_QWORD *)&v377 = 0;
                  if (v266)
                  {
                    v267 = *(std::__shared_weak_count **)(v266 + 32);
                    if (v267)
                    {
                      v268 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v269 = __ldaxr(v268);
                      while (__stlxr(v269 - 1, v268));
                      if (!v269)
                      {
                        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                        std::__shared_weak_count::__release_weak(v267);
                      }
                    }
                    v270 = *(std::__shared_weak_count **)(v266 + 16);
                    if (v270)
                    {
                      v271 = (unint64_t *)&v270->__shared_owners_;
                      do
                        v272 = __ldaxr(v271);
                      while (__stlxr(v272 - 1, v271));
                      if (!v272)
                      {
                        ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                        std::__shared_weak_count::__release_weak(v270);
                      }
                    }
                    MEMORY[0x212BC6398](v266, 0x10F0C40B62ED6C6);
                  }
                }
                v273 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
                if (*((_QWORD *)&v359 + 1))
                {
                  v274 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
                  do
                    v275 = __ldaxr(v274);
                  while (__stlxr(v275 - 1, v274));
                  if (!v275)
                  {
                    ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                    std::__shared_weak_count::__release_weak(v273);
                  }
                }
                v276 = (std::__shared_weak_count *)*((_QWORD *)&v358 + 1);
                if (*((_QWORD *)&v358 + 1))
                {
                  v277 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
                  do
                    v278 = __ldaxr(v277);
                  while (__stlxr(v278 - 1, v277));
                  if (!v278)
                  {
                    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                    std::__shared_weak_count::__release_weak(v276);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v247, OS_LOG_TYPE_DEBUG);
                LOWORD(object) = 0;
                v279 = (void *)_os_log_send_and_compose_impl();
                if (v279)
                  free(v279);
              }
              if (v22)
              {
                sub_20E8C003C((uint64_t)v383, "Waiting Front-end module to update latest map keyframe ID");
                sub_20E863570((uint64_t)v383);
              }
              sub_20E863570((uint64_t)v383);
              v280 = v388;
              if (v388)
              {
                v281 = (unint64_t *)&v388->__shared_owners_;
                do
                  v282 = __ldaxr(v281);
                while (__stlxr(v282 - 1, v281));
                if (!v282)
                {
                  ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                  std::__shared_weak_count::__release_weak(v280);
                }
              }
              goto LABEL_484;
            }
          }
          memmove(v236, v234, v235);
          goto LABEL_414;
        }
      }
    }
  }
  else
  {
    v13 = MEMORY[0x10];
  }
  v30 = *(void **)(v13 + 160);
  v31 = *(_QWORD *)(**(_QWORD **)(v13 + 424) + 64);
  v32 = (uint64_t)(v12[5] - v12[4]) >> 4;
  v33 = *(void **)(a2 + 120);
  if (v31 == v32 && v33 != v30)
  {
    v43 = sub_210219C18();
    v44 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_68;
    LOWORD(object) = 0;
    v46 = (char *)_os_log_send_and_compose_impl();
    v47 = strlen(v46);
    *(_QWORD *)v383 = 0;
    pthread_threadid_np(0, (__uint64_t *)v383);
    v48 = *(_QWORD *)v383;
    timespec_get((timespec *)v383, 1);
    sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v43 + 1), (__int128 *)(v43 + 5), "MAP: Skip Adding Incorrect Submap Keyframe To Empty Map", 0x37uLL, v46, v47, v48, v383);
    std::mutex::lock(&stru_254A5A410);
    v49 = qword_254A5A458;
    for (i = unk_254A5A460; v49 != i; v49 += 40)
    {
      v51 = *(_QWORD *)(v49 + 32);
      if (!v51)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v51 + 48))(v51, &object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v371[15] & 0x80000000) != 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v369) & 0x80000000) == 0)
      {
LABEL_50:
        if (!(_BYTE)v366)
        {
LABEL_61:
          if ((_BYTE)v362 && SHIBYTE(v361) < 0)
            operator delete(*((void **)&v359 + 1));
          if (SBYTE7(v359) < 0)
            operator delete((void *)v358);
          if (v46)
            free(v46);
LABEL_68:
          if (os_signpost_enabled((os_log_t)*v43))
          {
            LOWORD(object) = 0;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          LOBYTE(v58) = 0;
          v59 = 0;
          v60 = 1;
          return (v59 << 8) | (v60 << 16) | v58;
        }
LABEL_59:
        if (v365 < 0)
          operator delete(v363);
        goto LABEL_61;
      }
    }
    else if ((SHIBYTE(v369) & 0x80000000) == 0)
    {
      goto LABEL_50;
    }
    operator delete(v367);
    if (!(_BYTE)v366)
      goto LABEL_61;
    goto LABEL_59;
  }
  v35 = v33 != v30 || v31 == v32;
  v36 = !v35 && *(_QWORD *)(a1 + 48) != 0;
  v37 = !v35 && *(_QWORD *)(a1 + 56) != 0;
  v343 = v37;
  LOBYTE(v373) = 0;
  v374 = 0;
  LOBYTE(v375) = 0;
  v376 = 0;
  v39 = *(_QWORD *)(v13 + 208);
  v38 = *(_QWORD *)(v13 + 216);
  if (v39 != v38)
  {
    v40 = 0;
    do
    {
      if (*(_DWORD *)(v39 + 464) == 2 && v40 <= 1)
      {
        v42 = &v373 + 2 * v40;
        *v42 = *(_QWORD *)(v39 + 24);
        *((_BYTE *)v42 + 8) = 1;
        ++v40;
      }
      v39 += 472;
    }
    while (v39 != v38);
  }
  if (*(_BYTE *)(a1 + 2645))
  {
    sub_20F31EFC8(&object, (_QWORD *)a1);
    v53 = (void **)object;
    v52 = (void **)v358;
  }
  else
  {
    v52 = 0;
    v53 = 0;
  }
  v54 = *(_QWORD *)(a1 + 2936);
  *(_WORD *)(v54 + 248) = 0;
  *(_DWORD *)(v54 + 250) = 0;
  v55 = *(void ***)(a1 + 2848);
  v56 = *(void ***)(a1 + 2856);
  if (v55 != v56)
  {
    v338 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v339 = (void *)*MEMORY[0x24BEDB7F0];
    v337 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v57 = 136315138;
    v336 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v61 = *v55;
      v62 = *(_QWORD *)(a1 + 2824);
      v63 = *(_QWORD *)(a1 + 2832);
      if (v62 != v63)
      {
        while (1)
        {
          v64 = *(_QWORD *)(v62 + 16);
          if (v64)
          {
            if (*(void **)(v64 + 160) == v61)
              break;
          }
          v62 += 4472;
          if (v62 == v63)
            goto LABEL_72;
        }
      }
      if (v62 == v63 || v62 == 0)
        goto LABEL_72;
      v66 = *(_QWORD *)(v62 + 16);
      if (*(_DWORD *)(v66 + 412) != *(_DWORD *)(a1 + 2752)
        || *(_DWORD *)(v66 + 416) != *(_DWORD *)(a1 + 2756)
        || *(_DWORD *)(v66 + 420) != *(_DWORD *)(a1 + 2760))
      {
        goto LABEL_72;
      }
      if (*(_BYTE *)(a1 + 2329))
      {
        v67 = *(_QWORD *)(a1 + 3080);
        v68 = *(void ***)(v67 + 8);
        v69 = *(void ***)(v67 + 16);
        if (v68 != v69)
        {
          while (*v68 != v61)
          {
            if (++v68 == v69)
              goto LABEL_89;
          }
          sub_20F31DCD4(&v372);
          if (**(int **)(v372 + 56) > 2)
            goto LABEL_72;
          __src = v33;
          v75 = v53;
          v76 = *(unsigned __int8 *)(v372 + 72);
          v77 = sub_20E8C31DC(v372, "OSLogSurrogateAppender", 1, 0);
          v330 = v76;
          v331 = v77;
          v78 = !v76 && v77 == 0;
          v53 = v75;
          v33 = __src;
          if (v78)
            goto LABEL_72;
          v334 = v53;
          sub_20E863438((uint64_t)&object);
          sub_20E86A980((_QWORD *)&v358 + 1, (uint64_t)"Ignore submap ", 14);
          v79 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v79, (uint64_t)" for KF classification", 22);
          v323 = v36;
          if ((__p & 0x10) != 0)
          {
            v87 = v369;
            v88 = &v363;
            if (v369 < v364)
            {
              v369 = v364;
              v87 = v364;
              v88 = &v363;
            }
          }
          else
          {
            if ((__p & 8) == 0)
            {
              v80 = 0;
              HIBYTE(v356) = 0;
              p_dst = (void **)&__dst;
              goto LABEL_146;
            }
            v87 = v362;
            v88 = &v360;
          }
          v89 = *v88;
          v80 = v87 - (_QWORD)*v88;
          if (v80 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v80 >= 0x17)
          {
            v90 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v80 | 7) != 0x17)
              v90 = v80 | 7;
            __lena = v90 + 1;
            categorya = (char *)*v88;
            p_dst = (void **)operator new(v90 + 1);
            v89 = categorya;
            v355 = v80;
            v356 = __lena | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v356) = v87 - *(_BYTE *)v88;
            p_dst = (void **)&__dst;
            if (!v80)
            {
LABEL_146:
              *((_BYTE *)p_dst + v80) = 0;
              v345 = &v372;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v347 = std::chrono::system_clock::now().__d_.__rep_;
              v348 = 2;
              v349 = "unknown file";
              v350 = 661;
              v351 = "unknown function";
              v352 = 0;
              v353 = 0;
              v91 = (void **)&__dst;
              if (v356 < 0)
                v91 = __dst;
              __s = (char *)v91;
              v92 = *v345;
              if (*(char *)(*v345 + 39) < 0)
              {
                v93 = *(_QWORD *)(v92 + 24);
                category = *(char **)(v92 + 16);
              }
              else
              {
                v93 = *(unsigned __int8 *)(*v345 + 39);
                category = (char *)(*v345 + 16);
              }
              v321 = *v345;
              v322 = *v345 + 16;
              v94 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v377);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v377);
                if ((_BYTE)v379 && SHIBYTE(v378) < 0)
                  operator delete((void *)v377);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v33 = __src;
              }
              if (byte_254A4A4F8[23] >= 0)
                v95 = byte_254A4A4F8;
              else
                v95 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v96 = byte_254A4A4F8[23];
              else
                v96 = *(_QWORD *)&byte_254A4A4F8[8];
              __srca = v95;
              *(_QWORD *)v383 = os_log_create(v95, category);
              if (v96 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              __len = v93;
              if (v96 >= 0x17)
              {
                v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v96 | 7) != 0x17)
                  v98 = v96 | 7;
                v320 = v98 + 1;
                v97 = operator new(v98 + 1);
                *(_QWORD *)&v383[16] = v96;
                *(_QWORD *)&v384 = v320 | 0x8000000000000000;
                *(_QWORD *)&v383[8] = v97;
              }
              else
              {
                BYTE7(v384) = v96;
                v97 = &v383[8];
                if (!v96)
                {
LABEL_166:
                  v97[v96] = 0;
                  BYTE8(v384) = 1;
                  v99 = __len;
                  if (__len > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (__len >= 0x17)
                  {
                    v101 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((__len | 7) != 0x17)
                      v101 = __len | 7;
                    v102 = v101 + 1;
                    v100 = (char *)operator new(v101 + 1);
                    v103 = v102 | 0x8000000000000000;
                    v385 = v100;
                    v99 = __len;
                    v386 = (const char *)__len;
                    v387 = v103;
                  }
                  else
                  {
                    HIBYTE(v387) = __len;
                    v100 = (char *)&v385;
                    if (!__len)
                    {
LABEL_174:
                      v100[v99] = 0;
                      LOBYTE(v388) = 1;
                      v104 = *(NSObject **)v383;
                      if (SHIBYTE(v387) < 0)
                        operator delete(v385);
                      if (BYTE8(v384) && SBYTE7(v384) < 0)
                        operator delete(*(void **)&v383[8]);
                      if (*(_QWORD *)v383)
                        os_release(*(void **)v383);
                      if (v331 && *(_QWORD *)(v331 + 24))
                      {
                        v105 = _os_log_pack_size();
                        v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
                        v107 = (std::__shared_weak_count *)operator new();
                        v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v107->__shared_owners_ = 0;
                        v107->__shared_weak_owners_ = 0;
                        v107[1].__vftable = v106;
                        *(_QWORD *)&v377 = v106;
                        *((_QWORD *)&v377 + 1) = v106;
                        v378 = v107;
                        v379 = 0;
                        v380 = 0;
                        v108 = strlen(__s);
                        if (v108 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        v109 = v108;
                        if (v108 >= 0x17)
                        {
                          v112 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v108 | 7) != 0x17)
                            v112 = v108 | 7;
                          categoryb = (char *)(v112 + 1);
                          v110 = operator new(v112 + 1);
                          *(_QWORD *)&v382 = v109;
                          *((_QWORD *)&v382 + 1) = (unint64_t)categoryb | 0x8000000000000000;
                          v381 = v110;
                        }
                        else
                        {
                          HIBYTE(v382) = v108;
                          v110 = &v381;
                          if (!v108)
                            goto LABEL_193;
                        }
                        memcpy(v110, __s, v109);
LABEL_193:
                        *((_BYTE *)v110 + v109) = 0;
                        v113 = v381;
                        v389[0] = v382;
                        *(_QWORD *)((char *)v389 + 7) = *(_QWORD *)((char *)&v382 + 7);
                        v114 = HIBYTE(v382);
                        v115 = operator new(0x38uLL);
                        v115[1] = 0;
                        v115[2] = 0;
                        v115[3] = off_24C9ABC20;
                        *v115 = &off_24C9ABBD0;
                        v116 = v389[0];
                        v115[4] = v113;
                        v115[5] = v116;
                        *(_QWORD *)((char *)v115 + 47) = *(_QWORD *)((char *)v389 + 7);
                        *((_BYTE *)v115 + 55) = v114;
                        v389[0] = 0;
                        *(_QWORD *)((char *)v389 + 7) = 0;
                        v117 = v380;
                        v379 = (char *)(v115 + 3);
                        v380 = (std::__shared_weak_count *)v115;
                        if (v117)
                        {
                          v118 = (unint64_t *)&v117->__shared_owners_;
                          do
                            v119 = __ldaxr(v118);
                          while (__stlxr(v119 - 1, v118));
                          if (!v119)
                          {
                            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                            std::__shared_weak_count::__release_weak(v117);
                          }
                        }
                        *(_OWORD *)v383 = v377;
                        v120 = v379;
                        *(_QWORD *)&v383[16] = v378;
                        if (v378)
                        {
                          v121 = (unint64_t *)&v378->__shared_owners_;
                          do
                            v122 = __ldxr(v121);
                          while (__stxr(v122 + 1, v121));
                        }
                        v123 = v380;
                        *(_QWORD *)&v384 = v120;
                        *((_QWORD *)&v384 + 1) = v380;
                        if (v380)
                        {
                          v124 = (unint64_t *)&v380->__shared_owners_;
                          do
                            v125 = __ldxr(v124);
                          while (__stxr(v125 + 1, v124));
                          v385 = v120;
                          do
                            v126 = __ldaxr(v124);
                          while (__stlxr(v126 - 1, v124));
                          if (!v126)
                          {
                            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                            std::__shared_weak_count::__release_weak(v123);
                          }
                        }
                        else
                        {
                          v385 = v120;
                        }
                        v127 = v378;
                        if (v378)
                        {
                          v128 = (unint64_t *)&v378->__shared_owners_;
                          do
                            v129 = __ldaxr(v128);
                          while (__stlxr(v129 - 1, v128));
                          if (!v129)
                          {
                            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                            std::__shared_weak_count::__release_weak(v127);
                          }
                        }
                        v130 = *(_QWORD *)v383;
                        if (v385[31] >= 0)
                          v131 = v385 + 8;
                        else
                          v131 = (char *)*((_QWORD *)v385 + 1);
                        v132 = _os_log_pack_fill();
                        *(_DWORD *)v132 = 136315138;
                        *(_QWORD *)(v132 + 4) = v131;
                        v133 = operator new();
                        v134 = *(unsigned __int8 *)(v321 + 39);
                        v135 = *(_QWORD *)(v321 + 16);
                        v136 = *(_QWORD *)(v321 + 24);
                        v137 = v384;
                        *(_OWORD *)(v133 + 8) = *(_OWORD *)&v383[8];
                        if ((v134 & 0x80u) != 0)
                          v134 = v136;
                        else
                          v135 = v322;
                        *(_QWORD *)v133 = v130;
                        *(_QWORD *)&v383[8] = 0;
                        *(_QWORD *)&v383[16] = 0;
                        *(_OWORD *)(v133 + 24) = v137;
                        v384 = 0uLL;
                        *(_QWORD *)(v133 + 40) = v135;
                        *(_QWORD *)(v133 + 48) = v134;
                        *(_BYTE *)(v133 + 56) = 2;
                        v381 = 0;
                        *(_QWORD *)&v377 = v133;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v331 + 24) + 40))(*(_QWORD *)(v331 + 24), &v377);
                        v138 = v377;
                        *(_QWORD *)&v377 = 0;
                        if (v138)
                        {
                          v139 = *(std::__shared_weak_count **)(v138 + 32);
                          if (v139)
                          {
                            v140 = (unint64_t *)&v139->__shared_owners_;
                            do
                              v141 = __ldaxr(v140);
                            while (__stlxr(v141 - 1, v140));
                            if (!v141)
                            {
                              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                              std::__shared_weak_count::__release_weak(v139);
                            }
                          }
                          v142 = *(std::__shared_weak_count **)(v138 + 16);
                          if (v142)
                          {
                            v143 = (unint64_t *)&v142->__shared_owners_;
                            do
                              v144 = __ldaxr(v143);
                            while (__stlxr(v144 - 1, v143));
                            if (!v144)
                            {
                              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                              std::__shared_weak_count::__release_weak(v142);
                            }
                          }
                          MEMORY[0x212BC6398](v138, 0x10F0C40B62ED6C6);
                          v145 = v381;
                          v381 = 0;
                          if (v145)
                          {
                            v146 = (std::__shared_weak_count *)v145[4];
                            if (v146)
                            {
                              v147 = (unint64_t *)&v146->__shared_owners_;
                              do
                                v148 = __ldaxr(v147);
                              while (__stlxr(v148 - 1, v147));
                              if (!v148)
                              {
                                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                std::__shared_weak_count::__release_weak(v146);
                              }
                            }
                            v149 = (std::__shared_weak_count *)v145[2];
                            if (v149)
                            {
                              v150 = (unint64_t *)&v149->__shared_owners_;
                              do
                                v151 = __ldaxr(v150);
                              while (__stlxr(v151 - 1, v150));
                              if (!v151)
                              {
                                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                                std::__shared_weak_count::__release_weak(v149);
                              }
                            }
                            MEMORY[0x212BC6398](v145, 0x10F0C40B62ED6C6);
                          }
                        }
                        v152 = (std::__shared_weak_count *)*((_QWORD *)&v384 + 1);
                        v53 = v334;
                        if (*((_QWORD *)&v384 + 1))
                        {
                          v153 = (unint64_t *)(*((_QWORD *)&v384 + 1) + 8);
                          do
                            v154 = __ldaxr(v153);
                          while (__stlxr(v154 - 1, v153));
                          if (!v154)
                          {
                            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                            std::__shared_weak_count::__release_weak(v152);
                          }
                        }
                        v155 = *(std::__shared_weak_count **)&v383[16];
                        if (*(_QWORD *)&v383[16])
                        {
                          v156 = (unint64_t *)(*(_QWORD *)&v383[16] + 8);
                          do
                            v157 = __ldaxr(v156);
                          while (__stlxr(v157 - 1, v156));
                          if (!v157)
                          {
                            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                            std::__shared_weak_count::__release_weak(v155);
                          }
                        }
                      }
                      else
                      {
                        os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG);
                        *(_DWORD *)v383 = 136315138;
                        *(_QWORD *)&v383[4] = __s;
                        v111 = (void *)_os_log_send_and_compose_impl();
                        v53 = v334;
                        if (v111)
                          free(v111);
                      }
                      if (v330)
                      {
                        v158 = (const char *)&__dst;
                        if (v356 < 0)
                          v158 = (const char *)__dst;
                        sub_20E8C003C((uint64_t)&v345, "%s", v158);
                        sub_20E863570((uint64_t)&v345);
                      }
                      sub_20E863570((uint64_t)&v345);
                      v159 = v353;
                      if (v353)
                      {
                        v160 = (unint64_t *)&v353->__shared_owners_;
                        do
                          v161 = __ldaxr(v160);
                        while (__stlxr(v161 - 1, v160));
                        if (!v161)
                        {
                          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                          std::__shared_weak_count::__release_weak(v159);
                        }
                      }
                      if (SHIBYTE(v356) < 0)
                        operator delete(__dst);
                      object = v339;
                      *(void **)((char *)&object + *((_QWORD *)v339 - 3)) = v338;
                      *((_QWORD *)&v358 + 1) = v337;
                      *(_QWORD *)&v359 = v336;
                      v36 = v323;
                      if (v368 < 0)
                        operator delete(v366);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](v371);
                      goto LABEL_72;
                    }
                  }
                  memmove(v100, category, v99);
                  goto LABEL_174;
                }
              }
              memmove(v97, __srca, v96);
              goto LABEL_166;
            }
          }
          memmove(p_dst, v89, v80);
          goto LABEL_146;
        }
      }
LABEL_89:
      if (*(_BYTE *)(a1 + 2645))
      {
        v70 = v52;
        if (v53 != v52)
        {
          v70 = v53;
          while (*v70 != v61)
          {
            if (++v70 == v52)
            {
              v70 = v52;
              break;
            }
          }
        }
        if (v70 == v52)
          goto LABEL_72;
      }
      v71 = sub_20F2C6BFC(*(_QWORD *)(a1 + 2936), **(_QWORD **)(v66 + 424), (uint64_t *)(v62 + 32), a2, v36, *(double *)&v57, a4, a5, a6, a7, a8, a9, a10);
      v72 = *(_QWORD *)(a1 + 2936);
      if (v343)
      {
        if ((v73 = *v55, *v55 == v30) || v374 && v73 == (void *)v373 || v376 && v73 == v375)
        {
          if (v71 == 1)
          {
            if (*(_BYTE *)(v72 + 249))
              goto LABEL_115;
            v74 = 257;
          }
          else
          {
            v74 = 256;
          }
          *(_WORD *)(v72 + 248) = v74;
        }
      }
LABEL_115:
      if (*(_BYTE *)(v72 + 253))
      {
        v82 = *(unsigned __int8 *)(v72 + 250);
        if (*(_BYTE *)(v72 + 250))
          v83 = v71 == 0;
        else
          v83 = 1;
        if (v83)
        {
          v84 = 0;
        }
        else if (v71 == 2 || v82 == 2)
        {
          v84 = 2;
        }
        else if (v82 == 3 || v71 == 3)
        {
          v84 = 3;
        }
        else
        {
          v84 = 1;
        }
        *(_BYTE *)(v72 + 250) = v84;
      }
      else
      {
        *(_BYTE *)(v72 + 250) = v71;
        *(_WORD *)(v72 + 251) = v71 >> 8;
        *(_BYTE *)(v72 + 253) = 1;
      }
LABEL_72:
      ++v55;
    }
    while (v55 != v56);
  }
  v162 = *(_BYTE **)(a1 + 2936);
  if (v162[253])
  {
    v58 = v162[250];
    if (v58 == 2 && v162[249] && v162[248])
      v58 = 3;
    v59 = v162[251];
    v60 = v162[252];
    *((_WORD *)v162 + 124) = 0;
    *(_DWORD *)(v162 + 250) = 0;
    if (v58)
      v163 = v33 == v30;
    else
      v163 = 1;
    if (!v163)
    {
      v172 = *(_QWORD *)(a1 + 2824);
      v173 = *(_QWORD *)(a1 + 2832);
      if (v172 != v173)
      {
        while (1)
        {
          v174 = *(_QWORD *)(v172 + 16);
          if (v174)
          {
            if (*(_QWORD *)(v174 + 160) == *(_QWORD *)(a2 + 120))
              break;
          }
          v172 += 4472;
          if (v172 == v173)
            goto LABEL_282;
        }
      }
      if (v172 != v173 && v172)
      {
        LOBYTE(v58) = 0;
        v59 = 0;
        v60 = 0;
        goto LABEL_544;
      }
    }
LABEL_282:
    if (v58 == 2)
    {
      v164 = *(_QWORD **)(a1 + 2848);
      v165 = *(_QWORD **)(a1 + 2856);
      if (v164 == v165)
      {
        LOBYTE(v58) = 2;
      }
      else
      {
        while (1)
        {
          v166 = *(_QWORD **)(a1 + 2824);
          v167 = *(_QWORD **)(a1 + 2832);
          if (v166 != v167)
          {
            while (1)
            {
              v168 = v166[2];
              if (v168)
              {
                if (*(_QWORD *)(v168 + 160) == *v164)
                  break;
              }
              v166 += 559;
              if (v166 == v167)
                goto LABEL_285;
            }
          }
          if (v166 != v167 && v166 != 0)
          {
            v170 = *(double *)(a1 + 2736);
            v171 = *(double *)(a1 + 2728);
            if (!sub_20F269208(v166, a2, v170, v171, a5, a6.f64[0], a7, a8))
              break;
          }
LABEL_285:
          if (++v164 == v165)
            goto LABEL_307;
        }
        v59 = 1;
      }
    }
  }
  else
  {
    v60 = 0;
    LOBYTE(v58) = 0;
    v59 = 0;
    *((_WORD *)v162 + 124) = 0;
    *(_DWORD *)(v162 + 250) = 0;
  }
LABEL_307:
  sub_20F31DCD4(&v372);
  if (**(int **)(v372 + 56) <= 2)
  {
    v175 = *(unsigned __int8 *)(v372 + 72);
    v176 = sub_20E8C31DC(v372, "OSLogSurrogateAppender", 1, 0);
    v177 = v176;
    if (v175 || v176 != 0)
    {
      v335 = v53;
      sub_20E863438((uint64_t)&object);
      v179 = sub_20E86A980((_QWORD *)&v358 + 1, (uint64_t)"create new map keyframe: ", 25);
      v180 = *(_DWORD *)(a2 + 128);
      v345 = *(uint64_t **)(a2 + 120);
      LODWORD(rep) = v180;
      sub_210216370((uint64_t)&v345);
      if (v383[23] >= 0)
        v181 = v383;
      else
        v181 = *(_BYTE **)v383;
      if (v383[23] >= 0)
        v182 = v383[23];
      else
        v182 = *(_QWORD *)&v383[8];
      v183 = sub_20E86A980(v179, (uint64_t)v181, v182);
      sub_20E86A980(v183, (uint64_t)" as ", 4);
      std::ostream::operator<<();
      if ((v383[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v383);
        v184 = (char)__p;
        if ((__p & 0x10) == 0)
        {
LABEL_320:
          if ((v184 & 8) == 0)
          {
            v185 = 0;
            HIBYTE(v356) = 0;
            v186 = (void **)&__dst;
            goto LABEL_333;
          }
          v188 = v360;
          v185 = v362 - (_QWORD)v360;
          if (v362 - (unint64_t)v360 > 0x7FFFFFFFFFFFFFF7)
LABEL_378:
            sub_20E860B7C();
LABEL_326:
          if (v185 >= 0x17)
          {
            v189 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v185 | 7) != 0x17)
              v189 = v185 | 7;
            v190 = v189 + 1;
            v186 = (void **)operator new(v189 + 1);
            v355 = v185;
            v356 = v190 | 0x8000000000000000;
            __dst = v186;
          }
          else
          {
            HIBYTE(v356) = v185;
            v186 = (void **)&__dst;
            if (!v185)
            {
LABEL_333:
              *((_BYTE *)v186 + v185) = 0;
              v345 = &v372;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v347 = std::chrono::system_clock::now().__d_.__rep_;
              v348 = 2;
              v349 = "unknown file";
              v350 = 717;
              v352 = 0;
              v353 = 0;
              v351 = "unknown function";
              if (v356 >= 0)
                v191 = (const char *)&__dst;
              else
                v191 = (const char *)__dst;
              v192 = *v345;
              v193 = (const char *)(*v345 + 16);
              v341 = v193;
              if (*(char *)(*v345 + 39) < 0)
              {
                v193 = *(const char **)(v192 + 16);
                v194 = *(_QWORD *)(v192 + 24);
                v342 = v60;
                v344 = v59;
                v196 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v196 & 1) != 0)
                  goto LABEL_340;
              }
              else
              {
                v194 = *(unsigned __int8 *)(*v345 + 39);
                v342 = v60;
                v344 = v59;
                v195 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v195 & 1) != 0)
                  goto LABEL_340;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v383);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v383);
                if ((_BYTE)v384 && (v383[23] & 0x80000000) != 0)
                  operator delete(*(void **)v383);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_340:
              if (byte_254A4A4F8[23] >= 0)
                v197 = byte_254A4A4F8;
              else
                v197 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v198 = byte_254A4A4F8[23];
              else
                v198 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v383 = os_log_create(v197, v193);
              v199 = &v383[8];
              if (v198 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v198 >= 0x17)
              {
                v340 = v193;
                v200 = v192;
                v201 = v177;
                v202 = v191;
                v203 = v175;
                v204 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v198 | 7) != 0x17)
                  v204 = v198 | 7;
                v205 = v204 + 1;
                v199 = operator new(v204 + 1);
                *(_QWORD *)&v383[16] = v198;
                *(_QWORD *)&v384 = v205 | 0x8000000000000000;
                *(_QWORD *)&v383[8] = v199;
                v175 = v203;
                v191 = v202;
                v177 = v201;
                v192 = v200;
                v193 = v340;
              }
              else
              {
                BYTE7(v384) = v198;
                if (!v198)
                {
LABEL_354:
                  v199[v198] = 0;
                  BYTE8(v384) = 1;
                  v206 = (char *)&v385;
                  if (v194 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v194 >= 0x17)
                  {
                    v207 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v194 | 7) != 0x17)
                      v207 = v194 | 7;
                    v208 = v207 + 1;
                    v206 = (char *)operator new(v207 + 1);
                    v386 = (const char *)v194;
                    v387 = v208 | 0x8000000000000000;
                    v385 = v206;
                  }
                  else
                  {
                    HIBYTE(v387) = v194;
                    if (!v194)
                    {
LABEL_362:
                      v206[v194] = 0;
                      LOBYTE(v388) = 1;
                      v209 = *(NSObject **)v383;
                      if (SHIBYTE(v387) < 0)
                        operator delete(v385);
                      v53 = v335;
                      if (BYTE8(v384) && SBYTE7(v384) < 0)
                        operator delete(*(void **)&v383[8]);
                      if (*(_QWORD *)v383)
                        os_release(*(void **)v383);
                      if (!v177 || !*(_QWORD *)(v177 + 24))
                      {
                        os_log_type_enabled(v209, OS_LOG_TYPE_DEBUG);
                        *(_DWORD *)v383 = 136315138;
                        *(_QWORD *)&v383[4] = v191;
                        v216 = (void *)_os_log_send_and_compose_impl();
                        v59 = v344;
                        v60 = v342;
                        if (v216)
                          free(v216);
                        goto LABEL_530;
                      }
                      v210 = _os_log_pack_size();
                      v211 = (std::__shared_weak_count_vtbl *)operator new(v210, (std::align_val_t)8uLL);
                      v212 = (std::__shared_weak_count *)operator new();
                      v212->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v212->__shared_owners_ = 0;
                      v212->__shared_weak_owners_ = 0;
                      v212[1].__vftable = v211;
                      *(_QWORD *)&v377 = v211;
                      *((_QWORD *)&v377 + 1) = v211;
                      v379 = 0;
                      v380 = 0;
                      v378 = v212;
                      v213 = strlen(v191);
                      if (v213 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v214 = v213;
                      if (v213 >= 0x17)
                      {
                        v217 = (v213 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v213 | 7) != 0x17)
                          v217 = v213 | 7;
                        v218 = v217 + 1;
                        v215 = operator new(v217 + 1);
                        *(_QWORD *)&v382 = v214;
                        *((_QWORD *)&v382 + 1) = v218 | 0x8000000000000000;
                        v381 = v215;
                      }
                      else
                      {
                        HIBYTE(v382) = v213;
                        v215 = &v381;
                        if (!v213)
                        {
LABEL_383:
                          *((_BYTE *)v215 + v214) = 0;
                          v219 = v381;
                          v389[0] = v382;
                          *(_QWORD *)((char *)v389 + 7) = *(_QWORD *)((char *)&v382 + 7);
                          v220 = HIBYTE(v382);
                          v221 = operator new(0x38uLL);
                          v221[1] = 0;
                          v221[2] = 0;
                          v221[3] = off_24C9ABC20;
                          *v221 = &off_24C9ABBD0;
                          v222 = v389[0];
                          v221[4] = v219;
                          v221[5] = v222;
                          *(_QWORD *)((char *)v221 + 47) = *(_QWORD *)((char *)v389 + 7);
                          *((_BYTE *)v221 + 55) = v220;
                          v389[0] = 0;
                          *(_QWORD *)((char *)v389 + 7) = 0;
                          v223 = v380;
                          v379 = (char *)(v221 + 3);
                          v380 = (std::__shared_weak_count *)v221;
                          v53 = v335;
                          if (v223)
                          {
                            v224 = (unint64_t *)&v223->__shared_owners_;
                            do
                              v225 = __ldaxr(v224);
                            while (__stlxr(v225 - 1, v224));
                            if (!v225)
                            {
                              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                              std::__shared_weak_count::__release_weak(v223);
                            }
                          }
                          *(_OWORD *)v383 = v377;
                          v226 = v379;
                          *(_QWORD *)&v383[16] = v378;
                          if (v378)
                          {
                            v227 = (unint64_t *)&v378->__shared_owners_;
                            do
                              v228 = __ldxr(v227);
                            while (__stxr(v228 + 1, v227));
                          }
                          v229 = v380;
                          *(_QWORD *)&v384 = v226;
                          *((_QWORD *)&v384 + 1) = v380;
                          if (v380)
                          {
                            v230 = (unint64_t *)&v380->__shared_owners_;
                            do
                              v231 = __ldxr(v230);
                            while (__stxr(v231 + 1, v230));
                            v385 = v226;
                            do
                              v232 = __ldaxr(v230);
                            while (__stlxr(v232 - 1, v230));
                            if (!v232)
                            {
                              ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                              std::__shared_weak_count::__release_weak(v229);
                            }
                          }
                          else
                          {
                            v385 = v226;
                          }
                          v283 = v378;
                          if (v378)
                          {
                            v284 = (unint64_t *)&v378->__shared_owners_;
                            do
                              v285 = __ldaxr(v284);
                            while (__stlxr(v285 - 1, v284));
                            if (!v285)
                            {
                              ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                              std::__shared_weak_count::__release_weak(v283);
                            }
                          }
                          v286 = *(_QWORD *)v383;
                          if (v385[31] >= 0)
                            v287 = v385 + 8;
                          else
                            v287 = (char *)*((_QWORD *)v385 + 1);
                          v288 = _os_log_pack_fill();
                          *(_DWORD *)v288 = 136315138;
                          *(_QWORD *)(v288 + 4) = v287;
                          v289 = operator new();
                          v290 = *(unsigned __int8 *)(v192 + 39);
                          v291 = *(const char **)(v192 + 16);
                          v292 = *(_QWORD *)(v192 + 24);
                          v293 = v384;
                          *(_OWORD *)(v289 + 8) = *(_OWORD *)&v383[8];
                          if ((v290 & 0x80u) != 0)
                            v290 = v292;
                          else
                            v291 = v341;
                          *(_QWORD *)v289 = v286;
                          *(_QWORD *)&v383[8] = 0;
                          *(_QWORD *)&v383[16] = 0;
                          *(_OWORD *)(v289 + 24) = v293;
                          v384 = 0uLL;
                          *(_QWORD *)(v289 + 40) = v291;
                          *(_QWORD *)(v289 + 48) = v290;
                          *(_BYTE *)(v289 + 56) = 2;
                          v381 = 0;
                          *(_QWORD *)&v377 = v289;
                          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v177 + 24) + 40))(*(_QWORD *)(v177 + 24), &v377);
                          v294 = v377;
                          *(_QWORD *)&v377 = 0;
                          v59 = v344;
                          v60 = v342;
                          if (v294)
                          {
                            v295 = *(std::__shared_weak_count **)(v294 + 32);
                            if (v295)
                            {
                              v296 = (unint64_t *)&v295->__shared_owners_;
                              do
                                v297 = __ldaxr(v296);
                              while (__stlxr(v297 - 1, v296));
                              if (!v297)
                              {
                                ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                                std::__shared_weak_count::__release_weak(v295);
                              }
                            }
                            v298 = *(std::__shared_weak_count **)(v294 + 16);
                            if (v298)
                            {
                              v299 = (unint64_t *)&v298->__shared_owners_;
                              do
                                v300 = __ldaxr(v299);
                              while (__stlxr(v300 - 1, v299));
                              if (!v300)
                              {
                                ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                                std::__shared_weak_count::__release_weak(v298);
                              }
                            }
                            MEMORY[0x212BC6398](v294, 0x10F0C40B62ED6C6);
                            v301 = v381;
                            v381 = 0;
                            if (v301)
                            {
                              v302 = (std::__shared_weak_count *)v301[4];
                              if (v302)
                              {
                                v303 = (unint64_t *)&v302->__shared_owners_;
                                do
                                  v304 = __ldaxr(v303);
                                while (__stlxr(v304 - 1, v303));
                                if (!v304)
                                {
                                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                                  std::__shared_weak_count::__release_weak(v302);
                                }
                              }
                              v305 = (std::__shared_weak_count *)v301[2];
                              if (v305)
                              {
                                v306 = (unint64_t *)&v305->__shared_owners_;
                                do
                                  v307 = __ldaxr(v306);
                                while (__stlxr(v307 - 1, v306));
                                if (!v307)
                                {
                                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                                  std::__shared_weak_count::__release_weak(v305);
                                }
                              }
                              MEMORY[0x212BC6398](v301, 0x10F0C40B62ED6C6);
                            }
                          }
                          v308 = (std::__shared_weak_count *)*((_QWORD *)&v384 + 1);
                          if (*((_QWORD *)&v384 + 1))
                          {
                            v309 = (unint64_t *)(*((_QWORD *)&v384 + 1) + 8);
                            do
                              v310 = __ldaxr(v309);
                            while (__stlxr(v310 - 1, v309));
                            if (!v310)
                            {
                              ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                              std::__shared_weak_count::__release_weak(v308);
                            }
                          }
                          v311 = *(std::__shared_weak_count **)&v383[16];
                          if (*(_QWORD *)&v383[16])
                          {
                            v312 = (unint64_t *)(*(_QWORD *)&v383[16] + 8);
                            do
                              v313 = __ldaxr(v312);
                            while (__stlxr(v313 - 1, v312));
                            if (!v313)
                            {
                              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                              std::__shared_weak_count::__release_weak(v311);
                            }
                          }
LABEL_530:
                          if (v175)
                          {
                            v314 = (const char *)&__dst;
                            if (v356 < 0)
                              v314 = (const char *)__dst;
                            sub_20E8C003C((uint64_t)&v345, "%s", v314);
                            sub_20E863570((uint64_t)&v345);
                          }
                          sub_20E863570((uint64_t)&v345);
                          v315 = v353;
                          if (v353)
                          {
                            v316 = (unint64_t *)&v353->__shared_owners_;
                            do
                              v317 = __ldaxr(v316);
                            while (__stlxr(v317 - 1, v316));
                            if (!v317)
                            {
                              ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                              std::__shared_weak_count::__release_weak(v315);
                            }
                          }
                          if (SHIBYTE(v356) < 0)
                            operator delete(__dst);
                          object = (void *)*MEMORY[0x24BEDB7F0];
                          v318 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(void **)((char *)&object + *((_QWORD *)object - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                          *((_QWORD *)&v358 + 1) = v318;
                          *(_QWORD *)&v359 = MEMORY[0x24BEDB848] + 16;
                          if (v368 < 0)
                            operator delete(v366);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](v371);
                          goto LABEL_544;
                        }
                      }
                      memcpy(v215, v191, v214);
                      goto LABEL_383;
                    }
                  }
                  memmove(v206, v193, v194);
                  goto LABEL_362;
                }
              }
              memmove(v199, v197, v198);
              goto LABEL_354;
            }
          }
          memmove(v186, v188, v185);
          goto LABEL_333;
        }
      }
      else
      {
        v184 = (char)__p;
        if ((__p & 0x10) == 0)
          goto LABEL_320;
      }
      v187 = v369;
      if (v369 < v364)
      {
        v369 = v364;
        v187 = v364;
      }
      v188 = v363;
      v185 = v187 - (_QWORD)v363;
      if (v187 - (unint64_t)v363 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_378;
      goto LABEL_326;
    }
  }
LABEL_544:
  if (v53)
    operator delete(v53);
  return (v59 << 8) | (v60 << 16) | v58;
}

void sub_20F3231B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  uint64_t v63;

  if (a63)
  {
    if (a62 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v63 - 192);
  _Unwind_Resume(a1);
}

void sub_20F3231F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *object)
{
  uint64_t v60;

  if (*(_BYTE *)(v60 - 168) && *(char *)(v60 - 169) < 0)
    operator delete(*(void **)(v60 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a45);
  if (a59 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  if (a24)
  {
    operator delete(a24);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F32358C(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;

  v3 = *(_QWORD *)(a1 + 2832);
  v4 = *(_QWORD *)(a1 + 2824);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3 != v4)
  {
    if ((unint64_t)(0x3175B2258D8284CFLL * ((v3 - v4) >> 3)) >> 61)
      sub_20E867F44();
    v5 = a1;
    v6 = (char *)operator new(0x8BAD912C6C142678 * ((v3 - v4) >> 3));
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[0x8BAD912C6C142678 * ((v3 - v4) >> 3)];
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v8 + 424);
      if (!v9 || !*(_QWORD *)(*(_QWORD *)v9 + 64) || !*(_BYTE *)(v5 + 940) && (*(_BYTE *)(v4 + 304) & 0x20) != 0)
        goto LABEL_6;
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v6 < v10)
      {
        *(_QWORD *)v6 = v8;
        v7 = (uint64_t)(v6 + 8);
        goto LABEL_5;
      }
      v11 = v5;
      v12 = *a2;
      v13 = v6 - *a2;
      v14 = v13 >> 3;
      v15 = (v13 >> 3) + 1;
      if (v15 >> 61)
        sub_20E867F44();
      v16 = v10 - (_QWORD)v12;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v15;
      if (v17)
      {
        if (v17 >> 61)
          sub_20E877A38();
        v18 = v17;
        v19 = operator new(8 * v17);
        v17 = v18;
        v20 = &v19[8 * v14];
        *(_QWORD *)v20 = v8;
        v7 = (uint64_t)(v20 + 8);
        v21 = (char *)(v6 - v12);
        if (v6 == v12)
        {
LABEL_28:
          v5 = v11;
          *a2 = v20;
          a2[1] = (char *)v7;
          a2[2] = &v19[8 * v17];
          if (!v6)
            goto LABEL_5;
LABEL_25:
          operator delete(v6);
          goto LABEL_5;
        }
      }
      else
      {
        v19 = 0;
        v20 = (char *)(8 * v14);
        *(_QWORD *)(8 * v14) = v8;
        v7 = 8 * v14 + 8;
        v21 = (char *)(v6 - v12);
        if (v6 == v12)
          goto LABEL_28;
      }
      v22 = (unint64_t)(v21 - 8);
      if (v22 < 0x168)
        break;
      v25 = (v6 - 8 - v12) & 0xFFFFFFFFFFFFFFF8;
      if (&v19[v13 - 8 - v25] > &v19[v13 - 8] || &v6[-v25 - 8] > v6 - 8 || (unint64_t)(v6 - &v19[v13]) < 0x20)
        break;
      v26 = (v22 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v6[-v27];
      v20 -= v27;
      v28 = &v19[8 * v14 - 16];
      v29 = v6 - 16;
      v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      v5 = v11;
      do
      {
        v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 4;
      }
      while (v30);
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
LABEL_24:
      v6 = *a2;
      *a2 = v20;
      a2[1] = (char *)v7;
      a2[2] = &v19[8 * v17];
      if (v6)
        goto LABEL_25;
LABEL_5:
      a2[1] = (char *)v7;
      v6 = (char *)v7;
LABEL_6:
      v4 += 4472;
      if (v4 == v3)
        return;
    }
    v23 = v6;
    v5 = v11;
    do
    {
LABEL_23:
      v24 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *((_QWORD *)v20 - 1) = v24;
      v20 -= 8;
    }
    while (v23 != v12);
    goto LABEL_24;
  }
}

void sub_20F323804(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F323840(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *__p[2];
  __int128 v9;
  int v10;

  if (*(_BYTE *)(a1 + 2499))
  {
    *(_OWORD *)__p = 0u;
    v9 = 0u;
    v10 = 1065353216;
    sub_20F29DCA0((uint64_t *)(a1 + 2824), (uint64_t)__p, a2);
    v2 = (_QWORD *)v9;
    if ((_QWORD)v9)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        sub_20F3122B4((uint64_t)(v2 + 3));
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 2816);
    *(_OWORD *)__p = 0u;
    v9 = 0u;
    v10 = 1065353216;
    sub_20F29D568(v4, (uint64_t)__p, a2);
    v5 = (_QWORD *)v9;
    if ((_QWORD)v9)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        sub_20F3122B4((uint64_t)(v5 + 3));
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
  }
  v7 = __p[0];
  __p[0] = 0;
  if (v7)
    operator delete(v7);
}

void sub_20F3238FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F2E38C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F323910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F2E38C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F323924(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  float64x2_t v14;
  float64x2_t v16;
  int8x16_t v17;
  int64x2_t v18;
  float64x2_t v21;
  __int128 v27;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  unint64_t v56;
  std::string v57;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 2832);
  v4 = *(_QWORD *)(a1 + 2824);
  if (v3 != v4)
  {
    if ((unint64_t)(0x3175B2258D8284CFLL * ((v3 - v4) >> 3)) > 0x1E1E1E1E1E1E1E1)
      sub_20EABADD4();
    v5 = (char *)operator new(0x4686A3F32D568DF8 * ((v3 - v4) >> 3));
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[0x4686A3F32D568DF8 * ((v3 - v4) >> 3)];
    do
    {
      v7 = *(_QWORD *)(v4 + 192);
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 160);
      sub_20FCCBC60(&v56, &v57);
      v8 = sub_20EB07858(*(_QWORD **)(v7 + 8), (uint64_t)&v57);
      v9 = v8;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v57.__r_.__value_.__l.__data_);
        if (v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 160);
          *(_QWORD *)&v16.f64[0] = v9[26];
          v11 = *((int64x2_t *)v9 + 12);
          v12 = *((int64x2_t *)v9 + 14);
          v13 = *((int64x2_t *)v9 + 16);
          v14 = (float64x2_t)vzip1q_s64(v11, v12);
          _Q0 = (float64x2_t)vzip2q_s64(v11, v12);
          *(_QWORD *)&v16.f64[1] = v9[30];
          v17 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(v13, 1), 8uLL);
          v18 = vzip1q_s64(v13, (int64x2_t)_Q0);
          _D5 = *((double *)v9 + 38);
          _Q6 = *((float64x2_t *)v9 + 18);
          v21 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v14, vnegq_f64(_Q6).f64[0]), _Q0, _Q6, 1), v16, _D5, 0);
          *(_QWORD *)&_Q0.f64[0] = v9[33];
          *(_QWORD *)&v27 = vdupq_laneq_s64(v18, 1).u64[0];
          __asm { FMLS            D7, D0, V6.D[1] }
          *((_QWORD *)&v27 + 1) = v17.i64[0];
          _Q3 = (unint64_t)v9[34];
          __asm { FMLS            D7, D2, V5.D[0] }
          *((_QWORD *)&_Q7 + 1) = 1.0;
          v31 = (char *)a2[1];
          v30 = (unint64_t)a2[2];
          if ((unint64_t)v31 < v30)
          {
            *(_QWORD *)v31 = v10;
            *(float64x2_t *)(v31 + 8) = v14;
            *(_OWORD *)(v31 + 24) = v18.u64[0];
            *(_OWORD *)(v31 + 40) = v27;
            *(_OWORD *)(v31 + 56) = v17.u64[1];
            *(float64x2_t *)(v31 + 72) = v16;
            *(_OWORD *)(v31 + 88) = _Q3;
            *(float64x2_t *)(v31 + 104) = v21;
            v6 = v31 + 136;
            *(_OWORD *)(v31 + 120) = _Q7;
          }
          else
          {
            v32 = (char *)*a2;
            v33 = 0xF0F0F0F0F0F0F0F1 * ((v31 - (_BYTE *)*a2) >> 3);
            v34 = v33 + 1;
            if (v33 + 1 > 0x1E1E1E1E1E1E1E1)
              sub_20EABADD4();
            v48 = v18.u64[0];
            v49 = v17.u64[1];
            v50 = v27;
            v51 = _Q3;
            v52 = _Q7;
            v53 = v21;
            v54 = v14;
            v55 = v16;
            v35 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v30 - (_QWORD)v32) >> 3);
            if (2 * v35 > v34)
              v34 = 2 * v35;
            if (v35 >= 0xF0F0F0F0F0F0F0)
              v36 = 0x1E1E1E1E1E1E1E1;
            else
              v36 = v34;
            if (v36 > 0x1E1E1E1E1E1E1E1)
              sub_20E877A38();
            v37 = (char *)operator new(136 * v36);
            v38 = &v37[136 * v33];
            *(_QWORD *)v38 = v10;
            *(_OWORD *)(v38 + 56) = v49;
            *(_OWORD *)(v38 + 40) = v50;
            *(_OWORD *)(v38 + 24) = v48;
            *(float64x2_t *)(v38 + 8) = v54;
            *(float64x2_t *)(v38 + 72) = v55;
            *(_OWORD *)(v38 + 88) = v51;
            *(float64x2_t *)(v38 + 104) = v53;
            *(_OWORD *)(v38 + 120) = v52;
            v39 = v38;
            if (v31 != v32)
            {
              do
              {
                v40 = *((_QWORD *)v31 - 17);
                v31 -= 136;
                *((_QWORD *)v39 - 17) = v40;
                v39 -= 136;
                v41 = *(_OWORD *)(v31 + 8);
                v42 = *(_OWORD *)(v31 + 24);
                v43 = *(_OWORD *)(v31 + 40);
                *(_OWORD *)(v39 + 56) = *(_OWORD *)(v31 + 56);
                *(_OWORD *)(v39 + 40) = v43;
                *(_OWORD *)(v39 + 24) = v42;
                *(_OWORD *)(v39 + 8) = v41;
                v44 = *(_OWORD *)(v31 + 72);
                v45 = *(_OWORD *)(v31 + 88);
                v46 = *(_OWORD *)(v31 + 104);
                *(_OWORD *)(v39 + 120) = *(_OWORD *)(v31 + 120);
                *(_OWORD *)(v39 + 104) = v46;
                *(_OWORD *)(v39 + 88) = v45;
                *(_OWORD *)(v39 + 72) = v44;
              }
              while (v31 != v32);
              v31 = v32;
            }
            v47 = &v37[136 * v36];
            v6 = v38 + 136;
            *a2 = v39;
            a2[1] = v38 + 136;
            a2[2] = v47;
            if (v31)
              operator delete(v31);
          }
          a2[1] = v6;
        }
      }
      else if (v8)
      {
        goto LABEL_11;
      }
      v4 += 4472;
    }
    while (v4 != v3);
  }
}

void sub_20F323C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (!*(_QWORD *)v1)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void sub_20F323C70()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x20F323C50);
}

void sub_20F323C88(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v3;
  float64x2_t *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  float64_t v10;
  int v11;
  int64x2_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  unint64_t v30;
  _QWORD *v31;
  float64x2_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  __int128 v54;
  float64x2_t v55;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 2824);
  v47 = *(_QWORD *)(a1 + 2832);
  if (v47 != v3)
  {
    if ((unint64_t)(0x62EB644B1B05099ELL * ((v47 - v3) >> 3)) > 0x1C71C71C71C71C7)
      sub_20EABADD4();
    v4 = (float64x2_t *)operator new(0xA4686A3F32D568E0 * ((v47 - v3) >> 3));
    *a2 = v4;
    a2[1] = v4;
    a2[2] = &v4[0xFA4686A3F32D568ELL * ((v47 - v3) >> 3)];
    v5 = 1.0;
    while (1)
    {
      v48 = v3;
      v6 = *(_QWORD *)(v3 + 16);
      v7 = **(_QWORD **)(v6 + 424);
      v8 = *(_QWORD **)(v7 + 296);
      v9 = (_QWORD *)(v7 + 304);
      if (v8 != (_QWORD *)(v7 + 304))
        break;
LABEL_4:
      v3 = v48 + 4472;
      if (v48 + 4472 == v47)
        return;
    }
    v10 = *(double *)(v6 + 160);
    while (1)
    {
      v11 = *((_DWORD *)v8 + 8);
      v17.f64[0] = (float64_t)v8[7];
      v12 = *(int64x2_t *)(v8 + 5);
      v13 = *((float64x2_t *)v8 + 4);
      v14 = *((double *)v8 + 13);
      _Q2 = *(int64x2_t *)(v8 + 11);
      v16 = (float64x2_t)vzip1q_s64(v12, (int64x2_t)v13);
      v27 = (float64x2_t)vzip2q_s64(v12, (int64x2_t)v13);
      v17.f64[1] = (float64_t)v8[10];
      v13.f64[0] = (float64_t)v8[16];
      v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, *((double *)v8 + 14)), v27, *((float64x2_t *)v8 + 7), 1), v17, v13.f64[0]);
      _D3 = v8[15];
      __asm { FMLA            D5, D3, V2.D[1] }
      v13.f64[0] = _D5 + v14 * v13.f64[0];
      v25 = vnegq_f64(v18);
      v26 = (float64x2_t)(unint64_t)v8[11];
      *(_QWORD *)&v29.f64[0] = *(_OWORD *)&vnegq_f64(v13);
      v28 = vextq_s8((int8x16_t)v27, (int8x16_t)vdupq_laneq_s64(_Q2, 1), 8uLL);
      *(_QWORD *)&v27.f64[1] = v28.i64[0];
      v29.f64[1] = v5;
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v4 < v30)
      {
        v4->f64[0] = v10;
        LODWORD(v4->f64[1]) = v11;
        v4[1] = v16;
        v4[2] = v26;
        v4[3] = v27;
        v4[4] = (float64x2_t)v28.u64[1];
        v4[5] = v17;
        v4[6] = (float64x2_t)*(unint64_t *)&v14;
        v4[7] = v25;
        v4[8] = v29;
        v4 += 9;
        a2[1] = v4;
        v31 = (_QWORD *)v8[1];
        if (v31)
          goto LABEL_24;
        goto LABEL_26;
      }
      v32 = (float64x2_t *)*a2;
      v33 = 0x8E38E38E38E38E39 * (((char *)v4 - (_BYTE *)*a2) >> 4);
      v34 = v33 + 1;
      if (v33 + 1 > 0x1C71C71C71C71C7)
        sub_20EABADD4();
      v35 = 0x8E38E38E38E38E39 * ((uint64_t)(v30 - (_QWORD)v32) >> 4);
      if (2 * v35 > v34)
        v34 = 2 * v35;
      if (v35 >= 0xE38E38E38E38E3)
        v36 = 0x1C71C71C71C71C7;
      else
        v36 = v34;
      if (v36 > 0x1C71C71C71C71C7)
        sub_20E877A38();
      v49 = (unint64_t)v8[11];
      v50 = v29;
      v51 = v25;
      v52 = v27;
      v53 = v16;
      v54 = *(unint64_t *)&v14;
      v55 = v17;
      v37 = (char *)operator new(144 * v36);
      v38 = &v37[144 * v33];
      *(float64_t *)v38 = v10;
      *((_DWORD *)v38 + 2) = v11;
      *((float64x2_t *)v38 + 3) = v52;
      *((_OWORD *)v38 + 4) = v28.u64[1];
      *((float64x2_t *)v38 + 1) = v53;
      *((_OWORD *)v38 + 2) = v49;
      *((float64x2_t *)v38 + 5) = v55;
      *((_OWORD *)v38 + 6) = v54;
      *((float64x2_t *)v38 + 7) = v51;
      *((float64x2_t *)v38 + 8) = v50;
      if (v4 == v32)
      {
        v32 = v4;
        v4 = (float64x2_t *)(v38 + 144);
        *a2 = v38;
        a2[1] = v38 + 144;
        a2[2] = &v37[144 * v36];
        if (v32)
          goto LABEL_22;
      }
      else
      {
        v39 = &v37[144 * v33];
        do
        {
          *((float64x2_t *)v39 - 9) = v4[-9];
          v40 = v4[-1];
          v42 = v4[-4];
          v41 = v4[-3];
          *((float64x2_t *)v39 - 2) = v4[-2];
          *((float64x2_t *)v39 - 1) = v40;
          *((float64x2_t *)v39 - 4) = v42;
          *((float64x2_t *)v39 - 3) = v41;
          v43 = v4[-8];
          v44 = v4[-7];
          v45 = v4[-5];
          *((float64x2_t *)v39 - 6) = v4[-6];
          *((float64x2_t *)v39 - 5) = v45;
          *((float64x2_t *)v39 - 8) = v43;
          *((float64x2_t *)v39 - 7) = v44;
          v39 -= 144;
          v4 -= 9;
        }
        while (v4 != v32);
        v4 = (float64x2_t *)(v38 + 144);
        *a2 = v39;
        a2[1] = v38 + 144;
        a2[2] = &v37[144 * v36];
        if (v32)
LABEL_22:
          operator delete(v32);
      }
      v5 = 1.0;
      a2[1] = v4;
      v31 = (_QWORD *)v8[1];
      if (v31)
      {
        do
        {
LABEL_24:
          v46 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
        goto LABEL_7;
      }
      do
      {
LABEL_26:
        v46 = (_QWORD *)v8[2];
        _ZF = *v46 == (_QWORD)v8;
        v8 = v46;
      }
      while (!_ZF);
LABEL_7:
      v8 = v46;
      if (v46 == v9)
        goto LABEL_4;
    }
  }
}

void sub_20F323FF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F324014(_QWORD *a1@<X0>, void **a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void **v5;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (char *)a1[357];
  v3 = (char *)a1[356];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = a2;
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20E867F44();
    v7 = operator new(2 * v4);
    *v5 = v7;
    v5[1] = v7;
    v5[2] = &v7[4 * (v4 >> 3)];
    do
    {
      v8 = *(_QWORD *)v3;
      v9 = a1[353];
      v10 = a1[354];
      if (v9 != v10)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v9 + 16);
          if (v11)
          {
            if (*(_QWORD *)(v11 + 160) == v8)
              break;
          }
          v9 += 4472;
          if (v9 == v10)
            goto LABEL_6;
        }
      }
      if (v9 == v10 || v9 == 0)
        goto LABEL_6;
      v13 = (unint64_t)v5[2];
      if ((unint64_t)v7 < v13)
      {
        *(_QWORD *)v7 = v8;
        v7[2] = *(_DWORD *)(v9 + 304);
        v7 += 4;
      }
      else
      {
        v14 = *v5;
        v15 = ((char *)v7 - (_BYTE *)*v5) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          sub_20E867F44();
        v17 = v13 - (_QWORD)v14;
        if (v17 >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18 >> 60)
          sub_20E877A38();
        v19 = (char *)operator new(16 * v18);
        v20 = &v19[16 * v15];
        *(_QWORD *)v20 = v8;
        *((_DWORD *)v20 + 2) = *(_DWORD *)(v9 + 304);
        if (v7 != v14)
        {
          v21 = &v19[16 * v15];
          do
          {
            v22 = v21 - 16;
            *((_OWORD *)v21 - 1) = *((_OWORD *)v7 - 1);
            v7 -= 4;
            v21 -= 16;
          }
          while (v7 != v14);
          v23 = &v19[16 * v18];
          v7 = v20 + 16;
          v5 = a2;
          *a2 = v22;
          a2[1] = v20 + 16;
          a2[2] = v23;
          if (!v14)
            goto LABEL_5;
LABEL_30:
          operator delete(v14);
          goto LABEL_5;
        }
        v24 = &v19[16 * v18];
        v7 = v20 + 16;
        v5 = a2;
        *a2 = v20;
        a2[1] = v20 + 16;
        a2[2] = v24;
        if (v14)
          goto LABEL_30;
      }
LABEL_5:
      v5[1] = v7;
LABEL_6:
      v3 += 8;
    }
    while (v3 != v2);
  }
}

void sub_20F324204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20F324230@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;

  v3 = result[353];
  v4 = result[354];
  v8 = 0uLL;
  v9 = 0;
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v7 = 0uLL;
  }
  else
  {
    v6 = 0x3175B2258D8284CFLL * (v5 >> 3);
    if (v6 >> 62)
      sub_20E867F44();
    *(_QWORD *)&v8 = operator new(0xC5D6C896360A133CLL * (v5 >> 3));
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 4 * v6;
    v11 = &v8;
    do
    {
      v10 = *(_DWORD *)(v3 + 304);
      result = sub_20EA9AB98((uint64_t *)&v11, &v10);
      v3 += 4472;
    }
    while (v3 != v4);
    v7 = v8;
    v5 = v9;
  }
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20F3242F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20F324318@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  char **v12;

  v3 = result[353];
  v4 = result[354];
  v9 = 0uLL;
  v10 = 0;
  v5 = (char *)v4 - (char *)v3;
  if (v4 == v3)
  {
    v8 = 0uLL;
  }
  else
  {
    v6 = 0x3175B2258D8284CFLL * (v5 >> 3);
    if (v6 >> 60)
      sub_20E867F44();
    *(_QWORD *)&v9 = operator new(0x175B2258D8284CF0 * (v5 >> 3));
    *((_QWORD *)&v9 + 1) = v9;
    v10 = v9 + 16 * v6;
    v12 = (char **)&v9;
    do
    {
      v7 = *((unsigned int *)v3 + 76);
      *(_QWORD *)&v11 = *((_QWORD *)v3[2] + 20);
      *((_QWORD *)&v11 + 1) = v7;
      result = sub_20F312A6C(&v12, &v11);
      v3 += 559;
    }
    while (v3 != v4);
    v8 = v9;
    v5 = v10;
  }
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20F3243E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F324408(uint64_t a1, uint64_t **a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string::size_type size;
  char *v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _QWORD *v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t *v68;
  uint64_t *v69;
  _QWORD *v70;
  _BYTE *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  float64x2_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  float64x2_t v101;
  uint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  double v106;
  float64x2_t v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  double v115;
  double v122;
  double v123;
  double v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  void *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  float64x2_t v168;
  float64x2_t *v169;
  void **v170;
  uint64_t **v171;
  int8x16_t v172;
  float64x2_t v173;
  void *__src;
  int v175[2];
  char *v176;
  unint64_t v177;
  std::string __p;

  if (*(_BYTE *)(a1 + 2499))
  {
    v11 = *(double *)(a1 + 992);
    v12 = *(double *)(a1 + 192);
    __src = 0;
    *(_QWORD *)v175 = 0;
    v176 = 0;
    v13 = *(_QWORD *)(a1 + 2856);
    v14 = *(_QWORD *)(a1 + 2848);
    v15 = v13 - v14;
    if (v13 == v14)
    {
      v43 = *(_QWORD *)(a1 + 2808);
      v44 = operator new(8uLL);
      *v44 = v43;
      v17 = v44 + 1;
      __src = v44;
      *(_QWORD *)v175 = v44 + 1;
      v176 = (char *)(v44 + 1);
    }
    else
    {
      if (v15 < 0)
        sub_20E92CED8();
      v16 = operator new(v13 - v14);
      __src = v16;
      *(_QWORD *)v175 = v16;
      v176 = (char *)&v16[v15 >> 3];
      *v16 = *(_QWORD *)(a1 + 2808);
      v17 = v16 + 1;
    }
    *(_QWORD *)v175 = v17;
    sub_20F24E76C(*(_QWORD *)(a1 + 2816), &__p);
    size = __p.__r_.__value_.__l.__size_;
    v45 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
    v169 = a3;
    if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      v171 = a2;
      v47 = *(char **)v175;
      while (v47 < v176)
      {
        *(_QWORD *)v47 = *v45;
        v48 = (uint64_t)(v47 + 8);
LABEL_41:
        *(_QWORD *)v175 = v48;
        ++v45;
        v47 = (char *)v48;
        if (v45 == (_QWORD *)size)
        {
          v45 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
          a3 = v169;
          a2 = v171;
          goto LABEL_70;
        }
      }
      v49 = (char *)__src;
      v50 = v47 - (_BYTE *)__src;
      v51 = (v47 - (_BYTE *)__src) >> 3;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 61)
        sub_20E92CED8();
      v53 = v176 - (_BYTE *)__src;
      if ((v176 - (_BYTE *)__src) >> 2 > v52)
        v52 = v53 >> 2;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
      {
        if (v54 >> 61)
          sub_20E877A38();
        v55 = operator new(8 * v54);
        v56 = &v55[8 * v51];
        *v56 = *v45;
        v48 = (uint64_t)(v56 + 1);
        v57 = v47 - v49;
        if (v47 == v49)
          goto LABEL_57;
      }
      else
      {
        v55 = 0;
        v56 = (_QWORD *)(8 * v51);
        *(_QWORD *)(8 * v51) = *v45;
        v48 = 8 * v51 + 8;
        v57 = v47 - v49;
        if (v47 == v49)
          goto LABEL_57;
      }
      v58 = v57 - 8;
      if (v58 >= 0x168)
      {
        v61 = (v47 - 8 - v49) & 0xFFFFFFFFFFFFFFF8;
        if (&v55[v50 - 8 - v61] > &v55[v50 - 8])
        {
          v59 = v47;
        }
        else if (&v47[-v61 - 8] > v47 - 8)
        {
          v59 = v47;
        }
        else if ((unint64_t)(v47 - v55 - v50) >= 0x20)
        {
          v62 = (v58 >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = &v47[-v63];
          v56 = (_QWORD *)((char *)v56 - v63);
          v64 = &v55[8 * v51 - 16];
          v65 = v47 - 16;
          v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *(_OWORD *)v65;
            *(v64 - 1) = *((_OWORD *)v65 - 1);
            *v64 = v67;
            v64 -= 2;
            v65 -= 32;
            v66 -= 4;
          }
          while (v66);
          if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            __src = v56;
            *(_QWORD *)v175 = v48;
            v176 = &v55[8 * v54];
            if (v49)
              operator delete(v49);
            goto LABEL_41;
          }
        }
        else
        {
          v59 = v47;
        }
      }
      else
      {
        v59 = v47;
      }
      do
      {
        v60 = *((_QWORD *)v59 - 1);
        v59 -= 8;
        *--v56 = v60;
      }
      while (v59 != v49);
      goto LABEL_57;
    }
LABEL_70:
    if (v45)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
      operator delete(v45);
    }
    v68 = *a2;
    v69 = a2[1];
    if (*a2 != v69)
    {
      v70 = *(_QWORD **)v175;
      while (1)
      {
        v71 = __src;
        v72 = v70;
        if (__src != v70)
        {
          v72 = __src;
          while (*v72 != *v68)
          {
            if (++v72 == v70)
            {
              v72 = v70;
              break;
            }
          }
        }
        if (v72 != v70)
          goto LABEL_75;
        v73 = *v68;
        v74 = *(_QWORD *)(a1 + 2824);
        v75 = *(_QWORD *)(a1 + 2832);
        if (v74 != v75)
        {
          while (1)
          {
            v76 = *(_QWORD *)(v74 + 16);
            if (v76)
            {
              if (*(_QWORD *)(v76 + 160) == v73)
                break;
            }
            v74 += 4472;
            if (v74 == v75)
              goto LABEL_75;
          }
        }
        if (v74 == v75 || !v74)
          goto LABEL_75;
        if (v70 >= (_QWORD *)v176)
          break;
        *v70 = v73;
        v77 = (uint64_t)(v70 + 1);
LABEL_107:
        *(_QWORD *)v175 = v77;
        v70 = (_QWORD *)v77;
LABEL_75:
        v68 += 2;
        if (v68 == v69)
          goto LABEL_118;
      }
      v78 = (char *)v70 - (_BYTE *)__src;
      v79 = ((char *)v70 - (_BYTE *)__src) >> 3;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61)
        sub_20E92CED8();
      v81 = v176 - (_BYTE *)__src;
      if ((v176 - (_BYTE *)__src) >> 2 > v80)
        v80 = v81 >> 2;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
        v82 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v82 = v80;
      if (v82)
      {
        if (v82 >> 61)
          sub_20E877A38();
        v83 = operator new(8 * v82);
        v84 = (uint64_t *)&v83[8 * v79];
        *v84 = *v68;
        v77 = (uint64_t)(v84 + 1);
        if (v71 == (_BYTE *)v70)
          goto LABEL_104;
      }
      else
      {
        v83 = 0;
        v84 = (uint64_t *)(8 * v79);
        *(_QWORD *)(8 * v79) = v73;
        v77 = 8 * v79 + 8;
        if (v71 == (_BYTE *)v70)
          goto LABEL_104;
      }
      if ((unint64_t)(v78 - 8) >= 0x168)
      {
        v87 = ((char *)(v70 - 1) - v71) & 0xFFFFFFFFFFFFFFF8;
        if (&v83[v78 - 8 - v87] > &v83[v78 - 8])
        {
          v85 = v70;
        }
        else if ((_QWORD *)((char *)v70 - v87 - 8) > v70 - 1)
        {
          v85 = v70;
        }
        else if ((unint64_t)(v71 - v83) >= 0x20)
        {
          v88 = ((unint64_t)(v78 - 8) >> 3) + 1;
          v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
          v85 = &v70[v89 / 0xFFFFFFFFFFFFFFF8];
          v84 = (uint64_t *)((char *)v84 - v89);
          v90 = &v83[8 * v79 - 16];
          v91 = (__int128 *)(v70 - 2);
          v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v93 = *v91;
            *(v90 - 1) = *(v91 - 1);
            *v90 = v93;
            v90 -= 2;
            v91 -= 2;
            v92 -= 4;
          }
          while (v92);
          if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_104;
        }
        else
        {
          v85 = v70;
        }
      }
      else
      {
        v85 = v70;
      }
      do
      {
        v86 = *--v85;
        *--v84 = v86;
      }
      while (v85 != (_QWORD *)v71);
LABEL_104:
      __src = v84;
      *(_QWORD *)v175 = v77;
      v176 = &v83[8 * v82];
      if (v71)
        operator delete(v71);
      a3 = v169;
      goto LABEL_107;
    }
LABEL_118:
    v94 = *(_QWORD *)(*(_QWORD *)(a1 + 2816) + 192);
    sub_20FCCBC60((unint64_t *)v94, &__p);
    v95 = sub_20EB07858(*(_QWORD **)(v94 + 8), (uint64_t)&__p);
    v97 = v95;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v97)
      {
LABEL_120:
        v98 = *(_QWORD *)(a1 + 2816);
        v99 = *(_QWORD *)(v98 + 192);
        v177 = *(_QWORD *)(*(_QWORD *)(v98 + 16) + 160);
        sub_20FCCBC60(&v177, &__p);
        v100 = sub_20EB07858(*(_QWORD **)(v99 + 8), (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v102 = v100 + 5;
        if (!v100)
          v102 = 0;
        *(_QWORD *)&v101.f64[0] = v102[33];
        v168 = v101;
        v172 = *(int8x16_t *)(v102 + 31);
        v103 = vextq_s8(v172, v172, 8uLL).u64[0];
        v104 = *(_QWORD **)(a1 + 2824);
        v105 = *(_QWORD **)(a1 + 2832);
        if (v104 == v105)
          goto LABEL_168;
LABEL_128:
        v106 = v11 * v12 * (v11 * v12);
        *(_QWORD *)&v107.f64[0] = v172.i64[0];
        *(_QWORD *)&v107.f64[1] = v103;
        v173 = v107;
        while (1)
        {
          v108 = (char *)__src;
          if (__src != *(void **)v175)
          {
            while (*(_QWORD *)v108 != *(_QWORD *)(v104[2] + 160))
            {
              v108 += 8;
              if (v108 == *(char **)v175)
              {
                v108 = *(char **)v175;
                break;
              }
            }
          }
          if (v108 != *(char **)v175)
            goto LABEL_130;
          v109 = v104[24];
          v177 = *(_QWORD *)(v104[2] + 160);
          sub_20FCCBC60(&v177, &__p);
          v110 = sub_20EB07858(*(_QWORD **)(v109 + 8), (uint64_t)&__p);
          v113 = (float64x2_t *)v110;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v113)
              goto LABEL_130;
          }
          else if (!v110)
          {
            goto LABEL_130;
          }
          v112.f64[0] = v113[19].f64[0];
          v114 = v113[18];
          v111.f64[0] = a3[1].f64[0];
          *(_QWORD *)&v115 = *(_OWORD *)&vsubq_f64(v112, v111);
          _D5 = vsubq_f64(v114, *a3).f64[1];
          __asm { FMLA            D0, D5, V3.D[1] }
          v122 = vmlad_n_f64(_D0, v115, v115);
          if (v97)
          {
            *(_QWORD *)&v114.f64[1] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
            *(_QWORD *)&v123 = *(_OWORD *)&vsubq_f64(v112, v168);
            _D4 = vsubq_f64(v114, v173).f64[1];
            __asm { FMLA            D3, D4, V2.D[1] }
            v126 = vmlad_n_f64(_D3, v123, v123);
            if (v126 < v122)
              v122 = v126;
          }
          if (v122 < v106)
          {
            v127 = *(_QWORD *)(v104[2] + 160);
            v128 = *(char **)v175;
            if (*(_QWORD *)v175 < (unint64_t)v176)
            {
              **(_QWORD **)v175 = v127;
              v129 = (uint64_t)(v128 + 8);
LABEL_167:
              *(_QWORD *)v175 = v129;
              goto LABEL_130;
            }
            v130 = v97;
            v131 = (char *)__src;
            v132 = *(_QWORD *)v175 - (_QWORD)__src;
            v133 = (uint64_t)(*(_QWORD *)v175 - (_QWORD)__src) >> 3;
            v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 61)
              sub_20E92CED8();
            v135 = v176 - (_BYTE *)__src;
            if ((v176 - (_BYTE *)__src) >> 2 > v134)
              v134 = v135 >> 2;
            if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8)
              v136 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v136 = v134;
            if (v136)
            {
              if (v136 >> 61)
                sub_20E877A38();
              v137 = v136;
              v138 = (char *)operator new(8 * v136);
              v136 = v137;
              v139 = &v138[8 * v133];
              *(_QWORD *)v139 = v127;
              v129 = (uint64_t)(v139 + 8);
              v140 = v128 - v131;
              if (v128 != v131)
              {
LABEL_155:
                v141 = v140 - 8;
                if (v141 < 0x58)
                {
                  v97 = v130;
                  goto LABEL_163;
                }
                v142 = v128 - v138 - v132;
                v97 = v130;
                if (v142 < 0x20)
                  goto LABEL_208;
                v143 = (v141 >> 3) + 1;
                v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
                v145 = &v128[-v144];
                v139 -= v144;
                v146 = &v138[8 * v133 - 16];
                v147 = v128 - 16;
                v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v149 = *(_OWORD *)v147;
                  *((_OWORD *)v146 - 1) = *((_OWORD *)v147 - 1);
                  *(_OWORD *)v146 = v149;
                  v146 -= 32;
                  v147 -= 32;
                  v148 -= 4;
                }
                while (v148);
                v128 = v145;
                if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_208:
                  do
                  {
LABEL_163:
                    v150 = *((_QWORD *)v128 - 1);
                    v128 -= 8;
                    *((_QWORD *)v139 - 1) = v150;
                    v139 -= 8;
                  }
                  while (v128 != v131);
                }
LABEL_164:
                __src = v139;
                *(_QWORD *)v175 = v129;
                v176 = &v138[8 * v136];
                if (v131)
                  operator delete(v131);
                a3 = v169;
                goto LABEL_167;
              }
            }
            else
            {
              v138 = 0;
              v139 = (char *)(8 * v133);
              *(_QWORD *)(8 * v133) = v127;
              v129 = 8 * v133 + 8;
              v140 = v128 - v131;
              if (v128 != v131)
                goto LABEL_155;
            }
            v97 = v130;
            goto LABEL_164;
          }
          v104[449] = 0;
          v104[448] = 0;
          v104[450] = 0;
LABEL_130:
          v104 += 559;
          if (v104 == v105)
            goto LABEL_168;
        }
      }
    }
    else if (v95)
    {
      goto LABEL_120;
    }
    v172.i64[0] = 0;
    v103 = 0;
    v96.f64[0] = 0.0;
    v168 = v96;
    v104 = *(_QWORD **)(a1 + 2824);
    v105 = *(_QWORD **)(a1 + 2832);
    if (v104 == v105)
    {
LABEL_168:
      v151 = __src;
      if ((void **)(a1 + 2848) != &__src)
      {
        sub_20E92CD94((_QWORD *)(a1 + 2848), (char *)__src, *(char **)v175, (uint64_t)(*(_QWORD *)v175 - (_QWORD)__src) >> 3);
        v151 = __src;
      }
      if (v151)
      {
        *(_QWORD *)v175 = v151;
        operator delete(v151);
      }
      v21 = *(_QWORD *)(a1 + 2856);
LABEL_173:
      v152 = *(char **)(a1 + 2848);
      v153 = *(char **)(a1 + 2832);
      v154 = *(char **)(a1 + 2824);
      if (v152 != (char *)v21)
        goto LABEL_174;
LABEL_184:
      v155 = 0;
      goto LABEL_185;
    }
    goto LABEL_128;
  }
  v18 = *(char **)(a1 + 2848);
  *(_QWORD *)(a1 + 2856) = v18;
  v19 = *(_QWORD *)(a1 + 2824);
  v20 = *(_QWORD *)(a1 + 2832);
  if (v19 != v20)
  {
    v170 = (void **)(a1 + 2848);
    while (1)
    {
      while (1)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 160);
        v23 = *(_QWORD *)(a1 + 2864);
        if ((unint64_t)v18 >= v23)
          break;
        *(_QWORD *)v18 = v22;
        v18 += 8;
        v21 = (uint64_t)v18;
        *(_QWORD *)(a1 + 2856) = v18;
        v19 += 4472;
        if (v19 == v20)
          goto LABEL_173;
      }
      v24 = (char *)*v170;
      v25 = v18 - (_BYTE *)*v170;
      v26 = v25 >> 3;
      v27 = (v25 >> 3) + 1;
      if (v27 >> 61)
        sub_20E92CED8();
      v28 = v23 - (_QWORD)v24;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 61)
          sub_20E877A38();
        v30 = operator new(8 * v29);
        v31 = &v30[8 * v26];
        *v31 = v22;
        v21 = (uint64_t)(v31 + 1);
        v32 = v18 - v24;
        if (v18 == v24)
          goto LABEL_23;
      }
      else
      {
        v30 = 0;
        v31 = (_QWORD *)(8 * v26);
        *(_QWORD *)(8 * v26) = v22;
        v21 = 8 * v26 + 8;
        v32 = v18 - v24;
        if (v18 == v24)
          goto LABEL_23;
      }
      v33 = v32 - 8;
      if (v33 >= 0x168)
      {
        v36 = (v18 - 8 - v24) & 0xFFFFFFFFFFFFFFF8;
        if (&v30[v25 - 8 - v36] > &v30[v25 - 8])
        {
          v34 = v18;
        }
        else if (&v18[-v36 - 8] > v18 - 8)
        {
          v34 = v18;
        }
        else if ((unint64_t)(v18 - v30 - v25) >= 0x20)
        {
          v37 = (v33 >> 3) + 1;
          v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v34 = &v18[-v38];
          v31 = (_QWORD *)((char *)v31 - v38);
          v39 = &v30[8 * v26 - 16];
          v40 = v18 - 16;
          v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 32;
            v41 -= 4;
          }
          while (v41);
          if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_23;
        }
        else
        {
          v34 = v18;
        }
      }
      else
      {
        v34 = v18;
      }
      do
      {
        v35 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *--v31 = v35;
      }
      while (v34 != v24);
LABEL_23:
      *(_QWORD *)(a1 + 2848) = v31;
      *(_QWORD *)(a1 + 2856) = v21;
      *(_QWORD *)(a1 + 2864) = &v30[8 * v29];
      if (v24)
        operator delete(v24);
      *(_QWORD *)(a1 + 2856) = v21;
      v19 += 4472;
      v18 = (char *)v21;
      if (v19 == v20)
        goto LABEL_173;
    }
  }
  v21 = (uint64_t)v18;
  v152 = *(char **)(a1 + 2848);
  v153 = *(char **)(a1 + 2832);
  v154 = *(char **)(a1 + 2824);
  if (v152 == v18)
    goto LABEL_184;
LABEL_174:
  v155 = 0;
  v156 = v152;
  do
  {
    if (v154 != v153)
    {
      v157 = v154;
      while (1)
      {
        v158 = *((_QWORD *)v157 + 2);
        if (v158)
        {
          if (*(_QWORD *)(v158 + 160) == *(_QWORD *)v156)
            break;
        }
        v157 += 4472;
        if (v157 == v153)
          goto LABEL_175;
      }
      if (v157 != v153)
        v155 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v157 + 2) + 424) + 64)
             + v155
             - ((uint64_t)(*((_QWORD *)v157 + 5) - *((_QWORD *)v157 + 4)) >> 4);
    }
LABEL_175:
    v156 += 8;
  }
  while (v156 != (char *)v21);
LABEL_185:
  if (v154 == v153)
  {
    v160 = 0;
  }
  else
  {
    v159 = v153 - v154 - 4472;
    if (v159 >> 3 >= 0x22F)
    {
      v162 = 0;
      v163 = 0;
      v164 = v159 / 0x1178 + 1;
      v161 = &v154[4472 * (v164 & 0x1FFFFFFFFFFFFELL)];
      v165 = v164 & 0x1FFFFFFFFFFFFELL;
      v166 = v154;
      do
      {
        a7 = *((_QWORD *)v166 + 4);
        a8 = *((_QWORD *)v166 + 563);
        a6 = *((_QWORD *)v166 + 5) - a7;
        v162 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v166 + 2) + 424) + 64) - (a6 >> 4);
        v163 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v166 + 561) + 424) + 64)
              - ((*((_QWORD *)v166 + 564) - a8) >> 4);
        v166 += 8944;
        v165 -= 2;
      }
      while (v165);
      v160 = v163 + v162;
      if (v164 == (v164 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_193;
    }
    else
    {
      v160 = 0;
      v161 = v154;
    }
    do
    {
      v160 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v161 + 2) + 424) + 64)
            - ((uint64_t)(*((_QWORD *)v161 + 5) - *((_QWORD *)v161 + 4)) >> 4);
      v161 += 4472;
    }
    while (v161 != v153);
  }
LABEL_193:
  if (*(_BYTE *)(a1 + 3016))
    v167 = *(_QWORD *)(a1 + 3008);
  else
    v167 = 0;
  sub_20F443008((v21 - (uint64_t)v152) >> 3, 0x3175B2258D8284CFLL * ((v153 - v154) >> 3), v155, v160, v167, a6, a7, a8);
}

void sub_20F325040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F3250B8(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  double *v16;
  int64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  double *v25;
  uint64_t v26;
  __int128 v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 2832);
  v4 = *(_QWORD *)(a1 + 2824);
  if (v3 != v4)
  {
    if ((unint64_t)(0x3175B2258D8284CFLL * ((v3 - v4) >> 3)) >> 61)
      sub_20E867F44();
    v5 = (double *)operator new(0x8BAD912C6C142678 * ((v3 - v4) >> 3));
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[0xF175B2258D8284CFLL * ((v3 - v4) >> 3)];
    while (1)
    {
      v7 = *(double *)(v4 + 4464);
      if (v7 < 0.0)
        goto LABEL_6;
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v8)
        break;
      *v5 = v7;
      v6 = (uint64_t)(v5 + 1);
LABEL_5:
      a2[1] = (double *)v6;
      v5 = (double *)v6;
LABEL_6:
      v4 += 4472;
      if (v4 == v3)
        return;
    }
    v9 = *a2;
    v10 = (char *)v5 - (char *)*a2;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20E867F44();
    v13 = v8 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
      v16 = (double *)&v15[8 * v11];
      *v16 = v7;
      v6 = (uint64_t)(v16 + 1);
      v17 = (char *)v5 - (char *)v9;
      if (v5 == v9)
        goto LABEL_23;
    }
    else
    {
      v15 = 0;
      v16 = (double *)(8 * v11);
      *(double *)(8 * v11) = v7;
      v6 = 8 * v11 + 8;
      v17 = (char *)v5 - (char *)v9;
      if (v5 == v9)
        goto LABEL_23;
    }
    v18 = v17 - 8;
    if (v18 >= 0x168)
    {
      v21 = ((char *)(v5 - 1) - (char *)v9) & 0xFFFFFFFFFFFFFFF8;
      if (&v15[v10 - 8 - v21] > &v15[v10 - 8])
      {
        v19 = v5;
      }
      else if ((double *)((char *)v5 - v21 - 8) > v5 - 1)
      {
        v19 = v5;
      }
      else if ((unint64_t)((char *)v5 - &v15[v10]) >= 0x20)
      {
        v22 = (v18 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v5[v23 / 0xFFFFFFFFFFFFFFF8];
        v16 = (double *)((char *)v16 - v23);
        v24 = &v15[8 * v11 - 16];
        v25 = v5 - 2;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 4;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_23;
      }
      else
      {
        v19 = v5;
      }
    }
    else
    {
      v19 = v5;
    }
    do
    {
      v20 = *((_QWORD *)v19-- - 1);
      *((_QWORD *)v16-- - 1) = v20;
    }
    while (v19 != v9);
LABEL_23:
    *a2 = v16;
    a2[1] = (double *)v6;
    a2[2] = (double *)&v15[8 * v14];
    if (v9)
      operator delete(v9);
    goto LABEL_5;
  }
}

void sub_20F325300(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F325324(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  kdebug_trace();
  v2 = *(_QWORD *)(a1 + 2824);
  for (i = *(_QWORD *)(a1 + 2832); v2 != i; v2 += 4472)
    sub_20F25F55C(v2);
  return kdebug_trace();
}

void sub_20F3253CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3253E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *__p;

  kdebug_trace();
  a3[1] = *a3;
  __p = 0;
  v7 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6 - *(_QWORD *)a2;
  if (v6 == *(_QWORD *)a2)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (uint64_t *)operator new(v6 - *(_QWORD *)a2);
    v10 = &v9[2 * (v8 >> 4)];
    __p = v9;
    memcpy(v9, v7, v8 - 4);
  }
  v11 = 126 - 2 * __clz(((char *)v10 - (char *)v9) >> 4);
  if (v10 == v9)
    v12 = 0;
  else
    v12 = v11;
  sub_20F33F240((unint64_t)v9, v10, v12, 1);
  if (v10 == v9)
    goto LABEL_34;
  v13 = 0;
  v14 = 0;
  v15 = -1;
  do
  {
    if (!v14)
      goto LABEL_23;
    v16 = v14;
    v17 = v13;
    if (*v9 == v15)
    {
      ++v13;
      goto LABEL_11;
    }
    if (!v13)
    {
LABEL_23:
      v13 = 1;
LABEL_24:
      v14 = v9;
      v15 = *v9;
      goto LABEL_11;
    }
    v18 = *(_QWORD **)(a1 + 2824);
    v19 = *(_QWORD **)(a1 + 2832);
    if (v18 != v19)
    {
      while (1)
      {
        v20 = v18[2];
        if (v20)
        {
          if (*(_QWORD *)(v20 + 160) == v15)
            break;
        }
        v18 += 559;
        if (v18 == v19)
          goto LABEL_23;
      }
    }
    v13 = 1;
    if (v18 == v19)
      goto LABEL_24;
    v14 = v9;
    v15 = *v9;
    if (v18)
    {
      sub_20F25F794(v18, v16, v17, a3);
      v15 = *v9;
      v13 = 1;
      v14 = v9;
    }
LABEL_11:
    v9 += 2;
  }
  while (v9 != v10);
  if (v13)
  {
    v21 = *(_QWORD **)(a1 + 2824);
    v22 = *(_QWORD **)(a1 + 2832);
    if (v21 != v22)
    {
      while (1)
      {
        v23 = v21[2];
        if (v23)
        {
          if (*(_QWORD *)(v23 + 160) == v15)
            break;
        }
        v21 += 559;
        if (v21 == v22)
          goto LABEL_34;
      }
    }
    if (v21 != v22 && v21)
      sub_20F25F794(v21, v14, v13, a3);
  }
LABEL_34:
  if (__p)
    operator delete(__p);
  return kdebug_trace();
}

void sub_20F325614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_20E8E69C4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20F325654(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (*(_BYTE *)(a1 + 2499))
  {
    v2 = *a2;
    v3 = *(_QWORD *)(a1 + 2824);
    v4 = *(_QWORD *)(a1 + 2832);
    if (v3 != v4)
    {
      while (1)
      {
        v5 = *(_QWORD *)(v3 + 16);
        if (v5)
        {
          if (*(_QWORD *)(v5 + 160) == v2)
            break;
        }
        v3 += 4472;
        if (v3 == v4)
          return 0;
      }
    }
    if (v3 != v4 && v3 != 0)
    {
      v7 = *(_QWORD **)(*(_QWORD *)(v3 + 16) + 424);
      v8 = (uint64_t *)(*v7 + 56);
      v9 = *v8;
      if (*v8)
      {
        v10 = *((_DWORD *)a2 + 2);
        v11 = *v7 + 56;
        do
        {
          v12 = *(_QWORD *)(v9 + 32);
          if (v12 < v2)
          {
            v9 += 8;
          }
          else if (v12 == v2)
          {
            if (*(_DWORD *)(v9 + 40) < v10)
              v9 += 8;
            else
              v11 = v9;
          }
          else
          {
            v11 = v9;
          }
          v9 = *(_QWORD *)v9;
        }
        while (v9);
        if ((uint64_t *)v11 != v8)
        {
          v20 = *(_QWORD *)(v11 + 32);
          if (v2 >= v20 && (v2 != v20 || *(_DWORD *)(v11 + 40) <= v10))
            return *(_QWORD *)(v11 + 48);
        }
      }
    }
    return 0;
  }
  v13 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 2816) + 16) + 424);
  v14 = (uint64_t *)(*v13 + 56);
  v15 = *v14;
  if (!*v14)
    return 0;
  v16 = *a2;
  v17 = *((_DWORD *)a2 + 2);
  v11 = *v13 + 56;
  do
  {
    v18 = *(_QWORD *)(v15 + 32);
    if (v18 < v16)
    {
      v15 += 8;
    }
    else if (v18 == v16)
    {
      if (*(_DWORD *)(v15 + 40) < v17)
        v15 += 8;
      else
        v11 = v15;
    }
    else
    {
      v11 = v15;
    }
    v15 = *(_QWORD *)v15;
  }
  while (v15);
  if ((uint64_t *)v11 == v14)
    return 0;
  v19 = *(_QWORD *)(v11 + 32);
  if (v16 < v19 || v16 == v19 && *(_DWORD *)(v11 + 40) > v17)
    return 0;
  return *(_QWORD *)(v11 + 48);
}

void sub_20F3257D0(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  _QWORD *v17;
  _QWORD *v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  __n128 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __n128 *v32;
  __n128 *v33;
  uint64_t v34;
  unint64_t *v35;
  double v36;
  unint64_t *v37;
  __int128 *v38;
  void *v39;
  int64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  __n128 v44;
  int64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *i;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t *v59;
  __int128 v60;
  uint64_t *v61;
  uint64_t *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  int v72;
  void *v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int32x4_t *v87;
  unint64_t v88;
  __int32 v89;
  __int32 *v90;
  uint64_t v91;
  int32x4_t v92;
  int32x4_t *v93;
  uint64_t v94;
  int32x4_t v95;
  int32x4_t v96;
  __int32 *v97;
  uint64_t v98;
  int32x4_t *v99;
  unint64_t v100;
  __int32 v101;
  __int32 *v102;
  uint64_t v103;
  int32x4_t v104;
  int32x4_t *v105;
  uint64_t v106;
  int32x4_t v107;
  int32x4_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  int v124;
  __int128 v125;
  __int128 v126;
  char *v127;
  uint64_t *v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 v132;
  char *v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  __int128 v142;
  char *v143;
  __int128 v144;
  __int128 v145;
  char *v146;
  char *v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  __int128 *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  __int128 *v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  int v161;
  __int128 v162;
  __int128 *v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  int v168;
  __int128 v169;
  uint64_t v170;
  int64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  int64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t *v199;
  _DWORD *v200;
  __int128 v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  __int128 v215;
  std::__shared_weak_count *v216;
  unint64_t *p_shared_owners;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  int64_t v222;
  int64_t v223;
  __int128 v224;
  uint64_t v225;
  __int128 *v226;
  __int128 *v227;
  unsigned int v228;
  __int128 *v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  BOOL v243;
  _OWORD *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  unint64_t v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t j;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  char *v258;
  _QWORD **v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t *v263;
  uint64_t v264;
  unint64_t v266;
  char **v267;
  int v268;
  uint64_t v269;
  int8x8_t *v270;
  unsigned int *v271;
  uint64_t v272;
  uint64_t v273;
  void **v274;
  unsigned int v275;
  uint64_t *v276;
  int v277;
  _QWORD *v278;
  __int128 v279;
  void *__p;
  uint64_t v281;
  __n128 *v282;
  int v283;
  void *v284;
  _BYTE *v285;
  void *v286;
  void *v287;
  __n128 *v288;
  _OWORD v289[4];
  uint64_t v290;
  __n128 v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  char v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;

  v303 = *MEMORY[0x24BDAC8D0];
  v5 = (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (-286331153 * v5);
  *a3 = 0;
  if ((_DWORD)v6)
  {
    v7 = (char *)operator new(16 * v6);
    v8 = 0;
    *a3 = v7;
    a3[1] = v7;
    a3[2] = &v7[16 * v6];
    v274 = (void **)(a1 + 3336);
    v276 = (uint64_t *)(a1 + 3368);
    v278 = (_QWORD *)a1;
    v267 = a3;
    v264 = v6;
    do
    {
      v9 = *(_QWORD *)(a2 + 16);
      v272 = v8;
      v268 = *(unsigned __int8 *)(a2 + 96);
      v269 = *(unsigned int *)(a1 + 80);
      v270 = *(int8x8_t **)a2;
      v271 = (unsigned int *)(v9 + 120 * v8);
      v10 = sub_20FCBA6DC(*(int8x8_t **)a2, *v271, v271[1]);
      if (!v11
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 3479, (uint64_t)"current_frame", 13, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v12 = v9 + 120 * v272;
      v289[0] = *(_OWORD *)(v12 + 24);
      v13 = *(_OWORD *)(v12 + 40);
      v14 = *(_OWORD *)(v12 + 56);
      v15 = *(_OWORD *)(v12 + 72);
      v290 = *(_QWORD *)(v12 + 88);
      v289[2] = v14;
      v289[3] = v15;
      v289[1] = v13;
      v16 = *(__n128 *)(v12 + 96);
      v292 = *(_QWORD *)(v12 + 112);
      v291 = v16;
      v286 = 0;
      v287 = 0;
      v288 = 0;
      v17 = *(_QWORD **)(a1 + 2848);
      v18 = *(_QWORD **)(a1 + 2856);
      if (v17 != v18)
      {
        v19 = 0;
        do
        {
          v21 = *(_QWORD *)(a1 + 2824);
          v22 = *(_QWORD *)(a1 + 2832);
          if (v21 != v22)
          {
            while (1)
            {
              v23 = *(_QWORD *)(v21 + 16);
              if (v23)
              {
                if (*(_QWORD *)(v23 + 160) == *v17)
                  break;
              }
              v21 += 4472;
              if (v21 == v22)
                goto LABEL_11;
            }
          }
          if (v21 != v22 && v21 != 0)
          {
            v25 = **(_QWORD **)(*(_QWORD *)(v21 + 16) + 424);
            if (v19 < v288)
            {
              v19->n128_u64[0] = v25;
              v19->n128_u8[8] = 1;
              v20 = v19 + 1;
            }
            else
            {
              v26 = (__n128 *)v286;
              v27 = ((char *)v19 - (_BYTE *)v286) >> 4;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 60)
                sub_20E867F44();
              v29 = (char *)v288 - (_BYTE *)v286;
              if (((char *)v288 - (_BYTE *)v286) >> 3 > v28)
                v28 = v29 >> 3;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
                v30 = 0xFFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                if (v30 >> 60)
                  sub_20E877A38();
                v31 = (char *)operator new(16 * v30);
              }
              else
              {
                v31 = 0;
              }
              v32 = (__n128 *)&v31[16 * v27];
              v32->n128_u64[0] = v25;
              v32->n128_u8[8] = 1;
              v33 = v32;
              if (v19 != v26)
              {
                do
                {
                  v16 = v19[-1];
                  v33[-1] = v16;
                  --v33;
                  --v19;
                }
                while (v19 != v26);
                v19 = v26;
              }
              v20 = v32 + 1;
              v286 = v33;
              v288 = (__n128 *)&v31[16 * v30];
              if (v19)
                operator delete(v19);
            }
            v287 = v20;
            v19 = v20;
            a1 = (uint64_t)v278;
          }
LABEL_11:
          ++v17;
        }
        while (v17 != v18);
      }
      v34 = v9 + 120 * v272;
      v36 = *(double *)(v34 + 8);
      v35 = (unint64_t *)(v34 + 8);
      v16.n128_f64[0] = v36;
      if (v36 <= 0.0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 3491, (uint64_t)"query_camera_info.default_lens_minimum_half_fov_deg > 0.", 56, (uint64_t)"FOV must be valid.", 18, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v16.n128_u64[0] = *v35;
      }
      v37 = *(unint64_t **)(a1 + 2920);
      *(_QWORD *)&v297 = v289;
      DWORD2(v297) = 0;
      *(_QWORD *)&v298 = &v291;
      DWORD2(v298) = 0;
      sub_20F2CED4C(v37, (uint64_t)&v297, (uint64_t **)&v286, (unint64_t **)(a2 + 40), (uint64_t)&v284, v16);
      if (!*(_BYTE *)(a1 + 2499))
      {
        v297 = 0u;
        v298 = 0u;
        LODWORD(v299) = 733223976;
        kdebug_trace();
        v48 = *(uint64_t **)(a1 + 2824);
        for (i = *(uint64_t **)(a1 + 2832); v48 != i; v48 += 559)
          sub_20F2A69A4(v48[2], (uint64_t **)&v284, (uint64_t *)(*v48 + 440));
        goto LABEL_95;
      }
      v297 = 0u;
      v298 = 0u;
      LODWORD(v299) = 733223976;
      kdebug_trace();
      *(_QWORD *)&v301 = &off_24C9FE040;
      *((_QWORD *)&v301 + 1) = a1;
      v38 = &v301;
      *((_QWORD *)&v302 + 1) = &v301;
      v39 = v284;
      if (v284 == v285)
      {
        v50 = 4;
        goto LABEL_94;
      }
      __p = 0;
      v281 = 0;
      v282 = 0;
      v40 = v285 - (_BYTE *)v284;
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v285 - (_BYTE *)v284) >> 3);
      if (v41 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v42 = operator new(v285 - (_BYTE *)v284);
      __p = v42;
      v43 = (unint64_t)&v42[3 * v41];
      memcpy(v42, v39, v40 - 4);
      sub_20F33DCF8((uint64_t)v42, v43, 126 - 2 * __clz(v41), 1, v44);
      v293 = 0;
      v294 = 0;
      v295 = 0;
      v45 = v285 - (_BYTE *)v284;
      if (v285 == v284)
      {
        v47 = 0;
      }
      else
      {
        v46 = 0xAAAAAAAAAAAAAAABLL * (v45 >> 3);
        if (v46 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v47 = (uint64_t *)operator new(v45);
        v293 = v47;
        v294 = v47;
        v295 = &v47[3 * v46];
      }
      v51 = *v42;
      do
      {
        while (1)
        {
          while (*v42 != v51)
          {
            v296 = v51;
            if (!*((_QWORD *)&v302 + 1))
              sub_20E86D37C();
            (*(void (**)(_QWORD, uint64_t *, uint64_t **))(**((_QWORD **)&v302 + 1) + 48))(*((_QWORD *)&v302 + 1), &v296, &v293);
            v58 = v293;
            if (v295 == v293)
            {
              if (v295)
              {
                v294 = v295;
                operator delete(v295);
                v293 = 0;
                v294 = 0;
                v295 = 0;
              }
              v62 = (uint64_t *)operator new(0x18uLL);
              v61 = v62 + 3;
              v293 = v62;
              v295 = v62 + 3;
              *(_OWORD *)v62 = *(_OWORD *)v42;
              v62[2] = v42[2];
            }
            else
            {
              v59 = v294;
              if (v294 == v293)
              {
                v61 = v293 + 3;
                v63 = (char *)((char *)v293 - (char *)v294 + 24);
                a1 = (uint64_t)v278;
                do
                {
                  v64 = *(_OWORD *)v42;
                  v59[2] = v42[2];
                  *(_OWORD *)v59 = v64;
                  v59 += 3;
                  v63 -= 24;
                }
                while (v63);
                goto LABEL_75;
              }
              v60 = *(_OWORD *)v42;
              *((_DWORD *)v293 + 4) = *((_DWORD *)v42 + 4);
              *(_OWORD *)v58 = v60;
              v61 = v293 + 3;
            }
            a1 = (uint64_t)v278;
LABEL_75:
            v294 = v61;
            v65 = *v42;
            v42 += 3;
            v51 = v65;
            v47 = v61;
            if (v42 == (_QWORD *)v43)
              goto LABEL_85;
          }
          if (v47 < v295)
          {
            v52 = *(_OWORD *)v42;
            v47[2] = v42[2];
            *(_OWORD *)v47 = v52;
            v53 = v47 + 3;
            goto LABEL_53;
          }
          v54 = v293;
          v55 = 0xAAAAAAAAAAAAAAABLL * (v47 - v293) + 1;
          if (v55 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          if (0x5555555555555556 * (v295 - v293) > v55)
            v55 = 0x5555555555555556 * (v295 - v293);
          v56 = 0xAAAAAAAAAAAAAAABLL * (v295 - v293) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v55;
          if (v56)
          {
            if (v56 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v57 = (char *)operator new(24 * v56);
          }
          else
          {
            v57 = 0;
          }
          v66 = (uint64_t *)&v57[8 * (v47 - v54)];
          *(_OWORD *)v66 = *(_OWORD *)v42;
          v66[2] = v42[2];
          v67 = v66;
          if (v47 != v54)
            break;
          a1 = (uint64_t)v278;
          v53 = v66 + 3;
          v293 = v66;
          v294 = v66 + 3;
          v295 = (uint64_t *)&v57[24 * v56];
          if (v47)
            goto LABEL_84;
LABEL_53:
          v294 = v53;
          v42 += 3;
          v47 = v53;
          if (v42 == (_QWORD *)v43)
            goto LABEL_85;
        }
        a1 = (uint64_t)v278;
        do
        {
          v68 = *(_OWORD *)(v47 - 3);
          *((_DWORD *)v67 - 2) = *((_DWORD *)v47 - 2);
          *(_OWORD *)(v67 - 3) = v68;
          v67 -= 3;
          v47 -= 3;
        }
        while (v47 != v54);
        v47 = v293;
        v53 = v66 + 3;
        v293 = v67;
        v294 = v66 + 3;
        v295 = (uint64_t *)&v57[24 * v56];
        if (!v47)
          goto LABEL_53;
LABEL_84:
        operator delete(v47);
        v294 = v53;
        v42 += 3;
        v47 = v53;
      }
      while (v42 != (_QWORD *)v43);
LABEL_85:
      v296 = v51;
      if (!*((_QWORD *)&v302 + 1))
        sub_20E86D37C();
      (*(void (**)(_QWORD, uint64_t *, uint64_t **))(**((_QWORD **)&v302 + 1) + 48))(*((_QWORD *)&v302 + 1), &v296, &v293);
      if (v293)
      {
        v294 = v293;
        operator delete(v293);
      }
      if (__p)
        operator delete(__p);
      v38 = (__int128 *)*((_QWORD *)&v302 + 1);
      if (*((__int128 **)&v302 + 1) == &v301)
      {
        v38 = &v301;
        v50 = 4;
LABEL_94:
        (*(void (**)(void))(*(_QWORD *)v38 + 8 * v50))();
      }
      else if (*((_QWORD *)&v302 + 1))
      {
        v50 = 5;
        goto LABEL_94;
      }
LABEL_95:
      kdebug_trace();
      v293 = 0;
      v294 = 0;
      __p = v289;
      LODWORD(v281) = 0;
      v282 = &v291;
      v283 = 0;
      v69 = *(_QWORD *)(v10 + 24);
      v70 = *(_QWORD *)(a1 + 32);
      v71 = *(_DWORD *)(a1 + 860);
      v72 = *(unsigned __int8 *)(a1 + 726);
      v295 = 0;
      v296 = v69;
      if (*(_BYTE *)(a1 + 2499))
      {
        v277 = v72;
        v275 = v71;
        v266 = v70;
        v73 = *(void **)(a1 + 3336);
        *(_QWORD *)(a1 + 3344) = v73;
        v74 = 0xAAAAAAAAAAAAAAABLL * ((v285 - (_BYTE *)v284) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 3352) - (_QWORD)v73) >> 3) < v74)
        {
          if (v74 > 0x666666666666666)
LABEL_321:
            sub_20E867F44();
          v75 = (char *)operator new(0xAAAAAAAAAAAAAAB8 * ((v285 - (_BYTE *)v284) >> 3));
          a1 = (uint64_t)v278;
          v278[417] = v75;
          v278[418] = v75;
          v278[419] = &v75[40 * v74];
          if (v73)
          {
            operator delete(v73);
            v74 = 0xAAAAAAAAAAAAAAABLL * ((v285 - (_BYTE *)v284) >> 3);
          }
        }
        v76 = *(_QWORD *)(a1 + 2856) - *(_QWORD *)(a1 + 2848);
        v77 = v76 >> 3;
        LODWORD(v78) = (v76 >> 3) + 1;
        *(_DWORD *)(a1 + 3360) = v78;
        v79 = 2 * v78;
        v80 = v79 + v74;
        v81 = *(_QWORD *)(a1 + 3376);
        v82 = *(_QWORD *)(a1 + 3368);
        v83 = (v81 - v82) >> 2;
        if (v80 <= v83)
        {
          if (v80 < v83)
          {
            v81 = v82 + 4 * v80;
            *(_QWORD *)(a1 + 3376) = v81;
          }
        }
        else
        {
          sub_20E93DC84((uint64_t)v276, v80 - v83);
          v81 = *(_QWORD *)(a1 + 3376);
          v82 = *(_QWORD *)(a1 + 3368);
          v78 = *(unsigned int *)(a1 + 3360);
          v79 = 2 * v78;
        }
        v84 = ((v81 - v82) >> 2) - v79;
        v85 = v84;
        v86 = (v78 + v84);
        if (v84 != v86)
        {
          v87 = (int32x4_t *)(v82 + 4 * v84);
          v88 = 4 * v86 - 4 * v84 - 4;
          if (v88 < 0x1C)
          {
            v89 = v86;
            v90 = (__int32 *)(v82 + 4 * v84);
            goto LABEL_111;
          }
          v91 = (v88 >> 2) + 1;
          v89 = v86 + (v91 & 0xFFFFFFF8);
          v90 = &v87->i32[v91 & 0x7FFFFFFFFFFFFFF8];
          v92 = vaddq_s32(vdupq_n_s32(v86), (int32x4_t)xmmword_210365350);
          v93 = v87 + 1;
          v94 = v91 & 0x7FFFFFFFFFFFFFF8;
          v95.i64[0] = 0x400000004;
          v95.i64[1] = 0x400000004;
          v96.i64[0] = 0x800000008;
          v96.i64[1] = 0x800000008;
          do
          {
            v93[-1] = v92;
            *v93 = vaddq_s32(v92, v95);
            v92 = vaddq_s32(v92, v96);
            v93 += 2;
            v94 -= 8;
          }
          while (v94);
          if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_111:
            v97 = (__int32 *)(v82 + 4 * v86);
            do
              *v90++ = v89++;
            while (v90 != v97);
          }
          LODWORD(v78) = *(_DWORD *)(a1 + 3360);
          v85 = (v78 + v84);
        }
        if ((_DWORD)v78)
        {
          v98 = (v84 + 2 * v78);
          v99 = (int32x4_t *)(v82 + 4 * v85);
          v100 = 4 * v98 - 4 * v85 - 4;
          if (v100 < 0x1C)
          {
            v101 = v84;
            v102 = (__int32 *)(v82 + 4 * v85);
            goto LABEL_120;
          }
          v103 = (v100 >> 2) + 1;
          v101 = v84 + (v103 & 0xFFFFFFF8);
          v102 = &v99->i32[v103 & 0x7FFFFFFFFFFFFFF8];
          v104 = vaddq_s32(vdupq_n_s32(v84), (int32x4_t)xmmword_210365350);
          v105 = v99 + 1;
          v106 = v103 & 0x7FFFFFFFFFFFFFF8;
          v107.i64[0] = 0x400000004;
          v107.i64[1] = 0x400000004;
          v108.i64[0] = 0x800000008;
          v108.i64[1] = 0x800000008;
          do
          {
            v105[-1] = v104;
            *v105 = vaddq_s32(v104, v107);
            v104 = vaddq_s32(v104, v108);
            v105 += 2;
            v106 -= 8;
          }
          while (v106);
          if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
          {
            do
LABEL_120:
              *v102++ = v101++;
            while (v102 != (__int32 *)(v82 + 4 * v98));
          }
        }
        if ((_DWORD)v74)
        {
          v109 = (unint64_t)(v81 - v82) >> 2;
          v110 = 0;
          if ((_DWORD)v77)
          {
            v111 = v284;
            v112 = *(_QWORD *)(a1 + 2848);
            do
            {
              v150 = 0;
              while (v111[3 * v110] != *(_QWORD *)(v112 + 8 * v150))
              {
                if ((v76 >> 3) == ++v150)
                {
                  v150 = v76 >> 3;
                  break;
                }
              }
              v148 = v109 - *(_DWORD *)(a1 + 3360) + v150;
              v149 = 4 * v148;
              *(_DWORD *)(v82 + 4 * *(unsigned int *)(v82 + v149)) = v110;
              *(_DWORD *)(v82 + v149) = v110;
              *(_DWORD *)(v82 + 4 * v110++) = v148;
            }
            while (v110 != v74);
          }
          else
          {
            do
            {
              v113 = v109 - *(_DWORD *)(a1 + 3360);
              v114 = 4 * v113;
              *(_DWORD *)(v82 + 4 * *(unsigned int *)(v82 + v114)) = v110;
              *(_DWORD *)(v82 + v114) = v110;
              *(_DWORD *)(v82 + 4 * v110++) = v113;
            }
            while (v74 != v110);
          }
        }
        if ((_DWORD)v77)
        {
          v115 = 0;
          v116 = v296;
          v273 = (v76 >> 3);
          do
          {
            v117 = *(_QWORD **)(a1 + 2824);
            v118 = *(_QWORD **)(a1 + 2832);
            if (v117 != v118)
            {
              while (1)
              {
                v119 = v117[2];
                if (v119)
                {
                  if (*(_QWORD *)(v119 + 160) == *(_QWORD *)(*(_QWORD *)(a1 + 2848) + 8 * v115))
                    break;
                }
                v117 += 559;
                if (v117 == v118)
                {
                  v120 = 0;
                  goto LABEL_137;
                }
              }
            }
            if (v117 == v118)
              v120 = 0;
            else
              v120 = v117;
LABEL_137:
            v121 = *(unsigned int *)(a1 + 3360);
            v122 = (unint64_t)(*(_QWORD *)(a1 + 3376) - v82) >> 2;
            v123 = *(_DWORD *)(v82 + 4 * (v115 - 2 * v121 + v122));
            v124 = v115 - v121 + v122;
            while (v124 != v123)
            {
              v128 = (uint64_t *)((char *)v284 + 24 * v123);
              if (*v128 != *(_QWORD *)(*(_QWORD *)(a1 + 2848) + 8 * v115))
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 307, (uint64_t)"sample_kf_id.view.uuid_hash() == this->active_submap_ids()[j]", 61, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0);
                v129 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v130 = qword_254A6DE40;
                  v131 = qword_254A6DE48;
                  while (v130 != v131)
                  {
                    (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v130)(*(_QWORD *)(v130 + 8), "sample_kf_id.view.uuid_hash() == this->active_submap_ids()[j]", 61, &unk_2102A1D75, 0);
                    v130 += 16;
                  }
                }
                v132 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "sample_kf_id.view.uuid_hash() == this->active_submap_ids()[j]", 61, &unk_2102A1D75, 0);
              }
              sub_20F263BE0(*(_QWORD **)(v120[2] + 424), v128, (int8x16_t **)&__p, *(unsigned __int8 *)(*v120 + 720), v116, v277 != 0, (uint64_t)&v297, *(double *)(*v120 + 96));
              a1 = (uint64_t)v278;
              if (v300 && HIDWORD(v298) >= v275)
              {
                v133 = (char *)v278[418];
                v134 = v278[419];
                if ((unint64_t)v133 < v134)
                {
                  v125 = v297;
                  v126 = v298;
                  *((_QWORD *)v133 + 4) = v299;
                  *(_OWORD *)v133 = v125;
                  *((_OWORD *)v133 + 1) = v126;
                  v127 = v133 + 40;
                }
                else
                {
                  v135 = (char *)*v274;
                  v136 = 0xCCCCCCCCCCCCCCCDLL * ((v133 - (_BYTE *)*v274) >> 3);
                  v137 = v136 + 1;
                  if (v136 + 1 > 0x666666666666666)
                    goto LABEL_321;
                  v138 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v134 - (_QWORD)v135) >> 3);
                  if (2 * v138 > v137)
                    v137 = 2 * v138;
                  if (v138 >= 0x333333333333333)
                    v139 = 0x666666666666666;
                  else
                    v139 = v137;
                  if (v139)
                  {
                    if (v139 > 0x666666666666666)
                      sub_20E877A38();
                    v140 = (char *)operator new(40 * v139);
                  }
                  else
                  {
                    v140 = 0;
                  }
                  v141 = &v140[40 * v136];
                  v142 = v298;
                  *(_OWORD *)v141 = v297;
                  *((_OWORD *)v141 + 1) = v142;
                  *((_QWORD *)v141 + 4) = v299;
                  v143 = v141;
                  if (v133 == v135)
                  {
                    a1 = (uint64_t)v278;
                    v147 = &v140[40 * v139];
                    v278[417] = v141;
                    v127 = v141 + 40;
                    v278[418] = v141 + 40;
                    v278[419] = v147;
                    if (v133)
                      goto LABEL_171;
                  }
                  else
                  {
                    a1 = (uint64_t)v278;
                    do
                    {
                      v144 = *(_OWORD *)(v133 - 40);
                      v145 = *(_OWORD *)(v133 - 24);
                      *((_DWORD *)v143 - 2) = *((_DWORD *)v133 - 2);
                      *(_OWORD *)(v143 - 24) = v145;
                      *(_OWORD *)(v143 - 40) = v144;
                      v143 -= 40;
                      v133 -= 40;
                    }
                    while (v133 != v135);
                    v133 = (char *)*v274;
                    v146 = &v140[40 * v139];
                    v278[417] = v143;
                    v127 = v141 + 40;
                    v278[418] = v141 + 40;
                    v278[419] = v146;
                    if (!v133)
                      goto LABEL_139;
LABEL_171:
                    operator delete(v133);
                  }
                }
LABEL_139:
                *(_QWORD *)(a1 + 3344) = v127;
              }
              v82 = *v276;
              v123 = *(_DWORD *)(*v276 + 4 * v123);
            }
            ++v115;
          }
          while (v115 != v273);
        }
        v151 = *(__int128 **)(a1 + 3344);
        v152 = *(_QWORD *)(a1 + 3336);
        if (((uint64_t)v151 - v152) / 40 >= v266)
          v153 = v266;
        else
          v153 = ((uint64_t)v151 - v152) / 40;
        if (v153)
        {
          v154 = 40 * v153;
          v155 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(40 * v153) >> 3);
          if ((uint64_t)(40 * v153) >= 41 && (unint64_t)v154 >= 0x50)
          {
            v222 = (unint64_t)(v155 - 2) >> 1;
            v223 = v222;
            do
            {
              if (v222 >= v223)
              {
                v225 = (2 * v223) | 1;
                v226 = (__int128 *)(v152 + 40 * v225);
                if (2 * v223 + 2 < v155)
                {
                  v243 = *((_DWORD *)v226 + 8) > *((_DWORD *)v226 + 18);
                  v226 = (__int128 *)((char *)v226 + 40 * v243);
                  if (v243)
                    v225 = 2 * v223 + 2;
                }
                v227 = (__int128 *)(v152 + 40 * v223);
                v228 = *((_DWORD *)v227 + 8);
                if (*((_DWORD *)v226 + 8) <= v228)
                {
                  v297 = *v227;
                  v298 = v227[1];
                  do
                  {
                    v229 = v227;
                    v227 = v226;
                    v230 = *v226;
                    v231 = v226[1];
                    *((_DWORD *)v229 + 8) = *((_DWORD *)v226 + 8);
                    *v229 = v230;
                    v229[1] = v231;
                    if (v222 < v225)
                      break;
                    v232 = (2 * v225) | 1;
                    v226 = (__int128 *)(v152 + 40 * v232);
                    v233 = 2 * v225 + 2;
                    if (v233 < v155)
                    {
                      v243 = *((_DWORD *)v226 + 8) > *((_DWORD *)v226 + 18);
                      v226 = (__int128 *)((char *)v226 + 40 * v243);
                      if (v243)
                        v232 = v233;
                    }
                    v225 = v232;
                  }
                  while (*((_DWORD *)v226 + 8) <= v228);
                  v224 = v298;
                  *v227 = v297;
                  v227[1] = v224;
                  *((_DWORD *)v227 + 8) = v228;
                }
              }
              v243 = v223-- <= 0;
            }
            while (!v243);
          }
          v156 = (__int128 *)(v152 + 40 * v153);
          if (v156 != v151)
          {
            if (v154 < 80)
            {
              v157 = (__int128 *)(v152 + 40 * v153);
              do
              {
                if (*((_DWORD *)v157 + 8) > *(_DWORD *)(v152 + 32))
                {
                  v158 = *((_QWORD *)v157 + 4);
                  v159 = *v157;
                  v160 = v157[1];
                  v161 = *(_DWORD *)(v152 + 32);
                  v162 = *(_OWORD *)(v152 + 16);
                  *v157 = *(_OWORD *)v152;
                  v157[1] = v162;
                  *((_DWORD *)v157 + 8) = v161;
                  *(_OWORD *)v152 = v159;
                  *(_OWORD *)(v152 + 16) = v160;
                  *(_DWORD *)(v152 + 32) = v158;
                }
                v157 = (__int128 *)((char *)v157 + 40);
              }
              while (v157 != v151);
              goto LABEL_212;
            }
            v163 = (__int128 *)(v152 + 40 * v153);
            while (2)
            {
              if (*((_DWORD *)v163 + 8) > *(_DWORD *)(v152 + 32))
              {
                v165 = *((_QWORD *)v163 + 4);
                v166 = *v163;
                v167 = v163[1];
                v168 = *(_DWORD *)(v152 + 32);
                v169 = *(_OWORD *)(v152 + 16);
                *v163 = *(_OWORD *)v152;
                v163[1] = v169;
                *((_DWORD *)v163 + 8) = v168;
                *(_OWORD *)v152 = v166;
                *(_OWORD *)(v152 + 16) = v167;
                *(_DWORD *)(v152 + 32) = v165;
                if ((unint64_t)v155 < 3)
                {
                  v170 = v152 + 40;
                  v171 = 1;
                  v172 = *(_DWORD *)(v152 + 32);
                  if (*(_DWORD *)(v152 + 72) <= v172)
                  {
LABEL_205:
                    v297 = *(_OWORD *)v152;
                    v298 = *(_OWORD *)(v152 + 16);
                    v173 = v152;
                    do
                    {
                      v174 = v173;
                      v173 = v170;
                      v175 = *(_OWORD *)v170;
                      v176 = *(_OWORD *)(v170 + 16);
                      *(_DWORD *)(v174 + 32) = *(_DWORD *)(v170 + 32);
                      *(_OWORD *)v174 = v175;
                      *(_OWORD *)(v174 + 16) = v176;
                      if ((uint64_t)((unint64_t)(v155 - 2) >> 1) < v171)
                        break;
                      v177 = (2 * v171) | 1;
                      v170 = v152 + 40 * v177;
                      v178 = 2 * v171 + 2;
                      if (v178 < v155)
                      {
                        v243 = *(_DWORD *)(v170 + 32) > *(_DWORD *)(v170 + 72);
                        v170 += 40 * v243;
                        if (v243)
                          v177 = v178;
                      }
                      v171 = v177;
                    }
                    while (*(_DWORD *)(v170 + 32) <= v172);
                    v164 = v298;
                    *(_OWORD *)v173 = v297;
                    *(_OWORD *)(v173 + 16) = v164;
                    *(_DWORD *)(v173 + 32) = v172;
                  }
                }
                else
                {
                  v170 = v152 + 40 + 40 * (*(_DWORD *)(v152 + 72) > *(_DWORD *)(v152 + 112));
                  if (*(_DWORD *)(v152 + 72) <= *(_DWORD *)(v152 + 112))
                    v171 = 1;
                  else
                    v171 = 2;
                  v172 = *(_DWORD *)(v152 + 32);
                  if (*(_DWORD *)(v170 + 32) <= v172)
                    goto LABEL_205;
                }
              }
              v163 = (__int128 *)((char *)v163 + 40);
              if (v163 == v151)
                break;
              continue;
            }
          }
LABEL_212:
          if (v154 >= 41)
          {
            v179 = v154 / 0x28uLL;
            do
            {
              v182 = 0;
              v297 = *(_OWORD *)v152;
              v298 = *(_OWORD *)(v152 + 16);
              v299 = *(_QWORD *)(v152 + 32);
              v183 = v152;
              do
              {
                v186 = v183 + 40 * v182 + 40;
                v187 = (2 * v182) | 1;
                v188 = 2 * v182 + 2;
                if (v188 < v179)
                {
                  v243 = *(_DWORD *)(v186 + 32) > *(_DWORD *)(v186 + 72);
                  v186 += 40 * v243;
                  if (v243)
                    v187 = v188;
                }
                v184 = *(_OWORD *)v186;
                v185 = *(_OWORD *)(v186 + 16);
                *(_DWORD *)(v183 + 32) = *(_DWORD *)(v186 + 32);
                *(_OWORD *)v183 = v184;
                *(_OWORD *)(v183 + 16) = v185;
                v183 = v186;
                v182 = v187;
              }
              while (v187 <= (uint64_t)((unint64_t)(v179 - 2) >> 1));
              v156 = (__int128 *)((char *)v156 - 40);
              if ((__int128 *)v186 == v156)
              {
                v180 = v297;
                v181 = v298;
                *(_DWORD *)(v186 + 32) = v299;
                *(_OWORD *)v186 = v180;
                *(_OWORD *)(v186 + 16) = v181;
              }
              else
              {
                v189 = *v156;
                v190 = v156[1];
                *(_DWORD *)(v186 + 32) = *((_DWORD *)v156 + 8);
                *(_OWORD *)v186 = v189;
                *(_OWORD *)(v186 + 16) = v190;
                *v156 = v297;
                v156[1] = v298;
                *((_DWORD *)v156 + 8) = v299;
                v191 = v186 - v152 + 40;
                if (v191 >= 41)
                {
                  v192 = (v191 / 0x28uLL - 2) >> 1;
                  v193 = v152 + 40 * v192;
                  v194 = *(_DWORD *)(v186 + 32);
                  if (*(_DWORD *)(v193 + 32) > v194)
                  {
                    v195 = *(_OWORD *)(v186 + 16);
                    v301 = *(_OWORD *)v186;
                    v302 = v195;
                    do
                    {
                      v196 = v186;
                      v186 = v193;
                      v197 = *(_OWORD *)v193;
                      v198 = *(_OWORD *)(v193 + 16);
                      *(_DWORD *)(v196 + 32) = *(_DWORD *)(v193 + 32);
                      *(_OWORD *)v196 = v197;
                      *(_OWORD *)(v196 + 16) = v198;
                      if (!v192)
                        break;
                      v192 = (v192 - 1) >> 1;
                      v193 = v152 + 40 * v192;
                    }
                    while (*(_DWORD *)(v193 + 32) > v194);
                    *(_OWORD *)v186 = v301;
                    *(_OWORD *)(v186 + 16) = v302;
                    *(_DWORD *)(v186 + 32) = v194;
                  }
                }
              }
              v243 = v179-- <= 2;
            }
            while (!v243);
          }
          v294 = v293;
          sub_20F27C7D8((char **)&v293, v153);
          v199 = v293;
          v200 = *v274;
          do
          {
            v201 = *(_OWORD *)v200;
            *((_DWORD *)v199 + 4) = v200[4];
            *(_OWORD *)v199 = v201;
            v199 += 3;
            v200 += 10;
            v154 -= 40;
          }
          while (v154);
        }
        else
        {
          v294 = v293;
        }
      }
      else
      {
        sub_20F264638(*(_QWORD **)(a1 + 2816), (int8x16_t **)&__p, &v296, (uint64_t **)&v284, v70, v71, v72 != 0, (uint64_t *)&v293);
      }
      sub_20F339048((uint64_t *)&v279, a1, v270, (uint64_t)v271, &v293, v268 != 0, v269);
      a3 = v267;
      if (*(_BYTE *)(a1 + 3016))
        v202 = *(_QWORD *)(a1 + 3008);
      else
        v202 = 0;
      sub_20F443F5C(0xAAAAAAAAAAAAAAABLL * ((v285 - (_BYTE *)v284) >> 3), 0xAAAAAAAAAAAAAAABLL * (v294 - v293), v202);
      if (v293)
      {
        v294 = v293;
        operator delete(v293);
      }
      if (v284)
      {
        v285 = v284;
        operator delete(v284);
      }
      if (v286)
      {
        v287 = v286;
        operator delete(v286);
      }
      v204 = v267[1];
      v203 = (unint64_t)v267[2];
      if ((unint64_t)v204 < v203)
      {
        *(_OWORD *)v204 = v279;
        v267[1] = v204 + 16;
      }
      else
      {
        v205 = *v267;
        v206 = (v204 - *v267) >> 4;
        v207 = v206 + 1;
        if ((unint64_t)(v206 + 1) >> 60)
          sub_20E867F44();
        v208 = v203 - (_QWORD)v205;
        if (v208 >> 3 > v207)
          v207 = v208 >> 3;
        if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF0)
          v209 = 0xFFFFFFFFFFFFFFFLL;
        else
          v209 = v207;
        if (v209 >> 60)
          sub_20E877A38();
        v210 = (char *)operator new(16 * v209);
        v211 = &v210[16 * v206];
        *(_OWORD *)v211 = v279;
        v212 = v211 + 16;
        v213 = &v210[16 * v209];
        v279 = 0uLL;
        if (v204 == v205)
        {
          a3 = v267;
          *v267 = v211;
          v267[1] = v212;
          v267[2] = v213;
          if (v204)
            goto LABEL_259;
        }
        else
        {
          v214 = v204;
          do
          {
            v215 = *((_OWORD *)v214 - 1);
            v214 -= 16;
            *((_OWORD *)v211 - 1) = v215;
            v211 -= 16;
            *(_QWORD *)v214 = 0;
            *((_QWORD *)v214 + 1) = 0;
          }
          while (v214 != v205);
          *v267 = v211;
          v267[1] = v212;
          v267[2] = v213;
          do
          {
            v216 = (std::__shared_weak_count *)*((_QWORD *)v204 - 1);
            if (v216)
            {
              p_shared_owners = (unint64_t *)&v216->__shared_owners_;
              do
                v218 = __ldaxr(p_shared_owners);
              while (__stlxr(v218 - 1, p_shared_owners));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            v204 -= 16;
          }
          while (v204 != v205);
          v204 = v205;
          a3 = v267;
          if (v204)
LABEL_259:
            operator delete(v204);
        }
        v219 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
        a3[1] = v212;
        if (v219)
        {
          v220 = (unint64_t *)&v219->__shared_owners_;
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
      }
      v8 = v272 + 1;
    }
    while (v272 + 1 != v264);
  }
  v234 = *(_QWORD **)(a1 + 3080);
  v235 = *v234;
  if (*(_BYTE *)(*v234 + 2328))
  {
    v236 = (unsigned int *)(v235 + 2256);
    v237 = *(_QWORD *)(v235 + 2808);
    v238 = *(_QWORD *)(v235 + 2816);
    LOBYTE(v289[0]) = 0;
    BYTE8(v289[0]) = 0;
    v239 = *(_QWORD *)(v238 + 16);
    v240 = *(_QWORD *)(v239 + 208);
    v241 = *(_QWORD *)(v239 + 216);
    if (v240 != v241)
    {
      v242 = 0;
      do
      {
        v243 = *(_DWORD *)(v240 + 464) != 2 || v242 > 1;
        if (!v243)
        {
          v244 = &v289[v242];
          *(_QWORD *)v244 = *(_QWORD *)(v240 + 24);
          *((_BYTE *)v244 + 8) = 1;
          ++v242;
        }
        v240 += 472;
      }
      while (v240 != v241);
    }
    v297 = v289[0];
    sub_20F2CC7D4(v236, (uint64_t)a3, v237, (uint64_t)&v297, v234 + 1);
  }
  if (*(_BYTE *)(a1 + 3016) && *(_BYTE *)(a2 + 88))
  {
    v246 = *a3;
    v245 = a3[1];
    if (*a3 == v245)
    {
      v249 = 0;
    }
    else
    {
      v247 = *(_QWORD *)(a2 + 72);
      if (*(_QWORD *)(a2 + 64) != v247)
      {
        v250 = 0;
        v249 = 0;
        do
        {
          v251 = **(_QWORD **)v246;
          v252 = *(_QWORD *)(*(_QWORD *)v246 + 8);
          for (j = v251; j != v252; j += 128)
          {
            v254 = *(_QWORD *)(a2 + 64);
            while (*(_QWORD *)v254 != *(_QWORD *)(j + 16) || *(_DWORD *)(v254 + 8) != *(_DWORD *)(j + 24))
            {
              v254 += 16;
              if (v254 == v247)
              {
                v254 = *(_QWORD *)(a2 + 72);
                break;
              }
            }
            if (v254 != v247)
              ++v250;
          }
          v249 += (unint64_t)(v252 - v251) >> 7;
          v246 += 16;
        }
        while (v246 != v245);
        goto LABEL_318;
      }
      v248 = v245 - v246 - 16;
      if (v248 >= 0x10)
      {
        v255 = 0;
        v256 = 0;
        v257 = (v248 >> 4) + 1;
        v258 = &v246[16 * (v257 & 0x1FFFFFFFFFFFFFFELL)];
        v259 = (_QWORD **)(v246 + 16);
        v260 = v257 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v261 = *(v259 - 2);
          v262 = *v259;
          v259 += 4;
          v255 += (v261[1] - *v261) >> 7;
          v256 += (v262[1] - *v262) >> 7;
          v260 -= 2;
        }
        while (v260);
        v249 = v256 + v255;
        if (v257 == (v257 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_317;
        v246 = v258;
      }
      else
      {
        v249 = 0;
      }
      do
      {
        v263 = *(uint64_t **)v246;
        v246 += 16;
        v249 += (unint64_t)(v263[1] - *v263) >> 7;
      }
      while (v246 != v245);
    }
LABEL_317:
    v250 = 0;
LABEL_318:
    sub_20F445EE8(*(_QWORD *)(a1 + 3008), (double)v250, (double)v250 / (double)v249);
  }
}

void sub_20F327044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  void **v39;

  sub_20E8C3144(v39);
  _Unwind_Resume(a1);
}

void sub_20F327218(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  unsigned int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  int64x2_t v31;
  double v32;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int8x16_t v37;
  float64x2_t v38;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[9];

  v6 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v7 = (char *)a2[1] - (char *)*a2;
  v8 = v7 >> 4;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v6) >> 4) < v7 >> 4)
  {
    if ((unint64_t)v7 >= 0x1C71C71C71C71C71)
      sub_20EABADD4();
    v9 = 144 * v8;
    v10 = (char *)operator new(144 * v8);
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = &v10[v9];
    if (v6)
      operator delete(v6);
  }
  v12 = *a2;
  v11 = a2[1];
  if (v12 != v11)
  {
    v13 = *(_QWORD *)(a1 + 2816);
    v14 = 1.0;
    do
    {
      v15 = *(_QWORD *)a3;
      v16 = *(char **)(a3 + 8);
      v17 = *v12;
      v18 = *(char **)a3;
      if (v16 != *(char **)a3)
      {
        v19 = 0x8E38E38E38E38E39 * ((uint64_t)&v16[-*(_QWORD *)a3] >> 4);
        v18 = *(char **)a3;
        do
        {
          v20 = v19 >> 1;
          v21 = &v18[144 * (v19 >> 1)];
          if (*(_QWORD *)v21 < v17 || *(_QWORD *)v21 == v17 && *((_DWORD *)v21 + 2) < *((_DWORD *)v12 + 2))
          {
            v18 = v21 + 144;
            v20 = v19 + ~v20;
          }
          v19 = v20;
        }
        while (v20);
      }
      if (v18 == v16 || *(_QWORD *)v18 != v17 || *((_DWORD *)v18 + 2) != *((_DWORD *)v12 + 2))
      {
        if (*(_BYTE *)(a1 + 2499) && *(_QWORD *)(*(_QWORD *)(v13 + 16) + 160) != v17)
        {
          v22 = *(_QWORD *)(a1 + 2824);
          v49 = *(_QWORD *)(a1 + 2832);
          if (v22 != v49)
          {
            while (1)
            {
              v50 = *(_QWORD *)(v22 + 16);
              if (v50)
              {
                if (*(_QWORD *)(v50 + 160) == v17)
                  break;
              }
              v22 += 4472;
              if (v22 == v49)
                goto LABEL_9;
            }
          }
          if (v22 == v49 || !v22)
            goto LABEL_9;
        }
        else
        {
          v22 = v13;
        }
        v23 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(v22 + 16) + 424) + 56);
        v24 = (uint64_t *)*v23;
        if (*v23)
        {
          v25 = *((_DWORD *)v12 + 2);
          v26 = v23;
          do
          {
            v27 = v24[4];
            if (v27 < v17)
            {
              ++v24;
            }
            else if (v27 == v17)
            {
              if (*((_DWORD *)v24 + 10) < v25)
                ++v24;
              else
                v26 = v24;
            }
            else
            {
              v26 = v24;
            }
            v24 = (uint64_t *)*v24;
          }
          while (v24);
          if (v26 != v23)
          {
            v28 = v26[4];
            if (v17 >= v28 && (v17 != v28 || *((_DWORD *)v26 + 10) <= v25))
            {
              v29 = v26[6];
              if (v29)
              {
                v30.f64[0] = *(float64_t *)(v29 + 16);
                v31 = *(int64x2_t *)(v29 + 24);
                v32 = *(double *)(v29 + 64);
                _Q4 = *(int64x2_t *)(v29 + 48);
                v34 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v29, v31);
                v35 = (float64x2_t)vdupq_laneq_s64(_Q4, 1);
                v30.f64[1] = *(float64_t *)(v29 + 40);
                v36 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v29, v31);
                v37 = vextq_s8((int8x16_t)v36, (int8x16_t)v35, 8uLL);
                v35.f64[0] = *(float64_t *)(v29 + 88);
                v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)(v29 + 72)), v36, *(float64x2_t *)(v29 + 72), 1), v30, v35.f64[0]);
                _D7 = *(_QWORD *)(v29 + 80);
                __asm { FMLA            D17, D7, V4.D[1] }
                v35.f64[0] = _D17 + v32 * v35.f64[0];
                *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vnegq_f64(v35);
                v45 = *(_QWORD *)(v29 + 48);
                *(_QWORD *)&v36.f64[1] = v37.i64[0];
                v35.f64[1] = v14;
                v51[0] = *(_OWORD *)v12;
                v51[1] = v34;
                v51[2] = v45;
                v51[3] = v36;
                v51[4] = v37.u64[1];
                v51[5] = v30;
                v51[6] = *(unint64_t *)&v32;
                v51[7] = vnegq_f64(v38);
                v51[8] = v35;
                if (v16 != (char *)v15)
                {
                  v46 = 0x8E38E38E38E38E39 * ((uint64_t)&v16[-v15] >> 4);
                  do
                  {
                    v47 = v46 >> 1;
                    v48 = v15 + 144 * (v46 >> 1);
                    if (*(_QWORD *)v48 < *(_QWORD *)&v51[0]
                      || *(_QWORD *)v48 == *(_QWORD *)&v51[0] && *(_DWORD *)(v48 + 8) < DWORD2(v51[0]))
                    {
                      v15 = v48 + 144;
                      v47 = v46 + ~v47;
                    }
                    v46 = v47;
                  }
                  while (v47);
                }
                if ((char *)v15 == v16
                  || *(_QWORD *)v15 != *(_QWORD *)&v51[0]
                  || *(_DWORD *)(v15 + 8) != DWORD2(v51[0]))
                {
                  sub_20F052E54((char **)a3, v15, (uint64_t)v51);
                  v14 = 1.0;
                }
              }
            }
          }
        }
        v13 = v22;
      }
LABEL_9:
      v12 += 2;
    }
    while (v12 != v11);
  }
}

uint64_t sub_20F3275B8(uint64_t a1, uint64_t a2, uint64_t *a3, float64x2_t *a4, __int128 *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)(a1 + 2499))
  {
    v5 = *(_QWORD **)(a1 + 2824);
    v6 = *(_QWORD **)(a1 + 2832);
    if (v5 != v6)
    {
      while (1)
      {
        v7 = v5[2];
        if (v7)
        {
          if (*(_QWORD *)(v7 + 160) == *a3)
            break;
        }
        v5 += 559;
        if (v5 == v6)
        {
          v8 = 0;
          goto LABEL_12;
        }
      }
    }
    if (v5 == v6)
      v8 = 0;
    else
      v8 = v5;
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 2816);
  }
LABEL_12:
  sub_20FCC6708(*(_QWORD **)(v8[24] + 8), a2, **(_QWORD **)(v8[2] + 424), a3, a4, a5);
  result = v8[42];
  if (result)
  {
    v10 = v8[2];
    v11 = *(_QWORD *)(v10 + 424);
    if (v11)
    {
      if (*(_QWORD *)(*(_QWORD *)v11 + 64))
      {
        v12 = *(_QWORD *)(v10 + 160);
        v13 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v12, &v13);
      }
    }
  }
  return result;
}

uint64_t sub_20F327698(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (*(_BYTE *)(a1 + 2499))
  {
    v2 = *(_QWORD **)(a1 + 2824);
    v3 = *(_QWORD **)(a1 + 2832);
    if (v2 != v3)
    {
      while (1)
      {
        v4 = v2[2];
        if (v4)
        {
          if (*(_QWORD *)(v4 + 160) == *(_QWORD *)(a2 + 48))
            break;
        }
        v2 += 559;
        if (v2 == v3)
          return 0;
      }
    }
    if (v2 == v3 || v2 == 0)
      return 0;
  }
  else
  {
    v2 = *(_QWORD **)(a1 + 2816);
  }
  result = sub_20F3B3CC0(v2[24], **(_QWORD ***)(v2[2] + 424), a2, v2 + 4);
  if ((_DWORD)result)
  {
    v7 = v2[42];
    if (v7)
    {
      v8 = v2[2];
      v9 = *(_QWORD *)(v8 + 424);
      if (v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 64))
        {
          v10 = *(_QWORD *)(v8 + 160);
          v11 = 0;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v7 + 48))(v7, &v10, &v11);
        }
      }
    }
    return 1;
  }
  return result;
}

void sub_20F327784(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  float64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  float64x2_t v22;
  int64x2_t v23;
  double v24;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  uint64_t v29;
  float64x2_t v30;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  uint64_t *v45;
  void *v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  __int128 v53;
  float64x2_t v54;
  __int128 v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)*(unsigned int *)(a2 + 8) << 32;
  *(_QWORD *)&v59 = *(_QWORD *)a2;
  *((_QWORD *)&v59 + 1) = v8;
  sub_2102323F4((unsigned __int8 *)&v59, &v50);
  v9 = (float64x2_t *)operator new(0x28uLL);
  v46 = v9;
  v47 = xmmword_2102E0950;
  v10 = v51;
  *v9 = v50;
  v9[1] = v10;
  LODWORD(v9[2].f64[0]) = LODWORD(v52.f64[0]);
  BYTE4(v9[2].f64[0]) = 0;
  v11 = *(_QWORD *)(a1 + 2824);
  v12 = *(_QWORD *)(a1 + 2832);
  if (v11 == v12)
  {
LABEL_4:
    if (!sub_20F325654(a1, (uint64_t *)a2))
      goto LABEL_17;
    v13 = *(_QWORD *)(a1 + 2824);
    v14 = *(_QWORD *)(a1 + 2832);
    if (v13 != v14)
    {
      while (1)
      {
        v15 = *(_QWORD *)(v13 + 16);
        if (v15)
        {
          if (*(_QWORD *)(v15 + 160) == *(_QWORD *)a2)
            break;
        }
        v13 += 4472;
        if (v13 == v14)
          goto LABEL_17;
      }
    }
    if (v13 == v14 || !v13)
    {
LABEL_17:
      *(_BYTE *)a4 = 0;
      *(_WORD *)(a4 + 16) = 0;
      goto LABEL_36;
    }
    sub_20F23A0A0(**(_QWORD ***)(*(_QWORD *)(v13 + 16) + 424), (__int128 *)a2, (char **)&__p);
    v16 = (uint64_t *)__p;
    v17 = v45;
    if (__p == v45)
    {
LABEL_15:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 17) = 0;
      v20 = (uint64_t *)__p;
      if (!__p)
        goto LABEL_36;
    }
    else
    {
      while (1)
      {
        v18 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(*(_QWORD *)(v13 + 16) + 424) + 1784), v16);
        if (v18)
          break;
        v16 += 3;
        if (v16 == v17)
          goto LABEL_15;
      }
      v21 = v18[9];
      v22.f64[0] = *(float64_t *)(v21 + 16);
      v23 = *(int64x2_t *)(v21 + 24);
      v24 = *(double *)(v21 + 64);
      _Q4 = *(int64x2_t *)(v21 + 48);
      v26 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v21, v23);
      v27 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v21, v23);
      v22.f64[1] = *(float64_t *)(v21 + 40);
      v28 = vextq_s8((int8x16_t)v27, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v29 = v18[11];
      v19.f64[0] = *(float64_t *)(v29 + 16);
      v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)v29), v27, *(float64x2_t *)v29, 1), v22, v19.f64[0]);
      _D7 = *(_QWORD *)(v29 + 8);
      __asm { FMLA            D17, D7, V4.D[1] }
      v19.f64[0] = _D17 + v24 * v19.f64[0];
      *(_QWORD *)&v27.f64[1] = v28.i64[0];
      v54 = v22;
      v55 = *(unint64_t *)&v24;
      v50 = v26;
      v51 = (float64x2_t)_Q4.u64[0];
      v52 = v27;
      v53 = v28.u64[1];
      v56 = vnegq_f64(v30);
      v57 = *(_OWORD *)&vnegq_f64(v19);
      v58 = 0x3FF0000000000000;
      if (*(_BYTE *)(a1 + 2499))
      {
        v37 = *(_QWORD **)(a1 + 2824);
        v38 = *(_QWORD **)(a1 + 2832);
        if (v37 != v38)
        {
          while (1)
          {
            v39 = v37[2];
            if (v39)
            {
              if (*(_QWORD *)(v39 + 160) == *v16)
                break;
            }
            v37 += 559;
            if (v37 == v38)
            {
              v40 = 0;
              goto LABEL_30;
            }
          }
        }
        if (v37 == v38)
          v40 = 0;
        else
          v40 = v37;
LABEL_30:
        sub_20FCC6708(*(_QWORD **)(v40[24] + 8), (uint64_t)&v46, **(_QWORD **)(v40[2] + 424), v16, &v50, a3);
        v41 = v40[42];
        if (v41)
        {
          v42 = v40[2];
          v43 = *(_QWORD *)(v42 + 424);
          if (v43)
          {
            if (*(_QWORD *)(*(_QWORD *)v43 + 64))
            {
              v48 = *(_QWORD *)(v42 + 160);
              v49 = 0;
              (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v41 + 48))(v41, &v48, &v49);
            }
          }
        }
      }
      else
      {
        sub_20F264A54(*(_QWORD **)(a1 + 2816), (uint64_t)&v46, v16, &v50, a3);
      }
      *(_OWORD *)a4 = v59;
      *(_BYTE *)(a4 + 16) = 1;
      *(_BYTE *)(a4 + 17) = 1;
      v20 = (uint64_t *)__p;
      if (!__p)
        goto LABEL_36;
    }
    v45 = v20;
    operator delete(v20);
    goto LABEL_36;
  }
  while (!sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v11 + 192) + 8), (uint64_t)&v46))
  {
    v11 += 4472;
    if (v11 == v12)
      goto LABEL_4;
  }
  *(_OWORD *)a4 = v59;
  *(_WORD *)(a4 + 16) = 1;
LABEL_36:
  if (SHIBYTE(v47) < 0)
    operator delete(v46);
}

void sub_20F327B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_20F327B58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  void *__p;
  __int128 *v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_QWORD *)(a1 + 2824);
  for (i = *(_QWORD *)(a1 + 2832); v2 != i; v2 += 4472)
  {
    sub_20F264D94(v2, (uint64_t *)&__p);
    sub_20F340F04((void **)a2, *(_QWORD *)(a2 + 8), (__int128 *)__p, v6, 0x82FA0BE82FA0BE83 * (((char *)v6 - (_BYTE *)__p) >> 3));
    if (__p)
    {
      v6 = (__int128 *)__p;
      operator delete(__p);
    }
  }
}

void sub_20F327C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_20F327C50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  void *__p;
  __int128 *v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_QWORD *)(a1 + 2824);
  for (i = *(_QWORD *)(a1 + 2832); v2 != i; v2 += 4472)
  {
    sub_20F26502C(v2, (uint64_t *)&__p);
    sub_20F340F04((void **)a2, *(_QWORD *)(a2 + 8), (__int128 *)__p, v6, 0x82FA0BE82FA0BE83 * (((char *)v6 - (_BYTE *)__p) >> 3));
    if (__p)
    {
      v6 = (__int128 *)__p;
      operator delete(__p);
    }
  }
}

void sub_20F327CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_20F327D48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  void *__p;
  char *v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_QWORD *)(a1 + 2824);
  for (i = *(_QWORD *)(a1 + 2832); v2 != i; v2 += 4472)
  {
    sub_20F2652C4(v2, &__p);
    sub_20F311CAC(a2, *(char **)(a2 + 8), (char *)__p, v6, (v6 - (_BYTE *)__p) >> 5);
    if (__p)
    {
      v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_20F327DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_20F327E24(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  _QWORD *i;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  double *v33;
  double v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  _OWORD *v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v61;
  double *v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  char *v67;
  char *v68;
  char *v69;
  void *v70[2];
  void *__p[2];
  int v72;
  __int128 v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2499))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  i = (_QWORD *)a1;
  *(_OWORD *)v70 = 0u;
  *(_OWORD *)__p = 0u;
  v72 = 1065353216;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v7 = *(_QWORD **)(a1 + 2848);
  v8 = *(_QWORD **)(a1 + 2856);
  v9 = 0;
  if (v7 != v8)
  {
    v61 = *(_QWORD **)(a1 + 2856);
    do
    {
      v10 = i[353];
      v11 = i[354];
      if (v10 != v11)
      {
        while (1)
        {
          v12 = *(_QWORD *)(v10 + 16);
          if (v12)
          {
            if (*(_QWORD *)(v12 + 160) == *v7)
              break;
          }
          v10 += 4472;
          if (v10 == v11)
            goto LABEL_4;
        }
      }
      if (v10 != v11 && v10 != 0)
      {
        sub_20F3471A0((uint64_t)v70, *(_QWORD *)(*(_QWORD *)(v10 + 16) + 160), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 160), *(_QWORD *)(v10 + 16));
        v14 = *(_QWORD *)(v10 + 16);
        v15 = v67;
        v16 = v68;
        v17 = (v68 - v67) >> 5;
        v18 = v17 - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 3);
        if (v18 > (v69 - v67) >> 5)
        {
          if (v18 >> 59)
            sub_20E867F44();
          v19 = (char *)operator new(32 * v18);
          v20 = &v19[32 * v17];
          if (v16 != v15)
          {
            v21 = &v19[32 * v17];
            do
            {
              v20 = v21 - 32;
              v22 = *((_OWORD *)v16 - 1);
              *((_OWORD *)v21 - 2) = *((_OWORD *)v16 - 2);
              *((_OWORD *)v21 - 1) = v22;
              v16 -= 32;
              v21 -= 32;
            }
            while (v16 != v15);
          }
          v67 = v20;
          v68 = &v19[32 * v17];
          v69 = &v19[32 * v18];
          if (v15)
            operator delete(v15);
        }
        v24 = *(__int128 **)(v14 + 40);
        v23 = *(__int128 **)(v14 + 48);
        v8 = v61;
        for (i = (_QWORD *)a1; v24 != v23; v24 = (__int128 *)((char *)v24 + 40))
        {
          v64 = *v24;
          v65 = 0x7FEFFFFFFFFFFFFFLL;
          v66 = 0;
          v25 = v67;
          if (v68 != v67)
          {
            v26 = (v68 - v67) >> 5;
            do
            {
              v27 = v26 >> 1;
              v28 = &v25[32 * (v26 >> 1)];
              if (*(_QWORD *)v28 < (unint64_t)v64
                || *(_QWORD *)v28 == (_QWORD)v64 && *((_DWORD *)v28 + 2) < DWORD2(v64))
              {
                v25 = v28 + 32;
                v27 = v26 + ~v27;
              }
              v26 = v27;
            }
            while (v27);
          }
          if (v25 == v68 || *(_QWORD *)v25 != (_QWORD)v64 || *((_DWORD *)v25 + 2) != DWORD2(v64))
            sub_20F34747C((void **)&v67, v25, &v64);
          v9 += (*((_QWORD *)v24 + 3) - *((_QWORD *)v24 + 2)) >> 5;
        }
      }
LABEL_4:
      ++v7;
    }
    while (v7 != v8);
  }
  v29 = i[352];
  v64 = *(_OWORD *)(v29 + 208);
  v65 = *(_QWORD *)(v29 + 224);
  if ((_BYTE)v65)
    sub_20F45500C((uint64_t *)v70, (uint64_t)&v64, (uint64_t *)(v29 + 32), (uint64_t *)&v67, a4);
  v31 = *a2;
  v30 = a2[1];
  if (*a2 != v30)
  {
    do
    {
      sub_20F45500C((uint64_t *)v70, v31, (uint64_t *)(i[352] + 32), (uint64_t *)&v67, a4);
      v31 += 16;
    }
    while (v31 != v30);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!v9)
  {
    v32 = 0;
    v33 = (double *)v67;
    v63 = (double *)v68;
    if (v67 == v68)
      goto LABEL_94;
LABEL_48:
    while (v33[2] > a4)
    {
LABEL_47:
      v33 += 4;
      if (v33 == v63)
      {
        v33 = (double *)v67;
        goto LABEL_94;
      }
    }
    v34 = *v33;
    if (((unint64_t)v70[1] & ((unint64_t)v70[1] - 1)) != 0)
    {
      v36 = *(_QWORD *)v33;
      if ((void *)*(_QWORD *)&v34 >= v70[1])
        v36 = *(_QWORD *)&v34 % (unint64_t)v70[1];
      v35 = (_QWORD *)*((_QWORD *)v70[0] + v36);
      do
      {
        do
          v35 = (_QWORD *)*v35;
        while (v35[1] != *(_QWORD *)&v34);
      }
      while (v35[2] != *(_QWORD *)&v34);
    }
    else
    {
      v35 = (_QWORD *)*((_QWORD *)v70[0] + (((uint64_t)v70[1] - 1) & *(_QWORD *)&v34));
      do
      {
        do
          v35 = (_QWORD *)*v35;
        while (v35[1] != *(_QWORD *)&v34);
      }
      while (v35[2] != *(_QWORD *)&v34);
    }
    v37 = v35[3];
    v38 = *(_QWORD *)(v37 + 40);
    v39 = *(_QWORD *)(v37 + 48);
    if (v39 != v38)
    {
      v40 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - v38) >> 3);
      do
      {
        v41 = v40 >> 1;
        v42 = v38 + 40 * (v40 >> 1);
        if (*(_QWORD *)v42 < *(_QWORD *)&v34
          || *(_QWORD *)v42 == *(_QWORD *)&v34 && *(_DWORD *)(v42 + 8) < *((_DWORD *)v33 + 2))
        {
          v38 = v42 + 40;
          v41 = v40 + ~v41;
        }
        v40 = v41;
      }
      while (v41);
    }
    if (v38 == v39 || *(_QWORD *)v38 != *(_QWORD *)&v34 || *(_DWORD *)(v38 + 8) != *((_DWORD *)v33 + 2))
      v38 = v39;
    v43 = *(unsigned __int8 **)(v38 + 16);
    v44 = *(unsigned __int8 **)(v38 + 24);
    while (1)
    {
      if (v43 == v44)
        goto LABEL_47;
      sub_210232668(v43, (uint64_t)&v73);
      if (v74)
        break;
LABEL_74:
      v43 += 32;
    }
    v46 = a3[2];
    if ((unint64_t)v32 < v46)
    {
      *v32 = v73;
      v45 = v32 + 1;
LABEL_73:
      a3[1] = (uint64_t)v45;
      v32 = v45;
      goto LABEL_74;
    }
    v47 = (_OWORD *)*a3;
    v48 = ((uint64_t)v32 - *a3) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      sub_20E969238();
    v50 = v46 - (_QWORD)v47;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 60)
        sub_20E877A38();
      v52 = (char *)operator new(16 * v51);
      v53 = &v52[16 * v48];
      *(_OWORD *)v53 = v73;
      v54 = (uint64_t)v53;
      if (v32 == v47)
      {
LABEL_87:
        v55 = &v52[16 * v51];
        v45 = v53 + 16;
        *a3 = v54;
        a3[1] = (uint64_t)(v53 + 16);
        a3[2] = (uint64_t)v55;
        if (!v32)
          goto LABEL_73;
        goto LABEL_92;
      }
    }
    else
    {
      v52 = 0;
      v53 = (char *)(16 * v48);
      *(_OWORD *)(16 * v48) = v73;
      v54 = 16 * v48;
      if (v32 == v47)
        goto LABEL_87;
    }
    do
    {
      *(_OWORD *)(v54 - 16) = *(v32 - 1);
      v54 -= 16;
      --v32;
    }
    while (v32 != v47);
    v32 = (_OWORD *)*a3;
    v56 = &v52[16 * v51];
    v45 = v53 + 16;
    *a3 = v54;
    a3[1] = (uint64_t)(v53 + 16);
    a3[2] = (uint64_t)v56;
    if (!v32)
      goto LABEL_73;
LABEL_92:
    operator delete(v32);
    goto LABEL_73;
  }
  v32 = operator new(16 * v9);
  *a3 = (uint64_t)v32;
  a3[1] = (uint64_t)v32;
  a3[2] = (uint64_t)&v32[v9];
  v33 = (double *)v67;
  v63 = (double *)v68;
  if (v67 != v68)
    goto LABEL_48;
LABEL_94:
  if (v33)
  {
    v68 = (char *)v33;
    operator delete(v33);
  }
  v57 = __p[0];
  if (__p[0])
  {
    do
    {
      v58 = (_QWORD *)*v57;
      operator delete(v57);
      v57 = v58;
    }
    while (v58);
  }
  v59 = v70[0];
  v70[0] = 0;
  if (v59)
    operator delete(v59);
}

void sub_20F328420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (!__p)
  {
    sub_20E8C25A8((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_20E8C25A8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20F3284E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  char *v7;
  __int128 *v8;
  __int128 *v9;

  if (*(_BYTE *)(a1 + 2499))
  {
    sub_20FC89C94(a2, (uint64_t)&v8);
    v5 = v8;
    v6 = v9;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    if (v5 != v6)
    {
      if (0xCBEEA4E1A08AD8F3 * (((char *)v6 - (char *)v5) >> 3) >= 0x8AD8F2FBA93869)
        sub_20E867F44();
      v7 = (char *)operator new((char *)v6 - (char *)v5);
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v7;
      *(_QWORD *)(a3 + 16) = &v7[8 * (((char *)v6 - (char *)v5) >> 3)];
      do
      {
        if (!sub_20F328638(a1, (uint64_t)v5))
          sub_20F269ED8((char **)a3, v5);
        v5 = (__int128 *)((char *)v5 + 472);
      }
      while (v5 != v6);
      v5 = v8;
    }
    if (v5)
    {
      v9 = v5;
      operator delete(v5);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_20F3285F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
    v14 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v14 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F328638(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[59];
  int v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v4 = operator new(0x28uLL);
  *v4 = &off_24C9FE0D0;
  v4[1] = a2;
  v4[2] = &v34;
  v4[3] = a1;
  v36 = v4;
  if (!*(_BYTE *)(a1 + 2499))
  {
    v12 = sub_20F269420(*(_QWORD *)(a1 + 2816), a2, 1);
LABEL_25:
    v15 = v12;
    goto LABEL_60;
  }
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a1 + 2824);
  v7 = *(_QWORD *)(a1 + 2832);
  v8 = v6;
  if (v6 != v7)
  {
    v8 = *(_QWORD *)(a1 + 2824);
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 160) == v5)
          break;
      }
      v8 += 4472;
      if (v8 == v7)
      {
        v10 = 0;
        v11 = *(_QWORD *)(a2 + 24);
        if (v6 != v7)
          goto LABEL_16;
        goto LABEL_18;
      }
    }
  }
  if (v8 == v7)
    v10 = 0;
  else
    v10 = v8;
  v11 = *(_QWORD *)(a2 + 24);
  if (v6 != v7)
  {
LABEL_16:
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 16);
      if (v13)
      {
        if (*(_QWORD *)(v13 + 160) == v11)
          break;
      }
      v6 += 4472;
      if (v6 == v7)
        goto LABEL_59;
    }
  }
LABEL_18:
  if (v6 == v7)
    v14 = 0;
  else
    v14 = v6;
  if (!v10 || !v14)
    goto LABEL_59;
  if (v5 == v11)
  {
    v12 = sub_20F269420(v10, a2, 1);
    goto LABEL_25;
  }
  v16 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 16) + 424) + 56);
  v17 = (uint64_t *)*v16;
  if (!*v16)
    goto LABEL_59;
  v18 = *(_DWORD *)(a2 + 8);
  v19 = v16;
  do
  {
    v20 = v17[4];
    if (v20 < v5)
    {
      ++v17;
    }
    else if (v20 == v5)
    {
      if (*((_DWORD *)v17 + 10) < v18)
        ++v17;
      else
        v19 = v17;
    }
    else
    {
      v19 = v17;
    }
    v17 = (uint64_t *)*v17;
  }
  while (v17);
  if (v19 == v16)
    goto LABEL_59;
  v21 = v19[4];
  if (v5 < v21 || v5 == v21 && *((_DWORD *)v19 + 10) > v18)
    goto LABEL_59;
  if (!v19[6])
    goto LABEL_59;
  v22 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(v14 + 16) + 424) + 56);
  v23 = (uint64_t *)*v22;
  if (!*v22)
    goto LABEL_59;
  v24 = *(_DWORD *)(a2 + 32);
  v25 = v22;
  do
  {
    v26 = v23[4];
    if (v26 < v11)
    {
      ++v23;
    }
    else if (v26 == v11)
    {
      if (*((_DWORD *)v23 + 10) < v24)
        ++v23;
      else
        v25 = v23;
    }
    else
    {
      v25 = v23;
    }
    v23 = (uint64_t *)*v23;
  }
  while (v23);
  if (v25 != v22 && (v27 = v25[4], v11 >= v27) && (v11 != v27 || *((_DWORD *)v25 + 10) <= v24) && v25[6])
  {
    v28 = sub_20F269D10(v10, (uint64_t *)a2);
    sub_20FC89E80(a2, (uint64_t)v33);
    v29 = sub_20F269D10(v14, v33);
    if (v28)
      v15 = v29;
    else
      v15 = 0;
  }
  else
  {
LABEL_59:
    v15 = 2;
  }
LABEL_60:
  v34 = v15;
  if (!v36)
    sub_20E86D37C();
  (*(void (**)(_BYTE *))(*(_QWORD *)v36 + 48))(v36);
  v30 = v36;
  if (v36 == v35)
  {
    v31 = 4;
    v30 = v35;
    goto LABEL_65;
  }
  if (v36)
  {
    v31 = 5;
LABEL_65:
    (*(void (**)(void))(*v30 + 8 * v31))();
  }
  return v15;
}

void sub_20F32893C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E961DB0((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_20F32895C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

float64x2_t sub_20F328974(float64x2_t *a1, uint64_t a2, uint64_t *a3)
{
  float64x2_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t *v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64_t v21;
  int8x16_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  float64x2_t v35;
  unint64_t v36;
  double v37;
  unsigned int v38;
  uint64_t *v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float64_t v44;
  double v45;
  float64_t v46;
  float64x2_t v47;
  double v52;
  float64x2_t v53;
  double v54;
  int8x16_t v57;
  int8x16_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  int64x2_t v68;
  float64x2_t v69;
  int64x2_t v70;
  double v72;
  float64x2_t v73;
  unint64_t v74;
  unint64_t v75;
  float64x2_t v76;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t result;
  int8x16_t v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64_t v97;

  v7 = *a3;
  v8 = *(_QWORD *)(a2 + 2824);
  v9 = *(_QWORD *)(a2 + 2832);
  if (v8 != v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v8 + 16);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 160) == v7)
          break;
      }
      v8 += 4472;
      if (v8 == v9)
        goto LABEL_11;
    }
  }
  if (v8 == v9 || v8 == 0)
  {
LABEL_11:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2030, (uint64_t)"query_submap", 12, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_57;
    }
    v7 = *a3;
    v12 = (_QWORD *)(**(_QWORD **)(MEMORY[0x10] + 424) + 56);
    v13 = (uint64_t *)*v12;
    if (!*v12)
    {
LABEL_55:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2033, (uint64_t)"query_state", 11, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0);
      abort();
    }
  }
  else
  {
    v12 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(v8 + 16) + 424) + 56);
    v13 = (uint64_t *)*v12;
    if (!*v12)
      goto LABEL_55;
  }
  v14 = *((_DWORD *)a3 + 2);
  v15 = v12;
  do
  {
    v16 = v13[4];
    if (v16 < v7)
    {
      ++v13;
    }
    else if (v16 == v7)
    {
      if (*((_DWORD *)v13 + 10) < v14)
        ++v13;
      else
        v15 = v13;
    }
    else
    {
      v15 = v13;
    }
    v13 = (uint64_t *)*v13;
  }
  while (v13);
  if (v15 == v12)
    goto LABEL_55;
  v17 = v15[4];
  if (v7 < v17 || v7 == v17 && *((_DWORD *)v15 + 10) > v14)
    goto LABEL_55;
  v18 = v15[6];
  if (!v18)
    goto LABEL_55;
  v19.f64[0] = *(float64_t *)(v18 + 16);
  v20 = *(float64x2_t *)v18;
  v21 = *(double *)(v18 + 40);
  v22 = *(int8x16_t *)(v18 + 24);
  v3.f64[0] = *(float64_t *)(v18 + 64);
  v23 = *(float64x2_t *)(v18 + 48);
  v24 = *(double *)(v18 + 88);
  v25 = *(float64x2_t *)(v18 + 72);
  v26 = a3[3];
  v27 = *(_QWORD *)(a2 + 2824);
  v28 = *(_QWORD *)(a2 + 2832);
  if (v27 != v28)
  {
    while (1)
    {
      v29 = *(_QWORD *)(v27 + 16);
      if (v29)
      {
        if (*(_QWORD *)(v29 + 160) == v26)
          break;
      }
      v27 += 4472;
      if (v27 == v28)
        goto LABEL_37;
    }
  }
  if (v27 == v28 || !v27)
  {
LABEL_37:
    v90 = v22;
    v91 = v21;
    v92 = v25;
    v93 = v23;
    v94 = v24;
    v95 = v3;
    v96 = v20;
    v97 = v19.f64[0];
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2038, (uint64_t)"ref_submap", 10, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_57;
    }
    v26 = a3[3];
    v30 = 16;
    v20 = v96;
    v19.f64[0] = v97;
    v24 = v94;
    v3 = v95;
    v25 = v92;
    v23 = v93;
    v22 = v90;
    v21 = v91;
  }
  else
  {
    v30 = v27 + 16;
  }
  v31 = **(_QWORD **)(*(_QWORD *)v30 + 424);
  v34 = *(uint64_t **)(v31 + 56);
  v32 = (uint64_t *)(v31 + 56);
  v33 = v34;
  if (!v34)
    goto LABEL_56;
  *(_QWORD *)&v35.f64[0] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  v36 = vextq_s8(v22, v22, 8uLL).u64[0];
  *(_QWORD *)&v37 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  v38 = *((_DWORD *)a3 + 8);
  v39 = v32;
  *(_QWORD *)&v40 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  do
  {
    v41 = v33[4];
    if (v41 < v26)
    {
      ++v33;
    }
    else if (v41 == v26)
    {
      if (*((_DWORD *)v33 + 10) < v38)
        ++v33;
      else
        v39 = v33;
    }
    else
    {
      v39 = v33;
    }
    v33 = (uint64_t *)*v33;
  }
  while (v33);
  if (v39 == v32 || (v42 = v39[4], v26 < v42) || v26 == v42 && *((_DWORD *)v39 + 10) > v38 || (v43 = v39[6]) == 0)
  {
LABEL_56:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2041, (uint64_t)"ref_state", 9, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0);
LABEL_57:
    abort();
  }
  *(_QWORD *)&v20.f64[1] = v22.i64[0];
  *(_QWORD *)&v35.f64[1] = v36;
  v19.f64[1] = v21;
  v44 = v23.f64[0];
  v45 = v37;
  v46 = v3.f64[0];
  v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v25.f64[0]), v35, v40), v19, v24);
  v3.f64[0] = vmulq_f64(v23, v25).f64[0] + v37 * v40 + v3.f64[0] * v24;
  __asm { FMOV            V20.2D, #1.0 }
  *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vnegq_f64(v3);
  v52 = *(double *)(v43 + 16);
  v53 = *(float64x2_t *)(v43 + 24);
  v54 = *(double *)(v43 + 64);
  _Q23 = *(float64x2_t *)(v43 + 48);
  _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v43, (int64x2_t)v53);
  v57 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q1, 1);
  v58 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
  v59 = *(double *)(v43 + 88);
  v60 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v43, (int64x2_t)v53);
  v61 = vmlaq_laneq_f64(vmulq_n_f64(v60, *(double *)(v43 + 72)), _Q1, *(float64x2_t *)(v43 + 72), 1);
  _Q1.f64[0] = v52;
  _Q1.f64[1] = *(float64_t *)(v43 + 40);
  _Q27 = vmlaq_n_f64(v61, _Q1, v59);
  _D25 = *(_QWORD *)(v43 + 80);
  __asm { FMLA            D1, D25, V23.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + v54 * v59;
  _Q4 = (int64x2_t)vextq_s8(v58, v57, 8uLL);
  v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v60, _Q4), _Q27.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v60, _Q4), _Q27, 1), _Q23, _Q1.f64[0]);
  __asm { FMLA            D4, D19, V27.D[1] }
  v66 = *(double *)_Q4.i64 + v54 * _Q1.f64[0];
  v67 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, *(double *)v43), v35, *(float64x2_t *)v43, 1), v19, v52), (float64x2_t)0, v47);
  v68 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v23.f64[0], *(double *)v43), (float64x2_t)*(unint64_t *)&v45, *(float64x2_t *)v43, 1), (float64x2_t)*(unint64_t *)&v46, v52), (float64x2_t)0, _Q20);
  v69 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v53.f64[0]), v35, v53, 1), v19, _Q1.f64[1]), (float64x2_t)0, v47);
  v70 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v44, v53.f64[0]), (float64x2_t)*(unint64_t *)&v45, v53, 1), (float64x2_t)*(unint64_t *)&v46, _Q1.f64[1]), (float64x2_t)0, _Q20);
  _Q21 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, _Q23.f64[0]), v35, _Q23, 1), v19, v54), (float64x2_t)0, v47);
  *(_QWORD *)&v72 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v44, _Q23.f64[0]), (float64x2_t)*(unint64_t *)&v45, _Q23, 1), (float64x2_t)*(unint64_t *)&v46, v54), (float64x2_t)0, _Q20);
  v73 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v65.f64[0]), v35, v65, 1), v19, v66), v47);
  v74 = *(_OWORD *)&vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v44, v65.f64[0]), (float64x2_t)*(unint64_t *)&v45, v65, 1), (float64x2_t)*(unint64_t *)&v46, v66), v3) ^ 0x8000000000000000;
  v75 = *(_QWORD *)&v73.f64[1] ^ 0x8000000000000000;
  v76 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v67, (int64x2_t)v69), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v73.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v73.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)v67, (int64x2_t)v69)), (float64x2_t)vdupq_n_s64(v74), (float64x2_t)vzip1q_s64(v68, v70));
  _D3 = v75;
  __asm { FMLA            D2, D3, V21.D[1] }
  v79 = vmlad_n_f64(_D2, *(double *)&v74, v72);
  v81 = *((float64x2_t *)a3 + 3);
  v80 = *((float64x2_t *)a3 + 4);
  v83 = *((float64x2_t *)a3 + 5);
  v82 = *((float64x2_t *)a3 + 6);
  v85 = *((float64x2_t *)a3 + 7);
  v84 = *((float64x2_t *)a3 + 8);
  v87 = *((float64x2_t *)a3 + 9);
  v86 = *((float64x2_t *)a3 + 10);
  v88 = vaddq_f64(v87, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v76.f64[0]), v83, v76, 1), v85, v79));
  *a1 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v81, v67.f64[0]), v83, v69.f64[0]), v85, _Q21.f64[0]), (float64x2_t)0, v87);
  a1[1] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, v67.f64[0]), v82, v69.f64[0]), v84, _Q21.f64[0]), (float64x2_t)0, v86);
  a1[2] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v81, v67, 1), v83, v69, 1), v85, _Q21, 1), (float64x2_t)0, v87);
  a1[3] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v80, v67, 1), v82, v69, 1), v84, _Q21, 1), (float64x2_t)0, v86);
  a1[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v81, *(double *)v68.i64), v83, *(double *)v70.i64), v85, v72), (float64x2_t)0, v87);
  a1[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, *(double *)v68.i64), v82, *(double *)v70.i64), v84, v72), (float64x2_t)0, v86);
  result = vaddq_f64(v86, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v80, v76.f64[0]), v82, v76, 1), v84, v79));
  a1[6] = v88;
  a1[7] = result;
  return result;
}

void sub_20F328EE8(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  size_t v10;
  _BYTE *v11;
  float64_t v12;
  float64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  void *v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  __int128 *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *i;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  char *v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char *v120;
  void *v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  float64x2_t *v129;
  float64x2_t *v130;
  _QWORD *v131;
  uint64_t v132;
  _BYTE *v133;
  int64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  int64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  void *v157;
  void *v158;
  unint64_t *v159;
  unint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  uint64_t (**v171)();
  __int128 v172;
  uint64_t v173;
  void *v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  char *v188;
  void *v189;
  uint64_t (**v190)();
  char *v191;
  int64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  int64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  void **v211;
  void **v212;
  _QWORD *v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  __int128 *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  _QWORD *v235;
  _QWORD *v236;
  char *v237;
  _QWORD *v238;
  _QWORD *v239;
  void *v240;
  _QWORD *v241;
  _QWORD *v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t *v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unsigned int v269;
  float64x2_t v271;
  char v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  unint64_t v288;
  int8x16_t v289;
  unint64_t v290;
  float64x2_t v291;
  float64x2_t *v292;
  double v293;
  float64x2_t v294;
  float64x2_t v296;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  int8x16_t v310;
  int64x2_t v311;
  float64x2_t v314;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v337;
  uint64_t v338;
  int8x16_t v341;
  _QWORD *v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t j;
  uint64_t *v347;
  unint64_t v348;
  __int128 v349;
  __int128 *v350;
  uint64_t v351;
  float64x2_t v352;
  float64x2_t v353;
  double v354;
  float64x2_t v355;
  __int128 *v356;
  double v357;
  double v360;
  float64x2_t v362;
  int8x16_t v363;
  float64x2_t v365;
  int8x16_t v366;
  int64x2_t v367;
  float64x2_t *v368;
  double v369;
  float64x2_t v371;
  float64x2_t *v372;
  float64_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  int8x8_t v384;
  int v385;
  unsigned int v386;
  unint64_t v387;
  uint8x8_t v388;
  unint64_t v389;
  uint64_t **v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t *v399;
  uint64_t v400;
  unsigned int v401;
  uint64_t v402;
  unint64_t v403;
  _QWORD *v404;
  uint64_t *v405;
  uint64_t v406;
  unint64_t v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  float64x2_t v414;
  int64x2_t v415;
  double v416;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  int8x16_t v421;
  float64x2_t v422;
  float64x2_t v425;
  float64x2_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  void *v431;
  void *v432;
  std::ios_base *v433;
  _QWORD *v434;
  _QWORD *v435;
  void *v436;
  void *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  float64x2_t v441;
  int64x2_t v442;
  double v443;
  float64x2_t v445;
  float64x2_t v446;
  int8x16_t v447;
  double v448;
  float64x2_t v449;
  float64x2_t v452;
  float64x2_t v453;
  uint64_t *v454;
  _QWORD *v455;
  uint64_t *v456;
  uint64_t *v457;
  unsigned __int8 v458;
  uint64_t v459;
  int v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  std::ios_base *v466;
  uint64_t v467;
  size_t v468;
  _BYTE *v469;
  float64_t v470;
  const void **v471;
  const void *v472;
  uint64_t v473;
  uint64_t v474;
  _BYTE *v475;
  uint64_t v476;
  size_t v477;
  __int128 *v478;
  float64_t v479;
  const void **v480;
  const void *v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  uint64_t v485;
  size_t v486;
  const char *v487;
  unsigned __int8 v488;
  const char *v489;
  size_t v490;
  _BYTE *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  char *v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  NSObject *v499;
  size_t v500;
  void *v501;
  _QWORD *v502;
  size_t v503;
  size_t v504;
  _BYTE *v505;
  void *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char v510;
  char *v511;
  uint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  char *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  unint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  uint64_t v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  const char *v552;
  uint64_t *v553;
  unint64_t v554;
  _QWORD *v555;
  __int128 v556;
  int v557;
  const char *v558;
  int v559;
  const char *v560;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  unint64_t *v564;
  unint64_t v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  uint64_t *v574;
  unint64_t v575;
  _QWORD *v576;
  __int128 v577;
  int v578;
  const char *v579;
  int v580;
  const char *v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  unint64_t *v585;
  unint64_t v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  void *v598;
  uint64_t v599;
  int v600;
  unint64_t v601;
  unint64_t v602;
  void **v604;
  uint64_t v605;
  char v606;
  unint64_t v607;
  size_t v608;
  _BYTE *v609;
  float64_t v610;
  float64_t v611;
  uint64_t v612;
  uint64_t v613;
  _BYTE *v614;
  uint64_t v615;
  const char *v616;
  size_t v617;
  unsigned __int8 v618;
  unsigned __int8 v619;
  const char *v620;
  size_t v621;
  void **v622;
  uint64_t v623;
  uint64_t v624;
  void **v625;
  void *v626;
  unint64_t v627;
  NSObject *v628;
  uint64_t v629;
  uint64_t v630;
  size_t v631;
  void *v632;
  _QWORD *v633;
  size_t v634;
  size_t v635;
  _BYTE *v636;
  const char *v637;
  unint64_t v638;
  void *v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  char v644;
  char *v645;
  uint64_t v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  void *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  void *v660;
  char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  const char *v665;
  uint64_t v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  std::__shared_weak_count *v670;
  unint64_t *v671;
  unint64_t v672;
  uint64_t v673;
  std::__shared_weak_count *v674;
  unint64_t *v675;
  unint64_t v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  const char *v686;
  std::__shared_weak_count *v687;
  unint64_t *v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  _QWORD *v692;
  _QWORD *v693;
  void **v694;
  uint64_t v695;
  unsigned __int8 v696;
  uint64_t v697;
  uint64_t k;
  unsigned __int8 v699;
  int v700;
  unint64_t v701;
  void *v702;
  void *v703;
  int8x16_t v704;
  void *v705;
  uint64_t v706;
  char *v709;
  char *v710;
  uint64_t v711;
  unint64_t v712;
  const char *v713;
  int v715;
  float64_t v716;
  char *__s;
  char *__sa;
  uint64_t v719;
  __int128 v720;
  unint64_t v721;
  uint64_t v722;
  char v723;
  void *v724;
  void *v725;
  uint64_t v726;
  void *v727;
  __int128 v728;
  void *v729;
  __int128 v730;
  int8x16_t v731;
  double v732;
  char v733;
  void *v734;
  char *v735;
  char *v736;
  uint64_t v737;
  void *v738;
  __int128 v739;
  _BYTE v740[32];
  double v741;
  float64x2_t v742;
  double v743;
  __int128 v744;
  __int128 v745;
  int v746;
  _QWORD v747[19];
  uint64_t v748[3];
  uint64_t *v749;
  __int128 v750;
  int64_t v751;
  __int128 *v752;
  _BYTE v753[24];
  _BYTE *v754;
  _BYTE v755[24];
  _BYTE *v756;
  const char *v757;
  int v758;
  const char *v759;
  __int128 v760;
  void *object[8];
  float64x2_t v762;
  _BYTE v763[40];
  uint64_t v764;
  uint64_t v765[20];
  _BYTE __dst[24];
  _BYTE *v767;
  std::__shared_weak_count *v768;
  _BYTE v769[40];
  char *v770;
  const char *v771;
  unint64_t v772;
  std::__shared_weak_count *v773;
  uint64_t v774;

  v774 = *MEMORY[0x24BDAC8D0];
  sub_20F31DCD4(&v750);
  v719 = a1;
  if (**(int **)(v750 + 56) <= 2)
  {
    v5 = *(unsigned __int8 *)(v750 + 72);
    v6 = sub_20E8C31DC(v750, "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (v5 || v6 != 0)
    {
      sub_20E863438((uint64_t)&v738);
      sub_20E86A980((_QWORD *)&v739 + 1, (uint64_t)"[CM][", 5);
      v9 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v9, (uint64_t)"] Trigger optimize map()", 24);
      if ((v746 & 0x10) != 0)
      {
        v12 = *((double *)&v745 + 1);
        if (*((_QWORD *)&v745 + 1) < *(_QWORD *)&v742.f64[1])
        {
          *((_QWORD *)&v745 + 1) = *(_QWORD *)&v742.f64[1];
          v12 = v742.f64[1];
        }
        v13 = v742.f64[0];
        v10 = *(_QWORD *)&v12 - *(_QWORD *)&v742.f64[0];
        if (*(_QWORD *)&v12 - *(_QWORD *)&v742.f64[0] > 0x7FFFFFFFFFFFFFF7uLL)
          goto LABEL_63;
      }
      else
      {
        if ((v746 & 8) == 0)
        {
          v10 = 0;
          __dst[23] = 0;
          v11 = __dst;
          goto LABEL_19;
        }
        v13 = *(double *)&v740[16];
        v10 = *(_QWORD *)&v741 - *(_QWORD *)&v740[16];
        if (*(_QWORD *)&v741 - *(_QWORD *)&v740[16] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_63:
          sub_20E860B7C();
      }
      if (v10 >= 0x17)
      {
        v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v14 = v10 | 7;
        v15 = v14 + 1;
        v11 = operator new(v14 + 1);
        *(_QWORD *)&__dst[8] = v10;
        *(_QWORD *)&__dst[16] = v15 | 0x8000000000000000;
        *(_QWORD *)__dst = v11;
      }
      else
      {
        __dst[23] = v10;
        v11 = __dst;
        if (!v10)
        {
LABEL_19:
          v11[v10] = 0;
          *(_QWORD *)v769 = &v750;
          *(std::chrono::steady_clock::time_point *)&v769[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v769[16] = std::chrono::system_clock::now();
          *(_DWORD *)&v769[24] = 2;
          *(_QWORD *)&v769[32] = "unknown file";
          LODWORD(v770) = 2079;
          v772 = 0;
          v773 = 0;
          v771 = "unknown function";
          v16 = __dst;
          if (__dst[23] < 0)
            v16 = *(char **)__dst;
          __s = v16;
          v17 = **(_QWORD **)v769;
          if (*(char *)(**(_QWORD **)v769 + 39) < 0)
          {
            v19 = *(const char **)(v17 + 16);
            v18 = *(_QWORD *)(v17 + 24);
            v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v21 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            v18 = *(unsigned __int8 *)(**(_QWORD **)v769 + 39);
            v19 = (const char *)(v17 + 16);
            v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v20 & 1) != 0)
              goto LABEL_25;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
              operator delete(object[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_25:
          if (byte_254A4A4F8[23] >= 0)
            v22 = byte_254A4A4F8;
          else
            v22 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v23 = byte_254A4A4F8[23];
          else
            v23 = *(_QWORD *)&byte_254A4A4F8[8];
          object[0] = os_log_create(v22, v19);
          v24 = &object[1];
          if (v23 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v23 >= 0x17)
          {
            v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17)
              v25 = v23 | 7;
            v26 = v25 + 1;
            v24 = (void **)operator new(v25 + 1);
            object[3] = (void *)(v26 | 0x8000000000000000);
            object[1] = v24;
            object[2] = (void *)v23;
          }
          else
          {
            HIBYTE(object[3]) = v23;
            if (!v23)
            {
LABEL_39:
              *((_BYTE *)v24 + v23) = 0;
              LOBYTE(object[4]) = 1;
              v27 = &object[5];
              if (v18 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v18 >= 0x17)
              {
                v28 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v18 | 7) != 0x17)
                  v28 = v18 | 7;
                v29 = v28 + 1;
                v27 = (void **)operator new(v28 + 1);
                object[7] = (void *)(v29 | 0x8000000000000000);
                object[5] = v27;
                object[6] = (void *)v18;
              }
              else
              {
                HIBYTE(object[7]) = v18;
                if (!v18)
                {
LABEL_47:
                  *((_BYTE *)v27 + v18) = 0;
                  LOBYTE(v762.f64[0]) = 1;
                  v30 = object[0];
                  if (SHIBYTE(object[7]) < 0)
                    operator delete(object[5]);
                  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
                    operator delete(object[1]);
                  if (object[0])
                    os_release(object[0]);
                  if (!v7 || !*(_QWORD *)(v7 + 24))
                  {
                    os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);
                    LODWORD(object[0]) = 136315138;
                    *(void **)((char *)object + 4) = __s;
                    v37 = (void *)_os_log_send_and_compose_impl();
                    if (v37)
                      free(v37);
                    goto LABEL_130;
                  }
                  v31 = _os_log_pack_size();
                  v32 = operator new(v31, (std::align_val_t)8uLL);
                  v33 = (_QWORD *)operator new();
                  *v33 = &off_24C9ABB80;
                  v33[1] = 0;
                  v33[2] = 0;
                  v33[3] = v32;
                  *(_QWORD *)v755 = v32;
                  *(_QWORD *)&v755[8] = v32;
                  v757 = 0;
                  *(_QWORD *)&v755[16] = v33;
                  v756 = 0;
                  v34 = strlen(__s);
                  if (v34 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v35 = v34;
                  if (v34 >= 0x17)
                  {
                    v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v34 | 7) != 0x17)
                      v38 = v34 | 7;
                    v39 = v38 + 1;
                    v36 = operator new(v38 + 1);
                    *(_QWORD *)&v730 = v35;
                    *((_QWORD *)&v730 + 1) = v39 | 0x8000000000000000;
                    v729 = v36;
                  }
                  else
                  {
                    HIBYTE(v730) = v34;
                    v36 = &v729;
                    if (!v34)
                    {
LABEL_68:
                      *((_BYTE *)v36 + v35) = 0;
                      v40 = v729;
                      *(_QWORD *)v753 = v730;
                      *(_QWORD *)&v753[7] = *(_QWORD *)((char *)&v730 + 7);
                      v41 = HIBYTE(v730);
                      v42 = (char *)operator new(0x38uLL);
                      *((_QWORD *)v42 + 1) = 0;
                      *((_QWORD *)v42 + 2) = 0;
                      *((_QWORD *)v42 + 3) = off_24C9ABC20;
                      *(_QWORD *)v42 = &off_24C9ABBD0;
                      v43 = *(_QWORD *)v753;
                      *((_QWORD *)v42 + 4) = v40;
                      *((_QWORD *)v42 + 5) = v43;
                      *(_QWORD *)(v42 + 47) = *(_QWORD *)&v753[7];
                      v42[55] = v41;
                      *(_QWORD *)v753 = 0;
                      *(_QWORD *)&v753[7] = 0;
                      v44 = (std::__shared_weak_count *)v757;
                      v756 = v42 + 24;
                      v757 = v42;
                      if (v44)
                      {
                        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
                        do
                          v46 = __ldaxr(p_shared_owners);
                        while (__stlxr(v46 - 1, p_shared_owners));
                        if (!v46)
                        {
                          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                          std::__shared_weak_count::__release_weak(v44);
                        }
                      }
                      *(_OWORD *)object = *(_OWORD *)v755;
                      v47 = v756;
                      object[2] = *(void **)&v755[16];
                      if (*(_QWORD *)&v755[16])
                      {
                        v48 = (unint64_t *)(*(_QWORD *)&v755[16] + 8);
                        do
                          v49 = __ldxr(v48);
                        while (__stxr(v49 + 1, v48));
                      }
                      v50 = (std::__shared_weak_count *)v757;
                      object[3] = v47;
                      object[4] = (void *)v757;
                      if (v757)
                      {
                        v51 = (unint64_t *)(v757 + 8);
                        do
                          v52 = __ldxr(v51);
                        while (__stxr(v52 + 1, v51));
                        object[5] = v47;
                        do
                          v53 = __ldaxr(v51);
                        while (__stlxr(v53 - 1, v51));
                        if (!v53)
                        {
                          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                          std::__shared_weak_count::__release_weak(v50);
                        }
                      }
                      else
                      {
                        object[5] = v47;
                      }
                      v54 = v5;
                      v55 = *(std::__shared_weak_count **)&v755[16];
                      if (*(_QWORD *)&v755[16])
                      {
                        v56 = (unint64_t *)(*(_QWORD *)&v755[16] + 8);
                        do
                          v57 = __ldaxr(v56);
                        while (__stlxr(v57 - 1, v56));
                        if (!v57)
                        {
                          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                          std::__shared_weak_count::__release_weak(v55);
                        }
                      }
                      v58 = object[0];
                      if (*((char *)object[5] + 31) >= 0)
                        v59 = (char *)object[5] + 8;
                      else
                        v59 = (char *)*((_QWORD *)object[5] + 1);
                      v60 = _os_log_pack_fill();
                      *(_DWORD *)v60 = 136315138;
                      *(_QWORD *)(v60 + 4) = v59;
                      v61 = operator new();
                      v62 = *(unsigned __int8 *)(v17 + 39);
                      if ((v62 & 0x80u) == 0)
                        v63 = v17 + 16;
                      else
                        v63 = *(_QWORD *)(v17 + 16);
                      if ((v62 & 0x80u) != 0)
                        v62 = *(_QWORD *)(v17 + 24);
                      *(_QWORD *)v61 = v58;
                      *(_OWORD *)(v61 + 8) = *(_OWORD *)&object[1];
                      object[1] = 0;
                      object[2] = 0;
                      *(_OWORD *)(v61 + 24) = *(_OWORD *)&object[3];
                      object[3] = 0;
                      object[4] = 0;
                      *(_QWORD *)(v61 + 40) = v63;
                      *(_QWORD *)(v61 + 48) = v62;
                      *(_BYTE *)(v61 + 56) = 2;
                      v729 = 0;
                      *(_QWORD *)v755 = v61;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v755);
                      v5 = v54;
                      v64 = *(_QWORD *)v755;
                      *(_QWORD *)v755 = 0;
                      if (v64)
                      {
                        v65 = *(std::__shared_weak_count **)(v64 + 32);
                        if (v65)
                        {
                          v66 = (unint64_t *)&v65->__shared_owners_;
                          do
                            v67 = __ldaxr(v66);
                          while (__stlxr(v67 - 1, v66));
                          if (!v67)
                          {
                            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                            std::__shared_weak_count::__release_weak(v65);
                          }
                        }
                        v68 = *(std::__shared_weak_count **)(v64 + 16);
                        if (v68)
                        {
                          v69 = (unint64_t *)&v68->__shared_owners_;
                          do
                            v70 = __ldaxr(v69);
                          while (__stlxr(v70 - 1, v69));
                          if (!v70)
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                          }
                        }
                        MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
                        v71 = v729;
                        v729 = 0;
                        if (v71)
                        {
                          v72 = (std::__shared_weak_count *)*((_QWORD *)v71 + 4);
                          if (v72)
                          {
                            v73 = (unint64_t *)&v72->__shared_owners_;
                            do
                              v74 = __ldaxr(v73);
                            while (__stlxr(v74 - 1, v73));
                            if (!v74)
                            {
                              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                              std::__shared_weak_count::__release_weak(v72);
                            }
                          }
                          v75 = (std::__shared_weak_count *)*((_QWORD *)v71 + 2);
                          if (v75)
                          {
                            v76 = (unint64_t *)&v75->__shared_owners_;
                            do
                              v77 = __ldaxr(v76);
                            while (__stlxr(v77 - 1, v76));
                            if (!v77)
                            {
                              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                              std::__shared_weak_count::__release_weak(v75);
                            }
                          }
                          MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
                        }
                      }
                      v78 = (std::__shared_weak_count *)object[4];
                      if (object[4])
                      {
                        v79 = (unint64_t *)((char *)object[4] + 8);
                        do
                          v80 = __ldaxr(v79);
                        while (__stlxr(v80 - 1, v79));
                        if (!v80)
                        {
                          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                          std::__shared_weak_count::__release_weak(v78);
                        }
                      }
                      v81 = (std::__shared_weak_count *)object[2];
                      if (object[2])
                      {
                        v82 = (unint64_t *)((char *)object[2] + 8);
                        do
                          v83 = __ldaxr(v82);
                        while (__stlxr(v83 - 1, v82));
                        if (!v83)
                        {
                          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                          std::__shared_weak_count::__release_weak(v81);
                        }
                      }
LABEL_130:
                      if (v5)
                      {
                        v84 = __dst;
                        if (__dst[23] < 0)
                          v84 = *(const char **)__dst;
                        sub_20E8C003C((uint64_t)v769, "%s", v84);
                        sub_20E863570((uint64_t)v769);
                      }
                      sub_20E863570((uint64_t)v769);
                      v85 = v773;
                      if (v773)
                      {
                        v86 = (unint64_t *)&v773->__shared_owners_;
                        do
                          v87 = __ldaxr(v86);
                        while (__stlxr(v87 - 1, v86));
                        if (!v87)
                        {
                          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                          std::__shared_weak_count::__release_weak(v85);
                        }
                      }
                      if ((__dst[23] & 0x80000000) != 0)
                        operator delete(*(void **)__dst);
                      v738 = (void *)*MEMORY[0x24BEDB7F0];
                      v88 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(void **)((char *)&v738 + *((_QWORD *)v738 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                      *((_QWORD *)&v739 + 1) = v88;
                      *(_QWORD *)v740 = MEMORY[0x24BEDB848] + 16;
                      if (SBYTE7(v745) < 0)
                        operator delete((void *)v744);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](v747);
                      goto LABEL_144;
                    }
                  }
                  memcpy(v36, __s, v35);
                  goto LABEL_68;
                }
              }
              memmove(v27, v19, v18);
              goto LABEL_47;
            }
          }
          memmove(v24, v22, v23);
          goto LABEL_39;
        }
      }
      memmove(v11, *(const void **)&v13, v10);
      goto LABEL_19;
    }
  }
LABEL_144:
  v729 = 0;
  v730 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v704 = _Q0;
  v731 = _Q0;
  v732 = -1.0;
  v733 = 0;
  v93 = *(_QWORD **)(a1 + 2824);
  v94 = *(_QWORD **)(a1 + 2832);
  if (v93 != v94)
  {
    v95 = 0;
    __sa = 0;
    v711 = a1 + 2872;
    while (*(_BYTE *)(v93[29] + 32))
    {
LABEL_147:
      v93 += 559;
      if (v93 == v94)
        goto LABEL_193;
    }
    sub_20F26A2D8(v93, v711, a2, (uint64_t)&v738);
    v96 = *(__int128 **)&v740[16];
    if ((uint64_t)(*(_QWORD *)&v740[24] - *(_QWORD *)&v740[16]) < 1)
    {
      i = v95;
      v103 = __sa;
    }
    else
    {
      v97 = (*(_QWORD *)&v740[24] - *(_QWORD *)&v740[16]) / 40;
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v730 + 1) - (_QWORD)v95) >> 3)) >= v97)
      {
        if (v97 <= 0)
        {
          v105 = *(_QWORD *)&v740[16] + 40 * v97;
          v106 = &v95[-40 * v97];
          for (i = v95; v106 < v95; i += 40)
          {
            v107 = *(_OWORD *)v106;
            v108 = *((_OWORD *)v106 + 1);
            *((_QWORD *)i + 4) = *((_QWORD *)v106 + 4);
            *(_OWORD *)i = v107;
            *((_OWORD *)i + 1) = v108;
            v106 += 40;
          }
          *(_QWORD *)&v730 = i;
          if (v95 != &v95[40 * v97])
            memmove(&v95[40 * v97], v95, -40 * v97 - 4);
          if ((__int128 *)v105 != v96)
            memmove(v95, v96, v105 - (_QWORD)v96 - 4);
          v103 = __sa;
          goto LABEL_185;
        }
        v104 = *(_QWORD *)&v740[24] - *(_QWORD *)&v740[16];
        if (*(_QWORD *)&v740[24] != *(_QWORD *)&v740[16])
          memmove(v95, *(const void **)&v740[16], v104 - 4);
        *(_QWORD *)&v730 = &v95[v104];
        i = &v95[v104];
      }
      else
      {
        v98 = 0xCCCCCCCCCCCCCCCDLL * ((v95 - (_BYTE *)v729) >> 3);
        v99 = v98 + v97;
        if (v98 + v97 > 0x666666666666666)
          sub_20E867F44();
        if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v730 + 1) - (_QWORD)v729) >> 3) > v99)
          v99 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v730 + 1) - (_QWORD)v729) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v730 + 1) - (_QWORD)v729) >> 3) >= 0x333333333333333)
          v100 = 0x666666666666666;
        else
          v100 = v99;
        if (v100)
        {
          if (v100 > 0x666666666666666)
            sub_20E877A38();
          v101 = (char *)operator new(40 * v100);
        }
        else
        {
          v101 = 0;
        }
        v109 = &v101[40 * v98];
        v110 = 40 * v97;
        v111 = &v109[40 * v97];
        v112 = v109;
        do
        {
          v113 = *v96;
          v114 = v96[1];
          *((_QWORD *)v112 + 4) = *((_QWORD *)v96 + 4);
          *(_OWORD *)v112 = v113;
          *((_OWORD *)v112 + 1) = v114;
          v112 += 40;
          v96 = (__int128 *)((char *)v96 + 40);
          v110 -= 40;
        }
        while (v110);
        v115 = (char *)v729;
        if (v729 == v95)
        {
          v119 = 0;
        }
        else
        {
          v116 = v95;
          do
          {
            v117 = *(_OWORD *)(v116 - 40);
            v118 = *(_OWORD *)(v116 - 24);
            *((_DWORD *)v109 - 2) = *((_DWORD *)v116 - 2);
            *(_OWORD *)(v109 - 24) = v118;
            *(_OWORD *)(v109 - 40) = v117;
            v109 -= 40;
            v116 -= 40;
          }
          while (v116 != v115);
          v119 = v730 - (_QWORD)v95;
          if ((char *)v730 != v95)
            memmove(v111, v95, v119 - 4);
        }
        v120 = &v101[40 * v100];
        v121 = v729;
        i = &v111[v119];
        v729 = v109;
        *(_QWORD *)&v730 = &v111[v119];
        *((_QWORD *)&v730 + 1) = v120;
        if (v121)
          operator delete(v121);
      }
      v103 = __sa;
    }
LABEL_185:
    v122 = v732;
    if (v732 < v743)
      v122 = v743;
    v732 = v122;
    v731 = vbslq_s8((int8x16_t)vcgtq_f64(v742, (float64x2_t)v731), (int8x16_t)v742, v731);
    v733 |= v744;
    if (*(_QWORD *)&v740[16])
    {
      *(_QWORD *)&v740[24] = *(_QWORD *)&v740[16];
      operator delete(*(void **)&v740[16]);
    }
    if (v740[0] && v738)
    {
      *(_QWORD *)&v739 = v738;
      operator delete(v738);
    }
    __sa = v103 + 1;
    v95 = i;
    goto LABEL_147;
  }
  __sa = 0;
LABEL_193:
  v123 = v719;
  if (*(_BYTE *)(v719 + 3016))
  {
    v124 = *(_QWORD *)(v719 + 3008);
    if (*(_BYTE *)(v124 + 80)
      || *(_BYTE *)(v124 + 200) && *(_QWORD *)(v124 + 184) && *(_QWORD *)(v124 + 136) != *(_QWORD *)(v124 + 144))
    {
      sub_20F4452DC((uint64_t)&v729, v124);
    }
  }
  *(_QWORD *)(v719 + 2880) = *(_QWORD *)(v719 + 2872);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v727 = 0;
  v728 = 0uLL;
  v125 = *(_QWORD *)(v719 + 2832);
  v126 = *(_QWORD *)(v719 + 2824);
  v127 = 0x3175B2258D8284CFLL * ((v125 - v126) >> 3);
  if (v127 <= 1)
  {
    if (v125 - v126 == 4472)
      sub_20F34166C((char **)&v727, 0x3175B2258D8284CFLL * ((v125 - v126) >> 3), &xmmword_2103AF780);
    v128 = 0;
    v129 = (float64x2_t *)v727;
    v130 = (float64x2_t *)v728;
    if (v727 != (void *)v728)
      goto LABEL_419;
    goto LABEL_788;
  }
  v724 = 0;
  v725 = 0;
  v726 = 0;
  v738 = 0;
  v739 = 0uLL;
  if (v125 == v126)
  {
    v154 = 0;
    v724 = 0;
    v725 = 0;
    v726 = 0;
    LOBYTE(v722) = 0;
    v723 = 0;
    if (*(_BYTE *)(v719 + 2652))
      goto LABEL_238;
    goto LABEL_244;
  }
  if (v127 >> 61)
    sub_20E867F44();
  v131 = operator new(0x8BAD912C6C142678 * ((v125 - v126) >> 3));
  v738 = v131;
  *(_QWORD *)&v739 = v131;
  *((_QWORD *)&v739 + 1) = &v131[0xF175B2258D8284CFLL * ((v125 - v126) >> 3)];
  do
  {
    while (1)
    {
      while (1)
      {
        v132 = *(_QWORD *)(v126 + 16);
        if ((unint64_t)v131 >= *((_QWORD *)&v739 + 1))
          break;
        *v131++ = v132;
        *(_QWORD *)&v739 = v131;
        v126 += 4472;
        if (v126 == v125)
          goto LABEL_235;
      }
      v133 = v738;
      v134 = (char *)v131 - (_BYTE *)v738;
      v135 = ((char *)v131 - (_BYTE *)v738) >> 3;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 61)
        sub_20E867F44();
      v137 = *((_QWORD *)&v739 + 1) - (_QWORD)v738;
      if ((uint64_t)(*((_QWORD *)&v739 + 1) - (_QWORD)v738) >> 2 > v136)
        v136 = v137 >> 2;
      v138 = (unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v136;
      if (!v138)
        break;
      if (v138 >> 61)
        sub_20E877A38();
      v139 = operator new(8 * v138);
      v140 = &v139[8 * v135];
      v141 = &v139[8 * v138];
      *v140 = v132;
      v142 = (uint64_t)(v140 + 1);
      v143 = (char *)v131 - v133;
      if (v131 == (_QWORD *)v133)
        goto LABEL_222;
LABEL_215:
      v144 = v143 - 8;
      if (v144 < 0x168)
      {
        v145 = v131;
        goto LABEL_217;
      }
      v147 = ((char *)(v131 - 1) - v133) & 0xFFFFFFFFFFFFFFF8;
      if (&v139[v134 - 8 - v147] > &v139[v134 - 8])
      {
        v145 = v131;
        do
        {
LABEL_217:
          v146 = *--v145;
          *--v140 = v146;
        }
        while (v145 != (_QWORD *)v133);
        goto LABEL_218;
      }
      if ((_QWORD *)((char *)v131 - v147 - 8) > v131 - 1)
      {
        v145 = v131;
        goto LABEL_217;
      }
      if ((unint64_t)((char *)v131 - v139 - v134) < 0x20)
      {
        v145 = v131;
        goto LABEL_217;
      }
      v148 = (v144 >> 3) + 1;
      v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
      v145 = &v131[v149 / 0xFFFFFFFFFFFFFFF8];
      v140 = (_QWORD *)((char *)v140 - v149);
      v150 = &v139[8 * v135 - 16];
      v151 = (__int128 *)(v131 - 2);
      v152 = v148 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v153 = *v151;
        *(v150 - 1) = *(v151 - 1);
        *v150 = v153;
        v150 -= 2;
        v151 -= 2;
        v152 -= 4;
      }
      while (v152);
      if (v148 != (v148 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_217;
LABEL_218:
      v131 = v738;
      v738 = v140;
      *(_QWORD *)&v739 = v142;
      *((_QWORD *)&v739 + 1) = v141;
      if (v131)
        goto LABEL_223;
      v131 = (_QWORD *)v142;
      v123 = v719;
      *(_QWORD *)&v739 = v131;
      v126 += 4472;
      if (v126 == v125)
        goto LABEL_235;
    }
    v139 = 0;
    v140 = (_QWORD *)(8 * v135);
    v141 = 0;
    *(_QWORD *)(8 * v135) = v132;
    v142 = 8 * v135 + 8;
    v143 = (char *)v131 - v133;
    if (v131 != (_QWORD *)v133)
      goto LABEL_215;
LABEL_222:
    v738 = v140;
    *(_QWORD *)&v739 = v142;
    *((_QWORD *)&v739 + 1) = v141;
LABEL_223:
    operator delete(v131);
    v131 = (_QWORD *)v142;
    v123 = v719;
    *(_QWORD *)&v739 = v131;
    v126 += 4472;
  }
  while (v126 != v125);
LABEL_235:
  v154 = v738;
  v155 = *((_QWORD *)&v739 + 1);
  if (v724)
  {
    v725 = v724;
    operator delete(v724);
  }
  v724 = v154;
  v725 = v131;
  v726 = v155;
  LOBYTE(v722) = 0;
  v723 = 0;
  if (*(_BYTE *)(v123 + 2652))
  {
LABEL_238:
    v156 = (uint64_t *)(v123 + 2808);
    goto LABEL_245;
  }
LABEL_244:
  v156 = (uint64_t *)(*v154 + 160);
LABEL_245:
  v722 = *v156;
  v723 = 1;
  object[0] = *(void **)(v123 + 2064);
  sub_20F3B9C98((uint64_t)object);
  if (v727)
  {
    *(_QWORD *)&v728 = v727;
    operator delete(v727);
  }
  v157 = v738;
  v727 = v738;
  v158 = (void *)v739;
  v728 = v739;
  v738 = 0;
  v739 = 0uLL;
  *(int8x16_t *)v740 = v704;
  *(_QWORD *)&v740[16] = 0xBFF0000000000000;
  v740[24] = 0;
  if ((a2 & 1) == 0)
  {
    if (v157 == v158)
    {
LABEL_346:
      v221 = *(_QWORD *)(v123 + 2832) - *(_QWORD *)(v123 + 2824);
      if (v221)
        sub_20F34166C((char **)&v727, 0x3175B2258D8284CFLL * (v221 >> 3), &xmmword_2103AF780);
    }
LABEL_348:
    v222 = *(_QWORD *)(v123 + 3072);
    *(_BYTE *)(v222 + 32) = 1;
    ++*(_DWORD *)(v222 + 28);
    ++*(_DWORD *)(v222 + 36);
    goto LABEL_411;
  }
  sub_20F24AC38(&v724, &v727, (uint64_t **)(v123 + 2896), (uint64_t)object, *(double *)(v123 + 616), *(double *)(v123 + 624), *(double *)(v123 + 632));
  if (v738)
  {
    *(_QWORD *)&v739 = v738;
    operator delete(v738);
  }
  v159 = (unint64_t *)object[0];
  v738 = object[0];
  v739 = *(_OWORD *)&object[1];
  *(_OWORD *)v740 = *(_OWORD *)&object[3];
  *(_OWORD *)&v740[9] = *(_OWORD *)((char *)&object[4] + 1);
  v160 = (unint64_t *)object[1];
  if (object[0] == object[1])
  {
    if (v727 == (void *)v728)
      goto LABEL_346;
    goto LABEL_348;
  }
  v737 = v123;
  memset(object, 0, 32);
  LODWORD(object[4]) = 1065353216;
  do
  {
    v161 = *(_QWORD *)(v123 + 2824);
    v162 = *(_QWORD *)(v123 + 2832);
    v163 = v161;
    if (v161 != v162)
    {
      v163 = *(_QWORD *)(v123 + 2824);
      while (1)
      {
        v164 = *(_QWORD *)(v163 + 16);
        if (v164)
        {
          if (*(_QWORD *)(v164 + 160) == *v159)
            break;
        }
        v163 += 4472;
        if (v163 == v162)
        {
          v165 = 0;
          if (v161 != v162)
            goto LABEL_266;
          goto LABEL_268;
        }
      }
    }
    if (v163 == v162)
      v165 = 0;
    else
      v165 = v163;
    if (v161 != v162)
    {
LABEL_266:
      while (1)
      {
        v166 = *(_QWORD *)(v161 + 16);
        if (v166)
        {
          if (*(_QWORD *)(v166 + 160) == v159[2])
            break;
        }
        v161 += 4472;
        if (v161 == v162)
          goto LABEL_252;
      }
    }
LABEL_268:
    if (v161 == v162)
      v167 = 0;
    else
      v167 = v161;
    if (v165 && v167)
    {
      sub_20F261B00(v165, (uint64_t)(v159 + 2), (uint64_t)v159);
      sub_20F261B00(v167, (uint64_t)v159, (uint64_t)(v159 + 2));
      sub_20EDB1F30((uint64_t)object, v159, v159);
      sub_20EDB1F30((uint64_t)object, v159 + 2, v159 + 2);
    }
LABEL_252:
    v159 += 4;
  }
  while (v159 != v160);
  v168 = object[3];
  v169 = *(void **)(v123 + 2808);
  v734 = 0;
  v735 = 0;
  v736 = 0;
  if (object[3])
  {
    if ((unint64_t)object[3] >> 61)
      sub_20E92CED8();
    v734 = operator new(8 * (uint64_t)object[3]);
    v735 = (char *)v734;
    v736 = (char *)v734 + 8 * (_QWORD)v168;
  }
  v170 = object[2];
  if (!object[2])
  {
    memset(v769, 0, 32);
    *(_DWORD *)&v769[32] = 1065353216;
LABEL_354:
    v224 = 0;
    v720 = 0uLL;
    v721 = 0;
    v225 = *(_QWORD **)&v769[16];
    if (*(_QWORD *)&v769[16])
      goto LABEL_357;
    goto LABEL_371;
  }
  v171 = &off_24C9FE150;
  *(_QWORD *)&v172 = -1;
  *((_QWORD *)&v172 + 1) = -1;
  while (2)
  {
    v174 = (void *)v170[2];
    v175 = *(_QWORD **)(v123 + 2824);
    v176 = *(_QWORD **)(v123 + 2832);
    if (v175 != v176)
    {
      while (1)
      {
        v177 = v175[2];
        if (v177)
        {
          if (*(void **)(v177 + 160) == v174)
            break;
        }
        v175 += 559;
      }
    }
    if (v175 == v176)
      v175 = 0;
    v175[11] = v175[10];
    v178 = *(_QWORD *)(v175[2] + 424);
    v179 = *(uint64_t **)(v178 + 40);
    v180 = *(uint64_t **)(v178 + 48);
    if (v179 != v180)
    {
      do
      {
        v181 = *v179;
        v179 += 2;
        *(_QWORD *)(v181 + 728) = -1;
        *(_OWORD *)(v181 + 696) = v172;
        *(_OWORD *)(v181 + 712) = v172;
      }
      while (v179 != v180);
      v174 = (void *)v170[2];
    }
    *(_QWORD *)v755 = v171;
    *(_QWORD *)&v755[8] = v737;
    v756 = v755;
    *(_QWORD *)__dst = &off_24C9FE1D0;
    *(_QWORD *)&__dst[8] = &v737;
    v767 = __dst;
    v183 = sub_20F457074(v169, v174, (uint64_t)v755, (uint64_t)__dst);
    v184 = v767;
    if (v767 == __dst)
    {
      v184 = __dst;
      v185 = 4;
LABEL_298:
      (*(void (**)(_QWORD *, uint64_t))(*v184 + 8 * v185))(v184, v182);
    }
    else if (v767)
    {
      v185 = 5;
      goto LABEL_298;
    }
    v186 = v756;
    if (v756 == v755)
    {
      v186 = v755;
      v187 = 4;
LABEL_303:
      (*(void (**)(_QWORD *, uint64_t))(*v186 + 8 * v187))(v186, v182);
    }
    else if (v756)
    {
      v187 = 5;
      goto LABEL_303;
    }
    *(_QWORD *)&v172 = -1;
    *((_QWORD *)&v172 + 1) = -1;
    if ((v183 & 1) != 0)
      goto LABEL_283;
    v188 = v735;
    if (v735 < v736)
    {
      *(_QWORD *)v735 = v170[2];
      v173 = (uint64_t)(v188 + 8);
      goto LABEL_282;
    }
    v189 = v169;
    v190 = v171;
    v191 = (char *)v734;
    v192 = v735 - (_BYTE *)v734;
    v193 = (v735 - (_BYTE *)v734) >> 3;
    v194 = v193 + 1;
    if ((unint64_t)(v193 + 1) >> 61)
      sub_20E92CED8();
    v195 = v736 - (_BYTE *)v734;
    if ((v736 - (_BYTE *)v734) >> 2 > v194)
      v194 = v195 >> 2;
    if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8)
      v196 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v196 = v194;
    if (!v196)
    {
      v198 = 0;
      v199 = (char *)(8 * v193);
      *(_QWORD *)(8 * v193) = v170[2];
      v173 = 8 * v193 + 8;
      v200 = v188 - v191;
      if (v188 != v191)
        goto LABEL_315;
      goto LABEL_318;
    }
    if (v196 >> 61)
      sub_20E877A38();
    v197 = v196;
    v198 = (char *)operator new(8 * v196);
    *(_QWORD *)&v172 = -1;
    *((_QWORD *)&v172 + 1) = -1;
    v196 = v197;
    v199 = &v198[8 * v193];
    *(_QWORD *)v199 = v170[2];
    v173 = (uint64_t)(v199 + 8);
    v200 = v188 - v191;
    if (v188 == v191)
    {
LABEL_318:
      v171 = v190;
      v169 = v189;
      goto LABEL_324;
    }
LABEL_315:
    v201 = v200 - 8;
    if (v201 < 0x58)
    {
      v171 = v190;
      v169 = v189;
      goto LABEL_323;
    }
    v202 = v188 - &v198[v192];
    v171 = v190;
    v169 = v189;
    if (v202 < 0x20)
      goto LABEL_1014;
    v203 = (v201 >> 3) + 1;
    v204 = 8 * (v203 & 0x3FFFFFFFFFFFFFFCLL);
    v205 = &v188[-v204];
    v199 -= v204;
    v206 = &v198[8 * v193 - 16];
    v207 = v188 - 16;
    v208 = v203 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v209 = *(_OWORD *)v207;
      *((_OWORD *)v206 - 1) = *((_OWORD *)v207 - 1);
      *(_OWORD *)v206 = v209;
      v206 -= 32;
      v207 -= 32;
      v208 -= 4;
    }
    while (v208);
    v188 = v205;
    if (v203 != (v203 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1014:
      do
      {
LABEL_323:
        v210 = *((_QWORD *)v188 - 1);
        v188 -= 8;
        *((_QWORD *)v199 - 1) = v210;
        v199 -= 8;
      }
      while (v188 != v191);
    }
LABEL_324:
    v734 = v199;
    v735 = (char *)v173;
    v736 = &v198[8 * v196];
    if (v191)
    {
      operator delete(v191);
      *(_QWORD *)&v172 = -1;
      *((_QWORD *)&v172 + 1) = -1;
    }
LABEL_282:
    v735 = (char *)v173;
    v123 = v719;
LABEL_283:
    v170 = (_QWORD *)*v170;
    if (v170)
      continue;
    break;
  }
  v211 = (void **)v734;
  v212 = (void **)v735;
  memset(v769, 0, 32);
  *(_DWORD *)&v769[32] = 1065353216;
  if (v734 == v735)
    goto LABEL_354;
  while (2)
  {
    v215 = *v211;
    *(_QWORD *)v753 = v171;
    *(_QWORD *)&v753[8] = v737;
    v754 = v753;
    *(_QWORD *)&v750 = &off_24C9FE250;
    *((_QWORD *)&v750 + 1) = &v737;
    v751 = (int64_t)v169;
    v752 = &v750;
    v749 = 0;
    sub_20F4576F8(v215, (uint64_t)v753, (uint64_t)&v750, (uint64_t)v748, v769);
    v217 = v749;
    if (v749 == v748)
    {
      v217 = v748;
      v218 = 4;
LABEL_336:
      (*(void (**)(uint64_t *, uint64_t))(*v217 + 8 * v218))(v217, v216);
    }
    else if (v749)
    {
      v218 = 5;
      goto LABEL_336;
    }
    v219 = v752;
    if (v752 == &v750)
    {
      v219 = &v750;
      v220 = 4;
LABEL_341:
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v219 + 8 * v220))(v219, v216);
    }
    else if (v752)
    {
      v220 = 5;
      goto LABEL_341;
    }
    v213 = v754;
    if (v754 == v753)
    {
      v213 = v753;
      v214 = 4;
      goto LABEL_330;
    }
    if (v754)
    {
      v214 = 5;
LABEL_330:
      (*(void (**)(_QWORD *, uint64_t))(*v213 + 8 * v214))(v213, v216);
    }
    if (++v211 != v212)
      continue;
    break;
  }
  v223 = *(_QWORD *)&v769[24];
  v721 = 0;
  v720 = 0uLL;
  if (*(_QWORD *)&v769[24])
  {
    if (*(_QWORD *)&v769[24] >= 0xEA79D149BB4E5uLL)
      sub_20E867F44();
    v224 = (unint64_t)operator new(4472 * *(_QWORD *)&v769[24]);
    *(_QWORD *)&v720 = v224;
    *((_QWORD *)&v720 + 1) = v224;
    v721 = v224 + 4472 * v223;
    v225 = *(_QWORD **)&v769[16];
    if (*(_QWORD *)&v769[16])
    {
      do
      {
        while (1)
        {
LABEL_357:
          v226 = *(_QWORD *)(v719 + 2824);
          v227 = *(_QWORD *)(v719 + 2832);
          if (v226 != v227)
          {
            while (1)
            {
              v228 = *(_QWORD *)(v226 + 16);
              if (v228)
              {
                if (*(_QWORD *)(v228 + 160) == v225[2])
                  break;
              }
              v226 += 4472;
              if (v226 == v227)
                goto LABEL_367;
            }
          }
          if (v226 == v227 || v226 == 0)
          {
LABEL_367:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 3028, (uint64_t)"disconnected_submap_ptr", 23, (uint64_t)"Attempting to move non-existent submap.", 39, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v226 = 0;
          }
          if (v224 >= v721)
            break;
          sub_20F314370(v224, v226);
          v224 += 4472;
          *((_QWORD *)&v720 + 1) = v224;
          v225 = (_QWORD *)*v225;
          if (!v225)
            goto LABEL_371;
        }
        v224 = sub_20F33DAAC((uint64_t *)&v720, v226);
        *((_QWORD *)&v720 + 1) = v224;
        v225 = (_QWORD *)*v225;
      }
      while (v225);
    }
  }
  else
  {
    v224 = 0;
    v225 = *(_QWORD **)&v769[16];
    if (*(_QWORD *)&v769[16])
      goto LABEL_357;
  }
LABEL_371:
  v123 = v719;
  v230 = *(_QWORD *)(v719 + 2824);
  v231 = *(_QWORD *)(v719 + 2832);
  if (v230 != v231)
  {
    while (*(_QWORD *)(v230 + 16))
    {
      v230 += 4472;
      if (v230 == v231)
        goto LABEL_385;
    }
    if (v230 != v231)
    {
      v232 = v230 + 4472;
      if (v230 + 4472 != v231)
      {
        do
        {
          if (*(_QWORD *)(v232 + 16))
          {
            sub_20F34185C(v230, v232);
            v230 += 4472;
          }
          v232 += 4472;
        }
        while (v232 != v231);
        v231 = *(_QWORD *)(v719 + 2832);
      }
    }
    if (v230 != v231)
    {
      do
      {
        v231 -= 4472;
        sub_20F3122B4(v231);
      }
      while (v231 != v230);
      *(_QWORD *)(v719 + 2832) = v230;
    }
  }
LABEL_385:
  v233 = *(char **)(v719 + 2848);
  v234 = *(char **)(v719 + 2856);
  if (v233 != v234)
  {
    v235 = *(_QWORD **)&v769[16];
    if (*(_QWORD *)&v769[16])
    {
LABEL_387:
      v236 = *(_QWORD **)&v769[16];
      while (v236[2] != *(_QWORD *)v233)
      {
        v236 = (_QWORD *)*v236;
        if (!v236)
        {
          v233 += 8;
          if (v233 != v234)
            goto LABEL_387;
          goto LABEL_399;
        }
      }
    }
    else
    {
      v233 += (v234 - v233) & 0xFFFFFFFFFFFFFFF8;
    }
    if (v233 != v234)
    {
      v237 = v233 + 8;
      if (v233 + 8 != v234)
      {
        if (*(_QWORD *)&v769[16])
        {
          do
          {
            v262 = *(_QWORD *)v237;
            v263 = v235;
            while (v263[2] != v262)
            {
              v263 = (_QWORD *)*v263;
              if (!v263)
              {
                *(_QWORD *)v233 = v262;
                v233 += 8;
                break;
              }
            }
            v237 += 8;
          }
          while (v237 != v234);
        }
        else
        {
          memmove(v233, v237, ((v234 - v233 - 16) & 0xFFFFFFFFFFFFFFF8) + 8);
          v233 += ((v234 - v233 - 16) & 0xFFFFFFFFFFFFFFF8) + 8;
        }
      }
      if (v233 != v234)
        *(_QWORD *)(v719 + 2856) = v233;
    }
  }
LABEL_399:
  sub_20F31D2E0(v719);
  v238 = *(_QWORD **)&v769[16];
  if (*(_QWORD *)&v769[16])
  {
    do
    {
      v239 = (_QWORD *)*v238;
      operator delete(v238);
      v238 = v239;
    }
    while (v239);
  }
  v240 = *(void **)v769;
  *(_QWORD *)v769 = 0;
  if (v240)
    operator delete(v240);
  if (v734)
  {
    v735 = (char *)v734;
    operator delete(v734);
  }
  v241 = object[2];
  if (object[2])
  {
    do
    {
      v242 = (_QWORD *)*v241;
      operator delete(v241);
      v241 = v242;
    }
    while (v242);
  }
  v243 = object[0];
  object[0] = 0;
  if (v243)
    operator delete(v243);
  v244 = *(_QWORD *)(v719 + 2832);
  v245 = *(_QWORD *)(v719 + 2824);
  v246 = v727;
  v247 = v721;
  *(_OWORD *)a4 = v720;
  a4[2] = v247;
  *(_QWORD *)&v728 = v246;
  v248 = v244 - v245;
  if (v248)
    sub_20F34166C((char **)&v727, 0x3175B2258D8284CFLL * (v248 >> 3), &xmmword_2103AF780);
LABEL_411:
  if (*(_BYTE *)(v123 + 3016))
  {
    v249 = *(_QWORD *)(v123 + 3008);
    if (*(_BYTE *)(v249 + 80)
      || *(_BYTE *)(v249 + 200) && *(_QWORD *)(v249 + 184) && *(_QWORD *)(v249 + 136) != *(_QWORD *)(v249 + 144))
    {
      sub_20F44552C((uint64_t)&v738, v249);
    }
  }
  *(_QWORD *)(v123 + 2904) = *(_QWORD *)(v123 + 2896);
  if (v738)
  {
    *(_QWORD *)&v739 = v738;
    operator delete(v738);
  }
  if (v724)
  {
    v725 = v724;
    operator delete(v724);
  }
  v128 = 1;
  v129 = (float64x2_t *)v727;
  v130 = (float64x2_t *)v728;
  if (v727 == (void *)v728)
    goto LABEL_788;
LABEL_419:
  v250 = ((char *)v130 - (char *)v129) >> 7;
  v251 = *(_QWORD *)(v123 + 2832);
  v252 = *(_QWORD *)(v123 + 2824);
  if (v250 != 0x3175B2258D8284CFLL * ((v251 - v252) >> 3))
  {
    sub_20E863438((uint64_t)&v738);
    sub_20E86A980((_QWORD *)&v739 + 1, (uint64_t)" T_Gold_to_Gnew_per_map.size():  ", 33);
    v692 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v692, (uint64_t)" submaps_.size(): ", 18);
    v693 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v693, (uint64_t)"\n", 1);
    sub_20E923E88(&v738, object);
    if (SHIBYTE(object[2]) >= 0)
      v694 = object;
    else
      v694 = (void **)object[0];
    if (SHIBYTE(object[2]) >= 0)
      v695 = HIBYTE(object[2]);
    else
      v695 = (uint64_t)object[1];
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 4270, (uint64_t)&unk_2102A1D75, 0, (uint64_t)v694, v695, (void (*)(void **))sub_21023DDB0);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    abort();
  }
  if (!*((_BYTE *)a3 + 144))
    goto LABEL_478;
  if (!*(_BYTE *)(v123 + 2499))
  {
    v257 = (uint64_t *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v123 + 2816) + 16) + 424) + 56);
    v264 = *v257;
    if (*v257)
    {
      v253 = *a3;
      v259 = *((_DWORD *)a3 + 2);
      v260 = (uint64_t)v257;
      do
      {
        v265 = *(_QWORD *)(v264 + 32);
        if (v265 < v253)
        {
          v264 += 8;
        }
        else if (v265 == v253)
        {
          if (*(_DWORD *)(v264 + 40) < v259)
            v264 += 8;
          else
            v260 = v264;
        }
        else
        {
          v260 = v264;
        }
        v264 = *(_QWORD *)v264;
      }
      while (v264);
      goto LABEL_457;
    }
LABEL_478:
    if (v251 == v252)
    {
      v251 = v252;
      if (!*((_BYTE *)a3 + 144))
        goto LABEL_788;
    }
    else
    {
      v334 = 0;
      v335 = 0;
      __asm { FMOV            V0.2D, #1.0 }
      v716 = *((double *)&_Q0 + 1);
      do
      {
        v337 = v252 + 4472 * v334;
        v338 = *(_QWORD *)(v337 + 16);
        sub_20FCE8D4C((uint64_t)v727 + 128 * v334, *(_QWORD **)(v338 + 424));
        v343 = **(_QWORD ***)(v338 + 424);
        v344 = *(uint64_t **)(v338 + 16);
        if (v343[8])
        {
          if (v344)
          {
            if (v343[224])
            {
              do
              {
                v384 = (int8x8_t)v343[224];
                if (v384)
                {
                  v385 = *((_DWORD *)v344 + 14);
                  v386 = *((_DWORD *)v344 + 12);
                  v387 = v386 ^ __ROR4__(v385, 13);
                  v388 = (uint8x8_t)vcnt_s8(v384);
                  v388.i16[0] = vaddlv_u8(v388);
                  if (v388.u32[0] > 1uLL)
                  {
                    v389 = v387;
                    if (*(_QWORD *)&v384 <= v387)
                      v389 = v387 % *(_QWORD *)&v384;
                  }
                  else
                  {
                    v389 = (v384.i32[0] - 1) & v387;
                  }
                  v390 = *(uint64_t ***)(v343[223] + 8 * v389);
                  if (v390)
                  {
                    v391 = *v390;
                    if (v391)
                    {
                      v392 = v344[5];
                      if (v388.u32[0] < 2uLL)
                      {
                        v393 = *(_QWORD *)&v384 - 1;
                        while (1)
                        {
                          v394 = v391[1];
                          if (v394 == v387)
                          {
                            if (*((_DWORD *)v391 + 8) == v385 && v391[2] == v392 && *((_DWORD *)v391 + 6) == v386)
                              goto LABEL_502;
                          }
                          else if ((v394 & v393) != v389)
                          {
                            goto LABEL_503;
                          }
                          v391 = (uint64_t *)*v391;
                          if (!v391)
                            goto LABEL_503;
                        }
                      }
                      do
                      {
                        v395 = v391[1];
                        if (v395 == v387)
                        {
                          if (*((_DWORD *)v391 + 8) == v385 && v391[2] == v392 && *((_DWORD *)v391 + 6) == v386)
                          {
LABEL_502:
                            v351 = v391[5];
                            v352 = *(float64x2_t *)v351;
                            _Q5.f64[0] = *(float64_t *)(v351 + 40);
                            v353 = *(float64x2_t *)(v351 + 24);
                            v354 = *(double *)(v351 + 64);
                            v355 = *(float64x2_t *)(v351 + 48);
                            v356 = (__int128 *)v391[9];
                            v357 = *((double *)v356 + 2);
                            _Q2 = *v356;
                            v341.i64[0] = *((_QWORD *)v356 + 5);
                            _Q18 = *(float64x2_t *)((char *)v356 + 24);
                            v360 = *((double *)v356 + 8);
                            _Q20 = (float64x2_t)v356[3];
                            v362 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, *(double *)v356), v353, *(float64x2_t *)v356, 1), v355, v357);
                            __asm { FMLA            D21, D5, V2.D[1] }
                            _Q21.f64[0] = _Q21.f64[0] + v354 * v357;
                            v363 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, _Q18.f64[0]), v353, _Q18, 1), v355, *(double *)v341.i64);
                            __asm { FMLA            D1, D5, V18.D[1] }
                            *(double *)v341.i64 = _D1 + v354 * *(double *)v341.i64;
                            v365 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, _Q20.f64[0]), v353, _Q20, 1), v355, v360);
                            __asm { FMLA            D2, D5, V20.D[1] }
                            *(double *)&_Q2 = *(double *)&_Q2 + v354 * v360;
                            v366 = vextq_s8(v363, v341, 8uLL);
                            v367 = vzip1q_s64((int64x2_t)_Q21, (int64x2_t)v363);
                            v368 = (float64x2_t *)v391[11];
                            v369 = v368[1].f64[0];
                            _Q20 = *v368;
                            v371 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, v368->f64[0]), v353, *v368, 1), v355, v369);
                            __asm { FMLA            D3, D5, V20.D[1] }
                            _Q3.f64[0] = _Q3.f64[0] + v354 * v369;
                            v372 = (float64x2_t *)v391[7];
                            _Q5.f64[0] = v372[1].f64[0];
                            *(_QWORD *)&v373 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
                            *(_QWORD *)&v355.f64[0] = vdupq_laneq_s64(v367, 1).u64[0];
                            *(_QWORD *)&v355.f64[1] = v366.i64[0];
                            v374 = vaddq_f64(v371, *v372);
                            _Q5 = (float64x2_t)v366.u64[1];
                            *(_QWORD *)&v353.f64[0] = v367.i64[0];
                            _Q3.f64[1] = v716;
                            _Q3.f64[0] = v373;
                            v376 = *((float64x2_t *)v344 + 4);
                            v375 = *((float64x2_t *)v344 + 5);
                            v378 = *((float64x2_t *)v344 + 6);
                            v377 = *((float64x2_t *)v344 + 7);
                            _Q21 = *((float64x2_t *)v344 + 8);
                            v379 = *((float64x2_t *)v344 + 9);
                            v381 = *((float64x2_t *)v344 + 10);
                            v380 = *((float64x2_t *)v344 + 11);
                            v382 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v362, v376.f64[0]), v355, v376, 1), v365, v375.f64[0]), v374, v375, 1);
                            v383 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v353.f64[0], v376.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], v376, 1), (float64x2_t)(unint64_t)_Q2, v375.f64[0]), _Q3, v375, 1);
                            v341 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v353.f64[0], v378.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], v378, 1), (float64x2_t)(unint64_t)_Q2, v377.f64[0]), _Q3, v377, 1);
                            *((float64x2_t *)v344 + 12) = v382;
                            *((float64x2_t *)v344 + 13) = v383;
                            *((float64x2_t *)v344 + 14) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v362, v378.f64[0]), v355, v378, 1), v365, v377.f64[0]), v374, v377, 1);
                            *((int8x16_t *)v344 + 15) = v341;
                            *((float64x2_t *)v344 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v362, _Q21.f64[0]), v355, _Q21, 1), v365, v379.f64[0]), v374, v379, 1);
                            *((float64x2_t *)v344 + 17) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v353.f64[0], _Q21.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], _Q21, 1), (float64x2_t)(unint64_t)_Q2, v379.f64[0]), _Q3, v379, 1);
                            *((float64x2_t *)v344 + 18) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v362, v381.f64[0]), v355, v381, 1), v365, v380.f64[0]), v374, v380, 1);
                            *((float64x2_t *)v344 + 19) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v353.f64[0], v381.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], v381, 1), (float64x2_t)(unint64_t)_Q2, v380.f64[0]), _Q3, v380, 1);
                            break;
                          }
                        }
                        else
                        {
                          if (v395 >= *(_QWORD *)&v384)
                            v395 %= *(_QWORD *)&v384;
                          if (v395 != v389)
                            break;
                        }
                        v391 = (uint64_t *)*v391;
                      }
                      while (v391);
                    }
                  }
                }
LABEL_503:
                v344 = (uint64_t *)*v344;
              }
              while (v344);
            }
            else
            {
              do
                v344 = (uint64_t *)*v344;
              while (v344);
            }
          }
          v345 = *(_QWORD *)(v338 + 112);
          for (j = *(_QWORD *)(v338 + 120); j != v345; j -= 24)
          {
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)(j - 24));
          }
          *(_QWORD *)(v338 + 120) = v345;
          sub_20E9099B8(v338 + 112, *(_QWORD *)(v338 + 24));
          v347 = *(uint64_t **)(v338 + 16);
          if (v347)
          {
            v348 = *(_QWORD *)(v338 + 120);
            do
            {
              while (1)
              {
                v350 = (__int128 *)(v347 + 2);
                if (v348 < *(_QWORD *)(v338 + 128))
                  break;
                v348 = sub_20E8ADE68((uint64_t *)(v338 + 112), v350);
                *(_QWORD *)(v338 + 120) = v348;
                v347 = (uint64_t *)*v347;
                if (!v347)
                  goto LABEL_500;
              }
              if (*((char *)v347 + 39) < 0)
              {
                sub_20E860C04((_BYTE *)v348, (void *)v347[2], v347[3]);
              }
              else
              {
                v349 = *v350;
                *(_QWORD *)(v348 + 16) = v347[4];
                *(_OWORD *)v348 = v349;
              }
              v348 += 24;
              *(_QWORD *)(v338 + 120) = v348;
              *(_QWORD *)(v338 + 120) = v348;
              v347 = (uint64_t *)*v347;
            }
            while (v347);
          }
        }
        else
        {
          for (; v344; v344 = (uint64_t *)*v344)
            sub_20FCC8E38((uint64_t *)v338, (uint64_t)(v344 + 2), (__int128 *)(v344 + 5));
        }
LABEL_500:
        (*(void (**)(_QWORD))(**(_QWORD **)(v337 + 200) + 16))(*(_QWORD *)(v337 + 200));
        v251 = *(_QWORD *)(v719 + 2832);
        v252 = *(_QWORD *)(v719 + 2824);
        v334 = ++v335;
      }
      while (0x3175B2258D8284CFLL * ((v251 - v252) >> 3) > (unint64_t)v335);
      v123 = v719;
      if (!*((_BYTE *)a3 + 144))
        goto LABEL_788;
    }
LABEL_532:
    if (*(_BYTE *)(v123 + 2499))
    {
      if (v252 == v251)
        goto LABEL_788;
      v396 = *a3;
      while (1)
      {
        v397 = *(_QWORD *)(v252 + 16);
        if (v397)
        {
          if (*(_QWORD *)(v397 + 160) == v396)
            break;
        }
        v252 += 4472;
        if (v252 == v251)
          goto LABEL_788;
      }
      if (v252 == v251)
        goto LABEL_788;
      v398 = *(_QWORD **)(v397 + 424);
      v399 = (uint64_t *)(*v398 + 56);
      v400 = *v399;
      if (!*v399)
        goto LABEL_788;
      v401 = *((_DWORD *)a3 + 2);
      v402 = *v398 + 56;
      do
      {
        v403 = *(_QWORD *)(v400 + 32);
        if (v403 < v396)
        {
          v400 += 8;
        }
        else if (v403 == v396)
        {
          if (*(_DWORD *)(v400 + 40) < v401)
            v400 += 8;
          else
            v402 = v400;
        }
        else
        {
          v402 = v400;
        }
        v400 = *(_QWORD *)v400;
      }
      while (v400);
      if ((uint64_t *)v402 == v399)
        goto LABEL_788;
      v411 = *(_QWORD *)(v402 + 32);
      if (v396 < v411 || v396 == v411 && *(_DWORD *)(v402 + 40) > v401)
        goto LABEL_788;
    }
    else
    {
      v404 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v123 + 2816) + 16) + 424);
      v405 = (uint64_t *)(*v404 + 56);
      v406 = *v405;
      if (!*v405)
        goto LABEL_788;
      v407 = *a3;
      v408 = *((_DWORD *)a3 + 2);
      v402 = *v404 + 56;
      do
      {
        v409 = *(_QWORD *)(v406 + 32);
        if (v409 < v407)
        {
          v406 += 8;
        }
        else if (v409 == v407)
        {
          if (*(_DWORD *)(v406 + 40) < v408)
            v406 += 8;
          else
            v402 = v406;
        }
        else
        {
          v402 = v406;
        }
        v406 = *(_QWORD *)v406;
      }
      while (v406);
      if ((uint64_t *)v402 == v405)
        goto LABEL_788;
      v410 = *(_QWORD *)(v402 + 32);
      if (v407 < v410 || v407 == v410 && *(_DWORD *)(v402 + 40) > v408)
        goto LABEL_788;
    }
    v412 = *(_QWORD *)(v402 + 48);
    if (!v412)
      goto LABEL_788;
    v413 = (uint64_t)(a3 + 2);
    v414.f64[0] = *(float64_t *)(v412 + 16);
    v415 = *(int64x2_t *)(v412 + 24);
    v416 = *(double *)(v412 + 64);
    _Q4 = *(int64x2_t *)(v412 + 48);
    v418 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v412, v415);
    v419 = (float64x2_t)vdupq_laneq_s64(_Q4, 1);
    v414.f64[1] = *(float64_t *)(v412 + 40);
    v420 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v412, v415);
    v421 = vextq_s8((int8x16_t)v420, (int8x16_t)v419, 8uLL);
    v419.f64[0] = *(float64_t *)(v412 + 88);
    v422 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, *(double *)(v412 + 72)), v420, *(float64x2_t *)(v412 + 72), 1), v414, v419.f64[0]);
    _D7 = *(_QWORD *)(v412 + 80);
    __asm { FMLA            D17, D7, V4.D[1] }
    v419.f64[0] = _D17 + v416 * v419.f64[0];
    *(_QWORD *)&v419.f64[0] = *(_OWORD *)&vnegq_f64(v419);
    *(_QWORD *)&v420.f64[1] = v421.i64[0];
    v419.f64[1] = 1.0;
    v425 = vabsq_f64(vsubq_f64(vnegq_f64(v422), *((float64x2_t *)a3 + 7)));
    v426 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
    if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v426, vabsq_f64(vsubq_f64(v418, *((float64x2_t *)a3 + 1)))), (int32x4_t)vcgeq_f64(v426, vabsq_f64(vsubq_f64((float64x2_t)*(unint64_t *)(v412 + 48), *((float64x2_t *)a3 + 2))))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v426, vabsq_f64(vsubq_f64(
                                                                                      v420,
                                                                                      *((float64x2_t *)a3 + 3)))),
                                                                     (int32x4_t)vcgeq_f64(v426, vabsq_f64(vsubq_f64((float64x2_t)v421.u64[1], *((float64x2_t *)a3 + 4))))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v426, vabsq_f64(vsubq_f64(v414, *((float64x2_t *)a3 + 5)))), (int32x4_t)vcgeq_f64(v426, vabsq_f64(vsubq_f64((float64x2_t)*(unint64_t *)&v416, *((float64x2_t *)a3 + 6))))),
                                                        (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v426, v425), (int32x4_t)vcgeq_f64(v426, vabsq_f64(vsubq_f64(v419, *((float64x2_t *)a3 + 8))))))))) & 1) == 0)goto LABEL_788;
    v712 = v128;
    v427 = MEMORY[0x24BEDB858];
    v428 = MEMORY[0x24BEDB858] + 104;
    v747[0] = MEMORY[0x24BEDB858] + 104;
    v429 = MEMORY[0x24BEDB858] + 64;
    v430 = (_QWORD *)MEMORY[0x24BEDB7F0];
    v431 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
    v432 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
    *((_QWORD *)&v739 + 1) = MEMORY[0x24BEDB858] + 64;
    v738 = v431;
    v709 = (char *)v431;
    v705 = v432;
    *(void **)((char *)&v738 + *((_QWORD *)v431 - 3)) = v432;
    *(_QWORD *)&v739 = 0;
    v433 = (std::ios_base *)((char *)&v738 + *((_QWORD *)v738 - 3));
    std::ios_base::init(v433, v740);
    v433[1].__vftable = 0;
    v433[1].__fmtflags_ = -1;
    v434 = v430;
    v435 = (_QWORD *)v430[4];
    v436 = (void *)v434[5];
    *((_QWORD *)&v739 + 1) = v435;
    *(_QWORD *)&v740[*(v435 - 3) - 8] = v436;
    v437 = (void *)v434[1];
    v738 = v437;
    v702 = (void *)v434[6];
    v703 = v436;
    *(void **)((char *)&v738 + *((_QWORD *)v437 - 3)) = v702;
    v438 = v427;
    v747[0] = v428;
    v738 = (void *)(v427 + 24);
    *((_QWORD *)&v739 + 1) = v429;
    std::streambuf::basic_streambuf();
    v439 = MEMORY[0x24BEDB848];
    *(_QWORD *)v740 = MEMORY[0x24BEDB848] + 16;
    v744 = 0u;
    v745 = 0u;
    v746 = 24;
    v440 = sub_20E86A980((_QWORD *)&v739 + 1, (uint64_t)" anchored_state->pose():  \n", 27);
    v441.f64[0] = *(float64_t *)(v412 + 16);
    v442 = *(int64x2_t *)(v412 + 24);
    v443 = *(double *)(v412 + 64);
    _Q4 = *(int64x2_t *)(v412 + 48);
    v445 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v412, v442);
    v446 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v412, v442);
    v441.f64[1] = *(float64_t *)(v412 + 40);
    v447 = vextq_s8((int8x16_t)v446, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    v448 = *(double *)(v412 + 88);
    v449 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, *(double *)(v412 + 72)), v446, *(float64x2_t *)(v412 + 72), 1), v441, v448);
    _D7 = *(_QWORD *)(v412 + 80);
    __asm { FMLA            D17, D7, V4.D[1] }
    v452.f64[0] = _D17 + v443 * v448;
    v453 = vnegq_f64(v449);
    v449.f64[0] = *(float64_t *)(v412 + 48);
    *(_QWORD *)&v446.f64[1] = v447.i64[0];
    v762 = v441;
    *(_OWORD *)v763 = *(unint64_t *)&v443;
    *(float64x2_t *)object = v445;
    *(_OWORD *)&object[2] = *(unint64_t *)&v449.f64[0];
    *(float64x2_t *)&object[4] = v446;
    *(_OWORD *)&object[6] = v447.u64[1];
    *(float64x2_t *)&v763[16] = v453;
    *(_QWORD *)&v763[32] = *(_OWORD *)&vnegq_f64(v452);
    v764 = 0x3FF0000000000000;
    v454 = sub_20EF37084(v440, (uint64_t)object);
    v455 = sub_20E86A980(v454, (uint64_t)"\n", 1);
    v456 = sub_20E86A980(v455, (uint64_t)" anchored_state_pose:  \n", 24);
    v457 = sub_20EF37084(v456, v413);
    sub_20E86A980(v457, (uint64_t)"\n", 1);
    v458 = atomic_load((unsigned __int8 *)&qword_254A68888);
    v459 = v438;
    if ((v458 & 1) == 0 && __cxa_guard_acquire(&qword_254A68888))
    {
      sub_21021D3D8(v769);
      sub_20E8610C0(object, "cv3d.vio.area_mapping");
      sub_20E8C4068((uint64_t **)v769, (uint64_t)object, &qword_254A68880);
      if (SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_guard_release(&qword_254A68888);
      v459 = v438;
    }
    v734 = (void *)qword_254A68880;
    if (**(int **)(qword_254A68880 + 56) > 3
      || (v460 = *(unsigned __int8 *)(qword_254A68880 + 72),
          v461 = sub_20E8C31DC(qword_254A68880, "OSLogSurrogateAppender", 1, 0),
          !v460)
      && !v461)
    {
LABEL_785:
      v738 = (void *)*MEMORY[0x24BEDB7F0];
      v599 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)&v738 + *((_QWORD *)v738 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      *((_QWORD *)&v739 + 1) = v599;
      *(_QWORD *)v740 = v439 + 16;
      if (SBYTE7(v745) < 0)
        operator delete((void *)v744);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v747);
      v123 = v719;
      v128 = v712;
      goto LABEL_788;
    }
    v462 = v439;
    v700 = v460;
    v701 = v461;
    v463 = v459 + 104;
    v765[0] = v459 + 104;
    v464 = v459;
    v465 = (void *)(v459 + 64);
    object[2] = v465;
    object[0] = v709;
    *(void **)((char *)object + *((_QWORD *)v709 - 3)) = v705;
    object[1] = 0;
    v466 = (std::ios_base *)((char *)object + *((_QWORD *)object[0] - 3));
    std::ios_base::init(v466, &object[3]);
    v466[1].__vftable = 0;
    v466[1].__fmtflags_ = -1;
    object[2] = v435;
    *(void **)((char *)&object[2] + *(v435 - 3)) = v703;
    object[0] = v437;
    *(void **)((char *)object + *((_QWORD *)v437 - 3)) = v702;
    v765[0] = v463;
    object[0] = (void *)(v464 + 24);
    object[2] = v465;
    std::streambuf::basic_streambuf();
    object[3] = (void *)(v462 + 16);
    memset(&v763[8], 0, 32);
    LODWORD(v764) = 24;
    v467 = MEMORY[0x24BEDB7F0];
    if ((v746 & 0x10) != 0)
    {
      v470 = *((double *)&v745 + 1);
      if (*((_QWORD *)&v745 + 1) < *(_QWORD *)&v742.f64[1])
      {
        *((_QWORD *)&v745 + 1) = *(_QWORD *)&v742.f64[1];
        v470 = v742.f64[1];
      }
      v471 = (const void **)&v742;
    }
    else
    {
      if ((v746 & 8) == 0)
      {
        v468 = 0;
        v769[23] = 0;
        v469 = v769;
        goto LABEL_589;
      }
      v471 = (const void **)&v740[16];
      v470 = v741;
    }
    v472 = *v471;
    v468 = *(_QWORD *)&v470 - (_QWORD)*v471;
    if (v468 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v468 >= 0x17)
    {
      v473 = (v468 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v468 | 7) != 0x17)
        v473 = v468 | 7;
      v474 = v473 + 1;
      v469 = operator new(v473 + 1);
      *(_QWORD *)&v769[8] = v468;
      *(_QWORD *)&v769[16] = v474 | 0x8000000000000000;
      *(_QWORD *)v769 = v469;
    }
    else
    {
      v769[23] = LOBYTE(v470) - *(_BYTE *)v471;
      v469 = v769;
      if (!v468)
      {
LABEL_589:
        v469[v468] = 0;
        if (v769[23] >= 0)
          v475 = v769;
        else
          v475 = *(_BYTE **)v769;
        if (v769[23] >= 0)
          v476 = v769[23];
        else
          v476 = *(_QWORD *)&v769[8];
        sub_20E86A980(&object[2], (uint64_t)v475, v476);
        if ((v769[23] & 0x80000000) != 0)
          operator delete(*(void **)v769);
        if ((v764 & 0x10) != 0)
        {
          v479 = *(double *)&v763[32];
          if (*(_QWORD *)&v763[32] < *(_QWORD *)&v762.f64[1])
          {
            *(float64_t *)&v763[32] = v762.f64[1];
            v479 = v762.f64[1];
          }
          v480 = (const void **)&v762;
        }
        else
        {
          if ((v764 & 8) == 0)
          {
            v477 = 0;
            HIBYTE(v751) = 0;
            v478 = &v750;
            goto LABEL_612;
          }
          v480 = (const void **)&object[5];
          v479 = *(double *)&object[7];
        }
        v481 = *v480;
        v477 = *(_QWORD *)&v479 - (_QWORD)*v480;
        if (v477 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v477 >= 0x17)
        {
          v482 = (v477 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v477 | 7) != 0x17)
            v482 = v477 | 7;
          v483 = v482 + 1;
          v478 = (__int128 *)operator new(v482 + 1);
          v751 = v483 | 0x8000000000000000;
          *(_QWORD *)&v750 = v478;
          *((_QWORD *)&v750 + 1) = v477;
        }
        else
        {
          HIBYTE(v751) = LOBYTE(v479) - *(_BYTE *)v480;
          v478 = &v750;
          if (!v477)
          {
LABEL_612:
            *((_BYTE *)v478 + v477) = 0;
            *(_QWORD *)v755 = &v734;
            *(std::chrono::steady_clock::time_point *)&v755[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v755[16] = std::chrono::system_clock::now();
            LODWORD(v756) = 3;
            v757 = "unknown file";
            v758 = 4322;
            v759 = "unknown function";
            v760 = 0uLL;
            v484 = (char *)&v750;
            if (v751 < 0)
              v484 = (char *)v750;
            v710 = v484;
            v485 = **(_QWORD **)v755;
            if (*(char *)(**(_QWORD **)v755 + 39) < 0)
            {
              v487 = *(const char **)(v485 + 16);
              v486 = *(_QWORD *)(v485 + 24);
            }
            else
            {
              v486 = *(unsigned __int8 *)(**(_QWORD **)v755 + 39);
              v487 = (const char *)(**(_QWORD **)v755 + 16);
            }
            v706 = **(_QWORD **)v755 + 16;
            v488 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v488 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v769);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v769);
              if (v769[24] && (v769[23] & 0x80000000) != 0)
                operator delete(*(void **)v769);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v489 = byte_254A4A4F8;
            else
              v489 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v490 = byte_254A4A4F8[23];
            else
              v490 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v769 = os_log_create(v489, v487);
            v491 = &v769[8];
            if (v490 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v490 >= 0x17)
            {
              v492 = v462;
              v493 = (v490 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v490 | 7) != 0x17)
                v493 = v490 | 7;
              v494 = v493 + 1;
              v491 = operator new(v493 + 1);
              *(_QWORD *)&v769[16] = v490;
              *(_QWORD *)&v769[24] = v494 | 0x8000000000000000;
              *(_QWORD *)&v769[8] = v491;
              v462 = v492;
            }
            else
            {
              v769[31] = v490;
              if (!v490)
              {
LABEL_632:
                v491[v490] = 0;
                v769[32] = 1;
                v495 = (char *)&v770;
                if (v486 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v486 >= 0x17)
                {
                  v497 = (v486 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v486 | 7) != 0x17)
                    v497 = v486 | 7;
                  v498 = v497 + 1;
                  v495 = (char *)operator new(v497 + 1);
                  v771 = (const char *)v486;
                  v772 = v498 | 0x8000000000000000;
                  v770 = v495;
                  v496 = v701;
                }
                else
                {
                  HIBYTE(v772) = v486;
                  v496 = v701;
                  if (!v486)
                  {
LABEL_640:
                    v495[v486] = 0;
                    LOBYTE(v773) = 1;
                    v499 = *(NSObject **)v769;
                    if (SHIBYTE(v772) < 0)
                      operator delete(v770);
                    v439 = v462;
                    if (v769[32] && (v769[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v769[8]);
                    if (*(_QWORD *)v769)
                      os_release(*(void **)v769);
                    if (!v496 || !*(_QWORD *)(v496 + 24))
                    {
                      os_log_type_enabled(v499, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v769 = 136315138;
                      *(_QWORD *)&v769[4] = v710;
                      v506 = (void *)_os_log_send_and_compose_impl();
                      if (v506)
                        free(v506);
                      goto LABEL_718;
                    }
                    v500 = _os_log_pack_size();
                    v501 = operator new(v500, (std::align_val_t)8uLL);
                    v502 = (_QWORD *)operator new();
                    *v502 = &off_24C9ABB80;
                    v502[1] = 0;
                    v502[2] = 0;
                    v502[3] = v501;
                    *(_QWORD *)__dst = v501;
                    *(_QWORD *)&__dst[8] = v501;
                    v767 = 0;
                    v768 = 0;
                    *(_QWORD *)&__dst[16] = v502;
                    v503 = strlen(v710);
                    if (v503 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v504 = v503;
                    if (v503 >= 0x17)
                    {
                      v507 = (v503 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v503 | 7) != 0x17)
                        v507 = v503 | 7;
                      v508 = v507 + 1;
                      v505 = operator new(v507 + 1);
                      *(_QWORD *)&v753[16] = v508 | 0x8000000000000000;
                      *(_QWORD *)v753 = v505;
                      *(_QWORD *)&v753[8] = v504;
                      v439 = v462;
                    }
                    else
                    {
                      v753[23] = v503;
                      v505 = v753;
                      if (!v503)
                      {
LABEL_659:
                        v505[v504] = 0;
                        v509 = *(_QWORD *)v753;
                        v748[0] = *(_QWORD *)&v753[8];
                        *(uint64_t *)((char *)v748 + 7) = *(_QWORD *)&v753[15];
                        v510 = v753[23];
                        v511 = (char *)operator new(0x38uLL);
                        *((_QWORD *)v511 + 1) = 0;
                        *((_QWORD *)v511 + 2) = 0;
                        *((_QWORD *)v511 + 3) = off_24C9ABC20;
                        *(_QWORD *)v511 = &off_24C9ABBD0;
                        v512 = v748[0];
                        *((_QWORD *)v511 + 4) = v509;
                        *((_QWORD *)v511 + 5) = v512;
                        *(_QWORD *)(v511 + 47) = *(uint64_t *)((char *)v748 + 7);
                        v511[55] = v510;
                        memset(v748, 0, 15);
                        v513 = v768;
                        v767 = v511 + 24;
                        v768 = (std::__shared_weak_count *)v511;
                        v467 = MEMORY[0x24BEDB7F0];
                        if (v513)
                        {
                          v514 = (unint64_t *)&v513->__shared_owners_;
                          do
                            v515 = __ldaxr(v514);
                          while (__stlxr(v515 - 1, v514));
                          if (!v515)
                          {
                            ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                            std::__shared_weak_count::__release_weak(v513);
                          }
                        }
                        *(_OWORD *)v769 = *(_OWORD *)__dst;
                        v516 = v767;
                        *(_QWORD *)&v769[16] = *(_QWORD *)&__dst[16];
                        if (*(_QWORD *)&__dst[16])
                        {
                          v517 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                          do
                            v518 = __ldxr(v517);
                          while (__stxr(v518 + 1, v517));
                        }
                        v519 = v768;
                        *(_QWORD *)&v769[24] = v516;
                        *(_QWORD *)&v769[32] = v768;
                        if (v768)
                        {
                          v520 = (unint64_t *)&v768->__shared_owners_;
                          do
                            v521 = __ldxr(v520);
                          while (__stxr(v521 + 1, v520));
                          v770 = v516;
                          do
                            v522 = __ldaxr(v520);
                          while (__stlxr(v522 - 1, v520));
                          if (!v522)
                          {
                            ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                            std::__shared_weak_count::__release_weak(v519);
                          }
                        }
                        else
                        {
                          v770 = v516;
                        }
                        v523 = *(std::__shared_weak_count **)&__dst[16];
                        if (*(_QWORD *)&__dst[16])
                        {
                          v524 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                          do
                            v525 = __ldaxr(v524);
                          while (__stlxr(v525 - 1, v524));
                          if (!v525)
                          {
                            ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
                            std::__shared_weak_count::__release_weak(v523);
                          }
                        }
                        v526 = *(_QWORD *)v769;
                        if (v770[31] >= 0)
                          v527 = v770 + 8;
                        else
                          v527 = (char *)*((_QWORD *)v770 + 1);
                        v528 = _os_log_pack_fill();
                        *(_DWORD *)v528 = 136315138;
                        *(_QWORD *)(v528 + 4) = v527;
                        v529 = operator new();
                        v530 = *(unsigned __int8 *)(v485 + 39);
                        v531 = v706;
                        if ((v530 & 0x80u) != 0)
                        {
                          v531 = *(_QWORD *)(v485 + 16);
                          v530 = *(_QWORD *)(v485 + 24);
                        }
                        *(_QWORD *)v529 = v526;
                        *(_OWORD *)(v529 + 8) = *(_OWORD *)&v769[8];
                        *(_QWORD *)&v769[8] = 0;
                        *(_QWORD *)&v769[16] = 0;
                        *(_OWORD *)(v529 + 24) = *(_OWORD *)&v769[24];
                        *(_QWORD *)&v769[24] = 0;
                        *(_QWORD *)&v769[32] = 0;
                        *(_QWORD *)(v529 + 40) = v531;
                        *(_QWORD *)(v529 + 48) = v530;
                        *(_BYTE *)(v529 + 56) = 1;
                        *(_QWORD *)v753 = 0;
                        *(_QWORD *)__dst = v529;
                        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v701 + 24) + 40))(*(_QWORD *)(v701 + 24), __dst);
                        v532 = *(_QWORD *)__dst;
                        *(_QWORD *)__dst = 0;
                        if (v532)
                        {
                          v533 = *(std::__shared_weak_count **)(v532 + 32);
                          if (v533)
                          {
                            v534 = (unint64_t *)&v533->__shared_owners_;
                            do
                              v535 = __ldaxr(v534);
                            while (__stlxr(v535 - 1, v534));
                            if (!v535)
                            {
                              ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
                              std::__shared_weak_count::__release_weak(v533);
                            }
                          }
                          v536 = *(std::__shared_weak_count **)(v532 + 16);
                          if (v536)
                          {
                            v537 = (unint64_t *)&v536->__shared_owners_;
                            do
                              v538 = __ldaxr(v537);
                            while (__stlxr(v538 - 1, v537));
                            if (!v538)
                            {
                              ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                              std::__shared_weak_count::__release_weak(v536);
                            }
                          }
                          MEMORY[0x212BC6398](v532, 0x10F0C40B62ED6C6);
                          v539 = *(_QWORD *)v753;
                          *(_QWORD *)v753 = 0;
                          if (v539)
                          {
                            v540 = *(std::__shared_weak_count **)(v539 + 32);
                            if (v540)
                            {
                              v541 = (unint64_t *)&v540->__shared_owners_;
                              do
                                v542 = __ldaxr(v541);
                              while (__stlxr(v542 - 1, v541));
                              if (!v542)
                              {
                                ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
                                std::__shared_weak_count::__release_weak(v540);
                              }
                            }
                            v543 = *(std::__shared_weak_count **)(v539 + 16);
                            if (v543)
                            {
                              v544 = (unint64_t *)&v543->__shared_owners_;
                              do
                                v545 = __ldaxr(v544);
                              while (__stlxr(v545 - 1, v544));
                              if (!v545)
                              {
                                ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
                                std::__shared_weak_count::__release_weak(v543);
                              }
                            }
                            MEMORY[0x212BC6398](v539, 0x10F0C40B62ED6C6);
                          }
                        }
                        v546 = *(std::__shared_weak_count **)&v769[32];
                        if (*(_QWORD *)&v769[32])
                        {
                          v547 = (unint64_t *)(*(_QWORD *)&v769[32] + 8);
                          do
                            v548 = __ldaxr(v547);
                          while (__stlxr(v548 - 1, v547));
                          if (!v548)
                          {
                            ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                            std::__shared_weak_count::__release_weak(v546);
                          }
                        }
                        v549 = *(std::__shared_weak_count **)&v769[16];
                        if (*(_QWORD *)&v769[16])
                        {
                          v550 = (unint64_t *)(*(_QWORD *)&v769[16] + 8);
                          do
                            v551 = __ldaxr(v550);
                          while (__stlxr(v551 - 1, v550));
                          if (!v551)
                          {
                            ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                            std::__shared_weak_count::__release_weak(v549);
                          }
                        }
LABEL_718:
                        if (v700)
                        {
                          v552 = (const char *)&v750;
                          if (v751 < 0)
                            v552 = (const char *)v750;
                          sub_20E8C003C((uint64_t)v755, "%s", v552);
                          v553 = *(uint64_t **)v755;
                          if (*(_QWORD *)v755)
                          {
                            v554 = v760;
                            if ((_QWORD)v760)
                            {
                              v555 = (_QWORD *)(**(_QWORD **)v755 + 16);
                              if (*(char *)(**(_QWORD **)v755 + 39) < 0)
                                v555 = (_QWORD *)*v555;
                              v556 = *(_OWORD *)&v755[8];
                              v557 = (int)v756;
                              v558 = v757;
                              v559 = v758;
                              v560 = v759;
                              v561 = (std::__shared_weak_count *)*((_QWORD *)&v760 + 1);
                              *(_OWORD *)__dst = v760;
                              if (*((_QWORD *)&v760 + 1))
                              {
                                v562 = (unint64_t *)(*((_QWORD *)&v760 + 1) + 8);
                                do
                                  v563 = __ldxr(v562);
                                while (__stxr(v563 + 1, v562));
                              }
                              *(_QWORD *)v769 = v555;
                              *(_OWORD *)&v769[8] = v556;
                              *(_DWORD *)&v769[24] = v557;
                              *(_QWORD *)&v769[32] = v558;
                              LODWORD(v770) = v559;
                              v771 = v560;
                              v772 = v554;
                              v773 = v561;
                              if (v561)
                              {
                                v564 = (unint64_t *)&v561->__shared_owners_;
                                do
                                  v565 = __ldxr(v564);
                                while (__stxr(v565 + 1, v564));
                              }
                              if (v557 >= **(_DWORD **)(*v553 + 56))
                              {
                                sub_20E8C3FC4(*v553, (uint64_t)v769);
                                v561 = v773;
                              }
                              if (v561)
                              {
                                v566 = (unint64_t *)&v561->__shared_owners_;
                                do
                                  v567 = __ldaxr(v566);
                                while (__stlxr(v567 - 1, v566));
                                if (!v567)
                                {
                                  ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
                                  std::__shared_weak_count::__release_weak(v561);
                                }
                              }
                              v568 = *(std::__shared_weak_count **)&__dst[8];
                              if (*(_QWORD *)&__dst[8])
                              {
                                v569 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
                                do
                                  v570 = __ldaxr(v569);
                                while (__stlxr(v570 - 1, v569));
                                if (!v570)
                                {
                                  ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
                                  std::__shared_weak_count::__release_weak(v568);
                                }
                              }
                              v571 = (std::__shared_weak_count *)*((_QWORD *)&v760 + 1);
                              v760 = 0uLL;
                              if (v571)
                              {
                                v572 = (unint64_t *)&v571->__shared_owners_;
                                do
                                  v573 = __ldaxr(v572);
                                while (__stlxr(v573 - 1, v572));
                                if (!v573)
                                {
                                  ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
                                  std::__shared_weak_count::__release_weak(v571);
                                }
                              }
                            }
                          }
                        }
                        v574 = *(uint64_t **)v755;
                        if (*(_QWORD *)v755)
                        {
                          v575 = v760;
                          if ((_QWORD)v760)
                          {
                            v576 = (_QWORD *)(**(_QWORD **)v755 + 16);
                            if (*(char *)(**(_QWORD **)v755 + 39) < 0)
                              v576 = (_QWORD *)*v576;
                            v577 = *(_OWORD *)&v755[8];
                            v578 = (int)v756;
                            v579 = v757;
                            v580 = v758;
                            v581 = v759;
                            v582 = (std::__shared_weak_count *)*((_QWORD *)&v760 + 1);
                            *(_OWORD *)__dst = v760;
                            if (*((_QWORD *)&v760 + 1))
                            {
                              v583 = (unint64_t *)(*((_QWORD *)&v760 + 1) + 8);
                              do
                                v584 = __ldxr(v583);
                              while (__stxr(v584 + 1, v583));
                            }
                            *(_QWORD *)v769 = v576;
                            *(_OWORD *)&v769[8] = v577;
                            *(_DWORD *)&v769[24] = v578;
                            *(_QWORD *)&v769[32] = v579;
                            LODWORD(v770) = v580;
                            v771 = v581;
                            v772 = v575;
                            v773 = v582;
                            if (v582)
                            {
                              v585 = (unint64_t *)&v582->__shared_owners_;
                              do
                                v586 = __ldxr(v585);
                              while (__stxr(v586 + 1, v585));
                            }
                            if (v578 >= **(_DWORD **)(*v574 + 56))
                            {
                              sub_20E8C3FC4(*v574, (uint64_t)v769);
                              v582 = v773;
                            }
                            if (v582)
                            {
                              v587 = (unint64_t *)&v582->__shared_owners_;
                              do
                                v588 = __ldaxr(v587);
                              while (__stlxr(v588 - 1, v587));
                              if (!v588)
                              {
                                ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
                                std::__shared_weak_count::__release_weak(v582);
                              }
                            }
                            v589 = *(std::__shared_weak_count **)&__dst[8];
                            if (*(_QWORD *)&__dst[8])
                            {
                              v590 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
                              do
                                v591 = __ldaxr(v590);
                              while (__stlxr(v591 - 1, v590));
                              if (!v591)
                              {
                                ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
                                std::__shared_weak_count::__release_weak(v589);
                              }
                            }
                            v592 = (std::__shared_weak_count *)*((_QWORD *)&v760 + 1);
                            v760 = 0uLL;
                            if (v592)
                            {
                              v593 = (unint64_t *)&v592->__shared_owners_;
                              do
                                v594 = __ldaxr(v593);
                              while (__stlxr(v594 - 1, v593));
                              if (!v594)
                              {
                                ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
                                std::__shared_weak_count::__release_weak(v592);
                              }
                            }
                          }
                        }
                        v595 = (std::__shared_weak_count *)*((_QWORD *)&v760 + 1);
                        if (*((_QWORD *)&v760 + 1))
                        {
                          v596 = (unint64_t *)(*((_QWORD *)&v760 + 1) + 8);
                          do
                            v597 = __ldaxr(v596);
                          while (__stlxr(v597 - 1, v596));
                          if (!v597)
                          {
                            ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                            std::__shared_weak_count::__release_weak(v595);
                          }
                        }
                        if (SHIBYTE(v751) < 0)
                          operator delete((void *)v750);
                        object[0] = *(void **)v467;
                        v598 = *(void **)(v467 + 72);
                        *(void **)((char *)object + *((_QWORD *)object[0] - 3)) = *(void **)(v467 + 64);
                        object[2] = v598;
                        object[3] = (void *)(v439 + 16);
                        if ((v763[31] & 0x80000000) != 0)
                          operator delete(*(void **)&v763[8]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](v765);
                        goto LABEL_785;
                      }
                    }
                    memcpy(v505, v710, v504);
                    goto LABEL_659;
                  }
                }
                memmove(v495, v487, v486);
                goto LABEL_640;
              }
            }
            memmove(v491, v489, v490);
            goto LABEL_632;
          }
        }
        memmove(v478, v481, v477);
        goto LABEL_612;
      }
    }
    memmove(v469, v472, v468);
    goto LABEL_589;
  }
  if (v252 != v251)
  {
    v253 = *a3;
    v254 = *(_QWORD *)(v123 + 2824);
    while (1)
    {
      v255 = *(_QWORD *)(v254 + 16);
      if (v255)
      {
        if (*(_QWORD *)(v255 + 160) == v253)
          break;
      }
      v254 += 4472;
      if (v254 == v251)
        goto LABEL_478;
    }
    if (v254 != v251)
    {
      v256 = *(_QWORD **)(v255 + 424);
      v257 = (uint64_t *)(*v256 + 56);
      v258 = *v257;
      if (*v257)
      {
        v259 = *((_DWORD *)a3 + 2);
        v260 = *v256 + 56;
        do
        {
          v261 = *(_QWORD *)(v258 + 32);
          if (v261 < v253)
          {
            v258 += 8;
          }
          else if (v261 == v253)
          {
            if (*(_DWORD *)(v258 + 40) < v259)
              v258 += 8;
            else
              v260 = v258;
          }
          else
          {
            v260 = v258;
          }
          v258 = *(_QWORD *)v258;
        }
        while (v258);
LABEL_457:
        if ((uint64_t *)v260 != v257)
        {
          v266 = *(_QWORD *)(v260 + 32);
          if (v253 >= v266 && (v253 != v266 || *(_DWORD *)(v260 + 40) <= v259))
          {
            v267 = *(_QWORD *)(v260 + 48);
            if (v267)
            {
              if (v251 == v252)
                goto LABEL_985;
              v268 = 0;
              v269 = 0;
              __asm { FMOV            V1.2D, #1.0 }
              v271 = 0uLL;
              v272 = 1;
              v273 = 0uLL;
              v274 = 0uLL;
              v275 = 0uLL;
              v276 = 0uLL;
              v277 = 0uLL;
              v278 = 0uLL;
              v279 = 0uLL;
LABEL_464:
              ++v269;
              do
              {
                if (*(_QWORD *)(*(_QWORD *)(v252 + 4472 * v268 + 16) + 160) == v253)
                {
                  v272 = 0;
                  v280.f64[0] = *(float64_t *)(v267 + 16);
                  v280.f64[1] = *(float64_t *)(v267 + 40);
                  v281 = *(float64x2_t *)(v267 + 24);
                  _Q7 = *(float64x2_t *)(v267 + 48);
                  v283 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v267, (int64x2_t)v281);
                  v284 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v267, (int64x2_t)v281);
                  v281.f64[0] = *(float64_t *)(v267 + 88);
                  v285 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v283, *(double *)(v267 + 72)), v284, *(float64x2_t *)(v267 + 72), 1), v280, v281.f64[0]);
                  _D16 = *(_QWORD *)(v267 + 80);
                  __asm { FMLA            D17, D16, V7.D[1] }
                  v281.f64[0] = _D17 + *(double *)(v267 + 64) * v281.f64[0];
                  v288 = *(_QWORD *)(v267 + 48);
                  v289 = vextq_s8((int8x16_t)v284, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q7, 1), 8uLL);
                  *(_QWORD *)&v284.f64[1] = v289.i64[0];
                  v290 = *(_QWORD *)(v267 + 64);
                  v291.f64[1] = *((float64_t *)&_Q1 + 1);
                  *(_QWORD *)&v291.f64[0] = *(_OWORD *)&vnegq_f64(v281);
                  v292 = &v129[8 * v268];
                  _Q7.f64[0] = v292[1].f64[0];
                  v293 = v292[3].f64[0];
                  v294 = v292[2];
                  _D25 = v292[5].f64[0];
                  v296 = v292[4];
                  _D16 = v292[7].f64[0];
                  _Q17 = v292[6];
                  v299 = vmulq_n_f64(v283, _Q7.f64[0]);
                  v300 = vmulq_n_f64((float64x2_t)v288, _Q7.f64[0]);
                  _Q7.f64[1] = v293;
                  v301 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v292, (int64x2_t)v294), vnegq_f64(_Q17).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v292, (int64x2_t)v294), _Q17, 1), _Q7, _D16, 0);
                  _Q7.f64[0] = v292[4].f64[1];
                  __asm
                  {
                    FMLS            D29, D7, V17.D[1]
                    FMLS            D29, D25, V16.D[0]
                  }
                  v271 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v283, v292->f64[0]), v284, v294.f64[0]), v280, v296.f64[0]), (float64x2_t)0, v285);
                  v273 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v288, v292->f64[0]), (float64x2_t)v289.u64[1], v294.f64[0]), (float64x2_t)v290, v296.f64[0]), (float64x2_t)0, v291);
                  v274 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v283, *v292, 1), v284, v294, 1), v280, v296, 1), (float64x2_t)0, v285);
                  v275 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v288, *v292, 1), (float64x2_t)v289.u64[1], v294, 1), (float64x2_t)v290, v296, 1), (float64x2_t)0, v291);
                  v276 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v299, v284, v293), v280, _D25), (float64x2_t)0, v285);
                  v277 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v300, (float64x2_t)v289.u64[1], v293), (float64x2_t)v290, _D25), (float64x2_t)0, v291);
                  v278 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v283, v301.f64[0]), v284, v301, 1), v280, _D29), v285);
                  v279 = vaddq_f64(v291, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v288, v301.f64[0]), (float64x2_t)v289.u64[1], v301, 1), (float64x2_t)v290, _D29));
                  v268 = v269;
                  if (v250 <= v269)
                    goto LABEL_475;
                  goto LABEL_464;
                }
                v268 = v269++;
              }
              while (v250 > v268);
              if ((v272 & 1) != 0)
              {
LABEL_985:
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 4293, (uint64_t)"T_G_new_to_anchored_state", 25, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0);
                v696 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v696 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v697 = qword_254A6DE40;
                  for (k = qword_254A6DE48; v697 != k; v697 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v697)(*(_QWORD *)(v697 + 8), "T_G_new_to_anchored_state", 25, &unk_2102A1D75, 0);
                }
                v699 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v699 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "T_G_new_to_anchored_state", 25, &unk_2102A1D75, 0);
                sub_20E866B34();
              }
LABEL_475:
              *(_QWORD *)&v304.f64[0] = a3[4];
              v305 = *((int64x2_t *)a3 + 1);
              v306 = *((int64x2_t *)a3 + 3);
              v307 = *((float64x2_t *)a3 + 5);
              v308 = (float64x2_t)vzip1q_s64(v305, v306);
              _Q0 = (float64x2_t)vzip2q_s64(v305, v306);
              *(_QWORD *)&v304.f64[1] = a3[8];
              v310 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64((int64x2_t)v307, 1), 8uLL);
              v311 = vzip1q_s64((int64x2_t)v307, (int64x2_t)_Q0);
              _D25 = *((double *)a3 + 16);
              _Q26 = *((float64x2_t *)a3 + 7);
              v314 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v308, vnegq_f64(_Q26).f64[0]), _Q0, _Q26, 1), v304, _D25, 0);
              *(_QWORD *)&_Q0.f64[0] = a3[11];
              *(_QWORD *)&v307.f64[0] = vdupq_laneq_s64(v311, 1).u64[0];
              __asm { FMLS            D20, D0, V26.D[1] }
              *(_QWORD *)&_Q26.f64[0] = v310.i64[1];
              *(_QWORD *)&v307.f64[1] = v310.i64[0];
              _D28 = a3[12];
              __asm { FMLS            D20, D22, V25.D[0] }
              _Q20.f64[1] = 1.0;
              v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v271.f64[0]), v307, v271, 1), v304, v273.f64[0]), v314, v273, 1);
              v319 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v311.u64[0], v271.f64[0]), (float64x2_t)v310.u64[1], v271, 1), (float64x2_t)_D28, v273.f64[0]), _Q20, v273, 1);
              v320 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v274.f64[0]), v307, v274, 1), v304, v275.f64[0]), v314, v275, 1);
              v321 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v311.u64[0], v274.f64[0]), (float64x2_t)*(unint64_t *)&_Q26.f64[0], v274, 1), (float64x2_t)_D28, v275.f64[0]), _Q20, v275, 1);
              v322 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v276.f64[0]), v307, v276, 1), v304, v277.f64[0]), v314, v277, 1);
              v323 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v311.u64[0], v276.f64[0]), (float64x2_t)*(unint64_t *)&_Q26.f64[0], v276, 1), (float64x2_t)_D28, v277.f64[0]), _Q20, v277, 1);
              v324 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v278.f64[0]), v307, v278, 1), v304, v279.f64[0]), v314, v279, 1);
              v325 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v311.u64[0], v278.f64[0]), (float64x2_t)*(unint64_t *)&_Q26.f64[0], v278, 1), (float64x2_t)_D28, v279.f64[0]), _Q20, v279, 1);
              do
              {
                v326 = v129[1];
                v328 = v129[2];
                v327 = v129[3];
                v330 = v129[4];
                v329 = v129[5];
                v332 = v129[6];
                v331 = v129[7];
                v333 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v319, v129->f64[0]), v321, *v129, 1), v323, v326.f64[0]), v325, v326, 1);
                *v129 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v129->f64[0]), v320, *v129, 1), v322, v326.f64[0]), v324, v326, 1);
                v129[1] = v333;
                v129[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v328.f64[0]), v320, v328, 1), v322, v327.f64[0]), v324, v327, 1);
                v129[3] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v319, v328.f64[0]), v321, v328, 1), v323, v327.f64[0]), v325, v327, 1);
                v129[4] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v330.f64[0]), v320, v330, 1), v322, v329.f64[0]), v324, v329, 1);
                v129[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v319, v330.f64[0]), v321, v330, 1), v323, v329.f64[0]), v325, v329, 1);
                v129[6] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v332.f64[0]), v320, v332, 1), v322, v331.f64[0]), v324, v331, 1);
                v129[7] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v319, v332.f64[0]), v321, v332, 1), v323, v331.f64[0]), v325, v331, 1);
                v129 += 8;
              }
              while (v129 != v130);
              v251 = *(_QWORD *)(v123 + 2832);
              v252 = *(_QWORD *)(v123 + 2824);
            }
          }
        }
      }
    }
    goto LABEL_478;
  }
  v252 = *(_QWORD *)(v123 + 2832);
  if (*((_BYTE *)a3 + 144))
    goto LABEL_532;
LABEL_788:
  sub_20F31DCD4(v748);
  if (**(int **)(v748[0] + 56) > 2)
    goto LABEL_942;
  v600 = *(unsigned __int8 *)(v748[0] + 72);
  v601 = sub_20E8C31DC(v748[0], "OSLogSurrogateAppender", 1, 0);
  v602 = v601;
  if (!v600 && v601 == 0)
    goto LABEL_942;
  sub_20E863438((uint64_t)&v738);
  v769[23] = 13;
  strcpy(v769, "OptimizeMap()");
  sub_20F32DC5C(object, v123, (uint64_t)v769);
  if (SHIBYTE(object[2]) >= 0)
    v604 = object;
  else
    v604 = (void **)object[0];
  if (SHIBYTE(object[2]) >= 0)
    v605 = HIBYTE(object[2]);
  else
    v605 = (uint64_t)object[1];
  sub_20E86A980((_QWORD *)&v739 + 1, (uint64_t)v604, v605);
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((v769[23] & 0x80000000) != 0)
      goto LABEL_805;
LABEL_801:
    v606 = v746;
    v715 = v600;
    if ((v746 & 0x10) == 0)
      goto LABEL_802;
LABEL_806:
    v610 = *((double *)&v745 + 1);
    if (*((_QWORD *)&v745 + 1) < *(_QWORD *)&v742.f64[1])
    {
      *((_QWORD *)&v745 + 1) = *(_QWORD *)&v742.f64[1];
      v610 = v742.f64[1];
    }
    v611 = v742.f64[0];
    v608 = *(_QWORD *)&v610 - *(_QWORD *)&v742.f64[0];
    if (*(_QWORD *)&v610 - *(_QWORD *)&v742.f64[0] > 0x7FFFFFFFFFFFFFF7uLL)
      goto LABEL_861;
  }
  else
  {
    if ((v769[23] & 0x80000000) == 0)
      goto LABEL_801;
LABEL_805:
    operator delete(*(void **)v769);
    v606 = v746;
    v715 = v600;
    if ((v746 & 0x10) != 0)
      goto LABEL_806;
LABEL_802:
    if ((v606 & 8) == 0)
    {
      v607 = v602;
      v608 = 0;
      v753[23] = 0;
      v609 = v753;
      goto LABEL_816;
    }
    v611 = *(double *)&v740[16];
    v608 = *(_QWORD *)&v741 - *(_QWORD *)&v740[16];
    if (*(_QWORD *)&v741 - *(_QWORD *)&v740[16] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_861:
      sub_20E860B7C();
  }
  if (v608 >= 0x17)
  {
    v612 = (v608 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v608 | 7) != 0x17)
      v612 = v608 | 7;
    v613 = v612 + 1;
    v609 = operator new(v612 + 1);
    *(_QWORD *)&v753[16] = v613 | 0x8000000000000000;
    *(_QWORD *)v753 = v609;
    *(_QWORD *)&v753[8] = v608;
  }
  else
  {
    v753[23] = v608;
    v609 = v753;
    if (!v608)
    {
      v607 = v602;
      goto LABEL_816;
    }
  }
  v607 = v602;
  memmove(v609, *(const void **)&v611, v608);
LABEL_816:
  v609[v608] = 0;
  *(_QWORD *)v769 = v748;
  *(std::chrono::steady_clock::time_point *)&v769[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v769[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v769[24] = 2;
  *(_QWORD *)&v769[32] = "unknown file";
  LODWORD(v770) = 2179;
  v772 = 0;
  v773 = 0;
  v771 = "unknown function";
  if (v753[23] >= 0)
    v614 = v753;
  else
    v614 = *(_BYTE **)v753;
  v615 = **(_QWORD **)v769;
  v616 = (const char *)(**(_QWORD **)v769 + 16);
  v713 = v616;
  if (*(char *)(**(_QWORD **)v769 + 39) < 0)
  {
    v616 = *(const char **)(v615 + 16);
    v617 = *(_QWORD *)(v615 + 24);
    v619 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v619 & 1) == 0)
    {
LABEL_974:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v617 = *(unsigned __int8 *)(**(_QWORD **)v769 + 39);
    v618 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v618 & 1) == 0)
      goto LABEL_974;
  }
  if (byte_254A4A4F8[23] >= 0)
    v620 = byte_254A4A4F8;
  else
    v620 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v621 = byte_254A4A4F8[23];
  else
    v621 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v620, v616);
  v622 = &object[1];
  if (v621 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v621 >= 0x17)
  {
    v623 = (v621 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v621 | 7) != 0x17)
      v623 = v621 | 7;
    v624 = v623 + 1;
    v622 = (void **)operator new(v623 + 1);
    object[3] = (void *)(v624 | 0x8000000000000000);
    object[1] = v622;
    object[2] = (void *)v621;
    goto LABEL_836;
  }
  HIBYTE(object[3]) = v621;
  if (v621)
LABEL_836:
    memmove(v622, v620, v621);
  *((_BYTE *)v622 + v621) = 0;
  LOBYTE(object[4]) = 1;
  v625 = &object[5];
  if (v617 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v626 = v614;
  if (v617 >= 0x17)
  {
    v629 = (v617 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v617 | 7) != 0x17)
      v629 = v617 | 7;
    v630 = v629 + 1;
    v625 = (void **)operator new(v629 + 1);
    v627 = v607;
    object[7] = (void *)(v630 | 0x8000000000000000);
    object[5] = v625;
    object[6] = (void *)v617;
  }
  else
  {
    HIBYTE(object[7]) = v617;
    v627 = v607;
    if (!v617)
    {
      LOBYTE(object[5]) = 0;
      LOBYTE(v762.f64[0]) = 1;
      v628 = object[0];
      if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        goto LABEL_841;
LABEL_847:
      operator delete(object[5]);
      v123 = v719;
      if (LOBYTE(object[4]))
        goto LABEL_848;
      goto LABEL_850;
    }
  }
  memmove(v625, v616, v617);
  *((_BYTE *)v625 + v617) = 0;
  LOBYTE(v762.f64[0]) = 1;
  v628 = object[0];
  if (SHIBYTE(object[7]) < 0)
    goto LABEL_847;
LABEL_841:
  v123 = v719;
  if (LOBYTE(object[4]))
  {
LABEL_848:
    if (SHIBYTE(object[3]) < 0)
      operator delete(object[1]);
  }
LABEL_850:
  if (object[0])
    os_release(object[0]);
  if (!v627 || !*(_QWORD *)(v627 + 24))
  {
    v638 = v128;
    os_log_type_enabled(v628, OS_LOG_TYPE_DEBUG);
    LODWORD(object[0]) = 136315138;
    *(void **)((char *)object + 4) = v626;
    v639 = (void *)_os_log_send_and_compose_impl();
    v640 = v715;
    if (v639)
      free(v639);
    goto LABEL_928;
  }
  v631 = _os_log_pack_size();
  v632 = operator new(v631, (std::align_val_t)8uLL);
  v633 = (_QWORD *)operator new();
  *v633 = &off_24C9ABB80;
  v633[1] = 0;
  v633[2] = 0;
  v633[3] = v632;
  *(_QWORD *)v755 = v632;
  *(_QWORD *)&v755[8] = v632;
  v757 = 0;
  *(_QWORD *)&v755[16] = v633;
  v756 = 0;
  v634 = strlen((const char *)v626);
  if (v634 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v635 = v634;
  if (v634 >= 0x17)
  {
    v641 = (v634 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v634 | 7) != 0x17)
      v641 = v634 | 7;
    v642 = v641 + 1;
    v636 = operator new(v641 + 1);
    *(_QWORD *)&__dst[8] = v635;
    *(_QWORD *)&__dst[16] = v642 | 0x8000000000000000;
    *(_QWORD *)__dst = v636;
    goto LABEL_865;
  }
  __dst[23] = v634;
  v636 = __dst;
  if (v634)
  {
LABEL_865:
    v637 = v713;
    v638 = v128;
    memcpy(v636, v626, v635);
    goto LABEL_866;
  }
  v637 = v713;
  v638 = v128;
LABEL_866:
  v636[v635] = 0;
  *(_QWORD *)&v750 = *(_QWORD *)&__dst[8];
  v643 = *(_QWORD *)__dst;
  *(_QWORD *)((char *)&v750 + 7) = *(_QWORD *)&__dst[15];
  v644 = __dst[23];
  v645 = (char *)operator new(0x38uLL);
  *((_QWORD *)v645 + 1) = 0;
  *((_QWORD *)v645 + 2) = 0;
  *((_QWORD *)v645 + 3) = off_24C9ABC20;
  *(_QWORD *)v645 = &off_24C9ABBD0;
  v646 = v750;
  *((_QWORD *)v645 + 4) = v643;
  *((_QWORD *)v645 + 5) = v646;
  *(_QWORD *)(v645 + 47) = *(_QWORD *)((char *)&v750 + 7);
  v645[55] = v644;
  *(_QWORD *)&v750 = 0;
  *(_QWORD *)((char *)&v750 + 7) = 0;
  v647 = (std::__shared_weak_count *)v757;
  v756 = v645 + 24;
  v757 = v645;
  v123 = v719;
  if (v647)
  {
    v648 = (unint64_t *)&v647->__shared_owners_;
    do
      v649 = __ldaxr(v648);
    while (__stlxr(v649 - 1, v648));
    if (!v649)
    {
      ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
      std::__shared_weak_count::__release_weak(v647);
    }
  }
  *(_OWORD *)object = *(_OWORD *)v755;
  v650 = v756;
  object[2] = *(void **)&v755[16];
  if (*(_QWORD *)&v755[16])
  {
    v651 = (unint64_t *)(*(_QWORD *)&v755[16] + 8);
    do
      v652 = __ldxr(v651);
    while (__stxr(v652 + 1, v651));
  }
  v653 = (std::__shared_weak_count *)v757;
  object[3] = v650;
  object[4] = (void *)v757;
  if (v757)
  {
    v654 = (unint64_t *)(v757 + 8);
    do
      v655 = __ldxr(v654);
    while (__stxr(v655 + 1, v654));
    object[5] = v650;
    do
      v656 = __ldaxr(v654);
    while (__stlxr(v656 - 1, v654));
    if (!v656)
    {
      ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
      std::__shared_weak_count::__release_weak(v653);
    }
  }
  else
  {
    object[5] = v650;
  }
  v657 = *(std::__shared_weak_count **)&v755[16];
  if (*(_QWORD *)&v755[16])
  {
    v658 = (unint64_t *)(*(_QWORD *)&v755[16] + 8);
    do
      v659 = __ldaxr(v658);
    while (__stlxr(v659 - 1, v658));
    if (!v659)
    {
      ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
      std::__shared_weak_count::__release_weak(v657);
    }
  }
  v660 = object[0];
  if (*((char *)object[5] + 31) >= 0)
    v661 = (char *)object[5] + 8;
  else
    v661 = (char *)*((_QWORD *)object[5] + 1);
  v662 = _os_log_pack_fill();
  *(_DWORD *)v662 = 136315138;
  *(_QWORD *)(v662 + 4) = v661;
  v663 = operator new();
  v664 = *(unsigned __int8 *)(v615 + 39);
  if ((v664 & 0x80u) == 0)
    v665 = v637;
  else
    v665 = *(const char **)(v615 + 16);
  if ((v664 & 0x80u) != 0)
    v664 = *(_QWORD *)(v615 + 24);
  *(_QWORD *)v663 = v660;
  *(_OWORD *)(v663 + 8) = *(_OWORD *)&object[1];
  object[1] = 0;
  object[2] = 0;
  *(_OWORD *)(v663 + 24) = *(_OWORD *)&object[3];
  object[3] = 0;
  object[4] = 0;
  *(_QWORD *)(v663 + 40) = v665;
  *(_QWORD *)(v663 + 48) = v664;
  *(_BYTE *)(v663 + 56) = 2;
  *(_QWORD *)__dst = 0;
  *(_QWORD *)v755 = v663;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v627 + 24) + 40))(*(_QWORD *)(v627 + 24), v755);
  v666 = *(_QWORD *)v755;
  *(_QWORD *)v755 = 0;
  v640 = v715;
  if (v666)
  {
    v667 = *(std::__shared_weak_count **)(v666 + 32);
    if (v667)
    {
      v668 = (unint64_t *)&v667->__shared_owners_;
      do
        v669 = __ldaxr(v668);
      while (__stlxr(v669 - 1, v668));
      if (!v669)
      {
        ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
        std::__shared_weak_count::__release_weak(v667);
      }
    }
    v670 = *(std::__shared_weak_count **)(v666 + 16);
    if (v670)
    {
      v671 = (unint64_t *)&v670->__shared_owners_;
      do
        v672 = __ldaxr(v671);
      while (__stlxr(v672 - 1, v671));
      if (!v672)
      {
        ((void (*)(std::__shared_weak_count *))v670->__on_zero_shared)(v670);
        std::__shared_weak_count::__release_weak(v670);
      }
    }
    MEMORY[0x212BC6398](v666, 0x10F0C40B62ED6C6);
    v673 = *(_QWORD *)__dst;
    *(_QWORD *)__dst = 0;
    if (v673)
    {
      v674 = *(std::__shared_weak_count **)(v673 + 32);
      if (v674)
      {
        v675 = (unint64_t *)&v674->__shared_owners_;
        do
          v676 = __ldaxr(v675);
        while (__stlxr(v676 - 1, v675));
        if (!v676)
        {
          ((void (*)(std::__shared_weak_count *))v674->__on_zero_shared)(v674);
          std::__shared_weak_count::__release_weak(v674);
        }
      }
      v677 = *(std::__shared_weak_count **)(v673 + 16);
      if (v677)
      {
        v678 = (unint64_t *)&v677->__shared_owners_;
        do
          v679 = __ldaxr(v678);
        while (__stlxr(v679 - 1, v678));
        if (!v679)
        {
          ((void (*)(std::__shared_weak_count *))v677->__on_zero_shared)(v677);
          std::__shared_weak_count::__release_weak(v677);
        }
      }
      MEMORY[0x212BC6398](v673, 0x10F0C40B62ED6C6);
    }
  }
  v680 = (std::__shared_weak_count *)object[4];
  if (object[4])
  {
    v681 = (unint64_t *)((char *)object[4] + 8);
    do
      v682 = __ldaxr(v681);
    while (__stlxr(v682 - 1, v681));
    if (!v682)
    {
      ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
      std::__shared_weak_count::__release_weak(v680);
    }
  }
  v683 = (std::__shared_weak_count *)object[2];
  if (object[2])
  {
    v684 = (unint64_t *)((char *)object[2] + 8);
    do
      v685 = __ldaxr(v684);
    while (__stlxr(v685 - 1, v684));
    if (!v685)
    {
      ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
      std::__shared_weak_count::__release_weak(v683);
    }
  }
LABEL_928:
  if (v640)
  {
    v686 = v753;
    if (v753[23] < 0)
      v686 = *(const char **)v753;
    sub_20E8C003C((uint64_t)v769, "%s", v686);
    sub_20E863570((uint64_t)v769);
  }
  sub_20E863570((uint64_t)v769);
  v687 = v773;
  if (v773)
  {
    v688 = (unint64_t *)&v773->__shared_owners_;
    do
      v689 = __ldaxr(v688);
    while (__stlxr(v689 - 1, v688));
    if (!v689)
    {
      ((void (*)(std::__shared_weak_count *))v687->__on_zero_shared)(v687);
      std::__shared_weak_count::__release_weak(v687);
    }
  }
  if ((v753[23] & 0x80000000) != 0)
    operator delete(*(void **)v753);
  v738 = (void *)*MEMORY[0x24BEDB7F0];
  v690 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&v738 + *((_QWORD *)v738 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *((_QWORD *)&v739 + 1) = v690;
  *(_QWORD *)v740 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v745) < 0)
    operator delete((void *)v744);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v747);
  v128 = v638;
LABEL_942:
  if (*(_BYTE *)(v123 + 3016))
    v691 = *(_QWORD *)(v123 + 3008);
  else
    v691 = 0;
  sub_20F4440F8(v128, (unint64_t)__sa, v691);
  if (v727)
  {
    *(_QWORD *)&v728 = v727;
    operator delete(v727);
  }
  if (v729)
    operator delete(v729);
}

void sub_20F32D554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  uint64_t v50;

  if (*(_BYTE *)(v50 - 152) && *(char *)(v50 - 153) < 0)
    operator delete(*(void **)(v50 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x2C0]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  sub_20E863784((uint64_t)&STACK[0x310]);
  sub_20E863784((uint64_t)&a50);
  if (a36)
    operator delete(a36);
  sub_20F300EA8(a20);
  if (!a39)
    _Unwind_Resume(a1);
  operator delete(a39);
  _Unwind_Resume(a1);
}

uint64_t sub_20F32DC5C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *__p;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  std::ios_base v34;
  uint64_t v35;
  int v36;
  uint64_t __sb;
  const void *v38;
  uint64_t v39;
  const void *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;

  std::streambuf::basic_streambuf();
  __sb = MEMORY[0x24BEDB848] + 16;
  v42 = 0u;
  v43 = 0u;
  v44 = 24;
  v33 = MEMORY[0x24BEDB828] + 24;
  v34.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v34, &__sb);
  v35 = 0;
  v36 = -1;
  sub_20E86A980(&v33, (uint64_t)"\n[CM][", 6);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_20E86A980(v6, (uint64_t)"] ", 2);
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = a3;
  else
    v9 = *(_QWORD *)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  v11 = sub_20E86A980(v7, v9, v10);
  sub_20E86A980(v11, (uint64_t)"\n", 1);
  v12 = *(_QWORD *)(a2 + 2824);
  for (i = *(_QWORD *)(a2 + 2832); v12 != i; v12 += 4472)
  {
    sub_20E86A980(&v33, (uint64_t)"    submap [", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = sub_20E86A980(v14, (uint64_t)"] ", 2);
    sub_20F46D7B8(&__p);
    if ((v32 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v32 & 0x80u) == 0)
      v17 = v32;
    else
      v17 = v31;
    v18 = sub_20E86A980(v15, (uint64_t)p_p, v17);
    sub_20E86A980(v18, (uint64_t)"\n", 1);
    if ((char)v32 < 0)
      operator delete(__p);
  }
  v19 = sub_20E86A980(&v33, (uint64_t)"    map alignment: ", 19);
  sub_20F46D7B8(&__p);
  if ((v32 & 0x80u) == 0)
    v20 = &__p;
  else
    v20 = __p;
  if ((v32 & 0x80u) == 0)
    v21 = v32;
  else
    v21 = v31;
  v22 = sub_20E86A980(v19, (uint64_t)v20, v21);
  sub_20E86A980(v22, (uint64_t)"\n", 1);
  if ((char)v32 < 0)
    operator delete(__p);
  sub_20E86A980(&v33, (uint64_t)"----\n", 5);
  if ((v44 & 0x10) != 0)
  {
    v24 = *((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1) < v41)
    {
      *((_QWORD *)&v43 + 1) = v41;
      v24 = v41;
    }
    v25 = v40;
    v23 = v24 - (_QWORD)v40;
    if (v24 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_43;
  }
  else
  {
    if ((v44 & 8) == 0)
    {
      v23 = 0;
      a1[23] = 0;
      goto LABEL_39;
    }
    v25 = v38;
    v23 = v39 - (_QWORD)v38;
    if ((unint64_t)(v39 - (_QWORD)v38) >= 0x7FFFFFFFFFFFFFF8)
LABEL_43:
      sub_20E860B7C();
  }
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a1 + 1) = v23;
    *((_QWORD *)a1 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a1 = v28;
    a1 = v28;
    goto LABEL_38;
  }
  a1[23] = v23;
  if (v23)
LABEL_38:
    memmove(a1, v25, v23);
LABEL_39:
  a1[v23] = 0;
  std::ostream::~ostream();
  __sb = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v43) < 0)
    operator delete((void *)v42);
  return std::streambuf::~streambuf();
}

void sub_20F32DF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::ostream::~ostream();
  sub_20F23197C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_20F32E01C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  size_t v16;
  void **v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  size_t v45;
  size_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  const char *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  const char *v100;
  const char *v101;
  unint64_t v102;
  void *__p;
  __int128 v104;
  int v105;
  const char *v106;
  int v107;
  const char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void *__dst[2];
  int64_t v112;
  _QWORD v113[2];
  _QWORD v114[3];
  const void *v115;
  uint64_t v116;
  const void *v117;
  unint64_t v118;
  void *v119;
  char v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char v125[4];
  unsigned int v126;
  char v127;
  __int128 v128;
  std::__shared_weak_count *v129;
  char *v130;
  std::__shared_weak_count *v131;
  _QWORD *v132;
  __int128 v133;
  _BYTE v134[24];
  __int128 v135;
  void *v136[2];
  unint64_t v137;
  char v138;
  _QWORD v139[5];

  v139[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 560))
  {
    v2 = *(_QWORD *)(a1 + 2824);
    v3 = *(_QWORD *)(a1 + 2832);
    if (v2 == v3)
    {
      v5 = 0;
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v5 = 0;
      do
      {
        sub_20F46C5FC(*(_QWORD *)(v2 + 232), (uint64_t)v113);
        if (LOBYTE(v114[0]))
        {
          if (HIDWORD(v113[0]) < v5 || v4 == 0)
            v5 = HIDWORD(v113[0]);
          v4 = 1;
        }
        v2 += 4472;
      }
      while (v2 != v3);
    }
    sub_20F46C5FC(*(_QWORD *)(a1 + 3072), (uint64_t)v125);
    if (v127)
    {
      if (v126 < v5 || v4 == 0)
        v5 = v126;
      v7 = v5 >> 8;
LABEL_23:
      sub_20F31DCD4(&v124);
      if (**(int **)(v124 + 56) > 2
        || (v10 = *(unsigned __int8 *)(v124 + 72),
            v11 = *(_BYTE *)(v124 + 72) != 0,
            v12 = sub_20E8C31DC(v124, "OSLogSurrogateAppender", 1, 0),
            ((v12 == 0) & ~v11) != 0))
      {
LABEL_171:
        v8 = 0x100000000;
        return v8 & 0x100000000 | v5 | (v7 << 8);
      }
      sub_20E863438((uint64_t)v113);
      __p = operator new(0x20uLL);
      v104 = xmmword_2102DBF70;
      strcpy((char *)__p, "ShouldTriggerMapOptimization()");
      sub_20F32DC5C(v134, a1, (uint64_t)&__p);
      if (v134[23] >= 0)
        v13 = v134;
      else
        v13 = *(_BYTE **)v134;
      if (v134[23] >= 0)
        v14 = v134[23];
      else
        v14 = *(_QWORD *)&v134[8];
      sub_20E86A980(v114, (uint64_t)v13, v14);
      if ((v134[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v134);
        if ((SHIBYTE(v104) & 0x80000000) == 0)
        {
LABEL_33:
          v15 = v122;
          if ((v122 & 0x10) == 0)
            goto LABEL_34;
          goto LABEL_38;
        }
      }
      else if ((SHIBYTE(v104) & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(__p);
      v15 = v122;
      if ((v122 & 0x10) == 0)
      {
LABEL_34:
        if ((v15 & 8) == 0)
        {
          v16 = 0;
          HIBYTE(v112) = 0;
          v17 = __dst;
          goto LABEL_48;
        }
        v19 = v115;
        v16 = v116 - (_QWORD)v115;
        if ((unint64_t)(v116 - (_QWORD)v115) > 0x7FFFFFFFFFFFFFF7)
LABEL_93:
          sub_20E860B7C();
LABEL_41:
        if (v16 >= 0x17)
        {
          v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v20 = v16 | 7;
          v21 = v20 + 1;
          v17 = (void **)operator new(v20 + 1);
          __dst[1] = (void *)v16;
          v112 = v21 | 0x8000000000000000;
          __dst[0] = v17;
        }
        else
        {
          HIBYTE(v112) = v16;
          v17 = __dst;
          if (!v16)
          {
LABEL_48:
            *((_BYTE *)v17 + v16) = 0;
            __p = &v124;
            *(std::chrono::steady_clock::time_point *)&v104 = std::chrono::steady_clock::now();
            *((std::chrono::system_clock::time_point *)&v104 + 1) = std::chrono::system_clock::now();
            v105 = 2;
            v106 = "unknown file";
            v107 = 2225;
            v109 = 0;
            v110 = 0;
            v108 = "unknown function";
            if (v112 >= 0)
              v22 = (const char *)__dst;
            else
              v22 = (const char *)__dst[0];
            v23 = *(_QWORD *)__p;
            v24 = (const char *)(*(_QWORD *)__p + 16);
            v101 = v24;
            if (*(char *)(*(_QWORD *)__p + 39) < 0)
            {
              v24 = *(const char **)(v23 + 16);
              v25 = *(_QWORD *)(v23 + 24);
              v102 = v12;
              v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v27 & 1) != 0)
                goto LABEL_55;
            }
            else
            {
              v25 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
              v102 = v12;
              v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v26 & 1) != 0)
                goto LABEL_55;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v134);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v134);
              if ((_BYTE)v135 && (v134[23] & 0x80000000) != 0)
                operator delete(*(void **)v134);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_55:
            if (byte_254A4A4F8[23] >= 0)
              v28 = byte_254A4A4F8;
            else
              v28 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v29 = byte_254A4A4F8[23];
            else
              v29 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v134 = os_log_create(v28, v24);
            v30 = &v134[8];
            if (v29 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v29 >= 0x17)
            {
              v100 = v24;
              v31 = v7;
              v32 = v23;
              v33 = v22;
              v34 = v10;
              v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17)
                v35 = v29 | 7;
              v36 = v35 + 1;
              v30 = operator new(v35 + 1);
              *(_QWORD *)&v134[16] = v29;
              *(_QWORD *)&v135 = v36 | 0x8000000000000000;
              *(_QWORD *)&v134[8] = v30;
              v10 = v34;
              v22 = v33;
              v23 = v32;
              v7 = v31;
              v24 = v100;
            }
            else
            {
              BYTE7(v135) = v29;
              if (!v29)
              {
LABEL_69:
                v30[v29] = 0;
                BYTE8(v135) = 1;
                v37 = v136;
                if (v25 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v25 >= 0x17)
                {
                  v39 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v25 | 7) != 0x17)
                    v39 = v25 | 7;
                  v40 = v39 + 1;
                  v37 = (void **)operator new(v39 + 1);
                  v136[1] = (void *)v25;
                  v137 = v40 | 0x8000000000000000;
                  v136[0] = v37;
                  v38 = v102;
                }
                else
                {
                  HIBYTE(v137) = v25;
                  v38 = v102;
                  if (!v25)
                  {
LABEL_77:
                    *((_BYTE *)v37 + v25) = 0;
                    v138 = 1;
                    v41 = *(NSObject **)v134;
                    if (SHIBYTE(v137) < 0)
                      operator delete(v136[0]);
                    if (BYTE8(v135) && SBYTE7(v135) < 0)
                      operator delete(*(void **)&v134[8]);
                    if (*(_QWORD *)v134)
                      os_release(*(void **)v134);
                    if (!v38 || !*(_QWORD *)(v38 + 24))
                    {
                      os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)v134 = 136315138;
                      *(_QWORD *)&v134[4] = v22;
                      v48 = (void *)_os_log_send_and_compose_impl();
                      if (v48)
                        free(v48);
                      goto LABEL_157;
                    }
                    v42 = _os_log_pack_size();
                    v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
                    v44 = (std::__shared_weak_count *)operator new();
                    v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v44->__shared_owners_ = 0;
                    v44->__shared_weak_owners_ = 0;
                    v44[1].__vftable = v43;
                    *(_QWORD *)&v128 = v43;
                    *((_QWORD *)&v128 + 1) = v43;
                    v130 = 0;
                    v131 = 0;
                    v129 = v44;
                    v45 = strlen(v22);
                    if (v45 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v46 = v45;
                    if (v45 >= 0x17)
                    {
                      v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v45 | 7) != 0x17)
                        v49 = v45 | 7;
                      v50 = v49 + 1;
                      v47 = operator new(v49 + 1);
                      *(_QWORD *)&v133 = v46;
                      *((_QWORD *)&v133 + 1) = v50 | 0x8000000000000000;
                      v132 = v47;
                      v38 = v102;
                    }
                    else
                    {
                      HIBYTE(v133) = v45;
                      v47 = &v132;
                      if (!v45)
                      {
LABEL_98:
                        *((_BYTE *)v47 + v46) = 0;
                        v51 = v132;
                        v139[0] = v133;
                        *(_QWORD *)((char *)v139 + 7) = *(_QWORD *)((char *)&v133 + 7);
                        v52 = HIBYTE(v133);
                        v53 = operator new(0x38uLL);
                        v53[1] = 0;
                        v53[2] = 0;
                        v53[3] = off_24C9ABC20;
                        *v53 = &off_24C9ABBD0;
                        v54 = v139[0];
                        v53[4] = v51;
                        v53[5] = v54;
                        *(_QWORD *)((char *)v53 + 47) = *(_QWORD *)((char *)v139 + 7);
                        *((_BYTE *)v53 + 55) = v52;
                        v139[0] = 0;
                        *(_QWORD *)((char *)v139 + 7) = 0;
                        v55 = v131;
                        v130 = (char *)(v53 + 3);
                        v131 = (std::__shared_weak_count *)v53;
                        if (v55)
                        {
                          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
                          do
                            v57 = __ldaxr(p_shared_owners);
                          while (__stlxr(v57 - 1, p_shared_owners));
                          if (!v57)
                          {
                            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                            std::__shared_weak_count::__release_weak(v55);
                          }
                        }
                        *(_OWORD *)v134 = v128;
                        v58 = v130;
                        *(_QWORD *)&v134[16] = v129;
                        if (v129)
                        {
                          v59 = (unint64_t *)&v129->__shared_owners_;
                          do
                            v60 = __ldxr(v59);
                          while (__stxr(v60 + 1, v59));
                        }
                        v61 = v131;
                        *(_QWORD *)&v135 = v58;
                        *((_QWORD *)&v135 + 1) = v131;
                        if (v131)
                        {
                          v62 = (unint64_t *)&v131->__shared_owners_;
                          do
                            v63 = __ldxr(v62);
                          while (__stxr(v63 + 1, v62));
                          v136[0] = v58;
                          do
                            v64 = __ldaxr(v62);
                          while (__stlxr(v64 - 1, v62));
                          if (!v64)
                          {
                            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                            std::__shared_weak_count::__release_weak(v61);
                          }
                        }
                        else
                        {
                          v136[0] = v58;
                        }
                        v65 = v129;
                        if (v129)
                        {
                          v66 = (unint64_t *)&v129->__shared_owners_;
                          do
                            v67 = __ldaxr(v66);
                          while (__stlxr(v67 - 1, v66));
                          if (!v67)
                          {
                            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                            std::__shared_weak_count::__release_weak(v65);
                          }
                        }
                        v68 = *(_QWORD *)v134;
                        if (*((char *)v136[0] + 31) >= 0)
                          v69 = (char *)v136[0] + 8;
                        else
                          v69 = (char *)*((_QWORD *)v136[0] + 1);
                        v70 = _os_log_pack_fill();
                        *(_DWORD *)v70 = 136315138;
                        *(_QWORD *)(v70 + 4) = v69;
                        v71 = operator new();
                        v72 = *(unsigned __int8 *)(v23 + 39);
                        v73 = v101;
                        if ((v72 & 0x80u) != 0)
                        {
                          v73 = *(const char **)(v23 + 16);
                          v72 = *(_QWORD *)(v23 + 24);
                        }
                        *(_QWORD *)v71 = v68;
                        *(_OWORD *)(v71 + 8) = *(_OWORD *)&v134[8];
                        *(_QWORD *)&v134[8] = 0;
                        *(_QWORD *)&v134[16] = 0;
                        *(_OWORD *)(v71 + 24) = v135;
                        v135 = 0uLL;
                        *(_QWORD *)(v71 + 40) = v73;
                        *(_QWORD *)(v71 + 48) = v72;
                        *(_BYTE *)(v71 + 56) = 2;
                        v132 = 0;
                        *(_QWORD *)&v128 = v71;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), &v128);
                        v74 = v128;
                        *(_QWORD *)&v128 = 0;
                        if (v74)
                        {
                          v75 = *(std::__shared_weak_count **)(v74 + 32);
                          if (v75)
                          {
                            v76 = (unint64_t *)&v75->__shared_owners_;
                            do
                              v77 = __ldaxr(v76);
                            while (__stlxr(v77 - 1, v76));
                            if (!v77)
                            {
                              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                              std::__shared_weak_count::__release_weak(v75);
                            }
                          }
                          v78 = *(std::__shared_weak_count **)(v74 + 16);
                          if (v78)
                          {
                            v79 = (unint64_t *)&v78->__shared_owners_;
                            do
                              v80 = __ldaxr(v79);
                            while (__stlxr(v80 - 1, v79));
                            if (!v80)
                            {
                              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                              std::__shared_weak_count::__release_weak(v78);
                            }
                          }
                          MEMORY[0x212BC6398](v74, 0x10F0C40B62ED6C6);
                          v81 = v132;
                          v132 = 0;
                          if (v81)
                          {
                            v82 = (std::__shared_weak_count *)v81[4];
                            if (v82)
                            {
                              v83 = (unint64_t *)&v82->__shared_owners_;
                              do
                                v84 = __ldaxr(v83);
                              while (__stlxr(v84 - 1, v83));
                              if (!v84)
                              {
                                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                std::__shared_weak_count::__release_weak(v82);
                              }
                            }
                            v85 = (std::__shared_weak_count *)v81[2];
                            if (v85)
                            {
                              v86 = (unint64_t *)&v85->__shared_owners_;
                              do
                                v87 = __ldaxr(v86);
                              while (__stlxr(v87 - 1, v86));
                              if (!v87)
                              {
                                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                                std::__shared_weak_count::__release_weak(v85);
                              }
                            }
                            MEMORY[0x212BC6398](v81, 0x10F0C40B62ED6C6);
                          }
                        }
                        v88 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
                        if (*((_QWORD *)&v135 + 1))
                        {
                          v89 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                          do
                            v90 = __ldaxr(v89);
                          while (__stlxr(v90 - 1, v89));
                          if (!v90)
                          {
                            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                            std::__shared_weak_count::__release_weak(v88);
                          }
                        }
                        v91 = *(std::__shared_weak_count **)&v134[16];
                        if (*(_QWORD *)&v134[16])
                        {
                          v92 = (unint64_t *)(*(_QWORD *)&v134[16] + 8);
                          do
                            v93 = __ldaxr(v92);
                          while (__stlxr(v93 - 1, v92));
                          if (!v93)
                          {
                            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                            std::__shared_weak_count::__release_weak(v91);
                          }
                        }
LABEL_157:
                        if (v10)
                        {
                          v94 = (const char *)__dst;
                          if (v112 < 0)
                            v94 = (const char *)__dst[0];
                          sub_20E8C003C((uint64_t)&__p, "%s", v94);
                          sub_20E863570((uint64_t)&__p);
                        }
                        sub_20E863570((uint64_t)&__p);
                        v95 = v110;
                        if (v110)
                        {
                          v96 = (unint64_t *)&v110->__shared_owners_;
                          do
                            v97 = __ldaxr(v96);
                          while (__stlxr(v97 - 1, v96));
                          if (!v97)
                          {
                            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                            std::__shared_weak_count::__release_weak(v95);
                          }
                        }
                        if (SHIBYTE(v112) < 0)
                          operator delete(__dst[0]);
                        v113[0] = *MEMORY[0x24BEDB7F0];
                        v98 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(_QWORD *)((char *)v113 + *(_QWORD *)(v113[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v114[0] = v98;
                        v114[1] = MEMORY[0x24BEDB848] + 16;
                        if (v120 < 0)
                          operator delete(v119);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v123);
                        goto LABEL_171;
                      }
                    }
                    memcpy(v47, v22, v46);
                    goto LABEL_98;
                  }
                }
                memmove(v37, v24, v25);
                goto LABEL_77;
              }
            }
            memmove(v30, v28, v29);
            goto LABEL_69;
          }
        }
        memmove(v17, v19, v16);
        goto LABEL_48;
      }
LABEL_38:
      v18 = v121;
      if (v121 < v118)
      {
        v121 = v118;
        v18 = v118;
      }
      v19 = v117;
      v16 = v18 - (_QWORD)v117;
      if (v18 - (unint64_t)v117 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_93;
      goto LABEL_41;
    }
    v7 = v5 >> 8;
    if (v4)
      goto LABEL_23;
  }
  else
  {
    v7 = 0;
    LOBYTE(v5) = 0;
  }
  v8 = 0;
  return v8 & 0x100000000 | v5 | (v7 << 8);
}

void sub_20F32EBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 168) && *(char *)(v32 - 169) < 0)
    operator delete(*(void **)(v32 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a31 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a32);
  _Unwind_Resume(a1);
}

BOOL sub_20F32ED3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x8_t *v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v30;

  if (!*(_BYTE *)(a1 + 2499))
  {
    v8 = *(int8x8_t **)(*(_QWORD *)(a1 + 2816) + 16);
    v9 = v8[22];
    if (v9)
    {
      v10 = *((unsigned int *)a2 + 2);
      v11 = (uint8x8_t)vcnt_s8(v9);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v12 = *((unsigned int *)a2 + 2);
        if (*(_QWORD *)&v9 <= v10)
          v12 = v10 % *(_QWORD *)&v9;
      }
      else
      {
        v12 = (v9.i32[0] - 1) & v10;
      }
      v18 = *(uint64_t **)(*(_QWORD *)&v8[21] + 8 * v12);
      if (!v18)
        return v18 != 0;
      v18 = (uint64_t *)*v18;
      if (!v18)
        return v18 != 0;
      v19 = *a2;
      if (v11.u32[0] < 2uLL)
      {
        v20 = *(_QWORD *)&v9 - 1;
        while (1)
        {
          v24 = v18[1];
          if (v24 == v10)
          {
            if (v18[2] == v19 && *((_DWORD *)v18 + 6) == (_DWORD)v10)
              return v18 != 0;
          }
          else if ((v24 & v20) != v12)
          {
            return 0;
          }
          v18 = (uint64_t *)*v18;
          if (!v18)
            return v18 != 0;
        }
      }
      while (1)
      {
        v22 = v18[1];
        if (v22 == v10)
        {
          if (v18[2] == v19 && *((_DWORD *)v18 + 6) == (_DWORD)v10)
            return v18 != 0;
        }
        else
        {
          if (v22 >= *(_QWORD *)&v9)
            v22 %= *(_QWORD *)&v9;
          if (v22 != v12)
            return 0;
        }
        v18 = (uint64_t *)*v18;
        if (!v18)
          return v18 != 0;
      }
    }
    return 0;
  }
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 2824);
  v4 = *(_QWORD *)(a1 + 2832);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 160) == v2)
          break;
      }
      v3 += 4472;
      if (v3 == v4)
        return 0;
    }
  }
  if (v3 == v4 || v3 == 0)
    return 0;
  v13 = *(int8x8_t **)(v3 + 16);
  v14 = v13[22];
  if (v14)
  {
    v15 = *((unsigned int *)a2 + 2);
    v16 = (uint8x8_t)vcnt_s8(v14);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = *((unsigned int *)a2 + 2);
      if (*(_QWORD *)&v14 <= v15)
        v17 = v15 % *(_QWORD *)&v14;
    }
    else
    {
      v17 = (v14.i32[0] - 1) & v15;
    }
    v25 = *(uint64_t **)(*(_QWORD *)&v13[21] + 8 * v17);
    if (v25)
    {
      v25 = (uint64_t *)*v25;
      if (v25)
      {
        if (v16.u32[0] < 2uLL)
        {
          v26 = *(_QWORD *)&v14 - 1;
          while (1)
          {
            v30 = v25[1];
            if (v30 == v15)
            {
              if (v25[2] == v2 && *((_DWORD *)v25 + 6) == (_DWORD)v15)
                return v25 != 0;
            }
            else if ((v30 & v26) != v17)
            {
              return 0;
            }
            v25 = (uint64_t *)*v25;
            if (!v25)
              return v25 != 0;
          }
        }
        do
        {
          v28 = v25[1];
          if (v28 == v15)
          {
            if (v25[2] == v2 && *((_DWORD *)v25 + 6) == (_DWORD)v15)
              return v25 != 0;
          }
          else
          {
            if (v28 >= *(_QWORD *)&v14)
              v28 %= *(_QWORD *)&v14;
            if (v28 != v17)
              return 0;
          }
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
    }
  }
  else
  {
    v25 = 0;
  }
  return v25 != 0;
}

uint64_t sub_20F32EFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t **a5, char a6, uint64_t a7, char **a8, uint64_t a9, uint64_t a10, _BYTE *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  char **v15;
  int64x2_t **v17;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  float v31;
  float64_t v32;
  char v34;
  uint64_t *v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  BOOL v44;
  float64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  float64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v63;
  __int128 v64;
  __int128 v66;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  float64x2_t v118;
  float64x2_t v119;
  uint64_t result;
  char **v121;
  uint64_t v124;
  char v125;
  __int128 v126;
  float64_t *v127;
  int v128;
  float64x2_t __src[32];
  _QWORD __dst[64];
  char v131;

  v15 = a8;
  v17 = a5;
  v21 = a1;
  v22 = a9;
  v23 = (_QWORD *)a10;
  if (*(_BYTE *)(a3 + 48))
    _ZF = *(_DWORD *)(a3 + 44) * *(_DWORD *)(a3 + 40) == 0;
  else
    _ZF = 1;
  v25 = !_ZF;
  if (*(_BYTE *)(a1 + 2499))
  {
    LOBYTE(__dst[0]) = 0;
    v131 = 0;
    v125 = v25;
    if (*(_BYTE *)(a2 + 8))
      goto LABEL_11;
    sub_20F2685C0(*(_QWORD *)(a1 + 2816), (char ***)(a3 + 576), (char ***)(a3 + 616), (__int128 *)a3, a7, (float *)__src);
    memcpy(__dst, __src, sizeof(__dst));
    if (v131)
    {
      v15 = a8;
      v22 = a9;
      if (*(_BYTE *)(a2 + 8))
        goto LABEL_11;
    }
    else
    {
      v131 = 1;
      v15 = a8;
      v22 = a9;
      if (*(_BYTE *)(a2 + 8))
      {
LABEL_11:
        v27 = *(_QWORD **)a2;
        v28 = *(_QWORD *)(v21 + 2824);
        v29 = *(_QWORD *)(v21 + 2832);
        if (v28 == v29)
          return 0;
LABEL_12:
        v121 = v15;
        v124 = v21;
        v30 = 0;
        v31 = -1.0;
        while (1)
        {
          memset(__src, 0, 24);
          if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD *, uint64_t, _QWORD, _QWORD, float64x2_t *, uint64_t))(**(_QWORD **)(v28 + 184) + 24))(*(_QWORD *)(v28 + 184), *(_QWORD *)(*(_QWORD *)(v28 + 16) + 424), v27, a7, 0, 0, __src, 1))
          {
            v32 = __src[0].f64[0];
            if (!*(_QWORD *)&__src[0].f64[0])
              goto LABEL_19;
          }
          else
          {
            v32 = __src[0].f64[0];
            if (**(float **)&__src[0].f64[0] < v31 || v30 == 0)
            {
              v30 = (uint64_t *)v28;
              v31 = **(float **)&__src[0].f64[0];
            }
          }
          __src[0].f64[1] = v32;
          operator delete(*(void **)&v32);
LABEL_19:
          v28 += 4472;
          if (v28 == v29)
          {
            if (v30)
            {
              if (*(_BYTE *)(a2 + 8))
              {
                v126 = *(_OWORD *)a2;
                v23 = (_QWORD *)a10;
                v34 = a6;
              }
              else
              {
                v23 = (_QWORD *)a10;
                v34 = a6;
                if (!v131)
                  sub_20E866B34();
                *(_QWORD *)&v126 = __dst;
                BYTE8(v126) = 1;
              }
              LOBYTE(__src[0].f64[0]) = 0;
              LOBYTE(__src[4].f64[0]) = 0;
              v44 = sub_20F2A562C(v30[23], v30[2], (uint64_t *)(*v30 + 440), (uint64_t)&v126, a3 + 72, a3 + 576, a3 + 616, a3 + 656, a3, a4, *(_BYTE *)(*v30 + 1084), a7, v34, 0, (uint64_t)__src, 0, 0, 0, 0,
                      0,
                      0,
                      v125,
                      v121,
                      v22,
                      (uint64_t)v23,
                      a12,
                      a13,
                      a14,
                      a15);
              v17 = a5;
              if (LOBYTE(__src[4].f64[0]))
              {
                v45 = __src[3].f64[1];
                __src[3].f64[1] = 0.0;
                if (v45 != 0.0)
                {
                  v46 = *(_QWORD *)(*(_QWORD *)&v45 + 184);
                  *(_QWORD *)(*(_QWORD *)&v45 + 184) = 0;
                  if (v46)
                  {
                    v47 = *(void **)(v46 + 32);
                    if (v47)
                    {
                      *(_QWORD *)(v46 + 40) = v47;
                      operator delete(v47);
                    }
                    MEMORY[0x212BC6398](v46, 0x1010C409BE32CFALL);
                  }
                  v48 = *(void **)(*(_QWORD *)&v45 + 72);
                  if (v48)
                  {
                    *(_QWORD *)(*(_QWORD *)&v45 + 80) = v48;
                    operator delete(v48);
                  }
                  v49 = *(void **)(*(_QWORD *)&v45 + 48);
                  v21 = v124;
                  if (v49)
                  {
                    *(_QWORD *)(*(_QWORD *)&v45 + 56) = v49;
                    operator delete(v49);
                  }
                  MEMORY[0x212BC6398](*(_QWORD *)&v45, 0x10B0C40D335D76ALL);
                }
                v50 = __src[3].f64[0];
                __src[3].f64[0] = 0.0;
                if (v50 != 0.0)
                  sub_20F04BCC8((uint64_t)&__src[3], *(_QWORD **)&v50);
              }
              if (v44)
                goto LABEL_57;
            }
            return 0;
          }
        }
      }
    }
    v27 = __dst;
    v28 = *(_QWORD *)(v21 + 2824);
    v29 = *(_QWORD *)(v21 + 2832);
    if (v28 == v29)
      return 0;
    goto LABEL_12;
  }
  v35 = *(uint64_t **)(a1 + 2816);
  LOBYTE(__dst[0]) = 0;
  LOBYTE(__dst[8]) = 0;
  v36 = sub_20F2A562C(v35[23], v35[2], (uint64_t *)(*v35 + 440), a2, a3 + 72, a3 + 576, a3 + 616, a3 + 656, a3, a4, *(_BYTE *)(*v35 + 1084), a7, a6, 0, (uint64_t)__dst, 0, 0, 0, 0,
          0,
          0,
          v25,
          a8,
          a9,
          a10,
          a12,
          a13,
          a14,
          a15);
  if (LOBYTE(__dst[8]))
  {
    v37 = (_QWORD *)__dst[7];
    __dst[7] = 0;
    if (v37)
    {
      v38 = v21;
      v39 = v37[23];
      v37[23] = 0;
      if (v39)
      {
        v40 = *(void **)(v39 + 32);
        if (v40)
        {
          *(_QWORD *)(v39 + 40) = v40;
          operator delete(v40);
        }
        MEMORY[0x212BC6398](v39, 0x1010C409BE32CFALL);
      }
      v41 = (void *)v37[9];
      if (v41)
      {
        v37[10] = v41;
        operator delete(v41);
      }
      v42 = (void *)v37[6];
      v21 = v38;
      if (v42)
      {
        v37[7] = v42;
        operator delete(v42);
      }
      MEMORY[0x212BC6398](v37, 0x10B0C40D335D76ALL);
    }
    v43 = (_QWORD *)__dst[6];
    __dst[6] = 0;
    if (v43)
      sub_20F04BCC8((uint64_t)&__dst[6], v43);
  }
  if (!v36)
    return 0;
LABEL_57:
  v52 = (float64x2_t)(*v17)[2];
  v51 = (float64x2_t)(*v17)[3];
  v53 = *(float64x2_t *)*v17;
  v54 = (float64x2_t *)v17[2];
  v55 = (*v17)[1].i64[0];
  v56 = (*v17)[2].i64[1];
  v57 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((*v17)[1], 1), (int64x2_t)v52);
  *(_QWORD *)&v52.f64[0] = (*v17)[4].i64[0];
  v58 = *(_OWORD *)(a4 + 16);
  v59 = *(_OWORD *)(a4 + 32);
  v60 = *(_OWORD *)(a4 + 48);
  _Q16 = *(float64x2_t *)(a4 + 64);
  _Q18 = *(_OWORD *)(a4 + 80);
  v63 = *(_OWORD *)(a4 + 8);
  v64 = *(_OWORD *)(a4 + 40);
  _Q17 = *(_OWORD *)(a4 + 72);
  v66 = *(_OWORD *)(a4 + 24);
  _Q22 = *(_OWORD *)(a4 + 56);
  v68 = *(double *)(a4 + 88);
  v69 = vmlaq_n_f64(vmulq_n_f64(v53, *(double *)a4), v57, *(double *)&v59);
  v70 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v55, *(double *)a4), (float64x2_t)(unint64_t)v56, *(double *)&v59);
  v71 = vmlaq_n_f64(vmulq_n_f64(v53, *(double *)&v63), v57, *(double *)&v64);
  v72 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v55, *(double *)&v63), (float64x2_t)(unint64_t)v56, *(double *)&v64);
  v73 = vmlaq_n_f64(vmulq_n_f64(v53, *(double *)&v58), v57, *(double *)&v60);
  v74 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v55, *(double *)&v58), (float64x2_t)(unint64_t)v56, *(double *)&v60);
  v75 = *(double *)(v22 + 8);
  v76 = vmlaq_n_f64(vmulq_n_f64(v53, *(double *)&v66), v57, *(double *)&_Q22);
  v77 = vmulq_n_f64((float64x2_t)(unint64_t)v55, *(double *)&v66);
  v57.f64[0] = *(float64_t *)(v22 + 32);
  *(_QWORD *)&v66 = *(_QWORD *)(v22 + 40);
  v78 = vmlaq_n_f64(v77, (float64x2_t)(unint64_t)v56, *(double *)&_Q22);
  v79 = *(double *)(v22 + 64);
  *(_QWORD *)&_Q22 = *(_QWORD *)(v22 + 72);
  v80 = vmlaq_n_f64(v69, v51, _Q16.f64[0]);
  v81 = vmlaq_n_f64(v70, v52, _Q16.f64[0]);
  _Q16.f64[0] = *(float64_t *)(v22 + 24);
  v82 = vmlaq_n_f64(v71, v51, *(double *)&_Q17);
  v83 = vmlaq_n_f64(v72, v52, *(double *)&_Q17);
  *(_QWORD *)&_Q17 = *(_QWORD *)(v22 + 88);
  _Q16.f64[1] = *(float64_t *)(v22 + 56);
  v84 = vmlaq_n_f64(v73, v51, *(double *)&_Q18);
  v85 = vmlaq_n_f64(v74, v52, *(double *)&_Q18);
  v86 = vmlaq_f64(v80, (float64x2_t)0, *v54);
  _Q6 = vmlaq_n_f64(v76, v51, v68);
  v88 = vmlaq_n_f64(v78, v52, v68);
  v52.f64[0] = *(float64_t *)v22;
  v52.f64[1] = v75;
  v89.f64[0] = v57.f64[0];
  *(_QWORD *)&v89.f64[1] = v66;
  v90 = vmlsq_laneq_f64(vmulq_n_f64(v52, vnegq_f64(_Q16).f64[0]), v89, _Q16, 1);
  v89.f64[0] = v79;
  *(_QWORD *)&v89.f64[1] = _Q22;
  v91 = vmlsq_lane_f64(v90, v89, *(double *)&_Q17, 0);
  __asm { FMOV            V19.2D, #1.0 }
  _Q19.f64[0] = v54[1].f64[0];
  v96 = vmlaq_f64(v81, (float64x2_t)0, _Q19);
  v97 = vmlaq_f64(v82, (float64x2_t)0, *v54);
  v98 = vmlaq_f64(v83, (float64x2_t)0, _Q19);
  v99 = vmlaq_n_f64(vmulq_n_f64(v86, *(double *)v22), v97, v75);
  v100 = vmlaq_n_f64(vmulq_n_f64(v96, *(double *)v22), v98, v75);
  v101 = vmlaq_n_f64(vmulq_n_f64(v86, v57.f64[0]), v97, *(double *)&v66);
  v102 = vmlaq_n_f64(vmulq_n_f64(v96, v57.f64[0]), v98, *(double *)&v66);
  v103 = vmlaq_n_f64(vmulq_n_f64(v86, v79), v97, *(double *)&_Q22);
  v104 = vmlaq_n_f64(vmulq_n_f64(v96, v79), v98, *(double *)&_Q22);
  v105 = vmlaq_laneq_f64(vmulq_n_f64(v86, v91.f64[0]), v97, v91, 1);
  v106 = vmlaq_laneq_f64(vmulq_n_f64(v96, v91.f64[0]), v98, v91, 1);
  v91.f64[0] = *(float64_t *)(v22 + 16);
  *(_QWORD *)&_Q22 = *(_QWORD *)(v22 + 48);
  __asm { FMLS            D18, D22, V16.D[1] }
  v107 = vmlaq_f64(v84, (float64x2_t)0, *v54);
  v108 = vmlaq_f64(v85, (float64x2_t)0, _Q19);
  v109 = vmlaq_n_f64(v99, v107, v91.f64[0]);
  v110 = vmlaq_n_f64(v100, v108, v91.f64[0]);
  *(_QWORD *)&v91.f64[1] = _Q22;
  _Q16.f64[0] = *(float64_t *)(v22 + 80);
  __asm { FMLS            D18, D16, V17.D[0] }
  v111 = vmlaq_laneq_f64(v101, v107, v91, 1);
  _Q7 = vmlaq_laneq_f64(v102, v108, v91, 1);
  v113 = vaddq_f64(*v54, _Q6);
  v114 = vaddq_f64(_Q19, v88);
  v115 = (int64x2_t)vmlaq_f64(v109, (float64x2_t)0, v113);
  v116 = (int64x2_t)vmlaq_f64(v111, (float64x2_t)0, v113);
  _Q23 = vmlaq_f64(vmlaq_n_f64(v103, v107, _Q16.f64[0]), (float64x2_t)0, v113);
  v118 = vaddq_f64(v113, vmlaq_n_f64(v105, v107, *(double *)&_Q18));
  *(_QWORD *)&v113.f64[0] = *(_OWORD *)&vaddq_f64(v114, vmlaq_n_f64(v106, v108, *(double *)&_Q18));
  v119 = (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(v110, (float64x2_t)0, v114), (int64x2_t)vmlaq_f64(_Q7, (float64x2_t)0, v114));
  _Q7.f64[0] = v118.f64[1];
  __asm { FMLA            D6, D7, V23.D[1] }
  __src[2].f64[1] = _Q23.f64[1];
  __src[1].f64[0] = _Q23.f64[0];
  __src[0] = (float64x2_t)vzip1q_s64(v115, v116);
  *(int64x2_t *)((char *)&__src[1] + 8) = vzip2q_s64(v115, v116);
  *(_QWORD *)&__src[4].f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(v104, v108, _Q16.f64[0]), (float64x2_t)0, v114);
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v113.f64[0], __src[4].f64[0]);
  __src[3] = v119;
  *(float64x2_t *)((char *)&__src[4] + 8) = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(__src[0], v118.f64[0]), *(float64x2_t *)((char *)&__src[1] + 8), v118, 1), v119, v113.f64[0]));
  *(_QWORD *)&__src[5].f64[1] = *(_OWORD *)&vnegq_f64(_Q6);
  *(_QWORD *)&v126 = __src;
  DWORD2(v126) = 0;
  v127 = &__src[4].f64[1];
  v128 = 0;
  sub_20F3825A8(v23, (uint64_t *)&v126, (uint64_t *)v17, *(_QWORD *)(a3 + 24), *(_DWORD *)(v21 + 72), __dst);
  if (a11[288] == LOBYTE(__dst[36]))
  {
    if (!a11[288])
      return 0;
    memcpy(a11, __dst, 0x120uLL);
    return 1;
  }
  else if (a11[288])
  {
    result = 0;
    a11[288] = 0;
  }
  else
  {
    memcpy(a11, __dst, 0x120uLL);
    result = 1;
    a11[288] = 1;
  }
  return result;
}

void sub_20F32F6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20F265F88((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F32F6D8(_Unwind_Exception *a1)
{
  sub_20F265F88((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void sub_20F32F6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F32F708(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, unint64_t *a5, char a6, unint64_t *a7, char a8, char **a9, double *a10, unsigned __int8 *a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  if (*(_BYTE *)(a1 + 2499))
  {
    v17 = *(_QWORD **)(a1 + 2824);
    v18 = *(_QWORD **)(a1 + 2832);
    if (v17 != v18)
    {
      while (1)
      {
        v19 = v17[2];
        if (v19)
        {
          if (*(_QWORD *)(v19 + 160) == *a2)
            break;
        }
        v17 += 559;
        if (v17 == v18)
          return 0;
      }
    }
    if (v17 != v18 && v17)
      return sub_20F265FCC(v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    v17 = *(_QWORD **)(a1 + 2816);
    if (v17)
      return sub_20F265FCC(v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return 0;
}

void sub_20F32F7A0(uint64_t a1@<X0>, __int128 *a2@<X1>, void **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_BYTE *)(a1 + 2602))
  {
    v4 = *(_QWORD *)(a1 + 2824);
    v5 = *(_QWORD *)(a1 + 2832);
    if (v4 != v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v4 + 16);
        if (v6)
        {
          if (*(_QWORD *)(v6 + 160) == *(_QWORD *)a2)
            break;
        }
        v4 += 4472;
        if (v4 == v5)
          return;
      }
    }
    if (v4 != v5 && v4)
    {
      sub_20F23A0A0(**(_QWORD ***)(*(_QWORD *)(v4 + 16) + 424), a2, &v22);
      v7 = v22;
      v8 = v23;
      if (v22 != v23)
      {
        v9 = 0;
        do
        {
          v11 = *((_DWORD *)v7 + 4);
          v12 = (unint64_t)a3[2];
          if ((unint64_t)v9 < v12)
          {
            *(_DWORD *)v9 = v11;
            v9[4] = 1;
            *((_DWORD *)v9 + 2) = 1;
            v10 = v9 + 16;
            v9[12] = 1;
          }
          else
          {
            v13 = (char *)*a3;
            v14 = (v9 - (_BYTE *)*a3) >> 4;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 60)
              sub_20E867F44();
            v16 = v12 - (_QWORD)v13;
            if (v16 >> 3 > v15)
              v15 = v16 >> 3;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
              v17 = 0xFFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              if (v17 >> 60)
                sub_20E877A38();
              v18 = (char *)operator new(16 * v17);
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[16 * v14];
            *(_DWORD *)v19 = v11;
            v19[4] = 1;
            *((_DWORD *)v19 + 2) = 1;
            v19[12] = 1;
            v20 = v19;
            if (v9 != v13)
            {
              do
              {
                *((_OWORD *)v20 - 1) = *((_OWORD *)v9 - 1);
                v20 -= 16;
                v9 -= 16;
              }
              while (v9 != v13);
              v9 = (char *)*a3;
            }
            v10 = v19 + 16;
            *a3 = v20;
            a3[1] = v19 + 16;
            a3[2] = &v18[16 * v17];
            if (v9)
              operator delete(v9);
          }
          a3[1] = v10;
          v7 += 24;
          v9 = v10;
        }
        while (v7 != v8);
        v7 = v22;
      }
      if (v7)
      {
        v23 = v7;
        operator delete(v7);
      }
    }
  }
  else
  {
    v21 = operator new(0x10uLL);
    *v21 = 0;
    v21[1] = 0;
    a3[1] = v21 + 2;
    a3[2] = v21 + 2;
    *a3 = v21;
  }
}

void sub_20F32F994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v12;

  if (__p)
  {
    operator delete(__p);
    if (!v12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  *(_QWORD *)(v11 + 8) = v12;
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void sub_20F32F9D0(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x8_t *a3@<X2>, uint64_t a4@<X8>)
{
  char ***v7;
  uint64_t v8;
  char **v9;
  unsigned __int32 v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char **v19;
  char **v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char ***v25;
  void *v26;
  void *v27;
  char **v28;
  void **v29;
  char **v30;
  char **v31;
  char **v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int8x8_t *v36;
  void *v37;
  char ***v38;
  void *__p;
  void *__dst;
  uint64_t v41;

  sub_20F32FD3C((uint64_t)&v37, a1, a2, 0);
  v7 = (char ***)v37;
  v8 = (uint64_t)v38;
  if (v37 == v38)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    if (!v7)
      return;
    goto LABEL_39;
  }
  if (*(_BYTE *)(a1 + 2621))
  {
    v35 = a4;
    v36 = a3;
    v9 = (char **)a3[7];
    v10 = a3[6].u32[0];
    do
    {
      if (v7[7] == v9 && *((_DWORD *)v7 + 16) == v10 && v7[6] == v9)
      {
        v11 = *(_QWORD **)(a1 + 2824);
        v12 = *(_QWORD **)(a1 + 2832);
        if (v11 != v12)
        {
          while (1)
          {
            v13 = v11[2];
            if (v13)
            {
              if (*(char ***)(v13 + 160) == v9)
                break;
            }
            v11 += 559;
            if (v11 == v12)
              goto LABEL_4;
          }
        }
        if (v11 != v12 && v11)
        {
          v14 = (char *)v11[4];
          v15 = (char *)v11[5];
          if (v15 != v14)
          {
            v16 = (v15 - v14) >> 4;
            do
            {
              v17 = v16 >> 1;
              v18 = &v14[16 * (v16 >> 1)];
              if (*(_QWORD *)v18 < (unint64_t)v9 || *(char ***)v18 == v9 && *(_DWORD *)&v14[16 * v17 + 8] < v10)
              {
                v14 = v18 + 16;
                v17 = v16 + ~v17;
              }
              v16 = v17;
            }
            while (v17);
          }
          if (v14 == v15 || *(char ***)v14 != v9 || *((_DWORD *)v14 + 2) != v10)
          {
            __p = 0;
            __dst = 0;
            v41 = 0;
            v19 = *v7;
            v20 = v7[1];
            if (*v7 != v20)
            {
              do
              {
                sub_20F23D490((uint64_t)&__p, (char *)__dst, *v19, v19[1], 0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 3));
                v19 += 3;
              }
              while (v19 != v20);
            }
            v21 = sub_20FCBA6DC(v36, HIWORD(*((_DWORD *)v7 + 18)), (unsigned __int16)*((_DWORD *)v7 + 18));
            if (v22)
            {
              sub_20F25D4F8(v11, (uint64_t)(v7 + 7), (_QWORD *)(v21 + 744), (uint64_t **)&__p);
              v23 = v11[29];
              *(_QWORD *)(v23 + 24) = *(unsigned int *)(v23 + 16);
              *(_BYTE *)(v23 + 32) = 0;
            }
            if (__p)
            {
              __dst = __p;
              operator delete(__p);
            }
          }
        }
      }
LABEL_4:
      v7 += 10;
    }
    while (v7 != (char ***)v8);
    v7 = (char ***)v37;
    v8 = (uint64_t)v38;
    a4 = v35;
  }
  LOBYTE(__p) = 0;
  BYTE4(__p) = 0;
  sub_20F333D9C((char **)a4, a1, (uint64_t)v7, v8, (uint64_t)&__p);
  if (*(_BYTE *)(a1 + 3016))
    v24 = *(_QWORD *)(a1 + 3008);
  else
    v24 = 0;
  sub_20F442750(0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v24);
  v7 = (char ***)v37;
  if (v37)
  {
LABEL_39:
    v25 = v38;
    v26 = v7;
    if (v38 != v7)
    {
      do
      {
        v28 = *(v25 - 7);
        if (v28)
        {
          *(v25 - 6) = v28;
          operator delete(v28);
        }
        v29 = (void **)(v25 - 10);
        v30 = *(v25 - 10);
        if (v30)
        {
          v31 = *(v25 - 9);
          v27 = *(v25 - 10);
          if (v31 != v30)
          {
            v32 = *(v25 - 9);
            do
            {
              v34 = *(v32 - 3);
              v32 -= 3;
              v33 = v34;
              if (v34)
              {
                *(v31 - 2) = v33;
                operator delete(v33);
              }
              v31 = v32;
            }
            while (v32 != v30);
            v27 = *v29;
          }
          *(v25 - 9) = v30;
          operator delete(v27);
        }
        v25 -= 10;
      }
      while (v29 != (void **)v7);
      v26 = v37;
    }
    v38 = v7;
    operator delete(v26);
  }
}

void sub_20F32FCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
    sub_20F335D44(&a11);
    _Unwind_Resume(a1);
  }
  sub_20F335D44(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20F32FD3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *i;
  uint64_t v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t j;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _QWORD *v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t *k;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  __int128 v87;
  void *v88;
  int8x8_t v89;
  uint8x8_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint8x8_t v96;
  unint64_t v97;
  uint64_t ***v98;
  uint64_t **v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unsigned int *v104;
  uint64_t *v105;
  unint64_t v106;
  uint8x8_t v107;
  unint64_t v108;
  unsigned int **v109;
  unsigned int *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  __int128 *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  void *v133;
  _QWORD *v134;
  _QWORD *v135;
  void *v136;
  unint64_t *v137;
  unint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t *v142;
  unint64_t *v143;
  int64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  unint64_t *v150;
  int64_t v151;
  int64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  _OWORD *v162;
  unint64_t *v163;
  uint64_t v164;
  __int128 v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  _OWORD *v172;
  unint64_t *v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  unsigned int v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v188;
  unsigned int v189;
  unint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  unsigned int v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  BOOL v198;
  unint64_t v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t *v202;
  float32x4_t *v203;
  uint64_t *v204;
  float64x2_t **v206;
  float64x2_t v207;
  float64x2_t v209;
  double v210;
  float64x2_t v211;
  float64x2_t *v212;
  double v213;
  double v215;
  double v217;
  float64x2_t v219;
  double v223;
  float64x2_t v224;
  double v226;
  float64x2_t v227;
  double v229;
  float64x2_t *v230;
  float64x2_t v232;
  float64x2_t *v233;
  float64x2_t v234;
  float64x2_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t *v238;
  unsigned int v239;
  BOOL v240;
  uint64_t *v241;
  unint64_t *v242;
  unint64_t *v243;
  unint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  uint8x8_t v249;
  unint64_t v250;
  uint64_t **v251;
  uint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  float64x2_t *v257;
  float64x2_t *v258;
  int64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t *v262;
  char *v263;
  char *v264;
  uint64_t *v265;
  float64x2_t *v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t *v270;
  _DWORD *v271;
  float64x2_t *v272;
  char *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  __int128 v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t *v284;
  unsigned int v285;
  unint64_t v286;
  unsigned int v287;
  uint64_t *v288;
  unsigned int v289;
  BOOL v290;
  unint64_t v291;
  unsigned int v292;
  unint64_t v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t *v296;
  unsigned int v297;
  unint64_t v298;
  unsigned int v299;
  unsigned int v300;
  BOOL v301;
  unint64_t v302;
  unsigned int v303;
  unint64_t v304;
  uint64_t *v305;
  float32x4_t *v306;
  int32x4_t v307;
  float32x2_t v308;
  int32x4_t v309;
  float32x2_t v310;
  int32x4_t v311;
  float32x2_t v312;
  int32x4_t v313;
  float32x2_t v314;
  float32x2_t v315;
  int32x4_t v316;
  int32x4_t v317;
  float32x2_t v318;
  int32x4_t v319;
  float32x2_t v320;
  int32x4_t v321;
  float32x2_t v322;
  int32x4_t v323;
  float32x2_t v324;
  int32x4_t v325;
  float32x2_t v326;
  int32x4_t v327;
  float32x2_t v328;
  int32x4_t v329;
  float32x2_t v330;
  int32x4_t v331;
  float32x2_t v332;
  int32x4_t v333;
  float32x2_t v334;
  int32x4_t v335;
  float32x2_t v336;
  int32x4_t v337;
  float32x2_t v338;
  int32x4_t v339;
  float32x2_t v340;
  int32x4_t v341;
  float32x2_t v342;
  int32x4_t v343;
  float32x2_t v344;
  int32x4_t v345;
  float32x2_t v346;
  int32x4_t v347;
  float32x2_t v348;
  int32x4_t v349;
  float32x2_t v350;
  int32x4_t v351;
  float32x2_t v352;
  int32x4_t v353;
  float32x2_t v354;
  int32x4_t v355;
  float32x2_t v356;
  int32x4_t v357;
  float32x2_t v358;
  float32x2_t v359;
  int32x4_t v360;
  float32x2_t v361;
  int32x4_t v362;
  int32x4_t v363;
  float32x2_t v364;
  float32x2_t v365;
  int32x4_t v366;
  int32x4_t v367;
  float32x2_t v368;
  double v369;
  int v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  char *v375;
  char *v376;
  __int128 v377;
  char *v378;
  __int128 v379;
  __int128 v380;
  char *v381;
  _QWORD *v382;
  _QWORD *v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  double v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  unint64_t v395;
  uint8x8_t v396;
  _QWORD *v397;
  _QWORD *v398;
  unint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  float v402;
  unint64_t v403;
  _BOOL8 v404;
  unint64_t v405;
  unint64_t v406;
  size_t prime;
  unint64_t v408;
  uint8x8_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v421;
  __n128 v422;
  char *v423;
  char *v424;
  double v425;
  uint64_t v426;
  float64x2_t v427;
  double v430;
  double v431;
  __n128 *v432;
  __n128 *v433;
  int8x8_t v434;
  __n128 *v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v443;
  uint64_t v445;
  __n128 v446;
  __n128 v447;
  __n128 *v448;
  unint64_t v449;
  __n128 *v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  char *v454;
  char *v455;
  __n128 v456;
  __n128 v457;
  char *v458;
  __int128 v459;
  __int128 v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  int v464;
  unint64_t v465;
  unint64_t v466;
  _QWORD *v467;
  int v468;
  void **v469;
  uint64_t v470;
  _QWORD *v471;
  char *v472;
  char *v473;
  void **v474;
  uint64_t v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  char *v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  char *v483;
  _QWORD *v484;
  uint64_t *v485;
  uint64_t *v486;
  void **v487;
  uint64_t v488;
  size_t v489;
  __int128 *p_dst;
  unint64_t v491;
  void **v492;
  void *v493;
  uint64_t v494;
  uint64_t v495;
  void *v496;
  void *v497;
  void *v498;
  __int128 *v499;
  uint64_t v500;
  size_t v501;
  void *v502;
  _BYTE *v503;
  const void **v504;
  const void *v505;
  uint64_t v506;
  uint64_t v507;
  const char *v508;
  uint64_t v509;
  const char *v510;
  size_t v511;
  unsigned __int8 v512;
  const char *v513;
  size_t v514;
  void **v515;
  uint64_t v516;
  uint64_t v517;
  void *v518;
  uint64_t v519;
  uint64_t v520;
  NSObject *v521;
  size_t v522;
  void *v523;
  _QWORD *v524;
  size_t v525;
  void *v526;
  void *v527;
  void *v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  void *v532;
  char v533;
  char *v534;
  _DWORD *v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  void *v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  void *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  const char *v554;
  uint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  void *v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  const char *v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  _QWORD *v579;
  _QWORD *v580;
  void *v581;
  _QWORD *v582;
  _QWORD *v583;
  void *v584;
  _QWORD *v585;
  _QWORD *v586;
  void *v587;
  _QWORD *v588;
  _QWORD *v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t *v592;
  uint64_t v594;
  uint64_t v595;
  const char *v596;
  char *v597;
  void *v598;
  _QWORD *v599;
  void *v600;
  int v601;
  void *v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t *v605;
  int v606;
  char *v607;
  char *v608;
  char *v609;
  uint64_t v610;
  uint64_t v611;
  unint64_t v612;
  char *v613;
  void *v614;
  _DWORD *v615;
  char *v616;
  __int128 v617;
  __int128 v618;
  int v619;
  void *v620[2];
  __int128 v621;
  const char *v622;
  int v623;
  const char *v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  void *v627;
  std::__shared_weak_count *v628;
  int64_t v629;
  void *v630[2];
  void *v631[6];
  uint64_t v632;
  _BYTE *v633;
  void *v634;
  char v635;
  _BYTE *v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  void *v640;
  unint64_t *v641;
  __n128 *v642;
  void *v643;
  uint64_t *v644;
  __int128 __p;
  __int128 v646;
  int v647;
  __int128 v648;
  __int128 v649;
  int v650;
  __int128 __dst;
  __int128 v652;
  std::__shared_weak_count *v653;
  void *v654[4];
  __int128 v655;
  __int128 v656;
  float v657;
  void *object[5];
  void *v659;
  float64x2_t v660;
  double v661;
  float64x2_t v662;
  void *v663;
  char v664;
  unint64_t v665;
  int v666;
  uint64_t v667;
  _DWORD *v668[5];

  v668[2] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v617 = 0u;
  v618 = 0u;
  v619 = 733223648;
  kdebug_trace();
  if (!sub_20F325654(a2, (uint64_t *)a3))
    goto LABEL_13;
  v601 = a4;
  v7 = *(_QWORD **)(a2 + 2824);
  v8 = *(_QWORD **)(a2 + 2832);
  if (v7 != v8)
  {
    while (1)
    {
      v9 = v7[2];
      if (v9)
      {
        if (*(_QWORD *)(v9 + 160) == *(_QWORD *)a3)
          break;
      }
      v7 += 559;
      if (v7 == v8)
        goto LABEL_13;
    }
  }
  if (v7 == v8 || !v7)
  {
LABEL_13:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return kdebug_trace();
  }
  v614 = 0;
  v615 = 0;
  v616 = 0;
  v11 = (_BYTE *)v7[4];
  v10 = (_BYTE *)v7[5];
  v12 = v10 - v11;
  v603 = a2;
  if (v10 == v11)
  {
    v13 = 0;
    v14 = 0;
    v15 = v603;
    if (*(_QWORD *)(v7[2] + 160) == *(_QWORD *)(v603 + 2808))
      goto LABEL_26;
  }
  else
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    v14 = &v13[16 * (v12 >> 4)];
    v614 = v13;
    v616 = v14;
    memcpy(v13, v11, v12 - 4);
    v615 = v14;
    v15 = v603;
    if (*(_QWORD *)(v7[2] + 160) == *(_QWORD *)(v603 + 2808))
    {
LABEL_26:
      v26 = v14;
      v27 = v601;
      v28 = (v14 - v13) >> 4;
      v29 = v28 + 1;
      if (!((unint64_t)(v28 + 1) >> 60))
      {
LABEL_27:
        if ((v26 - v13) >> 3 > v29)
          v29 = (v26 - v13) >> 3;
        if ((unint64_t)(v26 - v13) >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          if (v30 >> 60)
            sub_20E877A38();
          v31 = (char *)operator new(16 * v30);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[16 * v28];
        *(_OWORD *)v32 = *(_OWORD *)a3;
        for (i = v32 + 16; v14 != v13; *((_DWORD *)v32 + 2) = v35)
        {
          v34 = *((_QWORD *)v14 - 2);
          v14 -= 16;
          v35 = *((_DWORD *)v14 + 2);
          *((_QWORD *)v32 - 2) = v34;
          v32 -= 16;
        }
        v614 = v32;
        v616 = &v31[16 * v30];
        if (v13)
          operator delete(v13);
        goto LABEL_53;
      }
LABEL_65:
      sub_20E867F44();
    }
  }
  v17 = *(_QWORD *)(v15 + 2816);
  v18 = *(__int128 **)(v17 + 32);
  v19 = *(_QWORD *)(v17 + 40) - (_QWORD)v18;
  if (v19 < 1)
    goto LABEL_26;
  v20 = v19 >> 4;
  v21 = v14 - v13;
  v22 = (v14 - v13) >> 4;
  v23 = v22 + (v19 >> 4);
  if (v23 >> 60)
    sub_20E867F44();
  if (v21 >> 3 > v23)
    v23 = v21 >> 3;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
    v24 = 0xFFFFFFFFFFFFFFFLL;
  else
    v24 = v23;
  if (v24)
  {
    if (v24 >> 60)
      sub_20E877A38();
    v25 = (char *)operator new(16 * v24);
  }
  else
  {
    v25 = 0;
  }
  v36 = &v13[v21 & 0xFFFFFFFFFFFFFFF0];
  v37 = &v25[16 * v22];
  v38 = 16 * v20;
  v39 = &v37[16 * v20];
  v40 = v37;
  do
  {
    v41 = *v18++;
    *(_OWORD *)v40 = v41;
    v40 += 16;
    v38 -= 16;
  }
  while (v38);
  v26 = &v25[16 * v24];
  if (v14 != v13)
  {
    v42 = 16 * v22;
    v43 = v13 - 16;
    do
    {
      v44 = &v25[v42];
      *((_QWORD *)v44 - 2) = *(_QWORD *)&v43[v42];
      *((_DWORD *)v44 - 2) = *(_DWORD *)&v43[v42 + 8];
      v42 -= 16;
    }
    while (v42);
    v37 = v25;
  }
  v45 = v14 - v36;
  if (v45)
    memcpy(v39, v36, v45 - 4);
  v14 = &v39[v45];
  v614 = v37;
  v615 = v14;
  v616 = v26;
  v27 = v601;
  if (v13)
    operator delete(v13);
  if (v14 >= v26)
  {
    v13 = v37;
    v28 = (v14 - v37) >> 4;
    v29 = v28 + 1;
    if (!((unint64_t)(v28 + 1) >> 60))
      goto LABEL_27;
    goto LABEL_65;
  }
  *(_OWORD *)v14 = *(_OWORD *)a3;
  i = v14 + 16;
LABEL_53:
  v46 = v603;
  v615 = i;
  kdebug_trace();
  v47 = *(_QWORD *)(v603 + 2824);
  v48 = *(_QWORD *)(v603 + 2832);
  v594 = a3;
  if (v47 != v48)
  {
    do
    {
      v49 = *(_QWORD *)(v47 + 16);
      if (v49 && *(_QWORD *)(v49 + 160) == *(_QWORD *)a3)
        goto LABEL_58;
      v47 += 4472;
    }
    while (v47 != v48);
    v50 = 0;
    v51 = 0;
    goto LABEL_526;
  }
LABEL_58:
  v50 = 0;
  v51 = 0;
  if (v47 == v48 || !v47)
    goto LABEL_526;
  v591 = v47;
  v52 = **(_QWORD ***)(*(_QWORD *)(v47 + 16) + 424);
  sub_20F23A0A0(v52, (__int128 *)a3, (char **)&v643);
  v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)v644 - (_BYTE *)v643) >> 3) * *(_QWORD *)(v603 + 8);
  v599 = v52;
  if (v53)
  {
    if (v53 > 0x492492492492492)
      sub_20E867F44();
    v50 = (__n128 *)operator new(0x5555555555555568 * (((char *)v644 - (_BYTE *)v643) >> 3) * *(_QWORD *)(v603 + 8));
    v613 = (char *)v50 + 56 * v53;
  }
  else
  {
    v50 = 0;
    v613 = 0;
  }
  __dst = 0u;
  v652 = 0u;
  LODWORD(v653) = 1065353216;
  v641 = 0;
  v640 = 0;
  v642 = 0;
  v54 = *(_QWORD *)(v603 + 2824);
  v55 = *(_QWORD *)(v603 + 2832);
  j = v54;
  if (v54 != v55)
  {
    for (j = *(_QWORD *)(v603 + 2824); ; j += 4472)
    {
      v57 = *(_QWORD *)(j + 16);
      if (v57)
      {
        if (*(_QWORD *)(v57 + 160) == *(_QWORD *)a3)
          break;
      }
    }
  }
  if (j == v55)
    j = 0;
  v58 = *(_QWORD *)(*(_QWORD *)(j + 16) + 160);
  __p = 0uLL;
  *(_QWORD *)&v646 = 0;
  v641 = 0;
  v607 = (char *)v50;
  if (!*(_BYTE *)(v603 + 160))
  {
    if (&__p != (__int128 *)(v603 + 2848))
    {
      sub_20E92CD94(&__p, *(char **)(v603 + 2848), *(char **)(v603 + 2856), (uint64_t)(*(_QWORD *)(v603 + 2856) - *(_QWORD *)(v603 + 2848)) >> 3);
      v81 = (unint64_t *)*((_QWORD *)&__p + 1);
      for (k = (unint64_t *)__p; k != v81; ++k)
        *((_BYTE *)sub_20F34869C((float *)&__dst, *k, k) + 24) = 1;
    }
    goto LABEL_238;
  }
  memset(object, 0, 24);
  v604 = v58;
  if (v55 == v54)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    goto LABEL_114;
  }
  if ((unint64_t)(0x3175B2258D8284CFLL * ((v55 - v54) >> 3)) >> 61)
    sub_20E92CED8();
  v59 = operator new(0x8BAD912C6C142678 * ((v55 - v54) >> 3));
  v60 = v59;
  v61 = &v59[0xF175B2258D8284CFLL * ((v55 - v54) >> 3)];
  v610 = v55;
  do
  {
    while (1)
    {
      v62 = *(_QWORD *)(*(_QWORD *)(v54 + 16) + 160);
      if (v60 >= v61)
        break;
      *v60++ = v62;
      v54 += 4472;
      if (v54 == v55)
        goto LABEL_106;
    }
    v63 = v60 - v59;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 61)
    {
      object[2] = v61;
      object[0] = v59;
      object[1] = v60;
      sub_20E92CED8();
    }
    if (((char *)v61 - (char *)v59) >> 2 > v64)
      v64 = ((char *)v61 - (char *)v59) >> 2;
    if ((unint64_t)((char *)v61 - (char *)v59) >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v64;
    if (v65)
    {
      if (v65 >> 61)
      {
        object[2] = v61;
        object[0] = v59;
        sub_20E877A38();
      }
      v66 = v65;
      v67 = operator new(8 * v65);
      v65 = v66;
      v68 = &v67[8 * v63];
      *v68 = v62;
      v69 = (uint64_t)(v68 + 1);
      v70 = (char *)v60 - (char *)v59;
      if (v60 != v59)
      {
LABEL_89:
        v71 = v70 - 8;
        if (v71 < 0x168
          || (v74 = ((char *)(v60 - 1) - (char *)v59) & 0xFFFFFFFFFFFFFFF8,
              &v67[(char *)v60 - (char *)v59 - 8 - v74] > &v67[(char *)v60 - (char *)v59 - 8])
          || (_QWORD *)((char *)v60 - v74 - 8) > v60 - 1
          || (unint64_t)((char *)v59 - v67) < 0x20)
        {
          v72 = v60;
          v27 = v601;
        }
        else
        {
          v75 = (v71 >> 3) + 1;
          v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
          v72 = &v60[v76 / 0xFFFFFFFFFFFFFFF8];
          v68 = (_QWORD *)((char *)v68 - v76);
          v77 = &v67[8 * v63 - 16];
          v78 = (__int128 *)(v60 - 2);
          v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v80 = *v78;
            *(v77 - 1) = *(v78 - 1);
            *v77 = v80;
            v77 -= 2;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          v27 = v601;
          if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_92:
            v61 = &v67[8 * v65];
            if (!v59)
              goto LABEL_94;
LABEL_93:
            operator delete(v59);
            goto LABEL_94;
          }
        }
        do
        {
          v73 = *--v72;
          *--v68 = v73;
        }
        while (v72 != v59);
        goto LABEL_92;
      }
    }
    else
    {
      v67 = 0;
      v68 = (_QWORD *)(8 * v63);
      *(_QWORD *)(8 * v63) = v62;
      v69 = 8 * v63 + 8;
      v70 = (char *)v60 - (char *)v59;
      if (v60 != v59)
        goto LABEL_89;
    }
    v27 = v601;
    v61 = &v67[8 * v65];
    if (v59)
      goto LABEL_93;
LABEL_94:
    v59 = v68;
    v60 = (_QWORD *)v69;
    a3 = v594;
    v55 = v610;
    v54 += 4472;
  }
  while (v54 != v610);
LABEL_106:
  if ((_QWORD)__p)
    operator delete((void *)__p);
  v50 = (__n128 *)v607;
LABEL_114:
  *(_QWORD *)&__p = v59;
  *((_QWORD *)&__p + 1) = v60;
  *(_QWORD *)&v646 = v61;
  memset(object, 0, 24);
  v83 = (char *)v60 - (char *)v59;
  if (v60 == v59)
  {
    v88 = 0;
    v87 = 0uLL;
  }
  else
  {
    if (v83 < 0)
      sub_20E867F44();
    object[0] = operator new((char *)v60 - (char *)v59);
    object[1] = object[0];
    object[2] = (char *)object[0] + 8 * (v83 >> 3);
    v630[0] = object;
    do
    {
      v84 = *(_QWORD **)(v603 + 2824);
      v85 = *(_QWORD **)(v603 + 2832);
      if (v84 != v85)
      {
        while (1)
        {
          v86 = v84[2];
          if (v86)
          {
            if (*(_QWORD *)(v86 + 160) == *v59)
              break;
          }
          v84 += 559;
          if (v84 == v85)
          {
            v84 = 0;
            goto LABEL_126;
          }
        }
      }
      if (v84 == v85)
        v84 = 0;
LABEL_126:
      v620[0] = v84;
      sub_20EA61104((void ***)v630, v620);
      ++v59;
    }
    while (v59 != v60);
    v87 = *(_OWORD *)object;
    v88 = object[2];
  }
  *(_OWORD *)v654 = v87;
  v654[2] = v88;
  sub_20F385850((uint64_t *)v654, (uint64_t)v630);
  v89 = (int8x8_t)v630[1];
  if (v630[1])
  {
    v90 = (uint8x8_t)vcnt_s8((int8x8_t)v630[1]);
    v90.i16[0] = vaddlv_u8(v90);
    if (v90.u32[0] > 1uLL)
    {
      v91 = v604;
      if ((void *)v604 >= v630[1])
        v91 = v604 % (unint64_t)v630[1];
    }
    else
    {
      v91 = ((unint64_t)v630[1] - 1) & v604;
    }
    v92 = (_QWORD *)*((_QWORD *)v630[0] + v91);
    if (v92)
    {
      v93 = (_QWORD *)*v92;
      if (v93)
      {
        if (v90.u32[0] < 2uLL)
        {
          while (1)
          {
            v95 = v93[1];
            if (v604 == v95)
            {
              if (v93[2] == v604)
                goto LABEL_151;
            }
            else if ((v95 & ((unint64_t)v630[1] - 1)) != v91)
            {
              goto LABEL_149;
            }
            v93 = (_QWORD *)*v93;
            if (!v93)
              goto LABEL_149;
          }
        }
        do
        {
          v94 = v93[1];
          if (v604 == v94)
          {
            if (v93[2] == v604)
              goto LABEL_151;
          }
          else
          {
            if ((void *)v94 >= v630[1])
              v94 %= (unint64_t)v630[1];
            if (v94 != v91)
              break;
          }
          v93 = (_QWORD *)*v93;
        }
        while (v93);
      }
    }
  }
LABEL_149:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 3629, (uint64_t)"map_groups.count(submap) > 0", 28, (uint64_t)"targeted submap not passed in map_groups", 40, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v89 = (int8x8_t)v630[1];
LABEL_151:
  if (!*(_QWORD *)&v89)
    goto LABEL_912;
  v96 = (uint8x8_t)vcnt_s8(v89);
  v96.i16[0] = vaddlv_u8(v96);
  if (v96.u32[0] > 1uLL)
  {
    v97 = v604;
    if (v604 >= *(_QWORD *)&v89)
      v97 = v604 % *(_QWORD *)&v89;
  }
  else
  {
    v97 = (*(_QWORD *)&v89 - 1) & v604;
  }
  v98 = (uint64_t ***)*((_QWORD *)v630[0] + v97);
  if (!v98 || (v99 = *v98) == 0)
LABEL_912:
    sub_20E89FD20("unordered_map::at: key not found");
  if (v96.u32[0] < 2uLL)
  {
    v100 = *(_QWORD *)&v89 - 1;
    while (1)
    {
      v102 = (unint64_t)v99[1];
      if (v604 == v102)
      {
        if (v99[2] == (uint64_t *)v604)
          goto LABEL_171;
      }
      else if ((v102 & v100) != v97)
      {
        goto LABEL_912;
      }
      v99 = (uint64_t **)*v99;
      if (!v99)
        goto LABEL_912;
    }
  }
  while (2)
  {
    v101 = (unint64_t)v99[1];
    if (v604 != v101)
    {
      if (v101 >= *(_QWORD *)&v89)
        v101 %= *(_QWORD *)&v89;
      if (v101 != v97)
        goto LABEL_912;
      goto LABEL_161;
    }
    if (v99[2] != (uint64_t *)v604)
    {
LABEL_161:
      v99 = (uint64_t **)*v99;
      if (!v99)
        goto LABEL_912;
      continue;
    }
    break;
  }
LABEL_171:
  *(_OWORD *)v620 = 0u;
  v621 = 0u;
  LODWORD(v622) = 1065353216;
  v103 = v631[0];
  if (v631[0])
  {
    do
    {
      *((_BYTE *)sub_20F34869C((float *)v620, v103[2], v103 + 2) + 24) = 0;
      v103 = (_QWORD *)*v103;
    }
    while (v103);
  }
  memset(object, 0, 32);
  LODWORD(object[4]) = 1065353216;
  v627 = 0;
  v628 = 0;
  *(_QWORD *)&v655 = &off_24C9FDF60;
  *((_QWORD *)&v655 + 1) = v603;
  *((_QWORD *)&v656 + 1) = &v655;
  sub_20F385F68(v630, object, (uint64_t)&v655, (uint64_t *)&v627, 0, 0);
  v104 = (unsigned int *)(*(_QWORD *)v627 + 32 * *((unsigned int *)v99 + 6));
  v668[0] = (_DWORD *)((uint64_t)(*((_QWORD *)v627 + 1) - *(_QWORD *)v627) >> 5);
  sub_20F3B58D4(v104, (unint64_t *)v668, &v648);
  v105 = (uint64_t *)v621;
  if ((_QWORD)v621)
  {
    while (1)
    {
      if (!v630[1])
        goto LABEL_905;
      v106 = v105[2];
      v107 = (uint8x8_t)vcnt_s8((int8x8_t)v630[1]);
      v107.i16[0] = vaddlv_u8(v107);
      if (v107.u32[0] > 1uLL)
      {
        v108 = v105[2];
        if ((void *)v106 >= v630[1])
          v108 = v106 % (unint64_t)v630[1];
      }
      else
      {
        v108 = ((unint64_t)v630[1] - 1) & v106;
      }
      v109 = (unsigned int **)*((_QWORD *)v630[0] + v108);
      if (!v109 || (v110 = *v109) == 0)
LABEL_905:
        sub_20E89FD20("unordered_map::at: key not found");
      if (v107.u32[0] < 2uLL)
      {
        while (1)
        {
          v112 = *((_QWORD *)v110 + 1);
          if (v106 == v112)
          {
            if (*((_QWORD *)v110 + 2) == v106)
              goto LABEL_194;
          }
          else if ((v112 & ((unint64_t)v630[1] - 1)) != v108)
          {
            goto LABEL_905;
          }
          v110 = *(unsigned int **)v110;
          if (!v110)
            goto LABEL_905;
        }
      }
      while (1)
      {
        v111 = *((_QWORD *)v110 + 1);
        if (v106 == v111)
          break;
        if ((void *)v111 >= v630[1])
          v111 %= (unint64_t)v630[1];
        if (v111 != v108)
          goto LABEL_905;
LABEL_184:
        v110 = *(unsigned int **)v110;
        if (!v110)
          goto LABEL_905;
      }
      if (*((_QWORD *)v110 + 2) != v106)
        goto LABEL_184;
LABEL_194:
      v668[0] = v110 + 6;
      v113 = *((unsigned int *)sub_20F2CE5F0((uint64_t)object, v110 + 6, (uint64_t)&unk_2102DB95C, v668) + 5);
      v114 = (void *)v648;
      *((_BYTE *)v105 + 24) = (*(_QWORD *)(v648 + ((v113 >> 3) & 0x1FFFFFF8)) >> v113) & 1;
      v105 = (uint64_t *)*v105;
      if (!v105)
      {
LABEL_197:
        operator delete(v114);
        goto LABEL_198;
      }
    }
  }
  v114 = (void *)v648;
  if ((_QWORD)v648)
    goto LABEL_197;
LABEL_198:
  v115 = (__int128 *)*((_QWORD *)&v656 + 1);
  if (*((__int128 **)&v656 + 1) == &v655)
  {
    v116 = 4;
    v115 = &v655;
LABEL_202:
    (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
  }
  else if (*((_QWORD *)&v656 + 1))
  {
    v116 = 5;
    goto LABEL_202;
  }
  v117 = v628;
  if (v628)
  {
    p_shared_owners = (unint64_t *)&v628->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = object[2];
  if (object[2])
  {
    do
    {
      v121 = (_QWORD *)*v120;
      operator delete(v120);
      v120 = v121;
    }
    while (v121);
  }
  v122 = object[0];
  object[0] = 0;
  if (v122)
    operator delete(v122);
  if (*((_QWORD *)&v652 + 1))
  {
    v123 = (_QWORD *)v652;
    if ((_QWORD)v652)
    {
      do
      {
        v124 = (_QWORD *)*v123;
        operator delete(v123);
        v123 = v124;
      }
      while (v124);
    }
    *(_QWORD *)&v652 = 0;
    v125 = *((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v126 = 0;
      do
        *(_QWORD *)(__dst + 8 * v126++) = 0;
      while (v125 != v126);
    }
    *((_QWORD *)&v652 + 1) = 0;
  }
  v127 = v620[0];
  v620[0] = 0;
  v128 = (void *)__dst;
  *(_QWORD *)&__dst = v127;
  if (v128)
    operator delete(v128);
  v130 = (unint64_t)v620[1];
  v129 = (_QWORD *)v621;
  v620[1] = 0;
  LODWORD(v653) = (_DWORD)v622;
  *((_QWORD *)&__dst + 1) = v130;
  v652 = v621;
  if (*((_QWORD *)&v621 + 1))
  {
    v131 = *(_QWORD *)(v621 + 8);
    if ((v130 & (v130 - 1)) != 0)
    {
      if (v131 >= v130)
        v131 %= v130;
    }
    else
    {
      v131 &= v130 - 1;
    }
    *(_QWORD *)(__dst + 8 * v131) = &v652;
    v621 = 0uLL;
  }
  else if ((_QWORD)v621)
  {
    do
    {
      v132 = (_QWORD *)*v129;
      operator delete(v129);
      v129 = v132;
    }
    while (v132);
  }
  v133 = v620[0];
  v620[0] = 0;
  if (v133)
    operator delete(v133);
  v134 = v631[0];
  if (v631[0])
  {
    do
    {
      v135 = (_QWORD *)*v134;
      operator delete(v134);
      v134 = v135;
    }
    while (v135);
  }
  v136 = v630[0];
  v630[0] = 0;
  if (v136)
    operator delete(v136);
  if (v654[0])
  {
    v654[1] = v654[0];
    operator delete(v654[0]);
  }
LABEL_238:
  v137 = (unint64_t *)*((_QWORD *)&__p + 1);
  v138 = (unint64_t *)__p;
  if ((_QWORD)__p != *((_QWORD *)&__p + 1))
  {
    v46 = v603;
    while (1)
    {
      v140 = *(_QWORD **)(v603 + 2848);
      v141 = *(_QWORD **)(v603 + 2856);
      if (v140 != v141)
      {
        while (*v140 != *v138)
        {
          if (++v140 == v141)
          {
            v140 = *(_QWORD **)(v603 + 2856);
            break;
          }
        }
      }
      if (v140 == v141)
      {
        v50 = (__n128 *)v607;
        a3 = v594;
        v27 = v601;
        if (*((_BYTE *)sub_20F34869C((float *)&__dst, *v138, v138) + 24))
          goto LABEL_242;
        v142 = v641;
        if (v641 >= (unint64_t *)v642)
        {
          v143 = (unint64_t *)v640;
          v152 = (char *)v641 - (_BYTE *)v640;
          v153 = ((char *)v641 - (_BYTE *)v640) >> 3;
          v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 61)
LABEL_915:
            sub_20E92CED8();
          v155 = (char *)v642 - (_BYTE *)v640;
          if (((char *)v642 - (_BYTE *)v640) >> 2 > v154)
            v154 = v155 >> 2;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
            v148 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v148 = v154;
          if (v148)
          {
            if (v148 >> 61)
LABEL_917:
              sub_20E877A38();
            v149 = operator new(8 * v148);
            v150 = (unint64_t *)&v149[8 * v153];
            *v150 = *v138;
            v139 = (uint64_t)(v150 + 1);
            v156 = (char *)v142 - (char *)v143;
            if (v142 == v143)
            {
LABEL_283:
              v27 = v601;
              goto LABEL_289;
            }
          }
          else
          {
            v149 = 0;
            v150 = (unint64_t *)(8 * v153);
            *(_QWORD *)(8 * v153) = *v138;
            v139 = 8 * v153 + 8;
            v156 = (char *)v142 - (char *)v143;
            if (v142 == v143)
              goto LABEL_283;
          }
          v167 = v156 - 8;
          if (v167 >= 0x58)
          {
            v168 = (char *)v142 - &v149[v152];
            v27 = v601;
            if (v168 >= 0x20)
            {
              v169 = (v167 >> 3) + 1;
              v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
              v171 = &v142[v170 / 0xFFFFFFFFFFFFFFF8];
              v150 = (unint64_t *)((char *)v150 - v170);
              v172 = &v149[8 * v153 - 16];
              v173 = v142 - 2;
              v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                *v172 = v175;
                v172 -= 2;
                v173 -= 4;
                v174 -= 4;
              }
              while (v174);
              v142 = v171;
              if (v169 == (v169 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_289;
            }
          }
          else
          {
            v27 = v601;
          }
          do
          {
            v176 = *--v142;
            *--v150 = v176;
          }
          while (v142 != v143);
LABEL_289:
          v640 = v150;
          v642 = (__n128 *)&v149[8 * v148];
          if (v143)
            operator delete(v143);
          v50 = (__n128 *)v607;
          a3 = v594;
          goto LABEL_241;
        }
      }
      else
      {
        v142 = v641;
        if (v641 >= (unint64_t *)v642)
        {
          v143 = (unint64_t *)v640;
          v144 = (char *)v641 - (_BYTE *)v640;
          v145 = ((char *)v641 - (_BYTE *)v640) >> 3;
          v146 = v145 + 1;
          if ((unint64_t)(v145 + 1) >> 61)
            goto LABEL_915;
          v147 = (char *)v642 - (_BYTE *)v640;
          if (((char *)v642 - (_BYTE *)v640) >> 2 > v146)
            v146 = v147 >> 2;
          if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8)
            v148 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v148 = v146;
          if (v148)
          {
            if (v148 >> 61)
              goto LABEL_917;
            v149 = operator new(8 * v148);
            v150 = (unint64_t *)&v149[8 * v145];
            *v150 = *v138;
            v139 = (uint64_t)(v150 + 1);
            v151 = (char *)v142 - (char *)v143;
            if (v142 == v143)
              goto LABEL_283;
          }
          else
          {
            v149 = 0;
            v150 = (unint64_t *)(8 * v145);
            *(_QWORD *)(8 * v145) = *v138;
            v139 = 8 * v145 + 8;
            v151 = (char *)v142 - (char *)v143;
            if (v142 == v143)
              goto LABEL_283;
          }
          v157 = v151 - 8;
          if (v157 >= 0x58)
          {
            v158 = (char *)v142 - v149 - v144;
            v27 = v601;
            if (v158 >= 0x20)
            {
              v159 = (v157 >> 3) + 1;
              v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
              v161 = &v142[v160 / 0xFFFFFFFFFFFFFFF8];
              v150 = (unint64_t *)((char *)v150 - v160);
              v162 = &v149[8 * v145 - 16];
              v163 = v142 - 2;
              v164 = v159 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v165 = *(_OWORD *)v163;
                *(v162 - 1) = *((_OWORD *)v163 - 1);
                *v162 = v165;
                v162 -= 2;
                v163 -= 4;
                v164 -= 4;
              }
              while (v164);
              v142 = v161;
              if (v159 == (v159 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_289;
            }
          }
          else
          {
            v27 = v601;
          }
          do
          {
            v166 = *--v142;
            *--v150 = v166;
          }
          while (v142 != v143);
          goto LABEL_289;
        }
      }
      *v142 = *v138;
      v139 = (uint64_t)(v142 + 1);
LABEL_241:
      v641 = (unint64_t *)v139;
LABEL_242:
      if (++v138 == v137)
      {
        v138 = (unint64_t *)__p;
        v177 = v591;
        if ((_QWORD)__p)
          goto LABEL_293;
        goto LABEL_294;
      }
    }
  }
  v46 = v603;
  v177 = v591;
  if ((_QWORD)__p)
  {
LABEL_293:
    *((_QWORD *)&__p + 1) = v138;
    operator delete(v138);
  }
LABEL_294:
  v605 = (uint64_t *)v643;
  v590 = v644;
  if (v643 != v644)
  {
    v592 = v599 + 221;
    v178 = 176;
    if (v27)
      v178 = 136;
    v611 = v178;
    v589 = (_QWORD *)(v177 + 104);
    v588 = (_QWORD *)(v177 + 144);
    v51 = (char *)v50;
    while (1)
    {
      v179 = *(_QWORD *)(v591 + 16);
      if (!v27)
        break;
      v180 = *(uint64_t **)(v179 + 304);
      if (!v180)
        goto LABEL_334;
      v181 = (uint64_t *)(v179 + 304);
      v182 = *((_DWORD *)v605 + 4);
      v183 = *v605;
      v184 = *((_DWORD *)v605 + 2);
      v185 = v181;
      do
      {
        while (1)
        {
          v186 = *((_DWORD *)v180 + 12);
          _CF = v186 >= v182;
          if (v186 != v182)
            goto LABEL_308;
          v188 = v180[4];
          if (v188 >= v183)
            break;
LABEL_303:
          v180 = (uint64_t *)v180[1];
          if (!v180)
            goto LABEL_311;
        }
        if (v188 != v183)
          goto LABEL_310;
        _CF = *((_DWORD *)v180 + 10) >= v184;
LABEL_308:
        if (!_CF)
          goto LABEL_303;
LABEL_310:
        v185 = v180;
        v180 = (uint64_t *)*v180;
      }
      while (v180);
LABEL_311:
      if (v185 != v181)
      {
        v189 = *((_DWORD *)v185 + 12);
        if (v182 == v189)
        {
          v190 = v185[4];
          if (v183 >= v190 && (v183 != v190 || v184 >= *((_DWORD *)v185 + 10)))
            goto LABEL_339;
        }
        else if (v182 >= v189)
        {
          goto LABEL_339;
        }
      }
LABEL_334:
      v202 = sub_20E9DF85C(v588, v605);
LABEL_337:
      if (v202)
      {
        v203 = (float32x4_t *)(v202 + 5);
        goto LABEL_340;
      }
LABEL_299:
      v605 += 3;
      if (v605 == v590)
        goto LABEL_518;
    }
    v193 = *(uint64_t **)(v179 + 240);
    v191 = (uint64_t *)(v179 + 240);
    v192 = v193;
    if (!v193)
      goto LABEL_336;
    v194 = *((_DWORD *)v605 + 4);
    v195 = *v605;
    v185 = v191;
    v196 = *((_DWORD *)v605 + 2);
    while (2)
    {
      while (2)
      {
        v197 = *((_DWORD *)v192 + 12);
        v198 = v197 >= v194;
        if (v197 == v194)
        {
          v199 = v192[4];
          if (v199 >= v195)
          {
            if (v199 != v195)
              goto LABEL_326;
            v198 = *((_DWORD *)v192 + 10) >= v196;
            break;
          }
LABEL_319:
          v192 = (uint64_t *)v192[1];
          if (!v192)
            goto LABEL_327;
          continue;
        }
        break;
      }
      if (!v198)
        goto LABEL_319;
LABEL_326:
      v185 = v192;
      v192 = (uint64_t *)*v192;
      if (v192)
        continue;
      break;
    }
LABEL_327:
    if (v185 == v191)
      goto LABEL_336;
    v200 = *((_DWORD *)v185 + 12);
    if (v194 != v200)
    {
      if (v194 >= v200)
        goto LABEL_339;
      goto LABEL_336;
    }
    v201 = v185[4];
    if (v195 < v201 || v195 == v201 && v196 < *((_DWORD *)v185 + 10))
    {
LABEL_336:
      v202 = sub_20E9DF85C(v589, v605);
      goto LABEL_337;
    }
LABEL_339:
    v203 = (float32x4_t *)(v185 + 7);
LABEL_340:
    v204 = sub_20E9DF85C(v599 + 223, v605);
    v206 = (float64x2_t **)(v204 + 5);
    if (!v204)
      v206 = 0;
    v207 = **v206;
    _D2 = (*v206)[2].f64[1];
    v209 = *(float64x2_t *)((char *)*v206 + 24);
    v210 = (*v206)[4].f64[0];
    v211 = (*v206)[3];
    v212 = v206[4];
    v213 = v212[1].f64[0];
    _Q7 = *v212;
    v215 = v212[2].f64[1];
    _Q17 = *(float64x2_t *)((char *)v212 + 24);
    v217 = v212[4].f64[0];
    _Q19 = v212[3];
    v219 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v212->f64[0]), v209, *v212, 1), v211, v213);
    __asm { FMLA            D21, D2, V7.D[1] }
    v223 = _D21 + v210 * v213;
    v224 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, _Q17.f64[0]), v209, _Q17, 1), v211, v215);
    __asm { FMLA            D21, D2, V17.D[1] }
    v226 = _D21 + v210 * v215;
    v227 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, _Q19.f64[0]), v209, _Q19, 1), v211, v217);
    __asm { FMLA            D21, D2, V19.D[1] }
    v229 = _D21 + v210 * v217;
    v230 = v206[6];
    _Q19.f64[0] = v230[1].f64[0];
    _Q21 = *v230;
    v232 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v230->f64[0]), v209, *v230, 1), v211, _Q19.f64[0]);
    __asm { FMLA            D0, D2, V21.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + v210 * _Q19.f64[0];
    v233 = v206[2];
    v209.f64[0] = v233[1].f64[0];
    v234 = vaddq_f64(_Q0, v209);
    v235 = vaddq_f64(v232, *v233);
    *(float64x2_t *)object = v219;
    *(float64x2_t *)&object[3] = v224;
    object[2] = *(void **)&v223;
    v659 = *(void **)&v226;
    v660 = v227;
    v662 = v235;
    v661 = v229;
    v663 = *(void **)&v234.f64[0];
    v236 = *v592;
    if (*v592)
    {
      v237 = *((_DWORD *)v605 + 4);
      v238 = v599 + 221;
      do
      {
        v239 = *(_DWORD *)(v236 + 32);
        v240 = v239 >= v237;
        if (v239 >= v237)
          v241 = (uint64_t *)v236;
        else
          v241 = (uint64_t *)(v236 + 8);
        if (v240)
          v238 = (uint64_t *)v236;
        v236 = *v241;
      }
      while (*v241);
      if (v238 != v592 && *((_DWORD *)v238 + 8) <= v237)
      {
        v595 = v238[5];
        if (v595)
        {
          v242 = (unint64_t *)v640;
          v243 = v641;
          v597 = (char *)v641;
          if (v640 != v641)
            goto LABEL_363;
          goto LABEL_298;
        }
      }
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 3732, (uint64_t)"default_query_lens_for_computing_FOV", 36, (uint64_t)"Default lens of query VIO Frame is not available", 48, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v242 = (unint64_t *)v640;
    v243 = v641;
    v595 = 0;
    v597 = (char *)v641;
    if (v640 == v641)
    {
LABEL_298:
      a3 = v594;
      goto LABEL_299;
    }
    while (1)
    {
LABEL_363:
      v244 = *v242;
      v245 = *(_QWORD **)(v46 + 2824);
      v246 = *(_QWORD **)(v46 + 2832);
      if (v245 != v246)
      {
        while (1)
        {
          v247 = v245[2];
          if (v247)
          {
            if (*(_QWORD *)(v247 + 160) == v244)
              break;
          }
          v245 += 559;
          if (v245 == v246)
            goto LABEL_362;
        }
      }
      if (v245 != v246 && v245 != 0)
        break;
LABEL_362:
      if (++v242 == v243)
        goto LABEL_298;
    }
    v655 = 0uLL;
    *(_QWORD *)&v656 = 0;
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_904;
    v249 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__dst + 8));
    v249.i16[0] = vaddlv_u8(v249);
    if (v249.u32[0] > 1uLL)
    {
      v250 = v244;
      if (v244 >= *((_QWORD *)&__dst + 1))
        v250 = v244 % *((_QWORD *)&__dst + 1);
    }
    else
    {
      v250 = (*((_QWORD *)&__dst + 1) - 1) & v244;
    }
    v251 = *(uint64_t ***)(__dst + 8 * v250);
    if (!v251 || (v252 = *v251) == 0)
LABEL_904:
      sub_20E89FD20("unordered_map::at: key not found");
    if (v249.u32[0] < 2uLL)
    {
      while (1)
      {
        v254 = v252[1];
        if (v254 == v244)
        {
          if (v252[2] == v244)
            goto LABEL_392;
        }
        else if ((v254 & (*((_QWORD *)&__dst + 1) - 1)) != v250)
        {
          goto LABEL_904;
        }
        v252 = (uint64_t *)*v252;
        if (!v252)
          goto LABEL_904;
      }
    }
    while (2)
    {
      v253 = v252[1];
      if (v253 == v244)
      {
        if (v252[2] == v244)
        {
LABEL_392:
          v608 = (char *)v50;
          if (*((_BYTE *)v252 + 24))
          {
            v255 = **(_QWORD **)(v245[2] + 424);
            v630[0] = object;
            LODWORD(v630[1]) = 0;
            v631[0] = &v662;
            LODWORD(v631[1]) = 0;
            v256 = *(_DWORD *)(v595 + 992);
            if (v256 != -1)
              goto LABEL_396;
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
            {
              v256 = *(_DWORD *)(v595 + 992);
LABEL_396:
              if (!v256)
                goto LABEL_909;
              if (v256 != -1)
                goto LABEL_400;
              if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
              {
                v256 = *(_DWORD *)(v595 + 992);
LABEL_400:
                if (v256)
                {
                  v234.f64[0] = *(float64_t *)(v595 + 144);
                  *(float *)v234.f64 = v234.f64[0];
                  sub_20F28CF60(v255, (uint64_t)v630, 0xFFFFFFFFFFFFFFFFLL, (unint64_t **)&v614, 0, 0, 0, v620, v234, *(double *)(v46 + 144), *(double *)(v46 + 152));
                  v257 = (float64x2_t *)v620[0];
                  v258 = (float64x2_t *)v620[1];
                  *(_QWORD *)&v649 = 0;
                  v648 = 0uLL;
                  v259 = (char *)v620[1] - (char *)v620[0];
                  if (v620[1] == v620[0])
                  {
                    v263 = 0;
                    v262 = 0;
                    v50 = (__n128 *)v608;
                    if (v620[0])
                      goto LABEL_408;
                  }
                  else
                  {
                    if (v259 < 0)
                      sub_20E867F44();
                    v260 = v259 >> 5;
                    v261 = (uint64_t *)operator new(24 * (v259 >> 5));
                    v262 = v261;
                    v263 = (char *)&v261[3 * v260];
                    v264 = (char *)v261;
                    do
                    {
                      *((_QWORD *)v264 + 1) = 0;
                      *((_QWORD *)v264 + 2) = 0;
                      *(_QWORD *)v264 = 0;
                      *((_DWORD *)v264 + 4) = -1;
                      v264 += 24;
                    }
                    while (v264 != v263);
                    v265 = v261;
                    v266 = v257;
                    v46 = v603;
                    do
                    {
                      v234 = *v266;
                      *((_DWORD *)v265 + 4) = LODWORD(v266[1].f64[0]);
                      *(float64x2_t *)v265 = v234;
                      v265 += 3;
                      v266 += 2;
                    }
                    while (v266 != v258);
                    v50 = (__n128 *)v608;
                    if (v257)
                    {
LABEL_408:
                      v620[1] = v257;
                      operator delete(v257);
                    }
                  }
                  *(_QWORD *)&v655 = v262;
                  *((_QWORD *)&v655 + 1) = v263;
                  *(_QWORD *)&v656 = v263;
                  if (v262 != (uint64_t *)v263)
                    goto LABEL_453;
LABEL_410:
                  if (!v263)
                    goto LABEL_361;
                  goto LABEL_360;
                }
LABEL_909:
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102A1D75, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              }
            }
            abort();
          }
          v267 = *(uint64_t **)(v245[2] + 424);
          v268 = *v267;
          v269 = *(_QWORD *)(*v267 + 1808);
          if (v269)
          {
            if (v269 > 0xAAAAAAAAAAAAAAALL)
LABEL_908:
              sub_20E867F44();
            v263 = (char *)operator new(24 * v269);
            *(_QWORD *)&v655 = v263;
            *((_QWORD *)&v655 + 1) = v263;
            *(_QWORD *)&v656 = &v263[24 * v269];
            v27 = v601;
            v270 = *(uint64_t **)(v268 + 1800);
            if (!v270)
            {
LABEL_359:
              v46 = v603;
              if (!v263)
                goto LABEL_361;
              goto LABEL_360;
            }
          }
          else
          {
            v263 = 0;
            v270 = *(uint64_t **)(v268 + 1800);
            if (!v270)
              goto LABEL_359;
          }
          v46 = v603;
          do
          {
            while (1)
            {
              while (1)
              {
                v271 = v614;
                if (v614 != v615)
                {
                  while (*(_QWORD *)v271 != v270[2] || v271[2] != *((_DWORD *)v270 + 6))
                  {
                    v271 += 4;
                    if (v271 == v615)
                      goto LABEL_428;
                  }
                }
                if (v271 == v615)
                  break;
                v270 = (uint64_t *)*v270;
                if (!v270)
                  goto LABEL_449;
              }
LABEL_428:
              v272 = (float64x2_t *)(v270 + 2);
              if ((unint64_t)v263 >= (unint64_t)v656)
                break;
              v234 = *v272;
              *((_QWORD *)v263 + 2) = v270[4];
              *(float64x2_t *)v263 = v234;
              v27 = v601;
              *((_QWORD *)&v655 + 1) = v263 + 24;
              v263 += 24;
              v46 = v603;
              v270 = (uint64_t *)*v270;
              if (!v270)
                goto LABEL_449;
            }
            v273 = (char *)v655;
            v274 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v263[-v655] >> 3);
            v275 = v274 + 1;
            if (v274 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_908;
            if (0x5555555555555556 * ((uint64_t)(v656 - v655) >> 3) > v275)
              v275 = 0x5555555555555556 * ((uint64_t)(v656 - v655) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v656 - v655) >> 3) >= 0x555555555555555)
              v276 = 0xAAAAAAAAAAAAAAALL;
            else
              v276 = v275;
            if (v276)
            {
              if (v276 > 0xAAAAAAAAAAAAAAALL)
                sub_20E877A38();
              v277 = (char *)operator new(24 * v276);
            }
            else
            {
              v277 = 0;
            }
            v234 = *v272;
            v278 = &v277[24 * v274];
            *((_QWORD *)v278 + 2) = v270[4];
            *(float64x2_t *)v278 = v234;
            v279 = v278;
            if (v263 == v273)
            {
              v27 = v601;
            }
            else
            {
              v27 = v601;
              do
              {
                v234 = *(float64x2_t *)(v263 - 24);
                *((_DWORD *)v279 - 2) = *((_DWORD *)v263 - 2);
                *(float64x2_t *)(v279 - 24) = v234;
                v279 -= 24;
                v263 -= 24;
              }
              while (v263 != v273);
              v263 = (char *)v655;
            }
            v280 = v278 + 24;
            *(_QWORD *)&v655 = v279;
            *((_QWORD *)&v655 + 1) = v278 + 24;
            *(_QWORD *)&v656 = &v277[24 * v276];
            v50 = (__n128 *)v608;
            if (v263)
              operator delete(v263);
            *((_QWORD *)&v655 + 1) = v280;
            v263 = v280;
            v46 = v603;
            v270 = (uint64_t *)*v270;
          }
          while (v270);
LABEL_449:
          v262 = (uint64_t *)v655;
          if ((char *)v655 == v263)
            goto LABEL_410;
LABEL_453:
          while (2)
          {
            v282 = v245[2];
            if (v27)
            {
              v283 = *(uint64_t **)(v282 + 304);
              if (!v283)
                goto LABEL_487;
              v284 = (uint64_t *)(v282 + 304);
              v285 = *((_DWORD *)v262 + 4);
              v286 = *v262;
              v287 = *((_DWORD *)v262 + 2);
              v288 = v284;
              while (1)
              {
LABEL_457:
                v289 = *((_DWORD *)v283 + 12);
                v290 = v289 >= v285;
                if (v289 != v285)
                  goto LABEL_461;
                v291 = v283[4];
                if (v291 < v286)
                  goto LABEL_456;
                if (v291 == v286)
                  break;
LABEL_463:
                v288 = v283;
                v283 = (uint64_t *)*v283;
                if (!v283)
                {
LABEL_464:
                  if (v288 != v284)
                  {
                    v292 = *((_DWORD *)v288 + 12);
                    if (v285 == v292)
                    {
                      v293 = v288[4];
                      if (v286 >= v293 && (v286 != v293 || v287 >= *((_DWORD *)v288 + 10)))
                        goto LABEL_492;
                    }
                    else if (v285 >= v292)
                    {
                      goto LABEL_492;
                    }
                  }
LABEL_487:
                  v305 = sub_20E9DF85C(v245 + 18, v262);
LABEL_490:
                  if (v305)
                  {
                    v306 = (float32x4_t *)(v305 + 5);
                    goto LABEL_493;
                  }
                  goto LABEL_452;
                }
              }
              v290 = *((_DWORD *)v283 + 10) >= v287;
LABEL_461:
              if (!v290)
              {
LABEL_456:
                v283 = (uint64_t *)v283[1];
                if (!v283)
                  goto LABEL_464;
                goto LABEL_457;
              }
              goto LABEL_463;
            }
            v296 = *(uint64_t **)(v282 + 240);
            v294 = (uint64_t *)(v282 + 240);
            v295 = v296;
            if (!v296)
              goto LABEL_489;
            v297 = *((_DWORD *)v262 + 4);
            v298 = *v262;
            v288 = v294;
            v299 = *((_DWORD *)v262 + 2);
LABEL_473:
            while (2)
            {
              v300 = *((_DWORD *)v295 + 12);
              v301 = v300 >= v297;
              if (v300 == v297)
              {
                v302 = v295[4];
                if (v302 < v298)
                  goto LABEL_472;
                if (v302 == v298)
                {
                  v301 = *((_DWORD *)v295 + 10) >= v299;
                  goto LABEL_477;
                }
              }
              else
              {
LABEL_477:
                if (!v301)
                {
LABEL_472:
                  v295 = (uint64_t *)v295[1];
                  if (!v295)
                    goto LABEL_480;
                  continue;
                }
              }
              break;
            }
            v288 = v295;
            v295 = (uint64_t *)*v295;
            if (!v295)
            {
LABEL_480:
              if (v288 == v294)
                goto LABEL_489;
              v303 = *((_DWORD *)v288 + 12);
              if (v297 != v303)
              {
                if (v297 >= v303)
                  goto LABEL_492;
                goto LABEL_489;
              }
              v304 = v288[4];
              if (v298 < v304 || v298 == v304 && v299 < *((_DWORD *)v288 + 10))
              {
LABEL_489:
                v305 = sub_20E9DF85C(v245 + 13, v262);
                goto LABEL_490;
              }
LABEL_492:
              v306 = (float32x4_t *)(v288 + 7);
LABEL_493:
              v307 = (int32x4_t)vsubq_f32(*v203, *v306);
              v308 = (float32x2_t)vextq_s8((int8x16_t)v307, (int8x16_t)v307, 8uLL).u64[0];
              v309 = (int32x4_t)vsubq_f32(v203[1], v306[1]);
              v310 = (float32x2_t)vextq_s8((int8x16_t)v309, (int8x16_t)v309, 8uLL).u64[0];
              v311 = (int32x4_t)vsubq_f32(v203[2], v306[2]);
              v312 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v307.i8, *(float32x2_t *)v307.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v307.i8, 1), *(float32x2_t *)v307.i8, 1), v308, v308), (float32x2_t)vdup_laneq_s32(v307, 3), (float32x4_t)v307, 3), *(float32x2_t *)v309.i8, *(float32x2_t *)v309.i8),
                               (float32x2_t)vdup_lane_s32(*(int32x2_t *)v309.i8, 1),
                               *(float32x2_t *)v309.i8,
                               1),
                             v310,
                             v310),
                           (float32x2_t)vdup_laneq_s32(v309, 3),
                           (float32x4_t)v309,
                           3),
                         *(float32x2_t *)v311.i8,
                         *(float32x2_t *)v311.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v311.i8, 1),
                       *(float32x2_t *)v311.i8,
                       1);
              v309.i64[0] = vextq_s8((int8x16_t)v311, (int8x16_t)v311, 8uLL).u64[0];
              v313 = (int32x4_t)vsubq_f32(v203[3], v306[3]);
              v314 = (float32x2_t)vextq_s8((int8x16_t)v313, (int8x16_t)v313, 8uLL).u64[0];
              v315 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v312, *(float32x2_t *)v309.i8, *(float32x2_t *)v309.i8), (float32x2_t)vdup_laneq_s32(v311, 3), (float32x4_t)v311, 3), *(float32x2_t *)v313.i8, *(float32x2_t *)v313.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v313.i8, 1), *(float32x2_t *)v313.i8, 1), v314, v314), (float32x2_t)vdup_laneq_s32(v313, 3), (float32x4_t)v313, 3);
              v316 = (int32x4_t)vsubq_f32(v203[4], v306[4]);
              v307.i64[0] = vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL).u64[0];
              v317 = (int32x4_t)vsubq_f32(v203[5], v306[5]);
              v318 = (float32x2_t)vextq_s8((int8x16_t)v317, (int8x16_t)v317, 8uLL).u64[0];
              v319 = (int32x4_t)vsubq_f32(v203[6], v306[6]);
              v320 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v315, *(float32x2_t *)v316.i8, *(float32x2_t *)v316.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v316.i8, 1), *(float32x2_t *)v316.i8, 1), *(float32x2_t *)v307.i8, *(float32x2_t *)v307.i8), (float32x2_t)vdup_laneq_s32(v316, 3), (float32x4_t)v316, 3), *(float32x2_t *)v317.i8, *(float32x2_t *)v317.i8),
                               (float32x2_t)vdup_lane_s32(*(int32x2_t *)v317.i8, 1),
                               *(float32x2_t *)v317.i8,
                               1),
                             v318,
                             v318),
                           (float32x2_t)vdup_laneq_s32(v317, 3),
                           (float32x4_t)v317,
                           3),
                         *(float32x2_t *)v319.i8,
                         *(float32x2_t *)v319.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v319.i8, 1),
                       *(float32x2_t *)v319.i8,
                       1);
              v317.i64[0] = vextq_s8((int8x16_t)v319, (int8x16_t)v319, 8uLL).u64[0];
              v321 = (int32x4_t)vsubq_f32(v203[7], v306[7]);
              v322 = (float32x2_t)vextq_s8((int8x16_t)v321, (int8x16_t)v321, 8uLL).u64[0];
              v323 = (int32x4_t)vsubq_f32(v203[8], v306[8]);
              v324 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v320, *(float32x2_t *)v317.i8, *(float32x2_t *)v317.i8), (float32x2_t)vdup_laneq_s32(v319, 3), (float32x4_t)v319, 3), *(float32x2_t *)v321.i8, *(float32x2_t *)v321.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v321.i8, 1), *(float32x2_t *)v321.i8, 1), v322, v322), (float32x2_t)vdup_laneq_s32(v321, 3), (float32x4_t)v321,
                           3),
                         *(float32x2_t *)v323.i8,
                         *(float32x2_t *)v323.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v323.i8, 1),
                       *(float32x2_t *)v323.i8,
                       1);
              v321.i64[0] = vextq_s8((int8x16_t)v323, (int8x16_t)v323, 8uLL).u64[0];
              v325 = (int32x4_t)vsubq_f32(v203[9], v306[9]);
              v326 = (float32x2_t)vextq_s8((int8x16_t)v325, (int8x16_t)v325, 8uLL).u64[0];
              v327 = (int32x4_t)vsubq_f32(v203[10], v306[10]);
              v328 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v324, *(float32x2_t *)v321.i8, *(float32x2_t *)v321.i8), (float32x2_t)vdup_laneq_s32(v323, 3), (float32x4_t)v323, 3), *(float32x2_t *)v325.i8, *(float32x2_t *)v325.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v325.i8, 1), *(float32x2_t *)v325.i8, 1), v326, v326), (float32x2_t)vdup_laneq_s32(v325, 3), (float32x4_t)v325,
                           3),
                         *(float32x2_t *)v327.i8,
                         *(float32x2_t *)v327.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v327.i8, 1),
                       *(float32x2_t *)v327.i8,
                       1);
              v325.i64[0] = vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
              v329 = (int32x4_t)vsubq_f32(v203[11], v306[11]);
              v330 = (float32x2_t)vextq_s8((int8x16_t)v329, (int8x16_t)v329, 8uLL).u64[0];
              v331 = (int32x4_t)vsubq_f32(v203[12], v306[12]);
              v332 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v328, *(float32x2_t *)v325.i8, *(float32x2_t *)v325.i8), (float32x2_t)vdup_laneq_s32(v327, 3), (float32x4_t)v327, 3), *(float32x2_t *)v329.i8, *(float32x2_t *)v329.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v329.i8, 1), *(float32x2_t *)v329.i8, 1), v330, v330), (float32x2_t)vdup_laneq_s32(v329, 3), (float32x4_t)v329,
                           3),
                         *(float32x2_t *)v331.i8,
                         *(float32x2_t *)v331.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v331.i8, 1),
                       *(float32x2_t *)v331.i8,
                       1);
              v329.i64[0] = vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL).u64[0];
              v333 = (int32x4_t)vsubq_f32(v203[13], v306[13]);
              v334 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 8uLL).u64[0];
              v335 = (int32x4_t)vsubq_f32(v203[14], v306[14]);
              v336 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v332, *(float32x2_t *)v329.i8, *(float32x2_t *)v329.i8), (float32x2_t)vdup_laneq_s32(v331, 3), (float32x4_t)v331, 3), *(float32x2_t *)v333.i8, *(float32x2_t *)v333.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v333.i8, 1), *(float32x2_t *)v333.i8, 1), v334, v334), (float32x2_t)vdup_laneq_s32(v333, 3), (float32x4_t)v333,
                           3),
                         *(float32x2_t *)v335.i8,
                         *(float32x2_t *)v335.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v335.i8, 1),
                       *(float32x2_t *)v335.i8,
                       1);
              v333.i64[0] = vextq_s8((int8x16_t)v335, (int8x16_t)v335, 8uLL).u64[0];
              v337 = (int32x4_t)vsubq_f32(v203[15], v306[15]);
              v338 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 8uLL).u64[0];
              v339 = (int32x4_t)vsubq_f32(v203[16], v306[16]);
              v340 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v336, *(float32x2_t *)v333.i8, *(float32x2_t *)v333.i8), (float32x2_t)vdup_laneq_s32(v335, 3), (float32x4_t)v335, 3), *(float32x2_t *)v337.i8, *(float32x2_t *)v337.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v337.i8, 1), *(float32x2_t *)v337.i8, 1), v338, v338), (float32x2_t)vdup_laneq_s32(v337, 3), (float32x4_t)v337,
                           3),
                         *(float32x2_t *)v339.i8,
                         *(float32x2_t *)v339.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v339.i8, 1),
                       *(float32x2_t *)v339.i8,
                       1);
              v337.i64[0] = vextq_s8((int8x16_t)v339, (int8x16_t)v339, 8uLL).u64[0];
              v341 = (int32x4_t)vsubq_f32(v203[17], v306[17]);
              v342 = (float32x2_t)vextq_s8((int8x16_t)v341, (int8x16_t)v341, 8uLL).u64[0];
              v343 = (int32x4_t)vsubq_f32(v203[18], v306[18]);
              v344 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v340, *(float32x2_t *)v337.i8, *(float32x2_t *)v337.i8), (float32x2_t)vdup_laneq_s32(v339, 3), (float32x4_t)v339, 3), *(float32x2_t *)v341.i8, *(float32x2_t *)v341.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v341.i8, 1), *(float32x2_t *)v341.i8, 1), v342, v342), (float32x2_t)vdup_laneq_s32(v341, 3), (float32x4_t)v341,
                           3),
                         *(float32x2_t *)v343.i8,
                         *(float32x2_t *)v343.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v343.i8, 1),
                       *(float32x2_t *)v343.i8,
                       1);
              v341.i64[0] = vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
              v345 = (int32x4_t)vsubq_f32(v203[19], v306[19]);
              v346 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
              v347 = (int32x4_t)vsubq_f32(v203[20], v306[20]);
              v348 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v344, *(float32x2_t *)v341.i8, *(float32x2_t *)v341.i8), (float32x2_t)vdup_laneq_s32(v343, 3), (float32x4_t)v343, 3), *(float32x2_t *)v345.i8, *(float32x2_t *)v345.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v345.i8, 1), *(float32x2_t *)v345.i8, 1), v346, v346), (float32x2_t)vdup_laneq_s32(v345, 3), (float32x4_t)v345,
                           3),
                         *(float32x2_t *)v347.i8,
                         *(float32x2_t *)v347.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v347.i8, 1),
                       *(float32x2_t *)v347.i8,
                       1);
              v345.i64[0] = vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u64[0];
              v349 = (int32x4_t)vsubq_f32(v203[21], v306[21]);
              v350 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).u64[0];
              v351 = (int32x4_t)vsubq_f32(v203[22], v306[22]);
              v352 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v348, *(float32x2_t *)v345.i8, *(float32x2_t *)v345.i8), (float32x2_t)vdup_laneq_s32(v347, 3), (float32x4_t)v347, 3), *(float32x2_t *)v349.i8, *(float32x2_t *)v349.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v349.i8, 1), *(float32x2_t *)v349.i8, 1), v350, v350), (float32x2_t)vdup_laneq_s32(v349, 3), (float32x4_t)v349,
                           3),
                         *(float32x2_t *)v351.i8,
                         *(float32x2_t *)v351.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v351.i8, 1),
                       *(float32x2_t *)v351.i8,
                       1);
              v349.i64[0] = vextq_s8((int8x16_t)v351, (int8x16_t)v351, 8uLL).u64[0];
              v353 = (int32x4_t)vsubq_f32(v203[23], v306[23]);
              v354 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 8uLL).u64[0];
              v355 = (int32x4_t)vsubq_f32(v203[24], v306[24]);
              v356 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v352, *(float32x2_t *)v349.i8, *(float32x2_t *)v349.i8), (float32x2_t)vdup_laneq_s32(v351, 3), (float32x4_t)v351, 3), *(float32x2_t *)v353.i8, *(float32x2_t *)v353.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v353.i8, 1), *(float32x2_t *)v353.i8, 1), v354, v354), (float32x2_t)vdup_laneq_s32(v353, 3), (float32x4_t)v353,
                           3),
                         *(float32x2_t *)v355.i8,
                         *(float32x2_t *)v355.i8),
                       (float32x2_t)vdup_lane_s32(*(int32x2_t *)v355.i8, 1),
                       *(float32x2_t *)v355.i8,
                       1);
              v353.i64[0] = vextq_s8((int8x16_t)v355, (int8x16_t)v355, 8uLL).u64[0];
              v357 = (int32x4_t)vsubq_f32(v203[25], v306[25]);
              v358 = (float32x2_t)vextq_s8((int8x16_t)v357, (int8x16_t)v357, 8uLL).u64[0];
              v359 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v356, *(float32x2_t *)v353.i8, *(float32x2_t *)v353.i8), (float32x2_t)vdup_laneq_s32(v355, 3), (float32x4_t)v355, 3), *(float32x2_t *)v357.i8, *(float32x2_t *)v357.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v357.i8, 1), *(float32x2_t *)v357.i8, 1), v358, v358), (float32x2_t)vdup_laneq_s32(v357, 3), (float32x4_t)v357, 3);
              v360 = (int32x4_t)vsubq_f32(v203[26], v306[26]);
              v357.i64[0] = vextq_s8((int8x16_t)v360, (int8x16_t)v360, 8uLL).u64[0];
              v361 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v359, *(float32x2_t *)v360.i8, *(float32x2_t *)v360.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v360.i8, 1), *(float32x2_t *)v360.i8, 1), *(float32x2_t *)v357.i8, *(float32x2_t *)v357.i8), (float32x2_t)vdup_laneq_s32(v360, 3), (float32x4_t)v360, 3);
              v362 = (int32x4_t)vsubq_f32(v203[28], v306[28]);
              v363 = (int32x4_t)vsubq_f32(v203[27], v306[27]);
              v349.i64[0] = vextq_s8((int8x16_t)v363, (int8x16_t)v363, 8uLL).u64[0];
              v364 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v361, *(float32x2_t *)v363.i8, *(float32x2_t *)v363.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v363.i8, 1), *(float32x2_t *)v363.i8, 1), *(float32x2_t *)v349.i8, *(float32x2_t *)v349.i8), (float32x2_t)vdup_laneq_s32(v363, 3), (float32x4_t)v363, 3);
              v349.i64[0] = vextq_s8((int8x16_t)v362, (int8x16_t)v362, 8uLL).u64[0];
              v365 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v364, *(float32x2_t *)v362.i8, *(float32x2_t *)v362.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v362.i8, 1), *(float32x2_t *)v362.i8, 1), *(float32x2_t *)v349.i8, *(float32x2_t *)v349.i8), (float32x2_t)vdup_laneq_s32(v362, 3), (float32x4_t)v362, 3);
              v366 = (int32x4_t)vsubq_f32(v203[31], v306[31]);
              v367 = (int32x4_t)vsubq_f32(v203[29], v306[29]);
              v234 = (float64x2_t)vsubq_f32(v203[30], v306[30]);
              v349.i64[0] = vextq_s8((int8x16_t)v367, (int8x16_t)v367, 8uLL).u64[0];
              v353.i64[0] = vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL).u64[0];
              v368 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v365, *(float32x2_t *)v367.i8, *(float32x2_t *)v367.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v367.i8, 1), *(float32x2_t *)v367.i8, 1), *(float32x2_t *)v349.i8, *(float32x2_t *)v349.i8), (float32x2_t)vdup_laneq_s32(v367, 3), (float32x4_t)v367, 3), *(float32x2_t *)&v234.f64[0], *(float32x2_t *)&v234.f64[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v234.f64[0], 1), *(float32x2_t *)&v234.f64[0], 1);
              v367.i64[0] = vextq_s8((int8x16_t)v366, (int8x16_t)v366, 8uLL).u64[0];
              v369 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v368, *(float32x2_t *)v353.i8, *(float32x2_t *)v353.i8), (float32x2_t)vdup_laneq_s32((int32x4_t)v234, 3), (float32x4_t)v234, 3), *(float32x2_t *)v366.i8, *(float32x2_t *)v366.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v366.i8, 1), *(float32x2_t *)v366.i8, 1), *(float32x2_t *)v367.i8, *(float32x2_t *)v367.i8), (float32x2_t)vdup_laneq_s32(v366, 3), (float32x4_t)v366, 3).f32[0];
              if (*(double *)(v46 + v611) >= v369)
              {
                *(_OWORD *)v630 = *(_OWORD *)v605;
                LODWORD(v631[0]) = *((_DWORD *)v605 + 4);
                v370 = *((_DWORD *)v262 + 4);
                *(_OWORD *)&v631[1] = *(_OWORD *)v262;
                LODWORD(v631[3]) = v370;
                if (v51 < v613)
                {
                  v234 = *(float64x2_t *)v630;
                  v281 = *(_OWORD *)&v631[2];
                  *((_OWORD *)v51 + 1) = *(_OWORD *)v631;
                  *((_OWORD *)v51 + 2) = v281;
                  *(float64x2_t *)v51 = v234;
                  *((double *)v51 + 6) = v369;
                  v51 += 56;
                  goto LABEL_452;
                }
                v371 = 0x6DB6DB6DB6DB6DB7 * ((v51 - (char *)v50) >> 3);
                v372 = v371 + 1;
                if ((unint64_t)(v371 + 1) > 0x492492492492492)
                  sub_20E867F44();
                v373 = (char *)v50;
                if (0xDB6DB6DB6DB6DB6ELL * ((v613 - (char *)v50) >> 3) > v372)
                  v372 = 0xDB6DB6DB6DB6DB6ELL * ((v613 - (char *)v50) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v613 - (char *)v50) >> 3)) >= 0x249249249249249)
                  v374 = 0x492492492492492;
                else
                  v374 = v372;
                if (v374)
                {
                  if (v374 > 0x492492492492492)
                    sub_20E877A38();
                  v375 = (char *)operator new(56 * v374);
                }
                else
                {
                  v375 = 0;
                }
                v376 = &v375[56 * v371];
                v377 = *(_OWORD *)v631;
                *(_OWORD *)v376 = *(_OWORD *)v630;
                *((_OWORD *)v376 + 1) = v377;
                *(void **)&v234.f64[1] = v631[3];
                *((_OWORD *)v376 + 2) = *(_OWORD *)&v631[2];
                *((double *)v376 + 6) = v369;
                if (v51 == v373)
                {
                  v381 = &v375[56 * v371];
                  v613 = &v375[56 * v374];
                  v51 = v376 + 56;
                  if (v373)
                    goto LABEL_509;
                }
                else
                {
                  v378 = &v375[56 * v371];
                  do
                  {
                    v234 = *(float64x2_t *)(v51 - 56);
                    v379 = *(_OWORD *)(v51 - 40);
                    v380 = *(_OWORD *)(v51 - 24);
                    v381 = v378 - 56;
                    *((_QWORD *)v378 - 1) = *((_QWORD *)v51 - 1);
                    *(_OWORD *)(v378 - 24) = v380;
                    *(_OWORD *)(v378 - 40) = v379;
                    *(float64x2_t *)(v378 - 56) = v234;
                    v51 -= 56;
                    v378 -= 56;
                  }
                  while (v51 != v373);
                  v613 = &v375[56 * v374];
                  v51 = v376 + 56;
                  if (v373)
LABEL_509:
                    operator delete(v373);
                }
                v50 = (__n128 *)v381;
                v46 = v603;
                v27 = v601;
              }
LABEL_452:
              v262 += 3;
              if (v262 == (uint64_t *)v263)
              {
                v263 = (char *)v655;
                if (!(_QWORD)v655)
                {
LABEL_361:
                  v243 = (unint64_t *)v597;
                  goto LABEL_362;
                }
LABEL_360:
                *((_QWORD *)&v655 + 1) = v263;
                operator delete(v263);
                goto LABEL_361;
              }
              continue;
            }
            goto LABEL_473;
          }
        }
      }
      else
      {
        if (v253 >= *((_QWORD *)&__dst + 1))
          v253 %= *((_QWORD *)&__dst + 1);
        if (v253 != v250)
          goto LABEL_904;
      }
      v252 = (uint64_t *)*v252;
      if (!v252)
        goto LABEL_904;
      continue;
    }
  }
  v51 = (char *)v50;
LABEL_518:
  if (v640)
    operator delete(v640);
  v382 = (_QWORD *)v652;
  if ((_QWORD)v652)
  {
    do
    {
      v383 = (_QWORD *)*v382;
      operator delete(v382);
      v382 = v383;
    }
    while (v383);
  }
  v384 = (void *)__dst;
  *(_QWORD *)&__dst = 0;
  if (v384)
    operator delete(v384);
  if (v643)
  {
    v644 = (uint64_t *)v643;
    operator delete(v643);
  }
LABEL_526:
  kdebug_trace();
  v385 = sub_20F325654(v46, (uint64_t *)a3);
  v609 = (char *)v50;
  if (!v385)
  {
    v412 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v413 = 0x6DB6DB6DB6DB6DB7 * ((v51 - (char *)v50) >> 3);
    if (*(_BYTE *)(v46 + 3016))
      goto LABEL_898;
    goto LABEL_593;
  }
  v386 = v385;
  v387 = *(double *)(v46 + 168);
  v655 = 0u;
  v656 = 0u;
  v657 = 1.0;
  if (!*(_BYTE *)(v46 + 160))
  {
    v415 = *(_QWORD **)(v46 + 2848);
    v416 = *(_QWORD **)(v46 + 2856);
    if (v415 == v416)
      goto LABEL_607;
    while (1)
    {
      v417 = *(_QWORD *)(v46 + 2824);
      v418 = *(_QWORD *)(v46 + 2832);
      if (v417 != v418)
      {
        while (1)
        {
          v419 = *(_QWORD *)(v417 + 16);
          if (v419)
          {
            if (*(_QWORD *)(v419 + 160) == *v415)
              break;
          }
          v417 += 4472;
          if (v417 == v418)
            goto LABEL_596;
        }
      }
      if (v417 != v418 && v417 != 0)
        sub_20F3471A0((uint64_t)&v655, *(_QWORD *)(*(_QWORD *)(v417 + 16) + 160), *(_QWORD *)(*(_QWORD *)(v417 + 16) + 160), *(_QWORD *)(v417 + 16));
LABEL_596:
      if (++v415 == v416)
        goto LABEL_607;
    }
  }
  v388 = *(_QWORD *)(v46 + 2824);
  v389 = *(_QWORD *)(v46 + 2832);
  if (v388 == v389)
    goto LABEL_607;
  v390 = 0;
  v391 = 0;
  do
  {
    while (1)
    {
      v394 = *(_QWORD *)(v388 + 16);
      v395 = *(_QWORD *)(v394 + 160);
      if (v391)
      {
        v396 = (uint8x8_t)vcnt_s8((int8x8_t)v391);
        v396.i16[0] = vaddlv_u8(v396);
        if (v396.u32[0] > 1uLL)
        {
          a3 = *(_QWORD *)(v394 + 160);
          if (v391 <= v395)
            a3 = v395 % v391;
        }
        else
        {
          a3 = v395 & (v391 - 1);
        }
        v397 = *(_QWORD **)(v655 + 8 * a3);
        if (v397)
        {
          v398 = (_QWORD *)*v397;
          if (v398)
            break;
        }
      }
LABEL_554:
      v401 = operator new(0x20uLL);
      *v401 = 0;
      v401[1] = v395;
      v401[2] = v395;
      v401[3] = v394;
      v402 = (float)(unint64_t)(v390 + 1);
      if (v391 && (float)(v657 * (float)v391) >= v402)
      {
        v50 = (__n128 *)v609;
        v392 = v655;
        v393 = *(_QWORD **)(v655 + 8 * a3);
        if (v393)
          goto LABEL_531;
      }
      else
      {
        v404 = (v391 & (v391 - 1)) != 0;
        if (v391 < 3)
          v404 = 1;
        v405 = v404 | (2 * v391);
        v406 = vcvtps_u32_f32(v402 / v657);
        if (v405 <= v406)
          prime = v406;
        else
          prime = v405;
        v50 = (__n128 *)v609;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v391 = *((_QWORD *)&v655 + 1);
        }
        if (prime > v391)
          goto LABEL_570;
        if (prime < v391)
        {
          v408 = vcvtps_u32_f32((float)*((unint64_t *)&v656 + 1) / v657);
          if (v391 < 3
            || (v409 = (uint8x8_t)vcnt_s8((int8x8_t)v391), v409.i16[0] = vaddlv_u8(v409), v409.u32[0] > 1uLL))
          {
            v408 = std::__next_prime(v408);
          }
          else
          {
            v410 = 1 << -(char)__clz(v408 - 1);
            if (v408 >= 2)
              v408 = v410;
          }
          if (prime <= v408)
            prime = v408;
          if (prime < v391)
LABEL_570:
            sub_20E8D2B3C((uint64_t)&v655, prime);
        }
        v391 = *((_QWORD *)&v655 + 1);
        v411 = *((_QWORD *)&v655 + 1) - 1;
        if ((*((_QWORD *)&v655 + 1) & (*((_QWORD *)&v655 + 1) - 1)) != 0)
        {
          if (*((_QWORD *)&v655 + 1) <= v395)
          {
            a3 = v395 % *((_QWORD *)&v655 + 1);
            v392 = v655;
            v393 = *(_QWORD **)(v655 + 8 * (v395 % *((_QWORD *)&v655 + 1)));
            if (v393)
            {
LABEL_531:
              *v401 = *v393;
              a3 = v594;
              goto LABEL_532;
            }
          }
          else
          {
            a3 = v395;
            v392 = v655;
            v393 = *(_QWORD **)(v655 + 8 * v395);
            if (v393)
              goto LABEL_531;
          }
        }
        else
        {
          a3 = v411 & v395;
          v392 = v655;
          v393 = *(_QWORD **)(v655 + 8 * (v411 & v395));
          if (v393)
            goto LABEL_531;
        }
      }
      *v401 = v656;
      *(_QWORD *)&v656 = v401;
      *(_QWORD *)(v392 + 8 * a3) = &v656;
      a3 = v594;
      if (!*v401)
        goto LABEL_533;
      v403 = *(_QWORD *)(*v401 + 8);
      if ((v391 & (v391 - 1)) != 0)
      {
        if (v403 >= v391)
          v403 %= v391;
      }
      else
      {
        v403 &= v391 - 1;
      }
      v393 = (_QWORD *)(v655 + 8 * v403);
LABEL_532:
      *v393 = v401;
LABEL_533:
      v390 = ++*((_QWORD *)&v656 + 1);
      v388 += 4472;
      if (v388 == v389)
        goto LABEL_607;
    }
    if (v396.u32[0] < 2uLL)
    {
      while (1)
      {
        v400 = v398[1];
        if (v400 == v395)
        {
          if (v398[2] == v395)
            goto LABEL_580;
        }
        else if ((v400 & (v391 - 1)) != a3)
        {
          goto LABEL_554;
        }
        v398 = (_QWORD *)*v398;
        if (!v398)
          goto LABEL_554;
      }
    }
    while (1)
    {
      v399 = v398[1];
      if (v399 == v395)
        break;
      if (v399 >= v391)
        v399 %= v391;
      if (v399 != a3)
        goto LABEL_554;
LABEL_544:
      v398 = (_QWORD *)*v398;
      if (!v398)
        goto LABEL_554;
    }
    if (v398[2] != v395)
      goto LABEL_544;
LABEL_580:
    v50 = (__n128 *)v609;
    a3 = v594;
    v388 += 4472;
  }
  while (v388 != v389);
LABEL_607:
  v648 = 0u;
  v649 = 0u;
  v650 = 1065353216;
  if (v50 != (__n128 *)v51)
  {
    v421 = (uint64_t *)v50;
    do
    {
      sub_20F28FE1C((uint64_t)&v648, v421 + 3, v421 + 3);
      v421 += 7;
    }
    while (v421 != (uint64_t *)v51);
  }
  __p = 0u;
  v646 = 0u;
  v647 = 1065353216;
  sub_20F456050((uint64_t)&v655, a3, (uint64_t)&v648, (unint64_t *)&v643);
  v423 = (char *)v643;
  v424 = (char *)v644;
  v46 = v603;
  if (v643 != v644)
  {
    v425 = v387 * v387;
    do
    {
      v426 = sub_20F325654(v603, (uint64_t *)v423);
      if (v426)
      {
        v422.n128_u64[0] = *(_QWORD *)(v426 + 88);
        v427.f64[0] = *(float64_t *)(v386 + 88);
        v422 = (__n128)vsubq_f64((float64x2_t)v422, v427);
        _D3 = vsubq_f64(*(float64x2_t *)(v426 + 72), *(float64x2_t *)(v386 + 72)).f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v430 = vmlad_n_f64(_D2, v422.n128_f64[0], v422.n128_f64[0]);
        v422.n128_f64[0] = v430 >= v425 ? v430 : v425;
        v431 = *((double *)v423 + 2);
        if (v431 < 0.0 || v431 * v431 > v422.n128_f64[0])
          sub_20F28FE1C((uint64_t)&__p, (uint64_t *)v423, v423);
      }
      v423 += 24;
    }
    while (v423 != v424);
  }
  v641 = 0;
  v640 = 0;
  v642 = 0;
  v432 = (__n128 *)(v51 - (char *)v50);
  v413 = 0x6DB6DB6DB6DB6DB7 * ((v51 - (char *)v50) >> 3);
  if (v51 == (char *)v50)
  {
    v433 = 0;
  }
  else
  {
    if (v413 > 0x492492492492492)
      sub_20E867F44();
    v432 = (__n128 *)operator new((size_t)v432);
    v433 = v432;
    v640 = v432;
    v641 = (unint64_t *)v432;
    v642 = (__n128 *)((char *)v432 + 8 * ((v51 - (char *)v50) >> 3));
    v434 = *(int8x8_t *)((char *)&__p + 8);
    if (*((_QWORD *)&__p + 1))
    {
      v435 = v50;
LABEL_626:
      v436 = v435[2].n128_u32[0];
      v422.n128_u64[0] = (unint64_t)vcnt_s8(v434);
      v422.n128_u16[0] = vaddlv_u8((uint8x8_t)v422.n128_u64[0]);
      if (v422.n128_u32[0] > 1uLL)
      {
        v437 = v435[2].n128_u32[0];
        if (*(_QWORD *)&v434 <= v436)
          v437 = v436 % *(_QWORD *)&v434;
      }
      else
      {
        v437 = (v434.i32[0] - 1) & v436;
      }
      v438 = *(uint64_t ***)(__p + 8 * v437);
      if (v438)
      {
        v439 = *v438;
        if (v439)
        {
          v440 = v435[1].n128_i64[1];
          if (v422.n128_u32[0] < 2uLL)
          {
            v441 = *(_QWORD *)&v434 - 1;
            while (1)
            {
              v445 = v439[1];
              if (v445 == v436)
              {
                if (v439[2] == v440 && *((_DWORD *)v439 + 6) == (_DWORD)v436)
                  goto LABEL_652;
              }
              else if ((v445 & v441) != v437)
              {
                goto LABEL_671;
              }
              v439 = (uint64_t *)*v439;
              if (!v439)
                goto LABEL_671;
            }
          }
          do
          {
            v443 = v439[1];
            if (v443 == v436)
            {
              if (v439[2] == v440 && *((_DWORD *)v439 + 6) == (_DWORD)v436)
              {
LABEL_652:
                if (v433 >= v642)
                {
                  v449 = v413;
                  v450 = (__n128 *)v640;
                  v451 = 0x6DB6DB6DB6DB6DB7 * (((char *)v433 - (_BYTE *)v640) >> 3);
                  v452 = v451 + 1;
                  if ((unint64_t)(v451 + 1) > 0x492492492492492)
                    sub_20E867F44();
                  if (0xDB6DB6DB6DB6DB6ELL * (((char *)v642 - (_BYTE *)v640) >> 3) > v452)
                    v452 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v642 - (_BYTE *)v640) >> 3);
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v642 - (_BYTE *)v640) >> 3)) >= 0x249249249249249)
                    v453 = 0x492492492492492;
                  else
                    v453 = v452;
                  if (v453)
                  {
                    if (v453 > 0x492492492492492)
                      sub_20E877A38();
                    v454 = (char *)operator new(56 * v453);
                  }
                  else
                  {
                    v454 = 0;
                  }
                  v455 = &v454[56 * v451];
                  v422 = *v435;
                  v456 = v435[1];
                  v457 = v435[2];
                  *((_QWORD *)v455 + 6) = v435[3].n128_u64[0];
                  *((__n128 *)v455 + 1) = v456;
                  *((__n128 *)v455 + 2) = v457;
                  *(__n128 *)v455 = v422;
                  v458 = v455;
                  if (v433 != v450)
                  {
                    do
                    {
                      v422 = *(__n128 *)((char *)v433 - 56);
                      v459 = *(__int128 *)((char *)&v433[-3] + 8);
                      v460 = *(__int128 *)((char *)&v433[-2] + 8);
                      *((_QWORD *)v458 - 1) = v433[-1].n128_u64[1];
                      *(_OWORD *)(v458 - 24) = v460;
                      *(_OWORD *)(v458 - 40) = v459;
                      *(__n128 *)(v458 - 56) = v422;
                      v458 -= 56;
                      v433 = (__n128 *)((char *)v433 - 56);
                    }
                    while (v433 != v450);
                    v433 = v450;
                  }
                  v448 = (__n128 *)(v455 + 56);
                  v640 = v458;
                  v641 = (unint64_t *)(v455 + 56);
                  v642 = (__n128 *)&v454[56 * v453];
                  if (v433)
                    operator delete(v433);
                  v413 = v449;
                }
                else
                {
                  v422 = *v435;
                  v446 = v435[1];
                  v447 = v435[2];
                  v433[3].n128_u64[0] = v435[3].n128_u64[0];
                  v433[1] = v446;
                  v433[2] = v447;
                  *v433 = v422;
                  v448 = (__n128 *)((char *)v433 + 56);
                }
                v641 = (unint64_t *)v448;
                v433 = v448;
                v46 = v603;
                break;
              }
            }
            else
            {
              if (v443 >= *(_QWORD *)&v434)
                v443 %= *(_QWORD *)&v434;
              if (v443 != v437)
                break;
            }
            v439 = (uint64_t *)*v439;
          }
          while (v439);
        }
      }
LABEL_671:
      while (1)
      {
        v435 = (__n128 *)((char *)v435 + 56);
        if (v435 == (__n128 *)v51)
          break;
        v434 = *(int8x8_t *)((char *)&__p + 8);
        if (*((_QWORD *)&__p + 1))
          goto LABEL_626;
      }
      v432 = (__n128 *)v640;
      v50 = (__n128 *)v609;
      a3 = v594;
    }
  }
  v461 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v433 - (char *)v432) >> 3));
  if (v433 == v432)
    v462 = 0;
  else
    v462 = v461;
  sub_20F343794((uint64_t)v432, (unint64_t)v433, v462, 1, v422);
  v463 = *(_QWORD *)(v46 + 8);
  if (0x6DB6DB6DB6DB6DB7 * (((char *)v641 - (_BYTE *)v640) >> 3) > v463)
    v641 = (unint64_t *)((char *)v640 + 56 * v463);
  sub_20F457EF8(&v655, (uint64_t *)&v640, (uint64_t *)&v643, *(_DWORD *)(v46 + 1080), (void **)a1);
  sub_20F31DCD4(&v639);
  if (**(int **)(v639 + 56) > 2)
    goto LABEL_881;
  v464 = *(unsigned __int8 *)(v639 + 72);
  v465 = sub_20E8C31DC(v639, "OSLogSurrogateAppender", 1, 0);
  v466 = v465;
  if (!v464 && !v465)
    goto LABEL_881;
  sub_20E863438((uint64_t)v630);
  v612 = v466;
  v606 = v464;
  sub_20E863438((uint64_t)object);
  v467 = sub_20E86A980(&object[2], (uint64_t)" query state ", 13);
  v468 = *(_DWORD *)(a3 + 8);
  v654[0] = *(void **)a3;
  LODWORD(v654[1]) = v468;
  sub_210216370((uint64_t)v654);
  if ((SBYTE7(v621) & 0x80u) == 0)
    v469 = v620;
  else
    v469 = (void **)v620[0];
  if ((SBYTE7(v621) & 0x80u) == 0)
    v470 = BYTE7(v621);
  else
    v470 = (uint64_t)v620[1];
  v471 = sub_20E86A980(v467, (uint64_t)v469, v470);
  sub_20E86A980(v471, (uint64_t)"\n", 1);
  if (SBYTE7(v621) < 0)
    operator delete(v620[0]);
  v472 = (char *)v640;
  v473 = (char *)v641;
  if (v640 != v641)
  {
    do
    {
      sub_20F43A5F4((uint64_t)v472, v620);
      if ((SBYTE7(v621) & 0x80u) == 0)
        v474 = v620;
      else
        v474 = (void **)v620[0];
      if ((SBYTE7(v621) & 0x80u) == 0)
        v475 = BYTE7(v621);
      else
        v475 = (uint64_t)v620[1];
      v476 = sub_20E86A980(&object[2], (uint64_t)v474, v475);
      v477 = sub_20E86A980(v476, (uint64_t)" ", 1);
      v478 = sub_20E86A980(v477, (uint64_t)" traversal-distance ", 20);
      *(_QWORD *)((char *)v478 + *(_QWORD *)(*v478 - 24) + 24) = 3;
      v479 = (char *)v643;
      if (v644 != v643)
      {
        v480 = 0xAAAAAAAAAAAAAAABLL * (((char *)v644 - (_BYTE *)v643) >> 3);
        v481 = *((_QWORD *)v472 + 3);
        do
        {
          v482 = v480 >> 1;
          v483 = &v479[24 * (v480 >> 1)];
          if (*(_QWORD *)v483 < v481 || *(_QWORD *)v483 == v481 && *((_DWORD *)v483 + 2) < *((_DWORD *)v472 + 8))
          {
            v479 = v483 + 24;
            v482 = v480 + ~v482;
          }
          v480 = v482;
        }
        while (v482);
      }
      v484 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v484, (uint64_t)"\n", 1);
      if (SBYTE7(v621) < 0)
        operator delete(v620[0]);
      v472 += 56;
    }
    while (v472 != v473);
  }
  v486 = *(uint64_t **)a1;
  v485 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v485)
  {
    do
    {
      sub_20F43A84C(v486, v620);
      if ((SBYTE7(v621) & 0x80u) == 0)
        v487 = v620;
      else
        v487 = (void **)v620[0];
      if ((SBYTE7(v621) & 0x80u) == 0)
        v488 = BYTE7(v621);
      else
        v488 = (uint64_t)v620[1];
      sub_20E86A980(&object[2], (uint64_t)v487, v488);
      if (SBYTE7(v621) < 0)
        operator delete(v620[0]);
      v486 += 10;
    }
    while (v486 != v485);
  }
  sub_20E86A980(&object[2], (uint64_t)"\n", 1);
  if ((v666 & 0x10) != 0)
  {
    v491 = v665;
    if (v665 < *(_QWORD *)&v662.f64[0])
    {
      v665 = *(_QWORD *)&v662.f64[0];
      v491 = *(_QWORD *)&v662.f64[0];
    }
    v492 = (void **)&v661;
  }
  else
  {
    if ((v666 & 8) == 0)
    {
      v489 = 0;
      BYTE7(v652) = 0;
      p_dst = &__dst;
      goto LABEL_735;
    }
    v492 = &v659;
    v491 = *(_QWORD *)&v660.f64[1];
  }
  v493 = *v492;
  v489 = v491 - (_QWORD)*v492;
  if (v489 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v489 >= 0x17)
  {
    v494 = (v489 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v489 | 7) != 0x17)
      v494 = v489 | 7;
    v495 = v494 + 1;
    p_dst = (__int128 *)operator new(v494 + 1);
    *(_QWORD *)&v652 = v495 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    *((_QWORD *)&__dst + 1) = v489;
    goto LABEL_734;
  }
  BYTE7(v652) = v491 - *(_BYTE *)v492;
  p_dst = &__dst;
  if (v489)
LABEL_734:
    memmove(p_dst, v493, v489);
LABEL_735:
  *((_BYTE *)p_dst + v489) = 0;
  v496 = (void *)*MEMORY[0x24BEDB7F0];
  object[0] = v496;
  v498 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v497 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)object + *((_QWORD *)v496 - 3)) = v498;
  object[2] = v497;
  object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v664 < 0)
    operator delete(v663);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v667);
  if ((SBYTE7(v652) & 0x80u) == 0)
    v499 = &__dst;
  else
    v499 = (__int128 *)__dst;
  if ((SBYTE7(v652) & 0x80u) == 0)
    v500 = BYTE7(v652);
  else
    v500 = *((_QWORD *)&__dst + 1);
  sub_20E86A980(v631, (uint64_t)v499, v500);
  if (SBYTE7(v652) < 0)
    operator delete((void *)__dst);
  v602 = v496;
  if ((v637 & 0x10) != 0)
  {
    v503 = v636;
    if (v636 < v633)
    {
      v636 = v633;
      v503 = v633;
    }
    v504 = (const void **)&v632;
  }
  else
  {
    if ((v637 & 8) == 0)
    {
      v501 = 0;
      HIBYTE(v629) = 0;
      v502 = &v627;
      goto LABEL_760;
    }
    v504 = (const void **)&v631[3];
    v503 = v631[5];
  }
  v505 = *v504;
  v501 = v503 - (_BYTE *)*v504;
  if (v501 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v501 >= 0x17)
  {
    v506 = (v501 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v501 | 7) != 0x17)
      v506 = v501 | 7;
    v507 = v506 + 1;
    v502 = operator new(v506 + 1);
    v628 = (std::__shared_weak_count *)v501;
    v629 = v507 | 0x8000000000000000;
    v627 = v502;
    goto LABEL_759;
  }
  HIBYTE(v629) = (_BYTE)v503 - *(_BYTE *)v504;
  v502 = &v627;
  if (v501)
LABEL_759:
    memmove(v502, v505, v501);
LABEL_760:
  *((_BYTE *)v502 + v501) = 0;
  v620[0] = &v639;
  v620[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)&v621 = std::chrono::system_clock::now();
  DWORD2(v621) = 2;
  v622 = "unknown file";
  v623 = 3892;
  v625 = 0;
  v626 = 0;
  v624 = "unknown function";
  if (v629 >= 0)
    v508 = (const char *)&v627;
  else
    v508 = (const char *)v627;
  v509 = *(_QWORD *)v620[0];
  v510 = (const char *)(*(_QWORD *)v620[0] + 16);
  v596 = v510;
  if (*(char *)(*(_QWORD *)v620[0] + 39) < 0)
  {
    v510 = *(const char **)(v509 + 16);
    v511 = *(_QWORD *)(v509 + 24);
  }
  else
  {
    v511 = *(unsigned __int8 *)(*(_QWORD *)v620[0] + 39);
  }
  v598 = v498;
  v600 = v497;
  v512 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v512 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
    v46 = v603;
  }
  if (byte_254A4A4F8[23] >= 0)
    v513 = byte_254A4A4F8;
  else
    v513 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v514 = byte_254A4A4F8[23];
  else
    v514 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v513, v510);
  v515 = &object[1];
  if (v514 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v514 >= 0x17)
  {
    v516 = (v514 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v514 | 7) != 0x17)
      v516 = v514 | 7;
    v517 = v516 + 1;
    v515 = (void **)operator new(v516 + 1);
    object[3] = (void *)(v517 | 0x8000000000000000);
    object[1] = v515;
    object[2] = (void *)v514;
    goto LABEL_780;
  }
  HIBYTE(object[3]) = v514;
  if (v514)
LABEL_780:
    memmove(v515, v513, v514);
  *((_BYTE *)v515 + v514) = 0;
  LOBYTE(object[4]) = 1;
  v518 = &v659;
  if (v511 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v511 >= 0x17)
  {
    v519 = (v511 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v511 | 7) != 0x17)
      v519 = v511 | 7;
    v520 = v519 + 1;
    v518 = operator new(v519 + 1);
    *(_QWORD *)&v660.f64[1] = v520 | 0x8000000000000000;
    v659 = v518;
    *(_QWORD *)&v660.f64[0] = v511;
    goto LABEL_788;
  }
  HIBYTE(v660.f64[1]) = v511;
  if (v511)
LABEL_788:
    memmove(v518, v510, v511);
  *((_BYTE *)v518 + v511) = 0;
  LOBYTE(v661) = 1;
  v521 = object[0];
  if (SHIBYTE(v660.f64[1]) < 0)
    operator delete(v659);
  v50 = (__n128 *)v609;
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  if (v612 && *(_QWORD *)(v612 + 24))
  {
    v522 = _os_log_pack_size();
    v523 = operator new(v522, (std::align_val_t)8uLL);
    v524 = (_QWORD *)operator new();
    *v524 = &off_24C9ABB80;
    v524[1] = 0;
    v524[2] = 0;
    v524[3] = v523;
    *(_QWORD *)&__dst = v523;
    *((_QWORD *)&__dst + 1) = v523;
    v653 = 0;
    v652 = (unint64_t)v524;
    v525 = strlen(v508);
    if (v525 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v526 = (void *)v525;
    if (v525 >= 0x17)
    {
      v530 = (v525 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v525 | 7) != 0x17)
        v530 = v525 | 7;
      v531 = v530 + 1;
      v527 = operator new(v530 + 1);
      v654[2] = (void *)(v531 | 0x8000000000000000);
      v654[0] = v527;
      v654[1] = v526;
    }
    else
    {
      HIBYTE(v654[2]) = v525;
      v527 = v654;
      if (!v525)
        goto LABEL_808;
    }
    memcpy(v527, v508, (size_t)v526);
LABEL_808:
    *((_BYTE *)v526 + (_QWORD)v527) = 0;
    v532 = v654[0];
    v668[0] = (_DWORD *)v654[1];
    *(_DWORD **)((char *)v668 + 7) = *(_DWORD **)((char *)&v654[1] + 7);
    v533 = HIBYTE(v654[2]);
    v534 = (char *)operator new(0x38uLL);
    *((_QWORD *)v534 + 1) = 0;
    *((_QWORD *)v534 + 2) = 0;
    *((_QWORD *)v534 + 3) = off_24C9ABC20;
    *(_QWORD *)v534 = &off_24C9ABBD0;
    v535 = v668[0];
    *((_QWORD *)v534 + 4) = v532;
    *((_QWORD *)v534 + 5) = v535;
    *(_DWORD **)(v534 + 47) = *(_DWORD **)((char *)v668 + 7);
    v534[55] = v533;
    memset(v668, 0, 15);
    v536 = v653;
    *((_QWORD *)&v652 + 1) = v534 + 24;
    v653 = (std::__shared_weak_count *)v534;
    v50 = (__n128 *)v609;
    v46 = v603;
    if (v536)
    {
      v537 = (unint64_t *)&v536->__shared_owners_;
      do
        v538 = __ldaxr(v537);
      while (__stlxr(v538 - 1, v537));
      if (!v538)
      {
        ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
        std::__shared_weak_count::__release_weak(v536);
      }
    }
    *(_OWORD *)object = __dst;
    v539 = (void *)*((_QWORD *)&v652 + 1);
    object[2] = (void *)v652;
    if ((_QWORD)v652)
    {
      v540 = (unint64_t *)(v652 + 8);
      do
        v541 = __ldxr(v540);
      while (__stxr(v541 + 1, v540));
    }
    v542 = v653;
    object[3] = v539;
    object[4] = v653;
    if (v653)
    {
      v543 = (unint64_t *)&v653->__shared_owners_;
      do
        v544 = __ldxr(v543);
      while (__stxr(v544 + 1, v543));
      v659 = v539;
      do
        v545 = __ldaxr(v543);
      while (__stlxr(v545 - 1, v543));
      if (!v545)
      {
        ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
        std::__shared_weak_count::__release_weak(v542);
      }
    }
    else
    {
      v659 = v539;
    }
    v546 = (std::__shared_weak_count *)v652;
    if ((_QWORD)v652)
    {
      v547 = (unint64_t *)(v652 + 8);
      do
        v548 = __ldaxr(v547);
      while (__stlxr(v548 - 1, v547));
      if (!v548)
      {
        ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
        std::__shared_weak_count::__release_weak(v546);
      }
    }
    v549 = object[0];
    if (*((char *)v659 + 31) >= 0)
      v550 = (char *)v659 + 8;
    else
      v550 = (char *)*((_QWORD *)v659 + 1);
    v551 = _os_log_pack_fill();
    *(_DWORD *)v551 = 136315138;
    *(_QWORD *)(v551 + 4) = v550;
    v552 = operator new();
    v553 = *(unsigned __int8 *)(v509 + 39);
    v554 = v596;
    if ((v553 & 0x80u) != 0)
    {
      v554 = *(const char **)(v509 + 16);
      v553 = *(_QWORD *)(v509 + 24);
    }
    *(_QWORD *)v552 = v549;
    *(_OWORD *)(v552 + 8) = *(_OWORD *)&object[1];
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v552 + 24) = *(_OWORD *)&object[3];
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v552 + 40) = v554;
    *(_QWORD *)(v552 + 48) = v553;
    *(_BYTE *)(v552 + 56) = 2;
    v654[0] = 0;
    *(_QWORD *)&__dst = v552;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v612 + 24) + 40))(*(_QWORD *)(v612 + 24), &__dst);
    v529 = v606;
    v555 = __dst;
    *(_QWORD *)&__dst = 0;
    if (v555)
    {
      v556 = *(std::__shared_weak_count **)(v555 + 32);
      if (v556)
      {
        v557 = (unint64_t *)&v556->__shared_owners_;
        do
          v558 = __ldaxr(v557);
        while (__stlxr(v558 - 1, v557));
        if (!v558)
        {
          ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
          std::__shared_weak_count::__release_weak(v556);
        }
      }
      v559 = *(std::__shared_weak_count **)(v555 + 16);
      if (v559)
      {
        v560 = (unint64_t *)&v559->__shared_owners_;
        do
          v561 = __ldaxr(v560);
        while (__stlxr(v561 - 1, v560));
        if (!v561)
        {
          ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
          std::__shared_weak_count::__release_weak(v559);
        }
      }
      MEMORY[0x212BC6398](v555, 0x10F0C40B62ED6C6);
      v562 = v654[0];
      v654[0] = 0;
      if (v562)
      {
        v563 = (std::__shared_weak_count *)*((_QWORD *)v562 + 4);
        if (v563)
        {
          v564 = (unint64_t *)&v563->__shared_owners_;
          do
            v565 = __ldaxr(v564);
          while (__stlxr(v565 - 1, v564));
          if (!v565)
          {
            ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
            std::__shared_weak_count::__release_weak(v563);
          }
        }
        v566 = (std::__shared_weak_count *)*((_QWORD *)v562 + 2);
        if (v566)
        {
          v567 = (unint64_t *)&v566->__shared_owners_;
          do
            v568 = __ldaxr(v567);
          while (__stlxr(v568 - 1, v567));
          if (!v568)
          {
            ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
            std::__shared_weak_count::__release_weak(v566);
          }
        }
        MEMORY[0x212BC6398](v562, 0x10F0C40B62ED6C6);
      }
    }
    v569 = (std::__shared_weak_count *)object[4];
    if (object[4])
    {
      v570 = (unint64_t *)((char *)object[4] + 8);
      do
        v571 = __ldaxr(v570);
      while (__stlxr(v571 - 1, v570));
      if (!v571)
      {
        ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
        std::__shared_weak_count::__release_weak(v569);
      }
    }
    v572 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v573 = (unint64_t *)((char *)object[2] + 8);
      do
        v574 = __ldaxr(v573);
      while (__stlxr(v574 - 1, v573));
      if (!v574)
      {
        ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
        std::__shared_weak_count::__release_weak(v572);
      }
    }
  }
  else
  {
    os_log_type_enabled(v521, OS_LOG_TYPE_DEBUG);
    LODWORD(object[0]) = 136315138;
    *(void **)((char *)object + 4) = (void *)v508;
    v528 = (void *)_os_log_send_and_compose_impl();
    v529 = v606;
    if (v528)
      free(v528);
  }
  if (v529)
  {
    v575 = (const char *)&v627;
    if (v629 < 0)
      v575 = (const char *)v627;
    sub_20E8C003C((uint64_t)v620, "%s", v575);
    sub_20E863570((uint64_t)v620);
  }
  sub_20E863570((uint64_t)v620);
  v576 = v626;
  if (v626)
  {
    v577 = (unint64_t *)&v626->__shared_owners_;
    do
      v578 = __ldaxr(v577);
    while (__stlxr(v578 - 1, v577));
    if (!v578)
    {
      ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
      std::__shared_weak_count::__release_weak(v576);
    }
  }
  if (SHIBYTE(v629) < 0)
    operator delete(v627);
  v630[0] = v602;
  *(void **)((char *)v630 + *((_QWORD *)v602 - 3)) = v598;
  v631[0] = v600;
  v631[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v635 < 0)
    operator delete(v634);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v638);
LABEL_881:
  if (v640)
  {
    v641 = (unint64_t *)v640;
    operator delete(v640);
  }
  if (v643)
  {
    v644 = (uint64_t *)v643;
    operator delete(v643);
  }
  v579 = (_QWORD *)v646;
  if ((_QWORD)v646)
  {
    do
    {
      v580 = (_QWORD *)*v579;
      operator delete(v579);
      v579 = v580;
    }
    while (v580);
  }
  v581 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v581)
    operator delete(v581);
  v582 = (_QWORD *)v649;
  if ((_QWORD)v649)
  {
    do
    {
      v583 = (_QWORD *)*v582;
      operator delete(v582);
      v582 = v583;
    }
    while (v583);
  }
  v584 = (void *)v648;
  *(_QWORD *)&v648 = 0;
  if (v584)
    operator delete(v584);
  v585 = (_QWORD *)v656;
  if ((_QWORD)v656)
  {
    do
    {
      v586 = (_QWORD *)*v585;
      operator delete(v585);
      v585 = v586;
    }
    while (v586);
  }
  v587 = (void *)v655;
  *(_QWORD *)&v655 = 0;
  if (v587)
    operator delete(v587);
  v412 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  if (!*(_BYTE *)(v46 + 3016))
  {
LABEL_593:
    v414 = 0;
    goto LABEL_899;
  }
LABEL_898:
  v414 = *(_QWORD *)(v46 + 3008);
LABEL_899:
  sub_20F442244(v413, v412, v414);
  if (v50)
    operator delete(v50);
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  return kdebug_trace();
}

void sub_20F3338A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ***a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  void *v55;
  void *v56;

  if (LOBYTE(STACK[0x398]) && SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a39);
  if (a53 < 0)
    operator delete(a48);
  sub_20E863784((uint64_t)&a54);
  sub_20F335D44(a18);
  v55 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v55;
    operator delete(v55);
  }
  v56 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v56;
    operator delete(v56);
  }
  sub_20E8C25A8((uint64_t)&STACK[0x2A0]);
  sub_20E8C25A8((uint64_t)&STACK[0x2D0]);
  sub_20E8C25A8((uint64_t)&STACK[0x350]);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  sub_20E8E69C4((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F333D9C(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char **v9;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  int8x16_t v33;
  float64x2_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  float64x2_t *v42;
  float64x2_t v43;
  float64x2_t v46;
  double v47;
  double v49;
  double v51;
  float64x2_t *v53;
  float64x2_t *v57;
  double v58;
  float64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  double v63;
  float64x2_t v66;
  float64x2_t v68;
  int8x16_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned __int8 v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  _QWORD *v79;
  float64x2_t v80;
  int v81;
  float64x2_t *v83;
  float64x2_t v84;
  float64x2_t v85;
  unint64_t v86;
  unint64_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v101;
  float64x2_t v103;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  float64x2_t v129;
  int64x2_t v130;
  float64x2_t v132;
  unsigned int v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  _QWORD *v139;
  _QWORD *v140;
  void **v141;
  uint64_t v142;
  char v143;
  size_t v144;
  float64x2_t *p_dst;
  uint64_t v146;
  const void **v147;
  uint64_t v148;
  uint64_t v149;
  float64x2_t v150;
  int8x16_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t *v155;
  uint64_t *v156;
  float64x2_t v157;
  float64x2_t **v158;
  int64x2_t *v159;
  int64x2_t v160;
  double v162;
  float64x2_t *v164;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v173;
  double v174;
  int8x16_t v179;
  float64x2_t v180;
  float64x2_t v181;
  int8x16_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t **v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  double v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t *v201;
  double v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  uint64_t v212;
  double v216;
  double v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  int v237;
  unint64_t v238;
  const void *v239;
  uint64_t v240;
  uint64_t v241;
  float64x2_t **v242;
  uint64_t v243;
  size_t v244;
  unsigned __int8 v245;
  unsigned __int8 v246;
  const char *v247;
  size_t v248;
  void **v249;
  uint64_t v250;
  uint64_t v251;
  void **v252;
  NSObject *v253;
  unint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  size_t v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  size_t v261;
  size_t v262;
  _BYTE *v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  _QWORD *v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  void *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  void *v284;
  char *v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  const char *v310;
  std::__shared_weak_count *v311;
  unint64_t *p_shared_owners;
  unint64_t v313;
  uint64_t v314;
  int v315;
  double v316;
  double v317;
  double v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  char *v322;
  void *v323;
  char *v324;
  void (***v325)(char *);
  void (**v326)(char *);
  void **v327;
  int v328;
  int v329;
  size_t v330;
  uint64_t v331;
  uint64_t v332;
  char *__s;
  uint64_t v334;
  char *category;
  char **v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  int8x16_t v343;
  float64x2_t v344;
  float64_t v345;
  int8x16_t v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  float64x2_t v352;
  double v353;
  double v354;
  double v355;
  float64x2_t v356;
  double v357;
  double v358;
  float64_t v359;
  int v361;
  double v362;
  float64_t v363;
  uint64_t *v364;
  float64x2_t **v365;
  double v366;
  double v367;
  uint64_t v368;
  _BYTE v369[96];
  float64x2_t v370;
  __int128 v371;
  float64x2_t v372;
  __int128 v373;
  float64x2_t v374;
  _DWORD v375[74];
  float64x2_t **__dst;
  size_t v377;
  int64_t v378;
  uint64_t v379;
  uint64_t v380;
  __int128 v381;
  int v382;
  uint64_t v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  _BYTE v390[26];
  void *__p[2];
  void *v392[2];
  __int128 v393;
  uint64_t v394;
  __int128 v395;
  uint64_t v396;
  uint64_t v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  uint64_t v405;
  unsigned int v406;
  float64x2_t __x;
  double v408;
  double v409;
  float64x2_t v410;
  float64_t v411;
  double v412;
  float64x2_t v413;
  double v414;
  double v415;
  _BYTE v416[24];
  __int128 v417;
  void *v418[2];
  __int128 v419;
  void *v420[2];
  std::__shared_weak_count *v421;
  double v422;
  char v423;
  void *v424;
  char v425;
  double v426;
  char v427;
  char v428[21];
  _BYTE v429[9];
  char v430;
  void *v431[3];
  void *v432[2];
  std::__shared_weak_count *v433;
  char *v434;
  std::__shared_weak_count *v435;
  __int128 v436;
  double v437;
  void *__src[36];
  char v439;
  __int128 v440;
  uint64_t v441;

  v441 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 != a4)
  {
    v6 = a4;
    v7 = a3;
    v9 = a1;
    v341 = *MEMORY[0x24BEDB7F0];
    v339 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v340 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v338 = MEMORY[0x24BEDB848] + 16;
    __asm { FMOV            V0.2D, #1.0 }
    v359 = *((double *)&_Q0 + 1);
    while (1)
    {
      v14 = (__int128 *)(v7 + 56);
      v13 = *(_QWORD *)(v7 + 56);
      v15 = *(_QWORD *)(a2 + 2824);
      v16 = *(_QWORD *)(a2 + 2832);
      if (v15 != v16)
      {
        while (1)
        {
          v17 = *(_QWORD *)(v15 + 16);
          if (v17)
          {
            if (*(_QWORD *)(v17 + 160) == v13)
              break;
          }
          v15 += 4472;
          if (v15 == v16)
            goto LABEL_5;
        }
      }
      _ZF = v15 == v16 || v15 == 0;
      if (!_ZF)
      {
        v19 = *(_QWORD **)(*(_QWORD *)(v15 + 16) + 424);
        v21 = (char *)v19[5];
        v20 = (char *)v19[6];
        if (v20 != v21)
        {
          v22 = (v20 - v21) >> 4;
          v23 = *(_DWORD *)(v7 + 72);
          while (1)
          {
            v24 = v22 >> 1;
            v25 = &v21[16 * (v22 >> 1)];
            v26 = *(_QWORD *)v25;
            v27 = *(_DWORD *)(*(_QWORD *)v25 + 16);
            _CF = v27 >= v23;
            if (v27 != v23)
              goto LABEL_23;
            if (*(_QWORD *)v26 >= v13)
              break;
LABEL_17:
            v21 = v25 + 16;
            v24 = v22 + ~v24;
LABEL_18:
            v22 = v24;
            if (!v24)
              goto LABEL_26;
          }
          if (*(_QWORD *)v26 != v13)
            goto LABEL_18;
          _CF = *(_DWORD *)(v26 + 8) >= *(_DWORD *)(v7 + 64);
LABEL_23:
          if (_CF)
            goto LABEL_18;
          goto LABEL_17;
        }
LABEL_26:
        if (v21 == v20)
        {
          v30 = (char *)v19[6];
        }
        else
        {
          v29 = *(_QWORD *)v21;
          v30 = (char *)v19[6];
          if (*(_DWORD *)(*(_QWORD *)v21 + 16) == *(_DWORD *)(v7 + 72))
          {
            v30 = (char *)v19[6];
            if (*(_QWORD *)v29 == v13)
            {
              if (*(_DWORD *)(v29 + 8) == *(_DWORD *)(v7 + 64))
                v30 = v21;
              else
                v30 = (char *)v19[6];
            }
          }
        }
        if (v20 != v30)
        {
          v31 = *(uint64_t **)v30;
          v32 = sub_20E9DF85C((_QWORD *)(*v19 + 1784), (uint64_t *)(v7 + 56));
          v35 = v32 + 5;
          if (!v32)
            v35 = 0;
          v365 = (float64x2_t **)v35;
          if (v32)
          {
            v36 = *(_QWORD *)(v7 + 48);
            v37 = *(uint64_t **)(a2 + 2824);
            v38 = *(uint64_t **)(a2 + 2832);
            if (v37 != v38)
            {
              while (1)
              {
                v39 = v37[2];
                if (v39)
                {
                  if (*(_QWORD *)(v39 + 160) == v36)
                    break;
                }
                v37 += 559;
                if (v37 == v38)
                  goto LABEL_5;
              }
            }
            if (v37 != v38 && v37)
              break;
          }
        }
      }
LABEL_5:
      v7 += 80;
      if (v7 == v6)
        return;
    }
    v364 = v31;
    v40 = *(uint64_t ***)v7;
    v41 = *(uint64_t ***)(v7 + 8);
    if (*(uint64_t ***)v7 != v41)
    {
      do
      {
        sub_20F2A69A4(v37[2], v40, (uint64_t *)(*v37 + 440));
        v40 += 3;
      }
      while (v40 != v41);
      v36 = *(_QWORD *)(v7 + 48);
    }
    v406 = -1;
    v399 = 0;
    v396 = 0;
    v398 = 0u;
    v395 = 0u;
    v393 = 0u;
    v394 = 0x3FF0000000000000;
    v397 = 0x3FF0000000000000;
    v400 = 0x3FF0000000000000;
    v401 = 0u;
    v402 = 0u;
    v403 = 0u;
    v404 = 0u;
    v405 = 0;
    v42 = v365[4];
    *(_OWORD *)v392 = 0u;
    *(_OWORD *)__p = 0u;
    v43 = **v365;
    _D2 = (*v365)[2].f64[1];
    _Q3 = *(float64x2_t *)((char *)*v365 + 24);
    v33.i64[0] = *(_QWORD *)&(*v365)[4].f64[0];
    v46 = (*v365)[3];
    v47 = v42[1].f64[0];
    _Q7 = *v42;
    v49 = v42[2].f64[1];
    _Q17 = *(float64x2_t *)((char *)v42 + 24);
    v51 = v42[4].f64[0];
    _Q19 = v42[3];
    v53 = v365[6];
    v34.f64[0] = v53[1].f64[0];
    _Q21 = *v53;
    _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, v53->f64[0]), _Q3, *v53, 1), v46, v34.f64[0]);
    __asm { FMLA            D23, D2, V21.D[1] }
    v34.f64[0] = _D23 + *(double *)v33.i64 * v34.f64[0];
    v57 = v365[2];
    _Q21.f64[0] = v57[1].f64[0];
    *(_QWORD *)&v58 = *(_OWORD *)&vaddq_f64(v34, _Q21);
    v59 = vaddq_f64(_Q22, *v57);
    v60 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, _Q7.f64[0]), _Q3, _Q7, 1), v46, v47);
    __asm { FMLA            D22, D2, V7.D[1] }
    _Q7.f64[0] = _Q22.f64[0] + *(double *)v33.i64 * v47;
    v61 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, _Q17.f64[0]), _Q3, _Q17, 1), v46, v49);
    __asm { FMLA            D6, D2, V17.D[1] }
    v63 = _D6 + *(double *)v33.i64 * v49;
    _Q16 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, _Q19.f64[0]), _Q3, _Q19, 1), v46, v51);
    __asm { FMLA            D0, D2, V19.D[1] }
    *(double *)v33.i64 = _D0 + *(double *)v33.i64 * v51;
    v66 = (float64x2_t)vzip1q_s64(v60, v61);
    _Q2.f64[0] = _Q7.f64[0];
    _Q2.f64[1] = v63;
    v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, v59.f64[0]), (float64x2_t)vzip2q_s64(v60, v61), v59, 1), _Q2, v58);
    _Q3.f64[0] = v59.f64[1];
    __asm { FMLA            D2, D3, V16.D[1] }
    _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)v33.i64, v58);
    v69 = (int8x16_t)vnegq_f64(v68);
    *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vnegq_f64(_Q2);
    LOWORD(v380) = 0;
    HIDWORD(v380) = 0;
    v384 = 0u;
    v385 = 0u;
    v386 = 0u;
    v387 = 0u;
    v388 = 0u;
    v389 = 0u;
    memset(v390, 0, sizeof(v390));
    v383 = v36;
    v381 = *v14;
    v382 = *(_DWORD *)(v7 + 72);
    v70 = v37[23];
    v71 = *(_QWORD *)(v37[2] + 424);
    v72 = v364;
    v354 = v63;
    v356 = (float64x2_t)v60;
    *(int64x2_t *)v369 = v60;
    v358 = _Q7.f64[0];
    *(float64_t *)&v369[16] = _Q7.f64[0];
    *(_QWORD *)&_Q2.f64[0] = v69.i64[0];
    _Q2.f64[1] = v66.f64[1];
    *(float64x2_t *)&v369[24] = _Q2;
    v350 = _Q3.f64[0];
    v352 = (float64x2_t)v61;
    *(int64x2_t *)&v369[40] = vzip2q_s64(v61, vdupq_lane_s64(*(uint64_t *)&v63, 0));
    v346 = v69;
    v348 = *(double *)v33.i64;
    *(int8x16_t *)&v369[56] = vextq_s8(v69, _Q16, 8uLL);
    v344 = (float64x2_t)_Q16;
    *(int8x16_t *)&v369[72] = vextq_s8(_Q16, v33, 8uLL);
    *(float64_t *)&v369[88] = _Q3.f64[0];
    v73 = *(_BYTE *)(a2 + 1084);
    LOBYTE(__src[0]) = 0;
    LOBYTE(__src[8]) = 0;
    LOBYTE(v329) = 0;
    LOBYTE(v328) = 0;
    LOWORD(v327) = v73;
    v361 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, _BYTE *, void **, uint64_t, void **, int, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int, float64x2_t *, unsigned int *, void **, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 40))(v70, v71, v7, v364 + 9, v364 + 72, v364 + 77, v364 + 82, v369, v327, a5, __src, v328, 0, 0, 0, 0, 0, 0, v329,
             &__x,
             &v406,
             __p,
             &v380,
             1,
             0,
             0);
    if (LOBYTE(__src[8]))
    {
      v74 = __src[7];
      __src[7] = 0;
      if (v74)
      {
        v75 = v74[23];
        v74[23] = 0;
        if (v75)
        {
          v76 = *(void **)(v75 + 32);
          if (v76)
          {
            *(_QWORD *)(v75 + 40) = v76;
            operator delete(v76);
          }
          MEMORY[0x212BC6398](v75, 0x1010C409BE32CFALL);
        }
        v77 = (void *)v74[9];
        if (v77)
        {
          v74[10] = v77;
          operator delete(v77);
        }
        v78 = (void *)v74[6];
        v72 = v364;
        if (v78)
        {
          v74[7] = v78;
          operator delete(v78);
        }
        MEMORY[0x212BC6398](v74, 0x10B0C40D335D76ALL);
      }
      v79 = __src[6];
      __src[6] = 0;
      if (v79)
        sub_20F04BCC8((uint64_t)&__src[6], v79);
    }
    sub_20F31DCD4(&v379);
    if (**(int **)(v379 + 56) > 2
      || (v81 = *(unsigned __int8 *)(v379 + 72),
          v342 = sub_20E8C31DC(v379, "OSLogSurrogateAppender", 1, 0),
          (v337 = v81) == 0)
      && !v342)
    {
      if (v361)
        goto LABEL_280;
      goto LABEL_64;
    }
    v336 = v9;
    sub_20E863438((uint64_t)v369);
    sub_20E86A980(&v369[16], (uint64_t)"ALC relocalization_ret: ", 24);
    v139 = (_QWORD *)std::ostream::operator<<();
    v140 = sub_20E86A980(v139, (uint64_t)"\n", 1);
    sub_20F463158((uint64_t)&v380, __src);
    if (SHIBYTE(__src[2]) >= 0)
      v141 = __src;
    else
      v141 = (void **)__src[0];
    if (SHIBYTE(__src[2]) >= 0)
      v142 = HIBYTE(__src[2]);
    else
      v142 = (uint64_t)__src[1];
    sub_20E86A980(v140, (uint64_t)v141, v142);
    if (SHIBYTE(__src[2]) < 0)
    {
      operator delete(__src[0]);
      v143 = BYTE8(v371);
      v334 = a5;
      if ((BYTE8(v371) & 0x10) == 0)
        goto LABEL_78;
    }
    else
    {
      v143 = BYTE8(v371);
      v334 = a5;
      if ((BYTE8(v371) & 0x10) == 0)
      {
LABEL_78:
        if ((v143 & 8) == 0)
        {
          v144 = 0;
          HIBYTE(v378) = 0;
          p_dst = (float64x2_t *)&__dst;
          goto LABEL_123;
        }
        v146 = *(_QWORD *)&v369[56];
        v147 = (const void **)&v369[40];
LABEL_115:
        v239 = *v147;
        v144 = v146 - (_QWORD)*v147;
        if (v144 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v144 >= 0x17)
        {
          v240 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v144 | 7) != 0x17)
            v240 = v144 | 7;
          v241 = v240 + 1;
          p_dst = (float64x2_t *)operator new(v240 + 1);
          v378 = v241 | 0x8000000000000000;
          __dst = (float64x2_t **)p_dst;
          v377 = v144;
        }
        else
        {
          HIBYTE(v378) = v146 - *(_BYTE *)v147;
          p_dst = (float64x2_t *)&__dst;
          if (!v144)
          {
LABEL_123:
            *((_BYTE *)p_dst->f64 + v144) = 0;
            *(_QWORD *)&v417 = &v379;
            *((std::chrono::steady_clock::time_point *)&v417 + 1) = std::chrono::steady_clock::now();
            v418[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
            LODWORD(v418[1]) = 2;
            *(_QWORD *)&v419 = "unknown file";
            DWORD2(v419) = 4038;
            v420[0] = "unknown function";
            v420[1] = 0;
            v421 = 0;
            v242 = (float64x2_t **)&__dst;
            if (v378 < 0)
              v242 = __dst;
            __s = (char *)v242;
            v243 = *(_QWORD *)v417;
            if (*(char *)(*(_QWORD *)v417 + 39) < 0)
            {
              v244 = *(_QWORD *)(v243 + 24);
              category = *(char **)(v243 + 16);
              v331 = *(_QWORD *)v417 + 16;
              v332 = *(_QWORD *)v417;
              v246 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v246 & 1) != 0)
                goto LABEL_129;
            }
            else
            {
              v244 = *(unsigned __int8 *)(*(_QWORD *)v417 + 39);
              category = (char *)(*(_QWORD *)v417 + 16);
              v331 = (uint64_t)category;
              v332 = *(_QWORD *)v417;
              v245 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v245 & 1) != 0)
                goto LABEL_129;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v432);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v432);
              if ((_BYTE)v434 && SHIBYTE(v433) < 0)
                operator delete(v432[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_129:
            if (byte_254A4A4F8[23] >= 0)
              v247 = byte_254A4A4F8;
            else
              v247 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v248 = byte_254A4A4F8[23];
            else
              v248 = *(_QWORD *)&byte_254A4A4F8[8];
            __src[0] = os_log_create(v247, category);
            if (v248 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v248 >= 0x17)
            {
              v330 = v244;
              v250 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v248 | 7) != 0x17)
                v250 = v248 | 7;
              v251 = v250 + 1;
              v249 = (void **)operator new(v250 + 1);
              __src[3] = (void *)(v251 | 0x8000000000000000);
              __src[1] = v249;
              __src[2] = (void *)v248;
              v244 = v330;
            }
            else
            {
              HIBYTE(__src[3]) = v248;
              v249 = &__src[1];
              if (!v248)
              {
LABEL_143:
                *((_BYTE *)v249 + v248) = 0;
                LOBYTE(__src[4]) = 1;
                if (v244 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v9 = v336;
                a5 = v334;
                if (v244 >= 0x17)
                {
                  v255 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v244 | 7) != 0x17)
                    v255 = v244 | 7;
                  v256 = (void *)v244;
                  v257 = v255 + 1;
                  v252 = (void **)operator new(v255 + 1);
                  __src[7] = (void *)(v257 | 0x8000000000000000);
                  __src[5] = v252;
                  __src[6] = v256;
                  v244 = (size_t)v256;
                  a5 = v334;
                  v9 = v336;
                }
                else
                {
                  HIBYTE(__src[7]) = v244;
                  v252 = &__src[5];
                  if (!v244)
                  {
                    LOBYTE(__src[5]) = 0;
                    LOBYTE(__src[8]) = 1;
                    v253 = __src[0];
                    if ((SHIBYTE(__src[7]) & 0x80000000) == 0)
                      goto LABEL_147;
                    goto LABEL_153;
                  }
                }
                memmove(v252, category, v244);
                *((_BYTE *)v252 + v244) = 0;
                LOBYTE(__src[8]) = 1;
                v253 = __src[0];
                if ((SHIBYTE(__src[7]) & 0x80000000) == 0)
                {
LABEL_147:
                  v254 = v342;
                  if (!LOBYTE(__src[4]))
                    goto LABEL_156;
                  goto LABEL_154;
                }
LABEL_153:
                operator delete(__src[5]);
                v254 = v342;
                if (!LOBYTE(__src[4]))
                  goto LABEL_156;
LABEL_154:
                if (SHIBYTE(__src[3]) < 0)
                  operator delete(__src[1]);
LABEL_156:
                if (__src[0])
                  os_release(__src[0]);
                if (!v254 || !*(_QWORD *)(v254 + 24))
                {
                  os_log_type_enabled(v253, OS_LOG_TYPE_DEBUG);
                  LODWORD(__src[0]) = 136315138;
                  *(void **)((char *)__src + 4) = __s;
                  v327 = __src;
                  v264 = (void *)_os_log_send_and_compose_impl();
                  v72 = v364;
                  if (v264)
                    free(v264);
LABEL_229:
                  if (v337)
                  {
                    v310 = (const char *)&__dst;
                    if (v378 < 0)
                      v310 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&v417, "%s", v310);
                    sub_20E863570((uint64_t)&v417);
                  }
                  sub_20E863570((uint64_t)&v417);
                  v311 = v421;
                  if (v421)
                  {
                    p_shared_owners = (unint64_t *)&v421->__shared_owners_;
                    do
                      v313 = __ldaxr(p_shared_owners);
                    while (__stlxr(v313 - 1, p_shared_owners));
                    if (!v313)
                    {
                      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                      std::__shared_weak_count::__release_weak(v311);
                    }
                  }
                  if (SHIBYTE(v378) < 0)
                    operator delete(__dst);
                  *(_QWORD *)v369 = v341;
                  *(_QWORD *)&v369[*(_QWORD *)(v341 - 24)] = v340;
                  *(_QWORD *)&v369[16] = v339;
                  *(_QWORD *)&v369[24] = v338;
                  if (SHIBYTE(v370.f64[1]) < 0)
                    operator delete(*(void **)&v369[88]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v372);
                  if (v361)
                    goto LABEL_280;
LABEL_64:
                  _Q0.f64[0] = v409;
                  _Q0.f64[1] = v412;
                  v83 = v365[4];
                  v84 = v83[3];
                  v85 = *v83;
                  v86 = *(_QWORD *)&v83[1].f64[0];
                  v87 = *(_QWORD *)&v83[2].f64[1];
                  v88 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v83[1], 1), (int64x2_t)v83[2]);
                  v80.f64[0] = v83[4].f64[0];
                  v89 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v83, v356.f64[0]), v88, v352.f64[0]), v84, v344.f64[0]);
                  v90 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v86, v356.f64[0]), (float64x2_t)v87, v352.f64[0]), v80, v344.f64[0]);
                  v91 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*v83, v356, 1), v88, v352, 1), v84, v344, 1);
                  v92 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v86, v356, 1), (float64x2_t)v87, v352, 1), v80, v344, 1);
                  v93 = vmlaq_n_f64(vmulq_n_f64(*v83, v358), v88, v354);
                  *(_QWORD *)&v94 = vextq_s8(v346, v346, 8uLL).u64[0];
                  v95 = v365[6];
                  v96 = vmlaq_n_f64(v93, v84, v348);
                  v97 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v86, v358), (float64x2_t)v87, v354), v80, v348);
                  v98 = vmlaq_f64(v89, (float64x2_t)0, *v95);
                  v99 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v85, *(double *)v346.i64), v88, v94), v84, v350);
                  _D29 = v411;
                  v101 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v86, *(double *)v346.i64), (float64x2_t)v87, v94);
                  _D28 = v414;
                  v103 = vmlaq_n_f64(v101, v80, v350);
                  _D30 = v415;
                  v105 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(__x, vnegq_f64(_Q0).f64[0]), v410, _Q0, 1), v413, v415, 0);
                  v106.f64[1] = v359;
                  v106.f64[0] = v95[1].f64[0];
                  v107 = vmlaq_f64(v90, (float64x2_t)0, v106);
                  _Q7 = vmlaq_f64(v91, (float64x2_t)0, *v95);
                  v109 = vmlaq_f64(v92, (float64x2_t)0, v106);
                  v110 = vmlaq_n_f64(vmulq_n_f64(v98, __x.f64[0]), _Q7, __x.f64[1]);
                  v111 = vmlaq_n_f64(vmulq_n_f64(v107, __x.f64[0]), v109, __x.f64[1]);
                  v112 = vmlaq_n_f64(vmulq_n_f64(v98, v410.f64[0]), _Q7, v410.f64[1]);
                  v113 = vmlaq_n_f64(vmulq_n_f64(v107, v410.f64[0]), v109, v410.f64[1]);
                  v114 = vmlaq_n_f64(vmulq_n_f64(v98, v413.f64[0]), _Q7, v413.f64[1]);
                  v115 = vmlaq_n_f64(vmulq_n_f64(v107, v413.f64[0]), v109, v413.f64[1]);
                  v116 = vmlaq_laneq_f64(vmulq_n_f64(v98, v105.f64[0]), _Q7, v105, 1);
                  v117 = vmlaq_laneq_f64(vmulq_n_f64(v107, v105.f64[0]), v109, v105, 1);
                  v105.f64[0] = v408;
                  __asm { FMLS            D1, D29, V0.D[1] }
                  v119 = vmlaq_f64(v96, (float64x2_t)0, *v95);
                  v120 = vmlaq_f64(v97, (float64x2_t)0, v106);
                  v105.f64[1] = v411;
                  __asm { FMLS            D1, D28, V30.D[0] }
                  v122 = vmlaq_n_f64(v116, v119, _D1);
                  v123 = vmlaq_n_f64(v117, v120, _D1);
                  v124 = vaddq_f64(*v95, v99);
                  v125 = vaddq_f64(v106, v103);
                  v126 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v110, v119, v408), (float64x2_t)0, v124);
                  v127 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(v112, v119, v105, 1), (float64x2_t)0, v124);
                  _Q5 = vmlaq_f64(vmlaq_n_f64(v114, v119, v414), (float64x2_t)0, v124);
                  v129 = vaddq_f64(v124, v122);
                  v130 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v111, v120, v408), (float64x2_t)0, v125);
                  _Q6 = vmlaq_f64(vmlaq_laneq_f64(v113, v120, v105, 1), (float64x2_t)0, v125);
                  *(_QWORD *)&v115.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(v115, v120, v414), (float64x2_t)0, v125);
                  *(_QWORD *)&v125.f64[0] = *(_OWORD *)&vaddq_f64(v125, v123);
                  v132 = (float64x2_t)vzip1q_s64(v130, (int64x2_t)_Q6);
                  _Q7.f64[0] = v129.f64[1];
                  __asm { FMLA            D6, D7, V5.D[1] }
                  *(float64_t *)&v369[40] = _Q5.f64[1];
                  *(float64_t *)&v369[16] = _Q5.f64[0];
                  *(int64x2_t *)v369 = vzip1q_s64(v126, v127);
                  *(int64x2_t *)&v369[24] = vzip2q_s64(v126, v127);
                  *(float64_t *)&v369[64] = v115.f64[0];
                  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v125.f64[0], v115.f64[0]);
                  *(float64x2_t *)&v369[48] = v132;
                  *(float64x2_t *)&v369[72] = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v369, v129.f64[0]), *(float64x2_t *)&v369[24], v129, 1), v132, v125.f64[0]));
                  *(_QWORD *)&v369[88] = *(_OWORD *)&vnegq_f64(_Q6);
                  *(_QWORD *)&v417 = v369;
                  DWORD2(v417) = 0;
                  v418[0] = &v369[72];
                  LODWORD(v418[1]) = 0;
                  sub_20F3833F8(__p, (uint64_t *)&v417, (uint64_t *)v365 + 4, v72[3], *(_DWORD *)(a2 + 72), (uint64_t)__src);
                  if (v439)
                  {
                    v133 = v406;
                    if (*(_BYTE *)(a2 + 2622))
                    {
                      v134 = *(double *)(*(_QWORD *)(v7 + 24) + 8 * v406);
                      v135 = v412;
                      v136 = v415;
                      if (v134 >= 0.0)
                      {
                        if (v409 * v409 + v412 * v412 + v415 * v415 > v134
                                                                     * *(double *)(a2 + 200)
                                                                     * (v134
                                                                      * *(double *)(a2 + 200)))
                          goto LABEL_280;
                        v362 = v412;
                        v366 = v415;
                        v137 = *(double *)(a2 + 872);
                        if (*(_BYTE *)(a2 + 1084))
                        {
                          v138 = fabs(atan2(-__x.f64[1], __x.f64[0]));
                        }
                        else
                        {
                          v317 = (v414 + __x.f64[0] + v410.f64[1] + -1.0) * 0.5;
                          if (v317 > 1.0)
                            v317 = 1.0;
                          if (v317 < -1.0)
                            v317 = -1.0;
                          v138 = acos(v317);
                        }
                        v136 = v366;
                        v135 = v362;
                        if (v138 * 57.2957795 > v137)
                          goto LABEL_280;
                      }
                    }
                    else
                    {
                      v135 = v412;
                      v136 = v415;
                    }
                    v363 = v135;
                    v367 = v136;
                    v148 = *(_QWORD *)(*(_QWORD *)v7 + 24 * v133);
                    v149 = *(_QWORD *)(v148 + 16);
                    *(_OWORD *)v416 = *(_OWORD *)v148;
                    *(_QWORD *)&v416[16] = v149;
                    v353 = __x.f64[1];
                    v355 = __x.f64[0];
                    v347 = v408;
                    v345 = v409;
                    v351 = v410.f64[1];
                    v349 = v411;
                    v150 = v413;
                    v357 = v414;
                    v151.i64[0] = *(_QWORD *)&__x.f64[0];
                    v152 = *(_QWORD *)(v15 + 16);
                    v153 = v37[2];
                    v371 = xmmword_2103B4830;
                    v372 = (float64x2_t)unk_2103B4840;
                    v373 = xmmword_2103B4850;
                    v374 = (float64x2_t)unk_2103B4860;
                    *(float64x2_t *)&v369[48] = xmmword_2103B47F0[0];
                    *(_OWORD *)&v369[64] = unk_2103B4800;
                    *(_OWORD *)&v369[80] = xmmword_2103B4810;
                    v370 = (float64x2_t)unk_2103B4820;
                    memset(v375, 0, 293);
                    *(_DWORD *)&v369[44] = -1;
                    *(_QWORD *)&v154 = -1;
                    *((_QWORD *)&v154 + 1) = -1;
                    *(_OWORD *)&v369[12] = v154;
                    *(_OWORD *)&v369[28] = v154;
                    *(_QWORD *)v369 = *(_QWORD *)v14;
                    *(_DWORD *)&v369[8] = *(_DWORD *)(v7 + 64);
                    *(_QWORD *)&v369[24] = *(_QWORD *)v416;
                    *(_DWORD *)&v369[32] = *(_DWORD *)&v416[8];
                    v151.i64[1] = *(_QWORD *)&v410.f64[0];
                    v343 = v151;
                    v155 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(v152 + 424) + 1784), (uint64_t *)(v7 + 56));
                    if (!v155
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 743, (uint64_t)"query_proj_ref", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v156 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(v153 + 424) + 1784), (uint64_t *)v416)) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 747, (uint64_t)"ref_proj_ref", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    *(_QWORD *)&v157.f64[0] = vextq_s8(v343, v343, 8uLL).u64[0];
                    if (v155)
                      v158 = (float64x2_t **)(v155 + 5);
                    else
                      v158 = 0;
                    v159 = (int64x2_t *)*v158;
                    v160 = *(int64x2_t *)*v158;
                    _Q4 = *(int64x2_t *)((char *)&(*v158)[1] + 8);
                    v162 = (*v158)[4].f64[0];
                    _Q5 = (*v158)[3];
                    v164 = v158[2];
                    _Q19.f64[0] = v345;
                    _Q19.f64[1] = v363;
                    v166.f64[0] = v355;
                    v166.f64[1] = v353;
                    v167 = (float64x2_t)*(unint64_t *)&_Q5.f64[0];
                    v168 = (float64x2_t)vzip1q_s64(v160, _Q4);
                    v169 = vmulq_n_f64(v168, v157.f64[0]);
                    v170 = vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q5.f64[0], v157.f64[0]);
                    _D31 = v349;
                    v157.f64[1] = v351;
                    _D20 = v367;
                    v173 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v166, vnegq_f64(_Q19).f64[0]), v157, _Q19, 1), v150, v367, 0);
                    v174 = v164[1].f64[0];
                    __asm { FMLS            D16, D31, V19.D[1] }
                    _D27 = v357;
                    __asm { FMLS            D16, D27, V20.D[0] }
                    v181 = (float64x2_t)vzip2q_s64(v160, _Q4);
                    _Q3 = vmulq_f64(_Q5, *v164);
                    _Q4.i64[0] = *(_QWORD *)&v164->f64[1];
                    __asm { FMLA            D3, D4, V5.D[1] }
                    v179 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q5, 1);
                    v180 = vmlaq_laneq_f64(vmulq_n_f64(v168, v164->f64[0]), v181, *v164, 1);
                    _Q3.f64[0] = _Q3.f64[0] + v162 * v174;
                    v182 = vextq_s8((int8x16_t)v181, v179, 8uLL);
                    *(_QWORD *)&v181.f64[1] = v182.i64[0];
                    v183 = (float64x2_t)*(unint64_t *)&v162;
                    v184.f64[1] = v359;
                    *(_QWORD *)&v184.f64[0] = *(_OWORD *)&vnegq_f64(_Q3);
                    *(_QWORD *)&v185.f64[0] = v159[1].i64[0];
                    *(_QWORD *)&v185.f64[1] = v159[2].i64[1];
                    v186 = vmlaq_n_f64(v180, v185, v174);
                    v187 = (float64x2_t **)(v156 + 5);
                    if (!v156)
                      v187 = 0;
                    v188 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, v355), v181, v353), v185, v347), (float64x2_t)0, v186);
                    v189 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v167, v355), (float64x2_t)v182.u64[1], v353), (float64x2_t)*(unint64_t *)&v162, v347), (float64x2_t)0, v184);
                    v190 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v169, v181, v351), v185, v349), (float64x2_t)0, v186);
                    v191 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v170, (float64x2_t)v182.u64[1], v351), v183, v349), (float64x2_t)0, v184);
                    v192 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, v150.f64[0]), v181, v150.f64[1]), v185, v357), (float64x2_t)0, v186);
                    v193 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v167, v150.f64[0]), (float64x2_t)v182.u64[1], v150.f64[1]), v183, v357), (float64x2_t)0, v184);
                    v194 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v173.f64[0]), v181, v173, 1), v185, _D16), v186);
                    v195 = vaddq_f64(v184, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v167, v173.f64[0]), (float64x2_t)v182.u64[1], v173, 1), v183, _D16));
                    v196 = (*v187)[4].f64[0];
                    v198 = (*v187)[2];
                    v197 = (*v187)[3];
                    v200 = **v187;
                    v199 = (*v187)[1];
                    v201 = v187[2];
                    v202 = v201[1].f64[0];
                    v203 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v200.f64[0]), v190, v200, 1), v192, v199.f64[0]), (float64x2_t)0, v194);
                    v204 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189, v200.f64[0]), v191, v200, 1), v193, v199.f64[0]), (float64x2_t)0, v195);
                    v205 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v188, v199, 1), v190, v198.f64[0]), v192, v198, 1), (float64x2_t)0, v194);
                    v206 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v189, v199, 1), v191, v198.f64[0]), v193, v198, 1), (float64x2_t)0, v195);
                    v207 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v197.f64[0]), v190, v197, 1), v192, v196), (float64x2_t)0, v194);
                    v208 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189, v197.f64[0]), v191, v197, 1), v193, v196), (float64x2_t)0, v195);
                    v209 = vaddq_f64(v194, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v201->f64[0]), v190, *v201, 1), v192, v202));
                    v210 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189, v201->f64[0]), v191, *v201, 1), v193, v202);
                    *(float64x2_t *)&v369[48] = v203;
                    *(float64x2_t *)&v369[64] = v204;
                    *(float64x2_t *)&v369[80] = v205;
                    v370 = v206;
                    v371 = (__int128)v207;
                    v372 = v208;
                    v373 = (__int128)v209;
                    v374 = vaddq_f64(v195, v210);
                    v375[72] = 3;
                    memcpy(v375, __src, 0x120uLL);
                    sub_20F328974((float64x2_t *)v432, a2, (uint64_t *)v369);
                    v211 = v437;
                    v368 = *((_QWORD *)&v436 + 1);
                    v419 = 0u;
                    *(_OWORD *)v418 = 0u;
                    v417 = 0u;
                    __dst = (float64x2_t **)v432;
                    v377 = 0;
                    *(_QWORD *)&v440 = &v417;
                    *((_QWORD *)&v440 + 1) = 0;
                    sub_20E95B988((float64x2_t **)&__dst, (double **)&v440);
                    if (*(_BYTE *)(a2 + 3016))
                      v212 = *(_QWORD *)(a2 + 3008);
                    else
                      v212 = 0;
                    _V2.D[1] = v368;
                    _D1 = v368;
                    __asm { FMLA            D0, D1, V2.D[1] }
                    v216 = sqrt(_D0 + v211 * v211);
                    _V1.D[1] = *((_QWORD *)&v417 + 1);
                    _D3 = *((_QWORD *)&v417 + 1);
                    __asm { FMLA            D2, D3, V1.D[1] }
                    v220 = sqrt(_D2 + *(double *)v418 * *(double *)v418) * 180.0 / 3.14159265;
                    sub_20F444604(v212, v216, v220);
                    if (!*(_BYTE *)(a2 + 3016))
                      goto LABEL_279;
                    v221 = *(_QWORD *)(a2 + 3008);
                    if (!*(_BYTE *)(v221 + 80))
                      goto LABEL_279;
                    v417 = 0uLL;
                    v222 = (char *)operator new(0x20uLL);
                    strcpy(v222, "loop_closure_failure_cause");
                    LOBYTE(v418[0]) = 0;
                    BYTE8(v419) = 0;
                    sub_20E860C04(v420, v222, 0x1AuLL);
                    operator delete(v222);
                    v223 = (char *)operator new(0x30uLL);
                    strcpy(v223, "accumulated_distance_since_last_loop_closure");
                    LOBYTE(v422) = 0;
                    v423 = 0;
                    sub_20E860C04(&v424, v223, 0x2CuLL);
                    operator delete(v223);
                    LOBYTE(v426) = 0;
                    v427 = 0;
                    strcpy(v428, "compensated_distance");
                    *(_WORD *)v429 = 20;
                    v430 = 0;
                    strcpy((char *)v431, "compensated_rotation");
                    HIBYTE(v431[2]) = 20;
                    v225 = v364[7];
                    v224 = v364[8];
                    if (v224)
                    {
                      v226 = (unint64_t *)(v224 + 8);
                      do
                        v227 = __ldxr(v226);
                      while (__stxr(v227 + 1, v226));
                    }
                    v228 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
                    *(_QWORD *)&v417 = v225;
                    *((_QWORD *)&v417 + 1) = v224;
                    if (v228)
                    {
                      v229 = (unint64_t *)&v228->__shared_owners_;
                      do
                        v230 = __ldaxr(v229);
                      while (__stlxr(v230 - 1, v229));
                      if (!v230)
                      {
                        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                        std::__shared_weak_count::__release_weak(v228);
                      }
                    }
                    v426 = v216;
                    v427 = 1;
                    *(double *)&v429[1] = v220;
                    v430 = 1;
                    v231 = v364[7];
                    if (*(_BYTE *)(v231 + 680))
                    {
                      v232 = *(_QWORD *)(v221 + 8);
                      v233 = *(std::__shared_weak_count **)(v221 + 16);
                      if (v233)
                      {
                        v234 = a5;
                        v235 = (unint64_t *)&v233->__shared_owners_;
                        do
                          v236 = __ldxr(v235);
                        while (__stxr(v236 + 1, v235));
                        v237 = atomic_load((unint64_t *)(v232 + 128));
                        do
                          v238 = __ldaxr(v235);
                        while (__stlxr(v238 - 1, v235));
                        if (!v238)
                        {
                          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                          std::__shared_weak_count::__release_weak(v233);
                        }
                      }
                      else
                      {
                        v234 = a5;
                        v237 = atomic_load((unint64_t *)(v232 + 128));
                      }
                      if (!*(_BYTE *)(v231 + 680))
                        sub_20E866B34();
                      v314 = *v364;
                      v315 = *((_DWORD *)v364 + 2);
                      v316 = *(double *)(v231 + 672);
                      if (*(_BYTE *)(a2 + 3064) && *(_DWORD *)(a2 + 3024) == v237)
                      {
                        if (v314 == *(_QWORD *)(a2 + 3032) && v315 == *(_DWORD *)(a2 + 3040))
                        {
                          v316 = *(double *)(a2 + 3056);
                        }
                        else
                        {
                          v318 = *(double *)(a2 + 3048);
                          *(double *)(a2 + 3048) = v316;
                          v316 = v316 - v318;
                          *(_QWORD *)(a2 + 3032) = v314;
                          *(_DWORD *)(a2 + 3040) = v315;
                          *(double *)(a2 + 3056) = v316;
                        }
                        a5 = v234;
                      }
                      else
                      {
                        *(_DWORD *)(a2 + 3024) = v237;
                        *(_QWORD *)(a2 + 3032) = v314;
                        *(_DWORD *)(a2 + 3040) = v315;
                        *(double *)(a2 + 3048) = v316;
                        *(double *)(a2 + 3056) = v316;
                        *(_BYTE *)(a2 + 3064) = 1;
                        a5 = v234;
                      }
                      v422 = v316;
                      v423 = 1;
                    }
                    sub_20FDC3E50((uint64_t *)(v221 + 8), (uint64_t)&v417);
                    if (SHIBYTE(v431[2]) < 0)
                    {
                      operator delete(v431[0]);
                      if ((v429[0] & 0x80000000) == 0)
                      {
LABEL_264:
                        if ((v425 & 0x80000000) == 0)
                          goto LABEL_265;
                        goto LABEL_270;
                      }
                    }
                    else if ((v429[0] & 0x80000000) == 0)
                    {
                      goto LABEL_264;
                    }
                    operator delete(*(void **)v428);
                    if ((v425 & 0x80000000) == 0)
                    {
LABEL_265:
                      if ((SHIBYTE(v421) & 0x80000000) == 0)
                        goto LABEL_266;
                      goto LABEL_271;
                    }
LABEL_270:
                    operator delete(v424);
                    if ((SHIBYTE(v421) & 0x80000000) == 0)
                    {
LABEL_266:
                      if (!BYTE8(v419))
                        goto LABEL_274;
                      goto LABEL_272;
                    }
LABEL_271:
                    operator delete(v420[0]);
                    if (!BYTE8(v419))
                    {
LABEL_274:
                      v319 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
                      if (*((_QWORD *)&v417 + 1))
                      {
                        v320 = (unint64_t *)(*((_QWORD *)&v417 + 1) + 8);
                        do
                          v321 = __ldaxr(v320);
                        while (__stlxr(v321 - 1, v320));
                        if (!v321)
                        {
                          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                          std::__shared_weak_count::__release_weak(v319);
                        }
                      }
LABEL_279:
                      sub_20F235770(v9, (__int128 *)v369);
                      goto LABEL_280;
                    }
LABEL_272:
                    if (SBYTE7(v419) < 0)
                      operator delete(v418[0]);
                    goto LABEL_274;
                  }
LABEL_280:
                  sub_20E991548(&v380);
                  if ((_QWORD)v404)
                  {
                    *((_QWORD *)&v404 + 1) = v404;
                    operator delete((void *)v404);
                  }
                  if (*((_QWORD *)&v402 + 1))
                  {
                    *(_QWORD *)&v403 = *((_QWORD *)&v402 + 1);
                    operator delete(*((void **)&v402 + 1));
                  }
                  if (v392[1])
                  {
                    *(void **)&v393 = v392[1];
                    operator delete(v392[1]);
                  }
                  v322 = (char *)__p[0];
                  if (__p[0])
                  {
                    v323 = __p[0];
                    if (__p[1] != __p[0])
                    {
                      v324 = (char *)__p[1] - 40;
                      v325 = (void (***)(char *))((char *)__p[1] - 40);
                      do
                      {
                        v326 = *v325;
                        v325 -= 5;
                        (*v326)(v324);
                        _ZF = v324 == v322;
                        v324 = (char *)v325;
                      }
                      while (!_ZF);
                      v323 = __p[0];
                    }
                    __p[1] = v322;
                    operator delete(v323);
                  }
                  v6 = a4;
                  goto LABEL_5;
                }
                v258 = _os_log_pack_size();
                v259 = (std::__shared_weak_count_vtbl *)operator new(v258, (std::align_val_t)8uLL);
                v260 = (std::__shared_weak_count *)operator new();
                v260->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v260->__shared_owners_ = 0;
                v260->__shared_weak_owners_ = 0;
                v260[1].__vftable = v259;
                v432[0] = v259;
                v432[1] = v259;
                v433 = v260;
                v434 = 0;
                v435 = 0;
                v261 = strlen(__s);
                if (v261 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v262 = v261;
                if (v261 >= 0x17)
                {
                  v265 = (v261 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v261 | 7) != 0x17)
                    v265 = v261 | 7;
                  v266 = v265 + 1;
                  v263 = operator new(v265 + 1);
                  *(_QWORD *)&v416[16] = v266 | 0x8000000000000000;
                  *(_QWORD *)v416 = v263;
                  *(_QWORD *)&v416[8] = v262;
                }
                else
                {
                  v416[23] = v261;
                  v263 = v416;
                  if (!v261)
                  {
LABEL_170:
                    v263[v262] = 0;
                    *(_QWORD *)&v440 = *(_QWORD *)&v416[8];
                    v267 = *(_QWORD *)v416;
                    *(_QWORD *)((char *)&v440 + 7) = *(_QWORD *)&v416[15];
                    v268 = v416[23];
                    v269 = operator new(0x38uLL);
                    v269[1] = 0;
                    v269[2] = 0;
                    v269[3] = off_24C9ABC20;
                    *v269 = &off_24C9ABBD0;
                    v270 = v440;
                    v269[4] = v267;
                    v269[5] = v270;
                    *(_QWORD *)((char *)v269 + 47) = *(_QWORD *)((char *)&v440 + 7);
                    *((_BYTE *)v269 + 55) = v268;
                    *(_QWORD *)&v440 = 0;
                    *(_QWORD *)((char *)&v440 + 7) = 0;
                    v271 = v435;
                    v434 = (char *)(v269 + 3);
                    v435 = (std::__shared_weak_count *)v269;
                    a5 = v334;
                    if (v271)
                    {
                      v272 = (unint64_t *)&v271->__shared_owners_;
                      do
                        v273 = __ldaxr(v272);
                      while (__stlxr(v273 - 1, v272));
                      if (!v273)
                      {
                        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                        std::__shared_weak_count::__release_weak(v271);
                      }
                    }
                    *(_OWORD *)__src = *(_OWORD *)v432;
                    v274 = v434;
                    __src[2] = v433;
                    if (v433)
                    {
                      v275 = (unint64_t *)&v433->__shared_owners_;
                      do
                        v276 = __ldxr(v275);
                      while (__stxr(v276 + 1, v275));
                    }
                    v277 = v435;
                    __src[3] = v274;
                    __src[4] = v435;
                    if (v435)
                    {
                      v278 = (unint64_t *)&v435->__shared_owners_;
                      do
                        v279 = __ldxr(v278);
                      while (__stxr(v279 + 1, v278));
                      __src[5] = v274;
                      do
                        v280 = __ldaxr(v278);
                      while (__stlxr(v280 - 1, v278));
                      if (!v280)
                      {
                        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                        std::__shared_weak_count::__release_weak(v277);
                      }
                    }
                    else
                    {
                      __src[5] = v274;
                    }
                    v281 = v433;
                    if (v433)
                    {
                      v282 = (unint64_t *)&v433->__shared_owners_;
                      do
                        v283 = __ldaxr(v282);
                      while (__stlxr(v283 - 1, v282));
                      if (!v283)
                      {
                        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                        std::__shared_weak_count::__release_weak(v281);
                      }
                    }
                    v284 = __src[0];
                    if (*((char *)__src[5] + 31) >= 0)
                      v285 = (char *)__src[5] + 8;
                    else
                      v285 = (char *)*((_QWORD *)__src[5] + 1);
                    v286 = _os_log_pack_fill();
                    *(_DWORD *)v286 = 136315138;
                    *(_QWORD *)(v286 + 4) = v285;
                    v287 = (char *)operator new();
                    v288 = *(unsigned __int8 *)(v332 + 39);
                    v289 = v331;
                    if ((v288 & 0x80u) != 0)
                    {
                      v289 = *(_QWORD *)(v332 + 16);
                      v288 = *(_QWORD *)(v332 + 24);
                    }
                    *(_QWORD *)v287 = v284;
                    *(_OWORD *)(v287 + 8) = *(_OWORD *)&__src[1];
                    __src[1] = 0;
                    __src[2] = 0;
                    *(_OWORD *)(v287 + 24) = *(_OWORD *)&__src[3];
                    __src[3] = 0;
                    __src[4] = 0;
                    *((_QWORD *)v287 + 5) = v289;
                    *((_QWORD *)v287 + 6) = v288;
                    v287[56] = 2;
                    *(_QWORD *)v416 = 0;
                    v432[0] = v287;
                    v9 = v336;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v342 + 24) + 40))(*(_QWORD *)(v342 + 24), v432);
                    v290 = v432[0];
                    v432[0] = 0;
                    if (v290)
                    {
                      v291 = (std::__shared_weak_count *)*((_QWORD *)v290 + 4);
                      if (v291)
                      {
                        v292 = (unint64_t *)&v291->__shared_owners_;
                        do
                          v293 = __ldaxr(v292);
                        while (__stlxr(v293 - 1, v292));
                        if (!v293)
                        {
                          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                          std::__shared_weak_count::__release_weak(v291);
                        }
                      }
                      v294 = (std::__shared_weak_count *)*((_QWORD *)v290 + 2);
                      if (v294)
                      {
                        v295 = (unint64_t *)&v294->__shared_owners_;
                        do
                          v296 = __ldaxr(v295);
                        while (__stlxr(v296 - 1, v295));
                        if (!v296)
                        {
                          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                          std::__shared_weak_count::__release_weak(v294);
                        }
                      }
                      MEMORY[0x212BC6398](v290, 0x10F0C40B62ED6C6);
                      v297 = *(_QWORD *)v416;
                      *(_QWORD *)v416 = 0;
                      if (v297)
                      {
                        v298 = *(std::__shared_weak_count **)(v297 + 32);
                        if (v298)
                        {
                          v299 = (unint64_t *)&v298->__shared_owners_;
                          do
                            v300 = __ldaxr(v299);
                          while (__stlxr(v300 - 1, v299));
                          if (!v300)
                          {
                            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                            std::__shared_weak_count::__release_weak(v298);
                          }
                        }
                        v301 = *(std::__shared_weak_count **)(v297 + 16);
                        if (v301)
                        {
                          v302 = (unint64_t *)&v301->__shared_owners_;
                          do
                            v303 = __ldaxr(v302);
                          while (__stlxr(v303 - 1, v302));
                          if (!v303)
                          {
                            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                            std::__shared_weak_count::__release_weak(v301);
                          }
                        }
                        MEMORY[0x212BC6398](v297, 0x10F0C40B62ED6C6);
                      }
                    }
                    v304 = (std::__shared_weak_count *)__src[4];
                    v72 = v364;
                    if (__src[4])
                    {
                      v305 = (unint64_t *)((char *)__src[4] + 8);
                      do
                        v306 = __ldaxr(v305);
                      while (__stlxr(v306 - 1, v305));
                      if (!v306)
                      {
                        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                        std::__shared_weak_count::__release_weak(v304);
                      }
                    }
                    v307 = (std::__shared_weak_count *)__src[2];
                    if (__src[2])
                    {
                      v308 = (unint64_t *)((char *)__src[2] + 8);
                      do
                        v309 = __ldaxr(v308);
                      while (__stlxr(v309 - 1, v308));
                      if (!v309)
                      {
                        ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                        std::__shared_weak_count::__release_weak(v307);
                      }
                    }
                    goto LABEL_229;
                  }
                }
                memcpy(v263, __s, v262);
                goto LABEL_170;
              }
            }
            memmove(v249, v247, v248);
            goto LABEL_143;
          }
        }
        memmove(p_dst, v239, v144);
        goto LABEL_123;
      }
    }
    v146 = v371;
    v147 = (const void **)&v369[64];
    if ((unint64_t)v371 < *(_QWORD *)&v369[72])
    {
      *(_QWORD *)&v371 = *(_QWORD *)&v369[72];
      v146 = *(_QWORD *)&v369[72];
      v147 = (const void **)&v369[64];
    }
    goto LABEL_115;
  }
}

void sub_20F335AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v35;

  if (LOBYTE(STACK[0x788]) && SLOBYTE(STACK[0x787]) < 0)
    operator delete((void *)STACK[0x770]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x6B0]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  sub_20E863784((uint64_t)&STACK[0x2C0]);
  sub_20E991548(&STACK[0x4B8]);
  sub_20F2310C8((void **)&STACK[0x560]);
  v35 = *(void **)a34;
  if (*(_QWORD *)a34)
  {
    *(_QWORD *)(a34 + 8) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void ***sub_20F335D44(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *(v3 - 7);
        if (v6)
        {
          *(v3 - 6) = v6;
          operator delete(v6);
        }
        v7 = v3 - 10;
        v8 = (char *)*(v3 - 10);
        if (v8)
        {
          v9 = (char *)*(v3 - 9);
          v5 = *(v3 - 10);
          if (v9 != v8)
          {
            v10 = (char *)*(v3 - 9);
            do
            {
              v12 = (void *)*((_QWORD *)v10 - 3);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *((_QWORD *)v9 - 2) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v8);
            v5 = *v7;
          }
          *(v3 - 9) = v8;
          operator delete(v5);
        }
        v3 -= 10;
      }
      while (v7 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F335E08(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  int v20;
  char v21;
  void *__p;
  void **v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 2816) + 184);
  if (*(_BYTE *)(v5 + 225))
  {
    v6 = *(_QWORD *)(v5 + 1072);
    if (v6)
    {
      sub_20F32FD3C((uint64_t)&__p, a1, a2, *(_QWORD *)(v6 + 8) != 0);
      v8 = (void **)__p;
      v7 = (uint64_t)v23;
      if (__p == v23)
        goto LABEL_4;
LABEL_7:
      v20 = 2;
      v21 = 1;
      sub_20F333D9C((char **)a3, a1, (uint64_t)v8, v7, (uint64_t)&v20);
      if (*(_BYTE *)(a1 + 3016))
        v9 = *(_QWORD *)(a1 + 3008);
      else
        v9 = 0;
      sub_20F442BAC(0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3), v9);
      v8 = (void **)__p;
      if (!__p)
        return;
      goto LABEL_11;
    }
  }
  sub_20F32FD3C((uint64_t)&__p, a1, a2, 0);
  v8 = (void **)__p;
  v7 = (uint64_t)v23;
  if (__p != v23)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (!v8)
    return;
LABEL_11:
  v10 = v23;
  v11 = v8;
  if (v23 != v8)
  {
    do
    {
      v13 = *(v10 - 7);
      if (v13)
      {
        *(v10 - 6) = v13;
        operator delete(v13);
      }
      v14 = v10 - 10;
      v15 = (char *)*(v10 - 10);
      if (v15)
      {
        v16 = (char *)*(v10 - 9);
        v12 = *(v10 - 10);
        if (v16 != v15)
        {
          v17 = (char *)*(v10 - 9);
          do
          {
            v19 = (void *)*((_QWORD *)v17 - 3);
            v17 -= 24;
            v18 = v19;
            if (v19)
            {
              *((_QWORD *)v16 - 2) = v18;
              operator delete(v18);
            }
            v16 = v17;
          }
          while (v17 != v15);
          v12 = *v14;
        }
        *(v10 - 9) = v15;
        operator delete(v12);
      }
      v10 -= 10;
    }
    while (v14 != v8);
    v11 = __p;
  }
  v23 = v8;
  operator delete(v11);
}

void sub_20F335FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
    sub_20F335D44((void ***)va);
    _Unwind_Resume(a1);
  }
  sub_20F335D44((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20F335FE8(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v8;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  int64x2_t v26;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  float64x2_t v33;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  int8x16_t v48;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  __int128 *v57;
  double v58;
  double v61;
  float64x2_t v63;
  int8x16_t v64;
  float64x2_t v66;
  int8x16_t v67;
  int64x2_t v68;
  float64x2_t *v69;
  double v70;
  float64x2_t v72;
  float64x2_t *v73;
  float64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  int8x8_t v85;
  int v86;
  unsigned int v87;
  unint64_t v88;
  uint8x8_t v89;
  unint64_t v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  unint64_t v101;
  int8x8_t v102;
  uint8x8_t v103;
  unint64_t v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  _QWORD *v134;
  uint64_t *v135;
  int8x16_t v138;
  uint64_t v140;
  float64x2_t v141;
  float64x2_t v142;
  double v143;
  float64x2_t v144;
  uint64_t v145;
  double v146;
  double v149;
  float64x2_t v151;
  int8x16_t v152;
  float64x2_t v154;
  int8x16_t v155;
  int64x2_t v156;
  float64x2_t *v157;
  double v158;
  float64x2_t v160;
  float64x2_t *v161;
  float64_t v162;
  float64x2_t v163;
  uint64_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t *v177;
  int8x8_t v178;
  unint64_t v179;
  uint8x8_t v180;
  unint64_t v181;
  _QWORD **v182;
  _QWORD *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  float64_t v194;
  float64x2_t v195;
  float64_t v196;
  void *__p[2];
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;

  v8 = a2;
  v11 = *a2;
  v12 = (int8x8_t)a5[1];
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = *a2;
      if (v11 >= *(_QWORD *)&v12)
        v14 = v11 % *(_QWORD *)&v12;
    }
    else
    {
      v14 = (*(_QWORD *)&v12 - 1) & v11;
    }
    v15 = *(_QWORD **)(*a5 + 8 * v14);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (*v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v12 - 1;
          while (1)
          {
            v19 = v16[1];
            if (v19 == v11)
            {
              if (v16[2] == v11)
                goto LABEL_22;
            }
            else if ((v19 & v17) != v14)
            {
              goto LABEL_21;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_21;
          }
        }
        do
        {
          v18 = v16[1];
          if (v18 == v11)
          {
            if (v16[2] == v11)
              goto LABEL_22;
          }
          else
          {
            if (v18 >= *(_QWORD *)&v12)
              v18 %= *(_QWORD *)&v12;
            if (v18 != v14)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_21:
  v16 = 0;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2535, (uint64_t)"reloc_submap_iter != external_submaps.end()", 43, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_150:
    abort();
  }
LABEL_22:
  v20 = *(_QWORD **)(a1 + 2824);
  v21 = *(_QWORD **)(a1 + 2832);
  v22 = v20;
  if (v20 != v21)
  {
    v22 = *(_QWORD **)(a1 + 2824);
    while (1)
    {
      v23 = v22[2];
      if (v23)
      {
        if (*(_QWORD *)(v23 + 160) == v11)
          break;
      }
      v22 += 559;
      if (v22 == v21)
        goto LABEL_31;
    }
  }
  if (v22 != v21 && v22)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2539, (uint64_t)"!this->HasMapSession(reloc_submap_id)", 37, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_150;
    }
    v20 = *(_QWORD **)(a1 + 2824);
    v21 = *(_QWORD **)(a1 + 2832);
  }
LABEL_31:
  if (v20 == v21)
    goto LABEL_149;
  v189 = (uint64_t *)(a1 + 2824);
  while (1)
  {
    v24 = v20[2];
    if (v24)
    {
      if (*(_QWORD *)(v24 + 160) == v8[3])
        break;
    }
    v20 += 559;
    if (v20 == v21)
      goto LABEL_149;
  }
  if (v20 == v21)
  {
LABEL_149:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2543, (uint64_t)"ref_submap", 10, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0);
    goto LABEL_150;
  }
  sub_20F31A810(v8, *(_QWORD *)(v16[5] + 424), *(_QWORD **)(v24 + 424), *(unsigned __int8 *)(a1 + 1084), a6);
  v190 = a1;
  v191 = a3;
  v192 = (uint64_t)v8;
  if (a4)
  {
    v25.f64[0] = *(float64_t *)(a6 + 16);
    v26 = *(int64x2_t *)(a6 + 32);
    _D3 = *(_QWORD *)(a6 + 80);
    v28 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a6, v26);
    v29 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a6, v26);
    v25.f64[1] = *(float64_t *)(a6 + 48);
    v30 = vextq_s8((int8x16_t)v29, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(a6 + 64), 1), 8uLL);
    _D6 = *(double *)(a6 + 112);
    _Q7 = *(float64x2_t *)(a6 + 96);
    v33 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v28, vnegq_f64(_Q7).f64[0]), v29, _Q7, 1), v25, _D6, 0);
    _D18 = *(_QWORD *)(a6 + 72);
    __asm
    {
      FMLS            D16, D18, V7.D[1]
      FMLS            D16, D3, V6.D[0]
    }
    *(_QWORD *)&v29.f64[1] = v30.i64[0];
    v198 = (float64x2_t)*(unint64_t *)(a6 + 64);
    *(float64x2_t *)__p = v28;
    v202 = (float64x2_t)_D3;
    v201 = v25;
    v200 = (float64x2_t)v30.u64[1];
    v199 = v29;
    v203 = v33;
    v204.f64[0] = _D16;
    v204.f64[1] = 1.0;
    v41 = a1;
    v42 = *(_QWORD *)(a1 + 2824);
    v43 = *(_QWORD *)(v41 + 2832);
    if (v42 != v43)
    {
      __asm { FMOV            V0.2D, #1.0 }
      v196 = *((double *)&_Q0 + 1);
      do
      {
        v45 = *(_QWORD *)(v42 + 16);
        sub_20FCE8D4C((uint64_t)__p, *(_QWORD **)(v45 + 424));
        v50 = **(_QWORD ***)(v45 + 424);
        v51 = *(uint64_t **)(v45 + 16);
        if (v50[8])
        {
          for (; v51; v51 = (uint64_t *)*v51)
          {
            v85 = (int8x8_t)v50[224];
            if (v85)
            {
              v86 = *((_DWORD *)v51 + 14);
              v87 = *((_DWORD *)v51 + 12);
              v88 = v87 ^ __ROR4__(v86, 13);
              v89 = (uint8x8_t)vcnt_s8(v85);
              v89.i16[0] = vaddlv_u8(v89);
              if (v89.u32[0] > 1uLL)
              {
                v90 = v88;
                if (*(_QWORD *)&v85 <= v88)
                  v90 = v88 % *(_QWORD *)&v85;
              }
              else
              {
                v90 = (v85.i32[0] - 1) & v88;
              }
              v91 = *(uint64_t ***)(v50[223] + 8 * v90);
              if (v91)
              {
                v92 = *v91;
                if (v92)
                {
                  v93 = v51[5];
                  if (v89.u32[0] < 2uLL)
                  {
                    v94 = *(_QWORD *)&v85 - 1;
                    while (1)
                    {
                      v96 = v92[1];
                      if (v96 == v88)
                      {
                        if (*((_DWORD *)v92 + 8) == v86 && v92[2] == v93 && *((_DWORD *)v92 + 6) == v87)
                          goto LABEL_48;
                      }
                      else if ((v96 & v94) != v90)
                      {
                        goto LABEL_49;
                      }
                      v92 = (uint64_t *)*v92;
                      if (!v92)
                        goto LABEL_49;
                    }
                  }
                  do
                  {
                    v95 = v92[1];
                    if (v95 == v88)
                    {
                      if (*((_DWORD *)v92 + 8) == v86 && v92[2] == v93 && *((_DWORD *)v92 + 6) == v87)
                      {
LABEL_48:
                        v52 = v92[5];
                        v53 = *(float64x2_t *)v52;
                        _Q5.f64[0] = *(float64_t *)(v52 + 40);
                        v54 = *(float64x2_t *)(v52 + 24);
                        v55 = *(double *)(v52 + 64);
                        v56 = *(float64x2_t *)(v52 + 48);
                        v57 = (__int128 *)v92[9];
                        v58 = *((double *)v57 + 2);
                        _Q2 = *v57;
                        v48.i64[0] = *((_QWORD *)v57 + 5);
                        _Q18 = *(float64x2_t *)((char *)v57 + 24);
                        v61 = *((double *)v57 + 8);
                        _Q20 = (float64x2_t)v57[3];
                        v63 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, *(double *)v57), v54, *(float64x2_t *)v57, 1), v56, v58);
                        __asm { FMLA            D21, D5, V2.D[1] }
                        _Q21.f64[0] = _Q21.f64[0] + v55 * v58;
                        v64 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, _Q18.f64[0]), v54, _Q18, 1), v56, *(double *)v48.i64);
                        __asm { FMLA            D1, D5, V18.D[1] }
                        *(double *)v48.i64 = _D1 + v55 * *(double *)v48.i64;
                        v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, _Q20.f64[0]), v54, _Q20, 1), v56, v61);
                        __asm { FMLA            D2, D5, V20.D[1] }
                        *(double *)&_Q2 = *(double *)&_Q2 + v55 * v61;
                        v67 = vextq_s8(v64, v48, 8uLL);
                        v68 = vzip1q_s64((int64x2_t)_Q21, (int64x2_t)v64);
                        v69 = (float64x2_t *)v92[11];
                        v70 = v69[1].f64[0];
                        _Q20 = *v69;
                        v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v69->f64[0]), v54, *v69, 1), v56, v70);
                        __asm { FMLA            D3, D5, V20.D[1] }
                        _Q3.f64[0] = _Q3.f64[0] + v55 * v70;
                        v73 = (float64x2_t *)v92[7];
                        _Q5.f64[0] = v73[1].f64[0];
                        *(_QWORD *)&v74 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
                        *(_QWORD *)&v56.f64[0] = vdupq_laneq_s64(v68, 1).u64[0];
                        *(_QWORD *)&v56.f64[1] = v67.i64[0];
                        v75 = vaddq_f64(v72, *v73);
                        _Q5 = (float64x2_t)v67.u64[1];
                        *(_QWORD *)&v54.f64[0] = v68.i64[0];
                        _Q3.f64[1] = v196;
                        _Q3.f64[0] = v74;
                        v77 = *((float64x2_t *)v51 + 4);
                        v76 = *((float64x2_t *)v51 + 5);
                        v79 = *((float64x2_t *)v51 + 6);
                        v78 = *((float64x2_t *)v51 + 7);
                        _Q21 = *((float64x2_t *)v51 + 8);
                        v80 = *((float64x2_t *)v51 + 9);
                        v82 = *((float64x2_t *)v51 + 10);
                        v81 = *((float64x2_t *)v51 + 11);
                        v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v77.f64[0]), v56, v77, 1), v66, v76.f64[0]), v75, v76, 1);
                        v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v54.f64[0], v77.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], v77, 1), (float64x2_t)(unint64_t)_Q2, v76.f64[0]), _Q3, v76, 1);
                        v48 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v54.f64[0], v79.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], v79, 1), (float64x2_t)(unint64_t)_Q2, v78.f64[0]), _Q3, v78, 1);
                        *((float64x2_t *)v51 + 12) = v83;
                        *((float64x2_t *)v51 + 13) = v84;
                        *((float64x2_t *)v51 + 14) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v79.f64[0]), v56, v79, 1), v66, v78.f64[0]), v75, v78, 1);
                        *((int8x16_t *)v51 + 15) = v48;
                        *((float64x2_t *)v51 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, _Q21.f64[0]), v56, _Q21, 1), v66, v80.f64[0]), v75, v80, 1);
                        *((float64x2_t *)v51 + 17) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v54.f64[0], _Q21.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], _Q21, 1), (float64x2_t)(unint64_t)_Q2, v80.f64[0]), _Q3, v80, 1);
                        *((float64x2_t *)v51 + 18) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v82.f64[0]), v56, v82, 1), v66, v81.f64[0]), v75, v81, 1);
                        *((float64x2_t *)v51 + 19) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v54.f64[0], v82.f64[0]), (float64x2_t)*(unint64_t *)&_Q5.f64[0], v82, 1), (float64x2_t)(unint64_t)_Q2, v81.f64[0]), _Q3, v81, 1);
                        break;
                      }
                    }
                    else
                    {
                      if (v95 >= *(_QWORD *)&v85)
                        v95 %= *(_QWORD *)&v85;
                      if (v95 != v90)
                        break;
                    }
                    v92 = (uint64_t *)*v92;
                  }
                  while (v92);
                }
              }
            }
LABEL_49:
            ;
          }
          sub_20FCC8FF4((_QWORD *)v45);
        }
        else
        {
          for (; v51; v51 = (uint64_t *)*v51)
            sub_20FCC8E38((uint64_t *)v45, (uint64_t)(v51 + 2), (__int128 *)(v51 + 5));
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(v42 + 200) + 16))(*(_QWORD *)(v42 + 200));
        v42 += 4472;
      }
      while (v42 != v43);
    }
    *(_OWORD *)(a6 + 64) = xmmword_2103AF7C0;
    *(float64x2_t *)(a6 + 80) = xmmword_2103AF7D0;
    *(_OWORD *)(a6 + 96) = xmmword_2103AF7E0;
    *(float64x2_t *)(a6 + 112) = xmmword_2103AF7F0[0];
    *(_OWORD *)a6 = xmmword_2103AF780;
    *(_OWORD *)(a6 + 16) = *(_OWORD *)algn_2103AF790;
    *(_OWORD *)(a6 + 32) = xmmword_2103AF7A0;
    *(float64x2_t *)(a6 + 48) = xmmword_2103AF7B0;
    a1 = v190;
    a3 = v191;
    v8 = (uint64_t *)v192;
  }
  sub_20F26182C(v20, v8[3], v8[4]);
  v97 = *a3;
  v98 = a3[1];
  if (v97 != v98)
  {
    __asm { FMOV            V0.2D, #1.0 }
    v194 = *((double *)&_Q0 + 1);
    v195 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
    do
    {
      v101 = *(_QWORD *)v97;
      if (*(_QWORD *)v97 == v11)
      {
        v101 = v11;
        if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(*(float64x2_t *)(v97 + 8), (float64x2_t)xmmword_2103AF780))), (int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(*(float64x2_t *)(v97 + 24), *(float64x2_t *)algn_2103AF790)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(
                                                                                          *(float64x2_t *)(v97 + 40),
                                                                                          (float64x2_t)xmmword_2103AF7A0))),
                                                                         (int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(*(float64x2_t *)(v97 + 56), xmmword_2103AF7B0)))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(*(float64x2_t *)(v97 + 72), (float64x2_t)xmmword_2103AF7C0))), (int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(*(float64x2_t *)(v97 + 88), xmmword_2103AF7D0)))),
                                                            (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(*(float64x2_t *)(v97 + 104), (float64x2_t)xmmword_2103AF7E0))), (int32x4_t)vcgeq_f64(v195, vabsq_f64(vsubq_f64(*(float64x2_t *)(v97 + 120), xmmword_2103AF7F0[0])))))))) & 1) != 0)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 4190, (uint64_t)"cva::almostEqual(T_G_ext_submap_to_G_reloc_submap, cva::SE3Groupd{})", 68, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_150;
          }
          v101 = *(_QWORD *)v97;
        }
      }
      v102 = (int8x8_t)a5[1];
      if (v102)
      {
        v103 = (uint8x8_t)vcnt_s8(v102);
        v103.i16[0] = vaddlv_u8(v103);
        if (v103.u32[0] > 1uLL)
        {
          v104 = v101;
          if (v101 >= *(_QWORD *)&v102)
            v104 = v101 % *(_QWORD *)&v102;
        }
        else
        {
          v104 = (*(_QWORD *)&v102 - 1) & v101;
        }
        v105 = *(uint64_t ***)(*a5 + 8 * v104);
        if (v105)
        {
          v106 = *v105;
          if (*v105)
          {
            if (v103.u32[0] < 2uLL)
            {
              v107 = *(_QWORD *)&v102 - 1;
              while (1)
              {
                v109 = v106[1];
                if (v109 == v101)
                {
                  if (v106[2] == v101)
                    goto LABEL_106;
                }
                else if ((v109 & v107) != v104)
                {
                  goto LABEL_80;
                }
                v106 = (uint64_t *)*v106;
                if (!v106)
                  goto LABEL_80;
              }
            }
            do
            {
              v108 = v106[1];
              if (v108 == v101)
              {
                if (v106[2] == v101)
                {
LABEL_106:
                  if ((a4 & 1) == 0)
                  {
                    v110 = *(float64x2_t *)(a6 + 16);
                    v112 = *(float64x2_t *)(a6 + 32);
                    v111 = *(float64x2_t *)(a6 + 48);
                    v114 = *(float64x2_t *)(a6 + 64);
                    v113 = *(float64x2_t *)(a6 + 80);
                    v116 = *(float64x2_t *)(a6 + 96);
                    v115 = *(float64x2_t *)(a6 + 112);
                    v117 = *(float64x2_t *)(v97 + 24);
                    v118 = *(float64x2_t *)(v97 + 8);
                    v119 = *(float64x2_t *)(v97 + 56);
                    v120 = *(float64x2_t *)(v97 + 40);
                    v121 = *(float64x2_t *)(v97 + 88);
                    v122 = *(float64x2_t *)(v97 + 72);
                    v123 = *(float64x2_t *)(v97 + 120);
                    v124 = *(float64x2_t *)(v97 + 104);
                    v125 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a6, v118.f64[0]), v112, v118, 1), v114, v117.f64[0]), v116, v117, 1);
                    v126 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v118.f64[0]), v111, v118, 1), v113, v117.f64[0]), v115, v117, 1);
                    v127 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a6, v120.f64[0]), v112, v120, 1), v114, v119.f64[0]), v116, v119, 1);
                    v128 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v120.f64[0]), v111, v120, 1), v113, v119.f64[0]), v115, v119, 1);
                    v129 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a6, v122.f64[0]), v112, v122, 1), v114, v121.f64[0]), v116, v121, 1);
                    v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a6, v124.f64[0]), v112, v124, 1), v114, v123.f64[0]), v116, v123, 1);
                    *(float64x2_t *)__p = v125;
                    v198 = v126;
                    v199 = v127;
                    v200 = v128;
                    v201 = v129;
                    v202 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v122.f64[0]), v111, v122, 1), v113, v121.f64[0]), v115, v121, 1);
                    v203 = v130;
                    v204 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v124.f64[0]), v111, v124, 1), v113, v123.f64[0]), v115, v123, 1);
                    v131 = v106[5];
                    sub_20FCE8D4C((uint64_t)__p, *(_QWORD **)(v131 + 424));
                    v132 = **(_QWORD **)(v131 + 424);
                    v133 = *(uint64_t **)(v131 + 16);
                    if (*(_QWORD *)(v132 + 64))
                    {
                      if (v133)
                      {
                        v134 = (_QWORD *)(v132 + 1784);
                        do
                        {
                          v135 = sub_20E9DF85C(v134, v133 + 5);
                          if (v135)
                          {
                            v140 = v135[5];
                            v141 = *(float64x2_t *)v140;
                            _Q5.f64[0] = *(float64_t *)(v140 + 40);
                            v142 = *(float64x2_t *)(v140 + 24);
                            v143 = *(double *)(v140 + 64);
                            v144 = *(float64x2_t *)(v140 + 48);
                            v145 = v135[9];
                            v146 = *(double *)(v145 + 16);
                            _Q2 = *(_OWORD *)v145;
                            v138.i64[0] = *(_QWORD *)(v145 + 40);
                            _Q18 = *(float64x2_t *)(v145 + 24);
                            v149 = *(double *)(v145 + 64);
                            _Q20 = *(float64x2_t *)(v145 + 48);
                            v151 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v141, *(double *)v145), v142, *(float64x2_t *)v145, 1), v144, v146);
                            __asm { FMLA            D21, D5, V2.D[1] }
                            *(double *)_Q21.i64 = *(double *)_Q21.i64 + v143 * v146;
                            v152 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v141, _Q18.f64[0]), v142, _Q18, 1), v144, *(double *)v138.i64);
                            __asm { FMLA            D1, D5, V18.D[1] }
                            *(double *)v138.i64 = _D1 + v143 * *(double *)v138.i64;
                            v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v141, _Q20.f64[0]), v142, _Q20, 1), v144, v149);
                            __asm { FMLA            D2, D5, V20.D[1] }
                            *(double *)&_Q2 = *(double *)&_Q2 + v143 * v149;
                            v155 = vextq_s8(v152, v138, 8uLL);
                            v156 = vzip1q_s64(_Q21, (int64x2_t)v152);
                            v157 = (float64x2_t *)v135[11];
                            v158 = v157[1].f64[0];
                            _Q20 = *v157;
                            v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v141, v157->f64[0]), v142, *v157, 1), v144, v158);
                            __asm { FMLA            D3, D5, V20.D[1] }
                            _Q3.f64[0] = _Q3.f64[0] + v143 * v158;
                            v161 = (float64x2_t *)v135[7];
                            _Q5.f64[0] = v161[1].f64[0];
                            *(_QWORD *)&v162 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
                            *(_QWORD *)&v144.f64[0] = vdupq_laneq_s64(v156, 1).u64[0];
                            *(_QWORD *)&v144.f64[1] = v155.i64[0];
                            v163 = vaddq_f64(v160, *v161);
                            v164 = v155.i64[1];
                            *(_QWORD *)&v142.f64[0] = v156.i64[0];
                            v165.f64[1] = v194;
                            v165.f64[0] = v162;
                            v167 = *((float64x2_t *)v133 + 4);
                            v166 = *((float64x2_t *)v133 + 5);
                            v169 = *((float64x2_t *)v133 + 6);
                            v168 = *((float64x2_t *)v133 + 7);
                            v171 = *((float64x2_t *)v133 + 8);
                            v170 = *((float64x2_t *)v133 + 9);
                            v173 = *((float64x2_t *)v133 + 10);
                            v172 = *((float64x2_t *)v133 + 11);
                            *((float64x2_t *)v133 + 12) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v167.f64[0]), v144, v167, 1), v154, v166.f64[0]), v163, v166, 1);
                            *((float64x2_t *)v133 + 13) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v142.f64[0], v167.f64[0]), (float64x2_t)(unint64_t)v164, v167, 1), (float64x2_t)(unint64_t)_Q2, v166.f64[0]), v165, v166, 1);
                            *((float64x2_t *)v133 + 14) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v169.f64[0]), v144, v169, 1), v154, v168.f64[0]), v163, v168, 1);
                            *((float64x2_t *)v133 + 15) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v142.f64[0], v169.f64[0]), (float64x2_t)(unint64_t)v164, v169, 1), (float64x2_t)(unint64_t)_Q2, v168.f64[0]), v165, v168, 1);
                            *((float64x2_t *)v133 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v171.f64[0]), v144, v171, 1), v154, v170.f64[0]), v163, v170, 1);
                            *((float64x2_t *)v133 + 17) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v142.f64[0], v171.f64[0]), (float64x2_t)(unint64_t)v164, v171, 1), (float64x2_t)(unint64_t)_Q2, v170.f64[0]), v165, v170, 1);
                            *((float64x2_t *)v133 + 18) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v173.f64[0]), v144, v173, 1), v154, v172.f64[0]), v163, v172, 1);
                            *((float64x2_t *)v133 + 19) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v142.f64[0], v173.f64[0]), (float64x2_t)(unint64_t)v164, v173, 1), (float64x2_t)(unint64_t)_Q2, v172.f64[0]), v165, v172, 1);
                          }
                          v133 = (uint64_t *)*v133;
                        }
                        while (v133);
                      }
                      sub_20FCC8FF4((_QWORD *)v131);
                    }
                    else
                    {
                      for (; v133; v133 = (uint64_t *)*v133)
                        sub_20FCC8E38((uint64_t *)v131, (uint64_t)(v133 + 2), (__int128 *)(v133 + 5));
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v106[28] + 16))(v106[28]);
                    a1 = v190;
                  }
                  v174 = (uint64_t)(v106 + 3);
                  *((_DWORD *)v106 + 82) = v106[41] & 0xFFFFFC37 | 0x148;
                  v175 = *(_QWORD *)(a1 + 2832);
                  if (v175 >= *(_QWORD *)(a1 + 2840))
                    v100 = sub_20F33DAAC(v189, v174);
                  else
                    v100 = sub_20F314370(v175, v174) + 4472;
                  *(_QWORD *)(a1 + 2832) = v100;
                  break;
                }
              }
              else
              {
                if (v108 >= *(_QWORD *)&v102)
                  v108 %= *(_QWORD *)&v102;
                if (v108 != v104)
                  break;
              }
              v106 = (uint64_t *)*v106;
            }
            while (v106);
          }
        }
      }
LABEL_80:
      v97 += 136;
    }
    while (v97 != v98);
  }
  sub_20F31D2E0(a1);
  v176 = (unint64_t *)*v191;
  v177 = (unint64_t *)v191[1];
  if ((unint64_t *)*v191 != v177)
  {
    v178 = (int8x8_t)a5[1];
    if (v178)
    {
LABEL_121:
      v179 = *v176;
      v180 = (uint8x8_t)vcnt_s8(v178);
      v180.i16[0] = vaddlv_u8(v180);
      if (v180.u32[0] > 1uLL)
      {
        v181 = *v176;
        if (v179 >= *(_QWORD *)&v178)
          v181 = v179 % *(_QWORD *)&v178;
      }
      else
      {
        v181 = v179 & (*(_QWORD *)&v178 - 1);
      }
      v182 = *(_QWORD ***)(*a5 + 8 * v181);
      if (v182)
      {
        v183 = *v182;
        if (*v182)
        {
          if (v180.u32[0] < 2uLL)
          {
            v184 = *(_QWORD *)&v178 - 1;
            while (1)
            {
              v186 = v183[1];
              if (v186 == v179)
              {
                if (v183[2] == v179)
                  goto LABEL_141;
              }
              else if ((v186 & v184) != v181)
              {
                goto LABEL_145;
              }
              v183 = (_QWORD *)*v183;
              if (!v183)
                goto LABEL_145;
            }
          }
          do
          {
            v185 = v183[1];
            if (v185 == v179)
            {
              if (v183[2] == v179)
              {
LABEL_141:
                sub_20E8D2CE8(a5, v183, (uint64_t)__p);
                v187 = __p[0];
                __p[0] = 0;
                if (v187)
                {
                  if (LOBYTE(v198.f64[0]))
                    sub_20F3122B4((uint64_t)v187 + 24);
                  operator delete(v187);
                }
                break;
              }
            }
            else
            {
              if (v185 >= *(_QWORD *)&v178)
                v185 %= *(_QWORD *)&v178;
              if (v185 != v181)
                break;
            }
            v183 = (_QWORD *)*v183;
          }
          while (v183);
        }
      }
LABEL_145:
      while (1)
      {
        v176 += 17;
        if (v176 == v177)
          break;
        v178 = (int8x8_t)a5[1];
        if (v178)
          goto LABEL_121;
      }
    }
  }
  sub_20F328638(a1, v192);
  v188 = *(_QWORD *)(a1 + 3072);
  *(_QWORD *)(v188 + 24) = *(unsigned int *)(v188 + 16);
  *(_BYTE *)(v188 + 32) = 0;
  sub_20F31D2E0(a1);
}

