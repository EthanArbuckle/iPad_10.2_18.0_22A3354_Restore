void sub_20F8CFF84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6B810);
  sub_20F8F28D0((_DWORD **)&STACK[0x778]);
  sub_20F905708();
  sub_20F89E908((uint64_t)&STACK[0x3D0]);
  sub_20F89E908((uint64_t)&STACK[0x4C0]);
  sub_20F89E908((uint64_t)&STACK[0x5B0]);
  _Unwind_Resume(a1);
}

void sub_20F8D0830(uint64_t a1)
{
  int64x2_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  BOOL v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int64x2_t v54;
  _QWORD *v55;
  _QWORD *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int64x2_t v87;
  _QWORD *v88;
  _QWORD *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  int64x2_t v120;
  _QWORD *v121;
  _QWORD *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int64x2_t v153;
  _QWORD *v154;
  _QWORD *v155;
  __int128 v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  int64x2_t v199;
  _QWORD *v200;
  _QWORD *v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t j;
  uint64_t v216;
  uint64_t v217;
  uint64_t k;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  int64x2_t v241;
  _QWORD *v242;
  __int128 v243;
  uint64_t v244;
  _QWORD *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  __int128 v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  _QWORD *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int64x2_t v268;
  _QWORD *v269;
  __int128 v270;
  _QWORD *v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t m;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  int64x2_t v296;
  _QWORD *v297;
  int64x2_t v298;
  _QWORD *v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  _QWORD *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  int64x2_t v315;
  _QWORD *v316;
  _QWORD *v317;
  __int128 v318;
  _OWORD *v319;
  _OWORD *v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  __int128 v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  _QWORD *v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  int64x2_t v338;
  _QWORD *v339;
  _QWORD *v340;
  __int128 v341;
  _OWORD *v342;
  _OWORD *v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  __int128 v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  _QWORD *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  int64x2_t v361;
  _QWORD *v362;
  _QWORD *v363;
  __int128 v364;
  _OWORD *v365;
  __int128 *v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  __int128 v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  _QWORD *v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  int64x2_t v384;
  _QWORD *v385;
  _QWORD *v386;
  __int128 v387;
  _OWORD *v388;
  __int128 *v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  __int128 v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  _QWORD *v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int64x2_t v411;
  _QWORD *v412;
  __int128 v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t n;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int64x2_t v438;
  _QWORD *v439;
  __int128 v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  _QWORD *v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int64x2_t v463;
  _QWORD *v464;
  __int128 v465;
  int64x2_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _QWORD *v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  __int128 v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t ii;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  int v694;

  sub_20F8D7234(a1);
  if (!*(_BYTE *)(a1 + 1593))
    goto LABEL_620;
  v2 = (int64x2_t *)(a1 + 1576);
  v3 = *(_QWORD *)(a1 + 1064);
  v4 = *(_QWORD **)(a1 + 1072);
  if ((_QWORD *)v3 == v4)
    goto LABEL_24;
  v5 = *(_QWORD *)(a1 + 1072);
  while (!*(_BYTE *)(v3 + 496))
  {
    v3 += 504;
    if ((_QWORD *)v3 == v4)
      goto LABEL_25;
  }
  v6 = *(_QWORD *)(v3 + 216);
  --*(_DWORD *)(*(_QWORD *)(v3 + 208) + 8);
  --*(_DWORD *)(v6 + 8);
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  v7 = (int64x2_t)xmmword_2103B4950;
  *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B4950);
  if ((_QWORD *)v3 != v4)
  {
    v8 = (_QWORD *)(v3 + 504);
    if ((_QWORD *)(v3 + 504) != v4)
    {
      v5 = v3;
      do
      {
        while (1)
        {
          v9 = v8;
          v10 = (__int128 *)(v3 + 696);
          if (!*(_BYTE *)(v3 + 1000))
            break;
          --*(_DWORD *)(*(_QWORD *)(v3 + 712) + 8);
          --*(_DWORD *)(*(_QWORD *)(v3 + 720) + 8);
          *(_QWORD *)(v3 + 712) = 0;
          *(_QWORD *)(v3 + 720) = 0;
          *v2 = vaddq_s64(*v2, v7);
          v8 += 63;
          v3 = (uint64_t)v9;
          if (v9 + 63 == v4)
            goto LABEL_25;
        }
        *(_QWORD *)v5 = *v8;
        *(_OWORD *)(v5 + 8) = *(_OWORD *)(v3 + 512);
        v11 = *(_OWORD *)(v3 + 608);
        v12 = *(_OWORD *)(v3 + 624);
        v13 = *(_OWORD *)(v3 + 592);
        *(_OWORD *)(v5 + 72) = *(_OWORD *)(v3 + 576);
        *(_OWORD *)(v5 + 120) = v12;
        *(_OWORD *)(v5 + 104) = v11;
        *(_OWORD *)(v5 + 88) = v13;
        v15 = *(_OWORD *)(v3 + 656);
        v14 = *(_OWORD *)(v3 + 672);
        v16 = *(_QWORD *)(v3 + 688);
        *(_OWORD *)(v5 + 136) = *(_OWORD *)(v3 + 640);
        *(_QWORD *)(v5 + 184) = v16;
        *(_OWORD *)(v5 + 168) = v14;
        *(_OWORD *)(v5 + 152) = v15;
        v17 = *(_OWORD *)(v3 + 528);
        v18 = *(_OWORD *)(v3 + 544);
        *(_OWORD *)(v5 + 56) = *(_OWORD *)(v3 + 560);
        *(_OWORD *)(v5 + 40) = v18;
        *(_OWORD *)(v5 + 24) = v17;
        v19 = *v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v3 + 704) = 0;
        v20 = *(std::__shared_weak_count **)(v5 + 200);
        *(_OWORD *)(v5 + 192) = v19;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            v7 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_QWORD *)(v5 + 208) = *(_QWORD *)(v3 + 712);
        *(_QWORD *)(v5 + 216) = *(_QWORD *)(v3 + 720);
        v23 = *(_OWORD *)(v3 + 728);
        v24 = *(_OWORD *)(v3 + 744);
        v25 = *(_OWORD *)(v3 + 776);
        *(_OWORD *)(v5 + 256) = *(_OWORD *)(v3 + 760);
        *(_OWORD *)(v5 + 272) = v25;
        *(_OWORD *)(v5 + 224) = v23;
        *(_OWORD *)(v5 + 240) = v24;
        v26 = *(_OWORD *)(v3 + 792);
        v27 = *(_OWORD *)(v3 + 808);
        v28 = *(_OWORD *)(v3 + 824);
        *(_QWORD *)(v5 + 336) = *(_QWORD *)(v3 + 840);
        *(_OWORD *)(v5 + 304) = v27;
        *(_OWORD *)(v5 + 320) = v28;
        *(_OWORD *)(v5 + 288) = v26;
        v30 = *(_OWORD *)(v3 + 928);
        v29 = *(_OWORD *)(v3 + 944);
        v31 = *(_OWORD *)(v3 + 912);
        *(_QWORD *)(v5 + 456) = *(_QWORD *)(v3 + 960);
        *(_OWORD *)(v5 + 424) = v30;
        *(_OWORD *)(v5 + 440) = v29;
        *(_OWORD *)(v5 + 408) = v31;
        v32 = *(_OWORD *)(v3 + 848);
        v33 = *(_OWORD *)(v3 + 864);
        v34 = *(_OWORD *)(v3 + 896);
        *(_OWORD *)(v5 + 376) = *(_OWORD *)(v3 + 880);
        *(_OWORD *)(v5 + 392) = v34;
        *(_OWORD *)(v5 + 344) = v32;
        *(_OWORD *)(v5 + 360) = v33;
        v35 = *(_QWORD *)(v3 + 968);
        *(_BYTE *)(v5 + 472) = *(_BYTE *)(v3 + 976);
        *(_QWORD *)(v5 + 464) = v35;
        v36 = *(_OWORD *)(v3 + 984);
        *(_QWORD *)(v3 + 984) = 0;
        *(_QWORD *)(v3 + 992) = 0;
        v37 = *(std::__shared_weak_count **)(v5 + 488);
        *(_OWORD *)(v5 + 480) = v36;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
            v7 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_BYTE *)(v5 + 496) = *(_BYTE *)(v3 + 1000);
        v5 += 504;
        v8 = v9 + 63;
        v3 = (uint64_t)v9;
      }
      while (v9 + 63 != v4);
      goto LABEL_25;
    }
LABEL_24:
    v5 = v3;
  }
LABEL_25:
  v40 = *(_QWORD *)(a1 + 1072);
  if (v5 == v40)
    goto LABEL_28;
  v41 = sub_20F5B64A0(v40, *(_QWORD *)(a1 + 1072), v5);
  for (i = *(_QWORD *)(a1 + 1072); i != v41; i -= 504)
  {
    v48 = *(std::__shared_weak_count **)(i - 16);
    if (!v48)
      goto LABEL_39;
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      v51 = *(std::__shared_weak_count **)(i - 304);
      if (v51)
      {
LABEL_40:
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
    }
    else
    {
LABEL_39:
      v51 = *(std::__shared_weak_count **)(i - 304);
      if (v51)
        goto LABEL_40;
    }
  }
  *(_QWORD *)(a1 + 1072) = v41;
LABEL_28:
  v43 = *(_QWORD **)(a1 + 1088);
  v44 = *(_QWORD **)(a1 + 1096);
  if (v43 == v44)
  {
    v45 = *(_QWORD *)(a1 + 1088);
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 1096);
    v46 = v43 + 35;
    while (!*((_BYTE *)v46 - 8))
    {
      v47 = v46 == v44;
      v46 += 35;
      if (v47)
        goto LABEL_65;
    }
    --*(_DWORD *)(*(v46 - 18) + 8);
    *(v46 - 18) = 0;
    v54 = (int64x2_t)xmmword_2103B2310;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B2310);
    v55 = v46 - 35;
    if (v46 - 35 != v44)
    {
      if (v46 == v44)
      {
        v45 = (uint64_t)(v46 - 35);
      }
      else
      {
        v45 = (uint64_t)(v46 - 35);
        do
        {
          while (1)
          {
            v56 = v46;
            if (!*((_BYTE *)v55 + 552))
              break;
            --*(_DWORD *)(v55[52] + 8);
            v55[52] = 0;
            *v2 = vaddq_s64(*v2, v54);
            v46 += 35;
            v55 = v56;
            if (v56 + 35 == v44)
              goto LABEL_65;
          }
          *(_QWORD *)v45 = *v46;
          *(_OWORD *)(v45 + 8) = *((_OWORD *)v55 + 18);
          v58 = *((_OWORD *)v55 + 21);
          v57 = *((_OWORD *)v55 + 22);
          v59 = v55[46];
          *(_OWORD *)(v45 + 40) = *((_OWORD *)v55 + 20);
          *(_QWORD *)(v45 + 88) = v59;
          *(_OWORD *)(v45 + 72) = v57;
          *(_OWORD *)(v45 + 56) = v58;
          *(_OWORD *)(v45 + 24) = *((_OWORD *)v55 + 19);
          v60 = *(_OWORD *)(v55 + 47);
          *(_QWORD *)(v45 + 112) = v55[49];
          *(_OWORD *)(v45 + 96) = v60;
          v61 = *((_OWORD *)v55 + 25);
          v55[50] = 0;
          v55[51] = 0;
          v62 = *(std::__shared_weak_count **)(v45 + 128);
          *(_OWORD *)(v45 + 120) = v61;
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
              v54 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v45 + 136) = v55[52];
          v65 = *(_OWORD *)(v55 + 53);
          v66 = *(_OWORD *)(v55 + 57);
          *(_OWORD *)(v45 + 160) = *(_OWORD *)(v55 + 55);
          *(_OWORD *)(v45 + 176) = v66;
          *(_OWORD *)(v45 + 144) = v65;
          v67 = *(_OWORD *)(v55 + 59);
          v68 = *(_OWORD *)(v55 + 63);
          *(_OWORD *)(v45 + 208) = *(_OWORD *)(v55 + 61);
          *(_OWORD *)(v45 + 224) = v68;
          *(_OWORD *)(v45 + 192) = v67;
          v69 = v55[65];
          *(_BYTE *)(v45 + 248) = *((_BYTE *)v55 + 528);
          *(_QWORD *)(v45 + 240) = v69;
          v70 = *(_OWORD *)(v55 + 67);
          v55[68] = 0;
          v55[67] = 0;
          v71 = *(std::__shared_weak_count **)(v45 + 264);
          *(_OWORD *)(v45 + 256) = v70;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
              v54 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v45 + 272) = *((_BYTE *)v55 + 552);
          v45 += 280;
          v46 = v56 + 35;
          v55 = v56;
        }
        while (v56 + 35 != v44);
      }
    }
  }
LABEL_65:
  v74 = *(_QWORD *)(a1 + 1096);
  if (v45 != v74)
  {
    v75 = sub_20F5B6660(v74, *(_QWORD *)(a1 + 1096), v45);
    v76 = *(_QWORD *)(a1 + 1096);
    if (v76 == v75)
    {
LABEL_67:
      *(_QWORD *)(a1 + 1096) = v75;
      goto LABEL_68;
    }
    while (1)
    {
      v81 = *(std::__shared_weak_count **)(v76 - 16);
      if (!v81)
        goto LABEL_79;
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
        v84 = *(std::__shared_weak_count **)(v76 - 152);
        if (v84)
        {
LABEL_80:
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
      }
      else
      {
LABEL_79:
        v84 = *(std::__shared_weak_count **)(v76 - 152);
        if (v84)
          goto LABEL_80;
      }
      v76 -= 280;
      if (v76 == v75)
        goto LABEL_67;
    }
  }
LABEL_68:
  v77 = *(_QWORD **)(a1 + 1112);
  v78 = *(_QWORD **)(a1 + 1120);
  if (v77 == v78)
  {
    v79 = *(_QWORD *)(a1 + 1112);
  }
  else
  {
    v79 = *(_QWORD *)(a1 + 1120);
    v80 = v77 + 35;
    while (!*((_BYTE *)v80 - 8))
    {
      v47 = v80 == v78;
      v80 += 35;
      if (v47)
        goto LABEL_105;
    }
    --*(_DWORD *)(*(v80 - 18) + 8);
    *(v80 - 18) = 0;
    v87 = (int64x2_t)xmmword_2103B2310;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B2310);
    v88 = v80 - 35;
    if (v80 - 35 != v78)
    {
      if (v80 == v78)
      {
        v79 = (uint64_t)(v80 - 35);
      }
      else
      {
        v79 = (uint64_t)(v80 - 35);
        do
        {
          while (1)
          {
            v89 = v80;
            if (!*((_BYTE *)v88 + 552))
              break;
            --*(_DWORD *)(v88[52] + 8);
            v88[52] = 0;
            *v2 = vaddq_s64(*v2, v87);
            v80 += 35;
            v88 = v89;
            if (v89 + 35 == v78)
              goto LABEL_105;
          }
          *(_QWORD *)v79 = *v80;
          *(_OWORD *)(v79 + 8) = *((_OWORD *)v88 + 18);
          v91 = *((_OWORD *)v88 + 21);
          v90 = *((_OWORD *)v88 + 22);
          v92 = v88[46];
          *(_OWORD *)(v79 + 40) = *((_OWORD *)v88 + 20);
          *(_QWORD *)(v79 + 88) = v92;
          *(_OWORD *)(v79 + 72) = v90;
          *(_OWORD *)(v79 + 56) = v91;
          *(_OWORD *)(v79 + 24) = *((_OWORD *)v88 + 19);
          v93 = *(_OWORD *)(v88 + 47);
          *(_QWORD *)(v79 + 112) = v88[49];
          *(_OWORD *)(v79 + 96) = v93;
          v94 = *((_OWORD *)v88 + 25);
          v88[50] = 0;
          v88[51] = 0;
          v95 = *(std::__shared_weak_count **)(v79 + 128);
          *(_OWORD *)(v79 + 120) = v94;
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
              v87 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v79 + 136) = v88[52];
          v98 = *(_OWORD *)(v88 + 53);
          v99 = *(_OWORD *)(v88 + 57);
          *(_OWORD *)(v79 + 160) = *(_OWORD *)(v88 + 55);
          *(_OWORD *)(v79 + 176) = v99;
          *(_OWORD *)(v79 + 144) = v98;
          v100 = *(_OWORD *)(v88 + 59);
          v101 = *(_OWORD *)(v88 + 63);
          *(_OWORD *)(v79 + 208) = *(_OWORD *)(v88 + 61);
          *(_OWORD *)(v79 + 224) = v101;
          *(_OWORD *)(v79 + 192) = v100;
          v102 = v88[65];
          *(_BYTE *)(v79 + 248) = *((_BYTE *)v88 + 528);
          *(_QWORD *)(v79 + 240) = v102;
          v103 = *(_OWORD *)(v88 + 67);
          v88[68] = 0;
          v88[67] = 0;
          v104 = *(std::__shared_weak_count **)(v79 + 264);
          *(_OWORD *)(v79 + 256) = v103;
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
              v87 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v79 + 272) = *((_BYTE *)v88 + 552);
          v79 += 280;
          v80 = v89 + 35;
          v88 = v89;
        }
        while (v89 + 35 != v78);
      }
    }
  }
LABEL_105:
  v107 = *(_QWORD *)(a1 + 1120);
  if (v79 != v107)
  {
    v108 = sub_20F5B6660(v107, *(_QWORD *)(a1 + 1120), v79);
    v109 = *(_QWORD *)(a1 + 1120);
    if (v109 == v108)
    {
LABEL_107:
      *(_QWORD *)(a1 + 1120) = v108;
      goto LABEL_108;
    }
    while (1)
    {
      v114 = *(std::__shared_weak_count **)(v109 - 16);
      if (!v114)
        goto LABEL_119;
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
        v117 = *(std::__shared_weak_count **)(v109 - 152);
        if (v117)
        {
LABEL_120:
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
      }
      else
      {
LABEL_119:
        v117 = *(std::__shared_weak_count **)(v109 - 152);
        if (v117)
          goto LABEL_120;
      }
      v109 -= 280;
      if (v109 == v108)
        goto LABEL_107;
    }
  }
LABEL_108:
  v110 = *(_QWORD **)(a1 + 1136);
  v111 = *(_QWORD **)(a1 + 1144);
  if (v110 == v111)
  {
    v112 = *(_QWORD *)(a1 + 1136);
  }
  else
  {
    v112 = *(_QWORD *)(a1 + 1144);
    v113 = v110 + 35;
    while (!*((_BYTE *)v113 - 8))
    {
      v47 = v113 == v111;
      v113 += 35;
      if (v47)
        goto LABEL_145;
    }
    --*(_DWORD *)(*(v113 - 18) + 8);
    *(v113 - 18) = 0;
    v120 = (int64x2_t)xmmword_2103B2310;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B2310);
    v121 = v113 - 35;
    if (v113 - 35 != v111)
    {
      if (v113 == v111)
      {
        v112 = (uint64_t)(v113 - 35);
      }
      else
      {
        v112 = (uint64_t)(v113 - 35);
        do
        {
          while (1)
          {
            v122 = v113;
            if (!*((_BYTE *)v121 + 552))
              break;
            --*(_DWORD *)(v121[52] + 8);
            v121[52] = 0;
            *v2 = vaddq_s64(*v2, v120);
            v113 += 35;
            v121 = v122;
            if (v122 + 35 == v111)
              goto LABEL_145;
          }
          *(_QWORD *)v112 = *v113;
          *(_OWORD *)(v112 + 8) = *((_OWORD *)v121 + 18);
          v124 = *((_OWORD *)v121 + 21);
          v123 = *((_OWORD *)v121 + 22);
          v125 = v121[46];
          *(_OWORD *)(v112 + 40) = *((_OWORD *)v121 + 20);
          *(_QWORD *)(v112 + 88) = v125;
          *(_OWORD *)(v112 + 72) = v123;
          *(_OWORD *)(v112 + 56) = v124;
          *(_OWORD *)(v112 + 24) = *((_OWORD *)v121 + 19);
          v126 = *(_OWORD *)(v121 + 47);
          *(_QWORD *)(v112 + 112) = v121[49];
          *(_OWORD *)(v112 + 96) = v126;
          v127 = *((_OWORD *)v121 + 25);
          v121[50] = 0;
          v121[51] = 0;
          v128 = *(std::__shared_weak_count **)(v112 + 128);
          *(_OWORD *)(v112 + 120) = v127;
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
              v120 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v112 + 136) = v121[52];
          v131 = *(_OWORD *)(v121 + 53);
          v132 = *(_OWORD *)(v121 + 57);
          *(_OWORD *)(v112 + 160) = *(_OWORD *)(v121 + 55);
          *(_OWORD *)(v112 + 176) = v132;
          *(_OWORD *)(v112 + 144) = v131;
          v133 = *(_OWORD *)(v121 + 59);
          v134 = *(_OWORD *)(v121 + 63);
          *(_OWORD *)(v112 + 208) = *(_OWORD *)(v121 + 61);
          *(_OWORD *)(v112 + 224) = v134;
          *(_OWORD *)(v112 + 192) = v133;
          v135 = v121[65];
          *(_BYTE *)(v112 + 248) = *((_BYTE *)v121 + 528);
          *(_QWORD *)(v112 + 240) = v135;
          v136 = *(_OWORD *)(v121 + 67);
          v121[68] = 0;
          v121[67] = 0;
          v137 = *(std::__shared_weak_count **)(v112 + 264);
          *(_OWORD *)(v112 + 256) = v136;
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
              v120 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v112 + 272) = *((_BYTE *)v121 + 552);
          v112 += 280;
          v113 = v122 + 35;
          v121 = v122;
        }
        while (v122 + 35 != v111);
      }
    }
  }
LABEL_145:
  v140 = *(_QWORD *)(a1 + 1144);
  if (v112 != v140)
  {
    v141 = sub_20F5B6660(v140, *(_QWORD *)(a1 + 1144), v112);
    v142 = *(_QWORD *)(a1 + 1144);
    if (v142 == v141)
    {
LABEL_147:
      *(_QWORD *)(a1 + 1144) = v141;
      goto LABEL_148;
    }
    while (1)
    {
      v147 = *(std::__shared_weak_count **)(v142 - 16);
      if (!v147)
        goto LABEL_159;
      v148 = (unint64_t *)&v147->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
        v150 = *(std::__shared_weak_count **)(v142 - 152);
        if (v150)
        {
LABEL_160:
          v151 = (unint64_t *)&v150->__shared_owners_;
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
      }
      else
      {
LABEL_159:
        v150 = *(std::__shared_weak_count **)(v142 - 152);
        if (v150)
          goto LABEL_160;
      }
      v142 -= 280;
      if (v142 == v141)
        goto LABEL_147;
    }
  }
LABEL_148:
  v143 = *(_QWORD **)(a1 + 1160);
  v144 = *(_QWORD **)(a1 + 1168);
  if (v143 == v144)
  {
    v145 = *(_QWORD *)(a1 + 1160);
  }
  else
  {
    v145 = *(_QWORD *)(a1 + 1168);
    v146 = v143 + 20;
    while (!*((_BYTE *)v146 - 8))
    {
      v47 = v146 == v144;
      v146 += 20;
      if (v47)
        goto LABEL_185;
    }
    --*(_DWORD *)(*(v146 - 12) + 8);
    *(v146 - 12) = 0;
    v153 = (int64x2_t)xmmword_2103B8430;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8430);
    v154 = v146 - 20;
    if (v146 - 20 != v144)
    {
      if (v146 == v144)
      {
        v145 = (uint64_t)(v146 - 20);
      }
      else
      {
        v145 = (uint64_t)(v146 - 20);
        do
        {
          while (1)
          {
            v155 = v146;
            if (!*((_BYTE *)v154 + 312))
              break;
            --*(_DWORD *)(v154[28] + 8);
            v154[28] = 0;
            *v2 = vaddq_s64(*v2, v153);
            v146 += 20;
            v154 = v155;
            if (v155 + 20 == v144)
              goto LABEL_185;
          }
          *(_QWORD *)v145 = *v146;
          *(_OWORD *)(v145 + 8) = *(_OWORD *)(v154 + 21);
          v156 = *(_OWORD *)(v154 + 23);
          *(_QWORD *)(v145 + 40) = v154[25];
          *(_OWORD *)(v145 + 24) = v156;
          v157 = *((_OWORD *)v154 + 13);
          v154[26] = 0;
          v154[27] = 0;
          v158 = *(std::__shared_weak_count **)(v145 + 56);
          *(_OWORD *)(v145 + 48) = v157;
          if (v158)
          {
            v159 = (unint64_t *)&v158->__shared_owners_;
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
              v153 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_QWORD *)(v145 + 64) = v154[28];
          v161 = *(_OWORD *)(v154 + 29);
          *(_QWORD *)(v145 + 88) = v154[31];
          *(_OWORD *)(v145 + 72) = v161;
          v162 = *((_OWORD *)v154 + 16);
          *(_QWORD *)(v145 + 112) = v154[34];
          *(_OWORD *)(v145 + 96) = v162;
          v163 = v154[35];
          *(_BYTE *)(v145 + 128) = *((_BYTE *)v154 + 288);
          *(_QWORD *)(v145 + 120) = v163;
          v164 = *(_OWORD *)(v154 + 37);
          v154[37] = 0;
          v154[38] = 0;
          v165 = *(std::__shared_weak_count **)(v145 + 144);
          *(_OWORD *)(v145 + 136) = v164;
          if (v165)
          {
            v166 = (unint64_t *)&v165->__shared_owners_;
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
              v153 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_BYTE *)(v145 + 152) = *((_BYTE *)v154 + 312);
          v145 += 160;
          v146 = v155 + 20;
          v154 = v155;
        }
        while (v155 + 20 != v144);
      }
    }
  }
LABEL_185:
  v168 = *(_QWORD *)(a1 + 1168);
  if (v145 != v168)
  {
    v169 = sub_20F91EB0C(v168, *(_QWORD *)(a1 + 1168), v145);
    v170 = *(_QWORD *)(a1 + 1168);
    if (v170 == v169)
    {
LABEL_187:
      *(_QWORD *)(a1 + 1168) = v169;
      goto LABEL_188;
    }
    while (1)
    {
      v174 = *(std::__shared_weak_count **)(v170 - 16);
      if (!v174)
        goto LABEL_198;
      v175 = (unint64_t *)&v174->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
        v177 = *(std::__shared_weak_count **)(v170 - 104);
        if (v177)
        {
LABEL_199:
          v178 = (unint64_t *)&v177->__shared_owners_;
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
        }
      }
      else
      {
LABEL_198:
        v177 = *(std::__shared_weak_count **)(v170 - 104);
        if (v177)
          goto LABEL_199;
      }
      v170 -= 160;
      if (v170 == v169)
        goto LABEL_187;
    }
  }
LABEL_188:
  v171 = *(_QWORD *)(a1 + 1184);
  v172 = *(_QWORD *)(a1 + 1192);
  if (v171 == v172)
    goto LABEL_212;
  v173 = *(_QWORD *)(a1 + 1192);
  while (!*(_BYTE *)(v171 + 8008))
  {
    v171 += 8016;
    if (v171 == v172)
      goto LABEL_213;
  }
  --*(_DWORD *)(*(_QWORD *)(v171 + 7696) + 8);
  --*(_DWORD *)(*(_QWORD *)(v171 + 7704) + 8);
  *(_OWORD *)(v171 + 7696) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v171 + 7712) + 8);
  --*(_DWORD *)(*(_QWORD *)(v171 + 7720) + 8);
  *(_OWORD *)(v171 + 7712) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v171 + 7728) + 8);
  *(_QWORD *)(v171 + 7728) = 0;
  *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B4950);
  if (v171 != v172)
  {
    if (v171 + 8016 != v172)
    {
      v173 = v171;
      do
      {
        while (!*(_BYTE *)(v171 + 16024))
        {
          *(_QWORD *)v173 = *(_QWORD *)(v171 + 8016);
          sub_20F5B67C0(v173 + 8, v171 + 8024);
          *(_BYTE *)(v173 + 8008) = *(_BYTE *)(v171 + 16024);
          v173 += 8016;
          v180 = v171 + 16032;
          v171 += 8016;
          if (v180 == v172)
            goto LABEL_213;
        }
        --*(_DWORD *)(*(_QWORD *)(v171 + 15712) + 8);
        --*(_DWORD *)(*(_QWORD *)(v171 + 15720) + 8);
        *(_OWORD *)(v171 + 15712) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v171 + 15728) + 8);
        --*(_DWORD *)(*(_QWORD *)(v171 + 15736) + 8);
        *(_OWORD *)(v171 + 15728) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v171 + 15744) + 8);
        *(_QWORD *)(v171 + 15744) = 0;
        *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B4950);
        v181 = v171 + 16032;
        v171 += 8016;
      }
      while (v181 != v172);
      goto LABEL_213;
    }
LABEL_212:
    v173 = v171;
  }
LABEL_213:
  v182 = *(_QWORD *)(a1 + 1192);
  if (v182 != v173)
  {
    do
    {
      v183 = *(std::__shared_weak_count **)(v182 - 16);
      if (v183)
      {
        v184 = (unint64_t *)&v183->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      v182 -= 8016;
    }
    while (v182 != v173);
    *(_QWORD *)(a1 + 1192) = v173;
  }
  v186 = *(_QWORD *)(a1 + 1208);
  v187 = *(_QWORD *)(a1 + 1216);
  if (v186 == v187)
    goto LABEL_234;
  v188 = *(_QWORD *)(a1 + 1216);
  while (!*(_BYTE *)(v186 + 5328))
  {
    v186 += 5336;
    if (v186 == v187)
      goto LABEL_235;
  }
  --*(_DWORD *)(*(_QWORD *)(v186 + 5024) + 8);
  --*(_DWORD *)(*(_QWORD *)(v186 + 5032) + 8);
  *(_OWORD *)(v186 + 5024) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v186 + 5040) + 8);
  --*(_DWORD *)(*(_QWORD *)(v186 + 5048) + 8);
  *(_OWORD *)(v186 + 5040) = 0u;
  *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B4950);
  if (v186 != v187)
  {
    v189 = v186 + 5336;
    if (v186 + 5336 != v187)
    {
      v190 = (_BYTE *)(v186 + 10664);
      v188 = v186;
      do
      {
        while (!*v190)
        {
          sub_20F5B6B10(v188, v189);
          v188 += 5336;
          v189 += 5336;
          v190 += 5336;
          if (v189 == v187)
            goto LABEL_235;
        }
        --*(_DWORD *)(*((_QWORD *)v190 - 38) + 8);
        --*(_DWORD *)(*(_QWORD *)(v189 + 5032) + 8);
        *((_OWORD *)v190 - 19) = 0u;
        --*(_DWORD *)(*((_QWORD *)v190 - 36) + 8);
        --*(_DWORD *)(*((_QWORD *)v190 - 35) + 8);
        *((_OWORD *)v190 - 18) = 0u;
        *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B4950);
        v189 += 5336;
        v190 += 5336;
      }
      while (v189 != v187);
      goto LABEL_235;
    }
LABEL_234:
    v188 = v186;
  }
LABEL_235:
  v191 = *(_QWORD *)(a1 + 1216);
  if (v191 != v188)
  {
    do
    {
      v192 = *(std::__shared_weak_count **)(v191 - 16);
      if (v192)
      {
        v193 = (unint64_t *)&v192->__shared_owners_;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      v191 -= 5336;
    }
    while (v191 != v188);
    *(_QWORD *)(a1 + 1216) = v188;
  }
  v195 = *(_QWORD **)(a1 + 1232);
  v196 = *(_QWORD **)(a1 + 1240);
  if (v195 == v196)
  {
    v197 = *(_QWORD *)(a1 + 1232);
  }
  else
  {
    v197 = *(_QWORD *)(a1 + 1240);
    v198 = v195 + 18;
    while (!*((_BYTE *)v198 - 8))
    {
      v47 = v198 == v196;
      v198 += 18;
      if (v47)
        goto LABEL_269;
    }
    --*(_DWORD *)(*(v198 - 12) + 8);
    *(v198 - 12) = 0;
    v199 = (int64x2_t)xmmword_2103B8430;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8430);
    v200 = v198 - 18;
    if (v198 - 18 != v196)
    {
      if (v198 == v196)
      {
        v197 = (uint64_t)(v198 - 18);
      }
      else
      {
        v197 = (uint64_t)(v198 - 18);
        do
        {
          while (1)
          {
            v201 = v198;
            if (!*((_BYTE *)v200 + 280))
              break;
            --*(_DWORD *)(v200[24] + 8);
            v200[24] = 0;
            *v2 = vaddq_s64(*v2, v199);
            v198 += 18;
            v200 = v201;
            if (v201 + 18 == v196)
              goto LABEL_269;
          }
          *(_QWORD *)v197 = *v198;
          *(_OWORD *)(v197 + 8) = *(_OWORD *)(v200 + 19);
          v202 = *(_OWORD *)(v200 + 21);
          v200[21] = 0;
          v200[22] = 0;
          v203 = *(std::__shared_weak_count **)(v197 + 32);
          *(_OWORD *)(v197 + 24) = v202;
          if (v203)
          {
            v204 = (unint64_t *)&v203->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
              v199 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_BYTE *)(v197 + 40) = *((_BYTE *)v200 + 184);
          *(_QWORD *)(v197 + 48) = v200[24];
          v206 = *(_OWORD *)(v200 + 25);
          *(_QWORD *)(v197 + 72) = v200[27];
          *(_OWORD *)(v197 + 56) = v206;
          v207 = *((_OWORD *)v200 + 14);
          *(_QWORD *)(v197 + 96) = v200[30];
          *(_OWORD *)(v197 + 80) = v207;
          v208 = v200[31];
          *(_BYTE *)(v197 + 112) = *((_BYTE *)v200 + 256);
          *(_QWORD *)(v197 + 104) = v208;
          v209 = *(_OWORD *)(v200 + 33);
          v200[33] = 0;
          v200[34] = 0;
          v210 = *(std::__shared_weak_count **)(v197 + 128);
          *(_OWORD *)(v197 + 120) = v209;
          if (v210)
          {
            v211 = (unint64_t *)&v210->__shared_owners_;
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
              v199 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_BYTE *)(v197 + 136) = *((_BYTE *)v200 + 280);
          v197 += 144;
          v198 = v201 + 18;
          v200 = v201;
        }
        while (v201 + 18 != v196);
      }
    }
  }
LABEL_269:
  v213 = *(_QWORD *)(a1 + 1240);
  if (v197 == v213)
    goto LABEL_272;
  v214 = sub_20F91EC44(v213, *(_QWORD *)(a1 + 1240), v197);
  for (j = *(_QWORD *)(a1 + 1240); j != v214; j -= 144)
  {
    v220 = *(std::__shared_weak_count **)(j - 16);
    if (!v220)
      goto LABEL_283;
    v221 = (unint64_t *)&v220->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
      v223 = *(std::__shared_weak_count **)(j - 112);
      if (v223)
      {
LABEL_284:
        v224 = (unint64_t *)&v223->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
    }
    else
    {
LABEL_283:
      v223 = *(std::__shared_weak_count **)(j - 112);
      if (v223)
        goto LABEL_284;
    }
  }
  *(_QWORD *)(a1 + 1240) = v214;
LABEL_272:
  v216 = *(_QWORD *)(a1 + 1256);
  v217 = *(_QWORD *)(a1 + 1264);
  if (v216 == v217)
  {
    k = *(_QWORD *)(a1 + 1256);
  }
  else
  {
    k = *(_QWORD *)(a1 + 1264);
    v219 = v216 + 152;
    while (!*(_BYTE *)(v219 - 8))
    {
      v47 = v219 == v217;
      v219 += 152;
      if (v47)
        goto LABEL_297;
    }
    v226 = *(_QWORD *)(v219 - 96);
    --*(_DWORD *)(*(_QWORD *)(v219 - 104) + 8);
    --*(_DWORD *)(v226 + 8);
    *(_QWORD *)(v219 - 104) = 0;
    *(_QWORD *)(v219 - 96) = 0;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8430);
    if (v219 - 152 != v217)
    {
      for (k = v219 - 152; v219 != v217; v219 += 152)
      {
        while (!*(_BYTE *)(v219 + 144))
        {
          sub_20F91ED74(k, v219);
          k += 152;
          v219 += 152;
          if (v219 == v217)
            goto LABEL_297;
        }
        v227 = *(_QWORD *)(v219 + 56);
        --*(_DWORD *)(*(_QWORD *)(v219 + 48) + 8);
        --*(_DWORD *)(v227 + 8);
        *(_QWORD *)(v219 + 48) = 0;
        *(_QWORD *)(v219 + 56) = 0;
        *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8430);
      }
    }
  }
LABEL_297:
  v228 = *(_QWORD *)(a1 + 1264);
  if (k == v228)
    goto LABEL_313;
  while (v228 != k)
  {
    v229 = *(std::__shared_weak_count **)(v228 - 16);
    if (!v229)
      goto LABEL_305;
    v230 = (unint64_t *)&v229->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
      v232 = *(std::__shared_weak_count **)(v228 - 120);
      if (!v232)
        goto LABEL_299;
    }
    else
    {
LABEL_305:
      v232 = *(std::__shared_weak_count **)(v228 - 120);
      if (!v232)
        goto LABEL_299;
    }
    v233 = (unint64_t *)&v232->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
LABEL_299:
    v228 -= 152;
  }
  *(_QWORD *)(a1 + 1264) = k;
LABEL_313:
  v235 = *(_QWORD **)(a1 + 1280);
  v236 = *(_QWORD **)(a1 + 1288);
  if (v235 == v236)
  {
    v237 = *(_QWORD **)(a1 + 1280);
  }
  else
  {
    v237 = *(_QWORD **)(a1 + 1288);
    v238 = v235 + 38;
    while (!*((_BYTE *)v238 - 8))
    {
      v47 = v238 == v236;
      v238 += 38;
      if (v47)
        goto LABEL_333;
    }
    v239 = *(v238 - 12);
    --*(_DWORD *)(*(v238 - 13) + 8);
    --*(_DWORD *)(v239 + 8);
    v240 = *(v238 - 10);
    --*(_DWORD *)(*(v238 - 11) + 8);
    *(_OWORD *)(v238 - 13) = 0u;
    --*(_DWORD *)(v240 + 8);
    *(_OWORD *)(v238 - 11) = 0u;
    v241 = (int64x2_t)xmmword_210378050;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_210378050);
    v242 = v238 - 38;
    if (v238 - 38 != v236)
    {
      if (v238 == v236)
      {
        v237 = v238 - 38;
      }
      else
      {
        v243 = 0uLL;
        v237 = v238 - 38;
        do
        {
          while (1)
          {
            v245 = v238;
            if (!*((_BYTE *)v242 + 600))
              break;
            v244 = v242[64];
            --*(_DWORD *)(v242[63] + 8);
            --*(_DWORD *)(v244 + 8);
            --*(_DWORD *)(v242[65] + 8);
            --*(_DWORD *)(v242[66] + 8);
            *(_OWORD *)(v242 + 63) = v243;
            *(_OWORD *)(v242 + 65) = v243;
            *v2 = vaddq_s64(*v2, v241);
            v238 += 38;
            v242 = v245;
            if (v245 + 38 == v236)
              goto LABEL_333;
          }
          *v237 = *v238;
          v237[1] = v242[39];
          *((_OWORD *)v237 + 1) = *((_OWORD *)v242 + 20);
          v246 = *((_OWORD *)v242 + 21);
          v237[6] = v242[44];
          *((_OWORD *)v237 + 2) = v246;
          v247 = *(_OWORD *)(v242 + 49);
          v248 = *(_OWORD *)(v242 + 51);
          v249 = *(_OWORD *)(v242 + 47);
          v237[15] = v242[53];
          *(_OWORD *)(v237 + 11) = v247;
          *(_OWORD *)(v237 + 13) = v248;
          *(_OWORD *)(v237 + 9) = v249;
          *(_OWORD *)(v237 + 7) = *(_OWORD *)(v242 + 45);
          v250 = *((_OWORD *)v242 + 27);
          *((_OWORD *)v237 + 9) = *((_OWORD *)v242 + 28);
          *((_OWORD *)v237 + 8) = v250;
          v251 = *((_OWORD *)v242 + 29);
          v252 = *((_OWORD *)v242 + 30);
          *((_DWORD *)v237 + 48) = *((_DWORD *)v242 + 124);
          *((_OWORD *)v237 + 11) = v252;
          *((_OWORD *)v237 + 10) = v251;
          v237[25] = v242[63];
          v237[26] = v242[64];
          v237[27] = v242[65];
          v237[28] = v242[66];
          *(_OWORD *)(v237 + 29) = *(_OWORD *)(v242 + 67);
          *(_OWORD *)(v237 + 31) = *(_OWORD *)(v242 + 69);
          v253 = v242[71];
          *((_BYTE *)v237 + 272) = *((_BYTE *)v242 + 576);
          v237[33] = v253;
          v254 = *(_OWORD *)(v242 + 73);
          v242[73] = 0;
          v242[74] = 0;
          v255 = (std::__shared_weak_count *)v237[36];
          *(_OWORD *)(v237 + 35) = v254;
          if (v255)
          {
            v256 = (unint64_t *)&v255->__shared_owners_;
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (!v257)
            {
              ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
              std::__shared_weak_count::__release_weak(v255);
              v243 = 0uLL;
              v241 = (int64x2_t)xmmword_210378050;
            }
          }
          *((_BYTE *)v237 + 296) = *((_BYTE *)v242 + 600);
          v237 += 38;
          v238 = v245 + 38;
          v242 = v245;
        }
        while (v245 + 38 != v236);
      }
    }
  }
LABEL_333:
  v258 = *(_QWORD **)(a1 + 1288);
  if (v237 != v258)
  {
    while (v258 != v237)
    {
      v259 = (std::__shared_weak_count *)*(v258 - 2);
      if (v259)
      {
        v260 = (unint64_t *)&v259->__shared_owners_;
        do
          v261 = __ldaxr(v260);
        while (__stlxr(v261 - 1, v260));
        if (!v261)
        {
          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
          std::__shared_weak_count::__release_weak(v259);
        }
      }
      v258 -= 38;
    }
    *(_QWORD *)(a1 + 1288) = v237;
  }
  v262 = *(_QWORD *)(a1 + 1304);
  v263 = *(_QWORD **)(a1 + 1312);
  if ((_QWORD *)v262 == v263)
    goto LABEL_360;
  v264 = *(_QWORD *)(a1 + 1312);
  while (!*(_BYTE *)(v262 + 352))
  {
    v262 += 360;
    if ((_QWORD *)v262 == v263)
      goto LABEL_361;
  }
  v265 = *(_QWORD *)(v262 + 232);
  --*(_DWORD *)(*(_QWORD *)(v262 + 224) + 8);
  --*(_DWORD *)(v265 + 8);
  v266 = *(_QWORD *)(v262 + 248);
  --*(_DWORD *)(*(_QWORD *)(v262 + 240) + 8);
  --*(_DWORD *)(v266 + 8);
  v267 = *(_QWORD *)(v262 + 264);
  --*(_DWORD *)(*(_QWORD *)(v262 + 256) + 8);
  *(_OWORD *)(v262 + 224) = 0u;
  *(_OWORD *)(v262 + 240) = 0u;
  --*(_DWORD *)(v267 + 8);
  *(_OWORD *)(v262 + 256) = 0u;
  v268 = (int64x2_t)xmmword_2103B8430;
  *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8430);
  if ((_QWORD *)v262 != v263)
  {
    v269 = (_QWORD *)(v262 + 360);
    if ((_QWORD *)(v262 + 360) != v263)
    {
      v270 = 0uLL;
      v264 = v262;
      do
      {
        while (1)
        {
          v271 = v269;
          if (!*(_BYTE *)(v262 + 712))
            break;
          --*(_DWORD *)(*(_QWORD *)(v262 + 584) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 592) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 600) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 608) + 8);
          *(_OWORD *)(v262 + 584) = v270;
          *(_OWORD *)(v262 + 600) = v270;
          --*(_DWORD *)(*(_QWORD *)(v262 + 616) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 624) + 8);
          *(_OWORD *)(v262 + 616) = v270;
          *v2 = vaddq_s64(*v2, v268);
          v269 += 45;
          v262 = (uint64_t)v271;
          if (v271 + 45 == v263)
            goto LABEL_361;
        }
        *(_QWORD *)v264 = *v269;
        *(_QWORD *)(v264 + 8) = *(_QWORD *)(v262 + 368);
        v272 = *(_OWORD *)(v262 + 376);
        *(_OWORD *)(v264 + 32) = *(_OWORD *)(v262 + 392);
        *(_OWORD *)(v264 + 16) = v272;
        v273 = *(_OWORD *)(v262 + 408);
        *(_OWORD *)(v264 + 64) = *(_OWORD *)(v262 + 424);
        *(_OWORD *)(v264 + 48) = v273;
        *(_BYTE *)(v264 + 88) = *(_BYTE *)(v262 + 448);
        v274 = *(_OWORD *)(v262 + 456);
        *(_QWORD *)(v264 + 112) = *(_QWORD *)(v262 + 472);
        *(_OWORD *)(v264 + 96) = v274;
        *(_BYTE *)(v264 + 128) = *(_BYTE *)(v262 + 488);
        v275 = *(_OWORD *)(v262 + 496);
        *(_QWORD *)(v264 + 152) = *(_QWORD *)(v262 + 512);
        *(_OWORD *)(v264 + 136) = v275;
        v276 = *(_OWORD *)(v262 + 520);
        *(_QWORD *)(v264 + 176) = *(_QWORD *)(v262 + 536);
        *(_OWORD *)(v264 + 160) = v276;
        v277 = *(_OWORD *)(v262 + 544);
        v278 = *(_OWORD *)(v262 + 560);
        *(_DWORD *)(v264 + 216) = *(_DWORD *)(v262 + 576);
        *(_OWORD *)(v264 + 184) = v277;
        *(_OWORD *)(v264 + 200) = v278;
        *(_QWORD *)(v264 + 224) = *(_QWORD *)(v262 + 584);
        *(_QWORD *)(v264 + 232) = *(_QWORD *)(v262 + 592);
        *(_QWORD *)(v264 + 240) = *(_QWORD *)(v262 + 600);
        *(_QWORD *)(v264 + 248) = *(_QWORD *)(v262 + 608);
        *(_QWORD *)(v264 + 256) = *(_QWORD *)(v262 + 616);
        *(_QWORD *)(v264 + 264) = *(_QWORD *)(v262 + 624);
        v279 = *(_OWORD *)(v262 + 632);
        *(_QWORD *)(v264 + 288) = *(_QWORD *)(v262 + 648);
        *(_OWORD *)(v264 + 272) = v279;
        v280 = *(_OWORD *)(v262 + 656);
        *(_QWORD *)(v264 + 312) = *(_QWORD *)(v262 + 672);
        *(_OWORD *)(v264 + 296) = v280;
        v281 = *(_QWORD *)(v262 + 680);
        *(_BYTE *)(v264 + 328) = *(_BYTE *)(v262 + 688);
        *(_QWORD *)(v264 + 320) = v281;
        v282 = *(_OWORD *)(v262 + 696);
        *(_QWORD *)(v262 + 696) = 0;
        *(_QWORD *)(v262 + 704) = 0;
        v283 = *(std::__shared_weak_count **)(v264 + 344);
        *(_OWORD *)(v264 + 336) = v282;
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
            v270 = 0uLL;
            v268 = (int64x2_t)xmmword_2103B8430;
          }
        }
        *(_BYTE *)(v264 + 352) = *(_BYTE *)(v262 + 712);
        v264 += 360;
        v269 = v271 + 45;
        v262 = (uint64_t)v271;
      }
      while (v271 + 45 != v263);
      goto LABEL_361;
    }
LABEL_360:
    v264 = v262;
  }
LABEL_361:
  v286 = *(_QWORD *)(a1 + 1312);
  if (v286 != v264)
  {
    v287 = sub_20F91EE88(v286, *(_QWORD *)(a1 + 1312), v264);
    for (m = *(_QWORD *)(a1 + 1312); m != v287; m -= 360)
    {
      v293 = *(std::__shared_weak_count **)(m - 16);
      if (v293)
      {
        v294 = (unint64_t *)&v293->__shared_owners_;
        do
          v295 = __ldaxr(v294);
        while (__stlxr(v295 - 1, v294));
        if (!v295)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
    }
    *(_QWORD *)(a1 + 1312) = v287;
  }
  v289 = *(_QWORD **)(a1 + 1328);
  v290 = *(_QWORD **)(a1 + 1336);
  if (v289 == v290)
  {
    v291 = *(_QWORD **)(a1 + 1328);
  }
  else
  {
    v291 = *(_QWORD **)(a1 + 1336);
    v292 = v289 + 14;
    while (!*((_BYTE *)v292 - 8))
    {
      v47 = v292 == v290;
      v292 += 14;
      if (v47)
        goto LABEL_390;
    }
    --*(_DWORD *)(*(v292 - 8) + 8);
    *(v292 - 8) = 0;
    v296.i64[0] = -1;
    v296.i64[1] = -1;
    *v2 = vaddq_s64(*v2, v296);
    v297 = v292 - 14;
    if (v292 - 14 != v290)
    {
      if (v292 == v290)
      {
        v291 = v292 - 14;
      }
      else
      {
        v298.i64[0] = -1;
        v298.i64[1] = -1;
        v291 = v292 - 14;
        do
        {
          while (1)
          {
            v299 = v292;
            if (!*((_BYTE *)v297 + 216))
              break;
            --*(_DWORD *)(v297[20] + 8);
            v297[20] = 0;
            *v2 = vaddq_s64(*v2, v298);
            v292 += 14;
            v297 = v299;
            if (v299 + 14 == v290)
              goto LABEL_390;
          }
          *v291 = *v292;
          v300 = *(_OWORD *)(v297 + 15);
          v301 = *(_OWORD *)(v297 + 17);
          v291[5] = v297[19];
          *(_OWORD *)(v291 + 3) = v301;
          *(_OWORD *)(v291 + 1) = v300;
          v291[6] = v297[20];
          v291[7] = v297[21];
          v291[8] = v297[22];
          v302 = v297[23];
          *((_BYTE *)v291 + 80) = *((_BYTE *)v297 + 192);
          v291[9] = v302;
          v303 = *(_OWORD *)(v297 + 25);
          v297[25] = 0;
          v297[26] = 0;
          v304 = (std::__shared_weak_count *)v291[12];
          *(_OWORD *)(v291 + 11) = v303;
          if (v304)
          {
            v305 = (unint64_t *)&v304->__shared_owners_;
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
              v298.i64[0] = -1;
              v298.i64[1] = -1;
            }
          }
          *((_BYTE *)v291 + 104) = *((_BYTE *)v297 + 216);
          v291 += 14;
          v292 = v299 + 14;
          v297 = v299;
        }
        while (v299 + 14 != v290);
      }
    }
  }
LABEL_390:
  v307 = *(_QWORD **)(a1 + 1336);
  if (v291 != v307)
  {
    while (v307 != v291)
    {
      v308 = (std::__shared_weak_count *)*(v307 - 2);
      if (v308)
      {
        v309 = (unint64_t *)&v308->__shared_owners_;
        do
          v310 = __ldaxr(v309);
        while (__stlxr(v310 - 1, v309));
        if (!v310)
        {
          ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
          std::__shared_weak_count::__release_weak(v308);
        }
      }
      v307 -= 14;
    }
    *(_QWORD *)(a1 + 1336) = v291;
  }
  v311 = *(_QWORD **)(a1 + 1352);
  v312 = *(_QWORD **)(a1 + 1360);
  if (v311 == v312)
  {
    v313 = *(_QWORD **)(a1 + 1352);
  }
  else
  {
    v313 = *(_QWORD **)(a1 + 1360);
    v314 = v311 + 26;
    while (!*((_BYTE *)v314 - 8))
    {
      v47 = v314 == v312;
      v314 += 26;
      if (v47)
        goto LABEL_426;
    }
    --*(_DWORD *)(*(v314 - 14) + 8);
    *(v314 - 14) = 0;
    v315 = (int64x2_t)xmmword_2103B8440;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8440);
    v316 = v314 - 26;
    if (v314 - 26 != v312)
    {
      if (v314 == v312)
      {
        v313 = v314 - 26;
      }
      else
      {
        v313 = v314 - 26;
        do
        {
          while (1)
          {
            v317 = v314;
            if (!*((_BYTE *)v316 + 408))
              break;
            --*(_DWORD *)(v316[38] + 8);
            v316[38] = 0;
            *v2 = vaddq_s64(*v2, v315);
            v314 += 26;
            v316 = v317;
            if (v317 + 26 == v312)
              goto LABEL_426;
          }
          *v313 = *v314;
          *(_OWORD *)(v313 + 1) = *(_OWORD *)(v316 + 27);
          v318 = *(_OWORD *)(v316 + 29);
          *(_OWORD *)(v313 + 5) = *(_OWORD *)(v316 + 31);
          *(_OWORD *)(v313 + 3) = v318;
          v319 = v313 + 7;
          v320 = v316 + 33;
          if (*((unsigned __int8 *)v313 + 88) == *((unsigned __int8 *)v316 + 296))
          {
            if (*((_BYTE *)v313 + 88))
            {
              v321 = *(_OWORD *)(v316 + 35);
              *v319 = *v320;
              *(_OWORD *)(v313 + 9) = v321;
            }
          }
          else if (*((_BYTE *)v313 + 88))
          {
            *((_BYTE *)v313 + 88) = 0;
          }
          else
          {
            v322 = *(_OWORD *)(v316 + 35);
            *v319 = *v320;
            *(_OWORD *)(v313 + 9) = v322;
            *((_BYTE *)v313 + 88) = 1;
          }
          v313[12] = v316[38];
          v323 = *(_OWORD *)(v316 + 39);
          *(_OWORD *)(v313 + 15) = *(_OWORD *)(v316 + 41);
          *(_OWORD *)(v313 + 13) = v323;
          v324 = *(_OWORD *)(v316 + 43);
          *(_OWORD *)(v313 + 19) = *(_OWORD *)(v316 + 45);
          *(_OWORD *)(v313 + 17) = v324;
          v325 = v316[47];
          *((_BYTE *)v313 + 176) = *((_BYTE *)v316 + 384);
          v313[21] = v325;
          v326 = *(_OWORD *)(v316 + 49);
          v316[50] = 0;
          v316[49] = 0;
          v327 = (std::__shared_weak_count *)v313[24];
          *(_OWORD *)(v313 + 23) = v326;
          if (v327)
          {
            v328 = (unint64_t *)&v327->__shared_owners_;
            do
              v329 = __ldaxr(v328);
            while (__stlxr(v329 - 1, v328));
            if (!v329)
            {
              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
              std::__shared_weak_count::__release_weak(v327);
              v315 = (int64x2_t)xmmword_2103B8440;
            }
          }
          *((_BYTE *)v313 + 200) = *((_BYTE *)v316 + 408);
          v313 += 26;
          v314 = v317 + 26;
          v316 = v317;
        }
        while (v317 + 26 != v312);
      }
    }
  }
LABEL_426:
  v330 = *(_QWORD **)(a1 + 1360);
  if (v313 != v330)
  {
    while (v330 != v313)
    {
      v331 = (std::__shared_weak_count *)*(v330 - 2);
      if (v331)
      {
        v332 = (unint64_t *)&v331->__shared_owners_;
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        if (!v333)
        {
          ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
          std::__shared_weak_count::__release_weak(v331);
        }
      }
      v330 -= 26;
    }
    *(_QWORD *)(a1 + 1360) = v313;
  }
  v334 = *(_QWORD **)(a1 + 1376);
  v335 = *(_QWORD **)(a1 + 1384);
  if (v334 == v335)
  {
    v336 = *(_QWORD **)(a1 + 1376);
  }
  else
  {
    v336 = *(_QWORD **)(a1 + 1384);
    v337 = v334 + 26;
    while (!*((_BYTE *)v337 - 8))
    {
      v47 = v337 == v335;
      v337 += 26;
      if (v47)
        goto LABEL_462;
    }
    --*(_DWORD *)(*(v337 - 14) + 8);
    *(v337 - 14) = 0;
    v338 = (int64x2_t)xmmword_2103B8440;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8440);
    v339 = v337 - 26;
    if (v337 - 26 != v335)
    {
      if (v337 == v335)
      {
        v336 = v337 - 26;
      }
      else
      {
        v336 = v337 - 26;
        do
        {
          while (1)
          {
            v340 = v337;
            if (!*((_BYTE *)v339 + 408))
              break;
            --*(_DWORD *)(v339[38] + 8);
            v339[38] = 0;
            *v2 = vaddq_s64(*v2, v338);
            v337 += 26;
            v339 = v340;
            if (v340 + 26 == v335)
              goto LABEL_462;
          }
          *v336 = *v337;
          *(_OWORD *)(v336 + 1) = *(_OWORD *)(v339 + 27);
          v341 = *(_OWORD *)(v339 + 29);
          *(_OWORD *)(v336 + 5) = *(_OWORD *)(v339 + 31);
          *(_OWORD *)(v336 + 3) = v341;
          v342 = v336 + 7;
          v343 = v339 + 33;
          if (*((unsigned __int8 *)v336 + 88) == *((unsigned __int8 *)v339 + 296))
          {
            if (*((_BYTE *)v336 + 88))
            {
              v344 = *(_OWORD *)(v339 + 35);
              *v342 = *v343;
              *(_OWORD *)(v336 + 9) = v344;
            }
          }
          else if (*((_BYTE *)v336 + 88))
          {
            *((_BYTE *)v336 + 88) = 0;
          }
          else
          {
            v345 = *(_OWORD *)(v339 + 35);
            *v342 = *v343;
            *(_OWORD *)(v336 + 9) = v345;
            *((_BYTE *)v336 + 88) = 1;
          }
          v336[12] = v339[38];
          v346 = *(_OWORD *)(v339 + 39);
          *(_OWORD *)(v336 + 15) = *(_OWORD *)(v339 + 41);
          *(_OWORD *)(v336 + 13) = v346;
          v347 = *(_OWORD *)(v339 + 43);
          *(_OWORD *)(v336 + 19) = *(_OWORD *)(v339 + 45);
          *(_OWORD *)(v336 + 17) = v347;
          v348 = v339[47];
          *((_BYTE *)v336 + 176) = *((_BYTE *)v339 + 384);
          v336[21] = v348;
          v349 = *(_OWORD *)(v339 + 49);
          v339[50] = 0;
          v339[49] = 0;
          v350 = (std::__shared_weak_count *)v336[24];
          *(_OWORD *)(v336 + 23) = v349;
          if (v350)
          {
            v351 = (unint64_t *)&v350->__shared_owners_;
            do
              v352 = __ldaxr(v351);
            while (__stlxr(v352 - 1, v351));
            if (!v352)
            {
              ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
              std::__shared_weak_count::__release_weak(v350);
              v338 = (int64x2_t)xmmword_2103B8440;
            }
          }
          *((_BYTE *)v336 + 200) = *((_BYTE *)v339 + 408);
          v336 += 26;
          v337 = v340 + 26;
          v339 = v340;
        }
        while (v340 + 26 != v335);
      }
    }
  }
LABEL_462:
  v353 = *(_QWORD **)(a1 + 1384);
  if (v336 != v353)
  {
    while (v353 != v336)
    {
      v354 = (std::__shared_weak_count *)*(v353 - 2);
      if (v354)
      {
        v355 = (unint64_t *)&v354->__shared_owners_;
        do
          v356 = __ldaxr(v355);
        while (__stlxr(v356 - 1, v355));
        if (!v356)
        {
          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
          std::__shared_weak_count::__release_weak(v354);
        }
      }
      v353 -= 26;
    }
    *(_QWORD *)(a1 + 1384) = v336;
  }
  v357 = *(_QWORD **)(a1 + 1400);
  v358 = *(_QWORD **)(a1 + 1408);
  if (v357 == v358)
  {
    v359 = *(_QWORD **)(a1 + 1400);
  }
  else
  {
    v359 = *(_QWORD **)(a1 + 1408);
    v360 = v357 + 22;
    while (!*((_BYTE *)v360 - 8))
    {
      v47 = v360 == v358;
      v360 += 22;
      if (v47)
        goto LABEL_498;
    }
    --*(_DWORD *)(*(v360 - 12) + 8);
    *(v360 - 12) = 0;
    v361 = (int64x2_t)xmmword_2103B8430;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8430);
    v362 = v360 - 22;
    if (v360 - 22 != v358)
    {
      if (v360 == v358)
      {
        v359 = v360 - 22;
      }
      else
      {
        v359 = v360 - 22;
        do
        {
          while (1)
          {
            v363 = v360;
            if (!*((_BYTE *)v362 + 344))
              break;
            --*(_DWORD *)(v362[32] + 8);
            v362[32] = 0;
            *v2 = vaddq_s64(*v2, v361);
            v360 += 22;
            v362 = v363;
            if (v363 + 22 == v358)
              goto LABEL_498;
          }
          *v359 = *v360;
          *(_OWORD *)(v359 + 1) = *(_OWORD *)(v362 + 23);
          v364 = *(_OWORD *)(v362 + 25);
          v359[5] = v362[27];
          *(_OWORD *)(v359 + 3) = v364;
          v365 = v359 + 6;
          v366 = (__int128 *)(v362 + 28);
          if (*((unsigned __int8 *)v359 + 72) == *((unsigned __int8 *)v362 + 248))
          {
            if (*((_BYTE *)v359 + 72))
            {
              v367 = *v366;
              v359[8] = v362[30];
              *v365 = v367;
            }
          }
          else if (*((_BYTE *)v359 + 72))
          {
            *((_BYTE *)v359 + 72) = 0;
          }
          else
          {
            v368 = *v366;
            v359[8] = v362[30];
            *v365 = v368;
            *((_BYTE *)v359 + 72) = 1;
          }
          v359[10] = v362[32];
          v369 = *(_OWORD *)(v362 + 33);
          v359[13] = v362[35];
          *(_OWORD *)(v359 + 11) = v369;
          v370 = *((_OWORD *)v362 + 18);
          v359[16] = v362[38];
          *((_OWORD *)v359 + 7) = v370;
          v371 = v362[39];
          *((_BYTE *)v359 + 144) = *((_BYTE *)v362 + 320);
          v359[17] = v371;
          v372 = *(_OWORD *)(v362 + 41);
          v362[42] = 0;
          v362[41] = 0;
          v373 = (std::__shared_weak_count *)v359[20];
          *(_OWORD *)(v359 + 19) = v372;
          if (v373)
          {
            v374 = (unint64_t *)&v373->__shared_owners_;
            do
              v375 = __ldaxr(v374);
            while (__stlxr(v375 - 1, v374));
            if (!v375)
            {
              ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
              std::__shared_weak_count::__release_weak(v373);
              v361 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *((_BYTE *)v359 + 168) = *((_BYTE *)v362 + 344);
          v359 += 22;
          v360 = v363 + 22;
          v362 = v363;
        }
        while (v363 + 22 != v358);
      }
    }
  }
LABEL_498:
  v376 = *(_QWORD **)(a1 + 1408);
  if (v359 != v376)
  {
    while (v376 != v359)
    {
      v377 = (std::__shared_weak_count *)*(v376 - 2);
      if (v377)
      {
        v378 = (unint64_t *)&v377->__shared_owners_;
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
          std::__shared_weak_count::__release_weak(v377);
        }
      }
      v376 -= 22;
    }
    *(_QWORD *)(a1 + 1408) = v359;
  }
  v380 = *(_QWORD **)(a1 + 1424);
  v381 = *(_QWORD **)(a1 + 1432);
  if (v380 == v381)
  {
    v382 = *(_QWORD **)(a1 + 1424);
  }
  else
  {
    v382 = *(_QWORD **)(a1 + 1432);
    v383 = v380 + 22;
    while (!*((_BYTE *)v383 - 8))
    {
      v47 = v383 == v381;
      v383 += 22;
      if (v47)
        goto LABEL_534;
    }
    --*(_DWORD *)(*(v383 - 12) + 8);
    *(v383 - 12) = 0;
    v384 = (int64x2_t)xmmword_2103B8430;
    *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_2103B8430);
    v385 = v383 - 22;
    if (v383 - 22 != v381)
    {
      if (v383 == v381)
      {
        v382 = v383 - 22;
      }
      else
      {
        v382 = v383 - 22;
        do
        {
          while (1)
          {
            v386 = v383;
            if (!*((_BYTE *)v385 + 344))
              break;
            --*(_DWORD *)(v385[32] + 8);
            v385[32] = 0;
            *v2 = vaddq_s64(*v2, v384);
            v383 += 22;
            v385 = v386;
            if (v386 + 22 == v381)
              goto LABEL_534;
          }
          *v382 = *v383;
          *(_OWORD *)(v382 + 1) = *(_OWORD *)(v385 + 23);
          v387 = *(_OWORD *)(v385 + 25);
          v382[5] = v385[27];
          *(_OWORD *)(v382 + 3) = v387;
          v388 = v382 + 6;
          v389 = (__int128 *)(v385 + 28);
          if (*((unsigned __int8 *)v382 + 72) == *((unsigned __int8 *)v385 + 248))
          {
            if (*((_BYTE *)v382 + 72))
            {
              v390 = *v389;
              v382[8] = v385[30];
              *v388 = v390;
            }
          }
          else if (*((_BYTE *)v382 + 72))
          {
            *((_BYTE *)v382 + 72) = 0;
          }
          else
          {
            v391 = *v389;
            v382[8] = v385[30];
            *v388 = v391;
            *((_BYTE *)v382 + 72) = 1;
          }
          v382[10] = v385[32];
          v392 = *(_OWORD *)(v385 + 33);
          v382[13] = v385[35];
          *(_OWORD *)(v382 + 11) = v392;
          v393 = *((_OWORD *)v385 + 18);
          v382[16] = v385[38];
          *((_OWORD *)v382 + 7) = v393;
          v394 = v385[39];
          *((_BYTE *)v382 + 144) = *((_BYTE *)v385 + 320);
          v382[17] = v394;
          v395 = *(_OWORD *)(v385 + 41);
          v385[42] = 0;
          v385[41] = 0;
          v396 = (std::__shared_weak_count *)v382[20];
          *(_OWORD *)(v382 + 19) = v395;
          if (v396)
          {
            v397 = (unint64_t *)&v396->__shared_owners_;
            do
              v398 = __ldaxr(v397);
            while (__stlxr(v398 - 1, v397));
            if (!v398)
            {
              ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
              std::__shared_weak_count::__release_weak(v396);
              v384 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *((_BYTE *)v382 + 168) = *((_BYTE *)v385 + 344);
          v382 += 22;
          v383 = v386 + 22;
          v385 = v386;
        }
        while (v386 + 22 != v381);
      }
    }
  }
LABEL_534:
  v399 = *(_QWORD **)(a1 + 1432);
  if (v382 != v399)
  {
    while (v399 != v382)
    {
      v400 = (std::__shared_weak_count *)*(v399 - 2);
      if (v400)
      {
        v401 = (unint64_t *)&v400->__shared_owners_;
        do
          v402 = __ldaxr(v401);
        while (__stlxr(v402 - 1, v401));
        if (!v402)
        {
          ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
          std::__shared_weak_count::__release_weak(v400);
        }
      }
      v399 -= 22;
    }
    *(_QWORD *)(a1 + 1432) = v382;
  }
  v403 = *(_QWORD *)(a1 + 1448);
  v404 = *(_QWORD **)(a1 + 1456);
  if ((_QWORD *)v403 == v404)
    goto LABEL_561;
  v405 = *(_QWORD *)(a1 + 1456);
  while (!*(_BYTE *)(v403 + 208))
  {
    v403 += 216;
    if ((_QWORD *)v403 == v404)
      goto LABEL_562;
  }
  v406 = *(_QWORD *)(v403 + 64);
  --*(_DWORD *)(*(_QWORD *)(v403 + 56) + 8);
  --*(_DWORD *)(v406 + 8);
  v407 = *(_QWORD *)(v403 + 80);
  --*(_DWORD *)(*(_QWORD *)(v403 + 72) + 8);
  --*(_DWORD *)(v407 + 8);
  v408 = *(_QWORD *)(v403 + 96);
  --*(_DWORD *)(*(_QWORD *)(v403 + 88) + 8);
  --*(_DWORD *)(v408 + 8);
  v409 = *(_QWORD *)(v403 + 112);
  --*(_DWORD *)(*(_QWORD *)(v403 + 104) + 8);
  --*(_DWORD *)(v409 + 8);
  v410 = *(_QWORD *)(v403 + 128);
  --*(_DWORD *)(*(_QWORD *)(v403 + 120) + 8);
  *(_OWORD *)(v403 + 56) = 0u;
  *(_OWORD *)(v403 + 72) = 0u;
  *(_OWORD *)(v403 + 88) = 0u;
  *(_OWORD *)(v403 + 104) = 0u;
  --*(_DWORD *)(v410 + 8);
  *(_OWORD *)(v403 + 120) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v403 + 136) + 8);
  *(_QWORD *)(v403 + 136) = 0;
  v411 = (int64x2_t)xmmword_210378050;
  *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_210378050);
  if ((_QWORD *)v403 != v404)
  {
    v412 = (_QWORD *)(v403 + 216);
    if ((_QWORD *)(v403 + 216) != v404)
    {
      v413 = 0uLL;
      v405 = v403;
      do
      {
        while (1)
        {
          v419 = v412;
          if (!*(_BYTE *)(v403 + 424))
            break;
          v414 = *(_QWORD *)(v403 + 280);
          --*(_DWORD *)(*(_QWORD *)(v403 + 272) + 8);
          --*(_DWORD *)(v414 + 8);
          v415 = *(_QWORD *)(v403 + 296);
          --*(_DWORD *)(*(_QWORD *)(v403 + 288) + 8);
          --*(_DWORD *)(v415 + 8);
          v416 = *(_QWORD *)(v403 + 312);
          --*(_DWORD *)(*(_QWORD *)(v403 + 304) + 8);
          --*(_DWORD *)(v416 + 8);
          v417 = *(_QWORD *)(v403 + 328);
          --*(_DWORD *)(*(_QWORD *)(v403 + 320) + 8);
          --*(_DWORD *)(v417 + 8);
          v418 = *(_QWORD *)(v403 + 344);
          --*(_DWORD *)(*(_QWORD *)(v403 + 336) + 8);
          *(_OWORD *)(v403 + 272) = v413;
          *(_OWORD *)(v403 + 288) = v413;
          *(_OWORD *)(v403 + 304) = v413;
          *(_OWORD *)(v403 + 320) = v413;
          --*(_DWORD *)(v418 + 8);
          *(_OWORD *)(v403 + 336) = v413;
          --*(_DWORD *)(*(_QWORD *)(v403 + 352) + 8);
          *(_QWORD *)(v403 + 352) = 0;
          *v2 = vaddq_s64(*v2, v411);
          v412 += 27;
          v403 = (uint64_t)v419;
          if (v419 + 27 == v404)
            goto LABEL_562;
        }
        *(_QWORD *)v405 = *v412;
        *(_QWORD *)(v405 + 8) = *(_QWORD *)(v403 + 224);
        *(_OWORD *)(v405 + 16) = *(_OWORD *)(v403 + 232);
        v420 = *(_OWORD *)(v403 + 248);
        *(_QWORD *)(v405 + 48) = *(_QWORD *)(v403 + 264);
        *(_OWORD *)(v405 + 32) = v420;
        *(_QWORD *)(v405 + 56) = *(_QWORD *)(v403 + 272);
        *(_QWORD *)(v405 + 64) = *(_QWORD *)(v403 + 280);
        *(_QWORD *)(v405 + 72) = *(_QWORD *)(v403 + 288);
        *(_QWORD *)(v405 + 80) = *(_QWORD *)(v403 + 296);
        *(_QWORD *)(v405 + 88) = *(_QWORD *)(v403 + 304);
        *(_QWORD *)(v405 + 96) = *(_QWORD *)(v403 + 312);
        *(_QWORD *)(v405 + 104) = *(_QWORD *)(v403 + 320);
        *(_QWORD *)(v405 + 112) = *(_QWORD *)(v403 + 328);
        *(_QWORD *)(v405 + 120) = *(_QWORD *)(v403 + 336);
        *(_QWORD *)(v405 + 128) = *(_QWORD *)(v403 + 344);
        *(_QWORD *)(v405 + 136) = *(_QWORD *)(v403 + 352);
        *(_OWORD *)(v405 + 144) = *(_OWORD *)(v403 + 360);
        *(_OWORD *)(v405 + 160) = *(_OWORD *)(v403 + 376);
        v421 = *(_QWORD *)(v403 + 392);
        *(_BYTE *)(v405 + 184) = *(_BYTE *)(v403 + 400);
        *(_QWORD *)(v405 + 176) = v421;
        v422 = *(_OWORD *)(v403 + 408);
        *(_QWORD *)(v403 + 416) = 0;
        *(_QWORD *)(v403 + 408) = 0;
        v423 = *(std::__shared_weak_count **)(v405 + 200);
        *(_OWORD *)(v405 + 192) = v422;
        if (v423)
        {
          v424 = (unint64_t *)&v423->__shared_owners_;
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 - 1, v424));
          if (!v425)
          {
            ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
            std::__shared_weak_count::__release_weak(v423);
            v413 = 0uLL;
            v411 = (int64x2_t)xmmword_210378050;
          }
        }
        *(_BYTE *)(v405 + 208) = *(_BYTE *)(v403 + 424);
        v405 += 216;
        v412 = v419 + 27;
        v403 = (uint64_t)v419;
      }
      while (v419 + 27 != v404);
      goto LABEL_562;
    }
LABEL_561:
    v405 = v403;
  }
LABEL_562:
  v426 = *(_QWORD *)(a1 + 1456);
  if (v426 != v405)
  {
    v427 = sub_20F5B6E44(v426, *(_QWORD *)(a1 + 1456), v405);
    for (n = *(_QWORD *)(a1 + 1456); n != v427; n -= 216)
    {
      v432 = *(std::__shared_weak_count **)(n - 16);
      if (v432)
      {
        v433 = (unint64_t *)&v432->__shared_owners_;
        do
          v434 = __ldaxr(v433);
        while (__stlxr(v434 - 1, v433));
        if (!v434)
        {
          ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
          std::__shared_weak_count::__release_weak(v432);
        }
      }
    }
    *(_QWORD *)(a1 + 1456) = v427;
  }
  v429 = *(_QWORD **)(a1 + 1472);
  v430 = *(_QWORD **)(a1 + 1480);
  if (v429 == v430)
    goto LABEL_588;
  v431 = *(_QWORD **)(a1 + 1480);
  while (!*((_BYTE *)v429 + 176))
  {
    v429 += 23;
    if (v429 == v430)
      goto LABEL_589;
  }
  v435 = v429[9];
  --*(_DWORD *)(v429[8] + 8);
  --*(_DWORD *)(v435 + 8);
  v436 = v429[11];
  --*(_DWORD *)(v429[10] + 8);
  --*(_DWORD *)(v436 + 8);
  v437 = v429[13];
  --*(_DWORD *)(v429[12] + 8);
  *((_OWORD *)v429 + 4) = 0u;
  *((_OWORD *)v429 + 5) = 0u;
  --*(_DWORD *)(v437 + 8);
  *((_OWORD *)v429 + 6) = 0u;
  v438 = (int64x2_t)xmmword_210378050;
  *v2 = vaddq_s64(*v2, (int64x2_t)xmmword_210378050);
  if (v429 != v430)
  {
    v439 = v429 + 23;
    if (v429 + 23 != v430)
    {
      v440 = 0uLL;
      v431 = v429;
      do
      {
        while (1)
        {
          v444 = v439;
          if (!*((_BYTE *)v429 + 360))
            break;
          v441 = v429[32];
          --*(_DWORD *)(v429[31] + 8);
          --*(_DWORD *)(v441 + 8);
          v442 = v429[34];
          --*(_DWORD *)(v429[33] + 8);
          *(_OWORD *)(v429 + 31) = v440;
          --*(_DWORD *)(v442 + 8);
          v443 = v429[36];
          --*(_DWORD *)(v429[35] + 8);
          --*(_DWORD *)(v443 + 8);
          *(_OWORD *)(v429 + 33) = v440;
          *(_OWORD *)(v429 + 35) = v440;
          *v2 = vaddq_s64(*v2, v438);
          v439 += 23;
          v429 = v444;
          if (v444 + 23 == v430)
            goto LABEL_589;
        }
        *v431 = *v439;
        v431[1] = v429[24];
        *((_OWORD *)v431 + 1) = *(_OWORD *)(v429 + 25);
        v445 = *(_OWORD *)(v429 + 29);
        *((_OWORD *)v431 + 2) = *(_OWORD *)(v429 + 27);
        *((_OWORD *)v431 + 3) = v445;
        v431[8] = v429[31];
        v431[9] = v429[32];
        v431[10] = v429[33];
        v431[11] = v429[34];
        v431[12] = v429[35];
        v431[13] = v429[36];
        *((_OWORD *)v431 + 7) = *(_OWORD *)(v429 + 37);
        *((_OWORD *)v431 + 8) = *(_OWORD *)(v429 + 39);
        v446 = v429[41];
        *((_BYTE *)v431 + 152) = *((_BYTE *)v429 + 336);
        v431[18] = v446;
        v447 = *(_OWORD *)(v429 + 43);
        v429[43] = 0;
        v429[44] = 0;
        v448 = (std::__shared_weak_count *)v431[21];
        *((_OWORD *)v431 + 10) = v447;
        if (v448)
        {
          v449 = (unint64_t *)&v448->__shared_owners_;
          do
            v450 = __ldaxr(v449);
          while (__stlxr(v450 - 1, v449));
          if (!v450)
          {
            ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
            std::__shared_weak_count::__release_weak(v448);
            v440 = 0uLL;
            v438 = (int64x2_t)xmmword_210378050;
          }
        }
        *((_BYTE *)v431 + 176) = *((_BYTE *)v429 + 360);
        v431 += 23;
        v439 = v444 + 23;
        v429 = v444;
      }
      while (v444 + 23 != v430);
      goto LABEL_589;
    }
LABEL_588:
    v431 = v429;
  }
LABEL_589:
  v451 = *(_QWORD **)(a1 + 1480);
  if (v431 != v451)
  {
    while (v451 != v431)
    {
      v452 = (std::__shared_weak_count *)*(v451 - 2);
      if (v452)
      {
        v453 = (unint64_t *)&v452->__shared_owners_;
        do
          v454 = __ldaxr(v453);
        while (__stlxr(v454 - 1, v453));
        if (!v454)
        {
          ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
          std::__shared_weak_count::__release_weak(v452);
        }
      }
      v451 -= 23;
    }
    *(_QWORD *)(a1 + 1480) = v431;
  }
  v455 = *(_QWORD *)(a1 + 1496);
  v456 = *(_QWORD **)(a1 + 1504);
  if ((_QWORD *)v455 == v456)
    goto LABEL_616;
  v457 = *(_QWORD *)(a1 + 1504);
  while (!*(_BYTE *)(v455 + 200))
  {
    v455 += 208;
    if ((_QWORD *)v455 == v456)
      goto LABEL_617;
  }
  v458 = *(_QWORD *)(v455 + 72);
  --*(_DWORD *)(*(_QWORD *)(v455 + 64) + 8);
  --*(_DWORD *)(v458 + 8);
  v459 = *(_QWORD *)(v455 + 88);
  --*(_DWORD *)(*(_QWORD *)(v455 + 80) + 8);
  --*(_DWORD *)(v459 + 8);
  v460 = *(_QWORD *)(v455 + 104);
  --*(_DWORD *)(*(_QWORD *)(v455 + 96) + 8);
  --*(_DWORD *)(v460 + 8);
  v461 = *(_QWORD *)(v455 + 120);
  --*(_DWORD *)(*(_QWORD *)(v455 + 112) + 8);
  --*(_DWORD *)(v461 + 8);
  v462 = *(_QWORD *)(v455 + 136);
  --*(_DWORD *)(*(_QWORD *)(v455 + 128) + 8);
  *(_OWORD *)(v455 + 64) = 0u;
  *(_OWORD *)(v455 + 80) = 0u;
  *(_OWORD *)(v455 + 96) = 0u;
  *(_OWORD *)(v455 + 112) = 0u;
  --*(_DWORD *)(v462 + 8);
  *(_OWORD *)(v455 + 128) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v455 + 144) + 8);
  *(_QWORD *)(v455 + 144) = 0;
  v463.i64[0] = -1;
  v463.i64[1] = -1;
  *v2 = vaddq_s64(*v2, v463);
  if ((_QWORD *)v455 != v456)
  {
    v464 = (_QWORD *)(v455 + 208);
    if ((_QWORD *)(v455 + 208) != v456)
    {
      v465 = 0uLL;
      v466.i64[0] = -1;
      v466.i64[1] = -1;
      v457 = v455;
      do
      {
        while (1)
        {
          v472 = v464;
          if (!*(_BYTE *)(v455 + 408))
            break;
          v467 = *(_QWORD *)(v455 + 280);
          --*(_DWORD *)(*(_QWORD *)(v455 + 272) + 8);
          --*(_DWORD *)(v467 + 8);
          v468 = *(_QWORD *)(v455 + 296);
          --*(_DWORD *)(*(_QWORD *)(v455 + 288) + 8);
          --*(_DWORD *)(v468 + 8);
          v469 = *(_QWORD *)(v455 + 312);
          --*(_DWORD *)(*(_QWORD *)(v455 + 304) + 8);
          --*(_DWORD *)(v469 + 8);
          v470 = *(_QWORD *)(v455 + 328);
          --*(_DWORD *)(*(_QWORD *)(v455 + 320) + 8);
          --*(_DWORD *)(v470 + 8);
          v471 = *(_QWORD *)(v455 + 344);
          --*(_DWORD *)(*(_QWORD *)(v455 + 336) + 8);
          *(_OWORD *)(v455 + 272) = v465;
          *(_OWORD *)(v455 + 288) = v465;
          *(_OWORD *)(v455 + 304) = v465;
          *(_OWORD *)(v455 + 320) = v465;
          --*(_DWORD *)(v471 + 8);
          *(_OWORD *)(v455 + 336) = v465;
          --*(_DWORD *)(*(_QWORD *)(v455 + 352) + 8);
          *(_QWORD *)(v455 + 352) = 0;
          *v2 = vaddq_s64(*v2, v466);
          v464 += 26;
          v455 = (uint64_t)v472;
          if (v472 + 26 == v456)
            goto LABEL_617;
        }
        *(_QWORD *)v457 = *v464;
        *(_QWORD *)(v457 + 8) = *(_QWORD *)(v455 + 216);
        v473 = *(_OWORD *)(v455 + 224);
        *(_QWORD *)(v457 + 32) = *(_QWORD *)(v455 + 240);
        *(_OWORD *)(v457 + 16) = v473;
        v474 = *(_OWORD *)(v455 + 248);
        *(_QWORD *)(v457 + 56) = *(_QWORD *)(v455 + 264);
        *(_OWORD *)(v457 + 40) = v474;
        *(_QWORD *)(v457 + 64) = *(_QWORD *)(v455 + 272);
        *(_QWORD *)(v457 + 72) = *(_QWORD *)(v455 + 280);
        *(_QWORD *)(v457 + 80) = *(_QWORD *)(v455 + 288);
        *(_QWORD *)(v457 + 88) = *(_QWORD *)(v455 + 296);
        *(_QWORD *)(v457 + 96) = *(_QWORD *)(v455 + 304);
        *(_QWORD *)(v457 + 104) = *(_QWORD *)(v455 + 312);
        *(_QWORD *)(v457 + 112) = *(_QWORD *)(v455 + 320);
        *(_QWORD *)(v457 + 120) = *(_QWORD *)(v455 + 328);
        *(_QWORD *)(v457 + 128) = *(_QWORD *)(v455 + 336);
        *(_QWORD *)(v457 + 136) = *(_QWORD *)(v455 + 344);
        *(_QWORD *)(v457 + 144) = *(_QWORD *)(v455 + 352);
        *(_QWORD *)(v457 + 152) = *(_QWORD *)(v455 + 360);
        *(_QWORD *)(v457 + 160) = *(_QWORD *)(v455 + 368);
        v475 = *(_QWORD *)(v455 + 376);
        *(_BYTE *)(v457 + 176) = *(_BYTE *)(v455 + 384);
        *(_QWORD *)(v457 + 168) = v475;
        v476 = *(_OWORD *)(v455 + 392);
        *(_QWORD *)(v455 + 392) = 0;
        *(_QWORD *)(v455 + 400) = 0;
        v477 = *(std::__shared_weak_count **)(v457 + 192);
        *(_OWORD *)(v457 + 184) = v476;
        if (v477)
        {
          v478 = (unint64_t *)&v477->__shared_owners_;
          do
            v479 = __ldaxr(v478);
          while (__stlxr(v479 - 1, v478));
          if (!v479)
          {
            ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
            std::__shared_weak_count::__release_weak(v477);
            v466.i64[0] = -1;
            v466.i64[1] = -1;
            v465 = 0uLL;
          }
        }
        *(_BYTE *)(v457 + 200) = *(_BYTE *)(v455 + 408);
        v457 += 208;
        v464 = v472 + 26;
        v455 = (uint64_t)v472;
      }
      while (v472 + 26 != v456);
      goto LABEL_617;
    }
LABEL_616:
    v457 = v455;
  }
LABEL_617:
  v480 = *(_QWORD *)(a1 + 1504);
  if (v480 != v457)
  {
    v481 = sub_20F91F01C(v480, *(_QWORD *)(a1 + 1504), v457);
    for (ii = *(_QWORD *)(a1 + 1504); ii != v481; ii -= 208)
    {
      v486 = *(std::__shared_weak_count **)(ii - 16);
      if (v486)
      {
        v487 = (unint64_t *)&v486->__shared_owners_;
        do
          v488 = __ldaxr(v487);
        while (__stlxr(v488 - 1, v487));
        if (!v488)
        {
          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
          std::__shared_weak_count::__release_weak(v486);
        }
      }
    }
    *(_QWORD *)(a1 + 1504) = v481;
  }
LABEL_620:
  v483 = *(_QWORD *)(a1 + 8);
  v484 = *(_QWORD *)(a1 + 16);
  if (v484 != v483)
  {
    v485 = -16 - v484;
    do
    {
      while (1)
      {
        while (1)
        {
          v489 = *(_QWORD *)(v484 - 8);
          v484 -= 16;
          if ((*(_BYTE *)(v489 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v489 + 4) = 0;
          v485 += 16;
          if (v484 == v483)
            goto LABEL_639;
        }
        sub_20F3D7028(a1 + 32, v489);
        v490 = v484 + 16;
        v483 = *(_QWORD *)(a1 + 8);
        v491 = *(_QWORD *)(a1 + 16);
        if (v484 + 16 != v491)
          break;
        *(_QWORD *)(a1 + 16) = v484;
        v485 += 16;
        if (v484 == v483)
          goto LABEL_639;
      }
      v492 = v491 - v484 - 32;
      v493 = v484;
      if (v492 < 0x10)
        goto LABEL_837;
      v494 = (v492 >> 4) + 1;
      v495 = 16 * (v494 & 0x1FFFFFFFFFFFFFFELL);
      v493 = v484 + v495;
      v490 += v495;
      v496 = (((unint64_t)(v491 + v485) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v497 = v483 + 16 * ((v484 - v483) >> 4) + 24;
      do
      {
        v498 = *(_DWORD *)(v497 + 8);
        *(_DWORD *)(v497 - 24) = *(_DWORD *)(v497 - 8);
        *(_DWORD *)(v497 - 8) = v498;
        v499 = *(_QWORD *)(v497 + 16);
        *(_QWORD *)(v497 - 16) = *(_QWORD *)v497;
        *(_QWORD *)v497 = v499;
        v497 += 32;
        v496 -= 2;
      }
      while (v496);
      if (v494 != (v494 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_837:
        do
        {
          *(_DWORD *)v493 = *(_DWORD *)v490;
          *(_QWORD *)(v493 + 8) = *(_QWORD *)(v490 + 8);
          v493 += 16;
          v490 += 16;
        }
        while (v490 != v491);
      }
      *(_QWORD *)(a1 + 16) = v493;
      v485 += 16;
    }
    while (v484 != v483);
  }
LABEL_639:
  v500 = *(_QWORD *)(a1 + 104);
  v501 = *(_QWORD *)(a1 + 112);
  if (v501 != v500)
  {
    v502 = -16 - v501;
    do
    {
      while (1)
      {
        while (1)
        {
          v503 = *(_QWORD *)(v501 - 8);
          v501 -= 16;
          if ((*(_BYTE *)(v503 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v503 + 4) = 0;
          v502 += 16;
          if (v501 == v500)
            goto LABEL_652;
        }
        sub_20F5B6F80(a1 + 128, v503);
        v504 = v501 + 16;
        v500 = *(_QWORD *)(a1 + 104);
        v505 = *(_QWORD *)(a1 + 112);
        if (v501 + 16 != v505)
          break;
        *(_QWORD *)(a1 + 112) = v501;
        v502 += 16;
        if (v501 == v500)
          goto LABEL_652;
      }
      v506 = v505 - v501 - 32;
      v507 = v501;
      if (v506 < 0x10)
        goto LABEL_838;
      v508 = (v506 >> 4) + 1;
      v509 = 16 * (v508 & 0x1FFFFFFFFFFFFFFELL);
      v507 = v501 + v509;
      v504 += v509;
      v510 = (((unint64_t)(v505 + v502) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v511 = v500 + 16 * ((v501 - v500) >> 4) + 24;
      do
      {
        v512 = *(_DWORD *)(v511 + 8);
        *(_DWORD *)(v511 - 24) = *(_DWORD *)(v511 - 8);
        *(_DWORD *)(v511 - 8) = v512;
        v513 = *(_QWORD *)(v511 + 16);
        *(_QWORD *)(v511 - 16) = *(_QWORD *)v511;
        *(_QWORD *)v511 = v513;
        v511 += 32;
        v510 -= 2;
      }
      while (v510);
      if (v508 != (v508 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_838:
        do
        {
          *(_DWORD *)v507 = *(_DWORD *)v504;
          *(_QWORD *)(v507 + 8) = *(_QWORD *)(v504 + 8);
          v507 += 16;
          v504 += 16;
        }
        while (v504 != v505);
      }
      *(_QWORD *)(a1 + 112) = v507;
      v502 += 16;
    }
    while (v501 != v500);
  }
LABEL_652:
  v514 = *(_QWORD *)(a1 + 200);
  v515 = *(_QWORD *)(a1 + 208);
  if (v515 != v514)
  {
    v516 = -16 - v515;
    do
    {
      while (1)
      {
        while (1)
        {
          v517 = *(_QWORD *)(v515 - 8);
          v515 -= 16;
          if ((*(_BYTE *)(v517 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v517 + 4) = 0;
          v516 += 16;
          if (v515 == v514)
            goto LABEL_665;
        }
        sub_20F5B7580(a1 + 224, v517);
        v518 = v515 + 16;
        v514 = *(_QWORD *)(a1 + 200);
        v519 = *(_QWORD *)(a1 + 208);
        if (v515 + 16 != v519)
          break;
        *(_QWORD *)(a1 + 208) = v515;
        v516 += 16;
        if (v515 == v514)
          goto LABEL_665;
      }
      v520 = v519 - v515 - 32;
      v521 = v515;
      if (v520 < 0x10)
        goto LABEL_839;
      v522 = (v520 >> 4) + 1;
      v523 = 16 * (v522 & 0x1FFFFFFFFFFFFFFELL);
      v521 = v515 + v523;
      v518 += v523;
      v524 = (((unint64_t)(v519 + v516) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v525 = v514 + 16 * ((v515 - v514) >> 4) + 24;
      do
      {
        v526 = *(_DWORD *)(v525 + 8);
        *(_DWORD *)(v525 - 24) = *(_DWORD *)(v525 - 8);
        *(_DWORD *)(v525 - 8) = v526;
        v527 = *(_QWORD *)(v525 + 16);
        *(_QWORD *)(v525 - 16) = *(_QWORD *)v525;
        *(_QWORD *)v525 = v527;
        v525 += 32;
        v524 -= 2;
      }
      while (v524);
      if (v522 != (v522 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_839:
        do
        {
          *(_DWORD *)v521 = *(_DWORD *)v518;
          *(_QWORD *)(v521 + 8) = *(_QWORD *)(v518 + 8);
          v521 += 16;
          v518 += 16;
        }
        while (v518 != v519);
      }
      *(_QWORD *)(a1 + 208) = v521;
      v516 += 16;
    }
    while (v515 != v514);
  }
LABEL_665:
  v528 = *(_QWORD *)(a1 + 296);
  v529 = *(_QWORD *)(a1 + 304);
  if (v529 != v528)
  {
    v530 = -16 - v529;
    do
    {
      while (1)
      {
        while (1)
        {
          v531 = *(_QWORD *)(v529 - 8);
          v529 -= 16;
          if ((*(_BYTE *)(v531 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v531 + 4) = 0;
          v530 += 16;
          if (v529 == v528)
            goto LABEL_678;
        }
        sub_20F91F160(a1 + 320, v531);
        v532 = v529 + 16;
        v528 = *(_QWORD *)(a1 + 296);
        v533 = *(_QWORD *)(a1 + 304);
        if (v529 + 16 != v533)
          break;
        *(_QWORD *)(a1 + 304) = v529;
        v530 += 16;
        if (v529 == v528)
          goto LABEL_678;
      }
      v534 = v533 - v529 - 32;
      v535 = v529;
      if (v534 < 0x10)
        goto LABEL_840;
      v536 = (v534 >> 4) + 1;
      v537 = 16 * (v536 & 0x1FFFFFFFFFFFFFFELL);
      v535 = v529 + v537;
      v532 += v537;
      v538 = (((unint64_t)(v533 + v530) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v539 = v528 + 16 * ((v529 - v528) >> 4) + 24;
      do
      {
        v540 = *(_DWORD *)(v539 + 8);
        *(_DWORD *)(v539 - 24) = *(_DWORD *)(v539 - 8);
        *(_DWORD *)(v539 - 8) = v540;
        v541 = *(_QWORD *)(v539 + 16);
        *(_QWORD *)(v539 - 16) = *(_QWORD *)v539;
        *(_QWORD *)v539 = v541;
        v539 += 32;
        v538 -= 2;
      }
      while (v538);
      if (v536 != (v536 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_840:
        do
        {
          *(_DWORD *)v535 = *(_DWORD *)v532;
          *(_QWORD *)(v535 + 8) = *(_QWORD *)(v532 + 8);
          v535 += 16;
          v532 += 16;
        }
        while (v532 != v533);
      }
      *(_QWORD *)(a1 + 304) = v535;
      v530 += 16;
    }
    while (v529 != v528);
  }
LABEL_678:
  v542 = *(_QWORD *)(a1 + 392);
  v543 = *(_QWORD *)(a1 + 400);
  if (v543 != v542)
  {
    v544 = -16 - v543;
    do
    {
      while (1)
      {
        while (1)
        {
          v545 = *(_QWORD *)(v543 - 8);
          v543 -= 16;
          if ((*(_BYTE *)(v545 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v545 + 4) = 0;
          v544 += 16;
          if (v543 == v542)
            goto LABEL_691;
        }
        sub_20F91F46C(a1 + 416, v545);
        v546 = v543 + 16;
        v542 = *(_QWORD *)(a1 + 392);
        v547 = *(_QWORD *)(a1 + 400);
        if (v543 + 16 != v547)
          break;
        *(_QWORD *)(a1 + 400) = v543;
        v544 += 16;
        if (v543 == v542)
          goto LABEL_691;
      }
      v548 = v547 - v543 - 32;
      v549 = v543;
      if (v548 < 0x10)
        goto LABEL_841;
      v550 = (v548 >> 4) + 1;
      v551 = 16 * (v550 & 0x1FFFFFFFFFFFFFFELL);
      v549 = v543 + v551;
      v546 += v551;
      v552 = (((unint64_t)(v547 + v544) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v553 = v542 + 16 * ((v543 - v542) >> 4) + 24;
      do
      {
        v554 = *(_DWORD *)(v553 + 8);
        *(_DWORD *)(v553 - 24) = *(_DWORD *)(v553 - 8);
        *(_DWORD *)(v553 - 8) = v554;
        v555 = *(_QWORD *)(v553 + 16);
        *(_QWORD *)(v553 - 16) = *(_QWORD *)v553;
        *(_QWORD *)v553 = v555;
        v553 += 32;
        v552 -= 2;
      }
      while (v552);
      if (v550 != (v550 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_841:
        do
        {
          *(_DWORD *)v549 = *(_DWORD *)v546;
          *(_QWORD *)(v549 + 8) = *(_QWORD *)(v546 + 8);
          v549 += 16;
          v546 += 16;
        }
        while (v546 != v547);
      }
      *(_QWORD *)(a1 + 400) = v549;
      v544 += 16;
    }
    while (v543 != v542);
  }
LABEL_691:
  v556 = *(_QWORD *)(a1 + 488);
  v557 = *(_QWORD *)(a1 + 496);
  if (v557 != v556)
  {
    v558 = -16 - v557;
    do
    {
      while (1)
      {
        while (1)
        {
          v559 = *(_QWORD *)(v557 - 8);
          v557 -= 16;
          if ((*(_BYTE *)(v559 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v559 + 4) = 0;
          v558 += 16;
          if (v557 == v556)
            goto LABEL_704;
        }
        sub_20F5B7280(a1 + 512, v559);
        v560 = v557 + 16;
        v556 = *(_QWORD *)(a1 + 488);
        v561 = *(_QWORD *)(a1 + 496);
        if (v557 + 16 != v561)
          break;
        *(_QWORD *)(a1 + 496) = v557;
        v558 += 16;
        if (v557 == v556)
          goto LABEL_704;
      }
      v562 = v561 - v557 - 32;
      v563 = v557;
      if (v562 < 0x10)
        goto LABEL_842;
      v564 = (v562 >> 4) + 1;
      v565 = 16 * (v564 & 0x1FFFFFFFFFFFFFFELL);
      v563 = v557 + v565;
      v560 += v565;
      v566 = (((unint64_t)(v561 + v558) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v567 = v556 + 16 * ((v557 - v556) >> 4) + 24;
      do
      {
        v568 = *(_DWORD *)(v567 + 8);
        *(_DWORD *)(v567 - 24) = *(_DWORD *)(v567 - 8);
        *(_DWORD *)(v567 - 8) = v568;
        v569 = *(_QWORD *)(v567 + 16);
        *(_QWORD *)(v567 - 16) = *(_QWORD *)v567;
        *(_QWORD *)v567 = v569;
        v567 += 32;
        v566 -= 2;
      }
      while (v566);
      if (v564 != (v564 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_842:
        do
        {
          *(_DWORD *)v563 = *(_DWORD *)v560;
          *(_QWORD *)(v563 + 8) = *(_QWORD *)(v560 + 8);
          v563 += 16;
          v560 += 16;
        }
        while (v560 != v561);
      }
      *(_QWORD *)(a1 + 496) = v563;
      v558 += 16;
    }
    while (v557 != v556);
  }
LABEL_704:
  v570 = *(_QWORD *)(a1 + 592);
  v571 = *(_QWORD *)(a1 + 584);
  if (v570 != v571)
  {
    v572 = -16 - v570;
    do
    {
      while (1)
      {
        while (1)
        {
          v573 = *(_QWORD *)(v570 - 8);
          v570 -= 16;
          if ((*(_BYTE *)(v573 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v573 + 4) = 0;
          v572 += 16;
          if (v570 == v571)
            goto LABEL_717;
        }
        sub_20F5B7880(a1 + 608, (_QWORD *)v573);
        v571 = *(_QWORD *)(a1 + 584);
        v574 = v570 + 16;
        v575 = *(_QWORD *)(a1 + 592);
        if (v570 + 16 != v575)
          break;
        *(_QWORD *)(a1 + 592) = v570;
        v572 += 16;
        if (v570 == v571)
          goto LABEL_717;
      }
      v576 = v575 - v570 - 32;
      v577 = v570;
      if (v576 < 0x10)
        goto LABEL_843;
      v578 = (v576 >> 4) + 1;
      v579 = 16 * (v578 & 0x1FFFFFFFFFFFFFFELL);
      v577 = v570 + v579;
      v574 += v579;
      v580 = (((unint64_t)(v575 + v572) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v581 = v571 + 16 * ((v570 - v571) >> 4) + 24;
      do
      {
        v582 = *(_DWORD *)(v581 + 8);
        *(_DWORD *)(v581 - 24) = *(_DWORD *)(v581 - 8);
        *(_DWORD *)(v581 - 8) = v582;
        v583 = *(_QWORD *)(v581 + 16);
        *(_QWORD *)(v581 - 16) = *(_QWORD *)v581;
        *(_QWORD *)v581 = v583;
        v581 += 32;
        v580 -= 2;
      }
      while (v580);
      if (v578 != (v578 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_843:
        do
        {
          *(_DWORD *)v577 = *(_DWORD *)v574;
          *(_QWORD *)(v577 + 8) = *(_QWORD *)(v574 + 8);
          v577 += 16;
          v574 += 16;
        }
        while (v574 != v575);
      }
      *(_QWORD *)(a1 + 592) = v577;
      v572 += 16;
    }
    while (v570 != v571);
  }
LABEL_717:
  v584 = *(_QWORD *)(a1 + 688);
  v585 = *(_QWORD *)(a1 + 680);
  if (v584 != v585)
  {
    v586 = -16 - v584;
    do
    {
      while (1)
      {
        while (1)
        {
          v587 = *(_QWORD *)(v584 - 8);
          v584 -= 16;
          if ((*(_BYTE *)(v587 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v587 + 4) = 0;
          v586 += 16;
          if (v584 == v585)
            goto LABEL_730;
        }
        sub_20F5B7B5C(a1 + 704, (_QWORD *)v587);
        v585 = *(_QWORD *)(a1 + 680);
        v588 = v584 + 16;
        v589 = *(_QWORD *)(a1 + 688);
        if (v584 + 16 != v589)
          break;
        *(_QWORD *)(a1 + 688) = v584;
        v586 += 16;
        if (v584 == v585)
          goto LABEL_730;
      }
      v590 = v589 - v584 - 32;
      v591 = v584;
      if (v590 < 0x10)
        goto LABEL_844;
      v592 = (v590 >> 4) + 1;
      v593 = 16 * (v592 & 0x1FFFFFFFFFFFFFFELL);
      v591 = v584 + v593;
      v588 += v593;
      v594 = (((unint64_t)(v589 + v586) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v595 = v585 + 16 * ((v584 - v585) >> 4) + 24;
      do
      {
        v596 = *(_DWORD *)(v595 + 8);
        *(_DWORD *)(v595 - 24) = *(_DWORD *)(v595 - 8);
        *(_DWORD *)(v595 - 8) = v596;
        v597 = *(_QWORD *)(v595 + 16);
        *(_QWORD *)(v595 - 16) = *(_QWORD *)v595;
        *(_QWORD *)v595 = v597;
        v595 += 32;
        v594 -= 2;
      }
      while (v594);
      if (v592 != (v592 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_844:
        do
        {
          *(_DWORD *)v591 = *(_DWORD *)v588;
          *(_QWORD *)(v591 + 8) = *(_QWORD *)(v588 + 8);
          v591 += 16;
          v588 += 16;
        }
        while (v588 != v589);
      }
      *(_QWORD *)(a1 + 688) = v591;
      v586 += 16;
    }
    while (v584 != v585);
  }
LABEL_730:
  v598 = *(_QWORD *)(a1 + 784);
  v599 = *(_QWORD *)(a1 + 776);
  if (v598 != v599)
  {
    v600 = -16 - v598;
    do
    {
      while (1)
      {
        while (1)
        {
          v601 = *(_QWORD *)(v598 - 8);
          v598 -= 16;
          if ((*(_BYTE *)(v601 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v601 + 4) = 0;
          v600 += 16;
          if (v598 == v599)
            goto LABEL_743;
        }
        sub_20F5B7E38(a1 + 800, (_QWORD *)v601);
        v599 = *(_QWORD *)(a1 + 776);
        v602 = v598 + 16;
        v603 = *(_QWORD *)(a1 + 784);
        if (v598 + 16 != v603)
          break;
        *(_QWORD *)(a1 + 784) = v598;
        v600 += 16;
        if (v598 == v599)
          goto LABEL_743;
      }
      v604 = v603 - v598 - 32;
      v605 = v598;
      if (v604 < 0x10)
        goto LABEL_845;
      v606 = (v604 >> 4) + 1;
      v607 = 16 * (v606 & 0x1FFFFFFFFFFFFFFELL);
      v605 = v598 + v607;
      v602 += v607;
      v608 = (((unint64_t)(v603 + v600) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v609 = v599 + 16 * ((v598 - v599) >> 4) + 24;
      do
      {
        v610 = *(_DWORD *)(v609 + 8);
        *(_DWORD *)(v609 - 24) = *(_DWORD *)(v609 - 8);
        *(_DWORD *)(v609 - 8) = v610;
        v611 = *(_QWORD *)(v609 + 16);
        *(_QWORD *)(v609 - 16) = *(_QWORD *)v609;
        *(_QWORD *)v609 = v611;
        v609 += 32;
        v608 -= 2;
      }
      while (v608);
      if (v606 != (v606 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_845:
        do
        {
          *(_DWORD *)v605 = *(_DWORD *)v602;
          *(_QWORD *)(v605 + 8) = *(_QWORD *)(v602 + 8);
          v605 += 16;
          v602 += 16;
        }
        while (v602 != v603);
      }
      *(_QWORD *)(a1 + 784) = v605;
      v600 += 16;
    }
    while (v598 != v599);
  }
LABEL_743:
  v612 = *(_QWORD *)(a1 + 880);
  v613 = *(_QWORD *)(a1 + 872);
  if (v612 != v613)
  {
    v614 = -16 - v612;
    do
    {
      while (1)
      {
        while (1)
        {
          v615 = *(_QWORD *)(v612 - 8);
          v612 -= 16;
          if ((*(_BYTE *)(v615 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v615 + 4) = 0;
          v614 += 16;
          if (v612 == v613)
            goto LABEL_756;
        }
        sub_20F91F778(a1 + 896, v615);
        v613 = *(_QWORD *)(a1 + 872);
        v616 = v612 + 16;
        v617 = *(_QWORD *)(a1 + 880);
        if (v612 + 16 != v617)
          break;
        *(_QWORD *)(a1 + 880) = v612;
        v614 += 16;
        if (v612 == v613)
          goto LABEL_756;
      }
      v618 = v617 - v612 - 32;
      v619 = v612;
      if (v618 < 0x10)
        goto LABEL_846;
      v620 = (v618 >> 4) + 1;
      v621 = 16 * (v620 & 0x1FFFFFFFFFFFFFFELL);
      v619 = v612 + v621;
      v616 += v621;
      v622 = (((unint64_t)(v617 + v614) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v623 = v613 + 16 * ((v612 - v613) >> 4) + 24;
      do
      {
        v624 = *(_DWORD *)(v623 + 8);
        *(_DWORD *)(v623 - 24) = *(_DWORD *)(v623 - 8);
        *(_DWORD *)(v623 - 8) = v624;
        v625 = *(_QWORD *)(v623 + 16);
        *(_QWORD *)(v623 - 16) = *(_QWORD *)v623;
        *(_QWORD *)v623 = v625;
        v623 += 32;
        v622 -= 2;
      }
      while (v622);
      if (v620 != (v620 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_846:
        do
        {
          *(_DWORD *)v619 = *(_DWORD *)v616;
          *(_QWORD *)(v619 + 8) = *(_QWORD *)(v616 + 8);
          v619 += 16;
          v616 += 16;
        }
        while (v616 != v617);
      }
      *(_QWORD *)(a1 + 880) = v619;
      v614 += 16;
    }
    while (v612 != v613);
  }
LABEL_756:
  v626 = *(_QWORD *)(a1 + 976);
  v627 = *(_QWORD *)(a1 + 968);
  if (v626 != v627)
  {
    v628 = -16 - v626;
    do
    {
      while (1)
      {
        while (1)
        {
          v629 = *(_QWORD *)(v626 - 8);
          v626 -= 16;
          if ((*(_BYTE *)(v629 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v629 + 4) = 0;
          v628 += 16;
          if (v626 == v627)
            goto LABEL_769;
        }
        sub_20F394BB8(a1 + 992, v629);
        v627 = *(_QWORD *)(a1 + 968);
        v630 = v626 + 16;
        v631 = *(_QWORD *)(a1 + 976);
        if (v626 + 16 != v631)
          break;
        *(_QWORD *)(a1 + 976) = v626;
        v628 += 16;
        if (v626 == v627)
          goto LABEL_769;
      }
      v632 = v631 - v626 - 32;
      v633 = v626;
      if (v632 < 0x10)
        goto LABEL_847;
      v634 = (v632 >> 4) + 1;
      v635 = 16 * (v634 & 0x1FFFFFFFFFFFFFFELL);
      v633 = v626 + v635;
      v630 += v635;
      v636 = (((unint64_t)(v631 + v628) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v637 = v627 + 16 * ((v626 - v627) >> 4) + 24;
      do
      {
        v638 = *(_DWORD *)(v637 + 8);
        *(_DWORD *)(v637 - 24) = *(_DWORD *)(v637 - 8);
        *(_DWORD *)(v637 - 8) = v638;
        v639 = *(_QWORD *)(v637 + 16);
        *(_QWORD *)(v637 - 16) = *(_QWORD *)v637;
        *(_QWORD *)v637 = v639;
        v637 += 32;
        v636 -= 2;
      }
      while (v636);
      if (v634 != (v634 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_847:
        do
        {
          *(_DWORD *)v633 = *(_DWORD *)v630;
          *(_QWORD *)(v633 + 8) = *(_QWORD *)(v630 + 8);
          v633 += 16;
          v630 += 16;
        }
        while (v630 != v631);
      }
      *(_QWORD *)(a1 + 976) = v633;
      v628 += 16;
    }
    while (v626 != v627);
  }
LABEL_769:
  *(_WORD *)(a1 + 1592) = 1;
  *(_QWORD *)(a1 + 1608) = *(_QWORD *)(a1 + 1600);
  *(_QWORD *)(a1 + 1872) = *(_QWORD *)(a1 + 1864);
  *(_QWORD *)(a1 + 2136) = *(_QWORD *)(a1 + 2128);
  *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a1 + 1624);
  *(_QWORD *)(a1 + 1896) = *(_QWORD *)(a1 + 1888);
  *(_QWORD *)(a1 + 2160) = *(_QWORD *)(a1 + 2152);
  *(_QWORD *)(a1 + 1656) = *(_QWORD *)(a1 + 1648);
  *(_QWORD *)(a1 + 1920) = *(_QWORD *)(a1 + 1912);
  *(_QWORD *)(a1 + 2184) = *(_QWORD *)(a1 + 2176);
  *(_QWORD *)(a1 + 1680) = *(_QWORD *)(a1 + 1672);
  *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a1 + 1936);
  *(_QWORD *)(a1 + 2208) = *(_QWORD *)(a1 + 2200);
  *(_QWORD *)(a1 + 1704) = *(_QWORD *)(a1 + 1696);
  *(_QWORD *)(a1 + 1968) = *(_QWORD *)(a1 + 1960);
  *(_QWORD *)(a1 + 2232) = *(_QWORD *)(a1 + 2224);
  *(_QWORD *)(a1 + 1728) = *(_QWORD *)(a1 + 1720);
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a1 + 1984);
  *(_QWORD *)(a1 + 2256) = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 1752) = *(_QWORD *)(a1 + 1744);
  *(_QWORD *)(a1 + 2016) = *(_QWORD *)(a1 + 2008);
  *(_QWORD *)(a1 + 2280) = *(_QWORD *)(a1 + 2272);
  *(_QWORD *)(a1 + 1776) = *(_QWORD *)(a1 + 1768);
  *(_QWORD *)(a1 + 2040) = *(_QWORD *)(a1 + 2032);
  *(_QWORD *)(a1 + 2304) = *(_QWORD *)(a1 + 2296);
  *(_QWORD *)(a1 + 1800) = *(_QWORD *)(a1 + 1792);
  *(_QWORD *)(a1 + 2064) = *(_QWORD *)(a1 + 2056);
  *(_QWORD *)(a1 + 2328) = *(_QWORD *)(a1 + 2320);
  *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a1 + 1816);
  *(_QWORD *)(a1 + 2088) = *(_QWORD *)(a1 + 2080);
  *(_QWORD *)(a1 + 2352) = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 1848) = *(_QWORD *)(a1 + 1840);
  *(_QWORD *)(a1 + 2112) = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2376) = *(_QWORD *)(a1 + 2368);
  v640 = *(_QWORD *)(a1 + 8);
  v641 = *(_QWORD *)(a1 + 16);
  if (v640 != v641)
  {
    v642 = 0;
    do
    {
      v643 = *(_QWORD *)(v640 + 8);
      if (*(_BYTE *)(v643 + 20))
        v644 = v642;
      else
        v644 = -1;
      v642 += *(unsigned __int8 *)(v643 + 20);
      *(_DWORD *)v643 = v644;
      v640 += 16;
    }
    while (v640 != v641);
  }
  v645 = *(_QWORD *)(a1 + 104);
  v646 = *(_QWORD *)(a1 + 112);
  if (v645 != v646)
  {
    v647 = 0;
    do
    {
      v648 = *(_QWORD *)(v645 + 8);
      if (*(_BYTE *)(v648 + 20))
        v649 = v647;
      else
        v649 = -1;
      v647 += *(unsigned __int8 *)(v648 + 20);
      *(_DWORD *)v648 = v649;
      v645 += 16;
    }
    while (v645 != v646);
  }
  v650 = *(_QWORD *)(a1 + 200);
  v651 = *(_QWORD *)(a1 + 208);
  if (v650 != v651)
  {
    v652 = 0;
    do
    {
      v653 = *(_QWORD *)(v650 + 8);
      if (*(_BYTE *)(v653 + 20))
        v654 = v652;
      else
        v654 = -1;
      v652 += *(unsigned __int8 *)(v653 + 20);
      *(_DWORD *)v653 = v654;
      v650 += 16;
    }
    while (v650 != v651);
  }
  v655 = *(_QWORD *)(a1 + 296);
  v656 = *(_QWORD *)(a1 + 304);
  if (v655 != v656)
  {
    v657 = 0;
    do
    {
      v658 = *(_QWORD *)(v655 + 8);
      if (*(_BYTE *)(v658 + 20))
        v659 = v657;
      else
        v659 = -1;
      v657 += *(unsigned __int8 *)(v658 + 20);
      *(_DWORD *)v658 = v659;
      v655 += 16;
    }
    while (v655 != v656);
  }
  v660 = *(_QWORD *)(a1 + 392);
  v661 = *(_QWORD *)(a1 + 400);
  if (v660 != v661)
  {
    v662 = 0;
    do
    {
      v663 = *(_QWORD *)(v660 + 8);
      if (*(_BYTE *)(v663 + 20))
        v664 = v662;
      else
        v664 = -1;
      v662 += *(unsigned __int8 *)(v663 + 20);
      *(_DWORD *)v663 = v664;
      v660 += 16;
    }
    while (v660 != v661);
  }
  v665 = *(_QWORD *)(a1 + 488);
  v666 = *(_QWORD *)(a1 + 496);
  if (v665 != v666)
  {
    v667 = 0;
    do
    {
      v668 = *(_QWORD *)(v665 + 8);
      if (*(_BYTE *)(v668 + 20))
        v669 = v667;
      else
        v669 = -1;
      v667 += *(unsigned __int8 *)(v668 + 20);
      *(_DWORD *)v668 = v669;
      v665 += 16;
    }
    while (v665 != v666);
  }
  v670 = *(_QWORD *)(a1 + 584);
  v671 = *(_QWORD *)(a1 + 592);
  if (v670 != v671)
  {
    v672 = 0;
    do
    {
      v673 = *(_QWORD *)(v670 + 8);
      if (*(_BYTE *)(v673 + 20))
        v674 = v672;
      else
        v674 = -1;
      v672 += *(unsigned __int8 *)(v673 + 20);
      *(_DWORD *)v673 = v674;
      v670 += 16;
    }
    while (v670 != v671);
  }
  v675 = *(_QWORD *)(a1 + 680);
  v676 = *(_QWORD *)(a1 + 688);
  if (v675 != v676)
  {
    v677 = 0;
    do
    {
      v678 = *(_QWORD *)(v675 + 8);
      if (*(_BYTE *)(v678 + 20))
        v679 = v677;
      else
        v679 = -1;
      v677 += *(unsigned __int8 *)(v678 + 20);
      *(_DWORD *)v678 = v679;
      v675 += 16;
    }
    while (v675 != v676);
  }
  v680 = *(_QWORD *)(a1 + 776);
  v681 = *(_QWORD *)(a1 + 784);
  if (v680 != v681)
  {
    v682 = 0;
    do
    {
      v683 = *(_QWORD *)(v680 + 8);
      if (*(_BYTE *)(v683 + 20))
        v684 = v682;
      else
        v684 = -1;
      v682 += *(unsigned __int8 *)(v683 + 20);
      *(_DWORD *)v683 = v684;
      v680 += 16;
    }
    while (v680 != v681);
  }
  v685 = *(_QWORD *)(a1 + 872);
  v686 = *(_QWORD *)(a1 + 880);
  if (v685 != v686)
  {
    v687 = 0;
    do
    {
      v688 = *(_QWORD *)(v685 + 8);
      if (*(_BYTE *)(v688 + 20))
        v689 = v687;
      else
        v689 = -1;
      v687 += *(unsigned __int8 *)(v688 + 20);
      *(_DWORD *)v688 = v689;
      v685 += 16;
    }
    while (v685 != v686);
  }
  v690 = *(_QWORD *)(a1 + 968);
  v691 = *(_QWORD *)(a1 + 976);
  if (v690 != v691)
  {
    v692 = 0;
    do
    {
      v693 = *(_QWORD *)(v690 + 8);
      if (*(_BYTE *)(v693 + 20))
        v694 = v692;
      else
        v694 = -1;
      v692 += *(unsigned __int8 *)(v693 + 20);
      *(_DWORD *)v693 = v694;
      v690 += 16;
    }
    while (v690 != v691);
  }
}

void sub_20F8D5014(uint64_t a1, char *__s)
{
  _QWORD *v2;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v10;

  v2 = (_QWORD *)(a1 + 57376);
  if (!*(_QWORD *)(a1 + 57376))
    return;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v10) = v4;
    v6 = __dst;
    if (!v4)
      goto LABEL_10;
  }
  memcpy(v6, __s, (size_t)v5);
LABEL_10:
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  if (!*v2)
    sub_20E86D37C();
  (*(void (**)(_QWORD, void **))(*(_QWORD *)*v2 + 48))(*v2, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_20F8D511C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F8D5138(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  char **v4;
  char *v5;
  _QWORD *v6;
  char **v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  int *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _DWORD *v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  int *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _DWORD *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  int *v85;
  int *v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  _DWORD *v98;
  int64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  int *v113;
  int *v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _DWORD *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  int v136;
  void *v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  int *v141;
  int *v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  _DWORD *v154;
  int64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  _OWORD *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  int v164;
  void *v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  int *v169;
  int *v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  _DWORD *v182;
  int64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  _OWORD *v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  void *v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  int *v197;
  int *v198;
  uint64_t v199;
  int v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _BYTE *v209;
  _DWORD *v210;
  int64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  _OWORD *v216;
  char *v217;
  uint64_t v218;
  __int128 v219;
  int v220;
  void *v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  int *v225;
  int *v226;
  uint64_t v227;
  int v228;
  unint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  _BYTE *v237;
  _DWORD *v238;
  int64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  _OWORD *v244;
  char *v245;
  uint64_t v246;
  __int128 v247;
  int v248;
  void *v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  int *v253;
  int *v254;
  uint64_t v255;
  int v256;
  unint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  _BYTE *v265;
  _DWORD *v266;
  int64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  _OWORD *v272;
  char *v273;
  uint64_t v274;
  __int128 v275;
  int v276;
  void *v277;
  unint64_t v278;
  uint64_t v279;
  char *v280;
  int *v281;
  int *v282;
  _DWORD *v283;
  int v284;
  unint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  _BYTE *v293;
  _DWORD *v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  _OWORD *v299;
  char *v300;
  uint64_t v301;
  __int128 v302;
  int v303;
  void **v304;
  void **v305;
  void **v306;
  void **v307;
  void **v308;
  void **v309;
  void **v310;
  void **v311;
  void **v312;

  if (!*(_BYTE *)(a1 + 1592))
    return;
  v3 = 0;
  a2[1] = *a2;
  v312 = (void **)(a2 + 3);
  a2[4] = a2[3];
  v311 = (void **)(a2 + 6);
  a2[7] = a2[6];
  v310 = (void **)(a2 + 9);
  a2[10] = a2[9];
  v309 = (void **)(a2 + 12);
  a2[13] = a2[12];
  v308 = (void **)(a2 + 15);
  a2[16] = a2[15];
  v307 = (void **)(a2 + 18);
  a2[19] = a2[18];
  v306 = (void **)(a2 + 21);
  a2[22] = a2[21];
  v305 = (void **)(a2 + 24);
  a2[25] = a2[24];
  v304 = (void **)(a2 + 27);
  a2[28] = a2[27];
  do
  {
    v4 = (char **)&a2[3 * v3];
    v5 = *v4;
    if ((unint64_t)(v4[2] - *v4) > 0xFF)
      goto LABEL_3;
    v6 = &a2[3 * v3];
    v9 = (_BYTE *)v6[1];
    v7 = (char **)(v6 + 1);
    v8 = v9;
    v10 = (char *)operator new(0x100uLL);
    v11 = v9 - v5;
    v12 = &v10[(v9 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    v13 = v12;
    if (v9 != v5)
    {
      if ((unint64_t)(v11 - 4) < 0x2C)
      {
        v13 = &v10[(v8 - v5) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_12:
          v22 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v13 - 1) = v22;
          v13 -= 4;
        }
        while (v8 != v5);
        goto LABEL_13;
      }
      v13 = &v10[(v8 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      if (v8 - v10 - (v11 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_12;
      v14 = v11 >> 2;
      v15 = ((unint64_t)(v11 - 4) >> 2) + 1;
      v16 = 4 * (v15 & 0x7FFFFFFFFFFFFFF8);
      v17 = &v8[-v16];
      v13 = &v12[-v16];
      v18 = &v10[4 * v14 - 16];
      v19 = (__int128 *)(v8 - 16);
      v20 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 8;
      }
      while (v20);
      v8 = v17;
      if (v15 != (v15 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_12;
    }
LABEL_13:
    *v4 = v13;
    *v7 = v12;
    v4[2] = v10 + 256;
    if (v5)
      operator delete(v5);
LABEL_3:
    ++v3;
  }
  while (v3 != 10);
  v23 = a1;
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v24 = (void *)*a2;
  a2[1] = *a2;
  v25 = ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
  if (v25 > (uint64_t)(a2[2] - (_QWORD)v24) >> 2)
  {
    v26 = 4 * v25;
    v27 = (char *)operator new(4 * v25);
    v23 = a1;
    *a2 = v27;
    a2[1] = v27;
    a2[2] = &v27[v26];
    if (v24)
      operator delete(v24);
  }
  v28 = *(int **)(v23 + 8);
  v29 = *(int **)(v23 + 16);
  while (2)
  {
    if (v28 != v29)
    {
      if (!*(_BYTE *)(*((_QWORD *)v28 + 1) + 20))
        goto LABEL_22;
      v31 = *v28;
      v33 = (char *)a2[1];
      v32 = a2[2];
      if ((unint64_t)v33 < v32)
      {
        *(_DWORD *)v33 = v31;
        v30 = (uint64_t)(v33 + 4);
        goto LABEL_21;
      }
      v34 = (char *)*a2;
      v35 = (uint64_t)&v33[-*a2];
      v36 = v35 >> 2;
      v37 = (v35 >> 2) + 1;
      if (v37 >> 62)
        sub_20E867F44();
      v38 = v32 - (_QWORD)v34;
      if (v38 >> 1 > v37)
        v37 = v38 >> 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 >> 62)
LABEL_316:
          sub_20E877A38();
        v40 = operator new(4 * v39);
        v41 = &v40[4 * v36];
        *v41 = v31;
        v30 = (uint64_t)(v41 + 1);
        v42 = v33 - v34;
        if (v33 == v34)
        {
LABEL_43:
          *a2 = v41;
          a2[1] = v30;
          a2[2] = &v40[4 * v39];
          if (v34)
            operator delete(v34);
LABEL_21:
          a2[1] = v30;
LABEL_22:
          v28 += 4;
          continue;
        }
      }
      else
      {
        v40 = 0;
        v41 = (_DWORD *)(4 * v36);
        *(_DWORD *)(4 * v36) = v31;
        v30 = 4 * v36 + 4;
        v42 = v33 - v34;
        if (v33 == v34)
          goto LABEL_43;
      }
      v43 = v42 - 4;
      if (v43 < 0x2C)
        goto LABEL_329;
      if ((unint64_t)(v33 - v40 - v35) < 0x20)
        goto LABEL_329;
      v44 = (v43 >> 2) + 1;
      v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
      v46 = &v33[-v45];
      v41 = (_DWORD *)((char *)v41 - v45);
      v47 = &v40[4 * v36 - 16];
      v48 = v33 - 16;
      v49 = v44 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v50 = *(_OWORD *)v48;
        *(v47 - 1) = *((_OWORD *)v48 - 1);
        *v47 = v50;
        v47 -= 2;
        v48 -= 32;
        v49 -= 8;
      }
      while (v49);
      v33 = v46;
      if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_329:
        do
        {
          v51 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *--v41 = v51;
        }
        while (v33 != v34);
      }
      goto LABEL_43;
    }
    break;
  }
  v52 = a1;
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v53 = (void *)a2[3];
  a2[4] = v53;
  v54 = ((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4);
  if (v54 > (uint64_t)(a2[5] - (_QWORD)v53) >> 2)
  {
    v55 = 4 * v54;
    v56 = (char *)operator new(4 * v54);
    v52 = a1;
    a2[3] = v56;
    a2[4] = v56;
    a2[5] = &v56[v55];
    if (v53)
      operator delete(v53);
  }
  v57 = *(int **)(v52 + 104);
  v58 = *(int **)(v52 + 112);
  while (2)
  {
    if (v57 != v58)
    {
      if (!*(_BYTE *)(*((_QWORD *)v57 + 1) + 20))
        goto LABEL_52;
      v60 = *v57;
      v62 = (char *)a2[4];
      v61 = a2[5];
      if ((unint64_t)v62 < v61)
      {
        *(_DWORD *)v62 = v60;
        v59 = (uint64_t)(v62 + 4);
        goto LABEL_51;
      }
      v63 = (char *)*v312;
      v64 = v62 - (_BYTE *)*v312;
      v65 = v64 >> 2;
      v66 = (v64 >> 2) + 1;
      if (v66 >> 62)
        sub_20E867F44();
      v67 = v61 - (_QWORD)v63;
      if (v67 >> 1 > v66)
        v66 = v67 >> 1;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
        v68 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      if (v68)
      {
        if (v68 >> 62)
          goto LABEL_316;
        v69 = operator new(4 * v68);
        v70 = &v69[4 * v65];
        *v70 = v60;
        v59 = (uint64_t)(v70 + 1);
        v71 = v62 - v63;
        if (v62 == v63)
        {
LABEL_73:
          a2[3] = v70;
          a2[4] = v59;
          a2[5] = &v69[4 * v68];
          if (v63)
            operator delete(v63);
LABEL_51:
          a2[4] = v59;
LABEL_52:
          v57 += 4;
          continue;
        }
      }
      else
      {
        v69 = 0;
        v70 = (_DWORD *)(4 * v65);
        *(_DWORD *)(4 * v65) = v60;
        v59 = 4 * v65 + 4;
        v71 = v62 - v63;
        if (v62 == v63)
          goto LABEL_73;
      }
      v72 = v71 - 4;
      if (v72 < 0x2C)
        goto LABEL_330;
      if ((unint64_t)(v62 - v69 - v64) < 0x20)
        goto LABEL_330;
      v73 = (v72 >> 2) + 1;
      v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
      v75 = &v62[-v74];
      v70 = (_DWORD *)((char *)v70 - v74);
      v76 = &v69[4 * v65 - 16];
      v77 = v62 - 16;
      v78 = v73 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v79 = *(_OWORD *)v77;
        *(v76 - 1) = *((_OWORD *)v77 - 1);
        *v76 = v79;
        v76 -= 2;
        v77 -= 32;
        v78 -= 8;
      }
      while (v78);
      v62 = v75;
      if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_330:
        do
        {
          v80 = *((_DWORD *)v62 - 1);
          v62 -= 4;
          *--v70 = v80;
        }
        while (v62 != v63);
      }
      goto LABEL_73;
    }
    break;
  }
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v81 = (void *)a2[6];
  a2[7] = v81;
  v82 = ((*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 4);
  if (v82 > (uint64_t)(a2[8] - (_QWORD)v81) >> 2)
  {
    v83 = 4 * v82;
    v84 = (char *)operator new(4 * v82);
    a2[6] = v84;
    a2[7] = v84;
    a2[8] = &v84[v83];
    if (v81)
      operator delete(v81);
  }
  v85 = *(int **)(a1 + 200);
  v86 = *(int **)(a1 + 208);
  while (2)
  {
    if (v85 != v86)
    {
      if (!*(_BYTE *)(*((_QWORD *)v85 + 1) + 20))
        goto LABEL_82;
      v88 = *v85;
      v90 = (char *)a2[7];
      v89 = a2[8];
      if ((unint64_t)v90 < v89)
      {
        *(_DWORD *)v90 = v88;
        v87 = (uint64_t)(v90 + 4);
        goto LABEL_81;
      }
      v91 = (char *)*v311;
      v92 = v90 - (_BYTE *)*v311;
      v93 = v92 >> 2;
      v94 = (v92 >> 2) + 1;
      if (v94 >> 62)
        sub_20E867F44();
      v95 = v89 - (_QWORD)v91;
      if (v95 >> 1 > v94)
        v94 = v95 >> 1;
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
        v96 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v96 = v94;
      if (v96)
      {
        if (v96 >> 62)
          goto LABEL_316;
        v97 = operator new(4 * v96);
        v98 = &v97[4 * v93];
        *v98 = v88;
        v87 = (uint64_t)(v98 + 1);
        v99 = v90 - v91;
        if (v90 == v91)
        {
LABEL_103:
          a2[6] = v98;
          a2[7] = v87;
          a2[8] = &v97[4 * v96];
          if (v91)
            operator delete(v91);
LABEL_81:
          a2[7] = v87;
LABEL_82:
          v85 += 4;
          continue;
        }
      }
      else
      {
        v97 = 0;
        v98 = (_DWORD *)(4 * v93);
        *(_DWORD *)(4 * v93) = v88;
        v87 = 4 * v93 + 4;
        v99 = v90 - v91;
        if (v90 == v91)
          goto LABEL_103;
      }
      v100 = v99 - 4;
      if (v100 < 0x2C)
        goto LABEL_331;
      if ((unint64_t)(v90 - v97 - v92) < 0x20)
        goto LABEL_331;
      v101 = (v100 >> 2) + 1;
      v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
      v103 = &v90[-v102];
      v98 = (_DWORD *)((char *)v98 - v102);
      v104 = &v97[4 * v93 - 16];
      v105 = v90 - 16;
      v106 = v101 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v107 = *(_OWORD *)v105;
        *(v104 - 1) = *((_OWORD *)v105 - 1);
        *v104 = v107;
        v104 -= 2;
        v105 -= 32;
        v106 -= 8;
      }
      while (v106);
      v90 = v103;
      if (v101 != (v101 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_331:
        do
        {
          v108 = *((_DWORD *)v90 - 1);
          v90 -= 4;
          *--v98 = v108;
        }
        while (v90 != v91);
      }
      goto LABEL_103;
    }
    break;
  }
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v109 = (void *)a2[9];
  a2[10] = v109;
  v110 = ((*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 4);
  if (v110 > (uint64_t)(a2[11] - (_QWORD)v109) >> 2)
  {
    v111 = 4 * v110;
    v112 = (char *)operator new(4 * v110);
    a2[9] = v112;
    a2[10] = v112;
    a2[11] = &v112[v111];
    if (v109)
      operator delete(v109);
  }
  v113 = *(int **)(a1 + 296);
  v114 = *(int **)(a1 + 304);
  while (2)
  {
    if (v113 != v114)
    {
      if (!*(_BYTE *)(*((_QWORD *)v113 + 1) + 20))
        goto LABEL_112;
      v116 = *v113;
      v118 = (char *)a2[10];
      v117 = a2[11];
      if ((unint64_t)v118 < v117)
      {
        *(_DWORD *)v118 = v116;
        v115 = (uint64_t)(v118 + 4);
        goto LABEL_111;
      }
      v119 = (char *)*v310;
      v120 = v118 - (_BYTE *)*v310;
      v121 = v120 >> 2;
      v122 = (v120 >> 2) + 1;
      if (v122 >> 62)
        sub_20E867F44();
      v123 = v117 - (_QWORD)v119;
      if (v123 >> 1 > v122)
        v122 = v123 >> 1;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
        v124 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v124 = v122;
      if (v124)
      {
        if (v124 >> 62)
          goto LABEL_316;
        v125 = operator new(4 * v124);
        v126 = &v125[4 * v121];
        *v126 = v116;
        v115 = (uint64_t)(v126 + 1);
        v127 = v118 - v119;
        if (v118 == v119)
        {
LABEL_133:
          a2[9] = v126;
          a2[10] = v115;
          a2[11] = &v125[4 * v124];
          if (v119)
            operator delete(v119);
LABEL_111:
          a2[10] = v115;
LABEL_112:
          v113 += 4;
          continue;
        }
      }
      else
      {
        v125 = 0;
        v126 = (_DWORD *)(4 * v121);
        *(_DWORD *)(4 * v121) = v116;
        v115 = 4 * v121 + 4;
        v127 = v118 - v119;
        if (v118 == v119)
          goto LABEL_133;
      }
      v128 = v127 - 4;
      if (v128 < 0x2C)
        goto LABEL_332;
      if ((unint64_t)(v118 - v125 - v120) < 0x20)
        goto LABEL_332;
      v129 = (v128 >> 2) + 1;
      v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
      v131 = &v118[-v130];
      v126 = (_DWORD *)((char *)v126 - v130);
      v132 = &v125[4 * v121 - 16];
      v133 = v118 - 16;
      v134 = v129 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v135 = *(_OWORD *)v133;
        *(v132 - 1) = *((_OWORD *)v133 - 1);
        *v132 = v135;
        v132 -= 2;
        v133 -= 32;
        v134 -= 8;
      }
      while (v134);
      v118 = v131;
      if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_332:
        do
        {
          v136 = *((_DWORD *)v118 - 1);
          v118 -= 4;
          *--v126 = v136;
        }
        while (v118 != v119);
      }
      goto LABEL_133;
    }
    break;
  }
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v137 = (void *)a2[12];
  a2[13] = v137;
  v138 = ((*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 4);
  if (v138 > (uint64_t)(a2[14] - (_QWORD)v137) >> 2)
  {
    v139 = 4 * v138;
    v140 = (char *)operator new(4 * v138);
    a2[12] = v140;
    a2[13] = v140;
    a2[14] = &v140[v139];
    if (v137)
      operator delete(v137);
  }
  v141 = *(int **)(a1 + 392);
  v142 = *(int **)(a1 + 400);
  while (2)
  {
    if (v141 != v142)
    {
      if (!*(_BYTE *)(*((_QWORD *)v141 + 1) + 20))
        goto LABEL_142;
      v144 = *v141;
      v146 = (char *)a2[13];
      v145 = a2[14];
      if ((unint64_t)v146 < v145)
      {
        *(_DWORD *)v146 = v144;
        v143 = (uint64_t)(v146 + 4);
        goto LABEL_141;
      }
      v147 = (char *)*v309;
      v148 = v146 - (_BYTE *)*v309;
      v149 = v148 >> 2;
      v150 = (v148 >> 2) + 1;
      if (v150 >> 62)
        sub_20E867F44();
      v151 = v145 - (_QWORD)v147;
      if (v151 >> 1 > v150)
        v150 = v151 >> 1;
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
        v152 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v152 = v150;
      if (v152)
      {
        if (v152 >> 62)
          goto LABEL_316;
        v153 = operator new(4 * v152);
        v154 = &v153[4 * v149];
        *v154 = v144;
        v143 = (uint64_t)(v154 + 1);
        v155 = v146 - v147;
        if (v146 == v147)
        {
LABEL_163:
          a2[12] = v154;
          a2[13] = v143;
          a2[14] = &v153[4 * v152];
          if (v147)
            operator delete(v147);
LABEL_141:
          a2[13] = v143;
LABEL_142:
          v141 += 4;
          continue;
        }
      }
      else
      {
        v153 = 0;
        v154 = (_DWORD *)(4 * v149);
        *(_DWORD *)(4 * v149) = v144;
        v143 = 4 * v149 + 4;
        v155 = v146 - v147;
        if (v146 == v147)
          goto LABEL_163;
      }
      v156 = v155 - 4;
      if (v156 < 0x2C)
        goto LABEL_333;
      if ((unint64_t)(v146 - v153 - v148) < 0x20)
        goto LABEL_333;
      v157 = (v156 >> 2) + 1;
      v158 = 4 * (v157 & 0x7FFFFFFFFFFFFFF8);
      v159 = &v146[-v158];
      v154 = (_DWORD *)((char *)v154 - v158);
      v160 = &v153[4 * v149 - 16];
      v161 = v146 - 16;
      v162 = v157 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v163 = *(_OWORD *)v161;
        *(v160 - 1) = *((_OWORD *)v161 - 1);
        *v160 = v163;
        v160 -= 2;
        v161 -= 32;
        v162 -= 8;
      }
      while (v162);
      v146 = v159;
      if (v157 != (v157 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_333:
        do
        {
          v164 = *((_DWORD *)v146 - 1);
          v146 -= 4;
          *--v154 = v164;
        }
        while (v146 != v147);
      }
      goto LABEL_163;
    }
    break;
  }
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v165 = (void *)a2[15];
  a2[16] = v165;
  v166 = ((*(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488)) >> 4);
  if (v166 > (uint64_t)(a2[17] - (_QWORD)v165) >> 2)
  {
    v167 = 4 * v166;
    v168 = (char *)operator new(4 * v166);
    a2[15] = v168;
    a2[16] = v168;
    a2[17] = &v168[v167];
    if (v165)
      operator delete(v165);
  }
  v169 = *(int **)(a1 + 488);
  v170 = *(int **)(a1 + 496);
  while (2)
  {
    if (v169 != v170)
    {
      if (!*(_BYTE *)(*((_QWORD *)v169 + 1) + 20))
        goto LABEL_172;
      v172 = *v169;
      v174 = (char *)a2[16];
      v173 = a2[17];
      if ((unint64_t)v174 < v173)
      {
        *(_DWORD *)v174 = v172;
        v171 = (uint64_t)(v174 + 4);
        goto LABEL_171;
      }
      v175 = (char *)*v308;
      v176 = v174 - (_BYTE *)*v308;
      v177 = v176 >> 2;
      v178 = (v176 >> 2) + 1;
      if (v178 >> 62)
        sub_20E867F44();
      v179 = v173 - (_QWORD)v175;
      if (v179 >> 1 > v178)
        v178 = v179 >> 1;
      if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
        v180 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v180 = v178;
      if (v180)
      {
        if (v180 >> 62)
          goto LABEL_316;
        v181 = operator new(4 * v180);
        v182 = &v181[4 * v177];
        *v182 = v172;
        v171 = (uint64_t)(v182 + 1);
        v183 = v174 - v175;
        if (v174 == v175)
        {
LABEL_193:
          a2[15] = v182;
          a2[16] = v171;
          a2[17] = &v181[4 * v180];
          if (v175)
            operator delete(v175);
LABEL_171:
          a2[16] = v171;
LABEL_172:
          v169 += 4;
          continue;
        }
      }
      else
      {
        v181 = 0;
        v182 = (_DWORD *)(4 * v177);
        *(_DWORD *)(4 * v177) = v172;
        v171 = 4 * v177 + 4;
        v183 = v174 - v175;
        if (v174 == v175)
          goto LABEL_193;
      }
      v184 = v183 - 4;
      if (v184 < 0x2C)
        goto LABEL_334;
      if ((unint64_t)(v174 - v181 - v176) < 0x20)
        goto LABEL_334;
      v185 = (v184 >> 2) + 1;
      v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
      v187 = &v174[-v186];
      v182 = (_DWORD *)((char *)v182 - v186);
      v188 = &v181[4 * v177 - 16];
      v189 = v174 - 16;
      v190 = v185 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v191 = *(_OWORD *)v189;
        *(v188 - 1) = *((_OWORD *)v189 - 1);
        *v188 = v191;
        v188 -= 2;
        v189 -= 32;
        v190 -= 8;
      }
      while (v190);
      v174 = v187;
      if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_334:
        do
        {
          v192 = *((_DWORD *)v174 - 1);
          v174 -= 4;
          *--v182 = v192;
        }
        while (v174 != v175);
      }
      goto LABEL_193;
    }
    break;
  }
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v193 = (void *)a2[18];
  a2[19] = v193;
  v194 = ((*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 4);
  if (v194 > (uint64_t)(a2[20] - (_QWORD)v193) >> 2)
  {
    v195 = 4 * v194;
    v196 = (char *)operator new(4 * v194);
    a2[18] = v196;
    a2[19] = v196;
    a2[20] = &v196[v195];
    if (v193)
      operator delete(v193);
  }
  v197 = *(int **)(a1 + 584);
  v198 = *(int **)(a1 + 592);
  while (2)
  {
    if (v197 != v198)
    {
      if (!*(_BYTE *)(*((_QWORD *)v197 + 1) + 20))
        goto LABEL_202;
      v200 = *v197;
      v202 = (char *)a2[19];
      v201 = a2[20];
      if ((unint64_t)v202 < v201)
      {
        *(_DWORD *)v202 = v200;
        v199 = (uint64_t)(v202 + 4);
        goto LABEL_201;
      }
      v203 = (char *)*v307;
      v204 = v202 - (_BYTE *)*v307;
      v205 = v204 >> 2;
      v206 = (v204 >> 2) + 1;
      if (v206 >> 62)
        sub_20E867F44();
      v207 = v201 - (_QWORD)v203;
      if (v207 >> 1 > v206)
        v206 = v207 >> 1;
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL)
        v208 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v208 = v206;
      if (v208)
      {
        if (v208 >> 62)
          goto LABEL_316;
        v209 = operator new(4 * v208);
        v210 = &v209[4 * v205];
        *v210 = v200;
        v199 = (uint64_t)(v210 + 1);
        v211 = v202 - v203;
        if (v202 == v203)
        {
LABEL_223:
          a2[18] = v210;
          a2[19] = v199;
          a2[20] = &v209[4 * v208];
          if (v203)
            operator delete(v203);
LABEL_201:
          a2[19] = v199;
LABEL_202:
          v197 += 4;
          continue;
        }
      }
      else
      {
        v209 = 0;
        v210 = (_DWORD *)(4 * v205);
        *(_DWORD *)(4 * v205) = v200;
        v199 = 4 * v205 + 4;
        v211 = v202 - v203;
        if (v202 == v203)
          goto LABEL_223;
      }
      v212 = v211 - 4;
      if (v212 < 0x2C)
        goto LABEL_335;
      if ((unint64_t)(v202 - v209 - v204) < 0x20)
        goto LABEL_335;
      v213 = (v212 >> 2) + 1;
      v214 = 4 * (v213 & 0x7FFFFFFFFFFFFFF8);
      v215 = &v202[-v214];
      v210 = (_DWORD *)((char *)v210 - v214);
      v216 = &v209[4 * v205 - 16];
      v217 = v202 - 16;
      v218 = v213 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v219 = *(_OWORD *)v217;
        *(v216 - 1) = *((_OWORD *)v217 - 1);
        *v216 = v219;
        v216 -= 2;
        v217 -= 32;
        v218 -= 8;
      }
      while (v218);
      v202 = v215;
      if (v213 != (v213 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_335:
        do
        {
          v220 = *((_DWORD *)v202 - 1);
          v202 -= 4;
          *--v210 = v220;
        }
        while (v202 != v203);
      }
      goto LABEL_223;
    }
    break;
  }
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v221 = (void *)a2[21];
  a2[22] = v221;
  v222 = ((*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680)) >> 4);
  if (v222 > (uint64_t)(a2[23] - (_QWORD)v221) >> 2)
  {
    v223 = 4 * v222;
    v224 = (char *)operator new(4 * v222);
    a2[21] = v224;
    a2[22] = v224;
    a2[23] = &v224[v223];
    if (v221)
      operator delete(v221);
  }
  v225 = *(int **)(a1 + 680);
  v226 = *(int **)(a1 + 688);
  while (2)
  {
    if (v225 != v226)
    {
      if (!*(_BYTE *)(*((_QWORD *)v225 + 1) + 20))
        goto LABEL_232;
      v228 = *v225;
      v230 = (char *)a2[22];
      v229 = a2[23];
      if ((unint64_t)v230 < v229)
      {
        *(_DWORD *)v230 = v228;
        v227 = (uint64_t)(v230 + 4);
        goto LABEL_231;
      }
      v231 = (char *)*v306;
      v232 = v230 - (_BYTE *)*v306;
      v233 = v232 >> 2;
      v234 = (v232 >> 2) + 1;
      if (v234 >> 62)
        sub_20E867F44();
      v235 = v229 - (_QWORD)v231;
      if (v235 >> 1 > v234)
        v234 = v235 >> 1;
      if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL)
        v236 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v236 = v234;
      if (v236)
      {
        if (v236 >> 62)
          goto LABEL_316;
        v237 = operator new(4 * v236);
        v238 = &v237[4 * v233];
        *v238 = v228;
        v227 = (uint64_t)(v238 + 1);
        v239 = v230 - v231;
        if (v230 == v231)
        {
LABEL_253:
          a2[21] = v238;
          a2[22] = v227;
          a2[23] = &v237[4 * v236];
          if (v231)
            operator delete(v231);
LABEL_231:
          a2[22] = v227;
LABEL_232:
          v225 += 4;
          continue;
        }
      }
      else
      {
        v237 = 0;
        v238 = (_DWORD *)(4 * v233);
        *(_DWORD *)(4 * v233) = v228;
        v227 = 4 * v233 + 4;
        v239 = v230 - v231;
        if (v230 == v231)
          goto LABEL_253;
      }
      v240 = v239 - 4;
      if (v240 < 0x2C)
        goto LABEL_336;
      if ((unint64_t)(v230 - v237 - v232) < 0x20)
        goto LABEL_336;
      v241 = (v240 >> 2) + 1;
      v242 = 4 * (v241 & 0x7FFFFFFFFFFFFFF8);
      v243 = &v230[-v242];
      v238 = (_DWORD *)((char *)v238 - v242);
      v244 = &v237[4 * v233 - 16];
      v245 = v230 - 16;
      v246 = v241 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v247 = *(_OWORD *)v245;
        *(v244 - 1) = *((_OWORD *)v245 - 1);
        *v244 = v247;
        v244 -= 2;
        v245 -= 32;
        v246 -= 8;
      }
      while (v246);
      v230 = v243;
      if (v241 != (v241 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_336:
        do
        {
          v248 = *((_DWORD *)v230 - 1);
          v230 -= 4;
          *--v238 = v248;
        }
        while (v230 != v231);
      }
      goto LABEL_253;
    }
    break;
  }
  if (!*(_BYTE *)(a1 + 1592))
    return;
  v249 = (void *)a2[24];
  a2[25] = v249;
  v250 = ((*(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776)) >> 4);
  if (v250 > (uint64_t)(a2[26] - (_QWORD)v249) >> 2)
  {
    v251 = 4 * v250;
    v252 = (char *)operator new(4 * v250);
    a2[24] = v252;
    a2[25] = v252;
    a2[26] = &v252[v251];
    if (v249)
      operator delete(v249);
  }
  v253 = *(int **)(a1 + 776);
  v254 = *(int **)(a1 + 784);
  while (2)
  {
    if (v253 != v254)
    {
      if (!*(_BYTE *)(*((_QWORD *)v253 + 1) + 20))
        goto LABEL_262;
      v256 = *v253;
      v258 = (char *)a2[25];
      v257 = a2[26];
      if ((unint64_t)v258 < v257)
      {
        *(_DWORD *)v258 = v256;
        v255 = (uint64_t)(v258 + 4);
        goto LABEL_261;
      }
      v259 = (char *)*v305;
      v260 = v258 - (_BYTE *)*v305;
      v261 = v260 >> 2;
      v262 = (v260 >> 2) + 1;
      if (v262 >> 62)
        sub_20E867F44();
      v263 = v257 - (_QWORD)v259;
      if (v263 >> 1 > v262)
        v262 = v263 >> 1;
      if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFFCLL)
        v264 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v264 = v262;
      if (v264)
      {
        if (v264 >> 62)
          goto LABEL_316;
        v265 = operator new(4 * v264);
        v266 = &v265[4 * v261];
        *v266 = v256;
        v255 = (uint64_t)(v266 + 1);
        v267 = v258 - v259;
        if (v258 == v259)
        {
LABEL_283:
          a2[24] = v266;
          a2[25] = v255;
          a2[26] = &v265[4 * v264];
          if (v259)
            operator delete(v259);
LABEL_261:
          a2[25] = v255;
LABEL_262:
          v253 += 4;
          continue;
        }
      }
      else
      {
        v265 = 0;
        v266 = (_DWORD *)(4 * v261);
        *(_DWORD *)(4 * v261) = v256;
        v255 = 4 * v261 + 4;
        v267 = v258 - v259;
        if (v258 == v259)
          goto LABEL_283;
      }
      v268 = v267 - 4;
      if (v268 < 0x2C)
        goto LABEL_337;
      if ((unint64_t)(v258 - v265 - v260) < 0x20)
        goto LABEL_337;
      v269 = (v268 >> 2) + 1;
      v270 = 4 * (v269 & 0x7FFFFFFFFFFFFFF8);
      v271 = &v258[-v270];
      v266 = (_DWORD *)((char *)v266 - v270);
      v272 = &v265[4 * v261 - 16];
      v273 = v258 - 16;
      v274 = v269 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v275 = *(_OWORD *)v273;
        *(v272 - 1) = *((_OWORD *)v273 - 1);
        *v272 = v275;
        v272 -= 2;
        v273 -= 32;
        v274 -= 8;
      }
      while (v274);
      v258 = v271;
      if (v269 != (v269 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_337:
        do
        {
          v276 = *((_DWORD *)v258 - 1);
          v258 -= 4;
          *--v266 = v276;
        }
        while (v258 != v259);
      }
      goto LABEL_283;
    }
    break;
  }
  if (*(_BYTE *)(a1 + 1592))
  {
    v277 = (void *)a2[27];
    a2[28] = v277;
    v278 = ((*(_QWORD *)(a1 + 880) - *(_QWORD *)(a1 + 872)) >> 4);
    if (v278 > (uint64_t)(a2[29] - (_QWORD)v277) >> 2)
    {
      v279 = 4 * v278;
      v280 = (char *)operator new(4 * v278);
      a2[27] = v280;
      a2[28] = v280;
      a2[29] = &v280[v279];
      if (v277)
        operator delete(v277);
    }
    v281 = *(int **)(a1 + 872);
    v282 = *(int **)(a1 + 880);
    while (v281 != v282)
    {
      if (*(_BYTE *)(*((_QWORD *)v281 + 1) + 20))
      {
        v284 = *v281;
        v286 = (char *)a2[28];
        v285 = a2[29];
        if ((unint64_t)v286 < v285)
        {
          *(_DWORD *)v286 = v284;
          v283 = v286 + 4;
        }
        else
        {
          v287 = (char *)*v304;
          v288 = v286 - (_BYTE *)*v304;
          v289 = v288 >> 2;
          v290 = (v288 >> 2) + 1;
          if (v290 >> 62)
            sub_20E867F44();
          v291 = v285 - (_QWORD)v287;
          if (v291 >> 1 > v290)
            v290 = v291 >> 1;
          if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFFCLL)
            v292 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v292 = v290;
          if (v292)
          {
            if (v292 >> 62)
              goto LABEL_316;
            v293 = operator new(4 * v292);
          }
          else
          {
            v293 = 0;
          }
          v294 = &v293[4 * v289];
          *v294 = v284;
          v283 = v294 + 1;
          if (v286 != v287)
          {
            v295 = v286 - v287 - 4;
            if (v295 < 0x2C)
              goto LABEL_338;
            if ((unint64_t)(v286 - v293 - v288) < 0x20)
              goto LABEL_338;
            v296 = (v295 >> 2) + 1;
            v297 = 4 * (v296 & 0x7FFFFFFFFFFFFFF8);
            v298 = &v286[-v297];
            v294 = (_DWORD *)((char *)v294 - v297);
            v299 = &v293[4 * v289 - 16];
            v300 = v286 - 16;
            v301 = v296 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v302 = *(_OWORD *)v300;
              *(v299 - 1) = *((_OWORD *)v300 - 1);
              *v299 = v302;
              v299 -= 2;
              v300 -= 32;
              v301 -= 8;
            }
            while (v301);
            v286 = v298;
            if (v296 != (v296 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_338:
              do
              {
                v303 = *((_DWORD *)v286 - 1);
                v286 -= 4;
                *--v294 = v303;
              }
              while (v286 != v287);
            }
          }
          a2[27] = v294;
          a2[28] = v283;
          a2[29] = &v293[4 * v292];
          if (v287)
            operator delete(v287);
        }
        a2[28] = v283;
      }
      v281 += 4;
    }
  }
}

void *sub_20F8D63EC(_QWORD *a1, char **a2)
{
  uint64_t v4;
  char **v5;
  char **v6;
  char *v7;
  char **v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *result;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  char v44;

  sub_20F20CEEC(a1, 0, 1u);
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  sub_20F922E48((uint64_t)&v44, a1 + 13);
  v4 = 0;
  v5 = (char **)(a1 + 1913);
  do
  {
    v6 = &v5[3 * v4];
    v7 = *v6;
    if ((unint64_t)(v6[2] - *v6) > 0xFF)
      goto LABEL_2;
    v8 = &v5[3 * v4];
    v11 = v8[1];
    v9 = v8 + 1;
    v10 = v11;
    v12 = (char *)operator new(0x100uLL);
    v13 = v11 - v7;
    v14 = &v12[(v11 - v7) & 0xFFFFFFFFFFFFFFFCLL];
    v15 = v14;
    if (v11 != v7)
    {
      if ((unint64_t)(v13 - 4) < 0x2C)
      {
        v15 = &v12[(v10 - v7) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_11:
          v24 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v15 - 1) = v24;
          v15 -= 4;
        }
        while (v10 != v7);
        goto LABEL_12;
      }
      v15 = &v12[(v10 - v7) & 0xFFFFFFFFFFFFFFFCLL];
      if (v10 - v12 - (v13 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_11;
      v16 = v13 >> 2;
      v17 = ((unint64_t)(v13 - 4) >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v19 = &v10[-v18];
      v15 = &v14[-v18];
      v20 = &v12[4 * v16 - 16];
      v21 = (__int128 *)(v10 - 16);
      v22 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *v21;
        *((_OWORD *)v20 - 1) = *(v21 - 1);
        *(_OWORD *)v20 = v23;
        v20 -= 32;
        v21 -= 2;
        v22 -= 8;
      }
      while (v22);
      v10 = v19;
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_11;
    }
LABEL_12:
    *v6 = v15;
    *v9 = v14;
    v6[2] = v12 + 256;
    if (v7)
      operator delete(v7);
LABEL_2:
    ++v4;
  }
  while (v4 != 10);
  if (v5 != a2)
    sub_20F8EE574((char **)a1 + 1913, a2);
  v43 = (a1[1914] - a1[1913]) >> 2;
  v25 = (a1[1917] - a1[1916]) >> 2;
  v26 = (a1[1920] - a1[1919]) >> 2;
  v27 = (a1[1923] - a1[1922]) >> 2;
  v28 = (a1[1926] - a1[1925]) >> 2;
  v29 = (a1[1929] - a1[1928]) >> 2;
  v30 = (a1[1932] - a1[1931]) >> 2;
  v31 = (a1[1935] - a1[1934]) >> 2;
  v32 = (a1[1938] - a1[1937]) >> 2;
  v33 = (a1[1941] - a1[1940]) >> 2;
  (*(void (**)(_QWORD *, uint64_t))(a1[175] + 24))(a1 + 175, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[355] + 24))(a1 + 355, v33, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[535] + 24))(a1 + 535, v33, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[715] + 24))(a1 + 715, v33, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[895] + 24))(a1 + 895, v33, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1075] + 24))(a1 + 1075, v33, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1255] + 24))(a1 + 1255, v33, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1435] + 24))(a1 + 1435, v33, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1615] + 24))(a1 + 1615, v33, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1795] + 24))(a1 + 1795, v33, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[157] + 24))(a1 + 157, v32, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[337] + 24))(a1 + 337, v32, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[517] + 24))(a1 + 517, v32, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[697] + 24))(a1 + 697, v32, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[877] + 24))(a1 + 877, v32, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1057] + 24))(a1 + 1057, v32, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1237] + 24))(a1 + 1237, v32, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1417] + 24))(a1 + 1417, v32, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1597] + 24))(a1 + 1597, v32, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1777] + 24))(a1 + 1777, v32, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[139] + 24))(a1 + 139, v31, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[319] + 24))(a1 + 319, v31, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[499] + 24))(a1 + 499, v31, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[679] + 24))(a1 + 679, v31, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[859] + 24))(a1 + 859, v31, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1039] + 24))(a1 + 1039, v31, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1219] + 24))(a1 + 1219, v31, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1399] + 24))(a1 + 1399, v31, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1579] + 24))(a1 + 1579, v31, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1759] + 24))(a1 + 1759, v31, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[121] + 24))(a1 + 121, v30, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[301] + 24))(a1 + 301, v30, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[481] + 24))(a1 + 481, v30, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[661] + 24))(a1 + 661, v30, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[841] + 24))(a1 + 841, v30, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1021] + 24))(a1 + 1021, v30, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1201] + 24))(a1 + 1201, v30, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1381] + 24))(a1 + 1381, v30, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1561] + 24))(a1 + 1561, v30, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1741] + 24))(a1 + 1741, v30, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[103] + 24))(a1 + 103, v29, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[283] + 24))(a1 + 283, v29, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[463] + 24))(a1 + 463, v29, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[643] + 24))(a1 + 643, v29, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[823] + 24))(a1 + 823, v29, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1003] + 24))(a1 + 1003, v29, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1183] + 24))(a1 + 1183, v29, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1363] + 24))(a1 + 1363, v29, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1543] + 24))(a1 + 1543, v29, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1723] + 24))(a1 + 1723, v29, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[85] + 24))(a1 + 85, v28, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[265] + 24))(a1 + 265, v28, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[445] + 24))(a1 + 445, v28, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[625] + 24))(a1 + 625, v28, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[805] + 24))(a1 + 805, v28, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[985] + 24))(a1 + 985, v28, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1165] + 24))(a1 + 1165, v28, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1345] + 24))(a1 + 1345, v28, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1525] + 24))(a1 + 1525, v28, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1705] + 24))(a1 + 1705, v28, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[67] + 24))(a1 + 67, v27, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[247] + 24))(a1 + 247, v27, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[427] + 24))(a1 + 427, v27, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[607] + 24))(a1 + 607, v27, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[787] + 24))(a1 + 787, v27, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[967] + 24))(a1 + 967, v27, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1147] + 24))(a1 + 1147, v27, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1327] + 24))(a1 + 1327, v27, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1507] + 24))(a1 + 1507, v27, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1687] + 24))(a1 + 1687, v27, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[49] + 24))(a1 + 49, v26, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[229] + 24))(a1 + 229, v26, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[409] + 24))(a1 + 409, v26, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[589] + 24))(a1 + 589, v26, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[769] + 24))(a1 + 769, v26, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[949] + 24))(a1 + 949, v26, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1129] + 24))(a1 + 1129, v26, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1309] + 24))(a1 + 1309, v26, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1489] + 24))(a1 + 1489, v26, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1669] + 24))(a1 + 1669, v26, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[31] + 24))(a1 + 31, v25, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[211] + 24))(a1 + 211, v25, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[391] + 24))(a1 + 391, v25, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[571] + 24))(a1 + 571, v25, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[751] + 24))(a1 + 751, v25, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[931] + 24))(a1 + 931, v25, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1111] + 24))(a1 + 1111, v25, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1291] + 24))(a1 + 1291, v25, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1471] + 24))(a1 + 1471, v25, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1651] + 24))(a1 + 1651, v25, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[13] + 24))(a1 + 13, v43, v43);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[193] + 24))(a1 + 193, v43, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[373] + 24))(a1 + 373, v43, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[553] + 24))(a1 + 553, v43, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[733] + 24))(a1 + 733, v43, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[913] + 24))(a1 + 913, v43, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1093] + 24))(a1 + 1093, v43, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1273] + 24))(a1 + 1273, v43, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1453] + 24))(a1 + 1453, v43, v32);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[1633] + 24))(a1 + 1633, v43, v33);
  *((_DWORD *)a1 + 6) = v43;
  *((_DWORD *)a1 + 7) = v25;
  *((_DWORD *)a1 + 8) = v26;
  *((_DWORD *)a1 + 9) = v27;
  *((_DWORD *)a1 + 10) = v28;
  *((_DWORD *)a1 + 11) = v29;
  *((_DWORD *)a1 + 12) = v30;
  *((_DWORD *)a1 + 13) = v31;
  *((_DWORD *)a1 + 14) = v32;
  *(_QWORD *)((char *)a1 + 60) = v33;
  *((_DWORD *)a1 + 17) = 6 * v43;
  v35 = 9 * v25 + 6 * v43;
  v36 = v35 + 6 * v26;
  *((_DWORD *)a1 + 18) = v35;
  *((_DWORD *)a1 + 19) = v36;
  v37 = v36 + 6 * v27;
  v38 = 3 * v28 + v37;
  *((_DWORD *)a1 + 20) = v37;
  *((_DWORD *)a1 + 21) = v38;
  *((_DWORD *)a1 + 22) = v38 + v29;
  *((_DWORD *)a1 + 23) = v38 + v29 + 4 * v30;
  v39 = v38 + v29 + 4 * (v31 + v30);
  v40 = 3 * v32 + v39;
  *((_DWORD *)a1 + 24) = v39;
  *((_DWORD *)a1 + 25) = v40;
  v41 = (3 * v33 + v40);
  *((_DWORD *)a1 + 4) = v41;
  if (a1[1] < v41)
  {
    if (*a1)
      MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
    v42 = (8 * v41 + 31) & 0xFFFFFFFE0;
    *a1 = 0;
    a1[1] = v42 >> 3;
    result = operator new(v42, (std::align_val_t)0x20uLL);
    *a1 = result;
  }
  return result;
}

uint64_t sub_20F8D7234(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  uint64_t v71;
  uint64_t v72;
  uint64_t k;
  uint64_t v74;
  uint64_t v75;
  uint64_t m;
  uint64_t v77;
  uint64_t v78;
  uint64_t n;
  uint64_t v80;
  uint64_t v81;
  uint64_t ii;
  uint64_t v83;
  uint64_t v84;
  uint64_t jj;
  uint64_t v86;
  uint64_t v87;
  uint64_t kk;
  uint64_t v89;
  uint64_t v90;
  uint64_t mm;
  uint64_t v92;
  uint64_t v93;
  uint64_t nn;
  uint64_t v95;
  uint64_t v96;
  uint64_t i1;
  uint64_t v98;
  uint64_t v99;
  uint64_t i2;
  uint64_t v101;
  uint64_t v102;
  uint64_t i3;
  uint64_t v104;
  uint64_t v105;
  uint64_t i4;
  uint64_t v107;
  uint64_t v108;
  uint64_t i5;
  uint64_t v110;
  uint64_t v111;
  uint64_t i6;
  uint64_t v113;
  uint64_t v114;
  uint64_t i7;
  uint64_t v116;
  uint64_t v117;
  uint64_t i8;
  uint64_t v119;
  uint64_t v120;
  uint64_t i9;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int *v126;
  unint64_t v127;
  _BYTE *v128;
  unsigned int *v129;
  _BYTE *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int128 *v140;
  uint64_t v141;
  __int128 v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int *v150;
  char *v151;
  unsigned int v152;
  char *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  unsigned int *v162;
  int64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  unsigned int v172;
  __n128 *v173;
  char *v174;
  __n128 *v175;
  uint64_t v176;
  const std::nothrow_t *v177;
  char *v178;
  BOOL v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  unint64_t v185;
  _BYTE *v186;
  unsigned int *v187;
  _BYTE *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  unsigned int v203;
  char *v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int *v208;
  char *v209;
  unsigned int v210;
  char *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  unsigned int *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  unsigned int v230;
  __n128 *v231;
  char *v232;
  __n128 *v233;
  uint64_t v234;
  const std::nothrow_t *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int *v241;
  unint64_t v242;
  _BYTE *v243;
  unsigned int *v244;
  _BYTE *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  __int128 *v255;
  uint64_t v256;
  __int128 v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  char *v261;
  char *v262;
  unint64_t v263;
  unint64_t v264;
  unsigned int *v265;
  char *v266;
  unsigned int v267;
  char *v268;
  unint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _BYTE *v276;
  unsigned int *v277;
  int64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _OWORD *v283;
  char *v284;
  uint64_t v285;
  __int128 v286;
  unsigned int v287;
  __n128 *v288;
  char *v289;
  __n128 *v290;
  uint64_t v291;
  const std::nothrow_t *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int *v298;
  unint64_t v299;
  _BYTE *v300;
  unsigned int *v301;
  _BYTE *v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  __int128 *v312;
  uint64_t v313;
  __int128 v314;
  int v315;
  uint64_t v316;
  unsigned int v317;
  char *v318;
  char *v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int *v322;
  char *v323;
  unsigned int v324;
  char *v325;
  unint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  unsigned int *v334;
  int64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  _OWORD *v340;
  char *v341;
  uint64_t v342;
  __int128 v343;
  unsigned int v344;
  __n128 *v345;
  char *v346;
  __n128 *v347;
  uint64_t v348;
  const std::nothrow_t *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int *v355;
  unint64_t v356;
  _BYTE *v357;
  unsigned int *v358;
  _BYTE *v359;
  char *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  __int128 *v369;
  uint64_t v370;
  __int128 v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  char *v375;
  char *v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  char *v380;
  unsigned int v381;
  char *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  unsigned int *v391;
  int64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  _OWORD *v397;
  char *v398;
  uint64_t v399;
  __int128 v400;
  unsigned int v401;
  __n128 *v402;
  char *v403;
  __n128 *v404;
  uint64_t v405;
  const std::nothrow_t *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int *v412;
  unint64_t v413;
  _BYTE *v414;
  unsigned int *v415;
  _BYTE *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  __int128 *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  uint64_t v430;
  unsigned int v431;
  char *v432;
  char *v433;
  unint64_t v434;
  unint64_t v435;
  unsigned int *v436;
  char *v437;
  unsigned int v438;
  char *v439;
  unint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  _BYTE *v447;
  unsigned int *v448;
  int64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  _OWORD *v454;
  char *v455;
  uint64_t v456;
  __int128 v457;
  unsigned int v458;
  __n128 *v459;
  char *v460;
  __n128 *v461;
  uint64_t v462;
  const std::nothrow_t *v463;
  char *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int *v469;
  unint64_t v470;
  _BYTE *v471;
  unsigned int *v472;
  _BYTE *v473;
  char *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  char *v481;
  char *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  int v486;
  uint64_t v487;
  unsigned int v488;
  char *v489;
  char *v490;
  unint64_t v491;
  unint64_t v492;
  unsigned int *v493;
  char *v494;
  unsigned int v495;
  char *v496;
  unint64_t v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  _BYTE *v504;
  unsigned int *v505;
  int64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  _OWORD *v511;
  char *v512;
  uint64_t v513;
  __int128 v514;
  unsigned int v515;
  __n128 *v516;
  char *v517;
  __n128 *v518;
  uint64_t v519;
  const std::nothrow_t *v520;
  char *v521;
  char *v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int *v525;
  unsigned int *v526;
  unint64_t v527;
  _BYTE *v528;
  unsigned int *v529;
  _BYTE *v530;
  char *v531;
  uint64_t v532;
  char *v533;
  char *v534;
  uint64_t v535;
  unint64_t v536;
  uint64_t v537;
  char *v538;
  char *v539;
  __int128 *v540;
  uint64_t v541;
  __int128 v542;
  int v543;
  uint64_t v544;
  unsigned int v545;
  char *v546;
  char *v547;
  unint64_t v548;
  unint64_t v549;
  unsigned int *v550;
  char *v551;
  unsigned int v552;
  char *v553;
  unint64_t v554;
  char *v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t v560;
  _BYTE *v561;
  unsigned int *v562;
  int64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  char *v567;
  _OWORD *v568;
  char *v569;
  uint64_t v570;
  __int128 v571;
  unsigned int v572;
  __n128 *v573;
  char *v574;
  __n128 *v575;
  uint64_t v576;
  const std::nothrow_t *v577;
  char *v578;
  char *v579;
  uint64_t v580;
  uint64_t v581;
  unsigned int *v582;
  unsigned int *v583;
  unint64_t v584;
  _BYTE *v585;
  unsigned int *v586;
  _BYTE *v587;
  char *v588;
  uint64_t v589;
  char *v590;
  char *v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  char *v595;
  char *v596;
  __int128 *v597;
  uint64_t v598;
  __int128 v599;
  int v600;
  uint64_t v601;
  unsigned int v602;
  char *v603;
  char *v604;
  unint64_t v605;
  unint64_t v606;
  unsigned int *v607;
  char *v608;
  unsigned int v609;
  char *v610;
  unint64_t v611;
  char *v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  unint64_t v617;
  _BYTE *v618;
  unsigned int *v619;
  int64_t v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  char *v624;
  _OWORD *v625;
  char *v626;
  uint64_t v627;
  __int128 v628;
  unsigned int v629;
  __n128 *v630;
  char *v631;
  __n128 *v632;
  uint64_t v633;
  const std::nothrow_t *v634;
  char *v635;
  char *v636;
  uint64_t v637;
  uint64_t v638;
  unsigned int *v639;
  unsigned int *v640;
  unint64_t v641;
  _BYTE *v642;
  unsigned int *v643;
  _BYTE *v644;
  char *v645;
  uint64_t v646;
  char *v647;
  char *v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  char *v652;
  char *v653;
  __int128 *v654;
  uint64_t v655;
  __int128 v656;
  int v657;
  uint64_t v658;
  unsigned int v659;
  char *v660;
  char *v661;
  unint64_t v662;
  unint64_t v663;
  unsigned int *v664;
  char *v665;
  unsigned int v666;
  char *v667;
  unint64_t v668;
  char *v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  unint64_t v674;
  _BYTE *v675;
  unsigned int *v676;
  int64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  char *v681;
  _OWORD *v682;
  char *v683;
  uint64_t v684;
  __int128 v685;
  unsigned int v686;
  __n128 *v687;
  char *v688;
  __n128 *v689;
  uint64_t v690;
  const std::nothrow_t *v691;
  char *v692;
  char *v693;
  uint64_t v694;
  uint64_t v695;
  unsigned int *v696;
  unsigned int *v697;
  unint64_t v698;
  _BYTE *v699;
  unsigned int *v700;
  _BYTE *v701;
  char *v702;
  uint64_t v703;
  char *v704;
  char *v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  char *v709;
  char *v710;
  __int128 *v711;
  uint64_t v712;
  __int128 v713;
  int v714;
  uint64_t v715;
  unsigned int v716;
  char *v717;
  char *v718;
  unint64_t v719;
  unint64_t v720;
  unsigned int *v721;
  char *v722;
  unsigned int v723;
  char *v724;
  unint64_t v725;
  char *v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  unint64_t v731;
  _BYTE *v732;
  unsigned int *v733;
  int64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  char *v738;
  _OWORD *v739;
  char *v740;
  uint64_t v741;
  __int128 v742;
  unsigned int v743;
  __n128 *v744;
  char *v745;
  __n128 *v746;
  uint64_t v747;
  const std::nothrow_t *v748;
  char *v749;
  char *v750;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unsigned int *v785;
  unsigned int *v786;
  unsigned int *v787;
  unsigned int *v788;
  unsigned int *v789;
  unsigned int *v790;
  unsigned int *v791;
  unsigned int *v792;
  unsigned int *v793;
  unsigned int *v794;
  unsigned int *v795;
  void **v796;
  void **v797;
  void **v798;
  void **v799;
  void **v800;
  void **v801;
  void **v802;
  void **v803;
  void **v804;
  void **v805;
  void **v806;
  char v807;

  if (!*(_BYTE *)(a1 + 1594))
  {
    if (!*(_BYTE *)(a1 + 1593))
    {
      v2 = *(_QWORD *)(a1 + 1864);
      v3 = *(_QWORD *)(a1 + 1872);
      *(_BYTE *)(a1 + 1593) = v2 != v3;
      if (v2 == v3)
      {
        v4 = *(_QWORD *)(a1 + 1888);
        v5 = *(_QWORD *)(a1 + 1896);
        *(_BYTE *)(a1 + 1593) = v4 != v5;
        if (v4 == v5)
        {
          v6 = *(_QWORD *)(a1 + 1912);
          v7 = *(_QWORD *)(a1 + 1920);
          *(_BYTE *)(a1 + 1593) = v6 != v7;
          if (v6 == v7)
          {
            v8 = *(_QWORD *)(a1 + 1936);
            v9 = *(_QWORD *)(a1 + 1944);
            *(_BYTE *)(a1 + 1593) = v8 != v9;
            if (v8 == v9)
            {
              v10 = *(_QWORD *)(a1 + 1960);
              v11 = *(_QWORD *)(a1 + 1968);
              *(_BYTE *)(a1 + 1593) = v10 != v11;
              if (v10 == v11)
              {
                v12 = *(_QWORD *)(a1 + 1984);
                v13 = *(_QWORD *)(a1 + 1992);
                *(_BYTE *)(a1 + 1593) = v12 != v13;
                if (v12 == v13)
                {
                  v14 = *(_QWORD *)(a1 + 2008);
                  v15 = *(_QWORD *)(a1 + 2016);
                  *(_BYTE *)(a1 + 1593) = v14 != v15;
                  if (v14 == v15)
                  {
                    v16 = *(_QWORD *)(a1 + 2032);
                    v17 = *(_QWORD *)(a1 + 2040);
                    *(_BYTE *)(a1 + 1593) = v16 != v17;
                    if (v16 == v17)
                    {
                      v18 = *(_QWORD *)(a1 + 2056);
                      v19 = *(_QWORD *)(a1 + 2064);
                      *(_BYTE *)(a1 + 1593) = v18 != v19;
                      if (v18 == v19)
                      {
                        v20 = *(_QWORD *)(a1 + 2080);
                        v21 = *(_QWORD *)(a1 + 2088);
                        *(_BYTE *)(a1 + 1593) = v20 != v21;
                        if (v20 == v21)
                          *(_BYTE *)(a1 + 1593) = *(_QWORD *)(a1 + 2104) != *(_QWORD *)(a1 + 2112);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 1593))
    {
LABEL_877:
      *(_BYTE *)(a1 + 1594) = 1;
      return a1 + 1600;
    }
    v22 = *(void **)(a1 + 2392);
    *(_QWORD *)(a1 + 2400) = v22;
    v23 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v24 = v23 >> 4;
    if (v23 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2408) - (_QWORD)v22) >> 2))
    {
      if (v23 < 0)
        sub_20E867F44();
      v25 = (char *)operator new((unint64_t)v23 >> 2);
      *(_QWORD *)(a1 + 2392) = v25;
      *(_QWORD *)(a1 + 2400) = v25;
      *(_QWORD *)(a1 + 2408) = &v25[4 * v24];
      if (v22)
        operator delete(v22);
    }
    v26 = *(void **)(a1 + 2416);
    *(_QWORD *)(a1 + 2424) = v26;
    v27 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    v28 = v27 >> 4;
    if (v27 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2432) - (_QWORD)v26) >> 2))
    {
      if (v27 < 0)
        sub_20E867F44();
      v29 = (char *)operator new((unint64_t)v27 >> 2);
      *(_QWORD *)(a1 + 2416) = v29;
      *(_QWORD *)(a1 + 2424) = v29;
      *(_QWORD *)(a1 + 2432) = &v29[4 * v28];
      if (v26)
        operator delete(v26);
    }
    v30 = *(void **)(a1 + 2440);
    *(_QWORD *)(a1 + 2448) = v30;
    v31 = *(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200);
    v32 = v31 >> 4;
    if (v31 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2456) - (_QWORD)v30) >> 2))
    {
      if (v31 < 0)
        sub_20E867F44();
      v33 = (char *)operator new((unint64_t)v31 >> 2);
      *(_QWORD *)(a1 + 2440) = v33;
      *(_QWORD *)(a1 + 2448) = v33;
      *(_QWORD *)(a1 + 2456) = &v33[4 * v32];
      if (v30)
        operator delete(v30);
    }
    v34 = *(void **)(a1 + 2464);
    *(_QWORD *)(a1 + 2472) = v34;
    v35 = *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296);
    v36 = v35 >> 4;
    if (v35 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2480) - (_QWORD)v34) >> 2))
    {
      if (v35 < 0)
        sub_20E867F44();
      v37 = (char *)operator new((unint64_t)v35 >> 2);
      *(_QWORD *)(a1 + 2464) = v37;
      *(_QWORD *)(a1 + 2472) = v37;
      *(_QWORD *)(a1 + 2480) = &v37[4 * v36];
      if (v34)
        operator delete(v34);
    }
    v38 = *(void **)(a1 + 2488);
    *(_QWORD *)(a1 + 2496) = v38;
    v39 = *(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392);
    v40 = v39 >> 4;
    if (v39 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2504) - (_QWORD)v38) >> 2))
    {
      if (v39 < 0)
        sub_20E867F44();
      v41 = (char *)operator new((unint64_t)v39 >> 2);
      *(_QWORD *)(a1 + 2488) = v41;
      *(_QWORD *)(a1 + 2496) = v41;
      *(_QWORD *)(a1 + 2504) = &v41[4 * v40];
      if (v38)
        operator delete(v38);
    }
    v42 = *(void **)(a1 + 2512);
    *(_QWORD *)(a1 + 2520) = v42;
    v43 = *(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488);
    v44 = v43 >> 4;
    if (v43 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2528) - (_QWORD)v42) >> 2))
    {
      if (v43 < 0)
        sub_20E867F44();
      v45 = (char *)operator new((unint64_t)v43 >> 2);
      *(_QWORD *)(a1 + 2512) = v45;
      *(_QWORD *)(a1 + 2520) = v45;
      *(_QWORD *)(a1 + 2528) = &v45[4 * v44];
      if (v42)
        operator delete(v42);
    }
    v46 = *(void **)(a1 + 2536);
    *(_QWORD *)(a1 + 2544) = v46;
    v47 = *(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584);
    v48 = v47 >> 4;
    if (v47 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2552) - (_QWORD)v46) >> 2))
    {
      if (v47 < 0)
        sub_20E867F44();
      v49 = (char *)operator new((unint64_t)v47 >> 2);
      *(_QWORD *)(a1 + 2536) = v49;
      *(_QWORD *)(a1 + 2544) = v49;
      *(_QWORD *)(a1 + 2552) = &v49[4 * v48];
      if (v46)
        operator delete(v46);
    }
    v50 = *(void **)(a1 + 2560);
    *(_QWORD *)(a1 + 2568) = v50;
    v51 = *(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680);
    v52 = v51 >> 4;
    if (v51 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2576) - (_QWORD)v50) >> 2))
    {
      if (v51 < 0)
        sub_20E867F44();
      v53 = (char *)operator new((unint64_t)v51 >> 2);
      *(_QWORD *)(a1 + 2560) = v53;
      *(_QWORD *)(a1 + 2568) = v53;
      *(_QWORD *)(a1 + 2576) = &v53[4 * v52];
      if (v50)
        operator delete(v50);
    }
    v54 = *(void **)(a1 + 2584);
    *(_QWORD *)(a1 + 2592) = v54;
    v55 = *(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776);
    v56 = v55 >> 4;
    if (v55 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2600) - (_QWORD)v54) >> 2))
    {
      if (v55 < 0)
        sub_20E867F44();
      v57 = (char *)operator new((unint64_t)v55 >> 2);
      *(_QWORD *)(a1 + 2584) = v57;
      *(_QWORD *)(a1 + 2592) = v57;
      *(_QWORD *)(a1 + 2600) = &v57[4 * v56];
      if (v54)
        operator delete(v54);
    }
    v58 = *(void **)(a1 + 2608);
    *(_QWORD *)(a1 + 2616) = v58;
    v59 = *(_QWORD *)(a1 + 880) - *(_QWORD *)(a1 + 872);
    v60 = v59 >> 4;
    if (v59 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2624) - (_QWORD)v58) >> 2))
    {
      if (v59 < 0)
        sub_20E867F44();
      v61 = (char *)operator new((unint64_t)v59 >> 2);
      *(_QWORD *)(a1 + 2608) = v61;
      *(_QWORD *)(a1 + 2616) = v61;
      *(_QWORD *)(a1 + 2624) = &v61[4 * v60];
      if (v58)
        operator delete(v58);
    }
    v62 = *(void **)(a1 + 2632);
    *(_QWORD *)(a1 + 2640) = v62;
    v63 = *(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968);
    v64 = v63 >> 4;
    if (v63 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2648) - (_QWORD)v62) >> 2))
    {
      if (v63 < 0)
        sub_20E867F44();
      v65 = (char *)operator new((unint64_t)v63 >> 2);
      *(_QWORD *)(a1 + 2632) = v65;
      *(_QWORD *)(a1 + 2640) = v65;
      *(_QWORD *)(a1 + 2648) = &v65[4 * v64];
      if (v62)
        operator delete(v62);
    }
    v66 = *(_QWORD *)(a1 + 1064);
    for (i = *(_QWORD *)(a1 + 1072); v66 != i; v66 += 504)
    {
      v68 = *(_QWORD *)(v66 + 208);
      if (*(_BYTE *)(v66 + 496)
        || (*(_BYTE *)(v68 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v66 + 216) + 4) & 6) != 0)
      {
        *(_BYTE *)(v66 + 496) = 1;
        sub_20F394A20(a1 + 2392, v68);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v66 + 216));
      }
    }
    v69 = *(_QWORD *)(a1 + 1088);
    for (j = *(_QWORD *)(a1 + 1096); v69 != j; v69 += 280)
    {
      v71 = *(_QWORD *)(v69 + 136);
      if (*(_BYTE *)(v69 + 272) || (*(_BYTE *)(v71 + 4) & 6) != 0)
      {
        *(_BYTE *)(v69 + 272) = 1;
        sub_20F394A20(a1 + 2392, v71);
      }
    }
    v72 = *(_QWORD *)(a1 + 1112);
    for (k = *(_QWORD *)(a1 + 1120); v72 != k; v72 += 280)
    {
      v74 = *(_QWORD *)(v72 + 136);
      if (*(_BYTE *)(v72 + 272) || (*(_BYTE *)(v74 + 4) & 6) != 0)
      {
        *(_BYTE *)(v72 + 272) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2392), v74);
      }
    }
    v75 = *(_QWORD *)(a1 + 1136);
    for (m = *(_QWORD *)(a1 + 1144); v75 != m; v75 += 280)
    {
      v77 = *(_QWORD *)(v75 + 136);
      if (*(_BYTE *)(v75 + 272) || (*(_BYTE *)(v77 + 4) & 6) != 0)
      {
        *(_BYTE *)(v75 + 272) = 1;
        sub_20F59A480((_QWORD *)(a1 + 2392), v77);
      }
    }
    v78 = *(_QWORD *)(a1 + 1160);
    for (n = *(_QWORD *)(a1 + 1168); v78 != n; v78 += 160)
    {
      v80 = *(_QWORD *)(v78 + 64);
      if (*(_BYTE *)(v78 + 152) || (*(_BYTE *)(v80 + 4) & 6) != 0)
      {
        *(_BYTE *)(v78 + 152) = 1;
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v80);
      }
    }
    v81 = *(_QWORD *)(a1 + 1184);
    for (ii = *(_QWORD *)(a1 + 1192); v81 != ii; v81 += 8016)
    {
      v83 = *(_QWORD *)(v81 + 7696);
      if (*(_BYTE *)(v81 + 8008)
        || (*(_BYTE *)(v83 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v81 + 7704) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v81 + 7712) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v81 + 7720) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v81 + 7728) + 4) & 6) != 0)
      {
        *(_BYTE *)(v81 + 8008) = 1;
        sub_20F394A20(a1 + 2392, v83);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v81 + 7704));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v81 + 7712));
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v81 + 7720));
        sub_20F59A150((_QWORD *)(a1 + 2392), *(_QWORD *)(v81 + 7728));
      }
    }
    v84 = *(_QWORD *)(a1 + 1208);
    for (jj = *(_QWORD *)(a1 + 1216); v84 != jj; v84 += 5336)
    {
      v86 = *(_QWORD *)(v84 + 5024);
      if (*(_BYTE *)(v84 + 5328)
        || (*(_BYTE *)(v86 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v84 + 5032) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v84 + 5040) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v84 + 5048) + 4) & 6) != 0)
      {
        *(_BYTE *)(v84 + 5328) = 1;
        sub_20F394A20(a1 + 2392, v86);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v84 + 5032));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v84 + 5040));
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v84 + 5048));
      }
    }
    v87 = *(_QWORD *)(a1 + 1232);
    for (kk = *(_QWORD *)(a1 + 1240); v87 != kk; v87 += 144)
    {
      v89 = *(_QWORD *)(v87 + 48);
      if (*(_BYTE *)(v87 + 136) || (*(_BYTE *)(v89 + 4) & 6) != 0)
      {
        *(_BYTE *)(v87 + 136) = 1;
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v89);
      }
    }
    v90 = *(_QWORD *)(a1 + 1256);
    for (mm = *(_QWORD *)(a1 + 1264); v90 != mm; v90 += 152)
    {
      v92 = *(_QWORD *)(v90 + 48);
      if (*(_BYTE *)(v90 + 144) || (*(_BYTE *)(v92 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v90 + 56) + 4) & 6) != 0)
      {
        *(_BYTE *)(v90 + 144) = 1;
        sub_20F394A20(a1 + 2392, v92);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v90 + 56));
      }
    }
    v93 = *(_QWORD *)(a1 + 1280);
    for (nn = *(_QWORD *)(a1 + 1288); v93 != nn; v93 += 304)
    {
      v95 = *(_QWORD *)(v93 + 200);
      if (*(_BYTE *)(v93 + 296)
        || (*(_BYTE *)(v95 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v93 + 208) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v93 + 216) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v93 + 224) + 4) & 6) != 0)
      {
        *(_BYTE *)(v93 + 296) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2392), v95);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v93 + 208));
        sub_20F599FB8((_QWORD *)(a1 + 2392), *(_QWORD *)(v93 + 216));
        sub_20F599E20((_QWORD *)(a1 + 2392), *(_QWORD *)(v93 + 224));
      }
    }
    v96 = *(_QWORD *)(a1 + 1304);
    for (i1 = *(_QWORD *)(a1 + 1312); v96 != i1; v96 += 360)
    {
      v98 = *(_QWORD *)(v96 + 224);
      if (*(_BYTE *)(v96 + 352)
        || (*(_BYTE *)(v98 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v96 + 232) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v96 + 240) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v96 + 248) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v96 + 256) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v96 + 264) + 4) & 6) != 0)
      {
        *(_BYTE *)(v96 + 352) = 1;
        sub_20F394A20(a1 + 2392, v98);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v96 + 232));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v96 + 240));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v96 + 248));
        sub_20F59A480((_QWORD *)(a1 + 2392), *(_QWORD *)(v96 + 256));
        sub_20F59A150((_QWORD *)(a1 + 2392), *(_QWORD *)(v96 + 264));
      }
    }
    v99 = *(_QWORD *)(a1 + 1328);
    for (i2 = *(_QWORD *)(a1 + 1336); v99 != i2; v99 += 112)
    {
      v101 = *(_QWORD *)(v99 + 48);
      if (*(_BYTE *)(v99 + 104) || (*(_BYTE *)(v101 + 4) & 6) != 0)
      {
        *(_BYTE *)(v99 + 104) = 1;
        sub_20F59A150((_QWORD *)(a1 + 2392), v101);
      }
    }
    v102 = *(_QWORD *)(a1 + 1352);
    for (i3 = *(_QWORD *)(a1 + 1360); v102 != i3; v102 += 208)
    {
      v104 = *(_QWORD *)(v102 + 96);
      if (*(_BYTE *)(v102 + 200) || (*(_BYTE *)(v104 + 4) & 6) != 0)
      {
        *(_BYTE *)(v102 + 200) = 1;
        sub_20F599FB8((_QWORD *)(a1 + 2392), v104);
      }
    }
    v105 = *(_QWORD *)(a1 + 1376);
    for (i4 = *(_QWORD *)(a1 + 1384); v105 != i4; v105 += 208)
    {
      v107 = *(_QWORD *)(v105 + 96);
      if (*(_BYTE *)(v105 + 200) || (*(_BYTE *)(v107 + 4) & 6) != 0)
      {
        *(_BYTE *)(v105 + 200) = 1;
        sub_20F599E20((_QWORD *)(a1 + 2392), v107);
      }
    }
    v108 = *(_QWORD *)(a1 + 1400);
    for (i5 = *(_QWORD *)(a1 + 1408); v108 != i5; v108 += 176)
    {
      v110 = *(_QWORD *)(v108 + 80);
      if (*(_BYTE *)(v108 + 168) || (*(_BYTE *)(v110 + 4) & 6) != 0)
      {
        *(_BYTE *)(v108 + 168) = 1;
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v110);
      }
    }
    v111 = *(_QWORD *)(a1 + 1424);
    for (i6 = *(_QWORD *)(a1 + 1432); v111 != i6; v111 += 176)
    {
      v113 = *(_QWORD *)(v111 + 80);
      if (*(_BYTE *)(v111 + 168) || (*(_BYTE *)(v113 + 4) & 6) != 0)
      {
        *(_BYTE *)(v111 + 168) = 1;
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v113);
      }
    }
    v114 = *(_QWORD *)(a1 + 1448);
    for (i7 = *(_QWORD *)(a1 + 1456); v114 != i7; v114 += 216)
    {
      v116 = *(_QWORD *)(v114 + 56);
      if (*(_BYTE *)(v114 + 208)
        || (*(_BYTE *)(v116 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v114 + 136) + 4) & 6) != 0)
      {
        *(_BYTE *)(v114 + 208) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2392), v116);
        sub_20F599C88((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 64));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v114 + 72));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v114 + 80));
        sub_20F599FB8((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 88));
        sub_20F599FB8((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 96));
        sub_20F599E20((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 104));
        sub_20F599E20((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 112));
        sub_20F8DAC28((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 120));
        sub_20F8DAC28((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 128));
        sub_20F8DAF58((_QWORD *)(a1 + 2392), *(_QWORD *)(v114 + 136));
      }
    }
    v117 = *(_QWORD *)(a1 + 1472);
    for (i8 = *(_QWORD *)(a1 + 1480); v117 != i8; v117 += 184)
    {
      v119 = *(_QWORD *)(v117 + 64);
      if (*(_BYTE *)(v117 + 176)
        || (*(_BYTE *)(v119 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v117 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v117 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v117 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v117 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v117 + 104) + 4) & 6) != 0)
      {
        *(_BYTE *)(v117 + 176) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2392), v119);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v117 + 72));
        sub_20F599FB8((_QWORD *)(a1 + 2392), *(_QWORD *)(v117 + 80));
        sub_20F599E20((_QWORD *)(a1 + 2392), *(_QWORD *)(v117 + 88));
        sub_20F8DAC28((_QWORD *)(a1 + 2392), *(_QWORD *)(v117 + 96));
        sub_20F59A2E8((_QWORD *)(a1 + 2392), *(_QWORD *)(v117 + 104));
      }
    }
    v120 = *(_QWORD *)(a1 + 1496);
    for (i9 = *(_QWORD *)(a1 + 1504); v120 != i9; v120 += 208)
    {
      v122 = *(_QWORD *)(v120 + 64);
      if (*(_BYTE *)(v120 + 200)
        || (*(_BYTE *)(v122 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 136) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v120 + 144) + 4) & 6) != 0)
      {
        *(_BYTE *)(v120 + 200) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2392), v122);
        sub_20F599C88((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 72));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v120 + 80));
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v120 + 88));
        sub_20F599FB8((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 96));
        sub_20F599FB8((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 104));
        sub_20F599E20((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 112));
        sub_20F599E20((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 120));
        sub_20F8DAC28((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 128));
        sub_20F8DAC28((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 136));
        sub_20F8DAF58((_QWORD *)(a1 + 2392), *(_QWORD *)(v120 + 144));
      }
    }
    v123 = *(_QWORD *)(a1 + 1872);
    v124 = *(_QWORD *)(a1 + 1864);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v796 = (void **)(a1 + 1864);
    v125 = *(unsigned int **)(a1 + 2400);
    v126 = *(unsigned int **)(a1 + 2392);
    v127 = ((v123 - v124) >> 2) + v125 - v126;
    v128 = *(_BYTE **)(a1 + 1864);
    v752 = (v123 - v124) >> 2;
    v763 = v124;
    v774 = v123;
    if (v127 <= (uint64_t)(*(_QWORD *)(a1 + 1880) - (_QWORD)v128) >> 2)
    {
LABEL_228:
      if (v126 != v125)
      {
        v785 = v125;
        while (1)
        {
          v145 = *v126;
          v147 = *(char **)(a1 + 8);
          v146 = *(char **)(a1 + 16);
          if (v146 != v147)
          {
            v148 = (v146 - v147) >> 4;
            do
            {
              v149 = v148 >> 1;
              v150 = (unsigned int *)&v147[16 * (v148 >> 1)];
              v152 = *v150;
              v151 = (char *)(v150 + 4);
              v148 += ~(v148 >> 1);
              if (v152 < v145)
                v147 = v151;
              else
                v148 = v149;
            }
            while (v148);
          }
          if (v147 == v146 || *(_DWORD *)v147 != v145)
          {
            v145 = *(_DWORD *)v146;
            v147 = *(char **)(a1 + 16);
          }
          if ((*(_BYTE *)(*((_QWORD *)v147 + 1) + 4) & 6) != 0)
            goto LABEL_232;
          v153 = *(char **)(a1 + 1872);
          v154 = *(_QWORD *)(a1 + 1880);
          if ((unint64_t)v153 >= v154)
            break;
          *(_DWORD *)v153 = v145;
          v144 = (uint64_t)(v153 + 4);
LABEL_231:
          *(_QWORD *)(a1 + 1872) = v144;
          *(_BYTE *)(*((_QWORD *)v147 + 1) + 4) ^= 2u;
LABEL_232:
          if (++v126 == v125)
            goto LABEL_264;
        }
        v155 = (char *)*v796;
        v156 = v153 - (_BYTE *)*v796;
        v157 = v156 >> 2;
        v158 = (v156 >> 2) + 1;
        if (v158 >> 62)
          goto LABEL_879;
        v159 = v154 - (_QWORD)v155;
        if (v159 >> 1 > v158)
          v158 = v159 >> 1;
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
          v160 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v160 = v158;
        if (v160)
        {
          if (v160 >> 62)
LABEL_880:
            sub_20E877A38();
          v161 = operator new(4 * v160);
          v162 = (unsigned int *)&v161[4 * v157];
          *v162 = v145;
          v144 = (uint64_t)(v162 + 1);
          v163 = v153 - v155;
          if (v153 == v155)
            goto LABEL_261;
        }
        else
        {
          v161 = 0;
          v162 = (unsigned int *)(4 * v157);
          *(_DWORD *)(4 * v157) = v145;
          v144 = 4 * v157 + 4;
          v163 = v153 - v155;
          if (v153 == v155)
          {
LABEL_261:
            *(_QWORD *)(a1 + 1864) = v162;
            *(_QWORD *)(a1 + 1872) = v144;
            *(_QWORD *)(a1 + 1880) = &v161[4 * v160];
            if (v155)
              operator delete(v155);
            v125 = v785;
            goto LABEL_231;
          }
        }
        v164 = v163 - 4;
        if (v164 < 0x2C)
          goto LABEL_894;
        if ((unint64_t)(v153 - v161 - v156) < 0x20)
          goto LABEL_894;
        v165 = (v164 >> 2) + 1;
        v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
        v167 = &v153[-v166];
        v162 = (unsigned int *)((char *)v162 - v166);
        v168 = &v161[4 * v157 - 16];
        v169 = v153 - 16;
        v170 = v165 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v171 = *(_OWORD *)v169;
          *(v168 - 1) = *((_OWORD *)v169 - 1);
          *v168 = v171;
          v168 -= 2;
          v169 -= 32;
          v170 -= 8;
        }
        while (v170);
        v153 = v167;
        if (v165 != (v165 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_894:
          do
          {
            v172 = *((_DWORD *)v153 - 1);
            v153 -= 4;
            *--v162 = v172;
          }
          while (v153 != v155);
        }
        goto LABEL_261;
      }
LABEL_264:
      if (v774 != v763)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v173 = *(__n128 **)(a1 + 1864);
        v174 = (char *)v173 + 4 * v752;
        v175 = *(__n128 **)(a1 + 1872);
        if (((char *)v175 - v174) >> 2 >= v752)
          v176 = v752;
        else
          v176 = ((char *)v175 - v174) >> 2;
        if (v176 < 1)
        {
LABEL_272:
          v180 = 0;
          v176 = 0;
        }
        else
        {
          v177 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v178 = (char *)operator new(4 * v176, v177);
            if (v178)
              break;
            v179 = (unint64_t)v176 > 1;
            v176 = (unint64_t)v176 >> 1;
            if (!v179)
              goto LABEL_272;
          }
          v180 = v178;
        }
        sub_20EDB30B0(v173, (__n128 *)((char *)v173 + 4 * v752), v175, (uint64_t)&v807, v752, ((char *)v175 - v174) >> 2, v180, v176);
        if (v180)
          operator delete(v180);
      }
      v181 = *(_QWORD *)(a1 + 1896);
      v182 = *(_QWORD *)(a1 + 1888);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v797 = (void **)(a1 + 1888);
      v183 = *(unsigned int **)(a1 + 2424);
      v184 = *(unsigned int **)(a1 + 2416);
      v185 = ((v181 - v182) >> 2) + v183 - v184;
      v186 = *(_BYTE **)(a1 + 1888);
      v753 = (v181 - v182) >> 2;
      v764 = v182;
      v775 = v181;
      if (v185 <= (uint64_t)(*(_QWORD *)(a1 + 1904) - (_QWORD)v186) >> 2)
      {
LABEL_288:
        if (v184 != v183)
        {
          v786 = v183;
          while (1)
          {
            v203 = *v184;
            v205 = *(char **)(a1 + 104);
            v204 = *(char **)(a1 + 112);
            if (v204 != v205)
            {
              v206 = (v204 - v205) >> 4;
              do
              {
                v207 = v206 >> 1;
                v208 = (unsigned int *)&v205[16 * (v206 >> 1)];
                v210 = *v208;
                v209 = (char *)(v208 + 4);
                v206 += ~(v206 >> 1);
                if (v210 < v203)
                  v205 = v209;
                else
                  v206 = v207;
              }
              while (v206);
            }
            if (v205 == v204 || *(_DWORD *)v205 != v203)
            {
              v203 = *(_DWORD *)v204;
              v205 = *(char **)(a1 + 112);
            }
            if ((*(_BYTE *)(*((_QWORD *)v205 + 1) + 4) & 6) != 0)
              goto LABEL_292;
            v211 = *(char **)(a1 + 1896);
            v212 = *(_QWORD *)(a1 + 1904);
            if ((unint64_t)v211 >= v212)
              break;
            *(_DWORD *)v211 = v203;
            v202 = (uint64_t)(v211 + 4);
LABEL_291:
            *(_QWORD *)(a1 + 1896) = v202;
            *(_BYTE *)(*((_QWORD *)v205 + 1) + 4) ^= 2u;
LABEL_292:
            if (++v184 == v183)
              goto LABEL_324;
          }
          v213 = (char *)*v797;
          v214 = v211 - (_BYTE *)*v797;
          v215 = v214 >> 2;
          v216 = (v214 >> 2) + 1;
          if (v216 >> 62)
            goto LABEL_879;
          v217 = v212 - (_QWORD)v213;
          if (v217 >> 1 > v216)
            v216 = v217 >> 1;
          if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
            v218 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v218 = v216;
          if (v218)
          {
            if (v218 >> 62)
              goto LABEL_880;
            v219 = operator new(4 * v218);
            v220 = (unsigned int *)&v219[4 * v215];
            *v220 = v203;
            v202 = (uint64_t)(v220 + 1);
            v221 = v211 - v213;
            if (v211 == v213)
              goto LABEL_321;
          }
          else
          {
            v219 = 0;
            v220 = (unsigned int *)(4 * v215);
            *(_DWORD *)(4 * v215) = v203;
            v202 = 4 * v215 + 4;
            v221 = v211 - v213;
            if (v211 == v213)
            {
LABEL_321:
              *(_QWORD *)(a1 + 1888) = v220;
              *(_QWORD *)(a1 + 1896) = v202;
              *(_QWORD *)(a1 + 1904) = &v219[4 * v218];
              if (v213)
                operator delete(v213);
              v183 = v786;
              goto LABEL_291;
            }
          }
          v222 = v221 - 4;
          if (v222 < 0x2C)
            goto LABEL_895;
          if ((unint64_t)(v211 - v219 - v214) < 0x20)
            goto LABEL_895;
          v223 = (v222 >> 2) + 1;
          v224 = 4 * (v223 & 0x7FFFFFFFFFFFFFF8);
          v225 = &v211[-v224];
          v220 = (unsigned int *)((char *)v220 - v224);
          v226 = &v219[4 * v215 - 16];
          v227 = v211 - 16;
          v228 = v223 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v229 = *(_OWORD *)v227;
            *(v226 - 1) = *((_OWORD *)v227 - 1);
            *v226 = v229;
            v226 -= 2;
            v227 -= 32;
            v228 -= 8;
          }
          while (v228);
          v211 = v225;
          if (v223 != (v223 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_895:
            do
            {
              v230 = *((_DWORD *)v211 - 1);
              v211 -= 4;
              *--v220 = v230;
            }
            while (v211 != v213);
          }
          goto LABEL_321;
        }
LABEL_324:
        if (v775 != v764)
        {
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v231 = *(__n128 **)(a1 + 1888);
          v232 = (char *)v231 + 4 * v753;
          v233 = *(__n128 **)(a1 + 1896);
          if (((char *)v233 - v232) >> 2 >= v753)
            v234 = v753;
          else
            v234 = ((char *)v233 - v232) >> 2;
          if (v234 < 1)
          {
LABEL_332:
            v237 = 0;
            v234 = 0;
          }
          else
          {
            v235 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            while (1)
            {
              v236 = (char *)operator new(4 * v234, v235);
              if (v236)
                break;
              v179 = (unint64_t)v234 > 1;
              v234 = (unint64_t)v234 >> 1;
              if (!v179)
                goto LABEL_332;
            }
            v237 = v236;
          }
          sub_20EDB30B0(v231, (__n128 *)((char *)v231 + 4 * v753), v233, (uint64_t)&v807, v753, ((char *)v233 - v232) >> 2, v237, v234);
          if (v237)
            operator delete(v237);
        }
        v238 = *(_QWORD *)(a1 + 1920);
        v239 = *(_QWORD *)(a1 + 1912);
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v798 = (void **)(a1 + 1912);
        v240 = *(unsigned int **)(a1 + 2448);
        v241 = *(unsigned int **)(a1 + 2440);
        v242 = ((v238 - v239) >> 2) + v240 - v241;
        v243 = *(_BYTE **)(a1 + 1912);
        v754 = (v238 - v239) >> 2;
        v765 = v239;
        v776 = v238;
        if (v242 <= (uint64_t)(*(_QWORD *)(a1 + 1928) - (_QWORD)v243) >> 2)
        {
LABEL_348:
          if (v241 != v240)
          {
            v787 = v240;
            while (1)
            {
              v260 = *v241;
              v262 = *(char **)(a1 + 200);
              v261 = *(char **)(a1 + 208);
              if (v261 != v262)
              {
                v263 = (v261 - v262) >> 4;
                do
                {
                  v264 = v263 >> 1;
                  v265 = (unsigned int *)&v262[16 * (v263 >> 1)];
                  v267 = *v265;
                  v266 = (char *)(v265 + 4);
                  v263 += ~(v263 >> 1);
                  if (v267 < v260)
                    v262 = v266;
                  else
                    v263 = v264;
                }
                while (v263);
              }
              if (v262 == v261 || *(_DWORD *)v262 != v260)
              {
                v260 = *(_DWORD *)v261;
                v262 = *(char **)(a1 + 208);
              }
              if ((*(_BYTE *)(*((_QWORD *)v262 + 1) + 4) & 6) != 0)
                goto LABEL_352;
              v268 = *(char **)(a1 + 1920);
              v269 = *(_QWORD *)(a1 + 1928);
              if ((unint64_t)v268 >= v269)
                break;
              *(_DWORD *)v268 = v260;
              v259 = (uint64_t)(v268 + 4);
LABEL_351:
              *(_QWORD *)(a1 + 1920) = v259;
              *(_BYTE *)(*((_QWORD *)v262 + 1) + 4) ^= 2u;
LABEL_352:
              if (++v241 == v240)
                goto LABEL_384;
            }
            v270 = (char *)*v798;
            v271 = v268 - (_BYTE *)*v798;
            v272 = v271 >> 2;
            v273 = (v271 >> 2) + 1;
            if (v273 >> 62)
              goto LABEL_879;
            v274 = v269 - (_QWORD)v270;
            if (v274 >> 1 > v273)
              v273 = v274 >> 1;
            if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
              v275 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v275 = v273;
            if (v275)
            {
              if (v275 >> 62)
                goto LABEL_880;
              v276 = operator new(4 * v275);
              v277 = (unsigned int *)&v276[4 * v272];
              *v277 = v260;
              v259 = (uint64_t)(v277 + 1);
              v278 = v268 - v270;
              if (v268 == v270)
                goto LABEL_381;
            }
            else
            {
              v276 = 0;
              v277 = (unsigned int *)(4 * v272);
              *(_DWORD *)(4 * v272) = v260;
              v259 = 4 * v272 + 4;
              v278 = v268 - v270;
              if (v268 == v270)
              {
LABEL_381:
                *(_QWORD *)(a1 + 1912) = v277;
                *(_QWORD *)(a1 + 1920) = v259;
                *(_QWORD *)(a1 + 1928) = &v276[4 * v275];
                if (v270)
                  operator delete(v270);
                v240 = v787;
                goto LABEL_351;
              }
            }
            v279 = v278 - 4;
            if (v279 < 0x2C)
              goto LABEL_896;
            if ((unint64_t)(v268 - v276 - v271) < 0x20)
              goto LABEL_896;
            v280 = (v279 >> 2) + 1;
            v281 = 4 * (v280 & 0x7FFFFFFFFFFFFFF8);
            v282 = &v268[-v281];
            v277 = (unsigned int *)((char *)v277 - v281);
            v283 = &v276[4 * v272 - 16];
            v284 = v268 - 16;
            v285 = v280 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v286 = *(_OWORD *)v284;
              *(v283 - 1) = *((_OWORD *)v284 - 1);
              *v283 = v286;
              v283 -= 2;
              v284 -= 32;
              v285 -= 8;
            }
            while (v285);
            v268 = v282;
            if (v280 != (v280 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_896:
              do
              {
                v287 = *((_DWORD *)v268 - 1);
                v268 -= 4;
                *--v277 = v287;
              }
              while (v268 != v270);
            }
            goto LABEL_381;
          }
LABEL_384:
          if (v776 != v765)
          {
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v288 = *(__n128 **)(a1 + 1912);
            v289 = (char *)v288 + 4 * v754;
            v290 = *(__n128 **)(a1 + 1920);
            if (((char *)v290 - v289) >> 2 >= v754)
              v291 = v754;
            else
              v291 = ((char *)v290 - v289) >> 2;
            if (v291 < 1)
            {
LABEL_392:
              v294 = 0;
              v291 = 0;
            }
            else
            {
              v292 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
              while (1)
              {
                v293 = (char *)operator new(4 * v291, v292);
                if (v293)
                  break;
                v179 = (unint64_t)v291 > 1;
                v291 = (unint64_t)v291 >> 1;
                if (!v179)
                  goto LABEL_392;
              }
              v294 = v293;
            }
            sub_20EDB30B0(v288, (__n128 *)((char *)v288 + 4 * v754), v290, (uint64_t)&v807, v754, ((char *)v290 - v289) >> 2, v294, v291);
            if (v294)
              operator delete(v294);
          }
          v295 = *(_QWORD *)(a1 + 1944);
          v296 = *(_QWORD *)(a1 + 1936);
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v799 = (void **)(a1 + 1936);
          v297 = *(unsigned int **)(a1 + 2472);
          v298 = *(unsigned int **)(a1 + 2464);
          v299 = ((v295 - v296) >> 2) + v297 - v298;
          v300 = *(_BYTE **)(a1 + 1936);
          v755 = (v295 - v296) >> 2;
          v766 = v296;
          v777 = v295;
          if (v299 <= (uint64_t)(*(_QWORD *)(a1 + 1952) - (_QWORD)v300) >> 2)
          {
LABEL_408:
            if (v298 != v297)
            {
              v788 = v297;
              while (1)
              {
                v317 = *v298;
                v319 = *(char **)(a1 + 296);
                v318 = *(char **)(a1 + 304);
                if (v318 != v319)
                {
                  v320 = (v318 - v319) >> 4;
                  do
                  {
                    v321 = v320 >> 1;
                    v322 = (unsigned int *)&v319[16 * (v320 >> 1)];
                    v324 = *v322;
                    v323 = (char *)(v322 + 4);
                    v320 += ~(v320 >> 1);
                    if (v324 < v317)
                      v319 = v323;
                    else
                      v320 = v321;
                  }
                  while (v320);
                }
                if (v319 == v318 || *(_DWORD *)v319 != v317)
                {
                  v317 = *(_DWORD *)v318;
                  v319 = *(char **)(a1 + 304);
                }
                if ((*(_BYTE *)(*((_QWORD *)v319 + 1) + 4) & 6) != 0)
                  goto LABEL_412;
                v325 = *(char **)(a1 + 1944);
                v326 = *(_QWORD *)(a1 + 1952);
                if ((unint64_t)v325 >= v326)
                  break;
                *(_DWORD *)v325 = v317;
                v316 = (uint64_t)(v325 + 4);
LABEL_411:
                *(_QWORD *)(a1 + 1944) = v316;
                *(_BYTE *)(*((_QWORD *)v319 + 1) + 4) ^= 2u;
LABEL_412:
                if (++v298 == v297)
                  goto LABEL_444;
              }
              v327 = (char *)*v799;
              v328 = v325 - (_BYTE *)*v799;
              v329 = v328 >> 2;
              v330 = (v328 >> 2) + 1;
              if (v330 >> 62)
                goto LABEL_879;
              v331 = v326 - (_QWORD)v327;
              if (v331 >> 1 > v330)
                v330 = v331 >> 1;
              if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL)
                v332 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v332 = v330;
              if (v332)
              {
                if (v332 >> 62)
                  goto LABEL_880;
                v333 = operator new(4 * v332);
                v334 = (unsigned int *)&v333[4 * v329];
                *v334 = v317;
                v316 = (uint64_t)(v334 + 1);
                v335 = v325 - v327;
                if (v325 == v327)
                  goto LABEL_441;
              }
              else
              {
                v333 = 0;
                v334 = (unsigned int *)(4 * v329);
                *(_DWORD *)(4 * v329) = v317;
                v316 = 4 * v329 + 4;
                v335 = v325 - v327;
                if (v325 == v327)
                {
LABEL_441:
                  *(_QWORD *)(a1 + 1936) = v334;
                  *(_QWORD *)(a1 + 1944) = v316;
                  *(_QWORD *)(a1 + 1952) = &v333[4 * v332];
                  if (v327)
                    operator delete(v327);
                  v297 = v788;
                  goto LABEL_411;
                }
              }
              v336 = v335 - 4;
              if (v336 < 0x2C)
                goto LABEL_897;
              if ((unint64_t)(v325 - v333 - v328) < 0x20)
                goto LABEL_897;
              v337 = (v336 >> 2) + 1;
              v338 = 4 * (v337 & 0x7FFFFFFFFFFFFFF8);
              v339 = &v325[-v338];
              v334 = (unsigned int *)((char *)v334 - v338);
              v340 = &v333[4 * v329 - 16];
              v341 = v325 - 16;
              v342 = v337 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v343 = *(_OWORD *)v341;
                *(v340 - 1) = *((_OWORD *)v341 - 1);
                *v340 = v343;
                v340 -= 2;
                v341 -= 32;
                v342 -= 8;
              }
              while (v342);
              v325 = v339;
              if (v337 != (v337 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_897:
                do
                {
                  v344 = *((_DWORD *)v325 - 1);
                  v325 -= 4;
                  *--v334 = v344;
                }
                while (v325 != v327);
              }
              goto LABEL_441;
            }
LABEL_444:
            if (v777 != v766)
            {
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v345 = *(__n128 **)(a1 + 1936);
              v346 = (char *)v345 + 4 * v755;
              v347 = *(__n128 **)(a1 + 1944);
              if (((char *)v347 - v346) >> 2 >= v755)
                v348 = v755;
              else
                v348 = ((char *)v347 - v346) >> 2;
              if (v348 < 1)
              {
LABEL_452:
                v351 = 0;
                v348 = 0;
              }
              else
              {
                v349 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                while (1)
                {
                  v350 = (char *)operator new(4 * v348, v349);
                  if (v350)
                    break;
                  v179 = (unint64_t)v348 > 1;
                  v348 = (unint64_t)v348 >> 1;
                  if (!v179)
                    goto LABEL_452;
                }
                v351 = v350;
              }
              sub_20EDB30B0(v345, (__n128 *)((char *)v345 + 4 * v755), v347, (uint64_t)&v807, v755, ((char *)v347 - v346) >> 2, v351, v348);
              if (v351)
                operator delete(v351);
            }
            v352 = *(_QWORD *)(a1 + 1968);
            v353 = *(_QWORD *)(a1 + 1960);
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v800 = (void **)(a1 + 1960);
            v354 = *(unsigned int **)(a1 + 2496);
            v355 = *(unsigned int **)(a1 + 2488);
            v356 = ((v352 - v353) >> 2) + v354 - v355;
            v357 = *(_BYTE **)(a1 + 1960);
            v756 = (v352 - v353) >> 2;
            v767 = v353;
            v778 = v352;
            if (v356 <= (uint64_t)(*(_QWORD *)(a1 + 1976) - (_QWORD)v357) >> 2)
            {
LABEL_468:
              if (v355 != v354)
              {
                v789 = v354;
                while (1)
                {
                  v374 = *v355;
                  v376 = *(char **)(a1 + 392);
                  v375 = *(char **)(a1 + 400);
                  if (v375 != v376)
                  {
                    v377 = (v375 - v376) >> 4;
                    do
                    {
                      v378 = v377 >> 1;
                      v379 = (unsigned int *)&v376[16 * (v377 >> 1)];
                      v381 = *v379;
                      v380 = (char *)(v379 + 4);
                      v377 += ~(v377 >> 1);
                      if (v381 < v374)
                        v376 = v380;
                      else
                        v377 = v378;
                    }
                    while (v377);
                  }
                  if (v376 == v375 || *(_DWORD *)v376 != v374)
                  {
                    v374 = *(_DWORD *)v375;
                    v376 = *(char **)(a1 + 400);
                  }
                  if ((*(_BYTE *)(*((_QWORD *)v376 + 1) + 4) & 6) != 0)
                    goto LABEL_472;
                  v382 = *(char **)(a1 + 1968);
                  v383 = *(_QWORD *)(a1 + 1976);
                  if ((unint64_t)v382 >= v383)
                    break;
                  *(_DWORD *)v382 = v374;
                  v373 = (uint64_t)(v382 + 4);
LABEL_471:
                  *(_QWORD *)(a1 + 1968) = v373;
                  *(_BYTE *)(*((_QWORD *)v376 + 1) + 4) ^= 2u;
LABEL_472:
                  if (++v355 == v354)
                    goto LABEL_504;
                }
                v384 = (char *)*v800;
                v385 = v382 - (_BYTE *)*v800;
                v386 = v385 >> 2;
                v387 = (v385 >> 2) + 1;
                if (v387 >> 62)
                  goto LABEL_879;
                v388 = v383 - (_QWORD)v384;
                if (v388 >> 1 > v387)
                  v387 = v388 >> 1;
                if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL)
                  v389 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v389 = v387;
                if (v389)
                {
                  if (v389 >> 62)
                    goto LABEL_880;
                  v390 = operator new(4 * v389);
                  v391 = (unsigned int *)&v390[4 * v386];
                  *v391 = v374;
                  v373 = (uint64_t)(v391 + 1);
                  v392 = v382 - v384;
                  if (v382 == v384)
                    goto LABEL_501;
                }
                else
                {
                  v390 = 0;
                  v391 = (unsigned int *)(4 * v386);
                  *(_DWORD *)(4 * v386) = v374;
                  v373 = 4 * v386 + 4;
                  v392 = v382 - v384;
                  if (v382 == v384)
                  {
LABEL_501:
                    *(_QWORD *)(a1 + 1960) = v391;
                    *(_QWORD *)(a1 + 1968) = v373;
                    *(_QWORD *)(a1 + 1976) = &v390[4 * v389];
                    if (v384)
                      operator delete(v384);
                    v354 = v789;
                    goto LABEL_471;
                  }
                }
                v393 = v392 - 4;
                if (v393 < 0x2C)
                  goto LABEL_898;
                if ((unint64_t)(v382 - v390 - v385) < 0x20)
                  goto LABEL_898;
                v394 = (v393 >> 2) + 1;
                v395 = 4 * (v394 & 0x7FFFFFFFFFFFFFF8);
                v396 = &v382[-v395];
                v391 = (unsigned int *)((char *)v391 - v395);
                v397 = &v390[4 * v386 - 16];
                v398 = v382 - 16;
                v399 = v394 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v400 = *(_OWORD *)v398;
                  *(v397 - 1) = *((_OWORD *)v398 - 1);
                  *v397 = v400;
                  v397 -= 2;
                  v398 -= 32;
                  v399 -= 8;
                }
                while (v399);
                v382 = v396;
                if (v394 != (v394 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_898:
                  do
                  {
                    v401 = *((_DWORD *)v382 - 1);
                    v382 -= 4;
                    *--v391 = v401;
                  }
                  while (v382 != v384);
                }
                goto LABEL_501;
              }
LABEL_504:
              if (v778 != v767)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v402 = *(__n128 **)(a1 + 1960);
                v403 = (char *)v402 + 4 * v756;
                v404 = *(__n128 **)(a1 + 1968);
                if (((char *)v404 - v403) >> 2 >= v756)
                  v405 = v756;
                else
                  v405 = ((char *)v404 - v403) >> 2;
                if (v405 < 1)
                {
LABEL_512:
                  v408 = 0;
                  v405 = 0;
                }
                else
                {
                  v406 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v407 = (char *)operator new(4 * v405, v406);
                    if (v407)
                      break;
                    v179 = (unint64_t)v405 > 1;
                    v405 = (unint64_t)v405 >> 1;
                    if (!v179)
                      goto LABEL_512;
                  }
                  v408 = v407;
                }
                sub_20EDB30B0(v402, (__n128 *)((char *)v402 + 4 * v756), v404, (uint64_t)&v807, v756, ((char *)v404 - v403) >> 2, v408, v405);
                if (v408)
                  operator delete(v408);
              }
              v409 = *(_QWORD *)(a1 + 1992);
              v410 = *(_QWORD *)(a1 + 1984);
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v801 = (void **)(a1 + 1984);
              v411 = *(unsigned int **)(a1 + 2520);
              v412 = *(unsigned int **)(a1 + 2512);
              v413 = ((v409 - v410) >> 2) + v411 - v412;
              v414 = *(_BYTE **)(a1 + 1984);
              v757 = (v409 - v410) >> 2;
              v768 = v410;
              v779 = v409;
              if (v413 <= (uint64_t)(*(_QWORD *)(a1 + 2000) - (_QWORD)v414) >> 2)
              {
LABEL_528:
                if (v412 != v411)
                {
                  v790 = v411;
                  while (1)
                  {
                    v431 = *v412;
                    v433 = *(char **)(a1 + 488);
                    v432 = *(char **)(a1 + 496);
                    if (v432 != v433)
                    {
                      v434 = (v432 - v433) >> 4;
                      do
                      {
                        v435 = v434 >> 1;
                        v436 = (unsigned int *)&v433[16 * (v434 >> 1)];
                        v438 = *v436;
                        v437 = (char *)(v436 + 4);
                        v434 += ~(v434 >> 1);
                        if (v438 < v431)
                          v433 = v437;
                        else
                          v434 = v435;
                      }
                      while (v434);
                    }
                    if (v433 == v432 || *(_DWORD *)v433 != v431)
                    {
                      v431 = *(_DWORD *)v432;
                      v433 = *(char **)(a1 + 496);
                    }
                    if ((*(_BYTE *)(*((_QWORD *)v433 + 1) + 4) & 6) != 0)
                      goto LABEL_532;
                    v439 = *(char **)(a1 + 1992);
                    v440 = *(_QWORD *)(a1 + 2000);
                    if ((unint64_t)v439 >= v440)
                      break;
                    *(_DWORD *)v439 = v431;
                    v430 = (uint64_t)(v439 + 4);
LABEL_531:
                    *(_QWORD *)(a1 + 1992) = v430;
                    *(_BYTE *)(*((_QWORD *)v433 + 1) + 4) ^= 2u;
LABEL_532:
                    if (++v412 == v411)
                      goto LABEL_564;
                  }
                  v441 = (char *)*v801;
                  v442 = v439 - (_BYTE *)*v801;
                  v443 = v442 >> 2;
                  v444 = (v442 >> 2) + 1;
                  if (v444 >> 62)
                    goto LABEL_879;
                  v445 = v440 - (_QWORD)v441;
                  if (v445 >> 1 > v444)
                    v444 = v445 >> 1;
                  if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL)
                    v446 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v446 = v444;
                  if (v446)
                  {
                    if (v446 >> 62)
                      goto LABEL_880;
                    v447 = operator new(4 * v446);
                    v448 = (unsigned int *)&v447[4 * v443];
                    *v448 = v431;
                    v430 = (uint64_t)(v448 + 1);
                    v449 = v439 - v441;
                    if (v439 == v441)
                      goto LABEL_561;
                  }
                  else
                  {
                    v447 = 0;
                    v448 = (unsigned int *)(4 * v443);
                    *(_DWORD *)(4 * v443) = v431;
                    v430 = 4 * v443 + 4;
                    v449 = v439 - v441;
                    if (v439 == v441)
                    {
LABEL_561:
                      *(_QWORD *)(a1 + 1984) = v448;
                      *(_QWORD *)(a1 + 1992) = v430;
                      *(_QWORD *)(a1 + 2000) = &v447[4 * v446];
                      if (v441)
                        operator delete(v441);
                      v411 = v790;
                      goto LABEL_531;
                    }
                  }
                  v450 = v449 - 4;
                  if (v450 < 0x2C)
                    goto LABEL_899;
                  if ((unint64_t)(v439 - v447 - v442) < 0x20)
                    goto LABEL_899;
                  v451 = (v450 >> 2) + 1;
                  v452 = 4 * (v451 & 0x7FFFFFFFFFFFFFF8);
                  v453 = &v439[-v452];
                  v448 = (unsigned int *)((char *)v448 - v452);
                  v454 = &v447[4 * v443 - 16];
                  v455 = v439 - 16;
                  v456 = v451 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v457 = *(_OWORD *)v455;
                    *(v454 - 1) = *((_OWORD *)v455 - 1);
                    *v454 = v457;
                    v454 -= 2;
                    v455 -= 32;
                    v456 -= 8;
                  }
                  while (v456);
                  v439 = v453;
                  if (v451 != (v451 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_899:
                    do
                    {
                      v458 = *((_DWORD *)v439 - 1);
                      v439 -= 4;
                      *--v448 = v458;
                    }
                    while (v439 != v441);
                  }
                  goto LABEL_561;
                }
LABEL_564:
                if (v779 != v768)
                {
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v459 = *(__n128 **)(a1 + 1984);
                  v460 = (char *)v459 + 4 * v757;
                  v461 = *(__n128 **)(a1 + 1992);
                  if (((char *)v461 - v460) >> 2 >= v757)
                    v462 = v757;
                  else
                    v462 = ((char *)v461 - v460) >> 2;
                  if (v462 < 1)
                  {
LABEL_572:
                    v465 = 0;
                    v462 = 0;
                  }
                  else
                  {
                    v463 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                    while (1)
                    {
                      v464 = (char *)operator new(4 * v462, v463);
                      if (v464)
                        break;
                      v179 = (unint64_t)v462 > 1;
                      v462 = (unint64_t)v462 >> 1;
                      if (!v179)
                        goto LABEL_572;
                    }
                    v465 = v464;
                  }
                  sub_20EDB30B0(v459, (__n128 *)((char *)v459 + 4 * v757), v461, (uint64_t)&v807, v757, ((char *)v461 - v460) >> 2, v465, v462);
                  if (v465)
                    operator delete(v465);
                }
                v466 = *(_QWORD *)(a1 + 2016);
                v467 = *(_QWORD *)(a1 + 2008);
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v802 = (void **)(a1 + 2008);
                v468 = *(unsigned int **)(a1 + 2544);
                v469 = *(unsigned int **)(a1 + 2536);
                v470 = ((v466 - v467) >> 2) + v468 - v469;
                v471 = *(_BYTE **)(a1 + 2008);
                v758 = (v466 - v467) >> 2;
                v769 = v467;
                v780 = v466;
                if (v470 <= (uint64_t)(*(_QWORD *)(a1 + 2024) - (_QWORD)v471) >> 2)
                {
LABEL_588:
                  if (v469 != v468)
                  {
                    v791 = v468;
                    while (1)
                    {
                      v488 = *v469;
                      v489 = *(char **)(a1 + 584);
                      v490 = *(char **)(a1 + 592);
                      if (v490 != v489)
                      {
                        v491 = (v490 - v489) >> 4;
                        do
                        {
                          v492 = v491 >> 1;
                          v493 = (unsigned int *)&v489[16 * (v491 >> 1)];
                          v495 = *v493;
                          v494 = (char *)(v493 + 4);
                          v491 += ~(v491 >> 1);
                          if (v495 < v488)
                            v489 = v494;
                          else
                            v491 = v492;
                        }
                        while (v491);
                      }
                      if (v489 == v490 || *(_DWORD *)v489 != v488)
                      {
                        v488 = *(_DWORD *)v490;
                        v489 = *(char **)(a1 + 592);
                      }
                      if ((*(_BYTE *)(*((_QWORD *)v489 + 1) + 4) & 6) != 0)
                        goto LABEL_592;
                      v496 = *(char **)(a1 + 2016);
                      v497 = *(_QWORD *)(a1 + 2024);
                      if ((unint64_t)v496 >= v497)
                        break;
                      *(_DWORD *)v496 = v488;
                      v487 = (uint64_t)(v496 + 4);
LABEL_591:
                      *(_QWORD *)(a1 + 2016) = v487;
                      *(_BYTE *)(*((_QWORD *)v489 + 1) + 4) ^= 2u;
LABEL_592:
                      if (++v469 == v468)
                        goto LABEL_624;
                    }
                    v498 = (char *)*v802;
                    v499 = v496 - (_BYTE *)*v802;
                    v500 = v499 >> 2;
                    v501 = (v499 >> 2) + 1;
                    if (v501 >> 62)
                      goto LABEL_879;
                    v502 = v497 - (_QWORD)v498;
                    if (v502 >> 1 > v501)
                      v501 = v502 >> 1;
                    if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL)
                      v503 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v503 = v501;
                    if (v503)
                    {
                      if (v503 >> 62)
                        goto LABEL_880;
                      v504 = operator new(4 * v503);
                      v505 = (unsigned int *)&v504[4 * v500];
                      *v505 = v488;
                      v487 = (uint64_t)(v505 + 1);
                      v506 = v496 - v498;
                      if (v496 == v498)
                        goto LABEL_621;
                    }
                    else
                    {
                      v504 = 0;
                      v505 = (unsigned int *)(4 * v500);
                      *(_DWORD *)(4 * v500) = v488;
                      v487 = 4 * v500 + 4;
                      v506 = v496 - v498;
                      if (v496 == v498)
                      {
LABEL_621:
                        *(_QWORD *)(a1 + 2008) = v505;
                        *(_QWORD *)(a1 + 2016) = v487;
                        *(_QWORD *)(a1 + 2024) = &v504[4 * v503];
                        if (v498)
                          operator delete(v498);
                        v468 = v791;
                        goto LABEL_591;
                      }
                    }
                    v507 = v506 - 4;
                    if (v507 < 0x2C)
                      goto LABEL_900;
                    if ((unint64_t)(v496 - v504 - v499) < 0x20)
                      goto LABEL_900;
                    v508 = (v507 >> 2) + 1;
                    v509 = 4 * (v508 & 0x7FFFFFFFFFFFFFF8);
                    v510 = &v496[-v509];
                    v505 = (unsigned int *)((char *)v505 - v509);
                    v511 = &v504[4 * v500 - 16];
                    v512 = v496 - 16;
                    v513 = v508 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v514 = *(_OWORD *)v512;
                      *(v511 - 1) = *((_OWORD *)v512 - 1);
                      *v511 = v514;
                      v511 -= 2;
                      v512 -= 32;
                      v513 -= 8;
                    }
                    while (v513);
                    v496 = v510;
                    if (v508 != (v508 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_900:
                      do
                      {
                        v515 = *((_DWORD *)v496 - 1);
                        v496 -= 4;
                        *--v505 = v515;
                      }
                      while (v496 != v498);
                    }
                    goto LABEL_621;
                  }
LABEL_624:
                  if (v780 != v769)
                  {
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v516 = *(__n128 **)(a1 + 2008);
                    v517 = (char *)v516 + 4 * v758;
                    v518 = *(__n128 **)(a1 + 2016);
                    if (((char *)v518 - v517) >> 2 >= v758)
                      v519 = v758;
                    else
                      v519 = ((char *)v518 - v517) >> 2;
                    if (v519 < 1)
                    {
LABEL_632:
                      v522 = 0;
                      v519 = 0;
                    }
                    else
                    {
                      v520 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                      while (1)
                      {
                        v521 = (char *)operator new(4 * v519, v520);
                        if (v521)
                          break;
                        v179 = (unint64_t)v519 > 1;
                        v519 = (unint64_t)v519 >> 1;
                        if (!v179)
                          goto LABEL_632;
                      }
                      v522 = v521;
                    }
                    sub_20EDB30B0(v516, (__n128 *)((char *)v516 + 4 * v758), v518, (uint64_t)&v807, v758, ((char *)v518 - v517) >> 2, v522, v519);
                    if (v522)
                      operator delete(v522);
                  }
                  v523 = *(_QWORD *)(a1 + 2040);
                  v524 = *(_QWORD *)(a1 + 2032);
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v803 = (void **)(a1 + 2032);
                  v525 = *(unsigned int **)(a1 + 2568);
                  v526 = *(unsigned int **)(a1 + 2560);
                  v527 = ((v523 - v524) >> 2) + v525 - v526;
                  v528 = *(_BYTE **)(a1 + 2032);
                  v759 = (v523 - v524) >> 2;
                  v770 = v524;
                  v781 = v523;
                  if (v527 <= (uint64_t)(*(_QWORD *)(a1 + 2048) - (_QWORD)v528) >> 2)
                  {
LABEL_648:
                    if (v526 != v525)
                    {
                      v792 = v525;
                      while (1)
                      {
                        v545 = *v526;
                        v546 = *(char **)(a1 + 680);
                        v547 = *(char **)(a1 + 688);
                        if (v547 != v546)
                        {
                          v548 = (v547 - v546) >> 4;
                          do
                          {
                            v549 = v548 >> 1;
                            v550 = (unsigned int *)&v546[16 * (v548 >> 1)];
                            v552 = *v550;
                            v551 = (char *)(v550 + 4);
                            v548 += ~(v548 >> 1);
                            if (v552 < v545)
                              v546 = v551;
                            else
                              v548 = v549;
                          }
                          while (v548);
                        }
                        if (v546 == v547 || *(_DWORD *)v546 != v545)
                        {
                          v545 = *(_DWORD *)v547;
                          v546 = *(char **)(a1 + 688);
                        }
                        if ((*(_BYTE *)(*((_QWORD *)v546 + 1) + 4) & 6) != 0)
                          goto LABEL_652;
                        v553 = *(char **)(a1 + 2040);
                        v554 = *(_QWORD *)(a1 + 2048);
                        if ((unint64_t)v553 >= v554)
                          break;
                        *(_DWORD *)v553 = v545;
                        v544 = (uint64_t)(v553 + 4);
LABEL_651:
                        *(_QWORD *)(a1 + 2040) = v544;
                        *(_BYTE *)(*((_QWORD *)v546 + 1) + 4) ^= 2u;
LABEL_652:
                        if (++v526 == v525)
                          goto LABEL_684;
                      }
                      v555 = (char *)*v803;
                      v556 = v553 - (_BYTE *)*v803;
                      v557 = v556 >> 2;
                      v558 = (v556 >> 2) + 1;
                      if (v558 >> 62)
                        goto LABEL_879;
                      v559 = v554 - (_QWORD)v555;
                      if (v559 >> 1 > v558)
                        v558 = v559 >> 1;
                      if ((unint64_t)v559 >= 0x7FFFFFFFFFFFFFFCLL)
                        v560 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v560 = v558;
                      if (v560)
                      {
                        if (v560 >> 62)
                          goto LABEL_880;
                        v561 = operator new(4 * v560);
                        v562 = (unsigned int *)&v561[4 * v557];
                        *v562 = v545;
                        v544 = (uint64_t)(v562 + 1);
                        v563 = v553 - v555;
                        if (v553 == v555)
                          goto LABEL_681;
                      }
                      else
                      {
                        v561 = 0;
                        v562 = (unsigned int *)(4 * v557);
                        *(_DWORD *)(4 * v557) = v545;
                        v544 = 4 * v557 + 4;
                        v563 = v553 - v555;
                        if (v553 == v555)
                        {
LABEL_681:
                          *(_QWORD *)(a1 + 2032) = v562;
                          *(_QWORD *)(a1 + 2040) = v544;
                          *(_QWORD *)(a1 + 2048) = &v561[4 * v560];
                          if (v555)
                            operator delete(v555);
                          v525 = v792;
                          goto LABEL_651;
                        }
                      }
                      v564 = v563 - 4;
                      if (v564 < 0x2C)
                        goto LABEL_901;
                      if ((unint64_t)(v553 - v561 - v556) < 0x20)
                        goto LABEL_901;
                      v565 = (v564 >> 2) + 1;
                      v566 = 4 * (v565 & 0x7FFFFFFFFFFFFFF8);
                      v567 = &v553[-v566];
                      v562 = (unsigned int *)((char *)v562 - v566);
                      v568 = &v561[4 * v557 - 16];
                      v569 = v553 - 16;
                      v570 = v565 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v571 = *(_OWORD *)v569;
                        *(v568 - 1) = *((_OWORD *)v569 - 1);
                        *v568 = v571;
                        v568 -= 2;
                        v569 -= 32;
                        v570 -= 8;
                      }
                      while (v570);
                      v553 = v567;
                      if (v565 != (v565 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_901:
                        do
                        {
                          v572 = *((_DWORD *)v553 - 1);
                          v553 -= 4;
                          *--v562 = v572;
                        }
                        while (v553 != v555);
                      }
                      goto LABEL_681;
                    }
LABEL_684:
                    if (v781 != v770)
                    {
                      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                      v573 = *(__n128 **)(a1 + 2032);
                      v574 = (char *)v573 + 4 * v759;
                      v575 = *(__n128 **)(a1 + 2040);
                      if (((char *)v575 - v574) >> 2 >= v759)
                        v576 = v759;
                      else
                        v576 = ((char *)v575 - v574) >> 2;
                      if (v576 < 1)
                      {
LABEL_692:
                        v579 = 0;
                        v576 = 0;
                      }
                      else
                      {
                        v577 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                        while (1)
                        {
                          v578 = (char *)operator new(4 * v576, v577);
                          if (v578)
                            break;
                          v179 = (unint64_t)v576 > 1;
                          v576 = (unint64_t)v576 >> 1;
                          if (!v179)
                            goto LABEL_692;
                        }
                        v579 = v578;
                      }
                      sub_20EDB30B0(v573, (__n128 *)((char *)v573 + 4 * v759), v575, (uint64_t)&v807, v759, ((char *)v575 - v574) >> 2, v579, v576);
                      if (v579)
                        operator delete(v579);
                    }
                    v580 = *(_QWORD *)(a1 + 2064);
                    v581 = *(_QWORD *)(a1 + 2056);
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v804 = (void **)(a1 + 2056);
                    v582 = *(unsigned int **)(a1 + 2592);
                    v583 = *(unsigned int **)(a1 + 2584);
                    v584 = ((v580 - v581) >> 2) + v582 - v583;
                    v585 = *(_BYTE **)(a1 + 2056);
                    v760 = (v580 - v581) >> 2;
                    v771 = v581;
                    v782 = v580;
                    if (v584 <= (uint64_t)(*(_QWORD *)(a1 + 2072) - (_QWORD)v585) >> 2)
                    {
LABEL_708:
                      if (v583 != v582)
                      {
                        v793 = v582;
                        while (1)
                        {
                          v602 = *v583;
                          v603 = *(char **)(a1 + 776);
                          v604 = *(char **)(a1 + 784);
                          if (v604 != v603)
                          {
                            v605 = (v604 - v603) >> 4;
                            do
                            {
                              v606 = v605 >> 1;
                              v607 = (unsigned int *)&v603[16 * (v605 >> 1)];
                              v609 = *v607;
                              v608 = (char *)(v607 + 4);
                              v605 += ~(v605 >> 1);
                              if (v609 < v602)
                                v603 = v608;
                              else
                                v605 = v606;
                            }
                            while (v605);
                          }
                          if (v603 == v604 || *(_DWORD *)v603 != v602)
                          {
                            v602 = *(_DWORD *)v604;
                            v603 = *(char **)(a1 + 784);
                          }
                          if ((*(_BYTE *)(*((_QWORD *)v603 + 1) + 4) & 6) != 0)
                            goto LABEL_712;
                          v610 = *(char **)(a1 + 2064);
                          v611 = *(_QWORD *)(a1 + 2072);
                          if ((unint64_t)v610 >= v611)
                            break;
                          *(_DWORD *)v610 = v602;
                          v601 = (uint64_t)(v610 + 4);
LABEL_711:
                          *(_QWORD *)(a1 + 2064) = v601;
                          *(_BYTE *)(*((_QWORD *)v603 + 1) + 4) ^= 2u;
LABEL_712:
                          if (++v583 == v582)
                            goto LABEL_744;
                        }
                        v612 = (char *)*v804;
                        v613 = v610 - (_BYTE *)*v804;
                        v614 = v613 >> 2;
                        v615 = (v613 >> 2) + 1;
                        if (v615 >> 62)
                          goto LABEL_879;
                        v616 = v611 - (_QWORD)v612;
                        if (v616 >> 1 > v615)
                          v615 = v616 >> 1;
                        if ((unint64_t)v616 >= 0x7FFFFFFFFFFFFFFCLL)
                          v617 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v617 = v615;
                        if (v617)
                        {
                          if (v617 >> 62)
                            goto LABEL_880;
                          v618 = operator new(4 * v617);
                          v619 = (unsigned int *)&v618[4 * v614];
                          *v619 = v602;
                          v601 = (uint64_t)(v619 + 1);
                          v620 = v610 - v612;
                          if (v610 == v612)
                            goto LABEL_741;
                        }
                        else
                        {
                          v618 = 0;
                          v619 = (unsigned int *)(4 * v614);
                          *(_DWORD *)(4 * v614) = v602;
                          v601 = 4 * v614 + 4;
                          v620 = v610 - v612;
                          if (v610 == v612)
                          {
LABEL_741:
                            *(_QWORD *)(a1 + 2056) = v619;
                            *(_QWORD *)(a1 + 2064) = v601;
                            *(_QWORD *)(a1 + 2072) = &v618[4 * v617];
                            if (v612)
                              operator delete(v612);
                            v582 = v793;
                            goto LABEL_711;
                          }
                        }
                        v621 = v620 - 4;
                        if (v621 < 0x2C)
                          goto LABEL_902;
                        if ((unint64_t)(v610 - v618 - v613) < 0x20)
                          goto LABEL_902;
                        v622 = (v621 >> 2) + 1;
                        v623 = 4 * (v622 & 0x7FFFFFFFFFFFFFF8);
                        v624 = &v610[-v623];
                        v619 = (unsigned int *)((char *)v619 - v623);
                        v625 = &v618[4 * v614 - 16];
                        v626 = v610 - 16;
                        v627 = v622 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v628 = *(_OWORD *)v626;
                          *(v625 - 1) = *((_OWORD *)v626 - 1);
                          *v625 = v628;
                          v625 -= 2;
                          v626 -= 32;
                          v627 -= 8;
                        }
                        while (v627);
                        v610 = v624;
                        if (v622 != (v622 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_902:
                          do
                          {
                            v629 = *((_DWORD *)v610 - 1);
                            v610 -= 4;
                            *--v619 = v629;
                          }
                          while (v610 != v612);
                        }
                        goto LABEL_741;
                      }
LABEL_744:
                      if (v782 != v771)
                      {
                        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                        v630 = *(__n128 **)(a1 + 2056);
                        v631 = (char *)v630 + 4 * v760;
                        v632 = *(__n128 **)(a1 + 2064);
                        if (((char *)v632 - v631) >> 2 >= v760)
                          v633 = v760;
                        else
                          v633 = ((char *)v632 - v631) >> 2;
                        if (v633 < 1)
                        {
LABEL_752:
                          v636 = 0;
                          v633 = 0;
                        }
                        else
                        {
                          v634 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                          while (1)
                          {
                            v635 = (char *)operator new(4 * v633, v634);
                            if (v635)
                              break;
                            v179 = (unint64_t)v633 > 1;
                            v633 = (unint64_t)v633 >> 1;
                            if (!v179)
                              goto LABEL_752;
                          }
                          v636 = v635;
                        }
                        sub_20EDB30B0(v630, (__n128 *)((char *)v630 + 4 * v760), v632, (uint64_t)&v807, v760, ((char *)v632 - v631) >> 2, v636, v633);
                        if (v636)
                          operator delete(v636);
                      }
                      v637 = *(_QWORD *)(a1 + 2088);
                      v638 = *(_QWORD *)(a1 + 2080);
                      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                      v805 = (void **)(a1 + 2080);
                      v639 = *(unsigned int **)(a1 + 2616);
                      v640 = *(unsigned int **)(a1 + 2608);
                      v641 = ((v637 - v638) >> 2) + v639 - v640;
                      v642 = *(_BYTE **)(a1 + 2080);
                      v761 = (v637 - v638) >> 2;
                      v772 = v638;
                      v783 = v637;
                      if (v641 <= (uint64_t)(*(_QWORD *)(a1 + 2096) - (_QWORD)v642) >> 2)
                      {
LABEL_768:
                        if (v640 != v639)
                        {
                          v794 = v639;
                          while (1)
                          {
                            v659 = *v640;
                            v660 = *(char **)(a1 + 872);
                            v661 = *(char **)(a1 + 880);
                            if (v661 != v660)
                            {
                              v662 = (v661 - v660) >> 4;
                              do
                              {
                                v663 = v662 >> 1;
                                v664 = (unsigned int *)&v660[16 * (v662 >> 1)];
                                v666 = *v664;
                                v665 = (char *)(v664 + 4);
                                v662 += ~(v662 >> 1);
                                if (v666 < v659)
                                  v660 = v665;
                                else
                                  v662 = v663;
                              }
                              while (v662);
                            }
                            if (v660 == v661 || *(_DWORD *)v660 != v659)
                            {
                              v659 = *(_DWORD *)v661;
                              v660 = *(char **)(a1 + 880);
                            }
                            if ((*(_BYTE *)(*((_QWORD *)v660 + 1) + 4) & 6) != 0)
                              goto LABEL_772;
                            v667 = *(char **)(a1 + 2088);
                            v668 = *(_QWORD *)(a1 + 2096);
                            if ((unint64_t)v667 >= v668)
                              break;
                            *(_DWORD *)v667 = v659;
                            v658 = (uint64_t)(v667 + 4);
LABEL_771:
                            *(_QWORD *)(a1 + 2088) = v658;
                            *(_BYTE *)(*((_QWORD *)v660 + 1) + 4) ^= 2u;
LABEL_772:
                            if (++v640 == v639)
                              goto LABEL_804;
                          }
                          v669 = (char *)*v805;
                          v670 = v667 - (_BYTE *)*v805;
                          v671 = v670 >> 2;
                          v672 = (v670 >> 2) + 1;
                          if (v672 >> 62)
                            goto LABEL_879;
                          v673 = v668 - (_QWORD)v669;
                          if (v673 >> 1 > v672)
                            v672 = v673 >> 1;
                          if ((unint64_t)v673 >= 0x7FFFFFFFFFFFFFFCLL)
                            v674 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v674 = v672;
                          if (v674)
                          {
                            if (v674 >> 62)
                              goto LABEL_880;
                            v675 = operator new(4 * v674);
                            v676 = (unsigned int *)&v675[4 * v671];
                            *v676 = v659;
                            v658 = (uint64_t)(v676 + 1);
                            v677 = v667 - v669;
                            if (v667 == v669)
                              goto LABEL_801;
                          }
                          else
                          {
                            v675 = 0;
                            v676 = (unsigned int *)(4 * v671);
                            *(_DWORD *)(4 * v671) = v659;
                            v658 = 4 * v671 + 4;
                            v677 = v667 - v669;
                            if (v667 == v669)
                            {
LABEL_801:
                              *(_QWORD *)(a1 + 2080) = v676;
                              *(_QWORD *)(a1 + 2088) = v658;
                              *(_QWORD *)(a1 + 2096) = &v675[4 * v674];
                              if (v669)
                                operator delete(v669);
                              v639 = v794;
                              goto LABEL_771;
                            }
                          }
                          v678 = v677 - 4;
                          if (v678 < 0x2C)
                            goto LABEL_903;
                          if ((unint64_t)(v667 - v675 - v670) < 0x20)
                            goto LABEL_903;
                          v679 = (v678 >> 2) + 1;
                          v680 = 4 * (v679 & 0x7FFFFFFFFFFFFFF8);
                          v681 = &v667[-v680];
                          v676 = (unsigned int *)((char *)v676 - v680);
                          v682 = &v675[4 * v671 - 16];
                          v683 = v667 - 16;
                          v684 = v679 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v685 = *(_OWORD *)v683;
                            *(v682 - 1) = *((_OWORD *)v683 - 1);
                            *v682 = v685;
                            v682 -= 2;
                            v683 -= 32;
                            v684 -= 8;
                          }
                          while (v684);
                          v667 = v681;
                          if (v679 != (v679 & 0x7FFFFFFFFFFFFFF8))
                          {
LABEL_903:
                            do
                            {
                              v686 = *((_DWORD *)v667 - 1);
                              v667 -= 4;
                              *--v676 = v686;
                            }
                            while (v667 != v669);
                          }
                          goto LABEL_801;
                        }
LABEL_804:
                        if (v783 != v772)
                        {
                          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                          v687 = *(__n128 **)(a1 + 2080);
                          v688 = (char *)v687 + 4 * v761;
                          v689 = *(__n128 **)(a1 + 2088);
                          if (((char *)v689 - v688) >> 2 >= v761)
                            v690 = v761;
                          else
                            v690 = ((char *)v689 - v688) >> 2;
                          if (v690 < 1)
                          {
LABEL_812:
                            v693 = 0;
                            v690 = 0;
                          }
                          else
                          {
                            v691 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                            while (1)
                            {
                              v692 = (char *)operator new(4 * v690, v691);
                              if (v692)
                                break;
                              v179 = (unint64_t)v690 > 1;
                              v690 = (unint64_t)v690 >> 1;
                              if (!v179)
                                goto LABEL_812;
                            }
                            v693 = v692;
                          }
                          sub_20EDB30B0(v687, (__n128 *)((char *)v687 + 4 * v761), v689, (uint64_t)&v807, v761, ((char *)v689 - v688) >> 2, v693, v690);
                          if (v693)
                            operator delete(v693);
                        }
                        v694 = *(_QWORD *)(a1 + 2112);
                        v695 = *(_QWORD *)(a1 + 2104);
                        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                        v806 = (void **)(a1 + 2104);
                        v696 = *(unsigned int **)(a1 + 2640);
                        v697 = *(unsigned int **)(a1 + 2632);
                        v698 = ((v694 - v695) >> 2) + v696 - v697;
                        v699 = *(_BYTE **)(a1 + 2104);
                        v762 = (v694 - v695) >> 2;
                        v773 = v695;
                        v784 = v694;
                        if (v698 <= (uint64_t)(*(_QWORD *)(a1 + 2120) - (_QWORD)v699) >> 2)
                          goto LABEL_828;
                        if (!(v698 >> 62))
                        {
                          v700 = *(unsigned int **)(a1 + 2640);
                          v701 = *(_BYTE **)(a1 + 2112);
                          v702 = (char *)operator new(4 * v698);
                          v703 = v701 - v699;
                          v704 = &v702[(v701 - v699) & 0xFFFFFFFFFFFFFFFCLL];
                          v705 = v704;
                          if (v701 == v699)
                            goto LABEL_826;
                          if ((unint64_t)(v703 - 4) >= 0x2C)
                          {
                            v705 = &v702[(v701 - v699) & 0xFFFFFFFFFFFFFFFCLL];
                            if ((unint64_t)(&v701[-(v703 & 0xFFFFFFFFFFFFFFFCLL)] - v702) >= 0x20)
                            {
                              v706 = v703 >> 2;
                              v707 = ((unint64_t)(v703 - 4) >> 2) + 1;
                              v708 = 4 * (v707 & 0x7FFFFFFFFFFFFFF8);
                              v709 = &v701[-v708];
                              v705 = &v704[-v708];
                              v710 = &v702[4 * v706 - 16];
                              v711 = (__int128 *)(v701 - 16);
                              v712 = v707 & 0x7FFFFFFFFFFFFFF8;
                              do
                              {
                                v713 = *v711;
                                *((_OWORD *)v710 - 1) = *(v711 - 1);
                                *(_OWORD *)v710 = v713;
                                v710 -= 32;
                                v711 -= 2;
                                v712 -= 8;
                              }
                              while (v712);
                              v701 = v709;
                              if (v707 == (v707 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_826:
                                *(_QWORD *)(a1 + 2104) = v705;
                                *(_QWORD *)(a1 + 2112) = v704;
                                *(_QWORD *)(a1 + 2120) = &v702[4 * v698];
                                v696 = v700;
                                if (v699)
                                {
                                  operator delete(v699);
                                  v697 = *(unsigned int **)(a1 + 2632);
                                  v696 = *(unsigned int **)(a1 + 2640);
                                }
LABEL_828:
                                if (v697 != v696)
                                {
                                  v795 = v696;
                                  while (1)
                                  {
                                    v716 = *v697;
                                    v717 = *(char **)(a1 + 968);
                                    v718 = *(char **)(a1 + 976);
                                    if (v718 != v717)
                                    {
                                      v719 = (v718 - v717) >> 4;
                                      do
                                      {
                                        v720 = v719 >> 1;
                                        v721 = (unsigned int *)&v717[16 * (v719 >> 1)];
                                        v723 = *v721;
                                        v722 = (char *)(v721 + 4);
                                        v719 += ~(v719 >> 1);
                                        if (v723 < v716)
                                          v717 = v722;
                                        else
                                          v719 = v720;
                                      }
                                      while (v719);
                                    }
                                    if (v717 == v718 || *(_DWORD *)v717 != v716)
                                    {
                                      v716 = *(_DWORD *)v718;
                                      v717 = *(char **)(a1 + 976);
                                    }
                                    if ((*(_BYTE *)(*((_QWORD *)v717 + 1) + 4) & 6) != 0)
                                      goto LABEL_832;
                                    v724 = *(char **)(a1 + 2112);
                                    v725 = *(_QWORD *)(a1 + 2120);
                                    if ((unint64_t)v724 >= v725)
                                      break;
                                    *(_DWORD *)v724 = v716;
                                    v715 = (uint64_t)(v724 + 4);
LABEL_831:
                                    *(_QWORD *)(a1 + 2112) = v715;
                                    *(_BYTE *)(*((_QWORD *)v717 + 1) + 4) ^= 2u;
LABEL_832:
                                    if (++v697 == v696)
                                      goto LABEL_864;
                                  }
                                  v726 = (char *)*v806;
                                  v727 = v724 - (_BYTE *)*v806;
                                  v728 = v727 >> 2;
                                  v729 = (v727 >> 2) + 1;
                                  if (v729 >> 62)
                                    goto LABEL_879;
                                  v730 = v725 - (_QWORD)v726;
                                  if (v730 >> 1 > v729)
                                    v729 = v730 >> 1;
                                  if ((unint64_t)v730 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v731 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v731 = v729;
                                  if (v731)
                                  {
                                    if (v731 >> 62)
                                      goto LABEL_880;
                                    v732 = operator new(4 * v731);
                                    v733 = (unsigned int *)&v732[4 * v728];
                                    *v733 = v716;
                                    v715 = (uint64_t)(v733 + 1);
                                    v734 = v724 - v726;
                                    if (v724 == v726)
                                      goto LABEL_861;
                                  }
                                  else
                                  {
                                    v732 = 0;
                                    v733 = (unsigned int *)(4 * v728);
                                    *(_DWORD *)(4 * v728) = v716;
                                    v715 = 4 * v728 + 4;
                                    v734 = v724 - v726;
                                    if (v724 == v726)
                                    {
LABEL_861:
                                      *(_QWORD *)(a1 + 2104) = v733;
                                      *(_QWORD *)(a1 + 2112) = v715;
                                      *(_QWORD *)(a1 + 2120) = &v732[4 * v731];
                                      if (v726)
                                        operator delete(v726);
                                      v696 = v795;
                                      goto LABEL_831;
                                    }
                                  }
                                  v735 = v734 - 4;
                                  if (v735 < 0x2C)
                                    goto LABEL_904;
                                  if ((unint64_t)(v724 - v732 - v727) < 0x20)
                                    goto LABEL_904;
                                  v736 = (v735 >> 2) + 1;
                                  v737 = 4 * (v736 & 0x7FFFFFFFFFFFFFF8);
                                  v738 = &v724[-v737];
                                  v733 = (unsigned int *)((char *)v733 - v737);
                                  v739 = &v732[4 * v728 - 16];
                                  v740 = v724 - 16;
                                  v741 = v736 & 0x7FFFFFFFFFFFFFF8;
                                  do
                                  {
                                    v742 = *(_OWORD *)v740;
                                    *(v739 - 1) = *((_OWORD *)v740 - 1);
                                    *v739 = v742;
                                    v739 -= 2;
                                    v740 -= 32;
                                    v741 -= 8;
                                  }
                                  while (v741);
                                  v724 = v738;
                                  if (v736 != (v736 & 0x7FFFFFFFFFFFFFF8))
                                  {
LABEL_904:
                                    do
                                    {
                                      v743 = *((_DWORD *)v724 - 1);
                                      v724 -= 4;
                                      *--v733 = v743;
                                    }
                                    while (v724 != v726);
                                  }
                                  goto LABEL_861;
                                }
LABEL_864:
                                if (v784 != v773)
                                {
                                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                                  v744 = *(__n128 **)(a1 + 2104);
                                  v745 = (char *)v744 + 4 * v762;
                                  v746 = *(__n128 **)(a1 + 2112);
                                  if (((char *)v746 - v745) >> 2 >= v762)
                                    v747 = v762;
                                  else
                                    v747 = ((char *)v746 - v745) >> 2;
                                  if (v747 < 1)
                                  {
LABEL_872:
                                    v750 = 0;
                                    v747 = 0;
                                  }
                                  else
                                  {
                                    v748 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                                    while (1)
                                    {
                                      v749 = (char *)operator new(4 * v747, v748);
                                      if (v749)
                                        break;
                                      v179 = (unint64_t)v747 > 1;
                                      v747 = (unint64_t)v747 >> 1;
                                      if (!v179)
                                        goto LABEL_872;
                                    }
                                    v750 = v749;
                                  }
                                  sub_20EDB30B0(v744, (__n128 *)((char *)v744 + 4 * v762), v746, (uint64_t)&v807, v762, ((char *)v746 - v745) >> 2, v750, v747);
                                  if (v750)
                                    operator delete(v750);
                                }
                                sub_20F8DB0F0((_QWORD *)a1);
                                goto LABEL_877;
                              }
                            }
                          }
                          else
                          {
                            v705 = &v702[(v701 - v699) & 0xFFFFFFFFFFFFFFFCLL];
                          }
                          do
                          {
                            v714 = *((_DWORD *)v701 - 1);
                            v701 -= 4;
                            *((_DWORD *)v705 - 1) = v714;
                            v705 -= 4;
                          }
                          while (v701 != v699);
                          goto LABEL_826;
                        }
LABEL_879:
                        sub_20E867F44();
                      }
                      if (v641 >> 62)
                        goto LABEL_879;
                      v643 = *(unsigned int **)(a1 + 2616);
                      v644 = *(_BYTE **)(a1 + 2088);
                      v645 = (char *)operator new(4 * v641);
                      v646 = v644 - v642;
                      v647 = &v645[(v644 - v642) & 0xFFFFFFFFFFFFFFFCLL];
                      v648 = v647;
                      if (v644 != v642)
                      {
                        if ((unint64_t)(v646 - 4) < 0x2C)
                        {
                          v648 = &v645[(v644 - v642) & 0xFFFFFFFFFFFFFFFCLL];
                          do
                          {
LABEL_765:
                            v657 = *((_DWORD *)v644 - 1);
                            v644 -= 4;
                            *((_DWORD *)v648 - 1) = v657;
                            v648 -= 4;
                          }
                          while (v644 != v642);
                          goto LABEL_766;
                        }
                        v648 = &v645[(v644 - v642) & 0xFFFFFFFFFFFFFFFCLL];
                        if ((unint64_t)(&v644[-(v646 & 0xFFFFFFFFFFFFFFFCLL)] - v645) < 0x20)
                          goto LABEL_765;
                        v649 = v646 >> 2;
                        v650 = ((unint64_t)(v646 - 4) >> 2) + 1;
                        v651 = 4 * (v650 & 0x7FFFFFFFFFFFFFF8);
                        v652 = &v644[-v651];
                        v648 = &v647[-v651];
                        v653 = &v645[4 * v649 - 16];
                        v654 = (__int128 *)(v644 - 16);
                        v655 = v650 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v656 = *v654;
                          *((_OWORD *)v653 - 1) = *(v654 - 1);
                          *(_OWORD *)v653 = v656;
                          v653 -= 32;
                          v654 -= 2;
                          v655 -= 8;
                        }
                        while (v655);
                        v644 = v652;
                        if (v650 != (v650 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_765;
                      }
LABEL_766:
                      *(_QWORD *)(a1 + 2080) = v648;
                      *(_QWORD *)(a1 + 2088) = v647;
                      *(_QWORD *)(a1 + 2096) = &v645[4 * v641];
                      v639 = v643;
                      if (v642)
                      {
                        operator delete(v642);
                        v640 = *(unsigned int **)(a1 + 2608);
                        v639 = *(unsigned int **)(a1 + 2616);
                      }
                      goto LABEL_768;
                    }
                    if (v584 >> 62)
                      goto LABEL_879;
                    v586 = *(unsigned int **)(a1 + 2592);
                    v587 = *(_BYTE **)(a1 + 2064);
                    v588 = (char *)operator new(4 * v584);
                    v589 = v587 - v585;
                    v590 = &v588[(v587 - v585) & 0xFFFFFFFFFFFFFFFCLL];
                    v591 = v590;
                    if (v587 != v585)
                    {
                      if ((unint64_t)(v589 - 4) < 0x2C)
                      {
                        v591 = &v588[(v587 - v585) & 0xFFFFFFFFFFFFFFFCLL];
                        do
                        {
LABEL_705:
                          v600 = *((_DWORD *)v587 - 1);
                          v587 -= 4;
                          *((_DWORD *)v591 - 1) = v600;
                          v591 -= 4;
                        }
                        while (v587 != v585);
                        goto LABEL_706;
                      }
                      v591 = &v588[(v587 - v585) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v587[-(v589 & 0xFFFFFFFFFFFFFFFCLL)] - v588) < 0x20)
                        goto LABEL_705;
                      v592 = v589 >> 2;
                      v593 = ((unint64_t)(v589 - 4) >> 2) + 1;
                      v594 = 4 * (v593 & 0x7FFFFFFFFFFFFFF8);
                      v595 = &v587[-v594];
                      v591 = &v590[-v594];
                      v596 = &v588[4 * v592 - 16];
                      v597 = (__int128 *)(v587 - 16);
                      v598 = v593 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v599 = *v597;
                        *((_OWORD *)v596 - 1) = *(v597 - 1);
                        *(_OWORD *)v596 = v599;
                        v596 -= 32;
                        v597 -= 2;
                        v598 -= 8;
                      }
                      while (v598);
                      v587 = v595;
                      if (v593 != (v593 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_705;
                    }
LABEL_706:
                    *(_QWORD *)(a1 + 2056) = v591;
                    *(_QWORD *)(a1 + 2064) = v590;
                    *(_QWORD *)(a1 + 2072) = &v588[4 * v584];
                    v582 = v586;
                    if (v585)
                    {
                      operator delete(v585);
                      v583 = *(unsigned int **)(a1 + 2584);
                      v582 = *(unsigned int **)(a1 + 2592);
                    }
                    goto LABEL_708;
                  }
                  if (v527 >> 62)
                    goto LABEL_879;
                  v529 = *(unsigned int **)(a1 + 2568);
                  v530 = *(_BYTE **)(a1 + 2040);
                  v531 = (char *)operator new(4 * v527);
                  v532 = v530 - v528;
                  v533 = &v531[(v530 - v528) & 0xFFFFFFFFFFFFFFFCLL];
                  v534 = v533;
                  if (v530 != v528)
                  {
                    if ((unint64_t)(v532 - 4) < 0x2C)
                    {
                      v534 = &v531[(v530 - v528) & 0xFFFFFFFFFFFFFFFCLL];
                      do
                      {
LABEL_645:
                        v543 = *((_DWORD *)v530 - 1);
                        v530 -= 4;
                        *((_DWORD *)v534 - 1) = v543;
                        v534 -= 4;
                      }
                      while (v530 != v528);
                      goto LABEL_646;
                    }
                    v534 = &v531[(v530 - v528) & 0xFFFFFFFFFFFFFFFCLL];
                    if ((unint64_t)(&v530[-(v532 & 0xFFFFFFFFFFFFFFFCLL)] - v531) < 0x20)
                      goto LABEL_645;
                    v535 = v532 >> 2;
                    v536 = ((unint64_t)(v532 - 4) >> 2) + 1;
                    v537 = 4 * (v536 & 0x7FFFFFFFFFFFFFF8);
                    v538 = &v530[-v537];
                    v534 = &v533[-v537];
                    v539 = &v531[4 * v535 - 16];
                    v540 = (__int128 *)(v530 - 16);
                    v541 = v536 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v542 = *v540;
                      *((_OWORD *)v539 - 1) = *(v540 - 1);
                      *(_OWORD *)v539 = v542;
                      v539 -= 32;
                      v540 -= 2;
                      v541 -= 8;
                    }
                    while (v541);
                    v530 = v538;
                    if (v536 != (v536 & 0x7FFFFFFFFFFFFFF8))
                      goto LABEL_645;
                  }
LABEL_646:
                  *(_QWORD *)(a1 + 2032) = v534;
                  *(_QWORD *)(a1 + 2040) = v533;
                  *(_QWORD *)(a1 + 2048) = &v531[4 * v527];
                  v525 = v529;
                  if (v528)
                  {
                    operator delete(v528);
                    v526 = *(unsigned int **)(a1 + 2560);
                    v525 = *(unsigned int **)(a1 + 2568);
                  }
                  goto LABEL_648;
                }
                if (v470 >> 62)
                  goto LABEL_879;
                v472 = *(unsigned int **)(a1 + 2544);
                v473 = *(_BYTE **)(a1 + 2016);
                v474 = (char *)operator new(4 * v470);
                v475 = v473 - v471;
                v476 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                v477 = v476;
                if (v473 != v471)
                {
                  if ((unint64_t)(v475 - 4) < 0x2C)
                  {
                    v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    do
                    {
LABEL_585:
                      v486 = *((_DWORD *)v473 - 1);
                      v473 -= 4;
                      *((_DWORD *)v477 - 1) = v486;
                      v477 -= 4;
                    }
                    while (v473 != v471);
                    goto LABEL_586;
                  }
                  v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((unint64_t)(&v473[-(v475 & 0xFFFFFFFFFFFFFFFCLL)] - v474) < 0x20)
                    goto LABEL_585;
                  v478 = v475 >> 2;
                  v479 = ((unint64_t)(v475 - 4) >> 2) + 1;
                  v480 = 4 * (v479 & 0x7FFFFFFFFFFFFFF8);
                  v481 = &v473[-v480];
                  v477 = &v476[-v480];
                  v482 = &v474[4 * v478 - 16];
                  v483 = (__int128 *)(v473 - 16);
                  v484 = v479 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v485 = *v483;
                    *((_OWORD *)v482 - 1) = *(v483 - 1);
                    *(_OWORD *)v482 = v485;
                    v482 -= 32;
                    v483 -= 2;
                    v484 -= 8;
                  }
                  while (v484);
                  v473 = v481;
                  if (v479 != (v479 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_585;
                }
LABEL_586:
                *(_QWORD *)(a1 + 2008) = v477;
                *(_QWORD *)(a1 + 2016) = v476;
                *(_QWORD *)(a1 + 2024) = &v474[4 * v470];
                v468 = v472;
                if (v471)
                {
                  operator delete(v471);
                  v469 = *(unsigned int **)(a1 + 2536);
                  v468 = *(unsigned int **)(a1 + 2544);
                }
                goto LABEL_588;
              }
              if (v413 >> 62)
                goto LABEL_879;
              v415 = *(unsigned int **)(a1 + 2520);
              v416 = *(_BYTE **)(a1 + 1992);
              v417 = (char *)operator new(4 * v413);
              v418 = v416 - v414;
              v419 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
              v420 = v419;
              if (v416 != v414)
              {
                if ((unint64_t)(v418 - 4) < 0x2C)
                {
                  v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                  do
                  {
LABEL_525:
                    v429 = *((_DWORD *)v416 - 1);
                    v416 -= 4;
                    *((_DWORD *)v420 - 1) = v429;
                    v420 -= 4;
                  }
                  while (v416 != v414);
                  goto LABEL_526;
                }
                v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(&v416[-(v418 & 0xFFFFFFFFFFFFFFFCLL)] - v417) < 0x20)
                  goto LABEL_525;
                v421 = v418 >> 2;
                v422 = ((unint64_t)(v418 - 4) >> 2) + 1;
                v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
                v424 = &v416[-v423];
                v420 = &v419[-v423];
                v425 = &v417[4 * v421 - 16];
                v426 = (__int128 *)(v416 - 16);
                v427 = v422 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v428 = *v426;
                  *((_OWORD *)v425 - 1) = *(v426 - 1);
                  *(_OWORD *)v425 = v428;
                  v425 -= 32;
                  v426 -= 2;
                  v427 -= 8;
                }
                while (v427);
                v416 = v424;
                if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_525;
              }
LABEL_526:
              *(_QWORD *)(a1 + 1984) = v420;
              *(_QWORD *)(a1 + 1992) = v419;
              *(_QWORD *)(a1 + 2000) = &v417[4 * v413];
              v411 = v415;
              if (v414)
              {
                operator delete(v414);
                v412 = *(unsigned int **)(a1 + 2512);
                v411 = *(unsigned int **)(a1 + 2520);
              }
              goto LABEL_528;
            }
            if (v356 >> 62)
              goto LABEL_879;
            v358 = *(unsigned int **)(a1 + 2496);
            v359 = *(_BYTE **)(a1 + 1968);
            v360 = (char *)operator new(4 * v356);
            v361 = v359 - v357;
            v362 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
            v363 = v362;
            if (v359 != v357)
            {
              if ((unint64_t)(v361 - 4) < 0x2C)
              {
                v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                do
                {
LABEL_465:
                  v372 = *((_DWORD *)v359 - 1);
                  v359 -= 4;
                  *((_DWORD *)v363 - 1) = v372;
                  v363 -= 4;
                }
                while (v359 != v357);
                goto LABEL_466;
              }
              v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(&v359[-(v361 & 0xFFFFFFFFFFFFFFFCLL)] - v360) < 0x20)
                goto LABEL_465;
              v364 = v361 >> 2;
              v365 = ((unint64_t)(v361 - 4) >> 2) + 1;
              v366 = 4 * (v365 & 0x7FFFFFFFFFFFFFF8);
              v367 = &v359[-v366];
              v363 = &v362[-v366];
              v368 = &v360[4 * v364 - 16];
              v369 = (__int128 *)(v359 - 16);
              v370 = v365 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v371 = *v369;
                *((_OWORD *)v368 - 1) = *(v369 - 1);
                *(_OWORD *)v368 = v371;
                v368 -= 32;
                v369 -= 2;
                v370 -= 8;
              }
              while (v370);
              v359 = v367;
              if (v365 != (v365 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_465;
            }
LABEL_466:
            *(_QWORD *)(a1 + 1960) = v363;
            *(_QWORD *)(a1 + 1968) = v362;
            *(_QWORD *)(a1 + 1976) = &v360[4 * v356];
            v354 = v358;
            if (v357)
            {
              operator delete(v357);
              v355 = *(unsigned int **)(a1 + 2488);
              v354 = *(unsigned int **)(a1 + 2496);
            }
            goto LABEL_468;
          }
          if (v299 >> 62)
            goto LABEL_879;
          v301 = *(unsigned int **)(a1 + 2472);
          v302 = *(_BYTE **)(a1 + 1944);
          v303 = (char *)operator new(4 * v299);
          v304 = v302 - v300;
          v305 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
          v306 = v305;
          if (v302 != v300)
          {
            if ((unint64_t)(v304 - 4) < 0x2C)
            {
              v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
              do
              {
LABEL_405:
                v315 = *((_DWORD *)v302 - 1);
                v302 -= 4;
                *((_DWORD *)v306 - 1) = v315;
                v306 -= 4;
              }
              while (v302 != v300);
              goto LABEL_406;
            }
            v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
            if ((unint64_t)(&v302[-(v304 & 0xFFFFFFFFFFFFFFFCLL)] - v303) < 0x20)
              goto LABEL_405;
            v307 = v304 >> 2;
            v308 = ((unint64_t)(v304 - 4) >> 2) + 1;
            v309 = 4 * (v308 & 0x7FFFFFFFFFFFFFF8);
            v310 = &v302[-v309];
            v306 = &v305[-v309];
            v311 = &v303[4 * v307 - 16];
            v312 = (__int128 *)(v302 - 16);
            v313 = v308 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v314 = *v312;
              *((_OWORD *)v311 - 1) = *(v312 - 1);
              *(_OWORD *)v311 = v314;
              v311 -= 32;
              v312 -= 2;
              v313 -= 8;
            }
            while (v313);
            v302 = v310;
            if (v308 != (v308 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_405;
          }
LABEL_406:
          *(_QWORD *)(a1 + 1936) = v306;
          *(_QWORD *)(a1 + 1944) = v305;
          *(_QWORD *)(a1 + 1952) = &v303[4 * v299];
          v297 = v301;
          if (v300)
          {
            operator delete(v300);
            v298 = *(unsigned int **)(a1 + 2464);
            v297 = *(unsigned int **)(a1 + 2472);
          }
          goto LABEL_408;
        }
        if (v242 >> 62)
          goto LABEL_879;
        v244 = *(unsigned int **)(a1 + 2448);
        v245 = *(_BYTE **)(a1 + 1920);
        v246 = (char *)operator new(4 * v242);
        v247 = v245 - v243;
        v248 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
        v249 = v248;
        if (v245 != v243)
        {
          if ((unint64_t)(v247 - 4) < 0x2C)
          {
            v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_345:
              v258 = *((_DWORD *)v245 - 1);
              v245 -= 4;
              *((_DWORD *)v249 - 1) = v258;
              v249 -= 4;
            }
            while (v245 != v243);
            goto LABEL_346;
          }
          v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v245[-(v247 & 0xFFFFFFFFFFFFFFFCLL)] - v246) < 0x20)
            goto LABEL_345;
          v250 = v247 >> 2;
          v251 = ((unint64_t)(v247 - 4) >> 2) + 1;
          v252 = 4 * (v251 & 0x7FFFFFFFFFFFFFF8);
          v253 = &v245[-v252];
          v249 = &v248[-v252];
          v254 = &v246[4 * v250 - 16];
          v255 = (__int128 *)(v245 - 16);
          v256 = v251 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v257 = *v255;
            *((_OWORD *)v254 - 1) = *(v255 - 1);
            *(_OWORD *)v254 = v257;
            v254 -= 32;
            v255 -= 2;
            v256 -= 8;
          }
          while (v256);
          v245 = v253;
          if (v251 != (v251 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_345;
        }
LABEL_346:
        *(_QWORD *)(a1 + 1912) = v249;
        *(_QWORD *)(a1 + 1920) = v248;
        *(_QWORD *)(a1 + 1928) = &v246[4 * v242];
        v240 = v244;
        if (v243)
        {
          operator delete(v243);
          v241 = *(unsigned int **)(a1 + 2440);
          v240 = *(unsigned int **)(a1 + 2448);
        }
        goto LABEL_348;
      }
      if (v185 >> 62)
        goto LABEL_879;
      v187 = *(unsigned int **)(a1 + 2424);
      v188 = *(_BYTE **)(a1 + 1896);
      v189 = (char *)operator new(4 * v185);
      v190 = v188 - v186;
      v191 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
      v192 = v191;
      if (v188 != v186)
      {
        if ((unint64_t)(v190 - 4) < 0x2C)
        {
          v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_285:
            v201 = *((_DWORD *)v188 - 1);
            v188 -= 4;
            *((_DWORD *)v192 - 1) = v201;
            v192 -= 4;
          }
          while (v188 != v186);
          goto LABEL_286;
        }
        v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v188[-(v190 & 0xFFFFFFFFFFFFFFFCLL)] - v189) < 0x20)
          goto LABEL_285;
        v193 = v190 >> 2;
        v194 = ((unint64_t)(v190 - 4) >> 2) + 1;
        v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
        v196 = &v188[-v195];
        v192 = &v191[-v195];
        v197 = &v189[4 * v193 - 16];
        v198 = (__int128 *)(v188 - 16);
        v199 = v194 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v200 = *v198;
          *((_OWORD *)v197 - 1) = *(v198 - 1);
          *(_OWORD *)v197 = v200;
          v197 -= 32;
          v198 -= 2;
          v199 -= 8;
        }
        while (v199);
        v188 = v196;
        if (v194 != (v194 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_285;
      }
LABEL_286:
      *(_QWORD *)(a1 + 1888) = v192;
      *(_QWORD *)(a1 + 1896) = v191;
      *(_QWORD *)(a1 + 1904) = &v189[4 * v185];
      v183 = v187;
      if (v186)
      {
        operator delete(v186);
        v184 = *(unsigned int **)(a1 + 2416);
        v183 = *(unsigned int **)(a1 + 2424);
      }
      goto LABEL_288;
    }
    if (v127 >> 62)
      goto LABEL_879;
    v129 = *(unsigned int **)(a1 + 2400);
    v130 = *(_BYTE **)(a1 + 1872);
    v131 = (char *)operator new(4 * v127);
    v132 = v130 - v128;
    v133 = &v131[(v130 - v128) & 0xFFFFFFFFFFFFFFFCLL];
    v134 = v133;
    if (v130 != v128)
    {
      if ((unint64_t)(v132 - 4) < 0x2C)
      {
        v134 = &v131[(v130 - v128) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_225:
          v143 = *((_DWORD *)v130 - 1);
          v130 -= 4;
          *((_DWORD *)v134 - 1) = v143;
          v134 -= 4;
        }
        while (v130 != v128);
        goto LABEL_226;
      }
      v134 = &v131[(v130 - v128) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v130[-(v132 & 0xFFFFFFFFFFFFFFFCLL)] - v131) < 0x20)
        goto LABEL_225;
      v135 = v132 >> 2;
      v136 = ((unint64_t)(v132 - 4) >> 2) + 1;
      v137 = 4 * (v136 & 0x7FFFFFFFFFFFFFF8);
      v138 = &v130[-v137];
      v134 = &v133[-v137];
      v139 = &v131[4 * v135 - 16];
      v140 = (__int128 *)(v130 - 16);
      v141 = v136 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v142 = *v140;
        *((_OWORD *)v139 - 1) = *(v140 - 1);
        *(_OWORD *)v139 = v142;
        v139 -= 32;
        v140 -= 2;
        v141 -= 8;
      }
      while (v141);
      v130 = v138;
      if (v136 != (v136 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_225;
    }
LABEL_226:
    *(_QWORD *)(a1 + 1864) = v134;
    *(_QWORD *)(a1 + 1872) = v133;
    *(_QWORD *)(a1 + 1880) = &v131[4 * v127];
    v125 = v129;
    if (v128)
    {
      operator delete(v128);
      v126 = *(unsigned int **)(a1 + 2392);
      v125 = *(unsigned int **)(a1 + 2400);
    }
    goto LABEL_228;
  }
  return a1 + 1600;
}

void sub_20F8DAB54(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20F8DB0F0(v1);
    _Unwind_Resume(a1);
  }
  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DAC28(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[25];
    v5 = a1[26];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[25] = v7;
      return;
    }
    v8 = (char *)a1[24];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[24] = v14;
        a1[25] = v7;
        a1[26] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F8DADC0(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[28];
    v5 = a1[29];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[28] = v7;
      return;
    }
    v8 = (char *)a1[27];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[27] = v14;
        a1[28] = v7;
        a1[29] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F8DAF58(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[31];
    v5 = a1[32];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[31] = v7;
      return;
    }
    v8 = (char *)a1[30];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[30] = v14;
        a1[31] = v7;
        a1[32] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

uint64_t sub_20F8DB0F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = a1[133];
  v3 = a1[134];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 208);
    if (*(_BYTE *)(v2 + 496) || (*(_BYTE *)(v4 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v2 + 216) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v2 + 216) + 8);
    }
    v2 += 504;
  }
  v5 = a1[136];
  v6 = a1[137];
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 136);
    if (*(_BYTE *)(v5 + 272) || (*(_BYTE *)(v7 + 4) & 6) != 0)
      ++*(_DWORD *)(v7 + 8);
    v5 += 280;
  }
  v8 = a1[139];
  v9 = a1[140];
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      ++*(_DWORD *)(v10 + 8);
    v8 += 280;
  }
  v11 = a1[142];
  v12 = a1[143];
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      ++*(_DWORD *)(v13 + 8);
    v11 += 280;
  }
  v14 = a1[145];
  v15 = a1[146];
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 64);
    if (*(_BYTE *)(v14 + 152) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      ++*(_DWORD *)(v16 + 8);
    v14 += 160;
  }
  v17 = a1[148];
  for (i = a1[149]; v17 != i; v17 += 8016)
  {
    v19 = *(_QWORD *)(v17 + 7696);
    if (*(_BYTE *)(v17 + 8008)
      || (*(_BYTE *)(v19 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v17 + 7704) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v17 + 7712) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v17 + 7720) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v17 + 7728) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v19 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v17 + 7704) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v17 + 7712) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v17 + 7720) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v17 + 7728) + 8);
    }
  }
  v20 = a1[151];
  for (j = a1[152]; v20 != j; v20 += 5336)
  {
    v22 = *(_QWORD *)(v20 + 5024);
    if (*(_BYTE *)(v20 + 5328)
      || (*(_BYTE *)(v22 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v20 + 5032) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v20 + 5040) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v20 + 5048) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v22 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v20 + 5032) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v20 + 5040) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v20 + 5048) + 8);
    }
  }
  v23 = a1[154];
  v24 = a1[155];
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 136) || (*(_BYTE *)(v25 + 4) & 6) != 0)
      ++*(_DWORD *)(v25 + 8);
    v23 += 144;
  }
  v26 = a1[157];
  v27 = a1[158];
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 144) || (*(_BYTE *)(v28 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v26 + 56) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v28 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v26 + 56) + 8);
    }
    v26 += 152;
  }
  v29 = a1[160];
  for (k = a1[161]; v29 != k; v29 += 304)
  {
    v31 = *(_QWORD *)(v29 + 200);
    if (*(_BYTE *)(v29 + 296)
      || (*(_BYTE *)(v31 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v29 + 208) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v29 + 216) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v29 + 224) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v31 + 8);
      v32 = *(_QWORD *)(v29 + 216);
      ++*(_DWORD *)(*(_QWORD *)(v29 + 208) + 8);
      ++*(_DWORD *)(v32 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v29 + 224) + 8);
    }
  }
  sub_20F8DB8C0(a1[163], a1[164]);
  v33 = a1[166];
  v34 = a1[167];
  while (v33 != v34)
  {
    v35 = *(_QWORD *)(v33 + 48);
    if (*(_BYTE *)(v33 + 104) || (*(_BYTE *)(v35 + 4) & 6) != 0)
      ++*(_DWORD *)(v35 + 8);
    v33 += 112;
  }
  v36 = a1[169];
  v37 = a1[170];
  while (v36 != v37)
  {
    v38 = *(_QWORD *)(v36 + 96);
    if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
      ++*(_DWORD *)(v38 + 8);
    v36 += 208;
  }
  v39 = a1[172];
  v40 = a1[173];
  while (v39 != v40)
  {
    v41 = *(_QWORD *)(v39 + 96);
    if (*(_BYTE *)(v39 + 200) || (*(_BYTE *)(v41 + 4) & 6) != 0)
      ++*(_DWORD *)(v41 + 8);
    v39 += 208;
  }
  v42 = a1[175];
  v43 = a1[176];
  while (v42 != v43)
  {
    v44 = *(_QWORD *)(v42 + 80);
    if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
      ++*(_DWORD *)(v44 + 8);
    v42 += 176;
  }
  v45 = a1[178];
  v46 = a1[179];
  while (v45 != v46)
  {
    v47 = *(_QWORD *)(v45 + 80);
    if (*(_BYTE *)(v45 + 168) || (*(_BYTE *)(v47 + 4) & 6) != 0)
      ++*(_DWORD *)(v47 + 8);
    v45 += 176;
  }
  sub_20F59A8B0(a1[181], a1[182]);
  sub_20F8DB7EC(a1[184], a1[185]);
  return sub_20F8DB684(a1[187], a1[188]);
}

uint64_t sub_20F8DB684(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  for (; result != a2; result += 208)
  {
    v2 = *(_QWORD *)(result + 64);
    if (*(_BYTE *)(result + 200)
      || (*(_BYTE *)(v2 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 72) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 80) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 88) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 96) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 104) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 112) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 120) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 128) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 136) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 144) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v2 + 8);
      v3 = *(_QWORD *)(result + 80);
      ++*(_DWORD *)(*(_QWORD *)(result + 72) + 8);
      ++*(_DWORD *)(v3 + 8);
      v4 = *(_QWORD *)(result + 96);
      ++*(_DWORD *)(*(_QWORD *)(result + 88) + 8);
      ++*(_DWORD *)(v4 + 8);
      v5 = *(_QWORD *)(result + 112);
      ++*(_DWORD *)(*(_QWORD *)(result + 104) + 8);
      ++*(_DWORD *)(v5 + 8);
      v6 = *(_QWORD *)(result + 128);
      ++*(_DWORD *)(*(_QWORD *)(result + 120) + 8);
      ++*(_DWORD *)(v6 + 8);
      v7 = *(_QWORD *)(result + 144);
      ++*(_DWORD *)(*(_QWORD *)(result + 136) + 8);
      ++*(_DWORD *)(v7 + 8);
    }
  }
  return result;
}

uint64_t sub_20F8DB7EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  for (; result != a2; result += 184)
  {
    v2 = *(_QWORD *)(result + 64);
    if (*(_BYTE *)(result + 176)
      || (*(_BYTE *)(v2 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 72) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 80) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 88) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 96) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 104) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v2 + 8);
      v3 = *(_QWORD *)(result + 80);
      ++*(_DWORD *)(*(_QWORD *)(result + 72) + 8);
      ++*(_DWORD *)(v3 + 8);
      v4 = *(_QWORD *)(result + 96);
      ++*(_DWORD *)(*(_QWORD *)(result + 88) + 8);
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 104) + 8);
    }
  }
  return result;
}

uint64_t sub_20F8DB8C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  for (; result != a2; result += 360)
  {
    v2 = *(_QWORD *)(result + 224);
    if (*(_BYTE *)(result + 352)
      || (*(_BYTE *)(v2 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 232) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 240) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 248) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 256) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 264) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v2 + 8);
      v3 = *(_QWORD *)(result + 240);
      ++*(_DWORD *)(*(_QWORD *)(result + 232) + 8);
      ++*(_DWORD *)(v3 + 8);
      v4 = *(_QWORD *)(result + 256);
      ++*(_DWORD *)(*(_QWORD *)(result + 248) + 8);
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 264) + 8);
    }
  }
  return result;
}

uint64_t sub_20F8DB994(uint64_t a1, char **a2)
{
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if ((char **)a1 != a2)
    sub_20E867E00((_QWORD *)a1, *a2, a2[1], (a2[1] - *a2) >> 2);
  if ((char **)a1 != a2)
  {
    sub_20E867E00((_QWORD *)(a1 + 24), a2[3], a2[4], (a2[4] - a2[3]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 48), a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 72), a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 96), a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 120), a2[15], a2[16], (a2[16] - a2[15]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 144), a2[18], a2[19], (a2[19] - a2[18]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 168), a2[21], a2[22], (a2[22] - a2[21]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 192), a2[24], a2[25], (a2[25] - a2[24]) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 216), a2[27], a2[28], (a2[28] - a2[27]) >> 2);
  }
  return a1;
}

void sub_20F8DBAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F89E908(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20F8DBB08(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20F396580(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_20F8DCD3C(v7, v10 - 3);
          result = sub_20F8DCD3C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_20F8DBB08(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F8DCD3C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F396580(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

uint64_t sub_20F8DD1D0(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_20F397DA0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_20F8DE404(v7, v10 - 3);
          result = sub_20F8DE404(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_20F8DD1D0(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F8DE404(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F397DA0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

uint64_t sub_20F8DE898(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD v45[10];
  unsigned int v46;
  _OWORD v47[3];

  if (*(_BYTE *)(a1 + 1592))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 4;
  memset(v47, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v47, v45, 1))
    return v46;
  *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2392, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2392), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2392), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2392), v19);
    v17 += 160;
  }
  sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2392), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2392, v25);
      sub_20F394A20(a1 + 2392, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2392), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2392), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2392), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2392), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2392), v40);
    v38 += 176;
  }
  sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
  sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
  sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
  v41 = (*(_QWORD *)(a1 + 2640) - *(_QWORD *)(a1 + 2632)) >> 2;
  if (DWORD2(v47[2]) > v41)
    LODWORD(v41) = DWORD2(v47[2]);
  v42 = v46 >= v41;
  v43 = v46 - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20F8DB0F0((_QWORD *)a1);
  return v44;
}

void sub_20F8DED44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DED58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DED6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DED80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DED94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEDA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEDBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEDD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEDE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEDF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEE0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEE20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DEE34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20F8DEE48(_QWORD *a1, int *a2, _DWORD *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;

  v4 = *a2;
  v5 = a1[1];
  v6 = a1[2];
  if (v5 == v6)
  {
    v7 = 0;
    *a3 = 0;
    *a2 = v4;
    v11 = a2[1];
    v12 = a1[13];
    v13 = a1[14];
    if (v12 != v13)
      goto LABEL_10;
LABEL_51:
    a3[1] = 0;
    a2[1] = v11;
    v17 = a2[2];
    v18 = a1[25];
    v19 = a1[26];
    if (v18 != v19)
      goto LABEL_18;
LABEL_52:
    a3[2] = 0;
    a2[2] = v17;
    v23 = a2[3];
    v24 = a1[37];
    v25 = a1[38];
    if (v24 != v25)
      goto LABEL_26;
LABEL_53:
    a3[3] = 0;
    a2[3] = v23;
    v29 = a2[4];
    v30 = a1[49];
    v31 = a1[50];
    if (v30 != v31)
      goto LABEL_34;
    goto LABEL_54;
  }
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v9 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v4;
    }
    if (*(_BYTE *)(v9 + 20))
      v10 = 1;
    else
      v10 = a4;
    v8 += v10;
    v5 += 16;
  }
  while (v5 != v6);
  *a3 = v8;
  *a2 = v4;
  v11 = a2[1];
  v12 = a1[13];
  v13 = a1[14];
  if (v12 == v13)
    goto LABEL_51;
LABEL_10:
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)(v12 + 8);
    if ((*(_BYTE *)(v15 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v11;
    }
    if (*(_BYTE *)(v15 + 20))
      v16 = 1;
    else
      v16 = a4;
    v14 += v16;
    v12 += 16;
  }
  while (v12 != v13);
  a3[1] = v14;
  a2[1] = v11;
  v17 = a2[2];
  v18 = a1[25];
  v19 = a1[26];
  if (v18 == v19)
    goto LABEL_52;
LABEL_18:
  v20 = 0;
  do
  {
    v21 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v21 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v17;
    }
    if (*(_BYTE *)(v21 + 20))
      v22 = 1;
    else
      v22 = a4;
    v20 += v22;
    v18 += 16;
  }
  while (v18 != v19);
  a3[2] = v20;
  a2[2] = v17;
  v23 = a2[3];
  v24 = a1[37];
  v25 = a1[38];
  if (v24 == v25)
    goto LABEL_53;
LABEL_26:
  v26 = 0;
  do
  {
    v27 = *(_QWORD *)(v24 + 8);
    if ((*(_BYTE *)(v27 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v23;
    }
    if (*(_BYTE *)(v27 + 20))
      v28 = 1;
    else
      v28 = a4;
    v26 += v28;
    v24 += 16;
  }
  while (v24 != v25);
  a3[3] = v26;
  a2[3] = v23;
  v29 = a2[4];
  v30 = a1[49];
  v31 = a1[50];
  if (v30 != v31)
  {
LABEL_34:
    v32 = 0;
    do
    {
      v33 = *(_QWORD *)(v30 + 8);
      if ((*(_BYTE *)(v33 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v29;
      }
      if (*(_BYTE *)(v33 + 20))
        v34 = 1;
      else
        v34 = a4;
      v32 += v34;
      v30 += 16;
    }
    while (v30 != v31);
    a3[4] = v32;
    a2[4] = v29;
    v35 = a2[5];
    v36 = a1[61];
    v37 = a1[62];
    if (v36 != v37)
      goto LABEL_42;
LABEL_55:
    v38 = 0;
    goto LABEL_56;
  }
LABEL_54:
  a3[4] = 0;
  a2[4] = v29;
  v35 = a2[5];
  v36 = a1[61];
  v37 = a1[62];
  if (v36 == v37)
    goto LABEL_55;
LABEL_42:
  v38 = 0;
  do
  {
    v39 = *(_QWORD *)(v36 + 8);
    if ((*(_BYTE *)(v39 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v35;
    }
    if (*(_BYTE *)(v39 + 20))
      v40 = 1;
    else
      v40 = a4;
    v38 += v40;
    v36 += 16;
  }
  while (v36 != v37);
LABEL_56:
  a3[5] = v38;
  a2[5] = v35;
  v41 = a2[6];
  v42 = a1[73];
  v43 = a1[74];
  if (v42 == v43)
  {
    v44 = 0;
  }
  else
  {
    v44 = 0;
    do
    {
      v45 = *(_QWORD *)(v42 + 8);
      if ((*(_BYTE *)(v45 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v41;
      }
      if (*(_BYTE *)(v45 + 20))
        v46 = 1;
      else
        v46 = a4;
      v44 += v46;
      v42 += 16;
    }
    while (v42 != v43);
  }
  a3[6] = v44;
  a2[6] = v41;
  v47 = a2[7];
  v48 = a1[85];
  v49 = a1[86];
  if (v48 == v49)
  {
    v50 = 0;
  }
  else
  {
    v50 = 0;
    do
    {
      v51 = *(_QWORD *)(v48 + 8);
      if ((*(_BYTE *)(v51 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v47;
      }
      if (*(_BYTE *)(v51 + 20))
        v52 = 1;
      else
        v52 = a4;
      v50 += v52;
      v48 += 16;
    }
    while (v48 != v49);
  }
  a3[7] = v50;
  a2[7] = v47;
  v53 = a2[8];
  v54 = a1[97];
  v55 = a1[98];
  if (v54 == v55)
  {
    v56 = 0;
  }
  else
  {
    v56 = 0;
    do
    {
      v57 = *(_QWORD *)(v54 + 8);
      if ((*(_BYTE *)(v57 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v53;
      }
      if (*(_BYTE *)(v57 + 20))
        v58 = 1;
      else
        v58 = a4;
      v56 += v58;
      v54 += 16;
    }
    while (v54 != v55);
  }
  a3[8] = v56;
  a2[8] = v53;
  v59 = a2[9];
  v60 = a1[109];
  v61 = a1[110];
  if (v60 == v61)
  {
    v62 = 0;
  }
  else
  {
    v62 = 0;
    do
    {
      v63 = *(_QWORD *)(v60 + 8);
      if ((*(_BYTE *)(v63 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v59;
      }
      if (*(_BYTE *)(v63 + 20))
        v64 = 1;
      else
        v64 = a4;
      v62 += v64;
      v60 += 16;
    }
    while (v60 != v61);
  }
  a3[9] = v62;
  a2[9] = v59;
  v65 = a2[10];
  v66 = a1[121];
  v67 = a1[122];
  if (v66 == v67)
  {
    a3[10] = 0;
    a2[10] = v65;
    return v7 != 0;
  }
  else
  {
    v68 = 0;
    do
    {
      v69 = *(_QWORD *)(v66 + 8);
      if ((*(_BYTE *)(v69 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v65;
      }
      if (*(_BYTE *)(v69 + 20))
        v70 = 1;
      else
        v70 = a4;
      v68 += v70;
      v66 += 16;
    }
    while (v66 != v67);
    a3[10] = v68;
    a2[10] = v65;
    return v7 != 0;
  }
}

void sub_20F8DF280(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 64);
      if (*(_BYTE *)(v5 + 200)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 136) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 144) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F599C88(a3, *(_QWORD *)(v5 + 72));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 80));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 88));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 96));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 104));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 112));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 120));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 128));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 136));
        sub_20F8DAF58(a3, *(_QWORD *)(v5 + 144));
      }
      v5 += 208;
    }
    while (v5 != a2);
  }
}

void sub_20F8DF3F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 64);
      if (*(_BYTE *)(v5 + 176)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 72));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 80));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 88));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 96));
        sub_20F59A2E8(a3, *(_QWORD *)(v5 + 104));
      }
      v5 += 184;
    }
    while (v5 != a2);
  }
}

void sub_20F8DF4E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 56);
      if (*(_BYTE *)(v5 + 208)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 136) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F599C88(a3, *(_QWORD *)(v5 + 64));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 72));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 80));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 88));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 96));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 104));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 112));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 120));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 128));
        sub_20F8DAF58(a3, *(_QWORD *)(v5 + 136));
      }
      v5 += 216;
    }
    while (v5 != a2);
  }
}

void sub_20F8DF65C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 224);
      if (*(_BYTE *)(v5 + 352)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 232) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 240) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 248) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 256) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 264) + 4) & 6) != 0)
      {
        sub_20F394A20((uint64_t)a3, v6);
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 232));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 240));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 248));
        sub_20F59A480(a3, *(_QWORD *)(v5 + 256));
        sub_20F59A150(a3, *(_QWORD *)(v5 + 264));
      }
      v5 += 360;
    }
    while (v5 != a2);
  }
}

void sub_20F8DF748(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 200);
      if (*(_BYTE *)(v5 + 296)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 208) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 224) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 208));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 216));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 224));
      }
      v5 += 304;
    }
    while (v5 != a2);
  }
}

void sub_20F8DF7FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 7696);
      if (*(_BYTE *)(v5 + 8008)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7704) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7712) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7720) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7728) + 4) & 6) != 0)
      {
        sub_20F394A20((uint64_t)a3, v6);
        sub_20F3D35E0(a3, *(_QWORD *)(v5 + 7704));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 7712));
        sub_20F3D35E0(a3, *(_QWORD *)(v5 + 7720));
        sub_20F59A150(a3, *(_QWORD *)(v5 + 7728));
      }
      v5 += 8016;
    }
    while (v5 != a2);
  }
}

uint64_t sub_20F8DF8DC(_QWORD *a1, uint64_t *a2)
{
  _OWORD v5[5];
  _OWORD v6[5];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  sub_20F8E03B8(a1, (int *)&v7 + 1, &v7, v6, v5);
  return sub_20F8E0678((uint64_t)a1, a2, (unsigned int *)v6, (unsigned int *)v5);
}

int64x2_t sub_20F8DF948(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int64x2_t result;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int64x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  int64x2_t *v49;
  uint64_t v50;
  int64x2_t *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  int v73;
  float64x2_t *v74;
  int64x2_t *v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  int64x2_t *v80;
  uint64_t v81;
  int64x2_t *v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int64x2_t v86;
  uint64_t v87;

  v6 = *(_DWORD **)a2;
  v7 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v7)
  {
    v8 = 0;
    v17 = *(_DWORD **)(a2 + 24);
    v18 = *(_DWORD **)(a2 + 32);
    if (v17 == v18)
      goto LABEL_13;
    goto LABEL_9;
  }
  v8 = 0;
  v9 = a1[1];
  do
  {
    v9 -= 16;
    do
    {
      v10 = *(_DWORD *)(v9 + 16);
      v9 += 16;
    }
    while (*v6 != v10);
    v11 = *(_QWORD *)(v9 + 8);
    v83 = 3;
    v84 = v11 + 32;
    v85 = 0;
    v87 = 0;
    v86 = 0uLL;
    sub_20F053450(&v83, (double *)v86.i64);
    v12.i64[0] = v87;
    v13.i64[0] = *(_QWORD *)(v11 + 120);
    v14 = *(int8x16_t *)(v11 + 104);
    result = vzip1q_s64(v12, (int64x2_t)v14);
    v16 = *a3 + 8 * v8;
    *(int64x2_t *)v16 = v86;
    *(int64x2_t *)(v16 + 16) = result;
    *(int8x16_t *)(v16 + 32) = vextq_s8(v14, v13, 8uLL);
    v8 += 6;
    ++v6;
  }
  while (v6 != v7);
  v17 = *(_DWORD **)(a2 + 24);
  v18 = *(_DWORD **)(a2 + 32);
  if (v17 != v18)
  {
LABEL_9:
    v19 = a1[13];
    do
    {
      v19 -= 16;
      do
      {
        v20 = *(_DWORD *)(v19 + 16);
        v19 += 16;
      }
      while (*v17 != v20);
      v21 = *(_QWORD *)(v19 + 8);
      result.i64[0] = *(_QWORD *)(v21 + 96);
      v23 = *(_OWORD *)(v21 + 64);
      v22 = *(_OWORD *)(v21 + 80);
      v24 = *(_OWORD *)(v21 + 32);
      v25 = *(_OWORD *)(v21 + 48);
      v26 = *a3 + 8 * v8;
      *(_OWORD *)(v26 + 32) = v23;
      *(_OWORD *)(v26 + 48) = v22;
      *(_QWORD *)(v26 + 64) = result.i64[0];
      *(_OWORD *)v26 = v24;
      *(_OWORD *)(v26 + 16) = v25;
      v8 += 9;
      ++v17;
    }
    while (v17 != v18);
  }
LABEL_13:
  v27 = *(_DWORD **)(a2 + 48);
  v28 = *(_DWORD **)(a2 + 56);
  if (v27 != v28)
  {
    v29 = a1[25];
    do
    {
      v29 -= 16;
      do
      {
        v30 = *(_DWORD *)(v29 + 16);
        v29 += 16;
      }
      while (*v27 != v30);
      v31 = *(_QWORD *)(v29 + 8);
      v83 = 3;
      v84 = v31 + 32;
      v85 = 0;
      v87 = 0;
      v86 = 0uLL;
      sub_20F053450(&v83, (double *)v86.i64);
      v32.i64[0] = v87;
      v33.i64[0] = *(_QWORD *)(v31 + 120);
      v34 = *(int8x16_t *)(v31 + 104);
      result = vzip1q_s64(v32, (int64x2_t)v34);
      v35 = *a3 + 8 * v8;
      *(int64x2_t *)v35 = v86;
      *(int64x2_t *)(v35 + 16) = result;
      *(int8x16_t *)(v35 + 32) = vextq_s8(v34, v33, 8uLL);
      v8 += 6;
      ++v27;
    }
    while (v27 != v28);
  }
  v36 = *(_DWORD **)(a2 + 72);
  v37 = *(_DWORD **)(a2 + 80);
  if (v36 != v37)
  {
    v38 = a1[37];
    do
    {
      v38 -= 16;
      do
      {
        v39 = *(_DWORD *)(v38 + 16);
        v38 += 16;
      }
      while (*v36 != v39);
      v40 = *(_QWORD *)(v38 + 8);
      v83 = 3;
      v84 = v40 + 32;
      v85 = 0;
      v87 = 0;
      v86 = 0uLL;
      sub_20F053450(&v83, (double *)v86.i64);
      v41.i64[0] = v87;
      v42.i64[0] = *(_QWORD *)(v40 + 120);
      v43 = *(int8x16_t *)(v40 + 104);
      result = vzip1q_s64(v41, (int64x2_t)v43);
      v44 = *a3 + 8 * v8;
      *(int64x2_t *)v44 = v86;
      *(int64x2_t *)(v44 + 16) = result;
      *(int8x16_t *)(v44 + 32) = vextq_s8(v43, v42, 8uLL);
      v8 += 6;
      ++v36;
    }
    while (v36 != v37);
  }
  v45 = *(_DWORD **)(a2 + 96);
  v46 = *(_DWORD **)(a2 + 104);
  if (v45 != v46)
  {
    v47 = a1[49];
    do
    {
      v47 -= 16;
      do
      {
        v48 = *(_DWORD *)(v47 + 16);
        v47 += 16;
      }
      while (*v45 != v48);
      v49 = *(int64x2_t **)(v47 + 8);
      result = v49[2];
      v50 = v49[3].i64[0];
      v51 = (int64x2_t *)(*a3 + 8 * v8);
      v51[1].i64[0] = v50;
      *v51 = result;
      v8 += 3;
      ++v45;
    }
    while (v45 != v46);
  }
  v52 = *(_DWORD **)(a2 + 120);
  v53 = *(_DWORD **)(a2 + 128);
  if (v52 != v53)
  {
    v54 = a1[61];
    do
    {
      v54 -= 16;
      do
      {
        v55 = *(_DWORD *)(v54 + 16);
        v54 += 16;
      }
      while (*v52 != v55);
      result.i64[0] = *(_QWORD *)(*(_QWORD *)(v54 + 8) + 32);
      *(_QWORD *)(*a3 + 8 * v8++) = result.i64[0];
      ++v52;
    }
    while (v52 != v53);
  }
  v56 = *(_DWORD **)(a2 + 144);
  v57 = *(_DWORD **)(a2 + 152);
  if (v56 != v57)
  {
    v58 = a1[73];
    do
    {
      v58 -= 16;
      do
      {
        v59 = *(_DWORD *)(v58 + 16);
        v58 += 16;
      }
      while (*v56 != v59);
      v60 = *(_QWORD *)(v58 + 8);
      result = *(int64x2_t *)(v60 + 32);
      v61 = *(_OWORD *)(v60 + 48);
      v62 = *a3 + 8 * v8;
      *(int64x2_t *)v62 = result;
      *(_OWORD *)(v62 + 16) = v61;
      v8 += 4;
      ++v56;
    }
    while (v56 != v57);
  }
  v63 = *(_DWORD **)(a2 + 168);
  v64 = *(_DWORD **)(a2 + 176);
  if (v63 != v64)
  {
    v65 = a1[85];
    do
    {
      v65 -= 16;
      do
      {
        v66 = *(_DWORD *)(v65 + 16);
        v65 += 16;
      }
      while (*v63 != v66);
      v67 = *(_QWORD *)(v65 + 8);
      result = *(int64x2_t *)(v67 + 32);
      v68 = *(_OWORD *)(v67 + 48);
      v69 = *a3 + 8 * v8;
      *(int64x2_t *)v69 = result;
      *(_OWORD *)(v69 + 16) = v68;
      v8 += 4;
      ++v63;
    }
    while (v63 != v64);
  }
  v70 = *(_DWORD **)(a2 + 192);
  v71 = *(_DWORD **)(a2 + 200);
  if (v70 != v71)
  {
    v72 = a1[97];
    do
    {
      v72 -= 16;
      do
      {
        v73 = *(_DWORD *)(v72 + 16);
        v72 += 16;
      }
      while (*v70 != v73);
      v74 = (float64x2_t *)(*(_QWORD *)(v72 + 8) + 32);
      v86 = 0uLL;
      v87 = 0;
      sub_20E9733B8(v74, (double *)v86.i64);
      result = v86;
      v75 = (int64x2_t *)(*a3 + 8 * v8);
      v75[1].i64[0] = v87;
      *v75 = result;
      v8 += 3;
      ++v70;
    }
    while (v70 != v71);
  }
  v76 = *(_DWORD **)(a2 + 216);
  v77 = *(_DWORD **)(a2 + 224);
  if (v76 != v77)
  {
    v78 = a1[109];
    do
    {
      v78 -= 16;
      do
      {
        v79 = *(_DWORD *)(v78 + 16);
        v78 += 16;
      }
      while (*v76 != v79);
      v80 = *(int64x2_t **)(v78 + 8);
      result = v80[2];
      v81 = v80[3].i64[0];
      v82 = (int64x2_t *)(*a3 + 8 * v8);
      v82[1].i64[0] = v81;
      *v82 = result;
      v8 += 3;
      ++v76;
    }
    while (v76 != v77);
  }
  return result;
}

uint64_t sub_20F8DFD74(_DWORD *a1, uint64_t a2)
{
  _OWORD v3[15];

  memset(v3, 0, sizeof(v3));
  sub_20F8EA9E4(a1, a2, (uint64_t)v3);
  return sub_20F89E908((uint64_t)v3);
}

void sub_20F8DFDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F8DFDDC(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  char **v8;
  char *v9;
  char **v10;
  char *v11;
  unint64_t v12;
  char **v13;
  unsigned int *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int **v21;
  unsigned int *v22;
  int64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int v26;
  char *v27;
  unsigned int *__dst;
  unsigned int *v29;

  v6 = 0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    v7 = (_QWORD *)a1 + 3 * v6;
    v8 = (char **)(a2 + 24 * v6);
    v10 = v8 + 1;
    v9 = v8[1];
    v11 = *v8;
    v12 = (v9 - *v8) >> 2;
    v13 = (char **)(v7 + 1);
    v14 = (unsigned int *)*v7;
    v15 = (uint64_t)(v7[1] - *v7) >> 2;
    v16 = v12 >= v15;
    v17 = v12 - v15;
    if (v17 != 0 && v16)
    {
      sub_20E93DC84((uint64_t)a1 + 24 * v6, v17);
      v11 = *v8;
      v9 = *v10;
      v14 = (unsigned int *)*v7;
      v18 = (unsigned int **)(a3 + 24 * v6);
      v20 = *v18;
      v19 = v18[1];
      __dst = (unsigned int *)*v7;
      v29 = v20;
      if (*v8 != *v10)
        goto LABEL_14;
LABEL_10:
      v23 = 0;
      goto LABEL_20;
    }
    if (v16)
    {
      v21 = (unsigned int **)(a3 + 24 * v6);
      v22 = *v21;
      v19 = v21[1];
      __dst = (unsigned int *)*v7;
      v29 = v22;
      if (v11 != v9)
        goto LABEL_14;
      goto LABEL_10;
    }
    *v13 = (char *)&v14[v12];
    v24 = (unsigned int **)(a3 + 24 * v6);
    v25 = *v24;
    v19 = v24[1];
    __dst = v14;
    v29 = v25;
    if (v11 == v9)
      goto LABEL_10;
LABEL_14:
    while (v29 != v19)
    {
      v26 = *(_DWORD *)v11;
      if (*(_DWORD *)v11 >= *v29)
      {
        v11 += 4 * (*v29++ >= v26);
        if (v11 == v9)
          goto LABEL_17;
      }
      else
      {
        *__dst = v26;
        v11 += 4;
        ++__dst;
        if (v11 == v9)
        {
LABEL_17:
          v23 = 0;
          v14 = __dst;
          goto LABEL_20;
        }
      }
    }
    v14 = __dst;
    v23 = v9 - v11;
    if (v11 != v9)
      memmove(__dst, v11, v9 - v11);
LABEL_20:
    v27 = (char *)v14 + v23;
    if (v27 != *v13)
      *v13 = v27;
    ++v6;
  }
  while (v6 != 10);
}

void sub_20F8DFFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F89E908(v1);
  _Unwind_Resume(a1);
}

void sub_20F8DFFE4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int32x4_t v13;
  int32x4_t v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  int32x4_t v32;
  unsigned int v33;
  int32x4_t *v34;
  unsigned int v35;
  unsigned int v36;
  int32x4_t v37;
  int32x4_t v38;
  char *v39;
  _QWORD *v40;
  char **v41;
  _DWORD *v42;
  _DWORD *v43;
  char *v44;
  unsigned int v45;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int32x4_t v53;
  unsigned int v54;
  int32x4_t *v55;

  v8 = a2[4] - a2[3];
  v9 = 2 * v8
     + (v8 >> 2)
     + a2[19]
     + 6 * (((uint64_t)(a2[7] - a2[6]) >> 2) + ((uint64_t)(a2[1] - *a2) >> 2) + ((uint64_t)(a2[10] - a2[9]) >> 2))
     - a2[18]
     + ((uint64_t)(a2[16] - a2[15]) >> 2)
     + a2[22]
     - a2[21]
     + 3 * (((uint64_t)(a2[25] - a2[24]) >> 2) + ((uint64_t)(a2[13] - a2[12]) >> 2) + ((uint64_t)(a2[28] - a2[27]) >> 2));
  v10 = (a1[1] - *a1) >> 2;
  if (v9 <= v10)
  {
    if (v9 < v10)
      a1[1] = *a1 + 4 * v9;
  }
  else
  {
    sub_20E93DC84((uint64_t)a1, v9 - v10);
  }
  v11 = 0;
  if (a4)
  {
    v12 = 0;
    v13.i64[0] = 0x400000004;
    v13.i64[1] = 0x400000004;
    v14.i64[0] = 0x800000008;
    v14.i64[1] = 0x800000008;
    while (1)
    {
      v15 = &a2[3 * v11];
      v16 = a3 + 24 * v11;
      v17 = (_DWORD *)*v15;
      v18 = (_DWORD *)v15[1];
      v19 = *(_DWORD **)v16;
      v20 = *(_DWORD **)(v16 + 8);
      if (v17 != v18 && v19 != v20)
      {
        v22 = dword_2103B93C4[v11];
        if (v22)
          break;
      }
LABEL_7:
      if (++v11 == 10)
        return;
    }
    v23 = 0;
    v24 = (_QWORD *)(a4 + 24 * v11);
    v25 = *a1;
    v26 = v22 & 0xFFFFFFF8;
    while (*v19 != *v17)
    {
LABEL_15:
      ++v23;
      if (++v19 == v20)
        goto LABEL_7;
    }
    v27 = *(_DWORD *)(*v24 + 4 * v23);
    v28 = v12 + v22;
    v29 = __CFADD__(v12, v22 - 1);
    if (v22 < 8 || v29)
    {
      v30 = *(_DWORD *)(*v24 + 4 * v23);
      v31 = v12;
    }
    else
    {
      v30 = v27 + v26;
      v31 = v12 + v26;
      v32 = vaddq_s32(vdupq_n_s32(v27), (int32x4_t)xmmword_210365350);
      v33 = v22 & 0xFFFFFFF8;
      do
      {
        v34 = (int32x4_t *)(v25 + 4 * v12);
        *v34 = v32;
        v34[1] = vaddq_s32(v32, v13);
        v32 = vaddq_s32(v32, v14);
        v12 += 8;
        v33 -= 8;
      }
      while (v33);
      if (v22 == v26)
      {
LABEL_14:
        ++v17;
        v12 = v28;
        if (v17 == v18)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    do
      *(_DWORD *)(v25 + 4 * v31++) = v30++;
    while (v28 != v31);
    goto LABEL_14;
  }
  v35 = 0;
  v36 = 0;
  v37.i64[0] = 0x400000004;
  v37.i64[1] = 0x400000004;
  v38.i64[0] = 0x800000008;
  v38.i64[1] = 0x800000008;
  do
  {
    v40 = &a2[3 * v11];
    v41 = (char **)(a3 + 24 * v11);
    v42 = (_DWORD *)*v40;
    v43 = (_DWORD *)v40[1];
    v39 = *v41;
    v44 = v41[1];
    v45 = dword_2103B93C4[v11];
    if (v42 != v43 && v39 != v44)
    {
      if (v45)
      {
        v47 = *a1;
        v48 = v45 & 0xFFFFFFF8;
        while (1)
        {
          if (*(_DWORD *)v39 != *v42)
          {
            v36 += v45;
            goto LABEL_43;
          }
          v49 = v35 + v45;
          v50 = __CFADD__(v35, v45 - 1);
          if (v45 < 8 || v50)
            break;
          v51 = v35 + v48;
          v52 = v36 + v48;
          v53 = vaddq_s32(vdupq_n_s32(v36), (int32x4_t)xmmword_210365350);
          v54 = v45 & 0xFFFFFFF8;
          do
          {
            v55 = (int32x4_t *)(v47 + 4 * v35);
            *v55 = v53;
            v55[1] = vaddq_s32(v53, v37);
            v53 = vaddq_s32(v53, v38);
            v35 += 8;
            v54 -= 8;
          }
          while (v54);
          if (v45 != v48)
            goto LABEL_55;
LABEL_56:
          ++v42;
          v36 = v52;
          v35 = v49;
          if (v42 == v43)
            goto LABEL_57;
LABEL_43:
          v39 += 4;
          if (v39 == v44)
            goto LABEL_30;
        }
        v51 = v35;
        v52 = v36;
        do
LABEL_55:
          *(_DWORD *)(v47 + 4 * v51++) = v52++;
        while (v49 != v51);
        goto LABEL_56;
      }
      while (*(_DWORD *)v39 != *v42 || ++v42 != v43)
      {
        v39 += 4;
        if (v39 == v44)
        {
LABEL_30:
          v39 = v44;
          goto LABEL_31;
        }
      }
LABEL_57:
      v39 += 4;
    }
LABEL_31:
    v36 += v45 * ((unint64_t)(v44 - v39) >> 2);
    ++v11;
  }
  while (v11 != 10);
}

uint64_t sub_20F8E0350(uint64_t a1, uint64_t a2)
{
  _OWORD v3[15];

  memset(v3, 0, sizeof(v3));
  sub_20F905738(a1, a2, v3);
  return sub_20F89E908((uint64_t)v3);
}

void sub_20F8E03A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F8E03B8(_QWORD *result, int *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v5 = result[1800];
  v6 = 6 * *(_DWORD *)(v5 + 8);
  *a4 = 0;
  a4[1] = v6;
  *a2 = v6;
  v7 = 9 * *(_DWORD *)(result[1810] + 8);
  a4[2] = a4[1] + *a4;
  a4[3] = v7;
  *a2 += v7;
  v8 = 6 * *(_DWORD *)(result[1820] + 8);
  a4[4] = a4[3] + a4[2];
  a4[5] = v8;
  *a2 += v8;
  v9 = 6 * *(_DWORD *)(result[1830] + 8);
  a4[6] = a4[5] + a4[4];
  a4[7] = v9;
  *a2 += v9;
  v10 = 3 * *(_DWORD *)(result[1840] + 8);
  a4[8] = a4[7] + a4[6];
  a4[9] = v10;
  *a2 += v10;
  v11 = *(_DWORD *)(result[1850] + 8);
  a4[10] = a4[9] + a4[8];
  a4[11] = v11;
  *a2 += v11;
  v12 = 4 * *(_DWORD *)(result[1860] + 8);
  a4[12] = a4[11] + a4[10];
  a4[13] = v12;
  *a2 += v12;
  v13 = 4 * *(_DWORD *)(result[1870] + 8);
  a4[14] = a4[13] + a4[12];
  a4[15] = v13;
  *a2 += v13;
  v14 = 3 * *(_DWORD *)(result[1880] + 8);
  a4[16] = a4[15] + a4[14];
  a4[17] = v14;
  *a2 += v14;
  v15 = 3 * *(_DWORD *)(result[1890] + 8);
  a4[18] = a4[17] + a4[16];
  a4[19] = v15;
  *a2 += v15;
  LODWORD(v5) = 6 * *(_DWORD *)(v5 + 12);
  *a5 = 0;
  a5[1] = v5;
  *a3 = v5;
  LODWORD(v5) = 9 * *(_DWORD *)(result[1801] + 12);
  a5[2] = a5[1] + *a5;
  a5[3] = v5;
  *a3 += v5;
  LODWORD(v5) = 6 * *(_DWORD *)(result[1802] + 12);
  a5[4] = a5[3] + a5[2];
  a5[5] = v5;
  *a3 += v5;
  LODWORD(v5) = 6 * *(_DWORD *)(result[1803] + 12);
  a5[6] = a5[5] + a5[4];
  a5[7] = v5;
  *a3 += v5;
  LODWORD(v5) = 3 * *(_DWORD *)(result[1804] + 12);
  a5[8] = a5[7] + a5[6];
  a5[9] = v5;
  *a3 += v5;
  LODWORD(v5) = *(_DWORD *)(result[1805] + 12);
  a5[10] = a5[9] + a5[8];
  a5[11] = v5;
  *a3 += v5;
  LODWORD(v5) = 4 * *(_DWORD *)(result[1806] + 12);
  a5[12] = a5[11] + a5[10];
  a5[13] = v5;
  *a3 += v5;
  LODWORD(v5) = 4 * *(_DWORD *)(result[1807] + 12);
  a5[14] = a5[13] + a5[12];
  a5[15] = v5;
  *a3 += v5;
  LODWORD(v5) = 3 * *(_DWORD *)(result[1808] + 12);
  a5[16] = a5[15] + a5[14];
  a5[17] = v5;
  *a3 += v5;
  LODWORD(v5) = 3 * *(_DWORD *)(result[1809] + 12);
  a5[18] = a5[17] + a5[16];
  a5[19] = v5;
  *a3 += v5;
  return result;
}

uint64_t sub_20F8E0678(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4)
{
  sub_20F8E111C(a1 + 1296, a2, a3[18] | ((unint64_t)*a4 << 32));
  sub_20F8E1768(a1 + 2736, a2, a3[18] | ((unint64_t)a4[2] << 32));
  sub_20F8E111C(a1 + 4176, a2, a3[18] | ((unint64_t)a4[4] << 32));
  sub_20F8E111C(a1 + 5616, a2, a3[18] | ((unint64_t)a4[6] << 32));
  sub_20F8E1E24(a1 + 7056, a2, a3[18] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 8496, a2, a3[18] | ((unint64_t)a4[10] << 32));
  sub_20F8E29B8(a1 + 9936, a2, a3[18] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 11376, a2, a3[18] | ((unint64_t)a4[14] << 32));
  sub_20F8E1E24(a1 + 12816, a2, a3[18] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 14256, a2, a3[18] | ((unint64_t)a4[18] << 32));
  sub_20F8E111C(a1 + 1152, a2, a3[16] | ((unint64_t)*a4 << 32));
  sub_20F8E1768(a1 + 2592, a2, a3[16] | ((unint64_t)a4[2] << 32));
  sub_20F8E111C(a1 + 4032, a2, a3[16] | ((unint64_t)a4[4] << 32));
  sub_20F8E111C(a1 + 5472, a2, a3[16] | ((unint64_t)a4[6] << 32));
  sub_20F8E1E24(a1 + 6912, a2, a3[16] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 8352, a2, a3[16] | ((unint64_t)a4[10] << 32));
  sub_20F8E29B8(a1 + 9792, a2, a3[16] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 11232, a2, a3[16] | ((unint64_t)a4[14] << 32));
  sub_20F8E1E24(a1 + 12672, a2, a3[16] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 14112, a2, a3[16] | ((unint64_t)a4[18] << 32));
  sub_20F8E2FBC(a1 + 1008, a2, a3[14] | ((unint64_t)*a4 << 32));
  sub_20F8E35D8(a1 + 2448, a2, a3[14] | ((unint64_t)a4[2] << 32));
  sub_20F8E2FBC(a1 + 3888, a2, a3[14] | ((unint64_t)a4[4] << 32));
  sub_20F8E2FBC(a1 + 5328, a2, a3[14] | ((unint64_t)a4[6] << 32));
  sub_20F8E3C4C(a1 + 6768, a2, a3[14] | ((unint64_t)a4[8] << 32));
  sub_20F8E420C(a1 + 8208, a2, a3[14] | ((unint64_t)a4[10] << 32));
  sub_20F8E47B4(a1 + 9648, a2, a3[14] | ((unint64_t)a4[12] << 32));
  sub_20F8E47B4(a1 + 11088, a2, a3[14] | ((unint64_t)a4[14] << 32));
  sub_20F8E3C4C(a1 + 12528, a2, a3[14] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 13968, a2, a3[14] | ((unint64_t)a4[18] << 32));
  sub_20F8E2FBC(a1 + 864, a2, a3[12] | ((unint64_t)*a4 << 32));
  sub_20F8E35D8(a1 + 2304, a2, a3[12] | ((unint64_t)a4[2] << 32));
  sub_20F8E2FBC(a1 + 3744, a2, a3[12] | ((unint64_t)a4[4] << 32));
  sub_20F8E2FBC(a1 + 5184, a2, a3[12] | ((unint64_t)a4[6] << 32));
  sub_20F8E3C4C(a1 + 6624, a2, a3[12] | ((unint64_t)a4[8] << 32));
  sub_20F8E420C(a1 + 8064, a2, a3[12] | ((unint64_t)a4[10] << 32));
  sub_20F8E47B4(a1 + 9504, a2, a3[12] | ((unint64_t)a4[12] << 32));
  sub_20F8E47B4(a1 + 10944, a2, a3[12] | ((unint64_t)a4[14] << 32));
  sub_20F8E3C4C(a1 + 12384, a2, a3[12] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 13824, a2, a3[12] | ((unint64_t)a4[18] << 32));
  sub_20F8E4D94(a1 + 720, a2, a3[10] | ((unint64_t)*a4 << 32));
  sub_20F8E53A4(a1 + 2160, a2, a3[10] | ((unint64_t)a4[2] << 32));
  sub_20F8E4D94(a1 + 3600, a2, a3[10] | ((unint64_t)a4[4] << 32));
  sub_20F8E4D94(a1 + 5040, a2, a3[10] | ((unint64_t)a4[6] << 32));
  sub_20F8E59EC(a1 + 6480, a2, a3[10] | ((unint64_t)a4[8] << 32));
  sub_20F8E5FAC(a1 + 7920, a2, a3[10] | ((unint64_t)a4[10] << 32));
  sub_20F8E6434(a1 + 9360, a2, a3[10] | ((unint64_t)a4[12] << 32));
  sub_20F8E6434(a1 + 10800, a2, a3[10] | ((unint64_t)a4[14] << 32));
  sub_20F8E59EC(a1 + 12240, a2, a3[10] | ((unint64_t)a4[16] << 32));
  sub_20F8E59EC(a1 + 13680, a2, a3[10] | ((unint64_t)a4[18] << 32));
  sub_20F8E111C(a1 + 576, a2, a3[8] | ((unint64_t)*a4 << 32));
  sub_20F8E1768(a1 + 2016, a2, a3[8] | ((unint64_t)a4[2] << 32));
  sub_20F8E111C(a1 + 3456, a2, a3[8] | ((unint64_t)a4[4] << 32));
  sub_20F8E111C(a1 + 4896, a2, a3[8] | ((unint64_t)a4[6] << 32));
  sub_20F8E1E24(a1 + 6336, a2, a3[8] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 7776, a2, a3[8] | ((unint64_t)a4[10] << 32));
  sub_20F8E29B8(a1 + 9216, a2, a3[8] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 10656, a2, a3[8] | ((unint64_t)a4[14] << 32));
  sub_20F8E1E24(a1 + 12096, a2, a3[8] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 13536, a2, a3[8] | ((unint64_t)a4[18] << 32));
  sub_20F8E6A0C(a1 + 432, a2, a3[6] | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1872, a2, a3[6] | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 3312, a2, a3[6] | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4752, a2, a3[6] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6192, a2, a3[6] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7632, a2, a3[6] | ((unint64_t)a4[10] << 32));
  sub_20F8E8310(a1 + 9072, a2, a3[6] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10512, a2, a3[6] | ((unint64_t)a4[14] << 32));
  sub_20F8E7748(a1 + 11952, a2, a3[6] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13392, a2, a3[6] | ((unint64_t)a4[18] << 32));
  sub_20F8E6A0C(a1 + 288, a2, a3[4] | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1728, a2, a3[4] | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 3168, a2, a3[4] | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4608, a2, a3[4] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6048, a2, a3[4] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7488, a2, a3[4] | ((unint64_t)a4[10] << 32));
  sub_20F8E8310(a1 + 8928, a2, a3[4] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10368, a2, a3[4] | ((unint64_t)a4[14] << 32));
  sub_20F8E7748(a1 + 11808, a2, a3[4] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13248, a2, a3[4] | ((unint64_t)a4[18] << 32));
  sub_20F8E8924(a1 + 144, a2, a3[2] | ((unint64_t)*a4 << 32));
  sub_20F8E8FF8(a1 + 1584, a2, a3[2] | ((unint64_t)a4[2] << 32));
  sub_20F8E8924(a1 + 3024, a2, a3[2] | ((unint64_t)a4[4] << 32));
  sub_20F8E8924(a1 + 4464, a2, a3[2] | ((unint64_t)a4[6] << 32));
  sub_20F8E97D8(a1 + 5904, a2, a3[2] | ((unint64_t)a4[8] << 32));
  sub_20F8E9DE4(a1 + 7344, a2, a3[2] | ((unint64_t)a4[10] << 32));
  sub_20F8EA39C(a1 + 8784, a2, a3[2] | ((unint64_t)a4[12] << 32));
  sub_20F8EA39C(a1 + 10224, a2, a3[2] | ((unint64_t)a4[14] << 32));
  sub_20F8E97D8(a1 + 11664, a2, a3[2] | ((unint64_t)a4[16] << 32));
  sub_20F8E97D8(a1 + 13104, a2, a3[2] | ((unint64_t)a4[18] << 32));
  sub_20F8E6A0C(a1, a2, *a3 | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1440, a2, *a3 | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 2880, a2, *a3 | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4320, a2, *a3 | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 5760, a2, *a3 | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7200, a2, *a3 | ((unint64_t)a4[10] << 32));
  sub_20F8E8310(a1 + 8640, a2, *a3 | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10080, a2, *a3 | ((unint64_t)a4[14] << 32));
  sub_20F8E7748(a1 + 11520, a2, *a3 | ((unint64_t)a4[16] << 32));
  return sub_20F8E7748(a1 + 12960, a2, *a3 | ((unint64_t)a4[18] << 32));
}

uint64_t sub_20F8E111C(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  _OWORD *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  size_t v66;
  BOOL v67;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64x2_t *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  const double *v87;
  uint64_t v88;
  unint64_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  unint64_t v92;
  unint64_t v93;
  int v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v93 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 40;
      v95 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = v93 + 6 * v7;
      v99 = v11;
      v98 = v12;
      v97 = v7;
      while (1)
      {
        v32 = *v6;
        v33 = *((unsigned int *)v6 + 4);
        v34 = *(_QWORD *)(v11 + 8 * v10);
        if (v34 == -1)
          break;
        v13 = *v8 + 8 * v34;
LABEL_9:
        v14 = (__int128 *)(v32 + 8 * (3 * v10 + v5 + v33 * v12));
        v15 = *((_QWORD *)v14 + 2);
        v16 = *v14;
        v17 = (__int128 *)((char *)v14 + 8 * v33);
        v18 = *((_QWORD *)v17 + 2);
        v19 = *v17;
        v20 = &v14[v33];
        v21 = *((_QWORD *)v20 + 2);
        v22 = *v20;
        v23 = (__int128 *)((char *)v14 + 24 * v33);
        v24 = *((_QWORD *)v23 + 2);
        v25 = *v23;
        v26 = &v14[2 * v33];
        v27 = *((_QWORD *)v26 + 2);
        v28 = *v26;
        v29 = (__int128 *)((char *)v14 + 40 * v33);
        v30 = *((_QWORD *)v29 + 2);
        v31 = *v29;
        *(_OWORD *)v13 = v16;
        *(_QWORD *)(v13 + 16) = v15;
        *(_OWORD *)(v13 + 24) = v19;
        *(_QWORD *)(v13 + 40) = v18;
        *(_OWORD *)(v13 + 48) = v22;
        *(_QWORD *)(v13 + 64) = v21;
        *(_OWORD *)(v13 + 72) = v25;
        *(_QWORD *)(v13 + 88) = v24;
        *(_OWORD *)(v13 + 96) = v28;
        *(_QWORD *)(v13 + 112) = v27;
        *(_OWORD *)(v13 + 120) = v31;
        *(_QWORD *)(v13 + 136) = v30;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v35 = *(_QWORD *)(v4 + 80);
      if (v35)
      {
        v37 = *(_QWORD *)(v4 + 48);
        v36 = *(_QWORD *)(v4 + 56);
        v38 = ((v36 - v37) << 6) - 1;
        v39 = *(_QWORD *)(v4 + 72);
        if (v36 == v37)
          v38 = 0;
        v13 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v37 + (((unint64_t)(v39 + v35 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v39 + v35 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v35 - 1;
        if ((unint64_t)(v38 - (v35 + v39) + 1) >= 0x400)
        {
          operator delete(*(void **)(v36 - 8));
          v12 = v98;
          v11 = v99;
          result = 40;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v100 = 0;
      v40 = *(_QWORD *)(v4 + 16);
      v41 = *(int64x2_t **)(v4 + 24);
      v42 = (unint64_t)v41 - v40;
      v43 = (uint64_t)((uint64_t)v41->i64 - v40) >> 3;
      v44 = (uint64_t *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8));
      v45 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v45 - (_QWORD)v41) < 0x90)
      {
        v46 = v43 + 18;
        if ((unint64_t)(v43 + 18) >> 61)
          sub_20E867F44();
        v47 = v45 - v40;
        if (v47 >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        v96 = v46;
        if (v46)
        {
          if (v46 >> 61)
            sub_20E877A38();
          v48 = operator new(8 * v46);
          v43 = (uint64_t)((uint64_t)v41->i64 - v40) >> 3;
        }
        else
        {
          v48 = 0;
        }
        v55 = &v48[8 * v43];
        v55[7] = 0u;
        v55[8] = 0u;
        v55[5] = 0u;
        v55[6] = 0u;
        v55[3] = 0u;
        v55[4] = 0u;
        v55[1] = 0u;
        v55[2] = 0u;
        *v55 = 0u;
        if ((int64x2_t *)v40 == v41)
        {
          v57 = &v48[8 * v43];
        }
        else
        {
          if (v42 - 8 >= 0x68)
          {
            v56 = (char *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8));
            v57 = &v48[8 * v43];
            if (v40 + (v42 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v48[v42 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v58 = ((v42 - 8) >> 3) + 1;
              v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
              v56 = (char *)&v44[v59 / 0xFFFFFFFFFFFFFFF8];
              v57 = (char *)v55 - v59;
              v60 = &v48[8 * v43 - 16];
              v61 = (__int128 *)(v40 + 8 * v43 - 16);
              v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v63 = *v61;
                *(v60 - 1) = *(v61 - 1);
                *v60 = v63;
                v60 -= 2;
                v61 -= 2;
                v62 -= 4;
              }
              while (v62);
              if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v56 = (char *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8));
            v57 = &v48[8 * v43];
          }
          do
          {
            v64 = *((_QWORD *)v56 - 1);
            v56 -= 8;
            *((_QWORD *)v57 - 1) = v64;
            v57 -= 8;
          }
          while (v56 != (char *)v40);
        }
LABEL_39:
        v65 = v55 + 9;
        v66 = (char *)v41 - (char *)v44;
        if (v66)
          memmove(v55 + 9, v44, v66);
        *(_QWORD *)(v4 + 16) = v57;
        *(_QWORD *)(v4 + 24) = (char *)v65 + v66;
        *(_QWORD *)(v4 + 32) = &v48[8 * v96];
        v6 = a2;
        v5 = v95;
        result = 40;
        v11 = v99;
        v12 = v98;
        if (v40)
        {
          operator delete((void *)v40);
          v12 = v98;
          v11 = v99;
          result = 40;
        }
        goto LABEL_74;
      }
      v49 = (char *)v41 - (char *)v44;
      if ((unint64_t)((char *)v41 - (char *)v44) > 0x8F)
      {
        v51 = *(uint64_t **)(v4 + 24);
        v50 = 18;
        goto LABEL_50;
      }
      v50 = v49 >> 3;
      v51 = &v41->i64[18 - (v49 >> 3)];
      v52 = v49 & 0xFFFFFFFFFFFFFFF8;
      v53 = 136 - v52;
      if (136 - v52 >= 0x68)
      {
        v67 = &v100 < (uint64_t *)((char *)v41[9].i64 - v52);
        if (v41 >= (int64x2_t *)&v101 || (v54 = *(uint64_t **)(v4 + 24), !v67))
        {
          v68 = (v53 >> 3) + 1;
          v54 = &v41->i64[v68 & 0x3FFFFFFFFFFFFFFCLL];
          v69 = vdupq_lane_s64(v100, 0);
          v70 = v41 + 1;
          v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70[-1] = v69;
            *v70 = v69;
            v70 += 2;
            v71 -= 4;
          }
          while (v71);
          if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v51;
            if (v41 == (int64x2_t *)v44)
              goto LABEL_74;
LABEL_50:
            v72 = (char *)v51 - (char *)(v44 + 18);
            v73 = v72 >> 3;
            v74 = (int64x2_t *)(v51 - 18);
            v75 = (char *)v51;
            if (v51 - 18 < (uint64_t *)v41)
            {
              v76 = (v42 & 0xFFFFFFFFFFFFFFF8) + v72;
              v77 = v40 + v76 + 8;
              if ((unint64_t)v41 > v77)
                v77 = (unint64_t)v41;
              v78 = v77 + ~v40 - v76;
              if (v78 >= 0x58)
              {
                v79 = (v78 >> 3) + 1;
                v80 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                v74 = (int64x2_t *)((char *)v74 + v80 * 8);
                v75 = (char *)&v51[v80];
                v81 = v51 + 2;
                v82 = (__int128 *)(v40 + 8 * v73 + 8 * v43 + 16);
                v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v84 = *v82;
                  *(v81 - 1) = *(v82 - 1);
                  *v81 = v84;
                  v81 += 2;
                  v82 += 2;
                  v83 -= 4;
                }
                while (v83);
                if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v75 = (char *)v51;
              }
              do
              {
                v85 = v74->i64[0];
                v74 = (int64x2_t *)((char *)v74 + 8);
                *(_QWORD *)v75 = v85;
                v75 += 8;
              }
              while (v74 < v41);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v75;
            if (v51 != v44 + 18)
            {
              v86 = v50;
              memmove(&v51[-v73], (const void *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8)), v72);
              v50 = v86;
              v43 = (uint64_t)((uint64_t)v41->i64 - v40) >> 3;
              v12 = v98;
              v11 = v99;
              result = 40;
            }
            v87 = (const double *)&v100;
            if (v44 <= &v100)
            {
              v88 = 144;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v100)
                v88 = 0;
              v87 = (const double *)((char *)&v100 + v88);
            }
            if (v50 >= 0xA)
            {
              if (v44 >= (uint64_t *)v87 + 1
                || (unint64_t)v87 >= v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8) + 8 * v50)
              {
                v44 += v50 & 0xFFFFFFFFFFFFFFFCLL;
                v89 = v50 & 3;
                v90 = vld1q_dup_f64(v87);
                v91 = (float64x2_t *)(v40 + 8 * v43 + 16);
                v92 = v50 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v91[-1] = v90;
                  *v91 = v90;
                  v91 += 2;
                  v92 -= 4;
                }
                while (v92);
                if (v50 == (v50 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v89 = v50;
              }
            }
            else
            {
              v89 = v50;
            }
            do
            {
              *v44++ = *(_QWORD *)v87;
              --v89;
            }
            while (v89);
LABEL_74:
            v13 = *(_QWORD *)(v4 + 24) - 144;
            v8 = (_QWORD *)(v4 + 16);
            v7 = v97;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = (v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v54 = *(uint64_t **)(v4 + 24);
      }
      do
        *v54++ = v100;
      while (v54 != v51);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E1768(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64x2_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  size_t v75;
  BOOL v76;
  uint64_t v77;
  int64x2_t v78;
  int64x2_t *v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  int64x2_t *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  const double *v96;
  uint64_t v97;
  unint64_t v98;
  float64x2_t v99;
  float64x2_t *v100;
  unint64_t v101;
  unint64_t v102;
  int v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v102 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 40;
      v104 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = 9 * v7 + v102;
      v108 = v11;
      v107 = v12;
      v106 = v7;
      while (1)
      {
        v41 = *v6;
        v42 = *((unsigned int *)v6 + 4);
        v43 = *(_QWORD *)(v11 + 8 * v10);
        if (v43 == -1)
          break;
        v13 = *v8 + 8 * v43;
LABEL_9:
        v14 = (__int128 *)(v41 + 8 * (3 * v10 + v5 + v42 * v12));
        v15 = *((_QWORD *)v14 + 2);
        v16 = *v14;
        v17 = (__int128 *)((char *)v14 + 8 * v42);
        v18 = *((_QWORD *)v17 + 2);
        v19 = *v17;
        v20 = &v14[v42];
        v21 = *((_QWORD *)v20 + 2);
        v22 = *v20;
        v23 = (__int128 *)((char *)v14 + 24 * v42);
        v24 = *((_QWORD *)v23 + 2);
        v25 = *v23;
        v26 = &v14[2 * v42];
        v27 = *((_QWORD *)v26 + 2);
        v28 = *v26;
        v29 = (__int128 *)((char *)v14 + 40 * v42);
        v30 = *((_QWORD *)v29 + 2);
        v31 = *v29;
        v32 = &v14[3 * v42];
        v33 = *((_QWORD *)v32 + 2);
        v34 = *v32;
        v35 = (__int128 *)((char *)v14 + 56 * v42);
        v36 = *((_QWORD *)v35 + 2);
        v37 = *v35;
        v38 = &v14[4 * v42];
        v39 = *((_QWORD *)v38 + 2);
        v40 = *v38;
        *(_OWORD *)v13 = v16;
        *(_QWORD *)(v13 + 16) = v15;
        *(_OWORD *)(v13 + 24) = v19;
        *(_QWORD *)(v13 + 40) = v18;
        *(_OWORD *)(v13 + 48) = v22;
        *(_QWORD *)(v13 + 64) = v21;
        *(_OWORD *)(v13 + 72) = v25;
        *(_QWORD *)(v13 + 88) = v24;
        *(_OWORD *)(v13 + 96) = v28;
        *(_QWORD *)(v13 + 112) = v27;
        *(_OWORD *)(v13 + 120) = v31;
        *(_QWORD *)(v13 + 136) = v30;
        *(_OWORD *)(v13 + 144) = v34;
        *(_QWORD *)(v13 + 160) = v33;
        *(_OWORD *)(v13 + 168) = v37;
        *(_QWORD *)(v13 + 184) = v36;
        *(_OWORD *)(v13 + 192) = v40;
        *(_QWORD *)(v13 + 208) = v39;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v44 = *(_QWORD *)(v4 + 80);
      if (v44)
      {
        v46 = *(_QWORD *)(v4 + 48);
        v45 = *(_QWORD *)(v4 + 56);
        v47 = ((v45 - v46) << 6) - 1;
        v48 = *(_QWORD *)(v4 + 72);
        if (v45 == v46)
          v47 = 0;
        v13 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v46 + (((unint64_t)(v48 + v44 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v48 + v44 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v44 - 1;
        if ((unint64_t)(v47 - (v44 + v48) + 1) >= 0x400)
        {
          operator delete(*(void **)(v45 - 8));
          v12 = v107;
          v11 = v108;
          result = 40;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v109 = 0;
      v49 = *(_QWORD *)(v4 + 16);
      v50 = *(int64x2_t **)(v4 + 24);
      v51 = (unint64_t)v50 - v49;
      v52 = (uint64_t)((uint64_t)v50->i64 - v49) >> 3;
      v53 = (uint64_t *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8));
      v54 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v54 - (_QWORD)v50) < 0xD8)
      {
        v55 = v52 + 27;
        if ((unint64_t)(v52 + 27) >> 61)
          sub_20E867F44();
        v56 = v54 - v49;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        v105 = v55;
        if (v55)
        {
          if (v55 >> 61)
            sub_20E877A38();
          v57 = operator new(8 * v55);
          v52 = (uint64_t)((uint64_t)v50->i64 - v49) >> 3;
        }
        else
        {
          v57 = 0;
        }
        v64 = &v57[8 * v52];
        *((_QWORD *)v64 + 26) = 0;
        *((_OWORD *)v64 + 11) = 0u;
        *((_OWORD *)v64 + 12) = 0u;
        *((_OWORD *)v64 + 9) = 0u;
        *((_OWORD *)v64 + 10) = 0u;
        *((_OWORD *)v64 + 7) = 0u;
        *((_OWORD *)v64 + 8) = 0u;
        *((_OWORD *)v64 + 5) = 0u;
        *((_OWORD *)v64 + 6) = 0u;
        *((_OWORD *)v64 + 3) = 0u;
        *((_OWORD *)v64 + 4) = 0u;
        *((_OWORD *)v64 + 1) = 0u;
        *((_OWORD *)v64 + 2) = 0u;
        *(_OWORD *)v64 = 0u;
        if ((int64x2_t *)v49 == v50)
        {
          v66 = &v57[8 * v52];
        }
        else
        {
          if (v51 - 8 >= 0x68)
          {
            v65 = (char *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8));
            v66 = &v57[8 * v52];
            if (v49 + (v51 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v57[v51 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v67 = ((v51 - 8) >> 3) + 1;
              v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
              v65 = (char *)&v53[v68 / 0xFFFFFFFFFFFFFFF8];
              v66 = &v64[-v68];
              v69 = &v57[8 * v52 - 16];
              v70 = (__int128 *)(v49 + 8 * v52 - 16);
              v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v72 = *v70;
                *(v69 - 1) = *(v70 - 1);
                *v69 = v72;
                v69 -= 2;
                v70 -= 2;
                v71 -= 4;
              }
              while (v71);
              if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v65 = (char *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8));
            v66 = &v57[8 * v52];
          }
          do
          {
            v73 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            *((_QWORD *)v66 - 1) = v73;
            v66 -= 8;
          }
          while (v65 != (char *)v49);
        }
LABEL_39:
        v74 = v64 + 216;
        v75 = (char *)v50 - (char *)v53;
        if (v75)
          memmove(v64 + 216, v53, v75);
        *(_QWORD *)(v4 + 16) = v66;
        *(_QWORD *)(v4 + 24) = &v74[v75];
        *(_QWORD *)(v4 + 32) = &v57[8 * v105];
        v6 = a2;
        v5 = v104;
        result = 40;
        v11 = v108;
        v12 = v107;
        if (v49)
        {
          operator delete((void *)v49);
          v12 = v107;
          v11 = v108;
          result = 40;
        }
        goto LABEL_74;
      }
      v58 = (char *)v50 - (char *)v53;
      if ((unint64_t)((char *)v50 - (char *)v53) > 0xD7)
      {
        v60 = *(uint64_t **)(v4 + 24);
        v59 = 27;
        goto LABEL_50;
      }
      v59 = v58 >> 3;
      v60 = &v50->i64[27 - (v58 >> 3)];
      v61 = v58 & 0xFFFFFFFFFFFFFFF8;
      v62 = 208 - v61;
      if (208 - v61 >= 0x68)
      {
        v76 = &v109 < (uint64_t *)((char *)&v50[13].i64[1] - v61);
        if (v50 >= (int64x2_t *)&v110 || (v63 = *(uint64_t **)(v4 + 24), !v76))
        {
          v77 = (v62 >> 3) + 1;
          v63 = &v50->i64[v77 & 0x3FFFFFFFFFFFFFFCLL];
          v78 = vdupq_lane_s64(v109, 0);
          v79 = v50 + 1;
          v80 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79[-1] = v78;
            *v79 = v78;
            v79 += 2;
            v80 -= 4;
          }
          while (v80);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v60;
            if (v50 == (int64x2_t *)v53)
              goto LABEL_74;
LABEL_50:
            v81 = (char *)v60 - (char *)(v53 + 27);
            v82 = v81 >> 3;
            v83 = (int64x2_t *)(v60 - 27);
            v84 = (char *)v60;
            if (v60 - 27 < (uint64_t *)v50)
            {
              v85 = (v51 & 0xFFFFFFFFFFFFFFF8) + v81;
              v86 = v49 + v85 + 8;
              if ((unint64_t)v50 > v86)
                v86 = (unint64_t)v50;
              v87 = v86 + ~v49 - v85;
              if (v87 >= 0x58)
              {
                v88 = (v87 >> 3) + 1;
                v89 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                v83 = (int64x2_t *)((char *)v83 + v89 * 8);
                v84 = (char *)&v60[v89];
                v90 = v60 + 2;
                v91 = (__int128 *)(v49 + 8 * v82 + 8 * v52 + 16);
                v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v93 = *v91;
                  *(v90 - 1) = *(v91 - 1);
                  *v90 = v93;
                  v90 += 2;
                  v91 += 2;
                  v92 -= 4;
                }
                while (v92);
                if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v84 = (char *)v60;
              }
              do
              {
                v94 = v83->i64[0];
                v83 = (int64x2_t *)((char *)v83 + 8);
                *(_QWORD *)v84 = v94;
                v84 += 8;
              }
              while (v83 < v50);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v84;
            if (v60 != v53 + 27)
            {
              v95 = v59;
              memmove(&v60[-v82], (const void *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8)), v81);
              v59 = v95;
              v52 = (uint64_t)((uint64_t)v50->i64 - v49) >> 3;
              v12 = v107;
              v11 = v108;
              result = 40;
            }
            v96 = (const double *)&v109;
            if (v53 <= &v109)
            {
              v97 = 216;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v109)
                v97 = 0;
              v96 = (const double *)((char *)&v109 + v97);
            }
            if (v59 >= 0xA)
            {
              if (v53 >= (uint64_t *)v96 + 1
                || (unint64_t)v96 >= v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8) + 8 * v59)
              {
                v53 += v59 & 0xFFFFFFFFFFFFFFFCLL;
                v98 = v59 & 3;
                v99 = vld1q_dup_f64(v96);
                v100 = (float64x2_t *)(v49 + 8 * v52 + 16);
                v101 = v59 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v100[-1] = v99;
                  *v100 = v99;
                  v100 += 2;
                  v101 -= 4;
                }
                while (v101);
                if (v59 == (v59 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v98 = v59;
              }
            }
            else
            {
              v98 = v59;
            }
            do
            {
              *v53++ = *(_QWORD *)v96;
              --v98;
            }
            while (v98);
LABEL_74:
            v13 = *(_QWORD *)(v4 + 24) - 216;
            v8 = (_QWORD *)(v4 + 16);
            v7 = v106;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = (v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v63 = *(uint64_t **)(v4 + 24);
      }
      do
        *v63++ = v109;
      while (v63 != v60);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E1E24(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  size_t v56;
  BOOL v57;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  int64x2_t *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  const double *v77;
  uint64_t v78;
  unint64_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  unint64_t v82;
  unint64_t v83;
  int v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v83 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v85 = a3;
      v87 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      result = (3 * v7 + v83);
      v90 = 3 * v7 + v83;
      v88 = v11;
      v89 = v7;
      while (1)
      {
        v22 = *v6;
        v23 = *((unsigned int *)v6 + 4);
        v24 = *(_QWORD *)(v11 + 8 * v10);
        if (v24 == -1)
          break;
        v12 = *v8 + 8 * v24;
LABEL_9:
        v13 = (__int128 *)(v22 + 8 * (3 * v10 + v5 + v23 * result));
        v14 = *((_QWORD *)v13 + 2);
        v15 = *v13;
        v16 = (__int128 *)((char *)v13 + 8 * v23);
        v17 = *((_QWORD *)v16 + 2);
        v18 = *v16;
        v19 = &v13[v23];
        v20 = *((_QWORD *)v19 + 2);
        v21 = *v19;
        *(_OWORD *)v12 = v15;
        *(_QWORD *)(v12 + 16) = v14;
        *(_OWORD *)(v12 + 24) = v18;
        *(_QWORD *)(v12 + 40) = v17;
        *(_OWORD *)(v12 + 48) = v21;
        *(_QWORD *)(v12 + 64) = v20;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v25 = *(_QWORD *)(v4 + 80);
      if (v25)
      {
        v27 = *(_QWORD *)(v4 + 48);
        v26 = *(_QWORD *)(v4 + 56);
        v28 = ((v26 - v27) << 6) - 1;
        v29 = *(_QWORD *)(v4 + 72);
        if (v26 == v27)
          v28 = 0;
        v12 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v27 + (((unint64_t)(v29 + v25 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v29 + v25 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v25 - 1;
        if ((unint64_t)(v28 - (v25 + v29) + 1) >= 0x400)
        {
          operator delete(*(void **)(v26 - 8));
          result = v90;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v91 = 0;
      v30 = *(_QWORD *)(v4 + 16);
      v31 = *(int64x2_t **)(v4 + 24);
      v32 = (unint64_t)v31 - v30;
      v33 = (uint64_t)((uint64_t)v31->i64 - v30) >> 3;
      v34 = (uint64_t *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
      v35 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v35 - (_QWORD)v31) < 0x48)
      {
        v36 = v33 + 9;
        if ((unint64_t)(v33 + 9) >> 61)
          sub_20E867F44();
        v37 = v35 - v30;
        if (v37 >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        v86 = v36;
        if (v36)
        {
          if (v36 >> 61)
            sub_20E877A38();
          v38 = operator new(8 * v36);
          v33 = (uint64_t)((uint64_t)v31->i64 - v30) >> 3;
        }
        else
        {
          v38 = 0;
        }
        v45 = &v38[8 * v33];
        *((_QWORD *)v45 + 8) = 0;
        *((_OWORD *)v45 + 2) = 0u;
        *((_OWORD *)v45 + 3) = 0u;
        *(_OWORD *)v45 = 0u;
        *((_OWORD *)v45 + 1) = 0u;
        if ((int64x2_t *)v30 == v31)
        {
          v47 = &v38[8 * v33];
        }
        else
        {
          if (v32 - 8 >= 0x68)
          {
            v46 = (char *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
            v47 = &v38[8 * v33];
            if (v30 + (v32 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v38[v32 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v48 = ((v32 - 8) >> 3) + 1;
              v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = (char *)&v34[v49 / 0xFFFFFFFFFFFFFFF8];
              v47 = &v45[-v49];
              v50 = &v38[8 * v33 - 16];
              v51 = (__int128 *)(v30 + 8 * v33 - 16);
              v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v53 = *v51;
                *(v50 - 1) = *(v51 - 1);
                *v50 = v53;
                v50 -= 2;
                v51 -= 2;
                v52 -= 4;
              }
              while (v52);
              if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v46 = (char *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
            v47 = &v38[8 * v33];
          }
          do
          {
            v54 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *((_QWORD *)v47 - 1) = v54;
            v47 -= 8;
          }
          while (v46 != (char *)v30);
        }
LABEL_39:
        v55 = v45 + 72;
        v56 = (char *)v31 - (char *)v34;
        if (v56)
          memmove(v45 + 72, v34, v56);
        *(_QWORD *)(v4 + 16) = v47;
        *(_QWORD *)(v4 + 24) = &v55[v56];
        *(_QWORD *)(v4 + 32) = &v38[8 * v86];
        v6 = a2;
        v5 = v85;
        result = v90;
        if (v30)
        {
          operator delete((void *)v30);
          result = v90;
        }
        goto LABEL_74;
      }
      v39 = (char *)v31 - (char *)v34;
      if ((unint64_t)((char *)v31 - (char *)v34) > 0x47)
      {
        v41 = *(uint64_t **)(v4 + 24);
        v40 = 9;
        goto LABEL_50;
      }
      v40 = v39 >> 3;
      v41 = &v31->i64[9 - (v39 >> 3)];
      v42 = v39 & 0xFFFFFFFFFFFFFFF8;
      v43 = 64 - v42;
      if (64 - v42 >= 0x68)
      {
        v57 = &v91 < (uint64_t *)((char *)&v31[4].i64[1] - v42);
        if (v31 >= (int64x2_t *)&v92 || (v44 = *(uint64_t **)(v4 + 24), !v57))
        {
          v58 = (v43 >> 3) + 1;
          v44 = &v31->i64[v58 & 0x3FFFFFFFFFFFFFFCLL];
          v59 = vdupq_lane_s64(v91, 0);
          v60 = v31 + 1;
          v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v60[-1] = v59;
            *v60 = v59;
            v60 += 2;
            v61 -= 4;
          }
          while (v61);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v41;
            if (v31 == (int64x2_t *)v34)
              goto LABEL_74;
LABEL_50:
            v62 = (char *)v41 - (char *)(v34 + 9);
            v63 = v62 >> 3;
            v64 = (int64x2_t *)(v41 - 9);
            v65 = (char *)v41;
            if (v41 - 9 < (uint64_t *)v31)
            {
              v66 = (v32 & 0xFFFFFFFFFFFFFFF8) + v62;
              v67 = v30 + v66 + 8;
              if ((unint64_t)v31 > v67)
                v67 = (unint64_t)v31;
              v68 = v67 + ~v30 - v66;
              if (v68 >= 0x58)
              {
                v69 = (v68 >> 3) + 1;
                v70 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                v64 = (int64x2_t *)((char *)v64 + v70 * 8);
                v65 = (char *)&v41[v70];
                v71 = v41 + 2;
                v72 = (__int128 *)(v30 + 8 * v63 + 8 * v33 + 16);
                v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v74 = *v72;
                  *(v71 - 1) = *(v72 - 1);
                  *v71 = v74;
                  v71 += 2;
                  v72 += 2;
                  v73 -= 4;
                }
                while (v73);
                if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v65 = (char *)v41;
              }
              do
              {
                v75 = v64->i64[0];
                v64 = (int64x2_t *)((char *)v64 + 8);
                *(_QWORD *)v65 = v75;
                v65 += 8;
              }
              while (v64 < v31);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v65;
            if (v41 != v34 + 9)
            {
              v76 = v40;
              memmove(&v41[-v63], (const void *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8)), v62);
              v40 = v76;
              v33 = (uint64_t)((uint64_t)v31->i64 - v30) >> 3;
              result = v90;
            }
            v77 = (const double *)&v91;
            if (v34 <= &v91)
            {
              v78 = 72;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v91)
                v78 = 0;
              v77 = (const double *)((char *)&v91 + v78);
            }
            if (v40 >= 0xA)
            {
              if (v34 >= (uint64_t *)v77 + 1
                || (unint64_t)v77 >= v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8) + 8 * v40)
              {
                v34 += v40 & 0xFFFFFFFFFFFFFFFCLL;
                v79 = v40 & 3;
                v80 = vld1q_dup_f64(v77);
                v81 = (float64x2_t *)(v30 + 8 * v33 + 16);
                v82 = v40 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v81[-1] = v80;
                  *v81 = v80;
                  v81 += 2;
                  v82 -= 4;
                }
                while (v82);
                if (v40 == (v40 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v79 = v40;
              }
            }
            else
            {
              v79 = v40;
            }
            do
            {
              *v34++ = *(_QWORD *)v77;
              --v79;
            }
            while (v79);
LABEL_74:
            v12 = *(_QWORD *)(v4 + 24) - 72;
            v11 = v88;
            v7 = v89;
            v8 = v87;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = (v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v44 = *(uint64_t **)(v4 + 24);
      }
      do
        *v44++ = v91;
      while (v44 != v41);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E2400(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  int64x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  size_t v49;
  BOOL v50;
  uint64_t v51;
  int64x2_t v52;
  int64x2_t *v53;
  uint64_t v54;
  int64x2_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  const double *v59;
  uint64_t v60;
  unint64_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  unint64_t v64;
  unint64_t v65;
  int v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v65 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v67 = a3;
      v69 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      result = (v7 + v65);
      v72 = v7 + v65;
      v70 = v11;
      v71 = v7;
      while (1)
      {
        v15 = *v6;
        v16 = *((_DWORD *)v6 + 4);
        v17 = *(_QWORD *)(v11 + 8 * v10);
        if (v17 == -1)
          break;
        v12 = *v8 + 8 * v17;
LABEL_9:
        v13 = (__int128 *)(v15 + 8 * (3 * v10 + v5 + v16 * result));
        v14 = *v13;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v12 = v14;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v18 = *(_QWORD *)(v4 + 80);
      if (v18)
      {
        v20 = *(_QWORD *)(v4 + 48);
        v19 = *(_QWORD *)(v4 + 56);
        v21 = ((v19 - v20) << 6) - 1;
        v22 = *(_QWORD *)(v4 + 72);
        if (v19 == v20)
          v21 = 0;
        v12 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v20 + (((unint64_t)(v22 + v18 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v22 + v18 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v18 - 1;
        if ((unint64_t)(v21 - (v18 + v22) + 1) >= 0x400)
        {
          operator delete(*(void **)(v19 - 8));
          result = v72;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_68;
      }
      v73 = 0;
      v23 = *(int64x2_t **)(v4 + 16);
      v24 = *(int64x2_t **)(v4 + 24);
      v25 = (char *)v24 - (char *)v23;
      v26 = ((char *)v24 - (char *)v23) >> 3;
      v27 = (uint64_t *)((char *)v23->i64 + (((char *)v24 - (char *)v23) & 0xFFFFFFFFFFFFFFF8));
      v28 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v28 - (_QWORD)v24) < 0x18)
      {
        v29 = v26 + 3;
        if ((unint64_t)(v26 + 3) >> 61)
          sub_20E867F44();
        v30 = v28 - (_QWORD)v23;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        v68 = v29;
        if (v29)
        {
          if (v29 >> 61)
            sub_20E877A38();
          v31 = operator new(8 * v29);
          v26 = ((char *)v24 - (char *)v23) >> 3;
          v32 = &v31[8 * v26];
          *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          if (v23 != v24)
            goto LABEL_25;
        }
        else
        {
          v31 = 0;
          v32 = (_QWORD *)(8 * v26);
          *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          if (v23 != v24)
          {
LABEL_25:
            if ((unint64_t)(v25 - 8) >= 0x68)
            {
              v33 = (uint64_t *)((char *)v23->i64 + (((char *)v24 - (char *)v23) & 0xFFFFFFFFFFFFFFF8));
              v34 = v32;
              if ((unint64_t)(&v23->i8[v25 & 0xFFFFFFFFFFFFFFF8] - &v31[v25 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
              {
                v41 = ((unint64_t)(v25 - 8) >> 3) + 1;
                v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
                v33 = &v27[v42 / 0xFFFFFFFFFFFFFFF8];
                v34 = &v32[v42 / 0xFFFFFFFFFFFFFFF8];
                v43 = &v31[8 * v26 - 16];
                v44 = (__int128 *)&v23[-1].i8[8 * v26];
                v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v46 = *v44;
                  *(v43 - 1) = *(v44 - 1);
                  *v43 = v46;
                  v43 -= 2;
                  v44 -= 2;
                  v45 -= 4;
                }
                while (v45);
                if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_38;
              }
            }
            else
            {
              v33 = (uint64_t *)((char *)v23->i64 + (((char *)v24 - (char *)v23) & 0xFFFFFFFFFFFFFFF8));
              v34 = v32;
            }
            do
            {
              v47 = *--v33;
              *--v34 = v47;
            }
            while (v33 != (uint64_t *)v23);
LABEL_38:
            v48 = v32 + 3;
            v49 = (char *)v24 - (char *)v27;
            if (v49)
              memmove(v32 + 3, v27, v49);
            *(_QWORD *)(v4 + 16) = v34;
            *(_QWORD *)(v4 + 24) = (char *)v48 + v49;
            *(_QWORD *)(v4 + 32) = &v31[8 * v68];
            v6 = a2;
            v5 = v67;
            result = v72;
            if (v23)
            {
              operator delete(v23);
              result = v72;
            }
            goto LABEL_67;
          }
        }
        v34 = v32;
        goto LABEL_38;
      }
      v35 = (char *)v24 - (char *)v27;
      if ((unint64_t)((char *)v24 - (char *)v27) > 0x17)
      {
        v37 = *(uint64_t **)(v4 + 24);
        v36 = 3;
LABEL_49:
        v55 = (int64x2_t *)(v37 - 3);
        v56 = v37;
        if (v37 - 3 < (uint64_t *)v24)
        {
          v56 = v37;
          do
          {
            v57 = v55->i64[0];
            v55 = (int64x2_t *)((char *)v55 + 8);
            *v56++ = v57;
          }
          while (v55 < v24);
        }
        *(_QWORD *)(v4 + 24) = v56;
        if (v37 != v27 + 3)
        {
          v58 = v36;
          memmove(&v37[-(v37 - (v27 + 3))], &v23->i8[((char *)v24 - (char *)v23) & 0xFFFFFFFFFFFFFFF8], (char *)v37 - (char *)(v27 + 3));
          v36 = v58;
          v26 = ((char *)v24 - (char *)v23) >> 3;
          result = v72;
        }
        v59 = (const double *)&v73;
        if (v27 <= &v73)
        {
          v60 = 24;
          if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v73)
            v60 = 0;
          v59 = (const double *)((char *)&v73 + v60);
        }
        if (v36 >= 0xA)
        {
          if (v27 >= (uint64_t *)v59 + 1
            || v59 >= (const double *)((char *)&v23->i64[v36] + (((char *)v24 - (char *)v23) & 0xFFFFFFFFFFFFFFF8)))
          {
            v27 += v36 & 0xFFFFFFFFFFFFFFFCLL;
            v61 = v36 & 3;
            v62 = vld1q_dup_f64(v59);
            v63 = (float64x2_t *)((char *)&v23[1] + 8 * v26);
            v64 = v36 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v63[-1] = v62;
              *v63 = v62;
              v63 += 2;
              v64 -= 4;
            }
            while (v64);
            if (v36 == (v36 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_67;
          }
          else
          {
            v61 = v36;
          }
        }
        else
        {
          v61 = v36;
        }
        do
        {
          *v27++ = *(_QWORD *)v59;
          --v61;
        }
        while (v61);
LABEL_67:
        v12 = *(_QWORD *)(v4 + 24) - 24;
        v11 = v70;
        v7 = v71;
        v8 = v69;
LABEL_68:
        *(_QWORD *)(v11 + 8 * v10) = (v12 - *(_QWORD *)(v4 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
        goto LABEL_9;
      }
      v36 = v35 >> 3;
      v37 = &v24->i64[3 - (v35 >> 3)];
      v38 = v35 & 0xFFFFFFFFFFFFFFF8;
      v39 = 16 - v38;
      if (16 - v38 >= 0x68)
      {
        v50 = &v73 < (uint64_t *)((char *)&v24[1].i64[1] - v38);
        if (v24 >= (int64x2_t *)&v74 || (v40 = *(uint64_t **)(v4 + 24), !v50))
        {
          v51 = (v39 >> 3) + 1;
          v40 = &v24->i64[v51 & 0x3FFFFFFFFFFFFFFCLL];
          v52 = vdupq_lane_s64(v73, 0);
          v53 = v24 + 1;
          v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53[-1] = v52;
            *v53 = v52;
            v53 += 2;
            v54 -= 4;
          }
          while (v54);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            *(_QWORD *)(v4 + 24) = v37;
            if (v24 == (int64x2_t *)v27)
              goto LABEL_67;
            goto LABEL_49;
          }
        }
      }
      else
      {
        v40 = *(uint64_t **)(v4 + 24);
      }
      do
        *v40++ = v73;
      while (v40 != v37);
      goto LABEL_48;
    }
  }
  return result;
}

uint64_t sub_20F8E29B8(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _OWORD *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  size_t v59;
  BOOL v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64x2_t *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  const double *v80;
  uint64_t v81;
  unint64_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  unint64_t v85;
  unint64_t v86;
  int v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v86 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v88 = a3;
      v90 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = v86 + 4 * v7;
      v93 = result;
      v92 = v11;
      v91 = v7;
      while (1)
      {
        v25 = *v6;
        v26 = *((unsigned int *)v6 + 4);
        v27 = *(_QWORD *)(result + 8 * v10);
        if (v27 == -1)
          break;
        v12 = *v8 + 8 * v27;
LABEL_9:
        v13 = (__int128 *)(v25 + 8 * (3 * v10 + v5 + v26 * v11));
        v14 = *((_QWORD *)v13 + 2);
        v15 = *v13;
        v16 = (__int128 *)((char *)v13 + 8 * v26);
        v17 = *((_QWORD *)v16 + 2);
        v18 = *v16;
        v19 = &v13[v26];
        v20 = *((_QWORD *)v19 + 2);
        v21 = *v19;
        v22 = (__int128 *)((char *)v13 + 24 * v26);
        v23 = *((_QWORD *)v22 + 2);
        v24 = *v22;
        *(_OWORD *)v12 = v15;
        *(_QWORD *)(v12 + 16) = v14;
        *(_OWORD *)(v12 + 24) = v18;
        *(_QWORD *)(v12 + 40) = v17;
        *(_OWORD *)(v12 + 48) = v21;
        *(_QWORD *)(v12 + 64) = v20;
        *(_OWORD *)(v12 + 72) = v24;
        *(_QWORD *)(v12 + 88) = v23;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v28 = *(_QWORD *)(v4 + 80);
      if (v28)
      {
        v30 = *(_QWORD *)(v4 + 48);
        v29 = *(_QWORD *)(v4 + 56);
        v31 = ((v29 - v30) << 6) - 1;
        v32 = *(_QWORD *)(v4 + 72);
        if (v29 == v30)
          v31 = 0;
        v12 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(v32 + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v32 + v28 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v28 - 1;
        if ((unint64_t)(v31 - (v28 + v32) + 1) >= 0x400)
        {
          operator delete(*(void **)(v29 - 8));
          v11 = v92;
          result = v93;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v94 = 0;
      v33 = *(_QWORD *)(v4 + 16);
      v34 = *(int64x2_t **)(v4 + 24);
      v35 = (unint64_t)v34 - v33;
      v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
      v37 = (uint64_t *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
      v38 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v38 - (_QWORD)v34) < 0x60)
      {
        v39 = v36 + 12;
        if ((unint64_t)(v36 + 12) >> 61)
          sub_20E867F44();
        v40 = v38 - v33;
        if (v40 >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        v89 = v39;
        if (v39)
        {
          if (v39 >> 61)
            sub_20E877A38();
          v41 = operator new(8 * v39);
          v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
        }
        else
        {
          v41 = 0;
        }
        v48 = &v41[8 * v36];
        v48[4] = 0u;
        v48[5] = 0u;
        v48[2] = 0u;
        v48[3] = 0u;
        *v48 = 0u;
        v48[1] = 0u;
        if ((int64x2_t *)v33 == v34)
        {
          v50 = &v41[8 * v36];
        }
        else
        {
          if (v35 - 8 >= 0x68)
          {
            v49 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v50 = &v41[8 * v36];
            if (v33 + (v35 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v41[v35 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v51 = ((v35 - 8) >> 3) + 1;
              v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
              v49 = (char *)&v37[v52 / 0xFFFFFFFFFFFFFFF8];
              v50 = (char *)v48 - v52;
              v53 = &v41[8 * v36 - 16];
              v54 = (__int128 *)(v33 + 8 * v36 - 16);
              v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v56 = *v54;
                *(v53 - 1) = *(v54 - 1);
                *v53 = v56;
                v53 -= 2;
                v54 -= 2;
                v55 -= 4;
              }
              while (v55);
              if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v49 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v50 = &v41[8 * v36];
          }
          do
          {
            v57 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v50 - 1) = v57;
            v50 -= 8;
          }
          while (v49 != (char *)v33);
        }
LABEL_39:
        v58 = v48 + 6;
        v59 = (char *)v34 - (char *)v37;
        if (v59)
          memmove(v48 + 6, v37, v59);
        *(_QWORD *)(v4 + 16) = v50;
        *(_QWORD *)(v4 + 24) = (char *)v58 + v59;
        *(_QWORD *)(v4 + 32) = &v41[8 * v89];
        v6 = a2;
        v5 = v88;
        result = v93;
        v11 = v92;
        if (v33)
        {
          operator delete((void *)v33);
          v11 = v92;
          result = v93;
        }
        goto LABEL_74;
      }
      v42 = (char *)v34 - (char *)v37;
      if ((unint64_t)((char *)v34 - (char *)v37) > 0x5F)
      {
        v44 = *(uint64_t **)(v4 + 24);
        v43 = 12;
        goto LABEL_50;
      }
      v43 = v42 >> 3;
      v44 = &v34->i64[12 - (v42 >> 3)];
      v45 = v42 & 0xFFFFFFFFFFFFFFF8;
      v46 = 88 - v45;
      if (88 - v45 >= 0x68)
      {
        v60 = &v94 < (uint64_t *)((char *)v34[6].i64 - v45);
        if (v34 >= (int64x2_t *)&v95 || (v47 = *(uint64_t **)(v4 + 24), !v60))
        {
          v61 = (v46 >> 3) + 1;
          v47 = &v34->i64[v61 & 0x3FFFFFFFFFFFFFFCLL];
          v62 = vdupq_lane_s64(v94, 0);
          v63 = v34 + 1;
          v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63[-1] = v62;
            *v63 = v62;
            v63 += 2;
            v64 -= 4;
          }
          while (v64);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v44;
            if (v34 == (int64x2_t *)v37)
              goto LABEL_74;
LABEL_50:
            v65 = (char *)v44 - (char *)(v37 + 12);
            v66 = v65 >> 3;
            v67 = (int64x2_t *)(v44 - 12);
            v68 = (char *)v44;
            if (v44 - 12 < (uint64_t *)v34)
            {
              v69 = (v35 & 0xFFFFFFFFFFFFFFF8) + v65;
              v70 = v33 + v69 + 8;
              if ((unint64_t)v34 > v70)
                v70 = (unint64_t)v34;
              v71 = v70 + ~v33 - v69;
              if (v71 >= 0x58)
              {
                v72 = (v71 >> 3) + 1;
                v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                v67 = (int64x2_t *)((char *)v67 + v73 * 8);
                v68 = (char *)&v44[v73];
                v74 = v44 + 2;
                v75 = (__int128 *)(v33 + 8 * v66 + 8 * v36 + 16);
                v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v77 = *v75;
                  *(v74 - 1) = *(v75 - 1);
                  *v74 = v77;
                  v74 += 2;
                  v75 += 2;
                  v76 -= 4;
                }
                while (v76);
                if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v68 = (char *)v44;
              }
              do
              {
                v78 = v67->i64[0];
                v67 = (int64x2_t *)((char *)v67 + 8);
                *(_QWORD *)v68 = v78;
                v68 += 8;
              }
              while (v67 < v34);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v68;
            if (v44 != v37 + 12)
            {
              v79 = v43;
              memmove(&v44[-v66], (const void *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8)), v65);
              v43 = v79;
              v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
              v11 = v92;
              result = v93;
            }
            v80 = (const double *)&v94;
            if (v37 <= &v94)
            {
              v81 = 96;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v94)
                v81 = 0;
              v80 = (const double *)((char *)&v94 + v81);
            }
            if (v43 >= 0xA)
            {
              if (v37 >= (uint64_t *)v80 + 1
                || (unint64_t)v80 >= v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8) + 8 * v43)
              {
                v37 += v43 & 0xFFFFFFFFFFFFFFFCLL;
                v82 = v43 & 3;
                v83 = vld1q_dup_f64(v80);
                v84 = (float64x2_t *)(v33 + 8 * v36 + 16);
                v85 = v43 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v84[-1] = v83;
                  *v84 = v83;
                  v84 += 2;
                  v85 -= 4;
                }
                while (v85);
                if (v43 == (v43 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v82 = v43;
              }
            }
            else
            {
              v82 = v43;
            }
            do
            {
              *v37++ = *(_QWORD *)v80;
              --v82;
            }
            while (v82);
LABEL_74:
            v12 = *(_QWORD *)(v4 + 24) - 96;
            v8 = v90;
            v7 = v91;
LABEL_75:
            *(_QWORD *)(result + 8 * v10) = (v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v47 = *(uint64_t **)(v4 + 24);
      }
      do
        *v47++ = v94;
      while (v47 != v44);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E2FBC(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  _OWORD *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  size_t v66;
  BOOL v67;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64x2_t *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  const double *v87;
  uint64_t v88;
  unint64_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  unint64_t v92;
  unint64_t v93;
  int v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v93 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 40;
      v95 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = v93 + 6 * v7;
      v99 = v11;
      v98 = v12;
      v97 = v7;
      while (1)
      {
        v32 = *v6;
        v33 = *((unsigned int *)v6 + 4);
        v34 = *(_QWORD *)(v11 + 8 * v10);
        if (v34 == -1)
          break;
        v13 = (_OWORD *)(*v8 + 8 * v34);
LABEL_9:
        v14 = (__int128 *)(v32 + 8 * (v5 + 4 * v10 + v33 * v12));
        v16 = *v14;
        v15 = v14[1];
        v17 = (__int128 *)((char *)v14 + 8 * v33);
        v19 = *v17;
        v18 = v17[1];
        v20 = &v14[v33];
        v22 = *v20;
        v21 = v20[1];
        v23 = (__int128 *)((char *)v14 + 24 * v33);
        v25 = *v23;
        v24 = v23[1];
        v26 = &v14[2 * v33];
        v28 = *v26;
        v27 = v26[1];
        v29 = (__int128 *)((char *)v14 + 40 * v33);
        v31 = *v29;
        v30 = v29[1];
        *v13 = v16;
        v13[1] = v15;
        v13[2] = v19;
        v13[3] = v18;
        v13[4] = v22;
        v13[5] = v21;
        v13[6] = v25;
        v13[7] = v24;
        v13[8] = v28;
        v13[9] = v27;
        v13[10] = v31;
        v13[11] = v30;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v35 = *(_QWORD *)(v4 + 80);
      if (v35)
      {
        v37 = *(_QWORD *)(v4 + 48);
        v36 = *(_QWORD *)(v4 + 56);
        v38 = ((v36 - v37) << 6) - 1;
        v39 = *(_QWORD *)(v4 + 72);
        if (v36 == v37)
          v38 = 0;
        v13 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v37 + (((unint64_t)(v39 + v35 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v39 + v35 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v35 - 1;
        if ((unint64_t)(v38 - (v35 + v39) + 1) >= 0x400)
        {
          operator delete(*(void **)(v36 - 8));
          v12 = v98;
          v11 = v99;
          result = 40;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v100 = 0;
      v40 = *(_QWORD *)(v4 + 16);
      v41 = *(int64x2_t **)(v4 + 24);
      v42 = (unint64_t)v41 - v40;
      v43 = (uint64_t)((uint64_t)v41->i64 - v40) >> 3;
      v44 = (uint64_t *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8));
      v45 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v45 - (_QWORD)v41) < 0xC0)
      {
        v46 = v43 + 24;
        if ((unint64_t)(v43 + 24) >> 61)
          sub_20E867F44();
        v47 = v45 - v40;
        if (v47 >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        v96 = v46;
        if (v46)
        {
          if (v46 >> 61)
            sub_20E877A38();
          v48 = operator new(8 * v46);
          v43 = (uint64_t)((uint64_t)v41->i64 - v40) >> 3;
        }
        else
        {
          v48 = 0;
        }
        v55 = &v48[8 * v43];
        v55[10] = 0u;
        v55[11] = 0u;
        v55[8] = 0u;
        v55[9] = 0u;
        v55[6] = 0u;
        v55[7] = 0u;
        v55[4] = 0u;
        v55[5] = 0u;
        v55[2] = 0u;
        v55[3] = 0u;
        *v55 = 0u;
        v55[1] = 0u;
        if ((int64x2_t *)v40 == v41)
        {
          v57 = &v48[8 * v43];
        }
        else
        {
          if (v42 - 8 >= 0x68)
          {
            v56 = (char *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8));
            v57 = &v48[8 * v43];
            if (v40 + (v42 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v48[v42 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v58 = ((v42 - 8) >> 3) + 1;
              v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
              v56 = (char *)&v44[v59 / 0xFFFFFFFFFFFFFFF8];
              v57 = (char *)v55 - v59;
              v60 = &v48[8 * v43 - 16];
              v61 = (__int128 *)(v40 + 8 * v43 - 16);
              v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v63 = *v61;
                *(v60 - 1) = *(v61 - 1);
                *v60 = v63;
                v60 -= 2;
                v61 -= 2;
                v62 -= 4;
              }
              while (v62);
              if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v56 = (char *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8));
            v57 = &v48[8 * v43];
          }
          do
          {
            v64 = *((_QWORD *)v56 - 1);
            v56 -= 8;
            *((_QWORD *)v57 - 1) = v64;
            v57 -= 8;
          }
          while (v56 != (char *)v40);
        }
LABEL_39:
        v65 = v55 + 12;
        v66 = (char *)v41 - (char *)v44;
        if (v66)
          memmove(v55 + 12, v44, v66);
        *(_QWORD *)(v4 + 16) = v57;
        *(_QWORD *)(v4 + 24) = (char *)v65 + v66;
        *(_QWORD *)(v4 + 32) = &v48[8 * v96];
        v6 = a2;
        v5 = v95;
        result = 40;
        v11 = v99;
        v12 = v98;
        if (v40)
        {
          operator delete((void *)v40);
          v12 = v98;
          v11 = v99;
          result = 40;
        }
        goto LABEL_74;
      }
      v49 = (char *)v41 - (char *)v44;
      if ((unint64_t)((char *)v41 - (char *)v44) > 0xBF)
      {
        v51 = *(uint64_t **)(v4 + 24);
        v50 = 24;
        goto LABEL_50;
      }
      v50 = v49 >> 3;
      v51 = &v41->i64[24 - (v49 >> 3)];
      v52 = v49 & 0xFFFFFFFFFFFFFFF8;
      v53 = 184 - v52;
      if (184 - v52 >= 0x68)
      {
        v67 = &v100 < (uint64_t *)((char *)v41[12].i64 - v52);
        if (v41 >= (int64x2_t *)&v101 || (v54 = *(uint64_t **)(v4 + 24), !v67))
        {
          v68 = (v53 >> 3) + 1;
          v54 = &v41->i64[v68 & 0x3FFFFFFFFFFFFFFCLL];
          v69 = vdupq_lane_s64(v100, 0);
          v70 = v41 + 1;
          v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70[-1] = v69;
            *v70 = v69;
            v70 += 2;
            v71 -= 4;
          }
          while (v71);
          if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v51;
            if (v41 == (int64x2_t *)v44)
              goto LABEL_74;
LABEL_50:
            v72 = (char *)v51 - (char *)(v44 + 24);
            v73 = v72 >> 3;
            v74 = (int64x2_t *)(v51 - 24);
            v75 = (char *)v51;
            if (v51 - 24 < (uint64_t *)v41)
            {
              v76 = (v42 & 0xFFFFFFFFFFFFFFF8) + v72;
              v77 = v40 + v76 + 8;
              if ((unint64_t)v41 > v77)
                v77 = (unint64_t)v41;
              v78 = v77 + ~v40 - v76;
              if (v78 >= 0x58)
              {
                v79 = (v78 >> 3) + 1;
                v80 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                v74 = (int64x2_t *)((char *)v74 + v80 * 8);
                v75 = (char *)&v51[v80];
                v81 = v51 + 2;
                v82 = (__int128 *)(v40 + 8 * v73 + 8 * v43 + 16);
                v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v84 = *v82;
                  *(v81 - 1) = *(v82 - 1);
                  *v81 = v84;
                  v81 += 2;
                  v82 += 2;
                  v83 -= 4;
                }
                while (v83);
                if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v75 = (char *)v51;
              }
              do
              {
                v85 = v74->i64[0];
                v74 = (int64x2_t *)((char *)v74 + 8);
                *(_QWORD *)v75 = v85;
                v75 += 8;
              }
              while (v74 < v41);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v75;
            if (v51 != v44 + 24)
            {
              v86 = v50;
              memmove(&v51[-v73], (const void *)(v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8)), v72);
              v50 = v86;
              v43 = (uint64_t)((uint64_t)v41->i64 - v40) >> 3;
              v12 = v98;
              v11 = v99;
              result = 40;
            }
            v87 = (const double *)&v100;
            if (v44 <= &v100)
            {
              v88 = 192;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v100)
                v88 = 0;
              v87 = (const double *)((char *)&v100 + v88);
            }
            if (v50 >= 0xA)
            {
              if (v44 >= (uint64_t *)v87 + 1
                || (unint64_t)v87 >= v40 + (((unint64_t)v41 - v40) & 0xFFFFFFFFFFFFFFF8) + 8 * v50)
              {
                v44 += v50 & 0xFFFFFFFFFFFFFFFCLL;
                v89 = v50 & 3;
                v90 = vld1q_dup_f64(v87);
                v91 = (float64x2_t *)(v40 + 8 * v43 + 16);
                v92 = v50 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v91[-1] = v90;
                  *v91 = v90;
                  v91 += 2;
                  v92 -= 4;
                }
                while (v92);
                if (v50 == (v50 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v89 = v50;
              }
            }
            else
            {
              v89 = v50;
            }
            do
            {
              *v44++ = *(_QWORD *)v87;
              --v89;
            }
            while (v89);
LABEL_74:
            v13 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 192);
            v8 = (_QWORD *)(v4 + 16);
            v7 = v97;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v54 = *(uint64_t **)(v4 + 24);
      }
      do
        *v54++ = v100;
      while (v54 != v51);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E35D8(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64x2_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _OWORD *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  size_t v75;
  BOOL v76;
  uint64_t v77;
  int64x2_t v78;
  int64x2_t *v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  int64x2_t *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  const double *v96;
  uint64_t v97;
  unint64_t v98;
  float64x2_t v99;
  float64x2_t *v100;
  unint64_t v101;
  unint64_t v102;
  int v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v102 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 40;
      v104 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = 9 * v7 + v102;
      v108 = v11;
      v107 = v12;
      v106 = v7;
      while (1)
      {
        v41 = *v6;
        v42 = *((unsigned int *)v6 + 4);
        v43 = *(_QWORD *)(v11 + 8 * v10);
        if (v43 == -1)
          break;
        v13 = (_OWORD *)(*v8 + 8 * v43);
LABEL_9:
        v14 = (__int128 *)(v41 + 8 * (v5 + 4 * v10 + v42 * v12));
        v16 = *v14;
        v15 = v14[1];
        v17 = (__int128 *)((char *)v14 + 8 * v42);
        v19 = *v17;
        v18 = v17[1];
        v20 = &v14[v42];
        v22 = *v20;
        v21 = v20[1];
        v23 = (__int128 *)((char *)v14 + 24 * v42);
        v25 = *v23;
        v24 = v23[1];
        v26 = &v14[2 * v42];
        v28 = *v26;
        v27 = v26[1];
        v29 = (__int128 *)((char *)v14 + 40 * v42);
        v31 = *v29;
        v30 = v29[1];
        v32 = &v14[3 * v42];
        v34 = *v32;
        v33 = v32[1];
        v35 = (__int128 *)((char *)v14 + 56 * v42);
        v37 = *v35;
        v36 = v35[1];
        v38 = &v14[4 * v42];
        v40 = *v38;
        v39 = v38[1];
        *v13 = v16;
        v13[1] = v15;
        v13[2] = v19;
        v13[3] = v18;
        v13[4] = v22;
        v13[5] = v21;
        v13[6] = v25;
        v13[7] = v24;
        v13[8] = v28;
        v13[9] = v27;
        v13[10] = v31;
        v13[11] = v30;
        v13[12] = v34;
        v13[13] = v33;
        v13[14] = v37;
        v13[15] = v36;
        v13[16] = v40;
        v13[17] = v39;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v44 = *(_QWORD *)(v4 + 80);
      if (v44)
      {
        v46 = *(_QWORD *)(v4 + 48);
        v45 = *(_QWORD *)(v4 + 56);
        v47 = ((v45 - v46) << 6) - 1;
        v48 = *(_QWORD *)(v4 + 72);
        if (v45 == v46)
          v47 = 0;
        v13 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v46 + (((unint64_t)(v48 + v44 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v48 + v44 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v44 - 1;
        if ((unint64_t)(v47 - (v44 + v48) + 1) >= 0x400)
        {
          operator delete(*(void **)(v45 - 8));
          v12 = v107;
          v11 = v108;
          result = 40;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v109 = 0;
      v49 = *(_QWORD *)(v4 + 16);
      v50 = *(int64x2_t **)(v4 + 24);
      v51 = (unint64_t)v50 - v49;
      v52 = (uint64_t)((uint64_t)v50->i64 - v49) >> 3;
      v53 = (uint64_t *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8));
      v54 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v54 - (_QWORD)v50) < 0x120)
      {
        v55 = v52 + 36;
        if ((unint64_t)(v52 + 36) >> 61)
          sub_20E867F44();
        v56 = v54 - v49;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        v105 = v55;
        if (v55)
        {
          if (v55 >> 61)
            sub_20E877A38();
          v57 = operator new(8 * v55);
          v52 = (uint64_t)((uint64_t)v50->i64 - v49) >> 3;
        }
        else
        {
          v57 = 0;
        }
        v64 = &v57[8 * v52];
        v64[16] = 0u;
        v64[17] = 0u;
        v64[14] = 0u;
        v64[15] = 0u;
        v64[12] = 0u;
        v64[13] = 0u;
        v64[10] = 0u;
        v64[11] = 0u;
        v64[8] = 0u;
        v64[9] = 0u;
        v64[6] = 0u;
        v64[7] = 0u;
        v64[4] = 0u;
        v64[5] = 0u;
        v64[2] = 0u;
        v64[3] = 0u;
        *v64 = 0u;
        v64[1] = 0u;
        if ((int64x2_t *)v49 == v50)
        {
          v66 = &v57[8 * v52];
        }
        else
        {
          if (v51 - 8 >= 0x68)
          {
            v65 = (char *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8));
            v66 = &v57[8 * v52];
            if (v49 + (v51 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v57[v51 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v67 = ((v51 - 8) >> 3) + 1;
              v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
              v65 = (char *)&v53[v68 / 0xFFFFFFFFFFFFFFF8];
              v66 = (char *)v64 - v68;
              v69 = &v57[8 * v52 - 16];
              v70 = (__int128 *)(v49 + 8 * v52 - 16);
              v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v72 = *v70;
                *(v69 - 1) = *(v70 - 1);
                *v69 = v72;
                v69 -= 2;
                v70 -= 2;
                v71 -= 4;
              }
              while (v71);
              if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v65 = (char *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8));
            v66 = &v57[8 * v52];
          }
          do
          {
            v73 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            *((_QWORD *)v66 - 1) = v73;
            v66 -= 8;
          }
          while (v65 != (char *)v49);
        }
LABEL_39:
        v74 = v64 + 18;
        v75 = (char *)v50 - (char *)v53;
        if (v75)
          memmove(v64 + 18, v53, v75);
        *(_QWORD *)(v4 + 16) = v66;
        *(_QWORD *)(v4 + 24) = (char *)v74 + v75;
        *(_QWORD *)(v4 + 32) = &v57[8 * v105];
        v6 = a2;
        v5 = v104;
        result = 40;
        v11 = v108;
        v12 = v107;
        if (v49)
        {
          operator delete((void *)v49);
          v12 = v107;
          v11 = v108;
          result = 40;
        }
        goto LABEL_74;
      }
      v58 = (char *)v50 - (char *)v53;
      if ((unint64_t)((char *)v50 - (char *)v53) > 0x11F)
      {
        v60 = *(uint64_t **)(v4 + 24);
        v59 = 36;
        goto LABEL_50;
      }
      v59 = v58 >> 3;
      v60 = &v50->i64[36 - (v58 >> 3)];
      v61 = v58 & 0xFFFFFFFFFFFFFFF8;
      v62 = 280 - v61;
      if (280 - v61 >= 0x68)
      {
        v76 = &v109 < (uint64_t *)((char *)v50[18].i64 - v61);
        if (v50 >= (int64x2_t *)&v110 || (v63 = *(uint64_t **)(v4 + 24), !v76))
        {
          v77 = (v62 >> 3) + 1;
          v63 = &v50->i64[v77 & 0x3FFFFFFFFFFFFFFCLL];
          v78 = vdupq_lane_s64(v109, 0);
          v79 = v50 + 1;
          v80 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79[-1] = v78;
            *v79 = v78;
            v79 += 2;
            v80 -= 4;
          }
          while (v80);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v60;
            if (v50 == (int64x2_t *)v53)
              goto LABEL_74;
LABEL_50:
            v81 = (char *)v60 - (char *)(v53 + 36);
            v82 = v81 >> 3;
            v83 = (int64x2_t *)(v60 - 36);
            v84 = (char *)v60;
            if (v60 - 36 < (uint64_t *)v50)
            {
              v85 = (v51 & 0xFFFFFFFFFFFFFFF8) + v81;
              v86 = v49 + v85 + 8;
              if ((unint64_t)v50 > v86)
                v86 = (unint64_t)v50;
              v87 = v86 + ~v49 - v85;
              if (v87 >= 0x58)
              {
                v88 = (v87 >> 3) + 1;
                v89 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                v83 = (int64x2_t *)((char *)v83 + v89 * 8);
                v84 = (char *)&v60[v89];
                v90 = v60 + 2;
                v91 = (__int128 *)(v49 + 8 * v82 + 8 * v52 + 16);
                v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v93 = *v91;
                  *(v90 - 1) = *(v91 - 1);
                  *v90 = v93;
                  v90 += 2;
                  v91 += 2;
                  v92 -= 4;
                }
                while (v92);
                if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v84 = (char *)v60;
              }
              do
              {
                v94 = v83->i64[0];
                v83 = (int64x2_t *)((char *)v83 + 8);
                *(_QWORD *)v84 = v94;
                v84 += 8;
              }
              while (v83 < v50);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v84;
            if (v60 != v53 + 36)
            {
              v95 = v59;
              memmove(&v60[-v82], (const void *)(v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8)), v81);
              v59 = v95;
              v52 = (uint64_t)((uint64_t)v50->i64 - v49) >> 3;
              v12 = v107;
              v11 = v108;
              result = 40;
            }
            v96 = (const double *)&v109;
            if (v53 <= &v109)
            {
              v97 = 288;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v109)
                v97 = 0;
              v96 = (const double *)((char *)&v109 + v97);
            }
            if (v59 >= 0xA)
            {
              if (v53 >= (uint64_t *)v96 + 1
                || (unint64_t)v96 >= v49 + (((unint64_t)v50 - v49) & 0xFFFFFFFFFFFFFFF8) + 8 * v59)
              {
                v53 += v59 & 0xFFFFFFFFFFFFFFFCLL;
                v98 = v59 & 3;
                v99 = vld1q_dup_f64(v96);
                v100 = (float64x2_t *)(v49 + 8 * v52 + 16);
                v101 = v59 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v100[-1] = v99;
                  *v100 = v99;
                  v100 += 2;
                  v101 -= 4;
                }
                while (v101);
                if (v59 == (v59 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v98 = v59;
              }
            }
            else
            {
              v98 = v59;
            }
            do
            {
              *v53++ = *(_QWORD *)v96;
              --v98;
            }
            while (v98);
LABEL_74:
            v13 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 288);
            v8 = (_QWORD *)(v4 + 16);
            v7 = v106;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v63 = *(uint64_t **)(v4 + 24);
      }
      do
        *v63++ = v109;
      while (v63 != v60);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E3C4C(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _OWORD *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _OWORD *v55;
  size_t v56;
  BOOL v57;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  int64x2_t *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  const double *v77;
  uint64_t v78;
  unint64_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  unint64_t v82;
  unint64_t v83;
  int v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v83 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v85 = a3;
      v87 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      result = (3 * v7 + v83);
      v90 = 3 * v7 + v83;
      v88 = v11;
      v89 = v7;
      while (1)
      {
        v22 = *v6;
        v23 = *((unsigned int *)v6 + 4);
        v24 = *(_QWORD *)(v11 + 8 * v10);
        if (v24 == -1)
          break;
        v12 = (_OWORD *)(*v8 + 8 * v24);
LABEL_9:
        v13 = (__int128 *)(v22 + 8 * (v5 + 4 * v10 + v23 * result));
        v15 = *v13;
        v14 = v13[1];
        v16 = (__int128 *)((char *)v13 + 8 * v23);
        v18 = *v16;
        v17 = v16[1];
        v19 = &v13[v23];
        v21 = *v19;
        v20 = v19[1];
        *v12 = v15;
        v12[1] = v14;
        v12[2] = v18;
        v12[3] = v17;
        v12[4] = v21;
        v12[5] = v20;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v25 = *(_QWORD *)(v4 + 80);
      if (v25)
      {
        v27 = *(_QWORD *)(v4 + 48);
        v26 = *(_QWORD *)(v4 + 56);
        v28 = ((v26 - v27) << 6) - 1;
        v29 = *(_QWORD *)(v4 + 72);
        if (v26 == v27)
          v28 = 0;
        v12 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v27 + (((unint64_t)(v29 + v25 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v29 + v25 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v25 - 1;
        if ((unint64_t)(v28 - (v25 + v29) + 1) >= 0x400)
        {
          operator delete(*(void **)(v26 - 8));
          result = v90;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v91 = 0;
      v30 = *(_QWORD *)(v4 + 16);
      v31 = *(int64x2_t **)(v4 + 24);
      v32 = (unint64_t)v31 - v30;
      v33 = (uint64_t)((uint64_t)v31->i64 - v30) >> 3;
      v34 = (uint64_t *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
      v35 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v35 - (_QWORD)v31) < 0x60)
      {
        v36 = v33 + 12;
        if ((unint64_t)(v33 + 12) >> 61)
          sub_20E867F44();
        v37 = v35 - v30;
        if (v37 >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        v86 = v36;
        if (v36)
        {
          if (v36 >> 61)
            sub_20E877A38();
          v38 = operator new(8 * v36);
          v33 = (uint64_t)((uint64_t)v31->i64 - v30) >> 3;
        }
        else
        {
          v38 = 0;
        }
        v45 = &v38[8 * v33];
        v45[4] = 0u;
        v45[5] = 0u;
        v45[2] = 0u;
        v45[3] = 0u;
        *v45 = 0u;
        v45[1] = 0u;
        if ((int64x2_t *)v30 == v31)
        {
          v47 = &v38[8 * v33];
        }
        else
        {
          if (v32 - 8 >= 0x68)
          {
            v46 = (char *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
            v47 = &v38[8 * v33];
            if (v30 + (v32 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v38[v32 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v48 = ((v32 - 8) >> 3) + 1;
              v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = (char *)&v34[v49 / 0xFFFFFFFFFFFFFFF8];
              v47 = (char *)v45 - v49;
              v50 = &v38[8 * v33 - 16];
              v51 = (__int128 *)(v30 + 8 * v33 - 16);
              v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v53 = *v51;
                *(v50 - 1) = *(v51 - 1);
                *v50 = v53;
                v50 -= 2;
                v51 -= 2;
                v52 -= 4;
              }
              while (v52);
              if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v46 = (char *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
            v47 = &v38[8 * v33];
          }
          do
          {
            v54 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *((_QWORD *)v47 - 1) = v54;
            v47 -= 8;
          }
          while (v46 != (char *)v30);
        }
LABEL_39:
        v55 = v45 + 6;
        v56 = (char *)v31 - (char *)v34;
        if (v56)
          memmove(v45 + 6, v34, v56);
        *(_QWORD *)(v4 + 16) = v47;
        *(_QWORD *)(v4 + 24) = (char *)v55 + v56;
        *(_QWORD *)(v4 + 32) = &v38[8 * v86];
        v6 = a2;
        v5 = v85;
        result = v90;
        if (v30)
        {
          operator delete((void *)v30);
          result = v90;
        }
        goto LABEL_74;
      }
      v39 = (char *)v31 - (char *)v34;
      if ((unint64_t)((char *)v31 - (char *)v34) > 0x5F)
      {
        v41 = *(uint64_t **)(v4 + 24);
        v40 = 12;
        goto LABEL_50;
      }
      v40 = v39 >> 3;
      v41 = &v31->i64[12 - (v39 >> 3)];
      v42 = v39 & 0xFFFFFFFFFFFFFFF8;
      v43 = 88 - v42;
      if (88 - v42 >= 0x68)
      {
        v57 = &v91 < (uint64_t *)((char *)v31[6].i64 - v42);
        if (v31 >= (int64x2_t *)&v92 || (v44 = *(uint64_t **)(v4 + 24), !v57))
        {
          v58 = (v43 >> 3) + 1;
          v44 = &v31->i64[v58 & 0x3FFFFFFFFFFFFFFCLL];
          v59 = vdupq_lane_s64(v91, 0);
          v60 = v31 + 1;
          v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v60[-1] = v59;
            *v60 = v59;
            v60 += 2;
            v61 -= 4;
          }
          while (v61);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v41;
            if (v31 == (int64x2_t *)v34)
              goto LABEL_74;
LABEL_50:
            v62 = (char *)v41 - (char *)(v34 + 12);
            v63 = v62 >> 3;
            v64 = (int64x2_t *)(v41 - 12);
            v65 = (char *)v41;
            if (v41 - 12 < (uint64_t *)v31)
            {
              v66 = (v32 & 0xFFFFFFFFFFFFFFF8) + v62;
              v67 = v30 + v66 + 8;
              if ((unint64_t)v31 > v67)
                v67 = (unint64_t)v31;
              v68 = v67 + ~v30 - v66;
              if (v68 >= 0x58)
              {
                v69 = (v68 >> 3) + 1;
                v70 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                v64 = (int64x2_t *)((char *)v64 + v70 * 8);
                v65 = (char *)&v41[v70];
                v71 = v41 + 2;
                v72 = (__int128 *)(v30 + 8 * v63 + 8 * v33 + 16);
                v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v74 = *v72;
                  *(v71 - 1) = *(v72 - 1);
                  *v71 = v74;
                  v71 += 2;
                  v72 += 2;
                  v73 -= 4;
                }
                while (v73);
                if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v65 = (char *)v41;
              }
              do
              {
                v75 = v64->i64[0];
                v64 = (int64x2_t *)((char *)v64 + 8);
                *(_QWORD *)v65 = v75;
                v65 += 8;
              }
              while (v64 < v31);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v65;
            if (v41 != v34 + 12)
            {
              v76 = v40;
              memmove(&v41[-v63], (const void *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8)), v62);
              v40 = v76;
              v33 = (uint64_t)((uint64_t)v31->i64 - v30) >> 3;
              result = v90;
            }
            v77 = (const double *)&v91;
            if (v34 <= &v91)
            {
              v78 = 96;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v91)
                v78 = 0;
              v77 = (const double *)((char *)&v91 + v78);
            }
            if (v40 >= 0xA)
            {
              if (v34 >= (uint64_t *)v77 + 1
                || (unint64_t)v77 >= v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8) + 8 * v40)
              {
                v34 += v40 & 0xFFFFFFFFFFFFFFFCLL;
                v79 = v40 & 3;
                v80 = vld1q_dup_f64(v77);
                v81 = (float64x2_t *)(v30 + 8 * v33 + 16);
                v82 = v40 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v81[-1] = v80;
                  *v81 = v80;
                  v81 += 2;
                  v82 -= 4;
                }
                while (v82);
                if (v40 == (v40 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v79 = v40;
              }
            }
            else
            {
              v79 = v40;
            }
            do
            {
              *v34++ = *(_QWORD *)v77;
              --v79;
            }
            while (v79);
LABEL_74:
            v12 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 96);
            v11 = v88;
            v7 = v89;
            v8 = v87;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v44 = *(uint64_t **)(v4 + 24);
      }
      do
        *v44++ = v91;
      while (v44 != v41);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E420C(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _OWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  size_t v49;
  BOOL v50;
  uint64_t v51;
  int64x2_t v52;
  int64x2_t *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  int64x2_t *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  unint64_t v74;
  unint64_t v75;
  int v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v75 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v77 = a3;
      v79 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      result = (v7 + v75);
      v82 = v7 + v75;
      v80 = v11;
      v81 = v7;
      while (1)
      {
        v15 = *v6;
        v16 = *((_DWORD *)v6 + 4);
        v17 = *(_QWORD *)(v11 + 8 * v10);
        if (v17 == -1)
          break;
        v12 = (_OWORD *)(*v8 + 8 * v17);
LABEL_9:
        v13 = (_OWORD *)(v15 + 8 * (v5 + 4 * v10 + v16 * result));
        v14 = v13[1];
        *v12 = *v13;
        v12[1] = v14;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v18 = *(_QWORD *)(v4 + 80);
      if (v18)
      {
        v20 = *(_QWORD *)(v4 + 48);
        v19 = *(_QWORD *)(v4 + 56);
        v21 = ((v19 - v20) << 6) - 1;
        v22 = *(_QWORD *)(v4 + 72);
        if (v19 == v20)
          v21 = 0;
        v12 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v20 + (((unint64_t)(v22 + v18 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v22 + v18 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v18 - 1;
        if ((unint64_t)(v21 - (v18 + v22) + 1) >= 0x400)
        {
          operator delete(*(void **)(v19 - 8));
          result = v82;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_72;
      }
      v83 = 0;
      v23 = *(_QWORD *)(v4 + 16);
      v24 = *(int64x2_t **)(v4 + 24);
      v25 = (unint64_t)v24 - v23;
      v26 = (uint64_t)((uint64_t)v24->i64 - v23) >> 3;
      v27 = (uint64_t *)(v23 + (((unint64_t)v24 - v23) & 0xFFFFFFFFFFFFFFF8));
      v28 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v28 - (_QWORD)v24) < 0x20)
      {
        v29 = v26 + 4;
        if ((unint64_t)(v26 + 4) >> 61)
          sub_20E867F44();
        v30 = v28 - v23;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        v78 = v29;
        if (v29)
        {
          if (v29 >> 61)
            sub_20E877A38();
          v31 = operator new(8 * v29);
          v26 = (uint64_t)((uint64_t)v24->i64 - v23) >> 3;
          v32 = &v31[8 * v26];
          *v32 = 0u;
          v32[1] = 0u;
          if ((int64x2_t *)v23 != v24)
            goto LABEL_25;
        }
        else
        {
          v31 = 0;
          v32 = (_OWORD *)(8 * v26);
          *v32 = 0u;
          v32[1] = 0u;
          if ((int64x2_t *)v23 != v24)
          {
LABEL_25:
            if (v25 - 8 >= 0x68)
            {
              v33 = (char *)(v23 + (((unint64_t)v24 - v23) & 0xFFFFFFFFFFFFFFF8));
              v34 = (char *)v32;
              if (v23 + (v25 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v31[v25 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v41 = ((v25 - 8) >> 3) + 1;
                v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
                v33 = (char *)&v27[v42 / 0xFFFFFFFFFFFFFFF8];
                v34 = (char *)v32 - v42;
                v43 = &v31[8 * v26 - 16];
                v44 = (__int128 *)(v23 + 8 * v26 - 16);
                v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v46 = *v44;
                  *(v43 - 1) = *(v44 - 1);
                  *v43 = v46;
                  v43 -= 2;
                  v44 -= 2;
                  v45 -= 4;
                }
                while (v45);
                if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_38;
              }
            }
            else
            {
              v33 = (char *)(v23 + (((unint64_t)v24 - v23) & 0xFFFFFFFFFFFFFFF8));
              v34 = (char *)v32;
            }
            do
            {
              v47 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *((_QWORD *)v34 - 1) = v47;
              v34 -= 8;
            }
            while (v33 != (char *)v23);
LABEL_38:
            v48 = v32 + 2;
            v49 = (char *)v24 - (char *)v27;
            if (v49)
              memmove(v32 + 2, v27, v49);
            *(_QWORD *)(v4 + 16) = v34;
            *(_QWORD *)(v4 + 24) = (char *)v48 + v49;
            *(_QWORD *)(v4 + 32) = &v31[8 * v78];
            v6 = a2;
            v5 = v77;
            result = v82;
            if (v23)
            {
              operator delete((void *)v23);
              result = v82;
            }
            goto LABEL_71;
          }
        }
        v34 = (char *)v32;
        goto LABEL_38;
      }
      v35 = (char *)v24 - (char *)v27;
      if ((unint64_t)((char *)v24 - (char *)v27) > 0x1F)
      {
        v37 = *(uint64_t **)(v4 + 24);
        v36 = 4;
        goto LABEL_49;
      }
      v36 = v35 >> 3;
      v37 = &v24->i64[4 - (v35 >> 3)];
      v38 = v35 & 0xFFFFFFFFFFFFFFF8;
      v39 = 24 - v38;
      if (24 - v38 >= 0x68)
      {
        v50 = &v83 < (uint64_t *)((char *)v24[2].i64 - v38);
        if (v24 >= (int64x2_t *)&v84 || (v40 = *(uint64_t **)(v4 + 24), !v50))
        {
          v51 = (v39 >> 3) + 1;
          v40 = &v24->i64[v51 & 0x3FFFFFFFFFFFFFFCLL];
          v52 = vdupq_lane_s64(v83, 0);
          v53 = v24 + 1;
          v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53[-1] = v52;
            *v53 = v52;
            v53 += 2;
            v54 -= 4;
          }
          while (v54);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            *(_QWORD *)(v4 + 24) = v37;
            if (v24 == (int64x2_t *)v27)
              goto LABEL_71;
LABEL_49:
            v55 = (char *)v37 - (char *)(v27 + 4);
            v56 = v55 >> 3;
            v57 = (int64x2_t *)(v37 - 4);
            v58 = (char *)v37;
            if (v37 - 4 < (uint64_t *)v24)
            {
              v59 = (v25 & 0xFFFFFFFFFFFFFFF8) + v55;
              v60 = v23 + v59 + 8;
              if ((unint64_t)v24 > v60)
                v60 = (unint64_t)v24;
              v61 = v60 + ~v23 - v59;
              if (v61 >= 0x58)
              {
                v62 = (v61 >> 3) + 1;
                v63 = v62 & 0x3FFFFFFFFFFFFFFCLL;
                v57 = (int64x2_t *)((char *)v57 + v63 * 8);
                v58 = (char *)&v37[v63];
                v64 = v37 + 2;
                v65 = (__int128 *)(v23 + 8 * v56 + 8 * v26 + 16);
                v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v67 = *v65;
                  *(v64 - 1) = *(v65 - 1);
                  *v64 = v67;
                  v64 += 2;
                  v65 += 2;
                  v66 -= 4;
                }
                while (v66);
                if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_58;
              }
              else
              {
                v58 = (char *)v37;
              }
              do
              {
                v68 = v57->i64[0];
                v57 = (int64x2_t *)((char *)v57 + 8);
                *(_QWORD *)v58 = v68;
                v58 += 8;
              }
              while (v57 < v24);
            }
LABEL_58:
            *(_QWORD *)(v4 + 24) = v58;
            if (v37 != v27 + 4)
            {
              v69 = v36;
              memmove(&v37[-v56], (const void *)(v23 + (((unint64_t)v24 - v23) & 0xFFFFFFFFFFFFFFF8)), v55);
              v36 = v69;
              v26 = (uint64_t)((uint64_t)v24->i64 - v23) >> 3;
              result = v82;
            }
            v70 = &v83;
            if (v27 <= &v83)
              v70 = &v83 + 4 * (*(_QWORD *)(v4 + 24) > (unint64_t)&v83);
            if (v36 >= 0xA)
            {
              if (v27 >= v70 + 1
                || (unint64_t)v70 >= v23 + (((unint64_t)v24 - v23) & 0xFFFFFFFFFFFFFFF8) + 8 * v36)
              {
                v27 += v36 & 0xFFFFFFFFFFFFFFFCLL;
                v71 = v36 & 3;
                v72 = vld1q_dup_f64((const double *)v70);
                v73 = (float64x2_t *)(v23 + 8 * v26 + 16);
                v74 = v36 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v73[-1] = v72;
                  *v73 = v72;
                  v73 += 2;
                  v74 -= 4;
                }
                while (v74);
                if (v36 == (v36 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_71;
              }
              else
              {
                v71 = v36;
              }
            }
            else
            {
              v71 = v36;
            }
            do
            {
              *v27++ = *v70;
              --v71;
            }
            while (v71);
LABEL_71:
            v12 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 32);
            v11 = v80;
            v7 = v81;
            v8 = v79;
LABEL_72:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v40 = *(uint64_t **)(v4 + 24);
      }
      do
        *v40++ = v83;
      while (v40 != v37);
      goto LABEL_48;
    }
  }
  return result;
}

uint64_t sub_20F8E47B4(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _OWORD *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  size_t v59;
  BOOL v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64x2_t *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  float64x2_t v82;
  float64x2_t *v83;
  unint64_t v84;
  unint64_t v85;
  int v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v85 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v87 = a3;
      v89 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = v85 + 4 * v7;
      v92 = result;
      v91 = v11;
      v90 = v7;
      while (1)
      {
        v25 = *v6;
        v26 = *((unsigned int *)v6 + 4);
        v27 = *(_QWORD *)(result + 8 * v10);
        if (v27 == -1)
          break;
        v12 = (_OWORD *)(*v8 + 8 * v27);
LABEL_9:
        v13 = (__int128 *)(v25 + 8 * (v5 + 4 * v10 + v26 * v11));
        v15 = *v13;
        v14 = v13[1];
        v16 = (__int128 *)((char *)v13 + 8 * v26);
        v18 = *v16;
        v17 = v16[1];
        v19 = &v13[v26];
        v21 = *v19;
        v20 = v19[1];
        v22 = (__int128 *)((char *)v13 + 24 * v26);
        v24 = *v22;
        v23 = v22[1];
        *v12 = v15;
        v12[1] = v14;
        v12[2] = v18;
        v12[3] = v17;
        v12[4] = v21;
        v12[5] = v20;
        v12[6] = v24;
        v12[7] = v23;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v28 = *(_QWORD *)(v4 + 80);
      if (v28)
      {
        v30 = *(_QWORD *)(v4 + 48);
        v29 = *(_QWORD *)(v4 + 56);
        v31 = ((v29 - v30) << 6) - 1;
        v32 = *(_QWORD *)(v4 + 72);
        if (v29 == v30)
          v31 = 0;
        v12 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(v32 + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v32 + v28 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v28 - 1;
        if ((unint64_t)(v31 - (v28 + v32) + 1) >= 0x400)
        {
          operator delete(*(void **)(v29 - 8));
          v11 = v91;
          result = v92;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_73;
      }
      v93 = 0;
      v33 = *(_QWORD *)(v4 + 16);
      v34 = *(int64x2_t **)(v4 + 24);
      v35 = (unint64_t)v34 - v33;
      v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
      v37 = (uint64_t *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
      v38 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v38 - (_QWORD)v34) < 0x80)
      {
        v39 = v36 + 16;
        if ((unint64_t)(v36 + 16) >> 61)
          sub_20E867F44();
        v40 = v38 - v33;
        if (v40 >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        v88 = v39;
        if (v39)
        {
          if (v39 >> 61)
            sub_20E877A38();
          v41 = operator new(8 * v39);
          v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
        }
        else
        {
          v41 = 0;
        }
        v48 = &v41[8 * v36];
        v48[6] = 0u;
        v48[7] = 0u;
        v48[4] = 0u;
        v48[5] = 0u;
        v48[2] = 0u;
        v48[3] = 0u;
        *v48 = 0u;
        v48[1] = 0u;
        if ((int64x2_t *)v33 == v34)
        {
          v50 = &v41[8 * v36];
        }
        else
        {
          if (v35 - 8 >= 0x68)
          {
            v49 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v50 = &v41[8 * v36];
            if (v33 + (v35 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v41[v35 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v51 = ((v35 - 8) >> 3) + 1;
              v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
              v49 = (char *)&v37[v52 / 0xFFFFFFFFFFFFFFF8];
              v50 = (char *)v48 - v52;
              v53 = &v41[8 * v36 - 16];
              v54 = (__int128 *)(v33 + 8 * v36 - 16);
              v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v56 = *v54;
                *(v53 - 1) = *(v54 - 1);
                *v53 = v56;
                v53 -= 2;
                v54 -= 2;
                v55 -= 4;
              }
              while (v55);
              if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v49 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v50 = &v41[8 * v36];
          }
          do
          {
            v57 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v50 - 1) = v57;
            v50 -= 8;
          }
          while (v49 != (char *)v33);
        }
LABEL_39:
        v58 = v48 + 8;
        v59 = (char *)v34 - (char *)v37;
        if (v59)
          memmove(v48 + 8, v37, v59);
        *(_QWORD *)(v4 + 16) = v50;
        *(_QWORD *)(v4 + 24) = (char *)v58 + v59;
        *(_QWORD *)(v4 + 32) = &v41[8 * v88];
        v6 = a2;
        v5 = v87;
        result = v92;
        v11 = v91;
        if (v33)
        {
          operator delete((void *)v33);
          v11 = v91;
          result = v92;
        }
        goto LABEL_72;
      }
      v42 = (char *)v34 - (char *)v37;
      if ((unint64_t)((char *)v34 - (char *)v37) > 0x7F)
      {
        v44 = *(uint64_t **)(v4 + 24);
        v43 = 16;
        goto LABEL_50;
      }
      v43 = v42 >> 3;
      v44 = &v34->i64[16 - (v42 >> 3)];
      v45 = v42 & 0xFFFFFFFFFFFFFFF8;
      v46 = 120 - v45;
      if (120 - v45 >= 0x68)
      {
        v60 = &v93 < (uint64_t *)((char *)v34[8].i64 - v45);
        if (v34 >= (int64x2_t *)&v94 || (v47 = *(uint64_t **)(v4 + 24), !v60))
        {
          v61 = (v46 >> 3) + 1;
          v47 = &v34->i64[v61 & 0x3FFFFFFFFFFFFFFCLL];
          v62 = vdupq_lane_s64(v93, 0);
          v63 = v34 + 1;
          v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63[-1] = v62;
            *v63 = v62;
            v63 += 2;
            v64 -= 4;
          }
          while (v64);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v44;
            if (v34 == (int64x2_t *)v37)
              goto LABEL_72;
LABEL_50:
            v65 = (char *)v44 - (char *)(v37 + 16);
            v66 = v65 >> 3;
            v67 = (int64x2_t *)(v44 - 16);
            v68 = (char *)v44;
            if (v44 - 16 < (uint64_t *)v34)
            {
              v69 = (v35 & 0xFFFFFFFFFFFFFFF8) + v65;
              v70 = v33 + v69 + 8;
              if ((unint64_t)v34 > v70)
                v70 = (unint64_t)v34;
              v71 = v70 + ~v33 - v69;
              if (v71 >= 0x58)
              {
                v72 = (v71 >> 3) + 1;
                v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                v67 = (int64x2_t *)((char *)v67 + v73 * 8);
                v68 = (char *)&v44[v73];
                v74 = v44 + 2;
                v75 = (__int128 *)(v33 + 8 * v66 + 8 * v36 + 16);
                v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v77 = *v75;
                  *(v74 - 1) = *(v75 - 1);
                  *v74 = v77;
                  v74 += 2;
                  v75 += 2;
                  v76 -= 4;
                }
                while (v76);
                if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v68 = (char *)v44;
              }
              do
              {
                v78 = v67->i64[0];
                v67 = (int64x2_t *)((char *)v67 + 8);
                *(_QWORD *)v68 = v78;
                v68 += 8;
              }
              while (v67 < v34);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v68;
            if (v44 != v37 + 16)
            {
              v79 = v43;
              memmove(&v44[-v66], (const void *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8)), v65);
              v43 = v79;
              v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
              v11 = v91;
              result = v92;
            }
            v80 = &v93;
            if (v37 <= &v93)
              v80 = &v93 + 16 * (unint64_t)(*(_QWORD *)(v4 + 24) > (unint64_t)&v93);
            if (v43 >= 0xA)
            {
              if (v37 >= v80 + 1
                || (unint64_t)v80 >= v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8) + 8 * v43)
              {
                v37 += v43 & 0xFFFFFFFFFFFFFFFCLL;
                v81 = v43 & 3;
                v82 = vld1q_dup_f64((const double *)v80);
                v83 = (float64x2_t *)(v33 + 8 * v36 + 16);
                v84 = v43 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v83[-1] = v82;
                  *v83 = v82;
                  v83 += 2;
                  v84 -= 4;
                }
                while (v84);
                if (v43 == (v43 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_72;
              }
              else
              {
                v81 = v43;
              }
            }
            else
            {
              v81 = v43;
            }
            do
            {
              *v37++ = *v80;
              --v81;
            }
            while (v81);
LABEL_72:
            v12 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 128);
            v8 = v89;
            v7 = v90;
LABEL_73:
            *(_QWORD *)(result + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v47 = *(uint64_t **)(v4 + 24);
      }
      do
        *v47++ = v93;
      while (v47 != v44);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E4D94(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _OWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _OWORD *v53;
  size_t v54;
  BOOL v55;
  uint64_t v56;
  int64x2_t v57;
  int64x2_t *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  int64x2_t *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  const double *v75;
  uint64_t v76;
  unint64_t v77;
  float64x2_t v78;
  float64x2_t *v79;
  unint64_t v80;
  unint64_t v81;
  int v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v81 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 24;
      v83 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = v81 + 6 * v7;
      v87 = v11;
      v86 = v12;
      v85 = v7;
      while (1)
      {
        v20 = *v6;
        v21 = *((unsigned int *)v6 + 4);
        v22 = *(_QWORD *)(v11 + 8 * v10);
        if (v22 == -1)
          break;
        v13 = (_QWORD *)(*v8 + 8 * v22);
LABEL_9:
        v14 = (_QWORD *)(v20 + 8 * (v10 + v5 + v21 * v12));
        v15 = v14[v21];
        v16 = v14[2 * v21];
        v17 = v14[3 * v21];
        v18 = v14[4 * v21];
        v19 = v14[5 * v21];
        *v13 = *v14;
        v13[1] = v15;
        v13[2] = v16;
        v13[3] = v17;
        v13[4] = v18;
        v13[5] = v19;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v23 = *(_QWORD *)(v4 + 80);
      if (v23)
      {
        v25 = *(_QWORD *)(v4 + 48);
        v24 = *(_QWORD *)(v4 + 56);
        v26 = ((v24 - v25) << 6) - 1;
        v27 = *(_QWORD *)(v4 + 72);
        if (v24 == v25)
          v26 = 0;
        v13 = (_QWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v25 + (((unint64_t)(v27 + v23 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v27 + v23 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v23 - 1;
        if ((unint64_t)(v26 - (v23 + v27) + 1) >= 0x400)
        {
          operator delete(*(void **)(v24 - 8));
          v12 = v86;
          v11 = v87;
          result = 24;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_74;
      }
      v88 = 0;
      v28 = *(_QWORD *)(v4 + 16);
      v29 = *(int64x2_t **)(v4 + 24);
      v30 = (unint64_t)v29 - v28;
      v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
      v32 = (uint64_t *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
      v33 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v33 - (_QWORD)v29) < 0x30)
      {
        v34 = v31 + 6;
        if ((unint64_t)(v31 + 6) >> 61)
          sub_20E867F44();
        v35 = v33 - v28;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        v84 = v34;
        if (v34)
        {
          if (v34 >> 61)
            sub_20E877A38();
          v36 = operator new(8 * v34);
          v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
          v37 = &v36[8 * v31];
          v37[1] = 0u;
          v37[2] = 0u;
          *v37 = 0u;
          if ((int64x2_t *)v28 != v29)
            goto LABEL_25;
        }
        else
        {
          v36 = 0;
          v37 = (_OWORD *)(8 * v31);
          v37[1] = 0u;
          v37[2] = 0u;
          *v37 = 0u;
          if ((int64x2_t *)v28 != v29)
          {
LABEL_25:
            if (v30 - 8 >= 0x68)
            {
              v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
              v39 = (char *)v37;
              if (v28 + (v30 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v36[v30 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v46 = ((v30 - 8) >> 3) + 1;
                v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
                v38 = (char *)&v32[v47 / 0xFFFFFFFFFFFFFFF8];
                v39 = (char *)v37 - v47;
                v48 = &v36[8 * v31 - 16];
                v49 = (__int128 *)(v28 + 8 * v31 - 16);
                v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v51 = *v49;
                  *(v48 - 1) = *(v49 - 1);
                  *v48 = v51;
                  v48 -= 2;
                  v49 -= 2;
                  v50 -= 4;
                }
                while (v50);
                if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_38;
              }
            }
            else
            {
              v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
              v39 = (char *)v37;
            }
            do
            {
              v52 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v39 - 1) = v52;
              v39 -= 8;
            }
            while (v38 != (char *)v28);
LABEL_38:
            v53 = v37 + 3;
            v54 = (char *)v29 - (char *)v32;
            if (v54)
              memmove(v37 + 3, v32, v54);
            *(_QWORD *)(v4 + 16) = v39;
            *(_QWORD *)(v4 + 24) = (char *)v53 + v54;
            *(_QWORD *)(v4 + 32) = &v36[8 * v84];
            v6 = a2;
            v5 = v83;
            result = 24;
            v11 = v87;
            v12 = v86;
            if (v28)
            {
              operator delete((void *)v28);
              v12 = v86;
              v11 = v87;
              result = 24;
            }
            goto LABEL_73;
          }
        }
        v39 = (char *)v37;
        goto LABEL_38;
      }
      v40 = (char *)v29 - (char *)v32;
      if ((unint64_t)((char *)v29 - (char *)v32) > 0x2F)
      {
        v42 = *(uint64_t **)(v4 + 24);
        v41 = 6;
        goto LABEL_49;
      }
      v41 = v40 >> 3;
      v42 = &v29->i64[6 - (v40 >> 3)];
      v43 = v40 & 0xFFFFFFFFFFFFFFF8;
      v44 = 40 - v43;
      if (40 - v43 >= 0x68)
      {
        v55 = &v88 < (uint64_t *)((char *)v29[3].i64 - v43);
        if (v29 >= (int64x2_t *)&v89 || (v45 = *(uint64_t **)(v4 + 24), !v55))
        {
          v56 = (v44 >> 3) + 1;
          v45 = &v29->i64[v56 & 0x3FFFFFFFFFFFFFFCLL];
          v57 = vdupq_lane_s64(v88, 0);
          v58 = v29 + 1;
          v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v58[-1] = v57;
            *v58 = v57;
            v58 += 2;
            v59 -= 4;
          }
          while (v59);
          if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            *(_QWORD *)(v4 + 24) = v42;
            if (v29 == (int64x2_t *)v32)
              goto LABEL_73;
LABEL_49:
            v60 = (char *)v42 - (char *)(v32 + 6);
            v61 = v60 >> 3;
            v62 = (int64x2_t *)(v42 - 6);
            v63 = (char *)v42;
            if (v42 - 6 < (uint64_t *)v29)
            {
              v64 = (v30 & 0xFFFFFFFFFFFFFFF8) + v60;
              v65 = v28 + v64 + 8;
              if ((unint64_t)v29 > v65)
                v65 = (unint64_t)v29;
              v66 = v65 + ~v28 - v64;
              if (v66 >= 0x58)
              {
                v67 = (v66 >> 3) + 1;
                v68 = v67 & 0x3FFFFFFFFFFFFFFCLL;
                v62 = (int64x2_t *)((char *)v62 + v68 * 8);
                v63 = (char *)&v42[v68];
                v69 = v42 + 2;
                v70 = (__int128 *)(v28 + 8 * v61 + 8 * v31 + 16);
                v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v72 = *v70;
                  *(v69 - 1) = *(v70 - 1);
                  *v69 = v72;
                  v69 += 2;
                  v70 += 2;
                  v71 -= 4;
                }
                while (v71);
                if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_58;
              }
              else
              {
                v63 = (char *)v42;
              }
              do
              {
                v73 = v62->i64[0];
                v62 = (int64x2_t *)((char *)v62 + 8);
                *(_QWORD *)v63 = v73;
                v63 += 8;
              }
              while (v62 < v29);
            }
LABEL_58:
            *(_QWORD *)(v4 + 24) = v63;
            if (v42 != v32 + 6)
            {
              v74 = v41;
              memmove(&v42[-v61], (const void *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8)), v60);
              v41 = v74;
              v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
              v12 = v86;
              v11 = v87;
              result = 24;
            }
            v75 = (const double *)&v88;
            if (v32 <= &v88)
            {
              v76 = 48;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v88)
                v76 = 0;
              v75 = (const double *)((char *)&v88 + v76);
            }
            if (v41 >= 0xA)
            {
              if (v32 >= (uint64_t *)v75 + 1
                || (unint64_t)v75 >= v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8) + 8 * v41)
              {
                v32 += v41 & 0xFFFFFFFFFFFFFFFCLL;
                v77 = v41 & 3;
                v78 = vld1q_dup_f64(v75);
                v79 = (float64x2_t *)(v28 + 8 * v31 + 16);
                v80 = v41 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v79[-1] = v78;
                  *v79 = v78;
                  v79 += 2;
                  v80 -= 4;
                }
                while (v80);
                if (v41 == (v41 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_73;
              }
              else
              {
                v77 = v41;
              }
            }
            else
            {
              v77 = v41;
            }
            do
            {
              *v32++ = *(_QWORD *)v75;
              --v77;
            }
            while (v77);
LABEL_73:
            v13 = (_QWORD *)(*(_QWORD *)(v4 + 24) - 48);
            v8 = (_QWORD *)(v4 + 16);
            v7 = v85;
LABEL_74:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v45 = *(uint64_t **)(v4 + 24);
      }
      do
        *v45++ = v88;
      while (v45 != v42);
      goto LABEL_48;
    }
  }
  return result;
}

uint64_t sub_20F8E53A4(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  BOOL v58;
  uint64_t v59;
  int64x2_t v60;
  int64x2_t *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64x2_t *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  const double *v78;
  uint64_t v79;
  unint64_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  unint64_t v83;
  unint64_t v84;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v84 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 40;
      v86 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = 9 * v7 + v84;
      v90 = v11;
      v89 = v12;
      v88 = v7;
      while (1)
      {
        v23 = *v6;
        v24 = *((unsigned int *)v6 + 4);
        v25 = *(_QWORD *)(v11 + 8 * v10);
        if (v25 == -1)
          break;
        v13 = (_QWORD *)(*v8 + 8 * v25);
LABEL_9:
        v14 = (_QWORD *)(v23 + 8 * (v10 + v5 + v24 * v12));
        v15 = v14[v24];
        v16 = v14[2 * v24];
        v17 = v14[3 * v24];
        v18 = v14[4 * v24];
        v19 = v14[5 * v24];
        v20 = v14[6 * v24];
        v21 = v14[7 * v24];
        v22 = v14[8 * v24];
        *v13 = *v14;
        v13[1] = v15;
        v13[2] = v16;
        v13[3] = v17;
        v13[4] = v18;
        v13[5] = v19;
        v13[6] = v20;
        v13[7] = v21;
        v13[8] = v22;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v26 = *(_QWORD *)(v4 + 80);
      if (v26)
      {
        v28 = *(_QWORD *)(v4 + 48);
        v27 = *(_QWORD *)(v4 + 56);
        v29 = ((v27 - v28) << 6) - 1;
        v30 = *(_QWORD *)(v4 + 72);
        if (v27 == v28)
          v29 = 0;
        v13 = (_QWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v28 + (((unint64_t)(v30 + v26 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v30 + v26 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v26 - 1;
        if ((unint64_t)(v29 - (v26 + v30) + 1) >= 0x400)
        {
          operator delete(*(void **)(v27 - 8));
          v12 = v89;
          v11 = v90;
          result = 40;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v91 = 0;
      v31 = *(_QWORD *)(v4 + 16);
      v32 = *(int64x2_t **)(v4 + 24);
      v33 = (unint64_t)v32 - v31;
      v34 = (uint64_t)((uint64_t)v32->i64 - v31) >> 3;
      v35 = (uint64_t *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8));
      v36 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v36 - (_QWORD)v32) < 0x48)
      {
        v37 = v34 + 9;
        if ((unint64_t)(v34 + 9) >> 61)
          sub_20E867F44();
        v38 = v36 - v31;
        if (v38 >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        v87 = v37;
        if (v37)
        {
          if (v37 >> 61)
            sub_20E877A38();
          v39 = operator new(8 * v37);
          v34 = (uint64_t)((uint64_t)v32->i64 - v31) >> 3;
        }
        else
        {
          v39 = 0;
        }
        v46 = &v39[8 * v34];
        *((_QWORD *)v46 + 8) = 0;
        *((_OWORD *)v46 + 2) = 0u;
        *((_OWORD *)v46 + 3) = 0u;
        *(_OWORD *)v46 = 0u;
        *((_OWORD *)v46 + 1) = 0u;
        if ((int64x2_t *)v31 == v32)
        {
          v48 = &v39[8 * v34];
        }
        else
        {
          if (v33 - 8 >= 0x68)
          {
            v47 = (char *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8));
            v48 = &v39[8 * v34];
            if (v31 + (v33 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v39[v33 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v49 = ((v33 - 8) >> 3) + 1;
              v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = (char *)&v35[v50 / 0xFFFFFFFFFFFFFFF8];
              v48 = &v46[-v50];
              v51 = &v39[8 * v34 - 16];
              v52 = (__int128 *)(v31 + 8 * v34 - 16);
              v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v54 = *v52;
                *(v51 - 1) = *(v52 - 1);
                *v51 = v54;
                v51 -= 2;
                v52 -= 2;
                v53 -= 4;
              }
              while (v53);
              if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v47 = (char *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8));
            v48 = &v39[8 * v34];
          }
          do
          {
            v55 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *((_QWORD *)v48 - 1) = v55;
            v48 -= 8;
          }
          while (v47 != (char *)v31);
        }
LABEL_39:
        v56 = v46 + 72;
        v57 = (char *)v32 - (char *)v35;
        if (v57)
          memmove(v46 + 72, v35, v57);
        *(_QWORD *)(v4 + 16) = v48;
        *(_QWORD *)(v4 + 24) = &v56[v57];
        *(_QWORD *)(v4 + 32) = &v39[8 * v87];
        v6 = a2;
        v5 = v86;
        result = 40;
        v11 = v90;
        v12 = v89;
        if (v31)
        {
          operator delete((void *)v31);
          v12 = v89;
          v11 = v90;
          result = 40;
        }
        goto LABEL_74;
      }
      v40 = (char *)v32 - (char *)v35;
      if ((unint64_t)((char *)v32 - (char *)v35) > 0x47)
      {
        v42 = *(uint64_t **)(v4 + 24);
        v41 = 9;
        goto LABEL_50;
      }
      v41 = v40 >> 3;
      v42 = &v32->i64[9 - (v40 >> 3)];
      v43 = v40 & 0xFFFFFFFFFFFFFFF8;
      v44 = 64 - v43;
      if (64 - v43 >= 0x68)
      {
        v58 = &v91 < (uint64_t *)((char *)&v32[4].i64[1] - v43);
        if (v32 >= (int64x2_t *)&v92 || (v45 = *(uint64_t **)(v4 + 24), !v58))
        {
          v59 = (v44 >> 3) + 1;
          v45 = &v32->i64[v59 & 0x3FFFFFFFFFFFFFFCLL];
          v60 = vdupq_lane_s64(v91, 0);
          v61 = v32 + 1;
          v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61[-1] = v60;
            *v61 = v60;
            v61 += 2;
            v62 -= 4;
          }
          while (v62);
          if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v42;
            if (v32 == (int64x2_t *)v35)
              goto LABEL_74;
LABEL_50:
            v63 = (char *)v42 - (char *)(v35 + 9);
            v64 = v63 >> 3;
            v65 = (int64x2_t *)(v42 - 9);
            v66 = (char *)v42;
            if (v42 - 9 < (uint64_t *)v32)
            {
              v67 = (v33 & 0xFFFFFFFFFFFFFFF8) + v63;
              v68 = v31 + v67 + 8;
              if ((unint64_t)v32 > v68)
                v68 = (unint64_t)v32;
              v69 = v68 + ~v31 - v67;
              if (v69 >= 0x58)
              {
                v70 = (v69 >> 3) + 1;
                v71 = v70 & 0x3FFFFFFFFFFFFFFCLL;
                v65 = (int64x2_t *)((char *)v65 + v71 * 8);
                v66 = (char *)&v42[v71];
                v72 = v42 + 2;
                v73 = (__int128 *)(v31 + 8 * v64 + 8 * v34 + 16);
                v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v75 = *v73;
                  *(v72 - 1) = *(v73 - 1);
                  *v72 = v75;
                  v72 += 2;
                  v73 += 2;
                  v74 -= 4;
                }
                while (v74);
                if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v66 = (char *)v42;
              }
              do
              {
                v76 = v65->i64[0];
                v65 = (int64x2_t *)((char *)v65 + 8);
                *(_QWORD *)v66 = v76;
                v66 += 8;
              }
              while (v65 < v32);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v66;
            if (v42 != v35 + 9)
            {
              v77 = v41;
              memmove(&v42[-v64], (const void *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8)), v63);
              v41 = v77;
              v34 = (uint64_t)((uint64_t)v32->i64 - v31) >> 3;
              v12 = v89;
              v11 = v90;
              result = 40;
            }
            v78 = (const double *)&v91;
            if (v35 <= &v91)
            {
              v79 = 72;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v91)
                v79 = 0;
              v78 = (const double *)((char *)&v91 + v79);
            }
            if (v41 >= 0xA)
            {
              if (v35 >= (uint64_t *)v78 + 1
                || (unint64_t)v78 >= v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8) + 8 * v41)
              {
                v35 += v41 & 0xFFFFFFFFFFFFFFFCLL;
                v80 = v41 & 3;
                v81 = vld1q_dup_f64(v78);
                v82 = (float64x2_t *)(v31 + 8 * v34 + 16);
                v83 = v41 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v82[-1] = v81;
                  *v82 = v81;
                  v82 += 2;
                  v83 -= 4;
                }
                while (v83);
                if (v41 == (v41 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v80 = v41;
              }
            }
            else
            {
              v80 = v41;
            }
            do
            {
              *v35++ = *(_QWORD *)v78;
              --v80;
            }
            while (v80);
LABEL_74:
            v13 = (_QWORD *)(*(_QWORD *)(v4 + 24) - 72);
            v8 = (_QWORD *)(v4 + 16);
            v7 = v88;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v45 = *(uint64_t **)(v4 + 24);
      }
      do
        *v45++ = v91;
      while (v45 != v42);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E59EC(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  size_t v50;
  BOOL v51;
  uint64_t v52;
  int64x2_t v53;
  int64x2_t *v54;
  uint64_t v55;
  int64x2_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  const double *v60;
  uint64_t v61;
  unint64_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  unint64_t v65;
  unint64_t v66;
  int v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v66 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v68 = a3;
      v70 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      result = (3 * v7 + v66);
      v73 = 3 * v7 + v66;
      v71 = v11;
      v72 = v7;
      while (1)
      {
        v16 = *v6;
        v17 = *((unsigned int *)v6 + 4);
        v18 = *(_QWORD *)(v11 + 8 * v10);
        if (v18 == -1)
          break;
        v12 = (_QWORD *)(*v8 + 8 * v18);
LABEL_9:
        v13 = (_QWORD *)(v16 + 8 * (v10 + v5 + v17 * result));
        v14 = v13[v17];
        v15 = v13[2 * v17];
        *v12 = *v13;
        v12[1] = v14;
        v12[2] = v15;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v19 = *(_QWORD *)(v4 + 80);
      if (v19)
      {
        v21 = *(_QWORD *)(v4 + 48);
        v20 = *(_QWORD *)(v4 + 56);
        v22 = ((v20 - v21) << 6) - 1;
        v23 = *(_QWORD *)(v4 + 72);
        if (v20 == v21)
          v22 = 0;
        v12 = (_QWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v21 + (((unint64_t)(v23 + v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v23 + v19 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v19 - 1;
        if ((unint64_t)(v22 - (v19 + v23) + 1) >= 0x400)
        {
          operator delete(*(void **)(v20 - 8));
          result = v73;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_68;
      }
      v74 = 0;
      v24 = *(int64x2_t **)(v4 + 16);
      v25 = *(int64x2_t **)(v4 + 24);
      v26 = (char *)v25 - (char *)v24;
      v27 = ((char *)v25 - (char *)v24) >> 3;
      v28 = (uint64_t *)((char *)v24->i64 + (((char *)v25 - (char *)v24) & 0xFFFFFFFFFFFFFFF8));
      v29 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v29 - (_QWORD)v25) < 0x18)
      {
        v30 = v27 + 3;
        if ((unint64_t)(v27 + 3) >> 61)
          sub_20E867F44();
        v31 = v29 - (_QWORD)v24;
        if (v31 >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        v69 = v30;
        if (v30)
        {
          if (v30 >> 61)
            sub_20E877A38();
          v32 = operator new(8 * v30);
          v27 = ((char *)v25 - (char *)v24) >> 3;
          v33 = &v32[8 * v27];
          *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
          if (v24 != v25)
            goto LABEL_25;
        }
        else
        {
          v32 = 0;
          v33 = (_QWORD *)(8 * v27);
          *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
          if (v24 != v25)
          {
LABEL_25:
            if ((unint64_t)(v26 - 8) >= 0x68)
            {
              v34 = (uint64_t *)((char *)v24->i64 + (((char *)v25 - (char *)v24) & 0xFFFFFFFFFFFFFFF8));
              v35 = v33;
              if ((unint64_t)(&v24->i8[v26 & 0xFFFFFFFFFFFFFFF8] - &v32[v26 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
              {
                v42 = ((unint64_t)(v26 - 8) >> 3) + 1;
                v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
                v34 = &v28[v43 / 0xFFFFFFFFFFFFFFF8];
                v35 = &v33[v43 / 0xFFFFFFFFFFFFFFF8];
                v44 = &v32[8 * v27 - 16];
                v45 = (__int128 *)&v24[-1].i8[8 * v27];
                v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v47 = *v45;
                  *(v44 - 1) = *(v45 - 1);
                  *v44 = v47;
                  v44 -= 2;
                  v45 -= 2;
                  v46 -= 4;
                }
                while (v46);
                if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_38;
              }
            }
            else
            {
              v34 = (uint64_t *)((char *)v24->i64 + (((char *)v25 - (char *)v24) & 0xFFFFFFFFFFFFFFF8));
              v35 = v33;
            }
            do
            {
              v48 = *--v34;
              *--v35 = v48;
            }
            while (v34 != (uint64_t *)v24);
LABEL_38:
            v49 = v33 + 3;
            v50 = (char *)v25 - (char *)v28;
            if (v50)
              memmove(v33 + 3, v28, v50);
            *(_QWORD *)(v4 + 16) = v35;
            *(_QWORD *)(v4 + 24) = (char *)v49 + v50;
            *(_QWORD *)(v4 + 32) = &v32[8 * v69];
            v6 = a2;
            v5 = v68;
            result = v73;
            if (v24)
            {
              operator delete(v24);
              result = v73;
            }
            goto LABEL_67;
          }
        }
        v35 = v33;
        goto LABEL_38;
      }
      v36 = (char *)v25 - (char *)v28;
      if ((unint64_t)((char *)v25 - (char *)v28) > 0x17)
      {
        v38 = *(uint64_t **)(v4 + 24);
        v37 = 3;
LABEL_49:
        v56 = (int64x2_t *)(v38 - 3);
        v57 = v38;
        if (v38 - 3 < (uint64_t *)v25)
        {
          v57 = v38;
          do
          {
            v58 = v56->i64[0];
            v56 = (int64x2_t *)((char *)v56 + 8);
            *v57++ = v58;
          }
          while (v56 < v25);
        }
        *(_QWORD *)(v4 + 24) = v57;
        if (v38 != v28 + 3)
        {
          v59 = v37;
          memmove(&v38[-(v38 - (v28 + 3))], &v24->i8[((char *)v25 - (char *)v24) & 0xFFFFFFFFFFFFFFF8], (char *)v38 - (char *)(v28 + 3));
          v37 = v59;
          v27 = ((char *)v25 - (char *)v24) >> 3;
          result = v73;
        }
        v60 = (const double *)&v74;
        if (v28 <= &v74)
        {
          v61 = 24;
          if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v74)
            v61 = 0;
          v60 = (const double *)((char *)&v74 + v61);
        }
        if (v37 >= 0xA)
        {
          if (v28 >= (uint64_t *)v60 + 1
            || v60 >= (const double *)((char *)&v24->i64[v37] + (((char *)v25 - (char *)v24) & 0xFFFFFFFFFFFFFFF8)))
          {
            v28 += v37 & 0xFFFFFFFFFFFFFFFCLL;
            v62 = v37 & 3;
            v63 = vld1q_dup_f64(v60);
            v64 = (float64x2_t *)((char *)&v24[1] + 8 * v27);
            v65 = v37 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v64[-1] = v63;
              *v64 = v63;
              v64 += 2;
              v65 -= 4;
            }
            while (v65);
            if (v37 == (v37 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_67;
          }
          else
          {
            v62 = v37;
          }
        }
        else
        {
          v62 = v37;
        }
        do
        {
          *v28++ = *(_QWORD *)v60;
          --v62;
        }
        while (v62);
LABEL_67:
        v12 = (_QWORD *)(*(_QWORD *)(v4 + 24) - 24);
        v11 = v71;
        v7 = v72;
        v8 = v70;
LABEL_68:
        *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
        goto LABEL_9;
      }
      v37 = v36 >> 3;
      v38 = &v25->i64[3 - (v36 >> 3)];
      v39 = v36 & 0xFFFFFFFFFFFFFFF8;
      v40 = 16 - v39;
      if (16 - v39 >= 0x68)
      {
        v51 = &v74 < (uint64_t *)((char *)&v25[1].i64[1] - v39);
        if (v25 >= (int64x2_t *)&v75 || (v41 = *(uint64_t **)(v4 + 24), !v51))
        {
          v52 = (v40 >> 3) + 1;
          v41 = &v25->i64[v52 & 0x3FFFFFFFFFFFFFFCLL];
          v53 = vdupq_lane_s64(v74, 0);
          v54 = v25 + 1;
          v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v54[-1] = v53;
            *v54 = v53;
            v54 += 2;
            v55 -= 4;
          }
          while (v55);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            *(_QWORD *)(v4 + 24) = v38;
            if (v25 == (int64x2_t *)v28)
              goto LABEL_67;
            goto LABEL_49;
          }
        }
      }
      else
      {
        v41 = *(uint64_t **)(v4 + 24);
      }
      do
        *v41++ = v74;
      while (v41 != v38);
      goto LABEL_48;
    }
  }
  return result;
}

void sub_20F8E5FAC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  _BYTE *v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v7 = 0;
    v48 = HIDWORD(a3);
    v8 = (_QWORD *)(a1 + 16);
    LODWORD(v9) = 1;
    v53 = a3;
    v54 = (_QWORD *)(a1 + 16);
    while (!(_DWORD)v9)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 88) + 8 * (*(_DWORD *)(a1 + 112) * v7);
    v12 = v7 + v48;
    v56 = v7 + v48;
    v55 = v7;
    v49 = v11;
    while (1)
    {
      v14 = *a2;
      v15 = *((_DWORD *)a2 + 4);
      v16 = *(_QWORD *)(v11 + 8 * v10);
      if (v16 == -1)
        break;
      v13 = (_QWORD *)(*v8 + 8 * v16);
LABEL_9:
      *v13 = *(_QWORD *)(v14 + 8 * (v10++ + v5 + v15 * v12));
      v9 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v19 = *(_QWORD *)(a1 + 48);
      v18 = *(_QWORD *)(a1 + 56);
      v20 = ((v18 - v19) << 6) - 1;
      v21 = *(_QWORD *)(a1 + 72);
      if (v18 == v19)
        v20 = 0;
      v13 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                     + 8
                     * *(_QWORD *)(*(_QWORD *)(v19 + (((unint64_t)(v21 + v17 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v21 + v17 - 1) & 0x1FF)));
      *(_QWORD *)(a1 + 80) = v17 - 1;
      if ((unint64_t)(v20 - (v17 + v21) + 1) >= 0x400)
      {
        operator delete(*(void **)(v18 - 8));
        v12 = v56;
        *(_QWORD *)(a1 + 56) -= 8;
      }
      goto LABEL_51;
    }
    v57 = 0;
    v22 = *(char **)(a1 + 16);
    v23 = *(char **)(a1 + 24);
    v24 = v23 - v22;
    v25 = (v23 - v22) >> 3;
    v26 = &v22[(v23 - v22) & 0xFFFFFFFFFFFFFFF8];
    v27 = *(char **)(a1 + 32);
    if (v27 != v23)
    {
      if (v23 == v26)
      {
        *(_QWORD *)v23 = v57;
        *(_QWORD *)(a1 + 24) = v23 + 8;
        v5 = v53;
        v7 = v55;
LABEL_50:
        v13 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
        v8 = v54;
LABEL_51:
        *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v13 - *(_QWORD *)(a1 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
        goto LABEL_9;
      }
      v28 = v23 - 8;
      if ((unint64_t)v23 < 8)
      {
        v29 = *(_QWORD **)(a1 + 24);
        v5 = v53;
      }
      else
      {
        v29 = *(_QWORD **)(a1 + 24);
        v5 = v53;
        do
        {
          v46 = *(_QWORD *)v28;
          v28 += 8;
          *v29++ = v46;
        }
        while (v28 < v23);
      }
      *(_QWORD *)(a1 + 24) = v29;
      if (v23 != v26 + 8)
      {
        memmove(&v23[-8 * ((v23 - (v26 + 8)) >> 3)], v26, v23 - (v26 + 8));
        v26 = &v22[(v23 - v22) & 0xFFFFFFFFFFFFFFF8];
      }
      v47 = &v57;
      if (v26 <= (char *)&v57)
        v47 = &v57 + (*(_QWORD *)(a1 + 24) > (unint64_t)&v57);
      *(_QWORD *)v26 = *v47;
      v7 = v55;
LABEL_49:
      v12 = v56;
      goto LABEL_50;
    }
    v30 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      sub_20E867F44();
    v31 = v27 - v22;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    v52 = v30;
    if (v30)
    {
      if (v30 >> 61)
        sub_20E877A38();
      v32 = operator new(8 * v30);
      v12 = v56;
      v26 = &v22[(v23 - v22) & 0xFFFFFFFFFFFFFFF8];
      v25 = (v23 - v22) >> 3;
      v11 = v49;
      v33 = &v32[8 * v25];
      *v33 = 0;
      v34 = (char *)(v33 + 1);
      if (v22 != v23)
        goto LABEL_28;
    }
    else
    {
      v32 = 0;
      v33 = (_QWORD *)(8 * v25);
      *(_QWORD *)(8 * v25) = 0;
      v34 = (char *)(8 * v25 + 8);
      if (v22 != v23)
      {
LABEL_28:
        v35 = v24 - 8;
        if ((unint64_t)(v24 - 8) >= 0x68)
        {
          v37 = &v22[v24 & 0xFFFFFFFFFFFFFFF8] - &v32[v24 & 0xFFFFFFFFFFFFFFF8];
          v36 = v26;
          v5 = v53;
          if (v37 >= 0x20)
          {
            v38 = (v35 >> 3) + 1;
            v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
            v36 = &v26[-v39];
            v33 = (_QWORD *)((char *)v33 - v39);
            v40 = &v32[8 * v25 - 16];
            v41 = &v22[8 * v25 - 16];
            v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v43 = *(_OWORD *)v41;
              *(v40 - 1) = *((_OWORD *)v41 - 1);
              *v40 = v43;
              v40 -= 2;
              v41 -= 32;
              v42 -= 4;
            }
            while (v42);
            if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_39;
          }
        }
        else
        {
          v36 = v26;
          v5 = v53;
        }
        do
        {
          v44 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *--v33 = v44;
        }
        while (v36 != v22);
LABEL_39:
        v45 = v23 - v26;
        if (v45)
        {
          v50 = v34;
          v51 = v32;
          memmove(v34, v26, v45);
          v34 = v50;
          v32 = v51;
          v12 = v56;
        }
        *(_QWORD *)(a1 + 16) = v33;
        *(_QWORD *)(a1 + 24) = &v34[v45];
        *(_QWORD *)(a1 + 32) = &v32[8 * v52];
        v7 = v55;
        if (!v22)
          goto LABEL_50;
        operator delete(v22);
        goto LABEL_49;
      }
    }
    v5 = v53;
    goto LABEL_39;
  }
}

uint64_t sub_20F8E6434(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _OWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD *v50;
  size_t v51;
  BOOL v52;
  uint64_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64x2_t *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  float64x2_t v74;
  float64x2_t *v75;
  unint64_t v76;
  unint64_t v77;
  int v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v77 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v79 = a3;
      v81 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = v77 + 4 * v7;
      v84 = result;
      v83 = v11;
      v82 = v7;
      while (1)
      {
        v17 = *v6;
        v18 = *((unsigned int *)v6 + 4);
        v19 = *(_QWORD *)(result + 8 * v10);
        if (v19 == -1)
          break;
        v12 = (_QWORD *)(*v8 + 8 * v19);
LABEL_9:
        v13 = (_QWORD *)(v17 + 8 * (v10 + v5 + v18 * v11));
        v14 = v13[v18];
        v15 = v13[2 * v18];
        v16 = v13[3 * v18];
        *v12 = *v13;
        v12[1] = v14;
        v12[2] = v15;
        v12[3] = v16;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v20 = *(_QWORD *)(v4 + 80);
      if (v20)
      {
        v22 = *(_QWORD *)(v4 + 48);
        v21 = *(_QWORD *)(v4 + 56);
        v23 = ((v21 - v22) << 6) - 1;
        v24 = *(_QWORD *)(v4 + 72);
        if (v21 == v22)
          v23 = 0;
        v12 = (_QWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v22 + (((unint64_t)(v24 + v20 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v24 + v20 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v20 - 1;
        if ((unint64_t)(v23 - (v20 + v24) + 1) >= 0x400)
        {
          operator delete(*(void **)(v21 - 8));
          v11 = v83;
          result = v84;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_72;
      }
      v85 = 0;
      v25 = *(_QWORD *)(v4 + 16);
      v26 = *(int64x2_t **)(v4 + 24);
      v27 = (unint64_t)v26 - v25;
      v28 = (uint64_t)((uint64_t)v26->i64 - v25) >> 3;
      v29 = (uint64_t *)(v25 + (((unint64_t)v26 - v25) & 0xFFFFFFFFFFFFFFF8));
      v30 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v30 - (_QWORD)v26) < 0x20)
      {
        v31 = v28 + 4;
        if ((unint64_t)(v28 + 4) >> 61)
          sub_20E867F44();
        v32 = v30 - v25;
        if (v32 >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        v80 = v31;
        if (v31)
        {
          if (v31 >> 61)
            sub_20E877A38();
          v33 = operator new(8 * v31);
          v28 = (uint64_t)((uint64_t)v26->i64 - v25) >> 3;
          v34 = &v33[8 * v28];
          *v34 = 0u;
          v34[1] = 0u;
          if ((int64x2_t *)v25 != v26)
            goto LABEL_25;
        }
        else
        {
          v33 = 0;
          v34 = (_OWORD *)(8 * v28);
          *v34 = 0u;
          v34[1] = 0u;
          if ((int64x2_t *)v25 != v26)
          {
LABEL_25:
            if (v27 - 8 >= 0x68)
            {
              v35 = (char *)(v25 + (((unint64_t)v26 - v25) & 0xFFFFFFFFFFFFFFF8));
              v36 = (char *)v34;
              if (v25 + (v27 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v33[v27 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v43 = ((v27 - 8) >> 3) + 1;
                v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                v35 = (char *)&v29[v44 / 0xFFFFFFFFFFFFFFF8];
                v36 = (char *)v34 - v44;
                v45 = &v33[8 * v28 - 16];
                v46 = (__int128 *)(v25 + 8 * v28 - 16);
                v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v48 = *v46;
                  *(v45 - 1) = *(v46 - 1);
                  *v45 = v48;
                  v45 -= 2;
                  v46 -= 2;
                  v47 -= 4;
                }
                while (v47);
                if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_38;
              }
            }
            else
            {
              v35 = (char *)(v25 + (((unint64_t)v26 - v25) & 0xFFFFFFFFFFFFFFF8));
              v36 = (char *)v34;
            }
            do
            {
              v49 = *((_QWORD *)v35 - 1);
              v35 -= 8;
              *((_QWORD *)v36 - 1) = v49;
              v36 -= 8;
            }
            while (v35 != (char *)v25);
LABEL_38:
            v50 = v34 + 2;
            v51 = (char *)v26 - (char *)v29;
            if (v51)
              memmove(v34 + 2, v29, v51);
            *(_QWORD *)(v4 + 16) = v36;
            *(_QWORD *)(v4 + 24) = (char *)v50 + v51;
            *(_QWORD *)(v4 + 32) = &v33[8 * v80];
            v6 = a2;
            v5 = v79;
            result = v84;
            v11 = v83;
            if (v25)
            {
              operator delete((void *)v25);
              v11 = v83;
              result = v84;
            }
            goto LABEL_71;
          }
        }
        v36 = (char *)v34;
        goto LABEL_38;
      }
      v37 = (char *)v26 - (char *)v29;
      if ((unint64_t)((char *)v26 - (char *)v29) > 0x1F)
      {
        v39 = *(uint64_t **)(v4 + 24);
        v38 = 4;
        goto LABEL_49;
      }
      v38 = v37 >> 3;
      v39 = &v26->i64[4 - (v37 >> 3)];
      v40 = v37 & 0xFFFFFFFFFFFFFFF8;
      v41 = 24 - v40;
      if (24 - v40 >= 0x68)
      {
        v52 = &v85 < (uint64_t *)((char *)v26[2].i64 - v40);
        if (v26 >= (int64x2_t *)&v86 || (v42 = *(uint64_t **)(v4 + 24), !v52))
        {
          v53 = (v41 >> 3) + 1;
          v42 = &v26->i64[v53 & 0x3FFFFFFFFFFFFFFCLL];
          v54 = vdupq_lane_s64(v85, 0);
          v55 = v26 + 1;
          v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55[-1] = v54;
            *v55 = v54;
            v55 += 2;
            v56 -= 4;
          }
          while (v56);
          if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            *(_QWORD *)(v4 + 24) = v39;
            if (v26 == (int64x2_t *)v29)
              goto LABEL_71;
LABEL_49:
            v57 = (char *)v39 - (char *)(v29 + 4);
            v58 = v57 >> 3;
            v59 = (int64x2_t *)(v39 - 4);
            v60 = (char *)v39;
            if (v39 - 4 < (uint64_t *)v26)
            {
              v61 = (v27 & 0xFFFFFFFFFFFFFFF8) + v57;
              v62 = v25 + v61 + 8;
              if ((unint64_t)v26 > v62)
                v62 = (unint64_t)v26;
              v63 = v62 + ~v25 - v61;
              if (v63 >= 0x58)
              {
                v64 = (v63 >> 3) + 1;
                v65 = v64 & 0x3FFFFFFFFFFFFFFCLL;
                v59 = (int64x2_t *)((char *)v59 + v65 * 8);
                v60 = (char *)&v39[v65];
                v66 = v39 + 2;
                v67 = (__int128 *)(v25 + 8 * v58 + 8 * v28 + 16);
                v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v69 = *v67;
                  *(v66 - 1) = *(v67 - 1);
                  *v66 = v69;
                  v66 += 2;
                  v67 += 2;
                  v68 -= 4;
                }
                while (v68);
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_58;
              }
              else
              {
                v60 = (char *)v39;
              }
              do
              {
                v70 = v59->i64[0];
                v59 = (int64x2_t *)((char *)v59 + 8);
                *(_QWORD *)v60 = v70;
                v60 += 8;
              }
              while (v59 < v26);
            }
LABEL_58:
            *(_QWORD *)(v4 + 24) = v60;
            if (v39 != v29 + 4)
            {
              v71 = v38;
              memmove(&v39[-v58], (const void *)(v25 + (((unint64_t)v26 - v25) & 0xFFFFFFFFFFFFFFF8)), v57);
              v38 = v71;
              v28 = (uint64_t)((uint64_t)v26->i64 - v25) >> 3;
              v11 = v83;
              result = v84;
            }
            v72 = &v85;
            if (v29 <= &v85)
              v72 = &v85 + 4 * (*(_QWORD *)(v4 + 24) > (unint64_t)&v85);
            if (v38 >= 0xA)
            {
              if (v29 >= v72 + 1
                || (unint64_t)v72 >= v25 + (((unint64_t)v26 - v25) & 0xFFFFFFFFFFFFFFF8) + 8 * v38)
              {
                v29 += v38 & 0xFFFFFFFFFFFFFFFCLL;
                v73 = v38 & 3;
                v74 = vld1q_dup_f64((const double *)v72);
                v75 = (float64x2_t *)(v25 + 8 * v28 + 16);
                v76 = v38 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v75[-1] = v74;
                  *v75 = v74;
                  v75 += 2;
                  v76 -= 4;
                }
                while (v76);
                if (v38 == (v38 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_71;
              }
              else
              {
                v73 = v38;
              }
            }
            else
            {
              v73 = v38;
            }
            do
            {
              *v29++ = *v72;
              --v73;
            }
            while (v73);
LABEL_71:
            v12 = (_QWORD *)(*(_QWORD *)(v4 + 24) - 32);
            v8 = v81;
            v7 = v82;
LABEL_72:
            *(_QWORD *)(result + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v42 = *(uint64_t **)(v4 + 24);
      }
      do
        *v42++ = v85;
      while (v42 != v39);
      goto LABEL_48;
    }
  }
  return result;
}

uint64_t sub_20F8E6A0C(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64x2_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  _OWORD *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  size_t v72;
  BOOL v73;
  uint64_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  int64x2_t *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  const double *v93;
  uint64_t v94;
  unint64_t v95;
  float64x2_t v96;
  float64x2_t *v97;
  unint64_t v98;
  unint64_t v99;
  int v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v99 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 24;
      v101 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = v99 + 6 * v7;
      v105 = v11;
      v104 = v12;
      v103 = v7;
      while (1)
      {
        v38 = *v6;
        v39 = *((unsigned int *)v6 + 4);
        v40 = *(_QWORD *)(v11 + 8 * v10);
        if (v40 == -1)
          break;
        v13 = (_OWORD *)(*v8 + 8 * v40);
LABEL_9:
        v14 = (__int128 *)(v38 + 8 * (v5 + 6 * v10 + v39 * v12));
        v16 = v14[1];
        v15 = v14[2];
        v17 = *v14;
        v18 = (__int128 *)((char *)v14 + 8 * v39);
        v20 = v18[1];
        v19 = v18[2];
        v21 = *v18;
        v22 = &v14[v39];
        v24 = v22[1];
        v23 = v22[2];
        v25 = *v22;
        v26 = (__int128 *)((char *)v14 + 24 * v39);
        v28 = v26[1];
        v27 = v26[2];
        v29 = *v26;
        v30 = &v14[2 * v39];
        v32 = v30[1];
        v31 = v30[2];
        v33 = *v30;
        v34 = (__int128 *)((char *)v14 + 40 * v39);
        v36 = v34[1];
        v35 = v34[2];
        v37 = *v34;
        *v13 = v17;
        v13[1] = v16;
        v13[2] = v15;
        v13[3] = v21;
        v13[4] = v20;
        v13[5] = v19;
        v13[6] = v25;
        v13[7] = v24;
        v13[8] = v23;
        v13[9] = v29;
        v13[10] = v28;
        v13[11] = v27;
        v13[12] = v33;
        v13[13] = v32;
        v13[14] = v31;
        v13[15] = v37;
        v13[16] = v36;
        v13[17] = v35;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v41 = *(_QWORD *)(v4 + 80);
      if (v41)
      {
        v43 = *(_QWORD *)(v4 + 48);
        v42 = *(_QWORD *)(v4 + 56);
        v44 = ((v42 - v43) << 6) - 1;
        v45 = *(_QWORD *)(v4 + 72);
        if (v42 == v43)
          v44 = 0;
        v13 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v43 + (((unint64_t)(v45 + v41 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v45 + v41 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v41 - 1;
        if ((unint64_t)(v44 - (v41 + v45) + 1) >= 0x400)
        {
          operator delete(*(void **)(v42 - 8));
          v12 = v104;
          v11 = v105;
          result = 24;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v106 = 0;
      v46 = *(_QWORD *)(v4 + 16);
      v47 = *(int64x2_t **)(v4 + 24);
      v48 = (unint64_t)v47 - v46;
      v49 = (uint64_t)((uint64_t)v47->i64 - v46) >> 3;
      v50 = (uint64_t *)(v46 + (((unint64_t)v47 - v46) & 0xFFFFFFFFFFFFFFF8));
      v51 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v51 - (_QWORD)v47) < 0x120)
      {
        v52 = v49 + 36;
        if ((unint64_t)(v49 + 36) >> 61)
          sub_20E867F44();
        v53 = v51 - v46;
        if (v53 >> 2 > v52)
          v52 = v53 >> 2;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        v102 = v52;
        if (v52)
        {
          if (v52 >> 61)
            sub_20E877A38();
          v54 = operator new(8 * v52);
          v49 = (uint64_t)((uint64_t)v47->i64 - v46) >> 3;
        }
        else
        {
          v54 = 0;
        }
        v61 = &v54[8 * v49];
        v61[16] = 0u;
        v61[17] = 0u;
        v61[14] = 0u;
        v61[15] = 0u;
        v61[12] = 0u;
        v61[13] = 0u;
        v61[10] = 0u;
        v61[11] = 0u;
        v61[8] = 0u;
        v61[9] = 0u;
        v61[6] = 0u;
        v61[7] = 0u;
        v61[4] = 0u;
        v61[5] = 0u;
        v61[2] = 0u;
        v61[3] = 0u;
        *v61 = 0u;
        v61[1] = 0u;
        if ((int64x2_t *)v46 == v47)
        {
          v63 = &v54[8 * v49];
        }
        else
        {
          if (v48 - 8 >= 0x68)
          {
            v62 = (char *)(v46 + (((unint64_t)v47 - v46) & 0xFFFFFFFFFFFFFFF8));
            v63 = &v54[8 * v49];
            if (v46 + (v48 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v54[v48 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v64 = ((v48 - 8) >> 3) + 1;
              v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              v62 = (char *)&v50[v65 / 0xFFFFFFFFFFFFFFF8];
              v63 = (char *)v61 - v65;
              v66 = &v54[8 * v49 - 16];
              v67 = (__int128 *)(v46 + 8 * v49 - 16);
              v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v69 = *v67;
                *(v66 - 1) = *(v67 - 1);
                *v66 = v69;
                v66 -= 2;
                v67 -= 2;
                v68 -= 4;
              }
              while (v68);
              if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v62 = (char *)(v46 + (((unint64_t)v47 - v46) & 0xFFFFFFFFFFFFFFF8));
            v63 = &v54[8 * v49];
          }
          do
          {
            v70 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            *((_QWORD *)v63 - 1) = v70;
            v63 -= 8;
          }
          while (v62 != (char *)v46);
        }
LABEL_39:
        v71 = v61 + 18;
        v72 = (char *)v47 - (char *)v50;
        if (v72)
          memmove(v61 + 18, v50, v72);
        *(_QWORD *)(v4 + 16) = v63;
        *(_QWORD *)(v4 + 24) = (char *)v71 + v72;
        *(_QWORD *)(v4 + 32) = &v54[8 * v102];
        v6 = a2;
        v5 = v101;
        result = 24;
        v11 = v105;
        v12 = v104;
        if (v46)
        {
          operator delete((void *)v46);
          v12 = v104;
          v11 = v105;
          result = 24;
        }
        goto LABEL_74;
      }
      v55 = (char *)v47 - (char *)v50;
      if ((unint64_t)((char *)v47 - (char *)v50) > 0x11F)
      {
        v57 = *(uint64_t **)(v4 + 24);
        v56 = 36;
        goto LABEL_50;
      }
      v56 = v55 >> 3;
      v57 = &v47->i64[36 - (v55 >> 3)];
      v58 = v55 & 0xFFFFFFFFFFFFFFF8;
      v59 = 280 - v58;
      if (280 - v58 >= 0x68)
      {
        v73 = &v106 < (uint64_t *)((char *)v47[18].i64 - v58);
        if (v47 >= (int64x2_t *)&v107 || (v60 = *(uint64_t **)(v4 + 24), !v73))
        {
          v74 = (v59 >> 3) + 1;
          v60 = &v47->i64[v74 & 0x3FFFFFFFFFFFFFFCLL];
          v75 = vdupq_lane_s64(v106, 0);
          v76 = v47 + 1;
          v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v76[-1] = v75;
            *v76 = v75;
            v76 += 2;
            v77 -= 4;
          }
          while (v77);
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v57;
            if (v47 == (int64x2_t *)v50)
              goto LABEL_74;
LABEL_50:
            v78 = (char *)v57 - (char *)(v50 + 36);
            v79 = v78 >> 3;
            v80 = (int64x2_t *)(v57 - 36);
            v81 = (char *)v57;
            if (v57 - 36 < (uint64_t *)v47)
            {
              v82 = (v48 & 0xFFFFFFFFFFFFFFF8) + v78;
              v83 = v46 + v82 + 8;
              if ((unint64_t)v47 > v83)
                v83 = (unint64_t)v47;
              v84 = v83 + ~v46 - v82;
              if (v84 >= 0x58)
              {
                v85 = (v84 >> 3) + 1;
                v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
                v80 = (int64x2_t *)((char *)v80 + v86 * 8);
                v81 = (char *)&v57[v86];
                v87 = v57 + 2;
                v88 = (__int128 *)(v46 + 8 * v79 + 8 * v49 + 16);
                v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v90 = *v88;
                  *(v87 - 1) = *(v88 - 1);
                  *v87 = v90;
                  v87 += 2;
                  v88 += 2;
                  v89 -= 4;
                }
                while (v89);
                if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v81 = (char *)v57;
              }
              do
              {
                v91 = v80->i64[0];
                v80 = (int64x2_t *)((char *)v80 + 8);
                *(_QWORD *)v81 = v91;
                v81 += 8;
              }
              while (v80 < v47);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v81;
            if (v57 != v50 + 36)
            {
              v92 = v56;
              memmove(&v57[-v79], (const void *)(v46 + (((unint64_t)v47 - v46) & 0xFFFFFFFFFFFFFFF8)), v78);
              v56 = v92;
              v49 = (uint64_t)((uint64_t)v47->i64 - v46) >> 3;
              v12 = v104;
              v11 = v105;
              result = 24;
            }
            v93 = (const double *)&v106;
            if (v50 <= &v106)
            {
              v94 = 288;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v106)
                v94 = 0;
              v93 = (const double *)((char *)&v106 + v94);
            }
            if (v56 >= 0xA)
            {
              if (v50 >= (uint64_t *)v93 + 1
                || (unint64_t)v93 >= v46 + (((unint64_t)v47 - v46) & 0xFFFFFFFFFFFFFFF8) + 8 * v56)
              {
                v50 += v56 & 0xFFFFFFFFFFFFFFFCLL;
                v95 = v56 & 3;
                v96 = vld1q_dup_f64(v93);
                v97 = (float64x2_t *)(v46 + 8 * v49 + 16);
                v98 = v56 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v97[-1] = v96;
                  *v97 = v96;
                  v97 += 2;
                  v98 -= 4;
                }
                while (v98);
                if (v56 == (v56 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v95 = v56;
              }
            }
            else
            {
              v95 = v56;
            }
            do
            {
              *v50++ = *(_QWORD *)v93;
              --v95;
            }
            while (v95);
LABEL_74:
            v13 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 288);
            v8 = (_QWORD *)(v4 + 16);
            v7 = v103;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v60 = *(uint64_t **)(v4 + 24);
      }
      do
        *v60++ = v106;
      while (v60 != v57);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E7068(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64x2_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  _OWORD *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  size_t v84;
  BOOL v85;
  uint64_t v86;
  int64x2_t v87;
  int64x2_t *v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  int64x2_t *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  const double *v104;
  uint64_t v105;
  unint64_t v106;
  float64x2_t v107;
  float64x2_t *v108;
  unint64_t v109;
  unint64_t v110;
  int v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v110 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 24;
      v112 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = 9 * v7 + v110;
      v116 = v11;
      v115 = v12;
      v114 = v7;
      while (1)
      {
        v50 = *v6;
        v51 = *((unsigned int *)v6 + 4);
        v52 = *(_QWORD *)(v11 + 8 * v10);
        if (v52 == -1)
          break;
        v13 = (_OWORD *)(*v8 + 8 * v52);
LABEL_9:
        v14 = (__int128 *)(v50 + 8 * (v5 + 6 * v10 + v51 * v12));
        v16 = v14[1];
        v15 = v14[2];
        v17 = *v14;
        v18 = (__int128 *)((char *)v14 + 8 * v51);
        v20 = v18[1];
        v19 = v18[2];
        v21 = *v18;
        v22 = &v14[v51];
        v24 = v22[1];
        v23 = v22[2];
        v25 = *v22;
        v26 = (__int128 *)((char *)v14 + 24 * v51);
        v28 = v26[1];
        v27 = v26[2];
        v29 = *v26;
        v30 = &v14[2 * v51];
        v32 = v30[1];
        v31 = v30[2];
        v33 = *v30;
        v34 = (__int128 *)((char *)v14 + 40 * v51);
        v36 = v34[1];
        v35 = v34[2];
        v37 = *v34;
        v38 = &v14[3 * v51];
        v40 = v38[1];
        v39 = v38[2];
        v41 = *v38;
        v42 = (__int128 *)((char *)v14 + 56 * v51);
        v44 = v42[1];
        v43 = v42[2];
        v45 = *v42;
        v46 = &v14[4 * v51];
        v48 = v46[1];
        v47 = v46[2];
        v49 = *v46;
        *v13 = v17;
        v13[1] = v16;
        v13[2] = v15;
        v13[3] = v21;
        v13[4] = v20;
        v13[5] = v19;
        v13[6] = v25;
        v13[7] = v24;
        v13[8] = v23;
        v13[9] = v29;
        v13[10] = v28;
        v13[11] = v27;
        v13[12] = v33;
        v13[13] = v32;
        v13[14] = v31;
        v13[15] = v37;
        v13[16] = v36;
        v13[17] = v35;
        v13[18] = v41;
        v13[19] = v40;
        v13[20] = v39;
        v13[21] = v45;
        v13[22] = v44;
        v13[23] = v43;
        v13[24] = v49;
        v13[25] = v48;
        v13[26] = v47;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v53 = *(_QWORD *)(v4 + 80);
      if (v53)
      {
        v55 = *(_QWORD *)(v4 + 48);
        v54 = *(_QWORD *)(v4 + 56);
        v56 = ((v54 - v55) << 6) - 1;
        v57 = *(_QWORD *)(v4 + 72);
        if (v54 == v55)
          v56 = 0;
        v13 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v55 + (((unint64_t)(v57 + v53 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v57 + v53 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v53 - 1;
        if ((unint64_t)(v56 - (v53 + v57) + 1) >= 0x400)
        {
          operator delete(*(void **)(v54 - 8));
          v12 = v115;
          v11 = v116;
          result = 24;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_71;
      }
      v117 = 0;
      v58 = *(_QWORD *)(v4 + 16);
      v59 = *(int64x2_t **)(v4 + 24);
      v60 = (unint64_t)v59 - v58;
      v61 = (uint64_t)((uint64_t)v59->i64 - v58) >> 3;
      v62 = (uint64_t *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8));
      v63 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v63 - (_QWORD)v59) < 0x1B0)
      {
        v64 = v61 + 54;
        if ((unint64_t)(v61 + 54) >> 61)
          sub_20E867F44();
        v65 = v63 - v58;
        if (v65 >> 2 > v64)
          v64 = v65 >> 2;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        v113 = v64;
        if (v64)
        {
          if (v64 >> 61)
            sub_20E877A38();
          v66 = operator new(8 * v64);
          v61 = (uint64_t)((uint64_t)v59->i64 - v58) >> 3;
        }
        else
        {
          v66 = 0;
        }
        v73 = &v66[8 * v61];
        v73[25] = 0u;
        v73[26] = 0u;
        v73[23] = 0u;
        v73[24] = 0u;
        v73[21] = 0u;
        v73[22] = 0u;
        v73[19] = 0u;
        v73[20] = 0u;
        v73[17] = 0u;
        v73[18] = 0u;
        v73[15] = 0u;
        v73[16] = 0u;
        v73[13] = 0u;
        v73[14] = 0u;
        v73[11] = 0u;
        v73[12] = 0u;
        v73[9] = 0u;
        v73[10] = 0u;
        v73[7] = 0u;
        v73[8] = 0u;
        v73[5] = 0u;
        v73[6] = 0u;
        v73[3] = 0u;
        v73[4] = 0u;
        v73[1] = 0u;
        v73[2] = 0u;
        *v73 = 0u;
        if ((int64x2_t *)v58 == v59)
        {
          v75 = &v66[8 * v61];
        }
        else
        {
          if (v60 - 8 >= 0x68)
          {
            v74 = (char *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8));
            v75 = &v66[8 * v61];
            if (v58 + (v60 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v66[v60 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v76 = ((v60 - 8) >> 3) + 1;
              v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
              v74 = (char *)&v62[v77 / 0xFFFFFFFFFFFFFFF8];
              v75 = (char *)v73 - v77;
              v78 = &v66[8 * v61 - 16];
              v79 = (__int128 *)(v58 + 8 * v61 - 16);
              v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v81 = *v79;
                *(v78 - 1) = *(v79 - 1);
                *v78 = v81;
                v78 -= 2;
                v79 -= 2;
                v80 -= 4;
              }
              while (v80);
              if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v74 = (char *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8));
            v75 = &v66[8 * v61];
          }
          do
          {
            v82 = *((_QWORD *)v74 - 1);
            v74 -= 8;
            *((_QWORD *)v75 - 1) = v82;
            v75 -= 8;
          }
          while (v74 != (char *)v58);
        }
LABEL_39:
        v83 = v73 + 27;
        v84 = (char *)v59 - (char *)v62;
        if (v84)
          memmove(v73 + 27, v62, v84);
        *(_QWORD *)(v4 + 16) = v75;
        *(_QWORD *)(v4 + 24) = (char *)v83 + v84;
        *(_QWORD *)(v4 + 32) = &v66[8 * v113];
        v6 = a2;
        v5 = v112;
        result = 24;
        v11 = v116;
        v12 = v115;
        if (v58)
        {
          operator delete((void *)v58);
          v12 = v115;
          v11 = v116;
          result = 24;
        }
        goto LABEL_70;
      }
      v67 = (char *)v59 - (char *)v62;
      if ((unint64_t)((char *)v59 - (char *)v62) > 0x1AF)
      {
        v69 = *(uint64_t **)(v4 + 24);
        v68 = 54;
        goto LABEL_50;
      }
      v68 = v67 >> 3;
      v69 = &v59->i64[54 - (v67 >> 3)];
      v70 = v67 & 0xFFFFFFFFFFFFFFF8;
      v71 = 424 - v70;
      if (424 - v70 >= 0x68)
      {
        v85 = &v117 < (uint64_t *)((char *)v59[27].i64 - v70);
        if (v59 >= (int64x2_t *)&v118 || (v72 = *(uint64_t **)(v4 + 24), !v85))
        {
          v86 = (v71 >> 3) + 1;
          v72 = &v59->i64[v86 & 0x3FFFFFFFFFFFFFFCLL];
          v87 = vdupq_lane_s64(v117, 0);
          v88 = v59 + 1;
          v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v88[-1] = v87;
            *v88 = v87;
            v88 += 2;
            v89 -= 4;
          }
          while (v89);
          if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v69;
            if (v59 == (int64x2_t *)v62)
              goto LABEL_70;
LABEL_50:
            v90 = (char *)v69 - (char *)(v62 + 54);
            v91 = v90 >> 3;
            v92 = (int64x2_t *)(v69 - 54);
            v93 = (char *)v69;
            if (v69 - 54 < (uint64_t *)v59)
            {
              v94 = (v60 & 0xFFFFFFFFFFFFFFF8) + v90;
              v95 = v58 + v94 + 8;
              if ((unint64_t)v59 > v95)
                v95 = (unint64_t)v59;
              v96 = v95 + ~v58 - v94;
              if (v96 >= 0x58)
              {
                v97 = (v96 >> 3) + 1;
                v98 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                v92 = (int64x2_t *)((char *)v92 + v98 * 8);
                v93 = (char *)&v69[v98];
                v99 = v69 + 2;
                v100 = (__int128 *)(v58 + 8 * v91 + 8 * v61 + 16);
                v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v102 = *v100;
                  *(v99 - 1) = *(v100 - 1);
                  *v99 = v102;
                  v99 += 2;
                  v100 += 2;
                  v101 -= 4;
                }
                while (v101);
                if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v93 = (char *)v69;
              }
              do
              {
                v103 = v92->i64[0];
                v92 = (int64x2_t *)((char *)v92 + 8);
                *(_QWORD *)v93 = v103;
                v93 += 8;
              }
              while (v92 < v59);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v93;
            if (v69 != v62 + 54)
            {
              memmove(&v69[-v91], (const void *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8)), v90);
              v61 = (uint64_t)((uint64_t)v59->i64 - v58) >> 3;
              v12 = v115;
              v11 = v116;
              result = 24;
            }
            v104 = (const double *)&v117;
            if (v62 <= &v117)
            {
              v105 = 432;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v117)
                v105 = 0;
              v104 = (const double *)((char *)&v117 + v105);
            }
            if (v68 >= 0xA
              && (v62 >= (uint64_t *)v104 + 1
               || (unint64_t)v104 >= v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8) + 8 * v68))
            {
              v62 += v68 & 0xFFFFFFFFFFFFFFFCLL;
              v106 = v68 & 3;
              v107 = vld1q_dup_f64(v104);
              v108 = (float64x2_t *)(v58 + 8 * v61 + 16);
              v109 = v68 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v108[-1] = v107;
                *v108 = v107;
                v108 += 2;
                v109 -= 4;
              }
              while (v109);
              v5 = v112;
              if (v68 == (v68 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_70;
            }
            else
            {
              v106 = v68;
              v5 = v112;
            }
            do
            {
              *v62++ = *(_QWORD *)v104;
              --v106;
            }
            while (v106);
LABEL_70:
            v13 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 432);
            v8 = (_QWORD *)(v4 + 16);
            v7 = v114;
LABEL_71:
            *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v72 = *(uint64_t **)(v4 + 24);
      }
      do
        *v72++ = v117;
      while (v72 != v69);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E7748(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _OWORD *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  size_t v59;
  BOOL v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64x2_t *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  const double *v80;
  uint64_t v81;
  unint64_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  unint64_t v85;
  unint64_t v86;
  int v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v86 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v88 = a3;
      v90 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = 3 * v7 + v86;
      v93 = result;
      v92 = v11;
      v91 = v7;
      while (1)
      {
        v25 = *v6;
        v26 = *((unsigned int *)v6 + 4);
        v27 = *(_QWORD *)(result + 8 * v10);
        if (v27 == -1)
          break;
        v12 = (_OWORD *)(*v8 + 8 * v27);
LABEL_9:
        v13 = (__int128 *)(v25 + 8 * (v5 + 6 * v10 + v26 * v11));
        v15 = v13[1];
        v14 = v13[2];
        v16 = *v13;
        v17 = (__int128 *)((char *)v13 + 8 * v26);
        v19 = v17[1];
        v18 = v17[2];
        v20 = *v17;
        v21 = &v13[v26];
        v23 = v21[1];
        v22 = v21[2];
        v24 = *v21;
        *v12 = v16;
        v12[1] = v15;
        v12[2] = v14;
        v12[3] = v20;
        v12[4] = v19;
        v12[5] = v18;
        v12[6] = v24;
        v12[7] = v23;
        v12[8] = v22;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v28 = *(_QWORD *)(v4 + 80);
      if (v28)
      {
        v30 = *(_QWORD *)(v4 + 48);
        v29 = *(_QWORD *)(v4 + 56);
        v31 = ((v29 - v30) << 6) - 1;
        v32 = *(_QWORD *)(v4 + 72);
        if (v29 == v30)
          v31 = 0;
        v12 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(v32 + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v32 + v28 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v28 - 1;
        if ((unint64_t)(v31 - (v28 + v32) + 1) >= 0x400)
        {
          operator delete(*(void **)(v29 - 8));
          v11 = v92;
          result = v93;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v94 = 0;
      v33 = *(_QWORD *)(v4 + 16);
      v34 = *(int64x2_t **)(v4 + 24);
      v35 = (unint64_t)v34 - v33;
      v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
      v37 = (uint64_t *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
      v38 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v38 - (_QWORD)v34) < 0x90)
      {
        v39 = v36 + 18;
        if ((unint64_t)(v36 + 18) >> 61)
          sub_20E867F44();
        v40 = v38 - v33;
        if (v40 >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        v89 = v39;
        if (v39)
        {
          if (v39 >> 61)
            sub_20E877A38();
          v41 = operator new(8 * v39);
          v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
        }
        else
        {
          v41 = 0;
        }
        v48 = &v41[8 * v36];
        v48[7] = 0u;
        v48[8] = 0u;
        v48[5] = 0u;
        v48[6] = 0u;
        v48[3] = 0u;
        v48[4] = 0u;
        v48[1] = 0u;
        v48[2] = 0u;
        *v48 = 0u;
        if ((int64x2_t *)v33 == v34)
        {
          v50 = &v41[8 * v36];
        }
        else
        {
          if (v35 - 8 >= 0x68)
          {
            v49 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v50 = &v41[8 * v36];
            if (v33 + (v35 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v41[v35 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v51 = ((v35 - 8) >> 3) + 1;
              v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
              v49 = (char *)&v37[v52 / 0xFFFFFFFFFFFFFFF8];
              v50 = (char *)v48 - v52;
              v53 = &v41[8 * v36 - 16];
              v54 = (__int128 *)(v33 + 8 * v36 - 16);
              v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v56 = *v54;
                *(v53 - 1) = *(v54 - 1);
                *v53 = v56;
                v53 -= 2;
                v54 -= 2;
                v55 -= 4;
              }
              while (v55);
              if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v49 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v50 = &v41[8 * v36];
          }
          do
          {
            v57 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v50 - 1) = v57;
            v50 -= 8;
          }
          while (v49 != (char *)v33);
        }
LABEL_39:
        v58 = v48 + 9;
        v59 = (char *)v34 - (char *)v37;
        if (v59)
          memmove(v48 + 9, v37, v59);
        *(_QWORD *)(v4 + 16) = v50;
        *(_QWORD *)(v4 + 24) = (char *)v58 + v59;
        *(_QWORD *)(v4 + 32) = &v41[8 * v89];
        v6 = a2;
        v5 = v88;
        result = v93;
        v11 = v92;
        if (v33)
        {
          operator delete((void *)v33);
          v11 = v92;
          result = v93;
        }
        goto LABEL_74;
      }
      v42 = (char *)v34 - (char *)v37;
      if ((unint64_t)((char *)v34 - (char *)v37) > 0x8F)
      {
        v44 = *(uint64_t **)(v4 + 24);
        v43 = 18;
        goto LABEL_50;
      }
      v43 = v42 >> 3;
      v44 = &v34->i64[18 - (v42 >> 3)];
      v45 = v42 & 0xFFFFFFFFFFFFFFF8;
      v46 = 136 - v45;
      if (136 - v45 >= 0x68)
      {
        v60 = &v94 < (uint64_t *)((char *)v34[9].i64 - v45);
        if (v34 >= (int64x2_t *)&v95 || (v47 = *(uint64_t **)(v4 + 24), !v60))
        {
          v61 = (v46 >> 3) + 1;
          v47 = &v34->i64[v61 & 0x3FFFFFFFFFFFFFFCLL];
          v62 = vdupq_lane_s64(v94, 0);
          v63 = v34 + 1;
          v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63[-1] = v62;
            *v63 = v62;
            v63 += 2;
            v64 -= 4;
          }
          while (v64);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v44;
            if (v34 == (int64x2_t *)v37)
              goto LABEL_74;
LABEL_50:
            v65 = (char *)v44 - (char *)(v37 + 18);
            v66 = v65 >> 3;
            v67 = (int64x2_t *)(v44 - 18);
            v68 = (char *)v44;
            if (v44 - 18 < (uint64_t *)v34)
            {
              v69 = (v35 & 0xFFFFFFFFFFFFFFF8) + v65;
              v70 = v33 + v69 + 8;
              if ((unint64_t)v34 > v70)
                v70 = (unint64_t)v34;
              v71 = v70 + ~v33 - v69;
              if (v71 >= 0x58)
              {
                v72 = (v71 >> 3) + 1;
                v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                v67 = (int64x2_t *)((char *)v67 + v73 * 8);
                v68 = (char *)&v44[v73];
                v74 = v44 + 2;
                v75 = (__int128 *)(v33 + 8 * v66 + 8 * v36 + 16);
                v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v77 = *v75;
                  *(v74 - 1) = *(v75 - 1);
                  *v74 = v77;
                  v74 += 2;
                  v75 += 2;
                  v76 -= 4;
                }
                while (v76);
                if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v68 = (char *)v44;
              }
              do
              {
                v78 = v67->i64[0];
                v67 = (int64x2_t *)((char *)v67 + 8);
                *(_QWORD *)v68 = v78;
                v68 += 8;
              }
              while (v67 < v34);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v68;
            if (v44 != v37 + 18)
            {
              v79 = v43;
              memmove(&v44[-v66], (const void *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8)), v65);
              v43 = v79;
              v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
              v11 = v92;
              result = v93;
            }
            v80 = (const double *)&v94;
            if (v37 <= &v94)
            {
              v81 = 144;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v94)
                v81 = 0;
              v80 = (const double *)((char *)&v94 + v81);
            }
            if (v43 >= 0xA)
            {
              if (v37 >= (uint64_t *)v80 + 1
                || (unint64_t)v80 >= v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8) + 8 * v43)
              {
                v37 += v43 & 0xFFFFFFFFFFFFFFFCLL;
                v82 = v43 & 3;
                v83 = vld1q_dup_f64(v80);
                v84 = (float64x2_t *)(v33 + 8 * v36 + 16);
                v85 = v43 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v84[-1] = v83;
                  *v84 = v83;
                  v84 += 2;
                  v85 -= 4;
                }
                while (v85);
                if (v43 == (v43 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v82 = v43;
              }
            }
            else
            {
              v82 = v43;
            }
            do
            {
              *v37++ = *(_QWORD *)v80;
              --v82;
            }
            while (v82);
LABEL_74:
            v12 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 144);
            v8 = v90;
            v7 = v91;
LABEL_75:
            *(_QWORD *)(result + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v47 = *(uint64_t **)(v4 + 24);
      }
      do
        *v47++ = v94;
      while (v47 != v44);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E7D3C(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _OWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  size_t v50;
  BOOL v51;
  uint64_t v52;
  int64x2_t v53;
  int64x2_t *v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  int64x2_t *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  const double *v71;
  uint64_t v72;
  unint64_t v73;
  float64x2_t v74;
  float64x2_t *v75;
  unint64_t v76;
  unint64_t v77;
  int v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v77 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v79 = a3;
      v81 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = v7 + v77;
      v84 = result;
      v83 = v7 + v77;
      v82 = v7;
      while (1)
      {
        v16 = *v6;
        v17 = *((_DWORD *)v6 + 4);
        v18 = *(_QWORD *)(result + 8 * v10);
        if (v18 == -1)
          break;
        v12 = (_OWORD *)(*v8 + 8 * v18);
LABEL_9:
        v13 = (__int128 *)(v16 + 8 * (v5 + 6 * v10 + v17 * v11));
        v14 = *v13;
        v15 = v13[2];
        v12[1] = v13[1];
        v12[2] = v15;
        *v12 = v14;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v19 = *(_QWORD *)(v4 + 80);
      if (v19)
      {
        v21 = *(_QWORD *)(v4 + 48);
        v20 = *(_QWORD *)(v4 + 56);
        v22 = ((v20 - v21) << 6) - 1;
        v23 = *(_QWORD *)(v4 + 72);
        if (v20 == v21)
          v22 = 0;
        v12 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v21 + (((unint64_t)(v23 + v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v23 + v19 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v19 - 1;
        if ((unint64_t)(v22 - (v19 + v23) + 1) >= 0x400)
        {
          operator delete(*(void **)(v20 - 8));
          v11 = v83;
          result = v84;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_74;
      }
      v85 = 0;
      v24 = *(_QWORD *)(v4 + 16);
      v25 = *(int64x2_t **)(v4 + 24);
      v26 = (unint64_t)v25 - v24;
      v27 = (uint64_t)((uint64_t)v25->i64 - v24) >> 3;
      v28 = (uint64_t *)(v24 + (((unint64_t)v25 - v24) & 0xFFFFFFFFFFFFFFF8));
      v29 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v29 - (_QWORD)v25) < 0x30)
      {
        v30 = v27 + 6;
        if ((unint64_t)(v27 + 6) >> 61)
          sub_20E867F44();
        v31 = v29 - v24;
        if (v31 >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        v80 = v30;
        if (v30)
        {
          if (v30 >> 61)
            sub_20E877A38();
          v32 = operator new(8 * v30);
          v27 = (uint64_t)((uint64_t)v25->i64 - v24) >> 3;
          v33 = &v32[8 * v27];
          v33[1] = 0u;
          v33[2] = 0u;
          *v33 = 0u;
          if ((int64x2_t *)v24 != v25)
            goto LABEL_25;
        }
        else
        {
          v32 = 0;
          v33 = (_OWORD *)(8 * v27);
          v33[1] = 0u;
          v33[2] = 0u;
          *v33 = 0u;
          if ((int64x2_t *)v24 != v25)
          {
LABEL_25:
            if (v26 - 8 >= 0x68)
            {
              v34 = (char *)(v24 + (((unint64_t)v25 - v24) & 0xFFFFFFFFFFFFFFF8));
              v35 = (char *)v33;
              if (v24 + (v26 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v32[v26 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v42 = ((v26 - 8) >> 3) + 1;
                v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
                v34 = (char *)&v28[v43 / 0xFFFFFFFFFFFFFFF8];
                v35 = (char *)v33 - v43;
                v44 = &v32[8 * v27 - 16];
                v45 = (__int128 *)(v24 + 8 * v27 - 16);
                v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v47 = *v45;
                  *(v44 - 1) = *(v45 - 1);
                  *v44 = v47;
                  v44 -= 2;
                  v45 -= 2;
                  v46 -= 4;
                }
                while (v46);
                if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_38;
              }
            }
            else
            {
              v34 = (char *)(v24 + (((unint64_t)v25 - v24) & 0xFFFFFFFFFFFFFFF8));
              v35 = (char *)v33;
            }
            do
            {
              v48 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              *((_QWORD *)v35 - 1) = v48;
              v35 -= 8;
            }
            while (v34 != (char *)v24);
LABEL_38:
            v49 = v33 + 3;
            v50 = (char *)v25 - (char *)v28;
            if (v50)
              memmove(v33 + 3, v28, v50);
            *(_QWORD *)(v4 + 16) = v35;
            *(_QWORD *)(v4 + 24) = (char *)v49 + v50;
            *(_QWORD *)(v4 + 32) = &v32[8 * v80];
            v6 = a2;
            v5 = v79;
            result = v84;
            v11 = v83;
            if (v24)
            {
              operator delete((void *)v24);
              v11 = v83;
              result = v84;
            }
            goto LABEL_73;
          }
        }
        v35 = (char *)v33;
        goto LABEL_38;
      }
      v36 = (char *)v25 - (char *)v28;
      if ((unint64_t)((char *)v25 - (char *)v28) > 0x2F)
      {
        v38 = *(uint64_t **)(v4 + 24);
        v37 = 6;
        goto LABEL_49;
      }
      v37 = v36 >> 3;
      v38 = &v25->i64[6 - (v36 >> 3)];
      v39 = v36 & 0xFFFFFFFFFFFFFFF8;
      v40 = 40 - v39;
      if (40 - v39 >= 0x68)
      {
        v51 = &v85 < (uint64_t *)((char *)v25[3].i64 - v39);
        if (v25 >= (int64x2_t *)&v86 || (v41 = *(uint64_t **)(v4 + 24), !v51))
        {
          v52 = (v40 >> 3) + 1;
          v41 = &v25->i64[v52 & 0x3FFFFFFFFFFFFFFCLL];
          v53 = vdupq_lane_s64(v85, 0);
          v54 = v25 + 1;
          v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v54[-1] = v53;
            *v54 = v53;
            v54 += 2;
            v55 -= 4;
          }
          while (v55);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            *(_QWORD *)(v4 + 24) = v38;
            if (v25 == (int64x2_t *)v28)
              goto LABEL_73;
LABEL_49:
            v56 = (char *)v38 - (char *)(v28 + 6);
            v57 = v56 >> 3;
            v58 = (int64x2_t *)(v38 - 6);
            v59 = (char *)v38;
            if (v38 - 6 < (uint64_t *)v25)
            {
              v60 = (v26 & 0xFFFFFFFFFFFFFFF8) + v56;
              v61 = v24 + v60 + 8;
              if ((unint64_t)v25 > v61)
                v61 = (unint64_t)v25;
              v62 = v61 + ~v24 - v60;
              if (v62 >= 0x58)
              {
                v63 = (v62 >> 3) + 1;
                v64 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                v58 = (int64x2_t *)((char *)v58 + v64 * 8);
                v59 = (char *)&v38[v64];
                v65 = v38 + 2;
                v66 = (__int128 *)(v24 + 8 * v57 + 8 * v27 + 16);
                v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v68 = *v66;
                  *(v65 - 1) = *(v66 - 1);
                  *v65 = v68;
                  v65 += 2;
                  v66 += 2;
                  v67 -= 4;
                }
                while (v67);
                if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_58;
              }
              else
              {
                v59 = (char *)v38;
              }
              do
              {
                v69 = v58->i64[0];
                v58 = (int64x2_t *)((char *)v58 + 8);
                *(_QWORD *)v59 = v69;
                v59 += 8;
              }
              while (v58 < v25);
            }
LABEL_58:
            *(_QWORD *)(v4 + 24) = v59;
            if (v38 != v28 + 6)
            {
              v70 = v37;
              memmove(&v38[-v57], (const void *)(v24 + (((unint64_t)v25 - v24) & 0xFFFFFFFFFFFFFFF8)), v56);
              v37 = v70;
              v27 = (uint64_t)((uint64_t)v25->i64 - v24) >> 3;
              v11 = v83;
              result = v84;
            }
            v71 = (const double *)&v85;
            if (v28 <= &v85)
            {
              v72 = 48;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v85)
                v72 = 0;
              v71 = (const double *)((char *)&v85 + v72);
            }
            if (v37 >= 0xA)
            {
              if (v28 >= (uint64_t *)v71 + 1
                || (unint64_t)v71 >= v24 + (((unint64_t)v25 - v24) & 0xFFFFFFFFFFFFFFF8) + 8 * v37)
              {
                v28 += v37 & 0xFFFFFFFFFFFFFFFCLL;
                v73 = v37 & 3;
                v74 = vld1q_dup_f64(v71);
                v75 = (float64x2_t *)(v24 + 8 * v27 + 16);
                v76 = v37 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v75[-1] = v74;
                  *v75 = v74;
                  v75 += 2;
                  v76 -= 4;
                }
                while (v76);
                if (v37 == (v37 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_73;
              }
              else
              {
                v73 = v37;
              }
            }
            else
            {
              v73 = v37;
            }
            do
            {
              *v28++ = *(_QWORD *)v71;
              --v73;
            }
            while (v73);
LABEL_73:
            v12 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 48);
            v8 = v81;
            v7 = v82;
LABEL_74:
            *(_QWORD *)(result + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v41 = *(uint64_t **)(v4 + 24);
      }
      do
        *v41++ = v85;
      while (v41 != v38);
      goto LABEL_48;
    }
  }
  return result;
}

uint64_t sub_20F8E8310(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64x2_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _OWORD *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _OWORD *v62;
  size_t v63;
  BOOL v64;
  uint64_t v65;
  int64x2_t v66;
  int64x2_t *v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64x2_t *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  const double *v84;
  uint64_t v85;
  unint64_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  unint64_t v89;
  unint64_t v90;
  int v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v90 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v92 = a3;
      v94 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = v90 + 4 * v7;
      v97 = result;
      v96 = v11;
      v95 = v7;
      while (1)
      {
        v29 = *v6;
        v30 = *((unsigned int *)v6 + 4);
        v31 = *(_QWORD *)(result + 8 * v10);
        if (v31 == -1)
          break;
        v12 = (_OWORD *)(*v8 + 8 * v31);
LABEL_9:
        v13 = (__int128 *)(v29 + 8 * (v5 + 6 * v10 + v30 * v11));
        v15 = v13[1];
        v14 = v13[2];
        v16 = *v13;
        v17 = (__int128 *)((char *)v13 + 8 * v30);
        v19 = v17[1];
        v18 = v17[2];
        v20 = *v17;
        v21 = &v13[v30];
        v23 = v21[1];
        v22 = v21[2];
        v24 = *v21;
        v25 = (__int128 *)((char *)v13 + 24 * v30);
        v27 = v25[1];
        v26 = v25[2];
        v28 = *v25;
        *v12 = v16;
        v12[1] = v15;
        v12[2] = v14;
        v12[3] = v20;
        v12[4] = v19;
        v12[5] = v18;
        v12[6] = v24;
        v12[7] = v23;
        v12[8] = v22;
        v12[9] = v28;
        v12[10] = v27;
        v12[11] = v26;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v32 = *(_QWORD *)(v4 + 80);
      if (v32)
      {
        v34 = *(_QWORD *)(v4 + 48);
        v33 = *(_QWORD *)(v4 + 56);
        v35 = ((v33 - v34) << 6) - 1;
        v36 = *(_QWORD *)(v4 + 72);
        if (v33 == v34)
          v35 = 0;
        v12 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v34 + (((unint64_t)(v36 + v32 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v36 + v32 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v32 - 1;
        if ((unint64_t)(v35 - (v32 + v36) + 1) >= 0x400)
        {
          operator delete(*(void **)(v33 - 8));
          v11 = v96;
          result = v97;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v98 = 0;
      v37 = *(_QWORD *)(v4 + 16);
      v38 = *(int64x2_t **)(v4 + 24);
      v39 = (unint64_t)v38 - v37;
      v40 = (uint64_t)((uint64_t)v38->i64 - v37) >> 3;
      v41 = (uint64_t *)(v37 + (((unint64_t)v38 - v37) & 0xFFFFFFFFFFFFFFF8));
      v42 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v42 - (_QWORD)v38) < 0xC0)
      {
        v43 = v40 + 24;
        if ((unint64_t)(v40 + 24) >> 61)
          sub_20E867F44();
        v44 = v42 - v37;
        if (v44 >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        v93 = v43;
        if (v43)
        {
          if (v43 >> 61)
            sub_20E877A38();
          v45 = operator new(8 * v43);
          v40 = (uint64_t)((uint64_t)v38->i64 - v37) >> 3;
        }
        else
        {
          v45 = 0;
        }
        v52 = &v45[8 * v40];
        v52[10] = 0u;
        v52[11] = 0u;
        v52[8] = 0u;
        v52[9] = 0u;
        v52[6] = 0u;
        v52[7] = 0u;
        v52[4] = 0u;
        v52[5] = 0u;
        v52[2] = 0u;
        v52[3] = 0u;
        *v52 = 0u;
        v52[1] = 0u;
        if ((int64x2_t *)v37 == v38)
        {
          v54 = &v45[8 * v40];
        }
        else
        {
          if (v39 - 8 >= 0x68)
          {
            v53 = (char *)(v37 + (((unint64_t)v38 - v37) & 0xFFFFFFFFFFFFFFF8));
            v54 = &v45[8 * v40];
            if (v37 + (v39 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v45[v39 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v55 = ((v39 - 8) >> 3) + 1;
              v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
              v53 = (char *)&v41[v56 / 0xFFFFFFFFFFFFFFF8];
              v54 = (char *)v52 - v56;
              v57 = &v45[8 * v40 - 16];
              v58 = (__int128 *)(v37 + 8 * v40 - 16);
              v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v60 = *v58;
                *(v57 - 1) = *(v58 - 1);
                *v57 = v60;
                v57 -= 2;
                v58 -= 2;
                v59 -= 4;
              }
              while (v59);
              if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v53 = (char *)(v37 + (((unint64_t)v38 - v37) & 0xFFFFFFFFFFFFFFF8));
            v54 = &v45[8 * v40];
          }
          do
          {
            v61 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            *((_QWORD *)v54 - 1) = v61;
            v54 -= 8;
          }
          while (v53 != (char *)v37);
        }
LABEL_39:
        v62 = v52 + 12;
        v63 = (char *)v38 - (char *)v41;
        if (v63)
          memmove(v52 + 12, v41, v63);
        *(_QWORD *)(v4 + 16) = v54;
        *(_QWORD *)(v4 + 24) = (char *)v62 + v63;
        *(_QWORD *)(v4 + 32) = &v45[8 * v93];
        v6 = a2;
        v5 = v92;
        result = v97;
        v11 = v96;
        if (v37)
        {
          operator delete((void *)v37);
          v11 = v96;
          result = v97;
        }
        goto LABEL_74;
      }
      v46 = (char *)v38 - (char *)v41;
      if ((unint64_t)((char *)v38 - (char *)v41) > 0xBF)
      {
        v48 = *(uint64_t **)(v4 + 24);
        v47 = 24;
        goto LABEL_50;
      }
      v47 = v46 >> 3;
      v48 = &v38->i64[24 - (v46 >> 3)];
      v49 = v46 & 0xFFFFFFFFFFFFFFF8;
      v50 = 184 - v49;
      if (184 - v49 >= 0x68)
      {
        v64 = &v98 < (uint64_t *)((char *)v38[12].i64 - v49);
        if (v38 >= (int64x2_t *)&v99 || (v51 = *(uint64_t **)(v4 + 24), !v64))
        {
          v65 = (v50 >> 3) + 1;
          v51 = &v38->i64[v65 & 0x3FFFFFFFFFFFFFFCLL];
          v66 = vdupq_lane_s64(v98, 0);
          v67 = v38 + 1;
          v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67[-1] = v66;
            *v67 = v66;
            v67 += 2;
            v68 -= 4;
          }
          while (v68);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v48;
            if (v38 == (int64x2_t *)v41)
              goto LABEL_74;
LABEL_50:
            v69 = (char *)v48 - (char *)(v41 + 24);
            v70 = v69 >> 3;
            v71 = (int64x2_t *)(v48 - 24);
            v72 = (char *)v48;
            if (v48 - 24 < (uint64_t *)v38)
            {
              v73 = (v39 & 0xFFFFFFFFFFFFFFF8) + v69;
              v74 = v37 + v73 + 8;
              if ((unint64_t)v38 > v74)
                v74 = (unint64_t)v38;
              v75 = v74 + ~v37 - v73;
              if (v75 >= 0x58)
              {
                v76 = (v75 >> 3) + 1;
                v77 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                v71 = (int64x2_t *)((char *)v71 + v77 * 8);
                v72 = (char *)&v48[v77];
                v78 = v48 + 2;
                v79 = (__int128 *)(v37 + 8 * v70 + 8 * v40 + 16);
                v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v81 = *v79;
                  *(v78 - 1) = *(v79 - 1);
                  *v78 = v81;
                  v78 += 2;
                  v79 += 2;
                  v80 -= 4;
                }
                while (v80);
                if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v72 = (char *)v48;
              }
              do
              {
                v82 = v71->i64[0];
                v71 = (int64x2_t *)((char *)v71 + 8);
                *(_QWORD *)v72 = v82;
                v72 += 8;
              }
              while (v71 < v38);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v72;
            if (v48 != v41 + 24)
            {
              v83 = v47;
              memmove(&v48[-v70], (const void *)(v37 + (((unint64_t)v38 - v37) & 0xFFFFFFFFFFFFFFF8)), v69);
              v47 = v83;
              v40 = (uint64_t)((uint64_t)v38->i64 - v37) >> 3;
              v11 = v96;
              result = v97;
            }
            v84 = (const double *)&v98;
            if (v41 <= &v98)
            {
              v85 = 192;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v98)
                v85 = 0;
              v84 = (const double *)((char *)&v98 + v85);
            }
            if (v47 >= 0xA)
            {
              if (v41 >= (uint64_t *)v84 + 1
                || (unint64_t)v84 >= v37 + (((unint64_t)v38 - v37) & 0xFFFFFFFFFFFFFFF8) + 8 * v47)
              {
                v41 += v47 & 0xFFFFFFFFFFFFFFFCLL;
                v86 = v47 & 3;
                v87 = vld1q_dup_f64(v84);
                v88 = (float64x2_t *)(v37 + 8 * v40 + 16);
                v89 = v47 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v88[-1] = v87;
                  *v88 = v87;
                  v88 += 2;
                  v89 -= 4;
                }
                while (v89);
                if (v47 == (v47 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v86 = v47;
              }
            }
            else
            {
              v86 = v47;
            }
            do
            {
              *v41++ = *(_QWORD *)v84;
              --v86;
            }
            while (v86);
LABEL_74:
            v12 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 192);
            v8 = v94;
            v7 = v95;
LABEL_75:
            *(_QWORD *)(result + 8 * v10) = ((uint64_t)v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v51 = *(uint64_t **)(v4 + 24);
      }
      do
        *v51++ = v98;
      while (v51 != v48);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E8924(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64x2_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  _OWORD *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  size_t v84;
  BOOL v85;
  uint64_t v86;
  int64x2_t v87;
  int64x2_t *v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  int64x2_t *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  const double *v105;
  uint64_t v106;
  unint64_t v107;
  float64x2_t v108;
  float64x2_t *v109;
  unint64_t v110;
  unint64_t v111;
  int v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v111 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 40;
      v113 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = v111 + 6 * v7;
      v117 = v11;
      v116 = v12;
      v115 = v7;
      while (1)
      {
        v50 = *v6;
        v51 = *((unsigned int *)v6 + 4);
        v52 = *(_QWORD *)(v11 + 8 * v10);
        if (v52 == -1)
          break;
        v13 = *v8 + 8 * v52;
LABEL_9:
        v14 = (__int128 *)(v50 + 8 * (9 * v10 + v5 + v51 * v12));
        v15 = *((_QWORD *)v14 + 8);
        v17 = v14[2];
        v16 = v14[3];
        v19 = *v14;
        v18 = v14[1];
        v20 = (__int128 *)((char *)v14 + 8 * v51);
        v21 = *((_QWORD *)v20 + 8);
        v23 = v20[2];
        v22 = v20[3];
        v25 = *v20;
        v24 = v20[1];
        v26 = &v14[v51];
        v27 = *((_QWORD *)v26 + 8);
        v29 = v26[2];
        v28 = v26[3];
        v31 = *v26;
        v30 = v26[1];
        v32 = (__int128 *)((char *)v14 + 24 * v51);
        v33 = *((_QWORD *)v32 + 8);
        v35 = v32[2];
        v34 = v32[3];
        v36 = *v32;
        v37 = v32[1];
        v38 = &v14[2 * v51];
        v39 = *((_QWORD *)v38 + 8);
        v41 = v38[2];
        v40 = v38[3];
        v42 = *v38;
        v43 = v38[1];
        v44 = (__int128 *)((char *)v14 + 40 * v51);
        v45 = *((_QWORD *)v44 + 8);
        v47 = v44[2];
        v46 = v44[3];
        v49 = *v44;
        v48 = v44[1];
        *(_OWORD *)v13 = v19;
        *(_OWORD *)(v13 + 16) = v18;
        *(_OWORD *)(v13 + 32) = v17;
        *(_OWORD *)(v13 + 48) = v16;
        *(_QWORD *)(v13 + 64) = v15;
        *(_OWORD *)(v13 + 72) = v25;
        *(_OWORD *)(v13 + 88) = v24;
        *(_OWORD *)(v13 + 104) = v23;
        *(_OWORD *)(v13 + 120) = v22;
        *(_QWORD *)(v13 + 136) = v21;
        *(_OWORD *)(v13 + 144) = v31;
        *(_OWORD *)(v13 + 160) = v30;
        *(_OWORD *)(v13 + 176) = v29;
        *(_OWORD *)(v13 + 192) = v28;
        *(_QWORD *)(v13 + 208) = v27;
        *(_OWORD *)(v13 + 232) = v37;
        *(_OWORD *)(v13 + 248) = v35;
        *(_QWORD *)(v13 + 280) = v33;
        *(_OWORD *)(v13 + 216) = v36;
        *(_OWORD *)(v13 + 264) = v34;
        *(_OWORD *)(v13 + 288) = v42;
        *(_OWORD *)(v13 + 304) = v43;
        *(_OWORD *)(v13 + 320) = v41;
        *(_OWORD *)(v13 + 336) = v40;
        *(_QWORD *)(v13 + 352) = v39;
        *(_OWORD *)(v13 + 360) = v49;
        *(_OWORD *)(v13 + 376) = v48;
        *(_OWORD *)(v13 + 392) = v47;
        *(_OWORD *)(v13 + 408) = v46;
        *(_QWORD *)(v13 + 424) = v45;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v53 = *(_QWORD *)(v4 + 80);
      if (v53)
      {
        v55 = *(_QWORD *)(v4 + 48);
        v54 = *(_QWORD *)(v4 + 56);
        v56 = ((v54 - v55) << 6) - 1;
        v57 = *(_QWORD *)(v4 + 72);
        if (v54 == v55)
          v56 = 0;
        v13 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v55 + (((unint64_t)(v57 + v53 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v57 + v53 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v53 - 1;
        if ((unint64_t)(v56 - (v53 + v57) + 1) >= 0x400)
        {
          operator delete(*(void **)(v54 - 8));
          v12 = v116;
          v11 = v117;
          result = 40;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_71;
      }
      v118 = 0;
      v58 = *(_QWORD *)(v4 + 16);
      v59 = *(int64x2_t **)(v4 + 24);
      v60 = (unint64_t)v59 - v58;
      v61 = (uint64_t)((uint64_t)v59->i64 - v58) >> 3;
      v62 = (uint64_t *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8));
      v63 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v63 - (_QWORD)v59) < 0x1B0)
      {
        v64 = v61 + 54;
        if ((unint64_t)(v61 + 54) >> 61)
          sub_20E867F44();
        v65 = v63 - v58;
        if (v65 >> 2 > v64)
          v64 = v65 >> 2;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        v114 = v64;
        if (v64)
        {
          if (v64 >> 61)
            sub_20E877A38();
          v66 = operator new(8 * v64);
          v61 = (uint64_t)((uint64_t)v59->i64 - v58) >> 3;
        }
        else
        {
          v66 = 0;
        }
        v73 = &v66[8 * v61];
        v73[25] = 0u;
        v73[26] = 0u;
        v73[23] = 0u;
        v73[24] = 0u;
        v73[21] = 0u;
        v73[22] = 0u;
        v73[19] = 0u;
        v73[20] = 0u;
        v73[17] = 0u;
        v73[18] = 0u;
        v73[15] = 0u;
        v73[16] = 0u;
        v73[13] = 0u;
        v73[14] = 0u;
        v73[11] = 0u;
        v73[12] = 0u;
        v73[9] = 0u;
        v73[10] = 0u;
        v73[7] = 0u;
        v73[8] = 0u;
        v73[5] = 0u;
        v73[6] = 0u;
        v73[3] = 0u;
        v73[4] = 0u;
        v73[1] = 0u;
        v73[2] = 0u;
        *v73 = 0u;
        if ((int64x2_t *)v58 == v59)
        {
          v75 = &v66[8 * v61];
        }
        else
        {
          if (v60 - 8 >= 0x68)
          {
            v74 = (char *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8));
            v75 = &v66[8 * v61];
            if (v58 + (v60 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v66[v60 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v76 = ((v60 - 8) >> 3) + 1;
              v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
              v74 = (char *)&v62[v77 / 0xFFFFFFFFFFFFFFF8];
              v75 = (char *)v73 - v77;
              v78 = &v66[8 * v61 - 16];
              v79 = (__int128 *)(v58 + 8 * v61 - 16);
              v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v81 = *v79;
                *(v78 - 1) = *(v79 - 1);
                *v78 = v81;
                v78 -= 2;
                v79 -= 2;
                v80 -= 4;
              }
              while (v80);
              if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v74 = (char *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8));
            v75 = &v66[8 * v61];
          }
          do
          {
            v82 = *((_QWORD *)v74 - 1);
            v74 -= 8;
            *((_QWORD *)v75 - 1) = v82;
            v75 -= 8;
          }
          while (v74 != (char *)v58);
        }
LABEL_39:
        v83 = v73 + 27;
        v84 = (char *)v59 - (char *)v62;
        if (v84)
          memmove(v73 + 27, v62, v84);
        *(_QWORD *)(v4 + 16) = v75;
        *(_QWORD *)(v4 + 24) = (char *)v83 + v84;
        *(_QWORD *)(v4 + 32) = &v66[8 * v114];
        v6 = a2;
        v5 = v113;
        result = 40;
        v11 = v117;
        v12 = v116;
        if (v58)
        {
          operator delete((void *)v58);
          v12 = v116;
          v11 = v117;
          result = 40;
        }
        goto LABEL_70;
      }
      v67 = (char *)v59 - (char *)v62;
      if ((unint64_t)((char *)v59 - (char *)v62) > 0x1AF)
      {
        v69 = *(uint64_t **)(v4 + 24);
        v68 = 54;
        goto LABEL_50;
      }
      v68 = v67 >> 3;
      v69 = &v59->i64[54 - (v67 >> 3)];
      v70 = v67 & 0xFFFFFFFFFFFFFFF8;
      v71 = 424 - v70;
      if (424 - v70 >= 0x68)
      {
        v85 = &v118 < (uint64_t *)((char *)v59[27].i64 - v70);
        if (v59 >= (int64x2_t *)&v119 || (v72 = *(uint64_t **)(v4 + 24), !v85))
        {
          v86 = (v71 >> 3) + 1;
          v72 = &v59->i64[v86 & 0x3FFFFFFFFFFFFFFCLL];
          v87 = vdupq_lane_s64(v118, 0);
          v88 = v59 + 1;
          v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v88[-1] = v87;
            *v88 = v87;
            v88 += 2;
            v89 -= 4;
          }
          while (v89);
          if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v69;
            if (v59 == (int64x2_t *)v62)
              goto LABEL_70;
LABEL_50:
            v90 = (char *)v69 - (char *)(v62 + 54);
            v91 = v90 >> 3;
            v92 = (int64x2_t *)(v69 - 54);
            v93 = (char *)v69;
            if (v69 - 54 < (uint64_t *)v59)
            {
              v94 = (v60 & 0xFFFFFFFFFFFFFFF8) + v90;
              v95 = v58 + v94 + 8;
              if ((unint64_t)v59 > v95)
                v95 = (unint64_t)v59;
              v96 = v95 + ~v58 - v94;
              if (v96 >= 0x58)
              {
                v97 = (v96 >> 3) + 1;
                v98 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                v92 = (int64x2_t *)((char *)v92 + v98 * 8);
                v93 = (char *)&v69[v98];
                v99 = v69 + 2;
                v100 = (__int128 *)(v58 + 8 * v91 + 8 * v61 + 16);
                v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v102 = *v100;
                  *(v99 - 1) = *(v100 - 1);
                  *v99 = v102;
                  v99 += 2;
                  v100 += 2;
                  v101 -= 4;
                }
                while (v101);
                if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v93 = (char *)v69;
              }
              do
              {
                v103 = v92->i64[0];
                v92 = (int64x2_t *)((char *)v92 + 8);
                *(_QWORD *)v93 = v103;
                v93 += 8;
              }
              while (v92 < v59);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v93;
            if (v69 != v62 + 54)
            {
              v104 = v68;
              memmove(&v69[-v91], (const void *)(v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8)), v90);
              v68 = v104;
              v61 = (uint64_t)((uint64_t)v59->i64 - v58) >> 3;
              v12 = v116;
              v11 = v117;
              result = 40;
            }
            v105 = (const double *)&v118;
            if (v62 <= &v118)
            {
              v106 = 432;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v118)
                v106 = 0;
              v105 = (const double *)((char *)&v118 + v106);
            }
            if (v68 >= 0xA
              && (v62 >= (uint64_t *)v105 + 1
               || (unint64_t)v105 >= v58 + (((unint64_t)v59 - v58) & 0xFFFFFFFFFFFFFFF8) + 8 * v68))
            {
              v62 += v68 & 0xFFFFFFFFFFFFFFFCLL;
              v107 = v68 & 3;
              v108 = vld1q_dup_f64(v105);
              v109 = (float64x2_t *)(v58 + 8 * v61 + 16);
              v110 = v68 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v109[-1] = v108;
                *v109 = v108;
                v109 += 2;
                v110 -= 4;
              }
              while (v110);
              v5 = v113;
              if (v68 == (v68 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_70;
            }
            else
            {
              v107 = v68;
              v5 = v113;
            }
            do
            {
              *v62++ = *(_QWORD *)v105;
              --v107;
            }
            while (v107);
LABEL_70:
            v13 = *(_QWORD *)(v4 + 24) - 432;
            v8 = (_QWORD *)(v4 + 16);
            v7 = v115;
LABEL_71:
            *(_QWORD *)(v11 + 8 * v10) = (v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v72 = *(uint64_t **)(v4 + 24);
      }
      do
        *v72++ = v118;
      while (v72 != v69);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E8FF8(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64x2_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  size_t v91;
  BOOL v92;
  uint64_t v93;
  int64x2_t v94;
  int64x2_t *v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  int64x2_t *v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  unint64_t v116;
  unint64_t v117;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139[2];
  uint64_t v140[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v117 = HIDWORD(a3);
      LODWORD(v9) = 1;
      result = 40;
      v119 = a3;
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = 9 * v7 + v117;
      v120 = v7;
      v122 = v11;
      v121 = v12;
      while (1)
      {
        v55 = *v6;
        v56 = *((unsigned int *)v6 + 4);
        v57 = *(_QWORD *)(v11 + 8 * v10);
        if (v57 == -1)
          break;
        v13 = *v8 + 8 * v57;
LABEL_9:
        v14 = (__int128 *)(v55 + 8 * (9 * v10 + v5 + v56 * v12));
        v137 = *((_QWORD *)v14 + 8);
        v133 = v14[3];
        v129 = v14[2];
        v15 = *v14;
        v125 = v14[1];
        v16 = (__int128 *)((char *)v14 + 8 * v56);
        v135 = *((_QWORD *)v16 + 8);
        v131 = v16[3];
        v17 = v16[1];
        v124 = v16[2];
        v18 = *v16;
        v19 = &v14[v56];
        v132 = *((_QWORD *)v19 + 8);
        v20 = v19[2];
        v128 = v19[3];
        v21 = *v19;
        v22 = v19[1];
        v23 = (__int128 *)((char *)v14 + 24 * v56);
        v24 = *((_QWORD *)v23 + 8);
        v25 = v23[2];
        v126 = v23[3];
        v27 = *v23;
        v26 = v23[1];
        v28 = &v14[2 * v56];
        v130 = *((_QWORD *)v28 + 8);
        v29 = v28[2];
        v123 = v28[3];
        v30 = *v28;
        v31 = v28[1];
        v32 = (__int128 *)((char *)v14 + 40 * v56);
        v127 = *((_QWORD *)v32 + 8);
        v34 = v32[2];
        v33 = v32[3];
        v36 = *v32;
        v35 = v32[1];
        v37 = &v14[3 * v56];
        v38 = *((_QWORD *)v37 + 8);
        v39 = (__int128 *)((char *)v14 + 56 * v56);
        v40 = &v14[4 * v56];
        v41 = v37[2];
        v42 = v37[3];
        v43 = *v37;
        v44 = v37[1];
        v45 = *((_QWORD *)v39 + 8);
        v46 = v39[2];
        v47 = v39[3];
        v49 = *v39;
        v48 = v39[1];
        v50 = *((_QWORD *)v40 + 8);
        v51 = v40[2];
        v52 = v40[3];
        v53 = *v40;
        v54 = v40[1];
        *(_OWORD *)v13 = v15;
        *(_OWORD *)(v13 + 16) = v125;
        *(_OWORD *)(v13 + 32) = v129;
        *(_OWORD *)(v13 + 48) = v133;
        *(_QWORD *)(v13 + 64) = v137;
        *(_OWORD *)(v13 + 72) = v18;
        *(_OWORD *)(v13 + 88) = v17;
        *(_OWORD *)(v13 + 104) = v124;
        *(_OWORD *)(v13 + 120) = v131;
        *(_QWORD *)(v13 + 136) = v135;
        *(_OWORD *)(v13 + 144) = v21;
        *(_OWORD *)(v13 + 160) = v22;
        *(_OWORD *)(v13 + 176) = v20;
        *(_OWORD *)(v13 + 192) = v128;
        *(_QWORD *)(v13 + 208) = v132;
        *(_OWORD *)(v13 + 232) = v26;
        *(_OWORD *)(v13 + 248) = v25;
        *(_QWORD *)(v13 + 280) = v24;
        *(_OWORD *)(v13 + 216) = v27;
        *(_OWORD *)(v13 + 264) = v126;
        *(_OWORD *)(v13 + 288) = v30;
        *(_OWORD *)(v13 + 304) = v31;
        *(_OWORD *)(v13 + 320) = v29;
        *(_OWORD *)(v13 + 336) = v123;
        *(_QWORD *)(v13 + 352) = v130;
        *(_OWORD *)(v13 + 360) = v36;
        *(_OWORD *)(v13 + 376) = v35;
        *(_OWORD *)(v13 + 392) = v34;
        *(_OWORD *)(v13 + 408) = v33;
        *(_QWORD *)(v13 + 424) = v127;
        *(_OWORD *)(v13 + 432) = v43;
        *(_OWORD *)(v13 + 448) = v44;
        *(_OWORD *)(v13 + 464) = v41;
        *(_OWORD *)(v13 + 480) = v42;
        *(_QWORD *)(v13 + 496) = v38;
        *(_OWORD *)(v13 + 520) = v48;
        *(_OWORD *)(v13 + 536) = v46;
        *(_QWORD *)(v13 + 568) = v45;
        *(_OWORD *)(v13 + 504) = v49;
        *(_OWORD *)(v13 + 552) = v47;
        *(_OWORD *)(v13 + 576) = v53;
        *(_OWORD *)(v13 + 592) = v54;
        *(_OWORD *)(v13 + 608) = v51;
        *(_OWORD *)(v13 + 624) = v52;
        *(_QWORD *)(v13 + 640) = v50;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v58 = *(_QWORD *)(v4 + 80);
      if (v58)
      {
        v60 = *(_QWORD *)(v4 + 48);
        v59 = *(_QWORD *)(v4 + 56);
        v61 = ((v59 - v60) << 6) - 1;
        v62 = *(_QWORD *)(v4 + 72);
        if (v59 == v60)
          v61 = 0;
        v13 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v60 + (((unint64_t)(v62 + v58 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v62 + v58 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v58 - 1;
        if ((unint64_t)(v61 - (v58 + v62) + 1) >= 0x400)
        {
          operator delete(*(void **)(v59 - 8));
          v12 = v121;
          v11 = v122;
          result = 40;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v139[0] = 0;
      v63 = *(_QWORD *)(v4 + 16);
      v64 = *(int64x2_t **)(v4 + 24);
      v65 = (uint64_t)v64->i64 - v63;
      v66 = (uint64_t)((uint64_t)v64->i64 - v63) >> 3;
      v67 = (uint64_t *)(v63 + (((unint64_t)v64 - v63) & 0xFFFFFFFFFFFFFFF8));
      v68 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v68 - (_QWORD)v64) < 0x288)
      {
        v69 = v66 + 81;
        if ((unint64_t)(v66 + 81) >> 61)
          sub_20E867F44();
        v70 = v68 - v63;
        if (v70 >> 2 > v69)
          v69 = v70 >> 2;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        v136 = v69;
        if (v69)
        {
          if (v69 >> 61)
            sub_20E877A38();
          v71 = (uint64_t)v64->i64 - v63;
          v72 = (char *)operator new(8 * v69);
          v66 = (uint64_t)((uint64_t)v64->i64 - v63) >> 3;
        }
        else
        {
          v71 = (uint64_t)v64->i64 - v63;
          v72 = 0;
        }
        v134 = v66;
        v138 = v72;
        v79 = &v72[8 * v66];
        bzero(v79, 0x288uLL);
        if ((int64x2_t *)v63 == v64)
        {
          v82 = v79;
          v81 = v79;
          v6 = a2;
        }
        else
        {
          if ((unint64_t)(v71 - 8) >= 0x68)
          {
            v80 = (char *)(v63 + (((unint64_t)v64 - v63) & 0xFFFFFFFFFFFFFFF8));
            v81 = v79;
            v82 = v79;
            v6 = a2;
            if (v63 + (v71 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v138[v71 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v83 = ((unint64_t)(v71 - 8) >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v80 = (char *)&v67[v84 / 0xFFFFFFFFFFFFFFF8];
              v82 = &v81[-v84];
              v85 = &v138[8 * v134 - 16];
              v86 = (__int128 *)(v63 + 8 * v134 - 16);
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v86;
                *((_OWORD *)v85 - 1) = *(v86 - 1);
                *(_OWORD *)v85 = v88;
                v85 -= 32;
                v86 -= 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v80 = (char *)(v63 + (((unint64_t)v64 - v63) & 0xFFFFFFFFFFFFFFF8));
            v81 = v79;
            v82 = v79;
            v6 = a2;
          }
          do
          {
            v89 = *((_QWORD *)v80 - 1);
            v80 -= 8;
            *((_QWORD *)v82 - 1) = v89;
            v82 -= 8;
          }
          while (v80 != (char *)v63);
        }
LABEL_39:
        v90 = v81 + 648;
        v91 = (char *)v64 - (char *)v67;
        if (v91)
          memmove(v81 + 648, v67, v91);
        *(_QWORD *)(v4 + 16) = v82;
        *(_QWORD *)(v4 + 24) = &v90[v91];
        *(_QWORD *)(v4 + 32) = &v138[8 * v136];
        v5 = v119;
        result = 40;
        v11 = v122;
        v12 = v121;
        if (v63)
        {
          operator delete((void *)v63);
          v12 = v121;
          v11 = v122;
          result = 40;
        }
        goto LABEL_74;
      }
      v73 = (char *)v64 - (char *)v67;
      if ((unint64_t)((char *)v64 - (char *)v67) > 0x287)
      {
        v75 = *(uint64_t **)(v4 + 24);
        v74 = 81;
        goto LABEL_50;
      }
      v74 = v73 >> 3;
      v75 = &v64->i64[81 - (v73 >> 3)];
      v76 = v73 & 0xFFFFFFFFFFFFFFF8;
      v77 = 640 - v76;
      if (640 - v76 >= 0x68)
      {
        v92 = v139 < (uint64_t *)((char *)&v64[40].i64[1] - v76);
        if (v64 >= (int64x2_t *)v140 || (v78 = *(uint64_t **)(v4 + 24), !v92))
        {
          v93 = (v77 >> 3) + 1;
          v78 = &v64->i64[v93 & 0x3FFFFFFFFFFFFFFCLL];
          v94 = vdupq_lane_s64(v139[0], 0);
          v95 = v64 + 1;
          v96 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v95[-1] = v94;
            *v95 = v94;
            v95 += 2;
            v96 -= 4;
          }
          while (v96);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v75;
            if (v64 == (int64x2_t *)v67)
              goto LABEL_74;
LABEL_50:
            v97 = (char *)v75 - (char *)(v67 + 81);
            v98 = v97 >> 3;
            v99 = (int64x2_t *)(v75 - 81);
            v100 = v75;
            if (v75 - 81 < (uint64_t *)v64)
            {
              v101 = (v65 & 0xFFFFFFFFFFFFFFF8) + v97;
              v102 = v63 + v101 + 8;
              if ((unint64_t)v64 > v102)
                v102 = (unint64_t)v64;
              v103 = v102 + ~v63 - v101;
              if (v103 >= 0x58)
              {
                v104 = (v103 >> 3) + 1;
                v105 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                v99 = (int64x2_t *)((char *)v99 + v105 * 8);
                v100 = &v75[v105];
                v106 = v75 + 2;
                v107 = (__int128 *)(v63 + 8 * v98 + 8 * v66 + 16);
                v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v109 = *v107;
                  *(v106 - 1) = *(v107 - 1);
                  *v106 = v109;
                  v106 += 2;
                  v107 += 2;
                  v108 -= 4;
                }
                while (v108);
                if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v100 = v75;
              }
              do
              {
                v110 = v99->i64[0];
                v99 = (int64x2_t *)((char *)v99 + 8);
                *v100++ = v110;
              }
              while (v99 < v64);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v100;
            if (v75 != v67 + 81)
            {
              memmove(&v75[-v98], (const void *)(v63 + (((unint64_t)v64 - v63) & 0xFFFFFFFFFFFFFFF8)), v97);
              v65 = (uint64_t)v64->i64 - v63;
              v5 = v119;
              v66 = (uint64_t)((uint64_t)v64->i64 - v63) >> 3;
              v12 = v121;
              v11 = v122;
              result = 40;
            }
            v111 = v139;
            if (v67 <= v139)
            {
              v112 = 81;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)v139)
                v112 = 0;
              v111 = &v139[v112];
            }
            if (v74 >= 0xA)
            {
              if (v67 >= v111 + 1 || (unint64_t)v111 >= v63 + (v65 & 0xFFFFFFFFFFFFFFF8) + 8 * v74)
              {
                v67 += v74 & 0xFFFFFFFFFFFFFFFCLL;
                v113 = v74 & 3;
                v114 = vld1q_dup_f64((const double *)v111);
                v115 = (float64x2_t *)(v63 + 8 * v66 + 16);
                v116 = v74 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v115[-1] = v114;
                  *v115 = v114;
                  v115 += 2;
                  v116 -= 4;
                }
                while (v116);
                if (v74 == (v74 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v113 = v74;
              }
            }
            else
            {
              v113 = v74;
            }
            do
            {
              *v67++ = *v111;
              --v113;
            }
            while (v113);
LABEL_74:
            v13 = *(_QWORD *)(v4 + 24) - 648;
            v8 = (_QWORD *)(v4 + 16);
            v7 = v120;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = (v13 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v78 = *(uint64_t **)(v4 + 24);
      }
      do
        *v78++ = v139[0];
      while (v78 != v75);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E97D8(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  BOOL v66;
  uint64_t v67;
  int64x2_t v68;
  int64x2_t *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  int64x2_t *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  const double *v86;
  uint64_t v87;
  unint64_t v88;
  float64x2_t v89;
  float64x2_t *v90;
  unint64_t v91;
  unint64_t v92;
  int v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v92 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v94 = a3;
      v96 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      result = (3 * v7 + v92);
      v99 = 3 * v7 + v92;
      v97 = v11;
      v98 = v7;
      while (1)
      {
        v31 = *v6;
        v32 = *((unsigned int *)v6 + 4);
        v33 = *(_QWORD *)(v11 + 8 * v10);
        if (v33 == -1)
          break;
        v12 = *v8 + 8 * v33;
LABEL_9:
        v13 = (__int128 *)(v31 + 8 * (9 * v10 + v5 + v32 * result));
        v14 = *((_QWORD *)v13 + 8);
        v16 = v13[2];
        v15 = v13[3];
        v18 = *v13;
        v17 = v13[1];
        v19 = (__int128 *)((char *)v13 + 8 * v32);
        v20 = *((_QWORD *)v19 + 8);
        v22 = v19[2];
        v21 = v19[3];
        v24 = *v19;
        v23 = v19[1];
        v25 = &v13[v32];
        v26 = *((_QWORD *)v25 + 8);
        v28 = v25[2];
        v27 = v25[3];
        v30 = *v25;
        v29 = v25[1];
        *(_OWORD *)v12 = v18;
        *(_OWORD *)(v12 + 16) = v17;
        *(_OWORD *)(v12 + 32) = v16;
        *(_OWORD *)(v12 + 48) = v15;
        *(_QWORD *)(v12 + 64) = v14;
        *(_OWORD *)(v12 + 72) = v24;
        *(_OWORD *)(v12 + 88) = v23;
        *(_OWORD *)(v12 + 104) = v22;
        *(_OWORD *)(v12 + 120) = v21;
        *(_QWORD *)(v12 + 136) = v20;
        *(_OWORD *)(v12 + 144) = v30;
        *(_OWORD *)(v12 + 160) = v29;
        *(_OWORD *)(v12 + 176) = v28;
        *(_OWORD *)(v12 + 192) = v27;
        *(_QWORD *)(v12 + 208) = v26;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v34 = *(_QWORD *)(v4 + 80);
      if (v34)
      {
        v36 = *(_QWORD *)(v4 + 48);
        v35 = *(_QWORD *)(v4 + 56);
        v37 = ((v35 - v36) << 6) - 1;
        v38 = *(_QWORD *)(v4 + 72);
        if (v35 == v36)
          v37 = 0;
        v12 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v36 + (((unint64_t)(v38 + v34 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v38 + v34 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v34 - 1;
        if ((unint64_t)(v37 - (v34 + v38) + 1) >= 0x400)
        {
          operator delete(*(void **)(v35 - 8));
          result = v99;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_71;
      }
      v100 = 0;
      v39 = *(_QWORD *)(v4 + 16);
      v40 = *(int64x2_t **)(v4 + 24);
      v41 = (unint64_t)v40 - v39;
      v42 = (uint64_t)((uint64_t)v40->i64 - v39) >> 3;
      v43 = (uint64_t *)(v39 + (((unint64_t)v40 - v39) & 0xFFFFFFFFFFFFFFF8));
      v44 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v44 - (_QWORD)v40) < 0xD8)
      {
        v45 = v42 + 27;
        if ((unint64_t)(v42 + 27) >> 61)
          sub_20E867F44();
        v46 = v44 - v39;
        if (v46 >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        v95 = v45;
        if (v45)
        {
          if (v45 >> 61)
            sub_20E877A38();
          v47 = operator new(8 * v45);
          v42 = (uint64_t)((uint64_t)v40->i64 - v39) >> 3;
        }
        else
        {
          v47 = 0;
        }
        v54 = &v47[8 * v42];
        *((_QWORD *)v54 + 26) = 0;
        *((_OWORD *)v54 + 11) = 0u;
        *((_OWORD *)v54 + 12) = 0u;
        *((_OWORD *)v54 + 9) = 0u;
        *((_OWORD *)v54 + 10) = 0u;
        *((_OWORD *)v54 + 7) = 0u;
        *((_OWORD *)v54 + 8) = 0u;
        *((_OWORD *)v54 + 5) = 0u;
        *((_OWORD *)v54 + 6) = 0u;
        *((_OWORD *)v54 + 3) = 0u;
        *((_OWORD *)v54 + 4) = 0u;
        *((_OWORD *)v54 + 1) = 0u;
        *((_OWORD *)v54 + 2) = 0u;
        *(_OWORD *)v54 = 0u;
        if ((int64x2_t *)v39 == v40)
        {
          v56 = &v47[8 * v42];
        }
        else
        {
          if (v41 - 8 >= 0x68)
          {
            v55 = (char *)(v39 + (((unint64_t)v40 - v39) & 0xFFFFFFFFFFFFFFF8));
            v56 = &v47[8 * v42];
            if (v39 + (v41 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v47[v41 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v57 = ((v41 - 8) >> 3) + 1;
              v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
              v55 = (char *)&v43[v58 / 0xFFFFFFFFFFFFFFF8];
              v56 = &v54[-v58];
              v59 = &v47[8 * v42 - 16];
              v60 = (__int128 *)(v39 + 8 * v42 - 16);
              v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v62 = *v60;
                *(v59 - 1) = *(v60 - 1);
                *v59 = v62;
                v59 -= 2;
                v60 -= 2;
                v61 -= 4;
              }
              while (v61);
              if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v55 = (char *)(v39 + (((unint64_t)v40 - v39) & 0xFFFFFFFFFFFFFFF8));
            v56 = &v47[8 * v42];
          }
          do
          {
            v63 = *((_QWORD *)v55 - 1);
            v55 -= 8;
            *((_QWORD *)v56 - 1) = v63;
            v56 -= 8;
          }
          while (v55 != (char *)v39);
        }
LABEL_39:
        v64 = v54 + 216;
        v65 = (char *)v40 - (char *)v43;
        if (v65)
          memmove(v54 + 216, v43, v65);
        *(_QWORD *)(v4 + 16) = v56;
        *(_QWORD *)(v4 + 24) = &v64[v65];
        *(_QWORD *)(v4 + 32) = &v47[8 * v95];
        v6 = a2;
        v5 = v94;
        result = v99;
        if (v39)
        {
          operator delete((void *)v39);
          result = v99;
        }
        goto LABEL_70;
      }
      v48 = (char *)v40 - (char *)v43;
      if ((unint64_t)((char *)v40 - (char *)v43) > 0xD7)
      {
        v50 = *(uint64_t **)(v4 + 24);
        v49 = 27;
        goto LABEL_50;
      }
      v49 = v48 >> 3;
      v50 = &v40->i64[27 - (v48 >> 3)];
      v51 = v48 & 0xFFFFFFFFFFFFFFF8;
      v52 = 208 - v51;
      if (208 - v51 >= 0x68)
      {
        v66 = &v100 < (uint64_t *)((char *)&v40[13].i64[1] - v51);
        if (v40 >= (int64x2_t *)&v101 || (v53 = *(uint64_t **)(v4 + 24), !v66))
        {
          v67 = (v52 >> 3) + 1;
          v53 = &v40->i64[v67 & 0x3FFFFFFFFFFFFFFCLL];
          v68 = vdupq_lane_s64(v100, 0);
          v69 = v40 + 1;
          v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69[-1] = v68;
            *v69 = v68;
            v69 += 2;
            v70 -= 4;
          }
          while (v70);
          if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v50;
            if (v40 == (int64x2_t *)v43)
              goto LABEL_70;
LABEL_50:
            v71 = (char *)v50 - (char *)(v43 + 27);
            v72 = v71 >> 3;
            v73 = (int64x2_t *)(v50 - 27);
            v74 = (char *)v50;
            if (v50 - 27 < (uint64_t *)v40)
            {
              v75 = (v41 & 0xFFFFFFFFFFFFFFF8) + v71;
              v76 = v39 + v75 + 8;
              if ((unint64_t)v40 > v76)
                v76 = (unint64_t)v40;
              v77 = v76 + ~v39 - v75;
              if (v77 >= 0x58)
              {
                v78 = (v77 >> 3) + 1;
                v79 = v78 & 0x3FFFFFFFFFFFFFFCLL;
                v73 = (int64x2_t *)((char *)v73 + v79 * 8);
                v74 = (char *)&v50[v79];
                v80 = v50 + 2;
                v81 = (__int128 *)(v39 + 8 * v72 + 8 * v42 + 16);
                v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v83 = *v81;
                  *(v80 - 1) = *(v81 - 1);
                  *v80 = v83;
                  v80 += 2;
                  v81 += 2;
                  v82 -= 4;
                }
                while (v82);
                if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v74 = (char *)v50;
              }
              do
              {
                v84 = v73->i64[0];
                v73 = (int64x2_t *)((char *)v73 + 8);
                *(_QWORD *)v74 = v84;
                v74 += 8;
              }
              while (v73 < v40);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v74;
            if (v50 != v43 + 27)
            {
              v85 = v49;
              memmove(&v50[-v72], (const void *)(v39 + (((unint64_t)v40 - v39) & 0xFFFFFFFFFFFFFFF8)), v71);
              v49 = v85;
              v42 = (uint64_t)((uint64_t)v40->i64 - v39) >> 3;
              result = v99;
            }
            v86 = (const double *)&v100;
            if (v43 <= &v100)
            {
              v87 = 216;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v100)
                v87 = 0;
              v86 = (const double *)((char *)&v100 + v87);
            }
            if (v49 >= 0xA
              && (v43 >= (uint64_t *)v86 + 1
               || (unint64_t)v86 >= v39 + (((unint64_t)v40 - v39) & 0xFFFFFFFFFFFFFFF8) + 8 * v49))
            {
              v43 += v49 & 0xFFFFFFFFFFFFFFFCLL;
              v88 = v49 & 3;
              v89 = vld1q_dup_f64(v86);
              v90 = (float64x2_t *)(v39 + 8 * v42 + 16);
              v91 = v49 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v90[-1] = v89;
                *v90 = v89;
                v90 += 2;
                v91 -= 4;
              }
              while (v91);
              v5 = v94;
              if (v49 == (v49 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_70;
            }
            else
            {
              v88 = v49;
              v5 = v94;
            }
            do
            {
              *v43++ = *(_QWORD *)v86;
              --v88;
            }
            while (v88);
LABEL_70:
            v12 = *(_QWORD *)(v4 + 24) - 216;
            v11 = v97;
            v7 = v98;
            v8 = v96;
LABEL_71:
            *(_QWORD *)(v11 + 8 * v10) = (v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v53 = *(uint64_t **)(v4 + 24);
      }
      do
        *v53++ = v100;
      while (v53 != v50);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8E9DE4(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64x2_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  BOOL v53;
  uint64_t v54;
  int64x2_t v55;
  int64x2_t *v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  int64x2_t *v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  const double *v73;
  uint64_t v74;
  unint64_t v75;
  float64x2_t v76;
  float64x2_t *v77;
  unint64_t v78;
  unint64_t v79;
  int v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v79 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v81 = a3;
      v83 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      result = (v7 + v79);
      v86 = v7 + v79;
      v84 = v11;
      v85 = v7;
      while (1)
      {
        v18 = *v6;
        v19 = *((_DWORD *)v6 + 4);
        v20 = *(_QWORD *)(v11 + 8 * v10);
        if (v20 == -1)
          break;
        v12 = *v8 + 8 * v20;
LABEL_9:
        v13 = (__int128 *)(v18 + 8 * (9 * v10 + v5 + v19 * result));
        v14 = *v13;
        v15 = v13[1];
        v16 = v13[2];
        v17 = v13[3];
        *(_QWORD *)(v12 + 64) = *((_QWORD *)v13 + 8);
        *(_OWORD *)(v12 + 32) = v16;
        *(_OWORD *)(v12 + 48) = v17;
        *(_OWORD *)v12 = v14;
        *(_OWORD *)(v12 + 16) = v15;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v21 = *(_QWORD *)(v4 + 80);
      if (v21)
      {
        v23 = *(_QWORD *)(v4 + 48);
        v22 = *(_QWORD *)(v4 + 56);
        v24 = ((v22 - v23) << 6) - 1;
        v25 = *(_QWORD *)(v4 + 72);
        if (v22 == v23)
          v24 = 0;
        v12 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v23 + (((unint64_t)(v25 + v21 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v25 + v21 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v21 - 1;
        if ((unint64_t)(v24 - (v21 + v25) + 1) >= 0x400)
        {
          operator delete(*(void **)(v22 - 8));
          result = v86;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_75;
      }
      v87 = 0;
      v26 = *(_QWORD *)(v4 + 16);
      v27 = *(int64x2_t **)(v4 + 24);
      v28 = (unint64_t)v27 - v26;
      v29 = (uint64_t)((uint64_t)v27->i64 - v26) >> 3;
      v30 = (uint64_t *)(v26 + (((unint64_t)v27 - v26) & 0xFFFFFFFFFFFFFFF8));
      v31 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v31 - (_QWORD)v27) < 0x48)
      {
        v32 = v29 + 9;
        if ((unint64_t)(v29 + 9) >> 61)
          sub_20E867F44();
        v33 = v31 - v26;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        v82 = v32;
        if (v32)
        {
          if (v32 >> 61)
            sub_20E877A38();
          v34 = operator new(8 * v32);
          v29 = (uint64_t)((uint64_t)v27->i64 - v26) >> 3;
        }
        else
        {
          v34 = 0;
        }
        v41 = &v34[8 * v29];
        *((_QWORD *)v41 + 8) = 0;
        *((_OWORD *)v41 + 2) = 0u;
        *((_OWORD *)v41 + 3) = 0u;
        *(_OWORD *)v41 = 0u;
        *((_OWORD *)v41 + 1) = 0u;
        if ((int64x2_t *)v26 == v27)
        {
          v43 = &v34[8 * v29];
        }
        else
        {
          if (v28 - 8 >= 0x68)
          {
            v42 = (char *)(v26 + (((unint64_t)v27 - v26) & 0xFFFFFFFFFFFFFFF8));
            v43 = &v34[8 * v29];
            if (v26 + (v28 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v34[v28 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v44 = ((v28 - 8) >> 3) + 1;
              v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = (char *)&v30[v45 / 0xFFFFFFFFFFFFFFF8];
              v43 = &v41[-v45];
              v46 = &v34[8 * v29 - 16];
              v47 = (__int128 *)(v26 + 8 * v29 - 16);
              v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v49 = *v47;
                *(v46 - 1) = *(v47 - 1);
                *v46 = v49;
                v46 -= 2;
                v47 -= 2;
                v48 -= 4;
              }
              while (v48);
              if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v42 = (char *)(v26 + (((unint64_t)v27 - v26) & 0xFFFFFFFFFFFFFFF8));
            v43 = &v34[8 * v29];
          }
          do
          {
            v50 = *((_QWORD *)v42 - 1);
            v42 -= 8;
            *((_QWORD *)v43 - 1) = v50;
            v43 -= 8;
          }
          while (v42 != (char *)v26);
        }
LABEL_39:
        v51 = v41 + 72;
        v52 = (char *)v27 - (char *)v30;
        if (v52)
          memmove(v41 + 72, v30, v52);
        *(_QWORD *)(v4 + 16) = v43;
        *(_QWORD *)(v4 + 24) = &v51[v52];
        *(_QWORD *)(v4 + 32) = &v34[8 * v82];
        v6 = a2;
        v5 = v81;
        result = v86;
        if (v26)
        {
          operator delete((void *)v26);
          result = v86;
        }
        goto LABEL_74;
      }
      v35 = (char *)v27 - (char *)v30;
      if ((unint64_t)((char *)v27 - (char *)v30) > 0x47)
      {
        v37 = *(uint64_t **)(v4 + 24);
        v36 = 9;
        goto LABEL_50;
      }
      v36 = v35 >> 3;
      v37 = &v27->i64[9 - (v35 >> 3)];
      v38 = v35 & 0xFFFFFFFFFFFFFFF8;
      v39 = 64 - v38;
      if (64 - v38 >= 0x68)
      {
        v53 = &v87 < (uint64_t *)((char *)&v27[4].i64[1] - v38);
        if (v27 >= (int64x2_t *)&v88 || (v40 = *(uint64_t **)(v4 + 24), !v53))
        {
          v54 = (v39 >> 3) + 1;
          v40 = &v27->i64[v54 & 0x3FFFFFFFFFFFFFFCLL];
          v55 = vdupq_lane_s64(v87, 0);
          v56 = v27 + 1;
          v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56[-1] = v55;
            *v56 = v55;
            v56 += 2;
            v57 -= 4;
          }
          while (v57);
          if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v37;
            if (v27 == (int64x2_t *)v30)
              goto LABEL_74;
LABEL_50:
            v58 = (char *)v37 - (char *)(v30 + 9);
            v59 = v58 >> 3;
            v60 = (int64x2_t *)(v37 - 9);
            v61 = (char *)v37;
            if (v37 - 9 < (uint64_t *)v27)
            {
              v62 = (v28 & 0xFFFFFFFFFFFFFFF8) + v58;
              v63 = v26 + v62 + 8;
              if ((unint64_t)v27 > v63)
                v63 = (unint64_t)v27;
              v64 = v63 + ~v26 - v62;
              if (v64 >= 0x58)
              {
                v65 = (v64 >> 3) + 1;
                v66 = v65 & 0x3FFFFFFFFFFFFFFCLL;
                v60 = (int64x2_t *)((char *)v60 + v66 * 8);
                v61 = (char *)&v37[v66];
                v67 = v37 + 2;
                v68 = (__int128 *)(v26 + 8 * v59 + 8 * v29 + 16);
                v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v70 = *v68;
                  *(v67 - 1) = *(v68 - 1);
                  *v67 = v70;
                  v67 += 2;
                  v68 += 2;
                  v69 -= 4;
                }
                while (v69);
                if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v61 = (char *)v37;
              }
              do
              {
                v71 = v60->i64[0];
                v60 = (int64x2_t *)((char *)v60 + 8);
                *(_QWORD *)v61 = v71;
                v61 += 8;
              }
              while (v60 < v27);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v61;
            if (v37 != v30 + 9)
            {
              v72 = v36;
              memmove(&v37[-v59], (const void *)(v26 + (((unint64_t)v27 - v26) & 0xFFFFFFFFFFFFFFF8)), v58);
              v36 = v72;
              v29 = (uint64_t)((uint64_t)v27->i64 - v26) >> 3;
              result = v86;
            }
            v73 = (const double *)&v87;
            if (v30 <= &v87)
            {
              v74 = 72;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v87)
                v74 = 0;
              v73 = (const double *)((char *)&v87 + v74);
            }
            if (v36 >= 0xA)
            {
              if (v30 >= (uint64_t *)v73 + 1
                || (unint64_t)v73 >= v26 + (((unint64_t)v27 - v26) & 0xFFFFFFFFFFFFFFF8) + 8 * v36)
              {
                v30 += v36 & 0xFFFFFFFFFFFFFFFCLL;
                v75 = v36 & 3;
                v76 = vld1q_dup_f64(v73);
                v77 = (float64x2_t *)(v26 + 8 * v29 + 16);
                v78 = v36 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v77[-1] = v76;
                  *v77 = v76;
                  v77 += 2;
                  v78 -= 4;
                }
                while (v78);
                if (v36 == (v36 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_74;
              }
              else
              {
                v75 = v36;
              }
            }
            else
            {
              v75 = v36;
            }
            do
            {
              *v30++ = *(_QWORD *)v73;
              --v75;
            }
            while (v75);
LABEL_74:
            v12 = *(_QWORD *)(v4 + 24) - 72;
            v11 = v84;
            v7 = v85;
            v8 = v83;
LABEL_75:
            *(_QWORD *)(v11 + 8 * v10) = (v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v40 = *(uint64_t **)(v4 + 24);
      }
      do
        *v40++ = v87;
      while (v40 != v37);
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_20F8EA39C(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64x2_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  _OWORD *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _OWORD *v70;
  size_t v71;
  BOOL v72;
  uint64_t v73;
  int64x2_t v74;
  int64x2_t *v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  int64x2_t *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  const double *v92;
  uint64_t v93;
  unint64_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  unint64_t v97;
  unint64_t v98;
  int v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v98 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v100 = a3;
      v102 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = v98 + 4 * v7;
      v105 = result;
      v104 = v11;
      v103 = v7;
      while (1)
      {
        v37 = *v6;
        v38 = *((unsigned int *)v6 + 4);
        v39 = *(_QWORD *)(result + 8 * v10);
        if (v39 == -1)
          break;
        v12 = *v8 + 8 * v39;
LABEL_9:
        v13 = (__int128 *)(v37 + 8 * (9 * v10 + v5 + v38 * v11));
        v14 = *((_QWORD *)v13 + 8);
        v16 = v13[2];
        v15 = v13[3];
        v18 = *v13;
        v17 = v13[1];
        v19 = (__int128 *)((char *)v13 + 8 * v38);
        v20 = *((_QWORD *)v19 + 8);
        v22 = v19[2];
        v21 = v19[3];
        v24 = *v19;
        v23 = v19[1];
        v25 = &v13[v38];
        v26 = *((_QWORD *)v25 + 8);
        v28 = v25[2];
        v27 = v25[3];
        v30 = *v25;
        v29 = v25[1];
        v31 = (__int128 *)((char *)v13 + 24 * v38);
        v32 = *((_QWORD *)v31 + 8);
        v34 = v31[2];
        v33 = v31[3];
        v35 = *v31;
        v36 = v31[1];
        *(_OWORD *)v12 = v18;
        *(_OWORD *)(v12 + 16) = v17;
        *(_OWORD *)(v12 + 32) = v16;
        *(_OWORD *)(v12 + 48) = v15;
        *(_QWORD *)(v12 + 64) = v14;
        *(_OWORD *)(v12 + 72) = v24;
        *(_OWORD *)(v12 + 88) = v23;
        *(_OWORD *)(v12 + 104) = v22;
        *(_OWORD *)(v12 + 120) = v21;
        *(_QWORD *)(v12 + 136) = v20;
        *(_OWORD *)(v12 + 144) = v30;
        *(_OWORD *)(v12 + 160) = v29;
        *(_OWORD *)(v12 + 176) = v28;
        *(_OWORD *)(v12 + 192) = v27;
        *(_QWORD *)(v12 + 208) = v26;
        *(_OWORD *)(v12 + 232) = v36;
        *(_OWORD *)(v12 + 248) = v34;
        *(_QWORD *)(v12 + 280) = v32;
        *(_OWORD *)(v12 + 216) = v35;
        *(_OWORD *)(v12 + 264) = v33;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v40 = *(_QWORD *)(v4 + 80);
      if (v40)
      {
        v42 = *(_QWORD *)(v4 + 48);
        v41 = *(_QWORD *)(v4 + 56);
        v43 = ((v41 - v42) << 6) - 1;
        v44 = *(_QWORD *)(v4 + 72);
        if (v41 == v42)
          v43 = 0;
        v12 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v42 + (((unint64_t)(v44 + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v44 + v40 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v40 - 1;
        if ((unint64_t)(v43 - (v40 + v44) + 1) >= 0x400)
        {
          operator delete(*(void **)(v41 - 8));
          v11 = v104;
          result = v105;
          *(_QWORD *)(v4 + 56) -= 8;
        }
        goto LABEL_71;
      }
      v106 = 0;
      v45 = *(_QWORD *)(v4 + 16);
      v46 = *(int64x2_t **)(v4 + 24);
      v47 = (unint64_t)v46 - v45;
      v48 = (uint64_t)((uint64_t)v46->i64 - v45) >> 3;
      v49 = (uint64_t *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8));
      v50 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v50 - (_QWORD)v46) < 0x120)
      {
        v51 = v48 + 36;
        if ((unint64_t)(v48 + 36) >> 61)
          sub_20E867F44();
        v52 = v50 - v45;
        if (v52 >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        v101 = v51;
        if (v51)
        {
          if (v51 >> 61)
            sub_20E877A38();
          v53 = operator new(8 * v51);
          v48 = (uint64_t)((uint64_t)v46->i64 - v45) >> 3;
        }
        else
        {
          v53 = 0;
        }
        v60 = &v53[8 * v48];
        v60[16] = 0u;
        v60[17] = 0u;
        v60[14] = 0u;
        v60[15] = 0u;
        v60[12] = 0u;
        v60[13] = 0u;
        v60[10] = 0u;
        v60[11] = 0u;
        v60[8] = 0u;
        v60[9] = 0u;
        v60[6] = 0u;
        v60[7] = 0u;
        v60[4] = 0u;
        v60[5] = 0u;
        v60[2] = 0u;
        v60[3] = 0u;
        *v60 = 0u;
        v60[1] = 0u;
        if ((int64x2_t *)v45 == v46)
        {
          v62 = &v53[8 * v48];
        }
        else
        {
          if (v47 - 8 >= 0x68)
          {
            v61 = (char *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8));
            v62 = &v53[8 * v48];
            if (v45 + (v47 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v53[v47 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v63 = ((v47 - 8) >> 3) + 1;
              v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
              v61 = (char *)&v49[v64 / 0xFFFFFFFFFFFFFFF8];
              v62 = (char *)v60 - v64;
              v65 = &v53[8 * v48 - 16];
              v66 = (__int128 *)(v45 + 8 * v48 - 16);
              v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v68 = *v66;
                *(v65 - 1) = *(v66 - 1);
                *v65 = v68;
                v65 -= 2;
                v66 -= 2;
                v67 -= 4;
              }
              while (v67);
              if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_39;
            }
          }
          else
          {
            v61 = (char *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8));
            v62 = &v53[8 * v48];
          }
          do
          {
            v69 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *((_QWORD *)v62 - 1) = v69;
            v62 -= 8;
          }
          while (v61 != (char *)v45);
        }
LABEL_39:
        v70 = v60 + 18;
        v71 = (char *)v46 - (char *)v49;
        if (v71)
          memmove(v60 + 18, v49, v71);
        *(_QWORD *)(v4 + 16) = v62;
        *(_QWORD *)(v4 + 24) = (char *)v70 + v71;
        *(_QWORD *)(v4 + 32) = &v53[8 * v101];
        v6 = a2;
        v5 = v100;
        result = v105;
        v11 = v104;
        if (v45)
        {
          operator delete((void *)v45);
          v11 = v104;
          result = v105;
        }
        goto LABEL_70;
      }
      v54 = (char *)v46 - (char *)v49;
      if ((unint64_t)((char *)v46 - (char *)v49) > 0x11F)
      {
        v56 = *(uint64_t **)(v4 + 24);
        v55 = 36;
        goto LABEL_50;
      }
      v55 = v54 >> 3;
      v56 = &v46->i64[36 - (v54 >> 3)];
      v57 = v54 & 0xFFFFFFFFFFFFFFF8;
      v58 = 280 - v57;
      if (280 - v57 >= 0x68)
      {
        v72 = &v106 < (uint64_t *)((char *)v46[18].i64 - v57);
        if (v46 >= (int64x2_t *)&v107 || (v59 = *(uint64_t **)(v4 + 24), !v72))
        {
          v73 = (v58 >> 3) + 1;
          v59 = &v46->i64[v73 & 0x3FFFFFFFFFFFFFFCLL];
          v74 = vdupq_lane_s64(v106, 0);
          v75 = v46 + 1;
          v76 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75[-1] = v74;
            *v75 = v74;
            v75 += 2;
            v76 -= 4;
          }
          while (v76);
          if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            *(_QWORD *)(v4 + 24) = v56;
            if (v46 == (int64x2_t *)v49)
              goto LABEL_70;
LABEL_50:
            v77 = (char *)v56 - (char *)(v49 + 36);
            v78 = v77 >> 3;
            v79 = (int64x2_t *)(v56 - 36);
            v80 = (char *)v56;
            if (v56 - 36 < (uint64_t *)v46)
            {
              v81 = (v47 & 0xFFFFFFFFFFFFFFF8) + v77;
              v82 = v45 + v81 + 8;
              if ((unint64_t)v46 > v82)
                v82 = (unint64_t)v46;
              v83 = v82 + ~v45 - v81;
              if (v83 >= 0x58)
              {
                v84 = (v83 >> 3) + 1;
                v85 = v84 & 0x3FFFFFFFFFFFFFFCLL;
                v79 = (int64x2_t *)((char *)v79 + v85 * 8);
                v80 = (char *)&v56[v85];
                v86 = v56 + 2;
                v87 = (__int128 *)(v45 + 8 * v78 + 8 * v48 + 16);
                v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v89 = *v87;
                  *(v86 - 1) = *(v87 - 1);
                  *v86 = v89;
                  v86 += 2;
                  v87 += 2;
                  v88 -= 4;
                }
                while (v88);
                if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_59;
              }
              else
              {
                v80 = (char *)v56;
              }
              do
              {
                v90 = v79->i64[0];
                v79 = (int64x2_t *)((char *)v79 + 8);
                *(_QWORD *)v80 = v90;
                v80 += 8;
              }
              while (v79 < v46);
            }
LABEL_59:
            *(_QWORD *)(v4 + 24) = v80;
            if (v56 != v49 + 36)
            {
              v91 = v55;
              memmove(&v56[-v78], (const void *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8)), v77);
              v55 = v91;
              v48 = (uint64_t)((uint64_t)v46->i64 - v45) >> 3;
              v11 = v104;
              result = v105;
            }
            v92 = (const double *)&v106;
            if (v49 <= &v106)
            {
              v93 = 288;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v106)
                v93 = 0;
              v92 = (const double *)((char *)&v106 + v93);
            }
            if (v55 >= 0xA
              && (v49 >= (uint64_t *)v92 + 1
               || (unint64_t)v92 >= v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8) + 8 * v55))
            {
              v49 += v55 & 0xFFFFFFFFFFFFFFFCLL;
              v94 = v55 & 3;
              v95 = vld1q_dup_f64(v92);
              v96 = (float64x2_t *)(v45 + 8 * v48 + 16);
              v97 = v55 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v96[-1] = v95;
                *v96 = v95;
                v96 += 2;
                v97 -= 4;
              }
              while (v97);
              v5 = v100;
              if (v55 == (v55 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_70;
            }
            else
            {
              v94 = v55;
              v5 = v100;
            }
            do
            {
              *v49++ = *(_QWORD *)v92;
              --v94;
            }
            while (v94);
LABEL_70:
            v12 = *(_QWORD *)(v4 + 24) - 288;
            v8 = v102;
            v7 = v103;
LABEL_71:
            *(_QWORD *)(result + 8 * v10) = (v12 - *(_QWORD *)(v4 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v59 = *(uint64_t **)(v4 + 24);
      }
      do
        *v59++ = v106;
      while (v59 != v56);
      goto LABEL_49;
    }
  }
  return result;
}

void sub_20F8EA9E4(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  int v362;
  _DWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  _DWORD *v366;
  _DWORD *v367;
  uint64_t v368;
  unsigned int v369;
  char *v370;
  char *v371;
  uint64_t v372;
  _BYTE *v373;
  _DWORD *v374;
  uint64_t v376;
  int v377;
  _QWORD *v379;
  uint64_t *v380;
  char **v381;
  _DWORD *v382;
  uint64_t *v383;
  char **v384;
  _QWORD *v385;
  _DWORD *v386;
  char **v387;
  _QWORD *v388;
  _QWORD *v389;
  char **v390;
  int v391;

  v3 = a3;
  v4 = 0;
  v5 = 0;
  v374 = a1 + 3826;
  do
  {
    v6 = (_QWORD *)(v3 + 24 * v4);
    v7 = v3;
    v8 = (void *)*v6;
    v389 = v6;
    v6[1] = *v6;
    v383 = v6 + 1;
    v9 = (_QWORD *)(a2 + 24 * v4);
    v10 = (_DWORD *)*v9;
    v12 = v9 + 1;
    v11 = v9[1];
    if (*v9 != v11)
    {
      v13 = v11 - (_QWORD)v10;
      v14 = (v11 - (uint64_t)v10) >> 2;
      v380 = (uint64_t *)(v7 + 24 * v4 + 16);
      if (v14 > (*v380 - (uint64_t)v8) >> 2)
      {
        if ((v13 & 0x8000000000000000) != 0)
LABEL_366:
          sub_20E867F44();
        v15 = (char *)operator new(v13);
        *v389 = v15;
        *v383 = (uint64_t)v15;
        *v380 = (uint64_t)&v15[4 * v14];
        if (v8)
          operator delete(v8);
      }
      v377 = v5;
      v376 = v4;
      v16 = &v374[6 * v4];
      v17 = (_DWORD *)*v9;
      v18 = *(_DWORD **)v16;
      v19 = v16 + 2;
      v20 = (_DWORD *)*((_QWORD *)v16 + 1);
      v21 = (_DWORD *)*v12;
      if (*(_DWORD **)v16 == v20)
      {
        v22 = 0;
        v23 = v380;
        v24 = v383;
      }
      else
      {
        v22 = 0;
        v23 = v380;
        v24 = v383;
        while (*v18 < *v17)
        {
          ++v18;
          ++v22;
          if (v18 == v20)
            goto LABEL_2;
        }
      }
      if (v17 != v21 && v18 != v20)
      {
        v386 = v21;
        v379 = v16 + 2;
        while (1)
        {
          if (*v17 != *v18)
          {
            ++v18;
            if (++v17 == v21)
              goto LABEL_2;
            goto LABEL_25;
          }
          v25 = (char *)*v24;
          v26 = *v23;
          if (*v24 < (unint64_t)*v23)
          {
            *(_DWORD *)v25 = v22;
            *v24 = (uint64_t)(v25 + 4);
            v27 = v18 + 1;
            v28 = *v19 - (_QWORD)(v18 + 1);
            if ((_DWORD *)*v19 == v18 + 1)
              goto LABEL_22;
LABEL_21:
            memmove(v18, v27, v28);
            goto LABEL_22;
          }
          v29 = (_BYTE *)*v389;
          v30 = (uint64_t)&v25[-*v389];
          v31 = v30 >> 2;
          v32 = (v30 >> 2) + 1;
          if (v32 >> 62)
            goto LABEL_366;
          v33 = v26 - (_QWORD)v29;
          if (v33 >> 1 > v32)
            v32 = v33 >> 1;
          v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v32;
          if (v34)
          {
            if (v34 >> 62)
              sub_20E877A38();
            v35 = operator new(4 * v34);
            v36 = &v35[4 * v31];
            *v36 = v22;
            v37 = (uint64_t)(v36 + 1);
            v38 = v25 - v29;
            if (v25 == v29)
            {
LABEL_39:
              v24 = v383;
              goto LABEL_45;
            }
          }
          else
          {
            v35 = 0;
            v36 = (_DWORD *)(4 * v31);
            *(_DWORD *)(4 * v31) = v22;
            v37 = 4 * v31 + 4;
            v38 = v25 - v29;
            if (v25 == v29)
              goto LABEL_39;
          }
          v39 = v38 - 4;
          if (v39 < 0x2C)
            break;
          v40 = v25 - &v35[v30];
          v24 = v383;
          if (v40 < 0x20)
            goto LABEL_44;
          v41 = (v39 >> 2) + 1;
          v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
          v43 = &v25[-v42];
          v36 = (_DWORD *)((char *)v36 - v42);
          v44 = &v35[4 * v31 - 16];
          v45 = v25 - 16;
          v46 = v41 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 8;
          }
          while (v46);
          v25 = v43;
          if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_44;
LABEL_45:
          *v389 = v36;
          *v24 = v37;
          v23 = v380;
          *v380 = (uint64_t)&v35[4 * v34];
          if (v29)
            operator delete(v29);
          v19 = v379;
          *v24 = v37;
          v27 = v18 + 1;
          v28 = *v379 - (_QWORD)(v18 + 1);
          if ((_DWORD *)*v379 != v18 + 1)
            goto LABEL_21;
LABEL_22:
          *v19 = (char *)v18 + v28;
          --v20;
          v21 = v386;
          if (++v17 == v386)
            goto LABEL_2;
LABEL_25:
          ++v22;
          if (v18 == v20)
            goto LABEL_2;
        }
        v24 = v383;
        do
        {
LABEL_44:
          v48 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *--v36 = v48;
        }
        while (v25 != v29);
        goto LABEL_45;
      }
LABEL_2:
      v5 = v377 | (*v389 != *v24);
      v4 = v376;
    }
    ++v4;
    v3 = a3;
  }
  while (v4 != 10);
  if ((v5 & 1) != 0)
  {
    v49 = (uint64_t)(a1 + 350);
    v50 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v50)
    {
      v51 = (v50 >> 2) - 1;
      do
        sub_20F8ECDF0(v49, *(_DWORD *)(*(_QWORD *)a3 + 4 * v51--));
      while (v51 != -1);
    }
    sub_20F8ECB18(v49, (char **)(a3 + 216));
    v52 = (uint64_t)(a1 + 710);
    v53 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v53)
    {
      v54 = (v53 >> 2) - 1;
      do
        sub_20F8ECDF0(v52, *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4 * v54--));
      while (v54 != -1);
    }
    v387 = (char **)(a3 + 24);
    v390 = (char **)(a3 + 216);
    sub_20F8ECB18(v52, (char **)(a3 + 216));
    v55 = (uint64_t)(a1 + 1070);
    v56 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v56)
    {
      v57 = (v56 >> 2) - 1;
      do
        sub_20F8ECDF0(v55, *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v57--));
      while (v57 != -1);
    }
    sub_20F8ECB18(v55, v390);
    v58 = (uint64_t)(a1 + 1430);
    v59 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v59)
    {
      v60 = (v59 >> 2) - 1;
      do
        sub_20F8ECDF0(v58, *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * v60--));
      while (v60 != -1);
    }
    sub_20F8ECB18(v58, v390);
    v61 = (uint64_t)(a1 + 1790);
    v62 = (_QWORD *)(a3 + 96);
    v63 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v63)
    {
      v64 = (v63 >> 2) - 1;
      do
        sub_20F8ECDF0(v61, *(_DWORD *)(*v62 + 4 * v64--));
      while (v64 != -1);
    }
    sub_20F8ECB18(v61, v390);
    v65 = (uint64_t)(a1 + 2150);
    v66 = (_QWORD *)(a3 + 120);
    v67 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v67)
    {
      v68 = (v67 >> 2) - 1;
      do
        sub_20F8ECDF0(v65, *(_DWORD *)(*v66 + 4 * v68--));
      while (v68 != -1);
    }
    sub_20F8ECB18(v65, v390);
    v69 = (uint64_t)(a1 + 2510);
    v70 = (_QWORD *)(a3 + 144);
    v71 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v71)
    {
      v72 = (v71 >> 2) - 1;
      do
        sub_20F8ECDF0(v69, *(_DWORD *)(*v70 + 4 * v72--));
      while (v72 != -1);
    }
    sub_20F8ECB18(v69, v390);
    v73 = (uint64_t)(a1 + 2870);
    v74 = (_QWORD *)(a3 + 168);
    v75 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v75)
    {
      v76 = (v75 >> 2) - 1;
      do
        sub_20F8ECDF0(v73, *(_DWORD *)(*v74 + 4 * v76--));
      while (v76 != -1);
    }
    v381 = (char **)(a3 + 72);
    sub_20F8ECB18(v73, v390);
    v77 = (uint64_t)(a1 + 3230);
    v78 = (_QWORD *)(a3 + 192);
    v79 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v79)
    {
      v80 = (v79 >> 2) - 1;
      do
        sub_20F8ECDF0(v77, *(_DWORD *)(*v78 + 4 * v80--));
      while (v80 != -1);
    }
    sub_20F8ECB18(v77, v390);
    v81 = (uint64_t)(a1 + 3590);
    v82 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v82)
    {
      v83 = (v82 >> 2) - 1;
      do
        sub_20F8ECDF0(v81, *(_DWORD *)&(*v390)[4 * v83--]);
      while (v83 != -1);
    }
    v384 = (char **)(a3 + 48);
    sub_20F8ECB18(v81, v390);
    v84 = (uint64_t)(a1 + 314);
    v85 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v85)
    {
      v86 = (v85 >> 2) - 1;
      do
        sub_20F8ECDF0(v84, *(_DWORD *)(*(_QWORD *)a3 + 4 * v86--));
      while (v86 != -1);
    }
    sub_20F8ECB18(v84, (char **)(a3 + 192));
    v87 = (uint64_t)(a1 + 674);
    v88 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v88)
    {
      v89 = (v88 >> 2) - 1;
      do
        sub_20F8ECDF0(v87, *(_DWORD *)&(*v387)[4 * v89--]);
      while (v89 != -1);
    }
    sub_20F8ECB18(v87, (char **)(a3 + 192));
    v90 = (uint64_t)(a1 + 1034);
    v91 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v91)
    {
      v92 = (v91 >> 2) - 1;
      do
        sub_20F8ECDF0(v90, *(_DWORD *)&(*v384)[4 * v92--]);
      while (v92 != -1);
    }
    sub_20F8ECB18(v90, (char **)(a3 + 192));
    v93 = (uint64_t)(a1 + 1394);
    v94 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v94)
    {
      v95 = (v94 >> 2) - 1;
      do
        sub_20F8ECDF0(v93, *(_DWORD *)&(*v381)[4 * v95--]);
      while (v95 != -1);
    }
    sub_20F8ECB18(v93, (char **)(a3 + 192));
    v96 = (uint64_t)(a1 + 1754);
    v97 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v97)
    {
      v98 = (v97 >> 2) - 1;
      do
        sub_20F8ECDF0(v96, *(_DWORD *)(*v62 + 4 * v98--));
      while (v98 != -1);
    }
    sub_20F8ECB18(v96, (char **)(a3 + 192));
    v99 = (uint64_t)(a1 + 2114);
    v100 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v100)
    {
      v101 = (v100 >> 2) - 1;
      do
        sub_20F8ECDF0(v99, *(_DWORD *)(*v66 + 4 * v101--));
      while (v101 != -1);
    }
    sub_20F8ECB18(v99, (char **)(a3 + 192));
    v102 = (uint64_t)(a1 + 2474);
    v103 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v103)
    {
      v104 = (v103 >> 2) - 1;
      do
        sub_20F8ECDF0(v102, *(_DWORD *)(*v70 + 4 * v104--));
      while (v104 != -1);
    }
    sub_20F8ECB18(v102, (char **)(a3 + 192));
    v105 = (uint64_t)(a1 + 2834);
    v106 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v106)
    {
      v107 = (v106 >> 2) - 1;
      do
        sub_20F8ECDF0(v105, *(_DWORD *)(*v74 + 4 * v107--));
      while (v107 != -1);
    }
    sub_20F8ECB18(v105, (char **)(a3 + 192));
    v108 = (uint64_t)(a1 + 3194);
    v109 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v109)
    {
      v110 = (v109 >> 2) - 1;
      do
        sub_20F8ECDF0(v108, *(_DWORD *)(*v78 + 4 * v110--));
      while (v110 != -1);
    }
    sub_20F8ECB18(v108, (char **)(a3 + 192));
    v111 = (uint64_t)(a1 + 3554);
    v112 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v112)
    {
      v113 = (v112 >> 2) - 1;
      do
        sub_20F8ECDF0(v111, *(_DWORD *)&(*v390)[4 * v113--]);
      while (v113 != -1);
    }
    sub_20F8ECB18(v111, (char **)(a3 + 192));
    v114 = (uint64_t)(a1 + 278);
    v115 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v115)
    {
      v116 = (v115 >> 2) - 1;
      do
        sub_20F8ECDF0(v114, *(_DWORD *)(*(_QWORD *)a3 + 4 * v116--));
      while (v116 != -1);
    }
    sub_20F8ECB18(v114, (char **)(a3 + 168));
    v117 = (uint64_t)(a1 + 638);
    v118 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v118)
    {
      v119 = (v118 >> 2) - 1;
      do
        sub_20F8ECDF0(v117, *(_DWORD *)&(*v387)[4 * v119--]);
      while (v119 != -1);
    }
    sub_20F8ECB18(v117, (char **)(a3 + 168));
    v120 = (uint64_t)(a1 + 998);
    v121 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v121)
    {
      v122 = (v121 >> 2) - 1;
      do
        sub_20F8ECDF0(v120, *(_DWORD *)&(*v384)[4 * v122--]);
      while (v122 != -1);
    }
    sub_20F8ECB18(v120, (char **)(a3 + 168));
    v123 = (uint64_t)(a1 + 1358);
    v124 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v124)
    {
      v125 = (v124 >> 2) - 1;
      do
        sub_20F8ECDF0(v123, *(_DWORD *)&(*v381)[4 * v125--]);
      while (v125 != -1);
    }
    sub_20F8ECB18(v123, (char **)(a3 + 168));
    v126 = (uint64_t)(a1 + 1718);
    v127 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v127)
    {
      v128 = (v127 >> 2) - 1;
      do
        sub_20F8ECDF0(v126, *(_DWORD *)(*v62 + 4 * v128--));
      while (v128 != -1);
    }
    sub_20F8ECB18(v126, (char **)(a3 + 168));
    v129 = (uint64_t)(a1 + 2078);
    v130 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v130)
    {
      v131 = (v130 >> 2) - 1;
      do
        sub_20F8ECDF0(v129, *(_DWORD *)(*v66 + 4 * v131--));
      while (v131 != -1);
    }
    sub_20F8ECB18(v129, (char **)(a3 + 168));
    v132 = (uint64_t)(a1 + 2438);
    v133 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v133)
    {
      v134 = (v133 >> 2) - 1;
      do
        sub_20F8ECDF0(v132, *(_DWORD *)(*v70 + 4 * v134--));
      while (v134 != -1);
    }
    sub_20F8ECB18(v132, (char **)(a3 + 168));
    v135 = (uint64_t)(a1 + 2798);
    v136 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v136)
    {
      v137 = (v136 >> 2) - 1;
      do
        sub_20F8ECDF0(v135, *(_DWORD *)(*v74 + 4 * v137--));
      while (v137 != -1);
    }
    sub_20F8ECB18(v135, (char **)(a3 + 168));
    v138 = (uint64_t)(a1 + 3158);
    v139 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v139)
    {
      v140 = (v139 >> 2) - 1;
      do
        sub_20F8ECDF0(v138, *(_DWORD *)(*v78 + 4 * v140--));
      while (v140 != -1);
    }
    sub_20F8ECB18(v138, (char **)(a3 + 168));
    v141 = (uint64_t)(a1 + 3518);
    v142 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v142)
    {
      v143 = (v142 >> 2) - 1;
      do
        sub_20F8ECDF0(v141, *(_DWORD *)&(*v390)[4 * v143--]);
      while (v143 != -1);
    }
    sub_20F8ECB18(v141, (char **)(a3 + 168));
    v144 = (uint64_t)(a1 + 242);
    v145 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v145)
    {
      v146 = (v145 >> 2) - 1;
      do
        sub_20F8ECDF0(v144, *(_DWORD *)(*(_QWORD *)a3 + 4 * v146--));
      while (v146 != -1);
    }
    sub_20F8ECB18(v144, (char **)(a3 + 144));
    v147 = (uint64_t)(a1 + 602);
    v148 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v148)
    {
      v149 = (v148 >> 2) - 1;
      do
        sub_20F8ECDF0(v147, *(_DWORD *)&(*v387)[4 * v149--]);
      while (v149 != -1);
    }
    sub_20F8ECB18(v147, (char **)(a3 + 144));
    v150 = (uint64_t)(a1 + 962);
    v151 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v151)
    {
      v152 = (v151 >> 2) - 1;
      do
        sub_20F8ECDF0(v150, *(_DWORD *)&(*v384)[4 * v152--]);
      while (v152 != -1);
    }
    sub_20F8ECB18(v150, (char **)(a3 + 144));
    v153 = (uint64_t)(a1 + 1322);
    v154 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v154)
    {
      v155 = (v154 >> 2) - 1;
      do
        sub_20F8ECDF0(v153, *(_DWORD *)&(*v381)[4 * v155--]);
      while (v155 != -1);
    }
    sub_20F8ECB18(v153, (char **)(a3 + 144));
    v156 = (uint64_t)(a1 + 1682);
    v157 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v157)
    {
      v158 = (v157 >> 2) - 1;
      do
        sub_20F8ECDF0(v156, *(_DWORD *)(*v62 + 4 * v158--));
      while (v158 != -1);
    }
    sub_20F8ECB18(v156, (char **)(a3 + 144));
    v159 = (uint64_t)(a1 + 2042);
    v160 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v160)
    {
      v161 = (v160 >> 2) - 1;
      do
        sub_20F8ECDF0(v159, *(_DWORD *)(*v66 + 4 * v161--));
      while (v161 != -1);
    }
    sub_20F8ECB18(v159, (char **)(a3 + 144));
    v162 = (uint64_t)(a1 + 2402);
    v163 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v163)
    {
      v164 = (v163 >> 2) - 1;
      do
        sub_20F8ECDF0(v162, *(_DWORD *)(*v70 + 4 * v164--));
      while (v164 != -1);
    }
    sub_20F8ECB18(v162, (char **)(a3 + 144));
    v165 = (uint64_t)(a1 + 2762);
    v166 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v166)
    {
      v167 = (v166 >> 2) - 1;
      do
        sub_20F8ECDF0(v165, *(_DWORD *)(*v74 + 4 * v167--));
      while (v167 != -1);
    }
    sub_20F8ECB18(v165, (char **)(a3 + 144));
    v168 = (uint64_t)(a1 + 3122);
    v169 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v169)
    {
      v170 = (v169 >> 2) - 1;
      do
        sub_20F8ECDF0(v168, *(_DWORD *)(*v78 + 4 * v170--));
      while (v170 != -1);
    }
    sub_20F8ECB18(v168, (char **)(a3 + 144));
    v171 = (uint64_t)(a1 + 3482);
    v172 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v172)
    {
      v173 = (v172 >> 2) - 1;
      do
        sub_20F8ECDF0(v171, *(_DWORD *)&(*v390)[4 * v173--]);
      while (v173 != -1);
    }
    sub_20F8ECB18(v171, (char **)(a3 + 144));
    v174 = (uint64_t)(a1 + 206);
    v175 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v175)
    {
      v176 = (v175 >> 2) - 1;
      do
        sub_20F8ECDF0(v174, *(_DWORD *)(*(_QWORD *)a3 + 4 * v176--));
      while (v176 != -1);
    }
    sub_20F8ECB18(v174, (char **)(a3 + 120));
    v177 = (uint64_t)(a1 + 566);
    v178 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v178)
    {
      v179 = (v178 >> 2) - 1;
      do
        sub_20F8ECDF0(v177, *(_DWORD *)&(*v387)[4 * v179--]);
      while (v179 != -1);
    }
    sub_20F8ECB18(v177, (char **)(a3 + 120));
    v180 = (uint64_t)(a1 + 926);
    v181 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v181)
    {
      v182 = (v181 >> 2) - 1;
      do
        sub_20F8ECDF0(v180, *(_DWORD *)&(*v384)[4 * v182--]);
      while (v182 != -1);
    }
    sub_20F8ECB18(v180, (char **)(a3 + 120));
    v183 = (uint64_t)(a1 + 1286);
    v184 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v184)
    {
      v185 = (v184 >> 2) - 1;
      do
        sub_20F8ECDF0(v183, *(_DWORD *)&(*v381)[4 * v185--]);
      while (v185 != -1);
    }
    sub_20F8ECB18(v183, (char **)(a3 + 120));
    v186 = (uint64_t)(a1 + 1646);
    v187 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v187)
    {
      v188 = (v187 >> 2) - 1;
      do
        sub_20F8ECDF0(v186, *(_DWORD *)(*v62 + 4 * v188--));
      while (v188 != -1);
    }
    sub_20F8ECB18(v186, (char **)(a3 + 120));
    v189 = (uint64_t)(a1 + 2006);
    v190 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v190)
    {
      v191 = (v190 >> 2) - 1;
      do
        sub_20F8ECDF0(v189, *(_DWORD *)(*v66 + 4 * v191--));
      while (v191 != -1);
    }
    sub_20F8ECB18(v189, (char **)(a3 + 120));
    v192 = (uint64_t)(a1 + 2366);
    v193 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v193)
    {
      v194 = (v193 >> 2) - 1;
      do
        sub_20F8ECDF0(v192, *(_DWORD *)(*v70 + 4 * v194--));
      while (v194 != -1);
    }
    sub_20F8ECB18(v192, (char **)(a3 + 120));
    v195 = (uint64_t)(a1 + 2726);
    v196 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v196)
    {
      v197 = (v196 >> 2) - 1;
      do
        sub_20F8ECDF0(v195, *(_DWORD *)(*v74 + 4 * v197--));
      while (v197 != -1);
    }
    sub_20F8ECB18(v195, (char **)(a3 + 120));
    v198 = (uint64_t)(a1 + 3086);
    v199 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v199)
    {
      v200 = (v199 >> 2) - 1;
      do
        sub_20F8ECDF0(v198, *(_DWORD *)(*v78 + 4 * v200--));
      while (v200 != -1);
    }
    sub_20F8ECB18(v198, (char **)(a3 + 120));
    v201 = (uint64_t)(a1 + 3446);
    v202 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v202)
    {
      v203 = (v202 >> 2) - 1;
      do
        sub_20F8ECDF0(v201, *(_DWORD *)&(*v390)[4 * v203--]);
      while (v203 != -1);
    }
    sub_20F8ECB18(v201, (char **)(a3 + 120));
    v204 = (uint64_t)(a1 + 170);
    v205 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v205)
    {
      v206 = (v205 >> 2) - 1;
      do
        sub_20F8ECDF0(v204, *(_DWORD *)(*(_QWORD *)a3 + 4 * v206--));
      while (v206 != -1);
    }
    sub_20F8ECB18(v204, (char **)(a3 + 96));
    v207 = (uint64_t)(a1 + 530);
    v208 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v208)
    {
      v209 = (v208 >> 2) - 1;
      do
        sub_20F8ECDF0(v207, *(_DWORD *)&(*v387)[4 * v209--]);
      while (v209 != -1);
    }
    sub_20F8ECB18(v207, (char **)(a3 + 96));
    v210 = (uint64_t)(a1 + 890);
    v211 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v211)
    {
      v212 = (v211 >> 2) - 1;
      do
        sub_20F8ECDF0(v210, *(_DWORD *)&(*v384)[4 * v212--]);
      while (v212 != -1);
    }
    sub_20F8ECB18(v210, (char **)(a3 + 96));
    v213 = (uint64_t)(a1 + 1250);
    v214 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v214)
    {
      v215 = (v214 >> 2) - 1;
      do
        sub_20F8ECDF0(v213, *(_DWORD *)&(*v381)[4 * v215--]);
      while (v215 != -1);
    }
    sub_20F8ECB18(v213, (char **)(a3 + 96));
    v216 = (uint64_t)(a1 + 1610);
    v217 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v217)
    {
      v218 = (v217 >> 2) - 1;
      do
        sub_20F8ECDF0(v216, *(_DWORD *)(*v62 + 4 * v218--));
      while (v218 != -1);
    }
    sub_20F8ECB18(v216, (char **)(a3 + 96));
    v219 = (uint64_t)(a1 + 1970);
    v220 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v220)
    {
      v221 = (v220 >> 2) - 1;
      do
        sub_20F8ECDF0(v219, *(_DWORD *)(*v66 + 4 * v221--));
      while (v221 != -1);
    }
    sub_20F8ECB18(v219, (char **)(a3 + 96));
    v222 = (uint64_t)(a1 + 2330);
    v223 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v223)
    {
      v224 = (v223 >> 2) - 1;
      do
        sub_20F8ECDF0(v222, *(_DWORD *)(*v70 + 4 * v224--));
      while (v224 != -1);
    }
    sub_20F8ECB18(v222, (char **)(a3 + 96));
    v225 = (uint64_t)(a1 + 2690);
    v226 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v226)
    {
      v227 = (v226 >> 2) - 1;
      do
        sub_20F8ECDF0(v225, *(_DWORD *)(*v74 + 4 * v227--));
      while (v227 != -1);
    }
    sub_20F8ECB18(v225, (char **)(a3 + 96));
    v228 = (uint64_t)(a1 + 3050);
    v229 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v229)
    {
      v230 = (v229 >> 2) - 1;
      do
        sub_20F8ECDF0(v228, *(_DWORD *)(*v78 + 4 * v230--));
      while (v230 != -1);
    }
    sub_20F8ECB18(v228, (char **)(a3 + 96));
    v231 = (uint64_t)(a1 + 3410);
    v232 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v232)
    {
      v233 = (v232 >> 2) - 1;
      do
        sub_20F8ECDF0(v231, *(_DWORD *)&(*v390)[4 * v233--]);
      while (v233 != -1);
    }
    sub_20F8ECB18(v231, (char **)(a3 + 96));
    v234 = (uint64_t)(a1 + 134);
    v235 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v235)
    {
      v236 = (v235 >> 2) - 1;
      do
        sub_20F8ECDF0(v234, *(_DWORD *)(*(_QWORD *)a3 + 4 * v236--));
      while (v236 != -1);
    }
    sub_20F8ECB18(v234, v381);
    v237 = (uint64_t)(a1 + 494);
    v238 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v238)
    {
      v239 = (v238 >> 2) - 1;
      do
        sub_20F8ECDF0(v237, *(_DWORD *)&(*v387)[4 * v239--]);
      while (v239 != -1);
    }
    sub_20F8ECB18(v237, v381);
    v240 = (uint64_t)(a1 + 854);
    v241 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v241)
    {
      v242 = (v241 >> 2) - 1;
      do
        sub_20F8ECDF0(v240, *(_DWORD *)&(*v384)[4 * v242--]);
      while (v242 != -1);
    }
    sub_20F8ECB18(v240, v381);
    v243 = (uint64_t)(a1 + 1214);
    v244 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v244)
    {
      v245 = (v244 >> 2) - 1;
      do
        sub_20F8ECDF0(v243, *(_DWORD *)&(*v381)[4 * v245--]);
      while (v245 != -1);
    }
    sub_20F8ECB18(v243, v381);
    v246 = (uint64_t)(a1 + 1574);
    v247 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v247)
    {
      v248 = (v247 >> 2) - 1;
      do
        sub_20F8ECDF0(v246, *(_DWORD *)(*v62 + 4 * v248--));
      while (v248 != -1);
    }
    sub_20F8ECB18(v246, v381);
    v249 = (uint64_t)(a1 + 1934);
    v250 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v250)
    {
      v251 = (v250 >> 2) - 1;
      do
        sub_20F8ECDF0(v249, *(_DWORD *)(*v66 + 4 * v251--));
      while (v251 != -1);
    }
    sub_20F8ECB18(v249, v381);
    v252 = (uint64_t)(a1 + 2294);
    v253 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v253)
    {
      v254 = (v253 >> 2) - 1;
      do
        sub_20F8ECDF0(v252, *(_DWORD *)(*v70 + 4 * v254--));
      while (v254 != -1);
    }
    sub_20F8ECB18(v252, v381);
    v255 = (uint64_t)(a1 + 2654);
    v256 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v256)
    {
      v257 = (v256 >> 2) - 1;
      do
        sub_20F8ECDF0(v255, *(_DWORD *)(*v74 + 4 * v257--));
      while (v257 != -1);
    }
    sub_20F8ECB18(v255, v381);
    v258 = (uint64_t)(a1 + 3014);
    v259 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v259)
    {
      v260 = (v259 >> 2) - 1;
      do
        sub_20F8ECDF0(v258, *(_DWORD *)(*v78 + 4 * v260--));
      while (v260 != -1);
    }
    sub_20F8ECB18(v258, v381);
    v261 = (uint64_t)(a1 + 3374);
    v262 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v262)
    {
      v263 = (v262 >> 2) - 1;
      do
        sub_20F8ECDF0(v261, *(_DWORD *)&(*v390)[4 * v263--]);
      while (v263 != -1);
    }
    sub_20F8ECB18(v261, v381);
    v264 = (uint64_t)(a1 + 98);
    v265 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v265)
    {
      v266 = (v265 >> 2) - 1;
      do
        sub_20F8ECDF0(v264, *(_DWORD *)(*(_QWORD *)a3 + 4 * v266--));
      while (v266 != -1);
    }
    sub_20F8ECB18(v264, v384);
    v267 = (uint64_t)(a1 + 458);
    v268 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v268)
    {
      v269 = (v268 >> 2) - 1;
      do
        sub_20F8ECDF0(v267, *(_DWORD *)&(*v387)[4 * v269--]);
      while (v269 != -1);
    }
    sub_20F8ECB18(v267, v384);
    v270 = (uint64_t)(a1 + 818);
    v271 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v271)
    {
      v272 = (v271 >> 2) - 1;
      do
        sub_20F8ECDF0(v270, *(_DWORD *)&(*v384)[4 * v272--]);
      while (v272 != -1);
    }
    sub_20F8ECB18(v270, v384);
    v273 = (uint64_t)(a1 + 1178);
    v274 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v274)
    {
      v275 = (v274 >> 2) - 1;
      do
        sub_20F8ECDF0(v273, *(_DWORD *)&(*v381)[4 * v275--]);
      while (v275 != -1);
    }
    sub_20F8ECB18(v273, v384);
    v276 = (uint64_t)(a1 + 1538);
    v277 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v277)
    {
      v278 = (v277 >> 2) - 1;
      do
        sub_20F8ECDF0(v276, *(_DWORD *)(*v62 + 4 * v278--));
      while (v278 != -1);
    }
    sub_20F8ECB18(v276, v384);
    v279 = (uint64_t)(a1 + 1898);
    v280 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v280)
    {
      v281 = (v280 >> 2) - 1;
      do
        sub_20F8ECDF0(v279, *(_DWORD *)(*v66 + 4 * v281--));
      while (v281 != -1);
    }
    sub_20F8ECB18(v279, v384);
    v282 = (uint64_t)(a1 + 2258);
    v283 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v283)
    {
      v284 = (v283 >> 2) - 1;
      do
        sub_20F8ECDF0(v282, *(_DWORD *)(*v70 + 4 * v284--));
      while (v284 != -1);
    }
    sub_20F8ECB18(v282, v384);
    v285 = (uint64_t)(a1 + 2618);
    v286 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v286)
    {
      v287 = (v286 >> 2) - 1;
      do
        sub_20F8ECDF0(v285, *(_DWORD *)(*v74 + 4 * v287--));
      while (v287 != -1);
    }
    sub_20F8ECB18(v285, v384);
    v288 = (uint64_t)(a1 + 2978);
    v289 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v289)
    {
      v290 = (v289 >> 2) - 1;
      do
        sub_20F8ECDF0(v288, *(_DWORD *)(*v78 + 4 * v290--));
      while (v290 != -1);
    }
    sub_20F8ECB18(v288, v384);
    v291 = (uint64_t)(a1 + 3338);
    v292 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v292)
    {
      v293 = (v292 >> 2) - 1;
      do
        sub_20F8ECDF0(v291, *(_DWORD *)&(*v390)[4 * v293--]);
      while (v293 != -1);
    }
    sub_20F8ECB18(v291, v384);
    v294 = (uint64_t)(a1 + 62);
    v295 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v295)
    {
      v296 = (v295 >> 2) - 1;
      do
        sub_20F8ECDF0(v294, *(_DWORD *)(*(_QWORD *)a3 + 4 * v296--));
      while (v296 != -1);
    }
    sub_20F8ECB18(v294, v387);
    v297 = (uint64_t)(a1 + 422);
    v298 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v298)
    {
      v299 = (v298 >> 2) - 1;
      do
        sub_20F8ECDF0(v297, *(_DWORD *)&(*v387)[4 * v299--]);
      while (v299 != -1);
    }
    sub_20F8ECB18(v297, v387);
    v300 = (uint64_t)(a1 + 782);
    v301 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v301)
    {
      v302 = (v301 >> 2) - 1;
      do
        sub_20F8ECDF0(v300, *(_DWORD *)&(*v384)[4 * v302--]);
      while (v302 != -1);
    }
    sub_20F8ECB18(v300, v387);
    v303 = (uint64_t)(a1 + 1142);
    v304 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v304)
    {
      v305 = (v304 >> 2) - 1;
      do
        sub_20F8ECDF0(v303, *(_DWORD *)&(*v381)[4 * v305--]);
      while (v305 != -1);
    }
    sub_20F8ECB18(v303, v387);
    v306 = (uint64_t)(a1 + 1502);
    v307 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v307)
    {
      v308 = (v307 >> 2) - 1;
      do
        sub_20F8ECDF0(v306, *(_DWORD *)(*v62 + 4 * v308--));
      while (v308 != -1);
    }
    sub_20F8ECB18(v306, v387);
    v309 = (uint64_t)(a1 + 1862);
    v310 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v310)
    {
      v311 = (v310 >> 2) - 1;
      do
        sub_20F8ECDF0(v309, *(_DWORD *)(*v66 + 4 * v311--));
      while (v311 != -1);
    }
    sub_20F8ECB18(v309, v387);
    v312 = (uint64_t)(a1 + 2222);
    v313 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v313)
    {
      v314 = (v313 >> 2) - 1;
      do
        sub_20F8ECDF0(v312, *(_DWORD *)(*v70 + 4 * v314--));
      while (v314 != -1);
    }
    sub_20F8ECB18(v312, v387);
    v315 = (uint64_t)(a1 + 2582);
    v316 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v316)
    {
      v317 = (v316 >> 2) - 1;
      do
        sub_20F8ECDF0(v315, *(_DWORD *)(*v74 + 4 * v317--));
      while (v317 != -1);
    }
    sub_20F8ECB18(v315, v387);
    v318 = (uint64_t)(a1 + 2942);
    v319 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v319)
    {
      v320 = (v319 >> 2) - 1;
      do
        sub_20F8ECDF0(v318, *(_DWORD *)(*v78 + 4 * v320--));
      while (v320 != -1);
    }
    v321 = (uint64_t)(a1 + 26);
    sub_20F8ECB18(v318, v387);
    v322 = (uint64_t)(a1 + 3302);
    v323 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v323)
    {
      v324 = (v323 >> 2) - 1;
      do
        sub_20F8ECDF0(v322, *(_DWORD *)&(*v390)[4 * v324--]);
      while (v324 != -1);
    }
    sub_20F8ECB18(v322, v387);
    v325 = a3;
    v326 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v326)
    {
      v327 = (v326 >> 2) - 1;
      do
        sub_20F8ECDF0(v321, *(_DWORD *)(*(_QWORD *)a3 + 4 * v327--));
      while (v327 != -1);
    }
    sub_20F8ECB18(v321, (char **)a3);
    v328 = (uint64_t)(a1 + 386);
    v329 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v329)
    {
      v330 = (v329 >> 2) - 1;
      do
        sub_20F8ECDF0(v328, *(_DWORD *)&(*v387)[4 * v330--]);
      while (v330 != -1);
    }
    sub_20F8ECB18(v328, (char **)a3);
    v331 = (uint64_t)(a1 + 746);
    v332 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v332)
    {
      v333 = (v332 >> 2) - 1;
      do
        sub_20F8ECDF0(v331, *(_DWORD *)&(*v384)[4 * v333--]);
      while (v333 != -1);
    }
    sub_20F8ECB18(v331, (char **)a3);
    v334 = (uint64_t)(a1 + 1106);
    v335 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v335)
    {
      v336 = (v335 >> 2) - 1;
      do
        sub_20F8ECDF0(v334, *(_DWORD *)&(*v381)[4 * v336--]);
      while (v336 != -1);
    }
    sub_20F8ECB18(v334, (char **)a3);
    v337 = (uint64_t)(a1 + 1466);
    v338 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v338)
    {
      v339 = (v338 >> 2) - 1;
      do
        sub_20F8ECDF0(v337, *(_DWORD *)(*v62 + 4 * v339--));
      while (v339 != -1);
    }
    sub_20F8ECB18(v337, (char **)a3);
    v340 = (uint64_t)(a1 + 1826);
    v341 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v341)
    {
      v342 = (v341 >> 2) - 1;
      do
        sub_20F8ECDF0(v340, *(_DWORD *)(*v66 + 4 * v342--));
      while (v342 != -1);
    }
    sub_20F8ECB18(v340, (char **)a3);
    v343 = (uint64_t)(a1 + 2186);
    v344 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v344)
    {
      v345 = (v344 >> 2) - 1;
      do
        sub_20F8ECDF0(v343, *(_DWORD *)(*v70 + 4 * v345--));
      while (v345 != -1);
    }
    sub_20F8ECB18(v343, (char **)a3);
    v346 = (uint64_t)(a1 + 2546);
    v347 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v347)
    {
      v348 = (v347 >> 2) - 1;
      do
        sub_20F8ECDF0(v346, *(_DWORD *)(*v74 + 4 * v348--));
      while (v348 != -1);
    }
    sub_20F8ECB18(v346, (char **)a3);
    v349 = (uint64_t)(a1 + 2906);
    v350 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v350)
    {
      v351 = (v350 >> 2) - 1;
      do
        sub_20F8ECDF0(v349, *(_DWORD *)(*v78 + 4 * v351--));
      while (v351 != -1);
    }
    sub_20F8ECB18(v349, (char **)a3);
    v352 = (uint64_t)(a1 + 3266);
    v353 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v353)
    {
      v354 = (v353 >> 2) - 1;
      do
        sub_20F8ECDF0(v352, *(_DWORD *)&(*v390)[4 * v354--]);
      while (v354 != -1);
    }
    sub_20F8ECB18(v352, (char **)a3);
    v355 = 0;
    v356 = 0;
    v357 = *(_QWORD *)a1;
    v382 = a1 + 16;
    v358 = *(char **)a1;
    v359 = *(char **)a1;
    v360 = *(char **)a1;
    do
    {
      v362 = v382[v355];
      v382[v355] = v362 - v356;
      v363 = *(_DWORD **)(v325 + 24 * v355);
      v364 = v325 + 24 * v355;
      v367 = *(_DWORD **)(v364 + 8);
      v365 = (_QWORD *)(v364 + 8);
      v366 = v367;
      if (v363 != v367)
      {
        v385 = v365;
        v388 = (_QWORD *)(v325 + 24 * v355);
        v391 = v356;
        v368 = dword_2103B93C4[v355];
        do
        {
          while (1)
          {
            v369 = v362 + *v363 * v368;
            v370 = (char *)(v357 + 8 * v369);
            if (v359 != v370)
              break;
            v359 += 8 * v368;
            if (++v363 == v366)
              goto LABEL_351;
          }
          v371 = (char *)(v357 + 8 * v369);
          if (v358 != v359)
          {
            v372 = v370 - v359;
            memmove(v360, v359, v370 - v359);
            v371 = &v360[v372];
            v357 = *(_QWORD *)a1;
          }
          v359 = (char *)(v357 + 8 * (v369 + v368));
          v360 = v371;
          v358 = v370;
          ++v363;
        }
        while (v363 != v366);
LABEL_351:
        v361 = (*v385 - *v388) >> 2;
        v325 = a3;
        a1[v355 + 6] -= v361;
        v356 = v391 + v368 * v361;
      }
      ++v355;
    }
    while (v355 != 10);
    if (v358 != v359)
    {
      v373 = (_BYTE *)(v357 + 8 * a1[4]);
      if (v373 != v359)
        memmove(v360, v359, v373 - v359);
    }
    sub_20F20CEEC(a1, a1[4] - v356, 1u);
  }
}

uint64_t sub_20F8ECB18(uint64_t result, char **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a2[1] - *a2;
  if (v28)
  {
    v2 = result;
    v27 = *(unsigned int *)(result + 12);
    if ((_DWORD)v27)
    {
      v3 = 0;
      v4 = *(unsigned int *)*a2;
      v33 = result + 40;
      if ((unint64_t)(v28 >> 2) <= 2)
        v5 = 2;
      else
        v5 = v28 >> 2;
      v26 = *(unsigned int *)*a2;
      do
      {
        v31 = *(_QWORD *)(v2 + 88);
        v30 = *(_DWORD *)(v2 + 112) * v3;
        v6 = v31 + 8 * v30;
        v29 = *(_DWORD *)(v2 + 8);
        v7 = (uint64_t *)(v6 + 8 * v4);
        v8 = *v7;
        v9 = 8 * v3;
        if (*v7 != -1)
        {
          v10 = *(_QWORD *)(v2 + 56);
          v11 = *(_QWORD *)(v2 + 48);
          v12 = ((v10 - v11) << 6) - 1;
          if (v10 == v11)
            v12 = 0;
          v13 = *(_QWORD *)(v2 + 80) + *(_QWORD *)(v2 + 72);
          if (v12 == v13)
          {
            sub_20EDB36DC(v33);
            v11 = *(_QWORD *)(v2 + 48);
            v13 = *(_QWORD *)(v2 + 80) + *(_QWORD *)(v2 + 72);
            v8 = *v7;
          }
          *(_QWORD *)(*(_QWORD *)(v11 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v8;
          ++*(_QWORD *)(v2 + 80);
          --*(_QWORD *)(*(_QWORD *)(v2 + 120) + 8 * v3);
        }
        v32 = v3;
        v14 = (_BYTE *)(v6 + 8 + 8 * v4);
        if ((unint64_t)v28 >= 5)
        {
          v15 = 1;
          do
          {
            v16 = *(unsigned int *)&(*a2)[4 * v15];
            v17 = (char *)(v6 + 8 * v16);
            v18 = *(_QWORD *)v17;
            if (*(_QWORD *)v17 != -1)
            {
              v19 = *(_QWORD *)(v2 + 56);
              v20 = *(_QWORD *)(v2 + 48);
              v21 = ((v19 - v20) << 6) - 1;
              if (v19 == v20)
                v21 = 0;
              v22 = *(_QWORD *)(v2 + 80) + *(_QWORD *)(v2 + 72);
              if (v21 == v22)
              {
                sub_20EDB36DC(v33);
                v20 = *(_QWORD *)(v2 + 48);
                v22 = *(_QWORD *)(v2 + 80) + *(_QWORD *)(v2 + 72);
                v18 = *(_QWORD *)v17;
              }
              *(_QWORD *)(*(_QWORD *)(v20 + ((v22 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v22 & 0x1FF)) = v18;
              ++*(_QWORD *)(v2 + 80);
              --*(_QWORD *)(*(_QWORD *)(v2 + 120) + v9);
            }
            v23 = v17 - v14;
            if (v23)
              memmove(v7, v14, v23);
            v7 = (uint64_t *)((char *)v7 + v23);
            ++v15;
            v14 = (_BYTE *)(v6 + 8 + 8 * v16);
          }
          while (v5 != v15);
        }
        v24 = (_BYTE *)(v31 + 8 * (v30 + v29));
        if (v24 != v14)
          memmove(v7, v14, v24 - v14);
        if (v14 - (_BYTE *)v7 >= 1)
          memset((char *)v7 + v24 - v14, 255, 8 * (((unint64_t)(v14 - (_BYTE *)v7) >> 3) - ((unint64_t)(v14 - (_BYTE *)v7) > 7)) + 8);
        v3 = v32 + 1;
        v4 = v26;
      }
      while (v32 + 1 != v27);
      v25 = *(unsigned int *)(v2 + 12);
    }
    else
    {
      v25 = 0;
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 24))(v2, *(_DWORD *)(v2 + 8) - ((unint64_t)v28 >> 2), v25);
  }
  return result;
}

void sub_20F8ECDF0(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 112);
  v6 = v5 * a2;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = v6 + v7;
    v9 = 8 * v6;
    v10 = (uint64_t *)(v4 + v9);
    v11 = 8 * v8 - v9;
    do
    {
      v12 = *v10;
      if (*v10 != -1)
      {
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 48);
        v15 = ((v13 - v14) << 6) - 1;
        if (v13 == v14)
          v15 = 0;
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
        if (v15 == v16)
        {
          sub_20EDB36DC(a1 + 40);
          v14 = *(_QWORD *)(a1 + 48);
          v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          v12 = *v10;
        }
        *(_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF)) = v12;
        ++*(_QWORD *)(a1 + 80);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v4 = *(_QWORD *)(a1 + 88);
    v5 = *(_DWORD *)(a1 + 112);
    v6 = v5 * a2;
  }
  v17 = v5 + v5 * a2;
  if (v6 != v17)
  {
    v18 = (char *)(v4 + 8 * v6);
    v19 = (_BYTE *)(v4 + 8 * v17);
    v20 = *(_BYTE **)(a1 + 96);
    v21 = v20 - v19;
    if (v20 != v19)
      memmove(v18, v19, v20 - v19);
    *(_QWORD *)(a1 + 96) = &v18[v21];
  }
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 120) + 8 * a2;
  v24 = v22 - (v23 + 8);
  if (v22 != v23 + 8)
    memmove((void *)v23, (const void *)(v23 + 8), v22 - (v23 + 8));
  *(_QWORD *)(a1 + 128) = v23 + v24;
  --*(_DWORD *)(a1 + 12);
}

_QWORD *sub_20F8ECF48(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  int64_t v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  char *v47;
  char *v48;
  _BYTE *v49;
  _BYTE *v50;
  int64_t v51;
  char *v52;
  char *v53;

  a1[1] = 0;
  *a1 = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      goto LABEL_32;
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      goto LABEL_32;
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      goto LABEL_32;
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[4 * (v16 >> 2)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v20 = *(_BYTE **)(a2 + 72);
  v19 = *(_BYTE **)(a2 + 80);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      goto LABEL_32;
    v22 = (char *)operator new(v19 - v20);
    a1[9] = v22;
    a1[10] = v22;
    v23 = &v22[4 * (v21 >> 2)];
    a1[11] = v23;
    memcpy(v22, v20, v21);
    a1[10] = v23;
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  v25 = *(_BYTE **)(a2 + 96);
  v24 = *(_BYTE **)(a2 + 104);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      goto LABEL_32;
    v27 = (char *)operator new(v24 - v25);
    a1[12] = v27;
    a1[13] = v27;
    v28 = &v27[4 * (v26 >> 2)];
    a1[14] = v28;
    memcpy(v27, v25, v26);
    a1[13] = v28;
  }
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  v30 = *(_BYTE **)(a2 + 120);
  v29 = *(_BYTE **)(a2 + 128);
  v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0)
      goto LABEL_32;
    v32 = (char *)operator new(v29 - v30);
    a1[15] = v32;
    a1[16] = v32;
    v33 = &v32[4 * (v31 >> 2)];
    a1[17] = v33;
    memcpy(v32, v30, v31);
    a1[16] = v33;
  }
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  v35 = *(_BYTE **)(a2 + 144);
  v34 = *(_BYTE **)(a2 + 152);
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0)
      goto LABEL_32;
    v37 = (char *)operator new(v34 - v35);
    a1[18] = v37;
    a1[19] = v37;
    v38 = &v37[4 * (v36 >> 2)];
    a1[20] = v38;
    memcpy(v37, v35, v36);
    a1[19] = v38;
  }
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  v40 = *(_BYTE **)(a2 + 168);
  v39 = *(_BYTE **)(a2 + 176);
  v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0)
      goto LABEL_32;
    v42 = (char *)operator new(v39 - v40);
    a1[21] = v42;
    a1[22] = v42;
    v43 = &v42[4 * (v41 >> 2)];
    a1[23] = v43;
    memcpy(v42, v40, v41);
    a1[22] = v43;
  }
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  v45 = *(_BYTE **)(a2 + 192);
  v44 = *(_BYTE **)(a2 + 200);
  v46 = v44 - v45;
  if (v44 != v45)
  {
    if (v46 < 0)
      goto LABEL_32;
    v47 = (char *)operator new(v44 - v45);
    a1[24] = v47;
    a1[25] = v47;
    v48 = &v47[4 * (v46 >> 2)];
    a1[26] = v48;
    memcpy(v47, v45, v46);
    a1[25] = v48;
  }
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  v50 = *(_BYTE **)(a2 + 216);
  v49 = *(_BYTE **)(a2 + 224);
  v51 = v49 - v50;
  if (v49 != v50)
  {
    if ((v51 & 0x8000000000000000) == 0)
    {
      v52 = (char *)operator new(v49 - v50);
      a1[27] = v52;
      a1[28] = v52;
      v53 = &v52[4 * (v51 >> 2)];
      a1[29] = v53;
      memcpy(v52, v50, v51);
      a1[28] = v53;
      return a1;
    }
LABEL_32:
    sub_20E867F44();
  }
  return a1;
}

void sub_20F8ED320(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;

  if (v3)
  {
    v5 = v2;
    do
    {
      v7 = *(void **)(v5 - 24);
      v5 -= 24;
      v6 = v7;
      if (v7)
      {
        *(_QWORD *)(v2 - 16) = v6;
        operator delete(v6);
      }
      v2 = v5;
    }
    while (v5 != v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20F8ED370(uint64_t a1, uint64_t a2, char **a3, int **a4)
{
  char **v4;
  char **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  int **v20;
  char **v21;
  char *v22;
  char *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  _DWORD *v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t *v46;
  int *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  int **v58;
  __n128 result;
  int *v60;
  int *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int *v67;
  int *i;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int *v76;
  int *j;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  int *v83;
  int *k;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  int *v90;
  int *m;
  int v92;
  int v93;
  __n128 *v94;
  __n128 *v95;
  int *v96;
  int *n;
  int v98;
  int v99;
  int *v100;
  int *ii;
  int v102;
  int v103;
  uint64_t v104;
  _OWORD *v105;
  __int128 v106;
  int *v107;
  int *jj;
  int v109;
  int v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 v113;
  int *v114;
  int *kk;
  int v116;
  int v117;
  __n128 *v118;
  __n128 *v119;
  int *v120;
  int *mm;
  int v122;
  int v123;
  __n128 *v124;
  __n128 *v125;
  uint64_t v127;
  uint64_t v128;
  char **v129;
  char **v130;
  uint64_t v132;
  char *v133;
  int **v134;
  _QWORD **v135;
  int **v136;
  unint64_t v137;

  v4 = a3;
  v6 = (char **)(a1 + 15304);
  if ((char **)(a1 + 15304) != a3)
    sub_20F8EE574(a3, v6);
  v129 = v6;
  v7 = 0;
  v127 = a2;
  do
  {
    v8 = v4[3 * v7];
    v9 = v4[3 * v7 + 1];
    v10 = a2 + 15304 + 24 * v7;
    v11 = *(unsigned int **)v10;
    v12 = *(unsigned int **)(v10 + 8);
    v13 = v8 == v9 || v11 == v12;
    if (!v13)
    {
      v14 = v4[3 * v7];
      do
      {
        v15 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 >= *v11)
        {
          if (*v11 >= v15)
          {
            *(_DWORD *)v8 = v15;
            v8 += 4;
            v14 += 4;
          }
          ++v11;
          if (v14 == v9)
            break;
        }
        else
        {
          v14 += 4;
          if (v14 == v9)
            break;
        }
      }
      while (v11 != v12);
    }
    if (v8 != v9)
      v4[3 * v7 + 1] = v8;
    ++v7;
  }
  while (v7 != 10);
  v128 = a2 + 15304;
  v16 = 0;
  v130 = v4;
  do
  {
    v132 = v16;
    v17 = 3 * v16;
    v18 = &a4[v17];
    v19 = a4[v17];
    a4[v17 + 1] = v19;
    v20 = &a4[v17 + 1];
    v21 = &v4[v17];
    v22 = v4[v17];
    v24 = v21 + 1;
    v23 = v21[1];
    if (v22 != v23)
    {
      v25 = v23 - v22;
      v26 = v25 >> 2;
      v136 = &a4[3 * v132 + 2];
      if (v25 >> 2 > (unint64_t)(((char *)*v136 - (char *)v19) >> 3))
      {
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFDLL)
          sub_20E92CED8();
        v27 = (char *)operator new(2 * v25);
        *v18 = v27;
        *v20 = (int *)v27;
        *v136 = (int *)&v27[8 * v26];
        if (v19)
          operator delete(v19);
      }
      v28 = *v21;
      v29 = *v24;
      v13 = *v21 == *v24;
      v30 = (uint64_t *)&a4[3 * v132 + 2];
      if (!v13)
      {
        v31 = 0;
        v32 = 0;
        v33 = *(_DWORD **)(v128 + 24 * v132);
        v34 = v129[3 * v132];
        v133 = v29;
        v134 = v20;
        v135 = (_QWORD **)v18;
        v35 = *(_DWORD *)v28;
        if (*v33 < *(_DWORD *)v28)
          goto LABEL_31;
        while (1)
        {
          if (*(_DWORD *)v34 < v35)
          {
            do
            {
              v37 = *((_DWORD *)v34 + 1);
              v34 += 4;
              v31 = (v31 + 1);
            }
            while (v37 < v35);
          }
          v38 = (char *)*v20;
          v39 = *v30;
          if ((unint64_t)*v20 >= *v30)
            break;
          *(_QWORD *)v38 = v32 | (unint64_t)(v31 << 32);
          *v20 = (int *)(v38 + 8);
          v28 += 4;
          if (v28 == v29)
            goto LABEL_20;
LABEL_30:
          v35 = *(_DWORD *)v28;
          if (*v33 < *(_DWORD *)v28)
          {
            do
            {
LABEL_31:
              v36 = v33[1];
              ++v33;
              ++v32;
            }
            while (v36 < v35);
          }
        }
        v40 = (char *)*v18;
        v41 = (uint64_t)&v38[-*v18];
        v42 = v41 >> 3;
        v43 = (v41 >> 3) + 1;
        if (v43 >> 61)
          sub_20E92CED8();
        v44 = v39 - (_QWORD)v40;
        if (v44 >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        v137 = v43;
        if (v43)
        {
          if (v43 >> 61)
            sub_20E877A38();
          v45 = operator new(8 * v43);
        }
        else
        {
          v45 = 0;
        }
        v46 = (unint64_t *)&v45[8 * v42];
        *v46 = v32 | (unint64_t)(v31 << 32);
        v47 = (int *)(v46 + 1);
        if (v38 == v40)
        {
          v18 = v135;
          v30 = (uint64_t *)&a4[3 * v132 + 2];
          goto LABEL_54;
        }
        v48 = v38 - v40 - 8;
        if (v48 >= 0x58)
        {
          v49 = v38 - v45 - v41;
          v30 = (uint64_t *)&a4[3 * v132 + 2];
          if (v49 >= 0x20)
          {
            v50 = (v48 >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v52 = &v38[-v51];
            v46 = (unint64_t *)((char *)v46 - v51);
            v53 = &v45[8 * v42 - 16];
            v54 = v38 - 16;
            v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            v38 = v52;
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_53;
          }
        }
        else
        {
          v30 = (uint64_t *)&a4[3 * v132 + 2];
        }
        do
        {
          v57 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v46 = v57;
        }
        while (v38 != v40);
LABEL_53:
        v18 = v135;
        v38 = (char *)*v135;
LABEL_54:
        *v18 = v46;
        v20 = v134;
        *v134 = v47;
        *v30 = (uint64_t)&v45[8 * v137];
        if (v38)
          operator delete(v38);
        v29 = v133;
        *v134 = v47;
        v28 += 4;
        if (v28 == v133)
          goto LABEL_20;
        goto LABEL_30;
      }
    }
LABEL_20:
    v16 = v132 + 1;
    v4 = v130;
  }
  while (v132 != 9);
  v58 = a4;
  sub_20F8EE66C(a1 + 1400, v127 + 1400, a4 + 27, *a4, a4[1]);
  sub_20F8EE940(a1 + 2840, v127 + 2840, a4 + 27, v58[3], v58[4]);
  sub_20F8EE66C(a1 + 4280, v127 + 4280, a4 + 27, v58[6], v58[7]);
  sub_20F8EE66C(a1 + 5720, v127 + 5720, a4 + 27, v58[9], v58[10]);
  sub_20F8EEC2C(a1 + 7160, v127 + 7160, a4 + 27, v58[12], v58[13]);
  sub_20F8EEEEC(a1 + 8600, v127 + 8600, a4 + 27, v58[15], v58[16]);
  sub_20F8EF1A4(a1 + 10040, v127 + 10040, a4 + 27, v58[18], v58[19]);
  sub_20F8EF1A4(a1 + 11480, v127 + 11480, a4 + 27, v58[21], v58[22]);
  sub_20F8EEC2C(a1 + 12920, v127 + 12920, a4 + 27, v58[24], v58[25]);
  sub_20F8EEC2C(a1 + 14360, v127 + 14360, a4 + 27, v58[27], v58[28]);
  sub_20F8EE66C(a1 + 1256, v127 + 1256, v58 + 24, *v58, v58[1]);
  sub_20F8EE940(a1 + 2696, v127 + 2696, v58 + 24, a4[3], v58[4]);
  sub_20F8EE66C(a1 + 4136, v127 + 4136, v58 + 24, a4[6], v58[7]);
  sub_20F8EE66C(a1 + 5576, v127 + 5576, v58 + 24, a4[9], v58[10]);
  sub_20F8EEC2C(a1 + 7016, v127 + 7016, v58 + 24, a4[12], v58[13]);
  sub_20F8EEEEC(a1 + 8456, v127 + 8456, v58 + 24, a4[15], v58[16]);
  sub_20F8EF1A4(a1 + 9896, v127 + 9896, v58 + 24, a4[18], v58[19]);
  sub_20F8EF1A4(a1 + 11336, v127 + 11336, v58 + 24, a4[21], v58[22]);
  sub_20F8EEC2C(a1 + 12776, v127 + 12776, v58 + 24, v58[24], v58[25]);
  sub_20F8EEC2C(a1 + 14216, v127 + 14216, v58 + 24, v58[27], v58[28]);
  sub_20F8EF468(a1 + 1112, v127 + 1112, v58 + 21, *v58, v58[1]);
  sub_20F8EF744(a1 + 2552, v127 + 2552, v58 + 21, a4[3], v58[4]);
  sub_20F8EF468(a1 + 3992, v127 + 3992, v58 + 21, a4[6], v58[7]);
  sub_20F8EF468(a1 + 5432, v127 + 5432, v58 + 21, a4[9], v58[10]);
  sub_20F8EF1A4(a1 + 6872, v127 + 6872, v58 + 21, a4[12], v58[13]);
  sub_20F8EFA38(a1 + 8312, v127 + 8312, v58 + 21, a4[15], v58[16]);
  sub_20F8EFCE8(a1 + 9752, v127 + 9752, v58 + 21, a4[18], v58[19]);
  sub_20F8EFCE8(a1 + 11192, v127 + 11192, v58 + 21, a4[21], v58[22]);
  sub_20F8EF1A4(a1 + 12632, v127 + 12632, v58 + 21, a4[24], v58[25]);
  sub_20F8EF1A4(a1 + 14072, v127 + 14072, v58 + 21, v58[27], v58[28]);
  sub_20F8EF468(a1 + 968, v127 + 968, v58 + 18, *v58, v58[1]);
  sub_20F8EF744(a1 + 2408, v127 + 2408, v58 + 18, a4[3], v58[4]);
  sub_20F8EF468(a1 + 3848, v127 + 3848, v58 + 18, a4[6], v58[7]);
  sub_20F8EF468(a1 + 5288, v127 + 5288, v58 + 18, a4[9], v58[10]);
  sub_20F8EF1A4(a1 + 6728, v127 + 6728, v58 + 18, a4[12], v58[13]);
  sub_20F8EFA38(a1 + 8168, v127 + 8168, v58 + 18, a4[15], v58[16]);
  sub_20F8EFCE8(a1 + 9608, v127 + 9608, v58 + 18, a4[18], v58[19]);
  sub_20F8EFCE8(a1 + 11048, v127 + 11048, v58 + 18, a4[21], v58[22]);
  sub_20F8EF1A4(a1 + 12488, v127 + 12488, v58 + 18, a4[24], v58[25]);
  sub_20F8EF1A4(a1 + 13928, v127 + 13928, v58 + 18, v58[27], v58[28]);
  sub_20F8EFFB4(a1 + 824, v127 + 824, v58 + 15, *v58, v58[1]);
  sub_20F8EEC2C(a1 + 2264, v127 + 2264, v58 + 15, a4[3], v58[4]);
  sub_20F8EFFB4(a1 + 3704, v127 + 3704, v58 + 15, a4[6], v58[7]);
  sub_20F8EFFB4(a1 + 5144, v127 + 5144, v58 + 15, a4[9], v58[10]);
  sub_20F8EEEEC(a1 + 6584, v127 + 6584, v58 + 15, a4[12], v58[13]);
  sub_20F8F026C(a1 + 8024, v127 + 8024, v58 + 15, a4[15], v58[16]);
  sub_20F8EFA38(a1 + 9464, v127 + 9464, v58 + 15, a4[18], v58[19]);
  sub_20F8EFA38(a1 + 10904, v127 + 10904, v58 + 15, a4[21], v58[22]);
  sub_20F8EEEEC(a1 + 12344, v127 + 12344, v58 + 15, a4[24], v58[25]);
  sub_20F8EEEEC(a1 + 13784, v127 + 13784, v58 + 15, v58[27], v58[28]);
  sub_20F8EE66C(a1 + 680, v127 + 680, a4 + 12, *v58, v58[1]);
  sub_20F8EE940(a1 + 2120, v127 + 2120, a4 + 12, a4[3], a4[4]);
  sub_20F8EE66C(a1 + 3560, v127 + 3560, a4 + 12, a4[6], a4[7]);
  sub_20F8EE66C(a1 + 5000, v127 + 5000, a4 + 12, a4[9], a4[10]);
  sub_20F8EEC2C(a1 + 6440, v127 + 6440, a4 + 12, a4[12], a4[13]);
  sub_20F8EEEEC(a1 + 7880, v127 + 7880, a4 + 12, a4[15], a4[16]);
  sub_20F8EF1A4(a1 + 9320, v127 + 9320, a4 + 12, a4[18], a4[19]);
  sub_20F8EF1A4(a1 + 10760, v127 + 10760, a4 + 12, a4[21], a4[22]);
  sub_20F8EEC2C(a1 + 12200, v127 + 12200, a4 + 12, a4[24], a4[25]);
  sub_20F8EEC2C(a1 + 13640, v127 + 13640, a4 + 12, v58[27], v58[28]);
  sub_20F8EF744(a1 + 536, v127 + 536, a4 + 9, *v58, v58[1]);
  sub_20F8F051C(a1 + 1976, v127 + 1976, a4 + 9, a4[3], a4[4]);
  sub_20F8EF744(a1 + 3416, v127 + 3416, a4 + 9, a4[6], a4[7]);
  sub_20F8EF744(a1 + 4856, v127 + 4856, a4 + 9, a4[9], a4[10]);
  sub_20F8EE66C(a1 + 6296, v127 + 6296, a4 + 9, a4[12], a4[13]);
  sub_20F8EFFB4(a1 + 7736, v127 + 7736, a4 + 9, a4[15], a4[16]);
  sub_20F8EF468(a1 + 9176, v127 + 9176, a4 + 9, a4[18], a4[19]);
  sub_20F8EF468(a1 + 10616, v127 + 10616, a4 + 9, a4[21], a4[22]);
  sub_20F8EE66C(a1 + 12056, v127 + 12056, a4 + 9, a4[24], a4[25]);
  sub_20F8EE66C(a1 + 13496, v127 + 13496, a4 + 9, v58[27], v58[28]);
  sub_20F8EF744(a1 + 392, v127 + 392, a4 + 6, *v58, v58[1]);
  sub_20F8F051C(a1 + 1832, v127 + 1832, a4 + 6, a4[3], a4[4]);
  sub_20F8EF744(a1 + 3272, v127 + 3272, a4 + 6, a4[6], a4[7]);
  sub_20F8EF744(a1 + 4712, v127 + 4712, a4 + 6, a4[9], a4[10]);
  sub_20F8EE66C(a1 + 6152, v127 + 6152, a4 + 6, a4[12], a4[13]);
  sub_20F8EFFB4(a1 + 7592, v127 + 7592, a4 + 6, a4[15], a4[16]);
  sub_20F8EF468(a1 + 9032, v127 + 9032, a4 + 6, a4[18], a4[19]);
  sub_20F8EF468(a1 + 10472, v127 + 10472, a4 + 6, a4[21], a4[22]);
  sub_20F8EE66C(a1 + 11912, v127 + 11912, a4 + 6, a4[24], a4[25]);
  sub_20F8EE66C(a1 + 13352, v127 + 13352, a4 + 6, v58[27], v58[28]);
  sub_20F8F051C(a1 + 248, v127 + 248, a4 + 3, *v58, v58[1]);
  sub_20F8F0848(a1 + 1688, v127 + 1688, a4 + 3, a4[3], a4[4]);
  sub_20F8F051C(a1 + 3128, v127 + 3128, a4 + 3, a4[6], a4[7]);
  sub_20F8F051C(a1 + 4568, v127 + 4568, a4 + 3, a4[9], a4[10]);
  sub_20F8EE940(a1 + 6008, v127 + 6008, a4 + 3, a4[12], a4[13]);
  sub_20F8EEC2C(a1 + 7448, v127 + 7448, a4 + 3, a4[15], a4[16]);
  sub_20F8EF744(a1 + 8888, v127 + 8888, a4 + 3, a4[18], a4[19]);
  sub_20F8EF744(a1 + 10328, v127 + 10328, a4 + 3, a4[21], a4[22]);
  sub_20F8EE940(a1 + 11768, v127 + 11768, a4 + 3, a4[24], a4[25]);
  sub_20F8EE940(a1 + 13208, v127 + 13208, a4 + 3, v58[27], v58[28]);
  sub_20F8EF744(a1 + 104, v127 + 104, v58, *v58, v58[1]);
  sub_20F8F051C(a1 + 1544, v127 + 1544, v58, a4[3], v58[4]);
  sub_20F8EF744(a1 + 2984, v127 + 2984, v58, a4[6], v58[7]);
  sub_20F8EF744(a1 + 4424, v127 + 4424, v58, a4[9], v58[10]);
  sub_20F8EE66C(a1 + 5864, v127 + 5864, v58, a4[12], v58[13]);
  sub_20F8EFFB4(a1 + 7304, v127 + 7304, v58, a4[15], v58[16]);
  sub_20F8EF468(a1 + 8744, v127 + 8744, v58, a4[18], v58[19]);
  sub_20F8EF468(a1 + 10184, v127 + 10184, v58, a4[21], v58[22]);
  sub_20F8EE66C(a1 + 11624, v127 + 11624, v58, a4[24], v58[25]);
  sub_20F8EE66C(a1 + 13064, v127 + 13064, v58, v58[27], v58[28]);
  v60 = *a4;
  v61 = a4[1];
  if (*a4 != v61)
  {
    do
    {
      v62 = *v60;
      v63 = v60[1];
      v60 += 2;
      v64 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 64) + 6 * v62);
      v65 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 64) + 6 * v63);
      result = *(__n128 *)(v64 + 32);
      v66 = *(_OWORD *)v64;
      *(_OWORD *)(v65 + 16) = *(_OWORD *)(v64 + 16);
      *(__n128 *)(v65 + 32) = result;
      *(_OWORD *)v65 = v66;
    }
    while (v60 != v61);
  }
  v67 = a4[3];
  for (i = a4[4]; v67 != i; *(_OWORD *)(v72 + 16) = v75)
  {
    v69 = *v67;
    v70 = v67[1];
    v67 += 2;
    v71 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 68) + 9 * v69);
    v72 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 68) + 9 * v70);
    result.n128_u64[0] = *(_QWORD *)(v71 + 64);
    v73 = *(_OWORD *)(v71 + 48);
    v74 = *(_OWORD *)v71;
    v75 = *(_OWORD *)(v71 + 16);
    *(_OWORD *)(v72 + 32) = *(_OWORD *)(v71 + 32);
    *(_OWORD *)(v72 + 48) = v73;
    *(_QWORD *)(v72 + 64) = result.n128_u64[0];
    *(_OWORD *)v72 = v74;
  }
  v76 = a4[6];
  for (j = a4[7]; v76 != j; *(_OWORD *)v81 = v82)
  {
    v78 = *v76;
    v79 = v76[1];
    v76 += 2;
    v80 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 72) + 6 * v78);
    v81 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 72) + 6 * v79);
    result = *(__n128 *)(v80 + 32);
    v82 = *(_OWORD *)v80;
    *(_OWORD *)(v81 + 16) = *(_OWORD *)(v80 + 16);
    *(__n128 *)(v81 + 32) = result;
  }
  v83 = a4[9];
  for (k = a4[10]; v83 != k; *(_OWORD *)v88 = v89)
  {
    v85 = *v83;
    v86 = v83[1];
    v83 += 2;
    v87 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 76) + 6 * v85);
    v88 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 76) + 6 * v86);
    result = *(__n128 *)(v87 + 32);
    v89 = *(_OWORD *)v87;
    *(_OWORD *)(v88 + 16) = *(_OWORD *)(v87 + 16);
    *(__n128 *)(v88 + 32) = result;
  }
  v90 = a4[12];
  for (m = a4[13]; v90 != m; *v95 = result)
  {
    v92 = *v90;
    v93 = v90[1];
    v90 += 2;
    v94 = (__n128 *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 80) + 3 * v92));
    v95 = (__n128 *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 80) + 3 * v93));
    result = *v94;
    v95[1].n128_u64[0] = v94[1].n128_u64[0];
  }
  v96 = a4[15];
  for (n = a4[16];
        v96 != n;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 84) + v99)) = result.n128_u64[0])
  {
    v98 = *v96;
    v99 = v96[1];
    v96 += 2;
    result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 84) + v98));
  }
  v100 = a4[18];
  for (ii = a4[19]; v100 != ii; v105[1] = v106)
  {
    v102 = *v100;
    v103 = v100[1];
    v100 += 2;
    v104 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 88) + 4 * v102);
    v105 = (_OWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 88) + 4 * v103));
    result = *(__n128 *)v104;
    v106 = *(_OWORD *)(v104 + 16);
    *v105 = *(_OWORD *)v104;
  }
  v107 = a4[21];
  for (jj = a4[22]; v107 != jj; v112[1] = v113)
  {
    v109 = *v107;
    v110 = v107[1];
    v107 += 2;
    v111 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 92) + 4 * v109);
    v112 = (_OWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 92) + 4 * v110));
    result = *(__n128 *)v111;
    v113 = *(_OWORD *)(v111 + 16);
    *v112 = *(_OWORD *)v111;
  }
  v114 = a4[24];
  for (kk = a4[25]; v114 != kk; *v119 = result)
  {
    v116 = *v114;
    v117 = v114[1];
    v114 += 2;
    v118 = (__n128 *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 96) + 3 * v116));
    v119 = (__n128 *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 96) + 3 * v117));
    result = *v118;
    v119[1].n128_u64[0] = v118[1].n128_u64[0];
  }
  v120 = a4[27];
  for (mm = a4[28]; v120 != mm; *v125 = result)
  {
    v122 = *v120;
    v123 = v120[1];
    v120 += 2;
    v124 = (__n128 *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 100) + 3 * v122));
    v125 = (__n128 *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 100) + 3 * v123));
    result = *v124;
    v125[1].n128_u64[0] = v124[1].n128_u64[0];
  }
  return result;
}

char **sub_20F8EE574(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_20E867E00(a1, *a2, a2[1], (a2[1] - *a2) >> 2);
    sub_20E867E00(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 2);
    sub_20E867E00(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    sub_20E867E00(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_20E867E00(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    sub_20E867E00(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 2);
    sub_20E867E00(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 2);
    sub_20E867E00(a1 + 21, a2[21], a2[22], (a2[22] - a2[21]) >> 2);
    sub_20E867E00(a1 + 24, a2[24], a2[25], (a2[25] - a2[24]) >> 2);
    sub_20E867E00(a1 + 27, a2[27], a2[28], (a2[28] - a2[27]) >> 2);
  }
  return a1;
}

uint64_t sub_20F8EE66C(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[13];

  if (a4 != a5)
  {
    v57[11] = v5;
    v57[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v51 = a3;
    v52 = a5;
    v49 = (unint64_t *)(result + 16);
    v50 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v18 = (unsigned int *)*a3;
        v17 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v17)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v18 = (unsigned int *)*a3;
          v17 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v17)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v18;
            if (*v18 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v18[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v42 = *(_QWORD *)(result + 80);
                if (v42)
                {
                  v44 = *(_QWORD *)(result + 48);
                  v43 = *(_QWORD *)(result + 56);
                  v45 = ((v43 - v44) << 6) - 1;
                  v46 = *(_QWORD *)(result + 72);
                  if (v43 == v44)
                    v45 = 0;
                  v30 = (__int128 *)(*(_QWORD *)(result + 16)
                                   + 8
                                   * *(_QWORD *)(*(_QWORD *)(v44
                                                           + (((unint64_t)(v46 + v42 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((v46 + v42 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v42 - 1;
                  if ((unint64_t)(v45 - (v42 + v46) + 1) >= 0x400)
                  {
                    v48 = v17;
                    v53 = v24;
                    v55 = v23;
                    operator delete(*(void **)(v43 - 8));
                    v24 = v53;
                    v23 = v55;
                    v17 = v48;
                    v9 = v49;
                    result = v50;
                    a3 = v51;
                    a5 = v52;
                    *(_QWORD *)(v50 + 56) -= 8;
                  }
                }
                else
                {
                  v56 = v23;
                  v57[0] = 0;
                  v54 = v24;
                  v47 = v17;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 0x12uLL, v57);
                  v24 = v54;
                  v23 = v56;
                  v17 = v47;
                  v9 = v49;
                  result = v50;
                  a3 = v51;
                  a5 = v52;
                  v30 = (__int128 *)(*(_QWORD *)(v50 + 24) - 144);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 == v30)
                  goto LABEL_32;
LABEL_18:
                v32 = *v31;
                v33 = v31[1];
                v34 = v31[2];
                v35 = v31[3];
                v36 = v31[4];
                v37 = v31[5];
                v38 = v31[6];
                v39 = v31[8];
                v30[7] = v31[7];
                v30[8] = v39;
                v30[5] = v37;
                v30[6] = v38;
                v30[3] = v35;
                v30[4] = v36;
                v30[1] = v33;
                v30[2] = v34;
                v16 = v25;
                *v30 = v32;
              }
              else
              {
                v30 = (__int128 *)(*v9 + 8 * v29);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
LABEL_32:
                v16 = v25;
              }
            }
            else
            {
LABEL_19:
              if (v25 >= v16)
              {
                v40 = v12 + 1;
                while (v40 != v15)
                {
                  ++v16;
                  v41 = *v40++;
                  v26 = v41;
                  if (v41 != -1)
                  {
                    v12 = v40 - 1;
                    if (v25 != v16)
                      goto LABEL_19;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v18 += 2;
            if (v18 == v17)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v18 = (unsigned int *)*a3;
      v17 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v17)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EE940(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[13];

  if (a4 != a5)
  {
    v62[11] = v5;
    v62[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v56 = a3;
    v57 = a5;
    v54 = (unint64_t *)(result + 16);
    v55 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v18 = (unsigned int *)*a3;
        v17 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v17)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v18 = (unsigned int *)*a3;
          v17 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v17)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v18;
            if (*v18 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v18[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v47 = *(_QWORD *)(result + 80);
                if (v47)
                {
                  v49 = *(_QWORD *)(result + 48);
                  v48 = *(_QWORD *)(result + 56);
                  v50 = ((v48 - v49) << 6) - 1;
                  v51 = *(_QWORD *)(result + 72);
                  if (v48 == v49)
                    v50 = 0;
                  v30 = *(_QWORD *)(result + 16)
                      + 8
                      * *(_QWORD *)(*(_QWORD *)(v49 + (((unint64_t)(v51 + v47 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v51 + v47 - 1) & 0x1FF));
                  *(_QWORD *)(result + 80) = v47 - 1;
                  if ((unint64_t)(v50 - (v47 + v51) + 1) >= 0x400)
                  {
                    v53 = v17;
                    v58 = v24;
                    v60 = v23;
                    operator delete(*(void **)(v48 - 8));
                    v24 = v58;
                    v23 = v60;
                    v17 = v53;
                    v9 = v54;
                    result = v55;
                    a3 = v56;
                    a5 = v57;
                    *(_QWORD *)(v55 + 56) -= 8;
                  }
                }
                else
                {
                  v61 = v23;
                  v62[0] = 0;
                  v59 = v24;
                  v52 = v17;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 0x1BuLL, v62);
                  v24 = v59;
                  v23 = v61;
                  v17 = v52;
                  v9 = v54;
                  result = v55;
                  a3 = v56;
                  a5 = v57;
                  v30 = *(_QWORD *)(v55 + 24) - 216;
                }
                *(_QWORD *)(v24 + 8 * v28) = (v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 == (__int128 *)v30)
                  goto LABEL_32;
LABEL_18:
                v32 = *v31;
                v33 = v31[1];
                v34 = v31[2];
                v35 = v31[3];
                v36 = v31[4];
                v37 = v31[5];
                v38 = v31[6];
                v39 = v31[7];
                v40 = v31[8];
                v41 = v31[9];
                v42 = v31[10];
                v43 = v31[11];
                v44 = v31[12];
                *(_QWORD *)(v30 + 208) = *((_QWORD *)v31 + 26);
                *(_OWORD *)(v30 + 176) = v43;
                *(_OWORD *)(v30 + 192) = v44;
                *(_OWORD *)(v30 + 144) = v41;
                *(_OWORD *)(v30 + 160) = v42;
                *(_OWORD *)(v30 + 112) = v39;
                *(_OWORD *)(v30 + 128) = v40;
                *(_OWORD *)(v30 + 80) = v37;
                *(_OWORD *)(v30 + 96) = v38;
                *(_OWORD *)(v30 + 48) = v35;
                *(_OWORD *)(v30 + 64) = v36;
                *(_OWORD *)(v30 + 16) = v33;
                *(_OWORD *)(v30 + 32) = v34;
                v16 = v25;
                *(_OWORD *)v30 = v32;
              }
              else
              {
                v30 = *v9 + 8 * v29;
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != (__int128 *)v30)
                  goto LABEL_18;
LABEL_32:
                v16 = v25;
              }
            }
            else
            {
LABEL_19:
              if (v25 >= v16)
              {
                v45 = v12 + 1;
                while (v45 != v15)
                {
                  ++v16;
                  v46 = *v45++;
                  v26 = v46;
                  if (v46 != -1)
                  {
                    v12 = v45 - 1;
                    if (v25 != v16)
                      goto LABEL_19;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v18 += 2;
            if (v18 == v17)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v18 = (unsigned int *)*a3;
      v17 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v17)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EEC2C(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[13];

  if (a4 != a5)
  {
    v53[11] = v5;
    v53[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v47 = a3;
    v48 = a5;
    v45 = (unint64_t *)(result + 16);
    v46 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v17 = (unsigned int *)*a3;
        v18 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v18)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v17 = (unsigned int *)*a3;
          v18 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v18)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v17;
            if (*v17 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v17[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v38 = *(_QWORD *)(result + 80);
                if (v38)
                {
                  v40 = *(_QWORD *)(result + 48);
                  v39 = *(_QWORD *)(result + 56);
                  v41 = ((v39 - v40) << 6) - 1;
                  v42 = *(_QWORD *)(result + 72);
                  if (v39 == v40)
                    v41 = 0;
                  v30 = *(_QWORD *)(result + 16)
                      + 8
                      * *(_QWORD *)(*(_QWORD *)(v40 + (((unint64_t)(v42 + v38 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v42 + v38 - 1) & 0x1FF));
                  *(_QWORD *)(result + 80) = v38 - 1;
                  if ((unint64_t)(v41 - (v38 + v42) + 1) >= 0x400)
                  {
                    v44 = v23;
                    v49 = v27;
                    v51 = v24;
                    operator delete(*(void **)(v39 - 8));
                    v27 = v49;
                    v24 = v51;
                    v23 = v44;
                    v9 = v45;
                    result = v46;
                    a3 = v47;
                    a5 = v48;
                    *(_QWORD *)(v46 + 56) -= 8;
                  }
                }
                else
                {
                  v52 = v24;
                  v53[0] = 0;
                  v50 = v27;
                  v43 = v23;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 9uLL, v53);
                  v27 = v50;
                  v24 = v52;
                  v23 = v43;
                  v9 = v45;
                  result = v46;
                  a3 = v47;
                  a5 = v48;
                  v30 = *(_QWORD *)(v46 + 24) - 72;
                }
                *(_QWORD *)(v24 + 8 * v28) = (v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != (__int128 *)v30)
                {
LABEL_18:
                  v32 = *v31;
                  v33 = v31[1];
                  v34 = v31[2];
                  v35 = v31[3];
                  *(_QWORD *)(v30 + 64) = *((_QWORD *)v31 + 8);
                  *(_OWORD *)(v30 + 32) = v34;
                  *(_OWORD *)(v30 + 48) = v35;
                  *(_OWORD *)v30 = v32;
                  *(_OWORD *)(v30 + 16) = v33;
                }
              }
              else
              {
                v30 = *v9 + 8 * v29;
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != (__int128 *)v30)
                  goto LABEL_18;
              }
              v16 = v25;
            }
            else
            {
LABEL_23:
              if (v25 >= v16)
              {
                v36 = v12 + 1;
                while (v36 != v15)
                {
                  ++v16;
                  v37 = *v36++;
                  v26 = v37;
                  if (v37 != -1)
                  {
                    v12 = v36 - 1;
                    if (v25 != v16)
                      goto LABEL_23;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v17 += 2;
            if (v17 == v18)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v17 = (unsigned int *)*a3;
      v18 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v18)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EEEEC(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[13];

  if (a4 != a5)
  {
    v50[11] = v5;
    v50[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v44 = a3;
    v45 = a5;
    v42 = (unint64_t *)(result + 16);
    v43 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v17 = (unsigned int *)*a3;
        v18 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v18)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v17 = (unsigned int *)*a3;
          v18 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v18)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v17;
            if (*v17 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v17[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v35 = *(_QWORD *)(result + 80);
                if (v35)
                {
                  v37 = *(_QWORD *)(result + 48);
                  v36 = *(_QWORD *)(result + 56);
                  v38 = ((v36 - v37) << 6) - 1;
                  v39 = *(_QWORD *)(result + 72);
                  if (v36 == v37)
                    v38 = 0;
                  v30 = *(_QWORD *)(result + 16)
                      + 8
                      * *(_QWORD *)(*(_QWORD *)(v37 + (((unint64_t)(v39 + v35 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v39 + v35 - 1) & 0x1FF));
                  *(_QWORD *)(result + 80) = v35 - 1;
                  if ((unint64_t)(v38 - (v35 + v39) + 1) >= 0x400)
                  {
                    v41 = v23;
                    v46 = v27;
                    v48 = v24;
                    operator delete(*(void **)(v36 - 8));
                    v27 = v46;
                    v24 = v48;
                    v23 = v41;
                    v9 = v42;
                    result = v43;
                    a3 = v44;
                    a5 = v45;
                    *(_QWORD *)(v43 + 56) -= 8;
                  }
                }
                else
                {
                  v49 = v24;
                  v50[0] = 0;
                  v47 = v27;
                  v40 = v23;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 3uLL, v50);
                  v27 = v47;
                  v24 = v49;
                  v23 = v40;
                  v9 = v42;
                  result = v43;
                  a3 = v44;
                  a5 = v45;
                  v30 = *(_QWORD *)(v43 + 24) - 24;
                }
                *(_QWORD *)(v24 + 8 * v28) = (v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != (__int128 *)v30)
                {
LABEL_18:
                  v32 = *v31;
                  *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
                  *(_OWORD *)v30 = v32;
                }
              }
              else
              {
                v30 = *v9 + 8 * v29;
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != (__int128 *)v30)
                  goto LABEL_18;
              }
              v16 = v25;
            }
            else
            {
LABEL_23:
              if (v25 >= v16)
              {
                v33 = v12 + 1;
                while (v33 != v15)
                {
                  ++v16;
                  v34 = *v33++;
                  v26 = v34;
                  if (v34 != -1)
                  {
                    v12 = v33 - 1;
                    if (v25 != v16)
                      goto LABEL_23;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v17 += 2;
            if (v17 == v18)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v17 = (unsigned int *)*a3;
      v18 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v18)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EF1A4(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[13];

  if (a4 != a5)
  {
    v54[11] = v5;
    v54[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v48 = a3;
    v49 = a5;
    v46 = (unint64_t *)(result + 16);
    v47 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v17 = (unsigned int *)*a3;
        v18 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v18)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v17 = (unsigned int *)*a3;
          v18 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v18)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v17;
            if (*v17 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v17[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v39 = *(_QWORD *)(result + 80);
                if (v39)
                {
                  v41 = *(_QWORD *)(result + 48);
                  v40 = *(_QWORD *)(result + 56);
                  v42 = ((v40 - v41) << 6) - 1;
                  v43 = *(_QWORD *)(result + 72);
                  if (v40 == v41)
                    v42 = 0;
                  v30 = (__int128 *)(*(_QWORD *)(result + 16)
                                   + 8
                                   * *(_QWORD *)(*(_QWORD *)(v41
                                                           + (((unint64_t)(v43 + v39 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((v43 + v39 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v39 - 1;
                  if ((unint64_t)(v42 - (v39 + v43) + 1) >= 0x400)
                  {
                    v45 = v23;
                    v50 = v27;
                    v52 = v24;
                    operator delete(*(void **)(v40 - 8));
                    v27 = v50;
                    v24 = v52;
                    v23 = v45;
                    v9 = v46;
                    result = v47;
                    a3 = v48;
                    a5 = v49;
                    *(_QWORD *)(v47 + 56) -= 8;
                  }
                }
                else
                {
                  v53 = v24;
                  v54[0] = 0;
                  v51 = v27;
                  v44 = v23;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 0xCuLL, v54);
                  v27 = v51;
                  v24 = v53;
                  v23 = v44;
                  v9 = v46;
                  result = v47;
                  a3 = v48;
                  a5 = v49;
                  v30 = (__int128 *)(*(_QWORD *)(v47 + 24) - 96);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 == v30)
                  goto LABEL_32;
LABEL_18:
                v32 = *v31;
                v33 = v31[1];
                v34 = v31[2];
                v35 = v31[3];
                v36 = v31[5];
                v30[4] = v31[4];
                v30[5] = v36;
                v30[2] = v34;
                v30[3] = v35;
                v16 = v25;
                *v30 = v32;
                v30[1] = v33;
              }
              else
              {
                v30 = (__int128 *)(*v9 + 8 * v29);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
LABEL_32:
                v16 = v25;
              }
            }
            else
            {
LABEL_19:
              if (v25 >= v16)
              {
                v37 = v12 + 1;
                while (v37 != v15)
                {
                  ++v16;
                  v38 = *v37++;
                  v26 = v38;
                  if (v38 != -1)
                  {
                    v12 = v37 - 1;
                    if (v25 != v16)
                      goto LABEL_19;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v17 += 2;
            if (v17 == v18)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v17 = (unsigned int *)*a3;
      v18 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v18)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EF468(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[13];

  if (a4 != a5)
  {
    v60[11] = v5;
    v60[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v54 = a3;
    v55 = a5;
    v52 = (unint64_t *)(result + 16);
    v53 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v18 = (unsigned int *)*a3;
        v17 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v17)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v18 = (unsigned int *)*a3;
          v17 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v17)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v18;
            if (*v18 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v18[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v45 = *(_QWORD *)(result + 80);
                if (v45)
                {
                  v47 = *(_QWORD *)(result + 48);
                  v46 = *(_QWORD *)(result + 56);
                  v48 = ((v46 - v47) << 6) - 1;
                  v49 = *(_QWORD *)(result + 72);
                  if (v46 == v47)
                    v48 = 0;
                  v30 = (__int128 *)(*(_QWORD *)(result + 16)
                                   + 8
                                   * *(_QWORD *)(*(_QWORD *)(v47
                                                           + (((unint64_t)(v49 + v45 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((v49 + v45 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v45 - 1;
                  if ((unint64_t)(v48 - (v45 + v49) + 1) >= 0x400)
                  {
                    v51 = v17;
                    v56 = v24;
                    v58 = v23;
                    operator delete(*(void **)(v46 - 8));
                    v24 = v56;
                    v23 = v58;
                    v17 = v51;
                    v9 = v52;
                    result = v53;
                    a3 = v54;
                    a5 = v55;
                    *(_QWORD *)(v53 + 56) -= 8;
                  }
                }
                else
                {
                  v59 = v23;
                  v60[0] = 0;
                  v57 = v24;
                  v50 = v17;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 0x18uLL, v60);
                  v24 = v57;
                  v23 = v59;
                  v17 = v50;
                  v9 = v52;
                  result = v53;
                  a3 = v54;
                  a5 = v55;
                  v30 = (__int128 *)(*(_QWORD *)(v53 + 24) - 192);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 == v30)
                  goto LABEL_32;
LABEL_18:
                v32 = *v31;
                v33 = v31[1];
                v34 = v31[2];
                v35 = v31[3];
                v36 = v31[4];
                v37 = v31[5];
                v38 = v31[6];
                v39 = v31[7];
                v40 = v31[8];
                v41 = v31[9];
                v42 = v31[11];
                v30[10] = v31[10];
                v30[11] = v42;
                v30[8] = v40;
                v30[9] = v41;
                v30[6] = v38;
                v30[7] = v39;
                v30[4] = v36;
                v30[5] = v37;
                v30[2] = v34;
                v30[3] = v35;
                v16 = v25;
                *v30 = v32;
                v30[1] = v33;
              }
              else
              {
                v30 = (__int128 *)(*v9 + 8 * v29);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
LABEL_32:
                v16 = v25;
              }
            }
            else
            {
LABEL_19:
              if (v25 >= v16)
              {
                v43 = v12 + 1;
                while (v43 != v15)
                {
                  ++v16;
                  v44 = *v43++;
                  v26 = v44;
                  if (v44 != -1)
                  {
                    v12 = v43 - 1;
                    if (v25 != v16)
                      goto LABEL_19;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v18 += 2;
            if (v18 == v17)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v18 = (unsigned int *)*a3;
      v17 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v17)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EF744(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[13];

  if (a4 != a5)
  {
    v66[11] = v5;
    v66[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v60 = a3;
    v61 = a5;
    v58 = (unint64_t *)(result + 16);
    v59 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v18 = (unsigned int *)*a3;
        v17 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v17)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v18 = (unsigned int *)*a3;
          v17 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v17)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v18;
            if (*v18 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v18[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v51 = *(_QWORD *)(result + 80);
                if (v51)
                {
                  v53 = *(_QWORD *)(result + 48);
                  v52 = *(_QWORD *)(result + 56);
                  v54 = ((v52 - v53) << 6) - 1;
                  v55 = *(_QWORD *)(result + 72);
                  if (v52 == v53)
                    v54 = 0;
                  v30 = (__int128 *)(*(_QWORD *)(result + 16)
                                   + 8
                                   * *(_QWORD *)(*(_QWORD *)(v53
                                                           + (((unint64_t)(v55 + v51 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((v55 + v51 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v51 - 1;
                  if ((unint64_t)(v54 - (v51 + v55) + 1) >= 0x400)
                  {
                    v57 = v17;
                    v62 = v24;
                    v64 = v23;
                    operator delete(*(void **)(v52 - 8));
                    v24 = v62;
                    v23 = v64;
                    v17 = v57;
                    v9 = v58;
                    result = v59;
                    a3 = v60;
                    a5 = v61;
                    *(_QWORD *)(v59 + 56) -= 8;
                  }
                }
                else
                {
                  v65 = v23;
                  v66[0] = 0;
                  v63 = v24;
                  v56 = v17;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 0x24uLL, v66);
                  v24 = v63;
                  v23 = v65;
                  v17 = v56;
                  v9 = v58;
                  result = v59;
                  a3 = v60;
                  a5 = v61;
                  v30 = (__int128 *)(*(_QWORD *)(v59 + 24) - 288);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 == v30)
                  goto LABEL_32;
LABEL_18:
                v32 = *v31;
                v33 = v31[1];
                v34 = v31[2];
                v35 = v31[3];
                v36 = v31[4];
                v37 = v31[5];
                v38 = v31[6];
                v39 = v31[7];
                v40 = v31[8];
                v41 = v31[9];
                v42 = v31[10];
                v43 = v31[11];
                v44 = v31[12];
                v45 = v31[13];
                v46 = v31[14];
                v47 = v31[15];
                v48 = v31[17];
                v30[16] = v31[16];
                v30[17] = v48;
                v30[14] = v46;
                v30[15] = v47;
                v30[12] = v44;
                v30[13] = v45;
                v30[10] = v42;
                v30[11] = v43;
                v30[8] = v40;
                v30[9] = v41;
                v30[6] = v38;
                v30[7] = v39;
                v30[4] = v36;
                v30[5] = v37;
                v30[2] = v34;
                v30[3] = v35;
                v16 = v25;
                *v30 = v32;
                v30[1] = v33;
              }
              else
              {
                v30 = (__int128 *)(*v9 + 8 * v29);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
LABEL_32:
                v16 = v25;
              }
            }
            else
            {
LABEL_19:
              if (v25 >= v16)
              {
                v49 = v12 + 1;
                while (v49 != v15)
                {
                  ++v16;
                  v50 = *v49++;
                  v26 = v50;
                  if (v50 != -1)
                  {
                    v12 = v49 - 1;
                    if (v25 != v16)
                      goto LABEL_19;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v18 += 2;
            if (v18 == v17)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v18 = (unsigned int *)*a3;
      v17 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v17)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EFA38(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[13];

  if (a4 != a5)
  {
    v50[11] = v5;
    v50[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v44 = a3;
    v45 = a5;
    v42 = (unint64_t *)(result + 16);
    v43 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v17 = (unsigned int *)*a3;
        v18 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v18)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v17 = (unsigned int *)*a3;
          v18 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v18)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v17;
            if (*v17 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v17[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v35 = *(_QWORD *)(result + 80);
                if (v35)
                {
                  v37 = *(_QWORD *)(result + 48);
                  v36 = *(_QWORD *)(result + 56);
                  v38 = ((v36 - v37) << 6) - 1;
                  v39 = *(_QWORD *)(result + 72);
                  if (v36 == v37)
                    v38 = 0;
                  v30 = (_OWORD *)(*(_QWORD *)(result + 16)
                                 + 8
                                 * *(_QWORD *)(*(_QWORD *)(v37
                                                         + (((unint64_t)(v39 + v35 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                             + 8 * ((v39 + v35 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v35 - 1;
                  if ((unint64_t)(v38 - (v35 + v39) + 1) >= 0x400)
                  {
                    v41 = v23;
                    v46 = v27;
                    v48 = v24;
                    operator delete(*(void **)(v36 - 8));
                    v27 = v46;
                    v24 = v48;
                    v23 = v41;
                    v9 = v42;
                    result = v43;
                    a3 = v44;
                    a5 = v45;
                    *(_QWORD *)(v43 + 56) -= 8;
                  }
                }
                else
                {
                  v49 = v24;
                  v50[0] = 0;
                  v47 = v27;
                  v40 = v23;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 4uLL, v50);
                  v27 = v47;
                  v24 = v49;
                  v23 = v40;
                  v9 = v42;
                  result = v43;
                  a3 = v44;
                  a5 = v45;
                  v30 = (_OWORD *)(*(_QWORD *)(v43 + 24) - 32);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (_OWORD *)(v27 + 8 * v26);
                if (v31 != v30)
                {
LABEL_18:
                  v32 = v31[1];
                  *v30 = *v31;
                  v30[1] = v32;
                }
              }
              else
              {
                v30 = (_OWORD *)(*v9 + 8 * v29);
                v31 = (_OWORD *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
              }
              v16 = v25;
            }
            else
            {
LABEL_23:
              if (v25 >= v16)
              {
                v33 = v12 + 1;
                while (v33 != v15)
                {
                  ++v16;
                  v34 = *v33++;
                  v26 = v34;
                  if (v34 != -1)
                  {
                    v12 = v33 - 1;
                    if (v25 != v16)
                      goto LABEL_23;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v17 += 2;
            if (v17 == v18)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v17 = (unsigned int *)*a3;
      v18 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v18)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EFCE8(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[13];

  if (a4 != a5)
  {
    v56[11] = v5;
    v56[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v50 = a3;
    v51 = a5;
    v48 = (unint64_t *)(result + 16);
    v49 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v18 = (unsigned int *)*a3;
        v17 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v17)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v18 = (unsigned int *)*a3;
          v17 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v17)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v18;
            if (*v18 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v18[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v41 = *(_QWORD *)(result + 80);
                if (v41)
                {
                  v43 = *(_QWORD *)(result + 48);
                  v42 = *(_QWORD *)(result + 56);
                  v44 = ((v42 - v43) << 6) - 1;
                  v45 = *(_QWORD *)(result + 72);
                  if (v42 == v43)
                    v44 = 0;
                  v30 = (__int128 *)(*(_QWORD *)(result + 16)
                                   + 8
                                   * *(_QWORD *)(*(_QWORD *)(v43
                                                           + (((unint64_t)(v45 + v41 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((v45 + v41 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v41 - 1;
                  if ((unint64_t)(v44 - (v41 + v45) + 1) >= 0x400)
                  {
                    v47 = v17;
                    v52 = v24;
                    v54 = v23;
                    operator delete(*(void **)(v42 - 8));
                    v24 = v52;
                    v23 = v54;
                    v17 = v47;
                    v9 = v48;
                    result = v49;
                    a3 = v50;
                    a5 = v51;
                    *(_QWORD *)(v49 + 56) -= 8;
                  }
                }
                else
                {
                  v55 = v23;
                  v56[0] = 0;
                  v53 = v24;
                  v46 = v17;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 0x10uLL, v56);
                  v24 = v53;
                  v23 = v55;
                  v17 = v46;
                  v9 = v48;
                  result = v49;
                  a3 = v50;
                  a5 = v51;
                  v30 = (__int128 *)(*(_QWORD *)(v49 + 24) - 128);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 == v30)
                  goto LABEL_32;
LABEL_18:
                v33 = *v31;
                v32 = v31[1];
                v35 = v31[2];
                v34 = v31[3];
                v37 = v31[4];
                v36 = v31[5];
                v38 = v31[7];
                v30[6] = v31[6];
                v30[7] = v38;
                v30[4] = v37;
                v30[5] = v36;
                v30[2] = v35;
                v30[3] = v34;
                v16 = v25;
                *v30 = v33;
                v30[1] = v32;
              }
              else
              {
                v30 = (__int128 *)(*v9 + 8 * v29);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
LABEL_32:
                v16 = v25;
              }
            }
            else
            {
LABEL_19:
              if (v25 >= v16)
              {
                v39 = v12 + 1;
                while (v39 != v15)
                {
                  ++v16;
                  v40 = *v39++;
                  v26 = v40;
                  if (v40 != -1)
                  {
                    v12 = v39 - 1;
                    if (v25 != v16)
                      goto LABEL_19;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v18 += 2;
            if (v18 == v17)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v18 = (unsigned int *)*a3;
      v17 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v17)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8EFFB4(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[13];

  if (a4 != a5)
  {
    v51[11] = v5;
    v51[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v45 = a3;
    v46 = a5;
    v43 = (unint64_t *)(result + 16);
    v44 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v17 = (unsigned int *)*a3;
        v18 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v18)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v17 = (unsigned int *)*a3;
          v18 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v18)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v17;
            if (*v17 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v17[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v36 = *(_QWORD *)(result + 80);
                if (v36)
                {
                  v38 = *(_QWORD *)(result + 48);
                  v37 = *(_QWORD *)(result + 56);
                  v39 = ((v37 - v38) << 6) - 1;
                  v40 = *(_QWORD *)(result + 72);
                  if (v37 == v38)
                    v39 = 0;
                  v30 = (__int128 *)(*(_QWORD *)(result + 16)
                                   + 8
                                   * *(_QWORD *)(*(_QWORD *)(v38
                                                           + (((unint64_t)(v40 + v36 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((v40 + v36 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v36 - 1;
                  if ((unint64_t)(v39 - (v36 + v40) + 1) >= 0x400)
                  {
                    v42 = v23;
                    v47 = v27;
                    v49 = v24;
                    operator delete(*(void **)(v37 - 8));
                    v27 = v47;
                    v24 = v49;
                    v23 = v42;
                    v9 = v43;
                    result = v44;
                    a3 = v45;
                    a5 = v46;
                    *(_QWORD *)(v44 + 56) -= 8;
                  }
                }
                else
                {
                  v50 = v24;
                  v51[0] = 0;
                  v48 = v27;
                  v41 = v23;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 6uLL, v51);
                  v27 = v48;
                  v24 = v50;
                  v23 = v41;
                  v9 = v43;
                  result = v44;
                  a3 = v45;
                  a5 = v46;
                  v30 = (__int128 *)(*(_QWORD *)(v44 + 24) - 48);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != v30)
                {
LABEL_18:
                  v32 = *v31;
                  v33 = v31[2];
                  v30[1] = v31[1];
                  v30[2] = v33;
                  *v30 = v32;
                }
              }
              else
              {
                v30 = (__int128 *)(*v9 + 8 * v29);
                v31 = (__int128 *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
              }
              v16 = v25;
            }
            else
            {
LABEL_23:
              if (v25 >= v16)
              {
                v34 = v12 + 1;
                while (v34 != v15)
                {
                  ++v16;
                  v35 = *v34++;
                  v26 = v35;
                  if (v35 != -1)
                  {
                    v12 = v34 - 1;
                    if (v25 != v16)
                      goto LABEL_23;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v17 += 2;
            if (v17 == v18)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v17 = (unsigned int *)*a3;
      v18 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v18)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8F026C(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[13];

  if (a4 != a5)
  {
    v49[11] = v5;
    v49[12] = v6;
    v7 = a4;
    v9 = (unint64_t *)(result + 16);
    v43 = a3;
    v44 = a5;
    v41 = (unint64_t *)(result + 16);
    v42 = result;
    do
    {
      v10 = *(_QWORD *)(a2 + 88);
      v11 = (*(_DWORD *)(a2 + 112) * *v7);
      v12 = (uint64_t *)(v10 + 8 * v11);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = (v11 + v13);
      v15 = (uint64_t *)(v10 + 8 * v14);
      if (!v13 || *v12 != -1)
      {
        v16 = 0;
        v17 = (unsigned int *)*a3;
        v18 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v18)
          goto LABEL_12;
        goto LABEL_3;
      }
      v19 = 8 * v14 - 8 * v11 - 8;
      v20 = 1;
      v21 = v12;
      do
      {
        v16 = v20;
        if (!v19)
        {
          v12 = v15;
          v17 = (unsigned int *)*a3;
          v18 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v18)
            goto LABEL_3;
LABEL_12:
          v23 = v7[1];
          v24 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v23);
          while (2)
          {
            if (v12 == v15)
              goto LABEL_3;
            v25 = *v17;
            if (*v17 == v16)
            {
              v26 = *v12;
LABEL_16:
              v27 = *(_QWORD *)(a2 + 16);
              v28 = v17[1];
              v29 = *(_QWORD *)(v24 + 8 * v28);
              if (v29 == -1)
              {
                v34 = *(_QWORD *)(result + 80);
                if (v34)
                {
                  v36 = *(_QWORD *)(result + 48);
                  v35 = *(_QWORD *)(result + 56);
                  v37 = ((v35 - v36) << 6) - 1;
                  v38 = *(_QWORD *)(result + 72);
                  if (v35 == v36)
                    v37 = 0;
                  v30 = (_QWORD *)(*(_QWORD *)(result + 16)
                                 + 8
                                 * *(_QWORD *)(*(_QWORD *)(v36
                                                         + (((unint64_t)(v38 + v34 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                             + 8 * ((v38 + v34 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v34 - 1;
                  if ((unint64_t)(v37 - (v34 + v38) + 1) >= 0x400)
                  {
                    v40 = v23;
                    v45 = v27;
                    v47 = v24;
                    operator delete(*(void **)(v35 - 8));
                    v27 = v45;
                    v24 = v47;
                    v23 = v40;
                    v9 = v41;
                    result = v42;
                    a3 = v43;
                    a5 = v44;
                    *(_QWORD *)(v42 + 56) -= 8;
                  }
                }
                else
                {
                  v48 = v24;
                  v49[0] = 0;
                  v46 = v27;
                  v39 = v23;
                  sub_20F1C5A3C(v9, *(void **)(result + 24), 1uLL, v49);
                  v27 = v46;
                  v24 = v48;
                  v23 = v39;
                  v9 = v41;
                  result = v42;
                  a3 = v43;
                  a5 = v44;
                  v30 = (_QWORD *)(*(_QWORD *)(v42 + 24) - 8);
                }
                *(_QWORD *)(v24 + 8 * v28) = ((uint64_t)v30 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v23);
                v31 = (_QWORD *)(v27 + 8 * v26);
                if (v31 != v30)
LABEL_18:
                  *v30 = *v31;
              }
              else
              {
                v30 = (_QWORD *)(*v9 + 8 * v29);
                v31 = (_QWORD *)(v27 + 8 * v26);
                if (v31 != v30)
                  goto LABEL_18;
              }
              v16 = v25;
            }
            else
            {
LABEL_23:
              if (v25 >= v16)
              {
                v32 = v12 + 1;
                while (v32 != v15)
                {
                  ++v16;
                  v33 = *v32++;
                  v26 = v33;
                  if (v33 != -1)
                  {
                    v12 = v32 - 1;
                    if (v25 != v16)
                      goto LABEL_23;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v12 == v15)
              goto LABEL_3;
            v17 += 2;
            if (v17 == v18)
              goto LABEL_3;
            continue;
          }
        }
        v12 = v21 + 1;
        v22 = v21[1];
        ++v20;
        v19 -= 8;
        ++v21;
      }
      while (v22 == -1);
      v17 = (unsigned int *)*a3;
      v18 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v18)
        goto LABEL_12;
LABEL_3:
      v7 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_20F8F051C(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[17];

  if (a4 != a5)
  {
    v79[1] = v10;
    v79[2] = v9;
    v79[3] = v8;
    v79[4] = v7;
    v79[15] = v5;
    v79[16] = v6;
    v11 = a4;
    v13 = (unint64_t *)(result + 16);
    v73 = a3;
    v74 = a5;
    v71 = (unint64_t *)(result + 16);
    v72 = result;
    do
    {
      v14 = *(_QWORD *)(a2 + 88);
      v15 = (*(_DWORD *)(a2 + 112) * *v11);
      v16 = (uint64_t *)(v14 + 8 * v15);
      v17 = *(_DWORD *)(a2 + 8);
      v18 = (v15 + v17);
      v19 = (uint64_t *)(v14 + 8 * v18);
      if (!v17 || *v16 != -1)
      {
        v20 = 0;
        v22 = (unsigned int *)*a3;
        v21 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v21)
          goto LABEL_12;
        goto LABEL_3;
      }
      v23 = 8 * v18 - 8 * v15 - 8;
      v24 = 1;
      v25 = v16;
      do
      {
        v20 = v24;
        if (!v23)
        {
          v16 = v19;
          v22 = (unsigned int *)*a3;
          v21 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v21)
            goto LABEL_3;
LABEL_12:
          v27 = v11[1];
          v28 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v27);
          while (2)
          {
            if (v16 == v19)
              goto LABEL_3;
            v29 = *v22;
            if (*v22 == v20)
            {
              v30 = *v16;
LABEL_16:
              v31 = *(_QWORD *)(a2 + 16);
              v32 = v22[1];
              v33 = *(_QWORD *)(v28 + 8 * v32);
              if (v33 == -1)
              {
                v64 = *(_QWORD *)(result + 80);
                if (v64)
                {
                  v66 = *(_QWORD *)(result + 48);
                  v65 = *(_QWORD *)(result + 56);
                  v67 = ((v65 - v66) << 6) - 1;
                  v68 = *(_QWORD *)(result + 72);
                  if (v65 == v66)
                    v67 = 0;
                  v34 = (__int128 *)(*(_QWORD *)(result + 16)
                                   + 8
                                   * *(_QWORD *)(*(_QWORD *)(v66
                                                           + (((unint64_t)(v68 + v64 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((v68 + v64 - 1) & 0x1FF)));
                  *(_QWORD *)(result + 80) = v64 - 1;
                  if ((unint64_t)(v67 - (v64 + v68) + 1) >= 0x400)
                  {
                    v70 = v21;
                    v75 = v28;
                    v77 = v27;
                    operator delete(*(void **)(v65 - 8));
                    v28 = v75;
                    v27 = v77;
                    v21 = v70;
                    v13 = v71;
                    result = v72;
                    a3 = v73;
                    a5 = v74;
                    *(_QWORD *)(v72 + 56) -= 8;
                  }
                }
                else
                {
                  v78 = v27;
                  v79[0] = 0;
                  v76 = v28;
                  v69 = v21;
                  sub_20F1C5A3C(v13, *(void **)(result + 24), 0x36uLL, v79);
                  v28 = v76;
                  v27 = v78;
                  v21 = v69;
                  v13 = v71;
                  result = v72;
                  a3 = v73;
                  a5 = v74;
                  v34 = (__int128 *)(*(_QWORD *)(v72 + 24) - 432);
                }
                *(_QWORD *)(v28 + 8 * v32) = ((uint64_t)v34 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v27);
                v35 = (__int128 *)(v31 + 8 * v30);
                if (v35 == v34)
                  goto LABEL_32;
LABEL_18:
                v36 = *v35;
                v37 = v35[1];
                v38 = v35[2];
                v39 = v35[3];
                v40 = v35[4];
                v41 = v35[5];
                v42 = v35[6];
                v43 = v35[7];
                v44 = v35[8];
                v45 = v35[9];
                v46 = v35[10];
                v47 = v35[11];
                v48 = v35[12];
                v49 = v35[13];
                v50 = v35[14];
                v51 = v35[15];
                v52 = v35[16];
                v53 = v35[17];
                v54 = v35[18];
                v55 = v35[19];
                v56 = v35[20];
                v57 = v35[21];
                v58 = v35[22];
                v59 = v35[23];
                v60 = v35[24];
                v61 = v35[26];
                v34[25] = v35[25];
                v34[26] = v61;
                v34[23] = v59;
                v34[24] = v60;
                v34[21] = v57;
                v34[22] = v58;
                v34[19] = v55;
                v34[20] = v56;
                v34[17] = v53;
                v34[18] = v54;
                v34[15] = v51;
                v34[16] = v52;
                v34[13] = v49;
                v34[14] = v50;
                v34[11] = v47;
                v34[12] = v48;
                v34[9] = v45;
                v34[10] = v46;
                v34[7] = v43;
                v34[8] = v44;
                v34[5] = v41;
                v34[6] = v42;
                v34[3] = v39;
                v34[4] = v40;
                v34[1] = v37;
                v34[2] = v38;
                v20 = v29;
                *v34 = v36;
              }
              else
              {
                v34 = (__int128 *)(*v13 + 8 * v33);
                v35 = (__int128 *)(v31 + 8 * v30);
                if (v35 != v34)
                  goto LABEL_18;
LABEL_32:
                v20 = v29;
              }
            }
            else
            {
LABEL_19:
              if (v29 >= v20)
              {
                v62 = v16 + 1;
                while (v62 != v19)
                {
                  ++v20;
                  v63 = *v62++;
                  v30 = v63;
                  if (v63 != -1)
                  {
                    v16 = v62 - 1;
                    if (v29 != v20)
                      goto LABEL_19;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v16 == v19)
              goto LABEL_3;
            v22 += 2;
            if (v22 == v21)
              goto LABEL_3;
            continue;
          }
        }
        v16 = v25 + 1;
        v26 = v25[1];
        ++v24;
        v23 -= 8;
        ++v25;
      }
      while (v26 == -1);
      v22 = (unsigned int *)*a3;
      v21 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v21)
        goto LABEL_12;
LABEL_3:
      v11 += 2;
    }
    while (v11 != a5);
  }
  return result;
}

uint64_t sub_20F8F0848(uint64_t result, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  unsigned int *v79;
  unint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  _DWORD *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned int *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[22];

  if (a4 != a5)
  {
    v98[2] = v14;
    v98[3] = v13;
    v98[4] = v12;
    v98[5] = v11;
    v98[6] = v10;
    v98[7] = v9;
    v98[8] = v8;
    v98[9] = v7;
    v98[20] = v5;
    v98[21] = v6;
    v15 = a4;
    v17 = (unint64_t *)(result + 16);
    v82 = a3;
    v83 = a5;
    v80 = (unint64_t *)(result + 16);
    v81 = result;
    do
    {
      v18 = *(_QWORD *)(a2 + 88);
      v19 = (*(_DWORD *)(a2 + 112) * *v15);
      v20 = (uint64_t *)(v18 + 8 * v19);
      v21 = *(_DWORD *)(a2 + 8);
      v22 = (v19 + v21);
      v23 = (uint64_t *)(v18 + 8 * v22);
      if (!v21 || *v20 != -1)
      {
        v24 = 0;
        v26 = (unsigned int *)*a3;
        v25 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v25)
          goto LABEL_12;
        goto LABEL_3;
      }
      v27 = 8 * v22 - 8 * v19 - 8;
      v28 = 1;
      v29 = v20;
      do
      {
        v24 = v28;
        if (!v27)
        {
          v20 = v23;
          v26 = (unsigned int *)*a3;
          v25 = (unsigned int *)a3[1];
          if ((unsigned int *)*a3 == v25)
            goto LABEL_3;
LABEL_12:
          v31 = v15[1];
          v32 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v31);
          while (2)
          {
            if (v20 == v23)
              goto LABEL_3;
            v33 = *v26;
            if (*v26 == v24)
            {
              v34 = *v20;
LABEL_16:
              v35 = *(_QWORD *)(a2 + 16);
              v36 = v26[1];
              v37 = *(_QWORD *)(v32 + 8 * v36);
              if (v37 == -1)
              {
                v73 = *(_QWORD *)(result + 80);
                if (v73)
                {
                  v75 = *(_QWORD *)(result + 48);
                  v74 = *(_QWORD *)(result + 56);
                  v76 = ((v74 - v75) << 6) - 1;
                  v77 = *(_QWORD *)(result + 72);
                  if (v74 == v75)
                    v76 = 0;
                  v38 = *(_QWORD *)(result + 16)
                      + 8
                      * *(_QWORD *)(*(_QWORD *)(v75 + (((unint64_t)(v77 + v73 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v77 + v73 - 1) & 0x1FF));
                  *(_QWORD *)(result + 80) = v73 - 1;
                  if ((unint64_t)(v76 - (v73 + v77) + 1) >= 0x400)
                  {
                    v91 = v25;
                    v96 = v31;
                    v93 = v32;
                    operator delete(*(void **)(v74 - 8));
                    v32 = v93;
                    v31 = v96;
                    v25 = v91;
                    v17 = v80;
                    result = v81;
                    a3 = v82;
                    a5 = v83;
                    *(_QWORD *)(v81 + 56) -= 8;
                  }
                }
                else
                {
                  v97 = v31;
                  v78 = *(void **)(result + 24);
                  v98[0] = 0;
                  v94 = v32;
                  v79 = v25;
                  sub_20F1C5A3C(v17, v78, 0x51uLL, v98);
                  v32 = v94;
                  v31 = v97;
                  v25 = v79;
                  v17 = v80;
                  result = v81;
                  a3 = v82;
                  a5 = v83;
                  v38 = *(_QWORD *)(v81 + 24) - 648;
                }
                *(_QWORD *)(v32 + 8 * v36) = (v38 - *(_QWORD *)(result + 16)) >> 3;
                ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v31);
                v39 = (__int128 *)(v35 + 8 * v34);
                if (v39 != (__int128 *)v38)
                {
LABEL_18:
                  v92 = v39[1];
                  v95 = *v39;
                  v89 = v39[3];
                  v90 = v39[2];
                  v87 = v39[5];
                  v88 = v39[4];
                  v85 = v39[7];
                  v86 = v39[6];
                  v40 = v39[9];
                  v84 = v39[8];
                  v41 = v39[10];
                  v42 = v39[11];
                  v43 = v39[12];
                  v44 = v39[13];
                  v45 = v39[14];
                  v46 = v39[15];
                  v47 = v39[16];
                  v48 = v39[17];
                  v49 = v39[18];
                  v50 = v39[19];
                  v51 = v39[20];
                  v52 = v39[21];
                  v53 = v39[22];
                  v54 = v39[23];
                  v55 = v39[24];
                  v56 = v39[25];
                  v57 = v39[26];
                  v58 = v39[27];
                  v59 = v39[28];
                  v60 = v39[29];
                  v61 = v39[30];
                  v62 = v39[31];
                  v64 = v39[32];
                  v63 = v39[33];
                  v66 = v39[34];
                  v65 = v39[35];
                  v68 = v39[36];
                  v67 = v39[37];
                  v70 = v39[38];
                  v69 = v39[39];
                  *(_QWORD *)(v38 + 640) = *((_QWORD *)v39 + 80);
                  *(_OWORD *)(v38 + 608) = v70;
                  *(_OWORD *)(v38 + 624) = v69;
                  *(_OWORD *)(v38 + 576) = v68;
                  *(_OWORD *)(v38 + 592) = v67;
                  *(_OWORD *)(v38 + 544) = v66;
                  *(_OWORD *)(v38 + 560) = v65;
                  *(_OWORD *)(v38 + 512) = v64;
                  *(_OWORD *)(v38 + 528) = v63;
                  *(_OWORD *)(v38 + 480) = v61;
                  *(_OWORD *)(v38 + 496) = v62;
                  *(_OWORD *)(v38 + 448) = v59;
                  *(_OWORD *)(v38 + 464) = v60;
                  *(_OWORD *)(v38 + 416) = v57;
                  *(_OWORD *)(v38 + 432) = v58;
                  *(_OWORD *)(v38 + 384) = v55;
                  *(_OWORD *)(v38 + 400) = v56;
                  *(_OWORD *)(v38 + 352) = v53;
                  *(_OWORD *)(v38 + 368) = v54;
                  *(_OWORD *)(v38 + 320) = v51;
                  *(_OWORD *)(v38 + 336) = v52;
                  *(_OWORD *)(v38 + 288) = v49;
                  *(_OWORD *)(v38 + 304) = v50;
                  *(_OWORD *)(v38 + 256) = v47;
                  *(_OWORD *)(v38 + 272) = v48;
                  *(_OWORD *)(v38 + 224) = v45;
                  *(_OWORD *)(v38 + 240) = v46;
                  *(_OWORD *)(v38 + 192) = v43;
                  *(_OWORD *)(v38 + 208) = v44;
                  *(_OWORD *)(v38 + 160) = v41;
                  *(_OWORD *)(v38 + 176) = v42;
                  *(_OWORD *)(v38 + 128) = v84;
                  *(_OWORD *)(v38 + 144) = v40;
                  *(_OWORD *)(v38 + 112) = v85;
                  *(_OWORD *)(v38 + 96) = v86;
                  *(_OWORD *)(v38 + 80) = v87;
                  *(_OWORD *)(v38 + 64) = v88;
                  *(_OWORD *)(v38 + 48) = v89;
                  *(_OWORD *)(v38 + 32) = v90;
                  *(_OWORD *)(v38 + 16) = v92;
                  *(_OWORD *)v38 = v95;
                }
              }
              else
              {
                v38 = *v17 + 8 * v37;
                v39 = (__int128 *)(v35 + 8 * v34);
                if (v39 != (__int128 *)v38)
                  goto LABEL_18;
              }
              v24 = v33;
            }
            else
            {
LABEL_23:
              if (v33 >= v24)
              {
                v71 = v20 + 1;
                while (v71 != v23)
                {
                  ++v24;
                  v72 = *v71++;
                  v34 = v72;
                  if (v72 != -1)
                  {
                    v20 = v71 - 1;
                    if (v33 != v24)
                      goto LABEL_23;
                    goto LABEL_16;
                  }
                }
                goto LABEL_3;
              }
            }
            if (v20 == v23)
              goto LABEL_3;
            v26 += 2;
            if (v26 == v25)
              goto LABEL_3;
            continue;
          }
        }
        v20 = v29 + 1;
        v30 = v29[1];
        ++v28;
        v27 -= 8;
        ++v29;
      }
      while (v30 == -1);
      v26 = (unsigned int *)*a3;
      v25 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v25)
        goto LABEL_12;
LABEL_3:
      v15 += 2;
    }
    while (v15 != a5);
  }
  return result;
}

uint64_t sub_20F8F0C10(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  int v8;
  int v9;
  int32x4_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int32x4_t v55;
  int32x4_t v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  __int128 v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  uint64_t v97;
  int64x2_t *v98;
  int64x2_t *v99;
  int64x2_t *v100;
  int64x2_t *v101;
  int64x2_t *v102;
  __int8 *v103;
  int64x2_t *v104;
  int64x2_t *v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v117;
  int v118;
  unsigned int v119;
  unint64_t v120;
  int32x4_t v121;
  int32x4_t v122;
  unsigned int v123;
  unint64_t v124;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v133;
  int v134;
  int v135;
  unsigned int v136;
  int32x4_t v137;
  int32x4_t v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  int64x2_t v146;
  int64x2_t v147;
  uint64_t v148;
  int64x2_t v149;

  v3 = result;
  v5 = *(_DWORD *)a2;
  v4 = *(unsigned int *)(a2 + 4);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v5;
  v6 = v5 * (unint64_t)v4;
  if (*(_QWORD *)(result + 8) < v6)
  {
    if (*(_QWORD *)result)
      MEMORY[0x212BC6368]();
    v7 = (8 * v6 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = v7 >> 3;
    result = (uint64_t)operator new(v7, (std::align_val_t)0x20uLL);
    *(_QWORD *)v3 = result;
  }
  if (v5)
  {
    v8 = 0;
    v9 = v4 & 7;
    v145 = 2 * v9;
    v144 = -2 * v9;
    v10.i64[0] = -1;
    v10.i64[1] = -1;
    v11 = v5;
    v141 = v5;
    while (1)
    {
      v143 = v11;
      v12 = v11 <= 1 ? 1 : v11;
      v142 = v8 + 8;
      if (v8 + 8 <= v5 || v5 - v8 == 8)
        break;
      if ((_DWORD)v4)
      {
        v13 = 0;
        v14 = *(_DWORD *)(v3 + 16);
        v15 = *(_QWORD *)v3;
        v16 = *(unsigned int *)(a2 + 16);
        v148 = *(_QWORD *)(a2 + 8) - 8 * v16;
        while (1)
        {
          v17 = v13 + 8;
          v18 = v13 + 8 <= v4 ? 8 : v4 - v13;
          if (v18)
            break;
LABEL_15:
          v13 += 8;
          if (v17 >= v4)
            goto LABEL_7;
        }
        v19 = 0;
        v20 = 0;
        if (v18 >= 0)
          v21 = v18;
        else
          v21 = -v18;
        v22 = 2 * v18;
        result = (-2 * v18);
        while (1)
        {
          v26 = HIDWORD(v20);
          if (v21 >> 4 >= 0x271)
          {
            v29 = v18 + v20 + v18 * HIDWORD(v20);
            v30 = (v29 / v18);
            v31 = (v29 % v18);
            v32 = v31 | (v30 << 32);
            v33 = (v31 + v18) | ((unint64_t)(v30 - 1) << 32);
            if ((int)v31 < 0)
              v28 = v33;
            else
              v28 = v32;
            goto LABEL_48;
          }
          v27 = (v18 + v20);
          if (v18 + (int)v20 >= 0)
          {
            v28 = v20 & 0xFFFFFFFF00000000 | v27;
            if ((int)v27 >= v18)
              goto LABEL_45;
            goto LABEL_48;
          }
          v34 = result + ((v22 + v20) & ~((v22 + (int)v20) >> 31));
          v35 = v34 == (_DWORD)v20 ? 1 : 2;
          v36 = v35 + (v34 - (v34 != (_DWORD)v20) - v20) / v18;
          if (v36 < 8)
            break;
          LODWORD(v27) = v27 + (v36 & 0xFFFFFFF8) * v18;
          v38 = 0uLL;
          v39 = (int32x4_t)HIDWORD(v20);
          v40 = v36 & 0xFFFFFFF8;
          do
          {
            v39 = vaddq_s32(v39, v10);
            v38 = vaddq_s32(v38, v10);
            v40 -= 8;
          }
          while (v40);
          v37 = vaddvq_s32(vaddq_s32(v38, v39));
          if (v36 != (v36 & 0xFFFFFFF8))
            goto LABEL_43;
LABEL_44:
          v28 = v27 | (v37 << 32);
          if ((int)v27 >= v18)
          {
LABEL_45:
            v41 = HIDWORD(v28);
            do
            {
              v27 = (v27 - v18);
              v41 = (v41 + 1);
            }
            while ((int)v27 >= v18);
            v28 = v27 | (v41 << 32);
          }
LABEL_48:
          if ((_DWORD)v20 != (_DWORD)v28 || HIDWORD(v20) != HIDWORD(v28))
          {
            v43 = (_QWORD *)(v15 + 8 * (v13 + (v8 + v19) * v14));
            LODWORD(v44) = v20;
            v45 = v20;
            do
            {
              *v43++ = *(_QWORD *)(v148
                                 + 8 * (v16 + v8 + 196 * v13)
                                 + 8 * (HIDWORD(v45) + 196 * v45));
              v46 = (v44 + 1);
              v47 = v45 & 0xFFFFFFFF00000000;
              v48 = v47 | v46;
              v49 = v47 + 0x100000000;
              if (v18 <= (int)v46)
                v44 = v49;
              else
                v44 = v48;
              v50 = (_DWORD)v44 == (_DWORD)v28 && HIDWORD(v44) == HIDWORD(v28);
              v45 = v44;
            }
            while (!v50);
          }
          if (v21 >> 4 >= 0x271)
          {
            v23 = v18 + v20 + v18 * HIDWORD(v20);
            v24 = (v23 / v18);
            v25 = (v23 % v18);
            if ((v25 & 0x80000000) != 0)
            {
              v25 = (v25 + v18);
              v24 = (v24 - 1);
            }
            v20 = v25 | (v24 << 32);
            goto LABEL_27;
          }
          v51 = (v18 + v20);
          if (v18 + (int)v20 < 0)
          {
            v52 = result + ((v22 + v20) & ~((v22 + (int)v20) >> 31));
            if (v52 == (_DWORD)v20)
              v53 = 1;
            else
              v53 = 2;
            v54 = v53 + (v52 - (v52 != (_DWORD)v20) - v20) / v18;
            if (v54 < 8)
              goto LABEL_133;
            LODWORD(v51) = v51 + (v54 & 0xFFFFFFF8) * v18;
            v55 = 0uLL;
            v56 = (int32x4_t)HIDWORD(v20);
            v57 = v54 & 0xFFFFFFF8;
            do
            {
              v56 = vaddq_s32(v56, v10);
              v55 = vaddq_s32(v55, v10);
              v57 -= 8;
            }
            while (v57);
            v26 = vaddvq_s32(vaddq_s32(v55, v56));
            if (v54 != (v54 & 0xFFFFFFF8))
            {
LABEL_133:
              do
              {
                LODWORD(v51) = v51 + v18;
                v26 = (v26 - 1);
              }
              while ((v51 & 0x80000000) != 0);
            }
            v20 = v51 | (v26 << 32);
            if ((int)v51 < v18)
              goto LABEL_27;
LABEL_74:
            v58 = HIDWORD(v20);
            do
            {
              v51 = (v51 - v18);
              v58 = (v58 + 1);
            }
            while ((int)v51 >= v18);
            v20 = v51 | (v58 << 32);
            goto LABEL_27;
          }
          v20 = v20 & 0xFFFFFFFF00000000 | v51;
          if ((int)v51 >= v18)
            goto LABEL_74;
LABEL_27:
          if (++v19 == v12)
            goto LABEL_15;
        }
        v37 = HIDWORD(v20);
        do
        {
LABEL_43:
          LODWORD(v27) = v27 + v18;
          v37 = (v37 - 1);
        }
        while ((v27 & 0x80000000) != 0);
        goto LABEL_44;
      }
LABEL_7:
      v11 = v143 - 8;
      v8 += 8;
      v5 = v141;
      if (v142 >= v141)
        return result;
    }
    result = 24;
    if (v4 >= 8)
    {
      v59 = 8;
      v60 = v8;
      do
      {
        v61 = *(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(a2 + 16) + 8 * (v60 + *(_DWORD *)(a2 + 16));
        v147 = *(int64x2_t *)(v61 + 48);
        v63 = *(int64x2_t *)(v61 + 16);
        v62 = *(int64x2_t *)(v61 + 32);
        v64 = *(int64x2_t *)(v61 + 1600);
        v65 = *(int64x2_t *)(v61 + 1584);
        v66 = *(int64x2_t *)(v61 + 1568);
        v67 = *(int64x2_t *)(v61 + 3184);
        v68 = *(int64x2_t *)(v61 + 3168);
        v69 = *(int64x2_t *)(v61 + 3152);
        v70 = *(int64x2_t *)(v61 + 3136);
        v71 = *(int64x2_t *)(v61 + 6320);
        v72 = *(int64x2_t *)(v61 + 6304);
        v73 = *(int64x2_t *)(v61 + 6288);
        v74 = *(int64x2_t *)(v61 + 6272);
        v75 = *(int64x2_t *)(v61 + 9456);
        v76 = *(int64x2_t *)(v61 + 9440);
        v77 = *(int64x2_t *)(v61 + 9424);
        v78 = *(int64x2_t *)(v61 + 9408);
        v149 = vzip1q_s64(*(int64x2_t *)v61, v66);
        v146 = vzip2q_s64(*(int64x2_t *)v61, v66);
        v79 = vzip1q_s64(v70, *(int64x2_t *)(v61 + 4704));
        v70.i64[0] = vdupq_laneq_s64(v70, 1).u64[0];
        v70.i64[1] = *(_QWORD *)(v61 + 4712);
        v80 = vzip1q_s64(v74, *(int64x2_t *)(v61 + 7840));
        v74.i64[0] = vdupq_laneq_s64(v74, 1).u64[0];
        v74.i64[1] = *(_QWORD *)(v61 + 7848);
        v81.i64[0] = vdupq_laneq_s64(v78, 1).u64[0];
        v82 = vzip1q_s64(v78, *(int64x2_t *)(v61 + 10976));
        v81.i64[1] = *(_QWORD *)(v61 + 10984);
        v83 = vzip1q_s64(v63, v65);
        v84 = vzip2q_s64(v63, v65);
        v85 = vzip1q_s64(v69, *(int64x2_t *)(v61 + 4720));
        v69.i64[0] = vdupq_laneq_s64(v69, 1).u64[0];
        v69.i64[1] = *(_QWORD *)(v61 + 4728);
        v86.i64[0] = vdupq_laneq_s64(v73, 1).u64[0];
        v87 = vzip1q_s64(v73, *(int64x2_t *)(v61 + 7856));
        v86.i64[1] = *(_QWORD *)(v61 + 7864);
        v88 = vzip1q_s64(v77, *(int64x2_t *)(v61 + 10992));
        v77.i64[0] = vdupq_laneq_s64(v77, 1).u64[0];
        v77.i64[1] = *(_QWORD *)(v61 + 11000);
        *(_QWORD *)&v89 = vdupq_laneq_s64(v68, 1).u64[0];
        *((_QWORD *)&v89 + 1) = *(_QWORD *)(v61 + 4744);
        v90 = vzip1q_s64(v68, *(int64x2_t *)(v61 + 4736));
        v91 = vzip1q_s64(v72, *(int64x2_t *)(v61 + 7872));
        v72.i64[0] = vdupq_laneq_s64(v72, 1).u64[0];
        v72.i64[1] = *(_QWORD *)(v61 + 7880);
        v92 = vzip1q_s64(v76, *(int64x2_t *)(v61 + 11008));
        v76.i64[0] = vdupq_laneq_s64(v76, 1).u64[0];
        v76.i64[1] = *(_QWORD *)(v61 + 11016);
        v93 = vzip1q_s64(v67, *(int64x2_t *)(v61 + 4752));
        v67.i64[0] = vdupq_laneq_s64(v67, 1).u64[0];
        v67.i64[1] = *(_QWORD *)(v61 + 4760);
        v94 = vzip1q_s64(v71, *(int64x2_t *)(v61 + 7888));
        v71.i64[0] = vdupq_laneq_s64(v71, 1).u64[0];
        v71.i64[1] = *(_QWORD *)(v61 + 7896);
        v95 = vzip1q_s64(v75, *(int64x2_t *)(v61 + 11024));
        v75.i64[0] = vdupq_laneq_s64(v75, 1).u64[0];
        v75.i64[1] = *(_QWORD *)(v61 + 11032);
        v96 = *(int64x2_t *)(v61 + 1616);
        v97 = *(unsigned int *)(v3 + 16);
        v98 = (int64x2_t *)(*(_QWORD *)v3 + 8 * (v59 + v8 * (_DWORD)v97 - 8));
        v98[2] = v80;
        v98[3] = v82;
        *v98 = v149;
        v98[1] = v79;
        v99 = (int64x2_t *)((char *)v98 + 8 * v97);
        *v99 = v146;
        v99[1] = v70;
        v99[2] = v74;
        v99[3] = v81;
        v100 = &v98[v97];
        *v100 = v83;
        v100[1] = v85;
        v100[2] = v87;
        v100[3] = v88;
        v101 = (int64x2_t *)((char *)v98 + 24 * v97);
        *v101 = v84;
        v101[1] = v69;
        v101[2] = v86;
        v101[3] = v77;
        v102 = &v98[2 * v97];
        *v102 = vzip1q_s64(v62, v64);
        v102[1] = v90;
        v102[2] = v91;
        v102[3] = v92;
        v103 = &v98->i8[40 * v97];
        *(int64x2_t *)v103 = vzip2q_s64(v62, v64);
        *((_OWORD *)v103 + 1) = v89;
        *((int64x2_t *)v103 + 2) = v72;
        *((int64x2_t *)v103 + 3) = v76;
        v104 = &v98[3 * v97];
        *v104 = vzip1q_s64(v147, v96);
        v104[1] = v93;
        v104[2] = v94;
        v104[3] = v95;
        v105 = (int64x2_t *)((char *)v98 + 56 * v97);
        v105[2] = v71;
        v105[3] = v75;
        *v105 = vzip2q_s64(v147, v96);
        v105[1] = v67;
        v59 += 8;
        v60 += 1568;
      }
      while (v59 <= v4);
    }
    if ((v4 & 7) == 0)
      goto LABEL_7;
    v106 = 0;
    v107 = 0;
    v108 = *(_DWORD *)(v3 + 16);
    result = *(_QWORD *)v3;
    v109 = *(_QWORD *)(a2 + 8)
         - 8 * *(unsigned int *)(a2 + 16)
         + 8 * (v8 + 196 * (v4 & 0xFFFFFFF8) + *(_DWORD *)(a2 + 16));
    while (1)
    {
      v110 = HIDWORD(v107);
      v111 = (v9 + v107);
      v112 = v107 & 0xFFFFFFFF00000000 | v111;
      v113 = v112;
      LODWORD(v114) = v9 + v107;
      if (v9 + (int)v107 >= 0)
      {
        if ((int)v114 < v9)
          goto LABEL_85;
        goto LABEL_101;
      }
      v117 = v144 + ((v145 + v107) & ~((v145 + (int)v107) >> 31));
      v118 = v117 == (_DWORD)v107 ? 1 : 2;
      v119 = v118 + (v117 - (v117 != (_DWORD)v107) - v107) / v9;
      if (v119 < 8)
        break;
      LODWORD(v114) = v111 + (v119 & 0xFFFFFFF8) * v9;
      v121 = 0uLL;
      v122 = (int32x4_t)HIDWORD(v107);
      v123 = v119 & 0xFFFFFFF8;
      do
      {
        v122 = vaddq_s32(v122, v10);
        v121 = vaddq_s32(v121, v10);
        v123 -= 8;
      }
      while (v123);
      v120 = vaddvq_s32(vaddq_s32(v121, v122));
      if (v119 != (v119 & 0xFFFFFFF8))
        goto LABEL_99;
LABEL_100:
      v113 = v114 | (v120 << 32);
      if ((int)v114 < v9)
      {
LABEL_85:
        v115 = HIDWORD(v113);
        if ((_DWORD)v107 == (_DWORD)v113 && HIDWORD(v107) == HIDWORD(v113))
          goto LABEL_116;
        goto LABEL_107;
      }
LABEL_101:
      v124 = HIDWORD(v113);
      do
      {
        v114 = (v114 - v9);
        v124 = (v124 + 1);
      }
      while ((int)v114 >= v9);
      v113 = v114 | (v124 << 32);
      v115 = HIDWORD(v113);
      if ((_DWORD)v107 == (_DWORD)v113 && HIDWORD(v107) == HIDWORD(v113))
        goto LABEL_116;
LABEL_107:
      v126 = (_QWORD *)(result + 8 * ((v4 & 0xFFFFFFF8) + (v8 + (_DWORD)v106) * v108));
      LODWORD(v127) = v107;
      v128 = v107;
      do
      {
        *v126++ = *(_QWORD *)(v109 + 8 * (HIDWORD(v128) + 196 * v128));
        v129 = (v127 + 1);
        v130 = v128 & 0xFFFFFFFF00000000;
        v131 = v130 | v129;
        v132 = v130 + 0x100000000;
        if (v9 <= (int)v129)
          v127 = v132;
        else
          v127 = v131;
        v133 = (_DWORD)v127 == (_DWORD)v113 && HIDWORD(v127) == (_DWORD)v115;
        v128 = v127;
      }
      while (!v133);
LABEL_116:
      if ((v111 & 0x80000000) != 0)
      {
        v134 = v144 + ((v145 + v107) & ~((v145 + (int)v107) >> 31));
        if (v134 == (_DWORD)v107)
          v135 = 1;
        else
          v135 = 2;
        v136 = v135 + (v134 - (v134 != (_DWORD)v107) - v107) / v9;
        if (v136 < 8)
          goto LABEL_134;
        LODWORD(v111) = v111 + (v136 & 0xFFFFFFF8) * v9;
        v137 = 0uLL;
        v138 = (int32x4_t)HIDWORD(v107);
        v139 = v136 & 0xFFFFFFF8;
        do
        {
          v138 = vaddq_s32(v138, v10);
          v137 = vaddq_s32(v137, v10);
          v139 -= 8;
        }
        while (v139);
        v110 = vaddvq_s32(vaddq_s32(v137, v138));
        if (v136 != (v136 & 0xFFFFFFF8))
        {
LABEL_134:
          do
          {
            LODWORD(v111) = v111 + v9;
            v110 = (v110 - 1);
          }
          while ((v111 & 0x80000000) != 0);
        }
        v112 = v111 | (v110 << 32);
        if ((int)v111 < v9)
          goto LABEL_82;
LABEL_128:
        v140 = HIDWORD(v112);
        do
        {
          v111 = (v111 - v9);
          v140 = (v140 + 1);
        }
        while ((int)v111 >= v9);
        v112 = v111 | (v140 << 32);
        goto LABEL_82;
      }
      if ((int)v111 >= v9)
        goto LABEL_128;
LABEL_82:
      ++v106;
      v107 = v112;
      if (v106 == 8)
        goto LABEL_7;
    }
    v120 = HIDWORD(v107);
    LODWORD(v114) = v9 + v107;
    do
    {
LABEL_99:
      LODWORD(v114) = v114 + v9;
      v120 = (v120 - 1);
    }
    while ((v114 & 0x80000000) != 0);
    goto LABEL_100;
  }
  return result;
}

void sub_20F8F1460(std::string *retstr, unsigned int __val)
{
  const char *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  size_t v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (__val - 1000 > 0x26)
  {
    std::to_string(retstr, __val);
    return;
  }
  if (__val - 1001 > 0x25)
    v3 = "kNotStarted";
  else
    v3 = off_24CA04DA0[__val - 1001];
  std::to_string(&v11, __val);
  v4 = std::string::insert(&v11, 0, " (", 2uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v12, ")", 1uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = strlen(v3);
  v9 = std::string::insert(&v13, 0, v3, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  retstr->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_12:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
}

void sub_20F8F15B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
  {
    operator delete(*(void **)(v21 - 48));
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20F8F162C(std::string *retstr, unsigned int __val)
{
  const char *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  size_t v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (__val > 3)
  {
    std::to_string(retstr, __val);
    return;
  }
  if (__val - 1 > 2)
    v3 = "None";
  else
    v3 = off_24CA04ED0[__val - 1];
  std::to_string(&v11, __val);
  v4 = std::string::insert(&v11, 0, " (", 2uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v12, ")", 1uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = strlen(v3);
  v9 = std::string::insert(&v13, 0, v3, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  retstr->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_12:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
}

void sub_20F8F1780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
  {
    operator delete(*(void **)(v21 - 48));
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20F8F17F4(std::string *retstr, unsigned int __val)
{
  const char *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  size_t v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (__val > 5)
  {
    std::to_string(retstr, __val);
    return;
  }
  if (__val - 1 > 4)
    v3 = "kSuccess";
  else
    v3 = off_24CA04EE8[__val - 1];
  std::to_string(&v11, __val);
  v4 = std::string::insert(&v11, 0, " (", 2uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v12, ")", 1uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = strlen(v3);
  v9 = std::string::insert(&v13, 0, v3, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  retstr->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_12:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
}

void sub_20F8F1948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
  {
    operator delete(*(void **)(v21 - 48));
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F8F19BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned int v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  unsigned int v86;
  int *v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  unsigned int *v112;
  _DWORD *v113;
  unsigned int *v114;
  uint64_t v115;
  unsigned int v116;
  __int128 *v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  unsigned int v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _OWORD *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v200;
  unsigned int v201;
  int *v202;
  uint64_t v203;
  int v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;

  v4 = a1 + 42744;
  v5 = (int *)(a2 + 42744);
  sub_20F904994(a1 + 64, (__int128 *)(a2 + 64));
  memcpy((void *)(a1 + 31040), (const void *)(a2 + 31040), 0x104uLL);
  if (a1 != a2)
  {
    v6 = (unsigned int *)(a1 + 31624);
    v7 = *(_DWORD *)(a2 + 31624);
    *(_DWORD *)(a1 + 31624) = 0;
    if (v7)
    {
      v8 = 0;
      v9 = (uint64_t *)(a2 + 31304);
      v10 = a2 + 31304 + 80 * v7;
      do
      {
        v11 = a1 + 31304 + 80 * v8;
        v12 = *v9;
        *(_DWORD *)(v11 + 8) = *((_DWORD *)v9 + 2);
        *(_QWORD *)v11 = v12;
        v13 = *((_OWORD *)v9 + 2);
        *(_OWORD *)(v11 + 16) = *((_OWORD *)v9 + 1);
        *(_OWORD *)(v11 + 32) = v13;
        v14 = *((_OWORD *)v9 + 4);
        *(_OWORD *)(v11 + 48) = *((_OWORD *)v9 + 3);
        *(_OWORD *)(v11 + 64) = v14;
        v8 = *v6 + 1;
        *v6 = v8;
        v9 += 10;
      }
      while (v9 != (uint64_t *)v10);
    }
    v15 = *(_DWORD *)(a2 + 31688);
    *(_DWORD *)(a1 + 31688) = 0;
    if (v15)
    {
      v16 = 0;
      v17 = a2 + 31632;
      v18 = a2 + 31632 + 56 * v15;
      do
      {
        v19 = a1 + 31632 + 56 * v16;
        *(_QWORD *)v19 = *(_QWORD *)v17;
        v20 = *(_OWORD *)(v17 + 8);
        *(_QWORD *)(v19 + 24) = *(_QWORD *)(v17 + 24);
        *(_OWORD *)(v19 + 8) = v20;
        v21 = *(_QWORD *)(v17 + 48);
        *(_OWORD *)(v19 + 32) = *(_OWORD *)(v17 + 32);
        *(_QWORD *)(v19 + 48) = v21;
        v16 = *(_DWORD *)(a1 + 31688) + 1;
        *(_DWORD *)(a1 + 31688) = v16;
        v17 += 56;
      }
      while (v17 != v18);
    }
    v22 = *(_DWORD *)(a2 + 31720);
    *(_DWORD *)(a1 + 31720) = 0;
    if (v22)
    {
      v23 = a2 + 31696;
      v24 = a2 + 31696 + 24 * v22;
      v25 = (_QWORD *)(a1 + 31712);
      v26 = 1;
      do
      {
        *((_DWORD *)v25 - 4) = *(_DWORD *)v23;
        *(v25 - 1) = *(_QWORD *)(v23 + 8);
        *v25 = *(_QWORD *)(v23 + 16);
        v25 += 3;
        *(_DWORD *)(a1 + 31720) = v26++;
        v23 += 24;
      }
      while (v23 != v24);
    }
    v27 = *(_DWORD *)(a2 + 32368);
    *(_DWORD *)(a1 + 32368) = 0;
    if (v27)
    {
      v28 = 0;
      v29 = (uint64_t *)(a2 + 31728);
      v30 = a2 + 31728 + 160 * v27;
      do
      {
        v31 = a1 + 31728 + 160 * v28;
        v32 = *v29;
        *(_DWORD *)(v31 + 8) = *((_DWORD *)v29 + 2);
        *(_QWORD *)v31 = v32;
        v34 = *((_OWORD *)v29 + 3);
        v33 = *((_OWORD *)v29 + 4);
        v35 = *((_OWORD *)v29 + 2);
        *(_QWORD *)(v31 + 80) = v29[10];
        *(_OWORD *)(v31 + 48) = v34;
        *(_OWORD *)(v31 + 64) = v33;
        *(_OWORD *)(v31 + 32) = v35;
        *(_OWORD *)(v31 + 16) = *((_OWORD *)v29 + 1);
        v36 = *(_OWORD *)(v29 + 11);
        *(_QWORD *)(v31 + 104) = v29[13];
        *(_OWORD *)(v31 + 88) = v36;
        v37 = *((_OWORD *)v29 + 7);
        v38 = *((_OWORD *)v29 + 9);
        *(_OWORD *)(v31 + 128) = *((_OWORD *)v29 + 8);
        *(_OWORD *)(v31 + 144) = v38;
        *(_OWORD *)(v31 + 112) = v37;
        v28 = *(_DWORD *)(a1 + 32368) + 1;
        *(_DWORD *)(a1 + 32368) = v28;
        v29 += 20;
      }
      while (v29 != (uint64_t *)v30);
    }
    v39 = *(_DWORD *)(a2 + 35336);
    *(_DWORD *)(a1 + 35336) = 0;
    if (v39)
    {
      v40 = a2 + 32376 + 296 * v39;
      v41 = 1;
      v42 = a1 + 32376;
      v43 = a2 + 32376;
      do
      {
        *(_DWORD *)v42 = *(_DWORD *)v43;
        v44 = *(_OWORD *)(v43 + 8);
        v45 = *(_OWORD *)(v43 + 24);
        *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
        *(_OWORD *)(v42 + 24) = v45;
        *(_OWORD *)(v42 + 8) = v44;
        v46 = *(_OWORD *)(v43 + 56);
        v47 = *(_OWORD *)(v43 + 72);
        v48 = *(_OWORD *)(v43 + 88);
        *(_OWORD *)(v42 + 104) = *(_OWORD *)(v43 + 104);
        *(_OWORD *)(v42 + 88) = v48;
        *(_OWORD *)(v42 + 72) = v47;
        *(_OWORD *)(v42 + 56) = v46;
        v49 = *(_OWORD *)(v43 + 120);
        v50 = *(_OWORD *)(v43 + 136);
        v51 = *(_OWORD *)(v43 + 152);
        *(_QWORD *)(v42 + 168) = *(_QWORD *)(v43 + 168);
        *(_OWORD *)(v42 + 152) = v51;
        *(_OWORD *)(v42 + 136) = v50;
        *(_OWORD *)(v42 + 120) = v49;
        v52 = *(_OWORD *)(v43 + 176);
        v53 = *(_OWORD *)(v43 + 192);
        v54 = *(_OWORD *)(v43 + 224);
        *(_OWORD *)(v42 + 208) = *(_OWORD *)(v43 + 208);
        *(_OWORD *)(v42 + 224) = v54;
        *(_OWORD *)(v42 + 176) = v52;
        *(_OWORD *)(v42 + 192) = v53;
        v55 = *(_OWORD *)(v43 + 240);
        v56 = *(_OWORD *)(v43 + 256);
        v57 = *(_OWORD *)(v43 + 272);
        *(_QWORD *)(v42 + 288) = *(_QWORD *)(v43 + 288);
        *(_OWORD *)(v42 + 256) = v56;
        *(_OWORD *)(v42 + 272) = v57;
        *(_OWORD *)(v42 + 240) = v55;
        *(_DWORD *)(a1 + 35336) = v41++;
        v42 += 296;
        v43 += 296;
      }
      while (v43 != v40);
    }
    *(_OWORD *)(a1 + 35344) = *(_OWORD *)(a2 + 35344);
    v58 = *(_DWORD *)(a2 + 35360);
    *(_DWORD *)(a1 + 35360) = 0;
    if (v58)
    {
      v59 = 0;
      LOBYTE(v60) = 0;
      v61 = 0;
      do
      {
        *(_DWORD *)(a1 + 35360) = v59 + 1;
        *(_DWORD *)(a1 + 35364 + 4 * (v59 >> 5)) = (((*(_DWORD *)(a2 + 35364 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v60) & 1) << v59) | *(_DWORD *)(a1 + 35364 + 4 * (v59 >> 5)) & ~(1 << v59);
        v60 = v61 + 1;
        v61 = (v61 + 1);
        ++v59;
      }
      while (v58 != v60);
    }
    v62 = *(_DWORD *)(a2 + 35368);
    *(_DWORD *)(a1 + 35368) = 0;
    if (v62)
    {
      v63 = 0;
      LOBYTE(v64) = 0;
      v65 = 0;
      do
      {
        *(_DWORD *)(a1 + 35368) = v63 + 1;
        *(_DWORD *)(a1 + 35372 + 4 * (v63 >> 5)) = (((*(_DWORD *)(a2 + 35372 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v64) & 1) << v63) | *(_DWORD *)(a1 + 35372 + 4 * (v63 >> 5)) & ~(1 << v63);
        v64 = v65 + 1;
        v65 = (v65 + 1);
        ++v63;
      }
      while (v62 != v64);
    }
    v66 = *(_OWORD *)(a2 + 35376);
    *(_OWORD *)(a1 + 35392) = *(_OWORD *)(a2 + 35392);
    *(_OWORD *)(a1 + 35376) = v66;
    v67 = *(_OWORD *)(a2 + 35408);
    v68 = *(_OWORD *)(a2 + 35424);
    v69 = *(_OWORD *)(a2 + 35440);
    *(_OWORD *)(a1 + 35456) = *(_OWORD *)(a2 + 35456);
    *(_OWORD *)(a1 + 35440) = v69;
    *(_OWORD *)(a1 + 35424) = v68;
    *(_OWORD *)(a1 + 35408) = v67;
    v70 = *(_OWORD *)(a2 + 35472);
    v71 = *(_OWORD *)(a2 + 35488);
    v72 = *(_OWORD *)(a2 + 35504);
    *(_OWORD *)(a1 + 35517) = *(_OWORD *)(a2 + 35517);
    *(_OWORD *)(a1 + 35504) = v72;
    *(_OWORD *)(a1 + 35488) = v71;
    *(_OWORD *)(a1 + 35472) = v70;
    v73 = *(unsigned int *)(a2 + 42736);
    *(_DWORD *)(a1 + 42736) = 0;
    if ((_DWORD)v73)
    {
      v74 = 0;
      v75 = (__int128 *)(a2 + 35536);
      v76 = 24 * v73;
      do
      {
        v77 = a1 + 35536 + 24 * v74;
        v78 = *v75;
        *(_QWORD *)(v77 + 16) = *((_QWORD *)v75 + 2);
        *(_OWORD *)v77 = v78;
        v75 = (__int128 *)((char *)v75 + 24);
        v74 = *(_DWORD *)(a1 + 42736) + 1;
        *(_DWORD *)(a1 + 42736) = v74;
        v76 -= 24;
      }
      while (v76);
    }
    v79 = *v5;
    *(_DWORD *)v4 = 0;
    if (v79)
    {
      v80 = 0;
      LOBYTE(v81) = 0;
      v82 = 0;
      do
      {
        *(_DWORD *)v4 = v80 + 1;
        *(_DWORD *)(a1 + 42748 + 4 * (v80 >> 5)) = (((*(_DWORD *)(a2 + 42748 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v81) & 1) << v80) | *(_DWORD *)(a1 + 42748 + 4 * (v80 >> 5)) & ~(1 << v80);
        v81 = v82 + 1;
        v82 = (v82 + 1);
        ++v80;
      }
      while (v79 != v81);
    }
  }
  v83 = *(_OWORD *)(a2 + 42788);
  v84 = *(_OWORD *)(a2 + 42804);
  *(_DWORD *)(a1 + 42820) = *(_DWORD *)(a2 + 42820);
  *(_OWORD *)(a1 + 42788) = v83;
  *(_OWORD *)(a1 + 42804) = v84;
  *(_WORD *)(v4 + 80) = *((_WORD *)v5 + 40);
  if (a1 != a2)
  {
    v85 = v5[216];
    *(_DWORD *)(v4 + 864) = 0;
    if ((_DWORD)v85)
    {
      v86 = 0;
      v87 = v5 + 21;
      v88 = 4 * v85;
      do
      {
        v89 = *v87++;
        *(_DWORD *)(a1 + 42828 + 4 * v86) = v89;
        v86 = *(_DWORD *)(v4 + 864) + 1;
        *(_DWORD *)(v4 + 864) = v86;
        v88 -= 4;
      }
      while (v88);
    }
  }
  *(_DWORD *)(v4 + 868) = v5[217];
  v90 = *(_OWORD *)(a2 + 43616);
  *(_OWORD *)(a1 + 43632) = *(_OWORD *)(a2 + 43632);
  *(_OWORD *)(a1 + 43616) = v90;
  v91 = *(_OWORD *)(a2 + 43648);
  *(_OWORD *)(a1 + 43664) = *(_OWORD *)(a2 + 43664);
  *(_OWORD *)(a1 + 43648) = v91;
  v92 = *(_OWORD *)(a2 + 43680);
  *(_OWORD *)(a1 + 43696) = *(_OWORD *)(a2 + 43696);
  *(_OWORD *)(a1 + 43680) = v92;
  v93 = *(_OWORD *)(a2 + 43712);
  *(_OWORD *)(a1 + 43728) = *(_OWORD *)(a2 + 43728);
  *(_OWORD *)(a1 + 43712) = v93;
  v94 = *(_OWORD *)(a2 + 43744);
  *(_OWORD *)(a1 + 43760) = *(_OWORD *)(a2 + 43760);
  *(_OWORD *)(a1 + 43744) = v94;
  v95 = *(_OWORD *)(a2 + 43776);
  *(_OWORD *)(a1 + 43792) = *(_OWORD *)(a2 + 43792);
  *(_OWORD *)(a1 + 43776) = v95;
  v96 = *(_OWORD *)(a2 + 43808);
  *(_OWORD *)(a1 + 43824) = *(_OWORD *)(a2 + 43824);
  *(_OWORD *)(a1 + 43808) = v96;
  v97 = *(_OWORD *)(a2 + 43840);
  *(_OWORD *)(a1 + 43856) = *(_OWORD *)(a2 + 43856);
  *(_OWORD *)(a1 + 43840) = v97;
  v98 = *(_OWORD *)(a2 + 43872);
  *(_OWORD *)(a1 + 43888) = *(_OWORD *)(a2 + 43888);
  *(_OWORD *)(a1 + 43872) = v98;
  v99 = *(_OWORD *)(a2 + 43904);
  *(_OWORD *)(a1 + 43920) = *(_OWORD *)(a2 + 43920);
  *(_OWORD *)(a1 + 43904) = v99;
  v100 = *(_OWORD *)(a2 + 43936);
  *(_OWORD *)(a1 + 43952) = *(_OWORD *)(a2 + 43952);
  *(_OWORD *)(a1 + 43936) = v100;
  v101 = *(_OWORD *)(a2 + 43968);
  *(_OWORD *)(a1 + 43984) = *(_OWORD *)(a2 + 43984);
  *(_OWORD *)(a1 + 43968) = v101;
  v102 = *(_OWORD *)(a2 + 44000);
  *(_OWORD *)(a1 + 44016) = *(_OWORD *)(a2 + 44016);
  *(_OWORD *)(a1 + 44000) = v102;
  v103 = *(_OWORD *)(a2 + 44032);
  *(_OWORD *)(a1 + 44048) = *(_OWORD *)(a2 + 44048);
  *(_OWORD *)(a1 + 44032) = v103;
  v104 = *(_OWORD *)(a2 + 44064);
  *(_OWORD *)(a1 + 44080) = *(_OWORD *)(a2 + 44080);
  *(_OWORD *)(a1 + 44064) = v104;
  v105 = *(_OWORD *)(a2 + 44096);
  *(_OWORD *)(a1 + 44112) = *(_OWORD *)(a2 + 44112);
  *(_OWORD *)(a1 + 44096) = v105;
  v106 = *(_OWORD *)(a2 + 44128);
  *(_OWORD *)(a1 + 44144) = *(_OWORD *)(a2 + 44144);
  *(_OWORD *)(a1 + 44128) = v106;
  v107 = *(_OWORD *)(a2 + 44160);
  *(_OWORD *)(a1 + 44176) = *(_OWORD *)(a2 + 44176);
  *(_OWORD *)(a1 + 44160) = v107;
  v108 = *(_OWORD *)(a2 + 44192);
  *(_OWORD *)(a1 + 44208) = *(_OWORD *)(a2 + 44208);
  *(_OWORD *)(a1 + 44192) = v108;
  v109 = *(_OWORD *)(a2 + 44224);
  *(_OWORD *)(a1 + 44240) = *(_OWORD *)(a2 + 44240);
  *(_OWORD *)(a1 + 44224) = v109;
  v110 = *(_OWORD *)(a2 + 44256);
  *(_OWORD *)(a1 + 44272) = *(_OWORD *)(a2 + 44272);
  *(_OWORD *)(a1 + 44256) = v110;
  v111 = *(_OWORD *)(a2 + 44288);
  *(_OWORD *)(a1 + 44304) = *(_OWORD *)(a2 + 44304);
  *(_OWORD *)(a1 + 44288) = v111;
  if (a1 != a2)
  {
    memcpy((void *)(a1 + 44352), (const void *)(a2 + 44352), 0x4B080uLL);
    memcpy((void *)(a1 + 351680), (const void *)(a2 + 351680), 0xF78uLL);
  }
  v112 = (unsigned int *)(a1 + 578672);
  memcpy((void *)(a1 + 355640), (const void *)(a2 + 355640), 0x698uLL);
  memcpy((void *)(a1 + 357328), (const void *)(a2 + 357328), 0x698uLL);
  memcpy((void *)(a1 + 359016), (const void *)(a2 + 359016), 0x960uLL);
  memcpy((void *)(a1 + 361416), (const void *)(a2 + 361416), 0x9A8uLL);
  sub_20F904994(a1 + 363904, (__int128 *)(a2 + 363904));
  sub_20F904EFC(a1 + 394880, a2 + 394880);
  if (a1 != a2)
  {
    v113 = (_DWORD *)(a1 + 511280);
    v114 = (unsigned int *)(a1 + 454496);
    v115 = *(unsigned int *)(a2 + 454496);
    *(_DWORD *)(a1 + 454496) = 0;
    if ((_DWORD)v115)
    {
      v116 = 0;
      v117 = (__int128 *)(a2 + 454208);
      v118 = 32 * v115;
      do
      {
        v119 = (_OWORD *)(a1 + 454208 + 32 * v116);
        v120 = *v117;
        v121 = v117[1];
        v117 += 2;
        *v119 = v120;
        v119[1] = v121;
        v116 = *v114 + 1;
        *v114 = v116;
        v118 -= 32;
      }
      while (v118);
    }
    v122 = *(unsigned int *)(a2 + 455272);
    *(_DWORD *)(a1 + 455272) = 0;
    if ((_DWORD)v122)
    {
      v123 = 0;
      v124 = (__int128 *)(a2 + 454504);
      v125 = 24 * v122;
      do
      {
        v126 = a1 + 454504 + 24 * v123;
        v127 = *v124;
        *(_QWORD *)(v126 + 16) = *((_QWORD *)v124 + 2);
        *(_OWORD *)v126 = v127;
        v124 = (__int128 *)((char *)v124 + 24);
        v123 = *(_DWORD *)(a1 + 455272) + 1;
        *(_DWORD *)(a1 + 455272) = v123;
        v125 -= 24;
      }
      while (v125);
    }
    v128 = *(_DWORD *)(a2 + 511280);
    *v113 = 0;
    if (v128)
    {
      v129 = a2 + 455280;
      v130 = a2 + 455280 + 56 * v128;
      v131 = a1 + 455312;
      v132 = 1;
      do
      {
        *(_QWORD *)(v131 - 32) = *(_QWORD *)v129;
        v133 = *(_OWORD *)(v129 + 8);
        *(_QWORD *)(v131 - 8) = *(_QWORD *)(v129 + 24);
        *(_OWORD *)(v131 - 24) = v133;
        v134 = *(_OWORD *)(v129 + 32);
        *(_QWORD *)(v131 + 16) = *(_QWORD *)(v129 + 48);
        *(_OWORD *)v131 = v134;
        v131 += 56;
        *v113 = v132++;
        v129 += 56;
      }
      while (v129 != v130);
    }
  }
  v135 = 9;
  v136 = 511296;
  do
  {
    v137 = a1 + v136;
    v138 = *(_OWORD *)(a2 + v136);
    *(_QWORD *)(v137 + 16) = *(_QWORD *)(a2 + v136 + 16);
    *(_OWORD *)v137 = v138;
    v139 = *(_OWORD *)(a2 + v136 + 56);
    v140 = *(_OWORD *)(a2 + v136 + 72);
    v141 = *(_QWORD *)(a2 + v136 + 88);
    *(_OWORD *)(v137 + 40) = *(_OWORD *)(a2 + v136 + 40);
    *(_QWORD *)(v137 + 88) = v141;
    *(_OWORD *)(v137 + 72) = v140;
    *(_OWORD *)(v137 + 56) = v139;
    *(_OWORD *)(v137 + 24) = *(_OWORD *)(a2 + v136 + 24);
    v143 = *(_OWORD *)(a2 + v136 + 176);
    v142 = *(_OWORD *)(a2 + v136 + 192);
    v144 = *(_OWORD *)(a2 + v136 + 160);
    *(_QWORD *)(v137 + 208) = *(_QWORD *)(a2 + v136 + 208);
    *(_OWORD *)(v137 + 176) = v143;
    *(_OWORD *)(v137 + 192) = v142;
    *(_OWORD *)(v137 + 160) = v144;
    v145 = *(_OWORD *)(a2 + v136 + 96);
    v146 = *(_OWORD *)(a2 + v136 + 112);
    v147 = *(_OWORD *)(a2 + v136 + 144);
    *(_OWORD *)(v137 + 128) = *(_OWORD *)(a2 + v136 + 128);
    *(_OWORD *)(v137 + 144) = v147;
    *(_OWORD *)(v137 + 96) = v145;
    *(_OWORD *)(v137 + 112) = v146;
    v148 = (_OWORD *)(a1 + v136 + 216);
    v149 = *(_OWORD *)(a2 + v136 + 216);
    v150 = *(_OWORD *)(a2 + v136 + 232);
    v151 = *(_OWORD *)(a2 + v136 + 248);
    v148[3] = *(_OWORD *)(a2 + v136 + 264);
    *(_OWORD *)(v137 + 248) = v151;
    *(_OWORD *)(v137 + 232) = v150;
    *(_OWORD *)(v137 + 216) = v149;
    v152 = *(_OWORD *)(a2 + v136 + 280);
    v153 = *(_OWORD *)(a2 + v136 + 296);
    v154 = *(_OWORD *)(a2 + v136 + 312);
    *(_QWORD *)(v137 + 328) = *(_QWORD *)(a2 + v136 + 328);
    v148[5] = v153;
    v148[6] = v154;
    v148[4] = v152;
    memcpy((void *)(a1 + v136 + 336), (const void *)(a2 + v136 + 336), 0x168uLL);
    memcpy((void *)(a1 + v136 + 696), (const void *)(a2 + v136 + 696), 0x168uLL);
    memcpy((void *)(a1 + v136 + 1056), (const void *)(a2 + v136 + 1056), 0x438uLL);
    memcpy((void *)(a1 + v136 + 2136), (const void *)(a2 + v136 + 2136), 0x168uLL);
    memcpy((void *)(a1 + v136 + 2496), (const void *)(a2 + v136 + 2496), 0x168uLL);
    memcpy((void *)(a1 + v136 + 2856), (const void *)(a2 + v136 + 2856), 0x438uLL);
    v136 += 3936;
    --v135;
  }
  while (v135);
  v155 = *(_QWORD *)(a2 + 546720);
  *(_BYTE *)(a1 + 546728) = *(_BYTE *)(a2 + 546728);
  *(_QWORD *)(a1 + 546720) = v155;
  if (a1 != a2)
  {
    v156 = *(_DWORD *)(a2 + 578672);
    *v112 = 0;
    if (v156)
    {
      v157 = 0;
      v158 = 0;
      v220 = 3192 * v156;
      v219 = a2 + 549912;
      v217 = a2 + 548064;
      v218 = a2 + 548088;
      v216 = a2 + 547344;
      v214 = a2 + 547200;
      v215 = a2 + 547272;
      v212 = a2 + 547056;
      v213 = a2 + 547128;
      v210 = a2 + 546912;
      v211 = a2 + 546984;
      v209 = a2 + 546840;
      v159 = a2 + 546808;
      v160 = a2 + 546784;
      v161 = a2 + 546760;
      do
      {
        _X28 = a2 + 553136 + v157;
        __asm { PRFM            #0, [X28] }
        v168 = a1 + 546752 + 3192 * v158;
        *(_QWORD *)v168 = *(_QWORD *)(a2 + 546752 + v157);
        v169 = *(_OWORD *)(v161 + v157);
        *(_QWORD *)(v168 + 24) = *(_QWORD *)(v161 + v157 + 16);
        *(_OWORD *)(v168 + 8) = v169;
        v170 = *(_OWORD *)(v160 + v157);
        *(_QWORD *)(v168 + 48) = *(_QWORD *)(v160 + v157 + 16);
        *(_OWORD *)(v168 + 32) = v170;
        v171 = *(_OWORD *)(v159 + v157);
        *(_OWORD *)(v168 + 72) = *(_OWORD *)(v159 + v157 + 16);
        *(_OWORD *)(v168 + 56) = v171;
        v173 = *(_OWORD *)(v209 + v157 + 32);
        v172 = *(_OWORD *)(v209 + v157 + 48);
        v174 = *(_QWORD *)(v209 + v157 + 64);
        *(_OWORD *)(v168 + 104) = *(_OWORD *)(v209 + v157 + 16);
        *(_QWORD *)(v168 + 152) = v174;
        *(_OWORD *)(v168 + 136) = v172;
        *(_OWORD *)(v168 + 120) = v173;
        *(_OWORD *)(v168 + 88) = *(_OWORD *)(v209 + v157);
        v176 = *(_OWORD *)(v210 + v157 + 32);
        v175 = *(_OWORD *)(v210 + v157 + 48);
        v177 = *(_OWORD *)(v210 + v157 + 16);
        *(_QWORD *)(v168 + 224) = *(_QWORD *)(v210 + v157 + 64);
        *(_OWORD *)(v168 + 192) = v176;
        *(_OWORD *)(v168 + 208) = v175;
        *(_OWORD *)(v168 + 176) = v177;
        *(_OWORD *)(v168 + 160) = *(_OWORD *)(v210 + v157);
        *(_OWORD *)(v168 + 232) = *(_OWORD *)(v211 + v157);
        v178 = *(_OWORD *)(v211 + v157 + 16);
        v179 = *(_OWORD *)(v211 + v157 + 32);
        v180 = *(_OWORD *)(v211 + v157 + 48);
        *(_QWORD *)(v168 + 296) = *(_QWORD *)(v211 + v157 + 64);
        *(_OWORD *)(v168 + 264) = v179;
        *(_OWORD *)(v168 + 280) = v180;
        *(_OWORD *)(v168 + 248) = v178;
        *(_OWORD *)(v168 + 304) = *(_OWORD *)(v212 + v157);
        v181 = *(_OWORD *)(v212 + v157 + 16);
        v182 = *(_OWORD *)(v212 + v157 + 32);
        v183 = *(_OWORD *)(v212 + v157 + 48);
        *(_QWORD *)(v168 + 368) = *(_QWORD *)(v212 + v157 + 64);
        *(_OWORD *)(v168 + 336) = v182;
        *(_OWORD *)(v168 + 352) = v183;
        *(_OWORD *)(v168 + 320) = v181;
        *(_OWORD *)(v168 + 376) = *(_OWORD *)(v213 + v157);
        v184 = *(_OWORD *)(v213 + v157 + 16);
        v185 = *(_OWORD *)(v213 + v157 + 32);
        v186 = *(_OWORD *)(v213 + v157 + 48);
        *(_QWORD *)(v168 + 440) = *(_QWORD *)(v213 + v157 + 64);
        *(_OWORD *)(v168 + 408) = v185;
        *(_OWORD *)(v168 + 424) = v186;
        *(_OWORD *)(v168 + 392) = v184;
        *(_OWORD *)(v168 + 448) = *(_OWORD *)(v214 + v157);
        v187 = *(_OWORD *)(v214 + v157 + 16);
        v188 = *(_OWORD *)(v214 + v157 + 32);
        v189 = *(_OWORD *)(v214 + v157 + 48);
        *(_QWORD *)(v168 + 512) = *(_QWORD *)(v214 + v157 + 64);
        *(_OWORD *)(v168 + 480) = v188;
        *(_OWORD *)(v168 + 496) = v189;
        *(_OWORD *)(v168 + 464) = v187;
        *(_OWORD *)(v168 + 520) = *(_OWORD *)(v215 + v157);
        v190 = *(_OWORD *)(v215 + v157 + 16);
        v191 = *(_OWORD *)(v215 + v157 + 32);
        v192 = *(_OWORD *)(v215 + v157 + 48);
        *(_QWORD *)(v168 + 584) = *(_QWORD *)(v215 + v157 + 64);
        *(_OWORD *)(v168 + 552) = v191;
        *(_OWORD *)(v168 + 568) = v192;
        *(_OWORD *)(v168 + 536) = v190;
        *(_OWORD *)(v168 + 592) = *(_OWORD *)(v216 + v157);
        v193 = *(_OWORD *)(v216 + v157 + 16);
        v194 = *(_OWORD *)(v216 + v157 + 32);
        v195 = *(_OWORD *)(v216 + v157 + 48);
        *(_QWORD *)(v168 + 656) = *(_QWORD *)(v216 + v157 + 64);
        *(_OWORD *)(v168 + 624) = v194;
        *(_OWORD *)(v168 + 640) = v195;
        *(_OWORD *)(v168 + 608) = v193;
        memcpy((void *)(v168 + 664), (const void *)(a2 + 547416 + v157), 0x288uLL);
        v196 = *(_OWORD *)(v217 + v157);
        *(_QWORD *)(v168 + 1328) = *(_QWORD *)(v217 + v157 + 16);
        *(_OWORD *)(v168 + 1312) = v196;
        v197 = *(_QWORD *)(v218 + v157 + 16);
        *(_OWORD *)(v168 + 1336) = *(_OWORD *)(v218 + v157);
        *(_QWORD *)(v168 + 1352) = v197;
        memcpy((void *)(v168 + 1360), (const void *)(a2 + 548112 + v157), 0x708uLL);
        v198 = *(_QWORD *)(v219 + v157 + 16);
        *(_OWORD *)(v168 + 3160) = *(_OWORD *)(v219 + v157);
        *(_QWORD *)(v168 + 3176) = v198;
        __asm { PRFM            #0, [X28,#0xC70] }
        *(_QWORD *)(v168 + 3184) = *(_QWORD *)(a2 + 549936 + v157);
        v158 = *v112 + 1;
        *v112 = v158;
        v157 += 3192;
      }
      while (v220 != v157);
    }
    v200 = *(unsigned int *)(a2 + 578696);
    *(_DWORD *)(a1 + 578696) = 0;
    if ((_DWORD)v200)
    {
      v201 = 0;
      v202 = (int *)(a2 + 578688);
      v203 = 4 * v200;
      do
      {
        v204 = *v202++;
        *(_DWORD *)(a1 + 578688 + 4 * v201) = v204;
        v201 = *(_DWORD *)(a1 + 578696) + 1;
        *(_DWORD *)(a1 + 578696) = v201;
        v203 -= 4;
      }
      while (v203);
    }
    sub_20F90515C(a1 + 578704, (uint64_t *)(a2 + 578704));
    sub_20F90515C(a1 + 918252, (uint64_t *)(a2 + 918252));
    memcpy((void *)(a1 + 1257856), (const void *)(a2 + 1257856), 0x39210uLL);
    memcpy((void *)(a1 + 1491904), (const void *)(a2 + 1491904), 0x4B080uLL);
    memcpy((void *)(a1 + 1799232), (const void *)(a2 + 1799232), 0xF78uLL);
    sub_20F904994(a1 + 1803200, (__int128 *)(a2 + 1803200));
    memcpy((void *)(a1 + 1834176), (const void *)(a2 + 1834176), 0x4B080uLL);
    memcpy((void *)(a1 + 2141504), (const void *)(a2 + 2141504), 0xF78uLL);
  }
  v205 = *(_OWORD *)(a2 + 2145472);
  v206 = *(_OWORD *)(a2 + 2145488);
  v207 = *(_OWORD *)(a2 + 2145520);
  *(_OWORD *)(a1 + 2145504) = *(_OWORD *)(a2 + 2145504);
  *(_OWORD *)(a1 + 2145520) = v207;
  *(_OWORD *)(a1 + 2145472) = v205;
  *(_OWORD *)(a1 + 2145488) = v206;
  return a1;
}

_DWORD **sub_20F8F28D0(_DWORD **a1)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F903EA8(v2);
    MEMORY[0x212BC638C](v3, 64);
  }
  return a1;
}

_QWORD *sub_20F8F2908(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  int64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  int v43;

  v2 = result + 7221;
  v3 = result[7239];
  if (!*(_BYTE *)(v3 + 31280))
  {
    v4 = (unsigned int *)(v3 + 454212);
    v5 = *(_DWORD *)(v3 + 454496) >= 1022611261 * ((result[7222] - result[7221]) >> 4)
       ? 1022611261 * ((result[7222] - result[7221]) >> 4)
       : *(_DWORD *)(v3 + 454496);
    if (v5)
    {
      v6 = 0;
      v7 = (_BYTE *)(v3 + 546720);
      v8 = (int64x2_t *)(v3 + 511304);
      v9 = v3 + 64;
      v10 = 336 * v5;
      v11 = vdupq_n_s64(0x7FF8000000000000uLL);
      do
      {
        while ((v8->i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || !*v7)
        {
          *v8 = v11;
          v6 += 336;
          ++v7;
          v8 += 246;
          v4 += 8;
          if (v10 == v6)
            goto LABEL_11;
        }
        v12 = (__int128 *)(v9 + 168 * *(v4 - 1));
        v13 = *v2 + v6;
        v14 = v12[6];
        v16 = v12[3];
        v15 = v12[4];
        *(_OWORD *)(v13 + 80) = v12[5];
        *(_OWORD *)(v13 + 96) = v14;
        *(_OWORD *)(v13 + 48) = v16;
        *(_OWORD *)(v13 + 64) = v15;
        v18 = v12[8];
        v17 = v12[9];
        v19 = v12[7];
        *(_QWORD *)(v13 + 160) = *((_QWORD *)v12 + 20);
        *(_OWORD *)(v13 + 128) = v18;
        *(_OWORD *)(v13 + 144) = v17;
        *(_OWORD *)(v13 + 112) = v19;
        v20 = *v12;
        v21 = v12[2];
        *(_OWORD *)(v13 + 16) = v12[1];
        *(_OWORD *)(v13 + 32) = v21;
        *(_OWORD *)v13 = v20;
        v22 = *v4;
        v4 += 8;
        v23 = (__int128 *)(v9 + 168 * v22);
        v24 = *v2 + v6;
        v25 = v23[5];
        v26 = v23[6];
        v27 = v23[4];
        *(_OWORD *)(v24 + 216) = v23[3];
        *(_OWORD *)(v24 + 264) = v26;
        *(_OWORD *)(v24 + 248) = v25;
        *(_OWORD *)(v24 + 232) = v27;
        v29 = v23[8];
        v28 = v23[9];
        v30 = v23[7];
        *(_QWORD *)(v24 + 328) = *((_QWORD *)v23 + 20);
        *(_OWORD *)(v24 + 296) = v29;
        *(_OWORD *)(v24 + 312) = v28;
        *(_OWORD *)(v24 + 280) = v30;
        v31 = *v23;
        v32 = v23[1];
        *(_OWORD *)(v24 + 200) = v23[2];
        *(_OWORD *)(v24 + 184) = v32;
        *(_OWORD *)(v24 + 168) = v31;
        v6 += 336;
        ++v7;
        v8 += 246;
      }
      while (v10 != v6);
LABEL_11:
      v3 = result[7239];
    }
  }
  *(_BYTE *)(v3 + 546728) = 0;
  *(_QWORD *)(v3 + 546720) = 0;
  v33 = result[199];
  v34 = result[200];
  if (*(_DWORD *)(v3 + 453952) == *(_DWORD *)(v3 + 454056))
  {
    if (v33 != v34)
    {
      v35 = 0;
      v36 = v3 + 453956;
      v37 = v3 + 454060;
      do
      {
        if (((*(unsigned __int8 *)(*(_QWORD *)(v33 + 208) + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(*(_QWORD *)(v33 + 200) + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(*(_QWORD *)(v33 + 216) + 4) >> 2) & 1) == (char)(32
                                                                                     * *(_BYTE *)(*(_QWORD *)(v33 + 224)
                                                                                                + 4)) >> 7)
          v42 = 2;
        else
          v42 = 1;
        if ((v42 & a2) != 0)
        {
          v40 = *(_QWORD *)(v33 + 168);
          if (v40)
          {
            LODWORD(v40) = v35 >> 5;
            v38 = 1 << v35++;
            v39 = 4 * v40;
            LOBYTE(v40) = (*(_DWORD *)(v36 + v39) & v38) != 0;
            v41 = (*(_DWORD *)(v37 + v39) & v38) != 0;
          }
          else
          {
            v41 = 0;
          }
          *(_BYTE *)(v33 + 176) = v40;
          *(_BYTE *)(v33 + 177) = v41;
        }
        v33 += 304;
      }
      while (v33 != v34);
    }
  }
  else
  {
    for (; v33 != v34; v33 += 304)
    {
      if (((*(unsigned __int8 *)(*(_QWORD *)(v33 + 208) + 4) >> 2) & 1)
         + ((*(unsigned __int8 *)(*(_QWORD *)(v33 + 200) + 4) >> 2) & 1)
         + ((*(unsigned __int8 *)(*(_QWORD *)(v33 + 216) + 4) >> 2) & 1) == (char)(32
                                                                                   * *(_BYTE *)(*(_QWORD *)(v33 + 224)
                                                                                              + 4)) >> 7)
        v43 = 2;
      else
        v43 = 1;
      if ((v43 & a2) != 0)
        *(_WORD *)(v33 + 176) = 0;
    }
  }
  return result;
}

void sub_20F8F2BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  _DWORD *v21;
  _DWORD *v22;
  char **v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v45;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t **v50;
  _QWORD *v51;
  char **v52;
  unint64_t v53;

  v45 = a4;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = (unint64_t **)(a4 + 24 * v5);
    v8 = *v7;
    v7[1] = *v7;
    v52 = (char **)(v7 + 1);
    v9 = (_QWORD *)(a1 + 24 * v5);
    v10 = v9[1];
    if (*v9 != v10)
    {
      v11 = v10 - *v9;
      v12 = v11 >> 2;
      v13 = a4 + 24 * v5;
      v15 = *(_QWORD *)(v13 + 16);
      v14 = (_QWORD *)(v13 + 16);
      v51 = v14;
      if (v11 >> 2 > (unint64_t)((v15 - (uint64_t)v8) >> 3))
      {
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFDLL)
          sub_20E92CED8();
        v16 = (char *)operator new(2 * v11);
        *v7 = (unint64_t *)v16;
        v14 = v51;
        *v52 = v16;
        *v51 = &v16[8 * v12];
        if (v8)
        {
          operator delete(v8);
          v14 = v51;
        }
      }
      v17 = a2 + 24 * v5;
      v19 = *(_DWORD **)v17;
      v18 = *(_DWORD **)(v17 + 8);
      if (*(_DWORD **)v17 != v18)
      {
        v20 = 0;
        v21 = (_DWORD *)v9[1];
        v22 = (_DWORD *)*v9;
        v23 = (char **)(v7 + 1);
        v47 = v21;
        v48 = *(_DWORD **)(v17 + 8);
        v49 = v5;
        v50 = v7;
        do
        {
          if (*v19 != *v22)
            goto LABEL_36;
          v24 = *v23;
          if ((unint64_t)*v23 < *v14)
          {
            *(_QWORD *)v24 = v20 | (unint64_t)(v6 << 32);
            *v23 = v24 + 8;
            v6 = (*(_DWORD *)(a3 + 4 * v5) + v6);
            if (++v22 == v21)
              break;
            goto LABEL_36;
          }
          v25 = a3;
          v26 = (char *)*v7;
          v27 = v24 - (char *)*v7;
          v28 = v27 >> 3;
          v29 = (v27 >> 3) + 1;
          if (v29 >> 61)
            sub_20E92CED8();
          v30 = *v14 - (_QWORD)v26;
          if (v30 >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          v53 = v29;
          if (v29)
          {
            if (v29 >> 61)
              sub_20E877A38();
            v31 = operator new(8 * v29);
            v14 = v51;
          }
          else
          {
            v31 = 0;
          }
          v32 = (unint64_t *)&v31[8 * v28];
          *v32 = v20 | (unint64_t)(v6 << 32);
          v33 = (char *)(v32 + 1);
          if (v24 == v26)
          {
            a3 = v25;
            v7 = v50;
            v23 = v52;
            goto LABEL_33;
          }
          v34 = v24 - v26 - 8;
          if (v34 >= 0x58)
          {
            v35 = v24 - &v31[v27];
            a3 = v25;
            v23 = v52;
            if (v35 >= 0x20)
            {
              v36 = (v34 >> 3) + 1;
              v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
              v38 = &v24[-v37];
              v32 = (unint64_t *)((char *)v32 - v37);
              v39 = &v31[8 * v28 - 16];
              v40 = v24 - 16;
              v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *(_OWORD *)v40;
                *(v39 - 1) = *((_OWORD *)v40 - 1);
                *v39 = v42;
                v39 -= 2;
                v40 -= 32;
                v41 -= 4;
              }
              while (v41);
              v24 = v38;
              if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_32;
            }
          }
          else
          {
            a3 = v25;
            v23 = v52;
          }
          do
          {
            v43 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v32 = v43;
          }
          while (v24 != v26);
LABEL_32:
          v7 = v50;
          v24 = (char *)*v50;
LABEL_33:
          *v7 = v32;
          *v23 = v33;
          *v14 = &v31[8 * v53];
          v5 = v49;
          if (v24)
          {
            operator delete(v24);
            v14 = v51;
          }
          v21 = v47;
          v18 = v48;
          *v23 = v33;
          v6 = (*(_DWORD *)(a3 + 4 * v49) + v6);
          if (++v22 == v47)
            break;
LABEL_36:
          ++v19;
          ++v20;
        }
        while (v19 != v18);
      }
    }
    ++v5;
    a4 = v45;
  }
  while (v5 != 10);
}

uint64_t sub_20F8F2ED0(uint64_t a1, void **a2, uint64_t a3, _DWORD **a4)
{
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  unint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int **v23;

  v20 = (unsigned int **)(a3 + 24);
  v23 = (unsigned int **)(a3 + 48);
  v22 = (unsigned int **)(a3 + 72);
  v21 = (unsigned int **)(a3 + 96);
  v8 = (unsigned int **)(a3 + 120);
  v9 = (unsigned int **)(a3 + 144);
  v10 = (unsigned int **)(a3 + 168);
  v11 = (unsigned int **)(a3 + 192);
  v12 = (unsigned int **)(a3 + 216);
  v13 = 9 * ((unint64_t)((char *)a4[4] - (char *)a4[3]) >> 3)
      + 6
      * (((unint64_t)((char *)a4[7] - (char *)a4[6]) >> 3)
       + ((unint64_t)((char *)a4[1] - (char *)*a4) >> 3)
       + ((unint64_t)((char *)a4[10] - (char *)a4[9]) >> 3))
      + ((unint64_t)((char *)a4[16] - (char *)a4[15]) >> 3)
      + (((unint64_t)((char *)a4[19] - (char *)a4[18]) >> 1) & 0xFFFFFFFC)
      + (((unint64_t)((char *)a4[22] - (char *)a4[21]) >> 1) & 0xFFFFFFFC)
      + 3
      * (((unint64_t)((char *)a4[25] - (char *)a4[24]) >> 3)
       + ((unint64_t)((char *)a4[13] - (char *)a4[12]) >> 3)
       + ((unint64_t)((char *)a4[28] - (char *)a4[27]) >> 3));
  v14 = a2[1];
  v15 = 9 * ((*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3)
      + 6
      * (((*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 3)
       + ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
       + ((*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 3))
      + ((*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 3)
      + (((*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 1) & 0xFFFFFFFC)
      + (((*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 1) & 0xFFFFFFFC)
      + 3
      * (((*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 3)
       + ((*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 3)
       + ((*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 3));
  v16 = v13 * (unint64_t)v15;
  *((_DWORD *)a2 + 4) = v15;
  *((_DWORD *)a2 + 5) = v13;
  if ((unint64_t)v14 < v16)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v17 = (8 * v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v17 >> 3);
    *a2 = operator new(v17, (std::align_val_t)0x20uLL);
    v15 = *((_DWORD *)a2 + 4);
    v13 = *((_DWORD *)a2 + 5);
  }
  v18 = v13 * v15;
  if (v18)
    bzero(*a2, 8 * v18);
  sub_20F8F3BC4(a1 + 1296, (uint64_t *)a2, v12, *a4, a4[1], 0);
  sub_20F8F4010(a1 + 2736, (uint64_t *)a2, v12, a4[3], a4[4], 0);
  sub_20F8F3BC4(a1 + 4176, (uint64_t *)a2, v12, a4[6], a4[7], 0);
  sub_20F8F3BC4(a1 + 5616, (uint64_t *)a2, v12, a4[9], a4[10], 0);
  sub_20F8F4558(a1 + 7056, (uint64_t *)a2, v12, a4[12], a4[13], 0);
  sub_20F8F48A0(a1 + 8496, (uint64_t *)a2, v12, a4[15], a4[16], 0);
  sub_20F8F4B44(a1 + 9936, (uint64_t *)a2, v12, a4[18], a4[19], 0);
  sub_20F8F4B44(a1 + 11376, (uint64_t *)a2, v12, a4[21], a4[22], 0);
  sub_20F8F4558(a1 + 12816, (uint64_t *)a2, v12, a4[24], a4[25], 0);
  sub_20F8F4558(a1 + 14256, (uint64_t *)a2, v12, a4[27], a4[28], 0);
  sub_20F8F3BC4(a1 + 1152, (uint64_t *)a2, v11, *a4, a4[1], 0);
  sub_20F8F4010(a1 + 2592, (uint64_t *)a2, v11, a4[3], a4[4], 0);
  sub_20F8F3BC4(a1 + 4032, (uint64_t *)a2, v11, a4[6], a4[7], 0);
  sub_20F8F3BC4(a1 + 5472, (uint64_t *)a2, v11, a4[9], a4[10], 0);
  sub_20F8F4558(a1 + 6912, (uint64_t *)a2, v11, a4[12], a4[13], 0);
  sub_20F8F48A0(a1 + 8352, (uint64_t *)a2, v11, a4[15], a4[16], 0);
  sub_20F8F4B44(a1 + 9792, (uint64_t *)a2, v11, a4[18], a4[19], 0);
  sub_20F8F4B44(a1 + 11232, (uint64_t *)a2, v11, a4[21], a4[22], 0);
  sub_20F8F4558(a1 + 12672, (uint64_t *)a2, v11, a4[24], a4[25], 0);
  sub_20F8F4558(a1 + 14112, (uint64_t *)a2, v11, a4[27], a4[28], 0);
  sub_20F8F4EE0(a1 + 1008, (uint64_t)a2, v10, *a4, a4[1], 0);
  sub_20F8F52EC(a1 + 2448, (uint64_t)a2, v10, a4[3], a4[4], 0);
  sub_20F8F4EE0(a1 + 3888, (uint64_t)a2, v10, a4[6], a4[7], 0);
  sub_20F8F4EE0(a1 + 5328, (uint64_t)a2, v10, a4[9], a4[10], 0);
  sub_20F8F582C(a1 + 6768, (uint64_t)a2, v10, a4[12], a4[13], 0);
  sub_20F8F5B60(a1 + 8208, (uint64_t *)a2, v10, a4[15], a4[16], 0);
  sub_20F8F5E00(a1 + 9648, (uint64_t)a2, v10, a4[18], a4[19], 0);
  sub_20F8F5E00(a1 + 11088, (uint64_t)a2, v10, a4[21], a4[22], 0);
  sub_20F8F582C(a1 + 12528, (uint64_t)a2, v10, a4[24], a4[25], 0);
  sub_20F8F582C(a1 + 13968, (uint64_t)a2, v10, a4[27], a4[28], 0);
  sub_20F8F4EE0(a1 + 864, (uint64_t)a2, v9, *a4, a4[1], 0);
  sub_20F8F52EC(a1 + 2304, (uint64_t)a2, v9, a4[3], a4[4], 0);
  sub_20F8F4EE0(a1 + 3744, (uint64_t)a2, v9, a4[6], a4[7], 0);
  sub_20F8F4EE0(a1 + 5184, (uint64_t)a2, v9, a4[9], a4[10], 0);
  sub_20F8F582C(a1 + 6624, (uint64_t)a2, v9, a4[12], a4[13], 0);
  sub_20F8F5B60(a1 + 8064, (uint64_t *)a2, v9, a4[15], a4[16], 0);
  sub_20F8F5E00(a1 + 9504, (uint64_t)a2, v9, a4[18], a4[19], 0);
  sub_20F8F5E00(a1 + 10944, (uint64_t)a2, v9, a4[21], a4[22], 0);
  sub_20F8F582C(a1 + 12384, (uint64_t)a2, v9, a4[24], a4[25], 0);
  sub_20F8F582C(a1 + 13824, (uint64_t)a2, v9, a4[27], a4[28], 0);
  sub_20F8F6120(a1 + 720, (uint64_t *)a2, v8, *a4, a4[1], 0);
  sub_20F8F6448(a1 + 2160, (uint64_t *)a2, v8, a4[3], a4[4], 0);
  sub_20F8F6120(a1 + 3600, (uint64_t *)a2, v8, a4[6], a4[7], 0);
  sub_20F8F6120(a1 + 5040, (uint64_t *)a2, v8, a4[9], a4[10], 0);
  sub_20F8F67D8(a1 + 6480, (uint64_t *)a2, v8, a4[12], a4[13], 0);
  sub_20F8F6A9C(a1 + 7920, (uint64_t)a2, v8, a4[15], a4[16], 0);
  sub_20F8F6D00(a1 + 9360, (uint64_t *)a2, v8, a4[18], a4[19], 0);
  sub_20F8F6D00(a1 + 10800, (uint64_t *)a2, v8, a4[21], a4[22], 0);
  sub_20F8F67D8(a1 + 12240, (uint64_t *)a2, v8, a4[24], a4[25], 0);
  sub_20F8F67D8(a1 + 13680, (uint64_t *)a2, v8, a4[27], a4[28], 0);
  sub_20F8F3BC4(a1 + 576, (uint64_t *)a2, v21, *a4, a4[1], 0);
  sub_20F8F4010(a1 + 2016, (uint64_t *)a2, v21, a4[3], a4[4], 0);
  sub_20F8F3BC4(a1 + 3456, (uint64_t *)a2, v21, a4[6], a4[7], 0);
  sub_20F8F3BC4(a1 + 4896, (uint64_t *)a2, v21, a4[9], a4[10], 0);
  sub_20F8F4558(a1 + 6336, (uint64_t *)a2, v21, a4[12], a4[13], 0);
  sub_20F8F48A0(a1 + 7776, (uint64_t *)a2, v21, a4[15], a4[16], 0);
  sub_20F8F4B44(a1 + 9216, (uint64_t *)a2, v21, a4[18], a4[19], 0);
  sub_20F8F4B44(a1 + 10656, (uint64_t *)a2, v21, a4[21], a4[22], 0);
  sub_20F8F4558(a1 + 12096, (uint64_t *)a2, v21, a4[24], a4[25], 0);
  sub_20F8F4558(a1 + 13536, (uint64_t *)a2, v21, a4[27], a4[28], 0);
  sub_20F8F6FEC(a1 + 432, (uint64_t)a2, v22, *a4, a4[1], 0);
  sub_20F8F7578(a1 + 1872, (uint64_t)a2, v22, a4[3], a4[4], 0);
  sub_20F8F6FEC(a1 + 3312, (uint64_t)a2, v22, a4[6], a4[7], 0);
  sub_20F8F6FEC(a1 + 4752, (uint64_t)a2, v22, a4[9], a4[10], 0);
  sub_20F8F7CC8(a1 + 6192, (uint64_t)a2, v22, a4[12], a4[13], 0);
  sub_20F8F8084(a1 + 7632, (uint64_t *)a2, v22, a4[15], a4[16], 0);
  sub_20F8F8358(a1 + 9072, (uint64_t)a2, v22, a4[18], a4[19], 0);
  sub_20F8F8358(a1 + 10512, (uint64_t)a2, v22, a4[21], a4[22], 0);
  sub_20F8F7CC8(a1 + 11952, (uint64_t)a2, v22, a4[24], a4[25], 0);
  sub_20F8F7CC8(a1 + 13392, (uint64_t)a2, v22, a4[27], a4[28], 0);
  sub_20F8F6FEC(a1 + 288, (uint64_t)a2, v23, *a4, a4[1], 0);
  sub_20F8F7578(a1 + 1728, (uint64_t)a2, v23, a4[3], a4[4], 0);
  sub_20F8F6FEC(a1 + 3168, (uint64_t)a2, v23, a4[6], a4[7], 0);
  sub_20F8F6FEC(a1 + 4608, (uint64_t)a2, v23, a4[9], a4[10], 0);
  sub_20F8F7CC8(a1 + 6048, (uint64_t)a2, v23, a4[12], a4[13], 0);
  sub_20F8F8084(a1 + 7488, (uint64_t *)a2, v23, a4[15], a4[16], 0);
  sub_20F8F8358(a1 + 8928, (uint64_t)a2, v23, a4[18], a4[19], 0);
  sub_20F8F8358(a1 + 10368, (uint64_t)a2, v23, a4[21], a4[22], 0);
  sub_20F8F7CC8(a1 + 11808, (uint64_t)a2, v23, a4[24], a4[25], 0);
  sub_20F8F7CC8(a1 + 13248, (uint64_t)a2, v23, a4[27], a4[28], 0);
  sub_20F8F8750(a1 + 144, (uint64_t *)a2, v20, *a4, a4[1], 0);
  sub_20F8F8F18(a1 + 1584, (uint64_t *)a2, v20, a4[3], a4[4], 0);
  sub_20F8F8750(a1 + 3024, (uint64_t *)a2, v20, a4[6], a4[7], 0);
  sub_20F8F8750(a1 + 4464, (uint64_t *)a2, v20, a4[9], a4[10], 0);
  sub_20F8F9D14(a1 + 5904, (uint64_t *)a2, v20, a4[12], a4[13], 0);
  sub_20F8FA1C8(a1 + 7344, (uint64_t *)a2, v20, a4[15], a4[16], 0);
  sub_20F8FA4DC(a1 + 8784, (uint64_t *)a2, v20, a4[18], a4[19], 0);
  sub_20F8FA4DC(a1 + 10224, (uint64_t *)a2, v20, a4[21], a4[22], 0);
  sub_20F8F9D14(a1 + 11664, (uint64_t *)a2, v20, a4[24], a4[25], 0);
  sub_20F8F9D14(a1 + 13104, (uint64_t *)a2, v20, a4[27], a4[28], 0);
  sub_20F8F6FEC(a1, (uint64_t)a2, (unsigned int **)a3, *a4, a4[1], 0);
  sub_20F8F7578(a1 + 1440, (uint64_t)a2, (unsigned int **)a3, a4[3], a4[4], 0);
  sub_20F8F6FEC(a1 + 2880, (uint64_t)a2, (unsigned int **)a3, a4[6], a4[7], 0);
  sub_20F8F6FEC(a1 + 4320, (uint64_t)a2, (unsigned int **)a3, a4[9], a4[10], 0);
  sub_20F8F7CC8(a1 + 5760, (uint64_t)a2, (unsigned int **)a3, a4[12], a4[13], 0);
  sub_20F8F8084(a1 + 7200, (uint64_t *)a2, (unsigned int **)a3, a4[15], a4[16], 0);
  sub_20F8F8358(a1 + 8640, (uint64_t)a2, (unsigned int **)a3, a4[18], a4[19], 0);
  sub_20F8F8358(a1 + 10080, (uint64_t)a2, (unsigned int **)a3, a4[21], a4[22], 0);
  sub_20F8F7CC8(a1 + 11520, (uint64_t)a2, (unsigned int **)a3, a4[24], a4[25], 0);
  return sub_20F8F7CC8(a1 + 12960, (uint64_t)a2, (unsigned int **)a3, a4[27], a4[28], 0);
}

uint64_t sub_20F8F3BC4(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t *v36;
  int64x2_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  __int128 v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int8 *v52;
  int64x2_t *v53;
  __int8 *v54;
  int64x2_t *v55;
  __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  int8x16_t v69;
  __int128 v70;
  int8x16_t v71;
  __int128 v72;
  int8x16_t v73;
  __int128 v74;
  unint64_t v75;
  int8x16_t v76;
  int8x16_t v77;
  unint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int8x16_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x16_t *v90;
  uint64_t v91;
  int8x16_t *v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v98;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              if (v20 >= v21)
              {
                v40 = *(int64x2_t *)v22;
                v41 = (int64x2_t *)(v24 + 8 * (v21 + (_DWORD)v23 * v20));
                v42 = *(_OWORD *)(v22 + 24);
                v43 = *(_QWORD *)(v22 + 40);
                v44 = *(int64x2_t *)(v22 + 48);
                v45 = *(_QWORD *)(v22 + 64);
                v46 = *(_OWORD *)(v22 + 72);
                v47 = *(_QWORD *)(v22 + 88);
                v48 = *(int64x2_t *)(v22 + 96);
                v49 = *(_QWORD *)(v22 + 112);
                v50 = *(_OWORD *)(v22 + 120);
                v51 = *(_QWORD *)(v22 + 136);
                v41[1].i64[0] = *(_QWORD *)(v22 + 16);
                *v41 = v40;
                v52 = &v41->i8[8 * v23];
                *((_QWORD *)v52 + 2) = v43;
                *(_OWORD *)v52 = v42;
                v53 = &v41[v23];
                v53[1].i64[0] = v45;
                *v53 = v44;
                v54 = &v41->i8[24 * v23];
                *((_QWORD *)v54 + 2) = v47;
                *(_OWORD *)v54 = v46;
                v55 = &v41[2 * v23];
                v55[1].i64[0] = v49;
                *v55 = v48;
                v56 = &v41->i8[40 * v23];
                *((_QWORD *)v56 + 2) = v51;
                v9 = v18;
                *(_OWORD *)v56 = v50;
              }
              else
              {
                v25 = (int64x2_t *)(v24 + 8 * (v20 + (_DWORD)v23 * v21));
                v26.i64[0] = *(_QWORD *)(v22 + 16);
                v27 = *(int64x2_t *)(v22 + 24);
                v28.i64[0] = *(_QWORD *)(v22 + 64);
                v29 = *(int64x2_t *)(v22 + 48);
                v30 = *(int64x2_t *)(v22 + 72);
                v31.i64[0] = *(_QWORD *)(v22 + 112);
                v32 = *(int64x2_t *)(v22 + 96);
                v33 = *(int64x2_t *)(v22 + 120);
                v34 = vzip1q_s64(*(int64x2_t *)v22, v27);
                v35 = vzip2q_s64(*(int64x2_t *)v22, v27);
                v26.i64[1] = *(_QWORD *)(v22 + 40);
                v28.i64[1] = *(_QWORD *)(v22 + 88);
                v31.i64[1] = *(_QWORD *)(v22 + 136);
                v25[1] = vzip1q_s64(v29, v30);
                v25[2] = vzip1q_s64(v32, v33);
                *v25 = v34;
                v36 = (int64x2_t *)((char *)v25 + 8 * v23);
                v36[1] = vzip1q_s64(vdupq_laneq_s64(v29, 1), vdupq_laneq_s64(v30, 1));
                v36[2] = vzip2q_s64(v32, v33);
                *v36 = v35;
                v37 = &v25[v23];
                v37[1] = v28;
                v37[2] = v31;
                *v37 = v26;
                v9 = v18;
              }
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v38 = v8 + 1;
                while (v38 != v11)
                {
                  ++v9;
                  v39 = *v38++;
                  v19 = v39;
                  if (v39 != -1)
                  {
                    v8 = v38 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v57 = *(_QWORD *)(result + 88);
        v58 = (*(_DWORD *)(result + 112) * *a4);
        v59 = (uint64_t *)(v57 + 8 * v58);
        v60 = *(_DWORD *)(result + 8);
        v61 = v58 + v60;
        v62 = (uint64_t *)(v57 + 8 * v61);
        if (v60)
        {
          if (*v59 == -1)
          {
            v63 = 8 * v61 - 8 * v58 - 8;
            v64 = 1;
            v65 = v59;
            while (1)
            {
              v60 = v64;
              if (!v63)
                break;
              v59 = v65 + 1;
              v66 = v65[1];
              ++v64;
              v63 -= 8;
              ++v65;
              if (v66 != -1)
                goto LABEL_42;
            }
            v59 = v62;
          }
          else
          {
            v60 = 0;
          }
        }
LABEL_42:
        v67 = *a3;
        v68 = a3[1];
        while (v67 != v68 && v59 != v62)
        {
          v94 = *v67;
          if (*v67 > v60)
          {
            v95 = v59 + 1;
            while (v95 != v62)
            {
              ++v60;
              v96 = *v95++;
              if (v96 != -1 && v94 <= v60)
              {
                v59 = v95 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v94 == v60)
          {
            v98 = *(_QWORD *)(result + 16) + 8 * *v59;
            if (v98 == *a2)
            {
              v86 = *(int8x16_t *)(v98 + 112);
              v81 = *(int8x16_t *)(v98 + 128);
              v80 = *(int8x16_t *)(v98 + 80);
              v73 = *(int8x16_t *)(v98 + 96);
              v71 = *(int8x16_t *)(v98 + 48);
              v79 = *(int8x16_t *)(v98 + 64);
              v76 = *(int8x16_t *)(v98 + 16);
              v77 = *(int8x16_t *)(v98 + 32);
              v83 = vextq_s8(v81, v81, 8uLL).u64[0];
              *(_QWORD *)&v74 = vextq_s8(v86, v86, 8uLL).u64[0];
              v82 = vextq_s8(v73, v73, 8uLL).u64[0];
              v69 = *(int8x16_t *)v98;
              v78 = vextq_s8(v80, v80, 8uLL).u64[0];
              *(_QWORD *)&v72 = vextq_s8(v79, v79, 8uLL).u64[0];
              v84 = vextq_s8(v71, v71, 8uLL).u64[0];
              v75 = vextq_s8(v77, v77, 8uLL).u64[0];
              *(_QWORD *)&v70 = vextq_s8(v76, v76, 8uLL).u64[0];
              v85 = vextq_s8(v69, v69, 8uLL).u64[0];
            }
            else
            {
              v69 = *(int8x16_t *)v98;
              v70 = *(_OWORD *)(v98 + 24);
              v71 = *(int8x16_t *)(v98 + 48);
              v72 = *(_OWORD *)(v98 + 72);
              v73 = *(int8x16_t *)(v98 + 96);
              v74 = *(_OWORD *)(v98 + 120);
              v75 = *(_QWORD *)(v98 + 40);
              v76.i64[0] = *(_QWORD *)(v98 + 16);
              v77.i64[0] = *(_QWORD *)(v98 + 32);
              v78 = *(_QWORD *)(v98 + 88);
              v79.i64[0] = *(_QWORD *)(v98 + 64);
              v80.i64[0] = *(_QWORD *)(v98 + 80);
              v81.i64[0] = *(_QWORD *)(v98 + 128);
              v82 = vextq_s8(v73, v73, 8uLL).u64[0];
              v83 = *(_QWORD *)(v98 + 136);
              v84 = vextq_s8(v71, v71, 8uLL).u64[0];
              v85 = vextq_s8(v69, v69, 8uLL).u64[0];
              v86.i64[0] = *(_QWORD *)(v98 + 112);
            }
            v87 = *((unsigned int *)a2 + 4);
            v88 = *a2 + 8 * (v67[1] + (_DWORD)v87 * a4[1]);
            v73.i64[1] = v82;
            v69.i64[1] = v85;
            *((_QWORD *)&v70 + 1) = v77.i64[0];
            v71.i64[1] = v84;
            *((_QWORD *)&v72 + 1) = v80.i64[0];
            *((_QWORD *)&v74 + 1) = v81.i64[0];
            *(_QWORD *)(v88 + 16) = v76.i64[0];
            *(int8x16_t *)v88 = v69;
            v89 = v88 + 8 * v87;
            *(_QWORD *)(v89 + 16) = v75;
            *(_OWORD *)v89 = v70;
            v90 = (int8x16_t *)(v88 + 16 * v87);
            v90[1].i64[0] = v79.i64[0];
            *v90 = v71;
            v91 = v88 + 24 * v87;
            *(_QWORD *)(v91 + 16) = v78;
            *(_OWORD *)v91 = v72;
            v92 = (int8x16_t *)(v88 + 32 * v87);
            v92[1].i64[0] = v86.i64[0];
            *v92 = v73;
            v93 = v88 + 40 * v87;
            *(_QWORD *)(v93 + 16) = v83;
            *(_OWORD *)v93 = v74;
            v60 = v94;
          }
          v67 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F4010(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t v37;
  __int128 v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  int64x2_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t *v46;
  __int128 v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  int64x2_t v61;
  uint64_t v62;
  __int8 *v63;
  int64x2_t *v64;
  __int8 *v65;
  int64x2_t *v66;
  __int8 *v67;
  int64x2_t *v68;
  __int8 *v69;
  int64x2_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  int8x16_t v83;
  __int128 v84;
  int8x16_t v85;
  __int128 v86;
  int8x16_t v87;
  __int128 v88;
  int8x16_t v89;
  __int128 v90;
  int8x16_t v91;
  unint64_t v92;
  int8x16_t v93;
  int8x16_t v94;
  unint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  unint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int8x16_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x16_t *v112;
  uint64_t v113;
  int8x16_t *v114;
  uint64_t v115;
  int8x16_t *v116;
  uint64_t v117;
  int8x16_t *v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v123;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              if (v20 >= v21)
              {
                v45 = *(int64x2_t *)v22;
                v46 = (int64x2_t *)(v24 + 8 * (v21 + (_DWORD)v23 * v20));
                v47 = *(_OWORD *)(v22 + 24);
                v48 = *(_QWORD *)(v22 + 40);
                v49 = *(int64x2_t *)(v22 + 48);
                v50 = *(_QWORD *)(v22 + 64);
                v51 = *(_OWORD *)(v22 + 72);
                v52 = *(_QWORD *)(v22 + 88);
                v53 = *(int64x2_t *)(v22 + 96);
                v54 = *(_QWORD *)(v22 + 112);
                v55 = *(_OWORD *)(v22 + 120);
                v56 = *(_QWORD *)(v22 + 136);
                v57 = *(int64x2_t *)(v22 + 144);
                v58 = *(_QWORD *)(v22 + 160);
                v59 = *(_OWORD *)(v22 + 168);
                v60 = *(_QWORD *)(v22 + 184);
                v61 = *(int64x2_t *)(v22 + 192);
                v62 = *(_QWORD *)(v22 + 208);
                v46[1].i64[0] = *(_QWORD *)(v22 + 16);
                *v46 = v45;
                v63 = &v46->i8[8 * v23];
                *((_QWORD *)v63 + 2) = v48;
                *(_OWORD *)v63 = v47;
                v64 = &v46[v23];
                v64[1].i64[0] = v50;
                *v64 = v49;
                v65 = &v46->i8[24 * v23];
                *((_QWORD *)v65 + 2) = v52;
                *(_OWORD *)v65 = v51;
                v66 = &v46[2 * v23];
                v66[1].i64[0] = v54;
                *v66 = v53;
                v67 = &v46->i8[40 * v23];
                *((_QWORD *)v67 + 2) = v56;
                *(_OWORD *)v67 = v55;
                v68 = &v46[3 * v23];
                v68[1].i64[0] = v58;
                *v68 = v57;
                v69 = &v46->i8[56 * v23];
                *((_QWORD *)v69 + 2) = v60;
                *(_OWORD *)v69 = v59;
                v70 = &v46[4 * v23];
                v70[1].i64[0] = v62;
                v9 = v18;
                *v70 = v61;
              }
              else
              {
                v25.i64[0] = *(_QWORD *)(v22 + 16);
                v26 = (int64x2_t *)(v24 + 8 * (v20 + (_DWORD)v23 * v21));
                v27 = *(int64x2_t *)(v22 + 24);
                v28.i64[0] = *(_QWORD *)(v22 + 64);
                v29 = *(int64x2_t *)(v22 + 48);
                v30 = *(int64x2_t *)(v22 + 72);
                v31.i64[0] = *(_QWORD *)(v22 + 112);
                v32 = *(int64x2_t *)(v22 + 96);
                v33 = *(int64x2_t *)(v22 + 120);
                v34.i64[0] = *(_QWORD *)(v22 + 160);
                v35 = *(int64x2_t *)(v22 + 144);
                v36 = *(int64x2_t *)(v22 + 168);
                v37 = *(_QWORD *)(v22 + 208);
                v38 = *(_OWORD *)(v22 + 192);
                v39 = vzip1q_s64(*(int64x2_t *)v22, v27);
                v40 = vzip2q_s64(*(int64x2_t *)v22, v27);
                v25.i64[1] = *(_QWORD *)(v22 + 40);
                v28.i64[1] = *(_QWORD *)(v22 + 88);
                v31.i64[1] = *(_QWORD *)(v22 + 136);
                v34.i64[1] = *(_QWORD *)(v22 + 184);
                v26[2] = vzip1q_s64(v32, v33);
                v26[3] = vzip1q_s64(v35, v36);
                v26[4].i64[0] = v38;
                *v26 = v39;
                v26[1] = vzip1q_s64(v29, v30);
                v41 = (int64x2_t *)((char *)v26 + 8 * v23);
                v41[2] = vzip2q_s64(v32, v33);
                v41[3] = vzip2q_s64(v35, v36);
                *v41 = v40;
                v41[1] = vzip2q_s64(v29, v30);
                v41[4].i64[0] = *((_QWORD *)&v38 + 1);
                v42 = &v26[v23];
                v42[4].i64[0] = v37;
                v42[2] = v31;
                v42[3] = v34;
                v9 = v18;
                *v42 = v25;
                v42[1] = v28;
              }
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v43 = v8 + 1;
                while (v43 != v11)
                {
                  ++v9;
                  v44 = *v43++;
                  v19 = v44;
                  if (v44 != -1)
                  {
                    v8 = v43 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v71 = *(_QWORD *)(result + 88);
        v72 = (*(_DWORD *)(result + 112) * *a4);
        v73 = (uint64_t *)(v71 + 8 * v72);
        v74 = *(_DWORD *)(result + 8);
        v75 = v72 + v74;
        v76 = (uint64_t *)(v71 + 8 * v75);
        if (v74)
        {
          if (*v73 == -1)
          {
            v77 = 8 * v75 - 8 * v72 - 8;
            v78 = 1;
            v79 = v73;
            while (1)
            {
              v74 = v78;
              if (!v77)
                break;
              v73 = v79 + 1;
              v80 = v79[1];
              ++v78;
              v77 -= 8;
              ++v79;
              if (v80 != -1)
                goto LABEL_42;
            }
            v73 = v76;
          }
          else
          {
            v74 = 0;
          }
        }
LABEL_42:
        v81 = *a3;
        v82 = a3[1];
        while (v81 != v82 && v73 != v76)
        {
          v119 = *v81;
          if (*v81 > v74)
          {
            v120 = v73 + 1;
            while (v120 != v76)
            {
              ++v74;
              v121 = *v120++;
              if (v121 != -1 && v119 <= v74)
              {
                v73 = v120 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v119 == v74)
          {
            v123 = *(_QWORD *)(result + 16) + 8 * *v73;
            if (v123 == *a2)
            {
              v100 = *(int8x16_t *)(v123 + 176);
              v91 = *(int8x16_t *)(v123 + 192);
              v89 = *(int8x16_t *)(v123 + 144);
              v106 = *(int8x16_t *)(v123 + 160);
              v101 = *(int8x16_t *)(v123 + 112);
              v99 = *(int8x16_t *)(v123 + 128);
              v97 = *(int8x16_t *)(v123 + 80);
              v87 = *(int8x16_t *)(v123 + 96);
              v85 = *(int8x16_t *)(v123 + 48);
              v96 = *(int8x16_t *)(v123 + 64);
              v102 = vextq_s8(v91, v91, 8uLL).u64[0];
              v103 = vextq_s8(v100, v100, 8uLL).u64[0];
              *(_QWORD *)&v90 = vextq_s8(v106, v106, 8uLL).u64[0];
              v104 = vextq_s8(v89, v89, 8uLL).u64[0];
              v98 = vextq_s8(v99, v99, 8uLL).u64[0];
              *(_QWORD *)&v88 = vextq_s8(v101, v101, 8uLL).u64[0];
              v105 = vextq_s8(v87, v87, 8uLL).u64[0];
              v95 = vextq_s8(v97, v97, 8uLL).u64[0];
              v93 = *(int8x16_t *)(v123 + 16);
              v94 = *(int8x16_t *)(v123 + 32);
              *(_QWORD *)&v86 = vextq_s8(v96, v96, 8uLL).u64[0];
              v107 = vextq_s8(v85, v85, 8uLL).u64[0];
              v92 = vextq_s8(v94, v94, 8uLL).u64[0];
              v83 = *(int8x16_t *)v123;
              *(_QWORD *)&v84 = vextq_s8(v93, v93, 8uLL).u64[0];
            }
            else
            {
              v83 = *(int8x16_t *)v123;
              v84 = *(_OWORD *)(v123 + 24);
              v85 = *(int8x16_t *)(v123 + 48);
              v86 = *(_OWORD *)(v123 + 72);
              v87 = *(int8x16_t *)(v123 + 96);
              v88 = *(_OWORD *)(v123 + 120);
              v89 = *(int8x16_t *)(v123 + 144);
              v90 = *(_OWORD *)(v123 + 168);
              v91 = *(int8x16_t *)(v123 + 192);
              v92 = *(_QWORD *)(v123 + 40);
              v93.i64[0] = *(_QWORD *)(v123 + 16);
              v94.i64[0] = *(_QWORD *)(v123 + 32);
              v95 = *(_QWORD *)(v123 + 88);
              v96.i64[0] = *(_QWORD *)(v123 + 64);
              v97.i64[0] = *(_QWORD *)(v123 + 80);
              v98 = *(_QWORD *)(v123 + 136);
              v99.i64[0] = *(_QWORD *)(v123 + 128);
              v100.i64[0] = *(_QWORD *)(v123 + 176);
              v101.i64[0] = *(_QWORD *)(v123 + 112);
              v102 = vextq_s8(v91, v91, 8uLL).u64[0];
              v103 = *(_QWORD *)(v123 + 184);
              v104 = vextq_s8(v89, v89, 8uLL).u64[0];
              v105 = vextq_s8(v87, v87, 8uLL).u64[0];
              v106.i64[0] = *(_QWORD *)(v123 + 160);
              v107 = vextq_s8(v85, v85, 8uLL).u64[0];
            }
            v108 = *(_QWORD *)(v123 + 208);
            v109 = *((unsigned int *)a2 + 4);
            v91.i64[1] = v102;
            v87.i64[1] = v105;
            v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
            *((_QWORD *)&v84 + 1) = v94.i64[0];
            v85.i64[1] = v107;
            *((_QWORD *)&v86 + 1) = v97.i64[0];
            *((_QWORD *)&v88 + 1) = v99.i64[0];
            v89.i64[1] = v104;
            v110 = *a2 + 8 * (v81[1] + (_DWORD)v109 * a4[1]);
            *((_QWORD *)&v90 + 1) = v100.i64[0];
            *(_QWORD *)(v110 + 16) = v93.i64[0];
            *(int8x16_t *)v110 = v83;
            v111 = v110 + 8 * v109;
            *(_QWORD *)(v111 + 16) = v92;
            *(_OWORD *)v111 = v84;
            v112 = (int8x16_t *)(v110 + 16 * v109);
            v112[1].i64[0] = v96.i64[0];
            *v112 = v85;
            v113 = v110 + 24 * v109;
            *(_QWORD *)(v113 + 16) = v95;
            *(_OWORD *)v113 = v86;
            v114 = (int8x16_t *)(v110 + 32 * v109);
            v114[1].i64[0] = v101.i64[0];
            *v114 = v87;
            v115 = v110 + 40 * v109;
            *(_QWORD *)(v115 + 16) = v98;
            *(_OWORD *)v115 = v88;
            v116 = (int8x16_t *)(v110 + 48 * v109);
            v116[1].i64[0] = v106.i64[0];
            *v116 = v89;
            v117 = v110 + 56 * v109;
            *(_QWORD *)(v117 + 16) = v103;
            *(_OWORD *)v117 = v90;
            v118 = (int8x16_t *)(v110 + (v109 << 6));
            v118[1].i64[0] = v108;
            *v118 = v91;
            v74 = v119;
          }
          v81 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F4558(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t *v26;
  int8x16_t v27;
  unint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  __int128 v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int64x2_t *v37;
  int64x2_t v38;
  __int128 v39;
  uint64_t v40;
  __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  int8x16_t v55;
  __int128 v56;
  int8x16_t v57;
  unint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t *v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v71;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 == a5)
        return result;
      while (1)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (!v9)
          goto LABEL_15;
        if (*v8 == -1)
          break;
        v9 = 0;
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
          goto LABEL_16;
LABEL_5:
        a4 += 2;
        if (a4 == a5)
          return result;
      }
      v14 = 8 * v10 - 8 * v7 - 8;
      v15 = 1;
      v16 = v8;
      while (1)
      {
        v9 = v15;
        if (!v14)
          break;
        v8 = v16 + 1;
        v17 = v16[1];
        ++v15;
        v14 -= 8;
        ++v16;
        if (v17 != -1)
          goto LABEL_15;
      }
      v8 = v11;
LABEL_15:
      v12 = *a3;
      v13 = a3[1];
      if (*a3 != v13)
      {
LABEL_16:
        while (v8 != v11)
        {
          v18 = *v12;
          if (*v12 == v9)
          {
            v19 = *v8;
LABEL_19:
            v20 = a4[1];
            v21 = v12[1];
            v22 = *(_QWORD *)(result + 16) + 8 * v19;
            v23 = *((unsigned int *)a2 + 4);
            v24 = *a2;
            if (v20 >= v21)
            {
              v25 = v21 + (_DWORD)v23 * v20;
              v37 = (int64x2_t *)(v24 + 8 * v25);
              v38 = *(int64x2_t *)v22;
              v39 = *(_OWORD *)(v22 + 24);
              v40 = *(_QWORD *)(v22 + 40);
              v30 = *(_QWORD *)(v22 + 64);
              v27 = *(int8x16_t *)(v22 + 48);
              v28 = vextq_s8(v27, v27, 8uLL).u64[0];
              v37[1].i64[0] = *(_QWORD *)(v22 + 16);
              *v37 = v38;
              v41 = &v37->i8[8 * v23];
              *((_QWORD *)v41 + 2) = v40;
              *(_OWORD *)v41 = v39;
            }
            else
            {
              v25 = v20 + (_DWORD)v23 * v21;
              v26 = (int64x2_t *)(v24 + 8 * v25);
              v27.i64[0] = *(_QWORD *)(v22 + 16);
              v28 = *(_QWORD *)(v22 + 40);
              v29 = *(int64x2_t *)(v22 + 24);
              v30 = *(_QWORD *)(v22 + 64);
              v31 = *(_OWORD *)(v22 + 48);
              v32 = vzip1q_s64(*(int64x2_t *)v22, v29);
              v33 = vzip2q_s64(*(int64x2_t *)v22, v29);
              v26[1].i64[0] = v31;
              *v26 = v32;
              v34 = (int64x2_t *)((char *)v26 + 8 * v23);
              *v34 = v33;
              v34[1].i64[0] = *((_QWORD *)&v31 + 1);
            }
            v42 = v24 + 8 * v25 + 16 * v23;
            *(_QWORD *)(v42 + 16) = v30;
            v27.i64[1] = v28;
            *(int8x16_t *)v42 = v27;
            v9 = v18;
          }
          else
          {
LABEL_21:
            if (v18 >= v9)
            {
              v35 = v8 + 1;
              while (v35 != v11)
              {
                ++v9;
                v36 = *v35++;
                v19 = v36;
                if (v36 != -1)
                {
                  v8 = v35 - 1;
                  if (v18 != v9)
                    goto LABEL_21;
                  goto LABEL_19;
                }
              }
              goto LABEL_5;
            }
          }
          if (v8 != v11)
          {
            v12 += 2;
            if (v12 != v13)
              continue;
          }
          goto LABEL_5;
        }
      }
      goto LABEL_5;
    }
    for (; a4 != a5; a4 += 2)
    {
      v43 = *(_QWORD *)(result + 88);
      v44 = (*(_DWORD *)(result + 112) * *a4);
      v45 = (uint64_t *)(v43 + 8 * v44);
      v46 = *(_DWORD *)(result + 8);
      v47 = v44 + v46;
      v48 = (uint64_t *)(v43 + 8 * v47);
      if (v46)
      {
        if (*v45 == -1)
        {
          v49 = 8 * v47 - 8 * v44 - 8;
          v50 = 1;
          v51 = v45;
          while (1)
          {
            v46 = v50;
            if (!v49)
              break;
            v45 = v51 + 1;
            v52 = v51[1];
            ++v50;
            v49 -= 8;
            ++v51;
            if (v52 != -1)
              goto LABEL_43;
          }
          v45 = v48;
        }
        else
        {
          v46 = 0;
        }
      }
LABEL_43:
      v53 = *a3;
      v54 = a3[1];
      while (v53 != v54 && v45 != v48)
      {
        v67 = *v53;
        if (*v53 > v46)
        {
          v68 = v45 + 1;
          while (v68 != v48)
          {
            ++v46;
            v69 = *v68++;
            if (v69 != -1 && v67 <= v46)
            {
              v45 = v68 - 1;
              goto LABEL_57;
            }
          }
          break;
        }
LABEL_57:
        if (v67 == v46)
        {
          v71 = *(_QWORD *)(result + 16) + 8 * *v45;
          if (v71 == *a2)
          {
            v61 = *(_QWORD *)(v71 + 64);
            v60 = *(int8x16_t *)(v71 + 32);
            v57 = *(int8x16_t *)(v71 + 48);
            v55 = *(int8x16_t *)v71;
            v59 = *(int8x16_t *)(v71 + 16);
            v62 = vextq_s8(v57, v57, 8uLL).u64[0];
            v58 = vextq_s8(v60, v60, 8uLL).u64[0];
            *(_QWORD *)&v56 = vextq_s8(v59, v59, 8uLL).u64[0];
          }
          else
          {
            v55 = *(int8x16_t *)v71;
            v56 = *(_OWORD *)(v71 + 24);
            v57 = *(int8x16_t *)(v71 + 48);
            v58 = *(_QWORD *)(v71 + 40);
            v59.i64[0] = *(_QWORD *)(v71 + 16);
            v60.i64[0] = *(_QWORD *)(v71 + 32);
            v61 = *(_QWORD *)(v71 + 64);
            v62 = vextq_s8(v57, v57, 8uLL).u64[0];
          }
          v63 = *((unsigned int *)a2 + 4);
          v55.i64[1] = vextq_s8(v55, v55, 8uLL).u64[0];
          *((_QWORD *)&v56 + 1) = v60.i64[0];
          v64 = *a2 + 8 * (v53[1] + (_DWORD)v63 * a4[1]);
          v57.i64[1] = v62;
          *(_QWORD *)(v64 + 16) = v59.i64[0];
          *(int8x16_t *)v64 = v55;
          v65 = v64 + 8 * v63;
          *(_QWORD *)(v65 + 16) = v58;
          *(_OWORD *)v65 = v56;
          v66 = (int8x16_t *)(v64 + 16 * v63);
          v66[1].i64[0] = v61;
          *v66 = v57;
          v46 = v67;
        }
        v53 += 2;
      }
    }
  }
  return result;
}

uint64_t sub_20F8F48A0(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  int8x16_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = *(_QWORD *)(result + 16) + 8 * v20;
                v24 = *((unsigned int *)a2 + 4);
                v25 = *a2;
                v26 = *(int8x16_t *)v23;
                v27 = *(_QWORD *)(v23 + 16);
                v28 = vextq_s8(v26, v26, 8uLL).u64[0];
                if (v21 >= v22)
                {
                  v32 = (int8x16_t *)(v25 + 8 * (v22 + (_DWORD)v24 * v21));
                  v32[1].i64[0] = v27;
                  v26.i64[1] = v28;
                  *v32 = v26;
                }
                else
                {
                  v29 = (_QWORD *)(v25 + 8 * (v21 + (_DWORD)v24 * v22));
                  *v29 = v26.i64[0];
                  v29[v24] = v28;
                  v29[2 * v24] = v27;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v30 = v8 + 1;
                  while (v30 != v11)
                  {
                    ++v12;
                    v31 = *v30++;
                    v20 = v31;
                    if (v31 != -1)
                    {
                      v8 = v30 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v33 = *(_QWORD *)(result + 88);
        v34 = (*(_DWORD *)(result + 112) * *a4);
        v35 = (uint64_t *)(v33 + 8 * v34);
        v36 = *(_DWORD *)(result + 8);
        v37 = (v34 + v36);
        v38 = (uint64_t *)(v33 + 8 * v37);
        if (v36 && *v35 == -1)
        {
          v49 = 8 * v37 - 8 * v34 - 8;
          v50 = 1;
          v51 = v35;
          while (1)
          {
            v39 = v50;
            if (!v49)
              break;
            v35 = v51 + 1;
            v52 = v51[1];
            ++v50;
            v49 -= 8;
            ++v51;
            if (v52 != -1)
              goto LABEL_38;
          }
          v35 = v38;
        }
        else
        {
          v39 = 0;
        }
LABEL_38:
        v40 = *a3;
        v41 = a3[1];
        while (v40 != v41 && v35 != v38)
        {
          v42 = *v40;
          if (*v40 > v39)
          {
            v43 = v35 + 1;
            while (v43 != v38)
            {
              ++v39;
              v44 = *v43++;
              if (v44 != -1 && v42 <= v39)
              {
                v35 = v43 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v42 == v39)
          {
            v46 = *(_QWORD *)(result + 16) + 8 * *v35;
            v47 = *a2 + 8 * (v40[1] + *((_DWORD *)a2 + 4) * a4[1]);
            v48 = *(_OWORD *)v46;
            *(_QWORD *)(v47 + 16) = *(_QWORD *)(v46 + 16);
            *(_OWORD *)v47 = v48;
            v39 = v42;
          }
          v40 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F4B44(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t *v32;
  int64x2_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int64x2_t v36;
  int64x2_t *v37;
  __int128 v38;
  uint64_t v39;
  int64x2_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int8 *v44;
  int64x2_t *v45;
  __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  int8x16_t v59;
  int8x16_t v60;
  unint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  unint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  unint64_t v68;
  int8x16_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x16_t *v72;
  int8x16_t *v73;
  int8x16_t *v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v79;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              if (v20 >= v21)
              {
                v36 = *(int64x2_t *)v22;
                v37 = (int64x2_t *)(v24 + 8 * (v21 + (_DWORD)v23 * v20));
                v38 = *(_OWORD *)(v22 + 24);
                v39 = *(_QWORD *)(v22 + 40);
                v40 = *(int64x2_t *)(v22 + 48);
                v41 = *(_QWORD *)(v22 + 64);
                v42 = *(_OWORD *)(v22 + 72);
                v43 = *(_QWORD *)(v22 + 88);
                v37[1].i64[0] = *(_QWORD *)(v22 + 16);
                *v37 = v36;
                v44 = &v37->i8[8 * v23];
                *((_QWORD *)v44 + 2) = v39;
                *(_OWORD *)v44 = v38;
                v45 = &v37[v23];
                v45[1].i64[0] = v41;
                *v45 = v40;
                v46 = &v37->i8[24 * v23];
                *((_QWORD *)v46 + 2) = v43;
                *(_OWORD *)v46 = v42;
              }
              else
              {
                v25 = (int64x2_t *)(v24 + 8 * (v20 + (_DWORD)v23 * v21));
                v26.i64[0] = *(_QWORD *)(v22 + 16);
                v27 = *(int64x2_t *)(v22 + 24);
                v28.i64[0] = *(_QWORD *)(v22 + 64);
                v29 = *(int64x2_t *)(v22 + 48);
                v30 = vzip1q_s64(v29, *(int64x2_t *)(v22 + 72));
                v29.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
                v29.i64[1] = *(_QWORD *)(v22 + 80);
                v26.i64[1] = *(_QWORD *)(v22 + 40);
                v31 = vzip2q_s64(*(int64x2_t *)v22, v27);
                v28.i64[1] = *(_QWORD *)(v22 + 88);
                *v25 = vzip1q_s64(*(int64x2_t *)v22, v27);
                v25[1] = v30;
                v32 = (int64x2_t *)((char *)v25 + 8 * v23);
                *v32 = v31;
                v32[1] = v29;
                v33 = &v25[v23];
                *v33 = v26;
                v33[1] = v28;
              }
              v9 = v18;
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v34 = v8 + 1;
                while (v34 != v11)
                {
                  ++v9;
                  v35 = *v34++;
                  v19 = v35;
                  if (v35 != -1)
                  {
                    v8 = v34 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v47 = *(_QWORD *)(result + 88);
        v48 = (*(_DWORD *)(result + 112) * *a4);
        v49 = (uint64_t *)(v47 + 8 * v48);
        v50 = *(_DWORD *)(result + 8);
        v51 = v48 + v50;
        v52 = (uint64_t *)(v47 + 8 * v51);
        if (v50)
        {
          if (*v49 == -1)
          {
            v53 = 8 * v51 - 8 * v48 - 8;
            v54 = 1;
            v55 = v49;
            while (1)
            {
              v50 = v54;
              if (!v53)
                break;
              v49 = v55 + 1;
              v56 = v55[1];
              ++v54;
              v53 -= 8;
              ++v55;
              if (v56 != -1)
                goto LABEL_43;
            }
            v49 = v52;
          }
          else
          {
            v50 = 0;
          }
        }
LABEL_43:
        v57 = *a3;
        v58 = a3[1];
        while (v57 != v58 && v49 != v52)
        {
          v75 = *v57;
          if (*v57 > v50)
          {
            v76 = v49 + 1;
            while (v76 != v52)
            {
              ++v50;
              v77 = *v76++;
              if (v77 != -1 && v75 <= v50)
              {
                v49 = v76 - 1;
                goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v75 == v50)
          {
            v79 = *(_QWORD *)(result + 16) + 8 * *v49;
            if (v79 == *a2)
            {
              v63 = *(int8x16_t *)(v79 + 64);
              v67 = *(int8x16_t *)(v79 + 80);
              v69 = *(int8x16_t *)(v79 + 32);
              v64 = *(int8x16_t *)(v79 + 48);
              v60 = *(int8x16_t *)v79;
              v59 = *(int8x16_t *)(v79 + 16);
              v65 = vextq_s8(v67, v67, 8uLL).u64[0];
              v66.i64[0] = vextq_s8(v63, v63, 8uLL).u64[0];
              v68 = vextq_s8(v64, v64, 8uLL).u64[0];
              v61 = vextq_s8(v69, v69, 8uLL).u64[0];
              v62.i64[0] = vextq_s8(v59, v59, 8uLL).u64[0];
            }
            else
            {
              v59.i64[0] = *(_QWORD *)(v79 + 16);
              v60 = *(int8x16_t *)v79;
              v61 = *(_QWORD *)(v79 + 40);
              v62 = *(int8x16_t *)(v79 + 24);
              v63.i64[0] = *(_QWORD *)(v79 + 64);
              v64 = *(int8x16_t *)(v79 + 48);
              v65 = *(_QWORD *)(v79 + 88);
              v66 = *(int8x16_t *)(v79 + 72);
              v67.i64[0] = vextq_s8(v66, v66, 8uLL).u64[0];
              v68 = vextq_s8(v64, v64, 8uLL).u64[0];
              v69.i64[0] = vextq_s8(v62, v62, 8uLL).u64[0];
            }
            v70 = *((unsigned int *)a2 + 4);
            v71 = *a2 + 8 * (v57[1] + (_DWORD)v70 * a4[1]);
            v60.i64[1] = vextq_s8(v60, v60, 8uLL).u64[0];
            v62.i64[1] = v69.i64[0];
            v64.i64[1] = v68;
            v66.i64[1] = v67.i64[0];
            *(_QWORD *)(v71 + 16) = v59.i64[0];
            *(int8x16_t *)v71 = v60;
            v72 = (int8x16_t *)(v71 + 8 * v70);
            v72[1].i64[0] = v61;
            *v72 = v62;
            v73 = (int8x16_t *)(v71 + 16 * v70);
            v73[1].i64[0] = v63.i64[0];
            *v73 = v64;
            v74 = (int8x16_t *)(v71 + 24 * v70);
            v74[1].i64[0] = v65;
            *v74 = v66;
            v50 = v75;
          }
          v57 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F4EE0(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  int64x2_t *v42;
  int64x2_t *v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  __int8 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int8 *v58;
  __int8 *v59;
  __int8 *v60;
  __int8 *v61;
  __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  uint64_t v87;
  int8x16_t *v88;
  int8x16_t *v89;
  int8x16_t *v90;
  int8x16_t *v91;
  int8x16_t *v92;
  int8x16_t *v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t v96;
  int8x16_t *v98;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(unsigned int *)(a2 + 16);
                  v24 = *(int8x16_t **)a2;
                  if (v20 >= v21)
                  {
                    v46 = *(_OWORD *)(v22 + 16);
                    v47 = &v24->i8[8 * v21 + 8 * (_DWORD)v23 * v20];
                    v48 = *(_OWORD *)(v22 + 32);
                    v49 = *(_OWORD *)(v22 + 48);
                    v50 = *(_OWORD *)(v22 + 64);
                    v51 = *(_OWORD *)(v22 + 80);
                    v52 = *(_OWORD *)(v22 + 96);
                    v53 = *(_OWORD *)(v22 + 112);
                    v54 = *(_OWORD *)(v22 + 128);
                    v55 = *(_OWORD *)(v22 + 144);
                    v56 = *(_OWORD *)(v22 + 160);
                    v57 = *(_OWORD *)(v22 + 176);
                    *(_OWORD *)v47 = *(_OWORD *)v22;
                    *((_OWORD *)v47 + 1) = v46;
                    v58 = &v47[8 * v23];
                    *(_OWORD *)v58 = v48;
                    *((_OWORD *)v58 + 1) = v49;
                    v59 = &v47[16 * v23];
                    *(_OWORD *)v59 = v50;
                    *((_OWORD *)v59 + 1) = v51;
                    v60 = &v47[24 * v23];
                    *(_OWORD *)v60 = v52;
                    *((_OWORD *)v60 + 1) = v53;
                    v61 = &v47[32 * v23];
                    *(_OWORD *)v61 = v54;
                    *((_OWORD *)v61 + 1) = v55;
                    v62 = &v47[40 * v23];
                    v9 = v18;
                    *(_OWORD *)v62 = v56;
                    *((_OWORD *)v62 + 1) = v57;
                  }
                  else
                  {
                    v25 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                    v26 = *(int64x2_t *)(v22 + 16);
                    v28 = *(int64x2_t *)(v22 + 32);
                    v27 = *(int64x2_t *)(v22 + 48);
                    v30 = *(int64x2_t *)(v22 + 64);
                    v29 = *(int64x2_t *)(v22 + 80);
                    v32 = *(int64x2_t *)(v22 + 128);
                    v31 = *(int64x2_t *)(v22 + 144);
                    v33 = vzip1q_s64(*(int64x2_t *)v22, v28);
                    v34 = vzip1q_s64(v30, *(int64x2_t *)(v22 + 96));
                    v35 = vzip1q_s64(v32, *(int64x2_t *)(v22 + 160));
                    v36 = vzip2q_s64(*(int64x2_t *)v22, v28);
                    v28.i64[0] = vdupq_laneq_s64(v30, 1).u64[0];
                    v28.i64[1] = *(_QWORD *)(v22 + 104);
                    v30.i64[0] = vdupq_laneq_s64(v32, 1).u64[0];
                    v30.i64[1] = *(_QWORD *)(v22 + 168);
                    v37 = vzip1q_s64(v26, v27);
                    v38 = vzip1q_s64(v29, *(int64x2_t *)(v22 + 112));
                    v39 = vzip1q_s64(v31, *(int64x2_t *)(v22 + 176));
                    v40 = vzip2q_s64(v26, v27);
                    v27.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
                    v27.i64[1] = *(_QWORD *)(v22 + 120);
                    v29.i64[0] = vdupq_laneq_s64(v31, 1).u64[0];
                    v29.i64[1] = *(_QWORD *)(v22 + 184);
                    v25[1] = v34;
                    v25[2] = v35;
                    *v25 = v33;
                    v41 = (int64x2_t *)((char *)v25 + 8 * v23);
                    v41[1] = v28;
                    v41[2] = v30;
                    *v41 = v36;
                    v42 = &v25[v23];
                    v42[1] = v38;
                    v42[2] = v39;
                    *v42 = v37;
                    v43 = (int64x2_t *)((char *)v25 + 24 * v23);
                    v43[1] = v27;
                    v43[2] = v29;
                    *v43 = v40;
                    v9 = v18;
                  }
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v44 = v8 + 1;
                    while (v44 != v11)
                    {
                      ++v9;
                      v45 = *v44++;
                      v19 = v45;
                      if (v45 != -1)
                      {
                        v8 = v44 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v63 = *(_QWORD *)(result + 88);
        v64 = (*(_DWORD *)(result + 112) * *a4);
        v65 = (uint64_t *)(v63 + 8 * v64);
        v66 = *(_DWORD *)(result + 8);
        v67 = v64 + v66;
        v68 = (uint64_t *)(v63 + 8 * v67);
        if (v66)
        {
          if (*v65 == -1)
          {
            v69 = 8 * v67 - 8 * v64 - 8;
            v70 = 1;
            v71 = v65;
            while (1)
            {
              v66 = v70;
              if (!v69)
                break;
              v65 = v71 + 1;
              v72 = v71[1];
              ++v70;
              v69 -= 8;
              ++v71;
              if (v72 != -1)
                goto LABEL_42;
            }
            v65 = v68;
          }
          else
          {
            v66 = 0;
          }
        }
LABEL_42:
        v73 = *a3;
        v74 = a3[1];
        while (v73 != v74 && v65 != v68)
        {
          v94 = *v73;
          if (*v73 > v66)
          {
            v95 = v65 + 1;
            while (v95 != v68)
            {
              ++v66;
              v96 = *v95++;
              if (v96 != -1 && v94 <= v66)
              {
                v65 = v95 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v94 == v66)
          {
            v98 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v65);
            if (v98 == *(int8x16_t **)a2)
            {
              v84 = v98[10];
              v83 = v98[11];
              v82 = v98[8];
              v81 = v98[9];
              v80 = v98[6];
              v79 = v98[7];
              v78 = v98[4];
              v77 = v98[5];
              v76 = v98[2];
              v75 = v98[3];
            }
            else
            {
              v76 = v98[2];
              v75 = v98[3];
              v78 = v98[4];
              v77 = v98[5];
              v80 = v98[6];
              v79 = v98[7];
              v82 = v98[8];
              v81 = v98[9];
              v84 = v98[10];
              v83 = v98[11];
            }
            v86 = *v98;
            v85 = v98[1];
            v87 = *(unsigned int *)(a2 + 16);
            v88 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v73[1] + (_DWORD)v87 * a4[1]));
            v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
            v84.i64[1] = vextq_s8(v84, v84, 8uLL).u64[0];
            v81.i64[1] = vextq_s8(v81, v81, 8uLL).u64[0];
            v82.i64[1] = vextq_s8(v82, v82, 8uLL).u64[0];
            v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
            v80.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
            v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
            v78.i64[1] = vextq_s8(v78, v78, 8uLL).u64[0];
            v75.i64[1] = vextq_s8(v75, v75, 8uLL).u64[0];
            v76.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
            v85.i64[1] = vextq_s8(v85, v85, 8uLL).u64[0];
            v86.i64[1] = vextq_s8(v86, v86, 8uLL).u64[0];
            *v88 = v86;
            v88[1] = v85;
            v89 = (int8x16_t *)((char *)v88 + 8 * v87);
            *v89 = v76;
            v89[1] = v75;
            v90 = &v88[v87];
            *v90 = v78;
            v90[1] = v77;
            v91 = (int8x16_t *)((char *)v88 + 24 * v87);
            *v91 = v80;
            v91[1] = v79;
            v92 = &v88[2 * v87];
            *v92 = v82;
            v92[1] = v81;
            v93 = (int8x16_t *)((char *)v88 + 40 * v87);
            *v93 = v84;
            v93[1] = v83;
            v66 = v94;
          }
          v73 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F52EC(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  __int128 v35;
  __int128 v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  __int128 v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  __int8 *v47;
  int64x2_t *v48;
  int64x2_t *v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  __int8 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int8 *v70;
  __int8 *v71;
  __int8 *v72;
  __int8 *v73;
  __int8 *v74;
  __int8 *v75;
  __int8 *v76;
  __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint64_t v112;
  int8x16_t *v113;
  int8x16_t *v114;
  int8x16_t *v115;
  int8x16_t *v116;
  int8x16_t *v117;
  int8x16_t *v118;
  int8x16_t *v119;
  int8x16_t *v120;
  int8x16_t *v121;
  unsigned int v122;
  uint64_t *v123;
  uint64_t v124;
  int8x16_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(unsigned int *)(a2 + 16);
                  v24 = *(int8x16_t **)a2;
                  if (v20 >= v21)
                  {
                    v52 = *(_OWORD *)(v22 + 16);
                    v53 = &v24->i8[8 * v21 + 8 * (_DWORD)v23 * v20];
                    v54 = *(_OWORD *)(v22 + 32);
                    v55 = *(_OWORD *)(v22 + 48);
                    v56 = *(_OWORD *)(v22 + 64);
                    v57 = *(_OWORD *)(v22 + 80);
                    v58 = *(_OWORD *)(v22 + 96);
                    v59 = *(_OWORD *)(v22 + 112);
                    v60 = *(_OWORD *)(v22 + 128);
                    v61 = *(_OWORD *)(v22 + 144);
                    v62 = *(_OWORD *)(v22 + 160);
                    v63 = *(_OWORD *)(v22 + 176);
                    v64 = *(_OWORD *)(v22 + 192);
                    v65 = *(_OWORD *)(v22 + 208);
                    v66 = *(_OWORD *)(v22 + 224);
                    v67 = *(_OWORD *)(v22 + 240);
                    v68 = *(_OWORD *)(v22 + 256);
                    v69 = *(_OWORD *)(v22 + 272);
                    *(_OWORD *)v53 = *(_OWORD *)v22;
                    *((_OWORD *)v53 + 1) = v52;
                    v70 = &v53[8 * v23];
                    *(_OWORD *)v70 = v54;
                    *((_OWORD *)v70 + 1) = v55;
                    v71 = &v53[16 * v23];
                    *(_OWORD *)v71 = v56;
                    *((_OWORD *)v71 + 1) = v57;
                    v72 = &v53[24 * v23];
                    *(_OWORD *)v72 = v58;
                    *((_OWORD *)v72 + 1) = v59;
                    v73 = &v53[32 * v23];
                    *(_OWORD *)v73 = v60;
                    *((_OWORD *)v73 + 1) = v61;
                    v74 = &v53[40 * v23];
                    *(_OWORD *)v74 = v62;
                    *((_OWORD *)v74 + 1) = v63;
                    v75 = &v53[48 * v23];
                    *(_OWORD *)v75 = v64;
                    *((_OWORD *)v75 + 1) = v65;
                    v76 = &v53[56 * v23];
                    *(_OWORD *)v76 = v66;
                    *((_OWORD *)v76 + 1) = v67;
                    v77 = &v53[64 * v23];
                    v9 = v18;
                    *(_OWORD *)v77 = v68;
                    *((_OWORD *)v77 + 1) = v69;
                  }
                  else
                  {
                    v25 = *(int64x2_t *)(v22 + 16);
                    v26 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                    v28 = *(int64x2_t *)(v22 + 32);
                    v27 = *(int64x2_t *)(v22 + 48);
                    v30 = *(int64x2_t *)(v22 + 64);
                    v29 = *(int64x2_t *)(v22 + 80);
                    v32 = *(int64x2_t *)(v22 + 128);
                    v31 = *(int64x2_t *)(v22 + 144);
                    v34 = *(int64x2_t *)(v22 + 192);
                    v33 = *(int64x2_t *)(v22 + 208);
                    v36 = *(_OWORD *)(v22 + 256);
                    v35 = *(_OWORD *)(v22 + 272);
                    v37 = vzip1q_s64(*(int64x2_t *)v22, v28);
                    v38 = vzip1q_s64(v30, *(int64x2_t *)(v22 + 96));
                    v39 = vzip1q_s64(v32, *(int64x2_t *)(v22 + 160));
                    v40 = vzip1q_s64(v34, *(int64x2_t *)(v22 + 224));
                    v30.i64[0] = vdupq_laneq_s64(v30, 1).u64[0];
                    v30.i64[1] = *(_QWORD *)(v22 + 104);
                    *(_QWORD *)&v41 = vdupq_laneq_s64(v32, 1).u64[0];
                    *((_QWORD *)&v41 + 1) = *(_QWORD *)(v22 + 168);
                    v32.i64[0] = vdupq_laneq_s64(v34, 1).u64[0];
                    v42 = vzip2q_s64(*(int64x2_t *)v22, v28);
                    v32.i64[1] = *(_QWORD *)(v22 + 232);
                    v43 = vzip1q_s64(v29, *(int64x2_t *)(v22 + 112));
                    v44 = vzip1q_s64(v31, *(int64x2_t *)(v22 + 176));
                    v29.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
                    v29.i64[1] = *(_QWORD *)(v22 + 120);
                    v45.i64[0] = vdupq_laneq_s64(v31, 1).u64[0];
                    v45.i64[1] = *(_QWORD *)(v22 + 184);
                    v31.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
                    v31.i64[1] = *(_QWORD *)(v22 + 248);
                    v46 = vzip1q_s64(v33, *(int64x2_t *)(v22 + 240));
                    v26[2] = v39;
                    v26[3] = v40;
                    v26[4].i64[0] = v36;
                    *v26 = v37;
                    v26[1] = v38;
                    v47 = &v26->i8[8 * v23];
                    *((_OWORD *)v47 + 2) = v41;
                    *((int64x2_t *)v47 + 3) = v32;
                    *(int64x2_t *)v47 = v42;
                    *((int64x2_t *)v47 + 1) = v30;
                    *((_QWORD *)v47 + 8) = *((_QWORD *)&v36 + 1);
                    v48 = &v26[v23];
                    v48[4].i64[0] = v35;
                    v48[2] = v44;
                    v48[3] = v46;
                    *v48 = vzip1q_s64(v25, v27);
                    v48[1] = v43;
                    v49 = (int64x2_t *)((char *)v26 + 24 * v23);
                    v49[4].i64[0] = *((_QWORD *)&v35 + 1);
                    v49[2] = v45;
                    v49[3] = v31;
                    v9 = v18;
                    *v49 = vzip2q_s64(v25, v27);
                    v49[1] = v29;
                  }
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v50 = v8 + 1;
                    while (v50 != v11)
                    {
                      ++v9;
                      v51 = *v50++;
                      v19 = v51;
                      if (v51 != -1)
                      {
                        v8 = v50 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v78 = *(_QWORD *)(result + 88);
        v79 = (*(_DWORD *)(result + 112) * *a4);
        v80 = (uint64_t *)(v78 + 8 * v79);
        v81 = *(_DWORD *)(result + 8);
        v82 = v79 + v81;
        v83 = (uint64_t *)(v78 + 8 * v82);
        if (v81)
        {
          if (*v80 == -1)
          {
            v84 = 8 * v82 - 8 * v79 - 8;
            v85 = 1;
            v86 = v80;
            while (1)
            {
              v81 = v85;
              if (!v84)
                break;
              v80 = v86 + 1;
              v87 = v86[1];
              ++v85;
              v84 -= 8;
              ++v86;
              if (v87 != -1)
                goto LABEL_42;
            }
            v80 = v83;
          }
          else
          {
            v81 = 0;
          }
        }
LABEL_42:
        v88 = *a3;
        v89 = a3[1];
        while (v88 != v89 && v80 != v83)
        {
          v122 = *v88;
          if (*v88 > v81)
          {
            v123 = v80 + 1;
            while (v123 != v83)
            {
              ++v81;
              v124 = *v123++;
              if (v124 != -1 && v122 <= v81)
              {
                v80 = v123 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v122 == v81)
          {
            v126 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v80);
            if (v126 == *(int8x16_t **)a2)
            {
              v99 = v126[16];
              v98 = v126[17];
              v97 = v126[14];
              v96 = v126[15];
              v95 = v126[12];
              v94 = v126[13];
              v93 = v126[10];
              v92 = v126[11];
              v105 = v126[8];
              v104 = v126[9];
              v100 = vextq_s8(v98, v98, 8uLL).u64[0];
              v101 = vextq_s8(v99, v99, 8uLL).u64[0];
              v102 = vextq_s8(v96, v96, 8uLL).u64[0];
              v103 = vextq_s8(v97, v97, 8uLL).u64[0];
              v129 = vextq_s8(v95, v95, 8uLL).u64[0];
              v130 = vextq_s8(v94, v94, 8uLL).u64[0];
              v127 = vextq_s8(v93, v93, 8uLL).u64[0];
              v128 = vextq_s8(v92, v92, 8uLL).u64[0];
              v91 = v126[6];
              v90 = v126[7];
            }
            else
            {
              v91 = v126[6];
              v90 = v126[7];
              v93 = v126[10];
              v92 = v126[11];
              v95 = v126[12];
              v94 = v126[13];
              v97 = v126[14];
              v96 = v126[15];
              v99 = v126[16];
              v98 = v126[17];
              v100 = vextq_s8(v98, v98, 8uLL).u64[0];
              v101 = vextq_s8(v99, v99, 8uLL).u64[0];
              v102 = vextq_s8(v96, v96, 8uLL).u64[0];
              v103 = vextq_s8(v97, v97, 8uLL).u64[0];
              v129 = vextq_s8(v95, v95, 8uLL).u64[0];
              v130 = vextq_s8(v94, v94, 8uLL).u64[0];
              v127 = vextq_s8(v93, v93, 8uLL).u64[0];
              v128 = vextq_s8(v92, v92, 8uLL).u64[0];
              v105 = v126[8];
              v104 = v126[9];
            }
            v107 = v126[4];
            v106 = v126[5];
            v109 = v126[2];
            v108 = v126[3];
            v111 = *v126;
            v110 = v126[1];
            v98.i64[1] = v100;
            v99.i64[1] = v101;
            v96.i64[1] = v102;
            v97.i64[1] = v103;
            v112 = *(unsigned int *)(a2 + 16);
            v94.i64[1] = v130;
            v95.i64[1] = v129;
            v92.i64[1] = v128;
            v93.i64[1] = v127;
            v104.i64[1] = vextq_s8(v104, v104, 8uLL).u64[0];
            v105.i64[1] = vextq_s8(v105, v105, 8uLL).u64[0];
            v90.i64[1] = vextq_s8(v90, v90, 8uLL).u64[0];
            v91.i64[1] = vextq_s8(v91, v91, 8uLL).u64[0];
            v106.i64[1] = vextq_s8(v106, v106, 8uLL).u64[0];
            v107.i64[1] = vextq_s8(v107, v107, 8uLL).u64[0];
            v108.i64[1] = vextq_s8(v108, v108, 8uLL).u64[0];
            v109.i64[1] = vextq_s8(v109, v109, 8uLL).u64[0];
            v110.i64[1] = vextq_s8(v110, v110, 8uLL).u64[0];
            v113 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v88[1] + (_DWORD)v112 * a4[1]));
            v111.i64[1] = vextq_s8(v111, v111, 8uLL).u64[0];
            *v113 = v111;
            v113[1] = v110;
            v114 = (int8x16_t *)((char *)v113 + 8 * v112);
            *v114 = v109;
            v114[1] = v108;
            v115 = &v113[v112];
            *v115 = v107;
            v115[1] = v106;
            v116 = (int8x16_t *)((char *)v113 + 24 * v112);
            *v116 = v91;
            v116[1] = v90;
            v117 = &v113[2 * v112];
            *v117 = v105;
            v117[1] = v104;
            v118 = (int8x16_t *)((char *)v113 + 40 * v112);
            *v118 = v93;
            v118[1] = v92;
            v119 = &v113[3 * v112];
            *v119 = v95;
            v119[1] = v94;
            v120 = (int8x16_t *)((char *)v113 + 56 * v112);
            *v120 = v97;
            v120[1] = v96;
            v121 = &v113[4 * v112];
            v81 = v122;
            *v121 = v99;
            v121[1] = v98;
          }
          v88 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F582C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  __int128 v29;
  __int128 v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  int64x2_t *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  __int8 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int8 *v44;
  __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint64_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int8x16_t *v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  int8x16_t *v72;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *(unsigned int *)(a2 + 16);
              v24 = *(int8x16_t **)a2;
              if (v20 >= v21)
              {
                v38 = *(_OWORD *)(v22 + 16);
                v39 = &v24->i8[8 * v21 + 8 * (_DWORD)v23 * v20];
                v40 = *(_OWORD *)(v22 + 32);
                v41 = *(_OWORD *)(v22 + 48);
                v42 = *(_OWORD *)(v22 + 64);
                v43 = *(_OWORD *)(v22 + 80);
                *(_OWORD *)v39 = *(_OWORD *)v22;
                *((_OWORD *)v39 + 1) = v38;
                v44 = &v39[8 * v23];
                *(_OWORD *)v44 = v40;
                *((_OWORD *)v44 + 1) = v41;
                v45 = &v39[16 * v23];
                *(_OWORD *)v45 = v42;
                *((_OWORD *)v45 + 1) = v43;
              }
              else
              {
                v25 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                v26 = *(int64x2_t *)(v22 + 16);
                v28 = *(int64x2_t *)(v22 + 32);
                v27 = *(int64x2_t *)(v22 + 48);
                v30 = *(_OWORD *)(v22 + 64);
                v29 = *(_OWORD *)(v22 + 80);
                v31 = vzip1q_s64(*(int64x2_t *)v22, v28);
                v32 = vzip2q_s64(*(int64x2_t *)v22, v28);
                v25[1].i64[0] = v30;
                *v25 = v31;
                v33 = (int64x2_t *)((char *)v25 + 8 * v23);
                *v33 = v32;
                v33[1].i64[0] = *((_QWORD *)&v30 + 1);
                v34 = &v25[v23];
                v34[1].i64[0] = v29;
                *v34 = vzip1q_s64(v26, v27);
                v35 = (int64x2_t *)((char *)v25 + 24 * v23);
                v35[1].i64[0] = *((_QWORD *)&v29 + 1);
                *v35 = vzip2q_s64(v26, v27);
              }
              v9 = v18;
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v36 = v8 + 1;
                while (v36 != v11)
                {
                  ++v9;
                  v37 = *v36++;
                  v19 = v37;
                  if (v37 != -1)
                  {
                    v8 = v36 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v46 = *(_QWORD *)(result + 88);
        v47 = (*(_DWORD *)(result + 112) * *a4);
        v48 = (uint64_t *)(v46 + 8 * v47);
        v49 = *(_DWORD *)(result + 8);
        v50 = v47 + v49;
        v51 = (uint64_t *)(v46 + 8 * v50);
        if (v49)
        {
          if (*v48 == -1)
          {
            v52 = 8 * v50 - 8 * v47 - 8;
            v53 = 1;
            v54 = v48;
            while (1)
            {
              v49 = v53;
              if (!v52)
                break;
              v48 = v54 + 1;
              v55 = v54[1];
              ++v53;
              v52 -= 8;
              ++v54;
              if (v55 != -1)
                goto LABEL_43;
            }
            v48 = v51;
          }
          else
          {
            v49 = 0;
          }
        }
LABEL_43:
        v56 = *a3;
        v57 = a3[1];
        while (v56 != v57 && v48 != v51)
        {
          v68 = *v56;
          if (*v56 > v49)
          {
            v69 = v48 + 1;
            while (v69 != v51)
            {
              ++v49;
              v70 = *v69++;
              if (v70 != -1 && v68 <= v49)
              {
                v48 = v69 - 1;
                goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v68 == v49)
          {
            v72 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v48);
            if (v72 == *(int8x16_t **)a2)
            {
              v63 = v72[4];
              v62 = v72[5];
              v61 = v72[2];
              v60 = v72[3];
              v59 = *v72;
              v58 = v72[1];
            }
            else
            {
              v59 = *v72;
              v58 = v72[1];
              v61 = v72[2];
              v60 = v72[3];
              v63 = v72[4];
              v62 = v72[5];
            }
            v64 = *(unsigned int *)(a2 + 16);
            v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
            v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
            v60.i64[1] = vextq_s8(v60, v60, 8uLL).u64[0];
            v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
            v58.i64[1] = vextq_s8(v58, v58, 8uLL).u64[0];
            v65 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v56[1] + (_DWORD)v64 * a4[1]));
            v59.i64[1] = vextq_s8(v59, v59, 8uLL).u64[0];
            *v65 = v59;
            v65[1] = v58;
            v66 = (int8x16_t *)((char *)v65 + 8 * v64);
            *v66 = v61;
            v66[1] = v60;
            v67 = &v65[v64];
            *v67 = v63;
            v67[1] = v62;
            v49 = v68;
          }
          v56 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F5B60(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  int8x16_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v24 = *((unsigned int *)a2 + 4);
                v25 = *a2;
                v27 = *v23;
                v26 = v23[1];
                if (v21 >= v22)
                {
                  v31 = (int8x16_t *)(v25 + 8 * (v22 + (_DWORD)v24 * v21));
                  *v31 = v27;
                  v31[1] = v26;
                }
                else
                {
                  v28 = (_QWORD *)(v25 + 8 * (v21 + (_DWORD)v24 * v22));
                  *v28 = v27.i64[0];
                  v28[v24] = vextq_s8(v27, v27, 8uLL).u64[0];
                  v28[2 * v24] = v26.i64[0];
                  v28[3 * v24] = vextq_s8(v26, v26, 8uLL).u64[0];
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v29 = v8 + 1;
                  while (v29 != v11)
                  {
                    ++v12;
                    v30 = *v29++;
                    v20 = v30;
                    if (v30 != -1)
                    {
                      v8 = v29 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v32 = *(_QWORD *)(result + 88);
        v33 = (*(_DWORD *)(result + 112) * *a4);
        v34 = (uint64_t *)(v32 + 8 * v33);
        v35 = *(_DWORD *)(result + 8);
        v36 = (v33 + v35);
        v37 = (uint64_t *)(v32 + 8 * v36);
        if (v35 && *v34 == -1)
        {
          v48 = 8 * v36 - 8 * v33 - 8;
          v49 = 1;
          v50 = v34;
          while (1)
          {
            v38 = v49;
            if (!v48)
              break;
            v34 = v50 + 1;
            v51 = v50[1];
            ++v49;
            v48 -= 8;
            ++v50;
            if (v51 != -1)
              goto LABEL_38;
          }
          v34 = v37;
        }
        else
        {
          v38 = 0;
        }
LABEL_38:
        v39 = *a3;
        v40 = a3[1];
        while (v39 != v40 && v34 != v37)
        {
          v41 = *v39;
          if (*v39 > v38)
          {
            v42 = v34 + 1;
            while (v42 != v37)
            {
              ++v38;
              v43 = *v42++;
              if (v43 != -1 && v41 <= v38)
              {
                v34 = v42 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v41 == v38)
          {
            v45 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *v34);
            v46 = (_OWORD *)(*a2 + 8 * (v39[1] + *((_DWORD *)a2 + 4) * a4[1]));
            v47 = v45[1];
            *v46 = *v45;
            v46[1] = v47;
            v38 = v41;
          }
          v39 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F5E00(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int64x2_t v41;
  __int128 v42;
  __int128 v43;
  __int8 *v44;
  int64x2_t *v45;
  int64x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  _OWORD *v70;
  _OWORD *v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  __int128 *v76;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *(unsigned int *)(a2 + 16);
              v24 = *(__int128 **)a2;
              if (v20 >= v21)
              {
                v41 = *(int64x2_t *)(v22 + 16);
                v25 = (int64x2_t *)((char *)v24 + 8 * v21 + 8 * (_DWORD)v23 * v20);
                v42 = *(_OWORD *)(v22 + 32);
                v43 = *(_OWORD *)(v22 + 48);
                v34 = *(int64x2_t *)(v22 + 64);
                v35 = *(int64x2_t *)(v22 + 80);
                v37 = *(int64x2_t *)(v22 + 96);
                v36 = *(int64x2_t *)(v22 + 112);
                *v25 = *(int64x2_t *)v22;
                v25[1] = v41;
                v44 = &v25->i8[8 * v23];
                *(_OWORD *)v44 = v42;
                *((_OWORD *)v44 + 1) = v43;
              }
              else
              {
                v25 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                v26 = *(int64x2_t *)(v22 + 16);
                v27 = *(int64x2_t *)(v22 + 32);
                v28 = *(int64x2_t *)(v22 + 48);
                v30 = *(int64x2_t *)(v22 + 64);
                v29 = *(int64x2_t *)(v22 + 80);
                v31 = vzip1q_s64(*(int64x2_t *)v22, v27);
                v32 = vzip1q_s64(v30, *(int64x2_t *)(v22 + 96));
                v33 = vzip2q_s64(*(int64x2_t *)v22, v27);
                v30.i64[0] = vdupq_laneq_s64(v30, 1).u64[0];
                v30.i64[1] = *(_QWORD *)(v22 + 104);
                v34 = vzip1q_s64(v26, v28);
                v35 = vzip1q_s64(v29, *(int64x2_t *)(v22 + 112));
                v36.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
                v36.i64[1] = *(_QWORD *)(v22 + 120);
                v37 = vzip2q_s64(v26, v28);
                *v25 = v31;
                v25[1] = v32;
                v38 = (int64x2_t *)((char *)v25 + 8 * v23);
                *v38 = v33;
                v38[1] = v30;
              }
              v45 = &v25[v23];
              *v45 = v34;
              v45[1] = v35;
              v46 = (int64x2_t *)((char *)v25 + 24 * v23);
              *v46 = v37;
              v46[1] = v36;
              v9 = v18;
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v39 = v8 + 1;
                while (v39 != v11)
                {
                  ++v9;
                  v40 = *v39++;
                  v19 = v40;
                  if (v40 != -1)
                  {
                    v8 = v39 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v47 = *(_QWORD *)(result + 88);
        v48 = (*(_DWORD *)(result + 112) * *a4);
        v49 = (uint64_t *)(v47 + 8 * v48);
        v50 = *(_DWORD *)(result + 8);
        v51 = v48 + v50;
        v52 = (uint64_t *)(v47 + 8 * v51);
        if (v50)
        {
          if (*v49 == -1)
          {
            v53 = 8 * v51 - 8 * v48 - 8;
            v54 = 1;
            v55 = v49;
            while (1)
            {
              v50 = v54;
              if (!v53)
                break;
              v49 = v55 + 1;
              v56 = v55[1];
              ++v54;
              v53 -= 8;
              ++v55;
              if (v56 != -1)
                goto LABEL_43;
            }
            v49 = v52;
          }
          else
          {
            v50 = 0;
          }
        }
LABEL_43:
        v57 = *a3;
        v58 = a3[1];
        while (v57 != v58 && v49 != v52)
        {
          v72 = *v57;
          if (*v57 > v50)
          {
            v73 = v49 + 1;
            while (v73 != v52)
            {
              ++v50;
              v74 = *v73++;
              if (v74 != -1 && v72 <= v50)
              {
                v49 = v73 - 1;
                goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v72 == v50)
          {
            v76 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v49);
            if (v76 == *(__int128 **)a2)
            {
              v66 = v76[6];
              v65 = v76[7];
              v64 = v76[4];
              v63 = v76[5];
              v62 = v76[2];
              v61 = v76[3];
              v60 = *v76;
              v59 = v76[1];
            }
            else
            {
              v60 = *v76;
              v59 = v76[1];
              v62 = v76[2];
              v61 = v76[3];
              v64 = v76[4];
              v63 = v76[5];
              v66 = v76[6];
              v65 = v76[7];
            }
            v67 = *(unsigned int *)(a2 + 16);
            v68 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v57[1] + (_DWORD)v67 * a4[1]));
            *v68 = v60;
            v68[1] = v59;
            v69 = (_OWORD *)((char *)v68 + 8 * v67);
            *v69 = v62;
            v69[1] = v61;
            v70 = &v68[v67];
            *v70 = v64;
            v70[1] = v63;
            v71 = (_OWORD *)((char *)v68 + 24 * v67);
            *v71 = v66;
            v71[1] = v65;
            v50 = v72;
          }
          v57 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F6120(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  int8x16_t v49;
  unint64_t v50;
  int8x16_t v51;
  unint64_t v52;
  int8x16_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                v24 = *((unsigned int *)a2 + 4);
                v25 = *a2;
                v26 = v23[3];
                if (v21 >= v22)
                {
                  v32 = (_QWORD *)(v25 + 8 * (v22 + (_DWORD)v24 * v21));
                  v33 = v23[1];
                  v34 = v23[2];
                  v35 = v23[4];
                  v36 = v23[5];
                  *v32 = *v23;
                  v32[v24] = v33;
                  v32[2 * v24] = v34;
                  v32[3 * v24] = v26;
                  v32[4 * v24] = v35;
                  v32[5 * v24] = v36;
                }
                else
                {
                  v27 = (_OWORD *)(v25 + 8 * (v21 + (_DWORD)v24 * v22));
                  v28 = *(_OWORD *)v23;
                  v29 = *((_OWORD *)v23 + 2);
                  v27[1] = *((_OWORD *)v23 + 1);
                  v27[2] = v29;
                  *v27 = v28;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v30 = v8 + 1;
                  while (v30 != v11)
                  {
                    ++v12;
                    v31 = *v30++;
                    v20 = v31;
                    if (v31 != -1)
                    {
                      v8 = v30 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v37 = *(_QWORD *)(result + 88);
        v38 = (*(_DWORD *)(result + 112) * *a4);
        v39 = (uint64_t *)(v37 + 8 * v38);
        v40 = *(_DWORD *)(result + 8);
        v41 = v38 + v40;
        v42 = (uint64_t *)(v37 + 8 * v41);
        if (v40)
        {
          if (*v39 == -1)
          {
            v43 = 8 * v41 - 8 * v38 - 8;
            v44 = 1;
            v45 = v39;
            while (1)
            {
              v40 = v44;
              if (!v43)
                break;
              v39 = v45 + 1;
              v46 = v45[1];
              ++v44;
              v43 -= 8;
              ++v45;
              if (v46 != -1)
                goto LABEL_43;
            }
            v39 = v42;
          }
          else
          {
            v40 = 0;
          }
        }
LABEL_43:
        v47 = *a3;
        v48 = a3[1];
        while (v47 != v48 && v39 != v42)
        {
          v57 = *v47;
          if (*v47 > v40)
          {
            v58 = v39 + 1;
            while (v58 != v42)
            {
              ++v40;
              v59 = *v58++;
              if (v59 != -1 && v57 <= v40)
              {
                v39 = v58 - 1;
                goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v57 == v40)
          {
            v61 = *(_QWORD *)(result + 16) + 8 * *v39;
            if (v61 == *a2)
            {
              v51 = *(int8x16_t *)(v61 + 16);
              v53 = *(int8x16_t *)(v61 + 32);
              v49 = *(int8x16_t *)v61;
              v54 = vextq_s8(v53, v53, 8uLL).u64[0];
              v52 = vextq_s8(v51, v51, 8uLL).u64[0];
              v50 = vextq_s8(v49, v49, 8uLL).u64[0];
            }
            else
            {
              v49.i64[0] = *(_QWORD *)v61;
              v50 = *(_QWORD *)(v61 + 8);
              v51.i64[0] = *(_QWORD *)(v61 + 16);
              v52 = *(_QWORD *)(v61 + 24);
              v53.i64[0] = *(_QWORD *)(v61 + 32);
              v54 = *(_QWORD *)(v61 + 40);
            }
            v55 = *((unsigned int *)a2 + 4);
            v56 = (_QWORD *)(*a2 + 8 * (v47[1] + (_DWORD)v55 * a4[1]));
            *v56 = v49.i64[0];
            v56[v55] = v50;
            v56[2 * v55] = v51.i64[0];
            v56[3 * v55] = v52;
            v56[4 * v55] = v53.i64[0];
            v56[5 * v55] = v54;
            v40 = v57;
          }
          v47 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F6448(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  int8x16_t v55;
  unint64_t v56;
  int8x16_t v57;
  unint64_t v58;
  int8x16_t v59;
  unint64_t v60;
  int8x16_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v19);
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              v25 = v22[3];
              if (v20 >= v21)
              {
                v33 = v22[1];
                v34 = (_QWORD *)(v24 + 8 * (v21 + (_DWORD)v23 * v20));
                v35 = v22[2];
                v36 = v22[4];
                v37 = v22[5];
                v38 = v22[6];
                v39 = v22[7];
                v40 = v22[8];
                *v34 = *v22;
                v34[v23] = v33;
                v34[2 * v23] = v35;
                v34[3 * v23] = v25;
                v34[4 * v23] = v36;
                v34[5 * v23] = v37;
                v41 = v23 << 6;
                v34[6 * v23] = v38;
                v42 = 7 * v23;
                v9 = v18;
                v34[v42] = v39;
                *(_QWORD *)((char *)v34 + v41) = v40;
              }
              else
              {
                v26 = v24 + 8 * (v20 + (_DWORD)v23 * v21);
                v27 = *(_OWORD *)v22;
                v28 = *((_OWORD *)v22 + 1);
                v29 = *((_OWORD *)v22 + 2);
                v30 = *((_OWORD *)v22 + 3);
                *(_QWORD *)(v26 + 64) = v22[8];
                *(_OWORD *)(v26 + 32) = v29;
                *(_OWORD *)(v26 + 48) = v30;
                *(_OWORD *)v26 = v27;
                *(_OWORD *)(v26 + 16) = v28;
                v9 = v18;
              }
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v31 = v8 + 1;
                while (v31 != v11)
                {
                  ++v9;
                  v32 = *v31++;
                  v19 = v32;
                  if (v32 != -1)
                  {
                    v8 = v31 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v43 = *(_QWORD *)(result + 88);
        v44 = (*(_DWORD *)(result + 112) * *a4);
        v45 = (uint64_t *)(v43 + 8 * v44);
        v46 = *(_DWORD *)(result + 8);
        v47 = v44 + v46;
        v48 = (uint64_t *)(v43 + 8 * v47);
        if (v46)
        {
          if (*v45 == -1)
          {
            v49 = 8 * v47 - 8 * v44 - 8;
            v50 = 1;
            v51 = v45;
            while (1)
            {
              v46 = v50;
              if (!v49)
                break;
              v45 = v51 + 1;
              v52 = v51[1];
              ++v50;
              v49 -= 8;
              ++v51;
              if (v52 != -1)
                goto LABEL_42;
            }
            v45 = v48;
          }
          else
          {
            v46 = 0;
          }
        }
LABEL_42:
        v53 = *a3;
        v54 = a3[1];
        while (v53 != v54 && v45 != v48)
        {
          v66 = *v53;
          if (*v53 > v46)
          {
            v67 = v45 + 1;
            while (v67 != v48)
            {
              ++v46;
              v68 = *v67++;
              if (v68 != -1 && v66 <= v46)
              {
                v45 = v67 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v66 == v46)
          {
            v70 = *(_QWORD *)(result + 16) + 8 * *v45;
            if (v70 == *a2)
            {
              v63 = *(_QWORD *)(v70 + 64);
              v59 = *(int8x16_t *)(v70 + 32);
              v61 = *(int8x16_t *)(v70 + 48);
              v55 = *(int8x16_t *)v70;
              v57 = *(int8x16_t *)(v70 + 16);
              v62 = vextq_s8(v61, v61, 8uLL).u64[0];
              v60 = vextq_s8(v59, v59, 8uLL).u64[0];
              v58 = vextq_s8(v57, v57, 8uLL).u64[0];
              v56 = vextq_s8(v55, v55, 8uLL).u64[0];
            }
            else
            {
              v55.i64[0] = *(_QWORD *)v70;
              v56 = *(_QWORD *)(v70 + 8);
              v57.i64[0] = *(_QWORD *)(v70 + 16);
              v58 = *(_QWORD *)(v70 + 24);
              v59.i64[0] = *(_QWORD *)(v70 + 32);
              v60 = *(_QWORD *)(v70 + 40);
              v61.i64[0] = *(_QWORD *)(v70 + 48);
              v62 = *(_QWORD *)(v70 + 56);
              v63 = *(_QWORD *)(v70 + 64);
            }
            v64 = *((unsigned int *)a2 + 4);
            v65 = (_QWORD *)(*a2 + 8 * (v53[1] + (_DWORD)v64 * a4[1]));
            *v65 = v55.i64[0];
            v65[v64] = v56;
            v65[2 * v64] = v57.i64[0];
            v65[3 * v64] = v58;
            v65[4 * v64] = v59.i64[0];
            v65[5 * v64] = v60;
            v65[6 * v64] = v61.i64[0];
            v65[7 * v64] = v62;
            v65[8 * v64] = v63;
            v46 = v66;
          }
          v53 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F67D8(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  int8x16_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                v24 = *((unsigned int *)a2 + 4);
                v25 = *a2;
                if (v21 >= v22)
                {
                  v30 = (_QWORD *)(v25 + 8 * (v22 + (_DWORD)v24 * v21));
                  v31 = v23[1];
                  v32 = v23[2];
                  *v30 = *v23;
                  v30[v24] = v31;
                  v30[2 * v24] = v32;
                }
                else
                {
                  v26 = v25 + 8 * (v21 + (_DWORD)v24 * v22);
                  v27 = *(_OWORD *)v23;
                  *(_QWORD *)(v26 + 16) = v23[2];
                  *(_OWORD *)v26 = v27;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v28 = v8 + 1;
                  while (v28 != v11)
                  {
                    ++v12;
                    v29 = *v28++;
                    v20 = v29;
                    if (v29 != -1)
                    {
                      v8 = v28 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v33 = *(_QWORD *)(result + 88);
        v34 = (*(_DWORD *)(result + 112) * *a4);
        v35 = (uint64_t *)(v33 + 8 * v34);
        v36 = *(_DWORD *)(result + 8);
        v37 = (v34 + v36);
        v38 = (uint64_t *)(v33 + 8 * v37);
        if (v36 && *v35 == -1)
        {
          v52 = 8 * v37 - 8 * v34 - 8;
          v53 = 1;
          v54 = v35;
          while (1)
          {
            v39 = v53;
            if (!v52)
              break;
            v35 = v54 + 1;
            v55 = v54[1];
            ++v53;
            v52 -= 8;
            ++v54;
            if (v55 != -1)
              goto LABEL_38;
          }
          v35 = v38;
        }
        else
        {
          v39 = 0;
        }
LABEL_38:
        v40 = *a3;
        v41 = a3[1];
        while (v40 != v41 && v35 != v38)
        {
          v47 = *v40;
          if (*v40 > v39)
          {
            v48 = v35 + 1;
            while (v48 != v38)
            {
              ++v39;
              v49 = *v48++;
              if (v49 != -1 && v47 <= v39)
              {
                v35 = v48 - 1;
                goto LABEL_52;
              }
            }
            break;
          }
LABEL_52:
          if (v47 == v39)
          {
            v51 = *(_QWORD *)(result + 16) + 8 * *v35;
            if (v51 == *a2)
            {
              v44 = *(_QWORD *)(v51 + 16);
              v42 = *(int8x16_t *)v51;
              v43 = vextq_s8(v42, v42, 8uLL).u64[0];
            }
            else
            {
              v42.i64[0] = *(_QWORD *)v51;
              v43 = *(_QWORD *)(v51 + 8);
              v44 = *(_QWORD *)(v51 + 16);
            }
            v45 = *((unsigned int *)a2 + 4);
            v46 = (_QWORD *)(*a2 + 8 * (v40[1] + (_DWORD)v45 * a4[1]));
            *v46 = v42.i64[0];
            v46[v45] = v43;
            v46[2 * v45] = v44;
            v39 = v47;
          }
          v40 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F6A9C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                if (v21 <= v22)
                  v23 = v13[1];
                else
                  v23 = a4[1];
                if (v21 >= v22)
                  v21 = v13[1];
                *(_QWORD *)(*(_QWORD *)a2 + 8 * (v21 + *(_DWORD *)(a2 + 16) * v23)) = *(_QWORD *)(*(_QWORD *)(result + 16)
                                                                                                  + 8 * v20);
                v12 = v19;
              }
              else
              {
LABEL_26:
                if (v19 >= v12)
                {
                  v24 = v8 + 1;
                  while (v24 != v11)
                  {
                    ++v12;
                    v25 = *v24++;
                    v20 = v25;
                    if (v25 != -1)
                    {
                      v8 = v24 - 1;
                      if (v19 != v12)
                        goto LABEL_26;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v26 = *(_QWORD *)(result + 88);
        v27 = (*(_DWORD *)(result + 112) * *a4);
        v28 = (uint64_t *)(v26 + 8 * v27);
        v29 = *(_DWORD *)(result + 8);
        v30 = (v27 + v29);
        v31 = (uint64_t *)(v26 + 8 * v30);
        if (v29 && *v28 == -1)
        {
          v39 = 8 * v30 - 8 * v27 - 8;
          v40 = 1;
          v41 = v28;
          while (1)
          {
            v32 = v40;
            if (!v39)
              break;
            v28 = v41 + 1;
            v42 = v41[1];
            ++v40;
            v39 -= 8;
            ++v41;
            if (v42 != -1)
              goto LABEL_40;
          }
          v28 = v31;
        }
        else
        {
          v32 = 0;
        }
LABEL_40:
        v33 = *a3;
        v34 = a3[1];
        while (v33 != v34 && v28 != v31)
        {
          v35 = *v33;
          if (*v33 > v32)
          {
            v36 = v28 + 1;
            while (v36 != v31)
            {
              ++v32;
              v37 = *v36++;
              if (v37 != -1 && v35 <= v32)
              {
                v28 = v36 - 1;
                goto LABEL_52;
              }
            }
            break;
          }
LABEL_52:
          if (v35 == v32)
          {
            *(_QWORD *)(*(_QWORD *)a2 + 8 * (v33[1] + *(_DWORD *)(a2 + 16) * a4[1])) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v28);
            v32 = v35;
          }
          v33 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F6D00(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                v24 = *((unsigned int *)a2 + 4);
                v25 = *a2;
                v26 = v23[3];
                if (v21 >= v22)
                {
                  v31 = (_QWORD *)(v25 + 8 * (v22 + (_DWORD)v24 * v21));
                  v32 = v23[1];
                  v33 = v23[2];
                  *v31 = *v23;
                  v31[v24] = v32;
                  v31[2 * v24] = v33;
                  v31[3 * v24] = v26;
                }
                else
                {
                  v27 = (_OWORD *)(v25 + 8 * (v21 + (_DWORD)v24 * v22));
                  v28 = *((_OWORD *)v23 + 1);
                  *v27 = *(_OWORD *)v23;
                  v27[1] = v28;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v29 = v8 + 1;
                  while (v29 != v11)
                  {
                    ++v12;
                    v30 = *v29++;
                    v20 = v30;
                    if (v30 != -1)
                    {
                      v8 = v29 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v34 = *(_QWORD *)(result + 88);
        v35 = (*(_DWORD *)(result + 112) * *a4);
        v36 = (uint64_t *)(v34 + 8 * v35);
        v37 = *(_DWORD *)(result + 8);
        v38 = (v35 + v37);
        v39 = (uint64_t *)(v34 + 8 * v38);
        if (v37 && *v36 == -1)
        {
          v52 = 8 * v38 - 8 * v35 - 8;
          v53 = 1;
          v54 = v36;
          while (1)
          {
            v40 = v53;
            if (!v52)
              break;
            v36 = v54 + 1;
            v55 = v54[1];
            ++v53;
            v52 -= 8;
            ++v54;
            if (v55 != -1)
              goto LABEL_38;
          }
          v36 = v39;
        }
        else
        {
          v40 = 0;
        }
LABEL_38:
        v41 = *a3;
        v42 = a3[1];
        while (v41 != v42 && v36 != v39)
        {
          v45 = *v41;
          if (*v41 > v40)
          {
            v46 = v36 + 1;
            while (v46 != v39)
            {
              ++v40;
              v47 = *v46++;
              if (v47 != -1 && v45 <= v40)
              {
                v36 = v46 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v45 == v40)
          {
            v49 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v36);
            v51 = *v49;
            v50 = v49[1];
            v43 = *((unsigned int *)a2 + 4);
            v44 = (_QWORD *)(*a2 + 8 * (v41[1] + (_DWORD)v43 * a4[1]));
            *v44 = v49->i64[0];
            v44[v43] = vextq_s8(v51, v51, 8uLL).u64[0];
            v44[2 * v43] = v50.i64[0];
            v44[3 * v43] = vextq_s8(v50, v50, 8uLL).u64[0];
            v40 = v45;
          }
          v41 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F6FEC(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int64x2_t *v67;
  uint64_t *v68;
  uint64_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int8x16_t *v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  uint64_t v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int8x16_t *v114;
  int8x16_t *v115;
  int8x16_t *v116;
  int8x16_t *v117;
  unsigned int v118;
  uint64_t *v119;
  uint64_t v120;
  int8x16_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(unsigned int *)(a2 + 16);
                  v24 = *(int8x16_t **)a2;
                  if (v20 >= v21)
                  {
                    v70 = *(int64x2_t *)v22;
                    v25 = (int64x2_t *)((char *)v24 + 8 * v21 + 8 * (_DWORD)v23 * v20);
                    v71 = *(int64x2_t *)(v22 + 32);
                    v41 = *(int64x2_t *)(v22 + 48);
                    v72 = *(int64x2_t *)(v22 + 64);
                    v42 = *(int64x2_t *)(v22 + 80);
                    v43 = *(int8x16_t *)(v22 + 96);
                    v44 = *(int8x16_t *)(v22 + 112);
                    v45 = *(int8x16_t *)(v22 + 128);
                    v49 = *(int8x16_t *)(v22 + 144);
                    v46 = vextq_s8(v45, v45, 8uLL).u64[0];
                    v47 = vextq_s8(v44, v44, 8uLL).u64[0];
                    v48 = vextq_s8(v43, v43, 8uLL).u64[0];
                    v50 = *(int8x16_t *)(v22 + 160);
                    v51 = *(int8x16_t *)(v22 + 176);
                    v53 = vextq_s8(v51, v51, 8uLL).u64[0];
                    v54 = vextq_s8(v50, v50, 8uLL).u64[0];
                    v52 = vextq_s8(v49, v49, 8uLL).u64[0];
                    v55 = *(int8x16_t *)(v22 + 192);
                    v56 = *(int8x16_t *)(v22 + 208);
                    v57 = *(int8x16_t *)(v22 + 224);
                    v61 = *(int8x16_t *)(v22 + 240);
                    v58 = vextq_s8(v57, v57, 8uLL).u64[0];
                    v59 = vextq_s8(v56, v56, 8uLL).u64[0];
                    v60 = vextq_s8(v55, v55, 8uLL).u64[0];
                    v62 = *(int8x16_t *)(v22 + 256);
                    v63 = *(int8x16_t *)(v22 + 272);
                    v65 = vextq_s8(v63, v63, 8uLL).u64[0];
                    v66 = vextq_s8(v62, v62, 8uLL).u64[0];
                    v64 = vextq_s8(v61, v61, 8uLL).u64[0];
                    v25[1] = *(int64x2_t *)(v22 + 16);
                    v25[2] = v71;
                    *v25 = v70;
                    v67 = (int64x2_t *)((char *)v25 + 8 * v23);
                    v67[1] = v72;
                  }
                  else
                  {
                    v25 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                    v26 = *(int64x2_t *)(v22 + 16);
                    v27 = *(int64x2_t *)(v22 + 64);
                    v28 = *(int64x2_t *)(v22 + 80);
                    v30 = *(int64x2_t *)(v22 + 32);
                    v29 = *(int64x2_t *)(v22 + 48);
                    v31 = *(int64x2_t *)(v22 + 96);
                    v32 = *(int64x2_t *)(v22 + 112);
                    v33 = *(int64x2_t *)(v22 + 128);
                    v34 = *(int64x2_t *)(v22 + 192);
                    v35 = *(int64x2_t *)(v22 + 208);
                    v36 = *(int64x2_t *)(v22 + 224);
                    v37 = vzip1q_s64(*(int64x2_t *)v22, v29);
                    v38 = vzip1q_s64(v31, *(int64x2_t *)(v22 + 144));
                    v39 = vzip1q_s64(v34, *(int64x2_t *)(v22 + 240));
                    v40.i64[0] = vdupq_laneq_s64(v31, 1).u64[0];
                    v40.i64[1] = *(_QWORD *)(v22 + 152);
                    v41 = vzip2q_s64(*(int64x2_t *)v22, v29);
                    v42.i64[0] = vdupq_laneq_s64(v34, 1).u64[0];
                    v42.i64[1] = *(_QWORD *)(v22 + 248);
                    v43 = (int8x16_t)vzip1q_s64(v26, v27);
                    v44 = (int8x16_t)vzip1q_s64(v32, *(int64x2_t *)(v22 + 160));
                    v45 = (int8x16_t)vzip1q_s64(v35, *(int64x2_t *)(v22 + 256));
                    v46 = vextq_s8(v45, v45, 8uLL).u64[0];
                    v47 = vextq_s8(v44, v44, 8uLL).u64[0];
                    v48 = vextq_s8(v43, v43, 8uLL).u64[0];
                    v49 = (int8x16_t)vzip2q_s64(v26, v27);
                    v50.i64[0] = vdupq_laneq_s64(v32, 1).u64[0];
                    v50.i64[1] = *(_QWORD *)(v22 + 168);
                    v51.i64[0] = vdupq_laneq_s64(v35, 1).u64[0];
                    v51.i64[1] = *(_QWORD *)(v22 + 264);
                    v52 = vextq_s8(v49, v49, 8uLL).u64[0];
                    v53 = vextq_s8(v51, v51, 8uLL).u64[0];
                    v54 = vextq_s8(v50, v50, 8uLL).u64[0];
                    v55 = (int8x16_t)vzip1q_s64(v30, v28);
                    v56 = (int8x16_t)vzip1q_s64(v33, *(int64x2_t *)(v22 + 176));
                    v57 = (int8x16_t)vzip1q_s64(v36, *(int64x2_t *)(v22 + 272));
                    v58 = vextq_s8(v57, v57, 8uLL).u64[0];
                    v59 = vextq_s8(v56, v56, 8uLL).u64[0];
                    v60 = vextq_s8(v55, v55, 8uLL).u64[0];
                    v61 = (int8x16_t)vzip2q_s64(v30, v28);
                    v62.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
                    v62.i64[1] = *(_QWORD *)(v22 + 184);
                    v63.i64[0] = vdupq_laneq_s64(v36, 1).u64[0];
                    v63.i64[1] = *(_QWORD *)(v22 + 280);
                    v64 = vextq_s8(v61, v61, 8uLL).u64[0];
                    v65 = vextq_s8(v63, v63, 8uLL).u64[0];
                    v66 = vextq_s8(v62, v62, 8uLL).u64[0];
                    v25[1] = v38;
                    v25[2] = v39;
                    *v25 = v37;
                    v67 = (int64x2_t *)((char *)v25 + 8 * v23);
                    v67[1] = v40;
                  }
                  v67[2] = v42;
                  *v67 = v41;
                  v43.i64[1] = v48;
                  v44.i64[1] = v47;
                  v73 = (int8x16_t *)&v25[v23];
                  *v73 = v43;
                  v73[1] = v44;
                  v45.i64[1] = v46;
                  v73[2] = v45;
                  v74 = (int8x16_t *)((char *)v25 + 24 * v23);
                  v51.i64[1] = v53;
                  v50.i64[1] = v54;
                  v49.i64[1] = v52;
                  v74[1] = v50;
                  v74[2] = v51;
                  *v74 = v49;
                  v75 = (int8x16_t *)&v25[2 * v23];
                  v57.i64[1] = v58;
                  v56.i64[1] = v59;
                  v55.i64[1] = v60;
                  v75[1] = v56;
                  v75[2] = v57;
                  *v75 = v55;
                  v76 = (int8x16_t *)((char *)v25 + 40 * v23);
                  v63.i64[1] = v65;
                  v62.i64[1] = v66;
                  v76[1] = v62;
                  v76[2] = v63;
                  v61.i64[1] = v64;
                  v9 = v18;
                  *v76 = v61;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v68 = v8 + 1;
                    while (v68 != v11)
                    {
                      ++v9;
                      v69 = *v68++;
                      v19 = v69;
                      if (v69 != -1)
                      {
                        v8 = v68 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v77 = *(_QWORD *)(result + 88);
        v78 = (*(_DWORD *)(result + 112) * *a4);
        v79 = (uint64_t *)(v77 + 8 * v78);
        v80 = *(_DWORD *)(result + 8);
        v81 = v78 + v80;
        v82 = (uint64_t *)(v77 + 8 * v81);
        if (v80)
        {
          if (*v79 == -1)
          {
            v83 = 8 * v81 - 8 * v78 - 8;
            v84 = 1;
            v85 = v79;
            while (1)
            {
              v80 = v84;
              if (!v83)
                break;
              v79 = v85 + 1;
              v86 = v85[1];
              ++v84;
              v83 -= 8;
              ++v85;
              if (v86 != -1)
                goto LABEL_43;
            }
            v79 = v82;
          }
          else
          {
            v80 = 0;
          }
        }
LABEL_43:
        v87 = *a3;
        v88 = a3[1];
        while (v87 != v88 && v79 != v82)
        {
          v118 = *v87;
          if (*v87 > v80)
          {
            v119 = v79 + 1;
            while (v119 != v82)
            {
              ++v80;
              v120 = *v119++;
              if (v120 != -1 && v118 <= v80)
              {
                v79 = v119 - 1;
                goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v118 == v80)
          {
            v122 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v79);
            if (v122 == *(int8x16_t **)a2)
            {
              v98 = v122[16];
              v97 = v122[17];
              v96 = v122[14];
              v95 = v122[15];
              v94 = v122[12];
              v93 = v122[13];
              v92 = v122[10];
              v91 = v122[11];
              v104 = v122[8];
              v103 = v122[9];
              v125 = vextq_s8(v98, v98, 8uLL).u64[0];
              v126 = vextq_s8(v97, v97, 8uLL).u64[0];
              v99 = vextq_s8(v96, v96, 8uLL).u64[0];
              v100 = vextq_s8(v93, v93, 8uLL).u64[0];
              v101 = vextq_s8(v94, v94, 8uLL).u64[0];
              v123 = vextq_s8(v91, v91, 8uLL).u64[0];
              v124 = vextq_s8(v95, v95, 8uLL).u64[0];
              v102 = vextq_s8(v92, v92, 8uLL).u64[0];
              v90 = v122[6];
              v89 = v122[7];
            }
            else
            {
              v90 = v122[6];
              v89 = v122[7];
              v92 = v122[10];
              v91 = v122[11];
              v94 = v122[12];
              v93 = v122[13];
              v96 = v122[14];
              v95 = v122[15];
              v98 = v122[16];
              v97 = v122[17];
              v125 = vextq_s8(v98, v98, 8uLL).u64[0];
              v126 = vextq_s8(v97, v97, 8uLL).u64[0];
              v99 = vextq_s8(v96, v96, 8uLL).u64[0];
              v100 = vextq_s8(v93, v93, 8uLL).u64[0];
              v101 = vextq_s8(v94, v94, 8uLL).u64[0];
              v123 = vextq_s8(v91, v91, 8uLL).u64[0];
              v124 = vextq_s8(v95, v95, 8uLL).u64[0];
              v102 = vextq_s8(v92, v92, 8uLL).u64[0];
              v104 = v122[8];
              v103 = v122[9];
            }
            v106 = v122[4];
            v105 = v122[5];
            v108 = v122[2];
            v107 = v122[3];
            v110 = *v122;
            v109 = v122[1];
            v96.i64[1] = v99;
            v93.i64[1] = v100;
            v94.i64[1] = v101;
            v108.i64[1] = vextq_s8(v108, v108, 8uLL).u64[0];
            v111 = *(unsigned int *)(a2 + 16);
            v112 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v87[1] + (_DWORD)v111 * a4[1]));
            v109.i64[1] = vextq_s8(v109, v109, 8uLL).u64[0];
            v110.i64[1] = vextq_s8(v110, v110, 8uLL).u64[0];
            v105.i64[1] = vextq_s8(v105, v105, 8uLL).u64[0];
            v106.i64[1] = vextq_s8(v106, v106, 8uLL).u64[0];
            v107.i64[1] = vextq_s8(v107, v107, 8uLL).u64[0];
            v104.i64[1] = vextq_s8(v104, v104, 8uLL).u64[0];
            v89.i64[1] = vextq_s8(v89, v89, 8uLL).u64[0];
            v90.i64[1] = vextq_s8(v90, v90, 8uLL).u64[0];
            v91.i64[1] = v123;
            v92.i64[1] = v102;
            v103.i64[1] = vextq_s8(v103, v103, 8uLL).u64[0];
            v97.i64[1] = v126;
            v98.i64[1] = v125;
            v95.i64[1] = v124;
            *v112 = v110;
            v112[1] = v109;
            v112[2] = v108;
            v113 = (int8x16_t *)((char *)v112 + 8 * v111);
            *v113 = v107;
            v113[1] = v106;
            v113[2] = v105;
            v114 = &v112[v111];
            *v114 = v90;
            v114[1] = v89;
            v114[2] = v104;
            v115 = (int8x16_t *)((char *)v112 + 24 * v111);
            *v115 = v103;
            v115[1] = v92;
            v115[2] = v91;
            v116 = &v112[2 * v111];
            *v116 = v94;
            v116[1] = v93;
            v116[2] = v96;
            v117 = (int8x16_t *)((char *)v112 + 40 * v111);
            *v117 = v95;
            v117[1] = v98;
            v80 = v118;
            v117[2] = v97;
          }
          v87 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F7578(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t *v54;
  int64x2_t *v55;
  int64x2_t *v56;
  int64x2_t *v57;
  int64x2_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int64x2_t v61;
  int64x2_t *v62;
  int64x2_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  __int8 *v88;
  int64x2_t *v89;
  __int8 *v90;
  int64x2_t *v91;
  __int8 *v92;
  int64x2_t *v93;
  __int8 *v94;
  int64x2_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  unint64_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int8x16_t v124;
  int8x16_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int8x16_t v129;
  int8x16_t v130;
  unint64_t v131;
  unint64_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  uint64_t v139;
  int8x16_t *v140;
  int8x16_t v141;
  int8x16_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  int8x16_t *v146;
  int8x16_t *v147;
  int8x16_t *v148;
  int8x16_t *v149;
  int8x16_t *v150;
  int8x16_t *v151;
  __int8 *v152;
  int8x16_t *v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t v156;
  int8x16_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *(unsigned int *)(a2 + 16);
              v24 = *(int8x16_t **)a2;
              if (v20 >= v21)
              {
                v61 = *(int64x2_t *)v22;
                v62 = (int64x2_t *)((char *)v24 + 8 * v21 + 8 * (_DWORD)v23 * v20);
                v63 = *(int64x2_t *)(v22 + 32);
                v64 = *(_OWORD *)(v22 + 48);
                v65 = *(_OWORD *)(v22 + 64);
                v66 = *(_OWORD *)(v22 + 80);
                v67 = *(int64x2_t *)(v22 + 96);
                v68 = *(int64x2_t *)(v22 + 112);
                v69 = *(int64x2_t *)(v22 + 128);
                v70 = *(_OWORD *)(v22 + 144);
                v71 = *(_OWORD *)(v22 + 160);
                v72 = *(_OWORD *)(v22 + 176);
                v73 = *(int64x2_t *)(v22 + 192);
                v74 = *(int64x2_t *)(v22 + 208);
                v75 = *(int64x2_t *)(v22 + 224);
                v76 = *(_OWORD *)(v22 + 240);
                v77 = *(_OWORD *)(v22 + 256);
                v78 = *(_OWORD *)(v22 + 272);
                v79 = *(int64x2_t *)(v22 + 288);
                v80 = *(int64x2_t *)(v22 + 304);
                v81 = *(int64x2_t *)(v22 + 320);
                v82 = *(_OWORD *)(v22 + 336);
                v83 = *(_OWORD *)(v22 + 352);
                v84 = *(_OWORD *)(v22 + 368);
                v85 = *(int64x2_t *)(v22 + 384);
                v86 = *(int64x2_t *)(v22 + 400);
                v87 = *(int64x2_t *)(v22 + 416);
                v62[1] = *(int64x2_t *)(v22 + 16);
                v62[2] = v63;
                *v62 = v61;
                v88 = &v62->i8[8 * v23];
                *((_OWORD *)v88 + 1) = v65;
                *((_OWORD *)v88 + 2) = v66;
                *(_OWORD *)v88 = v64;
                v89 = &v62[v23];
                v89[1] = v68;
                v89[2] = v69;
                *v89 = v67;
                v90 = &v62->i8[24 * v23];
                *((_OWORD *)v90 + 1) = v71;
                *((_OWORD *)v90 + 2) = v72;
                *(_OWORD *)v90 = v70;
                v91 = &v62[2 * v23];
                v91[1] = v74;
                v91[2] = v75;
                *v91 = v73;
                v92 = &v62->i8[40 * v23];
                *((_OWORD *)v92 + 1) = v77;
                *((_OWORD *)v92 + 2) = v78;
                *(_OWORD *)v92 = v76;
                v93 = &v62[3 * v23];
                v93[1] = v80;
                v93[2] = v81;
                *v93 = v79;
                v94 = &v62->i8[56 * v23];
                *((_OWORD *)v94 + 1) = v83;
                *((_OWORD *)v94 + 2) = v84;
                *(_OWORD *)v94 = v82;
                v95 = &v62[4 * v23];
                v95[1] = v86;
                v95[2] = v87;
                v9 = v18;
                *v95 = v85;
              }
              else
              {
                v25 = *(int64x2_t *)(v22 + 16);
                v26 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                v28 = *(int64x2_t *)(v22 + 64);
                v27 = *(int64x2_t *)(v22 + 80);
                v29 = *(int64x2_t *)(v22 + 32);
                v30 = *(int64x2_t *)(v22 + 48);
                v32 = *(int64x2_t *)(v22 + 96);
                v31 = *(int64x2_t *)(v22 + 112);
                v34 = *(int64x2_t *)(v22 + 160);
                v33 = *(int64x2_t *)(v22 + 176);
                v35 = *(int64x2_t *)(v22 + 128);
                v36 = *(int64x2_t *)(v22 + 144);
                v38 = *(int64x2_t *)(v22 + 192);
                v37 = *(int64x2_t *)(v22 + 208);
                v40 = *(int64x2_t *)(v22 + 256);
                v39 = *(int64x2_t *)(v22 + 272);
                v41 = *(int64x2_t *)(v22 + 224);
                v42 = *(int64x2_t *)(v22 + 240);
                v44 = *(int64x2_t *)(v22 + 288);
                v43 = *(int64x2_t *)(v22 + 304);
                v46 = *(int64x2_t *)(v22 + 352);
                v45 = *(int64x2_t *)(v22 + 368);
                v47 = *(int64x2_t *)(v22 + 320);
                v48 = *(int64x2_t *)(v22 + 336);
                v50 = *(_OWORD *)(v22 + 400);
                v49 = *(_OWORD *)(v22 + 416);
                v51 = *(_OWORD *)(v22 + 384);
                v52 = vzip1q_s64(*(int64x2_t *)v22, v30);
                v53 = vzip2q_s64(*(int64x2_t *)v22, v30);
                v26[2] = vzip1q_s64(v38, v42);
                v26[3] = vzip1q_s64(v44, v48);
                v26[4].i64[0] = v51;
                *v26 = v52;
                v26[1] = vzip1q_s64(v32, v36);
                v54 = (int64x2_t *)((char *)v26 + 8 * v23);
                v54[2] = vzip2q_s64(v38, v42);
                v54[3] = vzip2q_s64(v44, v48);
                *v54 = v53;
                v54[1] = vzip2q_s64(v32, v36);
                v54[4].i64[0] = *((_QWORD *)&v51 + 1);
                v55 = &v26[v23];
                v55[4].i64[0] = v50;
                v55[2] = vzip1q_s64(v37, v40);
                v55[3] = vzip1q_s64(v43, v46);
                *v55 = vzip1q_s64(v25, v28);
                v55[1] = vzip1q_s64(v31, v34);
                v56 = (int64x2_t *)((char *)v26 + 24 * v23);
                v56[4].i64[0] = *((_QWORD *)&v50 + 1);
                v56[2] = vzip2q_s64(v37, v40);
                v56[3] = vzip2q_s64(v43, v46);
                *v56 = vzip2q_s64(v25, v28);
                v56[1] = vzip2q_s64(v31, v34);
                v57 = &v26[2 * v23];
                v57[4].i64[0] = v49;
                v57[2] = vzip1q_s64(v41, v39);
                v57[3] = vzip1q_s64(v47, v45);
                *v57 = vzip1q_s64(v29, v27);
                v57[1] = vzip1q_s64(v35, v33);
                v58 = (int64x2_t *)((char *)v26 + 40 * v23);
                v58[4].i64[0] = *((_QWORD *)&v49 + 1);
                v58[2] = vzip2q_s64(v41, v39);
                v58[3] = vzip2q_s64(v47, v45);
                v9 = v18;
                *v58 = vzip2q_s64(v29, v27);
                v58[1] = vzip2q_s64(v35, v33);
              }
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v59 = v8 + 1;
                while (v59 != v11)
                {
                  ++v9;
                  v60 = *v59++;
                  v19 = v60;
                  if (v60 != -1)
                  {
                    v8 = v59 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v96 = *(_QWORD *)(result + 88);
        v97 = (*(_DWORD *)(result + 112) * *a4);
        v98 = (uint64_t *)(v96 + 8 * v97);
        v99 = *(_DWORD *)(result + 8);
        v100 = v97 + v99;
        v101 = (uint64_t *)(v96 + 8 * v100);
        if (v99)
        {
          if (*v98 == -1)
          {
            v102 = 8 * v100 - 8 * v97 - 8;
            v103 = 1;
            v104 = v98;
            while (1)
            {
              v99 = v103;
              if (!v102)
                break;
              v98 = v104 + 1;
              v105 = v104[1];
              ++v103;
              v102 -= 8;
              ++v104;
              if (v105 != -1)
                goto LABEL_42;
            }
            v98 = v101;
          }
          else
          {
            v99 = 0;
          }
        }
LABEL_42:
        v106 = *a3;
        v107 = a3[1];
        while (v106 != v107 && v98 != v101)
        {
          v154 = *v106;
          if (*v106 > v99)
          {
            v155 = v98 + 1;
            while (v155 != v101)
            {
              ++v99;
              v156 = *v155++;
              if (v156 != -1 && v154 <= v99)
              {
                v98 = v155 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v154 == v99)
          {
            v158 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v98);
            if (v158 == *(int8x16_t **)a2)
            {
              v113 = v158[17];
              v182 = v158[25];
              v183 = v158[26];
              v112 = vextq_s8(v183, v183, 8uLL).u64[0];
              v169 = vextq_s8(v182, v182, 8uLL).u64[0];
              v115 = v158[15];
              v114 = v158[16];
              v180 = v158[19];
              v181 = v158[24];
              v168 = vextq_s8(v181, v181, 8uLL).u64[0];
              v177 = v158[22];
              v178 = v158[23];
              v174 = vextq_s8(v178, v178, 8uLL).u64[0];
              v175 = v158[20];
              v173 = vextq_s8(v177, v177, 8uLL).u64[0];
              v110 = v158[13];
              v116 = v158[14];
              v176 = v158[21];
              v172 = vextq_s8(v176, v176, 8uLL).u64[0];
              v167 = vextq_s8(v175, v175, 8uLL).u64[0];
              v171 = vextq_s8(v180, v180, 8uLL).u64[0];
              v117 = v158[11];
              v111 = v158[12];
              v179 = v158[18];
              v170 = vextq_s8(v179, v179, 8uLL).u64[0];
              v166 = vextq_s8(v113, v113, 8uLL).u64[0];
              v165 = vextq_s8(v114, v114, 8uLL).u64[0];
              v119 = v158[9];
              v118 = v158[10];
              v164 = vextq_s8(v115, v115, 8uLL).u64[0];
              v163 = vextq_s8(v116, v116, 8uLL).u64[0];
              v162 = vextq_s8(v110, v110, 8uLL).u64[0];
              v108 = v158[7];
              v120 = v158[8];
              v160 = vextq_s8(v111, v111, 8uLL).u64[0];
              v161 = vextq_s8(v117, v117, 8uLL).u64[0];
              v159 = vextq_s8(v118, v118, 8uLL).u64[0];
              v124 = v158[5];
              v109 = v158[6];
              v121 = vextq_s8(v119, v119, 8uLL).u64[0];
              v122 = vextq_s8(v120, v120, 8uLL).u64[0];
              v123 = vextq_s8(v108, v108, 8uLL).u64[0];
              v129 = v158[3];
              v125 = v158[4];
              v126 = vextq_s8(v109, v109, 8uLL).u64[0];
              v127 = vextq_s8(v124, v124, 8uLL).u64[0];
              v128 = vextq_s8(v125, v125, 8uLL).u64[0];
              v133 = v158[1];
              v130 = v158[2];
              v131 = vextq_s8(v129, v129, 8uLL).u64[0];
              v132 = vextq_s8(v130, v130, 8uLL).u64[0];
              v134 = *v158;
            }
            else
            {
              v109 = v158[6];
              v108 = v158[7];
              v111 = v158[12];
              v110 = v158[13];
              v182 = v158[25];
              v183 = v158[26];
              v112 = vextq_s8(v183, v183, 8uLL).u64[0];
              v180 = v158[19];
              v181 = v158[24];
              v168 = vextq_s8(v181, v181, 8uLL).u64[0];
              v169 = vextq_s8(v182, v182, 8uLL).u64[0];
              v177 = v158[22];
              v178 = v158[23];
              v173 = vextq_s8(v177, v177, 8uLL).u64[0];
              v174 = vextq_s8(v178, v178, 8uLL).u64[0];
              v175 = v158[20];
              v176 = v158[21];
              v171 = vextq_s8(v180, v180, 8uLL).u64[0];
              v172 = vextq_s8(v176, v176, 8uLL).u64[0];
              v114 = v158[16];
              v113 = v158[17];
              v179 = v158[18];
              v170 = vextq_s8(v179, v179, 8uLL).u64[0];
              v166 = vextq_s8(v113, v113, 8uLL).u64[0];
              v167 = vextq_s8(v175, v175, 8uLL).u64[0];
              v116 = v158[14];
              v115 = v158[15];
              v164 = vextq_s8(v115, v115, 8uLL).u64[0];
              v165 = vextq_s8(v114, v114, 8uLL).u64[0];
              v162 = vextq_s8(v110, v110, 8uLL).u64[0];
              v163 = vextq_s8(v116, v116, 8uLL).u64[0];
              v118 = v158[10];
              v117 = v158[11];
              v160 = vextq_s8(v111, v111, 8uLL).u64[0];
              v161 = vextq_s8(v117, v117, 8uLL).u64[0];
              v159 = vextq_s8(v118, v118, 8uLL).u64[0];
              v120 = v158[8];
              v119 = v158[9];
              v121 = vextq_s8(v119, v119, 8uLL).u64[0];
              v122 = vextq_s8(v120, v120, 8uLL).u64[0];
              v123 = vextq_s8(v108, v108, 8uLL).u64[0];
              v125 = v158[4];
              v124 = v158[5];
              v126 = vextq_s8(v109, v109, 8uLL).u64[0];
              v127 = vextq_s8(v124, v124, 8uLL).u64[0];
              v128 = vextq_s8(v125, v125, 8uLL).u64[0];
              v130 = v158[2];
              v129 = v158[3];
              v131 = vextq_s8(v129, v129, 8uLL).u64[0];
              v132 = vextq_s8(v130, v130, 8uLL).u64[0];
              v134 = *v158;
              v133 = v158[1];
            }
            v135.i64[0] = v183.i64[0];
            v135.i64[1] = v112;
            v136.i64[0] = v182.i64[0];
            v136.i64[1] = v169;
            v137.i64[0] = v181.i64[0];
            v137.i64[1] = v168;
            v116.i64[1] = v163;
            v110.i64[1] = v162;
            v111.i64[1] = v160;
            v130.i64[1] = v132;
            v133.i64[1] = vextq_s8(v133, v133, 8uLL).u64[0];
            v134.i64[1] = vextq_s8(v134, v134, 8uLL).u64[0];
            v124.i64[1] = v127;
            v125.i64[1] = v128;
            v129.i64[1] = v131;
            v120.i64[1] = v122;
            v108.i64[1] = v123;
            v109.i64[1] = v126;
            v117.i64[1] = v161;
            v118.i64[1] = v159;
            v119.i64[1] = v121;
            v113.i64[1] = v166;
            v114.i64[1] = v165;
            v115.i64[1] = v164;
            v138.i64[0] = v175.i64[0];
            v138.i64[1] = v167;
            v139 = *(unsigned int *)(a2 + 16);
            v140 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v106[1] + (_DWORD)v139 * a4[1]));
            v141.i64[0] = v180.i64[0];
            v141.i64[1] = v171;
            v142.i64[0] = v179.i64[0];
            v142.i64[1] = v170;
            *(_QWORD *)&v143 = v178.i64[0];
            *((_QWORD *)&v143 + 1) = v174;
            *(_QWORD *)&v144 = v177.i64[0];
            *((_QWORD *)&v144 + 1) = v173;
            *(_QWORD *)&v145 = v176.i64[0];
            *((_QWORD *)&v145 + 1) = v172;
            *v140 = v134;
            v140[1] = v133;
            v140[2] = v130;
            v146 = (int8x16_t *)((char *)v140 + 8 * v139);
            *v146 = v129;
            v146[1] = v125;
            v146[2] = v124;
            v147 = &v140[v139];
            *v147 = v109;
            v147[1] = v108;
            v147[2] = v120;
            v148 = (int8x16_t *)((char *)v140 + 24 * v139);
            *v148 = v119;
            v148[1] = v118;
            v148[2] = v117;
            v149 = &v140[2 * v139];
            *v149 = v111;
            v149[1] = v110;
            v149[2] = v116;
            v150 = (int8x16_t *)((char *)v140 + 40 * v139);
            *v150 = v115;
            v150[1] = v114;
            v150[2] = v113;
            v151 = &v140[3 * v139];
            *v151 = v142;
            v151[1] = v141;
            v151[2] = v138;
            v152 = &v140->i8[56 * v139];
            *(_OWORD *)v152 = v145;
            *((_OWORD *)v152 + 1) = v144;
            *((_OWORD *)v152 + 2) = v143;
            v153 = &v140[4 * v139];
            *v153 = v137;
            v153[1] = v136;
            v99 = v154;
            v153[2] = v135;
          }
          v106 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F7CC8(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t *v36;
  int64x2_t *v37;
  int64x2_t *v38;
  int64x2_t *v39;
  int64x2_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int64x2_t v43;
  int64x2_t *v44;
  int64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  __int8 *v52;
  int64x2_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint64_t v78;
  int8x16_t *v79;
  int8x16_t *v80;
  int8x16_t *v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  int8x16_t *v86;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *(unsigned int *)(a2 + 16);
              v24 = *(int8x16_t **)a2;
              if (v20 >= v21)
              {
                v43 = *(int64x2_t *)v22;
                v44 = (int64x2_t *)((char *)v24 + 8 * v21 + 8 * (_DWORD)v23 * v20);
                v45 = *(int64x2_t *)(v22 + 32);
                v46 = *(_OWORD *)(v22 + 48);
                v47 = *(_OWORD *)(v22 + 64);
                v48 = *(_OWORD *)(v22 + 80);
                v49 = *(int64x2_t *)(v22 + 96);
                v50 = *(int64x2_t *)(v22 + 112);
                v51 = *(int64x2_t *)(v22 + 128);
                v44[1] = *(int64x2_t *)(v22 + 16);
                v44[2] = v45;
                *v44 = v43;
                v52 = &v44->i8[8 * v23];
                *((_OWORD *)v52 + 1) = v47;
                *((_OWORD *)v52 + 2) = v48;
                *(_OWORD *)v52 = v46;
                v53 = &v44[v23];
                v53[1] = v50;
                v53[2] = v51;
                *v53 = v49;
              }
              else
              {
                v25 = *(int64x2_t *)(v22 + 16);
                v26 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                v28 = *(int64x2_t *)(v22 + 64);
                v27 = *(int64x2_t *)(v22 + 80);
                v29 = *(int64x2_t *)(v22 + 32);
                v30 = *(int64x2_t *)(v22 + 48);
                v32 = *(_OWORD *)(v22 + 112);
                v31 = *(_OWORD *)(v22 + 128);
                v33 = *(_OWORD *)(v22 + 96);
                v34 = vzip1q_s64(*(int64x2_t *)v22, v30);
                v35 = vzip2q_s64(*(int64x2_t *)v22, v30);
                v26[1].i64[0] = v33;
                *v26 = v34;
                v36 = (int64x2_t *)((char *)v26 + 8 * v23);
                v36[1].i64[0] = *((_QWORD *)&v33 + 1);
                *v36 = v35;
                v37 = &v26[v23];
                v37[1].i64[0] = v32;
                *v37 = vzip1q_s64(v25, v28);
                v38 = (int64x2_t *)((char *)v26 + 24 * v23);
                v38[1].i64[0] = *((_QWORD *)&v32 + 1);
                *v38 = vzip2q_s64(v25, v28);
                v39 = &v26[2 * v23];
                v39[1].i64[0] = v31;
                *v39 = vzip1q_s64(v29, v27);
                v40 = (int64x2_t *)((char *)v26 + 40 * v23);
                v40[1].i64[0] = *((_QWORD *)&v31 + 1);
                *v40 = vzip2q_s64(v29, v27);
              }
              v9 = v18;
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v41 = v8 + 1;
                while (v41 != v11)
                {
                  ++v9;
                  v42 = *v41++;
                  v19 = v42;
                  if (v42 != -1)
                  {
                    v8 = v41 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v54 = *(_QWORD *)(result + 88);
        v55 = (*(_DWORD *)(result + 112) * *a4);
        v56 = (uint64_t *)(v54 + 8 * v55);
        v57 = *(_DWORD *)(result + 8);
        v58 = v55 + v57;
        v59 = (uint64_t *)(v54 + 8 * v58);
        if (v57)
        {
          if (*v56 == -1)
          {
            v60 = 8 * v58 - 8 * v55 - 8;
            v61 = 1;
            v62 = v56;
            while (1)
            {
              v57 = v61;
              if (!v60)
                break;
              v56 = v62 + 1;
              v63 = v62[1];
              ++v61;
              v60 -= 8;
              ++v62;
              if (v63 != -1)
                goto LABEL_43;
            }
            v56 = v59;
          }
          else
          {
            v57 = 0;
          }
        }
LABEL_43:
        v64 = *a3;
        v65 = a3[1];
        while (v64 != v65 && v56 != v59)
        {
          v82 = *v64;
          if (*v64 > v57)
          {
            v83 = v56 + 1;
            while (v83 != v59)
            {
              ++v57;
              v84 = *v83++;
              if (v84 != -1 && v82 <= v57)
              {
                v56 = v83 - 1;
                goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v82 == v57)
          {
            v86 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v56);
            if (v86 == *(int8x16_t **)a2)
            {
              v70 = v86[7];
              v72 = v86[8];
              v76 = v86[5];
              v71 = v86[6];
              v68 = v86[3];
              v77 = v86[4];
              v66 = v86[1];
              v69 = v86[2];
              v73 = vextq_s8(v72, v72, 8uLL).u64[0];
              v74 = vextq_s8(v70, v70, 8uLL).u64[0];
              v75 = vextq_s8(v71, v71, 8uLL).u64[0];
              v67 = *v86;
            }
            else
            {
              v67 = *v86;
              v66 = v86[1];
              v69 = v86[2];
              v68 = v86[3];
              v71 = v86[6];
              v70 = v86[7];
              v72 = v86[8];
              v73 = vextq_s8(v72, v72, 8uLL).u64[0];
              v74 = vextq_s8(v70, v70, 8uLL).u64[0];
              v75 = vextq_s8(v71, v71, 8uLL).u64[0];
              v77 = v86[4];
              v76 = v86[5];
            }
            v78 = *(unsigned int *)(a2 + 16);
            v79 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v64[1] + (_DWORD)v78 * a4[1]));
            v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
            v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
            v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
            v76.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
            v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
            v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
            v72.i64[1] = v73;
            v70.i64[1] = v74;
            v71.i64[1] = v75;
            *v79 = v67;
            v79[1] = v66;
            v79[2] = v69;
            v80 = (int8x16_t *)((char *)v79 + 8 * v78);
            *v80 = v68;
            v80[1] = v77;
            v80[2] = v76;
            v81 = &v79[v78];
            *v81 = v71;
            v81[1] = v70;
            v81[2] = v72;
            v57 = v82;
          }
          v64 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F8084(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  int8x16_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v24 = *((unsigned int *)a2 + 4);
                v25 = *a2;
                v27 = v23[1];
                v26 = v23[2];
                v28 = *v23;
                v29 = vextq_s8(v26, v26, 8uLL).u64[0];
                v30 = vextq_s8(v27, v27, 8uLL).u64[0];
                v31 = vextq_s8(v28, v28, 8uLL).u64[0];
                if (v21 >= v22)
                {
                  v35 = (int8x16_t *)(v25 + 8 * (v22 + (_DWORD)v24 * v21));
                  v28.i64[1] = v31;
                  v27.i64[1] = v30;
                  *v35 = v28;
                  v35[1] = v27;
                  v26.i64[1] = v29;
                  v35[2] = v26;
                }
                else
                {
                  v32 = (_QWORD *)(v25 + 8 * (v21 + (_DWORD)v24 * v22));
                  *v32 = v28.i64[0];
                  v32[v24] = v31;
                  v32[2 * v24] = v27.i64[0];
                  v32[3 * v24] = v30;
                  v32[4 * v24] = v26.i64[0];
                  v32[5 * v24] = v29;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v33 = v8 + 1;
                  while (v33 != v11)
                  {
                    ++v12;
                    v34 = *v33++;
                    v20 = v34;
                    if (v34 != -1)
                    {
                      v8 = v33 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v36 = *(_QWORD *)(result + 88);
        v37 = (*(_DWORD *)(result + 112) * *a4);
        v38 = (uint64_t *)(v36 + 8 * v37);
        v39 = *(_DWORD *)(result + 8);
        v40 = (v37 + v39);
        v41 = (uint64_t *)(v36 + 8 * v40);
        if (v39 && *v38 == -1)
        {
          v53 = 8 * v40 - 8 * v37 - 8;
          v54 = 1;
          v55 = v38;
          while (1)
          {
            v42 = v54;
            if (!v53)
              break;
            v38 = v55 + 1;
            v56 = v55[1];
            ++v54;
            v53 -= 8;
            ++v55;
            if (v56 != -1)
              goto LABEL_38;
          }
          v38 = v41;
        }
        else
        {
          v42 = 0;
        }
LABEL_38:
        v43 = *a3;
        v44 = a3[1];
        while (v43 != v44 && v38 != v41)
        {
          v45 = *v43;
          if (*v43 > v42)
          {
            v46 = v38 + 1;
            while (v46 != v41)
            {
              ++v42;
              v47 = *v46++;
              if (v47 != -1 && v45 <= v42)
              {
                v38 = v46 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v45 == v42)
          {
            v49 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v38);
            v50 = (_OWORD *)(*a2 + 8 * (v43[1] + *((_DWORD *)a2 + 4) * a4[1]));
            v51 = v49[2];
            v52 = *v49;
            v50[1] = v49[1];
            v50[2] = v51;
            *v50 = v52;
            v42 = v45;
          }
          v43 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F8358(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  int64x2_t *v40;
  int64x2_t *v41;
  int64x2_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t *v46;
  int64x2_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int8 *v57;
  int64x2_t *v58;
  __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint64_t v84;
  int8x16_t *v85;
  int8x16_t *v86;
  int8x16_t *v87;
  int8x16_t *v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  int8x16_t *v93;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(unsigned int *)(a2 + 16);
                  v24 = *(int8x16_t **)a2;
                  if (v20 >= v21)
                  {
                    v45 = *(int64x2_t *)v22;
                    v46 = (int64x2_t *)((char *)v24 + 8 * v21 + 8 * (_DWORD)v23 * v20);
                    v47 = *(int64x2_t *)(v22 + 32);
                    v48 = *(_OWORD *)(v22 + 48);
                    v49 = *(_OWORD *)(v22 + 64);
                    v50 = *(_OWORD *)(v22 + 80);
                    v51 = *(int64x2_t *)(v22 + 96);
                    v52 = *(int64x2_t *)(v22 + 112);
                    v53 = *(int64x2_t *)(v22 + 128);
                    v54 = *(_OWORD *)(v22 + 144);
                    v55 = *(_OWORD *)(v22 + 160);
                    v56 = *(_OWORD *)(v22 + 176);
                    v46[1] = *(int64x2_t *)(v22 + 16);
                    v46[2] = v47;
                    *v46 = v45;
                    v57 = &v46->i8[8 * v23];
                    *((_OWORD *)v57 + 1) = v49;
                    *((_OWORD *)v57 + 2) = v50;
                    *(_OWORD *)v57 = v48;
                    v58 = &v46[v23];
                    v58[1] = v52;
                    v58[2] = v53;
                    *v58 = v51;
                    v59 = &v46->i8[24 * v23];
                    *((_OWORD *)v59 + 1) = v55;
                    *((_OWORD *)v59 + 2) = v56;
                    v9 = v18;
                    *(_OWORD *)v59 = v54;
                  }
                  else
                  {
                    v25 = *(int64x2_t *)(v22 + 16);
                    v26 = (int64x2_t *)((char *)v24 + 8 * v20 + 8 * (_DWORD)v23 * v21);
                    v28 = *(int64x2_t *)(v22 + 64);
                    v27 = *(int64x2_t *)(v22 + 80);
                    v29 = *(int64x2_t *)(v22 + 32);
                    v30 = *(int64x2_t *)(v22 + 48);
                    v32 = *(int64x2_t *)(v22 + 96);
                    v31 = *(int64x2_t *)(v22 + 112);
                    v34 = *(int64x2_t *)(v22 + 160);
                    v33 = *(int64x2_t *)(v22 + 176);
                    v35 = *(int64x2_t *)(v22 + 128);
                    v36 = *(int64x2_t *)(v22 + 144);
                    v37 = vzip2q_s64(*(int64x2_t *)v22, v30);
                    *v26 = vzip1q_s64(*(int64x2_t *)v22, v30);
                    v26[1] = vzip1q_s64(v32, v36);
                    v38 = (int64x2_t *)((char *)v26 + 8 * v23);
                    *v38 = v37;
                    v38[1] = vzip2q_s64(v32, v36);
                    v39 = &v26[v23];
                    *v39 = vzip1q_s64(v25, v28);
                    v39[1] = vzip1q_s64(v31, v34);
                    v40 = (int64x2_t *)((char *)v26 + 24 * v23);
                    *v40 = vzip2q_s64(v25, v28);
                    v40[1] = vzip2q_s64(v31, v34);
                    v41 = &v26[2 * v23];
                    *v41 = vzip1q_s64(v29, v27);
                    v41[1] = vzip1q_s64(v35, v33);
                    v42 = (int64x2_t *)((char *)v26 + 40 * v23);
                    v9 = v18;
                    *v42 = vzip2q_s64(v29, v27);
                    v42[1] = vzip2q_s64(v35, v33);
                  }
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v43 = v8 + 1;
                    while (v43 != v11)
                    {
                      ++v9;
                      v44 = *v43++;
                      v19 = v44;
                      if (v44 != -1)
                      {
                        v8 = v43 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v60 = *(_QWORD *)(result + 88);
        v61 = (*(_DWORD *)(result + 112) * *a4);
        v62 = (uint64_t *)(v60 + 8 * v61);
        v63 = *(_DWORD *)(result + 8);
        v64 = v61 + v63;
        v65 = (uint64_t *)(v60 + 8 * v64);
        if (v63)
        {
          if (*v62 == -1)
          {
            v66 = 8 * v64 - 8 * v61 - 8;
            v67 = 1;
            v68 = v62;
            while (1)
            {
              v63 = v67;
              if (!v66)
                break;
              v62 = v68 + 1;
              v69 = v68[1];
              ++v67;
              v66 -= 8;
              ++v68;
              if (v69 != -1)
                goto LABEL_42;
            }
            v62 = v65;
          }
          else
          {
            v63 = 0;
          }
        }
LABEL_42:
        v70 = *a3;
        v71 = a3[1];
        while (v70 != v71 && v62 != v65)
        {
          v89 = *v70;
          if (*v70 > v63)
          {
            v90 = v62 + 1;
            while (v90 != v65)
            {
              ++v63;
              v91 = *v90++;
              if (v91 != -1 && v89 <= v63)
              {
                v62 = v90 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v89 == v63)
          {
            v93 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v62);
            if (v93 == *(int8x16_t **)a2)
            {
              v81 = v93[10];
              v80 = v93[11];
              v79 = v93[8];
              v78 = v93[9];
              v77 = v93[6];
              v76 = v93[7];
              v75 = v93[4];
              v74 = v93[5];
              v73 = v93[2];
              v72 = v93[3];
            }
            else
            {
              v73 = v93[2];
              v72 = v93[3];
              v75 = v93[4];
              v74 = v93[5];
              v77 = v93[6];
              v76 = v93[7];
              v79 = v93[8];
              v78 = v93[9];
              v81 = v93[10];
              v80 = v93[11];
            }
            v83 = *v93;
            v82 = v93[1];
            v84 = *(unsigned int *)(a2 + 16);
            v85 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v70[1] + (_DWORD)v84 * a4[1]));
            v73.i64[1] = vextq_s8(v73, v73, 8uLL).u64[0];
            v82.i64[1] = vextq_s8(v82, v82, 8uLL).u64[0];
            v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
            v74.i64[1] = vextq_s8(v74, v74, 8uLL).u64[0];
            v75.i64[1] = vextq_s8(v75, v75, 8uLL).u64[0];
            v72.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
            v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
            v76.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
            v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
            v80.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
            v81.i64[1] = vextq_s8(v81, v81, 8uLL).u64[0];
            v78.i64[1] = vextq_s8(v78, v78, 8uLL).u64[0];
            *v85 = v83;
            v85[1] = v82;
            v85[2] = v73;
            v86 = (int8x16_t *)((char *)v85 + 8 * v84);
            *v86 = v72;
            v86[1] = v75;
            v86[2] = v74;
            v87 = &v85[v84];
            *v87 = v77;
            v87[1] = v76;
            v87[2] = v79;
            v88 = (int8x16_t *)((char *)v85 + 24 * v84);
            *v88 = v78;
            v88[1] = v81;
            v88[2] = v80;
            v63 = v89;
          }
          v70 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F8750(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t *v57;
  int64x2_t *v58;
  int64x2_t *v59;
  int64x2_t *v60;
  int64x2_t *v61;
  int64x2_t *v62;
  int64x2_t *v63;
  int64x2_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int64x2_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int *v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  __int128 v125;
  __int128 v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int8x16_t *v149;
  uint64_t v150;
  int8x16_t *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  unint64_t v173;
  int8x16_t v174;
  unint64_t v175;
  int8x16_t v176;
  __int128 v177;
  __int128 v178;
  int8x16_t v179;
  int8x16_t v180;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              v25.i64[0] = *(_QWORD *)(v22 + 64);
              if (v20 >= v21)
              {
                v67 = v24 + 8 * (v21 + (_DWORD)v23 * v20);
                v68 = *(_OWORD *)(v22 + 48);
                v69 = *(int64x2_t *)v22;
                v70 = *(_OWORD *)(v22 + 16);
                v71 = *(_OWORD *)(v22 + 72);
                v72 = *(_OWORD *)(v22 + 88);
                v73 = *(_OWORD *)(v22 + 104);
                v74 = *(_OWORD *)(v22 + 120);
                v75 = *(_QWORD *)(v22 + 136);
                v76 = *(_OWORD *)(v22 + 144);
                v77 = *(_OWORD *)(v22 + 160);
                v78 = *(_OWORD *)(v22 + 176);
                v79 = *(_OWORD *)(v22 + 192);
                v80 = *(_QWORD *)(v22 + 208);
                v81 = *(_OWORD *)(v22 + 232);
                v82 = *(_OWORD *)(v22 + 248);
                v83 = *(_OWORD *)(v22 + 216);
                v84 = *(_OWORD *)(v22 + 264);
                v85 = *(_QWORD *)(v22 + 280);
                v86 = *(_OWORD *)(v22 + 288);
                v87 = *(_OWORD *)(v22 + 304);
                v88 = *(_OWORD *)(v22 + 320);
                v89 = *(_OWORD *)(v22 + 336);
                v90 = *(_QWORD *)(v22 + 352);
                v91 = *(_OWORD *)(v22 + 360);
                v92 = *(_OWORD *)(v22 + 376);
                v93 = *(_OWORD *)(v22 + 392);
                v94 = *(_OWORD *)(v22 + 408);
                v95 = *(_QWORD *)(v22 + 424);
                *(_OWORD *)(v67 + 32) = *(_OWORD *)(v22 + 32);
                *(_OWORD *)(v67 + 48) = v68;
                *(_QWORD *)(v67 + 64) = v25.i64[0];
                *(int64x2_t *)v67 = v69;
                *(_OWORD *)(v67 + 16) = v70;
                v96 = v67 + 8 * v23;
                *(_QWORD *)(v96 + 64) = v75;
                *(_OWORD *)(v96 + 32) = v73;
                *(_OWORD *)(v96 + 48) = v74;
                *(_OWORD *)v96 = v71;
                *(_OWORD *)(v96 + 16) = v72;
                v97 = v67 + 16 * v23;
                *(_QWORD *)(v97 + 64) = v80;
                *(_OWORD *)(v97 + 32) = v78;
                *(_OWORD *)(v97 + 48) = v79;
                *(_OWORD *)v97 = v76;
                *(_OWORD *)(v97 + 16) = v77;
                v98 = v67 + 24 * v23;
                *(_QWORD *)(v98 + 64) = v85;
                *(_OWORD *)(v98 + 32) = v82;
                *(_OWORD *)(v98 + 48) = v84;
                *(_OWORD *)v98 = v83;
                *(_OWORD *)(v98 + 16) = v81;
                v99 = v67 + 32 * v23;
                *(_QWORD *)(v99 + 64) = v90;
                *(_OWORD *)(v99 + 32) = v88;
                *(_OWORD *)(v99 + 48) = v89;
                *(_OWORD *)v99 = v86;
                *(_OWORD *)(v99 + 16) = v87;
                v100 = v67 + 40 * v23;
                *(_QWORD *)(v100 + 64) = v95;
                *(_OWORD *)(v100 + 32) = v93;
                *(_OWORD *)(v100 + 48) = v94;
                v9 = v18;
                *(_OWORD *)v100 = v91;
                *(_OWORD *)(v100 + 16) = v92;
              }
              else
              {
                v26 = (int64x2_t *)(v24 + 8 * (v20 + (_DWORD)v23 * v21));
                v28 = *(int64x2_t *)(v22 + 32);
                v27 = *(int64x2_t *)(v22 + 48);
                v29 = *(int64x2_t *)(v22 + 16);
                v30 = *(int64x2_t *)(v22 + 120);
                v31 = *(int64x2_t *)(v22 + 104);
                v32 = *(int64x2_t *)(v22 + 88);
                v33 = *(int64x2_t *)(v22 + 72);
                v34.i64[0] = *(_QWORD *)(v22 + 208);
                v36 = *(int64x2_t *)(v22 + 176);
                v35 = *(int64x2_t *)(v22 + 192);
                v38 = *(int64x2_t *)(v22 + 144);
                v37 = *(int64x2_t *)(v22 + 160);
                v39 = *(int64x2_t *)(v22 + 216);
                v40 = *(int64x2_t *)(v22 + 264);
                v41 = *(int64x2_t *)(v22 + 248);
                v42 = *(int64x2_t *)(v22 + 232);
                v43.i64[0] = *(_QWORD *)(v22 + 352);
                v45 = *(int64x2_t *)(v22 + 320);
                v44 = *(int64x2_t *)(v22 + 336);
                v47 = *(int64x2_t *)(v22 + 288);
                v46 = *(int64x2_t *)(v22 + 304);
                v48 = *(int64x2_t *)(v22 + 392);
                v49 = *(int64x2_t *)(v22 + 408);
                v50 = *(int64x2_t *)(v22 + 376);
                v51 = vzip1q_s64(*(int64x2_t *)v22, v33);
                v52 = vzip1q_s64(v47, *(int64x2_t *)(v22 + 360));
                v53 = vzip1q_s64(v38, v39);
                v54 = vzip2q_s64(*(int64x2_t *)v22, v33);
                v55 = vzip2q_s64(v38, v39);
                v56 = vzip2q_s64(v47, *(int64x2_t *)(v22 + 360));
                v25.i64[1] = *(_QWORD *)(v22 + 136);
                v34.i64[1] = *(_QWORD *)(v22 + 280);
                v43.i64[1] = *(_QWORD *)(v22 + 424);
                v26[1] = v53;
                v26[2] = v52;
                *v26 = v51;
                v57 = (int64x2_t *)((char *)v26 + 8 * v23);
                v57[1] = v55;
                v57[2] = v56;
                *v57 = v54;
                v58 = &v26[v23];
                v58[1] = vzip1q_s64(v37, v42);
                v58[2] = vzip1q_s64(v46, v50);
                *v58 = vzip1q_s64(v29, v32);
                v59 = (int64x2_t *)((char *)v26 + 24 * v23);
                v59[1] = vzip2q_s64(v37, v42);
                v59[2] = vzip2q_s64(v46, v50);
                *v59 = vzip2q_s64(v29, v32);
                v60 = &v26[2 * v23];
                v60[1] = vzip1q_s64(v36, v41);
                v60[2] = vzip1q_s64(v45, v48);
                *v60 = vzip1q_s64(v28, v31);
                v61 = (int64x2_t *)((char *)v26 + 40 * v23);
                v61[1] = vzip2q_s64(v36, v41);
                v61[2] = vzip2q_s64(v45, v48);
                *v61 = vzip2q_s64(v28, v31);
                v62 = &v26[3 * v23];
                v62[1] = vzip1q_s64(v35, v40);
                v62[2] = vzip1q_s64(v44, v49);
                *v62 = vzip1q_s64(v27, v30);
                v63 = (int64x2_t *)((char *)v26 + 56 * v23);
                v63[1] = vzip2q_s64(v35, v40);
                v63[2] = vzip2q_s64(v44, v49);
                *v63 = vzip2q_s64(v27, v30);
                v64 = &v26[4 * v23];
                v64[1] = v34;
                v64[2] = v43;
                v9 = v18;
                *v64 = v25;
              }
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v65 = v8 + 1;
                while (v65 != v11)
                {
                  ++v9;
                  v66 = *v65++;
                  v19 = v66;
                  if (v66 != -1)
                  {
                    v8 = v65 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v101 = *(_QWORD *)(result + 88);
        v102 = (*(_DWORD *)(result + 112) * *a4);
        v103 = (uint64_t *)(v101 + 8 * v102);
        v104 = *(_DWORD *)(result + 8);
        v105 = v102 + v104;
        v106 = (uint64_t *)(v101 + 8 * v105);
        if (v104)
        {
          if (*v103 == -1)
          {
            v107 = 8 * v105 - 8 * v102 - 8;
            v108 = 1;
            v109 = v103;
            while (1)
            {
              v104 = v108;
              if (!v107)
                break;
              v103 = v109 + 1;
              v110 = v109[1];
              ++v108;
              v107 -= 8;
              ++v109;
              if (v110 != -1)
                goto LABEL_42;
            }
            v103 = v106;
          }
          else
          {
            v104 = 0;
          }
        }
LABEL_42:
        v111 = *a3;
        v112 = a3[1];
        while (v111 != v112 && v103 != v106)
        {
          v153 = *v111;
          if (*v111 > v104)
          {
            v154 = v103 + 1;
            while (v154 != v106)
            {
              ++v104;
              v155 = *v154++;
              if (v155 != -1 && v153 <= v104)
              {
                v103 = v154 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v153 == v104)
          {
            v157 = *(_QWORD *)(result + 16) + 8 * *v103;
            if (v157 == *a2)
            {
              v127 = *(int8x16_t *)(v157 + 336);
              v129 = *(int8x16_t *)(v157 + 304);
              v128 = *(int8x16_t *)(v157 + 320);
              v170 = *(int8x16_t *)(v157 + 400);
              v171 = *(int8x16_t *)(v157 + 416);
              v137 = vextq_s8(v171, v171, 8uLL).u64[0];
              *(_QWORD *)&v178 = vextq_s8(v170, v170, 8uLL).u64[0];
              v179 = *(int8x16_t *)(v157 + 368);
              v130 = *(int8x16_t *)(v157 + 288);
              v180 = *(int8x16_t *)(v157 + 384);
              *(_QWORD *)&v140 = vextq_s8(v180, v180, 8uLL).u64[0];
              *(_QWORD *)&v141 = vextq_s8(v179, v179, 8uLL).u64[0];
              v176 = *(int8x16_t *)(v157 + 352);
              *(_QWORD *)&v142 = vextq_s8(v176, v176, 8uLL).u64[0];
              v161 = vextq_s8(v127, v127, 8uLL).u64[0];
              v160 = vextq_s8(v128, v128, 8uLL).u64[0];
              v159 = vextq_s8(v129, v129, 8uLL).u64[0];
              v124 = *(int8x16_t *)(v157 + 176);
              v123 = *(int8x16_t *)(v157 + 192);
              v158 = vextq_s8(v130, v130, 8uLL).u64[0];
              v168 = *(int8x16_t *)(v157 + 272);
              v169 = *(int8x16_t *)(v157 + 256);
              v174 = *(int8x16_t *)(v157 + 208);
              v175 = vextq_s8(v168, v168, 8uLL).u64[0];
              *(_QWORD *)&v177 = vextq_s8(v169, v169, 8uLL).u64[0];
              v122 = *(int8x16_t *)(v157 + 144);
              v121 = *(int8x16_t *)(v157 + 160);
              v166 = *(int8x16_t *)(v157 + 224);
              v167 = *(int8x16_t *)(v157 + 240);
              *(_QWORD *)&v126 = vextq_s8(v167, v167, 8uLL).u64[0];
              *(_QWORD *)&v125 = vextq_s8(v166, v166, 8uLL).u64[0];
              *(_QWORD *)&v143 = vextq_s8(v174, v174, 8uLL).u64[0];
              v131 = vextq_s8(v123, v123, 8uLL).u64[0];
              v132 = vextq_s8(v124, v124, 8uLL).u64[0];
              v133 = vextq_s8(v121, v121, 8uLL).u64[0];
              v134 = vextq_s8(v122, v122, 8uLL).u64[0];
              v164 = *(int8x16_t *)(v157 + 112);
              v165 = *(int8x16_t *)(v157 + 128);
              v173 = vextq_s8(v165, v165, 8uLL).u64[0];
              *(_QWORD *)&v120 = vextq_s8(v164, v164, 8uLL).u64[0];
              v115 = *(int8x16_t *)(v157 + 48);
              v162 = *(int8x16_t *)(v157 + 80);
              v163 = *(int8x16_t *)(v157 + 96);
              *(_QWORD *)&v119 = vextq_s8(v163, v163, 8uLL).u64[0];
              *(_QWORD *)&v118 = vextq_s8(v162, v162, 8uLL).u64[0];
              v172 = *(int8x16_t *)(v157 + 64);
              *(_QWORD *)&v117 = vextq_s8(v172, v172, 8uLL).u64[0];
              v113 = *(int8x16_t *)(v157 + 16);
              v116 = *(int8x16_t *)(v157 + 32);
              v135 = vextq_s8(v115, v115, 8uLL).u64[0];
              v136 = vextq_s8(v116, v116, 8uLL).u64[0];
              v114 = *(int8x16_t *)v157;
              v138 = vextq_s8(v113, v113, 8uLL).u64[0];
              v139 = vextq_s8(v114, v114, 8uLL).u64[0];
            }
            else
            {
              v114 = *(int8x16_t *)v157;
              v113 = *(int8x16_t *)(v157 + 16);
              v116 = *(int8x16_t *)(v157 + 32);
              v115 = *(int8x16_t *)(v157 + 48);
              v117 = *(_OWORD *)(v157 + 72);
              v118 = *(_OWORD *)(v157 + 88);
              v119 = *(_OWORD *)(v157 + 104);
              v120 = *(_OWORD *)(v157 + 120);
              v122 = *(int8x16_t *)(v157 + 144);
              v121 = *(int8x16_t *)(v157 + 160);
              v124 = *(int8x16_t *)(v157 + 176);
              v123 = *(int8x16_t *)(v157 + 192);
              v165.i64[0] = *(_QWORD *)(v157 + 128);
              v125 = *(_OWORD *)(v157 + 232);
              v164.i64[0] = *(_QWORD *)(v157 + 112);
              v126 = *(_OWORD *)(v157 + 248);
              v163.i64[0] = *(_QWORD *)(v157 + 96);
              v162.i64[0] = *(_QWORD *)(v157 + 80);
              v169.i64[0] = *(_QWORD *)(v157 + 256);
              v167.i64[0] = *(_QWORD *)(v157 + 240);
              v166.i64[0] = *(_QWORD *)(v157 + 224);
              v177 = *(_OWORD *)(v157 + 264);
              v168.i64[0] = *(_QWORD *)(v157 + 272);
              v178 = *(_OWORD *)(v157 + 408);
              v171.i64[0] = *(_QWORD *)(v157 + 416);
              v170.i64[0] = *(_QWORD *)(v157 + 400);
              v128 = *(int8x16_t *)(v157 + 320);
              v127 = *(int8x16_t *)(v157 + 336);
              v179.i64[0] = *(_QWORD *)(v157 + 368);
              v180.i64[0] = *(_QWORD *)(v157 + 384);
              v160 = vextq_s8(v128, v128, 8uLL).u64[0];
              v161 = vextq_s8(v127, v127, 8uLL).u64[0];
              v130 = *(int8x16_t *)(v157 + 288);
              v129 = *(int8x16_t *)(v157 + 304);
              v158 = vextq_s8(v130, v130, 8uLL).u64[0];
              v159 = vextq_s8(v129, v129, 8uLL).u64[0];
              v173 = *(_QWORD *)(v157 + 136);
              v131 = vextq_s8(v123, v123, 8uLL).u64[0];
              v172.i64[0] = *(_QWORD *)(v157 + 64);
              v132 = vextq_s8(v124, v124, 8uLL).u64[0];
              v133 = vextq_s8(v121, v121, 8uLL).u64[0];
              v175 = *(_QWORD *)(v157 + 280);
              v134 = vextq_s8(v122, v122, 8uLL).u64[0];
              v174.i64[0] = *(_QWORD *)(v157 + 208);
              v135 = vextq_s8(v115, v115, 8uLL).u64[0];
              v136 = vextq_s8(v116, v116, 8uLL).u64[0];
              v137 = *(_QWORD *)(v157 + 424);
              v138 = vextq_s8(v113, v113, 8uLL).u64[0];
              v139 = vextq_s8(v114, v114, 8uLL).u64[0];
              v176.i64[0] = *(_QWORD *)(v157 + 352);
              v140 = *(_OWORD *)(v157 + 392);
              v141 = *(_OWORD *)(v157 + 376);
              v142 = *(_OWORD *)(v157 + 360);
              v143 = *(_OWORD *)(v157 + 216);
            }
            v115.i64[1] = v135;
            v116.i64[1] = v136;
            v113.i64[1] = v138;
            v114.i64[1] = v139;
            *((_QWORD *)&v120 + 1) = v165.i64[0];
            *((_QWORD *)&v119 + 1) = v164.i64[0];
            *((_QWORD *)&v118 + 1) = v163.i64[0];
            *((_QWORD *)&v117 + 1) = v162.i64[0];
            v123.i64[1] = v131;
            v124.i64[1] = v132;
            v121.i64[1] = v133;
            v122.i64[1] = v134;
            *(_QWORD *)&v145 = v177;
            *(_QWORD *)&v144 = v178;
            *((_QWORD *)&v145 + 1) = v168.i64[0];
            *((_QWORD *)&v126 + 1) = v169.i64[0];
            *((_QWORD *)&v125 + 1) = v167.i64[0];
            *((_QWORD *)&v143 + 1) = v166.i64[0];
            v127.i64[1] = v161;
            v128.i64[1] = v160;
            v129.i64[1] = v159;
            v130.i64[1] = v158;
            *((_QWORD *)&v144 + 1) = v171.i64[0];
            *((_QWORD *)&v140 + 1) = v170.i64[0];
            v146 = *((unsigned int *)a2 + 4);
            v147 = *a2 + 8 * (v111[1] + (_DWORD)v146 * a4[1]);
            *((_QWORD *)&v141 + 1) = v180.i64[0];
            *((_QWORD *)&v142 + 1) = v179.i64[0];
            *(int8x16_t *)v147 = v114;
            *(int8x16_t *)(v147 + 16) = v113;
            *(_QWORD *)(v147 + 64) = v172.i64[0];
            *(int8x16_t *)(v147 + 32) = v116;
            *(int8x16_t *)(v147 + 48) = v115;
            v148 = v147 + 8 * v146;
            *(_OWORD *)v148 = v117;
            *(_OWORD *)(v148 + 16) = v118;
            *(_QWORD *)(v148 + 64) = v173;
            *(_OWORD *)(v148 + 32) = v119;
            *(_OWORD *)(v148 + 48) = v120;
            v149 = (int8x16_t *)(v147 + 16 * v146);
            *v149 = v122;
            v149[1] = v121;
            v149[4].i64[0] = v174.i64[0];
            v149[2] = v124;
            v149[3] = v123;
            v150 = v147 + 24 * v146;
            *(_OWORD *)v150 = v143;
            *(_OWORD *)(v150 + 16) = v125;
            *(_QWORD *)(v150 + 64) = v175;
            *(_OWORD *)(v150 + 32) = v126;
            *(_OWORD *)(v150 + 48) = v145;
            v151 = (int8x16_t *)(v147 + 32 * v146);
            *v151 = v130;
            v151[1] = v129;
            v151[4].i64[0] = v176.i64[0];
            v151[2] = v128;
            v151[3] = v127;
            v152 = v147 + 40 * v146;
            *(_OWORD *)v152 = v142;
            *(_OWORD *)(v152 + 16) = v141;
            *(_QWORD *)(v152 + 64) = v137;
            v104 = v153;
            *(_OWORD *)(v152 + 32) = v140;
            *(_OWORD *)(v152 + 48) = v144;
          }
          v111 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F8F18(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  unint64_t v42;
  int64x2_t v43;
  __int128 v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  int8x16_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74;
  int8x16_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int *v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  __int128 v167;
  __int128 v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int8x16_t *v207;
  uint64_t v208;
  int8x16_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  __int128 v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int8x16_t v226;
  unint64_t v227;
  int8x16_t v228;
  __int128 v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  int8x16_t v234;
  unint64_t v235;
  int8x16_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  int8x16_t v240;
  unint64_t v241;
  int8x16_t v242;
  unint64_t v243;
  int8x16_t v244;
  unint64_t v245;
  int8x16_t v246;
  unint64_t v247;
  int8x16_t v248;
  unint64_t v249;
  int8x16_t v250;
  uint64_t v251;
  int8x16_t v252;
  uint64_t v253;
  int8x16_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  int8x16_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int8x16_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  int8x16_t v270;
  uint64_t v271;
  int8x16_t v272;
  unint64_t v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  __int128 v277;
  int64x2_t v278;
  uint64_t v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int64x2_t v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  int64x2_t v287;
  uint64_t v288;
  int8x16_t v289;
  int64x2_t v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  __int128 v302;
  int64x2_t v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  int64x2_t v308;
  __int128 v309;
  uint64_t v310;
  __int128 v311;
  int8x16_t v312;
  int8x16_t v313;
  uint64_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              if (v20 >= v21)
              {
                v314 = *(_QWORD *)(v22 + 64);
                v61 = v24 + 8 * (v21 + (_DWORD)v23 * v20);
                v91 = *(_OWORD *)(v22 + 32);
                v305 = *(_OWORD *)(v22 + 48);
                v308 = *(int64x2_t *)v22;
                v316 = *(int8x16_t *)(v22 + 88);
                v318 = *(int8x16_t *)(v22 + 72);
                v311 = *(_OWORD *)(v22 + 104);
                v92 = *(_OWORD *)(v22 + 120);
                v93 = *(_QWORD *)(v22 + 136);
                v291 = *(_QWORD *)(v22 + 208);
                v95 = *(int8x16_t *)(v22 + 176);
                v94 = *(int8x16_t *)(v22 + 192);
                v96 = *(int8x16_t *)(v22 + 144);
                v97 = *(int8x16_t *)(v22 + 160);
                v276 = *(_QWORD *)(v22 + 280);
                v68 = *(int8x16_t *)(v22 + 248);
                v98 = *(int8x16_t *)(v22 + 232);
                v99 = *(int8x16_t *)(v22 + 216);
                v100 = *(int8x16_t *)(v22 + 264);
                v281.i64[0] = *(_QWORD *)(v22 + 352);
                v101 = *(int8x16_t *)(v22 + 320);
                v71 = *(int8x16_t *)(v22 + 336);
                v72 = *(int8x16_t *)(v22 + 288);
                v81 = *(int8x16_t *)(v22 + 304);
                v273 = *(_QWORD *)(v22 + 424);
                v102 = *(int8x16_t *)(v22 + 392);
                v103 = *(int8x16_t *)(v22 + 408);
                v104 = *(int8x16_t *)(v22 + 360);
                v75 = *(int8x16_t *)(v22 + 376);
                v284 = *(_QWORD *)(v22 + 496);
                v105 = *(int8x16_t *)(v22 + 464);
                v106 = *(int8x16_t *)(v22 + 480);
                v108 = *(int8x16_t *)(v22 + 432);
                v107 = *(int8x16_t *)(v22 + 448);
                v271 = *(_QWORD *)(v22 + 568);
                v57 = *(int8x16_t *)(v22 + 536);
                v60 = *(int8x16_t *)(v22 + 552);
                v109 = *(int8x16_t *)(v22 + 504);
                v110 = *(int8x16_t *)(v22 + 520);
                v293 = *(_QWORD *)(v22 + 640);
                v111 = *(int8x16_t *)(v22 + 608);
                v112 = *(int8x16_t *)(v22 + 624);
                v114 = *(int8x16_t *)(v22 + 576);
                v113 = *(int8x16_t *)(v22 + 592);
                *(_OWORD *)(v61 + 16) = *(_OWORD *)(v22 + 16);
                *(_OWORD *)(v61 + 32) = v91;
                *(_OWORD *)(v61 + 48) = v305;
                *(_QWORD *)(v61 + 64) = v314;
                *(int64x2_t *)v61 = v308;
                v115 = v61 + 8 * v23;
                *(_QWORD *)(v115 + 64) = v93;
                *(_OWORD *)(v115 + 32) = v311;
                *(_OWORD *)(v115 + 48) = v92;
                *(int8x16_t *)(v115 + 16) = v316;
                *(int8x16_t *)v115 = v318;
                v310 = v94.i64[0];
                v313.i64[0] = v95.i64[0];
                v85 = vextq_s8(v94, v94, 8uLL).u64[0];
                v66 = vextq_s8(v95, v95, 8uLL).u64[0];
                v316.i64[0] = v97.i64[0];
                v318.i64[0] = v99.i64[0];
                v65 = vextq_s8(v97, v97, 8uLL).u64[0];
                v251 = v96.i64[0];
                v253 = v103.i64[0];
                v233 = vextq_s8(v96, v96, 8uLL).u64[0];
                v301 = v68.i64[0];
                v304 = v98.i64[0];
                v70 = vextq_s8(v68, v68, 8uLL).u64[0];
                v74 = vextq_s8(v98, v98, 8uLL).u64[0];
                v67 = vextq_s8(v99, v99, 8uLL).u64[0];
                v68.i64[0] = v100.i64[0];
                v69 = vextq_s8(v100, v100, 8uLL).u64[0];
                v259 = v71.i64[0];
                v261 = v72.i64[0];
                v97.i64[0] = vextq_s8(v71, v71, 8uLL).u64[0];
                v71.i64[0] = v101.i64[0];
                v307 = v81.i64[0];
                v78 = vextq_s8(v81, v81, 8uLL).u64[0];
                v94.i64[0] = vextq_s8(v72, v72, 8uLL).u64[0];
                *(_QWORD *)&v91 = vextq_s8(v103, v103, 8uLL).u64[0];
                v76 = vextq_s8(v101, v101, 8uLL).u64[0];
                v72.i64[0] = v102.i64[0];
                v249 = vextq_s8(v102, v102, 8uLL).u64[0];
                v255 = v106.i64[0];
                v257 = v75.i64[0];
                v247 = vextq_s8(v75, v75, 8uLL).u64[0];
                v288 = v104.i64[0];
                v81.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
                v243 = vextq_s8(v106, v106, 8uLL).u64[0];
                v75.i64[0] = v105.i64[0];
                v241 = vextq_s8(v105, v105, 8uLL).u64[0];
                v86 = v91;
                v77 = v107.i64[0];
                v239 = vextq_s8(v107, v107, 8uLL).u64[0];
                v73 = v97.i64[0];
                v279 = v108.i64[0];
                v245 = vextq_s8(v108, v108, 8uLL).u64[0];
                v82 = vextq_s8(v57, v57, 8uLL).u64[0];
                v83 = v110.i64[0];
                v84 = vextq_s8(v110, v110, 8uLL).u64[0];
                v88 = v81.i64[0];
                v80 = v109.i64[0];
                v235 = vextq_s8(v60, v60, 8uLL).u64[0];
                v237 = vextq_s8(v109, v109, 8uLL).u64[0];
                v295 = v112.i64[0];
                v297 = v111.i64[0];
                v109.i64[0] = vextq_s8(v112, v112, 8uLL).u64[0];
                v79 = v94.i64[0];
                v263 = v109.i64[0];
                v265 = vextq_s8(v111, v111, 8uLL).u64[0];
                v81.i64[0] = v113.i64[0];
                v299 = v114.i64[0];
                v267 = vextq_s8(v113, v113, 8uLL).u64[0];
                v269 = vextq_s8(v114, v114, 8uLL).u64[0];
                v87 = v233;
              }
              else
              {
                v25 = *(int64x2_t *)(v22 + 32);
                v26 = *(int64x2_t *)(v22 + 48);
                v27 = *(int64x2_t *)(v22 + 16);
                v28 = *(int64x2_t *)(v22 + 120);
                v29 = *(int64x2_t *)(v22 + 104);
                v30 = *(int64x2_t *)(v22 + 88);
                v31 = *(int64x2_t *)(v22 + 72);
                v32 = *(int64x2_t *)(v22 + 176);
                v33 = *(int64x2_t *)(v22 + 192);
                v34 = *(int64x2_t *)(v22 + 144);
                v35 = *(int64x2_t *)(v22 + 160);
                v37 = *(int64x2_t *)(v22 + 320);
                v36 = *(int64x2_t *)(v22 + 336);
                v39 = *(int64x2_t *)(v22 + 288);
                v38 = *(int64x2_t *)(v22 + 304);
                v40 = *(int64x2_t *)(v22 + 448);
                v41 = *(int64x2_t *)(v22 + 464);
                v42 = vdupq_laneq_s64(v34, 1).u64[0];
                v68.i64[1] = *(_QWORD *)(v22 + 224);
                v43 = *(int64x2_t *)(v22 + 432);
                v290 = vzip1q_s64(v34, *(int64x2_t *)(v22 + 216));
                v283 = vzip1q_s64(v39, *(int64x2_t *)(v22 + 360));
                v34.i64[0] = vdupq_laneq_s64(v39, 1).u64[0];
                v34.i64[1] = *(_QWORD *)(v22 + 368);
                v278 = vzip1q_s64(v43, *(int64x2_t *)(v22 + 504));
                *(_QWORD *)&v44 = vdupq_laneq_s64(v43, 1).u64[0];
                *((_QWORD *)&v44 + 1) = *(_QWORD *)(v22 + 512);
                v287 = vzip1q_s64(*(int64x2_t *)v22, v31);
                v303 = vzip2q_s64(*(int64x2_t *)v22, v31);
                v43.i64[0] = vdupq_laneq_s64(v35, 1).u64[0];
                v43.i64[1] = *(_QWORD *)(v22 + 240);
                v313 = (int8x16_t)vzip1q_s64(v38, *(int64x2_t *)(v22 + 376));
                v316 = (int8x16_t)vzip1q_s64(v35, *(int64x2_t *)(v22 + 232));
                v45.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
                v45.i64[1] = *(_QWORD *)(v22 + 384);
                v46 = (int8x16_t)vzip1q_s64(v27, v30);
                v318 = (int8x16_t)vzip2q_s64(v27, v30);
                v47 = (int8x16_t)vzip1q_s64(v40, *(int64x2_t *)(v22 + 520));
                v40.i64[0] = vdupq_laneq_s64(v40, 1).u64[0];
                v75.i64[1] = *(_QWORD *)(v22 + 528);
                v48 = (int8x16_t)vzip1q_s64(v32, *(int64x2_t *)(v22 + 248));
                v49.i64[0] = vdupq_laneq_s64(v32, 1).u64[0];
                v49.i64[1] = *(_QWORD *)(v22 + 256);
                v71 = (int8x16_t)vzip1q_s64(v25, v29);
                v50 = (int8x16_t)vzip2q_s64(v25, v29);
                v51 = (int8x16_t)vzip1q_s64(v37, *(int64x2_t *)(v22 + 392));
                v37.i64[0] = vdupq_laneq_s64(v37, 1).u64[0];
                v37.i64[1] = *(_QWORD *)(v22 + 400);
                v52 = (int8x16_t)vzip1q_s64(v41, *(int64x2_t *)(v22 + 536));
                v41.i64[0] = vdupq_laneq_s64(v41, 1).u64[0];
                v41.i64[1] = *(_QWORD *)(v22 + 544);
                v53 = (int8x16_t)vzip1q_s64(v26, v28);
                v81 = (int8x16_t)vzip2q_s64(v26, v28);
                v54 = (int8x16_t)vzip1q_s64(v33, *(int64x2_t *)(v22 + 264));
                v55.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
                v55.i64[1] = *(_QWORD *)(v22 + 272);
                v56 = (int8x16_t)vzip1q_s64(v36, *(int64x2_t *)(v22 + 408));
                v57.i64[0] = vdupq_laneq_s64(v36, 1).u64[0];
                v57.i64[1] = *(_QWORD *)(v22 + 416);
                v58 = *(int64x2_t *)(v22 + 480);
                v59 = (int8x16_t)vzip1q_s64(v58, *(int64x2_t *)(v22 + 552));
                v60.i64[0] = vdupq_laneq_s64(v58, 1).u64[0];
                v60.i64[1] = *(_QWORD *)(v22 + 560);
                v61 = v24 + 8 * (v20 + (_DWORD)v23 * v21);
                v299 = *(_QWORD *)(v22 + 64);
                v269 = *(_QWORD *)(v22 + 136);
                v25.i64[0] = *(_QWORD *)(v22 + 208);
                v267 = *(_QWORD *)(v22 + 280);
                v297 = *(_QWORD *)(v22 + 352);
                v265 = *(_QWORD *)(v22 + 424);
                v295 = *(_QWORD *)(v22 + 496);
                v263 = *(_QWORD *)(v22 + 568);
                v293 = *(_QWORD *)(v22 + 640);
                v62 = *(int8x16_t *)(v22 + 624);
                v281 = *(int8x16_t *)(v22 + 608);
                v63 = *(_OWORD *)(v22 + 576);
                v72 = *(int8x16_t *)(v22 + 592);
                *(int64x2_t *)(v61 + 32) = v283;
                *(int64x2_t *)(v61 + 48) = v278;
                *(int64x2_t *)v61 = v287;
                *(int64x2_t *)(v61 + 16) = v290;
                v64 = v61 + 8 * v23;
                *(_QWORD *)(v61 + 64) = v63;
                *(_QWORD *)(v64 + 64) = *((_QWORD *)&v63 + 1);
                *(int64x2_t *)(v64 + 32) = v34;
                *(_OWORD *)(v64 + 48) = v44;
                *(int64x2_t *)v64 = v303;
                *(int8x16_t *)(v64 + 16) = v68;
                v65 = vextq_s8(v316, v316, 8uLL).u64[0];
                v251 = v46.i64[0];
                v30.i64[0] = vextq_s8(v46, v46, 8uLL).u64[0];
                v307 = v48.i64[0];
                v310 = v47.i64[0];
                v66 = vextq_s8(v313, v313, 8uLL).u64[0];
                v67 = vextq_s8(v318, v318, 8uLL).u64[0];
                v68.i64[0] = v40.i64[0];
                v69 = vextq_s8(v75, v75, 8uLL).u64[0];
                v301 = v45.i64[0];
                v304 = v43.i64[0];
                v70 = vextq_s8(v45, v45, 8uLL).u64[0];
                v45.i64[0] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
                v288 = v50.i64[0];
                v291 = v72.i64[0];
                v276 = vextq_s8(v72, v72, 8uLL).u64[0];
                v279 = v53.i64[0];
                v259 = v52.i64[0];
                v261 = v71.i64[0];
                v43.i64[0] = vextq_s8(v71, v71, 8uLL).u64[0];
                *(_QWORD *)&v63 = vextq_s8(v52, v52, 8uLL).u64[0];
                v71.i64[0] = v51.i64[0];
                v253 = v41.i64[0];
                v255 = v59.i64[0];
                v52.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
                v72.i64[0] = v37.i64[0];
                v41.i64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
                v73 = v63;
                v257 = v49.i64[0];
                v247 = vextq_s8(v49, v49, 8uLL).u64[0];
                v249 = v41.i64[0];
                v74 = v45.i64[0];
                v273 = vextq_s8(v281, v281, 8uLL).u64[0];
                v243 = vextq_s8(v59, v59, 8uLL).u64[0];
                v245 = vextq_s8(v53, v53, 8uLL).u64[0];
                v75.i64[0] = v56.i64[0];
                *(_QWORD *)&v63 = vextq_s8(v56, v56, 8uLL).u64[0];
                v76 = vextq_s8(v51, v51, 8uLL).u64[0];
                v77 = v54.i64[0];
                v239 = vextq_s8(v54, v54, 8uLL).u64[0];
                v241 = v63;
                v78 = vextq_s8(v48, v48, 8uLL).u64[0];
                v79 = v43.i64[0];
                v80 = v81.i64[0];
                v53.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
                v81.i64[0] = v25.i64[0];
                v235 = vextq_s8(v60, v60, 8uLL).u64[0];
                v237 = v53.i64[0];
                v82 = vextq_s8(v57, v57, 8uLL).u64[0];
                v83 = v55.i64[0];
                v84 = vextq_s8(v55, v55, 8uLL).u64[0];
                v284 = v62.i64[0];
                v25.i64[0] = vextq_s8(v62, v62, 8uLL).u64[0];
                v85 = vextq_s8(v47, v47, 8uLL).u64[0];
                v86 = v52.i64[0];
                v271 = v25.i64[0];
                v87 = v30.i64[0];
                v88 = vextq_s8(v50, v50, 8uLL).u64[0];
              }
              *(_QWORD *)&v116 = v251;
              *((_QWORD *)&v116 + 1) = v87;
              *(_QWORD *)&v117 = v313.i64[0];
              *(_QWORD *)&v118 = v316.i64[0];
              *((_QWORD *)&v118 + 1) = v65;
              *((_QWORD *)&v117 + 1) = v66;
              *(_QWORD *)&v119 = v310;
              *((_QWORD *)&v119 + 1) = v85;
              v68.i64[1] = v69;
              *(_QWORD *)&v121 = v301;
              *(_QWORD *)&v120 = v304;
              *((_QWORD *)&v121 + 1) = v70;
              *((_QWORD *)&v120 + 1) = v74;
              *(_QWORD *)&v122 = v318.i64[0];
              *((_QWORD *)&v122 + 1) = v67;
              *(_QWORD *)&v124 = v259;
              *(_QWORD *)&v123 = v261;
              *((_QWORD *)&v124 + 1) = v73;
              v71.i64[1] = v76;
              *(_QWORD *)&v125 = v307;
              *((_QWORD *)&v125 + 1) = v78;
              *((_QWORD *)&v123 + 1) = v79;
              *(_QWORD *)&v127 = v253;
              *(_QWORD *)&v126 = v255;
              *((_QWORD *)&v127 + 1) = v86;
              v72.i64[1] = v249;
              *(_QWORD *)&v128 = v257;
              *((_QWORD *)&v128 + 1) = v247;
              *(_QWORD *)&v129 = v288;
              *((_QWORD *)&v129 + 1) = v88;
              *((_QWORD *)&v126 + 1) = v243;
              v75.i64[1] = v241;
              *(_QWORD *)&v130 = v77;
              *((_QWORD *)&v130 + 1) = v239;
              *(_QWORD *)&v131 = v279;
              *((_QWORD *)&v131 + 1) = v245;
              v60.i64[1] = v235;
              v57.i64[1] = v82;
              *(_QWORD *)&v132 = v83;
              *((_QWORD *)&v132 + 1) = v84;
              *(_QWORD *)&v133 = v80;
              *((_QWORD *)&v133 + 1) = v237;
              *(_QWORD *)&v135 = v295;
              *(_QWORD *)&v134 = v297;
              *((_QWORD *)&v135 + 1) = v263;
              *((_QWORD *)&v134 + 1) = v265;
              v81.i64[1] = v267;
              *(_QWORD *)&v136 = v299;
              *((_QWORD *)&v136 + 1) = v269;
              v137 = v61 + 16 * v23;
              *(_OWORD *)v137 = v116;
              *(_OWORD *)(v137 + 16) = v118;
              *(_OWORD *)(v137 + 32) = v117;
              *(_OWORD *)(v137 + 48) = v119;
              *(_QWORD *)(v137 + 64) = v291;
              v138 = v61 + 24 * v23;
              *(_QWORD *)(v138 + 64) = v276;
              *(_OWORD *)(v138 + 32) = v121;
              *(int8x16_t *)(v138 + 48) = v68;
              *(_OWORD *)v138 = v122;
              *(_OWORD *)(v138 + 16) = v120;
              v139 = v61 + 32 * v23;
              *(_QWORD *)(v139 + 64) = v281.i64[0];
              *(int8x16_t *)(v139 + 32) = v71;
              *(_OWORD *)(v139 + 48) = v124;
              *(_OWORD *)v139 = v123;
              *(_OWORD *)(v139 + 16) = v125;
              v140 = v61 + 40 * v23;
              *(_QWORD *)(v140 + 64) = v273;
              *(int8x16_t *)(v140 + 32) = v72;
              *(_OWORD *)(v140 + 48) = v127;
              *(_OWORD *)v140 = v129;
              *(_OWORD *)(v140 + 16) = v128;
              v141 = v61 + 48 * v23;
              *(_QWORD *)(v141 + 64) = v284;
              *(int8x16_t *)(v141 + 32) = v75;
              *(_OWORD *)(v141 + 48) = v126;
              *(_OWORD *)v141 = v131;
              *(_OWORD *)(v141 + 16) = v130;
              v142 = v61 + 56 * v23;
              *(_QWORD *)(v142 + 64) = v271;
              *(int8x16_t *)(v142 + 32) = v57;
              *(int8x16_t *)(v142 + 48) = v60;
              *(_OWORD *)v142 = v133;
              *(_OWORD *)(v142 + 16) = v132;
              v143 = v61 + (v23 << 6);
              *(_QWORD *)(v143 + 64) = v293;
              *(_OWORD *)(v143 + 32) = v134;
              *(_OWORD *)(v143 + 48) = v135;
              v9 = v18;
              *(_OWORD *)v143 = v136;
              *(int8x16_t *)(v143 + 16) = v81;
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v89 = v8 + 1;
                while (v89 != v11)
                {
                  ++v9;
                  v90 = *v89++;
                  v19 = v90;
                  if (v90 != -1)
                  {
                    v8 = v89 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v144 = *(_QWORD *)(result + 88);
        v145 = (*(_DWORD *)(result + 112) * *a4);
        v146 = (uint64_t *)(v144 + 8 * v145);
        v147 = *(_DWORD *)(result + 8);
        v148 = v145 + v147;
        v149 = (uint64_t *)(v144 + 8 * v148);
        if (v147)
        {
          if (*v146 == -1)
          {
            v150 = 8 * v148 - 8 * v145 - 8;
            v151 = 1;
            v152 = v146;
            while (1)
            {
              v147 = v151;
              if (!v150)
                break;
              v146 = v152 + 1;
              v153 = v152[1];
              ++v151;
              v150 -= 8;
              ++v152;
              if (v153 != -1)
                goto LABEL_43;
            }
            v146 = v149;
          }
          else
          {
            v147 = 0;
          }
        }
LABEL_43:
        v154 = *a3;
        v155 = a3[1];
        while (v154 != v155 && v146 != v149)
        {
          v214 = *v154;
          if (*v154 > v147)
          {
            v215 = v146 + 1;
            while (v215 != v149)
            {
              ++v147;
              v216 = *v215++;
              if (v216 != -1 && v214 <= v147)
              {
                v146 = v215 - 1;
                goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v214 == v147)
          {
            v218 = *(_QWORD *)(result + 16) + 8 * *v146;
            if (v218 == *a2)
            {
              v317 = *(int8x16_t *)(v218 + 608);
              v319 = *(int8x16_t *)(v218 + 624);
              v232 = vextq_s8(v319, v319, 8uLL).u64[0];
              v231 = vextq_s8(v317, v317, 8uLL).u64[0];
              v312 = *(int8x16_t *)(v218 + 576);
              v315 = *(int8x16_t *)(v218 + 592);
              v230 = vextq_s8(v315, v315, 8uLL).u64[0];
              v227 = vextq_s8(v312, v312, 8uLL).u64[0];
              v250 = *(int8x16_t *)(v218 + 544);
              v252 = *(int8x16_t *)(v218 + 560);
              v268 = vextq_s8(v252, v252, 8uLL).u64[0];
              *(_QWORD *)&v296 = vextq_s8(v250, v250, 8uLL).u64[0];
              v246 = *(int8x16_t *)(v218 + 512);
              v248 = *(int8x16_t *)(v218 + 528);
              v289 = *(int8x16_t *)(v218 + 496);
              *(_QWORD *)&v292 = vextq_s8(v248, v248, 8uLL).u64[0];
              *(_QWORD *)&v298 = vextq_s8(v246, v246, 8uLL).u64[0];
              v173 = *(int8x16_t *)(v218 + 320);
              v172 = *(int8x16_t *)(v218 + 336);
              *(_QWORD *)&v294 = vextq_s8(v289, v289, 8uLL).u64[0];
              v280 = *(int8x16_t *)(v218 + 464);
              v282 = *(int8x16_t *)(v218 + 480);
              v225 = vextq_s8(v282, v282, 8uLL).u64[0];
              v224 = vextq_s8(v280, v280, 8uLL).u64[0];
              v176 = *(int8x16_t *)(v218 + 416);
              v170 = *(int8x16_t *)(v218 + 288);
              v169 = *(int8x16_t *)(v218 + 304);
              v270 = *(int8x16_t *)(v218 + 432);
              v272 = *(int8x16_t *)(v218 + 448);
              v223 = vextq_s8(v272, v272, 8uLL).u64[0];
              v222 = vextq_s8(v270, v270, 8uLL).u64[0];
              v175 = *(int8x16_t *)(v218 + 400);
              v264 = vextq_s8(v176, v176, 8uLL).u64[0];
              v266 = *(int8x16_t *)(v218 + 352);
              *(_QWORD *)&v309 = vextq_s8(v175, v175, 8uLL).u64[0];
              v242 = *(int8x16_t *)(v218 + 368);
              v244 = *(int8x16_t *)(v218 + 384);
              *(_QWORD *)&v306 = vextq_s8(v244, v244, 8uLL).u64[0];
              *(_QWORD *)&v302 = vextq_s8(v242, v242, 8uLL).u64[0];
              *(_QWORD *)&v300 = vextq_s8(v266, v266, 8uLL).u64[0];
              v220 = vextq_s8(v172, v172, 8uLL).u64[0];
              v219 = vextq_s8(v173, v173, 8uLL).u64[0];
              v165 = *(int8x16_t *)(v218 + 192);
              v177 = vextq_s8(v169, v169, 8uLL).u64[0];
              v178 = vextq_s8(v170, v170, 8uLL).u64[0];
              v238 = *(_QWORD *)(v218 + 272);
              v240 = *(int8x16_t *)(v218 + 256);
              v260 = *(int8x16_t *)(v218 + 208);
              v262 = vextq_s8(*(int8x16_t *)(v218 + 272), *(int8x16_t *)(v218 + 272), 8uLL).u64[0];
              v163 = *(int8x16_t *)(v218 + 160);
              v166 = *(int8x16_t *)(v218 + 176);
              *(_QWORD *)&v167 = vextq_s8(v240, v240, 8uLL).u64[0];
              v234 = *(int8x16_t *)(v218 + 224);
              v236 = *(int8x16_t *)(v218 + 240);
              *(_QWORD *)&v285 = vextq_s8(v236, v236, 8uLL).u64[0];
              *(_QWORD *)&v168 = vextq_s8(v234, v234, 8uLL).u64[0];
              v174 = *(int8x16_t *)(v218 + 128);
              v164 = *(int8x16_t *)(v218 + 144);
              *(_QWORD *)&v277 = vextq_s8(v260, v260, 8uLL).u64[0];
              v179 = vextq_s8(v165, v165, 8uLL).u64[0];
              v180 = vextq_s8(v166, v166, 8uLL).u64[0];
              v181 = vextq_s8(v163, v163, 8uLL).u64[0];
              v182 = vextq_s8(v164, v164, 8uLL).u64[0];
              v258 = vextq_s8(v174, v174, 8uLL).u64[0];
              v171 = *(int8x16_t *)(v218 + 80);
              v228 = *(int8x16_t *)(v218 + 112);
              *(_QWORD *)&v162 = vextq_s8(v228, v228, 8uLL).u64[0];
              v226 = *(int8x16_t *)(v218 + 96);
              *(_QWORD *)&v274 = vextq_s8(v226, v226, 8uLL).u64[0];
              *(_QWORD *)&v161 = vextq_s8(v171, v171, 8uLL).u64[0];
              v159 = *(int8x16_t *)(v218 + 32);
              v158 = *(int8x16_t *)(v218 + 48);
              v254 = *(int8x16_t *)(v218 + 64);
              *(_QWORD *)&v160 = vextq_s8(v254, v254, 8uLL).u64[0];
              v183 = vextq_s8(v158, v158, 8uLL).u64[0];
              v184 = vextq_s8(v159, v159, 8uLL).u64[0];
              v157 = *(int8x16_t *)v218;
              v156 = *(int8x16_t *)(v218 + 16);
            }
            else
            {
              v157 = *(int8x16_t *)v218;
              v156 = *(int8x16_t *)(v218 + 16);
              v159 = *(int8x16_t *)(v218 + 32);
              v158 = *(int8x16_t *)(v218 + 48);
              v160 = *(_OWORD *)(v218 + 72);
              v161 = *(_OWORD *)(v218 + 88);
              v162 = *(_OWORD *)(v218 + 120);
              v164 = *(int8x16_t *)(v218 + 144);
              v163 = *(int8x16_t *)(v218 + 160);
              v166 = *(int8x16_t *)(v218 + 176);
              v165 = *(int8x16_t *)(v218 + 192);
              v167 = *(_OWORD *)(v218 + 264);
              v168 = *(_OWORD *)(v218 + 232);
              v170 = *(int8x16_t *)(v218 + 288);
              v169 = *(int8x16_t *)(v218 + 304);
              v274 = *(_OWORD *)(v218 + 104);
              v277 = *(_OWORD *)(v218 + 216);
              v228.i64[0] = *(_QWORD *)(v218 + 112);
              v226.i64[0] = *(_QWORD *)(v218 + 96);
              v171.i64[0] = *(_QWORD *)(v218 + 80);
              v173 = *(int8x16_t *)(v218 + 320);
              v172 = *(int8x16_t *)(v218 + 336);
              v285 = *(_OWORD *)(v218 + 248);
              v240.i64[0] = *(_QWORD *)(v218 + 256);
              v236.i64[0] = *(_QWORD *)(v218 + 240);
              v234.i64[0] = *(_QWORD *)(v218 + 224);
              v238 = *(_QWORD *)(v218 + 272);
              v306 = *(_OWORD *)(v218 + 392);
              v309 = *(_OWORD *)(v218 + 408);
              v300 = *(_OWORD *)(v218 + 360);
              v302 = *(_OWORD *)(v218 + 376);
              v244.i64[0] = *(_QWORD *)(v218 + 384);
              v242.i64[0] = *(_QWORD *)(v218 + 368);
              v296 = *(_OWORD *)(v218 + 552);
              v298 = *(_OWORD *)(v218 + 520);
              v252.i64[0] = *(_QWORD *)(v218 + 560);
              v292 = *(_OWORD *)(v218 + 536);
              v294 = *(_OWORD *)(v218 + 504);
              v250.i64[0] = *(_QWORD *)(v218 + 544);
              v248.i64[0] = *(_QWORD *)(v218 + 528);
              v246.i64[0] = *(_QWORD *)(v218 + 512);
              v317 = *(int8x16_t *)(v218 + 608);
              v319 = *(int8x16_t *)(v218 + 624);
              v232 = vextq_s8(v319, v319, 8uLL).u64[0];
              v231 = vextq_s8(v317, v317, 8uLL).u64[0];
              v312 = *(int8x16_t *)(v218 + 576);
              v315 = *(int8x16_t *)(v218 + 592);
              v230 = vextq_s8(v315, v315, 8uLL).u64[0];
              v174.i64[0] = *(_QWORD *)(v218 + 128);
              v227 = vextq_s8(v312, v312, 8uLL).u64[0];
              v175.i64[0] = *(_QWORD *)(v218 + 400);
              v280 = *(int8x16_t *)(v218 + 464);
              v282 = *(int8x16_t *)(v218 + 480);
              v225 = vextq_s8(v282, v282, 8uLL).u64[0];
              v224 = vextq_s8(v280, v280, 8uLL).u64[0];
              v270 = *(int8x16_t *)(v218 + 432);
              v272 = *(int8x16_t *)(v218 + 448);
              v223 = vextq_s8(v272, v272, 8uLL).u64[0];
              v258 = *(_QWORD *)(v218 + 136);
              v222 = vextq_s8(v270, v270, 8uLL).u64[0];
              v176.i64[0] = *(_QWORD *)(v218 + 416);
              v220 = vextq_s8(v172, v172, 8uLL).u64[0];
              v254.i64[0] = *(_QWORD *)(v218 + 64);
              v219 = vextq_s8(v173, v173, 8uLL).u64[0];
              v262 = *(_QWORD *)(v218 + 280);
              v177 = vextq_s8(v169, v169, 8uLL).u64[0];
              v178 = vextq_s8(v170, v170, 8uLL).u64[0];
              v260.i64[0] = *(_QWORD *)(v218 + 208);
              v179 = vextq_s8(v165, v165, 8uLL).u64[0];
              v264 = *(_QWORD *)(v218 + 424);
              v180 = vextq_s8(v166, v166, 8uLL).u64[0];
              v181 = vextq_s8(v163, v163, 8uLL).u64[0];
              v266.i64[0] = *(_QWORD *)(v218 + 352);
              v182 = vextq_s8(v164, v164, 8uLL).u64[0];
              v268 = *(_QWORD *)(v218 + 568);
              v183 = vextq_s8(v158, v158, 8uLL).u64[0];
              v184 = vextq_s8(v159, v159, 8uLL).u64[0];
              v289.i64[0] = *(_QWORD *)(v218 + 496);
            }
            v256 = *(_QWORD *)(v218 + 640);
            v158.i64[1] = v183;
            v159.i64[1] = v184;
            v156.i64[1] = vextq_s8(v156, v156, 8uLL).u64[0];
            v157.i64[1] = vextq_s8(v157, v157, 8uLL).u64[0];
            *((_QWORD *)&v162 + 1) = v174.i64[0];
            v221 = v162;
            *(_QWORD *)&v185 = v274;
            *(_QWORD *)&v186 = v277;
            *((_QWORD *)&v185 + 1) = v228.i64[0];
            *((_QWORD *)&v161 + 1) = v226.i64[0];
            v229 = v161;
            *((_QWORD *)&v160 + 1) = v171.i64[0];
            v165.i64[1] = v179;
            v166.i64[1] = v180;
            v163.i64[1] = v181;
            v164.i64[1] = v182;
            *((_QWORD *)&v167 + 1) = v238;
            v275 = v167;
            *(_QWORD *)&v187 = v285;
            *((_QWORD *)&v187 + 1) = v240.i64[0];
            *((_QWORD *)&v168 + 1) = v236.i64[0];
            v286 = v168;
            *((_QWORD *)&v186 + 1) = v234.i64[0];
            v172.i64[1] = v220;
            v173.i64[1] = v219;
            v169.i64[1] = v177;
            v170.i64[1] = v178;
            *(_QWORD *)&v189 = v306;
            *(_QWORD *)&v188 = v309;
            *((_QWORD *)&v188 + 1) = v176.i64[0];
            *((_QWORD *)&v189 + 1) = v175.i64[0];
            *(_QWORD *)&v191 = v300;
            *(_QWORD *)&v190 = v302;
            *((_QWORD *)&v190 + 1) = v244.i64[0];
            *((_QWORD *)&v191 + 1) = v242.i64[0];
            *(_QWORD *)&v193 = v280.i64[0];
            *(_QWORD *)&v192 = v282.i64[0];
            *((_QWORD *)&v192 + 1) = v225;
            *((_QWORD *)&v193 + 1) = v224;
            *(_QWORD *)&v195 = v270.i64[0];
            *(_QWORD *)&v194 = v272.i64[0];
            *((_QWORD *)&v194 + 1) = v223;
            *((_QWORD *)&v195 + 1) = v222;
            *(_QWORD *)&v196 = v296;
            *(_QWORD *)&v197 = v298;
            *((_QWORD *)&v196 + 1) = v252.i64[0];
            *(_QWORD *)&v199 = v292;
            *(_QWORD *)&v198 = v294;
            *((_QWORD *)&v199 + 1) = v250.i64[0];
            *((_QWORD *)&v197 + 1) = v248.i64[0];
            *((_QWORD *)&v198 + 1) = v246.i64[0];
            *(_QWORD *)&v200 = v319.i64[0];
            *((_QWORD *)&v200 + 1) = v232;
            *(_QWORD *)&v201 = v317.i64[0];
            *((_QWORD *)&v201 + 1) = v231;
            *(_QWORD *)&v202 = v315.i64[0];
            *((_QWORD *)&v202 + 1) = v230;
            *(_QWORD *)&v203 = v312.i64[0];
            *((_QWORD *)&v203 + 1) = v227;
            v204 = *((unsigned int *)a2 + 4);
            v205 = *a2 + 8 * (v154[1] + (_DWORD)v204 * a4[1]);
            *(int8x16_t *)v205 = v157;
            *(int8x16_t *)(v205 + 16) = v156;
            *(_QWORD *)(v205 + 64) = v254.i64[0];
            *(int8x16_t *)(v205 + 32) = v159;
            *(int8x16_t *)(v205 + 48) = v158;
            v206 = v205 + 8 * v204;
            *(_OWORD *)v206 = v160;
            *(_OWORD *)(v206 + 16) = v229;
            *(_QWORD *)(v206 + 64) = v258;
            *(_OWORD *)(v206 + 32) = v185;
            *(_OWORD *)(v206 + 48) = v221;
            v207 = (int8x16_t *)(v205 + 16 * v204);
            *v207 = v164;
            v207[1] = v163;
            v207[4].i64[0] = v260.i64[0];
            v207[2] = v166;
            v207[3] = v165;
            v208 = v205 + 24 * v204;
            *(_OWORD *)v208 = v186;
            *(_OWORD *)(v208 + 16) = v286;
            *(_QWORD *)(v208 + 64) = v262;
            *(_OWORD *)(v208 + 32) = v187;
            *(_OWORD *)(v208 + 48) = v275;
            v209 = (int8x16_t *)(v205 + 32 * v204);
            *v209 = v170;
            v209[1] = v169;
            v209[4].i64[0] = v266.i64[0];
            v209[2] = v173;
            v209[3] = v172;
            v210 = v205 + 40 * v204;
            *(_OWORD *)v210 = v191;
            *(_OWORD *)(v210 + 16) = v190;
            *(_QWORD *)(v210 + 64) = v264;
            *(_OWORD *)(v210 + 32) = v189;
            *(_OWORD *)(v210 + 48) = v188;
            v211 = v205 + 48 * v204;
            *(_OWORD *)v211 = v195;
            *(_OWORD *)(v211 + 16) = v194;
            *(_QWORD *)(v211 + 64) = v289.i64[0];
            *(_OWORD *)(v211 + 32) = v193;
            *(_OWORD *)(v211 + 48) = v192;
            v212 = v205 + 56 * v204;
            *(_OWORD *)v212 = v198;
            *(_OWORD *)(v212 + 16) = v197;
            *(_QWORD *)(v212 + 64) = v268;
            *(_OWORD *)(v212 + 32) = v199;
            *(_OWORD *)(v212 + 48) = v196;
            v213 = v205 + (v204 << 6);
            *(_OWORD *)v213 = v203;
            *(_OWORD *)(v213 + 16) = v202;
            *(_QWORD *)(v213 + 64) = v256;
            v147 = v214;
            *(_OWORD *)(v213 + 32) = v201;
            *(_OWORD *)(v213 + 48) = v200;
          }
          v154 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8F9D14(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  int64x2_t *v42;
  int64x2_t *v43;
  int64x2_t *v44;
  int64x2_t *v45;
  int64x2_t *v46;
  int64x2_t *v47;
  int64x2_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  int64x2_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  int8x16_t v79;
  int8x16_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int8x16_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v112;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              v25.i64[0] = *(_QWORD *)(v22 + 64);
              if (v20 >= v21)
              {
                v51 = v24 + 8 * (v21 + (_DWORD)v23 * v20);
                v52 = *(_OWORD *)(v22 + 48);
                v53 = *(int64x2_t *)v22;
                v54 = *(_OWORD *)(v22 + 16);
                v55 = *(_OWORD *)(v22 + 72);
                v56 = *(_OWORD *)(v22 + 88);
                v57 = *(_OWORD *)(v22 + 104);
                v58 = *(_OWORD *)(v22 + 120);
                v59 = *(_QWORD *)(v22 + 136);
                v60 = *(_OWORD *)(v22 + 144);
                v61 = *(_OWORD *)(v22 + 160);
                v62 = *(_OWORD *)(v22 + 176);
                v63 = *(_OWORD *)(v22 + 192);
                v64 = *(_QWORD *)(v22 + 208);
                *(_OWORD *)(v51 + 32) = *(_OWORD *)(v22 + 32);
                *(_OWORD *)(v51 + 48) = v52;
                *(_QWORD *)(v51 + 64) = v25.i64[0];
                *(int64x2_t *)v51 = v53;
                *(_OWORD *)(v51 + 16) = v54;
                v65 = v51 + 8 * v23;
                *(_QWORD *)(v65 + 64) = v59;
                *(_OWORD *)(v65 + 32) = v57;
                *(_OWORD *)(v65 + 48) = v58;
                *(_OWORD *)v65 = v55;
                *(_OWORD *)(v65 + 16) = v56;
                v66 = v51 + 16 * v23;
                *(_QWORD *)(v66 + 64) = v64;
                *(_OWORD *)(v66 + 32) = v62;
                *(_OWORD *)(v66 + 48) = v63;
                v9 = v18;
                *(_OWORD *)v66 = v60;
                *(_OWORD *)(v66 + 16) = v61;
              }
              else
              {
                v26 = (int64x2_t *)(v24 + 8 * (v20 + (_DWORD)v23 * v21));
                v28 = *(int64x2_t *)(v22 + 32);
                v27 = *(int64x2_t *)(v22 + 48);
                v29 = *(int64x2_t *)(v22 + 16);
                v30 = *(int64x2_t *)(v22 + 120);
                v31 = *(int64x2_t *)(v22 + 104);
                v32 = *(int64x2_t *)(v22 + 88);
                v33 = *(int64x2_t *)(v22 + 72);
                v34 = *(_QWORD *)(v22 + 208);
                v36 = *(_OWORD *)(v22 + 176);
                v35 = *(_OWORD *)(v22 + 192);
                v38 = *(_OWORD *)(v22 + 144);
                v37 = *(_OWORD *)(v22 + 160);
                v39 = vzip1q_s64(*(int64x2_t *)v22, v33);
                v40 = vzip2q_s64(*(int64x2_t *)v22, v33);
                v25.i64[1] = *(_QWORD *)(v22 + 136);
                v26[1].i64[0] = v38;
                *v26 = v39;
                v41 = (int64x2_t *)((char *)v26 + 8 * v23);
                v41[1].i64[0] = *((_QWORD *)&v38 + 1);
                *v41 = v40;
                v42 = &v26[v23];
                v42[1].i64[0] = v37;
                *v42 = vzip1q_s64(v29, v32);
                v43 = (int64x2_t *)((char *)v26 + 24 * v23);
                v43[1].i64[0] = *((_QWORD *)&v37 + 1);
                *v43 = vzip2q_s64(v29, v32);
                v44 = &v26[2 * v23];
                v44[1].i64[0] = v36;
                *v44 = vzip1q_s64(v28, v31);
                v45 = (int64x2_t *)((char *)v26 + 40 * v23);
                v45[1].i64[0] = *((_QWORD *)&v36 + 1);
                *v45 = vzip2q_s64(v28, v31);
                v46 = &v26[3 * v23];
                v46[1].i64[0] = v35;
                *v46 = vzip1q_s64(v27, v30);
                v47 = (int64x2_t *)((char *)v26 + 56 * v23);
                v47[1].i64[0] = *((_QWORD *)&v35 + 1);
                *v47 = vzip2q_s64(v27, v30);
                v48 = &v26[4 * v23];
                v48[1].i64[0] = v34;
                v9 = v18;
                *v48 = v25;
              }
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v49 = v8 + 1;
                while (v49 != v11)
                {
                  ++v9;
                  v50 = *v49++;
                  v19 = v50;
                  if (v50 != -1)
                  {
                    v8 = v49 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v67 = *(_QWORD *)(result + 88);
        v68 = (*(_DWORD *)(result + 112) * *a4);
        v69 = (uint64_t *)(v67 + 8 * v68);
        v70 = *(_DWORD *)(result + 8);
        v71 = v68 + v70;
        v72 = (uint64_t *)(v67 + 8 * v71);
        if (v70)
        {
          if (*v69 == -1)
          {
            v73 = 8 * v71 - 8 * v68 - 8;
            v74 = 1;
            v75 = v69;
            while (1)
            {
              v70 = v74;
              if (!v73)
                break;
              v69 = v75 + 1;
              v76 = v75[1];
              ++v74;
              v73 -= 8;
              ++v75;
              if (v76 != -1)
                goto LABEL_42;
            }
            v69 = v72;
          }
          else
          {
            v70 = 0;
          }
        }
LABEL_42:
        v77 = *a3;
        v78 = a3[1];
        while (v77 != v78 && v69 != v72)
        {
          v108 = *v77;
          if (*v77 > v70)
          {
            v109 = v69 + 1;
            while (v109 != v72)
            {
              ++v70;
              v110 = *v109++;
              if (v110 != -1 && v108 <= v70)
              {
                v69 = v109 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v108 == v70)
          {
            v112 = *(_QWORD *)(result + 16) + 8 * *v69;
            if (v112 == *a2)
            {
              v88 = *(int8x16_t *)(v112 + 176);
              v87 = *(int8x16_t *)(v112 + 192);
              v86 = *(int8x16_t *)(v112 + 144);
              v85 = *(int8x16_t *)(v112 + 160);
              v90 = *(int8x16_t *)(v112 + 112);
              v89 = *(int8x16_t *)(v112 + 128);
              v92 = *(int8x16_t *)(v112 + 80);
              v91 = *(int8x16_t *)(v112 + 96);
              v96 = *(int8x16_t *)(v112 + 48);
              v102 = *(int8x16_t *)(v112 + 64);
              v93 = vextq_s8(v87, v87, 8uLL).u64[0];
              v94 = vextq_s8(v88, v88, 8uLL).u64[0];
              v95 = vextq_s8(v85, v85, 8uLL).u64[0];
              v98 = vextq_s8(v86, v86, 8uLL).u64[0];
              v99 = vextq_s8(v89, v89, 8uLL).u64[0];
              *(_QWORD *)&v84 = vextq_s8(v90, v90, 8uLL).u64[0];
              *(_QWORD *)&v83 = vextq_s8(v91, v91, 8uLL).u64[0];
              *(_QWORD *)&v82 = vextq_s8(v92, v92, 8uLL).u64[0];
              v79 = *(int8x16_t *)(v112 + 16);
              v97 = *(int8x16_t *)(v112 + 32);
              *(_QWORD *)&v81 = vextq_s8(v102, v102, 8uLL).u64[0];
              v100 = vextq_s8(v96, v96, 8uLL).u64[0];
              v101 = vextq_s8(v97, v97, 8uLL).u64[0];
              v80 = *(int8x16_t *)v112;
            }
            else
            {
              v80 = *(int8x16_t *)v112;
              v79 = *(int8x16_t *)(v112 + 16);
              v81 = *(_OWORD *)(v112 + 72);
              v82 = *(_OWORD *)(v112 + 88);
              v83 = *(_OWORD *)(v112 + 104);
              v84 = *(_OWORD *)(v112 + 120);
              v86 = *(int8x16_t *)(v112 + 144);
              v85 = *(int8x16_t *)(v112 + 160);
              v88 = *(int8x16_t *)(v112 + 176);
              v87 = *(int8x16_t *)(v112 + 192);
              v89.i64[0] = *(_QWORD *)(v112 + 128);
              v90.i64[0] = *(_QWORD *)(v112 + 112);
              v91.i64[0] = *(_QWORD *)(v112 + 96);
              v92.i64[0] = *(_QWORD *)(v112 + 80);
              v93 = vextq_s8(v87, v87, 8uLL).u64[0];
              v94 = vextq_s8(v88, v88, 8uLL).u64[0];
              v95 = vextq_s8(v85, v85, 8uLL).u64[0];
              v97 = *(int8x16_t *)(v112 + 32);
              v96 = *(int8x16_t *)(v112 + 48);
              v98 = vextq_s8(v86, v86, 8uLL).u64[0];
              v99 = *(_QWORD *)(v112 + 136);
              v100 = vextq_s8(v96, v96, 8uLL).u64[0];
              v101 = vextq_s8(v97, v97, 8uLL).u64[0];
              v102.i64[0] = *(_QWORD *)(v112 + 64);
            }
            v103 = *(_QWORD *)(v112 + 208);
            v104 = *((unsigned int *)a2 + 4);
            v105 = *a2 + 8 * (v77[1] + (_DWORD)v104 * a4[1]);
            v96.i64[1] = v100;
            v97.i64[1] = v101;
            v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
            v80.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
            *((_QWORD *)&v84 + 1) = v89.i64[0];
            *((_QWORD *)&v83 + 1) = v90.i64[0];
            *((_QWORD *)&v82 + 1) = v91.i64[0];
            *((_QWORD *)&v81 + 1) = v92.i64[0];
            v87.i64[1] = v93;
            v88.i64[1] = v94;
            v85.i64[1] = v95;
            v86.i64[1] = v98;
            *(int8x16_t *)v105 = v80;
            *(int8x16_t *)(v105 + 16) = v79;
            *(_QWORD *)(v105 + 64) = v102.i64[0];
            *(int8x16_t *)(v105 + 32) = v97;
            *(int8x16_t *)(v105 + 48) = v96;
            v106 = v105 + 8 * v104;
            *(_OWORD *)v106 = v81;
            *(_OWORD *)(v106 + 16) = v82;
            *(_QWORD *)(v106 + 64) = v99;
            *(_OWORD *)(v106 + 32) = v83;
            *(_OWORD *)(v106 + 48) = v84;
            v107 = (int8x16_t *)(v105 + 16 * v104);
            *v107 = v86;
            v107[1] = v85;
            v107[4].i64[0] = v103;
            v70 = v108;
            v107[2] = v88;
            v107[3] = v87;
          }
          v77 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8FA1C8(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  int8x16_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *((unsigned int *)a2 + 4);
                  v24 = *a2;
                  v26 = *(int8x16_t *)(v22 + 32);
                  v25 = *(int8x16_t *)(v22 + 48);
                  v28 = *(int8x16_t *)v22;
                  v27 = *(int8x16_t *)(v22 + 16);
                  v29 = *(_QWORD *)(v22 + 64);
                  v30 = vextq_s8(v25, v25, 8uLL).u64[0];
                  v31 = vextq_s8(v26, v26, 8uLL).u64[0];
                  v32 = vextq_s8(v27, v27, 8uLL).u64[0];
                  v33 = vextq_s8(v28, v28, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v37 = (int8x16_t *)(v24 + 8 * (v21 + (_DWORD)v23 * v20));
                    v28.i64[1] = v33;
                    v27.i64[1] = v32;
                    *v37 = v28;
                    v37[1] = v27;
                    v26.i64[1] = v31;
                    v37[4].i64[0] = v29;
                    v25.i64[1] = v30;
                    v37[2] = v26;
                    v37[3] = v25;
                  }
                  else
                  {
                    v34 = (_QWORD *)(v24 + 8 * (v20 + (_DWORD)v23 * v21));
                    *v34 = v28.i64[0];
                    v34[v23] = v33;
                    v34[2 * v23] = v27.i64[0];
                    v34[3 * v23] = v32;
                    v34[4 * v23] = v26.i64[0];
                    v34[5 * v23] = v31;
                    v34[6 * v23] = v25.i64[0];
                    v34[7 * v23] = v30;
                    v34[8 * v23] = v29;
                  }
                  v9 = v18;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v35 = v8 + 1;
                    while (v35 != v11)
                    {
                      ++v9;
                      v36 = *v35++;
                      v19 = v36;
                      if (v36 != -1)
                      {
                        v8 = v35 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v38 = *(_QWORD *)(result + 88);
        v39 = (*(_DWORD *)(result + 112) * *a4);
        v40 = (uint64_t *)(v38 + 8 * v39);
        v41 = *(_DWORD *)(result + 8);
        v42 = (v39 + v41);
        v43 = (uint64_t *)(v38 + 8 * v42);
        if (v41 && *v40 == -1)
        {
          v57 = 8 * v42 - 8 * v39 - 8;
          v58 = 1;
          v59 = v40;
          while (1)
          {
            v44 = v58;
            if (!v57)
              break;
            v40 = v59 + 1;
            v60 = v59[1];
            ++v58;
            v57 -= 8;
            ++v59;
            if (v60 != -1)
              goto LABEL_38;
          }
          v40 = v43;
        }
        else
        {
          v44 = 0;
        }
LABEL_38:
        v45 = *a3;
        v46 = a3[1];
        while (v45 != v46 && v40 != v43)
        {
          v47 = *v45;
          if (*v45 > v44)
          {
            v48 = v40 + 1;
            while (v48 != v43)
            {
              ++v44;
              v49 = *v48++;
              if (v49 != -1 && v47 <= v44)
              {
                v40 = v48 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v47 == v44)
          {
            v51 = *(_QWORD *)(result + 16) + 8 * *v40;
            v52 = *a2 + 8 * (v45[1] + *((_DWORD *)a2 + 4) * a4[1]);
            v53 = *(_QWORD *)(v51 + 64);
            v54 = *(_OWORD *)(v51 + 48);
            v55 = *(_OWORD *)v51;
            v56 = *(_OWORD *)(v51 + 16);
            *(_OWORD *)(v52 + 32) = *(_OWORD *)(v51 + 32);
            *(_OWORD *)(v52 + 48) = v54;
            *(_QWORD *)(v52 + 64) = v53;
            *(_OWORD *)v52 = v55;
            *(_OWORD *)(v52 + 16) = v56;
            v44 = v47;
          }
          v45 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8FA4DC(uint64_t result, uint64_t *a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t *v44;
  int64x2_t *v45;
  int64x2_t *v46;
  int64x2_t *v47;
  int64x2_t *v48;
  int64x2_t *v49;
  int64x2_t *v50;
  int64x2_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int64x2_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  unint64_t v98;
  unint64_t v99;
  int8x16_t v100;
  int8x16_t v101;
  unint64_t v102;
  int8x16_t v103;
  unint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  unint64_t v111;
  unint64_t v112;
  int8x16_t v113;
  unint64_t v114;
  unint64_t v115;
  int8x16_t v116;
  unint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  uint64_t v120;
  uint64_t v121;
  int8x16_t *v122;
  int8x16_t *v123;
  int8x16_t *v124;
  unsigned int v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v129;
  unint64_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      if (a4 != a5)
      {
        while (1)
        {
          v6 = *(_QWORD *)(result + 88);
          v7 = (*(_DWORD *)(result + 112) * *a4);
          v8 = (uint64_t *)(v6 + 8 * v7);
          v9 = *(_DWORD *)(result + 8);
          v10 = v7 + v9;
          v11 = (uint64_t *)(v6 + 8 * v10);
          if (!v9)
            goto LABEL_15;
          if (*v8 == -1)
            break;
          v9 = 0;
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_16;
LABEL_5:
          a4 += 2;
          if (a4 == a5)
            return result;
        }
        v14 = 8 * v10 - 8 * v7 - 8;
        v15 = 1;
        v16 = v8;
        while (1)
        {
          v9 = v15;
          if (!v14)
            break;
          v8 = v16 + 1;
          v17 = v16[1];
          ++v15;
          v14 -= 8;
          ++v16;
          if (v17 != -1)
            goto LABEL_15;
        }
        v8 = v11;
LABEL_15:
        v12 = *a3;
        v13 = a3[1];
        if (*a3 != v13)
        {
LABEL_16:
          while (v8 != v11)
          {
            v18 = *v12;
            if (*v12 == v9)
            {
              v19 = *v8;
LABEL_19:
              v20 = a4[1];
              v21 = v12[1];
              v22 = *(_QWORD *)(result + 16) + 8 * v19;
              v23 = *((unsigned int *)a2 + 4);
              v24 = *a2;
              v25.i64[0] = *(_QWORD *)(v22 + 64);
              if (v20 >= v21)
              {
                v54 = v24 + 8 * (v21 + (_DWORD)v23 * v20);
                v55 = *(_OWORD *)(v22 + 48);
                v56 = *(int64x2_t *)v22;
                v57 = *(_OWORD *)(v22 + 16);
                v58 = *(_OWORD *)(v22 + 72);
                v59 = *(_OWORD *)(v22 + 88);
                v60 = *(_OWORD *)(v22 + 104);
                v61 = *(_OWORD *)(v22 + 120);
                v62 = *(_QWORD *)(v22 + 136);
                v63 = *(_OWORD *)(v22 + 144);
                v64 = *(_OWORD *)(v22 + 160);
                v65 = *(_OWORD *)(v22 + 176);
                v66 = *(_OWORD *)(v22 + 192);
                v67 = *(_QWORD *)(v22 + 208);
                v68 = *(_OWORD *)(v22 + 232);
                v69 = *(_OWORD *)(v22 + 248);
                v70 = *(_OWORD *)(v22 + 216);
                v71 = *(_OWORD *)(v22 + 264);
                v72 = *(_QWORD *)(v22 + 280);
                *(_OWORD *)(v54 + 32) = *(_OWORD *)(v22 + 32);
                *(_OWORD *)(v54 + 48) = v55;
                *(_QWORD *)(v54 + 64) = v25.i64[0];
                *(int64x2_t *)v54 = v56;
                *(_OWORD *)(v54 + 16) = v57;
                v73 = v54 + 8 * v23;
                *(_QWORD *)(v73 + 64) = v62;
                *(_OWORD *)(v73 + 32) = v60;
                *(_OWORD *)(v73 + 48) = v61;
                *(_OWORD *)v73 = v58;
                *(_OWORD *)(v73 + 16) = v59;
                v74 = v54 + 16 * v23;
                *(_QWORD *)(v74 + 64) = v67;
                *(_OWORD *)(v74 + 32) = v65;
                *(_OWORD *)(v74 + 48) = v66;
                *(_OWORD *)v74 = v63;
                *(_OWORD *)(v74 + 16) = v64;
                v75 = v54 + 24 * v23;
                *(_QWORD *)(v75 + 64) = v72;
                *(_OWORD *)(v75 + 32) = v69;
                *(_OWORD *)(v75 + 48) = v71;
                v9 = v18;
                *(_OWORD *)v75 = v70;
                *(_OWORD *)(v75 + 16) = v68;
              }
              else
              {
                v26 = (int64x2_t *)(v24 + 8 * (v20 + (_DWORD)v23 * v21));
                v28 = *(int64x2_t *)(v22 + 32);
                v27 = *(int64x2_t *)(v22 + 48);
                v29 = *(int64x2_t *)(v22 + 16);
                v30 = *(int64x2_t *)(v22 + 120);
                v31 = *(int64x2_t *)(v22 + 104);
                v32 = *(int64x2_t *)(v22 + 88);
                v33 = *(int64x2_t *)(v22 + 72);
                v34.i64[0] = *(_QWORD *)(v22 + 208);
                v36 = *(int64x2_t *)(v22 + 176);
                v35 = *(int64x2_t *)(v22 + 192);
                v38 = *(int64x2_t *)(v22 + 144);
                v37 = *(int64x2_t *)(v22 + 160);
                v39 = *(int64x2_t *)(v22 + 216);
                v40 = *(int64x2_t *)(v22 + 264);
                v41 = *(int64x2_t *)(v22 + 248);
                v42 = *(int64x2_t *)(v22 + 232);
                v43 = vzip2q_s64(*(int64x2_t *)v22, v33);
                v25.i64[1] = *(_QWORD *)(v22 + 136);
                v34.i64[1] = *(_QWORD *)(v22 + 280);
                *v26 = vzip1q_s64(*(int64x2_t *)v22, v33);
                v26[1] = vzip1q_s64(v38, v39);
                v44 = (int64x2_t *)((char *)v26 + 8 * v23);
                *v44 = v43;
                v44[1] = vzip2q_s64(v38, v39);
                v45 = &v26[v23];
                *v45 = vzip1q_s64(v29, v32);
                v45[1] = vzip1q_s64(v37, v42);
                v46 = (int64x2_t *)((char *)v26 + 24 * v23);
                *v46 = vzip2q_s64(v29, v32);
                v46[1] = vzip2q_s64(v37, v42);
                v47 = &v26[2 * v23];
                *v47 = vzip1q_s64(v28, v31);
                v47[1] = vzip1q_s64(v36, v41);
                v48 = (int64x2_t *)((char *)v26 + 40 * v23);
                *v48 = vzip2q_s64(v28, v31);
                v48[1] = vzip2q_s64(v36, v41);
                v49 = &v26[3 * v23];
                *v49 = vzip1q_s64(v27, v30);
                v49[1] = vzip1q_s64(v35, v40);
                v50 = (int64x2_t *)((char *)v26 + 56 * v23);
                *v50 = vzip2q_s64(v27, v30);
                v50[1] = vzip2q_s64(v35, v40);
                v51 = &v26[4 * v23];
                v9 = v18;
                *v51 = v25;
                v51[1] = v34;
              }
            }
            else
            {
LABEL_21:
              if (v18 >= v9)
              {
                v52 = v8 + 1;
                while (v52 != v11)
                {
                  ++v9;
                  v53 = *v52++;
                  v19 = v53;
                  if (v53 != -1)
                  {
                    v8 = v52 - 1;
                    if (v18 != v9)
                      goto LABEL_21;
                    goto LABEL_19;
                  }
                }
                goto LABEL_5;
              }
            }
            if (v8 != v11)
            {
              v12 += 2;
              if (v12 != v13)
                continue;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v76 = *(_QWORD *)(result + 88);
        v77 = (*(_DWORD *)(result + 112) * *a4);
        v78 = (uint64_t *)(v76 + 8 * v77);
        v79 = *(_DWORD *)(result + 8);
        v80 = v77 + v79;
        v81 = (uint64_t *)(v76 + 8 * v80);
        if (v79)
        {
          if (*v78 == -1)
          {
            v82 = 8 * v80 - 8 * v77 - 8;
            v83 = 1;
            v84 = v78;
            while (1)
            {
              v79 = v83;
              if (!v82)
                break;
              v78 = v84 + 1;
              v85 = v84[1];
              ++v83;
              v82 -= 8;
              ++v84;
              if (v85 != -1)
                goto LABEL_42;
            }
            v78 = v81;
          }
          else
          {
            v79 = 0;
          }
        }
LABEL_42:
        v86 = *a3;
        v87 = a3[1];
        while (v86 != v87 && v78 != v81)
        {
          v125 = *v86;
          if (*v86 > v79)
          {
            v126 = v78 + 1;
            while (v126 != v81)
            {
              ++v79;
              v127 = *v126++;
              if (v127 != -1 && v125 <= v79)
              {
                v78 = v126 - 1;
                goto LABEL_56;
              }
            }
            break;
          }
LABEL_56:
          if (v125 == v79)
          {
            v129 = *(_QWORD *)(result + 16) + 8 * *v78;
            if (v129 == *a2)
            {
              v118 = *(int8x16_t *)(v129 + 272);
              v119 = *(int8x16_t *)(v129 + 224);
              v93 = *(int8x16_t *)(v129 + 192);
              v113 = *(int8x16_t *)(v129 + 208);
              v100 = *(int8x16_t *)(v129 + 160);
              v94 = *(int8x16_t *)(v129 + 176);
              v105 = *(int8x16_t *)(v129 + 128);
              v101 = *(int8x16_t *)(v129 + 144);
              v130 = vextq_s8(v118, v118, 8uLL).u64[0];
              v131 = *(int8x16_t *)(v129 + 240);
              v132 = *(int8x16_t *)(v129 + 256);
              v116.i64[0] = vextq_s8(v132, v132, 8uLL).u64[0];
              v96.i64[0] = vextq_s8(v131, v131, 8uLL).u64[0];
              v97.i64[0] = vextq_s8(v119, v119, 8uLL).u64[0];
              v95.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
              v98 = vextq_s8(v93, v93, 8uLL).u64[0];
              v99 = vextq_s8(v94, v94, 8uLL).u64[0];
              v102 = vextq_s8(v100, v100, 8uLL).u64[0];
              v109 = *(int8x16_t *)(v129 + 96);
              v107 = *(int8x16_t *)(v129 + 112);
              v104 = vextq_s8(v101, v101, 8uLL).u64[0];
              v111 = vextq_s8(v105, v105, 8uLL).u64[0];
              v103.i64[0] = vextq_s8(v107, v107, 8uLL).u64[0];
              v110 = *(int8x16_t *)(v129 + 80);
              v106.i64[0] = vextq_s8(v109, v109, 8uLL).u64[0];
              v108.i64[0] = vextq_s8(v110, v110, 8uLL).u64[0];
              v133 = *(int8x16_t *)(v129 + 64);
              v92.i64[0] = vextq_s8(v133, v133, 8uLL).u64[0];
              v90 = *(int8x16_t *)(v129 + 32);
              v91 = *(int8x16_t *)(v129 + 48);
              v112 = vextq_s8(v91, v91, 8uLL).u64[0];
              v114 = vextq_s8(v90, v90, 8uLL).u64[0];
              v89 = *(int8x16_t *)v129;
              v88 = *(int8x16_t *)(v129 + 16);
              v115 = vextq_s8(v88, v88, 8uLL).u64[0];
              v117 = vextq_s8(v89, v89, 8uLL).u64[0];
            }
            else
            {
              v133.i64[0] = *(_QWORD *)(v129 + 64);
              v89 = *(int8x16_t *)v129;
              v88 = *(int8x16_t *)(v129 + 16);
              v90 = *(int8x16_t *)(v129 + 32);
              v91 = *(int8x16_t *)(v129 + 48);
              v92 = *(int8x16_t *)(v129 + 72);
              v94 = *(int8x16_t *)(v129 + 176);
              v93 = *(int8x16_t *)(v129 + 192);
              v95 = *(int8x16_t *)(v129 + 216);
              v96 = *(int8x16_t *)(v129 + 248);
              v97 = *(int8x16_t *)(v129 + 232);
              v131.i64[0] = vextq_s8(v97, v97, 8uLL).u64[0];
              v132.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
              v98 = vextq_s8(v93, v93, 8uLL).u64[0];
              v99 = vextq_s8(v94, v94, 8uLL).u64[0];
              v101 = *(int8x16_t *)(v129 + 144);
              v100 = *(int8x16_t *)(v129 + 160);
              v102 = vextq_s8(v100, v100, 8uLL).u64[0];
              v103 = *(int8x16_t *)(v129 + 120);
              v104 = vextq_s8(v101, v101, 8uLL).u64[0];
              v105.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
              v106 = *(int8x16_t *)(v129 + 104);
              v107.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
              v108 = *(int8x16_t *)(v129 + 88);
              v109.i64[0] = vextq_s8(v108, v108, 8uLL).u64[0];
              v110.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
              v111 = *(_QWORD *)(v129 + 136);
              v112 = vextq_s8(v91, v91, 8uLL).u64[0];
              v113.i64[0] = *(_QWORD *)(v129 + 208);
              v114 = vextq_s8(v90, v90, 8uLL).u64[0];
              v115 = vextq_s8(v88, v88, 8uLL).u64[0];
              v116 = *(int8x16_t *)(v129 + 264);
              v117 = vextq_s8(v89, v89, 8uLL).u64[0];
              v118.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
              v130 = *(_QWORD *)(v129 + 280);
              v119.i64[0] = vextq_s8(v95, v95, 8uLL).u64[0];
            }
            v91.i64[1] = v112;
            v90.i64[1] = v114;
            v88.i64[1] = v115;
            v89.i64[1] = v117;
            v120 = *((unsigned int *)a2 + 4);
            v121 = *a2 + 8 * (v86[1] + (_DWORD)v120 * a4[1]);
            v103.i64[1] = v105.i64[0];
            v106.i64[1] = v107.i64[0];
            v108.i64[1] = v109.i64[0];
            v92.i64[1] = v110.i64[0];
            v93.i64[1] = v98;
            v94.i64[1] = v99;
            v100.i64[1] = v102;
            v101.i64[1] = v104;
            v116.i64[1] = v118.i64[0];
            v96.i64[1] = v132.i64[0];
            v97.i64[1] = v131.i64[0];
            v95.i64[1] = v119.i64[0];
            *(int8x16_t *)v121 = v89;
            *(int8x16_t *)(v121 + 16) = v88;
            *(_QWORD *)(v121 + 64) = v133.i64[0];
            *(int8x16_t *)(v121 + 32) = v90;
            *(int8x16_t *)(v121 + 48) = v91;
            v122 = (int8x16_t *)(v121 + 8 * v120);
            *v122 = v92;
            v122[1] = v108;
            v122[4].i64[0] = v111;
            v122[2] = v106;
            v122[3] = v103;
            v123 = (int8x16_t *)(v121 + 16 * v120);
            *v123 = v101;
            v123[1] = v100;
            v123[4].i64[0] = v113.i64[0];
            v123[2] = v94;
            v123[3] = v93;
            v124 = (int8x16_t *)(v121 + 24 * v120);
            *v124 = v95;
            v124[1] = v97;
            v124[4].i64[0] = v130;
            v79 = v125;
            v124[2] = v96;
            v124[3] = v116;
          }
          v86 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8FAA7C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  unsigned int v16;
  void *v17;
  size_t v18;
  uint64_t *v20;

  v10 = 9 * ((*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 3)
      + 6
      * (((*(_QWORD *)(a5 + 56) - *(_QWORD *)(a5 + 48)) >> 3)
       + ((*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3)
       + ((*(_QWORD *)(a5 + 80) - *(_QWORD *)(a5 + 72)) >> 3))
      + ((*(_QWORD *)(a5 + 128) - *(_QWORD *)(a5 + 120)) >> 3)
      + (((*(_QWORD *)(a5 + 152) - *(_QWORD *)(a5 + 144)) >> 1) & 0xFFFFFFFC)
      + (((*(_QWORD *)(a5 + 176) - *(_QWORD *)(a5 + 168)) >> 1) & 0xFFFFFFFC)
      + 3
      * (((*(_QWORD *)(a5 + 200) - *(_QWORD *)(a5 + 192)) >> 3)
       + ((*(_QWORD *)(a5 + 104) - *(_QWORD *)(a5 + 96)) >> 3)
       + ((*(_QWORD *)(a5 + 224) - *(_QWORD *)(a5 + 216)) >> 3));
  v11 = 9 * ((*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3)
      + 6
      * (((*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3)
       + ((*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
       + ((*(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72)) >> 3))
      + ((*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3)
      + (((*(_QWORD *)(a4 + 152) - *(_QWORD *)(a4 + 144)) >> 1) & 0xFFFFFFFC)
      + (((*(_QWORD *)(a4 + 176) - *(_QWORD *)(a4 + 168)) >> 1) & 0xFFFFFFFC)
      + 3
      * (((*(_QWORD *)(a4 + 200) - *(_QWORD *)(a4 + 192)) >> 3)
       + ((*(_QWORD *)(a4 + 104) - *(_QWORD *)(a4 + 96)) >> 3)
       + ((*(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216)) >> 3));
  v12 = v10 * (unint64_t)v11;
  *((_DWORD *)a2 + 4) = v11;
  *((_DWORD *)a2 + 5) = v10;
  v13 = v10;
  v14 = v11;
  if ((unint64_t)a2[1] < v12)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v15 = (8 * v12 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v15 >> 3);
    *a2 = operator new(v15, (std::align_val_t)0x20uLL);
    v14 = *((_DWORD *)a2 + 4);
    v13 = *((_DWORD *)a2 + 5);
  }
  v16 = v13 * v14;
  if (v16)
    bzero(*a2, 8 * v16);
  if (v10 == *(_DWORD *)(a3 + 16) && v11 == *(_DWORD *)(a3 + 20))
  {
    v17 = *(void **)a3;
  }
  else
  {
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 20) = v11;
    v17 = *(void **)a3;
    if (*(_QWORD *)(a3 + 8) < v12)
    {
      if (v17)
        MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
      v18 = (8 * v12 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v18 >> 3;
      v17 = operator new(v18, (std::align_val_t)0x20uLL);
      *(_QWORD *)a3 = v17;
      v10 = *(_DWORD *)(a3 + 16);
      v11 = *(_DWORD *)(a3 + 20);
    }
  }
  if (v10 * v11)
    bzero(v17, 8 * v10 * v11);
  sub_20F8FAD4C(a1, a3, (unsigned int **)a5, a4);
  sub_20F8FAD4C(a1, (uint64_t)a2, (unsigned int **)a4, a5);
  v20 = (uint64_t *)a3;
  return sub_20F2B809C((uint64_t)a2, &v20);
}

uint64_t sub_20F8FAD4C(uint64_t result, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  int8x16_t v27;
  __int128 v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  int8x16_t v56;
  __int128 v57;
  int8x16_t v58;
  unint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x16_t *v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v72;
  _DWORD *v74;
  _DWORD *v75;
  unsigned int *v76;
  unsigned int *v77;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  int8x16_t v94;
  __int128 v95;
  int8x16_t v96;
  unint64_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int8x16_t *v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  _OWORD *v132;
  _OWORD *v133;
  _OWORD *v134;
  _OWORD *v135;
  unsigned int v136;
  uint64_t *v137;
  uint64_t v138;
  __int128 *v140;
  _DWORD *v142;
  _DWORD *v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  uint64_t v163;
  int8x16_t *v164;
  int8x16_t *v165;
  int8x16_t *v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  int8x16_t *v171;
  _DWORD *v173;
  _DWORD *v174;
  unsigned int *v175;
  unsigned int *v176;
  _DWORD *v178;
  _DWORD *v179;
  _DWORD *v181;
  _DWORD *v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  uint64_t *v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int *v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  uint64_t v202;
  int8x16_t *v203;
  int8x16_t *v204;
  int8x16_t *v205;
  unsigned int v206;
  uint64_t *v207;
  uint64_t v208;
  int8x16_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  uint64_t *v219;
  uint64_t v220;
  unsigned int *v221;
  unsigned int *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  _OWORD *v232;
  _OWORD *v233;
  _OWORD *v234;
  _OWORD *v235;
  unsigned int v236;
  uint64_t *v237;
  uint64_t v238;
  __int128 *v240;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  int v249;
  uint64_t *v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int *v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  _OWORD *v263;
  _OWORD *v264;
  _OWORD *v265;
  _OWORD *v266;
  unsigned int v267;
  uint64_t *v268;
  uint64_t v269;
  __int128 *v271;
  _DWORD *v273;
  _DWORD *v274;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  uint64_t *v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int *v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  uint64_t v294;
  int8x16_t *v295;
  int8x16_t *v296;
  int8x16_t *v297;
  unsigned int v298;
  uint64_t *v299;
  uint64_t v300;
  int8x16_t *v302;
  _DWORD *v304;
  _DWORD *v305;
  unsigned int *v306;
  unsigned int *v307;
  _DWORD *v309;
  _DWORD *v310;
  _DWORD *v312;
  _DWORD *v313;
  _DWORD *v315;
  _DWORD *v316;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  int v325;
  uint64_t *v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int *v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  uint64_t v336;
  int8x16_t *v337;
  int8x16_t *v338;
  int8x16_t *v339;
  unsigned int v340;
  uint64_t *v341;
  uint64_t v342;
  int8x16_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  int v348;
  uint64_t v349;
  uint64_t *v350;
  unsigned int v351;
  unsigned int *v352;
  unsigned int *v353;
  unsigned int v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v358;
  int v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  int v366;
  uint64_t v367;
  uint64_t *v368;
  unsigned int v369;
  unsigned int *v370;
  unsigned int *v371;
  uint64_t v372;
  _QWORD *v373;
  unsigned int v374;
  uint64_t *v375;
  uint64_t v376;
  int8x16_t *v378;
  int8x16_t v379;
  int8x16_t v380;
  uint64_t v381;
  int v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  int v389;
  uint64_t v390;
  uint64_t *v391;
  unsigned int v392;
  unsigned int *v393;
  unsigned int *v394;
  uint64_t v395;
  _QWORD *v396;
  unsigned int v397;
  uint64_t *v398;
  uint64_t v399;
  int8x16_t *v401;
  int8x16_t v402;
  int8x16_t v403;
  uint64_t v404;
  int v405;
  uint64_t *v406;
  uint64_t v407;
  _DWORD *v409;
  _DWORD *v410;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  int v415;
  uint64_t v416;
  uint64_t *v417;
  unsigned int v418;
  unsigned int *v419;
  unsigned int *v420;
  int8x16_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  unsigned int v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t *v433;
  uint64_t v434;
  _DWORD *v436;
  _DWORD *v437;
  unsigned int *v438;
  unsigned int *v439;
  _DWORD *v441;
  _DWORD *v442;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  int v447;
  uint64_t v448;
  uint64_t *v449;
  unsigned int v450;
  unsigned int *v451;
  unsigned int *v452;
  int8x16_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  unsigned int v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v462;
  uint64_t v463;
  int v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  unsigned int v470;
  uint64_t v471;
  uint64_t *v472;
  uint64_t v473;
  int v474;
  uint64_t *v475;
  uint64_t v476;
  unsigned int *v477;
  unsigned int *v478;
  int8x16_t v479;
  __int128 v480;
  int8x16_t v481;
  unint64_t v482;
  int8x16_t v483;
  int8x16_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int8x16_t *v490;
  unsigned int v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v495;
  _DWORD *v497;
  _DWORD *v498;
  _DWORD *v500;
  _DWORD *v501;
  _DWORD *v503;
  _DWORD *v504;
  uint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  int v509;
  uint64_t v510;
  uint64_t *v511;
  unsigned int v512;
  unsigned int *v513;
  unsigned int *v514;
  unsigned int v515;
  uint64_t *v516;
  uint64_t v517;
  uint64_t v519;
  uint64_t v520;
  __int128 v521;
  uint64_t v522;
  int v523;
  uint64_t *v524;
  uint64_t v525;
  uint64_t v527;
  uint64_t v528;
  uint64_t *v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  int v534;
  uint64_t *v535;
  uint64_t v536;
  unsigned int *v537;
  unsigned int *v538;
  int8x16_t v539;
  int8x16_t v540;
  unint64_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  unint64_t v545;
  int8x16_t v546;
  int8x16_t v547;
  unint64_t v548;
  int8x16_t v549;
  uint64_t v550;
  uint64_t v551;
  int8x16_t *v552;
  int8x16_t *v553;
  int8x16_t *v554;
  unsigned int v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v559;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  unsigned int v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t v567;
  int v568;
  uint64_t *v569;
  uint64_t v570;
  unsigned int *v571;
  unsigned int *v572;
  int8x16_t v573;
  int8x16_t v574;
  unint64_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  unint64_t v579;
  int8x16_t v580;
  int8x16_t v581;
  unint64_t v582;
  int8x16_t v583;
  uint64_t v584;
  uint64_t v585;
  int8x16_t *v586;
  int8x16_t *v587;
  int8x16_t *v588;
  unsigned int v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v593;
  _DWORD *v595;
  _DWORD *v596;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  unsigned int v601;
  uint64_t v602;
  uint64_t *v603;
  uint64_t v604;
  int v605;
  uint64_t *v606;
  uint64_t v607;
  unsigned int *v608;
  unsigned int *v609;
  int8x16_t v610;
  __int128 v611;
  int8x16_t v612;
  unint64_t v613;
  int8x16_t v614;
  int8x16_t v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int8x16_t *v621;
  unsigned int v622;
  uint64_t *v623;
  uint64_t v624;
  uint64_t v626;
  _DWORD *v628;
  _DWORD *v629;
  unsigned int *v630;
  unsigned int *v631;
  _DWORD *v633;
  _DWORD *v634;
  uint64_t v636;
  uint64_t v637;
  uint64_t *v638;
  unsigned int v639;
  uint64_t v640;
  uint64_t *v641;
  uint64_t v642;
  int v643;
  uint64_t *v644;
  uint64_t v645;
  unsigned int *v646;
  unsigned int *v647;
  int8x16_t v648;
  __int128 v649;
  int8x16_t v650;
  unint64_t v651;
  int8x16_t v652;
  int8x16_t v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int8x16_t *v659;
  unsigned int v660;
  uint64_t *v661;
  uint64_t v662;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  unsigned int v668;
  uint64_t v669;
  uint64_t *v670;
  uint64_t v671;
  int v672;
  uint64_t *v673;
  uint64_t v674;
  unsigned int *v675;
  unsigned int *v676;
  int8x16_t v677;
  int8x16_t v678;
  int8x16_t v679;
  int8x16_t v680;
  int8x16_t v681;
  int8x16_t v682;
  int8x16_t v683;
  int8x16_t v684;
  int8x16_t v685;
  int8x16_t v686;
  unint64_t v687;
  unint64_t v688;
  unint64_t v689;
  unint64_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int8x16_t v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  uint64_t v699;
  int8x16_t *v700;
  int8x16_t *v701;
  int8x16_t *v702;
  int8x16_t *v703;
  int8x16_t *v704;
  int8x16_t *v705;
  unsigned int v706;
  uint64_t *v707;
  uint64_t v708;
  int8x16_t *v710;
  _DWORD *v712;
  _DWORD *v713;
  uint64_t v715;
  uint64_t v716;
  uint64_t *v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t *v720;
  uint64_t v721;
  int v722;
  uint64_t *v723;
  uint64_t v724;
  unsigned int *v725;
  unsigned int *v726;
  int8x16_t v727;
  int8x16_t v728;
  int8x16_t v729;
  int8x16_t v730;
  int8x16_t v731;
  int8x16_t v732;
  int8x16_t v733;
  unint64_t v734;
  unint64_t v735;
  unint64_t v736;
  int8x16_t v737;
  int8x16_t v738;
  uint64_t v739;
  int8x16_t *v740;
  int8x16_t *v741;
  int8x16_t *v742;
  unsigned int v743;
  uint64_t *v744;
  uint64_t v745;
  int8x16_t *v747;
  _DWORD *v749;
  _DWORD *v750;
  _DWORD *v752;
  _DWORD *v753;
  _DWORD *v755;
  _DWORD *v756;
  uint64_t v758;
  uint64_t v759;
  uint64_t *v760;
  int v761;
  uint64_t v762;
  uint64_t *v763;
  unsigned int v764;
  unsigned int *v765;
  unsigned int *v766;
  unsigned int v767;
  uint64_t *v768;
  uint64_t v769;
  __int128 *v771;
  _OWORD *v772;
  __int128 v773;
  __int128 v774;
  uint64_t v775;
  int v776;
  uint64_t *v777;
  uint64_t v778;
  uint64_t v780;
  uint64_t v781;
  uint64_t *v782;
  unsigned int v783;
  uint64_t v784;
  uint64_t *v785;
  uint64_t v786;
  int v787;
  uint64_t *v788;
  uint64_t v789;
  unsigned int *v790;
  unsigned int *v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  int8x16_t v797;
  int8x16_t v798;
  int8x16_t v799;
  int8x16_t v800;
  int8x16_t v801;
  int8x16_t v802;
  int8x16_t v803;
  uint64_t v804;
  int8x16_t *v805;
  int8x16_t *v806;
  int8x16_t *v807;
  int8x16_t *v808;
  unsigned int v809;
  uint64_t *v810;
  uint64_t v811;
  int8x16_t *v813;
  uint64_t v815;
  uint64_t v816;
  uint64_t *v817;
  unsigned int v818;
  uint64_t v819;
  uint64_t *v820;
  uint64_t v821;
  int v822;
  uint64_t *v823;
  uint64_t v824;
  unsigned int *v825;
  unsigned int *v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int8x16_t v838;
  uint64_t v839;
  int8x16_t *v840;
  int8x16_t *v841;
  int8x16_t *v842;
  int8x16_t *v843;
  unsigned int v844;
  uint64_t *v845;
  uint64_t v846;
  int8x16_t *v848;
  _DWORD *v850;
  _DWORD *v851;
  uint64_t v853;
  uint64_t v854;
  uint64_t *v855;
  unsigned int v856;
  uint64_t v857;
  uint64_t *v858;
  uint64_t v859;
  int v860;
  uint64_t *v861;
  uint64_t v862;
  unsigned int *v863;
  unsigned int *v864;
  int8x16_t v865;
  int8x16_t v866;
  int8x16_t v867;
  int8x16_t v868;
  int8x16_t v869;
  int8x16_t v870;
  int8x16_t v871;
  unint64_t v872;
  unint64_t v873;
  unint64_t v874;
  int8x16_t v875;
  int8x16_t v876;
  uint64_t v877;
  int8x16_t *v878;
  int8x16_t *v879;
  int8x16_t *v880;
  unsigned int v881;
  uint64_t *v882;
  uint64_t v883;
  int8x16_t *v885;
  _DWORD *v887;
  _DWORD *v888;
  unsigned int *v889;
  unsigned int *v890;
  _DWORD *v892;
  _DWORD *v893;
  _DWORD *v895;
  _DWORD *v896;
  uint64_t v898;
  uint64_t v899;
  uint64_t *v900;
  unsigned int v901;
  uint64_t v902;
  uint64_t *v903;
  uint64_t v904;
  int v905;
  uint64_t *v906;
  uint64_t v907;
  unsigned int *v908;
  unsigned int *v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t v914;
  int8x16_t v915;
  int8x16_t v916;
  unint64_t v917;
  unint64_t v918;
  unint64_t v919;
  int8x16_t v920;
  int8x16_t v921;
  uint64_t v922;
  int8x16_t *v923;
  int8x16_t *v924;
  int8x16_t *v925;
  unsigned int v926;
  uint64_t *v927;
  uint64_t v928;
  int8x16_t *v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t *v933;
  unsigned int v934;
  uint64_t v935;
  uint64_t *v936;
  uint64_t v937;
  int v938;
  uint64_t *v939;
  uint64_t v940;
  unsigned int *v941;
  unsigned int *v942;
  int8x16_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int8x16_t v950;
  int8x16_t v951;
  int8x16_t v952;
  unint64_t v953;
  unint64_t v954;
  unint64_t v955;
  unint64_t v956;
  int8x16_t v957;
  int8x16_t v958;
  int8x16_t v959;
  int8x16_t v960;
  int8x16_t v961;
  int8x16_t v962;
  int8x16_t v963;
  int8x16_t v964;
  uint64_t v965;
  int8x16_t *v966;
  int8x16_t *v967;
  int8x16_t *v968;
  int8x16_t *v969;
  int8x16_t *v970;
  int8x16_t *v971;
  unsigned int v972;
  uint64_t *v973;
  uint64_t v974;
  int8x16_t *v976;
  uint64_t v978;
  uint64_t v979;
  uint64_t *v980;
  unsigned int v981;
  uint64_t v982;
  uint64_t *v983;
  uint64_t v984;
  int v985;
  uint64_t *v986;
  uint64_t v987;
  unsigned int *v988;
  unsigned int *v989;
  int8x16_t v990;
  int8x16_t v991;
  int8x16_t v992;
  int8x16_t v993;
  int8x16_t v994;
  int8x16_t v995;
  int8x16_t v996;
  int8x16_t v997;
  int8x16_t v998;
  int8x16_t v999;
  unint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  int8x16_t v1004;
  int8x16_t v1005;
  int8x16_t v1006;
  int8x16_t v1007;
  int8x16_t v1008;
  int8x16_t v1009;
  int8x16_t v1010;
  int8x16_t v1011;
  uint64_t v1012;
  int8x16_t *v1013;
  int8x16_t *v1014;
  int8x16_t *v1015;
  int8x16_t *v1016;
  int8x16_t *v1017;
  int8x16_t *v1018;
  unsigned int v1019;
  uint64_t *v1020;
  uint64_t v1021;
  int8x16_t *v1023;
  _DWORD *v1025;
  _DWORD *v1026;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t *v1030;
  unsigned int v1031;
  uint64_t v1032;
  uint64_t *v1033;
  uint64_t v1034;
  int v1035;
  uint64_t *v1036;
  uint64_t v1037;
  unsigned int *v1038;
  unsigned int *v1039;
  int8x16_t v1040;
  int8x16_t v1041;
  int8x16_t v1042;
  int8x16_t v1043;
  int8x16_t v1044;
  int8x16_t v1045;
  int8x16_t v1046;
  unint64_t v1047;
  unint64_t v1048;
  unint64_t v1049;
  int8x16_t v1050;
  int8x16_t v1051;
  uint64_t v1052;
  int8x16_t *v1053;
  int8x16_t *v1054;
  int8x16_t *v1055;
  unsigned int v1056;
  uint64_t *v1057;
  uint64_t v1058;
  int8x16_t *v1060;
  _DWORD *v1062;
  _DWORD *v1063;
  _DWORD *v1065;
  _DWORD *v1066;
  _DWORD *v1068;
  _DWORD *v1069;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t *v1073;
  int v1074;
  uint64_t v1075;
  uint64_t *v1076;
  unsigned int v1077;
  unsigned int *v1078;
  unsigned int *v1079;
  unsigned int v1080;
  uint64_t *v1081;
  uint64_t v1082;
  __int128 *v1084;
  _OWORD *v1085;
  __int128 v1086;
  __int128 v1087;
  uint64_t v1088;
  int v1089;
  uint64_t *v1090;
  uint64_t v1091;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t *v1095;
  unsigned int v1096;
  uint64_t v1097;
  uint64_t *v1098;
  uint64_t v1099;
  int v1100;
  uint64_t *v1101;
  uint64_t v1102;
  unsigned int *v1103;
  unsigned int *v1104;
  int8x16_t v1105;
  int8x16_t v1106;
  int8x16_t v1107;
  int8x16_t v1108;
  int8x16_t v1109;
  int8x16_t v1110;
  int8x16_t v1111;
  int8x16_t v1112;
  int8x16_t v1113;
  int8x16_t v1114;
  int8x16_t v1115;
  int8x16_t v1116;
  uint64_t v1117;
  int8x16_t *v1118;
  int8x16_t *v1119;
  int8x16_t *v1120;
  int8x16_t *v1121;
  unsigned int v1122;
  uint64_t *v1123;
  uint64_t v1124;
  int8x16_t *v1126;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t *v1130;
  unsigned int v1131;
  uint64_t v1132;
  uint64_t *v1133;
  uint64_t v1134;
  int v1135;
  uint64_t *v1136;
  uint64_t v1137;
  unsigned int *v1138;
  unsigned int *v1139;
  int8x16_t v1140;
  int8x16_t v1141;
  int8x16_t v1142;
  int8x16_t v1143;
  int8x16_t v1144;
  int8x16_t v1145;
  int8x16_t v1146;
  int8x16_t v1147;
  int8x16_t v1148;
  int8x16_t v1149;
  int8x16_t v1150;
  int8x16_t v1151;
  uint64_t v1152;
  int8x16_t *v1153;
  int8x16_t *v1154;
  int8x16_t *v1155;
  int8x16_t *v1156;
  unsigned int v1157;
  uint64_t *v1158;
  uint64_t v1159;
  int8x16_t *v1161;
  _DWORD *v1163;
  _DWORD *v1164;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t *v1168;
  unsigned int v1169;
  uint64_t v1170;
  uint64_t *v1171;
  uint64_t v1172;
  int v1173;
  uint64_t *v1174;
  uint64_t v1175;
  unsigned int *v1176;
  unsigned int *v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  int8x16_t v1180;
  int8x16_t v1181;
  int8x16_t v1182;
  int8x16_t v1183;
  int8x16_t v1184;
  unint64_t v1185;
  unint64_t v1186;
  unint64_t v1187;
  int8x16_t v1188;
  int8x16_t v1189;
  uint64_t v1190;
  int8x16_t *v1191;
  int8x16_t *v1192;
  int8x16_t *v1193;
  unsigned int v1194;
  uint64_t *v1195;
  uint64_t v1196;
  int8x16_t *v1198;
  _DWORD *v1200;
  _DWORD *v1201;
  unsigned int *v1202;
  unsigned int *v1203;
  _DWORD *v1205;
  _DWORD *v1206;
  _DWORD *v1208;
  _DWORD *v1209;
  _DWORD *v1211;
  _DWORD *v1212;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t *v1216;
  unsigned int v1217;
  uint64_t v1218;
  uint64_t *v1219;
  uint64_t v1220;
  int v1221;
  uint64_t *v1222;
  uint64_t v1223;
  unsigned int *v1224;
  unsigned int *v1225;
  int8x16_t v1226;
  int8x16_t v1227;
  int8x16_t v1228;
  int8x16_t v1229;
  int8x16_t v1230;
  int8x16_t v1231;
  int8x16_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  unint64_t v1235;
  int8x16_t v1236;
  int8x16_t v1237;
  uint64_t v1238;
  int8x16_t *v1239;
  int8x16_t *v1240;
  int8x16_t *v1241;
  unsigned int v1242;
  uint64_t *v1243;
  uint64_t v1244;
  int8x16_t *v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t *v1249;
  unsigned int v1250;
  uint64_t v1251;
  uint64_t *v1252;
  uint64_t v1253;
  int v1254;
  uint64_t *v1255;
  uint64_t v1256;
  unsigned int *v1257;
  unsigned int *v1258;
  int8x16_t v1259;
  int8x16_t v1260;
  int8x16_t v1261;
  int8x16_t v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  int8x16_t v1266;
  int8x16_t v1267;
  int8x16_t v1268;
  int8x16_t v1269;
  __int128 v1270;
  __int128 v1271;
  int8x16_t v1272;
  int8x16_t v1273;
  int8x16_t v1274;
  int8x16_t v1275;
  int8x16_t v1276;
  int8x16_t v1277;
  int8x16_t v1278;
  int8x16_t v1279;
  unint64_t v1280;
  unint64_t v1281;
  unint64_t v1282;
  unint64_t v1283;
  unint64_t v1284;
  unint64_t v1285;
  unint64_t v1286;
  unint64_t v1287;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  int8x16_t *v1310;
  uint64_t v1311;
  int8x16_t *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  unsigned int v1317;
  uint64_t *v1318;
  uint64_t v1319;
  uint64_t v1321;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t *v1325;
  unsigned int v1326;
  uint64_t v1327;
  uint64_t *v1328;
  uint64_t v1329;
  int v1330;
  uint64_t *v1331;
  uint64_t v1332;
  unsigned int *v1333;
  unsigned int *v1334;
  int8x16_t v1335;
  int8x16_t v1336;
  int8x16_t v1337;
  int8x16_t v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  int8x16_t v1343;
  int8x16_t v1344;
  int8x16_t v1345;
  int8x16_t v1346;
  __int128 v1347;
  __int128 v1348;
  int8x16_t v1349;
  int8x16_t v1350;
  int8x16_t v1351;
  int8x16_t v1352;
  unint64_t v1353;
  unint64_t v1354;
  unint64_t v1355;
  unint64_t v1356;
  unint64_t v1357;
  unint64_t v1358;
  unint64_t v1359;
  unint64_t v1360;
  unint64_t v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  int8x16_t *v1371;
  uint64_t v1372;
  int8x16_t *v1373;
  uint64_t v1374;
  unsigned int v1375;
  uint64_t *v1376;
  uint64_t v1377;
  uint64_t v1379;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t *v1383;
  unsigned int v1384;
  uint64_t v1385;
  uint64_t *v1386;
  uint64_t v1387;
  int v1388;
  uint64_t *v1389;
  uint64_t v1390;
  unsigned int *v1391;
  unsigned int *v1392;
  int8x16_t v1393;
  int8x16_t v1394;
  int8x16_t v1395;
  int8x16_t v1396;
  __int128 v1397;
  __int128 v1398;
  __int128 v1399;
  __int128 v1400;
  int8x16_t v1401;
  int8x16_t v1402;
  int8x16_t v1403;
  int8x16_t v1404;
  __int128 v1405;
  __int128 v1406;
  int8x16_t v1407;
  int8x16_t v1408;
  int8x16_t v1409;
  int8x16_t v1410;
  unint64_t v1411;
  unint64_t v1412;
  unint64_t v1413;
  unint64_t v1414;
  unint64_t v1415;
  unint64_t v1416;
  unint64_t v1417;
  unint64_t v1418;
  unint64_t v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  int8x16_t *v1429;
  uint64_t v1430;
  int8x16_t *v1431;
  uint64_t v1432;
  unsigned int v1433;
  uint64_t *v1434;
  uint64_t v1435;
  uint64_t v1437;
  _DWORD *v1439;
  _DWORD *v1440;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t *v1444;
  unsigned int v1445;
  uint64_t v1446;
  uint64_t *v1447;
  uint64_t v1448;
  int v1449;
  uint64_t *v1450;
  uint64_t v1451;
  unsigned int *v1452;
  unsigned int *v1453;
  int8x16_t v1454;
  int8x16_t v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  int8x16_t v1460;
  int8x16_t v1461;
  int8x16_t v1462;
  int8x16_t v1463;
  int8x16_t v1464;
  int8x16_t v1465;
  int8x16_t v1466;
  int8x16_t v1467;
  unint64_t v1468;
  unint64_t v1469;
  unint64_t v1470;
  int8x16_t v1471;
  int8x16_t v1472;
  unint64_t v1473;
  unint64_t v1474;
  unint64_t v1475;
  unint64_t v1476;
  int8x16_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  int8x16_t *v1482;
  unsigned int v1483;
  uint64_t *v1484;
  uint64_t v1485;
  uint64_t v1487;
  _DWORD *v1489;
  _DWORD *v1490;
  _DWORD *v1492;
  _DWORD *v1493;
  _DWORD *v1495;
  _DWORD *v1496;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t *v1500;
  int v1501;
  uint64_t v1502;
  uint64_t *v1503;
  unsigned int v1504;
  unsigned int *v1505;
  unsigned int *v1506;
  unsigned int v1507;
  uint64_t *v1508;
  uint64_t v1509;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  uint64_t v1517;
  int v1518;
  uint64_t *v1519;
  uint64_t v1520;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t *v1524;
  unsigned int v1525;
  uint64_t v1526;
  uint64_t *v1527;
  uint64_t v1528;
  int v1529;
  uint64_t *v1530;
  uint64_t v1531;
  unsigned int *v1532;
  unsigned int *v1533;
  int8x16_t v1534;
  int8x16_t v1535;
  int8x16_t v1536;
  int8x16_t v1537;
  int8x16_t v1538;
  int8x16_t v1539;
  int8x16_t v1540;
  int8x16_t v1541;
  int8x16_t v1542;
  int8x16_t v1543;
  unint64_t v1544;
  unint64_t v1545;
  int8x16_t v1546;
  int8x16_t v1547;
  unint64_t v1548;
  int8x16_t v1549;
  unint64_t v1550;
  int8x16_t v1551;
  int8x16_t v1552;
  int8x16_t v1553;
  int8x16_t v1554;
  int8x16_t v1555;
  int8x16_t v1556;
  unint64_t v1557;
  unint64_t v1558;
  int8x16_t v1559;
  unint64_t v1560;
  unint64_t v1561;
  int8x16_t v1562;
  unint64_t v1563;
  int8x16_t v1564;
  int8x16_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  int8x16_t *v1568;
  int8x16_t *v1569;
  int8x16_t *v1570;
  unsigned int v1571;
  uint64_t *v1572;
  uint64_t v1573;
  uint64_t v1575;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t *v1579;
  unsigned int v1580;
  uint64_t v1581;
  uint64_t *v1582;
  uint64_t v1583;
  int v1584;
  uint64_t *v1585;
  uint64_t v1586;
  unsigned int *v1587;
  unsigned int *v1588;
  int8x16_t v1589;
  int8x16_t v1590;
  int8x16_t v1591;
  int8x16_t v1592;
  int8x16_t v1593;
  int8x16_t v1594;
  int8x16_t v1595;
  int8x16_t v1596;
  int8x16_t v1597;
  int8x16_t v1598;
  unint64_t v1599;
  unint64_t v1600;
  int8x16_t v1601;
  int8x16_t v1602;
  unint64_t v1603;
  int8x16_t v1604;
  unint64_t v1605;
  int8x16_t v1606;
  int8x16_t v1607;
  int8x16_t v1608;
  int8x16_t v1609;
  int8x16_t v1610;
  int8x16_t v1611;
  unint64_t v1612;
  unint64_t v1613;
  int8x16_t v1614;
  unint64_t v1615;
  unint64_t v1616;
  int8x16_t v1617;
  unint64_t v1618;
  int8x16_t v1619;
  int8x16_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  int8x16_t *v1623;
  int8x16_t *v1624;
  int8x16_t *v1625;
  unsigned int v1626;
  uint64_t *v1627;
  uint64_t v1628;
  uint64_t v1630;
  _DWORD *v1632;
  _DWORD *v1633;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t *v1637;
  unsigned int v1638;
  uint64_t v1639;
  uint64_t *v1640;
  uint64_t v1641;
  int v1642;
  uint64_t *v1643;
  uint64_t v1644;
  unsigned int *v1645;
  unsigned int *v1646;
  int8x16_t v1647;
  int8x16_t v1648;
  __int128 v1649;
  __int128 v1650;
  __int128 v1651;
  __int128 v1652;
  int8x16_t v1653;
  int8x16_t v1654;
  int8x16_t v1655;
  int8x16_t v1656;
  int8x16_t v1657;
  int8x16_t v1658;
  int8x16_t v1659;
  int8x16_t v1660;
  unint64_t v1661;
  unint64_t v1662;
  unint64_t v1663;
  int8x16_t v1664;
  int8x16_t v1665;
  unint64_t v1666;
  unint64_t v1667;
  unint64_t v1668;
  unint64_t v1669;
  int8x16_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  int8x16_t *v1675;
  unsigned int v1676;
  uint64_t *v1677;
  uint64_t v1678;
  uint64_t v1680;
  _DWORD *v1682;
  _DWORD *v1683;
  unsigned int *v1684;
  unsigned int *v1685;
  _DWORD *v1687;
  _DWORD *v1688;
  _DWORD *v1690;
  _DWORD *v1691;
  _DWORD *v1693;
  _DWORD *v1694;
  _DWORD *v1696;
  _DWORD *v1697;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t *v1701;
  unsigned int v1702;
  uint64_t v1703;
  uint64_t *v1704;
  uint64_t v1705;
  int v1706;
  uint64_t *v1707;
  uint64_t v1708;
  unsigned int *v1709;
  unsigned int *v1710;
  int8x16_t v1711;
  int8x16_t v1712;
  __int128 v1713;
  __int128 v1714;
  __int128 v1715;
  __int128 v1716;
  int8x16_t v1717;
  int8x16_t v1718;
  int8x16_t v1719;
  int8x16_t v1720;
  int8x16_t v1721;
  int8x16_t v1722;
  int8x16_t v1723;
  int8x16_t v1724;
  unint64_t v1725;
  unint64_t v1726;
  unint64_t v1727;
  int8x16_t v1728;
  int8x16_t v1729;
  unint64_t v1730;
  unint64_t v1731;
  unint64_t v1732;
  unint64_t v1733;
  int8x16_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  int8x16_t *v1739;
  unsigned int v1740;
  uint64_t *v1741;
  uint64_t v1742;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t *v1747;
  unsigned int v1748;
  uint64_t v1749;
  uint64_t *v1750;
  uint64_t v1751;
  int v1752;
  uint64_t *v1753;
  uint64_t v1754;
  unsigned int *v1755;
  unsigned int *v1756;
  int8x16_t v1757;
  int8x16_t v1758;
  int8x16_t v1759;
  int8x16_t v1760;
  int8x16_t v1761;
  int8x16_t v1762;
  int8x16_t v1763;
  int8x16_t v1764;
  int8x16_t v1765;
  int8x16_t v1766;
  unint64_t v1767;
  unint64_t v1768;
  unint64_t v1769;
  unint64_t v1770;
  int8x16_t v1771;
  int8x16_t v1772;
  int8x16_t v1773;
  int8x16_t v1774;
  int8x16_t v1775;
  int8x16_t v1776;
  int8x16_t v1777;
  int8x16_t v1778;
  uint64_t v1779;
  int8x16_t *v1780;
  int8x16_t *v1781;
  int8x16_t *v1782;
  int8x16_t *v1783;
  int8x16_t *v1784;
  int8x16_t *v1785;
  unsigned int v1786;
  uint64_t *v1787;
  uint64_t v1788;
  int8x16_t *v1790;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t *v1794;
  unsigned int v1795;
  uint64_t v1796;
  uint64_t *v1797;
  uint64_t v1798;
  int v1799;
  uint64_t *v1800;
  uint64_t v1801;
  unsigned int *v1802;
  unsigned int *v1803;
  int8x16_t v1804;
  int8x16_t v1805;
  int8x16_t v1806;
  int8x16_t v1807;
  unint64_t v1808;
  int8x16_t v1809;
  int8x16_t v1810;
  int8x16_t v1811;
  int8x16_t v1812;
  int8x16_t v1813;
  int8x16_t v1814;
  int8x16_t v1815;
  int8x16_t v1816;
  unint64_t v1817;
  unint64_t v1818;
  unint64_t v1819;
  int8x16_t v1820;
  int8x16_t v1821;
  unint64_t v1822;
  unint64_t v1823;
  unint64_t v1824;
  int8x16_t v1825;
  int8x16_t v1826;
  unint64_t v1827;
  unint64_t v1828;
  int8x16_t v1829;
  int8x16_t v1830;
  int8x16_t v1831;
  int8x16_t v1832;
  int8x16_t v1833;
  int8x16_t v1834;
  uint64_t v1835;
  int8x16_t *v1836;
  int8x16_t v1837;
  int8x16_t v1838;
  __int128 v1839;
  __int128 v1840;
  __int128 v1841;
  int8x16_t *v1842;
  int8x16_t *v1843;
  int8x16_t *v1844;
  int8x16_t *v1845;
  int8x16_t *v1846;
  int8x16_t *v1847;
  __int8 *v1848;
  int8x16_t *v1849;
  unsigned int v1850;
  uint64_t *v1851;
  uint64_t v1852;
  int8x16_t *v1854;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t *v1858;
  unsigned int v1859;
  uint64_t v1860;
  uint64_t *v1861;
  uint64_t v1862;
  int v1863;
  uint64_t *v1864;
  uint64_t v1865;
  unsigned int *v1866;
  unsigned int *v1867;
  int8x16_t v1868;
  int8x16_t v1869;
  int8x16_t v1870;
  int8x16_t v1871;
  int8x16_t v1872;
  int8x16_t v1873;
  int8x16_t v1874;
  int8x16_t v1875;
  int8x16_t v1876;
  int8x16_t v1877;
  unint64_t v1878;
  unint64_t v1879;
  unint64_t v1880;
  unint64_t v1881;
  int8x16_t v1882;
  int8x16_t v1883;
  int8x16_t v1884;
  int8x16_t v1885;
  int8x16_t v1886;
  int8x16_t v1887;
  int8x16_t v1888;
  int8x16_t v1889;
  uint64_t v1890;
  int8x16_t *v1891;
  int8x16_t *v1892;
  int8x16_t *v1893;
  int8x16_t *v1894;
  int8x16_t *v1895;
  int8x16_t *v1896;
  unsigned int v1897;
  uint64_t *v1898;
  uint64_t v1899;
  int8x16_t *v1901;
  uint64_t v1903;
  uint64_t v1904;
  uint64_t *v1905;
  unsigned int v1906;
  uint64_t v1907;
  uint64_t *v1908;
  uint64_t v1909;
  int v1910;
  uint64_t *v1911;
  uint64_t v1912;
  unsigned int *v1913;
  unsigned int *v1914;
  int8x16_t v1915;
  int8x16_t v1916;
  int8x16_t v1917;
  int8x16_t v1918;
  int8x16_t v1919;
  int8x16_t v1920;
  int8x16_t v1921;
  int8x16_t v1922;
  int8x16_t v1923;
  int8x16_t v1924;
  unint64_t v1925;
  unint64_t v1926;
  unint64_t v1927;
  unint64_t v1928;
  int8x16_t v1929;
  int8x16_t v1930;
  int8x16_t v1931;
  int8x16_t v1932;
  int8x16_t v1933;
  int8x16_t v1934;
  int8x16_t v1935;
  int8x16_t v1936;
  uint64_t v1937;
  int8x16_t *v1938;
  int8x16_t *v1939;
  int8x16_t *v1940;
  int8x16_t *v1941;
  int8x16_t *v1942;
  int8x16_t *v1943;
  unsigned int v1944;
  uint64_t *v1945;
  uint64_t v1946;
  int8x16_t *v1948;
  _DWORD *v1950;
  _DWORD *v1951;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t *v1955;
  unsigned int v1956;
  uint64_t v1957;
  uint64_t *v1958;
  uint64_t v1959;
  int v1960;
  uint64_t *v1961;
  uint64_t v1962;
  unsigned int *v1963;
  unsigned int *v1964;
  int8x16_t v1965;
  int8x16_t v1966;
  int8x16_t v1967;
  int8x16_t v1968;
  int8x16_t v1969;
  int8x16_t v1970;
  int8x16_t v1971;
  unint64_t v1972;
  unint64_t v1973;
  unint64_t v1974;
  int8x16_t v1975;
  int8x16_t v1976;
  uint64_t v1977;
  int8x16_t *v1978;
  int8x16_t *v1979;
  int8x16_t *v1980;
  unsigned int v1981;
  uint64_t *v1982;
  uint64_t v1983;
  int8x16_t *v1985;
  _DWORD *v1987;
  _DWORD *v1988;
  _DWORD *v1990;
  _DWORD *v1991;
  _DWORD *v1993;
  _DWORD *v1994;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t *v1998;
  int v1999;
  uint64_t v2000;
  uint64_t *v2001;
  unsigned int v2002;
  unsigned int *v2003;
  unsigned int *v2004;
  unsigned int v2005;
  uint64_t *v2006;
  uint64_t v2007;
  __int128 *v2009;
  _OWORD *v2010;
  __int128 v2011;
  __int128 v2012;
  uint64_t v2013;
  int v2014;
  uint64_t *v2015;
  uint64_t v2016;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t *v2020;
  unsigned int v2021;
  uint64_t v2022;
  uint64_t *v2023;
  uint64_t v2024;
  int v2025;
  uint64_t *v2026;
  uint64_t v2027;
  unsigned int *v2028;
  unsigned int *v2029;
  int8x16_t v2030;
  int8x16_t v2031;
  int8x16_t v2032;
  int8x16_t v2033;
  int8x16_t v2034;
  int8x16_t v2035;
  int8x16_t v2036;
  int8x16_t v2037;
  int8x16_t v2038;
  int8x16_t v2039;
  int8x16_t v2040;
  int8x16_t v2041;
  uint64_t v2042;
  int8x16_t *v2043;
  int8x16_t *v2044;
  int8x16_t *v2045;
  int8x16_t *v2046;
  unsigned int v2047;
  uint64_t *v2048;
  uint64_t v2049;
  int8x16_t *v2051;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t *v2055;
  unsigned int v2056;
  uint64_t v2057;
  uint64_t *v2058;
  uint64_t v2059;
  int v2060;
  uint64_t *v2061;
  uint64_t v2062;
  unsigned int *v2063;
  unsigned int *v2064;
  int8x16_t v2065;
  int8x16_t v2066;
  int8x16_t v2067;
  int8x16_t v2068;
  int8x16_t v2069;
  int8x16_t v2070;
  int8x16_t v2071;
  int8x16_t v2072;
  int8x16_t v2073;
  int8x16_t v2074;
  int8x16_t v2075;
  int8x16_t v2076;
  uint64_t v2077;
  int8x16_t *v2078;
  int8x16_t *v2079;
  int8x16_t *v2080;
  int8x16_t *v2081;
  unsigned int v2082;
  uint64_t *v2083;
  uint64_t v2084;
  int8x16_t *v2086;
  _DWORD *v2088;
  _DWORD *v2089;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t *v2093;
  unsigned int v2094;
  uint64_t v2095;
  uint64_t *v2096;
  uint64_t v2097;
  int v2098;
  uint64_t *v2099;
  uint64_t v2100;
  unsigned int *v2101;
  unsigned int *v2102;
  int8x16_t v2103;
  int8x16_t v2104;
  int8x16_t v2105;
  int8x16_t v2106;
  int8x16_t v2107;
  int8x16_t v2108;
  int8x16_t v2109;
  unint64_t v2110;
  unint64_t v2111;
  unint64_t v2112;
  int8x16_t v2113;
  int8x16_t v2114;
  uint64_t v2115;
  int8x16_t *v2116;
  int8x16_t *v2117;
  int8x16_t *v2118;
  unsigned int v2119;
  uint64_t *v2120;
  uint64_t v2121;
  int8x16_t *v2123;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t *v2127;
  unsigned int v2128;
  uint64_t v2129;
  uint64_t *v2130;
  uint64_t v2131;
  int v2132;
  uint64_t *v2133;
  uint64_t v2134;
  unsigned int *v2135;
  unsigned int *v2136;
  int8x16_t v2137;
  int8x16_t v2138;
  int8x16_t v2139;
  int8x16_t v2140;
  int8x16_t v2141;
  int8x16_t v2142;
  int8x16_t v2143;
  unint64_t v2144;
  unint64_t v2145;
  unint64_t v2146;
  int8x16_t v2147;
  int8x16_t v2148;
  uint64_t v2149;
  int8x16_t *v2150;
  int8x16_t *v2151;
  int8x16_t *v2152;
  unsigned int v2153;
  uint64_t *v2154;
  uint64_t v2155;
  int8x16_t *v2157;
  unint64_t v2158;
  unint64_t v2159;
  __int128 v2160;
  unint64_t v2161;
  unint64_t v2162;
  unint64_t v2163;
  unint64_t v2164;
  int8x16_t v2165;
  unint64_t v2166;
  int8x16_t v2167;
  __int128 v2168;
  unint64_t v2169;
  unint64_t v2170;
  unint64_t v2171;
  int8x16_t v2172;
  int8x16_t v2173;
  uint64_t v2174;
  int8x16_t v2175;
  int8x16_t v2176;
  int8x16_t v2177;
  int8x16_t v2178;
  int8x16_t v2179;
  int8x16_t v2180;
  int8x16_t v2181;
  int8x16_t v2182;
  uint64_t v2183;
  unint64_t v2184;
  int8x16_t v2185;
  unint64_t v2186;
  unint64_t v2187;
  unint64_t v2188;
  unint64_t v2189;
  unint64_t v2190;
  unint64_t v2191;
  unint64_t v2192;
  int8x16_t v2193;
  unint64_t v2194;
  unint64_t v2195;
  unint64_t v2196;
  unint64_t v2197;
  unint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  int8x16_t v2201;
  unint64_t v2202;
  unint64_t v2203;
  unint64_t v2204;
  int8x16_t v2205;
  int8x16_t v2206;
  int8x16_t v2207;
  unint64_t v2208;
  __int128 v2209;
  __int128 v2210;
  int8x16_t v2211;
  int8x16_t v2212;
  unint64_t v2213;
  __int128 v2214;
  int8x16_t v2215;
  int8x16_t v2216;
  unint64_t v2217;
  int8x16_t v2218;
  int8x16_t v2219;
  int8x16_t v2220;
  unint64_t v2221;
  int8x16_t v2222;
  int8x16_t v2223;
  int8x16_t v2224;
  unint64_t v2225;
  __int128 v2226;
  __int128 v2227;
  int8x16_t v2228;
  int8x16_t v2229;
  unint64_t v2230;
  int8x16_t v2231;
  int8x16_t v2232;
  int8x16_t v2233;
  unint64_t v2234;
  __int128 v2235;
  int8x16_t v2236;
  int8x16_t v2237;
  unint64_t v2238;
  __int128 v2239;
  int8x16_t v2240;
  int8x16_t v2241;
  unint64_t v2242;
  __int128 v2243;
  int8x16_t v2244;
  int8x16_t v2245;
  unint64_t v2246;
  __int128 v2247;
  int8x16_t v2248;
  int8x16_t v2249;
  int8x16_t v2250;
  __int128 v2251;
  unint64_t v2252;
  unint64_t v2253;
  int8x16_t v2254;
  __int128 v2255;
  int8x16_t v2256;
  int8x16_t v2257;
  int8x16_t v2258;
  __int128 v2259;
  unint64_t v2260;
  unint64_t v2261;
  int8x16_t v2262;
  __int128 v2263;
  int8x16_t v2264;
  int8x16_t v2265;
  int8x16_t v2266;
  unint64_t v2267;
  unint64_t v2268;
  unint64_t v2269;
  int8x16_t v2270;
  __int128 v2271;
  __int128 v2272;
  unint64_t v2273;
  unint64_t v2274;
  unint64_t v2275;
  int8x16_t v2276;
  unint64_t v2277;
  unint64_t v2278;
  unint64_t v2279;
  unint64_t v2280;
  unint64_t v2281;
  int8x16_t v2282;
  __int128 v2283;
  __int128 v2284;
  int8x16_t v2285;
  int8x16_t v2286;
  unint64_t v2287;
  int8x16_t v2288;
  unint64_t v2289;
  unint64_t v2290;
  unint64_t v2291;
  unint64_t v2292;
  unint64_t v2293;
  int8x16_t v2294;
  int8x16_t v2295;
  int8x16_t v2296;
  int8x16_t v2297;
  int8x16_t v2298;
  unint64_t v2299;
  int8x16_t v2300;
  unint64_t v2301;
  unint64_t v2302;
  unint64_t v2303;
  unint64_t v2304;
  unint64_t v2305;
  int8x16_t v2306;
  int8x16_t v2307;
  int8x16_t v2308;
  int8x16_t v2309;
  int8x16_t v2310;
  unint64_t v2311;
  int8x16_t v2312;
  unint64_t v2313;
  unint64_t v2314;

  v4 = *(_DWORD **)(a4 + 216);
  v5 = *(_DWORD **)(a4 + 224);
  if (a3[27] != a3[28] && v4 != v5)
  {
    do
    {
      v15 = *(_QWORD *)(result + 14344);
      v16 = (*(_DWORD *)(result + 14368) * *v4);
      v17 = (uint64_t *)(v15 + 8 * v16);
      v18 = *(_DWORD *)(result + 14264);
      v19 = v16 + v18;
      v20 = (uint64_t *)(v15 + 8 * v19);
      if (v18)
      {
        if (*v17 == -1)
        {
          v21 = 8 * v19 - 8 * v16 - 8;
          v22 = 1;
          v23 = v17;
          while (1)
          {
            v18 = v22;
            if (!v21)
              break;
            v17 = v23 + 1;
            v24 = v23[1];
            ++v22;
            v21 -= 8;
            ++v23;
            if (v24 != -1)
              goto LABEL_26;
          }
          v17 = v20;
        }
        else
        {
          v18 = 0;
        }
      }
LABEL_26:
      v25 = a3[27];
      v26 = a3[28];
      while (v25 != v26 && v17 != v20)
      {
        v39 = *v25;
        if (*v25 > v18)
        {
          v40 = v17 + 1;
          while (v40 != v20)
          {
            ++v18;
            v41 = *v40++;
            if (v41 != -1 && v39 <= v18)
            {
              v17 = v40 - 1;
              goto LABEL_40;
            }
          }
          break;
        }
LABEL_40:
        if (v39 == v18)
        {
          v43 = *(_QWORD *)(result + 14272) + 8 * *v17;
          if (v43 == *(_QWORD *)a2)
          {
            v33 = *(_QWORD *)(v43 + 64);
            v32 = *(int8x16_t *)(v43 + 32);
            v29 = *(int8x16_t *)(v43 + 48);
            v27 = *(int8x16_t *)v43;
            v31 = *(int8x16_t *)(v43 + 16);
            v34 = vextq_s8(v29, v29, 8uLL).u64[0];
            v30 = vextq_s8(v32, v32, 8uLL).u64[0];
            *(_QWORD *)&v28 = vextq_s8(v31, v31, 8uLL).u64[0];
          }
          else
          {
            v27 = *(int8x16_t *)v43;
            v28 = *(_OWORD *)(v43 + 24);
            v29 = *(int8x16_t *)(v43 + 48);
            v30 = *(_QWORD *)(v43 + 40);
            v31.i64[0] = *(_QWORD *)(v43 + 16);
            v32.i64[0] = *(_QWORD *)(v43 + 32);
            v33 = *(_QWORD *)(v43 + 64);
            v34 = vextq_s8(v29, v29, 8uLL).u64[0];
          }
          v35 = *(unsigned int *)(a2 + 16);
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          *((_QWORD *)&v28 + 1) = v32.i64[0];
          v36 = *(_QWORD *)a2 + 8 * (v25[1] + (_DWORD)v35 * v4[1]);
          v29.i64[1] = v34;
          *(_QWORD *)(v36 + 16) = v31.i64[0];
          *(int8x16_t *)v36 = v27;
          v37 = v36 + 8 * v35;
          *(_QWORD *)(v37 + 16) = v30;
          *(_OWORD *)v37 = v28;
          v38 = (int8x16_t *)(v36 + 16 * v35);
          v38[1].i64[0] = v33;
          *v38 = v29;
          v18 = v39;
        }
        v25 += 2;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  v7 = *(_DWORD **)(a4 + 192);
  v8 = *(_DWORD **)(a4 + 200);
  v9 = a3[24];
  v10 = a3[25];
  if (v9 == v10 || v7 == v8)
  {
    v12 = *(_DWORD **)(a4 + 216);
    v13 = *(_DWORD **)(a4 + 224);
    if (v9 == v10 || v12 == v13)
      goto LABEL_74;
    goto LABEL_86;
  }
  do
  {
    v44 = *(_QWORD *)(result + 12760);
    v45 = (*(_DWORD *)(result + 12784) * *v7);
    v46 = (uint64_t *)(v44 + 8 * v45);
    v47 = *(_DWORD *)(result + 12680);
    v48 = v45 + v47;
    v49 = (uint64_t *)(v44 + 8 * v48);
    if (v47)
    {
      if (*v46 == -1)
      {
        v50 = 8 * v48 - 8 * v45 - 8;
        v51 = 1;
        v52 = v46;
        while (1)
        {
          v47 = v51;
          if (!v50)
            break;
          v46 = v52 + 1;
          v53 = v52[1];
          ++v51;
          v50 -= 8;
          ++v52;
          if (v53 != -1)
            goto LABEL_52;
        }
        v46 = v49;
      }
      else
      {
        v47 = 0;
      }
    }
LABEL_52:
    v54 = a3[24];
    v55 = a3[25];
    while (v54 != v55 && v46 != v49)
    {
      v68 = *v54;
      if (*v54 > v47)
      {
        v69 = v46 + 1;
        while (v69 != v49)
        {
          ++v47;
          v70 = *v69++;
          if (v70 != -1 && v68 <= v47)
          {
            v46 = v69 - 1;
            goto LABEL_66;
          }
        }
        break;
      }
LABEL_66:
      if (v68 == v47)
      {
        v72 = *(_QWORD *)(result + 12688) + 8 * *v46;
        if (v72 == *(_QWORD *)a2)
        {
          v62 = *(_QWORD *)(v72 + 64);
          v61 = *(int8x16_t *)(v72 + 32);
          v58 = *(int8x16_t *)(v72 + 48);
          v56 = *(int8x16_t *)v72;
          v60 = *(int8x16_t *)(v72 + 16);
          v63 = vextq_s8(v58, v58, 8uLL).u64[0];
          v59 = vextq_s8(v61, v61, 8uLL).u64[0];
          *(_QWORD *)&v57 = vextq_s8(v60, v60, 8uLL).u64[0];
        }
        else
        {
          v56 = *(int8x16_t *)v72;
          v57 = *(_OWORD *)(v72 + 24);
          v58 = *(int8x16_t *)(v72 + 48);
          v59 = *(_QWORD *)(v72 + 40);
          v60.i64[0] = *(_QWORD *)(v72 + 16);
          v61.i64[0] = *(_QWORD *)(v72 + 32);
          v62 = *(_QWORD *)(v72 + 64);
          v63 = vextq_s8(v58, v58, 8uLL).u64[0];
        }
        v64 = *(unsigned int *)(a2 + 16);
        v56.i64[1] = vextq_s8(v56, v56, 8uLL).u64[0];
        *((_QWORD *)&v57 + 1) = v61.i64[0];
        v65 = *(_QWORD *)a2 + 8 * (v54[1] + (_DWORD)v64 * v7[1]);
        v58.i64[1] = v63;
        *(_QWORD *)(v65 + 16) = v60.i64[0];
        *(int8x16_t *)v65 = v56;
        v66 = v65 + 8 * v64;
        *(_QWORD *)(v66 + 16) = v59;
        *(_OWORD *)v66 = v57;
        v67 = (int8x16_t *)(v65 + 16 * v64);
        v67[1].i64[0] = v62;
        *v67 = v58;
        v47 = v68;
      }
      v54 += 2;
    }
    v7 += 2;
  }
  while (v7 != v8);
  v12 = *(_DWORD **)(a4 + 216);
  v13 = *(_DWORD **)(a4 + 224);
  if (a3[24] != a3[25] && v12 != v13)
  {
    do
    {
LABEL_86:
      v82 = *(_QWORD *)(result + 14200);
      v83 = (*(_DWORD *)(result + 14224) * *v12);
      v84 = (uint64_t *)(v82 + 8 * v83);
      v85 = *(_DWORD *)(result + 14120);
      v86 = v83 + v85;
      v87 = (uint64_t *)(v82 + 8 * v86);
      if (v85)
      {
        if (*v84 == -1)
        {
          v88 = 8 * v86 - 8 * v83 - 8;
          v89 = 1;
          v90 = v84;
          while (1)
          {
            v85 = v89;
            if (!v88)
              break;
            v84 = v90 + 1;
            v91 = v90[1];
            ++v89;
            v88 -= 8;
            ++v90;
            if (v91 != -1)
              goto LABEL_94;
          }
          v84 = v87;
        }
        else
        {
          v85 = 0;
        }
      }
LABEL_94:
      v92 = a3[24];
      v93 = a3[25];
      while (v92 != v93 && v84 != v87)
      {
        v106 = *v92;
        if (*v92 > v85)
        {
          v107 = v84 + 1;
          while (v107 != v87)
          {
            ++v85;
            v108 = *v107++;
            if (v108 != -1 && v106 <= v85)
            {
              v84 = v107 - 1;
              goto LABEL_108;
            }
          }
          break;
        }
LABEL_108:
        if (v106 == v85)
        {
          v110 = *(_QWORD *)(result + 14128) + 8 * *v84;
          if (v110 == *(_QWORD *)a2)
          {
            v100 = *(_QWORD *)(v110 + 64);
            v99 = *(int8x16_t *)(v110 + 32);
            v96 = *(int8x16_t *)(v110 + 48);
            v94 = *(int8x16_t *)v110;
            v98 = *(int8x16_t *)(v110 + 16);
            v101 = vextq_s8(v96, v96, 8uLL).u64[0];
            v97 = vextq_s8(v99, v99, 8uLL).u64[0];
            *(_QWORD *)&v95 = vextq_s8(v98, v98, 8uLL).u64[0];
          }
          else
          {
            v94 = *(int8x16_t *)v110;
            v95 = *(_OWORD *)(v110 + 24);
            v96 = *(int8x16_t *)(v110 + 48);
            v97 = *(_QWORD *)(v110 + 40);
            v98.i64[0] = *(_QWORD *)(v110 + 16);
            v99.i64[0] = *(_QWORD *)(v110 + 32);
            v100 = *(_QWORD *)(v110 + 64);
            v101 = vextq_s8(v96, v96, 8uLL).u64[0];
          }
          v102 = *(unsigned int *)(a2 + 16);
          v94.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
          *((_QWORD *)&v95 + 1) = v99.i64[0];
          v103 = *(_QWORD *)a2 + 8 * (v92[1] + (_DWORD)v102 * v12[1]);
          v96.i64[1] = v101;
          *(_QWORD *)(v103 + 16) = v98.i64[0];
          *(int8x16_t *)v103 = v94;
          v104 = v103 + 8 * v102;
          *(_QWORD *)(v104 + 16) = v97;
          *(_OWORD *)v104 = v95;
          v105 = (int8x16_t *)(v103 + 16 * v102);
          v105[1].i64[0] = v100;
          *v105 = v96;
          v85 = v106;
        }
        v92 += 2;
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
LABEL_74:
  v74 = *(_DWORD **)(a4 + 168);
  v75 = *(_DWORD **)(a4 + 176);
  v76 = a3[21];
  v77 = a3[22];
  if (v76 == v77 || v74 == v75)
  {
    v79 = *(_DWORD **)(a4 + 192);
    v80 = *(_DWORD **)(a4 + 200);
    if (v76 != v77 && v79 != v80)
      goto LABEL_149;
LABEL_142:
    v142 = *(_DWORD **)(a4 + 216);
    v143 = *(_DWORD **)(a4 + 224);
    if (v76 == v77 || v142 == v143)
      goto LABEL_179;
    goto LABEL_196;
  }
  do
  {
    v111 = *(_QWORD *)(result + 11176);
    v112 = (*(_DWORD *)(result + 11200) * *v74);
    v113 = (uint64_t *)(v111 + 8 * v112);
    v114 = *(_DWORD *)(result + 11096);
    v115 = v112 + v114;
    v116 = (uint64_t *)(v111 + 8 * v115);
    if (v114)
    {
      if (*v113 == -1)
      {
        v117 = 8 * v115 - 8 * v112 - 8;
        v118 = 1;
        v119 = v113;
        while (1)
        {
          v114 = v118;
          if (!v117)
            break;
          v113 = v119 + 1;
          v120 = v119[1];
          ++v118;
          v117 -= 8;
          ++v119;
          if (v120 != -1)
            goto LABEL_120;
        }
        v113 = v116;
      }
      else
      {
        v114 = 0;
      }
    }
LABEL_120:
    v121 = a3[21];
    v122 = a3[22];
    while (v121 != v122 && v113 != v116)
    {
      v136 = *v121;
      if (*v121 > v114)
      {
        v137 = v113 + 1;
        while (v137 != v116)
        {
          ++v114;
          v138 = *v137++;
          if (v138 != -1 && v136 <= v114)
          {
            v113 = v137 - 1;
            goto LABEL_134;
          }
        }
        break;
      }
LABEL_134:
      if (v136 == v114)
      {
        v140 = (__int128 *)(*(_QWORD *)(result + 11104) + 8 * *v113);
        if (v140 == *(__int128 **)a2)
        {
          v130 = v140[6];
          v129 = v140[7];
          v128 = v140[4];
          v127 = v140[5];
          v126 = v140[2];
          v125 = v140[3];
          v124 = *v140;
          v123 = v140[1];
        }
        else
        {
          v124 = *v140;
          v123 = v140[1];
          v126 = v140[2];
          v125 = v140[3];
          v128 = v140[4];
          v127 = v140[5];
          v130 = v140[6];
          v129 = v140[7];
        }
        v131 = *(unsigned int *)(a2 + 16);
        v132 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v121[1] + (_DWORD)v131 * v74[1]));
        *v132 = v124;
        v132[1] = v123;
        v133 = (_OWORD *)((char *)v132 + 8 * v131);
        *v133 = v126;
        v133[1] = v125;
        v134 = &v132[v131];
        *v134 = v128;
        v134[1] = v127;
        v135 = (_OWORD *)((char *)v132 + 24 * v131);
        *v135 = v130;
        v135[1] = v129;
        v114 = v136;
      }
      v121 += 2;
    }
    v74 += 2;
  }
  while (v74 != v75);
  v76 = a3[21];
  v77 = a3[22];
  v79 = *(_DWORD **)(a4 + 192);
  v80 = *(_DWORD **)(a4 + 200);
  if (v76 == v77 || v79 == v80)
    goto LABEL_142;
  do
  {
LABEL_149:
    v145 = *(_QWORD *)(result + 12616);
    v146 = (*(_DWORD *)(result + 12640) * *v79);
    v147 = (uint64_t *)(v145 + 8 * v146);
    v148 = *(_DWORD *)(result + 12536);
    v149 = v146 + v148;
    v150 = (uint64_t *)(v145 + 8 * v149);
    if (v148)
    {
      if (*v147 == -1)
      {
        v151 = 8 * v149 - 8 * v146 - 8;
        v152 = 1;
        v153 = v147;
        while (1)
        {
          v148 = v152;
          if (!v151)
            break;
          v147 = v153 + 1;
          v154 = v153[1];
          ++v152;
          v151 -= 8;
          ++v153;
          if (v154 != -1)
            goto LABEL_157;
        }
        v147 = v150;
      }
      else
      {
        v148 = 0;
      }
    }
LABEL_157:
    v155 = a3[21];
    v156 = a3[22];
    while (v155 != v156 && v147 != v150)
    {
      v167 = *v155;
      if (*v155 > v148)
      {
        v168 = v147 + 1;
        while (v168 != v150)
        {
          ++v148;
          v169 = *v168++;
          if (v169 != -1 && v167 <= v148)
          {
            v147 = v168 - 1;
            goto LABEL_171;
          }
        }
        break;
      }
LABEL_171:
      if (v167 == v148)
      {
        v171 = (int8x16_t *)(*(_QWORD *)(result + 12544) + 8 * *v147);
        if (v171 == *(int8x16_t **)a2)
        {
          v162 = v171[4];
          v161 = v171[5];
          v160 = v171[2];
          v159 = v171[3];
          v158 = *v171;
          v157 = v171[1];
        }
        else
        {
          v158 = *v171;
          v157 = v171[1];
          v160 = v171[2];
          v159 = v171[3];
          v162 = v171[4];
          v161 = v171[5];
        }
        v163 = *(unsigned int *)(a2 + 16);
        v161.i64[1] = vextq_s8(v161, v161, 8uLL).u64[0];
        v162.i64[1] = vextq_s8(v162, v162, 8uLL).u64[0];
        v159.i64[1] = vextq_s8(v159, v159, 8uLL).u64[0];
        v160.i64[1] = vextq_s8(v160, v160, 8uLL).u64[0];
        v157.i64[1] = vextq_s8(v157, v157, 8uLL).u64[0];
        v164 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v155[1] + (_DWORD)v163 * v79[1]));
        v158.i64[1] = vextq_s8(v158, v158, 8uLL).u64[0];
        *v164 = v158;
        v164[1] = v157;
        v165 = (int8x16_t *)((char *)v164 + 8 * v163);
        *v165 = v160;
        v165[1] = v159;
        v166 = &v164[v163];
        *v166 = v162;
        v166[1] = v161;
        v148 = v167;
      }
      v155 += 2;
    }
    v79 += 2;
  }
  while (v79 != v80);
  v142 = *(_DWORD **)(a4 + 216);
  v143 = *(_DWORD **)(a4 + 224);
  if (a3[21] != a3[22] && v142 != v143)
  {
    do
    {
LABEL_196:
      v184 = *(_QWORD *)(result + 14056);
      v185 = (*(_DWORD *)(result + 14080) * *v142);
      v186 = (uint64_t *)(v184 + 8 * v185);
      v187 = *(_DWORD *)(result + 13976);
      v188 = v185 + v187;
      v189 = (uint64_t *)(v184 + 8 * v188);
      if (v187)
      {
        if (*v186 == -1)
        {
          v190 = 8 * v188 - 8 * v185 - 8;
          v191 = 1;
          v192 = v186;
          while (1)
          {
            v187 = v191;
            if (!v190)
              break;
            v186 = v192 + 1;
            v193 = v192[1];
            ++v191;
            v190 -= 8;
            ++v192;
            if (v193 != -1)
              goto LABEL_204;
          }
          v186 = v189;
        }
        else
        {
          v187 = 0;
        }
      }
LABEL_204:
      v194 = a3[21];
      v195 = a3[22];
      while (v194 != v195 && v186 != v189)
      {
        v206 = *v194;
        if (*v194 > v187)
        {
          v207 = v186 + 1;
          while (v207 != v189)
          {
            ++v187;
            v208 = *v207++;
            if (v208 != -1 && v206 <= v187)
            {
              v186 = v207 - 1;
              goto LABEL_218;
            }
          }
          break;
        }
LABEL_218:
        if (v206 == v187)
        {
          v210 = (int8x16_t *)(*(_QWORD *)(result + 13984) + 8 * *v186);
          if (v210 == *(int8x16_t **)a2)
          {
            v201 = v210[4];
            v200 = v210[5];
            v199 = v210[2];
            v198 = v210[3];
            v197 = *v210;
            v196 = v210[1];
          }
          else
          {
            v197 = *v210;
            v196 = v210[1];
            v199 = v210[2];
            v198 = v210[3];
            v201 = v210[4];
            v200 = v210[5];
          }
          v202 = *(unsigned int *)(a2 + 16);
          v200.i64[1] = vextq_s8(v200, v200, 8uLL).u64[0];
          v201.i64[1] = vextq_s8(v201, v201, 8uLL).u64[0];
          v198.i64[1] = vextq_s8(v198, v198, 8uLL).u64[0];
          v199.i64[1] = vextq_s8(v199, v199, 8uLL).u64[0];
          v196.i64[1] = vextq_s8(v196, v196, 8uLL).u64[0];
          v203 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v194[1] + (_DWORD)v202 * v142[1]));
          v197.i64[1] = vextq_s8(v197, v197, 8uLL).u64[0];
          *v203 = v197;
          v203[1] = v196;
          v204 = (int8x16_t *)((char *)v203 + 8 * v202);
          *v204 = v199;
          v204[1] = v198;
          v205 = &v203[v202];
          *v205 = v201;
          v205[1] = v200;
          v187 = v206;
        }
        v194 += 2;
      }
      v142 += 2;
    }
    while (v142 != v143);
  }
LABEL_179:
  v173 = *(_DWORD **)(a4 + 144);
  v174 = *(_DWORD **)(a4 + 152);
  v175 = a3[18];
  v176 = a3[19];
  if (v175 == v176 || v173 == v174)
  {
    v178 = *(_DWORD **)(a4 + 168);
    v179 = *(_DWORD **)(a4 + 176);
    if (v175 != v176 && v178 != v179)
      goto LABEL_253;
LABEL_189:
    v181 = *(_DWORD **)(a4 + 192);
    v182 = *(_DWORD **)(a4 + 200);
    if (v175 != v176 && v181 != v182)
      goto LABEL_290;
LABEL_283:
    v273 = *(_DWORD **)(a4 + 216);
    v274 = *(_DWORD **)(a4 + 224);
    if (v175 == v176 || v273 == v274)
      goto LABEL_320;
    goto LABEL_342;
  }
  do
  {
    v211 = *(_QWORD *)(result + 9592);
    v212 = (*(_DWORD *)(result + 9616) * *v173);
    v213 = (uint64_t *)(v211 + 8 * v212);
    v214 = *(_DWORD *)(result + 9512);
    v215 = v212 + v214;
    v216 = (uint64_t *)(v211 + 8 * v215);
    if (v214)
    {
      if (*v213 == -1)
      {
        v217 = 8 * v215 - 8 * v212 - 8;
        v218 = 1;
        v219 = v213;
        while (1)
        {
          v214 = v218;
          if (!v217)
            break;
          v213 = v219 + 1;
          v220 = v219[1];
          ++v218;
          v217 -= 8;
          ++v219;
          if (v220 != -1)
            goto LABEL_230;
        }
        v213 = v216;
      }
      else
      {
        v214 = 0;
      }
    }
LABEL_230:
    v221 = a3[18];
    v222 = a3[19];
    while (v221 != v222 && v213 != v216)
    {
      v236 = *v221;
      if (*v221 > v214)
      {
        v237 = v213 + 1;
        while (v237 != v216)
        {
          ++v214;
          v238 = *v237++;
          if (v238 != -1 && v236 <= v214)
          {
            v213 = v237 - 1;
            goto LABEL_244;
          }
        }
        break;
      }
LABEL_244:
      if (v236 == v214)
      {
        v240 = (__int128 *)(*(_QWORD *)(result + 9520) + 8 * *v213);
        if (v240 == *(__int128 **)a2)
        {
          v230 = v240[6];
          v229 = v240[7];
          v228 = v240[4];
          v227 = v240[5];
          v226 = v240[2];
          v225 = v240[3];
          v224 = *v240;
          v223 = v240[1];
        }
        else
        {
          v224 = *v240;
          v223 = v240[1];
          v226 = v240[2];
          v225 = v240[3];
          v228 = v240[4];
          v227 = v240[5];
          v230 = v240[6];
          v229 = v240[7];
        }
        v231 = *(unsigned int *)(a2 + 16);
        v232 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v221[1] + (_DWORD)v231 * v173[1]));
        *v232 = v224;
        v232[1] = v223;
        v233 = (_OWORD *)((char *)v232 + 8 * v231);
        *v233 = v226;
        v233[1] = v225;
        v234 = &v232[v231];
        *v234 = v228;
        v234[1] = v227;
        v235 = (_OWORD *)((char *)v232 + 24 * v231);
        *v235 = v230;
        v235[1] = v229;
        v214 = v236;
      }
      v221 += 2;
    }
    v173 += 2;
  }
  while (v173 != v174);
  v175 = a3[18];
  v176 = a3[19];
  v178 = *(_DWORD **)(a4 + 168);
  v179 = *(_DWORD **)(a4 + 176);
  if (v175 == v176 || v178 == v179)
    goto LABEL_189;
  do
  {
LABEL_253:
    v242 = *(_QWORD *)(result + 11032);
    v243 = (*(_DWORD *)(result + 11056) * *v178);
    v244 = (uint64_t *)(v242 + 8 * v243);
    v245 = *(_DWORD *)(result + 10952);
    v246 = v243 + v245;
    v247 = (uint64_t *)(v242 + 8 * v246);
    if (v245)
    {
      if (*v244 == -1)
      {
        v248 = 8 * v246 - 8 * v243 - 8;
        v249 = 1;
        v250 = v244;
        while (1)
        {
          v245 = v249;
          if (!v248)
            break;
          v244 = v250 + 1;
          v251 = v250[1];
          ++v249;
          v248 -= 8;
          ++v250;
          if (v251 != -1)
            goto LABEL_261;
        }
        v244 = v247;
      }
      else
      {
        v245 = 0;
      }
    }
LABEL_261:
    v252 = a3[18];
    v253 = a3[19];
    while (v252 != v253 && v244 != v247)
    {
      v267 = *v252;
      if (*v252 > v245)
      {
        v268 = v244 + 1;
        while (v268 != v247)
        {
          ++v245;
          v269 = *v268++;
          if (v269 != -1 && v267 <= v245)
          {
            v244 = v268 - 1;
            goto LABEL_275;
          }
        }
        break;
      }
LABEL_275:
      if (v267 == v245)
      {
        v271 = (__int128 *)(*(_QWORD *)(result + 10960) + 8 * *v244);
        if (v271 == *(__int128 **)a2)
        {
          v261 = v271[6];
          v260 = v271[7];
          v259 = v271[4];
          v258 = v271[5];
          v257 = v271[2];
          v256 = v271[3];
          v255 = *v271;
          v254 = v271[1];
        }
        else
        {
          v255 = *v271;
          v254 = v271[1];
          v257 = v271[2];
          v256 = v271[3];
          v259 = v271[4];
          v258 = v271[5];
          v261 = v271[6];
          v260 = v271[7];
        }
        v262 = *(unsigned int *)(a2 + 16);
        v263 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v252[1] + (_DWORD)v262 * v178[1]));
        *v263 = v255;
        v263[1] = v254;
        v264 = (_OWORD *)((char *)v263 + 8 * v262);
        *v264 = v257;
        v264[1] = v256;
        v265 = &v263[v262];
        *v265 = v259;
        v265[1] = v258;
        v266 = (_OWORD *)((char *)v263 + 24 * v262);
        *v266 = v261;
        v266[1] = v260;
        v245 = v267;
      }
      v252 += 2;
    }
    v178 += 2;
  }
  while (v178 != v179);
  v175 = a3[18];
  v176 = a3[19];
  v181 = *(_DWORD **)(a4 + 192);
  v182 = *(_DWORD **)(a4 + 200);
  if (v175 == v176 || v181 == v182)
    goto LABEL_283;
  do
  {
LABEL_290:
    v276 = *(_QWORD *)(result + 12472);
    v277 = (*(_DWORD *)(result + 12496) * *v181);
    v278 = (uint64_t *)(v276 + 8 * v277);
    v279 = *(_DWORD *)(result + 12392);
    v280 = v277 + v279;
    v281 = (uint64_t *)(v276 + 8 * v280);
    if (v279)
    {
      if (*v278 == -1)
      {
        v282 = 8 * v280 - 8 * v277 - 8;
        v283 = 1;
        v284 = v278;
        while (1)
        {
          v279 = v283;
          if (!v282)
            break;
          v278 = v284 + 1;
          v285 = v284[1];
          ++v283;
          v282 -= 8;
          ++v284;
          if (v285 != -1)
            goto LABEL_298;
        }
        v278 = v281;
      }
      else
      {
        v279 = 0;
      }
    }
LABEL_298:
    v286 = a3[18];
    v287 = a3[19];
    while (v286 != v287 && v278 != v281)
    {
      v298 = *v286;
      if (*v286 > v279)
      {
        v299 = v278 + 1;
        while (v299 != v281)
        {
          ++v279;
          v300 = *v299++;
          if (v300 != -1 && v298 <= v279)
          {
            v278 = v299 - 1;
            goto LABEL_312;
          }
        }
        break;
      }
LABEL_312:
      if (v298 == v279)
      {
        v302 = (int8x16_t *)(*(_QWORD *)(result + 12400) + 8 * *v278);
        if (v302 == *(int8x16_t **)a2)
        {
          v293 = v302[4];
          v292 = v302[5];
          v291 = v302[2];
          v290 = v302[3];
          v289 = *v302;
          v288 = v302[1];
        }
        else
        {
          v289 = *v302;
          v288 = v302[1];
          v291 = v302[2];
          v290 = v302[3];
          v293 = v302[4];
          v292 = v302[5];
        }
        v294 = *(unsigned int *)(a2 + 16);
        v292.i64[1] = vextq_s8(v292, v292, 8uLL).u64[0];
        v293.i64[1] = vextq_s8(v293, v293, 8uLL).u64[0];
        v290.i64[1] = vextq_s8(v290, v290, 8uLL).u64[0];
        v291.i64[1] = vextq_s8(v291, v291, 8uLL).u64[0];
        v288.i64[1] = vextq_s8(v288, v288, 8uLL).u64[0];
        v295 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v286[1] + (_DWORD)v294 * v181[1]));
        v289.i64[1] = vextq_s8(v289, v289, 8uLL).u64[0];
        *v295 = v289;
        v295[1] = v288;
        v296 = (int8x16_t *)((char *)v295 + 8 * v294);
        *v296 = v291;
        v296[1] = v290;
        v297 = &v295[v294];
        *v297 = v293;
        v297[1] = v292;
        v279 = v298;
      }
      v286 += 2;
    }
    v181 += 2;
  }
  while (v181 != v182);
  v273 = *(_DWORD **)(a4 + 216);
  v274 = *(_DWORD **)(a4 + 224);
  if (a3[18] != a3[19] && v273 != v274)
  {
    do
    {
LABEL_342:
      v318 = *(_QWORD *)(result + 13912);
      v319 = (*(_DWORD *)(result + 13936) * *v273);
      v320 = (uint64_t *)(v318 + 8 * v319);
      v321 = *(_DWORD *)(result + 13832);
      v322 = v319 + v321;
      v323 = (uint64_t *)(v318 + 8 * v322);
      if (v321)
      {
        if (*v320 == -1)
        {
          v324 = 8 * v322 - 8 * v319 - 8;
          v325 = 1;
          v326 = v320;
          while (1)
          {
            v321 = v325;
            if (!v324)
              break;
            v320 = v326 + 1;
            v327 = v326[1];
            ++v325;
            v324 -= 8;
            ++v326;
            if (v327 != -1)
              goto LABEL_350;
          }
          v320 = v323;
        }
        else
        {
          v321 = 0;
        }
      }
LABEL_350:
      v328 = a3[18];
      v329 = a3[19];
      while (v328 != v329 && v320 != v323)
      {
        v340 = *v328;
        if (*v328 > v321)
        {
          v341 = v320 + 1;
          while (v341 != v323)
          {
            ++v321;
            v342 = *v341++;
            if (v342 != -1 && v340 <= v321)
            {
              v320 = v341 - 1;
              goto LABEL_364;
            }
          }
          break;
        }
LABEL_364:
        if (v340 == v321)
        {
          v344 = (int8x16_t *)(*(_QWORD *)(result + 13840) + 8 * *v320);
          if (v344 == *(int8x16_t **)a2)
          {
            v335 = v344[4];
            v334 = v344[5];
            v333 = v344[2];
            v332 = v344[3];
            v331 = *v344;
            v330 = v344[1];
          }
          else
          {
            v331 = *v344;
            v330 = v344[1];
            v333 = v344[2];
            v332 = v344[3];
            v335 = v344[4];
            v334 = v344[5];
          }
          v336 = *(unsigned int *)(a2 + 16);
          v334.i64[1] = vextq_s8(v334, v334, 8uLL).u64[0];
          v335.i64[1] = vextq_s8(v335, v335, 8uLL).u64[0];
          v332.i64[1] = vextq_s8(v332, v332, 8uLL).u64[0];
          v333.i64[1] = vextq_s8(v333, v333, 8uLL).u64[0];
          v330.i64[1] = vextq_s8(v330, v330, 8uLL).u64[0];
          v337 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v328[1] + (_DWORD)v336 * v273[1]));
          v331.i64[1] = vextq_s8(v331, v331, 8uLL).u64[0];
          *v337 = v331;
          v337[1] = v330;
          v338 = (int8x16_t *)((char *)v337 + 8 * v336);
          *v338 = v333;
          v338[1] = v332;
          v339 = &v337[v336];
          *v339 = v335;
          v339[1] = v334;
          v321 = v340;
        }
        v328 += 2;
      }
      v273 += 2;
    }
    while (v273 != v274);
  }
LABEL_320:
  v304 = *(_DWORD **)(a4 + 120);
  v305 = *(_DWORD **)(a4 + 128);
  v306 = a3[15];
  v307 = a3[16];
  if (v306 == v307 || v304 == v305)
  {
    v309 = *(_DWORD **)(a4 + 144);
    v310 = *(_DWORD **)(a4 + 152);
    if (v306 != v307 && v309 != v310)
      goto LABEL_396;
LABEL_330:
    v312 = *(_DWORD **)(a4 + 168);
    v313 = *(_DWORD **)(a4 + 176);
    if (v306 != v307 && v312 != v313)
      goto LABEL_424;
LABEL_335:
    v315 = *(_DWORD **)(a4 + 192);
    v316 = *(_DWORD **)(a4 + 200);
    if (v306 != v307 && v315 != v316)
      goto LABEL_458;
LABEL_451:
    v409 = *(_DWORD **)(a4 + 216);
    v410 = *(_DWORD **)(a4 + 224);
    if (v306 == v307 || v409 == v410)
      goto LABEL_488;
    goto LABEL_500;
  }
  do
  {
    v345 = *(_QWORD *)(result + 8008);
    v346 = (*(_DWORD *)(result + 8032) * *v304);
    v347 = (uint64_t *)(v345 + 8 * v346);
    v348 = *(_DWORD *)(result + 7928);
    v349 = (v346 + v348);
    v350 = (uint64_t *)(v345 + 8 * v349);
    if (v348 && *v347 == -1)
    {
      v358 = 8 * v349 - 8 * v346 - 8;
      v359 = 1;
      v360 = v347;
      while (1)
      {
        v351 = v359;
        if (!v358)
          break;
        v347 = v360 + 1;
        v361 = v360[1];
        ++v359;
        v358 -= 8;
        ++v360;
        if (v361 != -1)
          goto LABEL_371;
      }
      v347 = v350;
    }
    else
    {
      v351 = 0;
    }
LABEL_371:
    v352 = a3[15];
    v353 = a3[16];
    while (v352 != v353 && v347 != v350)
    {
      v354 = *v352;
      if (*v352 > v351)
      {
        v355 = v347 + 1;
        while (v355 != v350)
        {
          ++v351;
          v356 = *v355++;
          if (v356 != -1 && v354 <= v351)
          {
            v347 = v355 - 1;
            goto LABEL_383;
          }
        }
        break;
      }
LABEL_383:
      if (v354 == v351)
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * (v352[1] + *(_DWORD *)(a2 + 16) * v304[1])) = *(_QWORD *)(*(_QWORD *)(result + 7936)
                                                                                                  + 8 * *v347);
        v351 = v354;
      }
      v352 += 2;
    }
    v304 += 2;
  }
  while (v304 != v305);
  v306 = a3[15];
  v307 = a3[16];
  v309 = *(_DWORD **)(a4 + 144);
  v310 = *(_DWORD **)(a4 + 152);
  if (v306 == v307 || v309 == v310)
    goto LABEL_330;
  do
  {
LABEL_396:
    v363 = *(_QWORD *)(result + 9448);
    v364 = (*(_DWORD *)(result + 9472) * *v309);
    v365 = (uint64_t *)(v363 + 8 * v364);
    v366 = *(_DWORD *)(result + 9368);
    v367 = (v364 + v366);
    v368 = (uint64_t *)(v363 + 8 * v367);
    if (v366 && *v365 == -1)
    {
      v381 = 8 * v367 - 8 * v364 - 8;
      v382 = 1;
      v383 = v365;
      while (1)
      {
        v369 = v382;
        if (!v381)
          break;
        v365 = v383 + 1;
        v384 = v383[1];
        ++v382;
        v381 -= 8;
        ++v383;
        if (v384 != -1)
          goto LABEL_399;
      }
      v365 = v368;
    }
    else
    {
      v369 = 0;
    }
LABEL_399:
    v370 = a3[15];
    v371 = a3[16];
    while (v370 != v371 && v365 != v368)
    {
      v374 = *v370;
      if (*v370 > v369)
      {
        v375 = v365 + 1;
        while (v375 != v368)
        {
          ++v369;
          v376 = *v375++;
          if (v376 != -1 && v374 <= v369)
          {
            v365 = v375 - 1;
            goto LABEL_411;
          }
        }
        break;
      }
LABEL_411:
      if (v374 == v369)
      {
        v378 = (int8x16_t *)(*(_QWORD *)(result + 9376) + 8 * *v365);
        v380 = *v378;
        v379 = v378[1];
        v372 = *(unsigned int *)(a2 + 16);
        v373 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v370[1] + (_DWORD)v372 * v309[1]));
        *v373 = v378->i64[0];
        v373[v372] = vextq_s8(v380, v380, 8uLL).u64[0];
        v373[2 * v372] = v379.i64[0];
        v373[3 * v372] = vextq_s8(v379, v379, 8uLL).u64[0];
        v369 = v374;
      }
      v370 += 2;
    }
    v309 += 2;
  }
  while (v309 != v310);
  v306 = a3[15];
  v307 = a3[16];
  v312 = *(_DWORD **)(a4 + 168);
  v313 = *(_DWORD **)(a4 + 176);
  if (v306 == v307 || v312 == v313)
    goto LABEL_335;
  do
  {
LABEL_424:
    v386 = *(_QWORD *)(result + 10888);
    v387 = (*(_DWORD *)(result + 10912) * *v312);
    v388 = (uint64_t *)(v386 + 8 * v387);
    v389 = *(_DWORD *)(result + 10808);
    v390 = (v387 + v389);
    v391 = (uint64_t *)(v386 + 8 * v390);
    if (v389 && *v388 == -1)
    {
      v404 = 8 * v390 - 8 * v387 - 8;
      v405 = 1;
      v406 = v388;
      while (1)
      {
        v392 = v405;
        if (!v404)
          break;
        v388 = v406 + 1;
        v407 = v406[1];
        ++v405;
        v404 -= 8;
        ++v406;
        if (v407 != -1)
          goto LABEL_427;
      }
      v388 = v391;
    }
    else
    {
      v392 = 0;
    }
LABEL_427:
    v393 = a3[15];
    v394 = a3[16];
    while (v393 != v394 && v388 != v391)
    {
      v397 = *v393;
      if (*v393 > v392)
      {
        v398 = v388 + 1;
        while (v398 != v391)
        {
          ++v392;
          v399 = *v398++;
          if (v399 != -1 && v397 <= v392)
          {
            v388 = v398 - 1;
            goto LABEL_439;
          }
        }
        break;
      }
LABEL_439:
      if (v397 == v392)
      {
        v401 = (int8x16_t *)(*(_QWORD *)(result + 10816) + 8 * *v388);
        v403 = *v401;
        v402 = v401[1];
        v395 = *(unsigned int *)(a2 + 16);
        v396 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v393[1] + (_DWORD)v395 * v312[1]));
        *v396 = v401->i64[0];
        v396[v395] = vextq_s8(v403, v403, 8uLL).u64[0];
        v396[2 * v395] = v402.i64[0];
        v396[3 * v395] = vextq_s8(v402, v402, 8uLL).u64[0];
        v392 = v397;
      }
      v393 += 2;
    }
    v312 += 2;
  }
  while (v312 != v313);
  v306 = a3[15];
  v307 = a3[16];
  v315 = *(_DWORD **)(a4 + 192);
  v316 = *(_DWORD **)(a4 + 200);
  if (v306 == v307 || v315 == v316)
    goto LABEL_451;
  do
  {
LABEL_458:
    v412 = *(_QWORD *)(result + 12328);
    v413 = (*(_DWORD *)(result + 12352) * *v315);
    v414 = (uint64_t *)(v412 + 8 * v413);
    v415 = *(_DWORD *)(result + 12248);
    v416 = (v413 + v415);
    v417 = (uint64_t *)(v412 + 8 * v416);
    if (v415 && *v414 == -1)
    {
      v431 = 8 * v416 - 8 * v413 - 8;
      v432 = 1;
      v433 = v414;
      while (1)
      {
        v418 = v432;
        if (!v431)
          break;
        v414 = v433 + 1;
        v434 = v433[1];
        ++v432;
        v431 -= 8;
        ++v433;
        if (v434 != -1)
          goto LABEL_461;
      }
      v414 = v417;
    }
    else
    {
      v418 = 0;
    }
LABEL_461:
    v419 = a3[15];
    v420 = a3[16];
    while (v419 != v420 && v414 != v417)
    {
      v426 = *v419;
      if (*v419 > v418)
      {
        v427 = v414 + 1;
        while (v427 != v417)
        {
          ++v418;
          v428 = *v427++;
          if (v428 != -1 && v426 <= v418)
          {
            v414 = v427 - 1;
            goto LABEL_475;
          }
        }
        break;
      }
LABEL_475:
      if (v426 == v418)
      {
        v430 = *(_QWORD *)(result + 12256) + 8 * *v414;
        if (v430 == *(_QWORD *)a2)
        {
          v423 = *(_QWORD *)(v430 + 16);
          v421 = *(int8x16_t *)v430;
          v422 = vextq_s8(v421, v421, 8uLL).u64[0];
        }
        else
        {
          v421.i64[0] = *(_QWORD *)v430;
          v422 = *(_QWORD *)(v430 + 8);
          v423 = *(_QWORD *)(v430 + 16);
        }
        v424 = *(unsigned int *)(a2 + 16);
        v425 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v419[1] + (_DWORD)v424 * v315[1]));
        *v425 = v421.i64[0];
        v425[v424] = v422;
        v425[2 * v424] = v423;
        v418 = v426;
      }
      v419 += 2;
    }
    v315 += 2;
  }
  while (v315 != v316);
  v409 = *(_DWORD **)(a4 + 216);
  v410 = *(_DWORD **)(a4 + 224);
  if (a3[15] != a3[16] && v409 != v410)
  {
    do
    {
LABEL_500:
      v444 = *(_QWORD *)(result + 13768);
      v445 = (*(_DWORD *)(result + 13792) * *v409);
      v446 = (uint64_t *)(v444 + 8 * v445);
      v447 = *(_DWORD *)(result + 13688);
      v448 = (v445 + v447);
      v449 = (uint64_t *)(v444 + 8 * v448);
      if (v447 && *v446 == -1)
      {
        v463 = 8 * v448 - 8 * v445 - 8;
        v464 = 1;
        v465 = v446;
        while (1)
        {
          v450 = v464;
          if (!v463)
            break;
          v446 = v465 + 1;
          v466 = v465[1];
          ++v464;
          v463 -= 8;
          ++v465;
          if (v466 != -1)
            goto LABEL_503;
        }
        v446 = v449;
      }
      else
      {
        v450 = 0;
      }
LABEL_503:
      v451 = a3[15];
      v452 = a3[16];
      while (v451 != v452 && v446 != v449)
      {
        v458 = *v451;
        if (*v451 > v450)
        {
          v459 = v446 + 1;
          while (v459 != v449)
          {
            ++v450;
            v460 = *v459++;
            if (v460 != -1 && v458 <= v450)
            {
              v446 = v459 - 1;
              goto LABEL_517;
            }
          }
          break;
        }
LABEL_517:
        if (v458 == v450)
        {
          v462 = *(_QWORD *)(result + 13696) + 8 * *v446;
          if (v462 == *(_QWORD *)a2)
          {
            v455 = *(_QWORD *)(v462 + 16);
            v453 = *(int8x16_t *)v462;
            v454 = vextq_s8(v453, v453, 8uLL).u64[0];
          }
          else
          {
            v453.i64[0] = *(_QWORD *)v462;
            v454 = *(_QWORD *)(v462 + 8);
            v455 = *(_QWORD *)(v462 + 16);
          }
          v456 = *(unsigned int *)(a2 + 16);
          v457 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v451[1] + (_DWORD)v456 * v409[1]));
          *v457 = v453.i64[0];
          v457[v456] = v454;
          v457[2 * v456] = v455;
          v450 = v458;
        }
        v451 += 2;
      }
      v409 += 2;
    }
    while (v409 != v410);
  }
LABEL_488:
  v436 = *(_DWORD **)(a4 + 96);
  v437 = *(_DWORD **)(a4 + 104);
  v438 = a3[12];
  v439 = a3[13];
  if (v438 == v439 || v436 == v437)
  {
    v441 = *(_DWORD **)(a4 + 120);
    v442 = *(_DWORD **)(a4 + 128);
    if (v438 != v439 && v441 != v442)
      goto LABEL_573;
LABEL_556:
    v497 = *(_DWORD **)(a4 + 144);
    v498 = *(_DWORD **)(a4 + 152);
    if (v438 != v439 && v497 != v498)
      goto LABEL_601;
LABEL_561:
    v500 = *(_DWORD **)(a4 + 168);
    v501 = *(_DWORD **)(a4 + 176);
    if (v438 != v439 && v500 != v501)
      goto LABEL_632;
LABEL_566:
    v503 = *(_DWORD **)(a4 + 192);
    v504 = *(_DWORD **)(a4 + 200);
    if (v438 != v439 && v503 != v504)
      goto LABEL_669;
LABEL_662:
    v595 = *(_DWORD **)(a4 + 216);
    v596 = *(_DWORD **)(a4 + 224);
    if (v438 == v439 || v595 == v596)
      goto LABEL_699;
    goto LABEL_711;
  }
  do
  {
    v467 = *(_QWORD *)(result + 6424);
    v468 = (*(_DWORD *)(result + 6448) * *v436);
    v469 = (uint64_t *)(v467 + 8 * v468);
    v470 = *(_DWORD *)(result + 6344);
    v471 = v468 + v470;
    v472 = (uint64_t *)(v467 + 8 * v471);
    if (v470)
    {
      if (*v469 == -1)
      {
        v473 = 8 * v471 - 8 * v468 - 8;
        v474 = 1;
        v475 = v469;
        while (1)
        {
          v470 = v474;
          if (!v473)
            break;
          v469 = v475 + 1;
          v476 = v475[1];
          ++v474;
          v473 -= 8;
          ++v475;
          if (v476 != -1)
            goto LABEL_534;
        }
        v469 = v472;
      }
      else
      {
        v470 = 0;
      }
    }
LABEL_534:
    v477 = a3[12];
    v478 = a3[13];
    while (v477 != v478 && v469 != v472)
    {
      v491 = *v477;
      if (*v477 > v470)
      {
        v492 = v469 + 1;
        while (v492 != v472)
        {
          ++v470;
          v493 = *v492++;
          if (v493 != -1 && v491 <= v470)
          {
            v469 = v492 - 1;
            goto LABEL_548;
          }
        }
        break;
      }
LABEL_548:
      if (v491 == v470)
      {
        v495 = *(_QWORD *)(result + 6352) + 8 * *v469;
        if (v495 == *(_QWORD *)a2)
        {
          v485 = *(_QWORD *)(v495 + 64);
          v484 = *(int8x16_t *)(v495 + 32);
          v481 = *(int8x16_t *)(v495 + 48);
          v479 = *(int8x16_t *)v495;
          v483 = *(int8x16_t *)(v495 + 16);
          v486 = vextq_s8(v481, v481, 8uLL).u64[0];
          v482 = vextq_s8(v484, v484, 8uLL).u64[0];
          *(_QWORD *)&v480 = vextq_s8(v483, v483, 8uLL).u64[0];
        }
        else
        {
          v479 = *(int8x16_t *)v495;
          v480 = *(_OWORD *)(v495 + 24);
          v481 = *(int8x16_t *)(v495 + 48);
          v482 = *(_QWORD *)(v495 + 40);
          v483.i64[0] = *(_QWORD *)(v495 + 16);
          v484.i64[0] = *(_QWORD *)(v495 + 32);
          v485 = *(_QWORD *)(v495 + 64);
          v486 = vextq_s8(v481, v481, 8uLL).u64[0];
        }
        v487 = *(unsigned int *)(a2 + 16);
        v479.i64[1] = vextq_s8(v479, v479, 8uLL).u64[0];
        *((_QWORD *)&v480 + 1) = v484.i64[0];
        v488 = *(_QWORD *)a2 + 8 * (v477[1] + (_DWORD)v487 * v436[1]);
        v481.i64[1] = v486;
        *(_QWORD *)(v488 + 16) = v483.i64[0];
        *(int8x16_t *)v488 = v479;
        v489 = v488 + 8 * v487;
        *(_QWORD *)(v489 + 16) = v482;
        *(_OWORD *)v489 = v480;
        v490 = (int8x16_t *)(v488 + 16 * v487);
        v490[1].i64[0] = v485;
        *v490 = v481;
        v470 = v491;
      }
      v477 += 2;
    }
    v436 += 2;
  }
  while (v436 != v437);
  v438 = a3[12];
  v439 = a3[13];
  v441 = *(_DWORD **)(a4 + 120);
  v442 = *(_DWORD **)(a4 + 128);
  if (v438 == v439 || v441 == v442)
    goto LABEL_556;
  do
  {
LABEL_573:
    v506 = *(_QWORD *)(result + 7864);
    v507 = (*(_DWORD *)(result + 7888) * *v441);
    v508 = (uint64_t *)(v506 + 8 * v507);
    v509 = *(_DWORD *)(result + 7784);
    v510 = (v507 + v509);
    v511 = (uint64_t *)(v506 + 8 * v510);
    if (v509 && *v508 == -1)
    {
      v522 = 8 * v510 - 8 * v507 - 8;
      v523 = 1;
      v524 = v508;
      while (1)
      {
        v512 = v523;
        if (!v522)
          break;
        v508 = v524 + 1;
        v525 = v524[1];
        ++v523;
        v522 -= 8;
        ++v524;
        if (v525 != -1)
          goto LABEL_576;
      }
      v508 = v511;
    }
    else
    {
      v512 = 0;
    }
LABEL_576:
    v513 = a3[12];
    v514 = a3[13];
    while (v513 != v514 && v508 != v511)
    {
      v515 = *v513;
      if (*v513 > v512)
      {
        v516 = v508 + 1;
        while (v516 != v511)
        {
          ++v512;
          v517 = *v516++;
          if (v517 != -1 && v515 <= v512)
          {
            v508 = v516 - 1;
            goto LABEL_588;
          }
        }
        break;
      }
LABEL_588:
      if (v515 == v512)
      {
        v519 = *(_QWORD *)(result + 7792) + 8 * *v508;
        v520 = *(_QWORD *)a2 + 8 * (v513[1] + *(_DWORD *)(a2 + 16) * v441[1]);
        v521 = *(_OWORD *)v519;
        *(_QWORD *)(v520 + 16) = *(_QWORD *)(v519 + 16);
        *(_OWORD *)v520 = v521;
        v512 = v515;
      }
      v513 += 2;
    }
    v441 += 2;
  }
  while (v441 != v442);
  v438 = a3[12];
  v439 = a3[13];
  v497 = *(_DWORD **)(a4 + 144);
  v498 = *(_DWORD **)(a4 + 152);
  if (v438 == v439 || v497 == v498)
    goto LABEL_561;
  do
  {
LABEL_601:
    v527 = *(_QWORD *)(result + 9304);
    v528 = (*(_DWORD *)(result + 9328) * *v497);
    v529 = (uint64_t *)(v527 + 8 * v528);
    v530 = *(_DWORD *)(result + 9224);
    v531 = v528 + v530;
    v532 = (uint64_t *)(v527 + 8 * v531);
    if (v530)
    {
      if (*v529 == -1)
      {
        v533 = 8 * v531 - 8 * v528 - 8;
        v534 = 1;
        v535 = v529;
        while (1)
        {
          v530 = v534;
          if (!v533)
            break;
          v529 = v535 + 1;
          v536 = v535[1];
          ++v534;
          v533 -= 8;
          ++v535;
          if (v536 != -1)
            goto LABEL_609;
        }
        v529 = v532;
      }
      else
      {
        v530 = 0;
      }
    }
LABEL_609:
    v537 = a3[12];
    v538 = a3[13];
    while (v537 != v538 && v529 != v532)
    {
      v555 = *v537;
      if (*v537 > v530)
      {
        v556 = v529 + 1;
        while (v556 != v532)
        {
          ++v530;
          v557 = *v556++;
          if (v557 != -1 && v555 <= v530)
          {
            v529 = v556 - 1;
            goto LABEL_623;
          }
        }
        break;
      }
LABEL_623:
      if (v555 == v530)
      {
        v559 = *(_QWORD *)(result + 9232) + 8 * *v529;
        if (v559 == *(_QWORD *)a2)
        {
          v543 = *(int8x16_t *)(v559 + 64);
          v547 = *(int8x16_t *)(v559 + 80);
          v549 = *(int8x16_t *)(v559 + 32);
          v544 = *(int8x16_t *)(v559 + 48);
          v540 = *(int8x16_t *)v559;
          v539 = *(int8x16_t *)(v559 + 16);
          v545 = vextq_s8(v547, v547, 8uLL).u64[0];
          v546.i64[0] = vextq_s8(v543, v543, 8uLL).u64[0];
          v548 = vextq_s8(v544, v544, 8uLL).u64[0];
          v541 = vextq_s8(v549, v549, 8uLL).u64[0];
          v542.i64[0] = vextq_s8(v539, v539, 8uLL).u64[0];
        }
        else
        {
          v539.i64[0] = *(_QWORD *)(v559 + 16);
          v540 = *(int8x16_t *)v559;
          v541 = *(_QWORD *)(v559 + 40);
          v542 = *(int8x16_t *)(v559 + 24);
          v543.i64[0] = *(_QWORD *)(v559 + 64);
          v544 = *(int8x16_t *)(v559 + 48);
          v545 = *(_QWORD *)(v559 + 88);
          v546 = *(int8x16_t *)(v559 + 72);
          v547.i64[0] = vextq_s8(v546, v546, 8uLL).u64[0];
          v548 = vextq_s8(v544, v544, 8uLL).u64[0];
          v549.i64[0] = vextq_s8(v542, v542, 8uLL).u64[0];
        }
        v550 = *(unsigned int *)(a2 + 16);
        v551 = *(_QWORD *)a2 + 8 * (v537[1] + (_DWORD)v550 * v497[1]);
        v540.i64[1] = vextq_s8(v540, v540, 8uLL).u64[0];
        v542.i64[1] = v549.i64[0];
        v544.i64[1] = v548;
        v546.i64[1] = v547.i64[0];
        *(_QWORD *)(v551 + 16) = v539.i64[0];
        *(int8x16_t *)v551 = v540;
        v552 = (int8x16_t *)(v551 + 8 * v550);
        v552[1].i64[0] = v541;
        *v552 = v542;
        v553 = (int8x16_t *)(v551 + 16 * v550);
        v553[1].i64[0] = v543.i64[0];
        *v553 = v544;
        v554 = (int8x16_t *)(v551 + 24 * v550);
        v554[1].i64[0] = v545;
        *v554 = v546;
        v530 = v555;
      }
      v537 += 2;
    }
    v497 += 2;
  }
  while (v497 != v498);
  v438 = a3[12];
  v439 = a3[13];
  v500 = *(_DWORD **)(a4 + 168);
  v501 = *(_DWORD **)(a4 + 176);
  if (v438 == v439 || v500 == v501)
    goto LABEL_566;
  do
  {
LABEL_632:
    v561 = *(_QWORD *)(result + 10744);
    v562 = (*(_DWORD *)(result + 10768) * *v500);
    v563 = (uint64_t *)(v561 + 8 * v562);
    v564 = *(_DWORD *)(result + 10664);
    v565 = v562 + v564;
    v566 = (uint64_t *)(v561 + 8 * v565);
    if (v564)
    {
      if (*v563 == -1)
      {
        v567 = 8 * v565 - 8 * v562 - 8;
        v568 = 1;
        v569 = v563;
        while (1)
        {
          v564 = v568;
          if (!v567)
            break;
          v563 = v569 + 1;
          v570 = v569[1];
          ++v568;
          v567 -= 8;
          ++v569;
          if (v570 != -1)
            goto LABEL_640;
        }
        v563 = v566;
      }
      else
      {
        v564 = 0;
      }
    }
LABEL_640:
    v571 = a3[12];
    v572 = a3[13];
    while (v571 != v572 && v563 != v566)
    {
      v589 = *v571;
      if (*v571 > v564)
      {
        v590 = v563 + 1;
        while (v590 != v566)
        {
          ++v564;
          v591 = *v590++;
          if (v591 != -1 && v589 <= v564)
          {
            v563 = v590 - 1;
            goto LABEL_654;
          }
        }
        break;
      }
LABEL_654:
      if (v589 == v564)
      {
        v593 = *(_QWORD *)(result + 10672) + 8 * *v563;
        if (v593 == *(_QWORD *)a2)
        {
          v577 = *(int8x16_t *)(v593 + 64);
          v581 = *(int8x16_t *)(v593 + 80);
          v583 = *(int8x16_t *)(v593 + 32);
          v578 = *(int8x16_t *)(v593 + 48);
          v574 = *(int8x16_t *)v593;
          v573 = *(int8x16_t *)(v593 + 16);
          v579 = vextq_s8(v581, v581, 8uLL).u64[0];
          v580.i64[0] = vextq_s8(v577, v577, 8uLL).u64[0];
          v582 = vextq_s8(v578, v578, 8uLL).u64[0];
          v575 = vextq_s8(v583, v583, 8uLL).u64[0];
          v576.i64[0] = vextq_s8(v573, v573, 8uLL).u64[0];
        }
        else
        {
          v573.i64[0] = *(_QWORD *)(v593 + 16);
          v574 = *(int8x16_t *)v593;
          v575 = *(_QWORD *)(v593 + 40);
          v576 = *(int8x16_t *)(v593 + 24);
          v577.i64[0] = *(_QWORD *)(v593 + 64);
          v578 = *(int8x16_t *)(v593 + 48);
          v579 = *(_QWORD *)(v593 + 88);
          v580 = *(int8x16_t *)(v593 + 72);
          v581.i64[0] = vextq_s8(v580, v580, 8uLL).u64[0];
          v582 = vextq_s8(v578, v578, 8uLL).u64[0];
          v583.i64[0] = vextq_s8(v576, v576, 8uLL).u64[0];
        }
        v584 = *(unsigned int *)(a2 + 16);
        v585 = *(_QWORD *)a2 + 8 * (v571[1] + (_DWORD)v584 * v500[1]);
        v574.i64[1] = vextq_s8(v574, v574, 8uLL).u64[0];
        v576.i64[1] = v583.i64[0];
        v578.i64[1] = v582;
        v580.i64[1] = v581.i64[0];
        *(_QWORD *)(v585 + 16) = v573.i64[0];
        *(int8x16_t *)v585 = v574;
        v586 = (int8x16_t *)(v585 + 8 * v584);
        v586[1].i64[0] = v575;
        *v586 = v576;
        v587 = (int8x16_t *)(v585 + 16 * v584);
        v587[1].i64[0] = v577.i64[0];
        *v587 = v578;
        v588 = (int8x16_t *)(v585 + 24 * v584);
        v588[1].i64[0] = v579;
        *v588 = v580;
        v564 = v589;
      }
      v571 += 2;
    }
    v500 += 2;
  }
  while (v500 != v501);
  v438 = a3[12];
  v439 = a3[13];
  v503 = *(_DWORD **)(a4 + 192);
  v504 = *(_DWORD **)(a4 + 200);
  if (v438 == v439 || v503 == v504)
    goto LABEL_662;
  do
  {
LABEL_669:
    v598 = *(_QWORD *)(result + 12184);
    v599 = (*(_DWORD *)(result + 12208) * *v503);
    v600 = (uint64_t *)(v598 + 8 * v599);
    v601 = *(_DWORD *)(result + 12104);
    v602 = v599 + v601;
    v603 = (uint64_t *)(v598 + 8 * v602);
    if (v601)
    {
      if (*v600 == -1)
      {
        v604 = 8 * v602 - 8 * v599 - 8;
        v605 = 1;
        v606 = v600;
        while (1)
        {
          v601 = v605;
          if (!v604)
            break;
          v600 = v606 + 1;
          v607 = v606[1];
          ++v605;
          v604 -= 8;
          ++v606;
          if (v607 != -1)
            goto LABEL_677;
        }
        v600 = v603;
      }
      else
      {
        v601 = 0;
      }
    }
LABEL_677:
    v608 = a3[12];
    v609 = a3[13];
    while (v608 != v609 && v600 != v603)
    {
      v622 = *v608;
      if (*v608 > v601)
      {
        v623 = v600 + 1;
        while (v623 != v603)
        {
          ++v601;
          v624 = *v623++;
          if (v624 != -1 && v622 <= v601)
          {
            v600 = v623 - 1;
            goto LABEL_691;
          }
        }
        break;
      }
LABEL_691:
      if (v622 == v601)
      {
        v626 = *(_QWORD *)(result + 12112) + 8 * *v600;
        if (v626 == *(_QWORD *)a2)
        {
          v616 = *(_QWORD *)(v626 + 64);
          v615 = *(int8x16_t *)(v626 + 32);
          v612 = *(int8x16_t *)(v626 + 48);
          v610 = *(int8x16_t *)v626;
          v614 = *(int8x16_t *)(v626 + 16);
          v617 = vextq_s8(v612, v612, 8uLL).u64[0];
          v613 = vextq_s8(v615, v615, 8uLL).u64[0];
          *(_QWORD *)&v611 = vextq_s8(v614, v614, 8uLL).u64[0];
        }
        else
        {
          v610 = *(int8x16_t *)v626;
          v611 = *(_OWORD *)(v626 + 24);
          v612 = *(int8x16_t *)(v626 + 48);
          v613 = *(_QWORD *)(v626 + 40);
          v614.i64[0] = *(_QWORD *)(v626 + 16);
          v615.i64[0] = *(_QWORD *)(v626 + 32);
          v616 = *(_QWORD *)(v626 + 64);
          v617 = vextq_s8(v612, v612, 8uLL).u64[0];
        }
        v618 = *(unsigned int *)(a2 + 16);
        v610.i64[1] = vextq_s8(v610, v610, 8uLL).u64[0];
        *((_QWORD *)&v611 + 1) = v615.i64[0];
        v619 = *(_QWORD *)a2 + 8 * (v608[1] + (_DWORD)v618 * v503[1]);
        v612.i64[1] = v617;
        *(_QWORD *)(v619 + 16) = v614.i64[0];
        *(int8x16_t *)v619 = v610;
        v620 = v619 + 8 * v618;
        *(_QWORD *)(v620 + 16) = v613;
        *(_OWORD *)v620 = v611;
        v621 = (int8x16_t *)(v619 + 16 * v618);
        v621[1].i64[0] = v616;
        *v621 = v612;
        v601 = v622;
      }
      v608 += 2;
    }
    v503 += 2;
  }
  while (v503 != v504);
  v595 = *(_DWORD **)(a4 + 216);
  v596 = *(_DWORD **)(a4 + 224);
  if (a3[12] != a3[13] && v595 != v596)
  {
    do
    {
LABEL_711:
      v636 = *(_QWORD *)(result + 13624);
      v637 = (*(_DWORD *)(result + 13648) * *v595);
      v638 = (uint64_t *)(v636 + 8 * v637);
      v639 = *(_DWORD *)(result + 13544);
      v640 = v637 + v639;
      v641 = (uint64_t *)(v636 + 8 * v640);
      if (v639)
      {
        if (*v638 == -1)
        {
          v642 = 8 * v640 - 8 * v637 - 8;
          v643 = 1;
          v644 = v638;
          while (1)
          {
            v639 = v643;
            if (!v642)
              break;
            v638 = v644 + 1;
            v645 = v644[1];
            ++v643;
            v642 -= 8;
            ++v644;
            if (v645 != -1)
              goto LABEL_719;
          }
          v638 = v641;
        }
        else
        {
          v639 = 0;
        }
      }
LABEL_719:
      v646 = a3[12];
      v647 = a3[13];
      while (v646 != v647 && v638 != v641)
      {
        v660 = *v646;
        if (*v646 > v639)
        {
          v661 = v638 + 1;
          while (v661 != v641)
          {
            ++v639;
            v662 = *v661++;
            if (v662 != -1 && v660 <= v639)
            {
              v638 = v661 - 1;
              goto LABEL_733;
            }
          }
          break;
        }
LABEL_733:
        if (v660 == v639)
        {
          v664 = *(_QWORD *)(result + 13552) + 8 * *v638;
          if (v664 == *(_QWORD *)a2)
          {
            v654 = *(_QWORD *)(v664 + 64);
            v653 = *(int8x16_t *)(v664 + 32);
            v650 = *(int8x16_t *)(v664 + 48);
            v648 = *(int8x16_t *)v664;
            v652 = *(int8x16_t *)(v664 + 16);
            v655 = vextq_s8(v650, v650, 8uLL).u64[0];
            v651 = vextq_s8(v653, v653, 8uLL).u64[0];
            *(_QWORD *)&v649 = vextq_s8(v652, v652, 8uLL).u64[0];
          }
          else
          {
            v648 = *(int8x16_t *)v664;
            v649 = *(_OWORD *)(v664 + 24);
            v650 = *(int8x16_t *)(v664 + 48);
            v651 = *(_QWORD *)(v664 + 40);
            v652.i64[0] = *(_QWORD *)(v664 + 16);
            v653.i64[0] = *(_QWORD *)(v664 + 32);
            v654 = *(_QWORD *)(v664 + 64);
            v655 = vextq_s8(v650, v650, 8uLL).u64[0];
          }
          v656 = *(unsigned int *)(a2 + 16);
          v648.i64[1] = vextq_s8(v648, v648, 8uLL).u64[0];
          *((_QWORD *)&v649 + 1) = v653.i64[0];
          v657 = *(_QWORD *)a2 + 8 * (v646[1] + (_DWORD)v656 * v595[1]);
          v650.i64[1] = v655;
          *(_QWORD *)(v657 + 16) = v652.i64[0];
          *(int8x16_t *)v657 = v648;
          v658 = v657 + 8 * v656;
          *(_QWORD *)(v658 + 16) = v651;
          *(_OWORD *)v658 = v649;
          v659 = (int8x16_t *)(v657 + 16 * v656);
          v659[1].i64[0] = v654;
          *v659 = v650;
          v639 = v660;
        }
        v646 += 2;
      }
      v595 += 2;
    }
    while (v595 != v596);
  }
LABEL_699:
  v628 = *(_DWORD **)(a4 + 72);
  v629 = *(_DWORD **)(a4 + 80);
  v630 = a3[9];
  v631 = a3[10];
  if (v630 == v631 || v628 == v629)
  {
    v633 = *(_DWORD **)(a4 + 96);
    v634 = *(_DWORD **)(a4 + 104);
    if (v630 != v631 && v633 != v634)
      goto LABEL_774;
LABEL_767:
    v712 = *(_DWORD **)(a4 + 120);
    v713 = *(_DWORD **)(a4 + 128);
    if (v630 != v631 && v712 != v713)
      goto LABEL_821;
LABEL_804:
    v749 = *(_DWORD **)(a4 + 144);
    v750 = *(_DWORD **)(a4 + 152);
    if (v630 != v631 && v749 != v750)
      goto LABEL_849;
LABEL_809:
    v752 = *(_DWORD **)(a4 + 168);
    v753 = *(_DWORD **)(a4 + 176);
    if (v630 != v631 && v752 != v753)
      goto LABEL_880;
LABEL_814:
    v755 = *(_DWORD **)(a4 + 192);
    v756 = *(_DWORD **)(a4 + 200);
    if (v630 != v631 && v755 != v756)
      goto LABEL_917;
LABEL_910:
    v850 = *(_DWORD **)(a4 + 216);
    v851 = *(_DWORD **)(a4 + 224);
    if (v630 == v631 || v850 == v851)
      goto LABEL_947;
    goto LABEL_964;
  }
  do
  {
    v665 = *(_QWORD *)(result + 4840);
    v666 = (*(_DWORD *)(result + 4864) * *v628);
    v667 = (uint64_t *)(v665 + 8 * v666);
    v668 = *(_DWORD *)(result + 4760);
    v669 = v666 + v668;
    v670 = (uint64_t *)(v665 + 8 * v669);
    if (v668)
    {
      if (*v667 == -1)
      {
        v671 = 8 * v669 - 8 * v666 - 8;
        v672 = 1;
        v673 = v667;
        while (1)
        {
          v668 = v672;
          if (!v671)
            break;
          v667 = v673 + 1;
          v674 = v673[1];
          ++v672;
          v671 -= 8;
          ++v673;
          if (v674 != -1)
            goto LABEL_745;
        }
        v667 = v670;
      }
      else
      {
        v668 = 0;
      }
    }
LABEL_745:
    v675 = a3[9];
    v676 = a3[10];
    while (v675 != v676 && v667 != v670)
    {
      v706 = *v675;
      if (*v675 > v668)
      {
        v707 = v667 + 1;
        while (v707 != v670)
        {
          ++v668;
          v708 = *v707++;
          if (v708 != -1 && v706 <= v668)
          {
            v667 = v707 - 1;
            goto LABEL_759;
          }
        }
        break;
      }
LABEL_759:
      if (v706 == v668)
      {
        v710 = (int8x16_t *)(*(_QWORD *)(result + 4768) + 8 * *v667);
        if (v710 == *(int8x16_t **)a2)
        {
          v686 = v710[16];
          v685 = v710[17];
          v684 = v710[14];
          v683 = v710[15];
          v682 = v710[12];
          v681 = v710[13];
          v680 = v710[10];
          v679 = v710[11];
          v692 = v710[8];
          v691 = v710[9];
          v2291 = vextq_s8(v686, v686, 8uLL).u64[0];
          v2303 = vextq_s8(v685, v685, 8uLL).u64[0];
          v687 = vextq_s8(v684, v684, 8uLL).u64[0];
          v688 = vextq_s8(v681, v681, 8uLL).u64[0];
          v689 = vextq_s8(v682, v682, 8uLL).u64[0];
          v2267 = vextq_s8(v679, v679, 8uLL).u64[0];
          v2279 = vextq_s8(v683, v683, 8uLL).u64[0];
          v690 = vextq_s8(v680, v680, 8uLL).u64[0];
          v678 = v710[6];
          v677 = v710[7];
        }
        else
        {
          v678 = v710[6];
          v677 = v710[7];
          v680 = v710[10];
          v679 = v710[11];
          v682 = v710[12];
          v681 = v710[13];
          v684 = v710[14];
          v683 = v710[15];
          v686 = v710[16];
          v685 = v710[17];
          v2291 = vextq_s8(v686, v686, 8uLL).u64[0];
          v2303 = vextq_s8(v685, v685, 8uLL).u64[0];
          v687 = vextq_s8(v684, v684, 8uLL).u64[0];
          v688 = vextq_s8(v681, v681, 8uLL).u64[0];
          v689 = vextq_s8(v682, v682, 8uLL).u64[0];
          v2267 = vextq_s8(v679, v679, 8uLL).u64[0];
          v2279 = vextq_s8(v683, v683, 8uLL).u64[0];
          v690 = vextq_s8(v680, v680, 8uLL).u64[0];
          v692 = v710[8];
          v691 = v710[9];
        }
        v694 = v710[4];
        v693 = v710[5];
        v696 = v710[2];
        v695 = v710[3];
        v698 = *v710;
        v697 = v710[1];
        v684.i64[1] = v687;
        v681.i64[1] = v688;
        v682.i64[1] = v689;
        v696.i64[1] = vextq_s8(v696, v696, 8uLL).u64[0];
        v699 = *(unsigned int *)(a2 + 16);
        v700 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v675[1] + (_DWORD)v699 * v628[1]));
        v697.i64[1] = vextq_s8(v697, v697, 8uLL).u64[0];
        v698.i64[1] = vextq_s8(v698, v698, 8uLL).u64[0];
        v693.i64[1] = vextq_s8(v693, v693, 8uLL).u64[0];
        v694.i64[1] = vextq_s8(v694, v694, 8uLL).u64[0];
        v695.i64[1] = vextq_s8(v695, v695, 8uLL).u64[0];
        v692.i64[1] = vextq_s8(v692, v692, 8uLL).u64[0];
        v677.i64[1] = vextq_s8(v677, v677, 8uLL).u64[0];
        v678.i64[1] = vextq_s8(v678, v678, 8uLL).u64[0];
        v679.i64[1] = v2267;
        v680.i64[1] = v690;
        v691.i64[1] = vextq_s8(v691, v691, 8uLL).u64[0];
        v685.i64[1] = v2303;
        v686.i64[1] = v2291;
        v683.i64[1] = v2279;
        *v700 = v698;
        v700[1] = v697;
        v700[2] = v696;
        v701 = (int8x16_t *)((char *)v700 + 8 * v699);
        *v701 = v695;
        v701[1] = v694;
        v701[2] = v693;
        v702 = &v700[v699];
        *v702 = v678;
        v702[1] = v677;
        v702[2] = v692;
        v703 = (int8x16_t *)((char *)v700 + 24 * v699);
        *v703 = v691;
        v703[1] = v680;
        v703[2] = v679;
        v704 = &v700[2 * v699];
        *v704 = v682;
        v704[1] = v681;
        v704[2] = v684;
        v705 = (int8x16_t *)((char *)v700 + 40 * v699);
        *v705 = v683;
        v705[1] = v686;
        v668 = v706;
        v705[2] = v685;
      }
      v675 += 2;
    }
    v628 += 2;
  }
  while (v628 != v629);
  v630 = a3[9];
  v631 = a3[10];
  v633 = *(_DWORD **)(a4 + 96);
  v634 = *(_DWORD **)(a4 + 104);
  if (v630 == v631 || v633 == v634)
    goto LABEL_767;
  do
  {
LABEL_774:
    v715 = *(_QWORD *)(result + 6280);
    v716 = (*(_DWORD *)(result + 6304) * *v633);
    v717 = (uint64_t *)(v715 + 8 * v716);
    v718 = *(_DWORD *)(result + 6200);
    v719 = v716 + v718;
    v720 = (uint64_t *)(v715 + 8 * v719);
    if (v718)
    {
      if (*v717 == -1)
      {
        v721 = 8 * v719 - 8 * v716 - 8;
        v722 = 1;
        v723 = v717;
        while (1)
        {
          v718 = v722;
          if (!v721)
            break;
          v717 = v723 + 1;
          v724 = v723[1];
          ++v722;
          v721 -= 8;
          ++v723;
          if (v724 != -1)
            goto LABEL_782;
        }
        v717 = v720;
      }
      else
      {
        v718 = 0;
      }
    }
LABEL_782:
    v725 = a3[9];
    v726 = a3[10];
    while (v725 != v726 && v717 != v720)
    {
      v743 = *v725;
      if (*v725 > v718)
      {
        v744 = v717 + 1;
        while (v744 != v720)
        {
          ++v718;
          v745 = *v744++;
          if (v745 != -1 && v743 <= v718)
          {
            v717 = v744 - 1;
            goto LABEL_796;
          }
        }
        break;
      }
LABEL_796:
      if (v743 == v718)
      {
        v747 = (int8x16_t *)(*(_QWORD *)(result + 6208) + 8 * *v717);
        if (v747 == *(int8x16_t **)a2)
        {
          v731 = v747[7];
          v733 = v747[8];
          v737 = v747[5];
          v732 = v747[6];
          v729 = v747[3];
          v738 = v747[4];
          v727 = v747[1];
          v730 = v747[2];
          v734 = vextq_s8(v733, v733, 8uLL).u64[0];
          v735 = vextq_s8(v731, v731, 8uLL).u64[0];
          v736 = vextq_s8(v732, v732, 8uLL).u64[0];
          v728 = *v747;
        }
        else
        {
          v728 = *v747;
          v727 = v747[1];
          v730 = v747[2];
          v729 = v747[3];
          v732 = v747[6];
          v731 = v747[7];
          v733 = v747[8];
          v734 = vextq_s8(v733, v733, 8uLL).u64[0];
          v735 = vextq_s8(v731, v731, 8uLL).u64[0];
          v736 = vextq_s8(v732, v732, 8uLL).u64[0];
          v738 = v747[4];
          v737 = v747[5];
        }
        v739 = *(unsigned int *)(a2 + 16);
        v740 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v725[1] + (_DWORD)v739 * v633[1]));
        v730.i64[1] = vextq_s8(v730, v730, 8uLL).u64[0];
        v727.i64[1] = vextq_s8(v727, v727, 8uLL).u64[0];
        v728.i64[1] = vextq_s8(v728, v728, 8uLL).u64[0];
        v737.i64[1] = vextq_s8(v737, v737, 8uLL).u64[0];
        v738.i64[1] = vextq_s8(v738, v738, 8uLL).u64[0];
        v729.i64[1] = vextq_s8(v729, v729, 8uLL).u64[0];
        v733.i64[1] = v734;
        v731.i64[1] = v735;
        v732.i64[1] = v736;
        *v740 = v728;
        v740[1] = v727;
        v740[2] = v730;
        v741 = (int8x16_t *)((char *)v740 + 8 * v739);
        *v741 = v729;
        v741[1] = v738;
        v741[2] = v737;
        v742 = &v740[v739];
        *v742 = v732;
        v742[1] = v731;
        v742[2] = v733;
        v718 = v743;
      }
      v725 += 2;
    }
    v633 += 2;
  }
  while (v633 != v634);
  v630 = a3[9];
  v631 = a3[10];
  v712 = *(_DWORD **)(a4 + 120);
  v713 = *(_DWORD **)(a4 + 128);
  if (v630 == v631 || v712 == v713)
    goto LABEL_804;
  do
  {
LABEL_821:
    v758 = *(_QWORD *)(result + 7720);
    v759 = (*(_DWORD *)(result + 7744) * *v712);
    v760 = (uint64_t *)(v758 + 8 * v759);
    v761 = *(_DWORD *)(result + 7640);
    v762 = (v759 + v761);
    v763 = (uint64_t *)(v758 + 8 * v762);
    if (v761 && *v760 == -1)
    {
      v775 = 8 * v762 - 8 * v759 - 8;
      v776 = 1;
      v777 = v760;
      while (1)
      {
        v764 = v776;
        if (!v775)
          break;
        v760 = v777 + 1;
        v778 = v777[1];
        ++v776;
        v775 -= 8;
        ++v777;
        if (v778 != -1)
          goto LABEL_824;
      }
      v760 = v763;
    }
    else
    {
      v764 = 0;
    }
LABEL_824:
    v765 = a3[9];
    v766 = a3[10];
    while (v765 != v766 && v760 != v763)
    {
      v767 = *v765;
      if (*v765 > v764)
      {
        v768 = v760 + 1;
        while (v768 != v763)
        {
          ++v764;
          v769 = *v768++;
          if (v769 != -1 && v767 <= v764)
          {
            v760 = v768 - 1;
            goto LABEL_836;
          }
        }
        break;
      }
LABEL_836:
      if (v767 == v764)
      {
        v771 = (__int128 *)(*(_QWORD *)(result + 7648) + 8 * *v760);
        v772 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v765[1] + *(_DWORD *)(a2 + 16) * v712[1]));
        v773 = v771[2];
        v774 = *v771;
        v772[1] = v771[1];
        v772[2] = v773;
        *v772 = v774;
        v764 = v767;
      }
      v765 += 2;
    }
    v712 += 2;
  }
  while (v712 != v713);
  v630 = a3[9];
  v631 = a3[10];
  v749 = *(_DWORD **)(a4 + 144);
  v750 = *(_DWORD **)(a4 + 152);
  if (v630 == v631 || v749 == v750)
    goto LABEL_809;
  do
  {
LABEL_849:
    v780 = *(_QWORD *)(result + 9160);
    v781 = (*(_DWORD *)(result + 9184) * *v749);
    v782 = (uint64_t *)(v780 + 8 * v781);
    v783 = *(_DWORD *)(result + 9080);
    v784 = v781 + v783;
    v785 = (uint64_t *)(v780 + 8 * v784);
    if (v783)
    {
      if (*v782 == -1)
      {
        v786 = 8 * v784 - 8 * v781 - 8;
        v787 = 1;
        v788 = v782;
        while (1)
        {
          v783 = v787;
          if (!v786)
            break;
          v782 = v788 + 1;
          v789 = v788[1];
          ++v787;
          v786 -= 8;
          ++v788;
          if (v789 != -1)
            goto LABEL_857;
        }
        v782 = v785;
      }
      else
      {
        v783 = 0;
      }
    }
LABEL_857:
    v790 = a3[9];
    v791 = a3[10];
    while (v790 != v791 && v782 != v785)
    {
      v809 = *v790;
      if (*v790 > v783)
      {
        v810 = v782 + 1;
        while (v810 != v785)
        {
          ++v783;
          v811 = *v810++;
          if (v811 != -1 && v809 <= v783)
          {
            v782 = v810 - 1;
            goto LABEL_871;
          }
        }
        break;
      }
LABEL_871:
      if (v809 == v783)
      {
        v813 = (int8x16_t *)(*(_QWORD *)(result + 9088) + 8 * *v782);
        if (v813 == *(int8x16_t **)a2)
        {
          v801 = v813[10];
          v800 = v813[11];
          v799 = v813[8];
          v798 = v813[9];
          v797 = v813[6];
          v796 = v813[7];
          v795 = v813[4];
          v794 = v813[5];
          v793 = v813[2];
          v792 = v813[3];
        }
        else
        {
          v793 = v813[2];
          v792 = v813[3];
          v795 = v813[4];
          v794 = v813[5];
          v797 = v813[6];
          v796 = v813[7];
          v799 = v813[8];
          v798 = v813[9];
          v801 = v813[10];
          v800 = v813[11];
        }
        v803 = *v813;
        v802 = v813[1];
        v804 = *(unsigned int *)(a2 + 16);
        v805 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v790[1] + (_DWORD)v804 * v749[1]));
        v793.i64[1] = vextq_s8(v793, v793, 8uLL).u64[0];
        v802.i64[1] = vextq_s8(v802, v802, 8uLL).u64[0];
        v803.i64[1] = vextq_s8(v803, v803, 8uLL).u64[0];
        v794.i64[1] = vextq_s8(v794, v794, 8uLL).u64[0];
        v795.i64[1] = vextq_s8(v795, v795, 8uLL).u64[0];
        v792.i64[1] = vextq_s8(v792, v792, 8uLL).u64[0];
        v799.i64[1] = vextq_s8(v799, v799, 8uLL).u64[0];
        v796.i64[1] = vextq_s8(v796, v796, 8uLL).u64[0];
        v797.i64[1] = vextq_s8(v797, v797, 8uLL).u64[0];
        v800.i64[1] = vextq_s8(v800, v800, 8uLL).u64[0];
        v801.i64[1] = vextq_s8(v801, v801, 8uLL).u64[0];
        v798.i64[1] = vextq_s8(v798, v798, 8uLL).u64[0];
        *v805 = v803;
        v805[1] = v802;
        v805[2] = v793;
        v806 = (int8x16_t *)((char *)v805 + 8 * v804);
        *v806 = v792;
        v806[1] = v795;
        v806[2] = v794;
        v807 = &v805[v804];
        *v807 = v797;
        v807[1] = v796;
        v807[2] = v799;
        v808 = (int8x16_t *)((char *)v805 + 24 * v804);
        *v808 = v798;
        v808[1] = v801;
        v808[2] = v800;
        v783 = v809;
      }
      v790 += 2;
    }
    v749 += 2;
  }
  while (v749 != v750);
  v630 = a3[9];
  v631 = a3[10];
  v752 = *(_DWORD **)(a4 + 168);
  v753 = *(_DWORD **)(a4 + 176);
  if (v630 == v631 || v752 == v753)
    goto LABEL_814;
  do
  {
LABEL_880:
    v815 = *(_QWORD *)(result + 10600);
    v816 = (*(_DWORD *)(result + 10624) * *v752);
    v817 = (uint64_t *)(v815 + 8 * v816);
    v818 = *(_DWORD *)(result + 10520);
    v819 = v816 + v818;
    v820 = (uint64_t *)(v815 + 8 * v819);
    if (v818)
    {
      if (*v817 == -1)
      {
        v821 = 8 * v819 - 8 * v816 - 8;
        v822 = 1;
        v823 = v817;
        while (1)
        {
          v818 = v822;
          if (!v821)
            break;
          v817 = v823 + 1;
          v824 = v823[1];
          ++v822;
          v821 -= 8;
          ++v823;
          if (v824 != -1)
            goto LABEL_888;
        }
        v817 = v820;
      }
      else
      {
        v818 = 0;
      }
    }
LABEL_888:
    v825 = a3[9];
    v826 = a3[10];
    while (v825 != v826 && v817 != v820)
    {
      v844 = *v825;
      if (*v825 > v818)
      {
        v845 = v817 + 1;
        while (v845 != v820)
        {
          ++v818;
          v846 = *v845++;
          if (v846 != -1 && v844 <= v818)
          {
            v817 = v845 - 1;
            goto LABEL_902;
          }
        }
        break;
      }
LABEL_902:
      if (v844 == v818)
      {
        v848 = (int8x16_t *)(*(_QWORD *)(result + 10528) + 8 * *v817);
        if (v848 == *(int8x16_t **)a2)
        {
          v836 = v848[10];
          v835 = v848[11];
          v834 = v848[8];
          v833 = v848[9];
          v832 = v848[6];
          v831 = v848[7];
          v830 = v848[4];
          v829 = v848[5];
          v828 = v848[2];
          v827 = v848[3];
        }
        else
        {
          v828 = v848[2];
          v827 = v848[3];
          v830 = v848[4];
          v829 = v848[5];
          v832 = v848[6];
          v831 = v848[7];
          v834 = v848[8];
          v833 = v848[9];
          v836 = v848[10];
          v835 = v848[11];
        }
        v838 = *v848;
        v837 = v848[1];
        v839 = *(unsigned int *)(a2 + 16);
        v840 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v825[1] + (_DWORD)v839 * v752[1]));
        v828.i64[1] = vextq_s8(v828, v828, 8uLL).u64[0];
        v837.i64[1] = vextq_s8(v837, v837, 8uLL).u64[0];
        v838.i64[1] = vextq_s8(v838, v838, 8uLL).u64[0];
        v829.i64[1] = vextq_s8(v829, v829, 8uLL).u64[0];
        v830.i64[1] = vextq_s8(v830, v830, 8uLL).u64[0];
        v827.i64[1] = vextq_s8(v827, v827, 8uLL).u64[0];
        v834.i64[1] = vextq_s8(v834, v834, 8uLL).u64[0];
        v831.i64[1] = vextq_s8(v831, v831, 8uLL).u64[0];
        v832.i64[1] = vextq_s8(v832, v832, 8uLL).u64[0];
        v835.i64[1] = vextq_s8(v835, v835, 8uLL).u64[0];
        v836.i64[1] = vextq_s8(v836, v836, 8uLL).u64[0];
        v833.i64[1] = vextq_s8(v833, v833, 8uLL).u64[0];
        *v840 = v838;
        v840[1] = v837;
        v840[2] = v828;
        v841 = (int8x16_t *)((char *)v840 + 8 * v839);
        *v841 = v827;
        v841[1] = v830;
        v841[2] = v829;
        v842 = &v840[v839];
        *v842 = v832;
        v842[1] = v831;
        v842[2] = v834;
        v843 = (int8x16_t *)((char *)v840 + 24 * v839);
        *v843 = v833;
        v843[1] = v836;
        v843[2] = v835;
        v818 = v844;
      }
      v825 += 2;
    }
    v752 += 2;
  }
  while (v752 != v753);
  v630 = a3[9];
  v631 = a3[10];
  v755 = *(_DWORD **)(a4 + 192);
  v756 = *(_DWORD **)(a4 + 200);
  if (v630 == v631 || v755 == v756)
    goto LABEL_910;
  do
  {
LABEL_917:
    v853 = *(_QWORD *)(result + 12040);
    v854 = (*(_DWORD *)(result + 12064) * *v755);
    v855 = (uint64_t *)(v853 + 8 * v854);
    v856 = *(_DWORD *)(result + 11960);
    v857 = v854 + v856;
    v858 = (uint64_t *)(v853 + 8 * v857);
    if (v856)
    {
      if (*v855 == -1)
      {
        v859 = 8 * v857 - 8 * v854 - 8;
        v860 = 1;
        v861 = v855;
        while (1)
        {
          v856 = v860;
          if (!v859)
            break;
          v855 = v861 + 1;
          v862 = v861[1];
          ++v860;
          v859 -= 8;
          ++v861;
          if (v862 != -1)
            goto LABEL_925;
        }
        v855 = v858;
      }
      else
      {
        v856 = 0;
      }
    }
LABEL_925:
    v863 = a3[9];
    v864 = a3[10];
    while (v863 != v864 && v855 != v858)
    {
      v881 = *v863;
      if (*v863 > v856)
      {
        v882 = v855 + 1;
        while (v882 != v858)
        {
          ++v856;
          v883 = *v882++;
          if (v883 != -1 && v881 <= v856)
          {
            v855 = v882 - 1;
            goto LABEL_939;
          }
        }
        break;
      }
LABEL_939:
      if (v881 == v856)
      {
        v885 = (int8x16_t *)(*(_QWORD *)(result + 11968) + 8 * *v855);
        if (v885 == *(int8x16_t **)a2)
        {
          v869 = v885[7];
          v871 = v885[8];
          v875 = v885[5];
          v870 = v885[6];
          v867 = v885[3];
          v876 = v885[4];
          v865 = v885[1];
          v868 = v885[2];
          v872 = vextq_s8(v871, v871, 8uLL).u64[0];
          v873 = vextq_s8(v869, v869, 8uLL).u64[0];
          v874 = vextq_s8(v870, v870, 8uLL).u64[0];
          v866 = *v885;
        }
        else
        {
          v866 = *v885;
          v865 = v885[1];
          v868 = v885[2];
          v867 = v885[3];
          v870 = v885[6];
          v869 = v885[7];
          v871 = v885[8];
          v872 = vextq_s8(v871, v871, 8uLL).u64[0];
          v873 = vextq_s8(v869, v869, 8uLL).u64[0];
          v874 = vextq_s8(v870, v870, 8uLL).u64[0];
          v876 = v885[4];
          v875 = v885[5];
        }
        v877 = *(unsigned int *)(a2 + 16);
        v878 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v863[1] + (_DWORD)v877 * v755[1]));
        v868.i64[1] = vextq_s8(v868, v868, 8uLL).u64[0];
        v865.i64[1] = vextq_s8(v865, v865, 8uLL).u64[0];
        v866.i64[1] = vextq_s8(v866, v866, 8uLL).u64[0];
        v875.i64[1] = vextq_s8(v875, v875, 8uLL).u64[0];
        v876.i64[1] = vextq_s8(v876, v876, 8uLL).u64[0];
        v867.i64[1] = vextq_s8(v867, v867, 8uLL).u64[0];
        v871.i64[1] = v872;
        v869.i64[1] = v873;
        v870.i64[1] = v874;
        *v878 = v866;
        v878[1] = v865;
        v878[2] = v868;
        v879 = (int8x16_t *)((char *)v878 + 8 * v877);
        *v879 = v867;
        v879[1] = v876;
        v879[2] = v875;
        v880 = &v878[v877];
        *v880 = v870;
        v880[1] = v869;
        v880[2] = v871;
        v856 = v881;
      }
      v863 += 2;
    }
    v755 += 2;
  }
  while (v755 != v756);
  v850 = *(_DWORD **)(a4 + 216);
  v851 = *(_DWORD **)(a4 + 224);
  if (a3[9] != a3[10] && v850 != v851)
  {
    do
    {
LABEL_964:
      v898 = *(_QWORD *)(result + 13480);
      v899 = (*(_DWORD *)(result + 13504) * *v850);
      v900 = (uint64_t *)(v898 + 8 * v899);
      v901 = *(_DWORD *)(result + 13400);
      v902 = v899 + v901;
      v903 = (uint64_t *)(v898 + 8 * v902);
      if (v901)
      {
        if (*v900 == -1)
        {
          v904 = 8 * v902 - 8 * v899 - 8;
          v905 = 1;
          v906 = v900;
          while (1)
          {
            v901 = v905;
            if (!v904)
              break;
            v900 = v906 + 1;
            v907 = v906[1];
            ++v905;
            v904 -= 8;
            ++v906;
            if (v907 != -1)
              goto LABEL_972;
          }
          v900 = v903;
        }
        else
        {
          v901 = 0;
        }
      }
LABEL_972:
      v908 = a3[9];
      v909 = a3[10];
      while (v908 != v909 && v900 != v903)
      {
        v926 = *v908;
        if (*v908 > v901)
        {
          v927 = v900 + 1;
          while (v927 != v903)
          {
            ++v901;
            v928 = *v927++;
            if (v928 != -1 && v926 <= v901)
            {
              v900 = v927 - 1;
              goto LABEL_986;
            }
          }
          break;
        }
LABEL_986:
        if (v926 == v901)
        {
          v930 = (int8x16_t *)(*(_QWORD *)(result + 13408) + 8 * *v900);
          if (v930 == *(int8x16_t **)a2)
          {
            v914 = v930[7];
            v916 = v930[8];
            v920 = v930[5];
            v915 = v930[6];
            v912 = v930[3];
            v921 = v930[4];
            v910 = v930[1];
            v913 = v930[2];
            v917 = vextq_s8(v916, v916, 8uLL).u64[0];
            v918 = vextq_s8(v914, v914, 8uLL).u64[0];
            v919 = vextq_s8(v915, v915, 8uLL).u64[0];
            v911 = *v930;
          }
          else
          {
            v911 = *v930;
            v910 = v930[1];
            v913 = v930[2];
            v912 = v930[3];
            v915 = v930[6];
            v914 = v930[7];
            v916 = v930[8];
            v917 = vextq_s8(v916, v916, 8uLL).u64[0];
            v918 = vextq_s8(v914, v914, 8uLL).u64[0];
            v919 = vextq_s8(v915, v915, 8uLL).u64[0];
            v921 = v930[4];
            v920 = v930[5];
          }
          v922 = *(unsigned int *)(a2 + 16);
          v923 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v908[1] + (_DWORD)v922 * v850[1]));
          v913.i64[1] = vextq_s8(v913, v913, 8uLL).u64[0];
          v910.i64[1] = vextq_s8(v910, v910, 8uLL).u64[0];
          v911.i64[1] = vextq_s8(v911, v911, 8uLL).u64[0];
          v920.i64[1] = vextq_s8(v920, v920, 8uLL).u64[0];
          v921.i64[1] = vextq_s8(v921, v921, 8uLL).u64[0];
          v912.i64[1] = vextq_s8(v912, v912, 8uLL).u64[0];
          v916.i64[1] = v917;
          v914.i64[1] = v918;
          v915.i64[1] = v919;
          *v923 = v911;
          v923[1] = v910;
          v923[2] = v913;
          v924 = (int8x16_t *)((char *)v923 + 8 * v922);
          *v924 = v912;
          v924[1] = v921;
          v924[2] = v920;
          v925 = &v923[v922];
          *v925 = v915;
          v925[1] = v914;
          v925[2] = v916;
          v901 = v926;
        }
        v908 += 2;
      }
      v850 += 2;
    }
    while (v850 != v851);
  }
LABEL_947:
  v887 = *(_DWORD **)(a4 + 48);
  v888 = *(_DWORD **)(a4 + 56);
  v889 = a3[6];
  v890 = a3[7];
  if (v889 == v890 || v887 == v888)
  {
    v892 = *(_DWORD **)(a4 + 72);
    v893 = *(_DWORD **)(a4 + 80);
    if (v889 != v890 && v892 != v893)
      goto LABEL_1021;
LABEL_957:
    v895 = *(_DWORD **)(a4 + 96);
    v896 = *(_DWORD **)(a4 + 104);
    if (v889 != v890 && v895 != v896)
      goto LABEL_1058;
LABEL_1051:
    v1025 = *(_DWORD **)(a4 + 120);
    v1026 = *(_DWORD **)(a4 + 128);
    if (v889 != v890 && v1025 != v1026)
      goto LABEL_1105;
LABEL_1088:
    v1062 = *(_DWORD **)(a4 + 144);
    v1063 = *(_DWORD **)(a4 + 152);
    if (v889 != v890 && v1062 != v1063)
      goto LABEL_1133;
LABEL_1093:
    v1065 = *(_DWORD **)(a4 + 168);
    v1066 = *(_DWORD **)(a4 + 176);
    if (v889 != v890 && v1065 != v1066)
      goto LABEL_1164;
LABEL_1098:
    v1068 = *(_DWORD **)(a4 + 192);
    v1069 = *(_DWORD **)(a4 + 200);
    if (v889 != v890 && v1068 != v1069)
      goto LABEL_1201;
LABEL_1194:
    v1163 = *(_DWORD **)(a4 + 216);
    v1164 = *(_DWORD **)(a4 + 224);
    if (v889 == v890 || v1163 == v1164)
      goto LABEL_1231;
    goto LABEL_1253;
  }
  do
  {
    v931 = *(_QWORD *)(result + 3256);
    v932 = (*(_DWORD *)(result + 3280) * *v887);
    v933 = (uint64_t *)(v931 + 8 * v932);
    v934 = *(_DWORD *)(result + 3176);
    v935 = v932 + v934;
    v936 = (uint64_t *)(v931 + 8 * v935);
    if (v934)
    {
      if (*v933 == -1)
      {
        v937 = 8 * v935 - 8 * v932 - 8;
        v938 = 1;
        v939 = v933;
        while (1)
        {
          v934 = v938;
          if (!v937)
            break;
          v933 = v939 + 1;
          v940 = v939[1];
          ++v938;
          v937 -= 8;
          ++v939;
          if (v940 != -1)
            goto LABEL_998;
        }
        v933 = v936;
      }
      else
      {
        v934 = 0;
      }
    }
LABEL_998:
    v941 = a3[6];
    v942 = a3[7];
    while (v941 != v942 && v933 != v936)
    {
      v972 = *v941;
      if (*v941 > v934)
      {
        v973 = v933 + 1;
        while (v973 != v936)
        {
          ++v934;
          v974 = *v973++;
          if (v974 != -1 && v972 <= v934)
          {
            v933 = v973 - 1;
            goto LABEL_1012;
          }
        }
        break;
      }
LABEL_1012:
      if (v972 == v934)
      {
        v976 = (int8x16_t *)(*(_QWORD *)(result + 3184) + 8 * *v933);
        if (v976 == *(int8x16_t **)a2)
        {
          v952 = v976[16];
          v951 = v976[17];
          v950 = v976[14];
          v949 = v976[15];
          v948 = v976[12];
          v947 = v976[13];
          v946 = v976[10];
          v945 = v976[11];
          v958 = v976[8];
          v957 = v976[9];
          v2292 = vextq_s8(v952, v952, 8uLL).u64[0];
          v2304 = vextq_s8(v951, v951, 8uLL).u64[0];
          v953 = vextq_s8(v950, v950, 8uLL).u64[0];
          v954 = vextq_s8(v947, v947, 8uLL).u64[0];
          v955 = vextq_s8(v948, v948, 8uLL).u64[0];
          v2268 = vextq_s8(v945, v945, 8uLL).u64[0];
          v2280 = vextq_s8(v949, v949, 8uLL).u64[0];
          v956 = vextq_s8(v946, v946, 8uLL).u64[0];
          v944 = v976[6];
          v943 = v976[7];
        }
        else
        {
          v944 = v976[6];
          v943 = v976[7];
          v946 = v976[10];
          v945 = v976[11];
          v948 = v976[12];
          v947 = v976[13];
          v950 = v976[14];
          v949 = v976[15];
          v952 = v976[16];
          v951 = v976[17];
          v2292 = vextq_s8(v952, v952, 8uLL).u64[0];
          v2304 = vextq_s8(v951, v951, 8uLL).u64[0];
          v953 = vextq_s8(v950, v950, 8uLL).u64[0];
          v954 = vextq_s8(v947, v947, 8uLL).u64[0];
          v955 = vextq_s8(v948, v948, 8uLL).u64[0];
          v2268 = vextq_s8(v945, v945, 8uLL).u64[0];
          v2280 = vextq_s8(v949, v949, 8uLL).u64[0];
          v956 = vextq_s8(v946, v946, 8uLL).u64[0];
          v958 = v976[8];
          v957 = v976[9];
        }
        v960 = v976[4];
        v959 = v976[5];
        v962 = v976[2];
        v961 = v976[3];
        v964 = *v976;
        v963 = v976[1];
        v950.i64[1] = v953;
        v947.i64[1] = v954;
        v948.i64[1] = v955;
        v962.i64[1] = vextq_s8(v962, v962, 8uLL).u64[0];
        v965 = *(unsigned int *)(a2 + 16);
        v966 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v941[1] + (_DWORD)v965 * v887[1]));
        v963.i64[1] = vextq_s8(v963, v963, 8uLL).u64[0];
        v964.i64[1] = vextq_s8(v964, v964, 8uLL).u64[0];
        v959.i64[1] = vextq_s8(v959, v959, 8uLL).u64[0];
        v960.i64[1] = vextq_s8(v960, v960, 8uLL).u64[0];
        v961.i64[1] = vextq_s8(v961, v961, 8uLL).u64[0];
        v958.i64[1] = vextq_s8(v958, v958, 8uLL).u64[0];
        v943.i64[1] = vextq_s8(v943, v943, 8uLL).u64[0];
        v944.i64[1] = vextq_s8(v944, v944, 8uLL).u64[0];
        v945.i64[1] = v2268;
        v946.i64[1] = v956;
        v957.i64[1] = vextq_s8(v957, v957, 8uLL).u64[0];
        v951.i64[1] = v2304;
        v952.i64[1] = v2292;
        v949.i64[1] = v2280;
        *v966 = v964;
        v966[1] = v963;
        v966[2] = v962;
        v967 = (int8x16_t *)((char *)v966 + 8 * v965);
        *v967 = v961;
        v967[1] = v960;
        v967[2] = v959;
        v968 = &v966[v965];
        *v968 = v944;
        v968[1] = v943;
        v968[2] = v958;
        v969 = (int8x16_t *)((char *)v966 + 24 * v965);
        *v969 = v957;
        v969[1] = v946;
        v969[2] = v945;
        v970 = &v966[2 * v965];
        *v970 = v948;
        v970[1] = v947;
        v970[2] = v950;
        v971 = (int8x16_t *)((char *)v966 + 40 * v965);
        *v971 = v949;
        v971[1] = v952;
        v934 = v972;
        v971[2] = v951;
      }
      v941 += 2;
    }
    v887 += 2;
  }
  while (v887 != v888);
  v889 = a3[6];
  v890 = a3[7];
  v892 = *(_DWORD **)(a4 + 72);
  v893 = *(_DWORD **)(a4 + 80);
  if (v889 == v890 || v892 == v893)
    goto LABEL_957;
  do
  {
LABEL_1021:
    v978 = *(_QWORD *)(result + 4696);
    v979 = (*(_DWORD *)(result + 4720) * *v892);
    v980 = (uint64_t *)(v978 + 8 * v979);
    v981 = *(_DWORD *)(result + 4616);
    v982 = v979 + v981;
    v983 = (uint64_t *)(v978 + 8 * v982);
    if (v981)
    {
      if (*v980 == -1)
      {
        v984 = 8 * v982 - 8 * v979 - 8;
        v985 = 1;
        v986 = v980;
        while (1)
        {
          v981 = v985;
          if (!v984)
            break;
          v980 = v986 + 1;
          v987 = v986[1];
          ++v985;
          v984 -= 8;
          ++v986;
          if (v987 != -1)
            goto LABEL_1029;
        }
        v980 = v983;
      }
      else
      {
        v981 = 0;
      }
    }
LABEL_1029:
    v988 = a3[6];
    v989 = a3[7];
    while (v988 != v989 && v980 != v983)
    {
      v1019 = *v988;
      if (*v988 > v981)
      {
        v1020 = v980 + 1;
        while (v1020 != v983)
        {
          ++v981;
          v1021 = *v1020++;
          if (v1021 != -1 && v1019 <= v981)
          {
            v980 = v1020 - 1;
            goto LABEL_1043;
          }
        }
        break;
      }
LABEL_1043:
      if (v1019 == v981)
      {
        v1023 = (int8x16_t *)(*(_QWORD *)(result + 4624) + 8 * *v980);
        if (v1023 == *(int8x16_t **)a2)
        {
          v999 = v1023[16];
          v998 = v1023[17];
          v997 = v1023[14];
          v996 = v1023[15];
          v995 = v1023[12];
          v994 = v1023[13];
          v993 = v1023[10];
          v992 = v1023[11];
          v1005 = v1023[8];
          v1004 = v1023[9];
          v2293 = vextq_s8(v999, v999, 8uLL).u64[0];
          v2305 = vextq_s8(v998, v998, 8uLL).u64[0];
          v1000 = vextq_s8(v997, v997, 8uLL).u64[0];
          v1001 = vextq_s8(v994, v994, 8uLL).u64[0];
          v1002 = vextq_s8(v995, v995, 8uLL).u64[0];
          v2269 = vextq_s8(v992, v992, 8uLL).u64[0];
          v2281 = vextq_s8(v996, v996, 8uLL).u64[0];
          v1003 = vextq_s8(v993, v993, 8uLL).u64[0];
          v991 = v1023[6];
          v990 = v1023[7];
        }
        else
        {
          v991 = v1023[6];
          v990 = v1023[7];
          v993 = v1023[10];
          v992 = v1023[11];
          v995 = v1023[12];
          v994 = v1023[13];
          v997 = v1023[14];
          v996 = v1023[15];
          v999 = v1023[16];
          v998 = v1023[17];
          v2293 = vextq_s8(v999, v999, 8uLL).u64[0];
          v2305 = vextq_s8(v998, v998, 8uLL).u64[0];
          v1000 = vextq_s8(v997, v997, 8uLL).u64[0];
          v1001 = vextq_s8(v994, v994, 8uLL).u64[0];
          v1002 = vextq_s8(v995, v995, 8uLL).u64[0];
          v2269 = vextq_s8(v992, v992, 8uLL).u64[0];
          v2281 = vextq_s8(v996, v996, 8uLL).u64[0];
          v1003 = vextq_s8(v993, v993, 8uLL).u64[0];
          v1005 = v1023[8];
          v1004 = v1023[9];
        }
        v1007 = v1023[4];
        v1006 = v1023[5];
        v1009 = v1023[2];
        v1008 = v1023[3];
        v1011 = *v1023;
        v1010 = v1023[1];
        v997.i64[1] = v1000;
        v994.i64[1] = v1001;
        v995.i64[1] = v1002;
        v1009.i64[1] = vextq_s8(v1009, v1009, 8uLL).u64[0];
        v1012 = *(unsigned int *)(a2 + 16);
        v1013 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v988[1] + (_DWORD)v1012 * v892[1]));
        v1010.i64[1] = vextq_s8(v1010, v1010, 8uLL).u64[0];
        v1011.i64[1] = vextq_s8(v1011, v1011, 8uLL).u64[0];
        v1006.i64[1] = vextq_s8(v1006, v1006, 8uLL).u64[0];
        v1007.i64[1] = vextq_s8(v1007, v1007, 8uLL).u64[0];
        v1008.i64[1] = vextq_s8(v1008, v1008, 8uLL).u64[0];
        v1005.i64[1] = vextq_s8(v1005, v1005, 8uLL).u64[0];
        v990.i64[1] = vextq_s8(v990, v990, 8uLL).u64[0];
        v991.i64[1] = vextq_s8(v991, v991, 8uLL).u64[0];
        v992.i64[1] = v2269;
        v993.i64[1] = v1003;
        v1004.i64[1] = vextq_s8(v1004, v1004, 8uLL).u64[0];
        v998.i64[1] = v2305;
        v999.i64[1] = v2293;
        v996.i64[1] = v2281;
        *v1013 = v1011;
        v1013[1] = v1010;
        v1013[2] = v1009;
        v1014 = (int8x16_t *)((char *)v1013 + 8 * v1012);
        *v1014 = v1008;
        v1014[1] = v1007;
        v1014[2] = v1006;
        v1015 = &v1013[v1012];
        *v1015 = v991;
        v1015[1] = v990;
        v1015[2] = v1005;
        v1016 = (int8x16_t *)((char *)v1013 + 24 * v1012);
        *v1016 = v1004;
        v1016[1] = v993;
        v1016[2] = v992;
        v1017 = &v1013[2 * v1012];
        *v1017 = v995;
        v1017[1] = v994;
        v1017[2] = v997;
        v1018 = (int8x16_t *)((char *)v1013 + 40 * v1012);
        *v1018 = v996;
        v1018[1] = v999;
        v981 = v1019;
        v1018[2] = v998;
      }
      v988 += 2;
    }
    v892 += 2;
  }
  while (v892 != v893);
  v889 = a3[6];
  v890 = a3[7];
  v895 = *(_DWORD **)(a4 + 96);
  v896 = *(_DWORD **)(a4 + 104);
  if (v889 == v890 || v895 == v896)
    goto LABEL_1051;
  do
  {
LABEL_1058:
    v1028 = *(_QWORD *)(result + 6136);
    v1029 = (*(_DWORD *)(result + 6160) * *v895);
    v1030 = (uint64_t *)(v1028 + 8 * v1029);
    v1031 = *(_DWORD *)(result + 6056);
    v1032 = v1029 + v1031;
    v1033 = (uint64_t *)(v1028 + 8 * v1032);
    if (v1031)
    {
      if (*v1030 == -1)
      {
        v1034 = 8 * v1032 - 8 * v1029 - 8;
        v1035 = 1;
        v1036 = v1030;
        while (1)
        {
          v1031 = v1035;
          if (!v1034)
            break;
          v1030 = v1036 + 1;
          v1037 = v1036[1];
          ++v1035;
          v1034 -= 8;
          ++v1036;
          if (v1037 != -1)
            goto LABEL_1066;
        }
        v1030 = v1033;
      }
      else
      {
        v1031 = 0;
      }
    }
LABEL_1066:
    v1038 = a3[6];
    v1039 = a3[7];
    while (v1038 != v1039 && v1030 != v1033)
    {
      v1056 = *v1038;
      if (*v1038 > v1031)
      {
        v1057 = v1030 + 1;
        while (v1057 != v1033)
        {
          ++v1031;
          v1058 = *v1057++;
          if (v1058 != -1 && v1056 <= v1031)
          {
            v1030 = v1057 - 1;
            goto LABEL_1080;
          }
        }
        break;
      }
LABEL_1080:
      if (v1056 == v1031)
      {
        v1060 = (int8x16_t *)(*(_QWORD *)(result + 6064) + 8 * *v1030);
        if (v1060 == *(int8x16_t **)a2)
        {
          v1044 = v1060[7];
          v1046 = v1060[8];
          v1050 = v1060[5];
          v1045 = v1060[6];
          v1042 = v1060[3];
          v1051 = v1060[4];
          v1040 = v1060[1];
          v1043 = v1060[2];
          v1047 = vextq_s8(v1046, v1046, 8uLL).u64[0];
          v1048 = vextq_s8(v1044, v1044, 8uLL).u64[0];
          v1049 = vextq_s8(v1045, v1045, 8uLL).u64[0];
          v1041 = *v1060;
        }
        else
        {
          v1041 = *v1060;
          v1040 = v1060[1];
          v1043 = v1060[2];
          v1042 = v1060[3];
          v1045 = v1060[6];
          v1044 = v1060[7];
          v1046 = v1060[8];
          v1047 = vextq_s8(v1046, v1046, 8uLL).u64[0];
          v1048 = vextq_s8(v1044, v1044, 8uLL).u64[0];
          v1049 = vextq_s8(v1045, v1045, 8uLL).u64[0];
          v1051 = v1060[4];
          v1050 = v1060[5];
        }
        v1052 = *(unsigned int *)(a2 + 16);
        v1053 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1038[1] + (_DWORD)v1052 * v895[1]));
        v1043.i64[1] = vextq_s8(v1043, v1043, 8uLL).u64[0];
        v1040.i64[1] = vextq_s8(v1040, v1040, 8uLL).u64[0];
        v1041.i64[1] = vextq_s8(v1041, v1041, 8uLL).u64[0];
        v1050.i64[1] = vextq_s8(v1050, v1050, 8uLL).u64[0];
        v1051.i64[1] = vextq_s8(v1051, v1051, 8uLL).u64[0];
        v1042.i64[1] = vextq_s8(v1042, v1042, 8uLL).u64[0];
        v1046.i64[1] = v1047;
        v1044.i64[1] = v1048;
        v1045.i64[1] = v1049;
        *v1053 = v1041;
        v1053[1] = v1040;
        v1053[2] = v1043;
        v1054 = (int8x16_t *)((char *)v1053 + 8 * v1052);
        *v1054 = v1042;
        v1054[1] = v1051;
        v1054[2] = v1050;
        v1055 = &v1053[v1052];
        *v1055 = v1045;
        v1055[1] = v1044;
        v1055[2] = v1046;
        v1031 = v1056;
      }
      v1038 += 2;
    }
    v895 += 2;
  }
  while (v895 != v896);
  v889 = a3[6];
  v890 = a3[7];
  v1025 = *(_DWORD **)(a4 + 120);
  v1026 = *(_DWORD **)(a4 + 128);
  if (v889 == v890 || v1025 == v1026)
    goto LABEL_1088;
  do
  {
LABEL_1105:
    v1071 = *(_QWORD *)(result + 7576);
    v1072 = (*(_DWORD *)(result + 7600) * *v1025);
    v1073 = (uint64_t *)(v1071 + 8 * v1072);
    v1074 = *(_DWORD *)(result + 7496);
    v1075 = (v1072 + v1074);
    v1076 = (uint64_t *)(v1071 + 8 * v1075);
    if (v1074 && *v1073 == -1)
    {
      v1088 = 8 * v1075 - 8 * v1072 - 8;
      v1089 = 1;
      v1090 = v1073;
      while (1)
      {
        v1077 = v1089;
        if (!v1088)
          break;
        v1073 = v1090 + 1;
        v1091 = v1090[1];
        ++v1089;
        v1088 -= 8;
        ++v1090;
        if (v1091 != -1)
          goto LABEL_1108;
      }
      v1073 = v1076;
    }
    else
    {
      v1077 = 0;
    }
LABEL_1108:
    v1078 = a3[6];
    v1079 = a3[7];
    while (v1078 != v1079 && v1073 != v1076)
    {
      v1080 = *v1078;
      if (*v1078 > v1077)
      {
        v1081 = v1073 + 1;
        while (v1081 != v1076)
        {
          ++v1077;
          v1082 = *v1081++;
          if (v1082 != -1 && v1080 <= v1077)
          {
            v1073 = v1081 - 1;
            goto LABEL_1120;
          }
        }
        break;
      }
LABEL_1120:
      if (v1080 == v1077)
      {
        v1084 = (__int128 *)(*(_QWORD *)(result + 7504) + 8 * *v1073);
        v1085 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1078[1] + *(_DWORD *)(a2 + 16) * v1025[1]));
        v1086 = v1084[2];
        v1087 = *v1084;
        v1085[1] = v1084[1];
        v1085[2] = v1086;
        *v1085 = v1087;
        v1077 = v1080;
      }
      v1078 += 2;
    }
    v1025 += 2;
  }
  while (v1025 != v1026);
  v889 = a3[6];
  v890 = a3[7];
  v1062 = *(_DWORD **)(a4 + 144);
  v1063 = *(_DWORD **)(a4 + 152);
  if (v889 == v890 || v1062 == v1063)
    goto LABEL_1093;
  do
  {
LABEL_1133:
    v1093 = *(_QWORD *)(result + 9016);
    v1094 = (*(_DWORD *)(result + 9040) * *v1062);
    v1095 = (uint64_t *)(v1093 + 8 * v1094);
    v1096 = *(_DWORD *)(result + 8936);
    v1097 = v1094 + v1096;
    v1098 = (uint64_t *)(v1093 + 8 * v1097);
    if (v1096)
    {
      if (*v1095 == -1)
      {
        v1099 = 8 * v1097 - 8 * v1094 - 8;
        v1100 = 1;
        v1101 = v1095;
        while (1)
        {
          v1096 = v1100;
          if (!v1099)
            break;
          v1095 = v1101 + 1;
          v1102 = v1101[1];
          ++v1100;
          v1099 -= 8;
          ++v1101;
          if (v1102 != -1)
            goto LABEL_1141;
        }
        v1095 = v1098;
      }
      else
      {
        v1096 = 0;
      }
    }
LABEL_1141:
    v1103 = a3[6];
    v1104 = a3[7];
    while (v1103 != v1104 && v1095 != v1098)
    {
      v1122 = *v1103;
      if (*v1103 > v1096)
      {
        v1123 = v1095 + 1;
        while (v1123 != v1098)
        {
          ++v1096;
          v1124 = *v1123++;
          if (v1124 != -1 && v1122 <= v1096)
          {
            v1095 = v1123 - 1;
            goto LABEL_1155;
          }
        }
        break;
      }
LABEL_1155:
      if (v1122 == v1096)
      {
        v1126 = (int8x16_t *)(*(_QWORD *)(result + 8944) + 8 * *v1095);
        if (v1126 == *(int8x16_t **)a2)
        {
          v1114 = v1126[10];
          v1113 = v1126[11];
          v1112 = v1126[8];
          v1111 = v1126[9];
          v1110 = v1126[6];
          v1109 = v1126[7];
          v1108 = v1126[4];
          v1107 = v1126[5];
          v1106 = v1126[2];
          v1105 = v1126[3];
        }
        else
        {
          v1106 = v1126[2];
          v1105 = v1126[3];
          v1108 = v1126[4];
          v1107 = v1126[5];
          v1110 = v1126[6];
          v1109 = v1126[7];
          v1112 = v1126[8];
          v1111 = v1126[9];
          v1114 = v1126[10];
          v1113 = v1126[11];
        }
        v1116 = *v1126;
        v1115 = v1126[1];
        v1117 = *(unsigned int *)(a2 + 16);
        v1118 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1103[1] + (_DWORD)v1117 * v1062[1]));
        v1106.i64[1] = vextq_s8(v1106, v1106, 8uLL).u64[0];
        v1115.i64[1] = vextq_s8(v1115, v1115, 8uLL).u64[0];
        v1116.i64[1] = vextq_s8(v1116, v1116, 8uLL).u64[0];
        v1107.i64[1] = vextq_s8(v1107, v1107, 8uLL).u64[0];
        v1108.i64[1] = vextq_s8(v1108, v1108, 8uLL).u64[0];
        v1105.i64[1] = vextq_s8(v1105, v1105, 8uLL).u64[0];
        v1112.i64[1] = vextq_s8(v1112, v1112, 8uLL).u64[0];
        v1109.i64[1] = vextq_s8(v1109, v1109, 8uLL).u64[0];
        v1110.i64[1] = vextq_s8(v1110, v1110, 8uLL).u64[0];
        v1113.i64[1] = vextq_s8(v1113, v1113, 8uLL).u64[0];
        v1114.i64[1] = vextq_s8(v1114, v1114, 8uLL).u64[0];
        v1111.i64[1] = vextq_s8(v1111, v1111, 8uLL).u64[0];
        *v1118 = v1116;
        v1118[1] = v1115;
        v1118[2] = v1106;
        v1119 = (int8x16_t *)((char *)v1118 + 8 * v1117);
        *v1119 = v1105;
        v1119[1] = v1108;
        v1119[2] = v1107;
        v1120 = &v1118[v1117];
        *v1120 = v1110;
        v1120[1] = v1109;
        v1120[2] = v1112;
        v1121 = (int8x16_t *)((char *)v1118 + 24 * v1117);
        *v1121 = v1111;
        v1121[1] = v1114;
        v1121[2] = v1113;
        v1096 = v1122;
      }
      v1103 += 2;
    }
    v1062 += 2;
  }
  while (v1062 != v1063);
  v889 = a3[6];
  v890 = a3[7];
  v1065 = *(_DWORD **)(a4 + 168);
  v1066 = *(_DWORD **)(a4 + 176);
  if (v889 == v890 || v1065 == v1066)
    goto LABEL_1098;
  do
  {
LABEL_1164:
    v1128 = *(_QWORD *)(result + 10456);
    v1129 = (*(_DWORD *)(result + 10480) * *v1065);
    v1130 = (uint64_t *)(v1128 + 8 * v1129);
    v1131 = *(_DWORD *)(result + 10376);
    v1132 = v1129 + v1131;
    v1133 = (uint64_t *)(v1128 + 8 * v1132);
    if (v1131)
    {
      if (*v1130 == -1)
      {
        v1134 = 8 * v1132 - 8 * v1129 - 8;
        v1135 = 1;
        v1136 = v1130;
        while (1)
        {
          v1131 = v1135;
          if (!v1134)
            break;
          v1130 = v1136 + 1;
          v1137 = v1136[1];
          ++v1135;
          v1134 -= 8;
          ++v1136;
          if (v1137 != -1)
            goto LABEL_1172;
        }
        v1130 = v1133;
      }
      else
      {
        v1131 = 0;
      }
    }
LABEL_1172:
    v1138 = a3[6];
    v1139 = a3[7];
    while (v1138 != v1139 && v1130 != v1133)
    {
      v1157 = *v1138;
      if (*v1138 > v1131)
      {
        v1158 = v1130 + 1;
        while (v1158 != v1133)
        {
          ++v1131;
          v1159 = *v1158++;
          if (v1159 != -1 && v1157 <= v1131)
          {
            v1130 = v1158 - 1;
            goto LABEL_1186;
          }
        }
        break;
      }
LABEL_1186:
      if (v1157 == v1131)
      {
        v1161 = (int8x16_t *)(*(_QWORD *)(result + 10384) + 8 * *v1130);
        if (v1161 == *(int8x16_t **)a2)
        {
          v1149 = v1161[10];
          v1148 = v1161[11];
          v1147 = v1161[8];
          v1146 = v1161[9];
          v1145 = v1161[6];
          v1144 = v1161[7];
          v1143 = v1161[4];
          v1142 = v1161[5];
          v1141 = v1161[2];
          v1140 = v1161[3];
        }
        else
        {
          v1141 = v1161[2];
          v1140 = v1161[3];
          v1143 = v1161[4];
          v1142 = v1161[5];
          v1145 = v1161[6];
          v1144 = v1161[7];
          v1147 = v1161[8];
          v1146 = v1161[9];
          v1149 = v1161[10];
          v1148 = v1161[11];
        }
        v1151 = *v1161;
        v1150 = v1161[1];
        v1152 = *(unsigned int *)(a2 + 16);
        v1153 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1138[1] + (_DWORD)v1152 * v1065[1]));
        v1141.i64[1] = vextq_s8(v1141, v1141, 8uLL).u64[0];
        v1150.i64[1] = vextq_s8(v1150, v1150, 8uLL).u64[0];
        v1151.i64[1] = vextq_s8(v1151, v1151, 8uLL).u64[0];
        v1142.i64[1] = vextq_s8(v1142, v1142, 8uLL).u64[0];
        v1143.i64[1] = vextq_s8(v1143, v1143, 8uLL).u64[0];
        v1140.i64[1] = vextq_s8(v1140, v1140, 8uLL).u64[0];
        v1147.i64[1] = vextq_s8(v1147, v1147, 8uLL).u64[0];
        v1144.i64[1] = vextq_s8(v1144, v1144, 8uLL).u64[0];
        v1145.i64[1] = vextq_s8(v1145, v1145, 8uLL).u64[0];
        v1148.i64[1] = vextq_s8(v1148, v1148, 8uLL).u64[0];
        v1149.i64[1] = vextq_s8(v1149, v1149, 8uLL).u64[0];
        v1146.i64[1] = vextq_s8(v1146, v1146, 8uLL).u64[0];
        *v1153 = v1151;
        v1153[1] = v1150;
        v1153[2] = v1141;
        v1154 = (int8x16_t *)((char *)v1153 + 8 * v1152);
        *v1154 = v1140;
        v1154[1] = v1143;
        v1154[2] = v1142;
        v1155 = &v1153[v1152];
        *v1155 = v1145;
        v1155[1] = v1144;
        v1155[2] = v1147;
        v1156 = (int8x16_t *)((char *)v1153 + 24 * v1152);
        *v1156 = v1146;
        v1156[1] = v1149;
        v1156[2] = v1148;
        v1131 = v1157;
      }
      v1138 += 2;
    }
    v1065 += 2;
  }
  while (v1065 != v1066);
  v889 = a3[6];
  v890 = a3[7];
  v1068 = *(_DWORD **)(a4 + 192);
  v1069 = *(_DWORD **)(a4 + 200);
  if (v889 == v890 || v1068 == v1069)
    goto LABEL_1194;
  do
  {
LABEL_1201:
    v1166 = *(_QWORD *)(result + 11896);
    v1167 = (*(_DWORD *)(result + 11920) * *v1068);
    v1168 = (uint64_t *)(v1166 + 8 * v1167);
    v1169 = *(_DWORD *)(result + 11816);
    v1170 = v1167 + v1169;
    v1171 = (uint64_t *)(v1166 + 8 * v1170);
    if (v1169)
    {
      if (*v1168 == -1)
      {
        v1172 = 8 * v1170 - 8 * v1167 - 8;
        v1173 = 1;
        v1174 = v1168;
        while (1)
        {
          v1169 = v1173;
          if (!v1172)
            break;
          v1168 = v1174 + 1;
          v1175 = v1174[1];
          ++v1173;
          v1172 -= 8;
          ++v1174;
          if (v1175 != -1)
            goto LABEL_1209;
        }
        v1168 = v1171;
      }
      else
      {
        v1169 = 0;
      }
    }
LABEL_1209:
    v1176 = a3[6];
    v1177 = a3[7];
    while (v1176 != v1177 && v1168 != v1171)
    {
      v1194 = *v1176;
      if (*v1176 > v1169)
      {
        v1195 = v1168 + 1;
        while (v1195 != v1171)
        {
          ++v1169;
          v1196 = *v1195++;
          if (v1196 != -1 && v1194 <= v1169)
          {
            v1168 = v1195 - 1;
            goto LABEL_1223;
          }
        }
        break;
      }
LABEL_1223:
      if (v1194 == v1169)
      {
        v1198 = (int8x16_t *)(*(_QWORD *)(result + 11824) + 8 * *v1168);
        if (v1198 == *(int8x16_t **)a2)
        {
          v1182 = v1198[7];
          v1184 = v1198[8];
          v1188 = v1198[5];
          v1183 = v1198[6];
          v1180 = v1198[3];
          v1189 = v1198[4];
          v1178 = v1198[1];
          v1181 = v1198[2];
          v1185 = vextq_s8(v1184, v1184, 8uLL).u64[0];
          v1186 = vextq_s8(v1182, v1182, 8uLL).u64[0];
          v1187 = vextq_s8(v1183, v1183, 8uLL).u64[0];
          v1179 = *v1198;
        }
        else
        {
          v1179 = *v1198;
          v1178 = v1198[1];
          v1181 = v1198[2];
          v1180 = v1198[3];
          v1183 = v1198[6];
          v1182 = v1198[7];
          v1184 = v1198[8];
          v1185 = vextq_s8(v1184, v1184, 8uLL).u64[0];
          v1186 = vextq_s8(v1182, v1182, 8uLL).u64[0];
          v1187 = vextq_s8(v1183, v1183, 8uLL).u64[0];
          v1189 = v1198[4];
          v1188 = v1198[5];
        }
        v1190 = *(unsigned int *)(a2 + 16);
        v1191 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1176[1] + (_DWORD)v1190 * v1068[1]));
        v1181.i64[1] = vextq_s8(v1181, v1181, 8uLL).u64[0];
        v1178.i64[1] = vextq_s8(v1178, v1178, 8uLL).u64[0];
        v1179.i64[1] = vextq_s8(v1179, v1179, 8uLL).u64[0];
        v1188.i64[1] = vextq_s8(v1188, v1188, 8uLL).u64[0];
        v1189.i64[1] = vextq_s8(v1189, v1189, 8uLL).u64[0];
        v1180.i64[1] = vextq_s8(v1180, v1180, 8uLL).u64[0];
        v1184.i64[1] = v1185;
        v1182.i64[1] = v1186;
        v1183.i64[1] = v1187;
        *v1191 = v1179;
        v1191[1] = v1178;
        v1191[2] = v1181;
        v1192 = (int8x16_t *)((char *)v1191 + 8 * v1190);
        *v1192 = v1180;
        v1192[1] = v1189;
        v1192[2] = v1188;
        v1193 = &v1191[v1190];
        *v1193 = v1183;
        v1193[1] = v1182;
        v1193[2] = v1184;
        v1169 = v1194;
      }
      v1176 += 2;
    }
    v1068 += 2;
  }
  while (v1068 != v1069);
  v1163 = *(_DWORD **)(a4 + 216);
  v1164 = *(_DWORD **)(a4 + 224);
  if (a3[6] != a3[7] && v1163 != v1164)
  {
    do
    {
LABEL_1253:
      v1214 = *(_QWORD *)(result + 13336);
      v1215 = (*(_DWORD *)(result + 13360) * *v1163);
      v1216 = (uint64_t *)(v1214 + 8 * v1215);
      v1217 = *(_DWORD *)(result + 13256);
      v1218 = v1215 + v1217;
      v1219 = (uint64_t *)(v1214 + 8 * v1218);
      if (v1217)
      {
        if (*v1216 == -1)
        {
          v1220 = 8 * v1218 - 8 * v1215 - 8;
          v1221 = 1;
          v1222 = v1216;
          while (1)
          {
            v1217 = v1221;
            if (!v1220)
              break;
            v1216 = v1222 + 1;
            v1223 = v1222[1];
            ++v1221;
            v1220 -= 8;
            ++v1222;
            if (v1223 != -1)
              goto LABEL_1261;
          }
          v1216 = v1219;
        }
        else
        {
          v1217 = 0;
        }
      }
LABEL_1261:
      v1224 = a3[6];
      v1225 = a3[7];
      while (v1224 != v1225 && v1216 != v1219)
      {
        v1242 = *v1224;
        if (*v1224 > v1217)
        {
          v1243 = v1216 + 1;
          while (v1243 != v1219)
          {
            ++v1217;
            v1244 = *v1243++;
            if (v1244 != -1 && v1242 <= v1217)
            {
              v1216 = v1243 - 1;
              goto LABEL_1275;
            }
          }
          break;
        }
LABEL_1275:
        if (v1242 == v1217)
        {
          v1246 = (int8x16_t *)(*(_QWORD *)(result + 13264) + 8 * *v1216);
          if (v1246 == *(int8x16_t **)a2)
          {
            v1230 = v1246[7];
            v1232 = v1246[8];
            v1236 = v1246[5];
            v1231 = v1246[6];
            v1228 = v1246[3];
            v1237 = v1246[4];
            v1226 = v1246[1];
            v1229 = v1246[2];
            v1233 = vextq_s8(v1232, v1232, 8uLL).u64[0];
            v1234 = vextq_s8(v1230, v1230, 8uLL).u64[0];
            v1235 = vextq_s8(v1231, v1231, 8uLL).u64[0];
            v1227 = *v1246;
          }
          else
          {
            v1227 = *v1246;
            v1226 = v1246[1];
            v1229 = v1246[2];
            v1228 = v1246[3];
            v1231 = v1246[6];
            v1230 = v1246[7];
            v1232 = v1246[8];
            v1233 = vextq_s8(v1232, v1232, 8uLL).u64[0];
            v1234 = vextq_s8(v1230, v1230, 8uLL).u64[0];
            v1235 = vextq_s8(v1231, v1231, 8uLL).u64[0];
            v1237 = v1246[4];
            v1236 = v1246[5];
          }
          v1238 = *(unsigned int *)(a2 + 16);
          v1239 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1224[1] + (_DWORD)v1238 * v1163[1]));
          v1229.i64[1] = vextq_s8(v1229, v1229, 8uLL).u64[0];
          v1226.i64[1] = vextq_s8(v1226, v1226, 8uLL).u64[0];
          v1227.i64[1] = vextq_s8(v1227, v1227, 8uLL).u64[0];
          v1236.i64[1] = vextq_s8(v1236, v1236, 8uLL).u64[0];
          v1237.i64[1] = vextq_s8(v1237, v1237, 8uLL).u64[0];
          v1228.i64[1] = vextq_s8(v1228, v1228, 8uLL).u64[0];
          v1232.i64[1] = v1233;
          v1230.i64[1] = v1234;
          v1231.i64[1] = v1235;
          *v1239 = v1227;
          v1239[1] = v1226;
          v1239[2] = v1229;
          v1240 = (int8x16_t *)((char *)v1239 + 8 * v1238);
          *v1240 = v1228;
          v1240[1] = v1237;
          v1240[2] = v1236;
          v1241 = &v1239[v1238];
          *v1241 = v1231;
          v1241[1] = v1230;
          v1241[2] = v1232;
          v1217 = v1242;
        }
        v1224 += 2;
      }
      v1163 += 2;
    }
    while (v1163 != v1164);
  }
LABEL_1231:
  v1200 = *(_DWORD **)(a4 + 24);
  v1201 = *(_DWORD **)(a4 + 32);
  v1202 = a3[3];
  v1203 = a3[4];
  if (v1202 == v1203 || v1200 == v1201)
  {
    v1205 = *(_DWORD **)(a4 + 48);
    v1206 = *(_DWORD **)(a4 + 56);
    if (v1202 != v1203 && v1205 != v1206)
      goto LABEL_1310;
LABEL_1241:
    v1208 = *(_DWORD **)(a4 + 72);
    v1209 = *(_DWORD **)(a4 + 80);
    if (v1202 != v1203 && v1208 != v1209)
      goto LABEL_1341;
LABEL_1246:
    v1211 = *(_DWORD **)(a4 + 96);
    v1212 = *(_DWORD **)(a4 + 104);
    if (v1202 != v1203 && v1211 != v1212)
      goto LABEL_1378;
LABEL_1371:
    v1439 = *(_DWORD **)(a4 + 120);
    v1440 = *(_DWORD **)(a4 + 128);
    if (v1202 != v1203 && v1439 != v1440)
      goto LABEL_1425;
LABEL_1408:
    v1489 = *(_DWORD **)(a4 + 144);
    v1490 = *(_DWORD **)(a4 + 152);
    if (v1202 != v1203 && v1489 != v1490)
      goto LABEL_1453;
LABEL_1413:
    v1492 = *(_DWORD **)(a4 + 168);
    v1493 = *(_DWORD **)(a4 + 176);
    if (v1202 != v1203 && v1492 != v1493)
      goto LABEL_1484;
LABEL_1418:
    v1495 = *(_DWORD **)(a4 + 192);
    v1496 = *(_DWORD **)(a4 + 200);
    if (v1202 != v1203 && v1495 != v1496)
      goto LABEL_1521;
LABEL_1514:
    v1632 = *(_DWORD **)(a4 + 216);
    v1633 = *(_DWORD **)(a4 + 224);
    if (v1202 == v1203 || v1632 == v1633)
      goto LABEL_1551;
    goto LABEL_1578;
  }
  do
  {
    v1247 = *(_QWORD *)(result + 1672);
    v1248 = (*(_DWORD *)(result + 1696) * *v1200);
    v1249 = (uint64_t *)(v1247 + 8 * v1248);
    v1250 = *(_DWORD *)(result + 1592);
    v1251 = v1248 + v1250;
    v1252 = (uint64_t *)(v1247 + 8 * v1251);
    if (v1250)
    {
      if (*v1249 == -1)
      {
        v1253 = 8 * v1251 - 8 * v1248 - 8;
        v1254 = 1;
        v1255 = v1249;
        while (1)
        {
          v1250 = v1254;
          if (!v1253)
            break;
          v1249 = v1255 + 1;
          v1256 = v1255[1];
          ++v1254;
          v1253 -= 8;
          ++v1255;
          if (v1256 != -1)
            goto LABEL_1287;
        }
        v1249 = v1252;
      }
      else
      {
        v1250 = 0;
      }
    }
LABEL_1287:
    v1257 = a3[3];
    v1258 = a3[4];
    while (v1257 != v1258 && v1249 != v1252)
    {
      v1317 = *v1257;
      if (*v1257 > v1250)
      {
        v1318 = v1249 + 1;
        while (v1318 != v1252)
        {
          ++v1250;
          v1319 = *v1318++;
          if (v1319 != -1 && v1317 <= v1250)
          {
            v1249 = v1318 - 1;
            goto LABEL_1301;
          }
        }
        break;
      }
LABEL_1301:
      if (v1317 == v1250)
      {
        v1321 = *(_QWORD *)(result + 1600) + 8 * *v1249;
        if (v1321 == *(_QWORD *)a2)
        {
          v2294 = *(int8x16_t *)(v1321 + 608);
          v2306 = *(int8x16_t *)(v1321 + 624);
          v2171 = vextq_s8(v2306, v2306, 8uLL).u64[0];
          v2170 = vextq_s8(v2294, v2294, 8uLL).u64[0];
          v2270 = *(int8x16_t *)(v1321 + 576);
          v2282 = *(int8x16_t *)(v1321 + 592);
          v2169 = vextq_s8(v2282, v2282, 8uLL).u64[0];
          v2166 = vextq_s8(v2270, v2270, 8uLL).u64[0];
          v2180 = *(int8x16_t *)(v1321 + 544);
          v2181 = *(int8x16_t *)(v1321 + 560);
          v2197 = vextq_s8(v2181, v2181, 8uLL).u64[0];
          *(_QWORD *)&v2243 = vextq_s8(v2180, v2180, 8uLL).u64[0];
          v2178 = *(int8x16_t *)(v1321 + 512);
          v2179 = *(int8x16_t *)(v1321 + 528);
          v2231 = *(int8x16_t *)(v1321 + 496);
          *(_QWORD *)&v2235 = vextq_s8(v2179, v2179, 8uLL).u64[0];
          *(_QWORD *)&v2247 = vextq_s8(v2178, v2178, 8uLL).u64[0];
          v1276 = *(int8x16_t *)(v1321 + 320);
          v1275 = *(int8x16_t *)(v1321 + 336);
          *(_QWORD *)&v2239 = vextq_s8(v2231, v2231, 8uLL).u64[0];
          v2218 = *(int8x16_t *)(v1321 + 464);
          v2222 = *(int8x16_t *)(v1321 + 480);
          v2164 = vextq_s8(v2222, v2222, 8uLL).u64[0];
          v2163 = vextq_s8(v2218, v2218, 8uLL).u64[0];
          v1279 = *(int8x16_t *)(v1321 + 416);
          v1273 = *(int8x16_t *)(v1321 + 288);
          v1272 = *(int8x16_t *)(v1321 + 304);
          v2201 = *(int8x16_t *)(v1321 + 432);
          v2205 = *(int8x16_t *)(v1321 + 448);
          v2162 = vextq_s8(v2205, v2205, 8uLL).u64[0];
          v2161 = vextq_s8(v2201, v2201, 8uLL).u64[0];
          v1278 = *(int8x16_t *)(v1321 + 400);
          v2189 = vextq_s8(v1279, v1279, 8uLL).u64[0];
          v2193 = *(int8x16_t *)(v1321 + 352);
          *(_QWORD *)&v2263 = vextq_s8(v1278, v1278, 8uLL).u64[0];
          v2176 = *(int8x16_t *)(v1321 + 368);
          v2177 = *(int8x16_t *)(v1321 + 384);
          *(_QWORD *)&v2259 = vextq_s8(v2177, v2177, 8uLL).u64[0];
          *(_QWORD *)&v2255 = vextq_s8(v2176, v2176, 8uLL).u64[0];
          *(_QWORD *)&v2251 = vextq_s8(v2193, v2193, 8uLL).u64[0];
          v2159 = vextq_s8(v1275, v1275, 8uLL).u64[0];
          v2158 = vextq_s8(v1276, v1276, 8uLL).u64[0];
          v1268 = *(int8x16_t *)(v1321 + 192);
          v1280 = vextq_s8(v1272, v1272, 8uLL).u64[0];
          v1281 = vextq_s8(v1273, v1273, 8uLL).u64[0];
          v2174 = *(_QWORD *)(v1321 + 272);
          v2175 = *(int8x16_t *)(v1321 + 256);
          v2185 = *(int8x16_t *)(v1321 + 208);
          v2187 = vextq_s8(*(int8x16_t *)(v1321 + 272), *(int8x16_t *)(v1321 + 272), 8uLL).u64[0];
          v1266 = *(int8x16_t *)(v1321 + 160);
          v1269 = *(int8x16_t *)(v1321 + 176);
          *(_QWORD *)&v1270 = vextq_s8(v2175, v2175, 8uLL).u64[0];
          v2172 = *(int8x16_t *)(v1321 + 224);
          v2173 = *(int8x16_t *)(v1321 + 240);
          *(_QWORD *)&v2226 = vextq_s8(v2173, v2173, 8uLL).u64[0];
          *(_QWORD *)&v1271 = vextq_s8(v2172, v2172, 8uLL).u64[0];
          v1277 = *(int8x16_t *)(v1321 + 128);
          v1267 = *(int8x16_t *)(v1321 + 144);
          *(_QWORD *)&v2214 = vextq_s8(v2185, v2185, 8uLL).u64[0];
          v1282 = vextq_s8(v1268, v1268, 8uLL).u64[0];
          v1283 = vextq_s8(v1269, v1269, 8uLL).u64[0];
          v1284 = vextq_s8(v1266, v1266, 8uLL).u64[0];
          v1285 = vextq_s8(v1267, v1267, 8uLL).u64[0];
          v2184 = vextq_s8(v1277, v1277, 8uLL).u64[0];
          v1274 = *(int8x16_t *)(v1321 + 80);
          v2167 = *(int8x16_t *)(v1321 + 112);
          *(_QWORD *)&v1265 = vextq_s8(v2167, v2167, 8uLL).u64[0];
          v2165 = *(int8x16_t *)(v1321 + 96);
          *(_QWORD *)&v2209 = vextq_s8(v2165, v2165, 8uLL).u64[0];
          *(_QWORD *)&v1264 = vextq_s8(v1274, v1274, 8uLL).u64[0];
          v1262 = *(int8x16_t *)(v1321 + 32);
          v1261 = *(int8x16_t *)(v1321 + 48);
          v2182 = *(int8x16_t *)(v1321 + 64);
          *(_QWORD *)&v1263 = vextq_s8(v2182, v2182, 8uLL).u64[0];
          v1286 = vextq_s8(v1261, v1261, 8uLL).u64[0];
          v1287 = vextq_s8(v1262, v1262, 8uLL).u64[0];
          v1260 = *(int8x16_t *)v1321;
          v1259 = *(int8x16_t *)(v1321 + 16);
        }
        else
        {
          v1260 = *(int8x16_t *)v1321;
          v1259 = *(int8x16_t *)(v1321 + 16);
          v1262 = *(int8x16_t *)(v1321 + 32);
          v1261 = *(int8x16_t *)(v1321 + 48);
          v1263 = *(_OWORD *)(v1321 + 72);
          v1264 = *(_OWORD *)(v1321 + 88);
          v1265 = *(_OWORD *)(v1321 + 120);
          v1267 = *(int8x16_t *)(v1321 + 144);
          v1266 = *(int8x16_t *)(v1321 + 160);
          v1269 = *(int8x16_t *)(v1321 + 176);
          v1268 = *(int8x16_t *)(v1321 + 192);
          v1270 = *(_OWORD *)(v1321 + 264);
          v1271 = *(_OWORD *)(v1321 + 232);
          v1273 = *(int8x16_t *)(v1321 + 288);
          v1272 = *(int8x16_t *)(v1321 + 304);
          v2209 = *(_OWORD *)(v1321 + 104);
          v2214 = *(_OWORD *)(v1321 + 216);
          v2167.i64[0] = *(_QWORD *)(v1321 + 112);
          v2165.i64[0] = *(_QWORD *)(v1321 + 96);
          v1274.i64[0] = *(_QWORD *)(v1321 + 80);
          v1276 = *(int8x16_t *)(v1321 + 320);
          v1275 = *(int8x16_t *)(v1321 + 336);
          v2226 = *(_OWORD *)(v1321 + 248);
          v2175.i64[0] = *(_QWORD *)(v1321 + 256);
          v2173.i64[0] = *(_QWORD *)(v1321 + 240);
          v2172.i64[0] = *(_QWORD *)(v1321 + 224);
          v2174 = *(_QWORD *)(v1321 + 272);
          v2259 = *(_OWORD *)(v1321 + 392);
          v2263 = *(_OWORD *)(v1321 + 408);
          v2251 = *(_OWORD *)(v1321 + 360);
          v2255 = *(_OWORD *)(v1321 + 376);
          v2177.i64[0] = *(_QWORD *)(v1321 + 384);
          v2176.i64[0] = *(_QWORD *)(v1321 + 368);
          v2243 = *(_OWORD *)(v1321 + 552);
          v2247 = *(_OWORD *)(v1321 + 520);
          v2181.i64[0] = *(_QWORD *)(v1321 + 560);
          v2235 = *(_OWORD *)(v1321 + 536);
          v2239 = *(_OWORD *)(v1321 + 504);
          v2180.i64[0] = *(_QWORD *)(v1321 + 544);
          v2179.i64[0] = *(_QWORD *)(v1321 + 528);
          v2178.i64[0] = *(_QWORD *)(v1321 + 512);
          v2294 = *(int8x16_t *)(v1321 + 608);
          v2306 = *(int8x16_t *)(v1321 + 624);
          v2171 = vextq_s8(v2306, v2306, 8uLL).u64[0];
          v2170 = vextq_s8(v2294, v2294, 8uLL).u64[0];
          v2270 = *(int8x16_t *)(v1321 + 576);
          v2282 = *(int8x16_t *)(v1321 + 592);
          v2169 = vextq_s8(v2282, v2282, 8uLL).u64[0];
          v1277.i64[0] = *(_QWORD *)(v1321 + 128);
          v2166 = vextq_s8(v2270, v2270, 8uLL).u64[0];
          v1278.i64[0] = *(_QWORD *)(v1321 + 400);
          v2218 = *(int8x16_t *)(v1321 + 464);
          v2222 = *(int8x16_t *)(v1321 + 480);
          v2164 = vextq_s8(v2222, v2222, 8uLL).u64[0];
          v2163 = vextq_s8(v2218, v2218, 8uLL).u64[0];
          v2201 = *(int8x16_t *)(v1321 + 432);
          v2205 = *(int8x16_t *)(v1321 + 448);
          v2162 = vextq_s8(v2205, v2205, 8uLL).u64[0];
          v2184 = *(_QWORD *)(v1321 + 136);
          v2161 = vextq_s8(v2201, v2201, 8uLL).u64[0];
          v1279.i64[0] = *(_QWORD *)(v1321 + 416);
          v2159 = vextq_s8(v1275, v1275, 8uLL).u64[0];
          v2182.i64[0] = *(_QWORD *)(v1321 + 64);
          v2158 = vextq_s8(v1276, v1276, 8uLL).u64[0];
          v2187 = *(_QWORD *)(v1321 + 280);
          v1280 = vextq_s8(v1272, v1272, 8uLL).u64[0];
          v1281 = vextq_s8(v1273, v1273, 8uLL).u64[0];
          v2185.i64[0] = *(_QWORD *)(v1321 + 208);
          v1282 = vextq_s8(v1268, v1268, 8uLL).u64[0];
          v2189 = *(_QWORD *)(v1321 + 424);
          v1283 = vextq_s8(v1269, v1269, 8uLL).u64[0];
          v1284 = vextq_s8(v1266, v1266, 8uLL).u64[0];
          v2193.i64[0] = *(_QWORD *)(v1321 + 352);
          v1285 = vextq_s8(v1267, v1267, 8uLL).u64[0];
          v2197 = *(_QWORD *)(v1321 + 568);
          v1286 = vextq_s8(v1261, v1261, 8uLL).u64[0];
          v1287 = vextq_s8(v1262, v1262, 8uLL).u64[0];
          v2231.i64[0] = *(_QWORD *)(v1321 + 496);
        }
        v2183 = *(_QWORD *)(v1321 + 640);
        v1261.i64[1] = v1286;
        v1262.i64[1] = v1287;
        v1259.i64[1] = vextq_s8(v1259, v1259, 8uLL).u64[0];
        v1260.i64[1] = vextq_s8(v1260, v1260, 8uLL).u64[0];
        *((_QWORD *)&v1265 + 1) = v1277.i64[0];
        v2160 = v1265;
        *(_QWORD *)&v1288 = v2209;
        *(_QWORD *)&v1289 = v2214;
        *((_QWORD *)&v1288 + 1) = v2167.i64[0];
        *((_QWORD *)&v1264 + 1) = v2165.i64[0];
        v2168 = v1264;
        *((_QWORD *)&v1263 + 1) = v1274.i64[0];
        v1268.i64[1] = v1282;
        v1269.i64[1] = v1283;
        v1266.i64[1] = v1284;
        v1267.i64[1] = v1285;
        *((_QWORD *)&v1270 + 1) = v2174;
        v2210 = v1270;
        *(_QWORD *)&v1290 = v2226;
        *((_QWORD *)&v1290 + 1) = v2175.i64[0];
        *((_QWORD *)&v1271 + 1) = v2173.i64[0];
        v2227 = v1271;
        *((_QWORD *)&v1289 + 1) = v2172.i64[0];
        v1275.i64[1] = v2159;
        v1276.i64[1] = v2158;
        v1272.i64[1] = v1280;
        v1273.i64[1] = v1281;
        *(_QWORD *)&v1292 = v2259;
        *(_QWORD *)&v1291 = v2263;
        *((_QWORD *)&v1291 + 1) = v1279.i64[0];
        *((_QWORD *)&v1292 + 1) = v1278.i64[0];
        *(_QWORD *)&v1294 = v2251;
        *(_QWORD *)&v1293 = v2255;
        *((_QWORD *)&v1293 + 1) = v2177.i64[0];
        *((_QWORD *)&v1294 + 1) = v2176.i64[0];
        *(_QWORD *)&v1296 = v2218.i64[0];
        *(_QWORD *)&v1295 = v2222.i64[0];
        *((_QWORD *)&v1295 + 1) = v2164;
        *((_QWORD *)&v1296 + 1) = v2163;
        *(_QWORD *)&v1298 = v2201.i64[0];
        *(_QWORD *)&v1297 = v2205.i64[0];
        *((_QWORD *)&v1297 + 1) = v2162;
        *((_QWORD *)&v1298 + 1) = v2161;
        *(_QWORD *)&v1299 = v2243;
        *(_QWORD *)&v1300 = v2247;
        *((_QWORD *)&v1299 + 1) = v2181.i64[0];
        *(_QWORD *)&v1302 = v2235;
        *(_QWORD *)&v1301 = v2239;
        *((_QWORD *)&v1302 + 1) = v2180.i64[0];
        *((_QWORD *)&v1300 + 1) = v2179.i64[0];
        *((_QWORD *)&v1301 + 1) = v2178.i64[0];
        *(_QWORD *)&v1303 = v2306.i64[0];
        *((_QWORD *)&v1303 + 1) = v2171;
        *(_QWORD *)&v1304 = v2294.i64[0];
        *((_QWORD *)&v1304 + 1) = v2170;
        *(_QWORD *)&v1305 = v2282.i64[0];
        *((_QWORD *)&v1305 + 1) = v2169;
        *(_QWORD *)&v1306 = v2270.i64[0];
        *((_QWORD *)&v1306 + 1) = v2166;
        v1307 = *(unsigned int *)(a2 + 16);
        v1308 = *(_QWORD *)a2 + 8 * (v1257[1] + (_DWORD)v1307 * v1200[1]);
        *(int8x16_t *)v1308 = v1260;
        *(int8x16_t *)(v1308 + 16) = v1259;
        *(_QWORD *)(v1308 + 64) = v2182.i64[0];
        *(int8x16_t *)(v1308 + 32) = v1262;
        *(int8x16_t *)(v1308 + 48) = v1261;
        v1309 = v1308 + 8 * v1307;
        *(_OWORD *)v1309 = v1263;
        *(_OWORD *)(v1309 + 16) = v2168;
        *(_QWORD *)(v1309 + 64) = v2184;
        *(_OWORD *)(v1309 + 32) = v1288;
        *(_OWORD *)(v1309 + 48) = v2160;
        v1310 = (int8x16_t *)(v1308 + 16 * v1307);
        *v1310 = v1267;
        v1310[1] = v1266;
        v1310[4].i64[0] = v2185.i64[0];
        v1310[2] = v1269;
        v1310[3] = v1268;
        v1311 = v1308 + 24 * v1307;
        *(_OWORD *)v1311 = v1289;
        *(_OWORD *)(v1311 + 16) = v2227;
        *(_QWORD *)(v1311 + 64) = v2187;
        *(_OWORD *)(v1311 + 32) = v1290;
        *(_OWORD *)(v1311 + 48) = v2210;
        v1312 = (int8x16_t *)(v1308 + 32 * v1307);
        *v1312 = v1273;
        v1312[1] = v1272;
        v1312[4].i64[0] = v2193.i64[0];
        v1312[2] = v1276;
        v1312[3] = v1275;
        v1313 = v1308 + 40 * v1307;
        *(_OWORD *)v1313 = v1294;
        *(_OWORD *)(v1313 + 16) = v1293;
        *(_QWORD *)(v1313 + 64) = v2189;
        *(_OWORD *)(v1313 + 32) = v1292;
        *(_OWORD *)(v1313 + 48) = v1291;
        v1314 = v1308 + 48 * v1307;
        *(_OWORD *)v1314 = v1298;
        *(_OWORD *)(v1314 + 16) = v1297;
        *(_QWORD *)(v1314 + 64) = v2231.i64[0];
        *(_OWORD *)(v1314 + 32) = v1296;
        *(_OWORD *)(v1314 + 48) = v1295;
        v1315 = v1308 + 56 * v1307;
        *(_OWORD *)v1315 = v1301;
        *(_OWORD *)(v1315 + 16) = v1300;
        *(_QWORD *)(v1315 + 64) = v2197;
        *(_OWORD *)(v1315 + 32) = v1302;
        *(_OWORD *)(v1315 + 48) = v1299;
        v1316 = v1308 + (v1307 << 6);
        *(_OWORD *)v1316 = v1306;
        *(_OWORD *)(v1316 + 16) = v1305;
        *(_QWORD *)(v1316 + 64) = v2183;
        v1250 = v1317;
        *(_OWORD *)(v1316 + 32) = v1304;
        *(_OWORD *)(v1316 + 48) = v1303;
      }
      v1257 += 2;
    }
    v1200 += 2;
  }
  while (v1200 != v1201);
  v1202 = a3[3];
  v1203 = a3[4];
  v1205 = *(_DWORD **)(a4 + 48);
  v1206 = *(_DWORD **)(a4 + 56);
  if (v1202 == v1203 || v1205 == v1206)
    goto LABEL_1241;
  do
  {
LABEL_1310:
    v1323 = *(_QWORD *)(result + 3112);
    v1324 = (*(_DWORD *)(result + 3136) * *v1205);
    v1325 = (uint64_t *)(v1323 + 8 * v1324);
    v1326 = *(_DWORD *)(result + 3032);
    v1327 = v1324 + v1326;
    v1328 = (uint64_t *)(v1323 + 8 * v1327);
    if (v1326)
    {
      if (*v1325 == -1)
      {
        v1329 = 8 * v1327 - 8 * v1324 - 8;
        v1330 = 1;
        v1331 = v1325;
        while (1)
        {
          v1326 = v1330;
          if (!v1329)
            break;
          v1325 = v1331 + 1;
          v1332 = v1331[1];
          ++v1330;
          v1329 -= 8;
          ++v1331;
          if (v1332 != -1)
            goto LABEL_1318;
        }
        v1325 = v1328;
      }
      else
      {
        v1326 = 0;
      }
    }
LABEL_1318:
    v1333 = a3[3];
    v1334 = a3[4];
    while (v1333 != v1334 && v1325 != v1328)
    {
      v1375 = *v1333;
      if (*v1333 > v1326)
      {
        v1376 = v1325 + 1;
        while (v1376 != v1328)
        {
          ++v1326;
          v1377 = *v1376++;
          if (v1377 != -1 && v1375 <= v1326)
          {
            v1325 = v1376 - 1;
            goto LABEL_1332;
          }
        }
        break;
      }
LABEL_1332:
      if (v1375 == v1326)
      {
        v1379 = *(_QWORD *)(result + 3040) + 8 * *v1325;
        if (v1379 == *(_QWORD *)a2)
        {
          v1349 = *(int8x16_t *)(v1379 + 336);
          v1351 = *(int8x16_t *)(v1379 + 304);
          v1350 = *(int8x16_t *)(v1379 + 320);
          v2240 = *(int8x16_t *)(v1379 + 400);
          v2244 = *(int8x16_t *)(v1379 + 416);
          v1359 = vextq_s8(v2244, v2244, 8uLL).u64[0];
          *(_QWORD *)&v2283 = vextq_s8(v2240, v2240, 8uLL).u64[0];
          v2295 = *(int8x16_t *)(v1379 + 368);
          v1352 = *(int8x16_t *)(v1379 + 288);
          v2307 = *(int8x16_t *)(v1379 + 384);
          *(_QWORD *)&v1362 = vextq_s8(v2307, v2307, 8uLL).u64[0];
          *(_QWORD *)&v1363 = vextq_s8(v2295, v2295, 8uLL).u64[0];
          v2264 = *(int8x16_t *)(v1379 + 352);
          *(_QWORD *)&v1364 = vextq_s8(v2264, v2264, 8uLL).u64[0];
          v2202 = vextq_s8(v1349, v1349, 8uLL).u64[0];
          v2198 = vextq_s8(v1350, v1350, 8uLL).u64[0];
          v2194 = vextq_s8(v1351, v1351, 8uLL).u64[0];
          v1346 = *(int8x16_t *)(v1379 + 176);
          v1345 = *(int8x16_t *)(v1379 + 192);
          v2190 = vextq_s8(v1352, v1352, 8uLL).u64[0];
          v2232 = *(int8x16_t *)(v1379 + 272);
          v2236 = *(int8x16_t *)(v1379 + 256);
          v2256 = *(int8x16_t *)(v1379 + 208);
          v2260 = vextq_s8(v2232, v2232, 8uLL).u64[0];
          *(_QWORD *)&v2271 = vextq_s8(v2236, v2236, 8uLL).u64[0];
          v1344 = *(int8x16_t *)(v1379 + 144);
          v1343 = *(int8x16_t *)(v1379 + 160);
          v2223 = *(int8x16_t *)(v1379 + 224);
          v2228 = *(int8x16_t *)(v1379 + 240);
          *(_QWORD *)&v1348 = vextq_s8(v2228, v2228, 8uLL).u64[0];
          *(_QWORD *)&v1347 = vextq_s8(v2223, v2223, 8uLL).u64[0];
          *(_QWORD *)&v1365 = vextq_s8(v2256, v2256, 8uLL).u64[0];
          v1353 = vextq_s8(v1345, v1345, 8uLL).u64[0];
          v1354 = vextq_s8(v1346, v1346, 8uLL).u64[0];
          v1355 = vextq_s8(v1343, v1343, 8uLL).u64[0];
          v1356 = vextq_s8(v1344, v1344, 8uLL).u64[0];
          v2215 = *(int8x16_t *)(v1379 + 112);
          v2219 = *(int8x16_t *)(v1379 + 128);
          v2252 = vextq_s8(v2219, v2219, 8uLL).u64[0];
          *(_QWORD *)&v1342 = vextq_s8(v2215, v2215, 8uLL).u64[0];
          v1337 = *(int8x16_t *)(v1379 + 48);
          v2206 = *(int8x16_t *)(v1379 + 80);
          v2211 = *(int8x16_t *)(v1379 + 96);
          *(_QWORD *)&v1341 = vextq_s8(v2211, v2211, 8uLL).u64[0];
          *(_QWORD *)&v1340 = vextq_s8(v2206, v2206, 8uLL).u64[0];
          v2248 = *(int8x16_t *)(v1379 + 64);
          *(_QWORD *)&v1339 = vextq_s8(v2248, v2248, 8uLL).u64[0];
          v1335 = *(int8x16_t *)(v1379 + 16);
          v1338 = *(int8x16_t *)(v1379 + 32);
          v1357 = vextq_s8(v1337, v1337, 8uLL).u64[0];
          v1358 = vextq_s8(v1338, v1338, 8uLL).u64[0];
          v1336 = *(int8x16_t *)v1379;
          v1360 = vextq_s8(v1335, v1335, 8uLL).u64[0];
          v1361 = vextq_s8(v1336, v1336, 8uLL).u64[0];
        }
        else
        {
          v1336 = *(int8x16_t *)v1379;
          v1335 = *(int8x16_t *)(v1379 + 16);
          v1338 = *(int8x16_t *)(v1379 + 32);
          v1337 = *(int8x16_t *)(v1379 + 48);
          v1339 = *(_OWORD *)(v1379 + 72);
          v1340 = *(_OWORD *)(v1379 + 88);
          v1341 = *(_OWORD *)(v1379 + 104);
          v1342 = *(_OWORD *)(v1379 + 120);
          v1344 = *(int8x16_t *)(v1379 + 144);
          v1343 = *(int8x16_t *)(v1379 + 160);
          v1346 = *(int8x16_t *)(v1379 + 176);
          v1345 = *(int8x16_t *)(v1379 + 192);
          v2219.i64[0] = *(_QWORD *)(v1379 + 128);
          v1347 = *(_OWORD *)(v1379 + 232);
          v2215.i64[0] = *(_QWORD *)(v1379 + 112);
          v1348 = *(_OWORD *)(v1379 + 248);
          v2211.i64[0] = *(_QWORD *)(v1379 + 96);
          v2206.i64[0] = *(_QWORD *)(v1379 + 80);
          v2236.i64[0] = *(_QWORD *)(v1379 + 256);
          v2228.i64[0] = *(_QWORD *)(v1379 + 240);
          v2223.i64[0] = *(_QWORD *)(v1379 + 224);
          v2271 = *(_OWORD *)(v1379 + 264);
          v2232.i64[0] = *(_QWORD *)(v1379 + 272);
          v2283 = *(_OWORD *)(v1379 + 408);
          v2244.i64[0] = *(_QWORD *)(v1379 + 416);
          v2240.i64[0] = *(_QWORD *)(v1379 + 400);
          v1350 = *(int8x16_t *)(v1379 + 320);
          v1349 = *(int8x16_t *)(v1379 + 336);
          v2295.i64[0] = *(_QWORD *)(v1379 + 368);
          v2307.i64[0] = *(_QWORD *)(v1379 + 384);
          v2198 = vextq_s8(v1350, v1350, 8uLL).u64[0];
          v2202 = vextq_s8(v1349, v1349, 8uLL).u64[0];
          v1352 = *(int8x16_t *)(v1379 + 288);
          v1351 = *(int8x16_t *)(v1379 + 304);
          v2190 = vextq_s8(v1352, v1352, 8uLL).u64[0];
          v2194 = vextq_s8(v1351, v1351, 8uLL).u64[0];
          v2252 = *(_QWORD *)(v1379 + 136);
          v1353 = vextq_s8(v1345, v1345, 8uLL).u64[0];
          v2248.i64[0] = *(_QWORD *)(v1379 + 64);
          v1354 = vextq_s8(v1346, v1346, 8uLL).u64[0];
          v1355 = vextq_s8(v1343, v1343, 8uLL).u64[0];
          v2260 = *(_QWORD *)(v1379 + 280);
          v1356 = vextq_s8(v1344, v1344, 8uLL).u64[0];
          v2256.i64[0] = *(_QWORD *)(v1379 + 208);
          v1357 = vextq_s8(v1337, v1337, 8uLL).u64[0];
          v1358 = vextq_s8(v1338, v1338, 8uLL).u64[0];
          v1359 = *(_QWORD *)(v1379 + 424);
          v1360 = vextq_s8(v1335, v1335, 8uLL).u64[0];
          v1361 = vextq_s8(v1336, v1336, 8uLL).u64[0];
          v2264.i64[0] = *(_QWORD *)(v1379 + 352);
          v1362 = *(_OWORD *)(v1379 + 392);
          v1363 = *(_OWORD *)(v1379 + 376);
          v1364 = *(_OWORD *)(v1379 + 360);
          v1365 = *(_OWORD *)(v1379 + 216);
        }
        v1337.i64[1] = v1357;
        v1338.i64[1] = v1358;
        v1335.i64[1] = v1360;
        v1336.i64[1] = v1361;
        *((_QWORD *)&v1342 + 1) = v2219.i64[0];
        *((_QWORD *)&v1341 + 1) = v2215.i64[0];
        *((_QWORD *)&v1340 + 1) = v2211.i64[0];
        *((_QWORD *)&v1339 + 1) = v2206.i64[0];
        v1345.i64[1] = v1353;
        v1346.i64[1] = v1354;
        v1343.i64[1] = v1355;
        v1344.i64[1] = v1356;
        *(_QWORD *)&v1367 = v2271;
        *(_QWORD *)&v1366 = v2283;
        *((_QWORD *)&v1367 + 1) = v2232.i64[0];
        *((_QWORD *)&v1348 + 1) = v2236.i64[0];
        *((_QWORD *)&v1347 + 1) = v2228.i64[0];
        *((_QWORD *)&v1365 + 1) = v2223.i64[0];
        v1349.i64[1] = v2202;
        v1350.i64[1] = v2198;
        v1351.i64[1] = v2194;
        v1352.i64[1] = v2190;
        *((_QWORD *)&v1366 + 1) = v2244.i64[0];
        *((_QWORD *)&v1362 + 1) = v2240.i64[0];
        v1368 = *(unsigned int *)(a2 + 16);
        v1369 = *(_QWORD *)a2 + 8 * (v1333[1] + (_DWORD)v1368 * v1205[1]);
        *((_QWORD *)&v1363 + 1) = v2307.i64[0];
        *((_QWORD *)&v1364 + 1) = v2295.i64[0];
        *(int8x16_t *)v1369 = v1336;
        *(int8x16_t *)(v1369 + 16) = v1335;
        *(_QWORD *)(v1369 + 64) = v2248.i64[0];
        *(int8x16_t *)(v1369 + 32) = v1338;
        *(int8x16_t *)(v1369 + 48) = v1337;
        v1370 = v1369 + 8 * v1368;
        *(_OWORD *)v1370 = v1339;
        *(_OWORD *)(v1370 + 16) = v1340;
        *(_QWORD *)(v1370 + 64) = v2252;
        *(_OWORD *)(v1370 + 32) = v1341;
        *(_OWORD *)(v1370 + 48) = v1342;
        v1371 = (int8x16_t *)(v1369 + 16 * v1368);
        *v1371 = v1344;
        v1371[1] = v1343;
        v1371[4].i64[0] = v2256.i64[0];
        v1371[2] = v1346;
        v1371[3] = v1345;
        v1372 = v1369 + 24 * v1368;
        *(_OWORD *)v1372 = v1365;
        *(_OWORD *)(v1372 + 16) = v1347;
        *(_QWORD *)(v1372 + 64) = v2260;
        *(_OWORD *)(v1372 + 32) = v1348;
        *(_OWORD *)(v1372 + 48) = v1367;
        v1373 = (int8x16_t *)(v1369 + 32 * v1368);
        *v1373 = v1352;
        v1373[1] = v1351;
        v1373[4].i64[0] = v2264.i64[0];
        v1373[2] = v1350;
        v1373[3] = v1349;
        v1374 = v1369 + 40 * v1368;
        *(_OWORD *)v1374 = v1364;
        *(_OWORD *)(v1374 + 16) = v1363;
        *(_QWORD *)(v1374 + 64) = v1359;
        v1326 = v1375;
        *(_OWORD *)(v1374 + 32) = v1362;
        *(_OWORD *)(v1374 + 48) = v1366;
      }
      v1333 += 2;
    }
    v1205 += 2;
  }
  while (v1205 != v1206);
  v1202 = a3[3];
  v1203 = a3[4];
  v1208 = *(_DWORD **)(a4 + 72);
  v1209 = *(_DWORD **)(a4 + 80);
  if (v1202 == v1203 || v1208 == v1209)
    goto LABEL_1246;
  do
  {
LABEL_1341:
    v1381 = *(_QWORD *)(result + 4552);
    v1382 = (*(_DWORD *)(result + 4576) * *v1208);
    v1383 = (uint64_t *)(v1381 + 8 * v1382);
    v1384 = *(_DWORD *)(result + 4472);
    v1385 = v1382 + v1384;
    v1386 = (uint64_t *)(v1381 + 8 * v1385);
    if (v1384)
    {
      if (*v1383 == -1)
      {
        v1387 = 8 * v1385 - 8 * v1382 - 8;
        v1388 = 1;
        v1389 = v1383;
        while (1)
        {
          v1384 = v1388;
          if (!v1387)
            break;
          v1383 = v1389 + 1;
          v1390 = v1389[1];
          ++v1388;
          v1387 -= 8;
          ++v1389;
          if (v1390 != -1)
            goto LABEL_1349;
        }
        v1383 = v1386;
      }
      else
      {
        v1384 = 0;
      }
    }
LABEL_1349:
    v1391 = a3[3];
    v1392 = a3[4];
    while (v1391 != v1392 && v1383 != v1386)
    {
      v1433 = *v1391;
      if (*v1391 > v1384)
      {
        v1434 = v1383 + 1;
        while (v1434 != v1386)
        {
          ++v1384;
          v1435 = *v1434++;
          if (v1435 != -1 && v1433 <= v1384)
          {
            v1383 = v1434 - 1;
            goto LABEL_1363;
          }
        }
        break;
      }
LABEL_1363:
      if (v1433 == v1384)
      {
        v1437 = *(_QWORD *)(result + 4480) + 8 * *v1383;
        if (v1437 == *(_QWORD *)a2)
        {
          v1407 = *(int8x16_t *)(v1437 + 336);
          v1409 = *(int8x16_t *)(v1437 + 304);
          v1408 = *(int8x16_t *)(v1437 + 320);
          v2241 = *(int8x16_t *)(v1437 + 400);
          v2245 = *(int8x16_t *)(v1437 + 416);
          v1417 = vextq_s8(v2245, v2245, 8uLL).u64[0];
          *(_QWORD *)&v2284 = vextq_s8(v2241, v2241, 8uLL).u64[0];
          v2296 = *(int8x16_t *)(v1437 + 368);
          v1410 = *(int8x16_t *)(v1437 + 288);
          v2308 = *(int8x16_t *)(v1437 + 384);
          *(_QWORD *)&v1420 = vextq_s8(v2308, v2308, 8uLL).u64[0];
          *(_QWORD *)&v1421 = vextq_s8(v2296, v2296, 8uLL).u64[0];
          v2265 = *(int8x16_t *)(v1437 + 352);
          *(_QWORD *)&v1422 = vextq_s8(v2265, v2265, 8uLL).u64[0];
          v2203 = vextq_s8(v1407, v1407, 8uLL).u64[0];
          v2199 = vextq_s8(v1408, v1408, 8uLL).u64[0];
          v2195 = vextq_s8(v1409, v1409, 8uLL).u64[0];
          v1404 = *(int8x16_t *)(v1437 + 176);
          v1403 = *(int8x16_t *)(v1437 + 192);
          v2191 = vextq_s8(v1410, v1410, 8uLL).u64[0];
          v2233 = *(int8x16_t *)(v1437 + 272);
          v2237 = *(int8x16_t *)(v1437 + 256);
          v2257 = *(int8x16_t *)(v1437 + 208);
          v2261 = vextq_s8(v2233, v2233, 8uLL).u64[0];
          *(_QWORD *)&v2272 = vextq_s8(v2237, v2237, 8uLL).u64[0];
          v1402 = *(int8x16_t *)(v1437 + 144);
          v1401 = *(int8x16_t *)(v1437 + 160);
          v2224 = *(int8x16_t *)(v1437 + 224);
          v2229 = *(int8x16_t *)(v1437 + 240);
          *(_QWORD *)&v1406 = vextq_s8(v2229, v2229, 8uLL).u64[0];
          *(_QWORD *)&v1405 = vextq_s8(v2224, v2224, 8uLL).u64[0];
          *(_QWORD *)&v1423 = vextq_s8(v2257, v2257, 8uLL).u64[0];
          v1411 = vextq_s8(v1403, v1403, 8uLL).u64[0];
          v1412 = vextq_s8(v1404, v1404, 8uLL).u64[0];
          v1413 = vextq_s8(v1401, v1401, 8uLL).u64[0];
          v1414 = vextq_s8(v1402, v1402, 8uLL).u64[0];
          v2216 = *(int8x16_t *)(v1437 + 112);
          v2220 = *(int8x16_t *)(v1437 + 128);
          v2253 = vextq_s8(v2220, v2220, 8uLL).u64[0];
          *(_QWORD *)&v1400 = vextq_s8(v2216, v2216, 8uLL).u64[0];
          v1395 = *(int8x16_t *)(v1437 + 48);
          v2207 = *(int8x16_t *)(v1437 + 80);
          v2212 = *(int8x16_t *)(v1437 + 96);
          *(_QWORD *)&v1399 = vextq_s8(v2212, v2212, 8uLL).u64[0];
          *(_QWORD *)&v1398 = vextq_s8(v2207, v2207, 8uLL).u64[0];
          v2249 = *(int8x16_t *)(v1437 + 64);
          *(_QWORD *)&v1397 = vextq_s8(v2249, v2249, 8uLL).u64[0];
          v1393 = *(int8x16_t *)(v1437 + 16);
          v1396 = *(int8x16_t *)(v1437 + 32);
          v1415 = vextq_s8(v1395, v1395, 8uLL).u64[0];
          v1416 = vextq_s8(v1396, v1396, 8uLL).u64[0];
          v1394 = *(int8x16_t *)v1437;
          v1418 = vextq_s8(v1393, v1393, 8uLL).u64[0];
          v1419 = vextq_s8(v1394, v1394, 8uLL).u64[0];
        }
        else
        {
          v1394 = *(int8x16_t *)v1437;
          v1393 = *(int8x16_t *)(v1437 + 16);
          v1396 = *(int8x16_t *)(v1437 + 32);
          v1395 = *(int8x16_t *)(v1437 + 48);
          v1397 = *(_OWORD *)(v1437 + 72);
          v1398 = *(_OWORD *)(v1437 + 88);
          v1399 = *(_OWORD *)(v1437 + 104);
          v1400 = *(_OWORD *)(v1437 + 120);
          v1402 = *(int8x16_t *)(v1437 + 144);
          v1401 = *(int8x16_t *)(v1437 + 160);
          v1404 = *(int8x16_t *)(v1437 + 176);
          v1403 = *(int8x16_t *)(v1437 + 192);
          v2220.i64[0] = *(_QWORD *)(v1437 + 128);
          v1405 = *(_OWORD *)(v1437 + 232);
          v2216.i64[0] = *(_QWORD *)(v1437 + 112);
          v1406 = *(_OWORD *)(v1437 + 248);
          v2212.i64[0] = *(_QWORD *)(v1437 + 96);
          v2207.i64[0] = *(_QWORD *)(v1437 + 80);
          v2237.i64[0] = *(_QWORD *)(v1437 + 256);
          v2229.i64[0] = *(_QWORD *)(v1437 + 240);
          v2224.i64[0] = *(_QWORD *)(v1437 + 224);
          v2272 = *(_OWORD *)(v1437 + 264);
          v2233.i64[0] = *(_QWORD *)(v1437 + 272);
          v2284 = *(_OWORD *)(v1437 + 408);
          v2245.i64[0] = *(_QWORD *)(v1437 + 416);
          v2241.i64[0] = *(_QWORD *)(v1437 + 400);
          v1408 = *(int8x16_t *)(v1437 + 320);
          v1407 = *(int8x16_t *)(v1437 + 336);
          v2296.i64[0] = *(_QWORD *)(v1437 + 368);
          v2308.i64[0] = *(_QWORD *)(v1437 + 384);
          v2199 = vextq_s8(v1408, v1408, 8uLL).u64[0];
          v2203 = vextq_s8(v1407, v1407, 8uLL).u64[0];
          v1410 = *(int8x16_t *)(v1437 + 288);
          v1409 = *(int8x16_t *)(v1437 + 304);
          v2191 = vextq_s8(v1410, v1410, 8uLL).u64[0];
          v2195 = vextq_s8(v1409, v1409, 8uLL).u64[0];
          v2253 = *(_QWORD *)(v1437 + 136);
          v1411 = vextq_s8(v1403, v1403, 8uLL).u64[0];
          v2249.i64[0] = *(_QWORD *)(v1437 + 64);
          v1412 = vextq_s8(v1404, v1404, 8uLL).u64[0];
          v1413 = vextq_s8(v1401, v1401, 8uLL).u64[0];
          v2261 = *(_QWORD *)(v1437 + 280);
          v1414 = vextq_s8(v1402, v1402, 8uLL).u64[0];
          v2257.i64[0] = *(_QWORD *)(v1437 + 208);
          v1415 = vextq_s8(v1395, v1395, 8uLL).u64[0];
          v1416 = vextq_s8(v1396, v1396, 8uLL).u64[0];
          v1417 = *(_QWORD *)(v1437 + 424);
          v1418 = vextq_s8(v1393, v1393, 8uLL).u64[0];
          v1419 = vextq_s8(v1394, v1394, 8uLL).u64[0];
          v2265.i64[0] = *(_QWORD *)(v1437 + 352);
          v1420 = *(_OWORD *)(v1437 + 392);
          v1421 = *(_OWORD *)(v1437 + 376);
          v1422 = *(_OWORD *)(v1437 + 360);
          v1423 = *(_OWORD *)(v1437 + 216);
        }
        v1395.i64[1] = v1415;
        v1396.i64[1] = v1416;
        v1393.i64[1] = v1418;
        v1394.i64[1] = v1419;
        *((_QWORD *)&v1400 + 1) = v2220.i64[0];
        *((_QWORD *)&v1399 + 1) = v2216.i64[0];
        *((_QWORD *)&v1398 + 1) = v2212.i64[0];
        *((_QWORD *)&v1397 + 1) = v2207.i64[0];
        v1403.i64[1] = v1411;
        v1404.i64[1] = v1412;
        v1401.i64[1] = v1413;
        v1402.i64[1] = v1414;
        *(_QWORD *)&v1425 = v2272;
        *(_QWORD *)&v1424 = v2284;
        *((_QWORD *)&v1425 + 1) = v2233.i64[0];
        *((_QWORD *)&v1406 + 1) = v2237.i64[0];
        *((_QWORD *)&v1405 + 1) = v2229.i64[0];
        *((_QWORD *)&v1423 + 1) = v2224.i64[0];
        v1407.i64[1] = v2203;
        v1408.i64[1] = v2199;
        v1409.i64[1] = v2195;
        v1410.i64[1] = v2191;
        *((_QWORD *)&v1424 + 1) = v2245.i64[0];
        *((_QWORD *)&v1420 + 1) = v2241.i64[0];
        v1426 = *(unsigned int *)(a2 + 16);
        v1427 = *(_QWORD *)a2 + 8 * (v1391[1] + (_DWORD)v1426 * v1208[1]);
        *((_QWORD *)&v1421 + 1) = v2308.i64[0];
        *((_QWORD *)&v1422 + 1) = v2296.i64[0];
        *(int8x16_t *)v1427 = v1394;
        *(int8x16_t *)(v1427 + 16) = v1393;
        *(_QWORD *)(v1427 + 64) = v2249.i64[0];
        *(int8x16_t *)(v1427 + 32) = v1396;
        *(int8x16_t *)(v1427 + 48) = v1395;
        v1428 = v1427 + 8 * v1426;
        *(_OWORD *)v1428 = v1397;
        *(_OWORD *)(v1428 + 16) = v1398;
        *(_QWORD *)(v1428 + 64) = v2253;
        *(_OWORD *)(v1428 + 32) = v1399;
        *(_OWORD *)(v1428 + 48) = v1400;
        v1429 = (int8x16_t *)(v1427 + 16 * v1426);
        *v1429 = v1402;
        v1429[1] = v1401;
        v1429[4].i64[0] = v2257.i64[0];
        v1429[2] = v1404;
        v1429[3] = v1403;
        v1430 = v1427 + 24 * v1426;
        *(_OWORD *)v1430 = v1423;
        *(_OWORD *)(v1430 + 16) = v1405;
        *(_QWORD *)(v1430 + 64) = v2261;
        *(_OWORD *)(v1430 + 32) = v1406;
        *(_OWORD *)(v1430 + 48) = v1425;
        v1431 = (int8x16_t *)(v1427 + 32 * v1426);
        *v1431 = v1410;
        v1431[1] = v1409;
        v1431[4].i64[0] = v2265.i64[0];
        v1431[2] = v1408;
        v1431[3] = v1407;
        v1432 = v1427 + 40 * v1426;
        *(_OWORD *)v1432 = v1422;
        *(_OWORD *)(v1432 + 16) = v1421;
        *(_QWORD *)(v1432 + 64) = v1417;
        v1384 = v1433;
        *(_OWORD *)(v1432 + 32) = v1420;
        *(_OWORD *)(v1432 + 48) = v1424;
      }
      v1391 += 2;
    }
    v1208 += 2;
  }
  while (v1208 != v1209);
  v1202 = a3[3];
  v1203 = a3[4];
  v1211 = *(_DWORD **)(a4 + 96);
  v1212 = *(_DWORD **)(a4 + 104);
  if (v1202 == v1203 || v1211 == v1212)
    goto LABEL_1371;
  do
  {
LABEL_1378:
    v1442 = *(_QWORD *)(result + 5992);
    v1443 = (*(_DWORD *)(result + 6016) * *v1211);
    v1444 = (uint64_t *)(v1442 + 8 * v1443);
    v1445 = *(_DWORD *)(result + 5912);
    v1446 = v1443 + v1445;
    v1447 = (uint64_t *)(v1442 + 8 * v1446);
    if (v1445)
    {
      if (*v1444 == -1)
      {
        v1448 = 8 * v1446 - 8 * v1443 - 8;
        v1449 = 1;
        v1450 = v1444;
        while (1)
        {
          v1445 = v1449;
          if (!v1448)
            break;
          v1444 = v1450 + 1;
          v1451 = v1450[1];
          ++v1449;
          v1448 -= 8;
          ++v1450;
          if (v1451 != -1)
            goto LABEL_1386;
        }
        v1444 = v1447;
      }
      else
      {
        v1445 = 0;
      }
    }
LABEL_1386:
    v1452 = a3[3];
    v1453 = a3[4];
    while (v1452 != v1453 && v1444 != v1447)
    {
      v1483 = *v1452;
      if (*v1452 > v1445)
      {
        v1484 = v1444 + 1;
        while (v1484 != v1447)
        {
          ++v1445;
          v1485 = *v1484++;
          if (v1485 != -1 && v1483 <= v1445)
          {
            v1444 = v1484 - 1;
            goto LABEL_1400;
          }
        }
        break;
      }
LABEL_1400:
      if (v1483 == v1445)
      {
        v1487 = *(_QWORD *)(result + 5920) + 8 * *v1444;
        if (v1487 == *(_QWORD *)a2)
        {
          v1463 = *(int8x16_t *)(v1487 + 176);
          v1462 = *(int8x16_t *)(v1487 + 192);
          v1461 = *(int8x16_t *)(v1487 + 144);
          v1460 = *(int8x16_t *)(v1487 + 160);
          v1465 = *(int8x16_t *)(v1487 + 112);
          v1464 = *(int8x16_t *)(v1487 + 128);
          v1467 = *(int8x16_t *)(v1487 + 80);
          v1466 = *(int8x16_t *)(v1487 + 96);
          v1471 = *(int8x16_t *)(v1487 + 48);
          v1477 = *(int8x16_t *)(v1487 + 64);
          v1468 = vextq_s8(v1462, v1462, 8uLL).u64[0];
          v1469 = vextq_s8(v1463, v1463, 8uLL).u64[0];
          v1470 = vextq_s8(v1460, v1460, 8uLL).u64[0];
          v1473 = vextq_s8(v1461, v1461, 8uLL).u64[0];
          v1474 = vextq_s8(v1464, v1464, 8uLL).u64[0];
          *(_QWORD *)&v1459 = vextq_s8(v1465, v1465, 8uLL).u64[0];
          *(_QWORD *)&v1458 = vextq_s8(v1466, v1466, 8uLL).u64[0];
          *(_QWORD *)&v1457 = vextq_s8(v1467, v1467, 8uLL).u64[0];
          v1454 = *(int8x16_t *)(v1487 + 16);
          v1472 = *(int8x16_t *)(v1487 + 32);
          *(_QWORD *)&v1456 = vextq_s8(v1477, v1477, 8uLL).u64[0];
          v1475 = vextq_s8(v1471, v1471, 8uLL).u64[0];
          v1476 = vextq_s8(v1472, v1472, 8uLL).u64[0];
          v1455 = *(int8x16_t *)v1487;
        }
        else
        {
          v1455 = *(int8x16_t *)v1487;
          v1454 = *(int8x16_t *)(v1487 + 16);
          v1456 = *(_OWORD *)(v1487 + 72);
          v1457 = *(_OWORD *)(v1487 + 88);
          v1458 = *(_OWORD *)(v1487 + 104);
          v1459 = *(_OWORD *)(v1487 + 120);
          v1461 = *(int8x16_t *)(v1487 + 144);
          v1460 = *(int8x16_t *)(v1487 + 160);
          v1463 = *(int8x16_t *)(v1487 + 176);
          v1462 = *(int8x16_t *)(v1487 + 192);
          v1464.i64[0] = *(_QWORD *)(v1487 + 128);
          v1465.i64[0] = *(_QWORD *)(v1487 + 112);
          v1466.i64[0] = *(_QWORD *)(v1487 + 96);
          v1467.i64[0] = *(_QWORD *)(v1487 + 80);
          v1468 = vextq_s8(v1462, v1462, 8uLL).u64[0];
          v1469 = vextq_s8(v1463, v1463, 8uLL).u64[0];
          v1470 = vextq_s8(v1460, v1460, 8uLL).u64[0];
          v1472 = *(int8x16_t *)(v1487 + 32);
          v1471 = *(int8x16_t *)(v1487 + 48);
          v1473 = vextq_s8(v1461, v1461, 8uLL).u64[0];
          v1474 = *(_QWORD *)(v1487 + 136);
          v1475 = vextq_s8(v1471, v1471, 8uLL).u64[0];
          v1476 = vextq_s8(v1472, v1472, 8uLL).u64[0];
          v1477.i64[0] = *(_QWORD *)(v1487 + 64);
        }
        v1478 = *(_QWORD *)(v1487 + 208);
        v1479 = *(unsigned int *)(a2 + 16);
        v1480 = *(_QWORD *)a2 + 8 * (v1452[1] + (_DWORD)v1479 * v1211[1]);
        v1471.i64[1] = v1475;
        v1472.i64[1] = v1476;
        v1454.i64[1] = vextq_s8(v1454, v1454, 8uLL).u64[0];
        v1455.i64[1] = vextq_s8(v1455, v1455, 8uLL).u64[0];
        *((_QWORD *)&v1459 + 1) = v1464.i64[0];
        *((_QWORD *)&v1458 + 1) = v1465.i64[0];
        *((_QWORD *)&v1457 + 1) = v1466.i64[0];
        *((_QWORD *)&v1456 + 1) = v1467.i64[0];
        v1462.i64[1] = v1468;
        v1463.i64[1] = v1469;
        v1460.i64[1] = v1470;
        v1461.i64[1] = v1473;
        *(int8x16_t *)v1480 = v1455;
        *(int8x16_t *)(v1480 + 16) = v1454;
        *(_QWORD *)(v1480 + 64) = v1477.i64[0];
        *(int8x16_t *)(v1480 + 32) = v1472;
        *(int8x16_t *)(v1480 + 48) = v1471;
        v1481 = v1480 + 8 * v1479;
        *(_OWORD *)v1481 = v1456;
        *(_OWORD *)(v1481 + 16) = v1457;
        *(_QWORD *)(v1481 + 64) = v1474;
        *(_OWORD *)(v1481 + 32) = v1458;
        *(_OWORD *)(v1481 + 48) = v1459;
        v1482 = (int8x16_t *)(v1480 + 16 * v1479);
        *v1482 = v1461;
        v1482[1] = v1460;
        v1482[4].i64[0] = v1478;
        v1445 = v1483;
        v1482[2] = v1463;
        v1482[3] = v1462;
      }
      v1452 += 2;
    }
    v1211 += 2;
  }
  while (v1211 != v1212);
  v1202 = a3[3];
  v1203 = a3[4];
  v1439 = *(_DWORD **)(a4 + 120);
  v1440 = *(_DWORD **)(a4 + 128);
  if (v1202 == v1203 || v1439 == v1440)
    goto LABEL_1408;
  do
  {
LABEL_1425:
    v1498 = *(_QWORD *)(result + 7432);
    v1499 = (*(_DWORD *)(result + 7456) * *v1439);
    v1500 = (uint64_t *)(v1498 + 8 * v1499);
    v1501 = *(_DWORD *)(result + 7352);
    v1502 = (v1499 + v1501);
    v1503 = (uint64_t *)(v1498 + 8 * v1502);
    if (v1501 && *v1500 == -1)
    {
      v1517 = 8 * v1502 - 8 * v1499 - 8;
      v1518 = 1;
      v1519 = v1500;
      while (1)
      {
        v1504 = v1518;
        if (!v1517)
          break;
        v1500 = v1519 + 1;
        v1520 = v1519[1];
        ++v1518;
        v1517 -= 8;
        ++v1519;
        if (v1520 != -1)
          goto LABEL_1428;
      }
      v1500 = v1503;
    }
    else
    {
      v1504 = 0;
    }
LABEL_1428:
    v1505 = a3[3];
    v1506 = a3[4];
    while (v1505 != v1506 && v1500 != v1503)
    {
      v1507 = *v1505;
      if (*v1505 > v1504)
      {
        v1508 = v1500 + 1;
        while (v1508 != v1503)
        {
          ++v1504;
          v1509 = *v1508++;
          if (v1509 != -1 && v1507 <= v1504)
          {
            v1500 = v1508 - 1;
            goto LABEL_1440;
          }
        }
        break;
      }
LABEL_1440:
      if (v1507 == v1504)
      {
        v1511 = *(_QWORD *)(result + 7360) + 8 * *v1500;
        v1512 = *(_QWORD *)a2 + 8 * (v1505[1] + *(_DWORD *)(a2 + 16) * v1439[1]);
        v1513 = *(_QWORD *)(v1511 + 64);
        v1514 = *(_OWORD *)(v1511 + 48);
        v1515 = *(_OWORD *)v1511;
        v1516 = *(_OWORD *)(v1511 + 16);
        *(_OWORD *)(v1512 + 32) = *(_OWORD *)(v1511 + 32);
        *(_OWORD *)(v1512 + 48) = v1514;
        *(_QWORD *)(v1512 + 64) = v1513;
        *(_OWORD *)v1512 = v1515;
        *(_OWORD *)(v1512 + 16) = v1516;
        v1504 = v1507;
      }
      v1505 += 2;
    }
    v1439 += 2;
  }
  while (v1439 != v1440);
  v1202 = a3[3];
  v1203 = a3[4];
  v1489 = *(_DWORD **)(a4 + 144);
  v1490 = *(_DWORD **)(a4 + 152);
  if (v1202 == v1203 || v1489 == v1490)
    goto LABEL_1413;
  do
  {
LABEL_1453:
    v1522 = *(_QWORD *)(result + 8872);
    v1523 = (*(_DWORD *)(result + 8896) * *v1489);
    v1524 = (uint64_t *)(v1522 + 8 * v1523);
    v1525 = *(_DWORD *)(result + 8792);
    v1526 = v1523 + v1525;
    v1527 = (uint64_t *)(v1522 + 8 * v1526);
    if (v1525)
    {
      if (*v1524 == -1)
      {
        v1528 = 8 * v1526 - 8 * v1523 - 8;
        v1529 = 1;
        v1530 = v1524;
        while (1)
        {
          v1525 = v1529;
          if (!v1528)
            break;
          v1524 = v1530 + 1;
          v1531 = v1530[1];
          ++v1529;
          v1528 -= 8;
          ++v1530;
          if (v1531 != -1)
            goto LABEL_1461;
        }
        v1524 = v1527;
      }
      else
      {
        v1525 = 0;
      }
    }
LABEL_1461:
    v1532 = a3[3];
    v1533 = a3[4];
    while (v1532 != v1533 && v1524 != v1527)
    {
      v1571 = *v1532;
      if (*v1532 > v1525)
      {
        v1572 = v1524 + 1;
        while (v1572 != v1527)
        {
          ++v1525;
          v1573 = *v1572++;
          if (v1573 != -1 && v1571 <= v1525)
          {
            v1524 = v1572 - 1;
            goto LABEL_1475;
          }
        }
        break;
      }
LABEL_1475:
      if (v1571 == v1525)
      {
        v1575 = *(_QWORD *)(result + 8800) + 8 * *v1524;
        if (v1575 == *(_QWORD *)a2)
        {
          v1564 = *(int8x16_t *)(v1575 + 272);
          v1565 = *(int8x16_t *)(v1575 + 224);
          v1539 = *(int8x16_t *)(v1575 + 192);
          v1559 = *(int8x16_t *)(v1575 + 208);
          v1546 = *(int8x16_t *)(v1575 + 160);
          v1540 = *(int8x16_t *)(v1575 + 176);
          v1551 = *(int8x16_t *)(v1575 + 128);
          v1547 = *(int8x16_t *)(v1575 + 144);
          v2273 = vextq_s8(v1564, v1564, 8uLL).u64[0];
          v2285 = *(int8x16_t *)(v1575 + 240);
          v2297 = *(int8x16_t *)(v1575 + 256);
          v1562.i64[0] = vextq_s8(v2297, v2297, 8uLL).u64[0];
          v1542.i64[0] = vextq_s8(v2285, v2285, 8uLL).u64[0];
          v1543.i64[0] = vextq_s8(v1565, v1565, 8uLL).u64[0];
          v1541.i64[0] = vextq_s8(v1559, v1559, 8uLL).u64[0];
          v1544 = vextq_s8(v1539, v1539, 8uLL).u64[0];
          v1545 = vextq_s8(v1540, v1540, 8uLL).u64[0];
          v1548 = vextq_s8(v1546, v1546, 8uLL).u64[0];
          v1555 = *(int8x16_t *)(v1575 + 96);
          v1553 = *(int8x16_t *)(v1575 + 112);
          v1550 = vextq_s8(v1547, v1547, 8uLL).u64[0];
          v1557 = vextq_s8(v1551, v1551, 8uLL).u64[0];
          v1549.i64[0] = vextq_s8(v1553, v1553, 8uLL).u64[0];
          v1556 = *(int8x16_t *)(v1575 + 80);
          v1552.i64[0] = vextq_s8(v1555, v1555, 8uLL).u64[0];
          v1554.i64[0] = vextq_s8(v1556, v1556, 8uLL).u64[0];
          v2309 = *(int8x16_t *)(v1575 + 64);
          v1538.i64[0] = vextq_s8(v2309, v2309, 8uLL).u64[0];
          v1536 = *(int8x16_t *)(v1575 + 32);
          v1537 = *(int8x16_t *)(v1575 + 48);
          v1558 = vextq_s8(v1537, v1537, 8uLL).u64[0];
          v1560 = vextq_s8(v1536, v1536, 8uLL).u64[0];
          v1535 = *(int8x16_t *)v1575;
          v1534 = *(int8x16_t *)(v1575 + 16);
          v1561 = vextq_s8(v1534, v1534, 8uLL).u64[0];
          v1563 = vextq_s8(v1535, v1535, 8uLL).u64[0];
        }
        else
        {
          v2309.i64[0] = *(_QWORD *)(v1575 + 64);
          v1535 = *(int8x16_t *)v1575;
          v1534 = *(int8x16_t *)(v1575 + 16);
          v1536 = *(int8x16_t *)(v1575 + 32);
          v1537 = *(int8x16_t *)(v1575 + 48);
          v1538 = *(int8x16_t *)(v1575 + 72);
          v1540 = *(int8x16_t *)(v1575 + 176);
          v1539 = *(int8x16_t *)(v1575 + 192);
          v1541 = *(int8x16_t *)(v1575 + 216);
          v1542 = *(int8x16_t *)(v1575 + 248);
          v1543 = *(int8x16_t *)(v1575 + 232);
          v2285.i64[0] = vextq_s8(v1543, v1543, 8uLL).u64[0];
          v2297.i64[0] = vextq_s8(v1542, v1542, 8uLL).u64[0];
          v1544 = vextq_s8(v1539, v1539, 8uLL).u64[0];
          v1545 = vextq_s8(v1540, v1540, 8uLL).u64[0];
          v1547 = *(int8x16_t *)(v1575 + 144);
          v1546 = *(int8x16_t *)(v1575 + 160);
          v1548 = vextq_s8(v1546, v1546, 8uLL).u64[0];
          v1549 = *(int8x16_t *)(v1575 + 120);
          v1550 = vextq_s8(v1547, v1547, 8uLL).u64[0];
          v1551.i64[0] = vextq_s8(v1549, v1549, 8uLL).u64[0];
          v1552 = *(int8x16_t *)(v1575 + 104);
          v1553.i64[0] = vextq_s8(v1552, v1552, 8uLL).u64[0];
          v1554 = *(int8x16_t *)(v1575 + 88);
          v1555.i64[0] = vextq_s8(v1554, v1554, 8uLL).u64[0];
          v1556.i64[0] = vextq_s8(v1538, v1538, 8uLL).u64[0];
          v1557 = *(_QWORD *)(v1575 + 136);
          v1558 = vextq_s8(v1537, v1537, 8uLL).u64[0];
          v1559.i64[0] = *(_QWORD *)(v1575 + 208);
          v1560 = vextq_s8(v1536, v1536, 8uLL).u64[0];
          v1561 = vextq_s8(v1534, v1534, 8uLL).u64[0];
          v1562 = *(int8x16_t *)(v1575 + 264);
          v1563 = vextq_s8(v1535, v1535, 8uLL).u64[0];
          v1564.i64[0] = vextq_s8(v1562, v1562, 8uLL).u64[0];
          v2273 = *(_QWORD *)(v1575 + 280);
          v1565.i64[0] = vextq_s8(v1541, v1541, 8uLL).u64[0];
        }
        v1537.i64[1] = v1558;
        v1536.i64[1] = v1560;
        v1534.i64[1] = v1561;
        v1535.i64[1] = v1563;
        v1566 = *(unsigned int *)(a2 + 16);
        v1567 = *(_QWORD *)a2 + 8 * (v1532[1] + (_DWORD)v1566 * v1489[1]);
        v1549.i64[1] = v1551.i64[0];
        v1552.i64[1] = v1553.i64[0];
        v1554.i64[1] = v1555.i64[0];
        v1538.i64[1] = v1556.i64[0];
        v1539.i64[1] = v1544;
        v1540.i64[1] = v1545;
        v1546.i64[1] = v1548;
        v1547.i64[1] = v1550;
        v1562.i64[1] = v1564.i64[0];
        v1542.i64[1] = v2297.i64[0];
        v1543.i64[1] = v2285.i64[0];
        v1541.i64[1] = v1565.i64[0];
        *(int8x16_t *)v1567 = v1535;
        *(int8x16_t *)(v1567 + 16) = v1534;
        *(_QWORD *)(v1567 + 64) = v2309.i64[0];
        *(int8x16_t *)(v1567 + 32) = v1536;
        *(int8x16_t *)(v1567 + 48) = v1537;
        v1568 = (int8x16_t *)(v1567 + 8 * v1566);
        *v1568 = v1538;
        v1568[1] = v1554;
        v1568[4].i64[0] = v1557;
        v1568[2] = v1552;
        v1568[3] = v1549;
        v1569 = (int8x16_t *)(v1567 + 16 * v1566);
        *v1569 = v1547;
        v1569[1] = v1546;
        v1569[4].i64[0] = v1559.i64[0];
        v1569[2] = v1540;
        v1569[3] = v1539;
        v1570 = (int8x16_t *)(v1567 + 24 * v1566);
        *v1570 = v1541;
        v1570[1] = v1543;
        v1570[4].i64[0] = v2273;
        v1525 = v1571;
        v1570[2] = v1542;
        v1570[3] = v1562;
      }
      v1532 += 2;
    }
    v1489 += 2;
  }
  while (v1489 != v1490);
  v1202 = a3[3];
  v1203 = a3[4];
  v1492 = *(_DWORD **)(a4 + 168);
  v1493 = *(_DWORD **)(a4 + 176);
  if (v1202 == v1203 || v1492 == v1493)
    goto LABEL_1418;
  do
  {
LABEL_1484:
    v1577 = *(_QWORD *)(result + 10312);
    v1578 = (*(_DWORD *)(result + 10336) * *v1492);
    v1579 = (uint64_t *)(v1577 + 8 * v1578);
    v1580 = *(_DWORD *)(result + 10232);
    v1581 = v1578 + v1580;
    v1582 = (uint64_t *)(v1577 + 8 * v1581);
    if (v1580)
    {
      if (*v1579 == -1)
      {
        v1583 = 8 * v1581 - 8 * v1578 - 8;
        v1584 = 1;
        v1585 = v1579;
        while (1)
        {
          v1580 = v1584;
          if (!v1583)
            break;
          v1579 = v1585 + 1;
          v1586 = v1585[1];
          ++v1584;
          v1583 -= 8;
          ++v1585;
          if (v1586 != -1)
            goto LABEL_1492;
        }
        v1579 = v1582;
      }
      else
      {
        v1580 = 0;
      }
    }
LABEL_1492:
    v1587 = a3[3];
    v1588 = a3[4];
    while (v1587 != v1588 && v1579 != v1582)
    {
      v1626 = *v1587;
      if (*v1587 > v1580)
      {
        v1627 = v1579 + 1;
        while (v1627 != v1582)
        {
          ++v1580;
          v1628 = *v1627++;
          if (v1628 != -1 && v1626 <= v1580)
          {
            v1579 = v1627 - 1;
            goto LABEL_1506;
          }
        }
        break;
      }
LABEL_1506:
      if (v1626 == v1580)
      {
        v1630 = *(_QWORD *)(result + 10240) + 8 * *v1579;
        if (v1630 == *(_QWORD *)a2)
        {
          v1619 = *(int8x16_t *)(v1630 + 272);
          v1620 = *(int8x16_t *)(v1630 + 224);
          v1594 = *(int8x16_t *)(v1630 + 192);
          v1614 = *(int8x16_t *)(v1630 + 208);
          v1601 = *(int8x16_t *)(v1630 + 160);
          v1595 = *(int8x16_t *)(v1630 + 176);
          v1606 = *(int8x16_t *)(v1630 + 128);
          v1602 = *(int8x16_t *)(v1630 + 144);
          v2274 = vextq_s8(v1619, v1619, 8uLL).u64[0];
          v2286 = *(int8x16_t *)(v1630 + 240);
          v2298 = *(int8x16_t *)(v1630 + 256);
          v1617.i64[0] = vextq_s8(v2298, v2298, 8uLL).u64[0];
          v1597.i64[0] = vextq_s8(v2286, v2286, 8uLL).u64[0];
          v1598.i64[0] = vextq_s8(v1620, v1620, 8uLL).u64[0];
          v1596.i64[0] = vextq_s8(v1614, v1614, 8uLL).u64[0];
          v1599 = vextq_s8(v1594, v1594, 8uLL).u64[0];
          v1600 = vextq_s8(v1595, v1595, 8uLL).u64[0];
          v1603 = vextq_s8(v1601, v1601, 8uLL).u64[0];
          v1610 = *(int8x16_t *)(v1630 + 96);
          v1608 = *(int8x16_t *)(v1630 + 112);
          v1605 = vextq_s8(v1602, v1602, 8uLL).u64[0];
          v1612 = vextq_s8(v1606, v1606, 8uLL).u64[0];
          v1604.i64[0] = vextq_s8(v1608, v1608, 8uLL).u64[0];
          v1611 = *(int8x16_t *)(v1630 + 80);
          v1607.i64[0] = vextq_s8(v1610, v1610, 8uLL).u64[0];
          v1609.i64[0] = vextq_s8(v1611, v1611, 8uLL).u64[0];
          v2310 = *(int8x16_t *)(v1630 + 64);
          v1593.i64[0] = vextq_s8(v2310, v2310, 8uLL).u64[0];
          v1591 = *(int8x16_t *)(v1630 + 32);
          v1592 = *(int8x16_t *)(v1630 + 48);
          v1613 = vextq_s8(v1592, v1592, 8uLL).u64[0];
          v1615 = vextq_s8(v1591, v1591, 8uLL).u64[0];
          v1590 = *(int8x16_t *)v1630;
          v1589 = *(int8x16_t *)(v1630 + 16);
          v1616 = vextq_s8(v1589, v1589, 8uLL).u64[0];
          v1618 = vextq_s8(v1590, v1590, 8uLL).u64[0];
        }
        else
        {
          v2310.i64[0] = *(_QWORD *)(v1630 + 64);
          v1590 = *(int8x16_t *)v1630;
          v1589 = *(int8x16_t *)(v1630 + 16);
          v1591 = *(int8x16_t *)(v1630 + 32);
          v1592 = *(int8x16_t *)(v1630 + 48);
          v1593 = *(int8x16_t *)(v1630 + 72);
          v1595 = *(int8x16_t *)(v1630 + 176);
          v1594 = *(int8x16_t *)(v1630 + 192);
          v1596 = *(int8x16_t *)(v1630 + 216);
          v1597 = *(int8x16_t *)(v1630 + 248);
          v1598 = *(int8x16_t *)(v1630 + 232);
          v2286.i64[0] = vextq_s8(v1598, v1598, 8uLL).u64[0];
          v2298.i64[0] = vextq_s8(v1597, v1597, 8uLL).u64[0];
          v1599 = vextq_s8(v1594, v1594, 8uLL).u64[0];
          v1600 = vextq_s8(v1595, v1595, 8uLL).u64[0];
          v1602 = *(int8x16_t *)(v1630 + 144);
          v1601 = *(int8x16_t *)(v1630 + 160);
          v1603 = vextq_s8(v1601, v1601, 8uLL).u64[0];
          v1604 = *(int8x16_t *)(v1630 + 120);
          v1605 = vextq_s8(v1602, v1602, 8uLL).u64[0];
          v1606.i64[0] = vextq_s8(v1604, v1604, 8uLL).u64[0];
          v1607 = *(int8x16_t *)(v1630 + 104);
          v1608.i64[0] = vextq_s8(v1607, v1607, 8uLL).u64[0];
          v1609 = *(int8x16_t *)(v1630 + 88);
          v1610.i64[0] = vextq_s8(v1609, v1609, 8uLL).u64[0];
          v1611.i64[0] = vextq_s8(v1593, v1593, 8uLL).u64[0];
          v1612 = *(_QWORD *)(v1630 + 136);
          v1613 = vextq_s8(v1592, v1592, 8uLL).u64[0];
          v1614.i64[0] = *(_QWORD *)(v1630 + 208);
          v1615 = vextq_s8(v1591, v1591, 8uLL).u64[0];
          v1616 = vextq_s8(v1589, v1589, 8uLL).u64[0];
          v1617 = *(int8x16_t *)(v1630 + 264);
          v1618 = vextq_s8(v1590, v1590, 8uLL).u64[0];
          v1619.i64[0] = vextq_s8(v1617, v1617, 8uLL).u64[0];
          v2274 = *(_QWORD *)(v1630 + 280);
          v1620.i64[0] = vextq_s8(v1596, v1596, 8uLL).u64[0];
        }
        v1592.i64[1] = v1613;
        v1591.i64[1] = v1615;
        v1589.i64[1] = v1616;
        v1590.i64[1] = v1618;
        v1621 = *(unsigned int *)(a2 + 16);
        v1622 = *(_QWORD *)a2 + 8 * (v1587[1] + (_DWORD)v1621 * v1492[1]);
        v1604.i64[1] = v1606.i64[0];
        v1607.i64[1] = v1608.i64[0];
        v1609.i64[1] = v1610.i64[0];
        v1593.i64[1] = v1611.i64[0];
        v1594.i64[1] = v1599;
        v1595.i64[1] = v1600;
        v1601.i64[1] = v1603;
        v1602.i64[1] = v1605;
        v1617.i64[1] = v1619.i64[0];
        v1597.i64[1] = v2298.i64[0];
        v1598.i64[1] = v2286.i64[0];
        v1596.i64[1] = v1620.i64[0];
        *(int8x16_t *)v1622 = v1590;
        *(int8x16_t *)(v1622 + 16) = v1589;
        *(_QWORD *)(v1622 + 64) = v2310.i64[0];
        *(int8x16_t *)(v1622 + 32) = v1591;
        *(int8x16_t *)(v1622 + 48) = v1592;
        v1623 = (int8x16_t *)(v1622 + 8 * v1621);
        *v1623 = v1593;
        v1623[1] = v1609;
        v1623[4].i64[0] = v1612;
        v1623[2] = v1607;
        v1623[3] = v1604;
        v1624 = (int8x16_t *)(v1622 + 16 * v1621);
        *v1624 = v1602;
        v1624[1] = v1601;
        v1624[4].i64[0] = v1614.i64[0];
        v1624[2] = v1595;
        v1624[3] = v1594;
        v1625 = (int8x16_t *)(v1622 + 24 * v1621);
        *v1625 = v1596;
        v1625[1] = v1598;
        v1625[4].i64[0] = v2274;
        v1580 = v1626;
        v1625[2] = v1597;
        v1625[3] = v1617;
      }
      v1587 += 2;
    }
    v1492 += 2;
  }
  while (v1492 != v1493);
  v1202 = a3[3];
  v1203 = a3[4];
  v1495 = *(_DWORD **)(a4 + 192);
  v1496 = *(_DWORD **)(a4 + 200);
  if (v1202 == v1203 || v1495 == v1496)
    goto LABEL_1514;
  do
  {
LABEL_1521:
    v1635 = *(_QWORD *)(result + 11752);
    v1636 = (*(_DWORD *)(result + 11776) * *v1495);
    v1637 = (uint64_t *)(v1635 + 8 * v1636);
    v1638 = *(_DWORD *)(result + 11672);
    v1639 = v1636 + v1638;
    v1640 = (uint64_t *)(v1635 + 8 * v1639);
    if (v1638)
    {
      if (*v1637 == -1)
      {
        v1641 = 8 * v1639 - 8 * v1636 - 8;
        v1642 = 1;
        v1643 = v1637;
        while (1)
        {
          v1638 = v1642;
          if (!v1641)
            break;
          v1637 = v1643 + 1;
          v1644 = v1643[1];
          ++v1642;
          v1641 -= 8;
          ++v1643;
          if (v1644 != -1)
            goto LABEL_1529;
        }
        v1637 = v1640;
      }
      else
      {
        v1638 = 0;
      }
    }
LABEL_1529:
    v1645 = a3[3];
    v1646 = a3[4];
    while (v1645 != v1646 && v1637 != v1640)
    {
      v1676 = *v1645;
      if (*v1645 > v1638)
      {
        v1677 = v1637 + 1;
        while (v1677 != v1640)
        {
          ++v1638;
          v1678 = *v1677++;
          if (v1678 != -1 && v1676 <= v1638)
          {
            v1637 = v1677 - 1;
            goto LABEL_1543;
          }
        }
        break;
      }
LABEL_1543:
      if (v1676 == v1638)
      {
        v1680 = *(_QWORD *)(result + 11680) + 8 * *v1637;
        if (v1680 == *(_QWORD *)a2)
        {
          v1656 = *(int8x16_t *)(v1680 + 176);
          v1655 = *(int8x16_t *)(v1680 + 192);
          v1654 = *(int8x16_t *)(v1680 + 144);
          v1653 = *(int8x16_t *)(v1680 + 160);
          v1658 = *(int8x16_t *)(v1680 + 112);
          v1657 = *(int8x16_t *)(v1680 + 128);
          v1660 = *(int8x16_t *)(v1680 + 80);
          v1659 = *(int8x16_t *)(v1680 + 96);
          v1664 = *(int8x16_t *)(v1680 + 48);
          v1670 = *(int8x16_t *)(v1680 + 64);
          v1661 = vextq_s8(v1655, v1655, 8uLL).u64[0];
          v1662 = vextq_s8(v1656, v1656, 8uLL).u64[0];
          v1663 = vextq_s8(v1653, v1653, 8uLL).u64[0];
          v1666 = vextq_s8(v1654, v1654, 8uLL).u64[0];
          v1667 = vextq_s8(v1657, v1657, 8uLL).u64[0];
          *(_QWORD *)&v1652 = vextq_s8(v1658, v1658, 8uLL).u64[0];
          *(_QWORD *)&v1651 = vextq_s8(v1659, v1659, 8uLL).u64[0];
          *(_QWORD *)&v1650 = vextq_s8(v1660, v1660, 8uLL).u64[0];
          v1647 = *(int8x16_t *)(v1680 + 16);
          v1665 = *(int8x16_t *)(v1680 + 32);
          *(_QWORD *)&v1649 = vextq_s8(v1670, v1670, 8uLL).u64[0];
          v1668 = vextq_s8(v1664, v1664, 8uLL).u64[0];
          v1669 = vextq_s8(v1665, v1665, 8uLL).u64[0];
          v1648 = *(int8x16_t *)v1680;
        }
        else
        {
          v1648 = *(int8x16_t *)v1680;
          v1647 = *(int8x16_t *)(v1680 + 16);
          v1649 = *(_OWORD *)(v1680 + 72);
          v1650 = *(_OWORD *)(v1680 + 88);
          v1651 = *(_OWORD *)(v1680 + 104);
          v1652 = *(_OWORD *)(v1680 + 120);
          v1654 = *(int8x16_t *)(v1680 + 144);
          v1653 = *(int8x16_t *)(v1680 + 160);
          v1656 = *(int8x16_t *)(v1680 + 176);
          v1655 = *(int8x16_t *)(v1680 + 192);
          v1657.i64[0] = *(_QWORD *)(v1680 + 128);
          v1658.i64[0] = *(_QWORD *)(v1680 + 112);
          v1659.i64[0] = *(_QWORD *)(v1680 + 96);
          v1660.i64[0] = *(_QWORD *)(v1680 + 80);
          v1661 = vextq_s8(v1655, v1655, 8uLL).u64[0];
          v1662 = vextq_s8(v1656, v1656, 8uLL).u64[0];
          v1663 = vextq_s8(v1653, v1653, 8uLL).u64[0];
          v1665 = *(int8x16_t *)(v1680 + 32);
          v1664 = *(int8x16_t *)(v1680 + 48);
          v1666 = vextq_s8(v1654, v1654, 8uLL).u64[0];
          v1667 = *(_QWORD *)(v1680 + 136);
          v1668 = vextq_s8(v1664, v1664, 8uLL).u64[0];
          v1669 = vextq_s8(v1665, v1665, 8uLL).u64[0];
          v1670.i64[0] = *(_QWORD *)(v1680 + 64);
        }
        v1671 = *(_QWORD *)(v1680 + 208);
        v1672 = *(unsigned int *)(a2 + 16);
        v1673 = *(_QWORD *)a2 + 8 * (v1645[1] + (_DWORD)v1672 * v1495[1]);
        v1664.i64[1] = v1668;
        v1665.i64[1] = v1669;
        v1647.i64[1] = vextq_s8(v1647, v1647, 8uLL).u64[0];
        v1648.i64[1] = vextq_s8(v1648, v1648, 8uLL).u64[0];
        *((_QWORD *)&v1652 + 1) = v1657.i64[0];
        *((_QWORD *)&v1651 + 1) = v1658.i64[0];
        *((_QWORD *)&v1650 + 1) = v1659.i64[0];
        *((_QWORD *)&v1649 + 1) = v1660.i64[0];
        v1655.i64[1] = v1661;
        v1656.i64[1] = v1662;
        v1653.i64[1] = v1663;
        v1654.i64[1] = v1666;
        *(int8x16_t *)v1673 = v1648;
        *(int8x16_t *)(v1673 + 16) = v1647;
        *(_QWORD *)(v1673 + 64) = v1670.i64[0];
        *(int8x16_t *)(v1673 + 32) = v1665;
        *(int8x16_t *)(v1673 + 48) = v1664;
        v1674 = v1673 + 8 * v1672;
        *(_OWORD *)v1674 = v1649;
        *(_OWORD *)(v1674 + 16) = v1650;
        *(_QWORD *)(v1674 + 64) = v1667;
        *(_OWORD *)(v1674 + 32) = v1651;
        *(_OWORD *)(v1674 + 48) = v1652;
        v1675 = (int8x16_t *)(v1673 + 16 * v1672);
        *v1675 = v1654;
        v1675[1] = v1653;
        v1675[4].i64[0] = v1671;
        v1638 = v1676;
        v1675[2] = v1656;
        v1675[3] = v1655;
      }
      v1645 += 2;
    }
    v1495 += 2;
  }
  while (v1495 != v1496);
  v1632 = *(_DWORD **)(a4 + 216);
  v1633 = *(_DWORD **)(a4 + 224);
  if (a3[3] != a3[4] && v1632 != v1633)
  {
    do
    {
LABEL_1578:
      v1699 = *(_QWORD *)(result + 13192);
      v1700 = (*(_DWORD *)(result + 13216) * *v1632);
      v1701 = (uint64_t *)(v1699 + 8 * v1700);
      v1702 = *(_DWORD *)(result + 13112);
      v1703 = v1700 + v1702;
      v1704 = (uint64_t *)(v1699 + 8 * v1703);
      if (v1702)
      {
        if (*v1701 == -1)
        {
          v1705 = 8 * v1703 - 8 * v1700 - 8;
          v1706 = 1;
          v1707 = v1701;
          while (1)
          {
            v1702 = v1706;
            if (!v1705)
              break;
            v1701 = v1707 + 1;
            v1708 = v1707[1];
            ++v1706;
            v1705 -= 8;
            ++v1707;
            if (v1708 != -1)
              goto LABEL_1586;
          }
          v1701 = v1704;
        }
        else
        {
          v1702 = 0;
        }
      }
LABEL_1586:
      v1709 = a3[3];
      v1710 = a3[4];
      while (v1709 != v1710 && v1701 != v1704)
      {
        v1740 = *v1709;
        if (*v1709 > v1702)
        {
          v1741 = v1701 + 1;
          while (v1741 != v1704)
          {
            ++v1702;
            v1742 = *v1741++;
            if (v1742 != -1 && v1740 <= v1702)
            {
              v1701 = v1741 - 1;
              goto LABEL_1600;
            }
          }
          break;
        }
LABEL_1600:
        if (v1740 == v1702)
        {
          v1744 = *(_QWORD *)(result + 13120) + 8 * *v1701;
          if (v1744 == *(_QWORD *)a2)
          {
            v1720 = *(int8x16_t *)(v1744 + 176);
            v1719 = *(int8x16_t *)(v1744 + 192);
            v1718 = *(int8x16_t *)(v1744 + 144);
            v1717 = *(int8x16_t *)(v1744 + 160);
            v1722 = *(int8x16_t *)(v1744 + 112);
            v1721 = *(int8x16_t *)(v1744 + 128);
            v1724 = *(int8x16_t *)(v1744 + 80);
            v1723 = *(int8x16_t *)(v1744 + 96);
            v1728 = *(int8x16_t *)(v1744 + 48);
            v1734 = *(int8x16_t *)(v1744 + 64);
            v1725 = vextq_s8(v1719, v1719, 8uLL).u64[0];
            v1726 = vextq_s8(v1720, v1720, 8uLL).u64[0];
            v1727 = vextq_s8(v1717, v1717, 8uLL).u64[0];
            v1730 = vextq_s8(v1718, v1718, 8uLL).u64[0];
            v1731 = vextq_s8(v1721, v1721, 8uLL).u64[0];
            *(_QWORD *)&v1716 = vextq_s8(v1722, v1722, 8uLL).u64[0];
            *(_QWORD *)&v1715 = vextq_s8(v1723, v1723, 8uLL).u64[0];
            *(_QWORD *)&v1714 = vextq_s8(v1724, v1724, 8uLL).u64[0];
            v1711 = *(int8x16_t *)(v1744 + 16);
            v1729 = *(int8x16_t *)(v1744 + 32);
            *(_QWORD *)&v1713 = vextq_s8(v1734, v1734, 8uLL).u64[0];
            v1732 = vextq_s8(v1728, v1728, 8uLL).u64[0];
            v1733 = vextq_s8(v1729, v1729, 8uLL).u64[0];
            v1712 = *(int8x16_t *)v1744;
          }
          else
          {
            v1712 = *(int8x16_t *)v1744;
            v1711 = *(int8x16_t *)(v1744 + 16);
            v1713 = *(_OWORD *)(v1744 + 72);
            v1714 = *(_OWORD *)(v1744 + 88);
            v1715 = *(_OWORD *)(v1744 + 104);
            v1716 = *(_OWORD *)(v1744 + 120);
            v1718 = *(int8x16_t *)(v1744 + 144);
            v1717 = *(int8x16_t *)(v1744 + 160);
            v1720 = *(int8x16_t *)(v1744 + 176);
            v1719 = *(int8x16_t *)(v1744 + 192);
            v1721.i64[0] = *(_QWORD *)(v1744 + 128);
            v1722.i64[0] = *(_QWORD *)(v1744 + 112);
            v1723.i64[0] = *(_QWORD *)(v1744 + 96);
            v1724.i64[0] = *(_QWORD *)(v1744 + 80);
            v1725 = vextq_s8(v1719, v1719, 8uLL).u64[0];
            v1726 = vextq_s8(v1720, v1720, 8uLL).u64[0];
            v1727 = vextq_s8(v1717, v1717, 8uLL).u64[0];
            v1729 = *(int8x16_t *)(v1744 + 32);
            v1728 = *(int8x16_t *)(v1744 + 48);
            v1730 = vextq_s8(v1718, v1718, 8uLL).u64[0];
            v1731 = *(_QWORD *)(v1744 + 136);
            v1732 = vextq_s8(v1728, v1728, 8uLL).u64[0];
            v1733 = vextq_s8(v1729, v1729, 8uLL).u64[0];
            v1734.i64[0] = *(_QWORD *)(v1744 + 64);
          }
          v1735 = *(_QWORD *)(v1744 + 208);
          v1736 = *(unsigned int *)(a2 + 16);
          v1737 = *(_QWORD *)a2 + 8 * (v1709[1] + (_DWORD)v1736 * v1632[1]);
          v1728.i64[1] = v1732;
          v1729.i64[1] = v1733;
          v1711.i64[1] = vextq_s8(v1711, v1711, 8uLL).u64[0];
          v1712.i64[1] = vextq_s8(v1712, v1712, 8uLL).u64[0];
          *((_QWORD *)&v1716 + 1) = v1721.i64[0];
          *((_QWORD *)&v1715 + 1) = v1722.i64[0];
          *((_QWORD *)&v1714 + 1) = v1723.i64[0];
          *((_QWORD *)&v1713 + 1) = v1724.i64[0];
          v1719.i64[1] = v1725;
          v1720.i64[1] = v1726;
          v1717.i64[1] = v1727;
          v1718.i64[1] = v1730;
          *(int8x16_t *)v1737 = v1712;
          *(int8x16_t *)(v1737 + 16) = v1711;
          *(_QWORD *)(v1737 + 64) = v1734.i64[0];
          *(int8x16_t *)(v1737 + 32) = v1729;
          *(int8x16_t *)(v1737 + 48) = v1728;
          v1738 = v1737 + 8 * v1736;
          *(_OWORD *)v1738 = v1713;
          *(_OWORD *)(v1738 + 16) = v1714;
          *(_QWORD *)(v1738 + 64) = v1731;
          *(_OWORD *)(v1738 + 32) = v1715;
          *(_OWORD *)(v1738 + 48) = v1716;
          v1739 = (int8x16_t *)(v1737 + 16 * v1736);
          *v1739 = v1718;
          v1739[1] = v1717;
          v1739[4].i64[0] = v1735;
          v1702 = v1740;
          v1739[2] = v1720;
          v1739[3] = v1719;
        }
        v1709 += 2;
      }
      v1632 += 2;
    }
    while (v1632 != v1633);
  }
LABEL_1551:
  v1682 = *(_DWORD **)a4;
  v1683 = *(_DWORD **)(a4 + 8);
  v1684 = *a3;
  v1685 = a3[1];
  if (*a3 == v1685 || v1682 == v1683)
  {
    v1687 = *(_DWORD **)(a4 + 24);
    v1688 = *(_DWORD **)(a4 + 32);
    if (v1684 != v1685 && v1687 != v1688)
      goto LABEL_1635;
LABEL_1561:
    v1690 = *(_DWORD **)(a4 + 48);
    v1691 = *(_DWORD **)(a4 + 56);
    if (v1684 != v1685 && v1690 != v1691)
      goto LABEL_1666;
LABEL_1566:
    v1693 = *(_DWORD **)(a4 + 72);
    v1694 = *(_DWORD **)(a4 + 80);
    if (v1684 != v1685 && v1693 != v1694)
      goto LABEL_1697;
LABEL_1571:
    v1696 = *(_DWORD **)(a4 + 96);
    v1697 = *(_DWORD **)(a4 + 104);
    if (v1684 != v1685 && v1696 != v1697)
      goto LABEL_1734;
LABEL_1727:
    v1950 = *(_DWORD **)(a4 + 120);
    v1951 = *(_DWORD **)(a4 + 128);
    if (v1684 != v1685 && v1950 != v1951)
      goto LABEL_1781;
LABEL_1764:
    v1987 = *(_DWORD **)(a4 + 144);
    v1988 = *(_DWORD **)(a4 + 152);
    if (v1684 != v1685 && v1987 != v1988)
      goto LABEL_1809;
LABEL_1769:
    v1990 = *(_DWORD **)(a4 + 168);
    v1991 = *(_DWORD **)(a4 + 176);
    if (v1684 != v1685 && v1990 != v1991)
      goto LABEL_1840;
LABEL_1774:
    v1993 = *(_DWORD **)(a4 + 192);
    v1994 = *(_DWORD **)(a4 + 200);
    if (v1684 != v1685 && v1993 != v1994)
      goto LABEL_1877;
LABEL_1870:
    v2088 = *(_DWORD **)(a4 + 216);
    v2089 = *(_DWORD **)(a4 + 224);
    if (v1684 == v1685 || v2088 == v2089)
      return result;
    goto LABEL_1909;
  }
  do
  {
    v1745 = *(_QWORD *)(result + 88);
    v1746 = (*(_DWORD *)(result + 112) * *v1682);
    v1747 = (uint64_t *)(v1745 + 8 * v1746);
    v1748 = *(_DWORD *)(result + 8);
    v1749 = v1746 + v1748;
    v1750 = (uint64_t *)(v1745 + 8 * v1749);
    if (v1748)
    {
      if (*v1747 == -1)
      {
        v1751 = 8 * v1749 - 8 * v1746 - 8;
        v1752 = 1;
        v1753 = v1747;
        while (1)
        {
          v1748 = v1752;
          if (!v1751)
            break;
          v1747 = v1753 + 1;
          v1754 = v1753[1];
          ++v1752;
          v1751 -= 8;
          ++v1753;
          if (v1754 != -1)
            goto LABEL_1612;
        }
        v1747 = v1750;
      }
      else
      {
        v1748 = 0;
      }
    }
LABEL_1612:
    v1755 = *a3;
    v1756 = a3[1];
    while (v1755 != v1756 && v1747 != v1750)
    {
      v1786 = *v1755;
      if (*v1755 > v1748)
      {
        v1787 = v1747 + 1;
        while (v1787 != v1750)
        {
          ++v1748;
          v1788 = *v1787++;
          if (v1788 != -1 && v1786 <= v1748)
          {
            v1747 = v1787 - 1;
            goto LABEL_1626;
          }
        }
        break;
      }
LABEL_1626:
      if (v1786 == v1748)
      {
        v1790 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v1747);
        if (v1790 == *(int8x16_t **)a2)
        {
          v1766 = v1790[16];
          v1765 = v1790[17];
          v1764 = v1790[14];
          v1763 = v1790[15];
          v1762 = v1790[12];
          v1761 = v1790[13];
          v1760 = v1790[10];
          v1759 = v1790[11];
          v1772 = v1790[8];
          v1771 = v1790[9];
          v2299 = vextq_s8(v1766, v1766, 8uLL).u64[0];
          v2311 = vextq_s8(v1765, v1765, 8uLL).u64[0];
          v1767 = vextq_s8(v1764, v1764, 8uLL).u64[0];
          v1768 = vextq_s8(v1761, v1761, 8uLL).u64[0];
          v1769 = vextq_s8(v1762, v1762, 8uLL).u64[0];
          v2275 = vextq_s8(v1759, v1759, 8uLL).u64[0];
          v2287 = vextq_s8(v1763, v1763, 8uLL).u64[0];
          v1770 = vextq_s8(v1760, v1760, 8uLL).u64[0];
          v1758 = v1790[6];
          v1757 = v1790[7];
        }
        else
        {
          v1758 = v1790[6];
          v1757 = v1790[7];
          v1760 = v1790[10];
          v1759 = v1790[11];
          v1762 = v1790[12];
          v1761 = v1790[13];
          v1764 = v1790[14];
          v1763 = v1790[15];
          v1766 = v1790[16];
          v1765 = v1790[17];
          v2299 = vextq_s8(v1766, v1766, 8uLL).u64[0];
          v2311 = vextq_s8(v1765, v1765, 8uLL).u64[0];
          v1767 = vextq_s8(v1764, v1764, 8uLL).u64[0];
          v1768 = vextq_s8(v1761, v1761, 8uLL).u64[0];
          v1769 = vextq_s8(v1762, v1762, 8uLL).u64[0];
          v2275 = vextq_s8(v1759, v1759, 8uLL).u64[0];
          v2287 = vextq_s8(v1763, v1763, 8uLL).u64[0];
          v1770 = vextq_s8(v1760, v1760, 8uLL).u64[0];
          v1772 = v1790[8];
          v1771 = v1790[9];
        }
        v1774 = v1790[4];
        v1773 = v1790[5];
        v1776 = v1790[2];
        v1775 = v1790[3];
        v1778 = *v1790;
        v1777 = v1790[1];
        v1764.i64[1] = v1767;
        v1761.i64[1] = v1768;
        v1762.i64[1] = v1769;
        v1776.i64[1] = vextq_s8(v1776, v1776, 8uLL).u64[0];
        v1779 = *(unsigned int *)(a2 + 16);
        v1780 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1755[1] + (_DWORD)v1779 * v1682[1]));
        v1777.i64[1] = vextq_s8(v1777, v1777, 8uLL).u64[0];
        v1778.i64[1] = vextq_s8(v1778, v1778, 8uLL).u64[0];
        v1773.i64[1] = vextq_s8(v1773, v1773, 8uLL).u64[0];
        v1774.i64[1] = vextq_s8(v1774, v1774, 8uLL).u64[0];
        v1775.i64[1] = vextq_s8(v1775, v1775, 8uLL).u64[0];
        v1772.i64[1] = vextq_s8(v1772, v1772, 8uLL).u64[0];
        v1757.i64[1] = vextq_s8(v1757, v1757, 8uLL).u64[0];
        v1758.i64[1] = vextq_s8(v1758, v1758, 8uLL).u64[0];
        v1759.i64[1] = v2275;
        v1760.i64[1] = v1770;
        v1771.i64[1] = vextq_s8(v1771, v1771, 8uLL).u64[0];
        v1765.i64[1] = v2311;
        v1766.i64[1] = v2299;
        v1763.i64[1] = v2287;
        *v1780 = v1778;
        v1780[1] = v1777;
        v1780[2] = v1776;
        v1781 = (int8x16_t *)((char *)v1780 + 8 * v1779);
        *v1781 = v1775;
        v1781[1] = v1774;
        v1781[2] = v1773;
        v1782 = &v1780[v1779];
        *v1782 = v1758;
        v1782[1] = v1757;
        v1782[2] = v1772;
        v1783 = (int8x16_t *)((char *)v1780 + 24 * v1779);
        *v1783 = v1771;
        v1783[1] = v1760;
        v1783[2] = v1759;
        v1784 = &v1780[2 * v1779];
        *v1784 = v1762;
        v1784[1] = v1761;
        v1784[2] = v1764;
        v1785 = (int8x16_t *)((char *)v1780 + 40 * v1779);
        *v1785 = v1763;
        v1785[1] = v1766;
        v1748 = v1786;
        v1785[2] = v1765;
      }
      v1755 += 2;
    }
    v1682 += 2;
  }
  while (v1682 != v1683);
  v1684 = *a3;
  v1685 = a3[1];
  v1687 = *(_DWORD **)(a4 + 24);
  v1688 = *(_DWORD **)(a4 + 32);
  if (*a3 == v1685 || v1687 == v1688)
    goto LABEL_1561;
  do
  {
LABEL_1635:
    v1792 = *(_QWORD *)(result + 1528);
    v1793 = (*(_DWORD *)(result + 1552) * *v1687);
    v1794 = (uint64_t *)(v1792 + 8 * v1793);
    v1795 = *(_DWORD *)(result + 1448);
    v1796 = v1793 + v1795;
    v1797 = (uint64_t *)(v1792 + 8 * v1796);
    if (v1795)
    {
      if (*v1794 == -1)
      {
        v1798 = 8 * v1796 - 8 * v1793 - 8;
        v1799 = 1;
        v1800 = v1794;
        while (1)
        {
          v1795 = v1799;
          if (!v1798)
            break;
          v1794 = v1800 + 1;
          v1801 = v1800[1];
          ++v1799;
          v1798 -= 8;
          ++v1800;
          if (v1801 != -1)
            goto LABEL_1643;
        }
        v1794 = v1797;
      }
      else
      {
        v1795 = 0;
      }
    }
LABEL_1643:
    v1802 = *a3;
    v1803 = a3[1];
    while (v1802 != v1803 && v1794 != v1797)
    {
      v1850 = *v1802;
      if (*v1802 > v1795)
      {
        v1851 = v1794 + 1;
        while (v1851 != v1797)
        {
          ++v1795;
          v1852 = *v1851++;
          if (v1852 != -1 && v1850 <= v1795)
          {
            v1794 = v1851 - 1;
            goto LABEL_1657;
          }
        }
        break;
      }
LABEL_1657:
      if (v1850 == v1795)
      {
        v1854 = (int8x16_t *)(*(_QWORD *)(result + 1456) + 8 * *v1794);
        if (v1854 == *(int8x16_t **)a2)
        {
          v1809 = v1854[17];
          v2300 = v1854[25];
          v2312 = v1854[26];
          v1808 = vextq_s8(v2312, v2312, 8uLL).u64[0];
          v2225 = vextq_s8(v2300, v2300, 8uLL).u64[0];
          v1811 = v1854[15];
          v1810 = v1854[16];
          v2276 = v1854[19];
          v2288 = v1854[24];
          v2221 = vextq_s8(v2288, v2288, 8uLL).u64[0];
          v2258 = v1854[22];
          v2262 = v1854[23];
          v2246 = vextq_s8(v2262, v2262, 8uLL).u64[0];
          v2250 = v1854[20];
          v2242 = vextq_s8(v2258, v2258, 8uLL).u64[0];
          v1806 = v1854[13];
          v1812 = v1854[14];
          v2254 = v1854[21];
          v2238 = vextq_s8(v2254, v2254, 8uLL).u64[0];
          v2217 = vextq_s8(v2250, v2250, 8uLL).u64[0];
          v2234 = vextq_s8(v2276, v2276, 8uLL).u64[0];
          v1813 = v1854[11];
          v1807 = v1854[12];
          v2266 = v1854[18];
          v2230 = vextq_s8(v2266, v2266, 8uLL).u64[0];
          v2213 = vextq_s8(v1809, v1809, 8uLL).u64[0];
          v2208 = vextq_s8(v1810, v1810, 8uLL).u64[0];
          v1815 = v1854[9];
          v1814 = v1854[10];
          v2204 = vextq_s8(v1811, v1811, 8uLL).u64[0];
          v2200 = vextq_s8(v1812, v1812, 8uLL).u64[0];
          v2196 = vextq_s8(v1806, v1806, 8uLL).u64[0];
          v1804 = v1854[7];
          v1816 = v1854[8];
          v2188 = vextq_s8(v1807, v1807, 8uLL).u64[0];
          v2192 = vextq_s8(v1813, v1813, 8uLL).u64[0];
          v2186 = vextq_s8(v1814, v1814, 8uLL).u64[0];
          v1820 = v1854[5];
          v1805 = v1854[6];
          v1817 = vextq_s8(v1815, v1815, 8uLL).u64[0];
          v1818 = vextq_s8(v1816, v1816, 8uLL).u64[0];
          v1819 = vextq_s8(v1804, v1804, 8uLL).u64[0];
          v1825 = v1854[3];
          v1821 = v1854[4];
          v1822 = vextq_s8(v1805, v1805, 8uLL).u64[0];
          v1823 = vextq_s8(v1820, v1820, 8uLL).u64[0];
          v1824 = vextq_s8(v1821, v1821, 8uLL).u64[0];
          v1829 = v1854[1];
          v1826 = v1854[2];
          v1827 = vextq_s8(v1825, v1825, 8uLL).u64[0];
          v1828 = vextq_s8(v1826, v1826, 8uLL).u64[0];
          v1830 = *v1854;
        }
        else
        {
          v1805 = v1854[6];
          v1804 = v1854[7];
          v1807 = v1854[12];
          v1806 = v1854[13];
          v2300 = v1854[25];
          v2312 = v1854[26];
          v1808 = vextq_s8(v2312, v2312, 8uLL).u64[0];
          v2276 = v1854[19];
          v2288 = v1854[24];
          v2221 = vextq_s8(v2288, v2288, 8uLL).u64[0];
          v2225 = vextq_s8(v2300, v2300, 8uLL).u64[0];
          v2258 = v1854[22];
          v2262 = v1854[23];
          v2242 = vextq_s8(v2258, v2258, 8uLL).u64[0];
          v2246 = vextq_s8(v2262, v2262, 8uLL).u64[0];
          v2250 = v1854[20];
          v2254 = v1854[21];
          v2234 = vextq_s8(v2276, v2276, 8uLL).u64[0];
          v2238 = vextq_s8(v2254, v2254, 8uLL).u64[0];
          v1810 = v1854[16];
          v1809 = v1854[17];
          v2266 = v1854[18];
          v2230 = vextq_s8(v2266, v2266, 8uLL).u64[0];
          v2213 = vextq_s8(v1809, v1809, 8uLL).u64[0];
          v2217 = vextq_s8(v2250, v2250, 8uLL).u64[0];
          v1812 = v1854[14];
          v1811 = v1854[15];
          v2204 = vextq_s8(v1811, v1811, 8uLL).u64[0];
          v2208 = vextq_s8(v1810, v1810, 8uLL).u64[0];
          v2196 = vextq_s8(v1806, v1806, 8uLL).u64[0];
          v2200 = vextq_s8(v1812, v1812, 8uLL).u64[0];
          v1814 = v1854[10];
          v1813 = v1854[11];
          v2188 = vextq_s8(v1807, v1807, 8uLL).u64[0];
          v2192 = vextq_s8(v1813, v1813, 8uLL).u64[0];
          v2186 = vextq_s8(v1814, v1814, 8uLL).u64[0];
          v1816 = v1854[8];
          v1815 = v1854[9];
          v1817 = vextq_s8(v1815, v1815, 8uLL).u64[0];
          v1818 = vextq_s8(v1816, v1816, 8uLL).u64[0];
          v1819 = vextq_s8(v1804, v1804, 8uLL).u64[0];
          v1821 = v1854[4];
          v1820 = v1854[5];
          v1822 = vextq_s8(v1805, v1805, 8uLL).u64[0];
          v1823 = vextq_s8(v1820, v1820, 8uLL).u64[0];
          v1824 = vextq_s8(v1821, v1821, 8uLL).u64[0];
          v1826 = v1854[2];
          v1825 = v1854[3];
          v1827 = vextq_s8(v1825, v1825, 8uLL).u64[0];
          v1828 = vextq_s8(v1826, v1826, 8uLL).u64[0];
          v1830 = *v1854;
          v1829 = v1854[1];
        }
        v1831.i64[0] = v2312.i64[0];
        v1831.i64[1] = v1808;
        v1832.i64[0] = v2300.i64[0];
        v1832.i64[1] = v2225;
        v1833.i64[0] = v2288.i64[0];
        v1833.i64[1] = v2221;
        v1812.i64[1] = v2200;
        v1806.i64[1] = v2196;
        v1807.i64[1] = v2188;
        v1826.i64[1] = v1828;
        v1829.i64[1] = vextq_s8(v1829, v1829, 8uLL).u64[0];
        v1830.i64[1] = vextq_s8(v1830, v1830, 8uLL).u64[0];
        v1820.i64[1] = v1823;
        v1821.i64[1] = v1824;
        v1825.i64[1] = v1827;
        v1816.i64[1] = v1818;
        v1804.i64[1] = v1819;
        v1805.i64[1] = v1822;
        v1813.i64[1] = v2192;
        v1814.i64[1] = v2186;
        v1815.i64[1] = v1817;
        v1809.i64[1] = v2213;
        v1810.i64[1] = v2208;
        v1811.i64[1] = v2204;
        v1834.i64[0] = v2250.i64[0];
        v1834.i64[1] = v2217;
        v1835 = *(unsigned int *)(a2 + 16);
        v1836 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1802[1] + (_DWORD)v1835 * v1687[1]));
        v1837.i64[0] = v2276.i64[0];
        v1837.i64[1] = v2234;
        v1838.i64[0] = v2266.i64[0];
        v1838.i64[1] = v2230;
        *(_QWORD *)&v1839 = v2262.i64[0];
        *((_QWORD *)&v1839 + 1) = v2246;
        *(_QWORD *)&v1840 = v2258.i64[0];
        *((_QWORD *)&v1840 + 1) = v2242;
        *(_QWORD *)&v1841 = v2254.i64[0];
        *((_QWORD *)&v1841 + 1) = v2238;
        *v1836 = v1830;
        v1836[1] = v1829;
        v1836[2] = v1826;
        v1842 = (int8x16_t *)((char *)v1836 + 8 * v1835);
        *v1842 = v1825;
        v1842[1] = v1821;
        v1842[2] = v1820;
        v1843 = &v1836[v1835];
        *v1843 = v1805;
        v1843[1] = v1804;
        v1843[2] = v1816;
        v1844 = (int8x16_t *)((char *)v1836 + 24 * v1835);
        *v1844 = v1815;
        v1844[1] = v1814;
        v1844[2] = v1813;
        v1845 = &v1836[2 * v1835];
        *v1845 = v1807;
        v1845[1] = v1806;
        v1845[2] = v1812;
        v1846 = (int8x16_t *)((char *)v1836 + 40 * v1835);
        *v1846 = v1811;
        v1846[1] = v1810;
        v1846[2] = v1809;
        v1847 = &v1836[3 * v1835];
        *v1847 = v1838;
        v1847[1] = v1837;
        v1847[2] = v1834;
        v1848 = &v1836->i8[56 * v1835];
        *(_OWORD *)v1848 = v1841;
        *((_OWORD *)v1848 + 1) = v1840;
        *((_OWORD *)v1848 + 2) = v1839;
        v1849 = &v1836[4 * v1835];
        *v1849 = v1833;
        v1849[1] = v1832;
        v1795 = v1850;
        v1849[2] = v1831;
      }
      v1802 += 2;
    }
    v1687 += 2;
  }
  while (v1687 != v1688);
  v1684 = *a3;
  v1685 = a3[1];
  v1690 = *(_DWORD **)(a4 + 48);
  v1691 = *(_DWORD **)(a4 + 56);
  if (*a3 == v1685 || v1690 == v1691)
    goto LABEL_1566;
  do
  {
LABEL_1666:
    v1856 = *(_QWORD *)(result + 2968);
    v1857 = (*(_DWORD *)(result + 2992) * *v1690);
    v1858 = (uint64_t *)(v1856 + 8 * v1857);
    v1859 = *(_DWORD *)(result + 2888);
    v1860 = v1857 + v1859;
    v1861 = (uint64_t *)(v1856 + 8 * v1860);
    if (v1859)
    {
      if (*v1858 == -1)
      {
        v1862 = 8 * v1860 - 8 * v1857 - 8;
        v1863 = 1;
        v1864 = v1858;
        while (1)
        {
          v1859 = v1863;
          if (!v1862)
            break;
          v1858 = v1864 + 1;
          v1865 = v1864[1];
          ++v1863;
          v1862 -= 8;
          ++v1864;
          if (v1865 != -1)
            goto LABEL_1674;
        }
        v1858 = v1861;
      }
      else
      {
        v1859 = 0;
      }
    }
LABEL_1674:
    v1866 = *a3;
    v1867 = a3[1];
    while (v1866 != v1867 && v1858 != v1861)
    {
      v1897 = *v1866;
      if (*v1866 > v1859)
      {
        v1898 = v1858 + 1;
        while (v1898 != v1861)
        {
          ++v1859;
          v1899 = *v1898++;
          if (v1899 != -1 && v1897 <= v1859)
          {
            v1858 = v1898 - 1;
            goto LABEL_1688;
          }
        }
        break;
      }
LABEL_1688:
      if (v1897 == v1859)
      {
        v1901 = (int8x16_t *)(*(_QWORD *)(result + 2896) + 8 * *v1858);
        if (v1901 == *(int8x16_t **)a2)
        {
          v1877 = v1901[16];
          v1876 = v1901[17];
          v1875 = v1901[14];
          v1874 = v1901[15];
          v1873 = v1901[12];
          v1872 = v1901[13];
          v1871 = v1901[10];
          v1870 = v1901[11];
          v1883 = v1901[8];
          v1882 = v1901[9];
          v2301 = vextq_s8(v1877, v1877, 8uLL).u64[0];
          v2313 = vextq_s8(v1876, v1876, 8uLL).u64[0];
          v1878 = vextq_s8(v1875, v1875, 8uLL).u64[0];
          v1879 = vextq_s8(v1872, v1872, 8uLL).u64[0];
          v1880 = vextq_s8(v1873, v1873, 8uLL).u64[0];
          v2277 = vextq_s8(v1870, v1870, 8uLL).u64[0];
          v2289 = vextq_s8(v1874, v1874, 8uLL).u64[0];
          v1881 = vextq_s8(v1871, v1871, 8uLL).u64[0];
          v1869 = v1901[6];
          v1868 = v1901[7];
        }
        else
        {
          v1869 = v1901[6];
          v1868 = v1901[7];
          v1871 = v1901[10];
          v1870 = v1901[11];
          v1873 = v1901[12];
          v1872 = v1901[13];
          v1875 = v1901[14];
          v1874 = v1901[15];
          v1877 = v1901[16];
          v1876 = v1901[17];
          v2301 = vextq_s8(v1877, v1877, 8uLL).u64[0];
          v2313 = vextq_s8(v1876, v1876, 8uLL).u64[0];
          v1878 = vextq_s8(v1875, v1875, 8uLL).u64[0];
          v1879 = vextq_s8(v1872, v1872, 8uLL).u64[0];
          v1880 = vextq_s8(v1873, v1873, 8uLL).u64[0];
          v2277 = vextq_s8(v1870, v1870, 8uLL).u64[0];
          v2289 = vextq_s8(v1874, v1874, 8uLL).u64[0];
          v1881 = vextq_s8(v1871, v1871, 8uLL).u64[0];
          v1883 = v1901[8];
          v1882 = v1901[9];
        }
        v1885 = v1901[4];
        v1884 = v1901[5];
        v1887 = v1901[2];
        v1886 = v1901[3];
        v1889 = *v1901;
        v1888 = v1901[1];
        v1875.i64[1] = v1878;
        v1872.i64[1] = v1879;
        v1873.i64[1] = v1880;
        v1887.i64[1] = vextq_s8(v1887, v1887, 8uLL).u64[0];
        v1890 = *(unsigned int *)(a2 + 16);
        v1891 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1866[1] + (_DWORD)v1890 * v1690[1]));
        v1888.i64[1] = vextq_s8(v1888, v1888, 8uLL).u64[0];
        v1889.i64[1] = vextq_s8(v1889, v1889, 8uLL).u64[0];
        v1884.i64[1] = vextq_s8(v1884, v1884, 8uLL).u64[0];
        v1885.i64[1] = vextq_s8(v1885, v1885, 8uLL).u64[0];
        v1886.i64[1] = vextq_s8(v1886, v1886, 8uLL).u64[0];
        v1883.i64[1] = vextq_s8(v1883, v1883, 8uLL).u64[0];
        v1868.i64[1] = vextq_s8(v1868, v1868, 8uLL).u64[0];
        v1869.i64[1] = vextq_s8(v1869, v1869, 8uLL).u64[0];
        v1870.i64[1] = v2277;
        v1871.i64[1] = v1881;
        v1882.i64[1] = vextq_s8(v1882, v1882, 8uLL).u64[0];
        v1876.i64[1] = v2313;
        v1877.i64[1] = v2301;
        v1874.i64[1] = v2289;
        *v1891 = v1889;
        v1891[1] = v1888;
        v1891[2] = v1887;
        v1892 = (int8x16_t *)((char *)v1891 + 8 * v1890);
        *v1892 = v1886;
        v1892[1] = v1885;
        v1892[2] = v1884;
        v1893 = &v1891[v1890];
        *v1893 = v1869;
        v1893[1] = v1868;
        v1893[2] = v1883;
        v1894 = (int8x16_t *)((char *)v1891 + 24 * v1890);
        *v1894 = v1882;
        v1894[1] = v1871;
        v1894[2] = v1870;
        v1895 = &v1891[2 * v1890];
        *v1895 = v1873;
        v1895[1] = v1872;
        v1895[2] = v1875;
        v1896 = (int8x16_t *)((char *)v1891 + 40 * v1890);
        *v1896 = v1874;
        v1896[1] = v1877;
        v1859 = v1897;
        v1896[2] = v1876;
      }
      v1866 += 2;
    }
    v1690 += 2;
  }
  while (v1690 != v1691);
  v1684 = *a3;
  v1685 = a3[1];
  v1693 = *(_DWORD **)(a4 + 72);
  v1694 = *(_DWORD **)(a4 + 80);
  if (*a3 == v1685 || v1693 == v1694)
    goto LABEL_1571;
  do
  {
LABEL_1697:
    v1903 = *(_QWORD *)(result + 4408);
    v1904 = (*(_DWORD *)(result + 4432) * *v1693);
    v1905 = (uint64_t *)(v1903 + 8 * v1904);
    v1906 = *(_DWORD *)(result + 4328);
    v1907 = v1904 + v1906;
    v1908 = (uint64_t *)(v1903 + 8 * v1907);
    if (v1906)
    {
      if (*v1905 == -1)
      {
        v1909 = 8 * v1907 - 8 * v1904 - 8;
        v1910 = 1;
        v1911 = v1905;
        while (1)
        {
          v1906 = v1910;
          if (!v1909)
            break;
          v1905 = v1911 + 1;
          v1912 = v1911[1];
          ++v1910;
          v1909 -= 8;
          ++v1911;
          if (v1912 != -1)
            goto LABEL_1705;
        }
        v1905 = v1908;
      }
      else
      {
        v1906 = 0;
      }
    }
LABEL_1705:
    v1913 = *a3;
    v1914 = a3[1];
    while (v1913 != v1914 && v1905 != v1908)
    {
      v1944 = *v1913;
      if (*v1913 > v1906)
      {
        v1945 = v1905 + 1;
        while (v1945 != v1908)
        {
          ++v1906;
          v1946 = *v1945++;
          if (v1946 != -1 && v1944 <= v1906)
          {
            v1905 = v1945 - 1;
            goto LABEL_1719;
          }
        }
        break;
      }
LABEL_1719:
      if (v1944 == v1906)
      {
        v1948 = (int8x16_t *)(*(_QWORD *)(result + 4336) + 8 * *v1905);
        if (v1948 == *(int8x16_t **)a2)
        {
          v1924 = v1948[16];
          v1923 = v1948[17];
          v1922 = v1948[14];
          v1921 = v1948[15];
          v1920 = v1948[12];
          v1919 = v1948[13];
          v1918 = v1948[10];
          v1917 = v1948[11];
          v1930 = v1948[8];
          v1929 = v1948[9];
          v2302 = vextq_s8(v1924, v1924, 8uLL).u64[0];
          v2314 = vextq_s8(v1923, v1923, 8uLL).u64[0];
          v1925 = vextq_s8(v1922, v1922, 8uLL).u64[0];
          v1926 = vextq_s8(v1919, v1919, 8uLL).u64[0];
          v1927 = vextq_s8(v1920, v1920, 8uLL).u64[0];
          v2278 = vextq_s8(v1917, v1917, 8uLL).u64[0];
          v2290 = vextq_s8(v1921, v1921, 8uLL).u64[0];
          v1928 = vextq_s8(v1918, v1918, 8uLL).u64[0];
          v1916 = v1948[6];
          v1915 = v1948[7];
        }
        else
        {
          v1916 = v1948[6];
          v1915 = v1948[7];
          v1918 = v1948[10];
          v1917 = v1948[11];
          v1920 = v1948[12];
          v1919 = v1948[13];
          v1922 = v1948[14];
          v1921 = v1948[15];
          v1924 = v1948[16];
          v1923 = v1948[17];
          v2302 = vextq_s8(v1924, v1924, 8uLL).u64[0];
          v2314 = vextq_s8(v1923, v1923, 8uLL).u64[0];
          v1925 = vextq_s8(v1922, v1922, 8uLL).u64[0];
          v1926 = vextq_s8(v1919, v1919, 8uLL).u64[0];
          v1927 = vextq_s8(v1920, v1920, 8uLL).u64[0];
          v2278 = vextq_s8(v1917, v1917, 8uLL).u64[0];
          v2290 = vextq_s8(v1921, v1921, 8uLL).u64[0];
          v1928 = vextq_s8(v1918, v1918, 8uLL).u64[0];
          v1930 = v1948[8];
          v1929 = v1948[9];
        }
        v1932 = v1948[4];
        v1931 = v1948[5];
        v1934 = v1948[2];
        v1933 = v1948[3];
        v1936 = *v1948;
        v1935 = v1948[1];
        v1922.i64[1] = v1925;
        v1919.i64[1] = v1926;
        v1920.i64[1] = v1927;
        v1934.i64[1] = vextq_s8(v1934, v1934, 8uLL).u64[0];
        v1937 = *(unsigned int *)(a2 + 16);
        v1938 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1913[1] + (_DWORD)v1937 * v1693[1]));
        v1935.i64[1] = vextq_s8(v1935, v1935, 8uLL).u64[0];
        v1936.i64[1] = vextq_s8(v1936, v1936, 8uLL).u64[0];
        v1931.i64[1] = vextq_s8(v1931, v1931, 8uLL).u64[0];
        v1932.i64[1] = vextq_s8(v1932, v1932, 8uLL).u64[0];
        v1933.i64[1] = vextq_s8(v1933, v1933, 8uLL).u64[0];
        v1930.i64[1] = vextq_s8(v1930, v1930, 8uLL).u64[0];
        v1915.i64[1] = vextq_s8(v1915, v1915, 8uLL).u64[0];
        v1916.i64[1] = vextq_s8(v1916, v1916, 8uLL).u64[0];
        v1917.i64[1] = v2278;
        v1918.i64[1] = v1928;
        v1929.i64[1] = vextq_s8(v1929, v1929, 8uLL).u64[0];
        v1923.i64[1] = v2314;
        v1924.i64[1] = v2302;
        v1921.i64[1] = v2290;
        *v1938 = v1936;
        v1938[1] = v1935;
        v1938[2] = v1934;
        v1939 = (int8x16_t *)((char *)v1938 + 8 * v1937);
        *v1939 = v1933;
        v1939[1] = v1932;
        v1939[2] = v1931;
        v1940 = &v1938[v1937];
        *v1940 = v1916;
        v1940[1] = v1915;
        v1940[2] = v1930;
        v1941 = (int8x16_t *)((char *)v1938 + 24 * v1937);
        *v1941 = v1929;
        v1941[1] = v1918;
        v1941[2] = v1917;
        v1942 = &v1938[2 * v1937];
        *v1942 = v1920;
        v1942[1] = v1919;
        v1942[2] = v1922;
        v1943 = (int8x16_t *)((char *)v1938 + 40 * v1937);
        *v1943 = v1921;
        v1943[1] = v1924;
        v1906 = v1944;
        v1943[2] = v1923;
      }
      v1913 += 2;
    }
    v1693 += 2;
  }
  while (v1693 != v1694);
  v1684 = *a3;
  v1685 = a3[1];
  v1696 = *(_DWORD **)(a4 + 96);
  v1697 = *(_DWORD **)(a4 + 104);
  if (*a3 == v1685 || v1696 == v1697)
    goto LABEL_1727;
  do
  {
LABEL_1734:
    v1953 = *(_QWORD *)(result + 5848);
    v1954 = (*(_DWORD *)(result + 5872) * *v1696);
    v1955 = (uint64_t *)(v1953 + 8 * v1954);
    v1956 = *(_DWORD *)(result + 5768);
    v1957 = v1954 + v1956;
    v1958 = (uint64_t *)(v1953 + 8 * v1957);
    if (v1956)
    {
      if (*v1955 == -1)
      {
        v1959 = 8 * v1957 - 8 * v1954 - 8;
        v1960 = 1;
        v1961 = v1955;
        while (1)
        {
          v1956 = v1960;
          if (!v1959)
            break;
          v1955 = v1961 + 1;
          v1962 = v1961[1];
          ++v1960;
          v1959 -= 8;
          ++v1961;
          if (v1962 != -1)
            goto LABEL_1742;
        }
        v1955 = v1958;
      }
      else
      {
        v1956 = 0;
      }
    }
LABEL_1742:
    v1963 = *a3;
    v1964 = a3[1];
    while (v1963 != v1964 && v1955 != v1958)
    {
      v1981 = *v1963;
      if (*v1963 > v1956)
      {
        v1982 = v1955 + 1;
        while (v1982 != v1958)
        {
          ++v1956;
          v1983 = *v1982++;
          if (v1983 != -1 && v1981 <= v1956)
          {
            v1955 = v1982 - 1;
            goto LABEL_1756;
          }
        }
        break;
      }
LABEL_1756:
      if (v1981 == v1956)
      {
        v1985 = (int8x16_t *)(*(_QWORD *)(result + 5776) + 8 * *v1955);
        if (v1985 == *(int8x16_t **)a2)
        {
          v1969 = v1985[7];
          v1971 = v1985[8];
          v1975 = v1985[5];
          v1970 = v1985[6];
          v1967 = v1985[3];
          v1976 = v1985[4];
          v1965 = v1985[1];
          v1968 = v1985[2];
          v1972 = vextq_s8(v1971, v1971, 8uLL).u64[0];
          v1973 = vextq_s8(v1969, v1969, 8uLL).u64[0];
          v1974 = vextq_s8(v1970, v1970, 8uLL).u64[0];
          v1966 = *v1985;
        }
        else
        {
          v1966 = *v1985;
          v1965 = v1985[1];
          v1968 = v1985[2];
          v1967 = v1985[3];
          v1970 = v1985[6];
          v1969 = v1985[7];
          v1971 = v1985[8];
          v1972 = vextq_s8(v1971, v1971, 8uLL).u64[0];
          v1973 = vextq_s8(v1969, v1969, 8uLL).u64[0];
          v1974 = vextq_s8(v1970, v1970, 8uLL).u64[0];
          v1976 = v1985[4];
          v1975 = v1985[5];
        }
        v1977 = *(unsigned int *)(a2 + 16);
        v1978 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1963[1] + (_DWORD)v1977 * v1696[1]));
        v1968.i64[1] = vextq_s8(v1968, v1968, 8uLL).u64[0];
        v1965.i64[1] = vextq_s8(v1965, v1965, 8uLL).u64[0];
        v1966.i64[1] = vextq_s8(v1966, v1966, 8uLL).u64[0];
        v1975.i64[1] = vextq_s8(v1975, v1975, 8uLL).u64[0];
        v1976.i64[1] = vextq_s8(v1976, v1976, 8uLL).u64[0];
        v1967.i64[1] = vextq_s8(v1967, v1967, 8uLL).u64[0];
        v1971.i64[1] = v1972;
        v1969.i64[1] = v1973;
        v1970.i64[1] = v1974;
        *v1978 = v1966;
        v1978[1] = v1965;
        v1978[2] = v1968;
        v1979 = (int8x16_t *)((char *)v1978 + 8 * v1977);
        *v1979 = v1967;
        v1979[1] = v1976;
        v1979[2] = v1975;
        v1980 = &v1978[v1977];
        *v1980 = v1970;
        v1980[1] = v1969;
        v1980[2] = v1971;
        v1956 = v1981;
      }
      v1963 += 2;
    }
    v1696 += 2;
  }
  while (v1696 != v1697);
  v1684 = *a3;
  v1685 = a3[1];
  v1950 = *(_DWORD **)(a4 + 120);
  v1951 = *(_DWORD **)(a4 + 128);
  if (*a3 == v1685 || v1950 == v1951)
    goto LABEL_1764;
  do
  {
LABEL_1781:
    v1996 = *(_QWORD *)(result + 7288);
    v1997 = (*(_DWORD *)(result + 7312) * *v1950);
    v1998 = (uint64_t *)(v1996 + 8 * v1997);
    v1999 = *(_DWORD *)(result + 7208);
    v2000 = (v1997 + v1999);
    v2001 = (uint64_t *)(v1996 + 8 * v2000);
    if (v1999 && *v1998 == -1)
    {
      v2013 = 8 * v2000 - 8 * v1997 - 8;
      v2014 = 1;
      v2015 = v1998;
      while (1)
      {
        v2002 = v2014;
        if (!v2013)
          break;
        v1998 = v2015 + 1;
        v2016 = v2015[1];
        ++v2014;
        v2013 -= 8;
        ++v2015;
        if (v2016 != -1)
          goto LABEL_1784;
      }
      v1998 = v2001;
    }
    else
    {
      v2002 = 0;
    }
LABEL_1784:
    v2003 = *a3;
    v2004 = a3[1];
    while (v2003 != v2004 && v1998 != v2001)
    {
      v2005 = *v2003;
      if (*v2003 > v2002)
      {
        v2006 = v1998 + 1;
        while (v2006 != v2001)
        {
          ++v2002;
          v2007 = *v2006++;
          if (v2007 != -1 && v2005 <= v2002)
          {
            v1998 = v2006 - 1;
            goto LABEL_1796;
          }
        }
        break;
      }
LABEL_1796:
      if (v2005 == v2002)
      {
        v2009 = (__int128 *)(*(_QWORD *)(result + 7216) + 8 * *v1998);
        v2010 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2003[1] + *(_DWORD *)(a2 + 16) * v1950[1]));
        v2011 = v2009[2];
        v2012 = *v2009;
        v2010[1] = v2009[1];
        v2010[2] = v2011;
        *v2010 = v2012;
        v2002 = v2005;
      }
      v2003 += 2;
    }
    v1950 += 2;
  }
  while (v1950 != v1951);
  v1684 = *a3;
  v1685 = a3[1];
  v1987 = *(_DWORD **)(a4 + 144);
  v1988 = *(_DWORD **)(a4 + 152);
  if (*a3 == v1685 || v1987 == v1988)
    goto LABEL_1769;
  do
  {
LABEL_1809:
    v2018 = *(_QWORD *)(result + 8728);
    v2019 = (*(_DWORD *)(result + 8752) * *v1987);
    v2020 = (uint64_t *)(v2018 + 8 * v2019);
    v2021 = *(_DWORD *)(result + 8648);
    v2022 = v2019 + v2021;
    v2023 = (uint64_t *)(v2018 + 8 * v2022);
    if (v2021)
    {
      if (*v2020 == -1)
      {
        v2024 = 8 * v2022 - 8 * v2019 - 8;
        v2025 = 1;
        v2026 = v2020;
        while (1)
        {
          v2021 = v2025;
          if (!v2024)
            break;
          v2020 = v2026 + 1;
          v2027 = v2026[1];
          ++v2025;
          v2024 -= 8;
          ++v2026;
          if (v2027 != -1)
            goto LABEL_1817;
        }
        v2020 = v2023;
      }
      else
      {
        v2021 = 0;
      }
    }
LABEL_1817:
    v2028 = *a3;
    v2029 = a3[1];
    while (v2028 != v2029 && v2020 != v2023)
    {
      v2047 = *v2028;
      if (*v2028 > v2021)
      {
        v2048 = v2020 + 1;
        while (v2048 != v2023)
        {
          ++v2021;
          v2049 = *v2048++;
          if (v2049 != -1 && v2047 <= v2021)
          {
            v2020 = v2048 - 1;
            goto LABEL_1831;
          }
        }
        break;
      }
LABEL_1831:
      if (v2047 == v2021)
      {
        v2051 = (int8x16_t *)(*(_QWORD *)(result + 8656) + 8 * *v2020);
        if (v2051 == *(int8x16_t **)a2)
        {
          v2039 = v2051[10];
          v2038 = v2051[11];
          v2037 = v2051[8];
          v2036 = v2051[9];
          v2035 = v2051[6];
          v2034 = v2051[7];
          v2033 = v2051[4];
          v2032 = v2051[5];
          v2031 = v2051[2];
          v2030 = v2051[3];
        }
        else
        {
          v2031 = v2051[2];
          v2030 = v2051[3];
          v2033 = v2051[4];
          v2032 = v2051[5];
          v2035 = v2051[6];
          v2034 = v2051[7];
          v2037 = v2051[8];
          v2036 = v2051[9];
          v2039 = v2051[10];
          v2038 = v2051[11];
        }
        v2041 = *v2051;
        v2040 = v2051[1];
        v2042 = *(unsigned int *)(a2 + 16);
        v2043 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2028[1] + (_DWORD)v2042 * v1987[1]));
        v2031.i64[1] = vextq_s8(v2031, v2031, 8uLL).u64[0];
        v2040.i64[1] = vextq_s8(v2040, v2040, 8uLL).u64[0];
        v2041.i64[1] = vextq_s8(v2041, v2041, 8uLL).u64[0];
        v2032.i64[1] = vextq_s8(v2032, v2032, 8uLL).u64[0];
        v2033.i64[1] = vextq_s8(v2033, v2033, 8uLL).u64[0];
        v2030.i64[1] = vextq_s8(v2030, v2030, 8uLL).u64[0];
        v2037.i64[1] = vextq_s8(v2037, v2037, 8uLL).u64[0];
        v2034.i64[1] = vextq_s8(v2034, v2034, 8uLL).u64[0];
        v2035.i64[1] = vextq_s8(v2035, v2035, 8uLL).u64[0];
        v2038.i64[1] = vextq_s8(v2038, v2038, 8uLL).u64[0];
        v2039.i64[1] = vextq_s8(v2039, v2039, 8uLL).u64[0];
        v2036.i64[1] = vextq_s8(v2036, v2036, 8uLL).u64[0];
        *v2043 = v2041;
        v2043[1] = v2040;
        v2043[2] = v2031;
        v2044 = (int8x16_t *)((char *)v2043 + 8 * v2042);
        *v2044 = v2030;
        v2044[1] = v2033;
        v2044[2] = v2032;
        v2045 = &v2043[v2042];
        *v2045 = v2035;
        v2045[1] = v2034;
        v2045[2] = v2037;
        v2046 = (int8x16_t *)((char *)v2043 + 24 * v2042);
        *v2046 = v2036;
        v2046[1] = v2039;
        v2046[2] = v2038;
        v2021 = v2047;
      }
      v2028 += 2;
    }
    v1987 += 2;
  }
  while (v1987 != v1988);
  v1684 = *a3;
  v1685 = a3[1];
  v1990 = *(_DWORD **)(a4 + 168);
  v1991 = *(_DWORD **)(a4 + 176);
  if (*a3 == v1685 || v1990 == v1991)
    goto LABEL_1774;
  do
  {
LABEL_1840:
    v2053 = *(_QWORD *)(result + 10168);
    v2054 = (*(_DWORD *)(result + 10192) * *v1990);
    v2055 = (uint64_t *)(v2053 + 8 * v2054);
    v2056 = *(_DWORD *)(result + 10088);
    v2057 = v2054 + v2056;
    v2058 = (uint64_t *)(v2053 + 8 * v2057);
    if (v2056)
    {
      if (*v2055 == -1)
      {
        v2059 = 8 * v2057 - 8 * v2054 - 8;
        v2060 = 1;
        v2061 = v2055;
        while (1)
        {
          v2056 = v2060;
          if (!v2059)
            break;
          v2055 = v2061 + 1;
          v2062 = v2061[1];
          ++v2060;
          v2059 -= 8;
          ++v2061;
          if (v2062 != -1)
            goto LABEL_1848;
        }
        v2055 = v2058;
      }
      else
      {
        v2056 = 0;
      }
    }
LABEL_1848:
    v2063 = *a3;
    v2064 = a3[1];
    while (v2063 != v2064 && v2055 != v2058)
    {
      v2082 = *v2063;
      if (*v2063 > v2056)
      {
        v2083 = v2055 + 1;
        while (v2083 != v2058)
        {
          ++v2056;
          v2084 = *v2083++;
          if (v2084 != -1 && v2082 <= v2056)
          {
            v2055 = v2083 - 1;
            goto LABEL_1862;
          }
        }
        break;
      }
LABEL_1862:
      if (v2082 == v2056)
      {
        v2086 = (int8x16_t *)(*(_QWORD *)(result + 10096) + 8 * *v2055);
        if (v2086 == *(int8x16_t **)a2)
        {
          v2074 = v2086[10];
          v2073 = v2086[11];
          v2072 = v2086[8];
          v2071 = v2086[9];
          v2070 = v2086[6];
          v2069 = v2086[7];
          v2068 = v2086[4];
          v2067 = v2086[5];
          v2066 = v2086[2];
          v2065 = v2086[3];
        }
        else
        {
          v2066 = v2086[2];
          v2065 = v2086[3];
          v2068 = v2086[4];
          v2067 = v2086[5];
          v2070 = v2086[6];
          v2069 = v2086[7];
          v2072 = v2086[8];
          v2071 = v2086[9];
          v2074 = v2086[10];
          v2073 = v2086[11];
        }
        v2076 = *v2086;
        v2075 = v2086[1];
        v2077 = *(unsigned int *)(a2 + 16);
        v2078 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2063[1] + (_DWORD)v2077 * v1990[1]));
        v2066.i64[1] = vextq_s8(v2066, v2066, 8uLL).u64[0];
        v2075.i64[1] = vextq_s8(v2075, v2075, 8uLL).u64[0];
        v2076.i64[1] = vextq_s8(v2076, v2076, 8uLL).u64[0];
        v2067.i64[1] = vextq_s8(v2067, v2067, 8uLL).u64[0];
        v2068.i64[1] = vextq_s8(v2068, v2068, 8uLL).u64[0];
        v2065.i64[1] = vextq_s8(v2065, v2065, 8uLL).u64[0];
        v2072.i64[1] = vextq_s8(v2072, v2072, 8uLL).u64[0];
        v2069.i64[1] = vextq_s8(v2069, v2069, 8uLL).u64[0];
        v2070.i64[1] = vextq_s8(v2070, v2070, 8uLL).u64[0];
        v2073.i64[1] = vextq_s8(v2073, v2073, 8uLL).u64[0];
        v2074.i64[1] = vextq_s8(v2074, v2074, 8uLL).u64[0];
        v2071.i64[1] = vextq_s8(v2071, v2071, 8uLL).u64[0];
        *v2078 = v2076;
        v2078[1] = v2075;
        v2078[2] = v2066;
        v2079 = (int8x16_t *)((char *)v2078 + 8 * v2077);
        *v2079 = v2065;
        v2079[1] = v2068;
        v2079[2] = v2067;
        v2080 = &v2078[v2077];
        *v2080 = v2070;
        v2080[1] = v2069;
        v2080[2] = v2072;
        v2081 = (int8x16_t *)((char *)v2078 + 24 * v2077);
        *v2081 = v2071;
        v2081[1] = v2074;
        v2081[2] = v2073;
        v2056 = v2082;
      }
      v2063 += 2;
    }
    v1990 += 2;
  }
  while (v1990 != v1991);
  v1684 = *a3;
  v1685 = a3[1];
  v1993 = *(_DWORD **)(a4 + 192);
  v1994 = *(_DWORD **)(a4 + 200);
  if (*a3 == v1685 || v1993 == v1994)
    goto LABEL_1870;
  do
  {
LABEL_1877:
    v2091 = *(_QWORD *)(result + 11608);
    v2092 = (*(_DWORD *)(result + 11632) * *v1993);
    v2093 = (uint64_t *)(v2091 + 8 * v2092);
    v2094 = *(_DWORD *)(result + 11528);
    v2095 = v2092 + v2094;
    v2096 = (uint64_t *)(v2091 + 8 * v2095);
    if (v2094)
    {
      if (*v2093 == -1)
      {
        v2097 = 8 * v2095 - 8 * v2092 - 8;
        v2098 = 1;
        v2099 = v2093;
        while (1)
        {
          v2094 = v2098;
          if (!v2097)
            break;
          v2093 = v2099 + 1;
          v2100 = v2099[1];
          ++v2098;
          v2097 -= 8;
          ++v2099;
          if (v2100 != -1)
            goto LABEL_1885;
        }
        v2093 = v2096;
      }
      else
      {
        v2094 = 0;
      }
    }
LABEL_1885:
    v2101 = *a3;
    v2102 = a3[1];
    while (v2101 != v2102 && v2093 != v2096)
    {
      v2119 = *v2101;
      if (*v2101 > v2094)
      {
        v2120 = v2093 + 1;
        while (v2120 != v2096)
        {
          ++v2094;
          v2121 = *v2120++;
          if (v2121 != -1 && v2119 <= v2094)
          {
            v2093 = v2120 - 1;
            goto LABEL_1899;
          }
        }
        break;
      }
LABEL_1899:
      if (v2119 == v2094)
      {
        v2123 = (int8x16_t *)(*(_QWORD *)(result + 11536) + 8 * *v2093);
        if (v2123 == *(int8x16_t **)a2)
        {
          v2107 = v2123[7];
          v2109 = v2123[8];
          v2113 = v2123[5];
          v2108 = v2123[6];
          v2105 = v2123[3];
          v2114 = v2123[4];
          v2103 = v2123[1];
          v2106 = v2123[2];
          v2110 = vextq_s8(v2109, v2109, 8uLL).u64[0];
          v2111 = vextq_s8(v2107, v2107, 8uLL).u64[0];
          v2112 = vextq_s8(v2108, v2108, 8uLL).u64[0];
          v2104 = *v2123;
        }
        else
        {
          v2104 = *v2123;
          v2103 = v2123[1];
          v2106 = v2123[2];
          v2105 = v2123[3];
          v2108 = v2123[6];
          v2107 = v2123[7];
          v2109 = v2123[8];
          v2110 = vextq_s8(v2109, v2109, 8uLL).u64[0];
          v2111 = vextq_s8(v2107, v2107, 8uLL).u64[0];
          v2112 = vextq_s8(v2108, v2108, 8uLL).u64[0];
          v2114 = v2123[4];
          v2113 = v2123[5];
        }
        v2115 = *(unsigned int *)(a2 + 16);
        v2116 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2101[1] + (_DWORD)v2115 * v1993[1]));
        v2106.i64[1] = vextq_s8(v2106, v2106, 8uLL).u64[0];
        v2103.i64[1] = vextq_s8(v2103, v2103, 8uLL).u64[0];
        v2104.i64[1] = vextq_s8(v2104, v2104, 8uLL).u64[0];
        v2113.i64[1] = vextq_s8(v2113, v2113, 8uLL).u64[0];
        v2114.i64[1] = vextq_s8(v2114, v2114, 8uLL).u64[0];
        v2105.i64[1] = vextq_s8(v2105, v2105, 8uLL).u64[0];
        v2109.i64[1] = v2110;
        v2107.i64[1] = v2111;
        v2108.i64[1] = v2112;
        *v2116 = v2104;
        v2116[1] = v2103;
        v2116[2] = v2106;
        v2117 = (int8x16_t *)((char *)v2116 + 8 * v2115);
        *v2117 = v2105;
        v2117[1] = v2114;
        v2117[2] = v2113;
        v2118 = &v2116[v2115];
        *v2118 = v2108;
        v2118[1] = v2107;
        v2118[2] = v2109;
        v2094 = v2119;
      }
      v2101 += 2;
    }
    v1993 += 2;
  }
  while (v1993 != v1994);
  v2088 = *(_DWORD **)(a4 + 216);
  v2089 = *(_DWORD **)(a4 + 224);
  if (*a3 != a3[1] && v2088 != v2089)
  {
    do
    {
LABEL_1909:
      v2125 = *(_QWORD *)(result + 13048);
      v2126 = (*(_DWORD *)(result + 13072) * *v2088);
      v2127 = (uint64_t *)(v2125 + 8 * v2126);
      v2128 = *(_DWORD *)(result + 12968);
      v2129 = v2126 + v2128;
      v2130 = (uint64_t *)(v2125 + 8 * v2129);
      if (v2128)
      {
        if (*v2127 == -1)
        {
          v2131 = 8 * v2129 - 8 * v2126 - 8;
          v2132 = 1;
          v2133 = v2127;
          while (1)
          {
            v2128 = v2132;
            if (!v2131)
              break;
            v2127 = v2133 + 1;
            v2134 = v2133[1];
            ++v2132;
            v2131 -= 8;
            ++v2133;
            if (v2134 != -1)
              goto LABEL_1917;
          }
          v2127 = v2130;
        }
        else
        {
          v2128 = 0;
        }
      }
LABEL_1917:
      v2135 = *a3;
      v2136 = a3[1];
      while (v2135 != v2136 && v2127 != v2130)
      {
        v2153 = *v2135;
        if (*v2135 > v2128)
        {
          v2154 = v2127 + 1;
          while (v2154 != v2130)
          {
            ++v2128;
            v2155 = *v2154++;
            if (v2155 != -1 && v2153 <= v2128)
            {
              v2127 = v2154 - 1;
              goto LABEL_1931;
            }
          }
          break;
        }
LABEL_1931:
        if (v2153 == v2128)
        {
          v2157 = (int8x16_t *)(*(_QWORD *)(result + 12976) + 8 * *v2127);
          if (v2157 == *(int8x16_t **)a2)
          {
            v2141 = v2157[7];
            v2143 = v2157[8];
            v2147 = v2157[5];
            v2142 = v2157[6];
            v2139 = v2157[3];
            v2148 = v2157[4];
            v2137 = v2157[1];
            v2140 = v2157[2];
            v2144 = vextq_s8(v2143, v2143, 8uLL).u64[0];
            v2145 = vextq_s8(v2141, v2141, 8uLL).u64[0];
            v2146 = vextq_s8(v2142, v2142, 8uLL).u64[0];
            v2138 = *v2157;
          }
          else
          {
            v2138 = *v2157;
            v2137 = v2157[1];
            v2140 = v2157[2];
            v2139 = v2157[3];
            v2142 = v2157[6];
            v2141 = v2157[7];
            v2143 = v2157[8];
            v2144 = vextq_s8(v2143, v2143, 8uLL).u64[0];
            v2145 = vextq_s8(v2141, v2141, 8uLL).u64[0];
            v2146 = vextq_s8(v2142, v2142, 8uLL).u64[0];
            v2148 = v2157[4];
            v2147 = v2157[5];
          }
          v2149 = *(unsigned int *)(a2 + 16);
          v2150 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2135[1] + (_DWORD)v2149 * v2088[1]));
          v2140.i64[1] = vextq_s8(v2140, v2140, 8uLL).u64[0];
          v2137.i64[1] = vextq_s8(v2137, v2137, 8uLL).u64[0];
          v2138.i64[1] = vextq_s8(v2138, v2138, 8uLL).u64[0];
          v2147.i64[1] = vextq_s8(v2147, v2147, 8uLL).u64[0];
          v2148.i64[1] = vextq_s8(v2148, v2148, 8uLL).u64[0];
          v2139.i64[1] = vextq_s8(v2139, v2139, 8uLL).u64[0];
          v2143.i64[1] = v2144;
          v2141.i64[1] = v2145;
          v2142.i64[1] = v2146;
          *v2150 = v2138;
          v2150[1] = v2137;
          v2150[2] = v2140;
          v2151 = (int8x16_t *)((char *)v2150 + 8 * v2149);
          *v2151 = v2139;
          v2151[1] = v2148;
          v2151[2] = v2147;
          v2152 = &v2150[v2149];
          *v2152 = v2142;
          v2152[1] = v2141;
          v2152[2] = v2143;
          v2128 = v2153;
        }
        v2135 += 2;
      }
      v2088 += 2;
    }
    while (v2088 != v2089);
  }
  return result;
}

_DWORD *sub_20F901C54(_DWORD *result, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;

  result[4] = a2;
  v2 = a2;
  if (*((_QWORD *)result + 1) < (unint64_t)a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (v4)
      MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
    v5 = (8 * v2 + 31) & 0xFFFFFFFE0;
    *v3 = 0;
    v3[1] = v5 >> 3;
    result = operator new(v5, (std::align_val_t)0x20uLL);
    *v3 = result;
  }
  return result;
}

_OWORD *sub_20F901CC0(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  _DWORD *v60;
  int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unsigned int v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unsigned int v85;
  int *v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _DWORD *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  _OWORD *v122;
  uint64_t v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  unsigned int v132;
  int v133;
  unint64_t v134;
  int v135;
  unsigned int v136;
  int v137;
  unint64_t v138;
  _DWORD *v139;
  uint64_t v140;
  unsigned int v141;
  __int128 *v142;
  uint64_t v143;
  _OWORD *v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  unsigned int v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _OWORD *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v227;
  unsigned int v228;
  int *v229;
  uint64_t v230;
  int v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  _OWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;

  v4 = (unsigned int *)(a2 + 31624);
  v5 = (unsigned int *)(a1 + 31624);
  sub_20F903130(a1 + 64, (__int128 *)(a2 + 64));
  memcpy((void *)(a1 + 31040), (const void *)(a2 + 31040), 0x104uLL);
  *v5 = 0;
  if (*v4)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 31304);
    v8 = a2 + 31304 + 80 * *v4;
    do
    {
      v9 = a1 + 31304 + 80 * v6;
      v10 = *v7;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)v7 + 2);
      *(_QWORD *)v9 = v10;
      v11 = *((_OWORD *)v7 + 2);
      *(_OWORD *)(v9 + 16) = *((_OWORD *)v7 + 1);
      *(_OWORD *)(v9 + 32) = v11;
      v12 = *((_OWORD *)v7 + 4);
      *(_OWORD *)(v9 + 48) = *((_OWORD *)v7 + 3);
      *(_OWORD *)(v9 + 64) = v12;
      v6 = *v5 + 1;
      *v5 = v6;
      v7 += 10;
    }
    while (v7 != (uint64_t *)v8);
  }
  v5[16] = 0;
  v13 = v4[16];
  if (v13)
  {
    v14 = 0;
    v15 = a2 + 31632;
    v16 = a2 + 31632 + 56 * v13;
    do
    {
      v17 = a1 + 31632 + 56 * v14;
      *(_QWORD *)v17 = *(_QWORD *)v15;
      v18 = *(_OWORD *)(v15 + 8);
      *(_QWORD *)(v17 + 24) = *(_QWORD *)(v15 + 24);
      *(_OWORD *)(v17 + 8) = v18;
      v19 = *(_QWORD *)(v15 + 48);
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(v15 + 32);
      *(_QWORD *)(v17 + 48) = v19;
      v14 = v5[16] + 1;
      v5[16] = v14;
      v15 += 56;
    }
    while (v15 != v16);
  }
  v5[24] = 0;
  v20 = v4[24];
  if (v20)
  {
    v21 = v4 + 18;
    v22 = (uint64_t)&v4[6 * v20 + 18];
    v23 = (_QWORD *)(a1 + 31712);
    v24 = 1;
    do
    {
      *((_DWORD *)v23 - 4) = *v21;
      *(v23 - 1) = *((_QWORD *)v21 + 1);
      *v23 = *((_QWORD *)v21 + 2);
      v23 += 3;
      v5[24] = v24++;
      v21 += 6;
    }
    while (v21 != (unsigned int *)v22);
  }
  v5[186] = 0;
  v25 = v4[186];
  if (v25)
  {
    v26 = 0;
    v27 = (uint64_t *)(a2 + 31728);
    v28 = a2 + 31728 + 160 * v25;
    do
    {
      v29 = a1 + 31728 + 160 * v26;
      v30 = *v27;
      *(_DWORD *)(v29 + 8) = *((_DWORD *)v27 + 2);
      *(_QWORD *)v29 = v30;
      v32 = *((_OWORD *)v27 + 3);
      v31 = *((_OWORD *)v27 + 4);
      v33 = *((_OWORD *)v27 + 2);
      *(_QWORD *)(v29 + 80) = v27[10];
      *(_OWORD *)(v29 + 48) = v32;
      *(_OWORD *)(v29 + 64) = v31;
      *(_OWORD *)(v29 + 32) = v33;
      *(_OWORD *)(v29 + 16) = *((_OWORD *)v27 + 1);
      v34 = *(_OWORD *)(v27 + 11);
      *(_QWORD *)(v29 + 104) = v27[13];
      *(_OWORD *)(v29 + 88) = v34;
      v35 = *((_OWORD *)v27 + 7);
      v36 = *((_OWORD *)v27 + 9);
      *(_OWORD *)(v29 + 128) = *((_OWORD *)v27 + 8);
      *(_OWORD *)(v29 + 144) = v36;
      *(_OWORD *)(v29 + 112) = v35;
      v26 = v5[186] + 1;
      v5[186] = v26;
      v27 += 20;
    }
    while (v27 != (uint64_t *)v28);
  }
  *(_DWORD *)(a1 + 35336) = 0;
  v37 = *(_DWORD *)(a2 + 35336);
  if (v37)
  {
    v38 = a2 + 32376 + 296 * v37;
    v39 = 1;
    v40 = a1 + 32376;
    v41 = a2 + 32376;
    do
    {
      *(_DWORD *)v40 = *(_DWORD *)v41;
      v42 = *(_OWORD *)(v41 + 8);
      v43 = *(_OWORD *)(v41 + 24);
      *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
      *(_OWORD *)(v40 + 24) = v43;
      *(_OWORD *)(v40 + 8) = v42;
      v44 = *(_OWORD *)(v41 + 56);
      v45 = *(_OWORD *)(v41 + 72);
      v46 = *(_OWORD *)(v41 + 88);
      *(_OWORD *)(v40 + 104) = *(_OWORD *)(v41 + 104);
      *(_OWORD *)(v40 + 88) = v46;
      *(_OWORD *)(v40 + 72) = v45;
      *(_OWORD *)(v40 + 56) = v44;
      v47 = *(_OWORD *)(v41 + 120);
      v48 = *(_OWORD *)(v41 + 136);
      v49 = *(_OWORD *)(v41 + 152);
      *(_QWORD *)(v40 + 168) = *(_QWORD *)(v41 + 168);
      *(_OWORD *)(v40 + 152) = v49;
      *(_OWORD *)(v40 + 136) = v48;
      *(_OWORD *)(v40 + 120) = v47;
      v50 = *(_OWORD *)(v41 + 176);
      v51 = *(_OWORD *)(v41 + 192);
      v52 = *(_OWORD *)(v41 + 224);
      *(_OWORD *)(v40 + 208) = *(_OWORD *)(v41 + 208);
      *(_OWORD *)(v40 + 224) = v52;
      *(_OWORD *)(v40 + 176) = v50;
      *(_OWORD *)(v40 + 192) = v51;
      v53 = *(_OWORD *)(v41 + 240);
      v54 = *(_OWORD *)(v41 + 256);
      v55 = *(_OWORD *)(v41 + 272);
      *(_QWORD *)(v40 + 288) = *(_QWORD *)(v41 + 288);
      *(_OWORD *)(v40 + 256) = v54;
      *(_OWORD *)(v40 + 272) = v55;
      *(_OWORD *)(v40 + 240) = v53;
      *(_DWORD *)(a1 + 35336) = v39++;
      v40 += 296;
      v41 += 296;
    }
    while (v41 != v38);
  }
  *(_OWORD *)(a1 + 35344) = *(_OWORD *)(a2 + 35344);
  *(_DWORD *)(a1 + 35360) = 0;
  v56 = *(_DWORD *)(a2 + 35360);
  if (v56)
  {
    v57 = 0;
    LOBYTE(v58) = 0;
    v59 = 0;
    do
    {
      *(_DWORD *)(a1 + 35360) = v57 + 1;
      *(_DWORD *)(a1 + 35364 + 4 * (v57 >> 5)) = (((*(_DWORD *)(a2 + 35364 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v58) & 1) << v57) | *(_DWORD *)(a1 + 35364 + 4 * (v57 >> 5)) & ~(1 << v57);
      v58 = v59 + 1;
      v59 = (v59 + 1);
      ++v57;
    }
    while (v56 != v58);
  }
  v60 = (_DWORD *)(a1 + 42744);
  *(_DWORD *)(a1 + 35368) = 0;
  v61 = *(_DWORD *)(a2 + 35368);
  if (v61)
  {
    v62 = 0;
    LOBYTE(v63) = 0;
    v64 = 0;
    do
    {
      *(_DWORD *)(a1 + 35368) = v62 + 1;
      *(_DWORD *)(a1 + 35372 + 4 * (v62 >> 5)) = (((*(_DWORD *)(a2 + 35372 + ((v64 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v63) & 1) << v62) | *(_DWORD *)(a1 + 35372 + 4 * (v62 >> 5)) & ~(1 << v62);
      v63 = v64 + 1;
      v64 = (v64 + 1);
      ++v62;
    }
    while (v61 != v63);
  }
  v65 = *(_OWORD *)(a2 + 35376);
  *(_OWORD *)(a1 + 35392) = *(_OWORD *)(a2 + 35392);
  *(_OWORD *)(a1 + 35376) = v65;
  v66 = *(_OWORD *)(a2 + 35408);
  v67 = *(_OWORD *)(a2 + 35424);
  v68 = *(_OWORD *)(a2 + 35440);
  *(_OWORD *)(a1 + 35456) = *(_OWORD *)(a2 + 35456);
  *(_OWORD *)(a1 + 35440) = v68;
  *(_OWORD *)(a1 + 35424) = v67;
  *(_OWORD *)(a1 + 35408) = v66;
  v69 = *(_OWORD *)(a2 + 35472);
  v70 = *(_OWORD *)(a2 + 35488);
  v71 = *(_OWORD *)(a2 + 35504);
  *(_OWORD *)(a1 + 35517) = *(_OWORD *)(a2 + 35517);
  *(_OWORD *)(a1 + 35504) = v71;
  *(_OWORD *)(a1 + 35488) = v70;
  *(_OWORD *)(a1 + 35472) = v69;
  *(_DWORD *)(a1 + 42736) = 0;
  v72 = *(unsigned int *)(a2 + 42736);
  if ((_DWORD)v72)
  {
    v73 = 0;
    v74 = (__int128 *)(a2 + 35536);
    v75 = 24 * v72;
    do
    {
      v76 = a1 + 35536 + 24 * v73;
      v77 = *v74;
      *(_QWORD *)(v76 + 16) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      v74 = (__int128 *)((char *)v74 + 24);
      v73 = *(_DWORD *)(a1 + 42736) + 1;
      *(_DWORD *)(a1 + 42736) = v73;
      v75 -= 24;
    }
    while (v75);
  }
  *v60 = 0;
  v78 = *(_DWORD *)(a2 + 42744);
  if (v78)
  {
    v79 = 0;
    LOBYTE(v80) = 0;
    v81 = 0;
    do
    {
      *v60 = v79 + 1;
      *(_DWORD *)(a1 + 42748 + 4 * (v79 >> 5)) = (((*(_DWORD *)(a2 + 42748 + ((v81 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v80) & 1) << v79) | *(_DWORD *)(a1 + 42748 + 4 * (v79 >> 5)) & ~(1 << v79);
      v80 = v81 + 1;
      v81 = (v81 + 1);
      ++v79;
    }
    while (v78 != v80);
  }
  v82 = *(_OWORD *)(a2 + 42788);
  v83 = *(_OWORD *)(a2 + 42804);
  *(_DWORD *)(a1 + 42820) = *(_DWORD *)(a2 + 42820);
  *(_OWORD *)(a1 + 42788) = v82;
  *(_OWORD *)(a1 + 42804) = v83;
  *(_WORD *)(a1 + 42824) = *(_WORD *)(a2 + 42824);
  *(_DWORD *)(a1 + 43608) = 0;
  v84 = *(unsigned int *)(a2 + 43608);
  if ((_DWORD)v84)
  {
    v85 = 0;
    v86 = (int *)(a2 + 42828);
    v87 = 4 * v84;
    do
    {
      v88 = *v86++;
      *(_DWORD *)(a1 + 42828 + 4 * v85) = v88;
      v85 = *(_DWORD *)(a1 + 43608) + 1;
      *(_DWORD *)(a1 + 43608) = v85;
      v87 -= 4;
    }
    while (v87);
  }
  *(_DWORD *)(a1 + 43612) = *(_DWORD *)(a2 + 43612);
  v89 = *(_OWORD *)(a2 + 43616);
  *(_OWORD *)(a1 + 43632) = *(_OWORD *)(a2 + 43632);
  *(_OWORD *)(a1 + 43616) = v89;
  v90 = *(_OWORD *)(a2 + 43648);
  *(_OWORD *)(a1 + 43664) = *(_OWORD *)(a2 + 43664);
  *(_OWORD *)(a1 + 43648) = v90;
  v91 = *(_OWORD *)(a2 + 43680);
  *(_OWORD *)(a1 + 43696) = *(_OWORD *)(a2 + 43696);
  *(_OWORD *)(a1 + 43680) = v91;
  v92 = *(_OWORD *)(a2 + 43712);
  *(_OWORD *)(a1 + 43728) = *(_OWORD *)(a2 + 43728);
  *(_OWORD *)(a1 + 43712) = v92;
  v93 = *(_OWORD *)(a2 + 43744);
  *(_OWORD *)(a1 + 43760) = *(_OWORD *)(a2 + 43760);
  *(_OWORD *)(a1 + 43744) = v93;
  v94 = *(_OWORD *)(a2 + 43776);
  *(_OWORD *)(a1 + 43792) = *(_OWORD *)(a2 + 43792);
  *(_OWORD *)(a1 + 43776) = v94;
  v95 = *(_OWORD *)(a2 + 43808);
  *(_OWORD *)(a1 + 43824) = *(_OWORD *)(a2 + 43824);
  *(_OWORD *)(a1 + 43808) = v95;
  v96 = *(_OWORD *)(a2 + 43840);
  *(_OWORD *)(a1 + 43856) = *(_OWORD *)(a2 + 43856);
  *(_OWORD *)(a1 + 43840) = v96;
  v97 = *(_OWORD *)(a2 + 43872);
  *(_OWORD *)(a1 + 43888) = *(_OWORD *)(a2 + 43888);
  *(_OWORD *)(a1 + 43872) = v97;
  v98 = *(_OWORD *)(a2 + 43904);
  *(_OWORD *)(a1 + 43920) = *(_OWORD *)(a2 + 43920);
  *(_OWORD *)(a1 + 43904) = v98;
  v99 = *(_OWORD *)(a2 + 43936);
  *(_OWORD *)(a1 + 43952) = *(_OWORD *)(a2 + 43952);
  *(_OWORD *)(a1 + 43936) = v99;
  v100 = *(_OWORD *)(a2 + 43968);
  *(_OWORD *)(a1 + 43984) = *(_OWORD *)(a2 + 43984);
  *(_OWORD *)(a1 + 43968) = v100;
  v101 = *(_OWORD *)(a2 + 44000);
  *(_OWORD *)(a1 + 44016) = *(_OWORD *)(a2 + 44016);
  *(_OWORD *)(a1 + 44000) = v101;
  v102 = *(_OWORD *)(a2 + 44032);
  *(_OWORD *)(a1 + 44048) = *(_OWORD *)(a2 + 44048);
  *(_OWORD *)(a1 + 44032) = v102;
  v103 = *(_OWORD *)(a2 + 44064);
  *(_OWORD *)(a1 + 44080) = *(_OWORD *)(a2 + 44080);
  *(_OWORD *)(a1 + 44064) = v103;
  v104 = *(_OWORD *)(a2 + 44096);
  *(_OWORD *)(a1 + 44112) = *(_OWORD *)(a2 + 44112);
  *(_OWORD *)(a1 + 44096) = v104;
  v105 = *(_OWORD *)(a2 + 44128);
  *(_OWORD *)(a1 + 44144) = *(_OWORD *)(a2 + 44144);
  *(_OWORD *)(a1 + 44128) = v105;
  v106 = *(_OWORD *)(a2 + 44160);
  *(_OWORD *)(a1 + 44176) = *(_OWORD *)(a2 + 44176);
  *(_OWORD *)(a1 + 44160) = v106;
  v107 = *(_OWORD *)(a2 + 44192);
  *(_OWORD *)(a1 + 44208) = *(_OWORD *)(a2 + 44208);
  *(_OWORD *)(a1 + 44192) = v107;
  v108 = *(_OWORD *)(a2 + 44224);
  *(_OWORD *)(a1 + 44240) = *(_OWORD *)(a2 + 44240);
  *(_OWORD *)(a1 + 44224) = v108;
  v109 = *(_OWORD *)(a2 + 44256);
  *(_OWORD *)(a1 + 44272) = *(_OWORD *)(a2 + 44272);
  *(_OWORD *)(a1 + 44256) = v109;
  v110 = *(_OWORD *)(a2 + 44288);
  *(_OWORD *)(a1 + 44304) = *(_OWORD *)(a2 + 44304);
  *(_OWORD *)(a1 + 44288) = v110;
  memcpy((void *)(a1 + 44352), (const void *)(a2 + 44352), 0x4B080uLL);
  memcpy((void *)(a1 + 351680), (const void *)(a2 + 351680), 0xF78uLL);
  memcpy((void *)(a1 + 355640), (const void *)(a2 + 355640), 0x698uLL);
  memcpy((void *)(a1 + 357328), (const void *)(a2 + 357328), 0x698uLL);
  memcpy((void *)(a1 + 359016), (const void *)(a2 + 359016), 0x960uLL);
  memcpy((void *)(a1 + 361416), (const void *)(a2 + 361416), 0x9A8uLL);
  v236 = (_OWORD *)a1;
  sub_20F903130(a1 + 363904, (__int128 *)(a2 + 363904));
  v111 = (_DWORD *)(a1 + 453952);
  v112 = (unsigned int *)(a1 + 452496);
  *(_OWORD *)(a1 + 394880) = *(_OWORD *)(a2 + 394880);
  *(_DWORD *)(a1 + 452496) = 0;
  v113 = *(_DWORD *)(a2 + 452496);
  if (v113)
  {
    v114 = 0;
    v115 = a2 + 394896;
    v116 = a2 + 394896 + 72 * v113;
    do
    {
      v117 = a1 + 394896 + 72 * v114;
      *(_OWORD *)v117 = *(_OWORD *)v115;
      *(_QWORD *)(v117 + 16) = *(_QWORD *)(v115 + 16);
      v118 = *(_OWORD *)(v115 + 24);
      *(_QWORD *)(v117 + 40) = *(_QWORD *)(v115 + 40);
      *(_OWORD *)(v117 + 24) = v118;
      v119 = *(_QWORD *)(v115 + 64);
      *(_OWORD *)(v117 + 48) = *(_OWORD *)(v115 + 48);
      *(_QWORD *)(v117 + 64) = v119;
      v114 = *v112 + 1;
      *v112 = v114;
      v115 += 72;
    }
    while (v115 != v116);
  }
  *(_DWORD *)(a1 + 453944) = 0;
  v120 = *(unsigned int *)(a2 + 453944);
  if ((_DWORD)v120)
  {
    v121 = 0;
    v122 = (_OWORD *)(a2 + 452504);
    v123 = 144 * v120;
    do
    {
      v124 = (_OWORD *)(a1 + 452504 + 144 * v121);
      *v124 = *v122;
      v125 = v122[1];
      v126 = v122[2];
      v127 = v122[4];
      v124[3] = v122[3];
      v124[4] = v127;
      v124[1] = v125;
      v124[2] = v126;
      v128 = v122[5];
      v129 = v122[6];
      v130 = v122[8];
      v124[7] = v122[7];
      v124[8] = v130;
      v124[5] = v128;
      v124[6] = v129;
      v122 += 9;
      v121 = *(_DWORD *)(a1 + 453944) + 1;
      *(_DWORD *)(a1 + 453944) = v121;
      v123 -= 144;
    }
    while (v123);
  }
  *v111 = 0;
  v131 = *(_DWORD *)(a2 + 453952);
  if (v131)
  {
    v132 = 0;
    LOBYTE(v133) = 0;
    v134 = 0;
    do
    {
      *v111 = v132 + 1;
      *(_DWORD *)(a1 + 453956 + 4 * (v132 >> 5)) = (((*(_DWORD *)(a2 + 453956 + ((v134 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v133) & 1) << v132) | *(_DWORD *)(a1 + 453956 + 4 * (v132 >> 5)) & ~(1 << v132);
      v133 = v134 + 1;
      v134 = (v134 + 1);
      ++v132;
    }
    while (v131 != v133);
  }
  *(_DWORD *)(a1 + 454056) = 0;
  v135 = *(_DWORD *)(a2 + 454056);
  if (v135)
  {
    v136 = 0;
    LOBYTE(v137) = 0;
    v138 = 0;
    do
    {
      *(_DWORD *)(a1 + 454056) = v136 + 1;
      *(_DWORD *)(a1 + 454060 + 4 * (v136 >> 5)) = (((*(_DWORD *)(a2 + 454060 + ((v138 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v137) & 1) << v136) | *(_DWORD *)(a1 + 454060 + 4 * (v136 >> 5)) & ~(1 << v136);
      v137 = v138 + 1;
      v138 = (v138 + 1);
      ++v136;
    }
    while (v135 != v137);
  }
  v139 = (_DWORD *)(a1 + 511280);
  *(_DWORD *)(a1 + 454496) = 0;
  v140 = *(unsigned int *)(a2 + 454496);
  if ((_DWORD)v140)
  {
    v141 = 0;
    v142 = (__int128 *)(a2 + 454208);
    v143 = 32 * v140;
    do
    {
      v144 = (_OWORD *)(a1 + 454208 + 32 * v141);
      v145 = *v142;
      v146 = v142[1];
      v142 += 2;
      *v144 = v145;
      v144[1] = v146;
      v141 = *(_DWORD *)(a1 + 454496) + 1;
      *(_DWORD *)(a1 + 454496) = v141;
      v143 -= 32;
    }
    while (v143);
  }
  *(_DWORD *)(a1 + 455272) = 0;
  v147 = *(unsigned int *)(a2 + 455272);
  if ((_DWORD)v147)
  {
    v148 = 0;
    v149 = (__int128 *)(a2 + 454504);
    v150 = 24 * v147;
    do
    {
      v151 = a1 + 454504 + 24 * v148;
      v152 = *v149;
      *(_QWORD *)(v151 + 16) = *((_QWORD *)v149 + 2);
      *(_OWORD *)v151 = v152;
      v149 = (__int128 *)((char *)v149 + 24);
      v148 = *(_DWORD *)(a1 + 455272) + 1;
      *(_DWORD *)(a1 + 455272) = v148;
      v150 -= 24;
    }
    while (v150);
  }
  v153 = (unsigned int *)(a1 + 578672);
  *v139 = 0;
  v154 = *(_DWORD *)(a2 + 511280);
  if (v154)
  {
    v155 = a2 + 455280;
    v156 = a2 + 455280 + 56 * v154;
    v157 = a1 + 455312;
    v158 = 1;
    do
    {
      *(_QWORD *)(v157 - 32) = *(_QWORD *)v155;
      v159 = *(_OWORD *)(v155 + 8);
      *(_QWORD *)(v157 - 8) = *(_QWORD *)(v155 + 24);
      *(_OWORD *)(v157 - 24) = v159;
      v160 = *(_OWORD *)(v155 + 32);
      *(_QWORD *)(v157 + 16) = *(_QWORD *)(v155 + 48);
      *(_OWORD *)v157 = v160;
      v157 += 56;
      *v139 = v158++;
      v155 += 56;
    }
    while (v155 != v156);
  }
  v161 = 9;
  v162 = 511296;
  do
  {
    v163 = a1 + v162;
    v164 = *(_OWORD *)(a2 + v162);
    *(_QWORD *)(v163 + 16) = *(_QWORD *)(a2 + v162 + 16);
    *(_OWORD *)v163 = v164;
    v165 = *(_OWORD *)(a2 + v162 + 56);
    v166 = *(_OWORD *)(a2 + v162 + 72);
    v167 = *(_QWORD *)(a2 + v162 + 88);
    *(_OWORD *)(v163 + 40) = *(_OWORD *)(a2 + v162 + 40);
    *(_QWORD *)(v163 + 88) = v167;
    *(_OWORD *)(v163 + 72) = v166;
    *(_OWORD *)(v163 + 56) = v165;
    *(_OWORD *)(v163 + 24) = *(_OWORD *)(a2 + v162 + 24);
    v169 = *(_OWORD *)(a2 + v162 + 176);
    v168 = *(_OWORD *)(a2 + v162 + 192);
    v170 = *(_OWORD *)(a2 + v162 + 160);
    *(_QWORD *)(v163 + 208) = *(_QWORD *)(a2 + v162 + 208);
    *(_OWORD *)(v163 + 176) = v169;
    *(_OWORD *)(v163 + 192) = v168;
    *(_OWORD *)(v163 + 160) = v170;
    v171 = *(_OWORD *)(a2 + v162 + 96);
    v172 = *(_OWORD *)(a2 + v162 + 112);
    v173 = *(_OWORD *)(a2 + v162 + 144);
    *(_OWORD *)(v163 + 128) = *(_OWORD *)(a2 + v162 + 128);
    *(_OWORD *)(v163 + 144) = v173;
    *(_OWORD *)(v163 + 96) = v171;
    *(_OWORD *)(v163 + 112) = v172;
    v174 = (_OWORD *)(a1 + v162 + 216);
    v175 = *(_OWORD *)(a2 + v162 + 216);
    v176 = *(_OWORD *)(a2 + v162 + 232);
    v177 = *(_OWORD *)(a2 + v162 + 248);
    v174[3] = *(_OWORD *)(a2 + v162 + 264);
    *(_OWORD *)(v163 + 248) = v177;
    *(_OWORD *)(v163 + 232) = v176;
    *(_OWORD *)(v163 + 216) = v175;
    v178 = *(_OWORD *)(a2 + v162 + 280);
    v179 = *(_OWORD *)(a2 + v162 + 296);
    v180 = *(_OWORD *)(a2 + v162 + 312);
    *(_QWORD *)(v163 + 328) = *(_QWORD *)(a2 + v162 + 328);
    v174[5] = v179;
    v174[6] = v180;
    v174[4] = v178;
    memcpy((void *)(a1 + v162 + 336), (const void *)(a2 + v162 + 336), 0x168uLL);
    memcpy((void *)(a1 + v162 + 696), (const void *)(a2 + v162 + 696), 0x168uLL);
    memcpy((void *)(a1 + v162 + 1056), (const void *)(a2 + v162 + 1056), 0x438uLL);
    memcpy((void *)(a1 + v162 + 2136), (const void *)(a2 + v162 + 2136), 0x168uLL);
    memcpy((void *)(a1 + v162 + 2496), (const void *)(a2 + v162 + 2496), 0x168uLL);
    memcpy((void *)(a1 + v162 + 2856), (const void *)(a2 + v162 + 2856), 0x438uLL);
    v162 += 3936;
    --v161;
  }
  while (v161);
  v181 = *(_QWORD *)(a2 + 546720);
  *(_BYTE *)(a1 + 546728) = *(_BYTE *)(a2 + 546728);
  *(_QWORD *)(a1 + 546720) = v181;
  *v153 = 0;
  v182 = *(_DWORD *)(a2 + 578672);
  if (v182)
  {
    v183 = 0;
    v184 = 0;
    v248 = a1 + 546752;
    v247 = 3192 * v182;
    v246 = a2 + 549912;
    v245 = a2 + 548088;
    v244 = a2 + 548064;
    v243 = a2 + 547344;
    v242 = a2 + 547272;
    v241 = a2 + 547200;
    v240 = a2 + 547128;
    v239 = a2 + 547056;
    v238 = a2 + 546984;
    v237 = a2 + 546912;
    v185 = a2 + 546840;
    v186 = a2 + 546808;
    v187 = a2 + 546784;
    v188 = a2 + 546760;
    do
    {
      _X21 = a2 + 553136 + v183;
      __asm { PRFM            #0, [X21] }
      v195 = v248 + 3192 * v184;
      *(_QWORD *)v195 = *(_QWORD *)(a2 + 546752 + v183);
      v196 = *(_OWORD *)(v188 + v183);
      *(_QWORD *)(v195 + 24) = *(_QWORD *)(v188 + v183 + 16);
      *(_OWORD *)(v195 + 8) = v196;
      v197 = *(_OWORD *)(v187 + v183);
      *(_QWORD *)(v195 + 48) = *(_QWORD *)(v187 + v183 + 16);
      *(_OWORD *)(v195 + 32) = v197;
      v198 = *(_OWORD *)(v186 + v183);
      *(_OWORD *)(v195 + 72) = *(_OWORD *)(v186 + v183 + 16);
      *(_OWORD *)(v195 + 56) = v198;
      v200 = *(_OWORD *)(v185 + v183 + 32);
      v199 = *(_OWORD *)(v185 + v183 + 48);
      v201 = *(_QWORD *)(v185 + v183 + 64);
      *(_OWORD *)(v195 + 104) = *(_OWORD *)(v185 + v183 + 16);
      *(_QWORD *)(v195 + 152) = v201;
      *(_OWORD *)(v195 + 136) = v199;
      *(_OWORD *)(v195 + 120) = v200;
      *(_OWORD *)(v195 + 88) = *(_OWORD *)(v185 + v183);
      v203 = *(_OWORD *)(v237 + v183 + 32);
      v202 = *(_OWORD *)(v237 + v183 + 48);
      v204 = *(_OWORD *)(v237 + v183 + 16);
      *(_QWORD *)(v195 + 224) = *(_QWORD *)(v237 + v183 + 64);
      *(_OWORD *)(v195 + 192) = v203;
      *(_OWORD *)(v195 + 208) = v202;
      *(_OWORD *)(v195 + 176) = v204;
      *(_OWORD *)(v195 + 160) = *(_OWORD *)(v237 + v183);
      *(_OWORD *)(v195 + 232) = *(_OWORD *)(v238 + v183);
      v205 = *(_OWORD *)(v238 + v183 + 16);
      v206 = *(_OWORD *)(v238 + v183 + 32);
      v207 = *(_OWORD *)(v238 + v183 + 48);
      *(_QWORD *)(v195 + 296) = *(_QWORD *)(v238 + v183 + 64);
      *(_OWORD *)(v195 + 264) = v206;
      *(_OWORD *)(v195 + 280) = v207;
      *(_OWORD *)(v195 + 248) = v205;
      *(_OWORD *)(v195 + 304) = *(_OWORD *)(v239 + v183);
      v208 = *(_OWORD *)(v239 + v183 + 16);
      v209 = *(_OWORD *)(v239 + v183 + 32);
      v210 = *(_OWORD *)(v239 + v183 + 48);
      *(_QWORD *)(v195 + 368) = *(_QWORD *)(v239 + v183 + 64);
      *(_OWORD *)(v195 + 336) = v209;
      *(_OWORD *)(v195 + 352) = v210;
      *(_OWORD *)(v195 + 320) = v208;
      *(_OWORD *)(v195 + 376) = *(_OWORD *)(v240 + v183);
      v211 = *(_OWORD *)(v240 + v183 + 16);
      v212 = *(_OWORD *)(v240 + v183 + 32);
      v213 = *(_OWORD *)(v240 + v183 + 48);
      *(_QWORD *)(v195 + 440) = *(_QWORD *)(v240 + v183 + 64);
      *(_OWORD *)(v195 + 408) = v212;
      *(_OWORD *)(v195 + 424) = v213;
      *(_OWORD *)(v195 + 392) = v211;
      *(_OWORD *)(v195 + 448) = *(_OWORD *)(v241 + v183);
      v214 = *(_OWORD *)(v241 + v183 + 16);
      v215 = *(_OWORD *)(v241 + v183 + 32);
      v216 = *(_OWORD *)(v241 + v183 + 48);
      *(_QWORD *)(v195 + 512) = *(_QWORD *)(v241 + v183 + 64);
      *(_OWORD *)(v195 + 480) = v215;
      *(_OWORD *)(v195 + 496) = v216;
      *(_OWORD *)(v195 + 464) = v214;
      *(_OWORD *)(v195 + 520) = *(_OWORD *)(v242 + v183);
      v217 = *(_OWORD *)(v242 + v183 + 16);
      v218 = *(_OWORD *)(v242 + v183 + 32);
      v219 = *(_OWORD *)(v242 + v183 + 48);
      *(_QWORD *)(v195 + 584) = *(_QWORD *)(v242 + v183 + 64);
      *(_OWORD *)(v195 + 552) = v218;
      *(_OWORD *)(v195 + 568) = v219;
      *(_OWORD *)(v195 + 536) = v217;
      *(_OWORD *)(v195 + 592) = *(_OWORD *)(v243 + v183);
      v220 = *(_OWORD *)(v243 + v183 + 16);
      v221 = *(_OWORD *)(v243 + v183 + 32);
      v222 = *(_OWORD *)(v243 + v183 + 48);
      *(_QWORD *)(v195 + 656) = *(_QWORD *)(v243 + v183 + 64);
      *(_OWORD *)(v195 + 624) = v221;
      *(_OWORD *)(v195 + 640) = v222;
      *(_OWORD *)(v195 + 608) = v220;
      memcpy((void *)(v195 + 664), (const void *)(a2 + 547416 + v183), 0x288uLL);
      v223 = *(_OWORD *)(v244 + v183);
      *(_QWORD *)(v195 + 1328) = *(_QWORD *)(v244 + v183 + 16);
      *(_OWORD *)(v195 + 1312) = v223;
      v224 = *(_QWORD *)(v245 + v183 + 16);
      *(_OWORD *)(v195 + 1336) = *(_OWORD *)(v245 + v183);
      *(_QWORD *)(v195 + 1352) = v224;
      memcpy((void *)(v195 + 1360), (const void *)(a2 + 548112 + v183), 0x708uLL);
      v225 = *(_QWORD *)(v246 + v183 + 16);
      *(_OWORD *)(v195 + 3160) = *(_OWORD *)(v246 + v183);
      *(_QWORD *)(v195 + 3176) = v225;
      __asm { PRFM            #0, [X21,#0xC70] }
      *(_QWORD *)(v195 + 3184) = *(_QWORD *)(a2 + 549936 + v183);
      v184 = *v153 + 1;
      *v153 = v184;
      v183 += 3192;
    }
    while (v247 != v183);
  }
  v153[6] = 0;
  v227 = *(unsigned int *)(a2 + 578696);
  if ((_DWORD)v227)
  {
    v228 = 0;
    v229 = (int *)(a2 + 578688);
    v230 = 4 * v227;
    do
    {
      v231 = *v229++;
      *((_DWORD *)v236 + v228 + 144672) = v231;
      v228 = v153[6] + 1;
      v153[6] = v228;
      v230 -= 4;
    }
    while (v230);
  }
  sub_20F903AD0((uint64_t)(v236 + 36169), a2 + 578704);
  sub_20F903AD0((uint64_t)v236 + 748476, a2 + 748476);
  sub_20F903AD0((uint64_t)v236 + 918252, a2 + 918252);
  sub_20F903AD0((uint64_t)v236 + 1088024, a2 + 1088024);
  memcpy(v236 + 78616, (const void *)(a2 + 1257856), 0x39210uLL);
  memcpy(v236 + 93244, (const void *)(a2 + 1491904), 0x4B080uLL);
  memcpy(v236 + 112452, (const void *)(a2 + 1799232), 0xF78uLL);
  sub_20F903130((uint64_t)(v236 + 112700), (__int128 *)(a2 + 1803200));
  memcpy(v236 + 114636, (const void *)(a2 + 1834176), 0x4B080uLL);
  memcpy(v236 + 133844, (const void *)(a2 + 2141504), 0xF78uLL);
  v232 = *(_OWORD *)(a2 + 2145520);
  v234 = *(_OWORD *)(a2 + 2145472);
  v233 = *(_OWORD *)(a2 + 2145488);
  v236[134094] = *(_OWORD *)(a2 + 2145504);
  v236[134095] = v232;
  v236[134092] = v234;
  v236[134093] = v233;
  return v236;
}

void sub_20F902DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;

  sub_20F902E44(v14);
  *v16 = 0;
  *a9 = 0;
  *(_DWORD *)(v15 + 1320) = 0;
  *(_DWORD *)(v15 + 544) = 0;
  a10[362] = 0;
  *a10 = 0;
  sub_20F902EEC(a11);
  sub_20F902FE4(a14);
  _Unwind_Resume(a1);
}

void sub_20F902E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  sub_20F902FE4(a14);
  _Unwind_Resume(a1);
}

_DWORD *sub_20F902E44(_DWORD *result)
{
  result[169776] = 0;
  result[155975] = 0;
  result[128374] = 0;
  result[128073] = 0;
  result[127921] = 0;
  result[127845] = 0;
  result[127333] = 0;
  result[113532] = 0;
  result[85931] = 0;
  result[85630] = 0;
  result[85478] = 0;
  result[85402] = 0;
  result[84889] = 0;
  result[71088] = 0;
  result[43487] = 0;
  result[43186] = 0;
  result[43034] = 0;
  result[42958] = 0;
  result[42446] = 0;
  result[28645] = 0;
  result[1044] = 0;
  result[743] = 0;
  result[591] = 0;
  result[515] = 0;
  result[2] = 0;
  return result;
}

_DWORD *sub_20F902EEC(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v1 = result + 4584;
  result[7732] = 0;
  result[7714] = 0;
  v2 = result[5312];
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == 1)
    {
      v3 = 0;
LABEL_7:
      v6 = v2 - v3;
      v7 = &result[66 * v3 + 4716];
      do
      {
        *v7 = 0;
        v7 += 66;
        --v6;
      }
      while (v6);
      goto LABEL_9;
    }
    v3 = v2 & 0xFFFFFFFE;
    v4 = result + 4716;
    v5 = v3;
    do
    {
      *v4 = 0;
      v4[66] = 0;
      v4 += 132;
      v5 -= 2;
    }
    while (v5);
    if (v3 != v2)
      goto LABEL_7;
  }
LABEL_9:
  result[5312] = 0;
  result[4650] = 0;
  v8 = *v1;
  if (!(_DWORD)v8)
    goto LABEL_17;
  if ((_DWORD)v8 == 1)
  {
    v9 = 0;
LABEL_15:
    v12 = v8 - v9;
    v13 = &result[1020 * v9 + 1522];
    do
    {
      *v13 = 0;
      v13 += 1020;
      --v12;
    }
    while (v12);
    goto LABEL_17;
  }
  v9 = v8 & 0xFFFFFFFE;
  v10 = result + 1522;
  v11 = v9;
  do
  {
    *v10 = 0;
    v10[1020] = 0;
    v10 += 2040;
    v11 -= 2;
  }
  while (v11);
  if (v9 != v8)
    goto LABEL_15;
LABEL_17:
  *v1 = 0;
  result[502] = 0;
  result[420] = 0;
  return result;
}

_DWORD *sub_20F902FE4(_DWORD *a1)
{
  _DWORD *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v2 = a1 + 8834;
  v3 = a1 + 4600;
  sub_20F903D80(a1 + 90956);
  v2[2068] = 0;
  v2[1850] = 0;
  *v2 = 0;
  v3[3492] = 0;
  v3[3330] = 0;
  v3[3322] = 0;
  v3[3306] = 0;
  v3[3148] = 0;
  v3[3130] = 0;
  v4 = v3[728];
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 == 1)
    {
      v5 = 0;
LABEL_7:
      v8 = v4 - v5;
      v9 = &a1[66 * v5 + 4732];
      do
      {
        *v9 = 0;
        v9 += 66;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    v5 = v4 & 0xFFFFFFFE;
    v6 = v3 + 132;
    v7 = v5;
    do
    {
      *v6 = 0;
      v6[66] = 0;
      v6 += 132;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v4)
      goto LABEL_7;
  }
LABEL_9:
  v3[728] = 0;
  v3[66] = 0;
  v10 = *v3;
  if (!(_DWORD)v10)
    goto LABEL_17;
  if ((_DWORD)v10 == 1)
  {
    v11 = 0;
LABEL_15:
    v14 = v10 - v11;
    v15 = &a1[1020 * v11 + 1538];
    do
    {
      *v15 = 0;
      v15 += 1020;
      --v14;
    }
    while (v14);
    goto LABEL_17;
  }
  v11 = v10 & 0xFFFFFFFE;
  v12 = a1 + 1538;
  v13 = v11;
  do
  {
    *v12 = 0;
    v12[1020] = 0;
    v12 += 2040;
    v13 -= 2;
  }
  while (v13);
  if (v11 != v10)
    goto LABEL_15;
LABEL_17:
  *v3 = 0;
  a1[518] = 0;
  a1[436] = 0;
  return a1;
}

uint64_t sub_20F903130(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  _OWORD *v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  unsigned int v62;
  unsigned int v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int *v70;
  __int128 *v71;
  __int128 *v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unsigned int v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unsigned int v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;

  v3 = (uint64_t)a2 + 1992;
  *(_DWORD *)(a1 + 1680) = 0;
  v4 = *((_DWORD *)a2 + 420);
  if (v4)
  {
    v5 = 0;
    v6 = 168 * v4;
    v7 = a2;
    do
    {
      v8 = a1 + 168 * v5;
      v9 = *v7;
      v10 = v7[2];
      *(_OWORD *)(v8 + 16) = v7[1];
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)v8 = v9;
      v11 = v7[3];
      v12 = v7[4];
      v13 = v7[6];
      *(_OWORD *)(v8 + 80) = v7[5];
      *(_OWORD *)(v8 + 96) = v13;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 64) = v12;
      v14 = v7[7];
      v15 = v7[8];
      v16 = v7[9];
      *(_QWORD *)(v8 + 160) = *((_QWORD *)v7 + 20);
      *(_OWORD *)(v8 + 128) = v15;
      *(_OWORD *)(v8 + 144) = v16;
      *(_OWORD *)(v8 + 112) = v14;
      v7 = (__int128 *)((char *)v7 + 168);
      v5 = *(_DWORD *)(a1 + 1680) + 1;
      *(_DWORD *)(a1 + 1680) = v5;
      v6 -= 168;
    }
    while (v6);
  }
  v17 = *(__int128 *)((char *)a2 + 1704);
  *(_OWORD *)(a1 + 1688) = *(__int128 *)((char *)a2 + 1688);
  *(_OWORD *)(a1 + 1704) = v17;
  v18 = *(__int128 *)((char *)a2 + 1720);
  *(_QWORD *)(a1 + 1736) = *((_QWORD *)a2 + 217);
  *(_OWORD *)(a1 + 1720) = v18;
  *(_QWORD *)(a1 + 1744) = *((_QWORD *)a2 + 218);
  v19 = *(__int128 *)((char *)a2 + 1752);
  *(_QWORD *)(a1 + 1768) = *((_QWORD *)a2 + 221);
  *(_OWORD *)(a1 + 1752) = v19;
  v20 = a2[111];
  *(_QWORD *)(a1 + 1792) = *((_QWORD *)a2 + 224);
  *(_OWORD *)(a1 + 1776) = v20;
  v21 = *(__int128 *)((char *)a2 + 1800);
  *(_QWORD *)(a1 + 1816) = *((_QWORD *)a2 + 227);
  *(_OWORD *)(a1 + 1800) = v21;
  v22 = a2[114];
  *(_QWORD *)(a1 + 1840) = *((_QWORD *)a2 + 230);
  *(_OWORD *)(a1 + 1824) = v22;
  v24 = *(__int128 *)((char *)a2 + 1880);
  v23 = *(__int128 *)((char *)a2 + 1896);
  v25 = *(__int128 *)((char *)a2 + 1864);
  *(_QWORD *)(a1 + 1912) = *((_QWORD *)a2 + 239);
  *(_OWORD *)(a1 + 1880) = v24;
  *(_OWORD *)(a1 + 1896) = v23;
  *(_OWORD *)(a1 + 1864) = v25;
  *(_OWORD *)(a1 + 1848) = *(__int128 *)((char *)a2 + 1848);
  v26 = a2[121];
  v27 = a2[122];
  v28 = a2[123];
  *(_QWORD *)(a1 + 1984) = *((_QWORD *)a2 + 248);
  *(_OWORD *)(a1 + 1968) = v28;
  *(_OWORD *)(a1 + 1952) = v27;
  *(_OWORD *)(a1 + 1936) = v26;
  *(_OWORD *)(a1 + 1920) = a2[120];
  *(_DWORD *)(a1 + 2008) = 0;
  v29 = *((unsigned int *)a2 + 502);
  if ((_DWORD)v29)
  {
    v30 = 0;
    v31 = (v29 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v31 < 7)
    {
      v32 = (uint64_t *)a2 + 249;
    }
    else
    {
      v32 = (uint64_t *)a2 + 249;
      if ((unint64_t)(a1 - (_QWORD)a2) >= 0x20)
      {
        v33 = v31 + 1;
        v30 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        v32 = (uint64_t *)(v3 + 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL));
        v34 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        v35 = (__int128 *)((char *)a2 + 1992);
        v36 = (_OWORD *)(a1 + 1992);
        do
        {
          v37 = *v35;
          v38 = v35[1];
          v35 += 2;
          *v36 = v37;
          v36[1] = v38;
          v36 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v33 == v30)
          goto LABEL_14;
      }
    }
    v39 = (uint64_t *)(v3 + 8 * v29);
    do
    {
      v40 = *v32++;
      *(_QWORD *)(a1 + 1992 + 8 * v30++) = v40;
    }
    while (v32 != v39);
LABEL_14:
    *(_DWORD *)(a1 + 2008) = v30;
  }
  *(_DWORD *)(a1 + 18336) = 0;
  v41 = *((_DWORD *)a2 + 4584);
  if (v41)
  {
    v42 = 0;
    v43 = a2 + 126;
    v44 = (uint64_t)&a2[255 * v41 + 126];
    do
    {
      v45 = (_DWORD *)(a1 + 2016 + 4080 * v42);
      *v45 = *v43;
      v45[1018] = 0;
      v46 = v43[1018];
      if (v46)
      {
        v47 = 0;
        v48 = v45 + 2;
        v49 = (uint64_t)(v43 + 2);
        v50 = v45 + 1018;
        v51 = (uint64_t)&v43[254 * v46 + 2];
        do
        {
          v52 = (uint64_t)&v48[254 * v47];
          *(_DWORD *)(v52 + 568) = 0;
          *(_OWORD *)(v52 + 576) = xmmword_2102E3C50;
          *(_OWORD *)(v52 + 1000) = xmmword_2102E3C60;
          v53 = v49 + 96;
          sub_20F9035B4(v52, v49, (_QWORD *)(v49 + 72), v49 + 96);
          v47 = *v50 + 1;
          *v50 = v47;
          v49 = v53 + 920;
        }
        while (v53 + 920 != v51);
        v42 = *(_DWORD *)(a1 + 18336);
      }
      v43 += 1020;
      *(_DWORD *)(a1 + 18336) = ++v42;
    }
    while (v43 != (_DWORD *)v44);
  }
  v54 = (unsigned int *)(a1 + 18600);
  *(_DWORD *)(a1 + 18600) = 0;
  v55 = *((unsigned int *)a2 + 4650);
  if ((_DWORD)v55)
  {
    v56 = 0;
    v57 = (__int128 *)((char *)a2 + 18344);
    v58 = (uint64_t)&a2[4 * v55 + 1146] + 8;
    do
    {
      v59 = (_OWORD *)(a1 + 18344 + ((unint64_t)v56 << 6));
      v60 = v57[1];
      *v59 = *v57;
      v59[1] = v60;
      v61 = v57[3];
      v59[2] = v57[2];
      v59[3] = v61;
      v56 = *v54 + 1;
      *v54 = v56;
      v57 += 4;
    }
    while (v57 != (_OWORD *)v58);
  }
  *(_DWORD *)(a1 + 21248) = 0;
  v62 = *((_DWORD *)a2 + 5312);
  if (v62)
  {
    v63 = 0;
    v64 = a2 + 1163;
    v65 = (uint64_t)a2 + 264 * v62 + 18608;
    do
    {
      v66 = a1 + 18608 + 264 * v63;
      *(_DWORD *)(v66 + 256) = 0;
      v67 = *((unsigned int *)v64 + 64);
      if ((_DWORD)v67)
      {
        v68 = 0;
        v69 = 0;
        v70 = (unsigned int *)(v66 + 256);
        v71 = &v64[4 * v67];
        do
        {
          v72 = &v64[v68];
          v73 = (_OWORD *)(v66 + ((unint64_t)v69 << 6));
          v74 = v64[v68 + 1];
          *v73 = v64[v68];
          v73[1] = v74;
          v75 = v64[v68 + 3];
          v73[2] = v64[v68 + 2];
          v73[3] = v75;
          v69 = *v70 + 1;
          *v70 = v69;
          v68 += 4;
        }
        while (v72 + 4 != v71);
        v63 = *(_DWORD *)(a1 + 21248);
      }
      v64 = (__int128 *)((char *)v64 + 264);
      *(_DWORD *)(a1 + 21248) = ++v63;
    }
    while (v64 != (__int128 *)v65);
  }
  *(_DWORD *)(a1 + 30856) = 0;
  v76 = *((unsigned int *)a2 + 7714);
  if ((_DWORD)v76)
  {
    v77 = 0;
    v78 = (__int128 *)((char *)a2 + 21256);
    v79 = (uint64_t)&a2[2 * v76 + 1328] + 8;
    do
    {
      v80 = a1 + 21256 + 32 * v77;
      v81 = *v78;
      *(_QWORD *)(v80 + 16) = *((_QWORD *)v78 + 2);
      *(_OWORD *)v80 = v81;
      *(_QWORD *)(v80 + 24) = *((_QWORD *)v78 + 3);
      v77 = *(_DWORD *)(a1 + 30856) + 1;
      *(_DWORD *)(a1 + 30856) = v77;
      v78 += 2;
    }
    while (v78 != (__int128 *)v79);
  }
  *(_DWORD *)(a1 + 30928) = 0;
  v82 = *((unsigned int *)a2 + 7732);
  if ((_DWORD)v82)
  {
    v83 = 0;
    v84 = a2 + 1929;
    v85 = (uint64_t)&a2[2 * v82 + 1929];
    do
    {
      v86 = a1 + 30864 + 32 * v83;
      v87 = *v84;
      *(_QWORD *)(v86 + 16) = *((_QWORD *)v84 + 2);
      *(_OWORD *)v86 = v87;
      *(_QWORD *)(v86 + 24) = *((_QWORD *)v84 + 3);
      v83 = *(_DWORD *)(a1 + 30928) + 1;
      *(_DWORD *)(a1 + 30928) = v83;
      v84 += 2;
    }
    while (v84 != (__int128 *)v85);
  }
  return a1;
}

void sub_20F9035A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 2008) = 0;
  *(_DWORD *)(v1 + 1680) = 0;
  _Unwind_Resume(a1);
}

__n128 sub_20F9035B4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int64x2_t v4;
  double v9;
  int64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  float64x2_t v15;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v25;
  int8x16_t v26;
  int64x2_t v29;
  float64x2_t v32;
  float64x2_t v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  unsigned int v43;
  _OWORD *v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __n128 result;

  v9 = *(double *)(a2 + 16);
  v10 = *(int64x2_t *)a2;
  v11 = *(double *)(a2 + 40);
  v12 = *(float64x2_t *)(a2 + 24);
  v13 = *(double *)(a2 + 64);
  _Q2 = *(float64x2_t *)(a2 + 48);
  v15 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)v12);
  _Q19 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)v12);
  v17.f64[0] = v9;
  v17.f64[1] = v11;
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, *(double *)a2), _Q19, *(float64x2_t *)a2, 1), v17, v9);
  _D6 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D7, D6, V2.D[1] }
  v25.f64[0] = _D7 + v13 * v9;
  v26 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, v12.f64[0]), _Q19, v12, 1), v17, v11);
  _D7 = *(_QWORD *)(a2 + 32);
  __asm { FMLA            D17, D7, V2.D[1] }
  *(double *)v4.i64 = _D17 + v13 * v11;
  v29 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, _Q2.f64[0]), _Q19, _Q2, 1), v17, v13);
  _D16 = *(_QWORD *)(a2 + 56);
  __asm
  {
    FMLA            D19, D16, V2.D[1]
    FMOV            V24.2D, #-1.0
  }
  v32 = vaddq_f64((float64x2_t)vextq_s8(v26, (int8x16_t)v18, 8uLL), _Q24);
  v18.f64[0] = _Q19.f64[0] + v13 * v13 + -1.0;
  *(_QWORD *)&v25.f64[1] = v26.i64[0];
  v33 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v33, vabsq_f64(v32)), (int32x4_t)vcgtq_f64(v33, vabsq_f64(v18))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v33, vabsq_f64(v25)), (int32x4_t)vcgtq_f64(v33, vabsq_f64((float64x2_t)vzip1q_s64(v4, v29)))))))) & 1) != 0)goto LABEL_30;
  v34 = fabs(*(double *)&v29.i64[1]) < 0.00001 && (v10.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v35 = v34 && (_D6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v36 = v35 && (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v37 = v36 && (*(_QWORD *)&v12.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v38 = v37 && (_D7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v39 = v38 && (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v40 = v39 && (*(_QWORD *)&_Q2.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v41 = v40 && (_D16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  v42 = v41 && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  if (!v42
    || (*a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (a3[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (a3[2] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_30:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/LPFGContainers.h", 146, (uint64_t)"(math::IsOrthogonal3x3(R_camera_from_imu, 1e-5) && cva::MatrixRef<const double, 3, 3, 3>{R_camera_from_imu}.e().isFinite().all() && cva::VectorRef<const double, 3>{p_camera_from_imu}.e().isFinite().all())", 204, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v10.i64[0] = *(_QWORD *)a2;
  }
  *(_QWORD *)a1 = v10.i64[0];
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *a3;
  *(_QWORD *)(a1 + 80) = a3[1];
  *(_QWORD *)(a1 + 88) = a3[2];
  v43 = *(_DWORD *)(a4 + 472);
  if (v43 == -1)
  {
    if (*(_DWORD *)(a1 + 568) == -1)
      goto LABEL_46;
    v56 = -1;
    goto LABEL_45;
  }
  v44 = (_OWORD *)(a1 + 96);
  if (v43 > 1)
  {
    if (*(_DWORD *)(a1 + 568) == 2)
    {
      *v44 = *(_OWORD *)a4;
      v57 = *(_OWORD *)(a4 + 16);
      v58 = *(_OWORD *)(a4 + 32);
      v59 = *(_OWORD *)(a4 + 48);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 64);
      *(_OWORD *)(a1 + 128) = v58;
      *(_OWORD *)(a1 + 144) = v59;
      *(_OWORD *)(a1 + 112) = v57;
      v60 = *(_OWORD *)(a4 + 104);
      v61 = *(_OWORD *)(a4 + 120);
      v62 = *(_QWORD *)(a4 + 136);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a4 + 88);
      *(_QWORD *)(a1 + 232) = v62;
      *(_OWORD *)(a1 + 216) = v61;
      *(_OWORD *)(a1 + 200) = v60;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a4 + 72);
      v63 = *(_OWORD *)(a4 + 144);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a4 + 160);
      *(_OWORD *)(a1 + 240) = v63;
      v64 = *(_OWORD *)(a4 + 168);
      v65 = *(_OWORD *)(a4 + 184);
      *(_BYTE *)(a1 + 296) = *(_BYTE *)(a4 + 200);
      *(_OWORD *)(a1 + 280) = v65;
      *(_OWORD *)(a1 + 264) = v64;
      memcpy((void *)(a1 + 300), (const void *)(a4 + 204), 0x109uLL);
      goto LABEL_46;
    }
    *(_DWORD *)(a1 + 568) = -1;
    *v44 = *(_OWORD *)a4;
    v66 = *(_OWORD *)(a4 + 16);
    v67 = *(_OWORD *)(a4 + 32);
    v68 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 128) = v67;
    *(_OWORD *)(a1 + 144) = v68;
    *(_OWORD *)(a1 + 112) = v66;
    v69 = *(_OWORD *)(a4 + 104);
    v70 = *(_OWORD *)(a4 + 120);
    v71 = *(_QWORD *)(a4 + 136);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a4 + 88);
    *(_QWORD *)(a1 + 232) = v71;
    *(_OWORD *)(a1 + 216) = v70;
    *(_OWORD *)(a1 + 200) = v69;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a4 + 72);
    v72 = *(_OWORD *)(a4 + 144);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a4 + 160);
    *(_OWORD *)(a1 + 240) = v72;
    memcpy((void *)(a1 + 264), (const void *)(a4 + 168), 0x12DuLL);
    v56 = 2;
    goto LABEL_45;
  }
  v45 = *(_DWORD *)(a1 + 568);
  if (v43)
  {
    if (v45 == 1)
    {
      *v44 = *(_OWORD *)a4;
      v46 = *(_OWORD *)(a4 + 16);
      v47 = *(_OWORD *)(a4 + 32);
      v48 = *(_OWORD *)(a4 + 48);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 64);
      *(_OWORD *)(a1 + 128) = v47;
      *(_OWORD *)(a1 + 144) = v48;
      *(_OWORD *)(a1 + 112) = v46;
      v49 = *(_OWORD *)(a4 + 104);
      v50 = *(_OWORD *)(a4 + 120);
      v51 = *(_QWORD *)(a4 + 136);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a4 + 88);
      *(_QWORD *)(a1 + 232) = v51;
      *(_OWORD *)(a1 + 216) = v50;
      *(_OWORD *)(a1 + 200) = v49;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a4 + 72);
      v52 = *(_OWORD *)(a4 + 144);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a4 + 160);
      *(_OWORD *)(a1 + 240) = v52;
      v53 = *(_OWORD *)(a4 + 200);
      v54 = *(_OWORD *)(a4 + 216);
      v55 = *(_OWORD *)(a4 + 232);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a4 + 184);
      *(_OWORD *)(a1 + 328) = v55;
      *(_OWORD *)(a1 + 312) = v54;
      *(_OWORD *)(a1 + 296) = v53;
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a4 + 168);
      goto LABEL_46;
    }
    *(_DWORD *)(a1 + 568) = -1;
    *v44 = *(_OWORD *)a4;
    v73 = *(_OWORD *)(a4 + 16);
    v74 = *(_OWORD *)(a4 + 32);
    v75 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 128) = v74;
    *(_OWORD *)(a1 + 144) = v75;
    *(_OWORD *)(a1 + 112) = v73;
    v76 = *(_OWORD *)(a4 + 104);
    v77 = *(_OWORD *)(a4 + 120);
    v78 = *(_QWORD *)(a4 + 136);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a4 + 88);
    *(_QWORD *)(a1 + 232) = v78;
    *(_OWORD *)(a1 + 216) = v77;
    *(_OWORD *)(a1 + 200) = v76;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a4 + 72);
    v79 = *(_OWORD *)(a4 + 144);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a4 + 160);
    *(_OWORD *)(a1 + 240) = v79;
    v80 = *(_OWORD *)(a4 + 184);
    v81 = *(_OWORD *)(a4 + 200);
    v82 = *(_OWORD *)(a4 + 216);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a4 + 232);
    *(_OWORD *)(a1 + 312) = v82;
    *(_OWORD *)(a1 + 296) = v81;
    *(_OWORD *)(a1 + 280) = v80;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a4 + 168);
    v56 = 1;
LABEL_45:
    *(_DWORD *)(a1 + 568) = v56;
    goto LABEL_46;
  }
  if (v45)
    *(_DWORD *)(a1 + 568) = 0;
LABEL_46:
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a4 + 480);
  memcpy((void *)(a1 + 592), (const void *)(a4 + 496), 0x198uLL);
  result = *(__n128 *)(a4 + 904);
  *(__n128 *)(a1 + 1000) = result;
  return result;
}

uint64_t sub_20F903AD0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int16 *v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  unint64_t v24;
  __int128 v25;
  __int16 *v26;
  __int16 v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int *v43;
  unint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  int v49;

  v2 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
  {
    v4 = 0;
    LOBYTE(v5) = 0;
    v6 = 0;
    do
    {
      *(_DWORD *)(result + 12) = v4 + 1;
      *(_DWORD *)(result + 16 + 4 * (v4 >> 5)) = (((*(_DWORD *)(a2 + 16 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v5) & 1) << v4) | *(_DWORD *)(result + 16 + 4 * (v4 >> 5)) & ~(1 << v4);
      v5 = v6 + 1;
      v6 = (v6 + 1);
      ++v4;
    }
    while (v3 != v5);
  }
  *(_DWORD *)(result + 2044) = 0;
  v7 = *(unsigned int *)(a2 + 2044);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (char *)(a2 + 1744);
    do
    {
      v10 = *v9++;
      *(_BYTE *)(result + 1744 + v8) = v10;
      v8 = *(_DWORD *)(result + 2044) + 1;
      *(_DWORD *)(result + 2044) = v8;
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(result + 2348) = 0;
  v11 = *(unsigned int *)(a2 + 2348);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (char *)(a2 + 2048);
    do
    {
      v14 = *v13++;
      *(_BYTE *)(result + 2048 + v12) = v14;
      v12 = *(_DWORD *)(result + 2348) + 1;
      *(_DWORD *)(result + 2348) = v12;
      --v11;
    }
    while (v11);
  }
  v15 = (unsigned int *)(result + 114564);
  *(_DWORD *)(result + 2956) = 0;
  v16 = *(unsigned int *)(a2 + 2956);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = a2 + 2352;
    v19 = (v16 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v19 < 0xF)
    {
      v20 = (__int16 *)(a2 + 2352);
    }
    else
    {
      v20 = (__int16 *)(a2 + 2352);
      if ((unint64_t)(result - a2) >= 0x20)
      {
        v21 = v19 + 1;
        v17 = v21 & 0xFFFFFFFFFFFFFFF0;
        v20 = (__int16 *)(v18 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
        v22 = (_OWORD *)(result + 2368);
        v23 = (__int128 *)(a2 + 2368);
        v24 = v21 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *v22 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 16;
        }
        while (v24);
        if (v21 == v17)
          goto LABEL_20;
      }
    }
    v26 = (__int16 *)(v18 + 2 * v16);
    do
    {
      v27 = *v20++;
      *(_WORD *)(result + 2352 + 2 * v17++) = v27;
    }
    while (v20 != v26);
LABEL_20:
    *(_DWORD *)(result + 2956) = v17;
  }
  v28 = (_DWORD *)(result + 169768);
  *(_DWORD *)(result + 4160) = 0;
  v29 = *(unsigned int *)(a2 + 4160);
  if ((_DWORD)v29)
  {
    v30 = 0;
    v31 = (int *)(a2 + 2960);
    v32 = 4 * v29;
    do
    {
      v33 = *v31++;
      *(_DWORD *)(result + 2960 + 4 * v30) = v33;
      v30 = *(_DWORD *)(result + 4160) + 1;
      *(_DWORD *)(result + 4160) = v30;
      v32 -= 4;
    }
    while (v32);
  }
  *v15 = 0;
  v34 = *(unsigned int *)(a2 + 114564);
  if ((_DWORD)v34)
  {
    v35 = 0;
    v36 = (uint64_t *)(a2 + 4164);
    v37 = 8 * v34;
    do
    {
      v38 = *v36++;
      *(_QWORD *)(result + 4164 + 8 * v35) = v38;
      v35 = *v15 + 1;
      *v15 = v35;
      v37 -= 8;
    }
    while (v37);
  }
  *v28 = 0;
  v39 = *(unsigned int *)(a2 + 169768);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = a2 + 114568;
    v42 = (v39 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v42 < 7)
    {
      v43 = (int *)(a2 + 114568);
    }
    else
    {
      v43 = (int *)(a2 + 114568);
      if ((unint64_t)(result - a2) >= 0x20)
      {
        v44 = v42 + 1;
        v40 = v44 & 0x7FFFFFFFFFFFFFF8;
        v43 = (int *)(v41 + 4 * (v44 & 0x7FFFFFFFFFFFFFF8));
        v45 = (_OWORD *)(result + 114584);
        v46 = (__int128 *)(a2 + 114584);
        v47 = v44 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v48 = *v46;
          *(v45 - 1) = *(v46 - 1);
          *v45 = v48;
          v45 += 2;
          v46 += 2;
          v47 -= 8;
        }
        while (v47);
        if (v44 == v40)
          goto LABEL_36;
      }
    }
    do
    {
      v49 = *v43++;
      *(_DWORD *)(result + 114568 + 4 * v40++) = v49;
    }
    while (v43 != (int *)(v41 + 4 * v39));
LABEL_36:
    *v28 = v40;
  }
  return result;
}

_DWORD *sub_20F903D80(_DWORD *a1)
{
  if ((*a1 != -1163005939
     || a1[1] != -1163005939
     || a1[2] != -1163005939
     || a1[3] != -1163005939
     || a1[4] != -1163005939
     || a1[5] != -1163005939
     || a1[6] != -1163005939
     || a1[7] != -1163005939
     || a1[8] != -1163005939
     || a1[9] != -1163005939
     || a1[10] != -1163005939
     || a1[11] != -1163005939
     || a1[12] != -1163005939
     || a1[13] != -1163005939
     || a1[14] != -1163005939
     || a1[15] != -1163005939)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFlatWorld.h", 220, (uint64_t)"!!*this", 7, (uint64_t)"Guard bytes got overwritten.", 28, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

_DWORD *sub_20F903EA8(_DWORD *a1)
{
  unsigned int *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;

  v2 = a1 + 455516;
  v3 = a1 + 452322;
  v4 = a1 + 451220;
  v5 = a1 + 314448;
  v6 = a1 + 300647;
  v7 = a1 + 272005;
  v2[3016] = 0;
  v2[2998] = 0;
  v8 = v2[596];
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 == 1)
    {
      v9 = 0;
LABEL_7:
      v12 = v8 - v9;
      v13 = &a1[66 * v9 + 455516];
      do
      {
        *v13 = 0;
        v13 += 66;
        --v12;
      }
      while (v12);
      goto LABEL_9;
    }
    v9 = v8 & 0xFFFFFFFE;
    v10 = v9;
    v11 = v2;
    do
    {
      *v11 = 0;
      v11[66] = 0;
      v11 += 132;
      v10 -= 2;
    }
    while (v10);
    if (v9 != v8)
      goto LABEL_7;
  }
LABEL_9:
  v2[596] = 0;
  v3[3128] = 0;
  v14 = v3[3062];
  if (!(_DWORD)v14)
    goto LABEL_17;
  if ((_DWORD)v14 == 1)
  {
    v15 = 0;
LABEL_15:
    v18 = v14 - v15;
    v19 = &a1[1020 * v15 + 452322];
    do
    {
      *v19 = 0;
      v19 += 1020;
      --v18;
    }
    while (v18);
    goto LABEL_17;
  }
  v15 = v14 & 0xFFFFFFFE;
  v16 = v15;
  v17 = v3;
  do
  {
    *v17 = 0;
    v17[1020] = 0;
    v17 += 2040;
    v16 -= 2;
  }
  while (v16);
  if (v15 != v14)
    goto LABEL_15;
LABEL_17:
  v3[3062] = 0;
  v4[82] = 0;
  v20 = a1 + 4600;
  *v4 = 0;
  *v5 = 0;
  *v6 = 0;
  v7[1041] = 0;
  v7[740] = 0;
  v7[588] = 0;
  v7[512] = 0;
  *v7 = 0;
  a1[258204] = 0;
  a1[230603] = 0;
  a1[230302] = 0;
  a1[230150] = 0;
  a1[230074] = 0;
  a1[229561] = 0;
  a1[215760] = 0;
  a1[188159] = 0;
  a1[187858] = 0;
  a1[187706] = 0;
  a1[187630] = 0;
  a1[187118] = 0;
  a1[173317] = 0;
  a1[145716] = 0;
  a1[145415] = 0;
  a1[145263] = 0;
  a1[145187] = 0;
  a1[144674] = 0;
  a1[144668] = 0;
  a1[127820] = 0;
  a1[113818] = 0;
  a1[113624] = 0;
  a1[113486] = 0;
  a1[113124] = 0;
  a1[98708] = 0;
  a1[98690] = 0;
  v21 = a1[96288];
  if (!(_DWORD)v21)
    goto LABEL_25;
  if ((_DWORD)v21 == 1)
  {
    v22 = 0;
LABEL_23:
    v25 = v21 - v22;
    v26 = &a1[66 * v22 + 95692];
    do
    {
      *v26 = 0;
      v26 += 66;
      --v25;
    }
    while (v25);
    goto LABEL_25;
  }
  v22 = v21 & 0xFFFFFFFE;
  v23 = v22;
  v24 = a1 + 95692;
  do
  {
    *v24 = 0;
    v24[66] = 0;
    v24 += 132;
    v23 -= 2;
  }
  while (v23);
  if (v22 != v21)
    goto LABEL_23;
LABEL_25:
  a1[96288] = 0;
  a1[95626] = 0;
  v27 = a1[95560];
  if (!(_DWORD)v27)
    goto LABEL_33;
  if ((_DWORD)v27 == 1)
  {
    v28 = 0;
LABEL_31:
    v31 = v27 - v28;
    v32 = &a1[1020 * v28 + 92498];
    do
    {
      *v32 = 0;
      v32 += 1020;
      --v31;
    }
    while (v31);
    goto LABEL_33;
  }
  v28 = v27 & 0xFFFFFFFE;
  v29 = v28;
  v30 = a1 + 92498;
  do
  {
    *v30 = 0;
    v30[1020] = 0;
    v30 += 2040;
    v29 -= 2;
  }
  while (v29);
  if (v28 != v27)
    goto LABEL_31;
LABEL_33:
  a1[95560] = 0;
  a1[91478] = 0;
  a1[91396] = 0;
  sub_20F903D80(a1 + 90956);
  a1[10902] = 0;
  a1[10684] = 0;
  a1[8834] = 0;
  a1[8092] = 0;
  a1[7930] = 0;
  a1[7922] = 0;
  a1[7906] = 0;
  a1[7748] = 0;
  a1[7730] = 0;
  v33 = a1[5328];
  if (!(_DWORD)v33)
    goto LABEL_41;
  if ((_DWORD)v33 == 1)
  {
    v34 = 0;
LABEL_39:
    v37 = v33 - v34;
    v38 = &a1[66 * v34 + 4732];
    do
    {
      *v38 = 0;
      v38 += 66;
      --v37;
    }
    while (v37);
    goto LABEL_41;
  }
  v34 = v33 & 0xFFFFFFFE;
  v35 = a1 + 4732;
  v36 = v34;
  do
  {
    *v35 = 0;
    v35[66] = 0;
    v35 += 132;
    v36 -= 2;
  }
  while (v36);
  if (v34 != v33)
    goto LABEL_39;
LABEL_41:
  a1[5328] = 0;
  a1[4666] = 0;
  v39 = *v20;
  if (!(_DWORD)v39)
    goto LABEL_49;
  if ((_DWORD)v39 == 1)
  {
    v40 = 0;
LABEL_47:
    v43 = v39 - v40;
    v44 = &a1[1020 * v40 + 1538];
    do
    {
      *v44 = 0;
      v44 += 1020;
      --v43;
    }
    while (v43);
    goto LABEL_49;
  }
  v40 = v39 & 0xFFFFFFFE;
  v41 = a1 + 1538;
  v42 = v40;
  do
  {
    *v41 = 0;
    v41[1020] = 0;
    v41 += 2040;
    v42 -= 2;
  }
  while (v42);
  if (v40 != v39)
    goto LABEL_47;
LABEL_49:
  *v20 = 0;
  a1[518] = 0;
  a1[436] = 0;
  return a1;
}

unsigned int *sub_20F9042D0(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = 0x30020BD00;
  a1[2] = 5;
  if ((a3 & 0x3F) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 117, (uint64_t)"reinterpret_cast<uintptr_t>(address) % kDefaultAlignment == 0 && \"Misaligned DMA buffer.\"", 89, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_18;
  }
  *((_QWORD *)a1 + 2) = a3;
  v6 = *(_DWORD *)(a2 + 68);
  if (!v6)
    return a1;
  if (a1[1] >= 4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 120, (uint64_t)"read_channel >= 0u && read_channel < 4u && \"Read channel is in invalid range.\"", 78, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_18;
    }
    v6 = *(_DWORD *)(a2 + 68);
  }
  if (v6 != 3
    || (v7 = *a1,
        v8 = a1[1],
        v9 = lacc_hardware::LaccHardware::operator lacc::CallInterface &(),
        ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(v9, v8, a3, v7) & 1) == 0))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 121, (uint64_t)"image.register_dma_src(read_channel, address, size)", 51, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_18;
    }
  }
  v10 = *(_DWORD *)(a2 + 68);
  if (!v10)
    return a1;
  if ((a1[2] & 0xFFFFFFFC) != 4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 124, (uint64_t)"write_channel >= 4u && write_channel < 8u && \"Write channel is in invalid range.\"", 81, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_18;
    }
    v10 = *(_DWORD *)(a2 + 68);
  }
  if (v10 != 3
    || (v11 = *a1,
        v12 = a1[2] - 4,
        v13 = lacc_hardware::LaccHardware::operator lacc::CallInterface &(),
        ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 144))(v13, v12, a3, v11) & 1) == 0))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 125, (uint64_t)"image.register_dma_dst(write_channel - 4u, address, size)", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_18:
      abort();
    }
  }
  return a1;
}

uint64_t sub_20F9044CC(_BYTE *a1)
{
  size_t v2;
  const char *v4[2];

  v4[0] = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v4[1] = (const char *)strlen(v4[0]);
  v2 = strlen((const char *)((unint64_t)"FbRN3cva17flat_world_detail3HotERKN4lacc3dma12MappedBufferERKNS_11FixedVe"
                                               "ctorIjLj195ENS_17FixedVectorDetail21FixedVectorStaticDataEEEjbE" & 0x7FFFFFFFFFFFFFFFLL));
  return sub_20F9045A8(a1, (uint64_t *)&off_24CA03FD8, (uint64_t *)v4, (unint64_t)"FbRN3cva17flat_world_detail3HotERKN4lacc3dma12MappedBufferERKNS_11FixedVectorIjLj195ENS_17FixedVectorDetail21FixedVectorStaticDataEEEjbE" & 0x7FFFFFFFFFFFFFFFLL, v2);
}

uint64_t sub_20F90453C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  lacc::Counts::read_from();
  *(_QWORD *)(v2 + 16) = v6;
  *(_OWORD *)v2 = v5;
  *(_BYTE *)(v2 + 24) = 1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 24) && *(_DWORD *)v3)
    *(_DWORD *)v3 -= 2;
  return a1;
}

uint64_t sub_20F9045A8(_BYTE *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _QWORD v45[2];
  _QWORD v46[3];
  const void *v47;
  uint64_t v48;
  const void *v49;
  unint64_t v50;
  void *__p;
  char v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  _BYTE v56[9];

  v5 = a3[1];
  v6 = v5 + 1;
  v7 = a5 - (v5 + 1);
  if (a5 < v5 + 1)
    sub_20E89FD20("string_view::substr");
  v11 = a5 - v5 - 2;
  if (v7 >= v11)
    v12 = v11;
  else
    v12 = v7;
  sub_20E863438((uint64_t)v45);
  sub_20E86A980(v46, (uint64_t)"_Z", 2);
  v13 = a2[1];
  if (v13 >= 2)
  {
    v14 = *a2;
    v15 = (char *)(*a2 + v13);
    v16 = a2[1];
    v17 = (void *)*a2;
    do
    {
      v18 = (char *)memchr(v17, 58, v16 - 1);
      if (!v18)
        break;
      if (*(_WORD *)v18 == 14906)
      {
        if (v18 == v15)
          break;
        v19 = &v18[-v14];
        if (&v18[-v14] == (char *)-1)
          break;
        v56[0] = 78;
        sub_20E86A980(v46, (uint64_t)v56, 1);
LABEL_14:
        v20 = (_QWORD *)std::ostream::operator<<();
        if (v13 >= (unint64_t)v19)
          v21 = (uint64_t)v19;
        else
          v21 = v13;
        sub_20E86A980(v20, v14, v21);
        v22 = (uint64_t)&v19[v14 + 2];
        v23 = v13 - (_QWORD)(v19 + 2);
        v24 = (char *)(v14 + v13);
        v25 = &v24[-v22];
        if ((uint64_t)&v24[-v22] >= 2)
        {
          v26 = &v19[v14 + 2];
          do
          {
            v27 = (char *)memchr(v26, 58, (size_t)(v25 - 1));
            if (!v27)
              break;
            if (*(_WORD *)v27 == 14906)
            {
              if (v27 != v24)
              {
                v19 = &v27[-v22];
                v14 = v22;
                v13 = v23;
                if (&v27[-v22] != (char *)-1)
                  goto LABEL_14;
              }
              break;
            }
            v26 = v27 + 1;
            v25 = (char *)(v24 - v26);
          }
          while (v24 - v26 >= 2);
        }
        v28 = (_QWORD *)std::ostream::operator<<();
        v29 = sub_20E86A980(v28, v22, v23);
        v56[0] = 69;
        sub_20E86A980(v29, (uint64_t)v56, 1);
        goto LABEL_27;
      }
      v17 = v18 + 1;
      v16 = v15 - (_BYTE *)v17;
    }
    while (v15 - (_BYTE *)v17 >= 2);
  }
  v30 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v30, *a2, a2[1]);
LABEL_27:
  v31 = a4 + v6;
  if (v12 >= 2)
  {
    v32 = (char *)(v31 + v12);
    v33 = v12;
    v34 = (void *)v31;
    do
    {
      v35 = (char *)memchr(v34, 83, v33 - 1);
      if (!v35)
        break;
      if (*(_WORD *)v35 == 24403)
      {
        if (v35 != v32 && v35 == (char *)v31)
        {
          sub_20E86A980(v46, *a3, a3[1]);
          v31 += 2;
          v12 -= 2;
        }
        break;
      }
      v34 = v35 + 1;
      v33 = v32 - (_BYTE *)v34;
    }
    while (v32 - (_BYTE *)v34 >= 2);
  }
  sub_20E86A980(v46, v31, v12);
  if ((v54 & 0x10) != 0)
  {
    v37 = v53;
    if (v53 < v50)
    {
      v53 = v50;
      v37 = v50;
    }
    v38 = v49;
    v36 = v37 - (_QWORD)v49;
    if (v37 - (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_53;
  }
  else
  {
    if ((v54 & 8) == 0)
    {
      v36 = 0;
      a1[23] = 0;
      goto LABEL_49;
    }
    v38 = v47;
    v36 = v48 - (_QWORD)v47;
    if ((unint64_t)(v48 - (_QWORD)v47) >= 0x7FFFFFFFFFFFFFF8)
LABEL_53:
      sub_20E860B7C();
  }
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    *((_QWORD *)a1 + 1) = v36;
    *((_QWORD *)a1 + 2) = v40 | 0x8000000000000000;
    *(_QWORD *)a1 = v41;
    a1 = v41;
    goto LABEL_48;
  }
  a1[23] = v36;
  if (v36)
LABEL_48:
    memmove(a1, v38, v36);
LABEL_49:
  a1[v36] = 0;
  v45[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v45 + *(_QWORD *)(v45[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v46[0] = v42;
  v46[1] = MEMORY[0x24BEDB848] + 16;
  if (v52 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v55);
}

void sub_20F904944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F904958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F90496C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F904980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20F904994(uint64_t a1, __int128 *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _DWORD *v55;
  int v56;
  unsigned int v57;
  _DWORD *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _OWORD *v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  unsigned int v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int *v83;
  __int128 *v84;
  __int128 *v85;
  _OWORD *v86;
  __int128 v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v99;

  if ((__int128 *)a1 != a2)
  {
    v2 = *((_DWORD *)a2 + 420);
    *(_DWORD *)(a1 + 1680) = 0;
    if (v2)
    {
      v3 = 0;
      v4 = 168 * v2;
      v5 = a2;
      do
      {
        v6 = a1 + 168 * v3;
        v7 = *v5;
        v8 = v5[2];
        *(_OWORD *)(v6 + 16) = v5[1];
        *(_OWORD *)(v6 + 32) = v8;
        *(_OWORD *)v6 = v7;
        v9 = v5[3];
        v10 = v5[4];
        v11 = v5[6];
        *(_OWORD *)(v6 + 80) = v5[5];
        *(_OWORD *)(v6 + 96) = v11;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 64) = v10;
        v12 = v5[7];
        v13 = v5[8];
        v14 = v5[9];
        *(_QWORD *)(v6 + 160) = *((_QWORD *)v5 + 20);
        *(_OWORD *)(v6 + 128) = v13;
        *(_OWORD *)(v6 + 144) = v14;
        *(_OWORD *)(v6 + 112) = v12;
        v5 = (__int128 *)((char *)v5 + 168);
        v3 = *(_DWORD *)(a1 + 1680) + 1;
        *(_DWORD *)(a1 + 1680) = v3;
        v4 -= 168;
      }
      while (v4);
    }
  }
  v15 = *(__int128 *)((char *)a2 + 1704);
  *(_OWORD *)(a1 + 1688) = *(__int128 *)((char *)a2 + 1688);
  *(_OWORD *)(a1 + 1704) = v15;
  v16 = *(__int128 *)((char *)a2 + 1720);
  *(_QWORD *)(a1 + 1736) = *((_QWORD *)a2 + 217);
  *(_OWORD *)(a1 + 1720) = v16;
  *(_QWORD *)(a1 + 1744) = *((_QWORD *)a2 + 218);
  v17 = *(__int128 *)((char *)a2 + 1752);
  *(_QWORD *)(a1 + 1768) = *((_QWORD *)a2 + 221);
  *(_OWORD *)(a1 + 1752) = v17;
  v18 = a2[111];
  *(_QWORD *)(a1 + 1792) = *((_QWORD *)a2 + 224);
  *(_OWORD *)(a1 + 1776) = v18;
  v19 = *(__int128 *)((char *)a2 + 1800);
  *(_QWORD *)(a1 + 1816) = *((_QWORD *)a2 + 227);
  *(_OWORD *)(a1 + 1800) = v19;
  v20 = a2[114];
  *(_QWORD *)(a1 + 1840) = *((_QWORD *)a2 + 230);
  *(_OWORD *)(a1 + 1824) = v20;
  v22 = *(__int128 *)((char *)a2 + 1880);
  v21 = *(__int128 *)((char *)a2 + 1896);
  v23 = *(__int128 *)((char *)a2 + 1864);
  *(_QWORD *)(a1 + 1912) = *((_QWORD *)a2 + 239);
  *(_OWORD *)(a1 + 1880) = v22;
  *(_OWORD *)(a1 + 1896) = v21;
  *(_OWORD *)(a1 + 1864) = v23;
  *(_OWORD *)(a1 + 1848) = *(__int128 *)((char *)a2 + 1848);
  v24 = a2[122];
  v25 = a2[123];
  v26 = *((_QWORD *)a2 + 248);
  *(_OWORD *)(a1 + 1936) = a2[121];
  *(_QWORD *)(a1 + 1984) = v26;
  *(_OWORD *)(a1 + 1968) = v25;
  *(_OWORD *)(a1 + 1952) = v24;
  v27 = a2[120];
  *(_OWORD *)(a1 + 1920) = v27;
  if ((__int128 *)a1 != a2)
  {
    v28 = (uint64_t)a2 + 1992;
    v29 = a1 + 1992;
    v30 = *((unsigned int *)a2 + 502);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = (v30 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v33 = (uint64_t *)a2 + 249;
      if (v32 < 7)
        goto LABEL_12;
      if ((unint64_t)(a1 - (_QWORD)a2) < 0x20)
        goto LABEL_12;
      v34 = v32 + 1;
      v31 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v33 = (uint64_t *)(v28 + 8 * v31);
      v35 = v31;
      v36 = (__int128 *)((char *)a2 + 1992);
      v37 = (__int128 *)(a1 + 1992);
      do
      {
        v27 = *v36;
        v38 = v36[1];
        v36 += 2;
        *v37 = v27;
        v37[1] = v38;
        v37 += 2;
        v35 -= 4;
      }
      while (v35);
      if (v34 != v31)
      {
LABEL_12:
        v39 = (uint64_t *)(v28 + 8 * v30);
        do
        {
          v40 = *v33++;
          *(_QWORD *)&v27 = v40;
          *(_QWORD *)(v29 + 8 * v31++) = v40;
        }
        while (v33 != v39);
      }
      v41 = (unsigned int *)(a1 + 18600);
      v42 = (unsigned int *)a2 + 4650;
      *(_DWORD *)(a1 + 2008) = v31;
      v43 = *((_DWORD *)a2 + 4584);
      v44 = *(unsigned int *)(a1 + 18336);
      if (!(_DWORD)v44)
      {
LABEL_24:
        v99 = v42;
        *(_DWORD *)(a1 + 18336) = 0;
        if (v43)
        {
          v50 = 0;
          v51 = a2 + 126;
          v52 = a1 + 2016;
          v53 = (uint64_t)&a2[255 * v43 + 126];
          v27 = xmmword_2102E3C50;
          v54 = xmmword_2102E3C60;
          do
          {
            v55 = (_DWORD *)(v52 + 4080 * v50);
            *v55 = *v51;
            v55[1018] = 0;
            v56 = v51[1018];
            if (v56)
            {
              v57 = 0;
              v58 = v55 + 2;
              v59 = (uint64_t)(v51 + 2);
              v60 = v55 + 1018;
              v61 = (uint64_t)&v51[254 * v56 + 2];
              do
              {
                v62 = (uint64_t)&v58[254 * v57];
                *(_DWORD *)(v62 + 568) = 0;
                *(_OWORD *)(v62 + 576) = v27;
                *(_OWORD *)(v62 + 1000) = v54;
                sub_20F9035B4(v62, v59, (_QWORD *)(v59 + 72), v59 + 96);
                v54 = xmmword_2102E3C60;
                v27 = xmmword_2102E3C50;
                v57 = *v60 + 1;
                *v60 = v57;
                v59 += 1016;
              }
              while (v59 != v61);
              v50 = *(_DWORD *)(v29 + 16344);
            }
            v51 += 1020;
            *(_DWORD *)(v29 + 16344) = ++v50;
          }
          while (v51 != (_DWORD *)v53);
        }
        v63 = *v99;
        *v41 = 0;
        if ((_DWORD)v63)
        {
          v64 = 0;
          v65 = (__int128 *)((char *)a2 + 18344);
          v66 = (uint64_t)&a2[4 * v63 + 1146] + 8;
          do
          {
            v67 = (_OWORD *)(a1 + 18344 + ((unint64_t)v64 << 6));
            v68 = v65[1];
            *v67 = *v65;
            v67[1] = v68;
            v27 = v65[3];
            v67[2] = v65[2];
            v67[3] = v27;
            v64 = *v41 + 1;
            *v41 = v64;
            v65 += 4;
          }
          while (v65 != (_OWORD *)v66);
        }
        v69 = v99[662];
        v70 = v41[662];
        if (!(_DWORD)v70)
          goto LABEL_42;
        if ((_DWORD)v70 == 1)
        {
          v71 = 0;
        }
        else
        {
          v71 = v70 & 0xFFFFFFFE;
          v72 = v41 + 66;
          v73 = v71;
          do
          {
            *v72 = 0;
            v72[66] = 0;
            v72 += 132;
            v73 -= 2;
          }
          while (v73);
          if (v71 == v70)
            goto LABEL_42;
        }
        v74 = v70 - v71;
        v75 = (_DWORD *)(a1 + 264 * v71 + 18864);
        do
        {
          *v75 = 0;
          v75 += 66;
          --v74;
        }
        while (v74);
LABEL_42:
        v41[662] = 0;
        if (v69)
        {
          v76 = 0;
          v77 = a2 + 1163;
          v78 = (uint64_t)a2 + 264 * v69 + 18608;
          do
          {
            v79 = a1 + 18608 + 264 * v76;
            *(_DWORD *)(v79 + 256) = 0;
            v80 = *((unsigned int *)v77 + 64);
            if ((_DWORD)v80)
            {
              v81 = 0;
              v82 = 0;
              v83 = (unsigned int *)(v79 + 256);
              v84 = &v77[4 * v80];
              do
              {
                v85 = &v77[v81];
                v86 = (_OWORD *)(v79 + ((unint64_t)v82 << 6));
                v87 = v77[v81 + 1];
                *v86 = v77[v81];
                v86[1] = v87;
                v27 = v77[v81 + 3];
                v86[2] = v77[v81 + 2];
                v86[3] = v27;
                v82 = *v83 + 1;
                *v83 = v82;
                v81 += 4;
              }
              while (v85 + 4 != v84);
              v76 = v41[662];
            }
            v77 = (__int128 *)((char *)v77 + 264);
            v41[662] = ++v76;
          }
          while (v77 != (__int128 *)v78);
        }
        v88 = v99[3064];
        v41[3064] = 0;
        if ((_DWORD)v88)
        {
          v89 = 0;
          v90 = (uint64_t)a2 + 21256;
          v91 = (uint64_t)&a2[2 * v88 + 1328] + 8;
          do
          {
            v92 = a1 + 21256 + 32 * v89;
            v27 = *(_OWORD *)v90;
            *(_QWORD *)(v92 + 16) = *(_QWORD *)(v90 + 16);
            *(_OWORD *)v92 = v27;
            *(_QWORD *)&v27 = *(_QWORD *)(v90 + 24);
            *(_QWORD *)(v92 + 24) = v27;
            v89 = v41[3064] + 1;
            v41[3064] = v89;
            v90 += 32;
          }
          while (v90 != v91);
        }
        v93 = v99[3082];
        v41[3082] = 0;
        if ((_DWORD)v93)
        {
          v94 = 0;
          v95 = a2 + 1929;
          v96 = (uint64_t)&a2[2 * v93 + 1929];
          do
          {
            v97 = a1 + 30864 + 32 * v94;
            v27 = *v95;
            *(_QWORD *)(v97 + 16) = *((_QWORD *)v95 + 2);
            *(_OWORD *)v97 = v27;
            *(_QWORD *)&v27 = *((_QWORD *)v95 + 3);
            *(_QWORD *)(v97 + 24) = v27;
            v94 = v41[3082] + 1;
            v41[3082] = v94;
            v95 += 2;
          }
          while (v95 != (__int128 *)v96);
        }
        return *(double *)&v27;
      }
    }
    else
    {
      v41 = (unsigned int *)(a1 + 18600);
      v42 = (unsigned int *)a2 + 4650;
      *(_DWORD *)(a1 + 2008) = 0;
      v43 = *((_DWORD *)a2 + 4584);
      v44 = *(unsigned int *)(a1 + 18336);
      if (!(_DWORD)v44)
        goto LABEL_24;
    }
    if ((_DWORD)v44 == 1)
    {
      v45 = 0;
    }
    else
    {
      v45 = v44 & 0xFFFFFFFE;
      v46 = (_DWORD *)(a1 + 6088);
      v47 = v45;
      do
      {
        *v46 = 0;
        v46[1020] = 0;
        v46 += 2040;
        v47 -= 2;
      }
      while (v47);
      if (v45 == v44)
        goto LABEL_24;
    }
    v48 = v44 - v45;
    v49 = (_DWORD *)(a1 + 4080 * v45 + 6088);
    do
    {
      *v49 = 0;
      v49 += 1020;
      --v48;
    }
    while (v48);
    goto LABEL_24;
  }
  return *(double *)&v27;
}

uint64_t sub_20F904EFC(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unint64_t v29;

  *(_OWORD *)result = *(_OWORD *)a2;
  if (result != a2)
  {
    v2 = (_DWORD *)(result + 59072);
    v3 = (unsigned int *)(result + 57616);
    v4 = *(_DWORD *)(a2 + 57616);
    *(_DWORD *)(result + 57616) = 0;
    if (v4)
    {
      v5 = 0;
      v6 = a2 + 16;
      v7 = a2 + 16 + 72 * v4;
      do
      {
        v8 = result + 16 + 72 * v5;
        *(_OWORD *)v8 = *(_OWORD *)v6;
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
        v9 = *(_OWORD *)(v6 + 24);
        *(_QWORD *)(v8 + 40) = *(_QWORD *)(v6 + 40);
        *(_OWORD *)(v8 + 24) = v9;
        v10 = *(_QWORD *)(v6 + 64);
        *(_OWORD *)(v8 + 48) = *(_OWORD *)(v6 + 48);
        *(_QWORD *)(v8 + 64) = v10;
        v5 = *v3 + 1;
        *v3 = v5;
        v6 += 72;
      }
      while (v6 != v7);
    }
    v11 = *(unsigned int *)(a2 + 59064);
    *(_DWORD *)(result + 59064) = 0;
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = (_OWORD *)(a2 + 57624);
      v14 = 144 * v11;
      do
      {
        v15 = (_OWORD *)(result + 57624 + 144 * v12);
        *v15 = *v13;
        v16 = v13[1];
        v17 = v13[2];
        v18 = v13[4];
        v15[3] = v13[3];
        v15[4] = v18;
        v15[1] = v16;
        v15[2] = v17;
        v19 = v13[5];
        v20 = v13[6];
        v21 = v13[8];
        v15[7] = v13[7];
        v15[8] = v21;
        v15[5] = v19;
        v15[6] = v20;
        v13 += 9;
        v12 = *(_DWORD *)(result + 59064) + 1;
        *(_DWORD *)(result + 59064) = v12;
        v14 -= 144;
      }
      while (v14);
    }
    v22 = *(_DWORD *)(a2 + 59072);
    *v2 = 0;
    if (v22)
    {
      v23 = 0;
      LOBYTE(v24) = 0;
      v25 = 0;
      do
      {
        *v2 = v23 + 1;
        *(_DWORD *)(result + 59076 + 4 * (v23 >> 5)) = (((*(_DWORD *)(a2 + 59076 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v24) & 1) << v23) | *(_DWORD *)(result + 59076 + 4 * (v23 >> 5)) & ~(1 << v23);
        v24 = v25 + 1;
        v25 = (v25 + 1);
        ++v23;
      }
      while (v22 != v24);
    }
    v26 = *(_DWORD *)(a2 + 59176);
    *(_DWORD *)(result + 59176) = 0;
    if (v26)
    {
      v27 = 0;
      LOBYTE(v28) = 0;
      v29 = 0;
      do
      {
        *(_DWORD *)(result + 59176) = v27 + 1;
        *(_DWORD *)(result + 59180 + 4 * (v27 >> 5)) = (((*(_DWORD *)(a2 + 59180 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v28) & 1) << v27) | *(_DWORD *)(result + 59180 + 4 * (v27 >> 5)) & ~(1 << v27);
        v28 = v29 + 1;
        v29 = (v29 + 1);
        ++v27;
      }
      while (v26 != v28);
    }
  }
  return result;
}

_DWORD *sub_20F9050F0(_DWORD *result, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  unsigned int v5;
  char v6;

  *result = 0;
  if (a3 != a5)
  {
    v5 = 0;
    v6 = a3;
    do
    {
      *result = v5 + 1;
      result[(v5 >> 5) + 1] = (((*(_DWORD *)(a2 + 4 * (a3++ >> 5)) >> v6) & 1) << v5) | result[(v5 >> 5) + 1] & ~(1 << v5);
      v6 = a3;
      ++v5;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t sub_20F90515C(uint64_t result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  __int16 *v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int16 *v27;
  __int16 v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  int *v45;
  unint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char v61;
  int *v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  unsigned int *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int16 *v70;
  unint64_t v71;
  _OWORD *v72;
  __int128 *v73;
  unint64_t v74;
  __int128 v75;
  __int16 *v76;
  __int16 v77;
  unsigned int *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int *v92;
  unint64_t v93;
  _OWORD *v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  int v98;

  v2 = result - (_QWORD)a2;
  if ((uint64_t *)result == a2)
    return result;
  v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v3;
  v4 = *((_DWORD *)a2 + 3);
  *(_DWORD *)(result + 12) = 0;
  if (v4)
  {
    v5 = 0;
    LOBYTE(v6) = 0;
    v7 = 0;
    do
    {
      *(_DWORD *)(result + 12) = v5 + 1;
      *(_DWORD *)(result + 16 + 4 * (v5 >> 5)) = (((*(_DWORD *)((char *)a2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 16) >> v6) & 1) << v5) | *(_DWORD *)(result + 16 + 4 * (v5 >> 5)) & ~(1 << v5);
      v6 = v7 + 1;
      v7 = (v7 + 1);
      ++v5;
    }
    while (v4 != v6);
  }
  v8 = *((unsigned int *)a2 + 511);
  *(_DWORD *)(result + 2044) = 0;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (char *)(a2 + 218);
    do
    {
      v11 = *v10++;
      *(_BYTE *)(result + 1744 + v9) = v11;
      v9 = *(_DWORD *)(result + 2044) + 1;
      *(_DWORD *)(result + 2044) = v9;
      --v8;
    }
    while (v8);
  }
  v12 = *((unsigned int *)a2 + 587);
  *(_DWORD *)(result + 2348) = 0;
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (char *)(a2 + 256);
    do
    {
      v15 = *v14++;
      *(_BYTE *)(result + 2048 + v13) = v15;
      v13 = *(_DWORD *)(result + 2348) + 1;
      *(_DWORD *)(result + 2348) = v13;
      --v12;
    }
    while (v12);
  }
  v16 = (unsigned int *)(result + 114564);
  v17 = *((unsigned int *)a2 + 739);
  if (!(_DWORD)v17)
  {
    v29 = (unsigned int *)(a2 + 21221);
    *(_DWORD *)(result + 2956) = 0;
    v30 = *((unsigned int *)a2 + 1040);
    *(_DWORD *)(result + 4160) = 0;
    if (!(_DWORD)v30)
      goto LABEL_24;
    goto LABEL_22;
  }
  v18 = 0;
  v19 = a2 + 294;
  v20 = (v17 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  v21 = (__int16 *)(a2 + 294);
  if (v20 < 0xF)
    goto LABEL_17;
  if (v2 < 0x20)
    goto LABEL_17;
  v22 = v20 + 1;
  v18 = v22 & 0xFFFFFFFFFFFFFFF0;
  v21 = (__int16 *)v19 + (v22 & 0xFFFFFFFFFFFFFFF0);
  v23 = (_OWORD *)(result + 2368);
  v24 = (__int128 *)(a2 + 296);
  v25 = v22 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v26 = *v24;
    *(v23 - 1) = *(v24 - 1);
    *v23 = v26;
    v23 += 2;
    v24 += 2;
    v25 -= 16;
  }
  while (v25);
  if (v22 != v18)
  {
LABEL_17:
    v27 = (__int16 *)v19 + v17;
    do
    {
      v28 = *v21++;
      *(_WORD *)(result + 2352 + 2 * v18++) = v28;
    }
    while (v21 != v27);
  }
  v29 = (unsigned int *)(a2 + 21221);
  *(_DWORD *)(result + 2956) = v18;
  v30 = *((unsigned int *)a2 + 1040);
  *(_DWORD *)(result + 4160) = 0;
  if ((_DWORD)v30)
  {
LABEL_22:
    v31 = 0;
    v32 = (int *)(a2 + 370);
    v33 = 4 * v30;
    do
    {
      v34 = *v32++;
      *(_DWORD *)(result + 2960 + 4 * v31) = v34;
      v31 = *(_DWORD *)(result + 4160) + 1;
      *(_DWORD *)(result + 4160) = v31;
      v33 -= 4;
    }
    while (v33);
  }
LABEL_24:
  v35 = *((unsigned int *)a2 + 28641);
  *v16 = 0;
  if ((_DWORD)v35)
  {
    v36 = 0;
    v37 = (uint64_t *)((char *)a2 + 4164);
    v38 = 8 * v35;
    do
    {
      v39 = *v37++;
      *(_QWORD *)(result + 4164 + 8 * v36) = v39;
      v36 = *v16 + 1;
      *v16 = v36;
      v38 -= 8;
    }
    while (v38);
  }
  v40 = (char *)a2 + 171516;
  v41 = *v29;
  if ((_DWORD)v41)
  {
    v42 = 0;
    v43 = a2 + 14321;
    v44 = (v41 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v45 = (int *)(a2 + 14321);
    if (v44 < 7)
      goto LABEL_73;
    if (v2 < 0x20)
      goto LABEL_73;
    v46 = v44 + 1;
    v42 = v46 & 0x7FFFFFFFFFFFFFF8;
    v45 = (int *)v43 + (v46 & 0x7FFFFFFFFFFFFFF8);
    v47 = (_OWORD *)(result + 114584);
    v48 = (__int128 *)(a2 + 14323);
    v49 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 += 2;
      v48 += 2;
      v49 -= 8;
    }
    while (v49);
    if (v46 != v42)
    {
LABEL_73:
      do
      {
        v51 = *v45++;
        *(_DWORD *)(result + 114568 + 4 * v42++) = v51;
      }
      while (v45 != (int *)((char *)v43 + 4 * v41));
    }
  }
  else
  {
    LODWORD(v42) = 0;
  }
  v52 = (char *)a2 + 171820;
  *(_DWORD *)(result + 169768) = v42;
  v53 = *(uint64_t *)((char *)a2 + 169772);
  *(_DWORD *)(result + 169780) = *((_DWORD *)a2 + 42445);
  *(_QWORD *)(result + 169772) = v53;
  v54 = v29[4];
  *(_DWORD *)(result + 169784) = 0;
  if (v54)
  {
    v55 = 0;
    LOBYTE(v56) = 0;
    v57 = 0;
    do
    {
      *(_DWORD *)(result + 169784) = v55 + 1;
      *(_DWORD *)(result + 169788 + 4 * (v55 >> 5)) = (((*(_DWORD *)((char *)a2
                                                                     + ((v57 >> 3) & 0x1FFFFFFFFFFFFFFCLL)
                                                                     + 169788) >> v56) & 1) << v55) | *(_DWORD *)(result + 169788 + 4 * (v55 >> 5)) & ~(1 << v55);
      v56 = v57 + 1;
      v57 = (v57 + 1);
      ++v55;
    }
    while (v54 != v56);
  }
  v58 = (uint64_t)a2 + 172124;
  v59 = *((unsigned int *)a2 + 42954);
  *(_DWORD *)(result + 171816) = 0;
  if ((_DWORD)v59)
  {
    v60 = 0;
    do
    {
      v61 = *v40++;
      *(_BYTE *)(result + 171516 + v60) = v61;
      v60 = *(_DWORD *)(result + 171816) + 1;
      *(_DWORD *)(result + 171816) = v60;
      --v59;
    }
    while (v59);
  }
  v62 = (int *)a2 + 43183;
  v63 = *((unsigned int *)a2 + 43030);
  *(_DWORD *)(result + 172120) = 0;
  if ((_DWORD)v63)
  {
    v64 = 0;
    do
    {
      v65 = *v52++;
      *(_BYTE *)(result + 171820 + v64) = v65;
      v64 = *(_DWORD *)(result + 172120) + 1;
      *(_DWORD *)(result + 172120) = v64;
      --v63;
    }
    while (v63);
  }
  v66 = (unsigned int *)(result + 284336);
  v67 = *((unsigned int *)a2 + 43182);
  if ((_DWORD)v67)
  {
    v68 = 0;
    v69 = (v67 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v70 = (__int16 *)a2 + 86062;
    if (v69 < 0xF)
      goto LABEL_51;
    if (v2 < 0x20)
      goto LABEL_51;
    v71 = v69 + 1;
    v68 = v71 & 0xFFFFFFFFFFFFFFF0;
    v70 = (__int16 *)(v58 + 2 * (v71 & 0xFFFFFFFFFFFFFFF0));
    v72 = (_OWORD *)(result + 172140);
    v73 = (__int128 *)((char *)a2 + 172140);
    v74 = v71 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v75 = *v73;
      *(v72 - 1) = *(v73 - 1);
      *v72 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 16;
    }
    while (v74);
    if (v71 != v68)
    {
LABEL_51:
      v76 = (__int16 *)(v58 + 2 * v67);
      do
      {
        v77 = *v70++;
        *(_WORD *)(result + 172124 + 2 * v68++) = v77;
      }
      while (v70 != v76);
    }
    v78 = (unsigned int *)a2 + 84885;
    *(_DWORD *)(result + 172728) = v68;
    v79 = *((unsigned int *)a2 + 43483);
    *(_DWORD *)(result + 173932) = 0;
    if (!(_DWORD)v79)
      goto LABEL_58;
    goto LABEL_56;
  }
  v78 = (unsigned int *)a2 + 84885;
  *(_DWORD *)(result + 172728) = 0;
  v79 = *((unsigned int *)a2 + 43483);
  *(_DWORD *)(result + 173932) = 0;
  if ((_DWORD)v79)
  {
LABEL_56:
    v80 = 0;
    v81 = 4 * v79;
    do
    {
      v82 = *v62++;
      *(_DWORD *)(result + 172732 + 4 * v80) = v82;
      v80 = *(_DWORD *)(result + 173932) + 1;
      *(_DWORD *)(result + 173932) = v80;
      v81 -= 4;
    }
    while (v81);
  }
LABEL_58:
  v83 = *((unsigned int *)a2 + 71084);
  *v66 = 0;
  if ((_DWORD)v83)
  {
    v84 = 0;
    v85 = a2 + 21742;
    v86 = 8 * v83;
    do
    {
      v87 = *v85++;
      *(_QWORD *)(result + 173936 + 8 * v84) = v87;
      v84 = *v66 + 1;
      *v66 = v84;
      v86 -= 8;
    }
    while (v86);
  }
  v88 = *v78;
  if ((_DWORD)v88)
  {
    v89 = 0;
    v90 = (uint64_t)a2 + 284340;
    v91 = (v88 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v92 = (int *)a2 + 71085;
    if (v91 < 7)
      goto LABEL_74;
    if (v2 < 0x20)
      goto LABEL_74;
    v93 = v91 + 1;
    v89 = (v91 + 1) & 0x7FFFFFFFFFFFFFF8;
    v92 = (int *)(v90 + 4 * v89);
    v94 = (_OWORD *)(result + 284356);
    v95 = (__int128 *)((char *)a2 + 284356);
    v96 = v89;
    do
    {
      v97 = *v95;
      *(v94 - 1) = *(v95 - 1);
      *v94 = v97;
      v94 += 2;
      v95 += 2;
      v96 -= 8;
    }
    while (v96);
    if (v93 != v89)
    {
LABEL_74:
      do
      {
        v98 = *v92++;
        *(_DWORD *)(result + 284340 + 4 * v89++) = v98;
      }
      while (v92 != (int *)(v90 + 4 * v88));
    }
  }
  else
  {
    LODWORD(v89) = 0;
  }
  *(_DWORD *)(result + 339540) = v89;
  return result;
}

uint64_t sub_20F905708()
{
  return kdebug_trace();
}

void sub_20F905738(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char **v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  char **v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  int64_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  int64_t v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  _DWORD *v131;
  int v132;
  uint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  int64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  int64_t v157;
  uint64_t v158;
  unint64_t v159;
  int64_t v160;
  unint64_t v161;
  _BYTE *v162;
  uint64_t *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  int v174;
  _DWORD *v175;
  int v176;
  uint64_t v177;
  char *v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  __int128 *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  int64_t v201;
  uint64_t v202;
  unint64_t v203;
  int64_t v204;
  unint64_t v205;
  _BYTE *v206;
  uint64_t *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  _OWORD *v213;
  char *v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  int v218;
  _DWORD *v219;
  int v220;
  uint64_t v221;
  char *v222;
  char *v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  int64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  __int128 *v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  int64_t v245;
  uint64_t v246;
  unint64_t v247;
  int64_t v248;
  unint64_t v249;
  _BYTE *v250;
  uint64_t *v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  _OWORD *v257;
  char *v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  int v262;
  _DWORD *v263;
  int v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int *v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  __int128 *v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  int64_t v289;
  uint64_t v290;
  unint64_t v291;
  int64_t v292;
  unint64_t v293;
  _BYTE *v294;
  uint64_t *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  _OWORD *v301;
  char *v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  int v306;
  _DWORD *v307;
  int v308;
  uint64_t v309;
  char *v310;
  char *v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  int64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  char *v324;
  __int128 *v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  int64_t v333;
  uint64_t v334;
  unint64_t v335;
  int64_t v336;
  unint64_t v337;
  _BYTE *v338;
  uint64_t *v339;
  char *v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  _OWORD *v345;
  char *v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  int v350;
  _DWORD *v351;
  int v352;
  uint64_t v353;
  char *v354;
  char *v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  __int128 *v369;
  uint64_t v370;
  __int128 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  int64_t v377;
  uint64_t v378;
  unint64_t v379;
  int64_t v380;
  unint64_t v381;
  _BYTE *v382;
  uint64_t *v383;
  char *v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  _OWORD *v389;
  char *v390;
  uint64_t v391;
  __int128 v392;
  uint64_t v393;
  int v394;
  _DWORD *v395;
  int v396;
  uint64_t v397;
  char *v398;
  char *v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  int64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  char *v411;
  char *v412;
  __int128 *v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  int64_t v421;
  uint64_t v422;
  unint64_t v423;
  int64_t v424;
  unint64_t v425;
  _BYTE *v426;
  uint64_t *v427;
  char *v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  _OWORD *v433;
  char *v434;
  uint64_t v435;
  __int128 v436;
  uint64_t v437;
  int v438;
  _DWORD *v439;
  int v440;
  uint64_t v441;
  char *v442;
  char *v443;
  unint64_t v444;
  unint64_t v445;
  char *v446;
  char *v447;
  char *v448;
  uint64_t v449;
  char *v450;
  char *v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  char *v455;
  char *v456;
  __int128 *v457;
  uint64_t v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  int64_t v465;
  uint64_t v466;
  unint64_t v467;
  int64_t v468;
  unint64_t v469;
  _BYTE *v470;
  uint64_t *v471;
  char *v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  _OWORD *v477;
  char *v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  int v482;
  _DWORD *v483;
  int v484;
  uint64_t v485;
  unsigned int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  unsigned int v492;
  unsigned int v493;
  int v494;
  unint64_t v495;
  int v496;
  int v497;
  unsigned int v498;
  unsigned int v499;
  int v500;
  void *v501;
  uint64_t v502;
  _QWORD *v503;
  size_t v504;
  int v505;
  unsigned int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  uint64_t v519;
  uint64_t v522;
  int v523;
  char **v524;
  char **v525;
  uint64_t *v526;
  int v527;
  uint64_t *v528;
  int v529;
  char **v530;
  int v531;
  void *v532;
  unsigned int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  unsigned int v539;
  unsigned int v540;
  int v541;
  int v542;
  void *__p[2];
  void *v544[2];
  __int128 v545;
  void *v546[2];
  void *v547[2];
  __int128 v548;
  void *v549[2];
  void *v550[2];
  __int128 v551;
  void *v552[2];
  void *v553[2];
  __int128 v554;
  void *v555[2];
  void *v556[2];
  __int128 v557;

  v3 = a3;
  v4 = 0;
  v5 = 0;
  v519 = a1 + 15304;
  do
  {
    v6 = &v3[3 * v4];
    v7 = (char *)*v6;
    v530 = (char **)v6;
    v6[1] = *v6;
    v528 = v6 + 1;
    v8 = (_QWORD *)(a2 + 24 * v4);
    v9 = (char *)*v8;
    v11 = (char **)(v8 + 1);
    v10 = v8[1];
    if (*v8 != v10)
    {
      v12 = v10 - (_QWORD)v9;
      v13 = (v10 - (uint64_t)v9) >> 2;
      v526 = &v3[3 * v4 + 2];
      if (v13 > (*v526 - (uint64_t)v7) >> 2)
      {
        if ((v12 & 0x8000000000000000) != 0)
LABEL_611:
          sub_20E867F44();
        v14 = (char *)operator new(v12);
        *v6 = v14;
        *v528 = (uint64_t)v14;
        *v526 = (uint64_t)&v14[4 * v13];
        if (v7)
          operator delete(v7);
      }
      v523 = v5;
      v522 = v4;
      v15 = (char **)(v519 + 24 * v4);
      v16 = v15[1];
      v524 = v15;
      v525 = v15 + 1;
      v17 = *v15;
      v18 = v16 - *v15;
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + ((uint64_t)&(*v11)[-*v8] >> 2);
      v21 = v15 + 2;
      if (v20 <= (v15[2] - *v15) >> 2)
      {
        v24 = v15[1];
        v25 = *v15;
        v27 = v15 + 1;
LABEL_22:
        v37 = (char *)*v8;
        v38 = *v11;
        v39 = v526;
        v40 = v528;
        v41 = 0;
        if (v25 == v24)
          goto LABEL_30;
        do
        {
          if (*(_DWORD *)v25 > *(_DWORD *)v37)
          {
            v24 = v25;
            goto LABEL_30;
          }
          v25 += 4;
          ++v41;
        }
        while (v25 != v24);
        while (1)
        {
LABEL_30:
          if (v37 == v38)
          {
            v5 = v523 | (*v530 != (char *)*v40);
            v3 = a3;
            v4 = v522;
            goto LABEL_3;
          }
          if (v24 == *v27 || *(_DWORD *)v37 != *(_DWORD *)v24)
            break;
LABEL_29:
          v24 += 4;
          ++v41;
        }
        v43 = (char *)*v40;
        v44 = *v39;
        if (*v40 < (unint64_t)*v39)
        {
          *(_DWORD *)v43 = v41;
          v42 = (uint64_t)(v43 + 4);
LABEL_28:
          *v40 = v42;
          v24 = sub_20EDB3C7C((void **)v15, v24, v37);
          v37 += 4;
          goto LABEL_29;
        }
        v45 = *v530;
        v46 = v43 - *v530;
        v47 = v46 >> 2;
        v48 = (v46 >> 2) + 1;
        if (v48 >> 62)
          goto LABEL_611;
        v49 = v44 - (_QWORD)v45;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 62)
            sub_20E877A38();
          v51 = operator new(4 * v50);
          v52 = &v51[4 * v47];
          *(_DWORD *)v52 = v41;
          v42 = (uint64_t)(v52 + 4);
          v53 = v43 - v45;
          if (v43 == v45)
            goto LABEL_51;
        }
        else
        {
          v51 = 0;
          v52 = (char *)(4 * v47);
          *(_DWORD *)(4 * v47) = v41;
          v42 = 4 * v47 + 4;
          v53 = v43 - v45;
          if (v43 == v45)
          {
LABEL_51:
            v40 = v528;
            *v530 = v52;
            *v528 = v42;
            v39 = v526;
            *v526 = (uint64_t)&v51[4 * v50];
            if (v45)
              operator delete(v45);
            v15 = v524;
            v27 = v525;
            goto LABEL_28;
          }
        }
        v54 = v53 - 4;
        if (v54 < 0x2C)
          goto LABEL_618;
        if ((unint64_t)(v43 - &v51[v46]) < 0x20)
          goto LABEL_618;
        v55 = (v54 >> 2) + 1;
        v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
        v57 = &v43[-v56];
        v52 -= v56;
        v58 = &v51[4 * v47 - 16];
        v59 = v43 - 16;
        v60 = v55 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          *v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 8;
        }
        while (v60);
        v43 = v57;
        if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_618:
          do
          {
            v62 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v52 - 1) = v62;
            v52 -= 4;
          }
          while (v43 != v45);
        }
        goto LABEL_51;
      }
      if (v20 >> 62)
        sub_20E867F44();
      v22 = 4 * v20;
      v23 = (char *)operator new(4 * v20);
      v24 = &v23[4 * v19];
      v25 = v24;
      if (v16 != v17)
      {
        v26 = v16 - v17 - 4;
        if (v26 < 0x2C)
        {
          v25 = &v23[4 * v19];
          do
          {
LABEL_19:
            v35 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v25 - 1) = v35;
            v25 -= 4;
          }
          while (v16 != v17);
          goto LABEL_20;
        }
        v25 = &v23[4 * v19];
        if ((unint64_t)(&v16[-v18] - v23) < 0x20)
          goto LABEL_19;
        v28 = (v26 >> 2) + 1;
        v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
        v30 = &v16[-v29];
        v25 = &v24[-v29];
        v31 = &v23[4 * v19 - 16];
        v32 = (__int128 *)(v16 - 16);
        v33 = v28 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)v31 = v34;
          v31 -= 32;
          v32 -= 2;
          v33 -= 8;
        }
        while (v33);
        v16 = v30;
        if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_19;
      }
LABEL_20:
      v36 = &v23[v22];
      v15 = v524;
      v27 = v525;
      *v524 = v25;
      *v525 = v24;
      *v21 = v36;
      if (v17)
      {
        operator delete(v17);
        v25 = *v524;
        v24 = *v525;
      }
      goto LABEL_22;
    }
LABEL_3:
    ++v4;
  }
  while (v4 != 10);
  if ((v5 & 1) == 0)
    return;
  sub_20F908180(a1 + 104, v3, (uint64_t)v3);
  *(_OWORD *)v556 = 0u;
  v557 = 0u;
  v554 = 0u;
  *(_OWORD *)v555 = 0u;
  *(_OWORD *)v552 = 0u;
  *(_OWORD *)v553 = 0u;
  *(_OWORD *)v550 = 0u;
  v551 = 0u;
  v548 = 0u;
  *(_OWORD *)v549 = 0u;
  *(_OWORD *)v546 = 0u;
  *(_OWORD *)v547 = 0u;
  *(_OWORD *)v544 = 0u;
  v545 = 0u;
  *(_OWORD *)__p = 0u;
  v64 = (_DWORD *)*v3;
  v63 = (_DWORD *)v3[1];
  v65 = (uint64_t)v63 - *v3;
  if (v63 == (_DWORD *)*v3)
    goto LABEL_98;
  if ((unint64_t)v65 > 0x7FFFFFFFFFFFFFFCLL)
LABEL_615:
    sub_20E92CED8();
  v66 = operator new(2 * v65);
  __p[0] = v66;
  __p[1] = v66;
  v544[0] = &v66[v65 >> 2];
  while (1)
  {
LABEL_60:
    while (1)
    {
      v68 = (6 * *v64);
      v69 = __p[0];
      if (__p[0] == v66 || *((_DWORD *)v66 - 1) != (_DWORD)v68)
        break;
      *((_DWORD *)v66 - 1) = v68 + 6;
      v3 = a3;
      if (++v64 == v63)
        goto LABEL_93;
    }
    v70 = (v68 + 6);
    if (v66 < v544[0])
    {
      *v66 = v68 | (v70 << 32);
      v67 = v66 + 1;
      v3 = a3;
      goto LABEL_59;
    }
    v71 = (char *)v66 - (char *)__p[0];
    v72 = ((char *)v66 - (char *)__p[0]) >> 3;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 61)
      goto LABEL_615;
    v74 = (char *)v544[0] - (char *)__p[0];
    if (((char *)v544[0] - (char *)__p[0]) >> 2 > v73)
      v73 = v74 >> 2;
    v75 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v73;
    if (v75)
      break;
    v76 = 0;
    v77 = (uint64_t *)(8 * v72);
    *(_QWORD *)(8 * v72) = v68 | (v70 << 32);
    v67 = (void *)(8 * v72 + 8);
    if (v69 == (_BYTE *)v66)
      goto LABEL_80;
LABEL_74:
    if ((unint64_t)(v71 - 8) < 0x168)
    {
      v78 = v66;
      goto LABEL_76;
    }
    v80 = ((char *)(v66 - 1) - v69) & 0xFFFFFFFFFFFFFFF8;
    if (&v76[v71 - 8 - v80] > &v76[v71 - 8])
    {
      v78 = v66;
      do
      {
LABEL_76:
        v79 = *--v78;
        *--v77 = v79;
      }
      while (v78 != (_QWORD *)v69);
      goto LABEL_77;
    }
    if ((_QWORD *)((char *)v66 - v80 - 8) > v66 - 1)
    {
      v78 = v66;
      goto LABEL_76;
    }
    if ((unint64_t)(v69 - v76) < 0x20)
    {
      v78 = v66;
      goto LABEL_76;
    }
    v81 = ((unint64_t)(v71 - 8) >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v78 = &v66[v82 / 0xFFFFFFFFFFFFFFF8];
    v77 = (uint64_t *)((char *)v77 - v82);
    v83 = &v76[8 * v72 - 16];
    v84 = (__int128 *)(v66 - 2);
    v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v86 = *v84;
      *(v83 - 1) = *(v84 - 1);
      *v83 = v86;
      v83 -= 2;
      v84 -= 2;
      v85 -= 4;
    }
    while (v85);
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_76;
LABEL_77:
    v66 = __p[0];
    __p[0] = v77;
    v544[0] = &v76[8 * v75];
    v3 = a3;
    if (v66)
      goto LABEL_81;
LABEL_59:
    __p[1] = v67;
    v66 = v67;
    if (++v64 == v63)
      goto LABEL_93;
  }
  if (v75 >> 61)
LABEL_613:
    sub_20E877A38();
  v76 = operator new(8 * v75);
  v77 = (uint64_t *)&v76[8 * v72];
  *v77 = v68 | (v70 << 32);
  v67 = v77 + 1;
  if (v69 != (_BYTE *)v66)
    goto LABEL_74;
LABEL_80:
  __p[0] = v77;
  v544[0] = &v76[8 * v75];
  v3 = a3;
  if (!v66)
    goto LABEL_59;
LABEL_81:
  operator delete(v66);
  __p[1] = v67;
  v66 = v67;
  if (++v64 != v63)
    goto LABEL_60;
LABEL_93:
  if ((((char *)v66 - (char *)__p[0]) & 0x7FFFFFFF0) != 0)
  {
    v87 = (char *)__p[0] + 8;
    v88 = *(_DWORD *)__p[0];
    v89 = ((unint64_t)((char *)v66 - (char *)__p[0]) >> 3) - 1;
    do
    {
      v88 += *v87 - *(v87 - 1);
      *v87 = v88;
      v87 += 2;
      --v89;
    }
    while (v89);
  }
LABEL_98:
  v533 = 6 * (*(_DWORD *)(a1 + 24) + ((v3[1] - *v3) >> 2));
  v91 = (char *)v3[3];
  v90 = (char *)v3[4];
  v92 = v90 - v91;
  v93 = (v90 - v91) >> 2;
  v94 = (char *)v544[1];
  if (v93 <= (uint64_t)(*((_QWORD *)&v545 + 1) - (unint64_t)v544[1]) >> 3)
  {
    v98 = (char *)v545;
    if (v91 == v90)
      goto LABEL_151;
    while (1)
    {
LABEL_117:
      while (1)
      {
        v110 = (9 * *(_DWORD *)v91);
        v111 = (char *)v544[1];
        if (v544[1] == v98 || *((_DWORD *)v98 - 1) != (_DWORD)v110)
          break;
        *((_DWORD *)v98 - 1) = v110 + 9;
        v91 += 4;
        if (v91 == v90)
          goto LABEL_150;
      }
      v112 = (v110 + 9);
      if ((unint64_t)v98 < *((_QWORD *)&v545 + 1))
      {
        *(_QWORD *)v98 = v110 | (v112 << 32);
        v109 = (uint64_t)(v98 + 8);
        goto LABEL_116;
      }
      v113 = v98 - (char *)v544[1];
      v114 = (v98 - (char *)v544[1]) >> 3;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 61)
        goto LABEL_615;
      v116 = *((_QWORD *)&v545 + 1) - (unint64_t)v544[1];
      if ((uint64_t)(*((_QWORD *)&v545 + 1) - (unint64_t)v544[1]) >> 2 > v115)
        v115 = v116 >> 2;
      v117 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v115;
      if (!v117)
        break;
      if (v117 >> 61)
        goto LABEL_613;
      v118 = operator new(8 * v117);
      v119 = (uint64_t *)&v118[8 * v114];
      *v119 = v110 | (v112 << 32);
      v109 = (uint64_t)(v119 + 1);
      if (v111 == v98)
      {
LABEL_137:
        v544[1] = v119;
        *((_QWORD *)&v545 + 1) = &v118[8 * v117];
        if (v98)
          goto LABEL_138;
LABEL_116:
        *(_QWORD *)&v545 = v109;
        v98 = (char *)v109;
        v91 += 4;
        if (v91 == v90)
          goto LABEL_150;
      }
      else
      {
LABEL_131:
        if ((unint64_t)(v113 - 8) < 0x168)
        {
          v120 = v98;
          goto LABEL_133;
        }
        v122 = (v98 - 8 - v111) & 0xFFFFFFFFFFFFFFF8;
        if (&v118[v113 - 8 - v122] > &v118[v113 - 8])
        {
          v120 = v98;
          do
          {
LABEL_133:
            v121 = *((_QWORD *)v120 - 1);
            v120 -= 8;
            *--v119 = v121;
          }
          while (v120 != v111);
          goto LABEL_134;
        }
        if (&v98[-v122 - 8] > v98 - 8)
        {
          v120 = v98;
          goto LABEL_133;
        }
        if ((unint64_t)(v111 - v118) < 0x20)
        {
          v120 = v98;
          goto LABEL_133;
        }
        v123 = ((unint64_t)(v113 - 8) >> 3) + 1;
        v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
        v120 = &v98[-v124];
        v119 = (uint64_t *)((char *)v119 - v124);
        v125 = &v118[8 * v114 - 16];
        v126 = v98 - 16;
        v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v128 = *(_OWORD *)v126;
          *(v125 - 1) = *((_OWORD *)v126 - 1);
          *v125 = v128;
          v125 -= 2;
          v126 -= 32;
          v127 -= 4;
        }
        while (v127);
        if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_133;
LABEL_134:
        v98 = (char *)v544[1];
        v544[1] = v119;
        *((_QWORD *)&v545 + 1) = &v118[8 * v117];
        if (!v98)
          goto LABEL_116;
LABEL_138:
        operator delete(v98);
        *(_QWORD *)&v545 = v109;
        v98 = (char *)v109;
        v91 += 4;
        if (v91 == v90)
        {
LABEL_150:
          v94 = (char *)v544[1];
          v3 = a3;
          goto LABEL_151;
        }
      }
    }
    v118 = 0;
    v119 = (uint64_t *)(8 * v114);
    *(_QWORD *)(8 * v114) = v110 | (v112 << 32);
    v109 = 8 * v114 + 8;
    if (v111 != v98)
      goto LABEL_131;
    goto LABEL_137;
  }
  if (v92 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v95 = (char *)v545;
  v96 = (char *)operator new(2 * v92);
  v97 = v545 - (unint64_t)v544[1];
  v98 = &v96[(v545 - (unint64_t)v544[1]) & 0xFFFFFFFFFFFFFFF8];
  v99 = v98;
  if ((void *)v545 != v544[1])
  {
    if ((unint64_t)(v97 - 8) < 0x58)
    {
      v99 = &v96[(v545 - (unint64_t)v544[1]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_109;
    }
    v99 = &v96[(v545 - (unint64_t)v544[1]) & 0xFFFFFFFFFFFFFFF8];
    if ((_QWORD)v545 - (_QWORD)&v96[v97 & 0xFFFFFFFFFFFFFFF8] < 0x20uLL)
      goto LABEL_619;
    v100 = v97 >> 3;
    v101 = ((unint64_t)(v97 - 8) >> 3) + 1;
    v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
    v103 = (char *)(v545 - v102);
    v99 = &v98[-v102];
    v104 = &v96[8 * v100 - 16];
    v105 = (__int128 *)(v545 - 16);
    v106 = v101 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v107 = *v105;
      *((_OWORD *)v104 - 1) = *(v105 - 1);
      *(_OWORD *)v104 = v107;
      v104 -= 32;
      v105 -= 2;
      v106 -= 4;
    }
    while (v106);
    v95 = v103;
    if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_619:
      do
      {
LABEL_109:
        v108 = *((_QWORD *)v95 - 1);
        v95 -= 8;
        *((_QWORD *)v99 - 1) = v108;
        v99 -= 8;
      }
      while (v95 != v94);
    }
  }
  v544[1] = v99;
  *(_QWORD *)&v545 = v98;
  *((_QWORD *)&v545 + 1) = &v96[8 * v93];
  if (v94)
  {
    operator delete(v94);
    v91 = (char *)a3[3];
    v90 = (char *)a3[4];
    v94 = v99;
    v3 = a3;
    if (v91 != v90)
      goto LABEL_117;
  }
  else
  {
    v94 = v99;
    v3 = a3;
    if (v91 != v90)
      goto LABEL_117;
  }
LABEL_151:
  if (((v98 - v94) & 0x7FFFFFFF0) != 0)
  {
    v129 = ((unint64_t)(v98 - v94) >> 3);
    v132 = *(_DWORD *)v94;
    v131 = v94 + 8;
    v130 = v132;
    v133 = v129 - 1;
    do
    {
      v130 += *v131 - *(v131 - 1);
      *v131 = v130;
      v131 += 2;
      --v133;
    }
    while (v133);
  }
  v534 = 9 * (*(_DWORD *)(a1 + 28) + ((v3[4] - v3[3]) >> 2));
  v135 = (char *)v3[6];
  v134 = (char *)v3[7];
  v136 = v134 - v135;
  v137 = (v134 - v135) >> 2;
  v138 = (char *)v546[0];
  if (v137 <= ((char *)v547[0] - (char *)v546[0]) >> 3)
  {
    v142 = (char *)v546[1];
    if (v135 == v134)
      goto LABEL_207;
    while (1)
    {
LABEL_173:
      while (1)
      {
        v154 = (6 * *(_DWORD *)v135);
        v155 = (char *)v546[0];
        if (v546[0] == v142 || *((_DWORD *)v142 - 1) != (_DWORD)v154)
          break;
        *((_DWORD *)v142 - 1) = v154 + 6;
        v135 += 4;
        if (v135 == v134)
          goto LABEL_206;
      }
      v156 = (v154 + 6);
      if (v142 < v547[0])
      {
        *(_QWORD *)v142 = v154 | (v156 << 32);
        v153 = v142 + 8;
        goto LABEL_172;
      }
      v157 = v142 - (char *)v546[0];
      v158 = (v142 - (char *)v546[0]) >> 3;
      v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 61)
        goto LABEL_615;
      v160 = (char *)v547[0] - (char *)v546[0];
      if (((char *)v547[0] - (char *)v546[0]) >> 2 > v159)
        v159 = v160 >> 2;
      v161 = (unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v159;
      if (!v161)
        break;
      if (v161 >> 61)
        goto LABEL_613;
      v162 = operator new(8 * v161);
      v163 = (uint64_t *)&v162[8 * v158];
      *v163 = v154 | (v156 << 32);
      v153 = v163 + 1;
      if (v155 == v142)
      {
LABEL_193:
        v546[0] = v163;
        v547[0] = &v162[8 * v161];
        if (v142)
          goto LABEL_194;
LABEL_172:
        v546[1] = v153;
        v142 = (char *)v153;
        v135 += 4;
        if (v135 == v134)
          goto LABEL_206;
      }
      else
      {
LABEL_187:
        if ((unint64_t)(v157 - 8) < 0x168)
        {
          v164 = v142;
          goto LABEL_189;
        }
        v166 = (v142 - 8 - v155) & 0xFFFFFFFFFFFFFFF8;
        if (&v162[v157 - 8 - v166] > &v162[v157 - 8])
        {
          v164 = v142;
          do
          {
LABEL_189:
            v165 = *((_QWORD *)v164 - 1);
            v164 -= 8;
            *--v163 = v165;
          }
          while (v164 != v155);
          goto LABEL_190;
        }
        if (&v142[-v166 - 8] > v142 - 8)
        {
          v164 = v142;
          goto LABEL_189;
        }
        if ((unint64_t)(v155 - v162) < 0x20)
        {
          v164 = v142;
          goto LABEL_189;
        }
        v167 = ((unint64_t)(v157 - 8) >> 3) + 1;
        v168 = 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
        v164 = &v142[-v168];
        v163 = (uint64_t *)((char *)v163 - v168);
        v169 = &v162[8 * v158 - 16];
        v170 = v142 - 16;
        v171 = v167 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v172 = *(_OWORD *)v170;
          *(v169 - 1) = *((_OWORD *)v170 - 1);
          *v169 = v172;
          v169 -= 2;
          v170 -= 32;
          v171 -= 4;
        }
        while (v171);
        if (v167 != (v167 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_189;
LABEL_190:
        v142 = (char *)v546[0];
        v546[0] = v163;
        v547[0] = &v162[8 * v161];
        if (!v142)
          goto LABEL_172;
LABEL_194:
        operator delete(v142);
        v546[1] = v153;
        v142 = (char *)v153;
        v135 += 4;
        if (v135 == v134)
        {
LABEL_206:
          v138 = (char *)v546[0];
          v3 = a3;
          goto LABEL_207;
        }
      }
    }
    v162 = 0;
    v163 = (uint64_t *)(8 * v158);
    *(_QWORD *)(8 * v158) = v154 | (v156 << 32);
    v153 = (void *)(8 * v158 + 8);
    if (v155 != v142)
      goto LABEL_187;
    goto LABEL_193;
  }
  if (v136 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v139 = (char *)v546[1];
  v140 = (char *)operator new(2 * v136);
  v141 = (char *)v546[1] - (char *)v546[0];
  v142 = &v140[((char *)v546[1] - (char *)v546[0]) & 0xFFFFFFFFFFFFFFF8];
  v143 = v142;
  if (v546[1] != v546[0])
  {
    if ((unint64_t)(v141 - 8) < 0x58)
    {
      v143 = &v140[((char *)v546[1] - (char *)v546[0]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_165;
    }
    v143 = &v140[((char *)v546[1] - (char *)v546[0]) & 0xFFFFFFFFFFFFFFF8];
    if ((void *)((char *)v546[1] - (v141 & 0xFFFFFFFFFFFFFFF8) - v140) < (void *)0x20)
      goto LABEL_620;
    v144 = v141 >> 3;
    v145 = ((unint64_t)(v141 - 8) >> 3) + 1;
    v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
    v147 = (char *)v546[1] - v146;
    v143 = &v142[-v146];
    v148 = &v140[8 * v144 - 16];
    v149 = (__int128 *)((char *)v546[1] - 16);
    v150 = v145 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v151 = *v149;
      *((_OWORD *)v148 - 1) = *(v149 - 1);
      *(_OWORD *)v148 = v151;
      v148 -= 32;
      v149 -= 2;
      v150 -= 4;
    }
    while (v150);
    v139 = v147;
    if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_620:
      do
      {
LABEL_165:
        v152 = *((_QWORD *)v139 - 1);
        v139 -= 8;
        *((_QWORD *)v143 - 1) = v152;
        v143 -= 8;
      }
      while (v139 != v138);
    }
  }
  v546[0] = v143;
  v546[1] = v142;
  v547[0] = &v140[8 * v137];
  if (v138)
  {
    operator delete(v138);
    v135 = (char *)a3[6];
    v134 = (char *)a3[7];
    v138 = v143;
    v3 = a3;
    if (v135 != v134)
      goto LABEL_173;
  }
  else
  {
    v138 = v143;
    v3 = a3;
    if (v135 != v134)
      goto LABEL_173;
  }
LABEL_207:
  if (((v142 - v138) & 0x7FFFFFFF0) != 0)
  {
    v173 = ((unint64_t)(v142 - v138) >> 3);
    v176 = *(_DWORD *)v138;
    v175 = v138 + 8;
    v174 = v176;
    v177 = v173 - 1;
    do
    {
      v174 += *v175 - *(v175 - 1);
      *v175 = v174;
      v175 += 2;
      --v177;
    }
    while (v177);
  }
  v535 = 6 * (*(_DWORD *)(a1 + 32) + ((v3[7] - v3[6]) >> 2));
  v179 = (char *)v3[9];
  v178 = (char *)v3[10];
  v180 = v178 - v179;
  v181 = (v178 - v179) >> 2;
  v182 = (char *)v547[1];
  if (v181 <= (uint64_t)(*((_QWORD *)&v548 + 1) - (unint64_t)v547[1]) >> 3)
  {
    v186 = (char *)v548;
    if (v179 == v178)
      goto LABEL_263;
    while (1)
    {
LABEL_229:
      while (1)
      {
        v198 = (6 * *(_DWORD *)v179);
        v199 = (char *)v547[1];
        if (v547[1] == v186 || *((_DWORD *)v186 - 1) != (_DWORD)v198)
          break;
        *((_DWORD *)v186 - 1) = v198 + 6;
        v179 += 4;
        if (v179 == v178)
          goto LABEL_262;
      }
      v200 = (v198 + 6);
      if ((unint64_t)v186 < *((_QWORD *)&v548 + 1))
      {
        *(_QWORD *)v186 = v198 | (v200 << 32);
        v197 = (uint64_t)(v186 + 8);
        goto LABEL_228;
      }
      v201 = v186 - (char *)v547[1];
      v202 = (v186 - (char *)v547[1]) >> 3;
      v203 = v202 + 1;
      if ((unint64_t)(v202 + 1) >> 61)
        goto LABEL_615;
      v204 = *((_QWORD *)&v548 + 1) - (unint64_t)v547[1];
      if ((uint64_t)(*((_QWORD *)&v548 + 1) - (unint64_t)v547[1]) >> 2 > v203)
        v203 = v204 >> 2;
      v205 = (unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v203;
      if (!v205)
        break;
      if (v205 >> 61)
        goto LABEL_613;
      v206 = operator new(8 * v205);
      v207 = (uint64_t *)&v206[8 * v202];
      *v207 = v198 | (v200 << 32);
      v197 = (uint64_t)(v207 + 1);
      if (v199 == v186)
      {
LABEL_249:
        v547[1] = v207;
        *((_QWORD *)&v548 + 1) = &v206[8 * v205];
        if (v186)
          goto LABEL_250;
LABEL_228:
        *(_QWORD *)&v548 = v197;
        v186 = (char *)v197;
        v179 += 4;
        if (v179 == v178)
          goto LABEL_262;
      }
      else
      {
LABEL_243:
        if ((unint64_t)(v201 - 8) < 0x168)
        {
          v208 = v186;
          goto LABEL_245;
        }
        v210 = (v186 - 8 - v199) & 0xFFFFFFFFFFFFFFF8;
        if (&v206[v201 - 8 - v210] > &v206[v201 - 8])
        {
          v208 = v186;
          do
          {
LABEL_245:
            v209 = *((_QWORD *)v208 - 1);
            v208 -= 8;
            *--v207 = v209;
          }
          while (v208 != v199);
          goto LABEL_246;
        }
        if (&v186[-v210 - 8] > v186 - 8)
        {
          v208 = v186;
          goto LABEL_245;
        }
        if ((unint64_t)(v199 - v206) < 0x20)
        {
          v208 = v186;
          goto LABEL_245;
        }
        v211 = ((unint64_t)(v201 - 8) >> 3) + 1;
        v212 = 8 * (v211 & 0x3FFFFFFFFFFFFFFCLL);
        v208 = &v186[-v212];
        v207 = (uint64_t *)((char *)v207 - v212);
        v213 = &v206[8 * v202 - 16];
        v214 = v186 - 16;
        v215 = v211 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v216 = *(_OWORD *)v214;
          *(v213 - 1) = *((_OWORD *)v214 - 1);
          *v213 = v216;
          v213 -= 2;
          v214 -= 32;
          v215 -= 4;
        }
        while (v215);
        if (v211 != (v211 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_245;
LABEL_246:
        v186 = (char *)v547[1];
        v547[1] = v207;
        *((_QWORD *)&v548 + 1) = &v206[8 * v205];
        if (!v186)
          goto LABEL_228;
LABEL_250:
        operator delete(v186);
        *(_QWORD *)&v548 = v197;
        v186 = (char *)v197;
        v179 += 4;
        if (v179 == v178)
        {
LABEL_262:
          v182 = (char *)v547[1];
          v3 = a3;
          goto LABEL_263;
        }
      }
    }
    v206 = 0;
    v207 = (uint64_t *)(8 * v202);
    *(_QWORD *)(8 * v202) = v198 | (v200 << 32);
    v197 = 8 * v202 + 8;
    if (v199 != v186)
      goto LABEL_243;
    goto LABEL_249;
  }
  if (v180 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v183 = (char *)v548;
  v184 = (char *)operator new(2 * v180);
  v185 = v548 - (unint64_t)v547[1];
  v186 = &v184[(v548 - (unint64_t)v547[1]) & 0xFFFFFFFFFFFFFFF8];
  v187 = v186;
  if ((void *)v548 != v547[1])
  {
    if ((unint64_t)(v185 - 8) < 0x58)
    {
      v187 = &v184[(v548 - (unint64_t)v547[1]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_221;
    }
    v187 = &v184[(v548 - (unint64_t)v547[1]) & 0xFFFFFFFFFFFFFFF8];
    if ((_QWORD)v548 - (_QWORD)&v184[v185 & 0xFFFFFFFFFFFFFFF8] < 0x20uLL)
      goto LABEL_621;
    v188 = v185 >> 3;
    v189 = ((unint64_t)(v185 - 8) >> 3) + 1;
    v190 = 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
    v191 = (char *)(v548 - v190);
    v187 = &v186[-v190];
    v192 = &v184[8 * v188 - 16];
    v193 = (__int128 *)(v548 - 16);
    v194 = v189 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v195 = *v193;
      *((_OWORD *)v192 - 1) = *(v193 - 1);
      *(_OWORD *)v192 = v195;
      v192 -= 32;
      v193 -= 2;
      v194 -= 4;
    }
    while (v194);
    v183 = v191;
    if (v189 != (v189 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_621:
      do
      {
LABEL_221:
        v196 = *((_QWORD *)v183 - 1);
        v183 -= 8;
        *((_QWORD *)v187 - 1) = v196;
        v187 -= 8;
      }
      while (v183 != v182);
    }
  }
  v547[1] = v187;
  *(_QWORD *)&v548 = v186;
  *((_QWORD *)&v548 + 1) = &v184[8 * v181];
  if (v182)
  {
    operator delete(v182);
    v179 = (char *)a3[9];
    v178 = (char *)a3[10];
    v182 = v187;
    v3 = a3;
    if (v179 != v178)
      goto LABEL_229;
  }
  else
  {
    v182 = v187;
    v3 = a3;
    if (v179 != v178)
      goto LABEL_229;
  }
LABEL_263:
  if (((v186 - v182) & 0x7FFFFFFF0) != 0)
  {
    v217 = ((unint64_t)(v186 - v182) >> 3);
    v220 = *(_DWORD *)v182;
    v219 = v182 + 8;
    v218 = v220;
    v221 = v217 - 1;
    do
    {
      v218 += *v219 - *(v219 - 1);
      *v219 = v218;
      v219 += 2;
      --v221;
    }
    while (v221);
  }
  v536 = 6 * (*(_DWORD *)(a1 + 36) + ((v3[10] - v3[9]) >> 2));
  v223 = (char *)v3[12];
  v222 = (char *)v3[13];
  v224 = v222 - v223;
  v225 = (v222 - v223) >> 2;
  v226 = (char *)v549[0];
  if (v225 <= ((char *)v550[0] - (char *)v549[0]) >> 3)
  {
    v230 = (char *)v549[1];
    if (v223 == v222)
      goto LABEL_319;
    while (1)
    {
LABEL_285:
      while (1)
      {
        v242 = (3 * *(_DWORD *)v223);
        v243 = (char *)v549[0];
        if (v549[0] == v230 || *((_DWORD *)v230 - 1) != (_DWORD)v242)
          break;
        *((_DWORD *)v230 - 1) = v242 + 3;
        v223 += 4;
        if (v223 == v222)
          goto LABEL_318;
      }
      v244 = (v242 + 3);
      if (v230 < v550[0])
      {
        *(_QWORD *)v230 = v242 | (v244 << 32);
        v241 = v230 + 8;
        goto LABEL_284;
      }
      v245 = v230 - (char *)v549[0];
      v246 = (v230 - (char *)v549[0]) >> 3;
      v247 = v246 + 1;
      if ((unint64_t)(v246 + 1) >> 61)
        goto LABEL_615;
      v248 = (char *)v550[0] - (char *)v549[0];
      if (((char *)v550[0] - (char *)v549[0]) >> 2 > v247)
        v247 = v248 >> 2;
      v249 = (unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v247;
      if (!v249)
        break;
      if (v249 >> 61)
        goto LABEL_613;
      v250 = operator new(8 * v249);
      v251 = (uint64_t *)&v250[8 * v246];
      *v251 = v242 | (v244 << 32);
      v241 = v251 + 1;
      if (v243 == v230)
      {
LABEL_305:
        v549[0] = v251;
        v550[0] = &v250[8 * v249];
        if (v230)
          goto LABEL_306;
LABEL_284:
        v549[1] = v241;
        v230 = (char *)v241;
        v223 += 4;
        if (v223 == v222)
          goto LABEL_318;
      }
      else
      {
LABEL_299:
        if ((unint64_t)(v245 - 8) < 0x168)
        {
          v252 = v230;
          goto LABEL_301;
        }
        v254 = (v230 - 8 - v243) & 0xFFFFFFFFFFFFFFF8;
        if (&v250[v245 - 8 - v254] > &v250[v245 - 8])
        {
          v252 = v230;
          do
          {
LABEL_301:
            v253 = *((_QWORD *)v252 - 1);
            v252 -= 8;
            *--v251 = v253;
          }
          while (v252 != v243);
          goto LABEL_302;
        }
        if (&v230[-v254 - 8] > v230 - 8)
        {
          v252 = v230;
          goto LABEL_301;
        }
        if ((unint64_t)(v243 - v250) < 0x20)
        {
          v252 = v230;
          goto LABEL_301;
        }
        v255 = ((unint64_t)(v245 - 8) >> 3) + 1;
        v256 = 8 * (v255 & 0x3FFFFFFFFFFFFFFCLL);
        v252 = &v230[-v256];
        v251 = (uint64_t *)((char *)v251 - v256);
        v257 = &v250[8 * v246 - 16];
        v258 = v230 - 16;
        v259 = v255 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v260 = *(_OWORD *)v258;
          *(v257 - 1) = *((_OWORD *)v258 - 1);
          *v257 = v260;
          v257 -= 2;
          v258 -= 32;
          v259 -= 4;
        }
        while (v259);
        if (v255 != (v255 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_301;
LABEL_302:
        v230 = (char *)v549[0];
        v549[0] = v251;
        v550[0] = &v250[8 * v249];
        if (!v230)
          goto LABEL_284;
LABEL_306:
        operator delete(v230);
        v549[1] = v241;
        v230 = (char *)v241;
        v223 += 4;
        if (v223 == v222)
        {
LABEL_318:
          v226 = (char *)v549[0];
          v3 = a3;
          goto LABEL_319;
        }
      }
    }
    v250 = 0;
    v251 = (uint64_t *)(8 * v246);
    *(_QWORD *)(8 * v246) = v242 | (v244 << 32);
    v241 = (void *)(8 * v246 + 8);
    if (v243 != v230)
      goto LABEL_299;
    goto LABEL_305;
  }
  if (v224 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v227 = (char *)v549[1];
  v228 = (char *)operator new(2 * v224);
  v229 = (char *)v549[1] - (char *)v549[0];
  v230 = &v228[((char *)v549[1] - (char *)v549[0]) & 0xFFFFFFFFFFFFFFF8];
  v231 = v230;
  if (v549[1] != v549[0])
  {
    if ((unint64_t)(v229 - 8) < 0x58)
    {
      v231 = &v228[((char *)v549[1] - (char *)v549[0]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_277;
    }
    v231 = &v228[((char *)v549[1] - (char *)v549[0]) & 0xFFFFFFFFFFFFFFF8];
    if ((void *)((char *)v549[1] - (char *)&v228[v229 & 0xFFFFFFFFFFFFFFF8]) < (void *)0x20)
      goto LABEL_622;
    v232 = v229 >> 3;
    v233 = ((unint64_t)(v229 - 8) >> 3) + 1;
    v234 = 8 * (v233 & 0x3FFFFFFFFFFFFFFCLL);
    v235 = (char *)v549[1] - v234;
    v231 = &v230[-v234];
    v236 = &v228[8 * v232 - 16];
    v237 = (__int128 *)((char *)v549[1] - 16);
    v238 = v233 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v239 = *v237;
      *((_OWORD *)v236 - 1) = *(v237 - 1);
      *(_OWORD *)v236 = v239;
      v236 -= 32;
      v237 -= 2;
      v238 -= 4;
    }
    while (v238);
    v227 = v235;
    if (v233 != (v233 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_622:
      do
      {
LABEL_277:
        v240 = *((_QWORD *)v227 - 1);
        v227 -= 8;
        *((_QWORD *)v231 - 1) = v240;
        v231 -= 8;
      }
      while (v227 != v226);
    }
  }
  v549[0] = v231;
  v549[1] = v230;
  v550[0] = &v228[8 * v225];
  if (v226)
  {
    operator delete(v226);
    v223 = (char *)a3[12];
    v222 = (char *)a3[13];
    v226 = v231;
    v3 = a3;
    if (v223 != v222)
      goto LABEL_285;
  }
  else
  {
    v226 = v231;
    v3 = a3;
    if (v223 != v222)
      goto LABEL_285;
  }
LABEL_319:
  if (((v230 - v226) & 0x7FFFFFFF0) != 0)
  {
    v261 = ((unint64_t)(v230 - v226) >> 3);
    v264 = *(_DWORD *)v226;
    v263 = v226 + 8;
    v262 = v264;
    v265 = v261 - 1;
    do
    {
      v262 += *v263 - *(v263 - 1);
      *v263 = v262;
      v263 += 2;
      --v265;
    }
    while (v265);
  }
  v537 = 3 * (*(_DWORD *)(a1 + 40) + ((v3[13] - v3[12]) >> 2));
  v267 = (unsigned int *)v3[15];
  v266 = (unsigned int *)v3[16];
  v268 = (char *)v266 - (char *)v267;
  v269 = v266 - v267;
  v270 = (char *)v550[1];
  if (v269 <= (uint64_t)(*((_QWORD *)&v551 + 1) - (unint64_t)v550[1]) >> 3)
  {
    v274 = (char *)v551;
    if (v267 == v266)
      goto LABEL_375;
    while (1)
    {
LABEL_341:
      while (1)
      {
        v286 = *v267;
        v287 = (char *)v550[1];
        if (v550[1] == v274 || *((_DWORD *)v274 - 1) != (_DWORD)v286)
          break;
        *((_DWORD *)v274 - 1) = v286 + 1;
        if (++v267 == v266)
          goto LABEL_374;
      }
      v288 = (v286 + 1);
      if ((unint64_t)v274 < *((_QWORD *)&v551 + 1))
      {
        *(_QWORD *)v274 = v286 | (v288 << 32);
        v285 = (uint64_t)(v274 + 8);
        goto LABEL_340;
      }
      v289 = v274 - (char *)v550[1];
      v290 = (v274 - (char *)v550[1]) >> 3;
      v291 = v290 + 1;
      if ((unint64_t)(v290 + 1) >> 61)
        goto LABEL_615;
      v292 = *((_QWORD *)&v551 + 1) - (unint64_t)v550[1];
      if ((uint64_t)(*((_QWORD *)&v551 + 1) - (unint64_t)v550[1]) >> 2 > v291)
        v291 = v292 >> 2;
      v293 = (unint64_t)v292 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v291;
      if (!v293)
        break;
      if (v293 >> 61)
        goto LABEL_613;
      v294 = operator new(8 * v293);
      v295 = (uint64_t *)&v294[8 * v290];
      *v295 = v286 | (v288 << 32);
      v285 = (uint64_t)(v295 + 1);
      if (v287 == v274)
      {
LABEL_361:
        v550[1] = v295;
        *((_QWORD *)&v551 + 1) = &v294[8 * v293];
        if (v274)
          goto LABEL_362;
LABEL_340:
        *(_QWORD *)&v551 = v285;
        v274 = (char *)v285;
        if (++v267 == v266)
          goto LABEL_374;
      }
      else
      {
LABEL_355:
        if ((unint64_t)(v289 - 8) < 0x168)
        {
          v296 = v274;
          goto LABEL_357;
        }
        v298 = (v274 - 8 - v287) & 0xFFFFFFFFFFFFFFF8;
        if (&v294[v289 - 8 - v298] > &v294[v289 - 8])
        {
          v296 = v274;
          do
          {
LABEL_357:
            v297 = *((_QWORD *)v296 - 1);
            v296 -= 8;
            *--v295 = v297;
          }
          while (v296 != v287);
          goto LABEL_358;
        }
        if (&v274[-v298 - 8] > v274 - 8)
        {
          v296 = v274;
          goto LABEL_357;
        }
        if ((unint64_t)(v287 - v294) < 0x20)
        {
          v296 = v274;
          goto LABEL_357;
        }
        v299 = ((unint64_t)(v289 - 8) >> 3) + 1;
        v300 = 8 * (v299 & 0x3FFFFFFFFFFFFFFCLL);
        v296 = &v274[-v300];
        v295 = (uint64_t *)((char *)v295 - v300);
        v301 = &v294[8 * v290 - 16];
        v302 = v274 - 16;
        v303 = v299 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v304 = *(_OWORD *)v302;
          *(v301 - 1) = *((_OWORD *)v302 - 1);
          *v301 = v304;
          v301 -= 2;
          v302 -= 32;
          v303 -= 4;
        }
        while (v303);
        if (v299 != (v299 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_357;
LABEL_358:
        v274 = (char *)v550[1];
        v550[1] = v295;
        *((_QWORD *)&v551 + 1) = &v294[8 * v293];
        if (!v274)
          goto LABEL_340;
LABEL_362:
        operator delete(v274);
        *(_QWORD *)&v551 = v285;
        v274 = (char *)v285;
        if (++v267 == v266)
        {
LABEL_374:
          v270 = (char *)v550[1];
          v3 = a3;
          goto LABEL_375;
        }
      }
    }
    v294 = 0;
    v295 = (uint64_t *)(8 * v290);
    *(_QWORD *)(8 * v290) = v286 | (v288 << 32);
    v285 = 8 * v290 + 8;
    if (v287 != v274)
      goto LABEL_355;
    goto LABEL_361;
  }
  if (v268 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v271 = (char *)v551;
  v272 = (char *)operator new(2 * v268);
  v273 = v551 - (unint64_t)v550[1];
  v274 = &v272[(v551 - (unint64_t)v550[1]) & 0xFFFFFFFFFFFFFFF8];
  v275 = v274;
  if ((void *)v551 != v550[1])
  {
    if ((unint64_t)(v273 - 8) < 0x58)
    {
      v275 = &v272[(v551 - (unint64_t)v550[1]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_333;
    }
    v275 = &v272[(v551 - (unint64_t)v550[1]) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)v551 - (v273 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v272 < 0x20)
      goto LABEL_623;
    v276 = v273 >> 3;
    v277 = ((unint64_t)(v273 - 8) >> 3) + 1;
    v278 = 8 * (v277 & 0x3FFFFFFFFFFFFFFCLL);
    v279 = (char *)(v551 - v278);
    v275 = &v274[-v278];
    v280 = &v272[8 * v276 - 16];
    v281 = (__int128 *)(v551 - 16);
    v282 = v277 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v283 = *v281;
      *((_OWORD *)v280 - 1) = *(v281 - 1);
      *(_OWORD *)v280 = v283;
      v280 -= 32;
      v281 -= 2;
      v282 -= 4;
    }
    while (v282);
    v271 = v279;
    if (v277 != (v277 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_623:
      do
      {
LABEL_333:
        v284 = *((_QWORD *)v271 - 1);
        v271 -= 8;
        *((_QWORD *)v275 - 1) = v284;
        v275 -= 8;
      }
      while (v271 != v270);
    }
  }
  v550[1] = v275;
  *(_QWORD *)&v551 = v274;
  *((_QWORD *)&v551 + 1) = &v272[8 * v269];
  if (v270)
  {
    operator delete(v270);
    v267 = (unsigned int *)a3[15];
    v266 = (unsigned int *)a3[16];
    v270 = v275;
    v3 = a3;
    if (v267 != v266)
      goto LABEL_341;
  }
  else
  {
    v270 = v275;
    v3 = a3;
    if (v267 != v266)
      goto LABEL_341;
  }
LABEL_375:
  if (((v274 - v270) & 0x7FFFFFFF0) != 0)
  {
    v305 = ((unint64_t)(v274 - v270) >> 3);
    v308 = *(_DWORD *)v270;
    v307 = v270 + 8;
    v306 = v308;
    v309 = v305 - 1;
    do
    {
      v306 += *v307 - *(v307 - 1);
      *v307 = v306;
      v307 += 2;
      --v309;
    }
    while (v309);
  }
  v538 = *(_DWORD *)(a1 + 44) + ((v3[16] - v3[15]) >> 2);
  v311 = (char *)v3[18];
  v310 = (char *)v3[19];
  v312 = v310 - v311;
  v313 = (v310 - v311) >> 2;
  v314 = (char *)v552[0];
  if (v313 <= ((char *)v553[0] - (char *)v552[0]) >> 3)
  {
    v318 = (char *)v552[1];
    if (v311 == v310)
      goto LABEL_431;
    while (1)
    {
LABEL_397:
      while (1)
      {
        v330 = (4 * *(_DWORD *)v311);
        v331 = (char *)v552[0];
        if (v552[0] == v318 || *((_DWORD *)v318 - 1) != (_DWORD)v330)
          break;
        *((_DWORD *)v318 - 1) = v330 + 4;
        v311 += 4;
        if (v311 == v310)
          goto LABEL_430;
      }
      v332 = (v330 + 4);
      if (v318 < v553[0])
      {
        *(_QWORD *)v318 = v330 | (v332 << 32);
        v329 = v318 + 8;
        goto LABEL_396;
      }
      v333 = v318 - (char *)v552[0];
      v334 = (v318 - (char *)v552[0]) >> 3;
      v335 = v334 + 1;
      if ((unint64_t)(v334 + 1) >> 61)
        goto LABEL_615;
      v336 = (char *)v553[0] - (char *)v552[0];
      if (((char *)v553[0] - (char *)v552[0]) >> 2 > v335)
        v335 = v336 >> 2;
      v337 = (unint64_t)v336 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v335;
      if (!v337)
        break;
      if (v337 >> 61)
        goto LABEL_613;
      v338 = operator new(8 * v337);
      v339 = (uint64_t *)&v338[8 * v334];
      *v339 = v330 | (v332 << 32);
      v329 = v339 + 1;
      if (v331 == v318)
      {
LABEL_417:
        v552[0] = v339;
        v553[0] = &v338[8 * v337];
        if (v318)
          goto LABEL_418;
LABEL_396:
        v552[1] = v329;
        v318 = (char *)v329;
        v311 += 4;
        if (v311 == v310)
          goto LABEL_430;
      }
      else
      {
LABEL_411:
        if ((unint64_t)(v333 - 8) < 0x168)
        {
          v340 = v318;
          goto LABEL_413;
        }
        v342 = (v318 - 8 - v331) & 0xFFFFFFFFFFFFFFF8;
        if (&v338[v333 - 8 - v342] > &v338[v333 - 8])
        {
          v340 = v318;
          do
          {
LABEL_413:
            v341 = *((_QWORD *)v340 - 1);
            v340 -= 8;
            *--v339 = v341;
          }
          while (v340 != v331);
          goto LABEL_414;
        }
        if (&v318[-v342 - 8] > v318 - 8)
        {
          v340 = v318;
          goto LABEL_413;
        }
        if ((unint64_t)(v331 - v338) < 0x20)
        {
          v340 = v318;
          goto LABEL_413;
        }
        v343 = ((unint64_t)(v333 - 8) >> 3) + 1;
        v344 = 8 * (v343 & 0x3FFFFFFFFFFFFFFCLL);
        v340 = &v318[-v344];
        v339 = (uint64_t *)((char *)v339 - v344);
        v345 = &v338[8 * v334 - 16];
        v346 = v318 - 16;
        v347 = v343 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v348 = *(_OWORD *)v346;
          *(v345 - 1) = *((_OWORD *)v346 - 1);
          *v345 = v348;
          v345 -= 2;
          v346 -= 32;
          v347 -= 4;
        }
        while (v347);
        if (v343 != (v343 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_413;
LABEL_414:
        v318 = (char *)v552[0];
        v552[0] = v339;
        v553[0] = &v338[8 * v337];
        if (!v318)
          goto LABEL_396;
LABEL_418:
        operator delete(v318);
        v552[1] = v329;
        v318 = (char *)v329;
        v311 += 4;
        if (v311 == v310)
        {
LABEL_430:
          v314 = (char *)v552[0];
          v3 = a3;
          goto LABEL_431;
        }
      }
    }
    v338 = 0;
    v339 = (uint64_t *)(8 * v334);
    *(_QWORD *)(8 * v334) = v330 | (v332 << 32);
    v329 = (void *)(8 * v334 + 8);
    if (v331 != v318)
      goto LABEL_411;
    goto LABEL_417;
  }
  if (v312 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v315 = (char *)v552[1];
  v316 = (char *)operator new(2 * v312);
  v317 = (char *)v552[1] - (char *)v552[0];
  v318 = &v316[((char *)v552[1] - (char *)v552[0]) & 0xFFFFFFFFFFFFFFF8];
  v319 = v318;
  if (v552[1] != v552[0])
  {
    if ((unint64_t)(v317 - 8) < 0x58)
    {
      v319 = &v316[((char *)v552[1] - (char *)v552[0]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_389;
    }
    v319 = &v316[((char *)v552[1] - (char *)v552[0]) & 0xFFFFFFFFFFFFFFF8];
    if ((void *)((char *)v552[1] - (v317 & 0xFFFFFFFFFFFFFFF8) - v316) < (void *)0x20)
      goto LABEL_624;
    v320 = v317 >> 3;
    v321 = ((unint64_t)(v317 - 8) >> 3) + 1;
    v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
    v323 = (char *)v552[1] - v322;
    v319 = &v318[-v322];
    v324 = &v316[8 * v320 - 16];
    v325 = (__int128 *)((char *)v552[1] - 16);
    v326 = v321 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v327 = *v325;
      *((_OWORD *)v324 - 1) = *(v325 - 1);
      *(_OWORD *)v324 = v327;
      v324 -= 32;
      v325 -= 2;
      v326 -= 4;
    }
    while (v326);
    v315 = v323;
    if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_624:
      do
      {
LABEL_389:
        v328 = *((_QWORD *)v315 - 1);
        v315 -= 8;
        *((_QWORD *)v319 - 1) = v328;
        v319 -= 8;
      }
      while (v315 != v314);
    }
  }
  v552[0] = v319;
  v552[1] = v318;
  v553[0] = &v316[8 * v313];
  if (v314)
  {
    operator delete(v314);
    v311 = (char *)a3[18];
    v310 = (char *)a3[19];
    v314 = v319;
    v3 = a3;
    if (v311 != v310)
      goto LABEL_397;
  }
  else
  {
    v314 = v319;
    v3 = a3;
    if (v311 != v310)
      goto LABEL_397;
  }
LABEL_431:
  if (((v318 - v314) & 0x7FFFFFFF0) != 0)
  {
    v349 = ((unint64_t)(v318 - v314) >> 3);
    v352 = *(_DWORD *)v314;
    v351 = v314 + 8;
    v350 = v352;
    v353 = v349 - 1;
    do
    {
      v350 += *v351 - *(v351 - 1);
      *v351 = v350;
      v351 += 2;
      --v353;
    }
    while (v353);
  }
  v539 = (*((_DWORD *)v3 + 38) - *((_DWORD *)v3 + 36) + 4 * *(_DWORD *)(a1 + 48)) & 0xFFFFFFFC;
  v355 = (char *)v3[21];
  v354 = (char *)v3[22];
  v356 = v354 - v355;
  v357 = (v354 - v355) >> 2;
  v358 = (char *)v553[1];
  if (v357 <= (uint64_t)(*((_QWORD *)&v554 + 1) - (unint64_t)v553[1]) >> 3)
  {
    v362 = (char *)v554;
    if (v355 == v354)
      goto LABEL_487;
    while (1)
    {
LABEL_453:
      while (1)
      {
        v374 = (4 * *(_DWORD *)v355);
        v375 = (char *)v553[1];
        if (v553[1] == v362 || *((_DWORD *)v362 - 1) != (_DWORD)v374)
          break;
        *((_DWORD *)v362 - 1) = v374 + 4;
        v355 += 4;
        if (v355 == v354)
          goto LABEL_486;
      }
      v376 = (v374 + 4);
      if ((unint64_t)v362 < *((_QWORD *)&v554 + 1))
      {
        *(_QWORD *)v362 = v374 | (v376 << 32);
        v373 = (uint64_t)(v362 + 8);
        goto LABEL_452;
      }
      v377 = v362 - (char *)v553[1];
      v378 = (v362 - (char *)v553[1]) >> 3;
      v379 = v378 + 1;
      if ((unint64_t)(v378 + 1) >> 61)
        goto LABEL_615;
      v380 = *((_QWORD *)&v554 + 1) - (unint64_t)v553[1];
      if ((uint64_t)(*((_QWORD *)&v554 + 1) - (unint64_t)v553[1]) >> 2 > v379)
        v379 = v380 >> 2;
      v381 = (unint64_t)v380 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v379;
      if (!v381)
        break;
      if (v381 >> 61)
        goto LABEL_613;
      v382 = operator new(8 * v381);
      v383 = (uint64_t *)&v382[8 * v378];
      *v383 = v374 | (v376 << 32);
      v373 = (uint64_t)(v383 + 1);
      if (v375 == v362)
      {
LABEL_473:
        v553[1] = v383;
        *((_QWORD *)&v554 + 1) = &v382[8 * v381];
        if (v362)
          goto LABEL_474;
LABEL_452:
        *(_QWORD *)&v554 = v373;
        v362 = (char *)v373;
        v355 += 4;
        if (v355 == v354)
          goto LABEL_486;
      }
      else
      {
LABEL_467:
        if ((unint64_t)(v377 - 8) < 0x168)
        {
          v384 = v362;
          goto LABEL_469;
        }
        v386 = (v362 - 8 - v375) & 0xFFFFFFFFFFFFFFF8;
        if (&v382[v377 - 8 - v386] > &v382[v377 - 8])
        {
          v384 = v362;
          do
          {
LABEL_469:
            v385 = *((_QWORD *)v384 - 1);
            v384 -= 8;
            *--v383 = v385;
          }
          while (v384 != v375);
          goto LABEL_470;
        }
        if (&v362[-v386 - 8] > v362 - 8)
        {
          v384 = v362;
          goto LABEL_469;
        }
        if ((unint64_t)(v375 - v382) < 0x20)
        {
          v384 = v362;
          goto LABEL_469;
        }
        v387 = ((unint64_t)(v377 - 8) >> 3) + 1;
        v388 = 8 * (v387 & 0x3FFFFFFFFFFFFFFCLL);
        v384 = &v362[-v388];
        v383 = (uint64_t *)((char *)v383 - v388);
        v389 = &v382[8 * v378 - 16];
        v390 = v362 - 16;
        v391 = v387 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v392 = *(_OWORD *)v390;
          *(v389 - 1) = *((_OWORD *)v390 - 1);
          *v389 = v392;
          v389 -= 2;
          v390 -= 32;
          v391 -= 4;
        }
        while (v391);
        if (v387 != (v387 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_469;
LABEL_470:
        v362 = (char *)v553[1];
        v553[1] = v383;
        *((_QWORD *)&v554 + 1) = &v382[8 * v381];
        if (!v362)
          goto LABEL_452;
LABEL_474:
        operator delete(v362);
        *(_QWORD *)&v554 = v373;
        v362 = (char *)v373;
        v355 += 4;
        if (v355 == v354)
        {
LABEL_486:
          v358 = (char *)v553[1];
          v3 = a3;
          goto LABEL_487;
        }
      }
    }
    v382 = 0;
    v383 = (uint64_t *)(8 * v378);
    *(_QWORD *)(8 * v378) = v374 | (v376 << 32);
    v373 = 8 * v378 + 8;
    if (v375 != v362)
      goto LABEL_467;
    goto LABEL_473;
  }
  if (v356 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v359 = (char *)v554;
  v360 = (char *)operator new(2 * v356);
  v361 = v554 - (unint64_t)v553[1];
  v362 = &v360[(v554 - (unint64_t)v553[1]) & 0xFFFFFFFFFFFFFFF8];
  v363 = v362;
  if ((void *)v554 != v553[1])
  {
    if ((unint64_t)(v361 - 8) < 0x58)
    {
      v363 = &v360[(v554 - (unint64_t)v553[1]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_445;
    }
    v363 = &v360[(v554 - (unint64_t)v553[1]) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)v554 - (v361 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v360 < 0x20)
      goto LABEL_625;
    v364 = v361 >> 3;
    v365 = ((unint64_t)(v361 - 8) >> 3) + 1;
    v366 = 8 * (v365 & 0x3FFFFFFFFFFFFFFCLL);
    v367 = (char *)(v554 - v366);
    v363 = &v362[-v366];
    v368 = &v360[8 * v364 - 16];
    v369 = (__int128 *)(v554 - 16);
    v370 = v365 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v371 = *v369;
      *((_OWORD *)v368 - 1) = *(v369 - 1);
      *(_OWORD *)v368 = v371;
      v368 -= 32;
      v369 -= 2;
      v370 -= 4;
    }
    while (v370);
    v359 = v367;
    if (v365 != (v365 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_625:
      do
      {
LABEL_445:
        v372 = *((_QWORD *)v359 - 1);
        v359 -= 8;
        *((_QWORD *)v363 - 1) = v372;
        v363 -= 8;
      }
      while (v359 != v358);
    }
  }
  v553[1] = v363;
  *(_QWORD *)&v554 = v362;
  *((_QWORD *)&v554 + 1) = &v360[8 * v357];
  if (v358)
  {
    operator delete(v358);
    v355 = (char *)a3[21];
    v354 = (char *)a3[22];
    v358 = v363;
    v3 = a3;
    if (v355 != v354)
      goto LABEL_453;
  }
  else
  {
    v358 = v363;
    v3 = a3;
    if (v355 != v354)
      goto LABEL_453;
  }
LABEL_487:
  if (((v362 - v358) & 0x7FFFFFFF0) != 0)
  {
    v393 = ((unint64_t)(v362 - v358) >> 3);
    v396 = *(_DWORD *)v358;
    v395 = v358 + 8;
    v394 = v396;
    v397 = v393 - 1;
    do
    {
      v394 += *v395 - *(v395 - 1);
      *v395 = v394;
      v395 += 2;
      --v397;
    }
    while (v397);
  }
  v540 = (*((_DWORD *)v3 + 44) - *((_DWORD *)v3 + 42) + 4 * *(_DWORD *)(a1 + 52)) & 0xFFFFFFFC;
  v399 = (char *)v3[24];
  v398 = (char *)v3[25];
  v400 = v398 - v399;
  v401 = (v398 - v399) >> 2;
  v402 = (char *)v555[0];
  if (v401 <= ((char *)v556[0] - (char *)v555[0]) >> 3)
  {
    v406 = (char *)v555[1];
    if (v399 == v398)
      goto LABEL_543;
    while (1)
    {
LABEL_509:
      while (1)
      {
        v418 = (3 * *(_DWORD *)v399);
        v419 = (char *)v555[0];
        if (v555[0] == v406 || *((_DWORD *)v406 - 1) != (_DWORD)v418)
          break;
        *((_DWORD *)v406 - 1) = v418 + 3;
        v399 += 4;
        if (v399 == v398)
          goto LABEL_542;
      }
      v420 = (v418 + 3);
      if (v406 < v556[0])
      {
        *(_QWORD *)v406 = v418 | (v420 << 32);
        v417 = v406 + 8;
        goto LABEL_508;
      }
      v421 = v406 - (char *)v555[0];
      v422 = (v406 - (char *)v555[0]) >> 3;
      v423 = v422 + 1;
      if ((unint64_t)(v422 + 1) >> 61)
        goto LABEL_615;
      v424 = (char *)v556[0] - (char *)v555[0];
      if (((char *)v556[0] - (char *)v555[0]) >> 2 > v423)
        v423 = v424 >> 2;
      v425 = (unint64_t)v424 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v423;
      if (!v425)
        break;
      if (v425 >> 61)
        goto LABEL_613;
      v426 = operator new(8 * v425);
      v427 = (uint64_t *)&v426[8 * v422];
      *v427 = v418 | (v420 << 32);
      v417 = v427 + 1;
      if (v419 == v406)
      {
LABEL_529:
        v555[0] = v427;
        v556[0] = &v426[8 * v425];
        if (v406)
          goto LABEL_530;
LABEL_508:
        v555[1] = v417;
        v406 = (char *)v417;
        v399 += 4;
        if (v399 == v398)
          goto LABEL_542;
      }
      else
      {
LABEL_523:
        if ((unint64_t)(v421 - 8) < 0x168)
        {
          v428 = v406;
          goto LABEL_525;
        }
        v430 = (v406 - 8 - v419) & 0xFFFFFFFFFFFFFFF8;
        if (&v426[v421 - 8 - v430] > &v426[v421 - 8])
        {
          v428 = v406;
          do
          {
LABEL_525:
            v429 = *((_QWORD *)v428 - 1);
            v428 -= 8;
            *--v427 = v429;
          }
          while (v428 != v419);
          goto LABEL_526;
        }
        if (&v406[-v430 - 8] > v406 - 8)
        {
          v428 = v406;
          goto LABEL_525;
        }
        if ((unint64_t)(v419 - v426) < 0x20)
        {
          v428 = v406;
          goto LABEL_525;
        }
        v431 = ((unint64_t)(v421 - 8) >> 3) + 1;
        v432 = 8 * (v431 & 0x3FFFFFFFFFFFFFFCLL);
        v428 = &v406[-v432];
        v427 = (uint64_t *)((char *)v427 - v432);
        v433 = &v426[8 * v422 - 16];
        v434 = v406 - 16;
        v435 = v431 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v436 = *(_OWORD *)v434;
          *(v433 - 1) = *((_OWORD *)v434 - 1);
          *v433 = v436;
          v433 -= 2;
          v434 -= 32;
          v435 -= 4;
        }
        while (v435);
        if (v431 != (v431 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_525;
LABEL_526:
        v406 = (char *)v555[0];
        v555[0] = v427;
        v556[0] = &v426[8 * v425];
        if (!v406)
          goto LABEL_508;
LABEL_530:
        operator delete(v406);
        v555[1] = v417;
        v406 = (char *)v417;
        v399 += 4;
        if (v399 == v398)
        {
LABEL_542:
          v402 = (char *)v555[0];
          v3 = a3;
          goto LABEL_543;
        }
      }
    }
    v426 = 0;
    v427 = (uint64_t *)(8 * v422);
    *(_QWORD *)(8 * v422) = v418 | (v420 << 32);
    v417 = (void *)(8 * v422 + 8);
    if (v419 != v406)
      goto LABEL_523;
    goto LABEL_529;
  }
  if (v400 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v403 = (char *)v555[1];
  v404 = (char *)operator new(2 * v400);
  v405 = (char *)v555[1] - (char *)v555[0];
  v406 = &v404[((char *)v555[1] - (char *)v555[0]) & 0xFFFFFFFFFFFFFFF8];
  v407 = v406;
  if (v555[1] != v555[0])
  {
    if ((unint64_t)(v405 - 8) < 0x58)
    {
      v407 = &v404[((char *)v555[1] - (char *)v555[0]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_501;
    }
    v407 = &v404[((char *)v555[1] - (char *)v555[0]) & 0xFFFFFFFFFFFFFFF8];
    if ((void *)((char *)v555[1] - (v405 & 0xFFFFFFFFFFFFFFF8) - v404) < (void *)0x20)
      goto LABEL_626;
    v408 = v405 >> 3;
    v409 = ((unint64_t)(v405 - 8) >> 3) + 1;
    v410 = 8 * (v409 & 0x3FFFFFFFFFFFFFFCLL);
    v411 = (char *)v555[1] - v410;
    v407 = &v406[-v410];
    v412 = &v404[8 * v408 - 16];
    v413 = (__int128 *)((char *)v555[1] - 16);
    v414 = v409 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v415 = *v413;
      *((_OWORD *)v412 - 1) = *(v413 - 1);
      *(_OWORD *)v412 = v415;
      v412 -= 32;
      v413 -= 2;
      v414 -= 4;
    }
    while (v414);
    v403 = v411;
    if (v409 != (v409 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_626:
      do
      {
LABEL_501:
        v416 = *((_QWORD *)v403 - 1);
        v403 -= 8;
        *((_QWORD *)v407 - 1) = v416;
        v407 -= 8;
      }
      while (v403 != v402);
    }
  }
  v555[0] = v407;
  v555[1] = v406;
  v556[0] = &v404[8 * v401];
  if (v402)
  {
    operator delete(v402);
    v399 = (char *)a3[24];
    v398 = (char *)a3[25];
    v402 = v407;
    v3 = a3;
    if (v399 != v398)
      goto LABEL_509;
  }
  else
  {
    v402 = v407;
    v3 = a3;
    if (v399 != v398)
      goto LABEL_509;
  }
LABEL_543:
  if (((v406 - v402) & 0x7FFFFFFF0) != 0)
  {
    v437 = ((unint64_t)(v406 - v402) >> 3);
    v440 = *(_DWORD *)v402;
    v439 = v402 + 8;
    v438 = v440;
    v441 = v437 - 1;
    do
    {
      v438 += *v439 - *(v439 - 1);
      *v439 = v438;
      v439 += 2;
      --v441;
    }
    while (v441);
  }
  v541 = 3 * (*(_DWORD *)(a1 + 56) + ((v3[25] - v3[24]) >> 2));
  v443 = (char *)v3[27];
  v442 = (char *)v3[28];
  v444 = v442 - v443;
  v445 = (v442 - v443) >> 2;
  v446 = (char *)v556[1];
  if (v445 <= (uint64_t)(*((_QWORD *)&v557 + 1) - (unint64_t)v556[1]) >> 3)
  {
    v450 = (char *)v557;
    if (v443 == v442)
      goto LABEL_599;
    while (1)
    {
LABEL_565:
      while (1)
      {
        v462 = (3 * *(_DWORD *)v443);
        v463 = (char *)v556[1];
        if (v556[1] == v450 || *((_DWORD *)v450 - 1) != (_DWORD)v462)
          break;
        *((_DWORD *)v450 - 1) = v462 + 3;
        v443 += 4;
        if (v443 == v442)
          goto LABEL_598;
      }
      v464 = (v462 + 3);
      if ((unint64_t)v450 < *((_QWORD *)&v557 + 1))
      {
        *(_QWORD *)v450 = v462 | (v464 << 32);
        v461 = (uint64_t)(v450 + 8);
        goto LABEL_564;
      }
      v465 = v450 - (char *)v556[1];
      v466 = (v450 - (char *)v556[1]) >> 3;
      v467 = v466 + 1;
      if ((unint64_t)(v466 + 1) >> 61)
        goto LABEL_615;
      v468 = *((_QWORD *)&v557 + 1) - (unint64_t)v556[1];
      if ((uint64_t)(*((_QWORD *)&v557 + 1) - (unint64_t)v556[1]) >> 2 > v467)
        v467 = v468 >> 2;
      v469 = (unint64_t)v468 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v467;
      if (!v469)
        break;
      if (v469 >> 61)
        goto LABEL_613;
      v470 = operator new(8 * v469);
      v471 = (uint64_t *)&v470[8 * v466];
      *v471 = v462 | (v464 << 32);
      v461 = (uint64_t)(v471 + 1);
      if (v463 == v450)
      {
LABEL_585:
        v556[1] = v471;
        *((_QWORD *)&v557 + 1) = &v470[8 * v469];
        if (v450)
          goto LABEL_586;
LABEL_564:
        *(_QWORD *)&v557 = v461;
        v450 = (char *)v461;
        v443 += 4;
        if (v443 == v442)
          goto LABEL_598;
      }
      else
      {
LABEL_579:
        if ((unint64_t)(v465 - 8) < 0x168)
        {
          v472 = v450;
          goto LABEL_581;
        }
        v474 = (v450 - 8 - v463) & 0xFFFFFFFFFFFFFFF8;
        if (&v470[v465 - 8 - v474] > &v470[v465 - 8])
        {
          v472 = v450;
          do
          {
LABEL_581:
            v473 = *((_QWORD *)v472 - 1);
            v472 -= 8;
            *--v471 = v473;
          }
          while (v472 != v463);
          goto LABEL_582;
        }
        if (&v450[-v474 - 8] > v450 - 8)
        {
          v472 = v450;
          goto LABEL_581;
        }
        if ((unint64_t)(v463 - v470) < 0x20)
        {
          v472 = v450;
          goto LABEL_581;
        }
        v475 = ((unint64_t)(v465 - 8) >> 3) + 1;
        v476 = 8 * (v475 & 0x3FFFFFFFFFFFFFFCLL);
        v472 = &v450[-v476];
        v471 = (uint64_t *)((char *)v471 - v476);
        v477 = &v470[8 * v466 - 16];
        v478 = v450 - 16;
        v479 = v475 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v480 = *(_OWORD *)v478;
          *(v477 - 1) = *((_OWORD *)v478 - 1);
          *v477 = v480;
          v477 -= 2;
          v478 -= 32;
          v479 -= 4;
        }
        while (v479);
        if (v475 != (v475 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_581;
LABEL_582:
        v450 = (char *)v556[1];
        v556[1] = v471;
        *((_QWORD *)&v557 + 1) = &v470[8 * v469];
        if (!v450)
          goto LABEL_564;
LABEL_586:
        operator delete(v450);
        *(_QWORD *)&v557 = v461;
        v450 = (char *)v461;
        v443 += 4;
        if (v443 == v442)
        {
LABEL_598:
          v446 = (char *)v556[1];
          v3 = a3;
          goto LABEL_599;
        }
      }
    }
    v470 = 0;
    v471 = (uint64_t *)(8 * v466);
    *(_QWORD *)(8 * v466) = v462 | (v464 << 32);
    v461 = 8 * v466 + 8;
    if (v463 != v450)
      goto LABEL_579;
    goto LABEL_585;
  }
  if (v444 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_615;
  v447 = (char *)v557;
  v448 = (char *)operator new(2 * v444);
  v449 = v557 - (unint64_t)v556[1];
  v450 = &v448[(v557 - (unint64_t)v556[1]) & 0xFFFFFFFFFFFFFFF8];
  v451 = v450;
  if ((void *)v557 != v556[1])
  {
    if ((unint64_t)(v449 - 8) < 0x58)
    {
      v451 = &v448[(v557 - (unint64_t)v556[1]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_557;
    }
    v451 = &v448[(v557 - (unint64_t)v556[1]) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)v557 - (v449 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v448 < 0x20)
      goto LABEL_627;
    v452 = v449 >> 3;
    v453 = ((unint64_t)(v449 - 8) >> 3) + 1;
    v454 = 8 * (v453 & 0x3FFFFFFFFFFFFFFCLL);
    v455 = (char *)(v557 - v454);
    v451 = &v450[-v454];
    v456 = &v448[8 * v452 - 16];
    v457 = (__int128 *)(v557 - 16);
    v458 = v453 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v459 = *v457;
      *((_OWORD *)v456 - 1) = *(v457 - 1);
      *(_OWORD *)v456 = v459;
      v456 -= 32;
      v457 -= 2;
      v458 -= 4;
    }
    while (v458);
    v447 = v455;
    if (v453 != (v453 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_627:
      do
      {
LABEL_557:
        v460 = *((_QWORD *)v447 - 1);
        v447 -= 8;
        *((_QWORD *)v451 - 1) = v460;
        v451 -= 8;
      }
      while (v447 != v446);
    }
  }
  v556[1] = v451;
  *(_QWORD *)&v557 = v450;
  *((_QWORD *)&v557 + 1) = &v448[8 * v445];
  if (v446)
  {
    operator delete(v446);
    v443 = (char *)a3[27];
    v442 = (char *)a3[28];
    v446 = v451;
    v3 = a3;
    if (v443 != v442)
      goto LABEL_565;
  }
  else
  {
    v446 = v451;
    v3 = a3;
    if (v443 != v442)
      goto LABEL_565;
  }
LABEL_599:
  if (((v450 - v446) & 0x7FFFFFFF0) != 0)
  {
    v481 = ((unint64_t)(v450 - v446) >> 3);
    v484 = *(_DWORD *)v446;
    v483 = v446 + 8;
    v482 = v484;
    v485 = v481 - 1;
    do
    {
      v482 += *v483 - *(v483 - 1);
      *v483 = v482;
      v483 += 2;
      --v485;
    }
    while (v485);
  }
  v542 = 3 * (*(_DWORD *)(a1 + 60) + ((v3[28] - v3[27]) >> 2));
  v486 = v533;
  v487 = v534;
  v489 = v535;
  v488 = v536;
  v491 = v537;
  v490 = v538;
  v493 = v539;
  v492 = v540;
  v494 = v541;
  v495 = v534 + v533 + v535 + v536 + v537 + v538 + v539 + v542 + v540 + v541;
  if (v495 <= *(_DWORD *)(a1 + 8))
  {
    v532 = *(void **)a1;
    sub_20F9100BC(__p, a1, &v532, &v533);
    v503 = (_QWORD *)a1;
    *(_DWORD *)(a1 + 16) = v495;
    if (*(_QWORD *)(a1 + 8) < v495)
    {
      if (*(_QWORD *)a1)
      {
        MEMORY[0x212BC6368](*(_QWORD *)a1, 0x1000C8000313F17);
        v503 = (_QWORD *)a1;
      }
      v504 = (8 * v495 + 31) & 0xFFFFFFFE0;
      *v503 = 0;
      v503[1] = v504 >> 3;
      *v503 = operator new(v504, (std::align_val_t)0x20uLL);
    }
  }
  else
  {
    v527 = v534;
    v529 = v535;
    v531 = v536;
    v496 = v537;
    v497 = v538;
    v498 = v539;
    v499 = v540;
    v500 = v541;
    v501 = operator new((8 * (v534 + v533 + v535 + v536 + v537 + v538 + v539 + v542 + v540 + v541) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v532 = v501;
    sub_20F9100BC(__p, a1, &v532, &v533);
    v502 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v501;
    *(_QWORD *)(a1 + 8) = ((8 * v495 + 31) & 0xFFFFFFFE0uLL) >> 3;
    *(_DWORD *)(a1 + 16) = v495;
    v494 = v500;
    v492 = v499;
    v493 = v498;
    v490 = v497;
    v491 = v496;
    v488 = v531;
    v489 = v529;
    v487 = v527;
    if (v502)
      MEMORY[0x212BC6368](v502, 0x1000C8000313F17);
  }
  v505 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 24) += (a3[1] - *a3) >> 2;
  *(_DWORD *)(a1 + 28) = v505 + ((a3[4] - a3[3]) >> 2);
  v506 = *(_DWORD *)(a1 + 64) + v486;
  *(_DWORD *)(a1 + 68) = v506;
  v507 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 32) += (a3[7] - a3[6]) >> 2;
  v508 = v506 + v487;
  *(_DWORD *)(a1 + 72) = v508;
  *(_DWORD *)(a1 + 36) = v507 + ((a3[10] - a3[9]) >> 2);
  v509 = v508 + v489;
  *(_DWORD *)(a1 + 76) = v509;
  v510 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 40) += (a3[13] - a3[12]) >> 2;
  v511 = v509 + v488;
  *(_DWORD *)(a1 + 80) = v511;
  *(_DWORD *)(a1 + 44) = v510 + ((a3[16] - a3[15]) >> 2);
  v512 = v511 + v491;
  *(_DWORD *)(a1 + 84) = v512;
  v513 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 48) += (a3[19] - a3[18]) >> 2;
  v514 = v512 + v490;
  *(_DWORD *)(a1 + 88) = v514;
  *(_DWORD *)(a1 + 52) = v513 + ((a3[22] - a3[21]) >> 2);
  v515 = v514 + v493;
  *(_DWORD *)(a1 + 92) = v515;
  v516 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 56) += (a3[25] - a3[24]) >> 2;
  v517 = v515 + v492;
  *(_DWORD *)(a1 + 96) = v517;
  *(_DWORD *)(a1 + 60) = v516 + ((a3[28] - a3[27]) >> 2);
  *(_DWORD *)(a1 + 100) = v517 + v494;
  sub_20F89E908((uint64_t)__p);
}

void sub_20F90807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F908090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F9080A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F9080B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F9080CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F9080E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F9080F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F908108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F90811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F908130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F908144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F908158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F90816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20F89E908((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F908180(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  char *v140;
  char *v141;
  int v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  char *v154;
  char *v155;
  int v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  char *v182;
  char *v183;
  int v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  char *v197;
  int v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  char *v210;
  char *v211;
  int v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  char *v224;
  char *v225;
  int v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  char *v238;
  char *v239;
  int v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  char *v252;
  char *v253;
  int v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  char *v266;
  char *v267;
  int v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  char *v280;
  char *v281;
  int v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  char *v294;
  char *v295;
  int v296;
  uint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  char *v308;
  char *v309;
  int v310;
  uint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  char *v322;
  char *v323;
  int v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  char *v336;
  char *v337;
  int v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  char *v350;
  char *v351;
  int v352;
  uint64_t v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  char *v364;
  char *v365;
  int v366;
  uint64_t v367;
  char *v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  char *v378;
  char *v379;
  int v380;
  uint64_t v381;
  char *v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  char *v392;
  char *v393;
  int v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  unsigned int v404;
  uint64_t v405;
  char *v406;
  char *v407;
  int v408;
  uint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  char *v420;
  char *v421;
  int v422;
  uint64_t v423;
  char *v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  char *v434;
  char *v435;
  int v436;
  uint64_t v437;
  char *v438;
  char *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  uint64_t v447;
  char *v448;
  char *v449;
  int v450;
  uint64_t v451;
  char *v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  char *v462;
  char *v463;
  int v464;
  uint64_t v465;
  char *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int v474;
  uint64_t v475;
  char *v476;
  char *v477;
  int v478;
  uint64_t v479;
  char *v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  unsigned int v488;
  uint64_t v489;
  char *v490;
  char *v491;
  int v492;
  uint64_t v493;
  char *v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  unsigned int v502;
  uint64_t v503;
  char *v504;
  char *v505;
  int v506;
  uint64_t v507;
  char *v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  uint64_t v517;
  char *v518;
  char *v519;
  int v520;
  uint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  uint64_t v529;
  unsigned int v530;
  uint64_t v531;
  char *v532;
  char *v533;
  int v534;
  uint64_t v535;
  char *v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  uint64_t v545;
  char *v546;
  char *v547;
  int v548;
  uint64_t v549;
  char *v550;
  char *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int v558;
  uint64_t v559;
  char *v560;
  char *v561;
  int v562;
  uint64_t v563;
  char *v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  uint64_t v570;
  uint64_t v571;
  unsigned int v572;
  uint64_t v573;
  char *v574;
  char *v575;
  int v576;
  uint64_t v577;
  char *v578;
  char *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  unsigned int v586;
  uint64_t v587;
  char *v588;
  char *v589;
  int v590;
  uint64_t v591;
  char *v592;
  char *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  unsigned int v600;
  uint64_t v601;
  char *v602;
  char *v603;
  int v604;
  uint64_t v605;
  char *v606;
  char *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  unsigned int v614;
  uint64_t v615;
  char *v616;
  char *v617;
  int v618;
  uint64_t v619;
  char *v620;
  char *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  unsigned int v628;
  uint64_t v629;
  char *v630;
  char *v631;
  int v632;
  uint64_t v633;
  char *v634;
  char *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  char *v644;
  char *v645;
  int v646;
  uint64_t v647;
  char *v648;
  char *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  uint64_t v655;
  unsigned int v656;
  uint64_t v657;
  char *v658;
  char *v659;
  int v660;
  uint64_t v661;
  char *v662;
  char *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  unsigned int v670;
  uint64_t v671;
  char *v672;
  char *v673;
  int v674;
  uint64_t v675;
  char *v676;
  char *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  unsigned int v684;
  uint64_t v685;
  char *v686;
  char *v687;
  int v688;
  uint64_t v689;
  char *v690;
  char *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  int v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  uint64_t v699;
  char *v700;
  char *v701;
  int v702;
  uint64_t v703;
  char *v704;
  char *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  unsigned int v712;
  uint64_t v713;
  char *v714;
  char *v715;
  int v716;
  uint64_t v717;
  char *v718;
  char *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  uint64_t v724;
  uint64_t v725;
  unsigned int v726;
  uint64_t v727;
  char *v728;
  char *v729;
  int v730;
  uint64_t v731;
  char *v732;
  char *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  unsigned int v740;
  uint64_t v741;
  char *v742;
  char *v743;
  int v744;
  uint64_t v745;
  char *v746;
  char *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  int v751;
  uint64_t v752;
  uint64_t v753;
  unsigned int v754;
  uint64_t v755;
  char *v756;
  char *v757;
  int v758;
  uint64_t v759;
  char *v760;
  char *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  uint64_t v767;
  unsigned int v768;
  uint64_t v769;
  char *v770;
  char *v771;
  int v772;
  uint64_t v773;
  char *v774;
  char *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  int v779;
  uint64_t v780;
  uint64_t v781;
  unsigned int v782;
  uint64_t v783;
  char *v784;
  char *v785;
  int v786;
  uint64_t v787;
  char *v788;
  char *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  int v793;
  uint64_t v794;
  uint64_t v795;
  unsigned int v796;
  uint64_t v797;
  char *v798;
  char *v799;
  int v800;
  uint64_t v801;
  char *v802;
  char *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  int v807;
  uint64_t v808;
  uint64_t v809;
  unsigned int v810;
  uint64_t v811;
  char *v812;
  char *v813;
  int v814;
  uint64_t v815;
  char *v816;
  char *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  int v821;
  uint64_t v822;
  uint64_t v823;
  unsigned int v824;
  uint64_t v825;
  char *v826;
  char *v827;
  int v828;
  uint64_t v829;
  char *v830;
  char *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  int v835;
  uint64_t v836;
  uint64_t v837;
  unsigned int v838;
  uint64_t v839;
  char *v840;
  char *v841;
  int v842;
  uint64_t v843;
  char *v844;
  char *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  int v849;
  uint64_t v850;
  uint64_t v851;
  unsigned int v852;
  uint64_t v853;
  char *v854;
  char *v855;
  int v856;
  uint64_t v857;
  char *v858;
  char *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  uint64_t v864;
  uint64_t v865;
  unsigned int v866;
  uint64_t v867;
  char *v868;
  char *v869;
  int v870;
  uint64_t v871;
  char *v872;
  char *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  int v877;
  uint64_t v878;
  uint64_t v879;
  unsigned int v880;
  uint64_t v881;
  char *v882;
  char *v883;
  int v884;
  uint64_t v885;
  char *v886;
  char *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  int v891;
  uint64_t v892;
  uint64_t v893;
  unsigned int v894;
  uint64_t v895;
  char *v896;
  char *v897;
  int v898;
  uint64_t v899;
  char *v900;
  char *v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  unsigned int v908;
  uint64_t v909;
  char *v910;
  char *v911;
  int v912;
  uint64_t v913;
  char *v914;
  char *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  int v919;
  uint64_t v920;
  uint64_t v921;
  unsigned int v922;
  uint64_t v923;
  char *v924;
  char *v925;
  int v926;
  uint64_t v927;
  char *v928;
  char *v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  unsigned int v936;
  uint64_t v937;
  char *v938;
  char *v939;
  int v940;
  uint64_t v941;
  char *v942;
  char *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  int v947;
  uint64_t v948;
  uint64_t v949;
  unsigned int v950;
  uint64_t v951;
  char *v952;
  char *v953;
  int v954;
  uint64_t v955;
  char *v956;
  char *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  int v961;
  uint64_t v962;
  uint64_t v963;
  unsigned int v964;
  uint64_t v965;
  char *v966;
  char *v967;
  int v968;
  uint64_t v969;
  char *v970;
  char *v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  int v975;
  uint64_t v976;
  uint64_t v977;
  unsigned int v978;
  uint64_t v979;
  char *v980;
  char *v981;
  int v982;
  uint64_t v983;
  char *v984;
  char *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  unsigned int v992;
  uint64_t v993;
  char *v994;
  char *v995;
  int v996;
  uint64_t v997;
  char *v998;
  char *v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  int v1003;
  uint64_t v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  char *v1008;
  char *v1009;
  int v1010;
  uint64_t v1011;
  char *v1012;
  char *v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  int v1017;
  uint64_t v1018;
  uint64_t v1019;
  unsigned int v1020;
  uint64_t v1021;
  char *v1022;
  char *v1023;
  int v1024;
  uint64_t v1025;
  char *v1026;
  char *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  uint64_t v1032;
  uint64_t v1033;
  unsigned int v1034;
  uint64_t v1035;
  char *v1036;
  char *v1037;
  int v1038;
  uint64_t v1039;
  char *v1040;
  char *v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  int v1045;
  uint64_t v1046;
  uint64_t v1047;
  unsigned int v1048;
  uint64_t v1049;
  char *v1050;
  char *v1051;
  int v1052;
  uint64_t v1053;
  char *v1054;
  char *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  int v1059;
  uint64_t v1060;
  uint64_t v1061;
  unsigned int v1062;
  uint64_t v1063;
  char *v1064;
  char *v1065;
  int v1066;
  uint64_t v1067;
  char *v1068;
  char *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  int v1073;
  uint64_t v1074;
  uint64_t v1075;
  unsigned int v1076;
  uint64_t v1077;
  char *v1078;
  char *v1079;
  int v1080;
  uint64_t v1081;
  char *v1082;
  char *v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  uint64_t v1088;
  uint64_t v1089;
  unsigned int v1090;
  uint64_t v1091;
  char *v1092;
  char *v1093;
  int v1094;
  uint64_t v1095;
  char *v1096;
  char *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  int v1101;
  uint64_t v1102;
  uint64_t v1103;
  unsigned int v1104;
  uint64_t v1105;
  char *v1106;
  char *v1107;
  int v1108;
  uint64_t v1109;
  char *v1110;
  char *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  int v1115;
  uint64_t v1116;
  uint64_t v1117;
  unsigned int v1118;
  uint64_t v1119;
  char *v1120;
  char *v1121;
  int v1122;
  uint64_t v1123;
  char *v1124;
  char *v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  uint64_t v1130;
  uint64_t v1131;
  unsigned int v1132;
  uint64_t v1133;
  char *v1134;
  char *v1135;
  int v1136;
  uint64_t v1137;
  char *v1138;
  char *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  int v1143;
  uint64_t v1144;
  uint64_t v1145;
  unsigned int v1146;
  uint64_t v1147;
  char *v1148;
  char *v1149;
  int v1150;
  uint64_t v1151;
  char *v1152;
  char *v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  int v1157;
  uint64_t v1158;
  uint64_t v1159;
  unsigned int v1160;
  uint64_t v1161;
  char *v1162;
  char *v1163;
  int v1164;
  uint64_t v1165;
  char *v1166;
  char *v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  int v1171;
  uint64_t v1172;
  uint64_t v1173;
  unsigned int v1174;
  uint64_t v1175;
  char *v1176;
  char *v1177;
  int v1178;
  uint64_t v1179;
  char *v1180;
  char *v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  uint64_t v1186;
  uint64_t v1187;
  unsigned int v1188;
  uint64_t v1189;
  char *v1190;
  char *v1191;
  int v1192;
  uint64_t v1193;
  char *v1194;
  char *v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  int v1199;
  uint64_t v1200;
  uint64_t v1201;
  unsigned int v1202;
  uint64_t v1203;
  char *v1204;
  char *v1205;
  int v1206;
  uint64_t v1207;
  char *v1208;
  char *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  int v1213;
  uint64_t v1214;
  uint64_t v1215;
  unsigned int v1216;
  uint64_t v1217;
  char *v1218;
  char *v1219;
  int v1220;
  uint64_t v1221;
  char *v1222;
  char *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  int v1227;
  uint64_t v1228;
  uint64_t v1229;
  unsigned int v1230;
  uint64_t v1231;
  char *v1232;
  char *v1233;
  int v1234;
  uint64_t v1235;
  char *v1236;
  char *v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  int v1241;
  uint64_t v1242;
  uint64_t v1243;
  unsigned int v1244;
  uint64_t v1245;
  char *v1246;
  char *v1247;
  int v1248;
  uint64_t v1249;
  char *v1250;
  char *v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  int v1255;
  uint64_t v1256;
  uint64_t v1257;
  unsigned int v1258;
  uint64_t v1259;
  char *v1260;
  char *v1261;
  int v1262;
  uint64_t v1263;
  char *v1264;
  char *v1265;
  uint64_t v1266;
  uint64_t v1267;
  int v1268;
  uint64_t v1269;
  uint64_t v1270;
  unsigned int v1271;
  uint64_t v1272;
  char *v1273;
  char *v1274;
  int v1275;
  uint64_t v1276;
  char *v1277;
  char *v1278;
  uint64_t v1279;
  uint64_t v1280;
  int v1281;
  uint64_t v1282;
  uint64_t v1283;
  unsigned int v1284;
  uint64_t v1285;
  char *v1286;
  char *v1287;
  int v1288;
  uint64_t v1289;
  char *v1290;
  char *v1291;
  uint64_t v1292;
  uint64_t v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  unsigned int v1297;
  uint64_t v1298;
  char *v1299;
  char *v1300;
  int v1301;
  uint64_t v1302;
  char *v1303;
  char *v1304;
  uint64_t v1305;
  uint64_t v1306;
  int v1307;
  uint64_t v1308;
  uint64_t v1309;
  unsigned int v1310;
  uint64_t v1311;
  char *v1312;
  char *v1313;
  int v1314;
  uint64_t v1315;
  char *v1316;
  char *v1317;
  uint64_t v1318;
  uint64_t v1319;
  int v1320;
  uint64_t v1321;
  uint64_t v1322;
  unsigned int v1323;
  uint64_t v1324;
  char *v1325;
  char *v1326;
  int v1327;
  uint64_t v1328;
  char *v1329;
  char *v1330;
  uint64_t v1331;
  uint64_t v1332;
  int v1333;
  uint64_t v1334;
  uint64_t v1335;
  unsigned int v1336;
  uint64_t v1337;
  char *v1338;
  char *v1339;
  int v1340;
  uint64_t v1341;
  char *v1342;
  char *v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  uint64_t v1347;
  uint64_t v1348;
  unsigned int v1349;
  uint64_t v1350;
  char *v1351;
  char *v1352;
  int v1353;
  uint64_t v1354;
  char *v1355;
  char *v1356;
  uint64_t v1357;
  uint64_t v1358;
  int v1359;
  uint64_t v1360;
  uint64_t v1361;
  unsigned int v1362;
  uint64_t v1363;
  char *v1364;
  char *v1365;
  int v1366;
  uint64_t v1367;
  char *v1368;
  char *v1369;
  uint64_t v1370;
  uint64_t v1371;
  int v1372;
  uint64_t v1373;
  uint64_t v1374;
  unsigned int v1375;
  uint64_t v1376;
  char *v1377;
  char *v1378;
  int v1379;
  uint64_t v1380;
  char *v1381;
  char *v1382;
  uint64_t v1383;
  uint64_t v1384;
  int v1385;
  uint64_t v1386;
  uint64_t v1387;
  unsigned int v1388;
  uint64_t v1389;
  char *v1390;
  char *v1391;
  int v1392;
  uint64_t v1393;
  char *v1394;
  char *v1395;
  int v1396;
  int v1397;
  int v1398;
  int v1399;
  int v1400;
  int v1401;
  int v1402;
  int v1403;
  int v1404;
  int v1405;
  int v1406;
  int v1407;
  int v1408;
  int v1409;
  int v1410;
  int v1411;
  int v1412;
  int v1413;
  int v1414;
  int v1415;
  int v1416;
  int v1417;
  int v1418;
  int v1419;
  int v1420;
  int v1421;
  int v1422;
  int v1423;
  int v1424;
  int v1425;
  int v1426;
  int v1427;
  int v1428;
  int v1429;
  int v1430;
  int v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  int v1436;
  int v1437;
  int v1438;
  int v1439;
  int v1440;
  int v1441;
  int v1442;
  int v1443;
  int v1444;
  int v1445;
  int v1446;
  int v1447;
  int v1448;
  int v1449;
  int v1450;
  int v1451;
  int v1452;
  int v1453;
  int v1454;
  int v1455;
  int v1456;
  int v1457;
  int v1458;
  int v1459;
  int v1460;
  int v1461;
  int v1462;
  int v1463;
  int v1464;
  int v1465;
  int v1466;
  int v1467;
  int v1468;
  int v1469;
  int v1470;
  int v1471;
  int v1472;
  int v1473;
  int v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  int v1481;
  int v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  int v1489;
  int v1490;
  int v1491;
  int v1492;
  int v1493;
  int v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  int v1594;
  int v1595;
  int v1596;
  int v1597;
  int v1598;
  int v1599;
  int v1600;
  int v1601;
  int v1602;
  int v1603;
  int v1604;
  int v1605;
  int v1606;
  int v1607;
  int v1608;
  int v1609;
  int v1610;
  int v1611;
  int v1612;
  int v1613;
  int v1614;
  int v1615;
  int v1616;
  int v1617;
  int v1618;
  int v1619;
  int v1620;
  int v1621;
  int v1622;
  int v1623;
  int v1624;
  int v1625;
  int v1626;
  int v1627;
  int v1628;
  int v1629;
  int v1630;
  int v1631;
  int v1632;
  int v1633;
  int v1634;
  int v1635;
  int v1636;
  int v1637;
  int v1638;
  int v1639;
  int v1640;
  int v1641;
  int v1642;
  int v1643;
  int v1644;
  int v1645;
  int v1646;
  int v1647;
  int v1648;
  int v1649;
  int v1650;
  int v1651;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  int v1656;
  int v1657;
  int v1658;
  int v1659;
  int v1660;
  int v1661;
  int v1662;
  int v1663;
  int v1664;
  int v1665;
  int v1666;
  int v1667;
  int v1668;
  int v1669;
  int v1670;
  int v1671;
  int v1672;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  int v1677;
  int v1678;
  int v1679;
  int v1680;
  int v1681;
  int v1682;
  int v1683;
  int v1684;
  int v1685;
  int v1686;
  int v1687;
  int v1688;
  int v1689;
  int v1690;
  int v1691;
  int v1692;
  int v1693;
  uint64_t v1694;
  int v1696;

  v5 = a1 + 1296;
  if (*(_QWORD *)(a1 + 1304))
  {
    sub_20F90FE30(a1 + 1296, (unsigned int **)a3);
    v7 = a2[27];
    v6 = a2[28];
    v8 = v6 - v7;
    if (v6 != v7)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1296) + 24))(v5, *(_DWORD *)(a1 + 1304) + ((unint64_t)v8 >> 2), *(unsigned int *)(a1 + 1308));
      v1595 = *(_DWORD *)(a1 + 1308);
      if (v1595)
      {
        v9 = 0;
        v1495 = (v8 >> 2) - 1;
        v1396 = 1 - (v8 >> 2);
        v10 = -(uint64_t)(v8 >> 2);
        do
        {
          v11 = *(_QWORD *)(a1 + 1384);
          v12 = *(_DWORD *)(a1 + 1408) * v9;
          v13 = v11 + 8 * v12;
          v14 = (char *)(v11 + 8 * (v12 + *(_DWORD *)(a1 + 1304)));
          v15 = &v14[8 * v10];
          v16 = v1396;
          v17 = v1495;
          do
          {
            v18 = (char *)(v13 + 8 * (v16 + *(_DWORD *)(a2[27] + 4 * v17)));
            v19 = &v14[-(v15 - v18)];
            if (v15 != v18)
              memmove(v19, (const void *)(v13 + 8 * (v16 + *(_DWORD *)(a2[27] + 4 * v17))), v15 - v18);
            *((_QWORD *)v19 - 1) = -1;
            v14 = v19 - 8;
            --v17;
            ++v16;
            v15 = v18;
          }
          while (v17 != -1);
          ++v9;
        }
        while (v9 != v1595);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 24))(a1 + 1296, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 2744))
  {
    sub_20F90FE30(a1 + 2736, (unsigned int **)(a3 + 24));
    v21 = a2[27];
    v20 = a2[28];
    v22 = v20 - v21;
    if (v20 != v21)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2736) + 24))(a1 + 2736, *(_DWORD *)(a1 + 2744) + ((unint64_t)v22 >> 2), *(unsigned int *)(a1 + 2748));
      v1596 = *(_DWORD *)(a1 + 2748);
      if (v1596)
      {
        v23 = 0;
        v1496 = (v22 >> 2) - 1;
        v1397 = 1 - (v22 >> 2);
        v24 = -(uint64_t)(v22 >> 2);
        do
        {
          v25 = *(_QWORD *)(a1 + 2824);
          v26 = *(_DWORD *)(a1 + 2848) * v23;
          v27 = v25 + 8 * v26;
          v28 = (char *)(v25 + 8 * (v26 + *(_DWORD *)(a1 + 2744)));
          v29 = &v28[8 * v24];
          v30 = v1397;
          v31 = v1496;
          do
          {
            v32 = (char *)(v27 + 8 * (v30 + *(_DWORD *)(a2[27] + 4 * v31)));
            v33 = &v28[-(v29 - v32)];
            if (v29 != v32)
              memmove(v33, (const void *)(v27 + 8 * (v30 + *(_DWORD *)(a2[27] + 4 * v31))), v29 - v32);
            *((_QWORD *)v33 - 1) = -1;
            v28 = v33 - 8;
            --v31;
            ++v30;
            v29 = v32;
          }
          while (v31 != -1);
          ++v23;
        }
        while (v23 != v1596);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2736) + 24))(a1 + 2736, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4184))
  {
    sub_20F90FE30(a1 + 4176, (unsigned int **)(a3 + 48));
    v35 = a2[27];
    v34 = a2[28];
    v36 = v34 - v35;
    if (v34 != v35)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4176) + 24))(a1 + 4176, *(_DWORD *)(a1 + 4184) + ((unint64_t)v36 >> 2), *(unsigned int *)(a1 + 4188));
      v1597 = *(_DWORD *)(a1 + 4188);
      if (v1597)
      {
        v37 = 0;
        v1497 = (v36 >> 2) - 1;
        v1398 = 1 - (v36 >> 2);
        v38 = -(uint64_t)(v36 >> 2);
        do
        {
          v39 = *(_QWORD *)(a1 + 4264);
          v40 = *(_DWORD *)(a1 + 4288) * v37;
          v41 = v39 + 8 * v40;
          v42 = (char *)(v39 + 8 * (v40 + *(_DWORD *)(a1 + 4184)));
          v43 = &v42[8 * v38];
          v44 = v1398;
          v45 = v1497;
          do
          {
            v46 = (char *)(v41 + 8 * (v44 + *(_DWORD *)(a2[27] + 4 * v45)));
            v47 = &v42[-(v43 - v46)];
            if (v43 != v46)
              memmove(v47, (const void *)(v41 + 8 * (v44 + *(_DWORD *)(a2[27] + 4 * v45))), v43 - v46);
            *((_QWORD *)v47 - 1) = -1;
            v42 = v47 - 8;
            --v45;
            ++v44;
            v43 = v46;
          }
          while (v45 != -1);
          ++v37;
        }
        while (v37 != v1597);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4176) + 24))(a1 + 4176, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5624))
  {
    sub_20F90FE30(a1 + 5616, (unsigned int **)(a3 + 72));
    v49 = a2[27];
    v48 = a2[28];
    v50 = v48 - v49;
    if (v48 != v49)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5616) + 24))(a1 + 5616, *(_DWORD *)(a1 + 5624) + ((unint64_t)v50 >> 2), *(unsigned int *)(a1 + 5628));
      v1598 = *(_DWORD *)(a1 + 5628);
      if (v1598)
      {
        v51 = 0;
        v1498 = (v50 >> 2) - 1;
        v1399 = 1 - (v50 >> 2);
        v52 = -(uint64_t)(v50 >> 2);
        do
        {
          v53 = *(_QWORD *)(a1 + 5704);
          v54 = *(_DWORD *)(a1 + 5728) * v51;
          v55 = v53 + 8 * v54;
          v56 = (char *)(v53 + 8 * (v54 + *(_DWORD *)(a1 + 5624)));
          v57 = &v56[8 * v52];
          v58 = v1399;
          v59 = v1498;
          do
          {
            v60 = (char *)(v55 + 8 * (v58 + *(_DWORD *)(a2[27] + 4 * v59)));
            v61 = &v56[-(v57 - v60)];
            if (v57 != v60)
              memmove(v61, (const void *)(v55 + 8 * (v58 + *(_DWORD *)(a2[27] + 4 * v59))), v57 - v60);
            *((_QWORD *)v61 - 1) = -1;
            v56 = v61 - 8;
            --v59;
            ++v58;
            v57 = v60;
          }
          while (v59 != -1);
          ++v51;
        }
        while (v51 != v1598);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5616) + 24))(a1 + 5616, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 7064))
  {
    sub_20F90FE30(a1 + 7056, (unsigned int **)(a3 + 96));
    v63 = a2[27];
    v62 = a2[28];
    v64 = v62 - v63;
    if (v62 != v63)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7056) + 24))(a1 + 7056, *(_DWORD *)(a1 + 7064) + ((unint64_t)v64 >> 2), *(unsigned int *)(a1 + 7068));
      v1599 = *(_DWORD *)(a1 + 7068);
      if (v1599)
      {
        v65 = 0;
        v1499 = (v64 >> 2) - 1;
        v1400 = 1 - (v64 >> 2);
        v66 = -(uint64_t)(v64 >> 2);
        do
        {
          v67 = *(_QWORD *)(a1 + 7144);
          v68 = *(_DWORD *)(a1 + 7168) * v65;
          v69 = v67 + 8 * v68;
          v70 = (char *)(v67 + 8 * (v68 + *(_DWORD *)(a1 + 7064)));
          v71 = &v70[8 * v66];
          v72 = v1400;
          v73 = v1499;
          do
          {
            v74 = (char *)(v69 + 8 * (v72 + *(_DWORD *)(a2[27] + 4 * v73)));
            v75 = &v70[-(v71 - v74)];
            if (v71 != v74)
              memmove(v75, (const void *)(v69 + 8 * (v72 + *(_DWORD *)(a2[27] + 4 * v73))), v71 - v74);
            *((_QWORD *)v75 - 1) = -1;
            v70 = v75 - 8;
            --v73;
            ++v72;
            v71 = v74;
          }
          while (v73 != -1);
          ++v65;
        }
        while (v65 != v1599);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7056) + 24))(a1 + 7056, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8504))
  {
    sub_20F90FE30(a1 + 8496, (unsigned int **)(a3 + 120));
    v77 = a2[27];
    v76 = a2[28];
    v78 = v76 - v77;
    if (v76 != v77)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8496) + 24))(a1 + 8496, *(_DWORD *)(a1 + 8504) + ((unint64_t)v78 >> 2), *(unsigned int *)(a1 + 8508));
      v1600 = *(_DWORD *)(a1 + 8508);
      if (v1600)
      {
        v79 = 0;
        v1500 = (v78 >> 2) - 1;
        v1401 = 1 - (v78 >> 2);
        v80 = -(uint64_t)(v78 >> 2);
        do
        {
          v81 = *(_QWORD *)(a1 + 8584);
          v82 = *(_DWORD *)(a1 + 8608) * v79;
          v83 = v81 + 8 * v82;
          v84 = (char *)(v81 + 8 * (v82 + *(_DWORD *)(a1 + 8504)));
          v85 = &v84[8 * v80];
          v86 = v1401;
          v87 = v1500;
          do
          {
            v88 = (char *)(v83 + 8 * (v86 + *(_DWORD *)(a2[27] + 4 * v87)));
            v89 = &v84[-(v85 - v88)];
            if (v85 != v88)
              memmove(v89, (const void *)(v83 + 8 * (v86 + *(_DWORD *)(a2[27] + 4 * v87))), v85 - v88);
            *((_QWORD *)v89 - 1) = -1;
            v84 = v89 - 8;
            --v87;
            ++v86;
            v85 = v88;
          }
          while (v87 != -1);
          ++v79;
        }
        while (v79 != v1600);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8496) + 24))(a1 + 8496, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 9944))
  {
    sub_20F90FE30(a1 + 9936, (unsigned int **)(a3 + 144));
    v91 = a2[27];
    v90 = a2[28];
    v92 = v90 - v91;
    if (v90 != v91)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9936) + 24))(a1 + 9936, *(_DWORD *)(a1 + 9944) + ((unint64_t)v92 >> 2), *(unsigned int *)(a1 + 9948));
      v1601 = *(_DWORD *)(a1 + 9948);
      if (v1601)
      {
        v93 = 0;
        v1501 = (v92 >> 2) - 1;
        v1402 = 1 - (v92 >> 2);
        v94 = -(uint64_t)(v92 >> 2);
        do
        {
          v95 = *(_QWORD *)(a1 + 10024);
          v96 = *(_DWORD *)(a1 + 10048) * v93;
          v97 = v95 + 8 * v96;
          v98 = (char *)(v95 + 8 * (v96 + *(_DWORD *)(a1 + 9944)));
          v99 = &v98[8 * v94];
          v100 = v1402;
          v101 = v1501;
          do
          {
            v102 = (char *)(v97 + 8 * (v100 + *(_DWORD *)(a2[27] + 4 * v101)));
            v103 = &v98[-(v99 - v102)];
            if (v99 != v102)
              memmove(v103, (const void *)(v97 + 8 * (v100 + *(_DWORD *)(a2[27] + 4 * v101))), v99 - v102);
            *((_QWORD *)v103 - 1) = -1;
            v98 = v103 - 8;
            --v101;
            ++v100;
            v99 = v102;
          }
          while (v101 != -1);
          ++v93;
        }
        while (v93 != v1601);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9936) + 24))(a1 + 9936, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 11384))
  {
    sub_20F90FE30(a1 + 11376, (unsigned int **)(a3 + 168));
    v105 = a2[27];
    v104 = a2[28];
    v106 = v104 - v105;
    if (v104 != v105)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11376) + 24))(a1 + 11376, *(_DWORD *)(a1 + 11384) + ((unint64_t)v106 >> 2), *(unsigned int *)(a1 + 11388));
      v1602 = *(_DWORD *)(a1 + 11388);
      if (v1602)
      {
        v107 = 0;
        v1502 = (v106 >> 2) - 1;
        v1403 = 1 - (v106 >> 2);
        v108 = -(uint64_t)(v106 >> 2);
        do
        {
          v109 = *(_QWORD *)(a1 + 11464);
          v110 = *(_DWORD *)(a1 + 11488) * v107;
          v111 = v109 + 8 * v110;
          v112 = (char *)(v109 + 8 * (v110 + *(_DWORD *)(a1 + 11384)));
          v113 = &v112[8 * v108];
          v114 = v1403;
          v115 = v1502;
          do
          {
            v116 = (char *)(v111 + 8 * (v114 + *(_DWORD *)(a2[27] + 4 * v115)));
            v117 = &v112[-(v113 - v116)];
            if (v113 != v116)
              memmove(v117, (const void *)(v111 + 8 * (v114 + *(_DWORD *)(a2[27] + 4 * v115))), v113 - v116);
            *((_QWORD *)v117 - 1) = -1;
            v112 = v117 - 8;
            --v115;
            ++v114;
            v113 = v116;
          }
          while (v115 != -1);
          ++v107;
        }
        while (v107 != v1602);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11376) + 24))(a1 + 11376, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 12824))
  {
    sub_20F90FE30(a1 + 12816, (unsigned int **)(a3 + 192));
    v119 = a2[27];
    v118 = a2[28];
    v120 = v118 - v119;
    if (v118 != v119)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12816) + 24))(a1 + 12816, *(_DWORD *)(a1 + 12824) + ((unint64_t)v120 >> 2), *(unsigned int *)(a1 + 12828));
      v1603 = *(_DWORD *)(a1 + 12828);
      if (v1603)
      {
        v121 = 0;
        v1503 = (v120 >> 2) - 1;
        v1404 = 1 - (v120 >> 2);
        v122 = -(uint64_t)(v120 >> 2);
        do
        {
          v123 = *(_QWORD *)(a1 + 12904);
          v124 = *(_DWORD *)(a1 + 12928) * v121;
          v125 = v123 + 8 * v124;
          v126 = (char *)(v123 + 8 * (v124 + *(_DWORD *)(a1 + 12824)));
          v127 = &v126[8 * v122];
          v128 = v1404;
          v129 = v1503;
          do
          {
            v130 = (char *)(v125 + 8 * (v128 + *(_DWORD *)(a2[27] + 4 * v129)));
            v131 = &v126[-(v127 - v130)];
            if (v127 != v130)
              memmove(v131, (const void *)(v125 + 8 * (v128 + *(_DWORD *)(a2[27] + 4 * v129))), v127 - v130);
            *((_QWORD *)v131 - 1) = -1;
            v126 = v131 - 8;
            --v129;
            ++v128;
            v127 = v130;
          }
          while (v129 != -1);
          ++v121;
        }
        while (v121 != v1603);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12816) + 24))(a1 + 12816, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 14264))
  {
    sub_20F90FE30(a1 + 14256, (unsigned int **)(a3 + 216));
    v133 = a2[27];
    v132 = a2[28];
    v134 = v132 - v133;
    if (v132 != v133)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 14256) + 24))(a1 + 14256, *(_DWORD *)(a1 + 14264) + ((unint64_t)v134 >> 2), *(unsigned int *)(a1 + 14268));
      v1604 = *(_DWORD *)(a1 + 14268);
      if (v1604)
      {
        v135 = 0;
        v1504 = (v134 >> 2) - 1;
        v1405 = 1 - (v134 >> 2);
        v136 = -(uint64_t)(v134 >> 2);
        do
        {
          v137 = *(_QWORD *)(a1 + 14344);
          v138 = *(_DWORD *)(a1 + 14368) * v135;
          v139 = v137 + 8 * v138;
          v140 = (char *)(v137 + 8 * (v138 + *(_DWORD *)(a1 + 14264)));
          v141 = &v140[8 * v136];
          v142 = v1405;
          v143 = v1504;
          do
          {
            v144 = (char *)(v139 + 8 * (v142 + *(_DWORD *)(a2[27] + 4 * v143)));
            v145 = &v140[-(v141 - v144)];
            if (v141 != v144)
              memmove(v145, (const void *)(v139 + 8 * (v142 + *(_DWORD *)(a2[27] + 4 * v143))), v141 - v144);
            *((_QWORD *)v145 - 1) = -1;
            v140 = v145 - 8;
            --v143;
            ++v142;
            v141 = v144;
          }
          while (v143 != -1);
          ++v135;
        }
        while (v135 != v1604);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 14256) + 24))(a1 + 14256, (a2[28] - a2[27]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 1160))
  {
    sub_20F90FE30(a1 + 1152, (unsigned int **)a3);
    v147 = a2[24];
    v146 = a2[25];
    v148 = v146 - v147;
    if (v146 != v147)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1152) + 24))(a1 + 1152, *(_DWORD *)(a1 + 1160) + ((unint64_t)v148 >> 2), *(unsigned int *)(a1 + 1164));
      v1605 = *(_DWORD *)(a1 + 1164);
      if (v1605)
      {
        v149 = 0;
        v1505 = (v148 >> 2) - 1;
        v1406 = 1 - (v148 >> 2);
        v150 = -(uint64_t)(v148 >> 2);
        do
        {
          v151 = *(_QWORD *)(a1 + 1240);
          v152 = *(_DWORD *)(a1 + 1264) * v149;
          v153 = v151 + 8 * v152;
          v154 = (char *)(v151 + 8 * (v152 + *(_DWORD *)(a1 + 1160)));
          v155 = &v154[8 * v150];
          v156 = v1406;
          v157 = v1505;
          do
          {
            v158 = (char *)(v153 + 8 * (v156 + *(_DWORD *)(a2[24] + 4 * v157)));
            v159 = &v154[-(v155 - v158)];
            if (v155 != v158)
              memmove(v159, (const void *)(v153 + 8 * (v156 + *(_DWORD *)(a2[24] + 4 * v157))), v155 - v158);
            *((_QWORD *)v159 - 1) = -1;
            v154 = v159 - 8;
            --v157;
            ++v156;
            v155 = v158;
          }
          while (v157 != -1);
          ++v149;
        }
        while (v149 != v1605);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1152) + 24))(a1 + 1152, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 2600))
  {
    sub_20F90FE30(a1 + 2592, (unsigned int **)(a3 + 24));
    v161 = a2[24];
    v160 = a2[25];
    v162 = v160 - v161;
    if (v160 != v161)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2592) + 24))(a1 + 2592, *(_DWORD *)(a1 + 2600) + ((unint64_t)v162 >> 2), *(unsigned int *)(a1 + 2604));
      v1606 = *(_DWORD *)(a1 + 2604);
      if (v1606)
      {
        v163 = 0;
        v1506 = (v162 >> 2) - 1;
        v1407 = 1 - (v162 >> 2);
        v164 = -(uint64_t)(v162 >> 2);
        do
        {
          v165 = *(_QWORD *)(a1 + 2680);
          v166 = *(_DWORD *)(a1 + 2704) * v163;
          v167 = v165 + 8 * v166;
          v168 = (char *)(v165 + 8 * (v166 + *(_DWORD *)(a1 + 2600)));
          v169 = &v168[8 * v164];
          v170 = v1407;
          v171 = v1506;
          do
          {
            v172 = (char *)(v167 + 8 * (v170 + *(_DWORD *)(a2[24] + 4 * v171)));
            v173 = &v168[-(v169 - v172)];
            if (v169 != v172)
              memmove(v173, (const void *)(v167 + 8 * (v170 + *(_DWORD *)(a2[24] + 4 * v171))), v169 - v172);
            *((_QWORD *)v173 - 1) = -1;
            v168 = v173 - 8;
            --v171;
            ++v170;
            v169 = v172;
          }
          while (v171 != -1);
          ++v163;
        }
        while (v163 != v1606);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2592) + 24))(a1 + 2592, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4040))
  {
    sub_20F90FE30(a1 + 4032, (unsigned int **)(a3 + 48));
    v175 = a2[24];
    v174 = a2[25];
    v176 = v174 - v175;
    if (v174 != v175)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4032) + 24))(a1 + 4032, *(_DWORD *)(a1 + 4040) + ((unint64_t)v176 >> 2), *(unsigned int *)(a1 + 4044));
      v1607 = *(_DWORD *)(a1 + 4044);
      if (v1607)
      {
        v177 = 0;
        v1507 = (v176 >> 2) - 1;
        v1408 = 1 - (v176 >> 2);
        v178 = -(uint64_t)(v176 >> 2);
        do
        {
          v179 = *(_QWORD *)(a1 + 4120);
          v180 = *(_DWORD *)(a1 + 4144) * v177;
          v181 = v179 + 8 * v180;
          v182 = (char *)(v179 + 8 * (v180 + *(_DWORD *)(a1 + 4040)));
          v183 = &v182[8 * v178];
          v184 = v1408;
          v185 = v1507;
          do
          {
            v186 = (char *)(v181 + 8 * (v184 + *(_DWORD *)(a2[24] + 4 * v185)));
            v187 = &v182[-(v183 - v186)];
            if (v183 != v186)
              memmove(v187, (const void *)(v181 + 8 * (v184 + *(_DWORD *)(a2[24] + 4 * v185))), v183 - v186);
            *((_QWORD *)v187 - 1) = -1;
            v182 = v187 - 8;
            --v185;
            ++v184;
            v183 = v186;
          }
          while (v185 != -1);
          ++v177;
        }
        while (v177 != v1607);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4032) + 24))(a1 + 4032, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5480))
  {
    sub_20F90FE30(a1 + 5472, (unsigned int **)(a3 + 72));
    v189 = a2[24];
    v188 = a2[25];
    v190 = v188 - v189;
    if (v188 != v189)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5472) + 24))(a1 + 5472, *(_DWORD *)(a1 + 5480) + ((unint64_t)v190 >> 2), *(unsigned int *)(a1 + 5484));
      v1608 = *(_DWORD *)(a1 + 5484);
      if (v1608)
      {
        v191 = 0;
        v1508 = (v190 >> 2) - 1;
        v1409 = 1 - (v190 >> 2);
        v192 = -(uint64_t)(v190 >> 2);
        do
        {
          v193 = *(_QWORD *)(a1 + 5560);
          v194 = *(_DWORD *)(a1 + 5584) * v191;
          v195 = v193 + 8 * v194;
          v196 = (char *)(v193 + 8 * (v194 + *(_DWORD *)(a1 + 5480)));
          v197 = &v196[8 * v192];
          v198 = v1409;
          v199 = v1508;
          do
          {
            v200 = (char *)(v195 + 8 * (v198 + *(_DWORD *)(a2[24] + 4 * v199)));
            v201 = &v196[-(v197 - v200)];
            if (v197 != v200)
              memmove(v201, (const void *)(v195 + 8 * (v198 + *(_DWORD *)(a2[24] + 4 * v199))), v197 - v200);
            *((_QWORD *)v201 - 1) = -1;
            v196 = v201 - 8;
            --v199;
            ++v198;
            v197 = v200;
          }
          while (v199 != -1);
          ++v191;
        }
        while (v191 != v1608);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5472) + 24))(a1 + 5472, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6920))
  {
    sub_20F90FE30(a1 + 6912, (unsigned int **)(a3 + 96));
    v203 = a2[24];
    v202 = a2[25];
    v204 = v202 - v203;
    if (v202 != v203)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6912) + 24))(a1 + 6912, *(_DWORD *)(a1 + 6920) + ((unint64_t)v204 >> 2), *(unsigned int *)(a1 + 6924));
      v1609 = *(_DWORD *)(a1 + 6924);
      if (v1609)
      {
        v205 = 0;
        v1509 = (v204 >> 2) - 1;
        v1410 = 1 - (v204 >> 2);
        v206 = -(uint64_t)(v204 >> 2);
        do
        {
          v207 = *(_QWORD *)(a1 + 7000);
          v208 = *(_DWORD *)(a1 + 7024) * v205;
          v209 = v207 + 8 * v208;
          v210 = (char *)(v207 + 8 * (v208 + *(_DWORD *)(a1 + 6920)));
          v211 = &v210[8 * v206];
          v212 = v1410;
          v213 = v1509;
          do
          {
            v214 = (char *)(v209 + 8 * (v212 + *(_DWORD *)(a2[24] + 4 * v213)));
            v215 = &v210[-(v211 - v214)];
            if (v211 != v214)
              memmove(v215, (const void *)(v209 + 8 * (v212 + *(_DWORD *)(a2[24] + 4 * v213))), v211 - v214);
            *((_QWORD *)v215 - 1) = -1;
            v210 = v215 - 8;
            --v213;
            ++v212;
            v211 = v214;
          }
          while (v213 != -1);
          ++v205;
        }
        while (v205 != v1609);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6912) + 24))(a1 + 6912, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8360))
  {
    sub_20F90FE30(a1 + 8352, (unsigned int **)(a3 + 120));
    v217 = a2[24];
    v216 = a2[25];
    v218 = v216 - v217;
    if (v216 != v217)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8352) + 24))(a1 + 8352, *(_DWORD *)(a1 + 8360) + ((unint64_t)v218 >> 2), *(unsigned int *)(a1 + 8364));
      v1610 = *(_DWORD *)(a1 + 8364);
      if (v1610)
      {
        v219 = 0;
        v1510 = (v218 >> 2) - 1;
        v1411 = 1 - (v218 >> 2);
        v220 = -(uint64_t)(v218 >> 2);
        do
        {
          v221 = *(_QWORD *)(a1 + 8440);
          v222 = *(_DWORD *)(a1 + 8464) * v219;
          v223 = v221 + 8 * v222;
          v224 = (char *)(v221 + 8 * (v222 + *(_DWORD *)(a1 + 8360)));
          v225 = &v224[8 * v220];
          v226 = v1411;
          v227 = v1510;
          do
          {
            v228 = (char *)(v223 + 8 * (v226 + *(_DWORD *)(a2[24] + 4 * v227)));
            v229 = &v224[-(v225 - v228)];
            if (v225 != v228)
              memmove(v229, (const void *)(v223 + 8 * (v226 + *(_DWORD *)(a2[24] + 4 * v227))), v225 - v228);
            *((_QWORD *)v229 - 1) = -1;
            v224 = v229 - 8;
            --v227;
            ++v226;
            v225 = v228;
          }
          while (v227 != -1);
          ++v219;
        }
        while (v219 != v1610);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8352) + 24))(a1 + 8352, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 9800))
  {
    sub_20F90FE30(a1 + 9792, (unsigned int **)(a3 + 144));
    v231 = a2[24];
    v230 = a2[25];
    v232 = v230 - v231;
    if (v230 != v231)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9792) + 24))(a1 + 9792, *(_DWORD *)(a1 + 9800) + ((unint64_t)v232 >> 2), *(unsigned int *)(a1 + 9804));
      v1611 = *(_DWORD *)(a1 + 9804);
      if (v1611)
      {
        v233 = 0;
        v1511 = (v232 >> 2) - 1;
        v1412 = 1 - (v232 >> 2);
        v234 = -(uint64_t)(v232 >> 2);
        do
        {
          v235 = *(_QWORD *)(a1 + 9880);
          v236 = *(_DWORD *)(a1 + 9904) * v233;
          v237 = v235 + 8 * v236;
          v238 = (char *)(v235 + 8 * (v236 + *(_DWORD *)(a1 + 9800)));
          v239 = &v238[8 * v234];
          v240 = v1412;
          v241 = v1511;
          do
          {
            v242 = (char *)(v237 + 8 * (v240 + *(_DWORD *)(a2[24] + 4 * v241)));
            v243 = &v238[-(v239 - v242)];
            if (v239 != v242)
              memmove(v243, (const void *)(v237 + 8 * (v240 + *(_DWORD *)(a2[24] + 4 * v241))), v239 - v242);
            *((_QWORD *)v243 - 1) = -1;
            v238 = v243 - 8;
            --v241;
            ++v240;
            v239 = v242;
          }
          while (v241 != -1);
          ++v233;
        }
        while (v233 != v1611);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9792) + 24))(a1 + 9792, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 11240))
  {
    sub_20F90FE30(a1 + 11232, (unsigned int **)(a3 + 168));
    v245 = a2[24];
    v244 = a2[25];
    v246 = v244 - v245;
    if (v244 != v245)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11232) + 24))(a1 + 11232, *(_DWORD *)(a1 + 11240) + ((unint64_t)v246 >> 2), *(unsigned int *)(a1 + 11244));
      v1612 = *(_DWORD *)(a1 + 11244);
      if (v1612)
      {
        v247 = 0;
        v1512 = (v246 >> 2) - 1;
        v1413 = 1 - (v246 >> 2);
        v248 = -(uint64_t)(v246 >> 2);
        do
        {
          v249 = *(_QWORD *)(a1 + 11320);
          v250 = *(_DWORD *)(a1 + 11344) * v247;
          v251 = v249 + 8 * v250;
          v252 = (char *)(v249 + 8 * (v250 + *(_DWORD *)(a1 + 11240)));
          v253 = &v252[8 * v248];
          v254 = v1413;
          v255 = v1512;
          do
          {
            v256 = (char *)(v251 + 8 * (v254 + *(_DWORD *)(a2[24] + 4 * v255)));
            v257 = &v252[-(v253 - v256)];
            if (v253 != v256)
              memmove(v257, (const void *)(v251 + 8 * (v254 + *(_DWORD *)(a2[24] + 4 * v255))), v253 - v256);
            *((_QWORD *)v257 - 1) = -1;
            v252 = v257 - 8;
            --v255;
            ++v254;
            v253 = v256;
          }
          while (v255 != -1);
          ++v247;
        }
        while (v247 != v1612);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11232) + 24))(a1 + 11232, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 12680))
  {
    sub_20F90FE30(a1 + 12672, (unsigned int **)(a3 + 192));
    v259 = a2[24];
    v258 = a2[25];
    v260 = v258 - v259;
    if (v258 != v259)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12672) + 24))(a1 + 12672, *(_DWORD *)(a1 + 12680) + ((unint64_t)v260 >> 2), *(unsigned int *)(a1 + 12684));
      v1613 = *(_DWORD *)(a1 + 12684);
      if (v1613)
      {
        v261 = 0;
        v1513 = (v260 >> 2) - 1;
        v1414 = 1 - (v260 >> 2);
        v262 = -(uint64_t)(v260 >> 2);
        do
        {
          v263 = *(_QWORD *)(a1 + 12760);
          v264 = *(_DWORD *)(a1 + 12784) * v261;
          v265 = v263 + 8 * v264;
          v266 = (char *)(v263 + 8 * (v264 + *(_DWORD *)(a1 + 12680)));
          v267 = &v266[8 * v262];
          v268 = v1414;
          v269 = v1513;
          do
          {
            v270 = (char *)(v265 + 8 * (v268 + *(_DWORD *)(a2[24] + 4 * v269)));
            v271 = &v266[-(v267 - v270)];
            if (v267 != v270)
              memmove(v271, (const void *)(v265 + 8 * (v268 + *(_DWORD *)(a2[24] + 4 * v269))), v267 - v270);
            *((_QWORD *)v271 - 1) = -1;
            v266 = v271 - 8;
            --v269;
            ++v268;
            v267 = v270;
          }
          while (v269 != -1);
          ++v261;
        }
        while (v261 != v1613);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12672) + 24))(a1 + 12672, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 14120))
  {
    sub_20F90FE30(a1 + 14112, (unsigned int **)(a3 + 216));
    v273 = a2[24];
    v272 = a2[25];
    v274 = v272 - v273;
    if (v272 != v273)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 14112) + 24))(a1 + 14112, *(_DWORD *)(a1 + 14120) + ((unint64_t)v274 >> 2), *(unsigned int *)(a1 + 14124));
      v1614 = *(_DWORD *)(a1 + 14124);
      if (v1614)
      {
        v275 = 0;
        v1514 = (v274 >> 2) - 1;
        v1415 = 1 - (v274 >> 2);
        v276 = -(uint64_t)(v274 >> 2);
        do
        {
          v277 = *(_QWORD *)(a1 + 14200);
          v278 = *(_DWORD *)(a1 + 14224) * v275;
          v279 = v277 + 8 * v278;
          v280 = (char *)(v277 + 8 * (v278 + *(_DWORD *)(a1 + 14120)));
          v281 = &v280[8 * v276];
          v282 = v1415;
          v283 = v1514;
          do
          {
            v284 = (char *)(v279 + 8 * (v282 + *(_DWORD *)(a2[24] + 4 * v283)));
            v285 = &v280[-(v281 - v284)];
            if (v281 != v284)
              memmove(v285, (const void *)(v279 + 8 * (v282 + *(_DWORD *)(a2[24] + 4 * v283))), v281 - v284);
            *((_QWORD *)v285 - 1) = -1;
            v280 = v285 - 8;
            --v283;
            ++v282;
            v281 = v284;
          }
          while (v283 != -1);
          ++v275;
        }
        while (v275 != v1614);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 14112) + 24))(a1 + 14112, (a2[25] - a2[24]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 1016))
  {
    sub_20F90FE30(a1 + 1008, (unsigned int **)a3);
    v287 = a2[21];
    v286 = a2[22];
    v288 = v286 - v287;
    if (v286 != v287)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1008) + 24))(a1 + 1008, *(_DWORD *)(a1 + 1016) + ((unint64_t)v288 >> 2), *(unsigned int *)(a1 + 1020));
      v1615 = *(_DWORD *)(a1 + 1020);
      if (v1615)
      {
        v289 = 0;
        v1515 = (v288 >> 2) - 1;
        v1416 = 1 - (v288 >> 2);
        v290 = -(uint64_t)(v288 >> 2);
        do
        {
          v291 = *(_QWORD *)(a1 + 1096);
          v292 = *(_DWORD *)(a1 + 1120) * v289;
          v293 = v291 + 8 * v292;
          v294 = (char *)(v291 + 8 * (v292 + *(_DWORD *)(a1 + 1016)));
          v295 = &v294[8 * v290];
          v296 = v1416;
          v297 = v1515;
          do
          {
            v298 = (char *)(v293 + 8 * (v296 + *(_DWORD *)(a2[21] + 4 * v297)));
            v299 = &v294[-(v295 - v298)];
            if (v295 != v298)
              memmove(v299, (const void *)(v293 + 8 * (v296 + *(_DWORD *)(a2[21] + 4 * v297))), v295 - v298);
            *((_QWORD *)v299 - 1) = -1;
            v294 = v299 - 8;
            --v297;
            ++v296;
            v295 = v298;
          }
          while (v297 != -1);
          ++v289;
        }
        while (v289 != v1615);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1008) + 24))(a1 + 1008, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 2456))
  {
    sub_20F90FE30(a1 + 2448, (unsigned int **)(a3 + 24));
    v301 = a2[21];
    v300 = a2[22];
    v302 = v300 - v301;
    if (v300 != v301)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2448) + 24))(a1 + 2448, *(_DWORD *)(a1 + 2456) + ((unint64_t)v302 >> 2), *(unsigned int *)(a1 + 2460));
      v1616 = *(_DWORD *)(a1 + 2460);
      if (v1616)
      {
        v303 = 0;
        v1516 = (v302 >> 2) - 1;
        v1417 = 1 - (v302 >> 2);
        v304 = -(uint64_t)(v302 >> 2);
        do
        {
          v305 = *(_QWORD *)(a1 + 2536);
          v306 = *(_DWORD *)(a1 + 2560) * v303;
          v307 = v305 + 8 * v306;
          v308 = (char *)(v305 + 8 * (v306 + *(_DWORD *)(a1 + 2456)));
          v309 = &v308[8 * v304];
          v310 = v1417;
          v311 = v1516;
          do
          {
            v312 = (char *)(v307 + 8 * (v310 + *(_DWORD *)(a2[21] + 4 * v311)));
            v313 = &v308[-(v309 - v312)];
            if (v309 != v312)
              memmove(v313, (const void *)(v307 + 8 * (v310 + *(_DWORD *)(a2[21] + 4 * v311))), v309 - v312);
            *((_QWORD *)v313 - 1) = -1;
            v308 = v313 - 8;
            --v311;
            ++v310;
            v309 = v312;
          }
          while (v311 != -1);
          ++v303;
        }
        while (v303 != v1616);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2448) + 24))(a1 + 2448, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3896))
  {
    sub_20F90FE30(a1 + 3888, (unsigned int **)(a3 + 48));
    v315 = a2[21];
    v314 = a2[22];
    v316 = v314 - v315;
    if (v314 != v315)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3888) + 24))(a1 + 3888, *(_DWORD *)(a1 + 3896) + ((unint64_t)v316 >> 2), *(unsigned int *)(a1 + 3900));
      v1617 = *(_DWORD *)(a1 + 3900);
      if (v1617)
      {
        v317 = 0;
        v1517 = (v316 >> 2) - 1;
        v1418 = 1 - (v316 >> 2);
        v318 = -(uint64_t)(v316 >> 2);
        do
        {
          v319 = *(_QWORD *)(a1 + 3976);
          v320 = *(_DWORD *)(a1 + 4000) * v317;
          v321 = v319 + 8 * v320;
          v322 = (char *)(v319 + 8 * (v320 + *(_DWORD *)(a1 + 3896)));
          v323 = &v322[8 * v318];
          v324 = v1418;
          v325 = v1517;
          do
          {
            v326 = (char *)(v321 + 8 * (v324 + *(_DWORD *)(a2[21] + 4 * v325)));
            v327 = &v322[-(v323 - v326)];
            if (v323 != v326)
              memmove(v327, (const void *)(v321 + 8 * (v324 + *(_DWORD *)(a2[21] + 4 * v325))), v323 - v326);
            *((_QWORD *)v327 - 1) = -1;
            v322 = v327 - 8;
            --v325;
            ++v324;
            v323 = v326;
          }
          while (v325 != -1);
          ++v317;
        }
        while (v317 != v1617);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3888) + 24))(a1 + 3888, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5336))
  {
    sub_20F90FE30(a1 + 5328, (unsigned int **)(a3 + 72));
    v329 = a2[21];
    v328 = a2[22];
    v330 = v328 - v329;
    if (v328 != v329)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5328) + 24))(a1 + 5328, *(_DWORD *)(a1 + 5336) + ((unint64_t)v330 >> 2), *(unsigned int *)(a1 + 5340));
      v1618 = *(_DWORD *)(a1 + 5340);
      if (v1618)
      {
        v331 = 0;
        v1518 = (v330 >> 2) - 1;
        v1419 = 1 - (v330 >> 2);
        v332 = -(uint64_t)(v330 >> 2);
        do
        {
          v333 = *(_QWORD *)(a1 + 5416);
          v334 = *(_DWORD *)(a1 + 5440) * v331;
          v335 = v333 + 8 * v334;
          v336 = (char *)(v333 + 8 * (v334 + *(_DWORD *)(a1 + 5336)));
          v337 = &v336[8 * v332];
          v338 = v1419;
          v339 = v1518;
          do
          {
            v340 = (char *)(v335 + 8 * (v338 + *(_DWORD *)(a2[21] + 4 * v339)));
            v341 = &v336[-(v337 - v340)];
            if (v337 != v340)
              memmove(v341, (const void *)(v335 + 8 * (v338 + *(_DWORD *)(a2[21] + 4 * v339))), v337 - v340);
            *((_QWORD *)v341 - 1) = -1;
            v336 = v341 - 8;
            --v339;
            ++v338;
            v337 = v340;
          }
          while (v339 != -1);
          ++v331;
        }
        while (v331 != v1618);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5328) + 24))(a1 + 5328, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6776))
  {
    sub_20F90FE30(a1 + 6768, (unsigned int **)(a3 + 96));
    v343 = a2[21];
    v342 = a2[22];
    v344 = v342 - v343;
    if (v342 != v343)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6768) + 24))(a1 + 6768, *(_DWORD *)(a1 + 6776) + ((unint64_t)v344 >> 2), *(unsigned int *)(a1 + 6780));
      v1619 = *(_DWORD *)(a1 + 6780);
      if (v1619)
      {
        v345 = 0;
        v1519 = (v344 >> 2) - 1;
        v1420 = 1 - (v344 >> 2);
        v346 = -(uint64_t)(v344 >> 2);
        do
        {
          v347 = *(_QWORD *)(a1 + 6856);
          v348 = *(_DWORD *)(a1 + 6880) * v345;
          v349 = v347 + 8 * v348;
          v350 = (char *)(v347 + 8 * (v348 + *(_DWORD *)(a1 + 6776)));
          v351 = &v350[8 * v346];
          v352 = v1420;
          v353 = v1519;
          do
          {
            v354 = (char *)(v349 + 8 * (v352 + *(_DWORD *)(a2[21] + 4 * v353)));
            v355 = &v350[-(v351 - v354)];
            if (v351 != v354)
              memmove(v355, (const void *)(v349 + 8 * (v352 + *(_DWORD *)(a2[21] + 4 * v353))), v351 - v354);
            *((_QWORD *)v355 - 1) = -1;
            v350 = v355 - 8;
            --v353;
            ++v352;
            v351 = v354;
          }
          while (v353 != -1);
          ++v345;
        }
        while (v345 != v1619);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6768) + 24))(a1 + 6768, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8216))
  {
    sub_20F90FE30(a1 + 8208, (unsigned int **)(a3 + 120));
    v357 = a2[21];
    v356 = a2[22];
    v358 = v356 - v357;
    if (v356 != v357)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8208) + 24))(a1 + 8208, *(_DWORD *)(a1 + 8216) + ((unint64_t)v358 >> 2), *(unsigned int *)(a1 + 8220));
      v1620 = *(_DWORD *)(a1 + 8220);
      if (v1620)
      {
        v359 = 0;
        v1520 = (v358 >> 2) - 1;
        v1421 = 1 - (v358 >> 2);
        v360 = -(uint64_t)(v358 >> 2);
        do
        {
          v361 = *(_QWORD *)(a1 + 8296);
          v362 = *(_DWORD *)(a1 + 8320) * v359;
          v363 = v361 + 8 * v362;
          v364 = (char *)(v361 + 8 * (v362 + *(_DWORD *)(a1 + 8216)));
          v365 = &v364[8 * v360];
          v366 = v1421;
          v367 = v1520;
          do
          {
            v368 = (char *)(v363 + 8 * (v366 + *(_DWORD *)(a2[21] + 4 * v367)));
            v369 = &v364[-(v365 - v368)];
            if (v365 != v368)
              memmove(v369, (const void *)(v363 + 8 * (v366 + *(_DWORD *)(a2[21] + 4 * v367))), v365 - v368);
            *((_QWORD *)v369 - 1) = -1;
            v364 = v369 - 8;
            --v367;
            ++v366;
            v365 = v368;
          }
          while (v367 != -1);
          ++v359;
        }
        while (v359 != v1620);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8208) + 24))(a1 + 8208, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 9656))
  {
    sub_20F90FE30(a1 + 9648, (unsigned int **)(a3 + 144));
    v371 = a2[21];
    v370 = a2[22];
    v372 = v370 - v371;
    if (v370 != v371)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9648) + 24))(a1 + 9648, *(_DWORD *)(a1 + 9656) + ((unint64_t)v372 >> 2), *(unsigned int *)(a1 + 9660));
      v1621 = *(_DWORD *)(a1 + 9660);
      if (v1621)
      {
        v373 = 0;
        v1521 = (v372 >> 2) - 1;
        v1422 = 1 - (v372 >> 2);
        v374 = -(uint64_t)(v372 >> 2);
        do
        {
          v375 = *(_QWORD *)(a1 + 9736);
          v376 = *(_DWORD *)(a1 + 9760) * v373;
          v377 = v375 + 8 * v376;
          v378 = (char *)(v375 + 8 * (v376 + *(_DWORD *)(a1 + 9656)));
          v379 = &v378[8 * v374];
          v380 = v1422;
          v381 = v1521;
          do
          {
            v382 = (char *)(v377 + 8 * (v380 + *(_DWORD *)(a2[21] + 4 * v381)));
            v383 = &v378[-(v379 - v382)];
            if (v379 != v382)
              memmove(v383, (const void *)(v377 + 8 * (v380 + *(_DWORD *)(a2[21] + 4 * v381))), v379 - v382);
            *((_QWORD *)v383 - 1) = -1;
            v378 = v383 - 8;
            --v381;
            ++v380;
            v379 = v382;
          }
          while (v381 != -1);
          ++v373;
        }
        while (v373 != v1621);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9648) + 24))(a1 + 9648, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 11096))
  {
    sub_20F90FE30(a1 + 11088, (unsigned int **)(a3 + 168));
    v385 = a2[21];
    v384 = a2[22];
    v386 = v384 - v385;
    if (v384 != v385)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11088) + 24))(a1 + 11088, *(_DWORD *)(a1 + 11096) + ((unint64_t)v386 >> 2), *(unsigned int *)(a1 + 11100));
      v1622 = *(_DWORD *)(a1 + 11100);
      if (v1622)
      {
        v387 = 0;
        v1522 = (v386 >> 2) - 1;
        v1423 = 1 - (v386 >> 2);
        v388 = -(uint64_t)(v386 >> 2);
        do
        {
          v389 = *(_QWORD *)(a1 + 11176);
          v390 = *(_DWORD *)(a1 + 11200) * v387;
          v391 = v389 + 8 * v390;
          v392 = (char *)(v389 + 8 * (v390 + *(_DWORD *)(a1 + 11096)));
          v393 = &v392[8 * v388];
          v394 = v1423;
          v395 = v1522;
          do
          {
            v396 = (char *)(v391 + 8 * (v394 + *(_DWORD *)(a2[21] + 4 * v395)));
            v397 = &v392[-(v393 - v396)];
            if (v393 != v396)
              memmove(v397, (const void *)(v391 + 8 * (v394 + *(_DWORD *)(a2[21] + 4 * v395))), v393 - v396);
            *((_QWORD *)v397 - 1) = -1;
            v392 = v397 - 8;
            --v395;
            ++v394;
            v393 = v396;
          }
          while (v395 != -1);
          ++v387;
        }
        while (v387 != v1622);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11088) + 24))(a1 + 11088, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 12536))
  {
    sub_20F90FE30(a1 + 12528, (unsigned int **)(a3 + 192));
    v399 = a2[21];
    v398 = a2[22];
    v400 = v398 - v399;
    if (v398 != v399)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12528) + 24))(a1 + 12528, *(_DWORD *)(a1 + 12536) + ((unint64_t)v400 >> 2), *(unsigned int *)(a1 + 12540));
      v1623 = *(_DWORD *)(a1 + 12540);
      if (v1623)
      {
        v401 = 0;
        v1523 = (v400 >> 2) - 1;
        v1424 = 1 - (v400 >> 2);
        v402 = -(uint64_t)(v400 >> 2);
        do
        {
          v403 = *(_QWORD *)(a1 + 12616);
          v404 = *(_DWORD *)(a1 + 12640) * v401;
          v405 = v403 + 8 * v404;
          v406 = (char *)(v403 + 8 * (v404 + *(_DWORD *)(a1 + 12536)));
          v407 = &v406[8 * v402];
          v408 = v1424;
          v409 = v1523;
          do
          {
            v410 = (char *)(v405 + 8 * (v408 + *(_DWORD *)(a2[21] + 4 * v409)));
            v411 = &v406[-(v407 - v410)];
            if (v407 != v410)
              memmove(v411, (const void *)(v405 + 8 * (v408 + *(_DWORD *)(a2[21] + 4 * v409))), v407 - v410);
            *((_QWORD *)v411 - 1) = -1;
            v406 = v411 - 8;
            --v409;
            ++v408;
            v407 = v410;
          }
          while (v409 != -1);
          ++v401;
        }
        while (v401 != v1623);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12528) + 24))(a1 + 12528, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 13976))
  {
    sub_20F90FE30(a1 + 13968, (unsigned int **)(a3 + 216));
    v413 = a2[21];
    v412 = a2[22];
    v414 = v412 - v413;
    if (v412 != v413)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13968) + 24))(a1 + 13968, *(_DWORD *)(a1 + 13976) + ((unint64_t)v414 >> 2), *(unsigned int *)(a1 + 13980));
      v1624 = *(_DWORD *)(a1 + 13980);
      if (v1624)
      {
        v415 = 0;
        v1524 = (v414 >> 2) - 1;
        v1425 = 1 - (v414 >> 2);
        v416 = -(uint64_t)(v414 >> 2);
        do
        {
          v417 = *(_QWORD *)(a1 + 14056);
          v418 = *(_DWORD *)(a1 + 14080) * v415;
          v419 = v417 + 8 * v418;
          v420 = (char *)(v417 + 8 * (v418 + *(_DWORD *)(a1 + 13976)));
          v421 = &v420[8 * v416];
          v422 = v1425;
          v423 = v1524;
          do
          {
            v424 = (char *)(v419 + 8 * (v422 + *(_DWORD *)(a2[21] + 4 * v423)));
            v425 = &v420[-(v421 - v424)];
            if (v421 != v424)
              memmove(v425, (const void *)(v419 + 8 * (v422 + *(_DWORD *)(a2[21] + 4 * v423))), v421 - v424);
            *((_QWORD *)v425 - 1) = -1;
            v420 = v425 - 8;
            --v423;
            ++v422;
            v421 = v424;
          }
          while (v423 != -1);
          ++v415;
        }
        while (v415 != v1624);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13968) + 24))(a1 + 13968, (a2[22] - a2[21]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 872))
  {
    sub_20F90FE30(a1 + 864, (unsigned int **)a3);
    v427 = a2[18];
    v426 = a2[19];
    v428 = v426 - v427;
    if (v426 != v427)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 864) + 24))(a1 + 864, *(_DWORD *)(a1 + 872) + ((unint64_t)v428 >> 2), *(unsigned int *)(a1 + 876));
      v1625 = *(_DWORD *)(a1 + 876);
      if (v1625)
      {
        v429 = 0;
        v1525 = (v428 >> 2) - 1;
        v1426 = 1 - (v428 >> 2);
        v430 = -(uint64_t)(v428 >> 2);
        do
        {
          v431 = *(_QWORD *)(a1 + 952);
          v432 = *(_DWORD *)(a1 + 976) * v429;
          v433 = v431 + 8 * v432;
          v434 = (char *)(v431 + 8 * (v432 + *(_DWORD *)(a1 + 872)));
          v435 = &v434[8 * v430];
          v436 = v1426;
          v437 = v1525;
          do
          {
            v438 = (char *)(v433 + 8 * (v436 + *(_DWORD *)(a2[18] + 4 * v437)));
            v439 = &v434[-(v435 - v438)];
            if (v435 != v438)
              memmove(v439, (const void *)(v433 + 8 * (v436 + *(_DWORD *)(a2[18] + 4 * v437))), v435 - v438);
            *((_QWORD *)v439 - 1) = -1;
            v434 = v439 - 8;
            --v437;
            ++v436;
            v435 = v438;
          }
          while (v437 != -1);
          ++v429;
        }
        while (v429 != v1625);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 864) + 24))(a1 + 864, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 2312))
  {
    sub_20F90FE30(a1 + 2304, (unsigned int **)(a3 + 24));
    v441 = a2[18];
    v440 = a2[19];
    v442 = v440 - v441;
    if (v440 != v441)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2304) + 24))(a1 + 2304, *(_DWORD *)(a1 + 2312) + ((unint64_t)v442 >> 2), *(unsigned int *)(a1 + 2316));
      v1626 = *(_DWORD *)(a1 + 2316);
      if (v1626)
      {
        v443 = 0;
        v1526 = (v442 >> 2) - 1;
        v1427 = 1 - (v442 >> 2);
        v444 = -(uint64_t)(v442 >> 2);
        do
        {
          v445 = *(_QWORD *)(a1 + 2392);
          v446 = *(_DWORD *)(a1 + 2416) * v443;
          v447 = v445 + 8 * v446;
          v448 = (char *)(v445 + 8 * (v446 + *(_DWORD *)(a1 + 2312)));
          v449 = &v448[8 * v444];
          v450 = v1427;
          v451 = v1526;
          do
          {
            v452 = (char *)(v447 + 8 * (v450 + *(_DWORD *)(a2[18] + 4 * v451)));
            v453 = &v448[-(v449 - v452)];
            if (v449 != v452)
              memmove(v453, (const void *)(v447 + 8 * (v450 + *(_DWORD *)(a2[18] + 4 * v451))), v449 - v452);
            *((_QWORD *)v453 - 1) = -1;
            v448 = v453 - 8;
            --v451;
            ++v450;
            v449 = v452;
          }
          while (v451 != -1);
          ++v443;
        }
        while (v443 != v1626);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2304) + 24))(a1 + 2304, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3752))
  {
    sub_20F90FE30(a1 + 3744, (unsigned int **)(a3 + 48));
    v455 = a2[18];
    v454 = a2[19];
    v456 = v454 - v455;
    if (v454 != v455)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3744) + 24))(a1 + 3744, *(_DWORD *)(a1 + 3752) + ((unint64_t)v456 >> 2), *(unsigned int *)(a1 + 3756));
      v1627 = *(_DWORD *)(a1 + 3756);
      if (v1627)
      {
        v457 = 0;
        v1527 = (v456 >> 2) - 1;
        v1428 = 1 - (v456 >> 2);
        v458 = -(uint64_t)(v456 >> 2);
        do
        {
          v459 = *(_QWORD *)(a1 + 3832);
          v460 = *(_DWORD *)(a1 + 3856) * v457;
          v461 = v459 + 8 * v460;
          v462 = (char *)(v459 + 8 * (v460 + *(_DWORD *)(a1 + 3752)));
          v463 = &v462[8 * v458];
          v464 = v1428;
          v465 = v1527;
          do
          {
            v466 = (char *)(v461 + 8 * (v464 + *(_DWORD *)(a2[18] + 4 * v465)));
            v467 = &v462[-(v463 - v466)];
            if (v463 != v466)
              memmove(v467, (const void *)(v461 + 8 * (v464 + *(_DWORD *)(a2[18] + 4 * v465))), v463 - v466);
            *((_QWORD *)v467 - 1) = -1;
            v462 = v467 - 8;
            --v465;
            ++v464;
            v463 = v466;
          }
          while (v465 != -1);
          ++v457;
        }
        while (v457 != v1627);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3744) + 24))(a1 + 3744, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5192))
  {
    sub_20F90FE30(a1 + 5184, (unsigned int **)(a3 + 72));
    v469 = a2[18];
    v468 = a2[19];
    v470 = v468 - v469;
    if (v468 != v469)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5184) + 24))(a1 + 5184, *(_DWORD *)(a1 + 5192) + ((unint64_t)v470 >> 2), *(unsigned int *)(a1 + 5196));
      v1628 = *(_DWORD *)(a1 + 5196);
      if (v1628)
      {
        v471 = 0;
        v1528 = (v470 >> 2) - 1;
        v1429 = 1 - (v470 >> 2);
        v472 = -(uint64_t)(v470 >> 2);
        do
        {
          v473 = *(_QWORD *)(a1 + 5272);
          v474 = *(_DWORD *)(a1 + 5296) * v471;
          v475 = v473 + 8 * v474;
          v476 = (char *)(v473 + 8 * (v474 + *(_DWORD *)(a1 + 5192)));
          v477 = &v476[8 * v472];
          v478 = v1429;
          v479 = v1528;
          do
          {
            v480 = (char *)(v475 + 8 * (v478 + *(_DWORD *)(a2[18] + 4 * v479)));
            v481 = &v476[-(v477 - v480)];
            if (v477 != v480)
              memmove(v481, (const void *)(v475 + 8 * (v478 + *(_DWORD *)(a2[18] + 4 * v479))), v477 - v480);
            *((_QWORD *)v481 - 1) = -1;
            v476 = v481 - 8;
            --v479;
            ++v478;
            v477 = v480;
          }
          while (v479 != -1);
          ++v471;
        }
        while (v471 != v1628);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5184) + 24))(a1 + 5184, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6632))
  {
    sub_20F90FE30(a1 + 6624, (unsigned int **)(a3 + 96));
    v483 = a2[18];
    v482 = a2[19];
    v484 = v482 - v483;
    if (v482 != v483)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6624) + 24))(a1 + 6624, *(_DWORD *)(a1 + 6632) + ((unint64_t)v484 >> 2), *(unsigned int *)(a1 + 6636));
      v1629 = *(_DWORD *)(a1 + 6636);
      if (v1629)
      {
        v485 = 0;
        v1529 = (v484 >> 2) - 1;
        v1430 = 1 - (v484 >> 2);
        v486 = -(uint64_t)(v484 >> 2);
        do
        {
          v487 = *(_QWORD *)(a1 + 6712);
          v488 = *(_DWORD *)(a1 + 6736) * v485;
          v489 = v487 + 8 * v488;
          v490 = (char *)(v487 + 8 * (v488 + *(_DWORD *)(a1 + 6632)));
          v491 = &v490[8 * v486];
          v492 = v1430;
          v493 = v1529;
          do
          {
            v494 = (char *)(v489 + 8 * (v492 + *(_DWORD *)(a2[18] + 4 * v493)));
            v495 = &v490[-(v491 - v494)];
            if (v491 != v494)
              memmove(v495, (const void *)(v489 + 8 * (v492 + *(_DWORD *)(a2[18] + 4 * v493))), v491 - v494);
            *((_QWORD *)v495 - 1) = -1;
            v490 = v495 - 8;
            --v493;
            ++v492;
            v491 = v494;
          }
          while (v493 != -1);
          ++v485;
        }
        while (v485 != v1629);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6624) + 24))(a1 + 6624, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8072))
  {
    sub_20F90FE30(a1 + 8064, (unsigned int **)(a3 + 120));
    v497 = a2[18];
    v496 = a2[19];
    v498 = v496 - v497;
    if (v496 != v497)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8064) + 24))(a1 + 8064, *(_DWORD *)(a1 + 8072) + ((unint64_t)v498 >> 2), *(unsigned int *)(a1 + 8076));
      v1630 = *(_DWORD *)(a1 + 8076);
      if (v1630)
      {
        v499 = 0;
        v1530 = (v498 >> 2) - 1;
        v1431 = 1 - (v498 >> 2);
        v500 = -(uint64_t)(v498 >> 2);
        do
        {
          v501 = *(_QWORD *)(a1 + 8152);
          v502 = *(_DWORD *)(a1 + 8176) * v499;
          v503 = v501 + 8 * v502;
          v504 = (char *)(v501 + 8 * (v502 + *(_DWORD *)(a1 + 8072)));
          v505 = &v504[8 * v500];
          v506 = v1431;
          v507 = v1530;
          do
          {
            v508 = (char *)(v503 + 8 * (v506 + *(_DWORD *)(a2[18] + 4 * v507)));
            v509 = &v504[-(v505 - v508)];
            if (v505 != v508)
              memmove(v509, (const void *)(v503 + 8 * (v506 + *(_DWORD *)(a2[18] + 4 * v507))), v505 - v508);
            *((_QWORD *)v509 - 1) = -1;
            v504 = v509 - 8;
            --v507;
            ++v506;
            v505 = v508;
          }
          while (v507 != -1);
          ++v499;
        }
        while (v499 != v1630);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8064) + 24))(a1 + 8064, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 9512))
  {
    sub_20F90FE30(a1 + 9504, (unsigned int **)(a3 + 144));
    v511 = a2[18];
    v510 = a2[19];
    v512 = v510 - v511;
    if (v510 != v511)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9504) + 24))(a1 + 9504, *(_DWORD *)(a1 + 9512) + ((unint64_t)v512 >> 2), *(unsigned int *)(a1 + 9516));
      v1631 = *(_DWORD *)(a1 + 9516);
      if (v1631)
      {
        v513 = 0;
        v1531 = (v512 >> 2) - 1;
        v1432 = 1 - (v512 >> 2);
        v514 = -(uint64_t)(v512 >> 2);
        do
        {
          v515 = *(_QWORD *)(a1 + 9592);
          v516 = *(_DWORD *)(a1 + 9616) * v513;
          v517 = v515 + 8 * v516;
          v518 = (char *)(v515 + 8 * (v516 + *(_DWORD *)(a1 + 9512)));
          v519 = &v518[8 * v514];
          v520 = v1432;
          v521 = v1531;
          do
          {
            v522 = (char *)(v517 + 8 * (v520 + *(_DWORD *)(a2[18] + 4 * v521)));
            v523 = &v518[-(v519 - v522)];
            if (v519 != v522)
              memmove(v523, (const void *)(v517 + 8 * (v520 + *(_DWORD *)(a2[18] + 4 * v521))), v519 - v522);
            *((_QWORD *)v523 - 1) = -1;
            v518 = v523 - 8;
            --v521;
            ++v520;
            v519 = v522;
          }
          while (v521 != -1);
          ++v513;
        }
        while (v513 != v1631);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9504) + 24))(a1 + 9504, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 10952))
  {
    sub_20F90FE30(a1 + 10944, (unsigned int **)(a3 + 168));
    v525 = a2[18];
    v524 = a2[19];
    v526 = v524 - v525;
    if (v524 != v525)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10944) + 24))(a1 + 10944, *(_DWORD *)(a1 + 10952) + ((unint64_t)v526 >> 2), *(unsigned int *)(a1 + 10956));
      v1632 = *(_DWORD *)(a1 + 10956);
      if (v1632)
      {
        v527 = 0;
        v1532 = (v526 >> 2) - 1;
        v1433 = 1 - (v526 >> 2);
        v528 = -(uint64_t)(v526 >> 2);
        do
        {
          v529 = *(_QWORD *)(a1 + 11032);
          v530 = *(_DWORD *)(a1 + 11056) * v527;
          v531 = v529 + 8 * v530;
          v532 = (char *)(v529 + 8 * (v530 + *(_DWORD *)(a1 + 10952)));
          v533 = &v532[8 * v528];
          v534 = v1433;
          v535 = v1532;
          do
          {
            v536 = (char *)(v531 + 8 * (v534 + *(_DWORD *)(a2[18] + 4 * v535)));
            v537 = &v532[-(v533 - v536)];
            if (v533 != v536)
              memmove(v537, (const void *)(v531 + 8 * (v534 + *(_DWORD *)(a2[18] + 4 * v535))), v533 - v536);
            *((_QWORD *)v537 - 1) = -1;
            v532 = v537 - 8;
            --v535;
            ++v534;
            v533 = v536;
          }
          while (v535 != -1);
          ++v527;
        }
        while (v527 != v1632);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10944) + 24))(a1 + 10944, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 12392))
  {
    sub_20F90FE30(a1 + 12384, (unsigned int **)(a3 + 192));
    v539 = a2[18];
    v538 = a2[19];
    v540 = v538 - v539;
    if (v538 != v539)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12384) + 24))(a1 + 12384, *(_DWORD *)(a1 + 12392) + ((unint64_t)v540 >> 2), *(unsigned int *)(a1 + 12396));
      v1633 = *(_DWORD *)(a1 + 12396);
      if (v1633)
      {
        v541 = 0;
        v1533 = (v540 >> 2) - 1;
        v1434 = 1 - (v540 >> 2);
        v542 = -(uint64_t)(v540 >> 2);
        do
        {
          v543 = *(_QWORD *)(a1 + 12472);
          v544 = *(_DWORD *)(a1 + 12496) * v541;
          v545 = v543 + 8 * v544;
          v546 = (char *)(v543 + 8 * (v544 + *(_DWORD *)(a1 + 12392)));
          v547 = &v546[8 * v542];
          v548 = v1434;
          v549 = v1533;
          do
          {
            v550 = (char *)(v545 + 8 * (v548 + *(_DWORD *)(a2[18] + 4 * v549)));
            v551 = &v546[-(v547 - v550)];
            if (v547 != v550)
              memmove(v551, (const void *)(v545 + 8 * (v548 + *(_DWORD *)(a2[18] + 4 * v549))), v547 - v550);
            *((_QWORD *)v551 - 1) = -1;
            v546 = v551 - 8;
            --v549;
            ++v548;
            v547 = v550;
          }
          while (v549 != -1);
          ++v541;
        }
        while (v541 != v1633);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12384) + 24))(a1 + 12384, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 13832))
  {
    sub_20F90FE30(a1 + 13824, (unsigned int **)(a3 + 216));
    v553 = a2[18];
    v552 = a2[19];
    v554 = v552 - v553;
    if (v552 != v553)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13824) + 24))(a1 + 13824, *(_DWORD *)(a1 + 13832) + ((unint64_t)v554 >> 2), *(unsigned int *)(a1 + 13836));
      v1634 = *(_DWORD *)(a1 + 13836);
      if (v1634)
      {
        v555 = 0;
        v1534 = (v554 >> 2) - 1;
        v1435 = 1 - (v554 >> 2);
        v556 = -(uint64_t)(v554 >> 2);
        do
        {
          v557 = *(_QWORD *)(a1 + 13912);
          v558 = *(_DWORD *)(a1 + 13936) * v555;
          v559 = v557 + 8 * v558;
          v560 = (char *)(v557 + 8 * (v558 + *(_DWORD *)(a1 + 13832)));
          v561 = &v560[8 * v556];
          v562 = v1435;
          v563 = v1534;
          do
          {
            v564 = (char *)(v559 + 8 * (v562 + *(_DWORD *)(a2[18] + 4 * v563)));
            v565 = &v560[-(v561 - v564)];
            if (v561 != v564)
              memmove(v565, (const void *)(v559 + 8 * (v562 + *(_DWORD *)(a2[18] + 4 * v563))), v561 - v564);
            *((_QWORD *)v565 - 1) = -1;
            v560 = v565 - 8;
            --v563;
            ++v562;
            v561 = v564;
          }
          while (v563 != -1);
          ++v555;
        }
        while (v555 != v1634);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13824) + 24))(a1 + 13824, (a2[19] - a2[18]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 728))
  {
    sub_20F90FE30(a1 + 720, (unsigned int **)a3);
    v567 = a2[15];
    v566 = a2[16];
    v568 = v566 - v567;
    if (v566 != v567)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 720) + 24))(a1 + 720, *(_DWORD *)(a1 + 728) + ((unint64_t)v568 >> 2), *(unsigned int *)(a1 + 732));
      v1635 = *(_DWORD *)(a1 + 732);
      if (v1635)
      {
        v569 = 0;
        v1535 = (v568 >> 2) - 1;
        v1436 = 1 - (v568 >> 2);
        v570 = -(uint64_t)(v568 >> 2);
        do
        {
          v571 = *(_QWORD *)(a1 + 808);
          v572 = *(_DWORD *)(a1 + 832) * v569;
          v573 = v571 + 8 * v572;
          v574 = (char *)(v571 + 8 * (v572 + *(_DWORD *)(a1 + 728)));
          v575 = &v574[8 * v570];
          v576 = v1436;
          v577 = v1535;
          do
          {
            v578 = (char *)(v573 + 8 * (v576 + *(_DWORD *)(a2[15] + 4 * v577)));
            v579 = &v574[-(v575 - v578)];
            if (v575 != v578)
              memmove(v579, (const void *)(v573 + 8 * (v576 + *(_DWORD *)(a2[15] + 4 * v577))), v575 - v578);
            *((_QWORD *)v579 - 1) = -1;
            v574 = v579 - 8;
            --v577;
            ++v576;
            v575 = v578;
          }
          while (v577 != -1);
          ++v569;
        }
        while (v569 != v1635);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 720) + 24))(a1 + 720, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 2168))
  {
    sub_20F90FE30(a1 + 2160, (unsigned int **)(a3 + 24));
    v581 = a2[15];
    v580 = a2[16];
    v582 = v580 - v581;
    if (v580 != v581)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2160) + 24))(a1 + 2160, *(_DWORD *)(a1 + 2168) + ((unint64_t)v582 >> 2), *(unsigned int *)(a1 + 2172));
      v1636 = *(_DWORD *)(a1 + 2172);
      if (v1636)
      {
        v583 = 0;
        v1536 = (v582 >> 2) - 1;
        v1437 = 1 - (v582 >> 2);
        v584 = -(uint64_t)(v582 >> 2);
        do
        {
          v585 = *(_QWORD *)(a1 + 2248);
          v586 = *(_DWORD *)(a1 + 2272) * v583;
          v587 = v585 + 8 * v586;
          v588 = (char *)(v585 + 8 * (v586 + *(_DWORD *)(a1 + 2168)));
          v589 = &v588[8 * v584];
          v590 = v1437;
          v591 = v1536;
          do
          {
            v592 = (char *)(v587 + 8 * (v590 + *(_DWORD *)(a2[15] + 4 * v591)));
            v593 = &v588[-(v589 - v592)];
            if (v589 != v592)
              memmove(v593, (const void *)(v587 + 8 * (v590 + *(_DWORD *)(a2[15] + 4 * v591))), v589 - v592);
            *((_QWORD *)v593 - 1) = -1;
            v588 = v593 - 8;
            --v591;
            ++v590;
            v589 = v592;
          }
          while (v591 != -1);
          ++v583;
        }
        while (v583 != v1636);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2160) + 24))(a1 + 2160, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3608))
  {
    sub_20F90FE30(a1 + 3600, (unsigned int **)(a3 + 48));
    v595 = a2[15];
    v594 = a2[16];
    v596 = v594 - v595;
    if (v594 != v595)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3600) + 24))(a1 + 3600, *(_DWORD *)(a1 + 3608) + ((unint64_t)v596 >> 2), *(unsigned int *)(a1 + 3612));
      v1637 = *(_DWORD *)(a1 + 3612);
      if (v1637)
      {
        v597 = 0;
        v1537 = (v596 >> 2) - 1;
        v1438 = 1 - (v596 >> 2);
        v598 = -(uint64_t)(v596 >> 2);
        do
        {
          v599 = *(_QWORD *)(a1 + 3688);
          v600 = *(_DWORD *)(a1 + 3712) * v597;
          v601 = v599 + 8 * v600;
          v602 = (char *)(v599 + 8 * (v600 + *(_DWORD *)(a1 + 3608)));
          v603 = &v602[8 * v598];
          v604 = v1438;
          v605 = v1537;
          do
          {
            v606 = (char *)(v601 + 8 * (v604 + *(_DWORD *)(a2[15] + 4 * v605)));
            v607 = &v602[-(v603 - v606)];
            if (v603 != v606)
              memmove(v607, (const void *)(v601 + 8 * (v604 + *(_DWORD *)(a2[15] + 4 * v605))), v603 - v606);
            *((_QWORD *)v607 - 1) = -1;
            v602 = v607 - 8;
            --v605;
            ++v604;
            v603 = v606;
          }
          while (v605 != -1);
          ++v597;
        }
        while (v597 != v1637);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3600) + 24))(a1 + 3600, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5048))
  {
    sub_20F90FE30(a1 + 5040, (unsigned int **)(a3 + 72));
    v609 = a2[15];
    v608 = a2[16];
    v610 = v608 - v609;
    if (v608 != v609)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5040) + 24))(a1 + 5040, *(_DWORD *)(a1 + 5048) + ((unint64_t)v610 >> 2), *(unsigned int *)(a1 + 5052));
      v1638 = *(_DWORD *)(a1 + 5052);
      if (v1638)
      {
        v611 = 0;
        v1538 = (v610 >> 2) - 1;
        v1439 = 1 - (v610 >> 2);
        v612 = -(uint64_t)(v610 >> 2);
        do
        {
          v613 = *(_QWORD *)(a1 + 5128);
          v614 = *(_DWORD *)(a1 + 5152) * v611;
          v615 = v613 + 8 * v614;
          v616 = (char *)(v613 + 8 * (v614 + *(_DWORD *)(a1 + 5048)));
          v617 = &v616[8 * v612];
          v618 = v1439;
          v619 = v1538;
          do
          {
            v620 = (char *)(v615 + 8 * (v618 + *(_DWORD *)(a2[15] + 4 * v619)));
            v621 = &v616[-(v617 - v620)];
            if (v617 != v620)
              memmove(v621, (const void *)(v615 + 8 * (v618 + *(_DWORD *)(a2[15] + 4 * v619))), v617 - v620);
            *((_QWORD *)v621 - 1) = -1;
            v616 = v621 - 8;
            --v619;
            ++v618;
            v617 = v620;
          }
          while (v619 != -1);
          ++v611;
        }
        while (v611 != v1638);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5040) + 24))(a1 + 5040, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6488))
  {
    sub_20F90FE30(a1 + 6480, (unsigned int **)(a3 + 96));
    v623 = a2[15];
    v622 = a2[16];
    v624 = v622 - v623;
    if (v622 != v623)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6480) + 24))(a1 + 6480, *(_DWORD *)(a1 + 6488) + ((unint64_t)v624 >> 2), *(unsigned int *)(a1 + 6492));
      v1639 = *(_DWORD *)(a1 + 6492);
      if (v1639)
      {
        v625 = 0;
        v1539 = (v624 >> 2) - 1;
        v1440 = 1 - (v624 >> 2);
        v626 = -(uint64_t)(v624 >> 2);
        do
        {
          v627 = *(_QWORD *)(a1 + 6568);
          v628 = *(_DWORD *)(a1 + 6592) * v625;
          v629 = v627 + 8 * v628;
          v630 = (char *)(v627 + 8 * (v628 + *(_DWORD *)(a1 + 6488)));
          v631 = &v630[8 * v626];
          v632 = v1440;
          v633 = v1539;
          do
          {
            v634 = (char *)(v629 + 8 * (v632 + *(_DWORD *)(a2[15] + 4 * v633)));
            v635 = &v630[-(v631 - v634)];
            if (v631 != v634)
              memmove(v635, (const void *)(v629 + 8 * (v632 + *(_DWORD *)(a2[15] + 4 * v633))), v631 - v634);
            *((_QWORD *)v635 - 1) = -1;
            v630 = v635 - 8;
            --v633;
            ++v632;
            v631 = v634;
          }
          while (v633 != -1);
          ++v625;
        }
        while (v625 != v1639);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6480) + 24))(a1 + 6480, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 7928))
  {
    sub_20F90FE30(a1 + 7920, (unsigned int **)(a3 + 120));
    v637 = a2[15];
    v636 = a2[16];
    v638 = v636 - v637;
    if (v636 != v637)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7920) + 24))(a1 + 7920, *(_DWORD *)(a1 + 7928) + ((unint64_t)v638 >> 2), *(unsigned int *)(a1 + 7932));
      v1640 = *(_DWORD *)(a1 + 7932);
      if (v1640)
      {
        v639 = 0;
        v1540 = (v638 >> 2) - 1;
        v1441 = 1 - (v638 >> 2);
        v640 = -(uint64_t)(v638 >> 2);
        do
        {
          v641 = *(_QWORD *)(a1 + 8008);
          v642 = *(_DWORD *)(a1 + 8032) * v639;
          v643 = v641 + 8 * v642;
          v644 = (char *)(v641 + 8 * (v642 + *(_DWORD *)(a1 + 7928)));
          v645 = &v644[8 * v640];
          v646 = v1441;
          v647 = v1540;
          do
          {
            v648 = (char *)(v643 + 8 * (v646 + *(_DWORD *)(a2[15] + 4 * v647)));
            v649 = &v644[-(v645 - v648)];
            if (v645 != v648)
              memmove(v649, (const void *)(v643 + 8 * (v646 + *(_DWORD *)(a2[15] + 4 * v647))), v645 - v648);
            *((_QWORD *)v649 - 1) = -1;
            v644 = v649 - 8;
            --v647;
            ++v646;
            v645 = v648;
          }
          while (v647 != -1);
          ++v639;
        }
        while (v639 != v1640);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7920) + 24))(a1 + 7920, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 9368))
  {
    sub_20F90FE30(a1 + 9360, (unsigned int **)(a3 + 144));
    v651 = a2[15];
    v650 = a2[16];
    v652 = v650 - v651;
    if (v650 != v651)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9360) + 24))(a1 + 9360, *(_DWORD *)(a1 + 9368) + ((unint64_t)v652 >> 2), *(unsigned int *)(a1 + 9372));
      v1641 = *(_DWORD *)(a1 + 9372);
      if (v1641)
      {
        v653 = 0;
        v1541 = (v652 >> 2) - 1;
        v1442 = 1 - (v652 >> 2);
        v654 = -(uint64_t)(v652 >> 2);
        do
        {
          v655 = *(_QWORD *)(a1 + 9448);
          v656 = *(_DWORD *)(a1 + 9472) * v653;
          v657 = v655 + 8 * v656;
          v658 = (char *)(v655 + 8 * (v656 + *(_DWORD *)(a1 + 9368)));
          v659 = &v658[8 * v654];
          v660 = v1442;
          v661 = v1541;
          do
          {
            v662 = (char *)(v657 + 8 * (v660 + *(_DWORD *)(a2[15] + 4 * v661)));
            v663 = &v658[-(v659 - v662)];
            if (v659 != v662)
              memmove(v663, (const void *)(v657 + 8 * (v660 + *(_DWORD *)(a2[15] + 4 * v661))), v659 - v662);
            *((_QWORD *)v663 - 1) = -1;
            v658 = v663 - 8;
            --v661;
            ++v660;
            v659 = v662;
          }
          while (v661 != -1);
          ++v653;
        }
        while (v653 != v1641);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9360) + 24))(a1 + 9360, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 10808))
  {
    sub_20F90FE30(a1 + 10800, (unsigned int **)(a3 + 168));
    v665 = a2[15];
    v664 = a2[16];
    v666 = v664 - v665;
    if (v664 != v665)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10800) + 24))(a1 + 10800, *(_DWORD *)(a1 + 10808) + ((unint64_t)v666 >> 2), *(unsigned int *)(a1 + 10812));
      v1642 = *(_DWORD *)(a1 + 10812);
      if (v1642)
      {
        v667 = 0;
        v1542 = (v666 >> 2) - 1;
        v1443 = 1 - (v666 >> 2);
        v668 = -(uint64_t)(v666 >> 2);
        do
        {
          v669 = *(_QWORD *)(a1 + 10888);
          v670 = *(_DWORD *)(a1 + 10912) * v667;
          v671 = v669 + 8 * v670;
          v672 = (char *)(v669 + 8 * (v670 + *(_DWORD *)(a1 + 10808)));
          v673 = &v672[8 * v668];
          v674 = v1443;
          v675 = v1542;
          do
          {
            v676 = (char *)(v671 + 8 * (v674 + *(_DWORD *)(a2[15] + 4 * v675)));
            v677 = &v672[-(v673 - v676)];
            if (v673 != v676)
              memmove(v677, (const void *)(v671 + 8 * (v674 + *(_DWORD *)(a2[15] + 4 * v675))), v673 - v676);
            *((_QWORD *)v677 - 1) = -1;
            v672 = v677 - 8;
            --v675;
            ++v674;
            v673 = v676;
          }
          while (v675 != -1);
          ++v667;
        }
        while (v667 != v1642);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10800) + 24))(a1 + 10800, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 12248))
  {
    sub_20F90FE30(a1 + 12240, (unsigned int **)(a3 + 192));
    v679 = a2[15];
    v678 = a2[16];
    v680 = v678 - v679;
    if (v678 != v679)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12240) + 24))(a1 + 12240, *(_DWORD *)(a1 + 12248) + ((unint64_t)v680 >> 2), *(unsigned int *)(a1 + 12252));
      v1643 = *(_DWORD *)(a1 + 12252);
      if (v1643)
      {
        v681 = 0;
        v1543 = (v680 >> 2) - 1;
        v1444 = 1 - (v680 >> 2);
        v682 = -(uint64_t)(v680 >> 2);
        do
        {
          v683 = *(_QWORD *)(a1 + 12328);
          v684 = *(_DWORD *)(a1 + 12352) * v681;
          v685 = v683 + 8 * v684;
          v686 = (char *)(v683 + 8 * (v684 + *(_DWORD *)(a1 + 12248)));
          v687 = &v686[8 * v682];
          v688 = v1444;
          v689 = v1543;
          do
          {
            v690 = (char *)(v685 + 8 * (v688 + *(_DWORD *)(a2[15] + 4 * v689)));
            v691 = &v686[-(v687 - v690)];
            if (v687 != v690)
              memmove(v691, (const void *)(v685 + 8 * (v688 + *(_DWORD *)(a2[15] + 4 * v689))), v687 - v690);
            *((_QWORD *)v691 - 1) = -1;
            v686 = v691 - 8;
            --v689;
            ++v688;
            v687 = v690;
          }
          while (v689 != -1);
          ++v681;
        }
        while (v681 != v1643);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12240) + 24))(a1 + 12240, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 13688))
  {
    sub_20F90FE30(a1 + 13680, (unsigned int **)(a3 + 216));
    v693 = a2[15];
    v692 = a2[16];
    v694 = v692 - v693;
    if (v692 != v693)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13680) + 24))(a1 + 13680, *(_DWORD *)(a1 + 13688) + ((unint64_t)v694 >> 2), *(unsigned int *)(a1 + 13692));
      v1644 = *(_DWORD *)(a1 + 13692);
      if (v1644)
      {
        v695 = 0;
        v1544 = (v694 >> 2) - 1;
        v1445 = 1 - (v694 >> 2);
        v696 = -(uint64_t)(v694 >> 2);
        do
        {
          v697 = *(_QWORD *)(a1 + 13768);
          v698 = *(_DWORD *)(a1 + 13792) * v695;
          v699 = v697 + 8 * v698;
          v700 = (char *)(v697 + 8 * (v698 + *(_DWORD *)(a1 + 13688)));
          v701 = &v700[8 * v696];
          v702 = v1445;
          v703 = v1544;
          do
          {
            v704 = (char *)(v699 + 8 * (v702 + *(_DWORD *)(a2[15] + 4 * v703)));
            v705 = &v700[-(v701 - v704)];
            if (v701 != v704)
              memmove(v705, (const void *)(v699 + 8 * (v702 + *(_DWORD *)(a2[15] + 4 * v703))), v701 - v704);
            *((_QWORD *)v705 - 1) = -1;
            v700 = v705 - 8;
            --v703;
            ++v702;
            v701 = v704;
          }
          while (v703 != -1);
          ++v695;
        }
        while (v695 != v1644);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13680) + 24))(a1 + 13680, (a2[16] - a2[15]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 584))
  {
    sub_20F90FE30(a1 + 576, (unsigned int **)a3);
    v707 = a2[12];
    v706 = a2[13];
    v708 = v706 - v707;
    if (v706 != v707)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 576) + 24))(a1 + 576, *(_DWORD *)(a1 + 584) + ((unint64_t)v708 >> 2), *(unsigned int *)(a1 + 588));
      v1645 = *(_DWORD *)(a1 + 588);
      if (v1645)
      {
        v709 = 0;
        v1545 = (v708 >> 2) - 1;
        v1446 = 1 - (v708 >> 2);
        v710 = -(uint64_t)(v708 >> 2);
        do
        {
          v711 = *(_QWORD *)(a1 + 664);
          v712 = *(_DWORD *)(a1 + 688) * v709;
          v713 = v711 + 8 * v712;
          v714 = (char *)(v711 + 8 * (v712 + *(_DWORD *)(a1 + 584)));
          v715 = &v714[8 * v710];
          v716 = v1446;
          v717 = v1545;
          do
          {
            v718 = (char *)(v713 + 8 * (v716 + *(_DWORD *)(a2[12] + 4 * v717)));
            v719 = &v714[-(v715 - v718)];
            if (v715 != v718)
              memmove(v719, (const void *)(v713 + 8 * (v716 + *(_DWORD *)(a2[12] + 4 * v717))), v715 - v718);
            *((_QWORD *)v719 - 1) = -1;
            v714 = v719 - 8;
            --v717;
            ++v716;
            v715 = v718;
          }
          while (v717 != -1);
          ++v709;
        }
        while (v709 != v1645);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 576) + 24))(a1 + 576, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 2024))
  {
    sub_20F90FE30(a1 + 2016, (unsigned int **)(a3 + 24));
    v721 = a2[12];
    v720 = a2[13];
    v722 = v720 - v721;
    if (v720 != v721)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2016) + 24))(a1 + 2016, *(_DWORD *)(a1 + 2024) + ((unint64_t)v722 >> 2), *(unsigned int *)(a1 + 2028));
      v1646 = *(_DWORD *)(a1 + 2028);
      if (v1646)
      {
        v723 = 0;
        v1546 = (v722 >> 2) - 1;
        v1447 = 1 - (v722 >> 2);
        v724 = -(uint64_t)(v722 >> 2);
        do
        {
          v725 = *(_QWORD *)(a1 + 2104);
          v726 = *(_DWORD *)(a1 + 2128) * v723;
          v727 = v725 + 8 * v726;
          v728 = (char *)(v725 + 8 * (v726 + *(_DWORD *)(a1 + 2024)));
          v729 = &v728[8 * v724];
          v730 = v1447;
          v731 = v1546;
          do
          {
            v732 = (char *)(v727 + 8 * (v730 + *(_DWORD *)(a2[12] + 4 * v731)));
            v733 = &v728[-(v729 - v732)];
            if (v729 != v732)
              memmove(v733, (const void *)(v727 + 8 * (v730 + *(_DWORD *)(a2[12] + 4 * v731))), v729 - v732);
            *((_QWORD *)v733 - 1) = -1;
            v728 = v733 - 8;
            --v731;
            ++v730;
            v729 = v732;
          }
          while (v731 != -1);
          ++v723;
        }
        while (v723 != v1646);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2016) + 24))(a1 + 2016, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3464))
  {
    sub_20F90FE30(a1 + 3456, (unsigned int **)(a3 + 48));
    v735 = a2[12];
    v734 = a2[13];
    v736 = v734 - v735;
    if (v734 != v735)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3456) + 24))(a1 + 3456, *(_DWORD *)(a1 + 3464) + ((unint64_t)v736 >> 2), *(unsigned int *)(a1 + 3468));
      v1647 = *(_DWORD *)(a1 + 3468);
      if (v1647)
      {
        v737 = 0;
        v1547 = (v736 >> 2) - 1;
        v1448 = 1 - (v736 >> 2);
        v738 = -(uint64_t)(v736 >> 2);
        do
        {
          v739 = *(_QWORD *)(a1 + 3544);
          v740 = *(_DWORD *)(a1 + 3568) * v737;
          v741 = v739 + 8 * v740;
          v742 = (char *)(v739 + 8 * (v740 + *(_DWORD *)(a1 + 3464)));
          v743 = &v742[8 * v738];
          v744 = v1448;
          v745 = v1547;
          do
          {
            v746 = (char *)(v741 + 8 * (v744 + *(_DWORD *)(a2[12] + 4 * v745)));
            v747 = &v742[-(v743 - v746)];
            if (v743 != v746)
              memmove(v747, (const void *)(v741 + 8 * (v744 + *(_DWORD *)(a2[12] + 4 * v745))), v743 - v746);
            *((_QWORD *)v747 - 1) = -1;
            v742 = v747 - 8;
            --v745;
            ++v744;
            v743 = v746;
          }
          while (v745 != -1);
          ++v737;
        }
        while (v737 != v1647);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3456) + 24))(a1 + 3456, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4904))
  {
    sub_20F90FE30(a1 + 4896, (unsigned int **)(a3 + 72));
    v749 = a2[12];
    v748 = a2[13];
    v750 = v748 - v749;
    if (v748 != v749)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4896) + 24))(a1 + 4896, *(_DWORD *)(a1 + 4904) + ((unint64_t)v750 >> 2), *(unsigned int *)(a1 + 4908));
      v1648 = *(_DWORD *)(a1 + 4908);
      if (v1648)
      {
        v751 = 0;
        v1548 = (v750 >> 2) - 1;
        v1449 = 1 - (v750 >> 2);
        v752 = -(uint64_t)(v750 >> 2);
        do
        {
          v753 = *(_QWORD *)(a1 + 4984);
          v754 = *(_DWORD *)(a1 + 5008) * v751;
          v755 = v753 + 8 * v754;
          v756 = (char *)(v753 + 8 * (v754 + *(_DWORD *)(a1 + 4904)));
          v757 = &v756[8 * v752];
          v758 = v1449;
          v759 = v1548;
          do
          {
            v760 = (char *)(v755 + 8 * (v758 + *(_DWORD *)(a2[12] + 4 * v759)));
            v761 = &v756[-(v757 - v760)];
            if (v757 != v760)
              memmove(v761, (const void *)(v755 + 8 * (v758 + *(_DWORD *)(a2[12] + 4 * v759))), v757 - v760);
            *((_QWORD *)v761 - 1) = -1;
            v756 = v761 - 8;
            --v759;
            ++v758;
            v757 = v760;
          }
          while (v759 != -1);
          ++v751;
        }
        while (v751 != v1648);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4896) + 24))(a1 + 4896, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6344))
  {
    sub_20F90FE30(a1 + 6336, (unsigned int **)(a3 + 96));
    v763 = a2[12];
    v762 = a2[13];
    v764 = v762 - v763;
    if (v762 != v763)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6336) + 24))(a1 + 6336, *(_DWORD *)(a1 + 6344) + ((unint64_t)v764 >> 2), *(unsigned int *)(a1 + 6348));
      v1649 = *(_DWORD *)(a1 + 6348);
      if (v1649)
      {
        v765 = 0;
        v1549 = (v764 >> 2) - 1;
        v1450 = 1 - (v764 >> 2);
        v766 = -(uint64_t)(v764 >> 2);
        do
        {
          v767 = *(_QWORD *)(a1 + 6424);
          v768 = *(_DWORD *)(a1 + 6448) * v765;
          v769 = v767 + 8 * v768;
          v770 = (char *)(v767 + 8 * (v768 + *(_DWORD *)(a1 + 6344)));
          v771 = &v770[8 * v766];
          v772 = v1450;
          v773 = v1549;
          do
          {
            v774 = (char *)(v769 + 8 * (v772 + *(_DWORD *)(a2[12] + 4 * v773)));
            v775 = &v770[-(v771 - v774)];
            if (v771 != v774)
              memmove(v775, (const void *)(v769 + 8 * (v772 + *(_DWORD *)(a2[12] + 4 * v773))), v771 - v774);
            *((_QWORD *)v775 - 1) = -1;
            v770 = v775 - 8;
            --v773;
            ++v772;
            v771 = v774;
          }
          while (v773 != -1);
          ++v765;
        }
        while (v765 != v1649);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6336) + 24))(a1 + 6336, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 7784))
  {
    sub_20F90FE30(a1 + 7776, (unsigned int **)(a3 + 120));
    v777 = a2[12];
    v776 = a2[13];
    v778 = v776 - v777;
    if (v776 != v777)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7776) + 24))(a1 + 7776, *(_DWORD *)(a1 + 7784) + ((unint64_t)v778 >> 2), *(unsigned int *)(a1 + 7788));
      v1650 = *(_DWORD *)(a1 + 7788);
      if (v1650)
      {
        v779 = 0;
        v1550 = (v778 >> 2) - 1;
        v1451 = 1 - (v778 >> 2);
        v780 = -(uint64_t)(v778 >> 2);
        do
        {
          v781 = *(_QWORD *)(a1 + 7864);
          v782 = *(_DWORD *)(a1 + 7888) * v779;
          v783 = v781 + 8 * v782;
          v784 = (char *)(v781 + 8 * (v782 + *(_DWORD *)(a1 + 7784)));
          v785 = &v784[8 * v780];
          v786 = v1451;
          v787 = v1550;
          do
          {
            v788 = (char *)(v783 + 8 * (v786 + *(_DWORD *)(a2[12] + 4 * v787)));
            v789 = &v784[-(v785 - v788)];
            if (v785 != v788)
              memmove(v789, (const void *)(v783 + 8 * (v786 + *(_DWORD *)(a2[12] + 4 * v787))), v785 - v788);
            *((_QWORD *)v789 - 1) = -1;
            v784 = v789 - 8;
            --v787;
            ++v786;
            v785 = v788;
          }
          while (v787 != -1);
          ++v779;
        }
        while (v779 != v1650);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7776) + 24))(a1 + 7776, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 9224))
  {
    sub_20F90FE30(a1 + 9216, (unsigned int **)(a3 + 144));
    v791 = a2[12];
    v790 = a2[13];
    v792 = v790 - v791;
    if (v790 != v791)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9216) + 24))(a1 + 9216, *(_DWORD *)(a1 + 9224) + ((unint64_t)v792 >> 2), *(unsigned int *)(a1 + 9228));
      v1651 = *(_DWORD *)(a1 + 9228);
      if (v1651)
      {
        v793 = 0;
        v1551 = (v792 >> 2) - 1;
        v1452 = 1 - (v792 >> 2);
        v794 = -(uint64_t)(v792 >> 2);
        do
        {
          v795 = *(_QWORD *)(a1 + 9304);
          v796 = *(_DWORD *)(a1 + 9328) * v793;
          v797 = v795 + 8 * v796;
          v798 = (char *)(v795 + 8 * (v796 + *(_DWORD *)(a1 + 9224)));
          v799 = &v798[8 * v794];
          v800 = v1452;
          v801 = v1551;
          do
          {
            v802 = (char *)(v797 + 8 * (v800 + *(_DWORD *)(a2[12] + 4 * v801)));
            v803 = &v798[-(v799 - v802)];
            if (v799 != v802)
              memmove(v803, (const void *)(v797 + 8 * (v800 + *(_DWORD *)(a2[12] + 4 * v801))), v799 - v802);
            *((_QWORD *)v803 - 1) = -1;
            v798 = v803 - 8;
            --v801;
            ++v800;
            v799 = v802;
          }
          while (v801 != -1);
          ++v793;
        }
        while (v793 != v1651);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9216) + 24))(a1 + 9216, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 10664))
  {
    sub_20F90FE30(a1 + 10656, (unsigned int **)(a3 + 168));
    v805 = a2[12];
    v804 = a2[13];
    v806 = v804 - v805;
    if (v804 != v805)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10656) + 24))(a1 + 10656, *(_DWORD *)(a1 + 10664) + ((unint64_t)v806 >> 2), *(unsigned int *)(a1 + 10668));
      v1652 = *(_DWORD *)(a1 + 10668);
      if (v1652)
      {
        v807 = 0;
        v1552 = (v806 >> 2) - 1;
        v1453 = 1 - (v806 >> 2);
        v808 = -(uint64_t)(v806 >> 2);
        do
        {
          v809 = *(_QWORD *)(a1 + 10744);
          v810 = *(_DWORD *)(a1 + 10768) * v807;
          v811 = v809 + 8 * v810;
          v812 = (char *)(v809 + 8 * (v810 + *(_DWORD *)(a1 + 10664)));
          v813 = &v812[8 * v808];
          v814 = v1453;
          v815 = v1552;
          do
          {
            v816 = (char *)(v811 + 8 * (v814 + *(_DWORD *)(a2[12] + 4 * v815)));
            v817 = &v812[-(v813 - v816)];
            if (v813 != v816)
              memmove(v817, (const void *)(v811 + 8 * (v814 + *(_DWORD *)(a2[12] + 4 * v815))), v813 - v816);
            *((_QWORD *)v817 - 1) = -1;
            v812 = v817 - 8;
            --v815;
            ++v814;
            v813 = v816;
          }
          while (v815 != -1);
          ++v807;
        }
        while (v807 != v1652);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10656) + 24))(a1 + 10656, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 12104))
  {
    sub_20F90FE30(a1 + 12096, (unsigned int **)(a3 + 192));
    v819 = a2[12];
    v818 = a2[13];
    v820 = v818 - v819;
    if (v818 != v819)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12096) + 24))(a1 + 12096, *(_DWORD *)(a1 + 12104) + ((unint64_t)v820 >> 2), *(unsigned int *)(a1 + 12108));
      v1653 = *(_DWORD *)(a1 + 12108);
      if (v1653)
      {
        v821 = 0;
        v1553 = (v820 >> 2) - 1;
        v1454 = 1 - (v820 >> 2);
        v822 = -(uint64_t)(v820 >> 2);
        do
        {
          v823 = *(_QWORD *)(a1 + 12184);
          v824 = *(_DWORD *)(a1 + 12208) * v821;
          v825 = v823 + 8 * v824;
          v826 = (char *)(v823 + 8 * (v824 + *(_DWORD *)(a1 + 12104)));
          v827 = &v826[8 * v822];
          v828 = v1454;
          v829 = v1553;
          do
          {
            v830 = (char *)(v825 + 8 * (v828 + *(_DWORD *)(a2[12] + 4 * v829)));
            v831 = &v826[-(v827 - v830)];
            if (v827 != v830)
              memmove(v831, (const void *)(v825 + 8 * (v828 + *(_DWORD *)(a2[12] + 4 * v829))), v827 - v830);
            *((_QWORD *)v831 - 1) = -1;
            v826 = v831 - 8;
            --v829;
            ++v828;
            v827 = v830;
          }
          while (v829 != -1);
          ++v821;
        }
        while (v821 != v1653);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12096) + 24))(a1 + 12096, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 13544))
  {
    sub_20F90FE30(a1 + 13536, (unsigned int **)(a3 + 216));
    v833 = a2[12];
    v832 = a2[13];
    v834 = v832 - v833;
    if (v832 != v833)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13536) + 24))(a1 + 13536, *(_DWORD *)(a1 + 13544) + ((unint64_t)v834 >> 2), *(unsigned int *)(a1 + 13548));
      v1654 = *(_DWORD *)(a1 + 13548);
      if (v1654)
      {
        v835 = 0;
        v1554 = (v834 >> 2) - 1;
        v1455 = 1 - (v834 >> 2);
        v836 = -(uint64_t)(v834 >> 2);
        do
        {
          v837 = *(_QWORD *)(a1 + 13624);
          v838 = *(_DWORD *)(a1 + 13648) * v835;
          v839 = v837 + 8 * v838;
          v840 = (char *)(v837 + 8 * (v838 + *(_DWORD *)(a1 + 13544)));
          v841 = &v840[8 * v836];
          v842 = v1455;
          v843 = v1554;
          do
          {
            v844 = (char *)(v839 + 8 * (v842 + *(_DWORD *)(a2[12] + 4 * v843)));
            v845 = &v840[-(v841 - v844)];
            if (v841 != v844)
              memmove(v845, (const void *)(v839 + 8 * (v842 + *(_DWORD *)(a2[12] + 4 * v843))), v841 - v844);
            *((_QWORD *)v845 - 1) = -1;
            v840 = v845 - 8;
            --v843;
            ++v842;
            v841 = v844;
          }
          while (v843 != -1);
          ++v835;
        }
        while (v835 != v1654);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13536) + 24))(a1 + 13536, (a2[13] - a2[12]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 440))
  {
    sub_20F90FE30(a1 + 432, (unsigned int **)a3);
    v847 = a2[9];
    v846 = a2[10];
    v848 = v846 - v847;
    if (v846 != v847)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 432) + 24))(a1 + 432, *(_DWORD *)(a1 + 440) + ((unint64_t)v848 >> 2), *(unsigned int *)(a1 + 444));
      v1655 = *(_DWORD *)(a1 + 444);
      if (v1655)
      {
        v849 = 0;
        v1555 = (v848 >> 2) - 1;
        v1456 = 1 - (v848 >> 2);
        v850 = -(uint64_t)(v848 >> 2);
        do
        {
          v851 = *(_QWORD *)(a1 + 520);
          v852 = *(_DWORD *)(a1 + 544) * v849;
          v853 = v851 + 8 * v852;
          v854 = (char *)(v851 + 8 * (v852 + *(_DWORD *)(a1 + 440)));
          v855 = &v854[8 * v850];
          v856 = v1456;
          v857 = v1555;
          do
          {
            v858 = (char *)(v853 + 8 * (v856 + *(_DWORD *)(a2[9] + 4 * v857)));
            v859 = &v854[-(v855 - v858)];
            if (v855 != v858)
              memmove(v859, (const void *)(v853 + 8 * (v856 + *(_DWORD *)(a2[9] + 4 * v857))), v855 - v858);
            *((_QWORD *)v859 - 1) = -1;
            v854 = v859 - 8;
            --v857;
            ++v856;
            v855 = v858;
          }
          while (v857 != -1);
          ++v849;
        }
        while (v849 != v1655);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 432) + 24))(a1 + 432, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1880))
  {
    sub_20F90FE30(a1 + 1872, (unsigned int **)(a3 + 24));
    v861 = a2[9];
    v860 = a2[10];
    v862 = v860 - v861;
    if (v860 != v861)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1872) + 24))(a1 + 1872, *(_DWORD *)(a1 + 1880) + ((unint64_t)v862 >> 2), *(unsigned int *)(a1 + 1884));
      v1656 = *(_DWORD *)(a1 + 1884);
      if (v1656)
      {
        v863 = 0;
        v1556 = (v862 >> 2) - 1;
        v1457 = 1 - (v862 >> 2);
        v864 = -(uint64_t)(v862 >> 2);
        do
        {
          v865 = *(_QWORD *)(a1 + 1960);
          v866 = *(_DWORD *)(a1 + 1984) * v863;
          v867 = v865 + 8 * v866;
          v868 = (char *)(v865 + 8 * (v866 + *(_DWORD *)(a1 + 1880)));
          v869 = &v868[8 * v864];
          v870 = v1457;
          v871 = v1556;
          do
          {
            v872 = (char *)(v867 + 8 * (v870 + *(_DWORD *)(a2[9] + 4 * v871)));
            v873 = &v868[-(v869 - v872)];
            if (v869 != v872)
              memmove(v873, (const void *)(v867 + 8 * (v870 + *(_DWORD *)(a2[9] + 4 * v871))), v869 - v872);
            *((_QWORD *)v873 - 1) = -1;
            v868 = v873 - 8;
            --v871;
            ++v870;
            v869 = v872;
          }
          while (v871 != -1);
          ++v863;
        }
        while (v863 != v1656);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1872) + 24))(a1 + 1872, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3320))
  {
    sub_20F90FE30(a1 + 3312, (unsigned int **)(a3 + 48));
    v875 = a2[9];
    v874 = a2[10];
    v876 = v874 - v875;
    if (v874 != v875)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3312) + 24))(a1 + 3312, *(_DWORD *)(a1 + 3320) + ((unint64_t)v876 >> 2), *(unsigned int *)(a1 + 3324));
      v1657 = *(_DWORD *)(a1 + 3324);
      if (v1657)
      {
        v877 = 0;
        v1557 = (v876 >> 2) - 1;
        v1458 = 1 - (v876 >> 2);
        v878 = -(uint64_t)(v876 >> 2);
        do
        {
          v879 = *(_QWORD *)(a1 + 3400);
          v880 = *(_DWORD *)(a1 + 3424) * v877;
          v881 = v879 + 8 * v880;
          v882 = (char *)(v879 + 8 * (v880 + *(_DWORD *)(a1 + 3320)));
          v883 = &v882[8 * v878];
          v884 = v1458;
          v885 = v1557;
          do
          {
            v886 = (char *)(v881 + 8 * (v884 + *(_DWORD *)(a2[9] + 4 * v885)));
            v887 = &v882[-(v883 - v886)];
            if (v883 != v886)
              memmove(v887, (const void *)(v881 + 8 * (v884 + *(_DWORD *)(a2[9] + 4 * v885))), v883 - v886);
            *((_QWORD *)v887 - 1) = -1;
            v882 = v887 - 8;
            --v885;
            ++v884;
            v883 = v886;
          }
          while (v885 != -1);
          ++v877;
        }
        while (v877 != v1657);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3312) + 24))(a1 + 3312, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4760))
  {
    sub_20F90FE30(a1 + 4752, (unsigned int **)(a3 + 72));
    v889 = a2[9];
    v888 = a2[10];
    v890 = v888 - v889;
    if (v888 != v889)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4752) + 24))(a1 + 4752, *(_DWORD *)(a1 + 4760) + ((unint64_t)v890 >> 2), *(unsigned int *)(a1 + 4764));
      v1658 = *(_DWORD *)(a1 + 4764);
      if (v1658)
      {
        v891 = 0;
        v1558 = (v890 >> 2) - 1;
        v1459 = 1 - (v890 >> 2);
        v892 = -(uint64_t)(v890 >> 2);
        do
        {
          v893 = *(_QWORD *)(a1 + 4840);
          v894 = *(_DWORD *)(a1 + 4864) * v891;
          v895 = v893 + 8 * v894;
          v896 = (char *)(v893 + 8 * (v894 + *(_DWORD *)(a1 + 4760)));
          v897 = &v896[8 * v892];
          v898 = v1459;
          v899 = v1558;
          do
          {
            v900 = (char *)(v895 + 8 * (v898 + *(_DWORD *)(a2[9] + 4 * v899)));
            v901 = &v896[-(v897 - v900)];
            if (v897 != v900)
              memmove(v901, (const void *)(v895 + 8 * (v898 + *(_DWORD *)(a2[9] + 4 * v899))), v897 - v900);
            *((_QWORD *)v901 - 1) = -1;
            v896 = v901 - 8;
            --v899;
            ++v898;
            v897 = v900;
          }
          while (v899 != -1);
          ++v891;
        }
        while (v891 != v1658);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4752) + 24))(a1 + 4752, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6200))
  {
    sub_20F90FE30(a1 + 6192, (unsigned int **)(a3 + 96));
    v903 = a2[9];
    v902 = a2[10];
    v904 = v902 - v903;
    if (v902 != v903)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6192) + 24))(a1 + 6192, *(_DWORD *)(a1 + 6200) + ((unint64_t)v904 >> 2), *(unsigned int *)(a1 + 6204));
      v1659 = *(_DWORD *)(a1 + 6204);
      if (v1659)
      {
        v905 = 0;
        v1559 = (v904 >> 2) - 1;
        v1460 = 1 - (v904 >> 2);
        v906 = -(uint64_t)(v904 >> 2);
        do
        {
          v907 = *(_QWORD *)(a1 + 6280);
          v908 = *(_DWORD *)(a1 + 6304) * v905;
          v909 = v907 + 8 * v908;
          v910 = (char *)(v907 + 8 * (v908 + *(_DWORD *)(a1 + 6200)));
          v911 = &v910[8 * v906];
          v912 = v1460;
          v913 = v1559;
          do
          {
            v914 = (char *)(v909 + 8 * (v912 + *(_DWORD *)(a2[9] + 4 * v913)));
            v915 = &v910[-(v911 - v914)];
            if (v911 != v914)
              memmove(v915, (const void *)(v909 + 8 * (v912 + *(_DWORD *)(a2[9] + 4 * v913))), v911 - v914);
            *((_QWORD *)v915 - 1) = -1;
            v910 = v915 - 8;
            --v913;
            ++v912;
            v911 = v914;
          }
          while (v913 != -1);
          ++v905;
        }
        while (v905 != v1659);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6192) + 24))(a1 + 6192, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 7640))
  {
    sub_20F90FE30(a1 + 7632, (unsigned int **)(a3 + 120));
    v917 = a2[9];
    v916 = a2[10];
    v918 = v916 - v917;
    if (v916 != v917)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7632) + 24))(a1 + 7632, *(_DWORD *)(a1 + 7640) + ((unint64_t)v918 >> 2), *(unsigned int *)(a1 + 7644));
      v1660 = *(_DWORD *)(a1 + 7644);
      if (v1660)
      {
        v919 = 0;
        v1560 = (v918 >> 2) - 1;
        v1461 = 1 - (v918 >> 2);
        v920 = -(uint64_t)(v918 >> 2);
        do
        {
          v921 = *(_QWORD *)(a1 + 7720);
          v922 = *(_DWORD *)(a1 + 7744) * v919;
          v923 = v921 + 8 * v922;
          v924 = (char *)(v921 + 8 * (v922 + *(_DWORD *)(a1 + 7640)));
          v925 = &v924[8 * v920];
          v926 = v1461;
          v927 = v1560;
          do
          {
            v928 = (char *)(v923 + 8 * (v926 + *(_DWORD *)(a2[9] + 4 * v927)));
            v929 = &v924[-(v925 - v928)];
            if (v925 != v928)
              memmove(v929, (const void *)(v923 + 8 * (v926 + *(_DWORD *)(a2[9] + 4 * v927))), v925 - v928);
            *((_QWORD *)v929 - 1) = -1;
            v924 = v929 - 8;
            --v927;
            ++v926;
            v925 = v928;
          }
          while (v927 != -1);
          ++v919;
        }
        while (v919 != v1660);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7632) + 24))(a1 + 7632, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 9080))
  {
    sub_20F90FE30(a1 + 9072, (unsigned int **)(a3 + 144));
    v931 = a2[9];
    v930 = a2[10];
    v932 = v930 - v931;
    if (v930 != v931)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9072) + 24))(a1 + 9072, *(_DWORD *)(a1 + 9080) + ((unint64_t)v932 >> 2), *(unsigned int *)(a1 + 9084));
      v1661 = *(_DWORD *)(a1 + 9084);
      if (v1661)
      {
        v933 = 0;
        v1561 = (v932 >> 2) - 1;
        v1462 = 1 - (v932 >> 2);
        v934 = -(uint64_t)(v932 >> 2);
        do
        {
          v935 = *(_QWORD *)(a1 + 9160);
          v936 = *(_DWORD *)(a1 + 9184) * v933;
          v937 = v935 + 8 * v936;
          v938 = (char *)(v935 + 8 * (v936 + *(_DWORD *)(a1 + 9080)));
          v939 = &v938[8 * v934];
          v940 = v1462;
          v941 = v1561;
          do
          {
            v942 = (char *)(v937 + 8 * (v940 + *(_DWORD *)(a2[9] + 4 * v941)));
            v943 = &v938[-(v939 - v942)];
            if (v939 != v942)
              memmove(v943, (const void *)(v937 + 8 * (v940 + *(_DWORD *)(a2[9] + 4 * v941))), v939 - v942);
            *((_QWORD *)v943 - 1) = -1;
            v938 = v943 - 8;
            --v941;
            ++v940;
            v939 = v942;
          }
          while (v941 != -1);
          ++v933;
        }
        while (v933 != v1661);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 9072) + 24))(a1 + 9072, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 10520))
  {
    sub_20F90FE30(a1 + 10512, (unsigned int **)(a3 + 168));
    v945 = a2[9];
    v944 = a2[10];
    v946 = v944 - v945;
    if (v944 != v945)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10512) + 24))(a1 + 10512, *(_DWORD *)(a1 + 10520) + ((unint64_t)v946 >> 2), *(unsigned int *)(a1 + 10524));
      v1662 = *(_DWORD *)(a1 + 10524);
      if (v1662)
      {
        v947 = 0;
        v1562 = (v946 >> 2) - 1;
        v1463 = 1 - (v946 >> 2);
        v948 = -(uint64_t)(v946 >> 2);
        do
        {
          v949 = *(_QWORD *)(a1 + 10600);
          v950 = *(_DWORD *)(a1 + 10624) * v947;
          v951 = v949 + 8 * v950;
          v952 = (char *)(v949 + 8 * (v950 + *(_DWORD *)(a1 + 10520)));
          v953 = &v952[8 * v948];
          v954 = v1463;
          v955 = v1562;
          do
          {
            v956 = (char *)(v951 + 8 * (v954 + *(_DWORD *)(a2[9] + 4 * v955)));
            v957 = &v952[-(v953 - v956)];
            if (v953 != v956)
              memmove(v957, (const void *)(v951 + 8 * (v954 + *(_DWORD *)(a2[9] + 4 * v955))), v953 - v956);
            *((_QWORD *)v957 - 1) = -1;
            v952 = v957 - 8;
            --v955;
            ++v954;
            v953 = v956;
          }
          while (v955 != -1);
          ++v947;
        }
        while (v947 != v1662);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10512) + 24))(a1 + 10512, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 11960))
  {
    sub_20F90FE30(a1 + 11952, (unsigned int **)(a3 + 192));
    v959 = a2[9];
    v958 = a2[10];
    v960 = v958 - v959;
    if (v958 != v959)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11952) + 24))(a1 + 11952, *(_DWORD *)(a1 + 11960) + ((unint64_t)v960 >> 2), *(unsigned int *)(a1 + 11964));
      v1663 = *(_DWORD *)(a1 + 11964);
      if (v1663)
      {
        v961 = 0;
        v1563 = (v960 >> 2) - 1;
        v1464 = 1 - (v960 >> 2);
        v962 = -(uint64_t)(v960 >> 2);
        do
        {
          v963 = *(_QWORD *)(a1 + 12040);
          v964 = *(_DWORD *)(a1 + 12064) * v961;
          v965 = v963 + 8 * v964;
          v966 = (char *)(v963 + 8 * (v964 + *(_DWORD *)(a1 + 11960)));
          v967 = &v966[8 * v962];
          v968 = v1464;
          v969 = v1563;
          do
          {
            v970 = (char *)(v965 + 8 * (v968 + *(_DWORD *)(a2[9] + 4 * v969)));
            v971 = &v966[-(v967 - v970)];
            if (v967 != v970)
              memmove(v971, (const void *)(v965 + 8 * (v968 + *(_DWORD *)(a2[9] + 4 * v969))), v967 - v970);
            *((_QWORD *)v971 - 1) = -1;
            v966 = v971 - 8;
            --v969;
            ++v968;
            v967 = v970;
          }
          while (v969 != -1);
          ++v961;
        }
        while (v961 != v1663);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11952) + 24))(a1 + 11952, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 13400))
  {
    sub_20F90FE30(a1 + 13392, (unsigned int **)(a3 + 216));
    v973 = a2[9];
    v972 = a2[10];
    v974 = v972 - v973;
    if (v972 != v973)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13392) + 24))(a1 + 13392, *(_DWORD *)(a1 + 13400) + ((unint64_t)v974 >> 2), *(unsigned int *)(a1 + 13404));
      v1664 = *(_DWORD *)(a1 + 13404);
      if (v1664)
      {
        v975 = 0;
        v1564 = (v974 >> 2) - 1;
        v1465 = 1 - (v974 >> 2);
        v976 = -(uint64_t)(v974 >> 2);
        do
        {
          v977 = *(_QWORD *)(a1 + 13480);
          v978 = *(_DWORD *)(a1 + 13504) * v975;
          v979 = v977 + 8 * v978;
          v980 = (char *)(v977 + 8 * (v978 + *(_DWORD *)(a1 + 13400)));
          v981 = &v980[8 * v976];
          v982 = v1465;
          v983 = v1564;
          do
          {
            v984 = (char *)(v979 + 8 * (v982 + *(_DWORD *)(a2[9] + 4 * v983)));
            v985 = &v980[-(v981 - v984)];
            if (v981 != v984)
              memmove(v985, (const void *)(v979 + 8 * (v982 + *(_DWORD *)(a2[9] + 4 * v983))), v981 - v984);
            *((_QWORD *)v985 - 1) = -1;
            v980 = v985 - 8;
            --v983;
            ++v982;
            v981 = v984;
          }
          while (v983 != -1);
          ++v975;
        }
        while (v975 != v1664);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13392) + 24))(a1 + 13392, (a2[10] - a2[9]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 296))
  {
    sub_20F90FE30(a1 + 288, (unsigned int **)a3);
    v987 = a2[6];
    v986 = a2[7];
    v988 = v986 - v987;
    if (v986 != v987)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 288) + 24))(a1 + 288, *(_DWORD *)(a1 + 296) + ((unint64_t)v988 >> 2), *(unsigned int *)(a1 + 300));
      v1665 = *(_DWORD *)(a1 + 300);
      if (v1665)
      {
        v989 = 0;
        v1565 = (v988 >> 2) - 1;
        v1466 = 1 - (v988 >> 2);
        v990 = -(uint64_t)(v988 >> 2);
        do
        {
          v991 = *(_QWORD *)(a1 + 376);
          v992 = *(_DWORD *)(a1 + 400) * v989;
          v993 = v991 + 8 * v992;
          v994 = (char *)(v991 + 8 * (v992 + *(_DWORD *)(a1 + 296)));
          v995 = &v994[8 * v990];
          v996 = v1466;
          v997 = v1565;
          do
          {
            v998 = (char *)(v993 + 8 * (v996 + *(_DWORD *)(a2[6] + 4 * v997)));
            v999 = &v994[-(v995 - v998)];
            if (v995 != v998)
              memmove(v999, (const void *)(v993 + 8 * (v996 + *(_DWORD *)(a2[6] + 4 * v997))), v995 - v998);
            *((_QWORD *)v999 - 1) = -1;
            v994 = v999 - 8;
            --v997;
            ++v996;
            v995 = v998;
          }
          while (v997 != -1);
          ++v989;
        }
        while (v989 != v1665);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 288) + 24))(a1 + 288, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1736))
  {
    sub_20F90FE30(a1 + 1728, (unsigned int **)(a3 + 24));
    v1001 = a2[6];
    v1000 = a2[7];
    v1002 = v1000 - v1001;
    if (v1000 != v1001)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1728) + 24))(a1 + 1728, *(_DWORD *)(a1 + 1736) + ((unint64_t)v1002 >> 2), *(unsigned int *)(a1 + 1740));
      v1666 = *(_DWORD *)(a1 + 1740);
      if (v1666)
      {
        v1003 = 0;
        v1566 = (v1002 >> 2) - 1;
        v1467 = 1 - (v1002 >> 2);
        v1004 = -(uint64_t)(v1002 >> 2);
        do
        {
          v1005 = *(_QWORD *)(a1 + 1816);
          v1006 = *(_DWORD *)(a1 + 1840) * v1003;
          v1007 = v1005 + 8 * v1006;
          v1008 = (char *)(v1005 + 8 * (v1006 + *(_DWORD *)(a1 + 1736)));
          v1009 = &v1008[8 * v1004];
          v1010 = v1467;
          v1011 = v1566;
          do
          {
            v1012 = (char *)(v1007 + 8 * (v1010 + *(_DWORD *)(a2[6] + 4 * v1011)));
            v1013 = &v1008[-(v1009 - v1012)];
            if (v1009 != v1012)
              memmove(v1013, (const void *)(v1007 + 8 * (v1010 + *(_DWORD *)(a2[6] + 4 * v1011))), v1009 - v1012);
            *((_QWORD *)v1013 - 1) = -1;
            v1008 = v1013 - 8;
            --v1011;
            ++v1010;
            v1009 = v1012;
          }
          while (v1011 != -1);
          ++v1003;
        }
        while (v1003 != v1666);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1728) + 24))(a1 + 1728, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3176))
  {
    sub_20F90FE30(a1 + 3168, (unsigned int **)(a3 + 48));
    v1015 = a2[6];
    v1014 = a2[7];
    v1016 = v1014 - v1015;
    if (v1014 != v1015)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3168) + 24))(a1 + 3168, *(_DWORD *)(a1 + 3176) + ((unint64_t)v1016 >> 2), *(unsigned int *)(a1 + 3180));
      v1667 = *(_DWORD *)(a1 + 3180);
      if (v1667)
      {
        v1017 = 0;
        v1567 = (v1016 >> 2) - 1;
        v1468 = 1 - (v1016 >> 2);
        v1018 = -(uint64_t)(v1016 >> 2);
        do
        {
          v1019 = *(_QWORD *)(a1 + 3256);
          v1020 = *(_DWORD *)(a1 + 3280) * v1017;
          v1021 = v1019 + 8 * v1020;
          v1022 = (char *)(v1019 + 8 * (v1020 + *(_DWORD *)(a1 + 3176)));
          v1023 = &v1022[8 * v1018];
          v1024 = v1468;
          v1025 = v1567;
          do
          {
            v1026 = (char *)(v1021 + 8 * (v1024 + *(_DWORD *)(a2[6] + 4 * v1025)));
            v1027 = &v1022[-(v1023 - v1026)];
            if (v1023 != v1026)
              memmove(v1027, (const void *)(v1021 + 8 * (v1024 + *(_DWORD *)(a2[6] + 4 * v1025))), v1023 - v1026);
            *((_QWORD *)v1027 - 1) = -1;
            v1022 = v1027 - 8;
            --v1025;
            ++v1024;
            v1023 = v1026;
          }
          while (v1025 != -1);
          ++v1017;
        }
        while (v1017 != v1667);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3168) + 24))(a1 + 3168, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4616))
  {
    sub_20F90FE30(a1 + 4608, (unsigned int **)(a3 + 72));
    v1029 = a2[6];
    v1028 = a2[7];
    v1030 = v1028 - v1029;
    if (v1028 != v1029)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4608) + 24))(a1 + 4608, *(_DWORD *)(a1 + 4616) + ((unint64_t)v1030 >> 2), *(unsigned int *)(a1 + 4620));
      v1668 = *(_DWORD *)(a1 + 4620);
      if (v1668)
      {
        v1031 = 0;
        v1568 = (v1030 >> 2) - 1;
        v1469 = 1 - (v1030 >> 2);
        v1032 = -(uint64_t)(v1030 >> 2);
        do
        {
          v1033 = *(_QWORD *)(a1 + 4696);
          v1034 = *(_DWORD *)(a1 + 4720) * v1031;
          v1035 = v1033 + 8 * v1034;
          v1036 = (char *)(v1033 + 8 * (v1034 + *(_DWORD *)(a1 + 4616)));
          v1037 = &v1036[8 * v1032];
          v1038 = v1469;
          v1039 = v1568;
          do
          {
            v1040 = (char *)(v1035 + 8 * (v1038 + *(_DWORD *)(a2[6] + 4 * v1039)));
            v1041 = &v1036[-(v1037 - v1040)];
            if (v1037 != v1040)
              memmove(v1041, (const void *)(v1035 + 8 * (v1038 + *(_DWORD *)(a2[6] + 4 * v1039))), v1037 - v1040);
            *((_QWORD *)v1041 - 1) = -1;
            v1036 = v1041 - 8;
            --v1039;
            ++v1038;
            v1037 = v1040;
          }
          while (v1039 != -1);
          ++v1031;
        }
        while (v1031 != v1668);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4608) + 24))(a1 + 4608, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6056))
  {
    sub_20F90FE30(a1 + 6048, (unsigned int **)(a3 + 96));
    v1043 = a2[6];
    v1042 = a2[7];
    v1044 = v1042 - v1043;
    if (v1042 != v1043)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6048) + 24))(a1 + 6048, *(_DWORD *)(a1 + 6056) + ((unint64_t)v1044 >> 2), *(unsigned int *)(a1 + 6060));
      v1669 = *(_DWORD *)(a1 + 6060);
      if (v1669)
      {
        v1045 = 0;
        v1569 = (v1044 >> 2) - 1;
        v1470 = 1 - (v1044 >> 2);
        v1046 = -(uint64_t)(v1044 >> 2);
        do
        {
          v1047 = *(_QWORD *)(a1 + 6136);
          v1048 = *(_DWORD *)(a1 + 6160) * v1045;
          v1049 = v1047 + 8 * v1048;
          v1050 = (char *)(v1047 + 8 * (v1048 + *(_DWORD *)(a1 + 6056)));
          v1051 = &v1050[8 * v1046];
          v1052 = v1470;
          v1053 = v1569;
          do
          {
            v1054 = (char *)(v1049 + 8 * (v1052 + *(_DWORD *)(a2[6] + 4 * v1053)));
            v1055 = &v1050[-(v1051 - v1054)];
            if (v1051 != v1054)
              memmove(v1055, (const void *)(v1049 + 8 * (v1052 + *(_DWORD *)(a2[6] + 4 * v1053))), v1051 - v1054);
            *((_QWORD *)v1055 - 1) = -1;
            v1050 = v1055 - 8;
            --v1053;
            ++v1052;
            v1051 = v1054;
          }
          while (v1053 != -1);
          ++v1045;
        }
        while (v1045 != v1669);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6048) + 24))(a1 + 6048, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 7496))
  {
    sub_20F90FE30(a1 + 7488, (unsigned int **)(a3 + 120));
    v1057 = a2[6];
    v1056 = a2[7];
    v1058 = v1056 - v1057;
    if (v1056 != v1057)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7488) + 24))(a1 + 7488, *(_DWORD *)(a1 + 7496) + ((unint64_t)v1058 >> 2), *(unsigned int *)(a1 + 7500));
      v1670 = *(_DWORD *)(a1 + 7500);
      if (v1670)
      {
        v1059 = 0;
        v1570 = (v1058 >> 2) - 1;
        v1471 = 1 - (v1058 >> 2);
        v1060 = -(uint64_t)(v1058 >> 2);
        do
        {
          v1061 = *(_QWORD *)(a1 + 7576);
          v1062 = *(_DWORD *)(a1 + 7600) * v1059;
          v1063 = v1061 + 8 * v1062;
          v1064 = (char *)(v1061 + 8 * (v1062 + *(_DWORD *)(a1 + 7496)));
          v1065 = &v1064[8 * v1060];
          v1066 = v1471;
          v1067 = v1570;
          do
          {
            v1068 = (char *)(v1063 + 8 * (v1066 + *(_DWORD *)(a2[6] + 4 * v1067)));
            v1069 = &v1064[-(v1065 - v1068)];
            if (v1065 != v1068)
              memmove(v1069, (const void *)(v1063 + 8 * (v1066 + *(_DWORD *)(a2[6] + 4 * v1067))), v1065 - v1068);
            *((_QWORD *)v1069 - 1) = -1;
            v1064 = v1069 - 8;
            --v1067;
            ++v1066;
            v1065 = v1068;
          }
          while (v1067 != -1);
          ++v1059;
        }
        while (v1059 != v1670);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7488) + 24))(a1 + 7488, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8936))
  {
    sub_20F90FE30(a1 + 8928, (unsigned int **)(a3 + 144));
    v1071 = a2[6];
    v1070 = a2[7];
    v1072 = v1070 - v1071;
    if (v1070 != v1071)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8928) + 24))(a1 + 8928, *(_DWORD *)(a1 + 8936) + ((unint64_t)v1072 >> 2), *(unsigned int *)(a1 + 8940));
      v1671 = *(_DWORD *)(a1 + 8940);
      if (v1671)
      {
        v1073 = 0;
        v1571 = (v1072 >> 2) - 1;
        v1472 = 1 - (v1072 >> 2);
        v1074 = -(uint64_t)(v1072 >> 2);
        do
        {
          v1075 = *(_QWORD *)(a1 + 9016);
          v1076 = *(_DWORD *)(a1 + 9040) * v1073;
          v1077 = v1075 + 8 * v1076;
          v1078 = (char *)(v1075 + 8 * (v1076 + *(_DWORD *)(a1 + 8936)));
          v1079 = &v1078[8 * v1074];
          v1080 = v1472;
          v1081 = v1571;
          do
          {
            v1082 = (char *)(v1077 + 8 * (v1080 + *(_DWORD *)(a2[6] + 4 * v1081)));
            v1083 = &v1078[-(v1079 - v1082)];
            if (v1079 != v1082)
              memmove(v1083, (const void *)(v1077 + 8 * (v1080 + *(_DWORD *)(a2[6] + 4 * v1081))), v1079 - v1082);
            *((_QWORD *)v1083 - 1) = -1;
            v1078 = v1083 - 8;
            --v1081;
            ++v1080;
            v1079 = v1082;
          }
          while (v1081 != -1);
          ++v1073;
        }
        while (v1073 != v1671);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8928) + 24))(a1 + 8928, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 10376))
  {
    sub_20F90FE30(a1 + 10368, (unsigned int **)(a3 + 168));
    v1085 = a2[6];
    v1084 = a2[7];
    v1086 = v1084 - v1085;
    if (v1084 != v1085)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10368) + 24))(a1 + 10368, *(_DWORD *)(a1 + 10376) + ((unint64_t)v1086 >> 2), *(unsigned int *)(a1 + 10380));
      v1672 = *(_DWORD *)(a1 + 10380);
      if (v1672)
      {
        v1087 = 0;
        v1572 = (v1086 >> 2) - 1;
        v1473 = 1 - (v1086 >> 2);
        v1088 = -(uint64_t)(v1086 >> 2);
        do
        {
          v1089 = *(_QWORD *)(a1 + 10456);
          v1090 = *(_DWORD *)(a1 + 10480) * v1087;
          v1091 = v1089 + 8 * v1090;
          v1092 = (char *)(v1089 + 8 * (v1090 + *(_DWORD *)(a1 + 10376)));
          v1093 = &v1092[8 * v1088];
          v1094 = v1473;
          v1095 = v1572;
          do
          {
            v1096 = (char *)(v1091 + 8 * (v1094 + *(_DWORD *)(a2[6] + 4 * v1095)));
            v1097 = &v1092[-(v1093 - v1096)];
            if (v1093 != v1096)
              memmove(v1097, (const void *)(v1091 + 8 * (v1094 + *(_DWORD *)(a2[6] + 4 * v1095))), v1093 - v1096);
            *((_QWORD *)v1097 - 1) = -1;
            v1092 = v1097 - 8;
            --v1095;
            ++v1094;
            v1093 = v1096;
          }
          while (v1095 != -1);
          ++v1087;
        }
        while (v1087 != v1672);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10368) + 24))(a1 + 10368, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 11816))
  {
    sub_20F90FE30(a1 + 11808, (unsigned int **)(a3 + 192));
    v1099 = a2[6];
    v1098 = a2[7];
    v1100 = v1098 - v1099;
    if (v1098 != v1099)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11808) + 24))(a1 + 11808, *(_DWORD *)(a1 + 11816) + ((unint64_t)v1100 >> 2), *(unsigned int *)(a1 + 11820));
      v1673 = *(_DWORD *)(a1 + 11820);
      if (v1673)
      {
        v1101 = 0;
        v1573 = (v1100 >> 2) - 1;
        v1474 = 1 - (v1100 >> 2);
        v1102 = -(uint64_t)(v1100 >> 2);
        do
        {
          v1103 = *(_QWORD *)(a1 + 11896);
          v1104 = *(_DWORD *)(a1 + 11920) * v1101;
          v1105 = v1103 + 8 * v1104;
          v1106 = (char *)(v1103 + 8 * (v1104 + *(_DWORD *)(a1 + 11816)));
          v1107 = &v1106[8 * v1102];
          v1108 = v1474;
          v1109 = v1573;
          do
          {
            v1110 = (char *)(v1105 + 8 * (v1108 + *(_DWORD *)(a2[6] + 4 * v1109)));
            v1111 = &v1106[-(v1107 - v1110)];
            if (v1107 != v1110)
              memmove(v1111, (const void *)(v1105 + 8 * (v1108 + *(_DWORD *)(a2[6] + 4 * v1109))), v1107 - v1110);
            *((_QWORD *)v1111 - 1) = -1;
            v1106 = v1111 - 8;
            --v1109;
            ++v1108;
            v1107 = v1110;
          }
          while (v1109 != -1);
          ++v1101;
        }
        while (v1101 != v1673);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11808) + 24))(a1 + 11808, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 13256))
  {
    sub_20F90FE30(a1 + 13248, (unsigned int **)(a3 + 216));
    v1113 = a2[6];
    v1112 = a2[7];
    v1114 = v1112 - v1113;
    if (v1112 != v1113)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13248) + 24))(a1 + 13248, *(_DWORD *)(a1 + 13256) + ((unint64_t)v1114 >> 2), *(unsigned int *)(a1 + 13260));
      v1674 = *(_DWORD *)(a1 + 13260);
      if (v1674)
      {
        v1115 = 0;
        v1574 = (v1114 >> 2) - 1;
        v1475 = 1 - (v1114 >> 2);
        v1116 = -(uint64_t)(v1114 >> 2);
        do
        {
          v1117 = *(_QWORD *)(a1 + 13336);
          v1118 = *(_DWORD *)(a1 + 13360) * v1115;
          v1119 = v1117 + 8 * v1118;
          v1120 = (char *)(v1117 + 8 * (v1118 + *(_DWORD *)(a1 + 13256)));
          v1121 = &v1120[8 * v1116];
          v1122 = v1475;
          v1123 = v1574;
          do
          {
            v1124 = (char *)(v1119 + 8 * (v1122 + *(_DWORD *)(a2[6] + 4 * v1123)));
            v1125 = &v1120[-(v1121 - v1124)];
            if (v1121 != v1124)
              memmove(v1125, (const void *)(v1119 + 8 * (v1122 + *(_DWORD *)(a2[6] + 4 * v1123))), v1121 - v1124);
            *((_QWORD *)v1125 - 1) = -1;
            v1120 = v1125 - 8;
            --v1123;
            ++v1122;
            v1121 = v1124;
          }
          while (v1123 != -1);
          ++v1115;
        }
        while (v1115 != v1674);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13248) + 24))(a1 + 13248, (a2[7] - a2[6]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 152))
  {
    sub_20F90FE30(a1 + 144, (unsigned int **)a3);
    v1127 = a2[3];
    v1126 = a2[4];
    v1128 = v1126 - v1127;
    if (v1126 != v1127)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 144) + 24))(a1 + 144, *(_DWORD *)(a1 + 152) + ((unint64_t)v1128 >> 2), *(unsigned int *)(a1 + 156));
      v1675 = *(_DWORD *)(a1 + 156);
      if (v1675)
      {
        v1129 = 0;
        v1575 = (v1128 >> 2) - 1;
        v1476 = 1 - (v1128 >> 2);
        v1130 = -(uint64_t)(v1128 >> 2);
        do
        {
          v1131 = *(_QWORD *)(a1 + 232);
          v1132 = *(_DWORD *)(a1 + 256) * v1129;
          v1133 = v1131 + 8 * v1132;
          v1134 = (char *)(v1131 + 8 * (v1132 + *(_DWORD *)(a1 + 152)));
          v1135 = &v1134[8 * v1130];
          v1136 = v1476;
          v1137 = v1575;
          do
          {
            v1138 = (char *)(v1133 + 8 * (v1136 + *(_DWORD *)(a2[3] + 4 * v1137)));
            v1139 = &v1134[-(v1135 - v1138)];
            if (v1135 != v1138)
              memmove(v1139, (const void *)(v1133 + 8 * (v1136 + *(_DWORD *)(a2[3] + 4 * v1137))), v1135 - v1138);
            *((_QWORD *)v1139 - 1) = -1;
            v1134 = v1139 - 8;
            --v1137;
            ++v1136;
            v1135 = v1138;
          }
          while (v1137 != -1);
          ++v1129;
        }
        while (v1129 != v1675);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 144) + 24))(a1 + 144, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1592))
  {
    sub_20F90FE30(a1 + 1584, (unsigned int **)(a3 + 24));
    v1141 = a2[3];
    v1140 = a2[4];
    v1142 = v1140 - v1141;
    if (v1140 != v1141)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1584) + 24))(a1 + 1584, *(_DWORD *)(a1 + 1592) + ((unint64_t)v1142 >> 2), *(unsigned int *)(a1 + 1596));
      v1676 = *(_DWORD *)(a1 + 1596);
      if (v1676)
      {
        v1143 = 0;
        v1576 = (v1142 >> 2) - 1;
        v1477 = 1 - (v1142 >> 2);
        v1144 = -(uint64_t)(v1142 >> 2);
        do
        {
          v1145 = *(_QWORD *)(a1 + 1672);
          v1146 = *(_DWORD *)(a1 + 1696) * v1143;
          v1147 = v1145 + 8 * v1146;
          v1148 = (char *)(v1145 + 8 * (v1146 + *(_DWORD *)(a1 + 1592)));
          v1149 = &v1148[8 * v1144];
          v1150 = v1477;
          v1151 = v1576;
          do
          {
            v1152 = (char *)(v1147 + 8 * (v1150 + *(_DWORD *)(a2[3] + 4 * v1151)));
            v1153 = &v1148[-(v1149 - v1152)];
            if (v1149 != v1152)
              memmove(v1153, (const void *)(v1147 + 8 * (v1150 + *(_DWORD *)(a2[3] + 4 * v1151))), v1149 - v1152);
            *((_QWORD *)v1153 - 1) = -1;
            v1148 = v1153 - 8;
            --v1151;
            ++v1150;
            v1149 = v1152;
          }
          while (v1151 != -1);
          ++v1143;
        }
        while (v1143 != v1676);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1584) + 24))(a1 + 1584, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3032))
  {
    sub_20F90FE30(a1 + 3024, (unsigned int **)(a3 + 48));
    v1155 = a2[3];
    v1154 = a2[4];
    v1156 = v1154 - v1155;
    if (v1154 != v1155)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3024) + 24))(a1 + 3024, *(_DWORD *)(a1 + 3032) + ((unint64_t)v1156 >> 2), *(unsigned int *)(a1 + 3036));
      v1677 = *(_DWORD *)(a1 + 3036);
      if (v1677)
      {
        v1157 = 0;
        v1577 = (v1156 >> 2) - 1;
        v1478 = 1 - (v1156 >> 2);
        v1158 = -(uint64_t)(v1156 >> 2);
        do
        {
          v1159 = *(_QWORD *)(a1 + 3112);
          v1160 = *(_DWORD *)(a1 + 3136) * v1157;
          v1161 = v1159 + 8 * v1160;
          v1162 = (char *)(v1159 + 8 * (v1160 + *(_DWORD *)(a1 + 3032)));
          v1163 = &v1162[8 * v1158];
          v1164 = v1478;
          v1165 = v1577;
          do
          {
            v1166 = (char *)(v1161 + 8 * (v1164 + *(_DWORD *)(a2[3] + 4 * v1165)));
            v1167 = &v1162[-(v1163 - v1166)];
            if (v1163 != v1166)
              memmove(v1167, (const void *)(v1161 + 8 * (v1164 + *(_DWORD *)(a2[3] + 4 * v1165))), v1163 - v1166);
            *((_QWORD *)v1167 - 1) = -1;
            v1162 = v1167 - 8;
            --v1165;
            ++v1164;
            v1163 = v1166;
          }
          while (v1165 != -1);
          ++v1157;
        }
        while (v1157 != v1677);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3024) + 24))(a1 + 3024, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4472))
  {
    sub_20F90FE30(a1 + 4464, (unsigned int **)(a3 + 72));
    v1169 = a2[3];
    v1168 = a2[4];
    v1170 = v1168 - v1169;
    if (v1168 != v1169)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4464) + 24))(a1 + 4464, *(_DWORD *)(a1 + 4472) + ((unint64_t)v1170 >> 2), *(unsigned int *)(a1 + 4476));
      v1678 = *(_DWORD *)(a1 + 4476);
      if (v1678)
      {
        v1171 = 0;
        v1578 = (v1170 >> 2) - 1;
        v1479 = 1 - (v1170 >> 2);
        v1172 = -(uint64_t)(v1170 >> 2);
        do
        {
          v1173 = *(_QWORD *)(a1 + 4552);
          v1174 = *(_DWORD *)(a1 + 4576) * v1171;
          v1175 = v1173 + 8 * v1174;
          v1176 = (char *)(v1173 + 8 * (v1174 + *(_DWORD *)(a1 + 4472)));
          v1177 = &v1176[8 * v1172];
          v1178 = v1479;
          v1179 = v1578;
          do
          {
            v1180 = (char *)(v1175 + 8 * (v1178 + *(_DWORD *)(a2[3] + 4 * v1179)));
            v1181 = &v1176[-(v1177 - v1180)];
            if (v1177 != v1180)
              memmove(v1181, (const void *)(v1175 + 8 * (v1178 + *(_DWORD *)(a2[3] + 4 * v1179))), v1177 - v1180);
            *((_QWORD *)v1181 - 1) = -1;
            v1176 = v1181 - 8;
            --v1179;
            ++v1178;
            v1177 = v1180;
          }
          while (v1179 != -1);
          ++v1171;
        }
        while (v1171 != v1678);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4464) + 24))(a1 + 4464, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5912))
  {
    sub_20F90FE30(a1 + 5904, (unsigned int **)(a3 + 96));
    v1183 = a2[3];
    v1182 = a2[4];
    v1184 = v1182 - v1183;
    if (v1182 != v1183)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5904) + 24))(a1 + 5904, *(_DWORD *)(a1 + 5912) + ((unint64_t)v1184 >> 2), *(unsigned int *)(a1 + 5916));
      v1679 = *(_DWORD *)(a1 + 5916);
      if (v1679)
      {
        v1185 = 0;
        v1579 = (v1184 >> 2) - 1;
        v1480 = 1 - (v1184 >> 2);
        v1186 = -(uint64_t)(v1184 >> 2);
        do
        {
          v1187 = *(_QWORD *)(a1 + 5992);
          v1188 = *(_DWORD *)(a1 + 6016) * v1185;
          v1189 = v1187 + 8 * v1188;
          v1190 = (char *)(v1187 + 8 * (v1188 + *(_DWORD *)(a1 + 5912)));
          v1191 = &v1190[8 * v1186];
          v1192 = v1480;
          v1193 = v1579;
          do
          {
            v1194 = (char *)(v1189 + 8 * (v1192 + *(_DWORD *)(a2[3] + 4 * v1193)));
            v1195 = &v1190[-(v1191 - v1194)];
            if (v1191 != v1194)
              memmove(v1195, (const void *)(v1189 + 8 * (v1192 + *(_DWORD *)(a2[3] + 4 * v1193))), v1191 - v1194);
            *((_QWORD *)v1195 - 1) = -1;
            v1190 = v1195 - 8;
            --v1193;
            ++v1192;
            v1191 = v1194;
          }
          while (v1193 != -1);
          ++v1185;
        }
        while (v1185 != v1679);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5904) + 24))(a1 + 5904, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 7352))
  {
    sub_20F90FE30(a1 + 7344, (unsigned int **)(a3 + 120));
    v1197 = a2[3];
    v1196 = a2[4];
    v1198 = v1196 - v1197;
    if (v1196 != v1197)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7344) + 24))(a1 + 7344, *(_DWORD *)(a1 + 7352) + ((unint64_t)v1198 >> 2), *(unsigned int *)(a1 + 7356));
      v1680 = *(_DWORD *)(a1 + 7356);
      if (v1680)
      {
        v1199 = 0;
        v1580 = (v1198 >> 2) - 1;
        v1481 = 1 - (v1198 >> 2);
        v1200 = -(uint64_t)(v1198 >> 2);
        do
        {
          v1201 = *(_QWORD *)(a1 + 7432);
          v1202 = *(_DWORD *)(a1 + 7456) * v1199;
          v1203 = v1201 + 8 * v1202;
          v1204 = (char *)(v1201 + 8 * (v1202 + *(_DWORD *)(a1 + 7352)));
          v1205 = &v1204[8 * v1200];
          v1206 = v1481;
          v1207 = v1580;
          do
          {
            v1208 = (char *)(v1203 + 8 * (v1206 + *(_DWORD *)(a2[3] + 4 * v1207)));
            v1209 = &v1204[-(v1205 - v1208)];
            if (v1205 != v1208)
              memmove(v1209, (const void *)(v1203 + 8 * (v1206 + *(_DWORD *)(a2[3] + 4 * v1207))), v1205 - v1208);
            *((_QWORD *)v1209 - 1) = -1;
            v1204 = v1209 - 8;
            --v1207;
            ++v1206;
            v1205 = v1208;
          }
          while (v1207 != -1);
          ++v1199;
        }
        while (v1199 != v1680);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7344) + 24))(a1 + 7344, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8792))
  {
    sub_20F90FE30(a1 + 8784, (unsigned int **)(a3 + 144));
    v1211 = a2[3];
    v1210 = a2[4];
    v1212 = v1210 - v1211;
    if (v1210 != v1211)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8784) + 24))(a1 + 8784, *(_DWORD *)(a1 + 8792) + ((unint64_t)v1212 >> 2), *(unsigned int *)(a1 + 8796));
      v1681 = *(_DWORD *)(a1 + 8796);
      if (v1681)
      {
        v1213 = 0;
        v1581 = (v1212 >> 2) - 1;
        v1482 = 1 - (v1212 >> 2);
        v1214 = -(uint64_t)(v1212 >> 2);
        do
        {
          v1215 = *(_QWORD *)(a1 + 8872);
          v1216 = *(_DWORD *)(a1 + 8896) * v1213;
          v1217 = v1215 + 8 * v1216;
          v1218 = (char *)(v1215 + 8 * (v1216 + *(_DWORD *)(a1 + 8792)));
          v1219 = &v1218[8 * v1214];
          v1220 = v1482;
          v1221 = v1581;
          do
          {
            v1222 = (char *)(v1217 + 8 * (v1220 + *(_DWORD *)(a2[3] + 4 * v1221)));
            v1223 = &v1218[-(v1219 - v1222)];
            if (v1219 != v1222)
              memmove(v1223, (const void *)(v1217 + 8 * (v1220 + *(_DWORD *)(a2[3] + 4 * v1221))), v1219 - v1222);
            *((_QWORD *)v1223 - 1) = -1;
            v1218 = v1223 - 8;
            --v1221;
            ++v1220;
            v1219 = v1222;
          }
          while (v1221 != -1);
          ++v1213;
        }
        while (v1213 != v1681);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8784) + 24))(a1 + 8784, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 10232))
  {
    sub_20F90FE30(a1 + 10224, (unsigned int **)(a3 + 168));
    v1225 = a2[3];
    v1224 = a2[4];
    v1226 = v1224 - v1225;
    if (v1224 != v1225)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10224) + 24))(a1 + 10224, *(_DWORD *)(a1 + 10232) + ((unint64_t)v1226 >> 2), *(unsigned int *)(a1 + 10236));
      v1682 = *(_DWORD *)(a1 + 10236);
      if (v1682)
      {
        v1227 = 0;
        v1582 = (v1226 >> 2) - 1;
        v1483 = 1 - (v1226 >> 2);
        v1228 = -(uint64_t)(v1226 >> 2);
        do
        {
          v1229 = *(_QWORD *)(a1 + 10312);
          v1230 = *(_DWORD *)(a1 + 10336) * v1227;
          v1231 = v1229 + 8 * v1230;
          v1232 = (char *)(v1229 + 8 * (v1230 + *(_DWORD *)(a1 + 10232)));
          v1233 = &v1232[8 * v1228];
          v1234 = v1483;
          v1235 = v1582;
          do
          {
            v1236 = (char *)(v1231 + 8 * (v1234 + *(_DWORD *)(a2[3] + 4 * v1235)));
            v1237 = &v1232[-(v1233 - v1236)];
            if (v1233 != v1236)
              memmove(v1237, (const void *)(v1231 + 8 * (v1234 + *(_DWORD *)(a2[3] + 4 * v1235))), v1233 - v1236);
            *((_QWORD *)v1237 - 1) = -1;
            v1232 = v1237 - 8;
            --v1235;
            ++v1234;
            v1233 = v1236;
          }
          while (v1235 != -1);
          ++v1227;
        }
        while (v1227 != v1682);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10224) + 24))(a1 + 10224, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 11672))
  {
    sub_20F90FE30(a1 + 11664, (unsigned int **)(a3 + 192));
    v1239 = a2[3];
    v1238 = a2[4];
    v1240 = v1238 - v1239;
    if (v1238 != v1239)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11664) + 24))(a1 + 11664, *(_DWORD *)(a1 + 11672) + ((unint64_t)v1240 >> 2), *(unsigned int *)(a1 + 11676));
      v1683 = *(_DWORD *)(a1 + 11676);
      if (v1683)
      {
        v1241 = 0;
        v1583 = (v1240 >> 2) - 1;
        v1484 = 1 - (v1240 >> 2);
        v1242 = -(uint64_t)(v1240 >> 2);
        do
        {
          v1243 = *(_QWORD *)(a1 + 11752);
          v1244 = *(_DWORD *)(a1 + 11776) * v1241;
          v1245 = v1243 + 8 * v1244;
          v1246 = (char *)(v1243 + 8 * (v1244 + *(_DWORD *)(a1 + 11672)));
          v1247 = &v1246[8 * v1242];
          v1248 = v1484;
          v1249 = v1583;
          do
          {
            v1250 = (char *)(v1245 + 8 * (v1248 + *(_DWORD *)(a2[3] + 4 * v1249)));
            v1251 = &v1246[-(v1247 - v1250)];
            if (v1247 != v1250)
              memmove(v1251, (const void *)(v1245 + 8 * (v1248 + *(_DWORD *)(a2[3] + 4 * v1249))), v1247 - v1250);
            *((_QWORD *)v1251 - 1) = -1;
            v1246 = v1251 - 8;
            --v1249;
            ++v1248;
            v1247 = v1250;
          }
          while (v1249 != -1);
          ++v1241;
        }
        while (v1241 != v1683);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11664) + 24))(a1 + 11664, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 13112))
  {
    sub_20F90FE30(a1 + 13104, (unsigned int **)(a3 + 216));
    v1253 = a2[3];
    v1252 = a2[4];
    v1254 = v1252 - v1253;
    if (v1252 != v1253)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13104) + 24))(a1 + 13104, *(_DWORD *)(a1 + 13112) + ((unint64_t)v1254 >> 2), *(unsigned int *)(a1 + 13116));
      v1684 = *(_DWORD *)(a1 + 13116);
      if (v1684)
      {
        v1255 = 0;
        v1584 = (v1254 >> 2) - 1;
        v1485 = 1 - (v1254 >> 2);
        v1256 = -(uint64_t)(v1254 >> 2);
        do
        {
          v1257 = *(_QWORD *)(a1 + 13192);
          v1258 = *(_DWORD *)(a1 + 13216) * v1255;
          v1259 = v1257 + 8 * v1258;
          v1260 = (char *)(v1257 + 8 * (v1258 + *(_DWORD *)(a1 + 13112)));
          v1261 = &v1260[8 * v1256];
          v1262 = v1485;
          v1263 = v1584;
          do
          {
            v1264 = (char *)(v1259 + 8 * (v1262 + *(_DWORD *)(a2[3] + 4 * v1263)));
            v1265 = &v1260[-(v1261 - v1264)];
            if (v1261 != v1264)
              memmove(v1265, (const void *)(v1259 + 8 * (v1262 + *(_DWORD *)(a2[3] + 4 * v1263))), v1261 - v1264);
            *((_QWORD *)v1265 - 1) = -1;
            v1260 = v1265 - 8;
            --v1263;
            ++v1262;
            v1261 = v1264;
          }
          while (v1263 != -1);
          ++v1255;
        }
        while (v1255 != v1684);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 13104) + 24))(a1 + 13104, (a2[4] - a2[3]) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    sub_20F90FE30(a1, (unsigned int **)a3);
    v1266 = a2[1];
    v1267 = v1266 - *a2;
    if (v1266 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_DWORD *)(a1 + 8) + ((unint64_t)v1267 >> 2), *(unsigned int *)(a1 + 12));
      v1685 = *(_DWORD *)(a1 + 12);
      if (v1685)
      {
        v1268 = 0;
        v1585 = (v1267 >> 2) - 1;
        v1486 = 1 - (v1267 >> 2);
        v1269 = -(uint64_t)(v1267 >> 2);
        do
        {
          v1270 = *(_QWORD *)(a1 + 88);
          v1271 = *(_DWORD *)(a1 + 112) * v1268;
          v1272 = v1270 + 8 * v1271;
          v1273 = (char *)(v1270 + 8 * (v1271 + *(_DWORD *)(a1 + 8)));
          v1274 = &v1273[8 * v1269];
          v1275 = v1486;
          v1276 = v1585;
          do
          {
            v1277 = (char *)(v1272 + 8 * (v1275 + *(_DWORD *)(*a2 + 4 * v1276)));
            v1278 = &v1273[-(v1274 - v1277)];
            if (v1274 != v1277)
              memmove(v1278, (const void *)(v1272 + 8 * (v1275 + *(_DWORD *)(*a2 + 4 * v1276))), v1274 - v1277);
            *((_QWORD *)v1278 - 1) = -1;
            v1273 = v1278 - 8;
            --v1276;
            ++v1275;
            v1274 = v1277;
          }
          while (v1276 != -1);
          ++v1268;
        }
        while (v1268 != v1685);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1448))
  {
    sub_20F90FE30(a1 + 1440, (unsigned int **)(a3 + 24));
    v1279 = a2[1];
    v1280 = v1279 - *a2;
    if (v1279 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1440) + 24))(a1 + 1440, *(_DWORD *)(a1 + 1448) + ((unint64_t)v1280 >> 2), *(unsigned int *)(a1 + 1452));
      v1686 = *(_DWORD *)(a1 + 1452);
      if (v1686)
      {
        v1281 = 0;
        v1586 = (v1280 >> 2) - 1;
        v1487 = 1 - (v1280 >> 2);
        v1282 = -(uint64_t)(v1280 >> 2);
        do
        {
          v1283 = *(_QWORD *)(a1 + 1528);
          v1284 = *(_DWORD *)(a1 + 1552) * v1281;
          v1285 = v1283 + 8 * v1284;
          v1286 = (char *)(v1283 + 8 * (v1284 + *(_DWORD *)(a1 + 1448)));
          v1287 = &v1286[8 * v1282];
          v1288 = v1487;
          v1289 = v1586;
          do
          {
            v1290 = (char *)(v1285 + 8 * (v1288 + *(_DWORD *)(*a2 + 4 * v1289)));
            v1291 = &v1286[-(v1287 - v1290)];
            if (v1287 != v1290)
              memmove(v1291, (const void *)(v1285 + 8 * (v1288 + *(_DWORD *)(*a2 + 4 * v1289))), v1287 - v1290);
            *((_QWORD *)v1291 - 1) = -1;
            v1286 = v1291 - 8;
            --v1289;
            ++v1288;
            v1287 = v1290;
          }
          while (v1289 != -1);
          ++v1281;
        }
        while (v1281 != v1686);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1440) + 24))(a1 + 1440, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2888))
  {
    sub_20F90FE30(a1 + 2880, (unsigned int **)(a3 + 48));
    v1292 = a2[1];
    v1293 = v1292 - *a2;
    if (v1292 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2880) + 24))(a1 + 2880, *(_DWORD *)(a1 + 2888) + ((unint64_t)v1293 >> 2), *(unsigned int *)(a1 + 2892));
      v1687 = *(_DWORD *)(a1 + 2892);
      if (v1687)
      {
        v1294 = 0;
        v1587 = (v1293 >> 2) - 1;
        v1488 = 1 - (v1293 >> 2);
        v1295 = -(uint64_t)(v1293 >> 2);
        do
        {
          v1296 = *(_QWORD *)(a1 + 2968);
          v1297 = *(_DWORD *)(a1 + 2992) * v1294;
          v1298 = v1296 + 8 * v1297;
          v1299 = (char *)(v1296 + 8 * (v1297 + *(_DWORD *)(a1 + 2888)));
          v1300 = &v1299[8 * v1295];
          v1301 = v1488;
          v1302 = v1587;
          do
          {
            v1303 = (char *)(v1298 + 8 * (v1301 + *(_DWORD *)(*a2 + 4 * v1302)));
            v1304 = &v1299[-(v1300 - v1303)];
            if (v1300 != v1303)
              memmove(v1304, (const void *)(v1298 + 8 * (v1301 + *(_DWORD *)(*a2 + 4 * v1302))), v1300 - v1303);
            *((_QWORD *)v1304 - 1) = -1;
            v1299 = v1304 - 8;
            --v1302;
            ++v1301;
            v1300 = v1303;
          }
          while (v1302 != -1);
          ++v1294;
        }
        while (v1294 != v1687);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2880) + 24))(a1 + 2880, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4328))
  {
    sub_20F90FE30(a1 + 4320, (unsigned int **)(a3 + 72));
    v1305 = a2[1];
    v1306 = v1305 - *a2;
    if (v1305 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4320) + 24))(a1 + 4320, *(_DWORD *)(a1 + 4328) + ((unint64_t)v1306 >> 2), *(unsigned int *)(a1 + 4332));
      v1688 = *(_DWORD *)(a1 + 4332);
      if (v1688)
      {
        v1307 = 0;
        v1588 = (v1306 >> 2) - 1;
        v1489 = 1 - (v1306 >> 2);
        v1308 = -(uint64_t)(v1306 >> 2);
        do
        {
          v1309 = *(_QWORD *)(a1 + 4408);
          v1310 = *(_DWORD *)(a1 + 4432) * v1307;
          v1311 = v1309 + 8 * v1310;
          v1312 = (char *)(v1309 + 8 * (v1310 + *(_DWORD *)(a1 + 4328)));
          v1313 = &v1312[8 * v1308];
          v1314 = v1489;
          v1315 = v1588;
          do
          {
            v1316 = (char *)(v1311 + 8 * (v1314 + *(_DWORD *)(*a2 + 4 * v1315)));
            v1317 = &v1312[-(v1313 - v1316)];
            if (v1313 != v1316)
              memmove(v1317, (const void *)(v1311 + 8 * (v1314 + *(_DWORD *)(*a2 + 4 * v1315))), v1313 - v1316);
            *((_QWORD *)v1317 - 1) = -1;
            v1312 = v1317 - 8;
            --v1315;
            ++v1314;
            v1313 = v1316;
          }
          while (v1315 != -1);
          ++v1307;
        }
        while (v1307 != v1688);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4320) + 24))(a1 + 4320, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5768))
  {
    sub_20F90FE30(a1 + 5760, (unsigned int **)(a3 + 96));
    v1318 = a2[1];
    v1319 = v1318 - *a2;
    if (v1318 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5760) + 24))(a1 + 5760, *(_DWORD *)(a1 + 5768) + ((unint64_t)v1319 >> 2), *(unsigned int *)(a1 + 5772));
      v1689 = *(_DWORD *)(a1 + 5772);
      if (v1689)
      {
        v1320 = 0;
        v1589 = (v1319 >> 2) - 1;
        v1490 = 1 - (v1319 >> 2);
        v1321 = -(uint64_t)(v1319 >> 2);
        do
        {
          v1322 = *(_QWORD *)(a1 + 5848);
          v1323 = *(_DWORD *)(a1 + 5872) * v1320;
          v1324 = v1322 + 8 * v1323;
          v1325 = (char *)(v1322 + 8 * (v1323 + *(_DWORD *)(a1 + 5768)));
          v1326 = &v1325[8 * v1321];
          v1327 = v1490;
          v1328 = v1589;
          do
          {
            v1329 = (char *)(v1324 + 8 * (v1327 + *(_DWORD *)(*a2 + 4 * v1328)));
            v1330 = &v1325[-(v1326 - v1329)];
            if (v1326 != v1329)
              memmove(v1330, (const void *)(v1324 + 8 * (v1327 + *(_DWORD *)(*a2 + 4 * v1328))), v1326 - v1329);
            *((_QWORD *)v1330 - 1) = -1;
            v1325 = v1330 - 8;
            --v1328;
            ++v1327;
            v1326 = v1329;
          }
          while (v1328 != -1);
          ++v1320;
        }
        while (v1320 != v1689);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5760) + 24))(a1 + 5760, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 7208))
  {
    sub_20F90FE30(a1 + 7200, (unsigned int **)(a3 + 120));
    v1331 = a2[1];
    v1332 = v1331 - *a2;
    if (v1331 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7200) + 24))(a1 + 7200, *(_DWORD *)(a1 + 7208) + ((unint64_t)v1332 >> 2), *(unsigned int *)(a1 + 7212));
      v1690 = *(_DWORD *)(a1 + 7212);
      if (v1690)
      {
        v1333 = 0;
        v1590 = (v1332 >> 2) - 1;
        v1491 = 1 - (v1332 >> 2);
        v1334 = -(uint64_t)(v1332 >> 2);
        do
        {
          v1335 = *(_QWORD *)(a1 + 7288);
          v1336 = *(_DWORD *)(a1 + 7312) * v1333;
          v1337 = v1335 + 8 * v1336;
          v1338 = (char *)(v1335 + 8 * (v1336 + *(_DWORD *)(a1 + 7208)));
          v1339 = &v1338[8 * v1334];
          v1340 = v1491;
          v1341 = v1590;
          do
          {
            v1342 = (char *)(v1337 + 8 * (v1340 + *(_DWORD *)(*a2 + 4 * v1341)));
            v1343 = &v1338[-(v1339 - v1342)];
            if (v1339 != v1342)
              memmove(v1343, (const void *)(v1337 + 8 * (v1340 + *(_DWORD *)(*a2 + 4 * v1341))), v1339 - v1342);
            *((_QWORD *)v1343 - 1) = -1;
            v1338 = v1343 - 8;
            --v1341;
            ++v1340;
            v1339 = v1342;
          }
          while (v1341 != -1);
          ++v1333;
        }
        while (v1333 != v1690);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 7200) + 24))(a1 + 7200, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8648))
  {
    sub_20F90FE30(a1 + 8640, (unsigned int **)(a3 + 144));
    v1344 = a2[1];
    v1345 = v1344 - *a2;
    if (v1344 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8640) + 24))(a1 + 8640, *(_DWORD *)(a1 + 8648) + ((unint64_t)v1345 >> 2), *(unsigned int *)(a1 + 8652));
      v1691 = *(_DWORD *)(a1 + 8652);
      if (v1691)
      {
        v1346 = 0;
        v1591 = (v1345 >> 2) - 1;
        v1492 = 1 - (v1345 >> 2);
        v1347 = -(uint64_t)(v1345 >> 2);
        do
        {
          v1348 = *(_QWORD *)(a1 + 8728);
          v1349 = *(_DWORD *)(a1 + 8752) * v1346;
          v1350 = v1348 + 8 * v1349;
          v1351 = (char *)(v1348 + 8 * (v1349 + *(_DWORD *)(a1 + 8648)));
          v1352 = &v1351[8 * v1347];
          v1353 = v1492;
          v1354 = v1591;
          do
          {
            v1355 = (char *)(v1350 + 8 * (v1353 + *(_DWORD *)(*a2 + 4 * v1354)));
            v1356 = &v1351[-(v1352 - v1355)];
            if (v1352 != v1355)
              memmove(v1356, (const void *)(v1350 + 8 * (v1353 + *(_DWORD *)(*a2 + 4 * v1354))), v1352 - v1355);
            *((_QWORD *)v1356 - 1) = -1;
            v1351 = v1356 - 8;
            --v1354;
            ++v1353;
            v1352 = v1355;
          }
          while (v1354 != -1);
          ++v1346;
        }
        while (v1346 != v1691);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8640) + 24))(a1 + 8640, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 10088))
  {
    sub_20F90FE30(a1 + 10080, (unsigned int **)(a3 + 168));
    v1357 = a2[1];
    v1358 = v1357 - *a2;
    if (v1357 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10080) + 24))(a1 + 10080, *(_DWORD *)(a1 + 10088) + ((unint64_t)v1358 >> 2), *(unsigned int *)(a1 + 10092));
      v1692 = *(_DWORD *)(a1 + 10092);
      if (v1692)
      {
        v1359 = 0;
        v1592 = (v1358 >> 2) - 1;
        v1493 = 1 - (v1358 >> 2);
        v1360 = -(uint64_t)(v1358 >> 2);
        do
        {
          v1361 = *(_QWORD *)(a1 + 10168);
          v1362 = *(_DWORD *)(a1 + 10192) * v1359;
          v1363 = v1361 + 8 * v1362;
          v1364 = (char *)(v1361 + 8 * (v1362 + *(_DWORD *)(a1 + 10088)));
          v1365 = &v1364[8 * v1360];
          v1366 = v1493;
          v1367 = v1592;
          do
          {
            v1368 = (char *)(v1363 + 8 * (v1366 + *(_DWORD *)(*a2 + 4 * v1367)));
            v1369 = &v1364[-(v1365 - v1368)];
            if (v1365 != v1368)
              memmove(v1369, (const void *)(v1363 + 8 * (v1366 + *(_DWORD *)(*a2 + 4 * v1367))), v1365 - v1368);
            *((_QWORD *)v1369 - 1) = -1;
            v1364 = v1369 - 8;
            --v1367;
            ++v1366;
            v1365 = v1368;
          }
          while (v1367 != -1);
          ++v1359;
        }
        while (v1359 != v1692);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 10080) + 24))(a1 + 10080, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  }
  if (*(_QWORD *)(a1 + 11528))
  {
    sub_20F90FE30(a1 + 11520, (unsigned int **)(a3 + 192));
    v1370 = a2[1];
    v1371 = v1370 - *a2;
    if (v1370 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11520) + 24))(a1 + 11520, *(_DWORD *)(a1 + 11528) + ((unint64_t)v1371 >> 2), *(unsigned int *)(a1 + 11532));
      v1693 = *(_DWORD *)(a1 + 11532);
      if (v1693)
      {
        v1372 = 0;
        v1593 = (v1371 >> 2) - 1;
        v1494 = 1 - (v1371 >> 2);
        v1373 = -(uint64_t)(v1371 >> 2);
        do
        {
          v1374 = *(_QWORD *)(a1 + 11608);
          v1375 = *(_DWORD *)(a1 + 11632) * v1372;
          v1376 = v1374 + 8 * v1375;
          v1377 = (char *)(v1374 + 8 * (v1375 + *(_DWORD *)(a1 + 11528)));
          v1378 = &v1377[8 * v1373];
          v1379 = v1494;
          v1380 = v1593;
          do
          {
            v1381 = (char *)(v1376 + 8 * (v1379 + *(_DWORD *)(*a2 + 4 * v1380)));
            v1382 = &v1377[-(v1378 - v1381)];
            if (v1378 != v1381)
              memmove(v1382, (const void *)(v1376 + 8 * (v1379 + *(_DWORD *)(*a2 + 4 * v1380))), v1378 - v1381);
            *((_QWORD *)v1382 - 1) = -1;
            v1377 = v1382 - 8;
            --v1380;
            ++v1379;
            v1378 = v1381;
          }
          while (v1380 != -1);
          ++v1372;
        }
        while (v1372 != v1693);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 11520) + 24))(a1 + 11520, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  }
  if (*(_QWORD *)(a1 + 12968))
  {
    sub_20F90FE30(a1 + 12960, (unsigned int **)(a3 + 216));
    v1383 = a2[1];
    v1384 = v1383 - *a2;
    if (v1383 != *a2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12960) + 24))(a1 + 12960, *(_DWORD *)(a1 + 12968) + ((unint64_t)v1384 >> 2), *(unsigned int *)(a1 + 12972));
      v1696 = *(_DWORD *)(a1 + 12972);
      if (v1696)
      {
        v1385 = 0;
        v1694 = (v1384 >> 2) - 1;
        v1594 = 1 - (v1384 >> 2);
        v1386 = -(uint64_t)(v1384 >> 2);
        do
        {
          v1387 = *(_QWORD *)(a1 + 13048);
          v1388 = *(_DWORD *)(a1 + 13072) * v1385;
          v1389 = v1387 + 8 * v1388;
          v1390 = (char *)(v1387 + 8 * (v1388 + *(_DWORD *)(a1 + 12968)));
          v1391 = &v1390[8 * v1386];
          v1392 = v1594;
          v1393 = v1694;
          do
          {
            v1394 = (char *)(v1389 + 8 * (v1392 + *(_DWORD *)(*a2 + 4 * v1393)));
            v1395 = &v1390[-(v1391 - v1394)];
            if (v1391 != v1394)
              memmove(v1395, (const void *)(v1389 + 8 * (v1392 + *(_DWORD *)(*a2 + 4 * v1393))), v1391 - v1394);
            *((_QWORD *)v1395 - 1) = -1;
            v1390 = v1395 - 8;
            --v1393;
            ++v1392;
            v1391 = v1394;
          }
          while (v1393 != -1);
          ++v1385;
        }
        while (v1385 != v1696);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 12960) + 24))(a1 + 12960, (a2[1] - *a2) >> 2, (*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  }
}

void sub_20F90FE30(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  _BYTE *v42;
  uint64_t v43;

  v5 = *(_BYTE **)(a1 + 88);
  v6 = *(_BYTE **)(a1 + 96);
  v4 = a1 + 88;
  v7 = (v6 - v5) >> 3;
  v8 = v7 + (a2[1] - *a2) * *(unsigned int *)(a1 + 112);
  if (v8 <= (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v5) >> 3)
    goto LABEL_13;
  if (v8 >> 61)
    sub_20E867F44();
  v9 = 8 * v8;
  v10 = operator new(8 * v8);
  v11 = &v10[8 * v7];
  v12 = v11;
  if (v6 != v5)
  {
    v13 = v6 - v5 - 8;
    if (v13 < 0x58)
    {
      v12 = &v10[8 * v7];
      do
      {
LABEL_10:
        v21 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v12 - 1) = v21;
        v12 -= 8;
      }
      while (v6 != v5);
      goto LABEL_11;
    }
    v12 = &v10[8 * v7];
    if ((unint64_t)(v5 - v10) < 0x20)
      goto LABEL_10;
    v14 = (v13 >> 3) + 1;
    v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    v16 = &v6[-v15];
    v12 = &v11[-v15];
    v17 = &v10[8 * v7 - 16];
    v18 = (__int128 *)(v6 - 16);
    v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v20 = *v18;
      *(v17 - 1) = *(v18 - 1);
      *v17 = v20;
      v17 -= 2;
      v18 -= 2;
      v19 -= 4;
    }
    while (v19);
    v6 = v16;
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = &v10[v9];
  if (v5)
    operator delete(v5);
LABEL_13:
  v22 = *(_BYTE **)(a1 + 120);
  v23 = *(_BYTE **)(a1 + 128);
  v24 = (v23 - v22) >> 3;
  v25 = v24 + a2[1] - *a2;
  if (v25 <= (uint64_t)(*(_QWORD *)(a1 + 136) - (_QWORD)v22) >> 3)
    goto LABEL_25;
  if (v25 >> 61)
    sub_20E867F44();
  v26 = 8 * v25;
  v27 = operator new(8 * v25);
  v28 = &v27[8 * v24];
  v29 = v28;
  if (v23 != v22)
  {
    v30 = v23 - v22 - 8;
    if (v30 < 0x58)
    {
      v29 = &v27[8 * v24];
      do
      {
LABEL_22:
        v38 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v29 - 1) = v38;
        v29 -= 8;
      }
      while (v23 != v22);
      goto LABEL_23;
    }
    v29 = &v27[8 * v24];
    if ((unint64_t)(v22 - v27) < 0x20)
      goto LABEL_22;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v23[-v32];
    v29 = &v28[-v32];
    v34 = &v27[8 * v24 - 16];
    v35 = (__int128 *)(v23 - 16);
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *(v34 - 1) = *(v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    v23 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_22;
  }
LABEL_23:
  *(_QWORD *)(a1 + 120) = v29;
  *(_QWORD *)(a1 + 128) = v28;
  *(_QWORD *)(a1 + 136) = &v27[v26];
  if (v22)
    operator delete(v22);
LABEL_25:
  v40 = *a2;
  v39 = a2[1];
  while (v40 != v39)
  {
    v41 = *v40++;
    ++*(_DWORD *)(a1 + 12);
    sub_20F8A6928(v4, (void *)(*(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * v41), *(unsigned int *)(a1 + 112));
    v42 = (_BYTE *)(*(_QWORD *)(a1 + 120) + 8 * v41);
    v43 = 0;
    sub_20F5B5D04((void **)(a1 + 120), v42, &v43);
  }
}

_QWORD *sub_20F9100BC(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int *a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  const void *v94;
  uint64_t v95;

  v7 = result;
  v8 = result[28] - result[27];
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    v9 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5] + a4[6] + a4[7] + a4[8];
    v10 = 3 * *(_DWORD *)(a2 + 60);
    v11 = (v8 >> 3) - 1;
    do
    {
      v12 = v11;
      v13 = v7[27];
      v14 = *(unsigned int *)(v13 + 8 * v11);
      v15 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 100) + 8 * v14);
      v16 = (uint64_t)v15 + 8 * v10 + -8 * v14;
      if ((const void *)v16 != v15)
        result = memmove((void *)(*a3 + 8 * v9 + 8 * *(unsigned int *)(v13 + 8 * v11 + 4)), v15, v16 - (_QWORD)v15);
      --v11;
      v10 = v14;
    }
    while (v12);
  }
  v17 = v7[25] - v7[24];
  if ((v17 & 0x7FFFFFFF8) != 0)
  {
    v18 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5] + a4[6] + a4[7];
    v19 = 3 * *(_DWORD *)(a2 + 56);
    v20 = (v17 >> 3) - 1;
    do
    {
      v21 = v20;
      v22 = v7[24];
      v23 = *(unsigned int *)(v22 + 8 * v20);
      v24 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 96) + 8 * v23);
      v25 = (uint64_t)v24 + 8 * v19 + -8 * v23;
      if ((const void *)v25 != v24)
        result = memmove((void *)(*a3 + 8 * v18 + 8 * *(unsigned int *)(v22 + 8 * v20 + 4)), v24, v25 - (_QWORD)v24);
      --v20;
      v19 = v23;
    }
    while (v21);
  }
  v26 = v7[22] - v7[21];
  if ((v26 & 0x7FFFFFFF8) != 0)
  {
    v27 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5] + a4[6];
    v28 = 4 * *(_DWORD *)(a2 + 52);
    v29 = (v26 >> 3) - 1;
    do
    {
      v30 = v29;
      v31 = v7[21];
      v32 = *(unsigned int *)(v31 + 8 * v29);
      v33 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 92) + 8 * v32);
      v34 = (uint64_t)v33 + 8 * v28 + -8 * v32;
      if ((const void *)v34 != v33)
        result = memmove((void *)(*a3 + 8 * v27 + 8 * *(unsigned int *)(v31 + 8 * v29 + 4)), v33, v34 - (_QWORD)v33);
      --v29;
      v28 = v32;
    }
    while (v30);
  }
  v35 = v7[19] - v7[18];
  if ((v35 & 0x7FFFFFFF8) != 0)
  {
    v36 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5];
    v37 = 4 * *(_DWORD *)(a2 + 48);
    v38 = (v35 >> 3) - 1;
    do
    {
      v39 = v38;
      v40 = v7[18];
      v41 = *(unsigned int *)(v40 + 8 * v38);
      v42 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 88) + 8 * v41);
      v43 = (uint64_t)v42 + 8 * v37 + -8 * v41;
      if ((const void *)v43 != v42)
        result = memmove((void *)(*a3 + 8 * v36 + 8 * *(unsigned int *)(v40 + 8 * v38 + 4)), v42, v43 - (_QWORD)v42);
      --v38;
      v37 = v41;
    }
    while (v39);
  }
  v44 = v7[16] - v7[15];
  if ((v44 & 0x7FFFFFFF8) != 0)
  {
    v45 = a4[1] + *a4 + a4[2] + a4[3] + a4[4];
    v46 = *(unsigned int *)(a2 + 44);
    v47 = (v44 >> 3) - 1;
    do
    {
      v48 = v46;
      v49 = v47;
      v50 = v7[15];
      v46 = *(unsigned int *)(v50 + 8 * v47);
      v51 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 84) + 8 * v46);
      v52 = (uint64_t)v51 + 8 * v48 + -8 * v46;
      if ((const void *)v52 != v51)
        result = memmove((void *)(*a3 + 8 * v45 + 8 * *(unsigned int *)(v50 + 8 * v47 + 4)), v51, v52 - (_QWORD)v51);
      --v47;
    }
    while (v49);
  }
  v53 = v7[13] - v7[12];
  if ((v53 & 0x7FFFFFFF8) != 0)
  {
    v54 = a4[1] + *a4 + a4[2] + a4[3];
    v55 = 3 * *(_DWORD *)(a2 + 40);
    v56 = (v53 >> 3) - 1;
    do
    {
      v57 = v56;
      v58 = v7[12];
      v59 = *(unsigned int *)(v58 + 8 * v56);
      v60 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 80) + 8 * v59);
      v61 = (uint64_t)v60 + 8 * v55 + -8 * v59;
      if ((const void *)v61 != v60)
        result = memmove((void *)(*a3 + 8 * v54 + 8 * *(unsigned int *)(v58 + 8 * v56 + 4)), v60, v61 - (_QWORD)v60);
      --v56;
      v55 = v59;
    }
    while (v57);
  }
  v62 = v7[10] - v7[9];
  if ((v62 & 0x7FFFFFFF8) != 0)
  {
    v63 = a4[1] + *a4 + a4[2];
    v64 = 6 * *(_DWORD *)(a2 + 36);
    v65 = (v62 >> 3) - 1;
    do
    {
      v66 = v65;
      v67 = v7[9];
      v68 = *(unsigned int *)(v67 + 8 * v65);
      v69 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 76) + 8 * v68);
      v70 = (uint64_t)v69 + 8 * v64 + -8 * v68;
      if ((const void *)v70 != v69)
        result = memmove((void *)(*a3 + 8 * v63 + 8 * *(unsigned int *)(v67 + 8 * v65 + 4)), v69, v70 - (_QWORD)v69);
      --v65;
      v64 = v68;
    }
    while (v66);
  }
  v71 = v7[7] - v7[6];
  if ((v71 & 0x7FFFFFFF8) != 0)
  {
    v72 = a4[1] + *a4;
    v73 = 6 * *(_DWORD *)(a2 + 32);
    v74 = (v71 >> 3) - 1;
    do
    {
      v75 = v74;
      v76 = v7[6];
      v77 = *(unsigned int *)(v76 + 8 * v74);
      v78 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 72) + 8 * v77);
      v79 = (uint64_t)v78 + 8 * v73 + -8 * v77;
      if ((const void *)v79 != v78)
        result = memmove((void *)(*a3 + 8 * v72 + 8 * *(unsigned int *)(v76 + 8 * v74 + 4)), v78, v79 - (_QWORD)v78);
      --v74;
      v73 = v77;
    }
    while (v75);
  }
  v80 = v7[4] - v7[3];
  if ((v80 & 0x7FFFFFFF8) != 0)
  {
    v81 = *a4;
    v82 = 9 * *(_DWORD *)(a2 + 28);
    v83 = (v80 >> 3) - 1;
    do
    {
      v84 = v83;
      v85 = v7[3];
      v86 = *(unsigned int *)(v85 + 8 * v83);
      v87 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 68) + 8 * v86);
      v88 = (uint64_t)v87 + 8 * v82 + -8 * v86;
      if ((const void *)v88 != v87)
        result = memmove((void *)(*a3 + 8 * v81 + 8 * *(unsigned int *)(v85 + 8 * v83 + 4)), v87, v88 - (_QWORD)v87);
      --v83;
      v82 = v86;
    }
    while (v84);
  }
  v89 = v7[1] - *v7;
  if ((v89 & 0x7FFFFFFF8) != 0)
  {
    v90 = 6 * *(_DWORD *)(a2 + 24);
    v91 = (v89 >> 3) - 1;
    do
    {
      v92 = v91;
      v93 = *(unsigned int *)(*v7 + 8 * v91);
      v94 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 64) + 8 * v93);
      v95 = (uint64_t)v94 + 8 * v90 + -8 * v93;
      if ((const void *)v95 != v94)
        result = memmove((void *)(*a3 + 8 * *(unsigned int *)(*v7 + 8 * v91 + 4)), v94, v95 - (_QWORD)v94);
      --v91;
      v90 = v93;
    }
    while (v92);
  }
  return result;
}

uint64_t sub_20F9106F4(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  int8x16_t v58;
  unint64_t v59;
  int8x16_t v60;
  unint64_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64x2_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  _OWORD *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  _OWORD *v93;
  size_t v94;
  uint64_t *v95;
  _BYTE *v96;
  BOOL v97;
  uint64_t v98;
  int64x2_t v99;
  int64x2_t *v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  int64x2_t *v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  float64x2_t v121;
  float64x2_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131[2];
  uint64_t v132[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v124 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v130 = result;
    v127 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = v124 + 6 * v6;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v15 = v11 + 4;
    v16 = v11 + 5;
    v128 = v10;
    v129 = v6;
    while (1)
    {
      v23 = *(_QWORD *)(v10 + 8 * v9);
      if (v23 != -1)
      {
        v24 = (int8x16_t *)(*v7 + 8 * v23);
        v25 = 3 * v9 + v4;
        v26 = 0;
        v27 = 0;
        if (v11 < v25)
          goto LABEL_12;
LABEL_11:
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v63 = *(_QWORD *)(result + 80);
      if (!v63)
        break;
      v65 = *(_QWORD *)(result + 48);
      v64 = *(_QWORD *)(result + 56);
      v66 = ((v64 - v65) << 6) - 1;
      v67 = *(_QWORD *)(result + 72);
      if (v64 == v65)
        v66 = 0;
      v24 = (int8x16_t *)(*(_QWORD *)(result + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v65 + (((unint64_t)(v67 + v63 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v67 + v63 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v63 - 1;
      if ((unint64_t)(v66 - (v63 + v67) + 1) >= 0x400)
      {
        operator delete(*(void **)(v64 - 8));
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v130;
        *(_QWORD *)(v130 + 56) -= 8;
      }
LABEL_111:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v24->i64 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v25 = 3 * v9 + v4;
      v26 = 0;
      v27 = 0;
      if (v11 >= v25)
        goto LABEL_11;
LABEL_12:
      v28 = v25 + 1;
      if (v25 + 1 <= v11)
      {
        v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
        {
LABEL_14:
          if (v12 < v25)
            goto LABEL_15;
          goto LABEL_33;
        }
      }
      else
      {
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
          goto LABEL_14;
      }
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      if (v12 < v25)
      {
LABEL_15:
        v32 = 0;
        v33.i64[0] = 0;
        if (v28 > v12)
          goto LABEL_16;
        goto LABEL_34;
      }
LABEL_33:
      v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v32 = 0;
      v33.i64[0] = 0;
      if (v28 > v12)
      {
LABEL_16:
        if (v29 > v12)
          goto LABEL_17;
        goto LABEL_35;
      }
LABEL_34:
      v33.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v29 > v12)
      {
LABEL_17:
        v34 = 0;
        v35 = 0;
        if (v13 < v25)
          goto LABEL_18;
        goto LABEL_36;
      }
LABEL_35:
      v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v34 = 0;
      v35 = 0;
      if (v13 < v25)
      {
LABEL_18:
        if (v28 > v13)
          goto LABEL_19;
        goto LABEL_37;
      }
LABEL_36:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v28 > v13)
      {
LABEL_19:
        v36 = 0;
        v37 = 0;
        if (v29 > v13)
          goto LABEL_20;
        goto LABEL_38;
      }
LABEL_37:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v36 = 0;
      v37 = 0;
      if (v29 > v13)
      {
LABEL_20:
        if (v14 < v25)
          goto LABEL_21;
        goto LABEL_39;
      }
LABEL_38:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v14 < v25)
      {
LABEL_21:
        v38 = 0;
        v39 = 0;
        if (v28 > v14)
          goto LABEL_22;
        goto LABEL_40;
      }
LABEL_39:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v38 = 0;
      v39 = 0;
      if (v28 > v14)
      {
LABEL_22:
        if (v29 > v14)
          goto LABEL_23;
        goto LABEL_41;
      }
LABEL_40:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v29 > v14)
      {
LABEL_23:
        v40 = 0;
        v41 = 0;
        if (v15 < v25)
          goto LABEL_24;
        goto LABEL_42;
      }
LABEL_41:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v40 = 0;
      v41 = 0;
      if (v15 < v25)
      {
LABEL_24:
        if (v28 > v15)
          goto LABEL_25;
        goto LABEL_43;
      }
LABEL_42:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v28 > v15)
      {
LABEL_25:
        v42 = 0;
        v43 = 0;
        if (v29 > v15)
          goto LABEL_26;
        goto LABEL_44;
      }
LABEL_43:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v42 = 0;
      v43 = 0;
      if (v29 > v15)
      {
LABEL_26:
        if (v16 >= v25)
          goto LABEL_45;
        goto LABEL_27;
      }
LABEL_44:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v16 >= v25)
      {
LABEL_45:
        v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v44 = 0;
        v45 = 0;
        if (v28 > v16)
          goto LABEL_29;
LABEL_28:
        v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        goto LABEL_29;
      }
LABEL_27:
      v44 = 0;
      v45 = 0;
      if (v28 <= v16)
        goto LABEL_28;
LABEL_29:
      v46.i64[0] = v27;
      v46.i64[1] = v26;
      v47 = vextq_s8(v46, v46, 8uLL).u64[0];
      v48.i64[0] = v31;
      v48.i64[1] = v30;
      v49.i64[0] = v33.i64[0];
      v49.i64[1] = v32;
      v50 = vextq_s8(v48, v48, 8uLL).u64[0];
      v51 = vextq_s8(v49, v49, 8uLL).u64[0];
      v52.i64[0] = v35;
      v52.i64[1] = v34;
      v53.i64[0] = v37;
      v54 = vextq_s8(v52, v52, 8uLL).u64[0];
      v53.i64[1] = v36;
      v55 = vextq_s8(v53, v53, 8uLL).u64[0];
      v56.i64[0] = v39;
      v56.i64[1] = v38;
      v57 = vextq_s8(v56, v56, 8uLL).u64[0];
      v58.i64[0] = v41;
      v58.i64[1] = v40;
      v59 = vextq_s8(v58, v58, 8uLL).u64[0];
      v60.i64[0] = v43;
      v60.i64[1] = v42;
      v61 = vextq_s8(v60, v60, 8uLL).u64[0];
      v62.i64[0] = v45;
      if (v29 <= v16)
        v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v62.i64[1] = v44;
      v17.i64[0] = v43;
      v17.i64[1] = v61;
      v18.i64[0] = v41;
      v18.i64[1] = v59;
      v19.i64[0] = v39;
      v19.i64[1] = v57;
      v20.i64[0] = v37;
      v20.i64[1] = v55;
      v21.i64[0] = v35;
      v21.i64[1] = v54;
      v33.i64[1] = v51;
      v22.i64[0] = v48.i64[0];
      v22.i64[1] = v50;
      v46.i64[1] = v47;
      *v24 = v46;
      v24[1] = v22;
      v24[2] = v33;
      v24[3] = v21;
      v24[4] = v20;
      v24[5] = v19;
      v24[6] = v18;
      v24[7] = v17;
      v24[8] = v62;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v131[0] = 0;
    v68 = *(_QWORD *)(result + 16);
    v69 = *(int64x2_t **)(result + 24);
    v70 = (uint64_t)v69->i64 - v68;
    v71 = (uint64_t)((uint64_t)v69->i64 - v68) >> 3;
    v72 = (uint64_t *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8));
    v73 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v73 - (_QWORD)v69) < 0x90)
    {
      v74 = v71 + 18;
      if ((unint64_t)(v71 + 18) >> 61)
        sub_20E867F44();
      v75 = v73 - v68;
      if (v75 >> 2 > v74)
        v74 = v75 >> 2;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      v126 = v74;
      if (v74)
      {
        if (v74 >> 61)
          sub_20E877A38();
        v76 = operator new(8 * v74);
        result = v130;
        v71 = (uint64_t)((uint64_t)v69->i64 - v68) >> 3;
      }
      else
      {
        v76 = 0;
      }
      v83 = &v76[8 * v71];
      v83[7] = 0u;
      v83[8] = 0u;
      v83[5] = 0u;
      v83[6] = 0u;
      v83[3] = 0u;
      v83[4] = 0u;
      v83[1] = 0u;
      v83[2] = 0u;
      *v83 = 0u;
      if ((int64x2_t *)v68 == v69)
      {
        v85 = &v76[8 * v71];
      }
      else
      {
        if ((unint64_t)(v70 - 8) >= 0x68)
        {
          v84 = (char *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8));
          v85 = &v76[8 * v71];
          if (v68 + (v70 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v76[v70 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v86 = ((unint64_t)(v70 - 8) >> 3) + 1;
            v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
            v84 = (char *)&v72[v87 / 0xFFFFFFFFFFFFFFF8];
            v85 = (char *)v83 - v87;
            v88 = &v76[8 * v71 - 16];
            v89 = (__int128 *)(v68 + 8 * v71 - 16);
            v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v91 = *v89;
              *(v88 - 1) = *(v89 - 1);
              *v88 = v91;
              v88 -= 2;
              v89 -= 2;
              v90 -= 4;
            }
            while (v90);
            if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_75;
          }
        }
        else
        {
          v84 = (char *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8));
          v85 = &v76[8 * v71];
        }
        do
        {
          v92 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v85 - 1) = v92;
          v85 -= 8;
        }
        while (v84 != (char *)v68);
      }
LABEL_75:
      v93 = v83 + 9;
      v94 = (char *)v69 - (char *)v72;
      if (v94)
      {
        v95 = v72;
        v96 = v76;
        memmove(v83 + 9, v95, v94);
        v76 = v96;
        result = v130;
      }
      *(_QWORD *)(result + 16) = v85;
      *(_QWORD *)(result + 24) = (char *)v93 + v94;
      *(_QWORD *)(result + 32) = &v76[8 * v126];
      v4 = a3;
      v13 = v11 + 2;
      v12 = v11 + 1;
      v14 = v11 + 3;
      if (v68)
      {
        operator delete((void *)v68);
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v130;
      }
      goto LABEL_110;
    }
    v77 = (char *)v69 - (char *)v72;
    if ((unint64_t)((char *)v69 - (char *)v72) > 0x8F)
    {
      v79 = *(uint64_t **)(result + 24);
      v78 = 18;
      goto LABEL_86;
    }
    v78 = v77 >> 3;
    v79 = &v69->i64[18 - (v77 >> 3)];
    v80 = v77 & 0xFFFFFFFFFFFFFFF8;
    v81 = 136 - v80;
    if (136 - v80 >= 0x68)
    {
      v97 = v131 < (uint64_t *)((char *)v69[9].i64 - v80);
      if (v69 >= (int64x2_t *)v132 || (v82 = *(uint64_t **)(result + 24), !v97))
      {
        v98 = (v81 >> 3) + 1;
        v82 = &v69->i64[v98 & 0x3FFFFFFFFFFFFFFCLL];
        v99 = vdupq_lane_s64(v131[0], 0);
        v100 = v69 + 1;
        v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v100[-1] = v99;
          *v100 = v99;
          v100 += 2;
          v101 -= 4;
        }
        while (v101);
        if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_85:
          *(_QWORD *)(result + 24) = v79;
          if (v69 == (int64x2_t *)v72)
            goto LABEL_110;
LABEL_86:
          v102 = (char *)v79 - (char *)(v72 + 18);
          v103 = v102 >> 3;
          v104 = (int64x2_t *)(v79 - 18);
          v105 = v79;
          if (v79 - 18 < (uint64_t *)v69)
          {
            v106 = (v70 & 0xFFFFFFFFFFFFFFF8) + v102;
            v107 = v68 + v106 + 8;
            if ((unint64_t)v69 > v107)
              v107 = (unint64_t)v69;
            v108 = v107 + ~v68 - v106;
            if (v108 >= 0x58)
            {
              v109 = (v108 >> 3) + 1;
              v110 = v109 & 0x3FFFFFFFFFFFFFFCLL;
              v104 = (int64x2_t *)((char *)v104 + v110 * 8);
              v105 = &v79[v110];
              v111 = v79 + 2;
              v112 = (__int128 *)(v68 + 8 * v103 + 8 * v71 + 16);
              v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v114 = *v112;
                *(v111 - 1) = *(v112 - 1);
                *v111 = v114;
                v111 += 2;
                v112 += 2;
                v113 -= 4;
              }
              while (v113);
              if (v109 == (v109 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_95;
            }
            else
            {
              v105 = v79;
            }
            do
            {
              v115 = v104->i64[0];
              v104 = (int64x2_t *)((char *)v104 + 8);
              *v105++ = v115;
            }
            while (v104 < v69);
          }
LABEL_95:
          *(_QWORD *)(result + 24) = v105;
          if (v79 != v72 + 18)
          {
            v116 = v4;
            v117 = v78;
            memmove(&v79[-v103], (const void *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8)), v102);
            v78 = v117;
            v4 = v116;
            v71 = (uint64_t)((uint64_t)v69->i64 - v68) >> 3;
            v14 = v11 + 3;
            v13 = v11 + 2;
            v12 = v11 + 1;
            result = v130;
          }
          v118 = v131;
          if (v72 <= v131)
          {
            v119 = 18;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v131)
              v119 = 0;
            v118 = &v131[v119];
          }
          if (v78 >= 0xA)
          {
            if (v72 >= v118 + 1
              || (unint64_t)v118 >= v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8) + 8 * v78)
            {
              v72 += v78 & 0xFFFFFFFFFFFFFFFCLL;
              v120 = v78 & 3;
              v121 = vld1q_dup_f64((const double *)v118);
              v122 = (float64x2_t *)(v68 + 8 * v71 + 16);
              v123 = v78 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v122[-1] = v121;
                *v122 = v121;
                v122 += 2;
                v123 -= 4;
              }
              while (v123);
              if (v78 == (v78 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_110;
            }
            else
            {
              v120 = v78;
            }
          }
          else
          {
            v120 = v78;
          }
          do
          {
            *v72++ = *v118;
            --v120;
          }
          while (v120);
LABEL_110:
          v24 = (int8x16_t *)(*(_QWORD *)(result + 24) - 144);
          v10 = v128;
          v6 = v129;
          v7 = v127;
          goto LABEL_111;
        }
      }
    }
    else
    {
      v82 = *(uint64_t **)(result + 24);
    }
    do
      *v82++ = v131[0];
    while (v82 != v79);
    goto LABEL_85;
  }
  return result;
}

uint64_t sub_20F91117C(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  unint64_t v59;
  int8x16_t v60;
  unint64_t v61;
  unint64_t v62;
  int8x16_t v63;
  unint64_t v64;
  unint64_t v65;
  int8x16_t v66;
  unint64_t v67;
  unint64_t v68;
  int8x16_t v69;
  unint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  unint64_t v73;
  int8x16_t v74;
  unint64_t v75;
  unint64_t v76;
  int8x16_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64x2_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  char *v110;
  size_t v111;
  uint64_t *v112;
  _BYTE *v113;
  BOOL v114;
  uint64_t v115;
  int64x2_t v116;
  int64x2_t *v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  int64x2_t *v121;
  uint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  float64x2_t v138;
  float64x2_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149[2];
  uint64_t v150[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v141 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v148 = result;
    v145 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = 9 * v6 + v141;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v15 = v11 + 4;
    v16 = v11 + 5;
    v17 = v11 + 6;
    v18 = v11 + 7;
    v19 = v11 + 8;
    v146 = v10;
    v147 = v6;
    while (1)
    {
      v22 = *(_QWORD *)(v10 + 8 * v9);
      if (v22 != -1)
      {
        v23 = *v7 + 8 * v22;
        v24 = 3 * v9 + v4;
        v25 = 0;
        v26 = 0;
        if (v11 < v24)
          goto LABEL_12;
LABEL_11:
        v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v80 = *(_QWORD *)(result + 80);
      if (!v80)
        break;
      v82 = *(_QWORD *)(result + 48);
      v81 = *(_QWORD *)(result + 56);
      v83 = ((v81 - v82) << 6) - 1;
      v84 = *(_QWORD *)(result + 72);
      if (v81 == v82)
        v83 = 0;
      v23 = *(_QWORD *)(result + 16)
          + 8
          * *(_QWORD *)(*(_QWORD *)(v82 + (((unint64_t)(v84 + v80 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v84 + v80 - 1) & 0x1FF));
      *(_QWORD *)(result + 80) = v80 - 1;
      if ((unint64_t)(v83 - (v80 + v84) + 1) >= 0x400)
      {
        operator delete(*(void **)(v81 - 8));
        v17 = v11 + 6;
        v16 = v11 + 5;
        v15 = v11 + 4;
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v148;
        *(_QWORD *)(v148 + 56) -= 8;
      }
LABEL_129:
      *(_QWORD *)(v10 + 8 * v9) = (v23 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v24 = 3 * v9 + v4;
      v25 = 0;
      v26 = 0;
      if (v11 >= v24)
        goto LABEL_11;
LABEL_12:
      v27 = v24 + 1;
      if (v24 + 1 <= v11)
      {
        v25 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v28 = v24 + 2;
        v29 = 0;
        v30 = 0;
        if (v24 + 2 > v11)
        {
LABEL_14:
          if (v12 < v24)
            goto LABEL_15;
          goto LABEL_42;
        }
      }
      else
      {
        v28 = v24 + 2;
        v29 = 0;
        v30 = 0;
        if (v24 + 2 > v11)
          goto LABEL_14;
      }
      v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      if (v12 < v24)
      {
LABEL_15:
        v31 = 0;
        v32 = 0;
        if (v27 > v12)
          goto LABEL_16;
        goto LABEL_43;
      }
LABEL_42:
      v29 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v31 = 0;
      v32 = 0;
      if (v27 > v12)
      {
LABEL_16:
        if (v28 > v12)
          goto LABEL_17;
        goto LABEL_44;
      }
LABEL_43:
      v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v28 > v12)
      {
LABEL_17:
        v33 = 0;
        v34 = 0;
        if (v13 < v24)
          goto LABEL_18;
        goto LABEL_45;
      }
LABEL_44:
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v33 = 0;
      v34 = 0;
      if (v13 < v24)
      {
LABEL_18:
        if (v27 > v13)
          goto LABEL_19;
        goto LABEL_46;
      }
LABEL_45:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v27 > v13)
      {
LABEL_19:
        v35 = 0;
        v36 = 0;
        if (v28 > v13)
          goto LABEL_20;
        goto LABEL_47;
      }
LABEL_46:
      v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v35 = 0;
      v36 = 0;
      if (v28 > v13)
      {
LABEL_20:
        if (v14 < v24)
          goto LABEL_21;
        goto LABEL_48;
      }
LABEL_47:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v14 < v24)
      {
LABEL_21:
        v37 = 0;
        v38 = 0;
        if (v27 > v14)
          goto LABEL_22;
        goto LABEL_49;
      }
LABEL_48:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v37 = 0;
      v38 = 0;
      if (v27 > v14)
      {
LABEL_22:
        if (v28 > v14)
          goto LABEL_23;
        goto LABEL_50;
      }
LABEL_49:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v28 > v14)
      {
LABEL_23:
        v39 = 0;
        v40 = 0;
        if (v15 < v24)
          goto LABEL_24;
        goto LABEL_51;
      }
LABEL_50:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v39 = 0;
      v40 = 0;
      if (v15 < v24)
      {
LABEL_24:
        if (v27 > v15)
          goto LABEL_25;
        goto LABEL_52;
      }
LABEL_51:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v27 > v15)
      {
LABEL_25:
        v41 = 0;
        v42 = 0;
        if (v28 > v15)
          goto LABEL_26;
        goto LABEL_53;
      }
LABEL_52:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v41 = 0;
      v42 = 0;
      if (v28 > v15)
      {
LABEL_26:
        if (v16 < v24)
          goto LABEL_27;
        goto LABEL_54;
      }
LABEL_53:
      v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v16 < v24)
      {
LABEL_27:
        v43 = 0;
        v44 = 0;
        if (v27 > v16)
          goto LABEL_28;
        goto LABEL_55;
      }
LABEL_54:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v43 = 0;
      v44 = 0;
      if (v27 > v16)
      {
LABEL_28:
        if (v28 > v16)
          goto LABEL_29;
        goto LABEL_56;
      }
LABEL_55:
      v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      if (v28 > v16)
      {
LABEL_29:
        v45 = 0;
        v46 = 0;
        if (v17 < v24)
          goto LABEL_30;
        goto LABEL_57;
      }
LABEL_56:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v45 = 0;
      v46 = 0;
      if (v17 < v24)
      {
LABEL_30:
        if (v27 > v17)
          goto LABEL_31;
        goto LABEL_58;
      }
LABEL_57:
      v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      if (v27 > v17)
      {
LABEL_31:
        v47 = 0;
        v48 = 0;
        if (v28 > v17)
          goto LABEL_32;
        goto LABEL_59;
      }
LABEL_58:
      v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v47 = 0;
      v48 = 0;
      if (v28 > v17)
      {
LABEL_32:
        if (v18 < v24)
          goto LABEL_33;
        goto LABEL_60;
      }
LABEL_59:
      v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      if (v18 < v24)
      {
LABEL_33:
        v49 = 0;
        v50 = 0;
        if (v27 > v18)
          goto LABEL_34;
        goto LABEL_61;
      }
LABEL_60:
      v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v49 = 0;
      v50 = 0;
      if (v27 > v18)
      {
LABEL_34:
        if (v28 > v18)
          goto LABEL_35;
        goto LABEL_62;
      }
LABEL_61:
      v50 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      if (v28 > v18)
      {
LABEL_35:
        v51 = 0;
        v52 = 0;
        if (v19 >= v24)
          goto LABEL_63;
        goto LABEL_36;
      }
LABEL_62:
      v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v51 = 0;
      v52 = 0;
      if (v19 >= v24)
      {
LABEL_63:
        v52 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
        if (v27 > v19)
          goto LABEL_38;
LABEL_37:
        v51 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
        goto LABEL_38;
      }
LABEL_36:
      if (v27 <= v19)
        goto LABEL_37;
LABEL_38:
      v53.i64[0] = v26;
      v53.i64[1] = v25;
      v54.i64[0] = v30;
      v54.i64[1] = v29;
      v55.i64[0] = v32;
      v55.i64[1] = v31;
      v56.i64[0] = v34;
      v56.i64[1] = v33;
      v57.i64[0] = v36;
      v57.i64[1] = v35;
      v58.i64[0] = v38;
      v58.i64[1] = v37;
      v60.i64[0] = v40;
      v59 = vextq_s8(v53, v53, 8uLL).u64[0];
      v60.i64[1] = v39;
      v61 = vextq_s8(v54, v54, 8uLL).u64[0];
      v63.i64[0] = v42;
      v62 = vextq_s8(v55, v55, 8uLL).u64[0];
      v63.i64[1] = v41;
      v64 = vextq_s8(v56, v56, 8uLL).u64[0];
      v66.i64[0] = v44;
      v65 = vextq_s8(v57, v57, 8uLL).u64[0];
      v66.i64[1] = v43;
      v69.i64[0] = v46;
      v67 = vextq_s8(v58, v58, 8uLL).u64[0];
      v68 = vextq_s8(v60, v60, 8uLL).u64[0];
      v69.i64[1] = v45;
      v70 = vextq_s8(v63, v63, 8uLL).u64[0];
      v71.i64[0] = v48;
      v72 = vextq_s8(v66, v66, 8uLL).u64[0];
      v71.i64[1] = v47;
      v73 = vextq_s8(v69, v69, 8uLL).u64[0];
      v74.i64[0] = v50;
      v75 = vextq_s8(v71, v71, 8uLL).u64[0];
      v74.i64[1] = v49;
      v77.i64[0] = v52;
      v76 = vextq_s8(v74, v74, 8uLL).u64[0];
      v77.i64[1] = v51;
      v78 = vextq_s8(v77, v77, 8uLL).u64[0];
      v79 = 0;
      if (v28 <= v19)
        v79 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      *(_QWORD *)&v20 = v54.i64[0];
      *((_QWORD *)&v20 + 1) = v61;
      v53.i64[1] = v59;
      *(int8x16_t *)v23 = v53;
      *(_OWORD *)(v23 + 16) = v20;
      *(_QWORD *)&v21 = v56.i64[0];
      *((_QWORD *)&v21 + 1) = v64;
      *(_QWORD *)&v20 = v55.i64[0];
      *((_QWORD *)&v20 + 1) = v62;
      *(_OWORD *)(v23 + 32) = v20;
      *(_OWORD *)(v23 + 48) = v21;
      *(_QWORD *)&v20 = v38;
      *((_QWORD *)&v20 + 1) = v67;
      *(_QWORD *)&v21 = v36;
      *((_QWORD *)&v21 + 1) = v65;
      *(_OWORD *)(v23 + 64) = v21;
      *(_OWORD *)(v23 + 80) = v20;
      *(_QWORD *)&v21 = v63.i64[0];
      *((_QWORD *)&v21 + 1) = v70;
      *(_QWORD *)&v20 = v60.i64[0];
      *((_QWORD *)&v20 + 1) = v68;
      *(_OWORD *)(v23 + 96) = v20;
      *(_OWORD *)(v23 + 112) = v21;
      *(_QWORD *)&v20 = v69.i64[0];
      *((_QWORD *)&v20 + 1) = v73;
      *(_QWORD *)&v21 = v66.i64[0];
      *((_QWORD *)&v21 + 1) = v72;
      *(_OWORD *)(v23 + 128) = v21;
      *(_OWORD *)(v23 + 144) = v20;
      *(_QWORD *)&v21 = v50;
      *((_QWORD *)&v21 + 1) = v76;
      *(_QWORD *)&v20 = v48;
      *((_QWORD *)&v20 + 1) = v75;
      *(_OWORD *)(v23 + 160) = v20;
      *(_OWORD *)(v23 + 176) = v21;
      *(_QWORD *)&v20 = v77.i64[0];
      *((_QWORD *)&v20 + 1) = v78;
      *(_OWORD *)(v23 + 192) = v20;
      *(_QWORD *)(v23 + 208) = v79;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v149[0] = 0;
    v85 = *(_QWORD *)(result + 16);
    v86 = *(int64x2_t **)(result + 24);
    v87 = (uint64_t)v86->i64 - v85;
    v88 = (uint64_t)((uint64_t)v86->i64 - v85) >> 3;
    v89 = (uint64_t *)(v85 + (((unint64_t)v86 - v85) & 0xFFFFFFFFFFFFFFF8));
    v90 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v90 - (_QWORD)v86) < 0xD8)
    {
      v91 = v88 + 27;
      if ((unint64_t)(v88 + 27) >> 61)
        sub_20E867F44();
      v92 = v90 - v85;
      if (v92 >> 2 > v91)
        v91 = v92 >> 2;
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
        v91 = 0x1FFFFFFFFFFFFFFFLL;
      v143 = v91;
      if (v91)
      {
        if (v91 >> 61)
          sub_20E877A38();
        v93 = operator new(8 * v91);
        result = v148;
      }
      else
      {
        v93 = 0;
      }
      v100 = &v93[8 * v88];
      *((_QWORD *)v100 + 26) = 0;
      *((_OWORD *)v100 + 11) = 0u;
      *((_OWORD *)v100 + 12) = 0u;
      *((_OWORD *)v100 + 9) = 0u;
      *((_OWORD *)v100 + 10) = 0u;
      *((_OWORD *)v100 + 7) = 0u;
      *((_OWORD *)v100 + 8) = 0u;
      *((_OWORD *)v100 + 5) = 0u;
      *((_OWORD *)v100 + 6) = 0u;
      *((_OWORD *)v100 + 3) = 0u;
      *((_OWORD *)v100 + 4) = 0u;
      *((_OWORD *)v100 + 1) = 0u;
      *((_OWORD *)v100 + 2) = 0u;
      *(_OWORD *)v100 = 0u;
      if ((int64x2_t *)v85 == v86)
      {
        v102 = &v93[8 * v88];
      }
      else
      {
        if ((unint64_t)(v87 - 8) >= 0x68)
        {
          v101 = (char *)(v85 + (((unint64_t)v86 - v85) & 0xFFFFFFFFFFFFFFF8));
          v102 = &v93[8 * v88];
          if (v85 + (v87 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v93[v87 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v103 = ((unint64_t)(v87 - 8) >> 3) + 1;
            v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
            v101 = (char *)&v89[v104 / 0xFFFFFFFFFFFFFFF8];
            v102 = &v100[-v104];
            v105 = &v93[8 * v88 - 16];
            v106 = (__int128 *)(v85 + 8 * v88 - 16);
            v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v108 = *v106;
              *(v105 - 1) = *(v106 - 1);
              *v105 = v108;
              v105 -= 2;
              v106 -= 2;
              v107 -= 4;
            }
            while (v107);
            if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_93;
          }
        }
        else
        {
          v101 = (char *)(v85 + (((unint64_t)v86 - v85) & 0xFFFFFFFFFFFFFFF8));
          v102 = &v93[8 * v88];
        }
        do
        {
          v109 = *((_QWORD *)v101 - 1);
          v101 -= 8;
          *((_QWORD *)v102 - 1) = v109;
          v102 -= 8;
        }
        while (v101 != (char *)v85);
      }
LABEL_93:
      v110 = v100 + 216;
      v111 = (char *)v86 - (char *)v89;
      if (v111)
      {
        v112 = v89;
        v113 = v93;
        memmove(v100 + 216, v112, v111);
        v93 = v113;
        result = v148;
      }
      *(_QWORD *)(result + 16) = v102;
      *(_QWORD *)(result + 24) = &v110[v111];
      *(_QWORD *)(result + 32) = &v93[8 * v143];
      v4 = a3;
      v13 = v11 + 2;
      v12 = v11 + 1;
      v15 = v11 + 4;
      v14 = v11 + 3;
      v17 = v11 + 6;
      v16 = v11 + 5;
      if (v85)
      {
        operator delete((void *)v85);
        v17 = v11 + 6;
        v16 = v11 + 5;
        v15 = v11 + 4;
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v148;
      }
      goto LABEL_128;
    }
    v94 = (char *)v86 - (char *)v89;
    if ((unint64_t)((char *)v86 - (char *)v89) > 0xD7)
    {
      v96 = *(uint64_t **)(result + 24);
      v95 = 27;
      goto LABEL_104;
    }
    v95 = v94 >> 3;
    v96 = &v86->i64[27 - (v94 >> 3)];
    v97 = v94 & 0xFFFFFFFFFFFFFFF8;
    v98 = 208 - v97;
    if (208 - v97 >= 0x68)
    {
      v114 = v149 < (uint64_t *)((char *)&v86[13].i64[1] - v97);
      if (v86 >= (int64x2_t *)v150 || (v99 = *(uint64_t **)(result + 24), !v114))
      {
        v115 = (v98 >> 3) + 1;
        v99 = &v86->i64[v115 & 0x3FFFFFFFFFFFFFFCLL];
        v116 = vdupq_lane_s64(v149[0], 0);
        v117 = v86 + 1;
        v118 = v115 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v117[-1] = v116;
          *v117 = v116;
          v117 += 2;
          v118 -= 4;
        }
        while (v118);
        if (v115 == (v115 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_103:
          *(_QWORD *)(result + 24) = v96;
          if (v86 == (int64x2_t *)v89)
            goto LABEL_128;
LABEL_104:
          v119 = (char *)v96 - (char *)(v89 + 27);
          v120 = v119 >> 3;
          v121 = (int64x2_t *)(v96 - 27);
          v122 = v96;
          if (v96 - 27 < (uint64_t *)v86)
          {
            v123 = (v87 & 0xFFFFFFFFFFFFFFF8) + v119;
            v124 = v85 + v123 + 8;
            if ((unint64_t)v86 > v124)
              v124 = (unint64_t)v86;
            v125 = v124 + ~v85 - v123;
            if (v125 >= 0x58)
            {
              v144 = v95;
              v126 = (v125 >> 3) + 1;
              v127 = v126 & 0x3FFFFFFFFFFFFFFCLL;
              v121 = (int64x2_t *)((char *)v121 + v127 * 8);
              v122 = &v96[v127];
              v128 = v96 + 2;
              v129 = (__int128 *)(v85 + 8 * v120 + 8 * v88 + 16);
              v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v131 = *v129;
                *(v128 - 1) = *(v129 - 1);
                *v128 = v131;
                v128 += 2;
                v129 += 2;
                v130 -= 4;
              }
              while (v130);
              v95 = v144;
              if (v126 == (v126 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_113;
            }
            else
            {
              v122 = v96;
            }
            do
            {
              v132 = v121->i64[0];
              v121 = (int64x2_t *)((char *)v121 + 8);
              *v122++ = v132;
            }
            while (v121 < v86);
          }
LABEL_113:
          *(_QWORD *)(result + 24) = v122;
          if (v96 != v89 + 27)
          {
            v133 = v4;
            v134 = v95;
            memmove(&v96[-v120], (const void *)(v85 + (((unint64_t)v86 - v85) & 0xFFFFFFFFFFFFFFF8)), v119);
            v95 = v134;
            v4 = v133;
            v17 = v11 + 6;
            v16 = v11 + 5;
            v15 = v11 + 4;
            v14 = v11 + 3;
            v13 = v11 + 2;
            v12 = v11 + 1;
            result = v148;
          }
          v135 = v149;
          if (v89 <= v149)
          {
            v136 = 27;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v149)
              v136 = 0;
            v135 = &v149[v136];
          }
          if (v95 >= 0xA)
          {
            if (v89 >= v135 + 1
              || (unint64_t)v135 >= v85 + (((unint64_t)v86 - v85) & 0xFFFFFFFFFFFFFFF8) + 8 * v95)
            {
              v89 += v95 & 0xFFFFFFFFFFFFFFFCLL;
              v137 = v95 & 3;
              v138 = vld1q_dup_f64((const double *)v135);
              v139 = (float64x2_t *)(v85 + 8 * v88 + 16);
              v140 = v95 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v139[-1] = v138;
                *v139 = v138;
                v139 += 2;
                v140 -= 4;
              }
              while (v140);
              if (v95 == (v95 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_128;
            }
            else
            {
              v137 = v95;
            }
          }
          else
          {
            v137 = v95;
          }
          do
          {
            *v89++ = *v135;
            --v137;
          }
          while (v137);
LABEL_128:
          v23 = *(_QWORD *)(result + 24) - 216;
          v10 = v146;
          v6 = v147;
          v7 = v145;
          goto LABEL_129;
        }
      }
    }
    else
    {
      v99 = *(uint64_t **)(result + 24);
    }
    do
      *v99++ = v149[0];
    while (v99 != v96);
    goto LABEL_103;
  }
  return result;
}

uint64_t sub_20F911E38(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int8x16_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64x2_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  size_t v62;
  uint64_t *v63;
  char *v64;
  BOOL v65;
  uint64_t v66;
  int64x2_t v67;
  int64x2_t *v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  int64x2_t *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  const double *v86;
  uint64_t v87;
  unint64_t v88;
  float64x2_t v89;
  float64x2_t *v90;
  unint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v92 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v96 = a3;
      v97 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = 3 * v7 + v92;
      v12 = v11 + 1;
      v13 = v11 + 2;
      v99 = result;
      v98 = v7;
      while (1)
      {
        v17 = *(_QWORD *)(result + 8 * v10);
        if (v17 != -1)
        {
          v18 = *v8 + 8 * v17;
          v19 = 3 * v10 + v5;
          v20 = 0;
          v21.i64[0] = 0;
          if (v11 < v19)
            goto LABEL_12;
LABEL_11:
          v21.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v19 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
          goto LABEL_12;
        }
        v31 = *(_QWORD *)(v4 + 80);
        if (!v31)
          break;
        v33 = *(_QWORD *)(v4 + 48);
        v32 = *(_QWORD *)(v4 + 56);
        v34 = ((v32 - v33) << 6) - 1;
        v35 = *(_QWORD *)(v4 + 72);
        if (v32 == v33)
          v34 = 0;
        v18 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v33 + (((unint64_t)(v35 + v31 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v35 + v31 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v31 - 1;
        if ((unint64_t)(v34 - (v31 + v35) + 1) >= 0x400)
        {
          operator delete(*(void **)(v32 - 8));
          result = v99;
          *(_QWORD *)(v4 + 56) -= 8;
        }
LABEL_93:
        *(_QWORD *)(result + 8 * v10) = (v18 - *(_QWORD *)(v4 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
        v19 = 3 * v10 + v5;
        v20 = 0;
        v21.i64[0] = 0;
        if (v11 >= v19)
          goto LABEL_11;
LABEL_12:
        v22 = v19 + 1;
        if (v19 + 1 <= v11)
        {
          v20 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
          v23 = v19 + 2;
          v24 = 0;
          v25 = 0;
          if (v19 + 2 > v11)
          {
LABEL_14:
            if (v12 < v19)
              goto LABEL_15;
            goto LABEL_23;
          }
        }
        else
        {
          v23 = v19 + 2;
          v24 = 0;
          v25 = 0;
          if (v19 + 2 > v11)
            goto LABEL_14;
        }
        v25 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        if (v12 < v19)
        {
LABEL_15:
          v26 = 0;
          v27 = 0;
          if (v22 > v12)
            goto LABEL_16;
          goto LABEL_24;
        }
LABEL_23:
        v24 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v19 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v26 = 0;
        v27 = 0;
        if (v22 > v12)
        {
LABEL_16:
          if (v23 > v12)
            goto LABEL_17;
          goto LABEL_25;
        }
LABEL_24:
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        if (v23 > v12)
        {
LABEL_17:
          v28 = 0;
          v29 = 0;
          if (v13 < v19)
            goto LABEL_18;
          goto LABEL_26;
        }
LABEL_25:
        v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v28 = 0;
        v29 = 0;
        if (v13 < v19)
        {
LABEL_18:
          if (v22 > v13)
            goto LABEL_19;
          goto LABEL_27;
        }
LABEL_26:
        v29 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v19 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v22 > v13)
        {
LABEL_19:
          v30 = 0;
          if (v23 <= v13)
            goto LABEL_28;
          goto LABEL_8;
        }
LABEL_27:
        v28 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v30 = 0;
        if (v23 <= v13)
LABEL_28:
          v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
LABEL_8:
        v21.i64[1] = v20;
        v14.i64[0] = v25;
        v14.i64[1] = v24;
        v15.i64[0] = v27;
        v15.i64[1] = v26;
        v16.i64[0] = v29;
        v16.i64[1] = v28;
        v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
        v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
        v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
        v21.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
        *(_QWORD *)(v18 + 64) = v30;
        *(int8x16_t *)v18 = v21;
        *(int8x16_t *)(v18 + 16) = v14;
        *(int8x16_t *)(v18 + 32) = v15;
        *(int8x16_t *)(v18 + 48) = v16;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v100 = 0;
      v36 = *(_QWORD *)(v4 + 16);
      v37 = *(int64x2_t **)(v4 + 24);
      v38 = (unint64_t)v37 - v36;
      v39 = (uint64_t)((uint64_t)v37->i64 - v36) >> 3;
      v40 = (uint64_t *)(v36 + (((unint64_t)v37 - v36) & 0xFFFFFFFFFFFFFFF8));
      v41 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v41 - (_QWORD)v37) < 0x48)
      {
        v42 = v39 + 9;
        if ((unint64_t)(v39 + 9) >> 61)
          sub_20E867F44();
        v43 = v41 - v36;
        if (v43 >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        v94 = v42;
        if (v42)
        {
          if (v42 >> 61)
            sub_20E877A38();
          v44 = operator new(8 * v42);
          v39 = (uint64_t)((uint64_t)v37->i64 - v36) >> 3;
          v38 = (unint64_t)v37 - v36;
        }
        else
        {
          v44 = 0;
        }
        v51 = &v44[8 * v39];
        *((_QWORD *)v51 + 8) = 0;
        *((_OWORD *)v51 + 2) = 0u;
        *((_OWORD *)v51 + 3) = 0u;
        *(_OWORD *)v51 = 0u;
        *((_OWORD *)v51 + 1) = 0u;
        if ((int64x2_t *)v36 == v37)
        {
          v53 = &v44[8 * v39];
        }
        else
        {
          if (v38 - 8 >= 0x68)
          {
            v52 = (char *)(v36 + (((unint64_t)v37 - v36) & 0xFFFFFFFFFFFFFFF8));
            v53 = &v44[8 * v39];
            if (v36 + (v38 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v44[v38 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v54 = ((v38 - 8) >> 3) + 1;
              v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              v52 = (char *)&v40[v55 / 0xFFFFFFFFFFFFFFF8];
              v53 = &v51[-v55];
              v56 = &v44[8 * v39 - 16];
              v57 = (__int128 *)(v36 + 8 * v39 - 16);
              v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v59 = *v57;
                *(v56 - 1) = *(v57 - 1);
                *v56 = v59;
                v56 -= 2;
                v57 -= 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_57;
            }
          }
          else
          {
            v52 = (char *)(v36 + (((unint64_t)v37 - v36) & 0xFFFFFFFFFFFFFFF8));
            v53 = &v44[8 * v39];
          }
          do
          {
            v60 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *((_QWORD *)v53 - 1) = v60;
            v53 -= 8;
          }
          while (v52 != (char *)v36);
        }
LABEL_57:
        v61 = v51 + 72;
        v62 = (char *)v37 - (char *)v40;
        if (v62)
        {
          v93 = v44;
          v63 = v40;
          v64 = v51 + 72;
          memmove(v51 + 72, v63, v62);
          v61 = v64;
          v44 = v93;
        }
        *(_QWORD *)(v4 + 16) = v53;
        *(_QWORD *)(v4 + 24) = &v61[v62];
        *(_QWORD *)(v4 + 32) = &v44[8 * v94];
        result = v99;
        if (v36)
        {
          operator delete((void *)v36);
          result = v99;
        }
        goto LABEL_92;
      }
      v45 = (char *)v37 - (char *)v40;
      if ((unint64_t)((char *)v37 - (char *)v40) > 0x47)
      {
        v47 = *(uint64_t **)(v4 + 24);
        v46 = 9;
        goto LABEL_68;
      }
      v46 = v45 >> 3;
      v47 = &v37->i64[9 - (v45 >> 3)];
      v48 = v45 & 0xFFFFFFFFFFFFFFF8;
      v49 = 64 - v48;
      if (64 - v48 >= 0x68)
      {
        v65 = &v100 < (uint64_t *)((char *)&v37[4].i64[1] - v48);
        if (v37 >= (int64x2_t *)&v101 || (v50 = *(uint64_t **)(v4 + 24), !v65))
        {
          v66 = (v49 >> 3) + 1;
          v50 = &v37->i64[v66 & 0x3FFFFFFFFFFFFFFCLL];
          v67 = vdupq_lane_s64(v100, 0);
          v68 = v37 + 1;
          v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68[-1] = v67;
            *v68 = v67;
            v68 += 2;
            v69 -= 4;
          }
          while (v69);
          if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_67:
            *(_QWORD *)(v4 + 24) = v47;
            if (v37 == (int64x2_t *)v40)
              goto LABEL_92;
LABEL_68:
            v70 = (char *)v47 - (char *)(v40 + 9);
            v71 = v70 >> 3;
            v72 = (int64x2_t *)(v47 - 9);
            v73 = (char *)v47;
            if (v47 - 9 < (uint64_t *)v37)
            {
              v74 = (v38 & 0xFFFFFFFFFFFFFFF8) + v70;
              v75 = v36 + v74 + 8;
              if ((unint64_t)v37 > v75)
                v75 = (unint64_t)v37;
              v76 = v75 + ~v36 - v74;
              if (v76 >= 0x58)
              {
                v77 = (v76 >> 3) + 1;
                v78 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                v72 = (int64x2_t *)((char *)v72 + v78 * 8);
                v73 = (char *)&v47[v78];
                v79 = v47 + 2;
                v80 = (__int128 *)(v36 + 8 * v71 + 8 * v39 + 16);
                v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v82 = *v80;
                  *(v79 - 1) = *(v80 - 1);
                  *v79 = v82;
                  v79 += 2;
                  v80 += 2;
                  v81 -= 4;
                }
                while (v81);
                v38 = (unint64_t)v37 - v36;
                if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_77;
              }
              else
              {
                v73 = (char *)v47;
              }
              do
              {
                v83 = v72->i64[0];
                v72 = (int64x2_t *)((char *)v72 + 8);
                *(_QWORD *)v73 = v83;
                v73 += 8;
              }
              while (v72 < v37);
            }
LABEL_77:
            *(_QWORD *)(v4 + 24) = v73;
            if (v47 != v40 + 9)
            {
              v95 = (uint64_t)((uint64_t)v37->i64 - v36) >> 3;
              v84 = (char *)(v36 + (((unint64_t)v37 - v36) & 0xFFFFFFFFFFFFFFF8));
              v85 = (char *)v38;
              memmove(&v47[-v71], v84, v70);
              v38 = (unint64_t)v85;
              v39 = v95;
              result = v99;
            }
            v86 = (const double *)&v100;
            if (v40 <= &v100)
            {
              v87 = 72;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v100)
                v87 = 0;
              v86 = (const double *)((char *)&v100 + v87);
            }
            if (v46 >= 0xA)
            {
              if (v40 >= (uint64_t *)v86 + 1 || (unint64_t)v86 >= v36 + (v38 & 0xFFFFFFFFFFFFFFF8) + 8 * v46)
              {
                v40 += v46 & 0xFFFFFFFFFFFFFFFCLL;
                v88 = v46 & 3;
                v89 = vld1q_dup_f64(v86);
                v90 = (float64x2_t *)(v36 + 8 * v39 + 16);
                v91 = v46 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v90[-1] = v89;
                  *v90 = v89;
                  v90 += 2;
                  v91 -= 4;
                }
                while (v91);
                if (v46 == (v46 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_92;
              }
              else
              {
                v88 = v46;
              }
            }
            else
            {
              v88 = v46;
            }
            do
            {
              *v40++ = *(_QWORD *)v86;
              --v88;
            }
            while (v88);
LABEL_92:
            v18 = *(_QWORD *)(v4 + 24) - 72;
            v5 = v96;
            v8 = v97;
            v7 = v98;
            goto LABEL_93;
          }
        }
      }
      else
      {
        v50 = *(uint64_t **)(v4 + 24);
      }
      do
        *v50++ = v100;
      while (v50 != v47);
      goto LABEL_67;
    }
  }
  return result;
}

void sub_20F912608(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int8x16_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t *v25;
  int64x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  size_t v52;
  BOOL v53;
  uint64_t v54;
  int64x2_t v55;
  int64x2_t *v56;
  uint64_t v57;
  int64x2_t *v58;
  uint64_t *v59;
  uint64_t v60;
  const double *v61;
  uint64_t v62;
  unint64_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v8 = (_QWORD *)(a1 + 16);
    v67 = HIDWORD(a3);
    LODWORD(v9) = 1;
    v70 = a3;
    v71 = (_QWORD *)(a1 + 16);
    while (!(_DWORD)v9)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 88) + 8 * (*(_DWORD *)(a1 + 112) * v7);
    v12 = v7 + v67;
    v72 = v7;
    while (1)
    {
      v13 = *(_QWORD *)(v11 + 8 * v10);
      if (v13 != -1)
      {
        v14 = *v8 + 8 * v13;
        v15 = 3 * v10 + v5;
        v16 = 0;
        v17.i64[0] = 0;
        if (v12 < v15)
          goto LABEL_12;
LABEL_11:
        v17.i64[0] = *(_QWORD *)(**(_QWORD **)v6 + 8 * (v15 + *(_DWORD *)(*(_QWORD *)v6 + 16) * v12));
        goto LABEL_12;
      }
      v20 = *(_QWORD *)(a1 + 80);
      if (!v20)
        break;
      v22 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 56);
      v23 = ((v21 - v22) << 6) - 1;
      v24 = *(_QWORD *)(a1 + 72);
      if (v21 == v22)
        v23 = 0;
      v14 = *(_QWORD *)(a1 + 16)
          + 8
          * *(_QWORD *)(*(_QWORD *)(v22 + (((unint64_t)(v24 + v20 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v24 + v20 - 1) & 0x1FF));
      *(_QWORD *)(a1 + 80) = v20 - 1;
      if ((unint64_t)(v23 - (v20 + v24) + 1) >= 0x400)
      {
        operator delete(*(void **)(v21 - 8));
        *(_QWORD *)(a1 + 56) -= 8;
      }
LABEL_74:
      *(_QWORD *)(v11 + 8 * v10) = (v14 - *(_QWORD *)(a1 + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v15 = 3 * v10 + v5;
      v16 = 0;
      v17.i64[0] = 0;
      if (v12 >= v15)
        goto LABEL_11;
LABEL_12:
      if (v15 + 1 <= v12)
      {
        v16 = *(_QWORD *)(**(_QWORD **)v6 + 8 * (v15 + 1 + *(_DWORD *)(*(_QWORD *)v6 + 16) * v12));
        v18 = v15 + 2;
        v19 = 0;
        if (v18 <= v12)
LABEL_16:
          v19 = *(_QWORD *)(**(_QWORD **)v6 + 8 * (v18 + *(_DWORD *)(*(_QWORD *)v6 + 16) * v12));
      }
      else
      {
        v18 = v15 + 2;
        v19 = 0;
        if (v18 <= v12)
          goto LABEL_16;
      }
      v17.i64[1] = v16;
      v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
      *(_QWORD *)(v14 + 16) = v19;
      *(int8x16_t *)v14 = v17;
      ++v10;
      v9 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v73 = 0;
    v25 = *(int64x2_t **)(a1 + 16);
    v26 = *(int64x2_t **)(a1 + 24);
    v27 = (char *)v26 - (char *)v25;
    v28 = ((char *)v26 - (char *)v25) >> 3;
    v29 = (uint64_t *)((char *)v25->i64 + (((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8));
    v30 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v30 - (_QWORD)v26) < 0x18)
    {
      v31 = v28 + 3;
      if ((unint64_t)(v28 + 3) >> 61)
        sub_20E867F44();
      v32 = v30 - (_QWORD)v25;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      v69 = v31;
      if (v31)
      {
        if (v31 >> 61)
          sub_20E877A38();
        v33 = operator new(8 * v31);
        v34 = &v33[8 * v28];
        *v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
        if (v25 != v26)
          goto LABEL_31;
      }
      else
      {
        v33 = 0;
        v34 = (_QWORD *)(8 * v28);
        *v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
        if (v25 != v26)
        {
LABEL_31:
          if ((unint64_t)(v27 - 8) >= 0x68)
          {
            v35 = (uint64_t *)((char *)v25->i64 + (((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8));
            v36 = v34;
            if ((unint64_t)(&v25->i8[v27 & 0xFFFFFFFFFFFFFFF8] - &v33[v27 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
            {
              v43 = ((unint64_t)(v27 - 8) >> 3) + 1;
              v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
              v35 = &v29[v44 / 0xFFFFFFFFFFFFFFF8];
              v36 = &v34[v44 / 0xFFFFFFFFFFFFFFF8];
              v45 = 8 * (((char *)v26 - (char *)v25) >> 3);
              v46 = &v33[v45 - 16];
              v47 = (__int128 *)&v25[-1].i8[v45];
              v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v49 = *v47;
                *(v46 - 1) = *(v47 - 1);
                *v46 = v49;
                v46 -= 2;
                v47 -= 2;
                v48 -= 4;
              }
              while (v48);
              if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_44;
            }
          }
          else
          {
            v35 = (uint64_t *)((char *)v25->i64 + (((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8));
            v36 = v34;
          }
          do
          {
            v50 = *--v35;
            *--v36 = v50;
          }
          while (v35 != (uint64_t *)v25);
LABEL_44:
          v51 = v34 + 3;
          v52 = (char *)v26 - (char *)v29;
          if (v52)
            memmove(v34 + 3, v29, v52);
          *(_QWORD *)(a1 + 16) = v36;
          *(_QWORD *)(a1 + 24) = (char *)v51 + v52;
          *(_QWORD *)(a1 + 32) = &v33[8 * v69];
          v6 = a2;
          if (v25)
            operator delete(v25);
          goto LABEL_73;
        }
      }
      v36 = v34;
      goto LABEL_44;
    }
    v37 = (char *)v26 - (char *)v29;
    if ((unint64_t)((char *)v26 - (char *)v29) > 0x17)
    {
      v39 = *(uint64_t **)(a1 + 24);
      v38 = 3;
LABEL_55:
      v58 = (int64x2_t *)(v39 - 3);
      v59 = v39;
      if (v39 - 3 < (uint64_t *)v26)
      {
        v59 = v39;
        do
        {
          v60 = v58->i64[0];
          v58 = (int64x2_t *)((char *)v58 + 8);
          *v59++ = v60;
        }
        while (v58 < v26);
      }
      *(_QWORD *)(a1 + 24) = v59;
      if (v39 != v29 + 3)
        memmove(&v39[-(v39 - (v29 + 3))], &v25->i8[((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8], (char *)v39 - (char *)(v29 + 3));
      v61 = (const double *)&v73;
      if (v29 <= &v73)
      {
        v62 = 24;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v73)
          v62 = 0;
        v61 = (const double *)((char *)&v73 + v62);
      }
      if (v38 >= 0xA)
      {
        if (v29 >= (uint64_t *)v61 + 1 || v61 >= (const double *)((char *)&v25->i64[v38] + (v27 & 0xFFFFFFFFFFFFFFF8)))
        {
          v29 += v38 & 0xFFFFFFFFFFFFFFFCLL;
          v63 = v38 & 3;
          v64 = vld1q_dup_f64(v61);
          v65 = (float64x2_t *)((char *)&v25[1] + 8 * (((char *)v26 - (char *)v25) >> 3));
          v66 = v38 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v65[-1] = v64;
            *v65 = v64;
            v65 += 2;
            v66 -= 4;
          }
          while (v66);
          if (v38 == (v38 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_73;
        }
        else
        {
          v63 = v38;
        }
      }
      else
      {
        v63 = v38;
      }
      do
      {
        *v29++ = *(_QWORD *)v61;
        --v63;
      }
      while (v63);
LABEL_73:
      v14 = *(_QWORD *)(a1 + 24) - 24;
      v5 = v70;
      v8 = v71;
      v7 = v72;
      goto LABEL_74;
    }
    v38 = v37 >> 3;
    v39 = &v26->i64[3 - (v37 >> 3)];
    v40 = v37 & 0xFFFFFFFFFFFFFFF8;
    v41 = 16 - v40;
    if (16 - v40 >= 0x68)
    {
      v53 = &v73 < (uint64_t *)((char *)&v26[1].i64[1] - v40);
      if (v26 >= (int64x2_t *)&v74 || (v42 = *(uint64_t **)(a1 + 24), !v53))
      {
        v54 = (v41 >> 3) + 1;
        v42 = &v26->i64[v54 & 0x3FFFFFFFFFFFFFFCLL];
        v55 = vdupq_lane_s64(v73, 0);
        v56 = v26 + 1;
        v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v56[-1] = v55;
          *v56 = v55;
          v56 += 2;
          v57 -= 4;
        }
        while (v57);
        if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_54:
          *(_QWORD *)(a1 + 24) = v39;
          if (v26 == (int64x2_t *)v29)
            goto LABEL_73;
          goto LABEL_55;
        }
      }
    }
    else
    {
      v42 = *(uint64_t **)(a1 + 24);
    }
    do
      *v42++ = v73;
    while (v42 != v39);
    goto LABEL_54;
  }
}

uint64_t sub_20F912C28(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _OWORD *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _OWORD *v72;
  size_t v73;
  uint64_t *v74;
  _BYTE *v75;
  BOOL v76;
  uint64_t v77;
  int64x2_t v78;
  int64x2_t *v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  int64x2_t *v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  float64x2_t v101;
  float64x2_t *v102;
  unint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113[2];
  uint64_t v114[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v104 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v111 = result;
    v108 = a3;
    v109 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = v104 + 4 * v6;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v112 = v10;
    v110 = v6;
    while (1)
    {
      v25 = *(_QWORD *)(v10 + 8 * v9);
      if (v25 != -1)
      {
        v26 = *v7 + 8 * v25;
        v27 = 3 * v9 + v4;
        v28 = 0;
        v29 = 0;
        if (v11 < v27)
          goto LABEL_12;
LABEL_11:
        v29 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v42 = *(_QWORD *)(result + 80);
      if (!v42)
        break;
      v44 = *(_QWORD *)(result + 48);
      v43 = *(_QWORD *)(result + 56);
      v45 = ((v43 - v44) << 6) - 1;
      v46 = *(_QWORD *)(result + 72);
      if (v43 == v44)
        v45 = 0;
      v26 = *(_QWORD *)(result + 16)
          + 8
          * *(_QWORD *)(*(_QWORD *)(v44 + (((unint64_t)(v46 + v42 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v46 + v42 - 1) & 0x1FF));
      *(_QWORD *)(result + 80) = v42 - 1;
      if ((unint64_t)(v45 - (v42 + v46) + 1) >= 0x400)
      {
        operator delete(*(void **)(v43 - 8));
        result = v111;
        v10 = v112;
        *(_QWORD *)(v111 + 56) -= 8;
      }
LABEL_99:
      *(_QWORD *)(v10 + 8 * v9) = (v26 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v27 = 3 * v9 + v4;
      v28 = 0;
      v29 = 0;
      if (v11 >= v27)
        goto LABEL_11;
LABEL_12:
      v30 = v27 + 1;
      if (v27 + 1 <= v11)
      {
        v28 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v31 = v27 + 2;
        v32 = 0;
        v33 = 0;
        if (v27 + 2 > v11)
        {
LABEL_14:
          if (v12 < v27)
            goto LABEL_15;
          goto LABEL_26;
        }
      }
      else
      {
        v31 = v27 + 2;
        v32 = 0;
        v33 = 0;
        if (v27 + 2 > v11)
          goto LABEL_14;
      }
      v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      if (v12 < v27)
      {
LABEL_15:
        v34 = 0;
        v35 = 0;
        if (v30 > v12)
          goto LABEL_16;
        goto LABEL_27;
      }
LABEL_26:
      v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v34 = 0;
      v35 = 0;
      if (v30 > v12)
      {
LABEL_16:
        if (v31 > v12)
          goto LABEL_17;
        goto LABEL_28;
      }
LABEL_27:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v31 > v12)
      {
LABEL_17:
        v36 = 0;
        v37 = 0;
        if (v13 < v27)
          goto LABEL_18;
        goto LABEL_29;
      }
LABEL_28:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v36 = 0;
      v37 = 0;
      if (v13 < v27)
      {
LABEL_18:
        if (v30 > v13)
          goto LABEL_19;
        goto LABEL_30;
      }
LABEL_29:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v30 > v13)
      {
LABEL_19:
        v38 = 0;
        v39 = 0;
        if (v31 > v13)
          goto LABEL_20;
        goto LABEL_31;
      }
LABEL_30:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v38 = 0;
      v39 = 0;
      if (v31 > v13)
      {
LABEL_20:
        if (v14 < v27)
          goto LABEL_21;
        goto LABEL_32;
      }
LABEL_31:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v14 < v27)
      {
LABEL_21:
        v40 = 0;
        v41 = 0;
        if (v30 > v14)
          goto LABEL_22;
        goto LABEL_33;
      }
LABEL_32:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v40 = 0;
      v41 = 0;
      if (v30 > v14)
      {
LABEL_22:
        if (v31 <= v14)
          goto LABEL_34;
        goto LABEL_8;
      }
LABEL_33:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v31 <= v14)
LABEL_34:
        v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
LABEL_8:
      v15.i64[0] = v29;
      v15.i64[1] = v28;
      v16.i64[0] = v33;
      v16.i64[1] = v32;
      v17.i64[0] = v35;
      v17.i64[1] = v34;
      v18.i64[0] = v37;
      v18.i64[1] = v36;
      v19.i64[0] = v39;
      v19.i64[1] = v38;
      *(_QWORD *)&v20 = v41;
      *((_QWORD *)&v20 + 1) = v40;
      *(_QWORD *)&v21 = v39;
      *((_QWORD *)&v21 + 1) = vextq_s8(v19, v19, 8uLL).u64[0];
      *(_QWORD *)&v22 = v37;
      *((_QWORD *)&v22 + 1) = vextq_s8(v18, v18, 8uLL).u64[0];
      *(_QWORD *)&v23 = v35;
      *((_QWORD *)&v23 + 1) = vextq_s8(v17, v17, 8uLL).u64[0];
      *(_QWORD *)&v24 = v16.i64[0];
      *((_QWORD *)&v24 + 1) = vextq_s8(v16, v16, 8uLL).u64[0];
      v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
      *(int8x16_t *)v26 = v15;
      *(_OWORD *)(v26 + 16) = v24;
      *(_OWORD *)(v26 + 32) = v23;
      *(_OWORD *)(v26 + 48) = v22;
      *(_OWORD *)(v26 + 64) = v21;
      *(_OWORD *)(v26 + 80) = v20;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v113[0] = 0;
    v47 = *(_QWORD *)(result + 16);
    v48 = *(int64x2_t **)(result + 24);
    v49 = (uint64_t)v48->i64 - v47;
    v50 = (uint64_t)((uint64_t)v48->i64 - v47) >> 3;
    v51 = (uint64_t *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8));
    v52 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v52 - (_QWORD)v48) < 0x60)
    {
      v53 = v50 + 12;
      if ((unint64_t)(v50 + 12) >> 61)
        sub_20E867F44();
      v54 = v52 - v47;
      if (v54 >> 2 > v53)
        v53 = v54 >> 2;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      v106 = v53;
      if (v53)
      {
        if (v53 >> 61)
          sub_20E877A38();
        v55 = operator new(8 * v53);
        result = v111;
        v50 = (uint64_t)((uint64_t)v48->i64 - v47) >> 3;
        v49 = (uint64_t)v48->i64 - v47;
      }
      else
      {
        v55 = 0;
      }
      v62 = &v55[8 * v50];
      v62[4] = 0u;
      v62[5] = 0u;
      v62[2] = 0u;
      v62[3] = 0u;
      *v62 = 0u;
      v62[1] = 0u;
      if ((int64x2_t *)v47 == v48)
      {
        v64 = &v55[8 * v50];
      }
      else
      {
        if ((unint64_t)(v49 - 8) >= 0x68)
        {
          v63 = (char *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8));
          v64 = &v55[8 * v50];
          if (v47 + (v49 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v55[v49 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v65 = ((unint64_t)(v49 - 8) >> 3) + 1;
            v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = (char *)&v51[v66 / 0xFFFFFFFFFFFFFFF8];
            v64 = (char *)v62 - v66;
            v67 = &v55[8 * v50 - 16];
            v68 = (__int128 *)(v47 + 8 * v50 - 16);
            v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v70 = *v68;
              *(v67 - 1) = *(v68 - 1);
              *v67 = v70;
              v67 -= 2;
              v68 -= 2;
              v69 -= 4;
            }
            while (v69);
            if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_63;
          }
        }
        else
        {
          v63 = (char *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8));
          v64 = &v55[8 * v50];
        }
        do
        {
          v71 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *((_QWORD *)v64 - 1) = v71;
          v64 -= 8;
        }
        while (v63 != (char *)v47);
      }
LABEL_63:
      v72 = v62 + 6;
      v73 = (char *)v48 - (char *)v51;
      if (v73)
      {
        v74 = v51;
        v75 = v55;
        v105 = v62 + 6;
        memmove(v62 + 6, v74, v73);
        v72 = v105;
        v55 = v75;
        result = v111;
      }
      *(_QWORD *)(result + 16) = v64;
      *(_QWORD *)(result + 24) = (char *)v72 + v73;
      *(_QWORD *)(result + 32) = &v55[8 * v106];
      v10 = v112;
      if (v47)
      {
        operator delete((void *)v47);
        result = v111;
        v10 = v112;
      }
      goto LABEL_98;
    }
    v56 = (char *)v48 - (char *)v51;
    if ((unint64_t)((char *)v48 - (char *)v51) > 0x5F)
    {
      v58 = *(uint64_t **)(result + 24);
      v57 = 12;
      goto LABEL_74;
    }
    v57 = v56 >> 3;
    v58 = &v48->i64[12 - (v56 >> 3)];
    v59 = v56 & 0xFFFFFFFFFFFFFFF8;
    v60 = 88 - v59;
    if (88 - v59 >= 0x68)
    {
      v76 = v113 < (uint64_t *)((char *)v48[6].i64 - v59);
      if (v48 >= (int64x2_t *)v114 || (v61 = *(uint64_t **)(result + 24), !v76))
      {
        v77 = (v60 >> 3) + 1;
        v61 = &v48->i64[v77 & 0x3FFFFFFFFFFFFFFCLL];
        v78 = vdupq_lane_s64(v113[0], 0);
        v79 = v48 + 1;
        v80 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79[-1] = v78;
          *v79 = v78;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_73:
          *(_QWORD *)(result + 24) = v58;
          if (v48 == (int64x2_t *)v51)
            goto LABEL_98;
LABEL_74:
          v81 = (char *)v58 - (char *)(v51 + 12);
          v82 = v81 >> 3;
          v83 = (int64x2_t *)(v58 - 12);
          v84 = v58;
          if (v58 - 12 < (uint64_t *)v48)
          {
            v85 = (v49 & 0xFFFFFFFFFFFFFFF8) + v81;
            v86 = v47 + v85 + 8;
            if ((unint64_t)v48 > v86)
              v86 = (unint64_t)v48;
            v87 = v86 + ~v47 - v85;
            if (v87 >= 0x58)
            {
              v88 = (v87 >> 3) + 1;
              v89 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              v83 = (int64x2_t *)((char *)v83 + v89 * 8);
              v84 = &v58[v89];
              v90 = v58 + 2;
              v91 = (__int128 *)(v47 + 8 * v82 + 8 * v50 + 16);
              v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v93 = *v91;
                *(v90 - 1) = *(v91 - 1);
                *v90 = v93;
                v90 += 2;
                v91 += 2;
                v92 -= 4;
              }
              while (v92);
              v49 = (uint64_t)v48->i64 - v47;
              if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_83;
            }
            else
            {
              v84 = v58;
            }
            do
            {
              v94 = v83->i64[0];
              v83 = (int64x2_t *)((char *)v83 + 8);
              *v84++ = v94;
            }
            while (v83 < v48);
          }
LABEL_83:
          *(_QWORD *)(result + 24) = v84;
          if (v58 != v51 + 12)
          {
            v95 = (char *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8));
            v96 = (uint64_t)((uint64_t)v48->i64 - v47) >> 3;
            v97 = v49;
            v107 = v57;
            memmove(&v58[-v82], v95, v81);
            v57 = v107;
            v49 = v97;
            v50 = v96;
            result = v111;
            v10 = v112;
          }
          v98 = v113;
          if (v51 <= v113)
          {
            v99 = 12;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v113)
              v99 = 0;
            v98 = &v113[v99];
          }
          if (v57 >= 0xA)
          {
            if (v51 >= v98 + 1 || (unint64_t)v98 >= v47 + (v49 & 0xFFFFFFFFFFFFFFF8) + 8 * v57)
            {
              v51 += v57 & 0xFFFFFFFFFFFFFFFCLL;
              v100 = v57 & 3;
              v101 = vld1q_dup_f64((const double *)v98);
              v102 = (float64x2_t *)(v47 + 8 * v50 + 16);
              v103 = v57 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v102[-1] = v101;
                *v102 = v101;
                v102 += 2;
                v103 -= 4;
              }
              while (v103);
              if (v57 == (v57 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_98;
            }
            else
            {
              v100 = v57;
            }
          }
          else
          {
            v100 = v57;
          }
          do
          {
            *v51++ = *v98;
            --v100;
          }
          while (v100);
LABEL_98:
          v26 = *(_QWORD *)(result + 24) - 96;
          v4 = v108;
          v7 = v109;
          v6 = v110;
          goto LABEL_99;
        }
      }
    }
    else
    {
      v61 = *(uint64_t **)(result + 24);
    }
    do
      *v61++ = v113[0];
    while (v61 != v58);
    goto LABEL_73;
  }
  return result;
}

uint64_t sub_20F9134EC(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int8x16_t v60;
  unint64_t v61;
  int8x16_t v62;
  unint64_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  unint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  _OWORD *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  _OWORD *v103;
  size_t v104;
  uint64_t *v105;
  _BYTE *v106;
  BOOL v107;
  uint64_t v108;
  int64x2_t v109;
  int64x2_t *v110;
  uint64_t v111;
  int64_t v112;
  uint64_t v113;
  int64x2_t *v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  __int128 *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  float64x2_t v131;
  float64x2_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141[2];
  uint64_t v142[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v134 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v140 = result;
    v137 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = v134 + 6 * v6;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v15 = v11 + 4;
    v16 = v11 + 5;
    v138 = v10;
    v139 = v6;
    while (1)
    {
      v20 = *(_QWORD *)(v10 + 8 * v9);
      if (v20 != -1)
      {
        v21 = (int8x16_t *)(*v7 + 8 * v20);
        v22 = v4 + 4 * v9;
        v23 = 0;
        v24 = 0;
        if (v11 < v22)
          goto LABEL_12;
LABEL_11:
        v24 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v73 = *(_QWORD *)(result + 80);
      if (!v73)
        break;
      v75 = *(_QWORD *)(result + 48);
      v74 = *(_QWORD *)(result + 56);
      v76 = ((v74 - v75) << 6) - 1;
      v77 = *(_QWORD *)(result + 72);
      if (v74 == v75)
        v76 = 0;
      v21 = (int8x16_t *)(*(_QWORD *)(result + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v75 + (((unint64_t)(v77 + v73 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v77 + v73 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v73 - 1;
      if ((unint64_t)(v76 - (v73 + v77) + 1) >= 0x400)
      {
        operator delete(*(void **)(v74 - 8));
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v140;
        *(_QWORD *)(v140 + 56) -= 8;
      }
LABEL_123:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v21->i64 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v22 = v4 + 4 * v9;
      v23 = 0;
      v24 = 0;
      if (v11 >= v22)
        goto LABEL_11;
LABEL_12:
      v25 = v22 + 1;
      if (v22 + 1 <= v11)
      {
        v23 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v26 = v22 + 2;
        v27 = 0;
        v28 = 0;
        if (v22 + 2 > v11)
        {
LABEL_14:
          v29 = v22 + 3;
          if (v22 + 3 > v11)
            goto LABEL_15;
          goto LABEL_39;
        }
      }
      else
      {
        v26 = v22 + 2;
        v27 = 0;
        v28 = 0;
        if (v22 + 2 > v11)
          goto LABEL_14;
      }
      v28 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v29 = v22 + 3;
      if (v22 + 3 > v11)
      {
LABEL_15:
        v30 = 0;
        v31 = 0;
        if (v12 < v22)
          goto LABEL_16;
        goto LABEL_40;
      }
LABEL_39:
      v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v30 = 0;
      v31 = 0;
      if (v12 < v22)
      {
LABEL_16:
        if (v25 > v12)
          goto LABEL_17;
        goto LABEL_41;
      }
LABEL_40:
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v25 > v12)
      {
LABEL_17:
        v32 = 0;
        v33 = 0;
        if (v26 > v12)
          goto LABEL_18;
        goto LABEL_42;
      }
LABEL_41:
      v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v32 = 0;
      v33 = 0;
      if (v26 > v12)
      {
LABEL_18:
        if (v29 > v12)
          goto LABEL_19;
        goto LABEL_43;
      }
LABEL_42:
      v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v29 > v12)
      {
LABEL_19:
        v34 = 0;
        v35 = 0;
        if (v13 < v22)
          goto LABEL_20;
        goto LABEL_44;
      }
LABEL_43:
      v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v34 = 0;
      v35 = 0;
      if (v13 < v22)
      {
LABEL_20:
        if (v25 > v13)
          goto LABEL_21;
        goto LABEL_45;
      }
LABEL_44:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v25 > v13)
      {
LABEL_21:
        v36 = 0;
        v37 = 0;
        if (v26 > v13)
          goto LABEL_22;
        goto LABEL_46;
      }
LABEL_45:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v36 = 0;
      v37 = 0;
      if (v26 > v13)
      {
LABEL_22:
        if (v29 > v13)
          goto LABEL_23;
        goto LABEL_47;
      }
LABEL_46:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v29 > v13)
      {
LABEL_23:
        v38 = 0;
        v39 = 0;
        if (v14 < v22)
          goto LABEL_24;
        goto LABEL_48;
      }
LABEL_47:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v38 = 0;
      v39 = 0;
      if (v14 < v22)
      {
LABEL_24:
        if (v25 > v14)
          goto LABEL_25;
        goto LABEL_49;
      }
LABEL_48:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v25 > v14)
      {
LABEL_25:
        v40 = 0;
        v41 = 0;
        if (v26 > v14)
          goto LABEL_26;
        goto LABEL_50;
      }
LABEL_49:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v40 = 0;
      v41 = 0;
      if (v26 > v14)
      {
LABEL_26:
        if (v29 > v14)
          goto LABEL_27;
        goto LABEL_51;
      }
LABEL_50:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v29 > v14)
      {
LABEL_27:
        v42 = 0;
        v43 = 0;
        if (v15 < v22)
          goto LABEL_28;
        goto LABEL_52;
      }
LABEL_51:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v42 = 0;
      v43 = 0;
      if (v15 < v22)
      {
LABEL_28:
        if (v25 > v15)
          goto LABEL_29;
        goto LABEL_53;
      }
LABEL_52:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v25 > v15)
      {
LABEL_29:
        v44 = 0;
        v45 = 0;
        if (v26 > v15)
          goto LABEL_30;
        goto LABEL_54;
      }
LABEL_53:
      v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v44 = 0;
      v45 = 0;
      if (v26 > v15)
      {
LABEL_30:
        if (v29 > v15)
          goto LABEL_31;
        goto LABEL_55;
      }
LABEL_54:
      v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v29 > v15)
      {
LABEL_31:
        v46 = 0;
        v47 = 0;
        if (v16 < v22)
          goto LABEL_32;
        goto LABEL_56;
      }
LABEL_55:
      v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v46 = 0;
      v47 = 0;
      if (v16 < v22)
      {
LABEL_32:
        if (v25 <= v16)
          goto LABEL_57;
        goto LABEL_33;
      }
LABEL_56:
      v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      if (v25 <= v16)
      {
LABEL_57:
        v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v48 = 0;
        v49 = 0;
        if (v26 > v16)
          goto LABEL_35;
LABEL_34:
        v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        goto LABEL_35;
      }
LABEL_33:
      v48 = 0;
      v49 = 0;
      if (v26 <= v16)
        goto LABEL_34;
LABEL_35:
      v50.i64[0] = v24;
      v50.i64[1] = v23;
      v51.i64[0] = v28;
      v51.i64[1] = v27;
      v52.i64[0] = v31;
      v52.i64[1] = v30;
      v53.i64[0] = v33;
      v53.i64[1] = v32;
      v54.i64[0] = v35;
      v54.i64[1] = v34;
      v55.i64[0] = v37;
      v55.i64[1] = v36;
      v56.i64[0] = v39;
      v57 = vextq_s8(v50, v50, 8uLL).u64[0];
      v56.i64[1] = v38;
      v58 = vextq_s8(v51, v51, 8uLL).u64[0];
      v60.i64[0] = v41;
      v59 = vextq_s8(v52, v52, 8uLL).u64[0];
      v60.i64[1] = v40;
      v61 = vextq_s8(v53, v53, 8uLL).u64[0];
      v62.i64[0] = v43;
      v62.i64[1] = v42;
      v63 = vextq_s8(v54, v54, 8uLL).u64[0];
      v64 = vextq_s8(v55, v55, 8uLL).u64[0];
      v65.i64[0] = v45;
      v66 = vextq_s8(v56, v56, 8uLL).u64[0];
      v65.i64[1] = v44;
      v67 = vextq_s8(v60, v60, 8uLL).u64[0];
      v68.i64[0] = v47;
      v69 = vextq_s8(v62, v62, 8uLL).u64[0];
      v68.i64[1] = v46;
      v70 = vextq_s8(v65, v65, 8uLL).u64[0];
      v71.i64[0] = v49;
      v72 = vextq_s8(v68, v68, 8uLL).u64[0];
      if (v29 <= v16)
        v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v71.i64[1] = v48;
      v17.i64[0] = v45;
      v17.i64[1] = v70;
      v18.i64[0] = v51.i64[0];
      v18.i64[1] = v58;
      v50.i64[1] = v57;
      *v21 = v50;
      v21[1] = v18;
      v19.i64[0] = v33;
      v19.i64[1] = v61;
      v18.i64[0] = v52.i64[0];
      v18.i64[1] = v59;
      v21[2] = v18;
      v21[3] = v19;
      v18.i64[0] = v37;
      v18.i64[1] = v64;
      v19.i64[0] = v35;
      v19.i64[1] = v63;
      v21[4] = v19;
      v21[5] = v18;
      v19.i64[0] = v60.i64[0];
      v19.i64[1] = v67;
      v18.i64[0] = v39;
      v18.i64[1] = v66;
      v21[6] = v18;
      v21[7] = v19;
      v18.i64[0] = v62.i64[0];
      v18.i64[1] = v69;
      v21[8] = v18;
      v21[9] = v17;
      v19.i64[0] = v47;
      v19.i64[1] = v72;
      v21[10] = v19;
      v21[11] = v71;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v141[0] = 0;
    v78 = *(_QWORD *)(result + 16);
    v79 = *(int64x2_t **)(result + 24);
    v80 = (uint64_t)v79->i64 - v78;
    v81 = (uint64_t)((uint64_t)v79->i64 - v78) >> 3;
    v82 = (uint64_t *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
    v83 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v83 - (_QWORD)v79) < 0xC0)
    {
      v84 = v81 + 24;
      if ((unint64_t)(v81 + 24) >> 61)
        sub_20E867F44();
      v85 = v83 - v78;
      if (v85 >> 2 > v84)
        v84 = v85 >> 2;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
        v84 = 0x1FFFFFFFFFFFFFFFLL;
      v136 = v84;
      if (v84)
      {
        if (v84 >> 61)
          sub_20E877A38();
        v86 = operator new(8 * v84);
        result = v140;
        v81 = (uint64_t)((uint64_t)v79->i64 - v78) >> 3;
      }
      else
      {
        v86 = 0;
      }
      v93 = &v86[8 * v81];
      v93[10] = 0u;
      v93[11] = 0u;
      v93[8] = 0u;
      v93[9] = 0u;
      v93[6] = 0u;
      v93[7] = 0u;
      v93[4] = 0u;
      v93[5] = 0u;
      v93[2] = 0u;
      v93[3] = 0u;
      *v93 = 0u;
      v93[1] = 0u;
      if ((int64x2_t *)v78 == v79)
      {
        v95 = &v86[8 * v81];
      }
      else
      {
        if ((unint64_t)(v80 - 8) >= 0x68)
        {
          v94 = (char *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
          v95 = &v86[8 * v81];
          if (v78 + (v80 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v86[v80 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v96 = ((unint64_t)(v80 - 8) >> 3) + 1;
            v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
            v94 = (char *)&v82[v97 / 0xFFFFFFFFFFFFFFF8];
            v95 = (char *)v93 - v97;
            v98 = &v86[8 * v81 - 16];
            v99 = (__int128 *)(v78 + 8 * v81 - 16);
            v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v101 = *v99;
              *(v98 - 1) = *(v99 - 1);
              *v98 = v101;
              v98 -= 2;
              v99 -= 2;
              v100 -= 4;
            }
            while (v100);
            if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_87;
          }
        }
        else
        {
          v94 = (char *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
          v95 = &v86[8 * v81];
        }
        do
        {
          v102 = *((_QWORD *)v94 - 1);
          v94 -= 8;
          *((_QWORD *)v95 - 1) = v102;
          v95 -= 8;
        }
        while (v94 != (char *)v78);
      }
LABEL_87:
      v103 = v93 + 12;
      v104 = (char *)v79 - (char *)v82;
      if (v104)
      {
        v105 = v82;
        v106 = v86;
        memmove(v93 + 12, v105, v104);
        v86 = v106;
        result = v140;
      }
      *(_QWORD *)(result + 16) = v95;
      *(_QWORD *)(result + 24) = (char *)v103 + v104;
      *(_QWORD *)(result + 32) = &v86[8 * v136];
      v4 = a3;
      v13 = v11 + 2;
      v12 = v11 + 1;
      v14 = v11 + 3;
      if (v78)
      {
        operator delete((void *)v78);
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v140;
      }
      goto LABEL_122;
    }
    v87 = (char *)v79 - (char *)v82;
    if ((unint64_t)((char *)v79 - (char *)v82) > 0xBF)
    {
      v89 = *(uint64_t **)(result + 24);
      v88 = 24;
      goto LABEL_98;
    }
    v88 = v87 >> 3;
    v89 = &v79->i64[24 - (v87 >> 3)];
    v90 = v87 & 0xFFFFFFFFFFFFFFF8;
    v91 = 184 - v90;
    if (184 - v90 >= 0x68)
    {
      v107 = v141 < (uint64_t *)((char *)v79[12].i64 - v90);
      if (v79 >= (int64x2_t *)v142 || (v92 = *(uint64_t **)(result + 24), !v107))
      {
        v108 = (v91 >> 3) + 1;
        v92 = &v79->i64[v108 & 0x3FFFFFFFFFFFFFFCLL];
        v109 = vdupq_lane_s64(v141[0], 0);
        v110 = v79 + 1;
        v111 = v108 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110[-1] = v109;
          *v110 = v109;
          v110 += 2;
          v111 -= 4;
        }
        while (v111);
        if (v108 == (v108 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_97:
          *(_QWORD *)(result + 24) = v89;
          if (v79 == (int64x2_t *)v82)
            goto LABEL_122;
LABEL_98:
          v112 = (char *)v89 - (char *)(v82 + 24);
          v113 = v112 >> 3;
          v114 = (int64x2_t *)(v89 - 24);
          v115 = v89;
          if (v89 - 24 < (uint64_t *)v79)
          {
            v116 = (v80 & 0xFFFFFFFFFFFFFFF8) + v112;
            v117 = v78 + v116 + 8;
            if ((unint64_t)v79 > v117)
              v117 = (unint64_t)v79;
            v118 = v117 + ~v78 - v116;
            if (v118 >= 0x58)
            {
              v119 = (v118 >> 3) + 1;
              v120 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              v114 = (int64x2_t *)((char *)v114 + v120 * 8);
              v115 = &v89[v120];
              v121 = v89 + 2;
              v122 = (__int128 *)(v78 + 8 * v113 + 8 * v81 + 16);
              v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v124 = *v122;
                *(v121 - 1) = *(v122 - 1);
                *v121 = v124;
                v121 += 2;
                v122 += 2;
                v123 -= 4;
              }
              while (v123);
              if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_107;
            }
            else
            {
              v115 = v89;
            }
            do
            {
              v125 = v114->i64[0];
              v114 = (int64x2_t *)((char *)v114 + 8);
              *v115++ = v125;
            }
            while (v114 < v79);
          }
LABEL_107:
          *(_QWORD *)(result + 24) = v115;
          if (v89 != v82 + 24)
          {
            v126 = v4;
            v127 = v88;
            memmove(&v89[-v113], (const void *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8)), v112);
            v88 = v127;
            v4 = v126;
            v81 = (uint64_t)((uint64_t)v79->i64 - v78) >> 3;
            v14 = v11 + 3;
            v13 = v11 + 2;
            v12 = v11 + 1;
            result = v140;
          }
          v128 = v141;
          if (v82 <= v141)
          {
            v129 = 24;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v141)
              v129 = 0;
            v128 = &v141[v129];
          }
          if (v88 >= 0xA)
          {
            if (v82 >= v128 + 1
              || (unint64_t)v128 >= v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8) + 8 * v88)
            {
              v82 += v88 & 0xFFFFFFFFFFFFFFFCLL;
              v130 = v88 & 3;
              v131 = vld1q_dup_f64((const double *)v128);
              v132 = (float64x2_t *)(v78 + 8 * v81 + 16);
              v133 = v88 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v132[-1] = v131;
                *v132 = v131;
                v132 += 2;
                v133 -= 4;
              }
              while (v133);
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_122;
            }
            else
            {
              v130 = v88;
            }
          }
          else
          {
            v130 = v88;
          }
          do
          {
            *v82++ = *v128;
            --v130;
          }
          while (v130);
LABEL_122:
          v21 = (int8x16_t *)(*(_QWORD *)(result + 24) - 192);
          v10 = v138;
          v6 = v139;
          v7 = v137;
          goto LABEL_123;
        }
      }
    }
    else
    {
      v92 = *(uint64_t **)(result + 24);
    }
    do
      *v92++ = v141[0];
    while (v92 != v89);
    goto LABEL_97;
  }
  return result;
}

uint64_t sub_20F9140DC(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  int8x16_t v67;
  unint64_t v68;
  int8x16_t v69;
  unint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  unint64_t v73;
  int8x16_t v74;
  unint64_t v75;
  unint64_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  unint64_t v80;
  int8x16_t v81;
  unint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  uint64_t v85;
  unint64_t v86;
  int8x16_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int64x2_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  _OWORD *v108;
  char *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  _OWORD *v118;
  size_t v119;
  uint64_t *v120;
  _BYTE *v121;
  BOOL v122;
  uint64_t v123;
  int64x2_t v124;
  int64x2_t *v125;
  uint64_t v126;
  int64_t v127;
  uint64_t v128;
  int64x2_t *v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  __int128 *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  float64x2_t v146;
  float64x2_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163[2];
  uint64_t v164[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v149 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v156 = result;
    v153 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = 9 * v6 + v149;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v15 = v11 + 4;
    v16 = v11 + 5;
    v17 = v11 + 6;
    v18 = v11 + 7;
    v19 = v11 + 8;
    v154 = v10;
    v155 = v6;
    while (1)
    {
      v23 = *(_QWORD *)(v10 + 8 * v9);
      if (v23 != -1)
      {
        v24 = (int8x16_t *)(*v7 + 8 * v23);
        v25 = v4 + 4 * v9;
        v26 = 0;
        v27 = 0;
        if (v11 < v25)
          goto LABEL_12;
LABEL_11:
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v88 = *(_QWORD *)(result + 80);
      if (!v88)
        break;
      v90 = *(_QWORD *)(result + 48);
      v89 = *(_QWORD *)(result + 56);
      v91 = ((v89 - v90) << 6) - 1;
      v92 = *(_QWORD *)(result + 72);
      if (v89 == v90)
        v91 = 0;
      v24 = (int8x16_t *)(*(_QWORD *)(result + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v90 + (((unint64_t)(v92 + v88 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v92 + v88 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v88 - 1;
      if ((unint64_t)(v91 - (v88 + v92) + 1) >= 0x400)
      {
        operator delete(*(void **)(v89 - 8));
        v17 = v11 + 6;
        v16 = v11 + 5;
        v15 = v11 + 4;
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v156;
        *(_QWORD *)(v156 + 56) -= 8;
      }
LABEL_148:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v24->i64 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v25 = v4 + 4 * v9;
      v26 = 0;
      v27 = 0;
      if (v11 >= v25)
        goto LABEL_11;
LABEL_12:
      v28 = v25 + 1;
      if (v25 + 1 <= v11)
      {
        v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
        {
LABEL_14:
          v32 = v25 + 3;
          if (v25 + 3 > v11)
            goto LABEL_15;
          goto LABEL_52;
        }
      }
      else
      {
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
          goto LABEL_14;
      }
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v32 = v25 + 3;
      if (v25 + 3 > v11)
      {
LABEL_15:
        v33 = 0;
        v34 = 0;
        if (v12 < v25)
          goto LABEL_16;
        goto LABEL_53;
      }
LABEL_52:
      v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v33 = 0;
      v34 = 0;
      if (v12 < v25)
      {
LABEL_16:
        if (v28 > v12)
          goto LABEL_17;
        goto LABEL_54;
      }
LABEL_53:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v28 > v12)
      {
LABEL_17:
        v35 = 0;
        v36 = 0;
        if (v29 > v12)
          goto LABEL_18;
        goto LABEL_55;
      }
LABEL_54:
      v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v35 = 0;
      v36 = 0;
      if (v29 > v12)
      {
LABEL_18:
        if (v32 > v12)
          goto LABEL_19;
        goto LABEL_56;
      }
LABEL_55:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v32 > v12)
      {
LABEL_19:
        v37 = 0;
        v38 = 0;
        if (v13 < v25)
          goto LABEL_20;
        goto LABEL_57;
      }
LABEL_56:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v37 = 0;
      v38 = 0;
      if (v13 < v25)
      {
LABEL_20:
        if (v28 > v13)
          goto LABEL_21;
        goto LABEL_58;
      }
LABEL_57:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v28 > v13)
      {
LABEL_21:
        v39 = 0;
        v40 = 0;
        if (v29 > v13)
          goto LABEL_22;
        goto LABEL_59;
      }
LABEL_58:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v39 = 0;
      v40 = 0;
      if (v29 > v13)
      {
LABEL_22:
        if (v32 > v13)
          goto LABEL_23;
        goto LABEL_60;
      }
LABEL_59:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v32 > v13)
      {
LABEL_23:
        v41 = 0;
        v42 = 0;
        if (v14 < v25)
          goto LABEL_24;
        goto LABEL_61;
      }
LABEL_60:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v41 = 0;
      v42 = 0;
      if (v14 < v25)
      {
LABEL_24:
        if (v28 > v14)
          goto LABEL_25;
        goto LABEL_62;
      }
LABEL_61:
      v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v28 > v14)
      {
LABEL_25:
        v43 = 0;
        v44 = 0;
        if (v29 > v14)
          goto LABEL_26;
        goto LABEL_63;
      }
LABEL_62:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v43 = 0;
      v44 = 0;
      if (v29 > v14)
      {
LABEL_26:
        if (v32 > v14)
          goto LABEL_27;
        goto LABEL_64;
      }
LABEL_63:
      v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v32 > v14)
      {
LABEL_27:
        v45 = 0;
        v46 = 0;
        if (v15 < v25)
          goto LABEL_28;
        goto LABEL_65;
      }
LABEL_64:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v45 = 0;
      v46 = 0;
      if (v15 < v25)
      {
LABEL_28:
        if (v28 > v15)
          goto LABEL_29;
        goto LABEL_66;
      }
LABEL_65:
      v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v28 > v15)
      {
LABEL_29:
        v47 = 0;
        v48 = 0;
        if (v29 > v15)
          goto LABEL_30;
        goto LABEL_67;
      }
LABEL_66:
      v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v47 = 0;
      v48 = 0;
      if (v29 > v15)
      {
LABEL_30:
        if (v32 > v15)
          goto LABEL_31;
        goto LABEL_68;
      }
LABEL_67:
      v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v32 > v15)
      {
LABEL_31:
        v49 = 0;
        v50 = 0;
        if (v16 < v25)
          goto LABEL_32;
        goto LABEL_69;
      }
LABEL_68:
      v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v49 = 0;
      v50 = 0;
      if (v16 < v25)
      {
LABEL_32:
        if (v28 > v16)
          goto LABEL_33;
        goto LABEL_70;
      }
LABEL_69:
      v50 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      if (v28 > v16)
      {
LABEL_33:
        v51 = 0;
        v52 = 0;
        if (v29 > v16)
          goto LABEL_34;
        goto LABEL_71;
      }
LABEL_70:
      v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v51 = 0;
      v52 = 0;
      if (v29 > v16)
      {
LABEL_34:
        if (v32 > v16)
          goto LABEL_35;
        goto LABEL_72;
      }
LABEL_71:
      v52 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      if (v32 > v16)
      {
LABEL_35:
        v53 = 0;
        v54 = 0;
        if (v17 < v25)
          goto LABEL_36;
        goto LABEL_73;
      }
LABEL_72:
      v51 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v53 = 0;
      v54 = 0;
      if (v17 < v25)
      {
LABEL_36:
        if (v28 > v17)
          goto LABEL_37;
        goto LABEL_74;
      }
LABEL_73:
      v54 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      if (v28 > v17)
      {
LABEL_37:
        v55 = 0;
        v56 = 0;
        if (v29 > v17)
          goto LABEL_39;
LABEL_38:
        v56 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        goto LABEL_39;
      }
LABEL_74:
      v53 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v55 = 0;
      v56 = 0;
      if (v29 <= v17)
        goto LABEL_38;
LABEL_39:
      v57.i64[0] = v27;
      v57.i64[1] = v26;
      v58.i64[0] = v31;
      v58.i64[1] = v30;
      v59.i64[0] = v34;
      v59.i64[1] = v33;
      v60.i64[0] = v36;
      v60.i64[1] = v35;
      v61.i64[0] = v38;
      v61.i64[1] = v37;
      v62.i64[0] = v40;
      v62.i64[1] = v39;
      v63.i64[0] = v42;
      v63.i64[1] = v41;
      v65.i64[0] = v44;
      v64 = vextq_s8(v58, v58, 8uLL).u64[0];
      v65.i64[1] = v43;
      v159 = vextq_s8(v57, v57, 8uLL).u64[0];
      v160 = vextq_s8(v59, v59, 8uLL).u64[0];
      v67.i64[0] = v46;
      v66 = vextq_s8(v60, v60, 8uLL).u64[0];
      v67.i64[1] = v45;
      v69.i64[0] = v48;
      v157 = vextq_s8(v61, v61, 8uLL).u64[0];
      v68 = vextq_s8(v62, v62, 8uLL).u64[0];
      v69.i64[1] = v47;
      v158 = vextq_s8(v63, v63, 8uLL).u64[0];
      v71.i64[0] = v50;
      v70 = vextq_s8(v65, v65, 8uLL).u64[0];
      v71.i64[1] = v49;
      v72 = vextq_s8(v67, v67, 8uLL).u64[0];
      v74.i64[0] = v52;
      v73 = vextq_s8(v69, v69, 8uLL).u64[0];
      v74.i64[1] = v51;
      v77.i64[0] = v54;
      v75 = vextq_s8(v71, v71, 8uLL).u64[0];
      v76 = vextq_s8(v74, v74, 8uLL).u64[0];
      v77.i64[1] = v53;
      v162 = vextq_s8(v77, v77, 8uLL).u64[0];
      if (v32 <= v17)
        v55 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v78.i64[0] = v56;
      v78.i64[1] = v55;
      v161 = vextq_s8(v78, v78, 8uLL).u64[0];
      if (v18 >= v25)
      {
        v79.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
        if (v28 > v18)
        {
LABEL_43:
          v80 = vextq_s8((int8x16_t)v79.u64[0], (int8x16_t)v79.u64[0], 8uLL).u64[0];
          if (v29 > v18)
            goto LABEL_44;
          goto LABEL_78;
        }
      }
      else
      {
        v79.i64[0] = 0;
        if (v28 > v18)
          goto LABEL_43;
      }
      v79.i64[1] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v80 = vextq_s8(v79, v79, 8uLL).u64[0];
      if (v29 > v18)
      {
LABEL_44:
        v81.i64[0] = 0;
        if (v32 > v18)
          goto LABEL_45;
        goto LABEL_79;
      }
LABEL_78:
      v81.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      if (v32 > v18)
      {
LABEL_45:
        v82 = vextq_s8((int8x16_t)v81.u64[0], (int8x16_t)v81.u64[0], 8uLL).u64[0];
        v83 = 0;
        if (v19 < v25)
          goto LABEL_46;
        goto LABEL_80;
      }
LABEL_79:
      v81.i64[1] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v82 = vextq_s8(v81, v81, 8uLL).u64[0];
      v83 = 0;
      if (v19 < v25)
      {
LABEL_46:
        v84.i64[0] = 0;
        if (v28 > v19)
          goto LABEL_47;
        goto LABEL_81;
      }
LABEL_80:
      v84.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      if (v28 > v19)
      {
LABEL_47:
        v85 = 0;
        if (v29 > v19)
          goto LABEL_48;
        goto LABEL_82;
      }
LABEL_81:
      v83 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      v85 = 0;
      if (v29 > v19)
      {
LABEL_48:
        v84.i64[1] = v83;
        v86 = vextq_s8(v84, v84, 8uLL).u64[0];
        v87.i64[0] = 0;
        if (v32 <= v19)
          goto LABEL_83;
        goto LABEL_8;
      }
LABEL_82:
      v84.i64[1] = v83;
      v86 = vextq_s8(v84, v84, 8uLL).u64[0];
      v87.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      if (v32 <= v19)
LABEL_83:
        v85 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
LABEL_8:
      v87.i64[1] = v85;
      v20.i64[0] = v81.i64[0];
      v20.i64[1] = v82;
      v21.i64[0] = v58.i64[0];
      v21.i64[1] = v64;
      v57.i64[1] = v159;
      *v24 = v57;
      v24[1] = v21;
      v22.i64[0] = v60.i64[0];
      v22.i64[1] = v66;
      v21.i64[0] = v59.i64[0];
      v21.i64[1] = v160;
      v24[2] = v21;
      v24[3] = v22;
      v21.i64[0] = v62.i64[0];
      v21.i64[1] = v68;
      v22.i64[0] = v61.i64[0];
      v22.i64[1] = v157;
      v24[4] = v22;
      v24[5] = v21;
      v22.i64[0] = v65.i64[0];
      v22.i64[1] = v70;
      v21.i64[0] = v63.i64[0];
      v21.i64[1] = v158;
      v24[6] = v21;
      v24[7] = v22;
      v21.i64[0] = v69.i64[0];
      v21.i64[1] = v73;
      v22.i64[0] = v67.i64[0];
      v22.i64[1] = v72;
      v24[8] = v22;
      v24[9] = v21;
      v22.i64[0] = v74.i64[0];
      v22.i64[1] = v76;
      v21.i64[0] = v71.i64[0];
      v21.i64[1] = v75;
      v24[10] = v21;
      v24[11] = v22;
      v21.i64[0] = v78.i64[0];
      v21.i64[1] = v161;
      v22.i64[0] = v77.i64[0];
      v22.i64[1] = v162;
      v24[12] = v22;
      v24[13] = v21;
      v22.i64[0] = v79.i64[0];
      v22.i64[1] = v80;
      v24[14] = v22;
      v24[15] = v20;
      v22.i64[0] = v84.i64[0];
      v22.i64[1] = v86;
      v24[16] = v22;
      v24[17] = v87;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v163[0] = 0;
    v93 = *(_QWORD *)(result + 16);
    v94 = *(int64x2_t **)(result + 24);
    v95 = (uint64_t)v94->i64 - v93;
    v96 = (uint64_t)((uint64_t)v94->i64 - v93) >> 3;
    v97 = (uint64_t *)(v93 + (((unint64_t)v94 - v93) & 0xFFFFFFFFFFFFFFF8));
    v98 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v98 - (_QWORD)v94) < 0x120)
    {
      v99 = v96 + 36;
      if ((unint64_t)(v96 + 36) >> 61)
        sub_20E867F44();
      v100 = v98 - v93;
      if (v100 >> 2 > v99)
        v99 = v100 >> 2;
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
        v99 = 0x1FFFFFFFFFFFFFFFLL;
      v151 = v99;
      if (v99)
      {
        if (v99 >> 61)
          sub_20E877A38();
        v101 = operator new(8 * v99);
        result = v156;
      }
      else
      {
        v101 = 0;
      }
      v108 = &v101[8 * v96];
      v108[16] = 0u;
      v108[17] = 0u;
      v108[14] = 0u;
      v108[15] = 0u;
      v108[12] = 0u;
      v108[13] = 0u;
      v108[10] = 0u;
      v108[11] = 0u;
      v108[8] = 0u;
      v108[9] = 0u;
      v108[6] = 0u;
      v108[7] = 0u;
      v108[4] = 0u;
      v108[5] = 0u;
      v108[2] = 0u;
      v108[3] = 0u;
      *v108 = 0u;
      v108[1] = 0u;
      if ((int64x2_t *)v93 == v94)
      {
        v110 = &v101[8 * v96];
      }
      else
      {
        if ((unint64_t)(v95 - 8) >= 0x68)
        {
          v109 = (char *)(v93 + (((unint64_t)v94 - v93) & 0xFFFFFFFFFFFFFFF8));
          v110 = &v101[8 * v96];
          if (v93 + (v95 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v101[v95 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v111 = ((unint64_t)(v95 - 8) >> 3) + 1;
            v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
            v109 = (char *)&v97[v112 / 0xFFFFFFFFFFFFFFF8];
            v110 = (char *)v108 - v112;
            v113 = &v101[8 * v96 - 16];
            v114 = (__int128 *)(v93 + 8 * v96 - 16);
            v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v114;
              *(v113 - 1) = *(v114 - 1);
              *v113 = v116;
              v113 -= 2;
              v114 -= 2;
              v115 -= 4;
            }
            while (v115);
            if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_112;
          }
        }
        else
        {
          v109 = (char *)(v93 + (((unint64_t)v94 - v93) & 0xFFFFFFFFFFFFFFF8));
          v110 = &v101[8 * v96];
        }
        do
        {
          v117 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *((_QWORD *)v110 - 1) = v117;
          v110 -= 8;
        }
        while (v109 != (char *)v93);
      }
LABEL_112:
      v118 = v108 + 18;
      v119 = (char *)v94 - (char *)v97;
      if (v119)
      {
        v120 = v97;
        v121 = v101;
        memmove(v108 + 18, v120, v119);
        v101 = v121;
        result = v156;
      }
      *(_QWORD *)(result + 16) = v110;
      *(_QWORD *)(result + 24) = (char *)v118 + v119;
      *(_QWORD *)(result + 32) = &v101[8 * v151];
      v4 = a3;
      v13 = v11 + 2;
      v12 = v11 + 1;
      v15 = v11 + 4;
      v14 = v11 + 3;
      v17 = v11 + 6;
      v16 = v11 + 5;
      if (v93)
      {
        operator delete((void *)v93);
        v17 = v11 + 6;
        v16 = v11 + 5;
        v15 = v11 + 4;
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        result = v156;
      }
      goto LABEL_147;
    }
    v102 = (char *)v94 - (char *)v97;
    if ((unint64_t)((char *)v94 - (char *)v97) > 0x11F)
    {
      v104 = *(uint64_t **)(result + 24);
      v103 = 36;
      goto LABEL_123;
    }
    v103 = v102 >> 3;
    v104 = &v94->i64[36 - (v102 >> 3)];
    v105 = v102 & 0xFFFFFFFFFFFFFFF8;
    v106 = 280 - v105;
    if (280 - v105 >= 0x68)
    {
      v122 = v163 < (uint64_t *)((char *)v94[18].i64 - v105);
      if (v94 >= (int64x2_t *)v164 || (v107 = *(uint64_t **)(result + 24), !v122))
      {
        v123 = (v106 >> 3) + 1;
        v107 = &v94->i64[v123 & 0x3FFFFFFFFFFFFFFCLL];
        v124 = vdupq_lane_s64(v163[0], 0);
        v125 = v94 + 1;
        v126 = v123 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v125[-1] = v124;
          *v125 = v124;
          v125 += 2;
          v126 -= 4;
        }
        while (v126);
        if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_122:
          *(_QWORD *)(result + 24) = v104;
          if (v94 == (int64x2_t *)v97)
            goto LABEL_147;
LABEL_123:
          v127 = (char *)v104 - (char *)(v97 + 36);
          v128 = v127 >> 3;
          v129 = (int64x2_t *)(v104 - 36);
          v130 = v104;
          if (v104 - 36 < (uint64_t *)v94)
          {
            v131 = (v95 & 0xFFFFFFFFFFFFFFF8) + v127;
            v132 = v93 + v131 + 8;
            if ((unint64_t)v94 > v132)
              v132 = (unint64_t)v94;
            v133 = v132 + ~v93 - v131;
            if (v133 >= 0x58)
            {
              v152 = v103;
              v134 = (v133 >> 3) + 1;
              v135 = v134 & 0x3FFFFFFFFFFFFFFCLL;
              v129 = (int64x2_t *)((char *)v129 + v135 * 8);
              v130 = &v104[v135];
              v136 = v104 + 2;
              v137 = (__int128 *)(v93 + 8 * v128 + 8 * v96 + 16);
              v138 = v134 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v139 = *v137;
                *(v136 - 1) = *(v137 - 1);
                *v136 = v139;
                v136 += 2;
                v137 += 2;
                v138 -= 4;
              }
              while (v138);
              v103 = v152;
              if (v134 == (v134 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_132;
            }
            else
            {
              v130 = v104;
            }
            do
            {
              v140 = v129->i64[0];
              v129 = (int64x2_t *)((char *)v129 + 8);
              *v130++ = v140;
            }
            while (v129 < v94);
          }
LABEL_132:
          *(_QWORD *)(result + 24) = v130;
          if (v104 != v97 + 36)
          {
            v141 = v4;
            v142 = v103;
            memmove(&v104[-v128], (const void *)(v93 + (((unint64_t)v94 - v93) & 0xFFFFFFFFFFFFFFF8)), v127);
            v103 = v142;
            v4 = v141;
            v17 = v11 + 6;
            v16 = v11 + 5;
            v15 = v11 + 4;
            v14 = v11 + 3;
            v13 = v11 + 2;
            v12 = v11 + 1;
            result = v156;
          }
          v143 = v163;
          if (v97 <= v163)
          {
            v144 = 36;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v163)
              v144 = 0;
            v143 = &v163[v144];
          }
          if (v103 >= 0xA)
          {
            if (v97 >= v143 + 1
              || (unint64_t)v143 >= v93 + (((unint64_t)v94 - v93) & 0xFFFFFFFFFFFFFFF8) + 8 * v103)
            {
              v97 += v103 & 0xFFFFFFFFFFFFFFFCLL;
              v145 = v103 & 3;
              v146 = vld1q_dup_f64((const double *)v143);
              v147 = (float64x2_t *)(v93 + 8 * v96 + 16);
              v148 = v103 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v147[-1] = v146;
                *v147 = v146;
                v147 += 2;
                v148 -= 4;
              }
              while (v148);
              if (v103 == (v103 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_147;
            }
            else
            {
              v145 = v103;
            }
          }
          else
          {
            v145 = v103;
          }
          do
          {
            *v97++ = *v143;
            --v145;
          }
          while (v145);
LABEL_147:
          v24 = (int8x16_t *)(*(_QWORD *)(result + 24) - 288);
          v10 = v154;
          v6 = v155;
          v7 = v153;
          goto LABEL_148;
        }
      }
    }
    else
    {
      v107 = *(uint64_t **)(result + 24);
    }
    do
      *v107++ = v163[0];
    while (v107 != v104);
    goto LABEL_122;
  }
  return result;
}

uint64_t sub_20F91501C(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _OWORD *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _OWORD *v72;
  size_t v73;
  uint64_t *v74;
  _BYTE *v75;
  BOOL v76;
  uint64_t v77;
  int64x2_t v78;
  int64x2_t *v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  int64x2_t *v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[2];
  uint64_t v111[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v103 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v109 = result;
    v106 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = 3 * v6 + v103;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v107 = v10;
    v108 = v6;
    while (1)
    {
      v24 = *(_QWORD *)(v10 + 8 * v9);
      if (v24 != -1)
      {
        v25 = *v7 + 8 * v24;
        v26 = v4 + 4 * v9;
        v27 = 0;
        v28 = 0;
        if (v11 < v26)
          goto LABEL_12;
LABEL_11:
        v28 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v42 = *(_QWORD *)(result + 80);
      if (!v42)
        break;
      v44 = *(_QWORD *)(result + 48);
      v43 = *(_QWORD *)(result + 56);
      v45 = ((v43 - v44) << 6) - 1;
      v46 = *(_QWORD *)(result + 72);
      if (v43 == v44)
        v45 = 0;
      v25 = *(_QWORD *)(result + 16)
          + 8
          * *(_QWORD *)(*(_QWORD *)(v44 + (((unint64_t)(v46 + v42 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v46 + v42 - 1) & 0x1FF));
      *(_QWORD *)(result + 80) = v42 - 1;
      if ((unint64_t)(v45 - (v42 + v46) + 1) >= 0x400)
      {
        operator delete(*(void **)(v43 - 8));
        result = v109;
        *(_QWORD *)(v109 + 56) -= 8;
      }
LABEL_99:
      *(_QWORD *)(v10 + 8 * v9) = (v25 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v26 = v4 + 4 * v9;
      v27 = 0;
      v28 = 0;
      if (v11 >= v26)
        goto LABEL_11;
LABEL_12:
      v29 = v26 + 1;
      if (v26 + 1 <= v11)
      {
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v30 = v26 + 2;
        v31 = 0;
        v32 = 0;
        if (v26 + 2 > v11)
        {
LABEL_14:
          v33 = v26 + 3;
          if (v26 + 3 > v11)
            goto LABEL_15;
          goto LABEL_26;
        }
      }
      else
      {
        v30 = v26 + 2;
        v31 = 0;
        v32 = 0;
        if (v26 + 2 > v11)
          goto LABEL_14;
      }
      v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v33 = v26 + 3;
      if (v26 + 3 > v11)
      {
LABEL_15:
        v34 = 0;
        v35 = 0;
        if (v12 < v26)
          goto LABEL_16;
        goto LABEL_27;
      }
LABEL_26:
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v34 = 0;
      v35 = 0;
      if (v12 < v26)
      {
LABEL_16:
        if (v29 > v12)
          goto LABEL_17;
        goto LABEL_28;
      }
LABEL_27:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v29 > v12)
      {
LABEL_17:
        v36 = 0;
        v37 = 0;
        if (v30 > v12)
          goto LABEL_18;
        goto LABEL_29;
      }
LABEL_28:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v36 = 0;
      v37 = 0;
      if (v30 > v12)
      {
LABEL_18:
        if (v33 > v12)
          goto LABEL_19;
        goto LABEL_30;
      }
LABEL_29:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v33 > v12)
      {
LABEL_19:
        v38 = 0;
        v39 = 0;
        if (v13 < v26)
          goto LABEL_20;
        goto LABEL_31;
      }
LABEL_30:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v38 = 0;
      v39 = 0;
      if (v13 < v26)
      {
LABEL_20:
        if (v29 > v13)
          goto LABEL_21;
        goto LABEL_32;
      }
LABEL_31:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v29 > v13)
      {
LABEL_21:
        v40 = 0;
        v41 = 0;
        if (v30 > v13)
          goto LABEL_22;
        goto LABEL_33;
      }
LABEL_32:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v40 = 0;
      v41 = 0;
      if (v30 > v13)
      {
LABEL_22:
        if (v33 <= v13)
          goto LABEL_34;
        goto LABEL_8;
      }
LABEL_33:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v33 <= v13)
LABEL_34:
        v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
LABEL_8:
      v14.i64[0] = v28;
      v14.i64[1] = v27;
      v15.i64[0] = v32;
      v15.i64[1] = v31;
      v16.i64[0] = v35;
      v16.i64[1] = v34;
      v17.i64[0] = v37;
      v17.i64[1] = v36;
      v18.i64[0] = v39;
      v18.i64[1] = v38;
      *(_QWORD *)&v19 = v41;
      *((_QWORD *)&v19 + 1) = v40;
      *(_QWORD *)&v20 = v39;
      *((_QWORD *)&v20 + 1) = vextq_s8(v18, v18, 8uLL).u64[0];
      *(_QWORD *)&v21 = v37;
      *((_QWORD *)&v21 + 1) = vextq_s8(v17, v17, 8uLL).u64[0];
      *(_QWORD *)&v22 = v35;
      *((_QWORD *)&v22 + 1) = vextq_s8(v16, v16, 8uLL).u64[0];
      *(_QWORD *)&v23 = v15.i64[0];
      *((_QWORD *)&v23 + 1) = vextq_s8(v15, v15, 8uLL).u64[0];
      v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
      *(int8x16_t *)v25 = v14;
      *(_OWORD *)(v25 + 16) = v23;
      *(_OWORD *)(v25 + 32) = v22;
      *(_OWORD *)(v25 + 48) = v21;
      *(_OWORD *)(v25 + 64) = v20;
      *(_OWORD *)(v25 + 80) = v19;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v110[0] = 0;
    v47 = *(_QWORD *)(result + 16);
    v48 = *(int64x2_t **)(result + 24);
    v49 = (uint64_t)v48->i64 - v47;
    v50 = (uint64_t)((uint64_t)v48->i64 - v47) >> 3;
    v51 = (uint64_t *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8));
    v52 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v52 - (_QWORD)v48) < 0x60)
    {
      v53 = v50 + 12;
      if ((unint64_t)(v50 + 12) >> 61)
        sub_20E867F44();
      v54 = v52 - v47;
      if (v54 >> 2 > v53)
        v53 = v54 >> 2;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      v105 = v53;
      if (v53)
      {
        if (v53 >> 61)
          sub_20E877A38();
        v55 = operator new(8 * v53);
        result = v109;
        v50 = (uint64_t)((uint64_t)v48->i64 - v47) >> 3;
      }
      else
      {
        v55 = 0;
      }
      v62 = &v55[8 * v50];
      v62[4] = 0u;
      v62[5] = 0u;
      v62[2] = 0u;
      v62[3] = 0u;
      *v62 = 0u;
      v62[1] = 0u;
      if ((int64x2_t *)v47 == v48)
      {
        v64 = &v55[8 * v50];
      }
      else
      {
        if ((unint64_t)(v49 - 8) >= 0x68)
        {
          v63 = (char *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8));
          v64 = &v55[8 * v50];
          if (v47 + (v49 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v55[v49 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v65 = ((unint64_t)(v49 - 8) >> 3) + 1;
            v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = (char *)&v51[v66 / 0xFFFFFFFFFFFFFFF8];
            v64 = (char *)v62 - v66;
            v67 = &v55[8 * v50 - 16];
            v68 = (__int128 *)(v47 + 8 * v50 - 16);
            v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v70 = *v68;
              *(v67 - 1) = *(v68 - 1);
              *v67 = v70;
              v67 -= 2;
              v68 -= 2;
              v69 -= 4;
            }
            while (v69);
            if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_63;
          }
        }
        else
        {
          v63 = (char *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8));
          v64 = &v55[8 * v50];
        }
        do
        {
          v71 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *((_QWORD *)v64 - 1) = v71;
          v64 -= 8;
        }
        while (v63 != (char *)v47);
      }
LABEL_63:
      v72 = v62 + 6;
      v73 = (char *)v48 - (char *)v51;
      if (v73)
      {
        v74 = v51;
        v75 = v55;
        memmove(v62 + 6, v74, v73);
        v55 = v75;
        result = v109;
      }
      *(_QWORD *)(result + 16) = v64;
      *(_QWORD *)(result + 24) = (char *)v72 + v73;
      *(_QWORD *)(result + 32) = &v55[8 * v105];
      v4 = a3;
      if (v47)
      {
        operator delete((void *)v47);
        result = v109;
      }
      goto LABEL_98;
    }
    v56 = (char *)v48 - (char *)v51;
    if ((unint64_t)((char *)v48 - (char *)v51) > 0x5F)
    {
      v58 = *(uint64_t **)(result + 24);
      v57 = 12;
      goto LABEL_74;
    }
    v57 = v56 >> 3;
    v58 = &v48->i64[12 - (v56 >> 3)];
    v59 = v56 & 0xFFFFFFFFFFFFFFF8;
    v60 = 88 - v59;
    if (88 - v59 >= 0x68)
    {
      v76 = v110 < (uint64_t *)((char *)v48[6].i64 - v59);
      if (v48 >= (int64x2_t *)v111 || (v61 = *(uint64_t **)(result + 24), !v76))
      {
        v77 = (v60 >> 3) + 1;
        v61 = &v48->i64[v77 & 0x3FFFFFFFFFFFFFFCLL];
        v78 = vdupq_lane_s64(v110[0], 0);
        v79 = v48 + 1;
        v80 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79[-1] = v78;
          *v79 = v78;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_73:
          *(_QWORD *)(result + 24) = v58;
          if (v48 == (int64x2_t *)v51)
            goto LABEL_98;
LABEL_74:
          v81 = (char *)v58 - (char *)(v51 + 12);
          v82 = v81 >> 3;
          v83 = (int64x2_t *)(v58 - 12);
          v84 = v58;
          if (v58 - 12 < (uint64_t *)v48)
          {
            v85 = (v49 & 0xFFFFFFFFFFFFFFF8) + v81;
            v86 = v47 + v85 + 8;
            if ((unint64_t)v48 > v86)
              v86 = (unint64_t)v48;
            v87 = v86 + ~v47 - v85;
            if (v87 >= 0x58)
            {
              v88 = (v87 >> 3) + 1;
              v89 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              v83 = (int64x2_t *)((char *)v83 + v89 * 8);
              v84 = &v58[v89];
              v90 = v58 + 2;
              v91 = (__int128 *)(v47 + 8 * v82 + 8 * v50 + 16);
              v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v93 = *v91;
                *(v90 - 1) = *(v91 - 1);
                *v90 = v93;
                v90 += 2;
                v91 += 2;
                v92 -= 4;
              }
              while (v92);
              if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_83;
            }
            else
            {
              v84 = v58;
            }
            do
            {
              v94 = v83->i64[0];
              v83 = (int64x2_t *)((char *)v83 + 8);
              *v84++ = v94;
            }
            while (v83 < v48);
          }
LABEL_83:
          *(_QWORD *)(result + 24) = v84;
          if (v58 != v51 + 12)
          {
            v95 = v4;
            v96 = v57;
            memmove(&v58[-v82], (const void *)(v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8)), v81);
            v57 = v96;
            v4 = v95;
            v50 = (uint64_t)((uint64_t)v48->i64 - v47) >> 3;
            result = v109;
          }
          v97 = v110;
          if (v51 <= v110)
          {
            v98 = 12;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v110)
              v98 = 0;
            v97 = &v110[v98];
          }
          if (v57 >= 0xA)
          {
            if (v51 >= v97 + 1
              || (unint64_t)v97 >= v47 + (((unint64_t)v48 - v47) & 0xFFFFFFFFFFFFFFF8) + 8 * v57)
            {
              v51 += v57 & 0xFFFFFFFFFFFFFFFCLL;
              v99 = v57 & 3;
              v100 = vld1q_dup_f64((const double *)v97);
              v101 = (float64x2_t *)(v47 + 8 * v50 + 16);
              v102 = v57 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v101[-1] = v100;
                *v101 = v100;
                v101 += 2;
                v102 -= 4;
              }
              while (v102);
              if (v57 == (v57 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_98;
            }
            else
            {
              v99 = v57;
            }
          }
          else
          {
            v99 = v57;
          }
          do
          {
            *v51++ = *v97;
            --v99;
          }
          while (v99);
LABEL_98:
          v25 = *(_QWORD *)(result + 24) - 96;
          v10 = v107;
          v6 = v108;
          v7 = v106;
          goto LABEL_99;
        }
      }
    }
    else
    {
      v61 = *(uint64_t **)(result + 24);
    }
    do
      *v61++ = v110[0];
    while (v61 != v58);
    goto LABEL_73;
  }
  return result;
}

void sub_20F9158EC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _OWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _OWORD *v54;
  size_t v55;
  BOOL v56;
  uint64_t v57;
  int64x2_t v58;
  int64x2_t *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int64x2_t *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  float64x2_t v77;
  float64x2_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v7 = 0;
    v8 = (_QWORD *)(a1 + 16);
    v80 = HIDWORD(a3);
    LODWORD(v9) = 1;
    v84 = a3;
    v85 = (_QWORD *)(a1 + 16);
    while (!(_DWORD)v9)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 88) + 8 * (*(_DWORD *)(a1 + 112) * v7);
    v12 = v7 + v80;
    v86 = v7;
    v81 = v11;
    while (1)
    {
      v14 = *(_QWORD *)(v11 + 8 * v10);
      if (v14 != -1)
      {
        v15 = (_OWORD *)(*v8 + 8 * v14);
        v16 = v5 + 4 * v10;
        v17 = 0;
        *(_QWORD *)&v18 = 0;
        if (v12 < v16)
          goto LABEL_12;
LABEL_11:
        *(_QWORD *)&v18 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v16 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        goto LABEL_12;
      }
      v23 = *(_QWORD *)(a1 + 80);
      if (!v23)
        break;
      v25 = *(_QWORD *)(a1 + 48);
      v24 = *(_QWORD *)(a1 + 56);
      v26 = ((v24 - v25) << 6) - 1;
      v27 = *(_QWORD *)(a1 + 72);
      if (v24 == v25)
        v26 = 0;
      v15 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                     + 8
                     * *(_QWORD *)(*(_QWORD *)(v25 + (((unint64_t)(v27 + v23 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v27 + v23 - 1) & 0x1FF)));
      *(_QWORD *)(a1 + 80) = v23 - 1;
      if ((unint64_t)(v26 - (v23 + v27) + 1) >= 0x400)
      {
        operator delete(*(void **)(v24 - 8));
        *(_QWORD *)(a1 + 56) -= 8;
      }
LABEL_80:
      *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v15 - *(_QWORD *)(a1 + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v16 = v5 + 4 * v10;
      v17 = 0;
      *(_QWORD *)&v18 = 0;
      if (v12 >= v16)
        goto LABEL_11;
LABEL_12:
      if (v16 + 1 <= v12)
      {
        v17 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v16 + 1 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v19 = v16 + 2;
        v20 = 0;
        v21 = 0;
        if (v16 + 2 > v12)
        {
LABEL_14:
          v22 = v16 + 3;
          if (v22 <= v12)
            goto LABEL_18;
          goto LABEL_8;
        }
      }
      else
      {
        v19 = v16 + 2;
        v20 = 0;
        v21 = 0;
        if (v16 + 2 > v12)
          goto LABEL_14;
      }
      v21 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v19 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v22 = v16 + 3;
      if (v22 <= v12)
LABEL_18:
        v20 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
LABEL_8:
      *((_QWORD *)&v18 + 1) = v17;
      *(_QWORD *)&v13 = v21;
      *((_QWORD *)&v13 + 1) = v20;
      *v15 = v18;
      v15[1] = v13;
      ++v10;
      v9 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v87 = 0;
    v28 = *(_QWORD *)(a1 + 16);
    v29 = *(int64x2_t **)(a1 + 24);
    v30 = (unint64_t)v29 - v28;
    v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
    v32 = (uint64_t *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
    v33 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v33 - (_QWORD)v29) < 0x20)
    {
      v34 = v31 + 4;
      if ((unint64_t)(v31 + 4) >> 61)
        sub_20E867F44();
      v35 = v33 - v28;
      if (v35 >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      v82 = v34;
      if (v34)
      {
        if (v34 >> 61)
          sub_20E877A38();
        v36 = operator new(8 * v34);
        v37 = &v36[8 * v31];
        *v37 = 0u;
        v37[1] = 0u;
        if ((int64x2_t *)v28 != v29)
          goto LABEL_33;
      }
      else
      {
        v36 = 0;
        v37 = (_OWORD *)(8 * v31);
        *v37 = 0u;
        v37[1] = 0u;
        if ((int64x2_t *)v28 != v29)
        {
LABEL_33:
          if (v30 - 8 >= 0x68)
          {
            v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
            v39 = (char *)v37;
            if (v28 + (v30 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v36[v30 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v46 = ((v30 - 8) >> 3) + 1;
              v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
              v38 = (char *)&v32[v47 / 0xFFFFFFFFFFFFFFF8];
              v39 = (char *)v37 - v47;
              v48 = 8 * ((uint64_t)((uint64_t)v29->i64 - v28) >> 3);
              v49 = &v36[v48 - 16];
              v50 = (__int128 *)(v28 + v48 - 16);
              v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v52 = *v50;
                *(v49 - 1) = *(v50 - 1);
                *v49 = v52;
                v49 -= 2;
                v50 -= 2;
                v51 -= 4;
              }
              while (v51);
              if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_46;
            }
          }
          else
          {
            v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
            v39 = (char *)v37;
          }
          do
          {
            v53 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v39 - 1) = v53;
            v39 -= 8;
          }
          while (v38 != (char *)v28);
LABEL_46:
          v54 = v37 + 2;
          v55 = (char *)v29 - (char *)v32;
          if (v55)
            memmove(v37 + 2, v32, v55);
          *(_QWORD *)(a1 + 16) = v39;
          *(_QWORD *)(a1 + 24) = (char *)v54 + v55;
          *(_QWORD *)(a1 + 32) = &v36[8 * v82];
          v11 = v81;
          if (v28)
            operator delete((void *)v28);
          goto LABEL_79;
        }
      }
      v39 = (char *)v37;
      goto LABEL_46;
    }
    v83 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
    v40 = (char *)v29 - (char *)v32;
    if ((unint64_t)((char *)v29 - (char *)v32) > 0x1F)
    {
      v42 = *(uint64_t **)(a1 + 24);
      v41 = 4;
      goto LABEL_57;
    }
    v41 = v40 >> 3;
    v42 = &v29->i64[4 - (v40 >> 3)];
    v43 = v40 & 0xFFFFFFFFFFFFFFF8;
    v44 = 24 - v43;
    if (24 - v43 >= 0x68)
    {
      v56 = &v87 < (uint64_t *)((char *)v29[2].i64 - v43);
      if (v29 >= (int64x2_t *)&v88 || (v45 = *(uint64_t **)(a1 + 24), !v56))
      {
        v57 = (v44 >> 3) + 1;
        v45 = &v29->i64[v57 & 0x3FFFFFFFFFFFFFFCLL];
        v58 = vdupq_lane_s64(v87, 0);
        v59 = v29 + 1;
        v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59[-1] = v58;
          *v59 = v58;
          v59 += 2;
          v60 -= 4;
        }
        while (v60);
        if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          *(_QWORD *)(a1 + 24) = v42;
          if (v29 == (int64x2_t *)v32)
            goto LABEL_79;
LABEL_57:
          v61 = (char *)v42 - (char *)(v32 + 4);
          v62 = v61 >> 3;
          v63 = (int64x2_t *)(v42 - 4);
          v64 = (char *)v42;
          if (v42 - 4 < (uint64_t *)v29)
          {
            v65 = (v30 & 0xFFFFFFFFFFFFFFF8) + v61;
            v66 = v28 + v65 + 8;
            if ((unint64_t)v29 > v66)
              v66 = (unint64_t)v29;
            v67 = v66 + ~v28 - v65;
            if (v67 >= 0x58)
            {
              v68 = (v67 >> 3) + 1;
              v69 = v68 & 0x3FFFFFFFFFFFFFFCLL;
              v63 = (int64x2_t *)((char *)v63 + v69 * 8);
              v64 = (char *)&v42[v69];
              v70 = v42 + 2;
              v71 = (__int128 *)(v28 + 8 * v62 + 8 * v83 + 16);
              v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v73 = *v71;
                *(v70 - 1) = *(v71 - 1);
                *v70 = v73;
                v70 += 2;
                v71 += 2;
                v72 -= 4;
              }
              while (v72);
              if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_66;
            }
            else
            {
              v64 = (char *)v42;
            }
            do
            {
              v74 = v63->i64[0];
              v63 = (int64x2_t *)((char *)v63 + 8);
              *(_QWORD *)v64 = v74;
              v64 += 8;
            }
            while (v63 < v29);
          }
LABEL_66:
          *(_QWORD *)(a1 + 24) = v64;
          if (v42 != v32 + 4)
            memmove(&v42[-v62], (const void *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8)), v61);
          v75 = &v87;
          if (v32 <= &v87)
            v75 = &v87 + 4 * (*(_QWORD *)(a1 + 24) > (unint64_t)&v87);
          if (v41 >= 0xA)
          {
            if (v32 >= v75 + 1 || (unint64_t)v75 >= v28 + (v30 & 0xFFFFFFFFFFFFFFF8) + 8 * v41)
            {
              v32 += v41 & 0xFFFFFFFFFFFFFFFCLL;
              v76 = v41 & 3;
              v77 = vld1q_dup_f64((const double *)v75);
              v78 = (float64x2_t *)(v28 + 8 * v83 + 16);
              v79 = v41 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v78[-1] = v77;
                *v78 = v77;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v41 == (v41 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_79;
            }
            else
            {
              v76 = v41;
            }
          }
          else
          {
            v76 = v41;
          }
          do
          {
            *v32++ = *v75;
            --v76;
          }
          while (v76);
LABEL_79:
          v15 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 32);
          v5 = v84;
          v8 = v85;
          v7 = v86;
          goto LABEL_80;
        }
      }
    }
    else
    {
      v45 = *(uint64_t **)(a1 + 24);
    }
    do
      *v45++ = v87;
    while (v45 != v42);
    goto LABEL_56;
  }
}

uint64_t sub_20F915F30(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _OWORD *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _OWORD *v75;
  size_t v76;
  uint64_t *v77;
  _BYTE *v78;
  BOOL v79;
  uint64_t v80;
  int64x2_t v81;
  int64x2_t *v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  int64x2_t *v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  float64x2_t v103;
  float64x2_t *v104;
  unint64_t v105;
  unint64_t v106;
  _OWORD *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[2];
  uint64_t v116[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v106 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v113 = result;
    v110 = a3;
    v111 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = v106 + 4 * v6;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v114 = v10;
    v112 = v6;
    while (1)
    {
      v23 = *(_QWORD *)(v10 + 8 * v9);
      if (v23 != -1)
      {
        v24 = (_OWORD *)(*v7 + 8 * v23);
        v25 = v4 + 4 * v9;
        v26 = 0;
        v27 = 0;
        if (v11 < v25)
          goto LABEL_12;
LABEL_11:
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v45 = *(_QWORD *)(result + 80);
      if (!v45)
        break;
      v47 = *(_QWORD *)(result + 48);
      v46 = *(_QWORD *)(result + 56);
      v48 = ((v46 - v47) << 6) - 1;
      v49 = *(_QWORD *)(result + 72);
      if (v46 == v47)
        v48 = 0;
      v24 = (_OWORD *)(*(_QWORD *)(result + 16)
                     + 8
                     * *(_QWORD *)(*(_QWORD *)(v47 + (((unint64_t)(v49 + v45 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v49 + v45 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v45 - 1;
      if ((unint64_t)(v48 - (v45 + v49) + 1) >= 0x400)
      {
        operator delete(*(void **)(v46 - 8));
        result = v113;
        v10 = v114;
        *(_QWORD *)(v113 + 56) -= 8;
      }
LABEL_105:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v24 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v25 = v4 + 4 * v9;
      v26 = 0;
      v27 = 0;
      if (v11 >= v25)
        goto LABEL_11;
LABEL_12:
      v28 = v25 + 1;
      if (v25 + 1 <= v11)
      {
        v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
        {
LABEL_14:
          v32 = v25 + 3;
          if (v25 + 3 > v11)
            goto LABEL_15;
          goto LABEL_30;
        }
      }
      else
      {
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
          goto LABEL_14;
      }
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v32 = v25 + 3;
      if (v25 + 3 > v11)
      {
LABEL_15:
        v33 = 0;
        v34 = 0;
        if (v12 < v25)
          goto LABEL_16;
        goto LABEL_31;
      }
LABEL_30:
      v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v33 = 0;
      v34 = 0;
      if (v12 < v25)
      {
LABEL_16:
        if (v28 > v12)
          goto LABEL_17;
        goto LABEL_32;
      }
LABEL_31:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v28 > v12)
      {
LABEL_17:
        v35 = 0;
        v36 = 0;
        if (v29 > v12)
          goto LABEL_18;
        goto LABEL_33;
      }
LABEL_32:
      v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v35 = 0;
      v36 = 0;
      if (v29 > v12)
      {
LABEL_18:
        if (v32 > v12)
          goto LABEL_19;
        goto LABEL_34;
      }
LABEL_33:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v32 > v12)
      {
LABEL_19:
        v37 = 0;
        v38 = 0;
        if (v13 < v25)
          goto LABEL_20;
        goto LABEL_35;
      }
LABEL_34:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v37 = 0;
      v38 = 0;
      if (v13 < v25)
      {
LABEL_20:
        if (v28 > v13)
          goto LABEL_21;
        goto LABEL_36;
      }
LABEL_35:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v28 > v13)
      {
LABEL_21:
        v39 = 0;
        v40 = 0;
        if (v29 > v13)
          goto LABEL_22;
        goto LABEL_37;
      }
LABEL_36:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v39 = 0;
      v40 = 0;
      if (v29 > v13)
      {
LABEL_22:
        if (v32 > v13)
          goto LABEL_23;
        goto LABEL_38;
      }
LABEL_37:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v32 > v13)
      {
LABEL_23:
        v41 = 0;
        v42 = 0;
        if (v14 < v25)
          goto LABEL_24;
        goto LABEL_39;
      }
LABEL_38:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v41 = 0;
      v42 = 0;
      if (v14 < v25)
      {
LABEL_24:
        if (v28 > v14)
          goto LABEL_25;
        goto LABEL_40;
      }
LABEL_39:
      v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v28 > v14)
      {
LABEL_25:
        v43 = 0;
        v44 = 0;
        if (v29 > v14)
          goto LABEL_26;
        goto LABEL_41;
      }
LABEL_40:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v43 = 0;
      v44 = 0;
      if (v29 > v14)
      {
LABEL_26:
        if (v32 <= v14)
          goto LABEL_42;
        goto LABEL_8;
      }
LABEL_41:
      v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v32 <= v14)
LABEL_42:
        v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
LABEL_8:
      *(_QWORD *)&v15 = v27;
      *((_QWORD *)&v15 + 1) = v26;
      *(_QWORD *)&v16 = v31;
      *((_QWORD *)&v16 + 1) = v30;
      *(_QWORD *)&v17 = v34;
      *((_QWORD *)&v17 + 1) = v33;
      *(_QWORD *)&v18 = v36;
      *((_QWORD *)&v18 + 1) = v35;
      *(_QWORD *)&v19 = v38;
      *((_QWORD *)&v19 + 1) = v37;
      *(_QWORD *)&v20 = v40;
      *((_QWORD *)&v20 + 1) = v39;
      *(_QWORD *)&v21 = v42;
      *((_QWORD *)&v21 + 1) = v41;
      *(_QWORD *)&v22 = v44;
      *((_QWORD *)&v22 + 1) = v43;
      *v24 = v15;
      v24[1] = v16;
      v24[2] = v17;
      v24[3] = v18;
      v24[4] = v19;
      v24[5] = v20;
      v24[6] = v21;
      v24[7] = v22;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v115[0] = 0;
    v50 = *(_QWORD *)(result + 16);
    v51 = *(int64x2_t **)(result + 24);
    v52 = (uint64_t)v51->i64 - v50;
    v53 = (uint64_t)((uint64_t)v51->i64 - v50) >> 3;
    v54 = (uint64_t *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
    v55 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v55 - (_QWORD)v51) < 0x80)
    {
      v56 = v53 + 16;
      if ((unint64_t)(v53 + 16) >> 61)
        sub_20E867F44();
      v57 = v55 - v50;
      if (v57 >> 2 > v56)
        v56 = v57 >> 2;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      v108 = v56;
      if (v56)
      {
        if (v56 >> 61)
          sub_20E877A38();
        v58 = operator new(8 * v56);
        result = v113;
        v53 = (uint64_t)((uint64_t)v51->i64 - v50) >> 3;
        v52 = (uint64_t)v51->i64 - v50;
      }
      else
      {
        v58 = 0;
      }
      v65 = &v58[8 * v53];
      v65[6] = 0u;
      v65[7] = 0u;
      v65[4] = 0u;
      v65[5] = 0u;
      v65[2] = 0u;
      v65[3] = 0u;
      *v65 = 0u;
      v65[1] = 0u;
      if ((int64x2_t *)v50 == v51)
      {
        v67 = &v58[8 * v53];
      }
      else
      {
        if ((unint64_t)(v52 - 8) >= 0x68)
        {
          v66 = (char *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
          v67 = &v58[8 * v53];
          if (v50 + (v52 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v58[v52 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v68 = ((unint64_t)(v52 - 8) >> 3) + 1;
            v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
            v66 = (char *)&v54[v69 / 0xFFFFFFFFFFFFFFF8];
            v67 = (char *)v65 - v69;
            v70 = &v58[8 * v53 - 16];
            v71 = (__int128 *)(v50 + 8 * v53 - 16);
            v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v73 = *v71;
              *(v70 - 1) = *(v71 - 1);
              *v70 = v73;
              v70 -= 2;
              v71 -= 2;
              v72 -= 4;
            }
            while (v72);
            if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_71;
          }
        }
        else
        {
          v66 = (char *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
          v67 = &v58[8 * v53];
        }
        do
        {
          v74 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *((_QWORD *)v67 - 1) = v74;
          v67 -= 8;
        }
        while (v66 != (char *)v50);
      }
LABEL_71:
      v75 = v65 + 8;
      v76 = (char *)v51 - (char *)v54;
      if (v76)
      {
        v77 = v54;
        v78 = v58;
        v107 = v65 + 8;
        memmove(v65 + 8, v77, v76);
        v75 = v107;
        v58 = v78;
        result = v113;
      }
      *(_QWORD *)(result + 16) = v67;
      *(_QWORD *)(result + 24) = (char *)v75 + v76;
      *(_QWORD *)(result + 32) = &v58[8 * v108];
      v10 = v114;
      if (v50)
      {
        operator delete((void *)v50);
        result = v113;
        v10 = v114;
      }
      goto LABEL_104;
    }
    v59 = (char *)v51 - (char *)v54;
    if ((unint64_t)((char *)v51 - (char *)v54) > 0x7F)
    {
      v61 = *(uint64_t **)(result + 24);
      v60 = 16;
      goto LABEL_82;
    }
    v60 = v59 >> 3;
    v61 = &v51->i64[16 - (v59 >> 3)];
    v62 = v59 & 0xFFFFFFFFFFFFFFF8;
    v63 = 120 - v62;
    if (120 - v62 >= 0x68)
    {
      v79 = v115 < (uint64_t *)((char *)v51[8].i64 - v62);
      if (v51 >= (int64x2_t *)v116 || (v64 = *(uint64_t **)(result + 24), !v79))
      {
        v80 = (v63 >> 3) + 1;
        v64 = &v51->i64[v80 & 0x3FFFFFFFFFFFFFFCLL];
        v81 = vdupq_lane_s64(v115[0], 0);
        v82 = v51 + 1;
        v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82[-1] = v81;
          *v82 = v81;
          v82 += 2;
          v83 -= 4;
        }
        while (v83);
        if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          *(_QWORD *)(result + 24) = v61;
          if (v51 == (int64x2_t *)v54)
            goto LABEL_104;
LABEL_82:
          v84 = (char *)v61 - (char *)(v54 + 16);
          v85 = v84 >> 3;
          v86 = (int64x2_t *)(v61 - 16);
          v87 = v61;
          if (v61 - 16 < (uint64_t *)v51)
          {
            v88 = (v52 & 0xFFFFFFFFFFFFFFF8) + v84;
            v89 = v50 + v88 + 8;
            if ((unint64_t)v51 > v89)
              v89 = (unint64_t)v51;
            v90 = v89 + ~v50 - v88;
            if (v90 >= 0x58)
            {
              v91 = (v90 >> 3) + 1;
              v92 = v91 & 0x3FFFFFFFFFFFFFFCLL;
              v86 = (int64x2_t *)((char *)v86 + v92 * 8);
              v87 = &v61[v92];
              v93 = v61 + 2;
              v94 = (__int128 *)(v50 + 8 * v85 + 8 * v53 + 16);
              v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v96 = *v94;
                *(v93 - 1) = *(v94 - 1);
                *v93 = v96;
                v93 += 2;
                v94 += 2;
                v95 -= 4;
              }
              while (v95);
              v52 = (uint64_t)v51->i64 - v50;
              if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_91;
            }
            else
            {
              v87 = v61;
            }
            do
            {
              v97 = v86->i64[0];
              v86 = (int64x2_t *)((char *)v86 + 8);
              *v87++ = v97;
            }
            while (v86 < v51);
          }
LABEL_91:
          *(_QWORD *)(result + 24) = v87;
          if (v61 != v54 + 16)
          {
            v98 = (char *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
            v99 = (uint64_t)((uint64_t)v51->i64 - v50) >> 3;
            v100 = v52;
            v109 = v60;
            memmove(&v61[-v85], v98, v84);
            v60 = v109;
            v52 = v100;
            v53 = v99;
            result = v113;
            v10 = v114;
          }
          v101 = v115;
          if (v54 <= v115)
            v101 = &v115[16 * (unint64_t)(*(_QWORD *)(result + 24) > (unint64_t)v115)];
          if (v60 >= 0xA)
          {
            if (v54 >= v101 + 1 || (unint64_t)v101 >= v50 + (v52 & 0xFFFFFFFFFFFFFFF8) + 8 * v60)
            {
              v54 += v60 & 0xFFFFFFFFFFFFFFFCLL;
              v102 = v60 & 3;
              v103 = vld1q_dup_f64((const double *)v101);
              v104 = (float64x2_t *)(v50 + 8 * v53 + 16);
              v105 = v60 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v104[-1] = v103;
                *v104 = v103;
                v104 += 2;
                v105 -= 4;
              }
              while (v105);
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_104;
            }
            else
            {
              v102 = v60;
            }
          }
          else
          {
            v102 = v60;
          }
          do
          {
            *v54++ = *v101;
            --v102;
          }
          while (v102);
LABEL_104:
          v24 = (_OWORD *)(*(_QWORD *)(result + 24) - 128);
          v4 = v110;
          v7 = v111;
          v6 = v112;
          goto LABEL_105;
        }
      }
    }
    else
    {
      v64 = *(uint64_t **)(result + 24);
    }
    do
      *v64++ = v115[0];
    while (v64 != v61);
    goto LABEL_81;
  }
  return result;
}

uint64_t sub_20F91689C(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int8x16_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _OWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  size_t v59;
  BOOL v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64x2_t *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  const double *v80;
  uint64_t v81;
  unint64_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v86 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v87 = a3;
      v89 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = v86 + 6 * v7;
      result = v12 + 1;
      v13 = v12 + 2;
      v14 = v12 + 3;
      v15 = v12 + 4;
      v16 = v12 + 5;
      v92 = v12 + 1;
      v90 = v11;
      v91 = v7;
      while (1)
      {
        v19 = *(_QWORD *)(v11 + 8 * v10);
        if (v19 != -1)
        {
          v20 = *v8 + 8 * v19;
          v21 = v10 + v5;
          v22 = 0;
          v23.i64[0] = 0;
          if (v12 < (int)v10 + v5)
            goto LABEL_12;
LABEL_11:
          v23.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v21 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          goto LABEL_12;
        }
        v28 = *(_QWORD *)(v4 + 80);
        if (!v28)
          break;
        v30 = *(_QWORD *)(v4 + 48);
        v29 = *(_QWORD *)(v4 + 56);
        v31 = ((v29 - v30) << 6) - 1;
        v32 = *(_QWORD *)(v4 + 72);
        if (v29 == v30)
          v31 = 0;
        v20 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(v32 + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v32 + v28 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v28 - 1;
        if ((unint64_t)(v31 - (v28 + v32) + 1) >= 0x400)
        {
          operator delete(*(void **)(v29 - 8));
          v15 = v12 + 4;
          v14 = v12 + 3;
          v13 = v12 + 2;
          result = v92;
          *(_QWORD *)(v4 + 56) -= 8;
        }
LABEL_82:
        *(_QWORD *)(v11 + 8 * v10) = (v20 - *(_QWORD *)(v4 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
        v21 = v10 + v5;
        v22 = 0;
        v23.i64[0] = 0;
        if (v12 >= (int)v10 + v5)
          goto LABEL_11;
LABEL_12:
        if (result >= v21)
        {
          v22 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v21 + *(_DWORD *)(*(_QWORD *)a2 + 16) * (_DWORD)result));
          v24 = 0;
          v25 = 0;
          if (v13 < v21)
          {
LABEL_14:
            if (v14 < v21)
              goto LABEL_15;
            goto LABEL_20;
          }
        }
        else
        {
          v24 = 0;
          v25 = 0;
          if (v13 < v21)
            goto LABEL_14;
        }
        v25 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v21 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v14 < v21)
        {
LABEL_15:
          v26 = 0;
          v27 = 0;
          if (v15 < v21)
            goto LABEL_16;
          goto LABEL_21;
        }
LABEL_20:
        v24 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v21 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v26 = 0;
        v27 = 0;
        if (v15 < v21)
        {
LABEL_16:
          if (v16 >= v21)
            goto LABEL_22;
          goto LABEL_8;
        }
LABEL_21:
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v21 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        if (v16 >= v21)
LABEL_22:
          v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v21 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
LABEL_8:
        v23.i64[1] = v22;
        v17.i64[0] = v25;
        v17.i64[1] = v24;
        *(_QWORD *)&v18 = v27;
        *((_QWORD *)&v18 + 1) = v26;
        v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
        v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
        *(int8x16_t *)v20 = v23;
        *(int8x16_t *)(v20 + 16) = v17;
        *(_OWORD *)(v20 + 32) = v18;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v93 = 0;
      v33 = *(_QWORD *)(v4 + 16);
      v34 = *(int64x2_t **)(v4 + 24);
      v35 = (unint64_t)v34 - v33;
      v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
      v37 = (uint64_t *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
      v38 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v38 - (_QWORD)v34) < 0x30)
      {
        v39 = v36 + 6;
        if ((unint64_t)(v36 + 6) >> 61)
          sub_20E867F44();
        v40 = v38 - v33;
        if (v40 >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        v88 = v39;
        if (v39)
        {
          if (v39 >> 61)
            sub_20E877A38();
          v41 = operator new(8 * v39);
          v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
          v42 = &v41[8 * v36];
          v42[1] = 0u;
          v42[2] = 0u;
          *v42 = 0u;
          if ((int64x2_t *)v33 != v34)
            goto LABEL_37;
        }
        else
        {
          v41 = 0;
          v42 = (_OWORD *)(8 * v36);
          v42[1] = 0u;
          v42[2] = 0u;
          *v42 = 0u;
          if ((int64x2_t *)v33 != v34)
          {
LABEL_37:
            if (v35 - 8 >= 0x68)
            {
              v43 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
              v44 = (char *)v42;
              if (v33 + (v35 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v41[v35 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v51 = ((v35 - 8) >> 3) + 1;
                v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
                v43 = (char *)&v37[v52 / 0xFFFFFFFFFFFFFFF8];
                v44 = (char *)v42 - v52;
                v53 = &v41[8 * v36 - 16];
                v54 = (__int128 *)(v33 + 8 * v36 - 16);
                v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v56 = *v54;
                  *(v53 - 1) = *(v54 - 1);
                  *v53 = v56;
                  v53 -= 2;
                  v54 -= 2;
                  v55 -= 4;
                }
                while (v55);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_50;
              }
            }
            else
            {
              v43 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
              v44 = (char *)v42;
            }
            do
            {
              v57 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *((_QWORD *)v44 - 1) = v57;
              v44 -= 8;
            }
            while (v43 != (char *)v33);
LABEL_50:
            v58 = v42 + 3;
            v59 = (char *)v34 - (char *)v37;
            if (v59)
              memmove(v42 + 3, v37, v59);
            *(_QWORD *)(v4 + 16) = v44;
            *(_QWORD *)(v4 + 24) = (char *)v58 + v59;
            *(_QWORD *)(v4 + 32) = &v41[8 * v88];
            v5 = v87;
            v13 = v12 + 2;
            result = v92;
            v14 = v12 + 3;
            v15 = v12 + 4;
            v16 = v12 + 5;
            if (v33)
            {
              operator delete((void *)v33);
              v15 = v12 + 4;
              v14 = v12 + 3;
              v13 = v12 + 2;
              result = v92;
            }
            goto LABEL_81;
          }
        }
        v44 = (char *)v42;
        goto LABEL_50;
      }
      v45 = (char *)v34 - (char *)v37;
      if ((unint64_t)((char *)v34 - (char *)v37) > 0x2F)
      {
        v47 = *(uint64_t **)(v4 + 24);
        v46 = 6;
        goto LABEL_61;
      }
      v46 = v45 >> 3;
      v47 = &v34->i64[6 - (v45 >> 3)];
      v48 = v45 & 0xFFFFFFFFFFFFFFF8;
      v49 = 40 - v48;
      if (40 - v48 >= 0x68)
      {
        v60 = &v93 < (uint64_t *)((char *)v34[3].i64 - v48);
        if (v34 >= (int64x2_t *)&v94 || (v50 = *(uint64_t **)(v4 + 24), !v60))
        {
          v61 = (v49 >> 3) + 1;
          v50 = &v34->i64[v61 & 0x3FFFFFFFFFFFFFFCLL];
          v62 = vdupq_lane_s64(v93, 0);
          v63 = v34 + 1;
          v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63[-1] = v62;
            *v63 = v62;
            v63 += 2;
            v64 -= 4;
          }
          while (v64);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_60:
            *(_QWORD *)(v4 + 24) = v47;
            if (v34 == (int64x2_t *)v37)
              goto LABEL_81;
LABEL_61:
            v65 = (char *)v47 - (char *)(v37 + 6);
            v66 = v65 >> 3;
            v67 = (int64x2_t *)(v47 - 6);
            v68 = (char *)v47;
            if (v47 - 6 < (uint64_t *)v34)
            {
              v69 = (v35 & 0xFFFFFFFFFFFFFFF8) + v65;
              v70 = v33 + v69 + 8;
              if ((unint64_t)v34 > v70)
                v70 = (unint64_t)v34;
              v71 = v70 + ~v33 - v69;
              if (v71 >= 0x58)
              {
                v72 = (v71 >> 3) + 1;
                v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                v67 = (int64x2_t *)((char *)v67 + v73 * 8);
                v68 = (char *)&v47[v73];
                v74 = v47 + 2;
                v75 = (__int128 *)(v33 + 8 * v66 + 8 * v36 + 16);
                v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v77 = *v75;
                  *(v74 - 1) = *(v75 - 1);
                  *v74 = v77;
                  v74 += 2;
                  v75 += 2;
                  v76 -= 4;
                }
                while (v76);
                if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_70;
              }
              else
              {
                v68 = (char *)v47;
              }
              do
              {
                v78 = v67->i64[0];
                v67 = (int64x2_t *)((char *)v67 + 8);
                *(_QWORD *)v68 = v78;
                v68 += 8;
              }
              while (v67 < v34);
            }
LABEL_70:
            *(_QWORD *)(v4 + 24) = v68;
            if (v47 != v37 + 6)
            {
              v79 = v46;
              memmove(&v47[-v66], (const void *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8)), v65);
              v46 = v79;
              v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
              v15 = v12 + 4;
              v14 = v12 + 3;
              v13 = v12 + 2;
              result = v92;
            }
            v80 = (const double *)&v93;
            if (v37 <= &v93)
            {
              v81 = 48;
              if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v93)
                v81 = 0;
              v80 = (const double *)((char *)&v93 + v81);
            }
            if (v46 >= 0xA
              && (v37 >= (uint64_t *)v80 + 1
               || (unint64_t)v80 >= v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8) + 8 * v46))
            {
              v37 += v46 & 0xFFFFFFFFFFFFFFFCLL;
              v82 = v46 & 3;
              v83 = vld1q_dup_f64(v80);
              v84 = (float64x2_t *)(v33 + 8 * v36 + 16);
              v85 = v46 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v84[-1] = v83;
                *v84 = v83;
                v84 += 2;
                v85 -= 4;
              }
              while (v85);
              v5 = v87;
              if (v46 == (v46 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_81;
            }
            else
            {
              v82 = v46;
              v5 = v87;
            }
            do
            {
              *v37++ = *(_QWORD *)v80;
              --v82;
            }
            while (v82);
LABEL_81:
            v20 = *(_QWORD *)(v4 + 24) - 48;
            v11 = v90;
            v7 = v91;
            v8 = v89;
            goto LABEL_82;
          }
        }
      }
      else
      {
        v50 = *(uint64_t **)(v4 + 24);
      }
      do
        *v50++ = v93;
      while (v50 != v47);
      goto LABEL_60;
    }
  }
  return result;
}

uint64_t sub_20F916FE0(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t *v25;
  int64x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  size_t v51;
  BOOL v52;
  uint64_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  uint64_t v56;
  int64x2_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  const double *v61;
  uint64_t v62;
  unint64_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v67 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v68 = a3;
      v71 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      result = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v11 = 3 * v7 + v67;
      v12 = v11 + 1;
      v13 = v11 + 2;
      v72 = v7;
      v73 = result;
      while (1)
      {
        v14 = *(_QWORD *)(result + 8 * v10);
        if (v14 != -1)
        {
          v15 = *v8 + 8 * v14;
          v16 = v10 + v5;
          v17 = 0;
          v18.i64[0] = 0;
          if (v11 < (int)v10 + v5)
            goto LABEL_12;
LABEL_11:
          v18.i64[0] = *(_QWORD *)(**(_QWORD **)v6 + 8 * (v16 + *(_DWORD *)(*(_QWORD *)v6 + 16) * v11));
          goto LABEL_12;
        }
        v20 = *(_QWORD *)(v4 + 80);
        if (!v20)
          break;
        v22 = *(_QWORD *)(v4 + 48);
        v21 = *(_QWORD *)(v4 + 56);
        v23 = ((v21 - v22) << 6) - 1;
        v24 = *(_QWORD *)(v4 + 72);
        if (v21 == v22)
          v23 = 0;
        v15 = *(_QWORD *)(v4 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v22 + (((unint64_t)(v24 + v20 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v24 + v20 - 1) & 0x1FF));
        *(_QWORD *)(v4 + 80) = v20 - 1;
        if ((unint64_t)(v23 - (v20 + v24) + 1) >= 0x400)
        {
          operator delete(*(void **)(v21 - 8));
          result = v73;
          *(_QWORD *)(v4 + 56) -= 8;
        }
LABEL_70:
        *(_QWORD *)(result + 8 * v10) = (v15 - *(_QWORD *)(v4 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
        v16 = v10 + v5;
        v17 = 0;
        v18.i64[0] = 0;
        if (v11 >= (int)v10 + v5)
          goto LABEL_11;
LABEL_12:
        if (v12 >= v16)
        {
          v17 = *(_QWORD *)(**(_QWORD **)v6 + 8 * (v16 + *(_DWORD *)(*(_QWORD *)v6 + 16) * v12));
          v19 = 0;
          if (v13 >= v16)
LABEL_16:
            v19 = *(_QWORD *)(**(_QWORD **)v6 + 8 * (v16 + *(_DWORD *)(*(_QWORD *)v6 + 16) * v13));
        }
        else
        {
          v19 = 0;
          if (v13 >= v16)
            goto LABEL_16;
        }
        v18.i64[1] = v17;
        v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
        *(_QWORD *)(v15 + 16) = v19;
        *(int8x16_t *)v15 = v18;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v74 = 0;
      v25 = *(int64x2_t **)(v4 + 16);
      v26 = *(int64x2_t **)(v4 + 24);
      v27 = (char *)v26 - (char *)v25;
      v28 = ((char *)v26 - (char *)v25) >> 3;
      v29 = (uint64_t *)((char *)v25->i64 + (((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8));
      v30 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v30 - (_QWORD)v26) < 0x18)
      {
        v31 = v28 + 3;
        if ((unint64_t)(v28 + 3) >> 61)
          sub_20E867F44();
        v32 = v30 - (_QWORD)v25;
        if (v32 >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        v69 = v31;
        if (v31)
        {
          if (v31 >> 61)
            sub_20E877A38();
          v33 = operator new(8 * v31);
          v28 = ((char *)v26 - (char *)v25) >> 3;
          v34 = &v33[8 * v28];
          *v34 = 0;
          v34[1] = 0;
          v34[2] = 0;
          if (v25 != v26)
            goto LABEL_31;
        }
        else
        {
          v33 = 0;
          v34 = (_QWORD *)(8 * v28);
          *v34 = 0;
          v34[1] = 0;
          v34[2] = 0;
          if (v25 != v26)
          {
LABEL_31:
            if ((unint64_t)(v27 - 8) >= 0x68)
            {
              v35 = (uint64_t *)((char *)v25->i64 + (((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8));
              v36 = v34;
              if ((unint64_t)(&v25->i8[v27 & 0xFFFFFFFFFFFFFFF8] - &v33[v27 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
              {
                v43 = ((unint64_t)(v27 - 8) >> 3) + 1;
                v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                v35 = &v29[v44 / 0xFFFFFFFFFFFFFFF8];
                v36 = &v34[v44 / 0xFFFFFFFFFFFFFFF8];
                v45 = &v33[8 * v28 - 16];
                v46 = (__int128 *)&v25[-1].i8[8 * v28];
                v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v48 = *v46;
                  *(v45 - 1) = *(v46 - 1);
                  *v45 = v48;
                  v45 -= 2;
                  v46 -= 2;
                  v47 -= 4;
                }
                while (v47);
                if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_44;
              }
            }
            else
            {
              v35 = (uint64_t *)((char *)v25->i64 + (((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8));
              v36 = v34;
            }
            do
            {
              v49 = *--v35;
              *--v36 = v49;
            }
            while (v35 != (uint64_t *)v25);
LABEL_44:
            v50 = v34 + 3;
            v51 = (char *)v26 - (char *)v29;
            if (v51)
              memmove(v34 + 3, v29, v51);
            *(_QWORD *)(v4 + 16) = v36;
            *(_QWORD *)(v4 + 24) = (char *)v50 + v51;
            *(_QWORD *)(v4 + 32) = &v33[8 * v69];
            v5 = v68;
            result = v73;
            v12 = v11 + 1;
            if (v25)
            {
              operator delete(v25);
              result = v73;
            }
            goto LABEL_69;
          }
        }
        v36 = v34;
        goto LABEL_44;
      }
      v37 = (char *)v26 - (char *)v29;
      if ((unint64_t)((char *)v26 - (char *)v29) > 0x17)
      {
        v39 = *(uint64_t **)(v4 + 24);
        v38 = 3;
LABEL_55:
        v57 = (int64x2_t *)(v39 - 3);
        v58 = v39;
        if (v39 - 3 < (uint64_t *)v26)
        {
          v58 = v39;
          do
          {
            v59 = v57->i64[0];
            v57 = (int64x2_t *)((char *)v57 + 8);
            *v58++ = v59;
          }
          while (v57 < v26);
        }
        *(_QWORD *)(v4 + 24) = v58;
        if (v39 != v29 + 3)
        {
          v60 = v38;
          memmove(&v39[-(v39 - (v29 + 3))], &v25->i8[((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8], (char *)v39 - (char *)(v29 + 3));
          v38 = v60;
          v28 = ((char *)v26 - (char *)v25) >> 3;
          result = v73;
        }
        v61 = (const double *)&v74;
        if (v29 <= &v74)
        {
          v62 = 24;
          if (*(_QWORD *)(v4 + 24) <= (unint64_t)&v74)
            v62 = 0;
          v61 = (const double *)((char *)&v74 + v62);
        }
        if (v38 >= 0xA
          && (v29 >= (uint64_t *)v61 + 1
           || v61 >= (const double *)((char *)&v25->i64[v38] + (((char *)v26 - (char *)v25) & 0xFFFFFFFFFFFFFFF8))))
        {
          v29 += v38 & 0xFFFFFFFFFFFFFFFCLL;
          v63 = v38 & 3;
          v64 = vld1q_dup_f64(v61);
          v65 = (float64x2_t *)((char *)&v25[1] + 8 * v28);
          v66 = v38 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v65[-1] = v64;
            *v65 = v64;
            v65 += 2;
            v66 -= 4;
          }
          while (v66);
          v5 = v68;
          if (v38 == (v38 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v63 = v38;
          v5 = v68;
        }
        do
        {
          *v29++ = *(_QWORD *)v61;
          --v63;
        }
        while (v63);
LABEL_69:
        v15 = *(_QWORD *)(v4 + 24) - 24;
        v6 = a2;
        v8 = v71;
        v7 = v72;
        goto LABEL_70;
      }
      v38 = v37 >> 3;
      v39 = &v26->i64[3 - (v37 >> 3)];
      v40 = v37 & 0xFFFFFFFFFFFFFFF8;
      v41 = 16 - v40;
      if (16 - v40 >= 0x68)
      {
        v52 = &v74 < (uint64_t *)((char *)&v26[1].i64[1] - v40);
        if (v26 >= (int64x2_t *)&v75 || (v42 = *(uint64_t **)(v4 + 24), !v52))
        {
          v53 = (v41 >> 3) + 1;
          v42 = &v26->i64[v53 & 0x3FFFFFFFFFFFFFFCLL];
          v54 = vdupq_lane_s64(v74, 0);
          v55 = v26 + 1;
          v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55[-1] = v54;
            *v55 = v54;
            v55 += 2;
            v56 -= 4;
          }
          while (v56);
          if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_54:
            *(_QWORD *)(v4 + 24) = v39;
            if (v26 == (int64x2_t *)v29)
              goto LABEL_69;
            goto LABEL_55;
          }
        }
      }
      else
      {
        v42 = *(uint64_t **)(v4 + 24);
      }
      do
        *v42++ = v74;
      while (v42 != v39);
      goto LABEL_54;
    }
  }
  return result;
}

uint64_t sub_20F91761C(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _OWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _OWORD *v53;
  size_t v54;
  BOOL v55;
  uint64_t v56;
  int64x2_t v57;
  int64x2_t *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  int64x2_t *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  float64x2_t v77;
  float64x2_t *v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*(_DWORD *)(result + 8))
    {
      v5 = a3;
      v7 = 0;
      v8 = (_QWORD *)(result + 16);
      v80 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v81 = a3;
      v83 = (_QWORD *)(result + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 88) + 8 * (*(_DWORD *)(v4 + 112) * v7);
      v12 = v80 + 4 * v7;
      result = v12 + 1;
      v13 = v12 + 2;
      v14 = v12 + 3;
      v86 = v12 + 1;
      v84 = v11;
      v85 = v7;
      while (1)
      {
        v16 = *(_QWORD *)(v11 + 8 * v10);
        if (v16 != -1)
        {
          v17 = (_OWORD *)(*v8 + 8 * v16);
          v18 = v10 + v5;
          v19 = 0;
          *(_QWORD *)&v20 = 0;
          if (v12 < (int)v10 + v5)
            goto LABEL_12;
LABEL_11:
          *(_QWORD *)&v20 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v18 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          goto LABEL_12;
        }
        v23 = *(_QWORD *)(v4 + 80);
        if (!v23)
          break;
        v25 = *(_QWORD *)(v4 + 48);
        v24 = *(_QWORD *)(v4 + 56);
        v26 = ((v24 - v25) << 6) - 1;
        v27 = *(_QWORD *)(v4 + 72);
        if (v24 == v25)
          v26 = 0;
        v17 = (_OWORD *)(*(_QWORD *)(v4 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v25 + (((unint64_t)(v27 + v23 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v27 + v23 - 1) & 0x1FF)));
        *(_QWORD *)(v4 + 80) = v23 - 1;
        if ((unint64_t)(v26 - (v23 + v27) + 1) >= 0x400)
        {
          operator delete(*(void **)(v24 - 8));
          v13 = v12 + 2;
          result = v86;
          *(_QWORD *)(v4 + 56) -= 8;
        }
LABEL_76:
        *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v17 - *(_QWORD *)(v4 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v7);
        v18 = v10 + v5;
        v19 = 0;
        *(_QWORD *)&v20 = 0;
        if (v12 >= (int)v10 + v5)
          goto LABEL_11;
LABEL_12:
        if (result >= v18)
        {
          v19 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v18 + *(_DWORD *)(*(_QWORD *)a2 + 16) * (_DWORD)result));
          v21 = 0;
          v22 = 0;
          if (v13 < v18)
          {
LABEL_14:
            if (v14 >= v18)
              goto LABEL_18;
            goto LABEL_8;
          }
        }
        else
        {
          v21 = 0;
          v22 = 0;
          if (v13 < v18)
            goto LABEL_14;
        }
        v22 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v18 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v14 >= v18)
LABEL_18:
          v21 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v18 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
LABEL_8:
        *((_QWORD *)&v20 + 1) = v19;
        *(_QWORD *)&v15 = v22;
        *((_QWORD *)&v15 + 1) = v21;
        *v17 = v20;
        v17[1] = v15;
        ++v10;
        v9 = *(unsigned int *)(v4 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v4 + 12);
          goto LABEL_5;
        }
      }
      v87 = 0;
      v28 = *(_QWORD *)(v4 + 16);
      v29 = *(int64x2_t **)(v4 + 24);
      v30 = (unint64_t)v29 - v28;
      v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
      v32 = (uint64_t *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
      v33 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)(v33 - (_QWORD)v29) < 0x20)
      {
        v34 = v31 + 4;
        if ((unint64_t)(v31 + 4) >> 61)
          sub_20E867F44();
        v35 = v33 - v28;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        v82 = v34;
        if (v34)
        {
          if (v34 >> 61)
            sub_20E877A38();
          v36 = operator new(8 * v34);
          v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
          v37 = &v36[8 * v31];
          *v37 = 0u;
          v37[1] = 0u;
          if ((int64x2_t *)v28 != v29)
            goto LABEL_33;
        }
        else
        {
          v36 = 0;
          v37 = (_OWORD *)(8 * v31);
          *v37 = 0u;
          v37[1] = 0u;
          if ((int64x2_t *)v28 != v29)
          {
LABEL_33:
            if (v30 - 8 >= 0x68)
            {
              v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
              v39 = (char *)v37;
              if (v28 + (v30 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v36[v30 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v46 = ((v30 - 8) >> 3) + 1;
                v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
                v38 = (char *)&v32[v47 / 0xFFFFFFFFFFFFFFF8];
                v39 = (char *)v37 - v47;
                v48 = &v36[8 * v31 - 16];
                v49 = (__int128 *)(v28 + 8 * v31 - 16);
                v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v51 = *v49;
                  *(v48 - 1) = *(v49 - 1);
                  *v48 = v51;
                  v48 -= 2;
                  v49 -= 2;
                  v50 -= 4;
                }
                while (v50);
                if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_46;
              }
            }
            else
            {
              v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
              v39 = (char *)v37;
            }
            do
            {
              v52 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v39 - 1) = v52;
              v39 -= 8;
            }
            while (v38 != (char *)v28);
LABEL_46:
            v53 = v37 + 2;
            v54 = (char *)v29 - (char *)v32;
            if (v54)
              memmove(v37 + 2, v32, v54);
            *(_QWORD *)(v4 + 16) = v39;
            *(_QWORD *)(v4 + 24) = (char *)v53 + v54;
            *(_QWORD *)(v4 + 32) = &v36[8 * v82];
            v5 = v81;
            v13 = v12 + 2;
            result = v86;
            v14 = v12 + 3;
            if (v28)
            {
              operator delete((void *)v28);
              v13 = v12 + 2;
              result = v86;
            }
            goto LABEL_75;
          }
        }
        v39 = (char *)v37;
        goto LABEL_46;
      }
      v40 = (char *)v29 - (char *)v32;
      if ((unint64_t)((char *)v29 - (char *)v32) > 0x1F)
      {
        v42 = *(uint64_t **)(v4 + 24);
        v41 = 4;
        goto LABEL_57;
      }
      v41 = v40 >> 3;
      v42 = &v29->i64[4 - (v40 >> 3)];
      v43 = v40 & 0xFFFFFFFFFFFFFFF8;
      v44 = 24 - v43;
      if (24 - v43 >= 0x68)
      {
        v55 = &v87 < (uint64_t *)((char *)v29[2].i64 - v43);
        if (v29 >= (int64x2_t *)&v88 || (v45 = *(uint64_t **)(v4 + 24), !v55))
        {
          v56 = (v44 >> 3) + 1;
          v45 = &v29->i64[v56 & 0x3FFFFFFFFFFFFFFCLL];
          v57 = vdupq_lane_s64(v87, 0);
          v58 = v29 + 1;
          v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v58[-1] = v57;
            *v58 = v57;
            v58 += 2;
            v59 -= 4;
          }
          while (v59);
          if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_56:
            *(_QWORD *)(v4 + 24) = v42;
            if (v29 == (int64x2_t *)v32)
              goto LABEL_75;
LABEL_57:
            v60 = (char *)v42 - (char *)(v32 + 4);
            v61 = v60 >> 3;
            v62 = (int64x2_t *)(v42 - 4);
            v63 = (char *)v42;
            if (v42 - 4 < (uint64_t *)v29)
            {
              v64 = (v30 & 0xFFFFFFFFFFFFFFF8) + v60;
              v65 = v28 + v64 + 8;
              if ((unint64_t)v29 > v65)
                v65 = (unint64_t)v29;
              v66 = v65 + ~v28 - v64;
              if (v66 >= 0x58)
              {
                v67 = (v66 >> 3) + 1;
                v68 = v67 & 0x3FFFFFFFFFFFFFFCLL;
                v62 = (int64x2_t *)((char *)v62 + v68 * 8);
                v63 = (char *)&v42[v68];
                v69 = v42 + 2;
                v70 = (__int128 *)(v28 + 8 * v61 + 8 * v31 + 16);
                v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v72 = *v70;
                  *(v69 - 1) = *(v70 - 1);
                  *v69 = v72;
                  v69 += 2;
                  v70 += 2;
                  v71 -= 4;
                }
                while (v71);
                if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_66;
              }
              else
              {
                v63 = (char *)v42;
              }
              do
              {
                v73 = v62->i64[0];
                v62 = (int64x2_t *)((char *)v62 + 8);
                *(_QWORD *)v63 = v73;
                v63 += 8;
              }
              while (v62 < v29);
            }
LABEL_66:
            *(_QWORD *)(v4 + 24) = v63;
            if (v42 != v32 + 4)
            {
              v74 = v41;
              memmove(&v42[-v61], (const void *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8)), v60);
              v41 = v74;
              v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
              v13 = v12 + 2;
              result = v86;
            }
            v75 = &v87;
            if (v32 <= &v87)
              v75 = &v87 + 4 * (*(_QWORD *)(v4 + 24) > (unint64_t)&v87);
            if (v41 >= 0xA
              && (v32 >= v75 + 1
               || (unint64_t)v75 >= v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8) + 8 * v41))
            {
              v32 += v41 & 0xFFFFFFFFFFFFFFFCLL;
              v76 = v41 & 3;
              v77 = vld1q_dup_f64((const double *)v75);
              v78 = (float64x2_t *)(v28 + 8 * v31 + 16);
              v79 = v41 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v78[-1] = v77;
                *v78 = v77;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              v5 = v81;
              if (v41 == (v41 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_75;
            }
            else
            {
              v76 = v41;
              v5 = v81;
            }
            do
            {
              *v32++ = *v75;
              --v76;
            }
            while (v76);
LABEL_75:
            v17 = (_OWORD *)(*(_QWORD *)(v4 + 24) - 32);
            v11 = v84;
            v7 = v85;
            v8 = v83;
            goto LABEL_76;
          }
        }
      }
      else
      {
        v45 = *(uint64_t **)(v4 + 24);
      }
      do
        *v45++ = v87;
      while (v45 != v42);
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t sub_20F917C80(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  unint64_t v63;
  int8x16_t v64;
  unint64_t v65;
  int8x16_t v66;
  unint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  int8x16_t v70;
  unint64_t v71;
  unint64_t v72;
  int8x16_t v73;
  unint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  unint64_t v79;
  int8x16_t v80;
  unint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  uint64_t v84;
  unint64_t v85;
  int8x16_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int64x2_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  _OWORD *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _OWORD *v117;
  size_t v118;
  uint64_t *v119;
  _BYTE *v120;
  BOOL v121;
  uint64_t v122;
  int64x2_t v123;
  int64x2_t *v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  int64x2_t *v128;
  uint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  float64x2_t v145;
  float64x2_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161[2];
  uint64_t v162[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v148 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v153 = result;
    v151 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = v148 + 6 * v6;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v15 = v11 + 4;
    v16 = v11 + 5;
    v154 = v10;
    v152 = v6;
    while (1)
    {
      v20 = *(_QWORD *)(v10 + 8 * v9);
      if (v20 != -1)
      {
        v21 = (int8x16_t *)(*v7 + 8 * v20);
        v22 = v4 + 6 * v9;
        v23 = 0;
        v24 = 0;
        if (v11 < v22)
          goto LABEL_12;
LABEL_11:
        v24 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v87 = *(_QWORD *)(result + 80);
      if (!v87)
        break;
      v89 = *(_QWORD *)(result + 48);
      v88 = *(_QWORD *)(result + 56);
      v90 = ((v88 - v89) << 6) - 1;
      v91 = *(_QWORD *)(result + 72);
      if (v88 == v89)
        v90 = 0;
      v21 = (int8x16_t *)(*(_QWORD *)(result + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v89 + (((unint64_t)(v91 + v87 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v91 + v87 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v87 - 1;
      if ((unint64_t)(v90 - (v87 + v91) + 1) >= 0x400)
      {
        operator delete(*(void **)(v88 - 8));
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        v10 = v154;
        result = v153;
        *(_QWORD *)(v153 + 56) -= 8;
      }
LABEL_148:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v21->i64 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v22 = v4 + 6 * v9;
      v23 = 0;
      v24 = 0;
      if (v11 >= v22)
        goto LABEL_11;
LABEL_12:
      v25 = v22 + 1;
      if (v22 + 1 <= v11)
      {
        v23 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v26 = v22 + 2;
        v27 = 0;
        v28 = 0;
        if (v22 + 2 > v11)
        {
LABEL_14:
          v29 = v22 + 3;
          if (v22 + 3 > v11)
            goto LABEL_15;
          goto LABEL_52;
        }
      }
      else
      {
        v26 = v22 + 2;
        v27 = 0;
        v28 = 0;
        if (v22 + 2 > v11)
          goto LABEL_14;
      }
      v28 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v29 = v22 + 3;
      if (v22 + 3 > v11)
      {
LABEL_15:
        v30 = v22 + 4;
        v31 = 0;
        v32 = 0;
        if (v22 + 4 > v11)
          goto LABEL_16;
        goto LABEL_53;
      }
LABEL_52:
      v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v30 = v22 + 4;
      v31 = 0;
      v32 = 0;
      if (v22 + 4 > v11)
      {
LABEL_16:
        v33 = v22 + 5;
        if (v22 + 5 > v11)
          goto LABEL_17;
        goto LABEL_54;
      }
LABEL_53:
      v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v33 = v22 + 5;
      if (v22 + 5 > v11)
      {
LABEL_17:
        v34 = 0;
        v35 = 0;
        if (v12 < v22)
          goto LABEL_18;
        goto LABEL_55;
      }
LABEL_54:
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v34 = 0;
      v35 = 0;
      if (v12 < v22)
      {
LABEL_18:
        if (v25 > v12)
          goto LABEL_19;
        goto LABEL_56;
      }
LABEL_55:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v25 > v12)
      {
LABEL_19:
        v36 = 0;
        v37 = 0;
        if (v26 > v12)
          goto LABEL_20;
        goto LABEL_57;
      }
LABEL_56:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v36 = 0;
      v37 = 0;
      if (v26 > v12)
      {
LABEL_20:
        if (v29 > v12)
          goto LABEL_21;
        goto LABEL_58;
      }
LABEL_57:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v29 > v12)
      {
LABEL_21:
        v38 = 0;
        v39 = 0;
        if (v30 > v12)
          goto LABEL_22;
        goto LABEL_59;
      }
LABEL_58:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v38 = 0;
      v39 = 0;
      if (v30 > v12)
      {
LABEL_22:
        if (v33 > v12)
          goto LABEL_23;
        goto LABEL_60;
      }
LABEL_59:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v33 > v12)
      {
LABEL_23:
        v40 = 0;
        v41 = 0;
        if (v13 < v22)
          goto LABEL_24;
        goto LABEL_61;
      }
LABEL_60:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v40 = 0;
      v41 = 0;
      if (v13 < v22)
      {
LABEL_24:
        if (v25 > v13)
          goto LABEL_25;
        goto LABEL_62;
      }
LABEL_61:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v25 > v13)
      {
LABEL_25:
        v42 = 0;
        v43 = 0;
        if (v26 > v13)
          goto LABEL_26;
        goto LABEL_63;
      }
LABEL_62:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v42 = 0;
      v43 = 0;
      if (v26 > v13)
      {
LABEL_26:
        if (v29 > v13)
          goto LABEL_27;
        goto LABEL_64;
      }
LABEL_63:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v29 > v13)
      {
LABEL_27:
        v44 = 0;
        v45 = 0;
        if (v30 > v13)
          goto LABEL_28;
        goto LABEL_65;
      }
LABEL_64:
      v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v44 = 0;
      v45 = 0;
      if (v30 > v13)
      {
LABEL_28:
        if (v33 > v13)
          goto LABEL_29;
        goto LABEL_66;
      }
LABEL_65:
      v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v33 > v13)
      {
LABEL_29:
        v46 = 0;
        v47 = 0;
        if (v14 < v22)
          goto LABEL_30;
        goto LABEL_67;
      }
LABEL_66:
      v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v46 = 0;
      v47 = 0;
      if (v14 < v22)
      {
LABEL_30:
        if (v25 > v14)
          goto LABEL_31;
        goto LABEL_68;
      }
LABEL_67:
      v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v25 > v14)
      {
LABEL_31:
        v48 = 0;
        v49 = 0;
        if (v26 > v14)
          goto LABEL_32;
        goto LABEL_69;
      }
LABEL_68:
      v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v48 = 0;
      v49 = 0;
      if (v26 > v14)
      {
LABEL_32:
        if (v29 > v14)
          goto LABEL_33;
        goto LABEL_70;
      }
LABEL_69:
      v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v29 > v14)
      {
LABEL_33:
        v50 = 0;
        v51 = 0;
        if (v30 > v14)
          goto LABEL_34;
        goto LABEL_71;
      }
LABEL_70:
      v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v50 = 0;
      v51 = 0;
      if (v30 > v14)
      {
LABEL_34:
        if (v33 > v14)
          goto LABEL_35;
        goto LABEL_72;
      }
LABEL_71:
      v51 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v33 > v14)
      {
LABEL_35:
        v52 = 0;
        v53 = 0;
        if (v15 < v22)
          goto LABEL_36;
        goto LABEL_73;
      }
LABEL_72:
      v50 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v52 = 0;
      v53 = 0;
      if (v15 < v22)
      {
LABEL_36:
        if (v25 > v15)
          goto LABEL_37;
        goto LABEL_74;
      }
LABEL_73:
      v53 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v25 > v15)
      {
LABEL_37:
        v54 = 0;
        v55 = 0;
        if (v26 > v15)
          goto LABEL_39;
LABEL_38:
        v55 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        goto LABEL_39;
      }
LABEL_74:
      v52 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v54 = 0;
      v55 = 0;
      if (v26 <= v15)
        goto LABEL_38;
LABEL_39:
      v56.i64[0] = v24;
      v56.i64[1] = v23;
      v57.i64[0] = v28;
      v57.i64[1] = v27;
      v58.i64[0] = v32;
      v58.i64[1] = v31;
      v59.i64[0] = v35;
      v59.i64[1] = v34;
      v60.i64[0] = v37;
      v60.i64[1] = v36;
      v61.i64[0] = v39;
      v61.i64[1] = v38;
      v62.i64[0] = v41;
      v62.i64[1] = v40;
      v64.i64[0] = v43;
      v63 = vextq_s8(v57, v57, 8uLL).u64[0];
      v64.i64[1] = v42;
      v157 = vextq_s8(v56, v56, 8uLL).u64[0];
      v158 = vextq_s8(v58, v58, 8uLL).u64[0];
      v66.i64[0] = v45;
      v65 = vextq_s8(v59, v59, 8uLL).u64[0];
      v66.i64[1] = v44;
      v68.i64[0] = v47;
      v155 = vextq_s8(v60, v60, 8uLL).u64[0];
      v67 = vextq_s8(v61, v61, 8uLL).u64[0];
      v68.i64[1] = v46;
      v156 = vextq_s8(v62, v62, 8uLL).u64[0];
      v70.i64[0] = v49;
      v69 = vextq_s8(v64, v64, 8uLL).u64[0];
      v70.i64[1] = v48;
      v71 = vextq_s8(v66, v66, 8uLL).u64[0];
      v73.i64[0] = v51;
      v72 = vextq_s8(v68, v68, 8uLL).u64[0];
      v73.i64[1] = v50;
      v76.i64[0] = v53;
      v74 = vextq_s8(v70, v70, 8uLL).u64[0];
      v75 = vextq_s8(v73, v73, 8uLL).u64[0];
      v76.i64[1] = v52;
      v160 = vextq_s8(v76, v76, 8uLL).u64[0];
      if (v29 <= v15)
        v54 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v77.i64[0] = v55;
      v77.i64[1] = v54;
      v159 = vextq_s8(v77, v77, 8uLL).u64[0];
      if (v30 <= v15)
      {
        v78.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        if (v33 > v15)
        {
LABEL_43:
          v79 = vextq_s8((int8x16_t)v78.u64[0], (int8x16_t)v78.u64[0], 8uLL).u64[0];
          if (v16 < v22)
            goto LABEL_44;
          goto LABEL_78;
        }
      }
      else
      {
        v78.i64[0] = 0;
        if (v33 > v15)
          goto LABEL_43;
      }
      v78.i64[1] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v79 = vextq_s8(v78, v78, 8uLL).u64[0];
      if (v16 < v22)
      {
LABEL_44:
        v80.i64[0] = 0;
        if (v25 > v16)
          goto LABEL_45;
        goto LABEL_79;
      }
LABEL_78:
      v80.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      if (v25 > v16)
      {
LABEL_45:
        v81 = vextq_s8((int8x16_t)v80.u64[0], (int8x16_t)v80.u64[0], 8uLL).u64[0];
        v82 = 0;
        if (v26 > v16)
          goto LABEL_46;
        goto LABEL_80;
      }
LABEL_79:
      v80.i64[1] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v81 = vextq_s8(v80, v80, 8uLL).u64[0];
      v82 = 0;
      if (v26 > v16)
      {
LABEL_46:
        v83.i64[0] = 0;
        if (v29 > v16)
          goto LABEL_47;
        goto LABEL_81;
      }
LABEL_80:
      v83.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      if (v29 > v16)
      {
LABEL_47:
        v84 = 0;
        if (v30 > v16)
          goto LABEL_48;
        goto LABEL_82;
      }
LABEL_81:
      v82 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v84 = 0;
      if (v30 > v16)
      {
LABEL_48:
        v83.i64[1] = v82;
        v85 = vextq_s8(v83, v83, 8uLL).u64[0];
        v86.i64[0] = 0;
        if (v33 <= v16)
          goto LABEL_83;
        goto LABEL_8;
      }
LABEL_82:
      v83.i64[1] = v82;
      v85 = vextq_s8(v83, v83, 8uLL).u64[0];
      v86.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      if (v33 <= v16)
LABEL_83:
        v84 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
LABEL_8:
      v86.i64[1] = v84;
      v17.i64[0] = v80.i64[0];
      v17.i64[1] = v81;
      v18.i64[0] = v57.i64[0];
      v18.i64[1] = v63;
      v56.i64[1] = v157;
      *v21 = v56;
      v21[1] = v18;
      v19.i64[0] = v59.i64[0];
      v19.i64[1] = v65;
      v18.i64[0] = v58.i64[0];
      v18.i64[1] = v158;
      v21[2] = v18;
      v21[3] = v19;
      v18.i64[0] = v61.i64[0];
      v18.i64[1] = v67;
      v19.i64[0] = v60.i64[0];
      v19.i64[1] = v155;
      v21[4] = v19;
      v21[5] = v18;
      v19.i64[0] = v64.i64[0];
      v19.i64[1] = v69;
      v18.i64[0] = v62.i64[0];
      v18.i64[1] = v156;
      v21[6] = v18;
      v21[7] = v19;
      v18.i64[0] = v68.i64[0];
      v18.i64[1] = v72;
      v19.i64[0] = v66.i64[0];
      v19.i64[1] = v71;
      v21[8] = v19;
      v21[9] = v18;
      v19.i64[0] = v73.i64[0];
      v19.i64[1] = v75;
      v18.i64[0] = v70.i64[0];
      v18.i64[1] = v74;
      v21[10] = v18;
      v21[11] = v19;
      v18.i64[0] = v77.i64[0];
      v18.i64[1] = v159;
      v19.i64[0] = v76.i64[0];
      v19.i64[1] = v160;
      v21[12] = v19;
      v21[13] = v18;
      v19.i64[0] = v78.i64[0];
      v19.i64[1] = v79;
      v21[14] = v19;
      v21[15] = v17;
      v19.i64[0] = v83.i64[0];
      v19.i64[1] = v85;
      v21[16] = v19;
      v21[17] = v86;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v161[0] = 0;
    v92 = *(_QWORD *)(result + 16);
    v93 = *(int64x2_t **)(result + 24);
    v94 = (uint64_t)v93->i64 - v92;
    v95 = (uint64_t)((uint64_t)v93->i64 - v92) >> 3;
    v96 = (uint64_t *)(v92 + (((unint64_t)v93 - v92) & 0xFFFFFFFFFFFFFFF8));
    v97 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v97 - (_QWORD)v93) < 0x120)
    {
      v98 = v95 + 36;
      if ((unint64_t)(v95 + 36) >> 61)
        sub_20E867F44();
      v99 = v97 - v92;
      if (v99 >> 2 > v98)
        v98 = v99 >> 2;
      if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
        v98 = 0x1FFFFFFFFFFFFFFFLL;
      v150 = v98;
      if (v98)
      {
        if (v98 >> 61)
          sub_20E877A38();
        v100 = operator new(8 * v98);
        result = v153;
        v95 = (uint64_t)((uint64_t)v93->i64 - v92) >> 3;
      }
      else
      {
        v100 = 0;
      }
      v107 = &v100[8 * v95];
      v107[16] = 0u;
      v107[17] = 0u;
      v107[14] = 0u;
      v107[15] = 0u;
      v107[12] = 0u;
      v107[13] = 0u;
      v107[10] = 0u;
      v107[11] = 0u;
      v107[8] = 0u;
      v107[9] = 0u;
      v107[6] = 0u;
      v107[7] = 0u;
      v107[4] = 0u;
      v107[5] = 0u;
      v107[2] = 0u;
      v107[3] = 0u;
      *v107 = 0u;
      v107[1] = 0u;
      if ((int64x2_t *)v92 == v93)
      {
        v109 = &v100[8 * v95];
      }
      else
      {
        if ((unint64_t)(v94 - 8) >= 0x68)
        {
          v108 = (char *)(v92 + (((unint64_t)v93 - v92) & 0xFFFFFFFFFFFFFFF8));
          v109 = &v100[8 * v95];
          if (v92 + (v94 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v100[v94 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v110 = ((unint64_t)(v94 - 8) >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = (char *)&v96[v111 / 0xFFFFFFFFFFFFFFF8];
            v109 = (char *)v107 - v111;
            v112 = &v100[8 * v95 - 16];
            v113 = (__int128 *)(v92 + 8 * v95 - 16);
            v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v115 = *v113;
              *(v112 - 1) = *(v113 - 1);
              *v112 = v115;
              v112 -= 2;
              v113 -= 2;
              v114 -= 4;
            }
            while (v114);
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_112;
          }
        }
        else
        {
          v108 = (char *)(v92 + (((unint64_t)v93 - v92) & 0xFFFFFFFFFFFFFFF8));
          v109 = &v100[8 * v95];
        }
        do
        {
          v116 = *((_QWORD *)v108 - 1);
          v108 -= 8;
          *((_QWORD *)v109 - 1) = v116;
          v109 -= 8;
        }
        while (v108 != (char *)v92);
      }
LABEL_112:
      v117 = v107 + 18;
      v118 = (char *)v93 - (char *)v96;
      if (v118)
      {
        v119 = v96;
        v120 = v100;
        memmove(v107 + 18, v119, v118);
        v100 = v120;
        result = v153;
      }
      *(_QWORD *)(result + 16) = v109;
      *(_QWORD *)(result + 24) = (char *)v117 + v118;
      *(_QWORD *)(result + 32) = &v100[8 * v150];
      v4 = a3;
      v10 = v154;
      v13 = v11 + 2;
      v12 = v11 + 1;
      v14 = v11 + 3;
      if (v92)
      {
        operator delete((void *)v92);
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        v10 = v154;
        result = v153;
      }
      goto LABEL_147;
    }
    v101 = (char *)v93 - (char *)v96;
    if ((unint64_t)((char *)v93 - (char *)v96) > 0x11F)
    {
      v103 = *(uint64_t **)(result + 24);
      v102 = 36;
      goto LABEL_123;
    }
    v102 = v101 >> 3;
    v103 = &v93->i64[36 - (v101 >> 3)];
    v104 = v101 & 0xFFFFFFFFFFFFFFF8;
    v105 = 280 - v104;
    if (280 - v104 >= 0x68)
    {
      v121 = v161 < (uint64_t *)((char *)v93[18].i64 - v104);
      if (v93 >= (int64x2_t *)v162 || (v106 = *(uint64_t **)(result + 24), !v121))
      {
        v122 = (v105 >> 3) + 1;
        v106 = &v93->i64[v122 & 0x3FFFFFFFFFFFFFFCLL];
        v123 = vdupq_lane_s64(v161[0], 0);
        v124 = v93 + 1;
        v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v124[-1] = v123;
          *v124 = v123;
          v124 += 2;
          v125 -= 4;
        }
        while (v125);
        if (v122 == (v122 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_122:
          *(_QWORD *)(result + 24) = v103;
          if (v93 == (int64x2_t *)v96)
            goto LABEL_147;
LABEL_123:
          v126 = (char *)v103 - (char *)(v96 + 36);
          v127 = v126 >> 3;
          v128 = (int64x2_t *)(v103 - 36);
          v129 = v103;
          if (v103 - 36 < (uint64_t *)v93)
          {
            v130 = (v94 & 0xFFFFFFFFFFFFFFF8) + v126;
            v131 = v92 + v130 + 8;
            if ((unint64_t)v93 > v131)
              v131 = (unint64_t)v93;
            v132 = v131 + ~v92 - v130;
            if (v132 >= 0x58)
            {
              v133 = (v132 >> 3) + 1;
              v134 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              v128 = (int64x2_t *)((char *)v128 + v134 * 8);
              v129 = &v103[v134];
              v135 = v103 + 2;
              v136 = (__int128 *)(v92 + 8 * v127 + 8 * v95 + 16);
              v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v138 = *v136;
                *(v135 - 1) = *(v136 - 1);
                *v135 = v138;
                v135 += 2;
                v136 += 2;
                v137 -= 4;
              }
              while (v137);
              if (v133 == (v133 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_132;
            }
            else
            {
              v129 = v103;
            }
            do
            {
              v139 = v128->i64[0];
              v128 = (int64x2_t *)((char *)v128 + 8);
              *v129++ = v139;
            }
            while (v128 < v93);
          }
LABEL_132:
          *(_QWORD *)(result + 24) = v129;
          if (v103 != v96 + 36)
          {
            v140 = v4;
            v141 = v102;
            memmove(&v103[-v127], (const void *)(v92 + (((unint64_t)v93 - v92) & 0xFFFFFFFFFFFFFFF8)), v126);
            v102 = v141;
            v4 = v140;
            v95 = (uint64_t)((uint64_t)v93->i64 - v92) >> 3;
            v14 = v11 + 3;
            v13 = v11 + 2;
            v12 = v11 + 1;
            v10 = v154;
            result = v153;
          }
          v142 = v161;
          if (v96 <= v161)
          {
            v143 = 36;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v161)
              v143 = 0;
            v142 = &v161[v143];
          }
          if (v102 >= 0xA)
          {
            if (v96 >= v142 + 1
              || (unint64_t)v142 >= v92 + (((unint64_t)v93 - v92) & 0xFFFFFFFFFFFFFFF8) + 8 * v102)
            {
              v96 += v102 & 0xFFFFFFFFFFFFFFFCLL;
              v144 = v102 & 3;
              v145 = vld1q_dup_f64((const double *)v142);
              v146 = (float64x2_t *)(v92 + 8 * v95 + 16);
              v147 = v102 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v146[-1] = v145;
                *v146 = v145;
                v146 += 2;
                v147 -= 4;
              }
              while (v147);
              if (v102 == (v102 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_147;
            }
            else
            {
              v144 = v102;
            }
          }
          else
          {
            v144 = v102;
          }
          do
          {
            *v96++ = *v142;
            --v144;
          }
          while (v144);
LABEL_147:
          v21 = (int8x16_t *)(*(_QWORD *)(result + 24) - 288);
          v7 = v151;
          v6 = v152;
          goto LABEL_148;
        }
      }
    }
    else
    {
      v106 = *(uint64_t **)(result + 24);
    }
    do
      *v106++ = v161[0];
    while (v106 != v103);
    goto LABEL_122;
  }
  return result;
}

uint64_t sub_20F918BBC(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  unint64_t v71;
  int8x16_t v72;
  unint64_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  uint64_t v84;
  uint64_t v85;
  int8x16_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x16_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t v92;
  uint64_t v93;
  uint64_t v94;
  int8x16_t v95;
  uint64_t v96;
  uint64_t v97;
  int8x16_t v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t v101;
  uint64_t v102;
  uint64_t v103;
  int8x16_t v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t v107;
  uint64_t v108;
  uint64_t v109;
  int8x16_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int64x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  _OWORD *v134;
  char *v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  __int128 *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  _OWORD *v144;
  size_t v145;
  uint64_t *v146;
  _BYTE *v147;
  BOOL v148;
  uint64_t v149;
  int64x2_t v150;
  int64x2_t *v151;
  uint64_t v152;
  int64_t v153;
  uint64_t v154;
  int64x2_t *v155;
  uint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  __int128 *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  float64x2_t v174;
  float64x2_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210[2];
  uint64_t v211[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v178 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v184 = result;
    v182 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = 9 * v6 + v178;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v15 = v11 + 4;
    v16 = v11 + 5;
    v17 = v11 + 6;
    v18 = v11 + 7;
    v19 = v11 + 8;
    v185 = v10;
    v183 = v6;
    while (1)
    {
      v23 = *(_QWORD *)(v10 + 8 * v9);
      if (v23 != -1)
      {
        v24 = (int8x16_t *)(*v7 + 8 * v23);
        v25 = v4 + 6 * v9;
        v26 = 0;
        v27 = 0;
        if (v11 < v25)
          goto LABEL_12;
LABEL_11:
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v114 = *(_QWORD *)(result + 80);
      if (!v114)
        break;
      v116 = *(_QWORD *)(result + 48);
      v115 = *(_QWORD *)(result + 56);
      v117 = ((v115 - v116) << 6) - 1;
      v118 = *(_QWORD *)(result + 72);
      if (v115 == v116)
        v117 = 0;
      v24 = (int8x16_t *)(*(_QWORD *)(result + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v116
                                                + (((unint64_t)(v118 + v114 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v118 + v114 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v114 - 1;
      if ((unint64_t)(v117 - (v114 + v118) + 1) >= 0x400)
      {
        operator delete(*(void **)(v115 - 8));
        v17 = v11 + 6;
        v16 = v11 + 5;
        v15 = v11 + 4;
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        v10 = v185;
        result = v184;
        *(_QWORD *)(v184 + 56) -= 8;
      }
LABEL_183:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v24->i64 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v25 = v4 + 6 * v9;
      v26 = 0;
      v27 = 0;
      if (v11 >= v25)
        goto LABEL_11;
LABEL_12:
      v28 = v25 + 1;
      if (v25 + 1 <= v11)
      {
        v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
        {
LABEL_14:
          v32 = v25 + 3;
          if (v25 + 3 > v11)
            goto LABEL_15;
          goto LABEL_95;
        }
      }
      else
      {
        v29 = v25 + 2;
        v30 = 0;
        v31 = 0;
        if (v25 + 2 > v11)
          goto LABEL_14;
      }
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v32 = v25 + 3;
      if (v25 + 3 > v11)
      {
LABEL_15:
        v33 = v25 + 4;
        v34 = 0;
        v35 = 0;
        if (v25 + 4 > v11)
          goto LABEL_16;
        goto LABEL_96;
      }
LABEL_95:
      v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v33 = v25 + 4;
      v34 = 0;
      v35 = 0;
      if (v25 + 4 > v11)
      {
LABEL_16:
        v36 = v25 + 5;
        if (v25 + 5 > v11)
          goto LABEL_17;
        goto LABEL_97;
      }
LABEL_96:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v36 = v25 + 5;
      if (v25 + 5 > v11)
      {
LABEL_17:
        v37 = 0;
        v38 = 0;
        if (v12 < v25)
          goto LABEL_18;
        goto LABEL_98;
      }
LABEL_97:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v37 = 0;
      v38 = 0;
      if (v12 < v25)
      {
LABEL_18:
        if (v28 > v12)
          goto LABEL_19;
        goto LABEL_99;
      }
LABEL_98:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v28 > v12)
      {
LABEL_19:
        v39 = 0;
        v40 = 0;
        if (v29 > v12)
          goto LABEL_20;
        goto LABEL_100;
      }
LABEL_99:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v39 = 0;
      v40 = 0;
      if (v29 > v12)
      {
LABEL_20:
        if (v32 > v12)
          goto LABEL_21;
        goto LABEL_101;
      }
LABEL_100:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v32 > v12)
      {
LABEL_21:
        v41 = 0;
        v42 = 0;
        if (v33 > v12)
          goto LABEL_22;
        goto LABEL_102;
      }
LABEL_101:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v41 = 0;
      v42 = 0;
      if (v33 > v12)
      {
LABEL_22:
        if (v36 > v12)
          goto LABEL_23;
        goto LABEL_103;
      }
LABEL_102:
      v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v36 > v12)
      {
LABEL_23:
        v43 = 0;
        v44 = 0;
        if (v13 < v25)
          goto LABEL_24;
        goto LABEL_104;
      }
LABEL_103:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v43 = 0;
      v44 = 0;
      if (v13 < v25)
      {
LABEL_24:
        if (v28 > v13)
          goto LABEL_25;
        goto LABEL_105;
      }
LABEL_104:
      v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v28 > v13)
      {
LABEL_25:
        v45 = 0;
        v46 = 0;
        if (v29 > v13)
          goto LABEL_26;
        goto LABEL_106;
      }
LABEL_105:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v45 = 0;
      v46 = 0;
      if (v29 > v13)
      {
LABEL_26:
        if (v32 > v13)
          goto LABEL_27;
        goto LABEL_107;
      }
LABEL_106:
      v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v32 > v13)
      {
LABEL_27:
        v47 = 0;
        v48 = 0;
        if (v33 > v13)
          goto LABEL_28;
        goto LABEL_108;
      }
LABEL_107:
      v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v47 = 0;
      v48 = 0;
      if (v33 > v13)
      {
LABEL_28:
        if (v36 > v13)
          goto LABEL_29;
        goto LABEL_109;
      }
LABEL_108:
      v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v36 > v13)
      {
LABEL_29:
        v49 = 0;
        v50 = 0;
        if (v14 < v25)
          goto LABEL_30;
        goto LABEL_110;
      }
LABEL_109:
      v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v49 = 0;
      v50 = 0;
      if (v14 < v25)
      {
LABEL_30:
        if (v28 > v14)
          goto LABEL_31;
        goto LABEL_111;
      }
LABEL_110:
      v50 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v28 > v14)
      {
LABEL_31:
        v51 = 0;
        v52 = 0;
        if (v29 > v14)
          goto LABEL_32;
        goto LABEL_112;
      }
LABEL_111:
      v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v51 = 0;
      v52 = 0;
      if (v29 > v14)
      {
LABEL_32:
        if (v32 > v14)
          goto LABEL_33;
        goto LABEL_113;
      }
LABEL_112:
      v52 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v32 > v14)
      {
LABEL_33:
        v53 = 0;
        v54 = 0;
        if (v33 > v14)
          goto LABEL_34;
        goto LABEL_114;
      }
LABEL_113:
      v51 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v53 = 0;
      v54 = 0;
      if (v33 > v14)
      {
LABEL_34:
        if (v36 > v14)
          goto LABEL_35;
        goto LABEL_115;
      }
LABEL_114:
      v54 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v36 > v14)
      {
LABEL_35:
        v55 = 0;
        v56 = 0;
        if (v15 < v25)
          goto LABEL_36;
        goto LABEL_116;
      }
LABEL_115:
      v53 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v55 = 0;
      v56 = 0;
      if (v15 < v25)
      {
LABEL_36:
        if (v28 <= v15)
          goto LABEL_117;
        goto LABEL_37;
      }
LABEL_116:
      v56 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      if (v28 <= v15)
      {
LABEL_117:
        v55 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v57 = 0;
        v58 = 0;
        if (v29 > v15)
          goto LABEL_39;
LABEL_38:
        v58 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        goto LABEL_39;
      }
LABEL_37:
      v57 = 0;
      v58 = 0;
      if (v29 <= v15)
        goto LABEL_38;
LABEL_39:
      v59.i64[0] = v27;
      v59.i64[1] = v26;
      v60.i64[0] = v31;
      v60.i64[1] = v30;
      v61.i64[0] = v35;
      v61.i64[1] = v34;
      v62.i64[0] = v38;
      v62.i64[1] = v37;
      v63.i64[0] = v40;
      v63.i64[1] = v39;
      v64.i64[0] = v42;
      v64.i64[1] = v41;
      v65.i64[0] = v44;
      v65.i64[1] = v43;
      v66.i64[0] = v46;
      v66.i64[1] = v45;
      v190 = vextq_s8(v61, v61, 8uLL).u64[0];
      v67.i64[0] = v48;
      v188 = vextq_s8(v59, v59, 8uLL).u64[0];
      v189 = vextq_s8(v62, v62, 8uLL).u64[0];
      v67.i64[1] = v47;
      v68.i64[0] = v50;
      v191 = vextq_s8(v64, v64, 8uLL).u64[0];
      v192 = vextq_s8(v60, v60, 8uLL).u64[0];
      v68.i64[1] = v49;
      v186 = vextq_s8(v63, v63, 8uLL).u64[0];
      v187 = vextq_s8(v65, v65, 8uLL).u64[0];
      v69.i64[0] = v52;
      v69.i64[1] = v51;
      v193 = vextq_s8(v66, v66, 8uLL).u64[0];
      v194 = vextq_s8(v67, v67, 8uLL).u64[0];
      v70.i64[0] = v54;
      v195 = vextq_s8(v68, v68, 8uLL).u64[0];
      v70.i64[1] = v53;
      v72.i64[0] = v56;
      v71 = vextq_s8(v69, v69, 8uLL).u64[0];
      v209 = vextq_s8(v70, v70, 8uLL).u64[0];
      v72.i64[1] = v55;
      v73 = vextq_s8(v72, v72, 8uLL).u64[0];
      if (v32 <= v15)
        v57 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v74.i64[0] = v58;
      v74.i64[1] = v57;
      v208 = vextq_s8(v74, v74, 8uLL).u64[0];
      v75 = 0;
      v76 = 0;
      if (v33 <= v15)
        v76 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v77.i64[0] = v76;
      if (v36 <= v15)
        v75 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
      v77.i64[1] = v75;
      v207 = vextq_s8(v77, v77, 8uLL).u64[0];
      v78 = 0;
      v79 = 0;
      if (v16 >= v25)
        v79 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v80.i64[0] = v79;
      if (v28 <= v16)
        v78 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v80.i64[1] = v78;
      v206 = vextq_s8(v80, v80, 8uLL).u64[0];
      v81 = 0;
      v82 = 0;
      if (v29 <= v16)
        v82 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v83.i64[0] = v82;
      if (v32 <= v16)
        v81 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v83.i64[1] = v81;
      v205 = vextq_s8(v83, v83, 8uLL).u64[0];
      v84 = 0;
      v85 = 0;
      if (v33 <= v16)
        v85 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v86.i64[0] = v85;
      if (v36 <= v16)
        v84 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
      v86.i64[1] = v84;
      v204 = vextq_s8(v86, v86, 8uLL).u64[0];
      v87 = 0;
      v88 = 0;
      if (v17 >= v25)
        v88 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v89.i64[0] = v88;
      if (v28 <= v17)
        v87 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v89.i64[1] = v87;
      v203 = vextq_s8(v89, v89, 8uLL).u64[0];
      v90 = 0;
      v91 = 0;
      if (v29 <= v17)
        v91 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v92.i64[0] = v91;
      if (v32 <= v17)
        v90 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v92.i64[1] = v90;
      v202 = vextq_s8(v92, v92, 8uLL).u64[0];
      v93 = 0;
      v94 = 0;
      if (v33 <= v17)
        v94 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v95.i64[0] = v94;
      if (v36 <= v17)
        v93 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
      v95.i64[1] = v93;
      v201 = vextq_s8(v95, v95, 8uLL).u64[0];
      v96 = 0;
      v97 = 0;
      if (v18 >= v25)
        v97 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v98.i64[0] = v97;
      if (v28 <= v18)
        v96 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v98.i64[1] = v96;
      v199 = vextq_s8(v98, v98, 8uLL).u64[0];
      v99 = 0;
      v100 = 0;
      if (v29 <= v18)
        v100 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v101.i64[0] = v100;
      if (v32 <= v18)
        v99 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v101.i64[1] = v99;
      v198 = vextq_s8(v101, v101, 8uLL).u64[0];
      v102 = 0;
      v103 = 0;
      if (v33 <= v18)
        v103 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v104.i64[0] = v103;
      if (v36 <= v18)
        v102 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v18));
      v104.i64[1] = v102;
      v197 = vextq_s8(v104, v104, 8uLL).u64[0];
      v105 = 0;
      v106 = 0;
      if (v19 >= v25)
        v106 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      if (v28 <= v19)
        v105 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      v107.i64[0] = v106;
      v107.i64[1] = v105;
      v200 = vextq_s8(v107, v107, 8uLL).u64[0];
      v108 = 0;
      v109 = 0;
      if (v29 <= v19)
        v109 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      v110.i64[0] = v109;
      if (v32 <= v19)
        v108 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      v110.i64[1] = v108;
      v196 = vextq_s8(v110, v110, 8uLL).u64[0];
      v111 = 0;
      v112 = 0;
      if (v33 <= v19)
        v112 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      v113.i64[0] = v112;
      if (v36 <= v19)
        v111 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v19));
      v113.i64[1] = v111;
      v20.i64[0] = v110.i64[0];
      v20.i64[1] = v196;
      v21.i64[0] = v60.i64[0];
      v21.i64[1] = v192;
      v59.i64[1] = v188;
      *v24 = v59;
      v24[1] = v21;
      v22.i64[0] = v62.i64[0];
      v22.i64[1] = v189;
      v21.i64[0] = v61.i64[0];
      v21.i64[1] = v190;
      v24[2] = v21;
      v24[3] = v22;
      v21.i64[0] = v64.i64[0];
      v21.i64[1] = v191;
      v22.i64[0] = v63.i64[0];
      v22.i64[1] = v186;
      v24[4] = v22;
      v24[5] = v21;
      v22.i64[0] = v66.i64[0];
      v22.i64[1] = v193;
      v21.i64[0] = v65.i64[0];
      v21.i64[1] = v187;
      v24[6] = v21;
      v24[7] = v22;
      v21.i64[0] = v68.i64[0];
      v21.i64[1] = v195;
      v22.i64[0] = v67.i64[0];
      v22.i64[1] = v194;
      v24[8] = v22;
      v24[9] = v21;
      v22.i64[0] = v70.i64[0];
      v22.i64[1] = v209;
      v21.i64[0] = v69.i64[0];
      v21.i64[1] = v71;
      v24[10] = v21;
      v24[11] = v22;
      v21.i64[0] = v74.i64[0];
      v21.i64[1] = v208;
      v22.i64[0] = v72.i64[0];
      v22.i64[1] = v73;
      v24[12] = v22;
      v24[13] = v21;
      v22.i64[0] = v80.i64[0];
      v22.i64[1] = v206;
      v21.i64[0] = v77.i64[0];
      v21.i64[1] = v207;
      v24[14] = v21;
      v24[15] = v22;
      v21.i64[0] = v86.i64[0];
      v21.i64[1] = v204;
      v22.i64[0] = v83.i64[0];
      v22.i64[1] = v205;
      v24[16] = v22;
      v24[17] = v21;
      v22.i64[0] = v92.i64[0];
      v22.i64[1] = v202;
      v21.i64[0] = v89.i64[0];
      v21.i64[1] = v203;
      v24[18] = v21;
      v24[19] = v22;
      v21.i64[0] = v98.i64[0];
      v21.i64[1] = v199;
      v22.i64[0] = v95.i64[0];
      v22.i64[1] = v201;
      v24[20] = v22;
      v24[21] = v21;
      v22.i64[0] = v104.i64[0];
      v22.i64[1] = v197;
      v21.i64[0] = v101.i64[0];
      v21.i64[1] = v198;
      v24[22] = v21;
      v24[23] = v22;
      v22.i64[0] = v107.i64[0];
      v22.i64[1] = v200;
      v24[24] = v22;
      v24[25] = v20;
      v24[26] = v113;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v210[0] = 0;
    v119 = *(_QWORD *)(result + 16);
    v120 = *(int64x2_t **)(result + 24);
    v121 = (uint64_t)v120->i64 - v119;
    v122 = (uint64_t)((uint64_t)v120->i64 - v119) >> 3;
    v123 = (uint64_t *)(v119 + (((unint64_t)v120 - v119) & 0xFFFFFFFFFFFFFFF8));
    v124 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v124 - (_QWORD)v120) < 0x1B0)
    {
      v125 = v122 + 54;
      if ((unint64_t)(v122 + 54) >> 61)
        sub_20E867F44();
      v126 = v124 - v119;
      if (v126 >> 2 > v125)
        v125 = v126 >> 2;
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      v180 = v125;
      if (v125)
      {
        if (v125 >> 61)
          sub_20E877A38();
        v127 = operator new(8 * v125);
        result = v184;
        v122 = (uint64_t)((uint64_t)v120->i64 - v119) >> 3;
      }
      else
      {
        v127 = 0;
      }
      v134 = &v127[8 * v122];
      v134[25] = 0u;
      v134[26] = 0u;
      v134[23] = 0u;
      v134[24] = 0u;
      v134[21] = 0u;
      v134[22] = 0u;
      v134[19] = 0u;
      v134[20] = 0u;
      v134[17] = 0u;
      v134[18] = 0u;
      v134[15] = 0u;
      v134[16] = 0u;
      v134[13] = 0u;
      v134[14] = 0u;
      v134[11] = 0u;
      v134[12] = 0u;
      v134[9] = 0u;
      v134[10] = 0u;
      v134[7] = 0u;
      v134[8] = 0u;
      v134[5] = 0u;
      v134[6] = 0u;
      v134[3] = 0u;
      v134[4] = 0u;
      v134[1] = 0u;
      v134[2] = 0u;
      *v134 = 0u;
      if ((int64x2_t *)v119 == v120)
      {
        v136 = &v127[8 * v122];
      }
      else
      {
        if ((unint64_t)(v121 - 8) >= 0x68)
        {
          v135 = (char *)(v119 + (((unint64_t)v120 - v119) & 0xFFFFFFFFFFFFFFF8));
          v136 = &v127[8 * v122];
          if (v119 + (v121 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v127[v121 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v137 = ((unint64_t)(v121 - 8) >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v135 = (char *)&v123[v138 / 0xFFFFFFFFFFFFFFF8];
            v136 = (char *)v134 - v138;
            v139 = &v127[8 * v122 - 16];
            v140 = (__int128 *)(v119 + 8 * v122 - 16);
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v140;
              *(v139 - 1) = *(v140 - 1);
              *v139 = v142;
              v139 -= 2;
              v140 -= 2;
              v141 -= 4;
            }
            while (v141);
            if (v137 == (v137 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_147;
          }
        }
        else
        {
          v135 = (char *)(v119 + (((unint64_t)v120 - v119) & 0xFFFFFFFFFFFFFFF8));
          v136 = &v127[8 * v122];
        }
        do
        {
          v143 = *((_QWORD *)v135 - 1);
          v135 -= 8;
          *((_QWORD *)v136 - 1) = v143;
          v136 -= 8;
        }
        while (v135 != (char *)v119);
      }
LABEL_147:
      v144 = v134 + 27;
      v145 = (char *)v120 - (char *)v123;
      if (v145)
      {
        v146 = v123;
        v147 = v127;
        memmove(v134 + 27, v146, v145);
        v127 = v147;
        result = v184;
      }
      *(_QWORD *)(result + 16) = v136;
      *(_QWORD *)(result + 24) = (char *)v144 + v145;
      *(_QWORD *)(result + 32) = &v127[8 * v180];
      v4 = a3;
      v10 = v185;
      v13 = v11 + 2;
      v12 = v11 + 1;
      v15 = v11 + 4;
      v14 = v11 + 3;
      v17 = v11 + 6;
      v16 = v11 + 5;
      if (v119)
      {
        operator delete((void *)v119);
        v17 = v11 + 6;
        v16 = v11 + 5;
        v15 = v11 + 4;
        v14 = v11 + 3;
        v13 = v11 + 2;
        v12 = v11 + 1;
        v10 = v185;
        result = v184;
      }
      goto LABEL_182;
    }
    v128 = (char *)v120 - (char *)v123;
    if ((unint64_t)((char *)v120 - (char *)v123) > 0x1AF)
    {
      v130 = *(uint64_t **)(result + 24);
      v129 = 54;
      goto LABEL_158;
    }
    v129 = v128 >> 3;
    v130 = &v120->i64[54 - (v128 >> 3)];
    v131 = v128 & 0xFFFFFFFFFFFFFFF8;
    v132 = 424 - v131;
    if (424 - v131 >= 0x68)
    {
      v148 = v210 < (uint64_t *)((char *)v120[27].i64 - v131);
      if (v120 >= (int64x2_t *)v211 || (v133 = *(uint64_t **)(result + 24), !v148))
      {
        v149 = (v132 >> 3) + 1;
        v133 = &v120->i64[v149 & 0x3FFFFFFFFFFFFFFCLL];
        v150 = vdupq_lane_s64(v210[0], 0);
        v151 = v120 + 1;
        v152 = v149 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v151[-1] = v150;
          *v151 = v150;
          v151 += 2;
          v152 -= 4;
        }
        while (v152);
        if (v149 == (v149 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_157:
          *(_QWORD *)(result + 24) = v130;
          if (v120 == (int64x2_t *)v123)
            goto LABEL_182;
LABEL_158:
          v153 = (char *)v130 - (char *)(v123 + 54);
          v154 = v153 >> 3;
          v155 = (int64x2_t *)(v130 - 54);
          v156 = v130;
          if (v130 - 54 < (uint64_t *)v120)
          {
            v157 = (v121 & 0xFFFFFFFFFFFFFFF8) + v153;
            v158 = v119 + v157 + 8;
            if ((unint64_t)v120 > v158)
              v158 = (unint64_t)v120;
            v159 = v158 + ~v119 - v157;
            if (v159 >= 0x58)
            {
              v177 = v129;
              v160 = (v159 >> 3) + 1;
              v161 = v160 & 0x3FFFFFFFFFFFFFFCLL;
              v155 = (int64x2_t *)((char *)v155 + v161 * 8);
              v156 = &v130[v161];
              v162 = v130 + 2;
              v163 = (__int128 *)(v119 + 8 * v154 + 8 * v122 + 16);
              v164 = v160 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v165 = *v163;
                *(v162 - 1) = *(v163 - 1);
                *v162 = v165;
                v162 += 2;
                v163 += 2;
                v164 -= 4;
              }
              while (v164);
              v122 = (uint64_t)((uint64_t)v120->i64 - v119) >> 3;
              v129 = v177;
              if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_167;
            }
            else
            {
              v156 = v130;
            }
            do
            {
              v166 = v155->i64[0];
              v155 = (int64x2_t *)((char *)v155 + 8);
              *v156++ = v166;
            }
            while (v155 < v120);
          }
LABEL_167:
          v181 = (uint64_t)v120->i64 - v119;
          *(_QWORD *)(result + 24) = v156;
          if (v130 != v123 + 54)
          {
            v167 = (char *)(v119 + (((unint64_t)v120 - v119) & 0xFFFFFFFFFFFFFFF8));
            v168 = v122;
            v169 = v4;
            v170 = v129;
            memmove(&v130[-v154], v167, v153);
            v129 = v170;
            v4 = v169;
            v122 = v168;
            v17 = v11 + 6;
            v16 = v11 + 5;
            v15 = v11 + 4;
            v14 = v11 + 3;
            v13 = v11 + 2;
            v12 = v11 + 1;
            v10 = v185;
            result = v184;
          }
          v171 = v210;
          if (v123 <= v210)
          {
            v172 = 54;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v210)
              v172 = 0;
            v171 = &v210[v172];
          }
          if (v129 >= 0xA)
          {
            if (v123 >= v171 + 1 || (unint64_t)v171 >= v119 + (v181 & 0xFFFFFFFFFFFFFFF8) + 8 * v129)
            {
              v123 += v129 & 0xFFFFFFFFFFFFFFFCLL;
              v173 = v129 & 3;
              v174 = vld1q_dup_f64((const double *)v171);
              v175 = (float64x2_t *)(v119 + 8 * v122 + 16);
              v176 = v129 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v175[-1] = v174;
                *v175 = v174;
                v175 += 2;
                v176 -= 4;
              }
              while (v176);
              if (v129 == (v129 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_182;
            }
            else
            {
              v173 = v129;
            }
          }
          else
          {
            v173 = v129;
          }
          do
          {
            *v123++ = *v171;
            --v173;
          }
          while (v173);
LABEL_182:
          v24 = (int8x16_t *)(*(_QWORD *)(result + 24) - 432);
          v7 = v182;
          v6 = v183;
          goto LABEL_183;
        }
      }
    }
    else
    {
      v133 = *(uint64_t **)(result + 24);
    }
    do
      *v133++ = v210[0];
    while (v133 != v130);
    goto LABEL_157;
  }
  return result;
}

uint64_t sub_20F919EC0(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int8x16_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  int8x16_t v58;
  unint64_t v59;
  int8x16_t v60;
  unint64_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64x2_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  _OWORD *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  _OWORD *v93;
  size_t v94;
  uint64_t *v95;
  _BYTE *v96;
  BOOL v97;
  uint64_t v98;
  int64x2_t v99;
  int64x2_t *v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  int64x2_t *v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  float64x2_t v121;
  float64x2_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131[2];
  uint64_t v132[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v124 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v129 = result;
    v127 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = 3 * v6 + v124;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v130 = v10;
    v128 = v6;
    while (1)
    {
      v20 = *(_QWORD *)(v10 + 8 * v9);
      if (v20 != -1)
      {
        v21 = (int8x16_t *)(*v7 + 8 * v20);
        v22 = v4 + 6 * v9;
        v23 = 0;
        v24 = 0;
        if (v11 < v22)
          goto LABEL_12;
LABEL_11:
        v24 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v63 = *(_QWORD *)(result + 80);
      if (!v63)
        break;
      v65 = *(_QWORD *)(result + 48);
      v64 = *(_QWORD *)(result + 56);
      v66 = ((v64 - v65) << 6) - 1;
      v67 = *(_QWORD *)(result + 72);
      if (v64 == v65)
        v66 = 0;
      v21 = (int8x16_t *)(*(_QWORD *)(result + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v65 + (((unint64_t)(v67 + v63 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v67 + v63 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v63 - 1;
      if ((unint64_t)(v66 - (v63 + v67) + 1) >= 0x400)
      {
        operator delete(*(void **)(v64 - 8));
        result = v129;
        v10 = v130;
        *(_QWORD *)(v129 + 56) -= 8;
      }
LABEL_111:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v21->i64 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v22 = v4 + 6 * v9;
      v23 = 0;
      v24 = 0;
      if (v11 >= v22)
        goto LABEL_11;
LABEL_12:
      v25 = v22 + 1;
      if (v22 + 1 <= v11)
      {
        v23 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v26 = v22 + 2;
        v27 = 0;
        v28 = 0;
        if (v22 + 2 > v11)
        {
LABEL_14:
          v29 = v22 + 3;
          if (v22 + 3 > v11)
            goto LABEL_15;
          goto LABEL_33;
        }
      }
      else
      {
        v26 = v22 + 2;
        v27 = 0;
        v28 = 0;
        if (v22 + 2 > v11)
          goto LABEL_14;
      }
      v28 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v29 = v22 + 3;
      if (v22 + 3 > v11)
      {
LABEL_15:
        v30 = v22 + 4;
        v31 = 0;
        v32.i64[0] = 0;
        if (v22 + 4 > v11)
          goto LABEL_16;
        goto LABEL_34;
      }
LABEL_33:
      v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v30 = v22 + 4;
      v31 = 0;
      v32.i64[0] = 0;
      if (v22 + 4 > v11)
      {
LABEL_16:
        v33 = v22 + 5;
        if (v22 + 5 > v11)
          goto LABEL_17;
        goto LABEL_35;
      }
LABEL_34:
      v32.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v33 = v22 + 5;
      if (v22 + 5 > v11)
      {
LABEL_17:
        v34 = 0;
        v35 = 0;
        if (v12 < v22)
          goto LABEL_18;
        goto LABEL_36;
      }
LABEL_35:
      v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v34 = 0;
      v35 = 0;
      if (v12 < v22)
      {
LABEL_18:
        if (v25 > v12)
          goto LABEL_19;
        goto LABEL_37;
      }
LABEL_36:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v25 > v12)
      {
LABEL_19:
        v36 = 0;
        v37 = 0;
        if (v26 > v12)
          goto LABEL_20;
        goto LABEL_38;
      }
LABEL_37:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v36 = 0;
      v37 = 0;
      if (v26 > v12)
      {
LABEL_20:
        if (v29 > v12)
          goto LABEL_21;
        goto LABEL_39;
      }
LABEL_38:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v29 > v12)
      {
LABEL_21:
        v38 = 0;
        v39 = 0;
        if (v30 > v12)
          goto LABEL_22;
        goto LABEL_40;
      }
LABEL_39:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v38 = 0;
      v39 = 0;
      if (v30 > v12)
      {
LABEL_22:
        if (v33 > v12)
          goto LABEL_23;
        goto LABEL_41;
      }
LABEL_40:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v33 > v12)
      {
LABEL_23:
        v40 = 0;
        v41 = 0;
        if (v13 < v22)
          goto LABEL_24;
        goto LABEL_42;
      }
LABEL_41:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v40 = 0;
      v41 = 0;
      if (v13 < v22)
      {
LABEL_24:
        if (v25 > v13)
          goto LABEL_25;
        goto LABEL_43;
      }
LABEL_42:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v25 > v13)
      {
LABEL_25:
        v42 = 0;
        v43 = 0;
        if (v26 > v13)
          goto LABEL_26;
        goto LABEL_44;
      }
LABEL_43:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v42 = 0;
      v43 = 0;
      if (v26 > v13)
      {
LABEL_26:
        if (v29 <= v13)
          goto LABEL_45;
        goto LABEL_27;
      }
LABEL_44:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v29 <= v13)
      {
LABEL_45:
        v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v44 = 0;
        v45 = 0;
        if (v30 > v13)
          goto LABEL_29;
LABEL_28:
        v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        goto LABEL_29;
      }
LABEL_27:
      v44 = 0;
      v45 = 0;
      if (v30 <= v13)
        goto LABEL_28;
LABEL_29:
      v46.i64[0] = v24;
      v46.i64[1] = v23;
      v47 = vextq_s8(v46, v46, 8uLL).u64[0];
      v48.i64[0] = v28;
      v48.i64[1] = v27;
      v49.i64[0] = v32.i64[0];
      v49.i64[1] = v31;
      v50 = vextq_s8(v48, v48, 8uLL).u64[0];
      v51 = vextq_s8(v49, v49, 8uLL).u64[0];
      v52.i64[0] = v35;
      v52.i64[1] = v34;
      v53.i64[0] = v37;
      v54 = vextq_s8(v52, v52, 8uLL).u64[0];
      v53.i64[1] = v36;
      v55 = vextq_s8(v53, v53, 8uLL).u64[0];
      v56.i64[0] = v39;
      v56.i64[1] = v38;
      v57 = vextq_s8(v56, v56, 8uLL).u64[0];
      v58.i64[0] = v41;
      v58.i64[1] = v40;
      v59 = vextq_s8(v58, v58, 8uLL).u64[0];
      v60.i64[0] = v43;
      v60.i64[1] = v42;
      v61 = vextq_s8(v60, v60, 8uLL).u64[0];
      v62.i64[0] = v45;
      if (v33 <= v13)
        v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v62.i64[1] = v44;
      v14.i64[0] = v43;
      v14.i64[1] = v61;
      v15.i64[0] = v41;
      v15.i64[1] = v59;
      v16.i64[0] = v39;
      v16.i64[1] = v57;
      v17.i64[0] = v37;
      v17.i64[1] = v55;
      v18.i64[0] = v35;
      v18.i64[1] = v54;
      v32.i64[1] = v51;
      v19.i64[0] = v48.i64[0];
      v19.i64[1] = v50;
      v46.i64[1] = v47;
      *v21 = v46;
      v21[1] = v19;
      v21[2] = v32;
      v21[3] = v18;
      v21[4] = v17;
      v21[5] = v16;
      v21[6] = v15;
      v21[7] = v14;
      v21[8] = v62;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v131[0] = 0;
    v68 = *(_QWORD *)(result + 16);
    v69 = *(int64x2_t **)(result + 24);
    v70 = (uint64_t)v69->i64 - v68;
    v71 = (uint64_t)((uint64_t)v69->i64 - v68) >> 3;
    v72 = (uint64_t *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8));
    v73 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v73 - (_QWORD)v69) < 0x90)
    {
      v74 = v71 + 18;
      if ((unint64_t)(v71 + 18) >> 61)
        sub_20E867F44();
      v75 = v73 - v68;
      if (v75 >> 2 > v74)
        v74 = v75 >> 2;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      v126 = v74;
      if (v74)
      {
        if (v74 >> 61)
          sub_20E877A38();
        v76 = operator new(8 * v74);
        result = v129;
        v71 = (uint64_t)((uint64_t)v69->i64 - v68) >> 3;
      }
      else
      {
        v76 = 0;
      }
      v83 = &v76[8 * v71];
      v83[7] = 0u;
      v83[8] = 0u;
      v83[5] = 0u;
      v83[6] = 0u;
      v83[3] = 0u;
      v83[4] = 0u;
      v83[1] = 0u;
      v83[2] = 0u;
      *v83 = 0u;
      if ((int64x2_t *)v68 == v69)
      {
        v85 = &v76[8 * v71];
      }
      else
      {
        if ((unint64_t)(v70 - 8) >= 0x68)
        {
          v84 = (char *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8));
          v85 = &v76[8 * v71];
          if (v68 + (v70 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v76[v70 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v86 = ((unint64_t)(v70 - 8) >> 3) + 1;
            v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
            v84 = (char *)&v72[v87 / 0xFFFFFFFFFFFFFFF8];
            v85 = (char *)v83 - v87;
            v88 = &v76[8 * v71 - 16];
            v89 = (__int128 *)(v68 + 8 * v71 - 16);
            v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v91 = *v89;
              *(v88 - 1) = *(v89 - 1);
              *v88 = v91;
              v88 -= 2;
              v89 -= 2;
              v90 -= 4;
            }
            while (v90);
            if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_75;
          }
        }
        else
        {
          v84 = (char *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8));
          v85 = &v76[8 * v71];
        }
        do
        {
          v92 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v85 - 1) = v92;
          v85 -= 8;
        }
        while (v84 != (char *)v68);
      }
LABEL_75:
      v93 = v83 + 9;
      v94 = (char *)v69 - (char *)v72;
      if (v94)
      {
        v95 = v72;
        v96 = v76;
        memmove(v83 + 9, v95, v94);
        v76 = v96;
        result = v129;
      }
      *(_QWORD *)(result + 16) = v85;
      *(_QWORD *)(result + 24) = (char *)v93 + v94;
      *(_QWORD *)(result + 32) = &v76[8 * v126];
      v4 = a3;
      v10 = v130;
      if (v68)
      {
        operator delete((void *)v68);
        result = v129;
        v10 = v130;
      }
      goto LABEL_110;
    }
    v77 = (char *)v69 - (char *)v72;
    if ((unint64_t)((char *)v69 - (char *)v72) > 0x8F)
    {
      v79 = *(uint64_t **)(result + 24);
      v78 = 18;
      goto LABEL_86;
    }
    v78 = v77 >> 3;
    v79 = &v69->i64[18 - (v77 >> 3)];
    v80 = v77 & 0xFFFFFFFFFFFFFFF8;
    v81 = 136 - v80;
    if (136 - v80 >= 0x68)
    {
      v97 = v131 < (uint64_t *)((char *)v69[9].i64 - v80);
      if (v69 >= (int64x2_t *)v132 || (v82 = *(uint64_t **)(result + 24), !v97))
      {
        v98 = (v81 >> 3) + 1;
        v82 = &v69->i64[v98 & 0x3FFFFFFFFFFFFFFCLL];
        v99 = vdupq_lane_s64(v131[0], 0);
        v100 = v69 + 1;
        v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v100[-1] = v99;
          *v100 = v99;
          v100 += 2;
          v101 -= 4;
        }
        while (v101);
        if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_85:
          *(_QWORD *)(result + 24) = v79;
          if (v69 == (int64x2_t *)v72)
            goto LABEL_110;
LABEL_86:
          v102 = (char *)v79 - (char *)(v72 + 18);
          v103 = v102 >> 3;
          v104 = (int64x2_t *)(v79 - 18);
          v105 = v79;
          if (v79 - 18 < (uint64_t *)v69)
          {
            v106 = (v70 & 0xFFFFFFFFFFFFFFF8) + v102;
            v107 = v68 + v106 + 8;
            if ((unint64_t)v69 > v107)
              v107 = (unint64_t)v69;
            v108 = v107 + ~v68 - v106;
            if (v108 >= 0x58)
            {
              v109 = (v108 >> 3) + 1;
              v110 = v109 & 0x3FFFFFFFFFFFFFFCLL;
              v104 = (int64x2_t *)((char *)v104 + v110 * 8);
              v105 = &v79[v110];
              v111 = v79 + 2;
              v112 = (__int128 *)(v68 + 8 * v103 + 8 * v71 + 16);
              v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v114 = *v112;
                *(v111 - 1) = *(v112 - 1);
                *v111 = v114;
                v111 += 2;
                v112 += 2;
                v113 -= 4;
              }
              while (v113);
              if (v109 == (v109 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_95;
            }
            else
            {
              v105 = v79;
            }
            do
            {
              v115 = v104->i64[0];
              v104 = (int64x2_t *)((char *)v104 + 8);
              *v105++ = v115;
            }
            while (v104 < v69);
          }
LABEL_95:
          *(_QWORD *)(result + 24) = v105;
          if (v79 != v72 + 18)
          {
            v116 = v4;
            v117 = v78;
            memmove(&v79[-v103], (const void *)(v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8)), v102);
            v78 = v117;
            v4 = v116;
            v71 = (uint64_t)((uint64_t)v69->i64 - v68) >> 3;
            result = v129;
            v10 = v130;
          }
          v118 = v131;
          if (v72 <= v131)
          {
            v119 = 18;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v131)
              v119 = 0;
            v118 = &v131[v119];
          }
          if (v78 >= 0xA)
          {
            if (v72 >= v118 + 1
              || (unint64_t)v118 >= v68 + (((unint64_t)v69 - v68) & 0xFFFFFFFFFFFFFFF8) + 8 * v78)
            {
              v72 += v78 & 0xFFFFFFFFFFFFFFFCLL;
              v120 = v78 & 3;
              v121 = vld1q_dup_f64((const double *)v118);
              v122 = (float64x2_t *)(v68 + 8 * v71 + 16);
              v123 = v78 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v122[-1] = v121;
                *v122 = v121;
                v122 += 2;
                v123 -= 4;
              }
              while (v123);
              if (v78 == (v78 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_110;
            }
            else
            {
              v120 = v78;
            }
          }
          else
          {
            v120 = v78;
          }
          do
          {
            *v72++ = *v118;
            --v120;
          }
          while (v120);
LABEL_110:
          v21 = (int8x16_t *)(*(_QWORD *)(result + 24) - 144);
          v7 = v127;
          v6 = v128;
          goto LABEL_111;
        }
      }
    }
    else
    {
      v82 = *(uint64_t **)(result + 24);
    }
    do
      *v82++ = v131[0];
    while (v82 != v79);
    goto LABEL_85;
  }
  return result;
}

void sub_20F91A930(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int8x16_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _OWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _OWORD *v59;
  size_t v60;
  BOOL v61;
  uint64_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  int64x2_t *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  __int128 *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  const double *v80;
  uint64_t v81;
  unint64_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v7 = 0;
    v8 = (_QWORD *)(a1 + 16);
    v86 = HIDWORD(a3);
    LODWORD(v9) = 1;
    v90 = a3;
    v91 = (_QWORD *)(a1 + 16);
    while (!(_DWORD)v9)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 88) + 8 * (*(_DWORD *)(a1 + 112) * v7);
    v12 = v7 + v86;
    v92 = v7;
    v87 = v11;
    while (1)
    {
      v15 = *(_QWORD *)(v11 + 8 * v10);
      if (v15 != -1)
      {
        v16 = *v8 + 8 * v15;
        v17 = v5 + 6 * v10;
        v18 = 0;
        v19.i64[0] = 0;
        if (v12 < v17)
          goto LABEL_12;
LABEL_11:
        v19.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v17 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        goto LABEL_12;
      }
      v28 = *(_QWORD *)(a1 + 80);
      if (!v28)
        break;
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = ((v29 - v30) << 6) - 1;
      v32 = *(_QWORD *)(a1 + 72);
      if (v29 == v30)
        v31 = 0;
      v16 = *(_QWORD *)(a1 + 16)
          + 8
          * *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(v32 + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v32 + v28 - 1) & 0x1FF));
      *(_QWORD *)(a1 + 80) = v28 - 1;
      if ((unint64_t)(v31 - (v28 + v32) + 1) >= 0x400)
      {
        operator delete(*(void **)(v29 - 8));
        *(_QWORD *)(a1 + 56) -= 8;
      }
LABEL_86:
      *(_QWORD *)(v11 + 8 * v10) = (v16 - *(_QWORD *)(a1 + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v17 = v5 + 6 * v10;
      v18 = 0;
      v19.i64[0] = 0;
      if (v12 >= v17)
        goto LABEL_11;
LABEL_12:
      if (v17 + 1 <= v12)
      {
        v18 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v17 + 1 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v20 = v17 + 2;
        v21 = 0;
        v22 = 0;
        if (v17 + 2 > v12)
        {
LABEL_14:
          v23 = v17 + 3;
          if (v17 + 3 > v12)
            goto LABEL_15;
          goto LABEL_20;
        }
      }
      else
      {
        v20 = v17 + 2;
        v21 = 0;
        v22 = 0;
        if (v17 + 2 > v12)
          goto LABEL_14;
      }
      v22 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v23 = v17 + 3;
      if (v17 + 3 > v12)
      {
LABEL_15:
        v24 = v17 + 4;
        v25 = 0;
        v26 = 0;
        if (v17 + 4 > v12)
          goto LABEL_16;
        goto LABEL_21;
      }
LABEL_20:
      v21 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v24 = v17 + 4;
      v25 = 0;
      v26 = 0;
      if (v17 + 4 > v12)
      {
LABEL_16:
        v27 = v17 + 5;
        if (v27 <= v12)
          goto LABEL_22;
        goto LABEL_8;
      }
LABEL_21:
      v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v27 = v17 + 5;
      if (v27 <= v12)
LABEL_22:
        v25 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
LABEL_8:
      v19.i64[1] = v18;
      v13.i64[0] = v22;
      v13.i64[1] = v21;
      *(_QWORD *)&v14 = v26;
      *((_QWORD *)&v14 + 1) = v25;
      v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
      v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
      *(int8x16_t *)v16 = v19;
      *(int8x16_t *)(v16 + 16) = v13;
      *(_OWORD *)(v16 + 32) = v14;
      ++v10;
      v9 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v93 = 0;
    v33 = *(_QWORD *)(a1 + 16);
    v34 = *(int64x2_t **)(a1 + 24);
    v35 = (unint64_t)v34 - v33;
    v36 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
    v37 = (uint64_t *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
    v38 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v38 - (_QWORD)v34) < 0x30)
    {
      v39 = v36 + 6;
      if ((unint64_t)(v36 + 6) >> 61)
        sub_20E867F44();
      v40 = v38 - v33;
      if (v40 >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      v88 = v39;
      if (v39)
      {
        if (v39 >> 61)
          sub_20E877A38();
        v41 = operator new(8 * v39);
        v42 = &v41[8 * v36];
        v42[1] = 0u;
        v42[2] = 0u;
        *v42 = 0u;
        if ((int64x2_t *)v33 != v34)
          goto LABEL_37;
      }
      else
      {
        v41 = 0;
        v42 = (_OWORD *)(8 * v36);
        v42[1] = 0u;
        v42[2] = 0u;
        *v42 = 0u;
        if ((int64x2_t *)v33 != v34)
        {
LABEL_37:
          if (v35 - 8 >= 0x68)
          {
            v43 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v44 = (char *)v42;
            if (v33 + (v35 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v41[v35 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v51 = ((v35 - 8) >> 3) + 1;
              v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = (char *)&v37[v52 / 0xFFFFFFFFFFFFFFF8];
              v44 = (char *)v42 - v52;
              v53 = 8 * ((uint64_t)((uint64_t)v34->i64 - v33) >> 3);
              v54 = &v41[v53 - 16];
              v55 = (__int128 *)(v33 + v53 - 16);
              v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v57 = *v55;
                *(v54 - 1) = *(v55 - 1);
                *v54 = v57;
                v54 -= 2;
                v55 -= 2;
                v56 -= 4;
              }
              while (v56);
              if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_50;
            }
          }
          else
          {
            v43 = (char *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8));
            v44 = (char *)v42;
          }
          do
          {
            v58 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *((_QWORD *)v44 - 1) = v58;
            v44 -= 8;
          }
          while (v43 != (char *)v33);
LABEL_50:
          v59 = v42 + 3;
          v60 = (char *)v34 - (char *)v37;
          if (v60)
            memmove(v42 + 3, v37, v60);
          *(_QWORD *)(a1 + 16) = v44;
          *(_QWORD *)(a1 + 24) = (char *)v59 + v60;
          *(_QWORD *)(a1 + 32) = &v41[8 * v88];
          v11 = v87;
          if (v33)
            operator delete((void *)v33);
          goto LABEL_85;
        }
      }
      v44 = (char *)v42;
      goto LABEL_50;
    }
    v89 = (uint64_t)((uint64_t)v34->i64 - v33) >> 3;
    v45 = (char *)v34 - (char *)v37;
    if ((unint64_t)((char *)v34 - (char *)v37) > 0x2F)
    {
      v47 = *(uint64_t **)(a1 + 24);
      v46 = 6;
      goto LABEL_61;
    }
    v46 = v45 >> 3;
    v47 = &v34->i64[6 - (v45 >> 3)];
    v48 = v45 & 0xFFFFFFFFFFFFFFF8;
    v49 = 40 - v48;
    if (40 - v48 >= 0x68)
    {
      v61 = &v93 < (uint64_t *)((char *)v34[3].i64 - v48);
      if (v34 >= (int64x2_t *)&v94 || (v50 = *(uint64_t **)(a1 + 24), !v61))
      {
        v62 = (v49 >> 3) + 1;
        v50 = &v34->i64[v62 & 0x3FFFFFFFFFFFFFFCLL];
        v63 = vdupq_lane_s64(v93, 0);
        v64 = v34 + 1;
        v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v64[-1] = v63;
          *v64 = v63;
          v64 += 2;
          v65 -= 4;
        }
        while (v65);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_60:
          *(_QWORD *)(a1 + 24) = v47;
          if (v34 == (int64x2_t *)v37)
            goto LABEL_85;
LABEL_61:
          v66 = (char *)v47 - (char *)(v37 + 6);
          v67 = v66 >> 3;
          v68 = (int64x2_t *)(v47 - 6);
          v69 = (char *)v47;
          if (v47 - 6 < (uint64_t *)v34)
          {
            v70 = (v35 & 0xFFFFFFFFFFFFFFF8) + v66;
            v71 = v33 + v70 + 8;
            if ((unint64_t)v34 > v71)
              v71 = (unint64_t)v34;
            v72 = v71 + ~v33 - v70;
            if (v72 >= 0x58)
            {
              v73 = (v72 >> 3) + 1;
              v74 = v73 & 0x3FFFFFFFFFFFFFFCLL;
              v68 = (int64x2_t *)((char *)v68 + v74 * 8);
              v69 = (char *)&v47[v74];
              v75 = v47 + 2;
              v76 = (__int128 *)(v33 + 8 * v67 + 8 * v89 + 16);
              v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v78 = *v76;
                *(v75 - 1) = *(v76 - 1);
                *v75 = v78;
                v75 += 2;
                v76 += 2;
                v77 -= 4;
              }
              while (v77);
              if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_70;
            }
            else
            {
              v69 = (char *)v47;
            }
            do
            {
              v79 = v68->i64[0];
              v68 = (int64x2_t *)((char *)v68 + 8);
              *(_QWORD *)v69 = v79;
              v69 += 8;
            }
            while (v68 < v34);
          }
LABEL_70:
          *(_QWORD *)(a1 + 24) = v69;
          if (v47 != v37 + 6)
            memmove(&v47[-v67], (const void *)(v33 + (((unint64_t)v34 - v33) & 0xFFFFFFFFFFFFFFF8)), v66);
          v80 = (const double *)&v93;
          if (v37 <= &v93)
          {
            v81 = 48;
            if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v93)
              v81 = 0;
            v80 = (const double *)((char *)&v93 + v81);
          }
          if (v46 >= 0xA)
          {
            if (v37 >= (uint64_t *)v80 + 1 || (unint64_t)v80 >= v33 + (v35 & 0xFFFFFFFFFFFFFFF8) + 8 * v46)
            {
              v37 += v46 & 0xFFFFFFFFFFFFFFFCLL;
              v82 = v46 & 3;
              v83 = vld1q_dup_f64(v80);
              v84 = (float64x2_t *)(v33 + 8 * v89 + 16);
              v85 = v46 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v84[-1] = v83;
                *v84 = v83;
                v84 += 2;
                v85 -= 4;
              }
              while (v85);
              if (v46 == (v46 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_85;
            }
            else
            {
              v82 = v46;
            }
          }
          else
          {
            v82 = v46;
          }
          do
          {
            *v37++ = *(_QWORD *)v80;
            --v82;
          }
          while (v82);
LABEL_85:
          v16 = *(_QWORD *)(a1 + 24) - 48;
          v5 = v90;
          v8 = v91;
          v7 = v92;
          goto LABEL_86;
        }
      }
    }
    else
    {
      v50 = *(uint64_t **)(a1 + 24);
    }
    do
      *v50++ = v93;
    while (v50 != v47);
    goto LABEL_60;
  }
}

uint64_t sub_20F91B038(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int8x16_t v60;
  unint64_t v61;
  int8x16_t v62;
  unint64_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  unint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  _OWORD *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  _OWORD *v103;
  size_t v104;
  uint64_t *v105;
  _BYTE *v106;
  BOOL v107;
  uint64_t v108;
  int64x2_t v109;
  int64x2_t *v110;
  uint64_t v111;
  int64_t v112;
  uint64_t v113;
  int64x2_t *v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  __int128 *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  float64x2_t v132;
  float64x2_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  _QWORD *v138;
  _OWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144[2];
  uint64_t v145[2];

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 && *(_DWORD *)(result + 8))
  {
    v4 = a3;
    v6 = 0;
    v7 = (_QWORD *)(result + 16);
    v135 = HIDWORD(a3);
    LODWORD(v8) = 1;
    v142 = result;
    v137 = a3;
    v138 = (_QWORD *)(result + 16);
    while (!(_DWORD)v8)
    {
LABEL_5:
      if (++v6 >= v3)
        return result;
    }
    v9 = 0;
    v10 = *(_QWORD *)(result + 88) + 8 * (*(_DWORD *)(result + 112) * v6);
    v11 = v135 + 4 * v6;
    v12 = v11 + 1;
    v13 = v11 + 2;
    v14 = v11 + 3;
    v143 = v10;
    v141 = v6;
    while (1)
    {
      v18 = *(_QWORD *)(v10 + 8 * v9);
      if (v18 != -1)
      {
        v19 = (int8x16_t *)(*v7 + 8 * v18);
        v20 = v4 + 6 * v9;
        v21 = 0;
        v22 = 0;
        if (v11 < v20)
          goto LABEL_12;
LABEL_11:
        v22 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        goto LABEL_12;
      }
      v73 = *(_QWORD *)(result + 80);
      if (!v73)
        break;
      v75 = *(_QWORD *)(result + 48);
      v74 = *(_QWORD *)(result + 56);
      v76 = ((v74 - v75) << 6) - 1;
      v77 = *(_QWORD *)(result + 72);
      if (v74 == v75)
        v76 = 0;
      v19 = (int8x16_t *)(*(_QWORD *)(result + 16)
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v75 + (((unint64_t)(v77 + v73 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v77 + v73 - 1) & 0x1FF)));
      *(_QWORD *)(result + 80) = v73 - 1;
      if ((unint64_t)(v76 - (v73 + v77) + 1) >= 0x400)
      {
        operator delete(*(void **)(v74 - 8));
        result = v142;
        v10 = v143;
        *(_QWORD *)(v142 + 56) -= 8;
      }
LABEL_123:
      *(_QWORD *)(v10 + 8 * v9) = ((uint64_t)v19->i64 - *(_QWORD *)(result + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
      v20 = v4 + 6 * v9;
      v21 = 0;
      v22 = 0;
      if (v11 >= v20)
        goto LABEL_11;
LABEL_12:
      v23 = v20 + 1;
      if (v20 + 1 <= v11)
      {
        v21 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
        v24 = v20 + 2;
        v25 = 0;
        v26 = 0;
        if (v20 + 2 > v11)
        {
LABEL_14:
          v27 = v20 + 3;
          if (v20 + 3 > v11)
            goto LABEL_15;
          goto LABEL_39;
        }
      }
      else
      {
        v24 = v20 + 2;
        v25 = 0;
        v26 = 0;
        if (v20 + 2 > v11)
          goto LABEL_14;
      }
      v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v27 = v20 + 3;
      if (v20 + 3 > v11)
      {
LABEL_15:
        v28 = v20 + 4;
        v29 = 0;
        v30 = 0;
        if (v20 + 4 > v11)
          goto LABEL_16;
        goto LABEL_40;
      }
LABEL_39:
      v25 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v28 = v20 + 4;
      v29 = 0;
      v30 = 0;
      if (v20 + 4 > v11)
      {
LABEL_16:
        v31 = v20 + 5;
        if (v20 + 5 > v11)
          goto LABEL_17;
        goto LABEL_41;
      }
LABEL_40:
      v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v31 = v20 + 5;
      if (v20 + 5 > v11)
      {
LABEL_17:
        v32 = 0;
        v33 = 0;
        if (v12 < v20)
          goto LABEL_18;
        goto LABEL_42;
      }
LABEL_41:
      v29 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v11));
      v32 = 0;
      v33 = 0;
      if (v12 < v20)
      {
LABEL_18:
        if (v23 > v12)
          goto LABEL_19;
        goto LABEL_43;
      }
LABEL_42:
      v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v23 > v12)
      {
LABEL_19:
        v34 = 0;
        v35 = 0;
        if (v24 > v12)
          goto LABEL_20;
        goto LABEL_44;
      }
LABEL_43:
      v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v34 = 0;
      v35 = 0;
      if (v24 > v12)
      {
LABEL_20:
        if (v27 > v12)
          goto LABEL_21;
        goto LABEL_45;
      }
LABEL_44:
      v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v27 > v12)
      {
LABEL_21:
        v36 = 0;
        v37 = 0;
        if (v28 > v12)
          goto LABEL_22;
        goto LABEL_46;
      }
LABEL_45:
      v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v36 = 0;
      v37 = 0;
      if (v28 > v12)
      {
LABEL_22:
        if (v31 > v12)
          goto LABEL_23;
        goto LABEL_47;
      }
LABEL_46:
      v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      if (v31 > v12)
      {
LABEL_23:
        v38 = 0;
        v39 = 0;
        if (v13 < v20)
          goto LABEL_24;
        goto LABEL_48;
      }
LABEL_47:
      v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
      v38 = 0;
      v39 = 0;
      if (v13 < v20)
      {
LABEL_24:
        if (v23 > v13)
          goto LABEL_25;
        goto LABEL_49;
      }
LABEL_48:
      v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v23 > v13)
      {
LABEL_25:
        v40 = 0;
        v41 = 0;
        if (v24 > v13)
          goto LABEL_26;
        goto LABEL_50;
      }
LABEL_49:
      v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v40 = 0;
      v41 = 0;
      if (v24 > v13)
      {
LABEL_26:
        if (v27 > v13)
          goto LABEL_27;
        goto LABEL_51;
      }
LABEL_50:
      v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v27 > v13)
      {
LABEL_27:
        v42 = 0;
        v43 = 0;
        if (v28 > v13)
          goto LABEL_28;
        goto LABEL_52;
      }
LABEL_51:
      v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v42 = 0;
      v43 = 0;
      if (v28 > v13)
      {
LABEL_28:
        if (v31 > v13)
          goto LABEL_29;
        goto LABEL_53;
      }
LABEL_52:
      v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      if (v31 > v13)
      {
LABEL_29:
        v44 = 0;
        v45 = 0;
        if (v14 < v20)
          goto LABEL_30;
        goto LABEL_54;
      }
LABEL_53:
      v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
      v44 = 0;
      v45 = 0;
      if (v14 < v20)
      {
LABEL_30:
        if (v23 > v14)
          goto LABEL_31;
        goto LABEL_55;
      }
LABEL_54:
      v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v23 > v14)
      {
LABEL_31:
        v46 = 0;
        v47 = 0;
        if (v24 > v14)
          goto LABEL_32;
        goto LABEL_56;
      }
LABEL_55:
      v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v46 = 0;
      v47 = 0;
      if (v24 > v14)
      {
LABEL_32:
        if (v27 <= v14)
          goto LABEL_57;
        goto LABEL_33;
      }
LABEL_56:
      v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      if (v27 <= v14)
      {
LABEL_57:
        v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v48 = 0;
        v49 = 0;
        if (v28 > v14)
          goto LABEL_35;
LABEL_34:
        v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        goto LABEL_35;
      }
LABEL_33:
      v48 = 0;
      v49 = 0;
      if (v28 <= v14)
        goto LABEL_34;
LABEL_35:
      v50.i64[0] = v22;
      v50.i64[1] = v21;
      v51.i64[0] = v26;
      v51.i64[1] = v25;
      v52.i64[0] = v30;
      v52.i64[1] = v29;
      v53.i64[0] = v33;
      v53.i64[1] = v32;
      v54.i64[0] = v35;
      v54.i64[1] = v34;
      v55.i64[0] = v37;
      v55.i64[1] = v36;
      v56.i64[0] = v39;
      v57 = vextq_s8(v50, v50, 8uLL).u64[0];
      v56.i64[1] = v38;
      v58 = vextq_s8(v51, v51, 8uLL).u64[0];
      v60.i64[0] = v41;
      v59 = vextq_s8(v52, v52, 8uLL).u64[0];
      v60.i64[1] = v40;
      v61 = vextq_s8(v53, v53, 8uLL).u64[0];
      v62.i64[0] = v43;
      v62.i64[1] = v42;
      v63 = vextq_s8(v54, v54, 8uLL).u64[0];
      v64 = vextq_s8(v55, v55, 8uLL).u64[0];
      v65.i64[0] = v45;
      v66 = vextq_s8(v56, v56, 8uLL).u64[0];
      v65.i64[1] = v44;
      v67 = vextq_s8(v60, v60, 8uLL).u64[0];
      v68.i64[0] = v47;
      v69 = vextq_s8(v62, v62, 8uLL).u64[0];
      v68.i64[1] = v46;
      v70 = vextq_s8(v65, v65, 8uLL).u64[0];
      v71.i64[0] = v49;
      v72 = vextq_s8(v68, v68, 8uLL).u64[0];
      if (v31 <= v14)
        v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
      v71.i64[1] = v48;
      v15.i64[0] = v45;
      v15.i64[1] = v70;
      v16.i64[0] = v51.i64[0];
      v16.i64[1] = v58;
      v50.i64[1] = v57;
      *v19 = v50;
      v19[1] = v16;
      v17.i64[0] = v33;
      v17.i64[1] = v61;
      v16.i64[0] = v52.i64[0];
      v16.i64[1] = v59;
      v19[2] = v16;
      v19[3] = v17;
      v16.i64[0] = v37;
      v16.i64[1] = v64;
      v17.i64[0] = v35;
      v17.i64[1] = v63;
      v19[4] = v17;
      v19[5] = v16;
      v17.i64[0] = v60.i64[0];
      v17.i64[1] = v67;
      v16.i64[0] = v39;
      v16.i64[1] = v66;
      v19[6] = v16;
      v19[7] = v17;
      v16.i64[0] = v62.i64[0];
      v16.i64[1] = v69;
      v19[8] = v16;
      v19[9] = v15;
      v17.i64[0] = v47;
      v17.i64[1] = v72;
      v19[10] = v17;
      v19[11] = v71;
      ++v9;
      v8 = *(unsigned int *)(result + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(result + 12);
        goto LABEL_5;
      }
    }
    v144[0] = 0;
    v78 = *(_QWORD *)(result + 16);
    v79 = *(int64x2_t **)(result + 24);
    v80 = (uint64_t)v79->i64 - v78;
    v81 = (uint64_t)((uint64_t)v79->i64 - v78) >> 3;
    v82 = (uint64_t *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
    v83 = *(_QWORD *)(result + 32);
    if ((unint64_t)(v83 - (_QWORD)v79) < 0xC0)
    {
      v84 = v81 + 24;
      if ((unint64_t)(v81 + 24) >> 61)
        sub_20E867F44();
      v85 = v83 - v78;
      if (v85 >> 2 > v84)
        v84 = v85 >> 2;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
        v84 = 0x1FFFFFFFFFFFFFFFLL;
      v136 = v84;
      if (v84)
      {
        if (v84 >> 61)
          sub_20E877A38();
        v86 = operator new(8 * v84);
        result = v142;
        v81 = (uint64_t)((uint64_t)v79->i64 - v78) >> 3;
        v80 = (uint64_t)v79->i64 - v78;
      }
      else
      {
        v86 = 0;
      }
      v93 = &v86[8 * v81];
      v93[10] = 0u;
      v93[11] = 0u;
      v93[8] = 0u;
      v93[9] = 0u;
      v93[6] = 0u;
      v93[7] = 0u;
      v93[4] = 0u;
      v93[5] = 0u;
      v93[2] = 0u;
      v93[3] = 0u;
      *v93 = 0u;
      v93[1] = 0u;
      if ((int64x2_t *)v78 == v79)
      {
        v95 = &v86[8 * v81];
      }
      else
      {
        if ((unint64_t)(v80 - 8) >= 0x68)
        {
          v94 = (char *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
          v95 = &v86[8 * v81];
          if (v78 + (v80 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v86[v80 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v96 = ((unint64_t)(v80 - 8) >> 3) + 1;
            v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
            v94 = (char *)&v82[v97 / 0xFFFFFFFFFFFFFFF8];
            v95 = (char *)v93 - v97;
            v98 = &v86[8 * v81 - 16];
            v99 = (__int128 *)(v78 + 8 * v81 - 16);
            v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v101 = *v99;
              *(v98 - 1) = *(v99 - 1);
              *v98 = v101;
              v98 -= 2;
              v99 -= 2;
              v100 -= 4;
            }
            while (v100);
            if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_87;
          }
        }
        else
        {
          v94 = (char *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
          v95 = &v86[8 * v81];
        }
        do
        {
          v102 = *((_QWORD *)v94 - 1);
          v94 -= 8;
          *((_QWORD *)v95 - 1) = v102;
          v95 -= 8;
        }
        while (v94 != (char *)v78);
      }
LABEL_87:
      v103 = v93 + 12;
      v104 = (char *)v79 - (char *)v82;
      if (v104)
      {
        v105 = v82;
        v106 = v86;
        v139 = v93 + 12;
        memmove(v93 + 12, v105, v104);
        v103 = v139;
        v86 = v106;
        result = v142;
      }
      *(_QWORD *)(result + 16) = v95;
      *(_QWORD *)(result + 24) = (char *)v103 + v104;
      *(_QWORD *)(result + 32) = &v86[8 * v136];
      v10 = v143;
      if (v78)
      {
        operator delete((void *)v78);
        result = v142;
        v10 = v143;
      }
      goto LABEL_122;
    }
    v87 = (char *)v79 - (char *)v82;
    if ((unint64_t)((char *)v79 - (char *)v82) > 0xBF)
    {
      v89 = *(uint64_t **)(result + 24);
      v88 = 24;
      goto LABEL_98;
    }
    v88 = v87 >> 3;
    v89 = &v79->i64[24 - (v87 >> 3)];
    v90 = v87 & 0xFFFFFFFFFFFFFFF8;
    v91 = 184 - v90;
    if (184 - v90 >= 0x68)
    {
      v107 = v144 < (uint64_t *)((char *)v79[12].i64 - v90);
      if (v79 >= (int64x2_t *)v145 || (v92 = *(uint64_t **)(result + 24), !v107))
      {
        v108 = (v91 >> 3) + 1;
        v92 = &v79->i64[v108 & 0x3FFFFFFFFFFFFFFCLL];
        v109 = vdupq_lane_s64(v144[0], 0);
        v110 = v79 + 1;
        v111 = v108 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110[-1] = v109;
          *v110 = v109;
          v110 += 2;
          v111 -= 4;
        }
        while (v111);
        if (v108 == (v108 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_97:
          *(_QWORD *)(result + 24) = v89;
          if (v79 == (int64x2_t *)v82)
            goto LABEL_122;
LABEL_98:
          v112 = (char *)v89 - (char *)(v82 + 24);
          v113 = v112 >> 3;
          v114 = (int64x2_t *)(v89 - 24);
          v115 = v89;
          if (v89 - 24 < (uint64_t *)v79)
          {
            v116 = (v80 & 0xFFFFFFFFFFFFFFF8) + v112;
            v117 = v78 + v116 + 8;
            if ((unint64_t)v79 > v117)
              v117 = (unint64_t)v79;
            v118 = v117 + ~v78 - v116;
            if (v118 >= 0x58)
            {
              v119 = (v118 >> 3) + 1;
              v120 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              v114 = (int64x2_t *)((char *)v114 + v120 * 8);
              v115 = &v89[v120];
              v121 = v89 + 2;
              v122 = (__int128 *)(v78 + 8 * v113 + 8 * v81 + 16);
              v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v124 = *v122;
                *(v121 - 1) = *(v122 - 1);
                *v121 = v124;
                v121 += 2;
                v122 += 2;
                v123 -= 4;
              }
              while (v123);
              v80 = (uint64_t)v79->i64 - v78;
              if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_107;
            }
            else
            {
              v115 = v89;
            }
            do
            {
              v125 = v114->i64[0];
              v114 = (int64x2_t *)((char *)v114 + 8);
              *v115++ = v125;
            }
            while (v114 < v79);
          }
LABEL_107:
          *(_QWORD *)(result + 24) = v115;
          if (v89 != v82 + 24)
          {
            v126 = (char *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
            v127 = (uint64_t)((uint64_t)v79->i64 - v78) >> 3;
            v140 = v80;
            v128 = v88;
            memmove(&v89[-v113], v126, v112);
            v88 = v128;
            v80 = v140;
            v81 = v127;
            result = v142;
            v10 = v143;
          }
          v129 = v144;
          if (v82 <= v144)
          {
            v130 = 24;
            if (*(_QWORD *)(result + 24) <= (unint64_t)v144)
              v130 = 0;
            v129 = &v144[v130];
          }
          if (v88 >= 0xA)
          {
            if (v82 >= v129 + 1 || (unint64_t)v129 >= v78 + (v80 & 0xFFFFFFFFFFFFFFF8) + 8 * v88)
            {
              v82 += v88 & 0xFFFFFFFFFFFFFFFCLL;
              v131 = v88 & 3;
              v132 = vld1q_dup_f64((const double *)v129);
              v133 = (float64x2_t *)(v78 + 8 * v81 + 16);
              v134 = v88 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v133[-1] = v132;
                *v133 = v132;
                v133 += 2;
                v134 -= 4;
              }
              while (v134);
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_122;
            }
            else
            {
              v131 = v88;
            }
          }
          else
          {
            v131 = v88;
          }
          do
          {
            *v82++ = *v129;
            --v131;
          }
          while (v131);
LABEL_122:
          v19 = (int8x16_t *)(*(_QWORD *)(result + 24) - 192);
          v4 = v137;
          v7 = v138;
          v6 = v141;
          goto LABEL_123;
        }
      }
    }
    else
    {
      v92 = *(uint64_t **)(result + 24);
    }
    do
      *v92++ = v144[0];
    while (v92 != v89);
    goto LABEL_97;
  }
  return result;
}

void sub_20F91BC28(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int v21;
  uint64_t v22;
  int8x16_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  unint64_t v73;
  int8x16_t v74;
  unint64_t v75;
  int8x16_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x16_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  uint64_t v86;
  uint64_t v87;
  int8x16_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x16_t v91;
  uint64_t v92;
  uint64_t v93;
  int8x16_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x16_t v97;
  uint64_t v98;
  uint64_t v99;
  int8x16_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x16_t v112;
  uint64_t v113;
  uint64_t v114;
  int8x16_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int64x2_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  _OWORD *v136;
  char *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  __int128 *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  _OWORD *v146;
  size_t v147;
  uint64_t *v148;
  _BYTE *v149;
  BOOL v150;
  uint64_t v151;
  int64x2_t v152;
  int64x2_t *v153;
  uint64_t v154;
  int64_t v155;
  uint64_t v156;
  int64x2_t *v157;
  uint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  __int128 *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  float64x2_t v174;
  float64x2_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209[2];
  uint64_t v210[2];

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v5 = a1;
    if (*(_DWORD *)(a1 + 8))
    {
      v6 = a3;
      v7 = 0;
      v8 = (_QWORD *)(a1 + 16);
      v177 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v180 = (_QWORD *)(a1 + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v5 + 88) + 8 * (*(_DWORD *)(v5 + 112) * v7);
      v12 = v177 + 6 * v7;
      v13 = v12 + 1;
      v14 = v12 + 2;
      v15 = v12 + 3;
      v16 = v12 + 4;
      v17 = v12 + 5;
      v184 = v11;
      v181 = v7;
      while (1)
      {
        v21 = 8 * v10;
        v22 = *(_QWORD *)(v11 + 8 * v10);
        if (v22 != -1)
        {
          v23 = (int8x16_t *)(*v8 + 8 * v22);
          v24 = v21 + v10 + v6;
          v25 = 0;
          v26 = 0;
          if (v12 < v24)
            goto LABEL_12;
LABEL_11:
          v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          goto LABEL_12;
        }
        v116 = *(_QWORD *)(v5 + 80);
        if (!v116)
          break;
        v118 = *(_QWORD *)(v5 + 48);
        v117 = *(_QWORD *)(v5 + 56);
        v119 = ((v117 - v118) << 6) - 1;
        v120 = *(_QWORD *)(v5 + 72);
        if (v117 == v118)
          v119 = 0;
        v23 = (int8x16_t *)(*(_QWORD *)(v5 + 16)
                          + 8
                          * *(_QWORD *)(*(_QWORD *)(v118
                                                  + (((unint64_t)(v120 + v116 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v120 + v116 - 1) & 0x1FF)));
        *(_QWORD *)(v5 + 80) = v116 - 1;
        if ((unint64_t)(v119 - (v116 + v120) + 1) >= 0x400)
        {
          operator delete(*(void **)(v117 - 8));
          v15 = v12 + 3;
          v14 = v12 + 2;
          v13 = v12 + 1;
          v11 = v184;
          v5 = a1;
          *(_QWORD *)(a1 + 56) -= 8;
        }
LABEL_183:
        *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v23->i64 - *(_QWORD *)(v5 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v5 + 120) + 8 * v7);
        v24 = v21 + v10 + v6;
        v25 = 0;
        v26 = 0;
        if (v12 >= v24)
          goto LABEL_11;
LABEL_12:
        v27 = v24 + 1;
        if (v24 + 1 <= v12)
        {
          v25 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          v28 = v24 + 2;
          v29 = 0;
          v30 = 0;
          if (v24 + 2 > v12)
          {
LABEL_14:
            v31 = v24 + 3;
            if (v24 + 3 > v12)
              goto LABEL_15;
            goto LABEL_95;
          }
        }
        else
        {
          v28 = v24 + 2;
          v29 = 0;
          v30 = 0;
          if (v24 + 2 > v12)
            goto LABEL_14;
        }
        v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v31 = v24 + 3;
        if (v24 + 3 > v12)
        {
LABEL_15:
          v32 = v24 + 4;
          v33 = 0;
          v34 = 0;
          if (v24 + 4 > v12)
            goto LABEL_16;
          goto LABEL_96;
        }
LABEL_95:
        v29 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v32 = v24 + 4;
        v33 = 0;
        v34 = 0;
        if (v24 + 4 > v12)
        {
LABEL_16:
          v35 = v24 + 5;
          if (v24 + 5 > v12)
            goto LABEL_17;
          goto LABEL_97;
        }
LABEL_96:
        v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v35 = v24 + 5;
        if (v24 + 5 > v12)
        {
LABEL_17:
          v36 = v24 + 6;
          v37 = 0;
          v38 = 0;
          if (v24 + 6 > v12)
            goto LABEL_18;
          goto LABEL_98;
        }
LABEL_97:
        v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v36 = v24 + 6;
        v37 = 0;
        v38 = 0;
        if (v24 + 6 > v12)
        {
LABEL_18:
          v39 = v24 + 7;
          if (v24 + 7 > v12)
            goto LABEL_19;
          goto LABEL_99;
        }
LABEL_98:
        v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v39 = v24 + 7;
        if (v24 + 7 > v12)
        {
LABEL_19:
          v40 = v24 + 8;
          v41 = 0;
          v42 = 0;
          if (v24 + 8 > v12)
            goto LABEL_20;
          goto LABEL_100;
        }
LABEL_99:
        v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v39 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v40 = v24 + 8;
        v41 = 0;
        v42 = 0;
        if (v24 + 8 > v12)
        {
LABEL_20:
          if (v13 < v24)
            goto LABEL_21;
          goto LABEL_101;
        }
LABEL_100:
        v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v40 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        if (v13 < v24)
        {
LABEL_21:
          v43 = 0;
          v44 = 0;
          if (v27 > v13)
            goto LABEL_22;
          goto LABEL_102;
        }
LABEL_101:
        v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v43 = 0;
        v44 = 0;
        if (v27 > v13)
        {
LABEL_22:
          if (v28 > v13)
            goto LABEL_23;
          goto LABEL_103;
        }
LABEL_102:
        v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v28 > v13)
        {
LABEL_23:
          v45 = 0;
          v46 = 0;
          if (v31 > v13)
            goto LABEL_24;
          goto LABEL_104;
        }
LABEL_103:
        v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v45 = 0;
        v46 = 0;
        if (v31 > v13)
        {
LABEL_24:
          if (v32 > v13)
            goto LABEL_25;
          goto LABEL_105;
        }
LABEL_104:
        v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v32 > v13)
        {
LABEL_25:
          v47 = 0;
          v48 = 0;
          if (v35 > v13)
            goto LABEL_26;
          goto LABEL_106;
        }
LABEL_105:
        v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v47 = 0;
        v48 = 0;
        if (v35 > v13)
        {
LABEL_26:
          if (v36 > v13)
            goto LABEL_27;
          goto LABEL_107;
        }
LABEL_106:
        v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v36 > v13)
        {
LABEL_27:
          v49 = 0;
          v50 = 0;
          if (v39 > v13)
            goto LABEL_28;
          goto LABEL_108;
        }
LABEL_107:
        v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v49 = 0;
        v50 = 0;
        if (v39 > v13)
        {
LABEL_28:
          if (v40 > v13)
            goto LABEL_29;
          goto LABEL_109;
        }
LABEL_108:
        v50 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v39 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v40 > v13)
        {
LABEL_29:
          v51 = 0;
          v52 = 0;
          if (v14 < v24)
            goto LABEL_30;
          goto LABEL_110;
        }
LABEL_109:
        v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v40 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v51 = 0;
        v52 = 0;
        if (v14 < v24)
        {
LABEL_30:
          if (v27 > v14)
            goto LABEL_31;
          goto LABEL_111;
        }
LABEL_110:
        v52 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v27 > v14)
        {
LABEL_31:
          v53 = 0;
          v54 = 0;
          if (v28 > v14)
            goto LABEL_32;
          goto LABEL_112;
        }
LABEL_111:
        v51 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v53 = 0;
        v54 = 0;
        if (v28 > v14)
        {
LABEL_32:
          if (v31 > v14)
            goto LABEL_33;
          goto LABEL_113;
        }
LABEL_112:
        v54 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v31 > v14)
        {
LABEL_33:
          v55 = 0;
          v56 = 0;
          if (v32 > v14)
            goto LABEL_34;
          goto LABEL_114;
        }
LABEL_113:
        v53 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v55 = 0;
        v56 = 0;
        if (v32 > v14)
        {
LABEL_34:
          if (v35 > v14)
            goto LABEL_35;
          goto LABEL_115;
        }
LABEL_114:
        v56 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v35 > v14)
        {
LABEL_35:
          v57 = 0;
          v58 = 0;
          if (v36 > v14)
            goto LABEL_36;
          goto LABEL_116;
        }
LABEL_115:
        v55 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v57 = 0;
        v58 = 0;
        if (v36 > v14)
        {
LABEL_36:
          if (v39 <= v14)
            goto LABEL_117;
          goto LABEL_37;
        }
LABEL_116:
        v58 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v39 <= v14)
        {
LABEL_117:
          v57 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v39 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
          v59 = 0;
          v60 = 0;
          if (v40 > v14)
            goto LABEL_39;
LABEL_38:
          v60 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v40 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
          goto LABEL_39;
        }
LABEL_37:
        v59 = 0;
        v60 = 0;
        if (v40 <= v14)
          goto LABEL_38;
LABEL_39:
        v61.i64[0] = v26;
        v61.i64[1] = v25;
        v62.i64[0] = v30;
        v62.i64[1] = v29;
        v63.i64[0] = v34;
        v63.i64[1] = v33;
        v64.i64[0] = v38;
        v64.i64[1] = v37;
        v65.i64[0] = v42;
        v65.i64[1] = v41;
        v66.i64[0] = v44;
        v66.i64[1] = v43;
        v67.i64[0] = v46;
        v67.i64[1] = v45;
        v68.i64[0] = v48;
        v68.i64[1] = v47;
        v189 = vextq_s8(v63, v63, 8uLL).u64[0];
        v69.i64[0] = v50;
        v187 = vextq_s8(v61, v61, 8uLL).u64[0];
        v188 = vextq_s8(v64, v64, 8uLL).u64[0];
        v69.i64[1] = v49;
        v70.i64[0] = v52;
        v190 = vextq_s8(v66, v66, 8uLL).u64[0];
        v191 = vextq_s8(v62, v62, 8uLL).u64[0];
        v70.i64[1] = v51;
        v185 = vextq_s8(v65, v65, 8uLL).u64[0];
        v186 = vextq_s8(v67, v67, 8uLL).u64[0];
        v71.i64[0] = v54;
        v71.i64[1] = v53;
        v192 = vextq_s8(v68, v68, 8uLL).u64[0];
        v193 = vextq_s8(v69, v69, 8uLL).u64[0];
        v72.i64[0] = v56;
        v194 = vextq_s8(v70, v70, 8uLL).u64[0];
        v72.i64[1] = v55;
        v74.i64[0] = v58;
        v73 = vextq_s8(v71, v71, 8uLL).u64[0];
        v208 = vextq_s8(v72, v72, 8uLL).u64[0];
        v74.i64[1] = v57;
        v75 = vextq_s8(v74, v74, 8uLL).u64[0];
        if (v15 >= v24)
          v59 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v76.i64[0] = v60;
        v76.i64[1] = v59;
        v207 = vextq_s8(v76, v76, 8uLL).u64[0];
        v77 = 0;
        v78 = 0;
        if (v27 <= v15)
          v78 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v79.i64[0] = v78;
        if (v28 <= v15)
          v77 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v79.i64[1] = v77;
        v206 = vextq_s8(v79, v79, 8uLL).u64[0];
        v80 = 0;
        v81 = 0;
        if (v31 <= v15)
          v81 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v82.i64[0] = v81;
        if (v32 <= v15)
          v80 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v82.i64[1] = v80;
        v205 = vextq_s8(v82, v82, 8uLL).u64[0];
        v83 = 0;
        v84 = 0;
        if (v35 <= v15)
          v84 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v85.i64[0] = v84;
        if (v36 <= v15)
          v83 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v85.i64[1] = v83;
        v204 = vextq_s8(v85, v85, 8uLL).u64[0];
        v86 = 0;
        v87 = 0;
        if (v39 <= v15)
          v87 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v39 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v88.i64[0] = v87;
        if (v40 <= v15)
          v86 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v40 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v88.i64[1] = v86;
        v203 = vextq_s8(v88, v88, 8uLL).u64[0];
        v89 = 0;
        v90 = 0;
        if (v16 >= v24)
          v90 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v91.i64[0] = v90;
        if (v27 <= v16)
          v89 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v91.i64[1] = v89;
        v202 = vextq_s8(v91, v91, 8uLL).u64[0];
        v92 = 0;
        v93 = 0;
        if (v28 <= v16)
          v93 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v94.i64[0] = v93;
        if (v31 <= v16)
          v92 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v94.i64[1] = v92;
        v201 = vextq_s8(v94, v94, 8uLL).u64[0];
        v95 = 0;
        v96 = 0;
        if (v32 <= v16)
          v96 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v97.i64[0] = v96;
        if (v35 <= v16)
          v95 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v97.i64[1] = v95;
        v200 = vextq_s8(v97, v97, 8uLL).u64[0];
        v98 = 0;
        v99 = 0;
        if (v36 <= v16)
          v99 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v100.i64[0] = v99;
        if (v39 <= v16)
          v98 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v39 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v100.i64[1] = v98;
        v198 = vextq_s8(v100, v100, 8uLL).u64[0];
        v101 = 0;
        v102 = 0;
        if (v40 <= v16)
          v102 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v40 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v16));
        v103.i64[0] = v102;
        if (v17 >= v24)
          v101 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v103.i64[1] = v101;
        v197 = vextq_s8(v103, v103, 8uLL).u64[0];
        v104 = 0;
        v105 = 0;
        if (v27 <= v17)
          v105 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v106.i64[0] = v105;
        if (v28 <= v17)
          v104 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v106.i64[1] = v104;
        v196 = vextq_s8(v106, v106, 8uLL).u64[0];
        v107 = 0;
        v108 = 0;
        if (v31 <= v17)
          v108 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        if (v32 <= v17)
          v107 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v109.i64[0] = v108;
        v109.i64[1] = v107;
        v199 = vextq_s8(v109, v109, 8uLL).u64[0];
        v110 = 0;
        v111 = 0;
        if (v35 <= v17)
          v111 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v112.i64[0] = v111;
        if (v36 <= v17)
          v110 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v112.i64[1] = v110;
        v195 = vextq_s8(v112, v112, 8uLL).u64[0];
        v113 = 0;
        v114 = 0;
        if (v39 <= v17)
          v114 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v39 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v115.i64[0] = v114;
        if (v40 <= v17)
          v113 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v40 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v17));
        v115.i64[1] = v113;
        v18.i64[0] = v112.i64[0];
        v18.i64[1] = v195;
        v19.i64[0] = v62.i64[0];
        v19.i64[1] = v191;
        v61.i64[1] = v187;
        *v23 = v61;
        v23[1] = v19;
        v20.i64[0] = v64.i64[0];
        v20.i64[1] = v188;
        v19.i64[0] = v63.i64[0];
        v19.i64[1] = v189;
        v23[2] = v19;
        v23[3] = v20;
        v19.i64[0] = v66.i64[0];
        v19.i64[1] = v190;
        v20.i64[0] = v65.i64[0];
        v20.i64[1] = v185;
        v23[4] = v20;
        v23[5] = v19;
        v20.i64[0] = v68.i64[0];
        v20.i64[1] = v192;
        v19.i64[0] = v67.i64[0];
        v19.i64[1] = v186;
        v23[6] = v19;
        v23[7] = v20;
        v19.i64[0] = v70.i64[0];
        v19.i64[1] = v194;
        v20.i64[0] = v69.i64[0];
        v20.i64[1] = v193;
        v23[8] = v20;
        v23[9] = v19;
        v20.i64[0] = v72.i64[0];
        v20.i64[1] = v208;
        v19.i64[0] = v71.i64[0];
        v19.i64[1] = v73;
        v23[10] = v19;
        v23[11] = v20;
        v19.i64[0] = v76.i64[0];
        v19.i64[1] = v207;
        v20.i64[0] = v74.i64[0];
        v20.i64[1] = v75;
        v23[12] = v20;
        v23[13] = v19;
        v20.i64[0] = v82.i64[0];
        v20.i64[1] = v205;
        v19.i64[0] = v79.i64[0];
        v19.i64[1] = v206;
        v23[14] = v19;
        v23[15] = v20;
        v19.i64[0] = v88.i64[0];
        v19.i64[1] = v203;
        v20.i64[0] = v85.i64[0];
        v20.i64[1] = v204;
        v23[16] = v20;
        v23[17] = v19;
        v20.i64[0] = v94.i64[0];
        v20.i64[1] = v201;
        v19.i64[0] = v91.i64[0];
        v19.i64[1] = v202;
        v23[18] = v19;
        v23[19] = v20;
        v19.i64[0] = v100.i64[0];
        v19.i64[1] = v198;
        v20.i64[0] = v97.i64[0];
        v20.i64[1] = v200;
        v23[20] = v20;
        v23[21] = v19;
        v20.i64[0] = v106.i64[0];
        v20.i64[1] = v196;
        v19.i64[0] = v103.i64[0];
        v19.i64[1] = v197;
        v23[22] = v19;
        v23[23] = v20;
        v20.i64[0] = v109.i64[0];
        v20.i64[1] = v199;
        v23[24] = v20;
        v23[25] = v18;
        v23[26] = v115;
        ++v10;
        v9 = *(unsigned int *)(v5 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v5 + 12);
          goto LABEL_5;
        }
      }
      v182 = v10;
      v209[0] = 0;
      v121 = *(_QWORD *)(v5 + 16);
      v122 = *(int64x2_t **)(v5 + 24);
      v123 = (uint64_t)v122->i64 - v121;
      v124 = (uint64_t)((uint64_t)v122->i64 - v121) >> 3;
      v125 = (uint64_t *)(v121 + (((unint64_t)v122 - v121) & 0xFFFFFFFFFFFFFFF8));
      v126 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v126 - (_QWORD)v122) < 0x1B0)
      {
        v127 = v124 + 54;
        if ((unint64_t)(v124 + 54) >> 61)
          sub_20E867F44();
        v128 = v126 - v121;
        if (v128 >> 2 > v127)
          v127 = v128 >> 2;
        if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        v179 = v127;
        if (v127)
        {
          if (v127 >> 61)
            sub_20E877A38();
          v129 = operator new(8 * v127);
          v5 = a1;
          v124 = (uint64_t)((uint64_t)v122->i64 - v121) >> 3;
        }
        else
        {
          v129 = 0;
        }
        v136 = &v129[8 * v124];
        v136[25] = 0u;
        v136[26] = 0u;
        v136[23] = 0u;
        v136[24] = 0u;
        v136[21] = 0u;
        v136[22] = 0u;
        v136[19] = 0u;
        v136[20] = 0u;
        v136[17] = 0u;
        v136[18] = 0u;
        v136[15] = 0u;
        v136[16] = 0u;
        v136[13] = 0u;
        v136[14] = 0u;
        v136[11] = 0u;
        v136[12] = 0u;
        v136[9] = 0u;
        v136[10] = 0u;
        v136[7] = 0u;
        v136[8] = 0u;
        v136[5] = 0u;
        v136[6] = 0u;
        v136[3] = 0u;
        v136[4] = 0u;
        v136[1] = 0u;
        v136[2] = 0u;
        *v136 = 0u;
        if ((int64x2_t *)v121 == v122)
        {
          v138 = &v129[8 * v124];
        }
        else
        {
          if ((unint64_t)(v123 - 8) >= 0x68)
          {
            v137 = (char *)(v121 + (((unint64_t)v122 - v121) & 0xFFFFFFFFFFFFFFF8));
            v138 = &v129[8 * v124];
            if (v121 + (v123 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v129[v123 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v139 = ((unint64_t)(v123 - 8) >> 3) + 1;
              v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
              v137 = (char *)&v125[v140 / 0xFFFFFFFFFFFFFFF8];
              v138 = (char *)v136 - v140;
              v141 = &v129[8 * v124 - 16];
              v142 = (__int128 *)(v121 + 8 * v124 - 16);
              v143 = v139 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 4;
              }
              while (v143);
              if (v139 == (v139 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_147;
            }
          }
          else
          {
            v137 = (char *)(v121 + (((unint64_t)v122 - v121) & 0xFFFFFFFFFFFFFFF8));
            v138 = &v129[8 * v124];
          }
          do
          {
            v145 = *((_QWORD *)v137 - 1);
            v137 -= 8;
            *((_QWORD *)v138 - 1) = v145;
            v138 -= 8;
          }
          while (v137 != (char *)v121);
        }
LABEL_147:
        v146 = v136 + 27;
        v147 = (char *)v122 - (char *)v125;
        if (v147)
        {
          v148 = v125;
          v149 = v129;
          memmove(v136 + 27, v148, v147);
          v129 = v149;
          v5 = a1;
        }
        *(_QWORD *)(v5 + 16) = v138;
        *(_QWORD *)(v5 + 24) = (char *)v146 + v147;
        *(_QWORD *)(v5 + 32) = &v129[8 * v179];
        v6 = a3;
        v11 = v184;
        v14 = v12 + 2;
        v13 = v12 + 1;
        v15 = v12 + 3;
        if (v121)
        {
          operator delete((void *)v121);
          v15 = v12 + 3;
          v14 = v12 + 2;
          v13 = v12 + 1;
          v11 = v184;
          v5 = a1;
        }
        goto LABEL_182;
      }
      v130 = (char *)v122 - (char *)v125;
      if ((unint64_t)((char *)v122 - (char *)v125) > 0x1AF)
      {
        v132 = *(uint64_t **)(v5 + 24);
        v131 = 54;
        goto LABEL_158;
      }
      v131 = v130 >> 3;
      v132 = &v122->i64[54 - (v130 >> 3)];
      v133 = v130 & 0xFFFFFFFFFFFFFFF8;
      v134 = 424 - v133;
      if (424 - v133 >= 0x68)
      {
        v150 = v209 < (uint64_t *)((char *)v122[27].i64 - v133);
        if (v122 >= (int64x2_t *)v210 || (v135 = *(uint64_t **)(v5 + 24), !v150))
        {
          v151 = (v134 >> 3) + 1;
          v135 = &v122->i64[v151 & 0x3FFFFFFFFFFFFFFCLL];
          v152 = vdupq_lane_s64(v209[0], 0);
          v153 = v122 + 1;
          v154 = v151 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v153[-1] = v152;
            *v153 = v152;
            v153 += 2;
            v154 -= 4;
          }
          while (v154);
          if (v151 == (v151 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_157:
            *(_QWORD *)(v5 + 24) = v132;
            if (v122 == (int64x2_t *)v125)
              goto LABEL_182;
LABEL_158:
            v155 = (char *)v132 - (char *)(v125 + 54);
            v156 = v155 >> 3;
            v157 = (int64x2_t *)(v132 - 54);
            v158 = v132;
            if (v132 - 54 < (uint64_t *)v122)
            {
              v159 = (v123 & 0xFFFFFFFFFFFFFFF8) + v155;
              v160 = v121 + v159 + 8;
              if ((unint64_t)v122 > v160)
                v160 = (unint64_t)v122;
              v161 = v160 + ~v121 - v159;
              if (v161 >= 0x58)
              {
                v162 = (v161 >> 3) + 1;
                v163 = v162 & 0x3FFFFFFFFFFFFFFCLL;
                v157 = (int64x2_t *)((char *)v157 + v163 * 8);
                v158 = &v132[v163];
                v164 = v132 + 2;
                v165 = (__int128 *)(v121 + 8 * v156 + 8 * v124 + 16);
                v166 = v162 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v167 = *v165;
                  *(v164 - 1) = *(v165 - 1);
                  *v164 = v167;
                  v164 += 2;
                  v165 += 2;
                  v166 -= 4;
                }
                while (v166);
                if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_167;
              }
              else
              {
                v158 = v132;
              }
              do
              {
                v168 = v157->i64[0];
                v157 = (int64x2_t *)((char *)v157 + 8);
                *v158++ = v168;
              }
              while (v157 < v122);
            }
LABEL_167:
            *(_QWORD *)(v5 + 24) = v158;
            if (v132 != v125 + 54)
            {
              v169 = v6;
              v170 = v131;
              memmove(&v132[-v156], (const void *)(v121 + (((unint64_t)v122 - v121) & 0xFFFFFFFFFFFFFFF8)), v155);
              v131 = v170;
              v6 = v169;
              v124 = (uint64_t)((uint64_t)v122->i64 - v121) >> 3;
              v15 = v12 + 3;
              v14 = v12 + 2;
              v13 = v12 + 1;
              v11 = v184;
              v5 = a1;
            }
            v171 = v209;
            if (v125 <= v209)
            {
              v172 = 54;
              if (*(_QWORD *)(v5 + 24) <= (unint64_t)v209)
                v172 = 0;
              v171 = &v209[v172];
            }
            if (v131 >= 0xA)
            {
              if (v125 >= v171 + 1
                || (unint64_t)v171 >= v121 + (((unint64_t)v122 - v121) & 0xFFFFFFFFFFFFFFF8) + 8 * v131)
              {
                v125 += v131 & 0xFFFFFFFFFFFFFFFCLL;
                v173 = v131 & 3;
                v174 = vld1q_dup_f64((const double *)v171);
                v175 = (float64x2_t *)(v121 + 8 * v124 + 16);
                v176 = v131 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v175[-1] = v174;
                  *v175 = v174;
                  v175 += 2;
                  v176 -= 4;
                }
                while (v176);
                if (v131 == (v131 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_182;
              }
              else
              {
                v173 = v131;
              }
            }
            else
            {
              v173 = v131;
            }
            do
            {
              *v125++ = *v171;
              --v173;
            }
            while (v173);
LABEL_182:
            v23 = (int8x16_t *)(*(_QWORD *)(v5 + 24) - 432);
            v8 = v180;
            v7 = v181;
            v10 = v182;
            goto LABEL_183;
          }
        }
      }
      else
      {
        v135 = *(uint64_t **)(v5 + 24);
      }
      do
        *v135++ = v209[0];
      while (v135 != v132);
      goto LABEL_157;
    }
  }
}

void sub_20F91CF24(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  unint64_t v61;
  int8x16_t v62;
  unint64_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  unint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  int8x16_t v73;
  unint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  unint64_t v77;
  unint64_t v78;
  int8x16_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int64x2_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  char *v102;
  uint64_t *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  size_t v113;
  uint64_t *v114;
  char *v115;
  BOOL v116;
  uint64_t v117;
  int64x2_t v118;
  int64x2_t *v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  int64x2_t *v123;
  uint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  float64x2_t v140;
  float64x2_t *v141;
  unint64_t v142;
  unint64_t v143;
  void *v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152[2];
  uint64_t v153[2];

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v5 = a1;
    if (*(_DWORD *)(a1 + 8))
    {
      v6 = a3;
      v7 = 0;
      v8 = (_QWORD *)(a1 + 16);
      v143 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v147 = a3;
      v148 = (_QWORD *)(a1 + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v5 + 88) + 8 * (*(_DWORD *)(v5 + 112) * v7);
      v12 = 3 * v7 + v143;
      v13 = v12 + 1;
      v14 = v12 + 2;
      v151 = v11;
      v149 = v7;
      while (1)
      {
        v17 = 8 * v10;
        v18 = *(_QWORD *)(v11 + 8 * v10);
        if (v18 != -1)
        {
          v19 = *v8 + 8 * v18;
          v20 = v17 + v10 + v6;
          v21 = 0;
          v22 = 0;
          if (v12 < v20)
            goto LABEL_12;
LABEL_11:
          v22 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          goto LABEL_12;
        }
        v82 = *(_QWORD *)(v5 + 80);
        if (!v82)
          break;
        v84 = *(_QWORD *)(v5 + 48);
        v83 = *(_QWORD *)(v5 + 56);
        v85 = ((v83 - v84) << 6) - 1;
        v86 = *(_QWORD *)(v5 + 72);
        if (v83 == v84)
          v85 = 0;
        v19 = *(_QWORD *)(v5 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v84 + (((unint64_t)(v86 + v82 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v86 + v82 - 1) & 0x1FF));
        *(_QWORD *)(v5 + 80) = v82 - 1;
        if ((unint64_t)(v85 - (v82 + v86) + 1) >= 0x400)
        {
          operator delete(*(void **)(v83 - 8));
          v5 = a1;
          v11 = v151;
          *(_QWORD *)(a1 + 56) -= 8;
        }
LABEL_129:
        *(_QWORD *)(v11 + 8 * v10) = (v19 - *(_QWORD *)(v5 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v5 + 120) + 8 * v7);
        v20 = v17 + v10 + v6;
        v21 = 0;
        v22 = 0;
        if (v12 >= v20)
          goto LABEL_11;
LABEL_12:
        v23 = v20 + 1;
        if (v20 + 1 <= v12)
        {
          v21 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          v24 = v20 + 2;
          v25 = 0;
          v26 = 0;
          if (v20 + 2 > v12)
          {
LABEL_14:
            v27 = v20 + 3;
            if (v20 + 3 > v12)
              goto LABEL_15;
            goto LABEL_42;
          }
        }
        else
        {
          v24 = v20 + 2;
          v25 = 0;
          v26 = 0;
          if (v20 + 2 > v12)
            goto LABEL_14;
        }
        v26 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v27 = v20 + 3;
        if (v20 + 3 > v12)
        {
LABEL_15:
          v28 = v20 + 4;
          v29 = 0;
          v30 = 0;
          if (v20 + 4 > v12)
            goto LABEL_16;
          goto LABEL_43;
        }
LABEL_42:
        v25 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v28 = v20 + 4;
        v29 = 0;
        v30 = 0;
        if (v20 + 4 > v12)
        {
LABEL_16:
          v31 = v20 + 5;
          if (v20 + 5 > v12)
            goto LABEL_17;
          goto LABEL_44;
        }
LABEL_43:
        v30 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v31 = v20 + 5;
        if (v20 + 5 > v12)
        {
LABEL_17:
          v32 = v20 + 6;
          v33 = 0;
          v34 = 0;
          if (v20 + 6 > v12)
            goto LABEL_18;
          goto LABEL_45;
        }
LABEL_44:
        v29 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v32 = v20 + 6;
        v33 = 0;
        v34 = 0;
        if (v20 + 6 > v12)
        {
LABEL_18:
          v35 = v20 + 7;
          if (v20 + 7 > v12)
            goto LABEL_19;
          goto LABEL_46;
        }
LABEL_45:
        v34 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v35 = v20 + 7;
        if (v20 + 7 > v12)
        {
LABEL_19:
          v36 = v20 + 8;
          v37 = 0;
          v38 = 0;
          if (v20 + 8 > v12)
            goto LABEL_20;
          goto LABEL_47;
        }
LABEL_46:
        v33 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v36 = v20 + 8;
        v37 = 0;
        v38 = 0;
        if (v20 + 8 > v12)
        {
LABEL_20:
          if (v13 < v20)
            goto LABEL_21;
          goto LABEL_48;
        }
LABEL_47:
        v38 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        if (v13 < v20)
        {
LABEL_21:
          v39 = 0;
          v40 = 0;
          if (v23 > v13)
            goto LABEL_22;
          goto LABEL_49;
        }
LABEL_48:
        v37 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v39 = 0;
        v40 = 0;
        if (v23 > v13)
        {
LABEL_22:
          if (v24 > v13)
            goto LABEL_23;
          goto LABEL_50;
        }
LABEL_49:
        v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v24 > v13)
        {
LABEL_23:
          v41 = 0;
          v42 = 0;
          if (v27 > v13)
            goto LABEL_24;
          goto LABEL_51;
        }
LABEL_50:
        v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v41 = 0;
        v42 = 0;
        if (v27 > v13)
        {
LABEL_24:
          if (v28 > v13)
            goto LABEL_25;
          goto LABEL_52;
        }
LABEL_51:
        v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v28 > v13)
        {
LABEL_25:
          v43 = 0;
          v44 = 0;
          if (v31 > v13)
            goto LABEL_26;
          goto LABEL_53;
        }
LABEL_52:
        v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v43 = 0;
        v44 = 0;
        if (v31 > v13)
        {
LABEL_26:
          if (v32 > v13)
            goto LABEL_27;
          goto LABEL_54;
        }
LABEL_53:
        v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v32 > v13)
        {
LABEL_27:
          v45 = 0;
          v46 = 0;
          if (v35 > v13)
            goto LABEL_28;
          goto LABEL_55;
        }
LABEL_54:
        v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v45 = 0;
        v46 = 0;
        if (v35 > v13)
        {
LABEL_28:
          if (v36 > v13)
            goto LABEL_29;
          goto LABEL_56;
        }
LABEL_55:
        v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v36 > v13)
        {
LABEL_29:
          v47 = 0;
          v48 = 0;
          if (v14 < v20)
            goto LABEL_30;
          goto LABEL_57;
        }
LABEL_56:
        v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v47 = 0;
        v48 = 0;
        if (v14 < v20)
        {
LABEL_30:
          if (v23 > v14)
            goto LABEL_31;
          goto LABEL_58;
        }
LABEL_57:
        v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v20 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v23 > v14)
        {
LABEL_31:
          v49 = 0;
          v50 = 0;
          if (v24 > v14)
            goto LABEL_32;
          goto LABEL_59;
        }
LABEL_58:
        v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v23 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v49 = 0;
        v50 = 0;
        if (v24 > v14)
        {
LABEL_32:
          if (v27 > v14)
            goto LABEL_33;
          goto LABEL_60;
        }
LABEL_59:
        v50 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v24 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v27 > v14)
        {
LABEL_33:
          v51 = 0;
          v52 = 0;
          if (v28 > v14)
            goto LABEL_34;
          goto LABEL_61;
        }
LABEL_60:
        v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v27 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v51 = 0;
        v52 = 0;
        if (v28 > v14)
        {
LABEL_34:
          if (v31 > v14)
            goto LABEL_35;
          goto LABEL_62;
        }
LABEL_61:
        v52 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v28 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v31 > v14)
        {
LABEL_35:
          v53 = 0;
          v54 = 0;
          if (v32 <= v14)
            goto LABEL_63;
          goto LABEL_36;
        }
LABEL_62:
        v51 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v31 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v53 = 0;
        v54 = 0;
        if (v32 <= v14)
        {
LABEL_63:
          v54 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v32 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
          if (v35 > v14)
            goto LABEL_38;
LABEL_37:
          v53 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v35 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
          goto LABEL_38;
        }
LABEL_36:
        if (v35 <= v14)
          goto LABEL_37;
LABEL_38:
        v55.i64[0] = v22;
        v55.i64[1] = v21;
        v56.i64[0] = v26;
        v56.i64[1] = v25;
        v57.i64[0] = v30;
        v57.i64[1] = v29;
        v58.i64[0] = v34;
        v58.i64[1] = v33;
        v59.i64[0] = v38;
        v59.i64[1] = v37;
        v60.i64[0] = v40;
        v60.i64[1] = v39;
        v62.i64[0] = v42;
        v61 = vextq_s8(v55, v55, 8uLL).u64[0];
        v62.i64[1] = v41;
        v63 = vextq_s8(v56, v56, 8uLL).u64[0];
        v65.i64[0] = v44;
        v64 = vextq_s8(v57, v57, 8uLL).u64[0];
        v65.i64[1] = v43;
        v66 = vextq_s8(v58, v58, 8uLL).u64[0];
        v68.i64[0] = v46;
        v67 = vextq_s8(v59, v59, 8uLL).u64[0];
        v68.i64[1] = v45;
        v71.i64[0] = v48;
        v69 = vextq_s8(v60, v60, 8uLL).u64[0];
        v70 = vextq_s8(v62, v62, 8uLL).u64[0];
        v71.i64[1] = v47;
        v72 = vextq_s8(v65, v65, 8uLL).u64[0];
        v73.i64[0] = v50;
        v74 = vextq_s8(v68, v68, 8uLL).u64[0];
        v73.i64[1] = v49;
        v75 = vextq_s8(v71, v71, 8uLL).u64[0];
        v76.i64[0] = v52;
        v77 = vextq_s8(v73, v73, 8uLL).u64[0];
        v76.i64[1] = v51;
        v79.i64[0] = v54;
        v78 = vextq_s8(v76, v76, 8uLL).u64[0];
        v79.i64[1] = v53;
        v80 = vextq_s8(v79, v79, 8uLL).u64[0];
        v81 = 0;
        if (v36 <= v14)
          v81 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v36 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        *(_QWORD *)&v15 = v56.i64[0];
        *((_QWORD *)&v15 + 1) = v63;
        v55.i64[1] = v61;
        *(int8x16_t *)v19 = v55;
        *(_OWORD *)(v19 + 16) = v15;
        *(_QWORD *)&v16 = v58.i64[0];
        *((_QWORD *)&v16 + 1) = v66;
        *(_QWORD *)&v15 = v57.i64[0];
        *((_QWORD *)&v15 + 1) = v64;
        *(_OWORD *)(v19 + 32) = v15;
        *(_OWORD *)(v19 + 48) = v16;
        *(_QWORD *)&v15 = v40;
        *((_QWORD *)&v15 + 1) = v69;
        *(_QWORD *)&v16 = v38;
        *((_QWORD *)&v16 + 1) = v67;
        *(_OWORD *)(v19 + 64) = v16;
        *(_OWORD *)(v19 + 80) = v15;
        *(_QWORD *)&v16 = v65.i64[0];
        *((_QWORD *)&v16 + 1) = v72;
        *(_QWORD *)&v15 = v62.i64[0];
        *((_QWORD *)&v15 + 1) = v70;
        *(_OWORD *)(v19 + 96) = v15;
        *(_OWORD *)(v19 + 112) = v16;
        *(_QWORD *)&v15 = v71.i64[0];
        *((_QWORD *)&v15 + 1) = v75;
        *(_QWORD *)&v16 = v68.i64[0];
        *((_QWORD *)&v16 + 1) = v74;
        *(_OWORD *)(v19 + 128) = v16;
        *(_OWORD *)(v19 + 144) = v15;
        *(_QWORD *)&v16 = v52;
        *((_QWORD *)&v16 + 1) = v78;
        *(_QWORD *)&v15 = v50;
        *((_QWORD *)&v15 + 1) = v77;
        *(_OWORD *)(v19 + 160) = v15;
        *(_OWORD *)(v19 + 176) = v16;
        *(_QWORD *)&v15 = v79.i64[0];
        *((_QWORD *)&v15 + 1) = v80;
        *(_OWORD *)(v19 + 192) = v15;
        *(_QWORD *)(v19 + 208) = v81;
        ++v10;
        v9 = *(unsigned int *)(v5 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v5 + 12);
          goto LABEL_5;
        }
      }
      v152[0] = 0;
      v87 = *(_QWORD *)(v5 + 16);
      v88 = *(int64x2_t **)(v5 + 24);
      v89 = (uint64_t)v88->i64 - v87;
      v90 = (uint64_t)((uint64_t)v88->i64 - v87) >> 3;
      v91 = (uint64_t *)(v87 + (((unint64_t)v88 - v87) & 0xFFFFFFFFFFFFFFF8));
      v92 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v92 - (_QWORD)v88) < 0xD8)
      {
        v93 = v90 + 27;
        if ((unint64_t)(v90 + 27) >> 61)
          sub_20E867F44();
        v94 = v92 - v87;
        if (v94 >> 2 > v93)
          v93 = v94 >> 2;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        v145 = v93;
        if (v93)
        {
          if (v93 >> 61)
            sub_20E877A38();
          v95 = (char *)operator new(8 * v93);
          v5 = a1;
          v90 = (uint64_t)((uint64_t)v88->i64 - v87) >> 3;
          v89 = (uint64_t)v88->i64 - v87;
        }
        else
        {
          v95 = 0;
        }
        v102 = &v95[8 * v90];
        *((_QWORD *)v102 + 26) = 0;
        *((_OWORD *)v102 + 11) = 0u;
        *((_OWORD *)v102 + 12) = 0u;
        *((_OWORD *)v102 + 9) = 0u;
        *((_OWORD *)v102 + 10) = 0u;
        *((_OWORD *)v102 + 7) = 0u;
        *((_OWORD *)v102 + 8) = 0u;
        *((_OWORD *)v102 + 5) = 0u;
        *((_OWORD *)v102 + 6) = 0u;
        *((_OWORD *)v102 + 3) = 0u;
        *((_OWORD *)v102 + 4) = 0u;
        *((_OWORD *)v102 + 1) = 0u;
        *((_OWORD *)v102 + 2) = 0u;
        *(_OWORD *)v102 = 0u;
        if ((int64x2_t *)v87 == v88)
        {
          v104 = &v95[8 * v90];
        }
        else
        {
          if ((unint64_t)(v89 - 8) >= 0x68)
          {
            v103 = (uint64_t *)(v87 + (((unint64_t)v88 - v87) & 0xFFFFFFFFFFFFFFF8));
            v104 = &v95[8 * v90];
            if (v87 + (v89 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v95[v89 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v105 = ((unint64_t)(v89 - 8) >> 3) + 1;
              v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
              v103 = &v91[v106 / 0xFFFFFFFFFFFFFFF8];
              v104 = &v102[-v106];
              v107 = &v95[8 * v90 - 16];
              v108 = (__int128 *)(v87 + 8 * v90 - 16);
              v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v110 = *v108;
                *((_OWORD *)v107 - 1) = *(v108 - 1);
                *(_OWORD *)v107 = v110;
                v107 -= 32;
                v108 -= 2;
                v109 -= 4;
              }
              while (v109);
              if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_93;
            }
          }
          else
          {
            v103 = (uint64_t *)(v87 + (((unint64_t)v88 - v87) & 0xFFFFFFFFFFFFFFF8));
            v104 = &v95[8 * v90];
          }
          do
          {
            v111 = *--v103;
            *((_QWORD *)v104 - 1) = v111;
            v104 -= 8;
          }
          while (v103 != (uint64_t *)v87);
        }
LABEL_93:
        v144 = (void *)v87;
        v112 = v102 + 216;
        v113 = (char *)v88 - (char *)v91;
        if (v113)
        {
          v114 = v91;
          v115 = v95;
          memmove(v102 + 216, v114, v113);
          v95 = v115;
          v5 = a1;
        }
        *(_QWORD *)(v5 + 16) = v104;
        *(_QWORD *)(v5 + 24) = &v112[v113];
        *(_QWORD *)(v5 + 32) = &v95[8 * v145];
        v11 = v151;
        if (v144)
        {
          operator delete(v144);
          v5 = a1;
          v11 = v151;
        }
        goto LABEL_128;
      }
      v96 = (char *)v88 - (char *)v91;
      if ((unint64_t)((char *)v88 - (char *)v91) > 0xD7)
      {
        v98 = *(uint64_t **)(v5 + 24);
        v97 = 27;
        goto LABEL_104;
      }
      v97 = v96 >> 3;
      v98 = &v88->i64[27 - (v96 >> 3)];
      v99 = v96 & 0xFFFFFFFFFFFFFFF8;
      v100 = 208 - v99;
      if (208 - v99 >= 0x68)
      {
        v116 = v152 < (uint64_t *)((char *)&v88[13].i64[1] - v99);
        if (v88 >= (int64x2_t *)v153 || (v101 = *(uint64_t **)(v5 + 24), !v116))
        {
          v117 = (v100 >> 3) + 1;
          v101 = &v88->i64[v117 & 0x3FFFFFFFFFFFFFFCLL];
          v118 = vdupq_lane_s64(v152[0], 0);
          v119 = v88 + 1;
          v120 = v117 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v119[-1] = v118;
            *v119 = v118;
            v119 += 2;
            v120 -= 4;
          }
          while (v120);
          if (v117 == (v117 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_103:
            *(_QWORD *)(v5 + 24) = v98;
            if (v88 == (int64x2_t *)v91)
              goto LABEL_128;
LABEL_104:
            v121 = (char *)v98 - (char *)(v91 + 27);
            v122 = v121 >> 3;
            v123 = (int64x2_t *)(v98 - 27);
            v124 = v98;
            if (v98 - 27 < (uint64_t *)v88)
            {
              v125 = (v89 & 0xFFFFFFFFFFFFFFF8) + v121;
              v126 = v87 + v125 + 8;
              if ((unint64_t)v88 > v126)
                v126 = (unint64_t)v88;
              v127 = v126 + ~v87 - v125;
              if (v127 >= 0x58)
              {
                v128 = (v127 >> 3) + 1;
                v129 = v128 & 0x3FFFFFFFFFFFFFFCLL;
                v123 = (int64x2_t *)((char *)v123 + v129 * 8);
                v124 = &v98[v129];
                v130 = v98 + 2;
                v131 = (__int128 *)(v87 + 8 * v122 + 8 * v90 + 16);
                v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v133 = *v131;
                  *(v130 - 1) = *(v131 - 1);
                  *v130 = v133;
                  v130 += 2;
                  v131 += 2;
                  v132 -= 4;
                }
                while (v132);
                v89 = (uint64_t)v88->i64 - v87;
                if (v128 == (v128 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_113;
              }
              else
              {
                v124 = v98;
              }
              do
              {
                v134 = v123->i64[0];
                v123 = (int64x2_t *)((char *)v123 + 8);
                *v124++ = v134;
              }
              while (v123 < v88);
            }
LABEL_113:
            *(_QWORD *)(v5 + 24) = v124;
            if (v98 != v91 + 27)
            {
              v146 = (uint64_t)((uint64_t)v88->i64 - v87) >> 3;
              v135 = (char *)(v87 + (((unint64_t)v88 - v87) & 0xFFFFFFFFFFFFFFF8));
              v136 = v89;
              memmove(&v98[-v122], v135, v121);
              v89 = v136;
              v90 = v146;
              v5 = a1;
              v11 = v151;
            }
            v137 = v152;
            if (v91 <= v152)
            {
              v138 = 27;
              if (*(_QWORD *)(v5 + 24) <= (unint64_t)v152)
                v138 = 0;
              v137 = &v152[v138];
            }
            if (v97 >= 0xA)
            {
              if (v91 >= v137 + 1 || (unint64_t)v137 >= v87 + (v89 & 0xFFFFFFFFFFFFFFF8) + 8 * v97)
              {
                v91 += v97 & 0xFFFFFFFFFFFFFFFCLL;
                v139 = v97 & 3;
                v140 = vld1q_dup_f64((const double *)v137);
                v141 = (float64x2_t *)(v87 + 8 * v90 + 16);
                v142 = v97 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v141[-1] = v140;
                  *v141 = v140;
                  v141 += 2;
                  v142 -= 4;
                }
                while (v142);
                if (v97 == (v97 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_128;
              }
              else
              {
                v139 = v97;
              }
            }
            else
            {
              v139 = v97;
            }
            do
            {
              *v91++ = *v137;
              --v139;
            }
            while (v139);
LABEL_128:
            v19 = *(_QWORD *)(v5 + 24) - 216;
            v6 = v147;
            v8 = v148;
            v7 = v149;
            goto LABEL_129;
          }
        }
      }
      else
      {
        v101 = *(uint64_t **)(v5 + 24);
      }
      do
        *v101++ = v152[0];
      while (v101 != v98);
      goto LABEL_103;
    }
  }
}

void sub_20F91DBBC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int v19;
  uint64_t v20;
  int8x16_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  unint64_t v66;
  int8x16_t v67;
  unint64_t v68;
  int8x16_t v69;
  unint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  int8x16_t v73;
  unint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  unint64_t v77;
  unint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  unint64_t v82;
  int8x16_t v83;
  unint64_t v84;
  uint64_t v85;
  int8x16_t v86;
  uint64_t v87;
  unint64_t v88;
  int8x16_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  _OWORD *v111;
  uint64_t *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  _OWORD *v121;
  size_t v122;
  uint64_t *v123;
  _OWORD *v124;
  BOOL v125;
  uint64_t v126;
  int64x2_t v127;
  int64x2_t *v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  int64x2_t *v132;
  uint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  __int128 *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  float64x2_t v149;
  float64x2_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t __p;
  void *__pb;
  char *__pa;
  _QWORD *v162;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171[2];
  uint64_t v172[2];

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v5 = a1;
    if (*(_DWORD *)(a1 + 8))
    {
      v6 = a3;
      v7 = 0;
      v8 = (_QWORD *)(a1 + 16);
      v152 = HIDWORD(a3);
      LODWORD(v9) = 1;
      v155 = a3;
      v162 = (_QWORD *)(a1 + 16);
      while (!(_DWORD)v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return;
      }
      v10 = 0;
      v11 = *(_QWORD *)(v5 + 88) + 8 * (*(_DWORD *)(v5 + 112) * v7);
      v12 = v152 + 4 * v7;
      v13 = v12 + 1;
      v14 = v12 + 2;
      v15 = v12 + 3;
      v164 = v11;
      v158 = v7;
      while (1)
      {
        v19 = 8 * v10;
        v20 = *(_QWORD *)(v11 + 8 * v10);
        if (v20 != -1)
        {
          v21 = (int8x16_t *)(*v8 + 8 * v20);
          v22 = v19 + v10 + v6;
          v23 = 0;
          v24 = 0;
          if (v12 < v22)
            goto LABEL_12;
LABEL_11:
          v24 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          goto LABEL_12;
        }
        v90 = *(_QWORD *)(v5 + 80);
        if (!v90)
          break;
        v92 = *(_QWORD *)(v5 + 48);
        v91 = *(_QWORD *)(v5 + 56);
        v93 = ((v91 - v92) << 6) - 1;
        v94 = *(_QWORD *)(v5 + 72);
        if (v91 == v92)
          v93 = 0;
        v21 = (int8x16_t *)(*(_QWORD *)(v5 + 16)
                          + 8
                          * *(_QWORD *)(*(_QWORD *)(v92
                                                  + (((unint64_t)(v94 + v90 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v94 + v90 - 1) & 0x1FF)));
        *(_QWORD *)(v5 + 80) = v90 - 1;
        if ((unint64_t)(v93 - (v90 + v94) + 1) >= 0x400)
        {
          operator delete(*(void **)(v91 - 8));
          v5 = a1;
          v11 = v164;
          v8 = v162;
          *(_QWORD *)(a1 + 56) -= 8;
        }
LABEL_148:
        *(_QWORD *)(v11 + 8 * v10) = ((uint64_t)v21->i64 - *(_QWORD *)(v5 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v5 + 120) + 8 * v7);
        v22 = v19 + v10 + v6;
        v23 = 0;
        v24 = 0;
        if (v12 >= v22)
          goto LABEL_11;
LABEL_12:
        v25 = v22 + 1;
        if (v22 + 1 <= v12)
        {
          v23 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
          v26 = v22 + 2;
          v27 = 0;
          v28 = 0;
          if (v22 + 2 > v12)
          {
LABEL_14:
            v29 = v22 + 3;
            if (v22 + 3 > v12)
              goto LABEL_15;
            goto LABEL_52;
          }
        }
        else
        {
          v26 = v22 + 2;
          v27 = 0;
          v28 = 0;
          if (v22 + 2 > v12)
            goto LABEL_14;
        }
        v28 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v29 = v22 + 3;
        if (v22 + 3 > v12)
        {
LABEL_15:
          v30 = v22 + 4;
          v31 = 0;
          v32 = 0;
          if (v22 + 4 > v12)
            goto LABEL_16;
          goto LABEL_53;
        }
LABEL_52:
        v27 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v30 = v22 + 4;
        v31 = 0;
        v32 = 0;
        if (v22 + 4 > v12)
        {
LABEL_16:
          v33 = v22 + 5;
          if (v22 + 5 > v12)
            goto LABEL_17;
          goto LABEL_54;
        }
LABEL_53:
        v32 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v33 = v22 + 5;
        if (v22 + 5 > v12)
        {
LABEL_17:
          v34 = v22 + 6;
          v35 = 0;
          v36 = 0;
          if (v22 + 6 > v12)
            goto LABEL_18;
          goto LABEL_55;
        }
LABEL_54:
        v31 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v34 = v22 + 6;
        v35 = 0;
        v36 = 0;
        if (v22 + 6 > v12)
        {
LABEL_18:
          v37 = v22 + 7;
          if (v22 + 7 > v12)
            goto LABEL_19;
          goto LABEL_56;
        }
LABEL_55:
        v36 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v34 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v37 = v22 + 7;
        if (v22 + 7 > v12)
        {
LABEL_19:
          v38 = v22 + 8;
          v39 = 0;
          v40 = 0;
          if (v22 + 8 > v12)
            goto LABEL_20;
          goto LABEL_57;
        }
LABEL_56:
        v35 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v37 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        v38 = v22 + 8;
        v39 = 0;
        v40 = 0;
        if (v22 + 8 > v12)
        {
LABEL_20:
          if (v13 < v22)
            goto LABEL_21;
          goto LABEL_58;
        }
LABEL_57:
        v40 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v38 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v12));
        if (v13 < v22)
        {
LABEL_21:
          v41 = 0;
          v42 = 0;
          if (v25 > v13)
            goto LABEL_22;
          goto LABEL_59;
        }
LABEL_58:
        v39 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v41 = 0;
        v42 = 0;
        if (v25 > v13)
        {
LABEL_22:
          if (v26 > v13)
            goto LABEL_23;
          goto LABEL_60;
        }
LABEL_59:
        v42 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v26 > v13)
        {
LABEL_23:
          v43 = 0;
          v44 = 0;
          if (v29 > v13)
            goto LABEL_24;
          goto LABEL_61;
        }
LABEL_60:
        v41 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v43 = 0;
        v44 = 0;
        if (v29 > v13)
        {
LABEL_24:
          if (v30 > v13)
            goto LABEL_25;
          goto LABEL_62;
        }
LABEL_61:
        v44 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v30 > v13)
        {
LABEL_25:
          v45 = 0;
          v46 = 0;
          if (v33 > v13)
            goto LABEL_26;
          goto LABEL_63;
        }
LABEL_62:
        v43 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v45 = 0;
        v46 = 0;
        if (v33 > v13)
        {
LABEL_26:
          if (v34 > v13)
            goto LABEL_27;
          goto LABEL_64;
        }
LABEL_63:
        v46 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v34 > v13)
        {
LABEL_27:
          v47 = 0;
          v48 = 0;
          if (v37 > v13)
            goto LABEL_28;
          goto LABEL_65;
        }
LABEL_64:
        v45 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v34 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v47 = 0;
        v48 = 0;
        if (v37 > v13)
        {
LABEL_28:
          if (v38 > v13)
            goto LABEL_29;
          goto LABEL_66;
        }
LABEL_65:
        v48 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v37 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        if (v38 > v13)
        {
LABEL_29:
          v49 = 0;
          v50 = 0;
          if (v14 < v22)
            goto LABEL_30;
          goto LABEL_67;
        }
LABEL_66:
        v47 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v38 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v13));
        v49 = 0;
        v50 = 0;
        if (v14 < v22)
        {
LABEL_30:
          if (v25 > v14)
            goto LABEL_31;
          goto LABEL_68;
        }
LABEL_67:
        v50 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v25 > v14)
        {
LABEL_31:
          v51 = 0;
          v52 = 0;
          if (v26 > v14)
            goto LABEL_32;
          goto LABEL_69;
        }
LABEL_68:
        v49 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v51 = 0;
        v52 = 0;
        if (v26 > v14)
        {
LABEL_32:
          if (v29 > v14)
            goto LABEL_33;
          goto LABEL_70;
        }
LABEL_69:
        v52 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v29 > v14)
        {
LABEL_33:
          v53 = 0;
          v54 = 0;
          if (v30 > v14)
            goto LABEL_34;
          goto LABEL_71;
        }
LABEL_70:
        v51 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v53 = 0;
        v54 = 0;
        if (v30 > v14)
        {
LABEL_34:
          if (v33 > v14)
            goto LABEL_35;
          goto LABEL_72;
        }
LABEL_71:
        v54 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v33 > v14)
        {
LABEL_35:
          v55 = 0;
          v56 = 0;
          if (v34 > v14)
            goto LABEL_36;
          goto LABEL_73;
        }
LABEL_72:
        v53 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v55 = 0;
        v56 = 0;
        if (v34 > v14)
        {
LABEL_36:
          if (v37 > v14)
            goto LABEL_37;
          goto LABEL_74;
        }
LABEL_73:
        v56 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v34 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        if (v37 > v14)
        {
LABEL_37:
          v57 = 0;
          v58 = 0;
          if (v38 > v14)
            goto LABEL_39;
LABEL_38:
          v58 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v38 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
          goto LABEL_39;
        }
LABEL_74:
        v55 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v37 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v14));
        v57 = 0;
        v58 = 0;
        if (v38 <= v14)
          goto LABEL_38;
LABEL_39:
        v59.i64[0] = v24;
        v59.i64[1] = v23;
        v60.i64[0] = v28;
        v60.i64[1] = v27;
        v61.i64[0] = v32;
        v61.i64[1] = v31;
        v62.i64[0] = v36;
        v62.i64[1] = v35;
        v63.i64[0] = v40;
        v63.i64[1] = v39;
        v64.i64[0] = v42;
        v64.i64[1] = v41;
        v65.i64[0] = v44;
        v65.i64[1] = v43;
        v67.i64[0] = v46;
        v66 = vextq_s8(v60, v60, 8uLL).u64[0];
        v67.i64[1] = v45;
        v167 = vextq_s8(v59, v59, 8uLL).u64[0];
        v168 = vextq_s8(v61, v61, 8uLL).u64[0];
        v69.i64[0] = v48;
        v68 = vextq_s8(v62, v62, 8uLL).u64[0];
        v69.i64[1] = v47;
        v71.i64[0] = v50;
        v165 = vextq_s8(v63, v63, 8uLL).u64[0];
        v70 = vextq_s8(v64, v64, 8uLL).u64[0];
        v71.i64[1] = v49;
        v166 = vextq_s8(v65, v65, 8uLL).u64[0];
        v73.i64[0] = v52;
        v72 = vextq_s8(v67, v67, 8uLL).u64[0];
        v73.i64[1] = v51;
        v74 = vextq_s8(v69, v69, 8uLL).u64[0];
        v76.i64[0] = v54;
        v75 = vextq_s8(v71, v71, 8uLL).u64[0];
        v76.i64[1] = v53;
        v79.i64[0] = v56;
        v77 = vextq_s8(v73, v73, 8uLL).u64[0];
        v78 = vextq_s8(v76, v76, 8uLL).u64[0];
        v79.i64[1] = v55;
        v170 = vextq_s8(v79, v79, 8uLL).u64[0];
        if (v15 >= v22)
          v57 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v22 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v80.i64[0] = v58;
        v80.i64[1] = v57;
        v169 = vextq_s8(v80, v80, 8uLL).u64[0];
        if (v25 <= v15)
        {
          v81.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v25 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
          if (v26 > v15)
          {
LABEL_43:
            v82 = vextq_s8((int8x16_t)v81.u64[0], (int8x16_t)v81.u64[0], 8uLL).u64[0];
            if (v29 > v15)
              goto LABEL_44;
            goto LABEL_78;
          }
        }
        else
        {
          v81.i64[0] = 0;
          if (v26 > v15)
            goto LABEL_43;
        }
        v81.i64[1] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v26 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v82 = vextq_s8(v81, v81, 8uLL).u64[0];
        if (v29 > v15)
        {
LABEL_44:
          v83.i64[0] = 0;
          if (v30 > v15)
            goto LABEL_45;
          goto LABEL_79;
        }
LABEL_78:
        v83.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v29 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        if (v30 > v15)
        {
LABEL_45:
          v84 = vextq_s8((int8x16_t)v83.u64[0], (int8x16_t)v83.u64[0], 8uLL).u64[0];
          v85 = 0;
          if (v33 > v15)
            goto LABEL_46;
          goto LABEL_80;
        }
LABEL_79:
        v83.i64[1] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v30 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v84 = vextq_s8(v83, v83, 8uLL).u64[0];
        v85 = 0;
        if (v33 > v15)
        {
LABEL_46:
          v86.i64[0] = 0;
          if (v34 > v15)
            goto LABEL_47;
          goto LABEL_81;
        }
LABEL_80:
        v86.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v33 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        if (v34 > v15)
        {
LABEL_47:
          v87 = 0;
          if (v37 > v15)
            goto LABEL_48;
          goto LABEL_82;
        }
LABEL_81:
        v85 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v34 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        v87 = 0;
        if (v37 > v15)
        {
LABEL_48:
          v86.i64[1] = v85;
          v88 = vextq_s8(v86, v86, 8uLL).u64[0];
          v89.i64[0] = 0;
          if (v38 <= v15)
            goto LABEL_83;
          goto LABEL_8;
        }
LABEL_82:
        v86.i64[1] = v85;
        v88 = vextq_s8(v86, v86, 8uLL).u64[0];
        v89.i64[0] = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v37 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
        if (v38 <= v15)
LABEL_83:
          v87 = *(_QWORD *)(**(_QWORD **)a2 + 8 * (v38 + *(_DWORD *)(*(_QWORD *)a2 + 16) * v15));
LABEL_8:
        v89.i64[1] = v87;
        v16.i64[0] = v83.i64[0];
        v16.i64[1] = v84;
        v17.i64[0] = v60.i64[0];
        v17.i64[1] = v66;
        v59.i64[1] = v167;
        *v21 = v59;
        v21[1] = v17;
        v18.i64[0] = v62.i64[0];
        v18.i64[1] = v68;
        v17.i64[0] = v61.i64[0];
        v17.i64[1] = v168;
        v21[2] = v17;
        v21[3] = v18;
        v17.i64[0] = v64.i64[0];
        v17.i64[1] = v70;
        v18.i64[0] = v63.i64[0];
        v18.i64[1] = v165;
        v21[4] = v18;
        v21[5] = v17;
        v18.i64[0] = v67.i64[0];
        v18.i64[1] = v72;
        v17.i64[0] = v65.i64[0];
        v17.i64[1] = v166;
        v21[6] = v17;
        v21[7] = v18;
        v17.i64[0] = v71.i64[0];
        v17.i64[1] = v75;
        v18.i64[0] = v69.i64[0];
        v18.i64[1] = v74;
        v21[8] = v18;
        v21[9] = v17;
        v18.i64[0] = v76.i64[0];
        v18.i64[1] = v78;
        v17.i64[0] = v73.i64[0];
        v17.i64[1] = v77;
        v21[10] = v17;
        v21[11] = v18;
        v17.i64[0] = v80.i64[0];
        v17.i64[1] = v169;
        v18.i64[0] = v79.i64[0];
        v18.i64[1] = v170;
        v21[12] = v18;
        v21[13] = v17;
        v18.i64[0] = v81.i64[0];
        v18.i64[1] = v82;
        v21[14] = v18;
        v21[15] = v16;
        v18.i64[0] = v86.i64[0];
        v18.i64[1] = v88;
        v21[16] = v18;
        v21[17] = v89;
        ++v10;
        v9 = *(unsigned int *)(v5 + 8);
        if (v10 >= v9)
        {
          v3 = *(unsigned int *)(v5 + 12);
          goto LABEL_5;
        }
      }
      v171[0] = 0;
      v95 = *(_QWORD *)(v5 + 16);
      v96 = *(int64x2_t **)(v5 + 24);
      v97 = (uint64_t)v96->i64 - v95;
      v98 = (uint64_t)((uint64_t)v96->i64 - v95) >> 3;
      v99 = (uint64_t *)(v95 + (((unint64_t)v96 - v95) & 0xFFFFFFFFFFFFFFF8));
      v100 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v100 - (_QWORD)v96) < 0x120)
      {
        v101 = v98 + 36;
        if ((unint64_t)(v98 + 36) >> 61)
          sub_20E867F44();
        v102 = v100 - v95;
        if (v102 >> 2 > v101)
          v101 = v102 >> 2;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        v156 = v101;
        if (v101)
        {
          v153 = (uint64_t)v96->i64 - v95;
          __p = (uint64_t)((uint64_t)v96->i64 - v95) >> 3;
          if (v101 >> 61)
            sub_20E877A38();
          v103 = *(_QWORD *)(v5 + 16);
          v104 = operator new(8 * v101);
          v5 = a1;
          v95 = v103;
          v98 = __p;
          v97 = v153;
        }
        else
        {
          v104 = 0;
        }
        v111 = &v104[8 * v98];
        v111[16] = 0u;
        v111[17] = 0u;
        v111[14] = 0u;
        v111[15] = 0u;
        v111[12] = 0u;
        v111[13] = 0u;
        v111[10] = 0u;
        v111[11] = 0u;
        v111[8] = 0u;
        v111[9] = 0u;
        v111[6] = 0u;
        v111[7] = 0u;
        v111[4] = 0u;
        v111[5] = 0u;
        v111[2] = 0u;
        v111[3] = 0u;
        *v111 = 0u;
        v111[1] = 0u;
        if ((int64x2_t *)v95 == v96)
        {
          v113 = &v104[8 * v98];
        }
        else
        {
          if ((unint64_t)(v97 - 8) >= 0x68)
          {
            v112 = v99;
            v113 = &v104[8 * v98];
            if (v95 + (v97 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v104[v97 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v114 = ((unint64_t)(v97 - 8) >> 3) + 1;
              v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
              v112 = &v99[v115 / 0xFFFFFFFFFFFFFFF8];
              v113 = (char *)v111 - v115;
              v116 = &v104[8 * v98 - 16];
              v117 = (__int128 *)(v95 + 8 * v98 - 16);
              v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v119 = *v117;
                *(v116 - 1) = *(v117 - 1);
                *v116 = v119;
                v116 -= 2;
                v117 -= 2;
                v118 -= 4;
              }
              while (v118);
              if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_112;
            }
          }
          else
          {
            v112 = v99;
            v113 = &v104[8 * v98];
          }
          do
          {
            v120 = *--v112;
            *((_QWORD *)v113 - 1) = v120;
            v113 -= 8;
          }
          while (v112 != (uint64_t *)v95);
        }
LABEL_112:
        v121 = v111 + 18;
        v122 = (char *)v96 - (char *)v99;
        if (v122)
        {
          __pb = (void *)v95;
          v123 = v99;
          v154 = v104;
          v124 = v111 + 18;
          memmove(v111 + 18, v123, v122);
          v121 = v124;
          v104 = v154;
          v95 = (unint64_t)__pb;
          v5 = a1;
        }
        *(_QWORD *)(v5 + 16) = v113;
        *(_QWORD *)(v5 + 24) = (char *)v121 + v122;
        *(_QWORD *)(v5 + 32) = &v104[8 * v156];
        v6 = v155;
        v8 = v162;
        v11 = v164;
        if (v95)
        {
          operator delete((void *)v95);
          v5 = a1;
          v11 = v164;
          v8 = v162;
        }
        goto LABEL_147;
      }
      v105 = (char *)v96 - (char *)v99;
      if ((unint64_t)((char *)v96 - (char *)v99) > 0x11F)
      {
        v107 = *(uint64_t **)(v5 + 24);
        v106 = 36;
        goto LABEL_123;
      }
      v106 = v105 >> 3;
      v107 = &v96->i64[36 - (v105 >> 3)];
      v108 = v105 & 0xFFFFFFFFFFFFFFF8;
      v109 = 280 - v108;
      if (280 - v108 >= 0x68)
      {
        v125 = v171 < (uint64_t *)((char *)v96[18].i64 - v108);
        if (v96 >= (int64x2_t *)v172 || (v110 = *(uint64_t **)(v5 + 24), !v125))
        {
          v126 = (v109 >> 3) + 1;
          v110 = &v96->i64[v126 & 0x3FFFFFFFFFFFFFFCLL];
          v127 = vdupq_lane_s64(v171[0], 0);
          v128 = v96 + 1;
          v129 = v126 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v128[-1] = v127;
            *v128 = v127;
            v128 += 2;
            v129 -= 4;
          }
          while (v129);
          if (v126 == (v126 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_122:
            *(_QWORD *)(v5 + 24) = v107;
            if (v96 == (int64x2_t *)v99)
              goto LABEL_147;
LABEL_123:
            v130 = (char *)v107 - (char *)(v99 + 36);
            v131 = v130 >> 3;
            v132 = (int64x2_t *)(v107 - 36);
            v133 = v107;
            if (v107 - 36 < (uint64_t *)v96)
            {
              v134 = (v97 & 0xFFFFFFFFFFFFFFF8) + v130;
              v135 = v95 + v134 + 8;
              if ((unint64_t)v96 > v135)
                v135 = (unint64_t)v96;
              v136 = v135 + ~v95 - v134;
              if (v136 >= 0x58)
              {
                v137 = (v136 >> 3) + 1;
                v138 = v137 & 0x3FFFFFFFFFFFFFFCLL;
                v132 = (int64x2_t *)((char *)v132 + v138 * 8);
                v133 = &v107[v138];
                v139 = v107 + 2;
                v140 = (__int128 *)(v95 + 8 * v131 + 8 * v98 + 16);
                v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v142 = *v140;
                  *(v139 - 1) = *(v140 - 1);
                  *v139 = v142;
                  v139 += 2;
                  v140 += 2;
                  v141 -= 4;
                }
                while (v141);
                v97 = (uint64_t)v96->i64 - v95;
                if (v137 == (v137 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_132;
              }
              else
              {
                v133 = v107;
              }
              do
              {
                v143 = v132->i64[0];
                v132 = (int64x2_t *)((char *)v132 + 8);
                *v133++ = v143;
              }
              while (v132 < v96);
            }
LABEL_132:
            __pa = (char *)v95;
            *(_QWORD *)(v5 + 24) = v133;
            if (v107 != v99 + 36)
            {
              v144 = (uint64_t)((uint64_t)v96->i64 - v95) >> 3;
              v145 = v97;
              v157 = v106;
              memmove(&v107[-v131], v99, v130);
              v97 = v145;
              v98 = v144;
              v6 = v155;
              v106 = v157;
              v5 = a1;
              v11 = v164;
              v8 = v162;
            }
            v146 = v171;
            if (v99 <= v171)
            {
              v147 = 36;
              if (*(_QWORD *)(v5 + 24) <= (unint64_t)v171)
                v147 = 0;
              v146 = &v171[v147];
            }
            if (v106 >= 0xA)
            {
              if (v99 >= v146 + 1 || v146 >= (uint64_t *)&__pa[8 * v106 + (v97 & 0xFFFFFFFFFFFFFFF8)])
              {
                v99 += v106 & 0xFFFFFFFFFFFFFFFCLL;
                v148 = v106 & 3;
                v149 = vld1q_dup_f64((const double *)v146);
                v150 = (float64x2_t *)&__pa[8 * v98 + 16];
                v151 = v106 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v150[-1] = v149;
                  *v150 = v149;
                  v150 += 2;
                  v151 -= 4;
                }
                while (v151);
                if (v106 == (v106 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_147;
              }
              else
              {
                v148 = v106;
              }
            }
            else
            {
              v148 = v106;
            }
            do
            {
              *v99++ = *v146;
              --v148;
            }
            while (v148);
LABEL_147:
            v21 = (int8x16_t *)(*(_QWORD *)(v5 + 24) - 288);
            v7 = v158;
            goto LABEL_148;
          }
        }
      }
      else
      {
        v110 = *(uint64_t **)(v5 + 24);
      }
      do
        *v110++ = v171[0];
      while (v110 != v107);
      goto LABEL_122;
    }
  }
}

uint64_t sub_20F91EB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 24);
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 40);
      *(_OWORD *)(a3 + 24) = v6;
      v7 = *(_OWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      v8 = *(std::__shared_weak_count **)(a3 + 56);
      *(_OWORD *)(a3 + 48) = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64);
      v11 = *(_OWORD *)(v5 + 72);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
      *(_OWORD *)(a3 + 72) = v11;
      v12 = *(_OWORD *)(v5 + 96);
      *(_QWORD *)(a3 + 112) = *(_QWORD *)(v5 + 112);
      *(_OWORD *)(a3 + 96) = v12;
      v13 = *(_QWORD *)(v5 + 120);
      *(_BYTE *)(a3 + 128) = *(_BYTE *)(v5 + 128);
      *(_QWORD *)(a3 + 120) = v13;
      v14 = *(_OWORD *)(v5 + 136);
      *(_QWORD *)(v5 + 136) = 0;
      *(_QWORD *)(v5 + 144) = 0;
      v15 = *(std::__shared_weak_count **)(a3 + 144);
      *(_OWORD *)(a3 + 136) = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      *(_BYTE *)(a3 + 152) = *(_BYTE *)(v5 + 152);
      v5 += 160;
      a3 += 160;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_20F91EC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v7 = *(std::__shared_weak_count **)(a3 + 32);
      *(_OWORD *)(a3 + 24) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      *(_BYTE *)(a3 + 40) = *(_BYTE *)(v5 + 40);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v5 + 48);
      v10 = *(_OWORD *)(v5 + 56);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_OWORD *)(a3 + 56) = v10;
      v11 = *(_OWORD *)(v5 + 80);
      *(_QWORD *)(a3 + 96) = *(_QWORD *)(v5 + 96);
      *(_OWORD *)(a3 + 80) = v11;
      v12 = *(_QWORD *)(v5 + 104);
      *(_BYTE *)(a3 + 112) = *(_BYTE *)(v5 + 112);
      *(_QWORD *)(a3 + 104) = v12;
      v13 = *(_OWORD *)(v5 + 120);
      *(_QWORD *)(v5 + 120) = 0;
      *(_QWORD *)(v5 + 128) = 0;
      v14 = *(std::__shared_weak_count **)(a3 + 128);
      *(_OWORD *)(a3 + 120) = v13;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      *(_BYTE *)(a3 + 136) = *(_BYTE *)(v5 + 136);
      v5 += 144;
      a3 += 144;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_20F91ED74(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v8;
  v9 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v12 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v11;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

