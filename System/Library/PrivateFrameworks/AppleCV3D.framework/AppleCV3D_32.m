void sub_20F4C5D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t v202;
  float64x2_t v205;
  double v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v228;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64_t v237;
  float64x2_t v238;
  float64_t v455;
  float64_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  uint64_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  double v479;
  float64x2_t v480;
  uint64_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  uint64_t v490;
  float64x2_t v491;
  double v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  double v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  double v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  double v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  double v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  __int128 *v548;
  __int128 *v549;
  __int128 v550;
  BOOL v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  double v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  double v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  double v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  double v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  double v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  double v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  double v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  double v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  double v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  double v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  double v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  double v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  double v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  double v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  double v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  double v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  double v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  double v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  double v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  double v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  double v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  double v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  double v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  double v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  double v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  double v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  double v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  double v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  double v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  double v791;

  MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  if (*(_BYTE *)(v1 + 1816))
  {
    *(_QWORD *)&v672.f64[0] = v1 + 16;
    v551 = 0;
    sub_20F4CE6EC((uint64_t)&v550, &v672);
    v551 = sub_20E8BE990() == 0;
    v549 = &v550;
    v548 = &v550;
    sub_20F4CE6EC((uint64_t)&v552, (_QWORD **)&v549);
    sub_20F4CE6EC((uint64_t)&v672, (_QWORD **)&v548);
    _V1.D[1] = v680.f64[1];
    _Q20.f64[0] = v559;
    _D19 = v567;
    __asm { FMLA            D13, D19, V1.D[1] }
    _V0.D[1] = v681.f64[1];
    __asm { FMLA            D1, D19, V0.D[1] }
    _V0.D[1] = v682.f64[1];
    __asm { FMLA            D1, D19, V0.D[1] }
    _V0.D[1] = v683.f64[1];
    __asm { FMLA            D1, D19, V0.D[1] }
    _V0.D[1] = v684.f64[1];
    __asm { FMLA            D1, D19, V0.D[1] }
    _V0.D[1] = v685.f64[1];
    __asm { FMLA            D1, D19, V0.D[1] }
    _Q0.f64[1] = v686.f64[1];
    __asm { FMLA            D1, D19, V0.D[1] }
    _Q0.f64[0] = v679;
    v467 = vmulq_f64(_Q20, _Q0).f64[0] + v567 * v687;
    _V1.D[1] = v688.f64[1];
    _Q0.f64[0] = v575;
    __asm { FMLA            D13, D0, V1.D[1] }
    _V1.D[1] = v689.f64[1];
    __asm { FMLA            D14, D0, V1.D[1] }
    _V1.D[1] = v690.f64[1];
    __asm { FMLA            D14, D0, V1.D[1] }
    _V1.D[1] = v691.f64[1];
    __asm { FMLA            D14, D0, V1.D[1] }
    _V1.D[1] = v692.f64[1];
    __asm { FMLA            D14, D0, V1.D[1] }
    _V1.D[1] = v693.f64[1];
    __asm { FMLA            D14, D0, V1.D[1] }
    _V1.D[1] = v694.f64[1];
    __asm { FMLA            D14, D0, V1.D[1] }
    _V1.D[1] = v696.f64[1];
    _D31 = v583;
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v697.f64[1];
    __asm { FMLA            D24, D31, V1.D[1] }
    _V1.D[1] = v698.f64[1];
    __asm { FMLA            D30, D31, V1.D[1] }
    _V1.D[1] = v699.f64[1];
    __asm { FMLA            D30, D31, V1.D[1] }
    _V1.D[1] = v700.f64[1];
    __asm { FMLA            D30, D31, V1.D[1] }
    _V1.D[1] = v701.f64[1];
    __asm { FMLA            D30, D31, V1.D[1] }
    _V1.D[1] = v702.f64[1];
    __asm { FMLA            D30, D31, V1.D[1] }
    _V1.D[1] = v704.f64[1];
    _D31 = v591;
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v705.f64[1];
    __asm { FMLA            D24, D31, V1.D[1] }
    _V1.D[1] = v706.f64[1];
    __asm { FMLA            D29, D31, V1.D[1] }
    _V1.D[1] = v707.f64[1];
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v708.f64[1];
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v709.f64[1];
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v710.f64[1];
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v712.f64[1];
    _D31 = v599;
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v713.f64[1];
    __asm { FMLA            D27, D31, V1.D[1] }
    _V1.D[1] = v714.f64[1];
    __asm { FMLA            D28, D31, V1.D[1] }
    _V1.D[1] = v715.f64[1];
    __asm { FMLA            D19, D31, V1.D[1] }
    _V1.D[1] = v716.f64[1];
    __asm { FMLA            D19, D31, V1.D[1] }
    _V1.D[1] = v717.f64[1];
    __asm { FMLA            D19, D31, V1.D[1] }
    _V1.D[1] = v718.f64[1];
    __asm { FMLA            D19, D31, V1.D[1] }
    _V1.D[1] = v720.f64[1];
    _D31 = v607;
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v721.f64[1];
    __asm { FMLA            D27, D31, V1.D[1] }
    _V1.D[1] = v722.f64[1];
    __asm { FMLA            D28, D31, V1.D[1] }
    _V1.D[1] = v723.f64[1];
    __asm { FMLA            D29, D31, V1.D[1] }
    _V1.D[1] = v724.f64[1];
    __asm { FMLA            D14, D31, V1.D[1] }
    _V1.D[1] = v725.f64[1];
    __asm { FMLA            D9, D31, V1.D[1] }
    _V1.D[1] = v726.f64[1];
    __asm { FMLA            D9, D31, V1.D[1] }
    _V1.D[1] = v728.f64[1];
    _D31 = v615;
    __asm { FMLA            D9, D31, V1.D[1] }
    _V1.D[1] = v729.f64[1];
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v730.f64[1];
    __asm { FMLA            D9, D31, V1.D[1] }
    _V1.D[1] = v731.f64[1];
    __asm { FMLA            D29, D31, V1.D[1] }
    _V1.D[1] = v732.f64[1];
    __asm { FMLA            D13, D31, V1.D[1] }
    _V1.D[1] = v733.f64[1];
    __asm { FMLA            D14, D31, V1.D[1] }
    _V1.D[1] = v734.f64[1];
    __asm { FMLA            D23, D31, V1.D[1] }
    _V1.D[1] = v736.f64[1];
    _D31 = v623;
    __asm { FMLA            D23, D31, V1.D[1] }
    _V1.D[1] = v737.f64[1];
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v738.f64[1];
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v739.f64[1];
    __asm { FMLA            D9, D31, V1.D[1] }
    _V1.D[1] = v740.f64[1];
    __asm { FMLA            D13, D31, V1.D[1] }
    _V1.D[1] = v741.f64[1];
    __asm { FMLA            D14, D31, V1.D[1] }
    _V1.D[1] = v742.f64[1];
    __asm { FMLA            D18, D31, V1.D[1] }
    _V1.D[1] = v744.f64[1];
    _D31 = v631;
    __asm { FMLA            D18, D31, V1.D[1] }
    _V1.D[1] = v745.f64[1];
    __asm { FMLA            D18, D31, V1.D[1] }
    _V1.D[1] = v746.f64[1];
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v747.f64[1];
    __asm { FMLA            D19, D31, V1.D[1] }
    _V1.D[1] = v748.f64[1];
    __asm { FMLA            D15, D31, V1.D[1] }
    _V1.D[1] = v749.f64[1];
    __asm { FMLA            D21, D31, V1.D[1] }
    _V1.D[1] = v750.f64[1];
    __asm { FMLA            D25, D31, V1.D[1] }
    _V1.D[1] = v752.f64[1];
    _D31 = v639;
    __asm { FMLA            D25, D31, V1.D[1] }
    _V1.D[1] = v753.f64[1];
    __asm { FMLA            D25, D31, V1.D[1] }
    _V1.D[1] = v754.f64[1];
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v755.f64[1];
    __asm { FMLA            D25, D31, V1.D[1] }
    _V1.D[1] = v756.f64[1];
    __asm { FMLA            D15, D31, V1.D[1] }
    _V1.D[1] = v757.f64[1];
    __asm { FMLA            D22, D31, V1.D[1] }
    _V1.D[1] = v758.f64[1];
    __asm { FMLA            D12, D31, V1.D[1] }
    _V1.D[1] = v760.f64[1];
    _D31 = v647;
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v761.f64[1];
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v762.f64[1];
    __asm { FMLA            D26, D31, V1.D[1] }
    _V1.D[1] = v763.f64[1];
    __asm { FMLA            D18, D31, V1.D[1] }
    _V1.D[1] = v764.f64[1];
    __asm { FMLA            D15, D31, V1.D[1] }
    _V1.D[1] = v765.f64[1];
    __asm { FMLA            D18, D31, V1.D[1] }
    _V1.D[1] = v766.f64[1];
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v768.f64[1];
    _D31 = v655;
    __asm { FMLA            D29, D31, V1.D[1] }
    _V1.D[1] = v769.f64[1];
    __asm { FMLA            D29, D31, V1.D[1] }
    _V1.D[1] = v770.f64[1];
    __asm { FMLA            D29, D31, V1.D[1] }
    _V1.D[1] = v771.f64[1];
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v772.f64[1];
    __asm { FMLA            D20, D31, V1.D[1] }
    _V1.D[1] = v773.f64[1];
    __asm { FMLA            D20, D31, V1.D[1] }
    _V1.D[1] = v774.f64[1];
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v776.f64[1];
    _D31 = v663;
    __asm { FMLA            D20, D31, V1.D[1] }
    _V1.D[1] = v777.f64[1];
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v778.f64[1];
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v779.f64[1];
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v780.f64[1];
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v781.f64[1];
    __asm { FMLA            D10, D31, V1.D[1] }
    _V1.D[1] = v782.f64[1];
    __asm { FMLA            D10, D31, V1.D[1] }
    v455 = v467
         + v575 * v695
         + v583 * v703
         + v591 * v711
         + v599 * v719
         + v607 * v727
         + v615 * v735
         + v623 * v743
         + v631 * v751
         + v639 * v759
         + v647 * v767
         + v655 * v775
         + v663 * v783;
    _V1.D[1] = v784.f64[1];
    v531 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v672.f64[0]), v560, v680.f64[0]), v568, v688.f64[0]), v576, v696.f64[0]), v584, v704.f64[0]),
                               v592,
                               v712.f64[0]),
                             v600,
                             v720.f64[0]),
                           v608,
                           v728.f64[0]),
                         v616,
                         v736.f64[0]),
                       v624,
                       v744.f64[0]),
                     v632,
                     v752.f64[0]),
                   v640,
                   v760.f64[0]),
                 v648,
                 v768.f64[0]),
               v656,
               v776.f64[0]),
             v664,
             v784.f64[0]);
    v486 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v672.f64[0]), v561, v680.f64[0]), v569, v688.f64[0]), v577, v696.f64[0]), v585, v704.f64[0]),
                               v593,
                               v712.f64[0]),
                             v601,
                             v720.f64[0]),
                           v609,
                           v728.f64[0]),
                         v617,
                         v736.f64[0]),
                       v625,
                       v744.f64[0]),
                     v633,
                     v752.f64[0]),
                   v641,
                   v760.f64[0]),
                 v649,
                 v768.f64[0]),
               v657,
               v776.f64[0]),
             v665,
             v784.f64[0]);
    v530 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v672.f64[0]), v562, v680.f64[0]), v570, v688.f64[0]), v578, v696.f64[0]), v586, v704.f64[0]),
                               v594,
                               v712.f64[0]),
                             v602,
                             v720.f64[0]),
                           v610,
                           v728.f64[0]),
                         v618,
                         v736.f64[0]),
                       v626,
                       v744.f64[0]),
                     v634,
                     v752.f64[0]),
                   v642,
                   v760.f64[0]),
                 v650,
                 v768.f64[0]),
               v658,
               v776.f64[0]),
             v666,
             v784.f64[0]);
    v465 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v672.f64[0]), v563, v680.f64[0]), v571, v688.f64[0]), v579, v696.f64[0]), v587, v704.f64[0]),
                               v595,
                               v712.f64[0]),
                             v603,
                             v720.f64[0]),
                           v611,
                           v728.f64[0]),
                         v619,
                         v736.f64[0]),
                       v627,
                       v744.f64[0]),
                     v635,
                     v752.f64[0]),
                   v643,
                   v760.f64[0]),
                 v651,
                 v768.f64[0]),
               v659,
               v776.f64[0]),
             v667,
             v784.f64[0]);
    v529 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v672.f64[0]), v564, v680.f64[0]), v572, v688.f64[0]), v580, v696.f64[0]), v588, v704.f64[0]),
                               v596,
                               v712.f64[0]),
                             v604,
                             v720.f64[0]),
                           v612,
                           v728.f64[0]),
                         v620,
                         v736.f64[0]),
                       v628,
                       v744.f64[0]),
                     v636,
                     v752.f64[0]),
                   v644,
                   v760.f64[0]),
                 v652,
                 v768.f64[0]),
               v660,
               v776.f64[0]),
             v668,
             v784.f64[0]);
    _D31 = v671;
    v532 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v559 * v672.f64[0], v567, v680.f64[0]), v575, v688.f64[0]), v583, v696.f64[0]), v591, v704.f64[0]), v599, v712.f64[0]), v607,
                             v720.f64[0]),
                           v615,
                           v728.f64[0]),
                         v623,
                         v736.f64[0]),
                       v631,
                       v744.f64[0]),
                     v639,
                     v752.f64[0]),
                   v647,
                   v760.f64[0]),
                 v655,
                 v768.f64[0]),
               v663,
               v776.f64[0]),
             v671,
             v784.f64[0]);
    v528 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v553, v672, 1), v561, v680, 1), v569, v688, 1), v577, v696, 1),
                                 v585,
                                 v704,
                                 1),
                               v593,
                               v712,
                               1),
                             v601,
                             v720,
                             1),
                           v609,
                           v728,
                           1),
                         v617,
                         v736,
                         1),
                       v625,
                       v744,
                       1),
                     v633,
                     v752,
                     1),
                   v641,
                   v760,
                   1),
                 v649,
                 v768,
                 1),
               v657,
               v776,
               1),
             v665,
             v784,
             1);
    v546 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, v672, 1), v562, v680, 1), v570, v688, 1), v578, v696, 1),
                                 v586,
                                 v704,
                                 1),
                               v594,
                               v712,
                               1),
                             v602,
                             v720,
                             1),
                           v610,
                           v728,
                           1),
                         v618,
                         v736,
                         1),
                       v626,
                       v744,
                       1),
                     v634,
                     v752,
                     1),
                   v642,
                   v760,
                   1),
                 v650,
                 v768,
                 1),
               v658,
               v776,
               1),
             v666,
             v784,
             1);
    v466 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v552, v672, 1), v560, v680, 1), v568, v688, 1), v576, v696, 1),
                                 v584,
                                 v704,
                                 1),
                               v592,
                               v712,
                               1),
                             v600,
                             v720,
                             1),
                           v608,
                           v728,
                           1),
                         v616,
                         v736,
                         1),
                       v624,
                       v744,
                       1),
                     v632,
                     v752,
                     1),
                   v640,
                   v760,
                   1),
                 v648,
                 v768,
                 1),
               v656,
               v776,
               1),
             v664,
             v784,
             1);
    v468 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v555, v672, 1), v563, v680, 1), v571, v688, 1), v579, v696, 1),
                                 v587,
                                 v704,
                                 1),
                               v595,
                               v712,
                               1),
                             v603,
                             v720,
                             1),
                           v611,
                           v728,
                           1),
                         v619,
                         v736,
                         1),
                       v627,
                       v744,
                       1),
                     v635,
                     v752,
                     1),
                   v643,
                   v760,
                   1),
                 v651,
                 v768,
                 1),
               v659,
               v776,
               1),
             v667,
             v784,
             1);
    v459 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v672, 1), v564, v680, 1), v572, v688, 1), v580, v696, 1),
                                 v588,
                                 v704,
                                 1),
                               v596,
                               v712,
                               1),
                             v604,
                             v720,
                             1),
                           v612,
                           v728,
                           1),
                         v620,
                         v736,
                         1),
                       v628,
                       v744,
                       1),
                     v636,
                     v752,
                     1),
                   v644,
                   v760,
                   1),
                 v652,
                 v768,
                 1),
               v660,
               v776,
               1),
             v668,
             v784,
             1);
    v527 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v557, v672, 1), v565, v680, 1), v573, v688, 1), v581, v696, 1),
                                 v589,
                                 v704,
                                 1),
                               v597,
                               v712,
                               1),
                             v605,
                             v720,
                             1),
                           v613,
                           v728,
                           1),
                         v621,
                         v736,
                         1),
                       v629,
                       v744,
                       1),
                     v637,
                     v752,
                     1),
                   v645,
                   v760,
                   1),
                 v653,
                 v768,
                 1),
               v661,
               v776,
               1),
             v669,
             v784,
             1);
    v202 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v558, v672, 1), v566, v680, 1), v574, v688, 1), v582, v696, 1),
                                 v590,
                                 v704,
                                 1),
                               v598,
                               v712,
                               1),
                             v606,
                             v720,
                             1),
                           v614,
                           v728,
                           1),
                         v622,
                         v736,
                         1),
                       v630,
                       v744,
                       1),
                     v638,
                     v752,
                     1),
                   v646,
                   v760,
                   1),
                 v654,
                 v768,
                 1),
               v662,
               v776,
               1),
             v670,
             v784,
             1);
    __asm { FMLA            D19, D31, V1.D[1] }
    v464 = _D19;
    _V1.D[1] = v785.f64[1];
    v457 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v673.f64[0]), v562, v681.f64[0]), v570, v689.f64[0]), v578, v697.f64[0]), v586, v705.f64[0]),
                               v594,
                               v713.f64[0]),
                             v602,
                             v721.f64[0]),
                           v610,
                           v729.f64[0]),
                         v618,
                         v737.f64[0]),
                       v626,
                       v745.f64[0]),
                     v634,
                     v753.f64[0]),
                   v642,
                   v761.f64[0]),
                 v650,
                 v769.f64[0]),
               v658,
               v777.f64[0]),
             v666,
             v785.f64[0]);
    v458 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v673.f64[0]), v561, v681.f64[0]), v569, v689.f64[0]), v577, v697.f64[0]), v585, v705.f64[0]),
                               v593,
                               v713.f64[0]),
                             v601,
                             v721.f64[0]),
                           v609,
                           v729.f64[0]),
                         v617,
                         v737.f64[0]),
                       v625,
                       v745.f64[0]),
                     v633,
                     v753.f64[0]),
                   v641,
                   v761.f64[0]),
                 v649,
                 v769.f64[0]),
               v657,
               v777.f64[0]),
             v665,
             v785.f64[0]);
    v484 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v673.f64[0]), v563, v681.f64[0]), v571, v689.f64[0]), v579, v697.f64[0]), v587, v705.f64[0]),
                               v595,
                               v713.f64[0]),
                             v603,
                             v721.f64[0]),
                           v611,
                           v729.f64[0]),
                         v619,
                         v737.f64[0]),
                       v627,
                       v745.f64[0]),
                     v635,
                     v753.f64[0]),
                   v643,
                   v761.f64[0]),
                 v651,
                 v769.f64[0]),
               v659,
               v777.f64[0]),
             v667,
             v785.f64[0]);
    v485 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v673.f64[0]), v560, v681.f64[0]), v568, v689.f64[0]), v576, v697.f64[0]), v584, v705.f64[0]),
                               v592,
                               v713.f64[0]),
                             v600,
                             v721.f64[0]),
                           v608,
                           v729.f64[0]),
                         v616,
                         v737.f64[0]),
                       v624,
                       v745.f64[0]),
                     v632,
                     v753.f64[0]),
                   v640,
                   v761.f64[0]),
                 v648,
                 v769.f64[0]),
               v656,
               v777.f64[0]),
             v664,
             v785.f64[0]);
    v526 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v673.f64[0]), v564, v681.f64[0]), v572, v689.f64[0]), v580, v697.f64[0]), v588, v705.f64[0]),
                               v596,
                               v713.f64[0]),
                             v604,
                             v721.f64[0]),
                           v612,
                           v729.f64[0]),
                         v620,
                         v737.f64[0]),
                       v628,
                       v745.f64[0]),
                     v636,
                     v753.f64[0]),
                   v644,
                   v761.f64[0]),
                 v652,
                 v769.f64[0]),
               v660,
               v777.f64[0]),
             v668,
             v785.f64[0]);
    v205 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v673.f64[0]), v565, v681.f64[0]), v573, v689.f64[0]), v581, v697.f64[0]), v589, v705.f64[0]),
                               v597,
                               v713.f64[0]),
                             v605,
                             v721.f64[0]),
                           v613,
                           v729.f64[0]),
                         v621,
                         v737.f64[0]),
                       v629,
                       v745.f64[0]),
                     v637,
                     v753.f64[0]),
                   v645,
                   v761.f64[0]),
                 v653,
                 v769.f64[0]),
               v661,
               v777.f64[0]),
             v669,
             v785.f64[0]);
    v525 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v673.f64[0]), v566, v681.f64[0]), v574, v689.f64[0]), v582, v697.f64[0]), v590, v705.f64[0]),
                               v598,
                               v713.f64[0]),
                             v606,
                             v721.f64[0]),
                           v614,
                           v729.f64[0]),
                         v622,
                         v737.f64[0]),
                       v630,
                       v745.f64[0]),
                     v638,
                     v753.f64[0]),
                   v646,
                   v761.f64[0]),
                 v654,
                 v769.f64[0]),
               v662,
               v777.f64[0]),
             v670,
             v785.f64[0]);
    v206 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v559 * v673.f64[0], v567, v681.f64[0]), v575, v689.f64[0]), v583, v697.f64[0]), v591, v705.f64[0]), v599, v713.f64[0]), v607,
                             v721.f64[0]),
                           v615,
                           v729.f64[0]),
                         v623,
                         v737.f64[0]),
                       v631,
                       v745.f64[0]),
                     v639,
                     v753.f64[0]),
                   v647,
                   v761.f64[0]),
                 v655,
                 v769.f64[0]),
               v663,
               v777.f64[0]),
             v671,
             v785.f64[0]);
    v487 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v552, v673, 1), v560, v681, 1), v568, v689, 1), v576, v697, 1),
                                 v584,
                                 v705,
                                 1),
                               v592,
                               v713,
                               1),
                             v600,
                             v721,
                             1),
                           v608,
                           v729,
                           1),
                         v616,
                         v737,
                         1),
                       v624,
                       v745,
                       1),
                     v632,
                     v753,
                     1),
                   v640,
                   v761,
                   1),
                 v648,
                 v769,
                 1),
               v656,
               v777,
               1),
             v664,
             v785,
             1);
    v207 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v553, v673, 1), v561, v681, 1), v569, v689, 1), v577, v697, 1),
                                 v585,
                                 v705,
                                 1),
                               v593,
                               v713,
                               1),
                             v601,
                             v721,
                             1),
                           v609,
                           v729,
                           1),
                         v617,
                         v737,
                         1),
                       v625,
                       v745,
                       1),
                     v633,
                     v753,
                     1),
                   v641,
                   v761,
                   1),
                 v649,
                 v769,
                 1),
               v657,
               v777,
               1),
             v665,
             v785,
             1);
    v208 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, v673, 1), v562, v681, 1), v570, v689, 1), v578, v697, 1),
                                 v586,
                                 v705,
                                 1),
                               v594,
                               v713,
                               1),
                             v602,
                             v721,
                             1),
                           v610,
                           v729,
                           1),
                         v618,
                         v737,
                         1),
                       v626,
                       v745,
                       1),
                     v634,
                     v753,
                     1),
                   v642,
                   v761,
                   1),
                 v650,
                 v769,
                 1),
               v658,
               v777,
               1),
             v666,
             v785,
             1);
    v209 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v555, v673, 1), v563, v681, 1), v571, v689, 1), v579, v697, 1),
                                 v587,
                                 v705,
                                 1),
                               v595,
                               v713,
                               1),
                             v603,
                             v721,
                             1),
                           v611,
                           v729,
                           1),
                         v619,
                         v737,
                         1),
                       v627,
                       v745,
                       1),
                     v635,
                     v753,
                     1),
                   v643,
                   v761,
                   1),
                 v651,
                 v769,
                 1),
               v659,
               v777,
               1),
             v667,
             v785,
             1);
    v210 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v673, 1), v564, v681, 1), v572, v689, 1), v580, v697, 1),
                                 v588,
                                 v705,
                                 1),
                               v596,
                               v713,
                               1),
                             v604,
                             v721,
                             1),
                           v612,
                           v729,
                           1),
                         v620,
                         v737,
                         1),
                       v628,
                       v745,
                       1),
                     v636,
                     v753,
                     1),
                   v644,
                   v761,
                   1),
                 v652,
                 v769,
                 1),
               v660,
               v777,
               1),
             v668,
             v785,
             1);
    v211 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v557, v673, 1), v565, v681, 1), v573, v689, 1), v581, v697, 1),
                                 v589,
                                 v705,
                                 1),
                               v597,
                               v713,
                               1),
                             v605,
                             v721,
                             1),
                           v613,
                           v729,
                           1),
                         v621,
                         v737,
                         1),
                       v629,
                       v745,
                       1),
                     v637,
                     v753,
                     1),
                   v645,
                   v761,
                   1),
                 v653,
                 v769,
                 1),
               v661,
               v777,
               1),
             v669,
             v785,
             1);
    v483 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v558, v673, 1), v566, v681, 1), v574, v689, 1), v582, v697, 1),
                                 v590,
                                 v705,
                                 1),
                               v598,
                               v713,
                               1),
                             v606,
                             v721,
                             1),
                           v614,
                           v729,
                           1),
                         v622,
                         v737,
                         1),
                       v630,
                       v745,
                       1),
                     v638,
                     v753,
                     1),
                   v646,
                   v761,
                   1),
                 v654,
                 v769,
                 1),
               v662,
               v777,
               1),
             v670,
             v785,
             1);
    __asm { FMLA            D19, D31, V1.D[1] }
    v481 = _D19;
    _V1.D[1] = v786.f64[1];
    v214 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v674.f64[0]), v560, v682.f64[0]), v568, v690.f64[0]), v576, v698.f64[0]), v584, v706.f64[0]),
                               v592,
                               v714.f64[0]),
                             v600,
                             v722.f64[0]),
                           v608,
                           v730.f64[0]),
                         v616,
                         v738.f64[0]),
                       v624,
                       v746.f64[0]),
                     v632,
                     v754.f64[0]),
                   v640,
                   v762.f64[0]),
                 v648,
                 v770.f64[0]),
               v656,
               v778.f64[0]),
             v664,
             v786.f64[0]);
    v482 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v674.f64[0]), v561, v682.f64[0]), v569, v690.f64[0]), v577, v698.f64[0]), v585, v706.f64[0]),
                               v593,
                               v714.f64[0]),
                             v601,
                             v722.f64[0]),
                           v609,
                           v730.f64[0]),
                         v617,
                         v738.f64[0]),
                       v625,
                       v746.f64[0]),
                     v633,
                     v754.f64[0]),
                   v641,
                   v762.f64[0]),
                 v649,
                 v770.f64[0]),
               v657,
               v778.f64[0]),
             v665,
             v786.f64[0]);
    v480 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v674.f64[0]), v562, v682.f64[0]), v570, v690.f64[0]), v578, v698.f64[0]), v586, v706.f64[0]),
                               v594,
                               v714.f64[0]),
                             v602,
                             v722.f64[0]),
                           v610,
                           v730.f64[0]),
                         v618,
                         v738.f64[0]),
                       v626,
                       v746.f64[0]),
                     v634,
                     v754.f64[0]),
                   v642,
                   v762.f64[0]),
                 v650,
                 v770.f64[0]),
               v658,
               v778.f64[0]),
             v666,
             v786.f64[0]);
    v463 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v674.f64[0]), v563, v682.f64[0]), v571, v690.f64[0]), v579, v698.f64[0]), v587, v706.f64[0]),
                               v595,
                               v714.f64[0]),
                             v603,
                             v722.f64[0]),
                           v611,
                           v730.f64[0]),
                         v619,
                         v738.f64[0]),
                       v627,
                       v746.f64[0]),
                     v635,
                     v754.f64[0]),
                   v643,
                   v762.f64[0]),
                 v651,
                 v770.f64[0]),
               v659,
               v778.f64[0]),
             v667,
             v786.f64[0]);
    v524 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v674.f64[0]), v564, v682.f64[0]), v572, v690.f64[0]), v580, v698.f64[0]), v588, v706.f64[0]),
                               v596,
                               v714.f64[0]),
                             v604,
                             v722.f64[0]),
                           v612,
                           v730.f64[0]),
                         v620,
                         v738.f64[0]),
                       v628,
                       v746.f64[0]),
                     v636,
                     v754.f64[0]),
                   v644,
                   v762.f64[0]),
                 v652,
                 v770.f64[0]),
               v660,
               v778.f64[0]),
             v668,
             v786.f64[0]);
    v215 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v674.f64[0]), v565, v682.f64[0]), v573, v690.f64[0]), v581, v698.f64[0]), v589, v706.f64[0]),
                               v597,
                               v714.f64[0]),
                             v605,
                             v722.f64[0]),
                           v613,
                           v730.f64[0]),
                         v621,
                         v738.f64[0]),
                       v629,
                       v746.f64[0]),
                     v637,
                     v754.f64[0]),
                   v645,
                   v762.f64[0]),
                 v653,
                 v770.f64[0]),
               v661,
               v778.f64[0]),
             v669,
             v786.f64[0]);
    v523 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v674.f64[0]), v566, v682.f64[0]), v574, v690.f64[0]), v582, v698.f64[0]), v590, v706.f64[0]),
                               v598,
                               v714.f64[0]),
                             v606,
                             v722.f64[0]),
                           v614,
                           v730.f64[0]),
                         v622,
                         v738.f64[0]),
                       v630,
                       v746.f64[0]),
                     v638,
                     v754.f64[0]),
                   v646,
                   v762.f64[0]),
                 v654,
                 v770.f64[0]),
               v662,
               v778.f64[0]),
             v670,
             v786.f64[0]);
    v479 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v559 * v674.f64[0], v567, v682.f64[0]), v575, v690.f64[0]), v583, v698.f64[0]), v591, v706.f64[0]), v599, v714.f64[0]), v607,
                             v722.f64[0]),
                           v615,
                           v730.f64[0]),
                         v623,
                         v738.f64[0]),
                       v631,
                       v746.f64[0]),
                     v639,
                     v754.f64[0]),
                   v647,
                   v762.f64[0]),
                 v655,
                 v770.f64[0]),
               v663,
               v778.f64[0]),
             v671,
             v786.f64[0]);
    v216 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v552, v674, 1), v560, v682, 1), v568, v690, 1), v576, v698, 1),
                                 v584,
                                 v706,
                                 1),
                               v592,
                               v714,
                               1),
                             v600,
                             v722,
                             1),
                           v608,
                           v730,
                           1),
                         v616,
                         v738,
                         1),
                       v624,
                       v746,
                       1),
                     v632,
                     v754,
                     1),
                   v640,
                   v762,
                   1),
                 v648,
                 v770,
                 1),
               v656,
               v778,
               1),
             v664,
             v786,
             1);
    v522 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v553, v674, 1), v561, v682, 1), v569, v690, 1), v577, v698, 1),
                                 v585,
                                 v706,
                                 1),
                               v593,
                               v714,
                               1),
                             v601,
                             v722,
                             1),
                           v609,
                           v730,
                           1),
                         v617,
                         v738,
                         1),
                       v625,
                       v746,
                       1),
                     v633,
                     v754,
                     1),
                   v641,
                   v762,
                   1),
                 v649,
                 v770,
                 1),
               v657,
               v778,
               1),
             v665,
             v786,
             1);
    v521 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, v674, 1), v562, v682, 1), v570, v690, 1), v578, v698, 1),
                                 v586,
                                 v706,
                                 1),
                               v594,
                               v714,
                               1),
                             v602,
                             v722,
                             1),
                           v610,
                           v730,
                           1),
                         v618,
                         v738,
                         1),
                       v626,
                       v746,
                       1),
                     v634,
                     v754,
                     1),
                   v642,
                   v762,
                   1),
                 v650,
                 v770,
                 1),
               v658,
               v778,
               1),
             v666,
             v786,
             1);
    v520 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v555, v674, 1), v563, v682, 1), v571, v690, 1), v579, v698, 1),
                                 v587,
                                 v706,
                                 1),
                               v595,
                               v714,
                               1),
                             v603,
                             v722,
                             1),
                           v611,
                           v730,
                           1),
                         v619,
                         v738,
                         1),
                       v627,
                       v746,
                       1),
                     v635,
                     v754,
                     1),
                   v643,
                   v762,
                   1),
                 v651,
                 v770,
                 1),
               v659,
               v778,
               1),
             v667,
             v786,
             1);
    v545 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v674, 1), v564, v682, 1), v572, v690, 1), v580, v698, 1),
                                 v588,
                                 v706,
                                 1),
                               v596,
                               v714,
                               1),
                             v604,
                             v722,
                             1),
                           v612,
                           v730,
                           1),
                         v620,
                         v738,
                         1),
                       v628,
                       v746,
                       1),
                     v636,
                     v754,
                     1),
                   v644,
                   v762,
                   1),
                 v652,
                 v770,
                 1),
               v660,
               v778,
               1),
             v668,
             v786,
             1);
    v217 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v557, v674, 1), v565, v682, 1), v573, v690, 1), v581, v698, 1),
                                 v589,
                                 v706,
                                 1),
                               v597,
                               v714,
                               1),
                             v605,
                             v722,
                             1),
                           v613,
                           v730,
                           1),
                         v621,
                         v738,
                         1),
                       v629,
                       v746,
                       1),
                     v637,
                     v754,
                     1),
                   v645,
                   v762,
                   1),
                 v653,
                 v770,
                 1),
               v661,
               v778,
               1),
             v669,
             v786,
             1);
    v478 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v558, v674, 1), v566, v682, 1), v574, v690, 1), v582, v698, 1),
                                 v590,
                                 v706,
                                 1),
                               v598,
                               v714,
                               1),
                             v606,
                             v722,
                             1),
                           v614,
                           v730,
                           1),
                         v622,
                         v738,
                         1),
                       v630,
                       v746,
                       1),
                     v638,
                     v754,
                     1),
                   v646,
                   v762,
                   1),
                 v654,
                 v770,
                 1),
               v662,
               v778,
               1),
             v670,
             v786,
             1);
    __asm { FMLA            D0, D31, V1.D[1] }
    v456 = _Q0.f64[0];
    _V1.D[1] = v787.f64[1];
    v518 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v675.f64[0]), v560, v683.f64[0]), v568, v691.f64[0]), v576, v699.f64[0]), v584, v707.f64[0]),
                               v592,
                               v715.f64[0]),
                             v600,
                             v723.f64[0]),
                           v608,
                           v731.f64[0]),
                         v616,
                         v739.f64[0]),
                       v624,
                       v747.f64[0]),
                     v632,
                     v755.f64[0]),
                   v640,
                   v763.f64[0]),
                 v648,
                 v771.f64[0]),
               v656,
               v779.f64[0]),
             v664,
             v787.f64[0]);
    v219 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v675.f64[0]), v561, v683.f64[0]), v569, v691.f64[0]), v577, v699.f64[0]), v585, v707.f64[0]),
                               v593,
                               v715.f64[0]),
                             v601,
                             v723.f64[0]),
                           v609,
                           v731.f64[0]),
                         v617,
                         v739.f64[0]),
                       v625,
                       v747.f64[0]),
                     v633,
                     v755.f64[0]),
                   v641,
                   v763.f64[0]),
                 v649,
                 v771.f64[0]),
               v657,
               v779.f64[0]),
             v665,
             v787.f64[0]);
    v519 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v675.f64[0]), v562, v683.f64[0]), v570, v691.f64[0]), v578, v699.f64[0]), v586, v707.f64[0]),
                               v594,
                               v715.f64[0]),
                             v602,
                             v723.f64[0]),
                           v610,
                           v731.f64[0]),
                         v618,
                         v739.f64[0]),
                       v626,
                       v747.f64[0]),
                     v634,
                     v755.f64[0]),
                   v642,
                   v763.f64[0]),
                 v650,
                 v771.f64[0]),
               v658,
               v779.f64[0]),
             v666,
             v787.f64[0]);
    v462 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v675.f64[0]), v563, v683.f64[0]), v571, v691.f64[0]), v579, v699.f64[0]), v587, v707.f64[0]),
                               v595,
                               v715.f64[0]),
                             v603,
                             v723.f64[0]),
                           v611,
                           v731.f64[0]),
                         v619,
                         v739.f64[0]),
                       v627,
                       v747.f64[0]),
                     v635,
                     v755.f64[0]),
                   v643,
                   v763.f64[0]),
                 v651,
                 v771.f64[0]),
               v659,
               v779.f64[0]),
             v667,
             v787.f64[0]);
    v517 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v675.f64[0]), v564, v683.f64[0]), v572, v691.f64[0]), v580, v699.f64[0]), v588, v707.f64[0]),
                               v596,
                               v715.f64[0]),
                             v604,
                             v723.f64[0]),
                           v612,
                           v731.f64[0]),
                         v620,
                         v739.f64[0]),
                       v628,
                       v747.f64[0]),
                     v636,
                     v755.f64[0]),
                   v644,
                   v763.f64[0]),
                 v652,
                 v771.f64[0]),
               v660,
               v779.f64[0]),
             v668,
             v787.f64[0]);
    v220 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v675.f64[0]), v565, v683.f64[0]), v573, v691.f64[0]), v581, v699.f64[0]), v589, v707.f64[0]),
                               v597,
                               v715.f64[0]),
                             v605,
                             v723.f64[0]),
                           v613,
                           v731.f64[0]),
                         v621,
                         v739.f64[0]),
                       v629,
                       v747.f64[0]),
                     v637,
                     v755.f64[0]),
                   v645,
                   v763.f64[0]),
                 v653,
                 v771.f64[0]),
               v661,
               v779.f64[0]),
             v669,
             v787.f64[0]);
    v221 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v675.f64[0]), v566, v683.f64[0]), v574, v691.f64[0]), v582, v699.f64[0]), v590, v707.f64[0]),
                               v598,
                               v715.f64[0]),
                             v606,
                             v723.f64[0]),
                           v614,
                           v731.f64[0]),
                         v622,
                         v739.f64[0]),
                       v630,
                       v747.f64[0]),
                     v638,
                     v755.f64[0]),
                   v646,
                   v763.f64[0]),
                 v654,
                 v771.f64[0]),
               v662,
               v779.f64[0]),
             v670,
             v787.f64[0]);
    v544 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v559 * v675.f64[0], v567, v683.f64[0]), v575, v691.f64[0]), v583, v699.f64[0]), v591, v707.f64[0]), v599, v715.f64[0]), v607,
                             v723.f64[0]),
                           v615,
                           v731.f64[0]),
                         v623,
                         v739.f64[0]),
                       v631,
                       v747.f64[0]),
                     v639,
                     v755.f64[0]),
                   v647,
                   v763.f64[0]),
                 v655,
                 v771.f64[0]),
               v663,
               v779.f64[0]),
             v671,
             v787.f64[0]);
    v222 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v552, v675, 1), v560, v683, 1), v568, v691, 1), v576, v699, 1),
                                 v584,
                                 v707,
                                 1),
                               v592,
                               v715,
                               1),
                             v600,
                             v723,
                             1),
                           v608,
                           v731,
                           1),
                         v616,
                         v739,
                         1),
                       v624,
                       v747,
                       1),
                     v632,
                     v755,
                     1),
                   v640,
                   v763,
                   1),
                 v648,
                 v771,
                 1),
               v656,
               v779,
               1),
             v664,
             v787,
             1);
    v516 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v553, v675, 1), v561, v683, 1), v569, v691, 1), v577, v699, 1),
                                 v585,
                                 v707,
                                 1),
                               v593,
                               v715,
                               1),
                             v601,
                             v723,
                             1),
                           v609,
                           v731,
                           1),
                         v617,
                         v739,
                         1),
                       v625,
                       v747,
                       1),
                     v633,
                     v755,
                     1),
                   v641,
                   v763,
                   1),
                 v649,
                 v771,
                 1),
               v657,
               v779,
               1),
             v665,
             v787,
             1);
    v513 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, v675, 1), v562, v683, 1), v570, v691, 1), v578, v699, 1),
                                 v586,
                                 v707,
                                 1),
                               v594,
                               v715,
                               1),
                             v602,
                             v723,
                             1),
                           v610,
                           v731,
                           1),
                         v618,
                         v739,
                         1),
                       v626,
                       v747,
                       1),
                     v634,
                     v755,
                     1),
                   v642,
                   v763,
                   1),
                 v650,
                 v771,
                 1),
               v658,
               v779,
               1),
             v666,
             v787,
             1);
    v512 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v555, v675, 1), v563, v683, 1), v571, v691, 1), v579, v699, 1),
                                 v587,
                                 v707,
                                 1),
                               v595,
                               v715,
                               1),
                             v603,
                             v723,
                             1),
                           v611,
                           v731,
                           1),
                         v619,
                         v739,
                         1),
                       v627,
                       v747,
                       1),
                     v635,
                     v755,
                     1),
                   v643,
                   v763,
                   1),
                 v651,
                 v771,
                 1),
               v659,
               v779,
               1),
             v667,
             v787,
             1);
    v515 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v675, 1), v564, v683, 1), v572, v691, 1), v580, v699, 1),
                                 v588,
                                 v707,
                                 1),
                               v596,
                               v715,
                               1),
                             v604,
                             v723,
                             1),
                           v612,
                           v731,
                           1),
                         v620,
                         v739,
                         1),
                       v628,
                       v747,
                       1),
                     v636,
                     v755,
                     1),
                   v644,
                   v763,
                   1),
                 v652,
                 v771,
                 1),
               v660,
               v779,
               1),
             v668,
             v787,
             1);
    v477 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v557, v675, 1), v565, v683, 1), v573, v691, 1), v581, v699, 1),
                                 v589,
                                 v707,
                                 1),
                               v597,
                               v715,
                               1),
                             v605,
                             v723,
                             1),
                           v613,
                           v731,
                           1),
                         v621,
                         v739,
                         1),
                       v629,
                       v747,
                       1),
                     v637,
                     v755,
                     1),
                   v645,
                   v763,
                   1),
                 v653,
                 v771,
                 1),
               v661,
               v779,
               1),
             v669,
             v787,
             1);
    v511 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v558, v675, 1), v566, v683, 1), v574, v691, 1), v582, v699, 1),
                                 v590,
                                 v707,
                                 1),
                               v598,
                               v715,
                               1),
                             v606,
                             v723,
                             1),
                           v614,
                           v731,
                           1),
                         v622,
                         v739,
                         1),
                       v630,
                       v747,
                       1),
                     v638,
                     v755,
                     1),
                   v646,
                   v763,
                   1),
                 v654,
                 v771,
                 1),
               v662,
               v779,
               1),
             v670,
             v787,
             1);
    __asm { FMLA            D0, D31, V1.D[1] }
    v514 = _Q0.f64[0];
    _V1.D[1] = v788.f64[1];
    v543 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v676.f64[0]), v560, v684.f64[0]), v568, v692.f64[0]), v576, v700.f64[0]), v584, v708.f64[0]),
                               v592,
                               v716.f64[0]),
                             v600,
                             v724.f64[0]),
                           v608,
                           v732.f64[0]),
                         v616,
                         v740.f64[0]),
                       v624,
                       v748.f64[0]),
                     v632,
                     v756.f64[0]),
                   v640,
                   v764.f64[0]),
                 v648,
                 v772.f64[0]),
               v656,
               v780.f64[0]),
             v664,
             v788.f64[0]);
    v224 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v676.f64[0]), v561, v684.f64[0]), v569, v692.f64[0]), v577, v700.f64[0]), v585, v708.f64[0]),
                               v593,
                               v716.f64[0]),
                             v601,
                             v724.f64[0]),
                           v609,
                           v732.f64[0]),
                         v617,
                         v740.f64[0]),
                       v625,
                       v748.f64[0]),
                     v633,
                     v756.f64[0]),
                   v641,
                   v764.f64[0]),
                 v649,
                 v772.f64[0]),
               v657,
               v780.f64[0]),
             v665,
             v788.f64[0]);
    v547 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v676.f64[0]), v562, v684.f64[0]), v570, v692.f64[0]), v578, v700.f64[0]), v586, v708.f64[0]),
                               v594,
                               v716.f64[0]),
                             v602,
                             v724.f64[0]),
                           v610,
                           v732.f64[0]),
                         v618,
                         v740.f64[0]),
                       v626,
                       v748.f64[0]),
                     v634,
                     v756.f64[0]),
                   v642,
                   v764.f64[0]),
                 v650,
                 v772.f64[0]),
               v658,
               v780.f64[0]),
             v666,
             v788.f64[0]);
    v542 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v676.f64[0]), v563, v684.f64[0]), v571, v692.f64[0]), v579, v700.f64[0]), v587, v708.f64[0]),
                               v595,
                               v716.f64[0]),
                             v603,
                             v724.f64[0]),
                           v611,
                           v732.f64[0]),
                         v619,
                         v740.f64[0]),
                       v627,
                       v748.f64[0]),
                     v635,
                     v756.f64[0]),
                   v643,
                   v764.f64[0]),
                 v651,
                 v772.f64[0]),
               v659,
               v780.f64[0]),
             v667,
             v788.f64[0]);
    v461 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v676.f64[0]), v564, v684.f64[0]), v572, v692.f64[0]), v580, v700.f64[0]), v588, v708.f64[0]),
                               v596,
                               v716.f64[0]),
                             v604,
                             v724.f64[0]),
                           v612,
                           v732.f64[0]),
                         v620,
                         v740.f64[0]),
                       v628,
                       v748.f64[0]),
                     v636,
                     v756.f64[0]),
                   v644,
                   v764.f64[0]),
                 v652,
                 v772.f64[0]),
               v660,
               v780.f64[0]),
             v668,
             v788.f64[0]);
    v225 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v676.f64[0]), v565, v684.f64[0]), v573, v692.f64[0]), v581, v700.f64[0]), v589, v708.f64[0]),
                               v597,
                               v716.f64[0]),
                             v605,
                             v724.f64[0]),
                           v613,
                           v732.f64[0]),
                         v621,
                         v740.f64[0]),
                       v629,
                       v748.f64[0]),
                     v637,
                     v756.f64[0]),
                   v645,
                   v764.f64[0]),
                 v653,
                 v772.f64[0]),
               v661,
               v780.f64[0]),
             v669,
             v788.f64[0]);
    v475 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v676.f64[0]), v566, v684.f64[0]), v574, v692.f64[0]), v582, v700.f64[0]), v590, v708.f64[0]),
                               v598,
                               v716.f64[0]),
                             v606,
                             v724.f64[0]),
                           v614,
                           v732.f64[0]),
                         v622,
                         v740.f64[0]),
                       v630,
                       v748.f64[0]),
                     v638,
                     v756.f64[0]),
                   v646,
                   v764.f64[0]),
                 v654,
                 v772.f64[0]),
               v662,
               v780.f64[0]),
             v670,
             v788.f64[0]);
    v510 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v559 * v676.f64[0], v567, v684.f64[0]), v575, v692.f64[0]), v583, v700.f64[0]), v591, v708.f64[0]), v599, v716.f64[0]), v607,
                             v724.f64[0]),
                           v615,
                           v732.f64[0]),
                         v623,
                         v740.f64[0]),
                       v631,
                       v748.f64[0]),
                     v639,
                     v756.f64[0]),
                   v647,
                   v764.f64[0]),
                 v655,
                 v772.f64[0]),
               v663,
               v780.f64[0]),
             v671,
             v788.f64[0]);
    v509 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v552, v676, 1), v560, v684, 1), v568, v692, 1), v576, v700, 1),
                                 v584,
                                 v708,
                                 1),
                               v592,
                               v716,
                               1),
                             v600,
                             v724,
                             1),
                           v608,
                           v732,
                           1),
                         v616,
                         v740,
                         1),
                       v624,
                       v748,
                       1),
                     v632,
                     v756,
                     1),
                   v640,
                   v764,
                   1),
                 v648,
                 v772,
                 1),
               v656,
               v780,
               1),
             v664,
             v788,
             1);
    v226 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v553, v676, 1), v561, v684, 1), v569, v692, 1), v577, v700, 1),
                                 v585,
                                 v708,
                                 1),
                               v593,
                               v716,
                               1),
                             v601,
                             v724,
                             1),
                           v609,
                           v732,
                           1),
                         v617,
                         v740,
                         1),
                       v625,
                       v748,
                       1),
                     v633,
                     v756,
                     1),
                   v641,
                   v764,
                   1),
                 v649,
                 v772,
                 1),
               v657,
               v780,
               1),
             v665,
             v788,
             1);
    v476 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, v676, 1), v562, v684, 1), v570, v692, 1), v578, v700, 1),
                                 v586,
                                 v708,
                                 1),
                               v594,
                               v716,
                               1),
                             v602,
                             v724,
                             1),
                           v610,
                           v732,
                           1),
                         v618,
                         v740,
                         1),
                       v626,
                       v748,
                       1),
                     v634,
                     v756,
                     1),
                   v642,
                   v764,
                   1),
                 v650,
                 v772,
                 1),
               v658,
               v780,
               1),
             v666,
             v788,
             1);
    v508 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v555, v676, 1), v563, v684, 1), v571, v692, 1), v579, v700, 1),
                                 v587,
                                 v708,
                                 1),
                               v595,
                               v716,
                               1),
                             v603,
                             v724,
                             1),
                           v611,
                           v732,
                           1),
                         v619,
                         v740,
                         1),
                       v627,
                       v748,
                       1),
                     v635,
                     v756,
                     1),
                   v643,
                   v764,
                   1),
                 v651,
                 v772,
                 1),
               v659,
               v780,
               1),
             v667,
             v788,
             1);
    v507 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v676, 1), v564, v684, 1), v572, v692, 1), v580, v700, 1),
                                 v588,
                                 v708,
                                 1),
                               v596,
                               v716,
                               1),
                             v604,
                             v724,
                             1),
                           v612,
                           v732,
                           1),
                         v620,
                         v740,
                         1),
                       v628,
                       v748,
                       1),
                     v636,
                     v756,
                     1),
                   v644,
                   v764,
                   1),
                 v652,
                 v772,
                 1),
               v660,
               v780,
               1),
             v668,
             v788,
             1);
    v474 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v557, v676, 1), v565, v684, 1), v573, v692, 1), v581, v700, 1),
                                 v589,
                                 v708,
                                 1),
                               v597,
                               v716,
                               1),
                             v605,
                             v724,
                             1),
                           v613,
                           v732,
                           1),
                         v621,
                         v740,
                         1),
                       v629,
                       v748,
                       1),
                     v637,
                     v756,
                     1),
                   v645,
                   v764,
                   1),
                 v653,
                 v772,
                 1),
               v661,
               v780,
               1),
             v669,
             v788,
             1);
    v472 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v558, v676, 1), v566, v684, 1), v574, v692, 1), v582, v700, 1),
                                 v590,
                                 v708,
                                 1),
                               v598,
                               v716,
                               1),
                             v606,
                             v724,
                             1),
                           v614,
                           v732,
                           1),
                         v622,
                         v740,
                         1),
                       v630,
                       v748,
                       1),
                     v638,
                     v756,
                     1),
                   v646,
                   v764,
                   1),
                 v654,
                 v772,
                 1),
               v662,
               v780,
               1),
             v670,
             v788,
             1);
    __asm { FMLA            D0, D31, V1.D[1] }
    v460 = _Q0.f64[0];
    _V1.D[1] = v789.f64[1];
    v541 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v677.f64[0]), v560, v685.f64[0]), v568, v693.f64[0]), v576, v701.f64[0]), v584, v709.f64[0]),
                               v592,
                               v717.f64[0]),
                             v600,
                             v725.f64[0]),
                           v608,
                           v733.f64[0]),
                         v616,
                         v741.f64[0]),
                       v624,
                       v749.f64[0]),
                     v632,
                     v757.f64[0]),
                   v640,
                   v765.f64[0]),
                 v648,
                 v773.f64[0]),
               v656,
               v781.f64[0]),
             v664,
             v789.f64[0]);
    v471 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v677.f64[0]), v561, v685.f64[0]), v569, v693.f64[0]), v577, v701.f64[0]), v585, v709.f64[0]),
                               v593,
                               v717.f64[0]),
                             v601,
                             v725.f64[0]),
                           v609,
                           v733.f64[0]),
                         v617,
                         v741.f64[0]),
                       v625,
                       v749.f64[0]),
                     v633,
                     v757.f64[0]),
                   v641,
                   v765.f64[0]),
                 v649,
                 v773.f64[0]),
               v657,
               v781.f64[0]),
             v665,
             v789.f64[0]);
    v473 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v677.f64[0]), v562, v685.f64[0]), v570, v693.f64[0]), v578, v701.f64[0]), v586, v709.f64[0]),
                               v594,
                               v717.f64[0]),
                             v602,
                             v725.f64[0]),
                           v610,
                           v733.f64[0]),
                         v618,
                         v741.f64[0]),
                       v626,
                       v749.f64[0]),
                     v634,
                     v757.f64[0]),
                   v642,
                   v765.f64[0]),
                 v650,
                 v773.f64[0]),
               v658,
               v781.f64[0]),
             v666,
             v789.f64[0]);
    v505 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v677.f64[0]), v564, v685.f64[0]), v572, v693.f64[0]), v580, v701.f64[0]), v588, v709.f64[0]),
                               v596,
                               v717.f64[0]),
                             v604,
                             v725.f64[0]),
                           v612,
                           v733.f64[0]),
                         v620,
                         v741.f64[0]),
                       v628,
                       v749.f64[0]),
                     v636,
                     v757.f64[0]),
                   v644,
                   v765.f64[0]),
                 v652,
                 v773.f64[0]),
               v660,
               v781.f64[0]),
             v668,
             v789.f64[0]);
    v506 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v677.f64[0]), v563, v685.f64[0]), v571, v693.f64[0]), v579, v701.f64[0]), v587, v709.f64[0]),
                               v595,
                               v717.f64[0]),
                             v603,
                             v725.f64[0]),
                           v611,
                           v733.f64[0]),
                         v619,
                         v741.f64[0]),
                       v627,
                       v749.f64[0]),
                     v635,
                     v757.f64[0]),
                   v643,
                   v765.f64[0]),
                 v651,
                 v773.f64[0]),
               v659,
               v781.f64[0]),
             v667,
             v789.f64[0]);
    v540 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v677.f64[0]), v565, v685.f64[0]), v573, v693.f64[0]), v581, v701.f64[0]), v589, v709.f64[0]),
                               v597,
                               v717.f64[0]),
                             v605,
                             v725.f64[0]),
                           v613,
                           v733.f64[0]),
                         v621,
                         v741.f64[0]),
                       v629,
                       v749.f64[0]),
                     v637,
                     v757.f64[0]),
                   v645,
                   v765.f64[0]),
                 v653,
                 v773.f64[0]),
               v661,
               v781.f64[0]),
             v669,
             v789.f64[0]);
    v228 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v677.f64[0]), v566, v685.f64[0]), v574, v693.f64[0]), v582, v701.f64[0]), v590, v709.f64[0]),
                               v598,
                               v717.f64[0]),
                             v606,
                             v725.f64[0]),
                           v614,
                           v733.f64[0]),
                         v622,
                         v741.f64[0]),
                       v630,
                       v749.f64[0]),
                     v638,
                     v757.f64[0]),
                   v646,
                   v765.f64[0]),
                 v654,
                 v773.f64[0]),
               v662,
               v781.f64[0]),
             v670,
             v789.f64[0]);
    v537 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v559 * v677.f64[0], v567, v685.f64[0]), v575, v693.f64[0]), v583, v701.f64[0]), v591, v709.f64[0]), v599, v717.f64[0]), v607,
                             v725.f64[0]),
                           v615,
                           v733.f64[0]),
                         v623,
                         v741.f64[0]),
                       v631,
                       v749.f64[0]),
                     v639,
                     v757.f64[0]),
                   v647,
                   v765.f64[0]),
                 v655,
                 v773.f64[0]),
               v663,
               v781.f64[0]),
             v671,
             v789.f64[0]);
    v536 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v552, v677, 1), v560, v685, 1), v568, v693, 1), v576, v701, 1),
                                 v584,
                                 v709,
                                 1),
                               v592,
                               v717,
                               1),
                             v600,
                             v725,
                             1),
                           v608,
                           v733,
                           1),
                         v616,
                         v741,
                         1),
                       v624,
                       v749,
                       1),
                     v632,
                     v757,
                     1),
                   v640,
                   v765,
                   1),
                 v648,
                 v773,
                 1),
               v656,
               v781,
               1),
             v664,
             v789,
             1);
    v539 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v553, v677, 1), v561, v685, 1), v569, v693, 1), v577, v701, 1),
                                 v585,
                                 v709,
                                 1),
                               v593,
                               v717,
                               1),
                             v601,
                             v725,
                             1),
                           v609,
                           v733,
                           1),
                         v617,
                         v741,
                         1),
                       v625,
                       v749,
                       1),
                     v633,
                     v757,
                     1),
                   v641,
                   v765,
                   1),
                 v649,
                 v773,
                 1),
               v657,
               v781,
               1),
             v665,
             v789,
             1);
    v538 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, v677, 1), v562, v685, 1), v570, v693, 1), v578, v701, 1),
                                 v586,
                                 v709,
                                 1),
                               v594,
                               v717,
                               1),
                             v602,
                             v725,
                             1),
                           v610,
                           v733,
                           1),
                         v618,
                         v741,
                         1),
                       v626,
                       v749,
                       1),
                     v634,
                     v757,
                     1),
                   v642,
                   v765,
                   1),
                 v650,
                 v773,
                 1),
               v658,
               v781,
               1),
             v666,
             v789,
             1);
    v470 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v555, v677, 1), v563, v685, 1), v571, v693, 1), v579, v701, 1),
                                 v587,
                                 v709,
                                 1),
                               v595,
                               v717,
                               1),
                             v603,
                             v725,
                             1),
                           v611,
                           v733,
                           1),
                         v619,
                         v741,
                         1),
                       v627,
                       v749,
                       1),
                     v635,
                     v757,
                     1),
                   v643,
                   v765,
                   1),
                 v651,
                 v773,
                 1),
               v659,
               v781,
               1),
             v667,
             v789,
             1);
    v503 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v677, 1), v564, v685, 1), v572, v693, 1), v580, v701, 1),
                                 v588,
                                 v709,
                                 1),
                               v596,
                               v717,
                               1),
                             v604,
                             v725,
                             1),
                           v612,
                           v733,
                           1),
                         v620,
                         v741,
                         1),
                       v628,
                       v749,
                       1),
                     v636,
                     v757,
                     1),
                   v644,
                   v765,
                   1),
                 v652,
                 v773,
                 1),
               v660,
               v781,
               1),
             v668,
             v789,
             1);
    v504 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v557, v677, 1), v565, v685, 1), v573, v693, 1), v581, v701, 1),
                                 v589,
                                 v709,
                                 1),
                               v597,
                               v717,
                               1),
                             v605,
                             v725,
                             1),
                           v613,
                           v733,
                           1),
                         v621,
                         v741,
                         1),
                       v629,
                       v749,
                       1),
                     v637,
                     v757,
                     1),
                   v645,
                   v765,
                   1),
                 v653,
                 v773,
                 1),
               v661,
               v781,
               1),
             v669,
             v789,
             1);
    v501 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v558, v677, 1), v566, v685, 1), v574, v693, 1), v582, v701, 1),
                                 v590,
                                 v709,
                                 1),
                               v598,
                               v717,
                               1),
                             v606,
                             v725,
                             1),
                           v614,
                           v733,
                           1),
                         v622,
                         v741,
                         1),
                       v630,
                       v749,
                       1),
                     v638,
                     v757,
                     1),
                   v646,
                   v765,
                   1),
                 v654,
                 v773,
                 1),
               v662,
               v781,
               1),
             v670,
             v789,
             1);
    __asm { FMLA            D17, D31, V1.D[1] }
    _V1.D[1] = v790.f64[1];
    v535 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v678.f64[0]), v560, v686.f64[0]), v568, v694.f64[0]), v576, v702.f64[0]), v584, v710.f64[0]),
                               v592,
                               v718.f64[0]),
                             v600,
                             v726.f64[0]),
                           v608,
                           v734.f64[0]),
                         v616,
                         v742.f64[0]),
                       v624,
                       v750.f64[0]),
                     v632,
                     v758.f64[0]),
                   v640,
                   v766.f64[0]),
                 v648,
                 v774.f64[0]),
               v656,
               v782.f64[0]),
             v664,
             v790.f64[0]);
    v502 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v678.f64[0]), v561, v686.f64[0]), v569, v694.f64[0]), v577, v702.f64[0]), v585, v710.f64[0]),
                               v593,
                               v718.f64[0]),
                             v601,
                             v726.f64[0]),
                           v609,
                           v734.f64[0]),
                         v617,
                         v742.f64[0]),
                       v625,
                       v750.f64[0]),
                     v633,
                     v758.f64[0]),
                   v641,
                   v766.f64[0]),
                 v649,
                 v774.f64[0]),
               v657,
               v782.f64[0]),
             v665,
             v790.f64[0]);
    v500 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v678.f64[0]), v562, v686.f64[0]), v570, v694.f64[0]), v578, v702.f64[0]), v586, v710.f64[0]),
                               v594,
                               v718.f64[0]),
                             v602,
                             v726.f64[0]),
                           v610,
                           v734.f64[0]),
                         v618,
                         v742.f64[0]),
                       v626,
                       v750.f64[0]),
                     v634,
                     v758.f64[0]),
                   v642,
                   v766.f64[0]),
                 v650,
                 v774.f64[0]),
               v658,
               v782.f64[0]),
             v666,
             v790.f64[0]);
    v498 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v678.f64[0]), v563, v686.f64[0]), v571, v694.f64[0]), v579, v702.f64[0]), v587, v710.f64[0]),
                               v595,
                               v718.f64[0]),
                             v603,
                             v726.f64[0]),
                           v611,
                           v734.f64[0]),
                         v619,
                         v742.f64[0]),
                       v627,
                       v750.f64[0]),
                     v635,
                     v758.f64[0]),
                   v643,
                   v766.f64[0]),
                 v651,
                 v774.f64[0]),
               v659,
               v782.f64[0]),
             v667,
             v790.f64[0]);
    v469 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v678.f64[0]), v564, v686.f64[0]), v572, v694.f64[0]), v580, v702.f64[0]), v588, v710.f64[0]),
                               v596,
                               v718.f64[0]),
                             v604,
                             v726.f64[0]),
                           v612,
                           v734.f64[0]),
                         v620,
                         v742.f64[0]),
                       v628,
                       v750.f64[0]),
                     v636,
                     v758.f64[0]),
                   v644,
                   v766.f64[0]),
                 v652,
                 v774.f64[0]),
               v660,
               v782.f64[0]),
             v668,
             v790.f64[0]);
    v534 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v678.f64[0]), v565, v686.f64[0]), v573, v694.f64[0]), v581, v702.f64[0]), v589, v710.f64[0]),
                               v597,
                               v718.f64[0]),
                             v605,
                             v726.f64[0]),
                           v613,
                           v734.f64[0]),
                         v621,
                         v742.f64[0]),
                       v629,
                       v750.f64[0]),
                     v637,
                     v758.f64[0]),
                   v645,
                   v766.f64[0]),
                 v653,
                 v774.f64[0]),
               v661,
               v782.f64[0]),
             v669,
             v790.f64[0]);
    v499 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v678.f64[0]), v566, v686.f64[0]), v574, v694.f64[0]), v582, v702.f64[0]), v590, v710.f64[0]),
                               v598,
                               v718.f64[0]),
                             v606,
                             v726.f64[0]),
                           v614,
                           v734.f64[0]),
                         v622,
                         v742.f64[0]),
                       v630,
                       v750.f64[0]),
                     v638,
                     v758.f64[0]),
                   v646,
                   v766.f64[0]),
                 v654,
                 v774.f64[0]),
               v662,
               v782.f64[0]),
             v670,
             v790.f64[0]);
    v492 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v559 * v678.f64[0], v567, v686.f64[0]), v575, v694.f64[0]), v583, v702.f64[0]), v591, v710.f64[0]), v599, v718.f64[0]), v607,
                             v726.f64[0]),
                           v615,
                           v734.f64[0]),
                         v623,
                         v742.f64[0]),
                       v631,
                       v750.f64[0]),
                     v639,
                     v758.f64[0]),
                   v647,
                   v766.f64[0]),
                 v655,
                 v774.f64[0]),
               v663,
               v782.f64[0]),
             v671,
             v790.f64[0]);
    v497 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v552, v678, 1), v560, v686, 1), v568, v694, 1), v576, v702, 1),
                                 v584,
                                 v710,
                                 1),
                               v592,
                               v718,
                               1),
                             v600,
                             v726,
                             1),
                           v608,
                           v734,
                           1),
                         v616,
                         v742,
                         1),
                       v624,
                       v750,
                       1),
                     v632,
                     v758,
                     1),
                   v640,
                   v766,
                   1),
                 v648,
                 v774,
                 1),
               v656,
               v782,
               1),
             v664,
             v790,
             1);
    v496 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v553, v678, 1), v561, v686, 1), v569, v694, 1), v577, v702, 1),
                                 v585,
                                 v710,
                                 1),
                               v593,
                               v718,
                               1),
                             v601,
                             v726,
                             1),
                           v609,
                           v734,
                           1),
                         v617,
                         v742,
                         1),
                       v625,
                       v750,
                       1),
                     v633,
                     v758,
                     1),
                   v641,
                   v766,
                   1),
                 v649,
                 v774,
                 1),
               v657,
               v782,
               1),
             v665,
             v790,
             1);
    v495 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, v678, 1), v562, v686, 1), v570, v694, 1), v578, v702, 1),
                                 v586,
                                 v710,
                                 1),
                               v594,
                               v718,
                               1),
                             v602,
                             v726,
                             1),
                           v610,
                           v734,
                           1),
                         v618,
                         v742,
                         1),
                       v626,
                       v750,
                       1),
                     v634,
                     v758,
                     1),
                   v642,
                   v766,
                   1),
                 v650,
                 v774,
                 1),
               v658,
               v782,
               1),
             v666,
             v790,
             1);
    v494 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v555, v678, 1), v563, v686, 1), v571, v694, 1), v579, v702, 1),
                                 v587,
                                 v710,
                                 1),
                               v595,
                               v718,
                               1),
                             v603,
                             v726,
                             1),
                           v611,
                           v734,
                           1),
                         v619,
                         v742,
                         1),
                       v627,
                       v750,
                       1),
                     v635,
                     v758,
                     1),
                   v643,
                   v766,
                   1),
                 v651,
                 v774,
                 1),
               v659,
               v782,
               1),
             v667,
             v790,
             1);
    v533 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v678, 1), v564, v686, 1), v572, v694, 1), v580, v702, 1),
                                 v588,
                                 v710,
                                 1),
                               v596,
                               v718,
                               1),
                             v604,
                             v726,
                             1),
                           v612,
                           v734,
                           1),
                         v620,
                         v742,
                         1),
                       v628,
                       v750,
                       1),
                     v636,
                     v758,
                     1),
                   v644,
                   v766,
                   1),
                 v652,
                 v774,
                 1),
               v660,
               v782,
               1),
             v668,
             v790,
             1);
    v493 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v557, v678, 1), v565, v686, 1), v573, v694, 1), v581, v702, 1),
                                 v589,
                                 v710,
                                 1),
                               v597,
                               v718,
                               1),
                             v605,
                             v726,
                             1),
                           v613,
                           v734,
                           1),
                         v621,
                         v742,
                         1),
                       v629,
                       v750,
                       1),
                     v637,
                     v758,
                     1),
                   v645,
                   v766,
                   1),
                 v653,
                 v774,
                 1),
               v661,
               v782,
               1),
             v669,
             v790,
             1);
    v491 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v558, v678, 1), v566, v686, 1), v574, v694, 1), v582, v702, 1),
                                 v590,
                                 v710,
                                 1),
                               v598,
                               v718,
                               1),
                             v606,
                             v726,
                             1),
                           v614,
                           v734,
                           1),
                         v622,
                         v742,
                         1),
                       v630,
                       v750,
                       1),
                     v638,
                     v758,
                     1),
                   v646,
                   v766,
                   1),
                 v654,
                 v774,
                 1),
               v662,
               v782,
               1),
             v670,
             v790,
             1);
    __asm { FMLA            D9, D31, V1.D[1] }
    v490 = _D9;
    v232 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v552, v679), v560, v687), v568, v695), v576, v703), v584, v711), v592, v719), v600,
                             v727),
                           v608,
                           v735),
                         v616,
                         v743),
                       v624,
                       v751),
                     v632,
                     v759),
                   v640,
                   v767),
                 v648,
                 v775),
               v656,
               v783),
             v664,
             v791);
    v233 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v553, v679), v561, v687), v569, v695), v577, v703), v585, v711), v593, v719), v601,
                             v727),
                           v609,
                           v735),
                         v617,
                         v743),
                       v625,
                       v751),
                     v633,
                     v759),
                   v641,
                   v767),
                 v649,
                 v775),
               v657,
               v783),
             v665,
             v791);
    v489 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v679), v562, v687), v570, v695), v578, v703), v586, v711), v594, v719), v602,
                             v727),
                           v610,
                           v735),
                         v618,
                         v743),
                       v626,
                       v751),
                     v634,
                     v759),
                   v642,
                   v767),
                 v650,
                 v775),
               v658,
               v783),
             v666,
             v791);
    v234 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v555, v679), v563, v687), v571, v695), v579, v703), v587, v711), v595, v719), v603,
                             v727),
                           v611,
                           v735),
                         v619,
                         v743),
                       v627,
                       v751),
                     v635,
                     v759),
                   v643,
                   v767),
                 v651,
                 v775),
               v659,
               v783),
             v667,
             v791);
    v488 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v679), v564, v687), v572, v695), v580, v703), v588, v711), v596, v719), v604,
                             v727),
                           v612,
                           v735),
                         v620,
                         v743),
                       v628,
                       v751),
                     v636,
                     v759),
                   v644,
                   v767),
                 v652,
                 v775),
               v660,
               v783),
             v668,
             v791);
    v235 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v679), v565, v687), v573, v695), v581, v703), v589, v711), v597, v719), v605,
                             v727),
                           v613,
                           v735),
                         v621,
                         v743),
                       v629,
                       v751),
                     v637,
                     v759),
                   v645,
                   v767),
                 v653,
                 v775),
               v661,
               v783),
             v669,
             v791);
    v236 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v679), v566, v687), v574, v695), v582, v703), v590, v711), v598, v719), v606,
                             v727),
                           v614,
                           v735),
                         v622,
                         v743),
                       v630,
                       v751),
                     v638,
                     v759),
                   v646,
                   v767),
                 v654,
                 v775),
               v662,
               v783),
             v670,
             v791);
    v237 = v455 + v671 * v791;
    v238 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v558, v672.f64[0]), v566, v680.f64[0]), v574, v688.f64[0]), v582, v696.f64[0]), v590, v704.f64[0]),
                               v598,
                               v712.f64[0]),
                             v606,
                             v720.f64[0]),
                           v614,
                           v728.f64[0]),
                         v622,
                         v736.f64[0]),
                       v630,
                       v744.f64[0]),
                     v638,
                     v752.f64[0]),
                   v646,
                   v760.f64[0]),
                 v654,
                 v768.f64[0]),
               v662,
               v776.f64[0]),
             v670,
             v784.f64[0]);
    *(float64x2_t *)(v3 + 80) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, v672.f64[0]), v565, v680.f64[0]), v573, v688.f64[0]), v581, v696.f64[0]), v589, v704.f64[0]),
                                                    v597,
                                                    v712.f64[0]),
                                                  v605,
                                                  v720.f64[0]),
                                                v613,
                                                v728.f64[0]),
                                              v621,
                                              v736.f64[0]),
                                            v629,
                                            v744.f64[0]),
                                          v637,
                                          v752.f64[0]),
                                        v645,
                                        v760.f64[0]),
                                      v653,
                                      v768.f64[0]),
                                    v661,
                                    v776.f64[0]),
                                  v669,
                                  v784.f64[0]);
    *(float64x2_t *)(v3 + 96) = v238;
    *(float64x2_t *)(v3 + 48) = v465;
    *(float64x2_t *)(v3 + 64) = v529;
    *(float64x2_t *)(v3 + 16) = v486;
    *(float64x2_t *)(v3 + 32) = v530;
    *(float64x2_t *)v3 = v531;
    *(double *)(v3 + 112) = v532;
    *(_QWORD *)(v3 + 232) = v464;
    *(float64x2_t *)(v3 + 216) = v202;
    *(float64x2_t *)(v3 + 200) = v527;
    *(float64x2_t *)(v3 + 184) = v459;
    *(float64x2_t *)(v3 + 168) = v468;
    *(float64x2_t *)(v3 + 152) = v546;
    *(float64x2_t *)(v3 + 136) = v528;
    *(float64x2_t *)(v3 + 120) = v466;
    *(float64x2_t *)(v3 + 320) = v205;
    *(float64x2_t *)(v3 + 336) = v525;
    *(float64x2_t *)(v3 + 288) = v484;
    *(float64x2_t *)(v3 + 304) = v526;
    *(float64x2_t *)(v3 + 256) = v458;
    *(float64x2_t *)(v3 + 272) = v457;
    *(float64x2_t *)(v3 + 240) = v485;
    *(double *)(v3 + 352) = v206;
    *(_QWORD *)(v3 + 472) = v481;
    *(float64x2_t *)(v3 + 440) = v211;
    *(float64x2_t *)(v3 + 456) = v483;
    *(float64x2_t *)(v3 + 408) = v209;
    *(float64x2_t *)(v3 + 424) = v210;
    *(float64x2_t *)(v3 + 376) = v207;
    *(float64x2_t *)(v3 + 392) = v208;
    *(float64x2_t *)(v3 + 360) = v487;
    *(float64x2_t *)(v3 + 576) = v523;
    *(float64x2_t *)(v3 + 560) = v215;
    *(float64x2_t *)(v3 + 544) = v524;
    *(float64x2_t *)(v3 + 528) = v463;
    *(float64x2_t *)(v3 + 512) = v480;
    *(float64x2_t *)(v3 + 496) = v482;
    *(float64x2_t *)(v3 + 480) = v214;
    *(double *)(v3 + 592) = v479;
    *(float64_t *)(v3 + 712) = v456;
    *(float64x2_t *)(v3 + 680) = v217;
    *(float64x2_t *)(v3 + 696) = v478;
    *(float64x2_t *)(v3 + 648) = v520;
    *(float64x2_t *)(v3 + 664) = v545;
    *(float64x2_t *)(v3 + 616) = v522;
    *(float64x2_t *)(v3 + 632) = v521;
    *(float64x2_t *)(v3 + 600) = v216;
    *(float64x2_t *)(v3 + 800) = v220;
    *(float64x2_t *)(v3 + 816) = v221;
    *(float64x2_t *)(v3 + 768) = v462;
    *(float64x2_t *)(v3 + 784) = v517;
    *(float64x2_t *)(v3 + 736) = v219;
    *(float64x2_t *)(v3 + 752) = v519;
    *(float64x2_t *)(v3 + 720) = v518;
    *(double *)(v3 + 832) = v544;
    *(float64_t *)(v3 + 952) = v514;
    *(float64x2_t *)(v3 + 920) = v477;
    *(float64x2_t *)(v3 + 936) = v511;
    *(float64x2_t *)(v3 + 888) = v512;
    *(float64x2_t *)(v3 + 904) = v515;
    *(float64x2_t *)(v3 + 856) = v516;
    *(float64x2_t *)(v3 + 872) = v513;
    *(float64x2_t *)(v3 + 840) = v222;
    *(float64x2_t *)(v3 + 1040) = v225;
    *(float64x2_t *)(v3 + 1056) = v475;
    *(float64x2_t *)(v3 + 1008) = v542;
    *(float64x2_t *)(v3 + 1024) = v461;
    *(float64x2_t *)(v3 + 976) = v224;
    *(float64x2_t *)(v3 + 992) = v547;
    *(float64x2_t *)(v3 + 960) = v543;
    *(double *)(v3 + 1072) = v510;
    *(float64_t *)(v3 + 1192) = v460;
    *(float64x2_t *)(v3 + 1160) = v474;
    *(float64x2_t *)(v3 + 1176) = v472;
    *(float64x2_t *)(v3 + 1128) = v508;
    *(float64x2_t *)(v3 + 1144) = v507;
    *(float64x2_t *)(v3 + 1096) = v226;
    *(float64x2_t *)(v3 + 1112) = v476;
    *(float64x2_t *)(v3 + 1080) = v509;
    *(float64x2_t *)(v3 + 1296) = v228;
    *(float64x2_t *)(v3 + 1264) = v505;
    *(float64x2_t *)(v3 + 1280) = v540;
    *(float64x2_t *)(v3 + 1232) = v473;
    *(float64x2_t *)(v3 + 1248) = v506;
    *(float64x2_t *)(v3 + 1200) = v541;
    *(float64x2_t *)(v3 + 1216) = v471;
    *(double *)(v3 + 1312) = v537;
    *(_QWORD *)(v3 + 1432) = _D17;
    *(float64x2_t *)(v3 + 1416) = v501;
    *(float64x2_t *)(v3 + 1400) = v504;
    *(float64x2_t *)(v3 + 1368) = v470;
    *(float64x2_t *)(v3 + 1384) = v503;
    *(float64x2_t *)(v3 + 1336) = v539;
    *(float64x2_t *)(v3 + 1352) = v538;
    *(float64x2_t *)(v3 + 1320) = v536;
    *(float64x2_t *)(v3 + 1520) = v534;
    *(float64x2_t *)(v3 + 1536) = v499;
    *(float64x2_t *)(v3 + 1488) = v498;
    *(float64x2_t *)(v3 + 1504) = v469;
    *(float64x2_t *)(v3 + 1456) = v502;
    *(float64x2_t *)(v3 + 1472) = v500;
    *(float64x2_t *)(v3 + 1440) = v535;
    *(double *)(v3 + 1552) = v492;
    *(_QWORD *)(v3 + 1672) = v490;
    *(float64x2_t *)(v3 + 1656) = v491;
    *(float64x2_t *)(v3 + 1640) = v493;
    *(float64x2_t *)(v3 + 1624) = v533;
    *(float64x2_t *)(v3 + 1608) = v494;
    *(float64x2_t *)(v3 + 1592) = v495;
    *(float64x2_t *)(v3 + 1576) = v496;
    *(float64x2_t *)(v3 + 1560) = v497;
    *(float64x2_t *)(v3 + 1760) = v235;
    *(float64x2_t *)(v3 + 1776) = v236;
    *(float64x2_t *)(v3 + 1728) = v234;
    *(float64x2_t *)(v3 + 1744) = v488;
    *(float64x2_t *)(v3 + 1696) = v233;
    *(float64x2_t *)(v3 + 1712) = v489;
    *(float64x2_t *)(v3 + 1680) = v232;
    *(float64_t *)(v3 + 1792) = v237;
  }
  else
  {
    _Q14 = *(_OWORD *)(v1 + 1696);
    _D17 = *(_QWORD *)(v1 + 24);
    __asm { FMLA            D18, D17, V14.D[1] }
    _D7 = *(_QWORD *)(v1 + 144);
    __asm { FMLA            D17, D7, V14.D[1] }
    _D7 = *(_QWORD *)(v1 + 264);
    __asm { FMLA            D17, D7, V14.D[1] }
    _D6 = *(_QWORD *)(v1 + 384);
    __asm { FMLA            D7, D6, V14.D[1] }
    _D5 = *(_QWORD *)(v1 + 504);
    __asm { FMLA            D6, D5, V14.D[1] }
    _D4 = *(_QWORD *)(v1 + 624);
    __asm { FMLA            D5, D4, V14.D[1] }
    _D3 = *(_QWORD *)(v1 + 744);
    __asm { FMLA            D4, D3, V14.D[1] }
    _D2 = *(_QWORD *)(v1 + 864);
    __asm { FMLA            D3, D2, V14.D[1] }
    _D1 = *(_QWORD *)(v1 + 984);
    __asm { FMLA            D2, D1, V14.D[1] }
    _D0 = *(_QWORD *)(v1 + 1104);
    __asm { FMLA            D1, D0, V14.D[1] }
    _D0 = *(_QWORD *)(v1 + 1224);
    __asm { FMLA            D1, D0, V14.D[1] }
    _D0 = *(_QWORD *)(v1 + 1344);
    __asm { FMLA            D1, D0, V14.D[1] }
    _D0 = *(_QWORD *)(v1 + 1464);
    __asm { FMLA            D1, D0, V14.D[1] }
    _D0 = *(_QWORD *)(v1 + 1584);
    __asm { FMLA            D1, D0, V14.D[1] }
    _D0 = *(_QWORD *)(v1 + 1704);
    __asm { FMLA            D1, D0, V14.D[1] }
    _Q17 = *(_OWORD *)(v1 + 1712);
    _D0 = *(_QWORD *)(v1 + 40);
    __asm { FMLA            D5, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 160);
    __asm { FMLA            D5, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 280);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 400);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 520);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 640);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 760);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 880);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1000);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1120);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1240);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1360);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1480);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1600);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1720);
    __asm { FMLA            D1, D0, V17.D[1] }
    _Q17 = *(_OWORD *)(v1 + 1728);
    _D10 = *(_QWORD *)(v1 + 56);
    __asm { FMLA            D12, D10, V17.D[1] }
    _D10 = *(_QWORD *)(v1 + 176);
    __asm { FMLA            D12, D10, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 296);
    __asm { FMLA            D10, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 416);
    __asm { FMLA            D10, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 536);
    __asm { FMLA            D8, D31, V17.D[1] }
    _D30 = *(_QWORD *)(v1 + 656);
    __asm { FMLA            D31, D30, V17.D[1] }
    _D29 = *(_QWORD *)(v1 + 776);
    __asm { FMLA            D30, D29, V17.D[1] }
    _D28 = *(_QWORD *)(v1 + 896);
    __asm { FMLA            D29, D28, V17.D[1] }
    _D27 = *(_QWORD *)(v1 + 1016);
    __asm { FMLA            D28, D27, V17.D[1] }
    _D26 = *(_QWORD *)(v1 + 1136);
    __asm { FMLA            D27, D26, V17.D[1] }
    _D25 = *(_QWORD *)(v1 + 1256);
    __asm { FMLA            D26, D25, V17.D[1] }
    _D24 = *(_QWORD *)(v1 + 1376);
    __asm { FMLA            D25, D24, V17.D[1] }
    _D23 = *(_QWORD *)(v1 + 1496);
    __asm { FMLA            D24, D23, V17.D[1] }
    _D5 = *(_QWORD *)(v1 + 1616);
    __asm { FMLA            D23, D5, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1736);
    __asm { FMLA            D1, D0, V17.D[1] }
    _Q17 = *(_OWORD *)(v1 + 1744);
    _D10 = *(_QWORD *)(v1 + 72);
    __asm { FMLA            D0, D10, V17.D[1] }
    _D10 = *(_QWORD *)(v1 + 192);
    __asm { FMLA            D0, D10, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 312);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 432);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 552);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D30 = *(_QWORD *)(v1 + 672);
    __asm { FMLA            D0, D30, V17.D[1] }
    _D29 = *(_QWORD *)(v1 + 792);
    __asm { FMLA            D0, D29, V17.D[1] }
    _D28 = *(_QWORD *)(v1 + 912);
    __asm { FMLA            D0, D28, V17.D[1] }
    _D27 = *(_QWORD *)(v1 + 1032);
    __asm { FMLA            D0, D27, V17.D[1] }
    _D26 = *(_QWORD *)(v1 + 1152);
    __asm { FMLA            D0, D26, V17.D[1] }
    _D25 = *(_QWORD *)(v1 + 1272);
    __asm { FMLA            D0, D25, V17.D[1] }
    _D24 = *(_QWORD *)(v1 + 1392);
    __asm { FMLA            D0, D24, V17.D[1] }
    _D23 = *(_QWORD *)(v1 + 1512);
    __asm { FMLA            D0, D23, V17.D[1] }
    _D5 = *(_QWORD *)(v1 + 1632);
    __asm { FMLA            D0, D5, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1752);
    __asm { FMLA            D1, D0, V17.D[1] }
    _Q17 = *(_OWORD *)(v1 + 1760);
    _D10 = *(_QWORD *)(v1 + 88);
    __asm { FMLA            D0, D10, V17.D[1] }
    _D10 = *(_QWORD *)(v1 + 208);
    __asm { FMLA            D0, D10, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 328);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 448);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 568);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D30 = *(_QWORD *)(v1 + 688);
    __asm { FMLA            D0, D30, V17.D[1] }
    _D29 = *(_QWORD *)(v1 + 808);
    __asm { FMLA            D0, D29, V17.D[1] }
    _D28 = *(_QWORD *)(v1 + 928);
    __asm { FMLA            D0, D28, V17.D[1] }
    _D27 = *(_QWORD *)(v1 + 1048);
    __asm { FMLA            D0, D27, V17.D[1] }
    _D26 = *(_QWORD *)(v1 + 1168);
    __asm { FMLA            D0, D26, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1288);
    __asm { FMLA            D26, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1408);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1528);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1648);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1768);
    __asm { FMLA            D1, D0, V17.D[1] }
    _Q17 = *(_OWORD *)(v1 + 1776);
    _D10 = *(_QWORD *)(v1 + 104);
    __asm { FMLA            D0, D10, V17.D[1] }
    _D10 = *(_QWORD *)(v1 + 224);
    __asm { FMLA            D0, D10, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 344);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 464);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D31 = *(_QWORD *)(v1 + 584);
    __asm { FMLA            D0, D31, V17.D[1] }
    _D30 = *(_QWORD *)(v1 + 704);
    __asm { FMLA            D0, D30, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 824);
    __asm { FMLA            D30, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 944);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1064);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1184);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1304);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1424);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1544);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1664);
    __asm { FMLA            D1, D0, V17.D[1] }
    _D0 = *(_QWORD *)(v1 + 1784);
    __asm { FMLA            D1, D0, V17.D[1] }
    _Q0 = *(_OWORD *)(v1 + 1792);
    _D10 = *(_QWORD *)(v1 + 120);
    __asm { FMLA            D1, D10, V0.D[1] }
    _D10 = *(_QWORD *)(v1 + 240);
    __asm { FMLA            D1, D10, V0.D[1] }
    _D31 = *(_QWORD *)(v1 + 360);
    __asm { FMLA            D1, D31, V0.D[1] }
    _D31 = *(_QWORD *)(v1 + 480);
    __asm { FMLA            D1, D31, V0.D[1] }
    _D31 = *(_QWORD *)(v1 + 600);
    __asm { FMLA            D1, D31, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 720);
    __asm { FMLA            D31, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 840);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 960);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 1080);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 1200);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 1320);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 1440);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 1560);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 1680);
    __asm { FMLA            D2, D1, V0.D[1] }
    _D1 = *(_QWORD *)(v1 + 1800);
    __asm { FMLA            D14, D1, V0.D[1] }
    sub_20F4B9E44();
  }
}

double sub_20F4CE6EC(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  double result;

  v2 = *a2;
  *(_QWORD *)a1 = **a2;
  *(_QWORD *)(a1 + 8) = v2[1];
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v2[3];
  *(_QWORD *)(a1 + 32) = v2[4];
  *(_QWORD *)(a1 + 40) = v2[5];
  *(_QWORD *)(a1 + 48) = v2[6];
  *(_QWORD *)(a1 + 56) = v2[7];
  *(_QWORD *)(a1 + 64) = v2[8];
  *(_QWORD *)(a1 + 72) = v2[9];
  *(_QWORD *)(a1 + 80) = v2[10];
  *(_QWORD *)(a1 + 88) = v2[11];
  *(_QWORD *)(a1 + 96) = v2[12];
  *(_QWORD *)(a1 + 104) = v2[13];
  *(_QWORD *)(a1 + 112) = v2[14];
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v2[16];
  *(_QWORD *)(a1 + 136) = v2[17];
  *(_QWORD *)(a1 + 144) = v2[18];
  *(_QWORD *)(a1 + 152) = v2[19];
  *(_QWORD *)(a1 + 160) = v2[20];
  *(_QWORD *)(a1 + 168) = v2[21];
  *(_QWORD *)(a1 + 176) = v2[22];
  *(_QWORD *)(a1 + 184) = v2[23];
  *(_QWORD *)(a1 + 192) = v2[24];
  *(_QWORD *)(a1 + 200) = v2[25];
  *(_QWORD *)(a1 + 208) = v2[26];
  *(_QWORD *)(a1 + 216) = v2[27];
  *(_QWORD *)(a1 + 224) = v2[28];
  *(_QWORD *)(a1 + 232) = v2[29];
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v3 = *a2;
  *(_QWORD *)(a1 + 256) = (*a2)[32];
  *(_QWORD *)(a1 + 264) = v3[33];
  *(_QWORD *)(a1 + 272) = v3[34];
  *(_QWORD *)(a1 + 280) = v3[35];
  *(_QWORD *)(a1 + 288) = v3[36];
  *(_QWORD *)(a1 + 296) = v3[37];
  *(_QWORD *)(a1 + 304) = v3[38];
  *(_QWORD *)(a1 + 312) = v3[39];
  *(_QWORD *)(a1 + 320) = v3[40];
  *(_QWORD *)(a1 + 328) = v3[41];
  *(_QWORD *)(a1 + 336) = v3[42];
  *(_QWORD *)(a1 + 344) = v3[43];
  *(_QWORD *)(a1 + 352) = v3[44];
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 384) = v3[48];
  *(_QWORD *)(a1 + 392) = v3[49];
  *(_QWORD *)(a1 + 400) = v3[50];
  *(_QWORD *)(a1 + 408) = v3[51];
  v4 = *a2;
  *(_QWORD *)(a1 + 416) = (*a2)[52];
  *(_QWORD *)(a1 + 424) = v4[53];
  *(_QWORD *)(a1 + 432) = v4[54];
  *(_QWORD *)(a1 + 440) = v4[55];
  *(_QWORD *)(a1 + 448) = v4[56];
  *(_QWORD *)(a1 + 456) = v4[57];
  *(_QWORD *)(a1 + 464) = v4[58];
  *(_QWORD *)(a1 + 472) = v4[59];
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  v5 = *a2;
  *(_QWORD *)(a1 + 512) = (*a2)[64];
  *(_QWORD *)(a1 + 520) = v5[65];
  *(_QWORD *)(a1 + 528) = v5[66];
  *(_QWORD *)(a1 + 536) = v5[67];
  *(_QWORD *)(a1 + 544) = v5[68];
  *(_QWORD *)(a1 + 552) = v5[69];
  *(_QWORD *)(a1 + 560) = v5[70];
  *(_QWORD *)(a1 + 568) = v5[71];
  *(_QWORD *)(a1 + 576) = v5[72];
  *(_QWORD *)(a1 + 584) = v5[73];
  *(_QWORD *)(a1 + 592) = v5[74];
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  v6 = *a2;
  *(_QWORD *)(a1 + 640) = (*a2)[80];
  *(_QWORD *)(a1 + 648) = v6[81];
  *(_QWORD *)(a1 + 656) = v6[82];
  *(_QWORD *)(a1 + 664) = v6[83];
  *(_QWORD *)(a1 + 672) = v6[84];
  *(_QWORD *)(a1 + 680) = v6[85];
  *(_QWORD *)(a1 + 688) = v6[86];
  *(_QWORD *)(a1 + 696) = v6[87];
  *(_QWORD *)(a1 + 704) = v6[88];
  *(_QWORD *)(a1 + 712) = v6[89];
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  v7 = *a2;
  *(_QWORD *)(a1 + 768) = (*a2)[96];
  *(_QWORD *)(a1 + 776) = v7[97];
  *(_QWORD *)(a1 + 784) = v7[98];
  *(_QWORD *)(a1 + 792) = v7[99];
  *(_QWORD *)(a1 + 800) = v7[100];
  *(_QWORD *)(a1 + 808) = v7[101];
  *(_QWORD *)(a1 + 816) = v7[102];
  *(_QWORD *)(a1 + 824) = v7[103];
  *(_QWORD *)(a1 + 832) = v7[104];
  *(_QWORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 896) = v7[112];
  *(_QWORD *)(a1 + 904) = v7[113];
  *(_QWORD *)(a1 + 912) = v7[114];
  *(_QWORD *)(a1 + 920) = v7[115];
  *(_QWORD *)(a1 + 928) = v7[116];
  *(_QWORD *)(a1 + 936) = v7[117];
  *(_QWORD *)(a1 + 944) = v7[118];
  *(_QWORD *)(a1 + 952) = v7[119];
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  v8 = *a2;
  *(_QWORD *)(a1 + 1024) = (*a2)[128];
  *(_QWORD *)(a1 + 1032) = v8[129];
  *(_QWORD *)(a1 + 1040) = v8[130];
  *(_QWORD *)(a1 + 1048) = v8[131];
  *(_QWORD *)(a1 + 1056) = v8[132];
  *(_QWORD *)(a1 + 1064) = v8[133];
  *(_QWORD *)(a1 + 1072) = v8[134];
  *(_QWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  v9 = *a2;
  *(_QWORD *)(a1 + 1152) = (*a2)[144];
  *(_QWORD *)(a1 + 1160) = v9[145];
  *(_QWORD *)(a1 + 1168) = v9[146];
  *(_QWORD *)(a1 + 1176) = v9[147];
  *(_QWORD *)(a1 + 1184) = v9[148];
  *(_QWORD *)(a1 + 1192) = v9[149];
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_QWORD *)(a1 + 1280) = v9[160];
  *(_QWORD *)(a1 + 1288) = v9[161];
  *(_QWORD *)(a1 + 1296) = v9[162];
  *(_QWORD *)(a1 + 1304) = v9[163];
  *(_QWORD *)(a1 + 1312) = v9[164];
  *(_QWORD *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  v10 = *a2;
  *(_QWORD *)(a1 + 1408) = (*a2)[176];
  *(_QWORD *)(a1 + 1416) = v10[177];
  *(_QWORD *)(a1 + 1424) = v10[178];
  *(_QWORD *)(a1 + 1432) = v10[179];
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  v11 = *a2;
  *(_QWORD *)(a1 + 1536) = (*a2)[192];
  *(_QWORD *)(a1 + 1544) = v11[193];
  *(_QWORD *)(a1 + 1552) = v11[194];
  *(_QWORD *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  v12 = *a2;
  *(_QWORD *)(a1 + 1664) = (*a2)[208];
  *(_QWORD *)(a1 + 1672) = v12[209];
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  result = *((double *)*a2 + 224);
  *(double *)(a1 + 1792) = result;
  return result;
}

float64x2_t sub_20F4CEBA4(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  float64x2_t result;
  float64x2_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64_t v62;
  float64x2_t *v63;
  double v64[193];
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  uint64_t v80;
  _BYTE __dst[1800];

  v3 = *a2;
  v3.f64[1] = a2[8].f64[0];
  v4 = a2[16];
  v4.f64[1] = a2[24].f64[0];
  v5 = a2[32];
  v5.f64[1] = a2[40].f64[0];
  v6 = a2[48];
  v6.f64[1] = a2[56].f64[0];
  v7 = a2[64];
  v7.f64[1] = a2[72].f64[0];
  v8 = a2[80];
  v8.f64[1] = a2[88].f64[0];
  v9 = a2[96];
  v9.f64[1] = a2[104].f64[0];
  v10 = a2[112].f64[0];
  __asm { FMOV            V16.2D, #1.0 }
  v16 = vdivq_f64(_Q16, vsqrtq_f64(v9));
  v71 = v16;
  v16.f64[0] = sqrt(v10);
  v70 = vdivq_f64(_Q16, vsqrtq_f64(v8));
  v69 = vdivq_f64(_Q16, vsqrtq_f64(v7));
  v68 = vdivq_f64(_Q16, vsqrtq_f64(v6));
  v67 = vdivq_f64(_Q16, vsqrtq_f64(v5));
  v66 = vdivq_f64(_Q16, vsqrtq_f64(v4));
  v65 = vdivq_f64(_Q16, vsqrtq_f64(v3));
  v72 = *(_OWORD *)&vdivq_f64(_Q16, v16);
  v63 = &v65;
  *(_QWORD *)&v73.f64[0] = a2;
  *(_QWORD *)&v73.f64[1] = &v63;
  LOBYTE(v74.f64[0]) = 0;
  *(_QWORD *)__dst = &v73;
  *(_QWORD *)&__dst[8] = &v65;
  __dst[16] = 0;
  sub_20F4D3C54(v64, (uint64_t)__dst);
  *(_BYTE *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 1816) = 0;
  sub_20F4CF2C4();
  v18 = 0;
  v19 = 0;
  result.f64[1] = v65.f64[1];
  v80 = v72;
  v78 = v70;
  v79 = v71;
  v76 = v68;
  v77 = v69;
  v74 = v66;
  v75 = v67;
  v73 = v65;
  do
  {
    result.f64[0] = v73.f64[v18];
    v17.f64[0] = *(float64_t *)(a1 + v19 + 128);
    v61 = vmulq_n_f64(*(float64x2_t *)(a1 + v19 + 112), result.f64[0]);
    *(_QWORD *)&v62 = *(_OWORD *)&vmulq_f64(result, v17);
    v59 = vmulq_n_f64(*(float64x2_t *)(a1 + v19 + 80), result.f64[0]);
    v60 = vmulq_n_f64(*(float64x2_t *)(a1 + v19 + 96), result.f64[0]);
    v57 = vmulq_n_f64(*(float64x2_t *)(a1 + v19 + 48), result.f64[0]);
    v58 = vmulq_n_f64(*(float64x2_t *)(a1 + v19 + 64), result.f64[0]);
    v55 = vmulq_n_f64(*(float64x2_t *)(a1 + v19 + 16), result.f64[0]);
    v56 = vmulq_n_f64(*(float64x2_t *)(a1 + v19 + 32), result.f64[0]);
    memcpy(__dst, (const void *)(a1 + 16), sizeof(__dst));
    v21 = (float64x2_t *)&__dst[v19];
    *v21 = v55;
    v21[1] = v56;
    v21[2] = v57;
    v21[3] = v58;
    v21[4] = v59;
    v21[5] = v60;
    v21[6] = v61;
    v21[7].f64[0] = v62;
    v22 = *(_OWORD *)&__dst[1024];
    *(_QWORD *)(a1 + 1808) = *(_QWORD *)&__dst[1792];
    *(_OWORD *)(a1 + 1792) = *(_OWORD *)&__dst[1776];
    *(_OWORD *)(a1 + 1776) = *(_OWORD *)&__dst[1760];
    *(_OWORD *)(a1 + 1760) = *(_OWORD *)&__dst[1744];
    *(_OWORD *)(a1 + 1744) = *(_OWORD *)&__dst[1728];
    *(_OWORD *)(a1 + 1728) = *(_OWORD *)&__dst[1712];
    *(_OWORD *)(a1 + 1712) = *(_OWORD *)&__dst[1696];
    *(_OWORD *)(a1 + 1696) = *(_OWORD *)&__dst[1680];
    *(_OWORD *)(a1 + 1680) = *(_OWORD *)&__dst[1664];
    *(_OWORD *)(a1 + 1664) = *(_OWORD *)&__dst[1648];
    *(_OWORD *)(a1 + 1648) = *(_OWORD *)&__dst[1632];
    *(_OWORD *)(a1 + 1632) = *(_OWORD *)&__dst[1616];
    *(_OWORD *)(a1 + 1616) = *(_OWORD *)&__dst[1600];
    *(_OWORD *)(a1 + 1600) = *(_OWORD *)&__dst[1584];
    *(_OWORD *)(a1 + 1584) = *(_OWORD *)&__dst[1568];
    *(_OWORD *)(a1 + 1568) = *(_OWORD *)&__dst[1552];
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)&__dst[1536];
    *(_OWORD *)(a1 + 1536) = *(_OWORD *)&__dst[1520];
    *(_OWORD *)(a1 + 1520) = *(_OWORD *)&__dst[1504];
    *(_OWORD *)(a1 + 1504) = *(_OWORD *)&__dst[1488];
    *(_OWORD *)(a1 + 1488) = *(_OWORD *)&__dst[1472];
    *(_OWORD *)(a1 + 1472) = *(_OWORD *)&__dst[1456];
    *(_OWORD *)(a1 + 1456) = *(_OWORD *)&__dst[1440];
    *(_OWORD *)(a1 + 1440) = *(_OWORD *)&__dst[1424];
    *(_OWORD *)(a1 + 1424) = *(_OWORD *)&__dst[1408];
    *(_OWORD *)(a1 + 1408) = *(_OWORD *)&__dst[1392];
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)&__dst[1376];
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)&__dst[1360];
    *(_OWORD *)(a1 + 1360) = *(_OWORD *)&__dst[1344];
    *(_OWORD *)(a1 + 1344) = *(_OWORD *)&__dst[1328];
    *(_OWORD *)(a1 + 1328) = *(_OWORD *)&__dst[1312];
    *(_OWORD *)(a1 + 1312) = *(_OWORD *)&__dst[1296];
    *(_OWORD *)(a1 + 1296) = *(_OWORD *)&__dst[1280];
    *(_OWORD *)(a1 + 1280) = *(_OWORD *)&__dst[1264];
    *(_OWORD *)(a1 + 1264) = *(_OWORD *)&__dst[1248];
    *(_OWORD *)(a1 + 1248) = *(_OWORD *)&__dst[1232];
    *(_OWORD *)(a1 + 1232) = *(_OWORD *)&__dst[1216];
    *(_OWORD *)(a1 + 1216) = *(_OWORD *)&__dst[1200];
    *(_OWORD *)(a1 + 1200) = *(_OWORD *)&__dst[1184];
    *(_OWORD *)(a1 + 1184) = *(_OWORD *)&__dst[1168];
    *(_OWORD *)(a1 + 1168) = *(_OWORD *)&__dst[1152];
    *(_OWORD *)(a1 + 1152) = *(_OWORD *)&__dst[1136];
    *(_OWORD *)(a1 + 1136) = *(_OWORD *)&__dst[1120];
    *(_OWORD *)(a1 + 1120) = *(_OWORD *)&__dst[1104];
    *(_OWORD *)(a1 + 1104) = *(_OWORD *)&__dst[1088];
    *(_OWORD *)(a1 + 1088) = *(_OWORD *)&__dst[1072];
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)&__dst[1056];
    *(_OWORD *)(a1 + 1056) = *(_OWORD *)&__dst[1040];
    *(_OWORD *)(a1 + 1040) = v22;
    v23 = *(_OWORD *)&__dst[1008];
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)&__dst[992];
    *(_OWORD *)(a1 + 1024) = v23;
    v24 = *(_OWORD *)&__dst[976];
    *(_OWORD *)(a1 + 976) = *(_OWORD *)&__dst[960];
    *(_OWORD *)(a1 + 992) = v24;
    v25 = *(_OWORD *)&__dst[944];
    *(_OWORD *)(a1 + 944) = *(_OWORD *)&__dst[928];
    *(_OWORD *)(a1 + 960) = v25;
    v26 = *(_OWORD *)&__dst[912];
    *(_OWORD *)(a1 + 912) = *(_OWORD *)&__dst[896];
    *(_OWORD *)(a1 + 928) = v26;
    v27 = *(_OWORD *)&__dst[880];
    *(_OWORD *)(a1 + 880) = *(_OWORD *)&__dst[864];
    *(_OWORD *)(a1 + 896) = v27;
    v28 = *(_OWORD *)&__dst[848];
    *(_OWORD *)(a1 + 848) = *(_OWORD *)&__dst[832];
    *(_OWORD *)(a1 + 864) = v28;
    v29 = *(_OWORD *)&__dst[816];
    *(_OWORD *)(a1 + 816) = *(_OWORD *)&__dst[800];
    *(_OWORD *)(a1 + 832) = v29;
    v30 = *(_OWORD *)&__dst[784];
    *(_OWORD *)(a1 + 784) = *(_OWORD *)&__dst[768];
    *(_OWORD *)(a1 + 800) = v30;
    v31 = *(_OWORD *)&__dst[752];
    *(_OWORD *)(a1 + 752) = *(_OWORD *)&__dst[736];
    *(_OWORD *)(a1 + 768) = v31;
    v32 = *(_OWORD *)&__dst[720];
    *(_OWORD *)(a1 + 720) = *(_OWORD *)&__dst[704];
    *(_OWORD *)(a1 + 736) = v32;
    v33 = *(_OWORD *)&__dst[688];
    *(_OWORD *)(a1 + 688) = *(_OWORD *)&__dst[672];
    *(_OWORD *)(a1 + 704) = v33;
    v34 = *(_OWORD *)&__dst[656];
    *(_OWORD *)(a1 + 656) = *(_OWORD *)&__dst[640];
    *(_OWORD *)(a1 + 672) = v34;
    v35 = *(_OWORD *)&__dst[624];
    *(_OWORD *)(a1 + 624) = *(_OWORD *)&__dst[608];
    *(_OWORD *)(a1 + 640) = v35;
    v36 = *(_OWORD *)&__dst[592];
    *(_OWORD *)(a1 + 592) = *(_OWORD *)&__dst[576];
    *(_OWORD *)(a1 + 608) = v36;
    v37 = *(_OWORD *)&__dst[560];
    *(_OWORD *)(a1 + 560) = *(_OWORD *)&__dst[544];
    *(_OWORD *)(a1 + 576) = v37;
    v38 = *(_OWORD *)&__dst[528];
    *(_OWORD *)(a1 + 528) = *(_OWORD *)&__dst[512];
    *(_OWORD *)(a1 + 544) = v38;
    v39 = *(_OWORD *)&__dst[496];
    *(_OWORD *)(a1 + 496) = *(_OWORD *)&__dst[480];
    *(_OWORD *)(a1 + 512) = v39;
    v40 = *(_OWORD *)&__dst[464];
    *(_OWORD *)(a1 + 464) = *(_OWORD *)&__dst[448];
    *(_OWORD *)(a1 + 480) = v40;
    v41 = *(_OWORD *)&__dst[432];
    *(_OWORD *)(a1 + 432) = *(_OWORD *)&__dst[416];
    *(_OWORD *)(a1 + 448) = v41;
    v42 = *(_OWORD *)&__dst[400];
    *(_OWORD *)(a1 + 400) = *(_OWORD *)&__dst[384];
    *(_OWORD *)(a1 + 416) = v42;
    v43 = *(_OWORD *)&__dst[368];
    *(_OWORD *)(a1 + 368) = *(_OWORD *)&__dst[352];
    *(_OWORD *)(a1 + 384) = v43;
    v44 = *(_OWORD *)&__dst[336];
    *(_OWORD *)(a1 + 336) = *(_OWORD *)&__dst[320];
    *(_OWORD *)(a1 + 352) = v44;
    v45 = *(_OWORD *)&__dst[304];
    *(_OWORD *)(a1 + 304) = *(_OWORD *)&__dst[288];
    *(_OWORD *)(a1 + 320) = v45;
    v46 = *(_OWORD *)&__dst[272];
    *(_OWORD *)(a1 + 272) = *(_OWORD *)&__dst[256];
    *(_OWORD *)(a1 + 288) = v46;
    v47 = *(_OWORD *)&__dst[240];
    *(_OWORD *)(a1 + 240) = *(_OWORD *)&__dst[224];
    *(_OWORD *)(a1 + 256) = v47;
    v48 = *(_OWORD *)&__dst[208];
    *(_OWORD *)(a1 + 208) = *(_OWORD *)&__dst[192];
    *(_OWORD *)(a1 + 224) = v48;
    v49 = *(_OWORD *)&__dst[176];
    *(_OWORD *)(a1 + 176) = *(_OWORD *)&__dst[160];
    *(_OWORD *)(a1 + 192) = v49;
    v50 = *(_OWORD *)&__dst[144];
    *(_OWORD *)(a1 + 144) = *(_OWORD *)&__dst[128];
    *(_OWORD *)(a1 + 160) = v50;
    v51 = *(_OWORD *)&__dst[112];
    *(_OWORD *)(a1 + 112) = *(_OWORD *)&__dst[96];
    *(_OWORD *)(a1 + 128) = v51;
    v52 = *(_OWORD *)&__dst[80];
    *(_OWORD *)(a1 + 80) = *(_OWORD *)&__dst[64];
    *(_OWORD *)(a1 + 96) = v52;
    v53 = *(_OWORD *)&__dst[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&__dst[32];
    *(_OWORD *)(a1 + 64) = v53;
    result = *(float64x2_t *)__dst;
    v54 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 32) = v54;
    v19 += 120;
    ++v18;
  }
  while (v19 != 1800);
  return result;
}

void sub_20F4CF2C4()
{
  _BYTE *v0;
  const void *v1;
  _BYTE v2[1800];

  v0 = (_BYTE *)MEMORY[0x24BDAC7A8]();
  memcpy(v2, v1, sizeof(v2));
  sub_20F4D517C();
  v0[8] = 0;
  v0[1816] = 0;
  memset_pattern16(v0 + 16, &unk_210315390, 0x708uLL);
}

double sub_20F4D3C54(double *a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double result;

  v2 = *(double **)(a2 + 8);
  v3 = **(double ***)a2;
  v4 = **(double ***)(*(_QWORD *)a2 + 8);
  *a1 = *v3 * *v4 * *v2;
  a1[1] = v3[1] * *v4 * v2[1];
  a1[2] = v3[2] * *v4 * v2[2];
  a1[3] = v3[3] * *v4 * v2[3];
  a1[4] = v3[4] * *v4 * v2[4];
  a1[5] = v3[5] * *v4 * v2[5];
  a1[6] = v3[6] * *v4 * v2[6];
  a1[7] = v3[7] * *v4 * v2[7];
  a1[8] = v3[8] * *v4 * v2[8];
  a1[9] = v3[9] * *v4 * v2[9];
  a1[10] = v3[10] * *v4 * v2[10];
  a1[11] = v3[11] * *v4 * v2[11];
  a1[12] = v3[12] * *v4 * v2[12];
  a1[13] = v3[13] * *v4 * v2[13];
  a1[14] = v3[14] * *v4 * v2[14];
  a1[15] = v3[15] * v4[1] * *v2;
  a1[16] = v3[16] * v4[1] * v2[1];
  a1[17] = v3[17] * v4[1] * v2[2];
  a1[18] = v3[18] * v4[1] * v2[3];
  a1[19] = v3[19] * v4[1] * v2[4];
  a1[20] = v3[20] * v4[1] * v2[5];
  a1[21] = v3[21] * v4[1] * v2[6];
  a1[22] = v3[22] * v4[1] * v2[7];
  a1[23] = v3[23] * v4[1] * v2[8];
  a1[24] = v3[24] * v4[1] * v2[9];
  a1[25] = v3[25] * v4[1] * v2[10];
  a1[26] = v3[26] * v4[1] * v2[11];
  a1[27] = v3[27] * v4[1] * v2[12];
  a1[28] = v3[28] * v4[1] * v2[13];
  a1[29] = v3[29] * v4[1] * v2[14];
  a1[30] = v3[30] * v4[2] * *v2;
  a1[31] = v3[31] * v4[2] * v2[1];
  a1[32] = v3[32] * v4[2] * v2[2];
  a1[33] = v3[33] * v4[2] * v2[3];
  a1[34] = v3[34] * v4[2] * v2[4];
  a1[35] = v3[35] * v4[2] * v2[5];
  a1[36] = v3[36] * v4[2] * v2[6];
  a1[37] = v3[37] * v4[2] * v2[7];
  a1[38] = v3[38] * v4[2] * v2[8];
  a1[39] = v3[39] * v4[2] * v2[9];
  a1[40] = v3[40] * v4[2] * v2[10];
  a1[41] = v3[41] * v4[2] * v2[11];
  a1[42] = v3[42] * v4[2] * v2[12];
  a1[43] = v3[43] * v4[2] * v2[13];
  a1[44] = v3[44] * v4[2] * v2[14];
  a1[45] = v3[45] * v4[3] * *v2;
  a1[46] = v3[46] * v4[3] * v2[1];
  a1[47] = v3[47] * v4[3] * v2[2];
  a1[48] = v3[48] * v4[3] * v2[3];
  a1[49] = v3[49] * v4[3] * v2[4];
  a1[50] = v3[50] * v4[3] * v2[5];
  a1[51] = v3[51] * v4[3] * v2[6];
  a1[52] = v3[52] * v4[3] * v2[7];
  a1[53] = v3[53] * v4[3] * v2[8];
  a1[54] = v3[54] * v4[3] * v2[9];
  a1[55] = v3[55] * v4[3] * v2[10];
  a1[56] = v3[56] * v4[3] * v2[11];
  a1[57] = v3[57] * v4[3] * v2[12];
  a1[58] = v3[58] * v4[3] * v2[13];
  a1[59] = v3[59] * v4[3] * v2[14];
  a1[60] = v3[60] * v4[4] * *v2;
  a1[61] = v3[61] * v4[4] * v2[1];
  a1[62] = v3[62] * v4[4] * v2[2];
  a1[63] = v3[63] * v4[4] * v2[3];
  a1[64] = v3[64] * v4[4] * v2[4];
  a1[65] = v3[65] * v4[4] * v2[5];
  a1[66] = v3[66] * v4[4] * v2[6];
  a1[67] = v3[67] * v4[4] * v2[7];
  a1[68] = v3[68] * v4[4] * v2[8];
  a1[69] = v3[69] * v4[4] * v2[9];
  a1[70] = v3[70] * v4[4] * v2[10];
  a1[71] = v3[71] * v4[4] * v2[11];
  a1[72] = v3[72] * v4[4] * v2[12];
  a1[73] = v3[73] * v4[4] * v2[13];
  a1[74] = v3[74] * v4[4] * v2[14];
  a1[75] = v3[75] * v4[5] * *v2;
  a1[76] = v3[76] * v4[5] * v2[1];
  a1[77] = v3[77] * v4[5] * v2[2];
  a1[78] = v3[78] * v4[5] * v2[3];
  a1[79] = v3[79] * v4[5] * v2[4];
  a1[80] = v3[80] * v4[5] * v2[5];
  a1[81] = v3[81] * v4[5] * v2[6];
  a1[82] = v3[82] * v4[5] * v2[7];
  a1[83] = v3[83] * v4[5] * v2[8];
  a1[84] = v3[84] * v4[5] * v2[9];
  a1[85] = v3[85] * v4[5] * v2[10];
  a1[86] = v3[86] * v4[5] * v2[11];
  a1[87] = v3[87] * v4[5] * v2[12];
  a1[88] = v3[88] * v4[5] * v2[13];
  a1[89] = v3[89] * v4[5] * v2[14];
  a1[90] = v3[90] * v4[6] * *v2;
  a1[91] = v3[91] * v4[6] * v2[1];
  a1[92] = v3[92] * v4[6] * v2[2];
  a1[93] = v3[93] * v4[6] * v2[3];
  a1[94] = v3[94] * v4[6] * v2[4];
  a1[95] = v3[95] * v4[6] * v2[5];
  a1[96] = v3[96] * v4[6] * v2[6];
  a1[97] = v3[97] * v4[6] * v2[7];
  a1[98] = v3[98] * v4[6] * v2[8];
  a1[99] = v3[99] * v4[6] * v2[9];
  a1[100] = v3[100] * v4[6] * v2[10];
  a1[101] = v3[101] * v4[6] * v2[11];
  a1[102] = v3[102] * v4[6] * v2[12];
  a1[103] = v3[103] * v4[6] * v2[13];
  a1[104] = v3[104] * v4[6] * v2[14];
  a1[105] = v3[105] * v4[7] * *v2;
  a1[106] = v3[106] * v4[7] * v2[1];
  a1[107] = v3[107] * v4[7] * v2[2];
  a1[108] = v3[108] * v4[7] * v2[3];
  a1[109] = v3[109] * v4[7] * v2[4];
  a1[110] = v3[110] * v4[7] * v2[5];
  a1[111] = v3[111] * v4[7] * v2[6];
  a1[112] = v3[112] * v4[7] * v2[7];
  a1[113] = v3[113] * v4[7] * v2[8];
  a1[114] = v3[114] * v4[7] * v2[9];
  a1[115] = v3[115] * v4[7] * v2[10];
  a1[116] = v3[116] * v4[7] * v2[11];
  a1[117] = v3[117] * v4[7] * v2[12];
  a1[118] = v3[118] * v4[7] * v2[13];
  a1[119] = v3[119] * v4[7] * v2[14];
  a1[120] = v3[120] * v4[8] * *v2;
  a1[121] = v3[121] * v4[8] * v2[1];
  a1[122] = v3[122] * v4[8] * v2[2];
  a1[123] = v3[123] * v4[8] * v2[3];
  a1[124] = v3[124] * v4[8] * v2[4];
  a1[125] = v3[125] * v4[8] * v2[5];
  a1[126] = v3[126] * v4[8] * v2[6];
  a1[127] = v3[127] * v4[8] * v2[7];
  a1[128] = v3[128] * v4[8] * v2[8];
  a1[129] = v3[129] * v4[8] * v2[9];
  a1[130] = v3[130] * v4[8] * v2[10];
  a1[131] = v3[131] * v4[8] * v2[11];
  a1[132] = v3[132] * v4[8] * v2[12];
  a1[133] = v3[133] * v4[8] * v2[13];
  a1[134] = v3[134] * v4[8] * v2[14];
  a1[135] = v3[135] * v4[9] * *v2;
  a1[136] = v3[136] * v4[9] * v2[1];
  a1[137] = v3[137] * v4[9] * v2[2];
  a1[138] = v3[138] * v4[9] * v2[3];
  a1[139] = v3[139] * v4[9] * v2[4];
  a1[140] = v3[140] * v4[9] * v2[5];
  a1[141] = v3[141] * v4[9] * v2[6];
  a1[142] = v3[142] * v4[9] * v2[7];
  a1[143] = v3[143] * v4[9] * v2[8];
  a1[144] = v3[144] * v4[9] * v2[9];
  a1[145] = v3[145] * v4[9] * v2[10];
  a1[146] = v3[146] * v4[9] * v2[11];
  a1[147] = v3[147] * v4[9] * v2[12];
  a1[148] = v3[148] * v4[9] * v2[13];
  a1[149] = v3[149] * v4[9] * v2[14];
  a1[150] = v3[150] * v4[10] * *v2;
  a1[151] = v3[151] * v4[10] * v2[1];
  a1[152] = v3[152] * v4[10] * v2[2];
  a1[153] = v3[153] * v4[10] * v2[3];
  a1[154] = v3[154] * v4[10] * v2[4];
  a1[155] = v3[155] * v4[10] * v2[5];
  a1[156] = v3[156] * v4[10] * v2[6];
  a1[157] = v3[157] * v4[10] * v2[7];
  a1[158] = v3[158] * v4[10] * v2[8];
  a1[159] = v3[159] * v4[10] * v2[9];
  a1[160] = v3[160] * v4[10] * v2[10];
  a1[161] = v3[161] * v4[10] * v2[11];
  a1[162] = v3[162] * v4[10] * v2[12];
  a1[163] = v3[163] * v4[10] * v2[13];
  a1[164] = v3[164] * v4[10] * v2[14];
  a1[165] = v3[165] * v4[11] * *v2;
  a1[166] = v3[166] * v4[11] * v2[1];
  a1[167] = v3[167] * v4[11] * v2[2];
  a1[168] = v3[168] * v4[11] * v2[3];
  a1[169] = v3[169] * v4[11] * v2[4];
  a1[170] = v3[170] * v4[11] * v2[5];
  a1[171] = v3[171] * v4[11] * v2[6];
  a1[172] = v3[172] * v4[11] * v2[7];
  a1[173] = v3[173] * v4[11] * v2[8];
  a1[174] = v3[174] * v4[11] * v2[9];
  a1[175] = v3[175] * v4[11] * v2[10];
  a1[176] = v3[176] * v4[11] * v2[11];
  a1[177] = v3[177] * v4[11] * v2[12];
  a1[178] = v3[178] * v4[11] * v2[13];
  a1[179] = v3[179] * v4[11] * v2[14];
  a1[180] = v3[180] * v4[12] * *v2;
  a1[181] = v3[181] * v4[12] * v2[1];
  a1[182] = v3[182] * v4[12] * v2[2];
  a1[183] = v3[183] * v4[12] * v2[3];
  a1[184] = v3[184] * v4[12] * v2[4];
  a1[185] = v3[185] * v4[12] * v2[5];
  a1[186] = v3[186] * v4[12] * v2[6];
  a1[187] = v3[187] * v4[12] * v2[7];
  a1[188] = v3[188] * v4[12] * v2[8];
  a1[189] = v3[189] * v4[12] * v2[9];
  a1[190] = v3[190] * v4[12] * v2[10];
  a1[191] = v3[191] * v4[12] * v2[11];
  a1[192] = v3[192] * v4[12] * v2[12];
  a1[193] = v3[193] * v4[12] * v2[13];
  a1[194] = v3[194] * v4[12] * v2[14];
  a1[195] = v3[195] * v4[13] * *v2;
  a1[196] = v3[196] * v4[13] * v2[1];
  a1[197] = v3[197] * v4[13] * v2[2];
  a1[198] = v3[198] * v4[13] * v2[3];
  a1[199] = v3[199] * v4[13] * v2[4];
  a1[200] = v3[200] * v4[13] * v2[5];
  a1[201] = v3[201] * v4[13] * v2[6];
  a1[202] = v3[202] * v4[13] * v2[7];
  a1[203] = v3[203] * v4[13] * v2[8];
  a1[204] = v3[204] * v4[13] * v2[9];
  a1[205] = v3[205] * v4[13] * v2[10];
  a1[206] = v3[206] * v4[13] * v2[11];
  a1[207] = v3[207] * v4[13] * v2[12];
  a1[208] = v3[208] * v4[13] * v2[13];
  a1[209] = v3[209] * v4[13] * v2[14];
  a1[210] = v3[210] * v4[14] * *v2;
  a1[211] = v3[211] * v4[14] * v2[1];
  a1[212] = v3[212] * v4[14] * v2[2];
  a1[213] = v3[213] * v4[14] * v2[3];
  a1[214] = v3[214] * v4[14] * v2[4];
  a1[215] = v3[215] * v4[14] * v2[5];
  a1[216] = v3[216] * v4[14] * v2[6];
  a1[217] = v3[217] * v4[14] * v2[7];
  a1[218] = v3[218] * v4[14] * v2[8];
  a1[219] = v3[219] * v4[14] * v2[9];
  a1[220] = v3[220] * v4[14] * v2[10];
  a1[221] = v3[221] * v4[14] * v2[11];
  a1[222] = v3[222] * v4[14] * v2[12];
  a1[223] = v3[223] * v4[14] * v2[13];
  result = v3[224] * v4[14] * v2[14];
  a1[224] = result;
  return result;
}

uint64_t sub_20F4D517C()
{
  _BOOL4 *v0;
  uint64_t result;
  _BOOL4 v2;
  int v3;
  void *v4;

  v0 = (_BOOL4 *)MEMORY[0x24BDAC7A8]();
  result = sub_20E8BE9F4();
  if ((_DWORD)result)
  {
    v2 = 1;
  }
  else
  {
    if ((int)0.0 > 0x3C0)
    {
      v4 = operator new((8 * (int)0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v3 = sub_20E8BE9F4();
      result = MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
    }
    else
    {
      result = sub_20E8BE9F4();
      v3 = result;
    }
    v2 = v3 != 0;
  }
  *v0 = v2;
  return result;
}

void sub_20F4D5298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double sub_20F4D52BC(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double result;

  *(double *)a1 = **a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v2 = *a2;
  *(double *)(a1 + 120) = (*a2)[15];
  *(double *)(a1 + 128) = v2[16];
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v3 = *a2;
  *(double *)(a1 + 240) = (*a2)[30];
  *(double *)(a1 + 248) = v3[31];
  *(double *)(a1 + 256) = v3[32];
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v4 = *a2;
  *(double *)(a1 + 360) = (*a2)[45];
  *(double *)(a1 + 368) = v4[46];
  *(double *)(a1 + 376) = v4[47];
  *(double *)(a1 + 384) = v4[48];
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  v5 = *a2;
  *(double *)(a1 + 480) = (*a2)[60];
  *(double *)(a1 + 488) = v5[61];
  *(double *)(a1 + 496) = v5[62];
  *(double *)(a1 + 504) = v5[63];
  *(double *)(a1 + 512) = v5[64];
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  v6 = *a2;
  *(double *)(a1 + 600) = (*a2)[75];
  *(double *)(a1 + 608) = v6[76];
  *(double *)(a1 + 616) = v6[77];
  *(double *)(a1 + 624) = v6[78];
  *(double *)(a1 + 632) = v6[79];
  *(double *)(a1 + 640) = v6[80];
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  v7 = *a2;
  *(double *)(a1 + 720) = (*a2)[90];
  *(double *)(a1 + 728) = v7[91];
  *(double *)(a1 + 736) = v7[92];
  *(double *)(a1 + 744) = v7[93];
  *(double *)(a1 + 752) = v7[94];
  *(double *)(a1 + 760) = v7[95];
  *(double *)(a1 + 768) = v7[96];
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  v8 = *a2;
  *(double *)(a1 + 840) = (*a2)[105];
  *(double *)(a1 + 848) = v8[106];
  *(double *)(a1 + 856) = v8[107];
  *(double *)(a1 + 864) = v8[108];
  *(double *)(a1 + 872) = v8[109];
  *(double *)(a1 + 880) = v8[110];
  *(double *)(a1 + 888) = v8[111];
  *(double *)(a1 + 896) = v8[112];
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  v9 = *a2;
  *(double *)(a1 + 960) = (*a2)[120];
  *(double *)(a1 + 968) = v9[121];
  *(double *)(a1 + 976) = v9[122];
  *(double *)(a1 + 984) = v9[123];
  *(double *)(a1 + 992) = v9[124];
  *(double *)(a1 + 1000) = v9[125];
  *(double *)(a1 + 1008) = v9[126];
  *(double *)(a1 + 1016) = v9[127];
  *(double *)(a1 + 1024) = v9[128];
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  v10 = *a2;
  *(double *)(a1 + 1080) = (*a2)[135];
  *(double *)(a1 + 1088) = v10[136];
  *(double *)(a1 + 1096) = v10[137];
  *(double *)(a1 + 1104) = v10[138];
  *(double *)(a1 + 1112) = v10[139];
  *(double *)(a1 + 1120) = v10[140];
  *(double *)(a1 + 1128) = v10[141];
  *(double *)(a1 + 1136) = v10[142];
  *(double *)(a1 + 1144) = v10[143];
  *(double *)(a1 + 1152) = v10[144];
  *(_QWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  v11 = *a2;
  *(double *)(a1 + 1200) = (*a2)[150];
  *(double *)(a1 + 1208) = v11[151];
  *(double *)(a1 + 1216) = v11[152];
  *(double *)(a1 + 1224) = v11[153];
  *(double *)(a1 + 1232) = v11[154];
  *(double *)(a1 + 1240) = v11[155];
  *(double *)(a1 + 1248) = v11[156];
  *(double *)(a1 + 1256) = v11[157];
  *(double *)(a1 + 1264) = v11[158];
  *(double *)(a1 + 1272) = v11[159];
  *(double *)(a1 + 1280) = v11[160];
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(double *)(a1 + 1320) = v11[165];
  *(double *)(a1 + 1328) = v11[166];
  *(double *)(a1 + 1336) = v11[167];
  *(double *)(a1 + 1344) = v11[168];
  *(double *)(a1 + 1352) = v11[169];
  *(double *)(a1 + 1360) = v11[170];
  *(double *)(a1 + 1368) = v11[171];
  *(double *)(a1 + 1376) = v11[172];
  *(double *)(a1 + 1384) = v11[173];
  *(double *)(a1 + 1392) = v11[174];
  *(double *)(a1 + 1400) = v11[175];
  *(double *)(a1 + 1408) = v11[176];
  *(_QWORD *)(a1 + 1416) = 0;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(double *)(a1 + 1440) = v11[180];
  *(double *)(a1 + 1448) = v11[181];
  *(double *)(a1 + 1456) = v11[182];
  *(double *)(a1 + 1464) = v11[183];
  *(double *)(a1 + 1472) = v11[184];
  *(double *)(a1 + 1480) = v11[185];
  *(double *)(a1 + 1488) = v11[186];
  *(double *)(a1 + 1496) = v11[187];
  *(double *)(a1 + 1504) = v11[188];
  *(double *)(a1 + 1512) = v11[189];
  *(double *)(a1 + 1520) = v11[190];
  *(double *)(a1 + 1528) = v11[191];
  *(double *)(a1 + 1536) = v11[192];
  *(_OWORD *)(a1 + 1544) = 0u;
  *(double *)(a1 + 1560) = v11[195];
  *(double *)(a1 + 1568) = v11[196];
  *(double *)(a1 + 1576) = v11[197];
  *(double *)(a1 + 1584) = v11[198];
  *(double *)(a1 + 1592) = v11[199];
  *(double *)(a1 + 1600) = v11[200];
  *(double *)(a1 + 1608) = v11[201];
  *(double *)(a1 + 1616) = v11[202];
  *(double *)(a1 + 1624) = v11[203];
  *(double *)(a1 + 1632) = v11[204];
  *(double *)(a1 + 1640) = v11[205];
  *(double *)(a1 + 1648) = v11[206];
  *(double *)(a1 + 1656) = v11[207];
  *(double *)(a1 + 1664) = v11[208];
  *(_QWORD *)(a1 + 1672) = 0;
  *(double *)(a1 + 1680) = v11[210];
  *(double *)(a1 + 1688) = v11[211];
  *(double *)(a1 + 1696) = v11[212];
  *(double *)(a1 + 1704) = v11[213];
  *(double *)(a1 + 1712) = v11[214];
  *(double *)(a1 + 1720) = v11[215];
  *(double *)(a1 + 1728) = v11[216];
  *(double *)(a1 + 1736) = v11[217];
  *(double *)(a1 + 1744) = v11[218];
  *(double *)(a1 + 1752) = v11[219];
  *(double *)(a1 + 1760) = v11[220];
  *(double *)(a1 + 1768) = v11[221];
  *(double *)(a1 + 1776) = v11[222];
  *(double *)(a1 + 1784) = v11[223];
  result = v11[224];
  *(double *)(a1 + 1792) = result;
  return result;
}

uint64_t sub_20F4D577C(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D5B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D5B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D5B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

__n128 sub_20F4D5B6C(_QWORD *a1)
{
  float64x2_t *v1;
  float64x2_t *v2;
  __n128 result;
  float64x2_t v4;

  v1 = (float64x2_t *)a1[1];
  v2 = *(float64x2_t **)(*a1 + 32);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*v1), (int32x4_t)vcgtzq_f64(v1[1]))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  result = *(__n128 *)v1;
  v4 = v1[1];
  *v2 = *v1;
  v2[1] = v4;
  return result;
}

uint64_t sub_20F4D5BF0(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D5F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D5FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D5FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4D5FE0(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D6374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D6398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D63AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4D63D0(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D6764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D6788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D679C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4D67C0(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D6B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D6B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D6B8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4D6BB0(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D6F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D6F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D6F7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

BOOL sub_20F4D6FA0(double **a1)
{
  double *v1;
  double *v2;

  v1 = *a1;
  v2 = a1[1];
  if (**a1 != *v2)
    return 1;
  if (v1[1] != v2[1])
    return 1;
  if (v1[2] != v2[2])
    return 1;
  if (v1[3] != v2[3])
    return 1;
  if (v1[4] != v2[4])
    return 1;
  if (v1[5] != v2[5])
    return 1;
  if (v1[6] != v2[6])
    return 1;
  if (v1[7] != v2[7])
    return 1;
  if (v1[8] != v2[8])
    return 1;
  if (v1[9] != v2[9])
    return 1;
  if (v1[10] != v2[10])
    return 1;
  if (v1[11] != v2[11])
    return 1;
  if (v1[12] != v2[12])
    return 1;
  if (v1[13] == v2[13])
    return v1[14] != v2[14];
  return 1;
}

uint64_t sub_20F4D7114(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D74A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D74CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D74E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4D7504(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F4D7898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D78BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4D78D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

__n128 sub_20F4D78F4(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, float64x2_t _Q6)
{
  __int128 v15;
  __int128 v17;
  __int128 v18;
  double v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  double v47;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  float64x2_t v52;
  int64x2_t v56;
  int64x2_t v57;
  double v58;
  float64x2_t v60;
  float64x2_t v61;
  int8x16_t v62;
  double v63;
  float64x2_t v65;
  float64x2_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v74;
  __n128 result;
  __int128 v76;
  _OWORD v78[7];
  float64_t v79;
  uint64_t v80;
  _OWORD v81[7];
  uint64_t v82;
  uint64_t v83;
  _OWORD v84[7];
  uint64_t v85;
  float64x2_t *v86;
  int v87;
  float64x2_t *v88;
  int v89;
  float64x2_t *v90;
  int v91;
  float64x2_t *v92;
  int v93;
  float64x2_t *v94;
  int v95;
  float64x2_t *v96;
  int v97;

  if (a2 != a3)
  {
    _X22 = a2;
    do
    {
      v37 = *(_QWORD *)(a4 + 8);
      v38 = (_OWORD *)(_X22 + 5176);
      __asm { PRFM            #0, [X22,#0x2878] }
      v40 = *(_QWORD *)(_X22 + 5024);
      v41 = *(_QWORD *)(_X22 + 5032);
      v42 = *(_QWORD *)(_X22 + 5040);
      v43 = *(_QWORD *)(_X22 + 5048);
      v96 = (float64x2_t *)(v41 + 56);
      v97 = 3;
      v94 = (float64x2_t *)(v41 + 80);
      v95 = 6;
      v92 = (float64x2_t *)(v43 + 56);
      v93 = 3;
      v90 = (float64x2_t *)(v43 + 80);
      v91 = 6;
      v88 = (float64x2_t *)(v41 + 32);
      v89 = 0;
      v86 = (float64x2_t *)(v43 + 32);
      v87 = 0;
      v44.f64[0] = *(float64_t *)(v40 + 48);
      v45 = *(int64x2_t *)(v40 + 32);
      v46 = *(int64x2_t *)(v40 + 56);
      v47 = *(double *)(v40 + 96);
      _Q4 = *(int64x2_t *)(v40 + 80);
      v49 = (float64x2_t)vzip1q_s64(v45, v46);
      v50 = (float64x2_t)vzip2q_s64(v45, v46);
      v44.f64[1] = *(float64_t *)(v40 + 72);
      v51 = vextq_s8((int8x16_t)v50, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      _Q6.f64[0] = *(float64_t *)(v40 + 120);
      v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, *(double *)(v40 + 104)), v50, *(float64x2_t *)(v40 + 104), 1), v44, _Q6.f64[0]);
      _D7 = *(_QWORD *)(v40 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q6.f64[0] = _D17 + v47 * _Q6.f64[0];
      _Q7 = vnegq_f64(v52);
      v52.f64[0] = *(float64_t *)(v40 + 80);
      *(_QWORD *)&v50.f64[1] = v51.i64[0];
      v81[4] = v44;
      v81[5] = *(unint64_t *)&v47;
      v81[0] = v49;
      v81[1] = *(unint64_t *)&v52.f64[0];
      v81[2] = v50;
      v81[3] = v51.u64[1];
      v81[6] = _Q7;
      v82 = *(_OWORD *)&vnegq_f64(_Q6);
      v83 = 0x3FF0000000000000;
      v44.f64[0] = *(float64_t *)(v42 + 48);
      v56 = *(int64x2_t *)(v42 + 32);
      v57 = *(int64x2_t *)(v42 + 56);
      v58 = *(double *)(v42 + 96);
      _Q4 = *(int64x2_t *)(v42 + 80);
      v60 = (float64x2_t)vzip1q_s64(v56, v57);
      v61 = (float64x2_t)vzip2q_s64(v56, v57);
      v44.f64[1] = *(float64_t *)(v42 + 72);
      v62 = vextq_s8((int8x16_t)v61, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v63 = *(double *)(v42 + 120);
      _Q7.f64[0] = *(float64_t *)(v42 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q7.f64[0] = *(float64_t *)(v42 + 80);
      v65 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, *(double *)(v42 + 104)), v61, *(float64x2_t *)(v42 + 104), 1), v44, v63));
      *(_QWORD *)&v52.f64[0] = v62.i64[1];
      *(_QWORD *)&v61.f64[1] = v62.i64[0];
      v66 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v58 * v63));
      v78[4] = v44;
      v78[5] = *(unint64_t *)&v58;
      v78[0] = v60;
      v78[1] = *(unint64_t *)&_Q7.f64[0];
      v78[2] = v61;
      v78[3] = *(unint64_t *)&v52.f64[0];
      v78[6] = v65;
      v79 = v66.f64[0];
      v80 = 0x3FF0000000000000;
      sub_20F4D7C54(_X22 + 1840, (uint64_t)v81, (uint64_t)v78, &v88, &v86, &v96, &v92, &v94, (uint64_t)v84, (float64x2_t)0, v66, (__n128)*(unint64_t *)&_Q7.f64[0], &v90, 0, 0, 0, 0);
      v67 = v84[0];
      v68 = v84[1];
      v69 = v84[2];
      *(_OWORD *)(_X22 + 5224) = v84[3];
      *(_OWORD *)(_X22 + 5208) = v69;
      *(_OWORD *)(_X22 + 5192) = v68;
      *(_OWORD *)(_X22 + 5176) = v67;
      v70 = v84[4];
      v71 = v84[5];
      v72 = v84[6];
      *(_QWORD *)(_X22 + 5288) = v85;
      *(_OWORD *)(_X22 + 5272) = v72;
      *(_OWORD *)(_X22 + 5256) = v71;
      *(_OWORD *)(_X22 + 5240) = v70;
      *(_BYTE *)(_X22 + 5304) = 1;
      __asm { PRFM            #0, [X22,#0x2998] }
      v74 = *(_QWORD *)(_X22 + 5312);
      if (v74)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 24))(v74, _X22 + 5176);
      _X8 = _X22 + 10512;
      v15 = *(_OWORD *)(_X22 + 5256);
      *(_OWORD *)(_X22 + 5120) = *(_OWORD *)(_X22 + 5240);
      *(_OWORD *)(_X22 + 5136) = v15;
      _Q2 = *(_OWORD *)(_X22 + 5256);
      *(_OWORD *)(_X22 + 5152) = *(_OWORD *)(_X22 + 5272);
      *(_QWORD *)(_X22 + 5168) = *(_QWORD *)(_X22 + 5288);
      v17 = *(_OWORD *)(_X22 + 5192);
      *(_OWORD *)(_X22 + 5056) = *v38;
      *(_OWORD *)(_X22 + 5072) = v17;
      v18 = *(_OWORD *)(_X22 + 5224);
      *(_OWORD *)(_X22 + 5088) = *(_OWORD *)(_X22 + 5208);
      *(_OWORD *)(_X22 + 5104) = v18;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(_X22 + 5192);
      _Q7 = *v38;
      _D17 = *(_QWORD *)(_X22 + 5184);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(_X22 + 5216);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(_QWORD *)(_X22 + 5232);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(_QWORD *)(_X22 + 5248);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D16, D3, V2.D[1] }
      *(_QWORD *)&_Q2 = *(_QWORD *)(_X22 + 5280);
      __asm { FMLA            D16, D2, V1.D[1] }
      v36 = *(double *)(v37 + 8) * (_D16 + *(double *)(_X22 + 5288) * *(double *)(_X22 + 5288));
      *(double *)(_X22 + 5296) = v36;
      **(double **)(a4 + 24) = **(double **)(a4 + 24) + v36;
      _X22 += 5336;
    }
    while (_X22 != a3);
  }
  result = *(__n128 *)a4;
  v76 = *(_OWORD *)(a4 + 16);
  *a1 = *(_OWORD *)a4;
  a1[1] = v76;
  return result;
}

uint64_t sub_20F4D7C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float64x2_t **a4@<X3>, float64x2_t **a5@<X4>, float64x2_t **a6@<X5>, float64x2_t **a7@<X6>, float64x2_t **a8@<X7>, uint64_t a9@<X8>, float64x2_t a10@<Q0>, float64x2_t a11@<Q2>, __n128 a12@<Q7>, float64x2_t **a13, uint64_t a14, float64x2_t *a15, uint64_t a16, float64x2_t *a17)
{
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int8x16_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t *v37;
  uint64_t v38;
  float64_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t *v43;
  float64x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  float64x2_t v57;
  float64x2_t v65;
  float64x2_t v69;
  int8x16_t v70;
  int8x16_t v71;
  double v72;
  double v73;
  float64x2_t **v74;
  float64x2_t *v75;
  uint64_t v76;
  uint64_t v77;
  float64x2_t **v78;
  float64x2_t **v79;
  __double2 v80;
  double v81;
  float64_t v82;
  float64_t v83;
  float64_t v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v93;
  float64_t v94;
  float64x2_t v96;
  float64_t v97;
  float64x2_t v98;
  float64_t v99;
  float64x2_t v100;
  float64_t v101;
  float64x2_t v102;
  float64_t v103;
  double v104;
  float64x2_t v105;
  int64x2_t v106;
  float64x2_t v108;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  uint64_t v137;
  float64x2_t v138;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t *v145;
  float64x2_t *v146;
  float64x2_t v147;
  int8x16_t v148;
  int8x16_t v149;
  float64x2_t v150;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v156;
  float64x2_t v159;
  double v161;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v360;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v534;
  float64x2_t v536;
  float64x2_t v538;
  float64x2_t v540;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v549;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v555;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  double v565;
  __double2 v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  int8x16_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  int64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  int8x16_t v588;
  float64x2_t v589;
  float64x2_t v590;
  int8x16_t v591;
  double v592;
  float64x2_t v593;
  double v594;
  int8x16_t v595;
  double v596;
  float64x2_t v597;
  float64x2_t v599;
  int8x16_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64_t v608;
  float64x2_t v609;
  float64_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v615;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t *v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v686;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v694;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v714;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v904;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v924;
  float64x2_t v926;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1009;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1028;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1298;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  float64x2_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  float64x2_t v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  float64x2_t v1356;
  float64x2_t v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t v1366;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  float64x2_t v1374;
  float64x2_t v1377;
  float64x2_t v1381;
  float64x2_t *v1382;
  float64x2_t *v1383;
  float64x2_t v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  float64x2_t v1390;
  double v1393;
  float64x2_t v1394;
  double v1396;
  float64x2_t v1397;
  double v1399;
  float64x2_t v1400;
  float64x2_t *v1401;
  float64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  float64x2_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  float64x2_t v1430;
  float64x2_t v1431;
  float64x2_t v1432;
  float64x2_t v1433;
  float64x2_t v1434;
  float64x2_t v1435;
  float64x2_t v1436;
  float64x2_t v1437;
  float64x2_t v1438;
  float64x2_t v1440;
  float64x2_t v1442;
  float64x2_t v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1448;
  float64x2_t v1450;
  float64x2_t v1451;
  float64x2_t v1452;
  float64x2_t v1453;
  float64x2_t v1454;
  float64x2_t v1455;
  float64x2_t v1456;
  float64x2_t v1457;
  float64x2_t v1458;
  float64x2_t v1459;
  float64x2_t v1460;
  float64x2_t v1461;
  float64x2_t v1462;
  float64x2_t v1463;
  float64x2_t v1464;
  float64x2_t v1465;
  float64x2_t v1466;
  float64x2_t v1469;
  float64x2_t v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  float64x2_t v1473;
  float64x2_t v1476;
  float64x2_t v1477;
  float64x2_t v1478;
  float64x2_t v1479;
  float64x2_t v1480;
  float64x2_t v1481;
  float64x2_t v1482;
  float64x2_t v1483;
  float64x2_t v1484;
  float64x2_t v1485;
  float64x2_t v1486;
  float64x2_t v1487;
  float64x2_t v1488;
  float64x2_t v1490;
  float64x2_t v1491;
  float64x2_t v1492;
  float64x2_t v1493;
  double v1494;
  float64x2_t v1495;
  float64x2_t v1496;
  float64x2_t v1497;
  float64x2_t v1499;
  float64x2_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  float64x2_t v1504;
  float64x2_t v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  float64x2_t v1516;
  float64x2_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  float64x2_t v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  float64x2_t v1555;
  float64x2_t v1556;
  float64x2_t v1557;
  float64x2_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  float64x2_t v1575;
  float64x2_t v1576;
  float64x2_t v1577;
  float64x2_t v1578;
  float64x2_t v1579;
  float64x2_t v1580;
  float64x2_t v1581;
  float64x2_t v1582;
  float64x2_t v1583;
  float64x2_t v1584;
  float64x2_t v1585;
  float64x2_t v1586;
  float64x2_t v1587;
  float64x2_t v1588;
  float64x2_t v1589;
  float64x2_t v1590;
  float64x2_t v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1595;
  float64x2_t v1596;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t v1600;
  float64x2_t v1601;
  float64x2_t v1602;
  float64x2_t v1603;
  float64x2_t v1604;
  float64x2_t v1605;
  float64x2_t v1606;
  float64x2_t v1607;
  float64x2_t v1608;
  float64x2_t v1609;
  float64x2_t v1610;
  float64x2_t v1611;
  float64x2_t v1612;
  float64x2_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  float64x2_t v1620;
  float64x2_t v1621;
  float64x2_t v1622;
  float64x2_t v1623;
  float64x2_t v1624;
  float64x2_t v1625;
  float64x2_t v1626;
  float64x2_t v1627;
  float64x2_t v1628;
  float64x2_t v1629;
  float64x2_t v1630;
  float64x2_t v1631;
  float64x2_t v1632;
  float64x2_t v1633;
  float64x2_t v1634;
  float64x2_t v1635;
  float64x2_t v1636;
  float64x2_t v1637;
  float64x2_t v1638;
  float64x2_t v1639;
  float64x2_t v1640;
  float64x2_t v1641;
  float64x2_t v1642;
  float64x2_t v1643;
  float64x2_t v1644;
  float64x2_t v1645;
  float64x2_t v1646;
  float64x2_t v1647;
  float64x2_t v1648;
  float64x2_t v1649;
  float64x2_t v1650;
  float64x2_t v1651;
  float64x2_t v1652;
  float64x2_t v1653;
  float64x2_t v1654;
  float64x2_t v1655;
  float64x2_t v1656;
  float64x2_t v1657;
  float64x2_t v1658;
  float64x2_t v1659;
  float64x2_t v1660;
  float64x2_t v1661;
  float64x2_t v1662;
  float64x2_t v1663;
  float64x2_t v1664;
  float64x2_t v1665;
  float64x2_t v1666;
  float64x2_t v1667;
  float64x2_t v1668;
  float64x2_t v1669;
  float64x2_t v1670;
  float64x2_t v1671;
  float64x2_t v1672;
  float64x2_t v1673;
  float64x2_t v1674;
  float64x2_t v1675;
  float64x2_t v1676;
  float64x2_t v1677;
  float64x2_t v1678;
  float64x2_t v1679;
  float64x2_t v1680;
  float64x2_t v1681;
  float64x2_t v1682;
  float64x2_t v1683;
  float64x2_t v1684;
  float64x2_t v1685;
  float64x2_t v1686;
  float64x2_t v1687;
  float64x2_t v1688;
  float64x2_t v1689;
  float64x2_t v1690;
  float64x2_t v1691;
  float64x2_t v1692;
  float64x2_t v1693;
  float64x2_t v1694;
  float64x2_t v1696;
  float64x2_t v1697;
  float64x2_t v1698;
  float64x2_t v1700;
  float64x2_t v1701;
  float64x2_t v1702;
  float64x2_t v1703;
  float64x2_t v1704;
  float64x2_t v1705;
  float64x2_t v1706;
  float64x2_t v1707;
  float64x2_t v1708;
  float64x2_t v1709;
  float64x2_t v1710;
  float64x2_t v1712;
  float64x2_t v1713;
  float64x2_t v1714;
  float64x2_t v1716;
  float64x2_t v1717;
  float64x2_t v1718;
  float64x2_t v1720;
  float64x2_t v1722;
  float64x2_t v1725;
  float64x2_t v1726;
  float64x2_t v1728;
  float64x2_t v1730;
  float64x2_t v1731;
  float64x2_t v1732;
  float64x2_t v1733;
  float64x2_t v1734;
  float64x2_t v1735;
  float64x2_t v1737;
  float64x2_t v1739;
  float64x2_t v1741;
  float64x2_t v1743;
  float64x2_t v1744;
  float64x2_t v1745;
  float64x2_t v1746;
  float64x2_t v1747;
  float64x2_t v1748;
  float64x2_t v1753;
  float64x2_t v1754;
  float64x2_t v1755;
  float64x2_t v1756;
  float64x2_t v1757;
  float64x2_t v1758;
  float64x2_t v1759;
  float64x2_t v1764;
  float64x2_t v1765;
  float64x2_t v1766;
  float64x2_t v1767;
  float64x2_t v1768;
  float64x2_t v1769;
  float64x2_t v1770;
  float64x2_t v1771;
  float64x2_t v1772;
  float64x2_t v1773;
  float64x2_t v1774;
  float64x2_t v1775;
  float64x2_t v1776;
  float64x2_t v1777;
  float64x2_t v1778;
  float64x2_t v1779;
  float64x2_t v1781;
  float64x2_t v1782;
  float64x2_t v1783;
  float64x2_t v1784;
  float64x2_t v1785;
  float64x2_t v1786;
  float64x2_t v1787;
  float64x2_t v1788;
  float64x2_t v1789;
  float64x2_t v1790;
  float64x2_t v1791;
  float64x2_t v1792;
  float64x2_t v1793;
  float64x2_t v1794;
  float64x2_t v1795;
  float64x2_t v1796;
  float64x2_t v1798;
  float64x2_t v1799;
  float64x2_t v1800;
  float64x2_t v1801;
  float64x2_t v1802;
  float64x2_t v1803;
  float64x2_t v1804;
  float64x2_t v1805;
  float64x2_t v1806;
  float64x2_t v1807;
  float64x2_t v1808;
  float64x2_t v1809;
  float64x2_t v1810;
  float64x2_t v1811;
  float64x2_t v1812;
  float64x2_t v1813;
  float64x2_t v1815;
  float64x2_t v1816;
  float64x2_t v1817;
  float64x2_t v1818;
  float64x2_t v1819;
  float64x2_t v1820;
  float64x2_t v1821;
  float64x2_t v1822;
  float64x2_t v1823;
  float64x2_t v1824;
  float64x2_t v1825;
  float64x2_t v1826;
  float64x2_t v1828;
  float64x2_t v1829;
  float64x2_t v1830;
  float64x2_t v1831;
  float64x2_t v1832;
  float64x2_t v1833;
  float64x2_t v1834;
  float64x2_t v1835;
  float64x2_t v1836;
  float64x2_t v1837;
  float64x2_t v1838;
  float64x2_t v1839;
  float64x2_t v1840;
  float64x2_t v1841;
  float64x2_t v1842;
  float64x2_t v1843;
  float64x2_t v1844;
  float64x2_t v1845;
  float64x2_t v1846;
  float64x2_t v1847;
  float64x2_t v1848;
  float64x2_t v1849;
  float64x2_t v1850;
  float64x2_t v1851;
  float64x2_t v1852;
  float64x2_t v1853;
  float64x2_t v1854;
  float64x2_t v1855;
  float64x2_t v1856;
  float64x2_t v1857;
  float64x2_t v1858;
  float64x2_t v1859;
  float64x2_t v1860;
  float64x2_t v1861;
  float64x2_t v1862;
  float64x2_t v1863;
  float64x2_t v1864;
  float64x2_t v1865;
  float64x2_t v1866;
  float64x2_t v1867;
  float64x2_t v1868;
  float64x2_t v1869;
  float64x2_t v1870;
  float64x2_t v1871;
  float64x2_t v1872;
  float64x2_t v1873;
  float64x2_t v1874;
  float64x2_t v1875;
  float64x2_t v1876;
  float64x2_t v1877;
  float64x2_t v1878;
  float64x2_t v1879;
  float64x2_t v1880;
  float64x2_t v1881;
  float64x2_t v1882;
  float64x2_t v1883;
  float64x2_t v1884;
  float64x2_t v1885;
  float64x2_t v1886;
  float64x2_t v1887;
  float64x2_t v1888;
  float64x2_t v1889;
  float64x2_t v1890;
  float64x2_t v1891;
  float64x2_t v1892;
  float64x2_t v1893;
  float64x2_t v1894;
  float64x2_t v1895;
  float64x2_t v1896;
  float64x2_t v1897;
  float64x2_t v1898;
  float64x2_t v1899;
  float64x2_t v1900;
  float64x2_t v1901;
  float64x2_t v1902;
  float64x2_t v1903;
  float64x2_t v1904;
  float64x2_t v1905;
  float64x2_t v1906;
  float64x2_t v1907;
  float64x2_t v1908;
  float64x2_t v1909;
  float64x2_t v1910;
  float64x2_t v1911;
  float64x2_t v1912;
  float64x2_t v1913;
  float64x2_t v1914;
  float64x2_t v1915;
  float64x2_t v1916;
  float64x2_t v1917;
  float64x2_t v1918;
  float64x2_t v1919;
  float64x2_t v1920;
  float64x2_t v1921;
  float64x2_t v1922;
  float64x2_t v1923;
  float64x2_t v1924;
  float64x2_t v1925;
  float64x2_t v1926;
  float64x2_t v1927;
  float64x2_t v1928;
  float64x2_t v1930;
  float64x2_t v1931;
  float64x2_t v1934;
  float64x2_t v1936;
  float64x2_t v1938;
  float64x2_t v1939;
  float64x2_t v1940;
  float64x2_t v1941;
  float64x2_t v1942;
  float64x2_t v1943;
  float64x2_t v1944;
  float64x2_t v1948;
  float64x2_t v1949;
  float64x2_t v1951;
  float64x2_t v1953;
  float64x2_t v1957;
  float64x2_t v1958;
  float64x2_t v1960;
  float64x2_t v1961;
  float64x2_t v1962;
  float64x2_t v1965;
  float64x2_t v1966;
  float64x2_t v1967;
  float64x2_t v1968;
  float64x2_t v1969;
  float64x2_t v1973;
  float64x2_t *v1974;
  float64x2_t v1975;
  float64x2_t v1976;
  float64x2_t v1977;
  float64x2_t v1978;
  float64x2_t v1979;
  float64x2_t v1980;
  float64x2_t v1981;
  float64x2_t v1982;
  float64x2_t v1983;
  float64x2_t v1984;
  float64x2_t v1985;
  float64x2_t v1986;
  float64x2_t v1987;
  float64x2_t v1988;
  float64x2_t v1990;
  float64x2_t v1991;
  float64x2_t v1992;
  float64x2_t v1993;
  float64x2_t v1995;
  float64x2_t v1996;
  float64x2_t v1997;
  float64x2_t v1998;
  float64x2_t v1999;
  float64x2_t v2000;
  float64x2_t v2001;
  float64x2_t v2002;
  float64x2_t v2003;
  float64x2_t v2004;
  float64x2_t v2005;
  float64x2_t v2006;
  float64x2_t v2007;
  float64x2_t v2008;
  float64x2_t v2009;
  float64x2_t v2010;
  float64x2_t v2011;
  float64x2_t v2013;
  float64x2_t v2015;
  float64x2_t v2016;
  float64x2_t v2017;
  float64x2_t v2018;
  float64x2_t v2019;
  float64x2_t v2021;
  float64x2_t v2023;
  float64x2_t v2024;
  float64x2_t v2025;
  float64x2_t v2026;
  float64x2_t v2027;
  float64x2_t v2028;
  float64x2_t v2029;
  float64x2_t v2030;
  float64x2_t v2031;
  float64x2_t v2032;
  float64x2_t v2033;
  float64x2_t v2034;
  float64x2_t v2035;
  float64x2_t v2036;
  float64x2_t v2037;
  float64x2_t v2038;
  float64x2_t v2039;
  float64x2_t v2041;
  float64x2_t v2043;
  float64x2_t v2044;
  float64x2_t v2045;
  float64x2_t v2046;
  float64x2_t v2047;
  float64x2_t v2048;
  float64x2_t v2051;
  float64x2_t v2052;
  float64x2_t v2053;
  float64x2_t v2054;
  float64x2_t v2055;
  float64x2_t v2056;
  float64x2_t v2057;
  float64x2_t v2058;
  float64x2_t v2059;
  float64x2_t v2060;
  float64x2_t v2061;
  float64x2_t v2062;
  float64x2_t v2063;
  float64x2_t v2064;
  float64x2_t v2066;
  float64x2_t v2067;
  float64x2_t v2068;
  float64x2_t v2069;
  float64x2_t v2070;
  float64x2_t v2072;
  float64x2_t v2073;
  float64x2_t v2074;
  float64x2_t v2075;
  float64x2_t v2076;
  float64x2_t v2077;
  float64x2_t v2078;
  float64x2_t v2079;
  float64x2_t v2080;
  float64x2_t v2081;
  float64x2_t v2082;
  float64x2_t v2083;
  float64x2_t v2084;
  float64x2_t v2085;
  float64x2_t v2086;
  float64x2_t v2087;
  float64x2_t v2088;
  float64x2_t v2089;
  float64x2_t v2090;
  float64x2_t v2091;
  float64x2_t v2092;
  float64x2_t v2093;
  float64x2_t v2094;
  float64x2_t v2095;
  float64x2_t v2096;
  float64x2_t v2097;
  float64x2_t v2098;
  float64x2_t v2099;
  float64x2_t v2100;
  float64x2_t v2101;
  float64x2_t v2102;
  float64x2_t v2103;
  float64x2_t v2104;
  float64x2_t v2105;
  float64x2_t v2106;
  float64x2_t v2107;
  float64x2_t v2108;
  float64x2_t v2109;
  float64x2_t v2110;
  float64x2_t v2111;
  float64x2_t v2112;
  float64x2_t v2113;
  float64x2_t v2114;
  float64x2_t v2115;
  float64x2_t v2116;
  float64x2_t v2117;
  float64x2_t v2118;
  float64x2_t v2119;
  float64x2_t v2120;
  float64x2_t v2121;
  float64x2_t v2122;
  float64x2_t v2123;
  float64x2_t v2124;
  float64x2_t v2125;
  float64x2_t v2126;
  float64x2_t v2127;
  float64x2_t v2128;
  float64x2_t v2129;
  float64x2_t v2130;
  float64x2_t v2131;
  float64x2_t v2132;
  float64x2_t v2133;
  float64x2_t v2134;
  float64x2_t v2135;
  float64x2_t v2136;
  float64x2_t v2137;
  float64x2_t v2138;
  float64x2_t v2139;
  float64x2_t v2140;
  float64x2_t v2141;
  float64x2_t v2142;
  float64x2_t v2143;
  float64x2_t v2144;
  float64x2_t v2145;
  float64x2_t v2146;
  float64x2_t v2147;
  float64x2_t v2148;
  float64x2_t v2149;
  float64x2_t v2150;
  float64x2_t v2151;
  float64x2_t v2152;
  float64x2_t v2153;
  float64x2_t v2154;
  float64x2_t v2155;
  float64x2_t v2156;
  float64x2_t v2157;
  float64x2_t v2158;
  float64x2_t v2159;
  float64x2_t v2160;
  float64x2_t v2161;
  float64x2_t v2162;
  float64x2_t v2163;
  float64x2_t v2164;
  float64x2_t v2165;
  float64x2_t v2166;
  float64x2_t v2167;
  float64x2_t v2168;
  float64x2_t v2169;
  float64x2_t v2170;
  float64x2_t v2171;
  float64x2_t v2172;
  float64x2_t v2173;
  float64x2_t v2174;
  float64x2_t v2175;
  float64x2_t v2176;
  float64x2_t v2177;
  float64x2_t v2178;
  float64x2_t v2179;
  float64x2_t v2180;
  float64x2_t v2181;
  float64x2_t v2182;
  float64x2_t v2183;
  float64x2_t v2184;
  float64x2_t v2185;
  float64x2_t v2186;
  float64x2_t v2187;
  float64x2_t v2188;
  float64x2_t v2189;
  float64x2_t v2190;
  float64x2_t v2191;
  float64x2_t v2192;
  float64x2_t v2193;
  float64x2_t v2194;
  float64x2_t v2195;
  float64x2_t v2196;
  float64x2_t v2197;
  float64x2_t v2198;
  float64x2_t v2199;
  float64x2_t v2200;
  float64x2_t v2201;
  float64x2_t v2202;
  float64x2_t v2203;
  float64x2_t v2204;
  float64x2_t v2205;
  float64x2_t v2206;
  float64x2_t v2207;
  float64x2_t v2208;
  float64x2_t v2209;
  float64x2_t v2210;
  float64x2_t v2211;
  float64x2_t v2212;
  float64x2_t v2213;
  float64x2_t v2214;
  float64x2_t v2215;
  float64x2_t v2216;
  float64x2_t v2217;
  float64x2_t v2218;
  float64x2_t v2219;
  float64x2_t v2220;
  float64x2_t v2221;
  float64x2_t v2222;
  float64x2_t v2223;
  float64x2_t v2224;
  float64x2_t v2225;
  float64x2_t v2226;
  float64x2_t v2227;
  float64x2_t v2228;
  float64x2_t v2229;
  float64x2_t v2231;
  float64x2_t v2233;
  float64x2_t v2234;
  float64x2_t v2236;
  float64x2_t v2237;
  float64x2_t v2238;
  float64x2_t v2240;
  float64x2_t v2241;
  float64x2_t v2242;
  float64x2_t v2243;
  float64x2_t v2244;
  float64x2_t v2245;
  float64x2_t v2246;
  float64x2_t v2247;
  float64x2_t v2248;
  float64x2_t v2249;
  float64x2_t v2251;
  float64x2_t v2253;
  float64x2_t v2258;
  float64x2_t v2259;
  float64x2_t v2260;
  float64x2_t v2261;
  float64x2_t v2262;
  float64x2_t v2263;
  float64x2_t v2264;
  float64x2_t v2265;
  float64x2_t v2270;
  float64x2_t v2271;
  float64x2_t v2272;
  float64x2_t v2273;
  float64x2_t v2274;
  float64x2_t v2275;
  float64x2_t v2276;
  float64x2_t v2277;
  float64x2_t v2282;
  float64x2_t v2283;
  float64x2_t v2284;
  float64x2_t v2285;
  float64x2_t v2286;
  float64x2_t v2287;
  float64x2_t v2288;
  float64x2_t v2293;
  float64x2_t v2294;
  float64x2_t v2295;
  float64x2_t v2296;
  float64x2_t v2297;
  float64x2_t v2298;
  float64x2_t v2299;
  float64x2_t v2300;
  float64x2_t v2301;
  float64x2_t v2302;
  float64x2_t v2303;
  float64x2_t v2305;
  float64x2_t v2306;
  float64x2_t v2308;
  float64x2_t v2309;
  float64x2_t v2310;
  float64x2_t v2311;
  float64x2_t v2312;
  float64x2_t v2313;
  float64x2_t v2314;
  float64x2_t v2315;
  float64x2_t v2316;
  float64x2_t v2317;
  float64x2_t v2318;
  float64x2_t v2319;
  float64x2_t v2320;
  float64x2_t v2321;
  float64x2_t v2322;
  float64x2_t v2323;
  float64x2_t v2324;
  float64x2_t v2325;
  float64x2_t v2326;
  float64x2_t v2327;
  float64x2_t v2329;
  float64x2_t v2330;
  float64x2_t v2331;
  float64x2_t v2332;
  float64x2_t v2333;
  float64x2_t v2334;
  float64x2_t v2336;
  float64x2_t v2338;
  float64x2_t v2339;
  float64x2_t v2340;
  float64x2_t v2341;
  float64x2_t v2343;
  float64x2_t v2344;
  float64x2_t v2345;
  float64x2_t v2346;
  float64x2_t v2347;
  float64x2_t v2348;
  float64x2_t v2349;
  float64x2_t v2350;
  float64x2_t v2351;
  float64x2_t v2352;
  float64x2_t v2353;
  float64x2_t v2355;
  float64x2_t v2357;
  float64x2_t v2358;
  float64x2_t v2359;
  float64x2_t v2361;
  float64x2_t v2362;
  float64x2_t v2363;
  float64x2_t v2366;
  float64x2_t v2367;
  float64x2_t v2368;
  float64x2_t v2369;
  float64x2_t v2370;
  float64x2_t v2371;
  float64x2_t v2373;
  float64x2_t v2374;
  float64x2_t v2375;
  float64x2_t v2376;
  float64x2_t v2377;
  float64x2_t v2378;
  float64x2_t v2379;
  float64x2_t v2380;
  float64x2_t v2381;
  float64x2_t v2383;
  float64x2_t v2384;
  float64x2_t v2385;
  float64x2_t v2386;
  float64x2_t v2387;
  float64x2_t v2388;
  float64x2_t v2389;
  float64x2_t v2390;
  float64x2_t v2391;
  float64x2_t v2392;
  float64x2_t v2394;
  float64x2_t v2395;
  float64x2_t v2396;
  float64x2_t v2397;
  float64x2_t v2398;
  float64x2_t v2400;
  float64x2_t v2401;
  float64x2_t v2402;
  float64x2_t v2403;
  float64x2_t v2404;
  float64x2_t v2405;
  float64x2_t v2406;
  float64x2_t v2407;
  float64x2_t v2408;
  float64x2_t v2409;
  float64x2_t v2410;
  float64x2_t v2411;
  float64x2_t v2412;
  float64x2_t v2413;
  float64x2_t v2414;
  float64x2_t v2415;
  float64x2_t v2416;
  float64x2_t v2417;
  float64x2_t v2418;
  float64x2_t v2419;
  float64x2_t v2420;
  float64x2_t v2421;
  float64x2_t v2422;
  float64x2_t v2423;
  float64x2_t v2424;
  float64x2_t v2425;
  float64x2_t v2426;
  float64x2_t v2427;
  float64x2_t v2428;
  float64x2_t v2429;
  float64x2_t v2430;
  float64x2_t v2431;
  float64x2_t v2432;
  float64x2_t v2433;
  float64x2_t v2434;
  float64x2_t v2435;
  float64x2_t v2436;
  float64x2_t v2437;
  float64x2_t v2438;
  float64x2_t v2439;
  float64x2_t v2440;
  float64x2_t v2441;
  float64x2_t v2442;
  float64x2_t v2443;
  float64x2_t v2444;
  float64x2_t v2445;
  float64x2_t v2446;
  float64x2_t v2447;
  float64x2_t v2448;
  float64x2_t v2449;
  float64x2_t v2450;
  float64x2_t v2451;
  float64x2_t v2452;
  float64x2_t v2453;
  float64x2_t v2454;
  float64x2_t v2455;
  float64x2_t v2456;
  float64x2_t v2457;
  float64x2_t v2458;
  float64x2_t v2459;
  float64x2_t v2460;
  float64x2_t v2461;
  float64x2_t v2462;
  float64x2_t v2463;
  float64x2_t v2464;
  float64x2_t v2465;
  float64x2_t v2466;
  float64x2_t v2467;
  float64x2_t v2468;
  float64x2_t v2469;
  float64x2_t v2470;
  float64x2_t v2471;
  float64x2_t v2472;
  float64x2_t v2473;
  float64x2_t v2474;
  float64x2_t v2475;
  float64x2_t v2476;
  float64x2_t v2477;
  float64x2_t v2478;
  float64x2_t v2479;
  float64x2_t v2480;
  float64x2_t v2481;
  float64x2_t v2482;
  float64x2_t v2483;
  float64x2_t v2484;
  float64x2_t v2485;
  float64x2_t v2486;
  float64x2_t v2487;
  float64x2_t v2488;
  float64x2_t v2489;
  float64x2_t v2490;
  float64x2_t v2491;
  float64x2_t v2492;
  float64x2_t v2493;
  float64x2_t v2494;
  float64x2_t v2495;
  float64x2_t v2496;
  float64x2_t v2497;
  float64x2_t v2498;
  float64x2_t v2499;
  float64x2_t v2500;
  float64x2_t v2501;
  float64x2_t v2502;
  float64x2_t v2503;
  float64x2_t v2504;
  float64x2_t v2505;
  float64x2_t v2506;
  float64x2_t v2507;
  float64x2_t v2508;
  float64x2_t v2509;
  float64x2_t v2510;
  float64x2_t v2511;
  float64x2_t v2512;
  float64x2_t v2513;
  float64x2_t v2514;
  float64x2_t v2515;
  float64x2_t v2516;
  float64x2_t v2517;
  float64x2_t v2518;
  float64x2_t v2519;
  float64x2_t v2520;
  float64x2_t v2521;
  float64x2_t v2522;
  float64x2_t v2523;
  float64x2_t v2524;
  float64x2_t v2525;
  float64x2_t v2526;
  float64x2_t v2527;
  float64x2_t v2528;
  float64x2_t v2529;
  float64x2_t v2530;
  float64x2_t v2531;
  float64x2_t v2532;
  float64x2_t v2533;
  float64x2_t v2534;
  float64x2_t v2535;
  float64x2_t v2536;
  float64x2_t v2537;
  float64x2_t v2538;
  float64x2_t v2539;
  float64x2_t v2540;
  float64x2_t v2541;
  float64x2_t v2542;
  float64x2_t v2543;
  float64x2_t v2544;
  float64x2_t v2545;
  float64x2_t v2546;
  float64x2_t v2547;
  float64x2_t v2548;
  float64x2_t v2549;
  float64x2_t v2550;
  float64x2_t v2551;
  float64x2_t v2552;
  float64x2_t v2553;
  float64x2_t v2554;
  float64x2_t v2555;
  float64x2_t v2556;
  float64x2_t v2557;
  float64x2_t v2558;
  float64x2_t v2559;
  float64x2_t v2560;
  float64x2_t v2561;
  float64x2_t v2562;
  float64x2_t v2563;
  float64x2_t v2564;
  float64x2_t v2565;
  float64x2_t v2566;
  float64x2_t v2567;
  float64x2_t v2568;
  float64x2_t v2569;
  float64x2_t v2570;
  float64x2_t v2571;
  float64x2_t v2572;
  float64x2_t v2573;
  float64x2_t v2574;
  float64x2_t v2575;
  float64x2_t v2576;
  float64x2_t v2577;
  float64x2_t v2578;
  float64x2_t v2579;
  float64x2_t v2580;
  float64x2_t v2581;
  float64x2_t v2582;
  float64x2_t v2583;
  float64x2_t v2584;
  float64x2_t v2585;
  float64x2_t v2586;
  float64x2_t v2587;
  float64x2_t v2588;
  float64x2_t v2589;
  float64x2_t v2590;
  float64x2_t v2591;
  float64x2_t v2592;
  float64x2_t v2593;
  float64x2_t v2594;
  float64x2_t v2595;
  float64x2_t v2596;
  float64x2_t v2597;
  float64x2_t v2598;
  float64x2_t v2599;
  float64x2_t v2600;
  float64x2_t v2601;
  float64x2_t v2602;
  float64x2_t v2603;
  float64x2_t v2604;
  float64x2_t v2605;
  float64x2_t v2606;
  float64x2_t v2607;
  float64x2_t v2608;
  float64x2_t v2610;
  float64x2_t v2611;
  float64x2_t v2612;
  float64x2_t v2613;
  float64x2_t v2614;
  float64x2_t v2615;
  float64x2_t v2616;
  float64x2_t v2617;
  float64x2_t v2618;
  float64x2_t v2619;
  float64x2_t v2621;
  float64x2_t v2622;
  float64x2_t v2623;
  float64x2_t v2625;
  float64x2_t v2628;
  float64x2_t v2629;
  float64x2_t v2630;
  float64x2_t v2631;
  float64x2_t v2632;
  float64x2_t v2633;
  float64x2_t v2636;
  float64x2_t v2637;
  float64x2_t v2638;
  float64x2_t v2639;
  float64x2_t v2641;
  float64x2_t v2642;
  float64x2_t v2643;
  float64x2_t v2644;
  float64x2_t v2645;
  float64x2_t v2646;
  float64x2_t v2648;
  float64x2_t v2649;
  float64x2_t v2650;
  float64x2_t v2652;
  float64x2_t v2653;
  float64x2_t v2654;
  float64x2_t v2655;
  float64x2_t v2656;
  float64x2_t v2658;
  float64x2_t v2659;
  float64x2_t v2660;
  float64x2_t v2661;
  float64x2_t v2662;
  float64x2_t v2663;
  float64x2_t v2664;
  float64x2_t v2669;
  float64x2_t v2670;
  float64x2_t v2671;
  float64x2_t v2672;
  float64x2_t v2673;
  float64x2_t v2674;
  float64x2_t v2675;
  float64x2_t v2676;
  float64x2_t v2677;
  float64x2_t v2678;
  float64x2_t v2679;
  float64x2_t v2680;
  float64x2_t v2681;
  float64x2_t v2682;
  float64x2_t v2683;
  float64x2_t v2684;
  float64x2_t v2685;
  float64x2_t v2686;
  float64x2_t v2687;
  float64x2_t v2688;
  float64x2_t v2689;
  float64x2_t v2690;
  float64x2_t v2691;
  float64x2_t v2692;
  float64x2_t v2693;
  float64x2_t v2695;
  float64x2_t v2696;
  float64x2_t v2697;
  float64x2_t v2698;
  float64x2_t v2701;
  float64x2_t v2704;
  float64x2_t v2708;
  uint64_t result;
  float64x2_t *v2710;
  float64x2_t v2711;
  float64x2_t v2712;
  float64x2_t v2713;
  float64x2_t v2715;
  float64x2_t v2718;
  float64x2_t v2720;
  float64x2_t v2721;
  float64x2_t v2722;
  float64x2_t v2724;
  float64x2_t v2726;
  float64x2_t v2728;
  double v2729;
  float64x2_t v2730;
  float64x2_t v2731;
  float64x2_t v2732;
  float64x2_t v2733;
  float64x2_t v2734;
  float64x2_t v2735;
  float64x2_t v2736;
  float64x2_t v2737;
  float64x2_t v2738;
  float64x2_t v2739;
  float64x2_t v2741;
  float64x2_t v2742;
  float64x2_t v2743;
  double v2744;
  float64x2_t v2745;
  float64x2_t v2746;
  float64x2_t v2747;
  float64x2_t v2748;
  float64x2_t v2749;
  float64x2_t v2750;
  float64x2_t v2751;
  float64x2_t v2752;
  float64x2_t v2753;
  float64x2_t v2754;
  float64x2_t v2756;
  float64x2_t v2757;
  float64x2_t v2758;
  float64x2_t v2760;
  float64x2_t v2762[45];
  float64x2_t v2763;
  float64x2_t v2764;
  float64x2_t v2765;
  int8x16_t v2766;
  __int128 v2767;
  __int128 v2768;
  __int128 v2769;
  float64x2_t v2770;
  float64x2_t v2771;
  float64x2_t v2772;
  int8x16_t v2773;
  float64x2_t v2774;
  int8x16_t v2775;
  __int128 v2776;
  __int128 v2777;
  __int128 v2778;
  float64x2_t v2779;
  __n128 v2780;
  __int128 v2781;
  __int128 v2782;
  __int128 v2783;
  int8x16_t v2784;
  float64x2_t v2785;
  int8x16_t v2786;
  float64x2_t v2787;
  int8x16_t v2788;
  float64x2_t v2789;
  int8x16_t v2790;
  int8x16_t v2791;
  float64x2_t v2792;
  float64x2_t v2793;
  int8x16_t v2794;
  int8x16_t v2795;
  int8x16_t v2796;
  float64x2_t v2797;
  float64x2_t v2798;
  float64x2_t v2799;
  int8x16_t v2800;
  int8x16_t v2801;
  float64x2_t v2802;
  int8x16_t v2803;
  int8x16_t v2804;
  float64x2_t v2805;
  float64x2_t v2806;
  float64x2_t v2807;
  float64x2_t v2808;
  uint64_t v2809;
  float64x2_t v2810;
  uint64_t v2811;
  int8x16_t v2812;
  float64_t v2813;
  int8x16_t v2814;
  uint64_t v2815;
  int8x16_t v2816;
  uint64_t v2817;
  float64x2_t v2818;
  double v2819;
  float64x2_t v2820;
  double v2821;
  float64x2_t v2822;
  double v2823;
  _QWORD v2824[3];

  v33 = a1;
  v2809 = a9;
  v35 = a15;
  v34 = a16;
  v36 = a14;
  v2824[1] = *MEMORY[0x24BDAC8D0];
  v37 = (float64x2_t *)(a1 + 3152);
  v38 = a1 + 1304;
  *(_QWORD *)&v39 = a1 + 272;
  v40 = *a6;
  a10.f64[0] = (*a6)[1].f64[0];
  a11.f64[0] = *(float64_t *)(a1 + 1320);
  v41 = vsubq_f64(a10, a11);
  _Q25 = vsubq_f64(**a6, *(float64x2_t *)(a1 + 1304));
  v43 = *a8;
  a10.f64[0] = (*a8)[1].f64[0];
  v57 = **a8;
  a11.f64[0] = *(float64_t *)(a1 + 1344);
  v44 = *(float64x2_t *)(a1 + 1328);
  v2799 = vsubq_f64(a10, a11);
  v2797 = vsubq_f64(v57, v44);
  v45 = vextq_s8((int8x16_t)v2797, (int8x16_t)v2797, 8uLL);
  v2796 = v45;
  v45.i64[0] = *(_QWORD *)(a2 + 16);
  v2808 = (float64x2_t)v45;
  v2807 = *(float64x2_t *)a2;
  v46 = vextq_s8((int8x16_t)v2807, (int8x16_t)v2807, 8uLL);
  v2806 = (float64x2_t)v46;
  v46.i64[0] = *(_QWORD *)(a2 + 48);
  v2805 = (float64x2_t)v46;
  v2804 = *(int8x16_t *)(a2 + 32);
  v47 = vextq_s8(v2804, v2804, 8uLL);
  v2803 = v47;
  v47.i64[0] = *(_QWORD *)(a2 + 80);
  v2802 = (float64x2_t)v47;
  v2801 = *(int8x16_t *)(a2 + 64);
  v2800 = vextq_s8(v2801, v2801, 8uLL);
  v31.f64[0] = *(float64_t *)(a3 + 16);
  v48 = *(int8x16_t *)a3;
  v47.i64[0] = *(_QWORD *)(a1 + 48);
  v57.f64[0] = *(float64_t *)(a1 + 56);
  v49 = *(double *)v47.i64 * *(double *)v47.i64;
  v44.f64[0] = *(double *)v47.i64 * v57.f64[0];
  v50 = *(double *)(a1 + 64);
  v51 = *(double *)(a1 + 72);
  v52 = *(double *)v47.i64 * v50;
  *(double *)v47.i64 = *(double *)v47.i64 * v51;
  a12.n128_f64[0] = v57.f64[0] * v57.f64[0];
  *(double *)&v24 = v57.f64[0] * v50;
  v57.f64[0] = v57.f64[0] * v51;
  v53 = v50 * v50;
  v54 = v50 * v51;
  v55 = v51 * v51;
  *(double *)v27.i64 = v49 + a12.n128_f64[0] - v53 - v55;
  *(double *)&v25 = *(double *)&v24 - *(double *)v47.i64;
  *(double *)&v26 = v52 + v57.f64[0];
  *(double *)v47.i64 = *(double *)&v24 + *(double *)v47.i64;
  v56 = v49 - a12.n128_f64[0];
  *(double *)&v28 = v56 + v53 - v55;
  a12.n128_f64[0] = v54 - v44.f64[0];
  v57.f64[0] = v57.f64[0] - v52;
  v44.f64[0] = v44.f64[0] + v54;
  *(double *)&v29 = v56 - v53 + v55;
  _D5 = *(_QWORD *)(a1 + 192);
  _Q6 = *(float64x2_t *)(a1 + 176);
  v69 = *(float64x2_t *)(a1 + 200);
  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 152), _Q25.f64[0]), _Q6, _Q25, 1), v69, v41.f64[0]);
  __asm { FMLA            D6, D5, V25.D[1] }
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], *(double *)(a1 + 216), v41.f64[0]);
  v65 = vnegq_f64(_Q4);
  _Q8 = vnegq_f64(_Q6);
  _D9 = v65.f64[1];
  _Q5 = vmulq_f64(_Q4, _Q4);
  __asm
  {
    FMLS            D5, D9, V4.D[1]
    FMLS            D5, D8, V6.D[0]
  }
  v2788 = vextq_s8(v48, v48, 8uLL);
  v69.f64[0] = *(double *)&v25 + *(double *)&v25;
  *(double *)&v24 = *(double *)&v26 + *(double *)&v26;
  *(double *)&v25 = *(double *)v47.i64 + *(double *)v47.i64;
  a12.n128_f64[0] = a12.n128_f64[0] + a12.n128_f64[0];
  *(double *)&v26 = v57.f64[0] + v57.f64[0];
  *(double *)&v30 = v44.f64[0] + v44.f64[0];
  v32.f64[0] = *(float64_t *)(a3 + 48);
  v2786 = *(int8x16_t *)(a3 + 32);
  v70 = vextq_s8(v2786, v2786, 8uLL);
  v2787 = (float64x2_t)v70;
  v70.i64[0] = *(_QWORD *)(a3 + 80);
  v2791 = v70;
  v2789 = *(float64x2_t *)(a3 + 64);
  v2790 = vextq_s8((int8x16_t)v2789, (int8x16_t)v2789, 8uLL);
  v2792 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q25, 1);
  v2798 = v41;
  v2793 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41.f64[0], 0);
  v2795 = (int8x16_t)_Q25;
  v71 = vextq_s8((int8x16_t)_Q25, (int8x16_t)_Q25, 8uLL);
  v2794 = v71;
  v2775 = (int8x16_t)v65;
  v2774 = _Q8;
  v2771 = _Q4;
  v2770 = _Q6;
  v2785 = _Q5;
  v2784 = v27;
  v2783 = v28;
  v2782 = v29;
  v2781 = v24;
  v2780 = a12;
  v2779 = v69;
  v2778 = v25;
  v2777 = v26;
  v2776 = v30;
  if (_Q5.f64[0] >= 0.0000002635)
  {
    v73 = sqrt(_Q5.f64[0]);
    *(_QWORD *)&v2769 = a15;
    *(_QWORD *)&v2772.f64[0] = a1 + 272;
    v74 = a7;
    *(_QWORD *)&v2768 = a1;
    v75 = v40;
    *(_QWORD *)&v2767 = a1 + 1304;
    v76 = a3;
    v77 = a2;
    v78 = a4;
    v79 = a5;
    v2766 = (int8x16_t)v31;
    v2765 = (float64x2_t)v48;
    v2764 = v32;
    v80 = __sincos_stret(v73);
    v57.f64[0] = v80.__cosval;
    v32.f64[0] = v2764.f64[0];
    v48.i64[0] = *(_QWORD *)&v2765.f64[0];
    *(_QWORD *)&v31.f64[0] = v2766.i64[0];
    a5 = v79;
    a4 = v78;
    a2 = v77;
    a3 = v76;
    v38 = v2767;
    v40 = v75;
    v33 = v2768;
    a7 = v74;
    v39 = v2772.f64[0];
    *(_QWORD *)&v30 = v2776;
    *(_QWORD *)&v26 = v2777;
    *(_QWORD *)&v25 = v2778;
    v69.f64[0] = v2779.f64[0];
    a12.n128_u64[0] = v2780.n128_u64[0];
    *(_QWORD *)&v24 = v2781;
    *(_QWORD *)&v29 = v2782;
    *(_QWORD *)&v28 = v2783;
    v27.i64[0] = v2784.i64[0];
    *(_QWORD *)&v65.f64[0] = v2775.i64[0];
    v34 = a16;
    v35 = a15;
    v36 = a14;
    *(double *)v71.i64 = v80.__sinval / v73;
    _Q8.f64[0] = v2774.f64[0];
    v72 = 1.0 / v2785.f64[0] * (1.0 - v80.__cosval);
  }
  else
  {
    v72 = 0.5 - _Q5.f64[0] * (_Q5.f64[0] / -720.0 + 0.0416666667);
    *(double *)v71.i64 = 1.0 - _Q5.f64[0] * (0.166666667 - _Q5.f64[0] * (_Q5.f64[0] / -5040.0 + 0.00833333333));
    v57.f64[0] = 1.0 - _Q5.f64[0] * v72;
  }
  v81 = _D9 * v72;
  *(double *)v20.i64 = v57.f64[0] + v65.f64[0] * (v65.f64[0] * v72);
  v19.f64[0] = v57.f64[0] + _D9 * (_D9 * v72);
  v18.f64[0] = v57.f64[0] + _Q8.f64[0] * (_Q8.f64[0] * v72);
  v57.f64[0] = _D9 * (v65.f64[0] * v72);
  v82 = _Q8.f64[0] * (v65.f64[0] * v72);
  v83 = _Q8.f64[0] * v81;
  v84 = v65.f64[0] * *(double *)v71.i64;
  v85 = _D9 * *(double *)v71.i64;
  *(double *)v71.i64 = _Q8.f64[0] * *(double *)v71.i64;
  *(double *)&v22 = v57.f64[0] - *(double *)v71.i64;
  v17.f64[0] = v85 + v82;
  *(double *)v71.i64 = v57.f64[0] + *(double *)v71.i64;
  *(double *)&v21 = v83 - v84;
  _Q6.f64[0] = v82 - v85;
  *(double *)&v23 = v84 + v83;
  *(_QWORD *)&v86.f64[0] = v20.i64[0];
  v2773 = v71;
  *(_QWORD *)&v86.f64[1] = v71.i64[0];
  *(_QWORD *)&v87.f64[0] = v22;
  v87.f64[1] = v19.f64[0];
  v88.f64[0] = v85 + v82;
  *(_QWORD *)&v88.f64[1] = v21;
  v89 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, *(double *)v27.i64), v87, v69.f64[0]), v88, *(double *)&v24);
  v57.f64[0] = _Q6.f64[0] * *(double *)v27.i64 + *(double *)&v23 * v69.f64[0] + v18.f64[0] * *(double *)&v24;
  v90 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, *(double *)&v25), v87, *(double *)&v28), v88, a12.n128_f64[0]);
  v91 = vmlaq_n_f64(vmulq_n_f64(v86, *(double *)&v26), v87, *(double *)&v30);
  v87.f64[0] = _Q6.f64[0] * *(double *)&v25 + *(double *)&v23 * *(double *)&v28 + v18.f64[0] * a12.n128_f64[0];
  _Q3 = vmlaq_n_f64(v91, v88, *(double *)&v29);
  v2772 = _Q6;
  v88.f64[0] = _Q6.f64[0] * *(double *)&v26 + *(double *)&v23 * *(double *)&v30 + v18.f64[0] * *(double *)&v29;
  v93 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, v2807.f64[0]), v90, v2806.f64[0]), _Q3, v2808.f64[0]);
  v94 = v57.f64[0] * v2807.f64[0] + v87.f64[0] * v2806.f64[0] + v88.f64[0] * v2808.f64[0];
  _D25 = v2805.f64[0];
  v96 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, *(double *)v2804.i64), v90, *(double *)v2803.i64), _Q3, v2805.f64[0]);
  v97 = v57.f64[0] * *(double *)v2804.i64 + v87.f64[0] * *(double *)v2803.i64 + v88.f64[0] * v2805.f64[0];
  v98 = vmlaq_n_f64(vmulq_n_f64(v93, *(double *)v48.i64), v96, *(double *)v2786.i64);
  v99 = v94 * *(double *)v48.i64 + v97 * *(double *)v2786.i64;
  v100 = vmlaq_n_f64(vmulq_n_f64(v93, *(double *)v2788.i64), v96, v2787.f64[0]);
  v101 = v94 * *(double *)v2788.i64 + v97 * v2787.f64[0];
  v102 = vmlaq_n_f64(vmulq_n_f64(v93, v31.f64[0]), v96, v32.f64[0]);
  v103 = v94 * v31.f64[0] + v97 * v32.f64[0];
  v104 = v2802.f64[0];
  v105 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, *(double *)v2801.i64), v90, *(double *)v2800.i64), _Q3, v2802.f64[0]);
  v57.f64[0] = v57.f64[0] * *(double *)v2801.i64 + v87.f64[0] * *(double *)v2800.i64 + v88.f64[0] * v2802.f64[0];
  v2819 = v99 + v57.f64[0] * v2789.f64[0];
  v2818 = vmlaq_n_f64(v98, v105, v2789.f64[0]);
  v2821 = v101 + v57.f64[0] * *(double *)v2790.i64;
  v2820 = vmlaq_n_f64(v100, v105, *(double *)v2790.i64);
  v2823 = v103 + v57.f64[0] * *(double *)v2791.i64;
  v2822 = vmlaq_n_f64(v102, v105, *(double *)v2791.i64);
  v105.f64[0] = *(float64_t *)(v33 + 3176);
  v57.f64[0] = (*a5)[1].f64[0];
  _Q3.f64[0] = *(float64_t *)(a2 + 16);
  v106 = *(int64x2_t *)(a2 + 32);
  _Q7 = *(_OWORD *)(a2 + 64);
  v108 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, v106);
  _Q4 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, v106);
  _Q5 = *(float64x2_t *)(a2 + 96);
  v111 = vmlaq_laneq_f64(vmulq_n_f64(v108, _Q5.f64[0]), _Q4, _Q5, 1);
  _Q3.f64[1] = *(float64_t *)(a2 + 48);
  _Q4.f64[0] = *(float64_t *)(a2 + 112);
  v112 = vmlaq_n_f64(v111, _Q3, _Q4.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a2 + 104);
  __asm { FMLA            D3, D5, V7.D[1] }
  _Q5.f64[0] = _Q3.f64[0] + *(double *)(a2 + 80) * _Q4.f64[0];
  _Q6 = *(float64x2_t *)(a3 + 64);
  _Q4.f64[0] = *(float64_t *)(a3 + 104);
  __asm { FMLA            D3, D4, V6.D[1] }
  _Q4.f64[0] = *(float64_t *)(a3 + 16);
  _Q6.f64[0] = *(float64_t *)(a3 + 112);
  _Q4.f64[1] = *(float64_t *)(a3 + 48);
  v114 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 32)), *(double *)(a3 + 96)), (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 32)), *(float64x2_t *)(a3 + 96), 1), _Q4, _Q6.f64[0]);
  _Q6.f64[0] = _Q3.f64[0] + *(double *)(a3 + 80) * _Q6.f64[0];
  v115 = *(float64x2_t *)(*(_QWORD *)&v39 + 48);
  v116 = vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 24), *(double *)v2795.i64), v2792, v115);
  v115.f64[0] = (*a4)[1].f64[0];
  v117 = vsubq_f64(v112, v114);
  v118 = **a4;
  v119 = vsubq_f64(v57, v115);
  v120 = vsubq_f64(_Q5, _Q6);
  _Q5.f64[0] = v37[1].f64[0];
  v121 = vmlsq_lane_f64(v117, v118, v105.f64[0], 0);
  v122 = vmlaq_f64(v119, v105, _Q5);
  _Q2 = vmlaq_n_f64(vsubq_f64(**a5, v118), *v37, v105.f64[0]);
  v124 = vmlsq_f64(v120, v105, v115);
  v105.f64[0] = v105.f64[0] * v105.f64[0] * 0.5;
  v125 = vmlaq_f64(v124, v105, _Q5);
  _Q5.f64[0] = v2807.f64[0];
  _Q5.f64[1] = v2806.f64[0];
  _Q3 = vmlaq_n_f64(v121, *v37, v105.f64[0]);
  v127 = *(float64x2_t *)(*(_QWORD *)&v39 + 264);
  v128 = vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 240), *(double *)v2795.i64), v2792, v127);
  v115.f64[1] = v2793.f64[1];
  v127.f64[0] = *(double *)(*(_QWORD *)&v39 + 40) * *(double *)v2795.i64
              + *(double *)(*(_QWORD *)&v39 + 64) * *(double *)v2794.i64
              + *(double *)(*(_QWORD *)&v39 + 88) * v2798.f64[0];
  v129 = *(float64x2_t *)(*(_QWORD *)&v39 + 288);
  v130 = vmlaq_f64(v128, v2793, v129);
  v115.f64[0] = *(double *)(*(_QWORD *)&v39 + 256) * *(double *)v2795.i64
              + *(double *)(*(_QWORD *)&v39 + 280) * *(double *)v2794.i64
              + *(double *)(*(_QWORD *)&v39 + 304) * v2798.f64[0];
  v131 = *(float64x2_t *)(*(_QWORD *)&v39 + 192);
  *(_QWORD *)&v132.f64[0] = v2804.i64[0];
  *(_QWORD *)&v132.f64[1] = v2803.i64[0];
  _Q24.f64[1] = v2799.f64[1];
  v129.f64[0] = *(double *)(v33 + 240) * v2797.f64[0]
              + *(double *)(v33 + 264) * *(double *)v2796.i64
              + *(double *)(*(_QWORD *)&v39 + 16) * v2799.f64[0];
  v133 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 168), v2797.f64[0]), v131, *(double *)v2796.i64), *(float64x2_t *)(*(_QWORD *)&v39 + 216), v2799.f64[0]);
  v131.f64[0] = *(double *)(*(_QWORD *)&v39 + 184) * v2797.f64[0]
              + *(double *)(*(_QWORD *)&v39 + 208) * *(double *)v2796.i64
              + *(double *)(*(_QWORD *)&v39 + 232) * v2799.f64[0];
  v134 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q2.f64[0]), v132, _Q2, 1);
  __asm { FMLA            D24, D25, V2.D[1] }
  *(_QWORD *)&_Q2.f64[0] = v2801.i64[0];
  *(_QWORD *)&_Q2.f64[1] = v2800.i64[0];
  v135 = vmlaq_n_f64(v134, _Q2, v122.f64[0]);
  _Q24.f64[0] = vmlad_n_f64(_Q24.f64[0], v2802.f64[0], v122.f64[0]);
  v122.f64[0] = *(float64_t *)(v33 + 40);
  v137 = v2809;
  *(float64x2_t *)(v2809 + 24) = vsubq_f64(v135, vaddq_f64(vaddq_f64(*(float64x2_t *)(v33 + 24), vmlaq_f64(v116, v2793, *(float64x2_t *)(*(_QWORD *)&v39 + 72))), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v33 + 224), v2797.f64[0]), *(float64x2_t *)(v33 + 248), *(double *)v2796.i64), **(float64x2_t **)&v39, v2799.f64[0])));
  *(_QWORD *)(v137 + 40) = *(_OWORD *)&vsubq_f64(_Q24, vaddq_f64(vaddq_f64(v122, v127), v129));
  v138 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q3.f64[0]), v132, _Q3, 1), _Q2, v125.f64[0]);
  __asm { FMLA            D5, D25, V3.D[1] }
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v104, v125.f64[0]);
  v125.f64[0] = *(float64_t *)(v33 + 16);
  v140 = *(float64x2_t *)v33;
  v141 = vsubq_f64(v138, vaddq_f64(vaddq_f64(*(float64x2_t *)v33, v130), v133));
  *(_QWORD *)(v137 + 16) = *(_OWORD *)&vsubq_f64(_Q5, vaddq_f64(vaddq_f64(v125, v115), v131));
  *(float64x2_t *)v137 = v141;
  v141.f64[0] = (*a7)[1].f64[0];
  v140.f64[0] = v40[1].f64[0];
  v142 = vsubq_f64(v141, v140);
  v143 = *v40;
  *(float64x2_t *)(v137 + 72) = vsubq_f64(**a7, *v40);
  *(float64_t *)(v137 + 88) = v142.f64[0];
  v142.f64[0] = (*a13)[1].f64[0];
  v143.f64[0] = v43[1].f64[0];
  *(float64x2_t *)(v137 + 96) = vsubq_f64(**a13, *v43);
  *(_QWORD *)(v137 + 112) = *(_OWORD *)&vsubq_f64(v142, v143);
  if (v35 || v36 || v34)
  {
    v2763 = _Q24;
    v2764 = _Q5;
    v2765 = v135;
    v2766 = (int8x16_t)v138;
    v2767 = v23;
    v2768 = v22;
    v2769 = v21;
    v2786 = v20;
    v2787 = v17;
    v2788 = (int8x16_t)v19;
    v2789 = v18;
    v2790.i64[0] = v34;
    v2810 = 0uLL;
    v2811 = 0;
    sub_20F20830C(&v2818, v2810.f64, (double *)v2812.i64);
    v146 = (float64x2_t *)(v2809 + 48);
    v147 = v2810;
    *(_QWORD *)(v2809 + 64) = v2811;
    *v146 = v147;
    v147.f64[0] = v2813;
    v2799 = v147;
    v2797 = (float64x2_t)v2812;
    v148 = vextq_s8((int8x16_t)v2797, (int8x16_t)v2797, 8uLL);
    v2793 = (float64x2_t)v148;
    v148.i64[0] = v2815;
    v2798 = (float64x2_t)v148;
    v2795 = v2814;
    v149 = vextq_s8(v2795, v2795, 8uLL);
    v2792 = (float64x2_t)v149;
    v149.i64[0] = v2817;
    v2796 = v149;
    v2794 = v2816;
    v2791 = vextq_s8(v2794, v2794, 8uLL);
    if (v36)
    {
      v2824[0] = 0;
      *(_QWORD *)&v2810.f64[0] = v2824;
      sub_20F4DF030((_QWORD *)v36, &v2810);
      v150.f64[0] = v2797.f64[0];
      v150.f64[1] = v2793.f64[0];
      _Q1 = vnegq_f64(v150);
      *(_QWORD *)&v152.f64[0] = v2795.i64[0];
      v152.f64[1] = v2792.f64[0];
      *(_QWORD *)&v153.f64[0] = v2794.i64[0];
      *(_QWORD *)&v153.f64[1] = v2791.i64[0];
      _D17 = v2773.i64[0];
      _D24 = v2772.f64[0];
      v156 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q1, *(double *)v2786.i64), v152, *(double *)v2773.i64, 0), v153, v2772.f64[0], 0);
      _D19 = *(double *)v2788.i64;
      _D23 = v2767;
      v159 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q1, *(double *)&v2768), v152, *(double *)v2788.i64, 0), v153, *(double *)&v2767, 0);
      _D21 = v2769;
      v161 = *(double *)&v2781;
      _D18 = v2789.f64[0];
      _Q0 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q1, v2787.f64[0]), v152, *(double *)&v2769, 0), v153, v2789.f64[0], 0);
      v164 = v2780.n128_f64[0];
      v165 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v156, *(double *)v2784.i64), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v2779.f64[0], 0), v159), (float64x2_t)vdupq_lane_s64(v2781, 0), _Q0);
      v166 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v156, *(double *)&v2778), (float64x2_t)vdupq_lane_s64(v2783, 0), v159), (float64x2_t)vdupq_lane_s64(v2780.n128_i64[0], 0), _Q0);
      v167 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v156, *(double *)&v2777), (float64x2_t)vdupq_lane_s64(v2776, 0), v159), (float64x2_t)vdupq_lane_s64(v2782, 0), _Q0);
      _D16 = v2798.f64[0];
      __asm { FMLS            D0, D17, V16.D[0] }
      _D17 = v2796.i64[0];
      __asm
      {
        FMLS            D0, D24, V17.D[0]
        FMLS            D1, D19, V16.D[0]
        FMLS            D1, D23, V17.D[0]
      }
      v153.f64[0] = _Q0.f64[0] * *(double *)v2784.i64 + _Q1.f64[0] * v2779.f64[0];
      v159.f64[0] = _Q0.f64[0] * *(double *)&v2778 + _Q1.f64[0] * *(double *)&v2783;
      _Q0.f64[0] = _Q0.f64[0] * *(double *)&v2777 + _Q1.f64[0] * *(double *)&v2776;
      __asm
      {
        FMLS            D1, D21, V16.D[0]
        FMLS            D1, D18, V17.D[0]
      }
      _Q0.f64[0] = _Q0.f64[0] + _Q1.f64[0] * *(double *)&v2782;
      *(float64x2_t *)(v36 + 48) = v165;
      *(double *)(v36 + 64) = v153.f64[0] + _Q1.f64[0] * v161;
      *(float64x2_t *)(v36 + 168) = v166;
      *(double *)(v36 + 184) = v159.f64[0] + _Q1.f64[0] * v164;
      *(float64x2_t *)(v36 + 288) = v167;
      _Q1.f64[0] = 0.0;
      v166.f64[0] = 0.0;
      v153.f64[0] = v2763.f64[0];
      v166.f64[1] = v2763.f64[0];
      *(float64_t *)(v36 + 304) = _Q0.f64[0];
      *(float64x2_t *)(v36 + 24) = v166;
      v170 = (int8x16_t)v2765;
      v171 = (int8x16_t)vnegq_f64(v2765);
      *(_QWORD *)(v36 + 40) = v171.i64[1];
      *(_QWORD *)(v36 + 160) = v170.i64[0];
      *(_OWORD *)(v36 + 144) = (unint64_t)*(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v153.f64[0]);
      v166.f64[0] = v2764.f64[0];
      _Q1.f64[1] = v2764.f64[0];
      *(int8x16_t *)(v36 + 264) = vextq_s8(v170, v171, 8uLL);
      *(float64x2_t *)v36 = _Q1;
      v172 = v2766;
      v173 = vnegq_f64((float64x2_t)v2766);
      *(float64_t *)(v36 + 16) = v173.f64[1];
      *(_QWORD *)(v36 + 136) = v172.i64[0];
      *(_OWORD *)(v36 + 120) = (unint64_t)*(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v166.f64[0]);
      *(_QWORD *)(v36 + 280) = 0;
      *(_QWORD *)(v36 + 256) = 0;
      *(int8x16_t *)(v36 + 240) = vextq_s8(v172, (int8x16_t)v173, 8uLL);
      v173.f64[0] = v2807.f64[0];
      v173.f64[1] = v2806.f64[0];
      v172.i64[0] = *(_OWORD *)&vnegq_f64(v2808);
      *(float64x2_t *)(v36 + 360) = vnegq_f64(v173);
      *(_QWORD *)&v173.f64[0] = v2804.i64[0];
      *(_QWORD *)&v173.f64[1] = v2803.i64[0];
      *(_QWORD *)(v36 + 376) = v172.i64[0];
      *(float64x2_t *)(v36 + 480) = vnegq_f64(v173);
      *(_QWORD *)(v36 + 496) = *(_OWORD *)&vnegq_f64(v2805);
      *(_QWORD *)&v173.f64[0] = v2801.i64[0];
      *(_QWORD *)&v173.f64[1] = v2800.i64[0];
      *(float64x2_t *)(v36 + 600) = vnegq_f64(v173);
      *(_QWORD *)(v36 + 616) = *(_OWORD *)&vnegq_f64(v2802);
      MEMORY[0x24BDAC7A8]();
      memcpy(v2762, (const void *)v36, sizeof(v2762));
      v175 = *(float64x2_t *)(v38 + 48);
      v174 = *(float64x2_t *)(v38 + 64);
      v176 = *(float64x2_t *)(v33 + 1488);
      v177 = *(float64x2_t *)(v33 + 1472);
      v179 = *(float64x2_t *)(v38 + 288);
      v178 = *(float64x2_t *)(v38 + 304);
      v181 = *(float64x2_t *)(v38 + 408);
      v180 = *(float64x2_t *)(v38 + 424);
      _Q24 = v2762[0];
      v183 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v175, v2762[0].f64[0]), v177, v2762[0], 1), v179, v2762[1].f64[0]), v181, v2762[1], 1);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, v2762[0].f64[0]), v176, v2762[0], 1), v178, v2762[1].f64[0]), v180, v2762[1], 1);
      v185 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v175, v2762[7].f64[1]), v177, *(float64x2_t *)((char *)&v2762[7] + 8), 1), v179, v2762[8].f64[1]), v181, *(float64x2_t *)((char *)&v2762[8] + 8), 1);
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, v2762[7].f64[1]), v176, *(float64x2_t *)((char *)&v2762[7] + 8), 1), v178, v2762[8].f64[1]), v180, *(float64x2_t *)((char *)&v2762[8] + 8), 1);
      _Q20 = v2762[15];
      v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v175, v2762[15].f64[0]), v177, v2762[15], 1), v179, v2762[16].f64[0]), v181, v2762[16], 1);
      v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, v2762[15].f64[0]), v176, v2762[15], 1), v178, v2762[16].f64[0]), v180, v2762[16], 1);
      v190 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v175, v2762[22].f64[1]), v177, *(float64x2_t *)((char *)&v2762[22] + 8), 1), v179, v2762[23].f64[1]), v181, *(float64x2_t *)((char *)&v2762[23] + 8), 1);
      v191 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, v2762[22].f64[1]), v176, *(float64x2_t *)((char *)&v2762[22] + 8), 1), v178, v2762[23].f64[1]), v180, *(float64x2_t *)((char *)&v2762[23] + 8), 1);
      v193 = *(float64x2_t *)(v38 + 528);
      v192 = *(float64x2_t *)(v38 + 544);
      v194 = *(float64x2_t *)(v33 + 1968);
      v195 = *(float64x2_t *)(v33 + 1952);
      v197 = *(float64x2_t *)(v38 + 768);
      v196 = *(float64x2_t *)(v38 + 784);
      v199 = *(float64x2_t *)(v38 + 888);
      v198 = *(float64x2_t *)(v38 + 904);
      _Q1 = v2762[1];
      _Q2 = v2762[2];
      v202 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v183, v193, v2762[2].f64[0]), v195, v2762[2], 1), v197, v2762[3].f64[0]), v199, v2762[3], 1);
      v203 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v184, v192, v2762[2].f64[0]), v194, v2762[2], 1), v196, v2762[3].f64[0]), v198, v2762[3], 1);
      v204 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v185, v193, v2762[9].f64[1]), v195, *(float64x2_t *)((char *)&v2762[9] + 8), 1), v197, v2762[10].f64[1]), v199, *(float64x2_t *)((char *)&v2762[10] + 8), 1);
      v205 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v186, v192, v2762[9].f64[1]), v194, *(float64x2_t *)((char *)&v2762[9] + 8), 1), v196, v2762[10].f64[1]), v198, *(float64x2_t *)((char *)&v2762[10] + 8), 1);
      _Q4 = v2762[16];
      _Q3 = v2762[17];
      v208 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v188, v193, v2762[17].f64[0]), v195, v2762[17], 1), v197, v2762[18].f64[0]), v199, v2762[18], 1);
      v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v189, v192, v2762[17].f64[0]), v194, v2762[17], 1), v196, v2762[18].f64[0]), v198, v2762[18], 1);
      v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v190, v193, v2762[24].f64[1]), v195, *(float64x2_t *)((char *)&v2762[24] + 8), 1), v197, v2762[25].f64[1]), v199, *(float64x2_t *)((char *)&v2762[25] + 8), 1);
      v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v191, v192, v2762[24].f64[1]), v194, *(float64x2_t *)((char *)&v2762[24] + 8), 1), v196, v2762[25].f64[1]), v198, *(float64x2_t *)((char *)&v2762[25] + 8), 1);
      v213 = *(float64x2_t *)(v38 + 1008);
      v212 = *(float64x2_t *)(v38 + 1024);
      v214 = *(float64x2_t *)(v33 + 2448);
      v215 = *(float64x2_t *)(v33 + 2432);
      v216 = *(float64x2_t *)(v38 + 1264);
      v217 = *(float64x2_t *)(v38 + 1248);
      v218 = *(float64x2_t *)(v38 + 1368);
      v219 = *(float64x2_t *)(v38 + 1384);
      _Q5 = v2762[3];
      _Q7 = v2762[4];
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v202, v213, v2762[4].f64[0]), v215, v2762[4], 1), v217, v2762[5].f64[0]), v218, v2762[5], 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v203, v212, v2762[4].f64[0]), v214, v2762[4], 1), v216, v2762[5].f64[0]), v219, v2762[5], 1);
      v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v204, v213, v2762[11].f64[1]), v215, *(float64x2_t *)((char *)&v2762[11] + 8), 1), v217, v2762[12].f64[1]), v218, *(float64x2_t *)((char *)&v2762[12] + 8), 1);
      v225 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v205, v212, v2762[11].f64[1]), v214, *(float64x2_t *)((char *)&v2762[11] + 8), 1), v216, v2762[12].f64[1]), v219, *(float64x2_t *)((char *)&v2762[12] + 8), 1);
      _Q18 = v2762[18];
      _Q6 = v2762[19];
      v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v208, v213, v2762[19].f64[0]), v215, v2762[19], 1), v217, v2762[20].f64[0]), v218, v2762[20], 1);
      v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v209, v212, v2762[19].f64[0]), v214, v2762[19], 1), v216, v2762[20].f64[0]), v219, v2762[20], 1);
      v230 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v210, v213, v2762[26].f64[1]), v215, *(float64x2_t *)((char *)&v2762[26] + 8), 1), v217, v2762[27].f64[1]), v218, *(float64x2_t *)((char *)&v2762[27] + 8), 1);
      v231 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v211, v212, v2762[26].f64[1]), v214, *(float64x2_t *)((char *)&v2762[26] + 8), 1), v216, v2762[27].f64[1]), v219, *(float64x2_t *)((char *)&v2762[27] + 8), 1);
      v232 = *(float64x2_t *)(v38 + 1504);
      v233 = *(float64x2_t *)(v38 + 1488);
      v234 = *(float64x2_t *)(v33 + 2928);
      v235 = *(float64x2_t *)(v33 + 2912);
      v236 = *(float64x2_t *)(v38 + 1744);
      v237 = *(float64x2_t *)(v38 + 1728);
      _Q17 = v2762[5];
      v239 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v223, v232, v2762[6].f64[0]), v234, v2762[6], 1), v236, v2762[7].f64[0]);
      v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v224, v233, v2762[13].f64[1]), v235, *(float64x2_t *)((char *)&v2762[13] + 8), 1), v237, v2762[14].f64[1]);
      v241 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v225, v232, v2762[13].f64[1]), v234, *(float64x2_t *)((char *)&v2762[13] + 8), 1), v236, v2762[14].f64[1]);
      _Q16 = v2762[20];
      v243 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v228, v233, v2762[21].f64[0]), v235, v2762[21], 1), v237, v2762[22].f64[0]);
      v244 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v229, v232, v2762[21].f64[0]), v234, v2762[21], 1), v236, v2762[22].f64[0]);
      v245 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v230, v233, v2762[28].f64[1]), v235, *(float64x2_t *)((char *)&v2762[28] + 8), 1), v237, v2762[29].f64[1]);
      v246 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v231, v232, v2762[28].f64[1]), v234, *(float64x2_t *)((char *)&v2762[28] + 8), 1), v236, v2762[29].f64[1]);
      *(float64x2_t *)v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v222, v233, v2762[6].f64[0]), v235, v2762[6], 1), v237, v2762[7].f64[0]);
      *(float64x2_t *)(v36 + 16) = v239;
      *(float64x2_t *)(v36 + 136) = v241;
      *(float64x2_t *)(v36 + 120) = v240;
      *(float64x2_t *)(v36 + 240) = v243;
      *(float64x2_t *)(v36 + 256) = v244;
      *(float64x2_t *)(v36 + 360) = v245;
      *(float64x2_t *)(v36 + 376) = v246;
      v247 = *(float64x2_t *)(v38 + 80);
      v248 = *(float64x2_t *)(v38 + 96);
      v249 = *(float64x2_t *)(v33 + 1520);
      v250 = *(float64x2_t *)(v33 + 1504);
      v252 = *(float64x2_t *)(v38 + 320);
      v251 = *(float64x2_t *)(v38 + 336);
      v254 = *(float64x2_t *)(v38 + 440);
      v253 = *(float64x2_t *)(v38 + 456);
      v255 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v2762[0].f64[0]), v250, v2762[0], 1), v252, v2762[1].f64[0]), v254, v2762[1], 1);
      v256 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v2762[0].f64[0]), v249, v2762[0], 1), v251, v2762[1].f64[0]), v253, v2762[1], 1);
      v257 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v2762[7].f64[1]), v250, *(float64x2_t *)((char *)&v2762[7] + 8), 1), v252, v2762[8].f64[1]), v254, *(float64x2_t *)((char *)&v2762[8] + 8), 1);
      v258 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v2762[7].f64[1]), v249, *(float64x2_t *)((char *)&v2762[7] + 8), 1), v251, v2762[8].f64[1]), v253, *(float64x2_t *)((char *)&v2762[8] + 8), 1);
      v259 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v2762[15].f64[0]), v250, v2762[15], 1), v252, v2762[16].f64[0]), v254, v2762[16], 1);
      v260 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v2762[15].f64[0]), v249, v2762[15], 1), v251, v2762[16].f64[0]), v253, v2762[16], 1);
      v261 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v2762[22].f64[1]), v250, *(float64x2_t *)((char *)&v2762[22] + 8), 1), v252, v2762[23].f64[1]), v254, *(float64x2_t *)((char *)&v2762[23] + 8), 1);
      v262 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v2762[22].f64[1]), v249, *(float64x2_t *)((char *)&v2762[22] + 8), 1), v251, v2762[23].f64[1]), v253, *(float64x2_t *)((char *)&v2762[23] + 8), 1);
      v264 = *(float64x2_t *)(v38 + 560);
      v263 = *(float64x2_t *)(v38 + 576);
      v265 = *(float64x2_t *)(v33 + 2000);
      v266 = *(float64x2_t *)(v33 + 1984);
      v268 = *(float64x2_t *)(v38 + 800);
      v267 = *(float64x2_t *)(v38 + 816);
      v270 = *(float64x2_t *)(v38 + 920);
      v269 = *(float64x2_t *)(v38 + 936);
      v271 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v255, v264, v2762[2].f64[0]), v266, v2762[2], 1), v268, v2762[3].f64[0]), v270, v2762[3], 1);
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v256, v263, v2762[2].f64[0]), v265, v2762[2], 1), v267, v2762[3].f64[0]), v269, v2762[3], 1);
      v273 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v257, v264, v2762[9].f64[1]), v266, *(float64x2_t *)((char *)&v2762[9] + 8), 1), v268, v2762[10].f64[1]), v270, *(float64x2_t *)((char *)&v2762[10] + 8), 1);
      v274 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v258, v263, v2762[9].f64[1]), v265, *(float64x2_t *)((char *)&v2762[9] + 8), 1), v267, v2762[10].f64[1]), v269, *(float64x2_t *)((char *)&v2762[10] + 8), 1);
      v275 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v259, v264, v2762[17].f64[0]), v266, v2762[17], 1), v268, v2762[18].f64[0]), v270, v2762[18], 1);
      v276 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v260, v263, v2762[17].f64[0]), v265, v2762[17], 1), v267, v2762[18].f64[0]), v269, v2762[18], 1);
      v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v261, v264, v2762[24].f64[1]), v266, *(float64x2_t *)((char *)&v2762[24] + 8), 1), v268, v2762[25].f64[1]), v270, *(float64x2_t *)((char *)&v2762[25] + 8), 1);
      v278 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v262, v263, v2762[24].f64[1]), v265, *(float64x2_t *)((char *)&v2762[24] + 8), 1), v267, v2762[25].f64[1]), v269, *(float64x2_t *)((char *)&v2762[25] + 8), 1);
      v279 = *(float64x2_t *)(v38 + 1056);
      v280 = *(float64x2_t *)(v38 + 1040);
      v281 = *(float64x2_t *)(v33 + 2480);
      v282 = *(float64x2_t *)(v33 + 2464);
      v283 = *(float64x2_t *)(v38 + 1296);
      v284 = *(float64x2_t *)(v38 + 1280);
      v286 = *(float64x2_t *)(v38 + 1400);
      v285 = *(float64x2_t *)(v38 + 1416);
      v287 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v271, v280, v2762[4].f64[0]), v282, v2762[4], 1), v284, v2762[5].f64[0]), v286, v2762[5], 1);
      v288 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v272, v279, v2762[4].f64[0]), v281, v2762[4], 1), v283, v2762[5].f64[0]), v285, v2762[5], 1);
      v289 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v273, v280, v2762[11].f64[1]), v282, *(float64x2_t *)((char *)&v2762[11] + 8), 1), v284, v2762[12].f64[1]), v286, *(float64x2_t *)((char *)&v2762[12] + 8), 1);
      v290 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v274, v279, v2762[11].f64[1]), v281, *(float64x2_t *)((char *)&v2762[11] + 8), 1), v283, v2762[12].f64[1]), v285, *(float64x2_t *)((char *)&v2762[12] + 8), 1);
      v291 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v275, v280, v2762[19].f64[0]), v282, v2762[19], 1), v284, v2762[20].f64[0]), v286, v2762[20], 1);
      v292 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v276, v279, v2762[19].f64[0]), v281, v2762[19], 1), v283, v2762[20].f64[0]), v285, v2762[20], 1);
      v293 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v277, v280, v2762[26].f64[1]), v282, *(float64x2_t *)((char *)&v2762[26] + 8), 1), v284, v2762[27].f64[1]), v286, *(float64x2_t *)((char *)&v2762[27] + 8), 1);
      v294 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v278, v279, v2762[26].f64[1]), v281, *(float64x2_t *)((char *)&v2762[26] + 8), 1), v283, v2762[27].f64[1]), v285, *(float64x2_t *)((char *)&v2762[27] + 8), 1);
      v295 = *(float64x2_t *)(v38 + 1536);
      v296 = *(float64x2_t *)(v38 + 1520);
      v297 = *(float64x2_t *)(v33 + 2960);
      v298 = *(float64x2_t *)(v33 + 2944);
      v299 = *(float64x2_t *)(v38 + 1776);
      v300 = *(float64x2_t *)(v38 + 1760);
      v301 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v288, v295, v2762[6].f64[0]), v297, v2762[6], 1), v299, v2762[7].f64[0]);
      v302 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v289, v296, v2762[13].f64[1]), v298, *(float64x2_t *)((char *)&v2762[13] + 8), 1), v300, v2762[14].f64[1]);
      v303 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v290, v295, v2762[13].f64[1]), v297, *(float64x2_t *)((char *)&v2762[13] + 8), 1), v299, v2762[14].f64[1]);
      v304 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v291, v296, v2762[21].f64[0]), v298, v2762[21], 1), v300, v2762[22].f64[0]);
      v305 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v292, v295, v2762[21].f64[0]), v297, v2762[21], 1), v299, v2762[22].f64[0]);
      v306 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v293, v296, v2762[28].f64[1]), v298, *(float64x2_t *)((char *)&v2762[28] + 8), 1), v300, v2762[29].f64[1]);
      v307 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v294, v295, v2762[28].f64[1]), v297, *(float64x2_t *)((char *)&v2762[28] + 8), 1), v299, v2762[29].f64[1]);
      *(float64x2_t *)(v36 + 32) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v287, v296, v2762[6].f64[0]), v298, v2762[6], 1), v300, v2762[7].f64[0]);
      *(float64x2_t *)(v36 + 48) = v301;
      *(float64x2_t *)(v36 + 168) = v303;
      *(float64x2_t *)(v36 + 152) = v302;
      *(float64x2_t *)(v36 + 288) = v305;
      *(float64x2_t *)(v36 + 272) = v304;
      *(float64x2_t *)(v36 + 392) = v306;
      *(float64x2_t *)(v36 + 408) = v307;
      v308 = *(float64x2_t *)(v38 + 112);
      v309 = *(float64x2_t *)(v38 + 128);
      v310 = *(float64x2_t *)(v33 + 1552);
      v311 = *(float64x2_t *)(v33 + 1536);
      v313 = *(float64x2_t *)(v38 + 352);
      v312 = *(float64x2_t *)(v38 + 368);
      v315 = *(float64x2_t *)(v38 + 472);
      v314 = *(float64x2_t *)(v38 + 488);
      v316 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v2762[0].f64[0]), v311, v2762[0], 1), v313, v2762[1].f64[0]), v315, v2762[1], 1);
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v309, v2762[0].f64[0]), v310, v2762[0], 1), v312, v2762[1].f64[0]), v314, v2762[1], 1);
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v2762[7].f64[1]), v311, *(float64x2_t *)((char *)&v2762[7] + 8), 1), v313, v2762[8].f64[1]), v315, *(float64x2_t *)((char *)&v2762[8] + 8), 1);
      v319 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v309, v2762[7].f64[1]), v310, *(float64x2_t *)((char *)&v2762[7] + 8), 1), v312, v2762[8].f64[1]), v314, *(float64x2_t *)((char *)&v2762[8] + 8), 1);
      v320 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v2762[15].f64[0]), v311, v2762[15], 1), v313, v2762[16].f64[0]), v315, v2762[16], 1);
      v321 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v309, v2762[15].f64[0]), v310, v2762[15], 1), v312, v2762[16].f64[0]), v314, v2762[16], 1);
      v322 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v308, v2762[22].f64[1]), v311, *(float64x2_t *)((char *)&v2762[22] + 8), 1), v313, v2762[23].f64[1]), v315, *(float64x2_t *)((char *)&v2762[23] + 8), 1);
      v323 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v309, v2762[22].f64[1]), v310, *(float64x2_t *)((char *)&v2762[22] + 8), 1), v312, v2762[23].f64[1]), v314, *(float64x2_t *)((char *)&v2762[23] + 8), 1);
      v325 = *(float64x2_t *)(v38 + 592);
      v324 = *(float64x2_t *)(v38 + 608);
      v326 = *(float64x2_t *)(v33 + 2032);
      v327 = *(float64x2_t *)(v33 + 2016);
      v329 = *(float64x2_t *)(v38 + 832);
      v328 = *(float64x2_t *)(v38 + 848);
      v331 = *(float64x2_t *)(v38 + 952);
      v330 = *(float64x2_t *)(v38 + 968);
      v332 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v316, v325, v2762[2].f64[0]), v327, v2762[2], 1), v329, v2762[3].f64[0]), v331, v2762[3], 1);
      v333 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v317, v324, v2762[2].f64[0]), v326, v2762[2], 1), v328, v2762[3].f64[0]), v330, v2762[3], 1);
      v334 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v318, v325, v2762[9].f64[1]), v327, *(float64x2_t *)((char *)&v2762[9] + 8), 1), v329, v2762[10].f64[1]), v331, *(float64x2_t *)((char *)&v2762[10] + 8), 1);
      v335 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v319, v324, v2762[9].f64[1]), v326, *(float64x2_t *)((char *)&v2762[9] + 8), 1), v328, v2762[10].f64[1]), v330, *(float64x2_t *)((char *)&v2762[10] + 8), 1);
      v336 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v320, v325, v2762[17].f64[0]), v327, v2762[17], 1), v329, v2762[18].f64[0]), v331, v2762[18], 1);
      v337 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v321, v324, v2762[17].f64[0]), v326, v2762[17], 1), v328, v2762[18].f64[0]), v330, v2762[18], 1);
      v338 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v322, v325, v2762[24].f64[1]), v327, *(float64x2_t *)((char *)&v2762[24] + 8), 1), v329, v2762[25].f64[1]), v331, *(float64x2_t *)((char *)&v2762[25] + 8), 1);
      v339 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v323, v324, v2762[24].f64[1]), v326, *(float64x2_t *)((char *)&v2762[24] + 8), 1), v328, v2762[25].f64[1]), v330, *(float64x2_t *)((char *)&v2762[25] + 8), 1);
      v340 = *(float64x2_t *)(v38 + 1088);
      v341 = *(float64x2_t *)(v38 + 1072);
      v342 = *(float64x2_t *)(v33 + 2512);
      v343 = *(float64x2_t *)(v33 + 2496);
      v344 = *(float64x2_t *)(v38 + 1328);
      v345 = *(float64x2_t *)(v38 + 1312);
      v347 = *(float64x2_t *)(v38 + 1432);
      v346 = *(float64x2_t *)(v38 + 1448);
      v348 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v332, v341, v2762[4].f64[0]), v343, v2762[4], 1), v345, v2762[5].f64[0]), v347, v2762[5], 1);
      v349 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v333, v340, v2762[4].f64[0]), v342, v2762[4], 1), v344, v2762[5].f64[0]), v346, v2762[5], 1);
      v350 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v334, v341, v2762[11].f64[1]), v343, *(float64x2_t *)((char *)&v2762[11] + 8), 1), v345, v2762[12].f64[1]), v347, *(float64x2_t *)((char *)&v2762[12] + 8), 1);
      v351 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v335, v340, v2762[11].f64[1]), v342, *(float64x2_t *)((char *)&v2762[11] + 8), 1), v344, v2762[12].f64[1]), v346, *(float64x2_t *)((char *)&v2762[12] + 8), 1);
      v352 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v336, v341, v2762[19].f64[0]), v343, v2762[19], 1), v345, v2762[20].f64[0]), v347, v2762[20], 1);
      v353 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v337, v340, v2762[19].f64[0]), v342, v2762[19], 1), v344, v2762[20].f64[0]), v346, v2762[20], 1);
      v354 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v338, v341, v2762[26].f64[1]), v343, *(float64x2_t *)((char *)&v2762[26] + 8), 1), v345, v2762[27].f64[1]), v347, *(float64x2_t *)((char *)&v2762[27] + 8), 1);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v339, v340, v2762[26].f64[1]), v342, *(float64x2_t *)((char *)&v2762[26] + 8), 1), v344, v2762[27].f64[1]), v346, *(float64x2_t *)((char *)&v2762[27] + 8), 1);
      v356 = *(float64x2_t *)(v38 + 1568);
      v357 = *(float64x2_t *)(v38 + 1552);
      v358 = *(float64x2_t *)(v33 + 2992);
      _Q31 = *(float64x2_t *)(v33 + 2976);
      v360 = *(float64x2_t *)(v38 + 1808);
      _Q9 = *(float64x2_t *)(v38 + 1792);
      _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v349, v356, v2762[6].f64[0]), v358, v2762[6], 1), v360, v2762[7].f64[0]);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v350, v357, v2762[13].f64[1]), _Q31, *(float64x2_t *)((char *)&v2762[13] + 8), 1), _Q9, v2762[14].f64[1]);
      _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v351, v356, v2762[13].f64[1]), v358, *(float64x2_t *)((char *)&v2762[13] + 8), 1), v360, v2762[14].f64[1]);
      _Q23 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v352, v357, v2762[21].f64[0]), _Q31, v2762[21], 1), _Q9, v2762[22].f64[0]);
      v366 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v353, v356, v2762[21].f64[0]), v358, v2762[21], 1), v360, v2762[22].f64[0]);
      v367 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v354, v357, v2762[28].f64[1]), _Q31, *(float64x2_t *)((char *)&v2762[28] + 8), 1), _Q9, v2762[29].f64[1]);
      _Q27 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v356, v2762[28].f64[1]), v358, *(float64x2_t *)((char *)&v2762[28] + 8), 1), v360, v2762[29].f64[1]);
      *(float64x2_t *)(v36 + 64) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v348, v357, v2762[6].f64[0]), _Q31, v2762[6], 1), _Q9, v2762[7].f64[0]);
      *(float64x2_t *)(v36 + 80) = _Q19;
      *(float64x2_t *)(v36 + 200) = _Q22;
      *(float64x2_t *)(v36 + 184) = _Q21;
      *(float64x2_t *)(v36 + 320) = v366;
      *(float64x2_t *)(v36 + 304) = _Q23;
      *(float64x2_t *)(v36 + 424) = v367;
      *(float64x2_t *)(v36 + 440) = _Q27;
      _Q26 = *(float64x2_t *)(v38 + 144);
      _Q27.f64[0] = *(float64_t *)(v38 + 280);
      _Q28 = *(float64x2_t *)(v38 + 264);
      _Q30 = *(float64x2_t *)(v38 + 384);
      _Q31.f64[0] = *(float64_t *)(v38 + 520);
      v372 = *(float64x2_t *)(v38 + 504);
      _Q19.f64[1] = v2762[9].f64[0];
      _Q21.f64[1] = v2762[8].f64[0];
      v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), _Q28, _Q24, 1), _Q30, _Q1.f64[0]), v372, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, v2762[7].f64[1]), _Q28, *(float64x2_t *)((char *)&v2762[7] + 8), 1), _Q30, v2762[8].f64[1]), v372, *(float64x2_t *)((char *)&v2762[8] + 8), 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
        FMLA            D21, D27, V20.D[1]
      }
      _Q24.f64[1] = v2762[24].f64[0];
      v375 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), _Q28, _Q20, 1), _Q30, _Q4.f64[0]), v372, _Q4, 1);
      __asm { FMLA            D21, D31, V4.D[1] }
      _Q9.f64[1] = v2762[23].f64[0];
      v376 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, v2762[22].f64[1]), _Q28, *(float64x2_t *)((char *)&v2762[22] + 8), 1), _Q30, v2762[23].f64[1]), v372, *(float64x2_t *)((char *)&v2762[23] + 8), 1);
      __asm
      {
        FMLA            D20, D27, V9.D[1]
        FMLA            D20, D31, V24.D[1]
      }
      v377 = *(float64x2_t *)(v38 + 624);
      _Q26.f64[0] = *(float64_t *)(v38 + 760);
      v378 = *(float64x2_t *)(v38 + 744);
      _Q29 = *(float64x2_t *)(v38 + 864);
      _Q30.f64[0] = *(float64_t *)(v38 + 1000);
      _Q31 = *(float64x2_t *)(v38 + 984);
      v381 = vmlaq_laneq_f64(vmlaq_n_f64(v373, v377, _Q2.f64[0]), v378, _Q2, 1);
      __asm { FMLA            D23, D26, V2.D[1] }
      _Q2.f64[1] = v2762[11].f64[0];
      v382 = vmlaq_laneq_f64(vmlaq_n_f64(v381, _Q29, _Q5.f64[0]), _Q31, _Q5, 1);
      __asm { FMLA            D23, D30, V5.D[1] }
      _Q5.f64[1] = v2762[10].f64[0];
      __asm { FMLA            D22, D26, V5.D[1] }
      _Q5.f64[1] = v2762[26].f64[0];
      v383 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v374, v377, v2762[9].f64[1]), v378, *(float64x2_t *)((char *)&v2762[9] + 8), 1), _Q29, v2762[10].f64[1]), _Q31, *(float64x2_t *)((char *)&v2762[10] + 8), 1);
      __asm { FMLA            D22, D30, V2.D[1] }
      _Q2.f64[1] = v2762[25].f64[0];
      v384 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v375, v377, _Q3.f64[0]), v378, _Q3, 1), _Q29, _Q18.f64[0]), _Q31, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v385 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v376, v377, v2762[24].f64[1]), v378, *(float64x2_t *)((char *)&v2762[24] + 8), 1), _Q29, v2762[25].f64[1]), _Q31, *(float64x2_t *)((char *)&v2762[25] + 8), 1);
      __asm
      {
        FMLA            D20, D26, V2.D[1]
        FMLA            D20, D30, V5.D[1]
      }
      v386 = *(float64x2_t *)(v38 + 1104);
      _Q5.f64[0] = *(float64_t *)(v38 + 1240);
      _Q18 = *(float64x2_t *)(v38 + 1224);
      _Q25 = *(float64x2_t *)(v38 + 1344);
      _Q26.f64[0] = *(float64_t *)(v38 + 1480);
      _Q27 = *(float64x2_t *)(v38 + 1464);
      _Q28.f64[1] = v2762[13].f64[0];
      _Q29.f64[1] = v2762[12].f64[0];
      _Q30.f64[1] = v2762[28].f64[0];
      _Q31.f64[1] = v2762[27].f64[0];
      v390 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v382, v386, _Q7.f64[0]), _Q18, _Q7, 1), _Q25, _Q17.f64[0]), _Q27, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v391 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v383, v386, v2762[11].f64[1]), _Q18, *(float64x2_t *)((char *)&v2762[11] + 8), 1), _Q25, v2762[12].f64[1]), _Q27, *(float64x2_t *)((char *)&v2762[12] + 8), 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v392 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v384, v386, _Q6.f64[0]), _Q18, _Q6, 1), _Q25, _Q16.f64[0]), _Q27, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v385, v386, v2762[26].f64[1]), _Q18, *(float64x2_t *)((char *)&v2762[26] + 8), 1), _Q25, v2762[27].f64[1]), _Q27, *(float64x2_t *)((char *)&v2762[27] + 8), 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v394 = *(float64x2_t *)(v38 + 1584);
      _Q5.f64[0] = *(float64_t *)(v38 + 1720);
      v395 = *(float64x2_t *)(v38 + 1704);
      _Q7.f64[0] = *(float64_t *)(v38 + 1840);
      v396 = *(float64x2_t *)(v38 + 1824);
      _Q18.f64[1] = v2762[6].f64[1];
      _Q24.f64[0] = v2762[14].f64[1];
      _Q25.f64[1] = v2762[14].f64[0];
      _Q26.f64[0] = v2762[22].f64[0];
      _Q27.f64[1] = v2762[21].f64[1];
      _Q28.f64[0] = v2762[29].f64[1];
      _Q29.f64[1] = v2762[29].f64[0];
      v397 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v390, v394, v2762[6].f64[0]), v395, v2762[6], 1), v396, v2762[7].f64[0]);
      __asm { FMLA            D23, D5, V18.D[1] }
      v398 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v391, v394, v2762[13].f64[1]), v395, *(float64x2_t *)((char *)&v2762[13] + 8), 1), v396, v2762[14].f64[1]);
      __asm { FMLA            D22, D5, V25.D[1] }
      v399 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v392, v394, v2762[21].f64[0]), v395, v2762[21], 1), v396, v2762[22].f64[0]);
      __asm { FMLA            D21, D5, V27.D[1] }
      v400 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v393, v394, v2762[28].f64[1]), v395, *(float64x2_t *)((char *)&v2762[28] + 8), 1), v396, v2762[29].f64[1]);
      __asm { FMLA            D20, D5, V29.D[1] }
      *(double *)(v36 + 112) = _Q23.f64[0] + _Q7.f64[0] * v2762[7].f64[0];
      *(float64x2_t *)(v36 + 96) = v397;
      *(double *)(v36 + 232) = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)(v36 + 216) = v398;
      *(double *)(v36 + 352) = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      *(float64x2_t *)(v36 + 336) = v399;
      *(double *)(v36 + 472) = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)(v36 + 456) = v400;
      v401 = *(float64x2_t *)(v38 + 48);
      v402 = *(float64x2_t *)(v38 + 64);
      v403 = *(float64x2_t *)(v33 + 1488);
      v404 = *(float64x2_t *)(v33 + 1472);
      v406 = *(float64x2_t *)(v38 + 288);
      v405 = *(float64x2_t *)(v38 + 304);
      v408 = *(float64x2_t *)(v38 + 408);
      v407 = *(float64x2_t *)(v38 + 424);
      v409 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v401, v2762[30].f64[0]), v404, v2762[30], 1), v406, v2762[31].f64[0]), v408, v2762[31], 1);
      v410 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v402, v2762[30].f64[0]), v403, v2762[30], 1), v405, v2762[31].f64[0]), v407, v2762[31], 1);
      _Q20 = *(float64x2_t *)((char *)&v2762[37] + 8);
      v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v401, v2762[37].f64[1]), v404, *(float64x2_t *)((char *)&v2762[37] + 8), 1), v406, v2762[38].f64[1]), v408, *(float64x2_t *)((char *)&v2762[38] + 8), 1);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v402, v2762[37].f64[1]), v403, *(float64x2_t *)((char *)&v2762[37] + 8), 1), v405, v2762[38].f64[1]), v407, *(float64x2_t *)((char *)&v2762[38] + 8), 1);
      v414 = *(float64x2_t *)(v38 + 528);
      v415 = *(float64x2_t *)(v38 + 544);
      v416 = *(float64x2_t *)(v33 + 1968);
      v417 = *(float64x2_t *)(v33 + 1952);
      v419 = *(float64x2_t *)(v38 + 768);
      v418 = *(float64x2_t *)(v38 + 784);
      v421 = *(float64x2_t *)(v38 + 888);
      v420 = *(float64x2_t *)(v38 + 904);
      v422 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v409, v414, v2762[32].f64[0]), v417, v2762[32], 1), v419, v2762[33].f64[0]), v421, v2762[33], 1);
      v423 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v410, v415, v2762[32].f64[0]), v416, v2762[32], 1), v418, v2762[33].f64[0]), v420, v2762[33], 1);
      v424 = vmlaq_laneq_f64(vmlaq_n_f64(v412, v414, v2762[39].f64[1]), v417, *(float64x2_t *)((char *)&v2762[39] + 8), 1);
      _Q4 = *(float64x2_t *)((char *)&v2762[39] + 8);
      v426 = vmlaq_laneq_f64(vmlaq_n_f64(v424, v419, v2762[40].f64[1]), v421, *(float64x2_t *)((char *)&v2762[40] + 8), 1);
      v427 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v413, v415, v2762[39].f64[1]), v416, *(float64x2_t *)((char *)&v2762[39] + 8), 1), v418, v2762[40].f64[1]), v420, *(float64x2_t *)((char *)&v2762[40] + 8), 1);
      v428 = *(float64x2_t *)(v38 + 1008);
      v429 = *(float64x2_t *)(v38 + 1024);
      v430 = *(float64x2_t *)(v33 + 2448);
      v431 = *(float64x2_t *)(v33 + 2432);
      v432 = *(float64x2_t *)(v38 + 1264);
      v433 = *(float64x2_t *)(v38 + 1248);
      _Q22 = *(float64x2_t *)(v38 + 1368);
      v434 = *(float64x2_t *)(v38 + 1384);
      v436 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v422, v428, v2762[34].f64[0]), v431, v2762[34], 1), v433, v2762[35].f64[0]), _Q22, v2762[35], 1);
      v437 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v423, v429, v2762[34].f64[0]), v430, v2762[34], 1), v432, v2762[35].f64[0]), v434, v2762[35], 1);
      v438 = vmlaq_laneq_f64(vmlaq_n_f64(v426, v428, v2762[41].f64[1]), v431, *(float64x2_t *)((char *)&v2762[41] + 8), 1);
      _Q5 = *(float64x2_t *)((char *)&v2762[41] + 8);
      v440 = vmlaq_laneq_f64(vmlaq_n_f64(v438, v433, v2762[42].f64[1]), _Q22, *(float64x2_t *)((char *)&v2762[42] + 8), 1);
      v441 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v427, v429, v2762[41].f64[1]), v430, *(float64x2_t *)((char *)&v2762[41] + 8), 1), v432, v2762[42].f64[1]), v434, *(float64x2_t *)((char *)&v2762[42] + 8), 1);
      v442 = *(float64x2_t *)(v38 + 1504);
      v443 = *(float64x2_t *)(v38 + 1488);
      v444 = *(float64x2_t *)(v33 + 2928);
      v445 = *(float64x2_t *)(v33 + 2912);
      v446 = *(float64x2_t *)(v38 + 1744);
      v447 = *(float64x2_t *)(v38 + 1728);
      v448 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v437, v442, v2762[36].f64[0]), v444, v2762[36], 1), v446, v2762[37].f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v2762[42] + 8);
      v450 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v440, v443, v2762[43].f64[1]), v445, *(float64x2_t *)((char *)&v2762[43] + 8), 1), v447, v2762[44].f64[1]);
      v451 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v441, v442, v2762[43].f64[1]), v444, *(float64x2_t *)((char *)&v2762[43] + 8), 1), v446, v2762[44].f64[1]);
      *(float64x2_t *)(v36 + 480) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v436, v443, v2762[36].f64[0]), v445, v2762[36], 1), v447, v2762[37].f64[0]);
      *(float64x2_t *)(v36 + 496) = v448;
      *(float64x2_t *)(v36 + 600) = v450;
      *(float64x2_t *)(v36 + 616) = v451;
      v453 = *(float64x2_t *)(v38 + 80);
      v452 = *(float64x2_t *)(v38 + 96);
      v454 = *(float64x2_t *)(v33 + 1520);
      v455 = *(float64x2_t *)(v33 + 1504);
      v457 = *(float64x2_t *)(v38 + 320);
      v456 = *(float64x2_t *)(v38 + 336);
      v459 = *(float64x2_t *)(v38 + 440);
      v458 = *(float64x2_t *)(v38 + 456);
      v460 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v453, v2762[30].f64[0]), v455, v2762[30], 1), v457, v2762[31].f64[0]), v459, v2762[31], 1);
      v461 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v2762[30].f64[0]), v454, v2762[30], 1), v456, v2762[31].f64[0]), v458, v2762[31], 1);
      v462 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v453, v2762[37].f64[1]), v455, *(float64x2_t *)((char *)&v2762[37] + 8), 1), v457, v2762[38].f64[1]), v459, *(float64x2_t *)((char *)&v2762[38] + 8), 1);
      v463 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v2762[37].f64[1]), v454, *(float64x2_t *)((char *)&v2762[37] + 8), 1), v456, v2762[38].f64[1]), v458, *(float64x2_t *)((char *)&v2762[38] + 8), 1);
      v465 = *(float64x2_t *)(v38 + 560);
      v464 = *(float64x2_t *)(v38 + 576);
      v466 = *(float64x2_t *)(v33 + 2000);
      v467 = *(float64x2_t *)(v33 + 1984);
      v469 = *(float64x2_t *)(v38 + 800);
      v468 = *(float64x2_t *)(v38 + 816);
      v471 = *(float64x2_t *)(v38 + 920);
      v470 = *(float64x2_t *)(v38 + 936);
      v472 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v460, v465, v2762[32].f64[0]), v467, v2762[32], 1), v469, v2762[33].f64[0]), v471, v2762[33], 1);
      v473 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v461, v464, v2762[32].f64[0]), v466, v2762[32], 1), v468, v2762[33].f64[0]), v470, v2762[33], 1);
      v474 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v462, v465, v2762[39].f64[1]), v467, *(float64x2_t *)((char *)&v2762[39] + 8), 1), v469, v2762[40].f64[1]), v471, *(float64x2_t *)((char *)&v2762[40] + 8), 1);
      v475 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v463, v464, v2762[39].f64[1]), v466, *(float64x2_t *)((char *)&v2762[39] + 8), 1), v468, v2762[40].f64[1]), v470, *(float64x2_t *)((char *)&v2762[40] + 8), 1);
      v476 = *(float64x2_t *)(v38 + 1056);
      v477 = *(float64x2_t *)(v38 + 1040);
      v478 = *(float64x2_t *)(v33 + 2480);
      v479 = *(float64x2_t *)(v33 + 2464);
      v480 = *(float64x2_t *)(v38 + 1296);
      v481 = *(float64x2_t *)(v38 + 1280);
      v483 = *(float64x2_t *)(v38 + 1400);
      v482 = *(float64x2_t *)(v38 + 1416);
      v484 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v472, v477, v2762[34].f64[0]), v479, v2762[34], 1), v481, v2762[35].f64[0]), v483, v2762[35], 1);
      v485 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v473, v476, v2762[34].f64[0]), v478, v2762[34], 1), v480, v2762[35].f64[0]), v482, v2762[35], 1);
      v486 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v474, v477, v2762[41].f64[1]), v479, *(float64x2_t *)((char *)&v2762[41] + 8), 1), v481, v2762[42].f64[1]), v483, *(float64x2_t *)((char *)&v2762[42] + 8), 1);
      v487 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v475, v476, v2762[41].f64[1]), v478, *(float64x2_t *)((char *)&v2762[41] + 8), 1), v480, v2762[42].f64[1]), v482, *(float64x2_t *)((char *)&v2762[42] + 8), 1);
      v488 = *(float64x2_t *)(v38 + 1536);
      v489 = *(float64x2_t *)(v38 + 1520);
      v490 = *(float64x2_t *)(v33 + 2960);
      v491 = *(float64x2_t *)(v33 + 2944);
      v492 = *(float64x2_t *)(v38 + 1776);
      v493 = *(float64x2_t *)(v38 + 1760);
      v494 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v485, v488, v2762[36].f64[0]), v490, v2762[36], 1), v492, v2762[37].f64[0]);
      v495 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v486, v489, v2762[43].f64[1]), v491, *(float64x2_t *)((char *)&v2762[43] + 8), 1), v493, v2762[44].f64[1]);
      v496 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v487, v488, v2762[43].f64[1]), v490, *(float64x2_t *)((char *)&v2762[43] + 8), 1), v492, v2762[44].f64[1]);
      *(float64x2_t *)(v36 + 512) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v484, v489, v2762[36].f64[0]), v491, v2762[36], 1), v493, v2762[37].f64[0]);
      *(float64x2_t *)(v36 + 528) = v494;
      *(float64x2_t *)(v36 + 632) = v495;
      *(float64x2_t *)(v36 + 648) = v496;
      v498 = *(float64x2_t *)(v38 + 112);
      v497 = *(float64x2_t *)(v38 + 128);
      v499 = *(float64x2_t *)(v33 + 1552);
      v500 = *(float64x2_t *)(v33 + 1536);
      v502 = *(float64x2_t *)(v38 + 352);
      v501 = *(float64x2_t *)(v38 + 368);
      v504 = *(float64x2_t *)(v38 + 472);
      v503 = *(float64x2_t *)(v38 + 488);
      v505 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, v2762[30].f64[0]), v500, v2762[30], 1), v502, v2762[31].f64[0]), v504, v2762[31], 1);
      v506 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v2762[30].f64[0]), v499, v2762[30], 1), v501, v2762[31].f64[0]), v503, v2762[31], 1);
      v507 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, v2762[37].f64[1]), v500, *(float64x2_t *)((char *)&v2762[37] + 8), 1), v502, v2762[38].f64[1]), v504, *(float64x2_t *)((char *)&v2762[38] + 8), 1);
      v508 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v2762[37].f64[1]), v499, *(float64x2_t *)((char *)&v2762[37] + 8), 1), v501, v2762[38].f64[1]), v503, *(float64x2_t *)((char *)&v2762[38] + 8), 1);
      v510 = *(float64x2_t *)(v38 + 592);
      v509 = *(float64x2_t *)(v38 + 608);
      v511 = *(float64x2_t *)(v33 + 2032);
      v512 = *(float64x2_t *)(v33 + 2016);
      v514 = *(float64x2_t *)(v38 + 832);
      v513 = *(float64x2_t *)(v38 + 848);
      v516 = *(float64x2_t *)(v38 + 952);
      v515 = *(float64x2_t *)(v38 + 968);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v505, v510, v2762[32].f64[0]), v512, v2762[32], 1), v514, v2762[33].f64[0]), v516, v2762[33], 1);
      v518 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v506, v509, v2762[32].f64[0]), v511, v2762[32], 1), v513, v2762[33].f64[0]), v515, v2762[33], 1);
      v519 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v507, v510, v2762[39].f64[1]), v512, *(float64x2_t *)((char *)&v2762[39] + 8), 1), v514, v2762[40].f64[1]), v516, *(float64x2_t *)((char *)&v2762[40] + 8), 1);
      v520 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v508, v509, v2762[39].f64[1]), v511, *(float64x2_t *)((char *)&v2762[39] + 8), 1), v513, v2762[40].f64[1]), v515, *(float64x2_t *)((char *)&v2762[40] + 8), 1);
      v521 = *(float64x2_t *)(v38 + 1088);
      v522 = *(float64x2_t *)(v38 + 1072);
      v523 = *(float64x2_t *)(v33 + 2512);
      v524 = *(float64x2_t *)(v33 + 2496);
      v525 = *(float64x2_t *)(v38 + 1328);
      v526 = *(float64x2_t *)(v38 + 1312);
      _Q21 = *(float64x2_t *)(v38 + 1432);
      _Q19 = *(float64x2_t *)(v38 + 1448);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v517, v522, v2762[34].f64[0]), v524, v2762[34], 1), v526, v2762[35].f64[0]), _Q21, v2762[35], 1);
      v530 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v518, v521, v2762[34].f64[0]), v523, v2762[34], 1), v525, v2762[35].f64[0]), _Q19, v2762[35], 1);
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v519, v522, v2762[41].f64[1]), v524, *(float64x2_t *)((char *)&v2762[41] + 8), 1), v526, v2762[42].f64[1]), _Q21, *(float64x2_t *)((char *)&v2762[42] + 8), 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v520, v521, v2762[41].f64[1]), v523, *(float64x2_t *)((char *)&v2762[41] + 8), 1), v525, v2762[42].f64[1]), _Q19, *(float64x2_t *)((char *)&v2762[42] + 8), 1);
      _Q2 = *(float64x2_t *)(v38 + 1568);
      v534 = *(float64x2_t *)(v38 + 1552);
      _Q7 = *(float64x2_t *)(v33 + 2992);
      v536 = *(float64x2_t *)(v33 + 2976);
      _Q17 = *(float64x2_t *)(v38 + 1808);
      v538 = *(float64x2_t *)(v38 + 1792);
      _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v530, _Q2, v2762[36].f64[0]), _Q7, v2762[36], 1), _Q17, v2762[37].f64[0]);
      v540 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v531, v534, v2762[43].f64[1]), v536, *(float64x2_t *)((char *)&v2762[43] + 8), 1), v538, v2762[44].f64[1]);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, _Q2, v2762[43].f64[1]), _Q7, *(float64x2_t *)((char *)&v2762[43] + 8), 1), _Q17, v2762[44].f64[1]);
      *(float64x2_t *)(v36 + 544) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q24, v534, v2762[36].f64[0]), v536, v2762[36], 1), v538, v2762[37].f64[0]);
      *(float64x2_t *)(v36 + 560) = _Q25;
      *(float64x2_t *)(v36 + 664) = v540;
      *(float64x2_t *)(v36 + 680) = _Q0;
      v542 = *(float64x2_t *)(v38 + 144);
      _Q2.f64[0] = *(float64_t *)(v38 + 280);
      v543 = *(float64x2_t *)(v38 + 264);
      v544 = *(float64x2_t *)(v38 + 384);
      _Q17.f64[0] = *(float64_t *)(v38 + 520);
      v545 = *(float64x2_t *)(v38 + 504);
      _Q19.f64[1] = v2762[31].f64[1];
      _Q21.f64[1] = v2762[30].f64[1];
      _Q22.f64[1] = v2762[39].f64[0];
      v546 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v542, v2762[30].f64[0]), v543, v2762[30], 1), v544, v2762[31].f64[0]), v545, v2762[31], 1);
      __asm
      {
        FMLA            D24, D2, V21.D[1]
        FMLA            D24, D17, V19.D[1]
      }
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v542, _Q20.f64[0]), v543, _Q20, 1), v544, v2762[38].f64[1]), v545, *(float64x2_t *)((char *)&v2762[38] + 8), 1);
      __asm
      {
        FMLA            D0, D2, V20.D[1]
        FMLA            D0, D17, V22.D[1]
      }
      _Q6 = *(float64x2_t *)(v38 + 624);
      _Q7.f64[0] = *(float64_t *)(v38 + 760);
      v549 = *(float64x2_t *)(v38 + 744);
      _Q18 = *(float64x2_t *)(v38 + 864);
      _Q19.f64[0] = *(float64_t *)(v38 + 1000);
      _Q20 = *(float64x2_t *)(v38 + 984);
      _Q21.f64[1] = v2762[33].f64[1];
      _Q22.f64[1] = v2762[32].f64[1];
      _Q25.f64[1] = v2762[41].f64[0];
      v552 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v546, _Q6, v2762[32].f64[0]), v549, v2762[32], 1), _Q18, v2762[33].f64[0]), _Q20, v2762[33], 1);
      __asm
      {
        FMLA            D24, D7, V22.D[1]
        FMLA            D24, D19, V21.D[1]
      }
      v553 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v547, _Q6, _Q4.f64[0]), v549, _Q4, 1), _Q18, v2762[40].f64[1]), _Q20, *(float64x2_t *)((char *)&v2762[40] + 8), 1);
      __asm
      {
        FMLA            D0, D7, V4.D[1]
        FMLA            D0, D19, V25.D[1]
      }
      _Q4 = *(float64x2_t *)(v38 + 1104);
      _Q6.f64[0] = *(float64_t *)(v38 + 1240);
      v555 = *(float64x2_t *)(v38 + 1224);
      _Q17 = *(float64x2_t *)(v38 + 1344);
      _Q18.f64[0] = *(float64_t *)(v38 + 1480);
      _Q19 = *(float64x2_t *)(v38 + 1464);
      _Q20.f64[1] = v2762[35].f64[1];
      _Q21.f64[1] = v2762[34].f64[1];
      v558 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v552, _Q4, v2762[34].f64[0]), v555, v2762[34], 1), _Q17, v2762[35].f64[0]), _Q19, v2762[35], 1);
      __asm
      {
        FMLA            D24, D6, V21.D[1]
        FMLA            D24, D18, V20.D[1]
      }
      v559 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v553, _Q4, _Q5.f64[0]), v555, _Q5, 1), _Q17, _Q3.f64[0]), _Q19, _Q3, 1);
      __asm
      {
        FMLA            D0, D6, V5.D[1]
        FMLA            D0, D18, V3.D[1]
      }
      v560 = *(float64x2_t *)(v38 + 1584);
      _Q4.f64[0] = *(float64_t *)(v38 + 1720);
      v561 = *(float64x2_t *)(v38 + 1704);
      _Q6.f64[0] = *(float64_t *)(v38 + 1840);
      v562 = *(float64x2_t *)(v38 + 1824);
      _Q17.f64[1] = v2762[36].f64[1];
      _Q18.f64[0] = v2762[44].f64[1];
      _Q19.f64[1] = v2762[44].f64[0];
      v563 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v558, v560, v2762[36].f64[0]), v561, v2762[36], 1), v562, v2762[37].f64[0]);
      __asm { FMLA            D24, D4, V17.D[1] }
      v564 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v559, v560, v2762[43].f64[1]), v561, *(float64x2_t *)((char *)&v2762[43] + 8), 1), v562, v2762[44].f64[1]);
      __asm { FMLA            D0, D4, V19.D[1] }
      *(double *)(v36 + 592) = _Q24.f64[0] + _Q6.f64[0] * v2762[37].f64[0];
      *(float64x2_t *)(v36 + 576) = v563;
      *(double *)(v36 + 712) = _Q0.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)(v36 + 696) = v564;
    }
    if (v35)
    {
      bzero(v35, 0x438uLL);
      if (v2785.f64[0] <= 1.0e-20)
      {
        v597 = v2771;
        *(_QWORD *)&v597.f64[1] = vextq_s8((int8x16_t)v597, (int8x16_t)v597, 8uLL).u64[0];
        __asm { FMOV            V0.2D, #-0.5 }
        v599 = vmulq_f64(v597, _Q0);
        *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v2770, _Q0);
        v600 = (int8x16_t)vnegq_f64(v599);
        v601 = (float64x2_t)vextq_s8(v600, (int8x16_t)vnegq_f64((float64x2_t)*(unint64_t *)&_Q0.f64[0]), 8uLL);
        v602 = (float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&_Q0.f64[0], (int8x16_t)*(unint64_t *)&_Q0.f64[0], 8uLL);
        v591 = (int8x16_t)vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v599, v600, 8uLL), (float64x2_t)0);
        *(_QWORD *)&v592 = vextq_s8(v591, v591, 8uLL).u64[0];
        v595 = (int8x16_t)vaddq_f64((float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&_Q0.f64[0], (int8x16_t)v599, 8uLL), (float64x2_t)xmmword_21030D320);
        *(_QWORD *)&v596 = vextq_s8(v595, v595, 8uLL).u64[0];
        v593 = vaddq_f64(v601, (float64x2_t)0);
        *(_QWORD *)&v594 = vextq_s8((int8x16_t)v593, (int8x16_t)v593, 8uLL).u64[0];
        __asm { FMOV            V6.2D, #1.0 }
        v590 = vaddq_f64((float64x2_t)0, _Q6);
        v588 = (int8x16_t)vaddq_f64(v602, (float64x2_t)xmmword_21030D320);
        v589 = (float64x2_t)vextq_s8(v588, v588, 8uLL);
      }
      else
      {
        v2784 = vextq_s8(v2775, v2775, 8uLL);
        v565 = sqrt(v2785.f64[0]);
        v566 = __sincos_stret(v565);
        v567.f64[0] = (1.0 - v566.__cosval) / (v565 * v565);
        *(_QWORD *)&v568.f64[0] = v2775.i64[0];
        *(_QWORD *)&v568.f64[1] = v2784.i64[0];
        v569 = vmulq_n_f64(v568, v567.f64[0]);
        *(_QWORD *)&v567.f64[0] = *(_OWORD *)&vmulq_f64(v567, v2774);
        v570 = (int8x16_t)vnegq_f64(v569);
        v571 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v567.f64[0], (int8x16_t)v569, 8uLL), (float64x2_t)xmmword_21030D320);
        v572 = vaddq_f64((float64x2_t)vextq_s8(v570, (int8x16_t)vnegq_f64((float64x2_t)*(unint64_t *)&v567.f64[0]), 8uLL), (float64x2_t)0);
        v573 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v569, v570, 8uLL), (float64x2_t)0);
        __asm { FMOV            V4.2D, #1.0 }
        v575.f64[0] = (v565 - v566.__sinval) / (v565 * (v565 * v565));
        v576 = vmulq_n_f64(v568, v575.f64[0]);
        v577 = vmulq_f64(v575, v2774);
        v578 = vnegq_f64(v576);
        *(_QWORD *)&v579.f64[0] = *(_OWORD *)&vnegq_f64(v577);
        v579.f64[1] = v576.f64[1];
        v580.f64[0] = v2774.f64[0];
        *(_QWORD *)&v580.f64[1] = v2775.i64[0];
        v581 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v578, (int8x16_t)v576, 8uLL), *(double *)v2784.i64);
        v582 = vmulq_f64(v580, v576);
        v583 = vmulq_n_f64(v568, v577.f64[0]);
        v584 = vmulq_n_f64(v579, v2774.f64[0]);
        v585 = (int64x2_t)vmulq_f64(v576, v568);
        *(_QWORD *)&v577.f64[0] = *(_OWORD *)&vmulq_f64(v577, v2774);
        v576.f64[0] = v581.f64[0];
        v576.f64[1] = v584.f64[0];
        *(_QWORD *)&v577.f64[1] = v585.i64[0];
        v586 = vsubq_f64(v576, v577);
        v581.f64[0] = v586.f64[0];
        v587 = vsubq_f64(vmulq_f64((float64x2_t)v2775, v578), (float64x2_t)vdupq_laneq_s64(v585, 1));
        v584.f64[0] = v586.f64[1];
        v588 = (int8x16_t)vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v567.f64[0], (int8x16_t)*(unint64_t *)&v567.f64[0], 8uLL), (float64x2_t)xmmword_21030D320), v581);
        v589 = (float64x2_t)vextq_s8(v588, v588, 8uLL);
        v590 = vaddq_f64(vaddq_f64((float64x2_t)0, _Q4), v587);
        v591 = (int8x16_t)vaddq_f64(v573, v583);
        *(_QWORD *)&v592 = vextq_s8(v591, v591, 8uLL).u64[0];
        v593 = vaddq_f64(v572, v582);
        *(_QWORD *)&v594 = vextq_s8((int8x16_t)v593, (int8x16_t)v593, 8uLL).u64[0];
        v595 = (int8x16_t)vaddq_f64(v571, v584);
        *(_QWORD *)&v596 = vextq_s8(v595, v595, 8uLL).u64[0];
      }
      v604.f64[0] = v2797.f64[0];
      v604.f64[1] = v2793.f64[0];
      *(_QWORD *)&v605.f64[0] = v2795.i64[0];
      v605.f64[1] = v2792.f64[0];
      *(_QWORD *)&v606.f64[0] = v2794.i64[0];
      *(_QWORD *)&v606.f64[1] = v2791.i64[0];
      _Q18 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v604, *(double *)v2786.i64), v605, *(double *)v2773.i64), v606, v2772.f64[0]);
      v608 = v2799.f64[0] * *(double *)v2786.i64
           + v2798.f64[0] * *(double *)v2773.i64
           + *(double *)v2796.i64 * v2772.f64[0];
      v609 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v604, *(double *)&v2768), v605, *(double *)v2788.i64), v606, *(double *)&v2767);
      v610 = v2799.f64[0] * *(double *)&v2768
           + v2798.f64[0] * *(double *)v2788.i64
           + *(double *)v2796.i64 * *(double *)&v2767;
      v611 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v604, v2787.f64[0]), v605, *(double *)&v2769), v606, v2789.f64[0]);
      v605.f64[0] = v2799.f64[0] * v2787.f64[0] + v2798.f64[0] * *(double *)&v2769 + *(double *)v2796.i64 * v2789.f64[0];
      v612 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, *(double *)v588.i64), v609, v594), v611, *(double *)v591.i64);
      v613 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, v589.f64[0]), v609, *(double *)v595.i64), v611, v592);
      _D3 = v608 * v589.f64[0] + v610 * *(double *)v595.i64 + v605.f64[0] * v592;
      v615 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, v593.f64[0]), v609, v596), v611, v590.f64[0]);
      v590.f64[0] = v608 * v593.f64[0] + v610 * v596 + v605.f64[0] * v590.f64[0];
      v593.f64[0] = *(float64_t *)(v33 + 168);
      _Q2 = *(float64x2_t *)(v33 + 152);
      v589.f64[0] = *(float64_t *)(v33 + 192);
      _Q16 = *(float64x2_t *)(v33 + 176);
      v618 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v612, _Q2.f64[0]), v613, _Q2, 1), v615, v593.f64[0]);
      __asm { FMLA            D18, D3, V2.D[1] }
      v593.f64[0] = _Q18.f64[0] + v590.f64[0] * v593.f64[0];
      v619 = vmlaq_laneq_f64(vmulq_n_f64(v612, _Q16.f64[0]), v613, _Q16, 1);
      __asm { FMLA            D18, D3, V16.D[1] }
      _Q16.f64[0] = *(float64_t *)(v33 + 216);
      v620 = vmlaq_n_f64(v619, v615, v589.f64[0]);
      v589.f64[0] = _Q18.f64[0] + v590.f64[0] * v589.f64[0];
      _Q18 = *(float64x2_t *)(v33 + 200);
      __asm { FMLA            D4, D3, V18.D[1] }
      v590.f64[0] = _D4 + v590.f64[0] * _Q16.f64[0];
      *(float64x2_t *)((char *)v35 + 408) = vnegq_f64(v618);
      *(_QWORD *)&v35[26].f64[1] = *(_OWORD *)&vnegq_f64(v593);
      v35[33] = vnegq_f64(v620);
      *(_QWORD *)&v35[34].f64[0] = *(_OWORD *)&vnegq_f64(v589);
      *(float64x2_t *)((char *)v35 + 648) = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v612, _Q18.f64[0]), v613, _Q18, 1), v615, _Q16.f64[0]));
      *(_QWORD *)&v35[41].f64[1] = *(_OWORD *)&vnegq_f64(v590);
      v623.f64[0] = v2807.f64[0];
      v623.f64[1] = v2806.f64[0];
      v624 = vnegq_f64(v623);
      v625 = vnegq_f64(v2808);
      *(_QWORD *)&v620.f64[0] = v2804.i64[0];
      *(_QWORD *)&v620.f64[1] = v2803.i64[0];
      v626 = vnegq_f64(v620);
      v627 = vnegq_f64(v2805);
      *(_QWORD *)&v628.f64[0] = v2801.i64[0];
      *(_QWORD *)&v628.f64[1] = v2800.i64[0];
      v629 = vnegq_f64(v628);
      v630 = vnegq_f64(v2802);
      *(float64x2_t *)((char *)v35 + 24) = v624;
      v35[2].f64[1] = v625.f64[0];
      v35[9] = v626;
      v35[10].f64[0] = v627.f64[0];
      *(float64x2_t *)((char *)v35 + 264) = v629;
      v35[17].f64[1] = v630.f64[0];
      v589.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 40);
      _Q16.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 64);
      _Q18.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 88);
      v631 = vnegq_f64(v589);
      v632 = vnegq_f64(_Q16);
      v633 = vnegq_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 48));
      v634 = vnegq_f64(_Q18);
      v635 = vnegq_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 72));
      v35[24] = vnegq_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 24));
      v35[25].f64[0] = v631.f64[0];
      *(float64x2_t *)((char *)v35 + 504) = v633;
      v35[32].f64[1] = v632.f64[0];
      v35[39] = v635;
      v35[40].f64[0] = v634.f64[0];
      v631.f64[0] = *(float64_t *)(v33 + 240);
      v632.f64[0] = *(float64_t *)(v33 + 264);
      v636 = *(float64x2_t *)(v33 + 248);
      v634.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 16);
      v637 = **(float64x2_t **)&v39;
      *(float64x2_t *)((char *)v35 + 744) = vnegq_f64(*(float64x2_t *)(v33 + 224));
      *(_QWORD *)&v35[47].f64[1] = *(_OWORD *)&vnegq_f64(v631);
      v35[54] = vnegq_f64(v636);
      *(_QWORD *)&v35[55].f64[0] = *(_OWORD *)&vnegq_f64(v632);
      *(float64x2_t *)((char *)v35 + 984) = vnegq_f64(v637);
      v638 = vnegq_f64(v634);
      v35[62].f64[1] = v638.f64[0];
      v638.f64[0] = *(float64_t *)(v33 + 3176);
      *v35 = vmulq_n_f64(v624, v638.f64[0]);
      v639 = vmulq_n_f64(v626, v638.f64[0]);
      *(_QWORD *)&v35[1].f64[0] = *(_OWORD *)&vmulq_f64(v638, v625);
      *(float64x2_t *)((char *)v35 + 120) = v639;
      *(_QWORD *)&v35[8].f64[1] = *(_OWORD *)&vmulq_f64(v638, v627);
      v35[15] = vmulq_n_f64(v629, v638.f64[0]);
      v640 = vmulq_f64(v638, v630);
      v35[16].f64[0] = v640.f64[0];
      v640.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 256);
      v639.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 280);
      v641 = *(float64x2_t *)(*(_QWORD *)&v39 + 264);
      v630.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 304);
      v642 = *(float64x2_t *)(*(_QWORD *)&v39 + 288);
      v643 = vnegq_f64(v639);
      *(float64x2_t *)((char *)v35 + 360) = vnegq_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 240));
      *(_QWORD *)&v35[23].f64[1] = *(_OWORD *)&vnegq_f64(v640);
      v644 = vnegq_f64(v630);
      v35[30] = vnegq_f64(v641);
      v35[31].f64[0] = v643.f64[0];
      *(float64x2_t *)((char *)v35 + 600) = vnegq_f64(v642);
      v35[38].f64[1] = v644.f64[0];
      v644.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 184);
      v643.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 208);
      v645 = *(float64x2_t *)(*(_QWORD *)&v39 + 192);
      v630.f64[0] = *(float64_t *)(*(_QWORD *)&v39 + 232);
      v646 = *(float64x2_t *)(*(_QWORD *)&v39 + 216);
      v35[45] = vnegq_f64(*(float64x2_t *)(*(_QWORD *)&v39 + 168));
      *(_QWORD *)&v35[46].f64[0] = *(_OWORD *)&vnegq_f64(v644);
      *(float64x2_t *)((char *)v35 + 840) = vnegq_f64(v645);
      *(_QWORD *)&v35[53].f64[1] = *(_OWORD *)&vnegq_f64(v643);
      v35[60] = vnegq_f64(v646);
      *(_QWORD *)&v35[61].f64[0] = *(_OWORD *)&vnegq_f64(v630);
      v35[27].f64[0] = -1.0;
      v35[35].f64[0] = -1.0;
      v35[43].f64[0] = -1.0;
      v35[51].f64[0] = -1.0;
      v35[59].f64[0] = -1.0;
      v35[67].f64[0] = -1.0;
      MEMORY[0x24BDAC7A8]();
      v647 = &v2762[-68];
      memcpy(&v2762[-68], v35, 0x438uLL);
      v649 = *(float64x2_t *)(v38 + 48);
      v648 = *(float64x2_t *)(v38 + 64);
      v650 = *(float64x2_t *)(v33 + 1488);
      v651 = *(float64x2_t *)(v33 + 1472);
      v653 = *(float64x2_t *)(v38 + 288);
      v652 = *(float64x2_t *)(v38 + 304);
      v655 = *(float64x2_t *)(v38 + 408);
      v654 = *(float64x2_t *)(v38 + 424);
      v656 = v2762[-67];
      v657 = *(float64x2_t *)((char *)&v2762[-60] + 8);
      v658 = *(float64x2_t *)((char *)&v2762[-61] + 8);
      v659 = v2762[-53];
      v660 = *(float64x2_t *)((char *)&v2762[-45] + 8);
      v661 = *(float64x2_t *)((char *)&v2762[-46] + 8);
      _Q24 = *v647;
      v663 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v649, v647->f64[0]), v651, *v647, 1), v653, v656.f64[0]), v655, v656, 1);
      v664 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v648, v647->f64[0]), v650, *v647, 1), v652, v656.f64[0]), v654, v656, 1);
      v665 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v649, v658.f64[0]), v651, v658, 1), v653, v657.f64[0]), v655, v657, 1);
      v666 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v648, v658.f64[0]), v650, v658, 1), v652, v657.f64[0]), v654, v657, 1);
      _Q20 = v659;
      v668 = v2762[-52];
      v669 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v649, v659.f64[0]), v651, v659, 1), v653, v668.f64[0]), v655, v668, 1);
      v670 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v648, v659.f64[0]), v650, v659, 1), v652, v668.f64[0]), v654, v668, 1);
      v671 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v649, v661.f64[0]), v651, v661, 1), v653, v660.f64[0]), v655, v660, 1);
      v672 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v648, v661.f64[0]), v650, v661, 1), v652, v660.f64[0]), v654, v660, 1);
      v674 = *(float64x2_t *)(v38 + 528);
      v673 = *(float64x2_t *)(v38 + 544);
      v675 = *(float64x2_t *)(v33 + 1968);
      v676 = *(float64x2_t *)(v33 + 1952);
      v678 = *(float64x2_t *)(v38 + 768);
      v677 = *(float64x2_t *)(v38 + 784);
      v680 = *(float64x2_t *)(v38 + 888);
      v679 = *(float64x2_t *)(v38 + 904);
      v681 = *(float64x2_t *)((char *)&v2762[-58] + 8);
      v682 = *(float64x2_t *)((char *)&v2762[-59] + 8);
      v683 = *(float64x2_t *)((char *)&v2762[-43] + 8);
      v684 = *(float64x2_t *)((char *)&v2762[-44] + 8);
      _Q1 = v2762[-67];
      v686 = v2762[-66];
      _Q2 = v686;
      v688 = v2762[-65];
      v689 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v663, v674, v686.f64[0]), v676, v686, 1), v678, v688.f64[0]), v680, v688, 1);
      v690 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v664, v673, v686.f64[0]), v675, v686, 1), v677, v688.f64[0]), v679, v688, 1);
      v691 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v665, v674, v682.f64[0]), v676, v682, 1), v678, v681.f64[0]), v680, v681, 1);
      v692 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v666, v673, v682.f64[0]), v675, v682, 1), v677, v681.f64[0]), v679, v681, 1);
      _Q4 = v2762[-52];
      v694 = v2762[-51];
      _Q3 = v694;
      v696 = v2762[-50];
      v697 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v669, v674, v694.f64[0]), v676, v694, 1), v678, v696.f64[0]), v680, v696, 1);
      v698 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v670, v673, v694.f64[0]), v675, v694, 1), v677, v696.f64[0]), v679, v696, 1);
      v699 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v671, v674, v684.f64[0]), v676, v684, 1), v678, v683.f64[0]), v680, v683, 1);
      v700 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v672, v673, v684.f64[0]), v675, v684, 1), v677, v683.f64[0]), v679, v683, 1);
      v702 = *(float64x2_t *)(v38 + 1008);
      v701 = *(float64x2_t *)(v38 + 1024);
      v703 = *(float64x2_t *)(v33 + 2448);
      v704 = *(float64x2_t *)(v33 + 2432);
      v705 = *(float64x2_t *)(v38 + 1264);
      v706 = *(float64x2_t *)(v38 + 1248);
      v707 = *(float64x2_t *)(v38 + 1368);
      v708 = *(float64x2_t *)(v38 + 1384);
      v709 = *(float64x2_t *)((char *)&v2762[-56] + 8);
      v710 = *(float64x2_t *)((char *)&v2762[-57] + 8);
      v711 = *(float64x2_t *)((char *)&v2762[-41] + 8);
      v712 = *(float64x2_t *)((char *)&v2762[-42] + 8);
      _Q5 = v2762[-65];
      v714 = v2762[-64];
      _Q7 = v714;
      v716 = v2762[-63];
      v717 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v689, v702, v714.f64[0]), v704, v714, 1), v706, v716.f64[0]), v707, v716, 1);
      v718 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v690, v701, v714.f64[0]), v703, v714, 1), v705, v716.f64[0]), v708, v716, 1);
      v719 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v691, v702, v710.f64[0]), v704, v710, 1), v706, v709.f64[0]), v707, v709, 1);
      v720 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v692, v701, v710.f64[0]), v703, v710, 1), v705, v709.f64[0]), v708, v709, 1);
      _Q18 = v2762[-50];
      v721 = v2762[-49];
      _Q6 = v721;
      v724 = v2762[-48];
      v725 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v697, v702, v721.f64[0]), v704, v721, 1), v706, v724.f64[0]), v707, v724, 1);
      v726 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v698, v701, v721.f64[0]), v703, v721, 1), v705, v724.f64[0]), v708, v724, 1);
      v727 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v699, v702, v712.f64[0]), v704, v712, 1), v706, v711.f64[0]), v707, v711, 1);
      v728 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v700, v701, v712.f64[0]), v703, v712, 1), v705, v711.f64[0]), v708, v711, 1);
      v729 = *(float64x2_t *)(v38 + 1504);
      v730 = *(float64x2_t *)(v38 + 1488);
      v731 = *(float64x2_t *)(v33 + 2928);
      v732 = *(float64x2_t *)(v33 + 2912);
      v733 = *(float64x2_t *)(v38 + 1744);
      v734 = *(float64x2_t *)(v38 + 1728);
      v701.f64[0] = v2762[-61].f64[0];
      v707.f64[0] = v2762[-54].f64[1];
      v735 = *(float64x2_t *)((char *)&v2762[-55] + 8);
      v721.f64[0] = v2762[-46].f64[0];
      v724.f64[0] = v2762[-39].f64[1];
      v736 = *(float64x2_t *)((char *)&v2762[-40] + 8);
      _Q17 = v2762[-63];
      v737 = v2762[-62];
      v739 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v717, v730, v737.f64[0]), v732, v737, 1), v734, v701.f64[0]);
      v740 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v718, v729, v737.f64[0]), v731, v737, 1), v733, v701.f64[0]);
      v741 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v719, v730, v735.f64[0]), v732, v735, 1), v734, v707.f64[0]);
      v742 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v720, v729, v735.f64[0]), v731, v735, 1), v733, v707.f64[0]);
      _Q16 = v2762[-48];
      v743 = v2762[-47];
      *v35 = v739;
      v35[1] = v740;
      *(float64x2_t *)((char *)v35 + 136) = v742;
      *(float64x2_t *)((char *)v35 + 120) = v741;
      v35[15] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v725, v730, v743.f64[0]), v732, v743, 1), v734, v721.f64[0]);
      v35[16] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v726, v729, v743.f64[0]), v731, v743, 1), v733, v721.f64[0]);
      *(float64x2_t *)((char *)v35 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v727, v730, v736.f64[0]), v732, v736, 1), v734, v724.f64[0]);
      *(float64x2_t *)((char *)v35 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v728, v729, v736.f64[0]), v731, v736, 1), v733, v724.f64[0]);
      v745 = *(float64x2_t *)(v38 + 80);
      v746 = *(float64x2_t *)(v38 + 96);
      v747 = *(float64x2_t *)(v33 + 1520);
      v748 = *(float64x2_t *)(v33 + 1504);
      v750 = *(float64x2_t *)(v38 + 320);
      v749 = *(float64x2_t *)(v38 + 336);
      v752 = *(float64x2_t *)(v38 + 440);
      v751 = *(float64x2_t *)(v38 + 456);
      v753 = v2762[-67];
      v754 = *(float64x2_t *)((char *)&v2762[-60] + 8);
      v755 = *(float64x2_t *)((char *)&v2762[-61] + 8);
      v757 = v2762[-53];
      v756 = v2762[-52];
      v758 = *(float64x2_t *)((char *)&v2762[-45] + 8);
      v759 = *(float64x2_t *)((char *)&v2762[-46] + 8);
      v760 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v745, v647->f64[0]), v748, *v647, 1), v750, v753.f64[0]), v752, v753, 1);
      v761 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v746, v647->f64[0]), v747, *v647, 1), v749, v753.f64[0]), v751, v753, 1);
      v762 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v745, v755.f64[0]), v748, v755, 1), v750, v754.f64[0]), v752, v754, 1);
      v763 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v746, v755.f64[0]), v747, v755, 1), v749, v754.f64[0]), v751, v754, 1);
      v764 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v745, v757.f64[0]), v748, v757, 1), v750, v756.f64[0]), v752, v756, 1);
      v765 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v746, v757.f64[0]), v747, v757, 1), v749, v756.f64[0]), v751, v756, 1);
      v766 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v745, v759.f64[0]), v748, v759, 1), v750, v758.f64[0]), v752, v758, 1);
      v767 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v746, v759.f64[0]), v747, v759, 1), v749, v758.f64[0]), v751, v758, 1);
      v769 = *(float64x2_t *)(v38 + 560);
      v768 = *(float64x2_t *)(v38 + 576);
      v770 = *(float64x2_t *)(v33 + 2000);
      v771 = *(float64x2_t *)(v33 + 1984);
      v773 = *(float64x2_t *)(v38 + 800);
      v772 = *(float64x2_t *)(v38 + 816);
      v775 = *(float64x2_t *)(v38 + 920);
      v774 = *(float64x2_t *)(v38 + 936);
      v777 = v2762[-66];
      v776 = v2762[-65];
      v778 = *(float64x2_t *)((char *)&v2762[-58] + 8);
      v779 = *(float64x2_t *)((char *)&v2762[-59] + 8);
      v780 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v760, v769, v777.f64[0]), v771, v777, 1), v773, v776.f64[0]), v775, v776, 1);
      v781 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v761, v768, v777.f64[0]), v770, v777, 1), v772, v776.f64[0]), v774, v776, 1);
      v782 = v2762[-51];
      v783 = v2762[-50];
      v784 = vmlaq_laneq_f64(vmlaq_n_f64(v762, v769, v779.f64[0]), v771, v779, 1);
      v785 = vmlaq_laneq_f64(vmlaq_n_f64(v763, v768, v779.f64[0]), v770, v779, 1);
      v786 = *(float64x2_t *)((char *)&v2762[-43] + 8);
      v787 = vmlaq_laneq_f64(vmlaq_n_f64(v784, v773, v778.f64[0]), v775, v778, 1);
      v788 = vmlaq_laneq_f64(vmlaq_n_f64(v785, v772, v778.f64[0]), v774, v778, 1);
      v789 = *(float64x2_t *)((char *)&v2762[-44] + 8);
      v790 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v764, v769, v782.f64[0]), v771, v782, 1), v773, v783.f64[0]), v775, v783, 1);
      v791 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v765, v768, v782.f64[0]), v770, v782, 1), v772, v783.f64[0]), v774, v783, 1);
      v792 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v766, v769, v789.f64[0]), v771, v789, 1), v773, v786.f64[0]), v775, v786, 1);
      v793 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v767, v768, v789.f64[0]), v770, v789, 1), v772, v786.f64[0]), v774, v786, 1);
      v794 = *(float64x2_t *)(v38 + 1056);
      v795 = *(float64x2_t *)(v38 + 1040);
      v796 = *(float64x2_t *)(v33 + 2480);
      v797 = *(float64x2_t *)(v33 + 2464);
      v798 = *(float64x2_t *)(v38 + 1296);
      v799 = *(float64x2_t *)(v38 + 1280);
      v801 = *(float64x2_t *)(v38 + 1400);
      v800 = *(float64x2_t *)(v38 + 1416);
      v803 = v2762[-64];
      v802 = v2762[-63];
      v804 = *(float64x2_t *)((char *)&v2762[-56] + 8);
      v805 = *(float64x2_t *)((char *)&v2762[-57] + 8);
      v806 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v780, v795, v803.f64[0]), v797, v803, 1), v799, v802.f64[0]), v801, v802, 1);
      v807 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v781, v794, v803.f64[0]), v796, v803, 1), v798, v802.f64[0]), v800, v802, 1);
      v808 = v2762[-49];
      v809 = v2762[-48];
      v810 = vmlaq_laneq_f64(vmlaq_n_f64(v787, v795, v805.f64[0]), v797, v805, 1);
      v811 = vmlaq_laneq_f64(vmlaq_n_f64(v788, v794, v805.f64[0]), v796, v805, 1);
      v812 = *(float64x2_t *)((char *)&v2762[-41] + 8);
      v813 = vmlaq_laneq_f64(vmlaq_n_f64(v810, v799, v804.f64[0]), v801, v804, 1);
      v814 = vmlaq_laneq_f64(vmlaq_n_f64(v811, v798, v804.f64[0]), v800, v804, 1);
      v815 = *(float64x2_t *)((char *)&v2762[-42] + 8);
      v816 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v790, v795, v808.f64[0]), v797, v808, 1), v799, v809.f64[0]), v801, v809, 1);
      v817 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v791, v794, v808.f64[0]), v796, v808, 1), v798, v809.f64[0]), v800, v809, 1);
      v818 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v792, v795, v815.f64[0]), v797, v815, 1), v799, v812.f64[0]), v801, v812, 1);
      v819 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v793, v794, v815.f64[0]), v796, v815, 1), v798, v812.f64[0]), v800, v812, 1);
      v820 = *(float64x2_t *)(v38 + 1536);
      v821 = *(float64x2_t *)(v38 + 1520);
      v822 = *(float64x2_t *)(v33 + 2960);
      v823 = *(float64x2_t *)(v33 + 2944);
      v824 = *(float64x2_t *)(v38 + 1776);
      v825 = *(float64x2_t *)(v38 + 1760);
      v800.f64[0] = v2762[-61].f64[0];
      v826 = v2762[-62];
      v808.f64[0] = v2762[-54].f64[1];
      v827 = *(float64x2_t *)((char *)&v2762[-55] + 8);
      v815.f64[0] = v2762[-46].f64[0];
      v828 = v2762[-47];
      v829 = vmlaq_laneq_f64(vmlaq_n_f64(v806, v821, v826.f64[0]), v823, v826, 1);
      v830 = vmlaq_laneq_f64(vmlaq_n_f64(v807, v820, v826.f64[0]), v822, v826, 1);
      v826.f64[0] = v2762[-39].f64[1];
      v831 = vmlaq_n_f64(v829, v825, v800.f64[0]);
      v832 = vmlaq_n_f64(v830, v824, v800.f64[0]);
      v833 = *(float64x2_t *)((char *)&v2762[-40] + 8);
      v35[2] = v831;
      v35[3] = v832;
      *(float64x2_t *)((char *)v35 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v814, v820, v827.f64[0]), v822, v827, 1), v824, v808.f64[0]);
      *(float64x2_t *)((char *)v35 + 152) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v813, v821, v827.f64[0]), v823, v827, 1), v825, v808.f64[0]);
      v35[18] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v817, v820, v828.f64[0]), v822, v828, 1), v824, v815.f64[0]);
      v35[17] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v816, v821, v828.f64[0]), v823, v828, 1), v825, v815.f64[0]);
      *(float64x2_t *)((char *)v35 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v818, v821, v833.f64[0]), v823, v833, 1), v825, v826.f64[0]);
      *(float64x2_t *)((char *)v35 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v819, v820, v833.f64[0]), v822, v833, 1), v824, v826.f64[0]);
      v834 = *(float64x2_t *)(v38 + 112);
      v835 = *(float64x2_t *)(v38 + 128);
      v836 = *(float64x2_t *)(v33 + 1552);
      v837 = *(float64x2_t *)(v33 + 1536);
      v839 = *(float64x2_t *)(v38 + 352);
      v838 = *(float64x2_t *)(v38 + 368);
      v841 = *(float64x2_t *)(v38 + 472);
      v840 = *(float64x2_t *)(v38 + 488);
      v842 = v2762[-67];
      v843 = *(float64x2_t *)((char *)&v2762[-60] + 8);
      v844 = *(float64x2_t *)((char *)&v2762[-61] + 8);
      v846 = v2762[-53];
      v845 = v2762[-52];
      v847 = *(float64x2_t *)((char *)&v2762[-45] + 8);
      v848 = *(float64x2_t *)((char *)&v2762[-46] + 8);
      v849 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v834, v647->f64[0]), v837, *v647, 1), v839, v842.f64[0]), v841, v842, 1);
      v850 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v647->f64[0]), v836, *v647, 1), v838, v842.f64[0]), v840, v842, 1);
      v851 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v834, v844.f64[0]), v837, v844, 1), v839, v843.f64[0]), v841, v843, 1);
      v852 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v844.f64[0]), v836, v844, 1), v838, v843.f64[0]), v840, v843, 1);
      v853 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v834, v846.f64[0]), v837, v846, 1), v839, v845.f64[0]), v841, v845, 1);
      v854 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v846.f64[0]), v836, v846, 1), v838, v845.f64[0]), v840, v845, 1);
      v855 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v834, v848.f64[0]), v837, v848, 1), v839, v847.f64[0]), v841, v847, 1);
      v856 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v848.f64[0]), v836, v848, 1), v838, v847.f64[0]), v840, v847, 1);
      v858 = *(float64x2_t *)(v38 + 592);
      v857 = *(float64x2_t *)(v38 + 608);
      v859 = *(float64x2_t *)(v33 + 2032);
      v860 = *(float64x2_t *)(v33 + 2016);
      v862 = *(float64x2_t *)(v38 + 832);
      v861 = *(float64x2_t *)(v38 + 848);
      v864 = *(float64x2_t *)(v38 + 952);
      v863 = *(float64x2_t *)(v38 + 968);
      v866 = v2762[-66];
      v865 = v2762[-65];
      v867 = *(float64x2_t *)((char *)&v2762[-58] + 8);
      v868 = *(float64x2_t *)((char *)&v2762[-59] + 8);
      v869 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v849, v858, v866.f64[0]), v860, v866, 1), v862, v865.f64[0]), v864, v865, 1);
      v870 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v850, v857, v866.f64[0]), v859, v866, 1), v861, v865.f64[0]), v863, v865, 1);
      v871 = v2762[-51];
      v872 = v2762[-50];
      v873 = vmlaq_laneq_f64(vmlaq_n_f64(v851, v858, v868.f64[0]), v860, v868, 1);
      v874 = vmlaq_laneq_f64(vmlaq_n_f64(v852, v857, v868.f64[0]), v859, v868, 1);
      v875 = *(float64x2_t *)((char *)&v2762[-43] + 8);
      v876 = vmlaq_laneq_f64(vmlaq_n_f64(v873, v862, v867.f64[0]), v864, v867, 1);
      v877 = vmlaq_laneq_f64(vmlaq_n_f64(v874, v861, v867.f64[0]), v863, v867, 1);
      v878 = *(float64x2_t *)((char *)&v2762[-44] + 8);
      v879 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v853, v858, v871.f64[0]), v860, v871, 1), v862, v872.f64[0]), v864, v872, 1);
      v880 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v854, v857, v871.f64[0]), v859, v871, 1), v861, v872.f64[0]), v863, v872, 1);
      v881 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v855, v858, v878.f64[0]), v860, v878, 1), v862, v875.f64[0]), v864, v875, 1);
      v882 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v856, v857, v878.f64[0]), v859, v878, 1), v861, v875.f64[0]), v863, v875, 1);
      v883 = *(float64x2_t *)(v38 + 1088);
      v884 = *(float64x2_t *)(v38 + 1072);
      v885 = *(float64x2_t *)(v33 + 2512);
      v886 = *(float64x2_t *)(v33 + 2496);
      v887 = *(float64x2_t *)(v38 + 1328);
      v888 = *(float64x2_t *)(v38 + 1312);
      v890 = *(float64x2_t *)(v38 + 1432);
      v889 = *(float64x2_t *)(v38 + 1448);
      v892 = v2762[-64];
      v891 = v2762[-63];
      v893 = *(float64x2_t *)((char *)&v2762[-56] + 8);
      v894 = *(float64x2_t *)((char *)&v2762[-57] + 8);
      v895 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v869, v884, v892.f64[0]), v886, v892, 1), v888, v891.f64[0]), v890, v891, 1);
      v896 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v870, v883, v892.f64[0]), v885, v892, 1), v887, v891.f64[0]), v889, v891, 1);
      v897 = v2762[-49];
      v898 = v2762[-48];
      v899 = vmlaq_laneq_f64(vmlaq_n_f64(v876, v884, v894.f64[0]), v886, v894, 1);
      v900 = vmlaq_laneq_f64(vmlaq_n_f64(v877, v883, v894.f64[0]), v885, v894, 1);
      v901 = *(float64x2_t *)((char *)&v2762[-41] + 8);
      v902 = vmlaq_laneq_f64(vmlaq_n_f64(v899, v888, v893.f64[0]), v890, v893, 1);
      _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v887, v893.f64[0]), v889, v893, 1);
      v904 = *(float64x2_t *)((char *)&v2762[-42] + 8);
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v879, v884, v897.f64[0]), v886, v897, 1), v888, v898.f64[0]), v890, v898, 1);
      v906 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v880, v883, v897.f64[0]), v885, v897, 1), v887, v898.f64[0]), v889, v898, 1);
      v907 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v881, v884, v904.f64[0]), v886, v904, 1), v888, v901.f64[0]), v890, v901, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v882, v883, v904.f64[0]), v885, v904, 1), v887, v901.f64[0]), v889, v901, 1);
      v909 = *(float64x2_t *)(v38 + 1568);
      v910 = *(float64x2_t *)(v38 + 1552);
      v911 = *(float64x2_t *)(v33 + 2992);
      _Q31 = *(float64x2_t *)(v33 + 2976);
      v913 = *(float64x2_t *)(v38 + 1808);
      v914 = *(float64x2_t *)(v38 + 1792);
      v889.f64[0] = v2762[-61].f64[0];
      v915 = v2762[-62];
      v897.f64[0] = v2762[-54].f64[1];
      v916 = *(float64x2_t *)((char *)&v2762[-55] + 8);
      v904.f64[0] = v2762[-46].f64[0];
      v917 = v2762[-47];
      v918 = vmlaq_laneq_f64(vmlaq_n_f64(v895, v910, v915.f64[0]), _Q31, v915, 1);
      v919 = vmlaq_laneq_f64(vmlaq_n_f64(v896, v909, v915.f64[0]), v911, v915, 1);
      v915.f64[0] = v2762[-39].f64[1];
      v920 = vmlaq_n_f64(v918, v914, v889.f64[0]);
      v921 = vmlaq_n_f64(v919, v913, v889.f64[0]);
      v922 = *(float64x2_t *)((char *)&v2762[-40] + 8);
      v35[4] = v920;
      v35[5] = v921;
      *(float64x2_t *)((char *)v35 + 200) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q22, v909, v916.f64[0]), v911, v916, 1), v913, v897.f64[0]);
      *(float64x2_t *)((char *)v35 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v902, v910, v916.f64[0]), _Q31, v916, 1), v914, v897.f64[0]);
      v35[20] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v906, v909, v917.f64[0]), v911, v917, 1), v913, v904.f64[0]);
      v35[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v910, v917.f64[0]), _Q31, v917, 1), v914, v904.f64[0]);
      *(float64x2_t *)((char *)v35 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v907, v910, v922.f64[0]), _Q31, v922, 1), v914, v915.f64[0]);
      *(float64x2_t *)((char *)v35 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v909, v922.f64[0]), v911, v922, 1), v913, v915.f64[0]);
      _Q26 = *(float64x2_t *)(v38 + 144);
      _Q27.f64[0] = *(float64_t *)(v38 + 280);
      v924 = *(float64x2_t *)(v38 + 264);
      _Q30 = *(float64x2_t *)(v38 + 384);
      _Q31.f64[0] = *(float64_t *)(v38 + 520);
      v926 = *(float64x2_t *)(v38 + 504);
      _Q19 = *(float64x2_t *)((char *)&v2762[-60] + 8);
      _Q21 = *(float64x2_t *)((char *)&v2762[-61] + 8);
      _Q9 = *(float64x2_t *)((char *)&v2762[-45] + 8);
      _Q10 = *(float64x2_t *)((char *)&v2762[-46] + 8);
      v931 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v924, _Q24, 1), _Q30, _Q1.f64[0]), v926, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v932 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v924, _Q21, 1), _Q30, _Q19.f64[0]), v926, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
      }
      v933 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v924, _Q20, 1), _Q30, _Q4.f64[0]), v926, _Q4, 1);
      __asm
      {
        FMLA            D21, D27, V20.D[1]
        FMLA            D21, D31, V4.D[1]
      }
      v934 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q10.f64[0]), v924, _Q10, 1), _Q30, _Q9.f64[0]), v926, _Q9, 1);
      __asm
      {
        FMLA            D20, D27, V10.D[1]
        FMLA            D20, D31, V9.D[1]
      }
      v935 = *(float64x2_t *)(v38 + 624);
      _Q26.f64[0] = *(float64_t *)(v38 + 760);
      v936 = *(float64x2_t *)(v38 + 744);
      v937 = *(float64x2_t *)(v38 + 864);
      _Q30.f64[0] = *(float64_t *)(v38 + 1000);
      v938 = *(float64x2_t *)(v38 + 984);
      _Q8 = *(float64x2_t *)((char *)&v2762[-58] + 8);
      _Q9 = *(float64x2_t *)((char *)&v2762[-59] + 8);
      _Q10 = *(float64x2_t *)((char *)&v2762[-43] + 8);
      _Q11 = *(float64x2_t *)((char *)&v2762[-44] + 8);
      v943 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v931, v935, _Q2.f64[0]), v936, _Q2, 1), v937, _Q5.f64[0]), v938, _Q5, 1);
      __asm
      {
        FMLA            D23, D26, V2.D[1]
        FMLA            D23, D30, V5.D[1]
      }
      v944 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v932, v935, _Q9.f64[0]), v936, _Q9, 1), v937, _Q8.f64[0]), v938, _Q8, 1);
      __asm
      {
        FMLA            D22, D26, V9.D[1]
        FMLA            D22, D30, V8.D[1]
      }
      v945 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v933, v935, _Q3.f64[0]), v936, _Q3, 1), v937, _Q18.f64[0]), v938, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v946 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v934, v935, _Q11.f64[0]), v936, _Q11, 1), v937, _Q10.f64[0]), v938, _Q10, 1);
      __asm
      {
        FMLA            D20, D26, V11.D[1]
        FMLA            D20, D30, V10.D[1]
      }
      v947 = *(float64x2_t *)(v38 + 1104);
      _Q5.f64[0] = *(float64_t *)(v38 + 1240);
      v948 = *(float64x2_t *)(v38 + 1224);
      v949 = *(float64x2_t *)(v38 + 1344);
      _Q26.f64[0] = *(float64_t *)(v38 + 1480);
      v950 = *(float64x2_t *)(v38 + 1464);
      _Q28 = *(float64x2_t *)((char *)&v2762[-56] + 8);
      _Q29 = *(float64x2_t *)((char *)&v2762[-57] + 8);
      _Q30 = *(float64x2_t *)((char *)&v2762[-41] + 8);
      _Q31 = *(float64x2_t *)((char *)&v2762[-42] + 8);
      v955 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v943, v947, _Q7.f64[0]), v948, _Q7, 1), v949, _Q17.f64[0]), v950, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v956 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v944, v947, _Q29.f64[0]), v948, _Q29, 1), v949, _Q28.f64[0]), v950, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v957 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v945, v947, _Q6.f64[0]), v948, _Q6, 1), v949, _Q16.f64[0]), v950, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v958 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v946, v947, _Q31.f64[0]), v948, _Q31, 1), v949, _Q30.f64[0]), v950, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v959 = *(float64x2_t *)(v38 + 1584);
      _Q5.f64[0] = *(float64_t *)(v38 + 1720);
      v960 = *(float64x2_t *)(v38 + 1704);
      _Q7.f64[0] = *(float64_t *)(v38 + 1840);
      v961 = *(float64x2_t *)(v38 + 1824);
      _Q17.f64[0] = v2762[-61].f64[0];
      _Q18 = v2762[-62];
      _Q24.f64[0] = v2762[-54].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v2762[-55] + 8);
      _Q26.f64[0] = v2762[-46].f64[0];
      _Q27 = v2762[-47];
      _Q28.f64[0] = v2762[-39].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v2762[-40] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v35[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v35[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v955, v959, _Q18.f64[0]), v960, _Q18, 1), v961, _Q17.f64[0]);
      v35[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v35 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v956, v959, _Q25.f64[0]), v960, _Q25, 1), v961, _Q24.f64[0]);
      v35[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v35[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v957, v959, _Q27.f64[0]), v960, _Q27, 1), v961, _Q26.f64[0]);
      v35[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v35 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v958, v959, _Q29.f64[0]), v960, _Q29, 1), v961, _Q28.f64[0]);
      v967 = *(float64x2_t *)(v38 + 48);
      v966 = *(float64x2_t *)(v38 + 64);
      v968 = *(float64x2_t *)(v33 + 1488);
      v969 = *(float64x2_t *)(v33 + 1472);
      v971 = *(float64x2_t *)(v38 + 288);
      v970 = *(float64x2_t *)(v38 + 304);
      v973 = *(float64x2_t *)(v38 + 408);
      v972 = *(float64x2_t *)(v38 + 424);
      v974 = v2762[-38];
      v975 = v2762[-37];
      v976 = *(float64x2_t *)((char *)&v2762[-16] + 8);
      _Q22 = v974;
      v978 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v967, v974.f64[0]), v969, v974, 1), v971, v975.f64[0]), v973, v975, 1);
      v979 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v966, v974.f64[0]), v968, v974, 1), v970, v975.f64[0]), v972, v975, 1);
      _Q20 = *(float64x2_t *)((char *)&v2762[-31] + 8);
      v981 = *(float64x2_t *)((char *)&v2762[-30] + 8);
      v982 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v967, v2762[-31].f64[1]), v969, _Q20, 1), v971, v981.f64[0]), v973, v981, 1);
      v983 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v966, v2762[-31].f64[1]), v968, _Q20, 1), v970, v981.f64[0]), v972, v981, 1);
      v984 = v2762[-22];
      v2789 = v2762[-23];
      v985 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v967, v2789.f64[0]), v969, v2789, 1), v971, v984.f64[0]), v973, v984, 1);
      v986 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v966, v2789.f64[0]), v968, v2789, 1), v970, v984.f64[0]), v972, v984, 1);
      v987 = vmlaq_laneq_f64(vmulq_n_f64(v967, v976.f64[0]), v969, v976, 1);
      v988 = *(float64x2_t *)((char *)&v2762[-15] + 8);
      v2788 = *(int8x16_t *)((char *)&v2762[-16] + 8);
      v989 = vmlaq_laneq_f64(vmlaq_n_f64(v987, v971, v988.f64[0]), v973, v988, 1);
      v990 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v966, v976.f64[0]), v968, v976, 1), v970, v988.f64[0]), v972, v988, 1);
      v991 = *(float64x2_t *)(v38 + 528);
      v992 = *(float64x2_t *)(v38 + 544);
      v993 = *(float64x2_t *)(v33 + 1968);
      v994 = *(float64x2_t *)(v33 + 1952);
      v996 = *(float64x2_t *)(v38 + 768);
      v995 = *(float64x2_t *)(v38 + 784);
      v998 = *(float64x2_t *)(v38 + 888);
      v997 = *(float64x2_t *)(v38 + 904);
      v999 = *(float64x2_t *)((char *)&v2762[-29] + 8);
      v1000 = *(float64x2_t *)((char *)&v2762[-14] + 8);
      _Q19 = v2762[-37];
      v1002 = v2762[-35];
      v2787 = v2762[-36];
      v1003 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v978, v991, v2787.f64[0]), v994, v2787, 1), v996, v1002.f64[0]), v998, v1002, 1);
      v1004 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v979, v992, v2787.f64[0]), v993, v2787, 1), v995, v1002.f64[0]), v997, v1002, 1);
      v1005 = *(float64x2_t *)((char *)&v2762[-28] + 8);
      v2786 = *(int8x16_t *)((char *)&v2762[-29] + 8);
      v1006 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v982, v991, v999.f64[0]), v994, v999, 1), v996, v1005.f64[0]), v998, v1005, 1);
      v1007 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v983, v992, v999.f64[0]), v993, v999, 1), v995, v1005.f64[0]), v997, v1005, 1);
      _Q7 = v2762[-22];
      v1009 = v2762[-21];
      _Q6 = v1009;
      v1011 = v2762[-20];
      v1012 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v985, v991, v1009.f64[0]), v994, v1009, 1), v996, v1011.f64[0]), v998, v1011, 1);
      v1013 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v986, v992, v1009.f64[0]), v993, v1009, 1), v995, v1011.f64[0]), v997, v1011, 1);
      v1014 = vmlaq_laneq_f64(vmlaq_n_f64(v989, v991, v1000.f64[0]), v994, v1000, 1);
      _Q5 = *(float64x2_t *)((char *)&v2762[-14] + 8);
      v1016 = *(float64x2_t *)((char *)&v2762[-13] + 8);
      v1017 = vmlaq_laneq_f64(vmlaq_n_f64(v1014, v996, v1016.f64[0]), v998, v1016, 1);
      v1018 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v990, v992, v1000.f64[0]), v993, v1000, 1), v995, v1016.f64[0]), v997, v1016, 1);
      v1019 = *(float64x2_t *)(v38 + 1008);
      v1020 = *(float64x2_t *)(v38 + 1024);
      v1021 = *(float64x2_t *)(v33 + 2448);
      v1022 = *(float64x2_t *)(v33 + 2432);
      v1023 = *(float64x2_t *)(v38 + 1264);
      v1024 = *(float64x2_t *)(v38 + 1248);
      v1026 = *(float64x2_t *)(v38 + 1368);
      v1025 = *(float64x2_t *)(v38 + 1384);
      _Q16 = v2762[-35];
      v1028 = v2762[-34];
      _Q23 = v1028;
      v1030 = v2762[-33];
      v1031 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1003, v1019, v1028.f64[0]), v1022, v1028, 1), v1024, v1030.f64[0]), v1026, v1030, 1);
      v1032 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1004, v1020, v1028.f64[0]), v1021, v1028, 1), v1023, v1030.f64[0]), v1025, v1030, 1);
      _Q21 = *(float64x2_t *)((char *)&v2762[-27] + 8);
      v1034 = *(float64x2_t *)((char *)&v2762[-26] + 8);
      v1035 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1006, v1019, v2762[-27].f64[1]), v1022, _Q21, 1), v1024, v1034.f64[0]), v1026, v1034, 1);
      v1036 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1007, v1020, v2762[-27].f64[1]), v1021, _Q21, 1), v1023, v1034.f64[0]), v1025, v1034, 1);
      _Q27 = v2762[-20];
      _Q18 = v2762[-19];
      v1039 = v2762[-18];
      v1040 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1012, v1019, _Q18.f64[0]), v1022, _Q18, 1), v1024, v1039.f64[0]), v1026, v1039, 1);
      v1041 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1013, v1020, _Q18.f64[0]), v1021, _Q18, 1), v1023, v1039.f64[0]), v1025, v1039, 1);
      v1042 = *(float64x2_t *)((char *)&v2762[-12] + 8);
      v1043 = vmlaq_laneq_f64(vmlaq_n_f64(v1017, v1019, v1042.f64[0]), v1022, v1042, 1);
      _Q17 = v1042;
      v1044 = *(float64x2_t *)((char *)&v2762[-11] + 8);
      v1046 = vmlaq_laneq_f64(vmlaq_n_f64(v1043, v1024, v1044.f64[0]), v1026, v1044, 1);
      v1047 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1018, v1020, v1042.f64[0]), v1021, v1042, 1), v1023, v1044.f64[0]), v1025, v1044, 1);
      v1048 = *(float64x2_t *)(v38 + 1504);
      v1049 = *(float64x2_t *)(v38 + 1488);
      v1050 = *(float64x2_t *)(v33 + 2928);
      v1051 = *(float64x2_t *)(v33 + 2912);
      v1052 = *(float64x2_t *)(v38 + 1744);
      v1053 = *(float64x2_t *)(v38 + 1728);
      _Q26 = v2762[-33];
      v1054 = v2762[-32];
      v1056 = vmlaq_laneq_f64(vmlaq_n_f64(v1031, v1049, v1054.f64[0]), v1051, v1054, 1);
      v1057 = vmlaq_laneq_f64(vmlaq_n_f64(v1032, v1048, v1054.f64[0]), v1050, v1054, 1);
      v1054.f64[0] = v2762[-31].f64[0];
      v1058 = vmlaq_n_f64(v1056, v1053, v1054.f64[0]);
      v1059 = vmlaq_n_f64(v1057, v1052, v1054.f64[0]);
      v1060 = *(float64x2_t *)((char *)&v2762[-25] + 8);
      v1061 = vmlaq_laneq_f64(vmlaq_n_f64(v1035, v1049, v1060.f64[0]), v1051, v1060, 1);
      v1062 = vmlaq_laneq_f64(vmlaq_n_f64(v1036, v1048, v1060.f64[0]), v1050, v1060, 1);
      v1060.f64[0] = v2762[-24].f64[1];
      v1063 = vmlaq_n_f64(v1061, v1053, v1060.f64[0]);
      v1064 = vmlaq_n_f64(v1062, v1052, v1060.f64[0]);
      _Q25 = v2762[-18];
      v1065 = v2762[-17];
      v1067 = vmlaq_laneq_f64(vmlaq_n_f64(v1040, v1049, v1065.f64[0]), v1051, v1065, 1);
      v1068 = vmlaq_laneq_f64(vmlaq_n_f64(v1041, v1048, v1065.f64[0]), v1050, v1065, 1);
      v1065.f64[0] = v2762[-16].f64[0];
      v1069 = vmlaq_n_f64(v1067, v1053, v1065.f64[0]);
      v1070 = vmlaq_n_f64(v1068, v1052, v1065.f64[0]);
      _Q24 = *(float64x2_t *)((char *)&v2762[-11] + 8);
      v1071 = *(float64x2_t *)((char *)&v2762[-10] + 8);
      v1073 = vmlaq_laneq_f64(vmlaq_n_f64(v1046, v1049, v1071.f64[0]), v1051, v1071, 1);
      v1049.f64[0] = v2762[-9].f64[1];
      v35[30] = v1058;
      v35[31] = v1059;
      *(float64x2_t *)((char *)v35 + 600) = v1063;
      *(float64x2_t *)((char *)v35 + 616) = v1064;
      v35[45] = v1069;
      v35[46] = v1070;
      *(float64x2_t *)((char *)v35 + 840) = vmlaq_n_f64(v1073, v1053, v1049.f64[0]);
      *(float64x2_t *)((char *)v35 + 856) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1047, v1048, v1071.f64[0]), v1050, v1071, 1), v1052, v1049.f64[0]);
      v1074 = *(float64x2_t *)(v38 + 80);
      v1075 = *(float64x2_t *)(v38 + 96);
      v1076 = *(float64x2_t *)(v33 + 1520);
      v1077 = *(float64x2_t *)(v33 + 1504);
      v1079 = *(float64x2_t *)(v38 + 320);
      v1078 = *(float64x2_t *)(v38 + 336);
      v1081 = *(float64x2_t *)(v38 + 440);
      v1080 = *(float64x2_t *)(v38 + 456);
      v1083 = v2762[-38];
      v1082 = v2762[-37];
      v1084 = *(float64x2_t *)((char *)&v2762[-31] + 8);
      v1085 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1074, v1083.f64[0]), v1077, v1083, 1), v1079, v1082.f64[0]), v1081, v1082, 1);
      v1086 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1075, v1083.f64[0]), v1076, v1083, 1), v1078, v1082.f64[0]), v1080, v1082, 1);
      v1087 = vmlaq_laneq_f64(vmulq_n_f64(v1074, v1084.f64[0]), v1077, v1084, 1);
      v1088 = vmlaq_laneq_f64(vmulq_n_f64(v1075, v1084.f64[0]), v1076, v1084, 1);
      v1089 = *(float64x2_t *)((char *)&v2762[-30] + 8);
      v1090 = vmlaq_laneq_f64(vmlaq_n_f64(v1087, v1079, v1089.f64[0]), v1081, v1089, 1);
      v1091 = vmlaq_laneq_f64(vmlaq_n_f64(v1088, v1078, v1089.f64[0]), v1080, v1089, 1);
      v1092 = v2762[-23];
      v1093 = vmlaq_laneq_f64(vmulq_n_f64(v1074, v1092.f64[0]), v1077, v1092, 1);
      v1094 = vmlaq_laneq_f64(vmulq_n_f64(v1075, v1092.f64[0]), v1076, v1092, 1);
      v1095 = v2762[-22];
      v1096 = vmlaq_laneq_f64(vmlaq_n_f64(v1093, v1079, v1095.f64[0]), v1081, v1095, 1);
      v1097 = vmlaq_laneq_f64(vmlaq_n_f64(v1094, v1078, v1095.f64[0]), v1080, v1095, 1);
      v1098 = *(float64x2_t *)((char *)&v2762[-16] + 8);
      v1099 = vmlaq_laneq_f64(vmulq_n_f64(v1074, v1098.f64[0]), v1077, v1098, 1);
      v1100 = *(float64x2_t *)((char *)&v2762[-15] + 8);
      v1101 = vmlaq_laneq_f64(vmlaq_n_f64(v1099, v1079, v1100.f64[0]), v1081, v1100, 1);
      v1102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1075, v1098.f64[0]), v1076, v1098, 1), v1078, v1100.f64[0]), v1080, v1100, 1);
      v1103 = *(float64x2_t *)(v38 + 560);
      v1104 = *(float64x2_t *)(v38 + 576);
      v1105 = *(float64x2_t *)(v33 + 2000);
      v1106 = *(float64x2_t *)(v33 + 1984);
      v1107 = v2762[-36];
      v1108 = v2762[-35];
      v1109 = vmlaq_laneq_f64(vmlaq_n_f64(v1085, v1103, v1107.f64[0]), v1106, v1107, 1);
      v1110 = vmlaq_laneq_f64(vmlaq_n_f64(v1086, v1104, v1107.f64[0]), v1105, v1107, 1);
      v1111 = *(float64x2_t *)(v38 + 800);
      v1112 = *(float64x2_t *)(v38 + 816);
      v1114 = *(float64x2_t *)(v38 + 920);
      v1113 = *(float64x2_t *)(v38 + 936);
      v1115 = vmlaq_laneq_f64(vmlaq_n_f64(v1109, v1111, v1108.f64[0]), v1114, v1108, 1);
      v1116 = vmlaq_laneq_f64(vmlaq_n_f64(v1110, v1112, v1108.f64[0]), v1113, v1108, 1);
      v1117 = *(float64x2_t *)((char *)&v2762[-29] + 8);
      v1118 = vmlaq_laneq_f64(vmlaq_n_f64(v1090, v1103, v1117.f64[0]), v1106, v1117, 1);
      v1119 = vmlaq_laneq_f64(vmlaq_n_f64(v1091, v1104, v1117.f64[0]), v1105, v1117, 1);
      v1120 = *(float64x2_t *)((char *)&v2762[-28] + 8);
      v1121 = vmlaq_laneq_f64(vmlaq_n_f64(v1118, v1111, v1120.f64[0]), v1114, v1120, 1);
      v1122 = vmlaq_laneq_f64(vmlaq_n_f64(v1119, v1112, v1120.f64[0]), v1113, v1120, 1);
      v1123 = v2762[-21];
      v1124 = vmlaq_laneq_f64(vmlaq_n_f64(v1096, v1103, v1123.f64[0]), v1106, v1123, 1);
      v1125 = vmlaq_laneq_f64(vmlaq_n_f64(v1097, v1104, v1123.f64[0]), v1105, v1123, 1);
      v1126 = v2762[-20];
      v1127 = vmlaq_laneq_f64(vmlaq_n_f64(v1124, v1111, v1126.f64[0]), v1114, v1126, 1);
      v1128 = vmlaq_laneq_f64(vmlaq_n_f64(v1125, v1112, v1126.f64[0]), v1113, v1126, 1);
      v1129 = *(float64x2_t *)((char *)&v2762[-14] + 8);
      v1130 = vmlaq_laneq_f64(vmlaq_n_f64(v1101, v1103, v1129.f64[0]), v1106, v1129, 1);
      v1131 = *(float64x2_t *)((char *)&v2762[-13] + 8);
      v1132 = vmlaq_laneq_f64(vmlaq_n_f64(v1130, v1111, v1131.f64[0]), v1114, v1131, 1);
      v1133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1102, v1104, v1129.f64[0]), v1105, v1129, 1), v1112, v1131.f64[0]), v1113, v1131, 1);
      v1134 = *(float64x2_t *)(v38 + 1056);
      v1135 = *(float64x2_t *)(v38 + 1040);
      v1136 = *(float64x2_t *)(v33 + 2480);
      v1137 = *(float64x2_t *)(v33 + 2464);
      v1138 = v2762[-34];
      v1139 = v2762[-33];
      v1140 = vmlaq_laneq_f64(vmlaq_n_f64(v1115, v1135, v1138.f64[0]), v1137, v1138, 1);
      v1141 = vmlaq_laneq_f64(vmlaq_n_f64(v1116, v1134, v1138.f64[0]), v1136, v1138, 1);
      v1142 = *(float64x2_t *)(v38 + 1280);
      v1143 = *(float64x2_t *)(v38 + 1400);
      v1144 = *(float64x2_t *)(v38 + 1416);
      v1145 = vmlaq_laneq_f64(vmlaq_n_f64(v1140, v1142, v1139.f64[0]), v1143, v1139, 1);
      v1146 = *(float64x2_t *)(v38 + 1296);
      v1147 = vmlaq_laneq_f64(vmlaq_n_f64(v1141, v1146, v1139.f64[0]), v1144, v1139, 1);
      v1148 = *(float64x2_t *)((char *)&v2762[-27] + 8);
      v1149 = vmlaq_laneq_f64(vmlaq_n_f64(v1121, v1135, v1148.f64[0]), v1137, v1148, 1);
      v1150 = vmlaq_laneq_f64(vmlaq_n_f64(v1122, v1134, v1148.f64[0]), v1136, v1148, 1);
      v1151 = *(float64x2_t *)((char *)&v2762[-26] + 8);
      v1152 = vmlaq_laneq_f64(vmlaq_n_f64(v1149, v1142, v1151.f64[0]), v1143, v1151, 1);
      v1153 = vmlaq_laneq_f64(vmlaq_n_f64(v1150, v1146, v1151.f64[0]), v1144, v1151, 1);
      v1154 = v2762[-19];
      v1155 = vmlaq_laneq_f64(vmlaq_n_f64(v1127, v1135, v1154.f64[0]), v1137, v1154, 1);
      v1156 = vmlaq_laneq_f64(vmlaq_n_f64(v1128, v1134, v1154.f64[0]), v1136, v1154, 1);
      v1157 = v2762[-18];
      v1158 = vmlaq_laneq_f64(vmlaq_n_f64(v1155, v1142, v1157.f64[0]), v1143, v1157, 1);
      v1159 = vmlaq_laneq_f64(vmlaq_n_f64(v1156, v1146, v1157.f64[0]), v1144, v1157, 1);
      v1160 = *(float64x2_t *)((char *)&v2762[-12] + 8);
      v1161 = vmlaq_laneq_f64(vmlaq_n_f64(v1132, v1135, v1160.f64[0]), v1137, v1160, 1);
      v1162 = *(float64x2_t *)((char *)&v2762[-11] + 8);
      v1163 = vmlaq_laneq_f64(vmlaq_n_f64(v1161, v1142, v1162.f64[0]), v1143, v1162, 1);
      v1164 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1133, v1134, v1160.f64[0]), v1136, v1160, 1), v1146, v1162.f64[0]), v1144, v1162, 1);
      v1165 = *(float64x2_t *)(v38 + 1536);
      v1166 = *(float64x2_t *)(v38 + 1520);
      v1167 = *(float64x2_t *)(v33 + 2960);
      v1168 = *(float64x2_t *)(v33 + 2944);
      v1169 = v2762[-32];
      v1170 = vmlaq_laneq_f64(vmlaq_n_f64(v1145, v1166, v1169.f64[0]), v1168, v1169, 1);
      v1171 = vmlaq_laneq_f64(vmlaq_n_f64(v1147, v1165, v1169.f64[0]), v1167, v1169, 1);
      v1172 = *(float64x2_t *)(v38 + 1760);
      v1160.f64[0] = v2762[-31].f64[0];
      v1173 = vmlaq_n_f64(v1170, v1172, v1160.f64[0]);
      v1174 = *(float64x2_t *)(v38 + 1776);
      v1175 = vmlaq_n_f64(v1171, v1174, v1160.f64[0]);
      v1176 = *(float64x2_t *)((char *)&v2762[-25] + 8);
      v1177 = vmlaq_laneq_f64(vmlaq_n_f64(v1152, v1166, v1176.f64[0]), v1168, v1176, 1);
      v1178 = vmlaq_laneq_f64(vmlaq_n_f64(v1153, v1165, v1176.f64[0]), v1167, v1176, 1);
      v1176.f64[0] = v2762[-24].f64[1];
      v1179 = vmlaq_n_f64(v1177, v1172, v1176.f64[0]);
      v1180 = vmlaq_n_f64(v1178, v1174, v1176.f64[0]);
      v1181 = v2762[-17];
      v1182 = vmlaq_laneq_f64(vmlaq_n_f64(v1158, v1166, v1181.f64[0]), v1168, v1181, 1);
      v1183 = vmlaq_laneq_f64(vmlaq_n_f64(v1159, v1165, v1181.f64[0]), v1167, v1181, 1);
      v1181.f64[0] = v2762[-16].f64[0];
      v1184 = vmlaq_n_f64(v1182, v1172, v1181.f64[0]);
      v1185 = vmlaq_n_f64(v1183, v1174, v1181.f64[0]);
      v1186 = *(float64x2_t *)((char *)&v2762[-10] + 8);
      v1187 = vmlaq_laneq_f64(vmlaq_n_f64(v1163, v1166, v1186.f64[0]), v1168, v1186, 1);
      v1166.f64[0] = v2762[-9].f64[1];
      v35[32] = v1173;
      v35[33] = v1175;
      *(float64x2_t *)((char *)v35 + 632) = v1179;
      *(float64x2_t *)((char *)v35 + 648) = v1180;
      v35[47] = v1184;
      v35[48] = v1185;
      *(float64x2_t *)((char *)v35 + 872) = vmlaq_n_f64(v1187, v1172, v1166.f64[0]);
      *(float64x2_t *)((char *)v35 + 888) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1164, v1165, v1186.f64[0]), v1167, v1186, 1), v1174, v1166.f64[0]);
      v1189 = *(float64x2_t *)(v38 + 112);
      v1188 = *(float64x2_t *)(v38 + 128);
      v1190 = *(float64x2_t *)(v33 + 1552);
      v1191 = *(float64x2_t *)(v33 + 1536);
      v1192 = *(float64x2_t *)(v38 + 352);
      v1193 = *(float64x2_t *)(v38 + 368);
      v1195 = *(float64x2_t *)(v38 + 472);
      v1194 = *(float64x2_t *)(v38 + 488);
      v1197 = v2762[-38];
      v1196 = v2762[-37];
      v1198 = *(float64x2_t *)((char *)&v2762[-31] + 8);
      v1199 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v1197.f64[0]), v1191, v1197, 1), v1192, v1196.f64[0]), v1195, v1196, 1);
      v1200 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v1197.f64[0]), v1190, v1197, 1), v1193, v1196.f64[0]), v1194, v1196, 1);
      v1201 = vmlaq_laneq_f64(vmulq_n_f64(v1189, v1198.f64[0]), v1191, v1198, 1);
      v1202 = vmlaq_laneq_f64(vmulq_n_f64(v1188, v1198.f64[0]), v1190, v1198, 1);
      v1203 = *(float64x2_t *)((char *)&v2762[-30] + 8);
      v1204 = vmlaq_laneq_f64(vmlaq_n_f64(v1201, v1192, v1203.f64[0]), v1195, v1203, 1);
      v1205 = vmlaq_laneq_f64(vmlaq_n_f64(v1202, v1193, v1203.f64[0]), v1194, v1203, 1);
      v1206 = v2762[-23];
      v1207 = vmlaq_laneq_f64(vmulq_n_f64(v1189, v1206.f64[0]), v1191, v1206, 1);
      v1208 = vmlaq_laneq_f64(vmulq_n_f64(v1188, v1206.f64[0]), v1190, v1206, 1);
      v1209 = v2762[-22];
      v1210 = vmlaq_laneq_f64(vmlaq_n_f64(v1207, v1192, v1209.f64[0]), v1195, v1209, 1);
      v1211 = vmlaq_laneq_f64(vmlaq_n_f64(v1208, v1193, v1209.f64[0]), v1194, v1209, 1);
      v1212 = *(float64x2_t *)((char *)&v2762[-16] + 8);
      v1213 = vmlaq_laneq_f64(vmulq_n_f64(v1189, v1212.f64[0]), v1191, v1212, 1);
      v1214 = *(float64x2_t *)((char *)&v2762[-15] + 8);
      v1215 = vmlaq_laneq_f64(vmlaq_n_f64(v1213, v1192, v1214.f64[0]), v1195, v1214, 1);
      v1216 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v1212.f64[0]), v1190, v1212, 1), v1193, v1214.f64[0]), v1194, v1214, 1);
      v1218 = *(float64x2_t *)(v38 + 592);
      v1217 = *(float64x2_t *)(v38 + 608);
      v1219 = *(float64x2_t *)(v33 + 2032);
      v1220 = *(float64x2_t *)(v33 + 2016);
      v1221 = v2762[-36];
      v1222 = v2762[-35];
      v1223 = vmlaq_laneq_f64(vmlaq_n_f64(v1199, v1218, v1221.f64[0]), v1220, v1221, 1);
      v1224 = vmlaq_laneq_f64(vmlaq_n_f64(v1200, v1217, v1221.f64[0]), v1219, v1221, 1);
      v1225 = *(float64x2_t *)(v38 + 832);
      v1226 = *(float64x2_t *)(v38 + 848);
      v1227 = *(float64x2_t *)(v38 + 952);
      v1228 = *(float64x2_t *)(v38 + 968);
      v1229 = vmlaq_laneq_f64(vmlaq_n_f64(v1223, v1225, v1222.f64[0]), v1227, v1222, 1);
      v1230 = vmlaq_laneq_f64(vmlaq_n_f64(v1224, v1226, v1222.f64[0]), v1228, v1222, 1);
      v1231 = *(float64x2_t *)((char *)&v2762[-29] + 8);
      v1232 = vmlaq_laneq_f64(vmlaq_n_f64(v1204, v1218, v1231.f64[0]), v1220, v1231, 1);
      v1233 = vmlaq_laneq_f64(vmlaq_n_f64(v1205, v1217, v1231.f64[0]), v1219, v1231, 1);
      v1234 = *(float64x2_t *)((char *)&v2762[-28] + 8);
      v1235 = vmlaq_laneq_f64(vmlaq_n_f64(v1232, v1225, v1234.f64[0]), v1227, v1234, 1);
      v1236 = vmlaq_laneq_f64(vmlaq_n_f64(v1233, v1226, v1234.f64[0]), v1228, v1234, 1);
      v1237 = v2762[-21];
      v1238 = vmlaq_laneq_f64(vmlaq_n_f64(v1210, v1218, v1237.f64[0]), v1220, v1237, 1);
      v1239 = vmlaq_laneq_f64(vmlaq_n_f64(v1211, v1217, v1237.f64[0]), v1219, v1237, 1);
      v1240 = v2762[-20];
      v1241 = vmlaq_laneq_f64(vmlaq_n_f64(v1238, v1225, v1240.f64[0]), v1227, v1240, 1);
      v1242 = vmlaq_laneq_f64(vmlaq_n_f64(v1239, v1226, v1240.f64[0]), v1228, v1240, 1);
      v1243 = *(float64x2_t *)((char *)&v2762[-14] + 8);
      v1244 = vmlaq_laneq_f64(vmlaq_n_f64(v1215, v1218, v1243.f64[0]), v1220, v1243, 1);
      v1245 = *(float64x2_t *)((char *)&v2762[-13] + 8);
      v1246 = vmlaq_laneq_f64(vmlaq_n_f64(v1244, v1225, v1245.f64[0]), v1227, v1245, 1);
      v1247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1216, v1217, v1243.f64[0]), v1219, v1243, 1), v1226, v1245.f64[0]), v1228, v1245, 1);
      v1248 = *(float64x2_t *)(v38 + 1088);
      v1249 = *(float64x2_t *)(v38 + 1072);
      v1250 = *(float64x2_t *)(v33 + 2512);
      v1251 = *(float64x2_t *)(v33 + 2496);
      v1252 = v2762[-34];
      v1253 = v2762[-33];
      v1254 = vmlaq_laneq_f64(vmlaq_n_f64(v1229, v1249, v1252.f64[0]), v1251, v1252, 1);
      v1255 = vmlaq_laneq_f64(vmlaq_n_f64(v1230, v1248, v1252.f64[0]), v1250, v1252, 1);
      v1256 = *(float64x2_t *)(v38 + 1312);
      v1257 = *(float64x2_t *)(v38 + 1432);
      v1258 = *(float64x2_t *)(v38 + 1448);
      v1259 = vmlaq_laneq_f64(vmlaq_n_f64(v1254, v1256, v1253.f64[0]), v1257, v1253, 1);
      v1260 = *(float64x2_t *)(v38 + 1328);
      v1261 = vmlaq_laneq_f64(vmlaq_n_f64(v1255, v1260, v1253.f64[0]), v1258, v1253, 1);
      v1262 = *(float64x2_t *)((char *)&v2762[-27] + 8);
      v1263 = vmlaq_laneq_f64(vmlaq_n_f64(v1235, v1249, v1262.f64[0]), v1251, v1262, 1);
      v1264 = vmlaq_laneq_f64(vmlaq_n_f64(v1236, v1248, v1262.f64[0]), v1250, v1262, 1);
      v1265 = *(float64x2_t *)((char *)&v2762[-26] + 8);
      v1266 = vmlaq_laneq_f64(vmlaq_n_f64(v1263, v1256, v1265.f64[0]), v1257, v1265, 1);
      v1267 = vmlaq_laneq_f64(vmlaq_n_f64(v1264, v1260, v1265.f64[0]), v1258, v1265, 1);
      v1268 = v2762[-19];
      v1269 = vmlaq_laneq_f64(vmlaq_n_f64(v1241, v1249, v1268.f64[0]), v1251, v1268, 1);
      v1270 = vmlaq_laneq_f64(vmlaq_n_f64(v1242, v1248, v1268.f64[0]), v1250, v1268, 1);
      v1271 = v2762[-18];
      v1272 = vmlaq_laneq_f64(vmlaq_n_f64(v1269, v1256, v1271.f64[0]), v1257, v1271, 1);
      v1273 = vmlaq_laneq_f64(vmlaq_n_f64(v1270, v1260, v1271.f64[0]), v1258, v1271, 1);
      v1274 = *(float64x2_t *)((char *)&v2762[-12] + 8);
      v1275 = vmlaq_laneq_f64(vmlaq_n_f64(v1246, v1249, v1274.f64[0]), v1251, v1274, 1);
      v1276 = *(float64x2_t *)((char *)&v2762[-11] + 8);
      v1277 = vmlaq_laneq_f64(vmlaq_n_f64(v1275, v1256, v1276.f64[0]), v1257, v1276, 1);
      v1278 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1247, v1248, v1274.f64[0]), v1250, v1274, 1), v1260, v1276.f64[0]), v1258, v1276, 1);
      v1279 = *(float64x2_t *)(v38 + 1568);
      v1280 = *(float64x2_t *)(v38 + 1552);
      v1281 = *(float64x2_t *)(v33 + 2992);
      _Q4 = *(float64x2_t *)(v33 + 2976);
      v1283 = v2762[-32];
      v1284 = vmlaq_laneq_f64(vmlaq_n_f64(v1259, v1280, v1283.f64[0]), _Q4, v1283, 1);
      v1285 = vmlaq_laneq_f64(vmlaq_n_f64(v1261, v1279, v1283.f64[0]), v1281, v1283, 1);
      v1286 = *(float64x2_t *)((char *)&v2762[-25] + 8);
      v1287 = vmlaq_laneq_f64(vmlaq_n_f64(v1266, v1280, v1286.f64[0]), _Q4, v1286, 1);
      v1288 = vmlaq_laneq_f64(vmlaq_n_f64(v1267, v1279, v1286.f64[0]), v1281, v1286, 1);
      v1289 = v2762[-17];
      v1290 = vmlaq_laneq_f64(vmlaq_n_f64(v1272, v1280, v1289.f64[0]), _Q4, v1289, 1);
      v1291 = vmlaq_laneq_f64(vmlaq_n_f64(v1273, v1279, v1289.f64[0]), v1281, v1289, 1);
      v1292 = *(float64x2_t *)((char *)&v2762[-10] + 8);
      _Q9 = vmlaq_laneq_f64(vmlaq_n_f64(v1277, v1280, v1292.f64[0]), _Q4, v1292, 1);
      v1294 = vmlaq_n_f64(v1278, v1279, v1292.f64[0]);
      v1295 = *(float64x2_t *)(v38 + 1808);
      v1296 = vmlaq_laneq_f64(v1294, v1281, v1292, 1);
      _Q2 = *(float64x2_t *)(v38 + 1792);
      v1281.f64[0] = v2762[-31].f64[0];
      v1298 = vmlaq_n_f64(v1284, _Q2, v1281.f64[0]);
      _Q28 = vmlaq_n_f64(v1285, v1295, v1281.f64[0]);
      v1281.f64[0] = v2762[-24].f64[1];
      _Q29 = vmlaq_n_f64(v1287, _Q2, v1281.f64[0]);
      v1301 = vmlaq_n_f64(v1288, v1295, v1281.f64[0]);
      v1281.f64[0] = v2762[-16].f64[0];
      v1302 = vmlaq_n_f64(v1290, _Q2, v1281.f64[0]);
      v1303 = vmlaq_n_f64(v1291, v1295, v1281.f64[0]);
      v1281.f64[0] = v2762[-9].f64[1];
      v35[34] = v1298;
      v35[35] = _Q28;
      *(float64x2_t *)((char *)v35 + 664) = _Q29;
      *(float64x2_t *)((char *)v35 + 680) = v1301;
      v35[49] = v1302;
      v35[50] = v1303;
      *(float64x2_t *)((char *)v35 + 904) = vmlaq_n_f64(_Q9, _Q2, v1281.f64[0]);
      *(float64x2_t *)((char *)v35 + 920) = vmlaq_n_f64(v1296, v1295, v1281.f64[0]);
      v1304 = *(float64x2_t *)(v38 + 144);
      _Q4.f64[0] = *(float64_t *)(v38 + 280);
      v1305 = *(float64x2_t *)(v38 + 264);
      v1306 = *(float64x2_t *)(v38 + 384);
      _Q9.f64[0] = *(float64_t *)(v38 + 520);
      _Q10 = *(float64x2_t *)(v38 + 504);
      _Q11 = *(float64x2_t *)((char *)&v2762[-30] + 8);
      v1309 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1304, _Q22.f64[0]), v1305, _Q22, 1), v1306, _Q19.f64[0]), _Q10, _Q19, 1);
      __asm
      {
        FMLA            D29, D4, V22.D[1]
        FMLA            D29, D9, V19.D[1]
      }
      v1310 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1304, _Q20.f64[0]), v1305, _Q20, 1), v1306, _Q11.f64[0]), _Q10, _Q11, 1);
      __asm
      {
        FMLA            D28, D4, V20.D[1]
        FMLA            D28, D9, V11.D[1]
      }
      _Q19.f64[1] = v2789.f64[1];
      __asm { FMLA            D22, D4, V19.D[1] }
      v1311 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1304, v2789.f64[0]), v1305, v2789, 1), v1306, _Q7.f64[0]), _Q10, _Q7, 1);
      __asm { FMLA            D22, D9, V7.D[1] }
      *(_QWORD *)&_Q11.f64[1] = v2788.i64[1];
      v1312 = vmlaq_laneq_f64(vmulq_n_f64(v1304, *(double *)v2788.i64), v1305, (float64x2_t)v2788, 1);
      _Q3 = *(float64x2_t *)((char *)&v2762[-15] + 8);
      v1314 = vmlaq_laneq_f64(vmlaq_n_f64(v1312, v1306, _Q3.f64[0]), _Q10, _Q3, 1);
      __asm
      {
        FMLA            D19, D4, V11.D[1]
        FMLA            D19, D9, V3.D[1]
      }
      v1315 = *(float64x2_t *)(v38 + 624);
      _Q4.f64[0] = *(float64_t *)(v38 + 760);
      v1316 = *(float64x2_t *)(v38 + 744);
      v1317 = *(float64x2_t *)(v38 + 864);
      _Q9.f64[0] = *(float64_t *)(v38 + 1000);
      _Q10.f64[1] = v2787.f64[1];
      __asm { FMLA            D29, D4, V10.D[1] }
      v1318 = *(float64x2_t *)(v38 + 984);
      v1319 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1309, v1315, v2787.f64[0]), v1316, v2787, 1), v1317, _Q16.f64[0]), v1318, _Q16, 1);
      __asm { FMLA            D29, D9, V16.D[1] }
      *(_QWORD *)&_Q16.f64[1] = v2786.i64[1];
      __asm { FMLA            D28, D4, V16.D[1] }
      _Q16 = *(float64x2_t *)((char *)&v2762[-28] + 8);
      v1321 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1310, v1315, *(double *)v2786.i64), v1316, (float64x2_t)v2786, 1), v1317, _Q16.f64[0]), v1318, _Q16, 1);
      __asm
      {
        FMLA            D28, D9, V16.D[1]
        FMLA            D22, D4, V6.D[1]
      }
      v1322 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1311, v1315, _Q6.f64[0]), v1316, _Q6, 1), v1317, _Q27.f64[0]), v1318, _Q27, 1);
      __asm { FMLA            D22, D9, V27.D[1] }
      v1323 = vmlaq_n_f64(v1314, v1315, _Q5.f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v2762[-13] + 8);
      v1325 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v1323, v1316, _Q5, 1), v1317, _Q3.f64[0]), v1318, _Q3, 1);
      __asm
      {
        FMLA            D19, D4, V5.D[1]
        FMLA            D19, D9, V3.D[1]
      }
      v1326 = *(float64x2_t *)(v38 + 1104);
      _Q4.f64[0] = *(float64_t *)(v38 + 1240);
      v1327 = *(float64x2_t *)(v38 + 1224);
      v1328 = *(float64x2_t *)(v38 + 1344);
      _Q27.f64[0] = *(float64_t *)(v38 + 1480);
      v1329 = *(float64x2_t *)(v38 + 1464);
      _Q31 = *(float64x2_t *)((char *)&v2762[-26] + 8);
      v1331 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1319, v1326, _Q23.f64[0]), v1327, _Q23, 1), v1328, _Q26.f64[0]), v1329, _Q26, 1);
      __asm
      {
        FMLA            D29, D4, V23.D[1]
        FMLA            D29, D27, V26.D[1]
      }
      v1332 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1321, v1326, _Q21.f64[0]), v1327, _Q21, 1), v1328, _Q31.f64[0]), v1329, _Q31, 1);
      __asm
      {
        FMLA            D28, D4, V21.D[1]
        FMLA            D28, D27, V31.D[1]
      }
      v1333 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1322, v1326, _Q18.f64[0]), v1327, _Q18, 1), v1328, _Q25.f64[0]), v1329, _Q25, 1);
      __asm
      {
        FMLA            D22, D4, V18.D[1]
        FMLA            D22, D27, V25.D[1]
      }
      v1334 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1325, v1326, _Q17.f64[0]), v1327, _Q17, 1), v1328, _Q24.f64[0]), v1329, _Q24, 1);
      __asm
      {
        FMLA            D19, D4, V17.D[1]
        FMLA            D19, D27, V24.D[1]
      }
      v1335 = *(float64x2_t *)(v38 + 1584);
      _Q4.f64[0] = *(float64_t *)(v38 + 1720);
      v1336 = *(float64x2_t *)(v38 + 1704);
      _Q6.f64[0] = *(float64_t *)(v38 + 1840);
      v1337 = *(float64x2_t *)(v38 + 1824);
      _Q17.f64[0] = v2762[-31].f64[0];
      _Q18 = v2762[-32];
      _Q21.f64[0] = v2762[-24].f64[1];
      _Q23 = *(float64x2_t *)((char *)&v2762[-25] + 8);
      _Q24.f64[0] = v2762[-16].f64[0];
      _Q25 = v2762[-17];
      _Q26.f64[0] = v2762[-9].f64[1];
      _Q27 = *(float64x2_t *)((char *)&v2762[-10] + 8);
      __asm
      {
        FMLA            D29, D4, V18.D[1]
        FMLA            D28, D4, V23.D[1]
        FMLA            D22, D4, V25.D[1]
        FMLA            D19, D4, V27.D[1]
      }
      v35[37].f64[0] = _Q29.f64[0] + _Q6.f64[0] * _Q17.f64[0];
      v35[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1331, v1335, _Q18.f64[0]), v1336, _Q18, 1), v1337, _Q17.f64[0]);
      v35[44].f64[1] = _Q28.f64[0] + _Q6.f64[0] * _Q21.f64[0];
      *(float64x2_t *)((char *)v35 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1332, v1335, _Q23.f64[0]), v1336, _Q23, 1), v1337, _Q21.f64[0]);
      v35[52].f64[0] = _Q22.f64[0] + _Q6.f64[0] * _Q24.f64[0];
      v35[51] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1333, v1335, _Q25.f64[0]), v1336, _Q25, 1), v1337, _Q24.f64[0]);
      v35[59].f64[1] = _Q19.f64[0] + _Q6.f64[0] * _Q26.f64[0];
      *(float64x2_t *)((char *)v35 + 936) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1334, v1335, _Q27.f64[0]), v1336, _Q27, 1), v1337, _Q26.f64[0]);
      v1342 = v2762[-7];
      v1343 = v2762[-8];
      v1344 = v2762[-5];
      v1345 = v2762[-6];
      v1346 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 48), v1343.f64[0]), *(float64x2_t *)(v33 + 1472), v1343, 1), *(float64x2_t *)(v38 + 288), v1342.f64[0]), *(float64x2_t *)(v38 + 408), v1342, 1), *(float64x2_t *)(v38 + 528), v1345.f64[0]), *(float64x2_t *)(v33 + 1952), v1345,
                    1),
                  *(float64x2_t *)(v38 + 768),
                  v1344.f64[0]),
                *(float64x2_t *)(v38 + 888),
                v1344,
                1);
      v1347 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 64), v1343.f64[0]), *(float64x2_t *)(v33 + 1488), v1343, 1), *(float64x2_t *)(v38 + 304), v1342.f64[0]), *(float64x2_t *)(v38 + 424), v1342, 1), *(float64x2_t *)(v38 + 544), v1345.f64[0]), *(float64x2_t *)(v33 + 1968), v1345,
                    1),
                  *(float64x2_t *)(v38 + 784),
                  v1344.f64[0]),
                *(float64x2_t *)(v38 + 904),
                v1344,
                1);
      v1348 = v2762[-3];
      v1349 = v2762[-4];
      v1342.f64[0] = v2762[-1].f64[0];
      v1350 = v2762[-2];
      v1351 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1347, *(float64x2_t *)(v38 + 1024), v1349.f64[0]), *(float64x2_t *)(v33 + 2448), v1349, 1), *(float64x2_t *)(v38 + 1264), v1348.f64[0]), *(float64x2_t *)(v38 + 1384), v1348, 1), *(float64x2_t *)(v38 + 1504), v1350.f64[0]), *(float64x2_t *)(v33 + 2928), v1350, 1),
                *(float64x2_t *)(v38 + 1744),
                v1342.f64[0]);
      v35[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1346, *(float64x2_t *)(v38 + 1008), v1349.f64[0]), *(float64x2_t *)(v33 + 2432), v1349, 1), *(float64x2_t *)(v38 + 1248), v1348.f64[0]), *(float64x2_t *)(v38 + 1368), v1348, 1), *(float64x2_t *)(v38 + 1488), v1350.f64[0]), *(float64x2_t *)(v33 + 2912), v1350, 1),
                  *(float64x2_t *)(v38 + 1728),
                  v1342.f64[0]);
      v35[61] = v1351;
      v1352 = v2762[-7];
      v1353 = v2762[-8];
      v1354 = v2762[-5];
      v1355 = v2762[-6];
      v1356 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 80), v1353.f64[0]), *(float64x2_t *)(v33 + 1504), v1353, 1), *(float64x2_t *)(v38 + 320), v1352.f64[0]), *(float64x2_t *)(v38 + 440), v1352, 1), *(float64x2_t *)(v38 + 560), v1355.f64[0]), *(float64x2_t *)(v33 + 1984), v1355,
                    1),
                  *(float64x2_t *)(v38 + 800),
                  v1354.f64[0]),
                *(float64x2_t *)(v38 + 920),
                v1354,
                1);
      v1357 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 96), v1353.f64[0]), *(float64x2_t *)(v33 + 1520), v1353, 1), *(float64x2_t *)(v38 + 336), v1352.f64[0]), *(float64x2_t *)(v38 + 456), v1352, 1), *(float64x2_t *)(v38 + 576), v1355.f64[0]), *(float64x2_t *)(v33 + 2000), v1355,
                    1),
                  *(float64x2_t *)(v38 + 816),
                  v1354.f64[0]),
                *(float64x2_t *)(v38 + 936),
                v1354,
                1);
      v1358 = v2762[-3];
      v1359 = v2762[-4];
      v1352.f64[0] = v2762[-1].f64[0];
      v1360 = v2762[-2];
      v1361 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1357, *(float64x2_t *)(v38 + 1056), v1359.f64[0]), *(float64x2_t *)(v33 + 2480), v1359, 1), *(float64x2_t *)(v38 + 1296), v1358.f64[0]), *(float64x2_t *)(v38 + 1416), v1358, 1), *(float64x2_t *)(v38 + 1536), v1360.f64[0]), *(float64x2_t *)(v33 + 2960), v1360, 1),
                *(float64x2_t *)(v38 + 1776),
                v1352.f64[0]);
      v35[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1356, *(float64x2_t *)(v38 + 1040), v1359.f64[0]), *(float64x2_t *)(v33 + 2464), v1359, 1), *(float64x2_t *)(v38 + 1280), v1358.f64[0]), *(float64x2_t *)(v38 + 1400), v1358, 1), *(float64x2_t *)(v38 + 1520), v1360.f64[0]), *(float64x2_t *)(v33 + 2944), v1360, 1),
                  *(float64x2_t *)(v38 + 1760),
                  v1352.f64[0]);
      v35[63] = v1361;
      v1362 = v2762[-7];
      v1363 = v2762[-8];
      v1364 = v2762[-5];
      v1365 = v2762[-6];
      v1366 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 112), v1363.f64[0]), *(float64x2_t *)(v33 + 1536), v1363, 1), *(float64x2_t *)(v38 + 352), v1362.f64[0]), *(float64x2_t *)(v38 + 472), v1362, 1), *(float64x2_t *)(v38 + 592), v1365.f64[0]), *(float64x2_t *)(v33 + 2016), v1365,
                    1),
                  *(float64x2_t *)(v38 + 832),
                  v1364.f64[0]),
                *(float64x2_t *)(v38 + 952),
                v1364,
                1);
      _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 128), v1363.f64[0]), *(float64x2_t *)(v33 + 1552), v1363, 1), *(float64x2_t *)(v38 + 368), v1362.f64[0]), *(float64x2_t *)(v38 + 488), v1362, 1), *(float64x2_t *)(v38 + 608), v1365.f64[0]), *(float64x2_t *)(v33 + 2032), v1365,
                  1),
                *(float64x2_t *)(v38 + 848),
                v1364.f64[0]),
              *(float64x2_t *)(v38 + 968),
              v1364,
              1);
      v1368 = v2762[-3];
      v1369 = v2762[-4];
      v1362.f64[0] = v2762[-1].f64[0];
      v1370 = v2762[-2];
      v1371 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1366, *(float64x2_t *)(v38 + 1072), v1369.f64[0]), *(float64x2_t *)(v33 + 2496), v1369, 1), *(float64x2_t *)(v38 + 1312), v1368.f64[0]), *(float64x2_t *)(v38 + 1432), v1368, 1), *(float64x2_t *)(v38 + 1552), v1370.f64[0]), *(float64x2_t *)(v33 + 2976), v1370, 1),
                *(float64x2_t *)(v38 + 1792),
                v1362.f64[0]);
      v35[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, *(float64x2_t *)(v38 + 1088), v1369.f64[0]), *(float64x2_t *)(v33 + 2512), v1369, 1), *(float64x2_t *)(v38 + 1328), v1368.f64[0]), *(float64x2_t *)(v38 + 1448), v1368, 1), *(float64x2_t *)(v38 + 1568), v1370.f64[0]), *(float64x2_t *)(v33 + 2992), v1370, 1),
                  *(float64x2_t *)(v38 + 1808),
                  v1362.f64[0]);
      v35[64] = v1371;
      _Q2.f64[0] = *(float64_t *)(v38 + 280);
      _Q6.f64[0] = *(float64_t *)(v38 + 520);
      _Q16 = v2762[-7];
      _Q17 = v2762[-8];
      v1374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 144), _Q17.f64[0]), *(float64x2_t *)(v38 + 264), _Q17, 1), *(float64x2_t *)(v38 + 384), _Q16.f64[0]), *(float64x2_t *)(v38 + 504), _Q16, 1);
      __asm
      {
        FMLA            D0, D2, V17.D[1]
        FMLA            D0, D6, V16.D[1]
      }
      _Q4.f64[0] = *(float64_t *)(v38 + 760);
      _Q16.f64[0] = *(float64_t *)(v38 + 1000);
      _Q18 = v2762[-5];
      _Q19 = v2762[-6];
      v1377 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1374, *(float64x2_t *)(v38 + 624), _Q19.f64[0]), *(float64x2_t *)(v38 + 744), _Q19, 1), *(float64x2_t *)(v38 + 864), _Q18.f64[0]), *(float64x2_t *)(v38 + 984), _Q18, 1);
      __asm
      {
        FMLA            D0, D4, V19.D[1]
        FMLA            D0, D16, V18.D[1]
      }
      _Q4.f64[0] = *(float64_t *)(v38 + 1240);
      _Q16.f64[0] = *(float64_t *)(v38 + 1480);
      _Q18 = v2762[-3];
      _Q19 = v2762[-4];
      __asm
      {
        FMLA            D0, D4, V19.D[1]
        FMLA            D0, D16, V18.D[1]
      }
      _Q4.f64[0] = *(float64_t *)(v38 + 1720);
      _Q16.f64[0] = v2762[-1].f64[0];
      _Q17 = v2762[-2];
      v1381 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1377, *(float64x2_t *)(v38 + 1104), _Q19.f64[0]), *(float64x2_t *)(v38 + 1224), _Q19, 1), *(float64x2_t *)(v38 + 1344), _Q18.f64[0]), *(float64x2_t *)(v38 + 1464), _Q18, 1), *(float64x2_t *)(v38 + 1584), _Q17.f64[0]), *(float64x2_t *)(v38 + 1704), _Q17, 1),
                *(float64x2_t *)(v38 + 1824),
                _Q16.f64[0]);
      __asm { FMLA            D0, D4, V17.D[1] }
      v35[67].f64[0] = _Q0.f64[0] + *(double *)(v38 + 1840) * _Q16.f64[0];
      v35[66] = v1381;
    }
    if (v2790.i64[0])
    {
      v2824[0] = 0;
      *(_QWORD *)&v2810.f64[0] = v2824;
      sub_20F4DF030(v2790.i64[0], &v2810);
      v1382 = (float64x2_t *)v2790.i64[0];
      v1383 = (float64x2_t *)(v2790.i64[0] + 272);
      _V1.D[1] = v2818.f64[1];
      _V3.D[1] = v2820.f64[1];
      _V5.D[1] = v2822.f64[1];
      v1387.f64[0] = v2797.f64[0];
      v1387.f64[1] = v2793.f64[0];
      *(_QWORD *)&v1388.f64[0] = v2795.i64[0];
      v1388.f64[1] = v2792.f64[0];
      *(_QWORD *)&v1389.f64[0] = v2794.i64[0];
      *(_QWORD *)&v1389.f64[1] = v2791.i64[0];
      v1390 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1387, v2818.f64[0]), v1388, v2818, 1), v1389, v2819);
      _D17 = v2798.f64[0];
      __asm { FMLA            D7, D17, V1.D[1] }
      v1393 = _D7 + *(double *)v2796.i64 * v2819;
      v1394 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1387, v2820.f64[0]), v1388, v2820, 1), v1389, v2821);
      __asm { FMLA            D7, D17, V3.D[1] }
      v1396 = _D7 + *(double *)v2796.i64 * v2821;
      v1397 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1387, v2822.f64[0]), v1388, v2822, 1), v1389, v2823);
      __asm { FMLA            D7, D17, V5.D[1] }
      v1399 = _D7 + *(double *)v2796.i64 * v2823;
      *(double *)(v2790.i64[0] + 64) = v1393;
      v1382[3] = v1390;
      v1382[11].f64[1] = v1396;
      *(float64x2_t *)((char *)v1382 + 168) = v1394;
      v1382[19].f64[0] = v1399;
      v1382[18] = v1397;
      v1382[23].f64[1] = v2808.f64[0];
      v1400.f64[0] = v2807.f64[0];
      v1400.f64[1] = v2806.f64[0];
      *(float64x2_t *)((char *)v1382 + 360) = v1400;
      v1382[31].f64[0] = v2805.f64[0];
      *(_QWORD *)&v1400.f64[0] = v2804.i64[0];
      *(_QWORD *)&v1400.f64[1] = v2803.i64[0];
      v1382[30] = v1400;
      v1382[38].f64[1] = v2802.f64[0];
      *(_QWORD *)&v1400.f64[0] = v2801.i64[0];
      *(_QWORD *)&v1400.f64[1] = v2800.i64[0];
      *(float64x2_t *)((char *)v1382 + 600) = v1400;
      MEMORY[0x24BDAC7A8]();
      v1401 = &v2762[-45];
      memcpy(&v2762[-45], v1382, 0x2D0uLL);
      v1403 = *(float64x2_t *)(v38 + 48);
      v1402 = *(float64x2_t *)(v38 + 64);
      v1404 = *(float64x2_t *)(v33 + 1488);
      v1405 = *(float64x2_t *)(v33 + 1472);
      v1407 = *(float64x2_t *)(v38 + 288);
      v1406 = *(float64x2_t *)(v38 + 304);
      v1409 = *(float64x2_t *)(v38 + 408);
      v1408 = *(float64x2_t *)(v38 + 424);
      v1410 = v2762[-44];
      v1411 = *(float64x2_t *)((char *)&v2762[-37] + 8);
      v1412 = *(float64x2_t *)((char *)&v2762[-38] + 8);
      v1413 = v2762[-30];
      v1414 = *(float64x2_t *)((char *)&v2762[-22] + 8);
      v1415 = *(float64x2_t *)((char *)&v2762[-23] + 8);
      _Q24 = *v1401;
      v1417 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1403, v1401->f64[0]), v1405, *v1401, 1), v1407, v1410.f64[0]), v1409, v1410, 1);
      v1418 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1402, v1401->f64[0]), v1404, *v1401, 1), v1406, v1410.f64[0]), v1408, v1410, 1);
      v1419 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1403, v1412.f64[0]), v1405, v1412, 1), v1407, v1411.f64[0]), v1409, v1411, 1);
      v1420 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1402, v1412.f64[0]), v1404, v1412, 1), v1406, v1411.f64[0]), v1408, v1411, 1);
      _Q20 = v1413;
      v1422 = v2762[-29];
      v1423 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1403, v1413.f64[0]), v1405, v1413, 1), v1407, v1422.f64[0]), v1409, v1422, 1);
      v1424 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1402, v1413.f64[0]), v1404, v1413, 1), v1406, v1422.f64[0]), v1408, v1422, 1);
      v1425 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1403, v1415.f64[0]), v1405, v1415, 1), v1407, v1414.f64[0]), v1409, v1414, 1);
      v1426 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1402, v1415.f64[0]), v1404, v1415, 1), v1406, v1414.f64[0]), v1408, v1414, 1);
      v1428 = *(float64x2_t *)(v38 + 528);
      v1427 = *(float64x2_t *)(v38 + 544);
      v1429 = *(float64x2_t *)(v33 + 1968);
      v1430 = *(float64x2_t *)(v33 + 1952);
      v1432 = *(float64x2_t *)(v38 + 768);
      v1431 = *(float64x2_t *)(v38 + 784);
      v1434 = *(float64x2_t *)(v38 + 888);
      v1433 = *(float64x2_t *)(v38 + 904);
      v1435 = *(float64x2_t *)((char *)&v2762[-35] + 8);
      v1436 = *(float64x2_t *)((char *)&v2762[-36] + 8);
      v1437 = *(float64x2_t *)((char *)&v2762[-20] + 8);
      v1438 = *(float64x2_t *)((char *)&v2762[-21] + 8);
      _Q1 = v2762[-44];
      v1440 = v2762[-43];
      _Q2 = v1440;
      v1442 = v2762[-42];
      v1443 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1417, v1428, v1440.f64[0]), v1430, v1440, 1), v1432, v1442.f64[0]), v1434, v1442, 1);
      v1444 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1418, v1427, v1440.f64[0]), v1429, v1440, 1), v1431, v1442.f64[0]), v1433, v1442, 1);
      v1445 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1419, v1428, v1436.f64[0]), v1430, v1436, 1), v1432, v1435.f64[0]), v1434, v1435, 1);
      v1446 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1420, v1427, v1436.f64[0]), v1429, v1436, 1), v1431, v1435.f64[0]), v1433, v1435, 1);
      _Q4 = v2762[-29];
      v1448 = v2762[-28];
      _Q3 = v1448;
      v1450 = v2762[-27];
      v1451 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1423, v1428, v1448.f64[0]), v1430, v1448, 1), v1432, v1450.f64[0]), v1434, v1450, 1);
      v1452 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1424, v1427, v1448.f64[0]), v1429, v1448, 1), v1431, v1450.f64[0]), v1433, v1450, 1);
      v1453 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1425, v1428, v1438.f64[0]), v1430, v1438, 1), v1432, v1437.f64[0]), v1434, v1437, 1);
      v1454 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1426, v1427, v1438.f64[0]), v1429, v1438, 1), v1431, v1437.f64[0]), v1433, v1437, 1);
      v1456 = *(float64x2_t *)(v38 + 1008);
      v1455 = *(float64x2_t *)(v38 + 1024);
      v1457 = *(float64x2_t *)(v33 + 2448);
      v1458 = *(float64x2_t *)(v33 + 2432);
      v1459 = *(float64x2_t *)(v38 + 1264);
      v1460 = *(float64x2_t *)(v38 + 1248);
      v1461 = *(float64x2_t *)(v38 + 1368);
      v1462 = *(float64x2_t *)(v38 + 1384);
      v1463 = *(float64x2_t *)((char *)&v2762[-33] + 8);
      v1464 = *(float64x2_t *)((char *)&v2762[-34] + 8);
      v1465 = *(float64x2_t *)((char *)&v2762[-18] + 8);
      v1466 = *(float64x2_t *)((char *)&v2762[-19] + 8);
      _Q5 = v2762[-42];
      _Q7 = v2762[-41];
      v1469 = v2762[-40];
      v1470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1443, v1456, _Q7.f64[0]), v1458, _Q7, 1), v1460, v1469.f64[0]), v1461, v1469, 1);
      v1471 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1444, v1455, _Q7.f64[0]), v1457, _Q7, 1), v1459, v1469.f64[0]), v1462, v1469, 1);
      v1472 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1445, v1456, v1464.f64[0]), v1458, v1464, 1), v1460, v1463.f64[0]), v1461, v1463, 1);
      v1473 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1446, v1455, v1464.f64[0]), v1457, v1464, 1), v1459, v1463.f64[0]), v1462, v1463, 1);
      _Q18 = v2762[-27];
      _Q6 = v2762[-26];
      v1476 = v2762[-25];
      v1477 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1451, v1456, _Q6.f64[0]), v1458, _Q6, 1), v1460, v1476.f64[0]), v1461, v1476, 1);
      v1478 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1452, v1455, _Q6.f64[0]), v1457, _Q6, 1), v1459, v1476.f64[0]), v1462, v1476, 1);
      v1479 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1453, v1456, v1466.f64[0]), v1458, v1466, 1), v1460, v1465.f64[0]), v1461, v1465, 1);
      v1480 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1454, v1455, v1466.f64[0]), v1457, v1466, 1), v1459, v1465.f64[0]), v1462, v1465, 1);
      v1481 = *(float64x2_t *)(v38 + 1504);
      v1482 = *(float64x2_t *)(v38 + 1488);
      v1483 = *(float64x2_t *)(v33 + 2928);
      v1484 = *(float64x2_t *)(v33 + 2912);
      v1485 = *(float64x2_t *)(v38 + 1744);
      v1486 = *(float64x2_t *)(v38 + 1728);
      v1455.f64[0] = v2762[-38].f64[0];
      v1461.f64[0] = v2762[-31].f64[1];
      v1487 = *(float64x2_t *)((char *)&v2762[-32] + 8);
      _Q17 = v2762[-40];
      v1488 = v2762[-39];
      v1490 = vmlaq_laneq_f64(vmlaq_n_f64(v1470, v1482, v1488.f64[0]), v1484, v1488, 1);
      v1491 = vmlaq_laneq_f64(vmlaq_n_f64(v1471, v1481, v1488.f64[0]), v1483, v1488, 1);
      v1488.f64[0] = v2762[-23].f64[0];
      v1492 = vmlaq_n_f64(v1490, v1486, v1455.f64[0]);
      v1493 = vmlaq_n_f64(v1491, v1485, v1455.f64[0]);
      v1494 = v2762[-16].f64[1];
      v1495 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1472, v1482, v1487.f64[0]), v1484, v1487, 1), v1486, v1461.f64[0]);
      v1496 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1473, v1481, v1487.f64[0]), v1483, v1487, 1), v1485, v1461.f64[0]);
      _Q16 = v2762[-25];
      v1497 = v2762[-24];
      v1499 = vmlaq_laneq_f64(vmlaq_n_f64(v1477, v1482, v1497.f64[0]), v1484, v1497, 1);
      v1500 = vmlaq_laneq_f64(vmlaq_n_f64(v1478, v1481, v1497.f64[0]), v1483, v1497, 1);
      v1501 = *(float64x2_t *)((char *)&v2762[-17] + 8);
      *v1382 = v1492;
      v1382[1] = v1493;
      *(float64x2_t *)((char *)v1382 + 136) = v1496;
      *(float64x2_t *)((char *)v1382 + 120) = v1495;
      v1382[15] = vmlaq_n_f64(v1499, v1486, v1488.f64[0]);
      v1382[16] = vmlaq_n_f64(v1500, v1485, v1488.f64[0]);
      *(float64x2_t *)((char *)v1382 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1480, v1481, v1501.f64[0]), v1483, v1501, 1), v1485, v1494);
      *(float64x2_t *)((char *)v1382 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1479, v1482, v1501.f64[0]), v1484, v1501, 1), v1486, v1494);
      v1502 = *(float64x2_t *)(v38 + 80);
      v1503 = *(float64x2_t *)(v38 + 96);
      v1504 = *(float64x2_t *)(v33 + 1520);
      v1505 = *(float64x2_t *)(v33 + 1504);
      v1507 = *(float64x2_t *)(v38 + 320);
      v1506 = *(float64x2_t *)(v38 + 336);
      v1509 = *(float64x2_t *)(v38 + 440);
      v1508 = *(float64x2_t *)(v38 + 456);
      v1510 = v2762[-44];
      v1511 = *(float64x2_t *)((char *)&v2762[-37] + 8);
      v1512 = *(float64x2_t *)((char *)&v2762[-38] + 8);
      v1514 = v2762[-30];
      v1513 = v2762[-29];
      v1515 = *(float64x2_t *)((char *)&v2762[-22] + 8);
      v1516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1502, v1401->f64[0]), v1505, *v1401, 1), v1507, v1510.f64[0]), v1509, v1510, 1);
      v1517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1503, v1401->f64[0]), v1504, *v1401, 1), v1506, v1510.f64[0]), v1508, v1510, 1);
      v1518 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1502, v1512.f64[0]), v1505, v1512, 1), v1507, v1511.f64[0]), v1509, v1511, 1);
      v1519 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1503, v1512.f64[0]), v1504, v1512, 1), v1506, v1511.f64[0]), v1508, v1511, 1);
      v1520 = vmlaq_laneq_f64(vmulq_n_f64(v1502, v1514.f64[0]), v1505, v1514, 1);
      v1521 = vmlaq_laneq_f64(vmulq_n_f64(v1503, v1514.f64[0]), v1504, v1514, 1);
      v1522 = *(float64x2_t *)((char *)&v2762[-23] + 8);
      v1523 = vmlaq_laneq_f64(vmlaq_n_f64(v1520, v1507, v1513.f64[0]), v1509, v1513, 1);
      v1524 = vmlaq_laneq_f64(vmlaq_n_f64(v1521, v1506, v1513.f64[0]), v1508, v1513, 1);
      v1525 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1502, v1522.f64[0]), v1505, v1522, 1), v1507, v1515.f64[0]), v1509, v1515, 1);
      v1526 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1503, v1522.f64[0]), v1504, v1522, 1), v1506, v1515.f64[0]), v1508, v1515, 1);
      v1528 = *(float64x2_t *)(v38 + 560);
      v1527 = *(float64x2_t *)(v38 + 576);
      v1529 = *(float64x2_t *)(v33 + 2000);
      v1530 = *(float64x2_t *)(v33 + 1984);
      v1532 = *(float64x2_t *)(v38 + 800);
      v1531 = *(float64x2_t *)(v38 + 816);
      v1534 = *(float64x2_t *)(v38 + 920);
      v1533 = *(float64x2_t *)(v38 + 936);
      v1535 = v2762[-43];
      v1536 = vmlaq_laneq_f64(vmlaq_n_f64(v1516, v1528, v1535.f64[0]), v1530, v1535, 1);
      v1537 = vmlaq_laneq_f64(vmlaq_n_f64(v1517, v1527, v1535.f64[0]), v1529, v1535, 1);
      v1538 = v2762[-42];
      v1539 = vmlaq_laneq_f64(vmlaq_n_f64(v1536, v1532, v1538.f64[0]), v1534, v1538, 1);
      v1540 = vmlaq_laneq_f64(vmlaq_n_f64(v1537, v1531, v1538.f64[0]), v1533, v1538, 1);
      v1541 = *(float64x2_t *)((char *)&v2762[-36] + 8);
      v1542 = vmlaq_laneq_f64(vmlaq_n_f64(v1518, v1528, v1541.f64[0]), v1530, v1541, 1);
      v1543 = vmlaq_laneq_f64(vmlaq_n_f64(v1519, v1527, v1541.f64[0]), v1529, v1541, 1);
      v1544 = *(float64x2_t *)((char *)&v2762[-35] + 8);
      v1545 = vmlaq_laneq_f64(vmlaq_n_f64(v1542, v1532, v1544.f64[0]), v1534, v1544, 1);
      v1546 = vmlaq_laneq_f64(vmlaq_n_f64(v1543, v1531, v1544.f64[0]), v1533, v1544, 1);
      v1547 = v2762[-28];
      v1548 = vmlaq_laneq_f64(vmlaq_n_f64(v1523, v1528, v1547.f64[0]), v1530, v1547, 1);
      v1549 = vmlaq_laneq_f64(vmlaq_n_f64(v1524, v1527, v1547.f64[0]), v1529, v1547, 1);
      v1550 = v2762[-27];
      v1551 = vmlaq_laneq_f64(vmlaq_n_f64(v1548, v1532, v1550.f64[0]), v1534, v1550, 1);
      v1552 = vmlaq_laneq_f64(vmlaq_n_f64(v1549, v1531, v1550.f64[0]), v1533, v1550, 1);
      v1553 = *(float64x2_t *)((char *)&v2762[-21] + 8);
      v1554 = vmlaq_n_f64(v1525, v1528, v1553.f64[0]);
      v1555 = *(float64x2_t *)((char *)&v2762[-20] + 8);
      v1556 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v1554, v1530, v1553, 1), v1532, v1555.f64[0]), v1534, v1555, 1);
      v1557 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1526, v1527, v1553.f64[0]), v1529, v1553, 1), v1531, v1555.f64[0]), v1533, v1555, 1);
      v1558 = *(float64x2_t *)(v38 + 1056);
      v1559 = *(float64x2_t *)(v38 + 1040);
      v1560 = *(float64x2_t *)(v33 + 2480);
      v1561 = *(float64x2_t *)(v33 + 2464);
      v1562 = *(float64x2_t *)(v38 + 1296);
      v1563 = *(float64x2_t *)(v38 + 1280);
      v1565 = *(float64x2_t *)(v38 + 1400);
      v1564 = *(float64x2_t *)(v38 + 1416);
      v1566 = v2762[-41];
      v1567 = vmlaq_laneq_f64(vmlaq_n_f64(v1539, v1559, v1566.f64[0]), v1561, v1566, 1);
      v1568 = vmlaq_laneq_f64(vmlaq_n_f64(v1540, v1558, v1566.f64[0]), v1560, v1566, 1);
      v1569 = v2762[-40];
      v1570 = vmlaq_laneq_f64(vmlaq_n_f64(v1567, v1563, v1569.f64[0]), v1565, v1569, 1);
      v1571 = vmlaq_laneq_f64(vmlaq_n_f64(v1568, v1562, v1569.f64[0]), v1564, v1569, 1);
      v1572 = *(float64x2_t *)((char *)&v2762[-34] + 8);
      v1573 = vmlaq_laneq_f64(vmlaq_n_f64(v1545, v1559, v1572.f64[0]), v1561, v1572, 1);
      v1574 = vmlaq_laneq_f64(vmlaq_n_f64(v1546, v1558, v1572.f64[0]), v1560, v1572, 1);
      v1575 = *(float64x2_t *)((char *)&v2762[-33] + 8);
      v1576 = vmlaq_laneq_f64(vmlaq_n_f64(v1573, v1563, v1575.f64[0]), v1565, v1575, 1);
      v1577 = vmlaq_laneq_f64(vmlaq_n_f64(v1574, v1562, v1575.f64[0]), v1564, v1575, 1);
      v1578 = v2762[-26];
      v1579 = vmlaq_laneq_f64(vmlaq_n_f64(v1551, v1559, v1578.f64[0]), v1561, v1578, 1);
      v1580 = vmlaq_laneq_f64(vmlaq_n_f64(v1552, v1558, v1578.f64[0]), v1560, v1578, 1);
      v1581 = v2762[-25];
      v1582 = vmlaq_laneq_f64(vmlaq_n_f64(v1579, v1563, v1581.f64[0]), v1565, v1581, 1);
      v1583 = vmlaq_laneq_f64(vmlaq_n_f64(v1580, v1562, v1581.f64[0]), v1564, v1581, 1);
      v1584 = *(float64x2_t *)((char *)&v2762[-19] + 8);
      v1585 = vmlaq_n_f64(v1556, v1559, v1584.f64[0]);
      v1586 = *(float64x2_t *)((char *)&v2762[-18] + 8);
      v1587 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v1585, v1561, v1584, 1), v1563, v1586.f64[0]), v1565, v1586, 1);
      v1588 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1557, v1558, v1584.f64[0]), v1560, v1584, 1), v1562, v1586.f64[0]), v1564, v1586, 1);
      v1589 = *(float64x2_t *)(v38 + 1536);
      v1590 = *(float64x2_t *)(v38 + 1520);
      v1591 = *(float64x2_t *)(v33 + 2960);
      v1592 = *(float64x2_t *)(v33 + 2944);
      v1593 = *(float64x2_t *)(v38 + 1776);
      v1594 = *(float64x2_t *)(v38 + 1760);
      v1564.f64[0] = v2762[-38].f64[0];
      v1595 = v2762[-39];
      v1584.f64[0] = v2762[-31].f64[1];
      v1596 = vmlaq_laneq_f64(vmlaq_n_f64(v1570, v1590, v1595.f64[0]), v1592, v1595, 1);
      v1597 = vmlaq_laneq_f64(vmlaq_n_f64(v1571, v1589, v1595.f64[0]), v1591, v1595, 1);
      v1598 = *(float64x2_t *)((char *)&v2762[-32] + 8);
      v1599 = vmlaq_n_f64(v1596, v1594, v1564.f64[0]);
      v1600 = vmlaq_n_f64(v1597, v1593, v1564.f64[0]);
      v1564.f64[0] = v2762[-23].f64[0];
      v1601 = vmlaq_laneq_f64(vmlaq_n_f64(v1576, v1590, v1598.f64[0]), v1592, v1598, 1);
      v1602 = vmlaq_laneq_f64(vmlaq_n_f64(v1577, v1589, v1598.f64[0]), v1591, v1598, 1);
      v1603 = v2762[-24];
      v1604 = vmlaq_n_f64(v1601, v1594, v1584.f64[0]);
      v1605 = vmlaq_n_f64(v1602, v1593, v1584.f64[0]);
      v1584.f64[0] = v2762[-16].f64[1];
      v1606 = vmlaq_laneq_f64(vmlaq_n_f64(v1582, v1590, v1603.f64[0]), v1592, v1603, 1);
      v1607 = vmlaq_laneq_f64(vmlaq_n_f64(v1583, v1589, v1603.f64[0]), v1591, v1603, 1);
      v1608 = *(float64x2_t *)((char *)&v2762[-17] + 8);
      v1382[2] = v1599;
      v1382[3] = v1600;
      *(float64x2_t *)((char *)v1382 + 168) = v1605;
      *(float64x2_t *)((char *)v1382 + 152) = v1604;
      *v1383 = vmlaq_n_f64(v1606, v1594, v1564.f64[0]);
      v1382[18] = vmlaq_n_f64(v1607, v1593, v1564.f64[0]);
      *(float64x2_t *)((char *)v1382 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1588, v1589, v1608.f64[0]), v1591, v1608, 1), v1593, v1584.f64[0]);
      *(float64x2_t *)((char *)v1382 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1587, v1590, v1608.f64[0]), v1592, v1608, 1), v1594, v1584.f64[0]);
      v1609 = *(float64x2_t *)(v38 + 112);
      v1610 = *(float64x2_t *)(v38 + 128);
      v1611 = *(float64x2_t *)(v33 + 1552);
      v1612 = *(float64x2_t *)(v33 + 1536);
      v1614 = *(float64x2_t *)(v38 + 352);
      v1613 = *(float64x2_t *)(v38 + 368);
      v1616 = *(float64x2_t *)(v38 + 472);
      v1615 = *(float64x2_t *)(v38 + 488);
      v1617 = v2762[-44];
      v1618 = *(float64x2_t *)((char *)&v2762[-37] + 8);
      v1619 = *(float64x2_t *)((char *)&v2762[-38] + 8);
      v1621 = v2762[-30];
      v1620 = v2762[-29];
      v1622 = *(float64x2_t *)((char *)&v2762[-22] + 8);
      v1623 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1609, v1401->f64[0]), v1612, *v1401, 1), v1614, v1617.f64[0]), v1616, v1617, 1);
      v1624 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1610, v1401->f64[0]), v1611, *v1401, 1), v1613, v1617.f64[0]), v1615, v1617, 1);
      v1625 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1609, v1619.f64[0]), v1612, v1619, 1), v1614, v1618.f64[0]), v1616, v1618, 1);
      v1626 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1610, v1619.f64[0]), v1611, v1619, 1), v1613, v1618.f64[0]), v1615, v1618, 1);
      v1627 = vmlaq_laneq_f64(vmulq_n_f64(v1609, v1621.f64[0]), v1612, v1621, 1);
      v1628 = vmlaq_laneq_f64(vmulq_n_f64(v1610, v1621.f64[0]), v1611, v1621, 1);
      v1629 = *(float64x2_t *)((char *)&v2762[-23] + 8);
      v1630 = vmlaq_laneq_f64(vmlaq_n_f64(v1627, v1614, v1620.f64[0]), v1616, v1620, 1);
      v1631 = vmlaq_laneq_f64(vmlaq_n_f64(v1628, v1613, v1620.f64[0]), v1615, v1620, 1);
      v1632 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1609, v1629.f64[0]), v1612, v1629, 1), v1614, v1622.f64[0]), v1616, v1622, 1);
      v1633 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1610, v1629.f64[0]), v1611, v1629, 1), v1613, v1622.f64[0]), v1615, v1622, 1);
      v1635 = *(float64x2_t *)(v38 + 592);
      v1634 = *(float64x2_t *)(v38 + 608);
      v1636 = *(float64x2_t *)(v33 + 2032);
      v1637 = *(float64x2_t *)(v33 + 2016);
      v1639 = *(float64x2_t *)(v38 + 832);
      v1638 = *(float64x2_t *)(v38 + 848);
      v1641 = *(float64x2_t *)(v38 + 952);
      v1640 = *(float64x2_t *)(v38 + 968);
      v1642 = v2762[-43];
      v1643 = vmlaq_laneq_f64(vmlaq_n_f64(v1623, v1635, v1642.f64[0]), v1637, v1642, 1);
      v1644 = vmlaq_laneq_f64(vmlaq_n_f64(v1624, v1634, v1642.f64[0]), v1636, v1642, 1);
      v1645 = v2762[-42];
      v1646 = vmlaq_laneq_f64(vmlaq_n_f64(v1643, v1639, v1645.f64[0]), v1641, v1645, 1);
      v1647 = vmlaq_laneq_f64(vmlaq_n_f64(v1644, v1638, v1645.f64[0]), v1640, v1645, 1);
      v1648 = *(float64x2_t *)((char *)&v2762[-36] + 8);
      v1649 = vmlaq_laneq_f64(vmlaq_n_f64(v1625, v1635, v1648.f64[0]), v1637, v1648, 1);
      v1650 = vmlaq_laneq_f64(vmlaq_n_f64(v1626, v1634, v1648.f64[0]), v1636, v1648, 1);
      v1651 = *(float64x2_t *)((char *)&v2762[-35] + 8);
      v1652 = vmlaq_laneq_f64(vmlaq_n_f64(v1649, v1639, v1651.f64[0]), v1641, v1651, 1);
      v1653 = vmlaq_laneq_f64(vmlaq_n_f64(v1650, v1638, v1651.f64[0]), v1640, v1651, 1);
      v1654 = v2762[-28];
      v1655 = vmlaq_laneq_f64(vmlaq_n_f64(v1630, v1635, v1654.f64[0]), v1637, v1654, 1);
      v1656 = vmlaq_laneq_f64(vmlaq_n_f64(v1631, v1634, v1654.f64[0]), v1636, v1654, 1);
      v1657 = v2762[-27];
      v1658 = vmlaq_laneq_f64(vmlaq_n_f64(v1655, v1639, v1657.f64[0]), v1641, v1657, 1);
      v1659 = vmlaq_laneq_f64(vmlaq_n_f64(v1656, v1638, v1657.f64[0]), v1640, v1657, 1);
      v1660 = *(float64x2_t *)((char *)&v2762[-21] + 8);
      v1661 = vmlaq_n_f64(v1632, v1635, v1660.f64[0]);
      v1662 = *(float64x2_t *)((char *)&v2762[-20] + 8);
      v1663 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v1661, v1637, v1660, 1), v1639, v1662.f64[0]), v1641, v1662, 1);
      v1664 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1633, v1634, v1660.f64[0]), v1636, v1660, 1), v1638, v1662.f64[0]), v1640, v1662, 1);
      v1665 = *(float64x2_t *)(v38 + 1088);
      v1666 = *(float64x2_t *)(v38 + 1072);
      v1667 = *(float64x2_t *)(v33 + 2512);
      v1668 = *(float64x2_t *)(v33 + 2496);
      v1669 = *(float64x2_t *)(v38 + 1328);
      v1670 = *(float64x2_t *)(v38 + 1312);
      v1672 = *(float64x2_t *)(v38 + 1432);
      v1671 = *(float64x2_t *)(v38 + 1448);
      v1673 = v2762[-41];
      v1674 = vmlaq_laneq_f64(vmlaq_n_f64(v1646, v1666, v1673.f64[0]), v1668, v1673, 1);
      v1675 = vmlaq_laneq_f64(vmlaq_n_f64(v1647, v1665, v1673.f64[0]), v1667, v1673, 1);
      v1676 = v2762[-40];
      v1677 = vmlaq_laneq_f64(vmlaq_n_f64(v1674, v1670, v1676.f64[0]), v1672, v1676, 1);
      v1678 = vmlaq_laneq_f64(vmlaq_n_f64(v1675, v1669, v1676.f64[0]), v1671, v1676, 1);
      v1679 = *(float64x2_t *)((char *)&v2762[-34] + 8);
      v1680 = vmlaq_laneq_f64(vmlaq_n_f64(v1652, v1666, v1679.f64[0]), v1668, v1679, 1);
      v1681 = vmlaq_laneq_f64(vmlaq_n_f64(v1653, v1665, v1679.f64[0]), v1667, v1679, 1);
      v1682 = *(float64x2_t *)((char *)&v2762[-33] + 8);
      v1683 = vmlaq_laneq_f64(vmlaq_n_f64(v1680, v1670, v1682.f64[0]), v1672, v1682, 1);
      v1684 = vmlaq_laneq_f64(vmlaq_n_f64(v1681, v1669, v1682.f64[0]), v1671, v1682, 1);
      v1685 = v2762[-26];
      v1686 = vmlaq_laneq_f64(vmlaq_n_f64(v1658, v1666, v1685.f64[0]), v1668, v1685, 1);
      v1687 = vmlaq_laneq_f64(vmlaq_n_f64(v1659, v1665, v1685.f64[0]), v1667, v1685, 1);
      v1688 = v2762[-25];
      v1689 = vmlaq_laneq_f64(vmlaq_n_f64(v1686, v1670, v1688.f64[0]), v1672, v1688, 1);
      v1690 = vmlaq_laneq_f64(vmlaq_n_f64(v1687, v1669, v1688.f64[0]), v1671, v1688, 1);
      v1691 = *(float64x2_t *)((char *)&v2762[-19] + 8);
      v1692 = vmlaq_laneq_f64(vmlaq_n_f64(v1663, v1666, v1691.f64[0]), v1668, v1691, 1);
      v1693 = *(float64x2_t *)((char *)&v2762[-18] + 8);
      v1694 = vmlaq_laneq_f64(vmlaq_n_f64(v1692, v1670, v1693.f64[0]), v1672, v1693, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1664, v1665, v1691.f64[0]), v1667, v1691, 1), v1669, v1693.f64[0]), v1671, v1693, 1);
      v1696 = *(float64x2_t *)(v38 + 1568);
      v1697 = *(float64x2_t *)(v38 + 1552);
      v1698 = *(float64x2_t *)(v33 + 2992);
      _Q31 = *(float64x2_t *)(v33 + 2976);
      v1700 = *(float64x2_t *)(v38 + 1808);
      v1701 = *(float64x2_t *)(v38 + 1792);
      v1702 = v2762[-39];
      v1703 = vmlaq_laneq_f64(vmlaq_n_f64(v1677, v1697, v1702.f64[0]), _Q31, v1702, 1);
      v1704 = vmlaq_laneq_f64(vmlaq_n_f64(v1678, v1696, v1702.f64[0]), v1698, v1702, 1);
      v1702.f64[0] = v2762[-38].f64[0];
      v1705 = vmlaq_n_f64(v1703, v1701, v1702.f64[0]);
      v1706 = vmlaq_n_f64(v1704, v1700, v1702.f64[0]);
      v1707 = *(float64x2_t *)((char *)&v2762[-32] + 8);
      v1708 = vmlaq_laneq_f64(vmlaq_n_f64(v1683, v1697, v1707.f64[0]), _Q31, v1707, 1);
      v1709 = vmlaq_laneq_f64(vmlaq_n_f64(v1684, v1696, v1707.f64[0]), v1698, v1707, 1);
      v1707.f64[0] = v2762[-31].f64[1];
      v1710 = vmlaq_n_f64(v1708, v1701, v1707.f64[0]);
      _Q22 = vmlaq_n_f64(v1709, v1700, v1707.f64[0]);
      v1712 = v2762[-24];
      v1713 = vmlaq_laneq_f64(vmlaq_n_f64(v1689, v1697, v1712.f64[0]), _Q31, v1712, 1);
      v1714 = vmlaq_laneq_f64(vmlaq_n_f64(v1690, v1696, v1712.f64[0]), v1698, v1712, 1);
      v1712.f64[0] = v2762[-23].f64[0];
      _Q23 = vmlaq_n_f64(v1713, v1701, v1712.f64[0]);
      v1716 = vmlaq_n_f64(v1714, v1700, v1712.f64[0]);
      v1717 = *(float64x2_t *)((char *)&v2762[-17] + 8);
      v1718 = vmlaq_laneq_f64(vmlaq_n_f64(v1694, v1697, v1717.f64[0]), _Q31, v1717, 1);
      v1697.f64[0] = v2762[-16].f64[1];
      v1382[4] = v1705;
      v1382[5] = v1706;
      *(float64x2_t *)((char *)v1382 + 200) = _Q22;
      *(float64x2_t *)((char *)v1382 + 184) = v1710;
      v1382[19] = _Q23;
      v1382[20] = v1716;
      *(float64x2_t *)((char *)v1382 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v1696, v1717.f64[0]), v1698, v1717, 1), v1700, v1697.f64[0]);
      *(float64x2_t *)((char *)v1382 + 424) = vmlaq_n_f64(v1718, v1701, v1697.f64[0]);
      _Q26 = *(float64x2_t *)(v38 + 144);
      _Q27.f64[0] = *(float64_t *)(v38 + 280);
      v1720 = *(float64x2_t *)(v38 + 264);
      _Q30 = *(float64x2_t *)(v38 + 384);
      _Q31.f64[0] = *(float64_t *)(v38 + 520);
      v1722 = *(float64x2_t *)(v38 + 504);
      _Q19 = *(float64x2_t *)((char *)&v2762[-37] + 8);
      _Q21 = *(float64x2_t *)((char *)&v2762[-38] + 8);
      v1725 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v1720, _Q24, 1), _Q30, _Q1.f64[0]), v1722, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v1726 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v1720, _Q21, 1), _Q30, _Q19.f64[0]), v1722, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
        FMLA            D21, D27, V20.D[1]
      }
      _Q24 = *(float64x2_t *)((char *)&v2762[-22] + 8);
      v1728 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v1720, _Q20, 1), _Q30, _Q4.f64[0]), v1722, _Q4, 1);
      __asm { FMLA            D21, D31, V4.D[1] }
      _Q9 = *(float64x2_t *)((char *)&v2762[-23] + 8);
      v1730 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q9.f64[0]), v1720, _Q9, 1), _Q30, _Q24.f64[0]), v1722, _Q24, 1);
      __asm
      {
        FMLA            D20, D27, V9.D[1]
        FMLA            D20, D31, V24.D[1]
      }
      v1731 = *(float64x2_t *)(v38 + 624);
      _Q26.f64[0] = *(float64_t *)(v38 + 760);
      v1732 = *(float64x2_t *)(v38 + 744);
      v1733 = *(float64x2_t *)(v38 + 864);
      _Q30.f64[0] = *(float64_t *)(v38 + 1000);
      v1734 = *(float64x2_t *)(v38 + 984);
      v1735 = vmlaq_laneq_f64(vmlaq_n_f64(v1725, v1731, _Q2.f64[0]), v1732, _Q2, 1);
      __asm { FMLA            D23, D26, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v2762[-35] + 8);
      v1737 = vmlaq_laneq_f64(vmlaq_n_f64(v1735, v1733, _Q5.f64[0]), v1734, _Q5, 1);
      __asm { FMLA            D23, D30, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v2762[-36] + 8);
      v1739 = vmlaq_laneq_f64(vmlaq_n_f64(v1726, v1731, _Q5.f64[0]), v1732, _Q5, 1);
      __asm { FMLA            D22, D26, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v2762[-20] + 8);
      v1741 = vmlaq_laneq_f64(vmlaq_n_f64(v1739, v1733, _Q2.f64[0]), v1734, _Q2, 1);
      __asm { FMLA            D22, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v2762[-21] + 8);
      v1743 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1728, v1731, _Q3.f64[0]), v1732, _Q3, 1), v1733, _Q18.f64[0]), v1734, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v1744 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1730, v1731, _Q2.f64[0]), v1732, _Q2, 1), v1733, _Q5.f64[0]), v1734, _Q5, 1);
      __asm
      {
        FMLA            D20, D26, V2.D[1]
        FMLA            D20, D30, V5.D[1]
      }
      v1745 = *(float64x2_t *)(v38 + 1104);
      _Q5.f64[0] = *(float64_t *)(v38 + 1240);
      v1746 = *(float64x2_t *)(v38 + 1224);
      v1747 = *(float64x2_t *)(v38 + 1344);
      _Q26.f64[0] = *(float64_t *)(v38 + 1480);
      v1748 = *(float64x2_t *)(v38 + 1464);
      _Q28 = *(float64x2_t *)((char *)&v2762[-33] + 8);
      _Q29 = *(float64x2_t *)((char *)&v2762[-34] + 8);
      _Q30 = *(float64x2_t *)((char *)&v2762[-18] + 8);
      _Q31 = *(float64x2_t *)((char *)&v2762[-19] + 8);
      v1753 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1737, v1745, _Q7.f64[0]), v1746, _Q7, 1), v1747, _Q17.f64[0]), v1748, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v1754 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1741, v1745, _Q29.f64[0]), v1746, _Q29, 1), v1747, _Q28.f64[0]), v1748, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v1755 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1743, v1745, _Q6.f64[0]), v1746, _Q6, 1), v1747, _Q16.f64[0]), v1748, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v1756 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1744, v1745, _Q31.f64[0]), v1746, _Q31, 1), v1747, _Q30.f64[0]), v1748, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v1757 = *(float64x2_t *)(v38 + 1584);
      _Q5.f64[0] = *(float64_t *)(v38 + 1720);
      v1758 = *(float64x2_t *)(v38 + 1704);
      _Q7.f64[0] = *(float64_t *)(v38 + 1840);
      v1759 = *(float64x2_t *)(v38 + 1824);
      _Q17.f64[0] = v2762[-38].f64[0];
      _Q18 = v2762[-39];
      _Q24.f64[0] = v2762[-31].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v2762[-32] + 8);
      _Q26.f64[0] = v2762[-23].f64[0];
      _Q27 = v2762[-24];
      _Q28.f64[0] = v2762[-16].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v2762[-17] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v1382[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v1382[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1753, v1757, _Q18.f64[0]), v1758, _Q18, 1), v1759, _Q17.f64[0]);
      v1382[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v1382 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1754, v1757, _Q25.f64[0]), v1758, _Q25, 1), v1759, _Q24.f64[0]);
      v1382[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v1382[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1755, v1757, _Q27.f64[0]), v1758, _Q27, 1), v1759, _Q26.f64[0]);
      v1382[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v1382 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1756, v1757, _Q29.f64[0]), v1758, _Q29, 1), v1759, _Q28.f64[0]);
      v1764 = *(float64x2_t *)(v38 + 48);
      v1765 = *(float64x2_t *)(v38 + 64);
      v1766 = *(float64x2_t *)(v33 + 1488);
      v1767 = *(float64x2_t *)(v33 + 1472);
      v1769 = *(float64x2_t *)(v38 + 288);
      v1768 = *(float64x2_t *)(v38 + 304);
      v1771 = *(float64x2_t *)(v38 + 408);
      v1770 = *(float64x2_t *)(v38 + 424);
      v1772 = *(float64x2_t *)((char *)&v2762[-4] + 8);
      v1773 = v2762[-14];
      v1774 = v2762[-15];
      v1775 = *(float64x2_t *)((char *)&v2762[-8] + 8);
      v1776 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1764, v1774.f64[0]), v1767, v1774, 1), v1769, v1773.f64[0]), v1771, v1773, 1);
      v1777 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1774.f64[0]), v1766, v1774, 1), v1768, v1773.f64[0]), v1770, v1773, 1);
      v1778 = vmlaq_laneq_f64(vmulq_n_f64(v1764, v1775.f64[0]), v1767, v1775, 1);
      _Q20 = v1775;
      v1779 = *(float64x2_t *)((char *)&v2762[-7] + 8);
      v1781 = vmlaq_laneq_f64(vmlaq_n_f64(v1778, v1769, v1779.f64[0]), v1771, v1779, 1);
      v1782 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1775.f64[0]), v1766, v1775, 1), v1768, v1779.f64[0]), v1770, v1779, 1);
      v1783 = *(float64x2_t *)(v38 + 528);
      v1784 = *(float64x2_t *)(v38 + 544);
      v1785 = *(float64x2_t *)(v33 + 1968);
      v1786 = *(float64x2_t *)(v33 + 1952);
      v1788 = *(float64x2_t *)(v38 + 768);
      v1787 = *(float64x2_t *)(v38 + 784);
      v1790 = *(float64x2_t *)(v38 + 888);
      v1789 = *(float64x2_t *)(v38 + 904);
      v1791 = v2762[-12];
      v1792 = v2762[-13];
      v1793 = *(float64x2_t *)((char *)&v2762[-6] + 8);
      v1794 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1776, v1783, v1792.f64[0]), v1786, v1792, 1), v1788, v1791.f64[0]), v1790, v1791, 1);
      v1795 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1777, v1784, v1792.f64[0]), v1785, v1792, 1), v1787, v1791.f64[0]), v1789, v1791, 1);
      v1796 = vmlaq_laneq_f64(vmlaq_n_f64(v1781, v1783, v1793.f64[0]), v1786, v1793, 1);
      _Q4 = v1793;
      v1798 = *(float64x2_t *)((char *)&v2762[-5] + 8);
      v1799 = vmlaq_laneq_f64(vmlaq_n_f64(v1796, v1788, v1798.f64[0]), v1790, v1798, 1);
      v1800 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1782, v1784, v1793.f64[0]), v1785, v1793, 1), v1787, v1798.f64[0]), v1789, v1798, 1);
      v1801 = *(float64x2_t *)(v38 + 1008);
      v1802 = *(float64x2_t *)(v38 + 1024);
      v1803 = *(float64x2_t *)(v33 + 2448);
      v1804 = *(float64x2_t *)(v33 + 2432);
      v1805 = *(float64x2_t *)(v38 + 1264);
      v1806 = *(float64x2_t *)(v38 + 1248);
      v1808 = *(float64x2_t *)(v38 + 1368);
      v1807 = *(float64x2_t *)(v38 + 1384);
      v1809 = v2762[-10];
      v1810 = v2762[-11];
      v1811 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1794, v1801, v1810.f64[0]), v1804, v1810, 1), v1806, v1809.f64[0]), v1808, v1809, 1);
      v1812 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1795, v1802, v1810.f64[0]), v1803, v1810, 1), v1805, v1809.f64[0]), v1807, v1809, 1);
      v1813 = vmlaq_laneq_f64(vmlaq_n_f64(v1799, v1801, v1772.f64[0]), v1804, v1772, 1);
      _Q5 = v1772;
      v1815 = *(float64x2_t *)((char *)&v2762[-3] + 8);
      v1816 = vmlaq_laneq_f64(vmlaq_n_f64(v1813, v1806, v1815.f64[0]), v1808, v1815, 1);
      v1817 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1800, v1802, v1772.f64[0]), v1803, v1772, 1), v1805, v1815.f64[0]), v1807, v1815, 1);
      v1818 = *(float64x2_t *)(v38 + 1504);
      v1819 = *(float64x2_t *)(v38 + 1488);
      v1820 = *(float64x2_t *)(v33 + 2928);
      v1821 = *(float64x2_t *)(v33 + 2912);
      v1822 = *(float64x2_t *)(v38 + 1744);
      v1823 = *(float64x2_t *)(v38 + 1728);
      v1772.f64[0] = v2762[-8].f64[0];
      v1824 = v2762[-9];
      v1809.f64[0] = v2762[-1].f64[1];
      v1825 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1811, v1819, v1824.f64[0]), v1821, v1824, 1), v1823, v1772.f64[0]);
      v1826 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1812, v1818, v1824.f64[0]), v1820, v1824, 1), v1822, v1772.f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v2762[-3] + 8);
      v1828 = *(float64x2_t *)((char *)&v2762[-2] + 8);
      v1382[30] = v1825;
      v1382[31] = v1826;
      *(float64x2_t *)((char *)v1382 + 600) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1816, v1819, v1828.f64[0]), v1821, v1828, 1), v1823, v1809.f64[0]);
      *(float64x2_t *)((char *)v1382 + 616) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1817, v1818, v1828.f64[0]), v1820, v1828, 1), v1822, v1809.f64[0]);
      v1830 = *(float64x2_t *)(v38 + 80);
      v1829 = *(float64x2_t *)(v38 + 96);
      v1831 = *(float64x2_t *)(v33 + 1520);
      v1832 = *(float64x2_t *)(v33 + 1504);
      v1834 = *(float64x2_t *)(v38 + 320);
      v1833 = *(float64x2_t *)(v38 + 336);
      v1836 = *(float64x2_t *)(v38 + 440);
      v1835 = *(float64x2_t *)(v38 + 456);
      v1837 = v2762[-14];
      v1838 = v2762[-15];
      v1840 = *(float64x2_t *)((char *)&v2762[-8] + 8);
      v1839 = *(float64x2_t *)((char *)&v2762[-7] + 8);
      v1841 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1830, v1838.f64[0]), v1832, v1838, 1), v1834, v1837.f64[0]), v1836, v1837, 1);
      v1842 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1829, v1838.f64[0]), v1831, v1838, 1), v1833, v1837.f64[0]), v1835, v1837, 1);
      v1843 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1830, v1840.f64[0]), v1832, v1840, 1), v1834, v1839.f64[0]), v1836, v1839, 1);
      v1844 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1829, v1840.f64[0]), v1831, v1840, 1), v1833, v1839.f64[0]), v1835, v1839, 1);
      v1846 = *(float64x2_t *)(v38 + 560);
      v1845 = *(float64x2_t *)(v38 + 576);
      v1847 = *(float64x2_t *)(v33 + 2000);
      v1848 = *(float64x2_t *)(v33 + 1984);
      v1850 = *(float64x2_t *)(v38 + 800);
      v1849 = *(float64x2_t *)(v38 + 816);
      v1852 = *(float64x2_t *)(v38 + 920);
      v1851 = *(float64x2_t *)(v38 + 936);
      v1853 = v2762[-12];
      v1854 = v2762[-13];
      v1856 = *(float64x2_t *)((char *)&v2762[-6] + 8);
      v1855 = *(float64x2_t *)((char *)&v2762[-5] + 8);
      v1857 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1841, v1846, v1854.f64[0]), v1848, v1854, 1), v1850, v1853.f64[0]), v1852, v1853, 1);
      v1858 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1842, v1845, v1854.f64[0]), v1847, v1854, 1), v1849, v1853.f64[0]), v1851, v1853, 1);
      v1859 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1843, v1846, v1856.f64[0]), v1848, v1856, 1), v1850, v1855.f64[0]), v1852, v1855, 1);
      v1860 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1844, v1845, v1856.f64[0]), v1847, v1856, 1), v1849, v1855.f64[0]), v1851, v1855, 1);
      v1861 = *(float64x2_t *)(v38 + 1056);
      v1862 = *(float64x2_t *)(v38 + 1040);
      v1863 = *(float64x2_t *)(v33 + 2480);
      v1864 = *(float64x2_t *)(v33 + 2464);
      v1865 = *(float64x2_t *)(v38 + 1296);
      v1866 = *(float64x2_t *)(v38 + 1280);
      v1868 = *(float64x2_t *)(v38 + 1400);
      v1867 = *(float64x2_t *)(v38 + 1416);
      v1869 = v2762[-10];
      v1870 = v2762[-11];
      v1872 = *(float64x2_t *)((char *)&v2762[-4] + 8);
      v1871 = *(float64x2_t *)((char *)&v2762[-3] + 8);
      v1873 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1857, v1862, v1870.f64[0]), v1864, v1870, 1), v1866, v1869.f64[0]), v1868, v1869, 1);
      v1874 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1858, v1861, v1870.f64[0]), v1863, v1870, 1), v1865, v1869.f64[0]), v1867, v1869, 1);
      v1875 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1859, v1862, v1872.f64[0]), v1864, v1872, 1), v1866, v1871.f64[0]), v1868, v1871, 1);
      v1876 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1860, v1861, v1872.f64[0]), v1863, v1872, 1), v1865, v1871.f64[0]), v1867, v1871, 1);
      v1877 = *(float64x2_t *)(v38 + 1536);
      v1878 = *(float64x2_t *)(v38 + 1520);
      v1879 = *(float64x2_t *)(v33 + 2960);
      v1880 = *(float64x2_t *)(v33 + 2944);
      v1881 = *(float64x2_t *)(v38 + 1776);
      v1882 = *(float64x2_t *)(v38 + 1760);
      v1867.f64[0] = v2762[-8].f64[0];
      v1883 = v2762[-9];
      v1869.f64[0] = v2762[-1].f64[1];
      v1884 = *(float64x2_t *)((char *)&v2762[-2] + 8);
      v1382[32] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1873, v1878, v1883.f64[0]), v1880, v1883, 1), v1882, v1867.f64[0]);
      v1382[33] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1874, v1877, v1883.f64[0]), v1879, v1883, 1), v1881, v1867.f64[0]);
      *(float64x2_t *)((char *)v1382 + 632) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1875, v1878, v1884.f64[0]), v1880, v1884, 1), v1882, v1869.f64[0]);
      *(float64x2_t *)((char *)v1382 + 648) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1876, v1877, v1884.f64[0]), v1879, v1884, 1), v1881, v1869.f64[0]);
      v1886 = *(float64x2_t *)(v38 + 112);
      v1885 = *(float64x2_t *)(v38 + 128);
      v1887 = *(float64x2_t *)(v33 + 1552);
      v1888 = *(float64x2_t *)(v33 + 1536);
      v1890 = *(float64x2_t *)(v38 + 352);
      v1889 = *(float64x2_t *)(v38 + 368);
      v1892 = *(float64x2_t *)(v38 + 472);
      v1891 = *(float64x2_t *)(v38 + 488);
      v1893 = v2762[-14];
      v1894 = v2762[-15];
      v1896 = *(float64x2_t *)((char *)&v2762[-8] + 8);
      v1895 = *(float64x2_t *)((char *)&v2762[-7] + 8);
      v1897 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1886, v1894.f64[0]), v1888, v1894, 1), v1890, v1893.f64[0]), v1892, v1893, 1);
      v1898 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1885, v1894.f64[0]), v1887, v1894, 1), v1889, v1893.f64[0]), v1891, v1893, 1);
      v1899 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1886, v1896.f64[0]), v1888, v1896, 1), v1890, v1895.f64[0]), v1892, v1895, 1);
      v1900 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1885, v1896.f64[0]), v1887, v1896, 1), v1889, v1895.f64[0]), v1891, v1895, 1);
      v1902 = *(float64x2_t *)(v38 + 592);
      v1901 = *(float64x2_t *)(v38 + 608);
      v1903 = *(float64x2_t *)(v33 + 2032);
      v1904 = *(float64x2_t *)(v33 + 2016);
      v1906 = *(float64x2_t *)(v38 + 832);
      v1905 = *(float64x2_t *)(v38 + 848);
      v1908 = *(float64x2_t *)(v38 + 952);
      v1907 = *(float64x2_t *)(v38 + 968);
      v1909 = v2762[-12];
      v1910 = v2762[-13];
      v1912 = *(float64x2_t *)((char *)&v2762[-6] + 8);
      v1911 = *(float64x2_t *)((char *)&v2762[-5] + 8);
      v1913 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1897, v1902, v1910.f64[0]), v1904, v1910, 1), v1906, v1909.f64[0]), v1908, v1909, 1);
      v1914 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1898, v1901, v1910.f64[0]), v1903, v1910, 1), v1905, v1909.f64[0]), v1907, v1909, 1);
      v1915 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1899, v1902, v1912.f64[0]), v1904, v1912, 1), v1906, v1911.f64[0]), v1908, v1911, 1);
      v1916 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1900, v1901, v1912.f64[0]), v1903, v1912, 1), v1905, v1911.f64[0]), v1907, v1911, 1);
      v1917 = *(float64x2_t *)(v38 + 1088);
      v1918 = *(float64x2_t *)(v38 + 1072);
      v1919 = *(float64x2_t *)(v33 + 2512);
      v1920 = *(float64x2_t *)(v33 + 2496);
      v1921 = *(float64x2_t *)(v38 + 1328);
      v1922 = *(float64x2_t *)(v38 + 1312);
      v1924 = *(float64x2_t *)(v38 + 1432);
      v1923 = *(float64x2_t *)(v38 + 1448);
      v1925 = v2762[-10];
      v1926 = v2762[-11];
      v1928 = *(float64x2_t *)((char *)&v2762[-4] + 8);
      v1927 = *(float64x2_t *)((char *)&v2762[-3] + 8);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1913, v1918, v1926.f64[0]), v1920, v1926, 1), v1922, v1925.f64[0]), v1924, v1925, 1);
      v1930 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1914, v1917, v1926.f64[0]), v1919, v1926, 1), v1921, v1925.f64[0]), v1923, v1925, 1);
      v1931 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1915, v1918, v1928.f64[0]), v1920, v1928, 1), v1922, v1927.f64[0]), v1924, v1927, 1);
      _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1916, v1917, v1928.f64[0]), v1919, v1928, 1), v1921, v1927.f64[0]), v1923, v1927, 1);
      _Q2 = *(float64x2_t *)(v38 + 1568);
      v1934 = *(float64x2_t *)(v38 + 1552);
      _Q7 = *(float64x2_t *)(v33 + 2992);
      v1936 = *(float64x2_t *)(v33 + 2976);
      _Q17 = *(float64x2_t *)(v38 + 1808);
      v1938 = *(float64x2_t *)(v38 + 1792);
      v1923.f64[0] = v2762[-8].f64[0];
      v1939 = v2762[-9];
      v1925.f64[0] = v2762[-1].f64[1];
      v1940 = *(float64x2_t *)((char *)&v2762[-2] + 8);
      v1382[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q24, v1934, v1939.f64[0]), v1936, v1939, 1), v1938, v1923.f64[0]);
      v1382[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1930, _Q2, v1939.f64[0]), _Q7, v1939, 1), _Q17, v1923.f64[0]);
      *(float64x2_t *)((char *)v1382 + 664) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1931, v1934, v1940.f64[0]), v1936, v1940, 1), v1938, v1925.f64[0]);
      *(float64x2_t *)((char *)v1382 + 680) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, _Q2, v1940.f64[0]), _Q7, v1940, 1), _Q17, v1925.f64[0]);
      v1941 = *(float64x2_t *)(v38 + 144);
      _Q2.f64[0] = *(float64_t *)(v38 + 280);
      v1942 = *(float64x2_t *)(v38 + 264);
      v1943 = *(float64x2_t *)(v38 + 384);
      _Q17.f64[0] = *(float64_t *)(v38 + 520);
      v1944 = *(float64x2_t *)(v38 + 504);
      _Q19 = v2762[-14];
      _Q21 = v2762[-15];
      _Q22 = *(float64x2_t *)((char *)&v2762[-7] + 8);
      v1948 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1941, _Q21.f64[0]), v1942, _Q21, 1), v1943, _Q19.f64[0]), v1944, _Q19, 1);
      __asm
      {
        FMLA            D24, D2, V21.D[1]
        FMLA            D24, D17, V19.D[1]
      }
      v1949 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1941, _Q20.f64[0]), v1942, _Q20, 1), v1943, _Q22.f64[0]), v1944, _Q22, 1);
      __asm
      {
        FMLA            D0, D2, V20.D[1]
        FMLA            D0, D17, V22.D[1]
      }
      _Q6 = *(float64x2_t *)(v38 + 624);
      _Q7.f64[0] = *(float64_t *)(v38 + 760);
      v1951 = *(float64x2_t *)(v38 + 744);
      _Q18 = *(float64x2_t *)(v38 + 864);
      _Q19.f64[0] = *(float64_t *)(v38 + 1000);
      v1953 = *(float64x2_t *)(v38 + 984);
      _Q21 = v2762[-12];
      _Q22 = v2762[-13];
      _Q25 = *(float64x2_t *)((char *)&v2762[-5] + 8);
      v1957 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1948, _Q6, _Q22.f64[0]), v1951, _Q22, 1), _Q18, _Q21.f64[0]), v1953, _Q21, 1);
      __asm
      {
        FMLA            D24, D7, V22.D[1]
        FMLA            D24, D19, V21.D[1]
      }
      v1958 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1949, _Q6, _Q4.f64[0]), v1951, _Q4, 1), _Q18, _Q25.f64[0]), v1953, _Q25, 1);
      __asm
      {
        FMLA            D0, D7, V4.D[1]
        FMLA            D0, D19, V25.D[1]
      }
      _Q4 = *(float64x2_t *)(v38 + 1104);
      _Q6.f64[0] = *(float64_t *)(v38 + 1240);
      v1960 = *(float64x2_t *)(v38 + 1224);
      v1961 = *(float64x2_t *)(v38 + 1344);
      _Q18.f64[0] = *(float64_t *)(v38 + 1480);
      v1962 = *(float64x2_t *)(v38 + 1464);
      _Q20 = v2762[-10];
      _Q21 = v2762[-11];
      v1965 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1957, _Q4, _Q21.f64[0]), v1960, _Q21, 1), v1961, _Q20.f64[0]), v1962, _Q20, 1);
      __asm
      {
        FMLA            D24, D6, V21.D[1]
        FMLA            D24, D18, V20.D[1]
      }
      v1966 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1958, _Q4, _Q5.f64[0]), v1960, _Q5, 1), v1961, _Q3.f64[0]), v1962, _Q3, 1);
      __asm
      {
        FMLA            D0, D6, V5.D[1]
        FMLA            D0, D18, V3.D[1]
      }
      v1967 = *(float64x2_t *)(v38 + 1584);
      _Q4.f64[0] = *(float64_t *)(v38 + 1720);
      v1968 = *(float64x2_t *)(v38 + 1704);
      _Q6.f64[0] = *(float64_t *)(v38 + 1840);
      v1969 = *(float64x2_t *)(v38 + 1824);
      v1951.f64[0] = v2762[-8].f64[0];
      _Q17 = v2762[-9];
      _Q18.f64[0] = v2762[-1].f64[1];
      _Q19 = *(float64x2_t *)((char *)&v2762[-2] + 8);
      __asm
      {
        FMLA            D24, D4, V17.D[1]
        FMLA            D0, D4, V19.D[1]
      }
      v1382[37].f64[0] = _Q24.f64[0] + _Q6.f64[0] * v1951.f64[0];
      v1382[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1965, v1967, _Q17.f64[0]), v1968, _Q17, 1), v1969, v1951.f64[0]);
      v1382[44].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v1382 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1966, v1967, _Q19.f64[0]), v1968, _Q19, 1), v1969, _Q18.f64[0]);
    }
  }
  else
  {
    v2810 = 0uLL;
    v2811 = 0;
    sub_20E9733B8(&v2818, v2810.f64);
    v144 = v2810;
    v145 = (float64x2_t *)v2809;
    *(_QWORD *)(v2809 + 64) = v2811;
    v145[3] = v144;
  }
  if (a17)
  {
    bzero(a17, 0x430uLL);
    a17[2].f64[1] = v2808.f64[0];
    v1973.f64[0] = v2807.f64[0];
    v1973.f64[1] = v2806.f64[0];
    *(float64x2_t *)((char *)a17 + 24) = v1973;
    a17[10].f64[0] = v2805.f64[0];
    *(_QWORD *)&v1973.f64[0] = v2804.i64[0];
    *(_QWORD *)&v1973.f64[1] = v2803.i64[0];
    a17[9] = v1973;
    a17[17].f64[1] = v2802.f64[0];
    *(_QWORD *)&v1973.f64[0] = v2801.i64[0];
    *(_QWORD *)&v1973.f64[1] = v2800.i64[0];
    *(float64x2_t *)((char *)a17 + 264) = v1973;
    a17[27].f64[0] = 1.0;
    a17[35].f64[0] = 1.0;
    a17[43].f64[0] = 1.0;
    a17[51].f64[0] = 1.0;
    a17[59].f64[0] = 1.0;
    a17[67].f64[0] = 1.0;
    MEMORY[0x24BDAC7A8]();
    v1974 = &v2762[-68];
    memcpy(&v2762[-68], a17, 0x438uLL);
    v1976 = *(float64x2_t *)(v38 + 48);
    v1975 = *(float64x2_t *)(v38 + 64);
    v1977 = *(float64x2_t *)(v33 + 1488);
    v1978 = *(float64x2_t *)(v33 + 1472);
    v1980 = *(float64x2_t *)(v38 + 288);
    v1979 = *(float64x2_t *)(v38 + 304);
    v1982 = *(float64x2_t *)(v38 + 408);
    v1981 = *(float64x2_t *)(v38 + 424);
    v1983 = v2762[-67];
    v1984 = *(float64x2_t *)((char *)&v2762[-60] + 8);
    v1985 = *(float64x2_t *)((char *)&v2762[-61] + 8);
    v1986 = v2762[-53];
    v1987 = *(float64x2_t *)((char *)&v2762[-45] + 8);
    v1988 = *(float64x2_t *)((char *)&v2762[-46] + 8);
    _Q24 = *v1974;
    v1990 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1976, v1974->f64[0]), v1978, *v1974, 1), v1980, v1983.f64[0]), v1982, v1983, 1);
    v1991 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1975, v1974->f64[0]), v1977, *v1974, 1), v1979, v1983.f64[0]), v1981, v1983, 1);
    v1992 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1976, v1985.f64[0]), v1978, v1985, 1), v1980, v1984.f64[0]), v1982, v1984, 1);
    v1993 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1975, v1985.f64[0]), v1977, v1985, 1), v1979, v1984.f64[0]), v1981, v1984, 1);
    _Q20 = v1986;
    v1995 = v2762[-52];
    v1996 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1976, v1986.f64[0]), v1978, v1986, 1), v1980, v1995.f64[0]), v1982, v1995, 1);
    v1997 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1975, v1986.f64[0]), v1977, v1986, 1), v1979, v1995.f64[0]), v1981, v1995, 1);
    v1998 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1976, v1988.f64[0]), v1978, v1988, 1), v1980, v1987.f64[0]), v1982, v1987, 1);
    v1999 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1975, v1988.f64[0]), v1977, v1988, 1), v1979, v1987.f64[0]), v1981, v1987, 1);
    v2001 = *(float64x2_t *)(v38 + 528);
    v2000 = *(float64x2_t *)(v38 + 544);
    v2002 = *(float64x2_t *)(v33 + 1968);
    v2003 = *(float64x2_t *)(v33 + 1952);
    v2005 = *(float64x2_t *)(v38 + 768);
    v2004 = *(float64x2_t *)(v38 + 784);
    v2007 = *(float64x2_t *)(v38 + 888);
    v2006 = *(float64x2_t *)(v38 + 904);
    v2008 = *(float64x2_t *)((char *)&v2762[-58] + 8);
    v2009 = *(float64x2_t *)((char *)&v2762[-59] + 8);
    v2010 = *(float64x2_t *)((char *)&v2762[-43] + 8);
    v2011 = *(float64x2_t *)((char *)&v2762[-44] + 8);
    _Q1 = v2762[-67];
    v2013 = v2762[-66];
    _Q2 = v2013;
    v2015 = v2762[-65];
    v2016 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1990, v2001, v2013.f64[0]), v2003, v2013, 1), v2005, v2015.f64[0]), v2007, v2015, 1);
    v2017 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1991, v2000, v2013.f64[0]), v2002, v2013, 1), v2004, v2015.f64[0]), v2006, v2015, 1);
    v2018 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1992, v2001, v2009.f64[0]), v2003, v2009, 1), v2005, v2008.f64[0]), v2007, v2008, 1);
    v2019 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1993, v2000, v2009.f64[0]), v2002, v2009, 1), v2004, v2008.f64[0]), v2006, v2008, 1);
    _Q4 = v2762[-52];
    v2021 = v2762[-51];
    _Q3 = v2021;
    v2023 = v2762[-50];
    v2024 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1996, v2001, v2021.f64[0]), v2003, v2021, 1), v2005, v2023.f64[0]), v2007, v2023, 1);
    v2025 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1997, v2000, v2021.f64[0]), v2002, v2021, 1), v2004, v2023.f64[0]), v2006, v2023, 1);
    v2026 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1998, v2001, v2011.f64[0]), v2003, v2011, 1), v2005, v2010.f64[0]), v2007, v2010, 1);
    v2027 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1999, v2000, v2011.f64[0]), v2002, v2011, 1), v2004, v2010.f64[0]), v2006, v2010, 1);
    v2029 = *(float64x2_t *)(v38 + 1008);
    v2028 = *(float64x2_t *)(v38 + 1024);
    v2030 = *(float64x2_t *)(v33 + 2448);
    v2031 = *(float64x2_t *)(v33 + 2432);
    v2032 = *(float64x2_t *)(v38 + 1264);
    v2033 = *(float64x2_t *)(v38 + 1248);
    v2034 = *(float64x2_t *)(v38 + 1368);
    v2035 = *(float64x2_t *)(v38 + 1384);
    v2036 = *(float64x2_t *)((char *)&v2762[-56] + 8);
    v2037 = *(float64x2_t *)((char *)&v2762[-57] + 8);
    v2038 = *(float64x2_t *)((char *)&v2762[-41] + 8);
    v2039 = *(float64x2_t *)((char *)&v2762[-42] + 8);
    _Q5 = v2762[-65];
    v2041 = v2762[-64];
    _Q7 = v2041;
    v2043 = v2762[-63];
    v2044 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2016, v2029, v2041.f64[0]), v2031, v2041, 1), v2033, v2043.f64[0]), v2034, v2043, 1);
    v2045 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2017, v2028, v2041.f64[0]), v2030, v2041, 1), v2032, v2043.f64[0]), v2035, v2043, 1);
    v2046 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2018, v2029, v2037.f64[0]), v2031, v2037, 1), v2033, v2036.f64[0]), v2034, v2036, 1);
    v2047 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2019, v2028, v2037.f64[0]), v2030, v2037, 1), v2032, v2036.f64[0]), v2035, v2036, 1);
    _Q18 = v2762[-50];
    v2048 = v2762[-49];
    _Q6 = v2048;
    v2051 = v2762[-48];
    v2052 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2024, v2029, v2048.f64[0]), v2031, v2048, 1), v2033, v2051.f64[0]), v2034, v2051, 1);
    v2053 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2025, v2028, v2048.f64[0]), v2030, v2048, 1), v2032, v2051.f64[0]), v2035, v2051, 1);
    v2054 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2026, v2029, v2039.f64[0]), v2031, v2039, 1), v2033, v2038.f64[0]), v2034, v2038, 1);
    v2055 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2027, v2028, v2039.f64[0]), v2030, v2039, 1), v2032, v2038.f64[0]), v2035, v2038, 1);
    v2056 = *(float64x2_t *)(v38 + 1504);
    v2057 = *(float64x2_t *)(v38 + 1488);
    v2058 = *(float64x2_t *)(v33 + 2928);
    v2059 = *(float64x2_t *)(v33 + 2912);
    v2060 = *(float64x2_t *)(v38 + 1744);
    v2061 = *(float64x2_t *)(v38 + 1728);
    v2028.f64[0] = v2762[-61].f64[0];
    v2034.f64[0] = v2762[-54].f64[1];
    v2062 = *(float64x2_t *)((char *)&v2762[-55] + 8);
    v2048.f64[0] = v2762[-46].f64[0];
    v2051.f64[0] = v2762[-39].f64[1];
    v2063 = *(float64x2_t *)((char *)&v2762[-40] + 8);
    _Q17 = v2762[-63];
    v2064 = v2762[-62];
    v2066 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2044, v2057, v2064.f64[0]), v2059, v2064, 1), v2061, v2028.f64[0]);
    v2067 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2045, v2056, v2064.f64[0]), v2058, v2064, 1), v2060, v2028.f64[0]);
    v2068 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2046, v2057, v2062.f64[0]), v2059, v2062, 1), v2061, v2034.f64[0]);
    v2069 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2047, v2056, v2062.f64[0]), v2058, v2062, 1), v2060, v2034.f64[0]);
    _Q16 = v2762[-48];
    v2070 = v2762[-47];
    *a17 = v2066;
    a17[1] = v2067;
    *(float64x2_t *)((char *)a17 + 136) = v2069;
    *(float64x2_t *)((char *)a17 + 120) = v2068;
    a17[15] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2052, v2057, v2070.f64[0]), v2059, v2070, 1), v2061, v2048.f64[0]);
    a17[16] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2053, v2056, v2070.f64[0]), v2058, v2070, 1), v2060, v2048.f64[0]);
    *(float64x2_t *)((char *)a17 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2054, v2057, v2063.f64[0]), v2059, v2063, 1), v2061, v2051.f64[0]);
    *(float64x2_t *)((char *)a17 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2055, v2056, v2063.f64[0]), v2058, v2063, 1), v2060, v2051.f64[0]);
    v2072 = *(float64x2_t *)(v38 + 80);
    v2073 = *(float64x2_t *)(v38 + 96);
    v2074 = *(float64x2_t *)(v33 + 1520);
    v2075 = *(float64x2_t *)(v33 + 1504);
    v2077 = *(float64x2_t *)(v38 + 320);
    v2076 = *(float64x2_t *)(v38 + 336);
    v2079 = *(float64x2_t *)(v38 + 440);
    v2078 = *(float64x2_t *)(v38 + 456);
    v2080 = v2762[-67];
    v2081 = *(float64x2_t *)((char *)&v2762[-60] + 8);
    v2082 = *(float64x2_t *)((char *)&v2762[-61] + 8);
    v2084 = v2762[-53];
    v2083 = v2762[-52];
    v2085 = *(float64x2_t *)((char *)&v2762[-45] + 8);
    v2086 = *(float64x2_t *)((char *)&v2762[-46] + 8);
    v2087 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2072, v1974->f64[0]), v2075, *v1974, 1), v2077, v2080.f64[0]), v2079, v2080, 1);
    v2088 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2073, v1974->f64[0]), v2074, *v1974, 1), v2076, v2080.f64[0]), v2078, v2080, 1);
    v2089 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2072, v2082.f64[0]), v2075, v2082, 1), v2077, v2081.f64[0]), v2079, v2081, 1);
    v2090 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2073, v2082.f64[0]), v2074, v2082, 1), v2076, v2081.f64[0]), v2078, v2081, 1);
    v2091 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2072, v2084.f64[0]), v2075, v2084, 1), v2077, v2083.f64[0]), v2079, v2083, 1);
    v2092 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2073, v2084.f64[0]), v2074, v2084, 1), v2076, v2083.f64[0]), v2078, v2083, 1);
    v2093 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2072, v2086.f64[0]), v2075, v2086, 1), v2077, v2085.f64[0]), v2079, v2085, 1);
    v2094 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2073, v2086.f64[0]), v2074, v2086, 1), v2076, v2085.f64[0]), v2078, v2085, 1);
    v2096 = *(float64x2_t *)(v38 + 560);
    v2095 = *(float64x2_t *)(v38 + 576);
    v2097 = *(float64x2_t *)(v33 + 2000);
    v2098 = *(float64x2_t *)(v33 + 1984);
    v2100 = *(float64x2_t *)(v38 + 800);
    v2099 = *(float64x2_t *)(v38 + 816);
    v2102 = *(float64x2_t *)(v38 + 920);
    v2101 = *(float64x2_t *)(v38 + 936);
    v2104 = v2762[-66];
    v2103 = v2762[-65];
    v2105 = *(float64x2_t *)((char *)&v2762[-58] + 8);
    v2106 = *(float64x2_t *)((char *)&v2762[-59] + 8);
    v2107 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2087, v2096, v2104.f64[0]), v2098, v2104, 1), v2100, v2103.f64[0]), v2102, v2103, 1);
    v2108 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2088, v2095, v2104.f64[0]), v2097, v2104, 1), v2099, v2103.f64[0]), v2101, v2103, 1);
    v2109 = v2762[-51];
    v2110 = v2762[-50];
    v2111 = vmlaq_laneq_f64(vmlaq_n_f64(v2089, v2096, v2106.f64[0]), v2098, v2106, 1);
    v2112 = vmlaq_laneq_f64(vmlaq_n_f64(v2090, v2095, v2106.f64[0]), v2097, v2106, 1);
    v2113 = *(float64x2_t *)((char *)&v2762[-43] + 8);
    v2114 = vmlaq_laneq_f64(vmlaq_n_f64(v2111, v2100, v2105.f64[0]), v2102, v2105, 1);
    v2115 = vmlaq_laneq_f64(vmlaq_n_f64(v2112, v2099, v2105.f64[0]), v2101, v2105, 1);
    v2116 = *(float64x2_t *)((char *)&v2762[-44] + 8);
    v2117 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2091, v2096, v2109.f64[0]), v2098, v2109, 1), v2100, v2110.f64[0]), v2102, v2110, 1);
    v2118 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2092, v2095, v2109.f64[0]), v2097, v2109, 1), v2099, v2110.f64[0]), v2101, v2110, 1);
    v2119 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2093, v2096, v2116.f64[0]), v2098, v2116, 1), v2100, v2113.f64[0]), v2102, v2113, 1);
    v2120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2094, v2095, v2116.f64[0]), v2097, v2116, 1), v2099, v2113.f64[0]), v2101, v2113, 1);
    v2121 = *(float64x2_t *)(v38 + 1056);
    v2122 = *(float64x2_t *)(v38 + 1040);
    v2123 = *(float64x2_t *)(v33 + 2480);
    v2124 = *(float64x2_t *)(v33 + 2464);
    v2125 = *(float64x2_t *)(v38 + 1296);
    v2126 = *(float64x2_t *)(v38 + 1280);
    v2128 = *(float64x2_t *)(v38 + 1400);
    v2127 = *(float64x2_t *)(v38 + 1416);
    v2130 = v2762[-64];
    v2129 = v2762[-63];
    v2131 = *(float64x2_t *)((char *)&v2762[-56] + 8);
    v2132 = *(float64x2_t *)((char *)&v2762[-57] + 8);
    v2133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2107, v2122, v2130.f64[0]), v2124, v2130, 1), v2126, v2129.f64[0]), v2128, v2129, 1);
    v2134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2108, v2121, v2130.f64[0]), v2123, v2130, 1), v2125, v2129.f64[0]), v2127, v2129, 1);
    v2135 = v2762[-49];
    v2136 = v2762[-48];
    v2137 = vmlaq_laneq_f64(vmlaq_n_f64(v2114, v2122, v2132.f64[0]), v2124, v2132, 1);
    v2138 = vmlaq_laneq_f64(vmlaq_n_f64(v2115, v2121, v2132.f64[0]), v2123, v2132, 1);
    v2139 = *(float64x2_t *)((char *)&v2762[-41] + 8);
    v2140 = vmlaq_laneq_f64(vmlaq_n_f64(v2137, v2126, v2131.f64[0]), v2128, v2131, 1);
    v2141 = vmlaq_laneq_f64(vmlaq_n_f64(v2138, v2125, v2131.f64[0]), v2127, v2131, 1);
    v2142 = *(float64x2_t *)((char *)&v2762[-42] + 8);
    v2143 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2117, v2122, v2135.f64[0]), v2124, v2135, 1), v2126, v2136.f64[0]), v2128, v2136, 1);
    v2144 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2118, v2121, v2135.f64[0]), v2123, v2135, 1), v2125, v2136.f64[0]), v2127, v2136, 1);
    v2145 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2119, v2122, v2142.f64[0]), v2124, v2142, 1), v2126, v2139.f64[0]), v2128, v2139, 1);
    v2146 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2120, v2121, v2142.f64[0]), v2123, v2142, 1), v2125, v2139.f64[0]), v2127, v2139, 1);
    v2147 = *(float64x2_t *)(v38 + 1536);
    v2148 = *(float64x2_t *)(v38 + 1520);
    v2149 = *(float64x2_t *)(v33 + 2960);
    v2150 = *(float64x2_t *)(v33 + 2944);
    v2151 = *(float64x2_t *)(v38 + 1776);
    v2152 = *(float64x2_t *)(v38 + 1760);
    v2127.f64[0] = v2762[-61].f64[0];
    v2153 = v2762[-62];
    v2135.f64[0] = v2762[-54].f64[1];
    v2154 = *(float64x2_t *)((char *)&v2762[-55] + 8);
    v2142.f64[0] = v2762[-46].f64[0];
    v2155 = v2762[-47];
    v2156 = vmlaq_laneq_f64(vmlaq_n_f64(v2133, v2148, v2153.f64[0]), v2150, v2153, 1);
    v2157 = vmlaq_laneq_f64(vmlaq_n_f64(v2134, v2147, v2153.f64[0]), v2149, v2153, 1);
    v2153.f64[0] = v2762[-39].f64[1];
    v2158 = vmlaq_n_f64(v2156, v2152, v2127.f64[0]);
    v2159 = vmlaq_n_f64(v2157, v2151, v2127.f64[0]);
    v2160 = *(float64x2_t *)((char *)&v2762[-40] + 8);
    a17[2] = v2158;
    a17[3] = v2159;
    *(float64x2_t *)((char *)a17 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2141, v2147, v2154.f64[0]), v2149, v2154, 1), v2151, v2135.f64[0]);
    *(float64x2_t *)((char *)a17 + 152) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2140, v2148, v2154.f64[0]), v2150, v2154, 1), v2152, v2135.f64[0]);
    a17[18] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2144, v2147, v2155.f64[0]), v2149, v2155, 1), v2151, v2142.f64[0]);
    a17[17] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2143, v2148, v2155.f64[0]), v2150, v2155, 1), v2152, v2142.f64[0]);
    *(float64x2_t *)((char *)a17 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2145, v2148, v2160.f64[0]), v2150, v2160, 1), v2152, v2153.f64[0]);
    *(float64x2_t *)((char *)a17 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2146, v2147, v2160.f64[0]), v2149, v2160, 1), v2151, v2153.f64[0]);
    v2161 = *(float64x2_t *)(v38 + 112);
    v2162 = *(float64x2_t *)(v38 + 128);
    v2163 = *(float64x2_t *)(v33 + 1552);
    v2164 = *(float64x2_t *)(v33 + 1536);
    v2166 = *(float64x2_t *)(v38 + 352);
    v2165 = *(float64x2_t *)(v38 + 368);
    v2168 = *(float64x2_t *)(v38 + 472);
    v2167 = *(float64x2_t *)(v38 + 488);
    v2169 = v2762[-67];
    v2170 = *(float64x2_t *)((char *)&v2762[-60] + 8);
    v2171 = *(float64x2_t *)((char *)&v2762[-61] + 8);
    v2173 = v2762[-53];
    v2172 = v2762[-52];
    v2174 = *(float64x2_t *)((char *)&v2762[-45] + 8);
    v2175 = *(float64x2_t *)((char *)&v2762[-46] + 8);
    v2176 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2161, v1974->f64[0]), v2164, *v1974, 1), v2166, v2169.f64[0]), v2168, v2169, 1);
    v2177 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2162, v1974->f64[0]), v2163, *v1974, 1), v2165, v2169.f64[0]), v2167, v2169, 1);
    v2178 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2161, v2171.f64[0]), v2164, v2171, 1), v2166, v2170.f64[0]), v2168, v2170, 1);
    v2179 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2162, v2171.f64[0]), v2163, v2171, 1), v2165, v2170.f64[0]), v2167, v2170, 1);
    v2180 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2161, v2173.f64[0]), v2164, v2173, 1), v2166, v2172.f64[0]), v2168, v2172, 1);
    v2181 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2162, v2173.f64[0]), v2163, v2173, 1), v2165, v2172.f64[0]), v2167, v2172, 1);
    v2182 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2161, v2175.f64[0]), v2164, v2175, 1), v2166, v2174.f64[0]), v2168, v2174, 1);
    v2183 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2162, v2175.f64[0]), v2163, v2175, 1), v2165, v2174.f64[0]), v2167, v2174, 1);
    v2185 = *(float64x2_t *)(v38 + 592);
    v2184 = *(float64x2_t *)(v38 + 608);
    v2186 = *(float64x2_t *)(v33 + 2032);
    v2187 = *(float64x2_t *)(v33 + 2016);
    v2189 = *(float64x2_t *)(v38 + 832);
    v2188 = *(float64x2_t *)(v38 + 848);
    v2191 = *(float64x2_t *)(v38 + 952);
    v2190 = *(float64x2_t *)(v38 + 968);
    v2193 = v2762[-66];
    v2192 = v2762[-65];
    v2194 = *(float64x2_t *)((char *)&v2762[-58] + 8);
    v2195 = *(float64x2_t *)((char *)&v2762[-59] + 8);
    v2196 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2176, v2185, v2193.f64[0]), v2187, v2193, 1), v2189, v2192.f64[0]), v2191, v2192, 1);
    v2197 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2177, v2184, v2193.f64[0]), v2186, v2193, 1), v2188, v2192.f64[0]), v2190, v2192, 1);
    v2198 = v2762[-51];
    v2199 = v2762[-50];
    v2200 = vmlaq_laneq_f64(vmlaq_n_f64(v2178, v2185, v2195.f64[0]), v2187, v2195, 1);
    v2201 = vmlaq_laneq_f64(vmlaq_n_f64(v2179, v2184, v2195.f64[0]), v2186, v2195, 1);
    v2202 = *(float64x2_t *)((char *)&v2762[-43] + 8);
    v2203 = vmlaq_laneq_f64(vmlaq_n_f64(v2200, v2189, v2194.f64[0]), v2191, v2194, 1);
    v2204 = vmlaq_laneq_f64(vmlaq_n_f64(v2201, v2188, v2194.f64[0]), v2190, v2194, 1);
    v2205 = *(float64x2_t *)((char *)&v2762[-44] + 8);
    v2206 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2180, v2185, v2198.f64[0]), v2187, v2198, 1), v2189, v2199.f64[0]), v2191, v2199, 1);
    v2207 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2181, v2184, v2198.f64[0]), v2186, v2198, 1), v2188, v2199.f64[0]), v2190, v2199, 1);
    v2208 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2182, v2185, v2205.f64[0]), v2187, v2205, 1), v2189, v2202.f64[0]), v2191, v2202, 1);
    v2209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2183, v2184, v2205.f64[0]), v2186, v2205, 1), v2188, v2202.f64[0]), v2190, v2202, 1);
    v2210 = *(float64x2_t *)(v38 + 1088);
    v2211 = *(float64x2_t *)(v38 + 1072);
    v2212 = *(float64x2_t *)(v33 + 2512);
    v2213 = *(float64x2_t *)(v33 + 2496);
    v2214 = *(float64x2_t *)(v38 + 1328);
    v2215 = *(float64x2_t *)(v38 + 1312);
    v2217 = *(float64x2_t *)(v38 + 1432);
    v2216 = *(float64x2_t *)(v38 + 1448);
    v2219 = v2762[-64];
    v2218 = v2762[-63];
    v2220 = *(float64x2_t *)((char *)&v2762[-56] + 8);
    v2221 = *(float64x2_t *)((char *)&v2762[-57] + 8);
    v2222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2196, v2211, v2219.f64[0]), v2213, v2219, 1), v2215, v2218.f64[0]), v2217, v2218, 1);
    v2223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2197, v2210, v2219.f64[0]), v2212, v2219, 1), v2214, v2218.f64[0]), v2216, v2218, 1);
    v2224 = v2762[-49];
    v2225 = v2762[-48];
    v2226 = vmlaq_laneq_f64(vmlaq_n_f64(v2203, v2211, v2221.f64[0]), v2213, v2221, 1);
    v2227 = vmlaq_laneq_f64(vmlaq_n_f64(v2204, v2210, v2221.f64[0]), v2212, v2221, 1);
    v2228 = *(float64x2_t *)((char *)&v2762[-41] + 8);
    v2229 = vmlaq_laneq_f64(vmlaq_n_f64(v2226, v2215, v2220.f64[0]), v2217, v2220, 1);
    _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v2227, v2214, v2220.f64[0]), v2216, v2220, 1);
    v2231 = *(float64x2_t *)((char *)&v2762[-42] + 8);
    _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2206, v2211, v2224.f64[0]), v2213, v2224, 1), v2215, v2225.f64[0]), v2217, v2225, 1);
    v2233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2207, v2210, v2224.f64[0]), v2212, v2224, 1), v2214, v2225.f64[0]), v2216, v2225, 1);
    v2234 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2208, v2211, v2231.f64[0]), v2213, v2231, 1), v2215, v2228.f64[0]), v2217, v2228, 1);
    _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2209, v2210, v2231.f64[0]), v2212, v2231, 1), v2214, v2228.f64[0]), v2216, v2228, 1);
    v2236 = *(float64x2_t *)(v38 + 1568);
    v2237 = *(float64x2_t *)(v38 + 1552);
    v2238 = *(float64x2_t *)(v33 + 2992);
    _Q31 = *(float64x2_t *)(v33 + 2976);
    v2240 = *(float64x2_t *)(v38 + 1808);
    v2241 = *(float64x2_t *)(v38 + 1792);
    v2216.f64[0] = v2762[-61].f64[0];
    v2242 = v2762[-62];
    v2224.f64[0] = v2762[-54].f64[1];
    v2243 = *(float64x2_t *)((char *)&v2762[-55] + 8);
    v2231.f64[0] = v2762[-46].f64[0];
    v2244 = v2762[-47];
    v2245 = vmlaq_laneq_f64(vmlaq_n_f64(v2222, v2237, v2242.f64[0]), _Q31, v2242, 1);
    v2246 = vmlaq_laneq_f64(vmlaq_n_f64(v2223, v2236, v2242.f64[0]), v2238, v2242, 1);
    v2242.f64[0] = v2762[-39].f64[1];
    v2247 = vmlaq_n_f64(v2245, v2241, v2216.f64[0]);
    v2248 = vmlaq_n_f64(v2246, v2240, v2216.f64[0]);
    v2249 = *(float64x2_t *)((char *)&v2762[-40] + 8);
    a17[4] = v2247;
    a17[5] = v2248;
    *(float64x2_t *)((char *)a17 + 200) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q22, v2236, v2243.f64[0]), v2238, v2243, 1), v2240, v2224.f64[0]);
    *(float64x2_t *)((char *)a17 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2229, v2237, v2243.f64[0]), _Q31, v2243, 1), v2241, v2224.f64[0]);
    a17[20] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2233, v2236, v2244.f64[0]), v2238, v2244, 1), v2240, v2231.f64[0]);
    a17[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v2237, v2244.f64[0]), _Q31, v2244, 1), v2241, v2231.f64[0]);
    *(float64x2_t *)((char *)a17 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2234, v2237, v2249.f64[0]), _Q31, v2249, 1), v2241, v2242.f64[0]);
    *(float64x2_t *)((char *)a17 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v2236, v2249.f64[0]), v2238, v2249, 1), v2240, v2242.f64[0]);
    _Q26 = *(float64x2_t *)(v38 + 144);
    _Q27.f64[0] = *(float64_t *)(v38 + 280);
    v2251 = *(float64x2_t *)(v38 + 264);
    _Q30 = *(float64x2_t *)(v38 + 384);
    _Q31.f64[0] = *(float64_t *)(v38 + 520);
    v2253 = *(float64x2_t *)(v38 + 504);
    _Q19 = *(float64x2_t *)((char *)&v2762[-60] + 8);
    _Q21 = *(float64x2_t *)((char *)&v2762[-61] + 8);
    _Q9 = *(float64x2_t *)((char *)&v2762[-45] + 8);
    _Q10 = *(float64x2_t *)((char *)&v2762[-46] + 8);
    v2258 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v2251, _Q24, 1), _Q30, _Q1.f64[0]), v2253, _Q1, 1);
    __asm
    {
      FMLA            D23, D27, V24.D[1]
      FMLA            D23, D31, V1.D[1]
    }
    v2259 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v2251, _Q21, 1), _Q30, _Q19.f64[0]), v2253, _Q19, 1);
    __asm
    {
      FMLA            D22, D27, V21.D[1]
      FMLA            D22, D31, V19.D[1]
    }
    v2260 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v2251, _Q20, 1), _Q30, _Q4.f64[0]), v2253, _Q4, 1);
    __asm
    {
      FMLA            D21, D27, V20.D[1]
      FMLA            D21, D31, V4.D[1]
    }
    v2261 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q10.f64[0]), v2251, _Q10, 1), _Q30, _Q9.f64[0]), v2253, _Q9, 1);
    __asm
    {
      FMLA            D20, D27, V10.D[1]
      FMLA            D20, D31, V9.D[1]
    }
    v2262 = *(float64x2_t *)(v38 + 624);
    _Q26.f64[0] = *(float64_t *)(v38 + 760);
    v2263 = *(float64x2_t *)(v38 + 744);
    v2264 = *(float64x2_t *)(v38 + 864);
    _Q30.f64[0] = *(float64_t *)(v38 + 1000);
    v2265 = *(float64x2_t *)(v38 + 984);
    _Q8 = *(float64x2_t *)((char *)&v2762[-58] + 8);
    _Q9 = *(float64x2_t *)((char *)&v2762[-59] + 8);
    _Q10 = *(float64x2_t *)((char *)&v2762[-43] + 8);
    _Q11 = *(float64x2_t *)((char *)&v2762[-44] + 8);
    v2270 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2258, v2262, _Q2.f64[0]), v2263, _Q2, 1), v2264, _Q5.f64[0]), v2265, _Q5, 1);
    __asm
    {
      FMLA            D23, D26, V2.D[1]
      FMLA            D23, D30, V5.D[1]
    }
    v2271 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2259, v2262, _Q9.f64[0]), v2263, _Q9, 1), v2264, _Q8.f64[0]), v2265, _Q8, 1);
    __asm
    {
      FMLA            D22, D26, V9.D[1]
      FMLA            D22, D30, V8.D[1]
    }
    v2272 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2260, v2262, _Q3.f64[0]), v2263, _Q3, 1), v2264, _Q18.f64[0]), v2265, _Q18, 1);
    __asm
    {
      FMLA            D21, D26, V3.D[1]
      FMLA            D21, D30, V18.D[1]
    }
    v2273 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2261, v2262, _Q11.f64[0]), v2263, _Q11, 1), v2264, _Q10.f64[0]), v2265, _Q10, 1);
    __asm
    {
      FMLA            D20, D26, V11.D[1]
      FMLA            D20, D30, V10.D[1]
    }
    v2274 = *(float64x2_t *)(v38 + 1104);
    _Q5.f64[0] = *(float64_t *)(v38 + 1240);
    v2275 = *(float64x2_t *)(v38 + 1224);
    v2276 = *(float64x2_t *)(v38 + 1344);
    _Q26.f64[0] = *(float64_t *)(v38 + 1480);
    v2277 = *(float64x2_t *)(v38 + 1464);
    _Q28 = *(float64x2_t *)((char *)&v2762[-56] + 8);
    _Q29 = *(float64x2_t *)((char *)&v2762[-57] + 8);
    _Q30 = *(float64x2_t *)((char *)&v2762[-41] + 8);
    _Q31 = *(float64x2_t *)((char *)&v2762[-42] + 8);
    v2282 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2270, v2274, _Q7.f64[0]), v2275, _Q7, 1), v2276, _Q17.f64[0]), v2277, _Q17, 1);
    __asm
    {
      FMLA            D23, D5, V7.D[1]
      FMLA            D23, D26, V17.D[1]
    }
    v2283 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2271, v2274, _Q29.f64[0]), v2275, _Q29, 1), v2276, _Q28.f64[0]), v2277, _Q28, 1);
    __asm
    {
      FMLA            D22, D5, V29.D[1]
      FMLA            D22, D26, V28.D[1]
    }
    v2284 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2272, v2274, _Q6.f64[0]), v2275, _Q6, 1), v2276, _Q16.f64[0]), v2277, _Q16, 1);
    __asm
    {
      FMLA            D21, D5, V6.D[1]
      FMLA            D21, D26, V16.D[1]
    }
    v2285 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2273, v2274, _Q31.f64[0]), v2275, _Q31, 1), v2276, _Q30.f64[0]), v2277, _Q30, 1);
    __asm
    {
      FMLA            D20, D5, V31.D[1]
      FMLA            D20, D26, V30.D[1]
    }
    v2286 = *(float64x2_t *)(v38 + 1584);
    _Q5.f64[0] = *(float64_t *)(v38 + 1720);
    v2287 = *(float64x2_t *)(v38 + 1704);
    _Q7.f64[0] = *(float64_t *)(v38 + 1840);
    v2288 = *(float64x2_t *)(v38 + 1824);
    _Q17.f64[0] = v2762[-61].f64[0];
    _Q18 = v2762[-62];
    _Q24.f64[0] = v2762[-54].f64[1];
    _Q25 = *(float64x2_t *)((char *)&v2762[-55] + 8);
    _Q26.f64[0] = v2762[-46].f64[0];
    _Q27 = v2762[-47];
    _Q28.f64[0] = v2762[-39].f64[1];
    _Q29 = *(float64x2_t *)((char *)&v2762[-40] + 8);
    __asm
    {
      FMLA            D23, D5, V18.D[1]
      FMLA            D22, D5, V25.D[1]
      FMLA            D21, D5, V27.D[1]
      FMLA            D20, D5, V29.D[1]
    }
    a17[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
    a17[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2282, v2286, _Q18.f64[0]), v2287, _Q18, 1), v2288, _Q17.f64[0]);
    a17[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
    *(float64x2_t *)((char *)a17 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2283, v2286, _Q25.f64[0]), v2287, _Q25, 1), v2288, _Q24.f64[0]);
    a17[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
    a17[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2284, v2286, _Q27.f64[0]), v2287, _Q27, 1), v2288, _Q26.f64[0]);
    a17[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
    *(float64x2_t *)((char *)a17 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2285, v2286, _Q29.f64[0]), v2287, _Q29, 1), v2288, _Q28.f64[0]);
    v2294 = *(float64x2_t *)(v38 + 48);
    v2293 = *(float64x2_t *)(v38 + 64);
    v2295 = *(float64x2_t *)(v33 + 1488);
    v2296 = *(float64x2_t *)(v33 + 1472);
    v2298 = *(float64x2_t *)(v38 + 288);
    v2297 = *(float64x2_t *)(v38 + 304);
    v2300 = *(float64x2_t *)(v38 + 408);
    v2299 = *(float64x2_t *)(v38 + 424);
    v2301 = v2762[-38];
    v2302 = v2762[-37];
    v2303 = *(float64x2_t *)((char *)&v2762[-16] + 8);
    _Q22 = v2301;
    v2305 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2294, v2301.f64[0]), v2296, v2301, 1), v2298, v2302.f64[0]), v2300, v2302, 1);
    v2306 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2293, v2301.f64[0]), v2295, v2301, 1), v2297, v2302.f64[0]), v2299, v2302, 1);
    _Q20 = *(float64x2_t *)((char *)&v2762[-31] + 8);
    v2308 = *(float64x2_t *)((char *)&v2762[-30] + 8);
    v2309 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2294, v2762[-31].f64[1]), v2296, _Q20, 1), v2298, v2308.f64[0]), v2300, v2308, 1);
    v2310 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2293, v2762[-31].f64[1]), v2295, _Q20, 1), v2297, v2308.f64[0]), v2299, v2308, 1);
    v2311 = v2762[-22];
    v2808 = v2762[-23];
    v2312 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2294, v2808.f64[0]), v2296, v2808, 1), v2298, v2311.f64[0]), v2300, v2311, 1);
    v2313 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2293, v2808.f64[0]), v2295, v2808, 1), v2297, v2311.f64[0]), v2299, v2311, 1);
    v2314 = vmlaq_laneq_f64(vmulq_n_f64(v2294, v2303.f64[0]), v2296, v2303, 1);
    v2315 = *(float64x2_t *)((char *)&v2762[-15] + 8);
    v2807 = *(float64x2_t *)((char *)&v2762[-16] + 8);
    v2316 = vmlaq_laneq_f64(vmlaq_n_f64(v2314, v2298, v2315.f64[0]), v2300, v2315, 1);
    v2317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2293, v2303.f64[0]), v2295, v2303, 1), v2297, v2315.f64[0]), v2299, v2315, 1);
    v2318 = *(float64x2_t *)(v38 + 528);
    v2319 = *(float64x2_t *)(v38 + 544);
    v2320 = *(float64x2_t *)(v33 + 1968);
    v2321 = *(float64x2_t *)(v33 + 1952);
    v2323 = *(float64x2_t *)(v38 + 768);
    v2322 = *(float64x2_t *)(v38 + 784);
    v2325 = *(float64x2_t *)(v38 + 888);
    v2324 = *(float64x2_t *)(v38 + 904);
    v2326 = *(float64x2_t *)((char *)&v2762[-29] + 8);
    v2327 = *(float64x2_t *)((char *)&v2762[-14] + 8);
    _Q19 = v2762[-37];
    v2329 = v2762[-35];
    v2806 = v2762[-36];
    v2330 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2305, v2318, v2806.f64[0]), v2321, v2806, 1), v2323, v2329.f64[0]), v2325, v2329, 1);
    v2331 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2306, v2319, v2806.f64[0]), v2320, v2806, 1), v2322, v2329.f64[0]), v2324, v2329, 1);
    v2332 = *(float64x2_t *)((char *)&v2762[-28] + 8);
    v2805 = *(float64x2_t *)((char *)&v2762[-29] + 8);
    v2333 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2309, v2318, v2326.f64[0]), v2321, v2326, 1), v2323, v2332.f64[0]), v2325, v2332, 1);
    v2334 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2310, v2319, v2326.f64[0]), v2320, v2326, 1), v2322, v2332.f64[0]), v2324, v2332, 1);
    _Q7 = v2762[-22];
    v2336 = v2762[-21];
    _Q6 = v2336;
    v2338 = v2762[-20];
    v2339 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2312, v2318, v2336.f64[0]), v2321, v2336, 1), v2323, v2338.f64[0]), v2325, v2338, 1);
    v2340 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2313, v2319, v2336.f64[0]), v2320, v2336, 1), v2322, v2338.f64[0]), v2324, v2338, 1);
    v2341 = vmlaq_laneq_f64(vmlaq_n_f64(v2316, v2318, v2327.f64[0]), v2321, v2327, 1);
    _Q5 = *(float64x2_t *)((char *)&v2762[-14] + 8);
    v2343 = *(float64x2_t *)((char *)&v2762[-13] + 8);
    v2344 = vmlaq_laneq_f64(vmlaq_n_f64(v2341, v2323, v2343.f64[0]), v2325, v2343, 1);
    v2345 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2317, v2319, v2327.f64[0]), v2320, v2327, 1), v2322, v2343.f64[0]), v2324, v2343, 1);
    v2346 = *(float64x2_t *)(v38 + 1008);
    v2347 = *(float64x2_t *)(v38 + 1024);
    v2348 = *(float64x2_t *)(v33 + 2448);
    v2349 = *(float64x2_t *)(v33 + 2432);
    v2350 = *(float64x2_t *)(v38 + 1264);
    v2351 = *(float64x2_t *)(v38 + 1248);
    v2353 = *(float64x2_t *)(v38 + 1368);
    v2352 = *(float64x2_t *)(v38 + 1384);
    _Q16 = v2762[-35];
    v2355 = v2762[-34];
    _Q23 = v2355;
    v2357 = v2762[-33];
    v2358 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2330, v2346, v2355.f64[0]), v2349, v2355, 1), v2351, v2357.f64[0]), v2353, v2357, 1);
    v2359 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2331, v2347, v2355.f64[0]), v2348, v2355, 1), v2350, v2357.f64[0]), v2352, v2357, 1);
    _Q21 = *(float64x2_t *)((char *)&v2762[-27] + 8);
    v2361 = *(float64x2_t *)((char *)&v2762[-26] + 8);
    v2362 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2333, v2346, v2762[-27].f64[1]), v2349, _Q21, 1), v2351, v2361.f64[0]), v2353, v2361, 1);
    v2363 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2334, v2347, v2762[-27].f64[1]), v2348, _Q21, 1), v2350, v2361.f64[0]), v2352, v2361, 1);
    _Q27 = v2762[-20];
    _Q18 = v2762[-19];
    v2366 = v2762[-18];
    v2367 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2339, v2346, _Q18.f64[0]), v2349, _Q18, 1), v2351, v2366.f64[0]), v2353, v2366, 1);
    v2368 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2340, v2347, _Q18.f64[0]), v2348, _Q18, 1), v2350, v2366.f64[0]), v2352, v2366, 1);
    v2369 = *(float64x2_t *)((char *)&v2762[-12] + 8);
    v2370 = vmlaq_laneq_f64(vmlaq_n_f64(v2344, v2346, v2369.f64[0]), v2349, v2369, 1);
    _Q17 = v2369;
    v2371 = *(float64x2_t *)((char *)&v2762[-11] + 8);
    v2373 = vmlaq_laneq_f64(vmlaq_n_f64(v2370, v2351, v2371.f64[0]), v2353, v2371, 1);
    v2374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2345, v2347, v2369.f64[0]), v2348, v2369, 1), v2350, v2371.f64[0]), v2352, v2371, 1);
    v2375 = *(float64x2_t *)(v38 + 1504);
    v2376 = *(float64x2_t *)(v38 + 1488);
    v2377 = *(float64x2_t *)(v33 + 2928);
    v2378 = *(float64x2_t *)(v33 + 2912);
    v2379 = *(float64x2_t *)(v38 + 1744);
    v2380 = *(float64x2_t *)(v38 + 1728);
    _Q26 = v2762[-33];
    v2381 = v2762[-32];
    v2383 = vmlaq_laneq_f64(vmlaq_n_f64(v2358, v2376, v2381.f64[0]), v2378, v2381, 1);
    v2384 = vmlaq_laneq_f64(vmlaq_n_f64(v2359, v2375, v2381.f64[0]), v2377, v2381, 1);
    v2381.f64[0] = v2762[-31].f64[0];
    v2385 = vmlaq_n_f64(v2383, v2380, v2381.f64[0]);
    v2386 = vmlaq_n_f64(v2384, v2379, v2381.f64[0]);
    v2387 = *(float64x2_t *)((char *)&v2762[-25] + 8);
    v2388 = vmlaq_laneq_f64(vmlaq_n_f64(v2362, v2376, v2387.f64[0]), v2378, v2387, 1);
    v2389 = vmlaq_laneq_f64(vmlaq_n_f64(v2363, v2375, v2387.f64[0]), v2377, v2387, 1);
    v2387.f64[0] = v2762[-24].f64[1];
    v2390 = vmlaq_n_f64(v2388, v2380, v2387.f64[0]);
    v2391 = vmlaq_n_f64(v2389, v2379, v2387.f64[0]);
    _Q25 = v2762[-18];
    v2392 = v2762[-17];
    v2394 = vmlaq_laneq_f64(vmlaq_n_f64(v2367, v2376, v2392.f64[0]), v2378, v2392, 1);
    v2395 = vmlaq_laneq_f64(vmlaq_n_f64(v2368, v2375, v2392.f64[0]), v2377, v2392, 1);
    v2392.f64[0] = v2762[-16].f64[0];
    v2396 = vmlaq_n_f64(v2394, v2380, v2392.f64[0]);
    v2397 = vmlaq_n_f64(v2395, v2379, v2392.f64[0]);
    _Q24 = *(float64x2_t *)((char *)&v2762[-11] + 8);
    v2398 = *(float64x2_t *)((char *)&v2762[-10] + 8);
    v2400 = vmlaq_laneq_f64(vmlaq_n_f64(v2373, v2376, v2398.f64[0]), v2378, v2398, 1);
    v2376.f64[0] = v2762[-9].f64[1];
    a17[30] = v2385;
    a17[31] = v2386;
    *(float64x2_t *)((char *)a17 + 600) = v2390;
    *(float64x2_t *)((char *)a17 + 616) = v2391;
    a17[45] = v2396;
    a17[46] = v2397;
    *(float64x2_t *)((char *)a17 + 840) = vmlaq_n_f64(v2400, v2380, v2376.f64[0]);
    *(float64x2_t *)((char *)a17 + 856) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2374, v2375, v2398.f64[0]), v2377, v2398, 1), v2379, v2376.f64[0]);
    v2401 = *(float64x2_t *)(v38 + 80);
    v2402 = *(float64x2_t *)(v38 + 96);
    v2403 = *(float64x2_t *)(v33 + 1520);
    v2404 = *(float64x2_t *)(v33 + 1504);
    v2406 = *(float64x2_t *)(v38 + 320);
    v2405 = *(float64x2_t *)(v38 + 336);
    v2408 = *(float64x2_t *)(v38 + 440);
    v2407 = *(float64x2_t *)(v38 + 456);
    v2410 = v2762[-38];
    v2409 = v2762[-37];
    v2411 = *(float64x2_t *)((char *)&v2762[-31] + 8);
    v2412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2401, v2410.f64[0]), v2404, v2410, 1), v2406, v2409.f64[0]), v2408, v2409, 1);
    v2413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2402, v2410.f64[0]), v2403, v2410, 1), v2405, v2409.f64[0]), v2407, v2409, 1);
    v2414 = vmlaq_laneq_f64(vmulq_n_f64(v2401, v2411.f64[0]), v2404, v2411, 1);
    v2415 = vmlaq_laneq_f64(vmulq_n_f64(v2402, v2411.f64[0]), v2403, v2411, 1);
    v2416 = *(float64x2_t *)((char *)&v2762[-30] + 8);
    v2417 = vmlaq_laneq_f64(vmlaq_n_f64(v2414, v2406, v2416.f64[0]), v2408, v2416, 1);
    v2418 = vmlaq_laneq_f64(vmlaq_n_f64(v2415, v2405, v2416.f64[0]), v2407, v2416, 1);
    v2419 = v2762[-23];
    v2420 = vmlaq_laneq_f64(vmulq_n_f64(v2401, v2419.f64[0]), v2404, v2419, 1);
    v2421 = vmlaq_laneq_f64(vmulq_n_f64(v2402, v2419.f64[0]), v2403, v2419, 1);
    v2422 = v2762[-22];
    v2423 = vmlaq_laneq_f64(vmlaq_n_f64(v2420, v2406, v2422.f64[0]), v2408, v2422, 1);
    v2424 = vmlaq_laneq_f64(vmlaq_n_f64(v2421, v2405, v2422.f64[0]), v2407, v2422, 1);
    v2425 = *(float64x2_t *)((char *)&v2762[-16] + 8);
    v2426 = vmlaq_laneq_f64(vmulq_n_f64(v2401, v2425.f64[0]), v2404, v2425, 1);
    v2427 = *(float64x2_t *)((char *)&v2762[-15] + 8);
    v2428 = vmlaq_laneq_f64(vmlaq_n_f64(v2426, v2406, v2427.f64[0]), v2408, v2427, 1);
    v2429 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2402, v2425.f64[0]), v2403, v2425, 1), v2405, v2427.f64[0]), v2407, v2427, 1);
    v2430 = *(float64x2_t *)(v38 + 560);
    v2431 = *(float64x2_t *)(v38 + 576);
    v2432 = *(float64x2_t *)(v33 + 2000);
    v2433 = *(float64x2_t *)(v33 + 1984);
    v2434 = v2762[-36];
    v2435 = v2762[-35];
    v2436 = vmlaq_laneq_f64(vmlaq_n_f64(v2412, v2430, v2434.f64[0]), v2433, v2434, 1);
    v2437 = vmlaq_laneq_f64(vmlaq_n_f64(v2413, v2431, v2434.f64[0]), v2432, v2434, 1);
    v2438 = *(float64x2_t *)(v38 + 800);
    v2439 = *(float64x2_t *)(v38 + 816);
    v2441 = *(float64x2_t *)(v38 + 920);
    v2440 = *(float64x2_t *)(v38 + 936);
    v2442 = vmlaq_laneq_f64(vmlaq_n_f64(v2436, v2438, v2435.f64[0]), v2441, v2435, 1);
    v2443 = vmlaq_laneq_f64(vmlaq_n_f64(v2437, v2439, v2435.f64[0]), v2440, v2435, 1);
    v2444 = *(float64x2_t *)((char *)&v2762[-29] + 8);
    v2445 = vmlaq_laneq_f64(vmlaq_n_f64(v2417, v2430, v2444.f64[0]), v2433, v2444, 1);
    v2446 = vmlaq_laneq_f64(vmlaq_n_f64(v2418, v2431, v2444.f64[0]), v2432, v2444, 1);
    v2447 = *(float64x2_t *)((char *)&v2762[-28] + 8);
    v2448 = vmlaq_laneq_f64(vmlaq_n_f64(v2445, v2438, v2447.f64[0]), v2441, v2447, 1);
    v2449 = vmlaq_laneq_f64(vmlaq_n_f64(v2446, v2439, v2447.f64[0]), v2440, v2447, 1);
    v2450 = v2762[-21];
    v2451 = vmlaq_laneq_f64(vmlaq_n_f64(v2423, v2430, v2450.f64[0]), v2433, v2450, 1);
    v2452 = vmlaq_laneq_f64(vmlaq_n_f64(v2424, v2431, v2450.f64[0]), v2432, v2450, 1);
    v2453 = v2762[-20];
    v2454 = vmlaq_laneq_f64(vmlaq_n_f64(v2451, v2438, v2453.f64[0]), v2441, v2453, 1);
    v2455 = vmlaq_laneq_f64(vmlaq_n_f64(v2452, v2439, v2453.f64[0]), v2440, v2453, 1);
    v2456 = *(float64x2_t *)((char *)&v2762[-14] + 8);
    v2457 = vmlaq_laneq_f64(vmlaq_n_f64(v2428, v2430, v2456.f64[0]), v2433, v2456, 1);
    v2458 = *(float64x2_t *)((char *)&v2762[-13] + 8);
    v2459 = vmlaq_laneq_f64(vmlaq_n_f64(v2457, v2438, v2458.f64[0]), v2441, v2458, 1);
    v2460 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2429, v2431, v2456.f64[0]), v2432, v2456, 1), v2439, v2458.f64[0]), v2440, v2458, 1);
    v2461 = *(float64x2_t *)(v38 + 1056);
    v2462 = *(float64x2_t *)(v38 + 1040);
    v2463 = *(float64x2_t *)(v33 + 2480);
    v2464 = *(float64x2_t *)(v33 + 2464);
    v2465 = v2762[-34];
    v2466 = v2762[-33];
    v2467 = vmlaq_laneq_f64(vmlaq_n_f64(v2442, v2462, v2465.f64[0]), v2464, v2465, 1);
    v2468 = vmlaq_laneq_f64(vmlaq_n_f64(v2443, v2461, v2465.f64[0]), v2463, v2465, 1);
    v2469 = *(float64x2_t *)(v38 + 1280);
    v2470 = *(float64x2_t *)(v38 + 1400);
    v2471 = *(float64x2_t *)(v38 + 1416);
    v2472 = vmlaq_laneq_f64(vmlaq_n_f64(v2467, v2469, v2466.f64[0]), v2470, v2466, 1);
    v2473 = *(float64x2_t *)(v38 + 1296);
    v2474 = vmlaq_laneq_f64(vmlaq_n_f64(v2468, v2473, v2466.f64[0]), v2471, v2466, 1);
    v2475 = *(float64x2_t *)((char *)&v2762[-27] + 8);
    v2476 = vmlaq_laneq_f64(vmlaq_n_f64(v2448, v2462, v2475.f64[0]), v2464, v2475, 1);
    v2477 = vmlaq_laneq_f64(vmlaq_n_f64(v2449, v2461, v2475.f64[0]), v2463, v2475, 1);
    v2478 = *(float64x2_t *)((char *)&v2762[-26] + 8);
    v2479 = vmlaq_laneq_f64(vmlaq_n_f64(v2476, v2469, v2478.f64[0]), v2470, v2478, 1);
    v2480 = vmlaq_laneq_f64(vmlaq_n_f64(v2477, v2473, v2478.f64[0]), v2471, v2478, 1);
    v2481 = v2762[-19];
    v2482 = vmlaq_laneq_f64(vmlaq_n_f64(v2454, v2462, v2481.f64[0]), v2464, v2481, 1);
    v2483 = vmlaq_laneq_f64(vmlaq_n_f64(v2455, v2461, v2481.f64[0]), v2463, v2481, 1);
    v2484 = v2762[-18];
    v2485 = vmlaq_laneq_f64(vmlaq_n_f64(v2482, v2469, v2484.f64[0]), v2470, v2484, 1);
    v2486 = vmlaq_laneq_f64(vmlaq_n_f64(v2483, v2473, v2484.f64[0]), v2471, v2484, 1);
    v2487 = *(float64x2_t *)((char *)&v2762[-12] + 8);
    v2488 = vmlaq_laneq_f64(vmlaq_n_f64(v2459, v2462, v2487.f64[0]), v2464, v2487, 1);
    v2489 = *(float64x2_t *)((char *)&v2762[-11] + 8);
    v2490 = vmlaq_laneq_f64(vmlaq_n_f64(v2488, v2469, v2489.f64[0]), v2470, v2489, 1);
    v2491 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2460, v2461, v2487.f64[0]), v2463, v2487, 1), v2473, v2489.f64[0]), v2471, v2489, 1);
    v2492 = *(float64x2_t *)(v38 + 1536);
    v2493 = *(float64x2_t *)(v38 + 1520);
    v2494 = *(float64x2_t *)(v33 + 2960);
    v2495 = *(float64x2_t *)(v33 + 2944);
    v2496 = v2762[-32];
    v2497 = vmlaq_laneq_f64(vmlaq_n_f64(v2472, v2493, v2496.f64[0]), v2495, v2496, 1);
    v2498 = vmlaq_laneq_f64(vmlaq_n_f64(v2474, v2492, v2496.f64[0]), v2494, v2496, 1);
    v2499 = *(float64x2_t *)(v38 + 1760);
    v2487.f64[0] = v2762[-31].f64[0];
    v2500 = vmlaq_n_f64(v2497, v2499, v2487.f64[0]);
    v2501 = *(float64x2_t *)(v38 + 1776);
    v2502 = vmlaq_n_f64(v2498, v2501, v2487.f64[0]);
    v2503 = *(float64x2_t *)((char *)&v2762[-25] + 8);
    v2504 = vmlaq_laneq_f64(vmlaq_n_f64(v2479, v2493, v2503.f64[0]), v2495, v2503, 1);
    v2505 = vmlaq_laneq_f64(vmlaq_n_f64(v2480, v2492, v2503.f64[0]), v2494, v2503, 1);
    v2503.f64[0] = v2762[-24].f64[1];
    v2506 = vmlaq_n_f64(v2504, v2499, v2503.f64[0]);
    v2507 = vmlaq_n_f64(v2505, v2501, v2503.f64[0]);
    v2508 = v2762[-17];
    v2509 = vmlaq_laneq_f64(vmlaq_n_f64(v2485, v2493, v2508.f64[0]), v2495, v2508, 1);
    v2510 = vmlaq_laneq_f64(vmlaq_n_f64(v2486, v2492, v2508.f64[0]), v2494, v2508, 1);
    v2508.f64[0] = v2762[-16].f64[0];
    v2511 = vmlaq_n_f64(v2509, v2499, v2508.f64[0]);
    v2512 = vmlaq_n_f64(v2510, v2501, v2508.f64[0]);
    v2513 = *(float64x2_t *)((char *)&v2762[-10] + 8);
    v2514 = vmlaq_laneq_f64(vmlaq_n_f64(v2490, v2493, v2513.f64[0]), v2495, v2513, 1);
    v2493.f64[0] = v2762[-9].f64[1];
    a17[32] = v2500;
    a17[33] = v2502;
    *(float64x2_t *)((char *)a17 + 632) = v2506;
    *(float64x2_t *)((char *)a17 + 648) = v2507;
    a17[47] = v2511;
    a17[48] = v2512;
    *(float64x2_t *)((char *)a17 + 872) = vmlaq_n_f64(v2514, v2499, v2493.f64[0]);
    *(float64x2_t *)((char *)a17 + 888) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2491, v2492, v2513.f64[0]), v2494, v2513, 1), v2501, v2493.f64[0]);
    v2516 = *(float64x2_t *)(v38 + 112);
    v2515 = *(float64x2_t *)(v38 + 128);
    v2517 = *(float64x2_t *)(v33 + 1552);
    v2518 = *(float64x2_t *)(v33 + 1536);
    v2519 = *(float64x2_t *)(v38 + 352);
    v2520 = *(float64x2_t *)(v38 + 368);
    v2522 = *(float64x2_t *)(v38 + 472);
    v2521 = *(float64x2_t *)(v38 + 488);
    v2524 = v2762[-38];
    v2523 = v2762[-37];
    v2525 = *(float64x2_t *)((char *)&v2762[-31] + 8);
    v2526 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2516, v2524.f64[0]), v2518, v2524, 1), v2519, v2523.f64[0]), v2522, v2523, 1);
    v2527 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2515, v2524.f64[0]), v2517, v2524, 1), v2520, v2523.f64[0]), v2521, v2523, 1);
    v2528 = vmlaq_laneq_f64(vmulq_n_f64(v2516, v2525.f64[0]), v2518, v2525, 1);
    v2529 = vmlaq_laneq_f64(vmulq_n_f64(v2515, v2525.f64[0]), v2517, v2525, 1);
    v2530 = *(float64x2_t *)((char *)&v2762[-30] + 8);
    v2531 = vmlaq_laneq_f64(vmlaq_n_f64(v2528, v2519, v2530.f64[0]), v2522, v2530, 1);
    v2532 = vmlaq_laneq_f64(vmlaq_n_f64(v2529, v2520, v2530.f64[0]), v2521, v2530, 1);
    v2533 = v2762[-23];
    v2534 = vmlaq_laneq_f64(vmulq_n_f64(v2516, v2533.f64[0]), v2518, v2533, 1);
    v2535 = vmlaq_laneq_f64(vmulq_n_f64(v2515, v2533.f64[0]), v2517, v2533, 1);
    v2536 = v2762[-22];
    v2537 = vmlaq_laneq_f64(vmlaq_n_f64(v2534, v2519, v2536.f64[0]), v2522, v2536, 1);
    v2538 = vmlaq_laneq_f64(vmlaq_n_f64(v2535, v2520, v2536.f64[0]), v2521, v2536, 1);
    v2539 = *(float64x2_t *)((char *)&v2762[-16] + 8);
    v2540 = vmlaq_laneq_f64(vmulq_n_f64(v2516, v2539.f64[0]), v2518, v2539, 1);
    v2541 = *(float64x2_t *)((char *)&v2762[-15] + 8);
    v2542 = vmlaq_laneq_f64(vmlaq_n_f64(v2540, v2519, v2541.f64[0]), v2522, v2541, 1);
    v2543 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2515, v2539.f64[0]), v2517, v2539, 1), v2520, v2541.f64[0]), v2521, v2541, 1);
    v2545 = *(float64x2_t *)(v38 + 592);
    v2544 = *(float64x2_t *)(v38 + 608);
    v2546 = *(float64x2_t *)(v33 + 2032);
    v2547 = *(float64x2_t *)(v33 + 2016);
    v2548 = v2762[-36];
    v2549 = v2762[-35];
    v2550 = vmlaq_laneq_f64(vmlaq_n_f64(v2526, v2545, v2548.f64[0]), v2547, v2548, 1);
    v2551 = vmlaq_laneq_f64(vmlaq_n_f64(v2527, v2544, v2548.f64[0]), v2546, v2548, 1);
    v2552 = *(float64x2_t *)(v38 + 832);
    v2553 = *(float64x2_t *)(v38 + 848);
    v2554 = *(float64x2_t *)(v38 + 952);
    v2555 = *(float64x2_t *)(v38 + 968);
    v2556 = vmlaq_laneq_f64(vmlaq_n_f64(v2550, v2552, v2549.f64[0]), v2554, v2549, 1);
    v2557 = vmlaq_laneq_f64(vmlaq_n_f64(v2551, v2553, v2549.f64[0]), v2555, v2549, 1);
    v2558 = *(float64x2_t *)((char *)&v2762[-29] + 8);
    v2559 = vmlaq_laneq_f64(vmlaq_n_f64(v2531, v2545, v2558.f64[0]), v2547, v2558, 1);
    v2560 = vmlaq_laneq_f64(vmlaq_n_f64(v2532, v2544, v2558.f64[0]), v2546, v2558, 1);
    v2561 = *(float64x2_t *)((char *)&v2762[-28] + 8);
    v2562 = vmlaq_laneq_f64(vmlaq_n_f64(v2559, v2552, v2561.f64[0]), v2554, v2561, 1);
    v2563 = vmlaq_laneq_f64(vmlaq_n_f64(v2560, v2553, v2561.f64[0]), v2555, v2561, 1);
    v2564 = v2762[-21];
    v2565 = vmlaq_laneq_f64(vmlaq_n_f64(v2537, v2545, v2564.f64[0]), v2547, v2564, 1);
    v2566 = vmlaq_laneq_f64(vmlaq_n_f64(v2538, v2544, v2564.f64[0]), v2546, v2564, 1);
    v2567 = v2762[-20];
    v2568 = vmlaq_laneq_f64(vmlaq_n_f64(v2565, v2552, v2567.f64[0]), v2554, v2567, 1);
    v2569 = vmlaq_laneq_f64(vmlaq_n_f64(v2566, v2553, v2567.f64[0]), v2555, v2567, 1);
    v2570 = *(float64x2_t *)((char *)&v2762[-14] + 8);
    v2571 = vmlaq_laneq_f64(vmlaq_n_f64(v2542, v2545, v2570.f64[0]), v2547, v2570, 1);
    v2572 = *(float64x2_t *)((char *)&v2762[-13] + 8);
    v2573 = vmlaq_laneq_f64(vmlaq_n_f64(v2571, v2552, v2572.f64[0]), v2554, v2572, 1);
    v2574 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2543, v2544, v2570.f64[0]), v2546, v2570, 1), v2553, v2572.f64[0]), v2555, v2572, 1);
    v2575 = *(float64x2_t *)(v38 + 1088);
    v2576 = *(float64x2_t *)(v38 + 1072);
    v2577 = *(float64x2_t *)(v33 + 2512);
    v2578 = *(float64x2_t *)(v33 + 2496);
    v2579 = v2762[-34];
    v2580 = v2762[-33];
    v2581 = vmlaq_laneq_f64(vmlaq_n_f64(v2556, v2576, v2579.f64[0]), v2578, v2579, 1);
    v2582 = vmlaq_laneq_f64(vmlaq_n_f64(v2557, v2575, v2579.f64[0]), v2577, v2579, 1);
    v2583 = *(float64x2_t *)(v38 + 1312);
    v2584 = *(float64x2_t *)(v38 + 1432);
    v2585 = *(float64x2_t *)(v38 + 1448);
    v2586 = vmlaq_laneq_f64(vmlaq_n_f64(v2581, v2583, v2580.f64[0]), v2584, v2580, 1);
    v2587 = *(float64x2_t *)(v38 + 1328);
    v2588 = vmlaq_laneq_f64(vmlaq_n_f64(v2582, v2587, v2580.f64[0]), v2585, v2580, 1);
    v2589 = *(float64x2_t *)((char *)&v2762[-27] + 8);
    v2590 = vmlaq_laneq_f64(vmlaq_n_f64(v2562, v2576, v2589.f64[0]), v2578, v2589, 1);
    v2591 = vmlaq_laneq_f64(vmlaq_n_f64(v2563, v2575, v2589.f64[0]), v2577, v2589, 1);
    v2592 = *(float64x2_t *)((char *)&v2762[-26] + 8);
    v2593 = vmlaq_laneq_f64(vmlaq_n_f64(v2590, v2583, v2592.f64[0]), v2584, v2592, 1);
    v2594 = vmlaq_laneq_f64(vmlaq_n_f64(v2591, v2587, v2592.f64[0]), v2585, v2592, 1);
    v2595 = v2762[-19];
    v2596 = vmlaq_laneq_f64(vmlaq_n_f64(v2568, v2576, v2595.f64[0]), v2578, v2595, 1);
    v2597 = vmlaq_laneq_f64(vmlaq_n_f64(v2569, v2575, v2595.f64[0]), v2577, v2595, 1);
    v2598 = v2762[-18];
    v2599 = vmlaq_laneq_f64(vmlaq_n_f64(v2596, v2583, v2598.f64[0]), v2584, v2598, 1);
    v2600 = vmlaq_laneq_f64(vmlaq_n_f64(v2597, v2587, v2598.f64[0]), v2585, v2598, 1);
    v2601 = *(float64x2_t *)((char *)&v2762[-12] + 8);
    v2602 = vmlaq_laneq_f64(vmlaq_n_f64(v2573, v2576, v2601.f64[0]), v2578, v2601, 1);
    v2603 = *(float64x2_t *)((char *)&v2762[-11] + 8);
    v2604 = vmlaq_laneq_f64(vmlaq_n_f64(v2602, v2583, v2603.f64[0]), v2584, v2603, 1);
    v2605 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2574, v2575, v2601.f64[0]), v2577, v2601, 1), v2587, v2603.f64[0]), v2585, v2603, 1);
    v2606 = *(float64x2_t *)(v38 + 1568);
    v2607 = *(float64x2_t *)(v38 + 1552);
    v2608 = *(float64x2_t *)(v33 + 2992);
    _Q4 = *(float64x2_t *)(v33 + 2976);
    v2610 = v2762[-32];
    v2611 = vmlaq_laneq_f64(vmlaq_n_f64(v2586, v2607, v2610.f64[0]), _Q4, v2610, 1);
    v2612 = vmlaq_laneq_f64(vmlaq_n_f64(v2588, v2606, v2610.f64[0]), v2608, v2610, 1);
    v2613 = *(float64x2_t *)((char *)&v2762[-25] + 8);
    v2614 = vmlaq_laneq_f64(vmlaq_n_f64(v2593, v2607, v2613.f64[0]), _Q4, v2613, 1);
    v2615 = vmlaq_laneq_f64(vmlaq_n_f64(v2594, v2606, v2613.f64[0]), v2608, v2613, 1);
    v2616 = v2762[-17];
    v2617 = vmlaq_laneq_f64(vmlaq_n_f64(v2599, v2607, v2616.f64[0]), _Q4, v2616, 1);
    v2618 = vmlaq_laneq_f64(vmlaq_n_f64(v2600, v2606, v2616.f64[0]), v2608, v2616, 1);
    v2619 = *(float64x2_t *)((char *)&v2762[-10] + 8);
    _Q9 = vmlaq_laneq_f64(vmlaq_n_f64(v2604, v2607, v2619.f64[0]), _Q4, v2619, 1);
    v2621 = vmlaq_n_f64(v2605, v2606, v2619.f64[0]);
    v2622 = *(float64x2_t *)(v38 + 1808);
    v2623 = vmlaq_laneq_f64(v2621, v2608, v2619, 1);
    _Q2 = *(float64x2_t *)(v38 + 1792);
    v2608.f64[0] = v2762[-31].f64[0];
    v2625 = vmlaq_n_f64(v2611, _Q2, v2608.f64[0]);
    _Q28 = vmlaq_n_f64(v2612, v2622, v2608.f64[0]);
    v2608.f64[0] = v2762[-24].f64[1];
    _Q29 = vmlaq_n_f64(v2614, _Q2, v2608.f64[0]);
    v2628 = vmlaq_n_f64(v2615, v2622, v2608.f64[0]);
    v2608.f64[0] = v2762[-16].f64[0];
    v2629 = vmlaq_n_f64(v2617, _Q2, v2608.f64[0]);
    v2630 = vmlaq_n_f64(v2618, v2622, v2608.f64[0]);
    v2608.f64[0] = v2762[-9].f64[1];
    a17[34] = v2625;
    a17[35] = _Q28;
    *(float64x2_t *)((char *)a17 + 664) = _Q29;
    *(float64x2_t *)((char *)a17 + 680) = v2628;
    a17[49] = v2629;
    a17[50] = v2630;
    *(float64x2_t *)((char *)a17 + 904) = vmlaq_n_f64(_Q9, _Q2, v2608.f64[0]);
    *(float64x2_t *)((char *)a17 + 920) = vmlaq_n_f64(v2623, v2622, v2608.f64[0]);
    v2631 = *(float64x2_t *)(v38 + 144);
    _Q4.f64[0] = *(float64_t *)(v38 + 280);
    v2632 = *(float64x2_t *)(v38 + 264);
    v2633 = *(float64x2_t *)(v38 + 384);
    _Q9.f64[0] = *(float64_t *)(v38 + 520);
    _Q10 = *(float64x2_t *)(v38 + 504);
    _Q11 = *(float64x2_t *)((char *)&v2762[-30] + 8);
    v2636 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2631, _Q22.f64[0]), v2632, _Q22, 1), v2633, _Q19.f64[0]), _Q10, _Q19, 1);
    __asm
    {
      FMLA            D29, D4, V22.D[1]
      FMLA            D29, D9, V19.D[1]
    }
    v2637 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2631, _Q20.f64[0]), v2632, _Q20, 1), v2633, _Q11.f64[0]), _Q10, _Q11, 1);
    __asm
    {
      FMLA            D28, D4, V20.D[1]
      FMLA            D28, D9, V11.D[1]
    }
    _Q19.f64[1] = v2808.f64[1];
    __asm { FMLA            D22, D4, V19.D[1] }
    v2638 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2631, v2808.f64[0]), v2632, v2808, 1), v2633, _Q7.f64[0]), _Q10, _Q7, 1);
    __asm { FMLA            D22, D9, V7.D[1] }
    _Q11.f64[1] = v2807.f64[1];
    v2639 = vmlaq_laneq_f64(vmulq_n_f64(v2631, v2807.f64[0]), v2632, v2807, 1);
    _Q3 = *(float64x2_t *)((char *)&v2762[-15] + 8);
    v2641 = vmlaq_laneq_f64(vmlaq_n_f64(v2639, v2633, _Q3.f64[0]), _Q10, _Q3, 1);
    __asm
    {
      FMLA            D19, D4, V11.D[1]
      FMLA            D19, D9, V3.D[1]
    }
    v2642 = *(float64x2_t *)(v38 + 624);
    _Q4.f64[0] = *(float64_t *)(v38 + 760);
    v2643 = *(float64x2_t *)(v38 + 744);
    v2644 = *(float64x2_t *)(v38 + 864);
    _Q9.f64[0] = *(float64_t *)(v38 + 1000);
    _Q10.f64[1] = v2806.f64[1];
    __asm { FMLA            D29, D4, V10.D[1] }
    v2645 = *(float64x2_t *)(v38 + 984);
    v2646 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2636, v2642, v2806.f64[0]), v2643, v2806, 1), v2644, _Q16.f64[0]), v2645, _Q16, 1);
    __asm { FMLA            D29, D9, V16.D[1] }
    _Q16.f64[1] = v2805.f64[1];
    __asm { FMLA            D28, D4, V16.D[1] }
    _Q16 = *(float64x2_t *)((char *)&v2762[-28] + 8);
    v2648 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2637, v2642, v2805.f64[0]), v2643, v2805, 1), v2644, _Q16.f64[0]), v2645, _Q16, 1);
    __asm
    {
      FMLA            D28, D9, V16.D[1]
      FMLA            D22, D4, V6.D[1]
    }
    v2649 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2638, v2642, _Q6.f64[0]), v2643, _Q6, 1), v2644, _Q27.f64[0]), v2645, _Q27, 1);
    __asm { FMLA            D22, D9, V27.D[1] }
    v2650 = vmlaq_n_f64(v2641, v2642, _Q5.f64[0]);
    _Q3 = *(float64x2_t *)((char *)&v2762[-13] + 8);
    v2652 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v2650, v2643, _Q5, 1), v2644, _Q3.f64[0]), v2645, _Q3, 1);
    __asm
    {
      FMLA            D19, D4, V5.D[1]
      FMLA            D19, D9, V3.D[1]
    }
    v2653 = *(float64x2_t *)(v38 + 1104);
    _Q4.f64[0] = *(float64_t *)(v38 + 1240);
    v2654 = *(float64x2_t *)(v38 + 1224);
    v2655 = *(float64x2_t *)(v38 + 1344);
    _Q27.f64[0] = *(float64_t *)(v38 + 1480);
    v2656 = *(float64x2_t *)(v38 + 1464);
    _Q31 = *(float64x2_t *)((char *)&v2762[-26] + 8);
    v2658 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2646, v2653, _Q23.f64[0]), v2654, _Q23, 1), v2655, _Q26.f64[0]), v2656, _Q26, 1);
    __asm
    {
      FMLA            D29, D4, V23.D[1]
      FMLA            D29, D27, V26.D[1]
    }
    v2659 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2648, v2653, _Q21.f64[0]), v2654, _Q21, 1), v2655, _Q31.f64[0]), v2656, _Q31, 1);
    __asm
    {
      FMLA            D28, D4, V21.D[1]
      FMLA            D28, D27, V31.D[1]
    }
    v2660 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2649, v2653, _Q18.f64[0]), v2654, _Q18, 1), v2655, _Q25.f64[0]), v2656, _Q25, 1);
    __asm
    {
      FMLA            D22, D4, V18.D[1]
      FMLA            D22, D27, V25.D[1]
    }
    v2661 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2652, v2653, _Q17.f64[0]), v2654, _Q17, 1), v2655, _Q24.f64[0]), v2656, _Q24, 1);
    __asm
    {
      FMLA            D19, D4, V17.D[1]
      FMLA            D19, D27, V24.D[1]
    }
    v2662 = *(float64x2_t *)(v38 + 1584);
    _Q4.f64[0] = *(float64_t *)(v38 + 1720);
    v2663 = *(float64x2_t *)(v38 + 1704);
    _Q6.f64[0] = *(float64_t *)(v38 + 1840);
    v2664 = *(float64x2_t *)(v38 + 1824);
    _Q17.f64[0] = v2762[-31].f64[0];
    _Q18 = v2762[-32];
    _Q21.f64[0] = v2762[-24].f64[1];
    _Q23 = *(float64x2_t *)((char *)&v2762[-25] + 8);
    _Q24.f64[0] = v2762[-16].f64[0];
    _Q25 = v2762[-17];
    _Q26.f64[0] = v2762[-9].f64[1];
    _Q27 = *(float64x2_t *)((char *)&v2762[-10] + 8);
    __asm
    {
      FMLA            D29, D4, V18.D[1]
      FMLA            D28, D4, V23.D[1]
      FMLA            D22, D4, V25.D[1]
      FMLA            D19, D4, V27.D[1]
    }
    a17[37].f64[0] = _Q29.f64[0] + _Q6.f64[0] * _Q17.f64[0];
    a17[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2658, v2662, _Q18.f64[0]), v2663, _Q18, 1), v2664, _Q17.f64[0]);
    a17[44].f64[1] = _Q28.f64[0] + _Q6.f64[0] * _Q21.f64[0];
    *(float64x2_t *)((char *)a17 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2659, v2662, _Q23.f64[0]), v2663, _Q23, 1), v2664, _Q21.f64[0]);
    a17[52].f64[0] = _Q22.f64[0] + _Q6.f64[0] * _Q24.f64[0];
    a17[51] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2660, v2662, _Q25.f64[0]), v2663, _Q25, 1), v2664, _Q24.f64[0]);
    a17[59].f64[1] = _Q19.f64[0] + _Q6.f64[0] * _Q26.f64[0];
    *(float64x2_t *)((char *)a17 + 936) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2661, v2662, _Q27.f64[0]), v2663, _Q27, 1), v2664, _Q26.f64[0]);
    v2669 = v2762[-7];
    v2670 = v2762[-8];
    v2671 = v2762[-5];
    v2672 = v2762[-6];
    v2673 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 48), v2670.f64[0]), *(float64x2_t *)(v33 + 1472), v2670, 1), *(float64x2_t *)(v38 + 288), v2669.f64[0]), *(float64x2_t *)(v38 + 408), v2669, 1), *(float64x2_t *)(v38 + 528), v2672.f64[0]), *(float64x2_t *)(v33 + 1952), v2672,
                  1),
                *(float64x2_t *)(v38 + 768),
                v2671.f64[0]),
              *(float64x2_t *)(v38 + 888),
              v2671,
              1);
    v2674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 64), v2670.f64[0]), *(float64x2_t *)(v33 + 1488), v2670, 1), *(float64x2_t *)(v38 + 304), v2669.f64[0]), *(float64x2_t *)(v38 + 424), v2669, 1), *(float64x2_t *)(v38 + 544), v2672.f64[0]), *(float64x2_t *)(v33 + 1968), v2672,
                  1),
                *(float64x2_t *)(v38 + 784),
                v2671.f64[0]),
              *(float64x2_t *)(v38 + 904),
              v2671,
              1);
    v2675 = v2762[-3];
    v2676 = v2762[-4];
    v2669.f64[0] = v2762[-1].f64[0];
    v2677 = v2762[-2];
    v2678 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2674, *(float64x2_t *)(v38 + 1024), v2676.f64[0]), *(float64x2_t *)(v33 + 2448), v2676, 1), *(float64x2_t *)(v38 + 1264), v2675.f64[0]), *(float64x2_t *)(v38 + 1384), v2675, 1), *(float64x2_t *)(v38 + 1504), v2677.f64[0]), *(float64x2_t *)(v33 + 2928), v2677, 1),
              *(float64x2_t *)(v38 + 1744),
              v2669.f64[0]);
    a17[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2673, *(float64x2_t *)(v38 + 1008), v2676.f64[0]), *(float64x2_t *)(v33 + 2432), v2676, 1), *(float64x2_t *)(v38 + 1248), v2675.f64[0]), *(float64x2_t *)(v38 + 1368), v2675, 1), *(float64x2_t *)(v38 + 1488), v2677.f64[0]), *(float64x2_t *)(v33 + 2912), v2677, 1),
                *(float64x2_t *)(v38 + 1728),
                v2669.f64[0]);
    a17[61] = v2678;
    v2679 = v2762[-7];
    v2680 = v2762[-8];
    v2681 = v2762[-5];
    v2682 = v2762[-6];
    v2683 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 80), v2680.f64[0]), *(float64x2_t *)(v33 + 1504), v2680, 1), *(float64x2_t *)(v38 + 320), v2679.f64[0]), *(float64x2_t *)(v38 + 440), v2679, 1), *(float64x2_t *)(v38 + 560), v2682.f64[0]), *(float64x2_t *)(v33 + 1984), v2682,
                  1),
                *(float64x2_t *)(v38 + 800),
                v2681.f64[0]),
              *(float64x2_t *)(v38 + 920),
              v2681,
              1);
    v2684 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 96), v2680.f64[0]), *(float64x2_t *)(v33 + 1520), v2680, 1), *(float64x2_t *)(v38 + 336), v2679.f64[0]), *(float64x2_t *)(v38 + 456), v2679, 1), *(float64x2_t *)(v38 + 576), v2682.f64[0]), *(float64x2_t *)(v33 + 2000), v2682,
                  1),
                *(float64x2_t *)(v38 + 816),
                v2681.f64[0]),
              *(float64x2_t *)(v38 + 936),
              v2681,
              1);
    v2685 = v2762[-3];
    v2686 = v2762[-4];
    v2679.f64[0] = v2762[-1].f64[0];
    v2687 = v2762[-2];
    v2688 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2684, *(float64x2_t *)(v38 + 1056), v2686.f64[0]), *(float64x2_t *)(v33 + 2480), v2686, 1), *(float64x2_t *)(v38 + 1296), v2685.f64[0]), *(float64x2_t *)(v38 + 1416), v2685, 1), *(float64x2_t *)(v38 + 1536), v2687.f64[0]), *(float64x2_t *)(v33 + 2960), v2687, 1),
              *(float64x2_t *)(v38 + 1776),
              v2679.f64[0]);
    a17[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2683, *(float64x2_t *)(v38 + 1040), v2686.f64[0]), *(float64x2_t *)(v33 + 2464), v2686, 1), *(float64x2_t *)(v38 + 1280), v2685.f64[0]), *(float64x2_t *)(v38 + 1400), v2685, 1), *(float64x2_t *)(v38 + 1520), v2687.f64[0]), *(float64x2_t *)(v33 + 2944), v2687, 1),
                *(float64x2_t *)(v38 + 1760),
                v2679.f64[0]);
    a17[63] = v2688;
    v2689 = v2762[-7];
    v2690 = v2762[-8];
    v2691 = v2762[-5];
    v2692 = v2762[-6];
    v2693 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 112), v2690.f64[0]), *(float64x2_t *)(v33 + 1536), v2690, 1), *(float64x2_t *)(v38 + 352), v2689.f64[0]), *(float64x2_t *)(v38 + 472), v2689, 1), *(float64x2_t *)(v38 + 592), v2692.f64[0]), *(float64x2_t *)(v33 + 2016), v2692,
                  1),
                *(float64x2_t *)(v38 + 832),
                v2691.f64[0]),
              *(float64x2_t *)(v38 + 952),
              v2691,
              1);
    _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 128), v2690.f64[0]), *(float64x2_t *)(v33 + 1552), v2690, 1), *(float64x2_t *)(v38 + 368), v2689.f64[0]), *(float64x2_t *)(v38 + 488), v2689, 1), *(float64x2_t *)(v38 + 608), v2692.f64[0]), *(float64x2_t *)(v33 + 2032), v2692,
                1),
              *(float64x2_t *)(v38 + 848),
              v2691.f64[0]),
            *(float64x2_t *)(v38 + 968),
            v2691,
            1);
    v2695 = v2762[-3];
    v2696 = v2762[-4];
    v2689.f64[0] = v2762[-1].f64[0];
    v2697 = v2762[-2];
    v2698 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2693, *(float64x2_t *)(v38 + 1072), v2696.f64[0]), *(float64x2_t *)(v33 + 2496), v2696, 1), *(float64x2_t *)(v38 + 1312), v2695.f64[0]), *(float64x2_t *)(v38 + 1432), v2695, 1), *(float64x2_t *)(v38 + 1552), v2697.f64[0]), *(float64x2_t *)(v33 + 2976), v2697, 1),
              *(float64x2_t *)(v38 + 1792),
              v2689.f64[0]);
    a17[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, *(float64x2_t *)(v38 + 1088), v2696.f64[0]), *(float64x2_t *)(v33 + 2512), v2696, 1), *(float64x2_t *)(v38 + 1328), v2695.f64[0]), *(float64x2_t *)(v38 + 1448), v2695, 1), *(float64x2_t *)(v38 + 1568), v2697.f64[0]), *(float64x2_t *)(v33 + 2992), v2697, 1),
                *(float64x2_t *)(v38 + 1808),
                v2689.f64[0]);
    a17[64] = v2698;
    _Q2.f64[0] = *(float64_t *)(v38 + 280);
    _Q6.f64[0] = *(float64_t *)(v38 + 520);
    _Q16 = v2762[-7];
    _Q17 = v2762[-8];
    v2701 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 144), _Q17.f64[0]), *(float64x2_t *)(v38 + 264), _Q17, 1), *(float64x2_t *)(v38 + 384), _Q16.f64[0]), *(float64x2_t *)(v38 + 504), _Q16, 1);
    __asm
    {
      FMLA            D0, D2, V17.D[1]
      FMLA            D0, D6, V16.D[1]
    }
    _Q4.f64[0] = *(float64_t *)(v38 + 760);
    _Q16.f64[0] = *(float64_t *)(v38 + 1000);
    _Q18 = v2762[-5];
    _Q19 = v2762[-6];
    v2704 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2701, *(float64x2_t *)(v38 + 624), _Q19.f64[0]), *(float64x2_t *)(v38 + 744), _Q19, 1), *(float64x2_t *)(v38 + 864), _Q18.f64[0]), *(float64x2_t *)(v38 + 984), _Q18, 1);
    __asm
    {
      FMLA            D0, D4, V19.D[1]
      FMLA            D0, D16, V18.D[1]
    }
    _Q4.f64[0] = *(float64_t *)(v38 + 1240);
    _Q16.f64[0] = *(float64_t *)(v38 + 1480);
    _Q18 = v2762[-3];
    _Q19 = v2762[-4];
    __asm
    {
      FMLA            D0, D4, V19.D[1]
      FMLA            D0, D16, V18.D[1]
    }
    _Q4.f64[0] = *(float64_t *)(v38 + 1720);
    _Q16.f64[0] = v2762[-1].f64[0];
    _Q17 = v2762[-2];
    v2708 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2704, *(float64x2_t *)(v38 + 1104), _Q19.f64[0]), *(float64x2_t *)(v38 + 1224), _Q19, 1), *(float64x2_t *)(v38 + 1344), _Q18.f64[0]), *(float64x2_t *)(v38 + 1464), _Q18, 1), *(float64x2_t *)(v38 + 1584), _Q17.f64[0]), *(float64x2_t *)(v38 + 1704), _Q17, 1),
              *(float64x2_t *)(v38 + 1824),
              _Q16.f64[0]);
    __asm { FMLA            D0, D4, V17.D[1] }
    a17[67].f64[0] = _Q0.f64[0] + *(double *)(v38 + 1840) * _Q16.f64[0];
    a17[66] = v2708;
  }
  result = MEMORY[0x24BDAC7A8]();
  v2710 = (float64x2_t *)v2809;
  v2711 = *(float64x2_t *)(v2809 + 16);
  v2762[-8] = *(float64x2_t *)v2809;
  v2762[-7] = v2711;
  v2712 = v2710[3];
  v2762[-6] = v2710[2];
  v2762[-5] = v2712;
  v2713 = v2710[5];
  v2762[-4] = v2710[4];
  v2762[-3] = v2713;
  v2762[-1].f64[0] = v2710[7].f64[0];
  v2762[-2] = v2710[6];
  _Q7 = v2762[-8];
  _Q17 = _Q7;
  v2715 = v2762[-7];
  _Q1 = v2715;
  v2718 = v2762[-6];
  _Q2 = v2718;
  v2720 = v2762[-5];
  v2721 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 48), _Q7.f64[0]), *(float64x2_t *)(v33 + 1472), _Q7, 1), *(float64x2_t *)(v38 + 288), v2715.f64[0]), *(float64x2_t *)(v38 + 408), v2715, 1), *(float64x2_t *)(v38 + 528), v2718.f64[0]), *(float64x2_t *)(v33 + 1952), v2718,
                1),
              *(float64x2_t *)(v38 + 768),
              v2720.f64[0]),
            *(float64x2_t *)(v38 + 888),
            v2720,
            1);
  v2722 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 64), _Q7.f64[0]), *(float64x2_t *)(v33 + 1488), _Q7, 1), *(float64x2_t *)(v38 + 304), v2715.f64[0]), *(float64x2_t *)(v38 + 424), v2715, 1), *(float64x2_t *)(v38 + 544), v2718.f64[0]), *(float64x2_t *)(v33 + 1968), v2718,
                1),
              *(float64x2_t *)(v38 + 784),
              v2720.f64[0]),
            *(float64x2_t *)(v38 + 904),
            v2720,
            1);
  _Q3 = v2720;
  v2724 = v2762[-4];
  _Q4 = v2724;
  v2726 = v2762[-3];
  _Q5 = v2726;
  v2728 = v2762[-2];
  v2729 = v2762[-1].f64[0];
  v2730 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2722, *(float64x2_t *)(v38 + 1024), v2724.f64[0]), *(float64x2_t *)(v33 + 2448), v2724, 1), *(float64x2_t *)(v38 + 1264), v2726.f64[0]), *(float64x2_t *)(v38 + 1384), v2726, 1), *(float64x2_t *)(v38 + 1504), v2728.f64[0]), *(float64x2_t *)(v33 + 2928), v2728, 1),
            *(float64x2_t *)(v38 + 1744),
            v2729);
  *v2710 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2721, *(float64x2_t *)(v38 + 1008), v2724.f64[0]), *(float64x2_t *)(v33 + 2432), v2724, 1), *(float64x2_t *)(v38 + 1248), v2726.f64[0]), *(float64x2_t *)(v38 + 1368), v2726, 1), *(float64x2_t *)(v38 + 1488), v2728.f64[0]), *(float64x2_t *)(v33 + 2912), v2728, 1),
             *(float64x2_t *)(v38 + 1728),
             v2729);
  v2710[1] = v2730;
  v2732 = v2762[-8];
  v2731 = v2762[-7];
  v2733 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 80), v2732.f64[0]), *(float64x2_t *)(v33 + 1504), v2732, 1), *(float64x2_t *)(v38 + 320), v2731.f64[0]), *(float64x2_t *)(v38 + 440), v2731, 1);
  v2734 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 96), v2732.f64[0]), *(float64x2_t *)(v33 + 1520), v2732, 1), *(float64x2_t *)(v38 + 336), v2731.f64[0]), *(float64x2_t *)(v38 + 456), v2731, 1);
  v2735 = v2762[-6];
  v2736 = v2762[-5];
  v2737 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2734, *(float64x2_t *)(v38 + 576), v2735.f64[0]), *(float64x2_t *)(v33 + 2000), v2735, 1), *(float64x2_t *)(v38 + 816), v2736.f64[0]), *(float64x2_t *)(v38 + 936), v2736, 1);
  v2738 = v2762[-4];
  v2739 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2733, *(float64x2_t *)(v38 + 560), v2735.f64[0]), *(float64x2_t *)(v33 + 1984), v2735, 1), *(float64x2_t *)(v38 + 800), v2736.f64[0]), *(float64x2_t *)(v38 + 920), v2736, 1), *(float64x2_t *)(v38 + 1040), v2738.f64[0]);
  _Q16 = v2762[-3];
  v2741 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v2739, *(float64x2_t *)(v33 + 2464), v2738, 1), *(float64x2_t *)(v38 + 1280), _Q16.f64[0]), *(float64x2_t *)(v38 + 1400), _Q16, 1);
  v2742 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2737, *(float64x2_t *)(v38 + 1056), v2738.f64[0]), *(float64x2_t *)(v33 + 2480), v2738, 1), *(float64x2_t *)(v38 + 1296), _Q16.f64[0]), *(float64x2_t *)(v38 + 1416), _Q16, 1);
  v2743 = v2762[-2];
  v2744 = v2762[-1].f64[0];
  v2745 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2742, *(float64x2_t *)(v38 + 1536), v2743.f64[0]), *(float64x2_t *)(v33 + 2960), v2743, 1), *(float64x2_t *)(v38 + 1776), v2744);
  v2710[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2741, *(float64x2_t *)(v38 + 1520), v2743.f64[0]), *(float64x2_t *)(v33 + 2944), v2743, 1), *(float64x2_t *)(v38 + 1760), v2744);
  v2710[3] = v2745;
  v2747 = v2762[-8];
  v2746 = v2762[-7];
  v2748 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 112), v2747.f64[0]), *(float64x2_t *)(v33 + 1536), v2747, 1), *(float64x2_t *)(v38 + 352), v2746.f64[0]), *(float64x2_t *)(v38 + 472), v2746, 1);
  v2749 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 128), v2747.f64[0]), *(float64x2_t *)(v33 + 1552), v2747, 1), *(float64x2_t *)(v38 + 368), v2746.f64[0]), *(float64x2_t *)(v38 + 488), v2746, 1);
  v2750 = v2762[-6];
  v2751 = v2762[-5];
  v2752 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2748, *(float64x2_t *)(v38 + 592), v2750.f64[0]), *(float64x2_t *)(v33 + 2016), v2750, 1), *(float64x2_t *)(v38 + 832), v2751.f64[0]), *(float64x2_t *)(v38 + 952), v2751, 1);
  v2753 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2749, *(float64x2_t *)(v38 + 608), v2750.f64[0]), *(float64x2_t *)(v33 + 2032), v2750, 1), *(float64x2_t *)(v38 + 848), v2751.f64[0]), *(float64x2_t *)(v38 + 968), v2751, 1);
  v2754 = v2762[-4];
  _Q18 = v2762[-3];
  v2756 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2752, *(float64x2_t *)(v38 + 1072), v2754.f64[0]), *(float64x2_t *)(v33 + 2496), v2754, 1), *(float64x2_t *)(v38 + 1312), _Q18.f64[0]), *(float64x2_t *)(v38 + 1432), _Q18, 1);
  v2757 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2753, *(float64x2_t *)(v38 + 1088), v2754.f64[0]), *(float64x2_t *)(v33 + 2512), v2754, 1), *(float64x2_t *)(v38 + 1328), _Q18.f64[0]), *(float64x2_t *)(v38 + 1448), _Q18, 1);
  v2758 = v2762[-2];
  _Q18.f64[0] = v2762[-1].f64[0];
  _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2757, *(float64x2_t *)(v38 + 1568), v2758.f64[0]), *(float64x2_t *)(v33 + 2992), v2758, 1), *(float64x2_t *)(v38 + 1808), _Q18.f64[0]);
  v2710[4] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2756, *(float64x2_t *)(v38 + 1552), v2758.f64[0]), *(float64x2_t *)(v33 + 2976), v2758, 1), *(float64x2_t *)(v38 + 1792), _Q18.f64[0]);
  v2710[5] = _Q0;
  _Q7.f64[0] = *(float64_t *)(v38 + 280);
  _Q16.f64[0] = *(float64_t *)(v38 + 520);
  __asm
  {
    FMLA            D0, D7, V17.D[1]
    FMLA            D0, D16, V1.D[1]
  }
  _Q16.f64[0] = *(float64_t *)(v38 + 760);
  _Q7.f64[0] = *(float64_t *)(v38 + 1000);
  v2760 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v38 + 144), _Q17.f64[0]), *(float64x2_t *)(v38 + 264), _Q17, 1), *(float64x2_t *)(v38 + 384), _Q1.f64[0]), *(float64x2_t *)(v38 + 504), _Q1, 1), *(float64x2_t *)(v38 + 624), _Q2.f64[0]), *(float64x2_t *)(v38 + 744), _Q2,
                1),
              *(float64x2_t *)(v38 + 864),
              _Q3.f64[0]),
            *(float64x2_t *)(v38 + 984),
            _Q3,
            1);
  __asm
  {
    FMLA            D0, D16, V2.D[1]
    FMLA            D0, D7, V3.D[1]
  }
  _Q3.f64[0] = *(float64_t *)(v38 + 1240);
  _Q18.f64[0] = *(float64_t *)(v38 + 1480);
  __asm
  {
    FMLA            D0, D3, V4.D[1]
    FMLA            D0, D18, V5.D[1]
  }
  _Q3.f64[0] = *(float64_t *)(v38 + 1720);
  _Q16.f64[0] = v2762[-1].f64[0];
  _Q17 = v2762[-2];
  __asm { FMLA            D0, D3, V17.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + *(double *)(v38 + 1840) * _Q16.f64[0];
  v2710[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2760, *(float64x2_t *)(v38 + 1104), _Q4.f64[0]), *(float64x2_t *)(v38 + 1224), _Q4, 1), *(float64x2_t *)(v38 + 1344), _Q5.f64[0]), *(float64x2_t *)(v38 + 1464), _Q5, 1), *(float64x2_t *)(v38 + 1584), _Q17.f64[0]), *(float64x2_t *)(v38 + 1704), _Q17, 1),
               *(float64x2_t *)(v38 + 1824),
               _Q16.f64[0]);
  v2710[7].f64[0] = _Q0.f64[0];
  return result;
}

double sub_20F4DF030(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v2;
  double result;

  v2 = *a2;
  *a1 = **a2;
  a1[1] = *v2;
  a1[2] = *v2;
  a1[3] = *v2;
  a1[4] = *v2;
  a1[5] = *v2;
  a1[6] = *v2;
  a1[7] = *v2;
  a1[8] = *v2;
  a1[9] = *v2;
  a1[10] = *v2;
  a1[11] = *v2;
  a1[12] = *v2;
  a1[13] = *v2;
  a1[14] = *v2;
  a1[15] = *v2;
  a1[16] = *v2;
  a1[17] = *v2;
  a1[18] = *v2;
  a1[19] = *v2;
  a1[20] = *v2;
  a1[21] = *v2;
  a1[22] = *v2;
  a1[23] = *v2;
  a1[24] = *v2;
  a1[25] = *v2;
  a1[26] = *v2;
  a1[27] = *v2;
  a1[28] = *v2;
  a1[29] = *v2;
  a1[30] = *v2;
  a1[31] = *v2;
  a1[32] = *v2;
  a1[33] = *v2;
  a1[34] = *v2;
  a1[35] = *v2;
  a1[36] = *v2;
  a1[37] = *v2;
  a1[38] = *v2;
  a1[39] = *v2;
  a1[40] = *v2;
  a1[41] = *v2;
  a1[42] = *v2;
  a1[43] = *v2;
  a1[44] = *v2;
  a1[45] = *v2;
  a1[46] = *v2;
  a1[47] = *v2;
  a1[48] = *v2;
  a1[49] = *v2;
  a1[50] = *v2;
  a1[51] = *v2;
  a1[52] = *v2;
  a1[53] = *v2;
  a1[54] = *v2;
  a1[55] = *v2;
  a1[56] = *v2;
  a1[57] = *v2;
  a1[58] = *v2;
  a1[59] = *v2;
  a1[60] = *v2;
  a1[61] = *v2;
  a1[62] = *v2;
  a1[63] = *v2;
  a1[64] = *v2;
  a1[65] = *v2;
  a1[66] = *v2;
  a1[67] = *v2;
  a1[68] = *v2;
  a1[69] = *v2;
  a1[70] = *v2;
  a1[71] = *v2;
  a1[72] = *v2;
  a1[73] = *v2;
  a1[74] = *v2;
  a1[75] = *v2;
  a1[76] = *v2;
  a1[77] = *v2;
  a1[78] = *v2;
  a1[79] = *v2;
  a1[80] = *v2;
  a1[81] = *v2;
  a1[82] = *v2;
  a1[83] = *v2;
  a1[84] = *v2;
  a1[85] = *v2;
  a1[86] = *v2;
  a1[87] = *v2;
  a1[88] = *v2;
  result = *(double *)v2;
  a1[89] = *v2;
  return result;
}

uint64_t *sub_20F4DF308(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t i;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;

  v6 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = 0;
  *(_OWORD *)a1 = v6;
  a1[4] = 0;
  a1[5] = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v7 - v8);
    a1[3] = (uint64_t)v10;
    a1[4] = (uint64_t)v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[5] = (uint64_t)v11;
    memcpy(v10, v8, v9);
    a1[4] = (uint64_t)v11;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = (char *)operator new(v12 - v13);
    a1[6] = (uint64_t)v15;
    a1[7] = (uint64_t)v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[8] = (uint64_t)v16;
    memcpy(v15, v13, v14);
    a1[7] = (uint64_t)v16;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 9);
  v17 = (_BYTE *)*((_QWORD *)a2 + 10);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - v18);
    a1[9] = (uint64_t)v20;
    a1[10] = (uint64_t)v20;
    v21 = &v20[8 * (v19 >> 3)];
    a1[11] = (uint64_t)v21;
    memcpy(v20, v18, v19);
    a1[10] = (uint64_t)v21;
  }
  v22 = a2[6];
  v23 = a2[7];
  v24 = a2[8];
  __asm { FMOV            V4.2D, #1.0 }
  *((_OWORD *)a1 + 15) = _Q4;
  v30 = a1 + 30;
  v31 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)a1 + 11) = v31;
  *((_OWORD *)a1 + 6) = v22;
  *((_OWORD *)a1 + 7) = v23;
  *((_OWORD *)a1 + 8) = v24;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((int64x2_t *)a1 + 12) = v31;
  *((int64x2_t *)a1 + 13) = v31;
  v57 = a1 + 26;
  *((_OWORD *)a1 + 14) = xmmword_2102DB700;
  a1[32] = 0x3FF0000000000000;
  a1[33] = 0;
  v58 = a1 + 33;
  *((_OWORD *)a1 + 18) = _Q4;
  v59 = a1 + 36;
  a1[34] = 0;
  a1[35] = 0;
  a1[38] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 39) = 0u;
  v60 = a1 + 39;
  a1[49] = 0;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  a1[42] = 0x3FF0000000000000;
  v61 = a1 + 42;
  a1[46] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = _Q4;
  *((_OWORD *)a1 + 26) = 0u;
  v62 = _Q4;
  a1[55] = 0x3FF0000000000000;
  a1[58] = 0;
  a1[59] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  a1[64] = 0;
  sub_20F4E052C((uint64_t)(a1 + 66), a3);
  *((_DWORD *)a1 + 546) = 0;
  bzero(a1 + 274, 0x314uLL);
  *((_DWORD *)a1 + 750) = 0;
  *(_OWORD *)(a1 + 373) = 0u;
  *((_OWORD *)a1 + 188) = 0u;
  *((_DWORD *)a1 + 756) = 0;
  *(_OWORD *)(a1 + 379) = 0u;
  *((_DWORD *)a1 + 762) = 0;
  *((_OWORD *)a1 + 191) = 0u;
  *((_DWORD *)a1 + 768) = 0;
  *(_OWORD *)(a1 + 385) = 0u;
  *((_DWORD *)a1 + 774) = 0;
  *((_OWORD *)a1 + 194) = 0u;
  *((_OWORD *)a1 + 195) = 0u;
  *((_DWORD *)a1 + 784) = 1065353216;
  *((_BYTE *)a1 + 4704) = 0;
  *((_OWORD *)a1 + 293) = 0u;
  *((_OWORD *)a1 + 292) = 0u;
  *((_OWORD *)a1 + 291) = 0u;
  *((_OWORD *)a1 + 290) = 0u;
  *((_OWORD *)a1 + 289) = 0u;
  *((_OWORD *)a1 + 288) = 0u;
  *((_OWORD *)a1 + 287) = 0u;
  *((_OWORD *)a1 + 286) = 0u;
  *((_OWORD *)a1 + 285) = 0u;
  *((_OWORD *)a1 + 284) = 0u;
  *((_OWORD *)a1 + 283) = 0u;
  *((_OWORD *)a1 + 282) = 0u;
  *((_OWORD *)a1 + 281) = 0u;
  *((_OWORD *)a1 + 280) = 0u;
  *((_OWORD *)a1 + 279) = 0u;
  *((_OWORD *)a1 + 278) = 0u;
  *((_OWORD *)a1 + 277) = 0u;
  *((_OWORD *)a1 + 276) = 0u;
  *((_OWORD *)a1 + 275) = 0u;
  *((_OWORD *)a1 + 274) = 0u;
  *((_OWORD *)a1 + 273) = 0u;
  bzero(a1 + 726, 0x4A58uLL);
  *((_OWORD *)a1 + 200) = 0u;
  *((_OWORD *)a1 + 199) = 0u;
  *((_OWORD *)a1 + 198) = 0u;
  *((_OWORD *)a1 + 197) = 0u;
  a1[589] = (uint64_t)&unk_24CA00830;
  *((_OWORD *)a1 + 295) = v62;
  *((_OWORD *)a1 + 296) = v62;
  *((_OWORD *)a1 + 297) = v62;
  *((_OWORD *)a1 + 298) = v62;
  *((_OWORD *)a1 + 299) = v62;
  *((_OWORD *)a1 + 300) = v62;
  a1[604] = (uint64_t)&off_24CA008A0;
  *((_OWORD *)a1 + 301) = v62;
  bzero(a1 + 605, 0x3C8uLL);
  *((_BYTE *)a1 + 5808) = 1;
  *((_WORD *)a1 + 2905) = 257;
  sub_20F4EDD00((char *)a1 + 5816);
  *(_OWORD *)(a1 + 821) = 0u;
  *(_OWORD *)(a1 + 819) = 0u;
  *(_OWORD *)(a1 + 817) = 0u;
  *(_OWORD *)(a1 + 815) = 0u;
  *(_OWORD *)(a1 + 813) = 0u;
  *(_OWORD *)(a1 + 811) = 0u;
  *(_OWORD *)(a1 + 809) = 0u;
  *(_OWORD *)(a1 + 807) = 0u;
  *(_OWORD *)(a1 + 805) = 0u;
  *(_OWORD *)(a1 + 803) = 0u;
  *(_OWORD *)(a1 + 801) = 0u;
  *(_OWORD *)(a1 + 799) = 0u;
  *(uint64_t *)((char *)a1 + 6582) = 0;
  a1[837] = 0;
  *(_OWORD *)(a1 + 831) = 0u;
  *(_OWORD *)(a1 + 833) = 0u;
  *(_OWORD *)(a1 + 835) = 0u;
  *((_DWORD *)a1 + 1660) = 0;
  *((_OWORD *)a1 + 414) = 0u;
  *((_OWORD *)a1 + 413) = 0u;
  *((_BYTE *)a1 + 6600) = 0;
  a1[824] = 0;
  sub_20F4F48F8((uint64_t)(a1 + 838));
  a1[1762] = (uint64_t)(a1 + 946);
  a1[1763] = (uint64_t)(a1 + 1072);
  a1[1764] = (uint64_t)(a1 + 1198);
  a1[1765] = (uint64_t)(a1 + 1324);
  a1[1766] = (uint64_t)(a1 + 1450);
  a1[1767] = (uint64_t)(a1 + 1576);
  a1[1768] = (uint64_t)(a1 + 1702);
  a1[1755] = (uint64_t)(a1 + 928);
  a1[1756] = (uint64_t)(a1 + 1054);
  a1[1757] = (uint64_t)(a1 + 1180);
  a1[1758] = (uint64_t)(a1 + 1306);
  a1[1759] = (uint64_t)(a1 + 1432);
  a1[1760] = (uint64_t)(a1 + 1558);
  a1[1761] = (uint64_t)(a1 + 1684);
  a1[1748] = (uint64_t)(a1 + 910);
  a1[1749] = (uint64_t)(a1 + 1036);
  a1[1750] = (uint64_t)(a1 + 1162);
  a1[1751] = (uint64_t)(a1 + 1288);
  a1[1752] = (uint64_t)(a1 + 1414);
  a1[1753] = (uint64_t)(a1 + 1540);
  a1[1754] = (uint64_t)(a1 + 1666);
  a1[1741] = (uint64_t)(a1 + 892);
  a1[1742] = (uint64_t)(a1 + 1018);
  a1[1743] = (uint64_t)(a1 + 1144);
  a1[1744] = (uint64_t)(a1 + 1270);
  a1[1745] = (uint64_t)(a1 + 1396);
  a1[1746] = (uint64_t)(a1 + 1522);
  a1[1747] = (uint64_t)(a1 + 1648);
  a1[1734] = (uint64_t)(a1 + 874);
  a1[1735] = (uint64_t)(a1 + 1000);
  a1[1736] = (uint64_t)(a1 + 1126);
  a1[1737] = (uint64_t)(a1 + 1252);
  a1[1738] = (uint64_t)(a1 + 1378);
  a1[1739] = (uint64_t)(a1 + 1504);
  a1[1740] = (uint64_t)(a1 + 1630);
  a1[1727] = (uint64_t)(a1 + 856);
  a1[1728] = (uint64_t)(a1 + 982);
  a1[1729] = (uint64_t)(a1 + 1108);
  a1[1730] = (uint64_t)(a1 + 1234);
  a1[1731] = (uint64_t)(a1 + 1360);
  a1[1732] = (uint64_t)(a1 + 1486);
  a1[1733] = (uint64_t)(a1 + 1612);
  a1[1720] = v32;
  a1[1721] = (uint64_t)(a1 + 964);
  a1[1722] = (uint64_t)(a1 + 1090);
  a1[1723] = (uint64_t)(a1 + 1216);
  a1[1724] = (uint64_t)(a1 + 1342);
  a1[1725] = (uint64_t)(a1 + 1468);
  a1[1726] = (uint64_t)(a1 + 1594);
  *(_OWORD *)(a1 + 1769) = 0u;
  *(_OWORD *)(a1 + 1771) = 0u;
  *(_OWORD *)(a1 + 1773) = 0u;
  *(_OWORD *)(a1 + 1775) = 0u;
  *(_OWORD *)(a1 + 1777) = 0u;
  *(_OWORD *)(a1 + 1779) = 0u;
  *(_OWORD *)(a1 + 1781) = 0u;
  *(_OWORD *)(a1 + 1783) = 0u;
  *(_OWORD *)(a1 + 1785) = 0u;
  *(_OWORD *)(a1 + 1787) = 0u;
  a1[1789] = 0;
  a1[1790] = 0x3EE4F8B588E368F1;
  a1[1791] = (uint64_t)(a1 + 604);
  a1[1792] = (uint64_t)(a1 + 828);
  a1[1793] = (uint64_t)(a1 + 3084);
  bzero(a1 + 1794, 0x290uLL);
  a1[1945] = 0;
  *(_OWORD *)(a1 + 1943) = 0u;
  *(_OWORD *)(a1 + 1941) = 0u;
  *(_OWORD *)(a1 + 1939) = 0u;
  *(_OWORD *)(a1 + 1937) = 0u;
  *(_OWORD *)(a1 + 1935) = 0u;
  *(_OWORD *)(a1 + 1933) = 0u;
  *(_OWORD *)(a1 + 1931) = 0u;
  *(_OWORD *)(a1 + 1929) = 0u;
  *(_OWORD *)(a1 + 1927) = 0u;
  *(_OWORD *)(a1 + 1925) = 0u;
  *(_OWORD *)(a1 + 1923) = 0u;
  *(_OWORD *)(a1 + 1921) = 0u;
  *(_OWORD *)(a1 + 1919) = 0u;
  *(_OWORD *)(a1 + 1917) = 0u;
  *(_OWORD *)(a1 + 1915) = 0u;
  *(_OWORD *)(a1 + 1913) = 0u;
  *(_OWORD *)(a1 + 1911) = 0u;
  *(_OWORD *)(a1 + 1909) = 0u;
  *(_OWORD *)(a1 + 1907) = 0u;
  *(_OWORD *)(a1 + 1905) = 0u;
  *(_OWORD *)(a1 + 1903) = 0u;
  *(_OWORD *)(a1 + 1901) = 0u;
  *(_OWORD *)(a1 + 1899) = 0u;
  *(_OWORD *)(a1 + 1897) = 0u;
  *(_OWORD *)(a1 + 1895) = 0u;
  *(_OWORD *)(a1 + 1893) = 0u;
  *(_OWORD *)(a1 + 1891) = 0u;
  *(_OWORD *)(a1 + 1889) = 0u;
  *(_OWORD *)(a1 + 1887) = 0u;
  *(_OWORD *)(a1 + 1885) = 0u;
  *(_OWORD *)(a1 + 1883) = 0u;
  *((_DWORD *)a1 + 3898) = 0;
  *(_OWORD *)(a1 + 1947) = 0u;
  *((_OWORD *)a1 + 975) = 0u;
  *((_DWORD *)a1 + 3904) = 0;
  *(_OWORD *)(a1 + 1953) = 0u;
  *(_OWORD *)(a1 + 1955) = 0u;
  *(_OWORD *)(a1 + 1957) = 0u;
  a1[1959] = 0;
  sub_20F4F48F8((uint64_t)(a1 + 1960));
  a1[2884] = (uint64_t)(a1 + 2068);
  a1[2885] = (uint64_t)(a1 + 2194);
  a1[2886] = (uint64_t)(a1 + 2320);
  a1[2887] = (uint64_t)(a1 + 2446);
  a1[2888] = (uint64_t)(a1 + 2572);
  a1[2889] = (uint64_t)(a1 + 2698);
  a1[2890] = (uint64_t)(a1 + 2824);
  a1[2877] = (uint64_t)(a1 + 2050);
  a1[2878] = (uint64_t)(a1 + 2176);
  a1[2879] = (uint64_t)(a1 + 2302);
  a1[2880] = (uint64_t)(a1 + 2428);
  a1[2881] = (uint64_t)(a1 + 2554);
  a1[2882] = (uint64_t)(a1 + 2680);
  a1[2883] = (uint64_t)(a1 + 2806);
  a1[2870] = (uint64_t)(a1 + 2032);
  a1[2871] = (uint64_t)(a1 + 2158);
  a1[2872] = (uint64_t)(a1 + 2284);
  a1[2873] = (uint64_t)(a1 + 2410);
  a1[2874] = (uint64_t)(a1 + 2536);
  a1[2875] = (uint64_t)(a1 + 2662);
  a1[2876] = (uint64_t)(a1 + 2788);
  a1[2863] = (uint64_t)(a1 + 2014);
  a1[2864] = (uint64_t)(a1 + 2140);
  a1[2865] = (uint64_t)(a1 + 2266);
  a1[2866] = (uint64_t)(a1 + 2392);
  a1[2867] = (uint64_t)(a1 + 2518);
  a1[2868] = (uint64_t)(a1 + 2644);
  a1[2869] = (uint64_t)(a1 + 2770);
  a1[2856] = (uint64_t)(a1 + 1996);
  a1[2857] = (uint64_t)(a1 + 2122);
  a1[2858] = (uint64_t)(a1 + 2248);
  a1[2859] = (uint64_t)(a1 + 2374);
  a1[2860] = (uint64_t)(a1 + 2500);
  a1[2861] = (uint64_t)(a1 + 2626);
  a1[2862] = (uint64_t)(a1 + 2752);
  a1[2849] = (uint64_t)(a1 + 1978);
  a1[2850] = (uint64_t)(a1 + 2104);
  a1[2851] = (uint64_t)(a1 + 2230);
  a1[2852] = (uint64_t)(a1 + 2356);
  a1[2853] = (uint64_t)(a1 + 2482);
  a1[2854] = (uint64_t)(a1 + 2608);
  a1[2855] = (uint64_t)(a1 + 2734);
  a1[2842] = v33;
  a1[2843] = (uint64_t)(a1 + 2086);
  a1[2844] = (uint64_t)(a1 + 2212);
  a1[2845] = (uint64_t)(a1 + 2338);
  a1[2846] = (uint64_t)(a1 + 2464);
  a1[2847] = (uint64_t)(a1 + 2590);
  a1[2848] = (uint64_t)(a1 + 2716);
  *(_OWORD *)(a1 + 3061) = 0u;
  *(_OWORD *)(a1 + 3063) = 0u;
  *(_OWORD *)(a1 + 3065) = 0u;
  *(_OWORD *)(a1 + 3067) = 0u;
  *(_OWORD *)(a1 + 3069) = 0u;
  *(_OWORD *)(a1 + 3071) = 0u;
  *(_OWORD *)(a1 + 3073) = 0u;
  *(_OWORD *)(a1 + 3075) = 0u;
  *(_OWORD *)(a1 + 3077) = 0u;
  *(_OWORD *)(a1 + 3079) = 0u;
  a1[3081] = 0;
  *((_DWORD *)a1 + 6120) = 0;
  *((_OWORD *)a1 + 1529) = 0u;
  *((_OWORD *)a1 + 1528) = 0u;
  *((_OWORD *)a1 + 1527) = 0u;
  *((_OWORD *)a1 + 1526) = 0u;
  *((_OWORD *)a1 + 1525) = 0u;
  *((_OWORD *)a1 + 1524) = 0u;
  *((_OWORD *)a1 + 1523) = 0u;
  bzero(a1 + 2916, 0x40CuLL);
  *(_OWORD *)((char *)a1 + 23282) = 0u;
  *(_OWORD *)(a1 + 2909) = 0u;
  *(_OWORD *)(a1 + 2907) = 0u;
  *(_OWORD *)(a1 + 2905) = 0u;
  *(_OWORD *)(a1 + 2903) = 0u;
  *(_OWORD *)(a1 + 2901) = 0u;
  *(_OWORD *)(a1 + 2899) = 0u;
  *(_OWORD *)(a1 + 2897) = 0u;
  *(_OWORD *)(a1 + 2895) = 0u;
  *(_OWORD *)(a1 + 2893) = 0u;
  *(_OWORD *)(a1 + 2891) = 0u;
  a1[1946] = (uint64_t)&off_24CA01500;
  a1[3082] = (uint64_t)(a1 + 1791);
  a1[3083] = 0x3EE4F8B588E368F1;
  *((_OWORD *)a1 + 1542) = 0u;
  *((_DWORD *)a1 + 6172) = 0;
  *((_OWORD *)a1 + 1550) = 0u;
  *((_OWORD *)a1 + 1551) = 0u;
  a1[3104] = 0;
  *((_DWORD *)a1 + 6198) = 0;
  *(_OWORD *)(a1 + 3097) = 0u;
  *(_OWORD *)(a1 + 3095) = 0u;
  *(_OWORD *)(a1 + 3093) = 0u;
  *(_OWORD *)(a1 + 3091) = 0u;
  *(_OWORD *)(a1 + 3089) = 0u;
  *(_OWORD *)(a1 + 3087) = 0u;
  a1[589] = (uint64_t)off_24CA004B8;
  a1[3105] = 2;
  a1[3108] = 0;
  *((_OWORD *)a1 + 1553) = 0u;
  a1[3110] = 0xA00000001;
  *((_BYTE *)a1 + 24888) = 0;
  *((_OWORD *)a1 + 1556) = xmmword_21039D460;
  a1[3114] = 0x3EB0C6F7A0B5ED8DLL;
  *((_BYTE *)a1 + 24920) = 0;
  a1[3116] = 0x3FF7B8BAC710CB29;
  a1[3181] = (uint64_t)(a1 + 3117);
  *((_OWORD *)a1 + 1591) = xmmword_210378040;
  *((_WORD *)a1 + 12736) = 0;
  a1[3188] = 0;
  a1[3192] = 0;
  a1[3196] = 0;
  a1[3200] = 0;
  a1[3201] = 0xBFF0000000000000;
  *((_DWORD *)a1 + 6408) = 0;
  *((_OWORD *)a1 + 1601) = 0u;
  a1[3109] = (uint64_t)&off_24C9FCEF0;
  a1[3205] = 0x3EB0C6F7A0B5ED8DLL;
  a1[3206] = 0x3F50624DD2F1A9FCLL;
  *((_BYTE *)a1 + 25656) = 1;
  *((_OWORD *)a1 + 1604) = xmmword_2102DBD20;
  *((_OWORD *)a1 + 1605) = xmmword_2103B4940;
  a1[3212] = 0x4000000000000000;
  v34 = *a1;
  if (!*a1)
  {
LABEL_13:
    if (!a1[391])
      return a1;
    goto LABEL_14;
  }
  v35 = a1 + 51;
  if (*((_BYTE *)a1 + 1317))
  {
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_QWORD *)(v34 + 24);
    v81 = *(_OWORD *)(v34 + 32);
    v82 = *(_QWORD *)(v34 + 48);
    v38 = *(_QWORD *)(v34 + 56);
    v69 = *(_OWORD *)(v34 + 64);
    v70 = *(_QWORD *)(v34 + 80);
    v68 = *(_QWORD *)(v34 + 104);
    v67 = *(_OWORD *)(v34 + 88);
    v66 = *(_QWORD *)(v34 + 128);
    v65 = *(_OWORD *)(v34 + 112);
    v64 = *(_QWORD *)(v34 + 152);
    v63 = *(_OWORD *)(v34 + 136);
    v80 = *(_QWORD *)(v34 + 224);
    v78 = *(_OWORD *)(v34 + 192);
    v79 = *(_OWORD *)(v34 + 208);
    v76 = *(_OWORD *)(v34 + 160);
    v77 = *(_OWORD *)(v34 + 176);
    v75 = *(_QWORD *)(v34 + 296);
    v73 = *(_OWORD *)(v34 + 264);
    v74 = *(_OWORD *)(v34 + 280);
    v71 = *(_OWORD *)(v34 + 232);
    v72 = *(_OWORD *)(v34 + 248);
    v39 = *(double *)(v34 + 16) * *((double *)a1 + 166);
    *((double *)a1 + 22) = *(double *)v34 * *((double *)a1 + 165);
    a1[23] = v36;
    *((double *)a1 + 24) = v39;
    a1[25] = v37;
    *v57 = v81;
    a1[28] = v82;
    a1[29] = v38;
    a1[32] = v70;
    *v30 = v69;
    a1[35] = v68;
    *v58 = v67;
    a1[38] = v66;
    *v59 = v65;
    a1[41] = v64;
    *v60 = v63;
    a1[50] = v80;
    *((_OWORD *)a1 + 23) = v78;
    *((_OWORD *)a1 + 24) = v79;
    *v61 = v76;
    *((_OWORD *)a1 + 22) = v77;
    a1[59] = v75;
    *(_OWORD *)(a1 + 55) = v73;
    *(_OWORD *)(a1 + 57) = v74;
    *v35 = v71;
    *(_OWORD *)(a1 + 53) = v72;
    goto LABEL_13;
  }
  v45 = *(_OWORD *)(v34 + 16);
  *((_OWORD *)a1 + 11) = *(_OWORD *)v34;
  *((_OWORD *)a1 + 12) = v45;
  v46 = *(_OWORD *)(v34 + 32);
  a1[28] = *(_QWORD *)(v34 + 48);
  *v57 = v46;
  a1[29] = *(_QWORD *)(v34 + 56);
  v47 = *(_OWORD *)(v34 + 64);
  a1[32] = *(_QWORD *)(v34 + 80);
  *v30 = v47;
  v48 = *(_OWORD *)(v34 + 88);
  a1[35] = *(_QWORD *)(v34 + 104);
  *v58 = v48;
  v49 = *(_OWORD *)(v34 + 112);
  a1[38] = *(_QWORD *)(v34 + 128);
  *v59 = v49;
  v50 = *(_OWORD *)(v34 + 136);
  a1[41] = *(_QWORD *)(v34 + 152);
  *v60 = v50;
  v52 = *(_OWORD *)(v34 + 192);
  v51 = *(_OWORD *)(v34 + 208);
  v53 = *(_OWORD *)(v34 + 176);
  a1[50] = *(_QWORD *)(v34 + 224);
  *((_OWORD *)a1 + 23) = v52;
  *((_OWORD *)a1 + 24) = v51;
  *((_OWORD *)a1 + 22) = v53;
  *v61 = *(_OWORD *)(v34 + 160);
  v54 = *(_OWORD *)(v34 + 264);
  v55 = *(_OWORD *)(v34 + 280);
  v56 = *(_OWORD *)(v34 + 248);
  a1[59] = *(_QWORD *)(v34 + 296);
  *(_OWORD *)(a1 + 55) = v54;
  *(_OWORD *)(a1 + 57) = v55;
  *(_OWORD *)(a1 + 53) = v56;
  *v35 = *(_OWORD *)(v34 + 232);
  if (!a1[391])
    return a1;
LABEL_14:
  v40 = (_QWORD *)a1[390];
  if (v40)
  {
    do
    {
      v41 = (_QWORD *)*v40;
      operator delete(v40);
      v40 = v41;
    }
    while (v41);
  }
  a1[390] = 0;
  v42 = a1[389];
  if (v42)
  {
    for (i = 0; i != v42; ++i)
      *(_QWORD *)(a1[388] + 8 * i) = 0;
  }
  a1[391] = 0;
  return a1;
}

void sub_20F4E013C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v10 = *(void **)(v1 + 5752);
  if (v10)
  {
    *(_QWORD *)(v1 + 5760) = v10;
    operator delete(v10);
  }
  sub_20F4EE0E8((void **)(v1 + 5608));
  sub_20F4EE970(v7);
  sub_20F4FD380(v1 + 4536);
  sub_20F4FD380(v6);
  v11 = *(void **)(v1 + 3192);
  if (v11)
    operator delete(v11);
  v12 = *(void **)(v1 + 3168);
  if (v12)
  {
    *(_QWORD *)(v1 + 3176) = v12;
    operator delete(v12);
  }
  sub_20E8C25A8(v2);
  sub_20F0287BC(v5);
  sub_20F6304A4(v4);
  sub_20E86665C(v8 + 264);
  sub_20E8C3144(v3);
  v13 = *(void **)(v1 + 152);
  if (v13)
  {
    *(_QWORD *)(v1 + 160) = v13;
    operator delete(v13);
  }
  sub_20E8E270C((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_20F4E01E4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v3;
  if (*v3)
  {
    v1[10] = v6;
    operator delete(v6);
    v7 = *v2;
    if (!*v2)
    {
LABEL_3:
      v8 = *v4;
      if (!*v4)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[7] = v7;
  operator delete(v7);
  v8 = *v4;
  if (!*v4)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[4] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_20F4E0244()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20F4E0208);
  JUMPOUT(0x20F4E0200);
}

_QWORD *sub_20F4E0254(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  sub_20F2C539C(a1 + 3109);
  a1[589] = off_24CA004B8;
  v2 = a1[3106];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  a1[589] = off_24CA00600;
  v3 = a1[3100];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[3097];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[3094];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  sub_20F4ED57C((uint64_t)(a1 + 589));
  sub_20F4FD380((uint64_t)(a1 + 567));
  sub_20F4FD380((uint64_t)(a1 + 546));
  v6 = (void *)a1[399];
  if (v6)
    operator delete(v6);
  v7 = (void *)a1[396];
  if (v7)
  {
    a1[397] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[390];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[388];
  a1[388] = 0;
  if (v10)
    operator delete(v10);
  sub_20F0287BC(a1 + 274);
  sub_20F6304A4((uint64_t)(a1 + 66));
  v11 = (std::__shared_weak_count *)a1[64];
  if (!v11)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (char *)a1[60];
    if (!v14)
      goto LABEL_32;
  }
  else
  {
LABEL_21:
    v14 = (char *)a1[60];
    if (!v14)
      goto LABEL_32;
  }
  v15 = (char *)a1[61];
  v16 = v14;
  if (v15 != v14)
  {
    do
    {
      v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v15 -= 16;
    }
    while (v15 != v14);
    v16 = (char *)a1[60];
  }
  a1[61] = v14;
  operator delete(v16);
LABEL_32:
  v20 = (void *)a1[19];
  if (v20)
  {
    a1[20] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[9];
  if (v21)
  {
    a1[10] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[6];
  if (v22)
  {
    a1[7] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[3];
  if (v23)
  {
    a1[4] = v23;
    operator delete(v23);
  }
  return a1;
}

uint64_t sub_20F4E0484(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA004B8;
  v2 = a1[2517];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *a1 = off_24CA00600;
  v3 = a1[2511];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[2508];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[2505];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  return sub_20F4ED57C((uint64_t)a1);
}

uint64_t sub_20F4E052C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = sub_20F2C2630(a1, (__int128 *)a2);
  v5 = *(_OWORD *)(a2 + 728);
  v6 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(v4 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(v4 + 760) = v6;
  *(_OWORD *)(v4 + 728) = v5;
  memcpy((void *)(v4 + 776), (const void *)(a2 + 776), 0x21DuLL);
  if (*(char *)(a2 + 1343) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 1320), *(void **)(a2 + 1320), *(_QWORD *)(a2 + 1328));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 1320);
    *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a2 + 1336);
    *(_OWORD *)(a1 + 1320) = v7;
  }
  if (*(char *)(a2 + 1367) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 1344), *(void **)(a2 + 1344), *(_QWORD *)(a2 + 1352));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 1344);
    *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a2 + 1360);
    *(_OWORD *)(a1 + 1344) = v8;
  }
  v9 = (_BYTE *)(a1 + 1368);
  if (*(char *)(a2 + 1391) < 0)
  {
    sub_20E860C04(v9, *(void **)(a2 + 1368), *(_QWORD *)(a2 + 1376));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 1368);
    *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a2 + 1384);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1408) = *(_OWORD *)(a2 + 1408);
  *(_OWORD *)(a1 + 1392) = v11;
  v12 = *(_OWORD *)(a2 + 1424);
  v13 = *(_OWORD *)(a2 + 1440);
  v14 = *(_OWORD *)(a2 + 1456);
  *(_OWORD *)(a1 + 1472) = *(_OWORD *)(a2 + 1472);
  *(_OWORD *)(a1 + 1456) = v14;
  *(_OWORD *)(a1 + 1440) = v13;
  *(_OWORD *)(a1 + 1424) = v12;
  v15 = *(_OWORD *)(a2 + 1488);
  v16 = *(_OWORD *)(a2 + 1504);
  v17 = *(_OWORD *)(a2 + 1520);
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1520) = v17;
  *(_OWORD *)(a1 + 1504) = v16;
  *(_OWORD *)(a1 + 1488) = v15;
  v18 = *(_OWORD *)(a2 + 1552);
  v19 = *(_OWORD *)(a2 + 1568);
  v20 = *(_OWORD *)(a2 + 1584);
  *(_OWORD *)(a1 + 1600) = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1584) = v20;
  *(_OWORD *)(a1 + 1568) = v19;
  *(_OWORD *)(a1 + 1552) = v18;
  v21 = *(_OWORD *)(a2 + 1616);
  v22 = *(_OWORD *)(a2 + 1632);
  *(_QWORD *)(a1 + 1648) = *(_QWORD *)(a2 + 1648);
  *(_OWORD *)(a1 + 1632) = v22;
  *(_OWORD *)(a1 + 1616) = v21;
  return a1;
}

void sub_20F4E06A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 1367) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 1343) & 0x80000000) == 0)
    {
LABEL_3:
      sub_20F2B116C((_QWORD *)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 1343) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  sub_20F2B116C((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_20F4E0700(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F2B116C(v1);
  _Unwind_Resume(a1);
}

void sub_20F4E0714(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v5, "DenseSchur");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_20F4E07DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F4E0818(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __n128 v104;
  void **v105;
  unint64_t v106;
  size_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  float64x2_t v111;
  unsigned int *v112;
  int v113;
  int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  float64x2_t *v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  unsigned int *v124;
  unsigned int *v125;
  int v126;
  int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  __int128 v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  unsigned int *v142;
  int v143;
  int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  int v152;
  int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  float64x2_t *v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  unsigned int *v163;
  unsigned int *v164;
  int v165;
  int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  float64x2_t *v171;
  float64x2_t v172;
  float64x2_t v173;
  unsigned int *v174;
  unsigned int *v175;
  int v176;
  int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t v183;
  float64x2_t v184;
  unsigned int *v185;
  unsigned int *v186;
  int v187;
  int v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64_t v197;
  char v198;
  unsigned int *v200;
  unsigned int *v201;
  unsigned int *v202;
  int v203;
  char v204;
  int32x2_t v205;
  uint64_t v206;
  unsigned int v207;
  float64x2_t *v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  __int128 v217;
  uint64_t v218;
  float64x2_t v219;
  float64x2_t v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_20F58A66C(a1))
  {
    v2 = 1;
  }
  else if (*(_BYTE *)(a1 + 1873))
  {
    v2 = 0;
  }
  else
  {
    v3 = *(void **)(a1 + 2872);
    v4 = *(_QWORD *)(a1 + 2880) - (_QWORD)v3;
    if (v4 >= 1)
      bzero(v3, 8 * (((unint64_t)v4 >> 3) - ((unint64_t)v4 > 7)) + 8);
    v5 = *(void **)(a1 + 3880);
    v6 = *(_QWORD *)(a1 + 3888) - (_QWORD)v5;
    if (v6 >= 1)
      bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
    v7 = *(void **)(a1 + 4888);
    v8 = *(_QWORD *)(a1 + 4896) - (_QWORD)v7;
    if (v8 >= 1)
      bzero(v7, 8 * (((unint64_t)v8 >> 3) - ((unint64_t)v8 > 7)) + 8);
    v9 = *(void **)(a1 + 5896);
    v10 = *(_QWORD *)(a1 + 5904) - (_QWORD)v9;
    if (v10 >= 1)
      bzero(v9, 8 * (((unint64_t)v10 >> 3) - ((unint64_t)v10 > 7)) + 8);
    v11 = *(void **)(a1 + 6904);
    v12 = *(_QWORD *)(a1 + 6912) - (_QWORD)v11;
    if (v12 >= 1)
      bzero(v11, 8 * (((unint64_t)v12 >> 3) - ((unint64_t)v12 > 7)) + 8);
    v13 = *(void **)(a1 + 7912);
    v14 = *(_QWORD *)(a1 + 7920) - (_QWORD)v13;
    if (v14 >= 1)
      bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
    v15 = *(void **)(a1 + 8920);
    v16 = *(_QWORD *)(a1 + 8928) - (_QWORD)v15;
    if (v16 >= 1)
      bzero(v15, 8 * (((unint64_t)v16 >> 3) - ((unint64_t)v16 > 7)) + 8);
    v17 = *(void **)(a1 + 2728);
    v18 = *(_QWORD *)(a1 + 2736) - (_QWORD)v17;
    if (v18 >= 1)
      bzero(v17, 8 * (((unint64_t)v18 >> 3) - ((unint64_t)v18 > 7)) + 8);
    v19 = *(void **)(a1 + 3736);
    v20 = *(_QWORD *)(a1 + 3744) - (_QWORD)v19;
    if (v20 >= 1)
      bzero(v19, 8 * (((unint64_t)v20 >> 3) - ((unint64_t)v20 > 7)) + 8);
    v21 = *(void **)(a1 + 4744);
    v22 = *(_QWORD *)(a1 + 4752) - (_QWORD)v21;
    if (v22 >= 1)
      bzero(v21, 8 * (((unint64_t)v22 >> 3) - ((unint64_t)v22 > 7)) + 8);
    v23 = *(void **)(a1 + 5752);
    v24 = *(_QWORD *)(a1 + 5760) - (_QWORD)v23;
    if (v24 >= 1)
      bzero(v23, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
    v25 = *(void **)(a1 + 6760);
    v26 = *(_QWORD *)(a1 + 6768) - (_QWORD)v25;
    if (v26 >= 1)
      bzero(v25, 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    v27 = *(void **)(a1 + 7768);
    v28 = *(_QWORD *)(a1 + 7776) - (_QWORD)v27;
    if (v28 >= 1)
      bzero(v27, 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    v29 = *(void **)(a1 + 8776);
    v30 = *(_QWORD *)(a1 + 8784) - (_QWORD)v29;
    if (v30 >= 1)
      bzero(v29, 8 * (((unint64_t)v30 >> 3) - ((unint64_t)v30 > 7)) + 8);
    v31 = *(void **)(a1 + 2584);
    v32 = *(_QWORD *)(a1 + 2592) - (_QWORD)v31;
    if (v32 >= 1)
      bzero(v31, 8 * (((unint64_t)v32 >> 3) - ((unint64_t)v32 > 7)) + 8);
    v33 = *(void **)(a1 + 3592);
    v34 = *(_QWORD *)(a1 + 3600) - (_QWORD)v33;
    if (v34 >= 1)
      bzero(v33, 8 * (((unint64_t)v34 >> 3) - ((unint64_t)v34 > 7)) + 8);
    v35 = *(void **)(a1 + 4600);
    v36 = *(_QWORD *)(a1 + 4608) - (_QWORD)v35;
    if (v36 >= 1)
      bzero(v35, 8 * (((unint64_t)v36 >> 3) - ((unint64_t)v36 > 7)) + 8);
    v37 = *(void **)(a1 + 5608);
    v38 = *(_QWORD *)(a1 + 5616) - (_QWORD)v37;
    if (v38 >= 1)
      bzero(v37, 8 * (((unint64_t)v38 >> 3) - ((unint64_t)v38 > 7)) + 8);
    v39 = *(void **)(a1 + 6616);
    v40 = *(_QWORD *)(a1 + 6624) - (_QWORD)v39;
    if (v40 >= 1)
      bzero(v39, 8 * (((unint64_t)v40 >> 3) - ((unint64_t)v40 > 7)) + 8);
    v41 = *(void **)(a1 + 7624);
    v42 = *(_QWORD *)(a1 + 7632) - (_QWORD)v41;
    if (v42 >= 1)
      bzero(v41, 8 * (((unint64_t)v42 >> 3) - ((unint64_t)v42 > 7)) + 8);
    v43 = *(void **)(a1 + 8632);
    v44 = *(_QWORD *)(a1 + 8640) - (_QWORD)v43;
    if (v44 >= 1)
      bzero(v43, 8 * (((unint64_t)v44 >> 3) - ((unint64_t)v44 > 7)) + 8);
    v45 = *(void **)(a1 + 2440);
    v46 = *(_QWORD *)(a1 + 2448) - (_QWORD)v45;
    if (v46 >= 1)
      bzero(v45, 8 * (((unint64_t)v46 >> 3) - ((unint64_t)v46 > 7)) + 8);
    v47 = *(void **)(a1 + 3448);
    v48 = *(_QWORD *)(a1 + 3456) - (_QWORD)v47;
    if (v48 >= 1)
      bzero(v47, 8 * (((unint64_t)v48 >> 3) - ((unint64_t)v48 > 7)) + 8);
    v49 = *(void **)(a1 + 4456);
    v50 = *(_QWORD *)(a1 + 4464) - (_QWORD)v49;
    if (v50 >= 1)
      bzero(v49, 8 * (((unint64_t)v50 >> 3) - ((unint64_t)v50 > 7)) + 8);
    v51 = *(void **)(a1 + 5464);
    v52 = *(_QWORD *)(a1 + 5472) - (_QWORD)v51;
    if (v52 >= 1)
      bzero(v51, 8 * (((unint64_t)v52 >> 3) - ((unint64_t)v52 > 7)) + 8);
    v53 = *(void **)(a1 + 6472);
    v54 = *(_QWORD *)(a1 + 6480) - (_QWORD)v53;
    if (v54 >= 1)
      bzero(v53, 8 * (((unint64_t)v54 >> 3) - ((unint64_t)v54 > 7)) + 8);
    v55 = *(void **)(a1 + 7480);
    v56 = *(_QWORD *)(a1 + 7488) - (_QWORD)v55;
    if (v56 >= 1)
      bzero(v55, 8 * (((unint64_t)v56 >> 3) - ((unint64_t)v56 > 7)) + 8);
    v57 = *(void **)(a1 + 8488);
    v58 = *(_QWORD *)(a1 + 8496) - (_QWORD)v57;
    if (v58 >= 1)
      bzero(v57, 8 * (((unint64_t)v58 >> 3) - ((unint64_t)v58 > 7)) + 8);
    v59 = *(void **)(a1 + 2296);
    v60 = *(_QWORD *)(a1 + 2304) - (_QWORD)v59;
    if (v60 >= 1)
      bzero(v59, 8 * (((unint64_t)v60 >> 3) - ((unint64_t)v60 > 7)) + 8);
    v61 = *(void **)(a1 + 3304);
    v62 = *(_QWORD *)(a1 + 3312) - (_QWORD)v61;
    if (v62 >= 1)
      bzero(v61, 8 * (((unint64_t)v62 >> 3) - ((unint64_t)v62 > 7)) + 8);
    v63 = *(void **)(a1 + 4312);
    v64 = *(_QWORD *)(a1 + 4320) - (_QWORD)v63;
    if (v64 >= 1)
      bzero(v63, 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
    v65 = *(void **)(a1 + 5320);
    v66 = *(_QWORD *)(a1 + 5328) - (_QWORD)v65;
    if (v66 >= 1)
      bzero(v65, 8 * (((unint64_t)v66 >> 3) - ((unint64_t)v66 > 7)) + 8);
    v67 = *(void **)(a1 + 6328);
    v68 = *(_QWORD *)(a1 + 6336) - (_QWORD)v67;
    if (v68 >= 1)
      bzero(v67, 8 * (((unint64_t)v68 >> 3) - ((unint64_t)v68 > 7)) + 8);
    v69 = *(void **)(a1 + 7336);
    v70 = *(_QWORD *)(a1 + 7344) - (_QWORD)v69;
    if (v70 >= 1)
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
    v71 = *(void **)(a1 + 8344);
    v72 = *(_QWORD *)(a1 + 8352) - (_QWORD)v71;
    if (v72 >= 1)
      bzero(v71, 8 * (((unint64_t)v72 >> 3) - ((unint64_t)v72 > 7)) + 8);
    v73 = *(void **)(a1 + 2152);
    v74 = *(_QWORD *)(a1 + 2160) - (_QWORD)v73;
    if (v74 >= 1)
      bzero(v73, 8 * (((unint64_t)v74 >> 3) - ((unint64_t)v74 > 7)) + 8);
    v75 = *(void **)(a1 + 3160);
    v76 = *(_QWORD *)(a1 + 3168) - (_QWORD)v75;
    if (v76 >= 1)
      bzero(v75, 8 * (((unint64_t)v76 >> 3) - ((unint64_t)v76 > 7)) + 8);
    v77 = *(void **)(a1 + 4168);
    v78 = *(_QWORD *)(a1 + 4176) - (_QWORD)v77;
    if (v78 >= 1)
      bzero(v77, 8 * (((unint64_t)v78 >> 3) - ((unint64_t)v78 > 7)) + 8);
    v79 = *(void **)(a1 + 5176);
    v80 = *(_QWORD *)(a1 + 5184) - (_QWORD)v79;
    if (v80 >= 1)
      bzero(v79, 8 * (((unint64_t)v80 >> 3) - ((unint64_t)v80 > 7)) + 8);
    v81 = *(void **)(a1 + 6184);
    v82 = *(_QWORD *)(a1 + 6192) - (_QWORD)v81;
    if (v82 >= 1)
      bzero(v81, 8 * (((unint64_t)v82 >> 3) - ((unint64_t)v82 > 7)) + 8);
    v83 = *(void **)(a1 + 7192);
    v84 = *(_QWORD *)(a1 + 7200) - (_QWORD)v83;
    if (v84 >= 1)
      bzero(v83, 8 * (((unint64_t)v84 >> 3) - ((unint64_t)v84 > 7)) + 8);
    v85 = *(void **)(a1 + 8200);
    v86 = *(_QWORD *)(a1 + 8208) - (_QWORD)v85;
    if (v86 >= 1)
      bzero(v85, 8 * (((unint64_t)v86 >> 3) - ((unint64_t)v86 > 7)) + 8);
    v87 = *(void **)(a1 + 2008);
    v88 = *(_QWORD *)(a1 + 2016) - (_QWORD)v87;
    if (v88 >= 1)
      bzero(v87, 8 * (((unint64_t)v88 >> 3) - ((unint64_t)v88 > 7)) + 8);
    v89 = *(void **)(a1 + 3016);
    v90 = *(_QWORD *)(a1 + 3024) - (_QWORD)v89;
    if (v90 >= 1)
      bzero(v89, 8 * (((unint64_t)v90 >> 3) - ((unint64_t)v90 > 7)) + 8);
    v91 = *(void **)(a1 + 4024);
    v92 = *(_QWORD *)(a1 + 4032) - (_QWORD)v91;
    if (v92 >= 1)
      bzero(v91, 8 * (((unint64_t)v92 >> 3) - ((unint64_t)v92 > 7)) + 8);
    v93 = *(void **)(a1 + 5032);
    v94 = *(_QWORD *)(a1 + 5040) - (_QWORD)v93;
    if (v94 >= 1)
      bzero(v93, 8 * (((unint64_t)v94 >> 3) - ((unint64_t)v94 > 7)) + 8);
    v95 = *(void **)(a1 + 6040);
    v96 = *(_QWORD *)(a1 + 6048) - (_QWORD)v95;
    if (v96 >= 1)
      bzero(v95, 8 * (((unint64_t)v96 >> 3) - ((unint64_t)v96 > 7)) + 8);
    v97 = *(void **)(a1 + 7048);
    v98 = *(_QWORD *)(a1 + 7056) - (_QWORD)v97;
    if (v98 >= 1)
      bzero(v97, 8 * (((unint64_t)v98 >> 3) - ((unint64_t)v98 > 7)) + 8);
    v99 = *(void **)(a1 + 8056);
    v100 = *(_QWORD *)(a1 + 8064) - (_QWORD)v99;
    if (v100 >= 1)
      bzero(v99, 8 * (((unint64_t)v100 >> 3) - ((unint64_t)v100 > 7)) + 8);
    v101 = *(unsigned int *)(a1 + 1928);
    if ((_DWORD)v101)
      bzero(*(void **)(a1 + 1912), 8 * v101);
    v102 = *(_DWORD *)(a1 + 1904);
    if (v102 == 1)
    {
      v103 = *(unsigned int *)(a1 + 19976);
      if ((_DWORD)v103)
        bzero(*(void **)(a1 + 19960), 8 * v103);
    }
    if (((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
       + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2)
       + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
       + ((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
       + ((*(_QWORD *)(a1 + 18520) - *(_QWORD *)(a1 + 18512)) >> 2)
       + ((*(_QWORD *)(a1 + 18544) - *(_QWORD *)(a1 + 18536)) >> 2)
       + ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2))
    {
      kdebug_trace();
      v104 = sub_20F597B84(a1 + 1912, a1 + 10888, (char **)(a1 + 19128), a1 + 19296);
      v105 = (void **)(a1 + 19632);
      v106 = 9 * ((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
           + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
           + ((*(_DWORD *)(a1 + 18520) - *(_DWORD *)(a1 + 18512)) & 0xFFFFFFFC)
           + 6
           * (((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
            + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2))
           + ((*(_DWORD *)(a1 + 18544) - *(_DWORD *)(a1 + 18536)) & 0xFFFFFFFC)
           + 3 * ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2);
      *(_DWORD *)(a1 + 19648) = v106;
      if (*(_QWORD *)(a1 + 19640) < v106)
      {
        if (*v105)
          MEMORY[0x212BC6368](*v105, 0x1000C8000313F17, v104);
        *(_QWORD *)(a1 + 19632) = 0;
        v107 = (8 * v106 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(a1 + 19640) = v107 >> 3;
        *v105 = operator new(v107, (std::align_val_t)0x20uLL);
      }
      v108 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 10856) + 24))(a1 + 10856);
      sub_20F596E30(v108, a1 + 18416, (_QWORD *)(a1 + 19632));
      if (((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
         + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2)
         + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
         + ((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
         + ((*(_QWORD *)(a1 + 18520) - *(_QWORD *)(a1 + 18512)) >> 2)
         + ((*(_QWORD *)(a1 + 18544) - *(_QWORD *)(a1 + 18536)) >> 2)
         + ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2))
      {
        sub_20F5BBBDC((_QWORD *)(a1 + 10968), (void **)(a1 + 19656));
        sub_20F20B6B0(a1 + 19656);
        v109 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 10856) + 32))(a1 + 10856);
        v110 = a1 + 19752;
        sub_20F5BC34C(v109, a1 + 19752, a1 + 18416, a1 + 10864, v111);
        v112 = *(unsigned int **)(a1 + 18416);
        v200 = *(unsigned int **)(a1 + 18424);
        if (v112 != v200)
        {
          v113 = 0;
          v114 = 0;
          v115 = *(unsigned int **)(a1 + 9440);
          do
          {
            if (*v115 < *v112)
            {
              do
              {
                v116 = v115[1];
                ++v115;
                ++v113;
              }
              while (v116 < *v112);
            }
            v117 = *(_DWORD *)(a1 + 10940) + 6 * v114;
            v118 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v118 + 8 * v117;
            v207 = v117;
            v119 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1964) + 6 * v113));
            v120 = *v119;
            v121 = v119[2];
            v215 = v119[1];
            v216 = v121;
            v214 = v120;
            v208 = &v214;
            *(_QWORD *)&v219.f64[1] = &v205;
            *(_QWORD *)&v220.f64[0] = a1 + 19752;
            v220.f64[1] = 1.0;
            sub_20F3DA5F4(&v209, (uint64_t)&v219);
            v122 = vsubq_f64(*v208, v209);
            v123 = vsubq_f64(v208[2], v211);
            v119[1] = vsubq_f64(v208[1], v210);
            v119[2] = v123;
            *v119 = v122;
            ++v112;
            ++v114;
          }
          while (v112 != v200);
        }
        v124 = *(unsigned int **)(a1 + 18440);
        v125 = *(unsigned int **)(a1 + 18448);
        if (v124 != v125)
        {
          v126 = 0;
          v127 = 0;
          v128 = *(unsigned int **)(a1 + 9464);
          do
          {
            if (*v128 < *v124)
            {
              do
              {
                v129 = v128[1];
                ++v128;
                ++v126;
              }
              while (v129 < *v124);
            }
            v130 = *(_DWORD *)(a1 + 10944) + 9 * v127;
            v131 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v131 + 8 * v130;
            v207 = v130;
            v132 = *(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1968) + 9 * v126);
            v133 = *(float64x2_t *)v132;
            v134 = *(float64x2_t *)(v132 + 16);
            v135 = *(float64x2_t *)(v132 + 32);
            v136 = *(_OWORD *)(v132 + 48);
            v218 = *(_QWORD *)(v132 + 64);
            v216 = v135;
            v217 = v136;
            v215 = v134;
            v214 = v133;
            v208 = &v214;
            *(_QWORD *)&v219.f64[1] = &v205;
            *(_QWORD *)&v220.f64[0] = a1 + 19752;
            v220.f64[1] = 1.0;
            sub_20F5BCC94((uint64_t)&v209, (uint64_t)&v219);
            v137.f64[0] = v208[4].f64[0];
            v138.f64[0] = v213;
            v139 = vsubq_f64(*v208, v209);
            v140 = vsubq_f64(v208[3], v212);
            v141 = vsubq_f64(v208[1], v210);
            *(float64x2_t *)(v132 + 32) = vsubq_f64(v208[2], v211);
            *(float64x2_t *)(v132 + 48) = v140;
            *(float64x2_t *)v132 = v139;
            *(float64x2_t *)(v132 + 16) = v141;
            *(_QWORD *)(v132 + 64) = *(_OWORD *)&vsubq_f64(v137, v138);
            ++v124;
            ++v127;
          }
          while (v124 != v125);
        }
        v142 = *(unsigned int **)(a1 + 18464);
        v201 = *(unsigned int **)(a1 + 18472);
        if (v142 != v201)
        {
          v143 = 0;
          v144 = 0;
          v145 = *(unsigned int **)(a1 + 9488);
          do
          {
            if (*v145 < *v142)
            {
              do
              {
                v146 = v145[1];
                ++v145;
                ++v143;
              }
              while (v146 < *v142);
            }
            v147 = *(_DWORD *)(a1 + 10948) + v144;
            v148 = *(_QWORD *)(a1 + 19656);
            *(int32x2_t *)&v219.f64[0] = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            *(_QWORD *)&v219.f64[1] = v148 + 8 * v147;
            LODWORD(v220.f64[0]) = v147;
            v149 = (*(_DWORD *)(a1 + 1972) + v143);
            v150 = *(_QWORD *)(a1 + 1912);
            v205 = *(int32x2_t *)(v150 + 8 * v149);
            *(_QWORD *)&v214.f64[0] = &v205;
            *(_QWORD *)&v209.f64[0] = &v219;
            *(_QWORD *)&v209.f64[1] = a1 + 19752;
            v210.f64[0] = 1.0;
            sub_20F2BF1EC(&v214.f64[1], (uint64_t)&v208);
            *(double *)(v150 + 8 * v149) = **(double **)&v214.f64[0] - v214.f64[1];
            ++v142;
            ++v144;
            v110 = a1 + 19752;
          }
          while (v142 != v201);
        }
        v151 = *(unsigned int **)(a1 + 18488);
        v202 = *(unsigned int **)(a1 + 18496);
        if (v151 != v202)
        {
          v152 = 0;
          v153 = 0;
          v154 = *(unsigned int **)(a1 + 9512);
          do
          {
            if (*v154 < *v151)
            {
              do
              {
                v155 = v154[1];
                ++v154;
                ++v152;
              }
              while (v155 < *v151);
            }
            v156 = *(_DWORD *)(a1 + 10952) + 6 * v153;
            v157 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v157 + 8 * v156;
            v207 = v156;
            v158 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1976) + 6 * v152));
            v159 = *v158;
            v160 = v158[2];
            v215 = v158[1];
            v216 = v160;
            v214 = v159;
            v208 = &v214;
            *(_QWORD *)&v219.f64[1] = &v205;
            *(_QWORD *)&v220.f64[0] = v110;
            v220.f64[1] = 1.0;
            sub_20F3DA5F4(&v209, (uint64_t)&v219);
            v161 = vsubq_f64(*v208, v209);
            v162 = vsubq_f64(v208[2], v211);
            v158[1] = vsubq_f64(v208[1], v210);
            v158[2] = v162;
            *v158 = v161;
            ++v151;
            ++v153;
          }
          while (v151 != v202);
        }
        v163 = *(unsigned int **)(a1 + 18512);
        v164 = *(unsigned int **)(a1 + 18520);
        if (v163 != v164)
        {
          v165 = 0;
          v166 = 0;
          v167 = *(unsigned int **)(a1 + 9536);
          do
          {
            if (*v167 < *v163)
            {
              do
              {
                v168 = v167[1];
                ++v167;
                ++v165;
              }
              while (v168 < *v163);
            }
            v169 = *(_DWORD *)(a1 + 10956) + 4 * v166;
            v170 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v170 + 8 * v169;
            v207 = v169;
            v171 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1980) + 4 * v165));
            v172 = *v171;
            v220 = v171[1];
            v219 = v172;
            v208 = &v219;
            *(_QWORD *)&v214.f64[1] = &v205;
            *(_QWORD *)&v215.f64[0] = v110;
            v215.f64[1] = 1.0;
            sub_20F3DA534(&v209, (uint64_t)&v214);
            v173 = vsubq_f64(v208[1], v210);
            *v171 = vsubq_f64(*v208, v209);
            v171[1] = v173;
            ++v163;
            ++v166;
          }
          while (v163 != v164);
        }
        v174 = *(unsigned int **)(a1 + 18536);
        v175 = *(unsigned int **)(a1 + 18544);
        if (v174 != v175)
        {
          v176 = 0;
          v177 = 0;
          v178 = *(unsigned int **)(a1 + 9560);
          do
          {
            if (*v178 < *v174)
            {
              do
              {
                v179 = v178[1];
                ++v178;
                ++v176;
              }
              while (v179 < *v174);
            }
            v180 = *(_DWORD *)(a1 + 10960) + 4 * v177;
            v181 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v181 + 8 * v180;
            v207 = v180;
            v182 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1984) + 4 * v176));
            v183 = *v182;
            v220 = v182[1];
            v219 = v183;
            v208 = &v219;
            *(_QWORD *)&v214.f64[1] = &v205;
            *(_QWORD *)&v215.f64[0] = v110;
            v215.f64[1] = 1.0;
            sub_20F3DA534(&v209, (uint64_t)&v214);
            v184 = vsubq_f64(v208[1], v210);
            *v182 = vsubq_f64(*v208, v209);
            v182[1] = v184;
            ++v174;
            ++v177;
          }
          while (v174 != v175);
        }
        v185 = *(unsigned int **)(a1 + 18560);
        v186 = *(unsigned int **)(a1 + 18568);
        if (v185 != v186)
        {
          v187 = 0;
          v188 = 0;
          v189 = *(unsigned int **)(a1 + 9584);
          do
          {
            if (*v189 < *v185)
            {
              do
              {
                v190 = v189[1];
                ++v189;
                ++v187;
              }
              while (v190 < *v185);
            }
            v191 = *(_DWORD *)(a1 + 10964) + 3 * v188;
            v192 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v192 + 8 * v191;
            v207 = v191;
            v193 = *(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1988) + 3 * v187);
            v194 = *(float64x2_t *)v193;
            v220.f64[0] = *(float64_t *)(v193 + 16);
            v219 = v194;
            v208 = &v219;
            *(_QWORD *)&v214.f64[1] = &v205;
            *(_QWORD *)&v215.f64[0] = v110;
            v215.f64[1] = 1.0;
            sub_20F3A2AA0(&v209, (uint64_t)&v214);
            v195.f64[0] = v208[1].f64[0];
            v196.f64[0] = v210.f64[0];
            *(float64x2_t *)v193 = vsubq_f64(*v208, v209);
            *(_QWORD *)(v193 + 16) = *(_OWORD *)&vsubq_f64(v195, v196);
            ++v185;
            ++v188;
          }
          while (v185 != v186);
        }
      }
      kdebug_trace();
      v102 = *(_DWORD *)(a1 + 1904);
    }
    v197 = *(double *)(a1 + 9608);
    v198 = *(_BYTE *)(a1 + 1888);
    v214.f64[0] = *(float64_t *)(a1 + 1896);
    v219.f64[0] = v197;
    v204 = v198;
    v205.i32[0] = 2;
    v203 = v102;
    v208 = (float64x2_t *)(a1 + 9616);
    *(_QWORD *)&v209.f64[0] = &v203;
    *(_QWORD *)&v209.f64[1] = a1 + 8;
    *(_QWORD *)&v210.f64[0] = &v205;
    *(_QWORD *)&v210.f64[1] = &v204;
    *(_QWORD *)&v211.f64[0] = &v214;
    *(_QWORD *)&v211.f64[1] = &v219;
    sub_20F5BCD70(&v208);
    v2 = 0;
    *(_WORD *)(a1 + 1873) = 1;
  }
  kdebug_trace();
  return v2;
}

void sub_20F4E1C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F4E1C68(uint64_t a1, void **a2)
{
  uint64_t v4;
  char v5;
  unsigned int *v6;
  void **v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  __int128 v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int8 *v52;
  int64x2_t *v53;
  __int8 *v54;
  int64x2_t *v55;
  __int8 *v56;
  unint64_t v57;
  unsigned int v58;
  size_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  int64x2_t v69;
  int64x2_t *v70;
  __int128 v71;
  uint64_t v72;
  int64x2_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  int64x2_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int8 *v81;
  int64x2_t *v82;
  __int8 *v83;
  int64x2_t *v84;
  __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64x2_t *v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t *v102;
  int64x2_t *v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  int64x2_t v112;
  int64x2_t *v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  uint64_t v124;
  __int128 v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t *v128;
  int64x2_t *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64x2_t v135;
  int64x2_t *v136;
  __int128 v137;
  uint64_t v138;
  int64x2_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  int64x2_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  int64x2_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  int64x2_t v151;
  uint64_t v152;
  __int8 *v153;
  int64x2_t *v154;
  __int8 *v155;
  int64x2_t *v156;
  __int8 *v157;
  int64x2_t *v158;
  __int8 *v159;
  int64x2_t *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int *v168;
  int64x2_t v169;
  int64x2_t *v170;
  __int128 v171;
  uint64_t v172;
  int64x2_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  int64x2_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  int64x2_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  int64x2_t v185;
  uint64_t v186;
  __int8 *v187;
  int64x2_t *v188;
  __int8 *v189;
  int64x2_t *v190;
  __int8 *v191;
  int64x2_t *v192;
  __int8 *v193;
  int64x2_t *v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int64x2_t v200;
  int64x2_t *v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  uint64_t v212;
  __int128 v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t *v216;
  int64x2_t *v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int *v225;
  int64x2_t *v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t *v237;
  int64x2_t *v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64x2_t v244;
  int64x2_t *v245;
  __int128 v246;
  uint64_t v247;
  int64x2_t v248;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  int64x2_t v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  __int8 *v256;
  int64x2_t *v257;
  __int8 *v258;
  int64x2_t *v259;
  __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int *v268;
  int8x16_t *v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int8x16_t v275;
  uint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int *v286;
  int64x2_t *v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t *v295;
  int64x2_t *v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int64x2_t v302;
  int64x2_t *v303;
  __int128 v304;
  uint64_t v305;
  int64x2_t v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  __int8 *v310;
  int64x2_t *v311;
  __int8 *v312;
  unint64_t v313;
  unint64_t v314;
  unsigned int *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int *v319;
  unsigned int *v320;
  int64x2_t v321;
  int64x2_t *v322;
  __int128 v323;
  uint64_t v324;
  int64x2_t v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  int64x2_t v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  __int8 *v333;
  int64x2_t *v334;
  __int8 *v335;
  int64x2_t *v336;
  __int8 *v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int64x2_t *v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t *v354;
  int64x2_t *v355;
  unint64_t v356;
  unint64_t v357;
  unsigned int *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int *v362;
  unsigned int *v363;
  int64x2_t *v364;
  int64x2_t v365;
  int64x2_t v366;
  int64x2_t v367;
  int64x2_t v368;
  int64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t *v372;
  int64x2_t *v373;
  unsigned int v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int64x2_t v379;
  int64x2_t *v380;
  __int128 v381;
  uint64_t v382;
  int64x2_t v383;
  uint64_t v384;
  __int128 v385;
  uint64_t v386;
  __int8 *v387;
  int64x2_t *v388;
  __int8 *v389;
  unint64_t v390;
  unint64_t v391;
  unsigned int *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int *v396;
  unsigned int *v397;
  int64x2_t v398;
  int64x2_t *v399;
  __int128 v400;
  uint64_t v401;
  int64x2_t v402;
  uint64_t v403;
  __int128 v404;
  uint64_t v405;
  __int8 *v406;
  int64x2_t *v407;
  __int8 *v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int64x2_t *v414;
  int64x2_t v415;
  int64x2_t v416;
  int64x2_t v417;
  int64x2_t v418;
  int64x2_t v419;
  int64x2_t v420;
  int64x2_t v421;
  int64x2_t *v422;
  int64x2_t *v423;
  unint64_t v424;
  unint64_t v425;
  unsigned int *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int *v430;
  unsigned int *v431;
  uint64_t v432;
  int64x2_t *v433;
  int8x16_t v434;
  unint64_t v435;
  int64x2_t v436;
  uint64_t v437;
  __int128 v438;
  int64x2_t v439;
  int64x2_t v440;
  int64x2_t *v441;
  uint64_t v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int64x2_t *v448;
  int64x2_t v449;
  __int128 v450;
  uint64_t v451;
  __int8 *v452;
  unint64_t v453;
  unint64_t v454;
  unsigned int *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int *v459;
  unsigned int *v460;
  int64x2_t v461;
  int64x2_t *v462;
  __int128 v463;
  uint64_t v464;
  int64x2_t v465;
  uint64_t v466;
  __int128 v467;
  uint64_t v468;
  __int8 *v469;
  int64x2_t *v470;
  __int8 *v471;
  unsigned int v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int64x2_t *v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t v483;
  int64x2_t v484;
  int64x2_t *v485;
  int64x2_t *v486;
  unint64_t v487;
  unint64_t v488;
  unsigned int *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unsigned int *v493;
  unsigned int *v494;
  int64x2_t *v495;
  int64x2_t v496;
  int64x2_t v497;
  int64x2_t v498;
  int64x2_t v499;
  int64x2_t v500;
  int64x2_t v501;
  int64x2_t v502;
  int64x2_t v503;
  int64x2_t v504;
  int64x2_t v505;
  int64x2_t v506;
  int64x2_t v507;
  int64x2_t v508;
  int64x2_t v509;
  int64x2_t v510;
  int64x2_t *v511;
  int64x2_t *v512;
  int64x2_t *v513;
  unsigned int v514;
  unsigned int v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  __int128 v519;
  _OWORD *v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  _OWORD *v531;
  _OWORD *v532;
  _OWORD *v533;
  _OWORD *v534;
  _OWORD *v535;
  unint64_t v536;
  unint64_t v537;
  unsigned int *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unsigned int *v542;
  unsigned int *v543;
  uint64_t v544;
  int64x2_t *v545;
  int64x2_t v546;
  __int128 v547;
  uint64_t v548;
  uint64_t v549;
  int8x16_t v550;
  unint64_t v551;
  __int8 *v552;
  uint64_t v553;
  unsigned int v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int64x2_t *v559;
  int64x2_t v560;
  __int128 v561;
  int64x2_t v562;
  int64x2_t v563;
  int64x2_t *v564;
  unint64_t v565;
  unint64_t v566;
  unsigned int *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unsigned int *v571;
  unsigned int *v572;
  int64x2_t v573;
  int64x2_t *v574;
  int64x2_t v575;
  int64x2_t v576;
  int64x2_t v577;
  int64x2_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int64x2_t v581;
  int64x2_t v582;
  __int128 v583;
  __int128 v584;
  int64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  int64x2_t v588;
  int64x2_t v589;
  int64x2_t v590;
  int64x2_t v591;
  int64x2_t v592;
  int64x2_t v593;
  int64x2_t *v594;
  int64x2_t *v595;
  int64x2_t *v596;
  unsigned int v597;
  unsigned int v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  __int128 v602;
  _OWORD *v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  _OWORD *v620;
  _OWORD *v621;
  _OWORD *v622;
  _OWORD *v623;
  _OWORD *v624;
  _OWORD *v625;
  _OWORD *v626;
  _OWORD *v627;
  unint64_t v628;
  unint64_t v629;
  unsigned int *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unsigned int *v634;
  unsigned int *v635;
  __int128 v636;
  _OWORD *v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  _OWORD *v648;
  _OWORD *v649;
  _OWORD *v650;
  _OWORD *v651;
  _OWORD *v652;
  unsigned int v653;
  unsigned int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int64x2_t *v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  int64x2_t v668;
  int64x2_t v669;
  int64x2_t v670;
  int64x2_t v671;
  int64x2_t v672;
  int64x2_t v673;
  int64x2_t *v674;
  int64x2_t *v675;
  int64x2_t *v676;
  unint64_t v677;
  unint64_t v678;
  unsigned int *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unsigned int *v683;
  unsigned int *v684;
  _QWORD *v685;
  unsigned int v686;
  unsigned int v687;
  int8x16_t *v688;
  uint64_t v689;
  uint64_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t *v693;
  unint64_t v694;
  unint64_t v695;
  unsigned int *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unsigned int *v700;
  unsigned int *v701;
  __int128 v702;
  _OWORD *v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  _OWORD *v720;
  _OWORD *v721;
  _OWORD *v722;
  _OWORD *v723;
  _OWORD *v724;
  _OWORD *v725;
  _OWORD *v726;
  _OWORD *v727;
  unsigned int v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int64x2_t v733;
  int64x2_t *v734;
  int64x2_t v735;
  int64x2_t v736;
  int64x2_t v737;
  int64x2_t v738;
  int64x2_t v739;
  int64x2_t v740;
  int64x2_t v741;
  int64x2_t v742;
  __int128 v743;
  __int128 v744;
  int64x2_t v745;
  int64x2_t v746;
  int64x2_t v747;
  int64x2_t v748;
  int64x2_t v749;
  int64x2_t v750;
  int64x2_t v751;
  int64x2_t v752;
  int64x2_t v753;
  int64x2_t *v754;
  int64x2_t *v755;
  int64x2_t *v756;
  unint64_t v757;
  unint64_t v758;
  unsigned int *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unsigned int *v763;
  unsigned int *v764;
  int64x2_t *v765;
  int64x2_t v766;
  int64x2_t v767;
  int64x2_t v768;
  int64x2_t v769;
  int64x2_t v770;
  int64x2_t v771;
  int64x2_t v772;
  int64x2_t v773;
  int64x2_t v774;
  int64x2_t v775;
  int64x2_t v776;
  int64x2_t v777;
  int64x2_t v778;
  int64x2_t v779;
  int64x2_t v780;
  int64x2_t *v781;
  int64x2_t *v782;
  int64x2_t *v783;
  unsigned int v784;
  unsigned int v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  __int128 v789;
  _OWORD *v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  _OWORD *v801;
  _OWORD *v802;
  _OWORD *v803;
  _OWORD *v804;
  _OWORD *v805;
  unint64_t v806;
  unint64_t v807;
  unsigned int *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unsigned int *v812;
  unsigned int *v813;
  int8x16_t *v814;
  unsigned int v815;
  unsigned int v816;
  int8x16_t *v817;
  uint64_t v818;
  uint64_t v819;
  int8x16_t v820;
  int8x16_t v821;
  _QWORD *v822;
  unint64_t v823;
  unint64_t v824;
  unsigned int *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  unsigned int *v829;
  unsigned int *v830;
  int64x2_t *v831;
  int64x2_t v832;
  int64x2_t v833;
  int64x2_t v834;
  int64x2_t v835;
  int64x2_t v836;
  int64x2_t v837;
  int64x2_t v838;
  int64x2_t v839;
  int64x2_t v840;
  int64x2_t v841;
  int64x2_t v842;
  int64x2_t v843;
  int64x2_t *v844;
  int64x2_t *v845;
  int64x2_t *v846;
  unsigned int v847;
  unsigned int v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int64x2_t v852;
  __int128 v853;
  __int128 v854;
  __int8 *v855;
  unint64_t v856;
  unint64_t v857;
  unsigned int *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unsigned int *v862;
  unsigned int *v863;
  __int128 v864;
  _OWORD *v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  _OWORD *v876;
  _OWORD *v877;
  _OWORD *v878;
  _OWORD *v879;
  _OWORD *v880;
  unsigned int v881;
  unsigned int v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  int64x2_t *v886;
  int64x2_t v887;
  int64x2_t v888;
  int64x2_t v889;
  int64x2_t v890;
  int64x2_t v891;
  int64x2_t v892;
  int64x2_t v893;
  int64x2_t v894;
  int64x2_t v895;
  int64x2_t v896;
  int64x2_t v897;
  int64x2_t v898;
  int64x2_t v899;
  int64x2_t v900;
  int64x2_t v901;
  int64x2_t *v902;
  int64x2_t *v903;
  int64x2_t *v904;
  unint64_t v905;
  unint64_t v906;
  unsigned int *v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  unsigned int *v911;
  unsigned int *v912;
  int64x2_t *v913;
  int64x2_t v914;
  int64x2_t v915;
  int64x2_t v916;
  int64x2_t v917;
  int64x2_t v918;
  int64x2_t v919;
  int64x2_t v920;
  int64x2_t v921;
  int64x2_t v922;
  int64x2_t v923;
  int64x2_t v924;
  int64x2_t v925;
  int64x2_t *v926;
  int64x2_t *v927;
  int64x2_t *v928;
  unsigned int v929;
  unsigned int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  int64x2_t v934;
  __int128 v935;
  __int128 v936;
  __int8 *v937;
  unint64_t v938;
  unint64_t v939;
  unsigned int *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unsigned int *v944;
  unsigned int *v945;
  int64x2_t v946;
  int64x2_t *v947;
  __int128 v948;
  __int128 v949;
  int64x2_t v950;
  int64x2_t v951;
  int64x2_t v952;
  int64x2_t v953;
  __int8 *v954;
  int64x2_t *v955;
  int64x2_t *v956;
  unsigned int v957;
  unsigned int v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  int64x2_t v962;
  int64x2_t v963;
  int64x2_t v964;
  int64x2_t v965;
  int64x2_t v966;
  int64x2_t v967;
  int64x2_t v968;
  int64x2_t v969;
  int64x2_t *v970;
  unint64_t v971;
  unint64_t v972;
  unsigned int *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unsigned int *v977;
  unsigned int *v978;
  int64x2_t *v979;
  int64x2_t v980;
  int64x2_t v981;
  int64x2_t v982;
  __int128 v983;
  __int128 v984;
  int64x2_t v985;
  int64x2_t v986;
  int64x2_t *v987;
  int64x2_t *v988;
  int64x2_t *v989;
  unsigned int v990;
  unsigned int v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  __int128 v995;
  _OWORD *v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  _OWORD *v1001;
  _OWORD *v1002;
  unint64_t v1003;
  unint64_t v1004;
  unsigned int *v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  unsigned int *v1009;
  unsigned int *v1010;
  int64x2_t v1011;
  int64x2_t *v1012;
  __int128 v1013;
  __int128 v1014;
  int64x2_t v1015;
  int64x2_t v1016;
  int64x2_t v1017;
  int64x2_t v1018;
  __int8 *v1019;
  int64x2_t *v1020;
  int64x2_t *v1021;
  unsigned int v1022;
  unsigned int v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  int64x2_t v1027;
  int64x2_t v1028;
  int64x2_t v1029;
  int64x2_t v1030;
  int64x2_t v1031;
  int64x2_t v1032;
  int64x2_t v1033;
  int64x2_t v1034;
  int64x2_t *v1035;
  unint64_t v1036;
  unint64_t v1037;
  unsigned int *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unsigned int *v1042;
  unsigned int *v1043;
  int64x2_t *v1044;
  int64x2_t v1045;
  int64x2_t v1046;
  int64x2_t v1047;
  int64x2_t v1048;
  int64x2_t v1049;
  int64x2_t v1050;
  int64x2_t v1051;
  int64x2_t v1052;
  int64x2_t v1053;
  int64x2_t v1054;
  int64x2_t v1055;
  int64x2_t v1056;
  int64x2_t v1057;
  int64x2_t v1058;
  int64x2_t v1059;
  int64x2_t *v1060;
  int64x2_t *v1061;
  int64x2_t *v1062;
  unsigned int v1063;
  unsigned int v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  __int128 v1068;
  _OWORD *v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  _OWORD *v1080;
  _OWORD *v1081;
  _OWORD *v1082;
  _OWORD *v1083;
  _OWORD *v1084;
  unint64_t v1085;
  unint64_t v1086;
  unsigned int *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unsigned int *v1091;
  unsigned int *v1092;
  __int128 v1093;
  _OWORD *v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  _OWORD *v1099;
  _OWORD *v1100;
  unsigned int v1101;
  unsigned int v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int64x2_t *v1106;
  int64x2_t v1107;
  int64x2_t v1108;
  int64x2_t v1109;
  __int128 v1110;
  __int128 v1111;
  int64x2_t v1112;
  int64x2_t v1113;
  int64x2_t *v1114;
  int64x2_t *v1115;
  int64x2_t *v1116;
  unint64_t v1117;
  unint64_t v1118;
  unsigned int *v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  unsigned int *v1123;
  unsigned int *v1124;
  int64x2_t v1125;
  int64x2_t *v1126;
  int64x2_t v1127;
  int64x2_t v1128;
  int64x2_t v1129;
  int64x2_t v1130;
  int64x2_t v1131;
  int64x2_t v1132;
  int64x2_t v1133;
  int64x2_t v1134;
  __int128 v1135;
  __int128 v1136;
  int64x2_t v1137;
  int64x2_t v1138;
  int64x2_t v1139;
  int64x2_t v1140;
  int64x2_t v1141;
  int64x2_t v1142;
  int64x2_t v1143;
  int64x2_t v1144;
  int64x2_t v1145;
  int64x2_t *v1146;
  int64x2_t *v1147;
  int64x2_t *v1148;
  unsigned int v1149;
  unsigned int v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  __int128 v1154;
  _OWORD *v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  _OWORD *v1172;
  _OWORD *v1173;
  _OWORD *v1174;
  _OWORD *v1175;
  _OWORD *v1176;
  _OWORD *v1177;
  _OWORD *v1178;
  _OWORD *v1179;
  unint64_t v1180;
  unint64_t v1181;
  unsigned int *v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unsigned int *v1186;
  unsigned int *v1187;
  __int128 v1188;
  _OWORD *v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  _OWORD *v1200;
  _OWORD *v1201;
  _OWORD *v1202;
  _OWORD *v1203;
  _OWORD *v1204;
  unsigned int v1205;
  unsigned int v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int64x2_t *v1210;
  int64x2_t v1211;
  int64x2_t v1212;
  int64x2_t v1213;
  int64x2_t v1214;
  int64x2_t v1215;
  int64x2_t v1216;
  int64x2_t v1217;
  int64x2_t v1218;
  int64x2_t v1219;
  int64x2_t v1220;
  int64x2_t v1221;
  int64x2_t v1222;
  int64x2_t v1223;
  int64x2_t v1224;
  int64x2_t v1225;
  int64x2_t *v1226;
  int64x2_t *v1227;
  int64x2_t *v1228;
  unint64_t v1229;
  unint64_t v1230;
  unsigned int *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  unsigned int *v1235;
  unsigned int *v1236;
  _QWORD *v1237;
  unsigned int v1238;
  unsigned int v1239;
  int8x16_t *v1240;
  uint64_t v1241;
  uint64_t v1242;
  int8x16_t v1243;
  int8x16_t v1244;
  int8x16_t *v1245;
  unint64_t v1246;
  unint64_t v1247;
  unsigned int *v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  unsigned int *v1252;
  unsigned int *v1253;
  __int128 v1254;
  _OWORD *v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  _OWORD *v1272;
  _OWORD *v1273;
  _OWORD *v1274;
  _OWORD *v1275;
  _OWORD *v1276;
  _OWORD *v1277;
  _OWORD *v1278;
  _OWORD *v1279;
  unsigned int v1280;
  unsigned int v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  int64x2_t v1285;
  int64x2_t *v1286;
  int64x2_t v1287;
  int64x2_t v1288;
  int64x2_t v1289;
  int64x2_t v1290;
  int64x2_t v1291;
  int64x2_t v1292;
  int64x2_t v1293;
  int64x2_t v1294;
  __int128 v1295;
  __int128 v1296;
  int64x2_t v1297;
  int64x2_t v1298;
  int64x2_t v1299;
  int64x2_t v1300;
  int64x2_t v1301;
  int64x2_t v1302;
  int64x2_t v1303;
  int64x2_t v1304;
  int64x2_t v1305;
  int64x2_t *v1306;
  int64x2_t *v1307;
  int64x2_t *v1308;
  unint64_t v1309;
  unint64_t v1310;
  unsigned int *v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  unsigned int *v1315;
  unsigned int *v1316;
  int64x2_t *v1317;
  int64x2_t v1318;
  int64x2_t v1319;
  int64x2_t v1320;
  int64x2_t v1321;
  int64x2_t v1322;
  int64x2_t v1323;
  int64x2_t v1324;
  int64x2_t v1325;
  int64x2_t v1326;
  int64x2_t v1327;
  int64x2_t v1328;
  int64x2_t v1329;
  int64x2_t v1330;
  int64x2_t v1331;
  int64x2_t v1332;
  int64x2_t *v1333;
  int64x2_t *v1334;
  int64x2_t *v1335;
  unsigned int v1336;
  unsigned int v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  __int128 v1341;
  _OWORD *v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  _OWORD *v1353;
  _OWORD *v1354;
  _OWORD *v1355;
  _OWORD *v1356;
  _OWORD *v1357;
  unint64_t v1358;
  unint64_t v1359;
  unsigned int *v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  unsigned int *v1364;
  unsigned int *v1365;
  int8x16_t *v1366;
  unsigned int v1367;
  unsigned int v1368;
  int8x16_t *v1369;
  uint64_t v1370;
  uint64_t v1371;
  int8x16_t v1372;
  int8x16_t v1373;
  _QWORD *v1374;
  unint64_t v1375;
  unint64_t v1376;
  unsigned int *v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  unsigned int *v1381;
  unsigned int *v1382;
  int64x2_t *v1383;
  int64x2_t v1384;
  int64x2_t v1385;
  int64x2_t v1386;
  int64x2_t v1387;
  int64x2_t v1388;
  int64x2_t v1389;
  int64x2_t v1390;
  int64x2_t v1391;
  int64x2_t v1392;
  int64x2_t v1393;
  int64x2_t v1394;
  int64x2_t v1395;
  int64x2_t *v1396;
  int64x2_t *v1397;
  int64x2_t *v1398;
  unsigned int v1399;
  unsigned int v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  int64x2_t v1404;
  __int128 v1405;
  __int128 v1406;
  __int8 *v1407;
  unint64_t v1408;
  unint64_t v1409;
  unsigned int *v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  unsigned int *v1414;
  unsigned int *v1415;
  __int128 v1416;
  _OWORD *v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  __int128 v1426;
  __int128 v1427;
  _OWORD *v1428;
  _OWORD *v1429;
  _OWORD *v1430;
  _OWORD *v1431;
  _OWORD *v1432;
  unsigned int v1433;
  unsigned int v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  int64x2_t *v1438;
  int64x2_t v1439;
  int64x2_t v1440;
  int64x2_t v1441;
  int64x2_t v1442;
  int64x2_t v1443;
  int64x2_t v1444;
  int64x2_t v1445;
  int64x2_t v1446;
  int64x2_t v1447;
  int64x2_t v1448;
  int64x2_t v1449;
  int64x2_t v1450;
  int64x2_t v1451;
  int64x2_t v1452;
  int64x2_t v1453;
  int64x2_t *v1454;
  int64x2_t *v1455;
  int64x2_t *v1456;
  unint64_t v1457;
  unint64_t v1458;
  unsigned int *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  unsigned int *v1463;
  unsigned int *v1464;
  int64x2_t *v1465;
  int64x2_t v1466;
  int64x2_t v1467;
  int64x2_t v1468;
  int64x2_t v1469;
  int64x2_t v1470;
  int64x2_t v1471;
  int64x2_t v1472;
  int64x2_t v1473;
  int64x2_t v1474;
  int64x2_t v1475;
  int64x2_t v1476;
  int64x2_t v1477;
  int64x2_t *v1478;
  int64x2_t *v1479;
  int64x2_t *v1480;
  unsigned int v1481;
  unsigned int v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  int64x2_t v1486;
  __int128 v1487;
  __int128 v1488;
  __int8 *v1489;
  unint64_t v1490;
  unint64_t v1491;
  unsigned int *v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  unsigned int *v1496;
  unsigned int *v1497;
  int64x2_t v1498;
  int64x2_t *v1499;
  __int128 v1500;
  __int128 v1501;
  int64x2_t v1502;
  int64x2_t v1503;
  int64x2_t v1504;
  int64x2_t v1505;
  __int8 *v1506;
  int64x2_t *v1507;
  int64x2_t *v1508;
  unsigned int v1509;
  unsigned int v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  int64x2_t v1514;
  int64x2_t v1515;
  int64x2_t v1516;
  int64x2_t v1517;
  int64x2_t v1518;
  int64x2_t v1519;
  int64x2_t v1520;
  int64x2_t v1521;
  int64x2_t *v1522;
  unint64_t v1523;
  unint64_t v1524;
  unsigned int *v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  unsigned int *v1529;
  unsigned int *v1530;
  int64x2_t *v1531;
  int64x2_t v1532;
  int64x2_t v1533;
  int64x2_t v1534;
  __int128 v1535;
  __int128 v1536;
  int64x2_t v1537;
  int64x2_t v1538;
  int64x2_t *v1539;
  int64x2_t *v1540;
  int64x2_t *v1541;
  unsigned int v1542;
  unsigned int v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  __int128 v1547;
  _OWORD *v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  _OWORD *v1553;
  _OWORD *v1554;
  unint64_t v1555;
  unint64_t v1556;
  unsigned int *v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  unsigned int *v1561;
  unsigned int *v1562;
  int64x2_t v1563;
  int64x2_t *v1564;
  __int128 v1565;
  __int128 v1566;
  int64x2_t v1567;
  int64x2_t v1568;
  int64x2_t v1569;
  int64x2_t v1570;
  __int8 *v1571;
  int64x2_t *v1572;
  int64x2_t *v1573;
  unsigned int v1574;
  unsigned int v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  int64x2_t v1579;
  int64x2_t v1580;
  int64x2_t v1581;
  int64x2_t v1582;
  int64x2_t v1583;
  int64x2_t v1584;
  int64x2_t v1585;
  int64x2_t v1586;
  int64x2_t *v1587;
  unint64_t v1588;
  unint64_t v1589;
  unsigned int *v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  unsigned int *v1594;
  unsigned int *v1595;
  int64x2_t *v1596;
  int64x2_t v1597;
  int64x2_t v1598;
  int64x2_t v1599;
  int64x2_t v1600;
  int64x2_t v1601;
  int64x2_t v1602;
  int64x2_t v1603;
  int64x2_t v1604;
  int64x2_t v1605;
  int64x2_t v1606;
  int64x2_t v1607;
  int64x2_t v1608;
  int64x2_t v1609;
  int64x2_t v1610;
  int64x2_t v1611;
  int64x2_t v1612;
  int64x2_t v1613;
  int8x16_t v1614;
  int8x16_t v1615;
  int8x16_t v1616;
  unint64_t v1617;
  unint64_t v1618;
  unint64_t v1619;
  int8x16_t v1620;
  int8x16_t v1621;
  int8x16_t v1622;
  unint64_t v1623;
  unint64_t v1624;
  unint64_t v1625;
  int8x16_t v1626;
  int8x16_t v1627;
  int8x16_t v1628;
  unint64_t v1629;
  unint64_t v1630;
  unint64_t v1631;
  int8x16_t v1632;
  int8x16_t v1633;
  int8x16_t v1634;
  unint64_t v1635;
  unint64_t v1636;
  unint64_t v1637;
  int64x2_t *v1638;
  int8x16_t *v1639;
  int8x16_t *v1640;
  int8x16_t *v1641;
  int8x16_t *v1642;
  unsigned int v1643;
  unsigned int v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  int64x2_t v1648;
  int64x2_t v1649;
  int64x2_t v1650;
  unint64_t v1651;
  unint64_t v1652;
  unsigned int *v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  unsigned int *v1657;
  unsigned int *v1658;
  __int128 v1659;
  _OWORD *v1660;
  __int128 v1661;
  __int128 v1662;
  __int128 v1663;
  __int128 v1664;
  _OWORD *v1665;
  _OWORD *v1666;
  unsigned int v1667;
  unsigned int v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  int64x2_t *v1672;
  int64x2_t v1673;
  int64x2_t v1674;
  int64x2_t v1675;
  __int128 v1676;
  __int128 v1677;
  int64x2_t v1678;
  int64x2_t v1679;
  int64x2_t *v1680;
  int64x2_t *v1681;
  int64x2_t *v1682;
  unint64_t v1683;
  unint64_t v1684;
  unsigned int *v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  unsigned int *v1689;
  unsigned int *v1690;
  int64x2_t v1691;
  int64x2_t *v1692;
  int64x2_t v1693;
  int64x2_t v1694;
  int64x2_t v1695;
  int64x2_t v1696;
  int64x2_t v1697;
  int64x2_t v1698;
  int64x2_t v1699;
  int64x2_t v1700;
  int64x2_t v1701;
  int64x2_t v1702;
  int64x2_t v1703;
  int64x2_t v1704;
  int64x2_t v1705;
  int64x2_t v1706;
  int64x2_t v1707;
  int64x2_t v1708;
  int64x2_t v1709;
  int64x2_t v1710;
  int64x2_t v1711;
  int64x2_t v1712;
  int64x2_t v1713;
  int64x2_t v1714;
  __int128 v1715;
  __int128 v1716;
  __int128 v1717;
  int64x2_t v1718;
  int64x2_t v1719;
  int64x2_t *v1720;
  int64x2_t *v1721;
  int64x2_t *v1722;
  int64x2_t *v1723;
  int64x2_t *v1724;
  unsigned int v1725;
  unsigned int v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  int64x2_t v1730;
  int64x2_t *v1731;
  int64x2_t v1732;
  __int128 v1733;
  __int128 v1734;
  __int128 v1735;
  int64x2_t v1736;
  int64x2_t v1737;
  int64x2_t v1738;
  __int128 v1739;
  __int128 v1740;
  __int128 v1741;
  int64x2_t v1742;
  int64x2_t v1743;
  int64x2_t v1744;
  __int128 v1745;
  __int128 v1746;
  __int128 v1747;
  int64x2_t v1748;
  int64x2_t v1749;
  int64x2_t v1750;
  __int128 v1751;
  __int128 v1752;
  __int128 v1753;
  int64x2_t v1754;
  int64x2_t v1755;
  int64x2_t v1756;
  __int8 *v1757;
  int64x2_t *v1758;
  __int8 *v1759;
  int64x2_t *v1760;
  __int8 *v1761;
  int64x2_t *v1762;
  __int8 *v1763;
  int64x2_t *v1764;
  unint64_t v1765;
  unint64_t v1766;
  unsigned int *v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  unsigned int *v1771;
  unsigned int *v1772;
  int64x2_t v1773;
  int64x2_t *v1774;
  int64x2_t v1775;
  int64x2_t v1776;
  int64x2_t v1777;
  int64x2_t v1778;
  int8x16_t v1779;
  int8x16_t v1780;
  int8x16_t v1781;
  int8x16_t v1782;
  unint64_t v1783;
  unint64_t v1784;
  unint64_t v1785;
  int8x16_t v1786;
  int8x16_t v1787;
  unint64_t v1788;
  unint64_t v1789;
  unint64_t v1790;
  int8x16_t v1791;
  int8x16_t v1792;
  int8x16_t v1793;
  int8x16_t v1794;
  unint64_t v1795;
  unint64_t v1796;
  unint64_t v1797;
  int8x16_t v1798;
  int8x16_t v1799;
  unint64_t v1800;
  unint64_t v1801;
  unint64_t v1802;
  int64x2_t *v1803;
  int8x16_t *v1804;
  int8x16_t *v1805;
  int8x16_t *v1806;
  int8x16_t *v1807;
  unsigned int v1808;
  unsigned int v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  int64x2_t v1813;
  int64x2_t v1814;
  int64x2_t v1815;
  int64x2_t v1816;
  int64x2_t v1817;
  int64x2_t v1818;
  int64x2_t v1819;
  int64x2_t v1820;
  int64x2_t v1821;
  int64x2_t v1822;
  int64x2_t v1823;
  int64x2_t v1824;
  int64x2_t v1825;
  int64x2_t v1826;
  int64x2_t v1827;
  unint64_t v1828;
  unint64_t v1829;
  unsigned int *v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  unsigned int *v1834;
  unsigned int *v1835;
  _QWORD *v1836;
  unsigned int v1837;
  unsigned int v1838;
  int8x16_t *v1839;
  uint64_t v1840;
  uint64_t v1841;
  int8x16_t v1842;
  int8x16_t v1843;
  int8x16_t v1844;
  unint64_t v1845;
  unint64_t v1846;
  unint64_t v1847;
  int8x16_t *v1848;
  unint64_t v1849;
  unint64_t v1850;
  unsigned int *v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  unsigned int *v1855;
  unsigned int *v1856;
  int64x2_t v1857;
  int64x2_t *v1858;
  int64x2_t v1859;
  __int128 v1860;
  __int128 v1861;
  __int128 v1862;
  int64x2_t v1863;
  int64x2_t v1864;
  int64x2_t v1865;
  __int128 v1866;
  __int128 v1867;
  __int128 v1868;
  int64x2_t v1869;
  int64x2_t v1870;
  int64x2_t v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  int64x2_t v1875;
  int64x2_t v1876;
  int64x2_t v1877;
  __int128 v1878;
  __int128 v1879;
  __int128 v1880;
  int64x2_t v1881;
  int64x2_t v1882;
  int64x2_t v1883;
  __int8 *v1884;
  int64x2_t *v1885;
  __int8 *v1886;
  int64x2_t *v1887;
  __int8 *v1888;
  int64x2_t *v1889;
  __int8 *v1890;
  int64x2_t *v1891;
  unsigned int v1892;
  unsigned int v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  int64x2_t v1897;
  int64x2_t *v1898;
  int64x2_t v1899;
  int64x2_t v1900;
  int64x2_t v1901;
  int64x2_t v1902;
  int64x2_t v1903;
  int64x2_t v1904;
  int64x2_t v1905;
  int64x2_t v1906;
  int64x2_t v1907;
  int64x2_t v1908;
  int64x2_t v1909;
  int64x2_t v1910;
  int64x2_t v1911;
  int64x2_t v1912;
  int64x2_t v1913;
  int64x2_t v1914;
  int64x2_t v1915;
  int64x2_t v1916;
  int64x2_t v1917;
  int64x2_t v1918;
  int64x2_t v1919;
  int64x2_t v1920;
  __int128 v1921;
  __int128 v1922;
  __int128 v1923;
  int64x2_t v1924;
  int64x2_t v1925;
  int64x2_t *v1926;
  int64x2_t *v1927;
  int64x2_t *v1928;
  int64x2_t *v1929;
  int64x2_t *v1930;
  unint64_t v1931;
  unint64_t v1932;
  unsigned int *v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  unsigned int *v1937;
  unsigned int *v1938;
  int64x2_t *v1939;
  int64x2_t v1940;
  int64x2_t v1941;
  int64x2_t v1942;
  int64x2_t v1943;
  int64x2_t v1944;
  int64x2_t v1945;
  int64x2_t v1946;
  int64x2_t v1947;
  int64x2_t v1948;
  int64x2_t v1949;
  int64x2_t v1950;
  int64x2_t v1951;
  int64x2_t v1952;
  int64x2_t v1953;
  int64x2_t v1954;
  int64x2_t v1955;
  int64x2_t v1956;
  int8x16_t v1957;
  int8x16_t v1958;
  int8x16_t v1959;
  unint64_t v1960;
  unint64_t v1961;
  unint64_t v1962;
  int8x16_t v1963;
  int8x16_t v1964;
  int8x16_t v1965;
  unint64_t v1966;
  unint64_t v1967;
  unint64_t v1968;
  int8x16_t v1969;
  int8x16_t v1970;
  int8x16_t v1971;
  unint64_t v1972;
  unint64_t v1973;
  unint64_t v1974;
  int8x16_t v1975;
  int8x16_t v1976;
  int8x16_t v1977;
  unint64_t v1978;
  unint64_t v1979;
  unint64_t v1980;
  int64x2_t *v1981;
  int8x16_t *v1982;
  int8x16_t *v1983;
  int8x16_t *v1984;
  int8x16_t *v1985;
  unsigned int v1986;
  unsigned int v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  int64x2_t v1991;
  int64x2_t v1992;
  int64x2_t v1993;
  unint64_t v1994;
  unint64_t v1995;
  unsigned int *v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  unsigned int *v2000;
  unsigned int *v2001;
  int8x16_t *v2002;
  unsigned int v2003;
  unsigned int v2004;
  int8x16_t *v2005;
  uint64_t v2006;
  uint64_t v2007;
  int8x16_t v2008;
  int8x16_t v2009;
  int8x16_t v2010;
  unint64_t v2011;
  unint64_t v2012;
  unint64_t v2013;
  _QWORD *v2014;
  unint64_t v2015;
  unint64_t v2016;
  unsigned int *v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  unsigned int *v2021;
  unsigned int *v2022;
  int64x2_t v2023;
  int64x2_t *v2024;
  int64x2_t v2025;
  int64x2_t v2026;
  int64x2_t v2027;
  int64x2_t v2028;
  int64x2_t v2029;
  int64x2_t v2030;
  int64x2_t v2031;
  int64x2_t v2032;
  int64x2_t v2033;
  int64x2_t v2034;
  int64x2_t v2035;
  int64x2_t *v2036;
  int64x2_t *v2037;
  int64x2_t *v2038;
  int64x2_t *v2039;
  int64x2_t *v2040;
  unsigned int v2041;
  unsigned int v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  int64x2_t v2046;
  int64x2_t *v2047;
  int64x2_t v2048;
  __int128 v2049;
  __int128 v2050;
  __int128 v2051;
  int64x2_t v2052;
  int64x2_t v2053;
  int64x2_t v2054;
  __int128 v2055;
  __int128 v2056;
  __int128 v2057;
  __int8 *v2058;
  int64x2_t *v2059;
  __int8 *v2060;
  unint64_t v2061;
  unint64_t v2062;
  unsigned int *v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  unsigned int *v2067;
  unsigned int *v2068;
  int64x2_t v2069;
  int64x2_t *v2070;
  int64x2_t v2071;
  int64x2_t v2072;
  int64x2_t v2073;
  int64x2_t v2074;
  int8x16_t v2075;
  int8x16_t v2076;
  int8x16_t v2077;
  int8x16_t v2078;
  unint64_t v2079;
  unint64_t v2080;
  unint64_t v2081;
  int8x16_t v2082;
  int8x16_t v2083;
  unint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  int8x16_t v2087;
  int8x16_t v2088;
  int8x16_t v2089;
  int8x16_t v2090;
  unint64_t v2091;
  unint64_t v2092;
  unint64_t v2093;
  int8x16_t v2094;
  int8x16_t v2095;
  unint64_t v2096;
  unint64_t v2097;
  unint64_t v2098;
  int64x2_t *v2099;
  int8x16_t *v2100;
  int8x16_t *v2101;
  int8x16_t *v2102;
  int8x16_t *v2103;
  unsigned int v2104;
  unsigned int v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  int64x2_t v2109;
  int64x2_t v2110;
  int64x2_t v2111;
  int64x2_t v2112;
  int64x2_t v2113;
  int64x2_t v2114;
  int64x2_t v2115;
  int64x2_t v2116;
  int64x2_t v2117;
  int64x2_t v2118;
  int64x2_t v2119;
  int64x2_t v2120;
  int64x2_t v2121;
  int64x2_t v2122;
  int64x2_t v2123;
  unint64_t v2124;
  unint64_t v2125;
  unsigned int *v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  unsigned int *v2130;
  unsigned int *v2131;
  int64x2_t v2132;
  int64x2_t *v2133;
  int64x2_t v2134;
  int64x2_t v2135;
  int64x2_t v2136;
  int64x2_t v2137;
  int64x2_t v2138;
  int64x2_t v2139;
  int64x2_t v2140;
  int64x2_t v2141;
  int64x2_t v2142;
  int64x2_t v2143;
  int64x2_t v2144;
  int64x2_t *v2145;
  int64x2_t *v2146;
  int64x2_t *v2147;
  int64x2_t *v2148;
  int64x2_t *v2149;
  unsigned int v2150;
  unsigned int v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  int64x2_t v2155;
  int64x2_t *v2156;
  int64x2_t v2157;
  __int128 v2158;
  __int128 v2159;
  __int128 v2160;
  int64x2_t v2161;
  int64x2_t v2162;
  int64x2_t v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int8 *v2167;
  int64x2_t *v2168;
  __int8 *v2169;
  unint64_t v2170;
  unint64_t v2171;
  unsigned int *v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  unsigned int *v2176;
  unsigned int *v2177;
  int64x2_t v2178;
  int64x2_t *v2179;
  int64x2_t v2180;
  __int128 v2181;
  __int128 v2182;
  __int128 v2183;
  int64x2_t v2184;
  int64x2_t v2185;
  int64x2_t v2186;
  __int128 v2187;
  __int128 v2188;
  __int128 v2189;
  __int8 *v2190;
  int64x2_t *v2191;
  __int8 *v2192;
  unsigned int v2193;
  unsigned int v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  int64x2_t v2198;
  int64x2_t *v2199;
  int64x2_t v2200;
  int64x2_t v2201;
  int64x2_t v2202;
  int64x2_t v2203;
  int64x2_t v2204;
  int64x2_t v2205;
  int64x2_t v2206;
  int64x2_t v2207;
  int64x2_t v2208;
  int64x2_t v2209;
  int64x2_t v2210;
  int64x2_t *v2211;
  int64x2_t *v2212;
  int64x2_t *v2213;
  int64x2_t *v2214;
  int64x2_t *v2215;
  unint64_t v2216;
  unint64_t v2217;
  unsigned int *v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  unsigned int *v2222;
  unsigned int *v2223;
  int64x2_t v2224;
  int64x2_t *v2225;
  int64x2_t v2226;
  int64x2_t v2227;
  int64x2_t v2228;
  int64x2_t v2229;
  __int128 v2230;
  __int128 v2231;
  __int128 v2232;
  int64x2_t v2233;
  int64x2_t v2234;
  int64x2_t *v2235;
  int64x2_t *v2236;
  int64x2_t *v2237;
  int64x2_t *v2238;
  int64x2_t *v2239;
  unsigned int v2240;
  unsigned int v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  int64x2_t v2245;
  int64x2_t *v2246;
  int64x2_t v2247;
  __int128 v2248;
  __int128 v2249;
  __int128 v2250;
  int64x2_t v2251;
  int64x2_t v2252;
  int64x2_t v2253;
  __int8 *v2254;
  int64x2_t *v2255;
  unint64_t v2256;
  unint64_t v2257;
  unsigned int *v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  unsigned int *v2262;
  unsigned int *v2263;
  int64x2_t v2264;
  int64x2_t *v2265;
  int64x2_t v2266;
  __int128 v2267;
  __int128 v2268;
  __int128 v2269;
  int64x2_t v2270;
  int64x2_t v2271;
  int64x2_t v2272;
  __int128 v2273;
  __int128 v2274;
  __int128 v2275;
  __int8 *v2276;
  int64x2_t *v2277;
  __int8 *v2278;
  unsigned int v2279;
  unsigned int v2280;
  uint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  int64x2_t v2284;
  int64x2_t *v2285;
  int64x2_t v2286;
  int64x2_t v2287;
  int64x2_t v2288;
  int64x2_t v2289;
  int64x2_t v2290;
  int64x2_t v2291;
  int64x2_t v2292;
  int64x2_t v2293;
  int64x2_t v2294;
  int64x2_t v2295;
  int64x2_t v2296;
  int64x2_t *v2297;
  int64x2_t *v2298;
  int64x2_t *v2299;
  int64x2_t *v2300;
  int64x2_t *v2301;
  unint64_t v2302;
  unint64_t v2303;
  unsigned int *v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  unsigned int *v2308;
  unsigned int *v2309;
  _OWORD *v2310;
  __int128 v2311;
  __int128 v2312;
  unsigned int v2313;
  unsigned int v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  _QWORD *v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  unint64_t v2324;
  unint64_t v2325;
  unsigned int *v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  unsigned int *v2330;
  unsigned int *v2331;
  int64x2_t v2332;
  int64x2_t *v2333;
  int64x2_t v2334;
  __int128 v2335;
  __int128 v2336;
  __int128 v2337;
  int64x2_t v2338;
  int64x2_t v2339;
  int64x2_t v2340;
  __int8 *v2341;
  int64x2_t *v2342;
  unsigned int v2343;
  unsigned int v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  int64x2_t v2348;
  int64x2_t *v2349;
  int64x2_t v2350;
  int64x2_t v2351;
  int64x2_t v2352;
  int64x2_t v2353;
  __int128 v2354;
  __int128 v2355;
  __int128 v2356;
  int64x2_t v2357;
  int64x2_t v2358;
  int64x2_t *v2359;
  int64x2_t *v2360;
  int64x2_t *v2361;
  int64x2_t *v2362;
  int64x2_t *v2363;
  unint64_t v2364;
  unint64_t v2365;
  unsigned int *v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  unsigned int *v2370;
  unsigned int *v2371;
  uint64_t v2372;
  __int128 v2373;
  __int128 v2374;
  __int128 v2375;
  __int128 v2376;
  unsigned int v2377;
  unsigned int v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  _QWORD *v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  unint64_t v2391;
  unint64_t v2392;
  unsigned int *v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  unsigned int *v2397;
  unsigned int *v2398;
  _QWORD *v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  unsigned int v2404;
  unsigned int v2405;
  _QWORD *v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  _OWORD *v2410;
  __int128 v2411;
  __int128 v2412;
  unint64_t v2413;
  unint64_t v2414;
  unsigned int *v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  unsigned int *v2419;
  unsigned int *v2420;
  _OWORD *v2421;
  __int128 v2422;
  __int128 v2423;
  unsigned int v2424;
  unsigned int v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  _QWORD *v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  unint64_t v2435;
  unint64_t v2436;
  unsigned int *v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  unsigned int *v2441;
  unsigned int *v2442;
  uint64_t v2443;
  _QWORD *v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  unsigned int v2451;
  unsigned int v2452;
  _QWORD *v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  __int128 v2458;
  __int128 v2459;
  __int128 v2460;
  __int128 v2461;
  unint64_t v2462;
  unint64_t v2463;
  unsigned int *v2464;
  uint64_t v2465;
  uint64_t v2466;
  uint64_t v2467;
  unsigned int *v2468;
  unsigned int *v2469;
  int64x2_t v2470;
  int64x2_t *v2471;
  int64x2_t v2472;
  int64x2_t v2473;
  int64x2_t v2474;
  int64x2_t v2475;
  int64x2_t v2476;
  int64x2_t v2477;
  int64x2_t v2478;
  int64x2_t v2479;
  int64x2_t v2480;
  int64x2_t v2481;
  int64x2_t v2482;
  int64x2_t v2483;
  int64x2_t v2484;
  int64x2_t v2485;
  int64x2_t v2486;
  int64x2_t v2487;
  int64x2_t v2488;
  int64x2_t v2489;
  int64x2_t v2490;
  int64x2_t v2491;
  int64x2_t v2492;
  int64x2_t v2493;
  int64x2_t v2494;
  int64x2_t v2495;
  int64x2_t v2496;
  int64x2_t v2497;
  int64x2_t v2498;
  int64x2_t v2499;
  int64x2_t v2500;
  int64x2_t v2501;
  int64x2_t *v2502;
  int64x2_t *v2503;
  int64x2_t *v2504;
  int64x2_t *v2505;
  int64x2_t *v2506;
  int64x2_t *v2507;
  int64x2_t *v2508;
  int64x2_t *v2509;
  unsigned int v2510;
  unsigned int v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  __int128 v2517;
  int64x2_t v2518;
  __int128 v2519;
  __int128 v2520;
  __int128 v2521;
  __int128 v2522;
  __int128 v2523;
  uint64_t v2524;
  __int128 v2525;
  __int128 v2526;
  __int128 v2527;
  __int128 v2528;
  uint64_t v2529;
  __int128 v2530;
  __int128 v2531;
  __int128 v2532;
  __int128 v2533;
  uint64_t v2534;
  __int128 v2535;
  __int128 v2536;
  __int128 v2537;
  __int128 v2538;
  uint64_t v2539;
  __int128 v2540;
  __int128 v2541;
  __int128 v2542;
  __int128 v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  unint64_t v2550;
  unint64_t v2551;
  unsigned int *v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t v2555;
  unsigned int *v2556;
  unsigned int *v2557;
  unsigned int v2558;
  unsigned int v2559;
  unsigned int v2560;
  unint64_t v2561;
  unint64_t v2562;
  unsigned int *v2563;
  uint64_t v2564;
  uint64_t v2565;
  uint64_t v2566;
  unsigned int *v2567;
  unsigned int *v2568;
  int64x2_t v2569;
  int64x2_t v2570;
  int64x2_t v2571;
  int64x2_t v2572;
  int64x2_t v2573;
  int64x2_t v2574;
  int64x2_t v2575;
  int8x16_t v2576;
  int64x2_t v2577;
  int64x2_t v2578;
  int8x16_t v2579;
  int64x2_t v2580;
  int64x2_t v2581;
  int64x2_t v2582;
  unint64_t v2583;
  int8x16_t v2584;
  int8x16_t v2585;
  int8x16_t v2586;
  unint64_t v2587;
  int8x16_t v2588;
  int8x16_t v2589;
  int8x16_t v2590;
  int8x16_t v2591;
  int8x16_t v2592;
  int8x16_t v2593;
  int8x16_t v2594;
  int8x16_t v2595;
  int8x16_t v2596;
  int8x16_t v2597;
  int8x16_t v2598;
  int8x16_t v2599;
  int8x16_t v2600;
  int64x2_t v2601;
  int8x16_t v2602;
  int8x16_t v2603;
  int64x2_t *v2604;
  int8x16_t v2605;
  __int128 v2606;
  int8x16_t v2607;
  int8x16_t *v2608;
  int8x16_t v2609;
  int8x16_t v2610;
  unint64_t v2611;
  int8x16_t v2612;
  unint64_t v2613;
  int8x16_t v2614;
  uint64_t v2615;
  int8x16_t v2616;
  int8x16_t v2617;
  uint64_t v2618;
  uint64_t v2619;
  uint64_t v2620;
  unint64_t v2621;
  int8x16_t v2622;
  uint64_t v2623;
  unint64_t v2624;
  unint64_t v2625;
  int8x16_t v2626;
  unint64_t v2627;
  unint64_t v2628;
  unint64_t v2629;
  int8x16_t v2630;
  unint64_t v2631;
  int64x2_t v2632;
  int64x2_t v2633;
  int64x2_t v2634;
  int8x16_t v2635;
  int8x16_t v2636;
  int8x16_t v2637;
  int64x2_t v2638;
  int64x2_t v2639;
  int8x16_t v2640;
  int8x16_t v2641;
  int8x16_t v2642;
  int64x2_t v2643;
  int64x2_t v2644;
  int64x2_t v2645;
  int8x16_t v2646;
  int64x2_t v2647;
  int64x2_t v2648;
  int64x2_t v2649;
  int64x2_t *v2650;
  int8x16_t *v2651;
  int64x2_t *v2652;
  int8x16_t *v2653;
  int64x2_t *v2654;
  int8x16_t *v2655;
  int64x2_t *v2656;
  unsigned int v2657;
  unsigned int v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t v2661;
  int64x2_t v2662;
  __int128 v2663;
  uint64_t v2664;
  int8x16_t v2665;
  int8x16_t v2666;
  int8x16_t v2667;
  int8x16_t v2668;
  int8x16_t v2669;
  int8x16_t v2670;
  int8x16_t v2671;
  int8x16_t v2672;
  int8x16_t v2673;
  int8x16_t v2674;
  int8x16_t v2675;
  int8x16_t v2676;
  int8x16_t v2677;
  int8x16_t v2678;
  int8x16_t v2679;
  int8x16_t v2680;
  int8x16_t v2681;
  int8x16_t v2682;
  int8x16_t v2683;
  __int8 *v2684;
  unint64_t v2685;
  unint64_t v2686;
  unsigned int *v2687;
  uint64_t v2688;
  uint64_t v2689;
  uint64_t v2690;
  unsigned int *v2691;
  unsigned int *v2692;
  _QWORD *v2693;
  uint64_t v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  unsigned int v2698;
  unsigned int v2699;
  _QWORD *v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  _OWORD *v2704;
  __int128 v2705;
  __int128 v2706;
  unint64_t v2707;
  unint64_t v2708;
  unsigned int *v2709;
  uint64_t v2710;
  uint64_t v2711;
  uint64_t v2712;
  unsigned int *v2713;
  unsigned int *v2714;
  _QWORD *v2715;
  unsigned int v2716;
  unsigned int v2717;
  uint64_t v2718;
  uint64_t v2719;
  uint64_t v2720;
  int8x16_t v2721;
  int8x16_t v2722;
  int8x16_t v2723;
  int8x16_t v2724;
  uint64_t v2725;
  unint64_t v2726;
  unint64_t v2727;
  unint64_t v2728;
  unint64_t v2729;
  int8x16_t *v2730;
  unint64_t v2731;
  unint64_t v2732;
  unsigned int *v2733;
  uint64_t v2734;
  uint64_t v2735;
  uint64_t v2736;
  unsigned int *v2737;
  unsigned int *v2738;
  _QWORD *v2739;
  uint64_t v2740;
  uint64_t v2741;
  unsigned int v2742;
  unsigned int v2743;
  _QWORD *v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  _OWORD *v2748;
  __int128 v2749;
  unint64_t v2750;
  unint64_t v2751;
  unsigned int *v2752;
  uint64_t v2753;
  uint64_t v2754;
  uint64_t v2755;
  unsigned int *v2756;
  unsigned int *v2757;
  int64x2_t v2758;
  int64x2_t *v2759;
  int64x2_t v2760;
  int64x2_t v2761;
  int64x2_t v2762;
  int64x2_t v2763;
  int64x2_t v2764;
  int64x2_t v2765;
  int64x2_t v2766;
  int64x2_t v2767;
  int64x2_t v2768;
  int64x2_t v2769;
  int64x2_t v2770;
  int64x2_t v2771;
  int64x2_t v2772;
  int64x2_t v2773;
  int64x2_t v2774;
  int64x2_t v2775;
  int64x2_t v2776;
  int64x2_t v2777;
  int64x2_t v2778;
  int64x2_t v2779;
  int64x2_t v2780;
  int64x2_t v2781;
  int64x2_t v2782;
  int64x2_t v2783;
  int64x2_t v2784;
  int64x2_t v2785;
  int64x2_t v2786;
  int64x2_t v2787;
  int64x2_t v2788;
  int64x2_t v2789;
  int64x2_t *v2790;
  int64x2_t *v2791;
  int64x2_t *v2792;
  int64x2_t *v2793;
  int64x2_t *v2794;
  int64x2_t *v2795;
  int64x2_t *v2796;
  int64x2_t *v2797;
  unsigned int v2798;
  unsigned int v2799;
  uint64_t v2800;
  uint64_t v2801;
  uint64_t v2802;
  uint64_t v2803;
  uint64_t v2804;
  __int128 v2805;
  int64x2_t v2806;
  __int128 v2807;
  __int128 v2808;
  __int128 v2809;
  __int128 v2810;
  __int128 v2811;
  uint64_t v2812;
  __int128 v2813;
  __int128 v2814;
  __int128 v2815;
  __int128 v2816;
  uint64_t v2817;
  __int128 v2818;
  __int128 v2819;
  __int128 v2820;
  __int128 v2821;
  uint64_t v2822;
  __int128 v2823;
  __int128 v2824;
  __int128 v2825;
  __int128 v2826;
  uint64_t v2827;
  __int128 v2828;
  __int128 v2829;
  __int128 v2830;
  __int128 v2831;
  uint64_t v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  unint64_t v2838;
  unint64_t v2839;
  unsigned int *v2840;
  uint64_t v2841;
  uint64_t v2842;
  uint64_t v2843;
  unsigned int *v2844;
  unsigned int *v2845;
  _QWORD *v2846;
  uint64_t v2847;
  uint64_t v2848;
  unsigned int v2849;
  unsigned int v2850;
  _QWORD *v2851;
  uint64_t v2852;
  uint64_t v2853;
  uint64_t v2854;
  _OWORD *v2855;
  __int128 v2856;
  unint64_t v2857;
  unint64_t v2858;
  unsigned int *v2859;
  uint64_t v2860;
  uint64_t v2861;
  uint64_t v2862;
  unsigned int *v2863;
  unsigned int *v2864;
  int64x2_t v2865;
  int64x2_t *v2866;
  int64x2_t v2867;
  int64x2_t v2868;
  int64x2_t v2869;
  int64x2_t v2870;
  int64x2_t v2871;
  int64x2_t v2872;
  int64x2_t v2873;
  int64x2_t v2874;
  int64x2_t v2875;
  int64x2_t v2876;
  int64x2_t v2877;
  int64x2_t v2878;
  int64x2_t v2879;
  int64x2_t v2880;
  int64x2_t v2881;
  int64x2_t v2882;
  int64x2_t v2883;
  int64x2_t *v2884;
  int64x2_t *v2885;
  int64x2_t *v2886;
  int64x2_t *v2887;
  int64x2_t *v2888;
  int64x2_t *v2889;
  int64x2_t *v2890;
  int64x2_t *v2891;
  unsigned int v2892;
  unsigned int v2893;
  uint64_t v2894;
  uint64_t v2895;
  uint64_t v2896;
  uint64_t v2897;
  uint64_t v2898;
  __int128 v2899;
  int64x2_t v2900;
  __int128 v2901;
  __int128 v2902;
  __int128 v2903;
  __int128 v2904;
  __int128 v2905;
  uint64_t v2906;
  __int128 v2907;
  __int128 v2908;
  __int128 v2909;
  __int128 v2910;
  uint64_t v2911;
  __int128 v2912;
  __int128 v2913;
  __int128 v2914;
  __int128 v2915;
  uint64_t v2916;
  uint64_t v2917;
  uint64_t v2918;
  uint64_t v2919;
  unint64_t v2920;
  unint64_t v2921;
  unsigned int *v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t v2925;
  unsigned int *v2926;
  unsigned int *v2927;
  _QWORD *v2928;
  uint64_t v2929;
  uint64_t v2930;
  unsigned int v2931;
  unsigned int v2932;
  _QWORD *v2933;
  uint64_t v2934;
  uint64_t v2935;
  uint64_t v2936;
  __int128 v2937;
  unint64_t v2938;
  unint64_t v2939;
  unsigned int *v2940;
  uint64_t v2941;
  uint64_t v2942;
  uint64_t v2943;
  unsigned int *v2944;
  unsigned int *v2945;
  int64x2_t v2946;
  int64x2_t *v2947;
  int64x2_t v2948;
  int64x2_t v2949;
  int64x2_t v2950;
  int64x2_t v2951;
  int64x2_t v2952;
  int64x2_t v2953;
  int64x2_t v2954;
  int64x2_t v2955;
  int64x2_t v2956;
  int64x2_t v2957;
  int64x2_t v2958;
  int64x2_t v2959;
  int64x2_t v2960;
  int64x2_t v2961;
  int64x2_t v2962;
  int64x2_t v2963;
  int64x2_t v2964;
  int64x2_t *v2965;
  int64x2_t *v2966;
  int64x2_t *v2967;
  int64x2_t *v2968;
  int64x2_t *v2969;
  int64x2_t *v2970;
  int64x2_t *v2971;
  int64x2_t *v2972;
  unsigned int v2973;
  unsigned int v2974;
  uint64_t v2975;
  uint64_t v2976;
  uint64_t v2977;
  uint64_t v2978;
  uint64_t v2979;
  __int128 v2980;
  int64x2_t v2981;
  __int128 v2982;
  __int128 v2983;
  __int128 v2984;
  __int128 v2985;
  __int128 v2986;
  uint64_t v2987;
  __int128 v2988;
  __int128 v2989;
  __int128 v2990;
  __int128 v2991;
  uint64_t v2992;
  __int128 v2993;
  __int128 v2994;
  __int128 v2995;
  __int128 v2996;
  uint64_t v2997;
  uint64_t v2998;
  uint64_t v2999;
  uint64_t v3000;
  unint64_t v3001;
  unint64_t v3002;
  unsigned int *v3003;
  uint64_t v3004;
  uint64_t v3005;
  uint64_t v3006;
  unsigned int *v3007;
  unsigned int *v3008;
  uint64_t v3009;
  uint64_t v3010;
  __int128 v3011;
  int64x2_t v3012;
  __int128 v3013;
  __int128 v3014;
  __int128 v3015;
  __int128 v3016;
  __int128 v3017;
  uint64_t v3018;
  __int128 v3019;
  __int128 v3020;
  __int128 v3021;
  __int128 v3022;
  uint64_t v3023;
  __int128 v3024;
  __int128 v3025;
  __int128 v3026;
  __int128 v3027;
  uint64_t v3028;
  __int128 v3029;
  __int128 v3030;
  __int128 v3031;
  __int128 v3032;
  uint64_t v3033;
  __int128 v3034;
  __int128 v3035;
  __int128 v3036;
  __int128 v3037;
  uint64_t v3038;
  uint64_t v3039;
  uint64_t v3040;
  uint64_t v3041;
  uint64_t v3042;
  uint64_t v3043;
  unsigned int v3044;
  unsigned int v3045;
  uint64_t v3046;
  uint64_t v3047;
  uint64_t v3048;
  int64x2_t v3049;
  int64x2_t *v3050;
  int64x2_t v3051;
  int64x2_t v3052;
  int64x2_t v3053;
  int64x2_t v3054;
  int64x2_t v3055;
  int64x2_t v3056;
  int64x2_t v3057;
  int64x2_t v3058;
  int64x2_t v3059;
  int64x2_t v3060;
  int64x2_t v3061;
  int64x2_t v3062;
  int64x2_t v3063;
  int64x2_t v3064;
  int64x2_t v3065;
  int64x2_t v3066;
  int64x2_t v3067;
  int64x2_t v3068;
  int64x2_t v3069;
  int64x2_t v3070;
  int64x2_t v3071;
  int64x2_t v3072;
  int64x2_t v3073;
  int64x2_t v3074;
  int64x2_t v3075;
  int64x2_t v3076;
  int64x2_t v3077;
  int64x2_t v3078;
  int64x2_t v3079;
  int64x2_t v3080;
  int64x2_t *v3081;
  int64x2_t *v3082;
  int64x2_t *v3083;
  int64x2_t *v3084;
  int64x2_t *v3085;
  int64x2_t *v3086;
  int64x2_t *v3087;
  int64x2_t *v3088;
  unint64_t v3089;
  unint64_t v3090;
  unsigned int *v3091;
  uint64_t v3092;
  uint64_t v3093;
  uint64_t v3094;
  unsigned int *v3095;
  unsigned int *v3096;
  int64x2_t v3097;
  int64x2_t *v3098;
  int64x2_t v3099;
  int64x2_t v3100;
  int64x2_t v3101;
  int64x2_t v3102;
  int64x2_t v3103;
  int64x2_t v3104;
  int64x2_t v3105;
  uint64_t v3106;
  __int128 v3107;
  __int128 v3108;
  __int128 v3109;
  __int128 v3110;
  int64x2_t v3111;
  int64x2_t v3112;
  int64x2_t *v3113;
  int64x2_t *v3114;
  int64x2_t *v3115;
  int64x2_t *v3116;
  int64x2_t *v3117;
  int64x2_t *v3118;
  int64x2_t *v3119;
  int64x2_t *v3120;
  unsigned int v3121;
  unsigned int v3122;
  uint64_t v3123;
  uint64_t v3124;
  uint64_t v3125;
  uint64_t v3126;
  uint64_t v3127;
  __int128 v3128;
  int64x2_t v3129;
  __int128 v3130;
  __int128 v3131;
  __int128 v3132;
  __int128 v3133;
  __int128 v3134;
  uint64_t v3135;
  __int128 v3136;
  __int128 v3137;
  __int128 v3138;
  __int128 v3139;
  uint64_t v3140;
  uint64_t v3141;
  uint64_t v3142;
  unint64_t v3143;
  unint64_t v3144;
  unsigned int *v3145;
  uint64_t v3146;
  uint64_t v3147;
  uint64_t v3148;
  unsigned int *v3149;
  unsigned int *v3150;
  uint64_t v3151;
  __int128 v3152;
  uint64_t v3153;
  int8x16_t v3154;
  int8x16_t v3155;
  int8x16_t v3156;
  int8x16_t v3157;
  int8x16_t v3158;
  int8x16_t v3159;
  int8x16_t v3160;
  int8x16_t v3161;
  int8x16_t v3162;
  int8x16_t v3163;
  int8x16_t v3164;
  int8x16_t v3165;
  int8x16_t v3166;
  int8x16_t v3167;
  int8x16_t v3168;
  int8x16_t v3169;
  int8x16_t v3170;
  int8x16_t v3171;
  int8x16_t v3172;
  int8x16_t v3173;
  int8x16_t v3174;
  uint64_t v3175;
  unint64_t v3176;
  int8x16_t v3177;
  unint64_t v3178;
  uint64_t v3179;
  int8x16_t v3180;
  uint64_t v3181;
  int8x16_t v3182;
  int8x16_t v3183;
  uint64_t v3184;
  uint64_t v3185;
  int8x16_t v3186;
  uint64_t v3187;
  unint64_t v3188;
  int8x16_t v3189;
  unint64_t v3190;
  unint64_t v3191;
  int8x16_t v3192;
  unint64_t v3193;
  int8x16_t v3194;
  unint64_t v3195;
  __int128 v3196;
  __int128 v3197;
  __int128 v3198;
  __int128 v3199;
  __int128 v3200;
  __int128 v3201;
  __int128 v3202;
  __int128 v3203;
  __int128 v3204;
  __int128 v3205;
  __int128 v3206;
  __int128 v3207;
  __int128 v3208;
  __int128 v3209;
  __int128 v3210;
  __int128 v3211;
  __int128 v3212;
  __int128 v3213;
  uint64_t v3214;
  uint64_t v3215;
  uint64_t v3216;
  uint64_t v3217;
  uint64_t v3218;
  int8x16_t *v3219;
  uint64_t v3220;
  unsigned int v3221;
  unsigned int v3222;
  uint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  int64x2_t v3226;
  int64x2_t v3227;
  int64x2_t v3228;
  int64x2_t v3229;
  int64x2_t v3230;
  int64x2_t v3231;
  int8x16_t v3232;
  int8x16_t v3233;
  int64x2_t v3234;
  int64x2_t v3235;
  int64x2_t v3236;
  int64x2_t v3237;
  int64x2_t v3238;
  int64x2_t v3239;
  __int128 v3240;
  int8x16_t v3241;
  __int128 v3242;
  int8x16_t v3243;
  int8x16_t v3244;
  int8x16_t v3245;
  int8x16_t v3246;
  int8x16_t v3247;
  int8x16_t v3248;
  int8x16_t v3249;
  int8x16_t v3250;
  int8x16_t v3251;
  int8x16_t v3252;
  int8x16_t v3253;
  int8x16_t v3254;
  int8x16_t v3255;
  int8x16_t v3256;
  int64x2_t v3257;
  int8x16_t v3258;
  int8x16_t v3259;
  int8x16_t v3260;
  uint64_t v3261;
  unint64_t v3262;
  unint64_t v3263;
  unsigned int *v3264;
  uint64_t v3265;
  uint64_t v3266;
  uint64_t v3267;
  unsigned int *v3268;
  unsigned int *v3269;
  int64x2_t *v3270;
  int64x2_t v3271;
  int64x2_t v3272;
  int64x2_t v3273;
  int64x2_t v3274;
  int64x2_t v3275;
  int64x2_t v3276;
  int64x2_t v3277;
  int64x2_t v3278;
  int64x2_t v3279;
  int64x2_t v3280;
  int64x2_t v3281;
  int64x2_t v3282;
  int64x2_t v3283;
  int64x2_t v3284;
  int64x2_t v3285;
  int64x2_t v3286;
  int64x2_t v3287;
  int8x16_t v3288;
  int8x16_t v3289;
  int8x16_t v3290;
  unint64_t v3291;
  unint64_t v3292;
  unint64_t v3293;
  int8x16_t v3294;
  int8x16_t v3295;
  int8x16_t v3296;
  unint64_t v3297;
  unint64_t v3298;
  unint64_t v3299;
  int8x16_t v3300;
  int8x16_t v3301;
  int8x16_t v3302;
  unint64_t v3303;
  unint64_t v3304;
  unint64_t v3305;
  int8x16_t v3306;
  int8x16_t v3307;
  int8x16_t v3308;
  unint64_t v3309;
  unint64_t v3310;
  unint64_t v3311;
  int64x2_t *v3312;
  int8x16_t *v3313;
  int8x16_t *v3314;
  int8x16_t *v3315;
  int8x16_t *v3316;
  unsigned int v3317;
  unsigned int v3318;
  uint64_t v3319;
  uint64_t v3320;
  uint64_t v3321;
  int64x2_t v3322;
  int64x2_t v3323;
  int64x2_t v3324;
  unint64_t v3325;
  unint64_t v3326;
  unsigned int *v3327;
  uint64_t v3328;
  uint64_t v3329;
  uint64_t v3330;
  unsigned int *v3331;
  unsigned int *v3332;
  int8x16_t *v3333;
  unsigned int v3334;
  unsigned int v3335;
  uint64_t v3336;
  uint64_t v3337;
  uint64_t v3338;
  int8x16_t v3339;
  int8x16_t v3340;
  int8x16_t v3341;
  int8x16_t v3342;
  uint64_t v3343;
  unint64_t v3344;
  unint64_t v3345;
  unint64_t v3346;
  unint64_t v3347;
  _QWORD *v3348;
  unint64_t v3349;
  unint64_t v3350;
  unsigned int *v3351;
  uint64_t v3352;
  uint64_t v3353;
  uint64_t v3354;
  unsigned int *v3355;
  unsigned int *v3356;
  int64x2_t v3357;
  int64x2_t *v3358;
  int64x2_t v3359;
  int64x2_t v3360;
  int64x2_t v3361;
  int64x2_t v3362;
  int64x2_t v3363;
  int64x2_t v3364;
  int64x2_t v3365;
  int64x2_t v3366;
  int64x2_t v3367;
  int64x2_t v3368;
  int64x2_t v3369;
  int64x2_t v3370;
  int64x2_t v3371;
  int64x2_t v3372;
  int64x2_t v3373;
  int64x2_t v3374;
  int64x2_t v3375;
  int64x2_t v3376;
  int64x2_t v3377;
  int64x2_t v3378;
  int64x2_t v3379;
  int64x2_t v3380;
  __int128 v3381;
  __int128 v3382;
  __int128 v3383;
  int64x2_t v3384;
  int64x2_t v3385;
  int64x2_t *v3386;
  int64x2_t *v3387;
  int64x2_t *v3388;
  int64x2_t *v3389;
  int64x2_t *v3390;
  unsigned int v3391;
  unsigned int v3392;
  uint64_t v3393;
  uint64_t v3394;
  uint64_t v3395;
  int64x2_t v3396;
  int64x2_t *v3397;
  int64x2_t v3398;
  __int128 v3399;
  __int128 v3400;
  __int128 v3401;
  int64x2_t v3402;
  int64x2_t v3403;
  int64x2_t v3404;
  __int128 v3405;
  __int128 v3406;
  __int128 v3407;
  int64x2_t v3408;
  int64x2_t v3409;
  int64x2_t v3410;
  __int128 v3411;
  __int128 v3412;
  __int128 v3413;
  int64x2_t v3414;
  int64x2_t v3415;
  int64x2_t v3416;
  __int128 v3417;
  __int128 v3418;
  __int128 v3419;
  int64x2_t v3420;
  int64x2_t v3421;
  int64x2_t v3422;
  __int8 *v3423;
  int64x2_t *v3424;
  __int8 *v3425;
  int64x2_t *v3426;
  __int8 *v3427;
  int64x2_t *v3428;
  __int8 *v3429;
  int64x2_t *v3430;
  unint64_t v3431;
  unint64_t v3432;
  unsigned int *v3433;
  uint64_t v3434;
  uint64_t v3435;
  uint64_t v3436;
  unsigned int *v3437;
  unsigned int *v3438;
  uint64_t v3439;
  uint64_t v3440;
  __int128 v3441;
  int64x2_t v3442;
  __int128 v3443;
  __int128 v3444;
  __int128 v3445;
  __int128 v3446;
  __int128 v3447;
  uint64_t v3448;
  __int128 v3449;
  __int128 v3450;
  __int128 v3451;
  __int128 v3452;
  uint64_t v3453;
  __int128 v3454;
  __int128 v3455;
  __int128 v3456;
  __int128 v3457;
  uint64_t v3458;
  __int128 v3459;
  __int128 v3460;
  __int128 v3461;
  __int128 v3462;
  uint64_t v3463;
  __int128 v3464;
  __int128 v3465;
  __int128 v3466;
  __int128 v3467;
  uint64_t v3468;
  uint64_t v3469;
  uint64_t v3470;
  uint64_t v3471;
  uint64_t v3472;
  uint64_t v3473;
  unsigned int v3474;
  unsigned int v3475;
  uint64_t v3476;
  uint64_t v3477;
  uint64_t v3478;
  int64x2_t v3479;
  int64x2_t *v3480;
  int64x2_t v3481;
  int64x2_t v3482;
  int64x2_t v3483;
  int64x2_t v3484;
  int64x2_t v3485;
  int64x2_t v3486;
  int64x2_t v3487;
  int64x2_t v3488;
  int64x2_t v3489;
  int64x2_t v3490;
  int64x2_t v3491;
  int64x2_t v3492;
  int64x2_t v3493;
  int64x2_t v3494;
  int64x2_t v3495;
  int64x2_t v3496;
  int64x2_t v3497;
  int64x2_t v3498;
  int64x2_t v3499;
  int64x2_t v3500;
  int64x2_t v3501;
  int64x2_t v3502;
  int64x2_t v3503;
  int64x2_t v3504;
  int64x2_t v3505;
  int64x2_t v3506;
  int64x2_t v3507;
  int64x2_t v3508;
  int64x2_t v3509;
  int64x2_t v3510;
  int64x2_t *v3511;
  int64x2_t *v3512;
  int64x2_t *v3513;
  int64x2_t *v3514;
  int64x2_t *v3515;
  int64x2_t *v3516;
  int64x2_t *v3517;
  int64x2_t *v3518;
  unint64_t v3519;
  unint64_t v3520;
  unsigned int *v3521;
  uint64_t v3522;
  uint64_t v3523;
  uint64_t v3524;
  unsigned int *v3525;
  unsigned int *v3526;
  _QWORD *v3527;
  unsigned int v3528;
  unsigned int v3529;
  int8x16_t *v3530;
  uint64_t v3531;
  uint64_t v3532;
  int8x16_t v3533;
  int8x16_t v3534;
  int8x16_t v3535;
  unint64_t v3536;
  unint64_t v3537;
  unint64_t v3538;
  int8x16_t *v3539;
  unint64_t v3540;
  unint64_t v3541;
  unsigned int *v3542;
  uint64_t v3543;
  uint64_t v3544;
  uint64_t v3545;
  unsigned int *v3546;
  unsigned int *v3547;
  uint64_t v3548;
  uint64_t v3549;
  __int128 v3550;
  int64x2_t v3551;
  __int128 v3552;
  __int128 v3553;
  __int128 v3554;
  __int128 v3555;
  __int128 v3556;
  uint64_t v3557;
  __int128 v3558;
  __int128 v3559;
  __int128 v3560;
  __int128 v3561;
  uint64_t v3562;
  __int128 v3563;
  __int128 v3564;
  __int128 v3565;
  __int128 v3566;
  uint64_t v3567;
  uint64_t v3568;
  uint64_t v3569;
  uint64_t v3570;
  unsigned int v3571;
  unsigned int v3572;
  uint64_t v3573;
  uint64_t v3574;
  uint64_t v3575;
  int64x2_t v3576;
  int64x2_t *v3577;
  int64x2_t v3578;
  int64x2_t v3579;
  int64x2_t v3580;
  int64x2_t v3581;
  int64x2_t v3582;
  int64x2_t v3583;
  int64x2_t v3584;
  int64x2_t v3585;
  int64x2_t v3586;
  int64x2_t v3587;
  int64x2_t v3588;
  int64x2_t v3589;
  int64x2_t v3590;
  int64x2_t v3591;
  int64x2_t v3592;
  int64x2_t v3593;
  int64x2_t v3594;
  int64x2_t *v3595;
  int64x2_t *v3596;
  int64x2_t *v3597;
  int64x2_t *v3598;
  int64x2_t *v3599;
  int64x2_t *v3600;
  int64x2_t *v3601;
  int64x2_t *v3602;
  unint64_t v3603;
  unint64_t v3604;
  unsigned int *v3605;
  uint64_t v3606;
  uint64_t v3607;
  uint64_t v3608;
  unsigned int *v3609;
  unsigned int *v3610;
  int64x2_t *v3611;
  int64x2_t v3612;
  int64x2_t v3613;
  int64x2_t v3614;
  int64x2_t v3615;
  int64x2_t v3616;
  int64x2_t v3617;
  int64x2_t v3618;
  int64x2_t v3619;
  int64x2_t v3620;
  int64x2_t v3621;
  int64x2_t v3622;
  int64x2_t v3623;
  int64x2_t v3624;
  int64x2_t v3625;
  int64x2_t v3626;
  int64x2_t v3627;
  int64x2_t v3628;
  int8x16_t v3629;
  int8x16_t v3630;
  int8x16_t v3631;
  unint64_t v3632;
  unint64_t v3633;
  unint64_t v3634;
  int8x16_t v3635;
  int8x16_t v3636;
  int8x16_t v3637;
  unint64_t v3638;
  unint64_t v3639;
  unint64_t v3640;
  int8x16_t v3641;
  int8x16_t v3642;
  int8x16_t v3643;
  unint64_t v3644;
  unint64_t v3645;
  unint64_t v3646;
  int8x16_t v3647;
  int8x16_t v3648;
  int8x16_t v3649;
  unint64_t v3650;
  unint64_t v3651;
  unint64_t v3652;
  int64x2_t *v3653;
  int8x16_t *v3654;
  int8x16_t *v3655;
  int8x16_t *v3656;
  int8x16_t *v3657;
  unsigned int v3658;
  unsigned int v3659;
  uint64_t v3660;
  uint64_t v3661;
  uint64_t v3662;
  int64x2_t v3663;
  int64x2_t v3664;
  int64x2_t v3665;
  unint64_t v3666;
  unint64_t v3667;
  unsigned int *v3668;
  uint64_t v3669;
  uint64_t v3670;
  uint64_t v3671;
  unsigned int *v3672;
  unsigned int *v3673;
  uint64_t v3674;
  uint64_t v3675;
  __int128 v3676;
  int64x2_t v3677;
  __int128 v3678;
  __int128 v3679;
  __int128 v3680;
  __int128 v3681;
  __int128 v3682;
  uint64_t v3683;
  __int128 v3684;
  __int128 v3685;
  __int128 v3686;
  __int128 v3687;
  uint64_t v3688;
  __int128 v3689;
  __int128 v3690;
  __int128 v3691;
  __int128 v3692;
  uint64_t v3693;
  uint64_t v3694;
  uint64_t v3695;
  uint64_t v3696;
  unsigned int v3697;
  unsigned int v3698;
  uint64_t v3699;
  uint64_t v3700;
  uint64_t v3701;
  int64x2_t v3702;
  int64x2_t *v3703;
  int64x2_t v3704;
  int64x2_t v3705;
  int64x2_t v3706;
  int64x2_t v3707;
  int64x2_t v3708;
  int64x2_t v3709;
  int64x2_t v3710;
  int64x2_t v3711;
  int64x2_t v3712;
  int64x2_t v3713;
  int64x2_t v3714;
  int64x2_t v3715;
  int64x2_t v3716;
  int64x2_t v3717;
  int64x2_t v3718;
  int64x2_t v3719;
  int64x2_t v3720;
  int64x2_t *v3721;
  int64x2_t *v3722;
  int64x2_t *v3723;
  int64x2_t *v3724;
  int64x2_t *v3725;
  int64x2_t *v3726;
  int64x2_t *v3727;
  int64x2_t *v3728;
  unint64_t v3729;
  unint64_t v3730;
  unsigned int *v3731;
  uint64_t v3732;
  uint64_t v3733;
  uint64_t v3734;
  unsigned int *v3735;
  unsigned int *v3736;
  int64x2_t v3737;
  int64x2_t *v3738;
  int64x2_t v3739;
  int64x2_t v3740;
  int64x2_t v3741;
  int64x2_t v3742;
  int64x2_t v3743;
  int64x2_t v3744;
  int64x2_t v3745;
  int64x2_t v3746;
  int64x2_t v3747;
  int64x2_t v3748;
  int64x2_t v3749;
  int64x2_t *v3750;
  int64x2_t *v3751;
  int64x2_t *v3752;
  int64x2_t *v3753;
  int64x2_t *v3754;
  unsigned int v3755;
  unsigned int v3756;
  uint64_t v3757;
  uint64_t v3758;
  uint64_t v3759;
  int64x2_t v3760;
  int64x2_t *v3761;
  int64x2_t v3762;
  __int128 v3763;
  __int128 v3764;
  __int128 v3765;
  int64x2_t v3766;
  int64x2_t v3767;
  int64x2_t v3768;
  __int128 v3769;
  __int128 v3770;
  __int128 v3771;
  __int8 *v3772;
  int64x2_t *v3773;
  __int8 *v3774;
  unint64_t v3775;
  unint64_t v3776;
  unsigned int *v3777;
  uint64_t v3778;
  uint64_t v3779;
  uint64_t v3780;
  unsigned int *v3781;
  unsigned int *v3782;
  uint64_t v3783;
  uint64_t v3784;
  __int128 v3785;
  int64x2_t v3786;
  __int128 v3787;
  __int128 v3788;
  __int128 v3789;
  __int128 v3790;
  __int128 v3791;
  uint64_t v3792;
  __int128 v3793;
  __int128 v3794;
  __int128 v3795;
  __int128 v3796;
  uint64_t v3797;
  uint64_t v3798;
  uint64_t v3799;
  unsigned int v3800;
  unsigned int v3801;
  uint64_t v3802;
  uint64_t v3803;
  uint64_t v3804;
  int64x2_t v3805;
  int64x2_t *v3806;
  int64x2_t v3807;
  int64x2_t v3808;
  int64x2_t v3809;
  int64x2_t v3810;
  int64x2_t v3811;
  int64x2_t v3812;
  int64x2_t v3813;
  uint64_t v3814;
  __int128 v3815;
  __int128 v3816;
  __int128 v3817;
  __int128 v3818;
  int64x2_t v3819;
  int64x2_t v3820;
  int64x2_t *v3821;
  int64x2_t *v3822;
  int64x2_t *v3823;
  int64x2_t *v3824;
  int64x2_t *v3825;
  int64x2_t *v3826;
  int64x2_t *v3827;
  int64x2_t *v3828;
  unint64_t v3829;
  unint64_t v3830;
  unsigned int *v3831;
  uint64_t v3832;
  uint64_t v3833;
  uint64_t v3834;
  unsigned int *v3835;
  unsigned int *v3836;
  int64x2_t v3837;
  int64x2_t *v3838;
  int64x2_t v3839;
  int64x2_t v3840;
  int64x2_t v3841;
  int64x2_t v3842;
  int64x2_t v3843;
  int64x2_t v3844;
  int64x2_t v3845;
  int64x2_t v3846;
  int64x2_t v3847;
  int64x2_t v3848;
  int64x2_t v3849;
  int64x2_t *v3850;
  int64x2_t *v3851;
  int64x2_t *v3852;
  int64x2_t *v3853;
  int64x2_t *v3854;
  unsigned int v3855;
  unsigned int v3856;
  uint64_t v3857;
  uint64_t v3858;
  uint64_t v3859;
  int64x2_t v3860;
  int64x2_t *v3861;
  int64x2_t v3862;
  __int128 v3863;
  __int128 v3864;
  __int128 v3865;
  int64x2_t v3866;
  int64x2_t v3867;
  int64x2_t v3868;
  __int128 v3869;
  __int128 v3870;
  __int128 v3871;
  __int8 *v3872;
  int64x2_t *v3873;
  __int8 *v3874;
  unint64_t v3875;
  unint64_t v3876;
  unsigned int *v3877;
  uint64_t v3878;
  uint64_t v3879;
  uint64_t v3880;
  unsigned int *v3881;
  unsigned int *v3882;
  int64x2_t v3883;
  int64x2_t *v3884;
  int64x2_t v3885;
  int64x2_t v3886;
  int64x2_t v3887;
  int64x2_t v3888;
  int8x16_t v3889;
  int8x16_t v3890;
  int8x16_t v3891;
  int8x16_t v3892;
  unint64_t v3893;
  unint64_t v3894;
  unint64_t v3895;
  int8x16_t v3896;
  int8x16_t v3897;
  unint64_t v3898;
  unint64_t v3899;
  unint64_t v3900;
  int8x16_t v3901;
  int8x16_t v3902;
  int8x16_t v3903;
  int8x16_t v3904;
  unint64_t v3905;
  unint64_t v3906;
  unint64_t v3907;
  int8x16_t v3908;
  int8x16_t v3909;
  unint64_t v3910;
  unint64_t v3911;
  unint64_t v3912;
  int64x2_t *v3913;
  int8x16_t *v3914;
  int8x16_t *v3915;
  int8x16_t *v3916;
  int8x16_t *v3917;
  unsigned int v3918;
  unsigned int v3919;
  uint64_t v3920;
  uint64_t v3921;
  uint64_t v3922;
  int64x2_t v3923;
  int64x2_t v3924;
  int64x2_t v3925;
  int64x2_t v3926;
  int64x2_t v3927;
  int64x2_t v3928;
  int64x2_t v3929;
  int64x2_t v3930;
  int64x2_t v3931;
  int64x2_t v3932;
  int64x2_t v3933;
  int64x2_t v3934;
  int64x2_t v3935;
  int64x2_t v3936;
  int64x2_t v3937;
  unint64_t v3938;
  unint64_t v3939;
  unsigned int *v3940;
  uint64_t v3941;
  uint64_t v3942;
  uint64_t v3943;
  unsigned int *v3944;
  unsigned int *v3945;
  int64x2_t v3946;
  int64x2_t *v3947;
  int64x2_t v3948;
  int64x2_t v3949;
  int64x2_t v3950;
  int64x2_t v3951;
  __int128 v3952;
  __int128 v3953;
  __int128 v3954;
  int64x2_t v3955;
  int64x2_t v3956;
  int64x2_t *v3957;
  int64x2_t *v3958;
  int64x2_t *v3959;
  int64x2_t *v3960;
  int64x2_t *v3961;
  unsigned int v3962;
  unsigned int v3963;
  uint64_t v3964;
  uint64_t v3965;
  uint64_t v3966;
  int64x2_t v3967;
  int64x2_t *v3968;
  int64x2_t v3969;
  __int128 v3970;
  __int128 v3971;
  __int128 v3972;
  int64x2_t v3973;
  int64x2_t v3974;
  int64x2_t v3975;
  __int8 *v3976;
  int64x2_t *v3977;
  unint64_t v3978;
  unint64_t v3979;
  unsigned int *v3980;
  uint64_t v3981;
  uint64_t v3982;
  uint64_t v3983;
  unsigned int *v3984;
  unsigned int *v3985;
  int64x2_t v3986;
  int64x2_t *v3987;
  int64x2_t v3988;
  __int128 v3989;
  __int128 v3990;
  __int128 v3991;
  int64x2_t v3992;
  int64x2_t v3993;
  int64x2_t v3994;
  __int128 v3995;
  __int128 v3996;
  __int128 v3997;
  int64x2_t v3998;
  int64x2_t v3999;
  int64x2_t v4000;
  __int128 v4001;
  __int128 v4002;
  __int128 v4003;
  int64x2_t v4004;
  int64x2_t v4005;
  int64x2_t v4006;
  __int128 v4007;
  __int128 v4008;
  __int128 v4009;
  int64x2_t v4010;
  int64x2_t v4011;
  int64x2_t v4012;
  __int8 *v4013;
  int64x2_t *v4014;
  __int8 *v4015;
  int64x2_t *v4016;
  __int8 *v4017;
  int64x2_t *v4018;
  __int8 *v4019;
  int64x2_t *v4020;
  unsigned int v4021;
  unsigned int v4022;
  uint64_t v4023;
  uint64_t v4024;
  uint64_t v4025;
  int64x2_t v4026;
  int64x2_t *v4027;
  int64x2_t v4028;
  int64x2_t v4029;
  int64x2_t v4030;
  int64x2_t v4031;
  int64x2_t v4032;
  int64x2_t v4033;
  int64x2_t v4034;
  int64x2_t v4035;
  int64x2_t v4036;
  int64x2_t v4037;
  int64x2_t v4038;
  int64x2_t v4039;
  int64x2_t v4040;
  int64x2_t v4041;
  int64x2_t v4042;
  int64x2_t v4043;
  int64x2_t v4044;
  int64x2_t v4045;
  int64x2_t v4046;
  int64x2_t v4047;
  int64x2_t v4048;
  int64x2_t v4049;
  __int128 v4050;
  __int128 v4051;
  __int128 v4052;
  int64x2_t v4053;
  int64x2_t v4054;
  int64x2_t *v4055;
  int64x2_t *v4056;
  int64x2_t *v4057;
  int64x2_t *v4058;
  int64x2_t *v4059;
  unint64_t v4060;
  unint64_t v4061;
  unsigned int *v4062;
  uint64_t v4063;
  uint64_t v4064;
  uint64_t v4065;
  unsigned int *v4066;
  unsigned int *v4067;
  int8x16_t *v4068;
  unsigned int v4069;
  unsigned int v4070;
  int8x16_t *v4071;
  uint64_t v4072;
  uint64_t v4073;
  int8x16_t v4074;
  int8x16_t v4075;
  int8x16_t v4076;
  unint64_t v4077;
  unint64_t v4078;
  unint64_t v4079;
  _QWORD *v4080;
  unint64_t v4081;
  unint64_t v4082;
  unsigned int *v4083;
  uint64_t v4084;
  uint64_t v4085;
  uint64_t v4086;
  unsigned int *v4087;
  unsigned int *v4088;
  int64x2_t v4089;
  int64x2_t *v4090;
  int64x2_t v4091;
  int64x2_t v4092;
  int64x2_t v4093;
  int64x2_t v4094;
  int8x16_t v4095;
  int8x16_t v4096;
  int8x16_t v4097;
  int8x16_t v4098;
  unint64_t v4099;
  unint64_t v4100;
  unint64_t v4101;
  int8x16_t v4102;
  int8x16_t v4103;
  unint64_t v4104;
  unint64_t v4105;
  unint64_t v4106;
  int8x16_t v4107;
  int8x16_t v4108;
  int8x16_t v4109;
  int8x16_t v4110;
  unint64_t v4111;
  unint64_t v4112;
  unint64_t v4113;
  int8x16_t v4114;
  int8x16_t v4115;
  unint64_t v4116;
  unint64_t v4117;
  unint64_t v4118;
  int64x2_t *v4119;
  int8x16_t *v4120;
  int8x16_t *v4121;
  int8x16_t *v4122;
  int8x16_t *v4123;
  unsigned int v4124;
  unsigned int v4125;
  uint64_t v4126;
  uint64_t v4127;
  uint64_t v4128;
  int64x2_t v4129;
  int64x2_t v4130;
  int64x2_t v4131;
  int64x2_t v4132;
  int64x2_t v4133;
  int64x2_t v4134;
  int64x2_t v4135;
  int64x2_t v4136;
  int64x2_t v4137;
  int64x2_t v4138;
  int64x2_t v4139;
  int64x2_t v4140;
  int64x2_t v4141;
  int64x2_t v4142;
  int64x2_t v4143;
  unint64_t v4144;
  unint64_t v4145;
  unsigned int *v4146;
  uint64_t v4147;
  uint64_t v4148;
  uint64_t v4149;
  unsigned int *v4150;
  unsigned int *v4151;
  int64x2_t v4152;
  int64x2_t *v4153;
  int64x2_t v4154;
  __int128 v4155;
  __int128 v4156;
  __int128 v4157;
  int64x2_t v4158;
  int64x2_t v4159;
  int64x2_t v4160;
  __int128 v4161;
  __int128 v4162;
  __int128 v4163;
  __int8 *v4164;
  int64x2_t *v4165;
  __int8 *v4166;
  unsigned int v4167;
  unsigned int v4168;
  uint64_t v4169;
  uint64_t v4170;
  uint64_t v4171;
  int64x2_t v4172;
  int64x2_t *v4173;
  int64x2_t v4174;
  int64x2_t v4175;
  int64x2_t v4176;
  int64x2_t v4177;
  int64x2_t v4178;
  int64x2_t v4179;
  int64x2_t v4180;
  int64x2_t v4181;
  int64x2_t v4182;
  int64x2_t v4183;
  int64x2_t v4184;
  int64x2_t *v4185;
  int64x2_t *v4186;
  int64x2_t *v4187;
  int64x2_t *v4188;
  int64x2_t *v4189;
  unint64_t v4190;
  unint64_t v4191;
  unsigned int *v4192;
  uint64_t v4193;
  uint64_t v4194;
  uint64_t v4195;
  unsigned int *v4196;
  unsigned int *v4197;
  int64x2_t v4198;
  int64x2_t *v4199;
  int64x2_t v4200;
  __int128 v4201;
  __int128 v4202;
  __int128 v4203;
  int64x2_t v4204;
  int64x2_t v4205;
  int64x2_t v4206;
  __int128 v4207;
  __int128 v4208;
  __int128 v4209;
  __int8 *v4210;
  int64x2_t *v4211;
  __int8 *v4212;
  unsigned int v4213;
  unsigned int v4214;
  uint64_t v4215;
  uint64_t v4216;
  uint64_t v4217;
  int64x2_t v4218;
  int64x2_t *v4219;
  int64x2_t v4220;
  int64x2_t v4221;
  int64x2_t v4222;
  int64x2_t v4223;
  int64x2_t v4224;
  int64x2_t v4225;
  int64x2_t v4226;
  int64x2_t v4227;
  int64x2_t v4228;
  int64x2_t v4229;
  int64x2_t v4230;
  int64x2_t *v4231;
  int64x2_t *v4232;
  int64x2_t *v4233;
  int64x2_t *v4234;
  int64x2_t *v4235;
  unint64_t v4236;
  unint64_t v4237;
  unsigned int *v4238;
  uint64_t v4239;
  uint64_t v4240;
  uint64_t v4241;
  unsigned int *v4242;
  unsigned int *v4243;
  int64x2_t v4244;
  int64x2_t *v4245;
  int64x2_t v4246;
  __int128 v4247;
  __int128 v4248;
  __int128 v4249;
  int64x2_t v4250;
  int64x2_t v4251;
  int64x2_t v4252;
  __int8 *v4253;
  int64x2_t *v4254;
  unsigned int v4255;
  unsigned int v4256;
  uint64_t v4257;
  uint64_t v4258;
  uint64_t v4259;
  int64x2_t v4260;
  int64x2_t *v4261;
  int64x2_t v4262;
  int64x2_t v4263;
  int64x2_t v4264;
  int64x2_t v4265;
  __int128 v4266;
  __int128 v4267;
  __int128 v4268;
  int64x2_t v4269;
  int64x2_t v4270;
  int64x2_t *v4271;
  int64x2_t *v4272;
  int64x2_t *v4273;
  int64x2_t *v4274;
  int64x2_t *v4275;
  int v4276;
  uint64_t v4277;
  unsigned int v4278;
  int v4279;
  double v4280;
  unsigned int v4281;
  double *v4282;
  uint64_t v4283;
  unsigned int v4284;
  int v4285;
  double v4286;
  double *v4287;
  unsigned int v4288;
  double *v4289;
  double v4290;
  unint64_t v4291;
  size_t v4292;
  unint64_t v4294;
  unint64_t v4295;
  int64x2_t v4296;
  unint64_t v4297;
  unint64_t v4298;
  unint64_t v4299;
  unint64_t v4300;
  unint64_t v4301;
  unint64_t v4302;
  unint64_t v4303;
  unint64_t v4304;
  unint64_t v4305;
  unint64_t v4306;
  unint64_t v4307;
  unint64_t v4308;
  unint64_t v4309;
  unint64_t v4310;
  unint64_t v4311;
  unint64_t v4312;
  unint64_t v4313;
  unint64_t v4314;
  unint64_t v4315;
  unint64_t v4316;
  unint64_t v4317;
  unint64_t v4318;
  unint64_t v4319;
  unint64_t v4320;
  unint64_t v4321;
  unint64_t v4322;
  unint64_t v4323;
  unint64_t v4324;
  unint64_t v4325;
  unint64_t v4326;
  unint64_t v4327;
  uint64_t v4328;
  unint64_t v4329;
  unint64_t v4330;
  unint64_t v4331;
  unint64_t v4332;
  unint64_t v4333;
  unint64_t v4334;
  unint64_t v4335;
  unint64_t v4336;
  unint64_t v4337;
  unint64_t v4338;
  uint64_t v4339;
  unint64_t v4340;
  uint64_t v4341;
  unint64_t v4342;
  uint64_t v4343;
  uint64_t v4344;
  uint64_t v4345;
  int64x2_t v4346;
  uint64_t v4347;
  uint64_t v4348;
  int64x2_t v4349;
  int64x2_t v4350;
  uint64_t v4351;
  uint64_t v4352;
  int64x2_t v4353;
  uint64_t v4354;
  uint64_t v4355;
  uint64_t v4356;
  uint64_t v4357;
  int64x2_t v4358;
  uint64_t v4359;
  uint64_t v4360;
  int64x2_t v4361;
  uint64_t v4362;
  uint64_t v4363;
  int64x2_t v4364;
  uint64_t v4365;
  uint64_t v4366;
  int64x2_t v4367;
  uint64_t v4368;
  uint64_t v4369;
  int64x2_t v4370;
  uint64_t v4371;
  int64x2_t v4372;
  __int128 v4373;
  uint64_t v4374;
  uint64_t v4375;
  int64x2_t v4376;
  int64x2_t v4377;
  uint64_t v4378;
  int64x2_t v4379;
  int64x2_t v4380;
  unint64_t v4381;
  __int128 v4382;
  __int128 v4383;
  uint64_t v4384;
  uint64_t v4385;
  uint64_t v4386;
  uint64_t v4387;
  uint64_t v4388;
  __int128 v4389;
  uint64_t v4390;
  __int128 v4391;
  __int128 v4392;
  uint64_t v4393;
  int8x16_t v4394;
  int8x16_t v4395;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = (unsigned int *)(a1 + 20056);
  v7 = (void **)(a1 + 20040);
  v8 = *(_QWORD *)(a1 + 9048);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 9160) + 8)
     + 9 * *(_DWORD *)(*(_QWORD *)(a1 + 9104) + 8)
     + 6 * (*(_DWORD *)(*(_QWORD *)(a1 + 9216) + 8) + *(_DWORD *)(v8 + 8))
     + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 9328) + 8) + *(_DWORD *)(*(_QWORD *)(a1 + 9272) + 8))
     + 3 * *(_DWORD *)(*(_QWORD *)(a1 + 9384) + 8);
  if ((v5 & 1) != 0)
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 9064) + 12)
        + 9 * *(_DWORD *)(*(_QWORD *)(a1 + 9056) + 12)
        + 6 * (*(_DWORD *)(*(_QWORD *)(a1 + 9072) + 12) + *(_DWORD *)(v8 + 12))
        + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 9088) + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 9080) + 12))
        + 3 * *(_DWORD *)(*(_QWORD *)(a1 + 9096) + 12);
    *v6 = v9;
    *(_DWORD *)(a1 + 20060) = v10;
    v11 = v10 * (unint64_t)v9;
    if (*(_QWORD *)(a1 + 20048) < v11)
    {
      if (*v7)
        MEMORY[0x212BC6368](*v7, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 20040) = 0;
      v12 = (8 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 20048) = v12 >> 3;
      *v7 = operator new(v12, (std::align_val_t)0x20uLL);
      v9 = *v6;
      v10 = *(_DWORD *)(a1 + 20060);
    }
    v13 = v9 * v10;
    if (v13)
      bzero(*v7, 8 * v13);
    v14 = *(unsigned int *)(a1 + 2868);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = *(unsigned int **)(a1 + 10520);
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 2976) + 8 * v15);
        if (v17)
        {
          v18 = *(_QWORD *)(a1 + 2944);
          v19 = (*(_DWORD *)(a1 + 2968) * v15);
          v20 = (unsigned int *)(v18 + 16 * (v17 + v19));
          v21 = (unsigned int *)(v18 + 16 * v19);
          do
          {
            while (1)
            {
              v35 = *v16;
              v36 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v21);
              v37 = *(_QWORD *)(a1 + 2872) + 8 * *((_QWORD *)v21 + 1);
              v38 = *v6;
              v39 = *(_QWORD *)(a1 + 20040);
              if (*v16 >= v36)
                break;
              v22 = (int64x2_t *)(v39 + 8 * (v35 + (_DWORD)v38 * v36));
              v23.i64[0] = *(_QWORD *)(v37 + 16);
              v24 = *(int64x2_t *)(v37 + 24);
              v25.i64[0] = *(_QWORD *)(v37 + 64);
              v26 = *(int64x2_t *)(v37 + 48);
              v27 = *(int64x2_t *)(v37 + 72);
              v28.i64[0] = *(_QWORD *)(v37 + 112);
              v29 = *(int64x2_t *)(v37 + 96);
              v30 = *(int64x2_t *)(v37 + 120);
              v31 = vzip1q_s64(*(int64x2_t *)v37, v24);
              v32 = vzip2q_s64(*(int64x2_t *)v37, v24);
              v23.i64[1] = *(_QWORD *)(v37 + 40);
              v25.i64[1] = *(_QWORD *)(v37 + 88);
              v28.i64[1] = *(_QWORD *)(v37 + 136);
              v22[1] = vzip1q_s64(v26, v27);
              v22[2] = vzip1q_s64(v29, v30);
              *v22 = v31;
              v33 = (int64x2_t *)((char *)v22 + 8 * v38);
              v33[1] = vzip1q_s64(vdupq_laneq_s64(v26, 1), vdupq_laneq_s64(v27, 1));
              v33[2] = vzip2q_s64(v29, v30);
              *v33 = v32;
              v34 = &v22[v38];
              v34[1] = v25;
              v34[2] = v28;
              *v34 = v23;
              v21 += 4;
              if (v21 == v20)
                goto LABEL_12;
            }
            v40 = *(int64x2_t *)v37;
            v41 = (int64x2_t *)(v39 + 8 * (v36 + (_DWORD)v38 * v35));
            v42 = *(_OWORD *)(v37 + 24);
            v43 = *(_QWORD *)(v37 + 40);
            v44 = *(int64x2_t *)(v37 + 48);
            v45 = *(_QWORD *)(v37 + 64);
            v46 = *(_OWORD *)(v37 + 72);
            v47 = *(_QWORD *)(v37 + 88);
            v48 = *(int64x2_t *)(v37 + 96);
            v49 = *(_QWORD *)(v37 + 112);
            v50 = *(_OWORD *)(v37 + 120);
            v51 = *(_QWORD *)(v37 + 136);
            v41[1].i64[0] = *(_QWORD *)(v37 + 16);
            *v41 = v40;
            v52 = &v41->i8[8 * v38];
            *((_QWORD *)v52 + 2) = v43;
            *(_OWORD *)v52 = v42;
            v53 = &v41[v38];
            v53[1].i64[0] = v45;
            *v53 = v44;
            v54 = &v41->i8[24 * v38];
            *((_QWORD *)v54 + 2) = v47;
            *(_OWORD *)v54 = v46;
            v55 = &v41[2 * v38];
            v55[1].i64[0] = v49;
            *v55 = v48;
            v56 = &v41->i8[40 * v38];
            *((_QWORD *)v56 + 2) = v51;
            *(_OWORD *)v56 = v50;
            v21 += 4;
          }
          while (v21 != v20);
LABEL_12:
          v14 = *(unsigned int *)(a1 + 2868);
        }
        ++v15;
        ++v16;
      }
      while (v15 < v14);
    }
    v104 = *(unsigned int *)(a1 + 3876);
    if ((_DWORD)v104)
    {
      v105 = 0;
      v106 = *(unsigned int **)(a1 + 10544);
      do
      {
        v107 = *(_QWORD *)(*(_QWORD *)(a1 + 3984) + 8 * v105);
        if (v107)
        {
          v108 = *(_QWORD *)(a1 + 3952);
          v109 = (*(_DWORD *)(a1 + 3976) * v105);
          v110 = (unsigned int *)(v108 + 16 * (v107 + v109));
          v111 = (unsigned int *)(v108 + 16 * v109);
          do
          {
            while (1)
            {
              v130 = *v106;
              v131 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v111);
              v132 = *(_QWORD *)(a1 + 3880) + 8 * *((_QWORD *)v111 + 1);
              v133 = *v6;
              v134 = *(_QWORD *)(a1 + 20040);
              if (*v106 >= v131)
                break;
              v112.i64[0] = *(_QWORD *)(v132 + 16);
              v113 = (int64x2_t *)(v134 + 8 * (v130 + (_DWORD)v133 * v131));
              v114 = *(int64x2_t *)(v132 + 24);
              v115.i64[0] = *(_QWORD *)(v132 + 64);
              v116 = *(int64x2_t *)(v132 + 48);
              v117 = *(int64x2_t *)(v132 + 72);
              v118.i64[0] = *(_QWORD *)(v132 + 112);
              v119 = *(int64x2_t *)(v132 + 96);
              v120 = *(int64x2_t *)(v132 + 120);
              v121.i64[0] = *(_QWORD *)(v132 + 160);
              v122 = *(int64x2_t *)(v132 + 144);
              v123 = *(int64x2_t *)(v132 + 168);
              v124 = *(_QWORD *)(v132 + 208);
              v125 = *(_OWORD *)(v132 + 192);
              v126 = vzip1q_s64(*(int64x2_t *)v132, v114);
              v127 = vzip2q_s64(*(int64x2_t *)v132, v114);
              v112.i64[1] = *(_QWORD *)(v132 + 40);
              v115.i64[1] = *(_QWORD *)(v132 + 88);
              v118.i64[1] = *(_QWORD *)(v132 + 136);
              v121.i64[1] = *(_QWORD *)(v132 + 184);
              v113[2] = vzip1q_s64(v119, v120);
              v113[3] = vzip1q_s64(v122, v123);
              v113[4].i64[0] = v125;
              *v113 = v126;
              v113[1] = vzip1q_s64(v116, v117);
              v128 = (int64x2_t *)((char *)v113 + 8 * v133);
              v128[2] = vzip2q_s64(v119, v120);
              v128[3] = vzip2q_s64(v122, v123);
              *v128 = v127;
              v128[1] = vzip2q_s64(v116, v117);
              v128[4].i64[0] = *((_QWORD *)&v125 + 1);
              v129 = &v113[v133];
              v129[4].i64[0] = v124;
              v129[2] = v118;
              v129[3] = v121;
              *v129 = v112;
              v129[1] = v115;
              v111 += 4;
              if (v111 == v110)
                goto LABEL_38;
            }
            v135 = *(int64x2_t *)v132;
            v136 = (int64x2_t *)(v134 + 8 * (v131 + (_DWORD)v133 * v130));
            v137 = *(_OWORD *)(v132 + 24);
            v138 = *(_QWORD *)(v132 + 40);
            v139 = *(int64x2_t *)(v132 + 48);
            v140 = *(_QWORD *)(v132 + 64);
            v141 = *(_OWORD *)(v132 + 72);
            v142 = *(_QWORD *)(v132 + 88);
            v143 = *(int64x2_t *)(v132 + 96);
            v144 = *(_QWORD *)(v132 + 112);
            v145 = *(_OWORD *)(v132 + 120);
            v146 = *(_QWORD *)(v132 + 136);
            v147 = *(int64x2_t *)(v132 + 144);
            v148 = *(_QWORD *)(v132 + 160);
            v149 = *(_OWORD *)(v132 + 168);
            v150 = *(_QWORD *)(v132 + 184);
            v151 = *(int64x2_t *)(v132 + 192);
            v152 = *(_QWORD *)(v132 + 208);
            v136[1].i64[0] = *(_QWORD *)(v132 + 16);
            *v136 = v135;
            v153 = &v136->i8[8 * v133];
            *((_QWORD *)v153 + 2) = v138;
            *(_OWORD *)v153 = v137;
            v154 = &v136[v133];
            v154[1].i64[0] = v140;
            *v154 = v139;
            v155 = &v136->i8[24 * v133];
            *((_QWORD *)v155 + 2) = v142;
            *(_OWORD *)v155 = v141;
            v156 = &v136[2 * v133];
            v156[1].i64[0] = v144;
            *v156 = v143;
            v157 = &v136->i8[40 * v133];
            *((_QWORD *)v157 + 2) = v146;
            *(_OWORD *)v157 = v145;
            v158 = &v136[3 * v133];
            v158[1].i64[0] = v148;
            *v158 = v147;
            v159 = &v136->i8[56 * v133];
            *((_QWORD *)v159 + 2) = v150;
            *(_OWORD *)v159 = v149;
            v160 = &v136[4 * v133];
            v160[1].i64[0] = v152;
            *v160 = v151;
            v111 += 4;
          }
          while (v111 != v110);
LABEL_38:
          v104 = *(unsigned int *)(a1 + 3876);
        }
        ++v105;
        ++v106;
      }
      while (v105 < v104);
    }
    sub_20F61644C(a1 + 4872, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10664), *(unsigned int **)(a1 + 10568), 1);
    v218 = *(unsigned int *)(a1 + 5892);
    if ((_DWORD)v218)
    {
      v219 = 0;
      v220 = *(unsigned int **)(a1 + 10592);
      do
      {
        v221 = *(_QWORD *)(*(_QWORD *)(a1 + 6000) + 8 * v219);
        if (v221)
        {
          v222 = *(_QWORD *)(a1 + 5968);
          v223 = (*(_DWORD *)(a1 + 5992) * v219);
          v224 = (unsigned int *)(v222 + 16 * (v221 + v223));
          v225 = (unsigned int *)(v222 + 16 * v223);
          do
          {
            while (1)
            {
              v239 = *v220;
              v240 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v225);
              v241 = *(_QWORD *)(a1 + 5896) + 8 * *((_QWORD *)v225 + 1);
              v242 = *v6;
              v243 = *(_QWORD *)(a1 + 20040);
              if (*v220 >= v240)
                break;
              v226 = (int64x2_t *)(v243 + 8 * (v239 + (_DWORD)v242 * v240));
              v227.i64[0] = *(_QWORD *)(v241 + 16);
              v228 = *(int64x2_t *)(v241 + 24);
              v229.i64[0] = *(_QWORD *)(v241 + 64);
              v230 = *(int64x2_t *)(v241 + 48);
              v231 = *(int64x2_t *)(v241 + 72);
              v232.i64[0] = *(_QWORD *)(v241 + 112);
              v233 = *(int64x2_t *)(v241 + 96);
              v234 = *(int64x2_t *)(v241 + 120);
              v235 = vzip1q_s64(*(int64x2_t *)v241, v228);
              v236 = vzip2q_s64(*(int64x2_t *)v241, v228);
              v227.i64[1] = *(_QWORD *)(v241 + 40);
              v229.i64[1] = *(_QWORD *)(v241 + 88);
              v232.i64[1] = *(_QWORD *)(v241 + 136);
              v226[1] = vzip1q_s64(v230, v231);
              v226[2] = vzip1q_s64(v233, v234);
              *v226 = v235;
              v237 = (int64x2_t *)((char *)v226 + 8 * v242);
              v237[1] = vzip1q_s64(vdupq_laneq_s64(v230, 1), vdupq_laneq_s64(v231, 1));
              v237[2] = vzip2q_s64(v233, v234);
              *v237 = v236;
              v238 = &v226[v242];
              v238[1] = v229;
              v238[2] = v232;
              *v238 = v227;
              v225 += 4;
              if (v225 == v224)
                goto LABEL_58;
            }
            v244 = *(int64x2_t *)v241;
            v245 = (int64x2_t *)(v243 + 8 * (v240 + (_DWORD)v242 * v239));
            v246 = *(_OWORD *)(v241 + 24);
            v247 = *(_QWORD *)(v241 + 40);
            v248 = *(int64x2_t *)(v241 + 48);
            v249 = *(_QWORD *)(v241 + 64);
            v250 = *(_OWORD *)(v241 + 72);
            v251 = *(_QWORD *)(v241 + 88);
            v252 = *(int64x2_t *)(v241 + 96);
            v253 = *(_QWORD *)(v241 + 112);
            v254 = *(_OWORD *)(v241 + 120);
            v255 = *(_QWORD *)(v241 + 136);
            v245[1].i64[0] = *(_QWORD *)(v241 + 16);
            *v245 = v244;
            v256 = &v245->i8[8 * v242];
            *((_QWORD *)v256 + 2) = v247;
            *(_OWORD *)v256 = v246;
            v257 = &v245[v242];
            v257[1].i64[0] = v249;
            *v257 = v248;
            v258 = &v245->i8[24 * v242];
            *((_QWORD *)v258 + 2) = v251;
            *(_OWORD *)v258 = v250;
            v259 = &v245[2 * v242];
            v259[1].i64[0] = v253;
            *v259 = v252;
            v260 = &v245->i8[40 * v242];
            *((_QWORD *)v260 + 2) = v255;
            *(_OWORD *)v260 = v254;
            v225 += 4;
          }
          while (v225 != v224);
LABEL_58:
          v218 = *(unsigned int *)(a1 + 5892);
        }
        ++v219;
        ++v220;
      }
      while (v219 < v218);
    }
    v279 = *(unsigned int *)(a1 + 6900);
    if ((_DWORD)v279)
    {
      v280 = 0;
      v281 = *(unsigned int **)(a1 + 10616);
      do
      {
        v282 = *(_QWORD *)(*(_QWORD *)(a1 + 7008) + 8 * v280);
        if (v282)
        {
          v283 = *(_QWORD *)(a1 + 6976);
          v284 = (*(_DWORD *)(a1 + 7000) * v280);
          v285 = (unsigned int *)(v283 + 16 * (v282 + v284));
          v286 = (unsigned int *)(v283 + 16 * v284);
          do
          {
            while (1)
            {
              v297 = *v281;
              v298 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v286);
              v299 = *(_QWORD *)(a1 + 6904) + 8 * *((_QWORD *)v286 + 1);
              v300 = *v6;
              v301 = *(_QWORD *)(a1 + 20040);
              if (*v281 >= v298)
                break;
              v287 = (int64x2_t *)(v301 + 8 * (v297 + (_DWORD)v300 * v298));
              v288.i64[0] = *(_QWORD *)(v299 + 16);
              v289 = *(int64x2_t *)(v299 + 24);
              v290.i64[0] = *(_QWORD *)(v299 + 64);
              v291 = *(int64x2_t *)(v299 + 48);
              v292 = vzip1q_s64(*(int64x2_t *)v299, v289);
              v293 = vzip1q_s64(v291, *(int64x2_t *)(v299 + 72));
              v294 = vzip2q_s64(*(int64x2_t *)v299, v289);
              v289.i64[0] = vdupq_laneq_s64(v291, 1).u64[0];
              v289.i64[1] = *(_QWORD *)(v299 + 80);
              v288.i64[1] = *(_QWORD *)(v299 + 40);
              v290.i64[1] = *(_QWORD *)(v299 + 88);
              *v287 = v292;
              v287[1] = v293;
              v295 = (int64x2_t *)((char *)v287 + 8 * v300);
              *v295 = v294;
              v295[1] = v289;
              v296 = &v287[v300];
              *v296 = v288;
              v296[1] = v290;
              v286 += 4;
              if (v286 == v285)
                goto LABEL_78;
            }
            v302 = *(int64x2_t *)v299;
            v303 = (int64x2_t *)(v301 + 8 * (v298 + (_DWORD)v300 * v297));
            v304 = *(_OWORD *)(v299 + 24);
            v305 = *(_QWORD *)(v299 + 40);
            v306 = *(int64x2_t *)(v299 + 48);
            v307 = *(_QWORD *)(v299 + 64);
            v308 = *(_OWORD *)(v299 + 72);
            v309 = *(_QWORD *)(v299 + 88);
            v303[1].i64[0] = *(_QWORD *)(v299 + 16);
            *v303 = v302;
            v310 = &v303->i8[8 * v300];
            *((_QWORD *)v310 + 2) = v305;
            *(_OWORD *)v310 = v304;
            v311 = &v303[v300];
            v311[1].i64[0] = v307;
            *v311 = v306;
            v312 = &v303->i8[24 * v300];
            *((_QWORD *)v312 + 2) = v309;
            *(_OWORD *)v312 = v308;
            v286 += 4;
          }
          while (v286 != v285);
LABEL_78:
          v279 = *(unsigned int *)(a1 + 6900);
        }
        ++v280;
        ++v281;
      }
      while (v280 < v279);
    }
    v356 = *(unsigned int *)(a1 + 7908);
    if ((_DWORD)v356)
    {
      v357 = 0;
      v358 = *(unsigned int **)(a1 + 10640);
      do
      {
        v359 = *(_QWORD *)(*(_QWORD *)(a1 + 8016) + 8 * v357);
        if (v359)
        {
          v360 = *(_QWORD *)(a1 + 7984);
          v361 = (*(_DWORD *)(a1 + 8008) * v357);
          v362 = (unsigned int *)(v360 + 16 * (v359 + v361));
          v363 = (unsigned int *)(v360 + 16 * v361);
          do
          {
            while (1)
            {
              v374 = *v358;
              v375 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v363);
              v376 = *(_QWORD *)(a1 + 7912) + 8 * *((_QWORD *)v363 + 1);
              v377 = *v6;
              v378 = *(_QWORD *)(a1 + 20040);
              if (*v358 >= v375)
                break;
              v364 = (int64x2_t *)(v378 + 8 * (v374 + (_DWORD)v377 * v375));
              v365.i64[0] = *(_QWORD *)(v376 + 16);
              v366 = *(int64x2_t *)(v376 + 24);
              v367.i64[0] = *(_QWORD *)(v376 + 64);
              v368 = *(int64x2_t *)(v376 + 48);
              v369 = vzip1q_s64(*(int64x2_t *)v376, v366);
              v370 = vzip1q_s64(v368, *(int64x2_t *)(v376 + 72));
              v371 = vzip2q_s64(*(int64x2_t *)v376, v366);
              v366.i64[0] = vdupq_laneq_s64(v368, 1).u64[0];
              v366.i64[1] = *(_QWORD *)(v376 + 80);
              v365.i64[1] = *(_QWORD *)(v376 + 40);
              v367.i64[1] = *(_QWORD *)(v376 + 88);
              *v364 = v369;
              v364[1] = v370;
              v372 = (int64x2_t *)((char *)v364 + 8 * v377);
              *v372 = v371;
              v372[1] = v366;
              v373 = &v364[v377];
              *v373 = v365;
              v373[1] = v367;
              v363 += 4;
              if (v363 == v362)
                goto LABEL_98;
            }
            v379 = *(int64x2_t *)v376;
            v380 = (int64x2_t *)(v378 + 8 * (v375 + (_DWORD)v377 * v374));
            v381 = *(_OWORD *)(v376 + 24);
            v382 = *(_QWORD *)(v376 + 40);
            v383 = *(int64x2_t *)(v376 + 48);
            v384 = *(_QWORD *)(v376 + 64);
            v385 = *(_OWORD *)(v376 + 72);
            v386 = *(_QWORD *)(v376 + 88);
            v380[1].i64[0] = *(_QWORD *)(v376 + 16);
            *v380 = v379;
            v387 = &v380->i8[8 * v377];
            *((_QWORD *)v387 + 2) = v382;
            *(_OWORD *)v387 = v381;
            v388 = &v380[v377];
            v388[1].i64[0] = v384;
            *v388 = v383;
            v389 = &v380->i8[24 * v377];
            *((_QWORD *)v389 + 2) = v386;
            *(_OWORD *)v389 = v385;
            v363 += 4;
          }
          while (v363 != v362);
LABEL_98:
          v356 = *(unsigned int *)(a1 + 7908);
        }
        ++v357;
        ++v358;
      }
      while (v357 < v356);
    }
    v424 = *(unsigned int *)(a1 + 8916);
    if ((_DWORD)v424)
    {
      v425 = 0;
      v426 = *(unsigned int **)(a1 + 10664);
      do
      {
        v427 = *(_QWORD *)(*(_QWORD *)(a1 + 9024) + 8 * v425);
        if (v427)
        {
          v428 = *(_QWORD *)(a1 + 8992);
          v429 = (*(_DWORD *)(a1 + 9016) * v425);
          v430 = (unsigned int *)(v428 + 16 * (v427 + v429));
          v431 = (unsigned int *)(v428 + 16 * v429);
          do
          {
            v443 = *v426;
            v444 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v431);
            v445 = *(_QWORD *)(a1 + 8920) + 8 * *((_QWORD *)v431 + 1);
            v446 = *v6;
            v447 = *(_QWORD *)(a1 + 20040);
            if (*v426 < v444)
            {
              v432 = v443 + (_DWORD)v446 * v444;
              v433 = (int64x2_t *)(v447 + 8 * v432);
              v434.i64[0] = *(_QWORD *)(v445 + 16);
              v435 = *(_QWORD *)(v445 + 40);
              v436 = *(int64x2_t *)(v445 + 24);
              v437 = *(_QWORD *)(v445 + 64);
              v438 = *(_OWORD *)(v445 + 48);
              v439 = vzip1q_s64(*(int64x2_t *)v445, v436);
              v440 = vzip2q_s64(*(int64x2_t *)v445, v436);
              v433[1].i64[0] = v438;
              *v433 = v439;
              v441 = (int64x2_t *)((char *)v433 + 8 * v446);
              *v441 = v440;
              v441[1].i64[0] = *((_QWORD *)&v438 + 1);
            }
            else
            {
              v432 = v444 + (_DWORD)v446 * v443;
              v448 = (int64x2_t *)(v447 + 8 * v432);
              v449 = *(int64x2_t *)v445;
              v450 = *(_OWORD *)(v445 + 24);
              v451 = *(_QWORD *)(v445 + 40);
              v437 = *(_QWORD *)(v445 + 64);
              v434 = *(int8x16_t *)(v445 + 48);
              v435 = vextq_s8(v434, v434, 8uLL).u64[0];
              v448[1].i64[0] = *(_QWORD *)(v445 + 16);
              *v448 = v449;
              v452 = &v448->i8[8 * v446];
              *((_QWORD *)v452 + 2) = v451;
              *(_OWORD *)v452 = v450;
            }
            v442 = v447 + 8 * v432 + 16 * v446;
            *(_QWORD *)(v442 + 16) = v437;
            v434.i64[1] = v435;
            *(int8x16_t *)v442 = v434;
            v431 += 4;
          }
          while (v431 != v430);
          v424 = *(unsigned int *)(a1 + 8916);
        }
        ++v425;
        ++v426;
      }
      while (v425 < v424);
    }
    v487 = *(unsigned int *)(a1 + 2724);
    if ((_DWORD)v487)
    {
      v488 = 0;
      v489 = *(unsigned int **)(a1 + 10520);
      do
      {
        v490 = *(_QWORD *)(*(_QWORD *)(a1 + 2832) + 8 * v488);
        if (v490)
        {
          v491 = *(_QWORD *)(a1 + 2800);
          v492 = (*(_DWORD *)(a1 + 2824) * v488);
          v493 = (unsigned int *)(v491 + 16 * (v490 + v492));
          v494 = (unsigned int *)(v491 + 16 * v492);
          do
          {
            while (1)
            {
              v514 = *v489;
              v515 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v494);
              v516 = *(_QWORD *)(a1 + 2728) + 8 * *((_QWORD *)v494 + 1);
              v517 = *v6;
              v518 = *(_QWORD *)(a1 + 20040);
              if (*v489 >= v515)
                break;
              v495 = (int64x2_t *)(v518 + 8 * (v514 + (_DWORD)v517 * v515));
              v496 = *(int64x2_t *)(v516 + 16);
              v498 = *(int64x2_t *)(v516 + 32);
              v497 = *(int64x2_t *)(v516 + 48);
              v500 = *(int64x2_t *)(v516 + 64);
              v499 = *(int64x2_t *)(v516 + 80);
              v502 = *(int64x2_t *)(v516 + 128);
              v501 = *(int64x2_t *)(v516 + 144);
              v503 = vzip1q_s64(*(int64x2_t *)v516, v498);
              v504 = vzip1q_s64(v500, *(int64x2_t *)(v516 + 96));
              v505 = vzip1q_s64(v502, *(int64x2_t *)(v516 + 160));
              v500.i64[0] = vdupq_laneq_s64(v500, 1).u64[0];
              v500.i64[1] = *(_QWORD *)(v516 + 104);
              v506.i64[0] = vdupq_laneq_s64(v502, 1).u64[0];
              v507 = vzip2q_s64(*(int64x2_t *)v516, v498);
              v506.i64[1] = *(_QWORD *)(v516 + 168);
              v508 = vzip1q_s64(v499, *(int64x2_t *)(v516 + 112));
              v509 = vzip1q_s64(v501, *(int64x2_t *)(v516 + 176));
              v499.i64[0] = vdupq_laneq_s64(v499, 1).u64[0];
              v499.i64[1] = *(_QWORD *)(v516 + 120);
              v510.i64[0] = vdupq_laneq_s64(v501, 1).u64[0];
              v510.i64[1] = *(_QWORD *)(v516 + 184);
              v495[1] = v504;
              v495[2] = v505;
              *v495 = v503;
              v511 = (int64x2_t *)((char *)v495 + 8 * v517);
              v511[1] = v500;
              v511[2] = v506;
              *v511 = v507;
              v512 = &v495[v517];
              v512[1] = v508;
              v512[2] = v509;
              *v512 = vzip1q_s64(v496, v497);
              v513 = (int64x2_t *)((char *)v495 + 24 * v517);
              v513[1] = v499;
              v513[2] = v510;
              *v513 = vzip2q_s64(v496, v497);
              v494 += 4;
              if (v494 == v493)
                goto LABEL_138;
            }
            v519 = *(_OWORD *)(v516 + 16);
            v520 = (_OWORD *)(v518 + 8 * (v515 + (_DWORD)v517 * v514));
            v521 = *(_OWORD *)(v516 + 32);
            v522 = *(_OWORD *)(v516 + 48);
            v523 = *(_OWORD *)(v516 + 64);
            v524 = *(_OWORD *)(v516 + 80);
            v525 = *(_OWORD *)(v516 + 96);
            v526 = *(_OWORD *)(v516 + 112);
            v527 = *(_OWORD *)(v516 + 128);
            v528 = *(_OWORD *)(v516 + 144);
            v529 = *(_OWORD *)(v516 + 160);
            v530 = *(_OWORD *)(v516 + 176);
            *v520 = *(_OWORD *)v516;
            v520[1] = v519;
            v531 = (_OWORD *)((char *)v520 + 8 * v517);
            *v531 = v521;
            v531[1] = v522;
            v532 = &v520[v517];
            *v532 = v523;
            v532[1] = v524;
            v533 = (_OWORD *)((char *)v520 + 24 * v517);
            *v533 = v525;
            v533[1] = v526;
            v534 = &v520[2 * v517];
            *v534 = v527;
            v534[1] = v528;
            v535 = (_OWORD *)((char *)v520 + 40 * v517);
            *v535 = v529;
            v535[1] = v530;
            v494 += 4;
          }
          while (v494 != v493);
LABEL_138:
          v487 = *(unsigned int *)(a1 + 2724);
        }
        ++v488;
        ++v489;
      }
      while (v488 < v487);
    }
    v565 = *(unsigned int *)(a1 + 3732);
    if ((_DWORD)v565)
    {
      v566 = 0;
      v567 = *(unsigned int **)(a1 + 10544);
      do
      {
        v568 = *(_QWORD *)(*(_QWORD *)(a1 + 3840) + 8 * v566);
        if (v568)
        {
          v569 = *(_QWORD *)(a1 + 3808);
          v570 = (*(_DWORD *)(a1 + 3832) * v566);
          v571 = (unsigned int *)(v569 + 16 * (v568 + v570));
          v572 = (unsigned int *)(v569 + 16 * v570);
          do
          {
            while (1)
            {
              v597 = *v567;
              v598 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v572);
              v599 = *(_QWORD *)(a1 + 3736) + 8 * *((_QWORD *)v572 + 1);
              v600 = *v6;
              v601 = *(_QWORD *)(a1 + 20040);
              if (*v567 >= v598)
                break;
              v573 = *(int64x2_t *)(v599 + 16);
              v574 = (int64x2_t *)(v601 + 8 * (v597 + (_DWORD)v600 * v598));
              v576 = *(int64x2_t *)(v599 + 32);
              v575 = *(int64x2_t *)(v599 + 48);
              v578 = *(int64x2_t *)(v599 + 64);
              v577 = *(int64x2_t *)(v599 + 80);
              v580 = *(int64x2_t *)(v599 + 128);
              v579 = *(int64x2_t *)(v599 + 144);
              v582 = *(int64x2_t *)(v599 + 192);
              v581 = *(int64x2_t *)(v599 + 208);
              v584 = *(_OWORD *)(v599 + 256);
              v583 = *(_OWORD *)(v599 + 272);
              v585 = vzip1q_s64(*(int64x2_t *)v599, v576);
              v586 = vzip1q_s64(v578, *(int64x2_t *)(v599 + 96));
              v587 = vzip1q_s64(v582, *(int64x2_t *)(v599 + 224));
              v588 = vzip2q_s64(*(int64x2_t *)v599, v576);
              v576.i64[0] = vdupq_laneq_s64(v578, 1).u64[0];
              v576.i64[1] = *(_QWORD *)(v599 + 104);
              v578.i64[0] = vdupq_laneq_s64(v580, 1).u64[0];
              v578.i64[1] = *(_QWORD *)(v599 + 168);
              v589.i64[0] = vdupq_laneq_s64(v582, 1).u64[0];
              v589.i64[1] = *(_QWORD *)(v599 + 232);
              v590 = vzip1q_s64(v577, *(int64x2_t *)(v599 + 112));
              v591 = vzip1q_s64(v579, *(int64x2_t *)(v599 + 176));
              v592 = vzip1q_s64(v581, *(int64x2_t *)(v599 + 240));
              v577.i64[0] = vdupq_laneq_s64(v577, 1).u64[0];
              v577.i64[1] = *(_QWORD *)(v599 + 120);
              v593.i64[0] = vdupq_laneq_s64(v579, 1).u64[0];
              v593.i64[1] = *(_QWORD *)(v599 + 184);
              v579.i64[0] = vdupq_laneq_s64(v581, 1).u64[0];
              v579.i64[1] = *(_QWORD *)(v599 + 248);
              v574[2] = vzip1q_s64(v580, *(int64x2_t *)(v599 + 160));
              v574[3] = v587;
              v574[4].i64[0] = v584;
              *v574 = v585;
              v574[1] = v586;
              v594 = (int64x2_t *)((char *)v574 + 8 * v600);
              v594[2] = v578;
              v594[3] = v589;
              *v594 = v588;
              v594[1] = v576;
              v594[4].i64[0] = *((_QWORD *)&v584 + 1);
              v595 = &v574[v600];
              v595[4].i64[0] = v583;
              v595[2] = v591;
              v595[3] = v592;
              *v595 = vzip1q_s64(v573, v575);
              v595[1] = v590;
              v596 = (int64x2_t *)((char *)v574 + 24 * v600);
              v596[4].i64[0] = *((_QWORD *)&v583 + 1);
              v596[2] = v593;
              v596[3] = v579;
              *v596 = vzip2q_s64(v573, v575);
              v596[1] = v577;
              v572 += 4;
              if (v572 == v571)
                goto LABEL_158;
            }
            v602 = *(_OWORD *)(v599 + 16);
            v603 = (_OWORD *)(v601 + 8 * (v598 + (_DWORD)v600 * v597));
            v604 = *(_OWORD *)(v599 + 32);
            v605 = *(_OWORD *)(v599 + 48);
            v606 = *(_OWORD *)(v599 + 64);
            v607 = *(_OWORD *)(v599 + 80);
            v608 = *(_OWORD *)(v599 + 96);
            v609 = *(_OWORD *)(v599 + 112);
            v610 = *(_OWORD *)(v599 + 128);
            v611 = *(_OWORD *)(v599 + 144);
            v612 = *(_OWORD *)(v599 + 160);
            v613 = *(_OWORD *)(v599 + 176);
            v614 = *(_OWORD *)(v599 + 192);
            v615 = *(_OWORD *)(v599 + 208);
            v616 = *(_OWORD *)(v599 + 224);
            v617 = *(_OWORD *)(v599 + 240);
            v618 = *(_OWORD *)(v599 + 256);
            v619 = *(_OWORD *)(v599 + 272);
            *v603 = *(_OWORD *)v599;
            v603[1] = v602;
            v620 = (_OWORD *)((char *)v603 + 8 * v600);
            *v620 = v604;
            v620[1] = v605;
            v621 = &v603[v600];
            *v621 = v606;
            v621[1] = v607;
            v622 = (_OWORD *)((char *)v603 + 24 * v600);
            *v622 = v608;
            v622[1] = v609;
            v623 = &v603[2 * v600];
            *v623 = v610;
            v623[1] = v611;
            v624 = (_OWORD *)((char *)v603 + 40 * v600);
            *v624 = v612;
            v624[1] = v613;
            v625 = &v603[3 * v600];
            *v625 = v614;
            v625[1] = v615;
            v626 = (_OWORD *)((char *)v603 + 56 * v600);
            *v626 = v616;
            v626[1] = v617;
            v627 = &v603[4 * v600];
            *v627 = v618;
            v627[1] = v619;
            v572 += 4;
          }
          while (v572 != v571);
LABEL_158:
          v565 = *(unsigned int *)(a1 + 3732);
        }
        ++v566;
        ++v567;
      }
      while (v566 < v565);
    }
    v677 = *(unsigned int *)(a1 + 4740);
    if ((_DWORD)v677)
    {
      v678 = 0;
      v679 = *(unsigned int **)(a1 + 10568);
      do
      {
        v680 = *(_QWORD *)(*(_QWORD *)(a1 + 4848) + 8 * v678);
        if (v680)
        {
          v681 = *(_QWORD *)(a1 + 4816);
          v682 = (*(_DWORD *)(a1 + 4840) * v678);
          v683 = (unsigned int *)(v681 + 16 * (v680 + v682));
          v684 = (unsigned int *)(v681 + 16 * v682);
          do
          {
            while (1)
            {
              v686 = *v679;
              v687 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v684);
              v688 = (int8x16_t *)(*(_QWORD *)(a1 + 4744) + 8 * *((_QWORD *)v684 + 1));
              v689 = *v6;
              v690 = *(_QWORD *)(a1 + 20040);
              v692 = *v688;
              v691 = v688[1];
              if (*v679 >= v687)
                break;
              v685 = (_QWORD *)(v690 + 8 * (v686 + (_DWORD)v689 * v687));
              *v685 = v692.i64[0];
              v685[v689] = vextq_s8(v692, v692, 8uLL).u64[0];
              v685[2 * v689] = v691.i64[0];
              v685[3 * v689] = vextq_s8(v691, v691, 8uLL).u64[0];
              v684 += 4;
              if (v684 == v683)
                goto LABEL_178;
            }
            v693 = (int8x16_t *)(v690 + 8 * (v687 + (_DWORD)v689 * v686));
            *v693 = v692;
            v693[1] = v691;
            v684 += 4;
          }
          while (v684 != v683);
LABEL_178:
          v677 = *(unsigned int *)(a1 + 4740);
        }
        ++v678;
        ++v679;
      }
      while (v678 < v677);
    }
    v757 = *(unsigned int *)(a1 + 5748);
    if ((_DWORD)v757)
    {
      v758 = 0;
      v759 = *(unsigned int **)(a1 + 10592);
      do
      {
        v760 = *(_QWORD *)(*(_QWORD *)(a1 + 5856) + 8 * v758);
        if (v760)
        {
          v761 = *(_QWORD *)(a1 + 5824);
          v762 = (*(_DWORD *)(a1 + 5848) * v758);
          v763 = (unsigned int *)(v761 + 16 * (v760 + v762));
          v764 = (unsigned int *)(v761 + 16 * v762);
          do
          {
            while (1)
            {
              v784 = *v759;
              v785 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v764);
              v786 = *(_QWORD *)(a1 + 5752) + 8 * *((_QWORD *)v764 + 1);
              v787 = *v6;
              v788 = *(_QWORD *)(a1 + 20040);
              if (*v759 >= v785)
                break;
              v765 = (int64x2_t *)(v788 + 8 * (v784 + (_DWORD)v787 * v785));
              v766 = *(int64x2_t *)(v786 + 16);
              v768 = *(int64x2_t *)(v786 + 32);
              v767 = *(int64x2_t *)(v786 + 48);
              v770 = *(int64x2_t *)(v786 + 64);
              v769 = *(int64x2_t *)(v786 + 80);
              v772 = *(int64x2_t *)(v786 + 128);
              v771 = *(int64x2_t *)(v786 + 144);
              v773 = vzip1q_s64(*(int64x2_t *)v786, v768);
              v774 = vzip1q_s64(v770, *(int64x2_t *)(v786 + 96));
              v775 = vzip1q_s64(v772, *(int64x2_t *)(v786 + 160));
              v770.i64[0] = vdupq_laneq_s64(v770, 1).u64[0];
              v770.i64[1] = *(_QWORD *)(v786 + 104);
              v776.i64[0] = vdupq_laneq_s64(v772, 1).u64[0];
              v777 = vzip2q_s64(*(int64x2_t *)v786, v768);
              v776.i64[1] = *(_QWORD *)(v786 + 168);
              v778 = vzip1q_s64(v769, *(int64x2_t *)(v786 + 112));
              v779 = vzip1q_s64(v771, *(int64x2_t *)(v786 + 176));
              v769.i64[0] = vdupq_laneq_s64(v769, 1).u64[0];
              v769.i64[1] = *(_QWORD *)(v786 + 120);
              v780.i64[0] = vdupq_laneq_s64(v771, 1).u64[0];
              v780.i64[1] = *(_QWORD *)(v786 + 184);
              v765[1] = v774;
              v765[2] = v775;
              *v765 = v773;
              v781 = (int64x2_t *)((char *)v765 + 8 * v787);
              v781[1] = v770;
              v781[2] = v776;
              *v781 = v777;
              v782 = &v765[v787];
              v782[1] = v778;
              v782[2] = v779;
              *v782 = vzip1q_s64(v766, v767);
              v783 = (int64x2_t *)((char *)v765 + 24 * v787);
              v783[1] = v769;
              v783[2] = v780;
              *v783 = vzip2q_s64(v766, v767);
              v764 += 4;
              if (v764 == v763)
                goto LABEL_198;
            }
            v789 = *(_OWORD *)(v786 + 16);
            v790 = (_OWORD *)(v788 + 8 * (v785 + (_DWORD)v787 * v784));
            v791 = *(_OWORD *)(v786 + 32);
            v792 = *(_OWORD *)(v786 + 48);
            v793 = *(_OWORD *)(v786 + 64);
            v794 = *(_OWORD *)(v786 + 80);
            v795 = *(_OWORD *)(v786 + 96);
            v796 = *(_OWORD *)(v786 + 112);
            v797 = *(_OWORD *)(v786 + 128);
            v798 = *(_OWORD *)(v786 + 144);
            v799 = *(_OWORD *)(v786 + 160);
            v800 = *(_OWORD *)(v786 + 176);
            *v790 = *(_OWORD *)v786;
            v790[1] = v789;
            v801 = (_OWORD *)((char *)v790 + 8 * v787);
            *v801 = v791;
            v801[1] = v792;
            v802 = &v790[v787];
            *v802 = v793;
            v802[1] = v794;
            v803 = (_OWORD *)((char *)v790 + 24 * v787);
            *v803 = v795;
            v803[1] = v796;
            v804 = &v790[2 * v787];
            *v804 = v797;
            v804[1] = v798;
            v805 = (_OWORD *)((char *)v790 + 40 * v787);
            *v805 = v799;
            v805[1] = v800;
            v764 += 4;
          }
          while (v764 != v763);
LABEL_198:
          v757 = *(unsigned int *)(a1 + 5748);
        }
        ++v758;
        ++v759;
      }
      while (v758 < v757);
    }
    v823 = *(unsigned int *)(a1 + 6756);
    if ((_DWORD)v823)
    {
      v824 = 0;
      v825 = *(unsigned int **)(a1 + 10616);
      do
      {
        v826 = *(_QWORD *)(*(_QWORD *)(a1 + 6864) + 8 * v824);
        if (v826)
        {
          v827 = *(_QWORD *)(a1 + 6832);
          v828 = (*(_DWORD *)(a1 + 6856) * v824);
          v829 = (unsigned int *)(v827 + 16 * (v826 + v828));
          v830 = (unsigned int *)(v827 + 16 * v828);
          do
          {
            v847 = *v825;
            v848 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v830);
            v849 = *(_QWORD *)(a1 + 6760) + 8 * *((_QWORD *)v830 + 1);
            v850 = *v6;
            v851 = *(_QWORD *)(a1 + 20040);
            if (*v825 < v848)
            {
              v831 = (int64x2_t *)(v851 + 8 * (v847 + (_DWORD)v850 * v848));
              v832 = *(int64x2_t *)(v849 + 16);
              v833 = *(int64x2_t *)(v849 + 32);
              v834 = *(int64x2_t *)(v849 + 48);
              v836 = *(int64x2_t *)(v849 + 64);
              v835 = *(int64x2_t *)(v849 + 80);
              v837 = vzip1q_s64(*(int64x2_t *)v849, v833);
              v838 = vzip1q_s64(v836, *(int64x2_t *)(v849 + 96));
              v839 = vzip2q_s64(*(int64x2_t *)v849, v833);
              v836.i64[0] = vdupq_laneq_s64(v836, 1).u64[0];
              v836.i64[1] = *(_QWORD *)(v849 + 104);
              v840 = vzip1q_s64(v832, v834);
              v841 = vzip1q_s64(v835, *(int64x2_t *)(v849 + 112));
              v842.i64[0] = vdupq_laneq_s64(v835, 1).u64[0];
              v842.i64[1] = *(_QWORD *)(v849 + 120);
              v843 = vzip2q_s64(v832, v834);
              *v831 = v837;
              v831[1] = v838;
              v844 = (int64x2_t *)((char *)v831 + 8 * v850);
              *v844 = v839;
              v844[1] = v836;
            }
            else
            {
              v852 = *(int64x2_t *)(v849 + 16);
              v831 = (int64x2_t *)(v851 + 8 * (v848 + (_DWORD)v850 * v847));
              v853 = *(_OWORD *)(v849 + 32);
              v854 = *(_OWORD *)(v849 + 48);
              v840 = *(int64x2_t *)(v849 + 64);
              v841 = *(int64x2_t *)(v849 + 80);
              v843 = *(int64x2_t *)(v849 + 96);
              v842 = *(int64x2_t *)(v849 + 112);
              *v831 = *(int64x2_t *)v849;
              v831[1] = v852;
              v855 = &v831->i8[8 * v850];
              *(_OWORD *)v855 = v853;
              *((_OWORD *)v855 + 1) = v854;
            }
            v845 = &v831[v850];
            *v845 = v840;
            v845[1] = v841;
            v846 = (int64x2_t *)((char *)v831 + 24 * v850);
            *v846 = v843;
            v846[1] = v842;
            v830 += 4;
          }
          while (v830 != v829);
          v823 = *(unsigned int *)(a1 + 6756);
        }
        ++v824;
        ++v825;
      }
      while (v824 < v823);
    }
    v905 = *(unsigned int *)(a1 + 7764);
    if ((_DWORD)v905)
    {
      v906 = 0;
      v907 = *(unsigned int **)(a1 + 10640);
      do
      {
        v908 = *(_QWORD *)(*(_QWORD *)(a1 + 7872) + 8 * v906);
        if (v908)
        {
          v909 = *(_QWORD *)(a1 + 7840);
          v910 = (*(_DWORD *)(a1 + 7864) * v906);
          v911 = (unsigned int *)(v909 + 16 * (v908 + v910));
          v912 = (unsigned int *)(v909 + 16 * v910);
          do
          {
            v929 = *v907;
            v930 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v912);
            v931 = *(_QWORD *)(a1 + 7768) + 8 * *((_QWORD *)v912 + 1);
            v932 = *v6;
            v933 = *(_QWORD *)(a1 + 20040);
            if (*v907 < v930)
            {
              v913 = (int64x2_t *)(v933 + 8 * (v929 + (_DWORD)v932 * v930));
              v914 = *(int64x2_t *)(v931 + 16);
              v915 = *(int64x2_t *)(v931 + 32);
              v916 = *(int64x2_t *)(v931 + 48);
              v918 = *(int64x2_t *)(v931 + 64);
              v917 = *(int64x2_t *)(v931 + 80);
              v919 = vzip1q_s64(*(int64x2_t *)v931, v915);
              v920 = vzip1q_s64(v918, *(int64x2_t *)(v931 + 96));
              v921 = vzip2q_s64(*(int64x2_t *)v931, v915);
              v918.i64[0] = vdupq_laneq_s64(v918, 1).u64[0];
              v918.i64[1] = *(_QWORD *)(v931 + 104);
              v922 = vzip1q_s64(v914, v916);
              v923 = vzip1q_s64(v917, *(int64x2_t *)(v931 + 112));
              v924.i64[0] = vdupq_laneq_s64(v917, 1).u64[0];
              v924.i64[1] = *(_QWORD *)(v931 + 120);
              v925 = vzip2q_s64(v914, v916);
              *v913 = v919;
              v913[1] = v920;
              v926 = (int64x2_t *)((char *)v913 + 8 * v932);
              *v926 = v921;
              v926[1] = v918;
            }
            else
            {
              v934 = *(int64x2_t *)(v931 + 16);
              v913 = (int64x2_t *)(v933 + 8 * (v930 + (_DWORD)v932 * v929));
              v935 = *(_OWORD *)(v931 + 32);
              v936 = *(_OWORD *)(v931 + 48);
              v922 = *(int64x2_t *)(v931 + 64);
              v923 = *(int64x2_t *)(v931 + 80);
              v925 = *(int64x2_t *)(v931 + 96);
              v924 = *(int64x2_t *)(v931 + 112);
              *v913 = *(int64x2_t *)v931;
              v913[1] = v934;
              v937 = &v913->i8[8 * v932];
              *(_OWORD *)v937 = v935;
              *((_OWORD *)v937 + 1) = v936;
            }
            v927 = &v913[v932];
            *v927 = v922;
            v927[1] = v923;
            v928 = (int64x2_t *)((char *)v913 + 24 * v932);
            *v928 = v925;
            v928[1] = v924;
            v912 += 4;
          }
          while (v912 != v911);
          v905 = *(unsigned int *)(a1 + 7764);
        }
        ++v906;
        ++v907;
      }
      while (v906 < v905);
    }
    v971 = *(unsigned int *)(a1 + 8772);
    if ((_DWORD)v971)
    {
      v972 = 0;
      v973 = *(unsigned int **)(a1 + 10664);
      do
      {
        v974 = *(_QWORD *)(*(_QWORD *)(a1 + 8880) + 8 * v972);
        if (v974)
        {
          v975 = *(_QWORD *)(a1 + 8848);
          v976 = (*(_DWORD *)(a1 + 8872) * v972);
          v977 = (unsigned int *)(v975 + 16 * (v974 + v976));
          v978 = (unsigned int *)(v975 + 16 * v976);
          do
          {
            while (1)
            {
              v990 = *v973;
              v991 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v978);
              v992 = *(_QWORD *)(a1 + 8776) + 8 * *((_QWORD *)v978 + 1);
              v993 = *v6;
              v994 = *(_QWORD *)(a1 + 20040);
              if (*v973 >= v991)
                break;
              v979 = (int64x2_t *)(v994 + 8 * (v990 + (_DWORD)v993 * v991));
              v980 = *(int64x2_t *)(v992 + 16);
              v982 = *(int64x2_t *)(v992 + 32);
              v981 = *(int64x2_t *)(v992 + 48);
              v984 = *(_OWORD *)(v992 + 64);
              v983 = *(_OWORD *)(v992 + 80);
              v985 = vzip1q_s64(*(int64x2_t *)v992, v982);
              v986 = vzip2q_s64(*(int64x2_t *)v992, v982);
              v979[1].i64[0] = v984;
              *v979 = v985;
              v987 = (int64x2_t *)((char *)v979 + 8 * v993);
              *v987 = v986;
              v987[1].i64[0] = *((_QWORD *)&v984 + 1);
              v988 = &v979[v993];
              v988[1].i64[0] = v983;
              *v988 = vzip1q_s64(v980, v981);
              v989 = (int64x2_t *)((char *)v979 + 24 * v993);
              v989[1].i64[0] = *((_QWORD *)&v983 + 1);
              *v989 = vzip2q_s64(v980, v981);
              v978 += 4;
              if (v978 == v977)
                goto LABEL_258;
            }
            v995 = *(_OWORD *)(v992 + 16);
            v996 = (_OWORD *)(v994 + 8 * (v991 + (_DWORD)v993 * v990));
            v997 = *(_OWORD *)(v992 + 32);
            v998 = *(_OWORD *)(v992 + 48);
            v999 = *(_OWORD *)(v992 + 64);
            v1000 = *(_OWORD *)(v992 + 80);
            *v996 = *(_OWORD *)v992;
            v996[1] = v995;
            v1001 = (_OWORD *)((char *)v996 + 8 * v993);
            *v1001 = v997;
            v1001[1] = v998;
            v1002 = &v996[v993];
            *v1002 = v999;
            v1002[1] = v1000;
            v978 += 4;
          }
          while (v978 != v977);
LABEL_258:
          v971 = *(unsigned int *)(a1 + 8772);
        }
        ++v972;
        ++v973;
      }
      while (v972 < v971);
    }
    v1036 = *(unsigned int *)(a1 + 2580);
    if ((_DWORD)v1036)
    {
      v1037 = 0;
      v1038 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1039 = *(_QWORD *)(*(_QWORD *)(a1 + 2688) + 8 * v1037);
        if (v1039)
        {
          v1040 = *(_QWORD *)(a1 + 2656);
          v1041 = (*(_DWORD *)(a1 + 2680) * v1037);
          v1042 = (unsigned int *)(v1040 + 16 * (v1039 + v1041));
          v1043 = (unsigned int *)(v1040 + 16 * v1041);
          do
          {
            while (1)
            {
              v1063 = *v1038;
              v1064 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1043);
              v1065 = *(_QWORD *)(a1 + 2584) + 8 * *((_QWORD *)v1043 + 1);
              v1066 = *v6;
              v1067 = *(_QWORD *)(a1 + 20040);
              if (*v1038 >= v1064)
                break;
              v1044 = (int64x2_t *)(v1067 + 8 * (v1063 + (_DWORD)v1066 * v1064));
              v1045 = *(int64x2_t *)(v1065 + 16);
              v1047 = *(int64x2_t *)(v1065 + 32);
              v1046 = *(int64x2_t *)(v1065 + 48);
              v1049 = *(int64x2_t *)(v1065 + 64);
              v1048 = *(int64x2_t *)(v1065 + 80);
              v1051 = *(int64x2_t *)(v1065 + 128);
              v1050 = *(int64x2_t *)(v1065 + 144);
              v1052 = vzip1q_s64(*(int64x2_t *)v1065, v1047);
              v1053 = vzip1q_s64(v1049, *(int64x2_t *)(v1065 + 96));
              v1054 = vzip1q_s64(v1051, *(int64x2_t *)(v1065 + 160));
              v1049.i64[0] = vdupq_laneq_s64(v1049, 1).u64[0];
              v1049.i64[1] = *(_QWORD *)(v1065 + 104);
              v1055.i64[0] = vdupq_laneq_s64(v1051, 1).u64[0];
              v1056 = vzip2q_s64(*(int64x2_t *)v1065, v1047);
              v1055.i64[1] = *(_QWORD *)(v1065 + 168);
              v1057 = vzip1q_s64(v1048, *(int64x2_t *)(v1065 + 112));
              v1058 = vzip1q_s64(v1050, *(int64x2_t *)(v1065 + 176));
              v1048.i64[0] = vdupq_laneq_s64(v1048, 1).u64[0];
              v1048.i64[1] = *(_QWORD *)(v1065 + 120);
              v1059.i64[0] = vdupq_laneq_s64(v1050, 1).u64[0];
              v1059.i64[1] = *(_QWORD *)(v1065 + 184);
              v1044[1] = v1053;
              v1044[2] = v1054;
              *v1044 = v1052;
              v1060 = (int64x2_t *)((char *)v1044 + 8 * v1066);
              v1060[1] = v1049;
              v1060[2] = v1055;
              *v1060 = v1056;
              v1061 = &v1044[v1066];
              v1061[1] = v1057;
              v1061[2] = v1058;
              *v1061 = vzip1q_s64(v1045, v1046);
              v1062 = (int64x2_t *)((char *)v1044 + 24 * v1066);
              v1062[1] = v1048;
              v1062[2] = v1059;
              *v1062 = vzip2q_s64(v1045, v1046);
              v1043 += 4;
              if (v1043 == v1042)
                goto LABEL_278;
            }
            v1068 = *(_OWORD *)(v1065 + 16);
            v1069 = (_OWORD *)(v1067 + 8 * (v1064 + (_DWORD)v1066 * v1063));
            v1070 = *(_OWORD *)(v1065 + 32);
            v1071 = *(_OWORD *)(v1065 + 48);
            v1072 = *(_OWORD *)(v1065 + 64);
            v1073 = *(_OWORD *)(v1065 + 80);
            v1074 = *(_OWORD *)(v1065 + 96);
            v1075 = *(_OWORD *)(v1065 + 112);
            v1076 = *(_OWORD *)(v1065 + 128);
            v1077 = *(_OWORD *)(v1065 + 144);
            v1078 = *(_OWORD *)(v1065 + 160);
            v1079 = *(_OWORD *)(v1065 + 176);
            *v1069 = *(_OWORD *)v1065;
            v1069[1] = v1068;
            v1080 = (_OWORD *)((char *)v1069 + 8 * v1066);
            *v1080 = v1070;
            v1080[1] = v1071;
            v1081 = &v1069[v1066];
            *v1081 = v1072;
            v1081[1] = v1073;
            v1082 = (_OWORD *)((char *)v1069 + 24 * v1066);
            *v1082 = v1074;
            v1082[1] = v1075;
            v1083 = &v1069[2 * v1066];
            *v1083 = v1076;
            v1083[1] = v1077;
            v1084 = (_OWORD *)((char *)v1069 + 40 * v1066);
            *v1084 = v1078;
            v1084[1] = v1079;
            v1043 += 4;
          }
          while (v1043 != v1042);
LABEL_278:
          v1036 = *(unsigned int *)(a1 + 2580);
        }
        ++v1037;
        ++v1038;
      }
      while (v1037 < v1036);
    }
    v1117 = *(unsigned int *)(a1 + 3588);
    if ((_DWORD)v1117)
    {
      v1118 = 0;
      v1119 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1120 = *(_QWORD *)(*(_QWORD *)(a1 + 3696) + 8 * v1118);
        if (v1120)
        {
          v1121 = *(_QWORD *)(a1 + 3664);
          v1122 = (*(_DWORD *)(a1 + 3688) * v1118);
          v1123 = (unsigned int *)(v1121 + 16 * (v1120 + v1122));
          v1124 = (unsigned int *)(v1121 + 16 * v1122);
          do
          {
            while (1)
            {
              v1149 = *v1119;
              v1150 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1124);
              v1151 = *(_QWORD *)(a1 + 3592) + 8 * *((_QWORD *)v1124 + 1);
              v1152 = *v6;
              v1153 = *(_QWORD *)(a1 + 20040);
              if (*v1119 >= v1150)
                break;
              v1125 = *(int64x2_t *)(v1151 + 16);
              v1126 = (int64x2_t *)(v1153 + 8 * (v1149 + (_DWORD)v1152 * v1150));
              v1128 = *(int64x2_t *)(v1151 + 32);
              v1127 = *(int64x2_t *)(v1151 + 48);
              v1130 = *(int64x2_t *)(v1151 + 64);
              v1129 = *(int64x2_t *)(v1151 + 80);
              v1132 = *(int64x2_t *)(v1151 + 128);
              v1131 = *(int64x2_t *)(v1151 + 144);
              v1134 = *(int64x2_t *)(v1151 + 192);
              v1133 = *(int64x2_t *)(v1151 + 208);
              v1136 = *(_OWORD *)(v1151 + 256);
              v1135 = *(_OWORD *)(v1151 + 272);
              v1137 = vzip1q_s64(*(int64x2_t *)v1151, v1128);
              v1138 = vzip1q_s64(v1130, *(int64x2_t *)(v1151 + 96));
              v1139 = vzip1q_s64(v1134, *(int64x2_t *)(v1151 + 224));
              v1140 = vzip2q_s64(*(int64x2_t *)v1151, v1128);
              v1128.i64[0] = vdupq_laneq_s64(v1130, 1).u64[0];
              v1128.i64[1] = *(_QWORD *)(v1151 + 104);
              v1130.i64[0] = vdupq_laneq_s64(v1132, 1).u64[0];
              v1130.i64[1] = *(_QWORD *)(v1151 + 168);
              v1141.i64[0] = vdupq_laneq_s64(v1134, 1).u64[0];
              v1141.i64[1] = *(_QWORD *)(v1151 + 232);
              v1142 = vzip1q_s64(v1129, *(int64x2_t *)(v1151 + 112));
              v1143 = vzip1q_s64(v1131, *(int64x2_t *)(v1151 + 176));
              v1144 = vzip1q_s64(v1133, *(int64x2_t *)(v1151 + 240));
              v1129.i64[0] = vdupq_laneq_s64(v1129, 1).u64[0];
              v1129.i64[1] = *(_QWORD *)(v1151 + 120);
              v1145.i64[0] = vdupq_laneq_s64(v1131, 1).u64[0];
              v1145.i64[1] = *(_QWORD *)(v1151 + 184);
              v1131.i64[0] = vdupq_laneq_s64(v1133, 1).u64[0];
              v1131.i64[1] = *(_QWORD *)(v1151 + 248);
              v1126[2] = vzip1q_s64(v1132, *(int64x2_t *)(v1151 + 160));
              v1126[3] = v1139;
              v1126[4].i64[0] = v1136;
              *v1126 = v1137;
              v1126[1] = v1138;
              v1146 = (int64x2_t *)((char *)v1126 + 8 * v1152);
              v1146[2] = v1130;
              v1146[3] = v1141;
              *v1146 = v1140;
              v1146[1] = v1128;
              v1146[4].i64[0] = *((_QWORD *)&v1136 + 1);
              v1147 = &v1126[v1152];
              v1147[4].i64[0] = v1135;
              v1147[2] = v1143;
              v1147[3] = v1144;
              *v1147 = vzip1q_s64(v1125, v1127);
              v1147[1] = v1142;
              v1148 = (int64x2_t *)((char *)v1126 + 24 * v1152);
              v1148[4].i64[0] = *((_QWORD *)&v1135 + 1);
              v1148[2] = v1145;
              v1148[3] = v1131;
              *v1148 = vzip2q_s64(v1125, v1127);
              v1148[1] = v1129;
              v1124 += 4;
              if (v1124 == v1123)
                goto LABEL_298;
            }
            v1154 = *(_OWORD *)(v1151 + 16);
            v1155 = (_OWORD *)(v1153 + 8 * (v1150 + (_DWORD)v1152 * v1149));
            v1156 = *(_OWORD *)(v1151 + 32);
            v1157 = *(_OWORD *)(v1151 + 48);
            v1158 = *(_OWORD *)(v1151 + 64);
            v1159 = *(_OWORD *)(v1151 + 80);
            v1160 = *(_OWORD *)(v1151 + 96);
            v1161 = *(_OWORD *)(v1151 + 112);
            v1162 = *(_OWORD *)(v1151 + 128);
            v1163 = *(_OWORD *)(v1151 + 144);
            v1164 = *(_OWORD *)(v1151 + 160);
            v1165 = *(_OWORD *)(v1151 + 176);
            v1166 = *(_OWORD *)(v1151 + 192);
            v1167 = *(_OWORD *)(v1151 + 208);
            v1168 = *(_OWORD *)(v1151 + 224);
            v1169 = *(_OWORD *)(v1151 + 240);
            v1170 = *(_OWORD *)(v1151 + 256);
            v1171 = *(_OWORD *)(v1151 + 272);
            *v1155 = *(_OWORD *)v1151;
            v1155[1] = v1154;
            v1172 = (_OWORD *)((char *)v1155 + 8 * v1152);
            *v1172 = v1156;
            v1172[1] = v1157;
            v1173 = &v1155[v1152];
            *v1173 = v1158;
            v1173[1] = v1159;
            v1174 = (_OWORD *)((char *)v1155 + 24 * v1152);
            *v1174 = v1160;
            v1174[1] = v1161;
            v1175 = &v1155[2 * v1152];
            *v1175 = v1162;
            v1175[1] = v1163;
            v1176 = (_OWORD *)((char *)v1155 + 40 * v1152);
            *v1176 = v1164;
            v1176[1] = v1165;
            v1177 = &v1155[3 * v1152];
            *v1177 = v1166;
            v1177[1] = v1167;
            v1178 = (_OWORD *)((char *)v1155 + 56 * v1152);
            *v1178 = v1168;
            v1178[1] = v1169;
            v1179 = &v1155[4 * v1152];
            *v1179 = v1170;
            v1179[1] = v1171;
            v1124 += 4;
          }
          while (v1124 != v1123);
LABEL_298:
          v1117 = *(unsigned int *)(a1 + 3588);
        }
        ++v1118;
        ++v1119;
      }
      while (v1118 < v1117);
    }
    v1229 = *(unsigned int *)(a1 + 4596);
    if ((_DWORD)v1229)
    {
      v1230 = 0;
      v1231 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1232 = *(_QWORD *)(*(_QWORD *)(a1 + 4704) + 8 * v1230);
        if (v1232)
        {
          v1233 = *(_QWORD *)(a1 + 4672);
          v1234 = (*(_DWORD *)(a1 + 4696) * v1230);
          v1235 = (unsigned int *)(v1233 + 16 * (v1232 + v1234));
          v1236 = (unsigned int *)(v1233 + 16 * v1234);
          do
          {
            while (1)
            {
              v1238 = *v1231;
              v1239 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1236);
              v1240 = (int8x16_t *)(*(_QWORD *)(a1 + 4600) + 8 * *((_QWORD *)v1236 + 1));
              v1241 = *v6;
              v1242 = *(_QWORD *)(a1 + 20040);
              v1244 = *v1240;
              v1243 = v1240[1];
              if (*v1231 >= v1239)
                break;
              v1237 = (_QWORD *)(v1242 + 8 * (v1238 + (_DWORD)v1241 * v1239));
              *v1237 = v1244.i64[0];
              v1237[v1241] = vextq_s8(v1244, v1244, 8uLL).u64[0];
              v1237[2 * v1241] = v1243.i64[0];
              v1237[3 * v1241] = vextq_s8(v1243, v1243, 8uLL).u64[0];
              v1236 += 4;
              if (v1236 == v1235)
                goto LABEL_318;
            }
            v1245 = (int8x16_t *)(v1242 + 8 * (v1239 + (_DWORD)v1241 * v1238));
            *v1245 = v1244;
            v1245[1] = v1243;
            v1236 += 4;
          }
          while (v1236 != v1235);
LABEL_318:
          v1229 = *(unsigned int *)(a1 + 4596);
        }
        ++v1230;
        ++v1231;
      }
      while (v1230 < v1229);
    }
    v1309 = *(unsigned int *)(a1 + 5604);
    if ((_DWORD)v1309)
    {
      v1310 = 0;
      v1311 = *(unsigned int **)(a1 + 10592);
      do
      {
        v1312 = *(_QWORD *)(*(_QWORD *)(a1 + 5712) + 8 * v1310);
        if (v1312)
        {
          v1313 = *(_QWORD *)(a1 + 5680);
          v1314 = (*(_DWORD *)(a1 + 5704) * v1310);
          v1315 = (unsigned int *)(v1313 + 16 * (v1312 + v1314));
          v1316 = (unsigned int *)(v1313 + 16 * v1314);
          do
          {
            while (1)
            {
              v1336 = *v1311;
              v1337 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1316);
              v1338 = *(_QWORD *)(a1 + 5608) + 8 * *((_QWORD *)v1316 + 1);
              v1339 = *v6;
              v1340 = *(_QWORD *)(a1 + 20040);
              if (*v1311 >= v1337)
                break;
              v1317 = (int64x2_t *)(v1340 + 8 * (v1336 + (_DWORD)v1339 * v1337));
              v1318 = *(int64x2_t *)(v1338 + 16);
              v1320 = *(int64x2_t *)(v1338 + 32);
              v1319 = *(int64x2_t *)(v1338 + 48);
              v1322 = *(int64x2_t *)(v1338 + 64);
              v1321 = *(int64x2_t *)(v1338 + 80);
              v1324 = *(int64x2_t *)(v1338 + 128);
              v1323 = *(int64x2_t *)(v1338 + 144);
              v1325 = vzip1q_s64(*(int64x2_t *)v1338, v1320);
              v1326 = vzip1q_s64(v1322, *(int64x2_t *)(v1338 + 96));
              v1327 = vzip1q_s64(v1324, *(int64x2_t *)(v1338 + 160));
              v1322.i64[0] = vdupq_laneq_s64(v1322, 1).u64[0];
              v1322.i64[1] = *(_QWORD *)(v1338 + 104);
              v1328.i64[0] = vdupq_laneq_s64(v1324, 1).u64[0];
              v1329 = vzip2q_s64(*(int64x2_t *)v1338, v1320);
              v1328.i64[1] = *(_QWORD *)(v1338 + 168);
              v1330 = vzip1q_s64(v1321, *(int64x2_t *)(v1338 + 112));
              v1331 = vzip1q_s64(v1323, *(int64x2_t *)(v1338 + 176));
              v1321.i64[0] = vdupq_laneq_s64(v1321, 1).u64[0];
              v1321.i64[1] = *(_QWORD *)(v1338 + 120);
              v1332.i64[0] = vdupq_laneq_s64(v1323, 1).u64[0];
              v1332.i64[1] = *(_QWORD *)(v1338 + 184);
              v1317[1] = v1326;
              v1317[2] = v1327;
              *v1317 = v1325;
              v1333 = (int64x2_t *)((char *)v1317 + 8 * v1339);
              v1333[1] = v1322;
              v1333[2] = v1328;
              *v1333 = v1329;
              v1334 = &v1317[v1339];
              v1334[1] = v1330;
              v1334[2] = v1331;
              *v1334 = vzip1q_s64(v1318, v1319);
              v1335 = (int64x2_t *)((char *)v1317 + 24 * v1339);
              v1335[1] = v1321;
              v1335[2] = v1332;
              *v1335 = vzip2q_s64(v1318, v1319);
              v1316 += 4;
              if (v1316 == v1315)
                goto LABEL_338;
            }
            v1341 = *(_OWORD *)(v1338 + 16);
            v1342 = (_OWORD *)(v1340 + 8 * (v1337 + (_DWORD)v1339 * v1336));
            v1343 = *(_OWORD *)(v1338 + 32);
            v1344 = *(_OWORD *)(v1338 + 48);
            v1345 = *(_OWORD *)(v1338 + 64);
            v1346 = *(_OWORD *)(v1338 + 80);
            v1347 = *(_OWORD *)(v1338 + 96);
            v1348 = *(_OWORD *)(v1338 + 112);
            v1349 = *(_OWORD *)(v1338 + 128);
            v1350 = *(_OWORD *)(v1338 + 144);
            v1351 = *(_OWORD *)(v1338 + 160);
            v1352 = *(_OWORD *)(v1338 + 176);
            *v1342 = *(_OWORD *)v1338;
            v1342[1] = v1341;
            v1353 = (_OWORD *)((char *)v1342 + 8 * v1339);
            *v1353 = v1343;
            v1353[1] = v1344;
            v1354 = &v1342[v1339];
            *v1354 = v1345;
            v1354[1] = v1346;
            v1355 = (_OWORD *)((char *)v1342 + 24 * v1339);
            *v1355 = v1347;
            v1355[1] = v1348;
            v1356 = &v1342[2 * v1339];
            *v1356 = v1349;
            v1356[1] = v1350;
            v1357 = (_OWORD *)((char *)v1342 + 40 * v1339);
            *v1357 = v1351;
            v1357[1] = v1352;
            v1316 += 4;
          }
          while (v1316 != v1315);
LABEL_338:
          v1309 = *(unsigned int *)(a1 + 5604);
        }
        ++v1310;
        ++v1311;
      }
      while (v1310 < v1309);
    }
    v1375 = *(unsigned int *)(a1 + 6612);
    if ((_DWORD)v1375)
    {
      v1376 = 0;
      v1377 = *(unsigned int **)(a1 + 10616);
      do
      {
        v1378 = *(_QWORD *)(*(_QWORD *)(a1 + 6720) + 8 * v1376);
        if (v1378)
        {
          v1379 = *(_QWORD *)(a1 + 6688);
          v1380 = (*(_DWORD *)(a1 + 6712) * v1376);
          v1381 = (unsigned int *)(v1379 + 16 * (v1378 + v1380));
          v1382 = (unsigned int *)(v1379 + 16 * v1380);
          do
          {
            v1399 = *v1377;
            v1400 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1382);
            v1401 = *(_QWORD *)(a1 + 6616) + 8 * *((_QWORD *)v1382 + 1);
            v1402 = *v6;
            v1403 = *(_QWORD *)(a1 + 20040);
            if (*v1377 < v1400)
            {
              v1383 = (int64x2_t *)(v1403 + 8 * (v1399 + (_DWORD)v1402 * v1400));
              v1384 = *(int64x2_t *)(v1401 + 16);
              v1385 = *(int64x2_t *)(v1401 + 32);
              v1386 = *(int64x2_t *)(v1401 + 48);
              v1388 = *(int64x2_t *)(v1401 + 64);
              v1387 = *(int64x2_t *)(v1401 + 80);
              v1389 = vzip1q_s64(*(int64x2_t *)v1401, v1385);
              v1390 = vzip1q_s64(v1388, *(int64x2_t *)(v1401 + 96));
              v1391 = vzip2q_s64(*(int64x2_t *)v1401, v1385);
              v1388.i64[0] = vdupq_laneq_s64(v1388, 1).u64[0];
              v1388.i64[1] = *(_QWORD *)(v1401 + 104);
              v1392 = vzip1q_s64(v1384, v1386);
              v1393 = vzip1q_s64(v1387, *(int64x2_t *)(v1401 + 112));
              v1394.i64[0] = vdupq_laneq_s64(v1387, 1).u64[0];
              v1394.i64[1] = *(_QWORD *)(v1401 + 120);
              v1395 = vzip2q_s64(v1384, v1386);
              *v1383 = v1389;
              v1383[1] = v1390;
              v1396 = (int64x2_t *)((char *)v1383 + 8 * v1402);
              *v1396 = v1391;
              v1396[1] = v1388;
            }
            else
            {
              v1404 = *(int64x2_t *)(v1401 + 16);
              v1383 = (int64x2_t *)(v1403 + 8 * (v1400 + (_DWORD)v1402 * v1399));
              v1405 = *(_OWORD *)(v1401 + 32);
              v1406 = *(_OWORD *)(v1401 + 48);
              v1392 = *(int64x2_t *)(v1401 + 64);
              v1393 = *(int64x2_t *)(v1401 + 80);
              v1395 = *(int64x2_t *)(v1401 + 96);
              v1394 = *(int64x2_t *)(v1401 + 112);
              *v1383 = *(int64x2_t *)v1401;
              v1383[1] = v1404;
              v1407 = &v1383->i8[8 * v1402];
              *(_OWORD *)v1407 = v1405;
              *((_OWORD *)v1407 + 1) = v1406;
            }
            v1397 = &v1383[v1402];
            *v1397 = v1392;
            v1397[1] = v1393;
            v1398 = (int64x2_t *)((char *)v1383 + 24 * v1402);
            *v1398 = v1395;
            v1398[1] = v1394;
            v1382 += 4;
          }
          while (v1382 != v1381);
          v1375 = *(unsigned int *)(a1 + 6612);
        }
        ++v1376;
        ++v1377;
      }
      while (v1376 < v1375);
    }
    v1457 = *(unsigned int *)(a1 + 7620);
    if ((_DWORD)v1457)
    {
      v1458 = 0;
      v1459 = *(unsigned int **)(a1 + 10640);
      do
      {
        v1460 = *(_QWORD *)(*(_QWORD *)(a1 + 7728) + 8 * v1458);
        if (v1460)
        {
          v1461 = *(_QWORD *)(a1 + 7696);
          v1462 = (*(_DWORD *)(a1 + 7720) * v1458);
          v1463 = (unsigned int *)(v1461 + 16 * (v1460 + v1462));
          v1464 = (unsigned int *)(v1461 + 16 * v1462);
          do
          {
            v1481 = *v1459;
            v1482 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1464);
            v1483 = *(_QWORD *)(a1 + 7624) + 8 * *((_QWORD *)v1464 + 1);
            v1484 = *v6;
            v1485 = *(_QWORD *)(a1 + 20040);
            if (*v1459 < v1482)
            {
              v1465 = (int64x2_t *)(v1485 + 8 * (v1481 + (_DWORD)v1484 * v1482));
              v1466 = *(int64x2_t *)(v1483 + 16);
              v1467 = *(int64x2_t *)(v1483 + 32);
              v1468 = *(int64x2_t *)(v1483 + 48);
              v1470 = *(int64x2_t *)(v1483 + 64);
              v1469 = *(int64x2_t *)(v1483 + 80);
              v1471 = vzip1q_s64(*(int64x2_t *)v1483, v1467);
              v1472 = vzip1q_s64(v1470, *(int64x2_t *)(v1483 + 96));
              v1473 = vzip2q_s64(*(int64x2_t *)v1483, v1467);
              v1470.i64[0] = vdupq_laneq_s64(v1470, 1).u64[0];
              v1470.i64[1] = *(_QWORD *)(v1483 + 104);
              v1474 = vzip1q_s64(v1466, v1468);
              v1475 = vzip1q_s64(v1469, *(int64x2_t *)(v1483 + 112));
              v1476.i64[0] = vdupq_laneq_s64(v1469, 1).u64[0];
              v1476.i64[1] = *(_QWORD *)(v1483 + 120);
              v1477 = vzip2q_s64(v1466, v1468);
              *v1465 = v1471;
              v1465[1] = v1472;
              v1478 = (int64x2_t *)((char *)v1465 + 8 * v1484);
              *v1478 = v1473;
              v1478[1] = v1470;
            }
            else
            {
              v1486 = *(int64x2_t *)(v1483 + 16);
              v1465 = (int64x2_t *)(v1485 + 8 * (v1482 + (_DWORD)v1484 * v1481));
              v1487 = *(_OWORD *)(v1483 + 32);
              v1488 = *(_OWORD *)(v1483 + 48);
              v1474 = *(int64x2_t *)(v1483 + 64);
              v1475 = *(int64x2_t *)(v1483 + 80);
              v1477 = *(int64x2_t *)(v1483 + 96);
              v1476 = *(int64x2_t *)(v1483 + 112);
              *v1465 = *(int64x2_t *)v1483;
              v1465[1] = v1486;
              v1489 = &v1465->i8[8 * v1484];
              *(_OWORD *)v1489 = v1487;
              *((_OWORD *)v1489 + 1) = v1488;
            }
            v1479 = &v1465[v1484];
            *v1479 = v1474;
            v1479[1] = v1475;
            v1480 = (int64x2_t *)((char *)v1465 + 24 * v1484);
            *v1480 = v1477;
            v1480[1] = v1476;
            v1464 += 4;
          }
          while (v1464 != v1463);
          v1457 = *(unsigned int *)(a1 + 7620);
        }
        ++v1458;
        ++v1459;
      }
      while (v1458 < v1457);
    }
    v1523 = *(unsigned int *)(a1 + 8628);
    if ((_DWORD)v1523)
    {
      v1524 = 0;
      v1525 = *(unsigned int **)(a1 + 10664);
      do
      {
        v1526 = *(_QWORD *)(*(_QWORD *)(a1 + 8736) + 8 * v1524);
        if (v1526)
        {
          v1527 = *(_QWORD *)(a1 + 8704);
          v1528 = (*(_DWORD *)(a1 + 8728) * v1524);
          v1529 = (unsigned int *)(v1527 + 16 * (v1526 + v1528));
          v1530 = (unsigned int *)(v1527 + 16 * v1528);
          do
          {
            while (1)
            {
              v1542 = *v1525;
              v1543 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1530);
              v1544 = *(_QWORD *)(a1 + 8632) + 8 * *((_QWORD *)v1530 + 1);
              v1545 = *v6;
              v1546 = *(_QWORD *)(a1 + 20040);
              if (*v1525 >= v1543)
                break;
              v1531 = (int64x2_t *)(v1546 + 8 * (v1542 + (_DWORD)v1545 * v1543));
              v1532 = *(int64x2_t *)(v1544 + 16);
              v1534 = *(int64x2_t *)(v1544 + 32);
              v1533 = *(int64x2_t *)(v1544 + 48);
              v1536 = *(_OWORD *)(v1544 + 64);
              v1535 = *(_OWORD *)(v1544 + 80);
              v1537 = vzip1q_s64(*(int64x2_t *)v1544, v1534);
              v1538 = vzip2q_s64(*(int64x2_t *)v1544, v1534);
              v1531[1].i64[0] = v1536;
              *v1531 = v1537;
              v1539 = (int64x2_t *)((char *)v1531 + 8 * v1545);
              *v1539 = v1538;
              v1539[1].i64[0] = *((_QWORD *)&v1536 + 1);
              v1540 = &v1531[v1545];
              v1540[1].i64[0] = v1535;
              *v1540 = vzip1q_s64(v1532, v1533);
              v1541 = (int64x2_t *)((char *)v1531 + 24 * v1545);
              v1541[1].i64[0] = *((_QWORD *)&v1535 + 1);
              *v1541 = vzip2q_s64(v1532, v1533);
              v1530 += 4;
              if (v1530 == v1529)
                goto LABEL_398;
            }
            v1547 = *(_OWORD *)(v1544 + 16);
            v1548 = (_OWORD *)(v1546 + 8 * (v1543 + (_DWORD)v1545 * v1542));
            v1549 = *(_OWORD *)(v1544 + 32);
            v1550 = *(_OWORD *)(v1544 + 48);
            v1551 = *(_OWORD *)(v1544 + 64);
            v1552 = *(_OWORD *)(v1544 + 80);
            *v1548 = *(_OWORD *)v1544;
            v1548[1] = v1547;
            v1553 = (_OWORD *)((char *)v1548 + 8 * v1545);
            *v1553 = v1549;
            v1553[1] = v1550;
            v1554 = &v1548[v1545];
            *v1554 = v1551;
            v1554[1] = v1552;
            v1530 += 4;
          }
          while (v1530 != v1529);
LABEL_398:
          v1523 = *(unsigned int *)(a1 + 8628);
        }
        ++v1524;
        ++v1525;
      }
      while (v1524 < v1523);
    }
    v1588 = *(unsigned int *)(a1 + 2436);
    if ((_DWORD)v1588)
    {
      v1589 = 0;
      v1590 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1591 = *(_QWORD *)(*(_QWORD *)(a1 + 2544) + 8 * v1589);
        if (v1591)
        {
          v1592 = *(_QWORD *)(a1 + 2512);
          v1593 = (*(_DWORD *)(a1 + 2536) * v1589);
          v1594 = (unsigned int *)(v1592 + 16 * (v1591 + v1593));
          v1595 = (unsigned int *)(v1592 + 16 * v1593);
          do
          {
            v1643 = *v1590;
            v1644 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1595);
            v1645 = *(_QWORD *)(a1 + 2440) + 8 * *((_QWORD *)v1595 + 1);
            v1646 = *v6;
            v1647 = *(_QWORD *)(a1 + 20040);
            if (*v1590 < v1644)
            {
              v1596 = (int64x2_t *)(v1647 + 8 * (v1643 + (_DWORD)v1646 * v1644));
              v1597 = *(int64x2_t *)(v1645 + 16);
              v1598 = *(int64x2_t *)(v1645 + 64);
              v1599 = *(int64x2_t *)(v1645 + 80);
              v1601 = *(int64x2_t *)(v1645 + 32);
              v1600 = *(int64x2_t *)(v1645 + 48);
              v1602 = *(int64x2_t *)(v1645 + 96);
              v1603 = *(int64x2_t *)(v1645 + 112);
              v1604 = *(int64x2_t *)(v1645 + 128);
              v1606 = *(int64x2_t *)(v1645 + 192);
              v1605 = *(int64x2_t *)(v1645 + 208);
              v1607 = *(int64x2_t *)(v1645 + 224);
              v1608 = vzip1q_s64(*(int64x2_t *)v1645, v1600);
              v1609 = vzip1q_s64(v1602, *(int64x2_t *)(v1645 + 144));
              v1610 = vzip1q_s64(v1606, *(int64x2_t *)(v1645 + 240));
              v1611.i64[0] = vdupq_laneq_s64(v1602, 1).u64[0];
              v1611.i64[1] = *(_QWORD *)(v1645 + 152);
              v1612 = vzip2q_s64(*(int64x2_t *)v1645, v1600);
              v1613.i64[0] = vdupq_laneq_s64(v1606, 1).u64[0];
              v1613.i64[1] = *(_QWORD *)(v1645 + 248);
              v1614 = (int8x16_t)vzip1q_s64(v1597, v1598);
              v1615 = (int8x16_t)vzip1q_s64(v1603, *(int64x2_t *)(v1645 + 160));
              v1616 = (int8x16_t)vzip1q_s64(v1605, *(int64x2_t *)(v1645 + 256));
              v1617 = vextq_s8(v1616, v1616, 8uLL).u64[0];
              v1618 = vextq_s8(v1615, v1615, 8uLL).u64[0];
              v1619 = vextq_s8(v1614, v1614, 8uLL).u64[0];
              v1620 = (int8x16_t)vzip2q_s64(v1597, v1598);
              v1621.i64[0] = vdupq_laneq_s64(v1603, 1).u64[0];
              v1621.i64[1] = *(_QWORD *)(v1645 + 168);
              v1622.i64[0] = vdupq_laneq_s64(v1605, 1).u64[0];
              v1622.i64[1] = *(_QWORD *)(v1645 + 264);
              v1623 = vextq_s8(v1620, v1620, 8uLL).u64[0];
              v1624 = vextq_s8(v1622, v1622, 8uLL).u64[0];
              v1625 = vextq_s8(v1621, v1621, 8uLL).u64[0];
              v1626 = (int8x16_t)vzip1q_s64(v1601, v1599);
              v1627 = (int8x16_t)vzip1q_s64(v1604, *(int64x2_t *)(v1645 + 176));
              v1628 = (int8x16_t)vzip1q_s64(v1607, *(int64x2_t *)(v1645 + 272));
              v1629 = vextq_s8(v1628, v1628, 8uLL).u64[0];
              v1630 = vextq_s8(v1627, v1627, 8uLL).u64[0];
              v1631 = vextq_s8(v1626, v1626, 8uLL).u64[0];
              v1632 = (int8x16_t)vzip2q_s64(v1601, v1599);
              v1633.i64[0] = vdupq_laneq_s64(v1604, 1).u64[0];
              v1633.i64[1] = *(_QWORD *)(v1645 + 184);
              v1634.i64[0] = vdupq_laneq_s64(v1607, 1).u64[0];
              v1634.i64[1] = *(_QWORD *)(v1645 + 280);
              v1635 = vextq_s8(v1632, v1632, 8uLL).u64[0];
              v1636 = vextq_s8(v1634, v1634, 8uLL).u64[0];
              v1637 = vextq_s8(v1633, v1633, 8uLL).u64[0];
              v1596[1] = v1609;
              v1596[2] = v1610;
              *v1596 = v1608;
              v1638 = (int64x2_t *)((char *)v1596 + 8 * v1646);
              v1638[1] = v1611;
            }
            else
            {
              v1648 = *(int64x2_t *)v1645;
              v1596 = (int64x2_t *)(v1647 + 8 * (v1644 + (_DWORD)v1646 * v1643));
              v1649 = *(int64x2_t *)(v1645 + 32);
              v1612 = *(int64x2_t *)(v1645 + 48);
              v1650 = *(int64x2_t *)(v1645 + 64);
              v1613 = *(int64x2_t *)(v1645 + 80);
              v1614 = *(int8x16_t *)(v1645 + 96);
              v1615 = *(int8x16_t *)(v1645 + 112);
              v1616 = *(int8x16_t *)(v1645 + 128);
              v1620 = *(int8x16_t *)(v1645 + 144);
              v1617 = vextq_s8(v1616, v1616, 8uLL).u64[0];
              v1618 = vextq_s8(v1615, v1615, 8uLL).u64[0];
              v1619 = vextq_s8(v1614, v1614, 8uLL).u64[0];
              v1621 = *(int8x16_t *)(v1645 + 160);
              v1622 = *(int8x16_t *)(v1645 + 176);
              v1624 = vextq_s8(v1622, v1622, 8uLL).u64[0];
              v1625 = vextq_s8(v1621, v1621, 8uLL).u64[0];
              v1623 = vextq_s8(v1620, v1620, 8uLL).u64[0];
              v1626 = *(int8x16_t *)(v1645 + 192);
              v1627 = *(int8x16_t *)(v1645 + 208);
              v1628 = *(int8x16_t *)(v1645 + 224);
              v1632 = *(int8x16_t *)(v1645 + 240);
              v1629 = vextq_s8(v1628, v1628, 8uLL).u64[0];
              v1630 = vextq_s8(v1627, v1627, 8uLL).u64[0];
              v1631 = vextq_s8(v1626, v1626, 8uLL).u64[0];
              v1633 = *(int8x16_t *)(v1645 + 256);
              v1634 = *(int8x16_t *)(v1645 + 272);
              v1636 = vextq_s8(v1634, v1634, 8uLL).u64[0];
              v1637 = vextq_s8(v1633, v1633, 8uLL).u64[0];
              v1635 = vextq_s8(v1632, v1632, 8uLL).u64[0];
              v1596[1] = *(int64x2_t *)(v1645 + 16);
              v1596[2] = v1649;
              *v1596 = v1648;
              v1638 = (int64x2_t *)((char *)v1596 + 8 * v1646);
              v1638[1] = v1650;
            }
            v1638[2] = v1613;
            *v1638 = v1612;
            v1614.i64[1] = v1619;
            v1615.i64[1] = v1618;
            v1639 = (int8x16_t *)&v1596[v1646];
            *v1639 = v1614;
            v1639[1] = v1615;
            v1616.i64[1] = v1617;
            v1639[2] = v1616;
            v1622.i64[1] = v1624;
            v1640 = (int8x16_t *)((char *)v1596 + 24 * v1646);
            v1621.i64[1] = v1625;
            v1620.i64[1] = v1623;
            v1640[1] = v1621;
            v1640[2] = v1622;
            *v1640 = v1620;
            v1641 = (int8x16_t *)&v1596[2 * v1646];
            v1628.i64[1] = v1629;
            v1627.i64[1] = v1630;
            v1626.i64[1] = v1631;
            v1641[1] = v1627;
            v1641[2] = v1628;
            *v1641 = v1626;
            v1642 = (int8x16_t *)((char *)v1596 + 40 * v1646);
            v1634.i64[1] = v1636;
            v1633.i64[1] = v1637;
            v1632.i64[1] = v1635;
            v1595 += 4;
            v1642[1] = v1633;
            v1642[2] = v1634;
            *v1642 = v1632;
          }
          while (v1595 != v1594);
          v1588 = *(unsigned int *)(a1 + 2436);
        }
        ++v1589;
        ++v1590;
      }
      while (v1589 < v1588);
    }
    v1683 = *(unsigned int *)(a1 + 3444);
    if ((_DWORD)v1683)
    {
      v1684 = 0;
      v1685 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1686 = *(_QWORD *)(*(_QWORD *)(a1 + 3552) + 8 * v1684);
        if (v1686)
        {
          v1687 = *(_QWORD *)(a1 + 3520);
          v1688 = (*(_DWORD *)(a1 + 3544) * v1684);
          v1689 = (unsigned int *)(v1687 + 16 * (v1686 + v1688));
          v1690 = (unsigned int *)(v1687 + 16 * v1688);
          do
          {
            while (1)
            {
              v1725 = *v1685;
              v1726 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1690);
              v1727 = *(_QWORD *)(a1 + 3448) + 8 * *((_QWORD *)v1690 + 1);
              v1728 = *v6;
              v1729 = *(_QWORD *)(a1 + 20040);
              if (*v1685 >= v1726)
                break;
              v1691 = *(int64x2_t *)(v1727 + 16);
              v1692 = (int64x2_t *)(v1729 + 8 * (v1725 + (_DWORD)v1728 * v1726));
              v1694 = *(int64x2_t *)(v1727 + 64);
              v1693 = *(int64x2_t *)(v1727 + 80);
              v1695 = *(int64x2_t *)(v1727 + 32);
              v1696 = *(int64x2_t *)(v1727 + 48);
              v1698 = *(int64x2_t *)(v1727 + 96);
              v1697 = *(int64x2_t *)(v1727 + 112);
              v1700 = *(int64x2_t *)(v1727 + 160);
              v1699 = *(int64x2_t *)(v1727 + 176);
              v1701 = *(int64x2_t *)(v1727 + 128);
              v1702 = *(int64x2_t *)(v1727 + 144);
              v1704 = *(int64x2_t *)(v1727 + 192);
              v1703 = *(int64x2_t *)(v1727 + 208);
              v1706 = *(int64x2_t *)(v1727 + 256);
              v1705 = *(int64x2_t *)(v1727 + 272);
              v1707 = *(int64x2_t *)(v1727 + 224);
              v1708 = *(int64x2_t *)(v1727 + 240);
              v1710 = *(int64x2_t *)(v1727 + 288);
              v1709 = *(int64x2_t *)(v1727 + 304);
              v1712 = *(int64x2_t *)(v1727 + 352);
              v1711 = *(int64x2_t *)(v1727 + 368);
              v1713 = *(int64x2_t *)(v1727 + 320);
              v1714 = *(int64x2_t *)(v1727 + 336);
              v1716 = *(_OWORD *)(v1727 + 400);
              v1715 = *(_OWORD *)(v1727 + 416);
              v1717 = *(_OWORD *)(v1727 + 384);
              v1718 = vzip1q_s64(*(int64x2_t *)v1727, v1696);
              v1719 = vzip2q_s64(*(int64x2_t *)v1727, v1696);
              v1692[2] = vzip1q_s64(v1704, v1708);
              v1692[3] = vzip1q_s64(v1710, v1714);
              v1692[4].i64[0] = v1717;
              *v1692 = v1718;
              v1692[1] = vzip1q_s64(v1698, v1702);
              v1720 = (int64x2_t *)((char *)v1692 + 8 * v1728);
              v1720[2] = vzip2q_s64(v1704, v1708);
              v1720[3] = vzip2q_s64(v1710, v1714);
              *v1720 = v1719;
              v1720[1] = vzip2q_s64(v1698, v1702);
              v1720[4].i64[0] = *((_QWORD *)&v1717 + 1);
              v1721 = &v1692[v1728];
              v1721[4].i64[0] = v1716;
              v1721[2] = vzip1q_s64(v1703, v1706);
              v1721[3] = vzip1q_s64(v1709, v1712);
              *v1721 = vzip1q_s64(v1691, v1694);
              v1721[1] = vzip1q_s64(v1697, v1700);
              v1722 = (int64x2_t *)((char *)v1692 + 24 * v1728);
              v1722[4].i64[0] = *((_QWORD *)&v1716 + 1);
              v1722[2] = vzip2q_s64(v1703, v1706);
              v1722[3] = vzip2q_s64(v1709, v1712);
              *v1722 = vzip2q_s64(v1691, v1694);
              v1722[1] = vzip2q_s64(v1697, v1700);
              v1723 = &v1692[2 * v1728];
              v1723[4].i64[0] = v1715;
              v1723[2] = vzip1q_s64(v1707, v1705);
              v1723[3] = vzip1q_s64(v1713, v1711);
              *v1723 = vzip1q_s64(v1695, v1693);
              v1723[1] = vzip1q_s64(v1701, v1699);
              v1724 = (int64x2_t *)((char *)v1692 + 40 * v1728);
              v1724[4].i64[0] = *((_QWORD *)&v1715 + 1);
              v1724[2] = vzip2q_s64(v1707, v1705);
              v1724[3] = vzip2q_s64(v1713, v1711);
              *v1724 = vzip2q_s64(v1695, v1693);
              v1724[1] = vzip2q_s64(v1701, v1699);
              v1690 += 4;
              if (v1690 == v1689)
                goto LABEL_438;
            }
            v1730 = *(int64x2_t *)v1727;
            v1731 = (int64x2_t *)(v1729 + 8 * (v1726 + (_DWORD)v1728 * v1725));
            v1732 = *(int64x2_t *)(v1727 + 32);
            v1733 = *(_OWORD *)(v1727 + 48);
            v1734 = *(_OWORD *)(v1727 + 64);
            v1735 = *(_OWORD *)(v1727 + 80);
            v1736 = *(int64x2_t *)(v1727 + 96);
            v1737 = *(int64x2_t *)(v1727 + 112);
            v1738 = *(int64x2_t *)(v1727 + 128);
            v1739 = *(_OWORD *)(v1727 + 144);
            v1740 = *(_OWORD *)(v1727 + 160);
            v1741 = *(_OWORD *)(v1727 + 176);
            v1742 = *(int64x2_t *)(v1727 + 192);
            v1743 = *(int64x2_t *)(v1727 + 208);
            v1744 = *(int64x2_t *)(v1727 + 224);
            v1745 = *(_OWORD *)(v1727 + 240);
            v1746 = *(_OWORD *)(v1727 + 256);
            v1747 = *(_OWORD *)(v1727 + 272);
            v1748 = *(int64x2_t *)(v1727 + 288);
            v1749 = *(int64x2_t *)(v1727 + 304);
            v1750 = *(int64x2_t *)(v1727 + 320);
            v1751 = *(_OWORD *)(v1727 + 336);
            v1752 = *(_OWORD *)(v1727 + 352);
            v1753 = *(_OWORD *)(v1727 + 368);
            v1754 = *(int64x2_t *)(v1727 + 384);
            v1755 = *(int64x2_t *)(v1727 + 400);
            v1756 = *(int64x2_t *)(v1727 + 416);
            v1731[1] = *(int64x2_t *)(v1727 + 16);
            v1731[2] = v1732;
            *v1731 = v1730;
            v1757 = &v1731->i8[8 * v1728];
            *((_OWORD *)v1757 + 1) = v1734;
            *((_OWORD *)v1757 + 2) = v1735;
            *(_OWORD *)v1757 = v1733;
            v1758 = &v1731[v1728];
            v1758[1] = v1737;
            v1758[2] = v1738;
            *v1758 = v1736;
            v1759 = &v1731->i8[24 * v1728];
            *((_OWORD *)v1759 + 1) = v1740;
            *((_OWORD *)v1759 + 2) = v1741;
            *(_OWORD *)v1759 = v1739;
            v1760 = &v1731[2 * v1728];
            v1760[1] = v1743;
            v1760[2] = v1744;
            *v1760 = v1742;
            v1761 = &v1731->i8[40 * v1728];
            *((_OWORD *)v1761 + 1) = v1746;
            *((_OWORD *)v1761 + 2) = v1747;
            *(_OWORD *)v1761 = v1745;
            v1762 = &v1731[3 * v1728];
            v1762[1] = v1749;
            v1762[2] = v1750;
            *v1762 = v1748;
            v1763 = &v1731->i8[56 * v1728];
            *((_OWORD *)v1763 + 1) = v1752;
            *((_OWORD *)v1763 + 2) = v1753;
            *(_OWORD *)v1763 = v1751;
            v1764 = &v1731[4 * v1728];
            v1764[1] = v1755;
            v1764[2] = v1756;
            *v1764 = v1754;
            v1690 += 4;
          }
          while (v1690 != v1689);
LABEL_438:
          v1683 = *(unsigned int *)(a1 + 3444);
        }
        ++v1684;
        ++v1685;
      }
      while (v1684 < v1683);
    }
    v1828 = *(unsigned int *)(a1 + 4452);
    if ((_DWORD)v1828)
    {
      v1829 = 0;
      v1830 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1831 = *(_QWORD *)(*(_QWORD *)(a1 + 4560) + 8 * v1829);
        if (v1831)
        {
          v1832 = *(_QWORD *)(a1 + 4528);
          v1833 = (*(_DWORD *)(a1 + 4552) * v1829);
          v1834 = (unsigned int *)(v1832 + 16 * (v1831 + v1833));
          v1835 = (unsigned int *)(v1832 + 16 * v1833);
          do
          {
            while (1)
            {
              v1837 = *v1830;
              v1838 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1835);
              v1839 = (int8x16_t *)(*(_QWORD *)(a1 + 4456) + 8 * *((_QWORD *)v1835 + 1));
              v1840 = *v6;
              v1841 = *(_QWORD *)(a1 + 20040);
              v1843 = v1839[1];
              v1842 = v1839[2];
              v1844 = *v1839;
              v1845 = vextq_s8(v1842, v1842, 8uLL).u64[0];
              v1846 = vextq_s8(v1843, v1843, 8uLL).u64[0];
              v1847 = vextq_s8(v1844, v1844, 8uLL).u64[0];
              if (*v1830 >= v1838)
                break;
              v1836 = (_QWORD *)(v1841 + 8 * (v1837 + (_DWORD)v1840 * v1838));
              *v1836 = v1844.i64[0];
              v1836[v1840] = v1847;
              v1836[2 * v1840] = v1843.i64[0];
              v1836[3 * v1840] = v1846;
              v1836[4 * v1840] = v1842.i64[0];
              v1836[5 * v1840] = v1845;
              v1835 += 4;
              if (v1835 == v1834)
                goto LABEL_458;
            }
            v1844.i64[1] = v1847;
            v1843.i64[1] = v1846;
            v1848 = (int8x16_t *)(v1841 + 8 * (v1838 + (_DWORD)v1840 * v1837));
            *v1848 = v1844;
            v1848[1] = v1843;
            v1842.i64[1] = v1845;
            v1848[2] = v1842;
            v1835 += 4;
          }
          while (v1835 != v1834);
LABEL_458:
          v1828 = *(unsigned int *)(a1 + 4452);
        }
        ++v1829;
        ++v1830;
      }
      while (v1829 < v1828);
    }
    v1931 = *(unsigned int *)(a1 + 5460);
    if ((_DWORD)v1931)
    {
      v1932 = 0;
      v1933 = *(unsigned int **)(a1 + 10592);
      do
      {
        v1934 = *(_QWORD *)(*(_QWORD *)(a1 + 5568) + 8 * v1932);
        if (v1934)
        {
          v1935 = *(_QWORD *)(a1 + 5536);
          v1936 = (*(_DWORD *)(a1 + 5560) * v1932);
          v1937 = (unsigned int *)(v1935 + 16 * (v1934 + v1936));
          v1938 = (unsigned int *)(v1935 + 16 * v1936);
          do
          {
            v1986 = *v1933;
            v1987 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1938);
            v1988 = *(_QWORD *)(a1 + 5464) + 8 * *((_QWORD *)v1938 + 1);
            v1989 = *v6;
            v1990 = *(_QWORD *)(a1 + 20040);
            if (*v1933 < v1987)
            {
              v1939 = (int64x2_t *)(v1990 + 8 * (v1986 + (_DWORD)v1989 * v1987));
              v1940 = *(int64x2_t *)(v1988 + 16);
              v1941 = *(int64x2_t *)(v1988 + 64);
              v1942 = *(int64x2_t *)(v1988 + 80);
              v1944 = *(int64x2_t *)(v1988 + 32);
              v1943 = *(int64x2_t *)(v1988 + 48);
              v1945 = *(int64x2_t *)(v1988 + 96);
              v1946 = *(int64x2_t *)(v1988 + 112);
              v1947 = *(int64x2_t *)(v1988 + 128);
              v1949 = *(int64x2_t *)(v1988 + 192);
              v1948 = *(int64x2_t *)(v1988 + 208);
              v1950 = *(int64x2_t *)(v1988 + 224);
              v1951 = vzip1q_s64(*(int64x2_t *)v1988, v1943);
              v1952 = vzip1q_s64(v1945, *(int64x2_t *)(v1988 + 144));
              v1953 = vzip1q_s64(v1949, *(int64x2_t *)(v1988 + 240));
              v1954.i64[0] = vdupq_laneq_s64(v1945, 1).u64[0];
              v1954.i64[1] = *(_QWORD *)(v1988 + 152);
              v1955 = vzip2q_s64(*(int64x2_t *)v1988, v1943);
              v1956.i64[0] = vdupq_laneq_s64(v1949, 1).u64[0];
              v1956.i64[1] = *(_QWORD *)(v1988 + 248);
              v1957 = (int8x16_t)vzip1q_s64(v1940, v1941);
              v1958 = (int8x16_t)vzip1q_s64(v1946, *(int64x2_t *)(v1988 + 160));
              v1959 = (int8x16_t)vzip1q_s64(v1948, *(int64x2_t *)(v1988 + 256));
              v1960 = vextq_s8(v1959, v1959, 8uLL).u64[0];
              v1961 = vextq_s8(v1958, v1958, 8uLL).u64[0];
              v1962 = vextq_s8(v1957, v1957, 8uLL).u64[0];
              v1963 = (int8x16_t)vzip2q_s64(v1940, v1941);
              v1964.i64[0] = vdupq_laneq_s64(v1946, 1).u64[0];
              v1964.i64[1] = *(_QWORD *)(v1988 + 168);
              v1965.i64[0] = vdupq_laneq_s64(v1948, 1).u64[0];
              v1965.i64[1] = *(_QWORD *)(v1988 + 264);
              v1966 = vextq_s8(v1963, v1963, 8uLL).u64[0];
              v1967 = vextq_s8(v1965, v1965, 8uLL).u64[0];
              v1968 = vextq_s8(v1964, v1964, 8uLL).u64[0];
              v1969 = (int8x16_t)vzip1q_s64(v1944, v1942);
              v1970 = (int8x16_t)vzip1q_s64(v1947, *(int64x2_t *)(v1988 + 176));
              v1971 = (int8x16_t)vzip1q_s64(v1950, *(int64x2_t *)(v1988 + 272));
              v1972 = vextq_s8(v1971, v1971, 8uLL).u64[0];
              v1973 = vextq_s8(v1970, v1970, 8uLL).u64[0];
              v1974 = vextq_s8(v1969, v1969, 8uLL).u64[0];
              v1975 = (int8x16_t)vzip2q_s64(v1944, v1942);
              v1976.i64[0] = vdupq_laneq_s64(v1947, 1).u64[0];
              v1976.i64[1] = *(_QWORD *)(v1988 + 184);
              v1977.i64[0] = vdupq_laneq_s64(v1950, 1).u64[0];
              v1977.i64[1] = *(_QWORD *)(v1988 + 280);
              v1978 = vextq_s8(v1975, v1975, 8uLL).u64[0];
              v1979 = vextq_s8(v1977, v1977, 8uLL).u64[0];
              v1980 = vextq_s8(v1976, v1976, 8uLL).u64[0];
              v1939[1] = v1952;
              v1939[2] = v1953;
              *v1939 = v1951;
              v1981 = (int64x2_t *)((char *)v1939 + 8 * v1989);
              v1981[1] = v1954;
            }
            else
            {
              v1991 = *(int64x2_t *)v1988;
              v1939 = (int64x2_t *)(v1990 + 8 * (v1987 + (_DWORD)v1989 * v1986));
              v1992 = *(int64x2_t *)(v1988 + 32);
              v1955 = *(int64x2_t *)(v1988 + 48);
              v1993 = *(int64x2_t *)(v1988 + 64);
              v1956 = *(int64x2_t *)(v1988 + 80);
              v1957 = *(int8x16_t *)(v1988 + 96);
              v1958 = *(int8x16_t *)(v1988 + 112);
              v1959 = *(int8x16_t *)(v1988 + 128);
              v1963 = *(int8x16_t *)(v1988 + 144);
              v1960 = vextq_s8(v1959, v1959, 8uLL).u64[0];
              v1961 = vextq_s8(v1958, v1958, 8uLL).u64[0];
              v1962 = vextq_s8(v1957, v1957, 8uLL).u64[0];
              v1964 = *(int8x16_t *)(v1988 + 160);
              v1965 = *(int8x16_t *)(v1988 + 176);
              v1967 = vextq_s8(v1965, v1965, 8uLL).u64[0];
              v1968 = vextq_s8(v1964, v1964, 8uLL).u64[0];
              v1966 = vextq_s8(v1963, v1963, 8uLL).u64[0];
              v1969 = *(int8x16_t *)(v1988 + 192);
              v1970 = *(int8x16_t *)(v1988 + 208);
              v1971 = *(int8x16_t *)(v1988 + 224);
              v1975 = *(int8x16_t *)(v1988 + 240);
              v1972 = vextq_s8(v1971, v1971, 8uLL).u64[0];
              v1973 = vextq_s8(v1970, v1970, 8uLL).u64[0];
              v1974 = vextq_s8(v1969, v1969, 8uLL).u64[0];
              v1976 = *(int8x16_t *)(v1988 + 256);
              v1977 = *(int8x16_t *)(v1988 + 272);
              v1979 = vextq_s8(v1977, v1977, 8uLL).u64[0];
              v1980 = vextq_s8(v1976, v1976, 8uLL).u64[0];
              v1978 = vextq_s8(v1975, v1975, 8uLL).u64[0];
              v1939[1] = *(int64x2_t *)(v1988 + 16);
              v1939[2] = v1992;
              *v1939 = v1991;
              v1981 = (int64x2_t *)((char *)v1939 + 8 * v1989);
              v1981[1] = v1993;
            }
            v1981[2] = v1956;
            *v1981 = v1955;
            v1957.i64[1] = v1962;
            v1958.i64[1] = v1961;
            v1982 = (int8x16_t *)&v1939[v1989];
            *v1982 = v1957;
            v1982[1] = v1958;
            v1959.i64[1] = v1960;
            v1982[2] = v1959;
            v1965.i64[1] = v1967;
            v1983 = (int8x16_t *)((char *)v1939 + 24 * v1989);
            v1964.i64[1] = v1968;
            v1963.i64[1] = v1966;
            v1983[1] = v1964;
            v1983[2] = v1965;
            *v1983 = v1963;
            v1984 = (int8x16_t *)&v1939[2 * v1989];
            v1971.i64[1] = v1972;
            v1970.i64[1] = v1973;
            v1969.i64[1] = v1974;
            v1984[1] = v1970;
            v1984[2] = v1971;
            *v1984 = v1969;
            v1985 = (int8x16_t *)((char *)v1939 + 40 * v1989);
            v1977.i64[1] = v1979;
            v1976.i64[1] = v1980;
            v1975.i64[1] = v1978;
            v1938 += 4;
            v1985[1] = v1976;
            v1985[2] = v1977;
            *v1985 = v1975;
          }
          while (v1938 != v1937);
          v1931 = *(unsigned int *)(a1 + 5460);
        }
        ++v1932;
        ++v1933;
      }
      while (v1932 < v1931);
    }
    v2015 = *(unsigned int *)(a1 + 6468);
    if ((_DWORD)v2015)
    {
      v2016 = 0;
      v2017 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2018 = *(_QWORD *)(*(_QWORD *)(a1 + 6576) + 8 * v2016);
        if (v2018)
        {
          v2019 = *(_QWORD *)(a1 + 6544);
          v2020 = (*(_DWORD *)(a1 + 6568) * v2016);
          v2021 = (unsigned int *)(v2019 + 16 * (v2018 + v2020));
          v2022 = (unsigned int *)(v2019 + 16 * v2020);
          do
          {
            while (1)
            {
              v2041 = *v2017;
              v2042 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2022);
              v2043 = *(_QWORD *)(a1 + 6472) + 8 * *((_QWORD *)v2022 + 1);
              v2044 = *v6;
              v2045 = *(_QWORD *)(a1 + 20040);
              if (*v2017 >= v2042)
                break;
              v2023 = *(int64x2_t *)(v2043 + 16);
              v2024 = (int64x2_t *)(v2045 + 8 * (v2041 + (_DWORD)v2044 * v2042));
              v2026 = *(int64x2_t *)(v2043 + 64);
              v2025 = *(int64x2_t *)(v2043 + 80);
              v2027 = *(int64x2_t *)(v2043 + 32);
              v2028 = *(int64x2_t *)(v2043 + 48);
              v2030 = *(int64x2_t *)(v2043 + 96);
              v2029 = *(int64x2_t *)(v2043 + 112);
              v2032 = *(int64x2_t *)(v2043 + 160);
              v2031 = *(int64x2_t *)(v2043 + 176);
              v2033 = *(int64x2_t *)(v2043 + 128);
              v2034 = *(int64x2_t *)(v2043 + 144);
              v2035 = vzip2q_s64(*(int64x2_t *)v2043, v2028);
              *v2024 = vzip1q_s64(*(int64x2_t *)v2043, v2028);
              v2024[1] = vzip1q_s64(v2030, v2034);
              v2036 = (int64x2_t *)((char *)v2024 + 8 * v2044);
              *v2036 = v2035;
              v2036[1] = vzip2q_s64(v2030, v2034);
              v2037 = &v2024[v2044];
              *v2037 = vzip1q_s64(v2023, v2026);
              v2037[1] = vzip1q_s64(v2029, v2032);
              v2038 = (int64x2_t *)((char *)v2024 + 24 * v2044);
              *v2038 = vzip2q_s64(v2023, v2026);
              v2038[1] = vzip2q_s64(v2029, v2032);
              v2039 = &v2024[2 * v2044];
              *v2039 = vzip1q_s64(v2027, v2025);
              v2039[1] = vzip1q_s64(v2033, v2031);
              v2040 = (int64x2_t *)((char *)v2024 + 40 * v2044);
              *v2040 = vzip2q_s64(v2027, v2025);
              v2040[1] = vzip2q_s64(v2033, v2031);
              v2022 += 4;
              if (v2022 == v2021)
                goto LABEL_498;
            }
            v2046 = *(int64x2_t *)v2043;
            v2047 = (int64x2_t *)(v2045 + 8 * (v2042 + (_DWORD)v2044 * v2041));
            v2048 = *(int64x2_t *)(v2043 + 32);
            v2049 = *(_OWORD *)(v2043 + 48);
            v2050 = *(_OWORD *)(v2043 + 64);
            v2051 = *(_OWORD *)(v2043 + 80);
            v2052 = *(int64x2_t *)(v2043 + 96);
            v2053 = *(int64x2_t *)(v2043 + 112);
            v2054 = *(int64x2_t *)(v2043 + 128);
            v2055 = *(_OWORD *)(v2043 + 144);
            v2056 = *(_OWORD *)(v2043 + 160);
            v2057 = *(_OWORD *)(v2043 + 176);
            v2047[1] = *(int64x2_t *)(v2043 + 16);
            v2047[2] = v2048;
            *v2047 = v2046;
            v2058 = &v2047->i8[8 * v2044];
            *((_OWORD *)v2058 + 1) = v2050;
            *((_OWORD *)v2058 + 2) = v2051;
            *(_OWORD *)v2058 = v2049;
            v2059 = &v2047[v2044];
            v2059[1] = v2053;
            v2059[2] = v2054;
            *v2059 = v2052;
            v2060 = &v2047->i8[24 * v2044];
            *((_OWORD *)v2060 + 1) = v2056;
            *((_OWORD *)v2060 + 2) = v2057;
            *(_OWORD *)v2060 = v2055;
            v2022 += 4;
          }
          while (v2022 != v2021);
LABEL_498:
          v2015 = *(unsigned int *)(a1 + 6468);
        }
        ++v2016;
        ++v2017;
      }
      while (v2016 < v2015);
    }
    v2124 = *(unsigned int *)(a1 + 7476);
    if ((_DWORD)v2124)
    {
      v2125 = 0;
      v2126 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2127 = *(_QWORD *)(*(_QWORD *)(a1 + 7584) + 8 * v2125);
        if (v2127)
        {
          v2128 = *(_QWORD *)(a1 + 7552);
          v2129 = (*(_DWORD *)(a1 + 7576) * v2125);
          v2130 = (unsigned int *)(v2128 + 16 * (v2127 + v2129));
          v2131 = (unsigned int *)(v2128 + 16 * v2129);
          do
          {
            while (1)
            {
              v2150 = *v2126;
              v2151 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2131);
              v2152 = *(_QWORD *)(a1 + 7480) + 8 * *((_QWORD *)v2131 + 1);
              v2153 = *v6;
              v2154 = *(_QWORD *)(a1 + 20040);
              if (*v2126 >= v2151)
                break;
              v2132 = *(int64x2_t *)(v2152 + 16);
              v2133 = (int64x2_t *)(v2154 + 8 * (v2150 + (_DWORD)v2153 * v2151));
              v2135 = *(int64x2_t *)(v2152 + 64);
              v2134 = *(int64x2_t *)(v2152 + 80);
              v2136 = *(int64x2_t *)(v2152 + 32);
              v2137 = *(int64x2_t *)(v2152 + 48);
              v2139 = *(int64x2_t *)(v2152 + 96);
              v2138 = *(int64x2_t *)(v2152 + 112);
              v2141 = *(int64x2_t *)(v2152 + 160);
              v2140 = *(int64x2_t *)(v2152 + 176);
              v2142 = *(int64x2_t *)(v2152 + 128);
              v2143 = *(int64x2_t *)(v2152 + 144);
              v2144 = vzip2q_s64(*(int64x2_t *)v2152, v2137);
              *v2133 = vzip1q_s64(*(int64x2_t *)v2152, v2137);
              v2133[1] = vzip1q_s64(v2139, v2143);
              v2145 = (int64x2_t *)((char *)v2133 + 8 * v2153);
              *v2145 = v2144;
              v2145[1] = vzip2q_s64(v2139, v2143);
              v2146 = &v2133[v2153];
              *v2146 = vzip1q_s64(v2132, v2135);
              v2146[1] = vzip1q_s64(v2138, v2141);
              v2147 = (int64x2_t *)((char *)v2133 + 24 * v2153);
              *v2147 = vzip2q_s64(v2132, v2135);
              v2147[1] = vzip2q_s64(v2138, v2141);
              v2148 = &v2133[2 * v2153];
              *v2148 = vzip1q_s64(v2136, v2134);
              v2148[1] = vzip1q_s64(v2142, v2140);
              v2149 = (int64x2_t *)((char *)v2133 + 40 * v2153);
              *v2149 = vzip2q_s64(v2136, v2134);
              v2149[1] = vzip2q_s64(v2142, v2140);
              v2131 += 4;
              if (v2131 == v2130)
                goto LABEL_518;
            }
            v2155 = *(int64x2_t *)v2152;
            v2156 = (int64x2_t *)(v2154 + 8 * (v2151 + (_DWORD)v2153 * v2150));
            v2157 = *(int64x2_t *)(v2152 + 32);
            v2158 = *(_OWORD *)(v2152 + 48);
            v2159 = *(_OWORD *)(v2152 + 64);
            v2160 = *(_OWORD *)(v2152 + 80);
            v2161 = *(int64x2_t *)(v2152 + 96);
            v2162 = *(int64x2_t *)(v2152 + 112);
            v2163 = *(int64x2_t *)(v2152 + 128);
            v2164 = *(_OWORD *)(v2152 + 144);
            v2165 = *(_OWORD *)(v2152 + 160);
            v2166 = *(_OWORD *)(v2152 + 176);
            v2156[1] = *(int64x2_t *)(v2152 + 16);
            v2156[2] = v2157;
            *v2156 = v2155;
            v2167 = &v2156->i8[8 * v2153];
            *((_OWORD *)v2167 + 1) = v2159;
            *((_OWORD *)v2167 + 2) = v2160;
            *(_OWORD *)v2167 = v2158;
            v2168 = &v2156[v2153];
            v2168[1] = v2162;
            v2168[2] = v2163;
            *v2168 = v2161;
            v2169 = &v2156->i8[24 * v2153];
            *((_OWORD *)v2169 + 1) = v2165;
            *((_OWORD *)v2169 + 2) = v2166;
            *(_OWORD *)v2169 = v2164;
            v2131 += 4;
          }
          while (v2131 != v2130);
LABEL_518:
          v2124 = *(unsigned int *)(a1 + 7476);
        }
        ++v2125;
        ++v2126;
      }
      while (v2125 < v2124);
    }
    v2216 = *(unsigned int *)(a1 + 8484);
    if ((_DWORD)v2216)
    {
      v2217 = 0;
      v2218 = *(unsigned int **)(a1 + 10664);
      do
      {
        v2219 = *(_QWORD *)(*(_QWORD *)(a1 + 8592) + 8 * v2217);
        if (v2219)
        {
          v2220 = *(_QWORD *)(a1 + 8560);
          v2221 = (*(_DWORD *)(a1 + 8584) * v2217);
          v2222 = (unsigned int *)(v2220 + 16 * (v2219 + v2221));
          v2223 = (unsigned int *)(v2220 + 16 * v2221);
          do
          {
            while (1)
            {
              v2240 = *v2218;
              v2241 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2223);
              v2242 = *(_QWORD *)(a1 + 8488) + 8 * *((_QWORD *)v2223 + 1);
              v2243 = *v6;
              v2244 = *(_QWORD *)(a1 + 20040);
              if (*v2218 >= v2241)
                break;
              v2224 = *(int64x2_t *)(v2242 + 16);
              v2225 = (int64x2_t *)(v2244 + 8 * (v2240 + (_DWORD)v2243 * v2241));
              v2227 = *(int64x2_t *)(v2242 + 64);
              v2226 = *(int64x2_t *)(v2242 + 80);
              v2228 = *(int64x2_t *)(v2242 + 32);
              v2229 = *(int64x2_t *)(v2242 + 48);
              v2231 = *(_OWORD *)(v2242 + 112);
              v2230 = *(_OWORD *)(v2242 + 128);
              v2232 = *(_OWORD *)(v2242 + 96);
              v2233 = vzip1q_s64(*(int64x2_t *)v2242, v2229);
              v2234 = vzip2q_s64(*(int64x2_t *)v2242, v2229);
              v2225[1].i64[0] = v2232;
              *v2225 = v2233;
              v2235 = (int64x2_t *)((char *)v2225 + 8 * v2243);
              *v2235 = v2234;
              v2235[1].i64[0] = *((_QWORD *)&v2232 + 1);
              v2236 = &v2225[v2243];
              v2236[1].i64[0] = v2231;
              *v2236 = vzip1q_s64(v2224, v2227);
              v2237 = (int64x2_t *)((char *)v2225 + 24 * v2243);
              v2237[1].i64[0] = *((_QWORD *)&v2231 + 1);
              *v2237 = vzip2q_s64(v2224, v2227);
              v2238 = &v2225[2 * v2243];
              v2238[1].i64[0] = v2230;
              *v2238 = vzip1q_s64(v2228, v2226);
              v2239 = (int64x2_t *)((char *)v2225 + 40 * v2243);
              v2239[1].i64[0] = *((_QWORD *)&v2230 + 1);
              *v2239 = vzip2q_s64(v2228, v2226);
              v2223 += 4;
              if (v2223 == v2222)
                goto LABEL_538;
            }
            v2245 = *(int64x2_t *)v2242;
            v2246 = (int64x2_t *)(v2244 + 8 * (v2241 + (_DWORD)v2243 * v2240));
            v2247 = *(int64x2_t *)(v2242 + 32);
            v2248 = *(_OWORD *)(v2242 + 48);
            v2249 = *(_OWORD *)(v2242 + 64);
            v2250 = *(_OWORD *)(v2242 + 80);
            v2251 = *(int64x2_t *)(v2242 + 96);
            v2252 = *(int64x2_t *)(v2242 + 112);
            v2253 = *(int64x2_t *)(v2242 + 128);
            v2246[1] = *(int64x2_t *)(v2242 + 16);
            v2246[2] = v2247;
            *v2246 = v2245;
            v2254 = &v2246->i8[8 * v2243];
            *((_OWORD *)v2254 + 1) = v2249;
            *((_OWORD *)v2254 + 2) = v2250;
            *(_OWORD *)v2254 = v2248;
            v2255 = &v2246[v2243];
            v2255[1] = v2252;
            v2255[2] = v2253;
            *v2255 = v2251;
            v2223 += 4;
          }
          while (v2223 != v2222);
LABEL_538:
          v2216 = *(unsigned int *)(a1 + 8484);
        }
        ++v2217;
        ++v2218;
      }
      while (v2217 < v2216);
    }
    v2302 = *(unsigned int *)(a1 + 2292);
    if ((_DWORD)v2302)
    {
      v2303 = 0;
      v2304 = *(unsigned int **)(a1 + 10520);
      do
      {
        v2305 = *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 8 * v2303);
        if (v2305)
        {
          v2306 = *(_QWORD *)(a1 + 2368);
          v2307 = (*(_DWORD *)(a1 + 2392) * v2303);
          v2308 = (unsigned int *)(v2306 + 16 * (v2305 + v2307));
          v2309 = (unsigned int *)(v2306 + 16 * v2307);
          do
          {
            while (1)
            {
              v2313 = *v2304;
              v2314 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2309);
              v2315 = *(_QWORD *)(a1 + 2296) + 8 * *((_QWORD *)v2309 + 1);
              v2316 = *v6;
              v2317 = *(_QWORD *)(a1 + 20040);
              v2318 = *(_QWORD *)(v2315 + 24);
              if (*v2304 >= v2314)
                break;
              v2310 = (_OWORD *)(v2317 + 8 * (v2313 + (_DWORD)v2316 * v2314));
              v2311 = *(_OWORD *)v2315;
              v2312 = *(_OWORD *)(v2315 + 32);
              v2310[1] = *(_OWORD *)(v2315 + 16);
              v2310[2] = v2312;
              *v2310 = v2311;
              v2309 += 4;
              if (v2309 == v2308)
                goto LABEL_558;
            }
            v2319 = (_QWORD *)(v2317 + 8 * (v2314 + (_DWORD)v2316 * v2313));
            v2320 = *(_QWORD *)(v2315 + 8);
            v2321 = *(_QWORD *)(v2315 + 16);
            v2322 = *(_QWORD *)(v2315 + 32);
            v2323 = *(_QWORD *)(v2315 + 40);
            *v2319 = *(_QWORD *)v2315;
            v2319[v2316] = v2320;
            v2319[2 * v2316] = v2321;
            v2319[3 * v2316] = v2318;
            v2319[4 * v2316] = v2322;
            v2319[5 * v2316] = v2323;
            v2309 += 4;
          }
          while (v2309 != v2308);
LABEL_558:
          v2302 = *(unsigned int *)(a1 + 2292);
        }
        ++v2303;
        ++v2304;
      }
      while (v2303 < v2302);
    }
    v2364 = *(unsigned int *)(a1 + 3300);
    if ((_DWORD)v2364)
    {
      v2365 = 0;
      v2366 = *(unsigned int **)(a1 + 10544);
      do
      {
        v2367 = *(_QWORD *)(*(_QWORD *)(a1 + 3408) + 8 * v2365);
        if (v2367)
        {
          v2368 = *(_QWORD *)(a1 + 3376);
          v2369 = (*(_DWORD *)(a1 + 3400) * v2365);
          v2370 = (unsigned int *)(v2368 + 16 * (v2367 + v2369));
          v2371 = (unsigned int *)(v2368 + 16 * v2369);
          do
          {
            while (1)
            {
              v2377 = *v2366;
              v2378 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2371);
              v2379 = *(_QWORD *)(a1 + 3304) + 8 * *((_QWORD *)v2371 + 1);
              v2380 = *v6;
              v2381 = *(_QWORD *)(a1 + 20040);
              v2382 = *(_QWORD *)(v2379 + 24);
              if (*v2366 >= v2378)
                break;
              v2372 = v2381 + 8 * (v2377 + (_DWORD)v2380 * v2378);
              v2373 = *(_OWORD *)v2379;
              v2374 = *(_OWORD *)(v2379 + 16);
              v2375 = *(_OWORD *)(v2379 + 32);
              v2376 = *(_OWORD *)(v2379 + 48);
              *(_QWORD *)(v2372 + 64) = *(_QWORD *)(v2379 + 64);
              *(_OWORD *)(v2372 + 32) = v2375;
              *(_OWORD *)(v2372 + 48) = v2376;
              *(_OWORD *)v2372 = v2373;
              *(_OWORD *)(v2372 + 16) = v2374;
              v2371 += 4;
              if (v2371 == v2370)
                goto LABEL_578;
            }
            v2383 = *(_QWORD *)(v2379 + 8);
            v2384 = (_QWORD *)(v2381 + 8 * (v2378 + (_DWORD)v2380 * v2377));
            v2385 = *(_QWORD *)(v2379 + 16);
            v2386 = *(_QWORD *)(v2379 + 32);
            v2387 = *(_QWORD *)(v2379 + 40);
            v2388 = *(_QWORD *)(v2379 + 48);
            v2389 = *(_QWORD *)(v2379 + 56);
            v2390 = *(_QWORD *)(v2379 + 64);
            *v2384 = *(_QWORD *)v2379;
            v2384[v2380] = v2383;
            v2384[2 * v2380] = v2385;
            v2384[3 * v2380] = v2382;
            v2384[4 * v2380] = v2386;
            v2384[5 * v2380] = v2387;
            v2384[6 * v2380] = v2388;
            v2384[7 * v2380] = v2389;
            v2384[8 * v2380] = v2390;
            v2371 += 4;
          }
          while (v2371 != v2370);
LABEL_578:
          v2364 = *(unsigned int *)(a1 + 3300);
        }
        ++v2365;
        ++v2366;
      }
      while (v2365 < v2364);
    }
    sub_20F6165A4(a1 + 4296, a1 + 20040, (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10568), 1);
    v2413 = *(unsigned int *)(a1 + 5316);
    if ((_DWORD)v2413)
    {
      v2414 = 0;
      v2415 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2416 = *(_QWORD *)(*(_QWORD *)(a1 + 5424) + 8 * v2414);
        if (v2416)
        {
          v2417 = *(_QWORD *)(a1 + 5392);
          v2418 = (*(_DWORD *)(a1 + 5416) * v2414);
          v2419 = (unsigned int *)(v2417 + 16 * (v2416 + v2418));
          v2420 = (unsigned int *)(v2417 + 16 * v2418);
          do
          {
            while (1)
            {
              v2424 = *v2415;
              v2425 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2420);
              v2426 = *(_QWORD *)(a1 + 5320) + 8 * *((_QWORD *)v2420 + 1);
              v2427 = *v6;
              v2428 = *(_QWORD *)(a1 + 20040);
              v2429 = *(_QWORD *)(v2426 + 24);
              if (*v2415 >= v2425)
                break;
              v2421 = (_OWORD *)(v2428 + 8 * (v2424 + (_DWORD)v2427 * v2425));
              v2422 = *(_OWORD *)v2426;
              v2423 = *(_OWORD *)(v2426 + 32);
              v2421[1] = *(_OWORD *)(v2426 + 16);
              v2421[2] = v2423;
              *v2421 = v2422;
              v2420 += 4;
              if (v2420 == v2419)
                goto LABEL_598;
            }
            v2430 = (_QWORD *)(v2428 + 8 * (v2425 + (_DWORD)v2427 * v2424));
            v2431 = *(_QWORD *)(v2426 + 8);
            v2432 = *(_QWORD *)(v2426 + 16);
            v2433 = *(_QWORD *)(v2426 + 32);
            v2434 = *(_QWORD *)(v2426 + 40);
            *v2430 = *(_QWORD *)v2426;
            v2430[v2427] = v2431;
            v2430[2 * v2427] = v2432;
            v2430[3 * v2427] = v2429;
            v2430[4 * v2427] = v2433;
            v2430[5 * v2427] = v2434;
            v2420 += 4;
          }
          while (v2420 != v2419);
LABEL_598:
          v2413 = *(unsigned int *)(a1 + 5316);
        }
        ++v2414;
        ++v2415;
      }
      while (v2414 < v2413);
    }
    sub_20F6166B0(a1 + 6312, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10616), 1);
    sub_20F6166B0(a1 + 7320, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10640), 1);
    sub_20F61684C(a1 + 8328, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10664), 1);
    v2462 = *(unsigned int *)(a1 + 2148);
    if ((_DWORD)v2462)
    {
      v2463 = 0;
      v2464 = *(unsigned int **)(a1 + 10520);
      do
      {
        v2465 = *(_QWORD *)(*(_QWORD *)(a1 + 2256) + 8 * v2463);
        if (v2465)
        {
          v2466 = *(_QWORD *)(a1 + 2224);
          v2467 = (*(_DWORD *)(a1 + 2248) * v2463);
          v2468 = (unsigned int *)(v2466 + 16 * (v2465 + v2467));
          v2469 = (unsigned int *)(v2466 + 16 * v2467);
          do
          {
            while (1)
            {
              v2510 = *v2464;
              v2511 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2469);
              v2512 = *(_QWORD *)(a1 + 2152) + 8 * *((_QWORD *)v2469 + 1);
              v2513 = *v6;
              v2514 = *(_QWORD *)(a1 + 20040);
              if (*v2464 >= v2511)
                break;
              v2470.i64[0] = *(_QWORD *)(v2512 + 64);
              v2471 = (int64x2_t *)(v2514 + 8 * (v2510 + (_DWORD)v2513 * v2511));
              v2473 = *(int64x2_t *)(v2512 + 32);
              v2472 = *(int64x2_t *)(v2512 + 48);
              v2474 = *(int64x2_t *)(v2512 + 16);
              v2475 = *(int64x2_t *)(v2512 + 120);
              v2476 = *(int64x2_t *)(v2512 + 104);
              v2477 = *(int64x2_t *)(v2512 + 88);
              v2478 = *(int64x2_t *)(v2512 + 72);
              v2479.i64[0] = *(_QWORD *)(v2512 + 208);
              v2481 = *(int64x2_t *)(v2512 + 176);
              v2480 = *(int64x2_t *)(v2512 + 192);
              v2483 = *(int64x2_t *)(v2512 + 144);
              v2482 = *(int64x2_t *)(v2512 + 160);
              v2484 = *(int64x2_t *)(v2512 + 216);
              v2485 = *(int64x2_t *)(v2512 + 264);
              v2486 = *(int64x2_t *)(v2512 + 248);
              v2487 = *(int64x2_t *)(v2512 + 232);
              v2488.i64[0] = *(_QWORD *)(v2512 + 352);
              v2490 = *(int64x2_t *)(v2512 + 320);
              v2489 = *(int64x2_t *)(v2512 + 336);
              v2492 = *(int64x2_t *)(v2512 + 288);
              v2491 = *(int64x2_t *)(v2512 + 304);
              v2493 = *(int64x2_t *)(v2512 + 392);
              v2494 = *(int64x2_t *)(v2512 + 408);
              v2495 = *(int64x2_t *)(v2512 + 376);
              v2496 = vzip1q_s64(*(int64x2_t *)v2512, v2478);
              v2497 = vzip1q_s64(v2492, *(int64x2_t *)(v2512 + 360));
              v2498 = vzip1q_s64(v2483, v2484);
              v2499 = vzip2q_s64(*(int64x2_t *)v2512, v2478);
              v2500 = vzip2q_s64(v2483, v2484);
              v2501 = vzip2q_s64(v2492, *(int64x2_t *)(v2512 + 360));
              v2470.i64[1] = *(_QWORD *)(v2512 + 136);
              v2479.i64[1] = *(_QWORD *)(v2512 + 280);
              v2488.i64[1] = *(_QWORD *)(v2512 + 424);
              v2471[1] = v2498;
              v2471[2] = v2497;
              *v2471 = v2496;
              v2502 = (int64x2_t *)((char *)v2471 + 8 * v2513);
              v2502[1] = v2500;
              v2502[2] = v2501;
              *v2502 = v2499;
              v2503 = &v2471[v2513];
              v2503[1] = vzip1q_s64(v2482, v2487);
              v2503[2] = vzip1q_s64(v2491, v2495);
              *v2503 = vzip1q_s64(v2474, v2477);
              v2504 = (int64x2_t *)((char *)v2471 + 24 * v2513);
              v2504[1] = vzip2q_s64(v2482, v2487);
              v2504[2] = vzip2q_s64(v2491, v2495);
              *v2504 = vzip2q_s64(v2474, v2477);
              v2505 = &v2471[2 * v2513];
              v2505[1] = vzip1q_s64(v2481, v2486);
              v2505[2] = vzip1q_s64(v2490, v2493);
              *v2505 = vzip1q_s64(v2473, v2476);
              v2506 = (int64x2_t *)((char *)v2471 + 40 * v2513);
              v2506[1] = vzip2q_s64(v2481, v2486);
              v2506[2] = vzip2q_s64(v2490, v2493);
              *v2506 = vzip2q_s64(v2473, v2476);
              v2507 = &v2471[3 * v2513];
              v2507[1] = vzip1q_s64(v2480, v2485);
              v2507[2] = vzip1q_s64(v2489, v2494);
              *v2507 = vzip1q_s64(v2472, v2475);
              v2508 = (int64x2_t *)((char *)v2471 + 56 * v2513);
              v2508[1] = vzip2q_s64(v2480, v2485);
              v2508[2] = vzip2q_s64(v2489, v2494);
              *v2508 = vzip2q_s64(v2472, v2475);
              v2509 = &v2471[4 * v2513];
              v2509[1] = v2479;
              v2509[2] = v2488;
              *v2509 = v2470;
              v2469 += 4;
              if (v2469 == v2468)
                goto LABEL_618;
            }
            v2515 = *(_QWORD *)(v2512 + 64);
            v2516 = v2514 + 8 * (v2511 + (_DWORD)v2513 * v2510);
            v2517 = *(_OWORD *)(v2512 + 48);
            v2518 = *(int64x2_t *)v2512;
            v2519 = *(_OWORD *)(v2512 + 16);
            v2520 = *(_OWORD *)(v2512 + 72);
            v2521 = *(_OWORD *)(v2512 + 88);
            v2522 = *(_OWORD *)(v2512 + 104);
            v2523 = *(_OWORD *)(v2512 + 120);
            v2524 = *(_QWORD *)(v2512 + 136);
            v2525 = *(_OWORD *)(v2512 + 144);
            v2526 = *(_OWORD *)(v2512 + 160);
            v2527 = *(_OWORD *)(v2512 + 176);
            v2528 = *(_OWORD *)(v2512 + 192);
            v2529 = *(_QWORD *)(v2512 + 208);
            v2530 = *(_OWORD *)(v2512 + 232);
            v2531 = *(_OWORD *)(v2512 + 248);
            v2532 = *(_OWORD *)(v2512 + 216);
            v2533 = *(_OWORD *)(v2512 + 264);
            v2534 = *(_QWORD *)(v2512 + 280);
            v2535 = *(_OWORD *)(v2512 + 288);
            v2536 = *(_OWORD *)(v2512 + 304);
            v2537 = *(_OWORD *)(v2512 + 320);
            v2538 = *(_OWORD *)(v2512 + 336);
            v2539 = *(_QWORD *)(v2512 + 352);
            v2540 = *(_OWORD *)(v2512 + 360);
            v2541 = *(_OWORD *)(v2512 + 376);
            v2542 = *(_OWORD *)(v2512 + 392);
            v2543 = *(_OWORD *)(v2512 + 408);
            v2544 = *(_QWORD *)(v2512 + 424);
            *(_OWORD *)(v2516 + 32) = *(_OWORD *)(v2512 + 32);
            *(_OWORD *)(v2516 + 48) = v2517;
            *(_QWORD *)(v2516 + 64) = v2515;
            *(int64x2_t *)v2516 = v2518;
            *(_OWORD *)(v2516 + 16) = v2519;
            v2545 = v2516 + 8 * v2513;
            *(_QWORD *)(v2545 + 64) = v2524;
            *(_OWORD *)(v2545 + 32) = v2522;
            *(_OWORD *)(v2545 + 48) = v2523;
            *(_OWORD *)v2545 = v2520;
            *(_OWORD *)(v2545 + 16) = v2521;
            v2546 = v2516 + 16 * v2513;
            *(_QWORD *)(v2546 + 64) = v2529;
            *(_OWORD *)(v2546 + 32) = v2527;
            *(_OWORD *)(v2546 + 48) = v2528;
            *(_OWORD *)v2546 = v2525;
            *(_OWORD *)(v2546 + 16) = v2526;
            v2547 = v2516 + 24 * v2513;
            *(_QWORD *)(v2547 + 64) = v2534;
            *(_OWORD *)(v2547 + 32) = v2531;
            *(_OWORD *)(v2547 + 48) = v2533;
            *(_OWORD *)v2547 = v2532;
            *(_OWORD *)(v2547 + 16) = v2530;
            v2548 = v2516 + 32 * v2513;
            *(_QWORD *)(v2548 + 64) = v2539;
            *(_OWORD *)(v2548 + 32) = v2537;
            *(_OWORD *)(v2548 + 48) = v2538;
            *(_OWORD *)v2548 = v2535;
            *(_OWORD *)(v2548 + 16) = v2536;
            v2549 = v2516 + 40 * v2513;
            *(_QWORD *)(v2549 + 64) = v2544;
            *(_OWORD *)(v2549 + 32) = v2542;
            *(_OWORD *)(v2549 + 48) = v2543;
            *(_OWORD *)v2549 = v2540;
            *(_OWORD *)(v2549 + 16) = v2541;
            v2469 += 4;
          }
          while (v2469 != v2468);
LABEL_618:
          v2462 = *(unsigned int *)(a1 + 2148);
        }
        ++v2463;
        ++v2464;
      }
      while (v2463 < v2462);
    }
    v2561 = *(unsigned int *)(a1 + 3156);
    if ((_DWORD)v2561)
    {
      v2562 = 0;
      v2563 = *(unsigned int **)(a1 + 10544);
      do
      {
        v2564 = *(_QWORD *)(*(_QWORD *)(a1 + 3264) + 8 * v2562);
        if (v2564)
        {
          v2565 = *(_QWORD *)(a1 + 3232);
          v2566 = (*(_DWORD *)(a1 + 3256) * v2562);
          v2567 = (unsigned int *)(v2565 + 16 * (v2564 + v2566));
          v2568 = (unsigned int *)(v2565 + 16 * v2566);
          do
          {
            v2657 = *v2563;
            v2658 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2568);
            v2659 = *(_QWORD *)(a1 + 3160) + 8 * *((_QWORD *)v2568 + 1);
            v2660 = *v6;
            v2661 = *(_QWORD *)(a1 + 20040);
            if (*v2563 < v2658)
            {
              v4364 = *(int64x2_t *)(v2659 + 48);
              v2570 = *(int64x2_t *)(v2659 + 16);
              v2569 = *(int64x2_t *)(v2659 + 32);
              v2571 = *(int64x2_t *)(v2659 + 120);
              v2572 = *(int64x2_t *)(v2659 + 104);
              v2573 = *(int64x2_t *)(v2659 + 88);
              v2574 = *(int64x2_t *)(v2659 + 72);
              v2575 = *(int64x2_t *)(v2659 + 176);
              v2612 = *(int8x16_t *)(v2659 + 192);
              v2576 = *(int8x16_t *)(v2659 + 144);
              v2577 = *(int64x2_t *)(v2659 + 160);
              v2579 = *(int8x16_t *)(v2659 + 320);
              v2578 = *(int64x2_t *)(v2659 + 336);
              v2581 = *(int64x2_t *)(v2659 + 288);
              v2580 = *(int64x2_t *)(v2659 + 304);
              v2582 = *(int64x2_t *)(v2659 + 448);
              v2616 = *(int8x16_t *)(v2659 + 464);
              v2583 = vdupq_laneq_s64((int64x2_t)v2576, 1).u64[0];
              v2609.i64[1] = *(_QWORD *)(v2659 + 224);
              v2584 = *(int8x16_t *)(v2659 + 432);
              v4370 = vzip1q_s64((int64x2_t)v2576, *(int64x2_t *)(v2659 + 216));
              v4358 = vzip1q_s64(v2581, *(int64x2_t *)(v2659 + 360));
              v2585.i64[0] = vdupq_laneq_s64(v2581, 1).u64[0];
              v2585.i64[1] = *(_QWORD *)(v2659 + 368);
              v4350 = vzip1q_s64((int64x2_t)v2584, *(int64x2_t *)(v2659 + 504));
              v2586.i64[0] = vdupq_laneq_s64((int64x2_t)v2584, 1).u64[0];
              v2586.i64[1] = *(_QWORD *)(v2659 + 512);
              v4367 = vzip1q_s64(*(int64x2_t *)v2659, v2574);
              v4380 = vzip2q_s64(*(int64x2_t *)v2659, v2574);
              v4394 = (int8x16_t)vzip1q_s64(v2577, *(int64x2_t *)(v2659 + 232));
              v2577.i64[0] = vdupq_laneq_s64(v2577, 1).u64[0];
              v2622.i64[1] = *(_QWORD *)(v2659 + 240);
              v4296 = vzip1q_s64(v2580, *(int64x2_t *)(v2659 + 376));
              v2587 = vdupq_laneq_s64(v2580, 1).u64[0];
              v2614.i64[1] = *(_QWORD *)(v2659 + 384);
              v2588 = (int8x16_t)vzip1q_s64(v2570, v2573);
              v2589 = (int8x16_t)vzip2q_s64(v2570, v2573);
              v2590 = (int8x16_t)vzip1q_s64(v2582, *(int64x2_t *)(v2659 + 520));
              v2584.i64[0] = vdupq_laneq_s64(v2582, 1).u64[0];
              v2584.i64[1] = *(_QWORD *)(v2659 + 528);
              v2591 = (int8x16_t)vzip1q_s64(v2575, *(int64x2_t *)(v2659 + 248));
              v2576.i64[0] = vdupq_laneq_s64(v2575, 1).u64[0];
              v2576.i64[1] = *(_QWORD *)(v2659 + 256);
              v2592 = (int8x16_t)vzip1q_s64(v2569, v2572);
              v2617 = (int8x16_t)vzip2q_s64(v2569, v2572);
              v2593 = (int8x16_t)vzip1q_s64((int64x2_t)v2579, *(int64x2_t *)(v2659 + 392));
              v2579.i64[0] = vdupq_laneq_s64((int64x2_t)v2579, 1).u64[0];
              v2579.i64[1] = *(_QWORD *)(v2659 + 400);
              v2594 = (int8x16_t)vzip1q_s64((int64x2_t)v2616, *(int64x2_t *)(v2659 + 536));
              v2595.i64[0] = vdupq_laneq_s64((int64x2_t)v2616, 1).u64[0];
              v2595.i64[1] = *(_QWORD *)(v2659 + 544);
              v2596 = (int8x16_t)vzip1q_s64(v4364, v2571);
              v2597 = (int8x16_t)vzip2q_s64(v4364, v2571);
              v2626 = (int8x16_t)vzip1q_s64((int64x2_t)v2612, *(int64x2_t *)(v2659 + 264));
              v2598.i64[0] = vdupq_laneq_s64((int64x2_t)v2612, 1).u64[0];
              v2598.i64[1] = *(_QWORD *)(v2659 + 272);
              v2599 = (int8x16_t)vzip1q_s64(v2578, *(int64x2_t *)(v2659 + 408));
              v2600.i64[0] = vdupq_laneq_s64(v2578, 1).u64[0];
              v2600.i64[1] = *(_QWORD *)(v2659 + 416);
              v2601 = *(int64x2_t *)(v2659 + 480);
              v2602 = (int8x16_t)vzip1q_s64(v2601, *(int64x2_t *)(v2659 + 552));
              v2603.i64[0] = vdupq_laneq_s64(v2601, 1).u64[0];
              v2603.i64[1] = *(_QWORD *)(v2659 + 560);
              v2604 = (int64x2_t *)(v2661 + 8 * (v2657 + (_DWORD)v2660 * v2658));
              v4365 = *(_QWORD *)(v2659 + 64);
              v4336 = *(_QWORD *)(v2659 + 136);
              v2575.i64[0] = *(_QWORD *)(v2659 + 208);
              v4334 = *(_QWORD *)(v2659 + 280);
              v4362 = *(_QWORD *)(v2659 + 352);
              v4332 = *(_QWORD *)(v2659 + 424);
              v4356 = *(_QWORD *)(v2659 + 496);
              v4330 = *(_QWORD *)(v2659 + 568);
              v4354 = *(_QWORD *)(v2659 + 640);
              v2605 = *(int8x16_t *)(v2659 + 608);
              v2630 = *(int8x16_t *)(v2659 + 624);
              v2606 = *(_OWORD *)(v2659 + 576);
              v2607 = *(int8x16_t *)(v2659 + 592);
              v2604[2] = v4358;
              v2604[3] = v4350;
              *v2604 = v4367;
              v2604[1] = v4370;
              v2608 = (int8x16_t *)((char *)v2604 + 8 * v2660);
              v2604[4].i64[0] = v2606;
              v2608[4].i64[0] = *((_QWORD *)&v2606 + 1);
              v2608[2] = v2585;
              v2608[3] = v2586;
              *v2608 = (int8x16_t)v4380;
              v2608[1] = v2609;
              v2609.i64[0] = v2588.i64[0];
              v4326 = vextq_s8(v2588, v2588, 8uLL).u64[0];
              v4390 = v2590.i64[0];
              v2610 = (int8x16_t)v4296;
              v2611 = vextq_s8(v2610, v2610, 8uLL).u64[0];
              v4385 = v2589.i64[0];
              v4322 = vextq_s8(v2589, v2589, 8uLL).u64[0];
              v2612.i64[0] = v2584.i64[0];
              v2613 = vextq_s8(v2584, v2584, 8uLL).u64[0];
              v4381 = v2587;
              v4324 = vextq_s8(v2614, v2614, 8uLL).u64[0];
              v4368 = v2577.i64[0];
              v4320 = vextq_s8(v2622, v2622, 8uLL).u64[0];
              v4351 = v2607.i64[0];
              v4342 = vextq_s8(v2607, v2607, 8uLL).u64[0];
              v4375 = v2591.i64[0];
              v4318 = vextq_s8(v2591, v2591, 8uLL).u64[0];
              v2614.i64[0] = v2592.i64[0];
              v4316 = vextq_s8(v2592, v2592, 8uLL).u64[0];
              v2615 = v2594.i64[0];
              v4314 = vextq_s8(v2594, v2594, 8uLL).u64[0];
              v2616.i64[0] = v2593.i64[0];
              v4312 = vextq_s8(v2593, v2593, 8uLL).u64[0];
              v4371 = v2617.i64[0];
              v2593.i64[0] = vextq_s8(v2617, v2617, 8uLL).u64[0];
              v4359 = v2595.i64[0];
              v4310 = vextq_s8(v2595, v2595, 8uLL).u64[0];
              v2617.i64[0] = v2579.i64[0];
              v4308 = vextq_s8(v2579, v2579, 8uLL).u64[0];
              v2618 = v2576.i64[0];
              v4306 = vextq_s8(v2576, v2576, 8uLL).u64[0];
              v4344 = v2605.i64[0];
              v4340 = vextq_s8(v2605, v2605, 8uLL).u64[0];
              v4328 = v2596.i64[0];
              v2619 = v2602.i64[0];
              v4302 = vextq_s8(v2602, v2602, 8uLL).u64[0];
              v4304 = vextq_s8(v2596, v2596, 8uLL).u64[0];
              v2620 = v2599.i64[0];
              *(_QWORD *)&v2606 = vextq_s8(v2599, v2599, 8uLL).u64[0];
              v2621 = v2593.i64[0];
              v2622.i64[0] = v2626.i64[0];
              v4298 = vextq_s8(v2626, v2626, 8uLL).u64[0];
              v4300 = v2606;
              v2623 = v2597.i64[0];
              v2624 = vextq_s8(v2597, v2597, 8uLL).u64[0];
              v2625 = vextq_s8(v2590, v2590, 8uLL).u64[0];
              v2626.i64[0] = v2575.i64[0];
              v2627 = vextq_s8(v2603, v2603, 8uLL).u64[0];
              v2628 = vextq_s8(v2600, v2600, 8uLL).u64[0];
              v2629 = vextq_s8(v2598, v2598, 8uLL).u64[0];
              v4347 = v2630.i64[0];
              v4338 = vextq_s8(v2630, v2630, 8uLL).u64[0];
              v2630.i64[0] = v2598.i64[0];
              v2631 = vextq_s8(v4394, v4394, 8uLL).u64[0];
            }
            else
            {
              v4386 = *(_QWORD *)(v2659 + 64);
              v2604 = (int64x2_t *)(v2661 + 8 * (v2658 + (_DWORD)v2660 * v2657));
              v2662 = *(int64x2_t *)(v2659 + 32);
              v4372 = *(int64x2_t *)(v2659 + 48);
              v4376 = *(int64x2_t *)v2659;
              v4391 = *(_OWORD *)(v2659 + 88);
              v4394 = *(int8x16_t *)(v2659 + 72);
              v4382 = *(_OWORD *)(v2659 + 104);
              v2663 = *(_OWORD *)(v2659 + 120);
              v2664 = *(_QWORD *)(v2659 + 136);
              v4351 = *(_QWORD *)(v2659 + 208);
              v2666 = *(int8x16_t *)(v2659 + 176);
              v2665 = *(int8x16_t *)(v2659 + 192);
              v2612 = *(int8x16_t *)(v2659 + 144);
              v2609 = *(int8x16_t *)(v2659 + 160);
              v4342 = *(_QWORD *)(v2659 + 280);
              v2626 = *(int8x16_t *)(v2659 + 248);
              v2667 = *(int8x16_t *)(v2659 + 232);
              v2668 = *(int8x16_t *)(v2659 + 216);
              v2669 = *(int8x16_t *)(v2659 + 264);
              v4344 = *(_QWORD *)(v2659 + 352);
              v2614 = *(int8x16_t *)(v2659 + 320);
              v2616 = *(int8x16_t *)(v2659 + 336);
              v2617 = *(int8x16_t *)(v2659 + 288);
              v2670 = *(int8x16_t *)(v2659 + 304);
              v4340 = *(_QWORD *)(v2659 + 424);
              v2671 = *(int8x16_t *)(v2659 + 392);
              v2672 = *(int8x16_t *)(v2659 + 408);
              v2674 = *(int8x16_t *)(v2659 + 360);
              v2673 = *(int8x16_t *)(v2659 + 376);
              v4347 = *(_QWORD *)(v2659 + 496);
              v2675 = *(int8x16_t *)(v2659 + 464);
              v2676 = *(int8x16_t *)(v2659 + 480);
              v2678 = *(int8x16_t *)(v2659 + 432);
              v2677 = *(int8x16_t *)(v2659 + 448);
              v4338 = *(_QWORD *)(v2659 + 568);
              v2600 = *(int8x16_t *)(v2659 + 536);
              v2603 = *(int8x16_t *)(v2659 + 552);
              v2679 = *(int8x16_t *)(v2659 + 504);
              v2630 = *(int8x16_t *)(v2659 + 520);
              v4354 = *(_QWORD *)(v2659 + 640);
              v2680 = *(int8x16_t *)(v2659 + 608);
              v2681 = *(int8x16_t *)(v2659 + 624);
              v2683 = *(int8x16_t *)(v2659 + 576);
              v2682 = *(int8x16_t *)(v2659 + 592);
              v2604[1] = *(int64x2_t *)(v2659 + 16);
              v2604[2] = v2662;
              v2604[3] = v4372;
              v2604[4].i64[0] = v4386;
              *v2604 = v4376;
              v2684 = &v2604->i8[8 * v2660];
              *((_QWORD *)v2684 + 8) = v2664;
              *((_OWORD *)v2684 + 2) = v4382;
              *((_OWORD *)v2684 + 3) = v2663;
              *((_OWORD *)v2684 + 1) = v4391;
              *(int8x16_t *)v2684 = v4394;
              v4390 = v2665.i64[0];
              v4394.i64[0] = v2609.i64[0];
              v2625 = vextq_s8(v2665, v2665, 8uLL).u64[0];
              v2610.i64[0] = v2666.i64[0];
              v2611 = vextq_s8(v2666, v2666, 8uLL).u64[0];
              v2631 = vextq_s8(v2609, v2609, 8uLL).u64[0];
              v2609.i64[0] = v2612.i64[0];
              v4326 = vextq_s8(v2612, v2612, 8uLL).u64[0];
              v4381 = v2626.i64[0];
              v4324 = vextq_s8(v2626, v2626, 8uLL).u64[0];
              v4368 = v2667.i64[0];
              v4320 = vextq_s8(v2667, v2667, 8uLL).u64[0];
              v4385 = v2668.i64[0];
              v4322 = vextq_s8(v2668, v2668, 8uLL).u64[0];
              v2612.i64[0] = v2669.i64[0];
              v2613 = vextq_s8(v2669, v2669, 8uLL).u64[0];
              v2615 = v2616.i64[0];
              v4314 = vextq_s8(v2616, v2616, 8uLL).u64[0];
              v2616.i64[0] = v2614.i64[0];
              v4312 = vextq_s8(v2614, v2614, 8uLL).u64[0];
              v4375 = v2670.i64[0];
              v4318 = vextq_s8(v2670, v2670, 8uLL).u64[0];
              v2614.i64[0] = v2617.i64[0];
              v4316 = vextq_s8(v2617, v2617, 8uLL).u64[0];
              v4359 = v2672.i64[0];
              v4310 = vextq_s8(v2672, v2672, 8uLL).u64[0];
              v2617.i64[0] = v2671.i64[0];
              v4308 = vextq_s8(v2671, v2671, 8uLL).u64[0];
              v2618 = v2673.i64[0];
              v4306 = vextq_s8(v2673, v2673, 8uLL).u64[0];
              v4371 = v2674.i64[0];
              v2621 = vextq_s8(v2674, v2674, 8uLL).u64[0];
              v2619 = v2676.i64[0];
              v4302 = vextq_s8(v2676, v2676, 8uLL).u64[0];
              v2620 = v2675.i64[0];
              v4300 = vextq_s8(v2675, v2675, 8uLL).u64[0];
              v2622.i64[0] = v2677.i64[0];
              v4298 = vextq_s8(v2677, v2677, 8uLL).u64[0];
              v4304 = vextq_s8(v2678, v2678, 8uLL).u64[0];
              v2627 = vextq_s8(v2603, v2603, 8uLL).u64[0];
              v2628 = vextq_s8(v2600, v2600, 8uLL).u64[0];
              v2629 = vextq_s8(v2630, v2630, 8uLL).u64[0];
              v2623 = v2679.i64[0];
              v2624 = vextq_s8(v2679, v2679, 8uLL).u64[0];
              v4356 = v2681.i64[0];
              v4328 = v2678.i64[0];
              v4330 = vextq_s8(v2681, v2681, 8uLL).u64[0];
              v4362 = v2680.i64[0];
              v4365 = v2683.i64[0];
              v2626.i64[0] = v2682.i64[0];
              v4332 = vextq_s8(v2680, v2680, 8uLL).u64[0];
              v4334 = vextq_s8(v2682, v2682, 8uLL).u64[0];
              v4336 = vextq_s8(v2683, v2683, 8uLL).u64[0];
            }
            v2609.i64[1] = v4326;
            v2632.i64[0] = v4394.i64[0];
            v2632.i64[1] = v2631;
            v2633.i64[0] = v2610.i64[0];
            v2633.i64[1] = v2611;
            v2634.i64[0] = v4390;
            v2634.i64[1] = v2625;
            v2612.i64[1] = v2613;
            v2635.i64[0] = v4381;
            v2635.i64[1] = v4324;
            v2636.i64[0] = v4368;
            v2636.i64[1] = v4320;
            v2637.i64[0] = v4385;
            v2637.i64[1] = v4322;
            v2638.i64[0] = v2615;
            v2638.i64[1] = v4314;
            v2616.i64[1] = v4312;
            v2639.i64[0] = v4375;
            v2639.i64[1] = v4318;
            v2614.i64[1] = v4316;
            v2640.i64[0] = v4359;
            v2640.i64[1] = v4310;
            v2617.i64[1] = v4308;
            v2641.i64[0] = v2618;
            v2641.i64[1] = v4306;
            v2642.i64[0] = v4371;
            v2642.i64[1] = v2621;
            v2643.i64[0] = v2619;
            v2643.i64[1] = v4302;
            v2644.i64[0] = v2620;
            v2644.i64[1] = v4300;
            v2622.i64[1] = v4298;
            v2645.i64[0] = v4328;
            v2645.i64[1] = v4304;
            v2603.i64[1] = v2627;
            v2600.i64[1] = v2628;
            v2630.i64[1] = v2629;
            v2646.i64[0] = v2623;
            v2646.i64[1] = v2624;
            v2647.i64[0] = v4356;
            v2647.i64[1] = v4330;
            v2648.i64[0] = v4362;
            v2648.i64[1] = v4332;
            v2626.i64[1] = v4334;
            v2649.i64[0] = v4365;
            v2649.i64[1] = v4336;
            v2650 = &v2604[v2660];
            *v2650 = (int64x2_t)v2609;
            v2650[1] = v2632;
            v2650[2] = v2633;
            v2650[3] = v2634;
            v2650[4].i64[0] = v4351;
            v2651 = (int8x16_t *)((char *)v2604 + 24 * v2660);
            v2651[4].i64[0] = v4342;
            v2651[2] = v2635;
            v2651[3] = v2612;
            *v2651 = v2637;
            v2651[1] = v2636;
            v2652 = &v2604[2 * v2660];
            v2652[4].i64[0] = v4344;
            v2652[2] = (int64x2_t)v2616;
            v2652[3] = v2638;
            *v2652 = (int64x2_t)v2614;
            v2652[1] = v2639;
            v2653 = (int8x16_t *)((char *)v2604 + 40 * v2660);
            v2653[4].i64[0] = v4340;
            v2653[2] = v2617;
            v2653[3] = v2640;
            *v2653 = v2642;
            v2653[1] = v2641;
            v2654 = &v2604[3 * v2660];
            v2654[4].i64[0] = v4347;
            v2654[2] = v2644;
            v2654[3] = v2643;
            *v2654 = v2645;
            v2654[1] = (int64x2_t)v2622;
            v2655 = (int8x16_t *)((char *)v2604 + 56 * v2660);
            v2655[4].i64[0] = v4338;
            v2655[2] = v2600;
            v2655[3] = v2603;
            *v2655 = v2646;
            v2655[1] = v2630;
            v2656 = &v2604[4 * v2660];
            v2656[4].i64[0] = v4354;
            v2656[2] = v2648;
            v2656[3] = v2647;
            v2568 += 4;
            *v2656 = v2649;
            v2656[1] = (int64x2_t)v2626;
          }
          while (v2568 != v2567);
          v2561 = *(unsigned int *)(a1 + 3156);
        }
        ++v2562;
        ++v2563;
      }
      while (v2562 < v2561);
    }
    v2707 = *(unsigned int *)(a1 + 4164);
    if ((_DWORD)v2707)
    {
      v2708 = 0;
      v2709 = *(unsigned int **)(a1 + 10568);
      do
      {
        v2710 = *(_QWORD *)(*(_QWORD *)(a1 + 4272) + 8 * v2708);
        if (v2710)
        {
          v2711 = *(_QWORD *)(a1 + 4240);
          v2712 = (*(_DWORD *)(a1 + 4264) * v2708);
          v2713 = (unsigned int *)(v2711 + 16 * (v2710 + v2712));
          v2714 = (unsigned int *)(v2711 + 16 * v2712);
          do
          {
            while (1)
            {
              v2716 = *v2709;
              v2717 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2714);
              v2718 = *(_QWORD *)(a1 + 4168) + 8 * *((_QWORD *)v2714 + 1);
              v2719 = *v6;
              v2720 = *(_QWORD *)(a1 + 20040);
              v2722 = *(int8x16_t *)(v2718 + 32);
              v2721 = *(int8x16_t *)(v2718 + 48);
              v2724 = *(int8x16_t *)v2718;
              v2723 = *(int8x16_t *)(v2718 + 16);
              v2725 = *(_QWORD *)(v2718 + 64);
              v2726 = vextq_s8(v2721, v2721, 8uLL).u64[0];
              v2727 = vextq_s8(v2722, v2722, 8uLL).u64[0];
              v2728 = vextq_s8(v2723, v2723, 8uLL).u64[0];
              v2729 = vextq_s8(v2724, v2724, 8uLL).u64[0];
              if (*v2709 >= v2717)
                break;
              v2715 = (_QWORD *)(v2720 + 8 * (v2716 + (_DWORD)v2719 * v2717));
              *v2715 = v2724.i64[0];
              v2715[v2719] = v2729;
              v2715[2 * v2719] = v2723.i64[0];
              v2715[3 * v2719] = v2728;
              v2715[4 * v2719] = v2722.i64[0];
              v2715[5 * v2719] = v2727;
              v2715[6 * v2719] = v2721.i64[0];
              v2715[7 * v2719] = v2726;
              v2715[8 * v2719] = v2725;
              v2714 += 4;
              if (v2714 == v2713)
                goto LABEL_660;
            }
            v2724.i64[1] = v2729;
            v2730 = (int8x16_t *)(v2720 + 8 * (v2717 + (_DWORD)v2719 * v2716));
            v2723.i64[1] = v2728;
            v2722.i64[1] = v2727;
            *v2730 = v2724;
            v2730[1] = v2723;
            v2730[4].i64[0] = v2725;
            v2721.i64[1] = v2726;
            v2730[2] = v2722;
            v2730[3] = v2721;
            v2714 += 4;
          }
          while (v2714 != v2713);
LABEL_660:
          v2707 = *(unsigned int *)(a1 + 4164);
        }
        ++v2708;
        ++v2709;
      }
      while (v2708 < v2707);
    }
    v2750 = *(unsigned int *)(a1 + 5172);
    if ((_DWORD)v2750)
    {
      v2751 = 0;
      v2752 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2753 = *(_QWORD *)(*(_QWORD *)(a1 + 5280) + 8 * v2751);
        if (v2753)
        {
          v2754 = *(_QWORD *)(a1 + 5248);
          v2755 = (*(_DWORD *)(a1 + 5272) * v2751);
          v2756 = (unsigned int *)(v2754 + 16 * (v2753 + v2755));
          v2757 = (unsigned int *)(v2754 + 16 * v2755);
          do
          {
            while (1)
            {
              v2798 = *v2752;
              v2799 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2757);
              v2800 = *(_QWORD *)(a1 + 5176) + 8 * *((_QWORD *)v2757 + 1);
              v2801 = *v6;
              v2802 = *(_QWORD *)(a1 + 20040);
              if (*v2752 >= v2799)
                break;
              v2758.i64[0] = *(_QWORD *)(v2800 + 64);
              v2759 = (int64x2_t *)(v2802 + 8 * (v2798 + (_DWORD)v2801 * v2799));
              v2761 = *(int64x2_t *)(v2800 + 32);
              v2760 = *(int64x2_t *)(v2800 + 48);
              v2762 = *(int64x2_t *)(v2800 + 16);
              v2763 = *(int64x2_t *)(v2800 + 120);
              v2764 = *(int64x2_t *)(v2800 + 104);
              v2765 = *(int64x2_t *)(v2800 + 88);
              v2766 = *(int64x2_t *)(v2800 + 72);
              v2767.i64[0] = *(_QWORD *)(v2800 + 208);
              v2769 = *(int64x2_t *)(v2800 + 176);
              v2768 = *(int64x2_t *)(v2800 + 192);
              v2771 = *(int64x2_t *)(v2800 + 144);
              v2770 = *(int64x2_t *)(v2800 + 160);
              v2772 = *(int64x2_t *)(v2800 + 216);
              v2773 = *(int64x2_t *)(v2800 + 264);
              v2774 = *(int64x2_t *)(v2800 + 248);
              v2775 = *(int64x2_t *)(v2800 + 232);
              v2776.i64[0] = *(_QWORD *)(v2800 + 352);
              v2778 = *(int64x2_t *)(v2800 + 320);
              v2777 = *(int64x2_t *)(v2800 + 336);
              v2780 = *(int64x2_t *)(v2800 + 288);
              v2779 = *(int64x2_t *)(v2800 + 304);
              v2781 = *(int64x2_t *)(v2800 + 392);
              v2782 = *(int64x2_t *)(v2800 + 408);
              v2783 = *(int64x2_t *)(v2800 + 376);
              v2784 = vzip1q_s64(*(int64x2_t *)v2800, v2766);
              v2785 = vzip1q_s64(v2780, *(int64x2_t *)(v2800 + 360));
              v2786 = vzip1q_s64(v2771, v2772);
              v2787 = vzip2q_s64(*(int64x2_t *)v2800, v2766);
              v2788 = vzip2q_s64(v2771, v2772);
              v2789 = vzip2q_s64(v2780, *(int64x2_t *)(v2800 + 360));
              v2758.i64[1] = *(_QWORD *)(v2800 + 136);
              v2767.i64[1] = *(_QWORD *)(v2800 + 280);
              v2776.i64[1] = *(_QWORD *)(v2800 + 424);
              v2759[1] = v2786;
              v2759[2] = v2785;
              *v2759 = v2784;
              v2790 = (int64x2_t *)((char *)v2759 + 8 * v2801);
              v2790[1] = v2788;
              v2790[2] = v2789;
              *v2790 = v2787;
              v2791 = &v2759[v2801];
              v2791[1] = vzip1q_s64(v2770, v2775);
              v2791[2] = vzip1q_s64(v2779, v2783);
              *v2791 = vzip1q_s64(v2762, v2765);
              v2792 = (int64x2_t *)((char *)v2759 + 24 * v2801);
              v2792[1] = vzip2q_s64(v2770, v2775);
              v2792[2] = vzip2q_s64(v2779, v2783);
              *v2792 = vzip2q_s64(v2762, v2765);
              v2793 = &v2759[2 * v2801];
              v2793[1] = vzip1q_s64(v2769, v2774);
              v2793[2] = vzip1q_s64(v2778, v2781);
              *v2793 = vzip1q_s64(v2761, v2764);
              v2794 = (int64x2_t *)((char *)v2759 + 40 * v2801);
              v2794[1] = vzip2q_s64(v2769, v2774);
              v2794[2] = vzip2q_s64(v2778, v2781);
              *v2794 = vzip2q_s64(v2761, v2764);
              v2795 = &v2759[3 * v2801];
              v2795[1] = vzip1q_s64(v2768, v2773);
              v2795[2] = vzip1q_s64(v2777, v2782);
              *v2795 = vzip1q_s64(v2760, v2763);
              v2796 = (int64x2_t *)((char *)v2759 + 56 * v2801);
              v2796[1] = vzip2q_s64(v2768, v2773);
              v2796[2] = vzip2q_s64(v2777, v2782);
              *v2796 = vzip2q_s64(v2760, v2763);
              v2797 = &v2759[4 * v2801];
              v2797[1] = v2767;
              v2797[2] = v2776;
              *v2797 = v2758;
              v2757 += 4;
              if (v2757 == v2756)
                goto LABEL_680;
            }
            v2803 = *(_QWORD *)(v2800 + 64);
            v2804 = v2802 + 8 * (v2799 + (_DWORD)v2801 * v2798);
            v2805 = *(_OWORD *)(v2800 + 48);
            v2806 = *(int64x2_t *)v2800;
            v2807 = *(_OWORD *)(v2800 + 16);
            v2808 = *(_OWORD *)(v2800 + 72);
            v2809 = *(_OWORD *)(v2800 + 88);
            v2810 = *(_OWORD *)(v2800 + 104);
            v2811 = *(_OWORD *)(v2800 + 120);
            v2812 = *(_QWORD *)(v2800 + 136);
            v2813 = *(_OWORD *)(v2800 + 144);
            v2814 = *(_OWORD *)(v2800 + 160);
            v2815 = *(_OWORD *)(v2800 + 176);
            v2816 = *(_OWORD *)(v2800 + 192);
            v2817 = *(_QWORD *)(v2800 + 208);
            v2818 = *(_OWORD *)(v2800 + 232);
            v2819 = *(_OWORD *)(v2800 + 248);
            v2820 = *(_OWORD *)(v2800 + 216);
            v2821 = *(_OWORD *)(v2800 + 264);
            v2822 = *(_QWORD *)(v2800 + 280);
            v2823 = *(_OWORD *)(v2800 + 288);
            v2824 = *(_OWORD *)(v2800 + 304);
            v2825 = *(_OWORD *)(v2800 + 320);
            v2826 = *(_OWORD *)(v2800 + 336);
            v2827 = *(_QWORD *)(v2800 + 352);
            v2828 = *(_OWORD *)(v2800 + 360);
            v2829 = *(_OWORD *)(v2800 + 376);
            v2830 = *(_OWORD *)(v2800 + 392);
            v2831 = *(_OWORD *)(v2800 + 408);
            v2832 = *(_QWORD *)(v2800 + 424);
            *(_OWORD *)(v2804 + 32) = *(_OWORD *)(v2800 + 32);
            *(_OWORD *)(v2804 + 48) = v2805;
            *(_QWORD *)(v2804 + 64) = v2803;
            *(int64x2_t *)v2804 = v2806;
            *(_OWORD *)(v2804 + 16) = v2807;
            v2833 = v2804 + 8 * v2801;
            *(_QWORD *)(v2833 + 64) = v2812;
            *(_OWORD *)(v2833 + 32) = v2810;
            *(_OWORD *)(v2833 + 48) = v2811;
            *(_OWORD *)v2833 = v2808;
            *(_OWORD *)(v2833 + 16) = v2809;
            v2834 = v2804 + 16 * v2801;
            *(_QWORD *)(v2834 + 64) = v2817;
            *(_OWORD *)(v2834 + 32) = v2815;
            *(_OWORD *)(v2834 + 48) = v2816;
            *(_OWORD *)v2834 = v2813;
            *(_OWORD *)(v2834 + 16) = v2814;
            v2835 = v2804 + 24 * v2801;
            *(_QWORD *)(v2835 + 64) = v2822;
            *(_OWORD *)(v2835 + 32) = v2819;
            *(_OWORD *)(v2835 + 48) = v2821;
            *(_OWORD *)v2835 = v2820;
            *(_OWORD *)(v2835 + 16) = v2818;
            v2836 = v2804 + 32 * v2801;
            *(_QWORD *)(v2836 + 64) = v2827;
            *(_OWORD *)(v2836 + 32) = v2825;
            *(_OWORD *)(v2836 + 48) = v2826;
            *(_OWORD *)v2836 = v2823;
            *(_OWORD *)(v2836 + 16) = v2824;
            v2837 = v2804 + 40 * v2801;
            *(_QWORD *)(v2837 + 64) = v2832;
            *(_OWORD *)(v2837 + 32) = v2830;
            *(_OWORD *)(v2837 + 48) = v2831;
            *(_OWORD *)v2837 = v2828;
            *(_OWORD *)(v2837 + 16) = v2829;
            v2757 += 4;
          }
          while (v2757 != v2756);
LABEL_680:
          v2750 = *(unsigned int *)(a1 + 5172);
        }
        ++v2751;
        ++v2752;
      }
      while (v2751 < v2750);
    }
    v2857 = *(unsigned int *)(a1 + 6180);
    if ((_DWORD)v2857)
    {
      v2858 = 0;
      v2859 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2860 = *(_QWORD *)(*(_QWORD *)(a1 + 6288) + 8 * v2858);
        if (v2860)
        {
          v2861 = *(_QWORD *)(a1 + 6256);
          v2862 = (*(_DWORD *)(a1 + 6280) * v2858);
          v2863 = (unsigned int *)(v2861 + 16 * (v2860 + v2862));
          v2864 = (unsigned int *)(v2861 + 16 * v2862);
          do
          {
            while (1)
            {
              v2892 = *v2859;
              v2893 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2864);
              v2894 = *(_QWORD *)(a1 + 6184) + 8 * *((_QWORD *)v2864 + 1);
              v2895 = *v6;
              v2896 = *(_QWORD *)(a1 + 20040);
              if (*v2859 >= v2893)
                break;
              v2865.i64[0] = *(_QWORD *)(v2894 + 64);
              v2866 = (int64x2_t *)(v2896 + 8 * (v2892 + (_DWORD)v2895 * v2893));
              v2868 = *(int64x2_t *)(v2894 + 32);
              v2867 = *(int64x2_t *)(v2894 + 48);
              v2869 = *(int64x2_t *)(v2894 + 16);
              v2870 = *(int64x2_t *)(v2894 + 120);
              v2871 = *(int64x2_t *)(v2894 + 104);
              v2872 = *(int64x2_t *)(v2894 + 88);
              v2873 = *(int64x2_t *)(v2894 + 72);
              v2874.i64[0] = *(_QWORD *)(v2894 + 208);
              v2876 = *(int64x2_t *)(v2894 + 176);
              v2875 = *(int64x2_t *)(v2894 + 192);
              v2878 = *(int64x2_t *)(v2894 + 144);
              v2877 = *(int64x2_t *)(v2894 + 160);
              v2879 = *(int64x2_t *)(v2894 + 216);
              v2880 = *(int64x2_t *)(v2894 + 264);
              v2881 = *(int64x2_t *)(v2894 + 248);
              v2882 = *(int64x2_t *)(v2894 + 232);
              v2883 = vzip2q_s64(*(int64x2_t *)v2894, v2873);
              v2865.i64[1] = *(_QWORD *)(v2894 + 136);
              v2874.i64[1] = *(_QWORD *)(v2894 + 280);
              *v2866 = vzip1q_s64(*(int64x2_t *)v2894, v2873);
              v2866[1] = vzip1q_s64(v2878, v2879);
              v2884 = (int64x2_t *)((char *)v2866 + 8 * v2895);
              *v2884 = v2883;
              v2884[1] = vzip2q_s64(v2878, v2879);
              v2885 = &v2866[v2895];
              *v2885 = vzip1q_s64(v2869, v2872);
              v2885[1] = vzip1q_s64(v2877, v2882);
              v2886 = (int64x2_t *)((char *)v2866 + 24 * v2895);
              *v2886 = vzip2q_s64(v2869, v2872);
              v2886[1] = vzip2q_s64(v2877, v2882);
              v2887 = &v2866[2 * v2895];
              *v2887 = vzip1q_s64(v2868, v2871);
              v2887[1] = vzip1q_s64(v2876, v2881);
              v2888 = (int64x2_t *)((char *)v2866 + 40 * v2895);
              *v2888 = vzip2q_s64(v2868, v2871);
              v2888[1] = vzip2q_s64(v2876, v2881);
              v2889 = &v2866[3 * v2895];
              *v2889 = vzip1q_s64(v2867, v2870);
              v2889[1] = vzip1q_s64(v2875, v2880);
              v2890 = (int64x2_t *)((char *)v2866 + 56 * v2895);
              *v2890 = vzip2q_s64(v2867, v2870);
              v2890[1] = vzip2q_s64(v2875, v2880);
              v2891 = &v2866[4 * v2895];
              *v2891 = v2865;
              v2891[1] = v2874;
              v2864 += 4;
              if (v2864 == v2863)
                goto LABEL_700;
            }
            v2897 = *(_QWORD *)(v2894 + 64);
            v2898 = v2896 + 8 * (v2893 + (_DWORD)v2895 * v2892);
            v2899 = *(_OWORD *)(v2894 + 48);
            v2900 = *(int64x2_t *)v2894;
            v2901 = *(_OWORD *)(v2894 + 16);
            v2902 = *(_OWORD *)(v2894 + 72);
            v2903 = *(_OWORD *)(v2894 + 88);
            v2904 = *(_OWORD *)(v2894 + 104);
            v2905 = *(_OWORD *)(v2894 + 120);
            v2906 = *(_QWORD *)(v2894 + 136);
            v2907 = *(_OWORD *)(v2894 + 144);
            v2908 = *(_OWORD *)(v2894 + 160);
            v2909 = *(_OWORD *)(v2894 + 176);
            v2910 = *(_OWORD *)(v2894 + 192);
            v2911 = *(_QWORD *)(v2894 + 208);
            v2912 = *(_OWORD *)(v2894 + 232);
            v2913 = *(_OWORD *)(v2894 + 248);
            v2914 = *(_OWORD *)(v2894 + 216);
            v2915 = *(_OWORD *)(v2894 + 264);
            v2916 = *(_QWORD *)(v2894 + 280);
            *(_OWORD *)(v2898 + 32) = *(_OWORD *)(v2894 + 32);
            *(_OWORD *)(v2898 + 48) = v2899;
            *(_QWORD *)(v2898 + 64) = v2897;
            *(int64x2_t *)v2898 = v2900;
            *(_OWORD *)(v2898 + 16) = v2901;
            v2917 = v2898 + 8 * v2895;
            *(_QWORD *)(v2917 + 64) = v2906;
            *(_OWORD *)(v2917 + 32) = v2904;
            *(_OWORD *)(v2917 + 48) = v2905;
            *(_OWORD *)v2917 = v2902;
            *(_OWORD *)(v2917 + 16) = v2903;
            v2918 = v2898 + 16 * v2895;
            *(_QWORD *)(v2918 + 64) = v2911;
            *(_OWORD *)(v2918 + 32) = v2909;
            *(_OWORD *)(v2918 + 48) = v2910;
            *(_OWORD *)v2918 = v2907;
            *(_OWORD *)(v2918 + 16) = v2908;
            v2919 = v2898 + 24 * v2895;
            *(_QWORD *)(v2919 + 64) = v2916;
            *(_OWORD *)(v2919 + 32) = v2913;
            *(_OWORD *)(v2919 + 48) = v2915;
            *(_OWORD *)v2919 = v2914;
            *(_OWORD *)(v2919 + 16) = v2912;
            v2864 += 4;
          }
          while (v2864 != v2863);
LABEL_700:
          v2857 = *(unsigned int *)(a1 + 6180);
        }
        ++v2858;
        ++v2859;
      }
      while (v2858 < v2857);
    }
    v2938 = *(unsigned int *)(a1 + 7188);
    if ((_DWORD)v2938)
    {
      v2939 = 0;
      v2940 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2941 = *(_QWORD *)(*(_QWORD *)(a1 + 7296) + 8 * v2939);
        if (v2941)
        {
          v2942 = *(_QWORD *)(a1 + 7264);
          v2943 = (*(_DWORD *)(a1 + 7288) * v2939);
          v2944 = (unsigned int *)(v2942 + 16 * (v2941 + v2943));
          v2945 = (unsigned int *)(v2942 + 16 * v2943);
          do
          {
            while (1)
            {
              v2973 = *v2940;
              v2974 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2945);
              v2975 = *(_QWORD *)(a1 + 7192) + 8 * *((_QWORD *)v2945 + 1);
              v2976 = *v6;
              v2977 = *(_QWORD *)(a1 + 20040);
              if (*v2940 >= v2974)
                break;
              v2946.i64[0] = *(_QWORD *)(v2975 + 64);
              v2947 = (int64x2_t *)(v2977 + 8 * (v2973 + (_DWORD)v2976 * v2974));
              v2949 = *(int64x2_t *)(v2975 + 32);
              v2948 = *(int64x2_t *)(v2975 + 48);
              v2950 = *(int64x2_t *)(v2975 + 16);
              v2951 = *(int64x2_t *)(v2975 + 120);
              v2952 = *(int64x2_t *)(v2975 + 104);
              v2953 = *(int64x2_t *)(v2975 + 88);
              v2954 = *(int64x2_t *)(v2975 + 72);
              v2955.i64[0] = *(_QWORD *)(v2975 + 208);
              v2957 = *(int64x2_t *)(v2975 + 176);
              v2956 = *(int64x2_t *)(v2975 + 192);
              v2959 = *(int64x2_t *)(v2975 + 144);
              v2958 = *(int64x2_t *)(v2975 + 160);
              v2960 = *(int64x2_t *)(v2975 + 216);
              v2961 = *(int64x2_t *)(v2975 + 264);
              v2962 = *(int64x2_t *)(v2975 + 248);
              v2963 = *(int64x2_t *)(v2975 + 232);
              v2964 = vzip2q_s64(*(int64x2_t *)v2975, v2954);
              v2946.i64[1] = *(_QWORD *)(v2975 + 136);
              v2955.i64[1] = *(_QWORD *)(v2975 + 280);
              *v2947 = vzip1q_s64(*(int64x2_t *)v2975, v2954);
              v2947[1] = vzip1q_s64(v2959, v2960);
              v2965 = (int64x2_t *)((char *)v2947 + 8 * v2976);
              *v2965 = v2964;
              v2965[1] = vzip2q_s64(v2959, v2960);
              v2966 = &v2947[v2976];
              *v2966 = vzip1q_s64(v2950, v2953);
              v2966[1] = vzip1q_s64(v2958, v2963);
              v2967 = (int64x2_t *)((char *)v2947 + 24 * v2976);
              *v2967 = vzip2q_s64(v2950, v2953);
              v2967[1] = vzip2q_s64(v2958, v2963);
              v2968 = &v2947[2 * v2976];
              *v2968 = vzip1q_s64(v2949, v2952);
              v2968[1] = vzip1q_s64(v2957, v2962);
              v2969 = (int64x2_t *)((char *)v2947 + 40 * v2976);
              *v2969 = vzip2q_s64(v2949, v2952);
              v2969[1] = vzip2q_s64(v2957, v2962);
              v2970 = &v2947[3 * v2976];
              *v2970 = vzip1q_s64(v2948, v2951);
              v2970[1] = vzip1q_s64(v2956, v2961);
              v2971 = (int64x2_t *)((char *)v2947 + 56 * v2976);
              *v2971 = vzip2q_s64(v2948, v2951);
              v2971[1] = vzip2q_s64(v2956, v2961);
              v2972 = &v2947[4 * v2976];
              *v2972 = v2946;
              v2972[1] = v2955;
              v2945 += 4;
              if (v2945 == v2944)
                goto LABEL_720;
            }
            v2978 = *(_QWORD *)(v2975 + 64);
            v2979 = v2977 + 8 * (v2974 + (_DWORD)v2976 * v2973);
            v2980 = *(_OWORD *)(v2975 + 48);
            v2981 = *(int64x2_t *)v2975;
            v2982 = *(_OWORD *)(v2975 + 16);
            v2983 = *(_OWORD *)(v2975 + 72);
            v2984 = *(_OWORD *)(v2975 + 88);
            v2985 = *(_OWORD *)(v2975 + 104);
            v2986 = *(_OWORD *)(v2975 + 120);
            v2987 = *(_QWORD *)(v2975 + 136);
            v2988 = *(_OWORD *)(v2975 + 144);
            v2989 = *(_OWORD *)(v2975 + 160);
            v2990 = *(_OWORD *)(v2975 + 176);
            v2991 = *(_OWORD *)(v2975 + 192);
            v2992 = *(_QWORD *)(v2975 + 208);
            v2993 = *(_OWORD *)(v2975 + 232);
            v2994 = *(_OWORD *)(v2975 + 248);
            v2995 = *(_OWORD *)(v2975 + 216);
            v2996 = *(_OWORD *)(v2975 + 264);
            v2997 = *(_QWORD *)(v2975 + 280);
            *(_OWORD *)(v2979 + 32) = *(_OWORD *)(v2975 + 32);
            *(_OWORD *)(v2979 + 48) = v2980;
            *(_QWORD *)(v2979 + 64) = v2978;
            *(int64x2_t *)v2979 = v2981;
            *(_OWORD *)(v2979 + 16) = v2982;
            v2998 = v2979 + 8 * v2976;
            *(_QWORD *)(v2998 + 64) = v2987;
            *(_OWORD *)(v2998 + 32) = v2985;
            *(_OWORD *)(v2998 + 48) = v2986;
            *(_OWORD *)v2998 = v2983;
            *(_OWORD *)(v2998 + 16) = v2984;
            v2999 = v2979 + 16 * v2976;
            *(_QWORD *)(v2999 + 64) = v2992;
            *(_OWORD *)(v2999 + 32) = v2990;
            *(_OWORD *)(v2999 + 48) = v2991;
            *(_OWORD *)v2999 = v2988;
            *(_OWORD *)(v2999 + 16) = v2989;
            v3000 = v2979 + 24 * v2976;
            *(_QWORD *)(v3000 + 64) = v2997;
            *(_OWORD *)(v3000 + 32) = v2994;
            *(_OWORD *)(v3000 + 48) = v2996;
            *(_OWORD *)v3000 = v2995;
            *(_OWORD *)(v3000 + 16) = v2993;
            v2945 += 4;
          }
          while (v2945 != v2944);
LABEL_720:
          v2938 = *(unsigned int *)(a1 + 7188);
        }
        ++v2939;
        ++v2940;
      }
      while (v2939 < v2938);
    }
    v3089 = *(unsigned int *)(a1 + 8196);
    if ((_DWORD)v3089)
    {
      v3090 = 0;
      v3091 = *(unsigned int **)(a1 + 10664);
      do
      {
        v3092 = *(_QWORD *)(*(_QWORD *)(a1 + 8304) + 8 * v3090);
        if (v3092)
        {
          v3093 = *(_QWORD *)(a1 + 8272);
          v3094 = (*(_DWORD *)(a1 + 8296) * v3090);
          v3095 = (unsigned int *)(v3093 + 16 * (v3092 + v3094));
          v3096 = (unsigned int *)(v3093 + 16 * v3094);
          do
          {
            while (1)
            {
              v3121 = *v3091;
              v3122 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3096);
              v3123 = *(_QWORD *)(a1 + 8200) + 8 * *((_QWORD *)v3096 + 1);
              v3124 = *v6;
              v3125 = *(_QWORD *)(a1 + 20040);
              if (*v3091 >= v3122)
                break;
              v3097.i64[0] = *(_QWORD *)(v3123 + 64);
              v3098 = (int64x2_t *)(v3125 + 8 * (v3121 + (_DWORD)v3124 * v3122));
              v3100 = *(int64x2_t *)(v3123 + 32);
              v3099 = *(int64x2_t *)(v3123 + 48);
              v3101 = *(int64x2_t *)(v3123 + 16);
              v3102 = *(int64x2_t *)(v3123 + 120);
              v3103 = *(int64x2_t *)(v3123 + 104);
              v3104 = *(int64x2_t *)(v3123 + 88);
              v3105 = *(int64x2_t *)(v3123 + 72);
              v3106 = *(_QWORD *)(v3123 + 208);
              v3108 = *(_OWORD *)(v3123 + 176);
              v3107 = *(_OWORD *)(v3123 + 192);
              v3110 = *(_OWORD *)(v3123 + 144);
              v3109 = *(_OWORD *)(v3123 + 160);
              v3111 = vzip1q_s64(*(int64x2_t *)v3123, v3105);
              v3112 = vzip2q_s64(*(int64x2_t *)v3123, v3105);
              v3097.i64[1] = *(_QWORD *)(v3123 + 136);
              v3098[1].i64[0] = v3110;
              *v3098 = v3111;
              v3113 = (int64x2_t *)((char *)v3098 + 8 * v3124);
              *v3113 = v3112;
              v3113[1].i64[0] = *((_QWORD *)&v3110 + 1);
              v3114 = &v3098[v3124];
              v3114[1].i64[0] = v3109;
              *v3114 = vzip1q_s64(v3101, v3104);
              v3115 = (int64x2_t *)((char *)v3098 + 24 * v3124);
              v3115[1].i64[0] = *((_QWORD *)&v3109 + 1);
              *v3115 = vzip2q_s64(v3101, v3104);
              v3116 = &v3098[2 * v3124];
              v3116[1].i64[0] = v3108;
              *v3116 = vzip1q_s64(v3100, v3103);
              v3117 = (int64x2_t *)((char *)v3098 + 40 * v3124);
              v3117[1].i64[0] = *((_QWORD *)&v3108 + 1);
              *v3117 = vzip2q_s64(v3100, v3103);
              v3118 = &v3098[3 * v3124];
              v3118[1].i64[0] = v3107;
              *v3118 = vzip1q_s64(v3099, v3102);
              v3119 = (int64x2_t *)((char *)v3098 + 56 * v3124);
              v3119[1].i64[0] = *((_QWORD *)&v3107 + 1);
              *v3119 = vzip2q_s64(v3099, v3102);
              v3120 = &v3098[4 * v3124];
              v3120[1].i64[0] = v3106;
              *v3120 = v3097;
              v3096 += 4;
              if (v3096 == v3095)
                goto LABEL_740;
            }
            v3126 = *(_QWORD *)(v3123 + 64);
            v3127 = v3125 + 8 * (v3122 + (_DWORD)v3124 * v3121);
            v3128 = *(_OWORD *)(v3123 + 48);
            v3129 = *(int64x2_t *)v3123;
            v3130 = *(_OWORD *)(v3123 + 16);
            v3131 = *(_OWORD *)(v3123 + 72);
            v3132 = *(_OWORD *)(v3123 + 88);
            v3133 = *(_OWORD *)(v3123 + 104);
            v3134 = *(_OWORD *)(v3123 + 120);
            v3135 = *(_QWORD *)(v3123 + 136);
            v3136 = *(_OWORD *)(v3123 + 144);
            v3137 = *(_OWORD *)(v3123 + 160);
            v3138 = *(_OWORD *)(v3123 + 176);
            v3139 = *(_OWORD *)(v3123 + 192);
            v3140 = *(_QWORD *)(v3123 + 208);
            *(_OWORD *)(v3127 + 32) = *(_OWORD *)(v3123 + 32);
            *(_OWORD *)(v3127 + 48) = v3128;
            *(_QWORD *)(v3127 + 64) = v3126;
            *(int64x2_t *)v3127 = v3129;
            *(_OWORD *)(v3127 + 16) = v3130;
            v3141 = v3127 + 8 * v3124;
            *(_QWORD *)(v3141 + 64) = v3135;
            *(_OWORD *)(v3141 + 32) = v3133;
            *(_OWORD *)(v3141 + 48) = v3134;
            *(_OWORD *)v3141 = v3131;
            *(_OWORD *)(v3141 + 16) = v3132;
            v3142 = v3127 + 16 * v3124;
            *(_QWORD *)(v3142 + 64) = v3140;
            *(_OWORD *)(v3142 + 32) = v3138;
            *(_OWORD *)(v3142 + 48) = v3139;
            *(_OWORD *)v3142 = v3136;
            *(_OWORD *)(v3142 + 16) = v3137;
            v3096 += 4;
          }
          while (v3096 != v3095);
LABEL_740:
          v3089 = *(unsigned int *)(a1 + 8196);
        }
        ++v3090;
        ++v3091;
      }
      while (v3090 < v3089);
    }
    v3262 = *(unsigned int *)(a1 + 2004);
    if ((_DWORD)v3262)
    {
      v3263 = 0;
      v3264 = *(unsigned int **)(a1 + 10520);
      do
      {
        v3265 = *(_QWORD *)(*(_QWORD *)(a1 + 2112) + 8 * v3263);
        if (v3265)
        {
          v3266 = *(_QWORD *)(a1 + 2080);
          v3267 = (*(_DWORD *)(a1 + 2104) * v3263);
          v3268 = (unsigned int *)(v3266 + 16 * (v3265 + v3267));
          v3269 = (unsigned int *)(v3266 + 16 * v3267);
          do
          {
            v3317 = *v3264;
            v3318 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3269);
            v3319 = *(_QWORD *)(a1 + 2008) + 8 * *((_QWORD *)v3269 + 1);
            v3320 = *v6;
            v3321 = *(_QWORD *)(a1 + 20040);
            if (*v3264 < v3318)
            {
              v3270 = (int64x2_t *)(v3321 + 8 * (v3317 + (_DWORD)v3320 * v3318));
              v3271 = *(int64x2_t *)(v3319 + 16);
              v3272 = *(int64x2_t *)(v3319 + 64);
              v3273 = *(int64x2_t *)(v3319 + 80);
              v3275 = *(int64x2_t *)(v3319 + 32);
              v3274 = *(int64x2_t *)(v3319 + 48);
              v3276 = *(int64x2_t *)(v3319 + 96);
              v3277 = *(int64x2_t *)(v3319 + 112);
              v3278 = *(int64x2_t *)(v3319 + 128);
              v3280 = *(int64x2_t *)(v3319 + 192);
              v3279 = *(int64x2_t *)(v3319 + 208);
              v3281 = *(int64x2_t *)(v3319 + 224);
              v3282 = vzip1q_s64(*(int64x2_t *)v3319, v3274);
              v3283 = vzip1q_s64(v3276, *(int64x2_t *)(v3319 + 144));
              v3284 = vzip1q_s64(v3280, *(int64x2_t *)(v3319 + 240));
              v3285.i64[0] = vdupq_laneq_s64(v3276, 1).u64[0];
              v3285.i64[1] = *(_QWORD *)(v3319 + 152);
              v3286 = vzip2q_s64(*(int64x2_t *)v3319, v3274);
              v3287.i64[0] = vdupq_laneq_s64(v3280, 1).u64[0];
              v3287.i64[1] = *(_QWORD *)(v3319 + 248);
              v3288 = (int8x16_t)vzip1q_s64(v3271, v3272);
              v3289 = (int8x16_t)vzip1q_s64(v3277, *(int64x2_t *)(v3319 + 160));
              v3290 = (int8x16_t)vzip1q_s64(v3279, *(int64x2_t *)(v3319 + 256));
              v3291 = vextq_s8(v3290, v3290, 8uLL).u64[0];
              v3292 = vextq_s8(v3289, v3289, 8uLL).u64[0];
              v3293 = vextq_s8(v3288, v3288, 8uLL).u64[0];
              v3294 = (int8x16_t)vzip2q_s64(v3271, v3272);
              v3295.i64[0] = vdupq_laneq_s64(v3277, 1).u64[0];
              v3295.i64[1] = *(_QWORD *)(v3319 + 168);
              v3296.i64[0] = vdupq_laneq_s64(v3279, 1).u64[0];
              v3296.i64[1] = *(_QWORD *)(v3319 + 264);
              v3297 = vextq_s8(v3294, v3294, 8uLL).u64[0];
              v3298 = vextq_s8(v3296, v3296, 8uLL).u64[0];
              v3299 = vextq_s8(v3295, v3295, 8uLL).u64[0];
              v3300 = (int8x16_t)vzip1q_s64(v3275, v3273);
              v3301 = (int8x16_t)vzip1q_s64(v3278, *(int64x2_t *)(v3319 + 176));
              v3302 = (int8x16_t)vzip1q_s64(v3281, *(int64x2_t *)(v3319 + 272));
              v3303 = vextq_s8(v3302, v3302, 8uLL).u64[0];
              v3304 = vextq_s8(v3301, v3301, 8uLL).u64[0];
              v3305 = vextq_s8(v3300, v3300, 8uLL).u64[0];
              v3306 = (int8x16_t)vzip2q_s64(v3275, v3273);
              v3307.i64[0] = vdupq_laneq_s64(v3278, 1).u64[0];
              v3307.i64[1] = *(_QWORD *)(v3319 + 184);
              v3308.i64[0] = vdupq_laneq_s64(v3281, 1).u64[0];
              v3308.i64[1] = *(_QWORD *)(v3319 + 280);
              v3309 = vextq_s8(v3306, v3306, 8uLL).u64[0];
              v3310 = vextq_s8(v3308, v3308, 8uLL).u64[0];
              v3311 = vextq_s8(v3307, v3307, 8uLL).u64[0];
              v3270[1] = v3283;
              v3270[2] = v3284;
              *v3270 = v3282;
              v3312 = (int64x2_t *)((char *)v3270 + 8 * v3320);
              v3312[1] = v3285;
            }
            else
            {
              v3322 = *(int64x2_t *)v3319;
              v3270 = (int64x2_t *)(v3321 + 8 * (v3318 + (_DWORD)v3320 * v3317));
              v3323 = *(int64x2_t *)(v3319 + 32);
              v3286 = *(int64x2_t *)(v3319 + 48);
              v3324 = *(int64x2_t *)(v3319 + 64);
              v3287 = *(int64x2_t *)(v3319 + 80);
              v3288 = *(int8x16_t *)(v3319 + 96);
              v3289 = *(int8x16_t *)(v3319 + 112);
              v3290 = *(int8x16_t *)(v3319 + 128);
              v3294 = *(int8x16_t *)(v3319 + 144);
              v3291 = vextq_s8(v3290, v3290, 8uLL).u64[0];
              v3292 = vextq_s8(v3289, v3289, 8uLL).u64[0];
              v3293 = vextq_s8(v3288, v3288, 8uLL).u64[0];
              v3295 = *(int8x16_t *)(v3319 + 160);
              v3296 = *(int8x16_t *)(v3319 + 176);
              v3298 = vextq_s8(v3296, v3296, 8uLL).u64[0];
              v3299 = vextq_s8(v3295, v3295, 8uLL).u64[0];
              v3297 = vextq_s8(v3294, v3294, 8uLL).u64[0];
              v3300 = *(int8x16_t *)(v3319 + 192);
              v3301 = *(int8x16_t *)(v3319 + 208);
              v3302 = *(int8x16_t *)(v3319 + 224);
              v3306 = *(int8x16_t *)(v3319 + 240);
              v3303 = vextq_s8(v3302, v3302, 8uLL).u64[0];
              v3304 = vextq_s8(v3301, v3301, 8uLL).u64[0];
              v3305 = vextq_s8(v3300, v3300, 8uLL).u64[0];
              v3307 = *(int8x16_t *)(v3319 + 256);
              v3308 = *(int8x16_t *)(v3319 + 272);
              v3310 = vextq_s8(v3308, v3308, 8uLL).u64[0];
              v3311 = vextq_s8(v3307, v3307, 8uLL).u64[0];
              v3309 = vextq_s8(v3306, v3306, 8uLL).u64[0];
              v3270[1] = *(int64x2_t *)(v3319 + 16);
              v3270[2] = v3323;
              *v3270 = v3322;
              v3312 = (int64x2_t *)((char *)v3270 + 8 * v3320);
              v3312[1] = v3324;
            }
            v3312[2] = v3287;
            *v3312 = v3286;
            v3288.i64[1] = v3293;
            v3289.i64[1] = v3292;
            v3313 = (int8x16_t *)&v3270[v3320];
            *v3313 = v3288;
            v3313[1] = v3289;
            v3290.i64[1] = v3291;
            v3313[2] = v3290;
            v3296.i64[1] = v3298;
            v3314 = (int8x16_t *)((char *)v3270 + 24 * v3320);
            v3295.i64[1] = v3299;
            v3294.i64[1] = v3297;
            v3314[1] = v3295;
            v3314[2] = v3296;
            *v3314 = v3294;
            v3315 = (int8x16_t *)&v3270[2 * v3320];
            v3302.i64[1] = v3303;
            v3301.i64[1] = v3304;
            v3300.i64[1] = v3305;
            v3315[1] = v3301;
            v3315[2] = v3302;
            *v3315 = v3300;
            v3316 = (int8x16_t *)((char *)v3270 + 40 * v3320);
            v3308.i64[1] = v3310;
            v3307.i64[1] = v3311;
            v3306.i64[1] = v3309;
            v3269 += 4;
            v3316[1] = v3307;
            v3316[2] = v3308;
            *v3316 = v3306;
          }
          while (v3269 != v3268);
          v3262 = *(unsigned int *)(a1 + 2004);
        }
        ++v3263;
        ++v3264;
      }
      while (v3263 < v3262);
    }
    v3349 = *(unsigned int *)(a1 + 3012);
    if ((_DWORD)v3349)
    {
      v3350 = 0;
      v3351 = *(unsigned int **)(a1 + 10544);
      do
      {
        v3352 = *(_QWORD *)(*(_QWORD *)(a1 + 3120) + 8 * v3350);
        if (v3352)
        {
          v3353 = *(_QWORD *)(a1 + 3088);
          v3354 = (*(_DWORD *)(a1 + 3112) * v3350);
          v3355 = (unsigned int *)(v3353 + 16 * (v3352 + v3354));
          v3356 = (unsigned int *)(v3353 + 16 * v3354);
          do
          {
            while (1)
            {
              v3391 = *v3351;
              v3392 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3356);
              v3393 = *(_QWORD *)(a1 + 3016) + 8 * *((_QWORD *)v3356 + 1);
              v3394 = *v6;
              v3395 = *(_QWORD *)(a1 + 20040);
              if (*v3351 >= v3392)
                break;
              v3357 = *(int64x2_t *)(v3393 + 16);
              v3358 = (int64x2_t *)(v3395 + 8 * (v3391 + (_DWORD)v3394 * v3392));
              v3360 = *(int64x2_t *)(v3393 + 64);
              v3359 = *(int64x2_t *)(v3393 + 80);
              v3361 = *(int64x2_t *)(v3393 + 32);
              v3362 = *(int64x2_t *)(v3393 + 48);
              v3364 = *(int64x2_t *)(v3393 + 96);
              v3363 = *(int64x2_t *)(v3393 + 112);
              v3366 = *(int64x2_t *)(v3393 + 160);
              v3365 = *(int64x2_t *)(v3393 + 176);
              v3367 = *(int64x2_t *)(v3393 + 128);
              v3368 = *(int64x2_t *)(v3393 + 144);
              v3370 = *(int64x2_t *)(v3393 + 192);
              v3369 = *(int64x2_t *)(v3393 + 208);
              v3372 = *(int64x2_t *)(v3393 + 256);
              v3371 = *(int64x2_t *)(v3393 + 272);
              v3373 = *(int64x2_t *)(v3393 + 224);
              v3374 = *(int64x2_t *)(v3393 + 240);
              v3376 = *(int64x2_t *)(v3393 + 288);
              v3375 = *(int64x2_t *)(v3393 + 304);
              v3378 = *(int64x2_t *)(v3393 + 352);
              v3377 = *(int64x2_t *)(v3393 + 368);
              v3379 = *(int64x2_t *)(v3393 + 320);
              v3380 = *(int64x2_t *)(v3393 + 336);
              v3382 = *(_OWORD *)(v3393 + 400);
              v3381 = *(_OWORD *)(v3393 + 416);
              v3383 = *(_OWORD *)(v3393 + 384);
              v3384 = vzip1q_s64(*(int64x2_t *)v3393, v3362);
              v3385 = vzip2q_s64(*(int64x2_t *)v3393, v3362);
              v3358[2] = vzip1q_s64(v3370, v3374);
              v3358[3] = vzip1q_s64(v3376, v3380);
              v3358[4].i64[0] = v3383;
              *v3358 = v3384;
              v3358[1] = vzip1q_s64(v3364, v3368);
              v3386 = (int64x2_t *)((char *)v3358 + 8 * v3394);
              v3386[2] = vzip2q_s64(v3370, v3374);
              v3386[3] = vzip2q_s64(v3376, v3380);
              *v3386 = v3385;
              v3386[1] = vzip2q_s64(v3364, v3368);
              v3386[4].i64[0] = *((_QWORD *)&v3383 + 1);
              v3387 = &v3358[v3394];
              v3387[4].i64[0] = v3382;
              v3387[2] = vzip1q_s64(v3369, v3372);
              v3387[3] = vzip1q_s64(v3375, v3378);
              *v3387 = vzip1q_s64(v3357, v3360);
              v3387[1] = vzip1q_s64(v3363, v3366);
              v3388 = (int64x2_t *)((char *)v3358 + 24 * v3394);
              v3388[4].i64[0] = *((_QWORD *)&v3382 + 1);
              v3388[2] = vzip2q_s64(v3369, v3372);
              v3388[3] = vzip2q_s64(v3375, v3378);
              *v3388 = vzip2q_s64(v3357, v3360);
              v3388[1] = vzip2q_s64(v3363, v3366);
              v3389 = &v3358[2 * v3394];
              v3389[4].i64[0] = v3381;
              v3389[2] = vzip1q_s64(v3373, v3371);
              v3389[3] = vzip1q_s64(v3379, v3377);
              *v3389 = vzip1q_s64(v3361, v3359);
              v3389[1] = vzip1q_s64(v3367, v3365);
              v3390 = (int64x2_t *)((char *)v3358 + 40 * v3394);
              v3390[4].i64[0] = *((_QWORD *)&v3381 + 1);
              v3390[2] = vzip2q_s64(v3373, v3371);
              v3390[3] = vzip2q_s64(v3379, v3377);
              *v3390 = vzip2q_s64(v3361, v3359);
              v3390[1] = vzip2q_s64(v3367, v3365);
              v3356 += 4;
              if (v3356 == v3355)
                goto LABEL_780;
            }
            v3396 = *(int64x2_t *)v3393;
            v3397 = (int64x2_t *)(v3395 + 8 * (v3392 + (_DWORD)v3394 * v3391));
            v3398 = *(int64x2_t *)(v3393 + 32);
            v3399 = *(_OWORD *)(v3393 + 48);
            v3400 = *(_OWORD *)(v3393 + 64);
            v3401 = *(_OWORD *)(v3393 + 80);
            v3402 = *(int64x2_t *)(v3393 + 96);
            v3403 = *(int64x2_t *)(v3393 + 112);
            v3404 = *(int64x2_t *)(v3393 + 128);
            v3405 = *(_OWORD *)(v3393 + 144);
            v3406 = *(_OWORD *)(v3393 + 160);
            v3407 = *(_OWORD *)(v3393 + 176);
            v3408 = *(int64x2_t *)(v3393 + 192);
            v3409 = *(int64x2_t *)(v3393 + 208);
            v3410 = *(int64x2_t *)(v3393 + 224);
            v3411 = *(_OWORD *)(v3393 + 240);
            v3412 = *(_OWORD *)(v3393 + 256);
            v3413 = *(_OWORD *)(v3393 + 272);
            v3414 = *(int64x2_t *)(v3393 + 288);
            v3415 = *(int64x2_t *)(v3393 + 304);
            v3416 = *(int64x2_t *)(v3393 + 320);
            v3417 = *(_OWORD *)(v3393 + 336);
            v3418 = *(_OWORD *)(v3393 + 352);
            v3419 = *(_OWORD *)(v3393 + 368);
            v3420 = *(int64x2_t *)(v3393 + 384);
            v3421 = *(int64x2_t *)(v3393 + 400);
            v3422 = *(int64x2_t *)(v3393 + 416);
            v3397[1] = *(int64x2_t *)(v3393 + 16);
            v3397[2] = v3398;
            *v3397 = v3396;
            v3423 = &v3397->i8[8 * v3394];
            *((_OWORD *)v3423 + 1) = v3400;
            *((_OWORD *)v3423 + 2) = v3401;
            *(_OWORD *)v3423 = v3399;
            v3424 = &v3397[v3394];
            v3424[1] = v3403;
            v3424[2] = v3404;
            *v3424 = v3402;
            v3425 = &v3397->i8[24 * v3394];
            *((_OWORD *)v3425 + 1) = v3406;
            *((_OWORD *)v3425 + 2) = v3407;
            *(_OWORD *)v3425 = v3405;
            v3426 = &v3397[2 * v3394];
            v3426[1] = v3409;
            v3426[2] = v3410;
            *v3426 = v3408;
            v3427 = &v3397->i8[40 * v3394];
            *((_OWORD *)v3427 + 1) = v3412;
            *((_OWORD *)v3427 + 2) = v3413;
            *(_OWORD *)v3427 = v3411;
            v3428 = &v3397[3 * v3394];
            v3428[1] = v3415;
            v3428[2] = v3416;
            *v3428 = v3414;
            v3429 = &v3397->i8[56 * v3394];
            *((_OWORD *)v3429 + 1) = v3418;
            *((_OWORD *)v3429 + 2) = v3419;
            *(_OWORD *)v3429 = v3417;
            v3430 = &v3397[4 * v3394];
            v3430[1] = v3421;
            v3430[2] = v3422;
            *v3430 = v3420;
            v3356 += 4;
          }
          while (v3356 != v3355);
LABEL_780:
          v3349 = *(unsigned int *)(a1 + 3012);
        }
        ++v3350;
        ++v3351;
      }
      while (v3350 < v3349);
    }
    v3519 = *(unsigned int *)(a1 + 4020);
    if ((_DWORD)v3519)
    {
      v3520 = 0;
      v3521 = *(unsigned int **)(a1 + 10568);
      do
      {
        v3522 = *(_QWORD *)(*(_QWORD *)(a1 + 4128) + 8 * v3520);
        if (v3522)
        {
          v3523 = *(_QWORD *)(a1 + 4096);
          v3524 = (*(_DWORD *)(a1 + 4120) * v3520);
          v3525 = (unsigned int *)(v3523 + 16 * (v3522 + v3524));
          v3526 = (unsigned int *)(v3523 + 16 * v3524);
          do
          {
            while (1)
            {
              v3528 = *v3521;
              v3529 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3526);
              v3530 = (int8x16_t *)(*(_QWORD *)(a1 + 4024) + 8 * *((_QWORD *)v3526 + 1));
              v3531 = *v6;
              v3532 = *(_QWORD *)(a1 + 20040);
              v3534 = v3530[1];
              v3533 = v3530[2];
              v3535 = *v3530;
              v3536 = vextq_s8(v3533, v3533, 8uLL).u64[0];
              v3537 = vextq_s8(v3534, v3534, 8uLL).u64[0];
              v3538 = vextq_s8(v3535, v3535, 8uLL).u64[0];
              if (*v3521 >= v3529)
                break;
              v3527 = (_QWORD *)(v3532 + 8 * (v3528 + (_DWORD)v3531 * v3529));
              *v3527 = v3535.i64[0];
              v3527[v3531] = v3538;
              v3527[2 * v3531] = v3534.i64[0];
              v3527[3 * v3531] = v3537;
              v3527[4 * v3531] = v3533.i64[0];
              v3527[5 * v3531] = v3536;
              v3526 += 4;
              if (v3526 == v3525)
                goto LABEL_800;
            }
            v3535.i64[1] = v3538;
            v3534.i64[1] = v3537;
            v3539 = (int8x16_t *)(v3532 + 8 * (v3529 + (_DWORD)v3531 * v3528));
            *v3539 = v3535;
            v3539[1] = v3534;
            v3533.i64[1] = v3536;
            v3539[2] = v3533;
            v3526 += 4;
          }
          while (v3526 != v3525);
LABEL_800:
          v3519 = *(unsigned int *)(a1 + 4020);
        }
        ++v3520;
        ++v3521;
      }
      while (v3520 < v3519);
    }
    v3603 = *(unsigned int *)(a1 + 5028);
    if ((_DWORD)v3603)
    {
      v3604 = 0;
      v3605 = *(unsigned int **)(a1 + 10592);
      do
      {
        v3606 = *(_QWORD *)(*(_QWORD *)(a1 + 5136) + 8 * v3604);
        if (v3606)
        {
          v3607 = *(_QWORD *)(a1 + 5104);
          v3608 = (*(_DWORD *)(a1 + 5128) * v3604);
          v3609 = (unsigned int *)(v3607 + 16 * (v3606 + v3608));
          v3610 = (unsigned int *)(v3607 + 16 * v3608);
          do
          {
            v3658 = *v3605;
            v3659 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3610);
            v3660 = *(_QWORD *)(a1 + 5032) + 8 * *((_QWORD *)v3610 + 1);
            v3661 = *v6;
            v3662 = *(_QWORD *)(a1 + 20040);
            if (*v3605 < v3659)
            {
              v3611 = (int64x2_t *)(v3662 + 8 * (v3658 + (_DWORD)v3661 * v3659));
              v3612 = *(int64x2_t *)(v3660 + 16);
              v3613 = *(int64x2_t *)(v3660 + 64);
              v3614 = *(int64x2_t *)(v3660 + 80);
              v3616 = *(int64x2_t *)(v3660 + 32);
              v3615 = *(int64x2_t *)(v3660 + 48);
              v3617 = *(int64x2_t *)(v3660 + 96);
              v3618 = *(int64x2_t *)(v3660 + 112);
              v3619 = *(int64x2_t *)(v3660 + 128);
              v3621 = *(int64x2_t *)(v3660 + 192);
              v3620 = *(int64x2_t *)(v3660 + 208);
              v3622 = *(int64x2_t *)(v3660 + 224);
              v3623 = vzip1q_s64(*(int64x2_t *)v3660, v3615);
              v3624 = vzip1q_s64(v3617, *(int64x2_t *)(v3660 + 144));
              v3625 = vzip1q_s64(v3621, *(int64x2_t *)(v3660 + 240));
              v3626.i64[0] = vdupq_laneq_s64(v3617, 1).u64[0];
              v3626.i64[1] = *(_QWORD *)(v3660 + 152);
              v3627 = vzip2q_s64(*(int64x2_t *)v3660, v3615);
              v3628.i64[0] = vdupq_laneq_s64(v3621, 1).u64[0];
              v3628.i64[1] = *(_QWORD *)(v3660 + 248);
              v3629 = (int8x16_t)vzip1q_s64(v3612, v3613);
              v3630 = (int8x16_t)vzip1q_s64(v3618, *(int64x2_t *)(v3660 + 160));
              v3631 = (int8x16_t)vzip1q_s64(v3620, *(int64x2_t *)(v3660 + 256));
              v3632 = vextq_s8(v3631, v3631, 8uLL).u64[0];
              v3633 = vextq_s8(v3630, v3630, 8uLL).u64[0];
              v3634 = vextq_s8(v3629, v3629, 8uLL).u64[0];
              v3635 = (int8x16_t)vzip2q_s64(v3612, v3613);
              v3636.i64[0] = vdupq_laneq_s64(v3618, 1).u64[0];
              v3636.i64[1] = *(_QWORD *)(v3660 + 168);
              v3637.i64[0] = vdupq_laneq_s64(v3620, 1).u64[0];
              v3637.i64[1] = *(_QWORD *)(v3660 + 264);
              v3638 = vextq_s8(v3635, v3635, 8uLL).u64[0];
              v3639 = vextq_s8(v3637, v3637, 8uLL).u64[0];
              v3640 = vextq_s8(v3636, v3636, 8uLL).u64[0];
              v3641 = (int8x16_t)vzip1q_s64(v3616, v3614);
              v3642 = (int8x16_t)vzip1q_s64(v3619, *(int64x2_t *)(v3660 + 176));
              v3643 = (int8x16_t)vzip1q_s64(v3622, *(int64x2_t *)(v3660 + 272));
              v3644 = vextq_s8(v3643, v3643, 8uLL).u64[0];
              v3645 = vextq_s8(v3642, v3642, 8uLL).u64[0];
              v3646 = vextq_s8(v3641, v3641, 8uLL).u64[0];
              v3647 = (int8x16_t)vzip2q_s64(v3616, v3614);
              v3648.i64[0] = vdupq_laneq_s64(v3619, 1).u64[0];
              v3648.i64[1] = *(_QWORD *)(v3660 + 184);
              v3649.i64[0] = vdupq_laneq_s64(v3622, 1).u64[0];
              v3649.i64[1] = *(_QWORD *)(v3660 + 280);
              v3650 = vextq_s8(v3647, v3647, 8uLL).u64[0];
              v3651 = vextq_s8(v3649, v3649, 8uLL).u64[0];
              v3652 = vextq_s8(v3648, v3648, 8uLL).u64[0];
              v3611[1] = v3624;
              v3611[2] = v3625;
              *v3611 = v3623;
              v3653 = (int64x2_t *)((char *)v3611 + 8 * v3661);
              v3653[1] = v3626;
            }
            else
            {
              v3663 = *(int64x2_t *)v3660;
              v3611 = (int64x2_t *)(v3662 + 8 * (v3659 + (_DWORD)v3661 * v3658));
              v3664 = *(int64x2_t *)(v3660 + 32);
              v3627 = *(int64x2_t *)(v3660 + 48);
              v3665 = *(int64x2_t *)(v3660 + 64);
              v3628 = *(int64x2_t *)(v3660 + 80);
              v3629 = *(int8x16_t *)(v3660 + 96);
              v3630 = *(int8x16_t *)(v3660 + 112);
              v3631 = *(int8x16_t *)(v3660 + 128);
              v3635 = *(int8x16_t *)(v3660 + 144);
              v3632 = vextq_s8(v3631, v3631, 8uLL).u64[0];
              v3633 = vextq_s8(v3630, v3630, 8uLL).u64[0];
              v3634 = vextq_s8(v3629, v3629, 8uLL).u64[0];
              v3636 = *(int8x16_t *)(v3660 + 160);
              v3637 = *(int8x16_t *)(v3660 + 176);
              v3639 = vextq_s8(v3637, v3637, 8uLL).u64[0];
              v3640 = vextq_s8(v3636, v3636, 8uLL).u64[0];
              v3638 = vextq_s8(v3635, v3635, 8uLL).u64[0];
              v3641 = *(int8x16_t *)(v3660 + 192);
              v3642 = *(int8x16_t *)(v3660 + 208);
              v3643 = *(int8x16_t *)(v3660 + 224);
              v3647 = *(int8x16_t *)(v3660 + 240);
              v3644 = vextq_s8(v3643, v3643, 8uLL).u64[0];
              v3645 = vextq_s8(v3642, v3642, 8uLL).u64[0];
              v3646 = vextq_s8(v3641, v3641, 8uLL).u64[0];
              v3648 = *(int8x16_t *)(v3660 + 256);
              v3649 = *(int8x16_t *)(v3660 + 272);
              v3651 = vextq_s8(v3649, v3649, 8uLL).u64[0];
              v3652 = vextq_s8(v3648, v3648, 8uLL).u64[0];
              v3650 = vextq_s8(v3647, v3647, 8uLL).u64[0];
              v3611[1] = *(int64x2_t *)(v3660 + 16);
              v3611[2] = v3664;
              *v3611 = v3663;
              v3653 = (int64x2_t *)((char *)v3611 + 8 * v3661);
              v3653[1] = v3665;
            }
            v3653[2] = v3628;
            *v3653 = v3627;
            v3629.i64[1] = v3634;
            v3630.i64[1] = v3633;
            v3654 = (int8x16_t *)&v3611[v3661];
            *v3654 = v3629;
            v3654[1] = v3630;
            v3631.i64[1] = v3632;
            v3654[2] = v3631;
            v3637.i64[1] = v3639;
            v3655 = (int8x16_t *)((char *)v3611 + 24 * v3661);
            v3636.i64[1] = v3640;
            v3635.i64[1] = v3638;
            v3655[1] = v3636;
            v3655[2] = v3637;
            *v3655 = v3635;
            v3656 = (int8x16_t *)&v3611[2 * v3661];
            v3643.i64[1] = v3644;
            v3642.i64[1] = v3645;
            v3641.i64[1] = v3646;
            v3656[1] = v3642;
            v3656[2] = v3643;
            *v3656 = v3641;
            v3657 = (int8x16_t *)((char *)v3611 + 40 * v3661);
            v3649.i64[1] = v3651;
            v3648.i64[1] = v3652;
            v3647.i64[1] = v3650;
            v3610 += 4;
            v3657[1] = v3648;
            v3657[2] = v3649;
            *v3657 = v3647;
          }
          while (v3610 != v3609);
          v3603 = *(unsigned int *)(a1 + 5028);
        }
        ++v3604;
        ++v3605;
      }
      while (v3604 < v3603);
    }
    v3729 = *(unsigned int *)(a1 + 6036);
    if ((_DWORD)v3729)
    {
      v3730 = 0;
      v3731 = *(unsigned int **)(a1 + 10616);
      do
      {
        v3732 = *(_QWORD *)(*(_QWORD *)(a1 + 6144) + 8 * v3730);
        if (v3732)
        {
          v3733 = *(_QWORD *)(a1 + 6112);
          v3734 = (*(_DWORD *)(a1 + 6136) * v3730);
          v3735 = (unsigned int *)(v3733 + 16 * (v3732 + v3734));
          v3736 = (unsigned int *)(v3733 + 16 * v3734);
          do
          {
            while (1)
            {
              v3755 = *v3731;
              v3756 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3736);
              v3757 = *(_QWORD *)(a1 + 6040) + 8 * *((_QWORD *)v3736 + 1);
              v3758 = *v6;
              v3759 = *(_QWORD *)(a1 + 20040);
              if (*v3731 >= v3756)
                break;
              v3737 = *(int64x2_t *)(v3757 + 16);
              v3738 = (int64x2_t *)(v3759 + 8 * (v3755 + (_DWORD)v3758 * v3756));
              v3740 = *(int64x2_t *)(v3757 + 64);
              v3739 = *(int64x2_t *)(v3757 + 80);
              v3741 = *(int64x2_t *)(v3757 + 32);
              v3742 = *(int64x2_t *)(v3757 + 48);
              v3744 = *(int64x2_t *)(v3757 + 96);
              v3743 = *(int64x2_t *)(v3757 + 112);
              v3746 = *(int64x2_t *)(v3757 + 160);
              v3745 = *(int64x2_t *)(v3757 + 176);
              v3747 = *(int64x2_t *)(v3757 + 128);
              v3748 = *(int64x2_t *)(v3757 + 144);
              v3749 = vzip2q_s64(*(int64x2_t *)v3757, v3742);
              *v3738 = vzip1q_s64(*(int64x2_t *)v3757, v3742);
              v3738[1] = vzip1q_s64(v3744, v3748);
              v3750 = (int64x2_t *)((char *)v3738 + 8 * v3758);
              *v3750 = v3749;
              v3750[1] = vzip2q_s64(v3744, v3748);
              v3751 = &v3738[v3758];
              *v3751 = vzip1q_s64(v3737, v3740);
              v3751[1] = vzip1q_s64(v3743, v3746);
              v3752 = (int64x2_t *)((char *)v3738 + 24 * v3758);
              *v3752 = vzip2q_s64(v3737, v3740);
              v3752[1] = vzip2q_s64(v3743, v3746);
              v3753 = &v3738[2 * v3758];
              *v3753 = vzip1q_s64(v3741, v3739);
              v3753[1] = vzip1q_s64(v3747, v3745);
              v3754 = (int64x2_t *)((char *)v3738 + 40 * v3758);
              *v3754 = vzip2q_s64(v3741, v3739);
              v3754[1] = vzip2q_s64(v3747, v3745);
              v3736 += 4;
              if (v3736 == v3735)
                goto LABEL_840;
            }
            v3760 = *(int64x2_t *)v3757;
            v3761 = (int64x2_t *)(v3759 + 8 * (v3756 + (_DWORD)v3758 * v3755));
            v3762 = *(int64x2_t *)(v3757 + 32);
            v3763 = *(_OWORD *)(v3757 + 48);
            v3764 = *(_OWORD *)(v3757 + 64);
            v3765 = *(_OWORD *)(v3757 + 80);
            v3766 = *(int64x2_t *)(v3757 + 96);
            v3767 = *(int64x2_t *)(v3757 + 112);
            v3768 = *(int64x2_t *)(v3757 + 128);
            v3769 = *(_OWORD *)(v3757 + 144);
            v3770 = *(_OWORD *)(v3757 + 160);
            v3771 = *(_OWORD *)(v3757 + 176);
            v3761[1] = *(int64x2_t *)(v3757 + 16);
            v3761[2] = v3762;
            *v3761 = v3760;
            v3772 = &v3761->i8[8 * v3758];
            *((_OWORD *)v3772 + 1) = v3764;
            *((_OWORD *)v3772 + 2) = v3765;
            *(_OWORD *)v3772 = v3763;
            v3773 = &v3761[v3758];
            v3773[1] = v3767;
            v3773[2] = v3768;
            *v3773 = v3766;
            v3774 = &v3761->i8[24 * v3758];
            *((_OWORD *)v3774 + 1) = v3770;
            *((_OWORD *)v3774 + 2) = v3771;
            *(_OWORD *)v3774 = v3769;
            v3736 += 4;
          }
          while (v3736 != v3735);
LABEL_840:
          v3729 = *(unsigned int *)(a1 + 6036);
        }
        ++v3730;
        ++v3731;
      }
      while (v3730 < v3729);
    }
    v3829 = *(unsigned int *)(a1 + 7044);
    if ((_DWORD)v3829)
    {
      v3830 = 0;
      v3831 = *(unsigned int **)(a1 + 10640);
      do
      {
        v3832 = *(_QWORD *)(*(_QWORD *)(a1 + 7152) + 8 * v3830);
        if (v3832)
        {
          v3833 = *(_QWORD *)(a1 + 7120);
          v3834 = (*(_DWORD *)(a1 + 7144) * v3830);
          v3835 = (unsigned int *)(v3833 + 16 * (v3832 + v3834));
          v3836 = (unsigned int *)(v3833 + 16 * v3834);
          do
          {
            while (1)
            {
              v3855 = *v3831;
              v3856 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3836);
              v3857 = *(_QWORD *)(a1 + 7048) + 8 * *((_QWORD *)v3836 + 1);
              v3858 = *v6;
              v3859 = *(_QWORD *)(a1 + 20040);
              if (*v3831 >= v3856)
                break;
              v3837 = *(int64x2_t *)(v3857 + 16);
              v3838 = (int64x2_t *)(v3859 + 8 * (v3855 + (_DWORD)v3858 * v3856));
              v3840 = *(int64x2_t *)(v3857 + 64);
              v3839 = *(int64x2_t *)(v3857 + 80);
              v3841 = *(int64x2_t *)(v3857 + 32);
              v3842 = *(int64x2_t *)(v3857 + 48);
              v3844 = *(int64x2_t *)(v3857 + 96);
              v3843 = *(int64x2_t *)(v3857 + 112);
              v3846 = *(int64x2_t *)(v3857 + 160);
              v3845 = *(int64x2_t *)(v3857 + 176);
              v3847 = *(int64x2_t *)(v3857 + 128);
              v3848 = *(int64x2_t *)(v3857 + 144);
              v3849 = vzip2q_s64(*(int64x2_t *)v3857, v3842);
              *v3838 = vzip1q_s64(*(int64x2_t *)v3857, v3842);
              v3838[1] = vzip1q_s64(v3844, v3848);
              v3850 = (int64x2_t *)((char *)v3838 + 8 * v3858);
              *v3850 = v3849;
              v3850[1] = vzip2q_s64(v3844, v3848);
              v3851 = &v3838[v3858];
              *v3851 = vzip1q_s64(v3837, v3840);
              v3851[1] = vzip1q_s64(v3843, v3846);
              v3852 = (int64x2_t *)((char *)v3838 + 24 * v3858);
              *v3852 = vzip2q_s64(v3837, v3840);
              v3852[1] = vzip2q_s64(v3843, v3846);
              v3853 = &v3838[2 * v3858];
              *v3853 = vzip1q_s64(v3841, v3839);
              v3853[1] = vzip1q_s64(v3847, v3845);
              v3854 = (int64x2_t *)((char *)v3838 + 40 * v3858);
              *v3854 = vzip2q_s64(v3841, v3839);
              v3854[1] = vzip2q_s64(v3847, v3845);
              v3836 += 4;
              if (v3836 == v3835)
                goto LABEL_860;
            }
            v3860 = *(int64x2_t *)v3857;
            v3861 = (int64x2_t *)(v3859 + 8 * (v3856 + (_DWORD)v3858 * v3855));
            v3862 = *(int64x2_t *)(v3857 + 32);
            v3863 = *(_OWORD *)(v3857 + 48);
            v3864 = *(_OWORD *)(v3857 + 64);
            v3865 = *(_OWORD *)(v3857 + 80);
            v3866 = *(int64x2_t *)(v3857 + 96);
            v3867 = *(int64x2_t *)(v3857 + 112);
            v3868 = *(int64x2_t *)(v3857 + 128);
            v3869 = *(_OWORD *)(v3857 + 144);
            v3870 = *(_OWORD *)(v3857 + 160);
            v3871 = *(_OWORD *)(v3857 + 176);
            v3861[1] = *(int64x2_t *)(v3857 + 16);
            v3861[2] = v3862;
            *v3861 = v3860;
            v3872 = &v3861->i8[8 * v3858];
            *((_OWORD *)v3872 + 1) = v3864;
            *((_OWORD *)v3872 + 2) = v3865;
            *(_OWORD *)v3872 = v3863;
            v3873 = &v3861[v3858];
            v3873[1] = v3867;
            v3873[2] = v3868;
            *v3873 = v3866;
            v3874 = &v3861->i8[24 * v3858];
            *((_OWORD *)v3874 + 1) = v3870;
            *((_OWORD *)v3874 + 2) = v3871;
            *(_OWORD *)v3874 = v3869;
            v3836 += 4;
          }
          while (v3836 != v3835);
LABEL_860:
          v3829 = *(unsigned int *)(a1 + 7044);
        }
        ++v3830;
        ++v3831;
      }
      while (v3830 < v3829);
    }
    v3938 = *(unsigned int *)(a1 + 8052);
    if ((_DWORD)v3938)
    {
      v3939 = 0;
      v3940 = *(unsigned int **)(a1 + 10664);
      do
      {
        v3941 = *(_QWORD *)(*(_QWORD *)(a1 + 8160) + 8 * v3939);
        if (v3941)
        {
          v3942 = *(_QWORD *)(a1 + 8128);
          v3943 = (*(_DWORD *)(a1 + 8152) * v3939);
          v3944 = (unsigned int *)(v3942 + 16 * (v3941 + v3943));
          v3945 = (unsigned int *)(v3942 + 16 * v3943);
          do
          {
            while (1)
            {
              v3962 = *v3940;
              v3963 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3945);
              v3964 = *(_QWORD *)(a1 + 8056) + 8 * *((_QWORD *)v3945 + 1);
              v3965 = *v6;
              v3966 = *(_QWORD *)(a1 + 20040);
              if (*v3940 >= v3963)
                break;
              v3946 = *(int64x2_t *)(v3964 + 16);
              v3947 = (int64x2_t *)(v3966 + 8 * (v3962 + (_DWORD)v3965 * v3963));
              v3949 = *(int64x2_t *)(v3964 + 64);
              v3948 = *(int64x2_t *)(v3964 + 80);
              v3950 = *(int64x2_t *)(v3964 + 32);
              v3951 = *(int64x2_t *)(v3964 + 48);
              v3953 = *(_OWORD *)(v3964 + 112);
              v3952 = *(_OWORD *)(v3964 + 128);
              v3954 = *(_OWORD *)(v3964 + 96);
              v3955 = vzip1q_s64(*(int64x2_t *)v3964, v3951);
              v3956 = vzip2q_s64(*(int64x2_t *)v3964, v3951);
              v3947[1].i64[0] = v3954;
              *v3947 = v3955;
              v3957 = (int64x2_t *)((char *)v3947 + 8 * v3965);
              *v3957 = v3956;
              v3957[1].i64[0] = *((_QWORD *)&v3954 + 1);
              v3958 = &v3947[v3965];
              v3958[1].i64[0] = v3953;
              *v3958 = vzip1q_s64(v3946, v3949);
              v3959 = (int64x2_t *)((char *)v3947 + 24 * v3965);
              v3959[1].i64[0] = *((_QWORD *)&v3953 + 1);
              *v3959 = vzip2q_s64(v3946, v3949);
              v3960 = &v3947[2 * v3965];
              v3960[1].i64[0] = v3952;
              *v3960 = vzip1q_s64(v3950, v3948);
              v3961 = (int64x2_t *)((char *)v3947 + 40 * v3965);
              v3961[1].i64[0] = *((_QWORD *)&v3952 + 1);
              *v3961 = vzip2q_s64(v3950, v3948);
              v3945 += 4;
              if (v3945 == v3944)
                goto LABEL_880;
            }
            v3967 = *(int64x2_t *)v3964;
            v3968 = (int64x2_t *)(v3966 + 8 * (v3963 + (_DWORD)v3965 * v3962));
            v3969 = *(int64x2_t *)(v3964 + 32);
            v3970 = *(_OWORD *)(v3964 + 48);
            v3971 = *(_OWORD *)(v3964 + 64);
            v3972 = *(_OWORD *)(v3964 + 80);
            v3973 = *(int64x2_t *)(v3964 + 96);
            v3974 = *(int64x2_t *)(v3964 + 112);
            v3975 = *(int64x2_t *)(v3964 + 128);
            v3968[1] = *(int64x2_t *)(v3964 + 16);
            v3968[2] = v3969;
            *v3968 = v3967;
            v3976 = &v3968->i8[8 * v3965];
            *((_OWORD *)v3976 + 1) = v3971;
            *((_OWORD *)v3976 + 2) = v3972;
            *(_OWORD *)v3976 = v3970;
            v3977 = &v3968[v3965];
            v3977[1] = v3974;
            v3977[2] = v3975;
            *v3977 = v3973;
            v3945 += 4;
          }
          while (v3945 != v3944);
LABEL_880:
          v3938 = *(unsigned int *)(a1 + 8052);
        }
        ++v3939;
        ++v3940;
      }
      while (v3939 < v3938);
    }
  }
  else
  {
    *v6 = v9;
    *(_DWORD *)(a1 + 20060) = v9;
    v57 = v9 * (unint64_t)v9;
    v58 = v9;
    if (*(_QWORD *)(a1 + 20048) < v57)
    {
      if (*v7)
        MEMORY[0x212BC6368](*v7, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 20040) = 0;
      v59 = (8 * v57 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 20048) = v59 >> 3;
      *v7 = operator new(v59, (std::align_val_t)0x20uLL);
      v58 = *v6;
      v9 = *(_DWORD *)(a1 + 20060);
    }
    v60 = v58 * v9;
    if (v60)
      bzero(*v7, 8 * v60);
    v61 = *(unsigned int *)(a1 + 2868);
    if ((_DWORD)v61)
    {
      v62 = 0;
      v63 = *(unsigned int **)(a1 + 10520);
      do
      {
        v64 = *(_QWORD *)(*(_QWORD *)(a1 + 2976) + 8 * v62);
        if (v64)
        {
          v65 = *(_QWORD *)(a1 + 2944);
          v66 = (*(_DWORD *)(a1 + 2968) * v62);
          v67 = (unsigned int *)(v65 + 16 * (v64 + v66));
          v68 = (unsigned int *)(v65 + 16 * v66);
          do
          {
            while (1)
            {
              v86 = *v63;
              v87 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v68);
              v88 = *(_QWORD *)(a1 + 2872) + 8 * *((_QWORD *)v68 + 1);
              v89 = *v6;
              v90 = *(_QWORD *)(a1 + 20040);
              if (*v63 >= v87)
                break;
              v69 = *(int64x2_t *)v88;
              v70 = (int64x2_t *)(v90 + 8 * (v87 + (_DWORD)v89 * v86));
              v71 = *(_OWORD *)(v88 + 24);
              v72 = *(_QWORD *)(v88 + 40);
              v73 = *(int64x2_t *)(v88 + 48);
              v74 = *(_QWORD *)(v88 + 64);
              v75 = *(_OWORD *)(v88 + 72);
              v76 = *(_QWORD *)(v88 + 88);
              v77 = *(int64x2_t *)(v88 + 96);
              v78 = *(_QWORD *)(v88 + 112);
              v79 = *(_OWORD *)(v88 + 120);
              v80 = *(_QWORD *)(v88 + 136);
              v70[1].i64[0] = *(_QWORD *)(v88 + 16);
              *v70 = v69;
              v81 = &v70->i8[8 * v89];
              *((_QWORD *)v81 + 2) = v72;
              *(_OWORD *)v81 = v71;
              v82 = &v70[v89];
              v82[1].i64[0] = v74;
              *v82 = v73;
              v83 = &v70->i8[24 * v89];
              *((_QWORD *)v83 + 2) = v76;
              *(_OWORD *)v83 = v75;
              v84 = &v70[2 * v89];
              v84[1].i64[0] = v78;
              *v84 = v77;
              v85 = &v70->i8[40 * v89];
              *((_QWORD *)v85 + 2) = v80;
              *(_OWORD *)v85 = v79;
              v68 += 4;
              if (v68 == v67)
                goto LABEL_28;
            }
            v91 = (int64x2_t *)(v90 + 8 * (v86 + (_DWORD)v89 * v87));
            v92.i64[0] = *(_QWORD *)(v88 + 16);
            v93 = *(int64x2_t *)(v88 + 24);
            v94.i64[0] = *(_QWORD *)(v88 + 64);
            v95 = *(int64x2_t *)(v88 + 48);
            v96 = *(int64x2_t *)(v88 + 72);
            v97.i64[0] = *(_QWORD *)(v88 + 112);
            v98 = *(int64x2_t *)(v88 + 96);
            v99 = *(int64x2_t *)(v88 + 120);
            v100 = vzip1q_s64(*(int64x2_t *)v88, v93);
            v101 = vzip2q_s64(*(int64x2_t *)v88, v93);
            v92.i64[1] = *(_QWORD *)(v88 + 40);
            v94.i64[1] = *(_QWORD *)(v88 + 88);
            v97.i64[1] = *(_QWORD *)(v88 + 136);
            v91[1] = vzip1q_s64(v95, v96);
            v91[2] = vzip1q_s64(v98, v99);
            *v91 = v100;
            v102 = (int64x2_t *)((char *)v91 + 8 * v89);
            v102[1] = vzip1q_s64(vdupq_laneq_s64(v95, 1), vdupq_laneq_s64(v96, 1));
            v102[2] = vzip2q_s64(v98, v99);
            *v102 = v101;
            v103 = &v91[v89];
            v103[1] = v94;
            v103[2] = v97;
            *v103 = v92;
            v68 += 4;
          }
          while (v68 != v67);
LABEL_28:
          v61 = *(unsigned int *)(a1 + 2868);
        }
        ++v62;
        ++v63;
      }
      while (v62 < v61);
    }
    v161 = *(unsigned int *)(a1 + 3876);
    if ((_DWORD)v161)
    {
      v162 = 0;
      v163 = *(unsigned int **)(a1 + 10544);
      do
      {
        v164 = *(_QWORD *)(*(_QWORD *)(a1 + 3984) + 8 * v162);
        if (v164)
        {
          v165 = *(_QWORD *)(a1 + 3952);
          v166 = (*(_DWORD *)(a1 + 3976) * v162);
          v167 = (unsigned int *)(v165 + 16 * (v164 + v166));
          v168 = (unsigned int *)(v165 + 16 * v166);
          do
          {
            while (1)
            {
              v195 = *v163;
              v196 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v168);
              v197 = *(_QWORD *)(a1 + 3880) + 8 * *((_QWORD *)v168 + 1);
              v198 = *v6;
              v199 = *(_QWORD *)(a1 + 20040);
              if (*v163 >= v196)
                break;
              v169 = *(int64x2_t *)v197;
              v170 = (int64x2_t *)(v199 + 8 * (v196 + (_DWORD)v198 * v195));
              v171 = *(_OWORD *)(v197 + 24);
              v172 = *(_QWORD *)(v197 + 40);
              v173 = *(int64x2_t *)(v197 + 48);
              v174 = *(_QWORD *)(v197 + 64);
              v175 = *(_OWORD *)(v197 + 72);
              v176 = *(_QWORD *)(v197 + 88);
              v177 = *(int64x2_t *)(v197 + 96);
              v178 = *(_QWORD *)(v197 + 112);
              v179 = *(_OWORD *)(v197 + 120);
              v180 = *(_QWORD *)(v197 + 136);
              v181 = *(int64x2_t *)(v197 + 144);
              v182 = *(_QWORD *)(v197 + 160);
              v183 = *(_OWORD *)(v197 + 168);
              v184 = *(_QWORD *)(v197 + 184);
              v185 = *(int64x2_t *)(v197 + 192);
              v186 = *(_QWORD *)(v197 + 208);
              v170[1].i64[0] = *(_QWORD *)(v197 + 16);
              *v170 = v169;
              v187 = &v170->i8[8 * v198];
              *((_QWORD *)v187 + 2) = v172;
              *(_OWORD *)v187 = v171;
              v188 = &v170[v198];
              v188[1].i64[0] = v174;
              *v188 = v173;
              v189 = &v170->i8[24 * v198];
              *((_QWORD *)v189 + 2) = v176;
              *(_OWORD *)v189 = v175;
              v190 = &v170[2 * v198];
              v190[1].i64[0] = v178;
              *v190 = v177;
              v191 = &v170->i8[40 * v198];
              *((_QWORD *)v191 + 2) = v180;
              *(_OWORD *)v191 = v179;
              v192 = &v170[3 * v198];
              v192[1].i64[0] = v182;
              *v192 = v181;
              v193 = &v170->i8[56 * v198];
              *((_QWORD *)v193 + 2) = v184;
              *(_OWORD *)v193 = v183;
              v194 = &v170[4 * v198];
              v194[1].i64[0] = v186;
              *v194 = v185;
              v168 += 4;
              if (v168 == v167)
                goto LABEL_48;
            }
            v200.i64[0] = *(_QWORD *)(v197 + 16);
            v201 = (int64x2_t *)(v199 + 8 * (v195 + (_DWORD)v198 * v196));
            v202 = *(int64x2_t *)(v197 + 24);
            v203.i64[0] = *(_QWORD *)(v197 + 64);
            v204 = *(int64x2_t *)(v197 + 48);
            v205 = *(int64x2_t *)(v197 + 72);
            v206.i64[0] = *(_QWORD *)(v197 + 112);
            v207 = *(int64x2_t *)(v197 + 96);
            v208 = *(int64x2_t *)(v197 + 120);
            v209.i64[0] = *(_QWORD *)(v197 + 160);
            v210 = *(int64x2_t *)(v197 + 144);
            v211 = *(int64x2_t *)(v197 + 168);
            v212 = *(_QWORD *)(v197 + 208);
            v213 = *(_OWORD *)(v197 + 192);
            v214 = vzip1q_s64(*(int64x2_t *)v197, v202);
            v215 = vzip2q_s64(*(int64x2_t *)v197, v202);
            v200.i64[1] = *(_QWORD *)(v197 + 40);
            v203.i64[1] = *(_QWORD *)(v197 + 88);
            v206.i64[1] = *(_QWORD *)(v197 + 136);
            v209.i64[1] = *(_QWORD *)(v197 + 184);
            v201[2] = vzip1q_s64(v207, v208);
            v201[3] = vzip1q_s64(v210, v211);
            v201[4].i64[0] = v213;
            *v201 = v214;
            v201[1] = vzip1q_s64(v204, v205);
            v216 = (int64x2_t *)((char *)v201 + 8 * v198);
            v216[2] = vzip2q_s64(v207, v208);
            v216[3] = vzip2q_s64(v210, v211);
            *v216 = v215;
            v216[1] = vzip2q_s64(v204, v205);
            v216[4].i64[0] = *((_QWORD *)&v213 + 1);
            v217 = &v201[v198];
            v217[4].i64[0] = v212;
            v217[2] = v206;
            v217[3] = v209;
            *v217 = v200;
            v217[1] = v203;
            v168 += 4;
          }
          while (v168 != v167);
LABEL_48:
          v161 = *(unsigned int *)(a1 + 3876);
        }
        ++v162;
        ++v163;
      }
      while (v162 < v161);
    }
    v261 = *(unsigned int *)(a1 + 4884);
    if ((_DWORD)v261)
    {
      v262 = 0;
      v263 = *(unsigned int **)(a1 + 10568);
      do
      {
        v264 = *(_QWORD *)(*(_QWORD *)(a1 + 4992) + 8 * v262);
        if (v264)
        {
          v265 = *(_QWORD *)(a1 + 4960);
          v266 = (*(_DWORD *)(a1 + 4984) * v262);
          v267 = (unsigned int *)(v265 + 16 * (v264 + v266));
          v268 = (unsigned int *)(v265 + 16 * v266);
          do
          {
            while (1)
            {
              v270 = *v263;
              v271 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v268);
              v272 = *(_QWORD *)(a1 + 4888) + 8 * *((_QWORD *)v268 + 1);
              v273 = *v6;
              v274 = *(_QWORD *)(a1 + 20040);
              v275 = *(int8x16_t *)v272;
              v276 = *(_QWORD *)(v272 + 16);
              v277 = vextq_s8(v275, v275, 8uLL).u64[0];
              if (*v263 >= v271)
                break;
              v269 = (int8x16_t *)(v274 + 8 * (v271 + (_DWORD)v273 * v270));
              v269[1].i64[0] = v276;
              v275.i64[1] = v277;
              *v269 = v275;
              v268 += 4;
              if (v268 == v267)
                goto LABEL_68;
            }
            v278 = (_QWORD *)(v274 + 8 * (v270 + (_DWORD)v273 * v271));
            *v278 = v275.i64[0];
            v278[v273] = v277;
            v278[2 * v273] = v276;
            v268 += 4;
          }
          while (v268 != v267);
LABEL_68:
          v261 = *(unsigned int *)(a1 + 4884);
        }
        ++v262;
        ++v263;
      }
      while (v262 < v261);
    }
    v313 = *(unsigned int *)(a1 + 5892);
    if ((_DWORD)v313)
    {
      v314 = 0;
      v315 = *(unsigned int **)(a1 + 10592);
      do
      {
        v316 = *(_QWORD *)(*(_QWORD *)(a1 + 6000) + 8 * v314);
        if (v316)
        {
          v317 = *(_QWORD *)(a1 + 5968);
          v318 = (*(_DWORD *)(a1 + 5992) * v314);
          v319 = (unsigned int *)(v317 + 16 * (v316 + v318));
          v320 = (unsigned int *)(v317 + 16 * v318);
          do
          {
            while (1)
            {
              v338 = *v315;
              v339 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v320);
              v340 = *(_QWORD *)(a1 + 5896) + 8 * *((_QWORD *)v320 + 1);
              v341 = *v6;
              v342 = *(_QWORD *)(a1 + 20040);
              if (*v315 >= v339)
                break;
              v321 = *(int64x2_t *)v340;
              v322 = (int64x2_t *)(v342 + 8 * (v339 + (_DWORD)v341 * v338));
              v323 = *(_OWORD *)(v340 + 24);
              v324 = *(_QWORD *)(v340 + 40);
              v325 = *(int64x2_t *)(v340 + 48);
              v326 = *(_QWORD *)(v340 + 64);
              v327 = *(_OWORD *)(v340 + 72);
              v328 = *(_QWORD *)(v340 + 88);
              v329 = *(int64x2_t *)(v340 + 96);
              v330 = *(_QWORD *)(v340 + 112);
              v331 = *(_OWORD *)(v340 + 120);
              v332 = *(_QWORD *)(v340 + 136);
              v322[1].i64[0] = *(_QWORD *)(v340 + 16);
              *v322 = v321;
              v333 = &v322->i8[8 * v341];
              *((_QWORD *)v333 + 2) = v324;
              *(_OWORD *)v333 = v323;
              v334 = &v322[v341];
              v334[1].i64[0] = v326;
              *v334 = v325;
              v335 = &v322->i8[24 * v341];
              *((_QWORD *)v335 + 2) = v328;
              *(_OWORD *)v335 = v327;
              v336 = &v322[2 * v341];
              v336[1].i64[0] = v330;
              *v336 = v329;
              v337 = &v322->i8[40 * v341];
              *((_QWORD *)v337 + 2) = v332;
              *(_OWORD *)v337 = v331;
              v320 += 4;
              if (v320 == v319)
                goto LABEL_88;
            }
            v343 = (int64x2_t *)(v342 + 8 * (v338 + (_DWORD)v341 * v339));
            v344.i64[0] = *(_QWORD *)(v340 + 16);
            v345 = *(int64x2_t *)(v340 + 24);
            v346.i64[0] = *(_QWORD *)(v340 + 64);
            v347 = *(int64x2_t *)(v340 + 48);
            v348 = *(int64x2_t *)(v340 + 72);
            v349.i64[0] = *(_QWORD *)(v340 + 112);
            v350 = *(int64x2_t *)(v340 + 96);
            v351 = *(int64x2_t *)(v340 + 120);
            v352 = vzip1q_s64(*(int64x2_t *)v340, v345);
            v353 = vzip2q_s64(*(int64x2_t *)v340, v345);
            v344.i64[1] = *(_QWORD *)(v340 + 40);
            v346.i64[1] = *(_QWORD *)(v340 + 88);
            v349.i64[1] = *(_QWORD *)(v340 + 136);
            v343[1] = vzip1q_s64(v347, v348);
            v343[2] = vzip1q_s64(v350, v351);
            *v343 = v352;
            v354 = (int64x2_t *)((char *)v343 + 8 * v341);
            v354[1] = vzip1q_s64(vdupq_laneq_s64(v347, 1), vdupq_laneq_s64(v348, 1));
            v354[2] = vzip2q_s64(v350, v351);
            *v354 = v353;
            v355 = &v343[v341];
            v355[1] = v346;
            v355[2] = v349;
            *v355 = v344;
            v320 += 4;
          }
          while (v320 != v319);
LABEL_88:
          v313 = *(unsigned int *)(a1 + 5892);
        }
        ++v314;
        ++v315;
      }
      while (v314 < v313);
    }
    v390 = *(unsigned int *)(a1 + 6900);
    if ((_DWORD)v390)
    {
      v391 = 0;
      v392 = *(unsigned int **)(a1 + 10616);
      do
      {
        v393 = *(_QWORD *)(*(_QWORD *)(a1 + 7008) + 8 * v391);
        if (v393)
        {
          v394 = *(_QWORD *)(a1 + 6976);
          v395 = (*(_DWORD *)(a1 + 7000) * v391);
          v396 = (unsigned int *)(v394 + 16 * (v393 + v395));
          v397 = (unsigned int *)(v394 + 16 * v395);
          do
          {
            while (1)
            {
              v409 = *v392;
              v410 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v397);
              v411 = *(_QWORD *)(a1 + 6904) + 8 * *((_QWORD *)v397 + 1);
              v412 = *v6;
              v413 = *(_QWORD *)(a1 + 20040);
              if (*v392 >= v410)
                break;
              v398 = *(int64x2_t *)v411;
              v399 = (int64x2_t *)(v413 + 8 * (v410 + (_DWORD)v412 * v409));
              v400 = *(_OWORD *)(v411 + 24);
              v401 = *(_QWORD *)(v411 + 40);
              v402 = *(int64x2_t *)(v411 + 48);
              v403 = *(_QWORD *)(v411 + 64);
              v404 = *(_OWORD *)(v411 + 72);
              v405 = *(_QWORD *)(v411 + 88);
              v399[1].i64[0] = *(_QWORD *)(v411 + 16);
              *v399 = v398;
              v406 = &v399->i8[8 * v412];
              *((_QWORD *)v406 + 2) = v401;
              *(_OWORD *)v406 = v400;
              v407 = &v399[v412];
              v407[1].i64[0] = v403;
              *v407 = v402;
              v408 = &v399->i8[24 * v412];
              *((_QWORD *)v408 + 2) = v405;
              *(_OWORD *)v408 = v404;
              v397 += 4;
              if (v397 == v396)
                goto LABEL_108;
            }
            v414 = (int64x2_t *)(v413 + 8 * (v409 + (_DWORD)v412 * v410));
            v415.i64[0] = *(_QWORD *)(v411 + 16);
            v416 = *(int64x2_t *)(v411 + 24);
            v417.i64[0] = *(_QWORD *)(v411 + 64);
            v418 = *(int64x2_t *)(v411 + 48);
            v419 = vzip1q_s64(*(int64x2_t *)v411, v416);
            v420 = vzip1q_s64(v418, *(int64x2_t *)(v411 + 72));
            v421 = vzip2q_s64(*(int64x2_t *)v411, v416);
            v416.i64[0] = vdupq_laneq_s64(v418, 1).u64[0];
            v416.i64[1] = *(_QWORD *)(v411 + 80);
            v415.i64[1] = *(_QWORD *)(v411 + 40);
            v417.i64[1] = *(_QWORD *)(v411 + 88);
            *v414 = v419;
            v414[1] = v420;
            v422 = (int64x2_t *)((char *)v414 + 8 * v412);
            *v422 = v421;
            v422[1] = v416;
            v423 = &v414[v412];
            *v423 = v415;
            v423[1] = v417;
            v397 += 4;
          }
          while (v397 != v396);
LABEL_108:
          v390 = *(unsigned int *)(a1 + 6900);
        }
        ++v391;
        ++v392;
      }
      while (v391 < v390);
    }
    v453 = *(unsigned int *)(a1 + 7908);
    if ((_DWORD)v453)
    {
      v454 = 0;
      v455 = *(unsigned int **)(a1 + 10640);
      do
      {
        v456 = *(_QWORD *)(*(_QWORD *)(a1 + 8016) + 8 * v454);
        if (v456)
        {
          v457 = *(_QWORD *)(a1 + 7984);
          v458 = (*(_DWORD *)(a1 + 8008) * v454);
          v459 = (unsigned int *)(v457 + 16 * (v456 + v458));
          v460 = (unsigned int *)(v457 + 16 * v458);
          do
          {
            while (1)
            {
              v472 = *v455;
              v473 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v460);
              v474 = *(_QWORD *)(a1 + 7912) + 8 * *((_QWORD *)v460 + 1);
              v475 = *v6;
              v476 = *(_QWORD *)(a1 + 20040);
              if (*v455 >= v473)
                break;
              v461 = *(int64x2_t *)v474;
              v462 = (int64x2_t *)(v476 + 8 * (v473 + (_DWORD)v475 * v472));
              v463 = *(_OWORD *)(v474 + 24);
              v464 = *(_QWORD *)(v474 + 40);
              v465 = *(int64x2_t *)(v474 + 48);
              v466 = *(_QWORD *)(v474 + 64);
              v467 = *(_OWORD *)(v474 + 72);
              v468 = *(_QWORD *)(v474 + 88);
              v462[1].i64[0] = *(_QWORD *)(v474 + 16);
              *v462 = v461;
              v469 = &v462->i8[8 * v475];
              *((_QWORD *)v469 + 2) = v464;
              *(_OWORD *)v469 = v463;
              v470 = &v462[v475];
              v470[1].i64[0] = v466;
              *v470 = v465;
              v471 = &v462->i8[24 * v475];
              *((_QWORD *)v471 + 2) = v468;
              *(_OWORD *)v471 = v467;
              v460 += 4;
              if (v460 == v459)
                goto LABEL_128;
            }
            v477 = (int64x2_t *)(v476 + 8 * (v472 + (_DWORD)v475 * v473));
            v478.i64[0] = *(_QWORD *)(v474 + 16);
            v479 = *(int64x2_t *)(v474 + 24);
            v480.i64[0] = *(_QWORD *)(v474 + 64);
            v481 = *(int64x2_t *)(v474 + 48);
            v482 = vzip1q_s64(*(int64x2_t *)v474, v479);
            v483 = vzip1q_s64(v481, *(int64x2_t *)(v474 + 72));
            v484 = vzip2q_s64(*(int64x2_t *)v474, v479);
            v479.i64[0] = vdupq_laneq_s64(v481, 1).u64[0];
            v479.i64[1] = *(_QWORD *)(v474 + 80);
            v478.i64[1] = *(_QWORD *)(v474 + 40);
            v480.i64[1] = *(_QWORD *)(v474 + 88);
            *v477 = v482;
            v477[1] = v483;
            v485 = (int64x2_t *)((char *)v477 + 8 * v475);
            *v485 = v484;
            v485[1] = v479;
            v486 = &v477[v475];
            *v486 = v478;
            v486[1] = v480;
            v460 += 4;
          }
          while (v460 != v459);
LABEL_128:
          v453 = *(unsigned int *)(a1 + 7908);
        }
        ++v454;
        ++v455;
      }
      while (v454 < v453);
    }
    v536 = *(unsigned int *)(a1 + 8916);
    if ((_DWORD)v536)
    {
      v537 = 0;
      v538 = *(unsigned int **)(a1 + 10664);
      do
      {
        v539 = *(_QWORD *)(*(_QWORD *)(a1 + 9024) + 8 * v537);
        if (v539)
        {
          v540 = *(_QWORD *)(a1 + 8992);
          v541 = (*(_DWORD *)(a1 + 9016) * v537);
          v542 = (unsigned int *)(v540 + 16 * (v539 + v541));
          v543 = (unsigned int *)(v540 + 16 * v541);
          do
          {
            v554 = *v538;
            v555 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v543);
            v556 = *(_QWORD *)(a1 + 8920) + 8 * *((_QWORD *)v543 + 1);
            v557 = *v6;
            v558 = *(_QWORD *)(a1 + 20040);
            if (*v538 < v555)
            {
              v544 = v555 + (_DWORD)v557 * v554;
              v545 = (int64x2_t *)(v558 + 8 * v544);
              v546 = *(int64x2_t *)v556;
              v547 = *(_OWORD *)(v556 + 24);
              v548 = *(_QWORD *)(v556 + 40);
              v549 = *(_QWORD *)(v556 + 64);
              v550 = *(int8x16_t *)(v556 + 48);
              v551 = vextq_s8(v550, v550, 8uLL).u64[0];
              v545[1].i64[0] = *(_QWORD *)(v556 + 16);
              *v545 = v546;
              v552 = &v545->i8[8 * v557];
              *((_QWORD *)v552 + 2) = v548;
              *(_OWORD *)v552 = v547;
            }
            else
            {
              v544 = v554 + (_DWORD)v557 * v555;
              v559 = (int64x2_t *)(v558 + 8 * v544);
              v550.i64[0] = *(_QWORD *)(v556 + 16);
              v551 = *(_QWORD *)(v556 + 40);
              v560 = *(int64x2_t *)(v556 + 24);
              v549 = *(_QWORD *)(v556 + 64);
              v561 = *(_OWORD *)(v556 + 48);
              v562 = vzip1q_s64(*(int64x2_t *)v556, v560);
              v563 = vzip2q_s64(*(int64x2_t *)v556, v560);
              v559[1].i64[0] = v561;
              *v559 = v562;
              v564 = (int64x2_t *)((char *)v559 + 8 * v557);
              *v564 = v563;
              v564[1].i64[0] = *((_QWORD *)&v561 + 1);
            }
            v553 = v558 + 8 * v544 + 16 * v557;
            *(_QWORD *)(v553 + 16) = v549;
            v550.i64[1] = v551;
            *(int8x16_t *)v553 = v550;
            v543 += 4;
          }
          while (v543 != v542);
          v536 = *(unsigned int *)(a1 + 8916);
        }
        ++v537;
        ++v538;
      }
      while (v537 < v536);
    }
    v628 = *(unsigned int *)(a1 + 2724);
    if ((_DWORD)v628)
    {
      v629 = 0;
      v630 = *(unsigned int **)(a1 + 10520);
      do
      {
        v631 = *(_QWORD *)(*(_QWORD *)(a1 + 2832) + 8 * v629);
        if (v631)
        {
          v632 = *(_QWORD *)(a1 + 2800);
          v633 = (*(_DWORD *)(a1 + 2824) * v629);
          v634 = (unsigned int *)(v632 + 16 * (v631 + v633));
          v635 = (unsigned int *)(v632 + 16 * v633);
          do
          {
            while (1)
            {
              v653 = *v630;
              v654 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v635);
              v655 = *(_QWORD *)(a1 + 2728) + 8 * *((_QWORD *)v635 + 1);
              v656 = *v6;
              v657 = *(_QWORD *)(a1 + 20040);
              if (*v630 >= v654)
                break;
              v636 = *(_OWORD *)(v655 + 16);
              v637 = (_OWORD *)(v657 + 8 * (v654 + (_DWORD)v656 * v653));
              v638 = *(_OWORD *)(v655 + 32);
              v639 = *(_OWORD *)(v655 + 48);
              v640 = *(_OWORD *)(v655 + 64);
              v641 = *(_OWORD *)(v655 + 80);
              v642 = *(_OWORD *)(v655 + 96);
              v643 = *(_OWORD *)(v655 + 112);
              v644 = *(_OWORD *)(v655 + 128);
              v645 = *(_OWORD *)(v655 + 144);
              v646 = *(_OWORD *)(v655 + 160);
              v647 = *(_OWORD *)(v655 + 176);
              *v637 = *(_OWORD *)v655;
              v637[1] = v636;
              v648 = (_OWORD *)((char *)v637 + 8 * v656);
              *v648 = v638;
              v648[1] = v639;
              v649 = &v637[v656];
              *v649 = v640;
              v649[1] = v641;
              v650 = (_OWORD *)((char *)v637 + 24 * v656);
              *v650 = v642;
              v650[1] = v643;
              v651 = &v637[2 * v656];
              *v651 = v644;
              v651[1] = v645;
              v652 = (_OWORD *)((char *)v637 + 40 * v656);
              *v652 = v646;
              v652[1] = v647;
              v635 += 4;
              if (v635 == v634)
                goto LABEL_168;
            }
            v658 = (int64x2_t *)(v657 + 8 * (v653 + (_DWORD)v656 * v654));
            v659 = *(int64x2_t *)(v655 + 16);
            v661 = *(int64x2_t *)(v655 + 32);
            v660 = *(int64x2_t *)(v655 + 48);
            v663 = *(int64x2_t *)(v655 + 64);
            v662 = *(int64x2_t *)(v655 + 80);
            v665 = *(int64x2_t *)(v655 + 128);
            v664 = *(int64x2_t *)(v655 + 144);
            v666 = vzip1q_s64(*(int64x2_t *)v655, v661);
            v667 = vzip1q_s64(v663, *(int64x2_t *)(v655 + 96));
            v668 = vzip1q_s64(v665, *(int64x2_t *)(v655 + 160));
            v663.i64[0] = vdupq_laneq_s64(v663, 1).u64[0];
            v663.i64[1] = *(_QWORD *)(v655 + 104);
            v669.i64[0] = vdupq_laneq_s64(v665, 1).u64[0];
            v670 = vzip2q_s64(*(int64x2_t *)v655, v661);
            v669.i64[1] = *(_QWORD *)(v655 + 168);
            v671 = vzip1q_s64(v662, *(int64x2_t *)(v655 + 112));
            v672 = vzip1q_s64(v664, *(int64x2_t *)(v655 + 176));
            v662.i64[0] = vdupq_laneq_s64(v662, 1).u64[0];
            v662.i64[1] = *(_QWORD *)(v655 + 120);
            v673.i64[0] = vdupq_laneq_s64(v664, 1).u64[0];
            v673.i64[1] = *(_QWORD *)(v655 + 184);
            v658[1] = v667;
            v658[2] = v668;
            *v658 = v666;
            v674 = (int64x2_t *)((char *)v658 + 8 * v656);
            v674[1] = v663;
            v674[2] = v669;
            *v674 = v670;
            v675 = &v658[v656];
            v675[1] = v671;
            v675[2] = v672;
            *v675 = vzip1q_s64(v659, v660);
            v676 = (int64x2_t *)((char *)v658 + 24 * v656);
            v676[1] = v662;
            v676[2] = v673;
            *v676 = vzip2q_s64(v659, v660);
            v635 += 4;
          }
          while (v635 != v634);
LABEL_168:
          v628 = *(unsigned int *)(a1 + 2724);
        }
        ++v629;
        ++v630;
      }
      while (v629 < v628);
    }
    v694 = *(unsigned int *)(a1 + 3732);
    if ((_DWORD)v694)
    {
      v695 = 0;
      v696 = *(unsigned int **)(a1 + 10544);
      do
      {
        v697 = *(_QWORD *)(*(_QWORD *)(a1 + 3840) + 8 * v695);
        if (v697)
        {
          v698 = *(_QWORD *)(a1 + 3808);
          v699 = (*(_DWORD *)(a1 + 3832) * v695);
          v700 = (unsigned int *)(v698 + 16 * (v697 + v699));
          v701 = (unsigned int *)(v698 + 16 * v699);
          do
          {
            while (1)
            {
              v728 = *v696;
              v729 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v701);
              v730 = *(_QWORD *)(a1 + 3736) + 8 * *((_QWORD *)v701 + 1);
              v731 = *v6;
              v732 = *(_QWORD *)(a1 + 20040);
              if (*v696 >= v729)
                break;
              v702 = *(_OWORD *)(v730 + 16);
              v703 = (_OWORD *)(v732 + 8 * (v729 + (_DWORD)v731 * v728));
              v704 = *(_OWORD *)(v730 + 32);
              v705 = *(_OWORD *)(v730 + 48);
              v706 = *(_OWORD *)(v730 + 64);
              v707 = *(_OWORD *)(v730 + 80);
              v708 = *(_OWORD *)(v730 + 96);
              v709 = *(_OWORD *)(v730 + 112);
              v710 = *(_OWORD *)(v730 + 128);
              v711 = *(_OWORD *)(v730 + 144);
              v712 = *(_OWORD *)(v730 + 160);
              v713 = *(_OWORD *)(v730 + 176);
              v714 = *(_OWORD *)(v730 + 192);
              v715 = *(_OWORD *)(v730 + 208);
              v716 = *(_OWORD *)(v730 + 224);
              v717 = *(_OWORD *)(v730 + 240);
              v718 = *(_OWORD *)(v730 + 256);
              v719 = *(_OWORD *)(v730 + 272);
              *v703 = *(_OWORD *)v730;
              v703[1] = v702;
              v720 = (_OWORD *)((char *)v703 + 8 * v731);
              *v720 = v704;
              v720[1] = v705;
              v721 = &v703[v731];
              *v721 = v706;
              v721[1] = v707;
              v722 = (_OWORD *)((char *)v703 + 24 * v731);
              *v722 = v708;
              v722[1] = v709;
              v723 = &v703[2 * v731];
              *v723 = v710;
              v723[1] = v711;
              v724 = (_OWORD *)((char *)v703 + 40 * v731);
              *v724 = v712;
              v724[1] = v713;
              v725 = &v703[3 * v731];
              *v725 = v714;
              v725[1] = v715;
              v726 = (_OWORD *)((char *)v703 + 56 * v731);
              *v726 = v716;
              v726[1] = v717;
              v727 = &v703[4 * v731];
              *v727 = v718;
              v727[1] = v719;
              v701 += 4;
              if (v701 == v700)
                goto LABEL_188;
            }
            v733 = *(int64x2_t *)(v730 + 16);
            v734 = (int64x2_t *)(v732 + 8 * (v728 + (_DWORD)v731 * v729));
            v736 = *(int64x2_t *)(v730 + 32);
            v735 = *(int64x2_t *)(v730 + 48);
            v738 = *(int64x2_t *)(v730 + 64);
            v737 = *(int64x2_t *)(v730 + 80);
            v740 = *(int64x2_t *)(v730 + 128);
            v739 = *(int64x2_t *)(v730 + 144);
            v742 = *(int64x2_t *)(v730 + 192);
            v741 = *(int64x2_t *)(v730 + 208);
            v744 = *(_OWORD *)(v730 + 256);
            v743 = *(_OWORD *)(v730 + 272);
            v745 = vzip1q_s64(*(int64x2_t *)v730, v736);
            v746 = vzip1q_s64(v738, *(int64x2_t *)(v730 + 96));
            v747 = vzip1q_s64(v742, *(int64x2_t *)(v730 + 224));
            v748 = vzip2q_s64(*(int64x2_t *)v730, v736);
            v736.i64[0] = vdupq_laneq_s64(v738, 1).u64[0];
            v736.i64[1] = *(_QWORD *)(v730 + 104);
            v738.i64[0] = vdupq_laneq_s64(v740, 1).u64[0];
            v738.i64[1] = *(_QWORD *)(v730 + 168);
            v749.i64[0] = vdupq_laneq_s64(v742, 1).u64[0];
            v749.i64[1] = *(_QWORD *)(v730 + 232);
            v750 = vzip1q_s64(v737, *(int64x2_t *)(v730 + 112));
            v751 = vzip1q_s64(v739, *(int64x2_t *)(v730 + 176));
            v752 = vzip1q_s64(v741, *(int64x2_t *)(v730 + 240));
            v737.i64[0] = vdupq_laneq_s64(v737, 1).u64[0];
            v737.i64[1] = *(_QWORD *)(v730 + 120);
            v753.i64[0] = vdupq_laneq_s64(v739, 1).u64[0];
            v753.i64[1] = *(_QWORD *)(v730 + 184);
            v739.i64[0] = vdupq_laneq_s64(v741, 1).u64[0];
            v739.i64[1] = *(_QWORD *)(v730 + 248);
            v734[2] = vzip1q_s64(v740, *(int64x2_t *)(v730 + 160));
            v734[3] = v747;
            v734[4].i64[0] = v744;
            *v734 = v745;
            v734[1] = v746;
            v754 = (int64x2_t *)((char *)v734 + 8 * v731);
            v754[2] = v738;
            v754[3] = v749;
            *v754 = v748;
            v754[1] = v736;
            v754[4].i64[0] = *((_QWORD *)&v744 + 1);
            v755 = &v734[v731];
            v755[4].i64[0] = v743;
            v755[2] = v751;
            v755[3] = v752;
            *v755 = vzip1q_s64(v733, v735);
            v755[1] = v750;
            v756 = (int64x2_t *)((char *)v734 + 24 * v731);
            v756[4].i64[0] = *((_QWORD *)&v743 + 1);
            v756[2] = v753;
            v756[3] = v739;
            *v756 = vzip2q_s64(v733, v735);
            v756[1] = v737;
            v701 += 4;
          }
          while (v701 != v700);
LABEL_188:
          v694 = *(unsigned int *)(a1 + 3732);
        }
        ++v695;
        ++v696;
      }
      while (v695 < v694);
    }
    v806 = *(unsigned int *)(a1 + 4740);
    if ((_DWORD)v806)
    {
      v807 = 0;
      v808 = *(unsigned int **)(a1 + 10568);
      do
      {
        v809 = *(_QWORD *)(*(_QWORD *)(a1 + 4848) + 8 * v807);
        if (v809)
        {
          v810 = *(_QWORD *)(a1 + 4816);
          v811 = (*(_DWORD *)(a1 + 4840) * v807);
          v812 = (unsigned int *)(v810 + 16 * (v809 + v811));
          v813 = (unsigned int *)(v810 + 16 * v811);
          do
          {
            while (1)
            {
              v815 = *v808;
              v816 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v813);
              v817 = (int8x16_t *)(*(_QWORD *)(a1 + 4744) + 8 * *((_QWORD *)v813 + 1));
              v818 = *v6;
              v819 = *(_QWORD *)(a1 + 20040);
              v821 = *v817;
              v820 = v817[1];
              if (*v808 >= v816)
                break;
              v814 = (int8x16_t *)(v819 + 8 * (v816 + (_DWORD)v818 * v815));
              *v814 = v821;
              v814[1] = v820;
              v813 += 4;
              if (v813 == v812)
                goto LABEL_208;
            }
            v822 = (_QWORD *)(v819 + 8 * (v815 + (_DWORD)v818 * v816));
            *v822 = v821.i64[0];
            v822[v818] = vextq_s8(v821, v821, 8uLL).u64[0];
            v822[2 * v818] = v820.i64[0];
            v822[3 * v818] = vextq_s8(v820, v820, 8uLL).u64[0];
            v813 += 4;
          }
          while (v813 != v812);
LABEL_208:
          v806 = *(unsigned int *)(a1 + 4740);
        }
        ++v807;
        ++v808;
      }
      while (v807 < v806);
    }
    v856 = *(unsigned int *)(a1 + 5748);
    if ((_DWORD)v856)
    {
      v857 = 0;
      v858 = *(unsigned int **)(a1 + 10592);
      do
      {
        v859 = *(_QWORD *)(*(_QWORD *)(a1 + 5856) + 8 * v857);
        if (v859)
        {
          v860 = *(_QWORD *)(a1 + 5824);
          v861 = (*(_DWORD *)(a1 + 5848) * v857);
          v862 = (unsigned int *)(v860 + 16 * (v859 + v861));
          v863 = (unsigned int *)(v860 + 16 * v861);
          do
          {
            while (1)
            {
              v881 = *v858;
              v882 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v863);
              v883 = *(_QWORD *)(a1 + 5752) + 8 * *((_QWORD *)v863 + 1);
              v884 = *v6;
              v885 = *(_QWORD *)(a1 + 20040);
              if (*v858 >= v882)
                break;
              v864 = *(_OWORD *)(v883 + 16);
              v865 = (_OWORD *)(v885 + 8 * (v882 + (_DWORD)v884 * v881));
              v866 = *(_OWORD *)(v883 + 32);
              v867 = *(_OWORD *)(v883 + 48);
              v868 = *(_OWORD *)(v883 + 64);
              v869 = *(_OWORD *)(v883 + 80);
              v870 = *(_OWORD *)(v883 + 96);
              v871 = *(_OWORD *)(v883 + 112);
              v872 = *(_OWORD *)(v883 + 128);
              v873 = *(_OWORD *)(v883 + 144);
              v874 = *(_OWORD *)(v883 + 160);
              v875 = *(_OWORD *)(v883 + 176);
              *v865 = *(_OWORD *)v883;
              v865[1] = v864;
              v876 = (_OWORD *)((char *)v865 + 8 * v884);
              *v876 = v866;
              v876[1] = v867;
              v877 = &v865[v884];
              *v877 = v868;
              v877[1] = v869;
              v878 = (_OWORD *)((char *)v865 + 24 * v884);
              *v878 = v870;
              v878[1] = v871;
              v879 = &v865[2 * v884];
              *v879 = v872;
              v879[1] = v873;
              v880 = (_OWORD *)((char *)v865 + 40 * v884);
              *v880 = v874;
              v880[1] = v875;
              v863 += 4;
              if (v863 == v862)
                goto LABEL_228;
            }
            v886 = (int64x2_t *)(v885 + 8 * (v881 + (_DWORD)v884 * v882));
            v887 = *(int64x2_t *)(v883 + 16);
            v889 = *(int64x2_t *)(v883 + 32);
            v888 = *(int64x2_t *)(v883 + 48);
            v891 = *(int64x2_t *)(v883 + 64);
            v890 = *(int64x2_t *)(v883 + 80);
            v893 = *(int64x2_t *)(v883 + 128);
            v892 = *(int64x2_t *)(v883 + 144);
            v894 = vzip1q_s64(*(int64x2_t *)v883, v889);
            v895 = vzip1q_s64(v891, *(int64x2_t *)(v883 + 96));
            v896 = vzip1q_s64(v893, *(int64x2_t *)(v883 + 160));
            v891.i64[0] = vdupq_laneq_s64(v891, 1).u64[0];
            v891.i64[1] = *(_QWORD *)(v883 + 104);
            v897.i64[0] = vdupq_laneq_s64(v893, 1).u64[0];
            v898 = vzip2q_s64(*(int64x2_t *)v883, v889);
            v897.i64[1] = *(_QWORD *)(v883 + 168);
            v899 = vzip1q_s64(v890, *(int64x2_t *)(v883 + 112));
            v900 = vzip1q_s64(v892, *(int64x2_t *)(v883 + 176));
            v890.i64[0] = vdupq_laneq_s64(v890, 1).u64[0];
            v890.i64[1] = *(_QWORD *)(v883 + 120);
            v901.i64[0] = vdupq_laneq_s64(v892, 1).u64[0];
            v901.i64[1] = *(_QWORD *)(v883 + 184);
            v886[1] = v895;
            v886[2] = v896;
            *v886 = v894;
            v902 = (int64x2_t *)((char *)v886 + 8 * v884);
            v902[1] = v891;
            v902[2] = v897;
            *v902 = v898;
            v903 = &v886[v884];
            v903[1] = v899;
            v903[2] = v900;
            *v903 = vzip1q_s64(v887, v888);
            v904 = (int64x2_t *)((char *)v886 + 24 * v884);
            v904[1] = v890;
            v904[2] = v901;
            *v904 = vzip2q_s64(v887, v888);
            v863 += 4;
          }
          while (v863 != v862);
LABEL_228:
          v856 = *(unsigned int *)(a1 + 5748);
        }
        ++v857;
        ++v858;
      }
      while (v857 < v856);
    }
    v938 = *(unsigned int *)(a1 + 6756);
    if ((_DWORD)v938)
    {
      v939 = 0;
      v940 = *(unsigned int **)(a1 + 10616);
      do
      {
        v941 = *(_QWORD *)(*(_QWORD *)(a1 + 6864) + 8 * v939);
        if (v941)
        {
          v942 = *(_QWORD *)(a1 + 6832);
          v943 = (*(_DWORD *)(a1 + 6856) * v939);
          v944 = (unsigned int *)(v942 + 16 * (v941 + v943));
          v945 = (unsigned int *)(v942 + 16 * v943);
          do
          {
            v957 = *v940;
            v958 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v945);
            v959 = *(_QWORD *)(a1 + 6760) + 8 * *((_QWORD *)v945 + 1);
            v960 = *v6;
            v961 = *(_QWORD *)(a1 + 20040);
            if (*v940 < v958)
            {
              v946 = *(int64x2_t *)(v959 + 16);
              v947 = (int64x2_t *)(v961 + 8 * (v958 + (_DWORD)v960 * v957));
              v948 = *(_OWORD *)(v959 + 32);
              v949 = *(_OWORD *)(v959 + 48);
              v950 = *(int64x2_t *)(v959 + 64);
              v951 = *(int64x2_t *)(v959 + 80);
              v953 = *(int64x2_t *)(v959 + 96);
              v952 = *(int64x2_t *)(v959 + 112);
              *v947 = *(int64x2_t *)v959;
              v947[1] = v946;
              v954 = &v947->i8[8 * v960];
              *(_OWORD *)v954 = v948;
              *((_OWORD *)v954 + 1) = v949;
            }
            else
            {
              v947 = (int64x2_t *)(v961 + 8 * (v957 + (_DWORD)v960 * v958));
              v962 = *(int64x2_t *)(v959 + 16);
              v963 = *(int64x2_t *)(v959 + 32);
              v964 = *(int64x2_t *)(v959 + 48);
              v966 = *(int64x2_t *)(v959 + 64);
              v965 = *(int64x2_t *)(v959 + 80);
              v967 = vzip1q_s64(*(int64x2_t *)v959, v963);
              v968 = vzip1q_s64(v966, *(int64x2_t *)(v959 + 96));
              v969 = vzip2q_s64(*(int64x2_t *)v959, v963);
              v966.i64[0] = vdupq_laneq_s64(v966, 1).u64[0];
              v966.i64[1] = *(_QWORD *)(v959 + 104);
              v950 = vzip1q_s64(v962, v964);
              v951 = vzip1q_s64(v965, *(int64x2_t *)(v959 + 112));
              v952.i64[0] = vdupq_laneq_s64(v965, 1).u64[0];
              v952.i64[1] = *(_QWORD *)(v959 + 120);
              v953 = vzip2q_s64(v962, v964);
              *v947 = v967;
              v947[1] = v968;
              v970 = (int64x2_t *)((char *)v947 + 8 * v960);
              *v970 = v969;
              v970[1] = v966;
            }
            v955 = &v947[v960];
            *v955 = v950;
            v955[1] = v951;
            v956 = (int64x2_t *)((char *)v947 + 24 * v960);
            *v956 = v953;
            v956[1] = v952;
            v945 += 4;
          }
          while (v945 != v944);
          v938 = *(unsigned int *)(a1 + 6756);
        }
        ++v939;
        ++v940;
      }
      while (v939 < v938);
    }
    v1003 = *(unsigned int *)(a1 + 7764);
    if ((_DWORD)v1003)
    {
      v1004 = 0;
      v1005 = *(unsigned int **)(a1 + 10640);
      do
      {
        v1006 = *(_QWORD *)(*(_QWORD *)(a1 + 7872) + 8 * v1004);
        if (v1006)
        {
          v1007 = *(_QWORD *)(a1 + 7840);
          v1008 = (*(_DWORD *)(a1 + 7864) * v1004);
          v1009 = (unsigned int *)(v1007 + 16 * (v1006 + v1008));
          v1010 = (unsigned int *)(v1007 + 16 * v1008);
          do
          {
            v1022 = *v1005;
            v1023 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v1010);
            v1024 = *(_QWORD *)(a1 + 7768) + 8 * *((_QWORD *)v1010 + 1);
            v1025 = *v6;
            v1026 = *(_QWORD *)(a1 + 20040);
            if (*v1005 < v1023)
            {
              v1011 = *(int64x2_t *)(v1024 + 16);
              v1012 = (int64x2_t *)(v1026 + 8 * (v1023 + (_DWORD)v1025 * v1022));
              v1013 = *(_OWORD *)(v1024 + 32);
              v1014 = *(_OWORD *)(v1024 + 48);
              v1015 = *(int64x2_t *)(v1024 + 64);
              v1016 = *(int64x2_t *)(v1024 + 80);
              v1018 = *(int64x2_t *)(v1024 + 96);
              v1017 = *(int64x2_t *)(v1024 + 112);
              *v1012 = *(int64x2_t *)v1024;
              v1012[1] = v1011;
              v1019 = &v1012->i8[8 * v1025];
              *(_OWORD *)v1019 = v1013;
              *((_OWORD *)v1019 + 1) = v1014;
            }
            else
            {
              v1012 = (int64x2_t *)(v1026 + 8 * (v1022 + (_DWORD)v1025 * v1023));
              v1027 = *(int64x2_t *)(v1024 + 16);
              v1028 = *(int64x2_t *)(v1024 + 32);
              v1029 = *(int64x2_t *)(v1024 + 48);
              v1031 = *(int64x2_t *)(v1024 + 64);
              v1030 = *(int64x2_t *)(v1024 + 80);
              v1032 = vzip1q_s64(*(int64x2_t *)v1024, v1028);
              v1033 = vzip1q_s64(v1031, *(int64x2_t *)(v1024 + 96));
              v1034 = vzip2q_s64(*(int64x2_t *)v1024, v1028);
              v1031.i64[0] = vdupq_laneq_s64(v1031, 1).u64[0];
              v1031.i64[1] = *(_QWORD *)(v1024 + 104);
              v1015 = vzip1q_s64(v1027, v1029);
              v1016 = vzip1q_s64(v1030, *(int64x2_t *)(v1024 + 112));
              v1017.i64[0] = vdupq_laneq_s64(v1030, 1).u64[0];
              v1017.i64[1] = *(_QWORD *)(v1024 + 120);
              v1018 = vzip2q_s64(v1027, v1029);
              *v1012 = v1032;
              v1012[1] = v1033;
              v1035 = (int64x2_t *)((char *)v1012 + 8 * v1025);
              *v1035 = v1034;
              v1035[1] = v1031;
            }
            v1020 = &v1012[v1025];
            *v1020 = v1015;
            v1020[1] = v1016;
            v1021 = (int64x2_t *)((char *)v1012 + 24 * v1025);
            *v1021 = v1018;
            v1021[1] = v1017;
            v1010 += 4;
          }
          while (v1010 != v1009);
          v1003 = *(unsigned int *)(a1 + 7764);
        }
        ++v1004;
        ++v1005;
      }
      while (v1004 < v1003);
    }
    v1085 = *(unsigned int *)(a1 + 8772);
    if ((_DWORD)v1085)
    {
      v1086 = 0;
      v1087 = *(unsigned int **)(a1 + 10664);
      do
      {
        v1088 = *(_QWORD *)(*(_QWORD *)(a1 + 8880) + 8 * v1086);
        if (v1088)
        {
          v1089 = *(_QWORD *)(a1 + 8848);
          v1090 = (*(_DWORD *)(a1 + 8872) * v1086);
          v1091 = (unsigned int *)(v1089 + 16 * (v1088 + v1090));
          v1092 = (unsigned int *)(v1089 + 16 * v1090);
          do
          {
            while (1)
            {
              v1101 = *v1087;
              v1102 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v1092);
              v1103 = *(_QWORD *)(a1 + 8776) + 8 * *((_QWORD *)v1092 + 1);
              v1104 = *v6;
              v1105 = *(_QWORD *)(a1 + 20040);
              if (*v1087 >= v1102)
                break;
              v1093 = *(_OWORD *)(v1103 + 16);
              v1094 = (_OWORD *)(v1105 + 8 * (v1102 + (_DWORD)v1104 * v1101));
              v1095 = *(_OWORD *)(v1103 + 32);
              v1096 = *(_OWORD *)(v1103 + 48);
              v1097 = *(_OWORD *)(v1103 + 64);
              v1098 = *(_OWORD *)(v1103 + 80);
              *v1094 = *(_OWORD *)v1103;
              v1094[1] = v1093;
              v1099 = (_OWORD *)((char *)v1094 + 8 * v1104);
              *v1099 = v1095;
              v1099[1] = v1096;
              v1100 = &v1094[v1104];
              *v1100 = v1097;
              v1100[1] = v1098;
              v1092 += 4;
              if (v1092 == v1091)
                goto LABEL_288;
            }
            v1106 = (int64x2_t *)(v1105 + 8 * (v1101 + (_DWORD)v1104 * v1102));
            v1107 = *(int64x2_t *)(v1103 + 16);
            v1109 = *(int64x2_t *)(v1103 + 32);
            v1108 = *(int64x2_t *)(v1103 + 48);
            v1111 = *(_OWORD *)(v1103 + 64);
            v1110 = *(_OWORD *)(v1103 + 80);
            v1112 = vzip1q_s64(*(int64x2_t *)v1103, v1109);
            v1113 = vzip2q_s64(*(int64x2_t *)v1103, v1109);
            v1106[1].i64[0] = v1111;
            *v1106 = v1112;
            v1114 = (int64x2_t *)((char *)v1106 + 8 * v1104);
            *v1114 = v1113;
            v1114[1].i64[0] = *((_QWORD *)&v1111 + 1);
            v1115 = &v1106[v1104];
            v1115[1].i64[0] = v1110;
            *v1115 = vzip1q_s64(v1107, v1108);
            v1116 = (int64x2_t *)((char *)v1106 + 24 * v1104);
            v1116[1].i64[0] = *((_QWORD *)&v1110 + 1);
            *v1116 = vzip2q_s64(v1107, v1108);
            v1092 += 4;
          }
          while (v1092 != v1091);
LABEL_288:
          v1085 = *(unsigned int *)(a1 + 8772);
        }
        ++v1086;
        ++v1087;
      }
      while (v1086 < v1085);
    }
    v1180 = *(unsigned int *)(a1 + 2580);
    if ((_DWORD)v1180)
    {
      v1181 = 0;
      v1182 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1183 = *(_QWORD *)(*(_QWORD *)(a1 + 2688) + 8 * v1181);
        if (v1183)
        {
          v1184 = *(_QWORD *)(a1 + 2656);
          v1185 = (*(_DWORD *)(a1 + 2680) * v1181);
          v1186 = (unsigned int *)(v1184 + 16 * (v1183 + v1185));
          v1187 = (unsigned int *)(v1184 + 16 * v1185);
          do
          {
            while (1)
            {
              v1205 = *v1182;
              v1206 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1187);
              v1207 = *(_QWORD *)(a1 + 2584) + 8 * *((_QWORD *)v1187 + 1);
              v1208 = *v6;
              v1209 = *(_QWORD *)(a1 + 20040);
              if (*v1182 >= v1206)
                break;
              v1188 = *(_OWORD *)(v1207 + 16);
              v1189 = (_OWORD *)(v1209 + 8 * (v1206 + (_DWORD)v1208 * v1205));
              v1190 = *(_OWORD *)(v1207 + 32);
              v1191 = *(_OWORD *)(v1207 + 48);
              v1192 = *(_OWORD *)(v1207 + 64);
              v1193 = *(_OWORD *)(v1207 + 80);
              v1194 = *(_OWORD *)(v1207 + 96);
              v1195 = *(_OWORD *)(v1207 + 112);
              v1196 = *(_OWORD *)(v1207 + 128);
              v1197 = *(_OWORD *)(v1207 + 144);
              v1198 = *(_OWORD *)(v1207 + 160);
              v1199 = *(_OWORD *)(v1207 + 176);
              *v1189 = *(_OWORD *)v1207;
              v1189[1] = v1188;
              v1200 = (_OWORD *)((char *)v1189 + 8 * v1208);
              *v1200 = v1190;
              v1200[1] = v1191;
              v1201 = &v1189[v1208];
              *v1201 = v1192;
              v1201[1] = v1193;
              v1202 = (_OWORD *)((char *)v1189 + 24 * v1208);
              *v1202 = v1194;
              v1202[1] = v1195;
              v1203 = &v1189[2 * v1208];
              *v1203 = v1196;
              v1203[1] = v1197;
              v1204 = (_OWORD *)((char *)v1189 + 40 * v1208);
              *v1204 = v1198;
              v1204[1] = v1199;
              v1187 += 4;
              if (v1187 == v1186)
                goto LABEL_308;
            }
            v1210 = (int64x2_t *)(v1209 + 8 * (v1205 + (_DWORD)v1208 * v1206));
            v1211 = *(int64x2_t *)(v1207 + 16);
            v1213 = *(int64x2_t *)(v1207 + 32);
            v1212 = *(int64x2_t *)(v1207 + 48);
            v1215 = *(int64x2_t *)(v1207 + 64);
            v1214 = *(int64x2_t *)(v1207 + 80);
            v1217 = *(int64x2_t *)(v1207 + 128);
            v1216 = *(int64x2_t *)(v1207 + 144);
            v1218 = vzip1q_s64(*(int64x2_t *)v1207, v1213);
            v1219 = vzip1q_s64(v1215, *(int64x2_t *)(v1207 + 96));
            v1220 = vzip1q_s64(v1217, *(int64x2_t *)(v1207 + 160));
            v1215.i64[0] = vdupq_laneq_s64(v1215, 1).u64[0];
            v1215.i64[1] = *(_QWORD *)(v1207 + 104);
            v1221.i64[0] = vdupq_laneq_s64(v1217, 1).u64[0];
            v1222 = vzip2q_s64(*(int64x2_t *)v1207, v1213);
            v1221.i64[1] = *(_QWORD *)(v1207 + 168);
            v1223 = vzip1q_s64(v1214, *(int64x2_t *)(v1207 + 112));
            v1224 = vzip1q_s64(v1216, *(int64x2_t *)(v1207 + 176));
            v1214.i64[0] = vdupq_laneq_s64(v1214, 1).u64[0];
            v1214.i64[1] = *(_QWORD *)(v1207 + 120);
            v1225.i64[0] = vdupq_laneq_s64(v1216, 1).u64[0];
            v1225.i64[1] = *(_QWORD *)(v1207 + 184);
            v1210[1] = v1219;
            v1210[2] = v1220;
            *v1210 = v1218;
            v1226 = (int64x2_t *)((char *)v1210 + 8 * v1208);
            v1226[1] = v1215;
            v1226[2] = v1221;
            *v1226 = v1222;
            v1227 = &v1210[v1208];
            v1227[1] = v1223;
            v1227[2] = v1224;
            *v1227 = vzip1q_s64(v1211, v1212);
            v1228 = (int64x2_t *)((char *)v1210 + 24 * v1208);
            v1228[1] = v1214;
            v1228[2] = v1225;
            *v1228 = vzip2q_s64(v1211, v1212);
            v1187 += 4;
          }
          while (v1187 != v1186);
LABEL_308:
          v1180 = *(unsigned int *)(a1 + 2580);
        }
        ++v1181;
        ++v1182;
      }
      while (v1181 < v1180);
    }
    v1246 = *(unsigned int *)(a1 + 3588);
    if ((_DWORD)v1246)
    {
      v1247 = 0;
      v1248 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1249 = *(_QWORD *)(*(_QWORD *)(a1 + 3696) + 8 * v1247);
        if (v1249)
        {
          v1250 = *(_QWORD *)(a1 + 3664);
          v1251 = (*(_DWORD *)(a1 + 3688) * v1247);
          v1252 = (unsigned int *)(v1250 + 16 * (v1249 + v1251));
          v1253 = (unsigned int *)(v1250 + 16 * v1251);
          do
          {
            while (1)
            {
              v1280 = *v1248;
              v1281 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1253);
              v1282 = *(_QWORD *)(a1 + 3592) + 8 * *((_QWORD *)v1253 + 1);
              v1283 = *v6;
              v1284 = *(_QWORD *)(a1 + 20040);
              if (*v1248 >= v1281)
                break;
              v1254 = *(_OWORD *)(v1282 + 16);
              v1255 = (_OWORD *)(v1284 + 8 * (v1281 + (_DWORD)v1283 * v1280));
              v1256 = *(_OWORD *)(v1282 + 32);
              v1257 = *(_OWORD *)(v1282 + 48);
              v1258 = *(_OWORD *)(v1282 + 64);
              v1259 = *(_OWORD *)(v1282 + 80);
              v1260 = *(_OWORD *)(v1282 + 96);
              v1261 = *(_OWORD *)(v1282 + 112);
              v1262 = *(_OWORD *)(v1282 + 128);
              v1263 = *(_OWORD *)(v1282 + 144);
              v1264 = *(_OWORD *)(v1282 + 160);
              v1265 = *(_OWORD *)(v1282 + 176);
              v1266 = *(_OWORD *)(v1282 + 192);
              v1267 = *(_OWORD *)(v1282 + 208);
              v1268 = *(_OWORD *)(v1282 + 224);
              v1269 = *(_OWORD *)(v1282 + 240);
              v1270 = *(_OWORD *)(v1282 + 256);
              v1271 = *(_OWORD *)(v1282 + 272);
              *v1255 = *(_OWORD *)v1282;
              v1255[1] = v1254;
              v1272 = (_OWORD *)((char *)v1255 + 8 * v1283);
              *v1272 = v1256;
              v1272[1] = v1257;
              v1273 = &v1255[v1283];
              *v1273 = v1258;
              v1273[1] = v1259;
              v1274 = (_OWORD *)((char *)v1255 + 24 * v1283);
              *v1274 = v1260;
              v1274[1] = v1261;
              v1275 = &v1255[2 * v1283];
              *v1275 = v1262;
              v1275[1] = v1263;
              v1276 = (_OWORD *)((char *)v1255 + 40 * v1283);
              *v1276 = v1264;
              v1276[1] = v1265;
              v1277 = &v1255[3 * v1283];
              *v1277 = v1266;
              v1277[1] = v1267;
              v1278 = (_OWORD *)((char *)v1255 + 56 * v1283);
              *v1278 = v1268;
              v1278[1] = v1269;
              v1279 = &v1255[4 * v1283];
              *v1279 = v1270;
              v1279[1] = v1271;
              v1253 += 4;
              if (v1253 == v1252)
                goto LABEL_328;
            }
            v1285 = *(int64x2_t *)(v1282 + 16);
            v1286 = (int64x2_t *)(v1284 + 8 * (v1280 + (_DWORD)v1283 * v1281));
            v1288 = *(int64x2_t *)(v1282 + 32);
            v1287 = *(int64x2_t *)(v1282 + 48);
            v1290 = *(int64x2_t *)(v1282 + 64);
            v1289 = *(int64x2_t *)(v1282 + 80);
            v1292 = *(int64x2_t *)(v1282 + 128);
            v1291 = *(int64x2_t *)(v1282 + 144);
            v1294 = *(int64x2_t *)(v1282 + 192);
            v1293 = *(int64x2_t *)(v1282 + 208);
            v1296 = *(_OWORD *)(v1282 + 256);
            v1295 = *(_OWORD *)(v1282 + 272);
            v1297 = vzip1q_s64(*(int64x2_t *)v1282, v1288);
            v1298 = vzip1q_s64(v1290, *(int64x2_t *)(v1282 + 96));
            v1299 = vzip1q_s64(v1294, *(int64x2_t *)(v1282 + 224));
            v1300 = vzip2q_s64(*(int64x2_t *)v1282, v1288);
            v1288.i64[0] = vdupq_laneq_s64(v1290, 1).u64[0];
            v1288.i64[1] = *(_QWORD *)(v1282 + 104);
            v1290.i64[0] = vdupq_laneq_s64(v1292, 1).u64[0];
            v1290.i64[1] = *(_QWORD *)(v1282 + 168);
            v1301.i64[0] = vdupq_laneq_s64(v1294, 1).u64[0];
            v1301.i64[1] = *(_QWORD *)(v1282 + 232);
            v1302 = vzip1q_s64(v1289, *(int64x2_t *)(v1282 + 112));
            v1303 = vzip1q_s64(v1291, *(int64x2_t *)(v1282 + 176));
            v1304 = vzip1q_s64(v1293, *(int64x2_t *)(v1282 + 240));
            v1289.i64[0] = vdupq_laneq_s64(v1289, 1).u64[0];
            v1289.i64[1] = *(_QWORD *)(v1282 + 120);
            v1305.i64[0] = vdupq_laneq_s64(v1291, 1).u64[0];
            v1305.i64[1] = *(_QWORD *)(v1282 + 184);
            v1291.i64[0] = vdupq_laneq_s64(v1293, 1).u64[0];
            v1291.i64[1] = *(_QWORD *)(v1282 + 248);
            v1286[2] = vzip1q_s64(v1292, *(int64x2_t *)(v1282 + 160));
            v1286[3] = v1299;
            v1286[4].i64[0] = v1296;
            *v1286 = v1297;
            v1286[1] = v1298;
            v1306 = (int64x2_t *)((char *)v1286 + 8 * v1283);
            v1306[2] = v1290;
            v1306[3] = v1301;
            *v1306 = v1300;
            v1306[1] = v1288;
            v1306[4].i64[0] = *((_QWORD *)&v1296 + 1);
            v1307 = &v1286[v1283];
            v1307[4].i64[0] = v1295;
            v1307[2] = v1303;
            v1307[3] = v1304;
            *v1307 = vzip1q_s64(v1285, v1287);
            v1307[1] = v1302;
            v1308 = (int64x2_t *)((char *)v1286 + 24 * v1283);
            v1308[4].i64[0] = *((_QWORD *)&v1295 + 1);
            v1308[2] = v1305;
            v1308[3] = v1291;
            *v1308 = vzip2q_s64(v1285, v1287);
            v1308[1] = v1289;
            v1253 += 4;
          }
          while (v1253 != v1252);
LABEL_328:
          v1246 = *(unsigned int *)(a1 + 3588);
        }
        ++v1247;
        ++v1248;
      }
      while (v1247 < v1246);
    }
    v1358 = *(unsigned int *)(a1 + 4596);
    if ((_DWORD)v1358)
    {
      v1359 = 0;
      v1360 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1361 = *(_QWORD *)(*(_QWORD *)(a1 + 4704) + 8 * v1359);
        if (v1361)
        {
          v1362 = *(_QWORD *)(a1 + 4672);
          v1363 = (*(_DWORD *)(a1 + 4696) * v1359);
          v1364 = (unsigned int *)(v1362 + 16 * (v1361 + v1363));
          v1365 = (unsigned int *)(v1362 + 16 * v1363);
          do
          {
            while (1)
            {
              v1367 = *v1360;
              v1368 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1365);
              v1369 = (int8x16_t *)(*(_QWORD *)(a1 + 4600) + 8 * *((_QWORD *)v1365 + 1));
              v1370 = *v6;
              v1371 = *(_QWORD *)(a1 + 20040);
              v1373 = *v1369;
              v1372 = v1369[1];
              if (*v1360 >= v1368)
                break;
              v1366 = (int8x16_t *)(v1371 + 8 * (v1368 + (_DWORD)v1370 * v1367));
              *v1366 = v1373;
              v1366[1] = v1372;
              v1365 += 4;
              if (v1365 == v1364)
                goto LABEL_348;
            }
            v1374 = (_QWORD *)(v1371 + 8 * (v1367 + (_DWORD)v1370 * v1368));
            *v1374 = v1373.i64[0];
            v1374[v1370] = vextq_s8(v1373, v1373, 8uLL).u64[0];
            v1374[2 * v1370] = v1372.i64[0];
            v1374[3 * v1370] = vextq_s8(v1372, v1372, 8uLL).u64[0];
            v1365 += 4;
          }
          while (v1365 != v1364);
LABEL_348:
          v1358 = *(unsigned int *)(a1 + 4596);
        }
        ++v1359;
        ++v1360;
      }
      while (v1359 < v1358);
    }
    v1408 = *(unsigned int *)(a1 + 5604);
    if ((_DWORD)v1408)
    {
      v1409 = 0;
      v1410 = *(unsigned int **)(a1 + 10592);
      do
      {
        v1411 = *(_QWORD *)(*(_QWORD *)(a1 + 5712) + 8 * v1409);
        if (v1411)
        {
          v1412 = *(_QWORD *)(a1 + 5680);
          v1413 = (*(_DWORD *)(a1 + 5704) * v1409);
          v1414 = (unsigned int *)(v1412 + 16 * (v1411 + v1413));
          v1415 = (unsigned int *)(v1412 + 16 * v1413);
          do
          {
            while (1)
            {
              v1433 = *v1410;
              v1434 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1415);
              v1435 = *(_QWORD *)(a1 + 5608) + 8 * *((_QWORD *)v1415 + 1);
              v1436 = *v6;
              v1437 = *(_QWORD *)(a1 + 20040);
              if (*v1410 >= v1434)
                break;
              v1416 = *(_OWORD *)(v1435 + 16);
              v1417 = (_OWORD *)(v1437 + 8 * (v1434 + (_DWORD)v1436 * v1433));
              v1418 = *(_OWORD *)(v1435 + 32);
              v1419 = *(_OWORD *)(v1435 + 48);
              v1420 = *(_OWORD *)(v1435 + 64);
              v1421 = *(_OWORD *)(v1435 + 80);
              v1422 = *(_OWORD *)(v1435 + 96);
              v1423 = *(_OWORD *)(v1435 + 112);
              v1424 = *(_OWORD *)(v1435 + 128);
              v1425 = *(_OWORD *)(v1435 + 144);
              v1426 = *(_OWORD *)(v1435 + 160);
              v1427 = *(_OWORD *)(v1435 + 176);
              *v1417 = *(_OWORD *)v1435;
              v1417[1] = v1416;
              v1428 = (_OWORD *)((char *)v1417 + 8 * v1436);
              *v1428 = v1418;
              v1428[1] = v1419;
              v1429 = &v1417[v1436];
              *v1429 = v1420;
              v1429[1] = v1421;
              v1430 = (_OWORD *)((char *)v1417 + 24 * v1436);
              *v1430 = v1422;
              v1430[1] = v1423;
              v1431 = &v1417[2 * v1436];
              *v1431 = v1424;
              v1431[1] = v1425;
              v1432 = (_OWORD *)((char *)v1417 + 40 * v1436);
              *v1432 = v1426;
              v1432[1] = v1427;
              v1415 += 4;
              if (v1415 == v1414)
                goto LABEL_368;
            }
            v1438 = (int64x2_t *)(v1437 + 8 * (v1433 + (_DWORD)v1436 * v1434));
            v1439 = *(int64x2_t *)(v1435 + 16);
            v1441 = *(int64x2_t *)(v1435 + 32);
            v1440 = *(int64x2_t *)(v1435 + 48);
            v1443 = *(int64x2_t *)(v1435 + 64);
            v1442 = *(int64x2_t *)(v1435 + 80);
            v1445 = *(int64x2_t *)(v1435 + 128);
            v1444 = *(int64x2_t *)(v1435 + 144);
            v1446 = vzip1q_s64(*(int64x2_t *)v1435, v1441);
            v1447 = vzip1q_s64(v1443, *(int64x2_t *)(v1435 + 96));
            v1448 = vzip1q_s64(v1445, *(int64x2_t *)(v1435 + 160));
            v1443.i64[0] = vdupq_laneq_s64(v1443, 1).u64[0];
            v1443.i64[1] = *(_QWORD *)(v1435 + 104);
            v1449.i64[0] = vdupq_laneq_s64(v1445, 1).u64[0];
            v1450 = vzip2q_s64(*(int64x2_t *)v1435, v1441);
            v1449.i64[1] = *(_QWORD *)(v1435 + 168);
            v1451 = vzip1q_s64(v1442, *(int64x2_t *)(v1435 + 112));
            v1452 = vzip1q_s64(v1444, *(int64x2_t *)(v1435 + 176));
            v1442.i64[0] = vdupq_laneq_s64(v1442, 1).u64[0];
            v1442.i64[1] = *(_QWORD *)(v1435 + 120);
            v1453.i64[0] = vdupq_laneq_s64(v1444, 1).u64[0];
            v1453.i64[1] = *(_QWORD *)(v1435 + 184);
            v1438[1] = v1447;
            v1438[2] = v1448;
            *v1438 = v1446;
            v1454 = (int64x2_t *)((char *)v1438 + 8 * v1436);
            v1454[1] = v1443;
            v1454[2] = v1449;
            *v1454 = v1450;
            v1455 = &v1438[v1436];
            v1455[1] = v1451;
            v1455[2] = v1452;
            *v1455 = vzip1q_s64(v1439, v1440);
            v1456 = (int64x2_t *)((char *)v1438 + 24 * v1436);
            v1456[1] = v1442;
            v1456[2] = v1453;
            *v1456 = vzip2q_s64(v1439, v1440);
            v1415 += 4;
          }
          while (v1415 != v1414);
LABEL_368:
          v1408 = *(unsigned int *)(a1 + 5604);
        }
        ++v1409;
        ++v1410;
      }
      while (v1409 < v1408);
    }
    v1490 = *(unsigned int *)(a1 + 6612);
    if ((_DWORD)v1490)
    {
      v1491 = 0;
      v1492 = *(unsigned int **)(a1 + 10616);
      do
      {
        v1493 = *(_QWORD *)(*(_QWORD *)(a1 + 6720) + 8 * v1491);
        if (v1493)
        {
          v1494 = *(_QWORD *)(a1 + 6688);
          v1495 = (*(_DWORD *)(a1 + 6712) * v1491);
          v1496 = (unsigned int *)(v1494 + 16 * (v1493 + v1495));
          v1497 = (unsigned int *)(v1494 + 16 * v1495);
          do
          {
            v1509 = *v1492;
            v1510 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1497);
            v1511 = *(_QWORD *)(a1 + 6616) + 8 * *((_QWORD *)v1497 + 1);
            v1512 = *v6;
            v1513 = *(_QWORD *)(a1 + 20040);
            if (*v1492 < v1510)
            {
              v1498 = *(int64x2_t *)(v1511 + 16);
              v1499 = (int64x2_t *)(v1513 + 8 * (v1510 + (_DWORD)v1512 * v1509));
              v1500 = *(_OWORD *)(v1511 + 32);
              v1501 = *(_OWORD *)(v1511 + 48);
              v1502 = *(int64x2_t *)(v1511 + 64);
              v1503 = *(int64x2_t *)(v1511 + 80);
              v1505 = *(int64x2_t *)(v1511 + 96);
              v1504 = *(int64x2_t *)(v1511 + 112);
              *v1499 = *(int64x2_t *)v1511;
              v1499[1] = v1498;
              v1506 = &v1499->i8[8 * v1512];
              *(_OWORD *)v1506 = v1500;
              *((_OWORD *)v1506 + 1) = v1501;
            }
            else
            {
              v1499 = (int64x2_t *)(v1513 + 8 * (v1509 + (_DWORD)v1512 * v1510));
              v1514 = *(int64x2_t *)(v1511 + 16);
              v1515 = *(int64x2_t *)(v1511 + 32);
              v1516 = *(int64x2_t *)(v1511 + 48);
              v1518 = *(int64x2_t *)(v1511 + 64);
              v1517 = *(int64x2_t *)(v1511 + 80);
              v1519 = vzip1q_s64(*(int64x2_t *)v1511, v1515);
              v1520 = vzip1q_s64(v1518, *(int64x2_t *)(v1511 + 96));
              v1521 = vzip2q_s64(*(int64x2_t *)v1511, v1515);
              v1518.i64[0] = vdupq_laneq_s64(v1518, 1).u64[0];
              v1518.i64[1] = *(_QWORD *)(v1511 + 104);
              v1502 = vzip1q_s64(v1514, v1516);
              v1503 = vzip1q_s64(v1517, *(int64x2_t *)(v1511 + 112));
              v1504.i64[0] = vdupq_laneq_s64(v1517, 1).u64[0];
              v1504.i64[1] = *(_QWORD *)(v1511 + 120);
              v1505 = vzip2q_s64(v1514, v1516);
              *v1499 = v1519;
              v1499[1] = v1520;
              v1522 = (int64x2_t *)((char *)v1499 + 8 * v1512);
              *v1522 = v1521;
              v1522[1] = v1518;
            }
            v1507 = &v1499[v1512];
            *v1507 = v1502;
            v1507[1] = v1503;
            v1508 = (int64x2_t *)((char *)v1499 + 24 * v1512);
            *v1508 = v1505;
            v1508[1] = v1504;
            v1497 += 4;
          }
          while (v1497 != v1496);
          v1490 = *(unsigned int *)(a1 + 6612);
        }
        ++v1491;
        ++v1492;
      }
      while (v1491 < v1490);
    }
    v1555 = *(unsigned int *)(a1 + 7620);
    if ((_DWORD)v1555)
    {
      v1556 = 0;
      v1557 = *(unsigned int **)(a1 + 10640);
      do
      {
        v1558 = *(_QWORD *)(*(_QWORD *)(a1 + 7728) + 8 * v1556);
        if (v1558)
        {
          v1559 = *(_QWORD *)(a1 + 7696);
          v1560 = (*(_DWORD *)(a1 + 7720) * v1556);
          v1561 = (unsigned int *)(v1559 + 16 * (v1558 + v1560));
          v1562 = (unsigned int *)(v1559 + 16 * v1560);
          do
          {
            v1574 = *v1557;
            v1575 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1562);
            v1576 = *(_QWORD *)(a1 + 7624) + 8 * *((_QWORD *)v1562 + 1);
            v1577 = *v6;
            v1578 = *(_QWORD *)(a1 + 20040);
            if (*v1557 < v1575)
            {
              v1563 = *(int64x2_t *)(v1576 + 16);
              v1564 = (int64x2_t *)(v1578 + 8 * (v1575 + (_DWORD)v1577 * v1574));
              v1565 = *(_OWORD *)(v1576 + 32);
              v1566 = *(_OWORD *)(v1576 + 48);
              v1567 = *(int64x2_t *)(v1576 + 64);
              v1568 = *(int64x2_t *)(v1576 + 80);
              v1570 = *(int64x2_t *)(v1576 + 96);
              v1569 = *(int64x2_t *)(v1576 + 112);
              *v1564 = *(int64x2_t *)v1576;
              v1564[1] = v1563;
              v1571 = &v1564->i8[8 * v1577];
              *(_OWORD *)v1571 = v1565;
              *((_OWORD *)v1571 + 1) = v1566;
            }
            else
            {
              v1564 = (int64x2_t *)(v1578 + 8 * (v1574 + (_DWORD)v1577 * v1575));
              v1579 = *(int64x2_t *)(v1576 + 16);
              v1580 = *(int64x2_t *)(v1576 + 32);
              v1581 = *(int64x2_t *)(v1576 + 48);
              v1583 = *(int64x2_t *)(v1576 + 64);
              v1582 = *(int64x2_t *)(v1576 + 80);
              v1584 = vzip1q_s64(*(int64x2_t *)v1576, v1580);
              v1585 = vzip1q_s64(v1583, *(int64x2_t *)(v1576 + 96));
              v1586 = vzip2q_s64(*(int64x2_t *)v1576, v1580);
              v1583.i64[0] = vdupq_laneq_s64(v1583, 1).u64[0];
              v1583.i64[1] = *(_QWORD *)(v1576 + 104);
              v1567 = vzip1q_s64(v1579, v1581);
              v1568 = vzip1q_s64(v1582, *(int64x2_t *)(v1576 + 112));
              v1569.i64[0] = vdupq_laneq_s64(v1582, 1).u64[0];
              v1569.i64[1] = *(_QWORD *)(v1576 + 120);
              v1570 = vzip2q_s64(v1579, v1581);
              *v1564 = v1584;
              v1564[1] = v1585;
              v1587 = (int64x2_t *)((char *)v1564 + 8 * v1577);
              *v1587 = v1586;
              v1587[1] = v1583;
            }
            v1572 = &v1564[v1577];
            *v1572 = v1567;
            v1572[1] = v1568;
            v1573 = (int64x2_t *)((char *)v1564 + 24 * v1577);
            *v1573 = v1570;
            v1573[1] = v1569;
            v1562 += 4;
          }
          while (v1562 != v1561);
          v1555 = *(unsigned int *)(a1 + 7620);
        }
        ++v1556;
        ++v1557;
      }
      while (v1556 < v1555);
    }
    v1651 = *(unsigned int *)(a1 + 8628);
    if ((_DWORD)v1651)
    {
      v1652 = 0;
      v1653 = *(unsigned int **)(a1 + 10664);
      do
      {
        v1654 = *(_QWORD *)(*(_QWORD *)(a1 + 8736) + 8 * v1652);
        if (v1654)
        {
          v1655 = *(_QWORD *)(a1 + 8704);
          v1656 = (*(_DWORD *)(a1 + 8728) * v1652);
          v1657 = (unsigned int *)(v1655 + 16 * (v1654 + v1656));
          v1658 = (unsigned int *)(v1655 + 16 * v1656);
          do
          {
            while (1)
            {
              v1667 = *v1653;
              v1668 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1658);
              v1669 = *(_QWORD *)(a1 + 8632) + 8 * *((_QWORD *)v1658 + 1);
              v1670 = *v6;
              v1671 = *(_QWORD *)(a1 + 20040);
              if (*v1653 >= v1668)
                break;
              v1659 = *(_OWORD *)(v1669 + 16);
              v1660 = (_OWORD *)(v1671 + 8 * (v1668 + (_DWORD)v1670 * v1667));
              v1661 = *(_OWORD *)(v1669 + 32);
              v1662 = *(_OWORD *)(v1669 + 48);
              v1663 = *(_OWORD *)(v1669 + 64);
              v1664 = *(_OWORD *)(v1669 + 80);
              *v1660 = *(_OWORD *)v1669;
              v1660[1] = v1659;
              v1665 = (_OWORD *)((char *)v1660 + 8 * v1670);
              *v1665 = v1661;
              v1665[1] = v1662;
              v1666 = &v1660[v1670];
              *v1666 = v1663;
              v1666[1] = v1664;
              v1658 += 4;
              if (v1658 == v1657)
                goto LABEL_428;
            }
            v1672 = (int64x2_t *)(v1671 + 8 * (v1667 + (_DWORD)v1670 * v1668));
            v1673 = *(int64x2_t *)(v1669 + 16);
            v1675 = *(int64x2_t *)(v1669 + 32);
            v1674 = *(int64x2_t *)(v1669 + 48);
            v1677 = *(_OWORD *)(v1669 + 64);
            v1676 = *(_OWORD *)(v1669 + 80);
            v1678 = vzip1q_s64(*(int64x2_t *)v1669, v1675);
            v1679 = vzip2q_s64(*(int64x2_t *)v1669, v1675);
            v1672[1].i64[0] = v1677;
            *v1672 = v1678;
            v1680 = (int64x2_t *)((char *)v1672 + 8 * v1670);
            *v1680 = v1679;
            v1680[1].i64[0] = *((_QWORD *)&v1677 + 1);
            v1681 = &v1672[v1670];
            v1681[1].i64[0] = v1676;
            *v1681 = vzip1q_s64(v1673, v1674);
            v1682 = (int64x2_t *)((char *)v1672 + 24 * v1670);
            v1682[1].i64[0] = *((_QWORD *)&v1676 + 1);
            *v1682 = vzip2q_s64(v1673, v1674);
            v1658 += 4;
          }
          while (v1658 != v1657);
LABEL_428:
          v1651 = *(unsigned int *)(a1 + 8628);
        }
        ++v1652;
        ++v1653;
      }
      while (v1652 < v1651);
    }
    v1765 = *(unsigned int *)(a1 + 2436);
    if ((_DWORD)v1765)
    {
      v1766 = 0;
      v1767 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1768 = *(_QWORD *)(*(_QWORD *)(a1 + 2544) + 8 * v1766);
        if (v1768)
        {
          v1769 = *(_QWORD *)(a1 + 2512);
          v1770 = (*(_DWORD *)(a1 + 2536) * v1766);
          v1771 = (unsigned int *)(v1769 + 16 * (v1768 + v1770));
          v1772 = (unsigned int *)(v1769 + 16 * v1770);
          do
          {
            v1808 = *v1767;
            v1809 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1772);
            v1810 = *(_QWORD *)(a1 + 2440) + 8 * *((_QWORD *)v1772 + 1);
            v1811 = *v6;
            v1812 = *(_QWORD *)(a1 + 20040);
            if (*v1767 < v1809)
            {
              v1773 = *(int64x2_t *)v1810;
              v1774 = (int64x2_t *)(v1812 + 8 * (v1809 + (_DWORD)v1811 * v1808));
              v1775 = *(int64x2_t *)(v1810 + 32);
              v1776 = *(int64x2_t *)(v1810 + 48);
              v1777 = *(int64x2_t *)(v1810 + 64);
              v1778 = *(int64x2_t *)(v1810 + 80);
              v1780 = *(int8x16_t *)(v1810 + 96);
              v1779 = *(int8x16_t *)(v1810 + 112);
              v1781 = *(int8x16_t *)(v1810 + 128);
              v1782 = *(int8x16_t *)(v1810 + 144);
              v1783 = vextq_s8(v1781, v1781, 8uLL).u64[0];
              v1784 = vextq_s8(v1779, v1779, 8uLL).u64[0];
              v1785 = vextq_s8(v1780, v1780, 8uLL).u64[0];
              v1786 = *(int8x16_t *)(v1810 + 160);
              v1787 = *(int8x16_t *)(v1810 + 176);
              v1788 = vextq_s8(v1787, v1787, 8uLL).u64[0];
              v1789 = vextq_s8(v1786, v1786, 8uLL).u64[0];
              v1790 = vextq_s8(v1782, v1782, 8uLL).u64[0];
              v1792 = *(int8x16_t *)(v1810 + 192);
              v1791 = *(int8x16_t *)(v1810 + 208);
              v1794 = *(int8x16_t *)(v1810 + 224);
              v1793 = *(int8x16_t *)(v1810 + 240);
              v1795 = vextq_s8(v1794, v1794, 8uLL).u64[0];
              v1796 = vextq_s8(v1791, v1791, 8uLL).u64[0];
              v1797 = vextq_s8(v1792, v1792, 8uLL).u64[0];
              v1798 = *(int8x16_t *)(v1810 + 256);
              v1799 = *(int8x16_t *)(v1810 + 272);
              v1800 = vextq_s8(v1799, v1799, 8uLL).u64[0];
              v1801 = vextq_s8(v1798, v1798, 8uLL).u64[0];
              v1802 = vextq_s8(v1793, v1793, 8uLL).u64[0];
              v1774[1] = *(int64x2_t *)(v1810 + 16);
              v1774[2] = v1775;
              *v1774 = v1773;
              v1803 = (int64x2_t *)((char *)v1774 + 8 * v1811);
              v1803[1] = v1777;
            }
            else
            {
              v1774 = (int64x2_t *)(v1812 + 8 * (v1808 + (_DWORD)v1811 * v1809));
              v1813 = *(int64x2_t *)(v1810 + 16);
              v1814 = *(int64x2_t *)(v1810 + 64);
              v1815 = *(int64x2_t *)(v1810 + 80);
              v1817 = *(int64x2_t *)(v1810 + 32);
              v1816 = *(int64x2_t *)(v1810 + 48);
              v1818 = *(int64x2_t *)(v1810 + 96);
              v1819 = *(int64x2_t *)(v1810 + 112);
              v1820 = *(int64x2_t *)(v1810 + 128);
              v1822 = *(int64x2_t *)(v1810 + 192);
              v1821 = *(int64x2_t *)(v1810 + 208);
              v1823 = *(int64x2_t *)(v1810 + 224);
              v1824 = vzip1q_s64(*(int64x2_t *)v1810, v1816);
              v1825 = vzip1q_s64(v1818, *(int64x2_t *)(v1810 + 144));
              v1826 = vzip1q_s64(v1822, *(int64x2_t *)(v1810 + 240));
              v1827.i64[0] = vdupq_laneq_s64(v1818, 1).u64[0];
              v1827.i64[1] = *(_QWORD *)(v1810 + 152);
              v1776 = vzip2q_s64(*(int64x2_t *)v1810, v1816);
              v1778.i64[0] = vdupq_laneq_s64(v1822, 1).u64[0];
              v1778.i64[1] = *(_QWORD *)(v1810 + 248);
              v1780 = (int8x16_t)vzip1q_s64(v1813, v1814);
              v1779 = (int8x16_t)vzip1q_s64(v1819, *(int64x2_t *)(v1810 + 160));
              v1781 = (int8x16_t)vzip1q_s64(v1821, *(int64x2_t *)(v1810 + 256));
              v1783 = vextq_s8(v1781, v1781, 8uLL).u64[0];
              v1784 = vextq_s8(v1779, v1779, 8uLL).u64[0];
              v1785 = vextq_s8(v1780, v1780, 8uLL).u64[0];
              v1782 = (int8x16_t)vzip2q_s64(v1813, v1814);
              v1786.i64[0] = vdupq_laneq_s64(v1819, 1).u64[0];
              v1786.i64[1] = *(_QWORD *)(v1810 + 168);
              v1787.i64[0] = vdupq_laneq_s64(v1821, 1).u64[0];
              v1787.i64[1] = *(_QWORD *)(v1810 + 264);
              v1790 = vextq_s8(v1782, v1782, 8uLL).u64[0];
              v1788 = vextq_s8(v1787, v1787, 8uLL).u64[0];
              v1789 = vextq_s8(v1786, v1786, 8uLL).u64[0];
              v1792 = (int8x16_t)vzip1q_s64(v1817, v1815);
              v1791 = (int8x16_t)vzip1q_s64(v1820, *(int64x2_t *)(v1810 + 176));
              v1794 = (int8x16_t)vzip1q_s64(v1823, *(int64x2_t *)(v1810 + 272));
              v1795 = vextq_s8(v1794, v1794, 8uLL).u64[0];
              v1796 = vextq_s8(v1791, v1791, 8uLL).u64[0];
              v1797 = vextq_s8(v1792, v1792, 8uLL).u64[0];
              v1793 = (int8x16_t)vzip2q_s64(v1817, v1815);
              v1798.i64[0] = vdupq_laneq_s64(v1820, 1).u64[0];
              v1798.i64[1] = *(_QWORD *)(v1810 + 184);
              v1799.i64[0] = vdupq_laneq_s64(v1823, 1).u64[0];
              v1799.i64[1] = *(_QWORD *)(v1810 + 280);
              v1802 = vextq_s8(v1793, v1793, 8uLL).u64[0];
              v1800 = vextq_s8(v1799, v1799, 8uLL).u64[0];
              v1801 = vextq_s8(v1798, v1798, 8uLL).u64[0];
              v1774[1] = v1825;
              v1774[2] = v1826;
              *v1774 = v1824;
              v1803 = (int64x2_t *)((char *)v1774 + 8 * v1811);
              v1803[1] = v1827;
            }
            v1803[2] = v1778;
            *v1803 = v1776;
            v1780.i64[1] = v1785;
            v1779.i64[1] = v1784;
            v1804 = (int8x16_t *)&v1774[v1811];
            *v1804 = v1780;
            v1804[1] = v1779;
            v1781.i64[1] = v1783;
            v1804[2] = v1781;
            v1787.i64[1] = v1788;
            v1805 = (int8x16_t *)((char *)v1774 + 24 * v1811);
            v1786.i64[1] = v1789;
            v1782.i64[1] = v1790;
            v1805[1] = v1786;
            v1805[2] = v1787;
            *v1805 = v1782;
            v1806 = (int8x16_t *)&v1774[2 * v1811];
            v1794.i64[1] = v1795;
            v1791.i64[1] = v1796;
            v1792.i64[1] = v1797;
            v1806[1] = v1791;
            v1806[2] = v1794;
            *v1806 = v1792;
            v1807 = (int8x16_t *)((char *)v1774 + 40 * v1811);
            v1799.i64[1] = v1800;
            v1798.i64[1] = v1801;
            v1793.i64[1] = v1802;
            v1772 += 4;
            v1807[1] = v1798;
            v1807[2] = v1799;
            *v1807 = v1793;
          }
          while (v1772 != v1771);
          v1765 = *(unsigned int *)(a1 + 2436);
        }
        ++v1766;
        ++v1767;
      }
      while (v1766 < v1765);
    }
    v1849 = *(unsigned int *)(a1 + 3444);
    if ((_DWORD)v1849)
    {
      v1850 = 0;
      v1851 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1852 = *(_QWORD *)(*(_QWORD *)(a1 + 3552) + 8 * v1850);
        if (v1852)
        {
          v1853 = *(_QWORD *)(a1 + 3520);
          v1854 = (*(_DWORD *)(a1 + 3544) * v1850);
          v1855 = (unsigned int *)(v1853 + 16 * (v1852 + v1854));
          v1856 = (unsigned int *)(v1853 + 16 * v1854);
          do
          {
            while (1)
            {
              v1892 = *v1851;
              v1893 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1856);
              v1894 = *(_QWORD *)(a1 + 3448) + 8 * *((_QWORD *)v1856 + 1);
              v1895 = *v6;
              v1896 = *(_QWORD *)(a1 + 20040);
              if (*v1851 >= v1893)
                break;
              v1857 = *(int64x2_t *)v1894;
              v1858 = (int64x2_t *)(v1896 + 8 * (v1893 + (_DWORD)v1895 * v1892));
              v1859 = *(int64x2_t *)(v1894 + 32);
              v1860 = *(_OWORD *)(v1894 + 48);
              v1861 = *(_OWORD *)(v1894 + 64);
              v1862 = *(_OWORD *)(v1894 + 80);
              v1863 = *(int64x2_t *)(v1894 + 96);
              v1864 = *(int64x2_t *)(v1894 + 112);
              v1865 = *(int64x2_t *)(v1894 + 128);
              v1866 = *(_OWORD *)(v1894 + 144);
              v1867 = *(_OWORD *)(v1894 + 160);
              v1868 = *(_OWORD *)(v1894 + 176);
              v1869 = *(int64x2_t *)(v1894 + 192);
              v1870 = *(int64x2_t *)(v1894 + 208);
              v1871 = *(int64x2_t *)(v1894 + 224);
              v1872 = *(_OWORD *)(v1894 + 240);
              v1873 = *(_OWORD *)(v1894 + 256);
              v1874 = *(_OWORD *)(v1894 + 272);
              v1875 = *(int64x2_t *)(v1894 + 288);
              v1876 = *(int64x2_t *)(v1894 + 304);
              v1877 = *(int64x2_t *)(v1894 + 320);
              v1878 = *(_OWORD *)(v1894 + 336);
              v1879 = *(_OWORD *)(v1894 + 352);
              v1880 = *(_OWORD *)(v1894 + 368);
              v1881 = *(int64x2_t *)(v1894 + 384);
              v1882 = *(int64x2_t *)(v1894 + 400);
              v1883 = *(int64x2_t *)(v1894 + 416);
              v1858[1] = *(int64x2_t *)(v1894 + 16);
              v1858[2] = v1859;
              *v1858 = v1857;
              v1884 = &v1858->i8[8 * v1895];
              *((_OWORD *)v1884 + 1) = v1861;
              *((_OWORD *)v1884 + 2) = v1862;
              *(_OWORD *)v1884 = v1860;
              v1885 = &v1858[v1895];
              v1885[1] = v1864;
              v1885[2] = v1865;
              *v1885 = v1863;
              v1886 = &v1858->i8[24 * v1895];
              *((_OWORD *)v1886 + 1) = v1867;
              *((_OWORD *)v1886 + 2) = v1868;
              *(_OWORD *)v1886 = v1866;
              v1887 = &v1858[2 * v1895];
              v1887[1] = v1870;
              v1887[2] = v1871;
              *v1887 = v1869;
              v1888 = &v1858->i8[40 * v1895];
              *((_OWORD *)v1888 + 1) = v1873;
              *((_OWORD *)v1888 + 2) = v1874;
              *(_OWORD *)v1888 = v1872;
              v1889 = &v1858[3 * v1895];
              v1889[1] = v1876;
              v1889[2] = v1877;
              *v1889 = v1875;
              v1890 = &v1858->i8[56 * v1895];
              *((_OWORD *)v1890 + 1) = v1879;
              *((_OWORD *)v1890 + 2) = v1880;
              *(_OWORD *)v1890 = v1878;
              v1891 = &v1858[4 * v1895];
              v1891[1] = v1882;
              v1891[2] = v1883;
              *v1891 = v1881;
              v1856 += 4;
              if (v1856 == v1855)
                goto LABEL_468;
            }
            v1897 = *(int64x2_t *)(v1894 + 16);
            v1898 = (int64x2_t *)(v1896 + 8 * (v1892 + (_DWORD)v1895 * v1893));
            v1900 = *(int64x2_t *)(v1894 + 64);
            v1899 = *(int64x2_t *)(v1894 + 80);
            v1901 = *(int64x2_t *)(v1894 + 32);
            v1902 = *(int64x2_t *)(v1894 + 48);
            v1904 = *(int64x2_t *)(v1894 + 96);
            v1903 = *(int64x2_t *)(v1894 + 112);
            v1906 = *(int64x2_t *)(v1894 + 160);
            v1905 = *(int64x2_t *)(v1894 + 176);
            v1907 = *(int64x2_t *)(v1894 + 128);
            v1908 = *(int64x2_t *)(v1894 + 144);
            v1910 = *(int64x2_t *)(v1894 + 192);
            v1909 = *(int64x2_t *)(v1894 + 208);
            v1912 = *(int64x2_t *)(v1894 + 256);
            v1911 = *(int64x2_t *)(v1894 + 272);
            v1913 = *(int64x2_t *)(v1894 + 224);
            v1914 = *(int64x2_t *)(v1894 + 240);
            v1916 = *(int64x2_t *)(v1894 + 288);
            v1915 = *(int64x2_t *)(v1894 + 304);
            v1918 = *(int64x2_t *)(v1894 + 352);
            v1917 = *(int64x2_t *)(v1894 + 368);
            v1920 = *(int64x2_t *)(v1894 + 320);
            v1919 = *(int64x2_t *)(v1894 + 336);
            v1922 = *(_OWORD *)(v1894 + 400);
            v1921 = *(_OWORD *)(v1894 + 416);
            v1923 = *(_OWORD *)(v1894 + 384);
            v1924 = vzip1q_s64(*(int64x2_t *)v1894, v1902);
            v1925 = vzip2q_s64(*(int64x2_t *)v1894, v1902);
            v1898[2] = vzip1q_s64(v1910, v1914);
            v1898[3] = vzip1q_s64(v1916, v1919);
            v1898[4].i64[0] = v1923;
            *v1898 = v1924;
            v1898[1] = vzip1q_s64(v1904, v1908);
            v1926 = (int64x2_t *)((char *)v1898 + 8 * v1895);
            v1926[2] = vzip2q_s64(v1910, v1914);
            v1926[3] = vzip2q_s64(v1916, v1919);
            *v1926 = v1925;
            v1926[1] = vzip2q_s64(v1904, v1908);
            v1926[4].i64[0] = *((_QWORD *)&v1923 + 1);
            v1927 = &v1898[v1895];
            v1927[4].i64[0] = v1922;
            v1927[2] = vzip1q_s64(v1909, v1912);
            v1927[3] = vzip1q_s64(v1915, v1918);
            *v1927 = vzip1q_s64(v1897, v1900);
            v1927[1] = vzip1q_s64(v1903, v1906);
            v1928 = (int64x2_t *)((char *)v1898 + 24 * v1895);
            v1928[4].i64[0] = *((_QWORD *)&v1922 + 1);
            v1928[2] = vzip2q_s64(v1909, v1912);
            v1928[3] = vzip2q_s64(v1915, v1918);
            *v1928 = vzip2q_s64(v1897, v1900);
            v1928[1] = vzip2q_s64(v1903, v1906);
            v1929 = &v1898[2 * v1895];
            v1929[4].i64[0] = v1921;
            v1929[2] = vzip1q_s64(v1913, v1911);
            v1929[3] = vzip1q_s64(v1920, v1917);
            *v1929 = vzip1q_s64(v1901, v1899);
            v1929[1] = vzip1q_s64(v1907, v1905);
            v1930 = (int64x2_t *)((char *)v1898 + 40 * v1895);
            v1930[4].i64[0] = *((_QWORD *)&v1921 + 1);
            v1930[2] = vzip2q_s64(v1913, v1911);
            v1930[3] = vzip2q_s64(v1920, v1917);
            *v1930 = vzip2q_s64(v1901, v1899);
            v1930[1] = vzip2q_s64(v1907, v1905);
            v1856 += 4;
          }
          while (v1856 != v1855);
LABEL_468:
          v1849 = *(unsigned int *)(a1 + 3444);
        }
        ++v1850;
        ++v1851;
      }
      while (v1850 < v1849);
    }
    v1994 = *(unsigned int *)(a1 + 4452);
    if ((_DWORD)v1994)
    {
      v1995 = 0;
      v1996 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1997 = *(_QWORD *)(*(_QWORD *)(a1 + 4560) + 8 * v1995);
        if (v1997)
        {
          v1998 = *(_QWORD *)(a1 + 4528);
          v1999 = (*(_DWORD *)(a1 + 4552) * v1995);
          v2000 = (unsigned int *)(v1998 + 16 * (v1997 + v1999));
          v2001 = (unsigned int *)(v1998 + 16 * v1999);
          do
          {
            while (1)
            {
              v2003 = *v1996;
              v2004 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2001);
              v2005 = (int8x16_t *)(*(_QWORD *)(a1 + 4456) + 8 * *((_QWORD *)v2001 + 1));
              v2006 = *v6;
              v2007 = *(_QWORD *)(a1 + 20040);
              v2009 = v2005[1];
              v2008 = v2005[2];
              v2010 = *v2005;
              v2011 = vextq_s8(v2008, v2008, 8uLL).u64[0];
              v2012 = vextq_s8(v2009, v2009, 8uLL).u64[0];
              v2013 = vextq_s8(v2010, v2010, 8uLL).u64[0];
              if (*v1996 >= v2004)
                break;
              v2010.i64[1] = v2013;
              v2009.i64[1] = v2012;
              v2002 = (int8x16_t *)(v2007 + 8 * (v2004 + (_DWORD)v2006 * v2003));
              *v2002 = v2010;
              v2002[1] = v2009;
              v2008.i64[1] = v2011;
              v2002[2] = v2008;
              v2001 += 4;
              if (v2001 == v2000)
                goto LABEL_488;
            }
            v2014 = (_QWORD *)(v2007 + 8 * (v2003 + (_DWORD)v2006 * v2004));
            *v2014 = v2010.i64[0];
            v2014[v2006] = v2013;
            v2014[2 * v2006] = v2009.i64[0];
            v2014[3 * v2006] = v2012;
            v2014[4 * v2006] = v2008.i64[0];
            v2014[5 * v2006] = v2011;
            v2001 += 4;
          }
          while (v2001 != v2000);
LABEL_488:
          v1994 = *(unsigned int *)(a1 + 4452);
        }
        ++v1995;
        ++v1996;
      }
      while (v1995 < v1994);
    }
    v2061 = *(unsigned int *)(a1 + 5460);
    if ((_DWORD)v2061)
    {
      v2062 = 0;
      v2063 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2064 = *(_QWORD *)(*(_QWORD *)(a1 + 5568) + 8 * v2062);
        if (v2064)
        {
          v2065 = *(_QWORD *)(a1 + 5536);
          v2066 = (*(_DWORD *)(a1 + 5560) * v2062);
          v2067 = (unsigned int *)(v2065 + 16 * (v2064 + v2066));
          v2068 = (unsigned int *)(v2065 + 16 * v2066);
          do
          {
            v2104 = *v2063;
            v2105 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2068);
            v2106 = *(_QWORD *)(a1 + 5464) + 8 * *((_QWORD *)v2068 + 1);
            v2107 = *v6;
            v2108 = *(_QWORD *)(a1 + 20040);
            if (*v2063 < v2105)
            {
              v2069 = *(int64x2_t *)v2106;
              v2070 = (int64x2_t *)(v2108 + 8 * (v2105 + (_DWORD)v2107 * v2104));
              v2071 = *(int64x2_t *)(v2106 + 32);
              v2072 = *(int64x2_t *)(v2106 + 48);
              v2073 = *(int64x2_t *)(v2106 + 64);
              v2074 = *(int64x2_t *)(v2106 + 80);
              v2076 = *(int8x16_t *)(v2106 + 96);
              v2075 = *(int8x16_t *)(v2106 + 112);
              v2077 = *(int8x16_t *)(v2106 + 128);
              v2078 = *(int8x16_t *)(v2106 + 144);
              v2079 = vextq_s8(v2077, v2077, 8uLL).u64[0];
              v2080 = vextq_s8(v2075, v2075, 8uLL).u64[0];
              v2081 = vextq_s8(v2076, v2076, 8uLL).u64[0];
              v2082 = *(int8x16_t *)(v2106 + 160);
              v2083 = *(int8x16_t *)(v2106 + 176);
              v2084 = vextq_s8(v2083, v2083, 8uLL).u64[0];
              v2085 = vextq_s8(v2082, v2082, 8uLL).u64[0];
              v2086 = vextq_s8(v2078, v2078, 8uLL).u64[0];
              v2088 = *(int8x16_t *)(v2106 + 192);
              v2087 = *(int8x16_t *)(v2106 + 208);
              v2090 = *(int8x16_t *)(v2106 + 224);
              v2089 = *(int8x16_t *)(v2106 + 240);
              v2091 = vextq_s8(v2090, v2090, 8uLL).u64[0];
              v2092 = vextq_s8(v2087, v2087, 8uLL).u64[0];
              v2093 = vextq_s8(v2088, v2088, 8uLL).u64[0];
              v2094 = *(int8x16_t *)(v2106 + 256);
              v2095 = *(int8x16_t *)(v2106 + 272);
              v2096 = vextq_s8(v2095, v2095, 8uLL).u64[0];
              v2097 = vextq_s8(v2094, v2094, 8uLL).u64[0];
              v2098 = vextq_s8(v2089, v2089, 8uLL).u64[0];
              v2070[1] = *(int64x2_t *)(v2106 + 16);
              v2070[2] = v2071;
              *v2070 = v2069;
              v2099 = (int64x2_t *)((char *)v2070 + 8 * v2107);
              v2099[1] = v2073;
            }
            else
            {
              v2070 = (int64x2_t *)(v2108 + 8 * (v2104 + (_DWORD)v2107 * v2105));
              v2109 = *(int64x2_t *)(v2106 + 16);
              v2110 = *(int64x2_t *)(v2106 + 64);
              v2111 = *(int64x2_t *)(v2106 + 80);
              v2113 = *(int64x2_t *)(v2106 + 32);
              v2112 = *(int64x2_t *)(v2106 + 48);
              v2114 = *(int64x2_t *)(v2106 + 96);
              v2115 = *(int64x2_t *)(v2106 + 112);
              v2116 = *(int64x2_t *)(v2106 + 128);
              v2118 = *(int64x2_t *)(v2106 + 192);
              v2117 = *(int64x2_t *)(v2106 + 208);
              v2119 = *(int64x2_t *)(v2106 + 224);
              v2120 = vzip1q_s64(*(int64x2_t *)v2106, v2112);
              v2121 = vzip1q_s64(v2114, *(int64x2_t *)(v2106 + 144));
              v2122 = vzip1q_s64(v2118, *(int64x2_t *)(v2106 + 240));
              v2123.i64[0] = vdupq_laneq_s64(v2114, 1).u64[0];
              v2123.i64[1] = *(_QWORD *)(v2106 + 152);
              v2072 = vzip2q_s64(*(int64x2_t *)v2106, v2112);
              v2074.i64[0] = vdupq_laneq_s64(v2118, 1).u64[0];
              v2074.i64[1] = *(_QWORD *)(v2106 + 248);
              v2076 = (int8x16_t)vzip1q_s64(v2109, v2110);
              v2075 = (int8x16_t)vzip1q_s64(v2115, *(int64x2_t *)(v2106 + 160));
              v2077 = (int8x16_t)vzip1q_s64(v2117, *(int64x2_t *)(v2106 + 256));
              v2079 = vextq_s8(v2077, v2077, 8uLL).u64[0];
              v2080 = vextq_s8(v2075, v2075, 8uLL).u64[0];
              v2081 = vextq_s8(v2076, v2076, 8uLL).u64[0];
              v2078 = (int8x16_t)vzip2q_s64(v2109, v2110);
              v2082.i64[0] = vdupq_laneq_s64(v2115, 1).u64[0];
              v2082.i64[1] = *(_QWORD *)(v2106 + 168);
              v2083.i64[0] = vdupq_laneq_s64(v2117, 1).u64[0];
              v2083.i64[1] = *(_QWORD *)(v2106 + 264);
              v2086 = vextq_s8(v2078, v2078, 8uLL).u64[0];
              v2084 = vextq_s8(v2083, v2083, 8uLL).u64[0];
              v2085 = vextq_s8(v2082, v2082, 8uLL).u64[0];
              v2088 = (int8x16_t)vzip1q_s64(v2113, v2111);
              v2087 = (int8x16_t)vzip1q_s64(v2116, *(int64x2_t *)(v2106 + 176));
              v2090 = (int8x16_t)vzip1q_s64(v2119, *(int64x2_t *)(v2106 + 272));
              v2091 = vextq_s8(v2090, v2090, 8uLL).u64[0];
              v2092 = vextq_s8(v2087, v2087, 8uLL).u64[0];
              v2093 = vextq_s8(v2088, v2088, 8uLL).u64[0];
              v2089 = (int8x16_t)vzip2q_s64(v2113, v2111);
              v2094.i64[0] = vdupq_laneq_s64(v2116, 1).u64[0];
              v2094.i64[1] = *(_QWORD *)(v2106 + 184);
              v2095.i64[0] = vdupq_laneq_s64(v2119, 1).u64[0];
              v2095.i64[1] = *(_QWORD *)(v2106 + 280);
              v2098 = vextq_s8(v2089, v2089, 8uLL).u64[0];
              v2096 = vextq_s8(v2095, v2095, 8uLL).u64[0];
              v2097 = vextq_s8(v2094, v2094, 8uLL).u64[0];
              v2070[1] = v2121;
              v2070[2] = v2122;
              *v2070 = v2120;
              v2099 = (int64x2_t *)((char *)v2070 + 8 * v2107);
              v2099[1] = v2123;
            }
            v2099[2] = v2074;
            *v2099 = v2072;
            v2076.i64[1] = v2081;
            v2075.i64[1] = v2080;
            v2100 = (int8x16_t *)&v2070[v2107];
            *v2100 = v2076;
            v2100[1] = v2075;
            v2077.i64[1] = v2079;
            v2100[2] = v2077;
            v2083.i64[1] = v2084;
            v2101 = (int8x16_t *)((char *)v2070 + 24 * v2107);
            v2082.i64[1] = v2085;
            v2078.i64[1] = v2086;
            v2101[1] = v2082;
            v2101[2] = v2083;
            *v2101 = v2078;
            v2102 = (int8x16_t *)&v2070[2 * v2107];
            v2090.i64[1] = v2091;
            v2087.i64[1] = v2092;
            v2088.i64[1] = v2093;
            v2102[1] = v2087;
            v2102[2] = v2090;
            *v2102 = v2088;
            v2103 = (int8x16_t *)((char *)v2070 + 40 * v2107);
            v2095.i64[1] = v2096;
            v2094.i64[1] = v2097;
            v2089.i64[1] = v2098;
            v2068 += 4;
            v2103[1] = v2094;
            v2103[2] = v2095;
            *v2103 = v2089;
          }
          while (v2068 != v2067);
          v2061 = *(unsigned int *)(a1 + 5460);
        }
        ++v2062;
        ++v2063;
      }
      while (v2062 < v2061);
    }
    v2170 = *(unsigned int *)(a1 + 6468);
    if ((_DWORD)v2170)
    {
      v2171 = 0;
      v2172 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2173 = *(_QWORD *)(*(_QWORD *)(a1 + 6576) + 8 * v2171);
        if (v2173)
        {
          v2174 = *(_QWORD *)(a1 + 6544);
          v2175 = (*(_DWORD *)(a1 + 6568) * v2171);
          v2176 = (unsigned int *)(v2174 + 16 * (v2173 + v2175));
          v2177 = (unsigned int *)(v2174 + 16 * v2175);
          do
          {
            while (1)
            {
              v2193 = *v2172;
              v2194 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2177);
              v2195 = *(_QWORD *)(a1 + 6472) + 8 * *((_QWORD *)v2177 + 1);
              v2196 = *v6;
              v2197 = *(_QWORD *)(a1 + 20040);
              if (*v2172 >= v2194)
                break;
              v2178 = *(int64x2_t *)v2195;
              v2179 = (int64x2_t *)(v2197 + 8 * (v2194 + (_DWORD)v2196 * v2193));
              v2180 = *(int64x2_t *)(v2195 + 32);
              v2181 = *(_OWORD *)(v2195 + 48);
              v2182 = *(_OWORD *)(v2195 + 64);
              v2183 = *(_OWORD *)(v2195 + 80);
              v2184 = *(int64x2_t *)(v2195 + 96);
              v2185 = *(int64x2_t *)(v2195 + 112);
              v2186 = *(int64x2_t *)(v2195 + 128);
              v2187 = *(_OWORD *)(v2195 + 144);
              v2188 = *(_OWORD *)(v2195 + 160);
              v2189 = *(_OWORD *)(v2195 + 176);
              v2179[1] = *(int64x2_t *)(v2195 + 16);
              v2179[2] = v2180;
              *v2179 = v2178;
              v2190 = &v2179->i8[8 * v2196];
              *((_OWORD *)v2190 + 1) = v2182;
              *((_OWORD *)v2190 + 2) = v2183;
              *(_OWORD *)v2190 = v2181;
              v2191 = &v2179[v2196];
              v2191[1] = v2185;
              v2191[2] = v2186;
              *v2191 = v2184;
              v2192 = &v2179->i8[24 * v2196];
              *((_OWORD *)v2192 + 1) = v2188;
              *((_OWORD *)v2192 + 2) = v2189;
              *(_OWORD *)v2192 = v2187;
              v2177 += 4;
              if (v2177 == v2176)
                goto LABEL_528;
            }
            v2198 = *(int64x2_t *)(v2195 + 16);
            v2199 = (int64x2_t *)(v2197 + 8 * (v2193 + (_DWORD)v2196 * v2194));
            v2201 = *(int64x2_t *)(v2195 + 64);
            v2200 = *(int64x2_t *)(v2195 + 80);
            v2202 = *(int64x2_t *)(v2195 + 32);
            v2203 = *(int64x2_t *)(v2195 + 48);
            v2205 = *(int64x2_t *)(v2195 + 96);
            v2204 = *(int64x2_t *)(v2195 + 112);
            v2207 = *(int64x2_t *)(v2195 + 160);
            v2206 = *(int64x2_t *)(v2195 + 176);
            v2208 = *(int64x2_t *)(v2195 + 128);
            v2209 = *(int64x2_t *)(v2195 + 144);
            v2210 = vzip2q_s64(*(int64x2_t *)v2195, v2203);
            *v2199 = vzip1q_s64(*(int64x2_t *)v2195, v2203);
            v2199[1] = vzip1q_s64(v2205, v2209);
            v2211 = (int64x2_t *)((char *)v2199 + 8 * v2196);
            *v2211 = v2210;
            v2211[1] = vzip2q_s64(v2205, v2209);
            v2212 = &v2199[v2196];
            *v2212 = vzip1q_s64(v2198, v2201);
            v2212[1] = vzip1q_s64(v2204, v2207);
            v2213 = (int64x2_t *)((char *)v2199 + 24 * v2196);
            *v2213 = vzip2q_s64(v2198, v2201);
            v2213[1] = vzip2q_s64(v2204, v2207);
            v2214 = &v2199[2 * v2196];
            *v2214 = vzip1q_s64(v2202, v2200);
            v2214[1] = vzip1q_s64(v2208, v2206);
            v2215 = (int64x2_t *)((char *)v2199 + 40 * v2196);
            *v2215 = vzip2q_s64(v2202, v2200);
            v2215[1] = vzip2q_s64(v2208, v2206);
            v2177 += 4;
          }
          while (v2177 != v2176);
LABEL_528:
          v2170 = *(unsigned int *)(a1 + 6468);
        }
        ++v2171;
        ++v2172;
      }
      while (v2171 < v2170);
    }
    v2256 = *(unsigned int *)(a1 + 7476);
    if ((_DWORD)v2256)
    {
      v2257 = 0;
      v2258 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2259 = *(_QWORD *)(*(_QWORD *)(a1 + 7584) + 8 * v2257);
        if (v2259)
        {
          v2260 = *(_QWORD *)(a1 + 7552);
          v2261 = (*(_DWORD *)(a1 + 7576) * v2257);
          v2262 = (unsigned int *)(v2260 + 16 * (v2259 + v2261));
          v2263 = (unsigned int *)(v2260 + 16 * v2261);
          do
          {
            while (1)
            {
              v2279 = *v2258;
              v2280 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2263);
              v2281 = *(_QWORD *)(a1 + 7480) + 8 * *((_QWORD *)v2263 + 1);
              v2282 = *v6;
              v2283 = *(_QWORD *)(a1 + 20040);
              if (*v2258 >= v2280)
                break;
              v2264 = *(int64x2_t *)v2281;
              v2265 = (int64x2_t *)(v2283 + 8 * (v2280 + (_DWORD)v2282 * v2279));
              v2266 = *(int64x2_t *)(v2281 + 32);
              v2267 = *(_OWORD *)(v2281 + 48);
              v2268 = *(_OWORD *)(v2281 + 64);
              v2269 = *(_OWORD *)(v2281 + 80);
              v2270 = *(int64x2_t *)(v2281 + 96);
              v2271 = *(int64x2_t *)(v2281 + 112);
              v2272 = *(int64x2_t *)(v2281 + 128);
              v2273 = *(_OWORD *)(v2281 + 144);
              v2274 = *(_OWORD *)(v2281 + 160);
              v2275 = *(_OWORD *)(v2281 + 176);
              v2265[1] = *(int64x2_t *)(v2281 + 16);
              v2265[2] = v2266;
              *v2265 = v2264;
              v2276 = &v2265->i8[8 * v2282];
              *((_OWORD *)v2276 + 1) = v2268;
              *((_OWORD *)v2276 + 2) = v2269;
              *(_OWORD *)v2276 = v2267;
              v2277 = &v2265[v2282];
              v2277[1] = v2271;
              v2277[2] = v2272;
              *v2277 = v2270;
              v2278 = &v2265->i8[24 * v2282];
              *((_OWORD *)v2278 + 1) = v2274;
              *((_OWORD *)v2278 + 2) = v2275;
              *(_OWORD *)v2278 = v2273;
              v2263 += 4;
              if (v2263 == v2262)
                goto LABEL_548;
            }
            v2284 = *(int64x2_t *)(v2281 + 16);
            v2285 = (int64x2_t *)(v2283 + 8 * (v2279 + (_DWORD)v2282 * v2280));
            v2287 = *(int64x2_t *)(v2281 + 64);
            v2286 = *(int64x2_t *)(v2281 + 80);
            v2288 = *(int64x2_t *)(v2281 + 32);
            v2289 = *(int64x2_t *)(v2281 + 48);
            v2291 = *(int64x2_t *)(v2281 + 96);
            v2290 = *(int64x2_t *)(v2281 + 112);
            v2293 = *(int64x2_t *)(v2281 + 160);
            v2292 = *(int64x2_t *)(v2281 + 176);
            v2294 = *(int64x2_t *)(v2281 + 128);
            v2295 = *(int64x2_t *)(v2281 + 144);
            v2296 = vzip2q_s64(*(int64x2_t *)v2281, v2289);
            *v2285 = vzip1q_s64(*(int64x2_t *)v2281, v2289);
            v2285[1] = vzip1q_s64(v2291, v2295);
            v2297 = (int64x2_t *)((char *)v2285 + 8 * v2282);
            *v2297 = v2296;
            v2297[1] = vzip2q_s64(v2291, v2295);
            v2298 = &v2285[v2282];
            *v2298 = vzip1q_s64(v2284, v2287);
            v2298[1] = vzip1q_s64(v2290, v2293);
            v2299 = (int64x2_t *)((char *)v2285 + 24 * v2282);
            *v2299 = vzip2q_s64(v2284, v2287);
            v2299[1] = vzip2q_s64(v2290, v2293);
            v2300 = &v2285[2 * v2282];
            *v2300 = vzip1q_s64(v2288, v2286);
            v2300[1] = vzip1q_s64(v2294, v2292);
            v2301 = (int64x2_t *)((char *)v2285 + 40 * v2282);
            *v2301 = vzip2q_s64(v2288, v2286);
            v2301[1] = vzip2q_s64(v2294, v2292);
            v2263 += 4;
          }
          while (v2263 != v2262);
LABEL_548:
          v2256 = *(unsigned int *)(a1 + 7476);
        }
        ++v2257;
        ++v2258;
      }
      while (v2257 < v2256);
    }
    v2324 = *(unsigned int *)(a1 + 8484);
    if ((_DWORD)v2324)
    {
      v2325 = 0;
      v2326 = *(unsigned int **)(a1 + 10664);
      do
      {
        v2327 = *(_QWORD *)(*(_QWORD *)(a1 + 8592) + 8 * v2325);
        if (v2327)
        {
          v2328 = *(_QWORD *)(a1 + 8560);
          v2329 = (*(_DWORD *)(a1 + 8584) * v2325);
          v2330 = (unsigned int *)(v2328 + 16 * (v2327 + v2329));
          v2331 = (unsigned int *)(v2328 + 16 * v2329);
          do
          {
            while (1)
            {
              v2343 = *v2326;
              v2344 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2331);
              v2345 = *(_QWORD *)(a1 + 8488) + 8 * *((_QWORD *)v2331 + 1);
              v2346 = *v6;
              v2347 = *(_QWORD *)(a1 + 20040);
              if (*v2326 >= v2344)
                break;
              v2332 = *(int64x2_t *)v2345;
              v2333 = (int64x2_t *)(v2347 + 8 * (v2344 + (_DWORD)v2346 * v2343));
              v2334 = *(int64x2_t *)(v2345 + 32);
              v2335 = *(_OWORD *)(v2345 + 48);
              v2336 = *(_OWORD *)(v2345 + 64);
              v2337 = *(_OWORD *)(v2345 + 80);
              v2338 = *(int64x2_t *)(v2345 + 96);
              v2339 = *(int64x2_t *)(v2345 + 112);
              v2340 = *(int64x2_t *)(v2345 + 128);
              v2333[1] = *(int64x2_t *)(v2345 + 16);
              v2333[2] = v2334;
              *v2333 = v2332;
              v2341 = &v2333->i8[8 * v2346];
              *((_OWORD *)v2341 + 1) = v2336;
              *((_OWORD *)v2341 + 2) = v2337;
              *(_OWORD *)v2341 = v2335;
              v2342 = &v2333[v2346];
              v2342[1] = v2339;
              v2342[2] = v2340;
              *v2342 = v2338;
              v2331 += 4;
              if (v2331 == v2330)
                goto LABEL_568;
            }
            v2348 = *(int64x2_t *)(v2345 + 16);
            v2349 = (int64x2_t *)(v2347 + 8 * (v2343 + (_DWORD)v2346 * v2344));
            v2351 = *(int64x2_t *)(v2345 + 64);
            v2350 = *(int64x2_t *)(v2345 + 80);
            v2352 = *(int64x2_t *)(v2345 + 32);
            v2353 = *(int64x2_t *)(v2345 + 48);
            v2355 = *(_OWORD *)(v2345 + 112);
            v2354 = *(_OWORD *)(v2345 + 128);
            v2356 = *(_OWORD *)(v2345 + 96);
            v2357 = vzip1q_s64(*(int64x2_t *)v2345, v2353);
            v2358 = vzip2q_s64(*(int64x2_t *)v2345, v2353);
            v2349[1].i64[0] = v2356;
            *v2349 = v2357;
            v2359 = (int64x2_t *)((char *)v2349 + 8 * v2346);
            *v2359 = v2358;
            v2359[1].i64[0] = *((_QWORD *)&v2356 + 1);
            v2360 = &v2349[v2346];
            v2360[1].i64[0] = v2355;
            *v2360 = vzip1q_s64(v2348, v2351);
            v2361 = (int64x2_t *)((char *)v2349 + 24 * v2346);
            v2361[1].i64[0] = *((_QWORD *)&v2355 + 1);
            *v2361 = vzip2q_s64(v2348, v2351);
            v2362 = &v2349[2 * v2346];
            v2362[1].i64[0] = v2354;
            *v2362 = vzip1q_s64(v2352, v2350);
            v2363 = (int64x2_t *)((char *)v2349 + 40 * v2346);
            v2363[1].i64[0] = *((_QWORD *)&v2354 + 1);
            *v2363 = vzip2q_s64(v2352, v2350);
            v2331 += 4;
          }
          while (v2331 != v2330);
LABEL_568:
          v2324 = *(unsigned int *)(a1 + 8484);
        }
        ++v2325;
        ++v2326;
      }
      while (v2325 < v2324);
    }
    v2391 = *(unsigned int *)(a1 + 2292);
    if ((_DWORD)v2391)
    {
      v2392 = 0;
      v2393 = *(unsigned int **)(a1 + 10520);
      do
      {
        v2394 = *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 8 * v2392);
        if (v2394)
        {
          v2395 = *(_QWORD *)(a1 + 2368);
          v2396 = (*(_DWORD *)(a1 + 2392) * v2392);
          v2397 = (unsigned int *)(v2395 + 16 * (v2394 + v2396));
          v2398 = (unsigned int *)(v2395 + 16 * v2396);
          do
          {
            while (1)
            {
              v2404 = *v2393;
              v2405 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2398);
              v2406 = (_QWORD *)(*(_QWORD *)(a1 + 2296) + 8 * *((_QWORD *)v2398 + 1));
              v2407 = *v6;
              v2408 = *(_QWORD *)(a1 + 20040);
              v2409 = v2406[3];
              if (*v2393 >= v2405)
                break;
              v2399 = (_QWORD *)(v2408 + 8 * (v2405 + (_DWORD)v2407 * v2404));
              v2400 = v2406[1];
              v2401 = v2406[2];
              v2402 = v2406[4];
              v2403 = v2406[5];
              *v2399 = *v2406;
              v2399[v2407] = v2400;
              v2399[2 * v2407] = v2401;
              v2399[3 * v2407] = v2409;
              v2399[4 * v2407] = v2402;
              v2399[5 * v2407] = v2403;
              v2398 += 4;
              if (v2398 == v2397)
                goto LABEL_588;
            }
            v2410 = (_OWORD *)(v2408 + 8 * (v2404 + (_DWORD)v2407 * v2405));
            v2411 = *(_OWORD *)v2406;
            v2412 = *((_OWORD *)v2406 + 2);
            v2410[1] = *((_OWORD *)v2406 + 1);
            v2410[2] = v2412;
            *v2410 = v2411;
            v2398 += 4;
          }
          while (v2398 != v2397);
LABEL_588:
          v2391 = *(unsigned int *)(a1 + 2292);
        }
        ++v2392;
        ++v2393;
      }
      while (v2392 < v2391);
    }
    v2435 = *(unsigned int *)(a1 + 3300);
    if ((_DWORD)v2435)
    {
      v2436 = 0;
      v2437 = *(unsigned int **)(a1 + 10544);
      do
      {
        v2438 = *(_QWORD *)(*(_QWORD *)(a1 + 3408) + 8 * v2436);
        if (v2438)
        {
          v2439 = *(_QWORD *)(a1 + 3376);
          v2440 = (*(_DWORD *)(a1 + 3400) * v2436);
          v2441 = (unsigned int *)(v2439 + 16 * (v2438 + v2440));
          v2442 = (unsigned int *)(v2439 + 16 * v2440);
          do
          {
            while (1)
            {
              v2451 = *v2437;
              v2452 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2442);
              v2453 = (_QWORD *)(*(_QWORD *)(a1 + 3304) + 8 * *((_QWORD *)v2442 + 1));
              v2454 = *v6;
              v2455 = *(_QWORD *)(a1 + 20040);
              v2456 = v2453[3];
              if (*v2437 >= v2452)
                break;
              v2443 = v2453[1];
              v2444 = (_QWORD *)(v2455 + 8 * (v2452 + (_DWORD)v2454 * v2451));
              v2445 = v2453[2];
              v2446 = v2453[4];
              v2447 = v2453[5];
              v2448 = v2453[6];
              v2449 = v2453[7];
              v2450 = v2453[8];
              *v2444 = *v2453;
              v2444[v2454] = v2443;
              v2444[2 * v2454] = v2445;
              v2444[3 * v2454] = v2456;
              v2444[4 * v2454] = v2446;
              v2444[5 * v2454] = v2447;
              v2444[6 * v2454] = v2448;
              v2444[7 * v2454] = v2449;
              v2444[8 * v2454] = v2450;
              v2442 += 4;
              if (v2442 == v2441)
                goto LABEL_608;
            }
            v2457 = v2455 + 8 * (v2451 + (_DWORD)v2454 * v2452);
            v2458 = *(_OWORD *)v2453;
            v2459 = *((_OWORD *)v2453 + 1);
            v2460 = *((_OWORD *)v2453 + 2);
            v2461 = *((_OWORD *)v2453 + 3);
            *(_QWORD *)(v2457 + 64) = v2453[8];
            *(_OWORD *)(v2457 + 32) = v2460;
            *(_OWORD *)(v2457 + 48) = v2461;
            *(_OWORD *)v2457 = v2458;
            *(_OWORD *)(v2457 + 16) = v2459;
            v2442 += 4;
          }
          while (v2442 != v2441);
LABEL_608:
          v2435 = *(unsigned int *)(a1 + 3300);
        }
        ++v2436;
        ++v2437;
      }
      while (v2436 < v2435);
    }
    v2550 = *(unsigned int *)(a1 + 4308);
    if ((_DWORD)v2550)
    {
      v2551 = 0;
      v2552 = *(unsigned int **)(a1 + 10568);
      do
      {
        v2553 = *(_QWORD *)(*(_QWORD *)(a1 + 4416) + 8 * v2551);
        if (v2553)
        {
          v2554 = *(_QWORD *)(a1 + 4384);
          v2555 = (*(_DWORD *)(a1 + 4408) * v2551);
          v2556 = (unsigned int *)(v2554 + 16 * (v2553 + v2555));
          v2557 = (unsigned int *)(v2554 + 16 * v2555);
          do
          {
            v2558 = *v2552;
            v2559 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2557);
            if (*v2552 >= v2559)
              v2560 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2557);
            else
              v2560 = *v2552;
            if (v2558 <= v2559)
              v2558 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2557);
            *(_QWORD *)(*(_QWORD *)(a1 + 20040) + 8 * (v2558 + *v6 * v2560)) = *(_QWORD *)(*(_QWORD *)(a1 + 4312)
                                                                                           + 8
                                                                                           * *((_QWORD *)v2557 + 1));
            v2557 += 4;
          }
          while (v2557 != v2556);
          v2550 = *(unsigned int *)(a1 + 4308);
        }
        ++v2551;
        ++v2552;
      }
      while (v2551 < v2550);
    }
    v2685 = *(unsigned int *)(a1 + 5316);
    if ((_DWORD)v2685)
    {
      v2686 = 0;
      v2687 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2688 = *(_QWORD *)(*(_QWORD *)(a1 + 5424) + 8 * v2686);
        if (v2688)
        {
          v2689 = *(_QWORD *)(a1 + 5392);
          v2690 = (*(_DWORD *)(a1 + 5416) * v2686);
          v2691 = (unsigned int *)(v2689 + 16 * (v2688 + v2690));
          v2692 = (unsigned int *)(v2689 + 16 * v2690);
          do
          {
            while (1)
            {
              v2698 = *v2687;
              v2699 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2692);
              v2700 = (_QWORD *)(*(_QWORD *)(a1 + 5320) + 8 * *((_QWORD *)v2692 + 1));
              v2701 = *v6;
              v2702 = *(_QWORD *)(a1 + 20040);
              v2703 = v2700[3];
              if (*v2687 >= v2699)
                break;
              v2693 = (_QWORD *)(v2702 + 8 * (v2699 + (_DWORD)v2701 * v2698));
              v2694 = v2700[1];
              v2695 = v2700[2];
              v2696 = v2700[4];
              v2697 = v2700[5];
              *v2693 = *v2700;
              v2693[v2701] = v2694;
              v2693[2 * v2701] = v2695;
              v2693[3 * v2701] = v2703;
              v2693[4 * v2701] = v2696;
              v2693[5 * v2701] = v2697;
              v2692 += 4;
              if (v2692 == v2691)
                goto LABEL_650;
            }
            v2704 = (_OWORD *)(v2702 + 8 * (v2698 + (_DWORD)v2701 * v2699));
            v2705 = *(_OWORD *)v2700;
            v2706 = *((_OWORD *)v2700 + 2);
            v2704[1] = *((_OWORD *)v2700 + 1);
            v2704[2] = v2706;
            *v2704 = v2705;
            v2692 += 4;
          }
          while (v2692 != v2691);
LABEL_650:
          v2685 = *(unsigned int *)(a1 + 5316);
        }
        ++v2686;
        ++v2687;
      }
      while (v2686 < v2685);
    }
    v2731 = *(unsigned int *)(a1 + 6324);
    if ((_DWORD)v2731)
    {
      v2732 = 0;
      v2733 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2734 = *(_QWORD *)(*(_QWORD *)(a1 + 6432) + 8 * v2732);
        if (v2734)
        {
          v2735 = *(_QWORD *)(a1 + 6400);
          v2736 = (*(_DWORD *)(a1 + 6424) * v2732);
          v2737 = (unsigned int *)(v2735 + 16 * (v2734 + v2736));
          v2738 = (unsigned int *)(v2735 + 16 * v2736);
          do
          {
            while (1)
            {
              v2742 = *v2733;
              v2743 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2738);
              v2744 = (_QWORD *)(*(_QWORD *)(a1 + 6328) + 8 * *((_QWORD *)v2738 + 1));
              v2745 = *v6;
              v2746 = *(_QWORD *)(a1 + 20040);
              v2747 = v2744[3];
              if (*v2733 >= v2743)
                break;
              v2739 = (_QWORD *)(v2746 + 8 * (v2743 + (_DWORD)v2745 * v2742));
              v2740 = v2744[1];
              v2741 = v2744[2];
              *v2739 = *v2744;
              v2739[v2745] = v2740;
              v2739[2 * v2745] = v2741;
              v2739[3 * v2745] = v2747;
              v2738 += 4;
              if (v2738 == v2737)
                goto LABEL_670;
            }
            v2748 = (_OWORD *)(v2746 + 8 * (v2742 + (_DWORD)v2745 * v2743));
            v2749 = *((_OWORD *)v2744 + 1);
            *v2748 = *(_OWORD *)v2744;
            v2748[1] = v2749;
            v2738 += 4;
          }
          while (v2738 != v2737);
LABEL_670:
          v2731 = *(unsigned int *)(a1 + 6324);
        }
        ++v2732;
        ++v2733;
      }
      while (v2732 < v2731);
    }
    v2838 = *(unsigned int *)(a1 + 7332);
    if ((_DWORD)v2838)
    {
      v2839 = 0;
      v2840 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2841 = *(_QWORD *)(*(_QWORD *)(a1 + 7440) + 8 * v2839);
        if (v2841)
        {
          v2842 = *(_QWORD *)(a1 + 7408);
          v2843 = (*(_DWORD *)(a1 + 7432) * v2839);
          v2844 = (unsigned int *)(v2842 + 16 * (v2841 + v2843));
          v2845 = (unsigned int *)(v2842 + 16 * v2843);
          do
          {
            while (1)
            {
              v2849 = *v2840;
              v2850 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2845);
              v2851 = (_QWORD *)(*(_QWORD *)(a1 + 7336) + 8 * *((_QWORD *)v2845 + 1));
              v2852 = *v6;
              v2853 = *(_QWORD *)(a1 + 20040);
              v2854 = v2851[3];
              if (*v2840 >= v2850)
                break;
              v2846 = (_QWORD *)(v2853 + 8 * (v2850 + (_DWORD)v2852 * v2849));
              v2847 = v2851[1];
              v2848 = v2851[2];
              *v2846 = *v2851;
              v2846[v2852] = v2847;
              v2846[2 * v2852] = v2848;
              v2846[3 * v2852] = v2854;
              v2845 += 4;
              if (v2845 == v2844)
                goto LABEL_690;
            }
            v2855 = (_OWORD *)(v2853 + 8 * (v2849 + (_DWORD)v2852 * v2850));
            v2856 = *((_OWORD *)v2851 + 1);
            *v2855 = *(_OWORD *)v2851;
            v2855[1] = v2856;
            v2845 += 4;
          }
          while (v2845 != v2844);
LABEL_690:
          v2838 = *(unsigned int *)(a1 + 7332);
        }
        ++v2839;
        ++v2840;
      }
      while (v2839 < v2838);
    }
    v2920 = *(unsigned int *)(a1 + 8340);
    if ((_DWORD)v2920)
    {
      v2921 = 0;
      v2922 = *(unsigned int **)(a1 + 10664);
      do
      {
        v2923 = *(_QWORD *)(*(_QWORD *)(a1 + 8448) + 8 * v2921);
        if (v2923)
        {
          v2924 = *(_QWORD *)(a1 + 8416);
          v2925 = (*(_DWORD *)(a1 + 8440) * v2921);
          v2926 = (unsigned int *)(v2924 + 16 * (v2923 + v2925));
          v2927 = (unsigned int *)(v2924 + 16 * v2925);
          do
          {
            while (1)
            {
              v2931 = *v2922;
              v2932 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2927);
              v2933 = (_QWORD *)(*(_QWORD *)(a1 + 8344) + 8 * *((_QWORD *)v2927 + 1));
              v2934 = *v6;
              v2935 = *(_QWORD *)(a1 + 20040);
              if (*v2922 >= v2932)
                break;
              v2928 = (_QWORD *)(v2935 + 8 * (v2932 + (_DWORD)v2934 * v2931));
              v2929 = v2933[1];
              v2930 = v2933[2];
              *v2928 = *v2933;
              v2928[v2934] = v2929;
              v2928[2 * v2934] = v2930;
              v2927 += 4;
              if (v2927 == v2926)
                goto LABEL_710;
            }
            v2936 = v2935 + 8 * (v2931 + (_DWORD)v2934 * v2932);
            v2937 = *(_OWORD *)v2933;
            *(_QWORD *)(v2936 + 16) = v2933[2];
            *(_OWORD *)v2936 = v2937;
            v2927 += 4;
          }
          while (v2927 != v2926);
LABEL_710:
          v2920 = *(unsigned int *)(a1 + 8340);
        }
        ++v2921;
        ++v2922;
      }
      while (v2921 < v2920);
    }
    v3001 = *(unsigned int *)(a1 + 2148);
    if ((_DWORD)v3001)
    {
      v3002 = 0;
      v3003 = *(unsigned int **)(a1 + 10520);
      do
      {
        v3004 = *(_QWORD *)(*(_QWORD *)(a1 + 2256) + 8 * v3002);
        if (v3004)
        {
          v3005 = *(_QWORD *)(a1 + 2224);
          v3006 = (*(_DWORD *)(a1 + 2248) * v3002);
          v3007 = (unsigned int *)(v3005 + 16 * (v3004 + v3006));
          v3008 = (unsigned int *)(v3005 + 16 * v3006);
          do
          {
            while (1)
            {
              v3044 = *v3003;
              v3045 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3008);
              v3046 = *(_QWORD *)(a1 + 2152) + 8 * *((_QWORD *)v3008 + 1);
              v3047 = *v6;
              v3048 = *(_QWORD *)(a1 + 20040);
              if (*v3003 >= v3045)
                break;
              v3009 = *(_QWORD *)(v3046 + 64);
              v3010 = v3048 + 8 * (v3045 + (_DWORD)v3047 * v3044);
              v3011 = *(_OWORD *)(v3046 + 48);
              v3012 = *(int64x2_t *)v3046;
              v3013 = *(_OWORD *)(v3046 + 16);
              v3014 = *(_OWORD *)(v3046 + 72);
              v3015 = *(_OWORD *)(v3046 + 88);
              v3016 = *(_OWORD *)(v3046 + 104);
              v3017 = *(_OWORD *)(v3046 + 120);
              v3018 = *(_QWORD *)(v3046 + 136);
              v3019 = *(_OWORD *)(v3046 + 144);
              v3020 = *(_OWORD *)(v3046 + 160);
              v3021 = *(_OWORD *)(v3046 + 176);
              v3022 = *(_OWORD *)(v3046 + 192);
              v3023 = *(_QWORD *)(v3046 + 208);
              v3024 = *(_OWORD *)(v3046 + 232);
              v3025 = *(_OWORD *)(v3046 + 248);
              v3026 = *(_OWORD *)(v3046 + 216);
              v3027 = *(_OWORD *)(v3046 + 264);
              v3028 = *(_QWORD *)(v3046 + 280);
              v3029 = *(_OWORD *)(v3046 + 288);
              v3030 = *(_OWORD *)(v3046 + 304);
              v3031 = *(_OWORD *)(v3046 + 320);
              v3032 = *(_OWORD *)(v3046 + 336);
              v3033 = *(_QWORD *)(v3046 + 352);
              v3034 = *(_OWORD *)(v3046 + 360);
              v3035 = *(_OWORD *)(v3046 + 376);
              v3036 = *(_OWORD *)(v3046 + 392);
              v3037 = *(_OWORD *)(v3046 + 408);
              v3038 = *(_QWORD *)(v3046 + 424);
              *(_OWORD *)(v3010 + 32) = *(_OWORD *)(v3046 + 32);
              *(_OWORD *)(v3010 + 48) = v3011;
              *(_QWORD *)(v3010 + 64) = v3009;
              *(int64x2_t *)v3010 = v3012;
              *(_OWORD *)(v3010 + 16) = v3013;
              v3039 = v3010 + 8 * v3047;
              *(_QWORD *)(v3039 + 64) = v3018;
              *(_OWORD *)(v3039 + 32) = v3016;
              *(_OWORD *)(v3039 + 48) = v3017;
              *(_OWORD *)v3039 = v3014;
              *(_OWORD *)(v3039 + 16) = v3015;
              v3040 = v3010 + 16 * v3047;
              *(_QWORD *)(v3040 + 64) = v3023;
              *(_OWORD *)(v3040 + 32) = v3021;
              *(_OWORD *)(v3040 + 48) = v3022;
              *(_OWORD *)v3040 = v3019;
              *(_OWORD *)(v3040 + 16) = v3020;
              v3041 = v3010 + 24 * v3047;
              *(_QWORD *)(v3041 + 64) = v3028;
              *(_OWORD *)(v3041 + 32) = v3025;
              *(_OWORD *)(v3041 + 48) = v3027;
              *(_OWORD *)v3041 = v3026;
              *(_OWORD *)(v3041 + 16) = v3024;
              v3042 = v3010 + 32 * v3047;
              *(_QWORD *)(v3042 + 64) = v3033;
              *(_OWORD *)(v3042 + 32) = v3031;
              *(_OWORD *)(v3042 + 48) = v3032;
              *(_OWORD *)v3042 = v3029;
              *(_OWORD *)(v3042 + 16) = v3030;
              v3043 = v3010 + 40 * v3047;
              *(_QWORD *)(v3043 + 64) = v3038;
              *(_OWORD *)(v3043 + 32) = v3036;
              *(_OWORD *)(v3043 + 48) = v3037;
              *(_OWORD *)v3043 = v3034;
              *(_OWORD *)(v3043 + 16) = v3035;
              v3008 += 4;
              if (v3008 == v3007)
                goto LABEL_730;
            }
            v3049.i64[0] = *(_QWORD *)(v3046 + 64);
            v3050 = (int64x2_t *)(v3048 + 8 * (v3044 + (_DWORD)v3047 * v3045));
            v3052 = *(int64x2_t *)(v3046 + 32);
            v3051 = *(int64x2_t *)(v3046 + 48);
            v3053 = *(int64x2_t *)(v3046 + 16);
            v3054 = *(int64x2_t *)(v3046 + 120);
            v3055 = *(int64x2_t *)(v3046 + 104);
            v3056 = *(int64x2_t *)(v3046 + 88);
            v3057 = *(int64x2_t *)(v3046 + 72);
            v3058.i64[0] = *(_QWORD *)(v3046 + 208);
            v3060 = *(int64x2_t *)(v3046 + 176);
            v3059 = *(int64x2_t *)(v3046 + 192);
            v3062 = *(int64x2_t *)(v3046 + 144);
            v3061 = *(int64x2_t *)(v3046 + 160);
            v3063 = *(int64x2_t *)(v3046 + 216);
            v3064 = *(int64x2_t *)(v3046 + 264);
            v3065 = *(int64x2_t *)(v3046 + 248);
            v3066 = *(int64x2_t *)(v3046 + 232);
            v3067.i64[0] = *(_QWORD *)(v3046 + 352);
            v3069 = *(int64x2_t *)(v3046 + 320);
            v3068 = *(int64x2_t *)(v3046 + 336);
            v3071 = *(int64x2_t *)(v3046 + 288);
            v3070 = *(int64x2_t *)(v3046 + 304);
            v3072 = *(int64x2_t *)(v3046 + 392);
            v3073 = *(int64x2_t *)(v3046 + 408);
            v3074 = *(int64x2_t *)(v3046 + 376);
            v3075 = vzip1q_s64(*(int64x2_t *)v3046, v3057);
            v3076 = vzip1q_s64(v3071, *(int64x2_t *)(v3046 + 360));
            v3077 = vzip1q_s64(v3062, v3063);
            v3078 = vzip2q_s64(*(int64x2_t *)v3046, v3057);
            v3079 = vzip2q_s64(v3062, v3063);
            v3080 = vzip2q_s64(v3071, *(int64x2_t *)(v3046 + 360));
            v3049.i64[1] = *(_QWORD *)(v3046 + 136);
            v3058.i64[1] = *(_QWORD *)(v3046 + 280);
            v3067.i64[1] = *(_QWORD *)(v3046 + 424);
            v3050[1] = v3077;
            v3050[2] = v3076;
            *v3050 = v3075;
            v3081 = (int64x2_t *)((char *)v3050 + 8 * v3047);
            v3081[1] = v3079;
            v3081[2] = v3080;
            *v3081 = v3078;
            v3082 = &v3050[v3047];
            v3082[1] = vzip1q_s64(v3061, v3066);
            v3082[2] = vzip1q_s64(v3070, v3074);
            *v3082 = vzip1q_s64(v3053, v3056);
            v3083 = (int64x2_t *)((char *)v3050 + 24 * v3047);
            v3083[1] = vzip2q_s64(v3061, v3066);
            v3083[2] = vzip2q_s64(v3070, v3074);
            *v3083 = vzip2q_s64(v3053, v3056);
            v3084 = &v3050[2 * v3047];
            v3084[1] = vzip1q_s64(v3060, v3065);
            v3084[2] = vzip1q_s64(v3069, v3072);
            *v3084 = vzip1q_s64(v3052, v3055);
            v3085 = (int64x2_t *)((char *)v3050 + 40 * v3047);
            v3085[1] = vzip2q_s64(v3060, v3065);
            v3085[2] = vzip2q_s64(v3069, v3072);
            *v3085 = vzip2q_s64(v3052, v3055);
            v3086 = &v3050[3 * v3047];
            v3086[1] = vzip1q_s64(v3059, v3064);
            v3086[2] = vzip1q_s64(v3068, v3073);
            *v3086 = vzip1q_s64(v3051, v3054);
            v3087 = (int64x2_t *)((char *)v3050 + 56 * v3047);
            v3087[1] = vzip2q_s64(v3059, v3064);
            v3087[2] = vzip2q_s64(v3068, v3073);
            *v3087 = vzip2q_s64(v3051, v3054);
            v3088 = &v3050[4 * v3047];
            v3088[1] = v3058;
            v3088[2] = v3067;
            *v3088 = v3049;
            v3008 += 4;
          }
          while (v3008 != v3007);
LABEL_730:
          v3001 = *(unsigned int *)(a1 + 2148);
        }
        ++v3002;
        ++v3003;
      }
      while (v3002 < v3001);
    }
    v3143 = *(unsigned int *)(a1 + 3156);
    if ((_DWORD)v3143)
    {
      v3144 = 0;
      v3145 = *(unsigned int **)(a1 + 10544);
      do
      {
        v3146 = *(_QWORD *)(*(_QWORD *)(a1 + 3264) + 8 * v3144);
        if (v3146)
        {
          v3147 = *(_QWORD *)(a1 + 3232);
          v3148 = (*(_DWORD *)(a1 + 3256) * v3144);
          v3149 = (unsigned int *)(v3147 + 16 * (v3146 + v3148));
          v3150 = (unsigned int *)(v3147 + 16 * v3148);
          do
          {
            v3221 = *v3145;
            v3222 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3150);
            v3223 = *(_QWORD *)(a1 + 3160) + 8 * *((_QWORD *)v3150 + 1);
            v3224 = *v6;
            v3225 = *(_QWORD *)(a1 + 20040);
            if (*v3145 < v3222)
            {
              v4387 = *(_QWORD *)(v3223 + 64);
              v3151 = v3225 + 8 * (v3222 + (_DWORD)v3224 * v3221);
              v3152 = *(_OWORD *)(v3223 + 32);
              v4373 = *(_OWORD *)(v3223 + 48);
              v4377 = *(int64x2_t *)v3223;
              v4392 = *(_OWORD *)(v3223 + 88);
              v4395 = *(int8x16_t *)(v3223 + 72);
              v4383 = *(_OWORD *)(v3223 + 104);
              v3186 = *(int8x16_t *)(v3223 + 120);
              v3153 = *(_QWORD *)(v3223 + 136);
              v4352 = *(_QWORD *)(v3223 + 208);
              v3177 = *(int8x16_t *)(v3223 + 176);
              v3154 = *(int8x16_t *)(v3223 + 192);
              v3156 = *(int8x16_t *)(v3223 + 144);
              v3155 = *(int8x16_t *)(v3223 + 160);
              v4337 = *(_QWORD *)(v3223 + 280);
              v3183 = *(int8x16_t *)(v3223 + 248);
              v3157 = *(int8x16_t *)(v3223 + 232);
              v3158 = *(int8x16_t *)(v3223 + 216);
              v3159 = *(int8x16_t *)(v3223 + 264);
              v4341 = *(_QWORD *)(v3223 + 352);
              v3182 = *(int8x16_t *)(v3223 + 320);
              v3180 = *(int8x16_t *)(v3223 + 336);
              v3189 = *(int8x16_t *)(v3223 + 288);
              v3160 = *(int8x16_t *)(v3223 + 304);
              v4335 = *(_QWORD *)(v3223 + 424);
              v3161 = *(int8x16_t *)(v3223 + 392);
              v3192 = *(int8x16_t *)(v3223 + 408);
              v3163 = *(int8x16_t *)(v3223 + 360);
              v3162 = *(int8x16_t *)(v3223 + 376);
              v4345 = *(_QWORD *)(v3223 + 496);
              v3164 = *(int8x16_t *)(v3223 + 464);
              v3165 = *(int8x16_t *)(v3223 + 480);
              v3167 = *(int8x16_t *)(v3223 + 432);
              v3166 = *(int8x16_t *)(v3223 + 448);
              v4333 = *(_QWORD *)(v3223 + 568);
              v3168 = *(int8x16_t *)(v3223 + 536);
              v3169 = *(int8x16_t *)(v3223 + 552);
              v3170 = *(int8x16_t *)(v3223 + 504);
              v3194 = *(int8x16_t *)(v3223 + 520);
              v4355 = *(_QWORD *)(v3223 + 640);
              v3172 = *(int8x16_t *)(v3223 + 608);
              v3171 = *(int8x16_t *)(v3223 + 624);
              v3174 = *(int8x16_t *)(v3223 + 576);
              v3173 = *(int8x16_t *)(v3223 + 592);
              *(_OWORD *)(v3151 + 16) = *(_OWORD *)(v3223 + 16);
              *(_OWORD *)(v3151 + 32) = v3152;
              *(_OWORD *)(v3151 + 48) = v4373;
              *(_QWORD *)(v3151 + 64) = v4387;
              *(int64x2_t *)v3151 = v4377;
              v3175 = v3151 + 8 * v3224;
              *(_QWORD *)(v3175 + 64) = v3153;
              *(_OWORD *)(v3175 + 32) = v4383;
              *(int8x16_t *)(v3175 + 48) = v3186;
              *(_OWORD *)(v3175 + 16) = v4392;
              *(int8x16_t *)v3175 = v4395;
              v4393 = v3154.i64[0];
              v3176 = vextq_s8(v3154, v3154, 8uLL).u64[0];
              v4343 = v3177.i64[0];
              v4321 = vextq_s8(v3177, v3177, 8uLL).u64[0];
              v4395.i64[0] = v3155.i64[0];
              v4323 = vextq_s8(v3155, v3155, 8uLL).u64[0];
              v3177.i64[0] = v3156.i64[0];
              v3178 = vextq_s8(v3156, v3156, 8uLL).u64[0];
              v4384 = v3183.i64[0];
              v4319 = vextq_s8(v3183, v3183, 8uLL).u64[0];
              v4374 = v3157.i64[0];
              v4315 = vextq_s8(v3157, v3157, 8uLL).u64[0];
              v4388 = v3158.i64[0];
              v4317 = vextq_s8(v3158, v3158, 8uLL).u64[0];
              v4339 = v3159.i64[0];
              v4313 = vextq_s8(v3159, v3159, 8uLL).u64[0];
              v3179 = v3180.i64[0];
              v4309 = vextq_s8(v3180, v3180, 8uLL).u64[0];
              v3180.i64[0] = v3182.i64[0];
              v4307 = vextq_s8(v3182, v3182, 8uLL).u64[0];
              v4378 = v3160.i64[0];
              v3181 = vextq_s8(v3160, v3160, 8uLL).u64[0];
              v3182.i64[0] = v3189.i64[0];
              v4311 = vextq_s8(v3189, v3189, 8uLL).u64[0];
              v4348 = v3192.i64[0];
              v4303 = vextq_s8(v3192, v3192, 8uLL).u64[0];
              v3183.i64[0] = v3161.i64[0];
              v4301 = vextq_s8(v3161, v3161, 8uLL).u64[0];
              v3184 = v3162.i64[0];
              v4299 = vextq_s8(v3162, v3162, 8uLL).u64[0];
              v4357 = v3171.i64[0];
              v4360 = v3163.i64[0];
              v4305 = vextq_s8(v3163, v3163, 8uLL).u64[0];
              v3185 = v3165.i64[0];
              v4295 = vextq_s8(v3165, v3165, 8uLL).u64[0];
              v3186.i64[0] = v3164.i64[0];
              v4294 = vextq_s8(v3164, v3164, 8uLL).u64[0];
              v3187 = v3166.i64[0];
              v3188 = vextq_s8(v3166, v3166, 8uLL).u64[0];
              v3189.i64[0] = v3167.i64[0];
              v4297 = vextq_s8(v3167, v3167, 8uLL).u64[0];
              v3190 = vextq_s8(v3169, v3169, 8uLL).u64[0];
              v3191 = vextq_s8(v3168, v3168, 8uLL).u64[0];
              v3192.i64[0] = v3194.i64[0];
              v3193 = vextq_s8(v3194, v3194, 8uLL).u64[0];
              v3194.i64[0] = v3170.i64[0];
              v3195 = vextq_s8(v3170, v3170, 8uLL).u64[0];
              v4325 = vextq_s8(v3171, v3171, 8uLL).u64[0];
              v4363 = v3172.i64[0];
              v4327 = vextq_s8(v3172, v3172, 8uLL).u64[0];
              v4369 = v3173.i64[0];
              v4366 = v3174.i64[0];
              v4329 = vextq_s8(v3173, v3173, 8uLL).u64[0];
              v4331 = vextq_s8(v3174, v3174, 8uLL).u64[0];
            }
            else
            {
              v3182 = *(int8x16_t *)(v3223 + 32);
              v3226 = *(int64x2_t *)(v3223 + 48);
              v3227 = *(int64x2_t *)(v3223 + 16);
              v3228 = *(int64x2_t *)(v3223 + 120);
              v3229 = *(int64x2_t *)(v3223 + 104);
              v3230 = *(int64x2_t *)(v3223 + 88);
              v3231 = *(int64x2_t *)(v3223 + 72);
              v3177 = *(int8x16_t *)(v3223 + 176);
              v3232 = *(int8x16_t *)(v3223 + 192);
              v3233 = *(int8x16_t *)(v3223 + 144);
              v3234 = *(int64x2_t *)(v3223 + 160);
              v3236 = *(int64x2_t *)(v3223 + 320);
              v3235 = *(int64x2_t *)(v3223 + 336);
              v3238 = *(int64x2_t *)(v3223 + 288);
              v3237 = *(int64x2_t *)(v3223 + 304);
              v3239 = *(int64x2_t *)(v3223 + 448);
              v3180 = *(int8x16_t *)(v3223 + 464);
              *(_QWORD *)&v3240 = vdupq_laneq_s64((int64x2_t)v3233, 1).u64[0];
              *((_QWORD *)&v3240 + 1) = *(_QWORD *)(v3223 + 224);
              v4389 = v3240;
              v3241 = *(int8x16_t *)(v3223 + 432);
              v4361 = vzip1q_s64((int64x2_t)v3233, *(int64x2_t *)(v3223 + 216));
              *(_QWORD *)&v3240 = vdupq_laneq_s64(v3238, 1).u64[0];
              *((_QWORD *)&v3240 + 1) = *(_QWORD *)(v3223 + 368);
              v4346 = vzip1q_s64((int64x2_t)v3241, *(int64x2_t *)(v3223 + 504));
              v4349 = vzip1q_s64(v3238, *(int64x2_t *)(v3223 + 360));
              *(_QWORD *)&v3242 = vdupq_laneq_s64((int64x2_t)v3241, 1).u64[0];
              *((_QWORD *)&v3242 + 1) = *(_QWORD *)(v3223 + 512);
              v4353 = vzip1q_s64(*(int64x2_t *)v3223, v3231);
              v4379 = vzip2q_s64(*(int64x2_t *)v3223, v3231);
              v4395 = (int8x16_t)vzip1q_s64(v3234, *(int64x2_t *)(v3223 + 232));
              v3241.i64[0] = vdupq_laneq_s64(v3234, 1).u64[0];
              v3241.i64[1] = *(_QWORD *)(v3223 + 240);
              v3186 = (int8x16_t)vzip1q_s64(v3237, *(int64x2_t *)(v3223 + 376));
              v3243.i64[0] = vdupq_laneq_s64(v3237, 1).u64[0];
              v3243.i64[1] = *(_QWORD *)(v3223 + 384);
              v3244 = (int8x16_t)vzip1q_s64(v3227, v3230);
              v3245 = (int8x16_t)vzip2q_s64(v3227, v3230);
              v3246 = (int8x16_t)vzip1q_s64(v3239, *(int64x2_t *)(v3223 + 520));
              v3247.i64[0] = vdupq_laneq_s64(v3239, 1).u64[0];
              v3247.i64[1] = *(_QWORD *)(v3223 + 528);
              v3248 = (int8x16_t)vzip1q_s64((int64x2_t)v3177, *(int64x2_t *)(v3223 + 248));
              v3233.i64[0] = vdupq_laneq_s64((int64x2_t)v3177, 1).u64[0];
              v3233.i64[1] = *(_QWORD *)(v3223 + 256);
              v3249 = (int8x16_t)vzip1q_s64((int64x2_t)v3182, v3229);
              v3183 = (int8x16_t)vzip2q_s64((int64x2_t)v3182, v3229);
              v3250 = (int8x16_t)vzip1q_s64(v3236, *(int64x2_t *)(v3223 + 392));
              v3236.i64[0] = vdupq_laneq_s64(v3236, 1).u64[0];
              v3189.i64[1] = *(_QWORD *)(v3223 + 400);
              v3251 = (int8x16_t)vzip1q_s64((int64x2_t)v3180, *(int64x2_t *)(v3223 + 536));
              v3252.i64[0] = vdupq_laneq_s64((int64x2_t)v3180, 1).u64[0];
              v3252.i64[1] = *(_QWORD *)(v3223 + 544);
              v3253 = (int8x16_t)vzip1q_s64(v3226, v3228);
              v3254 = (int8x16_t)vzip2q_s64(v3226, v3228);
              v3255 = (int8x16_t)vzip1q_s64((int64x2_t)v3232, *(int64x2_t *)(v3223 + 264));
              v3232.i64[0] = vdupq_laneq_s64((int64x2_t)v3232, 1).u64[0];
              v3232.i64[1] = *(_QWORD *)(v3223 + 272);
              v3256 = (int8x16_t)vzip1q_s64(v3235, *(int64x2_t *)(v3223 + 408));
              v3168.i64[0] = vdupq_laneq_s64(v3235, 1).u64[0];
              v3168.i64[1] = *(_QWORD *)(v3223 + 416);
              v3257 = *(int64x2_t *)(v3223 + 480);
              v3258 = (int8x16_t)vzip1q_s64(v3257, *(int64x2_t *)(v3223 + 552));
              v3169.i64[0] = vdupq_laneq_s64(v3257, 1).u64[0];
              v3169.i64[1] = *(_QWORD *)(v3223 + 560);
              v3151 = v3225 + 8 * (v3221 + (_DWORD)v3224 * v3222);
              v4366 = *(_QWORD *)(v3223 + 64);
              v4331 = *(_QWORD *)(v3223 + 136);
              v4369 = *(_QWORD *)(v3223 + 208);
              v4329 = *(_QWORD *)(v3223 + 280);
              v4363 = *(_QWORD *)(v3223 + 352);
              v4327 = *(_QWORD *)(v3223 + 424);
              v4357 = *(_QWORD *)(v3223 + 496);
              v4325 = *(_QWORD *)(v3223 + 568);
              v4355 = *(_QWORD *)(v3223 + 640);
              v3192 = *(int8x16_t *)(v3223 + 608);
              v3259 = *(int8x16_t *)(v3223 + 624);
              v3194 = *(int8x16_t *)(v3223 + 576);
              v3260 = *(int8x16_t *)(v3223 + 592);
              *(int64x2_t *)(v3151 + 32) = v4349;
              *(int64x2_t *)(v3151 + 48) = v4346;
              *(int64x2_t *)v3151 = v4353;
              *(int64x2_t *)(v3151 + 16) = v4361;
              v3261 = v3151 + 8 * v3224;
              *(_QWORD *)(v3151 + 64) = v3194.i64[0];
              *(_QWORD *)(v3261 + 64) = v3194.i64[1];
              *(_OWORD *)(v3261 + 32) = v3240;
              *(_OWORD *)(v3261 + 48) = v3242;
              *(_OWORD *)(v3261 + 16) = v4389;
              *(int64x2_t *)v3261 = v4379;
              v4323 = vextq_s8(v4395, v4395, 8uLL).u64[0];
              v3177.i64[0] = v3244.i64[0];
              v3178 = vextq_s8(v3244, v3244, 8uLL).u64[0];
              v4393 = v3246.i64[0];
              v4343 = v3186.i64[0];
              v4321 = vextq_s8(v3186, v3186, 8uLL).u64[0];
              v4388 = v3245.i64[0];
              v4317 = vextq_s8(v3245, v3245, 8uLL).u64[0];
              v4339 = v3247.i64[0];
              v4313 = vextq_s8(v3247, v3247, 8uLL).u64[0];
              v4384 = v3243.i64[0];
              v4319 = vextq_s8(v3243, v3243, 8uLL).u64[0];
              v4374 = v3241.i64[0];
              v4315 = vextq_s8(v3241, v3241, 8uLL).u64[0];
              v4352 = v3260.i64[0];
              v4337 = vextq_s8(v3260, v3260, 8uLL).u64[0];
              v4378 = v3248.i64[0];
              v3247.i64[0] = vextq_s8(v3248, v3248, 8uLL).u64[0];
              v3182.i64[0] = v3249.i64[0];
              v4311 = vextq_s8(v3249, v3249, 8uLL).u64[0];
              v3179 = v3251.i64[0];
              v4309 = vextq_s8(v3251, v3251, 8uLL).u64[0];
              v3180.i64[0] = v3250.i64[0];
              v4307 = vextq_s8(v3250, v3250, 8uLL).u64[0];
              v4360 = v3183.i64[0];
              v4305 = vextq_s8(v3183, v3183, 8uLL).u64[0];
              v4348 = v3252.i64[0];
              v4303 = vextq_s8(v3252, v3252, 8uLL).u64[0];
              v3183.i64[0] = v3236.i64[0];
              v4301 = vextq_s8(v3189, v3189, 8uLL).u64[0];
              v3184 = v3233.i64[0];
              v4299 = vextq_s8(v3233, v3233, 8uLL).u64[0];
              v4341 = v3192.i64[0];
              v4335 = vextq_s8(v3192, v3192, 8uLL).u64[0];
              v3189.i64[0] = v3253.i64[0];
              v4297 = vextq_s8(v3253, v3253, 8uLL).u64[0];
              v3185 = v3258.i64[0];
              v4295 = vextq_s8(v3258, v3258, 8uLL).u64[0];
              v3186.i64[0] = v3256.i64[0];
              v4294 = vextq_s8(v3256, v3256, 8uLL).u64[0];
              v3176 = vextq_s8(v3246, v3246, 8uLL).u64[0];
              v3187 = v3255.i64[0];
              v3188 = vextq_s8(v3255, v3255, 8uLL).u64[0];
              v3181 = v3247.i64[0];
              v3194.i64[0] = v3254.i64[0];
              v3195 = vextq_s8(v3254, v3254, 8uLL).u64[0];
              v3190 = vextq_s8(v3169, v3169, 8uLL).u64[0];
              v3191 = vextq_s8(v3168, v3168, 8uLL).u64[0];
              v3193 = vextq_s8(v3232, v3232, 8uLL).u64[0];
              v4345 = v3259.i64[0];
              v4333 = vextq_s8(v3259, v3259, 8uLL).u64[0];
              v3192.i64[0] = v3232.i64[0];
            }
            v3177.i64[1] = v3178;
            *(_QWORD *)&v3196 = v4393;
            *(_QWORD *)&v3197 = v4395.i64[0];
            *((_QWORD *)&v3197 + 1) = v4323;
            *(_QWORD *)&v3198 = v4343;
            *((_QWORD *)&v3198 + 1) = v4321;
            *((_QWORD *)&v3196 + 1) = v3176;
            *(_QWORD *)&v3199 = v4339;
            *((_QWORD *)&v3199 + 1) = v4313;
            *(_QWORD *)&v3200 = v4384;
            *((_QWORD *)&v3200 + 1) = v4319;
            *(_QWORD *)&v3201 = v4374;
            *((_QWORD *)&v3201 + 1) = v4315;
            *(_QWORD *)&v3202 = v4388;
            *((_QWORD *)&v3202 + 1) = v4317;
            *(_QWORD *)&v3203 = v3179;
            *((_QWORD *)&v3203 + 1) = v4309;
            v3180.i64[1] = v4307;
            *(_QWORD *)&v3204 = v4378;
            *((_QWORD *)&v3204 + 1) = v3181;
            v3182.i64[1] = v4311;
            *(_QWORD *)&v3205 = v4348;
            *((_QWORD *)&v3205 + 1) = v4303;
            v3183.i64[1] = v4301;
            *(_QWORD *)&v3206 = v3184;
            *((_QWORD *)&v3206 + 1) = v4299;
            *(_QWORD *)&v3207 = v4360;
            *((_QWORD *)&v3207 + 1) = v4305;
            *(_QWORD *)&v3208 = v3185;
            *((_QWORD *)&v3208 + 1) = v4295;
            v3186.i64[1] = v4294;
            *(_QWORD *)&v3209 = v3187;
            *((_QWORD *)&v3209 + 1) = v3188;
            v3189.i64[1] = v4297;
            v3169.i64[1] = v3190;
            v3168.i64[1] = v3191;
            v3192.i64[1] = v3193;
            v3194.i64[1] = v3195;
            *(_QWORD *)&v3210 = v4357;
            *((_QWORD *)&v3210 + 1) = v4325;
            *(_QWORD *)&v3211 = v4363;
            *((_QWORD *)&v3211 + 1) = v4327;
            *(_QWORD *)&v3212 = v4369;
            *((_QWORD *)&v3212 + 1) = v4329;
            *(_QWORD *)&v3213 = v4366;
            *((_QWORD *)&v3213 + 1) = v4331;
            v3214 = v3151 + 16 * v3224;
            *(int8x16_t *)v3214 = v3177;
            *(_OWORD *)(v3214 + 16) = v3197;
            *(_OWORD *)(v3214 + 32) = v3198;
            *(_OWORD *)(v3214 + 48) = v3196;
            *(_QWORD *)(v3214 + 64) = v4352;
            v3215 = v3151 + 24 * v3224;
            *(_QWORD *)(v3215 + 64) = v4337;
            *(_OWORD *)(v3215 + 32) = v3200;
            *(_OWORD *)(v3215 + 48) = v3199;
            *(_OWORD *)v3215 = v3202;
            *(_OWORD *)(v3215 + 16) = v3201;
            v3216 = v3151 + 32 * v3224;
            *(_QWORD *)(v3216 + 64) = v4341;
            *(int8x16_t *)(v3216 + 32) = v3180;
            *(_OWORD *)(v3216 + 48) = v3203;
            *(int8x16_t *)v3216 = v3182;
            *(_OWORD *)(v3216 + 16) = v3204;
            v3217 = v3151 + 40 * v3224;
            *(_QWORD *)(v3217 + 64) = v4335;
            *(int8x16_t *)(v3217 + 32) = v3183;
            *(_OWORD *)(v3217 + 48) = v3205;
            *(_OWORD *)v3217 = v3207;
            *(_OWORD *)(v3217 + 16) = v3206;
            v3218 = v3151 + 48 * v3224;
            *(_QWORD *)(v3218 + 64) = v4345;
            *(int8x16_t *)(v3218 + 32) = v3186;
            *(_OWORD *)(v3218 + 48) = v3208;
            *(int8x16_t *)v3218 = v3189;
            *(_OWORD *)(v3218 + 16) = v3209;
            v3219 = (int8x16_t *)(v3151 + 56 * v3224);
            v3219[4].i64[0] = v4333;
            v3219[2] = v3168;
            v3219[3] = v3169;
            *v3219 = v3194;
            v3219[1] = v3192;
            v3220 = v3151 + (v3224 << 6);
            *(_QWORD *)(v3220 + 64) = v4355;
            *(_OWORD *)(v3220 + 32) = v3211;
            *(_OWORD *)(v3220 + 48) = v3210;
            v3150 += 4;
            *(_OWORD *)v3220 = v3213;
            *(_OWORD *)(v3220 + 16) = v3212;
          }
          while (v3150 != v3149);
          v3143 = *(unsigned int *)(a1 + 3156);
        }
        ++v3144;
        ++v3145;
      }
      while (v3144 < v3143);
    }
    v3325 = *(unsigned int *)(a1 + 4164);
    if ((_DWORD)v3325)
    {
      v3326 = 0;
      v3327 = *(unsigned int **)(a1 + 10568);
      do
      {
        v3328 = *(_QWORD *)(*(_QWORD *)(a1 + 4272) + 8 * v3326);
        if (v3328)
        {
          v3329 = *(_QWORD *)(a1 + 4240);
          v3330 = (*(_DWORD *)(a1 + 4264) * v3326);
          v3331 = (unsigned int *)(v3329 + 16 * (v3328 + v3330));
          v3332 = (unsigned int *)(v3329 + 16 * v3330);
          do
          {
            while (1)
            {
              v3334 = *v3327;
              v3335 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3332);
              v3336 = *(_QWORD *)(a1 + 4168) + 8 * *((_QWORD *)v3332 + 1);
              v3337 = *v6;
              v3338 = *(_QWORD *)(a1 + 20040);
              v3340 = *(int8x16_t *)(v3336 + 32);
              v3339 = *(int8x16_t *)(v3336 + 48);
              v3342 = *(int8x16_t *)v3336;
              v3341 = *(int8x16_t *)(v3336 + 16);
              v3343 = *(_QWORD *)(v3336 + 64);
              v3344 = vextq_s8(v3339, v3339, 8uLL).u64[0];
              v3345 = vextq_s8(v3340, v3340, 8uLL).u64[0];
              v3346 = vextq_s8(v3341, v3341, 8uLL).u64[0];
              v3347 = vextq_s8(v3342, v3342, 8uLL).u64[0];
              if (*v3327 >= v3335)
                break;
              v3342.i64[1] = v3347;
              v3333 = (int8x16_t *)(v3338 + 8 * (v3335 + (_DWORD)v3337 * v3334));
              v3341.i64[1] = v3346;
              v3340.i64[1] = v3345;
              *v3333 = v3342;
              v3333[1] = v3341;
              v3333[4].i64[0] = v3343;
              v3339.i64[1] = v3344;
              v3333[2] = v3340;
              v3333[3] = v3339;
              v3332 += 4;
              if (v3332 == v3331)
                goto LABEL_770;
            }
            v3348 = (_QWORD *)(v3338 + 8 * (v3334 + (_DWORD)v3337 * v3335));
            *v3348 = v3342.i64[0];
            v3348[v3337] = v3347;
            v3348[2 * v3337] = v3341.i64[0];
            v3348[3 * v3337] = v3346;
            v3348[4 * v3337] = v3340.i64[0];
            v3348[5 * v3337] = v3345;
            v3348[6 * v3337] = v3339.i64[0];
            v3348[7 * v3337] = v3344;
            v3348[8 * v3337] = v3343;
            v3332 += 4;
          }
          while (v3332 != v3331);
LABEL_770:
          v3325 = *(unsigned int *)(a1 + 4164);
        }
        ++v3326;
        ++v3327;
      }
      while (v3326 < v3325);
    }
    v3431 = *(unsigned int *)(a1 + 5172);
    if ((_DWORD)v3431)
    {
      v3432 = 0;
      v3433 = *(unsigned int **)(a1 + 10592);
      do
      {
        v3434 = *(_QWORD *)(*(_QWORD *)(a1 + 5280) + 8 * v3432);
        if (v3434)
        {
          v3435 = *(_QWORD *)(a1 + 5248);
          v3436 = (*(_DWORD *)(a1 + 5272) * v3432);
          v3437 = (unsigned int *)(v3435 + 16 * (v3434 + v3436));
          v3438 = (unsigned int *)(v3435 + 16 * v3436);
          do
          {
            while (1)
            {
              v3474 = *v3433;
              v3475 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3438);
              v3476 = *(_QWORD *)(a1 + 5176) + 8 * *((_QWORD *)v3438 + 1);
              v3477 = *v6;
              v3478 = *(_QWORD *)(a1 + 20040);
              if (*v3433 >= v3475)
                break;
              v3439 = *(_QWORD *)(v3476 + 64);
              v3440 = v3478 + 8 * (v3475 + (_DWORD)v3477 * v3474);
              v3441 = *(_OWORD *)(v3476 + 48);
              v3442 = *(int64x2_t *)v3476;
              v3443 = *(_OWORD *)(v3476 + 16);
              v3444 = *(_OWORD *)(v3476 + 72);
              v3445 = *(_OWORD *)(v3476 + 88);
              v3446 = *(_OWORD *)(v3476 + 104);
              v3447 = *(_OWORD *)(v3476 + 120);
              v3448 = *(_QWORD *)(v3476 + 136);
              v3449 = *(_OWORD *)(v3476 + 144);
              v3450 = *(_OWORD *)(v3476 + 160);
              v3451 = *(_OWORD *)(v3476 + 176);
              v3452 = *(_OWORD *)(v3476 + 192);
              v3453 = *(_QWORD *)(v3476 + 208);
              v3454 = *(_OWORD *)(v3476 + 232);
              v3455 = *(_OWORD *)(v3476 + 248);
              v3456 = *(_OWORD *)(v3476 + 216);
              v3457 = *(_OWORD *)(v3476 + 264);
              v3458 = *(_QWORD *)(v3476 + 280);
              v3459 = *(_OWORD *)(v3476 + 288);
              v3460 = *(_OWORD *)(v3476 + 304);
              v3461 = *(_OWORD *)(v3476 + 320);
              v3462 = *(_OWORD *)(v3476 + 336);
              v3463 = *(_QWORD *)(v3476 + 352);
              v3464 = *(_OWORD *)(v3476 + 360);
              v3465 = *(_OWORD *)(v3476 + 376);
              v3466 = *(_OWORD *)(v3476 + 392);
              v3467 = *(_OWORD *)(v3476 + 408);
              v3468 = *(_QWORD *)(v3476 + 424);
              *(_OWORD *)(v3440 + 32) = *(_OWORD *)(v3476 + 32);
              *(_OWORD *)(v3440 + 48) = v3441;
              *(_QWORD *)(v3440 + 64) = v3439;
              *(int64x2_t *)v3440 = v3442;
              *(_OWORD *)(v3440 + 16) = v3443;
              v3469 = v3440 + 8 * v3477;
              *(_QWORD *)(v3469 + 64) = v3448;
              *(_OWORD *)(v3469 + 32) = v3446;
              *(_OWORD *)(v3469 + 48) = v3447;
              *(_OWORD *)v3469 = v3444;
              *(_OWORD *)(v3469 + 16) = v3445;
              v3470 = v3440 + 16 * v3477;
              *(_QWORD *)(v3470 + 64) = v3453;
              *(_OWORD *)(v3470 + 32) = v3451;
              *(_OWORD *)(v3470 + 48) = v3452;
              *(_OWORD *)v3470 = v3449;
              *(_OWORD *)(v3470 + 16) = v3450;
              v3471 = v3440 + 24 * v3477;
              *(_QWORD *)(v3471 + 64) = v3458;
              *(_OWORD *)(v3471 + 32) = v3455;
              *(_OWORD *)(v3471 + 48) = v3457;
              *(_OWORD *)v3471 = v3456;
              *(_OWORD *)(v3471 + 16) = v3454;
              v3472 = v3440 + 32 * v3477;
              *(_QWORD *)(v3472 + 64) = v3463;
              *(_OWORD *)(v3472 + 32) = v3461;
              *(_OWORD *)(v3472 + 48) = v3462;
              *(_OWORD *)v3472 = v3459;
              *(_OWORD *)(v3472 + 16) = v3460;
              v3473 = v3440 + 40 * v3477;
              *(_QWORD *)(v3473 + 64) = v3468;
              *(_OWORD *)(v3473 + 32) = v3466;
              *(_OWORD *)(v3473 + 48) = v3467;
              *(_OWORD *)v3473 = v3464;
              *(_OWORD *)(v3473 + 16) = v3465;
              v3438 += 4;
              if (v3438 == v3437)
                goto LABEL_790;
            }
            v3479.i64[0] = *(_QWORD *)(v3476 + 64);
            v3480 = (int64x2_t *)(v3478 + 8 * (v3474 + (_DWORD)v3477 * v3475));
            v3482 = *(int64x2_t *)(v3476 + 32);
            v3481 = *(int64x2_t *)(v3476 + 48);
            v3483 = *(int64x2_t *)(v3476 + 16);
            v3484 = *(int64x2_t *)(v3476 + 120);
            v3485 = *(int64x2_t *)(v3476 + 104);
            v3486 = *(int64x2_t *)(v3476 + 88);
            v3487 = *(int64x2_t *)(v3476 + 72);
            v3488.i64[0] = *(_QWORD *)(v3476 + 208);
            v3490 = *(int64x2_t *)(v3476 + 176);
            v3489 = *(int64x2_t *)(v3476 + 192);
            v3492 = *(int64x2_t *)(v3476 + 144);
            v3491 = *(int64x2_t *)(v3476 + 160);
            v3493 = *(int64x2_t *)(v3476 + 216);
            v3494 = *(int64x2_t *)(v3476 + 264);
            v3495 = *(int64x2_t *)(v3476 + 248);
            v3496 = *(int64x2_t *)(v3476 + 232);
            v3497.i64[0] = *(_QWORD *)(v3476 + 352);
            v3499 = *(int64x2_t *)(v3476 + 320);
            v3498 = *(int64x2_t *)(v3476 + 336);
            v3501 = *(int64x2_t *)(v3476 + 288);
            v3500 = *(int64x2_t *)(v3476 + 304);
            v3502 = *(int64x2_t *)(v3476 + 392);
            v3503 = *(int64x2_t *)(v3476 + 408);
            v3504 = *(int64x2_t *)(v3476 + 376);
            v3505 = vzip1q_s64(*(int64x2_t *)v3476, v3487);
            v3506 = vzip1q_s64(v3501, *(int64x2_t *)(v3476 + 360));
            v3507 = vzip1q_s64(v3492, v3493);
            v3508 = vzip2q_s64(*(int64x2_t *)v3476, v3487);
            v3509 = vzip2q_s64(v3492, v3493);
            v3510 = vzip2q_s64(v3501, *(int64x2_t *)(v3476 + 360));
            v3479.i64[1] = *(_QWORD *)(v3476 + 136);
            v3488.i64[1] = *(_QWORD *)(v3476 + 280);
            v3497.i64[1] = *(_QWORD *)(v3476 + 424);
            v3480[1] = v3507;
            v3480[2] = v3506;
            *v3480 = v3505;
            v3511 = (int64x2_t *)((char *)v3480 + 8 * v3477);
            v3511[1] = v3509;
            v3511[2] = v3510;
            *v3511 = v3508;
            v3512 = &v3480[v3477];
            v3512[1] = vzip1q_s64(v3491, v3496);
            v3512[2] = vzip1q_s64(v3500, v3504);
            *v3512 = vzip1q_s64(v3483, v3486);
            v3513 = (int64x2_t *)((char *)v3480 + 24 * v3477);
            v3513[1] = vzip2q_s64(v3491, v3496);
            v3513[2] = vzip2q_s64(v3500, v3504);
            *v3513 = vzip2q_s64(v3483, v3486);
            v3514 = &v3480[2 * v3477];
            v3514[1] = vzip1q_s64(v3490, v3495);
            v3514[2] = vzip1q_s64(v3499, v3502);
            *v3514 = vzip1q_s64(v3482, v3485);
            v3515 = (int64x2_t *)((char *)v3480 + 40 * v3477);
            v3515[1] = vzip2q_s64(v3490, v3495);
            v3515[2] = vzip2q_s64(v3499, v3502);
            *v3515 = vzip2q_s64(v3482, v3485);
            v3516 = &v3480[3 * v3477];
            v3516[1] = vzip1q_s64(v3489, v3494);
            v3516[2] = vzip1q_s64(v3498, v3503);
            *v3516 = vzip1q_s64(v3481, v3484);
            v3517 = (int64x2_t *)((char *)v3480 + 56 * v3477);
            v3517[1] = vzip2q_s64(v3489, v3494);
            v3517[2] = vzip2q_s64(v3498, v3503);
            *v3517 = vzip2q_s64(v3481, v3484);
            v3518 = &v3480[4 * v3477];
            v3518[1] = v3488;
            v3518[2] = v3497;
            *v3518 = v3479;
            v3438 += 4;
          }
          while (v3438 != v3437);
LABEL_790:
          v3431 = *(unsigned int *)(a1 + 5172);
        }
        ++v3432;
        ++v3433;
      }
      while (v3432 < v3431);
    }
    v3540 = *(unsigned int *)(a1 + 6180);
    if ((_DWORD)v3540)
    {
      v3541 = 0;
      v3542 = *(unsigned int **)(a1 + 10616);
      do
      {
        v3543 = *(_QWORD *)(*(_QWORD *)(a1 + 6288) + 8 * v3541);
        if (v3543)
        {
          v3544 = *(_QWORD *)(a1 + 6256);
          v3545 = (*(_DWORD *)(a1 + 6280) * v3541);
          v3546 = (unsigned int *)(v3544 + 16 * (v3543 + v3545));
          v3547 = (unsigned int *)(v3544 + 16 * v3545);
          do
          {
            while (1)
            {
              v3571 = *v3542;
              v3572 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3547);
              v3573 = *(_QWORD *)(a1 + 6184) + 8 * *((_QWORD *)v3547 + 1);
              v3574 = *v6;
              v3575 = *(_QWORD *)(a1 + 20040);
              if (*v3542 >= v3572)
                break;
              v3548 = *(_QWORD *)(v3573 + 64);
              v3549 = v3575 + 8 * (v3572 + (_DWORD)v3574 * v3571);
              v3550 = *(_OWORD *)(v3573 + 48);
              v3551 = *(int64x2_t *)v3573;
              v3552 = *(_OWORD *)(v3573 + 16);
              v3553 = *(_OWORD *)(v3573 + 72);
              v3554 = *(_OWORD *)(v3573 + 88);
              v3555 = *(_OWORD *)(v3573 + 104);
              v3556 = *(_OWORD *)(v3573 + 120);
              v3557 = *(_QWORD *)(v3573 + 136);
              v3558 = *(_OWORD *)(v3573 + 144);
              v3559 = *(_OWORD *)(v3573 + 160);
              v3560 = *(_OWORD *)(v3573 + 176);
              v3561 = *(_OWORD *)(v3573 + 192);
              v3562 = *(_QWORD *)(v3573 + 208);
              v3563 = *(_OWORD *)(v3573 + 232);
              v3564 = *(_OWORD *)(v3573 + 248);
              v3565 = *(_OWORD *)(v3573 + 216);
              v3566 = *(_OWORD *)(v3573 + 264);
              v3567 = *(_QWORD *)(v3573 + 280);
              *(_OWORD *)(v3549 + 32) = *(_OWORD *)(v3573 + 32);
              *(_OWORD *)(v3549 + 48) = v3550;
              *(_QWORD *)(v3549 + 64) = v3548;
              *(int64x2_t *)v3549 = v3551;
              *(_OWORD *)(v3549 + 16) = v3552;
              v3568 = v3549 + 8 * v3574;
              *(_QWORD *)(v3568 + 64) = v3557;
              *(_OWORD *)(v3568 + 32) = v3555;
              *(_OWORD *)(v3568 + 48) = v3556;
              *(_OWORD *)v3568 = v3553;
              *(_OWORD *)(v3568 + 16) = v3554;
              v3569 = v3549 + 16 * v3574;
              *(_QWORD *)(v3569 + 64) = v3562;
              *(_OWORD *)(v3569 + 32) = v3560;
              *(_OWORD *)(v3569 + 48) = v3561;
              *(_OWORD *)v3569 = v3558;
              *(_OWORD *)(v3569 + 16) = v3559;
              v3570 = v3549 + 24 * v3574;
              *(_QWORD *)(v3570 + 64) = v3567;
              *(_OWORD *)(v3570 + 32) = v3564;
              *(_OWORD *)(v3570 + 48) = v3566;
              *(_OWORD *)v3570 = v3565;
              *(_OWORD *)(v3570 + 16) = v3563;
              v3547 += 4;
              if (v3547 == v3546)
                goto LABEL_810;
            }
            v3576.i64[0] = *(_QWORD *)(v3573 + 64);
            v3577 = (int64x2_t *)(v3575 + 8 * (v3571 + (_DWORD)v3574 * v3572));
            v3579 = *(int64x2_t *)(v3573 + 32);
            v3578 = *(int64x2_t *)(v3573 + 48);
            v3580 = *(int64x2_t *)(v3573 + 16);
            v3581 = *(int64x2_t *)(v3573 + 120);
            v3582 = *(int64x2_t *)(v3573 + 104);
            v3583 = *(int64x2_t *)(v3573 + 88);
            v3584 = *(int64x2_t *)(v3573 + 72);
            v3585.i64[0] = *(_QWORD *)(v3573 + 208);
            v3587 = *(int64x2_t *)(v3573 + 176);
            v3586 = *(int64x2_t *)(v3573 + 192);
            v3589 = *(int64x2_t *)(v3573 + 144);
            v3588 = *(int64x2_t *)(v3573 + 160);
            v3590 = *(int64x2_t *)(v3573 + 216);
            v3591 = *(int64x2_t *)(v3573 + 264);
            v3592 = *(int64x2_t *)(v3573 + 248);
            v3593 = *(int64x2_t *)(v3573 + 232);
            v3594 = vzip2q_s64(*(int64x2_t *)v3573, v3584);
            v3576.i64[1] = *(_QWORD *)(v3573 + 136);
            v3585.i64[1] = *(_QWORD *)(v3573 + 280);
            *v3577 = vzip1q_s64(*(int64x2_t *)v3573, v3584);
            v3577[1] = vzip1q_s64(v3589, v3590);
            v3595 = (int64x2_t *)((char *)v3577 + 8 * v3574);
            *v3595 = v3594;
            v3595[1] = vzip2q_s64(v3589, v3590);
            v3596 = &v3577[v3574];
            *v3596 = vzip1q_s64(v3580, v3583);
            v3596[1] = vzip1q_s64(v3588, v3593);
            v3597 = (int64x2_t *)((char *)v3577 + 24 * v3574);
            *v3597 = vzip2q_s64(v3580, v3583);
            v3597[1] = vzip2q_s64(v3588, v3593);
            v3598 = &v3577[2 * v3574];
            *v3598 = vzip1q_s64(v3579, v3582);
            v3598[1] = vzip1q_s64(v3587, v3592);
            v3599 = (int64x2_t *)((char *)v3577 + 40 * v3574);
            *v3599 = vzip2q_s64(v3579, v3582);
            v3599[1] = vzip2q_s64(v3587, v3592);
            v3600 = &v3577[3 * v3574];
            *v3600 = vzip1q_s64(v3578, v3581);
            v3600[1] = vzip1q_s64(v3586, v3591);
            v3601 = (int64x2_t *)((char *)v3577 + 56 * v3574);
            *v3601 = vzip2q_s64(v3578, v3581);
            v3601[1] = vzip2q_s64(v3586, v3591);
            v3602 = &v3577[4 * v3574];
            *v3602 = v3576;
            v3602[1] = v3585;
            v3547 += 4;
          }
          while (v3547 != v3546);
LABEL_810:
          v3540 = *(unsigned int *)(a1 + 6180);
        }
        ++v3541;
        ++v3542;
      }
      while (v3541 < v3540);
    }
    v3666 = *(unsigned int *)(a1 + 7188);
    if ((_DWORD)v3666)
    {
      v3667 = 0;
      v3668 = *(unsigned int **)(a1 + 10640);
      do
      {
        v3669 = *(_QWORD *)(*(_QWORD *)(a1 + 7296) + 8 * v3667);
        if (v3669)
        {
          v3670 = *(_QWORD *)(a1 + 7264);
          v3671 = (*(_DWORD *)(a1 + 7288) * v3667);
          v3672 = (unsigned int *)(v3670 + 16 * (v3669 + v3671));
          v3673 = (unsigned int *)(v3670 + 16 * v3671);
          do
          {
            while (1)
            {
              v3697 = *v3668;
              v3698 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3673);
              v3699 = *(_QWORD *)(a1 + 7192) + 8 * *((_QWORD *)v3673 + 1);
              v3700 = *v6;
              v3701 = *(_QWORD *)(a1 + 20040);
              if (*v3668 >= v3698)
                break;
              v3674 = *(_QWORD *)(v3699 + 64);
              v3675 = v3701 + 8 * (v3698 + (_DWORD)v3700 * v3697);
              v3676 = *(_OWORD *)(v3699 + 48);
              v3677 = *(int64x2_t *)v3699;
              v3678 = *(_OWORD *)(v3699 + 16);
              v3679 = *(_OWORD *)(v3699 + 72);
              v3680 = *(_OWORD *)(v3699 + 88);
              v3681 = *(_OWORD *)(v3699 + 104);
              v3682 = *(_OWORD *)(v3699 + 120);
              v3683 = *(_QWORD *)(v3699 + 136);
              v3684 = *(_OWORD *)(v3699 + 144);
              v3685 = *(_OWORD *)(v3699 + 160);
              v3686 = *(_OWORD *)(v3699 + 176);
              v3687 = *(_OWORD *)(v3699 + 192);
              v3688 = *(_QWORD *)(v3699 + 208);
              v3689 = *(_OWORD *)(v3699 + 232);
              v3690 = *(_OWORD *)(v3699 + 248);
              v3691 = *(_OWORD *)(v3699 + 216);
              v3692 = *(_OWORD *)(v3699 + 264);
              v3693 = *(_QWORD *)(v3699 + 280);
              *(_OWORD *)(v3675 + 32) = *(_OWORD *)(v3699 + 32);
              *(_OWORD *)(v3675 + 48) = v3676;
              *(_QWORD *)(v3675 + 64) = v3674;
              *(int64x2_t *)v3675 = v3677;
              *(_OWORD *)(v3675 + 16) = v3678;
              v3694 = v3675 + 8 * v3700;
              *(_QWORD *)(v3694 + 64) = v3683;
              *(_OWORD *)(v3694 + 32) = v3681;
              *(_OWORD *)(v3694 + 48) = v3682;
              *(_OWORD *)v3694 = v3679;
              *(_OWORD *)(v3694 + 16) = v3680;
              v3695 = v3675 + 16 * v3700;
              *(_QWORD *)(v3695 + 64) = v3688;
              *(_OWORD *)(v3695 + 32) = v3686;
              *(_OWORD *)(v3695 + 48) = v3687;
              *(_OWORD *)v3695 = v3684;
              *(_OWORD *)(v3695 + 16) = v3685;
              v3696 = v3675 + 24 * v3700;
              *(_QWORD *)(v3696 + 64) = v3693;
              *(_OWORD *)(v3696 + 32) = v3690;
              *(_OWORD *)(v3696 + 48) = v3692;
              *(_OWORD *)v3696 = v3691;
              *(_OWORD *)(v3696 + 16) = v3689;
              v3673 += 4;
              if (v3673 == v3672)
                goto LABEL_830;
            }
            v3702.i64[0] = *(_QWORD *)(v3699 + 64);
            v3703 = (int64x2_t *)(v3701 + 8 * (v3697 + (_DWORD)v3700 * v3698));
            v3705 = *(int64x2_t *)(v3699 + 32);
            v3704 = *(int64x2_t *)(v3699 + 48);
            v3706 = *(int64x2_t *)(v3699 + 16);
            v3707 = *(int64x2_t *)(v3699 + 120);
            v3708 = *(int64x2_t *)(v3699 + 104);
            v3709 = *(int64x2_t *)(v3699 + 88);
            v3710 = *(int64x2_t *)(v3699 + 72);
            v3711.i64[0] = *(_QWORD *)(v3699 + 208);
            v3713 = *(int64x2_t *)(v3699 + 176);
            v3712 = *(int64x2_t *)(v3699 + 192);
            v3715 = *(int64x2_t *)(v3699 + 144);
            v3714 = *(int64x2_t *)(v3699 + 160);
            v3716 = *(int64x2_t *)(v3699 + 216);
            v3717 = *(int64x2_t *)(v3699 + 264);
            v3718 = *(int64x2_t *)(v3699 + 248);
            v3719 = *(int64x2_t *)(v3699 + 232);
            v3720 = vzip2q_s64(*(int64x2_t *)v3699, v3710);
            v3702.i64[1] = *(_QWORD *)(v3699 + 136);
            v3711.i64[1] = *(_QWORD *)(v3699 + 280);
            *v3703 = vzip1q_s64(*(int64x2_t *)v3699, v3710);
            v3703[1] = vzip1q_s64(v3715, v3716);
            v3721 = (int64x2_t *)((char *)v3703 + 8 * v3700);
            *v3721 = v3720;
            v3721[1] = vzip2q_s64(v3715, v3716);
            v3722 = &v3703[v3700];
            *v3722 = vzip1q_s64(v3706, v3709);
            v3722[1] = vzip1q_s64(v3714, v3719);
            v3723 = (int64x2_t *)((char *)v3703 + 24 * v3700);
            *v3723 = vzip2q_s64(v3706, v3709);
            v3723[1] = vzip2q_s64(v3714, v3719);
            v3724 = &v3703[2 * v3700];
            *v3724 = vzip1q_s64(v3705, v3708);
            v3724[1] = vzip1q_s64(v3713, v3718);
            v3725 = (int64x2_t *)((char *)v3703 + 40 * v3700);
            *v3725 = vzip2q_s64(v3705, v3708);
            v3725[1] = vzip2q_s64(v3713, v3718);
            v3726 = &v3703[3 * v3700];
            *v3726 = vzip1q_s64(v3704, v3707);
            v3726[1] = vzip1q_s64(v3712, v3717);
            v3727 = (int64x2_t *)((char *)v3703 + 56 * v3700);
            *v3727 = vzip2q_s64(v3704, v3707);
            v3727[1] = vzip2q_s64(v3712, v3717);
            v3728 = &v3703[4 * v3700];
            *v3728 = v3702;
            v3728[1] = v3711;
            v3673 += 4;
          }
          while (v3673 != v3672);
LABEL_830:
          v3666 = *(unsigned int *)(a1 + 7188);
        }
        ++v3667;
        ++v3668;
      }
      while (v3667 < v3666);
    }
    v3775 = *(unsigned int *)(a1 + 8196);
    if ((_DWORD)v3775)
    {
      v3776 = 0;
      v3777 = *(unsigned int **)(a1 + 10664);
      do
      {
        v3778 = *(_QWORD *)(*(_QWORD *)(a1 + 8304) + 8 * v3776);
        if (v3778)
        {
          v3779 = *(_QWORD *)(a1 + 8272);
          v3780 = (*(_DWORD *)(a1 + 8296) * v3776);
          v3781 = (unsigned int *)(v3779 + 16 * (v3778 + v3780));
          v3782 = (unsigned int *)(v3779 + 16 * v3780);
          do
          {
            while (1)
            {
              v3800 = *v3777;
              v3801 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3782);
              v3802 = *(_QWORD *)(a1 + 8200) + 8 * *((_QWORD *)v3782 + 1);
              v3803 = *v6;
              v3804 = *(_QWORD *)(a1 + 20040);
              if (*v3777 >= v3801)
                break;
              v3783 = *(_QWORD *)(v3802 + 64);
              v3784 = v3804 + 8 * (v3801 + (_DWORD)v3803 * v3800);
              v3785 = *(_OWORD *)(v3802 + 48);
              v3786 = *(int64x2_t *)v3802;
              v3787 = *(_OWORD *)(v3802 + 16);
              v3788 = *(_OWORD *)(v3802 + 72);
              v3789 = *(_OWORD *)(v3802 + 88);
              v3790 = *(_OWORD *)(v3802 + 104);
              v3791 = *(_OWORD *)(v3802 + 120);
              v3792 = *(_QWORD *)(v3802 + 136);
              v3793 = *(_OWORD *)(v3802 + 144);
              v3794 = *(_OWORD *)(v3802 + 160);
              v3795 = *(_OWORD *)(v3802 + 176);
              v3796 = *(_OWORD *)(v3802 + 192);
              v3797 = *(_QWORD *)(v3802 + 208);
              *(_OWORD *)(v3784 + 32) = *(_OWORD *)(v3802 + 32);
              *(_OWORD *)(v3784 + 48) = v3785;
              *(_QWORD *)(v3784 + 64) = v3783;
              *(int64x2_t *)v3784 = v3786;
              *(_OWORD *)(v3784 + 16) = v3787;
              v3798 = v3784 + 8 * v3803;
              *(_QWORD *)(v3798 + 64) = v3792;
              *(_OWORD *)(v3798 + 32) = v3790;
              *(_OWORD *)(v3798 + 48) = v3791;
              *(_OWORD *)v3798 = v3788;
              *(_OWORD *)(v3798 + 16) = v3789;
              v3799 = v3784 + 16 * v3803;
              *(_QWORD *)(v3799 + 64) = v3797;
              *(_OWORD *)(v3799 + 32) = v3795;
              *(_OWORD *)(v3799 + 48) = v3796;
              *(_OWORD *)v3799 = v3793;
              *(_OWORD *)(v3799 + 16) = v3794;
              v3782 += 4;
              if (v3782 == v3781)
                goto LABEL_850;
            }
            v3805.i64[0] = *(_QWORD *)(v3802 + 64);
            v3806 = (int64x2_t *)(v3804 + 8 * (v3800 + (_DWORD)v3803 * v3801));
            v3808 = *(int64x2_t *)(v3802 + 32);
            v3807 = *(int64x2_t *)(v3802 + 48);
            v3809 = *(int64x2_t *)(v3802 + 16);
            v3810 = *(int64x2_t *)(v3802 + 120);
            v3811 = *(int64x2_t *)(v3802 + 104);
            v3812 = *(int64x2_t *)(v3802 + 88);
            v3813 = *(int64x2_t *)(v3802 + 72);
            v3814 = *(_QWORD *)(v3802 + 208);
            v3816 = *(_OWORD *)(v3802 + 176);
            v3815 = *(_OWORD *)(v3802 + 192);
            v3818 = *(_OWORD *)(v3802 + 144);
            v3817 = *(_OWORD *)(v3802 + 160);
            v3819 = vzip1q_s64(*(int64x2_t *)v3802, v3813);
            v3820 = vzip2q_s64(*(int64x2_t *)v3802, v3813);
            v3805.i64[1] = *(_QWORD *)(v3802 + 136);
            v3806[1].i64[0] = v3818;
            *v3806 = v3819;
            v3821 = (int64x2_t *)((char *)v3806 + 8 * v3803);
            *v3821 = v3820;
            v3821[1].i64[0] = *((_QWORD *)&v3818 + 1);
            v3822 = &v3806[v3803];
            v3822[1].i64[0] = v3817;
            *v3822 = vzip1q_s64(v3809, v3812);
            v3823 = (int64x2_t *)((char *)v3806 + 24 * v3803);
            v3823[1].i64[0] = *((_QWORD *)&v3817 + 1);
            *v3823 = vzip2q_s64(v3809, v3812);
            v3824 = &v3806[2 * v3803];
            v3824[1].i64[0] = v3816;
            *v3824 = vzip1q_s64(v3808, v3811);
            v3825 = (int64x2_t *)((char *)v3806 + 40 * v3803);
            v3825[1].i64[0] = *((_QWORD *)&v3816 + 1);
            *v3825 = vzip2q_s64(v3808, v3811);
            v3826 = &v3806[3 * v3803];
            v3826[1].i64[0] = v3815;
            *v3826 = vzip1q_s64(v3807, v3810);
            v3827 = (int64x2_t *)((char *)v3806 + 56 * v3803);
            v3827[1].i64[0] = *((_QWORD *)&v3815 + 1);
            *v3827 = vzip2q_s64(v3807, v3810);
            v3828 = &v3806[4 * v3803];
            v3828[1].i64[0] = v3814;
            *v3828 = v3805;
            v3782 += 4;
          }
          while (v3782 != v3781);
LABEL_850:
          v3775 = *(unsigned int *)(a1 + 8196);
        }
        ++v3776;
        ++v3777;
      }
      while (v3776 < v3775);
    }
    v3875 = *(unsigned int *)(a1 + 2004);
    if ((_DWORD)v3875)
    {
      v3876 = 0;
      v3877 = *(unsigned int **)(a1 + 10520);
      do
      {
        v3878 = *(_QWORD *)(*(_QWORD *)(a1 + 2112) + 8 * v3876);
        if (v3878)
        {
          v3879 = *(_QWORD *)(a1 + 2080);
          v3880 = (*(_DWORD *)(a1 + 2104) * v3876);
          v3881 = (unsigned int *)(v3879 + 16 * (v3878 + v3880));
          v3882 = (unsigned int *)(v3879 + 16 * v3880);
          do
          {
            v3918 = *v3877;
            v3919 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3882);
            v3920 = *(_QWORD *)(a1 + 2008) + 8 * *((_QWORD *)v3882 + 1);
            v3921 = *v6;
            v3922 = *(_QWORD *)(a1 + 20040);
            if (*v3877 < v3919)
            {
              v3883 = *(int64x2_t *)v3920;
              v3884 = (int64x2_t *)(v3922 + 8 * (v3919 + (_DWORD)v3921 * v3918));
              v3885 = *(int64x2_t *)(v3920 + 32);
              v3886 = *(int64x2_t *)(v3920 + 48);
              v3887 = *(int64x2_t *)(v3920 + 64);
              v3888 = *(int64x2_t *)(v3920 + 80);
              v3890 = *(int8x16_t *)(v3920 + 96);
              v3889 = *(int8x16_t *)(v3920 + 112);
              v3891 = *(int8x16_t *)(v3920 + 128);
              v3892 = *(int8x16_t *)(v3920 + 144);
              v3893 = vextq_s8(v3891, v3891, 8uLL).u64[0];
              v3894 = vextq_s8(v3889, v3889, 8uLL).u64[0];
              v3895 = vextq_s8(v3890, v3890, 8uLL).u64[0];
              v3896 = *(int8x16_t *)(v3920 + 160);
              v3897 = *(int8x16_t *)(v3920 + 176);
              v3898 = vextq_s8(v3897, v3897, 8uLL).u64[0];
              v3899 = vextq_s8(v3896, v3896, 8uLL).u64[0];
              v3900 = vextq_s8(v3892, v3892, 8uLL).u64[0];
              v3902 = *(int8x16_t *)(v3920 + 192);
              v3901 = *(int8x16_t *)(v3920 + 208);
              v3904 = *(int8x16_t *)(v3920 + 224);
              v3903 = *(int8x16_t *)(v3920 + 240);
              v3905 = vextq_s8(v3904, v3904, 8uLL).u64[0];
              v3906 = vextq_s8(v3901, v3901, 8uLL).u64[0];
              v3907 = vextq_s8(v3902, v3902, 8uLL).u64[0];
              v3908 = *(int8x16_t *)(v3920 + 256);
              v3909 = *(int8x16_t *)(v3920 + 272);
              v3910 = vextq_s8(v3909, v3909, 8uLL).u64[0];
              v3911 = vextq_s8(v3908, v3908, 8uLL).u64[0];
              v3912 = vextq_s8(v3903, v3903, 8uLL).u64[0];
              v3884[1] = *(int64x2_t *)(v3920 + 16);
              v3884[2] = v3885;
              *v3884 = v3883;
              v3913 = (int64x2_t *)((char *)v3884 + 8 * v3921);
              v3913[1] = v3887;
            }
            else
            {
              v3884 = (int64x2_t *)(v3922 + 8 * (v3918 + (_DWORD)v3921 * v3919));
              v3923 = *(int64x2_t *)(v3920 + 16);
              v3924 = *(int64x2_t *)(v3920 + 64);
              v3925 = *(int64x2_t *)(v3920 + 80);
              v3927 = *(int64x2_t *)(v3920 + 32);
              v3926 = *(int64x2_t *)(v3920 + 48);
              v3928 = *(int64x2_t *)(v3920 + 96);
              v3929 = *(int64x2_t *)(v3920 + 112);
              v3930 = *(int64x2_t *)(v3920 + 128);
              v3932 = *(int64x2_t *)(v3920 + 192);
              v3931 = *(int64x2_t *)(v3920 + 208);
              v3933 = *(int64x2_t *)(v3920 + 224);
              v3934 = vzip1q_s64(*(int64x2_t *)v3920, v3926);
              v3935 = vzip1q_s64(v3928, *(int64x2_t *)(v3920 + 144));
              v3936 = vzip1q_s64(v3932, *(int64x2_t *)(v3920 + 240));
              v3937.i64[0] = vdupq_laneq_s64(v3928, 1).u64[0];
              v3937.i64[1] = *(_QWORD *)(v3920 + 152);
              v3886 = vzip2q_s64(*(int64x2_t *)v3920, v3926);
              v3888.i64[0] = vdupq_laneq_s64(v3932, 1).u64[0];
              v3888.i64[1] = *(_QWORD *)(v3920 + 248);
              v3890 = (int8x16_t)vzip1q_s64(v3923, v3924);
              v3889 = (int8x16_t)vzip1q_s64(v3929, *(int64x2_t *)(v3920 + 160));
              v3891 = (int8x16_t)vzip1q_s64(v3931, *(int64x2_t *)(v3920 + 256));
              v3893 = vextq_s8(v3891, v3891, 8uLL).u64[0];
              v3894 = vextq_s8(v3889, v3889, 8uLL).u64[0];
              v3895 = vextq_s8(v3890, v3890, 8uLL).u64[0];
              v3892 = (int8x16_t)vzip2q_s64(v3923, v3924);
              v3896.i64[0] = vdupq_laneq_s64(v3929, 1).u64[0];
              v3896.i64[1] = *(_QWORD *)(v3920 + 168);
              v3897.i64[0] = vdupq_laneq_s64(v3931, 1).u64[0];
              v3897.i64[1] = *(_QWORD *)(v3920 + 264);
              v3900 = vextq_s8(v3892, v3892, 8uLL).u64[0];
              v3898 = vextq_s8(v3897, v3897, 8uLL).u64[0];
              v3899 = vextq_s8(v3896, v3896, 8uLL).u64[0];
              v3902 = (int8x16_t)vzip1q_s64(v3927, v3925);
              v3901 = (int8x16_t)vzip1q_s64(v3930, *(int64x2_t *)(v3920 + 176));
              v3904 = (int8x16_t)vzip1q_s64(v3933, *(int64x2_t *)(v3920 + 272));
              v3905 = vextq_s8(v3904, v3904, 8uLL).u64[0];
              v3906 = vextq_s8(v3901, v3901, 8uLL).u64[0];
              v3907 = vextq_s8(v3902, v3902, 8uLL).u64[0];
              v3903 = (int8x16_t)vzip2q_s64(v3927, v3925);
              v3908.i64[0] = vdupq_laneq_s64(v3930, 1).u64[0];
              v3908.i64[1] = *(_QWORD *)(v3920 + 184);
              v3909.i64[0] = vdupq_laneq_s64(v3933, 1).u64[0];
              v3909.i64[1] = *(_QWORD *)(v3920 + 280);
              v3912 = vextq_s8(v3903, v3903, 8uLL).u64[0];
              v3910 = vextq_s8(v3909, v3909, 8uLL).u64[0];
              v3911 = vextq_s8(v3908, v3908, 8uLL).u64[0];
              v3884[1] = v3935;
              v3884[2] = v3936;
              *v3884 = v3934;
              v3913 = (int64x2_t *)((char *)v3884 + 8 * v3921);
              v3913[1] = v3937;
            }
            v3913[2] = v3888;
            *v3913 = v3886;
            v3890.i64[1] = v3895;
            v3889.i64[1] = v3894;
            v3914 = (int8x16_t *)&v3884[v3921];
            *v3914 = v3890;
            v3914[1] = v3889;
            v3891.i64[1] = v3893;
            v3914[2] = v3891;
            v3897.i64[1] = v3898;
            v3915 = (int8x16_t *)((char *)v3884 + 24 * v3921);
            v3896.i64[1] = v3899;
            v3892.i64[1] = v3900;
            v3915[1] = v3896;
            v3915[2] = v3897;
            *v3915 = v3892;
            v3916 = (int8x16_t *)&v3884[2 * v3921];
            v3904.i64[1] = v3905;
            v3901.i64[1] = v3906;
            v3902.i64[1] = v3907;
            v3916[1] = v3901;
            v3916[2] = v3904;
            *v3916 = v3902;
            v3917 = (int8x16_t *)((char *)v3884 + 40 * v3921);
            v3909.i64[1] = v3910;
            v3908.i64[1] = v3911;
            v3903.i64[1] = v3912;
            v3882 += 4;
            v3917[1] = v3908;
            v3917[2] = v3909;
            *v3917 = v3903;
          }
          while (v3882 != v3881);
          v3875 = *(unsigned int *)(a1 + 2004);
        }
        ++v3876;
        ++v3877;
      }
      while (v3876 < v3875);
    }
    v3978 = *(unsigned int *)(a1 + 3012);
    if ((_DWORD)v3978)
    {
      v3979 = 0;
      v3980 = *(unsigned int **)(a1 + 10544);
      do
      {
        v3981 = *(_QWORD *)(*(_QWORD *)(a1 + 3120) + 8 * v3979);
        if (v3981)
        {
          v3982 = *(_QWORD *)(a1 + 3088);
          v3983 = (*(_DWORD *)(a1 + 3112) * v3979);
          v3984 = (unsigned int *)(v3982 + 16 * (v3981 + v3983));
          v3985 = (unsigned int *)(v3982 + 16 * v3983);
          do
          {
            while (1)
            {
              v4021 = *v3980;
              v4022 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3985);
              v4023 = *(_QWORD *)(a1 + 3016) + 8 * *((_QWORD *)v3985 + 1);
              v4024 = *v6;
              v4025 = *(_QWORD *)(a1 + 20040);
              if (*v3980 >= v4022)
                break;
              v3986 = *(int64x2_t *)v4023;
              v3987 = (int64x2_t *)(v4025 + 8 * (v4022 + (_DWORD)v4024 * v4021));
              v3988 = *(int64x2_t *)(v4023 + 32);
              v3989 = *(_OWORD *)(v4023 + 48);
              v3990 = *(_OWORD *)(v4023 + 64);
              v3991 = *(_OWORD *)(v4023 + 80);
              v3992 = *(int64x2_t *)(v4023 + 96);
              v3993 = *(int64x2_t *)(v4023 + 112);
              v3994 = *(int64x2_t *)(v4023 + 128);
              v3995 = *(_OWORD *)(v4023 + 144);
              v3996 = *(_OWORD *)(v4023 + 160);
              v3997 = *(_OWORD *)(v4023 + 176);
              v3998 = *(int64x2_t *)(v4023 + 192);
              v3999 = *(int64x2_t *)(v4023 + 208);
              v4000 = *(int64x2_t *)(v4023 + 224);
              v4001 = *(_OWORD *)(v4023 + 240);
              v4002 = *(_OWORD *)(v4023 + 256);
              v4003 = *(_OWORD *)(v4023 + 272);
              v4004 = *(int64x2_t *)(v4023 + 288);
              v4005 = *(int64x2_t *)(v4023 + 304);
              v4006 = *(int64x2_t *)(v4023 + 320);
              v4007 = *(_OWORD *)(v4023 + 336);
              v4008 = *(_OWORD *)(v4023 + 352);
              v4009 = *(_OWORD *)(v4023 + 368);
              v4010 = *(int64x2_t *)(v4023 + 384);
              v4011 = *(int64x2_t *)(v4023 + 400);
              v4012 = *(int64x2_t *)(v4023 + 416);
              v3987[1] = *(int64x2_t *)(v4023 + 16);
              v3987[2] = v3988;
              *v3987 = v3986;
              v4013 = &v3987->i8[8 * v4024];
              *((_OWORD *)v4013 + 1) = v3990;
              *((_OWORD *)v4013 + 2) = v3991;
              *(_OWORD *)v4013 = v3989;
              v4014 = &v3987[v4024];
              v4014[1] = v3993;
              v4014[2] = v3994;
              *v4014 = v3992;
              v4015 = &v3987->i8[24 * v4024];
              *((_OWORD *)v4015 + 1) = v3996;
              *((_OWORD *)v4015 + 2) = v3997;
              *(_OWORD *)v4015 = v3995;
              v4016 = &v3987[2 * v4024];
              v4016[1] = v3999;
              v4016[2] = v4000;
              *v4016 = v3998;
              v4017 = &v3987->i8[40 * v4024];
              *((_OWORD *)v4017 + 1) = v4002;
              *((_OWORD *)v4017 + 2) = v4003;
              *(_OWORD *)v4017 = v4001;
              v4018 = &v3987[3 * v4024];
              v4018[1] = v4005;
              v4018[2] = v4006;
              *v4018 = v4004;
              v4019 = &v3987->i8[56 * v4024];
              *((_OWORD *)v4019 + 1) = v4008;
              *((_OWORD *)v4019 + 2) = v4009;
              *(_OWORD *)v4019 = v4007;
              v4020 = &v3987[4 * v4024];
              v4020[1] = v4011;
              v4020[2] = v4012;
              *v4020 = v4010;
              v3985 += 4;
              if (v3985 == v3984)
                goto LABEL_890;
            }
            v4026 = *(int64x2_t *)(v4023 + 16);
            v4027 = (int64x2_t *)(v4025 + 8 * (v4021 + (_DWORD)v4024 * v4022));
            v4029 = *(int64x2_t *)(v4023 + 64);
            v4028 = *(int64x2_t *)(v4023 + 80);
            v4030 = *(int64x2_t *)(v4023 + 32);
            v4031 = *(int64x2_t *)(v4023 + 48);
            v4033 = *(int64x2_t *)(v4023 + 96);
            v4032 = *(int64x2_t *)(v4023 + 112);
            v4035 = *(int64x2_t *)(v4023 + 160);
            v4034 = *(int64x2_t *)(v4023 + 176);
            v4036 = *(int64x2_t *)(v4023 + 128);
            v4037 = *(int64x2_t *)(v4023 + 144);
            v4039 = *(int64x2_t *)(v4023 + 192);
            v4038 = *(int64x2_t *)(v4023 + 208);
            v4041 = *(int64x2_t *)(v4023 + 256);
            v4040 = *(int64x2_t *)(v4023 + 272);
            v4042 = *(int64x2_t *)(v4023 + 224);
            v4043 = *(int64x2_t *)(v4023 + 240);
            v4045 = *(int64x2_t *)(v4023 + 288);
            v4044 = *(int64x2_t *)(v4023 + 304);
            v4047 = *(int64x2_t *)(v4023 + 352);
            v4046 = *(int64x2_t *)(v4023 + 368);
            v4049 = *(int64x2_t *)(v4023 + 320);
            v4048 = *(int64x2_t *)(v4023 + 336);
            v4051 = *(_OWORD *)(v4023 + 400);
            v4050 = *(_OWORD *)(v4023 + 416);
            v4052 = *(_OWORD *)(v4023 + 384);
            v4053 = vzip1q_s64(*(int64x2_t *)v4023, v4031);
            v4054 = vzip2q_s64(*(int64x2_t *)v4023, v4031);
            v4027[2] = vzip1q_s64(v4039, v4043);
            v4027[3] = vzip1q_s64(v4045, v4048);
            v4027[4].i64[0] = v4052;
            *v4027 = v4053;
            v4027[1] = vzip1q_s64(v4033, v4037);
            v4055 = (int64x2_t *)((char *)v4027 + 8 * v4024);
            v4055[2] = vzip2q_s64(v4039, v4043);
            v4055[3] = vzip2q_s64(v4045, v4048);
            *v4055 = v4054;
            v4055[1] = vzip2q_s64(v4033, v4037);
            v4055[4].i64[0] = *((_QWORD *)&v4052 + 1);
            v4056 = &v4027[v4024];
            v4056[4].i64[0] = v4051;
            v4056[2] = vzip1q_s64(v4038, v4041);
            v4056[3] = vzip1q_s64(v4044, v4047);
            *v4056 = vzip1q_s64(v4026, v4029);
            v4056[1] = vzip1q_s64(v4032, v4035);
            v4057 = (int64x2_t *)((char *)v4027 + 24 * v4024);
            v4057[4].i64[0] = *((_QWORD *)&v4051 + 1);
            v4057[2] = vzip2q_s64(v4038, v4041);
            v4057[3] = vzip2q_s64(v4044, v4047);
            *v4057 = vzip2q_s64(v4026, v4029);
            v4057[1] = vzip2q_s64(v4032, v4035);
            v4058 = &v4027[2 * v4024];
            v4058[4].i64[0] = v4050;
            v4058[2] = vzip1q_s64(v4042, v4040);
            v4058[3] = vzip1q_s64(v4049, v4046);
            *v4058 = vzip1q_s64(v4030, v4028);
            v4058[1] = vzip1q_s64(v4036, v4034);
            v4059 = (int64x2_t *)((char *)v4027 + 40 * v4024);
            v4059[4].i64[0] = *((_QWORD *)&v4050 + 1);
            v4059[2] = vzip2q_s64(v4042, v4040);
            v4059[3] = vzip2q_s64(v4049, v4046);
            *v4059 = vzip2q_s64(v4030, v4028);
            v4059[1] = vzip2q_s64(v4036, v4034);
            v3985 += 4;
          }
          while (v3985 != v3984);
LABEL_890:
          v3978 = *(unsigned int *)(a1 + 3012);
        }
        ++v3979;
        ++v3980;
      }
      while (v3979 < v3978);
    }
    v4060 = *(unsigned int *)(a1 + 4020);
    if ((_DWORD)v4060)
    {
      v4061 = 0;
      v4062 = *(unsigned int **)(a1 + 10568);
      do
      {
        v4063 = *(_QWORD *)(*(_QWORD *)(a1 + 4128) + 8 * v4061);
        if (v4063)
        {
          v4064 = *(_QWORD *)(a1 + 4096);
          v4065 = (*(_DWORD *)(a1 + 4120) * v4061);
          v4066 = (unsigned int *)(v4064 + 16 * (v4063 + v4065));
          v4067 = (unsigned int *)(v4064 + 16 * v4065);
          do
          {
            while (1)
            {
              v4069 = *v4062;
              v4070 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4067);
              v4071 = (int8x16_t *)(*(_QWORD *)(a1 + 4024) + 8 * *((_QWORD *)v4067 + 1));
              v4072 = *v6;
              v4073 = *(_QWORD *)(a1 + 20040);
              v4075 = v4071[1];
              v4074 = v4071[2];
              v4076 = *v4071;
              v4077 = vextq_s8(v4074, v4074, 8uLL).u64[0];
              v4078 = vextq_s8(v4075, v4075, 8uLL).u64[0];
              v4079 = vextq_s8(v4076, v4076, 8uLL).u64[0];
              if (*v4062 >= v4070)
                break;
              v4076.i64[1] = v4079;
              v4075.i64[1] = v4078;
              v4068 = (int8x16_t *)(v4073 + 8 * (v4070 + (_DWORD)v4072 * v4069));
              *v4068 = v4076;
              v4068[1] = v4075;
              v4074.i64[1] = v4077;
              v4068[2] = v4074;
              v4067 += 4;
              if (v4067 == v4066)
                goto LABEL_900;
            }
            v4080 = (_QWORD *)(v4073 + 8 * (v4069 + (_DWORD)v4072 * v4070));
            *v4080 = v4076.i64[0];
            v4080[v4072] = v4079;
            v4080[2 * v4072] = v4075.i64[0];
            v4080[3 * v4072] = v4078;
            v4080[4 * v4072] = v4074.i64[0];
            v4080[5 * v4072] = v4077;
            v4067 += 4;
          }
          while (v4067 != v4066);
LABEL_900:
          v4060 = *(unsigned int *)(a1 + 4020);
        }
        ++v4061;
        ++v4062;
      }
      while (v4061 < v4060);
    }
    v4081 = *(unsigned int *)(a1 + 5028);
    if ((_DWORD)v4081)
    {
      v4082 = 0;
      v4083 = *(unsigned int **)(a1 + 10592);
      do
      {
        v4084 = *(_QWORD *)(*(_QWORD *)(a1 + 5136) + 8 * v4082);
        if (v4084)
        {
          v4085 = *(_QWORD *)(a1 + 5104);
          v4086 = (*(_DWORD *)(a1 + 5128) * v4082);
          v4087 = (unsigned int *)(v4085 + 16 * (v4084 + v4086));
          v4088 = (unsigned int *)(v4085 + 16 * v4086);
          do
          {
            v4124 = *v4083;
            v4125 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4088);
            v4126 = *(_QWORD *)(a1 + 5032) + 8 * *((_QWORD *)v4088 + 1);
            v4127 = *v6;
            v4128 = *(_QWORD *)(a1 + 20040);
            if (*v4083 < v4125)
            {
              v4089 = *(int64x2_t *)v4126;
              v4090 = (int64x2_t *)(v4128 + 8 * (v4125 + (_DWORD)v4127 * v4124));
              v4091 = *(int64x2_t *)(v4126 + 32);
              v4092 = *(int64x2_t *)(v4126 + 48);
              v4093 = *(int64x2_t *)(v4126 + 64);
              v4094 = *(int64x2_t *)(v4126 + 80);
              v4096 = *(int8x16_t *)(v4126 + 96);
              v4095 = *(int8x16_t *)(v4126 + 112);
              v4097 = *(int8x16_t *)(v4126 + 128);
              v4098 = *(int8x16_t *)(v4126 + 144);
              v4099 = vextq_s8(v4097, v4097, 8uLL).u64[0];
              v4100 = vextq_s8(v4095, v4095, 8uLL).u64[0];
              v4101 = vextq_s8(v4096, v4096, 8uLL).u64[0];
              v4102 = *(int8x16_t *)(v4126 + 160);
              v4103 = *(int8x16_t *)(v4126 + 176);
              v4104 = vextq_s8(v4103, v4103, 8uLL).u64[0];
              v4105 = vextq_s8(v4102, v4102, 8uLL).u64[0];
              v4106 = vextq_s8(v4098, v4098, 8uLL).u64[0];
              v4108 = *(int8x16_t *)(v4126 + 192);
              v4107 = *(int8x16_t *)(v4126 + 208);
              v4110 = *(int8x16_t *)(v4126 + 224);
              v4109 = *(int8x16_t *)(v4126 + 240);
              v4111 = vextq_s8(v4110, v4110, 8uLL).u64[0];
              v4112 = vextq_s8(v4107, v4107, 8uLL).u64[0];
              v4113 = vextq_s8(v4108, v4108, 8uLL).u64[0];
              v4114 = *(int8x16_t *)(v4126 + 256);
              v4115 = *(int8x16_t *)(v4126 + 272);
              v4116 = vextq_s8(v4115, v4115, 8uLL).u64[0];
              v4117 = vextq_s8(v4114, v4114, 8uLL).u64[0];
              v4118 = vextq_s8(v4109, v4109, 8uLL).u64[0];
              v4090[1] = *(int64x2_t *)(v4126 + 16);
              v4090[2] = v4091;
              *v4090 = v4089;
              v4119 = (int64x2_t *)((char *)v4090 + 8 * v4127);
              v4119[1] = v4093;
            }
            else
            {
              v4090 = (int64x2_t *)(v4128 + 8 * (v4124 + (_DWORD)v4127 * v4125));
              v4129 = *(int64x2_t *)(v4126 + 16);
              v4130 = *(int64x2_t *)(v4126 + 64);
              v4131 = *(int64x2_t *)(v4126 + 80);
              v4133 = *(int64x2_t *)(v4126 + 32);
              v4132 = *(int64x2_t *)(v4126 + 48);
              v4134 = *(int64x2_t *)(v4126 + 96);
              v4135 = *(int64x2_t *)(v4126 + 112);
              v4136 = *(int64x2_t *)(v4126 + 128);
              v4138 = *(int64x2_t *)(v4126 + 192);
              v4137 = *(int64x2_t *)(v4126 + 208);
              v4139 = *(int64x2_t *)(v4126 + 224);
              v4140 = vzip1q_s64(*(int64x2_t *)v4126, v4132);
              v4141 = vzip1q_s64(v4134, *(int64x2_t *)(v4126 + 144));
              v4142 = vzip1q_s64(v4138, *(int64x2_t *)(v4126 + 240));
              v4143.i64[0] = vdupq_laneq_s64(v4134, 1).u64[0];
              v4143.i64[1] = *(_QWORD *)(v4126 + 152);
              v4092 = vzip2q_s64(*(int64x2_t *)v4126, v4132);
              v4094.i64[0] = vdupq_laneq_s64(v4138, 1).u64[0];
              v4094.i64[1] = *(_QWORD *)(v4126 + 248);
              v4096 = (int8x16_t)vzip1q_s64(v4129, v4130);
              v4095 = (int8x16_t)vzip1q_s64(v4135, *(int64x2_t *)(v4126 + 160));
              v4097 = (int8x16_t)vzip1q_s64(v4137, *(int64x2_t *)(v4126 + 256));
              v4099 = vextq_s8(v4097, v4097, 8uLL).u64[0];
              v4100 = vextq_s8(v4095, v4095, 8uLL).u64[0];
              v4101 = vextq_s8(v4096, v4096, 8uLL).u64[0];
              v4098 = (int8x16_t)vzip2q_s64(v4129, v4130);
              v4102.i64[0] = vdupq_laneq_s64(v4135, 1).u64[0];
              v4102.i64[1] = *(_QWORD *)(v4126 + 168);
              v4103.i64[0] = vdupq_laneq_s64(v4137, 1).u64[0];
              v4103.i64[1] = *(_QWORD *)(v4126 + 264);
              v4106 = vextq_s8(v4098, v4098, 8uLL).u64[0];
              v4104 = vextq_s8(v4103, v4103, 8uLL).u64[0];
              v4105 = vextq_s8(v4102, v4102, 8uLL).u64[0];
              v4108 = (int8x16_t)vzip1q_s64(v4133, v4131);
              v4107 = (int8x16_t)vzip1q_s64(v4136, *(int64x2_t *)(v4126 + 176));
              v4110 = (int8x16_t)vzip1q_s64(v4139, *(int64x2_t *)(v4126 + 272));
              v4111 = vextq_s8(v4110, v4110, 8uLL).u64[0];
              v4112 = vextq_s8(v4107, v4107, 8uLL).u64[0];
              v4113 = vextq_s8(v4108, v4108, 8uLL).u64[0];
              v4109 = (int8x16_t)vzip2q_s64(v4133, v4131);
              v4114.i64[0] = vdupq_laneq_s64(v4136, 1).u64[0];
              v4114.i64[1] = *(_QWORD *)(v4126 + 184);
              v4115.i64[0] = vdupq_laneq_s64(v4139, 1).u64[0];
              v4115.i64[1] = *(_QWORD *)(v4126 + 280);
              v4118 = vextq_s8(v4109, v4109, 8uLL).u64[0];
              v4116 = vextq_s8(v4115, v4115, 8uLL).u64[0];
              v4117 = vextq_s8(v4114, v4114, 8uLL).u64[0];
              v4090[1] = v4141;
              v4090[2] = v4142;
              *v4090 = v4140;
              v4119 = (int64x2_t *)((char *)v4090 + 8 * v4127);
              v4119[1] = v4143;
            }
            v4119[2] = v4094;
            *v4119 = v4092;
            v4096.i64[1] = v4101;
            v4095.i64[1] = v4100;
            v4120 = (int8x16_t *)&v4090[v4127];
            *v4120 = v4096;
            v4120[1] = v4095;
            v4097.i64[1] = v4099;
            v4120[2] = v4097;
            v4103.i64[1] = v4104;
            v4121 = (int8x16_t *)((char *)v4090 + 24 * v4127);
            v4102.i64[1] = v4105;
            v4098.i64[1] = v4106;
            v4121[1] = v4102;
            v4121[2] = v4103;
            *v4121 = v4098;
            v4122 = (int8x16_t *)&v4090[2 * v4127];
            v4110.i64[1] = v4111;
            v4107.i64[1] = v4112;
            v4108.i64[1] = v4113;
            v4122[1] = v4107;
            v4122[2] = v4110;
            *v4122 = v4108;
            v4123 = (int8x16_t *)((char *)v4090 + 40 * v4127);
            v4115.i64[1] = v4116;
            v4114.i64[1] = v4117;
            v4109.i64[1] = v4118;
            v4088 += 4;
            v4123[1] = v4114;
            v4123[2] = v4115;
            *v4123 = v4109;
          }
          while (v4088 != v4087);
          v4081 = *(unsigned int *)(a1 + 5028);
        }
        ++v4082;
        ++v4083;
      }
      while (v4082 < v4081);
    }
    v4144 = *(unsigned int *)(a1 + 6036);
    if ((_DWORD)v4144)
    {
      v4145 = 0;
      v4146 = *(unsigned int **)(a1 + 10616);
      do
      {
        v4147 = *(_QWORD *)(*(_QWORD *)(a1 + 6144) + 8 * v4145);
        if (v4147)
        {
          v4148 = *(_QWORD *)(a1 + 6112);
          v4149 = (*(_DWORD *)(a1 + 6136) * v4145);
          v4150 = (unsigned int *)(v4148 + 16 * (v4147 + v4149));
          v4151 = (unsigned int *)(v4148 + 16 * v4149);
          do
          {
            while (1)
            {
              v4167 = *v4146;
              v4168 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4151);
              v4169 = *(_QWORD *)(a1 + 6040) + 8 * *((_QWORD *)v4151 + 1);
              v4170 = *v6;
              v4171 = *(_QWORD *)(a1 + 20040);
              if (*v4146 >= v4168)
                break;
              v4152 = *(int64x2_t *)v4169;
              v4153 = (int64x2_t *)(v4171 + 8 * (v4168 + (_DWORD)v4170 * v4167));
              v4154 = *(int64x2_t *)(v4169 + 32);
              v4155 = *(_OWORD *)(v4169 + 48);
              v4156 = *(_OWORD *)(v4169 + 64);
              v4157 = *(_OWORD *)(v4169 + 80);
              v4158 = *(int64x2_t *)(v4169 + 96);
              v4159 = *(int64x2_t *)(v4169 + 112);
              v4160 = *(int64x2_t *)(v4169 + 128);
              v4161 = *(_OWORD *)(v4169 + 144);
              v4162 = *(_OWORD *)(v4169 + 160);
              v4163 = *(_OWORD *)(v4169 + 176);
              v4153[1] = *(int64x2_t *)(v4169 + 16);
              v4153[2] = v4154;
              *v4153 = v4152;
              v4164 = &v4153->i8[8 * v4170];
              *((_OWORD *)v4164 + 1) = v4156;
              *((_OWORD *)v4164 + 2) = v4157;
              *(_OWORD *)v4164 = v4155;
              v4165 = &v4153[v4170];
              v4165[1] = v4159;
              v4165[2] = v4160;
              *v4165 = v4158;
              v4166 = &v4153->i8[24 * v4170];
              *((_OWORD *)v4166 + 1) = v4162;
              *((_OWORD *)v4166 + 2) = v4163;
              *(_OWORD *)v4166 = v4161;
              v4151 += 4;
              if (v4151 == v4150)
                goto LABEL_920;
            }
            v4172 = *(int64x2_t *)(v4169 + 16);
            v4173 = (int64x2_t *)(v4171 + 8 * (v4167 + (_DWORD)v4170 * v4168));
            v4175 = *(int64x2_t *)(v4169 + 64);
            v4174 = *(int64x2_t *)(v4169 + 80);
            v4176 = *(int64x2_t *)(v4169 + 32);
            v4177 = *(int64x2_t *)(v4169 + 48);
            v4179 = *(int64x2_t *)(v4169 + 96);
            v4178 = *(int64x2_t *)(v4169 + 112);
            v4181 = *(int64x2_t *)(v4169 + 160);
            v4180 = *(int64x2_t *)(v4169 + 176);
            v4182 = *(int64x2_t *)(v4169 + 128);
            v4183 = *(int64x2_t *)(v4169 + 144);
            v4184 = vzip2q_s64(*(int64x2_t *)v4169, v4177);
            *v4173 = vzip1q_s64(*(int64x2_t *)v4169, v4177);
            v4173[1] = vzip1q_s64(v4179, v4183);
            v4185 = (int64x2_t *)((char *)v4173 + 8 * v4170);
            *v4185 = v4184;
            v4185[1] = vzip2q_s64(v4179, v4183);
            v4186 = &v4173[v4170];
            *v4186 = vzip1q_s64(v4172, v4175);
            v4186[1] = vzip1q_s64(v4178, v4181);
            v4187 = (int64x2_t *)((char *)v4173 + 24 * v4170);
            *v4187 = vzip2q_s64(v4172, v4175);
            v4187[1] = vzip2q_s64(v4178, v4181);
            v4188 = &v4173[2 * v4170];
            *v4188 = vzip1q_s64(v4176, v4174);
            v4188[1] = vzip1q_s64(v4182, v4180);
            v4189 = (int64x2_t *)((char *)v4173 + 40 * v4170);
            *v4189 = vzip2q_s64(v4176, v4174);
            v4189[1] = vzip2q_s64(v4182, v4180);
            v4151 += 4;
          }
          while (v4151 != v4150);
LABEL_920:
          v4144 = *(unsigned int *)(a1 + 6036);
        }
        ++v4145;
        ++v4146;
      }
      while (v4145 < v4144);
    }
    v4190 = *(unsigned int *)(a1 + 7044);
    if ((_DWORD)v4190)
    {
      v4191 = 0;
      v4192 = *(unsigned int **)(a1 + 10640);
      do
      {
        v4193 = *(_QWORD *)(*(_QWORD *)(a1 + 7152) + 8 * v4191);
        if (v4193)
        {
          v4194 = *(_QWORD *)(a1 + 7120);
          v4195 = (*(_DWORD *)(a1 + 7144) * v4191);
          v4196 = (unsigned int *)(v4194 + 16 * (v4193 + v4195));
          v4197 = (unsigned int *)(v4194 + 16 * v4195);
          do
          {
            while (1)
            {
              v4213 = *v4192;
              v4214 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4197);
              v4215 = *(_QWORD *)(a1 + 7048) + 8 * *((_QWORD *)v4197 + 1);
              v4216 = *v6;
              v4217 = *(_QWORD *)(a1 + 20040);
              if (*v4192 >= v4214)
                break;
              v4198 = *(int64x2_t *)v4215;
              v4199 = (int64x2_t *)(v4217 + 8 * (v4214 + (_DWORD)v4216 * v4213));
              v4200 = *(int64x2_t *)(v4215 + 32);
              v4201 = *(_OWORD *)(v4215 + 48);
              v4202 = *(_OWORD *)(v4215 + 64);
              v4203 = *(_OWORD *)(v4215 + 80);
              v4204 = *(int64x2_t *)(v4215 + 96);
              v4205 = *(int64x2_t *)(v4215 + 112);
              v4206 = *(int64x2_t *)(v4215 + 128);
              v4207 = *(_OWORD *)(v4215 + 144);
              v4208 = *(_OWORD *)(v4215 + 160);
              v4209 = *(_OWORD *)(v4215 + 176);
              v4199[1] = *(int64x2_t *)(v4215 + 16);
              v4199[2] = v4200;
              *v4199 = v4198;
              v4210 = &v4199->i8[8 * v4216];
              *((_OWORD *)v4210 + 1) = v4202;
              *((_OWORD *)v4210 + 2) = v4203;
              *(_OWORD *)v4210 = v4201;
              v4211 = &v4199[v4216];
              v4211[1] = v4205;
              v4211[2] = v4206;
              *v4211 = v4204;
              v4212 = &v4199->i8[24 * v4216];
              *((_OWORD *)v4212 + 1) = v4208;
              *((_OWORD *)v4212 + 2) = v4209;
              *(_OWORD *)v4212 = v4207;
              v4197 += 4;
              if (v4197 == v4196)
                goto LABEL_930;
            }
            v4218 = *(int64x2_t *)(v4215 + 16);
            v4219 = (int64x2_t *)(v4217 + 8 * (v4213 + (_DWORD)v4216 * v4214));
            v4221 = *(int64x2_t *)(v4215 + 64);
            v4220 = *(int64x2_t *)(v4215 + 80);
            v4222 = *(int64x2_t *)(v4215 + 32);
            v4223 = *(int64x2_t *)(v4215 + 48);
            v4225 = *(int64x2_t *)(v4215 + 96);
            v4224 = *(int64x2_t *)(v4215 + 112);
            v4227 = *(int64x2_t *)(v4215 + 160);
            v4226 = *(int64x2_t *)(v4215 + 176);
            v4228 = *(int64x2_t *)(v4215 + 128);
            v4229 = *(int64x2_t *)(v4215 + 144);
            v4230 = vzip2q_s64(*(int64x2_t *)v4215, v4223);
            *v4219 = vzip1q_s64(*(int64x2_t *)v4215, v4223);
            v4219[1] = vzip1q_s64(v4225, v4229);
            v4231 = (int64x2_t *)((char *)v4219 + 8 * v4216);
            *v4231 = v4230;
            v4231[1] = vzip2q_s64(v4225, v4229);
            v4232 = &v4219[v4216];
            *v4232 = vzip1q_s64(v4218, v4221);
            v4232[1] = vzip1q_s64(v4224, v4227);
            v4233 = (int64x2_t *)((char *)v4219 + 24 * v4216);
            *v4233 = vzip2q_s64(v4218, v4221);
            v4233[1] = vzip2q_s64(v4224, v4227);
            v4234 = &v4219[2 * v4216];
            *v4234 = vzip1q_s64(v4222, v4220);
            v4234[1] = vzip1q_s64(v4228, v4226);
            v4235 = (int64x2_t *)((char *)v4219 + 40 * v4216);
            *v4235 = vzip2q_s64(v4222, v4220);
            v4235[1] = vzip2q_s64(v4228, v4226);
            v4197 += 4;
          }
          while (v4197 != v4196);
LABEL_930:
          v4190 = *(unsigned int *)(a1 + 7044);
        }
        ++v4191;
        ++v4192;
      }
      while (v4191 < v4190);
    }
    v4236 = *(unsigned int *)(a1 + 8052);
    if ((_DWORD)v4236)
    {
      v4237 = 0;
      v4238 = *(unsigned int **)(a1 + 10664);
      do
      {
        v4239 = *(_QWORD *)(*(_QWORD *)(a1 + 8160) + 8 * v4237);
        if (v4239)
        {
          v4240 = *(_QWORD *)(a1 + 8128);
          v4241 = (*(_DWORD *)(a1 + 8152) * v4237);
          v4242 = (unsigned int *)(v4240 + 16 * (v4239 + v4241));
          v4243 = (unsigned int *)(v4240 + 16 * v4241);
          do
          {
            while (1)
            {
              v4255 = *v4238;
              v4256 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4243);
              v4257 = *(_QWORD *)(a1 + 8056) + 8 * *((_QWORD *)v4243 + 1);
              v4258 = *v6;
              v4259 = *(_QWORD *)(a1 + 20040);
              if (*v4238 >= v4256)
                break;
              v4244 = *(int64x2_t *)v4257;
              v4245 = (int64x2_t *)(v4259 + 8 * (v4256 + (_DWORD)v4258 * v4255));
              v4246 = *(int64x2_t *)(v4257 + 32);
              v4247 = *(_OWORD *)(v4257 + 48);
              v4248 = *(_OWORD *)(v4257 + 64);
              v4249 = *(_OWORD *)(v4257 + 80);
              v4250 = *(int64x2_t *)(v4257 + 96);
              v4251 = *(int64x2_t *)(v4257 + 112);
              v4252 = *(int64x2_t *)(v4257 + 128);
              v4245[1] = *(int64x2_t *)(v4257 + 16);
              v4245[2] = v4246;
              *v4245 = v4244;
              v4253 = &v4245->i8[8 * v4258];
              *((_OWORD *)v4253 + 1) = v4248;
              *((_OWORD *)v4253 + 2) = v4249;
              *(_OWORD *)v4253 = v4247;
              v4254 = &v4245[v4258];
              v4254[1] = v4251;
              v4254[2] = v4252;
              *v4254 = v4250;
              v4243 += 4;
              if (v4243 == v4242)
                goto LABEL_940;
            }
            v4260 = *(int64x2_t *)(v4257 + 16);
            v4261 = (int64x2_t *)(v4259 + 8 * (v4255 + (_DWORD)v4258 * v4256));
            v4263 = *(int64x2_t *)(v4257 + 64);
            v4262 = *(int64x2_t *)(v4257 + 80);
            v4264 = *(int64x2_t *)(v4257 + 32);
            v4265 = *(int64x2_t *)(v4257 + 48);
            v4267 = *(_OWORD *)(v4257 + 112);
            v4266 = *(_OWORD *)(v4257 + 128);
            v4268 = *(_OWORD *)(v4257 + 96);
            v4269 = vzip1q_s64(*(int64x2_t *)v4257, v4265);
            v4270 = vzip2q_s64(*(int64x2_t *)v4257, v4265);
            v4261[1].i64[0] = v4268;
            *v4261 = v4269;
            v4271 = (int64x2_t *)((char *)v4261 + 8 * v4258);
            *v4271 = v4270;
            v4271[1].i64[0] = *((_QWORD *)&v4268 + 1);
            v4272 = &v4261[v4258];
            v4272[1].i64[0] = v4267;
            *v4272 = vzip1q_s64(v4260, v4263);
            v4273 = (int64x2_t *)((char *)v4261 + 24 * v4258);
            v4273[1].i64[0] = *((_QWORD *)&v4267 + 1);
            *v4273 = vzip2q_s64(v4260, v4263);
            v4274 = &v4261[2 * v4258];
            v4274[1].i64[0] = v4266;
            *v4274 = vzip1q_s64(v4264, v4262);
            v4275 = (int64x2_t *)((char *)v4261 + 40 * v4258);
            v4275[1].i64[0] = *((_QWORD *)&v4266 + 1);
            *v4275 = vzip2q_s64(v4264, v4262);
            v4243 += 4;
          }
          while (v4243 != v4242);
LABEL_940:
          v4236 = *(unsigned int *)(a1 + 8052);
        }
        ++v4237;
        ++v4238;
      }
      while (v4237 < v4236);
    }
  }
  if (*(_BYTE *)(a1 + 1888))
  {
    v4276 = *(_DWORD *)(a1 + 1904);
    if (v4276 == 1)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 160))(a1, a2);
      v4284 = *v6;
      LODWORD(v4283) = *(_DWORD *)(a1 + 20060);
      if (v4283 >= *v6)
        v4283 = v4284;
      else
        v4283 = v4283;
      if ((_DWORD)v4283)
      {
        v4285 = 0;
        v4286 = *(double *)(a1 + 1896);
        v4287 = (double *)*a2;
        v4288 = v4284 + 1;
        v4289 = (double *)*v7;
        do
        {
          v4290 = *v4287++;
          v4289[v4285] = v4286 * v4290 + v4289[v4285];
          v4285 += v4288;
          --v4283;
        }
        while (v4283);
      }
    }
    else if (!v4276)
    {
      v4278 = *v6;
      LODWORD(v4277) = *(_DWORD *)(a1 + 20060);
      v4277 = v4277 >= *v6 ? v4278 : v4277;
      if ((_DWORD)v4277)
      {
        v4279 = 0;
        v4280 = *(double *)(a1 + 1896);
        v4281 = v4278 + 1;
        v4282 = (double *)*v7;
        do
        {
          v4282[v4279] = v4280 + v4282[v4279];
          v4279 += v4281;
          --v4277;
        }
        while (v4277);
      }
    }
  }
  v4291 = *v6;
  *((_DWORD *)a2 + 4) = v4291;
  if ((unint64_t)a2[1] < v4291)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v4292 = (8 * v4291 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v4292 >> 3);
    *a2 = operator new(v4292, (std::align_val_t)0x20uLL);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2);
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 1877) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_20F4EB76C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EDB4044(v1 - 130);
  _Unwind_Resume(a1);
}

void sub_20F4EB784(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EDB4004(v1 - 129);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4EB798(uint64_t a1)
{
  return a1 + 20064;
}

double sub_20F4EB7A4(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  _QWORD *v4;
  float64x2_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double *v11;
  unint64_t v12;
  double *v13;
  double result;
  unint64_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t *v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  float64x2_t *v27;
  uint64_t i;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  float64x2_t *v48;
  float64x2_t *v49;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  uint64_t v63;
  double *v64;
  double v65;

  if (!(((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
       + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2)
       + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
       + ((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
       + ((*(_QWORD *)(a1 + 18520) - *(_QWORD *)(a1 + 18512)) >> 2)
       + ((*(_QWORD *)(a1 + 18544) - *(_QWORD *)(a1 + 18536)) >> 2)
       + ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2)))
    return 0.0;
  v2 = (unsigned int *)(a1 + 19672);
  v3 = a1 + 18416;
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 10856) + 32))(a1 + 10856);
  sub_20F5BC34C(v4, a1 + 19752, v3, a1 + 10864, v5);
  sub_20F5BBBDC((_QWORD *)(a1 + 10968), (void **)(a1 + 19656));
  sub_20F20B6B0(a1 + 19656);
  v6 = v2[24];
  if (!(_DWORD)v6)
    return -0.0;
  v7 = *(double **)(a1 + 19752);
  v8 = *(double **)(a1 + 10888);
  v9 = *v7;
  v10 = *v7 * *v8;
  if ((_DWORD)v6 != 1)
  {
    v11 = v7 + 1;
    v12 = (v6 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 < 3)
    {
      v13 = *(double **)(a1 + 10888);
LABEL_12:
      v22 = v13 + 1;
      do
      {
        v23 = *v11++;
        v24 = v23;
        v25 = *v22++;
        v10 = v10 + v24 * v25;
      }
      while (v11 != &v7[v6]);
      goto LABEL_14;
    }
    v15 = v12 + 1;
    v16 = (v12 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v11 += v16;
    v13 = &v8[v16];
    v17 = (float64x2_t *)(v8 + 3);
    v18 = (float64x2_t *)(v7 + 3);
    v19 = v16;
    do
    {
      v20 = vmulq_f64(v18[-1], v17[-1]);
      v21 = vmulq_f64(*v18, *v17);
      v10 = v10 + v20.f64[0] + v20.f64[1] + v21.f64[0] + v21.f64[1];
      v17 += 2;
      v18 += 2;
      v19 -= 4;
    }
    while (v19);
    if (v15 != v16)
      goto LABEL_12;
  }
LABEL_14:
  result = -v10;
  v26 = *v2;
  if (!(_DWORD)v26)
  {
    if (v6 >= 4)
    {
      v29 = v6 & 0xFFFFFFFC;
      v58 = (float64x2_t *)(v7 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v60 = v29;
      do
      {
        v61 = vmulq_f64(vmulq_f64(v58[-1], _Q1), (float64x2_t)0);
        v62 = vmulq_f64(vmulq_f64(*v58, _Q1), (float64x2_t)0);
        result = result + v61.f64[0] + v61.f64[1] + v62.f64[0] + v62.f64[1];
        v58 += 2;
        v60 -= 4;
      }
      while (v60);
      if (v29 == v6)
        return result;
    }
    else
    {
      v29 = 0;
    }
    v63 = v6 - v29;
    v64 = &v7[v29];
    do
    {
      v65 = *v64++;
      result = result + v65 * 0.5 * 0.0;
      --v63;
    }
    while (v63);
    return result;
  }
  v27 = *(float64x2_t **)(a1 + 19656);
  if ((_DWORD)v26 != 1)
  {
    v30 = 0;
    v31 = 0;
    v32 = (v26 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v33 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v34 = &v27->f64[(v26 * v31)];
      v36 = *v34;
      v35 = v34 + 1;
      v37 = v9 * v36;
      if (v32 >= 3)
      {
        v35 += v33;
        v39 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v40 = (float64x2_t *)(v7 + 3);
        v41 = (float64x2_t *)((char *)v27 + 8 * v30 + 24);
        do
        {
          v42 = vmulq_f64(v41[-1], v40[-1]);
          v43 = vmulq_f64(*v41, *v40);
          v37 = v37 + v42.f64[0] + v42.f64[1] + v43.f64[0] + v43.f64[1];
          v40 += 2;
          v41 += 2;
          v39 -= 4;
        }
        while (v39);
        v38 = &v7[v33];
        if (v32 + 1 == v33)
          goto LABEL_21;
      }
      else
      {
        v38 = *(double **)(a1 + 19752);
      }
      v44 = v38 + 1;
      do
      {
        v45 = *v35++;
        v46 = v45;
        v47 = *v44++;
        v37 = v37 + v46 * v47;
      }
      while (v35 != &v27->f64[(v26 * v31) + v26]);
LABEL_21:
      result = result + v7[v31++] * 0.5 * v37;
      v30 += v26;
      if (v31 == v6)
        return result;
    }
  }
  if (v6 < 4)
  {
    for (i = 0; i != v6; ++i)
LABEL_33:
      result = result + v7[i] * 0.5 * (v9 * v27->f64[i]);
    return result;
  }
  i = v6 & 0xFFFFFFFC;
  v48 = (float64x2_t *)(v7 + 2);
  v49 = v27 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v55 = i;
  do
  {
    v56 = vmulq_f64(vmulq_f64(v48[-1], _Q2), vmulq_n_f64(v49[-1], v9));
    v57 = vmulq_f64(vmulq_f64(*v48, _Q2), vmulq_n_f64(*v49, v9));
    result = result + v56.f64[0] + v56.f64[1] + v57.f64[0] + v57.f64[1];
    v48 += 2;
    v49 += 2;
    v55 -= 4;
  }
  while (v55);
  if (i != v6)
    goto LABEL_33;
  return result;
}

double sub_20F4EBBCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t k;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  uint64_t v29;
  uint64_t n;
  uint64_t v36;
  uint64_t ii;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  double v58;

  v2 = a1[16];
  v3 = a1[17];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v54 = 3;
      v55 = v5 + 32;
      v56 = 0;
      v58 = 0.0;
      v57 = 0uLL;
      sub_20F053450(&v54, (double *)&v57);
      _V1.D[1] = *((_QWORD *)&v57 + 1);
      _D5 = *((_QWORD *)&v57 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[28]; j != a1[29]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  for (k = a1[40]; k != a1[41]; k += 16)
  {
    v26 = *(_QWORD *)(k + 8);
    if ((*(_BYTE *)(v26 + 4) & 2) == 0 && *(_BYTE *)(v26 + 20))
      i = i + *(double *)(v26 + 32) * *(double *)(v26 + 32);
  }
  v27 = a1[52];
  for (m = a1[53]; v27 != m; v27 += 16)
  {
    v29 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v29 + 4) & 2) == 0 && *(_BYTE *)(v29 + 20))
    {
      v54 = 3;
      v55 = v29 + 32;
      v56 = 0;
      v58 = 0.0;
      v57 = 0uLL;
      sub_20F053450(&v54, (double *)&v57);
      _V1.D[1] = *((_QWORD *)&v57 + 1);
      _D5 = *((_QWORD *)&v57 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v29 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v29 + 120) * *(double *)(v29 + 120);
    }
  }
  for (n = a1[64]; n != a1[65]; n += 16)
  {
    v36 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v36 + 4) & 2) == 0 && *(_BYTE *)(v36 + 20))
    {
      _Q1 = *(_OWORD *)(v36 + 32);
      _D3 = *(_QWORD *)(v36 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v36 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (ii = a1[76]; ii != a1[77]; ii += 16)
  {
    v42 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v42 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v47 = a1[88];
  v48 = a1[89];
  while (v47 != v48)
  {
    v49 = *(_QWORD *)(v47 + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      v57 = 0uLL;
      v58 = 0.0;
      sub_20E9733B8((float64x2_t *)(v49 + 32), (double *)&v57);
      _V1.D[1] = *((_QWORD *)&v57 + 1);
      _D3 = *((_QWORD *)&v57 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v58 * v58;
    }
    v47 += 16;
  }
  return i;
}

uint64_t sub_20F4EBED8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double *v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  __int128 *v16;
  _QWORD *v17;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  __int128 *v52;
  _QWORD *v53;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  float64x2_t v93;
  float64x2_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t i;
  unsigned int *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  float64x2_t v102;
  double v106;
  __double2 v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  float64x2_t v120;
  double v121;
  float64x2_t v122;
  double v123;
  float64x2_t v124;
  float64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  float64x2_t *v128;
  uint64_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  uint64_t v136;
  float64x2_t v137;
  float64x2_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t j;
  unsigned int *v148;
  uint64_t v149;
  float64x2_t v150;
  __int128 v151;
  uint64_t v152;
  double v156;
  __double2 v157;
  float64x2_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  double v172;
  float64x2_t v173;
  double v174;
  float64x2_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t *v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  float64x2_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  float64x2_t v201;
  float64x2_t *v202;
  __n128 v203;
  uint64_t **k;
  uint64_t v205;
  uint64_t m;
  double v207;
  double cosval;
  __double2 v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  float64x2_t v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  double v227;
  double v229;
  double v231;
  double v233;
  float64x2_t v235;
  double v237;
  unsigned int *v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  double v248;
  uint64_t result;
  float64x2_t v250;
  float64x2_t v251;
  double v252;
  double v253;

  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 10224);
  v5 = *(_QWORD *)(a1 + 10232);
  if (v4 != v5)
  {
    v6 = *a2;
    do
    {
      v8 = *(double **)v4;
      if (**(_DWORD **)v4 != -1)
      {
        v9 = *(double *)(v4 + 16);
        v10 = *(_QWORD **)(v4 + 96);
        v11 = *(_QWORD *)(v4 + 24);
        v12 = *(_QWORD *)(v4 + 40);
        if (v12)
        {
          v13 = v10[31];
          v14 = (unsigned int *)(v13 + 16 * (v12 + v11));
          v15 = (unsigned int *)(v13 + 16 * v11);
          do
          {
            v16 = (__int128 *)(v10[3] + 8 * *((_QWORD *)v15 + 1));
            v17 = (_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10520) + 4 * *v15));
            _Q2 = v16[1];
            _Q1 = v16[2];
            _Q3 = *v16;
            _D5 = v17[1];
            __asm { FMLA            D7, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = v17[3];
            __asm { FMLA            D7, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = v17[5];
            __asm { FMLA            D7, D2, V1.D[1] }
            v9 = v9 - _D7;
            v15 += 4;
          }
          while (v15 != v14);
        }
        v29 = *(_QWORD *)(v4 + 48);
        if (v29)
        {
          v30 = v10[34];
          v31 = (unsigned int *)(v30 + 16 * (v29 + v11));
          v32 = (unsigned int *)(v30 + 16 * v11);
          do
          {
            v33 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10544) + 4 * *v32);
            v34 = v10[6] + 8 * *((_QWORD *)v32 + 1);
            _Q3 = *(_OWORD *)v34;
            _Q2 = *(_OWORD *)(v34 + 16);
            _Q16 = *(_OWORD *)(v34 + 32);
            _Q7 = *(_OWORD *)(v34 + 48);
            _D5 = *(_QWORD *)(v33 + 8);
            __asm { FMLA            D6, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v33 + 24);
            __asm { FMLA            D6, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v33 + 40);
            __asm { FMLA            D6, D2, V16.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v33 + 56);
            __asm { FMLA            D6, D3, V7.D[1] }
            v9 = v9 - (_D6 + *(double *)(v34 + 64) * *(double *)(v33 + 64));
            v32 += 4;
          }
          while (v32 != v31);
        }
        v44 = *(_QWORD *)(v4 + 56);
        if (v44)
        {
          v45 = v10[37];
          v46 = (unsigned int *)(v45 + 16 * (v44 + v11));
          v47 = (unsigned int *)(v45 + 16 * v11);
          do
          {
            v9 = v9
               - *(double *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10568) + 4 * *v47))
               * *(double *)(v10[9] + 8 * *((_QWORD *)v47 + 1));
            v47 += 4;
          }
          while (v47 != v46);
        }
        v48 = *(_QWORD *)(v4 + 64);
        if (v48)
        {
          v49 = v10[40];
          v50 = (unsigned int *)(v49 + 16 * (v48 + v11));
          v51 = (unsigned int *)(v49 + 16 * v11);
          do
          {
            v52 = (__int128 *)(v10[12] + 8 * *((_QWORD *)v51 + 1));
            v53 = (_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10592) + 4 * *v51));
            _Q2 = v52[1];
            _Q1 = v52[2];
            _Q3 = *v52;
            _D5 = v53[1];
            __asm { FMLA            D7, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = v53[3];
            __asm { FMLA            D7, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = v53[5];
            __asm { FMLA            D7, D2, V1.D[1] }
            v9 = v9 - _D7;
            v51 += 4;
          }
          while (v51 != v50);
        }
        v61 = *(_QWORD *)(v4 + 72);
        if (v61)
        {
          v62 = v10[43];
          v63 = (unsigned int *)(v62 + 16 * (v61 + v11));
          v64 = (unsigned int *)(v62 + 16 * v11);
          do
          {
            v65 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10616) + 4 * *v64);
            v66 = (__int128 *)(v10[15] + 8 * *((_QWORD *)v64 + 1));
            _Q2 = *v66;
            _Q1 = v66[1];
            _D4 = *(_QWORD *)(v65 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v65 + 24);
            __asm { FMLA            D5, D2, V1.D[1] }
            v9 = v9 - _D5;
            v64 += 4;
          }
          while (v64 != v63);
        }
        v72 = *(_QWORD *)(v4 + 80);
        if (v72)
        {
          v73 = v10[46];
          v74 = (unsigned int *)(v73 + 16 * (v72 + v11));
          v75 = (unsigned int *)(v73 + 16 * v11);
          do
          {
            v76 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10640) + 4 * *v75);
            v77 = (__int128 *)(v10[18] + 8 * *((_QWORD *)v75 + 1));
            _Q2 = *v77;
            _Q1 = v77[1];
            _D4 = *(_QWORD *)(v76 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v76 + 24);
            __asm { FMLA            D5, D2, V1.D[1] }
            v9 = v9 - _D5;
            v75 += 4;
          }
          while (v75 != v74);
        }
        v83 = *(_QWORD *)(v4 + 88);
        if (v83)
        {
          v84 = v10[49];
          v85 = (unsigned int *)(v84 + 16 * (v83 + v11));
          v86 = (unsigned int *)(v84 + 16 * v11);
          v87 = v10[21];
          do
          {
            v88 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10664) + 4 * *v86);
            v89 = (double *)(v87 + 8 * *((_QWORD *)v86 + 1));
            _Q2 = *(_OWORD *)v89;
            _D4 = *(_QWORD *)(v88 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            v9 = v9 - (_D5 + v89[2] * *(double *)(v88 + 16));
            v86 += 4;
          }
          while (v86 != v85);
        }
        v7 = v8[4];
        v8[4] = v7 + v9 * *(double *)(v4 + 8);
        v8[5] = v7;
      }
      v4 += 104;
    }
    while (v4 != v5);
  }
  kdebug_trace();
  kdebug_trace();
  v95 = *(_QWORD **)(a1 + 9616);
  v96 = v95[1];
  for (i = v95[2]; v96 != i; v96 += 16)
  {
    v98 = *(unsigned int **)(v96 + 8);
    v99 = *v98;
    if ((_DWORD)v99 != -1)
    {
      v102 = *((float64x2_t *)v98 + 2);
      *(_OWORD *)(v98 + 50) = *((_OWORD *)v98 + 3);
      v100 = *((_OWORD *)v98 + 5);
      *(_OWORD *)(v98 + 54) = *((_OWORD *)v98 + 4);
      *(_OWORD *)(v98 + 58) = v100;
      *((_QWORD *)v98 + 31) = *((_QWORD *)v98 + 12);
      *(float64x2_t *)(v98 + 46) = v102;
      *((_OWORD *)v98 + 16) = *(_OWORD *)(v98 + 26);
      *((_QWORD *)v98 + 34) = *((_QWORD *)v98 + 15);
      v101 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10520) + 4 * v99);
      v102.f64[0] = *(float64_t *)(v101 + 16);
      _Q2 = *(float64x2_t *)v101;
      _D3 = *(_QWORD *)(v101 + 8);
      __asm { FMLA            D0, D3, V2.D[1] }
      v106 = sqrt(_D0 + v102.f64[0] * v102.f64[0]);
      v93.f64[0] = 1.0 / v106;
      if (v106 == 0.0)
        v93.f64[0] = 1.0;
      v250 = vmulq_n_f64(_Q2, v93.f64[0]);
      v252 = vmulq_f64(v102, v93).f64[0];
      v107 = __sincos_stret(v106);
      v94 = v250;
      v93.f64[0] = v107.__cosval + (1.0 - v107.__cosval) * vmuld_n_f64(v94.f64[0], v94.f64[0]);
      v108 = (1.0 - v107.__cosval) * vmuld_lane_f64(v94.f64[0], v94, 1);
      v109 = v108 - v107.__sinval * v252;
      v110 = (1.0 - v107.__cosval) * vmuld_n_f64(v250.f64[0], v252);
      v111 = vmuld_lane_f64(v107.__sinval, v250, 1);
      v112 = v111 + v110;
      v113 = v107.__sinval * v252 + v108;
      v114 = v107.__cosval + (1.0 - v107.__cosval) * vmuld_lane_f64(v250.f64[1], v250, 1);
      v115 = (1.0 - v107.__cosval) * vmuld_lane_f64(v252, v250, 1);
      v94.f64[0] = v115 - v107.__sinval * v250.f64[0];
      v116 = v110 - v111;
      v117 = v107.__sinval * v250.f64[0] + v115;
      v118 = v107.__cosval + (1.0 - v107.__cosval) * vmuld_n_f64(v252, v252);
      v119 = *((double *)v98 + 6);
      v120 = *((float64x2_t *)v98 + 2);
      v121 = *((double *)v98 + 9);
      v122 = *(float64x2_t *)(v98 + 14);
      v123 = *((double *)v98 + 12);
      v124 = *((float64x2_t *)v98 + 5);
      *((float64x2_t *)v98 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v93.f64[0]), v122, v113), v124, v116);
      *((double *)v98 + 6) = v119 * v93.f64[0] + v121 * v113 + v123 * v116;
      *(float64x2_t *)(v98 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v109), v122, v114), v124, v117);
      *((double *)v98 + 9) = v119 * v109 + v121 * v114 + v123 * v117;
      *((float64x2_t *)v98 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v112), v122, v94.f64[0]), v124, v118);
      *((double *)v98 + 12) = v119 * v112 + v121 * v94.f64[0] + v123 * v118;
      v125.f64[0] = *((float64_t *)v98 + 15);
      v93.f64[0] = *(float64_t *)(v101 + 40);
      *(float64x2_t *)(v98 + 26) = vaddq_f64(*(float64x2_t *)(v98 + 26), *(float64x2_t *)(v101 + 24));
      *((_QWORD *)v98 + 15) = *(_OWORD *)&vaddq_f64(v125, v93);
      *((_BYTE *)v98 + 128) = 0;
    }
  }
  v126 = v95[13];
  v127 = v95[14];
  while (v126 != v127)
  {
    v128 = *(float64x2_t **)(v126 + 8);
    v129 = LODWORD(v128->f64[0]);
    if ((_DWORD)v129 != -1)
    {
      v130 = v128[3];
      v132 = v128[4];
      v131 = v128[5];
      v128[9] = v132;
      v128[10] = v131;
      v128[11].f64[0] = v128[6].f64[0];
      v133 = v128[2];
      v134 = v128[3];
      v135 = v133;
      v128[7] = v133;
      v128[8] = v134;
      v136 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10544) + 4 * v129);
      v133.f64[0] = v128[6].f64[0];
      v94.f64[0] = *(float64_t *)(v136 + 64);
      v137 = vaddq_f64(v128[5], *(float64x2_t *)(v136 + 48));
      v93 = vaddq_f64(v132, *(float64x2_t *)(v136 + 32));
      v138 = vaddq_f64(v130, *(float64x2_t *)(v136 + 16));
      v128[2] = vaddq_f64(v135, *(float64x2_t *)v136);
      v128[3] = v138;
      v128[4] = v93;
      v128[5] = v137;
      *(_QWORD *)&v128[6].f64[0] = *(_OWORD *)&vaddq_f64(v133, v94);
      LOBYTE(v128[6].f64[1]) = 0;
    }
    v126 += 16;
  }
  v139 = v95[25];
  v140 = v95[26];
  if (v139 != v140)
  {
    v141 = *a2;
    do
    {
      v142 = *(double **)(v139 + 8);
      v143 = *(unsigned int *)v142;
      if ((_DWORD)v143 != -1)
      {
        v144 = v142[4];
        v145 = *(unsigned int *)(*(_QWORD *)(a1 + 10568) + 4 * v143);
        v142[6] = v144;
        v142[4] = v144 + *(double *)(v141 + 8 * v145);
        *((_BYTE *)v142 + 40) = 0;
      }
      v139 += 16;
    }
    while (v139 != v140);
  }
  v146 = v95[37];
  for (j = v95[38]; v146 != j; v146 += 16)
  {
    v148 = *(unsigned int **)(v146 + 8);
    v149 = *v148;
    if ((_DWORD)v149 != -1)
    {
      v150 = *((float64x2_t *)v148 + 3);
      *(_OWORD *)(v148 + 34) = *((_OWORD *)v148 + 2);
      v151 = *((_OWORD *)v148 + 4);
      *(_OWORD *)(v148 + 46) = *((_OWORD *)v148 + 5);
      *(_OWORD *)(v148 + 42) = v151;
      *((_QWORD *)v148 + 25) = *((_QWORD *)v148 + 12);
      *(float64x2_t *)(v148 + 38) = v150;
      *((_OWORD *)v148 + 13) = *(_OWORD *)(v148 + 26);
      *((_QWORD *)v148 + 28) = *((_QWORD *)v148 + 15);
      if (*((_BYTE *)v148 + 20))
      {
        if (*((_BYTE *)v148 + 129))
        {
          v152 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10592) + 4 * v149);
          v150.f64[0] = *(float64_t *)(v152 + 16);
          _Q2 = *(float64x2_t *)v152;
          _D3 = *(_QWORD *)(v152 + 8);
          __asm { FMLA            D0, D3, V2.D[1] }
          v156 = sqrt(_D0 + v150.f64[0] * v150.f64[0]);
          v93.f64[0] = 1.0 / v156;
          if (v156 == 0.0)
            v93.f64[0] = 1.0;
          v251 = vmulq_n_f64(_Q2, v93.f64[0]);
          v253 = vmulq_f64(v150, v93).f64[0];
          v157 = __sincos_stret(v156);
          v158 = v251;
          v93.f64[0] = v157.__cosval + (1.0 - v157.__cosval) * vmuld_n_f64(v158.f64[0], v158.f64[0]);
          v159 = (1.0 - v157.__cosval) * vmuld_lane_f64(v158.f64[0], v158, 1);
          v160 = v159 - v157.__sinval * v253;
          v161 = (1.0 - v157.__cosval) * vmuld_n_f64(v251.f64[0], v253);
          v162 = vmuld_lane_f64(v157.__sinval, v251, 1);
          v163 = v162 + v161;
          v164 = v157.__sinval * v253 + v159;
          v165 = v157.__cosval + (1.0 - v157.__cosval) * vmuld_lane_f64(v251.f64[1], v251, 1);
          v166 = (1.0 - v157.__cosval) * vmuld_lane_f64(v253, v251, 1);
          v158.f64[0] = v166 - v157.__sinval * v251.f64[0];
          v167 = v161 - v162;
          v168.f64[0] = v157.__sinval * v251.f64[0] + v166;
          v169 = v157.__cosval + (1.0 - v157.__cosval) * vmuld_n_f64(v253, v253);
          v170.f64[0] = *((float64_t *)v148 + 6);
          v171 = *((float64x2_t *)v148 + 2);
          v172 = *((double *)v148 + 9);
          v173 = *(float64x2_t *)(v148 + 14);
          v174 = *((double *)v148 + 12);
          v175 = *((float64x2_t *)v148 + 5);
          *((float64x2_t *)v148 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v93.f64[0]), v173, v164), v175, v167);
          *((double *)v148 + 6) = v170.f64[0] * v93.f64[0] + v172 * v164 + v174 * v167;
          *(float64x2_t *)(v148 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v160), v173, v165), v175, v168.f64[0]);
          *((double *)v148 + 9) = v170.f64[0] * v160 + v172 * v165 + v174 * v168.f64[0];
          *((float64x2_t *)v148 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v163), v173, v158.f64[0]), v175, v169);
          *((double *)v148 + 12) = v170.f64[0] * v163 + v172 * v158.f64[0] + v174 * v169;
          if (*((_BYTE *)v148 + 128))
          {
            v168.f64[0] = *((float64_t *)v148 + 15);
            v170.f64[0] = *(float64_t *)(v152 + 40);
            v93 = *(float64x2_t *)(v152 + 24);
            *(float64x2_t *)(v148 + 26) = vaddq_f64(*(float64x2_t *)(v148 + 26), v93);
            *((_QWORD *)v148 + 15) = *(_OWORD *)&vaddq_f64(v168, v170);
          }
        }
      }
    }
  }
  v176 = v95[49];
  v177 = v95[50];
  while (v176 != v177)
  {
    v178 = *(unsigned int **)(v176 + 8);
    v179 = *v178;
    if ((_DWORD)v179 != -1)
    {
      v180 = *((_OWORD *)v178 + 2);
      *(_OWORD *)(v178 + 42) = *((_OWORD *)v178 + 3);
      *(_OWORD *)(v178 + 38) = v180;
      *((_QWORD *)v178 + 23) = *((_QWORD *)v178 + 8);
      *((_BYTE *)v178 + 192) = *((_BYTE *)v178 + 72);
      if (*((_BYTE *)v178 + 20))
      {
        if (*((_BYTE *)v178 + 144))
        {
          v181 = (uint64_t)(v178 + 4);
          v182 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10616) + 4 * v179));
          v184 = *((float64x2_t *)v178 + 2);
          v185 = *((float64x2_t *)v178 + 3);
          v183 = (float64x2_t *)(v178 + 8);
          v186 = vaddq_f64(v185, v182[1]);
          *v183 = vaddq_f64(v184, *v182);
          v183[1] = v186;
          sub_20F6169C8(v181);
          sub_20F616F2C(v181);
        }
      }
    }
    v176 += 16;
  }
  v187 = v95[61];
  v188 = v95[62];
  while (v187 != v188)
  {
    v189 = *(unsigned int **)(v187 + 8);
    v190 = *v189;
    if ((_DWORD)v190 != -1)
    {
      v191 = *((_OWORD *)v189 + 5);
      v192 = *((_OWORD *)v189 + 7);
      v193 = *((_OWORD *)v189 + 8);
      *(_OWORD *)(v189 + 98) = *((_OWORD *)v189 + 6);
      *(_OWORD *)(v189 + 102) = v192;
      v194 = *((float64x2_t *)v189 + 3);
      *(_OWORD *)(v189 + 90) = *((_OWORD *)v189 + 4);
      *(_OWORD *)(v189 + 94) = v191;
      v195 = *((_OWORD *)v189 + 9);
      v196 = *((_OWORD *)v189 + 11);
      v197 = *((_OWORD *)v189 + 12);
      *(_OWORD *)(v189 + 114) = *((_OWORD *)v189 + 10);
      *(_OWORD *)(v189 + 118) = v196;
      *(_OWORD *)(v189 + 106) = v193;
      *(_OWORD *)(v189 + 110) = v195;
      v198 = *((_OWORD *)v189 + 15);
      v199 = *((_OWORD *)v189 + 13);
      *(_OWORD *)(v189 + 130) = *((_OWORD *)v189 + 14);
      *(_OWORD *)(v189 + 134) = v198;
      *(_OWORD *)(v189 + 122) = v197;
      *(_OWORD *)(v189 + 126) = v199;
      v200 = *((_OWORD *)v189 + 3);
      v201 = *((float64x2_t *)v189 + 2);
      *(float64x2_t *)(v189 + 82) = v201;
      *(_OWORD *)(v189 + 86) = v200;
      v202 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10640) + 4 * v190));
      v203 = (__n128)vaddq_f64(v194, v202[1]);
      *((float64x2_t *)v189 + 2) = vaddq_f64(v201, *v202);
      *((__n128 *)v189 + 3) = v203;
      for (k = (uint64_t **)*((_QWORD *)v189 + 37); k; k = (uint64_t **)*k)
        v203.n128_f64[0] = sub_20F6182A0((char *)k[5], (float64x2_t *)v189 + 2, v203);
      sub_20F6178A8((uint64_t)(v189 + 4));
    }
    v187 += 16;
  }
  v205 = v95[73];
  for (m = v95[74]; v205 != m; v205 += 16)
  {
    v240 = *(unsigned int **)(v205 + 8);
    v241 = *v240;
    if ((_DWORD)v241 != -1)
    {
      *((_QWORD *)v240 + 30) = *((_QWORD *)v240 + 12);
      v242 = *((_OWORD *)v240 + 5);
      *((_OWORD *)v240 + 13) = *((_OWORD *)v240 + 4);
      *((_OWORD *)v240 + 14) = v242;
      v243 = *((_OWORD *)v240 + 3);
      *((_OWORD *)v240 + 11) = *((_OWORD *)v240 + 2);
      *((_OWORD *)v240 + 12) = v243;
      if (*((_BYTE *)v240 + 20))
      {
        v244 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10664) + 4 * v241);
        _Q1 = *(_OWORD *)v244;
        _D3 = *(_QWORD *)(v244 + 8);
        __asm { FMLA            D2, D3, V1.D[1] }
        v248 = _D2 + *(double *)(v244 + 16) * *(double *)(v244 + 16);
        if (v248 >= 0.0000002635)
        {
          v207 = sqrt(v248);
          v209 = __sincos_stret(v207);
          cosval = v209.__cosval;
          v210 = v209.__sinval / v207;
          v211 = 1.0 / v248 * (1.0 - v209.__cosval);
        }
        else
        {
          v211 = 0.5 - v248 * (v248 / -720.0 + 0.0416666667);
          v210 = 1.0 - v248 * (0.166666667 - v248 * (v248 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v248 * v211;
        }
        v212 = *(double *)(v244 + 8);
        v213 = v211 * *(double *)v244;
        v214 = v211 * v212;
        v215 = *(double *)(v244 + 16);
        v216.f64[0] = cosval + *(double *)v244 * v213;
        v217 = cosval + v212 * (v211 * v212);
        v218 = cosval + v215 * (v211 * v215);
        v219 = v213 * v212;
        v220 = v213 * v215;
        v221 = v214 * v215;
        v222 = v210 * *(double *)v244;
        v223 = v210 * v212;
        v224 = v210 * v215;
        v225.f64[0] = v219 - v224;
        v226.f64[0] = v223 + v220;
        v216.f64[1] = v219 + v224;
        v227 = v221 - v222;
        v225.f64[1] = v217;
        _D3 = v222 + v221;
        v226.f64[1] = v227;
        v229 = *((double *)v240 + 6);
        _Q4 = *((float64x2_t *)v240 + 2);
        v231 = *((double *)v240 + 9);
        _Q6 = *(float64x2_t *)(v240 + 14);
        v233 = *((double *)v240 + 12);
        _Q19 = *((float64x2_t *)v240 + 5);
        v235 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, _Q4.f64[0]), v225, _Q4, 1), v226, v229);
        __asm { FMLA            D21, D3, V4.D[1] }
        v237 = _D21 + v218 * v229;
        __asm
        {
          FMLA            D21, D3, V6.D[1]
          FMLA            D2, D3, V19.D[1]
        }
        *((double *)v240 + 6) = v237;
        *((float64x2_t *)v240 + 2) = v235;
        *((double *)v240 + 9) = _D21 + v218 * v231;
        *(float64x2_t *)(v240 + 14) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, _Q6.f64[0]), v225, _Q6, 1), v226, v231);
        *((double *)v240 + 12) = _D2 + v218 * v233;
        *((float64x2_t *)v240 + 5) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, _Q19.f64[0]), v225, _Q19, 1), v226, v233);
        sub_20F811C04((uint64_t)(v240 + 4));
      }
    }
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 1874) = *(_BYTE *)(a1 + 1873);
  *(_BYTE *)(a1 + 1877) = 0;
  *(_WORD *)(a1 + 1872) = 0;
  *(_WORD *)(a1 + 1875) = 0;
  return result;
}

void sub_20F4ECACC(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

BOOL sub_20F4ECB04(uint64_t a1, void **a2)
{
  int *v4;
  int v5;
  uint64_t v7;

  v4 = (int *)(a1 + 20128);
  v7 = a1 + 20040;
  sub_20F2C01AC(a1 + 20128, &v7);
  v5 = *v4;
  *(_BYTE *)(a1 + 1872) = *v4 == 0;
  if (v5)
    return 1;
  sub_20F2BFF60((uint64_t)v4, (uint64_t)a2, a2);
  return *(_BYTE *)(a1 + 1872) == 0;
}

uint64_t sub_20F4ECB9C()
{
  return 1;
}

uint64_t sub_20F4ECBA4()
{
  return 0;
}

void sub_20F4ECBAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA004B8;
  v2 = a1[2517];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *a1 = off_24CA00600;
  v3 = a1[2511];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[2508];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[2505];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  sub_20F4ED57C((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F4ECC68(uint64_t result, double a2, double a3, float64x2_t a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float64_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  uint64_t v33;
  unint64_t j;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t k;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  float64_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  uint64_t v53;
  unint64_t m;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float64_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  uint64_t v64;
  unint64_t n;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  float64_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  uint64_t v75;
  unint64_t ii;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  float64_t *v82;
  float64x2_t v83;
  double v84;

  v7 = *(unsigned int *)(result + 2000);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0.0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(result + 2112) + 8 * v8);
      if (v10)
      {
        v11 = (_QWORD *)(*(_QWORD *)(result + 2080) + 16 * (*(_DWORD *)(result + 2104) * v8) + 8);
        v12 = 16 * v10;
        while (1)
        {
          v13 = *((unsigned int *)v11 - 2);
          if (v8 <= v13)
            break;
          v11 += 2;
          v12 -= 16;
          if (!v12)
            goto LABEL_3;
        }
        if (v12)
        {
          if (v8 == v13)
          {
            v14 = *(_QWORD *)(result + 2008);
            if (v14)
            {
              v15 = (float64_t *)(v14 + 8 * *v11);
              v16.f64[0] = *v15;
              v17.f64[0] = v15[14];
              v18.f64[0] = v15[28];
              v16.f64[1] = v15[7];
              v18.f64[1] = v15[35];
              v17.f64[1] = v15[21];
              a4 = vabsq_f64(v17);
              v19 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v16), vabsq_f64(v18)), a4));
              if (v9 < v19)
                v9 = v19;
            }
          }
        }
      }
LABEL_3:
      ++v8;
    }
    while (v8 != v7);
  }
  else
  {
    v9 = 0.0;
  }
  v20 = *(unsigned int *)(result + 3152);
  if ((_DWORD)v20)
  {
    for (i = 0; i != v20; ++i)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(result + 3264) + 8 * i);
      if (v22)
      {
        v23 = (_QWORD *)(*(_QWORD *)(result + 3232) + 16 * (*(_DWORD *)(result + 3256) * i) + 8);
        v24 = 16 * v22;
        while (1)
        {
          v25 = *((unsigned int *)v23 - 2);
          if (i <= v25)
            break;
          v23 += 2;
          v24 -= 16;
          if (!v24)
            goto LABEL_18;
        }
        if (v24)
        {
          if (i == v25)
          {
            v26 = *(_QWORD *)(result + 3160);
            if (v26)
            {
              v27 = (float64_t *)(v26 + 8 * *v23);
              v28.f64[0] = *v27;
              v29.f64[0] = v27[20];
              v30.f64[0] = v27[40];
              v31.f64[0] = v27[60];
              v29.f64[1] = v27[30];
              v31.f64[1] = v27[70];
              v28.f64[1] = v27[10];
              a7.f64[0] = v27[80];
              v30.f64[1] = v27[50];
              *(_QWORD *)&a7.f64[0] = *(_OWORD *)&vabsq_f64(a7);
              a4 = vmaxnmq_f64(vabsq_f64(v29), vabsq_f64(v31));
              a7.f64[1] = NAN;
              v32 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v28), a7), vabsq_f64(v30)), a4));
              if (v9 < v32)
                v9 = v32;
            }
          }
        }
      }
LABEL_18:
      ;
    }
  }
  v33 = *(unsigned int *)(result + 4304);
  if ((_DWORD)v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(result + 4416) + 8 * j);
      if (v35)
      {
        v36 = (_QWORD *)(*(_QWORD *)(result + 4384) + 16 * (*(_DWORD *)(result + 4408) * j) + 8);
        v37 = 16 * v35;
        while (1)
        {
          v38 = *((unsigned int *)v36 - 2);
          if (j <= v38)
            break;
          v36 += 2;
          v37 -= 16;
          if (!v37)
            goto LABEL_32;
        }
        if (v37)
        {
          if (j == v38)
          {
            v39 = *(_QWORD *)(result + 4312);
            if (v39)
            {
              v40 = fabs(*(double *)(v39 + 8 * *v36));
              if (v9 < v40)
                v9 = v40;
            }
          }
        }
      }
LABEL_32:
      ;
    }
  }
  v41 = *(unsigned int *)(result + 5456);
  if ((_DWORD)v41)
  {
    for (k = 0; k != v41; ++k)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(result + 5568) + 8 * k);
      if (v43)
      {
        v44 = (_QWORD *)(*(_QWORD *)(result + 5536) + 16 * (*(_DWORD *)(result + 5560) * k) + 8);
        v45 = 16 * v43;
        while (1)
        {
          v46 = *((unsigned int *)v44 - 2);
          if (k <= v46)
            break;
          v44 += 2;
          v45 -= 16;
          if (!v45)
            goto LABEL_46;
        }
        if (v45)
        {
          if (k == v46)
          {
            v47 = *(_QWORD *)(result + 5464);
            if (v47)
            {
              v48 = (float64_t *)(v47 + 8 * *v44);
              v49.f64[0] = *v48;
              v50.f64[0] = v48[14];
              v51.f64[0] = v48[28];
              v49.f64[1] = v48[7];
              v51.f64[1] = v48[35];
              v50.f64[1] = v48[21];
              a4 = vabsq_f64(v50);
              v52 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v49), vabsq_f64(v51)), a4));
              if (v9 < v52)
                v9 = v52;
            }
          }
        }
      }
LABEL_46:
      ;
    }
  }
  v53 = *(unsigned int *)(result + 6608);
  if ((_DWORD)v53)
  {
    for (m = 0; m != v53; ++m)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(result + 6720) + 8 * m);
      if (v55)
      {
        v56 = (_QWORD *)(*(_QWORD *)(result + 6688) + 16 * (*(_DWORD *)(result + 6712) * m) + 8);
        v57 = 16 * v55;
        while (1)
        {
          v58 = *((unsigned int *)v56 - 2);
          if (m <= v58)
            break;
          v56 += 2;
          v57 -= 16;
          if (!v57)
            goto LABEL_60;
        }
        if (v57)
        {
          if (m == v58)
          {
            v59 = *(_QWORD *)(result + 6616);
            if (v59)
            {
              v60 = (float64_t *)(v59 + 8 * *v56);
              v61.f64[0] = *v60;
              v62.f64[0] = v60[10];
              v61.f64[1] = v60[5];
              v62.f64[1] = v60[15];
              a4 = vabsq_f64(v62);
              v63 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v61), a4));
              if (v9 < v63)
                v9 = v63;
            }
          }
        }
      }
LABEL_60:
      ;
    }
  }
  v64 = *(unsigned int *)(result + 7760);
  if ((_DWORD)v64)
  {
    for (n = 0; n != v64; ++n)
    {
      v66 = *(_QWORD *)(*(_QWORD *)(result + 7872) + 8 * n);
      if (v66)
      {
        v67 = (_QWORD *)(*(_QWORD *)(result + 7840) + 16 * (*(_DWORD *)(result + 7864) * n) + 8);
        v68 = 16 * v66;
        while (1)
        {
          v69 = *((unsigned int *)v67 - 2);
          if (n <= v69)
            break;
          v67 += 2;
          v68 -= 16;
          if (!v68)
            goto LABEL_74;
        }
        if (v68)
        {
          if (n == v69)
          {
            v70 = *(_QWORD *)(result + 7768);
            if (v70)
            {
              v71 = (float64_t *)(v70 + 8 * *v67);
              v72.f64[0] = *v71;
              v73.f64[0] = v71[10];
              v72.f64[1] = v71[5];
              v73.f64[1] = v71[15];
              a4 = vabsq_f64(v73);
              v74 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v72), a4));
              if (v9 < v74)
                v9 = v74;
            }
          }
        }
      }
LABEL_74:
      ;
    }
  }
  v75 = *(unsigned int *)(result + 8912);
  if ((_DWORD)v75)
  {
    for (ii = 0; ii != v75; ++ii)
    {
      v77 = *(_QWORD *)(*(_QWORD *)(result + 9024) + 8 * ii);
      if (v77)
      {
        v78 = (_QWORD *)(*(_QWORD *)(result + 8992) + 16 * (*(_DWORD *)(result + 9016) * ii) + 8);
        v79 = 16 * v77;
        while (1)
        {
          v80 = *((unsigned int *)v78 - 2);
          if (ii <= v80)
            break;
          v78 += 2;
          v79 -= 16;
          if (!v79)
            goto LABEL_88;
        }
        if (v79)
        {
          if (ii == v80)
          {
            v81 = *(_QWORD *)(result + 8920);
            if (v81)
            {
              v82 = (float64_t *)(v81 + 8 * *v78);
              v83.f64[0] = *v82;
              a4.f64[0] = v82[8];
              v83.f64[1] = v82[4];
              *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
              a4.f64[1] = NAN;
              v84 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v83), a4));
              if (v9 < v84)
                v9 = v84;
            }
          }
        }
      }
LABEL_88:
      ;
    }
  }
  return result;
}

uint64_t sub_20F4ED170(uint64_t result, double a2)
{
  if (*(double *)(result + 1896) != a2)
    *(_BYTE *)(result + 1873) = 0;
  *(double *)(result + 1896) = a2;
  return result;
}

uint64_t sub_20F4ED190(uint64_t result, char a2)
{
  *(_BYTE *)(result + 18584) = a2;
  return result;
}

uint64_t sub_20F4ED19C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18584);
}

BOOL sub_20F4ED1A8(_QWORD *a1)
{
  return ((a1[2306] - a1[2305]) >> 2)
       + ((a1[2303] - a1[2302]) >> 2)
       + ((a1[2309] - a1[2308]) >> 2)
       + ((a1[2312] - a1[2311]) >> 2)
       + ((a1[2315] - a1[2314]) >> 2)
       + ((a1[2318] - a1[2317]) >> 2)
       + ((a1[2321] - a1[2320]) >> 2) != 0;
}

uint64_t sub_20F4ED238(uint64_t a1)
{
  return a1 + 10888;
}

uint64_t sub_20F4ED244(uint64_t a1)
{
  return a1 + 10888;
}

double sub_20F4ED250(uint64_t a1, void **a2)
{
  unint64_t v4;
  size_t v5;
  double result;

  v4 = *(unsigned int *)(a1 + 1928);
  if (*((_DWORD *)a2 + 4) != (_DWORD)v4)
  {
    *((_DWORD *)a2 + 4) = v4;
    if ((unint64_t)a2[1] < v4)
    {
      if (*a2)
        MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *a2 = 0;
      a2[1] = (void *)(v5 >> 3);
      *a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  *(_QWORD *)&result = sub_20F618DF0((_QWORD *)(a1 + 10520), a1 + 1912, a2).n128_u64[0];
  return result;
}

double sub_20F4ED2E4(uint64_t a1, void **a2)
{
  unint64_t v4;
  size_t v5;
  double result;

  v4 = *(unsigned int *)(a1 + 19976);
  if (*((_DWORD *)a2 + 4) != (_DWORD)v4)
  {
    *((_DWORD *)a2 + 4) = v4;
    if ((unint64_t)a2[1] < v4)
    {
      if (*a2)
        MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *a2 = 0;
      a2[1] = (void *)(v5 >> 3);
      *a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  *(_QWORD *)&result = sub_20F618DF0((_QWORD *)(a1 + 10520), a1 + 19960, a2).n128_u64[0];
  return result;
}

BOOL sub_20F4ED380(int32x2_t *a1)
{
  int32x2_t *v2;
  __int32 v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int32x2_t v17;

  v2 = a1 + 2516;
  a1[2514] = (int32x2_t)(*(_QWORD *)&a1[1203] + 7528);
  a1[2515] = (int32x2_t)&a1[1294];
  v3 = a1[2516].i32[0];
  if (v3)
  {
    a1[2514] = 0;
    a1[2515] = 0;
    return v3 == 0;
  }
  v4 = a1[2519].u32[0];
  v5 = operator new((8 * (v4 * v4) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v6 = v5;
  if ((_DWORD)v4 * (_DWORD)v4)
    bzero(v5, 8 * (v4 * v4));
  if ((_DWORD)v4)
  {
    v7 = v4 + 1;
    if ((_DWORD)v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      if (v7 < 0)
        v9 = ~(_DWORD)v4;
      else
        v9 = v4 + 1;
      v10 = (v4 - 1) * (unint64_t)v9;
      v11 = (_DWORD)v4 != -1 && (unint64_t)(v4 - 1) >> 32 != 0;
      if ((_DWORD)v10)
        v12 = v7 < 0;
      else
        v12 = 0;
      if (!v12 && (v10 & 0xFFFFFFFF00000000) == 0 && !v11)
      {
        v13 = 0;
        v8 = v4 & 0xFFFFFFFE;
        v14 = v8;
        do
        {
          v6[v13] = 0x3FF0000000000000;
          v6[v7 + v13] = 0x3FF0000000000000;
          v13 += 2 * v4 + 2;
          v14 -= 2;
        }
        while (v14);
        if (v8 == v4)
          goto LABEL_25;
      }
    }
    v15 = v4 - v8;
    v16 = v7 * v8;
    do
    {
      v6[v16] = 0x3FF0000000000000;
      v16 += v7;
      --v15;
    }
    while (v15);
  }
LABEL_25:
  if (v2[3].i32[1])
    sub_20E8BE8E4();
  v17 = a1[2511];
  a1[2511] = (int32x2_t)v6;
  a1[2512] = (int32x2_t)(((8 * (v4 * v4) + 31) & 0xFFFFFFFE0uLL) >> 3);
  a1[2513] = vdup_n_s32(v4);
  if (v17)
    MEMORY[0x212BC6368](*(_QWORD *)&v17, 0x1000C8000313F17);
  return v3 == 0;
}

void sub_20F4ED530(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F4ED554(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "DenseSchur");
}

uint64_t sub_20F4ED57C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;

  *(_QWORD *)a1 = &unk_24CA006C0;
  v2 = *(_QWORD *)(a1 + 19960);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 10856) = off_24CA01568;
  sub_20F58A570((_QWORD *)(a1 + 18624));
  v3 = *(_QWORD **)(a1 + 18616);
  if (v3 == (_QWORD *)(a1 + 18592))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 18592);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  sub_20F4FD380(a1 + 18416);
  sub_20F4FC554((_QWORD *)(a1 + 10968));
  v5 = *(_QWORD *)(a1 + 10888);
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = *(_QWORD *)(a1 + 10864);
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  sub_20F4FD380(a1 + 10688);
  sub_20F4FD380(a1 + 10520);
  sub_20F4FD380(a1 + 10352);
  v7 = *(void **)(a1 + 10272);
  if (v7)
  {
    *(_QWORD *)(a1 + 10280) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 10248);
  if (v8)
  {
    *(_QWORD *)(a1 + 10256) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 10224);
  if (v9)
  {
    *(_QWORD *)(a1 + 10232) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 10200);
  if (v10)
  {
    *(_QWORD *)(a1 + 10208) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 10176);
  if (v11)
  {
    *(_QWORD *)(a1 + 10184) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 10152);
  if (v12)
  {
    *(_QWORD *)(a1 + 10160) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 10128);
  if (v13)
  {
    *(_QWORD *)(a1 + 10136) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 10104);
  if (v14)
  {
    *(_QWORD *)(a1 + 10112) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 10080);
  if (v15)
  {
    *(_QWORD *)(a1 + 10088) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 10056);
  if (v16)
  {
    *(_QWORD *)(a1 + 10064) = v16;
    operator delete(v16);
  }
  sub_20F4FD380(a1 + 9832);
  v17 = *(void **)(a1 + 9808);
  if (v17)
  {
    *(_QWORD *)(a1 + 9816) = v17;
    operator delete(v17);
  }
  sub_20F4FD380(a1 + 9640);
  *(_QWORD *)a1 = &unk_24CA00778;
  sub_20F4FD380(a1 + 9440);
  sub_20F4FC554((_QWORD *)(a1 + 1992));
  v18 = *(_QWORD *)(a1 + 1912);
  if (v18)
    MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  *(_QWORD *)a1 = &unk_24CA00830;
  *(_QWORD *)(a1 + 120) = &off_24CA008A0;
  sub_20F4EE048(a1 + 1680);
  sub_20F4EE048(a1 + 1488);
  sub_20F4EE048(a1 + 1296);
  sub_20F4EE048(a1 + 1104);
  v19 = *(void **)(a1 + 1040);
  if (v19)
  {
    *(_QWORD *)(a1 + 1048) = v19;
    operator delete(v19);
  }
  sub_20F4EE0E8((void **)(a1 + 896));
  sub_20F4EE970(a1 + 128);
  return a1;
}

_QWORD *sub_20F4ED7F0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA01568;
  sub_20F58A570(a1 + 971);
  v2 = (_QWORD *)a1[970];
  if (v2 == a1 + 967)
  {
    v3 = 4;
    v2 = a1 + 967;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_20F4FD380((uint64_t)(a1 + 945));
  sub_20F4FC554(a1 + 14);
  v4 = a1[4];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  return a1;
}

double sub_20F4ED8B0()
{
  return 0.0;
}

double sub_20F4ED8B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t k;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  uint64_t v29;
  uint64_t n;
  uint64_t v36;
  uint64_t ii;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t jj;
  uint64_t v54;
  unsigned int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  double v60;

  v2 = a1[16];
  v3 = a1[17];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v56 = 3;
      v57 = v5 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[28]; j != a1[29]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  for (k = a1[40]; k != a1[41]; k += 16)
  {
    v26 = *(_QWORD *)(k + 8);
    if ((*(_BYTE *)(v26 + 4) & 2) == 0 && *(_BYTE *)(v26 + 20))
      i = i + *(double *)(v26 + 32) * *(double *)(v26 + 32);
  }
  v27 = a1[52];
  for (m = a1[53]; v27 != m; v27 += 16)
  {
    v29 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v29 + 4) & 2) == 0 && *(_BYTE *)(v29 + 20))
    {
      v56 = 3;
      v57 = v29 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v29 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v29 + 120) * *(double *)(v29 + 120);
    }
  }
  for (n = a1[64]; n != a1[65]; n += 16)
  {
    v36 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v36 + 4) & 2) == 0 && *(_BYTE *)(v36 + 20))
    {
      _Q1 = *(_OWORD *)(v36 + 32);
      _D3 = *(_QWORD *)(v36 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v36 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (ii = a1[76]; ii != a1[77]; ii += 16)
  {
    v42 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v42 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v47 = a1[88];
  v48 = a1[89];
  while (v47 != v48)
  {
    v49 = *(_QWORD *)(v47 + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      v59 = 0uLL;
      v60 = 0.0;
      sub_20E9733B8((float64x2_t *)(v49 + 32), (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D3 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v60 * v60;
    }
    v47 += 16;
  }
  for (jj = a1[100]; jj != a1[101]; jj += 16)
  {
    v54 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v54 + 4) & 2) == 0 && *(_BYTE *)(v54 + 20))
      i = i + *(double *)(v54 + 32) * *(double *)(v54 + 32);
  }
  return i;
}

uint64_t sub_20F4EDC10(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA008A0;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F4EE970(a1 + 8);
  return a1;
}

void sub_20F4EDC80(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA008A0;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F4EE970(a1 + 8);
  JUMPOUT(0x212BC6398);
}

char *sub_20F4EDD00(char *a1)
{
  char *v2;
  char *v3;
  uint64_t i;
  char *v5;
  _BYTE *v6;
  char *v7;
  char **v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  char *v24;
  _BYTE *v25;
  char *v26;
  char **v27;
  _BYTE *v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char *v43;
  _BYTE *v44;
  char *v45;
  char **v46;
  _BYTE *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  int v61;

  v2 = a1 + 192;
  v3 = a1 + 384;
  bzero(a1, 0x240uLL);
  for (i = 0; i != 8; ++i)
  {
    v5 = &a1[24 * i];
    v6 = *(_BYTE **)v5;
    if (*((_QWORD *)v5 + 2) - *(_QWORD *)v5 > 0xFFuLL)
      goto LABEL_14;
    v7 = &a1[24 * i];
    v10 = (_BYTE *)*((_QWORD *)v7 + 1);
    v8 = (char **)(v7 + 8);
    v9 = v10;
    v11 = (char *)operator new(0x100uLL);
    v12 = v10 - v6;
    v13 = &v11[(v10 - v6) & 0xFFFFFFFFFFFFFFFCLL];
    v14 = v13;
    if (v10 != v6)
    {
      if ((unint64_t)(v12 - 4) < 0x2C)
      {
        v14 = &v11[(v9 - v6) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_11:
          v23 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v14 - 1) = v23;
          v14 -= 4;
        }
        while (v9 != v6);
        goto LABEL_12;
      }
      v14 = &v11[(v9 - v6) & 0xFFFFFFFFFFFFFFFCLL];
      if (v9 - v11 - (v12 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_11;
      v15 = v12 >> 2;
      v16 = ((unint64_t)(v12 - 4) >> 2) + 1;
      v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
      v18 = &v9[-v17];
      v14 = &v13[-v17];
      v19 = &v11[4 * v15 - 16];
      v20 = (__int128 *)(v9 - 16);
      v21 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *v20;
        *((_OWORD *)v19 - 1) = *(v20 - 1);
        *(_OWORD *)v19 = v22;
        v19 -= 32;
        v20 -= 2;
        v21 -= 8;
      }
      while (v21);
      v9 = v18;
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_11;
    }
LABEL_12:
    *(_QWORD *)v5 = v14;
    *v8 = v13;
    *((_QWORD *)v5 + 2) = v11 + 256;
    if (v6)
      operator delete(v6);
LABEL_14:
    v24 = &v2[24 * i];
    v25 = *(_BYTE **)v24;
    if (*((_QWORD *)v24 + 2) - *(_QWORD *)v24 > 0xFFuLL)
      goto LABEL_25;
    v26 = &v2[24 * i];
    v29 = (_BYTE *)*((_QWORD *)v26 + 1);
    v27 = (char **)(v26 + 8);
    v28 = v29;
    v30 = (char *)operator new(0x100uLL);
    v31 = v29 - v25;
    v32 = &v30[(v29 - v25) & 0xFFFFFFFFFFFFFFFCLL];
    v33 = v32;
    if (v29 != v25)
    {
      if ((unint64_t)(v31 - 4) < 0x2C)
      {
        v33 = &v30[(v28 - v25) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_22:
          v42 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *((_DWORD *)v33 - 1) = v42;
          v33 -= 4;
        }
        while (v28 != v25);
        goto LABEL_23;
      }
      v33 = &v30[(v28 - v25) & 0xFFFFFFFFFFFFFFFCLL];
      if (v28 - v30 - (v31 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_22;
      v34 = v31 >> 2;
      v35 = ((unint64_t)(v31 - 4) >> 2) + 1;
      v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
      v37 = &v28[-v36];
      v33 = &v32[-v36];
      v38 = &v30[4 * v34 - 16];
      v39 = (__int128 *)(v28 - 16);
      v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v41 = *v39;
        *((_OWORD *)v38 - 1) = *(v39 - 1);
        *(_OWORD *)v38 = v41;
        v38 -= 32;
        v39 -= 2;
        v40 -= 8;
      }
      while (v40);
      v28 = v37;
      if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_22;
    }
LABEL_23:
    *(_QWORD *)v24 = v33;
    *v27 = v32;
    *((_QWORD *)v24 + 2) = v30 + 256;
    if (v25)
      operator delete(v25);
LABEL_25:
    v43 = &v3[24 * i];
    v44 = *(_BYTE **)v43;
    if (*((_QWORD *)v43 + 2) - *(_QWORD *)v43 > 0xFFuLL)
      continue;
    v45 = &v3[24 * i];
    v48 = (_BYTE *)*((_QWORD *)v45 + 1);
    v46 = (char **)(v45 + 8);
    v47 = v48;
    v49 = (char *)operator new(0x100uLL);
    v50 = v48 - v44;
    v51 = &v49[(v48 - v44) & 0xFFFFFFFFFFFFFFFCLL];
    v52 = v51;
    if (v48 != v44)
    {
      if ((unint64_t)(v50 - 4) < 0x2C)
      {
        v52 = &v49[(v47 - v44) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_33:
          v61 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *((_DWORD *)v52 - 1) = v61;
          v52 -= 4;
        }
        while (v47 != v44);
        goto LABEL_34;
      }
      v52 = &v49[(v47 - v44) & 0xFFFFFFFFFFFFFFFCLL];
      if (v47 - v49 - (v50 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_33;
      v53 = v50 >> 2;
      v54 = ((unint64_t)(v50 - 4) >> 2) + 1;
      v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
      v56 = &v47[-v55];
      v52 = &v51[-v55];
      v57 = &v49[4 * v53 - 16];
      v58 = (__int128 *)(v47 - 16);
      v59 = v54 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v60 = *v58;
        *((_OWORD *)v57 - 1) = *(v58 - 1);
        *(_OWORD *)v57 = v60;
        v57 -= 32;
        v58 -= 2;
        v59 -= 8;
      }
      while (v59);
      v47 = v56;
      if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_33;
    }
LABEL_34:
    *(_QWORD *)v43 = v52;
    *v46 = v51;
    *((_QWORD *)v43 + 2) = v49 + 256;
    if (v44)
      operator delete(v44);
  }
  return a1;
}

void sub_20F4EE024(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_20F4EE048(v3);
  sub_20F4EE048(v2);
  sub_20F4EE048(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4EE048(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void **sub_20F4EE0E8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;

  v2 = (char *)a1[15];
  if (v2)
  {
    v3 = (char *)a1[16];
    v4 = a1[15];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 888;
      }
      while (v3 != v2);
      v4 = a1[15];
    }
    a1[16] = v2;
    operator delete(v4);
  }
  v8 = (char *)a1[12];
  if (v8)
  {
    v9 = (char *)a1[13];
    v10 = a1[12];
    if (v9 != v8)
    {
      do
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 2);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 216;
      }
      while (v9 != v8);
      v10 = a1[12];
    }
    a1[13] = v8;
    operator delete(v10);
  }
  v14 = (char *)a1[9];
  if (v14)
  {
    v15 = (char *)a1[10];
    v16 = a1[9];
    if (v15 != v14)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 2);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 5336;
      }
      while (v15 != v14);
      v16 = a1[9];
    }
    a1[10] = v14;
    operator delete(v16);
  }
  v20 = (char *)a1[6];
  if (v20)
  {
    v21 = (char *)a1[7];
    v22 = a1[6];
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 2);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 8016;
      }
      while (v21 != v20);
      v22 = a1[6];
    }
    a1[7] = v20;
    operator delete(v22);
  }
  v26 = (char *)a1[3];
  if (v26)
  {
    v27 = (char *)a1[4];
    v28 = a1[3];
    if (v27 == v26)
    {
LABEL_61:
      a1[4] = v26;
      operator delete(v28);
      goto LABEL_62;
    }
    while (1)
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 2);
      if (!v29)
        goto LABEL_53;
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        v32 = (std::__shared_weak_count *)*((_QWORD *)v27 - 19);
        if (v32)
        {
LABEL_54:
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      else
      {
LABEL_53:
        v32 = (std::__shared_weak_count *)*((_QWORD *)v27 - 19);
        if (v32)
          goto LABEL_54;
      }
      v27 -= 280;
      if (v27 == v26)
      {
        v28 = a1[3];
        goto LABEL_61;
      }
    }
  }
LABEL_62:
  v35 = (char *)*a1;
  if (*a1)
  {
    v36 = (char *)a1[1];
    v37 = *a1;
    if (v36 == v35)
    {
LABEL_78:
      a1[1] = v35;
      operator delete(v37);
      return a1;
    }
    while (1)
    {
      v38 = (std::__shared_weak_count *)*((_QWORD *)v36 - 2);
      if (!v38)
        goto LABEL_70;
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        v41 = (std::__shared_weak_count *)*((_QWORD *)v36 - 38);
        if (v41)
        {
LABEL_71:
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      else
      {
LABEL_70:
        v41 = (std::__shared_weak_count *)*((_QWORD *)v36 - 38);
        if (v41)
          goto LABEL_71;
      }
      v36 -= 504;
      if (v36 == v35)
      {
        v37 = *a1;
        goto LABEL_78;
      }
    }
  }
  return a1;
}

uint64_t sub_20F4EE450(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4EE4B8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 5320);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4EE520(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 5312);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4EE588(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8000);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4EE5F0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 7992);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4EE658(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 264);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 128);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F4EE704(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 256);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 120);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F4EE7B0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 120);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4EE818(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 488);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 200);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F4EE8C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 480);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 192);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 192);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F4EE970(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20F393270(a1 + 696);
  v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(_QWORD *)(a1 + 680) = v2;
    operator delete(v2);
  }
  sub_20F4EEA20(a1 + 576);
  sub_20F4EFD04(a1 + 480);
  sub_20F4F0FE8(a1 + 384);
  sub_20F4F22CC(a1 + 312);
  v3 = *(void **)(a1 + 288);
  if (v3)
  {
    *(_QWORD *)(a1 + 296) = v3;
    operator delete(v3);
  }
  sub_20F4F2E90(a1 + 216);
  v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(_QWORD *)(a1 + 200) = v4;
    operator delete(v4);
  }
  sub_20F4F3BC4(a1 + 120);
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  sub_20F3C8180(a1 + 24);
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_20F4EEA20(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  v10 = a1 + 24;
  sub_20F4EEAE0(a1 + 24, (uint64_t)&v10);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v2;
  if (v2)
    operator delete(v2);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 40);
    v5 = *(void **)(a1 + 32);
    if (v4 != v3)
    {
      v6 = *(_QWORD **)(a1 + 40);
      do
      {
        v7 = *(v6 - 2);
        v6 -= 2;
        *v6 = 0;
        if (v7)
          ((void (*)(void))*(v4 - 1))();
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v5);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20F4EEAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(char **)(a1 + 56);
  if ((char *)v3 == v4)
  {
    sub_20F4EEBBC(&v11);
    return v12;
  }
  else
  {
    if ((unint64_t)&v4[-v3] > 0xEF)
    {
      sub_20F4EF258(v3, v4, (uint64_t)&v10, 126 - 2 * __clz((uint64_t)&v4[-v3] >> 3), 1);
      v6 = *(_QWORD *)(a1 + 56);
      v10 = *(_QWORD *)(a1 + 48);
      v8[0] = v10;
      v8[1] = v6;
      v8[2] = &v12;
      v9 = v6;
      v7[0] = a1;
      v7[1] = (uint64_t)&v10;
      v7[2] = (uint64_t)&v9;
      sub_20F4EEE90(&v11, v8, v7);
    }
    else
    {
      sub_20F4EECF0(&v11, a1);
    }
    return v12;
  }
}

void sub_20F4EEBBC(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  v1 = *a1;
  v2 = *(_DWORD *)(*a1 + 32);
  if (v2)
  {
    if (v2 != 1)
    {
      v10 = 8;
      for (i = 1; i < v2; ++i)
      {
        if (v10)
        {
          v12 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 16 * i - 16);
          v13 = &v12[31 * v10];
          do
          {
            v14 = (_QWORD *)v12[18];
            if (v14)
            {
              do
              {
                v15 = (_QWORD *)*v14;
                operator delete(v14);
                v14 = v15;
              }
              while (v15);
            }
            v16 = (void *)v12[16];
            v12[16] = 0;
            if (v16)
              operator delete(v16);
            v17 = (void *)v12[13];
            if (v17)
            {
              v12[14] = v17;
              operator delete(v17);
            }
            v12 += 31;
          }
          while (v12 != v13);
          v2 = *(_DWORD *)(v1 + 32);
        }
        v10 *= 2;
      }
    }
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      v4 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 16 * (v2 - 1));
      v5 = &v4[31 * v3];
      do
      {
        v6 = (_QWORD *)v4[18];
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v8 = (void *)v4[16];
        v4[16] = 0;
        if (v8)
          operator delete(v8);
        v9 = (void *)v4[13];
        if (v9)
        {
          v4[14] = v9;
          operator delete(v9);
        }
        v4 += 31;
      }
      while (v4 != v5);
    }
  }
}

void sub_20F4EECF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t i;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 32);
  if (v3)
  {
    if (v3 != 1)
    {
      v14 = 8;
      for (i = 1; i < v3; ++i)
      {
        if (v14)
        {
          v16 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 16 * i - 16);
          v17 = &v16[31 * v14];
          do
          {
            v19 = *(_QWORD **)(a2 + 48);
            v18 = *(_QWORD **)(a2 + 56);
            if (v19 != v18)
            {
              while ((_QWORD *)*v19 != v16)
              {
                if (++v19 == v18)
                {
                  v19 = *(_QWORD **)(a2 + 56);
                  break;
                }
              }
            }
            if (v19 == v18)
            {
              v20 = (_QWORD *)v16[18];
              if (v20)
              {
                do
                {
                  v21 = (_QWORD *)*v20;
                  operator delete(v20);
                  v20 = v21;
                }
                while (v21);
              }
              v22 = (void *)v16[16];
              v16[16] = 0;
              if (v22)
                operator delete(v22);
              v23 = (void *)v16[13];
              if (v23)
              {
                v16[14] = v23;
                operator delete(v23);
              }
            }
            v16 += 31;
          }
          while (v16 != v17);
          v3 = *(_DWORD *)(v2 + 32);
        }
        v14 *= 2;
      }
    }
    v5 = *(_QWORD *)(v2 + 40);
    if (v5)
    {
      v6 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 16 * (v3 - 1));
      v7 = &v6[31 * v5];
      do
      {
        v9 = *(_QWORD **)(a2 + 48);
        v8 = *(_QWORD **)(a2 + 56);
        if (v9 != v8)
        {
          while ((_QWORD *)*v9 != v6)
          {
            if (++v9 == v8)
            {
              v9 = *(_QWORD **)(a2 + 56);
              break;
            }
          }
        }
        if (v9 == v8)
        {
          v10 = (_QWORD *)v6[18];
          if (v10)
          {
            do
            {
              v11 = (_QWORD *)*v10;
              operator delete(v10);
              v10 = v11;
            }
            while (v11);
          }
          v12 = (void *)v6[16];
          v6[16] = 0;
          if (v12)
            operator delete(v12);
          v13 = (void *)v6[13];
          if (v13)
          {
            v6[14] = v13;
            operator delete(v13);
          }
        }
        v6 += 31;
      }
      while (v6 != v7);
    }
  }
}

void sub_20F4EEE90(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t i;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  void *v73;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 32);
  if (v4)
  {
    if (v4 != 1)
    {
      v37 = 8;
      for (i = 1; i < v4; ++i)
      {
        v39 = *(_QWORD *)(v3 + 8) + 16 * i;
        v42 = *(_QWORD *)(v39 - 16);
        v40 = (_QWORD *)(v39 - 16);
        v41 = v42;
        v43 = *a3;
        v44 = *(_QWORD **)(*a3 + 48);
        v45 = *(_QWORD *)(*a3 + 56) - (_QWORD)v44;
        if (v45)
        {
          v46 = v45 >> 3;
          do
          {
            v47 = v46 >> 1;
            v48 = &v44[v46 >> 1];
            v50 = *v48;
            v49 = v48 + 1;
            v46 += ~(v46 >> 1);
            if (v50 < v41)
              v44 = v49;
            else
              v46 = v47;
          }
          while (v46);
        }
        *(_QWORD *)a3[1] = v44;
        v51 = *(_QWORD **)a3[1];
        v52 = *(_QWORD *)(v43 + 56) - (_QWORD)v51;
        if (v52)
        {
          v53 = v41 + 248 * v37;
          v54 = v52 >> 3;
          do
          {
            v55 = v54 >> 1;
            v56 = &v51[v54 >> 1];
            v58 = *v56;
            v57 = v56 + 1;
            v54 += ~(v54 >> 1);
            if (v53 < v58)
              v54 = v55;
            else
              v51 = v57;
          }
          while (v54);
        }
        *(_QWORD *)a3[2] = v51;
        if (v37)
        {
          v59 = (_QWORD *)*v40;
          v60 = *v40 + 248 * v37;
          v61 = (_QWORD *)*a2;
          v62 = (_QWORD *)a2[1];
          v63 = ((uint64_t)v62 - *a2) >> 3;
          do
          {
            v64 = v61;
            if (v62 != v61)
            {
              v64 = v61;
              v65 = v63;
              do
              {
                v66 = v65 >> 1;
                v67 = &v64[v65 >> 1];
                v69 = *v67;
                v68 = v67 + 1;
                v65 += ~(v65 >> 1);
                if (v69 < (unint64_t)v59)
                  v64 = v68;
                else
                  v65 = v66;
              }
              while (v65);
            }
            if (v64 == v62 || (_QWORD *)*v64 != v59)
            {
              v70 = (_QWORD *)v59[18];
              if (v70)
              {
                do
                {
                  v71 = (_QWORD *)*v70;
                  operator delete(v70);
                  v70 = v71;
                }
                while (v71);
              }
              v72 = (void *)v59[16];
              v59[16] = 0;
              if (v72)
                operator delete(v72);
              v73 = (void *)v59[13];
              if (v73)
              {
                v59[14] = v73;
                operator delete(v73);
              }
            }
            v59 += 31;
          }
          while (v59 != (_QWORD *)v60);
          v4 = *(_DWORD *)(v3 + 32);
        }
        v37 *= 2;
      }
    }
    v6 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v7 = *(_QWORD *)(v3 + 40);
    v8 = *a3;
    v9 = *(_QWORD **)(*a3 + 48);
    v10 = *(_QWORD *)(*a3 + 56) - (_QWORD)v9;
    if (v10)
    {
      v11 = v10 >> 3;
      do
      {
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v11 += ~(v11 >> 1);
        if (v15 < (unint64_t)v6)
          v9 = v14;
        else
          v11 = v12;
      }
      while (v11);
    }
    v16 = &v6[31 * v7];
    *(_QWORD *)a3[1] = v9;
    v17 = *(_QWORD **)a3[1];
    v18 = *(_QWORD *)(v8 + 56) - (_QWORD)v17;
    if (v18)
    {
      v19 = v18 >> 3;
      do
      {
        v20 = v19 >> 1;
        v21 = &v17[v19 >> 1];
        v23 = *v21;
        v22 = v21 + 1;
        v19 += ~(v19 >> 1);
        if ((unint64_t)v16 < v23)
          v19 = v20;
        else
          v17 = v22;
      }
      while (v19);
    }
    *(_QWORD *)a3[2] = v17;
    if (v7)
    {
      v25 = (_QWORD *)*a2;
      v24 = (_QWORD *)a2[1];
      v26 = ((uint64_t)v24 - *a2) >> 3;
      do
      {
        v27 = v25;
        if (v24 != v25)
        {
          v27 = v25;
          v28 = v26;
          do
          {
            v29 = v28 >> 1;
            v30 = &v27[v28 >> 1];
            v32 = *v30;
            v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (v32 < (unint64_t)v6)
              v27 = v31;
            else
              v28 = v29;
          }
          while (v28);
        }
        if (v27 == v24 || (_QWORD *)*v27 != v6)
        {
          v33 = (_QWORD *)v6[18];
          if (v33)
          {
            do
            {
              v34 = (_QWORD *)*v33;
              operator delete(v33);
              v33 = v34;
            }
            while (v34);
          }
          v35 = (void *)v6[16];
          v6[16] = 0;
          if (v35)
            operator delete(v35);
          v36 = (void *)v6[13];
          if (v36)
          {
            v6[14] = v36;
            operator delete(v36);
          }
        }
        v6 += 31;
      }
      while (v6 != v16);
    }
  }
}

_QWORD *sub_20F4EF1A8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[18];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[16];
  a1[16] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20F4EF200(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[14];
  a1[14] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20F4EF258(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F4EF9FC(v10, v57);
          v10 = v57 + 1;
          result = sub_20F4EF9FC(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F4EF258(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F4EF9FC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F4EFD04(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  v10 = a1 + 24;
  sub_20F4EFDC4(a1 + 24, (uint64_t)&v10);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v2;
  if (v2)
    operator delete(v2);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 40);
    v5 = *(void **)(a1 + 32);
    if (v4 != v3)
    {
      v6 = *(_QWORD **)(a1 + 40);
      do
      {
        v7 = *(v6 - 2);
        v6 -= 2;
        *v6 = 0;
        if (v7)
          ((void (*)(void))*(v4 - 1))();
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v5);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20F4EFDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(char **)(a1 + 56);
  if ((char *)v3 == v4)
  {
    sub_20F4EFEA0(&v11);
    return v12;
  }
  else
  {
    if ((unint64_t)&v4[-v3] > 0xEF)
    {
      sub_20F4F053C(v3, v4, (uint64_t)&v10, 126 - 2 * __clz((uint64_t)&v4[-v3] >> 3), 1);
      v6 = *(_QWORD *)(a1 + 56);
      v10 = *(_QWORD *)(a1 + 48);
      v8[0] = v10;
      v8[1] = v6;
      v8[2] = &v12;
      v9 = v6;
      v7[0] = a1;
      v7[1] = (uint64_t)&v10;
      v7[2] = (uint64_t)&v9;
      sub_20F4F0174(&v11, v8, v7);
    }
    else
    {
      sub_20F4EFFD4(&v11, a1);
    }
    return v12;
  }
}

void sub_20F4EFEA0(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  v1 = *a1;
  v2 = *(_DWORD *)(*a1 + 32);
  if (v2)
  {
    if (v2 != 1)
    {
      v10 = 8;
      for (i = 1; i < v2; ++i)
      {
        if (v10)
        {
          v12 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 16 * i - 16);
          v13 = &v12[69 * v10];
          do
          {
            v14 = (_QWORD *)v12[37];
            if (v14)
            {
              do
              {
                v15 = (_QWORD *)*v14;
                operator delete(v14);
                v14 = v15;
              }
              while (v15);
            }
            v16 = (void *)v12[35];
            v12[35] = 0;
            if (v16)
              operator delete(v16);
            v17 = (void *)v12[32];
            if (v17)
            {
              v12[33] = v17;
              operator delete(v17);
            }
            v12 += 69;
          }
          while (v12 != v13);
          v2 = *(_DWORD *)(v1 + 32);
        }
        v10 *= 2;
      }
    }
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      v4 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 16 * (v2 - 1));
      v5 = &v4[69 * v3];
      do
      {
        v6 = (_QWORD *)v4[37];
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v8 = (void *)v4[35];
        v4[35] = 0;
        if (v8)
          operator delete(v8);
        v9 = (void *)v4[32];
        if (v9)
        {
          v4[33] = v9;
          operator delete(v9);
        }
        v4 += 69;
      }
      while (v4 != v5);
    }
  }
}

void sub_20F4EFFD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t i;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 32);
  if (v3)
  {
    if (v3 != 1)
    {
      v14 = 8;
      for (i = 1; i < v3; ++i)
      {
        if (v14)
        {
          v16 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 16 * i - 16);
          v17 = &v16[69 * v14];
          do
          {
            v19 = *(_QWORD **)(a2 + 48);
            v18 = *(_QWORD **)(a2 + 56);
            if (v19 != v18)
            {
              while ((_QWORD *)*v19 != v16)
              {
                if (++v19 == v18)
                {
                  v19 = *(_QWORD **)(a2 + 56);
                  break;
                }
              }
            }
            if (v19 == v18)
            {
              v20 = (_QWORD *)v16[37];
              if (v20)
              {
                do
                {
                  v21 = (_QWORD *)*v20;
                  operator delete(v20);
                  v20 = v21;
                }
                while (v21);
              }
              v22 = (void *)v16[35];
              v16[35] = 0;
              if (v22)
                operator delete(v22);
              v23 = (void *)v16[32];
              if (v23)
              {
                v16[33] = v23;
                operator delete(v23);
              }
            }
            v16 += 69;
          }
          while (v16 != v17);
          v3 = *(_DWORD *)(v2 + 32);
        }
        v14 *= 2;
      }
    }
    v5 = *(_QWORD *)(v2 + 40);
    if (v5)
    {
      v6 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 16 * (v3 - 1));
      v7 = &v6[69 * v5];
      do
      {
        v9 = *(_QWORD **)(a2 + 48);
        v8 = *(_QWORD **)(a2 + 56);
        if (v9 != v8)
        {
          while ((_QWORD *)*v9 != v6)
          {
            if (++v9 == v8)
            {
              v9 = *(_QWORD **)(a2 + 56);
              break;
            }
          }
        }
        if (v9 == v8)
        {
          v10 = (_QWORD *)v6[37];
          if (v10)
          {
            do
            {
              v11 = (_QWORD *)*v10;
              operator delete(v10);
              v10 = v11;
            }
            while (v11);
          }
          v12 = (void *)v6[35];
          v6[35] = 0;
          if (v12)
            operator delete(v12);
          v13 = (void *)v6[32];
          if (v13)
          {
            v6[33] = v13;
            operator delete(v13);
          }
        }
        v6 += 69;
      }
      while (v6 != v7);
    }
  }
}

void sub_20F4F0174(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t i;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  void *v73;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 32);
  if (v4)
  {
    if (v4 != 1)
    {
      v37 = 8;
      for (i = 1; i < v4; ++i)
      {
        v39 = *(_QWORD *)(v3 + 8) + 16 * i;
        v42 = *(_QWORD *)(v39 - 16);
        v40 = (_QWORD *)(v39 - 16);
        v41 = v42;
        v43 = *a3;
        v44 = *(_QWORD **)(*a3 + 48);
        v45 = *(_QWORD *)(*a3 + 56) - (_QWORD)v44;
        if (v45)
        {
          v46 = v45 >> 3;
          do
          {
            v47 = v46 >> 1;
            v48 = &v44[v46 >> 1];
            v50 = *v48;
            v49 = v48 + 1;
            v46 += ~(v46 >> 1);
            if (v50 < v41)
              v44 = v49;
            else
              v46 = v47;
          }
          while (v46);
        }
        *(_QWORD *)a3[1] = v44;
        v51 = *(_QWORD **)a3[1];
        v52 = *(_QWORD *)(v43 + 56) - (_QWORD)v51;
        if (v52)
        {
          v53 = v41 + 552 * v37;
          v54 = v52 >> 3;
          do
          {
            v55 = v54 >> 1;
            v56 = &v51[v54 >> 1];
            v58 = *v56;
            v57 = v56 + 1;
            v54 += ~(v54 >> 1);
            if (v53 < v58)
              v54 = v55;
            else
              v51 = v57;
          }
          while (v54);
        }
        *(_QWORD *)a3[2] = v51;
        if (v37)
        {
          v59 = (_QWORD *)*v40;
          v60 = *v40 + 552 * v37;
          v61 = (_QWORD *)*a2;
          v62 = (_QWORD *)a2[1];
          v63 = ((uint64_t)v62 - *a2) >> 3;
          do
          {
            v64 = v61;
            if (v62 != v61)
            {
              v64 = v61;
              v65 = v63;
              do
              {
                v66 = v65 >> 1;
                v67 = &v64[v65 >> 1];
                v69 = *v67;
                v68 = v67 + 1;
                v65 += ~(v65 >> 1);
                if (v69 < (unint64_t)v59)
                  v64 = v68;
                else
                  v65 = v66;
              }
              while (v65);
            }
            if (v64 == v62 || (_QWORD *)*v64 != v59)
            {
              v70 = (_QWORD *)v59[37];
              if (v70)
              {
                do
                {
                  v71 = (_QWORD *)*v70;
                  operator delete(v70);
                  v70 = v71;
                }
                while (v71);
              }
              v72 = (void *)v59[35];
              v59[35] = 0;
              if (v72)
                operator delete(v72);
              v73 = (void *)v59[32];
              if (v73)
              {
                v59[33] = v73;
                operator delete(v73);
              }
            }
            v59 += 69;
          }
          while (v59 != (_QWORD *)v60);
          v4 = *(_DWORD *)(v3 + 32);
        }
        v37 *= 2;
      }
    }
    v6 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v7 = *(_QWORD *)(v3 + 40);
    v8 = *a3;
    v9 = *(_QWORD **)(*a3 + 48);
    v10 = *(_QWORD *)(*a3 + 56) - (_QWORD)v9;
    if (v10)
    {
      v11 = v10 >> 3;
      do
      {
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v11 += ~(v11 >> 1);
        if (v15 < (unint64_t)v6)
          v9 = v14;
        else
          v11 = v12;
      }
      while (v11);
    }
    v16 = &v6[69 * v7];
    *(_QWORD *)a3[1] = v9;
    v17 = *(_QWORD **)a3[1];
    v18 = *(_QWORD *)(v8 + 56) - (_QWORD)v17;
    if (v18)
    {
      v19 = v18 >> 3;
      do
      {
        v20 = v19 >> 1;
        v21 = &v17[v19 >> 1];
        v23 = *v21;
        v22 = v21 + 1;
        v19 += ~(v19 >> 1);
        if ((unint64_t)v16 < v23)
          v19 = v20;
        else
          v17 = v22;
      }
      while (v19);
    }
    *(_QWORD *)a3[2] = v17;
    if (v7)
    {
      v25 = (_QWORD *)*a2;
      v24 = (_QWORD *)a2[1];
      v26 = ((uint64_t)v24 - *a2) >> 3;
      do
      {
        v27 = v25;
        if (v24 != v25)
        {
          v27 = v25;
          v28 = v26;
          do
          {
            v29 = v28 >> 1;
            v30 = &v27[v28 >> 1];
            v32 = *v30;
            v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (v32 < (unint64_t)v6)
              v27 = v31;
            else
              v28 = v29;
          }
          while (v28);
        }
        if (v27 == v24 || (_QWORD *)*v27 != v6)
        {
          v33 = (_QWORD *)v6[37];
          if (v33)
          {
            do
            {
              v34 = (_QWORD *)*v33;
              operator delete(v33);
              v33 = v34;
            }
            while (v34);
          }
          v35 = (void *)v6[35];
          v6[35] = 0;
          if (v35)
            operator delete(v35);
          v36 = (void *)v6[32];
          if (v36)
          {
            v6[33] = v36;
            operator delete(v36);
          }
        }
        v6 += 69;
      }
      while (v6 != v16);
    }
  }
}

_QWORD *sub_20F4F048C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[37];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[35];
  a1[35] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[32];
  if (v5)
  {
    a1[33] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20F4F04E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[35];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[33];
  a1[33] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[30];
  if (v5)
  {
    a1[31] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20F4F053C(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F4F0CE0(v10, v57);
          v10 = v57 + 1;
          result = sub_20F4F0CE0(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F4F053C(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F4F0CE0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F4F0FE8(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  v10 = a1 + 24;
  sub_20F4F10A8(a1 + 24, (uint64_t)&v10);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v2;
  if (v2)
    operator delete(v2);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 40);
    v5 = *(void **)(a1 + 32);
    if (v4 != v3)
    {
      v6 = *(_QWORD **)(a1 + 40);
      do
      {
        v7 = *(v6 - 2);
        v6 -= 2;
        *v6 = 0;
        if (v7)
          ((void (*)(void))*(v4 - 1))();
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v5);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20F4F10A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7[3];
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(char **)(a1 + 56);
  if ((char *)v3 == v4)
  {
    sub_20F4F1184(&v11);
    return v12;
  }
  else
  {
    if ((unint64_t)&v4[-v3] > 0xEF)
    {
      sub_20F4F1820(v3, v4, (uint64_t)&v10, 126 - 2 * __clz((uint64_t)&v4[-v3] >> 3), 1);
      v6 = *(_QWORD *)(a1 + 56);
      v10 = *(_QWORD *)(a1 + 48);
      v8[0] = v10;
      v8[1] = v6;
      v8[2] = &v12;
      v9 = v6;
      v7[0] = a1;
      v7[1] = (uint64_t)&v10;
      v7[2] = (uint64_t)&v9;
      sub_20F4F1458(&v11, v8, v7);
    }
    else
    {
      sub_20F4F12B8(&v11, a1);
    }
    return v12;
  }
}

void sub_20F4F1184(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  v1 = *a1;
  v2 = *(_DWORD *)(*a1 + 32);
  if (v2)
  {
    if (v2 != 1)
    {
      v10 = 8;
      for (i = 1; i < v2; ++i)
      {
        if (v10)
        {
          v12 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 16 * i - 16);
          v13 = &v12[25 * v10];
          do
          {
            v14 = (_QWORD *)v12[15];
            if (v14)
            {
              do
              {
                v15 = (_QWORD *)*v14;
                operator delete(v14);
                v14 = v15;
              }
              while (v15);
            }
            v16 = (void *)v12[13];
            v12[13] = 0;
            if (v16)
              operator delete(v16);
            v17 = (void *)v12[10];
            if (v17)
            {
              v12[11] = v17;
              operator delete(v17);
            }
            v12 += 25;
          }
          while (v12 != v13);
          v2 = *(_DWORD *)(v1 + 32);
        }
        v10 *= 2;
      }
    }
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      v4 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 16 * (v2 - 1));
      v5 = &v4[25 * v3];
      do
      {
        v6 = (_QWORD *)v4[15];
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v8 = (void *)v4[13];
        v4[13] = 0;
        if (v8)
          operator delete(v8);
        v9 = (void *)v4[10];
        if (v9)
        {
          v4[11] = v9;
          operator delete(v9);
        }
        v4 += 25;
      }
      while (v4 != v5);
    }
  }
}

void sub_20F4F12B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t i;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 32);
  if (v3)
  {
    if (v3 != 1)
    {
      v14 = 8;
      for (i = 1; i < v3; ++i)
      {
        if (v14)
        {
          v16 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 16 * i - 16);
          v17 = &v16[25 * v14];
          do
          {
            v19 = *(_QWORD **)(a2 + 48);
            v18 = *(_QWORD **)(a2 + 56);
            if (v19 != v18)
            {
              while ((_QWORD *)*v19 != v16)
              {
                if (++v19 == v18)
                {
                  v19 = *(_QWORD **)(a2 + 56);
                  break;
                }
              }
            }
            if (v19 == v18)
            {
              v20 = (_QWORD *)v16[15];
              if (v20)
              {
                do
                {
                  v21 = (_QWORD *)*v20;
                  operator delete(v20);
                  v20 = v21;
                }
                while (v21);
              }
              v22 = (void *)v16[13];
              v16[13] = 0;
              if (v22)
                operator delete(v22);
              v23 = (void *)v16[10];
              if (v23)
              {
                v16[11] = v23;
                operator delete(v23);
              }
            }
            v16 += 25;
          }
          while (v16 != v17);
          v3 = *(_DWORD *)(v2 + 32);
        }
        v14 *= 2;
      }
    }
    v5 = *(_QWORD *)(v2 + 40);
    if (v5)
    {
      v6 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 16 * (v3 - 1));
      v7 = &v6[25 * v5];
      do
      {
        v9 = *(_QWORD **)(a2 + 48);
        v8 = *(_QWORD **)(a2 + 56);
        if (v9 != v8)
        {
          while ((_QWORD *)*v9 != v6)
          {
            if (++v9 == v8)
            {
              v9 = *(_QWORD **)(a2 + 56);
              break;
            }
          }
        }
        if (v9 == v8)
        {
          v10 = (_QWORD *)v6[15];
          if (v10)
          {
            do
            {
              v11 = (_QWORD *)*v10;
              operator delete(v10);
              v10 = v11;
            }
            while (v11);
          }
          v12 = (void *)v6[13];
          v6[13] = 0;
          if (v12)
            operator delete(v12);
          v13 = (void *)v6[10];
          if (v13)
          {
            v6[11] = v13;
            operator delete(v13);
          }
        }
        v6 += 25;
      }
      while (v6 != v7);
    }
  }
}

void sub_20F4F1458(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t i;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  void *v73;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 32);
  if (v4)
  {
    if (v4 != 1)
    {
      v37 = 8;
      for (i = 1; i < v4; ++i)
      {
        v39 = *(_QWORD *)(v3 + 8) + 16 * i;
        v42 = *(_QWORD *)(v39 - 16);
        v40 = (_QWORD *)(v39 - 16);
        v41 = v42;
        v43 = *a3;
        v44 = *(_QWORD **)(*a3 + 48);
        v45 = *(_QWORD *)(*a3 + 56) - (_QWORD)v44;
        if (v45)
        {
          v46 = v45 >> 3;
          do
          {
            v47 = v46 >> 1;
            v48 = &v44[v46 >> 1];
            v50 = *v48;
            v49 = v48 + 1;
            v46 += ~(v46 >> 1);
            if (v50 < v41)
              v44 = v49;
            else
              v46 = v47;
          }
          while (v46);
        }
        *(_QWORD *)a3[1] = v44;
        v51 = *(_QWORD **)a3[1];
        v52 = *(_QWORD *)(v43 + 56) - (_QWORD)v51;
        if (v52)
        {
          v53 = v41 + 200 * v37;
          v54 = v52 >> 3;
          do
          {
            v55 = v54 >> 1;
            v56 = &v51[v54 >> 1];
            v58 = *v56;
            v57 = v56 + 1;
            v54 += ~(v54 >> 1);
            if (v53 < v58)
              v54 = v55;
            else
              v51 = v57;
          }
          while (v54);
        }
        *(_QWORD *)a3[2] = v51;
        if (v37)
        {
          v59 = (_QWORD *)*v40;
          v60 = *v40 + 200 * v37;
          v61 = (_QWORD *)*a2;
          v62 = (_QWORD *)a2[1];
          v63 = ((uint64_t)v62 - *a2) >> 3;
          do
          {
            v64 = v61;
            if (v62 != v61)
            {
              v64 = v61;
              v65 = v63;
              do
              {
                v66 = v65 >> 1;
                v67 = &v64[v65 >> 1];
                v69 = *v67;
                v68 = v67 + 1;
                v65 += ~(v65 >> 1);
                if (v69 < (unint64_t)v59)
                  v64 = v68;
                else
                  v65 = v66;
              }
              while (v65);
            }
            if (v64 == v62 || (_QWORD *)*v64 != v59)
            {
              v70 = (_QWORD *)v59[15];
              if (v70)
              {
                do
                {
                  v71 = (_QWORD *)*v70;
                  operator delete(v70);
                  v70 = v71;
                }
                while (v71);
              }
              v72 = (void *)v59[13];
              v59[13] = 0;
              if (v72)
                operator delete(v72);
              v73 = (void *)v59[10];
              if (v73)
              {
                v59[11] = v73;
                operator delete(v73);
              }
            }
            v59 += 25;
          }
          while (v59 != (_QWORD *)v60);
          v4 = *(_DWORD *)(v3 + 32);
        }
        v37 *= 2;
      }
    }
    v6 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v7 = *(_QWORD *)(v3 + 40);
    v8 = *a3;
    v9 = *(_QWORD **)(*a3 + 48);
    v10 = *(_QWORD *)(*a3 + 56) - (_QWORD)v9;
    if (v10)
    {
      v11 = v10 >> 3;
      do
      {
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v11 += ~(v11 >> 1);
        if (v15 < (unint64_t)v6)
          v9 = v14;
        else
          v11 = v12;
      }
      while (v11);
    }
    v16 = &v6[25 * v7];
    *(_QWORD *)a3[1] = v9;
    v17 = *(_QWORD **)a3[1];
    v18 = *(_QWORD *)(v8 + 56) - (_QWORD)v17;
    if (v18)
    {
      v19 = v18 >> 3;
      do
      {
        v20 = v19 >> 1;
        v21 = &v17[v19 >> 1];
        v23 = *v21;
        v22 = v21 + 1;
        v19 += ~(v19 >> 1);
        if ((unint64_t)v16 < v23)
          v19 = v20;
        else
          v17 = v22;
      }
      while (v19);
    }
    *(_QWORD *)a3[2] = v17;
    if (v7)
    {
      v25 = (_QWORD *)*a2;
      v24 = (_QWORD *)a2[1];
      v26 = ((uint64_t)v24 - *a2) >> 3;
      do
      {
        v27 = v25;
        if (v24 != v25)
        {
          v27 = v25;
          v28 = v26;
          do
          {
            v29 = v28 >> 1;
            v30 = &v27[v28 >> 1];
            v32 = *v30;
            v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (v32 < (unint64_t)v6)
              v27 = v31;
            else
              v28 = v29;
          }
          while (v28);
        }
        if (v27 == v24 || (_QWORD *)*v27 != v6)
        {
          v33 = (_QWORD *)v6[15];
          if (v33)
          {
            do
            {
              v34 = (_QWORD *)*v33;
              operator delete(v33);
              v33 = v34;
            }
            while (v34);
          }
          v35 = (void *)v6[13];
          v6[13] = 0;
          if (v35)
            operator delete(v35);
          v36 = (void *)v6[10];
          if (v36)
          {
            v6[11] = v36;
            operator delete(v36);
          }
        }
        v6 += 25;
      }
      while (v6 != v16);
    }
  }
}

_QWORD *sub_20F4F1770(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[13];
  a1[13] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20F4F17C8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[13];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[11];
  a1[11] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20F4F1820(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F4F1FC4(v10, v57);
          v10 = v57 + 1;
          result = sub_20F4F1FC4(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F4F1820(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F4F1FC4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F4F22CC(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F4F23E4((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F3C8FCC(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F4F23E4(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F4F2B88(v10, v57);
          v10 = v57 + 1;
          result = sub_20F4F2B88(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F4F23E4(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F4F2B88(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F4F2E90(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F4F3118((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F4F2FA8(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F4F2FA8(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 56 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 56 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F4F3118(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F4F38BC(v10, v57);
          v10 = v57 + 1;
          result = sub_20F4F38BC(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F4F3118(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F4F38BC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F4F3BC4(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F4F3E4C((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F4F3CDC(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F4F3CDC(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 184 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 184 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F4F3E4C(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F4F45F0(v10, v57);
          v10 = v57 + 1;
          result = sub_20F4F45F0(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F4F3E4C(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F4F45F0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

double sub_20F4F48F8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)a1 = &off_24CA008D0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &off_24CA009C0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_QWORD *)(a1 + 288) = &off_24CA00A38;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 532) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = &off_24CA008D0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 576) = &off_24CA00AB0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 820) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 720) = &off_24CA00AB0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 964) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 864) = &off_24CA00B28;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1008) = &off_24CA00BA0;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1252) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_QWORD *)(a1 + 1152) = &off_24CA00C18;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1396) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_QWORD *)(a1 + 1296) = &off_24CA00C90;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1540) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_QWORD *)(a1 + 1440) = &off_24CA00BA0;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1684) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_QWORD *)(a1 + 1584) = &off_24CA00D08;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1828) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_QWORD *)(a1 + 1728) = &off_24CA00D08;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 1972) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_QWORD *)(a1 + 1872) = &off_24CA00D80;
  *(_QWORD *)(a1 + 2152) = 0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2116) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_QWORD *)(a1 + 2016) = &off_24CA00DF8;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2260) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_QWORD *)(a1 + 2160) = &off_24CA00E70;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2404) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_QWORD *)(a1 + 2304) = &off_24CA00EE8;
  *(_QWORD *)(a1 + 2584) = 0;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2548) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_QWORD *)(a1 + 2448) = &off_24CA00DF8;
  *(_QWORD *)(a1 + 2728) = 0;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2692) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_QWORD *)(a1 + 2592) = &off_24CA00F60;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2836) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_QWORD *)(a1 + 2736) = &off_24CA00F60;
  *(_QWORD *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 2980) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_QWORD *)(a1 + 2880) = &off_24CA00FD8;
  *(_QWORD *)(a1 + 3160) = 0;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3124) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_QWORD *)(a1 + 3024) = &off_24CA008D0;
  *(_QWORD *)(a1 + 3304) = 0;
  *(_OWORD *)(a1 + 3288) = 0u;
  *(_OWORD *)(a1 + 3268) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3256) = 0u;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_QWORD *)(a1 + 3168) = &off_24CA009C0;
  *(_QWORD *)(a1 + 3448) = 0;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3412) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_QWORD *)(a1 + 3312) = &off_24CA00A38;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_OWORD *)(a1 + 3576) = 0u;
  *(_OWORD *)(a1 + 3556) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_QWORD *)(a1 + 3456) = &off_24CA008D0;
  *(_QWORD *)(a1 + 3736) = 0;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3700) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_OWORD *)(a1 + 3688) = 0u;
  *(_OWORD *)(a1 + 3640) = 0u;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3608) = 0u;
  *(_OWORD *)(a1 + 3624) = 0u;
  *(_QWORD *)(a1 + 3600) = &off_24CA00AB0;
  *(_QWORD *)(a1 + 3880) = 0;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3844) = 0u;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3784) = 0u;
  *(_OWORD *)(a1 + 3800) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_QWORD *)(a1 + 3744) = &off_24CA00AB0;
  *(_QWORD *)(a1 + 4024) = 0;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_OWORD *)(a1 + 3988) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_QWORD *)(a1 + 3888) = &off_24CA00B28;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_QWORD *)(a1 + 4168) = 0;
  *(_OWORD *)(a1 + 4132) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_QWORD *)(a1 + 4032) = &off_24CA01050;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_QWORD *)(a1 + 4312) = 0;
  *(_OWORD *)(a1 + 4276) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_QWORD *)(a1 + 4176) = &off_24CA010C8;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_QWORD *)(a1 + 4456) = 0;
  *(_OWORD *)(a1 + 4420) = 0u;
  *(_OWORD *)(a1 + 4392) = 0u;
  *(_OWORD *)(a1 + 4408) = 0u;
  *(_OWORD *)(a1 + 4360) = 0u;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(_QWORD *)(a1 + 4320) = &off_24CA01140;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_QWORD *)(a1 + 4600) = 0;
  *(_OWORD *)(a1 + 4564) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4504) = 0u;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_QWORD *)(a1 + 4464) = &off_24CA01050;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_QWORD *)(a1 + 4744) = 0;
  *(_OWORD *)(a1 + 4708) = 0u;
  *(_OWORD *)(a1 + 4680) = 0u;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_OWORD *)(a1 + 4664) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_QWORD *)(a1 + 4608) = &off_24CA011B8;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_QWORD *)(a1 + 4888) = 0;
  *(_OWORD *)(a1 + 4852) = 0u;
  *(_OWORD *)(a1 + 4824) = 0u;
  *(_OWORD *)(a1 + 4840) = 0u;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(_OWORD *)(a1 + 4808) = 0u;
  *(_OWORD *)(a1 + 4760) = 0u;
  *(_OWORD *)(a1 + 4776) = 0u;
  *(_QWORD *)(a1 + 4752) = &off_24CA011B8;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_QWORD *)(a1 + 5032) = 0;
  *(_OWORD *)(a1 + 4996) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_QWORD *)(a1 + 4896) = &off_24CA01230;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_QWORD *)(a1 + 5176) = 0;
  *(_OWORD *)(a1 + 5140) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_QWORD *)(a1 + 5040) = &off_24CA01050;
  *(_QWORD *)(a1 + 5320) = 0;
  *(_QWORD *)(a1 + 5312) = 0;
  *(_QWORD *)(a1 + 5304) = 0;
  *(_OWORD *)(a1 + 5284) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_QWORD *)(a1 + 5184) = &off_24CA010C8;
  *(_QWORD *)(a1 + 5464) = 0;
  *(_QWORD *)(a1 + 5456) = 0;
  *(_QWORD *)(a1 + 5448) = 0;
  *(_OWORD *)(a1 + 5428) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5368) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_QWORD *)(a1 + 5328) = &off_24CA01140;
  *(_QWORD *)(a1 + 5608) = 0;
  *(_QWORD *)(a1 + 5600) = 0;
  *(_QWORD *)(a1 + 5592) = 0;
  *(_OWORD *)(a1 + 5572) = 0u;
  *(_OWORD *)(a1 + 5544) = 0u;
  *(_OWORD *)(a1 + 5560) = 0u;
  *(_OWORD *)(a1 + 5512) = 0u;
  *(_OWORD *)(a1 + 5528) = 0u;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_QWORD *)(a1 + 5472) = &off_24CA01050;
  *(_QWORD *)(a1 + 5752) = 0;
  *(_QWORD *)(a1 + 5744) = 0;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_OWORD *)(a1 + 5716) = 0u;
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_OWORD *)(a1 + 5704) = 0u;
  *(_OWORD *)(a1 + 5656) = 0u;
  *(_OWORD *)(a1 + 5672) = 0u;
  *(_OWORD *)(a1 + 5624) = 0u;
  *(_OWORD *)(a1 + 5640) = 0u;
  *(_QWORD *)(a1 + 5616) = &off_24CA011B8;
  *(_QWORD *)(a1 + 5896) = 0;
  *(_QWORD *)(a1 + 5888) = 0;
  *(_QWORD *)(a1 + 5880) = 0;
  *(_OWORD *)(a1 + 5860) = 0u;
  *(_OWORD *)(a1 + 5832) = 0u;
  *(_OWORD *)(a1 + 5848) = 0u;
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_OWORD *)(a1 + 5816) = 0u;
  *(_OWORD *)(a1 + 5768) = 0u;
  *(_OWORD *)(a1 + 5784) = 0u;
  *(_QWORD *)(a1 + 5760) = &off_24CA011B8;
  *(_QWORD *)(a1 + 6040) = 0;
  *(_QWORD *)(a1 + 6032) = 0;
  *(_QWORD *)(a1 + 6024) = 0;
  *(_OWORD *)(a1 + 6004) = 0u;
  *(_OWORD *)(a1 + 5976) = 0u;
  *(_OWORD *)(a1 + 5992) = 0u;
  *(_OWORD *)(a1 + 5944) = 0u;
  *(_OWORD *)(a1 + 5960) = 0u;
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_OWORD *)(a1 + 5928) = 0u;
  *(_QWORD *)(a1 + 5904) = &off_24CA01230;
  *(_QWORD *)(a1 + 6184) = 0;
  *(_QWORD *)(a1 + 6176) = 0;
  *(_QWORD *)(a1 + 6168) = 0;
  *(_OWORD *)(a1 + 6148) = 0u;
  *(_OWORD *)(a1 + 6120) = 0u;
  *(_OWORD *)(a1 + 6136) = 0u;
  *(_OWORD *)(a1 + 6088) = 0u;
  *(_OWORD *)(a1 + 6104) = 0u;
  *(_OWORD *)(a1 + 6056) = 0u;
  *(_OWORD *)(a1 + 6072) = 0u;
  *(_QWORD *)(a1 + 6048) = &off_24CA012A8;
  *(_QWORD *)(a1 + 6328) = 0;
  *(_QWORD *)(a1 + 6320) = 0;
  *(_QWORD *)(a1 + 6312) = 0;
  *(_OWORD *)(a1 + 6292) = 0u;
  *(_OWORD *)(a1 + 6264) = 0u;
  *(_OWORD *)(a1 + 6280) = 0u;
  *(_OWORD *)(a1 + 6232) = 0u;
  *(_OWORD *)(a1 + 6248) = 0u;
  *(_OWORD *)(a1 + 6200) = 0u;
  *(_OWORD *)(a1 + 6216) = 0u;
  *(_QWORD *)(a1 + 6192) = &off_24CA01320;
  *(_QWORD *)(a1 + 6472) = 0;
  *(_QWORD *)(a1 + 6464) = 0;
  *(_QWORD *)(a1 + 6456) = 0;
  *(_OWORD *)(a1 + 6436) = 0u;
  *(_OWORD *)(a1 + 6408) = 0u;
  *(_OWORD *)(a1 + 6424) = 0u;
  *(_OWORD *)(a1 + 6376) = 0u;
  *(_OWORD *)(a1 + 6392) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_QWORD *)(a1 + 6336) = &off_24CA01398;
  *(_QWORD *)(a1 + 6616) = 0;
  *(_QWORD *)(a1 + 6608) = 0;
  *(_QWORD *)(a1 + 6600) = 0;
  *(_OWORD *)(a1 + 6580) = 0u;
  *(_OWORD *)(a1 + 6552) = 0u;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(_OWORD *)(a1 + 6520) = 0u;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6504) = 0u;
  *(_QWORD *)(a1 + 6480) = &off_24CA012A8;
  *(_QWORD *)(a1 + 6760) = 0;
  *(_QWORD *)(a1 + 6752) = 0;
  *(_QWORD *)(a1 + 6744) = 0;
  *(_OWORD *)(a1 + 6724) = 0u;
  *(_OWORD *)(a1 + 6696) = 0u;
  *(_OWORD *)(a1 + 6712) = 0u;
  *(_OWORD *)(a1 + 6664) = 0u;
  *(_OWORD *)(a1 + 6680) = 0u;
  *(_OWORD *)(a1 + 6632) = 0u;
  *(_OWORD *)(a1 + 6648) = 0u;
  *(_QWORD *)(a1 + 6624) = &off_24CA01410;
  *(_QWORD *)(a1 + 6904) = 0;
  *(_QWORD *)(a1 + 6896) = 0;
  *(_QWORD *)(a1 + 6888) = 0;
  *(_OWORD *)(a1 + 6868) = 0u;
  *(_OWORD *)(a1 + 6840) = 0u;
  *(_OWORD *)(a1 + 6856) = 0u;
  *(_OWORD *)(a1 + 6808) = 0u;
  *(_OWORD *)(a1 + 6824) = 0u;
  *(_OWORD *)(a1 + 6776) = 0u;
  *(_OWORD *)(a1 + 6792) = 0u;
  *(_QWORD *)(a1 + 6768) = &off_24CA01410;
  *(_QWORD *)(a1 + 7048) = 0;
  *(_QWORD *)(a1 + 7040) = 0;
  *(_QWORD *)(a1 + 7032) = 0;
  *(_OWORD *)(a1 + 7012) = 0u;
  *(_OWORD *)(a1 + 6984) = 0u;
  *(_OWORD *)(a1 + 7000) = 0u;
  *(_OWORD *)(a1 + 6952) = 0u;
  *(_OWORD *)(a1 + 6968) = 0u;
  *(_OWORD *)(a1 + 6920) = 0u;
  *(_OWORD *)(a1 + 6936) = 0u;
  *(_QWORD *)(a1 + 6912) = &off_24CA01488;
  return result;
}

_QWORD *sub_20F4F50FC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F516C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20F4F51EC(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[1] = 0;
  v2 = (void **)a1[6];
  v3 = a1[7];
  a1[10] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[7];
      v2 = (void **)(a1[6] + 8);
      a1[6] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 512;
LABEL_7:
    a1[9] = v6;
  }
  a1[3] = a1[2];
  a1[12] = a1[11];
  a1[16] = a1[15];
}

void sub_20F4F527C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  char **v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v106;
  uint64_t v107;

  v3 = a3;
  v4 = a2;
  v7 = *(char **)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v6 = (char **)(a1 + 88);
  if (v7 == (char *)v8)
  {
    v13 = a3 * a2;
    if ((_DWORD)v13)
      sub_20F4F60DC((uint64_t *)(a1 + 88), v13);
    *(_DWORD *)(a1 + 112) = v4;
  }
  else
  {
    if (!(a3 | a2))
    {
      *(_DWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 96) = v7;
      goto LABEL_109;
    }
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 112);
    if (v9 == a2)
    {
      v11 = v10 * a3;
      v12 = (v8 - (uint64_t)v7) >> 4;
      if (v11 <= v12)
      {
        if (v11 < v12)
          *(_QWORD *)(a1 + 96) = &v7[16 * v11];
      }
      else
      {
        sub_20F4F60DC((uint64_t *)(a1 + 88), v11 - v12);
      }
      goto LABEL_109;
    }
    if (v10 < a2)
    {
      if (2 * v10 <= a2)
        v14 = a2;
      else
        v14 = 2 * v10;
      v15 = v14 - v10;
      v16 = *(unsigned int *)(a1 + 12);
      if (v16 <= a3)
      {
        v45 = (v16 - 1);
        if ((_DWORD)v16 == 1)
        {
          v47 = 1;
        }
        else
        {
          do
          {
            v46 = (uint64_t)&(*v6)[16 * v10];
            LODWORD(v106) = 0;
            v107 = 0;
            sub_20F4F62E8(v6, v46, v15, (char *)&v106);
            v10 += v14;
            --v45;
          }
          while (v45);
          v47 = *(_DWORD *)(a1 + 12);
          v8 = *(_QWORD *)(a1 + 96);
        }
        v4 = a2;
        LODWORD(v106) = 0;
        v107 = 0;
        sub_20F4F62E8(v6, v8, v15 + (v3 - v47) * v14, (char *)&v106);
      }
      else
      {
        v103 = v14 - v10;
        v17 = a3;
        v18 = a3;
        do
        {
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v18);
          if (v19)
          {
            v20 = *(_QWORD *)(a1 + 48);
            v21 = *(_QWORD *)(a1 + 56);
            v22 = *(_QWORD *)(a1 + 80);
            v23 = 16 * v19;
            v24 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 16 * (*(_DWORD *)(a1 + 112) * v18) + 8);
            do
            {
              v26 = ((v21 - v20) << 6) - 1;
              if (v21 == v20)
                v26 = 0;
              v27 = *(_QWORD *)(a1 + 72) + v22;
              if (v26 == v27)
              {
                sub_20EDB36DC(a1 + 40);
                v20 = *(_QWORD *)(a1 + 48);
                v21 = *(_QWORD *)(a1 + 56);
                v27 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              }
              v25 = *v24;
              v24 += 2;
              *(_QWORD *)(*(_QWORD *)(v20 + ((v27 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v27 & 0x1FF)) = v25;
              v22 = *(_QWORD *)(a1 + 80) + 1;
              *(_QWORD *)(a1 + 80) = v22;
              v23 -= 16;
            }
            while (v23);
          }
          ++v18;
        }
        while (v18 != v16);
        v3 = a3;
        v4 = a2;
        v48 = *(_QWORD *)(a1 + 88) + 16 * v10 * a3;
        if (v48 != *(_QWORD *)(a1 + 96))
          *(_QWORD *)(a1 + 96) = v48;
        if (a3)
        {
          do
          {
            v49 = (uint64_t)&(*v6)[16 * v10];
            LODWORD(v106) = 0;
            v107 = 0;
            sub_20F4F62E8(v6, v49, v103, (char *)&v106);
            v10 += v14;
            --v17;
          }
          while (v17);
        }
      }
      *(_DWORD *)(a1 + 112) = v14;
      goto LABEL_109;
    }
    if (v9 < a2)
    {
      v28 = v10 * a3;
      if (v28 > (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v7) >> 4)
      {
        v30 = (char *)operator new(16 * v28);
        v31 = &v30[(v8 - (_QWORD)v7) & 0xFFFFFFFFFFFFFFF0];
        v32 = v31;
        do
        {
          *((_OWORD *)v32 - 1) = *(_OWORD *)(v8 - 16);
          v32 -= 16;
          v8 -= 16;
        }
        while ((char *)v8 != v7);
        *(_QWORD *)(a1 + 88) = v32;
        *(_QWORD *)(a1 + 96) = v31;
        *(_QWORD *)(a1 + 104) = &v30[16 * v28];
        v3 = a3;
        if (v7)
          operator delete(v7);
      }
      v33 = *(unsigned int *)(a1 + 12);
      if (v3 < v33)
      {
        v34 = v3;
        v35 = v3;
        do
        {
          v36 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v35);
          if (v36)
          {
            v37 = *(_QWORD *)(a1 + 48);
            v38 = *(_QWORD *)(a1 + 56);
            v39 = *(_QWORD *)(a1 + 80);
            v40 = 16 * v36;
            v41 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 16 * (*(_DWORD *)(a1 + 112) * v35) + 8);
            do
            {
              v43 = ((v38 - v37) << 6) - 1;
              if (v38 == v37)
                v43 = 0;
              v44 = *(_QWORD *)(a1 + 72) + v39;
              if (v43 == v44)
              {
                sub_20EDB36DC(a1 + 40);
                v37 = *(_QWORD *)(a1 + 48);
                v38 = *(_QWORD *)(a1 + 56);
                v44 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              }
              v42 = *v41;
              v41 += 2;
              *(_QWORD *)(*(_QWORD *)(v37 + ((v44 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v44 & 0x1FF)) = v42;
              v39 = *(_QWORD *)(a1 + 80) + 1;
              *(_QWORD *)(a1 + 80) = v39;
              v40 -= 16;
            }
            while (v40);
          }
          ++v35;
        }
        while (v35 != v33);
        v3 = v34;
        v69 = *(_QWORD *)(a1 + 88) + 16 * *(_DWORD *)(a1 + 112) * v34;
        if (v69 != *(_QWORD *)(a1 + 96))
          *(_QWORD *)(a1 + 96) = v69;
        goto LABEL_109;
      }
      v68 = v3 - v33;
LABEL_108:
      v99 = *(_QWORD *)(a1 + 96);
      v100 = *(_DWORD *)(a1 + 112) * v68;
      LODWORD(v106) = 0;
      v107 = 0;
      sub_20F4F62E8(v6, v99, v100, (char *)&v106);
      goto LABEL_109;
    }
    if (v9 <= a2)
      goto LABEL_109;
    v50 = v10 * a3;
    if (v50 > (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v7) >> 4)
    {
      v52 = (char *)operator new(16 * v50);
      v53 = &v52[(v8 - (_QWORD)v7) & 0xFFFFFFFFFFFFFFF0];
      v54 = v53;
      do
      {
        *((_OWORD *)v54 - 1) = *(_OWORD *)(v8 - 16);
        v54 -= 16;
        v8 -= 16;
      }
      while ((char *)v8 != v7);
      *(_QWORD *)(a1 + 88) = v54;
      *(_QWORD *)(a1 + 96) = v53;
      *(_QWORD *)(a1 + 104) = &v52[16 * v50];
      v3 = a3;
      if (v7)
        operator delete(v7);
    }
    v55 = *(unsigned int *)(a1 + 12);
    if (v55 <= v3)
    {
      if ((_DWORD)v55)
      {
        for (i = 0; i != v55; ++i)
        {
          v71 = *(_QWORD *)(a1 + 88);
          v72 = (*(_DWORD *)(a1 + 112) * i);
          v73 = v71 + 16 * v72;
          v74 = *(_QWORD *)(a1 + 120);
          v75 = *(_QWORD *)(v74 + 8 * i);
          v76 = v71 + 16 * (v75 + v72);
          if (v75)
          {
            v77 = 16 * v75;
            v78 = v71 + 16 * v72;
            while (*(_DWORD *)v78 < v4)
            {
              v78 += 16;
              v77 -= 16;
              if (!v77)
              {
                *(_QWORD *)(v74 + 8 * i) = (v76 - v73) >> 4;
                goto LABEL_74;
              }
            }
          }
          else
          {
            v78 = v71 + 16 * v72;
          }
          *(_QWORD *)(v74 + 8 * i) = (v78 - v73) >> 4;
          if (v78 != v76)
          {
            v79 = *(_QWORD *)(a1 + 48);
            v80 = *(_QWORD *)(a1 + 56);
            v81 = *(_QWORD *)(a1 + 80);
            do
            {
              v82 = ((v80 - v79) << 6) - 1;
              if (v80 == v79)
                v82 = 0;
              v83 = *(_QWORD *)(a1 + 72) + v81;
              if (v82 == v83)
              {
                sub_20EDB36DC(a1 + 40);
                v79 = *(_QWORD *)(a1 + 48);
                v80 = *(_QWORD *)(a1 + 56);
                v83 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              }
              *(_QWORD *)(*(_QWORD *)(v79 + ((v83 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v83 & 0x1FF)) = *(_QWORD *)(v78 + 8);
              v81 = *(_QWORD *)(a1 + 80) + 1;
              *(_QWORD *)(a1 + 80) = v81;
              v78 += 16;
            }
            while (v78 != v76);
          }
LABEL_74:
          ;
        }
        v68 = v3 - *(_DWORD *)(a1 + 12);
      }
      else
      {
        v68 = v3;
      }
      goto LABEL_108;
    }
    v56 = v3;
    v57 = v3;
    v58 = v3;
    do
    {
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v58);
      if (v59)
      {
        v60 = *(_QWORD *)(a1 + 48);
        v61 = *(_QWORD *)(a1 + 56);
        v62 = *(_QWORD *)(a1 + 80);
        v63 = 16 * v59;
        v64 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 16 * (*(_DWORD *)(a1 + 112) * v58) + 8);
        do
        {
          v66 = ((v61 - v60) << 6) - 1;
          if (v61 == v60)
            v66 = 0;
          v67 = *(_QWORD *)(a1 + 72) + v62;
          if (v66 == v67)
          {
            sub_20EDB36DC(a1 + 40);
            v60 = *(_QWORD *)(a1 + 48);
            v61 = *(_QWORD *)(a1 + 56);
            v67 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v65 = *v64;
          v64 += 2;
          *(_QWORD *)(*(_QWORD *)(v60 + ((v67 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v67 & 0x1FF)) = v65;
          v62 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v62;
          v63 -= 16;
        }
        while (v63);
      }
      ++v58;
    }
    while (v58 != v55);
    v3 = v56;
    v84 = *(_QWORD *)(a1 + 88) + 16 * *(_DWORD *)(a1 + 112) * v56;
    if (v84 != *(_QWORD *)(a1 + 96))
      *(_QWORD *)(a1 + 96) = v84;
    if (v56)
    {
      v85 = 0;
      do
      {
        v86 = *(_QWORD *)(a1 + 88);
        v87 = (*(_DWORD *)(a1 + 112) * v85);
        v88 = v86 + 16 * v87;
        v89 = *(_QWORD *)(a1 + 120);
        v90 = *(_QWORD *)(v89 + 8 * v85);
        v91 = v86 + 16 * (v90 + v87);
        if (v90)
        {
          v92 = 16 * v90;
          v93 = v86 + 16 * v87;
          while (*(_DWORD *)v93 < v4)
          {
            v93 += 16;
            v92 -= 16;
            if (!v92)
            {
              *(_QWORD *)(v89 + 8 * v85) = (v91 - v88) >> 4;
              goto LABEL_92;
            }
          }
        }
        else
        {
          v93 = v86 + 16 * v87;
        }
        *(_QWORD *)(v89 + 8 * v85) = (v93 - v88) >> 4;
        if (v93 != v91)
        {
          v94 = *(_QWORD *)(a1 + 48);
          v95 = *(_QWORD *)(a1 + 56);
          v96 = *(_QWORD *)(a1 + 80);
          do
          {
            v97 = ((v95 - v94) << 6) - 1;
            if (v95 == v94)
              v97 = 0;
            v98 = *(_QWORD *)(a1 + 72) + v96;
            if (v97 == v98)
            {
              sub_20EDB36DC(a1 + 40);
              v94 = *(_QWORD *)(a1 + 48);
              v95 = *(_QWORD *)(a1 + 56);
              v98 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            }
            *(_QWORD *)(*(_QWORD *)(v94 + ((v98 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v98 & 0x1FF)) = *(_QWORD *)(v93 + 8);
            v96 = *(_QWORD *)(a1 + 80) + 1;
            *(_QWORD *)(a1 + 80) = v96;
            v93 += 16;
          }
          while (v93 != v91);
        }
LABEL_92:
        ++v85;
      }
      while (v85 != v57);
    }
  }
LABEL_109:
  v101 = *(_QWORD *)(a1 + 120);
  v102 = (*(_QWORD *)(a1 + 128) - v101) >> 3;
  if (v3 != v102)
  {
    v106 = 0;
    if (v3 <= v102)
    {
      if (v3 < v102)
        *(_QWORD *)(a1 + 128) = v101 + 8 * v3;
    }
    else
    {
      sub_20F4F5E74(a1 + 120, v3 - v102, &v106);
    }
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
}

BOOL sub_20F4F5A0C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F5B34(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F5B64()
{
  return 6;
}

uint64_t sub_20F4F5B6C()
{
  return 6;
}

uint64_t sub_20F4F5B74(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v37 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v37 == *(int8x16_t **)a2)
          {
            v17 = v37[16];
            v16 = v37[17];
            v15 = v37[14];
            v14 = v37[15];
            v13 = v37[12];
            v12 = v37[13];
            v11 = v37[10];
            v10 = v37[11];
            v23 = v37[8];
            v22 = v37[9];
            v40 = vextq_s8(v17, v17, 8uLL).u64[0];
            v41 = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v15, v15, 8uLL).u64[0];
            v19 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v13, v13, 8uLL).u64[0];
            v38 = vextq_s8(v10, v10, 8uLL).u64[0];
            v39 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v11, v11, 8uLL).u64[0];
            v9 = v37[6];
            v8 = v37[7];
          }
          else
          {
            v9 = v37[6];
            v8 = v37[7];
            v11 = v37[10];
            v10 = v37[11];
            v13 = v37[12];
            v12 = v37[13];
            v15 = v37[14];
            v14 = v37[15];
            v17 = v37[16];
            v16 = v37[17];
            v40 = vextq_s8(v17, v17, 8uLL).u64[0];
            v41 = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v15, v15, 8uLL).u64[0];
            v19 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v13, v13, 8uLL).u64[0];
            v38 = vextq_s8(v10, v10, 8uLL).u64[0];
            v39 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v11, v11, 8uLL).u64[0];
            v23 = v37[8];
            v22 = v37[9];
          }
          v25 = v37[4];
          v24 = v37[5];
          v27 = v37[2];
          v26 = v37[3];
          v29 = *v37;
          v28 = v37[1];
          v15.i64[1] = v18;
          v12.i64[1] = v19;
          v13.i64[1] = v20;
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          v30 = *(unsigned int *)(a2 + 16);
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          v25.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v10.i64[1] = v38;
          v11.i64[1] = v21;
          v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
          v16.i64[1] = v41;
          v31 = (int8x16_t *)(*(_QWORD *)a2
                            + 8 * (a3 + 6 * *((_DWORD *)v7 - 2) + v30 * (HIDWORD(a3) + 6 * i)));
          v17.i64[1] = v40;
          v14.i64[1] = v39;
          *v31 = v29;
          v31[1] = v28;
          v31[2] = v27;
          v32 = (int8x16_t *)((char *)v31 + 8 * v30);
          *v32 = v26;
          v32[1] = v25;
          v32[2] = v24;
          v33 = &v31[v30];
          *v33 = v9;
          v33[1] = v8;
          v33[2] = v23;
          v34 = (int8x16_t *)((char *)v31 + 24 * v30);
          *v34 = v22;
          v34[1] = v11;
          v34[2] = v10;
          v35 = &v31[2 * v30];
          *v35 = v13;
          v35[1] = v12;
          v35[2] = v15;
          v36 = (int8x16_t *)((char *)v31 + 40 * v30);
          *v36 = v14;
          v36[1] = v17;
          v36[2] = v16;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F4F5D88(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v8)
      {
        v9 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        v10 = 16 * v8;
        while (i != *((_DWORD *)v9 - 2))
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v9);
        v6 = *a2 + 8 * (a3 + 6 * i);
        *(_QWORD *)&v7 = *v5;
        if (v5 == (_QWORD *)*a2)
        {
          *(_QWORD *)&v11 = v5[14];
          *(_QWORD *)&v12 = v5[28];
          *((_QWORD *)&v7 + 1) = v5[7];
          *((_QWORD *)&v11 + 1) = v5[21];
          *((_QWORD *)&v12 + 1) = v5[35];
          *(_OWORD *)(v6 + 16) = v11;
          *(_OWORD *)(v6 + 32) = v12;
          *(_OWORD *)v6 = v7;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          *(_QWORD *)(v6 + 8) = v5[7];
          *(_QWORD *)(v6 + 16) = v5[14];
          *(_QWORD *)(v6 + 24) = v5[21];
          *(_QWORD *)(v6 + 32) = v5[28];
          *(_QWORD *)(v6 + 40) = v5[35];
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

void sub_20F4F5E74(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = (int64x2_t *)(v7 + 16);
      v19 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = vdupq_lane_s64(*a3, 0);
        v18[-1] = v20;
        *v18 = v20;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      sub_20E867F44();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_20F4F60DC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_35;
      v17 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v6 = &v5[16 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      v18 = v5 + 16;
      v19 = v17 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v18 - 4) = 0;
        *(_DWORD *)v18 = 0;
        *((_QWORD *)v18 - 1) = 0;
        *((_QWORD *)v18 + 1) = 0;
        v18 += 32;
        v19 -= 2;
      }
      while (v19);
      if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          *(_DWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      v6 = &v5[16 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  v7 = (char *)*a1;
  v8 = (uint64_t)&v5[-*a1] >> 4;
  v9 = v8 + a2;
  if ((v8 + a2) >> 60)
    sub_20E867F44();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      sub_20E877A38();
    v12 = (char *)operator new(16 * v11);
    v13 = (uint64_t)&v12[16 * v8];
    v14 = v13 + 16 * a2;
    v15 = v13;
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    v12 = 0;
    v13 = 16 * v8;
    v14 = 16 * v8 + 16 * a2;
    v15 = 16 * v8;
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
    {
      do
      {
LABEL_24:
        *(_DWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        v15 += 16;
      }
      while (v15 != v14);
      goto LABEL_25;
    }
  }
  v20 = v16 + 1;
  v15 = v13 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL);
  v21 = v13 + 16;
  v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(_DWORD *)(v21 - 16) = 0;
    *(_DWORD *)v21 = 0;
    *(_QWORD *)(v21 - 8) = 0;
    *(_QWORD *)(v21 + 8) = 0;
    v21 += 32;
    v22 -= 2;
  }
  while (v22);
  if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  v23 = &v12[16 * v11];
  if (v5 == v7)
  {
    v25 = (void *)*a1;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
LABEL_28:
      operator delete(v25);
  }
  else
  {
    do
    {
      v24 = v13 - 16;
      *(_OWORD *)(v13 - 16) = *((_OWORD *)v6 - 1);
      v6 -= 16;
      v13 -= 16;
    }
    while (v6 != v7);
    v25 = (void *)*a1;
    *a1 = v24;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
      goto LABEL_28;
  }
}

void sub_20F4F62E8(char **a1, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;

  if (!a3)
    return;
  v4 = a4;
  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - (_QWORD)*a1;
  v10 = &(*a1)[v9 & 0xFFFFFFFFFFFFFFF0];
  v11 = a1[2];
  if (a3 > (v11 - v8) >> 4)
  {
    v12 = a3 + ((v8 - v7) >> 4);
    if (v12 >> 60)
      sub_20E867F44();
    v13 = v11 - v7;
    v14 = v13 >> 3;
    if (v13 >> 3 <= v12)
      v14 = v12;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 60)
        sub_20E877A38();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v26 = &v16[16 * (v9 >> 4)];
    v27 = 16 * a3;
    v28 = &v26[16 * a3];
    v29 = v26;
    do
    {
      *(_OWORD *)v29 = *(_OWORD *)v4;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    v30 = *a1;
    if (*a1 != v10)
    {
      v31 = v10;
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v31 - 1);
        v26 -= 16;
        v31 -= 16;
      }
      while (v31 != v30);
      v8 = a1[1];
    }
    v32 = &v16[16 * v15];
    if (v8 != v10)
      memmove(v28, v10, v8 - v10);
    v33 = *a1;
    *a1 = v26;
    a1[1] = &v28[v8 - v10];
    a1[2] = v32;
    if (v33)
      operator delete(v33);
    return;
  }
  v17 = (v8 - v10) >> 4;
  v18 = 16 * a3;
  if (a3 > v17)
  {
    v19 = 0;
    v20 = &v8[16 * (a3 - v17)];
    do
    {
      *(_OWORD *)&v8[v19] = *(_OWORD *)a4;
      v19 += 16;
    }
    while (v18 - 16 * v17 != v19);
    a1[1] = v20;
    if (v8 == v10)
      return;
    v21 = &v10[v18];
    v22 = &v20[-v18];
    v23 = &v8[16 * (a3 - v17)];
    if (v22 >= v8)
      goto LABEL_21;
    goto LABEL_19;
  }
  v20 = a1[1];
  v17 = a3;
  v21 = &v10[v18];
  v22 = &v8[-v18];
  v23 = v20;
  if (v22 < v8)
  {
LABEL_19:
    v23 = v20;
    do
    {
      v24 = *(_OWORD *)v22;
      v22 += 16;
      *(_OWORD *)v23 = v24;
      v23 += 16;
    }
    while (v22 < v8);
  }
LABEL_21:
  a1[1] = v23;
  if (v20 != v21)
    memmove(&v20[-16 * ((v20 - v21) >> 4)], v10, v20 - v21);
  if (v10 <= v4)
  {
    if (a1[1] <= v4)
      v25 = 0;
    else
      v25 = a3;
    v4 += 16 * v25;
  }
  do
  {
    *(_OWORD *)v10 = *(_OWORD *)v4;
    v10 += 16;
    --v17;
  }
  while (v17);
}

_QWORD *sub_20F4F6510(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F6580(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F6600(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (54 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F6728(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x36uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F6758()
{
  return 9;
}

uint64_t sub_20F4F6760()
{
  return 6;
}

uint64_t sub_20F4F6768(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t *v45;
  uint64_t v46;
  int8x16_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  int8x16_t v67;
  __int128 v68;
  __int128 v69;
  int8x16_t v70;
  int8x16_t v71;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v49 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v49 == *(_QWORD *)a2)
          {
            v25 = *(int8x16_t *)(v49 + 336);
            v26 = *(int8x16_t *)(v49 + 304);
            v24 = *(int8x16_t *)(v49 + 320);
            v34 = vextq_s8(*(int8x16_t *)(v49 + 416), *(int8x16_t *)(v49 + 416), 8uLL).u64[0];
            v62 = *(int8x16_t *)(v49 + 400);
            *(_QWORD *)&v69 = vextq_s8(v62, v62, 8uLL).u64[0];
            v70 = *(int8x16_t *)(v49 + 368);
            v27 = *(int8x16_t *)(v49 + 288);
            v71 = *(int8x16_t *)(v49 + 384);
            v67 = *(int8x16_t *)(v49 + 352);
            *(_QWORD *)&v68 = vextq_s8(v71, v71, 8uLL).u64[0];
            *(_QWORD *)&v22 = vextq_s8(v70, v70, 8uLL).u64[0];
            *(_QWORD *)&v23 = vextq_s8(v67, v67, 8uLL).u64[0];
            v53 = vextq_s8(v25, v25, 8uLL).u64[0];
            v52 = vextq_s8(v24, v24, 8uLL).u64[0];
            v51 = vextq_s8(v26, v26, 8uLL).u64[0];
            v19 = *(int8x16_t *)(v49 + 176);
            v18 = *(int8x16_t *)(v49 + 192);
            v50 = vextq_s8(v27, v27, 8uLL).u64[0];
            v60 = *(int8x16_t *)(v49 + 272);
            v61 = *(int8x16_t *)(v49 + 256);
            v65 = *(int8x16_t *)(v49 + 208);
            v66 = vextq_s8(v60, v60, 8uLL).u64[0];
            *(_QWORD *)&v37 = vextq_s8(v61, v61, 8uLL).u64[0];
            v17 = *(int8x16_t *)(v49 + 144);
            v16 = *(int8x16_t *)(v49 + 160);
            v58 = *(int8x16_t *)(v49 + 224);
            v59 = *(int8x16_t *)(v49 + 240);
            *(_QWORD *)&v21 = vextq_s8(v59, v59, 8uLL).u64[0];
            *(_QWORD *)&v20 = vextq_s8(v58, v58, 8uLL).u64[0];
            *(_QWORD *)&v38 = vextq_s8(v65, v65, 8uLL).u64[0];
            v28 = vextq_s8(v18, v18, 8uLL).u64[0];
            v29 = vextq_s8(v19, v19, 8uLL).u64[0];
            v30 = vextq_s8(v16, v16, 8uLL).u64[0];
            v31 = vextq_s8(v17, v17, 8uLL).u64[0];
            v56 = *(int8x16_t *)(v49 + 112);
            v57 = *(int8x16_t *)(v49 + 128);
            v64 = vextq_s8(v57, v57, 8uLL).u64[0];
            *(_QWORD *)&v15 = vextq_s8(v56, v56, 8uLL).u64[0];
            v10 = *(int8x16_t *)(v49 + 48);
            v54 = *(int8x16_t *)(v49 + 80);
            v55 = *(int8x16_t *)(v49 + 96);
            *(_QWORD *)&v14 = vextq_s8(v55, v55, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v54, v54, 8uLL).u64[0];
            v63 = *(int8x16_t *)(v49 + 64);
            *(_QWORD *)&v12 = vextq_s8(v63, v63, 8uLL).u64[0];
            v39 = *(_OWORD *)(v49 + 416);
            v8 = *(int8x16_t *)(v49 + 16);
            v11 = *(int8x16_t *)(v49 + 32);
            v32 = vextq_s8(v10, v10, 8uLL).u64[0];
            v33 = vextq_s8(v11, v11, 8uLL).u64[0];
            v9 = *(int8x16_t *)v49;
            v35 = vextq_s8(v8, v8, 8uLL).u64[0];
            v36 = vextq_s8(v9, v9, 8uLL).u64[0];
          }
          else
          {
            v9 = *(int8x16_t *)v49;
            v8 = *(int8x16_t *)(v49 + 16);
            v11 = *(int8x16_t *)(v49 + 32);
            v10 = *(int8x16_t *)(v49 + 48);
            v12 = *(_OWORD *)(v49 + 72);
            v13 = *(_OWORD *)(v49 + 88);
            v14 = *(_OWORD *)(v49 + 104);
            v15 = *(_OWORD *)(v49 + 120);
            v17 = *(int8x16_t *)(v49 + 144);
            v16 = *(int8x16_t *)(v49 + 160);
            v19 = *(int8x16_t *)(v49 + 176);
            v18 = *(int8x16_t *)(v49 + 192);
            v57.i64[0] = *(_QWORD *)(v49 + 128);
            v20 = *(_OWORD *)(v49 + 232);
            v56.i64[0] = *(_QWORD *)(v49 + 112);
            v21 = *(_OWORD *)(v49 + 248);
            v55.i64[0] = *(_QWORD *)(v49 + 96);
            v54.i64[0] = *(_QWORD *)(v49 + 80);
            v61.i64[0] = *(_QWORD *)(v49 + 256);
            v23 = *(_OWORD *)(v49 + 360);
            v22 = *(_OWORD *)(v49 + 376);
            v59.i64[0] = *(_QWORD *)(v49 + 240);
            v58.i64[0] = *(_QWORD *)(v49 + 224);
            v60.i64[0] = *(_QWORD *)(v49 + 272);
            v68 = *(_OWORD *)(v49 + 392);
            v69 = *(_OWORD *)(v49 + 408);
            v62.i64[0] = *(_QWORD *)(v49 + 400);
            v24 = *(int8x16_t *)(v49 + 320);
            v25 = *(int8x16_t *)(v49 + 336);
            v70.i64[0] = *(_QWORD *)(v49 + 368);
            v71.i64[0] = *(_QWORD *)(v49 + 384);
            v52 = vextq_s8(v24, v24, 8uLL).u64[0];
            v53 = vextq_s8(v25, v25, 8uLL).u64[0];
            v27 = *(int8x16_t *)(v49 + 288);
            v26 = *(int8x16_t *)(v49 + 304);
            v50 = vextq_s8(v27, v27, 8uLL).u64[0];
            v51 = vextq_s8(v26, v26, 8uLL).u64[0];
            v64 = *(_QWORD *)(v49 + 136);
            v28 = vextq_s8(v18, v18, 8uLL).u64[0];
            v63.i64[0] = *(_QWORD *)(v49 + 64);
            v29 = vextq_s8(v19, v19, 8uLL).u64[0];
            v30 = vextq_s8(v16, v16, 8uLL).u64[0];
            v66 = *(_QWORD *)(v49 + 280);
            v31 = vextq_s8(v17, v17, 8uLL).u64[0];
            v65.i64[0] = *(_QWORD *)(v49 + 208);
            v32 = vextq_s8(v10, v10, 8uLL).u64[0];
            v33 = vextq_s8(v11, v11, 8uLL).u64[0];
            v34 = *(_QWORD *)(v49 + 424);
            v35 = vextq_s8(v8, v8, 8uLL).u64[0];
            v36 = vextq_s8(v9, v9, 8uLL).u64[0];
            v67.i64[0] = *(_QWORD *)(v49 + 352);
            v37 = *(_OWORD *)(v49 + 264);
            v38 = *(_OWORD *)(v49 + 216);
            *(_QWORD *)&v39 = *(_QWORD *)(v49 + 416);
          }
          v10.i64[1] = v32;
          v11.i64[1] = v33;
          v8.i64[1] = v35;
          v9.i64[1] = v36;
          *((_QWORD *)&v15 + 1) = v57.i64[0];
          *((_QWORD *)&v14 + 1) = v56.i64[0];
          *((_QWORD *)&v13 + 1) = v55.i64[0];
          *((_QWORD *)&v12 + 1) = v54.i64[0];
          v18.i64[1] = v28;
          v19.i64[1] = v29;
          v16.i64[1] = v30;
          v17.i64[1] = v31;
          *((_QWORD *)&v37 + 1) = v60.i64[0];
          *((_QWORD *)&v21 + 1) = v61.i64[0];
          *((_QWORD *)&v20 + 1) = v59.i64[0];
          *((_QWORD *)&v38 + 1) = v58.i64[0];
          v25.i64[1] = v53;
          v24.i64[1] = v52;
          v26.i64[1] = v51;
          v27.i64[1] = v50;
          *(_QWORD *)&v41 = v68;
          *(_QWORD *)&v40 = v69;
          *((_QWORD *)&v40 + 1) = v39;
          *((_QWORD *)&v41 + 1) = v62.i64[0];
          v42 = *(unsigned int *)(a2 + 16);
          v43 = *(_QWORD *)a2 + 8 * (9 * *((_DWORD *)v7 - 2) + a3 + v42 * (HIDWORD(a3) + 6 * i));
          *((_QWORD *)&v22 + 1) = v71.i64[0];
          *((_QWORD *)&v23 + 1) = v70.i64[0];
          *(int8x16_t *)v43 = v9;
          *(int8x16_t *)(v43 + 16) = v8;
          *(_QWORD *)(v43 + 64) = v63.i64[0];
          *(int8x16_t *)(v43 + 32) = v11;
          *(int8x16_t *)(v43 + 48) = v10;
          v44 = v43 + 8 * v42;
          *(_OWORD *)v44 = v12;
          *(_OWORD *)(v44 + 16) = v13;
          *(_QWORD *)(v44 + 64) = v64;
          *(_OWORD *)(v44 + 32) = v14;
          *(_OWORD *)(v44 + 48) = v15;
          v45 = (int8x16_t *)(v43 + 16 * v42);
          *v45 = v17;
          v45[1] = v16;
          v45[4].i64[0] = v65.i64[0];
          v45[2] = v19;
          v45[3] = v18;
          v46 = v43 + 24 * v42;
          *(_OWORD *)v46 = v38;
          *(_OWORD *)(v46 + 16) = v20;
          *(_QWORD *)(v46 + 64) = v66;
          *(_OWORD *)(v46 + 32) = v21;
          *(_OWORD *)(v46 + 48) = v37;
          v47 = (int8x16_t *)(v43 + 32 * v42);
          *v47 = v27;
          v47[1] = v26;
          v47[4].i64[0] = v67.i64[0];
          v47[2] = v24;
          v47[3] = v25;
          v48 = v43 + 40 * v42;
          *(_OWORD *)v48 = v23;
          *(_OWORD *)(v48 + 16) = v22;
          *(_QWORD *)(v48 + 64) = v34;
          v7 += 2;
          *(_OWORD *)(v48 + 32) = v41;
          *(_OWORD *)(v48 + 48) = v40;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F6B48(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F6BB8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F6C38(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F6D60(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F6D88()
{
  return 1;
}

uint64_t sub_20F4F6D90()
{
  return 6;
}

uint64_t sub_20F4F6D98(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v16 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v16 == *(_QWORD *)a2)
          {
            v10 = *(int8x16_t *)(v16 + 16);
            v12 = *(int8x16_t *)(v16 + 32);
            v8 = *(int8x16_t *)v16;
            v13 = vextq_s8(v12, v12, 8uLL).u64[0];
            v11 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)v16;
            v9 = *(_QWORD *)(v16 + 8);
            v10.i64[0] = *(_QWORD *)(v16 + 16);
            v11 = *(_QWORD *)(v16 + 24);
            v12.i64[0] = *(_QWORD *)(v16 + 32);
            v13 = *(_QWORD *)(v16 + 40);
          }
          v14 = *(unsigned int *)(a2 + 16);
          v15 = (_QWORD *)(*(_QWORD *)a2 + 8 * (*((_DWORD *)v7 - 2) + a3 + v14 * (HIDWORD(a3) + 6 * i)));
          *v15 = v8.i64[0];
          v15[v14] = v9;
          v15[2 * v14] = v10.i64[0];
          v15[3 * v14] = v11;
          v15[4 * v14] = v12.i64[0];
          v15[5 * v14] = v13;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F6E80(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F6EF0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F6F70(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (24 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F7098(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x18uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F70C0()
{
  return 4;
}

uint64_t sub_20F4F70C8()
{
  return 6;
}

uint64_t sub_20F4F70D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v27 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v27 == *(int8x16_t **)a2)
          {
            v17 = v27[10];
            v16 = v27[11];
            v15 = v27[8];
            v14 = v27[9];
            v13 = v27[6];
            v12 = v27[7];
            v11 = v27[4];
            v10 = v27[5];
            v9 = v27[2];
            v8 = v27[3];
          }
          else
          {
            v9 = v27[2];
            v8 = v27[3];
            v11 = v27[4];
            v10 = v27[5];
            v13 = v27[6];
            v12 = v27[7];
            v15 = v27[8];
            v14 = v27[9];
            v17 = v27[10];
            v16 = v27[11];
          }
          v19 = *v27;
          v18 = v27[1];
          v20 = *(unsigned int *)(a2 + 16);
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v21 = (int8x16_t *)(*(_QWORD *)a2
                            + 8 * (a3 + 4 * *((_DWORD *)v7 - 2) + v20 * (HIDWORD(a3) + 6 * i)));
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          *v21 = v19;
          v21[1] = v18;
          v22 = (int8x16_t *)((char *)v21 + 8 * v20);
          *v22 = v9;
          v22[1] = v8;
          v23 = &v21[v20];
          *v23 = v11;
          v23[1] = v10;
          v24 = (int8x16_t *)((char *)v21 + 24 * v20);
          *v24 = v13;
          v24[1] = v12;
          v25 = &v21[2 * v20];
          *v25 = v15;
          v25[1] = v14;
          v26 = (int8x16_t *)((char *)v21 + 40 * v20);
          *v26 = v17;
          v26[1] = v16;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F7228(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F7298(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F7318(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (18 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F7440(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x12uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F7470()
{
  return 3;
}

uint64_t sub_20F4F7478()
{
  return 6;
}

uint64_t sub_20F4F7480(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  __int128 v11;
  int8x16_t v12;
  __int128 v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  uint64_t v30;
  int8x16_t *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v33 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v33 == *(_QWORD *)a2)
          {
            v25 = *(int8x16_t *)(v33 + 112);
            v20 = *(int8x16_t *)(v33 + 128);
            v19 = *(int8x16_t *)(v33 + 80);
            v12 = *(int8x16_t *)(v33 + 96);
            v10 = *(int8x16_t *)(v33 + 48);
            v18 = *(int8x16_t *)(v33 + 64);
            v15 = *(int8x16_t *)(v33 + 16);
            v16 = *(int8x16_t *)(v33 + 32);
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v25, v25, 8uLL).u64[0];
            v21 = vextq_s8(v12, v12, 8uLL).u64[0];
            v8 = *(int8x16_t *)v33;
            v17 = vextq_s8(v19, v19, 8uLL).u64[0];
            *(_QWORD *)&v11 = vextq_s8(v18, v18, 8uLL).u64[0];
            v23 = vextq_s8(v10, v10, 8uLL).u64[0];
            v14 = vextq_s8(v16, v16, 8uLL).u64[0];
            *(_QWORD *)&v9 = vextq_s8(v15, v15, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8 = *(int8x16_t *)v33;
            v9 = *(_OWORD *)(v33 + 24);
            v10 = *(int8x16_t *)(v33 + 48);
            v11 = *(_OWORD *)(v33 + 72);
            v12 = *(int8x16_t *)(v33 + 96);
            v13 = *(_OWORD *)(v33 + 120);
            v14 = *(_QWORD *)(v33 + 40);
            v15.i64[0] = *(_QWORD *)(v33 + 16);
            v16.i64[0] = *(_QWORD *)(v33 + 32);
            v17 = *(_QWORD *)(v33 + 88);
            v18.i64[0] = *(_QWORD *)(v33 + 64);
            v19.i64[0] = *(_QWORD *)(v33 + 80);
            v20.i64[0] = *(_QWORD *)(v33 + 128);
            v21 = vextq_s8(v12, v12, 8uLL).u64[0];
            v22 = *(_QWORD *)(v33 + 136);
            v23 = vextq_s8(v10, v10, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
            v25.i64[0] = *(_QWORD *)(v33 + 112);
          }
          v26 = *(unsigned int *)(a2 + 16);
          v12.i64[1] = v21;
          v8.i64[1] = v24;
          *((_QWORD *)&v9 + 1) = v16.i64[0];
          v10.i64[1] = v23;
          v27 = *(_QWORD *)a2 + 8 * (3 * *((_DWORD *)v7 - 2) + a3 + v26 * (HIDWORD(a3) + 6 * i));
          *((_QWORD *)&v11 + 1) = v19.i64[0];
          *((_QWORD *)&v13 + 1) = v20.i64[0];
          *(_QWORD *)(v27 + 16) = v15.i64[0];
          *(int8x16_t *)v27 = v8;
          v28 = v27 + 8 * v26;
          *(_QWORD *)(v28 + 16) = v14;
          *(_OWORD *)v28 = v9;
          v29 = (int8x16_t *)(v27 + 16 * v26);
          v29[1].i64[0] = v18.i64[0];
          *v29 = v10;
          v30 = v27 + 24 * v26;
          *(_QWORD *)(v30 + 16) = v17;
          *(_OWORD *)v30 = v11;
          v31 = (int8x16_t *)(v27 + 32 * v26);
          v31[1].i64[0] = v25.i64[0];
          *v31 = v12;
          v32 = v27 + 40 * v26;
          *(_QWORD *)(v32 + 16) = v22;
          *(_OWORD *)v32 = v13;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F7600(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F7670(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F76F0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (54 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F7818(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x36uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F7848()
{
  return 6;
}

uint64_t sub_20F4F7850()
{
  return 9;
}

uint64_t sub_20F4F7858(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __int128 v43;
  int8x16_t *v44;
  __int128 v45;
  __int128 v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  __int8 *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v55 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v55 == *(int8x16_t **)a2)
          {
            v13 = v55[17];
            v78 = v55[25];
            v79 = v55[26];
            v12 = vextq_s8(v79, v79, 8uLL).u64[0];
            v16 = v55[15];
            v14 = v55[16];
            v76 = v55[19];
            v77 = v55[24];
            v65 = vextq_s8(v77, v77, 8uLL).u64[0];
            v73 = v55[22];
            v74 = v55[23];
            v70 = vextq_s8(v74, v74, 8uLL).u64[0];
            v71 = v55[20];
            v69 = vextq_s8(v73, v73, 8uLL).u64[0];
            v10 = v55[13];
            v17 = v55[14];
            v72 = v55[21];
            v68 = vextq_s8(v72, v72, 8uLL).u64[0];
            v64 = vextq_s8(v71, v71, 8uLL).u64[0];
            v67 = vextq_s8(v76, v76, 8uLL).u64[0];
            v18 = v55[11];
            v11 = v55[12];
            v75 = v55[18];
            v66 = vextq_s8(v75, v75, 8uLL).u64[0];
            v15 = vextq_s8(v78, v78, 8uLL).u64[0];
            v63 = vextq_s8(v13, v13, 8uLL).u64[0];
            v62 = vextq_s8(v14, v14, 8uLL).u64[0];
            v20 = v55[9];
            v19 = v55[10];
            v61 = vextq_s8(v16, v16, 8uLL).u64[0];
            v60 = vextq_s8(v17, v17, 8uLL).u64[0];
            v59 = vextq_s8(v10, v10, 8uLL).u64[0];
            v8 = v55[7];
            v21 = v55[8];
            v57 = vextq_s8(v11, v11, 8uLL).u64[0];
            v58 = vextq_s8(v18, v18, 8uLL).u64[0];
            v56 = vextq_s8(v19, v19, 8uLL).u64[0];
            v25 = v55[5];
            v9 = v55[6];
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            v23 = vextq_s8(v21, v21, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
            v30 = v55[3];
            v26 = v55[4];
            v27 = vextq_s8(v9, v9, 8uLL).u64[0];
            v28 = vextq_s8(v25, v25, 8uLL).u64[0];
            v29 = vextq_s8(v26, v26, 8uLL).u64[0];
            v34 = v55[1];
            v31 = v55[2];
            v32 = vextq_s8(v30, v30, 8uLL).u64[0];
            v33 = vextq_s8(v31, v31, 8uLL).u64[0];
            v35 = *v55;
          }
          else
          {
            v9 = v55[6];
            v8 = v55[7];
            v11 = v55[12];
            v10 = v55[13];
            v78 = v55[25];
            v79 = v55[26];
            v12 = vextq_s8(v79, v79, 8uLL).u64[0];
            v76 = v55[19];
            v77 = v55[24];
            v73 = v55[22];
            v74 = v55[23];
            v69 = vextq_s8(v73, v73, 8uLL).u64[0];
            v70 = vextq_s8(v74, v74, 8uLL).u64[0];
            v71 = v55[20];
            v72 = v55[21];
            v64 = vextq_s8(v71, v71, 8uLL).u64[0];
            v65 = vextq_s8(v77, v77, 8uLL).u64[0];
            v67 = vextq_s8(v76, v76, 8uLL).u64[0];
            v68 = vextq_s8(v72, v72, 8uLL).u64[0];
            v14 = v55[16];
            v13 = v55[17];
            v75 = v55[18];
            v66 = vextq_s8(v75, v75, 8uLL).u64[0];
            v15 = vextq_s8(v78, v78, 8uLL).u64[0];
            v62 = vextq_s8(v14, v14, 8uLL).u64[0];
            v63 = vextq_s8(v13, v13, 8uLL).u64[0];
            v17 = v55[14];
            v16 = v55[15];
            v60 = vextq_s8(v17, v17, 8uLL).u64[0];
            v61 = vextq_s8(v16, v16, 8uLL).u64[0];
            v19 = v55[10];
            v18 = v55[11];
            v58 = vextq_s8(v18, v18, 8uLL).u64[0];
            v59 = vextq_s8(v10, v10, 8uLL).u64[0];
            v56 = vextq_s8(v19, v19, 8uLL).u64[0];
            v57 = vextq_s8(v11, v11, 8uLL).u64[0];
            v21 = v55[8];
            v20 = v55[9];
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            v23 = vextq_s8(v21, v21, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
            v26 = v55[4];
            v25 = v55[5];
            v27 = vextq_s8(v9, v9, 8uLL).u64[0];
            v28 = vextq_s8(v25, v25, 8uLL).u64[0];
            v29 = vextq_s8(v26, v26, 8uLL).u64[0];
            v31 = v55[2];
            v30 = v55[3];
            v32 = vextq_s8(v30, v30, 8uLL).u64[0];
            v33 = vextq_s8(v31, v31, 8uLL).u64[0];
            v35 = *v55;
            v34 = v55[1];
          }
          v36.i64[0] = v79.i64[0];
          v36.i64[1] = v12;
          v37.i64[0] = v78.i64[0];
          v37.i64[1] = v15;
          v38.i64[0] = v77.i64[0];
          v38.i64[1] = v65;
          v17.i64[1] = v60;
          v10.i64[1] = v59;
          v11.i64[1] = v57;
          v31.i64[1] = v33;
          v34.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
          v35.i64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
          v25.i64[1] = v28;
          v26.i64[1] = v29;
          v30.i64[1] = v32;
          v21.i64[1] = v23;
          v8.i64[1] = v24;
          v9.i64[1] = v27;
          v18.i64[1] = v58;
          v19.i64[1] = v56;
          v20.i64[1] = v22;
          v13.i64[1] = v63;
          v14.i64[1] = v62;
          v16.i64[1] = v61;
          v39.i64[0] = v71.i64[0];
          v39.i64[1] = v64;
          v40 = *(unsigned int *)(a2 + 16);
          v41.i64[0] = v76.i64[0];
          v41.i64[1] = v67;
          v42.i64[0] = v75.i64[0];
          v42.i64[1] = v66;
          *(_QWORD *)&v43 = v74.i64[0];
          *((_QWORD *)&v43 + 1) = v70;
          v44 = (int8x16_t *)(*(_QWORD *)a2
                            + 8 * (a3 + 6 * *((_DWORD *)v7 - 2) + v40 * (9 * i + HIDWORD(a3))));
          *(_QWORD *)&v45 = v73.i64[0];
          *((_QWORD *)&v45 + 1) = v69;
          *(_QWORD *)&v46 = v72.i64[0];
          *((_QWORD *)&v46 + 1) = v68;
          *v44 = v35;
          v44[1] = v34;
          v44[2] = v31;
          v47 = (int8x16_t *)((char *)v44 + 8 * v40);
          *v47 = v30;
          v47[1] = v26;
          v47[2] = v25;
          v48 = &v44[v40];
          *v48 = v9;
          v48[1] = v8;
          v48[2] = v21;
          v49 = (int8x16_t *)((char *)v44 + 24 * v40);
          *v49 = v20;
          v49[1] = v19;
          v49[2] = v18;
          v50 = &v44[2 * v40];
          *v50 = v11;
          v50[1] = v10;
          v50[2] = v17;
          v51 = (int8x16_t *)((char *)v44 + 40 * v40);
          *v51 = v16;
          v51[1] = v14;
          v51[2] = v13;
          v52 = &v44[3 * v40];
          *v52 = v42;
          v52[1] = v41;
          v52[2] = v39;
          v53 = &v44->i8[56 * v40];
          *(_OWORD *)v53 = v46;
          *((_OWORD *)v53 + 1) = v45;
          *((_OWORD *)v53 + 2) = v43;
          v54 = &v44[4 * v40];
          *v54 = v38;
          v54[1] = v37;
          v7 += 2;
          v54[2] = v36;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F7C28(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F7C98(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F7D18(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (81 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F7E40(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x51uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F7E78()
{
  return 9;
}

uint64_t sub_20F4F7E80()
{
  return 9;
}

uint64_t sub_20F4F7E88(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t *v60;
  uint64_t v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  uint64_t v88;
  unint64_t v89;
  int8x16_t v90;
  unint64_t v91;
  unint64_t v92;
  int8x16_t v93;
  unint64_t v94;
  int8x16_t v95;
  int8x16_t v96;
  __int128 v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  __int128 v115;
  int8x16_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v67 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v67 == *(_QWORD *)a2)
          {
            v111 = *(int8x16_t *)(v67 + 608);
            v112 = *(int8x16_t *)(v67 + 624);
            v77 = vextq_s8(v112, v112, 8uLL).u64[0];
            v76 = vextq_s8(v111, v111, 8uLL).u64[0];
            v109 = *(int8x16_t *)(v67 + 576);
            v110 = *(int8x16_t *)(v67 + 592);
            v75 = vextq_s8(v110, v110, 8uLL).u64[0];
            v74 = vextq_s8(v109, v109, 8uLL).u64[0];
            v85 = *(int8x16_t *)(v67 + 544);
            v86 = *(int8x16_t *)(v67 + 560);
            v94 = vextq_s8(v86, v86, 8uLL).u64[0];
            *(_QWORD *)&v103 = vextq_s8(v85, v85, 8uLL).u64[0];
            v83 = *(int8x16_t *)(v67 + 512);
            v84 = *(int8x16_t *)(v67 + 528);
            v100 = *(int8x16_t *)(v67 + 496);
            *(_QWORD *)&v101 = vextq_s8(v84, v84, 8uLL).u64[0];
            *(_QWORD *)&v104 = vextq_s8(v83, v83, 8uLL).u64[0];
            v25 = *(int8x16_t *)(v67 + 320);
            v24 = *(int8x16_t *)(v67 + 336);
            *(_QWORD *)&v102 = vextq_s8(v100, v100, 8uLL).u64[0];
            v98 = *(int8x16_t *)(v67 + 464);
            v99 = *(int8x16_t *)(v67 + 480);
            v73 = vextq_s8(v99, v99, 8uLL).u64[0];
            v72 = vextq_s8(v98, v98, 8uLL).u64[0];
            v28 = *(int8x16_t *)(v67 + 416);
            v22 = *(int8x16_t *)(v67 + 288);
            v21 = *(int8x16_t *)(v67 + 304);
            v95 = *(int8x16_t *)(v67 + 432);
            v96 = *(int8x16_t *)(v67 + 448);
            v71 = vextq_s8(v96, v96, 8uLL).u64[0];
            v70 = vextq_s8(v95, v95, 8uLL).u64[0];
            v27 = *(int8x16_t *)(v67 + 400);
            v92 = vextq_s8(v28, v28, 8uLL).u64[0];
            v93 = *(int8x16_t *)(v67 + 352);
            v116 = *(int8x16_t *)(v67 + 272);
            *(_QWORD *)&v108 = vextq_s8(v27, v27, 8uLL).u64[0];
            v81 = *(int8x16_t *)(v67 + 368);
            v82 = *(int8x16_t *)(v67 + 384);
            *(_QWORD *)&v107 = vextq_s8(v82, v82, 8uLL).u64[0];
            *(_QWORD *)&v106 = vextq_s8(v81, v81, 8uLL).u64[0];
            *(_QWORD *)&v105 = vextq_s8(v93, v93, 8uLL).u64[0];
            v69 = vextq_s8(v24, v24, 8uLL).u64[0];
            v68 = vextq_s8(v25, v25, 8uLL).u64[0];
            v17 = *(int8x16_t *)(v67 + 192);
            v29 = vextq_s8(v21, v21, 8uLL).u64[0];
            v30 = vextq_s8(v22, v22, 8uLL).u64[0];
            v90 = *(int8x16_t *)(v67 + 208);
            v91 = vextq_s8(v116, v116, 8uLL).u64[0];
            v15 = *(int8x16_t *)(v67 + 160);
            v18 = *(int8x16_t *)(v67 + 176);
            v79 = *(int8x16_t *)(v67 + 240);
            v80 = *(int8x16_t *)(v67 + 256);
            *(_QWORD *)&v19 = vextq_s8(v80, v80, 8uLL).u64[0];
            *(_QWORD *)&v118 = vextq_s8(v79, v79, 8uLL).u64[0];
            v78 = *(_QWORD *)(v67 + 224);
            *(_QWORD *)&v20 = vextq_s8(*(int8x16_t *)(v67 + 224), *(int8x16_t *)(v67 + 224), 8uLL).u64[0];
            v26 = *(int8x16_t *)(v67 + 128);
            v16 = *(int8x16_t *)(v67 + 144);
            *(_QWORD *)&v97 = vextq_s8(v90, v90, 8uLL).u64[0];
            v31 = vextq_s8(v17, v17, 8uLL).u64[0];
            v32 = vextq_s8(v18, v18, 8uLL).u64[0];
            v33 = vextq_s8(v15, v15, 8uLL).u64[0];
            v34 = vextq_s8(v16, v16, 8uLL).u64[0];
            v89 = vextq_s8(v26, v26, 8uLL).u64[0];
            v23 = *(int8x16_t *)(v67 + 80);
            v113 = *(int8x16_t *)(v67 + 96);
            v114 = *(int8x16_t *)(v67 + 112);
            *(_QWORD *)&v14 = vextq_s8(v114, v114, 8uLL).u64[0];
            *(_QWORD *)&v120 = vextq_s8(v113, v113, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v23, v23, 8uLL).u64[0];
            v11 = *(int8x16_t *)(v67 + 32);
            v10 = *(int8x16_t *)(v67 + 48);
            v87 = *(int8x16_t *)(v67 + 64);
            *(_QWORD *)&v12 = vextq_s8(v87, v87, 8uLL).u64[0];
            v35 = vextq_s8(v10, v10, 8uLL).u64[0];
            v36 = vextq_s8(v11, v11, 8uLL).u64[0];
            v9 = *(int8x16_t *)v67;
            v8 = *(int8x16_t *)(v67 + 16);
          }
          else
          {
            v9 = *(int8x16_t *)v67;
            v8 = *(int8x16_t *)(v67 + 16);
            v11 = *(int8x16_t *)(v67 + 32);
            v10 = *(int8x16_t *)(v67 + 48);
            v12 = *(_OWORD *)(v67 + 72);
            v13 = *(_OWORD *)(v67 + 88);
            v14 = *(_OWORD *)(v67 + 120);
            v16 = *(int8x16_t *)(v67 + 144);
            v15 = *(int8x16_t *)(v67 + 160);
            v18 = *(int8x16_t *)(v67 + 176);
            v17 = *(int8x16_t *)(v67 + 192);
            v19 = *(_OWORD *)(v67 + 264);
            v20 = *(_OWORD *)(v67 + 232);
            v22 = *(int8x16_t *)(v67 + 288);
            v21 = *(int8x16_t *)(v67 + 304);
            v118 = *(_OWORD *)(v67 + 248);
            v120 = *(_OWORD *)(v67 + 104);
            v114.i64[0] = *(_QWORD *)(v67 + 112);
            v113.i64[0] = *(_QWORD *)(v67 + 96);
            v23.i64[0] = *(_QWORD *)(v67 + 80);
            v25 = *(int8x16_t *)(v67 + 320);
            v24 = *(int8x16_t *)(v67 + 336);
            v80.i64[0] = *(_QWORD *)(v67 + 256);
            v79.i64[0] = *(_QWORD *)(v67 + 240);
            v97 = *(_OWORD *)(v67 + 216);
            v78 = *(_QWORD *)(v67 + 224);
            v116.i64[0] = *(_QWORD *)(v67 + 272);
            v107 = *(_OWORD *)(v67 + 392);
            v108 = *(_OWORD *)(v67 + 408);
            v105 = *(_OWORD *)(v67 + 360);
            v106 = *(_OWORD *)(v67 + 376);
            v82.i64[0] = *(_QWORD *)(v67 + 384);
            v81.i64[0] = *(_QWORD *)(v67 + 368);
            v103 = *(_OWORD *)(v67 + 552);
            v104 = *(_OWORD *)(v67 + 520);
            v86.i64[0] = *(_QWORD *)(v67 + 560);
            v101 = *(_OWORD *)(v67 + 536);
            v102 = *(_OWORD *)(v67 + 504);
            v85.i64[0] = *(_QWORD *)(v67 + 544);
            v84.i64[0] = *(_QWORD *)(v67 + 528);
            v83.i64[0] = *(_QWORD *)(v67 + 512);
            v111 = *(int8x16_t *)(v67 + 608);
            v112 = *(int8x16_t *)(v67 + 624);
            v77 = vextq_s8(v112, v112, 8uLL).u64[0];
            v76 = vextq_s8(v111, v111, 8uLL).u64[0];
            v109 = *(int8x16_t *)(v67 + 576);
            v110 = *(int8x16_t *)(v67 + 592);
            v75 = vextq_s8(v110, v110, 8uLL).u64[0];
            v26.i64[0] = *(_QWORD *)(v67 + 128);
            v74 = vextq_s8(v109, v109, 8uLL).u64[0];
            v27.i64[0] = *(_QWORD *)(v67 + 400);
            v98 = *(int8x16_t *)(v67 + 464);
            v99 = *(int8x16_t *)(v67 + 480);
            v73 = vextq_s8(v99, v99, 8uLL).u64[0];
            v72 = vextq_s8(v98, v98, 8uLL).u64[0];
            v95 = *(int8x16_t *)(v67 + 432);
            v96 = *(int8x16_t *)(v67 + 448);
            v71 = vextq_s8(v96, v96, 8uLL).u64[0];
            v89 = *(_QWORD *)(v67 + 136);
            v70 = vextq_s8(v95, v95, 8uLL).u64[0];
            v28.i64[0] = *(_QWORD *)(v67 + 416);
            v69 = vextq_s8(v24, v24, 8uLL).u64[0];
            v87.i64[0] = *(_QWORD *)(v67 + 64);
            v68 = vextq_s8(v25, v25, 8uLL).u64[0];
            v91 = *(_QWORD *)(v67 + 280);
            v29 = vextq_s8(v21, v21, 8uLL).u64[0];
            v30 = vextq_s8(v22, v22, 8uLL).u64[0];
            v90.i64[0] = *(_QWORD *)(v67 + 208);
            v31 = vextq_s8(v17, v17, 8uLL).u64[0];
            v92 = *(_QWORD *)(v67 + 424);
            v32 = vextq_s8(v18, v18, 8uLL).u64[0];
            v33 = vextq_s8(v15, v15, 8uLL).u64[0];
            v93.i64[0] = *(_QWORD *)(v67 + 352);
            v34 = vextq_s8(v16, v16, 8uLL).u64[0];
            v94 = *(_QWORD *)(v67 + 568);
            v35 = vextq_s8(v10, v10, 8uLL).u64[0];
            v36 = vextq_s8(v11, v11, 8uLL).u64[0];
            v100.i64[0] = *(_QWORD *)(v67 + 496);
          }
          v88 = *(_QWORD *)(v67 + 640);
          v10.i64[1] = v35;
          v11.i64[1] = v36;
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          *((_QWORD *)&v14 + 1) = v26.i64[0];
          *(_QWORD *)&v37 = v120;
          v38 = v116.i64[0];
          *((_QWORD *)&v37 + 1) = v114.i64[0];
          *((_QWORD *)&v13 + 1) = v113.i64[0];
          v115 = v13;
          v117 = v14;
          *((_QWORD *)&v12 + 1) = v23.i64[0];
          v17.i64[1] = v31;
          v18.i64[1] = v32;
          v15.i64[1] = v33;
          v16.i64[1] = v34;
          *((_QWORD *)&v19 + 1) = v38;
          *(_QWORD *)&v39 = v118;
          *((_QWORD *)&v39 + 1) = v80.i64[0];
          *((_QWORD *)&v20 + 1) = v79.i64[0];
          v119 = v20;
          v121 = v19;
          *(_QWORD *)&v40 = v97;
          *((_QWORD *)&v40 + 1) = v78;
          v24.i64[1] = v69;
          v25.i64[1] = v68;
          v21.i64[1] = v29;
          v22.i64[1] = v30;
          *(_QWORD *)&v42 = v107;
          *(_QWORD *)&v41 = v108;
          *((_QWORD *)&v41 + 1) = v28.i64[0];
          *((_QWORD *)&v42 + 1) = v27.i64[0];
          *(_QWORD *)&v44 = v105;
          *(_QWORD *)&v43 = v106;
          *((_QWORD *)&v43 + 1) = v82.i64[0];
          *((_QWORD *)&v44 + 1) = v81.i64[0];
          *(_QWORD *)&v46 = v98.i64[0];
          *(_QWORD *)&v45 = v99.i64[0];
          *((_QWORD *)&v45 + 1) = v73;
          *((_QWORD *)&v46 + 1) = v72;
          *(_QWORD *)&v48 = v95.i64[0];
          *(_QWORD *)&v47 = v96.i64[0];
          *((_QWORD *)&v47 + 1) = v71;
          *((_QWORD *)&v48 + 1) = v70;
          *(_QWORD *)&v49 = v103;
          *(_QWORD *)&v50 = v104;
          *((_QWORD *)&v49 + 1) = v86.i64[0];
          *(_QWORD *)&v52 = v101;
          *(_QWORD *)&v51 = v102;
          *((_QWORD *)&v52 + 1) = v85.i64[0];
          *((_QWORD *)&v50 + 1) = v84.i64[0];
          *((_QWORD *)&v51 + 1) = v83.i64[0];
          *(_QWORD *)&v53 = v112.i64[0];
          *((_QWORD *)&v53 + 1) = v77;
          *(_QWORD *)&v54 = v111.i64[0];
          *((_QWORD *)&v54 + 1) = v76;
          *(_QWORD *)&v55 = v110.i64[0];
          *((_QWORD *)&v55 + 1) = v75;
          *(_QWORD *)&v56 = v109.i64[0];
          *((_QWORD *)&v56 + 1) = v74;
          v57 = *(unsigned int *)(a2 + 16);
          v58 = *(_QWORD *)a2 + 8 * (9 * *((_DWORD *)v7 - 2) + a3 + v57 * (9 * i + HIDWORD(a3)));
          *(int8x16_t *)v58 = v9;
          *(int8x16_t *)(v58 + 16) = v8;
          *(_QWORD *)(v58 + 64) = v87.i64[0];
          *(int8x16_t *)(v58 + 32) = v11;
          *(int8x16_t *)(v58 + 48) = v10;
          v59 = v58 + 8 * v57;
          *(_OWORD *)v59 = v12;
          *(_OWORD *)(v59 + 16) = v115;
          *(_QWORD *)(v59 + 64) = v89;
          *(_OWORD *)(v59 + 32) = v37;
          *(_OWORD *)(v59 + 48) = v117;
          v60 = (int8x16_t *)(v58 + 16 * v57);
          *v60 = v16;
          v60[1] = v15;
          v60[4].i64[0] = v90.i64[0];
          v60[2] = v18;
          v60[3] = v17;
          v61 = v58 + 24 * v57;
          *(_OWORD *)v61 = v40;
          *(_OWORD *)(v61 + 16) = v119;
          *(_QWORD *)(v61 + 64) = v91;
          *(_OWORD *)(v61 + 32) = v39;
          *(_OWORD *)(v61 + 48) = v121;
          v62 = (int8x16_t *)(v58 + 32 * v57);
          *v62 = v22;
          v62[1] = v21;
          v62[4].i64[0] = v93.i64[0];
          v62[2] = v25;
          v62[3] = v24;
          v63 = v58 + 40 * v57;
          *(_OWORD *)v63 = v44;
          *(_OWORD *)(v63 + 16) = v43;
          *(_QWORD *)(v63 + 64) = v92;
          *(_OWORD *)(v63 + 32) = v42;
          *(_OWORD *)(v63 + 48) = v41;
          v64 = v58 + 48 * v57;
          *(_OWORD *)v64 = v48;
          *(_OWORD *)(v64 + 16) = v47;
          *(_QWORD *)(v64 + 64) = v100.i64[0];
          *(_OWORD *)(v64 + 32) = v46;
          *(_OWORD *)(v64 + 48) = v45;
          v65 = v58 + 56 * v57;
          *(_OWORD *)v65 = v51;
          *(_OWORD *)(v65 + 16) = v50;
          *(_QWORD *)(v65 + 64) = v94;
          *(_OWORD *)(v65 + 32) = v52;
          *(_OWORD *)(v65 + 48) = v49;
          v66 = v58 + (v57 << 6);
          *(_OWORD *)v66 = v56;
          *(_OWORD *)(v66 + 16) = v55;
          *(_QWORD *)(v66 + 64) = v88;
          v7 += 2;
          *(_OWORD *)(v66 + 32) = v54;
          *(_OWORD *)(v66 + 48) = v53;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F4F8488(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v8)
      {
        v9 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        v10 = 16 * v8;
        while (i != *((_DWORD *)v9 - 2))
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v9);
        v6 = *a2 + 8 * (9 * i + a3);
        *(_QWORD *)&v7 = *v5;
        if (v5 == (_QWORD *)*a2)
        {
          *(_QWORD *)&v11 = v5[20];
          *(_QWORD *)&v12 = v5[40];
          *(_QWORD *)&v13 = v5[60];
          *((_QWORD *)&v7 + 1) = v5[10];
          *((_QWORD *)&v11 + 1) = v5[30];
          *((_QWORD *)&v12 + 1) = v5[50];
          *((_QWORD *)&v13 + 1) = v5[70];
          *(_QWORD *)(v6 + 64) = v5[80];
          *(_OWORD *)(v6 + 32) = v12;
          *(_OWORD *)(v6 + 48) = v13;
          *(_OWORD *)v6 = v7;
          *(_OWORD *)(v6 + 16) = v11;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          *(_QWORD *)(v6 + 8) = v5[10];
          *(_QWORD *)(v6 + 16) = v5[20];
          *(_QWORD *)(v6 + 24) = v5[30];
          *(_QWORD *)(v6 + 32) = v5[40];
          *(_QWORD *)(v6 + 40) = v5[50];
          *(_QWORD *)(v6 + 48) = v5[60];
          *(_QWORD *)(v6 + 56) = v5[70];
          *(_QWORD *)(v6 + 64) = v5[80];
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

_QWORD *sub_20F4F8598(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F8608(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F8688(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F87AC(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F87DC()
{
  return 1;
}

uint64_t sub_20F4F87E4()
{
  return 9;
}

uint64_t sub_20F4F87EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  int8x16_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v19 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v19 == *(_QWORD *)a2)
          {
            v16 = *(_QWORD *)(v19 + 64);
            v12 = *(int8x16_t *)(v19 + 32);
            v14 = *(int8x16_t *)(v19 + 48);
            v8 = *(int8x16_t *)v19;
            v10 = *(int8x16_t *)(v19 + 16);
            v15 = vextq_s8(v14, v14, 8uLL).u64[0];
            v13 = vextq_s8(v12, v12, 8uLL).u64[0];
            v11 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)v19;
            v9 = *(_QWORD *)(v19 + 8);
            v10.i64[0] = *(_QWORD *)(v19 + 16);
            v11 = *(_QWORD *)(v19 + 24);
            v12.i64[0] = *(_QWORD *)(v19 + 32);
            v13 = *(_QWORD *)(v19 + 40);
            v14.i64[0] = *(_QWORD *)(v19 + 48);
            v15 = *(_QWORD *)(v19 + 56);
            v16 = *(_QWORD *)(v19 + 64);
          }
          v17 = *(unsigned int *)(a2 + 16);
          v18 = (_QWORD *)(*(_QWORD *)a2 + 8 * (*((_DWORD *)v7 - 2) + a3 + v17 * (9 * i + HIDWORD(a3))));
          *v18 = v8.i64[0];
          v18[v17] = v9;
          v18[2 * v17] = v10.i64[0];
          v18[3 * v17] = v11;
          v18[4 * v17] = v12.i64[0];
          v18[5 * v17] = v13;
          v18[6 * v17] = v14.i64[0];
          v18[7 * v17] = v15;
          v18[8 * v17] = v16;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F8904(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F8974(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F89F4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F8B1C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F8B4C()
{
  return 4;
}

uint64_t sub_20F4F8B54()
{
  return 9;
}

uint64_t sub_20F4F8B5C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v40 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v40 == *(int8x16_t **)a2)
          {
            v17 = v40[16];
            v16 = v40[17];
            v15 = v40[14];
            v14 = v40[15];
            v13 = v40[12];
            v12 = v40[13];
            v11 = v40[10];
            v10 = v40[11];
            v23 = v40[8];
            v22 = v40[9];
            v18 = vextq_s8(v16, v16, 8uLL).u64[0];
            v19 = vextq_s8(v17, v17, 8uLL).u64[0];
            v20 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v15, v15, 8uLL).u64[0];
            v43 = vextq_s8(v13, v13, 8uLL).u64[0];
            v44 = vextq_s8(v12, v12, 8uLL).u64[0];
            v41 = vextq_s8(v11, v11, 8uLL).u64[0];
            v42 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = v40[6];
            v8 = v40[7];
          }
          else
          {
            v9 = v40[6];
            v8 = v40[7];
            v11 = v40[10];
            v10 = v40[11];
            v13 = v40[12];
            v12 = v40[13];
            v15 = v40[14];
            v14 = v40[15];
            v17 = v40[16];
            v16 = v40[17];
            v18 = vextq_s8(v16, v16, 8uLL).u64[0];
            v19 = vextq_s8(v17, v17, 8uLL).u64[0];
            v20 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v15, v15, 8uLL).u64[0];
            v43 = vextq_s8(v13, v13, 8uLL).u64[0];
            v44 = vextq_s8(v12, v12, 8uLL).u64[0];
            v41 = vextq_s8(v11, v11, 8uLL).u64[0];
            v42 = vextq_s8(v10, v10, 8uLL).u64[0];
            v23 = v40[8];
            v22 = v40[9];
          }
          v25 = v40[4];
          v24 = v40[5];
          v27 = v40[2];
          v26 = v40[3];
          v29 = *v40;
          v28 = v40[1];
          v16.i64[1] = v18;
          v17.i64[1] = v19;
          v14.i64[1] = v20;
          v15.i64[1] = v21;
          v30 = *(unsigned int *)(a2 + 16);
          v31 = (int8x16_t *)(*(_QWORD *)a2
                            + 8 * (a3 + 4 * *((_DWORD *)v7 - 2) + v30 * (9 * i + HIDWORD(a3))));
          v12.i64[1] = v44;
          v13.i64[1] = v43;
          v10.i64[1] = v42;
          v11.i64[1] = v41;
          v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          v25.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
          *v31 = v29;
          v31[1] = v28;
          v32 = (int8x16_t *)((char *)v31 + 8 * v30);
          *v32 = v27;
          v32[1] = v26;
          v33 = &v31[v30];
          *v33 = v25;
          v33[1] = v24;
          v34 = (int8x16_t *)((char *)v31 + 24 * v30);
          *v34 = v9;
          v34[1] = v8;
          v35 = &v31[2 * v30];
          *v35 = v23;
          v35[1] = v22;
          v36 = (int8x16_t *)((char *)v31 + 40 * v30);
          *v36 = v11;
          v36[1] = v10;
          v37 = &v31[3 * v30];
          *v37 = v13;
          v37[1] = v12;
          v38 = (int8x16_t *)((char *)v31 + 56 * v30);
          *v38 = v15;
          v38[1] = v14;
          v39 = &v31[4 * v30];
          v7 += 2;
          *v39 = v17;
          v39[1] = v16;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F8D7C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F8DEC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F8E6C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (27 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F8F94(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x1BuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F8FC4()
{
  return 3;
}

uint64_t sub_20F4F8FCC()
{
  return 9;
}

uint64_t sub_20F4F8FD4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  __int128 v11;
  int8x16_t v12;
  __int128 v13;
  int8x16_t v14;
  __int128 v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  unint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  uint64_t v38;
  int8x16_t *v39;
  uint64_t v40;
  int8x16_t *v41;
  uint64_t v42;
  int8x16_t *v43;
  uint64_t v44;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v44 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v44 == *(_QWORD *)a2)
          {
            v25 = *(int8x16_t *)(v44 + 176);
            v16 = *(int8x16_t *)(v44 + 192);
            v14 = *(int8x16_t *)(v44 + 144);
            v31 = *(int8x16_t *)(v44 + 160);
            v26 = *(int8x16_t *)(v44 + 112);
            v24 = *(int8x16_t *)(v44 + 128);
            v22 = *(int8x16_t *)(v44 + 80);
            v12 = *(int8x16_t *)(v44 + 96);
            v10 = *(int8x16_t *)(v44 + 48);
            v21 = *(int8x16_t *)(v44 + 64);
            v27 = vextq_s8(v16, v16, 8uLL).u64[0];
            v28 = vextq_s8(v25, v25, 8uLL).u64[0];
            *(_QWORD *)&v15 = vextq_s8(v31, v31, 8uLL).u64[0];
            v29 = vextq_s8(v14, v14, 8uLL).u64[0];
            v23 = vextq_s8(v24, v24, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v26, v26, 8uLL).u64[0];
            v30 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v22, v22, 8uLL).u64[0];
            v18 = *(int8x16_t *)(v44 + 16);
            v19 = *(int8x16_t *)(v44 + 32);
            *(_QWORD *)&v11 = vextq_s8(v21, v21, 8uLL).u64[0];
            v32 = vextq_s8(v10, v10, 8uLL).u64[0];
            v17 = vextq_s8(v19, v19, 8uLL).u64[0];
            v8 = *(int8x16_t *)v44;
            *(_QWORD *)&v9 = vextq_s8(v18, v18, 8uLL).u64[0];
          }
          else
          {
            v8 = *(int8x16_t *)v44;
            v9 = *(_OWORD *)(v44 + 24);
            v10 = *(int8x16_t *)(v44 + 48);
            v11 = *(_OWORD *)(v44 + 72);
            v12 = *(int8x16_t *)(v44 + 96);
            v13 = *(_OWORD *)(v44 + 120);
            v14 = *(int8x16_t *)(v44 + 144);
            v15 = *(_OWORD *)(v44 + 168);
            v16 = *(int8x16_t *)(v44 + 192);
            v17 = *(_QWORD *)(v44 + 40);
            v18.i64[0] = *(_QWORD *)(v44 + 16);
            v19.i64[0] = *(_QWORD *)(v44 + 32);
            v20 = *(_QWORD *)(v44 + 88);
            v21.i64[0] = *(_QWORD *)(v44 + 64);
            v22.i64[0] = *(_QWORD *)(v44 + 80);
            v23 = *(_QWORD *)(v44 + 136);
            v24.i64[0] = *(_QWORD *)(v44 + 128);
            v25.i64[0] = *(_QWORD *)(v44 + 176);
            v26.i64[0] = *(_QWORD *)(v44 + 112);
            v27 = vextq_s8(v16, v16, 8uLL).u64[0];
            v28 = *(_QWORD *)(v44 + 184);
            v29 = vextq_s8(v14, v14, 8uLL).u64[0];
            v30 = vextq_s8(v12, v12, 8uLL).u64[0];
            v31.i64[0] = *(_QWORD *)(v44 + 160);
            v32 = vextq_s8(v10, v10, 8uLL).u64[0];
          }
          v33 = *(_QWORD *)(v44 + 208);
          v34 = *(unsigned int *)(a2 + 16);
          v16.i64[1] = v27;
          v12.i64[1] = v30;
          v35 = *(_QWORD *)a2 + 8 * (3 * *((_DWORD *)v7 - 2) + a3 + v34 * (9 * i + HIDWORD(a3)));
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          *((_QWORD *)&v9 + 1) = v19.i64[0];
          v10.i64[1] = v32;
          *((_QWORD *)&v11 + 1) = v22.i64[0];
          *((_QWORD *)&v13 + 1) = v24.i64[0];
          v14.i64[1] = v29;
          *((_QWORD *)&v15 + 1) = v25.i64[0];
          *(_QWORD *)(v35 + 16) = v18.i64[0];
          *(int8x16_t *)v35 = v8;
          v36 = v35 + 8 * v34;
          *(_QWORD *)(v36 + 16) = v17;
          *(_OWORD *)v36 = v9;
          v37 = (int8x16_t *)(v35 + 16 * v34);
          v37[1].i64[0] = v21.i64[0];
          *v37 = v10;
          v38 = v35 + 24 * v34;
          *(_QWORD *)(v38 + 16) = v20;
          *(_OWORD *)v38 = v11;
          v39 = (int8x16_t *)(v35 + 32 * v34);
          v39[1].i64[0] = v26.i64[0];
          *v39 = v12;
          v40 = v35 + 40 * v34;
          *(_QWORD *)(v40 + 16) = v23;
          *(_OWORD *)v40 = v13;
          v41 = (int8x16_t *)(v35 + 48 * v34);
          v41[1].i64[0] = v31.i64[0];
          *v41 = v14;
          v42 = v35 + 56 * v34;
          *(_QWORD *)(v42 + 16) = v28;
          *(_OWORD *)v42 = v15;
          v43 = (int8x16_t *)(v35 + (v34 << 6));
          v43[1].i64[0] = v33;
          *v43 = v16;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F91D4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F9244(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F92C4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F93EC(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F9414()
{
  return 6;
}

uint64_t sub_20F4F941C()
{
  return 1;
}

uint64_t sub_20F4F9424(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v8 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v9 = (_OWORD *)(*(_QWORD *)a2
                        + 8 * (a3 + 6 * *((_DWORD *)v7 - 2) + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3))));
          v10 = v8[2];
          v11 = *v8;
          v9[1] = v8[1];
          v9[2] = v10;
          *v9 = v11;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F94C0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F9530(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F95B0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F96D4(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F9704()
{
  return 9;
}

uint64_t sub_20F4F970C()
{
  return 1;
}

uint64_t sub_20F4F9714(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v8 = *(_QWORD *)(result + 16) + 8 * *v7;
          v9 = *(_QWORD *)a2
             + 8 * (9 * *((_DWORD *)v7 - 2) + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)));
          v10 = *(_QWORD *)(v8 + 64);
          v11 = *(_OWORD *)(v8 + 48);
          v12 = *(_OWORD *)v8;
          v13 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)(v9 + 32) = *(_OWORD *)(v8 + 32);
          *(_OWORD *)(v9 + 48) = v11;
          *(_QWORD *)(v9 + 64) = v10;
          *(_OWORD *)v9 = v12;
          *(_OWORD *)(v9 + 16) = v13;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F97B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F9828(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F98A8(_QWORD *a1, unsigned int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = a2;
  v6 = a3 * a2;
  if (v4 >= a2 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v10 - &v12[v13 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F99CC(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F99E4()
{
  return 1;
}

uint64_t sub_20F4F99EC()
{
  return 1;
}

uint64_t sub_20F4F99F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          *(_QWORD *)(*(_QWORD *)a2
                    + 8 * (*((_DWORD *)v7 - 2) + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)))) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F4F9A78(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v8)
      {
        v9 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        v10 = 16 * v8;
        while (i != *((_DWORD *)v9 - 2))
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v9);
        v6 = (i + a3);
        v7 = (_QWORD *)*a2;
        if (v5 == (_QWORD *)*a2)
        {
          v7[v6] = *v5;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          v7[v6] = *v5;
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

_QWORD *sub_20F4F9B0C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F9B7C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F9BFC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (4 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F9D20(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4F9D38()
{
  return 4;
}

uint64_t sub_20F4F9D40()
{
  return 1;
}

uint64_t sub_20F4F9D48(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v8 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v9 = (_OWORD *)(*(_QWORD *)a2
                        + 8 * (a3 + 4 * *((_DWORD *)v7 - 2) + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3))));
          v10 = v8[1];
          *v9 = *v8;
          v9[1] = v10;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4F9DD8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4F9E48(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4F9EC8(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (3 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4F9FEC(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 3uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FA014()
{
  return 3;
}

uint64_t sub_20F4FA01C()
{
  return 1;
}

uint64_t sub_20F4FA024(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v8 = *(_QWORD *)(result + 16) + 8 * *v7;
          v9 = *(_QWORD *)a2
             + 8 * (3 * *((_DWORD *)v7 - 2) + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)));
          v10 = *(_OWORD *)v8;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v9 = v10;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FA0C0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FA130(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FA1B0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (24 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FA2D8(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x18uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FA300()
{
  return 6;
}

uint64_t sub_20F4FA308()
{
  return 4;
}

uint64_t sub_20F4FA310(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v25 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v25 == *(int8x16_t **)a2)
          {
            v17 = v25[10];
            v16 = v25[11];
            v15 = v25[8];
            v14 = v25[9];
            v13 = v25[6];
            v12 = v25[7];
            v11 = v25[4];
            v10 = v25[5];
            v9 = v25[2];
            v8 = v25[3];
          }
          else
          {
            v9 = v25[2];
            v8 = v25[3];
            v11 = v25[4];
            v10 = v25[5];
            v13 = v25[6];
            v12 = v25[7];
            v15 = v25[8];
            v14 = v25[9];
            v17 = v25[10];
            v16 = v25[11];
          }
          v19 = *v25;
          v18 = v25[1];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v20 = *(unsigned int *)(a2 + 16);
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v21 = (int8x16_t *)(*(_QWORD *)a2
                            + 8 * (a3 + 6 * *((_DWORD *)v7 - 2) + v20 * (HIDWORD(a3) + 4 * i)));
          *v21 = v19;
          v21[1] = v18;
          v21[2] = v9;
          v22 = (int8x16_t *)((char *)v21 + 8 * v20);
          *v22 = v8;
          v22[1] = v11;
          v22[2] = v10;
          v23 = &v21[v20];
          *v23 = v13;
          v23[1] = v12;
          v23[2] = v15;
          v24 = (int8x16_t *)((char *)v21 + 24 * v20);
          *v24 = v14;
          v24[1] = v17;
          v24[2] = v16;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FA464(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FA4D4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FA554(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FA67C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FA6AC()
{
  return 9;
}

uint64_t sub_20F4FA6B4()
{
  return 4;
}

uint64_t sub_20F4FA6BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  int8x16_t v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  uint64_t v45;
  unint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v45 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v45 == *(_QWORD *)a2)
          {
            v38 = *(int8x16_t *)(v45 + 272);
            v39 = *(int8x16_t *)(v45 + 224);
            v13 = *(int8x16_t *)(v45 + 192);
            v33 = *(int8x16_t *)(v45 + 208);
            v20 = *(int8x16_t *)(v45 + 160);
            v14 = *(int8x16_t *)(v45 + 176);
            v25 = *(int8x16_t *)(v45 + 128);
            v21 = *(int8x16_t *)(v45 + 144);
            v46 = vextq_s8(v38, v38, 8uLL).u64[0];
            v47 = *(int8x16_t *)(v45 + 240);
            v48 = *(int8x16_t *)(v45 + 256);
            v36.i64[0] = vextq_s8(v48, v48, 8uLL).u64[0];
            v16.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
            v17.i64[0] = vextq_s8(v39, v39, 8uLL).u64[0];
            v15.i64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
            v18 = vextq_s8(v13, v13, 8uLL).u64[0];
            v19 = vextq_s8(v14, v14, 8uLL).u64[0];
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            v29 = *(int8x16_t *)(v45 + 96);
            v27 = *(int8x16_t *)(v45 + 112);
            v24 = vextq_s8(v21, v21, 8uLL).u64[0];
            v31 = vextq_s8(v25, v25, 8uLL).u64[0];
            v23.i64[0] = vextq_s8(v27, v27, 8uLL).u64[0];
            v30 = *(int8x16_t *)(v45 + 80);
            v26.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
            v28.i64[0] = vextq_s8(v30, v30, 8uLL).u64[0];
            v49 = *(int8x16_t *)(v45 + 64);
            v12.i64[0] = vextq_s8(v49, v49, 8uLL).u64[0];
            v10 = *(int8x16_t *)(v45 + 32);
            v11 = *(int8x16_t *)(v45 + 48);
            v32 = vextq_s8(v11, v11, 8uLL).u64[0];
            v34 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = *(int8x16_t *)v45;
            v8 = *(int8x16_t *)(v45 + 16);
            v35 = vextq_s8(v8, v8, 8uLL).u64[0];
            v37 = vextq_s8(v9, v9, 8uLL).u64[0];
          }
          else
          {
            v49.i64[0] = *(_QWORD *)(v45 + 64);
            v9 = *(int8x16_t *)v45;
            v8 = *(int8x16_t *)(v45 + 16);
            v10 = *(int8x16_t *)(v45 + 32);
            v11 = *(int8x16_t *)(v45 + 48);
            v12 = *(int8x16_t *)(v45 + 72);
            v14 = *(int8x16_t *)(v45 + 176);
            v13 = *(int8x16_t *)(v45 + 192);
            v15 = *(int8x16_t *)(v45 + 216);
            v16 = *(int8x16_t *)(v45 + 248);
            v17 = *(int8x16_t *)(v45 + 232);
            v47.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
            v48.i64[0] = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v13, v13, 8uLL).u64[0];
            v19 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = *(int8x16_t *)(v45 + 144);
            v20 = *(int8x16_t *)(v45 + 160);
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            v23 = *(int8x16_t *)(v45 + 120);
            v24 = vextq_s8(v21, v21, 8uLL).u64[0];
            v25.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
            v26 = *(int8x16_t *)(v45 + 104);
            v27.i64[0] = vextq_s8(v26, v26, 8uLL).u64[0];
            v28 = *(int8x16_t *)(v45 + 88);
            v29.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
            v30.i64[0] = vextq_s8(v12, v12, 8uLL).u64[0];
            v31 = *(_QWORD *)(v45 + 136);
            v32 = vextq_s8(v11, v11, 8uLL).u64[0];
            v33.i64[0] = *(_QWORD *)(v45 + 208);
            v34 = vextq_s8(v10, v10, 8uLL).u64[0];
            v35 = vextq_s8(v8, v8, 8uLL).u64[0];
            v36 = *(int8x16_t *)(v45 + 264);
            v37 = vextq_s8(v9, v9, 8uLL).u64[0];
            v38.i64[0] = vextq_s8(v36, v36, 8uLL).u64[0];
            v46 = *(_QWORD *)(v45 + 280);
            v39.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
          }
          v11.i64[1] = v32;
          v10.i64[1] = v34;
          v8.i64[1] = v35;
          v9.i64[1] = v37;
          v40 = *(unsigned int *)(a2 + 16);
          v23.i64[1] = v25.i64[0];
          v26.i64[1] = v27.i64[0];
          v28.i64[1] = v29.i64[0];
          v12.i64[1] = v30.i64[0];
          v13.i64[1] = v18;
          v14.i64[1] = v19;
          v20.i64[1] = v22;
          v21.i64[1] = v24;
          v36.i64[1] = v38.i64[0];
          v16.i64[1] = v48.i64[0];
          v41 = *(_QWORD *)a2 + 8 * (9 * *((_DWORD *)v7 - 2) + a3 + v40 * (HIDWORD(a3) + 4 * i));
          v17.i64[1] = v47.i64[0];
          v15.i64[1] = v39.i64[0];
          *(int8x16_t *)v41 = v9;
          *(int8x16_t *)(v41 + 16) = v8;
          *(_QWORD *)(v41 + 64) = v49.i64[0];
          *(int8x16_t *)(v41 + 32) = v10;
          *(int8x16_t *)(v41 + 48) = v11;
          v42 = (int8x16_t *)(v41 + 8 * v40);
          *v42 = v12;
          v42[1] = v28;
          v42[4].i64[0] = v31;
          v42[2] = v26;
          v42[3] = v23;
          v43 = (int8x16_t *)(v41 + 16 * v40);
          *v43 = v21;
          v43[1] = v20;
          v43[4].i64[0] = v33.i64[0];
          v43[2] = v14;
          v43[3] = v13;
          v44 = (int8x16_t *)(v41 + 24 * v40);
          *v44 = v15;
          v44[1] = v17;
          v44[4].i64[0] = v46;
          v7 += 2;
          v44[2] = v16;
          v44[3] = v36;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FA91C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FA98C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FAA0C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (4 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FAB30(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FAB48()
{
  return 1;
}

uint64_t sub_20F4FAB50()
{
  return 4;
}

uint64_t sub_20F4FAB58(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v10 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *v10;
          v11 = v10[1];
          v8 = *(unsigned int *)(a2 + 16);
          v9 = (_QWORD *)(*(_QWORD *)a2 + 8 * (*((_DWORD *)v7 - 2) + a3 + v8 * (HIDWORD(a3) + 4 * i)));
          *v9 = v12.i64[0];
          v9[v8] = vextq_s8(v12, v12, 8uLL).u64[0];
          v9[2 * v8] = v11.i64[0];
          v9[3 * v8] = vextq_s8(v11, v11, 8uLL).u64[0];
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FAC24(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FAC94(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FAD14(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (16 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FAE38(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 7) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FAE50()
{
  return 4;
}

uint64_t sub_20F4FAE58()
{
  return 4;
}

uint64_t sub_20F4FAE60(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 *v21;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v21 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v21 == *(__int128 **)a2)
          {
            v15 = v21[6];
            v14 = v21[7];
            v13 = v21[4];
            v12 = v21[5];
            v11 = v21[2];
            v10 = v21[3];
            v9 = *v21;
            v8 = v21[1];
          }
          else
          {
            v9 = *v21;
            v8 = v21[1];
            v11 = v21[2];
            v10 = v21[3];
            v13 = v21[4];
            v12 = v21[5];
            v15 = v21[6];
            v14 = v21[7];
          }
          v16 = *(unsigned int *)(a2 + 16);
          v17 = (_OWORD *)(*(_QWORD *)a2
                         + 8 * (a3 + 4 * *((_DWORD *)v7 - 2) + v16 * (HIDWORD(a3) + 4 * i)));
          *v17 = v9;
          v17[1] = v8;
          v18 = (_OWORD *)((char *)v17 + 8 * v16);
          *v18 = v11;
          v18[1] = v10;
          v19 = &v17[v16];
          *v19 = v13;
          v19[1] = v12;
          v20 = (_OWORD *)((char *)v17 + 24 * v16);
          *v20 = v15;
          v20[1] = v14;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F4FAF30(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v8)
      {
        v9 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        v10 = 16 * v8;
        while (i != *((_DWORD *)v9 - 2))
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v9);
        v6 = *a2 + 8 * (a3 + 4 * i);
        *(_QWORD *)&v7 = *v5;
        if (v5 == (_QWORD *)*a2)
        {
          *(_QWORD *)&v11 = v5[10];
          *((_QWORD *)&v7 + 1) = v5[5];
          *((_QWORD *)&v11 + 1) = v5[15];
          *(_OWORD *)v6 = v7;
          *(_OWORD *)(v6 + 16) = v11;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          *(_QWORD *)(v6 + 8) = v5[5];
          *(_QWORD *)(v6 + 16) = v5[10];
          *(_QWORD *)(v6 + 24) = v5[15];
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

_QWORD *sub_20F4FAFF0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FB060(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FB0E0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (12 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FB208(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0xCuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FB230()
{
  return 3;
}

uint64_t sub_20F4FB238()
{
  return 4;
}

uint64_t sub_20F4FB240(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  uint64_t v24;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v24 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v24 == *(_QWORD *)a2)
          {
            v12 = *(int8x16_t *)(v24 + 64);
            v16 = *(int8x16_t *)(v24 + 80);
            v18 = *(int8x16_t *)(v24 + 32);
            v13 = *(int8x16_t *)(v24 + 48);
            v9 = *(int8x16_t *)v24;
            v8 = *(int8x16_t *)(v24 + 16);
            v14 = vextq_s8(v16, v16, 8uLL).u64[0];
            v15.i64[0] = vextq_s8(v12, v12, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v10 = vextq_s8(v18, v18, 8uLL).u64[0];
            v11.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)(v24 + 16);
            v9 = *(int8x16_t *)v24;
            v10 = *(_QWORD *)(v24 + 40);
            v11 = *(int8x16_t *)(v24 + 24);
            v12.i64[0] = *(_QWORD *)(v24 + 64);
            v13 = *(int8x16_t *)(v24 + 48);
            v14 = *(_QWORD *)(v24 + 88);
            v15 = *(int8x16_t *)(v24 + 72);
            v16.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v18.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
          }
          v19 = *(unsigned int *)(a2 + 16);
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v11.i64[1] = v18.i64[0];
          v20 = *(_QWORD *)a2 + 8 * (3 * *((_DWORD *)v7 - 2) + a3 + v19 * (HIDWORD(a3) + 4 * i));
          v13.i64[1] = v17;
          v15.i64[1] = v16.i64[0];
          *(_QWORD *)(v20 + 16) = v8.i64[0];
          *(int8x16_t *)v20 = v9;
          v21 = (int8x16_t *)(v20 + 8 * v19);
          v21[1].i64[0] = v10;
          *v21 = v11;
          v22 = (int8x16_t *)(v20 + 16 * v19);
          v22[1].i64[0] = v12.i64[0];
          *v22 = v13;
          v23 = (int8x16_t *)(v20 + 24 * v19);
          v23[1].i64[0] = v14;
          *v23 = v15;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FB368(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FB3D8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FB458(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (18 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FB580(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x12uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FB5B0()
{
  return 6;
}

uint64_t sub_20F4FB5B8()
{
  return 3;
}

uint64_t sub_20F4FB5C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v24 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v24 == *(int8x16_t **)a2)
          {
            v12 = v24[7];
            v14 = v24[8];
            v18 = v24[5];
            v13 = v24[6];
            v10 = v24[3];
            v19 = v24[4];
            v8 = v24[1];
            v11 = v24[2];
            v15 = vextq_s8(v14, v14, 8uLL).u64[0];
            v16 = vextq_s8(v12, v12, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v9 = *v24;
          }
          else
          {
            v9 = *v24;
            v8 = v24[1];
            v11 = v24[2];
            v10 = v24[3];
            v13 = v24[6];
            v12 = v24[7];
            v14 = v24[8];
            v15 = vextq_s8(v14, v14, 8uLL).u64[0];
            v16 = vextq_s8(v12, v12, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v19 = v24[4];
            v18 = v24[5];
          }
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v20 = *(unsigned int *)(a2 + 16);
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v14.i64[1] = v15;
          v21 = (int8x16_t *)(*(_QWORD *)a2
                            + 8 * (a3 + 6 * *((_DWORD *)v7 - 2) + v20 * (3 * i + HIDWORD(a3))));
          v12.i64[1] = v16;
          v13.i64[1] = v17;
          *v21 = v9;
          v21[1] = v8;
          v21[2] = v11;
          v22 = (int8x16_t *)((char *)v21 + 8 * v20);
          *v22 = v10;
          v22[1] = v19;
          v22[2] = v18;
          v23 = &v21[v20];
          *v23 = v13;
          v23[1] = v12;
          v23[2] = v14;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FB6F8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FB768(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FB7E8(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (27 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FB910(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x1BuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FB940()
{
  return 9;
}

uint64_t sub_20F4FB948()
{
  return 3;
}

uint64_t sub_20F4FB950(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  uint64_t v37;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v37 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v37 == *(_QWORD *)a2)
          {
            v17 = *(int8x16_t *)(v37 + 176);
            v16 = *(int8x16_t *)(v37 + 192);
            v15 = *(int8x16_t *)(v37 + 144);
            v14 = *(int8x16_t *)(v37 + 160);
            v19 = *(int8x16_t *)(v37 + 112);
            v18 = *(int8x16_t *)(v37 + 128);
            v21 = *(int8x16_t *)(v37 + 80);
            v20 = *(int8x16_t *)(v37 + 96);
            v25 = *(int8x16_t *)(v37 + 48);
            v31 = *(int8x16_t *)(v37 + 64);
            v22 = vextq_s8(v16, v16, 8uLL).u64[0];
            v23 = vextq_s8(v17, v17, 8uLL).u64[0];
            v24 = vextq_s8(v14, v14, 8uLL).u64[0];
            v27 = vextq_s8(v15, v15, 8uLL).u64[0];
            v28 = vextq_s8(v18, v18, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v19, v19, 8uLL).u64[0];
            *(_QWORD *)&v12 = vextq_s8(v20, v20, 8uLL).u64[0];
            *(_QWORD *)&v11 = vextq_s8(v21, v21, 8uLL).u64[0];
            v8 = *(int8x16_t *)(v37 + 16);
            v26 = *(int8x16_t *)(v37 + 32);
            *(_QWORD *)&v10 = vextq_s8(v31, v31, 8uLL).u64[0];
            v29 = vextq_s8(v25, v25, 8uLL).u64[0];
            v30 = vextq_s8(v26, v26, 8uLL).u64[0];
            v9 = *(int8x16_t *)v37;
          }
          else
          {
            v9 = *(int8x16_t *)v37;
            v8 = *(int8x16_t *)(v37 + 16);
            v10 = *(_OWORD *)(v37 + 72);
            v11 = *(_OWORD *)(v37 + 88);
            v12 = *(_OWORD *)(v37 + 104);
            v13 = *(_OWORD *)(v37 + 120);
            v15 = *(int8x16_t *)(v37 + 144);
            v14 = *(int8x16_t *)(v37 + 160);
            v17 = *(int8x16_t *)(v37 + 176);
            v16 = *(int8x16_t *)(v37 + 192);
            v18.i64[0] = *(_QWORD *)(v37 + 128);
            v19.i64[0] = *(_QWORD *)(v37 + 112);
            v20.i64[0] = *(_QWORD *)(v37 + 96);
            v21.i64[0] = *(_QWORD *)(v37 + 80);
            v22 = vextq_s8(v16, v16, 8uLL).u64[0];
            v23 = vextq_s8(v17, v17, 8uLL).u64[0];
            v24 = vextq_s8(v14, v14, 8uLL).u64[0];
            v26 = *(int8x16_t *)(v37 + 32);
            v25 = *(int8x16_t *)(v37 + 48);
            v27 = vextq_s8(v15, v15, 8uLL).u64[0];
            v28 = *(_QWORD *)(v37 + 136);
            v29 = vextq_s8(v25, v25, 8uLL).u64[0];
            v30 = vextq_s8(v26, v26, 8uLL).u64[0];
            v31.i64[0] = *(_QWORD *)(v37 + 64);
          }
          v32 = *(_QWORD *)(v37 + 208);
          v33 = *(unsigned int *)(a2 + 16);
          v25.i64[1] = v29;
          v26.i64[1] = v30;
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          *((_QWORD *)&v13 + 1) = v18.i64[0];
          *((_QWORD *)&v12 + 1) = v19.i64[0];
          *((_QWORD *)&v11 + 1) = v20.i64[0];
          *((_QWORD *)&v10 + 1) = v21.i64[0];
          v16.i64[1] = v22;
          v17.i64[1] = v23;
          v34 = *(_QWORD *)a2 + 8 * (9 * *((_DWORD *)v7 - 2) + a3 + v33 * (3 * i + HIDWORD(a3)));
          v14.i64[1] = v24;
          v15.i64[1] = v27;
          *(int8x16_t *)v34 = v9;
          *(int8x16_t *)(v34 + 16) = v8;
          *(_QWORD *)(v34 + 64) = v31.i64[0];
          *(int8x16_t *)(v34 + 32) = v26;
          *(int8x16_t *)(v34 + 48) = v25;
          v35 = v34 + 8 * v33;
          *(_OWORD *)v35 = v10;
          *(_OWORD *)(v35 + 16) = v11;
          *(_QWORD *)(v35 + 64) = v28;
          *(_OWORD *)(v35 + 32) = v12;
          *(_OWORD *)(v35 + 48) = v13;
          v36 = (int8x16_t *)(v34 + 16 * v33);
          *v36 = v15;
          v36[1] = v14;
          v36[4].i64[0] = v32;
          v36[2] = v17;
          v36[3] = v16;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FBAFC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FBB6C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FBBEC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (3 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FBD10(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 3uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FBD38()
{
  return 1;
}

uint64_t sub_20F4FBD40()
{
  return 3;
}

uint64_t sub_20F4FBD48(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v13 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v13 == *(_QWORD *)a2)
          {
            v10 = *(_QWORD *)(v13 + 16);
            v8 = *(int8x16_t *)v13;
            v9 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)v13;
            v9 = *(_QWORD *)(v13 + 8);
            v10 = *(_QWORD *)(v13 + 16);
          }
          v11 = *(unsigned int *)(a2 + 16);
          v12 = (_QWORD *)(*(_QWORD *)a2 + 8 * (*((_DWORD *)v7 - 2) + a3 + v11 * (3 * i + HIDWORD(a3))));
          *v12 = v8.i64[0];
          v12[v11] = v9;
          v12[2 * v11] = v10;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FBE04(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FBE74(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FBEF4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (12 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FC01C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0xCuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FC044()
{
  return 4;
}

uint64_t sub_20F4FC04C()
{
  return 3;
}

uint64_t sub_20F4FC054(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v18 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          if (v18 == *(int8x16_t **)a2)
          {
            v13 = v18[4];
            v12 = v18[5];
            v11 = v18[2];
            v10 = v18[3];
            v9 = *v18;
            v8 = v18[1];
          }
          else
          {
            v9 = *v18;
            v8 = v18[1];
            v11 = v18[2];
            v10 = v18[3];
            v13 = v18[4];
            v12 = v18[5];
          }
          v14 = *(unsigned int *)(a2 + 16);
          v15 = (int8x16_t *)(*(_QWORD *)a2
                            + 8 * (a3 + 4 * *((_DWORD *)v7 - 2) + v14 * (3 * i + HIDWORD(a3))));
          v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          *v15 = v9;
          v15[1] = v8;
          v16 = (int8x16_t *)((char *)v15 + 8 * v14);
          *v16 = v11;
          v16[1] = v10;
          v17 = &v15[v14];
          *v17 = v13;
          v17[1] = v12;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F4FC148(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4FC1B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA00960;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F4FC238(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F4FC35C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F4FC38C()
{
  return 3;
}

uint64_t sub_20F4FC394()
{
  return 3;
}

uint64_t sub_20F4FC39C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  uint64_t v20;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v5)
      {
        v6 = 16 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        do
        {
          v20 = *(_QWORD *)(result + 16) + 8 * *v7;
          if (v20 == *(_QWORD *)a2)
          {
            v14 = *(_QWORD *)(v20 + 64);
            v13 = *(int8x16_t *)(v20 + 32);
            v10 = *(int8x16_t *)(v20 + 48);
            v8 = *(int8x16_t *)v20;
            v12 = *(int8x16_t *)(v20 + 16);
            v15 = vextq_s8(v10, v10, 8uLL).u64[0];
            v11 = vextq_s8(v13, v13, 8uLL).u64[0];
            *(_QWORD *)&v9 = vextq_s8(v12, v12, 8uLL).u64[0];
          }
          else
          {
            v8 = *(int8x16_t *)v20;
            v9 = *(_OWORD *)(v20 + 24);
            v10 = *(int8x16_t *)(v20 + 48);
            v11 = *(_QWORD *)(v20 + 40);
            v12.i64[0] = *(_QWORD *)(v20 + 16);
            v13.i64[0] = *(_QWORD *)(v20 + 32);
            v14 = *(_QWORD *)(v20 + 64);
            v15 = vextq_s8(v10, v10, 8uLL).u64[0];
          }
          v16 = *(unsigned int *)(a2 + 16);
          v17 = *(_QWORD *)a2 + 8 * (3 * *((_DWORD *)v7 - 2) + a3 + v16 * (3 * i + HIDWORD(a3)));
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          *((_QWORD *)&v9 + 1) = v13.i64[0];
          v10.i64[1] = v15;
          *(_QWORD *)(v17 + 16) = v12.i64[0];
          *(int8x16_t *)v17 = v8;
          v18 = v17 + 8 * v16;
          *(_QWORD *)(v18 + 16) = v11;
          *(_OWORD *)v18 = v9;
          v19 = (int8x16_t *)(v17 + 16 * v16);
          v19[1].i64[0] = v14;
          *v19 = v10;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F4FC49C(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * i);
      if (v8)
      {
        v9 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * i) + 8);
        v10 = 16 * v8;
        while (i != *((_DWORD *)v9 - 2))
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v9);
        v6 = *a2 + 8 * (3 * i + a3);
        *(_QWORD *)&v7 = *v5;
        if (v5 == (_QWORD *)*a2)
        {
          *((_QWORD *)&v7 + 1) = v5[4];
          *(_QWORD *)(v6 + 16) = v5[8];
          *(_OWORD *)v6 = v7;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          *(_QWORD *)(v6 + 8) = v5[4];
          *(_QWORD *)(v6 + 16) = v5[8];
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

_QWORD *sub_20F4FC554(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;

  a1[864] = off_24CA00960;
  v2 = (void *)a1[879];
  if (v2)
  {
    a1[880] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[875];
  if (v3)
  {
    a1[876] = v3;
    operator delete(v3);
  }
  a1[864] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 869));
  v4 = (void *)a1[866];
  if (v4)
  {
    a1[867] = v4;
    operator delete(v4);
  }
  a1[846] = off_24CA00960;
  v5 = (void *)a1[861];
  if (v5)
  {
    a1[862] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[857];
  if (v6)
  {
    a1[858] = v6;
    operator delete(v6);
  }
  a1[846] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 851));
  v7 = (void *)a1[848];
  if (v7)
  {
    a1[849] = v7;
    operator delete(v7);
  }
  a1[828] = off_24CA00960;
  v8 = (void *)a1[843];
  if (v8)
  {
    a1[844] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[839];
  if (v9)
  {
    a1[840] = v9;
    operator delete(v9);
  }
  a1[828] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 833));
  v10 = (void *)a1[830];
  if (v10)
  {
    a1[831] = v10;
    operator delete(v10);
  }
  a1[810] = off_24CA00960;
  v11 = (void *)a1[825];
  if (v11)
  {
    a1[826] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[821];
  if (v12)
  {
    a1[822] = v12;
    operator delete(v12);
  }
  a1[810] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 815));
  v13 = (void *)a1[812];
  if (v13)
  {
    a1[813] = v13;
    operator delete(v13);
  }
  a1[792] = off_24CA00960;
  v14 = (void *)a1[807];
  if (v14)
  {
    a1[808] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[803];
  if (v15)
  {
    a1[804] = v15;
    operator delete(v15);
  }
  a1[792] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 797));
  v16 = (void *)a1[794];
  if (v16)
  {
    a1[795] = v16;
    operator delete(v16);
  }
  a1[774] = off_24CA00960;
  v17 = (void *)a1[789];
  if (v17)
  {
    a1[790] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[785];
  if (v18)
  {
    a1[786] = v18;
    operator delete(v18);
  }
  a1[774] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 779));
  v19 = (void *)a1[776];
  if (v19)
  {
    a1[777] = v19;
    operator delete(v19);
  }
  a1[756] = off_24CA00960;
  v20 = (void *)a1[771];
  if (v20)
  {
    a1[772] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[767];
  if (v21)
  {
    a1[768] = v21;
    operator delete(v21);
  }
  a1[756] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 761));
  v22 = (void *)a1[758];
  if (v22)
  {
    a1[759] = v22;
    operator delete(v22);
  }
  a1[738] = off_24CA00960;
  v23 = (void *)a1[753];
  if (v23)
  {
    a1[754] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[749];
  if (v24)
  {
    a1[750] = v24;
    operator delete(v24);
  }
  a1[738] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 743));
  v25 = (void *)a1[740];
  if (v25)
  {
    a1[741] = v25;
    operator delete(v25);
  }
  a1[720] = off_24CA00960;
  v26 = (void *)a1[735];
  if (v26)
  {
    a1[736] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[731];
  if (v27)
  {
    a1[732] = v27;
    operator delete(v27);
  }
  a1[720] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 725));
  v28 = (void *)a1[722];
  if (v28)
  {
    a1[723] = v28;
    operator delete(v28);
  }
  a1[702] = off_24CA00960;
  v29 = (void *)a1[717];
  if (v29)
  {
    a1[718] = v29;
    operator delete(v29);
  }
  v30 = (void *)a1[713];
  if (v30)
  {
    a1[714] = v30;
    operator delete(v30);
  }
  a1[702] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 707));
  v31 = (void *)a1[704];
  if (v31)
  {
    a1[705] = v31;
    operator delete(v31);
  }
  a1[684] = off_24CA00960;
  v32 = (void *)a1[699];
  if (v32)
  {
    a1[700] = v32;
    operator delete(v32);
  }
  v33 = (void *)a1[695];
  if (v33)
  {
    a1[696] = v33;
    operator delete(v33);
  }
  a1[684] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 689));
  v34 = (void *)a1[686];
  if (v34)
  {
    a1[687] = v34;
    operator delete(v34);
  }
  a1[666] = off_24CA00960;
  v35 = (void *)a1[681];
  if (v35)
  {
    a1[682] = v35;
    operator delete(v35);
  }
  v36 = (void *)a1[677];
  if (v36)
  {
    a1[678] = v36;
    operator delete(v36);
  }
  a1[666] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 671));
  v37 = (void *)a1[668];
  if (v37)
  {
    a1[669] = v37;
    operator delete(v37);
  }
  a1[648] = off_24CA00960;
  v38 = (void *)a1[663];
  if (v38)
  {
    a1[664] = v38;
    operator delete(v38);
  }
  v39 = (void *)a1[659];
  if (v39)
  {
    a1[660] = v39;
    operator delete(v39);
  }
  a1[648] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 653));
  v40 = (void *)a1[650];
  if (v40)
  {
    a1[651] = v40;
    operator delete(v40);
  }
  a1[630] = off_24CA00960;
  v41 = (void *)a1[645];
  if (v41)
  {
    a1[646] = v41;
    operator delete(v41);
  }
  v42 = (void *)a1[641];
  if (v42)
  {
    a1[642] = v42;
    operator delete(v42);
  }
  a1[630] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 635));
  v43 = (void *)a1[632];
  if (v43)
  {
    a1[633] = v43;
    operator delete(v43);
  }
  a1[612] = off_24CA00960;
  v44 = (void *)a1[627];
  if (v44)
  {
    a1[628] = v44;
    operator delete(v44);
  }
  v45 = (void *)a1[623];
  if (v45)
  {
    a1[624] = v45;
    operator delete(v45);
  }
  a1[612] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 617));
  v46 = (void *)a1[614];
  if (v46)
  {
    a1[615] = v46;
    operator delete(v46);
  }
  a1[594] = off_24CA00960;
  v47 = (void *)a1[609];
  if (v47)
  {
    a1[610] = v47;
    operator delete(v47);
  }
  v48 = (void *)a1[605];
  if (v48)
  {
    a1[606] = v48;
    operator delete(v48);
  }
  a1[594] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 599));
  v49 = (void *)a1[596];
  if (v49)
  {
    a1[597] = v49;
    operator delete(v49);
  }
  a1[576] = off_24CA00960;
  v50 = (void *)a1[591];
  if (v50)
  {
    a1[592] = v50;
    operator delete(v50);
  }
  v51 = (void *)a1[587];
  if (v51)
  {
    a1[588] = v51;
    operator delete(v51);
  }
  a1[576] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 581));
  v52 = (void *)a1[578];
  if (v52)
  {
    a1[579] = v52;
    operator delete(v52);
  }
  a1[558] = off_24CA00960;
  v53 = (void *)a1[573];
  if (v53)
  {
    a1[574] = v53;
    operator delete(v53);
  }
  v54 = (void *)a1[569];
  if (v54)
  {
    a1[570] = v54;
    operator delete(v54);
  }
  a1[558] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 563));
  v55 = (void *)a1[560];
  if (v55)
  {
    a1[561] = v55;
    operator delete(v55);
  }
  a1[540] = off_24CA00960;
  v56 = (void *)a1[555];
  if (v56)
  {
    a1[556] = v56;
    operator delete(v56);
  }
  v57 = (void *)a1[551];
  if (v57)
  {
    a1[552] = v57;
    operator delete(v57);
  }
  a1[540] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 545));
  v58 = (void *)a1[542];
  if (v58)
  {
    a1[543] = v58;
    operator delete(v58);
  }
  a1[522] = off_24CA00960;
  v59 = (void *)a1[537];
  if (v59)
  {
    a1[538] = v59;
    operator delete(v59);
  }
  v60 = (void *)a1[533];
  if (v60)
  {
    a1[534] = v60;
    operator delete(v60);
  }
  a1[522] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 527));
  v61 = (void *)a1[524];
  if (v61)
  {
    a1[525] = v61;
    operator delete(v61);
  }
  a1[504] = off_24CA00960;
  v62 = (void *)a1[519];
  if (v62)
  {
    a1[520] = v62;
    operator delete(v62);
  }
  v63 = (void *)a1[515];
  if (v63)
  {
    a1[516] = v63;
    operator delete(v63);
  }
  a1[504] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 509));
  v64 = (void *)a1[506];
  if (v64)
  {
    a1[507] = v64;
    operator delete(v64);
  }
  a1[486] = off_24CA00960;
  v65 = (void *)a1[501];
  if (v65)
  {
    a1[502] = v65;
    operator delete(v65);
  }
  v66 = (void *)a1[497];
  if (v66)
  {
    a1[498] = v66;
    operator delete(v66);
  }
  a1[486] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 491));
  v67 = (void *)a1[488];
  if (v67)
  {
    a1[489] = v67;
    operator delete(v67);
  }
  a1[468] = off_24CA00960;
  v68 = (void *)a1[483];
  if (v68)
  {
    a1[484] = v68;
    operator delete(v68);
  }
  v69 = (void *)a1[479];
  if (v69)
  {
    a1[480] = v69;
    operator delete(v69);
  }
  a1[468] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 473));
  v70 = (void *)a1[470];
  if (v70)
  {
    a1[471] = v70;
    operator delete(v70);
  }
  a1[450] = off_24CA00960;
  v71 = (void *)a1[465];
  if (v71)
  {
    a1[466] = v71;
    operator delete(v71);
  }
  v72 = (void *)a1[461];
  if (v72)
  {
    a1[462] = v72;
    operator delete(v72);
  }
  a1[450] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 455));
  v73 = (void *)a1[452];
  if (v73)
  {
    a1[453] = v73;
    operator delete(v73);
  }
  a1[432] = off_24CA00960;
  v74 = (void *)a1[447];
  if (v74)
  {
    a1[448] = v74;
    operator delete(v74);
  }
  v75 = (void *)a1[443];
  if (v75)
  {
    a1[444] = v75;
    operator delete(v75);
  }
  a1[432] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 437));
  v76 = (void *)a1[434];
  if (v76)
  {
    a1[435] = v76;
    operator delete(v76);
  }
  a1[414] = off_24CA00960;
  v77 = (void *)a1[429];
  if (v77)
  {
    a1[430] = v77;
    operator delete(v77);
  }
  v78 = (void *)a1[425];
  if (v78)
  {
    a1[426] = v78;
    operator delete(v78);
  }
  a1[414] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 419));
  v79 = (void *)a1[416];
  if (v79)
  {
    a1[417] = v79;
    operator delete(v79);
  }
  a1[396] = off_24CA00960;
  v80 = (void *)a1[411];
  if (v80)
  {
    a1[412] = v80;
    operator delete(v80);
  }
  v81 = (void *)a1[407];
  if (v81)
  {
    a1[408] = v81;
    operator delete(v81);
  }
  a1[396] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 401));
  v82 = (void *)a1[398];
  if (v82)
  {
    a1[399] = v82;
    operator delete(v82);
  }
  a1[378] = off_24CA00960;
  v83 = (void *)a1[393];
  if (v83)
  {
    a1[394] = v83;
    operator delete(v83);
  }
  v84 = (void *)a1[389];
  if (v84)
  {
    a1[390] = v84;
    operator delete(v84);
  }
  a1[378] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 383));
  v85 = (void *)a1[380];
  if (v85)
  {
    a1[381] = v85;
    operator delete(v85);
  }
  a1[360] = off_24CA00960;
  v86 = (void *)a1[375];
  if (v86)
  {
    a1[376] = v86;
    operator delete(v86);
  }
  v87 = (void *)a1[371];
  if (v87)
  {
    a1[372] = v87;
    operator delete(v87);
  }
  a1[360] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 365));
  v88 = (void *)a1[362];
  if (v88)
  {
    a1[363] = v88;
    operator delete(v88);
  }
  a1[342] = off_24CA00960;
  v89 = (void *)a1[357];
  if (v89)
  {
    a1[358] = v89;
    operator delete(v89);
  }
  v90 = (void *)a1[353];
  if (v90)
  {
    a1[354] = v90;
    operator delete(v90);
  }
  a1[342] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 347));
  v91 = (void *)a1[344];
  if (v91)
  {
    a1[345] = v91;
    operator delete(v91);
  }
  a1[324] = off_24CA00960;
  v92 = (void *)a1[339];
  if (v92)
  {
    a1[340] = v92;
    operator delete(v92);
  }
  v93 = (void *)a1[335];
  if (v93)
  {
    a1[336] = v93;
    operator delete(v93);
  }
  a1[324] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 329));
  v94 = (void *)a1[326];
  if (v94)
  {
    a1[327] = v94;
    operator delete(v94);
  }
  a1[306] = off_24CA00960;
  v95 = (void *)a1[321];
  if (v95)
  {
    a1[322] = v95;
    operator delete(v95);
  }
  v96 = (void *)a1[317];
  if (v96)
  {
    a1[318] = v96;
    operator delete(v96);
  }
  a1[306] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 311));
  v97 = (void *)a1[308];
  if (v97)
  {
    a1[309] = v97;
    operator delete(v97);
  }
  a1[288] = off_24CA00960;
  v98 = (void *)a1[303];
  if (v98)
  {
    a1[304] = v98;
    operator delete(v98);
  }
  v99 = (void *)a1[299];
  if (v99)
  {
    a1[300] = v99;
    operator delete(v99);
  }
  a1[288] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 293));
  v100 = (void *)a1[290];
  if (v100)
  {
    a1[291] = v100;
    operator delete(v100);
  }
  a1[270] = off_24CA00960;
  v101 = (void *)a1[285];
  if (v101)
  {
    a1[286] = v101;
    operator delete(v101);
  }
  v102 = (void *)a1[281];
  if (v102)
  {
    a1[282] = v102;
    operator delete(v102);
  }
  a1[270] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 275));
  v103 = (void *)a1[272];
  if (v103)
  {
    a1[273] = v103;
    operator delete(v103);
  }
  a1[252] = off_24CA00960;
  v104 = (void *)a1[267];
  if (v104)
  {
    a1[268] = v104;
    operator delete(v104);
  }
  v105 = (void *)a1[263];
  if (v105)
  {
    a1[264] = v105;
    operator delete(v105);
  }
  a1[252] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 257));
  v106 = (void *)a1[254];
  if (v106)
  {
    a1[255] = v106;
    operator delete(v106);
  }
  a1[234] = off_24CA00960;
  v107 = (void *)a1[249];
  if (v107)
  {
    a1[250] = v107;
    operator delete(v107);
  }
  v108 = (void *)a1[245];
  if (v108)
  {
    a1[246] = v108;
    operator delete(v108);
  }
  a1[234] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 239));
  v109 = (void *)a1[236];
  if (v109)
  {
    a1[237] = v109;
    operator delete(v109);
  }
  a1[216] = off_24CA00960;
  v110 = (void *)a1[231];
  if (v110)
  {
    a1[232] = v110;
    operator delete(v110);
  }
  v111 = (void *)a1[227];
  if (v111)
  {
    a1[228] = v111;
    operator delete(v111);
  }
  a1[216] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 221));
  v112 = (void *)a1[218];
  if (v112)
  {
    a1[219] = v112;
    operator delete(v112);
  }
  a1[198] = off_24CA00960;
  v113 = (void *)a1[213];
  if (v113)
  {
    a1[214] = v113;
    operator delete(v113);
  }
  v114 = (void *)a1[209];
  if (v114)
  {
    a1[210] = v114;
    operator delete(v114);
  }
  a1[198] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 203));
  v115 = (void *)a1[200];
  if (v115)
  {
    a1[201] = v115;
    operator delete(v115);
  }
  a1[180] = off_24CA00960;
  v116 = (void *)a1[195];
  if (v116)
  {
    a1[196] = v116;
    operator delete(v116);
  }
  v117 = (void *)a1[191];
  if (v117)
  {
    a1[192] = v117;
    operator delete(v117);
  }
  a1[180] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 185));
  v118 = (void *)a1[182];
  if (v118)
  {
    a1[183] = v118;
    operator delete(v118);
  }
  a1[162] = off_24CA00960;
  v119 = (void *)a1[177];
  if (v119)
  {
    a1[178] = v119;
    operator delete(v119);
  }
  v120 = (void *)a1[173];
  if (v120)
  {
    a1[174] = v120;
    operator delete(v120);
  }
  a1[162] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 167));
  v121 = (void *)a1[164];
  if (v121)
  {
    a1[165] = v121;
    operator delete(v121);
  }
  a1[144] = off_24CA00960;
  v122 = (void *)a1[159];
  if (v122)
  {
    a1[160] = v122;
    operator delete(v122);
  }
  v123 = (void *)a1[155];
  if (v123)
  {
    a1[156] = v123;
    operator delete(v123);
  }
  a1[144] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 149));
  v124 = (void *)a1[146];
  if (v124)
  {
    a1[147] = v124;
    operator delete(v124);
  }
  a1[126] = off_24CA00960;
  v125 = (void *)a1[141];
  if (v125)
  {
    a1[142] = v125;
    operator delete(v125);
  }
  v126 = (void *)a1[137];
  if (v126)
  {
    a1[138] = v126;
    operator delete(v126);
  }
  a1[126] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 131));
  v127 = (void *)a1[128];
  if (v127)
  {
    a1[129] = v127;
    operator delete(v127);
  }
  a1[108] = off_24CA00960;
  v128 = (void *)a1[123];
  if (v128)
  {
    a1[124] = v128;
    operator delete(v128);
  }
  v129 = (void *)a1[119];
  if (v129)
  {
    a1[120] = v129;
    operator delete(v129);
  }
  a1[108] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 113));
  v130 = (void *)a1[110];
  if (v130)
  {
    a1[111] = v130;
    operator delete(v130);
  }
  a1[90] = off_24CA00960;
  v131 = (void *)a1[105];
  if (v131)
  {
    a1[106] = v131;
    operator delete(v131);
  }
  v132 = (void *)a1[101];
  if (v132)
  {
    a1[102] = v132;
    operator delete(v132);
  }
  a1[90] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 95));
  v133 = (void *)a1[92];
  if (v133)
  {
    a1[93] = v133;
    operator delete(v133);
  }
  a1[72] = off_24CA00960;
  v134 = (void *)a1[87];
  if (v134)
  {
    a1[88] = v134;
    operator delete(v134);
  }
  v135 = (void *)a1[83];
  if (v135)
  {
    a1[84] = v135;
    operator delete(v135);
  }
  a1[72] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 77));
  v136 = (void *)a1[74];
  if (v136)
  {
    a1[75] = v136;
    operator delete(v136);
  }
  a1[54] = off_24CA00960;
  v137 = (void *)a1[69];
  if (v137)
  {
    a1[70] = v137;
    operator delete(v137);
  }
  v138 = (void *)a1[65];
  if (v138)
  {
    a1[66] = v138;
    operator delete(v138);
  }
  a1[54] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 59));
  v139 = (void *)a1[56];
  if (v139)
  {
    a1[57] = v139;
    operator delete(v139);
  }
  a1[36] = off_24CA00960;
  v140 = (void *)a1[51];
  if (v140)
  {
    a1[52] = v140;
    operator delete(v140);
  }
  v141 = (void *)a1[47];
  if (v141)
  {
    a1[48] = v141;
    operator delete(v141);
  }
  a1[36] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 41));
  v142 = (void *)a1[38];
  if (v142)
  {
    a1[39] = v142;
    operator delete(v142);
  }
  a1[18] = off_24CA00960;
  v143 = (void *)a1[33];
  if (v143)
  {
    a1[34] = v143;
    operator delete(v143);
  }
  v144 = (void *)a1[29];
  if (v144)
  {
    a1[30] = v144;
    operator delete(v144);
  }
  a1[18] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 23));
  v145 = (void *)a1[20];
  if (v145)
  {
    a1[21] = v145;
    operator delete(v145);
  }
  *a1 = off_24CA00960;
  v146 = (void *)a1[15];
  if (v146)
  {
    a1[16] = v146;
    operator delete(v146);
  }
  v147 = (void *)a1[11];
  if (v147)
  {
    a1[12] = v147;
    operator delete(v147);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v148 = (void *)a1[2];
  if (v148)
  {
    a1[3] = v148;
    operator delete(v148);
  }
  return a1;
}

void sub_20F4FD21C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA01568;
  sub_20F58A570(a1 + 971);
  v2 = (_QWORD *)a1[970];
  if (v2 == a1 + 967)
  {
    v3 = 4;
    v2 = a1 + 967;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_20F4FD380((uint64_t)(a1 + 945));
  sub_20F4FC554(a1 + 14);
  v4 = a1[4];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F4FD2E4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v10[6];
  _QWORD v11[7];
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 9088);
  v3 = *(_QWORD *)(a1 + 9096);
  __asm { FMOV            V1.2D, #1.0 }
  v10[0] = _Q1;
  v10[1] = _Q1;
  v10[2] = _Q1;
  v10[3] = _Q1;
  v10[4] = _Q1;
  v10[5] = _Q1;
  v16 = 0;
  v15 = v3;
  v14 = 0;
  v12 = 0;
  v13 = a2;
  v11[0] = v2;
  v11[1] = &v12;
  v11[2] = v10;
  v11[3] = &v13;
  v11[4] = &v14;
  v11[5] = &v16;
  v11[6] = &v15;
  return sub_20F4FD410(v11);
}

uint64_t sub_20F4FD354(uint64_t a1)
{
  return **(_QWORD **)(a1 + 9088);
}

uint64_t sub_20F4FD360(uint64_t a1)
{
  return **(_QWORD **)(a1 + 9088);
}

uint64_t sub_20F4FD36C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 9088) + 8);
}

uint64_t sub_20F4FD380(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

#error "20F4FD410: too big function (funcsize=0)"

void sub_20F5558BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F5558D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F5558E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F5558F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F55590C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F555920(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F555934(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F555948(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F55595C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F555970(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F555988(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v2 = (void *)a1[3];
  v3 = a1[4] - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 8 * (((unint64_t)v3 >> 3) - ((unint64_t)v3 > 7)) + 8);
  v4 = (void *)a1[6];
  v5 = a1[7] - (_QWORD)v4;
  if (v5 >= 1)
    bzero(v4, 8 * (((unint64_t)v5 >> 3) - ((unint64_t)v5 > 7)) + 8);
  v6 = (void *)a1[9];
  v7 = a1[10] - (_QWORD)v6;
  if (v7 >= 1)
    bzero(v6, 8 * (((unint64_t)v7 >> 3) - ((unint64_t)v7 > 7)) + 8);
  v8 = (void *)a1[12];
  v9 = a1[13] - (_QWORD)v8;
  if (v9 >= 1)
    bzero(v8, 8 * (((unint64_t)v9 >> 3) - ((unint64_t)v9 > 7)) + 8);
  v10 = (void *)a1[15];
  v11 = a1[16] - (_QWORD)v10;
  if (v11 >= 1)
    bzero(v10, 8 * (((unint64_t)v11 >> 3) - ((unint64_t)v11 > 7)) + 8);
  v12 = (void *)a1[18];
  v13 = a1[19] - (_QWORD)v12;
  if (v13 >= 1)
    bzero(v12, 8 * (((unint64_t)v13 >> 3) - ((unint64_t)v13 > 7)) + 8);
  v14 = (void *)a1[21];
  v15 = a1[22] - (_QWORD)v14;
  if (v15 >= 1)
    bzero(v14, 8 * (((unint64_t)v15 >> 3) - ((unint64_t)v15 > 7)) + 8);
}

_QWORD *sub_20F555AE4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *a1 = a2;
  a1[1] = a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v6 = a2[942] - a2[941];
  if ((v6 >> 2))
    sub_20F555C14((void **)a3, (v6 >> 2));
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a3 + 24);
  v7 = a2[945] - a2[944];
  if ((v7 >> 2))
    sub_20F555D84((void **)(a3 + 24), (v7 >> 2));
  *(_QWORD *)(a3 + 56) = *(_QWORD *)(a3 + 48);
  v8 = a2[948] - a2[947];
  if ((v8 >> 2))
    sub_20F555F40((uint64_t *)(a3 + 48), (v8 >> 2));
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(a3 + 72);
  v9 = a2[951] - a2[950];
  if ((v9 >> 2))
    sub_20F555C14((void **)(a3 + 72), (v9 >> 2));
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(a3 + 96);
  v10 = a2[954] - a2[953];
  if ((v10 >> 2))
    sub_20F5560DC((uint64_t *)(a3 + 96), (v10 >> 2));
  *(_QWORD *)(a3 + 128) = *(_QWORD *)(a3 + 120);
  v11 = a2[957] - a2[956];
  if ((v11 >> 2))
    sub_20F5560DC((uint64_t *)(a3 + 120), (v11 >> 2));
  v13 = *(_QWORD *)(a3 + 144);
  v12 = a3 + 144;
  *(_QWORD *)(v12 + 8) = v13;
  v14 = a2[960] - a2[959];
  if ((v14 >> 2))
    sub_20F11D1A8((void **)v12, (v14 >> 2));
  return a1;
}

void sub_20F555C14(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    a1[1] = &v5[48 * (48 * a2 / 0x30)];
  }
  else
  {
    v6 = (char *)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[48 * v7];
    v13 = &v12[48 * (48 * a2 / 0x30)];
    if (v5 != v6)
    {
      do
      {
        v14 = *((_OWORD *)v5 - 3);
        v15 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[48 * v10];
    if (v5)
      operator delete(v5);
  }
}

void sub_20F555D84(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) >= a2)
  {
    a1[1] = &v5[72 * (72 * a2 / 0x48)];
  }
  else
  {
    v6 = (char *)*a1;
    v7 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL)
      sub_20E867F44();
    v9 = 0x8E38E38E38E38E39 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL)
        sub_20E877A38();
      v11 = (char *)operator new(72 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[72 * v7];
    v13 = &v12[72 * (72 * a2 / 0x48)];
    if (v5 != v6)
    {
      do
      {
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v5 - 72);
        v14 = *(_OWORD *)(v5 - 56);
        v15 = *(_OWORD *)(v5 - 40);
        v16 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        *(_OWORD *)(v12 - 40) = v15;
        *(_OWORD *)(v12 - 56) = v14;
        v12 -= 72;
        v5 -= 72;
      }
      while (v5 != v6);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[72 * v10];
    if (v5)
      operator delete(v5);
  }
}

void sub_20F555F40(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    a1[1] = (uint64_t)&v5[8 * a2];
    return;
  }
  v6 = (_BYTE *)*a1;
  v7 = (uint64_t)&v5[-*a1];
  v8 = v7 >> 3;
  v9 = (v7 >> 3) + a2;
  if (v9 >> 61)
    sub_20E867F44();
  v10 = v4 - (_QWORD)v6;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 61)
      sub_20E877A38();
    v12 = operator new(8 * v11);
    v13 = (uint64_t)&v12[8 * v8];
    v14 = &v12[8 * v11];
    v15 = v13 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v13;
      a1[1] = v15;
      a1[2] = (uint64_t)v14;
      if (!v5)
        return;
LABEL_22:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = 0;
    v13 = 8 * v8;
    v14 = 0;
    v15 = 8 * v8 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
      goto LABEL_11;
  }
  v17 = (unint64_t)(v16 - 8);
  if (v17 < 0x58)
    goto LABEL_27;
  if ((unint64_t)(v5 - &v12[v7]) < 0x20)
    goto LABEL_27;
  v18 = (v17 >> 3) + 1;
  v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
  v20 = &v5[-v19];
  v13 -= v19;
  v21 = &v12[8 * v8 - 16];
  v22 = v5 - 16;
  v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *(v21 - 1) = *((_OWORD *)v22 - 1);
    *v21 = v24;
    v21 -= 2;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  v5 = v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_27:
    do
    {
      v25 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *(_QWORD *)(v13 - 8) = v25;
      v13 -= 8;
    }
    while (v5 != v6);
  }
  v5 = (char *)*a1;
  *a1 = v13;
  a1[1] = v15;
  a1[2] = (uint64_t)v14;
  if (v5)
    goto LABEL_22;
}

void sub_20F5560DC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    a1[1] = (uint64_t)&v5[32 * a2];
    return;
  }
  v6 = (char *)*a1;
  v7 = (uint64_t)&v5[-*a1] >> 5;
  v8 = v7 + a2;
  if ((v7 + a2) >> 59)
    sub_20E867F44();
  v9 = v4 - (_QWORD)v6;
  if (v9 >> 4 > v8)
    v8 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 >> 59)
      sub_20E877A38();
    v11 = (char *)operator new(32 * v10);
    v12 = (uint64_t)&v11[32 * v7];
    v13 = &v11[32 * v10];
    v14 = v12 + 32 * a2;
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v12;
      a1[1] = v14;
      a1[2] = (uint64_t)v13;
      if (!v5)
        return;
LABEL_17:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = 32 * v7;
    v13 = 0;
    v14 = 32 * v7 + 32 * a2;
    if (v5 == v6)
      goto LABEL_11;
  }
  do
  {
    v15 = *((_OWORD *)v5 - 1);
    *(_OWORD *)(v12 - 32) = *((_OWORD *)v5 - 2);
    *(_OWORD *)(v12 - 16) = v15;
    v12 -= 32;
    v5 -= 32;
  }
  while (v5 != v6);
  v5 = (char *)*a1;
  *a1 = v12;
  a1[1] = v14;
  a1[2] = (uint64_t)v13;
  if (v5)
    goto LABEL_17;
}

BOOL sub_20F556208(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(*a1 + 20) && *(_DWORD *)*a1 == -1)
    return 0;
  v1 = a1[1];
  if (*(_BYTE *)(v1 + 20))
  {
    if (*(_DWORD *)v1 == -1)
      return 0;
  }
  v2 = a1[2];
  if (*(_BYTE *)(v2 + 20))
  {
    if (*(_DWORD *)v2 == -1)
      return 0;
  }
  v3 = a1[3];
  if (*(_BYTE *)(v3 + 20))
  {
    if (*(_DWORD *)v3 == -1)
      return 0;
  }
  v4 = a1[4];
  if (*(_BYTE *)(v4 + 20))
  {
    if (*(_DWORD *)v4 == -1)
      return 0;
  }
  v5 = a1[5];
  if (*(_BYTE *)(v5 + 20))
  {
    if (*(_DWORD *)v5 == -1)
      return 0;
  }
  v6 = a1[6];
  if (*(_BYTE *)(v6 + 20))
  {
    if (*(_DWORD *)v6 == -1)
      return 0;
  }
  v7 = a1[7];
  if (*(_BYTE *)(v7 + 20))
  {
    if (*(_DWORD *)v7 == -1)
      return 0;
  }
  v8 = a1[8];
  if (*(_BYTE *)(v8 + 20))
  {
    if (*(_DWORD *)v8 == -1)
      return 0;
  }
  v9 = a1[9];
  if (*(_BYTE *)(v9 + 20))
  {
    if (*(_DWORD *)v9 == -1)
      return 0;
  }
  v10 = a1[10];
  return !*(_BYTE *)(v10 + 20) || *(_DWORD *)v10 != -1;
}

_QWORD *sub_20F556324(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  int v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = (unsigned int *)*result;
  v4 = *(unsigned __int8 *)(*result + 20);
  *(_BYTE *)a3 = v4;
  if (v4)
  {
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2[9] + 4 * *v3);
    v5 = (unsigned int *)result[1];
    v6 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a3 + 4) = -1;
    v5 = (unsigned int *)result[1];
    v23 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v23;
    if (v23)
    {
LABEL_3:
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2[9] + 4 * *v5);
      v7 = (unsigned int *)result[2];
      v8 = *((unsigned __int8 *)v7 + 20);
      *(_BYTE *)(a3 + 16) = v8;
      if (v8)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  *(_DWORD *)(a3 + 12) = -1;
  v7 = (unsigned int *)result[2];
  v24 = *((unsigned __int8 *)v7 + 20);
  *(_BYTE *)(a3 + 16) = v24;
  if (v24)
  {
LABEL_4:
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(*a2 + 4 * *v7);
    v9 = (unsigned int *)result[3];
    v10 = *((unsigned __int8 *)v9 + 20);
    *(_BYTE *)(a3 + 24) = v10;
    if (v10)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)(a3 + 20) = -1;
  v9 = (unsigned int *)result[3];
  v25 = *((unsigned __int8 *)v9 + 20);
  *(_BYTE *)(a3 + 24) = v25;
  if (v25)
  {
LABEL_5:
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(*a2 + 4 * *v9);
    v11 = (unsigned int *)result[4];
    v12 = *((unsigned __int8 *)v11 + 20);
    *(_BYTE *)(a3 + 32) = v12;
    if (v12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_DWORD *)(a3 + 28) = -1;
  v11 = (unsigned int *)result[4];
  v26 = *((unsigned __int8 *)v11 + 20);
  *(_BYTE *)(a3 + 32) = v26;
  if (v26)
  {
LABEL_6:
    *(_DWORD *)(a3 + 36) = *(_DWORD *)(a2[12] + 4 * *v11);
    v13 = (unsigned int *)result[5];
    v14 = *((unsigned __int8 *)v13 + 20);
    *(_BYTE *)(a3 + 40) = v14;
    if (v14)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(a3 + 36) = -1;
  v13 = (unsigned int *)result[5];
  v27 = *((unsigned __int8 *)v13 + 20);
  *(_BYTE *)(a3 + 40) = v27;
  if (v27)
  {
LABEL_7:
    *(_DWORD *)(a3 + 44) = *(_DWORD *)(a2[12] + 4 * *v13);
    v15 = (unsigned int *)result[6];
    v16 = *((unsigned __int8 *)v15 + 20);
    *(_BYTE *)(a3 + 48) = v16;
    if (v16)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_DWORD *)(a3 + 44) = -1;
  v15 = (unsigned int *)result[6];
  v28 = *((unsigned __int8 *)v15 + 20);
  *(_BYTE *)(a3 + 48) = v28;
  if (v28)
  {
LABEL_8:
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(a2[15] + 4 * *v15);
    v17 = (unsigned int *)result[7];
    v18 = *((unsigned __int8 *)v17 + 20);
    *(_BYTE *)(a3 + 56) = v18;
    if (v18)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_DWORD *)(a3 + 52) = -1;
  v17 = (unsigned int *)result[7];
  v29 = *((unsigned __int8 *)v17 + 20);
  *(_BYTE *)(a3 + 56) = v29;
  if (v29)
  {
LABEL_9:
    *(_DWORD *)(a3 + 60) = *(_DWORD *)(a2[15] + 4 * *v17);
    v19 = (unsigned int *)result[8];
    v20 = *((unsigned __int8 *)v19 + 20);
    *(_BYTE *)(a3 + 64) = v20;
    if (v20)
      goto LABEL_10;
LABEL_20:
    *(_DWORD *)(a3 + 68) = -1;
    v21 = (unsigned int *)result[9];
    v31 = *((unsigned __int8 *)v21 + 20);
    *(_BYTE *)(a3 + 72) = v31;
    if (v31)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_19:
  *(_DWORD *)(a3 + 60) = -1;
  v19 = (unsigned int *)result[8];
  v30 = *((unsigned __int8 *)v19 + 20);
  *(_BYTE *)(a3 + 64) = v30;
  if (!v30)
    goto LABEL_20;
LABEL_10:
  *(_DWORD *)(a3 + 68) = *(_DWORD *)(a2[18] + 4 * *v19);
  v21 = (unsigned int *)result[9];
  v22 = *((unsigned __int8 *)v21 + 20);
  *(_BYTE *)(a3 + 72) = v22;
  if (v22)
  {
LABEL_11:
    *(_DWORD *)(a3 + 76) = *(_DWORD *)(a2[18] + 4 * *v21);
    *(_BYTE *)(a3 + 80) = *(_BYTE *)(result[10] + 20);
    *(_DWORD *)(a3 + 84) = -1;
    return result;
  }
LABEL_21:
  *(_DWORD *)(a3 + 76) = -1;
  *(_BYTE *)(a3 + 80) = *(_BYTE *)(result[10] + 20);
  *(_DWORD *)(a3 + 84) = -1;
  return result;
}

BOOL sub_20F556574(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  _OWORD *v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t *v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t *v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v216;
  float64x2_t v217;

  v6 = (_OWORD *)(a1 + 152);
  v7 = sub_20FC7238C(a1, (_QWORD *)(a1 + 48), a1 + 152, (uint64_t)a3);
  *(_BYTE *)(a1 + 176) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 184);
    if (v9)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v10 = *(float64x2_t **)(a1 + 184);
      v11 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v10->f64[0] + 16))(v10);
      switch(v11)
      {
        case 0:
          v12 = v10[1];
          v13 = v10[2];
          goto LABEL_8;
        case 1:
          v14 = a3[1];
          v15 = vmulq_f64(*a3, v10[1]);
          v17 = a3[4];
          v16 = a3[5];
          v19 = a3[2];
          v18 = a3[3];
          *a3 = v15;
          v20 = vmulq_f64(v14, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          v21 = vmulq_f64(v19, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          v22 = vmulq_f64(v18, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          v23 = vmulq_f64(v17, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          a3[4] = v23;
          v24 = vmulq_f64(v16, v10[1]);
          a3[2] = v21;
          a3[3] = v22;
          *a3 = v15;
          a3[1] = v20;
          a3[4] = v23;
          a3[5] = v24;
          break;
        case 2:
          v25 = v10[1].f64[0];
          v26 = vmulq_n_f64(a3[5], v25);
          v27 = vmulq_n_f64(a3[4], v25);
          v28 = vmulq_n_f64(a3[3], v25);
          v29 = vmulq_n_f64(a3[2], v25);
          v30 = vmulq_n_f64(a3[1], v25);
          *a3 = vmulq_n_f64(*a3, v25);
          a3[1] = v30;
          a3[2] = v29;
          a3[3] = v28;
          a3[4] = v27;
          a3[5] = v26;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v12 = v216;
          v13 = v217;
LABEL_8:
          v31 = a3[5];
          v32 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[1].f64[0]), v13, a3[1], 1);
          v33 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[2].f64[0]), v13, a3[2], 1);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[3].f64[0]), v13, a3[3], 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[4].f64[0]), v13, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3->f64[0]), v13, *a3, 1);
          a3[1] = v32;
          a3[2] = v33;
          a3[3] = v34;
          a3[4] = v35;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v12, v31.f64[0]), v13, v31, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v36 = v10[1];
          v37 = v10[2];
          goto LABEL_14;
        case 1:
          v38 = a3[7];
          v39 = vmulq_f64(a3[6], v10[1]);
          v41 = a3[10];
          v40 = a3[11];
          v43 = a3[8];
          v42 = a3[9];
          a3[6] = v39;
          v44 = vmulq_f64(v38, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          v45 = vmulq_f64(v43, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          v46 = vmulq_f64(v42, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          v47 = vmulq_f64(v41, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          a3[10] = v47;
          v48 = vmulq_f64(v40, v10[1]);
          a3[8] = v45;
          a3[9] = v46;
          a3[6] = v39;
          a3[7] = v44;
          a3[10] = v47;
          a3[11] = v48;
          break;
        case 2:
          v49 = v10[1].f64[0];
          v50 = vmulq_n_f64(a3[11], v49);
          v51 = vmulq_n_f64(a3[10], v49);
          v52 = vmulq_n_f64(a3[9], v49);
          v53 = vmulq_n_f64(a3[8], v49);
          v54 = vmulq_n_f64(a3[7], v49);
          a3[6] = vmulq_n_f64(a3[6], v49);
          a3[7] = v54;
          a3[8] = v53;
          a3[9] = v52;
          a3[10] = v51;
          a3[11] = v50;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v36 = v216;
          v37 = v217;
LABEL_14:
          v55 = a3[11];
          v56 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[7].f64[0]), v37, a3[7], 1);
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[8].f64[0]), v37, a3[8], 1);
          v58 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[9].f64[0]), v37, a3[9], 1);
          v59 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[10].f64[0]), v37, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[6].f64[0]), v37, a3[6], 1);
          a3[7] = v56;
          a3[8] = v57;
          a3[9] = v58;
          a3[10] = v59;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v36, v55.f64[0]), v37, v55, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v60 = v10[1];
          v61 = v10[2];
          goto LABEL_20;
        case 1:
          v62 = a3[13];
          v63 = vmulq_f64(a3[12], v10[1]);
          v65 = a3[16];
          v64 = a3[17];
          v67 = a3[14];
          v66 = a3[15];
          a3[12] = v63;
          v68 = vmulq_f64(v62, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          v69 = vmulq_f64(v67, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          v70 = vmulq_f64(v66, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          v71 = vmulq_f64(v65, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          a3[16] = v71;
          v72 = vmulq_f64(v64, v10[1]);
          a3[14] = v69;
          a3[15] = v70;
          a3[12] = v63;
          a3[13] = v68;
          a3[16] = v71;
          a3[17] = v72;
          break;
        case 2:
          v73 = v10[1].f64[0];
          v74 = vmulq_n_f64(a3[17], v73);
          v75 = vmulq_n_f64(a3[16], v73);
          v76 = vmulq_n_f64(a3[15], v73);
          v77 = vmulq_n_f64(a3[14], v73);
          v78 = vmulq_n_f64(a3[13], v73);
          a3[12] = vmulq_n_f64(a3[12], v73);
          a3[13] = v78;
          a3[14] = v77;
          a3[15] = v76;
          a3[16] = v75;
          a3[17] = v74;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v60 = v216;
          v61 = v217;
LABEL_20:
          v79 = a3[17];
          v80 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[13].f64[0]), v61, a3[13], 1);
          v81 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[14].f64[0]), v61, a3[14], 1);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[15].f64[0]), v61, a3[15], 1);
          v83 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[16].f64[0]), v61, a3[16], 1);
          a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[12].f64[0]), v61, a3[12], 1);
          a3[13] = v80;
          a3[14] = v81;
          a3[15] = v82;
          a3[16] = v83;
          a3[17] = vmlaq_laneq_f64(vmulq_n_f64(v60, v79.f64[0]), v61, v79, 1);
          break;
        default:
          break;
      }
      v84 = a3 + 18;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        switch(v11)
        {
          case 0:
            v85 = v10[1];
            v86 = v10[2];
            goto LABEL_27;
          case 1:
            v87 = a3[19];
            v88 = vmulq_f64(*v84, v10[1]);
            v90 = a3[22];
            v89 = a3[23];
            v92 = a3[20];
            v91 = a3[21];
            *v84 = v88;
            v93 = vmulq_f64(v87, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            v94 = vmulq_f64(v92, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            v95 = vmulq_f64(v91, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            v96 = vmulq_f64(v90, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            a3[22] = v96;
            v97 = vmulq_f64(v89, v10[1]);
            a3[20] = v94;
            a3[21] = v95;
            *v84 = v88;
            a3[19] = v93;
            a3[22] = v96;
            a3[23] = v97;
            break;
          case 2:
            v98 = v10[1].f64[0];
            v99 = vmulq_n_f64(a3[23], v98);
            v100 = vmulq_n_f64(a3[22], v98);
            v101 = vmulq_n_f64(a3[21], v98);
            v102 = vmulq_n_f64(a3[20], v98);
            v103 = vmulq_n_f64(a3[19], v98);
            *v84 = vmulq_n_f64(*v84, v98);
            a3[19] = v103;
            a3[20] = v102;
            a3[21] = v101;
            a3[22] = v100;
            a3[23] = v99;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v85 = v216;
            v86 = v217;
LABEL_27:
            v104 = a3[23];
            v105 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[19].f64[0]), v86, a3[19], 1);
            v106 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[20].f64[0]), v86, a3[20], 1);
            v107 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[21].f64[0]), v86, a3[21], 1);
            v108 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[22].f64[0]), v86, a3[22], 1);
            a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[18].f64[0]), v86, a3[18], 1);
            a3[19] = v105;
            a3[20] = v106;
            a3[21] = v107;
            a3[22] = v108;
            a3[23] = vmlaq_laneq_f64(vmulq_n_f64(v85, v104.f64[0]), v86, v104, 1);
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v11)
        {
          case 0:
            v109 = v10[1];
            v110 = v10[2];
            goto LABEL_34;
          case 1:
            v111 = a3[25];
            v112 = vmulq_f64(a3[24], v10[1]);
            v114 = a3[26];
            v113 = a3[27];
            a3[24] = v112;
            v115 = vmulq_f64(v111, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            v116 = vmulq_f64(v114, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            v117 = vmulq_f64(v113, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            a3[27] = v117;
            break;
          case 2:
            v118 = v10[1].f64[0];
            v119 = vmulq_n_f64(a3[25], v118);
            v120 = vmulq_n_f64(a3[24], v118);
            v121 = vmulq_n_f64(a3[27], v118);
            a3[26] = vmulq_n_f64(a3[26], v118);
            a3[27] = v121;
            a3[24] = v120;
            a3[25] = v119;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v109 = v216;
            v110 = v217;
LABEL_34:
            v122 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[24].f64[0]), v110, a3[24], 1);
            v123 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[25].f64[0]), v110, a3[25], 1);
            v124 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[26].f64[0]), v110, a3[26], 1);
            v125 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[27].f64[0]), v110, a3[27], 1);
            a3[24] = v122;
            a3[25] = v123;
            a3[26] = v124;
            a3[27] = v125;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v11)
        {
          case 0:
            v126 = v10[1];
            v127 = v10[2];
            goto LABEL_41;
          case 1:
            v128 = a3[29];
            v129 = vmulq_f64(a3[28], v10[1]);
            v131 = a3[30];
            v130 = a3[31];
            a3[28] = v129;
            v132 = vmulq_f64(v128, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            v133 = vmulq_f64(v131, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            v134 = vmulq_f64(v130, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            a3[31] = v134;
            break;
          case 2:
            v135 = v10[1].f64[0];
            v136 = vmulq_n_f64(a3[29], v135);
            v137 = vmulq_n_f64(a3[28], v135);
            v138 = vmulq_n_f64(a3[31], v135);
            a3[30] = vmulq_n_f64(a3[30], v135);
            a3[31] = v138;
            a3[28] = v137;
            a3[29] = v136;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v126 = v216;
            v127 = v217;
LABEL_41:
            v139 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[28].f64[0]), v127, a3[28], 1);
            v140 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[29].f64[0]), v127, a3[29], 1);
            v141 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[30].f64[0]), v127, a3[30], 1);
            v142 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[31].f64[0]), v127, a3[31], 1);
            a3[28] = v139;
            a3[29] = v140;
            a3[30] = v141;
            a3[31] = v142;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v11)
        {
          case 0:
            v143 = v10[1];
            v144 = v10[2];
            goto LABEL_48;
          case 1:
            v145 = a3[33];
            v146 = vmulq_f64(a3[32], v10[1]);
            v148 = a3[34];
            v147 = a3[35];
            a3[32] = v146;
            v149 = vmulq_f64(v145, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            v150 = vmulq_f64(v148, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            v151 = vmulq_f64(v147, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            a3[35] = v151;
            break;
          case 2:
            v152 = v10[1].f64[0];
            v153 = vmulq_n_f64(a3[33], v152);
            v154 = vmulq_n_f64(a3[32], v152);
            v155 = vmulq_n_f64(a3[35], v152);
            a3[34] = vmulq_n_f64(a3[34], v152);
            a3[35] = v155;
            a3[32] = v154;
            a3[33] = v153;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v143 = v216;
            v144 = v217;
LABEL_48:
            v156 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[32].f64[0]), v144, a3[32], 1);
            v157 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[33].f64[0]), v144, a3[33], 1);
            v158 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[34].f64[0]), v144, a3[34], 1);
            v159 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[35].f64[0]), v144, a3[35], 1);
            a3[32] = v156;
            a3[33] = v157;
            a3[34] = v158;
            a3[35] = v159;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        switch(v11)
        {
          case 0:
            v160 = v10[1];
            v161 = v10[2];
            goto LABEL_55;
          case 1:
            v162 = a3[37];
            v163 = vmulq_f64(a3[36], v10[1]);
            v165 = a3[38];
            v164 = a3[39];
            a3[36] = v163;
            v166 = vmulq_f64(v162, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            v167 = vmulq_f64(v165, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            v168 = vmulq_f64(v164, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            a3[39] = v168;
            break;
          case 2:
            v169 = v10[1].f64[0];
            v170 = vmulq_n_f64(a3[37], v169);
            v171 = vmulq_n_f64(a3[36], v169);
            v172 = vmulq_n_f64(a3[39], v169);
            a3[38] = vmulq_n_f64(a3[38], v169);
            a3[39] = v172;
            a3[36] = v171;
            a3[37] = v170;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v160 = v216;
            v161 = v217;
LABEL_55:
            v173 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[36].f64[0]), v161, a3[36], 1);
            v174 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[37].f64[0]), v161, a3[37], 1);
            v175 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[38].f64[0]), v161, a3[38], 1);
            v176 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[39].f64[0]), v161, a3[39], 1);
            a3[36] = v173;
            a3[37] = v174;
            a3[38] = v175;
            a3[39] = v176;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        v177 = a3 + 40;
        switch(v11)
        {
          case 0:
            v178 = v10[1];
            v179 = v10[2];
            goto LABEL_62;
          case 1:
            v180 = a3[41];
            v181 = vmulq_f64(*v177, v10[1]);
            v182 = a3[42];
            *v177 = v181;
            v183 = vmulq_f64(v180, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            v184 = vmulq_f64(v182, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            a3[42] = v184;
            break;
          case 2:
            v185 = v10[1].f64[0];
            v186 = vmulq_n_f64(a3[42], v185);
            v187 = vmulq_n_f64(a3[41], v185);
            *v177 = vmulq_n_f64(*v177, v185);
            a3[41] = v187;
            a3[42] = v186;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v178 = v216;
            v179 = v217;
LABEL_62:
            v188 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[40].f64[0]), v179, a3[40], 1);
            v189 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[41].f64[0]), v179, a3[41], 1);
            v190 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[42].f64[0]), v179, a3[42], 1);
            a3[40] = v188;
            a3[41] = v189;
            a3[42] = v190;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        v191 = a3 + 43;
        switch(v11)
        {
          case 0:
            v192 = v10[1];
            v193 = v10[2];
            goto LABEL_69;
          case 1:
            v194 = a3[44];
            v195 = vmulq_f64(*v191, v10[1]);
            v196 = a3[45];
            *v191 = v195;
            v197 = vmulq_f64(v194, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            v198 = vmulq_f64(v196, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            a3[45] = v198;
            break;
          case 2:
            v199 = v10[1].f64[0];
            v200 = vmulq_n_f64(a3[45], v199);
            v201 = vmulq_n_f64(a3[44], v199);
            *v191 = vmulq_n_f64(*v191, v199);
            a3[44] = v201;
            a3[45] = v200;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v192 = v216;
            v193 = v217;
LABEL_69:
            v202 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[43].f64[0]), v193, a3[43], 1);
            v203 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[44].f64[0]), v193, a3[44], 1);
            v204 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[45].f64[0]), v193, a3[45], 1);
            a3[43] = v202;
            a3[44] = v203;
            a3[45] = v204;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch(v11)
        {
          case 0:
            v205 = v10[1];
            v206 = v10[2];
            goto LABEL_76;
          case 1:
            v207 = vmulq_f64(a3[46], v10[1]);
            goto LABEL_77;
          case 2:
            v207 = vmulq_n_f64(a3[46], v10[1].f64[0]);
            goto LABEL_77;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v205 = v216;
            v206 = v217;
LABEL_76:
            v207 = vmlaq_laneq_f64(vmulq_n_f64(v205, a3[46].f64[0]), v206, a3[46], 1);
LABEL_77:
            a3[46] = v207;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 136) = *v6;
    _Q0 = *(_OWORD *)(a1 + 152);
    _D2 = *(_QWORD *)(a1 + 160);
    __asm { FMLA            D1, D2, V0.D[1] }
    v8 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 168) = v8;
  return v7;
}

uint64_t sub_20F5570F0(uint64_t result, unsigned __int8 *a2, float64x2_t *a3, float64x2_t a4, double a5, float64x2_t a6, double a7, float64x2_t a8, double a9, float64x2_t a10)
{
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  const double *f64;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  float64x2_t v67;
  float64x2_t v69;
  float64x2_t v71;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  unsigned int v80;
  uint64_t v81;
  const double *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v95;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  const double *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  const double *v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  const double *v128;
  float64x2_t v129;
  float64x2_t v130;
  const double *v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  const double *v191;
  float64x2_t v192;
  float64x2_t v193;
  const double *v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  int v255;
  unsigned int v256;
  uint64_t v257;
  const double *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  const double *v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  const double *v283;
  float64x2_t v284;
  float64x2_t v285;
  const double *v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  int v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  const double *v384;
  float64x2_t v385;
  float64x2_t v386;
  const double *v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  int v401;
  unsigned int v402;
  uint64_t v403;
  unsigned int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  unsigned int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  uint64_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  unsigned int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  uint64_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  int v486;
  const double *v487;
  unsigned int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  char *v494;
  uint64_t v495;
  const double *v496;
  const double *v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  const double *v533;
  unsigned int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  char *v540;
  uint64_t v541;
  const double *v542;
  const double *v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  unsigned int v580;
  uint64_t v581;
  const double *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  uint64_t v588;
  const double *v589;
  const double *v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  char *v631;
  uint64_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  const double *v681;
  const double *v682;
  const double *v683;
  int v684;
  unsigned int v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  char *v691;
  uint64_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  unsigned int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  char *v722;
  uint64_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  unsigned int v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  char *v753;
  uint64_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  unsigned int v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  char *v784;
  uint64_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  unsigned int v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  char *v815;
  uint64_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  unsigned int v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  char *v838;
  uint64_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  int v854;
  const double *v855;
  unsigned int v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  char *v862;
  uint64_t v863;
  const double *v864;
  const double *v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  const double *v901;
  unsigned int v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  char *v908;
  uint64_t v909;
  const double *v910;
  const double *v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  char *v953;
  uint64_t v954;
  const double *v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  const double *v1004;
  const double *v1005;
  int v1006;
  unsigned int v1007;
  uint64_t v1008;
  unsigned int v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  char *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  char *v1021;
  uint64_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  unsigned int v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  char *v1052;
  uint64_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  unsigned int v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  char *v1083;
  uint64_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  unsigned int v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  char *v1114;
  uint64_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  unsigned int v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  char *v1145;
  uint64_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  unsigned int v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  char *v1168;
  uint64_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  int v1184;
  unsigned int v1185;
  uint64_t v1186;
  const double *v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  char *v1192;
  uint64_t v1193;
  const double *v1194;
  const double *v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  char *v1235;
  uint64_t v1236;
  const double *v1237;
  float64x2_t v1238;
  const double *v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  const double *v1287;
  int v1288;
  unsigned int v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  char *v1295;
  uint64_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  unsigned int v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  char *v1326;
  uint64_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  float64x2_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  unsigned int v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  char *v1357;
  uint64_t v1358;
  float64x2_t v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t v1366;
  float64x2_t v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  float64x2_t v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  float64x2_t v1375;
  float64x2_t v1376;
  float64x2_t v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  float64x2_t v1380;
  float64x2_t v1381;
  unsigned int v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  char *v1388;
  uint64_t v1389;
  float64x2_t v1390;
  float64x2_t v1391;
  float64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  float64x2_t v1395;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  float64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  unsigned int v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  char *v1419;
  uint64_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  float64x2_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  float64x2_t v1430;
  float64x2_t v1431;
  float64x2_t v1432;
  float64x2_t v1433;
  float64x2_t v1434;
  float64x2_t v1435;
  unsigned int v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  char *v1442;
  uint64_t v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  float64x2_t v1448;
  float64x2_t v1449;
  float64x2_t v1450;
  float64x2_t v1451;
  float64x2_t v1452;
  float64x2_t v1453;
  float64x2_t v1454;
  float64x2_t v1455;
  float64x2_t v1456;
  float64x2_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  char *v1463;
  uint64_t v1464;
  float64x2_t v1465;
  const double *v1466;
  float64x2_t v1467;
  float64x2_t v1468;
  const double *v1469;
  float64x2_t v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  float64x2_t v1473;
  float64x2_t v1474;
  float64x2_t v1475;
  float64x2_t v1476;
  float64x2_t v1477;
  float64x2_t v1478;
  float64x2_t v1479;
  float64x2_t v1480;
  float64x2_t v1481;
  float64x2_t v1482;
  float64x2_t v1483;
  float64x2_t v1484;
  float64x2_t v1485;
  float64x2_t v1486;
  float64x2_t v1487;
  float64x2_t v1488;
  float64x2_t v1489;
  float64x2_t v1490;
  float64x2_t v1491;
  float64x2_t v1492;
  float64x2_t v1493;
  float64x2_t v1494;
  float64x2_t v1495;
  float64x2_t v1496;
  float64x2_t v1497;
  float64x2_t v1498;
  float64x2_t v1499;
  float64x2_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  float64x2_t v1504;
  float64x2_t v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  uint64_t v1513;
  int v1514;
  unsigned int v1515;
  uint64_t v1516;
  unsigned int v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  char *v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  char *v1529;
  uint64_t v1530;
  float64x2_t v1531;
  int64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  unsigned int v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  char *v1555;
  uint64_t v1556;
  float64x2_t v1557;
  int64x2_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  unsigned int v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  char *v1581;
  uint64_t v1582;
  float64x2_t v1583;
  int64x2_t v1584;
  float64x2_t v1585;
  float64x2_t v1586;
  float64x2_t v1587;
  float64x2_t v1588;
  float64x2_t v1589;
  float64x2_t v1590;
  float64x2_t v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1595;
  float64x2_t v1596;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t v1600;
  unsigned int v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  char *v1607;
  uint64_t v1608;
  float64x2_t v1609;
  int64x2_t v1610;
  float64x2_t v1611;
  float64x2_t v1612;
  float64x2_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  float64x2_t v1620;
  float64x2_t v1621;
  float64x2_t v1622;
  float64x2_t v1623;
  float64x2_t v1624;
  float64x2_t v1625;
  float64x2_t v1626;
  unsigned int v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  char *v1633;
  uint64_t v1634;
  int64x2_t v1635;
  float64x2_t v1636;
  float64x2_t v1637;
  float64x2_t v1638;
  float64x2_t v1639;
  float64x2_t v1640;
  float64x2_t v1641;
  float64x2_t v1642;
  float64x2_t v1643;
  float64x2_t v1644;
  float64x2_t v1645;
  float64x2_t v1646;
  float64x2_t v1647;
  float64x2_t v1648;
  unsigned int v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  char *v1655;
  uint64_t v1656;
  float64x2_t v1657;
  int64x2_t v1658;
  float64x2_t v1659;
  float64x2_t v1660;
  float64x2_t v1661;
  float64x2_t v1662;
  float64x2_t v1663;
  float64x2_t v1664;
  float64x2_t v1665;
  float64x2_t v1666;
  float64x2_t v1667;
  float64x2_t v1668;
  float64x2_t v1669;
  float64x2_t v1670;
  float64x2_t v1671;
  float64x2_t v1672;
  float64x2_t v1673;
  float64x2_t v1674;
  float64x2_t v1675;
  float64x2_t v1676;
  float64x2_t v1677;
  float64x2_t v1678;
  float64x2_t v1679;
  float64x2_t v1680;
  float64x2_t v1681;
  float64x2_t v1682;
  float64x2_t v1683;
  float64x2_t v1684;
  float64x2_t v1685;
  float64x2_t v1686;
  float64x2_t v1687;
  float64x2_t v1688;
  float64x2_t v1689;
  float64x2_t v1690;
  float64x2_t v1691;
  float64x2_t v1692;
  float64x2_t v1693;
  float64x2_t v1694;
  float64x2_t v1695;
  float64x2_t v1696;
  float64x2_t v1697;
  float64x2_t v1698;
  float64x2_t v1699;
  float64x2_t v1700;
  float64x2_t v1701;
  float64x2_t v1702;
  float64x2_t v1703;
  float64x2_t v1704;
  float64x2_t v1705;
  float64x2_t v1706;
  float64x2_t v1707;
  float64x2_t v1708;
  float64x2_t v1709;
  float64x2_t v1710;
  float64x2_t v1711;
  float64x2_t v1712;
  float64x2_t v1713;
  float64x2_t v1714;
  float64x2_t v1715;
  float64x2_t v1716;
  float64x2_t v1717;
  float64x2_t v1718;
  float64x2_t v1719;
  float64x2_t v1720;
  float64x2_t v1721;
  float64x2_t v1722;
  float64x2_t v1723;
  float64x2_t v1724;
  float64x2_t v1725;
  float64x2_t v1726;
  float64x2_t v1727;
  float64x2_t v1728;
  float64x2_t v1729;
  float64x2_t v1730;
  float64x2_t v1731;
  float64x2_t v1732;
  float64x2_t v1733;
  float64x2_t v1734;
  float64x2_t v1735;
  float64x2_t v1736;
  float64x2_t v1737;
  float64x2_t v1738;
  float64x2_t v1739;
  float64x2_t v1740;
  float64x2_t v1741;
  float64x2_t v1742;
  float64x2_t v1743;
  float64x2_t v1744;
  float64x2_t v1745;
  float64x2_t v1746;
  float64x2_t v1747;
  float64x2_t v1748;
  float64x2_t v1749;
  float64x2_t v1750;
  float64x2_t v1751;
  float64x2_t v1752;
  float64x2_t v1753;
  float64x2_t v1754;
  float64x2_t v1755;
  float64x2_t v1756;
  float64x2_t v1757;
  float64x2_t v1758;
  float64x2_t v1759;
  float64x2_t v1760;
  float64x2_t v1761;
  float64x2_t v1762;
  float64x2_t v1763;
  float64x2_t v1764;
  float64x2_t v1765;
  float64x2_t v1766;
  float64x2_t v1767;
  float64x2_t v1768;
  float64x2_t v1769;
  uint64_t v1770;
  char *v1771;
  unsigned int v1772;
  float64x2x2_t v1773;
  float64x2x2_t v1774;
  float64x2x2_t v1775;
  float64x2x2_t v1776;
  float64x2x2_t v1777;
  float64x2x2_t v1778;
  float64x2x2_t v1779;
  float64x2x2_t v1780;
  float64x2x2_t v1781;
  float64x2x2_t v1782;
  float64x2x2_t v1783;
  float64x2x2_t v1784;
  float64x2x2_t v1785;
  float64x2x2_t v1786;
  float64x2x2_t v1787;
  float64x2x2_t v1788;
  float64x2x2_t v1789;
  float64x2x2_t v1790;
  float64x2x2_t v1791;
  float64x2x2_t v1792;
  float64x2x2_t v1793;
  float64x2x2_t v1794;
  float64x2x2_t v1795;
  float64x2x2_t v1796;
  float64x2x2_t v1797;
  float64x2x2_t v1798;
  float64x2x2_t v1799;
  float64x2x2_t v1800;
  float64x2x2_t v1801;
  float64x2x2_t v1802;
  float64x2x2_t v1803;
  float64x2x2_t v1804;
  float64x2x2_t v1805;
  float64x2x2_t v1806;
  float64x2x2_t v1807;
  float64x2x2_t v1808;
  float64x2x2_t v1809;
  float64x2x2_t v1810;
  float64x2x2_t v1811;
  float64x2x2_t v1812;
  float64x2x2_t v1813;
  float64x2x2_t v1814;
  float64x2x2_t v1815;
  float64x2x2_t v1816;
  float64x2x2_t v1817;
  float64x2x2_t v1818;
  float64x2x2_t v1819;
  float64x2x2_t v1820;
  float64x2x2_t v1821;
  float64x2x2_t v1822;
  float64x2x2_t v1823;
  float64x2x2_t v1824;
  float64x2x2_t v1825;
  float64x2x2_t v1826;
  float64x2x2_t v1827;
  float64x2x2_t v1828;
  float64x2x2_t v1829;
  float64x2x2_t v1830;
  float64x2x2_t v1831;
  float64x2x2_t v1832;
  float64x2x2_t v1833;
  float64x2x2_t v1834;
  float64x2x2_t v1835;
  float64x2x2_t v1836;
  float64x2x2_t v1837;
  float64x2x2_t v1838;
  float64x2x2_t v1839;
  float64x2x2_t v1840;
  float64x2x2_t v1841;
  float64x2x2_t v1842;
  float64x2x2_t v1843;
  float64x2x2_t v1844;
  float64x2x2_t v1845;
  float64x2x2_t v1846;
  float64x2x2_t v1847;
  float64x2x2_t v1848;
  float64x2x2_t v1849;
  float64x2x2_t v1850;
  float64x2x2_t v1851;
  float64x2x2_t v1852;
  float64x2x2_t v1853;
  float64x2x2_t v1854;
  float64x2x2_t v1855;
  float64x2x2_t v1856;
  float64x2x2_t v1857;
  float64x2x2_t v1858;
  float64x2x2_t v1859;
  float64x2x2_t v1860;
  float64x2x2_t v1861;
  float64x2x2_t v1862;
  float64x2x2_t v1863;
  float64x2x2_t v1864;
  float64x2x2_t v1865;
  float64x2x2_t v1866;
  float64x2x2_t v1867;
  float64x2x2_t v1868;
  float64x2x2_t v1869;
  float64x2x2_t v1870;
  float64x2x2_t v1871;
  float64x2x2_t v1872;
  float64x2x2_t v1873;
  float64x2x2_t v1874;
  float64x2x2_t v1875;
  float64x2x2_t v1876;
  float64x2x2_t v1877;
  float64x2x2_t v1878;
  float64x2x2_t v1879;
  float64x2x2_t v1880;
  float64x2x2_t v1881;
  float64x2x2_t v1882;
  float64x2x2_t v1883;
  float64x2x2_t v1884;
  float64x2x2_t v1885;
  float64x2x2_t v1886;
  float64x2x2_t v1887;
  float64x2x2_t v1888;

  v12 = (uint64_t *)result;
  v13 = *(_QWORD *)result;
  v14 = a2[72];
  if (a2[72])
    _ZF = a2[64] == 0;
  else
    _ZF = 1;
  if (_ZF)
    goto LABEL_17;
  v16 = *((_DWORD *)a2 + 19);
  v17 = *((unsigned int *)a2 + 17);
  if (v17 < v16)
    goto LABEL_19;
  v19 = *(_QWORD *)(v13 + 7080);
  v20 = (*(_DWORD *)(v13 + 7104) * v17);
  v21 = v19 + 16 * v20;
  v1770 = v21;
  v22 = *(_QWORD *)(*(_QWORD *)(v13 + 7112) + 8 * v17);
  v23 = (char *)(v19 + 16 * (v22 + v20));
  v1771 = v23;
  v1772 = v17;
  if (v22)
  {
    v24 = 16 * v22;
    while (*(_DWORD *)v21 < v16)
    {
      v21 += 16;
      v24 -= 16;
      if (!v24)
        goto LABEL_15;
    }
  }
  if ((char *)v21 == v23)
    goto LABEL_15;
  if (*(_DWORD *)v21 != v16)
  {
    v23 = (char *)v21;
LABEL_15:
    result = sub_20F55C71C((unint64_t *)(v13 + 6992), (uint64_t)&v1770, v16, v23);
    goto LABEL_16;
  }
  result = *(_QWORD *)(v13 + 7008) + 8 * *(_QWORD *)(v21 + 8);
LABEL_16:
  a4.f64[0] = *(float64_t *)(result + 16);
  a6.f64[0] = *(float64_t *)(result + 40);
  f64 = a3[43].f64;
  v1800 = vld2q_f64(f64);
  a10.f64[0] = *(float64_t *)(result + 64);
  _Q16 = a3[45];
  _Q17 = a3[40];
  _Q18 = a3[41];
  v28 = a3[42];
  v29 = vmlaq_laneq_f64(vmulq_n_f64(v1800.val[0], _Q17.f64[0]), v1800.val[1], _Q17, 1);
  _Q21 = vmulq_f64(_Q16, _Q17);
  _Q17.f64[0] = a3[40].f64[1];
  __asm { FMLA            D21, D17, V16.D[1] }
  v34 = vmlaq_laneq_f64(vmulq_n_f64(v1800.val[0], _Q18.f64[0]), v1800.val[1], _Q18, 1);
  _Q22 = vmulq_f64(_Q16, _Q18);
  _Q18.f64[0] = a3[41].f64[1];
  __asm { FMLA            D22, D18, V16.D[1] }
  v36 = vmlaq_laneq_f64(vmulq_n_f64(v1800.val[0], v28.f64[0]), v1800.val[1], v28, 1);
  v1800.val[0] = vmulq_f64(_Q16, v28);
  v1800.val[1].f64[0] = a3[42].f64[1];
  __asm { FMLA            D3, D4, V16.D[1] }
  a4 = vaddq_f64(a4, _Q21);
  a6 = vaddq_f64(a6, _Q22);
  a8 = vaddq_f64(*(float64x2_t *)(result + 24), v34);
  v37 = vaddq_f64(*(float64x2_t *)(result + 48), v36);
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v29);
  *(float64_t *)(result + 16) = a4.f64[0];
  *(float64x2_t *)(result + 24) = a8;
  *(float64_t *)(result + 40) = a6.f64[0];
  *(float64x2_t *)(result + 48) = v37;
  *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(a10, v1800.val[0]);
  v13 = *v12;
  v14 = a2[72];
LABEL_17:
  if (!v14)
    goto LABEL_30;
  v16 = *((_DWORD *)a2 + 19);
LABEL_19:
  v38 = *(_QWORD *)(v13 + 7080);
  v39 = *(_DWORD *)(v13 + 7104) * v16;
  v40 = v38 + 16 * v39;
  v1770 = v40;
  v41 = *(_QWORD *)(*(_QWORD *)(v13 + 7112) + 8 * v16);
  v42 = (char *)(v38 + 16 * (v41 + v39));
  v1771 = v42;
  v1772 = v16;
  if (v41)
  {
    v43 = 16 * v41;
    while (*(_DWORD *)v40 < v16)
    {
      v40 += 16;
      v43 -= 16;
      if (!v43)
        goto LABEL_28;
    }
  }
  if ((char *)v40 == v42)
    goto LABEL_28;
  if (*(_DWORD *)v40 != v16)
  {
    v42 = (char *)v40;
LABEL_28:
    result = sub_20F55C71C((unint64_t *)(v13 + 6992), (uint64_t)&v1770, v16, v42);
    goto LABEL_29;
  }
  result = *(_QWORD *)(v13 + 7008) + 8 * *(_QWORD *)(v40 + 8);
LABEL_29:
  a4.f64[0] = *(float64_t *)(result + 16);
  a6.f64[0] = *(float64_t *)(result + 40);
  a8.f64[0] = *(float64_t *)(result + 64);
  _Q6 = a3[43];
  _Q7 = a3[44];
  _Q16 = a3[45];
  v47 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
  _Q19 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
  v49 = vmlaq_laneq_f64(vmulq_n_f64(v47, _Q6.f64[0]), _Q19, _Q6, 1);
  _Q20 = vmulq_f64(_Q16, _Q6);
  _Q6.f64[0] = a3[43].f64[1];
  __asm { FMLA            D20, D6, V16.D[1] }
  v51 = vmlaq_laneq_f64(vmulq_n_f64(v47, _Q7.f64[0]), _Q19, _Q7, 1);
  _Q21 = vmulq_f64(_Q16, _Q7);
  _Q7.f64[0] = a3[44].f64[1];
  __asm { FMLA            D21, D7, V16.D[1] }
  v53 = vmlaq_laneq_f64(vmulq_n_f64(v47, _Q16.f64[0]), _Q19, _Q16, 1);
  _Q17 = vmulq_f64(_Q16, _Q16);
  _Q19.f64[0] = a3[45].f64[1];
  __asm { FMLA            D17, D19, V16.D[1] }
  a4 = vaddq_f64(a4, _Q20);
  a6 = vaddq_f64(a6, _Q21);
  v55 = vaddq_f64(*(float64x2_t *)(result + 24), v51);
  a8 = vaddq_f64(a8, _Q17);
  v56 = vaddq_f64(*(float64x2_t *)(result + 48), v53);
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v49);
  *(float64_t *)(result + 16) = a4.f64[0];
  *(float64x2_t *)(result + 24) = v55;
  *(float64_t *)(result + 40) = a6.f64[0];
  *(float64x2_t *)(result + 48) = v56;
  *(float64_t *)(result + 64) = a8.f64[0];
  v13 = *v12;
LABEL_30:
  if (!a2[64])
    goto LABEL_55;
  v57 = *((unsigned int *)a2 + 17);
  v58 = *(_QWORD *)(v13 + 7080);
  v59 = (*(_DWORD *)(v13 + 7104) * v57);
  v60 = v58 + 16 * v59;
  v1770 = v60;
  v61 = *(_QWORD *)(*(_QWORD *)(v13 + 7112) + 8 * v57);
  v62 = (char *)(v58 + 16 * (v61 + v59));
  v1771 = v62;
  v1772 = v57;
  if (v61)
  {
    v63 = 16 * v61;
    while (*(_DWORD *)v60 < v57)
    {
      v60 += 16;
      v63 -= 16;
      if (!v63)
        goto LABEL_40;
    }
  }
  if ((char *)v60 == v62)
    goto LABEL_40;
  if (*(_DWORD *)v60 != (_DWORD)v57)
  {
    v62 = (char *)v60;
LABEL_40:
    result = sub_20F55C71C((unint64_t *)(v13 + 6992), (uint64_t)&v1770, v57, v62);
    goto LABEL_41;
  }
  result = *(_QWORD *)(v13 + 7008) + 8 * *(_QWORD *)(v60 + 8);
LABEL_41:
  a4.f64[0] = *(float64_t *)(result + 16);
  a6.f64[0] = *(float64_t *)(result + 40);
  a8.f64[0] = *(float64_t *)(result + 64);
  _Q6 = a3[40];
  _Q7 = a3[41];
  _Q16 = a3[42];
  v67 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
  _Q19 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
  v69 = vmlaq_laneq_f64(vmulq_n_f64(v67, _Q6.f64[0]), _Q19, _Q6, 1);
  _Q20 = vmulq_f64(_Q16, _Q6);
  _Q6.f64[0] = a3[40].f64[1];
  __asm { FMLA            D20, D6, V16.D[1] }
  v71 = vmlaq_laneq_f64(vmulq_n_f64(v67, _Q7.f64[0]), _Q19, _Q7, 1);
  _Q21 = vmulq_f64(_Q16, _Q7);
  _Q7.f64[0] = a3[41].f64[1];
  __asm { FMLA            D21, D7, V16.D[1] }
  v73 = vmlaq_laneq_f64(vmulq_n_f64(v67, _Q16.f64[0]), _Q19, _Q16, 1);
  _Q17 = vmulq_f64(_Q16, _Q16);
  _Q19.f64[0] = a3[42].f64[1];
  __asm { FMLA            D17, D19, V16.D[1] }
  v75 = vaddq_f64(a4, _Q20);
  v76 = vaddq_f64(a6, _Q21);
  v77 = vaddq_f64(*(float64x2_t *)(result + 24), v71);
  v78 = vaddq_f64(a8, _Q17);
  v79 = vaddq_f64(*(float64x2_t *)(result + 48), v73);
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v69);
  *(float64_t *)(result + 16) = v75.f64[0];
  *(float64x2_t *)(result + 24) = v77;
  *(float64_t *)(result + 40) = v76.f64[0];
  *(float64x2_t *)(result + 48) = v79;
  *(float64_t *)(result + 64) = v78.f64[0];
  v13 = *v12;
  if (a2[64])
  {
    if (a2[72])
    {
      v80 = *((_DWORD *)a2 + 17);
      v81 = *((unsigned int *)a2 + 19);
      if (v81 >= v80)
      {
        v83 = *(_QWORD *)(v13 + 7080);
        v84 = (*(_DWORD *)(v13 + 7104) * v81);
        v85 = v83 + 16 * v84;
        v1770 = v85;
        v86 = *(_QWORD *)(*(_QWORD *)(v13 + 7112) + 8 * v81);
        v87 = (char *)(v83 + 16 * (v86 + v84));
        v1771 = v87;
        v1772 = v81;
        if (v86)
        {
          v88 = 16 * v86;
          while (*(_DWORD *)v85 < v80)
          {
            v85 += 16;
            v88 -= 16;
            if (!v88)
              goto LABEL_53;
          }
        }
        if ((char *)v85 != v87)
        {
          if (*(_DWORD *)v85 == v80)
          {
            result = *(_QWORD *)(v13 + 7008) + 8 * *(_QWORD *)(v85 + 8);
LABEL_54:
            v75.f64[0] = *(float64_t *)(result + 16);
            v76.f64[0] = *(float64_t *)(result + 40);
            v78.f64[0] = *(float64_t *)(result + 64);
            v82 = a3[40].f64;
            v1804 = vld2q_f64(v82);
            _Q16 = a3[42];
            _Q17 = a3[43];
            _Q18 = a3[44];
            v92 = a3[45];
            v93 = vmlaq_laneq_f64(vmulq_n_f64(v1804.val[0], _Q17.f64[0]), v1804.val[1], _Q17, 1);
            _Q21 = vmulq_f64(_Q16, _Q17);
            _Q17.f64[0] = a3[43].f64[1];
            __asm { FMLA            D21, D17, V16.D[1] }
            v95 = vmlaq_laneq_f64(vmulq_n_f64(v1804.val[0], _Q18.f64[0]), v1804.val[1], _Q18, 1);
            _Q22 = vmulq_f64(_Q16, _Q18);
            _Q18.f64[0] = a3[44].f64[1];
            __asm { FMLA            D22, D18, V16.D[1] }
            v97 = vmlaq_laneq_f64(vmulq_n_f64(v1804.val[0], v92.f64[0]), v1804.val[1], v92, 1);
            v1804.val[0] = vmulq_f64(_Q16, v92);
            v1804.val[1].f64[0] = a3[45].f64[1];
            __asm { FMLA            D6, D7, V16.D[1] }
            v98 = vaddq_f64(*(float64x2_t *)(result + 24), v95);
            v99 = vaddq_f64(*(float64x2_t *)(result + 48), v97);
            *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v93);
            *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v75, _Q21);
            *(float64x2_t *)(result + 24) = v98;
            *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v76, _Q22);
            *(float64x2_t *)(result + 48) = v99;
            *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v78, v1804.val[0]);
            v13 = *v12;
            goto LABEL_55;
          }
          v87 = (char *)v85;
        }
LABEL_53:
        result = sub_20F55C71C((unint64_t *)(v13 + 6992), (uint64_t)&v1770, v80, v87);
        goto LABEL_54;
      }
    }
  }
LABEL_55:
  v100 = a2[56];
  if (!a2[56] || !a2[48])
    goto LABEL_69;
  v101 = *((_DWORD *)a2 + 15);
  v102 = *((unsigned int *)a2 + 13);
  if (v102 < v101)
    goto LABEL_71;
  v104 = *(_QWORD *)(v13 + 5928);
  v105 = (*(_DWORD *)(v13 + 5952) * v102);
  v106 = v104 + 16 * v105;
  v1770 = v106;
  v107 = *(_QWORD *)(*(_QWORD *)(v13 + 5960) + 8 * v102);
  v108 = (char *)(v104 + 16 * (v107 + v105));
  v1771 = v108;
  v1772 = v102;
  if (v107)
  {
    v109 = 16 * v107;
    while (*(_DWORD *)v106 < v101)
    {
      v106 += 16;
      v109 -= 16;
      if (!v109)
        goto LABEL_67;
    }
  }
  if ((char *)v106 == v108)
    goto LABEL_67;
  if (*(_DWORD *)v106 != v101)
  {
    v108 = (char *)v106;
LABEL_67:
    result = sub_20F55C858((unint64_t *)(v13 + 5840), (uint64_t)&v1770, v101, v108);
    goto LABEL_68;
  }
  result = *(_QWORD *)(v13 + 5856) + 8 * *(_QWORD *)(v106 + 8);
LABEL_68:
  v103 = a3[36].f64;
  v1816 = vld2q_f64(v103);
  v110 = a3[38].f64;
  v1841 = vld2q_f64(v110);
  v111 = a3[32];
  v112 = a3[33];
  v113 = a3[34];
  v114 = a3[35];
  v115 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1841.val[0], v111.f64[0]), v1841.val[1], v111, 1));
  v116 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1841.val[0], v112.f64[0]), v1841.val[1], v112, 1));
  v117 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1816.val[0], v112.f64[0]), v1816.val[1], v112, 1));
  v118 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1841.val[0], v113.f64[0]), v1841.val[1], v113, 1));
  v119 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1816.val[0], v113.f64[0]), v1816.val[1], v113, 1));
  v120 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1841.val[0], v114.f64[0]), v1841.val[1], v114, 1));
  v121 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1816.val[0], v114.f64[0]), v1816.val[1], v114, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1816.val[0], v111.f64[0]), v1816.val[1], v111, 1));
  *(float64x2_t *)(result + 16) = v115;
  *(float64x2_t *)(result + 32) = v117;
  *(float64x2_t *)(result + 48) = v116;
  *(float64x2_t *)(result + 64) = v119;
  *(float64x2_t *)(result + 80) = v118;
  *(float64x2_t *)(result + 96) = v121;
  *(float64x2_t *)(result + 112) = v120;
  v13 = *v12;
  v100 = a2[56];
LABEL_69:
  if (!v100)
    goto LABEL_107;
  v101 = *((_DWORD *)a2 + 15);
LABEL_71:
  v122 = *(_QWORD *)(v13 + 5928);
  v123 = *(_DWORD *)(v13 + 5952) * v101;
  v124 = v122 + 16 * v123;
  v1770 = v124;
  v125 = *(_QWORD *)(*(_QWORD *)(v13 + 5960) + 8 * v101);
  v126 = (char *)(v122 + 16 * (v125 + v123));
  v1771 = v126;
  v1772 = v101;
  if (v125)
  {
    v127 = 16 * v125;
    while (*(_DWORD *)v124 < v101)
    {
      v124 += 16;
      v127 -= 16;
      if (!v127)
        goto LABEL_80;
    }
  }
  if ((char *)v124 == v126)
    goto LABEL_80;
  if (*(_DWORD *)v124 != v101)
  {
    v126 = (char *)v124;
LABEL_80:
    result = sub_20F55C858((unint64_t *)(v13 + 5840), (uint64_t)&v1770, v101, v126);
    goto LABEL_81;
  }
  result = *(_QWORD *)(v13 + 5856) + 8 * *(_QWORD *)(v124 + 8);
LABEL_81:
  v128 = a3[36].f64;
  v129 = a3[36];
  v130 = a3[37];
  v131 = a3[38].f64;
  v132 = a3[38];
  v133 = a3[39];
  v134 = (float64x2_t)vzip1q_s64((int64x2_t)v132, (int64x2_t)v133);
  *(_QWORD *)&v135.f64[0] = vdupq_laneq_s64((int64x2_t)v132, 1).u64[0];
  v135.f64[1] = a3[39].f64[1];
  v136 = (float64x2_t)vzip1q_s64((int64x2_t)v129, (int64x2_t)v130);
  v137 = (float64x2_t)vzip2q_s64((int64x2_t)v129, (int64x2_t)v130);
  v138 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v134, v129.f64[0]), v135, v129, 1));
  v139 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v134, v130.f64[0]), v135, v130, 1));
  v140 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v136, v130.f64[0]), v137, v130, 1));
  v141 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v134, v132.f64[0]), v135, v132, 1));
  v142 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v136, v132.f64[0]), v137, v132, 1));
  v143 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v134, v133.f64[0]), v135, v133, 1));
  v144 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v136, v133.f64[0]), v137, v133, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v136, v129.f64[0]), v137, v129, 1));
  *(float64x2_t *)(result + 16) = v138;
  *(float64x2_t *)(result + 32) = v140;
  *(float64x2_t *)(result + 48) = v139;
  *(float64x2_t *)(result + 64) = v142;
  *(float64x2_t *)(result + 80) = v141;
  *(float64x2_t *)(result + 96) = v144;
  *(float64x2_t *)(result + 112) = v143;
  v13 = *v12;
  v145 = a2[56];
  if (a2[56] && a2[64])
  {
    v146 = *((_DWORD *)a2 + 15);
    v147 = *((unsigned int *)a2 + 17);
    v148 = *(_QWORD *)(v13 + 6936);
    v149 = (*(_DWORD *)(v13 + 6960) * v147);
    v150 = v148 + 16 * v149;
    v1770 = v150;
    v151 = *(_QWORD *)(*(_QWORD *)(v13 + 6968) + 8 * v147);
    v152 = (char *)(v148 + 16 * (v151 + v149));
    v1771 = v152;
    v1772 = v147;
    if (v151)
    {
      v153 = 16 * v151;
      while (*(_DWORD *)v150 < v146)
      {
        v150 += 16;
        v153 -= 16;
        if (!v153)
          goto LABEL_92;
      }
    }
    if ((char *)v150 != v152)
    {
      if (*(_DWORD *)v150 == v146)
      {
        result = *(_QWORD *)(v13 + 6864) + 8 * *(_QWORD *)(v150 + 8);
LABEL_93:
        v1781 = vld2q_f64(v128);
        v1805 = vld2q_f64(v131);
        v154 = a3[40];
        v155 = a3[41];
        v156 = a3[42];
        v157 = vmlaq_laneq_f64(vmulq_n_f64(v1781.val[0], v154.f64[0]), v1781.val[1], v154, 1);
        v158 = vmlaq_laneq_f64(vmulq_n_f64(v1805.val[0], v154.f64[0]), v1805.val[1], v154, 1);
        v159 = vmlaq_laneq_f64(vmulq_n_f64(v1781.val[0], v155.f64[0]), v1781.val[1], v155, 1);
        v160 = vmlaq_laneq_f64(vmulq_n_f64(v1805.val[0], v155.f64[0]), v1805.val[1], v155, 1);
        v161 = vmlaq_laneq_f64(vmulq_n_f64(v1781.val[0], v156.f64[0]), v1781.val[1], v156, 1);
        v162 = vaddq_f64(*(float64x2_t *)(result + 16), v158);
        v1781.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v160);
        v163 = vaddq_f64(*(float64x2_t *)(result + 32), v159);
        v1781.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1805.val[0], v156.f64[0]), v1805.val[1], v156, 1));
        v164 = vaddq_f64(*(float64x2_t *)(result + 64), v161);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v157);
        *(float64x2_t *)(result + 16) = v162;
        *(float64x2_t *)(result + 32) = v163;
        *(float64x2_t *)(result + 48) = v1781.val[1];
        *(float64x2_t *)(result + 64) = v164;
        *(float64x2_t *)(result + 80) = v1781.val[0];
        v13 = *v12;
        v145 = a2[56];
        goto LABEL_94;
      }
      v152 = (char *)v150;
    }
LABEL_92:
    result = sub_20F55C994((unint64_t *)(v13 + 6848), (uint64_t)&v1770, v146, v152);
    goto LABEL_93;
  }
LABEL_94:
  if (v145 && a2[72])
  {
    v165 = *((_DWORD *)a2 + 15);
    v166 = *((unsigned int *)a2 + 19);
    v167 = *(_QWORD *)(v13 + 6936);
    v168 = (*(_DWORD *)(v13 + 6960) * v166);
    v169 = v167 + 16 * v168;
    v1770 = v169;
    v170 = *(_QWORD *)(*(_QWORD *)(v13 + 6968) + 8 * v166);
    v171 = (char *)(v167 + 16 * (v170 + v168));
    v1771 = v171;
    v1772 = v166;
    if (v170)
    {
      v172 = 16 * v170;
      while (*(_DWORD *)v169 < v165)
      {
        v169 += 16;
        v172 -= 16;
        if (!v172)
          goto LABEL_105;
      }
    }
    if ((char *)v169 != v171)
    {
      if (*(_DWORD *)v169 == v165)
      {
        result = *(_QWORD *)(v13 + 6864) + 8 * *(_QWORD *)(v169 + 8);
LABEL_106:
        v1782 = vld2q_f64(v128);
        v1806 = vld2q_f64(v131);
        v173 = a3[43];
        v174 = a3[44];
        v175 = a3[45];
        v176 = vmlaq_laneq_f64(vmulq_n_f64(v1782.val[0], v173.f64[0]), v1782.val[1], v173, 1);
        v177 = vmlaq_laneq_f64(vmulq_n_f64(v1806.val[0], v173.f64[0]), v1806.val[1], v173, 1);
        v178 = vmlaq_laneq_f64(vmulq_n_f64(v1782.val[0], v174.f64[0]), v1782.val[1], v174, 1);
        v179 = vmlaq_laneq_f64(vmulq_n_f64(v1806.val[0], v174.f64[0]), v1806.val[1], v174, 1);
        v180 = vmlaq_laneq_f64(vmulq_n_f64(v1782.val[0], v175.f64[0]), v1782.val[1], v175, 1);
        v181 = vaddq_f64(*(float64x2_t *)(result + 16), v177);
        v1782.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v179);
        v182 = vaddq_f64(*(float64x2_t *)(result + 32), v178);
        v1782.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1806.val[0], v175.f64[0]), v1806.val[1], v175, 1));
        v183 = vaddq_f64(*(float64x2_t *)(result + 64), v180);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v176);
        *(float64x2_t *)(result + 16) = v181;
        *(float64x2_t *)(result + 32) = v182;
        *(float64x2_t *)(result + 48) = v1782.val[1];
        *(float64x2_t *)(result + 64) = v183;
        *(float64x2_t *)(result + 80) = v1782.val[0];
        v13 = *v12;
        goto LABEL_107;
      }
      v171 = (char *)v169;
    }
LABEL_105:
    result = sub_20F55C994((unint64_t *)(v13 + 6848), (uint64_t)&v1770, v165, v171);
    goto LABEL_106;
  }
LABEL_107:
  if (!a2[48])
    goto LABEL_156;
  v184 = *((unsigned int *)a2 + 13);
  v185 = *(_QWORD *)(v13 + 5928);
  v186 = (*(_DWORD *)(v13 + 5952) * v184);
  v187 = v185 + 16 * v186;
  v1770 = v187;
  v188 = *(_QWORD *)(*(_QWORD *)(v13 + 5960) + 8 * v184);
  v189 = (char *)(v185 + 16 * (v188 + v186));
  v1771 = v189;
  v1772 = v184;
  if (v188)
  {
    v190 = 16 * v188;
    while (*(_DWORD *)v187 < v184)
    {
      v187 += 16;
      v190 -= 16;
      if (!v190)
        goto LABEL_117;
    }
  }
  if ((char *)v187 == v189)
    goto LABEL_117;
  if (*(_DWORD *)v187 != (_DWORD)v184)
  {
    v189 = (char *)v187;
LABEL_117:
    result = sub_20F55C858((unint64_t *)(v13 + 5840), (uint64_t)&v1770, v184, v189);
    goto LABEL_118;
  }
  result = *(_QWORD *)(v13 + 5856) + 8 * *(_QWORD *)(v187 + 8);
LABEL_118:
  v191 = a3[32].f64;
  v192 = a3[32];
  v193 = a3[33];
  v194 = a3[34].f64;
  v195 = a3[34];
  v196 = a3[35];
  v197 = (float64x2_t)vzip1q_s64((int64x2_t)v195, (int64x2_t)v196);
  *(_QWORD *)&v198.f64[0] = vdupq_laneq_s64((int64x2_t)v195, 1).u64[0];
  v198.f64[1] = a3[35].f64[1];
  v199 = (float64x2_t)vzip1q_s64((int64x2_t)v192, (int64x2_t)v193);
  v200 = (float64x2_t)vzip2q_s64((int64x2_t)v192, (int64x2_t)v193);
  v201 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v197, v192.f64[0]), v198, v192, 1));
  v202 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v197, v193.f64[0]), v198, v193, 1));
  v203 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v199, v193.f64[0]), v200, v193, 1));
  v204 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v197, v195.f64[0]), v198, v195, 1));
  v205 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v199, v195.f64[0]), v200, v195, 1));
  v206 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v197, v196.f64[0]), v198, v196, 1));
  v207 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v199, v196.f64[0]), v200, v196, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v199, v192.f64[0]), v200, v192, 1));
  *(float64x2_t *)(result + 16) = v201;
  *(float64x2_t *)(result + 32) = v203;
  *(float64x2_t *)(result + 48) = v202;
  *(float64x2_t *)(result + 64) = v205;
  *(float64x2_t *)(result + 80) = v204;
  *(float64x2_t *)(result + 96) = v207;
  *(float64x2_t *)(result + 112) = v206;
  v13 = *v12;
  v208 = a2[48];
  if (!a2[48] || !a2[56])
  {
LABEL_122:
    if (!v208)
      goto LABEL_143;
    goto LABEL_123;
  }
  v209 = *((_DWORD *)a2 + 13);
  v210 = *((unsigned int *)a2 + 15);
  if (v210 < v209)
  {
    v208 = 1;
    goto LABEL_122;
  }
  v219 = *(_QWORD *)(v13 + 5928);
  v220 = (*(_DWORD *)(v13 + 5952) * v210);
  v221 = v219 + 16 * v220;
  v1770 = v221;
  v222 = *(_QWORD *)(*(_QWORD *)(v13 + 5960) + 8 * v210);
  v223 = (char *)(v219 + 16 * (v222 + v220));
  v1771 = v223;
  v1772 = v210;
  if (v222)
  {
    v224 = 16 * v222;
    while (*(_DWORD *)v221 < v209)
    {
      v221 += 16;
      v224 -= 16;
      if (!v224)
        goto LABEL_773;
    }
  }
  if ((char *)v221 != v223)
  {
    if (*(_DWORD *)v221 == v209)
    {
      result = *(_QWORD *)(v13 + 5856) + 8 * *(_QWORD *)(v221 + 8);
      goto LABEL_774;
    }
    v223 = (char *)v221;
  }
LABEL_773:
  result = sub_20F55C858((unint64_t *)(v13 + 5840), (uint64_t)&v1770, v209, v223);
LABEL_774:
  v1838 = vld2q_f64(v191);
  v1850 = vld2q_f64(v194);
  v1678 = a3[36];
  v1679 = a3[37];
  v1680 = a3[38];
  v1681 = a3[39];
  v1682 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1850.val[0], v1678.f64[0]), v1850.val[1], v1678, 1));
  v1683 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1850.val[0], v1679.f64[0]), v1850.val[1], v1679, 1));
  v1684 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1838.val[0], v1679.f64[0]), v1838.val[1], v1679, 1));
  v1685 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1850.val[0], v1680.f64[0]), v1850.val[1], v1680, 1));
  v1686 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1838.val[0], v1680.f64[0]), v1838.val[1], v1680, 1));
  v1687 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1850.val[0], v1681.f64[0]), v1850.val[1], v1681, 1));
  v1688 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1838.val[0], v1681.f64[0]), v1838.val[1], v1681, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1838.val[0], v1678.f64[0]), v1838.val[1], v1678, 1));
  *(float64x2_t *)(result + 16) = v1682;
  *(float64x2_t *)(result + 32) = v1684;
  *(float64x2_t *)(result + 48) = v1683;
  *(float64x2_t *)(result + 64) = v1686;
  *(float64x2_t *)(result + 80) = v1685;
  *(float64x2_t *)(result + 96) = v1688;
  *(float64x2_t *)(result + 112) = v1687;
  v13 = *v12;
  v208 = a2[48];
  if (!a2[48])
    goto LABEL_143;
LABEL_123:
  if (a2[64])
  {
    v211 = *((_DWORD *)a2 + 13);
    v212 = *((unsigned int *)a2 + 17);
    v213 = *(_QWORD *)(v13 + 6936);
    v214 = (*(_DWORD *)(v13 + 6960) * v212);
    v215 = v213 + 16 * v214;
    v1770 = v215;
    v216 = *(_QWORD *)(*(_QWORD *)(v13 + 6968) + 8 * v212);
    v217 = (char *)(v213 + 16 * (v216 + v214));
    v1771 = v217;
    v1772 = v212;
    if (v216)
    {
      v218 = 16 * v216;
      while (*(_DWORD *)v215 < v211)
      {
        v215 += 16;
        v218 -= 16;
        if (!v218)
          goto LABEL_141;
      }
    }
    if ((char *)v215 != v217)
    {
      if (*(_DWORD *)v215 == v211)
      {
        result = *(_QWORD *)(v13 + 6864) + 8 * *(_QWORD *)(v215 + 8);
LABEL_142:
        v1783 = vld2q_f64(v191);
        v1807 = vld2q_f64(v194);
        v225 = a3[40];
        v226 = a3[41];
        v227 = a3[42];
        v228 = vmlaq_laneq_f64(vmulq_n_f64(v1783.val[0], v225.f64[0]), v1783.val[1], v225, 1);
        v229 = vmlaq_laneq_f64(vmulq_n_f64(v1807.val[0], v225.f64[0]), v1807.val[1], v225, 1);
        v230 = vmlaq_laneq_f64(vmulq_n_f64(v1783.val[0], v226.f64[0]), v1783.val[1], v226, 1);
        v231 = vmlaq_laneq_f64(vmulq_n_f64(v1807.val[0], v226.f64[0]), v1807.val[1], v226, 1);
        v232 = vmlaq_laneq_f64(vmulq_n_f64(v1783.val[0], v227.f64[0]), v1783.val[1], v227, 1);
        v233 = vaddq_f64(*(float64x2_t *)(result + 16), v229);
        v1783.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v231);
        v234 = vaddq_f64(*(float64x2_t *)(result + 32), v230);
        v1783.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1807.val[0], v227.f64[0]), v1807.val[1], v227, 1));
        v235 = vaddq_f64(*(float64x2_t *)(result + 64), v232);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v228);
        *(float64x2_t *)(result + 16) = v233;
        *(float64x2_t *)(result + 32) = v234;
        *(float64x2_t *)(result + 48) = v1783.val[1];
        *(float64x2_t *)(result + 64) = v235;
        *(float64x2_t *)(result + 80) = v1783.val[0];
        v13 = *v12;
        v208 = a2[48];
        goto LABEL_143;
      }
      v217 = (char *)v215;
    }
LABEL_141:
    result = sub_20F55C994((unint64_t *)(v13 + 6848), (uint64_t)&v1770, v211, v217);
    goto LABEL_142;
  }
LABEL_143:
  if (v208 && a2[72])
  {
    v236 = *((_DWORD *)a2 + 13);
    v237 = *((unsigned int *)a2 + 19);
    v238 = *(_QWORD *)(v13 + 6936);
    v239 = (*(_DWORD *)(v13 + 6960) * v237);
    v240 = v238 + 16 * v239;
    v1770 = v240;
    v241 = *(_QWORD *)(*(_QWORD *)(v13 + 6968) + 8 * v237);
    v242 = (char *)(v238 + 16 * (v241 + v239));
    v1771 = v242;
    v1772 = v237;
    if (v241)
    {
      v243 = 16 * v241;
      while (*(_DWORD *)v240 < v236)
      {
        v240 += 16;
        v243 -= 16;
        if (!v243)
          goto LABEL_154;
      }
    }
    if ((char *)v240 != v242)
    {
      if (*(_DWORD *)v240 == v236)
      {
        result = *(_QWORD *)(v13 + 6864) + 8 * *(_QWORD *)(v240 + 8);
LABEL_155:
        v1784 = vld2q_f64(v191);
        v1808 = vld2q_f64(v194);
        v244 = a3[43];
        v245 = a3[44];
        v246 = a3[45];
        v247 = vmlaq_laneq_f64(vmulq_n_f64(v1784.val[0], v244.f64[0]), v1784.val[1], v244, 1);
        v248 = vmlaq_laneq_f64(vmulq_n_f64(v1808.val[0], v244.f64[0]), v1808.val[1], v244, 1);
        v249 = vmlaq_laneq_f64(vmulq_n_f64(v1784.val[0], v245.f64[0]), v1784.val[1], v245, 1);
        v250 = vmlaq_laneq_f64(vmulq_n_f64(v1808.val[0], v245.f64[0]), v1808.val[1], v245, 1);
        v251 = vmlaq_laneq_f64(vmulq_n_f64(v1784.val[0], v246.f64[0]), v1784.val[1], v246, 1);
        v252 = vaddq_f64(*(float64x2_t *)(result + 16), v248);
        v1784.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v250);
        v253 = vaddq_f64(*(float64x2_t *)(result + 32), v249);
        v1784.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1808.val[0], v246.f64[0]), v1808.val[1], v246, 1));
        v254 = vaddq_f64(*(float64x2_t *)(result + 64), v251);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v247);
        *(float64x2_t *)(result + 16) = v252;
        *(float64x2_t *)(result + 32) = v253;
        *(float64x2_t *)(result + 48) = v1784.val[1];
        *(float64x2_t *)(result + 64) = v254;
        *(float64x2_t *)(result + 80) = v1784.val[0];
        v13 = *v12;
        goto LABEL_156;
      }
      v242 = (char *)v240;
    }
LABEL_154:
    result = sub_20F55C994((unint64_t *)(v13 + 6848), (uint64_t)&v1770, v236, v242);
    goto LABEL_155;
  }
LABEL_156:
  v255 = a2[40];
  if (!a2[40] || !a2[32])
    goto LABEL_170;
  v256 = *((_DWORD *)a2 + 11);
  v257 = *((unsigned int *)a2 + 9);
  if (v257 < v256)
    goto LABEL_172;
  v259 = *(_QWORD *)(v13 + 4776);
  v260 = (*(_DWORD *)(v13 + 4800) * v257);
  v261 = v259 + 16 * v260;
  v1770 = v261;
  v262 = *(_QWORD *)(*(_QWORD *)(v13 + 4808) + 8 * v257);
  v263 = (char *)(v259 + 16 * (v262 + v260));
  v1771 = v263;
  v1772 = v257;
  if (v262)
  {
    v264 = 16 * v262;
    while (*(_DWORD *)v261 < v256)
    {
      v261 += 16;
      v264 -= 16;
      if (!v264)
        goto LABEL_168;
    }
  }
  if ((char *)v261 == v263)
    goto LABEL_168;
  if (*(_DWORD *)v261 != v256)
  {
    v263 = (char *)v261;
LABEL_168:
    result = sub_20F55C858((unint64_t *)(v13 + 4688), (uint64_t)&v1770, v256, v263);
    goto LABEL_169;
  }
  result = *(_QWORD *)(v13 + 4704) + 8 * *(_QWORD *)(v261 + 8);
LABEL_169:
  v258 = a3[28].f64;
  v1817 = vld2q_f64(v258);
  v265 = a3[30].f64;
  v1842 = vld2q_f64(v265);
  v266 = a3[24];
  v267 = a3[25];
  v268 = a3[26];
  v269 = a3[27];
  v270 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1842.val[0], v266.f64[0]), v1842.val[1], v266, 1));
  v271 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1842.val[0], v267.f64[0]), v1842.val[1], v267, 1));
  v272 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1817.val[0], v267.f64[0]), v1817.val[1], v267, 1));
  v273 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1842.val[0], v268.f64[0]), v1842.val[1], v268, 1));
  v274 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1817.val[0], v268.f64[0]), v1817.val[1], v268, 1));
  v275 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1842.val[0], v269.f64[0]), v1842.val[1], v269, 1));
  v276 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1817.val[0], v269.f64[0]), v1817.val[1], v269, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1817.val[0], v266.f64[0]), v1817.val[1], v266, 1));
  *(float64x2_t *)(result + 16) = v270;
  *(float64x2_t *)(result + 32) = v272;
  *(float64x2_t *)(result + 48) = v271;
  *(float64x2_t *)(result + 64) = v274;
  *(float64x2_t *)(result + 80) = v273;
  *(float64x2_t *)(result + 96) = v276;
  *(float64x2_t *)(result + 112) = v275;
  v13 = *v12;
  v255 = a2[40];
LABEL_170:
  if (!v255)
    goto LABEL_234;
  v256 = *((_DWORD *)a2 + 11);
LABEL_172:
  v277 = *(_QWORD *)(v13 + 4776);
  v278 = *(_DWORD *)(v13 + 4800) * v256;
  v279 = v277 + 16 * v278;
  v1770 = v279;
  v280 = *(_QWORD *)(*(_QWORD *)(v13 + 4808) + 8 * v256);
  v281 = (char *)(v277 + 16 * (v280 + v278));
  v1771 = v281;
  v1772 = v256;
  if (v280)
  {
    v282 = 16 * v280;
    while (*(_DWORD *)v279 < v256)
    {
      v279 += 16;
      v282 -= 16;
      if (!v282)
        goto LABEL_181;
    }
  }
  if ((char *)v279 == v281)
    goto LABEL_181;
  if (*(_DWORD *)v279 != v256)
  {
    v281 = (char *)v279;
LABEL_181:
    result = sub_20F55C858((unint64_t *)(v13 + 4688), (uint64_t)&v1770, v256, v281);
    goto LABEL_182;
  }
  result = *(_QWORD *)(v13 + 4704) + 8 * *(_QWORD *)(v279 + 8);
LABEL_182:
  v283 = a3[28].f64;
  v284 = a3[28];
  v285 = a3[29];
  v286 = a3[30].f64;
  v287 = a3[30];
  v288 = a3[31];
  v289 = (float64x2_t)vzip1q_s64((int64x2_t)v287, (int64x2_t)v288);
  *(_QWORD *)&v290.f64[0] = vdupq_laneq_s64((int64x2_t)v287, 1).u64[0];
  v290.f64[1] = a3[31].f64[1];
  v291 = (float64x2_t)vzip1q_s64((int64x2_t)v284, (int64x2_t)v285);
  v292 = (float64x2_t)vzip2q_s64((int64x2_t)v284, (int64x2_t)v285);
  v293 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v289, v284.f64[0]), v290, v284, 1));
  v294 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v289, v285.f64[0]), v290, v285, 1));
  v295 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v291, v285.f64[0]), v292, v285, 1));
  v296 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v289, v287.f64[0]), v290, v287, 1));
  v297 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v291, v287.f64[0]), v292, v287, 1));
  v298 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v289, v288.f64[0]), v290, v288, 1));
  v299 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v291, v288.f64[0]), v292, v288, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v291, v284.f64[0]), v292, v284, 1));
  *(float64x2_t *)(result + 16) = v293;
  *(float64x2_t *)(result + 32) = v295;
  *(float64x2_t *)(result + 48) = v294;
  *(float64x2_t *)(result + 64) = v297;
  *(float64x2_t *)(result + 80) = v296;
  *(float64x2_t *)(result + 96) = v299;
  *(float64x2_t *)(result + 112) = v298;
  v13 = *v12;
  v300 = a2[40];
  if (a2[40] && a2[48])
  {
    v301 = *((_DWORD *)a2 + 11);
    v302 = *((unsigned int *)a2 + 13);
    v303 = *(_QWORD *)(v13 + 5784);
    v304 = (*(_DWORD *)(v13 + 5808) * v302);
    v305 = v303 + 16 * v304;
    v1770 = v305;
    v306 = *(_QWORD *)(*(_QWORD *)(v13 + 5816) + 8 * v302);
    v307 = (char *)(v303 + 16 * (v306 + v304));
    v1771 = v307;
    v1772 = v302;
    if (v306)
    {
      v308 = 16 * v306;
      while (*(_DWORD *)v305 < v301)
      {
        v305 += 16;
        v308 -= 16;
        if (!v308)
          goto LABEL_193;
      }
    }
    if ((char *)v305 != v307)
    {
      if (*(_DWORD *)v305 == v301)
      {
        result = *(_QWORD *)(v13 + 5712) + 8 * *(_QWORD *)(v305 + 8);
LABEL_194:
        v1818 = vld2q_f64(v283);
        v1843 = vld2q_f64(v286);
        v309 = a3[32];
        v310 = a3[33];
        v311 = a3[34];
        v312 = a3[35];
        v313 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1843.val[0], v309.f64[0]), v1843.val[1], v309, 1));
        v314 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1843.val[0], v310.f64[0]), v1843.val[1], v310, 1));
        v315 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1818.val[0], v310.f64[0]), v1818.val[1], v310, 1));
        v316 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1843.val[0], v311.f64[0]), v1843.val[1], v311, 1));
        v317 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1818.val[0], v311.f64[0]), v1818.val[1], v311, 1));
        v318 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1843.val[0], v312.f64[0]), v1843.val[1], v312, 1));
        v319 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1818.val[0], v312.f64[0]), v1818.val[1], v312, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1818.val[0], v309.f64[0]), v1818.val[1], v309, 1));
        *(float64x2_t *)(result + 16) = v313;
        *(float64x2_t *)(result + 32) = v315;
        *(float64x2_t *)(result + 48) = v314;
        *(float64x2_t *)(result + 64) = v317;
        *(float64x2_t *)(result + 80) = v316;
        *(float64x2_t *)(result + 96) = v319;
        *(float64x2_t *)(result + 112) = v318;
        v13 = *v12;
        v300 = a2[40];
        goto LABEL_195;
      }
      v307 = (char *)v305;
    }
LABEL_193:
    result = sub_20F55C858((unint64_t *)(v13 + 5696), (uint64_t)&v1770, v301, v307);
    goto LABEL_194;
  }
LABEL_195:
  if (v300 && a2[56])
  {
    v320 = *((_DWORD *)a2 + 11);
    v321 = *((unsigned int *)a2 + 15);
    v322 = *(_QWORD *)(v13 + 5784);
    v323 = (*(_DWORD *)(v13 + 5808) * v321);
    v324 = v322 + 16 * v323;
    v1770 = v324;
    v325 = *(_QWORD *)(*(_QWORD *)(v13 + 5816) + 8 * v321);
    v326 = (char *)(v322 + 16 * (v325 + v323));
    v1771 = v326;
    v1772 = v321;
    if (v325)
    {
      v327 = 16 * v325;
      while (*(_DWORD *)v324 < v320)
      {
        v324 += 16;
        v327 -= 16;
        if (!v327)
          goto LABEL_206;
      }
    }
    if ((char *)v324 != v326)
    {
      if (*(_DWORD *)v324 == v320)
      {
        result = *(_QWORD *)(v13 + 5712) + 8 * *(_QWORD *)(v324 + 8);
LABEL_207:
        v1819 = vld2q_f64(v283);
        v1844 = vld2q_f64(v286);
        v328 = a3[36];
        v329 = a3[37];
        v330 = a3[38];
        v331 = a3[39];
        v332 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1844.val[0], v328.f64[0]), v1844.val[1], v328, 1));
        v333 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1844.val[0], v329.f64[0]), v1844.val[1], v329, 1));
        v334 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1819.val[0], v329.f64[0]), v1819.val[1], v329, 1));
        v335 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1844.val[0], v330.f64[0]), v1844.val[1], v330, 1));
        v336 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1819.val[0], v330.f64[0]), v1819.val[1], v330, 1));
        v337 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1844.val[0], v331.f64[0]), v1844.val[1], v331, 1));
        v338 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1819.val[0], v331.f64[0]), v1819.val[1], v331, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1819.val[0], v328.f64[0]), v1819.val[1], v328, 1));
        *(float64x2_t *)(result + 16) = v332;
        *(float64x2_t *)(result + 32) = v334;
        *(float64x2_t *)(result + 48) = v333;
        *(float64x2_t *)(result + 64) = v336;
        *(float64x2_t *)(result + 80) = v335;
        *(float64x2_t *)(result + 96) = v338;
        *(float64x2_t *)(result + 112) = v337;
        v13 = *v12;
        v300 = a2[40];
        goto LABEL_208;
      }
      v326 = (char *)v324;
    }
LABEL_206:
    result = sub_20F55C858((unint64_t *)(v13 + 5696), (uint64_t)&v1770, v320, v326);
    goto LABEL_207;
  }
LABEL_208:
  if (v300 && a2[64])
  {
    v339 = *((_DWORD *)a2 + 11);
    v340 = *((unsigned int *)a2 + 17);
    v341 = *(_QWORD *)(v13 + 6792);
    v342 = (*(_DWORD *)(v13 + 6816) * v340);
    v343 = v341 + 16 * v342;
    v1770 = v343;
    v344 = *(_QWORD *)(*(_QWORD *)(v13 + 6824) + 8 * v340);
    v345 = (char *)(v341 + 16 * (v344 + v342));
    v1771 = v345;
    v1772 = v340;
    if (v344)
    {
      v346 = 16 * v344;
      while (*(_DWORD *)v343 < v339)
      {
        v343 += 16;
        v346 -= 16;
        if (!v346)
          goto LABEL_219;
      }
    }
    if ((char *)v343 != v345)
    {
      if (*(_DWORD *)v343 == v339)
      {
        result = *(_QWORD *)(v13 + 6720) + 8 * *(_QWORD *)(v343 + 8);
LABEL_220:
        v1785 = vld2q_f64(v283);
        v1809 = vld2q_f64(v286);
        v347 = a3[40];
        v348 = a3[41];
        v349 = a3[42];
        v350 = vmlaq_laneq_f64(vmulq_n_f64(v1785.val[0], v347.f64[0]), v1785.val[1], v347, 1);
        v351 = vmlaq_laneq_f64(vmulq_n_f64(v1809.val[0], v347.f64[0]), v1809.val[1], v347, 1);
        v352 = vmlaq_laneq_f64(vmulq_n_f64(v1785.val[0], v348.f64[0]), v1785.val[1], v348, 1);
        v353 = vmlaq_laneq_f64(vmulq_n_f64(v1809.val[0], v348.f64[0]), v1809.val[1], v348, 1);
        v354 = vmlaq_laneq_f64(vmulq_n_f64(v1785.val[0], v349.f64[0]), v1785.val[1], v349, 1);
        v355 = vaddq_f64(*(float64x2_t *)(result + 16), v351);
        v1785.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v353);
        v356 = vaddq_f64(*(float64x2_t *)(result + 32), v352);
        v1785.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1809.val[0], v349.f64[0]), v1809.val[1], v349, 1));
        v357 = vaddq_f64(*(float64x2_t *)(result + 64), v354);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v350);
        *(float64x2_t *)(result + 16) = v355;
        *(float64x2_t *)(result + 32) = v356;
        *(float64x2_t *)(result + 48) = v1785.val[1];
        *(float64x2_t *)(result + 64) = v357;
        *(float64x2_t *)(result + 80) = v1785.val[0];
        v13 = *v12;
        v300 = a2[40];
        goto LABEL_221;
      }
      v345 = (char *)v343;
    }
LABEL_219:
    result = sub_20F55C994((unint64_t *)(v13 + 6704), (uint64_t)&v1770, v339, v345);
    goto LABEL_220;
  }
LABEL_221:
  if (v300 && a2[72])
  {
    v358 = *((_DWORD *)a2 + 11);
    v359 = *((unsigned int *)a2 + 19);
    v360 = *(_QWORD *)(v13 + 6792);
    v361 = (*(_DWORD *)(v13 + 6816) * v359);
    v362 = v360 + 16 * v361;
    v1770 = v362;
    v363 = *(_QWORD *)(*(_QWORD *)(v13 + 6824) + 8 * v359);
    v364 = (char *)(v360 + 16 * (v363 + v361));
    v1771 = v364;
    v1772 = v359;
    if (v363)
    {
      v365 = 16 * v363;
      while (*(_DWORD *)v362 < v358)
      {
        v362 += 16;
        v365 -= 16;
        if (!v365)
          goto LABEL_232;
      }
    }
    if ((char *)v362 != v364)
    {
      if (*(_DWORD *)v362 == v358)
      {
        result = *(_QWORD *)(v13 + 6720) + 8 * *(_QWORD *)(v362 + 8);
LABEL_233:
        v1786 = vld2q_f64(v283);
        v1810 = vld2q_f64(v286);
        v366 = a3[43];
        v367 = a3[44];
        v368 = a3[45];
        v369 = vmlaq_laneq_f64(vmulq_n_f64(v1786.val[0], v366.f64[0]), v1786.val[1], v366, 1);
        v370 = vmlaq_laneq_f64(vmulq_n_f64(v1810.val[0], v366.f64[0]), v1810.val[1], v366, 1);
        v371 = vmlaq_laneq_f64(vmulq_n_f64(v1786.val[0], v367.f64[0]), v1786.val[1], v367, 1);
        v372 = vmlaq_laneq_f64(vmulq_n_f64(v1810.val[0], v367.f64[0]), v1810.val[1], v367, 1);
        v373 = vmlaq_laneq_f64(vmulq_n_f64(v1786.val[0], v368.f64[0]), v1786.val[1], v368, 1);
        v374 = vaddq_f64(*(float64x2_t *)(result + 16), v370);
        v1786.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v372);
        v375 = vaddq_f64(*(float64x2_t *)(result + 32), v371);
        v1786.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1810.val[0], v368.f64[0]), v1810.val[1], v368, 1));
        v376 = vaddq_f64(*(float64x2_t *)(result + 64), v373);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v369);
        *(float64x2_t *)(result + 16) = v374;
        *(float64x2_t *)(result + 32) = v375;
        *(float64x2_t *)(result + 48) = v1786.val[1];
        *(float64x2_t *)(result + 64) = v376;
        *(float64x2_t *)(result + 80) = v1786.val[0];
        v13 = *v12;
        goto LABEL_234;
      }
      v364 = (char *)v362;
    }
LABEL_232:
    result = sub_20F55C994((unint64_t *)(v13 + 6704), (uint64_t)&v1770, v358, v364);
    goto LABEL_233;
  }
LABEL_234:
  if (!a2[32])
    goto LABEL_309;
  v377 = *((unsigned int *)a2 + 9);
  v378 = *(_QWORD *)(v13 + 4776);
  v379 = (*(_DWORD *)(v13 + 4800) * v377);
  v380 = v378 + 16 * v379;
  v1770 = v380;
  v381 = *(_QWORD *)(*(_QWORD *)(v13 + 4808) + 8 * v377);
  v382 = (char *)(v378 + 16 * (v381 + v379));
  v1771 = v382;
  v1772 = v377;
  if (v381)
  {
    v383 = 16 * v381;
    while (*(_DWORD *)v380 < v377)
    {
      v380 += 16;
      v383 -= 16;
      if (!v383)
        goto LABEL_244;
    }
  }
  if ((char *)v380 == v382)
    goto LABEL_244;
  if (*(_DWORD *)v380 != (_DWORD)v377)
  {
    v382 = (char *)v380;
LABEL_244:
    result = sub_20F55C858((unint64_t *)(v13 + 4688), (uint64_t)&v1770, v377, v382);
    goto LABEL_245;
  }
  result = *(_QWORD *)(v13 + 4704) + 8 * *(_QWORD *)(v380 + 8);
LABEL_245:
  v384 = a3[24].f64;
  v385 = a3[24];
  v386 = a3[25];
  v387 = a3[26].f64;
  v388 = a3[26];
  v389 = a3[27];
  v390 = (float64x2_t)vzip1q_s64((int64x2_t)v388, (int64x2_t)v389);
  *(_QWORD *)&v391.f64[0] = vdupq_laneq_s64((int64x2_t)v388, 1).u64[0];
  v391.f64[1] = a3[27].f64[1];
  v392 = (float64x2_t)vzip1q_s64((int64x2_t)v385, (int64x2_t)v386);
  v393 = (float64x2_t)vzip2q_s64((int64x2_t)v385, (int64x2_t)v386);
  v394 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v390, v385.f64[0]), v391, v385, 1));
  v395 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v390, v386.f64[0]), v391, v386, 1));
  v396 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v392, v386.f64[0]), v393, v386, 1));
  v397 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v390, v388.f64[0]), v391, v388, 1));
  v398 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v392, v388.f64[0]), v393, v388, 1));
  v399 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v390, v389.f64[0]), v391, v389, 1));
  v400 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v392, v389.f64[0]), v393, v389, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v392, v385.f64[0]), v393, v385, 1));
  *(float64x2_t *)(result + 16) = v394;
  *(float64x2_t *)(result + 32) = v396;
  *(float64x2_t *)(result + 48) = v395;
  *(float64x2_t *)(result + 64) = v398;
  *(float64x2_t *)(result + 80) = v397;
  *(float64x2_t *)(result + 96) = v400;
  *(float64x2_t *)(result + 112) = v399;
  v13 = *v12;
  v401 = a2[32];
  if (!a2[32] || !a2[40])
  {
LABEL_249:
    if (!v401)
      goto LABEL_270;
    goto LABEL_250;
  }
  v402 = *((_DWORD *)a2 + 9);
  v403 = *((unsigned int *)a2 + 11);
  if (v403 < v402)
  {
    v401 = 1;
    goto LABEL_249;
  }
  v412 = *(_QWORD *)(v13 + 4776);
  v413 = (*(_DWORD *)(v13 + 4800) * v403);
  v414 = v412 + 16 * v413;
  v1770 = v414;
  v415 = *(_QWORD *)(*(_QWORD *)(v13 + 4808) + 8 * v403);
  v416 = (char *)(v412 + 16 * (v415 + v413));
  v1771 = v416;
  v1772 = v403;
  if (v415)
  {
    v417 = 16 * v415;
    while (*(_DWORD *)v414 < v402)
    {
      v414 += 16;
      v417 -= 16;
      if (!v417)
        goto LABEL_777;
    }
  }
  if ((char *)v414 != v416)
  {
    if (*(_DWORD *)v414 == v402)
    {
      result = *(_QWORD *)(v13 + 4704) + 8 * *(_QWORD *)(v414 + 8);
      goto LABEL_778;
    }
    v416 = (char *)v414;
  }
LABEL_777:
  result = sub_20F55C858((unint64_t *)(v13 + 4688), (uint64_t)&v1770, v402, v416);
LABEL_778:
  v1839 = vld2q_f64(v384);
  v1851 = vld2q_f64(v387);
  v1689 = a3[28];
  v1690 = a3[29];
  v1691 = a3[30];
  v1692 = a3[31];
  v1693 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1851.val[0], v1689.f64[0]), v1851.val[1], v1689, 1));
  v1694 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1851.val[0], v1690.f64[0]), v1851.val[1], v1690, 1));
  v1695 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1839.val[0], v1690.f64[0]), v1839.val[1], v1690, 1));
  v1696 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1851.val[0], v1691.f64[0]), v1851.val[1], v1691, 1));
  v1697 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1839.val[0], v1691.f64[0]), v1839.val[1], v1691, 1));
  v1698 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1851.val[0], v1692.f64[0]), v1851.val[1], v1692, 1));
  v1699 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1839.val[0], v1692.f64[0]), v1839.val[1], v1692, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1839.val[0], v1689.f64[0]), v1839.val[1], v1689, 1));
  *(float64x2_t *)(result + 16) = v1693;
  *(float64x2_t *)(result + 32) = v1695;
  *(float64x2_t *)(result + 48) = v1694;
  *(float64x2_t *)(result + 64) = v1697;
  *(float64x2_t *)(result + 80) = v1696;
  *(float64x2_t *)(result + 96) = v1699;
  *(float64x2_t *)(result + 112) = v1698;
  v13 = *v12;
  v401 = a2[32];
  if (!a2[32])
    goto LABEL_270;
LABEL_250:
  if (a2[48])
  {
    v404 = *((_DWORD *)a2 + 9);
    v405 = *((unsigned int *)a2 + 13);
    v406 = *(_QWORD *)(v13 + 5784);
    v407 = (*(_DWORD *)(v13 + 5808) * v405);
    v408 = v406 + 16 * v407;
    v1770 = v408;
    v409 = *(_QWORD *)(*(_QWORD *)(v13 + 5816) + 8 * v405);
    v410 = (char *)(v406 + 16 * (v409 + v407));
    v1771 = v410;
    v1772 = v405;
    if (v409)
    {
      v411 = 16 * v409;
      while (*(_DWORD *)v408 < v404)
      {
        v408 += 16;
        v411 -= 16;
        if (!v411)
          goto LABEL_268;
      }
    }
    if ((char *)v408 != v410)
    {
      if (*(_DWORD *)v408 == v404)
      {
        result = *(_QWORD *)(v13 + 5712) + 8 * *(_QWORD *)(v408 + 8);
LABEL_269:
        v1820 = vld2q_f64(v384);
        v1845 = vld2q_f64(v387);
        v418 = a3[32];
        v419 = a3[33];
        v420 = a3[34];
        v421 = a3[35];
        v422 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1845.val[0], v418.f64[0]), v1845.val[1], v418, 1));
        v423 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1845.val[0], v419.f64[0]), v1845.val[1], v419, 1));
        v424 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1820.val[0], v419.f64[0]), v1820.val[1], v419, 1));
        v425 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1845.val[0], v420.f64[0]), v1845.val[1], v420, 1));
        v426 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1820.val[0], v420.f64[0]), v1820.val[1], v420, 1));
        v427 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1845.val[0], v421.f64[0]), v1845.val[1], v421, 1));
        v428 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1820.val[0], v421.f64[0]), v1820.val[1], v421, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1820.val[0], v418.f64[0]), v1820.val[1], v418, 1));
        *(float64x2_t *)(result + 16) = v422;
        *(float64x2_t *)(result + 32) = v424;
        *(float64x2_t *)(result + 48) = v423;
        *(float64x2_t *)(result + 64) = v426;
        *(float64x2_t *)(result + 80) = v425;
        *(float64x2_t *)(result + 96) = v428;
        *(float64x2_t *)(result + 112) = v427;
        v13 = *v12;
        v401 = a2[32];
        goto LABEL_270;
      }
      v410 = (char *)v408;
    }
LABEL_268:
    result = sub_20F55C858((unint64_t *)(v13 + 5696), (uint64_t)&v1770, v404, v410);
    goto LABEL_269;
  }
LABEL_270:
  if (v401 && a2[56])
  {
    v429 = *((_DWORD *)a2 + 9);
    v430 = *((unsigned int *)a2 + 15);
    v431 = *(_QWORD *)(v13 + 5784);
    v432 = (*(_DWORD *)(v13 + 5808) * v430);
    v433 = v431 + 16 * v432;
    v1770 = v433;
    v434 = *(_QWORD *)(*(_QWORD *)(v13 + 5816) + 8 * v430);
    v435 = (char *)(v431 + 16 * (v434 + v432));
    v1771 = v435;
    v1772 = v430;
    if (v434)
    {
      v436 = 16 * v434;
      while (*(_DWORD *)v433 < v429)
      {
        v433 += 16;
        v436 -= 16;
        if (!v436)
          goto LABEL_281;
      }
    }
    if ((char *)v433 != v435)
    {
      if (*(_DWORD *)v433 == v429)
      {
        result = *(_QWORD *)(v13 + 5712) + 8 * *(_QWORD *)(v433 + 8);
LABEL_282:
        v1821 = vld2q_f64(v384);
        v1846 = vld2q_f64(v387);
        v437 = a3[36];
        v438 = a3[37];
        v439 = a3[38];
        v440 = a3[39];
        v441 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1846.val[0], v437.f64[0]), v1846.val[1], v437, 1));
        v442 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1846.val[0], v438.f64[0]), v1846.val[1], v438, 1));
        v443 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1821.val[0], v438.f64[0]), v1821.val[1], v438, 1));
        v444 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1846.val[0], v439.f64[0]), v1846.val[1], v439, 1));
        v445 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1821.val[0], v439.f64[0]), v1821.val[1], v439, 1));
        v446 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1846.val[0], v440.f64[0]), v1846.val[1], v440, 1));
        v447 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1821.val[0], v440.f64[0]), v1821.val[1], v440, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1821.val[0], v437.f64[0]), v1821.val[1], v437, 1));
        *(float64x2_t *)(result + 16) = v441;
        *(float64x2_t *)(result + 32) = v443;
        *(float64x2_t *)(result + 48) = v442;
        *(float64x2_t *)(result + 64) = v445;
        *(float64x2_t *)(result + 80) = v444;
        *(float64x2_t *)(result + 96) = v447;
        *(float64x2_t *)(result + 112) = v446;
        v13 = *v12;
        v401 = a2[32];
        goto LABEL_283;
      }
      v435 = (char *)v433;
    }
LABEL_281:
    result = sub_20F55C858((unint64_t *)(v13 + 5696), (uint64_t)&v1770, v429, v435);
    goto LABEL_282;
  }
LABEL_283:
  if (v401 && a2[64])
  {
    v448 = *((_DWORD *)a2 + 9);
    v449 = *((unsigned int *)a2 + 17);
    v450 = *(_QWORD *)(v13 + 6792);
    v451 = (*(_DWORD *)(v13 + 6816) * v449);
    v452 = v450 + 16 * v451;
    v1770 = v452;
    v453 = *(_QWORD *)(*(_QWORD *)(v13 + 6824) + 8 * v449);
    v454 = (char *)(v450 + 16 * (v453 + v451));
    v1771 = v454;
    v1772 = v449;
    if (v453)
    {
      v455 = 16 * v453;
      while (*(_DWORD *)v452 < v448)
      {
        v452 += 16;
        v455 -= 16;
        if (!v455)
          goto LABEL_294;
      }
    }
    if ((char *)v452 != v454)
    {
      if (*(_DWORD *)v452 == v448)
      {
        result = *(_QWORD *)(v13 + 6720) + 8 * *(_QWORD *)(v452 + 8);
LABEL_295:
        v1787 = vld2q_f64(v384);
        v1811 = vld2q_f64(v387);
        v456 = a3[40];
        v457 = a3[41];
        v458 = a3[42];
        v459 = vmlaq_laneq_f64(vmulq_n_f64(v1787.val[0], v456.f64[0]), v1787.val[1], v456, 1);
        v460 = vmlaq_laneq_f64(vmulq_n_f64(v1811.val[0], v456.f64[0]), v1811.val[1], v456, 1);
        v461 = vmlaq_laneq_f64(vmulq_n_f64(v1787.val[0], v457.f64[0]), v1787.val[1], v457, 1);
        v462 = vmlaq_laneq_f64(vmulq_n_f64(v1811.val[0], v457.f64[0]), v1811.val[1], v457, 1);
        v463 = vmlaq_laneq_f64(vmulq_n_f64(v1787.val[0], v458.f64[0]), v1787.val[1], v458, 1);
        v464 = vaddq_f64(*(float64x2_t *)(result + 16), v460);
        v1787.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v462);
        v465 = vaddq_f64(*(float64x2_t *)(result + 32), v461);
        v1787.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1811.val[0], v458.f64[0]), v1811.val[1], v458, 1));
        v466 = vaddq_f64(*(float64x2_t *)(result + 64), v463);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v459);
        *(float64x2_t *)(result + 16) = v464;
        *(float64x2_t *)(result + 32) = v465;
        *(float64x2_t *)(result + 48) = v1787.val[1];
        *(float64x2_t *)(result + 64) = v466;
        *(float64x2_t *)(result + 80) = v1787.val[0];
        v13 = *v12;
        v401 = a2[32];
        goto LABEL_296;
      }
      v454 = (char *)v452;
    }
LABEL_294:
    result = sub_20F55C994((unint64_t *)(v13 + 6704), (uint64_t)&v1770, v448, v454);
    goto LABEL_295;
  }
LABEL_296:
  if (v401 && a2[72])
  {
    v467 = *((_DWORD *)a2 + 9);
    v468 = *((unsigned int *)a2 + 19);
    v469 = *(_QWORD *)(v13 + 6792);
    v470 = (*(_DWORD *)(v13 + 6816) * v468);
    v471 = v469 + 16 * v470;
    v1770 = v471;
    v472 = *(_QWORD *)(*(_QWORD *)(v13 + 6824) + 8 * v468);
    v473 = (char *)(v469 + 16 * (v472 + v470));
    v1771 = v473;
    v1772 = v468;
    if (v472)
    {
      v474 = 16 * v472;
      while (*(_DWORD *)v471 < v467)
      {
        v471 += 16;
        v474 -= 16;
        if (!v474)
          goto LABEL_307;
      }
    }
    if ((char *)v471 != v473)
    {
      if (*(_DWORD *)v471 == v467)
      {
        result = *(_QWORD *)(v13 + 6720) + 8 * *(_QWORD *)(v471 + 8);
LABEL_308:
        v1788 = vld2q_f64(v384);
        v1812 = vld2q_f64(v387);
        v475 = a3[43];
        v476 = a3[44];
        v477 = a3[45];
        v478 = vmlaq_laneq_f64(vmulq_n_f64(v1788.val[0], v475.f64[0]), v1788.val[1], v475, 1);
        v479 = vmlaq_laneq_f64(vmulq_n_f64(v1812.val[0], v475.f64[0]), v1812.val[1], v475, 1);
        v480 = vmlaq_laneq_f64(vmulq_n_f64(v1788.val[0], v476.f64[0]), v1788.val[1], v476, 1);
        v481 = vmlaq_laneq_f64(vmulq_n_f64(v1812.val[0], v476.f64[0]), v1812.val[1], v476, 1);
        v482 = vmlaq_laneq_f64(vmulq_n_f64(v1788.val[0], v477.f64[0]), v1788.val[1], v477, 1);
        v483 = vaddq_f64(*(float64x2_t *)(result + 16), v479);
        v1788.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v481);
        v484 = vaddq_f64(*(float64x2_t *)(result + 32), v480);
        v1788.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1812.val[0], v477.f64[0]), v1812.val[1], v477, 1));
        v485 = vaddq_f64(*(float64x2_t *)(result + 64), v482);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v478);
        *(float64x2_t *)(result + 16) = v483;
        *(float64x2_t *)(result + 32) = v484;
        *(float64x2_t *)(result + 48) = v1788.val[1];
        *(float64x2_t *)(result + 64) = v485;
        *(float64x2_t *)(result + 80) = v1788.val[0];
        v13 = *v12;
        goto LABEL_309;
      }
      v473 = (char *)v471;
    }
LABEL_307:
    result = sub_20F55C994((unint64_t *)(v13 + 6704), (uint64_t)&v1770, v467, v473);
    goto LABEL_308;
  }
LABEL_309:
  v486 = a2[24];
  if (a2[24] && *a2)
  {
    v488 = *((_DWORD *)a2 + 7);
    v489 = *((unsigned int *)a2 + 1);
    v490 = *(_QWORD *)(v13 + 3192);
    v491 = (*(_DWORD *)(v13 + 3216) * v489);
    v492 = v490 + 16 * v491;
    v1770 = v492;
    v493 = *(_QWORD *)(*(_QWORD *)(v13 + 3224) + 8 * v489);
    v494 = (char *)(v490 + 16 * (v493 + v491));
    v1771 = v494;
    v1772 = v489;
    if (v493)
    {
      v495 = 16 * v493;
      while (*(_DWORD *)v492 < v488)
      {
        v492 += 16;
        v495 -= 16;
        if (!v495)
          goto LABEL_320;
      }
    }
    if ((char *)v492 != v494)
    {
      if (*(_DWORD *)v492 == v488)
      {
        result = *(_QWORD *)(v13 + 3120) + 8 * *(_QWORD *)(v492 + 8);
LABEL_321:
        v487 = a3[18].f64;
        v1773 = vld2q_f64(v487);
        v496 = a3[20].f64;
        v1789 = vld2q_f64(v496);
        v497 = a3[22].f64;
        v498 = a3[1];
        v499 = a3[2];
        v500 = a3[3];
        v501 = a3[4];
        v502 = a3[5];
        v503 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[0], a3->f64[0]), v1773.val[1], *a3, 1);
        v504 = vmlaq_laneq_f64(vmulq_n_f64(v1789.val[0], a3->f64[0]), v1789.val[1], *a3, 1);
        v505 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[0], v498.f64[0]), v1773.val[1], v498, 1);
        v506 = vmlaq_laneq_f64(vmulq_n_f64(v1789.val[0], v498.f64[0]), v1789.val[1], v498, 1);
        v507 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[0], v499.f64[0]), v1773.val[1], v499, 1);
        v508 = vmlaq_laneq_f64(vmulq_n_f64(v1789.val[0], v499.f64[0]), v1789.val[1], v499, 1);
        v509 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[0], v500.f64[0]), v1773.val[1], v500, 1);
        v510 = vmlaq_laneq_f64(vmulq_n_f64(v1789.val[0], v500.f64[0]), v1789.val[1], v500, 1);
        v511 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[0], v501.f64[0]), v1773.val[1], v501, 1);
        v512 = vmlaq_laneq_f64(vmulq_n_f64(v1789.val[0], v501.f64[0]), v1789.val[1], v501, 1);
        v513 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[0], v502.f64[0]), v1773.val[1], v502, 1);
        v1773.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1789.val[0], v502.f64[0]), v1789.val[1], v502, 1);
        *(float64x2x2_t *)((char *)&v1773 + 16) = vld2q_f64(v497);
        v514 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[1], v498.f64[0]), v1789.val[0], v498, 1);
        v515 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[1], v499.f64[0]), v1789.val[0], v499, 1);
        v516 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[1], v500.f64[0]), v1789.val[0], v500, 1);
        v517 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[1], v501.f64[0]), v1789.val[0], v501, 1);
        v518 = vmlaq_laneq_f64(vmulq_n_f64(v1773.val[1], v502.f64[0]), v1789.val[0], v502, 1);
        v1773.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1773.val[1], a3->f64[0]), v1789.val[0], *a3, 1));
        v1789.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v504);
        v519 = vaddq_f64(*(float64x2_t *)result, v503);
        v520 = vaddq_f64(*(float64x2_t *)(result + 80), v514);
        v521 = vaddq_f64(*(float64x2_t *)(result + 64), v506);
        v1789.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v505);
        v522 = vaddq_f64(*(float64x2_t *)(result + 128), v515);
        v523 = vaddq_f64(*(float64x2_t *)(result + 112), v508);
        v524 = vaddq_f64(*(float64x2_t *)(result + 96), v507);
        v525 = vaddq_f64(*(float64x2_t *)(result + 176), v516);
        v526 = vaddq_f64(*(float64x2_t *)(result + 160), v510);
        v527 = vaddq_f64(*(float64x2_t *)(result + 144), v509);
        v528 = *(float64x2_t *)(result + 240);
        v529 = vaddq_f64(*(float64x2_t *)(result + 224), v517);
        v530 = vaddq_f64(*(float64x2_t *)(result + 208), v512);
        v531 = vaddq_f64(*(float64x2_t *)(result + 192), v511);
        v532 = vaddq_f64(*(float64x2_t *)(result + 272), v518);
        v1773.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1773.val[0]);
        *(float64x2_t *)result = v519;
        *(float64x2_t *)(result + 16) = v1789.val[1];
        *(float64x2_t *)(result + 32) = v1773.val[1];
        *(float64x2_t *)(result + 48) = v1789.val[0];
        *(float64x2_t *)(result + 64) = v521;
        *(float64x2_t *)(result + 80) = v520;
        *(float64x2_t *)(result + 96) = v524;
        *(float64x2_t *)(result + 112) = v523;
        *(float64x2_t *)(result + 128) = v522;
        *(float64x2_t *)(result + 144) = v527;
        *(float64x2_t *)(result + 160) = v526;
        *(float64x2_t *)(result + 176) = v525;
        *(float64x2_t *)(result + 192) = v531;
        *(float64x2_t *)(result + 208) = v530;
        *(float64x2_t *)(result + 224) = v529;
        *(float64x2_t *)(result + 240) = vaddq_f64(v528, v513);
        *(float64x2_t *)(result + 256) = v1773.val[0];
        *(float64x2_t *)(result + 272) = v532;
        v13 = *v12;
        v486 = a2[24];
        goto LABEL_322;
      }
      v494 = (char *)v492;
    }
LABEL_320:
    result = sub_20F55CAD0((unint64_t *)(v13 + 3104), (uint64_t)&v1770, v488, v494);
    goto LABEL_321;
  }
LABEL_322:
  if (v486 && a2[8])
  {
    v534 = *((_DWORD *)a2 + 7);
    v535 = *((unsigned int *)a2 + 3);
    v536 = *(_QWORD *)(v13 + 3192);
    v537 = (*(_DWORD *)(v13 + 3216) * v535);
    v538 = v536 + 16 * v537;
    v1770 = v538;
    v539 = *(_QWORD *)(*(_QWORD *)(v13 + 3224) + 8 * v535);
    v540 = (char *)(v536 + 16 * (v539 + v537));
    v1771 = v540;
    v1772 = v535;
    if (v539)
    {
      v541 = 16 * v539;
      while (*(_DWORD *)v538 < v534)
      {
        v538 += 16;
        v541 -= 16;
        if (!v541)
          goto LABEL_333;
      }
    }
    if ((char *)v538 != v540)
    {
      if (*(_DWORD *)v538 == v534)
      {
        result = *(_QWORD *)(v13 + 3120) + 8 * *(_QWORD *)(v538 + 8);
LABEL_334:
        v533 = a3[18].f64;
        v1774 = vld2q_f64(v533);
        v542 = a3[20].f64;
        v1790 = vld2q_f64(v542);
        v543 = a3[22].f64;
        v544 = a3[6];
        v545 = a3[7];
        v546 = a3[8];
        v547 = a3[9];
        v548 = a3[10];
        v549 = a3[11];
        v550 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[0], v544.f64[0]), v1774.val[1], v544, 1);
        v551 = vmlaq_laneq_f64(vmulq_n_f64(v1790.val[0], v544.f64[0]), v1790.val[1], v544, 1);
        v552 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[0], v545.f64[0]), v1774.val[1], v545, 1);
        v553 = vmlaq_laneq_f64(vmulq_n_f64(v1790.val[0], v545.f64[0]), v1790.val[1], v545, 1);
        v554 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[0], v546.f64[0]), v1774.val[1], v546, 1);
        v555 = vmlaq_laneq_f64(vmulq_n_f64(v1790.val[0], v546.f64[0]), v1790.val[1], v546, 1);
        v556 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[0], v547.f64[0]), v1774.val[1], v547, 1);
        v557 = vmlaq_laneq_f64(vmulq_n_f64(v1790.val[0], v547.f64[0]), v1790.val[1], v547, 1);
        v558 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[0], v548.f64[0]), v1774.val[1], v548, 1);
        v559 = vmlaq_laneq_f64(vmulq_n_f64(v1790.val[0], v548.f64[0]), v1790.val[1], v548, 1);
        v560 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[0], v549.f64[0]), v1774.val[1], v549, 1);
        v1774.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1790.val[0], v549.f64[0]), v1790.val[1], v549, 1);
        *(float64x2x2_t *)((char *)&v1774 + 16) = vld2q_f64(v543);
        v1790.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[1], v544.f64[0]), v1790.val[0], v544, 1);
        v561 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[1], v545.f64[0]), v1790.val[0], v545, 1);
        v562 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[1], v546.f64[0]), v1790.val[0], v546, 1);
        v563 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[1], v547.f64[0]), v1790.val[0], v547, 1);
        v564 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[1], v548.f64[0]), v1790.val[0], v548, 1);
        v565 = vmlaq_laneq_f64(vmulq_n_f64(v1774.val[1], v549.f64[0]), v1790.val[0], v549, 1);
        v1774.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1790.val[1]);
        v1790.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v551);
        v566 = vaddq_f64(*(float64x2_t *)result, v550);
        v567 = vaddq_f64(*(float64x2_t *)(result + 80), v561);
        v568 = vaddq_f64(*(float64x2_t *)(result + 64), v553);
        v1790.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v552);
        v569 = vaddq_f64(*(float64x2_t *)(result + 128), v562);
        v570 = vaddq_f64(*(float64x2_t *)(result + 112), v555);
        v571 = vaddq_f64(*(float64x2_t *)(result + 96), v554);
        v572 = vaddq_f64(*(float64x2_t *)(result + 176), v563);
        v573 = vaddq_f64(*(float64x2_t *)(result + 160), v557);
        v574 = vaddq_f64(*(float64x2_t *)(result + 144), v556);
        v575 = *(float64x2_t *)(result + 240);
        v576 = vaddq_f64(*(float64x2_t *)(result + 224), v564);
        v577 = vaddq_f64(*(float64x2_t *)(result + 208), v559);
        v578 = vaddq_f64(*(float64x2_t *)(result + 192), v558);
        v579 = vaddq_f64(*(float64x2_t *)(result + 272), v565);
        v1774.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1774.val[0]);
        *(float64x2_t *)result = v566;
        *(float64x2_t *)(result + 16) = v1790.val[1];
        *(float64x2_t *)(result + 32) = v1774.val[1];
        *(float64x2_t *)(result + 48) = v1790.val[0];
        *(float64x2_t *)(result + 64) = v568;
        *(float64x2_t *)(result + 80) = v567;
        *(float64x2_t *)(result + 96) = v571;
        *(float64x2_t *)(result + 112) = v570;
        *(float64x2_t *)(result + 128) = v569;
        *(float64x2_t *)(result + 144) = v574;
        *(float64x2_t *)(result + 160) = v573;
        *(float64x2_t *)(result + 176) = v572;
        *(float64x2_t *)(result + 192) = v578;
        *(float64x2_t *)(result + 208) = v577;
        *(float64x2_t *)(result + 224) = v576;
        *(float64x2_t *)(result + 240) = vaddq_f64(v575, v560);
        *(float64x2_t *)(result + 256) = v1774.val[0];
        *(float64x2_t *)(result + 272) = v579;
        v13 = *v12;
        v486 = a2[24];
        goto LABEL_335;
      }
      v540 = (char *)v538;
    }
LABEL_333:
    result = sub_20F55CAD0((unint64_t *)(v13 + 3104), (uint64_t)&v1770, v534, v540);
    goto LABEL_334;
  }
LABEL_335:
  if (!v486 || !a2[16])
    goto LABEL_349;
  v580 = *((_DWORD *)a2 + 7);
  v581 = *((unsigned int *)a2 + 5);
  if (v581 < v580)
    goto LABEL_351;
  v583 = *(_QWORD *)(v13 + 168);
  v584 = (*(_DWORD *)(v13 + 192) * v581);
  v585 = v583 + 16 * v584;
  v1770 = v585;
  v586 = *(_QWORD *)(*(_QWORD *)(v13 + 200) + 8 * v581);
  v587 = (char *)(v583 + 16 * (v586 + v584));
  v1771 = v587;
  v1772 = v581;
  if (v586)
  {
    v588 = 16 * v586;
    while (*(_DWORD *)v585 < v580)
    {
      v585 += 16;
      v588 -= 16;
      if (!v588)
        goto LABEL_347;
    }
  }
  if ((char *)v585 == v587)
    goto LABEL_347;
  if (*(_DWORD *)v585 != v580)
  {
    v587 = (char *)v585;
LABEL_347:
    result = sub_20F55CAD0((unint64_t *)(v13 + 80), (uint64_t)&v1770, v580, v587);
    goto LABEL_348;
  }
  result = *(_QWORD *)(v13 + 96) + 8 * *(_QWORD *)(v585 + 8);
LABEL_348:
  v582 = a3[18].f64;
  v1775 = vld2q_f64(v582);
  v589 = a3[20].f64;
  v1791 = vld2q_f64(v589);
  v590 = a3[22].f64;
  v591 = a3[12];
  v592 = a3[13];
  v593 = a3[14];
  v594 = a3[15];
  v595 = a3[16];
  v596 = a3[17];
  v597 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[0], v591.f64[0]), v1775.val[1], v591, 1);
  v598 = vmlaq_laneq_f64(vmulq_n_f64(v1791.val[0], v591.f64[0]), v1791.val[1], v591, 1);
  v599 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[0], v592.f64[0]), v1775.val[1], v592, 1);
  v600 = vmlaq_laneq_f64(vmulq_n_f64(v1791.val[0], v592.f64[0]), v1791.val[1], v592, 1);
  v601 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[0], v593.f64[0]), v1775.val[1], v593, 1);
  v602 = vmlaq_laneq_f64(vmulq_n_f64(v1791.val[0], v593.f64[0]), v1791.val[1], v593, 1);
  v603 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[0], v594.f64[0]), v1775.val[1], v594, 1);
  v604 = vmlaq_laneq_f64(vmulq_n_f64(v1791.val[0], v594.f64[0]), v1791.val[1], v594, 1);
  v605 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[0], v595.f64[0]), v1775.val[1], v595, 1);
  v606 = vmlaq_laneq_f64(vmulq_n_f64(v1791.val[0], v595.f64[0]), v1791.val[1], v595, 1);
  v607 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[0], v596.f64[0]), v1775.val[1], v596, 1);
  v1775.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1791.val[0], v596.f64[0]), v1791.val[1], v596, 1);
  *(float64x2x2_t *)((char *)&v1775 + 16) = vld2q_f64(v590);
  v1791.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[1], v591.f64[0]), v1791.val[0], v591, 1);
  v608 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[1], v592.f64[0]), v1791.val[0], v592, 1);
  v609 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[1], v593.f64[0]), v1791.val[0], v593, 1);
  v610 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[1], v594.f64[0]), v1791.val[0], v594, 1);
  v611 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[1], v595.f64[0]), v1791.val[0], v595, 1);
  v612 = vmlaq_laneq_f64(vmulq_n_f64(v1775.val[1], v596.f64[0]), v1791.val[0], v596, 1);
  v1775.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1791.val[1]);
  v1791.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v598);
  v613 = vaddq_f64(*(float64x2_t *)result, v597);
  v614 = vaddq_f64(*(float64x2_t *)(result + 80), v608);
  v615 = vaddq_f64(*(float64x2_t *)(result + 64), v600);
  v1791.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v599);
  v616 = vaddq_f64(*(float64x2_t *)(result + 128), v609);
  v617 = vaddq_f64(*(float64x2_t *)(result + 112), v602);
  v618 = vaddq_f64(*(float64x2_t *)(result + 96), v601);
  v619 = vaddq_f64(*(float64x2_t *)(result + 176), v610);
  v620 = vaddq_f64(*(float64x2_t *)(result + 160), v604);
  v621 = vaddq_f64(*(float64x2_t *)(result + 144), v603);
  v622 = *(float64x2_t *)(result + 240);
  v623 = vaddq_f64(*(float64x2_t *)(result + 224), v611);
  v624 = vaddq_f64(*(float64x2_t *)(result + 208), v606);
  v625 = vaddq_f64(*(float64x2_t *)(result + 192), v605);
  v626 = vaddq_f64(*(float64x2_t *)(result + 272), v612);
  v1775.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1775.val[0]);
  *(float64x2_t *)result = v613;
  *(float64x2_t *)(result + 16) = v1791.val[1];
  *(float64x2_t *)(result + 32) = v1775.val[1];
  *(float64x2_t *)(result + 48) = v1791.val[0];
  *(float64x2_t *)(result + 64) = v615;
  *(float64x2_t *)(result + 80) = v614;
  *(float64x2_t *)(result + 96) = v618;
  *(float64x2_t *)(result + 112) = v617;
  *(float64x2_t *)(result + 128) = v616;
  *(float64x2_t *)(result + 144) = v621;
  *(float64x2_t *)(result + 160) = v620;
  *(float64x2_t *)(result + 176) = v619;
  *(float64x2_t *)(result + 192) = v625;
  *(float64x2_t *)(result + 208) = v624;
  *(float64x2_t *)(result + 224) = v623;
  *(float64x2_t *)(result + 240) = vaddq_f64(v622, v607);
  *(float64x2_t *)(result + 256) = v1775.val[0];
  *(float64x2_t *)(result + 272) = v626;
  v13 = *v12;
  v486 = a2[24];
LABEL_349:
  if (!v486)
    goto LABEL_439;
  v580 = *((_DWORD *)a2 + 7);
LABEL_351:
  v627 = *(_QWORD *)(v13 + 168);
  v628 = *(_DWORD *)(v13 + 192) * v580;
  v629 = v627 + 16 * v628;
  v1770 = v629;
  v630 = *(_QWORD *)(*(_QWORD *)(v13 + 200) + 8 * v580);
  v631 = (char *)(v627 + 16 * (v630 + v628));
  v1771 = v631;
  v1772 = v580;
  if (v630)
  {
    v632 = 16 * v630;
    while (*(_DWORD *)v629 < v580)
    {
      v629 += 16;
      v632 -= 16;
      if (!v632)
        goto LABEL_360;
    }
  }
  if ((char *)v629 == v631)
    goto LABEL_360;
  if (*(_DWORD *)v629 != v580)
  {
    v631 = (char *)v629;
LABEL_360:
    result = sub_20F55CAD0((unint64_t *)(v13 + 80), (uint64_t)&v1770, v580, v631);
    goto LABEL_361;
  }
  result = *(_QWORD *)(v13 + 96) + 8 * *(_QWORD *)(v629 + 8);
LABEL_361:
  v633 = a3[18];
  v634 = a3[19];
  v635 = a3[20];
  v636 = a3[21];
  v637 = a3[22];
  v638 = a3[23];
  v639 = (float64x2_t)vzip1q_s64((int64x2_t)v635, (int64x2_t)v636);
  *(_QWORD *)&v640.f64[0] = vdupq_laneq_s64((int64x2_t)v635, 1).u64[0];
  v640.f64[1] = a3[21].f64[1];
  v641 = (float64x2_t)vzip1q_s64((int64x2_t)v637, (int64x2_t)v638);
  *(_QWORD *)&v642.f64[0] = vdupq_laneq_s64((int64x2_t)v637, 1).u64[0];
  v642.f64[1] = a3[23].f64[1];
  v643 = (float64x2_t)vzip1q_s64((int64x2_t)v633, (int64x2_t)v634);
  v644 = (float64x2_t)vzip2q_s64((int64x2_t)v633, (int64x2_t)v634);
  v645 = vmlaq_laneq_f64(vmulq_n_f64(v643, v633.f64[0]), v644, v633, 1);
  v646 = vmlaq_laneq_f64(vmulq_n_f64(v639, v633.f64[0]), v640, v633, 1);
  v647 = vmlaq_laneq_f64(vmulq_n_f64(v641, v633.f64[0]), v642, v633, 1);
  v648 = vmlaq_laneq_f64(vmulq_n_f64(v643, v634.f64[0]), v644, v634, 1);
  v649 = vmlaq_laneq_f64(vmulq_n_f64(v639, v634.f64[0]), v640, v634, 1);
  v650 = vmlaq_laneq_f64(vmulq_n_f64(v641, v634.f64[0]), v642, v634, 1);
  v651 = vmlaq_laneq_f64(vmulq_n_f64(v643, v635.f64[0]), v644, v635, 1);
  v652 = vmlaq_laneq_f64(vmulq_n_f64(v639, v635.f64[0]), v640, v635, 1);
  v653 = vmlaq_laneq_f64(vmulq_n_f64(v641, v635.f64[0]), v642, v635, 1);
  v654 = vmlaq_laneq_f64(vmulq_n_f64(v643, v636.f64[0]), v644, v636, 1);
  v655 = vmlaq_laneq_f64(vmulq_n_f64(v639, v636.f64[0]), v640, v636, 1);
  v656 = vmlaq_laneq_f64(vmulq_n_f64(v641, v636.f64[0]), v642, v636, 1);
  v657 = vmlaq_laneq_f64(vmulq_n_f64(v643, v637.f64[0]), v644, v637, 1);
  v658 = vmlaq_laneq_f64(vmulq_n_f64(v639, v637.f64[0]), v640, v637, 1);
  v659 = vmlaq_laneq_f64(vmulq_n_f64(v641, v637.f64[0]), v642, v637, 1);
  v660 = vmlaq_laneq_f64(vmulq_n_f64(v643, v638.f64[0]), v644, v638, 1);
  v661 = vmlaq_laneq_f64(vmulq_n_f64(v639, v638.f64[0]), v640, v638, 1);
  v662 = vmlaq_laneq_f64(vmulq_n_f64(v641, v638.f64[0]), v642, v638, 1);
  v663 = vaddq_f64(*(float64x2_t *)(result + 32), v647);
  v664 = vaddq_f64(*(float64x2_t *)(result + 16), v646);
  v665 = vaddq_f64(*(float64x2_t *)result, v645);
  v666 = vaddq_f64(*(float64x2_t *)(result + 80), v650);
  v667 = vaddq_f64(*(float64x2_t *)(result + 64), v649);
  v668 = vaddq_f64(*(float64x2_t *)(result + 48), v648);
  v669 = vaddq_f64(*(float64x2_t *)(result + 128), v653);
  v670 = vaddq_f64(*(float64x2_t *)(result + 112), v652);
  v671 = vaddq_f64(*(float64x2_t *)(result + 96), v651);
  v672 = vaddq_f64(*(float64x2_t *)(result + 176), v656);
  v673 = vaddq_f64(*(float64x2_t *)(result + 160), v655);
  v674 = vaddq_f64(*(float64x2_t *)(result + 144), v654);
  v675 = *(float64x2_t *)(result + 240);
  v676 = vaddq_f64(*(float64x2_t *)(result + 224), v659);
  v677 = vaddq_f64(*(float64x2_t *)(result + 208), v658);
  v678 = vaddq_f64(*(float64x2_t *)(result + 192), v657);
  v679 = vaddq_f64(*(float64x2_t *)(result + 272), v662);
  v680 = vaddq_f64(*(float64x2_t *)(result + 256), v661);
  *(float64x2_t *)result = v665;
  *(float64x2_t *)(result + 16) = v664;
  *(float64x2_t *)(result + 32) = v663;
  *(float64x2_t *)(result + 48) = v668;
  *(float64x2_t *)(result + 64) = v667;
  *(float64x2_t *)(result + 80) = v666;
  *(float64x2_t *)(result + 96) = v671;
  *(float64x2_t *)(result + 112) = v670;
  *(float64x2_t *)(result + 128) = v669;
  *(float64x2_t *)(result + 144) = v674;
  *(float64x2_t *)(result + 160) = v673;
  *(float64x2_t *)(result + 176) = v672;
  *(float64x2_t *)(result + 192) = v678;
  *(float64x2_t *)(result + 208) = v677;
  *(float64x2_t *)(result + 224) = v676;
  *(float64x2_t *)(result + 240) = vaddq_f64(v675, v660);
  *(float64x2_t *)(result + 256) = v680;
  *(float64x2_t *)(result + 272) = v679;
  v681 = a3[18].f64;
  v682 = a3[20].f64;
  v683 = a3[22].f64;
  v13 = *v12;
  v684 = a2[24];
  if (a2[24] && a2[32])
  {
    v685 = *((_DWORD *)a2 + 7);
    v686 = *((unsigned int *)a2 + 9);
    v687 = *(_QWORD *)(v13 + 4200);
    v688 = (*(_DWORD *)(v13 + 4224) * v686);
    v689 = v687 + 16 * v688;
    v1770 = v689;
    v690 = *(_QWORD *)(*(_QWORD *)(v13 + 4232) + 8 * v686);
    v691 = (char *)(v687 + 16 * (v690 + v688));
    v1771 = v691;
    v1772 = v686;
    if (v690)
    {
      v692 = 16 * v690;
      while (*(_DWORD *)v689 < v685)
      {
        v689 += 16;
        v692 -= 16;
        if (!v692)
          goto LABEL_372;
      }
    }
    if ((char *)v689 != v691)
    {
      if (*(_DWORD *)v689 == v685)
      {
        result = *(_QWORD *)(v13 + 4128) + 8 * *(_QWORD *)(v689 + 8);
LABEL_373:
        v1822 = vld2q_f64(v681);
        v693 = *(float64x2_t *)(result + 144);
        v1853 = vld2q_f64(v682);
        v1873 = vld2q_f64(v683);
        v694 = a3[24];
        v695 = a3[25];
        v696 = a3[26];
        v697 = a3[27];
        v698 = vmlaq_laneq_f64(vmulq_n_f64(v1822.val[0], v694.f64[0]), v1822.val[1], v694, 1);
        v699 = vmlaq_laneq_f64(vmulq_n_f64(v1853.val[0], v694.f64[0]), v1853.val[1], v694, 1);
        v700 = vmlaq_laneq_f64(vmulq_n_f64(v1873.val[0], v694.f64[0]), v1873.val[1], v694, 1);
        v701 = vmlaq_laneq_f64(vmulq_n_f64(v1822.val[0], v695.f64[0]), v1822.val[1], v695, 1);
        v702 = vmlaq_laneq_f64(vmulq_n_f64(v1853.val[0], v695.f64[0]), v1853.val[1], v695, 1);
        v703 = vmlaq_laneq_f64(vmulq_n_f64(v1873.val[0], v695.f64[0]), v1873.val[1], v695, 1);
        v704 = vmlaq_laneq_f64(vmulq_n_f64(v1822.val[0], v696.f64[0]), v1822.val[1], v696, 1);
        v705 = vmlaq_laneq_f64(vmulq_n_f64(v1853.val[0], v696.f64[0]), v1853.val[1], v696, 1);
        v706 = vmlaq_laneq_f64(vmulq_n_f64(v1873.val[0], v696.f64[0]), v1873.val[1], v696, 1);
        v707 = vmlaq_laneq_f64(vmulq_n_f64(v1822.val[0], v697.f64[0]), v1822.val[1], v697, 1);
        v708 = vaddq_f64(*(float64x2_t *)(result + 32), v700);
        v709 = vaddq_f64(*(float64x2_t *)(result + 16), v699);
        v710 = vaddq_f64(*(float64x2_t *)(result + 80), v703);
        v711 = vaddq_f64(*(float64x2_t *)(result + 64), v702);
        v712 = vaddq_f64(*(float64x2_t *)(result + 48), v701);
        v713 = vaddq_f64(*(float64x2_t *)(result + 128), v706);
        v714 = vaddq_f64(*(float64x2_t *)(result + 112), v705);
        v715 = vaddq_f64(*(float64x2_t *)(result + 96), v704);
        v1822.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1873.val[0], v697.f64[0]), v1873.val[1], v697, 1));
        v1822.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1853.val[0], v697.f64[0]), v1853.val[1], v697, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v698);
        *(float64x2_t *)(result + 16) = v709;
        *(float64x2_t *)(result + 32) = v708;
        *(float64x2_t *)(result + 48) = v712;
        *(float64x2_t *)(result + 64) = v711;
        *(float64x2_t *)(result + 80) = v710;
        *(float64x2_t *)(result + 96) = v715;
        *(float64x2_t *)(result + 112) = v714;
        *(float64x2_t *)(result + 128) = v713;
        *(float64x2_t *)(result + 144) = vaddq_f64(v693, v707);
        *(float64x2x2_t *)(result + 160) = v1822;
        v13 = *v12;
        v684 = a2[24];
        goto LABEL_374;
      }
      v691 = (char *)v689;
    }
LABEL_372:
    result = sub_20F55CC0C((unint64_t *)(v13 + 4112), (uint64_t)&v1770, v685, v691);
    goto LABEL_373;
  }
LABEL_374:
  if (v684 && a2[40])
  {
    v716 = *((_DWORD *)a2 + 7);
    v717 = *((unsigned int *)a2 + 11);
    v718 = *(_QWORD *)(v13 + 4200);
    v719 = (*(_DWORD *)(v13 + 4224) * v717);
    v720 = v718 + 16 * v719;
    v1770 = v720;
    v721 = *(_QWORD *)(*(_QWORD *)(v13 + 4232) + 8 * v717);
    v722 = (char *)(v718 + 16 * (v721 + v719));
    v1771 = v722;
    v1772 = v717;
    if (v721)
    {
      v723 = 16 * v721;
      while (*(_DWORD *)v720 < v716)
      {
        v720 += 16;
        v723 -= 16;
        if (!v723)
          goto LABEL_385;
      }
    }
    if ((char *)v720 != v722)
    {
      if (*(_DWORD *)v720 == v716)
      {
        result = *(_QWORD *)(v13 + 4128) + 8 * *(_QWORD *)(v720 + 8);
LABEL_386:
        v1823 = vld2q_f64(v681);
        v724 = *(float64x2_t *)(result + 144);
        v1854 = vld2q_f64(v682);
        v1874 = vld2q_f64(v683);
        v725 = a3[28];
        v726 = a3[29];
        v727 = a3[30];
        v728 = a3[31];
        v729 = vmlaq_laneq_f64(vmulq_n_f64(v1823.val[0], v725.f64[0]), v1823.val[1], v725, 1);
        v730 = vmlaq_laneq_f64(vmulq_n_f64(v1854.val[0], v725.f64[0]), v1854.val[1], v725, 1);
        v731 = vmlaq_laneq_f64(vmulq_n_f64(v1874.val[0], v725.f64[0]), v1874.val[1], v725, 1);
        v732 = vmlaq_laneq_f64(vmulq_n_f64(v1823.val[0], v726.f64[0]), v1823.val[1], v726, 1);
        v733 = vmlaq_laneq_f64(vmulq_n_f64(v1854.val[0], v726.f64[0]), v1854.val[1], v726, 1);
        v734 = vmlaq_laneq_f64(vmulq_n_f64(v1874.val[0], v726.f64[0]), v1874.val[1], v726, 1);
        v735 = vmlaq_laneq_f64(vmulq_n_f64(v1823.val[0], v727.f64[0]), v1823.val[1], v727, 1);
        v736 = vmlaq_laneq_f64(vmulq_n_f64(v1854.val[0], v727.f64[0]), v1854.val[1], v727, 1);
        v737 = vmlaq_laneq_f64(vmulq_n_f64(v1874.val[0], v727.f64[0]), v1874.val[1], v727, 1);
        v738 = vmlaq_laneq_f64(vmulq_n_f64(v1823.val[0], v728.f64[0]), v1823.val[1], v728, 1);
        v739 = vaddq_f64(*(float64x2_t *)(result + 32), v731);
        v740 = vaddq_f64(*(float64x2_t *)(result + 16), v730);
        v741 = vaddq_f64(*(float64x2_t *)(result + 80), v734);
        v742 = vaddq_f64(*(float64x2_t *)(result + 64), v733);
        v743 = vaddq_f64(*(float64x2_t *)(result + 48), v732);
        v744 = vaddq_f64(*(float64x2_t *)(result + 128), v737);
        v745 = vaddq_f64(*(float64x2_t *)(result + 112), v736);
        v746 = vaddq_f64(*(float64x2_t *)(result + 96), v735);
        v1823.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1874.val[0], v728.f64[0]), v1874.val[1], v728, 1));
        v1823.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1854.val[0], v728.f64[0]), v1854.val[1], v728, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v729);
        *(float64x2_t *)(result + 16) = v740;
        *(float64x2_t *)(result + 32) = v739;
        *(float64x2_t *)(result + 48) = v743;
        *(float64x2_t *)(result + 64) = v742;
        *(float64x2_t *)(result + 80) = v741;
        *(float64x2_t *)(result + 96) = v746;
        *(float64x2_t *)(result + 112) = v745;
        *(float64x2_t *)(result + 128) = v744;
        *(float64x2_t *)(result + 144) = vaddq_f64(v724, v738);
        *(float64x2x2_t *)(result + 160) = v1823;
        v13 = *v12;
        v684 = a2[24];
        goto LABEL_387;
      }
      v722 = (char *)v720;
    }
LABEL_385:
    result = sub_20F55CC0C((unint64_t *)(v13 + 4112), (uint64_t)&v1770, v716, v722);
    goto LABEL_386;
  }
LABEL_387:
  if (v684 && a2[48])
  {
    v747 = *((_DWORD *)a2 + 7);
    v748 = *((unsigned int *)a2 + 13);
    v749 = *(_QWORD *)(v13 + 5208);
    v750 = (*(_DWORD *)(v13 + 5232) * v748);
    v751 = v749 + 16 * v750;
    v1770 = v751;
    v752 = *(_QWORD *)(*(_QWORD *)(v13 + 5240) + 8 * v748);
    v753 = (char *)(v749 + 16 * (v752 + v750));
    v1771 = v753;
    v1772 = v748;
    if (v752)
    {
      v754 = 16 * v752;
      while (*(_DWORD *)v751 < v747)
      {
        v751 += 16;
        v754 -= 16;
        if (!v754)
          goto LABEL_398;
      }
    }
    if ((char *)v751 != v753)
    {
      if (*(_DWORD *)v751 == v747)
      {
        result = *(_QWORD *)(v13 + 5136) + 8 * *(_QWORD *)(v751 + 8);
LABEL_399:
        v1824 = vld2q_f64(v681);
        v755 = *(float64x2_t *)(result + 144);
        v1855 = vld2q_f64(v682);
        v1875 = vld2q_f64(v683);
        v756 = a3[32];
        v757 = a3[33];
        v758 = a3[34];
        v759 = a3[35];
        v760 = vmlaq_laneq_f64(vmulq_n_f64(v1824.val[0], v756.f64[0]), v1824.val[1], v756, 1);
        v761 = vmlaq_laneq_f64(vmulq_n_f64(v1855.val[0], v756.f64[0]), v1855.val[1], v756, 1);
        v762 = vmlaq_laneq_f64(vmulq_n_f64(v1875.val[0], v756.f64[0]), v1875.val[1], v756, 1);
        v763 = vmlaq_laneq_f64(vmulq_n_f64(v1824.val[0], v757.f64[0]), v1824.val[1], v757, 1);
        v764 = vmlaq_laneq_f64(vmulq_n_f64(v1855.val[0], v757.f64[0]), v1855.val[1], v757, 1);
        v765 = vmlaq_laneq_f64(vmulq_n_f64(v1875.val[0], v757.f64[0]), v1875.val[1], v757, 1);
        v766 = vmlaq_laneq_f64(vmulq_n_f64(v1824.val[0], v758.f64[0]), v1824.val[1], v758, 1);
        v767 = vmlaq_laneq_f64(vmulq_n_f64(v1855.val[0], v758.f64[0]), v1855.val[1], v758, 1);
        v768 = vmlaq_laneq_f64(vmulq_n_f64(v1875.val[0], v758.f64[0]), v1875.val[1], v758, 1);
        v769 = vmlaq_laneq_f64(vmulq_n_f64(v1824.val[0], v759.f64[0]), v1824.val[1], v759, 1);
        v770 = vaddq_f64(*(float64x2_t *)(result + 32), v762);
        v771 = vaddq_f64(*(float64x2_t *)(result + 16), v761);
        v772 = vaddq_f64(*(float64x2_t *)(result + 80), v765);
        v773 = vaddq_f64(*(float64x2_t *)(result + 64), v764);
        v774 = vaddq_f64(*(float64x2_t *)(result + 48), v763);
        v775 = vaddq_f64(*(float64x2_t *)(result + 128), v768);
        v776 = vaddq_f64(*(float64x2_t *)(result + 112), v767);
        v777 = vaddq_f64(*(float64x2_t *)(result + 96), v766);
        v1824.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1875.val[0], v759.f64[0]), v1875.val[1], v759, 1));
        v1824.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1855.val[0], v759.f64[0]), v1855.val[1], v759, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v760);
        *(float64x2_t *)(result + 16) = v771;
        *(float64x2_t *)(result + 32) = v770;
        *(float64x2_t *)(result + 48) = v774;
        *(float64x2_t *)(result + 64) = v773;
        *(float64x2_t *)(result + 80) = v772;
        *(float64x2_t *)(result + 96) = v777;
        *(float64x2_t *)(result + 112) = v776;
        *(float64x2_t *)(result + 128) = v775;
        *(float64x2_t *)(result + 144) = vaddq_f64(v755, v769);
        *(float64x2x2_t *)(result + 160) = v1824;
        v13 = *v12;
        v684 = a2[24];
        goto LABEL_400;
      }
      v753 = (char *)v751;
    }
LABEL_398:
    result = sub_20F55CC0C((unint64_t *)(v13 + 5120), (uint64_t)&v1770, v747, v753);
    goto LABEL_399;
  }
LABEL_400:
  if (v684 && a2[56])
  {
    v778 = *((_DWORD *)a2 + 7);
    v779 = *((unsigned int *)a2 + 15);
    v780 = *(_QWORD *)(v13 + 5208);
    v781 = (*(_DWORD *)(v13 + 5232) * v779);
    v782 = v780 + 16 * v781;
    v1770 = v782;
    v783 = *(_QWORD *)(*(_QWORD *)(v13 + 5240) + 8 * v779);
    v784 = (char *)(v780 + 16 * (v783 + v781));
    v1771 = v784;
    v1772 = v779;
    if (v783)
    {
      v785 = 16 * v783;
      while (*(_DWORD *)v782 < v778)
      {
        v782 += 16;
        v785 -= 16;
        if (!v785)
          goto LABEL_411;
      }
    }
    if ((char *)v782 != v784)
    {
      if (*(_DWORD *)v782 == v778)
      {
        result = *(_QWORD *)(v13 + 5136) + 8 * *(_QWORD *)(v782 + 8);
LABEL_412:
        v1825 = vld2q_f64(v681);
        v786 = *(float64x2_t *)(result + 144);
        v1856 = vld2q_f64(v682);
        v1876 = vld2q_f64(v683);
        v787 = a3[36];
        v788 = a3[37];
        v789 = a3[38];
        v790 = a3[39];
        v791 = vmlaq_laneq_f64(vmulq_n_f64(v1825.val[0], v787.f64[0]), v1825.val[1], v787, 1);
        v792 = vmlaq_laneq_f64(vmulq_n_f64(v1856.val[0], v787.f64[0]), v1856.val[1], v787, 1);
        v793 = vmlaq_laneq_f64(vmulq_n_f64(v1876.val[0], v787.f64[0]), v1876.val[1], v787, 1);
        v794 = vmlaq_laneq_f64(vmulq_n_f64(v1825.val[0], v788.f64[0]), v1825.val[1], v788, 1);
        v795 = vmlaq_laneq_f64(vmulq_n_f64(v1856.val[0], v788.f64[0]), v1856.val[1], v788, 1);
        v796 = vmlaq_laneq_f64(vmulq_n_f64(v1876.val[0], v788.f64[0]), v1876.val[1], v788, 1);
        v797 = vmlaq_laneq_f64(vmulq_n_f64(v1825.val[0], v789.f64[0]), v1825.val[1], v789, 1);
        v798 = vmlaq_laneq_f64(vmulq_n_f64(v1856.val[0], v789.f64[0]), v1856.val[1], v789, 1);
        v799 = vmlaq_laneq_f64(vmulq_n_f64(v1876.val[0], v789.f64[0]), v1876.val[1], v789, 1);
        v800 = vmlaq_laneq_f64(vmulq_n_f64(v1825.val[0], v790.f64[0]), v1825.val[1], v790, 1);
        v801 = vaddq_f64(*(float64x2_t *)(result + 32), v793);
        v802 = vaddq_f64(*(float64x2_t *)(result + 16), v792);
        v803 = vaddq_f64(*(float64x2_t *)(result + 80), v796);
        v804 = vaddq_f64(*(float64x2_t *)(result + 64), v795);
        v805 = vaddq_f64(*(float64x2_t *)(result + 48), v794);
        v806 = vaddq_f64(*(float64x2_t *)(result + 128), v799);
        v807 = vaddq_f64(*(float64x2_t *)(result + 112), v798);
        v808 = vaddq_f64(*(float64x2_t *)(result + 96), v797);
        v1825.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1876.val[0], v790.f64[0]), v1876.val[1], v790, 1));
        v1825.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1856.val[0], v790.f64[0]), v1856.val[1], v790, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v791);
        *(float64x2_t *)(result + 16) = v802;
        *(float64x2_t *)(result + 32) = v801;
        *(float64x2_t *)(result + 48) = v805;
        *(float64x2_t *)(result + 64) = v804;
        *(float64x2_t *)(result + 80) = v803;
        *(float64x2_t *)(result + 96) = v808;
        *(float64x2_t *)(result + 112) = v807;
        *(float64x2_t *)(result + 128) = v806;
        *(float64x2_t *)(result + 144) = vaddq_f64(v786, v800);
        *(float64x2x2_t *)(result + 160) = v1825;
        v13 = *v12;
        v684 = a2[24];
        goto LABEL_413;
      }
      v784 = (char *)v782;
    }
LABEL_411:
    result = sub_20F55CC0C((unint64_t *)(v13 + 5120), (uint64_t)&v1770, v778, v784);
    goto LABEL_412;
  }
LABEL_413:
  if (v684 && a2[64])
  {
    v809 = *((_DWORD *)a2 + 7);
    v810 = *((unsigned int *)a2 + 17);
    v811 = *(_QWORD *)(v13 + 6216);
    v812 = (*(_DWORD *)(v13 + 6240) * v810);
    v813 = v811 + 16 * v812;
    v1770 = v813;
    v814 = *(_QWORD *)(*(_QWORD *)(v13 + 6248) + 8 * v810);
    v815 = (char *)(v811 + 16 * (v814 + v812));
    v1771 = v815;
    v1772 = v810;
    if (v814)
    {
      v816 = 16 * v814;
      while (*(_DWORD *)v813 < v809)
      {
        v813 += 16;
        v816 -= 16;
        if (!v816)
          goto LABEL_424;
      }
    }
    if ((char *)v813 != v815)
    {
      if (*(_DWORD *)v813 == v809)
      {
        result = *(_QWORD *)(v13 + 6144) + 8 * *(_QWORD *)(v813 + 8);
LABEL_425:
        v1801 = vld2q_f64(v681);
        v1826 = vld2q_f64(v682);
        v1857 = vld2q_f64(v683);
        v817 = a3[40];
        v818 = a3[41];
        v819 = a3[42];
        v820 = vmlaq_laneq_f64(vmulq_n_f64(v1801.val[0], v817.f64[0]), v1801.val[1], v817, 1);
        v821 = vmlaq_laneq_f64(vmulq_n_f64(v1826.val[0], v817.f64[0]), v1826.val[1], v817, 1);
        v822 = vmlaq_laneq_f64(vmulq_n_f64(v1857.val[0], v817.f64[0]), v1857.val[1], v817, 1);
        v823 = vmlaq_laneq_f64(vmulq_n_f64(v1801.val[0], v818.f64[0]), v1801.val[1], v818, 1);
        v824 = vmlaq_laneq_f64(vmulq_n_f64(v1826.val[0], v818.f64[0]), v1826.val[1], v818, 1);
        v825 = vmlaq_laneq_f64(vmulq_n_f64(v1857.val[0], v818.f64[0]), v1857.val[1], v818, 1);
        v826 = vmlaq_laneq_f64(vmulq_n_f64(v1801.val[0], v819.f64[0]), v1801.val[1], v819, 1);
        v827 = vaddq_f64(*(float64x2_t *)(result + 32), v822);
        v828 = vaddq_f64(*(float64x2_t *)(result + 16), v821);
        v829 = vaddq_f64(*(float64x2_t *)(result + 80), v825);
        v830 = vaddq_f64(*(float64x2_t *)(result + 64), v824);
        v831 = vaddq_f64(*(float64x2_t *)(result + 48), v823);
        v1801.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1857.val[0], v819.f64[0]), v1857.val[1], v819, 1));
        v1801.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1826.val[0], v819.f64[0]), v1826.val[1], v819, 1));
        v1826.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v826);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v820);
        *(float64x2_t *)(result + 16) = v828;
        *(float64x2_t *)(result + 32) = v827;
        *(float64x2_t *)(result + 48) = v831;
        *(float64x2_t *)(result + 64) = v830;
        *(float64x2_t *)(result + 80) = v829;
        *(float64x2_t *)(result + 96) = v1826.val[0];
        *(float64x2x2_t *)(result + 112) = v1801;
        v13 = *v12;
        v684 = a2[24];
        goto LABEL_426;
      }
      v815 = (char *)v813;
    }
LABEL_424:
    result = sub_20F55CD48((unint64_t *)(v13 + 6128), (uint64_t)&v1770, v809, v815);
    goto LABEL_425;
  }
LABEL_426:
  if (v684 && a2[72])
  {
    v832 = *((_DWORD *)a2 + 7);
    v833 = *((unsigned int *)a2 + 19);
    v834 = *(_QWORD *)(v13 + 6216);
    v835 = (*(_DWORD *)(v13 + 6240) * v833);
    v836 = v834 + 16 * v835;
    v1770 = v836;
    v837 = *(_QWORD *)(*(_QWORD *)(v13 + 6248) + 8 * v833);
    v838 = (char *)(v834 + 16 * (v837 + v835));
    v1771 = v838;
    v1772 = v833;
    if (v837)
    {
      v839 = 16 * v837;
      while (*(_DWORD *)v836 < v832)
      {
        v836 += 16;
        v839 -= 16;
        if (!v839)
          goto LABEL_437;
      }
    }
    if ((char *)v836 != v838)
    {
      if (*(_DWORD *)v836 == v832)
      {
        result = *(_QWORD *)(v13 + 6144) + 8 * *(_QWORD *)(v836 + 8);
LABEL_438:
        v1792 = vld2q_f64(v681);
        v1813 = vld2q_f64(v682);
        v1847 = vld2q_f64(v683);
        v840 = a3[43];
        v841 = a3[44];
        v842 = a3[45];
        v843 = vmlaq_laneq_f64(vmulq_n_f64(v1792.val[0], v840.f64[0]), v1792.val[1], v840, 1);
        v844 = vmlaq_laneq_f64(vmulq_n_f64(v1813.val[0], v840.f64[0]), v1813.val[1], v840, 1);
        v845 = vmlaq_laneq_f64(vmulq_n_f64(v1847.val[0], v840.f64[0]), v1847.val[1], v840, 1);
        v846 = vmlaq_laneq_f64(vmulq_n_f64(v1792.val[0], v841.f64[0]), v1792.val[1], v841, 1);
        v847 = vmlaq_laneq_f64(vmulq_n_f64(v1813.val[0], v841.f64[0]), v1813.val[1], v841, 1);
        v848 = vmlaq_laneq_f64(vmulq_n_f64(v1847.val[0], v841.f64[0]), v1847.val[1], v841, 1);
        v849 = vmlaq_laneq_f64(vmulq_n_f64(v1792.val[0], v842.f64[0]), v1792.val[1], v842, 1);
        v1792.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1813.val[0], v842.f64[0]), v1813.val[1], v842, 1);
        v850 = vaddq_f64(*(float64x2_t *)(result + 32), v845);
        v851 = vaddq_f64(*(float64x2_t *)(result + 16), v844);
        v1813.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v848);
        v1813.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v847);
        v852 = vaddq_f64(*(float64x2_t *)(result + 48), v846);
        v1792.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1847.val[0], v842.f64[0]), v1847.val[1], v842, 1));
        v1792.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1792.val[0]);
        v853 = vaddq_f64(*(float64x2_t *)(result + 96), v849);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v843);
        *(float64x2_t *)(result + 16) = v851;
        *(float64x2_t *)(result + 32) = v850;
        *(float64x2_t *)(result + 48) = v852;
        *(float64x2_t *)(result + 64) = v1813.val[1];
        *(float64x2_t *)(result + 80) = v1813.val[0];
        *(float64x2_t *)(result + 96) = v853;
        *(float64x2x2_t *)(result + 112) = v1792;
        v13 = *v12;
        goto LABEL_439;
      }
      v838 = (char *)v836;
    }
LABEL_437:
    result = sub_20F55CD48((unint64_t *)(v13 + 6128), (uint64_t)&v1770, v832, v838);
    goto LABEL_438;
  }
LABEL_439:
  v854 = a2[16];
  if (a2[16] && *a2)
  {
    v856 = *((_DWORD *)a2 + 5);
    v857 = *((unsigned int *)a2 + 1);
    v858 = *(_QWORD *)(v13 + 3192);
    v859 = (*(_DWORD *)(v13 + 3216) * v857);
    v860 = v858 + 16 * v859;
    v1770 = v860;
    v861 = *(_QWORD *)(*(_QWORD *)(v13 + 3224) + 8 * v857);
    v862 = (char *)(v858 + 16 * (v861 + v859));
    v1771 = v862;
    v1772 = v857;
    if (v861)
    {
      v863 = 16 * v861;
      while (*(_DWORD *)v860 < v856)
      {
        v860 += 16;
        v863 -= 16;
        if (!v863)
          goto LABEL_450;
      }
    }
    if ((char *)v860 != v862)
    {
      if (*(_DWORD *)v860 == v856)
      {
        result = *(_QWORD *)(v13 + 3120) + 8 * *(_QWORD *)(v860 + 8);
LABEL_451:
        v855 = a3[12].f64;
        v1776 = vld2q_f64(v855);
        v864 = a3[14].f64;
        v1793 = vld2q_f64(v864);
        v865 = a3[16].f64;
        v866 = a3[1];
        v867 = a3[2];
        v868 = a3[3];
        v869 = a3[4];
        v870 = a3[5];
        v871 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], a3->f64[0]), v1776.val[1], *a3, 1);
        v872 = vmlaq_laneq_f64(vmulq_n_f64(v1793.val[0], a3->f64[0]), v1793.val[1], *a3, 1);
        v873 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], v866.f64[0]), v1776.val[1], v866, 1);
        v874 = vmlaq_laneq_f64(vmulq_n_f64(v1793.val[0], v866.f64[0]), v1793.val[1], v866, 1);
        v875 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], v867.f64[0]), v1776.val[1], v867, 1);
        v876 = vmlaq_laneq_f64(vmulq_n_f64(v1793.val[0], v867.f64[0]), v1793.val[1], v867, 1);
        v877 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], v868.f64[0]), v1776.val[1], v868, 1);
        v878 = vmlaq_laneq_f64(vmulq_n_f64(v1793.val[0], v868.f64[0]), v1793.val[1], v868, 1);
        v879 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], v869.f64[0]), v1776.val[1], v869, 1);
        v880 = vmlaq_laneq_f64(vmulq_n_f64(v1793.val[0], v869.f64[0]), v1793.val[1], v869, 1);
        v881 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], v870.f64[0]), v1776.val[1], v870, 1);
        v1776.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1793.val[0], v870.f64[0]), v1793.val[1], v870, 1);
        *(float64x2x2_t *)((char *)&v1776 + 16) = vld2q_f64(v865);
        v882 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[1], v866.f64[0]), v1793.val[0], v866, 1);
        v883 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[1], v867.f64[0]), v1793.val[0], v867, 1);
        v884 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[1], v868.f64[0]), v1793.val[0], v868, 1);
        v885 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[1], v869.f64[0]), v1793.val[0], v869, 1);
        v886 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[1], v870.f64[0]), v1793.val[0], v870, 1);
        v1776.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1776.val[1], a3->f64[0]), v1793.val[0], *a3, 1));
        v1793.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v872);
        v887 = vaddq_f64(*(float64x2_t *)result, v871);
        v888 = vaddq_f64(*(float64x2_t *)(result + 80), v882);
        v889 = vaddq_f64(*(float64x2_t *)(result + 64), v874);
        v1793.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v873);
        v890 = vaddq_f64(*(float64x2_t *)(result + 128), v883);
        v891 = vaddq_f64(*(float64x2_t *)(result + 112), v876);
        v892 = vaddq_f64(*(float64x2_t *)(result + 96), v875);
        v893 = vaddq_f64(*(float64x2_t *)(result + 176), v884);
        v894 = vaddq_f64(*(float64x2_t *)(result + 160), v878);
        v895 = vaddq_f64(*(float64x2_t *)(result + 144), v877);
        v896 = *(float64x2_t *)(result + 240);
        v897 = vaddq_f64(*(float64x2_t *)(result + 224), v885);
        v898 = vaddq_f64(*(float64x2_t *)(result + 208), v880);
        v899 = vaddq_f64(*(float64x2_t *)(result + 192), v879);
        v900 = vaddq_f64(*(float64x2_t *)(result + 272), v886);
        v1776.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1776.val[0]);
        *(float64x2_t *)result = v887;
        *(float64x2_t *)(result + 16) = v1793.val[1];
        *(float64x2_t *)(result + 32) = v1776.val[1];
        *(float64x2_t *)(result + 48) = v1793.val[0];
        *(float64x2_t *)(result + 64) = v889;
        *(float64x2_t *)(result + 80) = v888;
        *(float64x2_t *)(result + 96) = v892;
        *(float64x2_t *)(result + 112) = v891;
        *(float64x2_t *)(result + 128) = v890;
        *(float64x2_t *)(result + 144) = v895;
        *(float64x2_t *)(result + 160) = v894;
        *(float64x2_t *)(result + 176) = v893;
        *(float64x2_t *)(result + 192) = v899;
        *(float64x2_t *)(result + 208) = v898;
        *(float64x2_t *)(result + 224) = v897;
        *(float64x2_t *)(result + 240) = vaddq_f64(v896, v881);
        *(float64x2_t *)(result + 256) = v1776.val[0];
        *(float64x2_t *)(result + 272) = v900;
        v13 = *v12;
        v854 = a2[16];
        goto LABEL_452;
      }
      v862 = (char *)v860;
    }
LABEL_450:
    result = sub_20F55CAD0((unint64_t *)(v13 + 3104), (uint64_t)&v1770, v856, v862);
    goto LABEL_451;
  }
LABEL_452:
  if (v854 && a2[8])
  {
    v902 = *((_DWORD *)a2 + 5);
    v903 = *((unsigned int *)a2 + 3);
    v904 = *(_QWORD *)(v13 + 3192);
    v905 = (*(_DWORD *)(v13 + 3216) * v903);
    v906 = v904 + 16 * v905;
    v1770 = v906;
    v907 = *(_QWORD *)(*(_QWORD *)(v13 + 3224) + 8 * v903);
    v908 = (char *)(v904 + 16 * (v907 + v905));
    v1771 = v908;
    v1772 = v903;
    if (v907)
    {
      v909 = 16 * v907;
      while (*(_DWORD *)v906 < v902)
      {
        v906 += 16;
        v909 -= 16;
        if (!v909)
          goto LABEL_463;
      }
    }
    if ((char *)v906 != v908)
    {
      if (*(_DWORD *)v906 == v902)
      {
        result = *(_QWORD *)(v13 + 3120) + 8 * *(_QWORD *)(v906 + 8);
LABEL_464:
        v901 = a3[12].f64;
        v1777 = vld2q_f64(v901);
        v910 = a3[14].f64;
        v1794 = vld2q_f64(v910);
        v911 = a3[16].f64;
        v912 = a3[6];
        v913 = a3[7];
        v914 = a3[8];
        v915 = a3[9];
        v916 = a3[10];
        v917 = a3[11];
        v918 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v912.f64[0]), v1777.val[1], v912, 1);
        v919 = vmlaq_laneq_f64(vmulq_n_f64(v1794.val[0], v912.f64[0]), v1794.val[1], v912, 1);
        v920 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v913.f64[0]), v1777.val[1], v913, 1);
        v921 = vmlaq_laneq_f64(vmulq_n_f64(v1794.val[0], v913.f64[0]), v1794.val[1], v913, 1);
        v922 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v914.f64[0]), v1777.val[1], v914, 1);
        v923 = vmlaq_laneq_f64(vmulq_n_f64(v1794.val[0], v914.f64[0]), v1794.val[1], v914, 1);
        v924 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v915.f64[0]), v1777.val[1], v915, 1);
        v925 = vmlaq_laneq_f64(vmulq_n_f64(v1794.val[0], v915.f64[0]), v1794.val[1], v915, 1);
        v926 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v916.f64[0]), v1777.val[1], v916, 1);
        v927 = vmlaq_laneq_f64(vmulq_n_f64(v1794.val[0], v916.f64[0]), v1794.val[1], v916, 1);
        v928 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v917.f64[0]), v1777.val[1], v917, 1);
        v1777.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1794.val[0], v917.f64[0]), v1794.val[1], v917, 1);
        *(float64x2x2_t *)((char *)&v1777 + 16) = vld2q_f64(v911);
        v1794.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[1], v912.f64[0]), v1794.val[0], v912, 1);
        v929 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[1], v913.f64[0]), v1794.val[0], v913, 1);
        v930 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[1], v914.f64[0]), v1794.val[0], v914, 1);
        v931 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[1], v915.f64[0]), v1794.val[0], v915, 1);
        v932 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[1], v916.f64[0]), v1794.val[0], v916, 1);
        v933 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[1], v917.f64[0]), v1794.val[0], v917, 1);
        v1777.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1794.val[1]);
        v1794.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v919);
        v934 = vaddq_f64(*(float64x2_t *)result, v918);
        v935 = vaddq_f64(*(float64x2_t *)(result + 80), v929);
        v936 = vaddq_f64(*(float64x2_t *)(result + 64), v921);
        v1794.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v920);
        v937 = vaddq_f64(*(float64x2_t *)(result + 128), v930);
        v938 = vaddq_f64(*(float64x2_t *)(result + 112), v923);
        v939 = vaddq_f64(*(float64x2_t *)(result + 96), v922);
        v940 = vaddq_f64(*(float64x2_t *)(result + 176), v931);
        v941 = vaddq_f64(*(float64x2_t *)(result + 160), v925);
        v942 = vaddq_f64(*(float64x2_t *)(result + 144), v924);
        v943 = *(float64x2_t *)(result + 240);
        v944 = vaddq_f64(*(float64x2_t *)(result + 224), v932);
        v945 = vaddq_f64(*(float64x2_t *)(result + 208), v927);
        v946 = vaddq_f64(*(float64x2_t *)(result + 192), v926);
        v947 = vaddq_f64(*(float64x2_t *)(result + 272), v933);
        v1777.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1777.val[0]);
        *(float64x2_t *)result = v934;
        *(float64x2_t *)(result + 16) = v1794.val[1];
        *(float64x2_t *)(result + 32) = v1777.val[1];
        *(float64x2_t *)(result + 48) = v1794.val[0];
        *(float64x2_t *)(result + 64) = v936;
        *(float64x2_t *)(result + 80) = v935;
        *(float64x2_t *)(result + 96) = v939;
        *(float64x2_t *)(result + 112) = v938;
        *(float64x2_t *)(result + 128) = v937;
        *(float64x2_t *)(result + 144) = v942;
        *(float64x2_t *)(result + 160) = v941;
        *(float64x2_t *)(result + 176) = v940;
        *(float64x2_t *)(result + 192) = v946;
        *(float64x2_t *)(result + 208) = v945;
        *(float64x2_t *)(result + 224) = v944;
        *(float64x2_t *)(result + 240) = vaddq_f64(v943, v928);
        *(float64x2_t *)(result + 256) = v1777.val[0];
        *(float64x2_t *)(result + 272) = v947;
        v854 = a2[16];
        v13 = *v12;
        goto LABEL_465;
      }
      v908 = (char *)v906;
    }
LABEL_463:
    result = sub_20F55CAD0((unint64_t *)(v13 + 3104), (uint64_t)&v1770, v902, v908);
    goto LABEL_464;
  }
LABEL_465:
  if (!v854)
    goto LABEL_566;
  v948 = *((unsigned int *)a2 + 5);
  v949 = *(_QWORD *)(v13 + 168);
  v950 = (*(_DWORD *)(v13 + 192) * v948);
  v951 = v949 + 16 * v950;
  v1770 = v951;
  v952 = *(_QWORD *)(*(_QWORD *)(v13 + 200) + 8 * v948);
  v953 = (char *)(v949 + 16 * (v952 + v950));
  v1771 = v953;
  v1772 = v948;
  if (v952)
  {
    v954 = 16 * v952;
    while (*(_DWORD *)v951 < v948)
    {
      v951 += 16;
      v954 -= 16;
      if (!v954)
        goto LABEL_475;
    }
  }
  if ((char *)v951 == v953)
    goto LABEL_475;
  if (*(_DWORD *)v951 != (_DWORD)v948)
  {
    v953 = (char *)v951;
LABEL_475:
    result = sub_20F55CAD0((unint64_t *)(v13 + 80), (uint64_t)&v1770, v948, v953);
    goto LABEL_476;
  }
  result = *(_QWORD *)(v13 + 96) + 8 * *(_QWORD *)(v951 + 8);
LABEL_476:
  v955 = a3[14].f64;
  v956 = a3[14];
  v957 = a3[12];
  v958 = a3[13];
  v959 = a3[15];
  v960 = a3[16];
  v961 = a3[17];
  v962 = (float64x2_t)vzip1q_s64((int64x2_t)v956, (int64x2_t)v959);
  v963 = (float64x2_t)vzip1q_s64((int64x2_t)v960, (int64x2_t)v961);
  *(_QWORD *)&v964.f64[0] = vdupq_laneq_s64((int64x2_t)v956, 1).u64[0];
  v964.f64[1] = a3[15].f64[1];
  *(_QWORD *)&v965.f64[0] = vdupq_laneq_s64((int64x2_t)v960, 1).u64[0];
  v965.f64[1] = a3[17].f64[1];
  v966 = (float64x2_t)vzip1q_s64((int64x2_t)v957, (int64x2_t)v958);
  v967 = (float64x2_t)vzip2q_s64((int64x2_t)v957, (int64x2_t)v958);
  v968 = vmlaq_laneq_f64(vmulq_n_f64(v966, v957.f64[0]), v967, v957, 1);
  v969 = vmlaq_laneq_f64(vmulq_n_f64(v962, v957.f64[0]), v964, v957, 1);
  v970 = vmlaq_laneq_f64(vmulq_n_f64(v963, v957.f64[0]), v965, v957, 1);
  v971 = vmlaq_laneq_f64(vmulq_n_f64(v966, v958.f64[0]), v967, v958, 1);
  v972 = vmlaq_laneq_f64(vmulq_n_f64(v962, v958.f64[0]), v964, v958, 1);
  v973 = vmlaq_laneq_f64(vmulq_n_f64(v963, v958.f64[0]), v965, v958, 1);
  v974 = vmlaq_laneq_f64(vmulq_n_f64(v966, v956.f64[0]), v967, v956, 1);
  v975 = vmlaq_laneq_f64(vmulq_n_f64(v962, v956.f64[0]), v964, v956, 1);
  v976 = vmlaq_laneq_f64(vmulq_n_f64(v963, v956.f64[0]), v965, v956, 1);
  v977 = vmlaq_laneq_f64(vmulq_n_f64(v966, v959.f64[0]), v967, v959, 1);
  v978 = vmlaq_laneq_f64(vmulq_n_f64(v962, v959.f64[0]), v964, v959, 1);
  v979 = vmlaq_laneq_f64(vmulq_n_f64(v963, v959.f64[0]), v965, v959, 1);
  v980 = vmlaq_laneq_f64(vmulq_n_f64(v966, v960.f64[0]), v967, v960, 1);
  v981 = vmlaq_laneq_f64(vmulq_n_f64(v962, v960.f64[0]), v964, v960, 1);
  v982 = vmlaq_laneq_f64(vmulq_n_f64(v963, v960.f64[0]), v965, v960, 1);
  v983 = vmlaq_laneq_f64(vmulq_n_f64(v966, v961.f64[0]), v967, v961, 1);
  v984 = vmlaq_laneq_f64(vmulq_n_f64(v962, v961.f64[0]), v964, v961, 1);
  v985 = vmlaq_laneq_f64(vmulq_n_f64(v963, v961.f64[0]), v965, v961, 1);
  v986 = vaddq_f64(*(float64x2_t *)(result + 32), v970);
  v987 = vaddq_f64(*(float64x2_t *)(result + 16), v969);
  v988 = vaddq_f64(*(float64x2_t *)result, v968);
  v989 = vaddq_f64(*(float64x2_t *)(result + 80), v973);
  v990 = vaddq_f64(*(float64x2_t *)(result + 64), v972);
  v991 = vaddq_f64(*(float64x2_t *)(result + 48), v971);
  v992 = vaddq_f64(*(float64x2_t *)(result + 128), v976);
  v993 = vaddq_f64(*(float64x2_t *)(result + 112), v975);
  v994 = vaddq_f64(*(float64x2_t *)(result + 96), v974);
  v995 = vaddq_f64(*(float64x2_t *)(result + 176), v979);
  v996 = vaddq_f64(*(float64x2_t *)(result + 160), v978);
  v997 = vaddq_f64(*(float64x2_t *)(result + 144), v977);
  v998 = *(float64x2_t *)(result + 240);
  v999 = vaddq_f64(*(float64x2_t *)(result + 224), v982);
  v1000 = vaddq_f64(*(float64x2_t *)(result + 208), v981);
  v1001 = vaddq_f64(*(float64x2_t *)(result + 192), v980);
  v1002 = vaddq_f64(*(float64x2_t *)(result + 272), v985);
  v1003 = vaddq_f64(*(float64x2_t *)(result + 256), v984);
  *(float64x2_t *)result = v988;
  *(float64x2_t *)(result + 16) = v987;
  *(float64x2_t *)(result + 32) = v986;
  *(float64x2_t *)(result + 48) = v991;
  *(float64x2_t *)(result + 64) = v990;
  *(float64x2_t *)(result + 80) = v989;
  *(float64x2_t *)(result + 96) = v994;
  *(float64x2_t *)(result + 112) = v993;
  *(float64x2_t *)(result + 128) = v992;
  *(float64x2_t *)(result + 144) = v997;
  *(float64x2_t *)(result + 160) = v996;
  *(float64x2_t *)(result + 176) = v995;
  *(float64x2_t *)(result + 192) = v1001;
  *(float64x2_t *)(result + 208) = v1000;
  *(float64x2_t *)(result + 224) = v999;
  *(float64x2_t *)(result + 240) = vaddq_f64(v998, v983);
  *(float64x2_t *)(result + 256) = v1003;
  *(float64x2_t *)(result + 272) = v1002;
  v1004 = a3[12].f64;
  v1005 = a3[16].f64;
  v13 = *v12;
  v1006 = a2[16];
  if (!a2[16] || !a2[24])
  {
LABEL_480:
    if (!v1006)
      goto LABEL_501;
    goto LABEL_481;
  }
  v1007 = *((_DWORD *)a2 + 5);
  v1008 = *((unsigned int *)a2 + 7);
  if (v1008 < v1007)
  {
    v1006 = 1;
    goto LABEL_480;
  }
  v1017 = *(_QWORD *)(v13 + 168);
  v1018 = (*(_DWORD *)(v13 + 192) * v1008);
  v1019 = v1017 + 16 * v1018;
  v1770 = v1019;
  v1020 = *(_QWORD *)(*(_QWORD *)(v13 + 200) + 8 * v1008);
  v1021 = (char *)(v1017 + 16 * (v1020 + v1018));
  v1771 = v1021;
  v1772 = v1008;
  if (v1020)
  {
    v1022 = 16 * v1020;
    while (*(_DWORD *)v1019 < v1007)
    {
      v1019 += 16;
      v1022 -= 16;
      if (!v1022)
        goto LABEL_781;
    }
  }
  if ((char *)v1019 != v1021)
  {
    if (*(_DWORD *)v1019 == v1007)
    {
      result = *(_QWORD *)(v13 + 96) + 8 * *(_QWORD *)(v1019 + 8);
      goto LABEL_782;
    }
    v1021 = (char *)v1019;
  }
LABEL_781:
  result = sub_20F55CAD0((unint64_t *)(v13 + 80), (uint64_t)&v1770, v1007, v1021);
LABEL_782:
  v1779 = vld2q_f64(v1004);
  v1798 = vld2q_f64(v955);
  v1700 = a3[18];
  v1701 = a3[19];
  v1702 = a3[20];
  v1703 = a3[21];
  v1704 = a3[22];
  v1705 = a3[23];
  v1706 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1700.f64[0]), v1779.val[1], v1700, 1);
  v1707 = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1700.f64[0]), v1798.val[1], v1700, 1);
  v1708 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1701.f64[0]), v1779.val[1], v1701, 1);
  v1709 = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1701.f64[0]), v1798.val[1], v1701, 1);
  v1710 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1702.f64[0]), v1779.val[1], v1702, 1);
  v1711 = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1702.f64[0]), v1798.val[1], v1702, 1);
  v1712 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1703.f64[0]), v1779.val[1], v1703, 1);
  v1713 = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1703.f64[0]), v1798.val[1], v1703, 1);
  v1714 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1704.f64[0]), v1779.val[1], v1704, 1);
  v1715 = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1704.f64[0]), v1798.val[1], v1704, 1);
  v1716 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1705.f64[0]), v1779.val[1], v1705, 1);
  v1779.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1705.f64[0]), v1798.val[1], v1705, 1);
  *(float64x2x2_t *)((char *)&v1779 + 16) = vld2q_f64(v1005);
  v1798.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[1], v1700.f64[0]), v1798.val[0], v1700, 1);
  v1717 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[1], v1701.f64[0]), v1798.val[0], v1701, 1);
  v1718 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[1], v1702.f64[0]), v1798.val[0], v1702, 1);
  v1719 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[1], v1703.f64[0]), v1798.val[0], v1703, 1);
  v1720 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[1], v1704.f64[0]), v1798.val[0], v1704, 1);
  v1721 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[1], v1705.f64[0]), v1798.val[0], v1705, 1);
  v1779.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1798.val[1]);
  v1798.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v1707);
  v1722 = vaddq_f64(*(float64x2_t *)result, v1706);
  v1723 = vaddq_f64(*(float64x2_t *)(result + 80), v1717);
  v1724 = vaddq_f64(*(float64x2_t *)(result + 64), v1709);
  v1798.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v1708);
  v1725 = vaddq_f64(*(float64x2_t *)(result + 128), v1718);
  v1726 = vaddq_f64(*(float64x2_t *)(result + 112), v1711);
  v1727 = vaddq_f64(*(float64x2_t *)(result + 96), v1710);
  v1728 = vaddq_f64(*(float64x2_t *)(result + 176), v1719);
  v1729 = vaddq_f64(*(float64x2_t *)(result + 160), v1713);
  v1730 = vaddq_f64(*(float64x2_t *)(result + 144), v1712);
  v1731 = *(float64x2_t *)(result + 240);
  v1732 = vaddq_f64(*(float64x2_t *)(result + 224), v1720);
  v1733 = vaddq_f64(*(float64x2_t *)(result + 208), v1715);
  v1734 = vaddq_f64(*(float64x2_t *)(result + 192), v1714);
  v1735 = vaddq_f64(*(float64x2_t *)(result + 272), v1721);
  v1779.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1779.val[0]);
  *(float64x2_t *)result = v1722;
  *(float64x2_t *)(result + 16) = v1798.val[1];
  *(float64x2_t *)(result + 32) = v1779.val[1];
  *(float64x2_t *)(result + 48) = v1798.val[0];
  *(float64x2_t *)(result + 64) = v1724;
  *(float64x2_t *)(result + 80) = v1723;
  *(float64x2_t *)(result + 96) = v1727;
  *(float64x2_t *)(result + 112) = v1726;
  *(float64x2_t *)(result + 128) = v1725;
  *(float64x2_t *)(result + 144) = v1730;
  *(float64x2_t *)(result + 160) = v1729;
  *(float64x2_t *)(result + 176) = v1728;
  *(float64x2_t *)(result + 192) = v1734;
  *(float64x2_t *)(result + 208) = v1733;
  *(float64x2_t *)(result + 224) = v1732;
  *(float64x2_t *)(result + 240) = vaddq_f64(v1731, v1716);
  *(float64x2_t *)(result + 256) = v1779.val[0];
  *(float64x2_t *)(result + 272) = v1735;
  v13 = *v12;
  v1006 = a2[16];
  if (!a2[16])
    goto LABEL_501;
LABEL_481:
  if (a2[32])
  {
    v1009 = *((_DWORD *)a2 + 5);
    v1010 = *((unsigned int *)a2 + 9);
    v1011 = *(_QWORD *)(v13 + 4200);
    v1012 = (*(_DWORD *)(v13 + 4224) * v1010);
    v1013 = v1011 + 16 * v1012;
    v1770 = v1013;
    v1014 = *(_QWORD *)(*(_QWORD *)(v13 + 4232) + 8 * v1010);
    v1015 = (char *)(v1011 + 16 * (v1014 + v1012));
    v1771 = v1015;
    v1772 = v1010;
    if (v1014)
    {
      v1016 = 16 * v1014;
      while (*(_DWORD *)v1013 < v1009)
      {
        v1013 += 16;
        v1016 -= 16;
        if (!v1016)
          goto LABEL_499;
      }
    }
    if ((char *)v1013 != v1015)
    {
      if (*(_DWORD *)v1013 == v1009)
      {
        result = *(_QWORD *)(v13 + 4128) + 8 * *(_QWORD *)(v1013 + 8);
LABEL_500:
        v1827 = vld2q_f64(v1004);
        v1023 = *(float64x2_t *)(result + 144);
        v1858 = vld2q_f64(v955);
        v1877 = vld2q_f64(v1005);
        v1024 = a3[24];
        v1025 = a3[25];
        v1026 = a3[26];
        v1027 = a3[27];
        v1028 = vmlaq_laneq_f64(vmulq_n_f64(v1827.val[0], v1024.f64[0]), v1827.val[1], v1024, 1);
        v1029 = vmlaq_laneq_f64(vmulq_n_f64(v1858.val[0], v1024.f64[0]), v1858.val[1], v1024, 1);
        v1030 = vmlaq_laneq_f64(vmulq_n_f64(v1877.val[0], v1024.f64[0]), v1877.val[1], v1024, 1);
        v1031 = vmlaq_laneq_f64(vmulq_n_f64(v1827.val[0], v1025.f64[0]), v1827.val[1], v1025, 1);
        v1032 = vmlaq_laneq_f64(vmulq_n_f64(v1858.val[0], v1025.f64[0]), v1858.val[1], v1025, 1);
        v1033 = vmlaq_laneq_f64(vmulq_n_f64(v1877.val[0], v1025.f64[0]), v1877.val[1], v1025, 1);
        v1034 = vmlaq_laneq_f64(vmulq_n_f64(v1827.val[0], v1026.f64[0]), v1827.val[1], v1026, 1);
        v1035 = vmlaq_laneq_f64(vmulq_n_f64(v1858.val[0], v1026.f64[0]), v1858.val[1], v1026, 1);
        v1036 = vmlaq_laneq_f64(vmulq_n_f64(v1877.val[0], v1026.f64[0]), v1877.val[1], v1026, 1);
        v1037 = vmlaq_laneq_f64(vmulq_n_f64(v1827.val[0], v1027.f64[0]), v1827.val[1], v1027, 1);
        v1038 = vaddq_f64(*(float64x2_t *)(result + 32), v1030);
        v1039 = vaddq_f64(*(float64x2_t *)(result + 16), v1029);
        v1040 = vaddq_f64(*(float64x2_t *)(result + 80), v1033);
        v1041 = vaddq_f64(*(float64x2_t *)(result + 64), v1032);
        v1042 = vaddq_f64(*(float64x2_t *)(result + 48), v1031);
        v1043 = vaddq_f64(*(float64x2_t *)(result + 128), v1036);
        v1044 = vaddq_f64(*(float64x2_t *)(result + 112), v1035);
        v1045 = vaddq_f64(*(float64x2_t *)(result + 96), v1034);
        v1827.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1877.val[0], v1027.f64[0]), v1877.val[1], v1027, 1));
        v1827.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1858.val[0], v1027.f64[0]), v1858.val[1], v1027, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1028);
        *(float64x2_t *)(result + 16) = v1039;
        *(float64x2_t *)(result + 32) = v1038;
        *(float64x2_t *)(result + 48) = v1042;
        *(float64x2_t *)(result + 64) = v1041;
        *(float64x2_t *)(result + 80) = v1040;
        *(float64x2_t *)(result + 96) = v1045;
        *(float64x2_t *)(result + 112) = v1044;
        *(float64x2_t *)(result + 128) = v1043;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1023, v1037);
        *(float64x2x2_t *)(result + 160) = v1827;
        v13 = *v12;
        v1006 = a2[16];
        goto LABEL_501;
      }
      v1015 = (char *)v1013;
    }
LABEL_499:
    result = sub_20F55CC0C((unint64_t *)(v13 + 4112), (uint64_t)&v1770, v1009, v1015);
    goto LABEL_500;
  }
LABEL_501:
  if (v1006 && a2[40])
  {
    v1046 = *((_DWORD *)a2 + 5);
    v1047 = *((unsigned int *)a2 + 11);
    v1048 = *(_QWORD *)(v13 + 4200);
    v1049 = (*(_DWORD *)(v13 + 4224) * v1047);
    v1050 = v1048 + 16 * v1049;
    v1770 = v1050;
    v1051 = *(_QWORD *)(*(_QWORD *)(v13 + 4232) + 8 * v1047);
    v1052 = (char *)(v1048 + 16 * (v1051 + v1049));
    v1771 = v1052;
    v1772 = v1047;
    if (v1051)
    {
      v1053 = 16 * v1051;
      while (*(_DWORD *)v1050 < v1046)
      {
        v1050 += 16;
        v1053 -= 16;
        if (!v1053)
          goto LABEL_512;
      }
    }
    if ((char *)v1050 != v1052)
    {
      if (*(_DWORD *)v1050 == v1046)
      {
        result = *(_QWORD *)(v13 + 4128) + 8 * *(_QWORD *)(v1050 + 8);
LABEL_513:
        v1828 = vld2q_f64(v1004);
        v1054 = *(float64x2_t *)(result + 144);
        v1859 = vld2q_f64(v955);
        v1878 = vld2q_f64(v1005);
        v1055 = a3[28];
        v1056 = a3[29];
        v1057 = a3[30];
        v1058 = a3[31];
        v1059 = vmlaq_laneq_f64(vmulq_n_f64(v1828.val[0], v1055.f64[0]), v1828.val[1], v1055, 1);
        v1060 = vmlaq_laneq_f64(vmulq_n_f64(v1859.val[0], v1055.f64[0]), v1859.val[1], v1055, 1);
        v1061 = vmlaq_laneq_f64(vmulq_n_f64(v1878.val[0], v1055.f64[0]), v1878.val[1], v1055, 1);
        v1062 = vmlaq_laneq_f64(vmulq_n_f64(v1828.val[0], v1056.f64[0]), v1828.val[1], v1056, 1);
        v1063 = vmlaq_laneq_f64(vmulq_n_f64(v1859.val[0], v1056.f64[0]), v1859.val[1], v1056, 1);
        v1064 = vmlaq_laneq_f64(vmulq_n_f64(v1878.val[0], v1056.f64[0]), v1878.val[1], v1056, 1);
        v1065 = vmlaq_laneq_f64(vmulq_n_f64(v1828.val[0], v1057.f64[0]), v1828.val[1], v1057, 1);
        v1066 = vmlaq_laneq_f64(vmulq_n_f64(v1859.val[0], v1057.f64[0]), v1859.val[1], v1057, 1);
        v1067 = vmlaq_laneq_f64(vmulq_n_f64(v1878.val[0], v1057.f64[0]), v1878.val[1], v1057, 1);
        v1068 = vmlaq_laneq_f64(vmulq_n_f64(v1828.val[0], v1058.f64[0]), v1828.val[1], v1058, 1);
        v1069 = vaddq_f64(*(float64x2_t *)(result + 32), v1061);
        v1070 = vaddq_f64(*(float64x2_t *)(result + 16), v1060);
        v1071 = vaddq_f64(*(float64x2_t *)(result + 80), v1064);
        v1072 = vaddq_f64(*(float64x2_t *)(result + 64), v1063);
        v1073 = vaddq_f64(*(float64x2_t *)(result + 48), v1062);
        v1074 = vaddq_f64(*(float64x2_t *)(result + 128), v1067);
        v1075 = vaddq_f64(*(float64x2_t *)(result + 112), v1066);
        v1076 = vaddq_f64(*(float64x2_t *)(result + 96), v1065);
        v1828.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1878.val[0], v1058.f64[0]), v1878.val[1], v1058, 1));
        v1828.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1859.val[0], v1058.f64[0]), v1859.val[1], v1058, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1059);
        *(float64x2_t *)(result + 16) = v1070;
        *(float64x2_t *)(result + 32) = v1069;
        *(float64x2_t *)(result + 48) = v1073;
        *(float64x2_t *)(result + 64) = v1072;
        *(float64x2_t *)(result + 80) = v1071;
        *(float64x2_t *)(result + 96) = v1076;
        *(float64x2_t *)(result + 112) = v1075;
        *(float64x2_t *)(result + 128) = v1074;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1054, v1068);
        *(float64x2x2_t *)(result + 160) = v1828;
        v13 = *v12;
        v1006 = a2[16];
        goto LABEL_514;
      }
      v1052 = (char *)v1050;
    }
LABEL_512:
    result = sub_20F55CC0C((unint64_t *)(v13 + 4112), (uint64_t)&v1770, v1046, v1052);
    goto LABEL_513;
  }
LABEL_514:
  if (v1006 && a2[48])
  {
    v1077 = *((_DWORD *)a2 + 5);
    v1078 = *((unsigned int *)a2 + 13);
    v1079 = *(_QWORD *)(v13 + 5208);
    v1080 = (*(_DWORD *)(v13 + 5232) * v1078);
    v1081 = v1079 + 16 * v1080;
    v1770 = v1081;
    v1082 = *(_QWORD *)(*(_QWORD *)(v13 + 5240) + 8 * v1078);
    v1083 = (char *)(v1079 + 16 * (v1082 + v1080));
    v1771 = v1083;
    v1772 = v1078;
    if (v1082)
    {
      v1084 = 16 * v1082;
      while (*(_DWORD *)v1081 < v1077)
      {
        v1081 += 16;
        v1084 -= 16;
        if (!v1084)
          goto LABEL_525;
      }
    }
    if ((char *)v1081 != v1083)
    {
      if (*(_DWORD *)v1081 == v1077)
      {
        result = *(_QWORD *)(v13 + 5136) + 8 * *(_QWORD *)(v1081 + 8);
LABEL_526:
        v1829 = vld2q_f64(v1004);
        v1085 = *(float64x2_t *)(result + 144);
        v1860 = vld2q_f64(v955);
        v1879 = vld2q_f64(v1005);
        v1086 = a3[32];
        v1087 = a3[33];
        v1088 = a3[34];
        v1089 = a3[35];
        v1090 = vmlaq_laneq_f64(vmulq_n_f64(v1829.val[0], v1086.f64[0]), v1829.val[1], v1086, 1);
        v1091 = vmlaq_laneq_f64(vmulq_n_f64(v1860.val[0], v1086.f64[0]), v1860.val[1], v1086, 1);
        v1092 = vmlaq_laneq_f64(vmulq_n_f64(v1879.val[0], v1086.f64[0]), v1879.val[1], v1086, 1);
        v1093 = vmlaq_laneq_f64(vmulq_n_f64(v1829.val[0], v1087.f64[0]), v1829.val[1], v1087, 1);
        v1094 = vmlaq_laneq_f64(vmulq_n_f64(v1860.val[0], v1087.f64[0]), v1860.val[1], v1087, 1);
        v1095 = vmlaq_laneq_f64(vmulq_n_f64(v1879.val[0], v1087.f64[0]), v1879.val[1], v1087, 1);
        v1096 = vmlaq_laneq_f64(vmulq_n_f64(v1829.val[0], v1088.f64[0]), v1829.val[1], v1088, 1);
        v1097 = vmlaq_laneq_f64(vmulq_n_f64(v1860.val[0], v1088.f64[0]), v1860.val[1], v1088, 1);
        v1098 = vmlaq_laneq_f64(vmulq_n_f64(v1879.val[0], v1088.f64[0]), v1879.val[1], v1088, 1);
        v1099 = vmlaq_laneq_f64(vmulq_n_f64(v1829.val[0], v1089.f64[0]), v1829.val[1], v1089, 1);
        v1100 = vaddq_f64(*(float64x2_t *)(result + 32), v1092);
        v1101 = vaddq_f64(*(float64x2_t *)(result + 16), v1091);
        v1102 = vaddq_f64(*(float64x2_t *)(result + 80), v1095);
        v1103 = vaddq_f64(*(float64x2_t *)(result + 64), v1094);
        v1104 = vaddq_f64(*(float64x2_t *)(result + 48), v1093);
        v1105 = vaddq_f64(*(float64x2_t *)(result + 128), v1098);
        v1106 = vaddq_f64(*(float64x2_t *)(result + 112), v1097);
        v1107 = vaddq_f64(*(float64x2_t *)(result + 96), v1096);
        v1829.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1879.val[0], v1089.f64[0]), v1879.val[1], v1089, 1));
        v1829.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1860.val[0], v1089.f64[0]), v1860.val[1], v1089, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1090);
        *(float64x2_t *)(result + 16) = v1101;
        *(float64x2_t *)(result + 32) = v1100;
        *(float64x2_t *)(result + 48) = v1104;
        *(float64x2_t *)(result + 64) = v1103;
        *(float64x2_t *)(result + 80) = v1102;
        *(float64x2_t *)(result + 96) = v1107;
        *(float64x2_t *)(result + 112) = v1106;
        *(float64x2_t *)(result + 128) = v1105;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1085, v1099);
        *(float64x2x2_t *)(result + 160) = v1829;
        v13 = *v12;
        v1006 = a2[16];
        goto LABEL_527;
      }
      v1083 = (char *)v1081;
    }
LABEL_525:
    result = sub_20F55CC0C((unint64_t *)(v13 + 5120), (uint64_t)&v1770, v1077, v1083);
    goto LABEL_526;
  }
LABEL_527:
  if (v1006 && a2[56])
  {
    v1108 = *((_DWORD *)a2 + 5);
    v1109 = *((unsigned int *)a2 + 15);
    v1110 = *(_QWORD *)(v13 + 5208);
    v1111 = (*(_DWORD *)(v13 + 5232) * v1109);
    v1112 = v1110 + 16 * v1111;
    v1770 = v1112;
    v1113 = *(_QWORD *)(*(_QWORD *)(v13 + 5240) + 8 * v1109);
    v1114 = (char *)(v1110 + 16 * (v1113 + v1111));
    v1771 = v1114;
    v1772 = v1109;
    if (v1113)
    {
      v1115 = 16 * v1113;
      while (*(_DWORD *)v1112 < v1108)
      {
        v1112 += 16;
        v1115 -= 16;
        if (!v1115)
          goto LABEL_538;
      }
    }
    if ((char *)v1112 != v1114)
    {
      if (*(_DWORD *)v1112 == v1108)
      {
        result = *(_QWORD *)(v13 + 5136) + 8 * *(_QWORD *)(v1112 + 8);
LABEL_539:
        v1830 = vld2q_f64(v1004);
        v1116 = *(float64x2_t *)(result + 144);
        v1861 = vld2q_f64(v955);
        v1880 = vld2q_f64(v1005);
        v1117 = a3[36];
        v1118 = a3[37];
        v1119 = a3[38];
        v1120 = a3[39];
        v1121 = vmlaq_laneq_f64(vmulq_n_f64(v1830.val[0], v1117.f64[0]), v1830.val[1], v1117, 1);
        v1122 = vmlaq_laneq_f64(vmulq_n_f64(v1861.val[0], v1117.f64[0]), v1861.val[1], v1117, 1);
        v1123 = vmlaq_laneq_f64(vmulq_n_f64(v1880.val[0], v1117.f64[0]), v1880.val[1], v1117, 1);
        v1124 = vmlaq_laneq_f64(vmulq_n_f64(v1830.val[0], v1118.f64[0]), v1830.val[1], v1118, 1);
        v1125 = vmlaq_laneq_f64(vmulq_n_f64(v1861.val[0], v1118.f64[0]), v1861.val[1], v1118, 1);
        v1126 = vmlaq_laneq_f64(vmulq_n_f64(v1880.val[0], v1118.f64[0]), v1880.val[1], v1118, 1);
        v1127 = vmlaq_laneq_f64(vmulq_n_f64(v1830.val[0], v1119.f64[0]), v1830.val[1], v1119, 1);
        v1128 = vmlaq_laneq_f64(vmulq_n_f64(v1861.val[0], v1119.f64[0]), v1861.val[1], v1119, 1);
        v1129 = vmlaq_laneq_f64(vmulq_n_f64(v1880.val[0], v1119.f64[0]), v1880.val[1], v1119, 1);
        v1130 = vmlaq_laneq_f64(vmulq_n_f64(v1830.val[0], v1120.f64[0]), v1830.val[1], v1120, 1);
        v1131 = vaddq_f64(*(float64x2_t *)(result + 32), v1123);
        v1132 = vaddq_f64(*(float64x2_t *)(result + 16), v1122);
        v1133 = vaddq_f64(*(float64x2_t *)(result + 80), v1126);
        v1134 = vaddq_f64(*(float64x2_t *)(result + 64), v1125);
        v1135 = vaddq_f64(*(float64x2_t *)(result + 48), v1124);
        v1136 = vaddq_f64(*(float64x2_t *)(result + 128), v1129);
        v1137 = vaddq_f64(*(float64x2_t *)(result + 112), v1128);
        v1138 = vaddq_f64(*(float64x2_t *)(result + 96), v1127);
        v1830.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1880.val[0], v1120.f64[0]), v1880.val[1], v1120, 1));
        v1830.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1861.val[0], v1120.f64[0]), v1861.val[1], v1120, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1121);
        *(float64x2_t *)(result + 16) = v1132;
        *(float64x2_t *)(result + 32) = v1131;
        *(float64x2_t *)(result + 48) = v1135;
        *(float64x2_t *)(result + 64) = v1134;
        *(float64x2_t *)(result + 80) = v1133;
        *(float64x2_t *)(result + 96) = v1138;
        *(float64x2_t *)(result + 112) = v1137;
        *(float64x2_t *)(result + 128) = v1136;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1116, v1130);
        *(float64x2x2_t *)(result + 160) = v1830;
        v13 = *v12;
        v1006 = a2[16];
        goto LABEL_540;
      }
      v1114 = (char *)v1112;
    }
LABEL_538:
    result = sub_20F55CC0C((unint64_t *)(v13 + 5120), (uint64_t)&v1770, v1108, v1114);
    goto LABEL_539;
  }
LABEL_540:
  if (v1006 && a2[64])
  {
    v1139 = *((_DWORD *)a2 + 5);
    v1140 = *((unsigned int *)a2 + 17);
    v1141 = *(_QWORD *)(v13 + 6216);
    v1142 = (*(_DWORD *)(v13 + 6240) * v1140);
    v1143 = v1141 + 16 * v1142;
    v1770 = v1143;
    v1144 = *(_QWORD *)(*(_QWORD *)(v13 + 6248) + 8 * v1140);
    v1145 = (char *)(v1141 + 16 * (v1144 + v1142));
    v1771 = v1145;
    v1772 = v1140;
    if (v1144)
    {
      v1146 = 16 * v1144;
      while (*(_DWORD *)v1143 < v1139)
      {
        v1143 += 16;
        v1146 -= 16;
        if (!v1146)
          goto LABEL_551;
      }
    }
    if ((char *)v1143 != v1145)
    {
      if (*(_DWORD *)v1143 == v1139)
      {
        result = *(_QWORD *)(v13 + 6144) + 8 * *(_QWORD *)(v1143 + 8);
LABEL_552:
        v1802 = vld2q_f64(v1004);
        v1831 = vld2q_f64(v955);
        v1862 = vld2q_f64(v1005);
        v1147 = a3[40];
        v1148 = a3[41];
        v1149 = a3[42];
        v1150 = vmlaq_laneq_f64(vmulq_n_f64(v1802.val[0], v1147.f64[0]), v1802.val[1], v1147, 1);
        v1151 = vmlaq_laneq_f64(vmulq_n_f64(v1831.val[0], v1147.f64[0]), v1831.val[1], v1147, 1);
        v1152 = vmlaq_laneq_f64(vmulq_n_f64(v1862.val[0], v1147.f64[0]), v1862.val[1], v1147, 1);
        v1153 = vmlaq_laneq_f64(vmulq_n_f64(v1802.val[0], v1148.f64[0]), v1802.val[1], v1148, 1);
        v1154 = vmlaq_laneq_f64(vmulq_n_f64(v1831.val[0], v1148.f64[0]), v1831.val[1], v1148, 1);
        v1155 = vmlaq_laneq_f64(vmulq_n_f64(v1862.val[0], v1148.f64[0]), v1862.val[1], v1148, 1);
        v1156 = vmlaq_laneq_f64(vmulq_n_f64(v1802.val[0], v1149.f64[0]), v1802.val[1], v1149, 1);
        v1157 = vaddq_f64(*(float64x2_t *)(result + 32), v1152);
        v1158 = vaddq_f64(*(float64x2_t *)(result + 16), v1151);
        v1159 = vaddq_f64(*(float64x2_t *)(result + 80), v1155);
        v1160 = vaddq_f64(*(float64x2_t *)(result + 64), v1154);
        v1161 = vaddq_f64(*(float64x2_t *)(result + 48), v1153);
        v1802.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1862.val[0], v1149.f64[0]), v1862.val[1], v1149, 1));
        v1802.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1831.val[0], v1149.f64[0]), v1831.val[1], v1149, 1));
        v1831.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v1156);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1150);
        *(float64x2_t *)(result + 16) = v1158;
        *(float64x2_t *)(result + 32) = v1157;
        *(float64x2_t *)(result + 48) = v1161;
        *(float64x2_t *)(result + 64) = v1160;
        *(float64x2_t *)(result + 80) = v1159;
        *(float64x2_t *)(result + 96) = v1831.val[0];
        *(float64x2x2_t *)(result + 112) = v1802;
        v13 = *v12;
        v1006 = a2[16];
        goto LABEL_553;
      }
      v1145 = (char *)v1143;
    }
LABEL_551:
    result = sub_20F55CD48((unint64_t *)(v13 + 6128), (uint64_t)&v1770, v1139, v1145);
    goto LABEL_552;
  }
LABEL_553:
  if (v1006 && a2[72])
  {
    v1162 = *((_DWORD *)a2 + 5);
    v1163 = *((unsigned int *)a2 + 19);
    v1164 = *(_QWORD *)(v13 + 6216);
    v1165 = (*(_DWORD *)(v13 + 6240) * v1163);
    v1166 = v1164 + 16 * v1165;
    v1770 = v1166;
    v1167 = *(_QWORD *)(*(_QWORD *)(v13 + 6248) + 8 * v1163);
    v1168 = (char *)(v1164 + 16 * (v1167 + v1165));
    v1771 = v1168;
    v1772 = v1163;
    if (v1167)
    {
      v1169 = 16 * v1167;
      while (*(_DWORD *)v1166 < v1162)
      {
        v1166 += 16;
        v1169 -= 16;
        if (!v1169)
          goto LABEL_564;
      }
    }
    if ((char *)v1166 != v1168)
    {
      if (*(_DWORD *)v1166 == v1162)
      {
        result = *(_QWORD *)(v13 + 6144) + 8 * *(_QWORD *)(v1166 + 8);
LABEL_565:
        v1795 = vld2q_f64(v1004);
        v1814 = vld2q_f64(v955);
        v1848 = vld2q_f64(v1005);
        v1170 = a3[43];
        v1171 = a3[44];
        v1172 = a3[45];
        v1173 = vmlaq_laneq_f64(vmulq_n_f64(v1795.val[0], v1170.f64[0]), v1795.val[1], v1170, 1);
        v1174 = vmlaq_laneq_f64(vmulq_n_f64(v1814.val[0], v1170.f64[0]), v1814.val[1], v1170, 1);
        v1175 = vmlaq_laneq_f64(vmulq_n_f64(v1848.val[0], v1170.f64[0]), v1848.val[1], v1170, 1);
        v1176 = vmlaq_laneq_f64(vmulq_n_f64(v1795.val[0], v1171.f64[0]), v1795.val[1], v1171, 1);
        v1177 = vmlaq_laneq_f64(vmulq_n_f64(v1814.val[0], v1171.f64[0]), v1814.val[1], v1171, 1);
        v1178 = vmlaq_laneq_f64(vmulq_n_f64(v1848.val[0], v1171.f64[0]), v1848.val[1], v1171, 1);
        v1179 = vmlaq_laneq_f64(vmulq_n_f64(v1795.val[0], v1172.f64[0]), v1795.val[1], v1172, 1);
        v1795.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1814.val[0], v1172.f64[0]), v1814.val[1], v1172, 1);
        v1180 = vaddq_f64(*(float64x2_t *)(result + 32), v1175);
        v1181 = vaddq_f64(*(float64x2_t *)(result + 16), v1174);
        v1814.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v1178);
        v1814.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v1177);
        v1182 = vaddq_f64(*(float64x2_t *)(result + 48), v1176);
        v1795.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1848.val[0], v1172.f64[0]), v1848.val[1], v1172, 1));
        v1795.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1795.val[0]);
        v1183 = vaddq_f64(*(float64x2_t *)(result + 96), v1179);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1173);
        *(float64x2_t *)(result + 16) = v1181;
        *(float64x2_t *)(result + 32) = v1180;
        *(float64x2_t *)(result + 48) = v1182;
        *(float64x2_t *)(result + 64) = v1814.val[1];
        *(float64x2_t *)(result + 80) = v1814.val[0];
        *(float64x2_t *)(result + 96) = v1183;
        *(float64x2x2_t *)(result + 112) = v1795;
        v13 = *v12;
        goto LABEL_566;
      }
      v1168 = (char *)v1166;
    }
LABEL_564:
    result = sub_20F55CD48((unint64_t *)(v13 + 6128), (uint64_t)&v1770, v1162, v1168);
    goto LABEL_565;
  }
LABEL_566:
  v1184 = a2[8];
  if (!a2[8] || !*a2)
    goto LABEL_580;
  v1185 = *((_DWORD *)a2 + 3);
  v1186 = *((unsigned int *)a2 + 1);
  if (v1186 < v1185)
    goto LABEL_582;
  v1188 = *(_QWORD *)(v13 + 3624);
  v1189 = (*(_DWORD *)(v13 + 3648) * v1186);
  v1190 = v1188 + 16 * v1189;
  v1770 = v1190;
  v1191 = *(_QWORD *)(*(_QWORD *)(v13 + 3656) + 8 * v1186);
  v1192 = (char *)(v1188 + 16 * (v1191 + v1189));
  v1771 = v1192;
  v1772 = v1186;
  if (v1191)
  {
    v1193 = 16 * v1191;
    while (*(_DWORD *)v1190 < v1185)
    {
      v1190 += 16;
      v1193 -= 16;
      if (!v1193)
        goto LABEL_578;
    }
  }
  if ((char *)v1190 == v1192)
    goto LABEL_578;
  if (*(_DWORD *)v1190 != v1185)
  {
    v1192 = (char *)v1190;
LABEL_578:
    result = sub_20F55CAD0((unint64_t *)(v13 + 3536), (uint64_t)&v1770, v1185, v1192);
    goto LABEL_579;
  }
  result = *(_QWORD *)(v13 + 3552) + 8 * *(_QWORD *)(v1190 + 8);
LABEL_579:
  v1187 = a3[6].f64;
  v1778 = vld2q_f64(v1187);
  v1194 = a3[8].f64;
  v1796 = vld2q_f64(v1194);
  v1195 = a3[10].f64;
  v1196 = a3[1];
  v1197 = a3[2];
  v1198 = a3[3];
  v1199 = a3[4];
  v1200 = a3[5];
  v1201 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], a3->f64[0]), v1778.val[1], *a3, 1);
  v1202 = vmlaq_laneq_f64(vmulq_n_f64(v1796.val[0], a3->f64[0]), v1796.val[1], *a3, 1);
  v1203 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], v1196.f64[0]), v1778.val[1], v1196, 1);
  v1204 = vmlaq_laneq_f64(vmulq_n_f64(v1796.val[0], v1196.f64[0]), v1796.val[1], v1196, 1);
  v1205 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], v1197.f64[0]), v1778.val[1], v1197, 1);
  v1206 = vmlaq_laneq_f64(vmulq_n_f64(v1796.val[0], v1197.f64[0]), v1796.val[1], v1197, 1);
  v1207 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], v1198.f64[0]), v1778.val[1], v1198, 1);
  v1208 = vmlaq_laneq_f64(vmulq_n_f64(v1796.val[0], v1198.f64[0]), v1796.val[1], v1198, 1);
  v1209 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], v1199.f64[0]), v1778.val[1], v1199, 1);
  v1210 = vmlaq_laneq_f64(vmulq_n_f64(v1796.val[0], v1199.f64[0]), v1796.val[1], v1199, 1);
  v1211 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], v1200.f64[0]), v1778.val[1], v1200, 1);
  v1778.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1796.val[0], v1200.f64[0]), v1796.val[1], v1200, 1);
  *(float64x2x2_t *)((char *)&v1778 + 16) = vld2q_f64(v1195);
  v1212 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[1], v1196.f64[0]), v1796.val[0], v1196, 1);
  v1213 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[1], v1197.f64[0]), v1796.val[0], v1197, 1);
  v1214 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[1], v1198.f64[0]), v1796.val[0], v1198, 1);
  v1215 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[1], v1199.f64[0]), v1796.val[0], v1199, 1);
  v1216 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[1], v1200.f64[0]), v1796.val[0], v1200, 1);
  v1778.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1778.val[1], a3->f64[0]), v1796.val[0], *a3, 1));
  v1796.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v1202);
  v1217 = vaddq_f64(*(float64x2_t *)result, v1201);
  v1218 = vaddq_f64(*(float64x2_t *)(result + 80), v1212);
  v1219 = vaddq_f64(*(float64x2_t *)(result + 64), v1204);
  v1796.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v1203);
  v1220 = vaddq_f64(*(float64x2_t *)(result + 128), v1213);
  v1221 = vaddq_f64(*(float64x2_t *)(result + 112), v1206);
  v1222 = vaddq_f64(*(float64x2_t *)(result + 96), v1205);
  v1223 = vaddq_f64(*(float64x2_t *)(result + 176), v1214);
  v1224 = vaddq_f64(*(float64x2_t *)(result + 160), v1208);
  v1225 = vaddq_f64(*(float64x2_t *)(result + 144), v1207);
  v1226 = *(float64x2_t *)(result + 240);
  v1227 = vaddq_f64(*(float64x2_t *)(result + 224), v1215);
  v1228 = vaddq_f64(*(float64x2_t *)(result + 208), v1210);
  v1229 = vaddq_f64(*(float64x2_t *)(result + 192), v1209);
  v1230 = vaddq_f64(*(float64x2_t *)(result + 272), v1216);
  v1778.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1778.val[0]);
  *(float64x2_t *)result = v1217;
  *(float64x2_t *)(result + 16) = v1796.val[1];
  *(float64x2_t *)(result + 32) = v1778.val[1];
  *(float64x2_t *)(result + 48) = v1796.val[0];
  *(float64x2_t *)(result + 64) = v1219;
  *(float64x2_t *)(result + 80) = v1218;
  *(float64x2_t *)(result + 96) = v1222;
  *(float64x2_t *)(result + 112) = v1221;
  *(float64x2_t *)(result + 128) = v1220;
  *(float64x2_t *)(result + 144) = v1225;
  *(float64x2_t *)(result + 160) = v1224;
  *(float64x2_t *)(result + 176) = v1223;
  *(float64x2_t *)(result + 192) = v1229;
  *(float64x2_t *)(result + 208) = v1228;
  *(float64x2_t *)(result + 224) = v1227;
  *(float64x2_t *)(result + 240) = vaddq_f64(v1226, v1211);
  *(float64x2_t *)(result + 256) = v1778.val[0];
  *(float64x2_t *)(result + 272) = v1230;
  v1184 = a2[8];
  v13 = *v12;
LABEL_580:
  if (!v1184)
    goto LABEL_670;
  v1185 = *((_DWORD *)a2 + 3);
LABEL_582:
  v1231 = *(_QWORD *)(v13 + 3624);
  v1232 = *(_DWORD *)(v13 + 3648) * v1185;
  v1233 = v1231 + 16 * v1232;
  v1770 = v1233;
  v1234 = *(_QWORD *)(*(_QWORD *)(v13 + 3656) + 8 * v1185);
  v1235 = (char *)(v1231 + 16 * (v1234 + v1232));
  v1771 = v1235;
  v1772 = v1185;
  if (v1234)
  {
    v1236 = 16 * v1234;
    while (*(_DWORD *)v1233 < v1185)
    {
      v1233 += 16;
      v1236 -= 16;
      if (!v1236)
        goto LABEL_591;
    }
  }
  if ((char *)v1233 == v1235)
    goto LABEL_591;
  if (*(_DWORD *)v1233 != v1185)
  {
    v1235 = (char *)v1233;
LABEL_591:
    result = sub_20F55CAD0((unint64_t *)(v13 + 3536), (uint64_t)&v1770, v1185, v1235);
    goto LABEL_592;
  }
  result = *(_QWORD *)(v13 + 3552) + 8 * *(_QWORD *)(v1233 + 8);
LABEL_592:
  v1237 = a3[10].f64;
  v1238 = a3[10];
  v1239 = a3[8].f64;
  v1240 = a3[8];
  v1241 = a3[6];
  v1242 = a3[7];
  v1243 = a3[9];
  v1244 = a3[11];
  v1245 = (float64x2_t)vzip1q_s64((int64x2_t)v1240, (int64x2_t)v1243);
  *(_QWORD *)&v1246.f64[0] = vdupq_laneq_s64((int64x2_t)v1240, 1).u64[0];
  v1246.f64[1] = a3[9].f64[1];
  *(_QWORD *)&v1247.f64[0] = vdupq_laneq_s64((int64x2_t)v1238, 1).u64[0];
  v1247.f64[1] = a3[11].f64[1];
  v1248 = (float64x2_t)vzip1q_s64((int64x2_t)v1238, (int64x2_t)v1244);
  v1249 = (float64x2_t)vzip1q_s64((int64x2_t)v1241, (int64x2_t)v1242);
  v1250 = (float64x2_t)vzip2q_s64((int64x2_t)v1241, (int64x2_t)v1242);
  v1251 = vmlaq_laneq_f64(vmulq_n_f64(v1249, v1241.f64[0]), v1250, v1241, 1);
  v1252 = vmlaq_laneq_f64(vmulq_n_f64(v1245, v1241.f64[0]), v1246, v1241, 1);
  v1253 = vmlaq_laneq_f64(vmulq_n_f64(v1248, v1241.f64[0]), v1247, v1241, 1);
  v1254 = vmlaq_laneq_f64(vmulq_n_f64(v1249, v1242.f64[0]), v1250, v1242, 1);
  v1255 = vmlaq_laneq_f64(vmulq_n_f64(v1245, v1242.f64[0]), v1246, v1242, 1);
  v1256 = vmlaq_laneq_f64(vmulq_n_f64(v1248, v1242.f64[0]), v1247, v1242, 1);
  v1257 = vmlaq_laneq_f64(vmulq_n_f64(v1249, v1240.f64[0]), v1250, v1240, 1);
  v1258 = vmlaq_laneq_f64(vmulq_n_f64(v1245, v1240.f64[0]), v1246, v1240, 1);
  v1259 = vmlaq_laneq_f64(vmulq_n_f64(v1248, v1240.f64[0]), v1247, v1240, 1);
  v1260 = vmlaq_laneq_f64(vmulq_n_f64(v1249, v1243.f64[0]), v1250, v1243, 1);
  v1261 = vmlaq_laneq_f64(vmulq_n_f64(v1245, v1243.f64[0]), v1246, v1243, 1);
  v1262 = vmlaq_laneq_f64(vmulq_n_f64(v1248, v1243.f64[0]), v1247, v1243, 1);
  v1263 = vmlaq_laneq_f64(vmulq_n_f64(v1249, v1238.f64[0]), v1250, v1238, 1);
  v1264 = vmlaq_laneq_f64(vmulq_n_f64(v1245, v1238.f64[0]), v1246, v1238, 1);
  v1265 = vmlaq_laneq_f64(vmulq_n_f64(v1248, v1238.f64[0]), v1247, v1238, 1);
  v1266 = vmlaq_laneq_f64(vmulq_n_f64(v1249, v1244.f64[0]), v1250, v1244, 1);
  v1267 = vmlaq_laneq_f64(vmulq_n_f64(v1245, v1244.f64[0]), v1246, v1244, 1);
  v1268 = vmlaq_laneq_f64(vmulq_n_f64(v1248, v1244.f64[0]), v1247, v1244, 1);
  v1269 = vaddq_f64(*(float64x2_t *)(result + 32), v1253);
  v1270 = vaddq_f64(*(float64x2_t *)(result + 16), v1252);
  v1271 = vaddq_f64(*(float64x2_t *)result, v1251);
  v1272 = vaddq_f64(*(float64x2_t *)(result + 80), v1256);
  v1273 = vaddq_f64(*(float64x2_t *)(result + 64), v1255);
  v1274 = vaddq_f64(*(float64x2_t *)(result + 48), v1254);
  v1275 = vaddq_f64(*(float64x2_t *)(result + 128), v1259);
  v1276 = vaddq_f64(*(float64x2_t *)(result + 112), v1258);
  v1277 = vaddq_f64(*(float64x2_t *)(result + 96), v1257);
  v1278 = vaddq_f64(*(float64x2_t *)(result + 176), v1262);
  v1279 = vaddq_f64(*(float64x2_t *)(result + 160), v1261);
  v1280 = vaddq_f64(*(float64x2_t *)(result + 144), v1260);
  v1281 = *(float64x2_t *)(result + 240);
  v1282 = vaddq_f64(*(float64x2_t *)(result + 224), v1265);
  v1283 = vaddq_f64(*(float64x2_t *)(result + 208), v1264);
  v1284 = vaddq_f64(*(float64x2_t *)(result + 192), v1263);
  v1285 = vaddq_f64(*(float64x2_t *)(result + 272), v1268);
  v1286 = vaddq_f64(*(float64x2_t *)(result + 256), v1267);
  *(float64x2_t *)result = v1271;
  *(float64x2_t *)(result + 16) = v1270;
  *(float64x2_t *)(result + 32) = v1269;
  *(float64x2_t *)(result + 48) = v1274;
  *(float64x2_t *)(result + 64) = v1273;
  *(float64x2_t *)(result + 80) = v1272;
  *(float64x2_t *)(result + 96) = v1277;
  *(float64x2_t *)(result + 112) = v1276;
  *(float64x2_t *)(result + 128) = v1275;
  *(float64x2_t *)(result + 144) = v1280;
  *(float64x2_t *)(result + 160) = v1279;
  *(float64x2_t *)(result + 176) = v1278;
  *(float64x2_t *)(result + 192) = v1284;
  *(float64x2_t *)(result + 208) = v1283;
  *(float64x2_t *)(result + 224) = v1282;
  *(float64x2_t *)(result + 240) = vaddq_f64(v1281, v1266);
  *(float64x2_t *)(result + 256) = v1286;
  *(float64x2_t *)(result + 272) = v1285;
  v1287 = a3[6].f64;
  v13 = *v12;
  v1288 = a2[8];
  if (a2[8] && a2[32])
  {
    v1289 = *((_DWORD *)a2 + 3);
    v1290 = *((unsigned int *)a2 + 9);
    v1291 = *(_QWORD *)(v13 + 4632);
    v1292 = (*(_DWORD *)(v13 + 4656) * v1290);
    v1293 = v1291 + 16 * v1292;
    v1770 = v1293;
    v1294 = *(_QWORD *)(*(_QWORD *)(v13 + 4664) + 8 * v1290);
    v1295 = (char *)(v1291 + 16 * (v1294 + v1292));
    v1771 = v1295;
    v1772 = v1290;
    if (v1294)
    {
      v1296 = 16 * v1294;
      while (*(_DWORD *)v1293 < v1289)
      {
        v1293 += 16;
        v1296 -= 16;
        if (!v1296)
          goto LABEL_603;
      }
    }
    if ((char *)v1293 != v1295)
    {
      if (*(_DWORD *)v1293 == v1289)
      {
        result = *(_QWORD *)(v13 + 4560) + 8 * *(_QWORD *)(v1293 + 8);
LABEL_604:
        v1832 = vld2q_f64(v1287);
        v1297 = *(float64x2_t *)(result + 144);
        v1863 = vld2q_f64(v1239);
        v1881 = vld2q_f64(v1237);
        v1298 = a3[24];
        v1299 = a3[25];
        v1300 = a3[26];
        v1301 = a3[27];
        v1302 = vmlaq_laneq_f64(vmulq_n_f64(v1832.val[0], v1298.f64[0]), v1832.val[1], v1298, 1);
        v1303 = vmlaq_laneq_f64(vmulq_n_f64(v1863.val[0], v1298.f64[0]), v1863.val[1], v1298, 1);
        v1304 = vmlaq_laneq_f64(vmulq_n_f64(v1881.val[0], v1298.f64[0]), v1881.val[1], v1298, 1);
        v1305 = vmlaq_laneq_f64(vmulq_n_f64(v1832.val[0], v1299.f64[0]), v1832.val[1], v1299, 1);
        v1306 = vmlaq_laneq_f64(vmulq_n_f64(v1863.val[0], v1299.f64[0]), v1863.val[1], v1299, 1);
        v1307 = vmlaq_laneq_f64(vmulq_n_f64(v1881.val[0], v1299.f64[0]), v1881.val[1], v1299, 1);
        v1308 = vmlaq_laneq_f64(vmulq_n_f64(v1832.val[0], v1300.f64[0]), v1832.val[1], v1300, 1);
        v1309 = vmlaq_laneq_f64(vmulq_n_f64(v1863.val[0], v1300.f64[0]), v1863.val[1], v1300, 1);
        v1310 = vmlaq_laneq_f64(vmulq_n_f64(v1881.val[0], v1300.f64[0]), v1881.val[1], v1300, 1);
        v1311 = vmlaq_laneq_f64(vmulq_n_f64(v1832.val[0], v1301.f64[0]), v1832.val[1], v1301, 1);
        v1312 = vaddq_f64(*(float64x2_t *)(result + 32), v1304);
        v1313 = vaddq_f64(*(float64x2_t *)(result + 16), v1303);
        v1314 = vaddq_f64(*(float64x2_t *)(result + 80), v1307);
        v1315 = vaddq_f64(*(float64x2_t *)(result + 64), v1306);
        v1316 = vaddq_f64(*(float64x2_t *)(result + 48), v1305);
        v1317 = vaddq_f64(*(float64x2_t *)(result + 128), v1310);
        v1318 = vaddq_f64(*(float64x2_t *)(result + 112), v1309);
        v1319 = vaddq_f64(*(float64x2_t *)(result + 96), v1308);
        v1832.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1881.val[0], v1301.f64[0]), v1881.val[1], v1301, 1));
        v1832.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1863.val[0], v1301.f64[0]), v1863.val[1], v1301, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1302);
        *(float64x2_t *)(result + 16) = v1313;
        *(float64x2_t *)(result + 32) = v1312;
        *(float64x2_t *)(result + 48) = v1316;
        *(float64x2_t *)(result + 64) = v1315;
        *(float64x2_t *)(result + 80) = v1314;
        *(float64x2_t *)(result + 96) = v1319;
        *(float64x2_t *)(result + 112) = v1318;
        *(float64x2_t *)(result + 128) = v1317;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1297, v1311);
        *(float64x2x2_t *)(result + 160) = v1832;
        v13 = *v12;
        v1288 = a2[8];
        goto LABEL_605;
      }
      v1295 = (char *)v1293;
    }
LABEL_603:
    result = sub_20F55CC0C((unint64_t *)(v13 + 4544), (uint64_t)&v1770, v1289, v1295);
    goto LABEL_604;
  }
LABEL_605:
  if (v1288 && a2[40])
  {
    v1320 = *((_DWORD *)a2 + 3);
    v1321 = *((unsigned int *)a2 + 11);
    v1322 = *(_QWORD *)(v13 + 4632);
    v1323 = (*(_DWORD *)(v13 + 4656) * v1321);
    v1324 = v1322 + 16 * v1323;
    v1770 = v1324;
    v1325 = *(_QWORD *)(*(_QWORD *)(v13 + 4664) + 8 * v1321);
    v1326 = (char *)(v1322 + 16 * (v1325 + v1323));
    v1771 = v1326;
    v1772 = v1321;
    if (v1325)
    {
      v1327 = 16 * v1325;
      while (*(_DWORD *)v1324 < v1320)
      {
        v1324 += 16;
        v1327 -= 16;
        if (!v1327)
          goto LABEL_616;
      }
    }
    if ((char *)v1324 != v1326)
    {
      if (*(_DWORD *)v1324 == v1320)
      {
        result = *(_QWORD *)(v13 + 4560) + 8 * *(_QWORD *)(v1324 + 8);
LABEL_617:
        v1833 = vld2q_f64(v1287);
        v1328 = *(float64x2_t *)(result + 144);
        v1864 = vld2q_f64(v1239);
        v1882 = vld2q_f64(v1237);
        v1329 = a3[28];
        v1330 = a3[29];
        v1331 = a3[30];
        v1332 = a3[31];
        v1333 = vmlaq_laneq_f64(vmulq_n_f64(v1833.val[0], v1329.f64[0]), v1833.val[1], v1329, 1);
        v1334 = vmlaq_laneq_f64(vmulq_n_f64(v1864.val[0], v1329.f64[0]), v1864.val[1], v1329, 1);
        v1335 = vmlaq_laneq_f64(vmulq_n_f64(v1882.val[0], v1329.f64[0]), v1882.val[1], v1329, 1);
        v1336 = vmlaq_laneq_f64(vmulq_n_f64(v1833.val[0], v1330.f64[0]), v1833.val[1], v1330, 1);
        v1337 = vmlaq_laneq_f64(vmulq_n_f64(v1864.val[0], v1330.f64[0]), v1864.val[1], v1330, 1);
        v1338 = vmlaq_laneq_f64(vmulq_n_f64(v1882.val[0], v1330.f64[0]), v1882.val[1], v1330, 1);
        v1339 = vmlaq_laneq_f64(vmulq_n_f64(v1833.val[0], v1331.f64[0]), v1833.val[1], v1331, 1);
        v1340 = vmlaq_laneq_f64(vmulq_n_f64(v1864.val[0], v1331.f64[0]), v1864.val[1], v1331, 1);
        v1341 = vmlaq_laneq_f64(vmulq_n_f64(v1882.val[0], v1331.f64[0]), v1882.val[1], v1331, 1);
        v1342 = vmlaq_laneq_f64(vmulq_n_f64(v1833.val[0], v1332.f64[0]), v1833.val[1], v1332, 1);
        v1343 = vaddq_f64(*(float64x2_t *)(result + 32), v1335);
        v1344 = vaddq_f64(*(float64x2_t *)(result + 16), v1334);
        v1345 = vaddq_f64(*(float64x2_t *)(result + 80), v1338);
        v1346 = vaddq_f64(*(float64x2_t *)(result + 64), v1337);
        v1347 = vaddq_f64(*(float64x2_t *)(result + 48), v1336);
        v1348 = vaddq_f64(*(float64x2_t *)(result + 128), v1341);
        v1349 = vaddq_f64(*(float64x2_t *)(result + 112), v1340);
        v1350 = vaddq_f64(*(float64x2_t *)(result + 96), v1339);
        v1833.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1882.val[0], v1332.f64[0]), v1882.val[1], v1332, 1));
        v1833.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1864.val[0], v1332.f64[0]), v1864.val[1], v1332, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1333);
        *(float64x2_t *)(result + 16) = v1344;
        *(float64x2_t *)(result + 32) = v1343;
        *(float64x2_t *)(result + 48) = v1347;
        *(float64x2_t *)(result + 64) = v1346;
        *(float64x2_t *)(result + 80) = v1345;
        *(float64x2_t *)(result + 96) = v1350;
        *(float64x2_t *)(result + 112) = v1349;
        *(float64x2_t *)(result + 128) = v1348;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1328, v1342);
        *(float64x2x2_t *)(result + 160) = v1833;
        v13 = *v12;
        v1288 = a2[8];
        goto LABEL_618;
      }
      v1326 = (char *)v1324;
    }
LABEL_616:
    result = sub_20F55CC0C((unint64_t *)(v13 + 4544), (uint64_t)&v1770, v1320, v1326);
    goto LABEL_617;
  }
LABEL_618:
  if (v1288 && a2[48])
  {
    v1351 = *((_DWORD *)a2 + 3);
    v1352 = *((unsigned int *)a2 + 13);
    v1353 = *(_QWORD *)(v13 + 5640);
    v1354 = (*(_DWORD *)(v13 + 5664) * v1352);
    v1355 = v1353 + 16 * v1354;
    v1770 = v1355;
    v1356 = *(_QWORD *)(*(_QWORD *)(v13 + 5672) + 8 * v1352);
    v1357 = (char *)(v1353 + 16 * (v1356 + v1354));
    v1771 = v1357;
    v1772 = v1352;
    if (v1356)
    {
      v1358 = 16 * v1356;
      while (*(_DWORD *)v1355 < v1351)
      {
        v1355 += 16;
        v1358 -= 16;
        if (!v1358)
          goto LABEL_629;
      }
    }
    if ((char *)v1355 != v1357)
    {
      if (*(_DWORD *)v1355 == v1351)
      {
        result = *(_QWORD *)(v13 + 5568) + 8 * *(_QWORD *)(v1355 + 8);
LABEL_630:
        v1834 = vld2q_f64(v1287);
        v1359 = *(float64x2_t *)(result + 144);
        v1865 = vld2q_f64(v1239);
        v1883 = vld2q_f64(v1237);
        v1360 = a3[32];
        v1361 = a3[33];
        v1362 = a3[34];
        v1363 = a3[35];
        v1364 = vmlaq_laneq_f64(vmulq_n_f64(v1834.val[0], v1360.f64[0]), v1834.val[1], v1360, 1);
        v1365 = vmlaq_laneq_f64(vmulq_n_f64(v1865.val[0], v1360.f64[0]), v1865.val[1], v1360, 1);
        v1366 = vmlaq_laneq_f64(vmulq_n_f64(v1883.val[0], v1360.f64[0]), v1883.val[1], v1360, 1);
        v1367 = vmlaq_laneq_f64(vmulq_n_f64(v1834.val[0], v1361.f64[0]), v1834.val[1], v1361, 1);
        v1368 = vmlaq_laneq_f64(vmulq_n_f64(v1865.val[0], v1361.f64[0]), v1865.val[1], v1361, 1);
        v1369 = vmlaq_laneq_f64(vmulq_n_f64(v1883.val[0], v1361.f64[0]), v1883.val[1], v1361, 1);
        v1370 = vmlaq_laneq_f64(vmulq_n_f64(v1834.val[0], v1362.f64[0]), v1834.val[1], v1362, 1);
        v1371 = vmlaq_laneq_f64(vmulq_n_f64(v1865.val[0], v1362.f64[0]), v1865.val[1], v1362, 1);
        v1372 = vmlaq_laneq_f64(vmulq_n_f64(v1883.val[0], v1362.f64[0]), v1883.val[1], v1362, 1);
        v1373 = vmlaq_laneq_f64(vmulq_n_f64(v1834.val[0], v1363.f64[0]), v1834.val[1], v1363, 1);
        v1374 = vaddq_f64(*(float64x2_t *)(result + 32), v1366);
        v1375 = vaddq_f64(*(float64x2_t *)(result + 16), v1365);
        v1376 = vaddq_f64(*(float64x2_t *)(result + 80), v1369);
        v1377 = vaddq_f64(*(float64x2_t *)(result + 64), v1368);
        v1378 = vaddq_f64(*(float64x2_t *)(result + 48), v1367);
        v1379 = vaddq_f64(*(float64x2_t *)(result + 128), v1372);
        v1380 = vaddq_f64(*(float64x2_t *)(result + 112), v1371);
        v1381 = vaddq_f64(*(float64x2_t *)(result + 96), v1370);
        v1834.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1883.val[0], v1363.f64[0]), v1883.val[1], v1363, 1));
        v1834.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1865.val[0], v1363.f64[0]), v1865.val[1], v1363, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1364);
        *(float64x2_t *)(result + 16) = v1375;
        *(float64x2_t *)(result + 32) = v1374;
        *(float64x2_t *)(result + 48) = v1378;
        *(float64x2_t *)(result + 64) = v1377;
        *(float64x2_t *)(result + 80) = v1376;
        *(float64x2_t *)(result + 96) = v1381;
        *(float64x2_t *)(result + 112) = v1380;
        *(float64x2_t *)(result + 128) = v1379;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1359, v1373);
        *(float64x2x2_t *)(result + 160) = v1834;
        v13 = *v12;
        v1288 = a2[8];
        goto LABEL_631;
      }
      v1357 = (char *)v1355;
    }
LABEL_629:
    result = sub_20F55CC0C((unint64_t *)(v13 + 5552), (uint64_t)&v1770, v1351, v1357);
    goto LABEL_630;
  }
LABEL_631:
  if (v1288 && a2[56])
  {
    v1382 = *((_DWORD *)a2 + 3);
    v1383 = *((unsigned int *)a2 + 15);
    v1384 = *(_QWORD *)(v13 + 5640);
    v1385 = (*(_DWORD *)(v13 + 5664) * v1383);
    v1386 = v1384 + 16 * v1385;
    v1770 = v1386;
    v1387 = *(_QWORD *)(*(_QWORD *)(v13 + 5672) + 8 * v1383);
    v1388 = (char *)(v1384 + 16 * (v1387 + v1385));
    v1771 = v1388;
    v1772 = v1383;
    if (v1387)
    {
      v1389 = 16 * v1387;
      while (*(_DWORD *)v1386 < v1382)
      {
        v1386 += 16;
        v1389 -= 16;
        if (!v1389)
          goto LABEL_642;
      }
    }
    if ((char *)v1386 != v1388)
    {
      if (*(_DWORD *)v1386 == v1382)
      {
        result = *(_QWORD *)(v13 + 5568) + 8 * *(_QWORD *)(v1386 + 8);
LABEL_643:
        v1835 = vld2q_f64(v1287);
        v1390 = *(float64x2_t *)(result + 144);
        v1866 = vld2q_f64(v1239);
        v1884 = vld2q_f64(v1237);
        v1391 = a3[36];
        v1392 = a3[37];
        v1393 = a3[38];
        v1394 = a3[39];
        v1395 = vmlaq_laneq_f64(vmulq_n_f64(v1835.val[0], v1391.f64[0]), v1835.val[1], v1391, 1);
        v1396 = vmlaq_laneq_f64(vmulq_n_f64(v1866.val[0], v1391.f64[0]), v1866.val[1], v1391, 1);
        v1397 = vmlaq_laneq_f64(vmulq_n_f64(v1884.val[0], v1391.f64[0]), v1884.val[1], v1391, 1);
        v1398 = vmlaq_laneq_f64(vmulq_n_f64(v1835.val[0], v1392.f64[0]), v1835.val[1], v1392, 1);
        v1399 = vmlaq_laneq_f64(vmulq_n_f64(v1866.val[0], v1392.f64[0]), v1866.val[1], v1392, 1);
        v1400 = vmlaq_laneq_f64(vmulq_n_f64(v1884.val[0], v1392.f64[0]), v1884.val[1], v1392, 1);
        v1401 = vmlaq_laneq_f64(vmulq_n_f64(v1835.val[0], v1393.f64[0]), v1835.val[1], v1393, 1);
        v1402 = vmlaq_laneq_f64(vmulq_n_f64(v1866.val[0], v1393.f64[0]), v1866.val[1], v1393, 1);
        v1403 = vmlaq_laneq_f64(vmulq_n_f64(v1884.val[0], v1393.f64[0]), v1884.val[1], v1393, 1);
        v1404 = vmlaq_laneq_f64(vmulq_n_f64(v1835.val[0], v1394.f64[0]), v1835.val[1], v1394, 1);
        v1405 = vaddq_f64(*(float64x2_t *)(result + 32), v1397);
        v1406 = vaddq_f64(*(float64x2_t *)(result + 16), v1396);
        v1407 = vaddq_f64(*(float64x2_t *)(result + 80), v1400);
        v1408 = vaddq_f64(*(float64x2_t *)(result + 64), v1399);
        v1409 = vaddq_f64(*(float64x2_t *)(result + 48), v1398);
        v1410 = vaddq_f64(*(float64x2_t *)(result + 128), v1403);
        v1411 = vaddq_f64(*(float64x2_t *)(result + 112), v1402);
        v1412 = vaddq_f64(*(float64x2_t *)(result + 96), v1401);
        v1835.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1884.val[0], v1394.f64[0]), v1884.val[1], v1394, 1));
        v1835.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1866.val[0], v1394.f64[0]), v1866.val[1], v1394, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1395);
        *(float64x2_t *)(result + 16) = v1406;
        *(float64x2_t *)(result + 32) = v1405;
        *(float64x2_t *)(result + 48) = v1409;
        *(float64x2_t *)(result + 64) = v1408;
        *(float64x2_t *)(result + 80) = v1407;
        *(float64x2_t *)(result + 96) = v1412;
        *(float64x2_t *)(result + 112) = v1411;
        *(float64x2_t *)(result + 128) = v1410;
        *(float64x2_t *)(result + 144) = vaddq_f64(v1390, v1404);
        *(float64x2x2_t *)(result + 160) = v1835;
        v13 = *v12;
        v1288 = a2[8];
        goto LABEL_644;
      }
      v1388 = (char *)v1386;
    }
LABEL_642:
    result = sub_20F55CC0C((unint64_t *)(v13 + 5552), (uint64_t)&v1770, v1382, v1388);
    goto LABEL_643;
  }
LABEL_644:
  if (v1288 && a2[64])
  {
    v1413 = *((_DWORD *)a2 + 3);
    v1414 = *((unsigned int *)a2 + 17);
    v1415 = *(_QWORD *)(v13 + 6648);
    v1416 = (*(_DWORD *)(v13 + 6672) * v1414);
    v1417 = v1415 + 16 * v1416;
    v1770 = v1417;
    v1418 = *(_QWORD *)(*(_QWORD *)(v13 + 6680) + 8 * v1414);
    v1419 = (char *)(v1415 + 16 * (v1418 + v1416));
    v1771 = v1419;
    v1772 = v1414;
    if (v1418)
    {
      v1420 = 16 * v1418;
      while (*(_DWORD *)v1417 < v1413)
      {
        v1417 += 16;
        v1420 -= 16;
        if (!v1420)
          goto LABEL_655;
      }
    }
    if ((char *)v1417 != v1419)
    {
      if (*(_DWORD *)v1417 == v1413)
      {
        result = *(_QWORD *)(v13 + 6576) + 8 * *(_QWORD *)(v1417 + 8);
LABEL_656:
        v1803 = vld2q_f64(v1287);
        v1836 = vld2q_f64(v1239);
        v1867 = vld2q_f64(v1237);
        v1421 = a3[40];
        v1422 = a3[41];
        v1423 = a3[42];
        v1424 = vmlaq_laneq_f64(vmulq_n_f64(v1803.val[0], v1421.f64[0]), v1803.val[1], v1421, 1);
        v1425 = vmlaq_laneq_f64(vmulq_n_f64(v1836.val[0], v1421.f64[0]), v1836.val[1], v1421, 1);
        v1426 = vmlaq_laneq_f64(vmulq_n_f64(v1867.val[0], v1421.f64[0]), v1867.val[1], v1421, 1);
        v1427 = vmlaq_laneq_f64(vmulq_n_f64(v1803.val[0], v1422.f64[0]), v1803.val[1], v1422, 1);
        v1428 = vmlaq_laneq_f64(vmulq_n_f64(v1836.val[0], v1422.f64[0]), v1836.val[1], v1422, 1);
        v1429 = vmlaq_laneq_f64(vmulq_n_f64(v1867.val[0], v1422.f64[0]), v1867.val[1], v1422, 1);
        v1430 = vmlaq_laneq_f64(vmulq_n_f64(v1803.val[0], v1423.f64[0]), v1803.val[1], v1423, 1);
        v1431 = vaddq_f64(*(float64x2_t *)(result + 32), v1426);
        v1432 = vaddq_f64(*(float64x2_t *)(result + 16), v1425);
        v1433 = vaddq_f64(*(float64x2_t *)(result + 80), v1429);
        v1434 = vaddq_f64(*(float64x2_t *)(result + 64), v1428);
        v1435 = vaddq_f64(*(float64x2_t *)(result + 48), v1427);
        v1803.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1867.val[0], v1423.f64[0]), v1867.val[1], v1423, 1));
        v1803.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1836.val[0], v1423.f64[0]), v1836.val[1], v1423, 1));
        v1836.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v1430);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1424);
        *(float64x2_t *)(result + 16) = v1432;
        *(float64x2_t *)(result + 32) = v1431;
        *(float64x2_t *)(result + 48) = v1435;
        *(float64x2_t *)(result + 64) = v1434;
        *(float64x2_t *)(result + 80) = v1433;
        *(float64x2_t *)(result + 96) = v1836.val[0];
        *(float64x2x2_t *)(result + 112) = v1803;
        v13 = *v12;
        v1288 = a2[8];
        goto LABEL_657;
      }
      v1419 = (char *)v1417;
    }
LABEL_655:
    result = sub_20F55CD48((unint64_t *)(v13 + 6560), (uint64_t)&v1770, v1413, v1419);
    goto LABEL_656;
  }
LABEL_657:
  if (v1288 && a2[72])
  {
    v1436 = *((_DWORD *)a2 + 3);
    v1437 = *((unsigned int *)a2 + 19);
    v1438 = *(_QWORD *)(v13 + 6648);
    v1439 = (*(_DWORD *)(v13 + 6672) * v1437);
    v1440 = v1438 + 16 * v1439;
    v1770 = v1440;
    v1441 = *(_QWORD *)(*(_QWORD *)(v13 + 6680) + 8 * v1437);
    v1442 = (char *)(v1438 + 16 * (v1441 + v1439));
    v1771 = v1442;
    v1772 = v1437;
    if (v1441)
    {
      v1443 = 16 * v1441;
      while (*(_DWORD *)v1440 < v1436)
      {
        v1440 += 16;
        v1443 -= 16;
        if (!v1443)
          goto LABEL_668;
      }
    }
    if ((char *)v1440 != v1442)
    {
      if (*(_DWORD *)v1440 == v1436)
      {
        result = *(_QWORD *)(v13 + 6576) + 8 * *(_QWORD *)(v1440 + 8);
LABEL_669:
        v1797 = vld2q_f64(v1287);
        v1815 = vld2q_f64(v1239);
        v1849 = vld2q_f64(v1237);
        v1444 = a3[43];
        v1445 = a3[44];
        v1446 = a3[45];
        v1447 = vmlaq_laneq_f64(vmulq_n_f64(v1797.val[0], v1444.f64[0]), v1797.val[1], v1444, 1);
        v1448 = vmlaq_laneq_f64(vmulq_n_f64(v1815.val[0], v1444.f64[0]), v1815.val[1], v1444, 1);
        v1449 = vmlaq_laneq_f64(vmulq_n_f64(v1849.val[0], v1444.f64[0]), v1849.val[1], v1444, 1);
        v1450 = vmlaq_laneq_f64(vmulq_n_f64(v1797.val[0], v1445.f64[0]), v1797.val[1], v1445, 1);
        v1451 = vmlaq_laneq_f64(vmulq_n_f64(v1815.val[0], v1445.f64[0]), v1815.val[1], v1445, 1);
        v1452 = vmlaq_laneq_f64(vmulq_n_f64(v1849.val[0], v1445.f64[0]), v1849.val[1], v1445, 1);
        v1453 = vmlaq_laneq_f64(vmulq_n_f64(v1797.val[0], v1446.f64[0]), v1797.val[1], v1446, 1);
        v1797.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1815.val[0], v1446.f64[0]), v1815.val[1], v1446, 1);
        v1454 = vaddq_f64(*(float64x2_t *)(result + 32), v1449);
        v1455 = vaddq_f64(*(float64x2_t *)(result + 16), v1448);
        v1815.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v1452);
        v1815.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v1451);
        v1456 = vaddq_f64(*(float64x2_t *)(result + 48), v1450);
        v1797.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1849.val[0], v1446.f64[0]), v1849.val[1], v1446, 1));
        v1797.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1797.val[0]);
        v1457 = vaddq_f64(*(float64x2_t *)(result + 96), v1453);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1447);
        *(float64x2_t *)(result + 16) = v1455;
        *(float64x2_t *)(result + 32) = v1454;
        *(float64x2_t *)(result + 48) = v1456;
        *(float64x2_t *)(result + 64) = v1815.val[1];
        *(float64x2_t *)(result + 80) = v1815.val[0];
        *(float64x2_t *)(result + 96) = v1457;
        *(float64x2x2_t *)(result + 112) = v1797;
        v13 = *v12;
        goto LABEL_670;
      }
      v1442 = (char *)v1440;
    }
LABEL_668:
    result = sub_20F55CD48((unint64_t *)(v13 + 6560), (uint64_t)&v1770, v1436, v1442);
    goto LABEL_669;
  }
LABEL_670:
  if (!*a2)
    return result;
  v1458 = *((unsigned int *)a2 + 1);
  v1459 = *(_QWORD *)(v13 + 3624);
  v1460 = (*(_DWORD *)(v13 + 3648) * v1458);
  v1461 = v1459 + 16 * v1460;
  v1770 = v1461;
  v1462 = *(_QWORD *)(*(_QWORD *)(v13 + 3656) + 8 * v1458);
  v1463 = (char *)(v1459 + 16 * (v1462 + v1460));
  v1771 = v1463;
  v1772 = v1458;
  if (v1462)
  {
    v1464 = 16 * v1462;
    while (*(_DWORD *)v1461 < v1458)
    {
      v1461 += 16;
      v1464 -= 16;
      if (!v1464)
        goto LABEL_680;
    }
  }
  if ((char *)v1461 == v1463)
    goto LABEL_680;
  if (*(_DWORD *)v1461 != (_DWORD)v1458)
  {
    v1463 = (char *)v1461;
LABEL_680:
    result = sub_20F55CAD0((unint64_t *)(v13 + 3536), (uint64_t)&v1770, v1458, v1463);
    goto LABEL_681;
  }
  result = *(_QWORD *)(v13 + 3552) + 8 * *(_QWORD *)(v1461 + 8);
LABEL_681:
  v1465 = a3[1];
  v1466 = a3[2].f64;
  v1467 = a3[2];
  v1468 = a3[3];
  v1469 = a3[4].f64;
  v1470 = a3[4];
  v1471 = a3[5];
  v1472 = (float64x2_t)vzip1q_s64((int64x2_t)v1467, (int64x2_t)v1468);
  v1473 = (float64x2_t)vzip1q_s64((int64x2_t)v1470, (int64x2_t)v1471);
  *(_QWORD *)&v1474.f64[0] = vdupq_laneq_s64((int64x2_t)v1467, 1).u64[0];
  v1474.f64[1] = a3[3].f64[1];
  *(_QWORD *)&v1475.f64[0] = vdupq_laneq_s64((int64x2_t)v1470, 1).u64[0];
  v1475.f64[1] = a3[5].f64[1];
  v1476 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v1465);
  v1477 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v1465);
  v1478 = vmlaq_laneq_f64(vmulq_n_f64(v1472, a3->f64[0]), v1474, *a3, 1);
  v1479 = vmlaq_laneq_f64(vmulq_n_f64(v1473, a3->f64[0]), v1475, *a3, 1);
  v1480 = vmlaq_laneq_f64(vmulq_n_f64(v1476, v1465.f64[0]), v1477, v1465, 1);
  v1481 = vmlaq_laneq_f64(vmulq_n_f64(v1472, v1465.f64[0]), v1474, v1465, 1);
  v1482 = vmlaq_laneq_f64(vmulq_n_f64(v1473, v1465.f64[0]), v1475, v1465, 1);
  v1483 = vmlaq_laneq_f64(vmulq_n_f64(v1476, v1467.f64[0]), v1477, v1467, 1);
  v1484 = vmlaq_laneq_f64(vmulq_n_f64(v1472, v1467.f64[0]), v1474, v1467, 1);
  v1485 = vmlaq_laneq_f64(vmulq_n_f64(v1473, v1467.f64[0]), v1475, v1467, 1);
  v1486 = vmlaq_laneq_f64(vmulq_n_f64(v1476, v1468.f64[0]), v1477, v1468, 1);
  v1487 = vmlaq_laneq_f64(vmulq_n_f64(v1472, v1468.f64[0]), v1474, v1468, 1);
  v1488 = vmlaq_laneq_f64(vmulq_n_f64(v1473, v1468.f64[0]), v1475, v1468, 1);
  v1489 = vmlaq_laneq_f64(vmulq_n_f64(v1476, v1470.f64[0]), v1477, v1470, 1);
  v1490 = vmlaq_laneq_f64(vmulq_n_f64(v1472, v1470.f64[0]), v1474, v1470, 1);
  v1491 = vmlaq_laneq_f64(vmulq_n_f64(v1473, v1470.f64[0]), v1475, v1470, 1);
  v1492 = vmlaq_laneq_f64(vmulq_n_f64(v1476, v1471.f64[0]), v1477, v1471, 1);
  v1493 = vmlaq_laneq_f64(vmulq_n_f64(v1472, v1471.f64[0]), v1474, v1471, 1);
  v1494 = vmlaq_laneq_f64(vmulq_n_f64(v1473, v1471.f64[0]), v1475, v1471, 1);
  v1495 = vaddq_f64(*(float64x2_t *)(result + 32), v1479);
  v1496 = vaddq_f64(*(float64x2_t *)(result + 16), v1478);
  v1497 = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1476, a3->f64[0]), v1477, *a3, 1));
  v1498 = vaddq_f64(*(float64x2_t *)(result + 80), v1482);
  v1499 = vaddq_f64(*(float64x2_t *)(result + 64), v1481);
  v1500 = vaddq_f64(*(float64x2_t *)(result + 48), v1480);
  v1501 = vaddq_f64(*(float64x2_t *)(result + 128), v1485);
  v1502 = vaddq_f64(*(float64x2_t *)(result + 112), v1484);
  v1503 = vaddq_f64(*(float64x2_t *)(result + 96), v1483);
  v1504 = vaddq_f64(*(float64x2_t *)(result + 176), v1488);
  v1505 = vaddq_f64(*(float64x2_t *)(result + 160), v1487);
  v1506 = vaddq_f64(*(float64x2_t *)(result + 144), v1486);
  v1507 = *(float64x2_t *)(result + 240);
  v1508 = vaddq_f64(*(float64x2_t *)(result + 224), v1491);
  v1509 = vaddq_f64(*(float64x2_t *)(result + 208), v1490);
  v1510 = vaddq_f64(*(float64x2_t *)(result + 192), v1489);
  v1511 = vaddq_f64(*(float64x2_t *)(result + 272), v1494);
  v1512 = vaddq_f64(*(float64x2_t *)(result + 256), v1493);
  *(float64x2_t *)result = v1497;
  *(float64x2_t *)(result + 16) = v1496;
  *(float64x2_t *)(result + 32) = v1495;
  *(float64x2_t *)(result + 48) = v1500;
  *(float64x2_t *)(result + 64) = v1499;
  *(float64x2_t *)(result + 80) = v1498;
  *(float64x2_t *)(result + 96) = v1503;
  *(float64x2_t *)(result + 112) = v1502;
  *(float64x2_t *)(result + 128) = v1501;
  *(float64x2_t *)(result + 144) = v1506;
  *(float64x2_t *)(result + 160) = v1505;
  *(float64x2_t *)(result + 176) = v1504;
  *(float64x2_t *)(result + 192) = v1510;
  *(float64x2_t *)(result + 208) = v1509;
  *(float64x2_t *)(result + 224) = v1508;
  *(float64x2_t *)(result + 240) = vaddq_f64(v1507, v1492);
  *(float64x2_t *)(result + 256) = v1512;
  *(float64x2_t *)(result + 272) = v1511;
  v1513 = *v12;
  v1514 = *a2;
  if (!*a2 || !a2[8])
  {
LABEL_685:
    if (!v1514)
      goto LABEL_706;
    goto LABEL_686;
  }
  v1515 = *((_DWORD *)a2 + 1);
  v1516 = *((unsigned int *)a2 + 3);
  if (v1516 < v1515)
  {
    v1514 = 1;
    goto LABEL_685;
  }
  v1525 = *(_QWORD *)(v1513 + 3624);
  v1526 = (*(_DWORD *)(v1513 + 3648) * v1516);
  v1527 = v1525 + 16 * v1526;
  v1770 = v1527;
  v1528 = *(_QWORD *)(*(_QWORD *)(v1513 + 3656) + 8 * v1516);
  v1529 = (char *)(v1525 + 16 * (v1528 + v1526));
  v1771 = v1529;
  v1772 = v1516;
  if (v1528)
  {
    v1530 = 16 * v1528;
    while (*(_DWORD *)v1527 < v1515)
    {
      v1527 += 16;
      v1530 -= 16;
      if (!v1530)
        goto LABEL_785;
    }
  }
  if ((char *)v1527 != v1529)
  {
    if (*(_DWORD *)v1527 == v1515)
    {
      result = *(_QWORD *)(v1513 + 3552) + 8 * *(_QWORD *)(v1527 + 8);
      goto LABEL_786;
    }
    v1529 = (char *)v1527;
  }
LABEL_785:
  result = sub_20F55CAD0((unint64_t *)(v1513 + 3536), (uint64_t)&v1770, v1515, v1529);
LABEL_786:
  v1780 = vld2q_f64(v1466);
  v1799 = vld2q_f64(v1469);
  v1736 = a3[6];
  v1737 = a3[7];
  v1738 = a3[8];
  v1739 = a3[9];
  v1740 = a3[10];
  v1741 = a3[11];
  v1742 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1736.f64[0]), v1780.val[1], v1736, 1);
  v1743 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1736.f64[0]), v1799.val[1], v1736, 1);
  v1744 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1737.f64[0]), v1780.val[1], v1737, 1);
  v1745 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1737.f64[0]), v1799.val[1], v1737, 1);
  v1746 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1738.f64[0]), v1780.val[1], v1738, 1);
  v1747 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1738.f64[0]), v1799.val[1], v1738, 1);
  v1748 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1739.f64[0]), v1780.val[1], v1739, 1);
  v1749 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1739.f64[0]), v1799.val[1], v1739, 1);
  v1750 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1740.f64[0]), v1780.val[1], v1740, 1);
  v1751 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1740.f64[0]), v1799.val[1], v1740, 1);
  v1752 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1741.f64[0]), v1780.val[1], v1741, 1);
  v1780.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1741.f64[0]), v1799.val[1], v1741, 1);
  v1799.val[0] = a3[1];
  v1799.val[1] = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v1799.val[0]);
  v1780.val[1] = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v1799.val[0]);
  v1799.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[1], v1736.f64[0]), v1780.val[1], v1736, 1);
  v1753 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[1], v1737.f64[0]), v1780.val[1], v1737, 1);
  v1754 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[1], v1738.f64[0]), v1780.val[1], v1738, 1);
  v1755 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[1], v1739.f64[0]), v1780.val[1], v1739, 1);
  v1756 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[1], v1740.f64[0]), v1780.val[1], v1740, 1);
  v1799.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[1], v1741.f64[0]), v1780.val[1], v1741, 1);
  v1780.val[1] = vaddq_f64(*(float64x2_t *)result, v1799.val[0]);
  v1799.val[0] = vaddq_f64(*(float64x2_t *)(result + 32), v1743);
  v1757 = vaddq_f64(*(float64x2_t *)(result + 16), v1742);
  v1758 = vaddq_f64(*(float64x2_t *)(result + 48), v1753);
  v1759 = vaddq_f64(*(float64x2_t *)(result + 80), v1745);
  v1760 = vaddq_f64(*(float64x2_t *)(result + 64), v1744);
  v1761 = vaddq_f64(*(float64x2_t *)(result + 96), v1754);
  v1762 = vaddq_f64(*(float64x2_t *)(result + 128), v1747);
  v1763 = vaddq_f64(*(float64x2_t *)(result + 112), v1746);
  v1764 = vaddq_f64(*(float64x2_t *)(result + 144), v1755);
  v1765 = vaddq_f64(*(float64x2_t *)(result + 176), v1749);
  v1766 = vaddq_f64(*(float64x2_t *)(result + 160), v1748);
  v1767 = vaddq_f64(*(float64x2_t *)(result + 192), v1756);
  v1768 = vaddq_f64(*(float64x2_t *)(result + 224), v1751);
  v1769 = vaddq_f64(*(float64x2_t *)(result + 208), v1750);
  v1799.val[1] = vaddq_f64(*(float64x2_t *)(result + 240), v1799.val[1]);
  v1780.val[0] = vaddq_f64(*(float64x2_t *)(result + 272), v1780.val[0]);
  *(float64x2_t *)result = v1780.val[1];
  *(float64x2_t *)(result + 16) = v1757;
  *(float64x2_t *)(result + 32) = v1799.val[0];
  *(float64x2_t *)(result + 48) = v1758;
  *(float64x2_t *)(result + 64) = v1760;
  *(float64x2_t *)(result + 80) = v1759;
  *(float64x2_t *)(result + 96) = v1761;
  *(float64x2_t *)(result + 112) = v1763;
  v1780.val[1] = vaddq_f64(*(float64x2_t *)(result + 256), v1752);
  *(float64x2_t *)(result + 128) = v1762;
  *(float64x2_t *)(result + 144) = v1764;
  *(float64x2_t *)(result + 160) = v1766;
  *(float64x2_t *)(result + 176) = v1765;
  *(float64x2_t *)(result + 192) = v1767;
  *(float64x2_t *)(result + 208) = v1769;
  *(float64x2_t *)(result + 224) = v1768;
  *(float64x2_t *)(result + 240) = v1799.val[1];
  *(float64x2_t *)(result + 256) = v1780.val[1];
  *(float64x2_t *)(result + 272) = v1780.val[0];
  v1513 = *v12;
  v1514 = *a2;
  if (!*a2)
    goto LABEL_706;
LABEL_686:
  if (a2[32])
  {
    v1517 = *((_DWORD *)a2 + 1);
    v1518 = *((unsigned int *)a2 + 9);
    v1519 = *(_QWORD *)(v1513 + 4632);
    v1520 = (*(_DWORD *)(v1513 + 4656) * v1518);
    v1521 = v1519 + 16 * v1520;
    v1770 = v1521;
    v1522 = *(_QWORD *)(*(_QWORD *)(v1513 + 4664) + 8 * v1518);
    v1523 = (char *)(v1519 + 16 * (v1522 + v1520));
    v1771 = v1523;
    v1772 = v1518;
    if (v1522)
    {
      v1524 = 16 * v1522;
      while (*(_DWORD *)v1521 < v1517)
      {
        v1521 += 16;
        v1524 -= 16;
        if (!v1524)
          goto LABEL_704;
      }
    }
    if ((char *)v1521 != v1523)
    {
      if (*(_DWORD *)v1521 == v1517)
      {
        result = *(_QWORD *)(v1513 + 4560) + 8 * *(_QWORD *)(v1521 + 8);
LABEL_705:
        v1531 = *(float64x2_t *)(result + 160);
        v1532 = (int64x2_t)a3[1];
        v1869 = vld2q_f64(v1466);
        v1885 = vld2q_f64(v1469);
        v1533 = a3[24];
        v1534 = a3[25];
        v1535 = a3[26];
        v1536 = a3[27];
        v1537 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1532);
        v1538 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1532);
        v1539 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1885.val[0], v1533.f64[0]), v1885.val[1], v1533, 1));
        v1540 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1869.val[0], v1533.f64[0]), v1869.val[1], v1533, 1));
        v1541 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1537, v1534.f64[0]), v1538, v1534, 1));
        v1542 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1885.val[0], v1534.f64[0]), v1885.val[1], v1534, 1));
        v1543 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1869.val[0], v1534.f64[0]), v1869.val[1], v1534, 1));
        v1544 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1537, v1535.f64[0]), v1538, v1535, 1));
        v1545 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1885.val[0], v1535.f64[0]), v1885.val[1], v1535, 1));
        v1546 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1869.val[0], v1535.f64[0]), v1869.val[1], v1535, 1));
        v1547 = vaddq_f64(*(float64x2_t *)(result + 144), vmlaq_laneq_f64(vmulq_n_f64(v1537, v1536.f64[0]), v1538, v1536, 1));
        v1548 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1885.val[0], v1536.f64[0]), v1885.val[1], v1536, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1537, v1533.f64[0]), v1538, v1533, 1));
        *(float64x2_t *)(result + 16) = v1540;
        *(float64x2_t *)(result + 32) = v1539;
        *(float64x2_t *)(result + 48) = v1541;
        *(float64x2_t *)(result + 64) = v1543;
        *(float64x2_t *)(result + 80) = v1542;
        *(float64x2_t *)(result + 96) = v1544;
        *(float64x2_t *)(result + 112) = v1546;
        *(float64x2_t *)(result + 128) = v1545;
        *(float64x2_t *)(result + 144) = v1547;
        *(float64x2_t *)(result + 160) = vaddq_f64(v1531, vmlaq_laneq_f64(vmulq_n_f64(v1869.val[0], v1536.f64[0]), v1869.val[1], v1536, 1));
        *(float64x2_t *)(result + 176) = v1548;
        v1513 = *v12;
        v1514 = *a2;
        goto LABEL_706;
      }
      v1523 = (char *)v1521;
    }
LABEL_704:
    result = sub_20F55CC0C((unint64_t *)(v1513 + 4544), (uint64_t)&v1770, v1517, v1523);
    goto LABEL_705;
  }
LABEL_706:
  if (v1514 && a2[40])
  {
    v1549 = *((_DWORD *)a2 + 1);
    v1550 = *((unsigned int *)a2 + 11);
    v1551 = *(_QWORD *)(v1513 + 4632);
    v1552 = (*(_DWORD *)(v1513 + 4656) * v1550);
    v1553 = v1551 + 16 * v1552;
    v1770 = v1553;
    v1554 = *(_QWORD *)(*(_QWORD *)(v1513 + 4664) + 8 * v1550);
    v1555 = (char *)(v1551 + 16 * (v1554 + v1552));
    v1771 = v1555;
    v1772 = v1550;
    if (v1554)
    {
      v1556 = 16 * v1554;
      while (*(_DWORD *)v1553 < v1549)
      {
        v1553 += 16;
        v1556 -= 16;
        if (!v1556)
          goto LABEL_717;
      }
    }
    if ((char *)v1553 != v1555)
    {
      if (*(_DWORD *)v1553 == v1549)
      {
        result = *(_QWORD *)(v1513 + 4560) + 8 * *(_QWORD *)(v1553 + 8);
LABEL_718:
        v1557 = *(float64x2_t *)(result + 160);
        v1558 = (int64x2_t)a3[1];
        v1870 = vld2q_f64(v1466);
        v1886 = vld2q_f64(v1469);
        v1559 = a3[28];
        v1560 = a3[29];
        v1561 = a3[30];
        v1562 = a3[31];
        v1563 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1558);
        v1564 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1558);
        v1565 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1886.val[0], v1559.f64[0]), v1886.val[1], v1559, 1));
        v1566 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1870.val[0], v1559.f64[0]), v1870.val[1], v1559, 1));
        v1567 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1563, v1560.f64[0]), v1564, v1560, 1));
        v1568 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1886.val[0], v1560.f64[0]), v1886.val[1], v1560, 1));
        v1569 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1870.val[0], v1560.f64[0]), v1870.val[1], v1560, 1));
        v1570 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1563, v1561.f64[0]), v1564, v1561, 1));
        v1571 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1886.val[0], v1561.f64[0]), v1886.val[1], v1561, 1));
        v1572 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1870.val[0], v1561.f64[0]), v1870.val[1], v1561, 1));
        v1573 = vaddq_f64(*(float64x2_t *)(result + 144), vmlaq_laneq_f64(vmulq_n_f64(v1563, v1562.f64[0]), v1564, v1562, 1));
        v1574 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1886.val[0], v1562.f64[0]), v1886.val[1], v1562, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1563, v1559.f64[0]), v1564, v1559, 1));
        *(float64x2_t *)(result + 16) = v1566;
        *(float64x2_t *)(result + 32) = v1565;
        *(float64x2_t *)(result + 48) = v1567;
        *(float64x2_t *)(result + 64) = v1569;
        *(float64x2_t *)(result + 80) = v1568;
        *(float64x2_t *)(result + 96) = v1570;
        *(float64x2_t *)(result + 112) = v1572;
        *(float64x2_t *)(result + 128) = v1571;
        *(float64x2_t *)(result + 144) = v1573;
        *(float64x2_t *)(result + 160) = vaddq_f64(v1557, vmlaq_laneq_f64(vmulq_n_f64(v1870.val[0], v1562.f64[0]), v1870.val[1], v1562, 1));
        *(float64x2_t *)(result + 176) = v1574;
        v1513 = *v12;
        v1514 = *a2;
        goto LABEL_719;
      }
      v1555 = (char *)v1553;
    }
LABEL_717:
    result = sub_20F55CC0C((unint64_t *)(v1513 + 4544), (uint64_t)&v1770, v1549, v1555);
    goto LABEL_718;
  }
LABEL_719:
  if (v1514 && a2[48])
  {
    v1575 = *((_DWORD *)a2 + 1);
    v1576 = *((unsigned int *)a2 + 13);
    v1577 = *(_QWORD *)(v1513 + 5640);
    v1578 = (*(_DWORD *)(v1513 + 5664) * v1576);
    v1579 = v1577 + 16 * v1578;
    v1770 = v1579;
    v1580 = *(_QWORD *)(*(_QWORD *)(v1513 + 5672) + 8 * v1576);
    v1581 = (char *)(v1577 + 16 * (v1580 + v1578));
    v1771 = v1581;
    v1772 = v1576;
    if (v1580)
    {
      v1582 = 16 * v1580;
      while (*(_DWORD *)v1579 < v1575)
      {
        v1579 += 16;
        v1582 -= 16;
        if (!v1582)
          goto LABEL_730;
      }
    }
    if ((char *)v1579 != v1581)
    {
      if (*(_DWORD *)v1579 == v1575)
      {
        result = *(_QWORD *)(v1513 + 5568) + 8 * *(_QWORD *)(v1579 + 8);
LABEL_731:
        v1583 = *(float64x2_t *)(result + 160);
        v1584 = (int64x2_t)a3[1];
        v1871 = vld2q_f64(v1466);
        v1887 = vld2q_f64(v1469);
        v1585 = a3[32];
        v1586 = a3[33];
        v1587 = a3[34];
        v1588 = a3[35];
        v1589 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1584);
        v1590 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1584);
        v1591 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1887.val[0], v1585.f64[0]), v1887.val[1], v1585, 1));
        v1592 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1871.val[0], v1585.f64[0]), v1871.val[1], v1585, 1));
        v1593 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1589, v1586.f64[0]), v1590, v1586, 1));
        v1594 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1887.val[0], v1586.f64[0]), v1887.val[1], v1586, 1));
        v1595 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1871.val[0], v1586.f64[0]), v1871.val[1], v1586, 1));
        v1596 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1589, v1587.f64[0]), v1590, v1587, 1));
        v1597 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1887.val[0], v1587.f64[0]), v1887.val[1], v1587, 1));
        v1598 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1871.val[0], v1587.f64[0]), v1871.val[1], v1587, 1));
        v1599 = vaddq_f64(*(float64x2_t *)(result + 144), vmlaq_laneq_f64(vmulq_n_f64(v1589, v1588.f64[0]), v1590, v1588, 1));
        v1600 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1887.val[0], v1588.f64[0]), v1887.val[1], v1588, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1589, v1585.f64[0]), v1590, v1585, 1));
        *(float64x2_t *)(result + 16) = v1592;
        *(float64x2_t *)(result + 32) = v1591;
        *(float64x2_t *)(result + 48) = v1593;
        *(float64x2_t *)(result + 64) = v1595;
        *(float64x2_t *)(result + 80) = v1594;
        *(float64x2_t *)(result + 96) = v1596;
        *(float64x2_t *)(result + 112) = v1598;
        *(float64x2_t *)(result + 128) = v1597;
        *(float64x2_t *)(result + 144) = v1599;
        *(float64x2_t *)(result + 160) = vaddq_f64(v1583, vmlaq_laneq_f64(vmulq_n_f64(v1871.val[0], v1588.f64[0]), v1871.val[1], v1588, 1));
        *(float64x2_t *)(result + 176) = v1600;
        v1513 = *v12;
        v1514 = *a2;
        goto LABEL_732;
      }
      v1581 = (char *)v1579;
    }
LABEL_730:
    result = sub_20F55CC0C((unint64_t *)(v1513 + 5552), (uint64_t)&v1770, v1575, v1581);
    goto LABEL_731;
  }
LABEL_732:
  if (v1514 && a2[56])
  {
    v1601 = *((_DWORD *)a2 + 1);
    v1602 = *((unsigned int *)a2 + 15);
    v1603 = *(_QWORD *)(v1513 + 5640);
    v1604 = (*(_DWORD *)(v1513 + 5664) * v1602);
    v1605 = v1603 + 16 * v1604;
    v1770 = v1605;
    v1606 = *(_QWORD *)(*(_QWORD *)(v1513 + 5672) + 8 * v1602);
    v1607 = (char *)(v1603 + 16 * (v1606 + v1604));
    v1771 = v1607;
    v1772 = v1602;
    if (v1606)
    {
      v1608 = 16 * v1606;
      while (*(_DWORD *)v1605 < v1601)
      {
        v1605 += 16;
        v1608 -= 16;
        if (!v1608)
          goto LABEL_743;
      }
    }
    if ((char *)v1605 != v1607)
    {
      if (*(_DWORD *)v1605 == v1601)
      {
        result = *(_QWORD *)(v1513 + 5568) + 8 * *(_QWORD *)(v1605 + 8);
LABEL_744:
        v1609 = *(float64x2_t *)(result + 160);
        v1610 = (int64x2_t)a3[1];
        v1872 = vld2q_f64(v1466);
        v1888 = vld2q_f64(v1469);
        v1611 = a3[36];
        v1612 = a3[37];
        v1613 = a3[38];
        v1614 = a3[39];
        v1615 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1610);
        v1616 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1610);
        v1617 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1888.val[0], v1611.f64[0]), v1888.val[1], v1611, 1));
        v1618 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1872.val[0], v1611.f64[0]), v1872.val[1], v1611, 1));
        v1619 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1615, v1612.f64[0]), v1616, v1612, 1));
        v1620 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1888.val[0], v1612.f64[0]), v1888.val[1], v1612, 1));
        v1621 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1872.val[0], v1612.f64[0]), v1872.val[1], v1612, 1));
        v1622 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1615, v1613.f64[0]), v1616, v1613, 1));
        v1623 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1888.val[0], v1613.f64[0]), v1888.val[1], v1613, 1));
        v1624 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1872.val[0], v1613.f64[0]), v1872.val[1], v1613, 1));
        v1625 = vaddq_f64(*(float64x2_t *)(result + 144), vmlaq_laneq_f64(vmulq_n_f64(v1615, v1614.f64[0]), v1616, v1614, 1));
        v1626 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1888.val[0], v1614.f64[0]), v1888.val[1], v1614, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1615, v1611.f64[0]), v1616, v1611, 1));
        *(float64x2_t *)(result + 16) = v1618;
        *(float64x2_t *)(result + 32) = v1617;
        *(float64x2_t *)(result + 48) = v1619;
        *(float64x2_t *)(result + 64) = v1621;
        *(float64x2_t *)(result + 80) = v1620;
        *(float64x2_t *)(result + 96) = v1622;
        *(float64x2_t *)(result + 112) = v1624;
        *(float64x2_t *)(result + 128) = v1623;
        *(float64x2_t *)(result + 144) = v1625;
        *(float64x2_t *)(result + 160) = vaddq_f64(v1609, vmlaq_laneq_f64(vmulq_n_f64(v1872.val[0], v1614.f64[0]), v1872.val[1], v1614, 1));
        *(float64x2_t *)(result + 176) = v1626;
        v1513 = *v12;
        v1514 = *a2;
        goto LABEL_745;
      }
      v1607 = (char *)v1605;
    }
LABEL_743:
    result = sub_20F55CC0C((unint64_t *)(v1513 + 5552), (uint64_t)&v1770, v1601, v1607);
    goto LABEL_744;
  }
LABEL_745:
  if (v1514 && a2[64])
  {
    v1627 = *((_DWORD *)a2 + 1);
    v1628 = *((unsigned int *)a2 + 17);
    v1629 = *(_QWORD *)(v1513 + 6648);
    v1630 = (*(_DWORD *)(v1513 + 6672) * v1628);
    v1631 = v1629 + 16 * v1630;
    v1770 = v1631;
    v1632 = *(_QWORD *)(*(_QWORD *)(v1513 + 6680) + 8 * v1628);
    v1633 = (char *)(v1629 + 16 * (v1632 + v1630));
    v1771 = v1633;
    v1772 = v1628;
    if (v1632)
    {
      v1634 = 16 * v1632;
      while (*(_DWORD *)v1631 < v1627)
      {
        v1631 += 16;
        v1634 -= 16;
        if (!v1634)
          goto LABEL_756;
      }
    }
    if ((char *)v1631 != v1633)
    {
      if (*(_DWORD *)v1631 == v1627)
      {
        result = *(_QWORD *)(v1513 + 6576) + 8 * *(_QWORD *)(v1631 + 8);
LABEL_757:
        v1840 = vld2q_f64(v1466);
        v1635 = (int64x2_t)a3[1];
        v1868 = vld2q_f64(v1469);
        v1636 = a3[40];
        v1637 = a3[41];
        v1638 = a3[42];
        v1639 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1635);
        v1640 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1635);
        v1641 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1868.val[0], v1636.f64[0]), v1868.val[1], v1636, 1));
        v1642 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1840.val[0], v1636.f64[0]), v1840.val[1], v1636, 1));
        v1643 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1639, v1637.f64[0]), v1640, v1637, 1));
        v1644 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1868.val[0], v1637.f64[0]), v1868.val[1], v1637, 1));
        v1645 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1840.val[0], v1637.f64[0]), v1840.val[1], v1637, 1));
        v1646 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1639, v1638.f64[0]), v1640, v1638, 1));
        v1647 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1868.val[0], v1638.f64[0]), v1868.val[1], v1638, 1));
        v1648 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1840.val[0], v1638.f64[0]), v1840.val[1], v1638, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1639, v1636.f64[0]), v1640, v1636, 1));
        *(float64x2_t *)(result + 16) = v1642;
        *(float64x2_t *)(result + 32) = v1641;
        *(float64x2_t *)(result + 48) = v1643;
        *(float64x2_t *)(result + 64) = v1645;
        *(float64x2_t *)(result + 80) = v1644;
        *(float64x2_t *)(result + 96) = v1646;
        *(float64x2_t *)(result + 112) = v1648;
        *(float64x2_t *)(result + 128) = v1647;
        v1513 = *v12;
        v1514 = *a2;
        goto LABEL_758;
      }
      v1633 = (char *)v1631;
    }
LABEL_756:
    result = sub_20F55CD48((unint64_t *)(v1513 + 6560), (uint64_t)&v1770, v1627, v1633);
    goto LABEL_757;
  }
LABEL_758:
  if (v1514 && a2[72])
  {
    v1649 = *((_DWORD *)a2 + 1);
    v1650 = *((unsigned int *)a2 + 19);
    v1651 = *(_QWORD *)(v1513 + 6648);
    v1652 = (*(_DWORD *)(v1513 + 6672) * v1650);
    v1653 = v1651 + 16 * v1652;
    v1770 = v1653;
    v1654 = *(_QWORD *)(*(_QWORD *)(v1513 + 6680) + 8 * v1650);
    v1655 = (char *)(v1651 + 16 * (v1654 + v1652));
    v1771 = v1655;
    v1772 = v1650;
    if (v1654)
    {
      v1656 = 16 * v1654;
      while (*(_DWORD *)v1653 < v1649)
      {
        v1653 += 16;
        v1656 -= 16;
        if (!v1656)
          goto LABEL_769;
      }
    }
    if ((char *)v1653 != v1655)
    {
      if (*(_DWORD *)v1653 == v1649)
      {
        result = *(_QWORD *)(v1513 + 6576) + 8 * *(_QWORD *)(v1653 + 8);
LABEL_770:
        v1657 = *(float64x2_t *)(result + 112);
        v1837 = vld2q_f64(v1466);
        v1852 = vld2q_f64(v1469);
        v1658 = (int64x2_t)a3[1];
        v1659 = a3[43];
        v1660 = a3[44];
        v1661 = a3[45];
        v1662 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1658);
        v1663 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1658);
        v1664 = vmlaq_laneq_f64(vmulq_n_f64(v1662, v1659.f64[0]), v1663, v1659, 1);
        v1665 = vmlaq_laneq_f64(vmulq_n_f64(v1837.val[0], v1659.f64[0]), v1837.val[1], v1659, 1);
        v1666 = vmlaq_laneq_f64(vmulq_n_f64(v1852.val[0], v1659.f64[0]), v1852.val[1], v1659, 1);
        v1667 = vmlaq_laneq_f64(vmulq_n_f64(v1662, v1660.f64[0]), v1663, v1660, 1);
        v1668 = vmlaq_laneq_f64(vmulq_n_f64(v1837.val[0], v1660.f64[0]), v1837.val[1], v1660, 1);
        v1669 = vmlaq_laneq_f64(vmulq_n_f64(v1852.val[0], v1660.f64[0]), v1852.val[1], v1660, 1);
        v1670 = vmlaq_laneq_f64(vmulq_n_f64(v1662, v1661.f64[0]), v1663, v1661, 1);
        v1671 = vmlaq_laneq_f64(vmulq_n_f64(v1837.val[0], v1661.f64[0]), v1837.val[1], v1661, 1);
        v1672 = vaddq_f64(*(float64x2_t *)(result + 32), v1666);
        v1673 = vaddq_f64(*(float64x2_t *)(result + 16), v1665);
        v1674 = vaddq_f64(*(float64x2_t *)(result + 48), v1667);
        v1675 = vaddq_f64(*(float64x2_t *)(result + 80), v1669);
        v1676 = vaddq_f64(*(float64x2_t *)(result + 64), v1668);
        v1837.val[1] = vaddq_f64(*(float64x2_t *)(result + 96), v1670);
        v1677 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1852.val[0], v1661.f64[0]), v1852.val[1], v1661, 1));
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1664);
        *(float64x2_t *)(result + 16) = v1673;
        *(float64x2_t *)(result + 32) = v1672;
        *(float64x2_t *)(result + 48) = v1674;
        *(float64x2_t *)(result + 64) = v1676;
        *(float64x2_t *)(result + 80) = v1675;
        *(float64x2_t *)(result + 96) = v1837.val[1];
        *(float64x2_t *)(result + 112) = vaddq_f64(v1657, v1671);
        *(float64x2_t *)(result + 128) = v1677;
        return result;
      }
      v1655 = (char *)v1653;
    }
LABEL_769:
    result = sub_20F55CD48((unint64_t *)(v1513 + 6560), (uint64_t)&v1770, v1649, v1655);
    goto LABEL_770;
  }
  return result;
}

uint64_t sub_20F55C71C(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 9uLL, &v21);
  v13 = a1[3] - 72;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55C858(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 0x10uLL, &v21);
  v13 = a1[3] - 128;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55C994(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 0xCuLL, &v21);
  v13 = a1[3] - 96;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55CAD0(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 0x24uLL, &v21);
  v13 = a1[3] - 288;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55CC0C(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 0x18uLL, &v21);
  v13 = a1[3] - 192;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55CD48(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 0x12uLL, &v21);
  v13 = a1[3] - 144;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55CE84(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 0x36uLL, &v21);
  v13 = a1[3] - 432;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55CFC0(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 6uLL, &v21);
  v13 = a1[3] - 48;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55D0FC(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 0x51uLL, &v21);
  v13 = a1[3] - 648;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

uint64_t sub_20F55D238(unint64_t *a1, uint64_t a2, int a3, char *__src)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;

  v8 = a1[10];
  if (v8)
  {
    v10 = a1[6];
    v9 = a1[7];
    v11 = ((v9 - v10) << 6) - 1;
    v12 = a1[9];
    if (v9 == v10)
      v11 = 0;
    v13 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v10 + (((v12 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v11 - (v8 + v12) + 1 >= 0x400)
    {
      operator delete(*(void **)(v9 - 8));
      a1[7] -= 8;
    }
    v14 = *(_BYTE **)(a2 + 8);
    v15 = v14 - __src;
    if (v14 != __src)
      goto LABEL_7;
LABEL_9:
    v16 = __src;
    goto LABEL_10;
  }
  v17 = (void *)a1[3];
  v21 = 0;
  sub_20F1C5A3C(a1 + 2, v17, 1uLL, &v21);
  v13 = a1[3] - 8;
  v18 = *(_BYTE **)(a2 + 8);
  v15 = v18 - __src;
  if (v18 == __src)
    goto LABEL_9;
LABEL_7:
  memmove(__src + 16, __src, v15);
  v16 = *(char **)(a2 + 8);
LABEL_10:
  v19 = (uint64_t)(v13 - a1[2]) >> 3;
  *(_DWORD *)__src = a3;
  *((_QWORD *)__src + 1) = v19;
  ++*(_QWORD *)(a1[15] + 8 * *(unsigned int *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v16 + 16;
  return v13;
}

BOOL sub_20F55D374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  __int128 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  int8x16_t v45;
  __int128 v46;
  __int128 v47;
  int8x16_t v48;
  int8x16_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int8x16_t v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint64_t v98;
  float64x2_t *v99;
  int v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  double v110;
  double v111;
  double v112;
  float64x2_t v113;
  float64x2_t v114;
  __int128 v117;
  __int128 v118;
  __int128 v121;
  double v136;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  float64x2_t v219;

  v6 = a1 + 200;
  v7 = (__int128 *)(a1 + 336);
  v8 = sub_20F4AFF88((char *)a1, (float64x2_t **)(a1 + 200), a1 + 336);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD *)(a1 + 184);
    v11 = *(_QWORD *)(v10 + 1808);
    v217 = *(int8x16_t *)(v10 + 1776);
    v218 = *(int8x16_t *)(v10 + 1792);
    v215 = *(int8x16_t *)(v10 + 1744);
    v216 = *(int8x16_t *)(v10 + 1760);
    v213 = *(int8x16_t *)(v10 + 1712);
    v214 = *(int8x16_t *)(v10 + 1728);
    v212 = *(int8x16_t *)(v10 + 1696);
    v211 = *(int8x16_t *)(v10 + 1680);
    v210 = *(int8x16_t *)(v10 + 1664);
    v209 = *(int8x16_t *)(v10 + 1648);
    v208 = *(int8x16_t *)(v10 + 1632);
    v207 = *(int8x16_t *)(v10 + 1616);
    v206 = *(int8x16_t *)(v10 + 1600);
    v205 = *(int8x16_t *)(v10 + 1584);
    v12 = *(int8x16_t *)(v10 + 1568);
    v13 = *(int8x16_t *)(v10 + 1552);
    v182 = *(int8x16_t *)(v10 + 1536);
    v14 = *(int8x16_t *)(v10 + 1520);
    v15 = *(int8x16_t *)(v10 + 1504);
    v16 = *(int8x16_t *)(v10 + 1488);
    v17 = *(int8x16_t *)(v10 + 1472);
    v18 = *(int8x16_t *)(v10 + 1456);
    v19 = *(int8x16_t *)(v10 + 1440);
    v20 = *(int8x16_t *)(v10 + 1424);
    v21 = *(int8x16_t *)(v10 + 1408);
    v22 = *(int8x16_t *)(v10 + 1392);
    v23 = *(int8x16_t *)(v10 + 1376);
    v24 = *(int8x16_t *)(v10 + 1360);
    v204 = *(int8x16_t *)(v10 + 1344);
    v25 = *(int8x16_t *)(v10 + 1328);
    v26 = *(int8x16_t *)(v10 + 1312);
    v203 = *(int8x16_t *)(v10 + 1296);
    v202 = *(int8x16_t *)(v10 + 1280);
    v27 = *(int8x16_t *)(v10 + 1264);
    v201 = *(int8x16_t *)(v10 + 1248);
    v200 = *(int8x16_t *)(v10 + 1232);
    v28 = *(int8x16_t *)(v10 + 1216);
    v199 = *(int8x16_t *)(v10 + 1200);
    v198 = *(int8x16_t *)(v10 + 1184);
    v29 = *(int8x16_t *)(v10 + 1168);
    v197 = *(int8x16_t *)(v10 + 1152);
    v196 = *(int8x16_t *)(v10 + 1136);
    v30 = *(int8x16_t *)(v10 + 1120);
    v195 = *(int8x16_t *)(v10 + 1104);
    v194 = *(int8x16_t *)(v10 + 1088);
    v31 = *(int8x16_t *)(v10 + 1072);
    v193 = *(int8x16_t *)(v10 + 1056);
    v192 = *(int8x16_t *)(v10 + 1040);
    v32 = *(int8x16_t *)(v10 + 1008);
    v191 = *(int8x16_t *)(v10 + 1024);
    v33 = *(int8x16_t *)(v10 + 992);
    v190 = *(int8x16_t *)(v10 + 976);
    v189 = *(int8x16_t *)(v10 + 960);
    v188 = *(int8x16_t *)(v10 + 944);
    v34 = *(int8x16_t *)(v10 + 912);
    v187 = *(int8x16_t *)(v10 + 928);
    v35 = *(int8x16_t *)(v10 + 896);
    v186 = *(int8x16_t *)(v10 + 880);
    v185 = *(int8x16_t *)(v10 + 864);
    v184 = *(int8x16_t *)(v10 + 848);
    v183 = *(int8x16_t *)(v10 + 832);
    v36 = *(int8x16_t *)(v10 + 800);
    v181 = *(int8x16_t *)(v10 + 816);
    v37 = *(int8x16_t *)(v10 + 784);
    v180 = *(int8x16_t *)(v10 + 768);
    v179 = *(int8x16_t *)(v10 + 752);
    v178 = *(int8x16_t *)(v10 + 736);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 200) + 20))
    {
      v171 = *(_OWORD *)(v10 + 16);
      v170 = *(_OWORD *)(v10 + 32);
      v169 = *(_OWORD *)(v10 + 48);
      v168 = *(_OWORD *)(v10 + 64);
      v167 = *(_OWORD *)(v10 + 80);
      v166 = *(_OWORD *)(v10 + 96);
      v165 = *(_OWORD *)(v10 + 112);
      v164 = *(_OWORD *)(v10 + 128);
      v163 = *(_OWORD *)(v10 + 144);
      v162 = *(_OWORD *)(v10 + 160);
      v161 = *(_OWORD *)(v10 + 176);
      v160 = *(_OWORD *)(v10 + 192);
      v159 = *(_OWORD *)(v10 + 208);
      v158 = *(_OWORD *)(v10 + 224);
      v157 = *(_OWORD *)(v10 + 240);
      v156 = *(_OWORD *)(v10 + 256);
      v155 = *(_OWORD *)(v10 + 272);
      v154 = *(_OWORD *)(v10 + 288);
      v153 = *(_OWORD *)(v10 + 304);
      v152 = *(_OWORD *)(v10 + 320);
      v151 = *(_OWORD *)(v10 + 336);
      v150 = *(_OWORD *)(v10 + 352);
      v149 = *(_OWORD *)(v10 + 368);
      v148 = *(_OWORD *)(v10 + 384);
      v147 = *(_OWORD *)(v10 + 400);
      v146 = *(_OWORD *)(v10 + 416);
      v145 = *(_OWORD *)(v10 + 432);
      v176 = *(int8x16_t *)(v10 + 1552);
      v177 = *(int8x16_t *)(v10 + 1568);
      v144 = *(_OWORD *)(v10 + 448);
      v143 = *(_OWORD *)(v10 + 464);
      v142 = *(_OWORD *)(v10 + 480);
      v174 = *(int8x16_t *)(v10 + 1504);
      v175 = *(int8x16_t *)(v10 + 1520);
      v140 = *(_OWORD *)(v10 + 496);
      v139 = *(_OWORD *)(v10 + 512);
      v172 = *(int8x16_t *)(v10 + 1472);
      v173 = *(int8x16_t *)(v10 + 1488);
      v138 = *(_OWORD *)(v10 + 528);
      v38 = *(_OWORD *)(v10 + 560);
      v141 = *(_OWORD *)(v10 + 544);
      v39 = *(int8x16_t *)(v10 + 1456);
      v40 = *(int8x16_t *)(v10 + 1440);
      v41 = *(int8x16_t *)(v10 + 1216);
      v42 = *(int8x16_t *)(v10 + 784);
      v43 = *(_OWORD *)(v10 + 576);
      v44 = *(_OWORD *)(v10 + 592);
      v45 = *(int8x16_t *)(v10 + 1408);
      v47 = *(_OWORD *)(v10 + 608);
      v46 = *(_OWORD *)(v10 + 624);
      v48 = *(int8x16_t *)(v10 + 1392);
      v49 = *(int8x16_t *)(v10 + 1376);
      v51 = *(_OWORD *)(v10 + 640);
      v50 = *(_OWORD *)(v10 + 656);
      v52 = *(_QWORD *)(v10 + 1808);
      v54 = *(_OWORD *)(v10 + 672);
      v53 = *(_OWORD *)(v10 + 688);
      v55 = *(int8x16_t *)(v10 + 800);
      v56 = *(_OWORD *)(v10 + 720);
      *(_OWORD *)(a3 + 688) = *(_OWORD *)(v10 + 704);
      *(_OWORD *)(a3 + 704) = v56;
      v36 = v55;
      *(_OWORD *)(a3 + 656) = v54;
      *(_OWORD *)(a3 + 672) = v53;
      v11 = v52;
      *(_OWORD *)(a3 + 624) = v51;
      *(_OWORD *)(a3 + 640) = v50;
      v23 = v49;
      *(_OWORD *)(a3 + 592) = v47;
      *(_OWORD *)(a3 + 608) = v46;
      v22 = v48;
      v21 = v45;
      *(_OWORD *)(a3 + 560) = v43;
      *(_OWORD *)(a3 + 576) = v44;
      v37 = v42;
      v28 = v41;
      v19 = v40;
      v18 = v39;
      *(_OWORD *)(a3 + 528) = v141;
      *(_OWORD *)(a3 + 544) = v38;
      v17 = v172;
      v16 = v173;
      *(_OWORD *)(a3 + 512) = v138;
      *(_OWORD *)(a3 + 496) = v139;
      v15 = v174;
      v14 = v175;
      *(_OWORD *)(a3 + 480) = v140;
      *(_OWORD *)(a3 + 464) = v142;
      *(_OWORD *)(a3 + 448) = v143;
      v13 = v176;
      v12 = v177;
      *(_OWORD *)(a3 + 432) = v144;
      *(_OWORD *)(a3 + 416) = v145;
      *(_OWORD *)(a3 + 400) = v146;
      *(_OWORD *)(a3 + 384) = v147;
      *(_OWORD *)(a3 + 368) = v148;
      *(_OWORD *)(a3 + 352) = v149;
      *(_OWORD *)(a3 + 336) = v150;
      *(_OWORD *)(a3 + 320) = v151;
      *(_OWORD *)(a3 + 304) = v152;
      *(_OWORD *)(a3 + 288) = v153;
      *(_OWORD *)(a3 + 272) = v154;
      *(_OWORD *)(a3 + 256) = v155;
      *(_OWORD *)(a3 + 240) = v156;
      *(_OWORD *)(a3 + 224) = v157;
      *(_OWORD *)(a3 + 208) = v158;
      *(_OWORD *)(a3 + 192) = v159;
      *(_OWORD *)(a3 + 176) = v160;
      *(_OWORD *)(a3 + 160) = v161;
      *(_OWORD *)(a3 + 144) = v162;
      *(_OWORD *)(a3 + 128) = v163;
      *(_OWORD *)(a3 + 112) = v164;
      *(_OWORD *)(a3 + 96) = v165;
      *(_OWORD *)(a3 + 80) = v166;
      *(_OWORD *)(a3 + 64) = v167;
      *(_OWORD *)(a3 + 48) = v168;
      *(_OWORD *)(a3 + 32) = v169;
      *(_OWORD *)(a3 + 16) = v170;
      *(_OWORD *)a3 = v171;
    }
    if (*(_BYTE *)(v9 + 20))
    {
      *(_QWORD *)(a3 + 1792) = v11;
      v58 = v178;
      v57 = v179;
      v58.i64[1] = vextq_s8(v58, v58, 8uLL).u64[0];
      v60 = v180;
      v59 = v181;
      v57.i64[1] = vextq_s8(v57, v57, 8uLL).u64[0];
      v60.i64[1] = vextq_s8(v60, v60, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 720) = v58;
      *(int8x16_t *)(a3 + 736) = v57;
      v37.i64[1] = vextq_s8(v37, v37, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 752) = v60;
      *(int8x16_t *)(a3 + 768) = v37;
      v36.i64[1] = vextq_s8(v36, v36, 8uLL).u64[0];
      v59.i64[1] = vextq_s8(v59, v59, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 784) = v36;
      *(int8x16_t *)(a3 + 800) = v59;
      v62 = v183;
      v61 = v184;
      v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
      v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
      v63 = v185;
      v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 816) = v62;
      *(int8x16_t *)(a3 + 832) = v61;
      v64 = v186;
      v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 848) = v63;
      *(int8x16_t *)(a3 + 864) = v64;
      v35.i64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
      v34.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 880) = v35;
      *(int8x16_t *)(a3 + 896) = v34;
      v66 = v187;
      v65 = v188;
      v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
      v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
      v67 = v189;
      v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 912) = v66;
      *(int8x16_t *)(a3 + 928) = v65;
      v68 = v190;
      v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 944) = v67;
      *(int8x16_t *)(a3 + 960) = v68;
      v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
      v32.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 976) = v33;
      *(int8x16_t *)(a3 + 992) = v32;
      v70 = v191;
      v69 = v192;
      v70.i64[1] = vextq_s8(v70, v70, 8uLL).u64[0];
      v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
      v71 = v193;
      v71.i64[1] = vextq_s8(v71, v71, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1008) = v70;
      *(int8x16_t *)(a3 + 1024) = v69;
      *(int8x16_t *)(a3 + 1040) = v71;
      v31.i64[1] = vextq_s8(v31, v31, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1056) = v31;
      v73 = v194;
      v72 = v195;
      v73.i64[1] = vextq_s8(v73, v73, 8uLL).u64[0];
      v72.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1072) = v73;
      *(int8x16_t *)(a3 + 1088) = v72;
      v30.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1104) = v30;
      v75 = v196;
      v74 = v197;
      v75.i64[1] = vextq_s8(v75, v75, 8uLL).u64[0];
      v74.i64[1] = vextq_s8(v74, v74, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1120) = v75;
      *(int8x16_t *)(a3 + 1136) = v74;
      v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1152) = v29;
      v77 = v198;
      v76 = v199;
      v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
      v76.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1168) = v77;
      *(int8x16_t *)(a3 + 1184) = v76;
      v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1200) = v28;
      v79 = v200;
      v78 = v201;
      v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
      v78.i64[1] = vextq_s8(v78, v78, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1216) = v79;
      *(int8x16_t *)(a3 + 1232) = v78;
      v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1248) = v27;
      v80 = v202;
      v80.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
      v81 = v203;
      v81.i64[1] = vextq_s8(v81, v81, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1264) = v80;
      *(int8x16_t *)(a3 + 1280) = v81;
      v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
      v82 = v218;
      *(int8x16_t *)(a3 + 1296) = v26;
      v25.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
      v84 = v216;
      v83 = v217;
      *(int8x16_t *)(a3 + 1312) = v25;
      v85 = v204;
      v85.i64[1] = vextq_s8(v85, v85, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1328) = v85;
      v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
      v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
      v87 = v214;
      v86 = v215;
      *(int8x16_t *)(a3 + 1344) = v24;
      *(int8x16_t *)(a3 + 1360) = v23;
      v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
      v88 = v213;
      *(int8x16_t *)(a3 + 1376) = v22;
      v21.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
      v89 = v212;
      *(int8x16_t *)(a3 + 1392) = v21;
      v20.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
      v90 = v211;
      *(int8x16_t *)(a3 + 1408) = v20;
      v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
      v91 = v210;
      *(int8x16_t *)(a3 + 1424) = v19;
      v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
      v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
      v92 = v209;
      *(int8x16_t *)(a3 + 1440) = v18;
      v93 = v208;
      *(int8x16_t *)(a3 + 1456) = v17;
      v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
      v94 = v207;
      *(int8x16_t *)(a3 + 1472) = v16;
      v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
      v95 = v206;
      *(int8x16_t *)(a3 + 1488) = v15;
      v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
      v96 = v205;
      *(int8x16_t *)(a3 + 1504) = v14;
      v97 = v182;
      v97.i64[1] = vextq_s8(v97, v97, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1520) = v97;
      v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1536) = v13;
      v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1552) = v12;
      v96.i64[1] = vextq_s8(v96, v96, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1568) = v96;
      v95.i64[1] = vextq_s8(v95, v95, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1584) = v95;
      v94.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1600) = v94;
      v93.i64[1] = vextq_s8(v93, v93, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1616) = v93;
      v92.i64[1] = vextq_s8(v92, v92, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1632) = v92;
      v91.i64[1] = vextq_s8(v91, v91, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1648) = v91;
      v90.i64[1] = vextq_s8(v90, v90, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1664) = v90;
      v89.i64[1] = vextq_s8(v89, v89, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1680) = v89;
      v88.i64[1] = vextq_s8(v88, v88, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1696) = v88;
      v87.i64[1] = vextq_s8(v87, v87, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1712) = v87;
      v86.i64[1] = vextq_s8(v86, v86, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1728) = v86;
      v84.i64[1] = vextq_s8(v84, v84, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1744) = v84;
      v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1760) = v83;
      v82.i64[1] = vextq_s8(v82, v82, 8uLL).u64[0];
      *(int8x16_t *)(a3 + 1776) = v82;
    }
    *(_BYTE *)(a1 + 464) = 1;
    v98 = *(_QWORD *)(a1 + 472);
    if (v98)
    {
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v98 + 24))(v98, v7);
      v99 = *(float64x2_t **)(a1 + 472);
      v100 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v99->f64[0] + 16))(v99);
      sub_20F562084(&v219, v6, (float64x2_t *)a3, v101, v102, v103, v104, v105, v106, v107, v99, v100);
      sub_20F55DD0C(&v219, v108, v109, v110, v111, v112, v113, v114, v6, (float64x2_t *)a3, v99, v100);
    }
    _Q2 = v7[1];
    *(_OWORD *)(a1 + 216) = *v7;
    _Q1 = *v7;
    *(_OWORD *)(a1 + 232) = v7[1];
    v117 = v7[3];
    *(_OWORD *)(a1 + 248) = v7[2];
    *(_QWORD *)(a1 + 328) = *((_QWORD *)v7 + 14);
    _Q3 = v7[5];
    v118 = v7[6];
    _Q5 = v7[4];
    *(_OWORD *)(a1 + 296) = _Q3;
    *(_OWORD *)(a1 + 312) = v118;
    _Q4 = v7[3];
    v121 = v7[4];
    _Q7 = v7[2];
    *(_OWORD *)(a1 + 264) = v117;
    *(_OWORD *)(a1 + 280) = v121;
    _D17 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D16, D17, V1.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D16, D1, V2.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q7 + 1);
    __asm { FMLA            D16, D1, V7.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q4 + 1);
    __asm { FMLA            D16, D1, V4.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q5 + 1);
    __asm { FMLA            D16, D1, V5.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q3 + 1);
    __asm { FMLA            D16, D1, V3.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)v7 + 13);
    __asm { FMLA            D16, D1, V6.D[1] }
    v136 = *(double *)(a2 + 8) * (_D16 + *((double *)v7 + 14) * *((double *)v7 + 14));
  }
  else
  {
    *(_BYTE *)(a1 + 464) = 0;
    v136 = 0.0;
  }
  *(double *)(a1 + 456) = v136;
  return v8;
}

_BYTE *sub_20F55DD0C(_BYTE *result, float64x2_t a2, float64x2_t a3, double a4, double a5, double a6, float64x2_t a7, float64x2_t a8, uint64_t a9, float64x2_t *a10, float64x2_t *a11, int a12)
{
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v272;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v292;
  float64x2_t v294;
  float64x2_t v299;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v386;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v638;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v660;
  float64x2_t v662;
  float64x2_t v665;
  float64x2_t v667;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t *v676;
  float64x2_t *v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t *v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t *v686;
  float64x2_t v687;
  float64x2_t v689;
  float64x2_t v691;
  float64x2_t *v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v697;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v727;
  float64x2_t v733;
  unint64_t i;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t *v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  _QWORD *v862;
  float64x2_t v928;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v934;
  float64x2_t v936;
  float64x2_t v938;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1052;
  float64x2_t v1056[137];
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  double v1060;
  double v1061;
  double v1062;
  float64x2_t v1063;
  double v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  _BYTE v1132[1080];
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64_t v1178;
  uint64_t v1179;
  float64_t *v1180;

  v1179 = *MEMORY[0x24BDAC8D0];
  v14 = a10 + 45;
  switch(a12)
  {
    case 0:
      v15 = a11 + 1;
      if ((float64x2_t *)&a10[112].f64[1] > &a11[1] && (float64x2_t *)&a11[113].f64[1] > v14)
      {
        MEMORY[0x24BDAC7A8](result);
        result = memcpy(v1056, v15, 0x708uLL);
        v15 = v1056;
      }
      MEMORY[0x24BDAC7A8](result);
      v16 = &v1056[-68];
      memcpy(&v1056[-68], v14, 0x438uLL);
      v17 = v15[1];
      v18 = *(float64x2_t *)((char *)v15 + 136);
      v19 = *(float64x2_t *)((char *)v15 + 120);
      v21 = v15[15];
      v20 = v15[16];
      v22 = *(float64x2_t *)((char *)v15 + 376);
      v23 = *(float64x2_t *)((char *)v15 + 360);
      v24 = v1056[-67];
      v25 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v26 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v27 = v1056[-53];
      v28 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v29 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      _Q24 = v1056[-68];
      v31 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v16->f64[0]), v19, *v16, 1), v21, v24.f64[0]), v23, v24, 1);
      v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v16->f64[0]), v18, *v16, 1), v20, v24.f64[0]), v22, v24, 1);
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v26.f64[0]), v19, v26, 1), v21, v25.f64[0]), v23, v25, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v26.f64[0]), v18, v26, 1), v20, v25.f64[0]), v22, v25, 1);
      _Q20 = v27;
      v36 = v1056[-52];
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v27.f64[0]), v19, v27, 1), v21, v36.f64[0]), v23, v36, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v27.f64[0]), v18, v27, 1), v20, v36.f64[0]), v22, v36, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v29.f64[0]), v19, v29, 1), v21, v28.f64[0]), v23, v28, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v29.f64[0]), v18, v29, 1), v20, v28.f64[0]), v22, v28, 1);
      v42 = v15[30];
      v41 = v15[31];
      v44 = *(float64x2_t *)((char *)v15 + 600);
      v43 = *(float64x2_t *)((char *)v15 + 616);
      v46 = v15[45];
      v45 = v15[46];
      v48 = *(float64x2_t *)((char *)v15 + 840);
      v47 = *(float64x2_t *)((char *)v15 + 856);
      v49 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v50 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v51 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v52 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      _Q1 = v1056[-67];
      v54 = v1056[-66];
      _Q2 = v54;
      v56 = v1056[-65];
      v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v54.f64[0]), v44, v54, 1), v46, v56.f64[0]), v48, v56, 1);
      v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v32, v41, v54.f64[0]), v43, v54, 1), v45, v56.f64[0]), v47, v56, 1);
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v50.f64[0]), v44, v50, 1), v46, v49.f64[0]), v48, v49, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v41, v50.f64[0]), v43, v50, 1), v45, v49.f64[0]), v47, v49, 1);
      _Q4 = v1056[-52];
      v62 = v1056[-51];
      _Q3 = v62;
      v64 = v1056[-50];
      v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, v42, v62.f64[0]), v44, v62, 1), v46, v64.f64[0]), v48, v64, 1);
      v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, v41, v62.f64[0]), v43, v62, 1), v45, v64.f64[0]), v47, v64, 1);
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v42, v52.f64[0]), v44, v52, 1), v46, v51.f64[0]), v48, v51, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v41, v52.f64[0]), v43, v52, 1), v45, v51.f64[0]), v47, v51, 1);
      v70 = v15[60];
      v69 = v15[61];
      v72 = *(float64x2_t *)((char *)v15 + 1080);
      v71 = *(float64x2_t *)((char *)v15 + 1096);
      v73 = v15[76];
      v74 = v15[75];
      v75 = *(float64x2_t *)((char *)v15 + 1320);
      v76 = *(float64x2_t *)((char *)v15 + 1336);
      v77 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v78 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v79 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v80 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q5 = v1056[-65];
      v82 = v1056[-64];
      _Q7 = v82;
      v84 = v1056[-63];
      v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v57, v70, v82.f64[0]), v72, v82, 1), v74, v84.f64[0]), v75, v84, 1);
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, v82.f64[0]), v71, v82, 1), v73, v84.f64[0]), v76, v84, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v70, v78.f64[0]), v72, v78, 1), v74, v77.f64[0]), v75, v77, 1);
      v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v78.f64[0]), v71, v78, 1), v73, v77.f64[0]), v76, v77, 1);
      _Q18 = v1056[-50];
      v89 = v1056[-49];
      _Q6 = v89;
      v92 = v1056[-48];
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, v70, v89.f64[0]), v72, v89, 1), v74, v92.f64[0]), v75, v92, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v69, v89.f64[0]), v71, v89, 1), v73, v92.f64[0]), v76, v92, 1);
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v70, v80.f64[0]), v72, v80, 1), v74, v79.f64[0]), v75, v79, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v69, v80.f64[0]), v71, v80, 1), v73, v79.f64[0]), v76, v79, 1);
      v97 = v15[91];
      v98 = v15[90];
      v100 = *(float64x2_t *)((char *)v15 + 1560);
      v99 = *(float64x2_t *)((char *)v15 + 1576);
      v101 = v15[106];
      v102 = v15[105];
      v69.f64[0] = v1056[-61].f64[0];
      v75.f64[0] = v1056[-54].f64[1];
      v103 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v89.f64[0] = v1056[-46].f64[0];
      v92.f64[0] = v1056[-39].f64[1];
      v104 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      _Q17 = v1056[-63];
      v105 = v1056[-62];
      v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v85, v98, v105.f64[0]), v100, v105, 1), v102, v69.f64[0]);
      v108 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v86, v97, v105.f64[0]), v99, v105, 1), v101, v69.f64[0]);
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v98, v103.f64[0]), v100, v103, 1), v102, v75.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v97, v103.f64[0]), v99, v103, 1), v101, v75.f64[0]);
      _Q16 = v1056[-48];
      v111 = v1056[-47];
      *v14 = v107;
      v14[1] = v108;
      *(float64x2_t *)((char *)v14 + 136) = v110;
      *(float64x2_t *)((char *)v14 + 120) = v109;
      a10[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v98, v111.f64[0]), v100, v111, 1), v102, v89.f64[0]);
      a10[61] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v97, v111.f64[0]), v99, v111, 1), v101, v89.f64[0]);
      *(float64x2_t *)((char *)v14 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v98, v104.f64[0]), v100, v104, 1), v102, v92.f64[0]);
      *(float64x2_t *)((char *)v14 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v97, v104.f64[0]), v99, v104, 1), v101, v92.f64[0]);
      v113 = v15[2];
      v114 = v15[3];
      v115 = *(float64x2_t *)((char *)v15 + 168);
      v116 = *(float64x2_t *)((char *)v15 + 152);
      v118 = v15[17];
      v117 = v15[18];
      v119 = *(float64x2_t *)((char *)v15 + 408);
      v120 = *(float64x2_t *)((char *)v15 + 392);
      v121 = v1056[-67];
      v122 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v123 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v125 = v1056[-53];
      v124 = v1056[-52];
      v126 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v127 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v128 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v16->f64[0]), v116, *v16, 1), v118, v121.f64[0]), v120, v121, 1);
      v129 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v16->f64[0]), v115, *v16, 1), v117, v121.f64[0]), v119, v121, 1);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v123.f64[0]), v116, v123, 1), v118, v122.f64[0]), v120, v122, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v123.f64[0]), v115, v123, 1), v117, v122.f64[0]), v119, v122, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v125.f64[0]), v116, v125, 1), v118, v124.f64[0]), v120, v124, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v125.f64[0]), v115, v125, 1), v117, v124.f64[0]), v119, v124, 1);
      v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v127.f64[0]), v116, v127, 1), v118, v126.f64[0]), v120, v126, 1);
      v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v127.f64[0]), v115, v127, 1), v117, v126.f64[0]), v119, v126, 1);
      v137 = v15[32];
      v136 = v15[33];
      v139 = *(float64x2_t *)((char *)v15 + 632);
      v138 = *(float64x2_t *)((char *)v15 + 648);
      v141 = v15[47];
      v140 = v15[48];
      v143 = *(float64x2_t *)((char *)v15 + 872);
      v142 = *(float64x2_t *)((char *)v15 + 888);
      v145 = v1056[-66];
      v144 = v1056[-65];
      v146 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v147 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v148 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v128, v137, v145.f64[0]), v139, v145, 1), v141, v144.f64[0]), v143, v144, 1);
      v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v129, v136, v145.f64[0]), v138, v145, 1), v140, v144.f64[0]), v142, v144, 1);
      v150 = v1056[-51];
      v151 = v1056[-50];
      v152 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v137, v147.f64[0]), v139, v147, 1);
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v136, v147.f64[0]), v138, v147, 1);
      v154 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v141, v146.f64[0]), v143, v146, 1);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v140, v146.f64[0]), v142, v146, 1);
      v157 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v132, v137, v150.f64[0]), v139, v150, 1), v141, v151.f64[0]), v143, v151, 1);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v133, v136, v150.f64[0]), v138, v150, 1), v140, v151.f64[0]), v142, v151, 1);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v134, v137, v157.f64[0]), v139, v157, 1), v141, v154.f64[0]), v143, v154, 1);
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v135, v136, v157.f64[0]), v138, v157, 1), v140, v154.f64[0]), v142, v154, 1);
      v163 = v15[62];
      v162 = v15[63];
      v165 = *(float64x2_t *)((char *)v15 + 1112);
      v164 = *(float64x2_t *)((char *)v15 + 1128);
      v166 = v15[78];
      v167 = v15[77];
      v169 = *(float64x2_t *)((char *)v15 + 1352);
      v168 = *(float64x2_t *)((char *)v15 + 1368);
      v171 = v1056[-64];
      v170 = v1056[-63];
      v172 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v173 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v174 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v148, v163, v171.f64[0]), v165, v171, 1), v167, v170.f64[0]), v169, v170, 1);
      v175 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v149, v162, v171.f64[0]), v164, v171, 1), v166, v170.f64[0]), v168, v170, 1);
      v176 = v1056[-49];
      v177 = v1056[-48];
      v178 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v163, v173.f64[0]), v165, v173, 1);
      v179 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v162, v173.f64[0]), v164, v173, 1);
      v180 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v178, v167, v172.f64[0]), v169, v172, 1);
      v182 = vmlaq_laneq_f64(vmlaq_n_f64(v179, v166, v172.f64[0]), v168, v172, 1);
      v183 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v158, v163, v176.f64[0]), v165, v176, 1), v167, v177.f64[0]), v169, v177, 1);
      v185 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v159, v162, v176.f64[0]), v164, v176, 1), v166, v177.f64[0]), v168, v177, 1);
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v160, v163, v183.f64[0]), v165, v183, 1), v167, v180.f64[0]), v169, v180, 1);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v161, v162, v183.f64[0]), v164, v183, 1), v166, v180.f64[0]), v168, v180, 1);
      v188 = v15[93];
      v189 = v15[92];
      v191 = *(float64x2_t *)((char *)v15 + 1592);
      v190 = *(float64x2_t *)((char *)v15 + 1608);
      v192 = v15[108];
      v193 = v15[107];
      v168.f64[0] = v1056[-61].f64[0];
      v194 = v1056[-62];
      v176.f64[0] = v1056[-54].f64[1];
      v195 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v183.f64[0] = v1056[-46].f64[0];
      v196 = v1056[-47];
      v197 = vmlaq_laneq_f64(vmlaq_n_f64(v174, v189, v194.f64[0]), v191, v194, 1);
      v198 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v188, v194.f64[0]), v190, v194, 1);
      v194.f64[0] = v1056[-39].f64[1];
      v199 = vmlaq_n_f64(v197, v193, v168.f64[0]);
      v200 = vmlaq_n_f64(v198, v192, v168.f64[0]);
      v201 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v14[2] = v199;
      v14[3] = v200;
      *(float64x2_t *)((char *)v14 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v182, v188, v195.f64[0]), v190, v195, 1), v192, v176.f64[0]);
      *(float64x2_t *)((char *)v14 + 152) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v181, v189, v195.f64[0]), v191, v195, 1), v193, v176.f64[0]);
      a10[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v184, v189, v196.f64[0]), v191, v196, 1), v193, v183.f64[0]);
      a10[63] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v185, v188, v196.f64[0]), v190, v196, 1), v192, v183.f64[0]);
      *(float64x2_t *)((char *)v14 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v186, v189, v201.f64[0]), v191, v201, 1), v193, v194.f64[0]);
      *(float64x2_t *)((char *)v14 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v187, v188, v201.f64[0]), v190, v201, 1), v192, v194.f64[0]);
      v202 = v15[4];
      v203 = v15[5];
      v204 = *(float64x2_t *)((char *)v15 + 200);
      v205 = *(float64x2_t *)((char *)v15 + 184);
      v207 = v15[19];
      v206 = v15[20];
      v208 = *(float64x2_t *)((char *)v15 + 440);
      v209 = *(float64x2_t *)((char *)v15 + 424);
      v210 = v1056[-67];
      v211 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v212 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v214 = v1056[-53];
      v213 = v1056[-52];
      v215 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v216 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v217 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v16->f64[0]), v205, *v16, 1), v207, v210.f64[0]), v209, v210, 1);
      v218 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v16->f64[0]), v204, *v16, 1), v206, v210.f64[0]), v208, v210, 1);
      v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v212.f64[0]), v205, v212, 1), v207, v211.f64[0]), v209, v211, 1);
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v212.f64[0]), v204, v212, 1), v206, v211.f64[0]), v208, v211, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v214.f64[0]), v205, v214, 1), v207, v213.f64[0]), v209, v213, 1);
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v214.f64[0]), v204, v214, 1), v206, v213.f64[0]), v208, v213, 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v216.f64[0]), v205, v216, 1), v207, v215.f64[0]), v209, v215, 1);
      v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v216.f64[0]), v204, v216, 1), v206, v215.f64[0]), v208, v215, 1);
      v226 = v15[34];
      v225 = v15[35];
      result = (_BYTE *)&v15[41].f64[1];
      v228 = *(float64x2_t *)((char *)v15 + 664);
      v227 = *(float64x2_t *)((char *)v15 + 680);
      v230 = v15[49];
      v229 = v15[50];
      v232 = *(float64x2_t *)((char *)v15 + 904);
      v231 = *(float64x2_t *)((char *)v15 + 920);
      v234 = v1056[-66];
      v233 = v1056[-65];
      v235 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v236 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v217, v226, v234.f64[0]), v228, v234, 1), v230, v233.f64[0]), v232, v233, 1);
      v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v218, v225, v234.f64[0]), v227, v234, 1), v229, v233.f64[0]), v231, v233, 1);
      v239 = v1056[-51];
      v240 = v1056[-50];
      v241 = vmlaq_laneq_f64(vmlaq_n_f64(v219, v226, v236.f64[0]), v228, v236, 1);
      v242 = vmlaq_laneq_f64(vmlaq_n_f64(v220, v225, v236.f64[0]), v227, v236, 1);
      v243 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v230, v235.f64[0]), v232, v235, 1);
      v245 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v229, v235.f64[0]), v231, v235, 1);
      v246 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v221, v226, v239.f64[0]), v228, v239, 1), v230, v240.f64[0]), v232, v240, 1);
      v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v222, v225, v239.f64[0]), v227, v239, 1), v229, v240.f64[0]), v231, v240, 1);
      v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v223, v226, v246.f64[0]), v228, v246, 1), v230, v243.f64[0]), v232, v243, 1);
      v250 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v224, v225, v246.f64[0]), v227, v246, 1), v229, v243.f64[0]), v231, v243, 1);
      v251 = v15[65];
      v252 = v15[64];
      v254 = *(float64x2_t *)((char *)v15 + 1144);
      v253 = *(float64x2_t *)((char *)v15 + 1160);
      v255 = v15[80];
      v256 = v15[79];
      v258 = *(float64x2_t *)((char *)v15 + 1384);
      v257 = *(float64x2_t *)((char *)v15 + 1400);
      v260 = v1056[-64];
      v259 = v1056[-63];
      v261 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v262 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v237, v252, v260.f64[0]), v254, v260, 1), v256, v259.f64[0]), v258, v259, 1);
      v264 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v238, v251, v260.f64[0]), v253, v260, 1), v255, v259.f64[0]), v257, v259, 1);
      v265 = v1056[-49];
      v266 = v1056[-48];
      v267 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v252, v262.f64[0]), v254, v262, 1);
      v268 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v251, v262.f64[0]), v253, v262, 1);
      v269 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v256, v261.f64[0]), v258, v261, 1);
      _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v255, v261.f64[0]), v257, v261, 1);
      v272 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v252, v265.f64[0]), v254, v265, 1), v256, v266.f64[0]), v258, v266, 1);
      v274 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v248, v251, v265.f64[0]), v253, v265, 1), v255, v266.f64[0]), v257, v266, 1);
      v275 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v252, v272.f64[0]), v254, v272, 1), v256, v269.f64[0]), v258, v269, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v251, v272.f64[0]), v253, v272, 1), v255, v269.f64[0]), v257, v269, 1);
      v277 = v15[95];
      v278 = v15[94];
      _Q31 = *(float64x2_t *)((char *)v15 + 1624);
      v279 = *(float64x2_t *)((char *)v15 + 1640);
      v281 = v15[110];
      v282 = v15[109];
      v257.f64[0] = v1056[-61].f64[0];
      v283 = v1056[-62];
      v265.f64[0] = v1056[-54].f64[1];
      v284 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v272.f64[0] = v1056[-46].f64[0];
      v285 = v1056[-47];
      v286 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v278, v283.f64[0]), _Q31, v283, 1);
      v287 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v277, v283.f64[0]), v279, v283, 1);
      v283.f64[0] = v1056[-39].f64[1];
      v288 = vmlaq_n_f64(v286, v282, v257.f64[0]);
      v289 = vmlaq_n_f64(v287, v281, v257.f64[0]);
      v290 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v14[4] = v288;
      v14[5] = v289;
      *(float64x2_t *)((char *)v14 + 200) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q22, v277, v284.f64[0]), v279, v284, 1), v281, v265.f64[0]);
      *(float64x2_t *)((char *)v14 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v270, v278, v284.f64[0]), _Q31, v284, 1), v282, v265.f64[0]);
      a10[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v274, v277, v285.f64[0]), v279, v285, 1), v281, v272.f64[0]);
      a10[64] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v278, v285.f64[0]), _Q31, v285, 1), v282, v272.f64[0]);
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v275, v278, v290.f64[0]), _Q31, v290, 1), v282, v283.f64[0]);
      *(float64x2_t *)((char *)v14 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v277, v290.f64[0]), v279, v290, 1), v281, v283.f64[0]);
      _Q26 = v15[6];
      _Q27.f64[0] = v15[14].f64[1];
      v292 = *(float64x2_t *)((char *)v15 + 216);
      _Q30 = v15[21];
      _Q31.f64[0] = v15[29].f64[1];
      v294 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      _Q21 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v299 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v292, _Q24, 1), _Q30, _Q1.f64[0]), v294, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v304 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v292, _Q21, 1), _Q30, _Q19.f64[0]), v294, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
      }
      v305 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v292, _Q20, 1), _Q30, _Q4.f64[0]), v294, _Q4, 1);
      __asm
      {
        FMLA            D21, D27, V20.D[1]
        FMLA            D21, D31, V4.D[1]
      }
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q10.f64[0]), v292, _Q10, 1), _Q30, _Q9.f64[0]), v294, _Q9, 1);
      __asm
      {
        FMLA            D20, D27, V10.D[1]
        FMLA            D20, D31, V9.D[1]
      }
      v307 = v15[36];
      *(_QWORD *)&v1131.f64[0] = &v15[43].f64[1];
      _Q26.f64[0] = v15[44].f64[1];
      v308 = *(float64x2_t *)((char *)v15 + 696);
      v309 = v15[51];
      *(_QWORD *)&v1130.f64[0] = &v15[58].f64[1];
      _Q30.f64[0] = v15[59].f64[1];
      v310 = *(float64x2_t *)((char *)v15 + 936);
      _Q8 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      _Q11 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v315 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v299, v307, _Q2.f64[0]), v308, _Q2, 1), v309, _Q5.f64[0]), v310, _Q5, 1);
      __asm
      {
        FMLA            D23, D26, V2.D[1]
        FMLA            D23, D30, V5.D[1]
      }
      v316 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v304, v307, _Q9.f64[0]), v308, _Q9, 1), v309, _Q8.f64[0]), v310, _Q8, 1);
      __asm
      {
        FMLA            D22, D26, V9.D[1]
        FMLA            D22, D30, V8.D[1]
      }
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v305, v307, _Q3.f64[0]), v308, _Q3, 1), v309, _Q18.f64[0]), v310, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v306, v307, _Q11.f64[0]), v308, _Q11, 1), v309, _Q10.f64[0]), v310, _Q10, 1);
      __asm
      {
        FMLA            D20, D26, V11.D[1]
        FMLA            D20, D30, V10.D[1]
      }
      v319 = v15[66];
      *(_QWORD *)&v1129.f64[0] = &v15[73].f64[1];
      _Q5.f64[0] = v15[74].f64[1];
      v320 = *(float64x2_t *)((char *)v15 + 1176);
      v321 = v15[81];
      *(_QWORD *)&v1128.f64[0] = &v15[88].f64[1];
      _Q26.f64[0] = v15[89].f64[1];
      v322 = *(float64x2_t *)((char *)v15 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      _Q29 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      _Q30 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      _Q31 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v327 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v315, v319, _Q7.f64[0]), v320, _Q7, 1), v321, _Q17.f64[0]), v322, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v328 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v316, v319, _Q29.f64[0]), v320, _Q29, 1), v321, _Q28.f64[0]), v322, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v329 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v317, v319, _Q6.f64[0]), v320, _Q6, 1), v321, _Q16.f64[0]), v322, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v330 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v318, v319, _Q31.f64[0]), v320, _Q31, 1), v321, _Q30.f64[0]), v322, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v331 = v15[96];
      *(_QWORD *)&v1127.f64[0] = &v15[103].f64[1];
      _Q5.f64[0] = v15[104].f64[1];
      v332 = *(float64x2_t *)((char *)v15 + 1656);
      _Q7.f64[0] = v15[112].f64[0];
      v333 = v15[111];
      _Q17.f64[0] = v1056[-61].f64[0];
      _Q18 = v1056[-62];
      _Q24.f64[0] = v1056[-54].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      _Q26.f64[0] = v1056[-46].f64[0];
      _Q27 = v1056[-47];
      _Q28.f64[0] = v1056[-39].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v14[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v14[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v327, v331, _Q18.f64[0]), v332, _Q18, 1), v333, _Q17.f64[0]);
      v14[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v14 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v328, v331, _Q25.f64[0]), v332, _Q25, 1), v333, _Q24.f64[0]);
      v14[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v14[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v329, v331, _Q27.f64[0]), v332, _Q27, 1), v333, _Q26.f64[0]);
      v14[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v14 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v330, v331, _Q29.f64[0]), v332, _Q29, 1), v333, _Q28.f64[0]);
      v339 = *v15;
      v338 = v15[1];
      v340 = *(float64x2_t *)((char *)v15 + 136);
      v341 = *(float64x2_t *)((char *)v15 + 120);
      v343 = v15[15];
      v342 = v15[16];
      v344 = *(float64x2_t *)((char *)v15 + 376);
      v345 = *(float64x2_t *)((char *)v15 + 360);
      v346 = v1056[-38];
      v347 = v1056[-37];
      v348 = v1056[-23];
      v349 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      _Q22 = v346;
      v351 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v346.f64[0]), v341, v346, 1), v343, v347.f64[0]), v345, v347, 1);
      v352 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v346.f64[0]), v340, v346, 1), v342, v347.f64[0]), v344, v347, 1);
      _Q20 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v354 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v1056[-31].f64[1]), v341, _Q20, 1), v343, v354.f64[0]), v345, v354, 1);
      v356 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v1056[-31].f64[1]), v340, _Q20, 1), v342, v354.f64[0]), v344, v354, 1);
      v357 = vmlaq_laneq_f64(vmulq_n_f64(*v15, v348.f64[0]), v341, v348, 1);
      v358 = v1056[-22];
      v1126 = v348;
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v343, v358.f64[0]), v345, v358, 1);
      v360 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v348.f64[0]), v340, v348, 1), v342, v358.f64[0]), v344, v358, 1);
      v361 = vmlaq_laneq_f64(vmulq_n_f64(v339, v349.f64[0]), v341, v349, 1);
      v362 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v1125 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(v361, v343, v362.f64[0]), v345, v362, 1);
      v364 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v349.f64[0]), v340, v349, 1), v342, v362.f64[0]), v344, v362, 1);
      v366 = v15[30];
      v365 = v15[31];
      v368 = *(float64x2_t *)((char *)v15 + 600);
      v367 = *(float64x2_t *)((char *)v15 + 616);
      v370 = v15[45];
      v369 = v15[46];
      v372 = *(float64x2_t *)((char *)v15 + 840);
      v371 = *(float64x2_t *)((char *)v15 + 856);
      v373 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      _Q19 = v1056[-37];
      v374 = v1056[-36];
      _Q7 = v374;
      v377 = v1056[-35];
      v378 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v351, v366, v374.f64[0]), v368, v374, 1), v370, v377.f64[0]), v372, v377, 1);
      v379 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v352, v365, v374.f64[0]), v367, v374, 1), v369, v377.f64[0]), v371, v377, 1);
      _Q16 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v381 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v382 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v366, v1056[-29].f64[1]), v368, _Q16, 1), v370, v381.f64[0]), v372, v381, 1);
      v383 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v356, v365, v1056[-29].f64[1]), v367, _Q16, 1), v369, v381.f64[0]), v371, v381, 1);
      _Q23 = v1056[-22];
      v384 = v1056[-21];
      _Q17 = v384;
      v386 = v1056[-20];
      v388 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v366, v384.f64[0]), v368, v384, 1), v370, v386.f64[0]), v372, v386, 1);
      v389 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v360, v365, v384.f64[0]), v367, v384, 1), v369, v386.f64[0]), v371, v386, 1);
      v390 = vmlaq_laneq_f64(vmlaq_n_f64(v363, v366, v373.f64[0]), v368, v373, 1);
      _Q18 = v373;
      v392 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(v390, v370, v392.f64[0]), v372, v392, 1);
      v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v364, v365, v373.f64[0]), v367, v373, 1), v369, v392.f64[0]), v371, v392, 1);
      v395 = v15[60];
      v396 = v15[61];
      v397 = *(float64x2_t *)((char *)v15 + 1080);
      v398 = *(float64x2_t *)((char *)v15 + 1096);
      v399 = v15[76];
      v400 = v15[75];
      v402 = *(float64x2_t *)((char *)v15 + 1320);
      v401 = *(float64x2_t *)((char *)v15 + 1336);
      v403 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v404 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      _Q26 = v1056[-35];
      v406 = v1056[-33];
      v1124 = v1056[-34];
      v407 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v378, v395, v1124.f64[0]), v397, v1124, 1), v400, v406.f64[0]), v402, v406, 1);
      v408 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v379, v396, v1124.f64[0]), v398, v1124, 1), v399, v406.f64[0]), v401, v406, 1);
      v409 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v1121 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v410 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v382, v395, v403.f64[0]), v397, v403, 1), v400, v409.f64[0]), v402, v409, 1);
      v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v383, v396, v403.f64[0]), v398, v403, 1), v399, v409.f64[0]), v401, v409, 1);
      _Q27 = v1056[-20];
      v412 = v1056[-19];
      v414 = vmlaq_laneq_f64(vmlaq_n_f64(v388, v395, v412.f64[0]), v397, v412, 1);
      v415 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v395, v404.f64[0]), v397, v404, 1);
      v416 = v1056[-18];
      v1123 = v412;
      v417 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v1122 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v418 = vmlaq_laneq_f64(vmlaq_n_f64(v414, v400, v416.f64[0]), v402, v416, 1);
      v419 = vmlaq_laneq_f64(vmlaq_n_f64(v415, v400, v417.f64[0]), v402, v417, 1);
      v420 = vmlaq_n_f64(v389, v396, v412.f64[0]);
      v421 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v394, v396, v404.f64[0]), v398, v404, 1), v399, v417.f64[0]), v401, v417, 1);
      v422 = v15[90];
      v423 = *(float64x2_t *)((char *)v15 + 1560);
      v424 = *(float64x2_t *)((char *)v15 + 1576);
      v425 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v426 = vmlaq_laneq_f64(vmlaq_n_f64(v410, v422, v425.f64[0]), v423, v425, 1);
      v427 = v15[91];
      v428 = vmlaq_laneq_f64(vmlaq_n_f64(v411, v427, v425.f64[0]), v424, v425, 1);
      v429 = v15[105];
      v425.f64[0] = v1056[-24].f64[1];
      v430 = vmlaq_n_f64(v426, v429, v425.f64[0]);
      v431 = v15[106];
      v432 = vmlaq_n_f64(v428, v431, v425.f64[0]);
      _Q21 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v433 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v435 = vmlaq_laneq_f64(vmlaq_n_f64(v419, v422, v433.f64[0]), v423, v433, 1);
      v436 = vmlaq_laneq_f64(vmlaq_n_f64(v421, v427, v433.f64[0]), v424, v433, 1);
      v433.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 600) = v430;
      *(float64x2_t *)((char *)v14 + 616) = v432;
      *(float64x2_t *)((char *)v14 + 840) = vmlaq_n_f64(v435, v429, v433.f64[0]);
      *(float64x2_t *)((char *)v14 + 856) = vmlaq_n_f64(v436, v431, v433.f64[0]);
      v437 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v420, v398, v412, 1), v399, v416.f64[0]), v401, v416, 1);
      v433.f64[0] = v1056[-31].f64[0];
      v416.f64[0] = v1056[-16].f64[0];
      _Q25 = v1056[-33];
      v438 = v1056[-32];
      v440 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v407, v422, v438.f64[0]), v423, v438, 1), v429, v433.f64[0]);
      v441 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v408, v427, v438.f64[0]), v424, v438, 1), v431, v433.f64[0]);
      _Q24 = v1056[-18];
      v442 = v1056[-17];
      v14[30] = v440;
      v14[31] = v441;
      a10[91] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v437, v427, v442.f64[0]), v424, v442, 1), v431, v416.f64[0]);
      a10[90] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v418, v422, v442.f64[0]), v423, v442, 1), v429, v416.f64[0]);
      v445 = v15[2];
      v444 = v15[3];
      v446 = *(float64x2_t *)((char *)v15 + 168);
      v447 = *(float64x2_t *)((char *)v15 + 152);
      v449 = v15[17];
      v448 = v15[18];
      v450 = *(float64x2_t *)((char *)v15 + 408);
      v451 = *(float64x2_t *)((char *)v15 + 392);
      v453 = v1056[-38];
      v452 = v1056[-37];
      v454 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v455 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v453.f64[0]), v447, v453, 1), v449, v452.f64[0]), v451, v452, 1);
      v456 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v453.f64[0]), v446, v453, 1), v448, v452.f64[0]), v450, v452, 1);
      v457 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v454.f64[0]), v447, v454, 1), v449, v457.f64[0]), v451, v457, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v454.f64[0]), v446, v454, 1), v448, v457.f64[0]), v450, v457, 1);
      v460 = v1056[-23];
      v461 = vmlaq_laneq_f64(vmulq_n_f64(v445, v460.f64[0]), v447, v460, 1);
      v462 = vmlaq_laneq_f64(vmulq_n_f64(v444, v460.f64[0]), v446, v460, 1);
      v463 = v1056[-22];
      v464 = vmlaq_laneq_f64(vmlaq_n_f64(v461, v449, v463.f64[0]), v451, v463, 1);
      v465 = vmlaq_laneq_f64(vmlaq_n_f64(v462, v448, v463.f64[0]), v450, v463, 1);
      v466 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v467 = vmlaq_laneq_f64(vmulq_n_f64(v445, v466.f64[0]), v447, v466, 1);
      v468 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v469 = vmlaq_laneq_f64(vmlaq_n_f64(v467, v449, v468.f64[0]), v451, v468, 1);
      v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v466.f64[0]), v446, v466, 1), v448, v468.f64[0]), v450, v468, 1);
      v472 = v15[32];
      v471 = v15[33];
      v474 = *(float64x2_t *)((char *)v15 + 632);
      v473 = *(float64x2_t *)((char *)v15 + 648);
      v475 = v1056[-36];
      v476 = v1056[-35];
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v472, v475.f64[0]), v474, v475, 1);
      v478 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v471, v475.f64[0]), v473, v475, 1);
      v479 = v15[47];
      v480 = v15[48];
      v481 = *(float64x2_t *)((char *)v15 + 872);
      v482 = *(float64x2_t *)((char *)v15 + 888);
      v483 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v479, v476.f64[0]), v481, v476, 1);
      v484 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v480, v476.f64[0]), v482, v476, 1);
      v485 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v486 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v472, v485.f64[0]), v474, v485, 1);
      v487 = vmlaq_laneq_f64(vmlaq_n_f64(v459, v471, v485.f64[0]), v473, v485, 1);
      v488 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v489 = vmlaq_laneq_f64(vmlaq_n_f64(v486, v479, v488.f64[0]), v481, v488, 1);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(v487, v480, v488.f64[0]), v482, v488, 1);
      v491 = v1056[-21];
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v472, v491.f64[0]), v474, v491, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v471, v491.f64[0]), v473, v491, 1);
      v494 = v1056[-20];
      v495 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v479, v494.f64[0]), v481, v494, 1);
      v496 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v480, v494.f64[0]), v482, v494, 1);
      v497 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v498 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v472, v497.f64[0]), v474, v497, 1);
      v499 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v500 = vmlaq_laneq_f64(vmlaq_n_f64(v498, v479, v499.f64[0]), v481, v499, 1);
      v501 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v470, v471, v497.f64[0]), v473, v497, 1), v480, v499.f64[0]), v482, v499, 1);
      v503 = v15[62];
      v502 = v15[63];
      v505 = *(float64x2_t *)((char *)v15 + 1112);
      v504 = *(float64x2_t *)((char *)v15 + 1128);
      v506 = v1056[-34];
      v507 = vmlaq_laneq_f64(vmlaq_n_f64(v483, v503, v506.f64[0]), v505, v506, 1);
      v508 = vmlaq_laneq_f64(vmlaq_n_f64(v484, v502, v506.f64[0]), v504, v506, 1);
      v509 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v510 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v503, v509.f64[0]), v505, v509, 1);
      v511 = vmlaq_laneq_f64(vmlaq_n_f64(v490, v502, v509.f64[0]), v504, v509, 1);
      v512 = v1056[-19];
      v513 = vmlaq_laneq_f64(vmlaq_n_f64(v495, v503, v512.f64[0]), v505, v512, 1);
      v514 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v502, v512.f64[0]), v504, v512, 1);
      v515 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v516 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v517 = vmlaq_n_f64(v500, v503, v515.f64[0]);
      v518 = v15[78];
      v519 = vmlaq_laneq_f64(v517, v505, v515, 1);
      v520 = v15[77];
      v521 = vmlaq_laneq_f64(vmlaq_n_f64(v501, v502, v515.f64[0]), v504, v515, 1);
      v523 = *(float64x2_t *)((char *)v15 + 1352);
      v522 = *(float64x2_t *)((char *)v15 + 1368);
      v524 = v1056[-33];
      v525 = vmlaq_laneq_f64(vmlaq_n_f64(v507, v520, v524.f64[0]), v523, v524, 1);
      v526 = vmlaq_laneq_f64(vmlaq_n_f64(v508, v518, v524.f64[0]), v522, v524, 1);
      v527 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v528 = vmlaq_laneq_f64(vmlaq_n_f64(v510, v520, v527.f64[0]), v523, v527, 1);
      v529 = vmlaq_laneq_f64(vmlaq_n_f64(v511, v518, v527.f64[0]), v522, v527, 1);
      v530 = v1056[-18];
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(v513, v520, v530.f64[0]), v523, v530, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(v519, v520, v516.f64[0]), v523, v516, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(v521, v518, v516.f64[0]), v522, v516, 1);
      v534 = v15[92];
      v535 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v536 = *(float64x2_t *)((char *)v15 + 1592);
      v537 = *(float64x2_t *)((char *)v15 + 1608);
      v538 = vmlaq_laneq_f64(vmlaq_n_f64(v528, v534, v535.f64[0]), v536, v535, 1);
      v539 = v15[93];
      v540 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v539, v535.f64[0]), v537, v535, 1);
      v541 = v15[107];
      v482.f64[0] = v1056[-24].f64[1];
      v542 = vmlaq_n_f64(v538, v541, v482.f64[0]);
      v543 = v15[108];
      v544 = vmlaq_n_f64(v540, v543, v482.f64[0]);
      v545 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v546 = vmlaq_laneq_f64(vmlaq_n_f64(v532, v534, v545.f64[0]), v536, v545, 1);
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(v533, v539, v545.f64[0]), v537, v545, 1);
      v545.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 632) = v542;
      *(float64x2_t *)((char *)v14 + 648) = v544;
      *(float64x2_t *)((char *)v14 + 872) = vmlaq_n_f64(v546, v541, v545.f64[0]);
      *(float64x2_t *)((char *)v14 + 888) = vmlaq_n_f64(v547, v543, v545.f64[0]);
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(v514, v518, v530.f64[0]), v522, v530, 1);
      v547.f64[0] = v1056[-31].f64[0];
      v549 = v1056[-32];
      v518.f64[0] = v1056[-16].f64[0];
      v550 = vmlaq_laneq_f64(vmlaq_n_f64(v525, v534, v549.f64[0]), v536, v549, 1);
      v551 = vmlaq_laneq_f64(vmlaq_n_f64(v526, v539, v549.f64[0]), v537, v549, 1);
      v552 = v1056[-17];
      v14[32] = vmlaq_n_f64(v550, v541, v547.f64[0]);
      v14[33] = vmlaq_n_f64(v551, v543, v547.f64[0]);
      a10[93] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v548, v539, v552.f64[0]), v537, v552, 1), v543, v518.f64[0]);
      a10[92] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v531, v534, v552.f64[0]), v536, v552, 1), v541, v518.f64[0]);
      v554 = v15[4];
      v553 = v15[5];
      v555 = *(float64x2_t *)((char *)v15 + 200);
      v556 = *(float64x2_t *)((char *)v15 + 184);
      v558 = v15[19];
      v557 = v15[20];
      v559 = *(float64x2_t *)((char *)v15 + 440);
      v560 = *(float64x2_t *)((char *)v15 + 424);
      v562 = v1056[-38];
      v561 = v1056[-37];
      v563 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v564 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v562.f64[0]), v556, v562, 1), v558, v561.f64[0]), v560, v561, 1);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v562.f64[0]), v555, v562, 1), v557, v561.f64[0]), v559, v561, 1);
      v566 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v567 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v563.f64[0]), v556, v563, 1), v558, v566.f64[0]), v560, v566, 1);
      v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v563.f64[0]), v555, v563, 1), v557, v566.f64[0]), v559, v566, 1);
      v569 = v1056[-23];
      v570 = vmlaq_laneq_f64(vmulq_n_f64(v554, v569.f64[0]), v556, v569, 1);
      v571 = vmlaq_laneq_f64(vmulq_n_f64(v553, v569.f64[0]), v555, v569, 1);
      v572 = v1056[-22];
      v573 = vmlaq_laneq_f64(vmlaq_n_f64(v570, v558, v572.f64[0]), v560, v572, 1);
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(v571, v557, v572.f64[0]), v559, v572, 1);
      v575 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v576 = vmlaq_laneq_f64(vmulq_n_f64(v554, v575.f64[0]), v556, v575, 1);
      v577 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v578 = vmlaq_laneq_f64(vmlaq_n_f64(v576, v558, v577.f64[0]), v560, v577, 1);
      v579 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v575.f64[0]), v555, v575, 1), v557, v577.f64[0]), v559, v577, 1);
      v581 = v15[34];
      v580 = v15[35];
      v583 = *(float64x2_t *)((char *)v15 + 664);
      v582 = *(float64x2_t *)((char *)v15 + 680);
      v584 = v1056[-36];
      v585 = v1056[-35];
      v586 = vmlaq_laneq_f64(vmlaq_n_f64(v564, v581, v584.f64[0]), v583, v584, 1);
      v587 = vmlaq_laneq_f64(vmlaq_n_f64(v565, v580, v584.f64[0]), v582, v584, 1);
      v588 = v15[49];
      v589 = v15[50];
      v590 = *(float64x2_t *)((char *)v15 + 904);
      v591 = *(float64x2_t *)((char *)v15 + 920);
      v592 = vmlaq_laneq_f64(vmlaq_n_f64(v586, v588, v585.f64[0]), v590, v585, 1);
      v593 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v589, v585.f64[0]), v591, v585, 1);
      v594 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v595 = vmlaq_laneq_f64(vmlaq_n_f64(v567, v581, v594.f64[0]), v583, v594, 1);
      v596 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v580, v594.f64[0]), v582, v594, 1);
      v597 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v598 = vmlaq_laneq_f64(vmlaq_n_f64(v595, v588, v597.f64[0]), v590, v597, 1);
      v599 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v589, v597.f64[0]), v591, v597, 1);
      v600 = v1056[-21];
      v601 = vmlaq_laneq_f64(vmlaq_n_f64(v573, v581, v600.f64[0]), v583, v600, 1);
      v602 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v580, v600.f64[0]), v582, v600, 1);
      v603 = v1056[-20];
      v604 = vmlaq_laneq_f64(vmlaq_n_f64(v601, v588, v603.f64[0]), v590, v603, 1);
      v605 = vmlaq_laneq_f64(vmlaq_n_f64(v602, v589, v603.f64[0]), v591, v603, 1);
      v606 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v607 = vmlaq_laneq_f64(vmlaq_n_f64(v578, v581, v606.f64[0]), v583, v606, 1);
      v608 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v609 = vmlaq_laneq_f64(vmlaq_n_f64(v607, v588, v608.f64[0]), v590, v608, 1);
      v610 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v579, v580, v606.f64[0]), v582, v606, 1), v589, v608.f64[0]), v591, v608, 1);
      v611 = v15[65];
      v612 = v15[64];
      v614 = *(float64x2_t *)((char *)v15 + 1144);
      v613 = *(float64x2_t *)((char *)v15 + 1160);
      v615 = v1056[-34];
      v616 = vmlaq_laneq_f64(vmlaq_n_f64(v592, v612, v615.f64[0]), v614, v615, 1);
      v617 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v611, v615.f64[0]), v613, v615, 1);
      v618 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v619 = vmlaq_laneq_f64(vmlaq_n_f64(v598, v612, v618.f64[0]), v614, v618, 1);
      v620 = vmlaq_laneq_f64(vmlaq_n_f64(v599, v611, v618.f64[0]), v613, v618, 1);
      v621 = v1056[-19];
      v622 = vmlaq_laneq_f64(vmlaq_n_f64(v604, v612, v621.f64[0]), v614, v621, 1);
      v623 = vmlaq_laneq_f64(vmlaq_n_f64(v605, v611, v621.f64[0]), v613, v621, 1);
      v624 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v625 = v15[80];
      v626 = vmlaq_laneq_f64(vmlaq_n_f64(v609, v612, v624.f64[0]), v614, v624, 1);
      v627 = v15[79];
      v628 = vmlaq_laneq_f64(vmlaq_n_f64(v610, v611, v624.f64[0]), v613, v624, 1);
      v630 = *(float64x2_t *)((char *)v15 + 1384);
      v629 = *(float64x2_t *)((char *)v15 + 1400);
      v631 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v632 = vmlaq_laneq_f64(vmlaq_n_f64(v619, v627, v631.f64[0]), v630, v631, 1);
      v633 = vmlaq_laneq_f64(vmlaq_n_f64(v620, v625, v631.f64[0]), v629, v631, 1);
      v634 = v15[94];
      v635 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      _Q10 = *(float64x2_t *)((char *)v15 + 1624);
      _Q14 = *(float64x2_t *)((char *)v15 + 1640);
      v638 = vmlaq_laneq_f64(vmlaq_n_f64(v632, v634, v635.f64[0]), _Q10, v635, 1);
      _Q13 = v15[95];
      _Q12 = vmlaq_laneq_f64(vmlaq_n_f64(v633, _Q13, v635.f64[0]), _Q14, v635, 1);
      v641 = v15[109];
      v543.f64[0] = v1056[-24].f64[1];
      v642 = v15[110];
      *(float64x2_t *)((char *)v14 + 664) = vmlaq_n_f64(v638, v641, v543.f64[0]);
      *(float64x2_t *)((char *)v14 + 680) = vmlaq_n_f64(_Q12, v642, v543.f64[0]);
      v643 = v1056[-18];
      v644 = vmlaq_laneq_f64(vmlaq_n_f64(v622, v627, v643.f64[0]), v630, v643, 1);
      v645 = vmlaq_laneq_f64(vmlaq_n_f64(v623, v625, v643.f64[0]), v629, v643, 1);
      v646 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v647 = vmlaq_laneq_f64(vmlaq_n_f64(v626, v627, v646.f64[0]), v630, v646, 1);
      v648 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v625, v646.f64[0]), v629, v646, 1);
      v649 = v1056[-17];
      v650 = vmlaq_laneq_f64(vmlaq_n_f64(v644, v634, v649.f64[0]), _Q10, v649, 1);
      v651 = vmlaq_laneq_f64(vmlaq_n_f64(v645, _Q13, v649.f64[0]), _Q14, v649, 1);
      v649.f64[0] = v1056[-16].f64[0];
      v652 = vmlaq_n_f64(v650, v641, v649.f64[0]);
      _Q30 = vmlaq_n_f64(v651, v642, v649.f64[0]);
      v654 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v655 = vmlaq_laneq_f64(vmlaq_n_f64(v647, v634, v654.f64[0]), _Q10, v654, 1);
      v656 = vmlaq_laneq_f64(vmlaq_n_f64(v648, _Q13, v654.f64[0]), _Q14, v654, 1);
      v654.f64[0] = v1056[-9].f64[1];
      a10[95] = _Q30;
      a10[94] = v652;
      *(float64x2_t *)((char *)v14 + 904) = vmlaq_n_f64(v655, v641, v654.f64[0]);
      *(float64x2_t *)((char *)v14 + 920) = vmlaq_n_f64(v656, v642, v654.f64[0]);
      v657 = v1056[-33];
      v658 = vmlaq_n_f64(v616, v627, v657.f64[0]);
      _Q4 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v660 = vmlaq_laneq_f64(v658, v630, v657, 1);
      _Q3 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v662 = vmlaq_n_f64(v617, v625, v657.f64[0]);
      _Q5 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      _Q28 = vmlaq_laneq_f64(v662, v629, v657, 1);
      v629.f64[0] = v1056[-31].f64[0];
      v665 = v1056[-32];
      v14[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v660, v634, v665.f64[0]), _Q10, v665, 1), v641, v629.f64[0]);
      v14[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q28, _Q13, v665.f64[0]), _Q14, v665, 1), v642, v629.f64[0]);
      _Q6 = v15[6];
      _Q30.f64[0] = v15[14].f64[1];
      v667 = *(float64x2_t *)((char *)v15 + 216);
      _Q9 = v15[21];
      _Q10.f64[0] = v15[29].f64[1];
      v669 = *(float64x2_t *)((char *)v15 + 456);
      v670 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q22.f64[0]), v667, _Q22, 1), _Q9, _Q19.f64[0]), v669, _Q19, 1);
      __asm
      {
        FMLA            D28, D30, V22.D[1]
        FMLA            D28, D10, V19.D[1]
      }
      v671 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q20.f64[0]), v667, _Q20, 1), _Q9, _Q4.f64[0]), v669, _Q4, 1);
      __asm
      {
        FMLA            D22, D30, V20.D[1]
        FMLA            D22, D10, V4.D[1]
      }
      _Q4.f64[1] = v1126.f64[1];
      __asm { FMLA            D20, D30, V4.D[1] }
      _Q4 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v673 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1126.f64[0]), v667, v1126, 1), _Q9, _Q23.f64[0]), v669, _Q23, 1);
      __asm { FMLA            D20, D10, V23.D[1] }
      _Q12.f64[1] = v1125.f64[1];
      v674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1125.f64[0]), v667, v1125, 1), _Q9, _Q3.f64[0]), v669, _Q3, 1);
      __asm
      {
        FMLA            D19, D30, V12.D[1]
        FMLA            D19, D10, V3.D[1]
      }
      v675 = v15[36];
      _Q6.f64[0] = v15[44].f64[1];
      v676 = *(float64x2_t **)&v1131.f64[0];
      _Q8 = v15[51];
      _Q9.f64[0] = v15[59].f64[1];
      v678 = *(float64x2_t **)&v1130.f64[0];
      v679 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v670, v675, _Q7.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q7, 1), _Q8, _Q26.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q26, 1);
      __asm
      {
        FMLA            D28, D6, V7.D[1]
        FMLA            D28, D9, V26.D[1]
        FMLA            D22, D6, V16.D[1]
        FMLA            D22, D9, V5.D[1]
      }
      v680 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v673, v675, _Q17.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q17, 1), _Q8, _Q27.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q27, 1);
      __asm
      {
        FMLA            D20, D6, V17.D[1]
        FMLA            D20, D9, V27.D[1]
      }
      v681 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v674, v675, _Q18.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q18, 1), _Q8, _Q4.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q4, 1);
      __asm
      {
        FMLA            D19, D6, V18.D[1]
        FMLA            D19, D9, V4.D[1]
      }
      v682 = v15[66];
      _Q7.f64[0] = v15[74].f64[1];
      v683 = *(float64x2_t **)&v1129.f64[0];
      v684 = **(float64x2_t **)&v1129.f64[0];
      v685 = v15[81];
      _Q17.f64[0] = v15[89].f64[1];
      v686 = *(float64x2_t **)&v1128.f64[0];
      v687 = **(float64x2_t **)&v1128.f64[0];
      _Q31 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      _Q13.f64[1] = v1121.f64[1];
      v689 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v671, v675, _Q16.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q16, 1), _Q8, _Q5.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q5, 1), v682, v1121.f64[0]), **(float64x2_t **)&v1129.f64[0], v1121, 1), v685, _Q31.f64[0]), **(float64x2_t **)&v1128.f64[0],
               _Q31,
               1);
      _Q14.f64[1] = v1122.f64[1];
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v681, v682, v1122.f64[0]), **(float64x2_t **)&v1129.f64[0], v1122, 1), v685, _Q21.f64[0]), **(float64x2_t **)&v1128.f64[0], _Q21, 1);
      v691 = v15[96];
      _Q4.f64[0] = v15[104].f64[1];
      v692 = *(float64x2_t **)&v1127.f64[0];
      v693 = **(float64x2_t **)&v1127.f64[0];
      _Q8.f64[0] = v15[112].f64[0];
      v694 = v15[111];
      _Q10.f64[0] = v1056[-24].f64[1];
      _Q11 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      *(float64x2_t *)((char *)v14 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v689, v691, _Q11.f64[0]), **(float64x2_t **)&v1127.f64[0], _Q11, 1), v694, _Q10.f64[0]);
      _Q29 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      _Q12.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 936) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v691, _Q29.f64[0]), v693, _Q29, 1), v694, _Q12.f64[0]);
      _Q23.f64[1] = v1124.f64[1];
      v697 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v679, v682, v1124.f64[0]), v684, v1124, 1), v685, _Q25.f64[0]), v687, _Q25, 1);
      __asm
      {
        FMLA            D28, D7, V23.D[1]
        FMLA            D28, D17, V25.D[1]
        FMLA            D22, D7, V13.D[1]
      }
      _Q23.f64[0] = v1056[-31].f64[0];
      _Q25 = v1056[-32];
      _Q13 = v1056[-17];
      __asm { FMLA            D22, D17, V31.D[1] }
      _Q31.f64[1] = v1123.f64[1];
      __asm
      {
        FMLA            D20, D7, V31.D[1]
        FMLA            D20, D17, V24.D[1]
        FMLA            D19, D7, V14.D[1]
        FMLA            D19, D17, V21.D[1]
      }
      _Q6.f64[0] = v1056[-16].f64[0];
      __asm
      {
        FMLA            D28, D4, V25.D[1]
        FMLA            D22, D4, V11.D[1]
      }
      v700 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v680, v682, v1123.f64[0]), v684, v1123, 1), v685, _Q24.f64[0]), v687, _Q24, 1), v691, _Q13.f64[0]), v693, _Q13, 1), v694, _Q6.f64[0]);
      __asm
      {
        FMLA            D20, D4, V13.D[1]
        FMLA            D19, D4, V29.D[1]
      }
      v14[37].f64[0] = _Q28.f64[0] + _Q8.f64[0] * _Q23.f64[0];
      v14[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v697, v691, _Q25.f64[0]), v693, _Q25, 1), v694, _Q23.f64[0]);
      v14[44].f64[1] = _Q22.f64[0] + _Q8.f64[0] * _Q10.f64[0];
      v14[52].f64[0] = _Q20.f64[0] + _Q8.f64[0] * _Q6.f64[0];
      v14[51] = v700;
      v14[59].f64[1] = _Q19.f64[0] + _Q8.f64[0] * _Q12.f64[0];
      v701 = v1056[-7];
      v702 = v1056[-8];
      v703 = v1056[-5];
      v704 = v1056[-6];
      v705 = v1056[-3];
      v706 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v707 = v1056[-2];
      v708 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[1], v702.f64[0]), *(float64x2_t *)((char *)v15 + 136), v702, 1), v15[16], v701.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 376),
                                     v701,
                                     1),
                                   v15[31],
                                   v704.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 616),
                                 v704,
                                 1),
                               v15[46],
                               v703.f64[0]),
                             *(float64x2_t *)((char *)v15 + 856),
                             v703,
                             1),
                           v15[61],
                           v706.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1096),
                         v706,
                         1),
                       v15[76],
                       v705.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1336),
                     v705,
                     1),
                   v15[91],
                   v707.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1576),
                 v707,
                 1),
               v15[106],
               _Q4.f64[0]);
      v14[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v702.f64[0]), *(float64x2_t *)((char *)v15 + 120), v702, 1), v15[15], v701.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 360),
                                        v701,
                                        1),
                                      v15[30],
                                      v704.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 600),
                                    v704,
                                    1),
                                  v15[45],
                                  v703.f64[0]),
                                *(float64x2_t *)((char *)v15 + 840),
                                v703,
                                1),
                              v15[60],
                              v706.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1080),
                            v706,
                            1),
                          v15[75],
                          v705.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1320),
                        v705,
                        1),
                      v15[90],
                      v707.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1560),
                    v707,
                    1),
                  v15[105],
                  _Q4.f64[0]);
      v14[61] = v708;
      v709 = v1056[-7];
      v710 = v1056[-8];
      v711 = v1056[-5];
      v712 = v1056[-6];
      v713 = v1056[-3];
      v714 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v715 = v1056[-2];
      v716 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[3], v710.f64[0]), *(float64x2_t *)((char *)v15 + 168), v710, 1), v15[18], v709.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 408),
                                     v709,
                                     1),
                                   v15[33],
                                   v712.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 648),
                                 v712,
                                 1),
                               v15[48],
                               v711.f64[0]),
                             *(float64x2_t *)((char *)v15 + 888),
                             v711,
                             1),
                           v15[63],
                           v714.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1128),
                         v714,
                         1),
                       v15[78],
                       v713.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1368),
                     v713,
                     1),
                   v15[93],
                   v715.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1608),
                 v715,
                 1),
               v15[108],
               _Q4.f64[0]);
      v14[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[2], v710.f64[0]), *(float64x2_t *)((char *)v15 + 152), v710, 1), v15[17], v709.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 392),
                                        v709,
                                        1),
                                      v15[32],
                                      v712.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 632),
                                    v712,
                                    1),
                                  v15[47],
                                  v711.f64[0]),
                                *(float64x2_t *)((char *)v15 + 872),
                                v711,
                                1),
                              v15[62],
                              v714.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1112),
                            v714,
                            1),
                          v15[77],
                          v713.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1352),
                        v713,
                        1),
                      v15[92],
                      v715.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1592),
                    v715,
                    1),
                  v15[107],
                  _Q4.f64[0]);
      v14[63] = v716;
      _Q26 = v1056[-7];
      v718 = v1056[-8];
      v719 = v1056[-5];
      v720 = v1056[-6];
      _Q20 = v1056[-3];
      v722 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v723 = v1056[-2];
      v724 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[4], v718.f64[0]), *(float64x2_t *)((char *)v15 + 184), v718, 1), v15[19], _Q26.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 424),
                                     _Q26,
                                     1),
                                   v15[34],
                                   v720.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 664),
                                 v720,
                                 1),
                               v15[49],
                               v719.f64[0]),
                             *(float64x2_t *)((char *)v15 + 904),
                             v719,
                             1),
                           v15[64],
                           v722.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1144),
                         v722,
                         1),
                       v15[79],
                       _Q20.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1384),
                     _Q20,
                     1),
                   v15[94],
                   v723.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1624),
                 v723,
                 1),
               v15[109],
               _Q4.f64[0]);
      v14[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[5], v718.f64[0]), *(float64x2_t *)((char *)v15 + 200), v718, 1), v15[20], _Q26.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 440),
                                        _Q26,
                                        1),
                                      v15[35],
                                      v720.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 680),
                                    v720,
                                    1),
                                  v15[50],
                                  v719.f64[0]),
                                *(float64x2_t *)((char *)v15 + 920),
                                v719,
                                1),
                              v15[65],
                              v722.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1160),
                            v722,
                            1),
                          v15[80],
                          _Q20.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1400),
                        _Q20,
                        1),
                      v15[95],
                      v723.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1640),
                    v723,
                    1),
                  v15[110],
                  _Q4.f64[0]);
      v14[64] = v724;
      _Q16.f64[0] = v15[14].f64[1];
      _Q20.f64[0] = v15[29].f64[1];
      _Q23.f64[0] = v15[44].f64[1];
      _Q26.f64[0] = v15[59].f64[1];
      _Q29.f64[0] = v15[74].f64[1];
      _Q8.f64[0] = v15[89].f64[1];
      _Q11.f64[0] = v15[104].f64[1];
      _Q14 = v1056[-7];
      _Q15 = v1056[-8];
      v727 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[6], _Q15.f64[0]), *(float64x2_t *)((char *)v15 + 216), _Q15, 1), v15[21], _Q14.f64[0]), *(float64x2_t *)((char *)v15 + 456), _Q14, 1);
      _Q0 = v1056[-5];
      _Q17 = v1056[-3];
      v724.f64[0] = v1056[-1].f64[0];
      __asm { FMLA            D6, D16, V15.D[1] }
      _Q16 = v1056[-6];
      _Q18 = v1056[-4];
      _Q15 = v1056[-2];
      __asm
      {
        FMLA            D6, D20, V14.D[1]
        FMLA            D6, D23, V16.D[1]
        FMLA            D6, D26, V0.D[1]
        FMLA            D6, D29, V18.D[1]
        FMLA            D6, D8, V17.D[1]
      }
      v733 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v727, v15[36], _Q16.f64[0]), *v676, _Q16, 1), v15[51], _Q0.f64[0]), *v678, _Q0, 1), v15[66], _Q18.f64[0]), *v683, _Q18, 1),
                       v15[81],
                       _Q17.f64[0]),
                     *v686,
                     _Q17,
                     1),
                   v15[96],
                   _Q15.f64[0]),
                 *v692,
                 _Q15,
                 1),
               v15[111],
               v724.f64[0]);
      __asm { FMLA            D6, D11, V15.D[1] }
      v14[67].f64[0] = _Q6.f64[0] + v15[112].f64[0] * v724.f64[0];
      v14[66] = v733;
      break;
    case 1:
      for (i = 0; i != 1080; i += 120)
      {
        v735 = *(float64x2_t *)((char *)a10 + i + 752);
        v736 = *(float64x2_t *)((char *)a10 + i + 768);
        v737 = *(float64x2_t *)((char *)a10 + i + 784);
        v738 = *(float64x2_t *)((char *)a10 + i + 800);
        v739 = *(float64x2_t *)((char *)a10 + i + 816);
        a7.f64[0] = a10[52].f64[i / 8];
        a8.f64[0] = a11[8].f64[0];
        v740 = a11[3];
        v741 = a11[4];
        v742 = a11[5];
        v743 = a11[6];
        v744 = a11[7];
        v1131 = vmulq_f64(a7, a8);
        v1130 = vmulq_f64(v739, v744);
        v1129 = vmulq_f64(v738, v743);
        v1128 = vmulq_f64(v737, v742);
        v1127 = vmulq_f64(v736, v741);
        v1126 = vmulq_f64(v735, v740);
        v745 = *(float64x2_t *)((char *)a10 + i + 720);
        v746 = a11[1];
        v1125 = vmulq_f64(*(float64x2_t *)((char *)a10 + i + 736), a11[2]);
        v1124 = vmulq_f64(v745, v746);
        result = memcpy(v1132, v14, sizeof(v1132));
        v747 = (float64x2_t *)&v1132[i];
        v748 = v1125;
        *v747 = v1124;
        v747[1] = v748;
        v749 = v1127;
        v747[2] = v1126;
        v747[3] = v749;
        v750 = v1129;
        v747[4] = v1128;
        v747[5] = v750;
        v747[6] = v1130;
        v747[7].f64[0] = v1131.f64[0];
        v751 = *(float64x2_t *)&v1132[1024];
        v14[67].f64[0] = *(float64_t *)&v1132[1072];
        v14[66] = *(float64x2_t *)&v1132[1056];
        v14[65] = *(float64x2_t *)&v1132[1040];
        v752 = *(float64x2_t *)&v1132[992];
        v14[63] = *(float64x2_t *)&v1132[1008];
        v14[64] = v751;
        v753 = *(float64x2_t *)&v1132[960];
        v14[61] = *(float64x2_t *)&v1132[976];
        v14[62] = v752;
        v754 = *(float64x2_t *)&v1132[928];
        v14[59] = *(float64x2_t *)&v1132[944];
        v14[60] = v753;
        v755 = *(float64x2_t *)&v1132[896];
        v14[57] = *(float64x2_t *)&v1132[912];
        v14[58] = v754;
        v756 = *(float64x2_t *)&v1132[864];
        v14[55] = *(float64x2_t *)&v1132[880];
        v14[56] = v755;
        v757 = *(float64x2_t *)&v1132[832];
        v14[53] = *(float64x2_t *)&v1132[848];
        v14[54] = v756;
        v758 = *(float64x2_t *)&v1132[800];
        v14[51] = *(float64x2_t *)&v1132[816];
        v14[52] = v757;
        v759 = *(float64x2_t *)&v1132[768];
        v14[49] = *(float64x2_t *)&v1132[784];
        v14[50] = v758;
        v760 = *(float64x2_t *)&v1132[736];
        v14[47] = *(float64x2_t *)&v1132[752];
        v14[48] = v759;
        v761 = *(float64x2_t *)&v1132[704];
        v14[45] = *(float64x2_t *)&v1132[720];
        v14[46] = v760;
        v762 = *(float64x2_t *)&v1132[672];
        v14[43] = *(float64x2_t *)&v1132[688];
        v14[44] = v761;
        v763 = *(float64x2_t *)&v1132[640];
        v14[41] = *(float64x2_t *)&v1132[656];
        v14[42] = v762;
        v764 = *(float64x2_t *)&v1132[608];
        v14[39] = *(float64x2_t *)&v1132[624];
        v14[40] = v763;
        v765 = *(float64x2_t *)&v1132[576];
        v14[37] = *(float64x2_t *)&v1132[592];
        v14[38] = v764;
        v766 = *(float64x2_t *)&v1132[544];
        v14[35] = *(float64x2_t *)&v1132[560];
        v14[36] = v765;
        v767 = *(float64x2_t *)&v1132[512];
        v14[33] = *(float64x2_t *)&v1132[528];
        v14[34] = v766;
        v768 = *(float64x2_t *)&v1132[480];
        v14[31] = *(float64x2_t *)&v1132[496];
        v14[32] = v767;
        v769 = *(float64x2_t *)&v1132[448];
        v14[29] = *(float64x2_t *)&v1132[464];
        v14[30] = v768;
        v770 = *(float64x2_t *)&v1132[416];
        v14[27] = *(float64x2_t *)&v1132[432];
        v14[28] = v769;
        v771 = *(float64x2_t *)&v1132[384];
        v14[25] = *(float64x2_t *)&v1132[400];
        v14[26] = v770;
        v772 = *(float64x2_t *)&v1132[352];
        v14[23] = *(float64x2_t *)&v1132[368];
        v14[24] = v771;
        v773 = *(float64x2_t *)&v1132[320];
        v14[21] = *(float64x2_t *)&v1132[336];
        v14[22] = v772;
        v774 = *(float64x2_t *)&v1132[288];
        v14[19] = *(float64x2_t *)&v1132[304];
        v14[20] = v773;
        v775 = *(float64x2_t *)&v1132[256];
        v14[17] = *(float64x2_t *)&v1132[272];
        v14[18] = v774;
        v776 = *(float64x2_t *)&v1132[224];
        v14[15] = *(float64x2_t *)&v1132[240];
        v14[16] = v775;
        v777 = *(float64x2_t *)&v1132[192];
        v14[13] = *(float64x2_t *)&v1132[208];
        v14[14] = v776;
        v778 = *(float64x2_t *)&v1132[160];
        v14[11] = *(float64x2_t *)&v1132[176];
        v14[12] = v777;
        v779 = *(float64x2_t *)&v1132[128];
        v14[9] = *(float64x2_t *)&v1132[144];
        v14[10] = v778;
        v780 = *(float64x2_t *)&v1132[96];
        v14[7] = *(float64x2_t *)&v1132[112];
        v14[8] = v779;
        v781 = *(float64x2_t *)&v1132[64];
        v14[5] = *(float64x2_t *)&v1132[80];
        v14[6] = v780;
        v782 = *(float64x2_t *)&v1132[32];
        v14[3] = *(float64x2_t *)&v1132[48];
        v14[4] = v781;
        v783 = *(float64x2_t *)v1132;
        v14[1] = *(float64x2_t *)&v1132[16];
        v14[2] = v782;
        *v14 = v783;
      }
      break;
    case 2:
      a2.f64[0] = a11[1].f64[0];
      a3.f64[0] = a10[112].f64[0];
      v785 = a10[73];
      v784 = a10[74];
      v787 = a10[71];
      v786 = a10[72];
      v788 = a10[69];
      v789 = a10[70];
      v790 = a10[67];
      v791 = a10[68];
      v792 = a10[65];
      v793 = a10[66];
      v794 = a10[63];
      v795 = a10[64];
      v796 = a10[61];
      v797 = a10[62];
      v798 = a10[59];
      v799 = a10[60];
      v800 = a10[57];
      v801 = a10[58];
      v802 = a10[55];
      v803 = a10[56];
      v804 = a10[53];
      v805 = a10[54];
      v806 = a10[51];
      v807 = a10[52];
      v808 = a10[49];
      v809 = a10[50];
      v811 = a10[47];
      v810 = a10[48];
      v813 = *v14;
      v812 = a10[46];
      v1131 = vmulq_f64(a3, a2);
      v1130 = vmulq_n_f64(v813, a2.f64[0]);
      v1129 = vmulq_n_f64(v812, a2.f64[0]);
      v1128 = vmulq_n_f64(v811, a2.f64[0]);
      v1127 = vmulq_n_f64(v810, a2.f64[0]);
      v1126 = vmulq_n_f64(v808, a2.f64[0]);
      v1125 = vmulq_n_f64(v809, a2.f64[0]);
      v1124 = vmulq_n_f64(v806, a2.f64[0]);
      v1123 = vmulq_n_f64(v807, a2.f64[0]);
      v1122 = vmulq_n_f64(v804, a2.f64[0]);
      v1121 = vmulq_n_f64(v805, a2.f64[0]);
      v1120 = vmulq_n_f64(v802, a2.f64[0]);
      v1119 = vmulq_n_f64(v803, a2.f64[0]);
      v1118 = vmulq_n_f64(v800, a2.f64[0]);
      v1117 = vmulq_n_f64(v801, a2.f64[0]);
      v1116 = vmulq_n_f64(v798, a2.f64[0]);
      v1115 = vmulq_n_f64(v799, a2.f64[0]);
      v1114 = vmulq_n_f64(v796, a2.f64[0]);
      v1113 = vmulq_n_f64(v797, a2.f64[0]);
      v1112 = vmulq_n_f64(v794, a2.f64[0]);
      v1111 = vmulq_n_f64(v795, a2.f64[0]);
      v1110 = vmulq_n_f64(v792, a2.f64[0]);
      v1109 = vmulq_n_f64(v793, a2.f64[0]);
      v1108 = vmulq_n_f64(v790, a2.f64[0]);
      v1107 = vmulq_n_f64(v791, a2.f64[0]);
      v1106 = vmulq_n_f64(v788, a2.f64[0]);
      v1105 = vmulq_n_f64(v789, a2.f64[0]);
      v1104 = vmulq_n_f64(v787, a2.f64[0]);
      v1103 = vmulq_n_f64(v786, a2.f64[0]);
      v1102 = vmulq_n_f64(v785, a2.f64[0]);
      v1101 = vmulq_n_f64(v784, a2.f64[0]);
      v1100 = vmulq_n_f64(a10[75], a2.f64[0]);
      v1099 = vmulq_n_f64(a10[76], a2.f64[0]);
      v1098 = vmulq_n_f64(a10[77], a2.f64[0]);
      v1097 = vmulq_n_f64(a10[78], a2.f64[0]);
      v814 = a10[80];
      v1096 = vmulq_n_f64(a10[79], a2.f64[0]);
      v1095 = vmulq_n_f64(v814, a2.f64[0]);
      v815 = vmulq_n_f64(a10[81], a2.f64[0]);
      v816 = vmulq_n_f64(a10[82], a2.f64[0]);
      v817 = vmulq_n_f64(a10[83], a2.f64[0]);
      v818 = vmulq_n_f64(a10[84], a2.f64[0]);
      v819 = vmulq_n_f64(a10[85], a2.f64[0]);
      v820 = vmulq_n_f64(a10[86], a2.f64[0]);
      v821 = vmulq_n_f64(a10[87], a2.f64[0]);
      v822 = vmulq_n_f64(a10[88], a2.f64[0]);
      v823 = vmulq_n_f64(a10[89], a2.f64[0]);
      v824 = vmulq_n_f64(a10[90], a2.f64[0]);
      v825 = vmulq_n_f64(a10[91], a2.f64[0]);
      v826 = vmulq_n_f64(a10[92], a2.f64[0]);
      v827 = vmulq_n_f64(a10[93], a2.f64[0]);
      v828 = vmulq_n_f64(a10[94], a2.f64[0]);
      v829 = vmulq_n_f64(a10[95], a2.f64[0]);
      v830 = vmulq_n_f64(a10[96], a2.f64[0]);
      v831 = vmulq_n_f64(a10[97], a2.f64[0]);
      v832 = vmulq_n_f64(a10[98], a2.f64[0]);
      v833 = vmulq_n_f64(a10[99], a2.f64[0]);
      v834 = vmulq_n_f64(a10[100], a2.f64[0]);
      v835 = vmulq_n_f64(a10[101], a2.f64[0]);
      v836 = vmulq_n_f64(a10[102], a2.f64[0]);
      v837 = vmulq_n_f64(a10[103], a2.f64[0]);
      v838 = vmulq_n_f64(a10[104], a2.f64[0]);
      v839 = vmulq_n_f64(a10[105], a2.f64[0]);
      v840 = vmulq_n_f64(a10[106], a2.f64[0]);
      v841 = vmulq_n_f64(a10[107], a2.f64[0]);
      v842 = vmulq_n_f64(a10[108], a2.f64[0]);
      v843 = vmulq_n_f64(a10[109], a2.f64[0]);
      v844 = vmulq_n_f64(a10[110], a2.f64[0]);
      a10[111] = vmulq_n_f64(a10[111], a2.f64[0]);
      a10[110] = v844;
      a10[108] = v842;
      a10[109] = v843;
      a10[106] = v840;
      a10[107] = v841;
      a10[104] = v838;
      a10[105] = v839;
      a10[102] = v836;
      a10[103] = v837;
      a10[100] = v834;
      a10[101] = v835;
      a10[98] = v832;
      a10[99] = v833;
      a10[96] = v830;
      a10[97] = v831;
      a10[94] = v828;
      a10[95] = v829;
      a10[92] = v826;
      a10[93] = v827;
      a10[90] = v824;
      a10[91] = v825;
      a10[88] = v822;
      a10[89] = v823;
      a10[86] = v820;
      a10[87] = v821;
      a10[84] = v818;
      a10[85] = v819;
      a10[82] = v816;
      a10[83] = v817;
      a10[80] = v1095;
      a10[81] = v815;
      v845 = v1096;
      a10[78] = v1097;
      a10[79] = v845;
      v846 = v1098;
      a10[76] = v1099;
      a10[77] = v846;
      v847 = v1100;
      a10[74] = v1101;
      a10[75] = v847;
      v848 = v1102;
      a10[72] = v1103;
      a10[73] = v848;
      v849 = v1104;
      a10[70] = v1105;
      a10[71] = v849;
      v850 = v1106;
      a10[68] = v1107;
      a10[69] = v850;
      v851 = v1108;
      a10[66] = v1109;
      a10[67] = v851;
      v852 = v1110;
      a10[64] = v1111;
      a10[65] = v852;
      v853 = v1112;
      a10[62] = v1113;
      a10[63] = v853;
      v854 = v1114;
      a10[60] = v1115;
      a10[61] = v854;
      v855 = v1116;
      a10[58] = v1117;
      a10[59] = v855;
      v856 = v1118;
      a10[56] = v1119;
      a10[57] = v856;
      v857 = v1120;
      a10[54] = v1121;
      a10[55] = v857;
      v858 = v1122;
      a10[52] = v1123;
      a10[53] = v858;
      v859 = v1124;
      a10[50] = v1125;
      a10[51] = v859;
      v860 = v1126;
      a10[48] = v1127;
      a10[49] = v860;
      v861 = v1128;
      a10[46] = v1129;
      a10[47] = v861;
      *v14 = v1130;
      a10[112].f64[0] = v1131.f64[0];
      break;
    case 4:
      *(_QWORD *)&v1131.f64[0] = a10;
      v862 = (*(_QWORD *(**)(_BYTE *__return_ptr, float64x2_t *))(*(_QWORD *)&a11->f64[0] + 56))(v1132, a11);
      MEMORY[0x24BDAC7A8](v862);
      memcpy(&v1056[45], v14, 0x438uLL);
      _V17.D[1] = v1056[45].f64[1];
      _V16.D[1] = v1056[60].f64[1];
      _V15.D[1] = v1056[46].f64[1];
      _V14.D[1] = v1056[47].f64[1];
      _V6.D[1] = v1056[61].f64[1];
      _V3.D[1] = v1056[62].f64[1];
      _V4.D[1] = v1056[48].f64[1];
      _V7.D[1] = v1056[63].f64[1];
      _V5.D[1] = v1056[49].f64[1];
      _V1.D[1] = v1056[64].f64[1];
      _V2.D[1] = v1056[50].f64[1];
      _V0.D[1] = v1056[65].f64[1];
      v1124 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[45].f64[0]), *(float64x2_t *)&v1132[120], v1056[45], 1), *(float64x2_t *)&v1132[240], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[49].f64[0]),
                          v1133,
                          v1056[49],
                          1),
                        v1141,
                        v1056[50].f64[0]),
                      v1148,
                      v1056[50],
                      1),
                    v1156,
                    v1056[51].f64[0]),
                  v1163,
                  v1056[51],
                  1),
                v1171,
                v1056[52].f64[0]);
      v1122 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[45].f64[0]), *(float64x2_t *)&v1132[136], v1056[45], 1), *(float64x2_t *)&v1132[256], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[49].f64[0]),
                          v1134,
                          v1056[49],
                          1),
                        v1142,
                        v1056[50].f64[0]),
                      v1149,
                      v1056[50],
                      1),
                    v1157,
                    v1056[51].f64[0]),
                  v1164,
                  v1056[51],
                  1),
                v1172,
                v1056[52].f64[0]);
      v1123 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[52].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[240], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[56].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1141,
                        v1056[57].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1156,
                    v1056[58].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1171,
                v1056[59].f64[1]);
      v1121 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[52].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[256], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[56].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1142,
                        v1056[57].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1157,
                    v1056[58].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1172,
                v1056[59].f64[1]);
      v1120 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[60].f64[0]), *(float64x2_t *)&v1132[120], v1056[60], 1), *(float64x2_t *)&v1132[240], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[64].f64[0]),
                          v1133,
                          v1056[64],
                          1),
                        v1141,
                        v1056[65].f64[0]),
                      v1148,
                      v1056[65],
                      1),
                    v1156,
                    v1056[66].f64[0]),
                  v1163,
                  v1056[66],
                  1),
                v1171,
                v1056[67].f64[0]);
      v1119 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[60].f64[0]), *(float64x2_t *)&v1132[136], v1056[60], 1), *(float64x2_t *)&v1132[256], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[64].f64[0]),
                          v1134,
                          v1056[64],
                          1),
                        v1142,
                        v1056[65].f64[0]),
                      v1149,
                      v1056[65],
                      1),
                    v1157,
                    v1056[66].f64[0]),
                  v1164,
                  v1056[66],
                  1),
                v1172,
                v1056[67].f64[0]);
      v1116 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[67].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[240], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[71].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1141,
                        v1056[72].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1156,
                    v1056[73].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1171,
                v1056[74].f64[1]);
      v1115 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[67].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[256], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[71].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1142,
                        v1056[72].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1157,
                    v1056[73].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1172,
                v1056[74].f64[1]);
      v1104 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[45].f64[0]), *(float64x2_t *)&v1132[152], v1056[45], 1), *(float64x2_t *)&v1132[272], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[49].f64[0]),
                          v1135,
                          v1056[49],
                          1),
                        v1143,
                        v1056[50].f64[0]),
                      v1150,
                      v1056[50],
                      1),
                    v1158,
                    v1056[51].f64[0]),
                  v1165,
                  v1056[51],
                  1),
                v1173,
                v1056[52].f64[0]);
      v1101 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[45].f64[0]), *(float64x2_t *)&v1132[168], v1056[45], 1), *(float64x2_t *)&v1132[288], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[49].f64[0]),
                          v1136,
                          v1056[49],
                          1),
                        v1144,
                        v1056[50].f64[0]),
                      v1151,
                      v1056[50],
                      1),
                    v1159,
                    v1056[51].f64[0]),
                  v1166,
                  v1056[51],
                  1),
                v1174,
                v1056[52].f64[0]);
      v1102 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[52].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[272], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[56].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1143,
                        v1056[57].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1158,
                    v1056[58].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1173,
                v1056[59].f64[1]);
      v1099 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[52].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[288], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[56].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1144,
                        v1056[57].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1159,
                    v1056[58].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1174,
                v1056[59].f64[1]);
      v1095 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[60].f64[0]), *(float64x2_t *)&v1132[152], v1056[60], 1), *(float64x2_t *)&v1132[272], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[64].f64[0]),
                          v1135,
                          v1056[64],
                          1),
                        v1143,
                        v1056[65].f64[0]),
                      v1150,
                      v1056[65],
                      1),
                    v1158,
                    v1056[66].f64[0]),
                  v1165,
                  v1056[66],
                  1),
                v1173,
                v1056[67].f64[0]);
      v1093 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[60].f64[0]), *(float64x2_t *)&v1132[168], v1056[60], 1), *(float64x2_t *)&v1132[288], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[64].f64[0]),
                          v1136,
                          v1056[64],
                          1),
                        v1144,
                        v1056[65].f64[0]),
                      v1151,
                      v1056[65],
                      1),
                    v1159,
                    v1056[66].f64[0]),
                  v1166,
                  v1056[66],
                  1),
                v1174,
                v1056[67].f64[0]);
      v1089 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[67].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[288], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[71].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1144,
                        v1056[72].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1159,
                    v1056[73].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1174,
                v1056[74].f64[1]);
      v1090 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[67].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[272], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[71].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1143,
                        v1056[72].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1158,
                    v1056[73].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1173,
                v1056[74].f64[1]);
      v1105 = *(float64x2_t *)&v1132[304];
      result = &v1132[664];
      v1103 = *(float64x2_t *)&v1132[544];
      v1100 = *(float64x2_t *)&v1132[664];
      v1094 = *(float64x2_t *)&v1132[784];
      v1092 = *(float64x2_t *)&v1132[904];
      v1091 = v1137;
      v1088 = v1145;
      v1087 = v1152;
      v1086 = v1167;
      v1082 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[52].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[304], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[56].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1145,
                        v1056[57].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1160,
                    v1056[58].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1175,
                v1056[59].f64[1]);
      v1083 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[45].f64[0]), *(float64x2_t *)&v1132[184], v1056[45], 1), *(float64x2_t *)&v1132[304], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[49].f64[0]),
                          v1137,
                          v1056[49],
                          1),
                        v1145,
                        v1056[50].f64[0]),
                      v1152,
                      v1056[50],
                      1),
                    v1160,
                    v1056[51].f64[0]),
                  v1167,
                  v1056[51],
                  1),
                v1175,
                v1056[52].f64[0]);
      v1080 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[52].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[320], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[56].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1146,
                        v1056[57].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1161,
                    v1056[58].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1176,
                v1056[59].f64[1]);
      v1081 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[45].f64[0]), *(float64x2_t *)&v1132[200], v1056[45], 1), *(float64x2_t *)&v1132[320], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[49].f64[0]),
                          v1138,
                          v1056[49],
                          1),
                        v1146,
                        v1056[50].f64[0]),
                      v1153,
                      v1056[50],
                      1),
                    v1161,
                    v1056[51].f64[0]),
                  v1168,
                  v1056[51],
                  1),
                v1176,
                v1056[52].f64[0]);
      v1077 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[60].f64[0]), *(float64x2_t *)&v1132[200], v1056[60], 1), *(float64x2_t *)&v1132[320], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[64].f64[0]),
                          v1138,
                          v1056[64],
                          1),
                        v1146,
                        v1056[65].f64[0]),
                      v1153,
                      v1056[65],
                      1),
                    v1161,
                    v1056[66].f64[0]),
                  v1168,
                  v1056[66],
                  1),
                v1176,
                v1056[67].f64[0]);
      v1078 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[60].f64[0]), *(float64x2_t *)&v1132[184], v1056[60], 1), *(float64x2_t *)&v1132[304], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[64].f64[0]),
                          v1137,
                          v1056[64],
                          1),
                        v1145,
                        v1056[65].f64[0]),
                      v1152,
                      v1056[65],
                      1),
                    v1160,
                    v1056[66].f64[0]),
                  v1167,
                  v1056[66],
                  1),
                v1175,
                v1056[67].f64[0]);
      v1075 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[67].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[320], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[71].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1146,
                        v1056[72].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1161,
                    v1056[73].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1176,
                v1056[74].f64[1]);
      v1076 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[67].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[304], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[71].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1145,
                        v1056[72].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1160,
                    v1056[73].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1175,
                v1056[74].f64[1]);
      _D23 = *(_QWORD *)&v1132[232];
      __asm { FMLA            D18, D23, V17.D[1] }
      _V19.D[1] = v1056[53].f64[0];
      __asm
      {
        FMLA            D17, D23, V19.D[1]
        FMLA            D19, D23, V16.D[1]
      }
      _V24.D[1] = v1056[68].f64[0];
      __asm { FMLA            D16, D23, V24.D[1] }
      v1085 = *(float64x2_t *)&v1132[320];
      _D23 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D18, D23, V15.D[1] }
      _V24.D[1] = v1056[54].f64[0];
      __asm
      {
        FMLA            D17, D23, V24.D[1]
        FMLA            D19, D23, V6.D[1]
      }
      _V6.D[1] = v1056[69].f64[0];
      __asm { FMLA            D16, D23, V6.D[1] }
      _D22 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D18, D22, V14.D[1] }
      _V23.D[1] = v1056[55].f64[0];
      __asm
      {
        FMLA            D17, D22, V23.D[1]
        FMLA            D19, D22, V3.D[1]
      }
      _V3.D[1] = v1056[70].f64[0];
      __asm { FMLA            D16, D22, V3.D[1] }
      v1084 = *(float64x2_t *)&v1132[800];
      _D21 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D18, D21, V4.D[1] }
      _V4.D[1] = v1056[56].f64[0];
      __asm
      {
        FMLA            D17, D21, V4.D[1]
        FMLA            D19, D21, V7.D[1]
      }
      _V4.D[1] = v1056[71].f64[0];
      __asm { FMLA            D16, D21, V4.D[1] }
      _D7 = v1140;
      __asm { FMLA            D18, D7, V5.D[1] }
      _V5.D[1] = v1056[57].f64[0];
      __asm
      {
        FMLA            D17, D7, V5.D[1]
        FMLA            D19, D7, V1.D[1]
      }
      _V1.D[1] = v1056[72].f64[0];
      __asm { FMLA            D16, D7, V1.D[1] }
      v1079 = v1146;
      _D5 = v1155;
      __asm { FMLA            D18, D5, V2.D[1] }
      _V2.D[1] = v1056[58].f64[0];
      __asm
      {
        FMLA            D17, D5, V2.D[1]
        FMLA            D19, D5, V0.D[1]
      }
      _V0.D[1] = v1056[73].f64[0];
      __asm { FMLA            D16, D5, V0.D[1] }
      _V1.D[1] = v1056[51].f64[1];
      _D4 = v1170;
      __asm { FMLA            D18, D4, V1.D[1] }
      _V1.D[1] = v1056[59].f64[0];
      __asm { FMLA            D17, D4, V1.D[1] }
      _V1.D[1] = v1056[66].f64[1];
      __asm { FMLA            D19, D4, V1.D[1] }
      _V1.D[1] = v1056[74].f64[0];
      __asm { FMLA            D16, D4, V1.D[1] }
      v1070 = _D18 + v1178 * v1056[52].f64[0];
      v1073 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[52].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[336], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[56].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1147,
                        v1056[57].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1162,
                    v1056[58].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1177,
                v1056[59].f64[1]);
      v1074 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[45].f64[0]), *(float64x2_t *)&v1132[216], v1056[45], 1), *(float64x2_t *)&v1132[336], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[49].f64[0]),
                          v1139,
                          v1056[49],
                          1),
                        v1147,
                        v1056[50].f64[0]),
                      v1154,
                      v1056[50],
                      1),
                    v1162,
                    v1056[51].f64[0]),
                  v1169,
                  v1056[51],
                  1),
                v1177,
                v1056[52].f64[0]);
      v1069 = _D17 + v1178 * v1056[59].f64[1];
      v1072 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[60].f64[0]), *(float64x2_t *)&v1132[216], v1056[60], 1), *(float64x2_t *)&v1132[336], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[64].f64[0]),
                          v1139,
                          v1056[64],
                          1),
                        v1147,
                        v1056[65].f64[0]),
                      v1154,
                      v1056[65],
                      1),
                    v1162,
                    v1056[66].f64[0]),
                  v1169,
                  v1056[66],
                  1),
                v1177,
                v1056[67].f64[0]);
      v1068 = _D19 + v1178 * v1056[67].f64[0];
      v1066 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[67].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[336], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[71].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1147,
                        v1056[72].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1162,
                    v1056[73].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1177,
                v1056[74].f64[1]);
      v1067 = _D16 + v1178 * v1056[74].f64[1];
      _V18.D[1] = v1056[75].f64[1];
      _V20.D[1] = v1056[83].f64[0];
      v1071 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[75].f64[0]), *(float64x2_t *)&v1132[120], v1056[75], 1), *(float64x2_t *)&v1132[240], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[79].f64[0]),
                          v1133,
                          v1056[79],
                          1),
                        v1141,
                        v1056[80].f64[0]),
                      v1148,
                      v1056[80],
                      1),
                    v1156,
                    v1056[81].f64[0]),
                  v1163,
                  v1056[81],
                  1),
                v1171,
                v1056[82].f64[0]);
      v1063 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[75].f64[0]), *(float64x2_t *)&v1132[136], v1056[75], 1), *(float64x2_t *)&v1132[256], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[79].f64[0]),
                          v1134,
                          v1056[79],
                          1),
                        v1142,
                        v1056[80].f64[0]),
                      v1149,
                      v1056[80],
                      1),
                    v1157,
                    v1056[81].f64[0]),
                  v1164,
                  v1056[81],
                  1),
                v1172,
                v1056[82].f64[0]);
      v928 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[82].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[256], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[86].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1142,
                       v1056[87].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1157,
                   v1056[88].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1172,
               v1056[89].f64[1]);
      v1059 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[90].f64[0]), *(float64x2_t *)&v1132[120], v1056[90], 1), *(float64x2_t *)&v1132[240], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[94].f64[0]),
                          v1133,
                          v1056[94],
                          1),
                        v1141,
                        v1056[95].f64[0]),
                      v1148,
                      v1056[95],
                      1),
                    v1156,
                    v1056[96].f64[0]),
                  v1163,
                  v1056[96],
                  1),
                v1171,
                v1056[97].f64[0]);
      v1057 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[82].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[240], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[86].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1141,
                        v1056[87].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1156,
                    v1056[88].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1171,
                v1056[89].f64[1]);
      v1058 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[90].f64[0]), *(float64x2_t *)&v1132[136], v1056[90], 1), *(float64x2_t *)&v1132[256], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[94].f64[0]),
                          v1134,
                          v1056[94],
                          1),
                        v1142,
                        v1056[95].f64[0]),
                      v1149,
                      v1056[95],
                      1),
                    v1157,
                    v1056[96].f64[0]),
                  v1164,
                  v1056[96],
                  1),
                v1172,
                v1056[97].f64[0]);
      _Q14 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[97].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[240], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[360],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[480],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[600],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[720],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[840],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[960],
                           v1056[101].f64[1]),
                         v1133,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1141,
                       v1056[102].f64[1]),
                     v1148,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1156,
                   v1056[103].f64[1]),
                 v1163,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1171,
               v1056[104].f64[1]);
      v930 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[97].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[256], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[101].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1142,
                       v1056[102].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1157,
                   v1056[103].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1172,
               v1056[104].f64[1]);
      v931 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[75].f64[0]), *(float64x2_t *)&v1132[152], v1056[75], 1), *(float64x2_t *)&v1132[272], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[79].f64[0]),
                         v1135,
                         v1056[79],
                         1),
                       v1143,
                       v1056[80].f64[0]),
                     v1150,
                     v1056[80],
                     1),
                   v1158,
                   v1056[81].f64[0]),
                 v1165,
                 v1056[81],
                 1),
               v1173,
               v1056[82].f64[0]);
      _Q11 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[75].f64[0]), *(float64x2_t *)&v1132[168], v1056[75], 1), *(float64x2_t *)&v1132[288], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[79].f64[0]),
                         v1136,
                         v1056[79],
                         1),
                       v1144,
                       v1056[80].f64[0]),
                     v1151,
                     v1056[80],
                     1),
                   v1159,
                   v1056[81].f64[0]),
                 v1166,
                 v1056[81],
                 1),
               v1174,
               v1056[82].f64[0]);
      _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[82].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[272], v1056[83].f64[1]),
                                    *(float64x2_t *)&v1132[392],
                                    *(float64x2_t *)((char *)&v1056[83] + 8),
                                    1),
                                  *(float64x2_t *)&v1132[512],
                                  v1056[84].f64[1]),
                                *(float64x2_t *)&v1132[632],
                                *(float64x2_t *)((char *)&v1056[84] + 8),
                                1),
                              *(float64x2_t *)&v1132[752],
                              v1056[85].f64[1]),
                            *(float64x2_t *)&v1132[872],
                            *(float64x2_t *)((char *)&v1056[85] + 8),
                            1),
                          *(float64x2_t *)&v1132[992],
                          v1056[86].f64[1]),
                        v1135,
                        *(float64x2_t *)((char *)&v1056[86] + 8),
                        1),
                      v1143,
                      v1056[87].f64[1]),
                    v1150,
                    *(float64x2_t *)((char *)&v1056[87] + 8),
                    1),
                  v1158,
                  v1056[88].f64[1]),
                v1165,
                *(float64x2_t *)((char *)&v1056[88] + 8),
                1),
              v1173,
              v1056[89].f64[1]);
      v934 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[82].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[288], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[86].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1144,
                       v1056[87].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1159,
                   v1056[88].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1174,
               v1056[89].f64[1]);
      _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[90].f64[0]), *(float64x2_t *)&v1132[152], v1056[90], 1), *(float64x2_t *)&v1132[272], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[94].f64[0]),
                         v1135,
                         v1056[94],
                         1),
                       v1143,
                       v1056[95].f64[0]),
                     v1150,
                     v1056[95],
                     1),
                   v1158,
                   v1056[96].f64[0]),
                 v1165,
                 v1056[96],
                 1),
               v1173,
               v1056[97].f64[0]);
      v936 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[90].f64[0]), *(float64x2_t *)&v1132[168], v1056[90], 1), *(float64x2_t *)&v1132[288], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[94].f64[0]),
                         v1136,
                         v1056[94],
                         1),
                       v1144,
                       v1056[95].f64[0]),
                     v1151,
                     v1056[95],
                     1),
                   v1159,
                   v1056[96].f64[0]),
                 v1166,
                 v1056[96],
                 1),
               v1174,
               v1056[97].f64[0]);
      _Q30 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[97].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[272], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[392],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[632],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[872],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[101].f64[1]),
                         v1135,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1143,
                       v1056[102].f64[1]),
                     v1150,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1158,
                   v1056[103].f64[1]),
                 v1165,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1173,
               v1056[104].f64[1]);
      v938 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[97].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[288], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[101].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1144,
                       v1056[102].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1159,
                   v1056[103].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1174,
               v1056[104].f64[1]);
      v1065 = *(float64x2_t *)&v1132[560];
      v1180 = &v1056[84].f64[1];
      _Q28 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[75].f64[0]), *(float64x2_t *)&v1132[184], v1056[75], 1), *(float64x2_t *)&v1132[304], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[79].f64[0]),
                         v1137,
                         v1056[79],
                         1),
                       v1145,
                       v1056[80].f64[0]),
                     v1152,
                     v1056[80],
                     1),
                   v1160,
                   v1056[81].f64[0]),
                 v1167,
                 v1056[81],
                 1),
               v1175,
               v1056[82].f64[0]);
      v940 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[75].f64[0]), *(float64x2_t *)&v1132[200], v1056[75], 1), *(float64x2_t *)&v1132[320], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[79].f64[0]),
                         v1138,
                         v1056[79],
                         1),
                       v1146,
                       v1056[80].f64[0]),
                     v1153,
                     v1056[80],
                     1),
                   v1161,
                   v1056[81].f64[0]),
                 v1168,
                 v1056[81],
                 1),
               v1176,
               v1056[82].f64[0]);
      v941 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[82].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[304], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[86].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1145,
                       v1056[87].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1160,
                   v1056[88].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1175,
               v1056[89].f64[1]);
      v942 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[82].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[320], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[86].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1146,
                       v1056[87].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1161,
                   v1056[88].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1176,
               v1056[89].f64[1]);
      v943 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[90].f64[0]), *(float64x2_t *)&v1132[184], v1056[90], 1), *(float64x2_t *)&v1132[304], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[94].f64[0]),
                         v1137,
                         v1056[94],
                         1),
                       v1145,
                       v1056[95].f64[0]),
                     v1152,
                     v1056[95],
                     1),
                   v1160,
                   v1056[96].f64[0]),
                 v1167,
                 v1056[96],
                 1),
               v1175,
               v1056[97].f64[0]);
      v944 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[90].f64[0]), *(float64x2_t *)&v1132[200], v1056[90], 1), *(float64x2_t *)&v1132[320], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[94].f64[0]),
                         v1138,
                         v1056[94],
                         1),
                       v1146,
                       v1056[95].f64[0]),
                     v1153,
                     v1056[95],
                     1),
                   v1161,
                   v1056[96].f64[0]),
                 v1168,
                 v1056[96],
                 1),
               v1176,
               v1056[97].f64[0]);
      v945 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[97].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[304], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[101].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1145,
                       v1056[102].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1160,
                   v1056[103].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1175,
               v1056[104].f64[1]);
      v946 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[97].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[320], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[101].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1146,
                       v1056[102].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1161,
                   v1056[103].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1176,
               v1056[104].f64[1]);
      _D16 = *(_QWORD *)&v1132[232];
      __asm
      {
        FMLA            D0, D16, V18.D[1]
        FMLA            D1, D16, V20.D[1]
      }
      _V17.D[1] = v1056[90].f64[1];
      __asm { FMLA            D4, D16, V17.D[1] }
      _V17.D[1] = v1056[98].f64[0];
      __asm { FMLA            D5, D16, V17.D[1] }
      _V2.D[1] = v1056[76].f64[1];
      _D7 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D0, D7, V2.D[1] }
      _V2.D[1] = v1056[84].f64[0];
      __asm { FMLA            D1, D7, V2.D[1] }
      _V2.D[1] = v1056[91].f64[1];
      __asm { FMLA            D4, D7, V2.D[1] }
      _V2.D[1] = v1056[99].f64[0];
      __asm { FMLA            D5, D7, V2.D[1] }
      _V18.D[1] = v1056[77].f64[1];
      _D17 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[85].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[92].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[100].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[78].f64[1];
      _D17 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[86].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[93].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[101].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[79].f64[1];
      _D17 = v1140;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[87].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[94].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[102].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[80].f64[1];
      _D17 = v1155;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[88].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[95].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[103].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V7.D[1] = v1056[81].f64[1];
      _D18 = v1170;
      __asm { FMLA            D0, D18, V7.D[1] }
      _V7.D[1] = v1056[89].f64[0];
      __asm { FMLA            D1, D18, V7.D[1] }
      _V7.D[1] = v1056[96].f64[1];
      __asm { FMLA            D4, D18, V7.D[1] }
      _V7.D[1] = v1056[104].f64[0];
      __asm { FMLA            D5, D18, V7.D[1] }
      v1008 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[75].f64[0]), *(float64x2_t *)&v1132[216], v1056[75], 1), *(float64x2_t *)&v1132[336], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[79].f64[0]),
                          v1139,
                          v1056[79],
                          1),
                        v1147,
                        v1056[80].f64[0]),
                      v1154,
                      v1056[80],
                      1),
                    v1162,
                    v1056[81].f64[0]),
                  v1169,
                  v1056[81],
                  1),
                v1177,
                v1056[82].f64[0]);
      v1060 = _D0 + v1178 * v1056[82].f64[0];
      v1009 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[82].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[336], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[86].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1147,
                        v1056[87].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1162,
                    v1056[88].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1177,
                v1056[89].f64[1]);
      v1061 = _D1 + v1178 * v1056[89].f64[1];
      v1010 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[90].f64[0]), *(float64x2_t *)&v1132[216], v1056[90], 1), *(float64x2_t *)&v1132[336], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[94].f64[0]),
                          v1139,
                          v1056[94],
                          1),
                        v1147,
                        v1056[95].f64[0]),
                      v1154,
                      v1056[95],
                      1),
                    v1162,
                    v1056[96].f64[0]),
                  v1169,
                  v1056[96],
                  1),
                v1177,
                v1056[97].f64[0]);
      v1062 = _D4 + v1178 * v1056[97].f64[0];
      v1011 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[97].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[336], v1056[98].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[98] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[99].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[99] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[100].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[100] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[101].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[101] + 8),
                          1),
                        v1147,
                        v1056[102].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[102] + 8),
                      1),
                    v1162,
                    v1056[103].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[103] + 8),
                  1),
                v1177,
                v1056[104].f64[1]);
      v1064 = _D5 + v1178 * v1056[104].f64[1];
      v1012 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[105].f64[0]), *(float64x2_t *)&v1132[120], v1056[105], 1), *(float64x2_t *)&v1132[240], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[109].f64[0]),
                          v1133,
                          v1056[109],
                          1),
                        v1141,
                        v1056[110].f64[0]),
                      v1148,
                      v1056[110],
                      1),
                    v1156,
                    v1056[111].f64[0]),
                  v1163,
                  v1056[111],
                  1),
                v1171,
                v1056[112].f64[0]);
      v1013 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[105].f64[0]), *(float64x2_t *)&v1132[136], v1056[105], 1), *(float64x2_t *)&v1132[256], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[109].f64[0]),
                          v1134,
                          v1056[109],
                          1),
                        v1142,
                        v1056[110].f64[0]),
                      v1149,
                      v1056[110],
                      1),
                    v1157,
                    v1056[111].f64[0]),
                  v1164,
                  v1056[111],
                  1),
                v1172,
                v1056[112].f64[0]);
      v1014 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[105].f64[0]), *(float64x2_t *)&v1132[152], v1056[105], 1), *(float64x2_t *)&v1132[272], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[109].f64[0]),
                          v1135,
                          v1056[109],
                          1),
                        v1143,
                        v1056[110].f64[0]),
                      v1150,
                      v1056[110],
                      1),
                    v1158,
                    v1056[111].f64[0]),
                  v1165,
                  v1056[111],
                  1),
                v1173,
                v1056[112].f64[0]);
      v1015 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[105].f64[0]), *(float64x2_t *)&v1132[168], v1056[105], 1), *(float64x2_t *)&v1132[288], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[109].f64[0]),
                          v1136,
                          v1056[109],
                          1),
                        v1144,
                        v1056[110].f64[0]),
                      v1151,
                      v1056[110],
                      1),
                    v1159,
                    v1056[111].f64[0]),
                  v1166,
                  v1056[111],
                  1),
                v1174,
                v1056[112].f64[0]);
      v1016 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[105].f64[0]), *(float64x2_t *)&v1132[184], v1056[105], 1);
      v1017 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[105].f64[0]), *(float64x2_t *)&v1132[200], v1056[105], 1);
      v1018 = v1115;
      *(float64x2_t *)((char *)v14 + 360) = v1116;
      *(float64x2_t *)((char *)v14 + 376) = v1018;
      v1019 = v1089;
      *(float64x2_t *)((char *)v14 + 392) = v1090;
      *(float64x2_t *)((char *)v14 + 408) = v1019;
      v1020 = v1075;
      *(float64x2_t *)((char *)v14 + 424) = v1076;
      *(float64x2_t *)((char *)v14 + 440) = v1020;
      *(float64x2_t *)((char *)v14 + 456) = v1066;
      *(float64x2_t *)((char *)v14 + 600) = v1057;
      *(float64x2_t *)((char *)v14 + 616) = v928;
      *(float64x2_t *)((char *)v14 + 840) = _Q14;
      *(float64x2_t *)((char *)v14 + 856) = v930;
      *(float64x2_t *)((char *)v14 + 632) = _Q8;
      *(float64x2_t *)((char *)v14 + 648) = v934;
      *(float64x2_t *)((char *)v14 + 872) = _Q30;
      *(float64x2_t *)((char *)v14 + 888) = v938;
      *(float64x2_t *)((char *)v14 + 664) = v941;
      *(float64x2_t *)((char *)v14 + 680) = v942;
      v1021 = v1131.f64[0];
      v1022 = v1119;
      *(float64x2_t *)(*(_QWORD *)&v1131.f64[0] + 960) = v1120;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 976) = v1022;
      v1023 = v1093;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 992) = v1095;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1008) = v1023;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1040) = v1077;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1024) = v1078;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1456) = v1058;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1440) = v1059;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1488) = v936;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1472) = _Q10;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1520) = v944;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1504) = v943;
      *(float64x2_t *)((char *)v14 + 904) = v945;
      *(float64x2_t *)((char *)v14 + 920) = v946;
      *(float64x2_t *)((char *)v14 + 696) = v1009;
      *(float64x2_t *)((char *)v14 + 936) = v1011;
      v1024 = v1122;
      *v14 = v1124;
      v14[1] = v1024;
      *(float64x2_t *)((char *)v14 + 136) = v1121;
      *(float64x2_t *)((char *)v14 + 120) = v1123;
      v1025 = v1101;
      v14[2] = v1104;
      v14[3] = v1025;
      *(float64x2_t *)((char *)v14 + 168) = v1099;
      *(float64x2_t *)((char *)v14 + 152) = v1102;
      v1026 = v1081;
      v14[4] = v1083;
      v14[5] = v1026;
      *(float64x2_t *)((char *)v14 + 200) = v1080;
      *(float64x2_t *)((char *)v14 + 184) = v1082;
      v14[6] = v1074;
      v14[7].f64[0] = v1070;
      *(float64x2_t *)((char *)v14 + 216) = v1073;
      v14[14].f64[1] = v1069;
      v14[21] = v1072;
      v14[22].f64[0] = v1068;
      v14[29].f64[1] = v1067;
      _Q22 = *(float64x2_t *)&v1132[680];
      v1028 = v1063;
      v1029 = *(float64x2_t *)&v1132[920];
      v14[30] = v1071;
      v14[31] = v1028;
      v1030 = v1138;
      v14[32] = v931;
      v14[33] = _Q11;
      _Q3 = v1153;
      _Q6 = v1168;
      v14[34] = _Q28;
      v14[35] = v940;
      v1033 = *(float64x2_t *)&v1132[216];
      v1034 = *(float64x2_t *)&v1132[696];
      v14[36] = v1008;
      v1035 = *(float64x2_t *)&v1132[936];
      v944.f64[0] = v1061;
      v14[37].f64[0] = v1060;
      v1036 = v1139;
      v14[44].f64[1] = v944.f64[0];
      v1037 = v1154;
      v14[51] = v1010;
      v1038 = v1169;
      _Q10.f64[0] = *(float64_t *)&v1132[232];
      v1039 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1017, v1085, v1056[106].f64[0]), *(float64x2_t *)&v1132[440], v1056[106], 1), v1065, v1056[107].f64[0]), _Q22, v1056[107], 1), v1084, v1056[108].f64[0]),
                        v1029,
                        v1056[108],
                        1),
                      *(float64x2_t *)&v1132[1040],
                      v1056[109].f64[0]),
                    v1030,
                    v1056[109],
                    1),
                  v1079,
                  v1056[110].f64[0]),
                _Q3,
                v1056[110],
                1);
      _Q3.f64[0] = *(float64_t *)&v1132[472];
      _Q22.f64[1] = v1056[106].f64[1];
      _Q30.f64[1] = v1056[105].f64[1];
      v1040 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1016, v1105, v1056[106].f64[0]), *(float64x2_t *)&v1132[424], v1056[106], 1), v1103, v1056[107].f64[0]), v1100, v1056[107],
                                  1),
                                v1094,
                                v1056[108].f64[0]),
                              v1092,
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[109].f64[0]),
                          v1091,
                          v1056[109],
                          1),
                        v1088,
                        v1056[110].f64[0]),
                      v1087,
                      v1056[110],
                      1),
                    v1160,
                    v1056[111].f64[0]),
                  v1086,
                  v1056[111],
                  1),
                v1175,
                v1056[112].f64[0]);
      v1041 = *(float64x2_t *)&v1132[576];
      v1042 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1039, v1161, v1056[111].f64[0]), _Q6, v1056[111], 1), v1176, v1056[112].f64[0]);
      _Q6.f64[0] = *(float64_t *)&v1132[712];
      v1043 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[105].f64[0]), v1033, v1056[105], 1);
      v1044 = *(float64x2_t *)&v1132[816];
      _Q28.f64[0] = *(float64_t *)&v1132[952];
      v1045 = vmlaq_laneq_f64(vmlaq_n_f64(v1043, *(float64x2_t *)&v1132[336], v1056[106].f64[0]), *(float64x2_t *)&v1132[456], v1056[106], 1);
      v1046 = *(float64x2_t *)&v1132[1056];
      __asm { FMLA            D8, D10, V30.D[1] }
      _Q30.f64[0] = v1140;
      __asm { FMLA            D8, D3, V22.D[1] }
      v1047 = v1147;
      _Q22.f64[0] = v1155;
      v1048 = v1162;
      _Q11.f64[0] = v1170;
      v931.f64[0] = v1178;
      v1049 = v1177;
      v14[52].f64[0] = v1062;
      _Q14.f64[1] = v1056[107].f64[1];
      v1050 = vmlaq_n_f64(v1045, v1041, v1056[107].f64[0]);
      _Q31 = v1056[108];
      v1052 = vmlaq_laneq_f64(v1050, v1034, v1056[107], 1);
      _Q18 = v1056[110];
      v1034.f64[0] = v1056[112].f64[0];
      __asm { FMLA            D8, D6, V14.D[1] }
      _Q6 = v1056[109];
      _Q14 = v1056[111];
      v14[59].f64[1] = v1064;
      v14[60] = v1012;
      v14[61] = v1013;
      v14[62] = v1014;
      v14[63] = v1015;
      v14[65] = v1042;
      v14[64] = v1040;
      __asm
      {
        FMLA            D8, D28, V31.D[1]
        FMLA            D8, D30, V6.D[1]
        FMLA            D8, D22, V18.D[1]
      }
      v14[66] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1052, v1044, _Q31.f64[0]), v1035, _Q31, 1), v1046, _Q6.f64[0]), v1036, _Q6, 1), v1047, _Q18.f64[0]), v1037, _Q18, 1), v1048, _Q14.f64[0]),
                    v1038,
                    _Q14,
                    1),
                  v1049,
                  v1034.f64[0]);
      __asm { FMLA            D8, D11, V14.D[1] }
      v14[67].f64[0] = _Q8.f64[0] + v931.f64[0] * v1034.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

float64x2_t *sub_20F562084(float64x2_t *result, int a2, float64x2_t *__src, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, float64x2_t a10, float64x2_t *a11, int a12)
{
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v334;
  float64x2_t v336;
  float64x2_t v339;
  float64x2_t v344;
  float64x2_t v346;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v359;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v551;
  float64x2_t v553;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v568;
  float64x2_t v570;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  unint64_t i;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t *v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  double v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  _QWORD *v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v756;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773[115];
  float64_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  double v789;
  double v790;
  double v791;
  double v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810[45];
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64_t v878;
  uint64_t v879;

  v879 = *MEMORY[0x24BDAC8D0];
  v14 = __src + 17;
  switch(a12)
  {
    case 0:
      v15 = a11 + 1;
      if (&__src[45] > &a11[1] && (float64x2_t *)&a11[113].f64[1] > __src)
      {
        MEMORY[0x24BDAC7A8](result);
        result = (float64x2_t *)memcpy(v773, v15, 0x708uLL);
        v15 = v773;
      }
      MEMORY[0x24BDAC7A8](result);
      v16 = &v773[-45];
      memcpy(&v773[-45], __src, 0x2D0uLL);
      v17 = v15[1];
      v18 = *(float64x2_t *)((char *)v15 + 136);
      v19 = *(float64x2_t *)((char *)v15 + 120);
      v21 = v15[15];
      v20 = v15[16];
      v22 = *(float64x2_t *)((char *)v15 + 376);
      v23 = *(float64x2_t *)((char *)v15 + 360);
      v24 = v773[-44];
      v25 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v26 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v27 = v773[-30];
      v28 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v29 = *(float64x2_t *)((char *)&v773[-23] + 8);
      _Q24 = v773[-45];
      v31 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v16->f64[0]), v19, *v16, 1), v21, v24.f64[0]), v23, v24, 1);
      v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v16->f64[0]), v18, *v16, 1), v20, v24.f64[0]), v22, v24, 1);
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v26.f64[0]), v19, v26, 1), v21, v25.f64[0]), v23, v25, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v26.f64[0]), v18, v26, 1), v20, v25.f64[0]), v22, v25, 1);
      _Q20 = v27;
      v36 = v773[-29];
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v27.f64[0]), v19, v27, 1), v21, v36.f64[0]), v23, v36, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v27.f64[0]), v18, v27, 1), v20, v36.f64[0]), v22, v36, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v29.f64[0]), v19, v29, 1), v21, v28.f64[0]), v23, v28, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v29.f64[0]), v18, v29, 1), v20, v28.f64[0]), v22, v28, 1);
      v42 = v15[30];
      v41 = v15[31];
      v44 = *(float64x2_t *)((char *)v15 + 600);
      v43 = *(float64x2_t *)((char *)v15 + 616);
      v46 = v15[45];
      v45 = v15[46];
      v48 = *(float64x2_t *)((char *)v15 + 840);
      v47 = *(float64x2_t *)((char *)v15 + 856);
      v49 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v50 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v51 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v52 = *(float64x2_t *)((char *)&v773[-21] + 8);
      _Q1 = v773[-44];
      v54 = v773[-43];
      _Q2 = v54;
      v56 = v773[-42];
      v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v54.f64[0]), v44, v54, 1), v46, v56.f64[0]), v48, v56, 1);
      v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v32, v41, v54.f64[0]), v43, v54, 1), v45, v56.f64[0]), v47, v56, 1);
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v50.f64[0]), v44, v50, 1), v46, v49.f64[0]), v48, v49, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v41, v50.f64[0]), v43, v50, 1), v45, v49.f64[0]), v47, v49, 1);
      _Q4 = v773[-29];
      v62 = v773[-28];
      _Q3 = v62;
      v64 = v773[-27];
      v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, v42, v62.f64[0]), v44, v62, 1), v46, v64.f64[0]), v48, v64, 1);
      v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, v41, v62.f64[0]), v43, v62, 1), v45, v64.f64[0]), v47, v64, 1);
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v42, v52.f64[0]), v44, v52, 1), v46, v51.f64[0]), v48, v51, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v41, v52.f64[0]), v43, v52, 1), v45, v51.f64[0]), v47, v51, 1);
      v70 = v15[60];
      v69 = v15[61];
      v72 = *(float64x2_t *)((char *)v15 + 1080);
      v71 = *(float64x2_t *)((char *)v15 + 1096);
      v73 = v15[76];
      v74 = v15[75];
      v75 = *(float64x2_t *)((char *)v15 + 1320);
      v76 = *(float64x2_t *)((char *)v15 + 1336);
      v77 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v78 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v79 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v80 = *(float64x2_t *)((char *)&v773[-19] + 8);
      _Q5 = v773[-42];
      _Q7 = v773[-41];
      v83 = v773[-40];
      v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v57, v70, _Q7.f64[0]), v72, _Q7, 1), v74, v83.f64[0]), v75, v83, 1);
      v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, _Q7.f64[0]), v71, _Q7, 1), v73, v83.f64[0]), v76, v83, 1);
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v70, v78.f64[0]), v72, v78, 1), v74, v77.f64[0]), v75, v77, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v78.f64[0]), v71, v78, 1), v73, v77.f64[0]), v76, v77, 1);
      _Q18 = v773[-27];
      _Q6 = v773[-26];
      v90 = v773[-25];
      v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, v70, _Q6.f64[0]), v72, _Q6, 1), v74, v90.f64[0]), v75, v90, 1);
      v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v69, _Q6.f64[0]), v71, _Q6, 1), v73, v90.f64[0]), v76, v90, 1);
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v70, v80.f64[0]), v72, v80, 1), v74, v79.f64[0]), v75, v79, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v69, v80.f64[0]), v71, v80, 1), v73, v79.f64[0]), v76, v79, 1);
      v95 = v15[91];
      v96 = v15[90];
      v98 = *(float64x2_t *)((char *)v15 + 1560);
      v97 = *(float64x2_t *)((char *)v15 + 1576);
      v99 = v15[106];
      v100 = v15[105];
      v69.f64[0] = v773[-38].f64[0];
      v75.f64[0] = v773[-31].f64[1];
      v101 = *(float64x2_t *)((char *)&v773[-32] + 8);
      _Q17 = v773[-40];
      v102 = v773[-39];
      v104 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v96, v102.f64[0]), v98, v102, 1);
      v105 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v95, v102.f64[0]), v97, v102, 1);
      v102.f64[0] = v773[-23].f64[0];
      v106 = vmlaq_n_f64(v104, v100, v69.f64[0]);
      v107 = vmlaq_n_f64(v105, v99, v69.f64[0]);
      v108 = v773[-16].f64[1];
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v86, v96, v101.f64[0]), v98, v101, 1), v100, v75.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v95, v101.f64[0]), v97, v101, 1), v99, v75.f64[0]);
      _Q16 = v773[-25];
      v111 = v773[-24];
      v113 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v96, v111.f64[0]), v98, v111, 1);
      v114 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v95, v111.f64[0]), v97, v111, 1);
      v115 = *(float64x2_t *)((char *)&v773[-17] + 8);
      *__src = v106;
      __src[1] = v107;
      *(float64x2_t *)((char *)__src + 136) = v110;
      *(float64x2_t *)((char *)__src + 120) = v109;
      __src[15] = vmlaq_n_f64(v113, v100, v102.f64[0]);
      __src[16] = vmlaq_n_f64(v114, v99, v102.f64[0]);
      *(float64x2_t *)((char *)v14 + 104) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v95, v115.f64[0]), v97, v115, 1), v99, v108);
      *(float64x2_t *)((char *)v14 + 88) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v96, v115.f64[0]), v98, v115, 1), v100, v108);
      v116 = v15[2];
      v117 = v15[3];
      v118 = *(float64x2_t *)((char *)v15 + 168);
      v119 = *(float64x2_t *)((char *)v15 + 152);
      v121 = v15[17];
      v120 = v15[18];
      v122 = *(float64x2_t *)((char *)v15 + 408);
      v123 = *(float64x2_t *)((char *)v15 + 392);
      v124 = v773[-44];
      v125 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v126 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v128 = v773[-30];
      v127 = v773[-29];
      v129 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v16->f64[0]), v119, *v16, 1), v121, v124.f64[0]), v123, v124, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v16->f64[0]), v118, *v16, 1), v120, v124.f64[0]), v122, v124, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v126.f64[0]), v119, v126, 1), v121, v125.f64[0]), v123, v125, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v126.f64[0]), v118, v126, 1), v120, v125.f64[0]), v122, v125, 1);
      v134 = vmlaq_laneq_f64(vmulq_n_f64(v116, v128.f64[0]), v119, v128, 1);
      v135 = vmlaq_laneq_f64(vmulq_n_f64(v117, v128.f64[0]), v118, v128, 1);
      v136 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v137 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v121, v127.f64[0]), v123, v127, 1);
      v138 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v120, v127.f64[0]), v122, v127, 1);
      v139 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v136.f64[0]), v119, v136, 1), v121, v129.f64[0]), v123, v129, 1);
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v136.f64[0]), v118, v136, 1), v120, v129.f64[0]), v122, v129, 1);
      v142 = v15[32];
      v141 = v15[33];
      v144 = *(float64x2_t *)((char *)v15 + 632);
      v143 = *(float64x2_t *)((char *)v15 + 648);
      v146 = v15[47];
      v145 = v15[48];
      v148 = *(float64x2_t *)((char *)v15 + 872);
      v147 = *(float64x2_t *)((char *)v15 + 888);
      v149 = v773[-43];
      v150 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v142, v149.f64[0]), v144, v149, 1);
      v151 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v141, v149.f64[0]), v143, v149, 1);
      v152 = v773[-42];
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v150, v146, v152.f64[0]), v148, v152, 1);
      v154 = vmlaq_laneq_f64(vmlaq_n_f64(v151, v145, v152.f64[0]), v147, v152, 1);
      v155 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v142, v155.f64[0]), v144, v155, 1);
      v157 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v141, v155.f64[0]), v143, v155, 1);
      v158 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v146, v158.f64[0]), v148, v158, 1);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v145, v158.f64[0]), v147, v158, 1);
      v161 = v773[-28];
      v162 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v142, v161.f64[0]), v144, v161, 1);
      v163 = vmlaq_laneq_f64(vmlaq_n_f64(v138, v141, v161.f64[0]), v143, v161, 1);
      v164 = v773[-27];
      v165 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v146, v164.f64[0]), v148, v164, 1);
      v166 = vmlaq_laneq_f64(vmlaq_n_f64(v163, v145, v164.f64[0]), v147, v164, 1);
      v167 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v168 = vmlaq_n_f64(v139, v142, v167.f64[0]);
      v169 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v170 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v168, v144, v167, 1), v146, v169.f64[0]), v148, v169, 1);
      v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v140, v141, v167.f64[0]), v143, v167, 1), v145, v169.f64[0]), v147, v169, 1);
      v173 = v15[62];
      v172 = v15[63];
      v175 = *(float64x2_t *)((char *)v15 + 1112);
      v174 = *(float64x2_t *)((char *)v15 + 1128);
      v176 = v15[78];
      v177 = v15[77];
      v179 = *(float64x2_t *)((char *)v15 + 1352);
      v178 = *(float64x2_t *)((char *)v15 + 1368);
      v180 = v773[-41];
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v173, v180.f64[0]), v175, v180, 1);
      v182 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v172, v180.f64[0]), v174, v180, 1);
      v183 = v773[-40];
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v177, v183.f64[0]), v179, v183, 1);
      v185 = vmlaq_laneq_f64(vmlaq_n_f64(v182, v176, v183.f64[0]), v178, v183, 1);
      v186 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v173, v186.f64[0]), v175, v186, 1);
      v188 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v172, v186.f64[0]), v174, v186, 1);
      v189 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v190 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v177, v189.f64[0]), v179, v189, 1);
      v191 = vmlaq_laneq_f64(vmlaq_n_f64(v188, v176, v189.f64[0]), v178, v189, 1);
      v192 = v773[-26];
      v193 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v173, v192.f64[0]), v175, v192, 1);
      v194 = vmlaq_laneq_f64(vmlaq_n_f64(v166, v172, v192.f64[0]), v174, v192, 1);
      v195 = v773[-25];
      v196 = vmlaq_laneq_f64(vmlaq_n_f64(v193, v177, v195.f64[0]), v179, v195, 1);
      v197 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v176, v195.f64[0]), v178, v195, 1);
      v198 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v199 = vmlaq_n_f64(v170, v173, v198.f64[0]);
      v200 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v201 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v199, v175, v198, 1), v177, v200.f64[0]), v179, v200, 1);
      v202 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v171, v172, v198.f64[0]), v174, v198, 1), v176, v200.f64[0]), v178, v200, 1);
      v203 = v15[93];
      v204 = v15[92];
      v206 = *(float64x2_t *)((char *)v15 + 1592);
      v205 = *(float64x2_t *)((char *)v15 + 1608);
      v207 = v15[108];
      v208 = v15[107];
      v178.f64[0] = v773[-38].f64[0];
      v209 = v773[-39];
      v198.f64[0] = v773[-31].f64[1];
      v210 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v204, v209.f64[0]), v206, v209, 1);
      v211 = vmlaq_laneq_f64(vmlaq_n_f64(v185, v203, v209.f64[0]), v205, v209, 1);
      v212 = *(float64x2_t *)((char *)&v773[-32] + 8);
      v213 = vmlaq_n_f64(v210, v208, v178.f64[0]);
      v214 = vmlaq_n_f64(v211, v207, v178.f64[0]);
      v178.f64[0] = v773[-23].f64[0];
      v215 = vmlaq_laneq_f64(vmlaq_n_f64(v190, v204, v212.f64[0]), v206, v212, 1);
      v216 = vmlaq_laneq_f64(vmlaq_n_f64(v191, v203, v212.f64[0]), v205, v212, 1);
      v217 = v773[-24];
      v218 = vmlaq_n_f64(v215, v208, v198.f64[0]);
      v219 = vmlaq_n_f64(v216, v207, v198.f64[0]);
      v198.f64[0] = v773[-16].f64[1];
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v204, v217.f64[0]), v206, v217, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(v197, v203, v217.f64[0]), v205, v217, 1);
      v222 = *(float64x2_t *)((char *)&v773[-17] + 8);
      __src[2] = v213;
      __src[3] = v214;
      *(float64x2_t *)((char *)__src + 168) = v219;
      *(float64x2_t *)((char *)__src + 152) = v218;
      *v14 = vmlaq_n_f64(v220, v208, v178.f64[0]);
      v14[1] = vmlaq_n_f64(v221, v207, v178.f64[0]);
      *(float64x2_t *)((char *)v14 + 136) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v202, v203, v222.f64[0]), v205, v222, 1), v207, v198.f64[0]);
      *(float64x2_t *)((char *)v14 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v201, v204, v222.f64[0]), v206, v222, 1), v208, v198.f64[0]);
      v223 = v15[4];
      v224 = v15[5];
      v225 = *(float64x2_t *)((char *)v15 + 200);
      v226 = *(float64x2_t *)((char *)v15 + 184);
      v228 = v15[19];
      v227 = v15[20];
      v229 = *(float64x2_t *)((char *)v15 + 440);
      v230 = *(float64x2_t *)((char *)v15 + 424);
      v231 = v773[-44];
      v232 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v233 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v235 = v773[-30];
      v234 = v773[-29];
      v236 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v16->f64[0]), v226, *v16, 1), v228, v231.f64[0]), v230, v231, 1);
      v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v16->f64[0]), v225, *v16, 1), v227, v231.f64[0]), v229, v231, 1);
      v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v233.f64[0]), v226, v233, 1), v228, v232.f64[0]), v230, v232, 1);
      v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v233.f64[0]), v225, v233, 1), v227, v232.f64[0]), v229, v232, 1);
      v241 = vmlaq_laneq_f64(vmulq_n_f64(v223, v235.f64[0]), v226, v235, 1);
      v242 = vmlaq_laneq_f64(vmulq_n_f64(v224, v235.f64[0]), v225, v235, 1);
      v243 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v228, v234.f64[0]), v230, v234, 1);
      v245 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v227, v234.f64[0]), v229, v234, 1);
      v246 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v243.f64[0]), v226, v243, 1), v228, v236.f64[0]), v230, v236, 1);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v243.f64[0]), v225, v243, 1), v227, v236.f64[0]), v229, v236, 1);
      v249 = v15[34];
      v248 = v15[35];
      result = (float64x2_t *)((char *)v15 + 664);
      v251 = *(float64x2_t *)((char *)v15 + 664);
      v250 = *(float64x2_t *)((char *)v15 + 680);
      v253 = v15[49];
      v252 = v15[50];
      v255 = *(float64x2_t *)((char *)v15 + 904);
      v254 = *(float64x2_t *)((char *)v15 + 920);
      v256 = v773[-43];
      v257 = vmlaq_laneq_f64(vmlaq_n_f64(v237, v249, v256.f64[0]), v251, v256, 1);
      v258 = vmlaq_laneq_f64(vmlaq_n_f64(v238, v248, v256.f64[0]), v250, v256, 1);
      v259 = v773[-42];
      v260 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v253, v259.f64[0]), v255, v259, 1);
      v261 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v252, v259.f64[0]), v254, v259, 1);
      v262 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v249, v262.f64[0]), v251, v262, 1);
      v264 = vmlaq_laneq_f64(vmlaq_n_f64(v240, v248, v262.f64[0]), v250, v262, 1);
      v265 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v266 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v253, v265.f64[0]), v255, v265, 1);
      v267 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v252, v265.f64[0]), v254, v265, 1);
      v268 = v773[-28];
      v269 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v249, v268.f64[0]), v251, v268, 1);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v248, v268.f64[0]), v250, v268, 1);
      v271 = v773[-27];
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v253, v271.f64[0]), v255, v271, 1);
      v273 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v252, v271.f64[0]), v254, v271, 1);
      v274 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v275 = vmlaq_n_f64(v246, v249, v274.f64[0]);
      v276 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v275, v251, v274, 1), v253, v276.f64[0]), v255, v276, 1);
      v278 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v248, v274.f64[0]), v250, v274, 1), v252, v276.f64[0]), v254, v276, 1);
      v279 = v15[65];
      v280 = v15[64];
      v282 = *(float64x2_t *)((char *)v15 + 1144);
      v281 = *(float64x2_t *)((char *)v15 + 1160);
      v283 = v15[80];
      v284 = v15[79];
      v286 = *(float64x2_t *)((char *)v15 + 1384);
      v285 = *(float64x2_t *)((char *)v15 + 1400);
      v287 = v773[-41];
      v288 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v280, v287.f64[0]), v282, v287, 1);
      v289 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v279, v287.f64[0]), v281, v287, 1);
      v290 = v773[-40];
      v291 = vmlaq_laneq_f64(vmlaq_n_f64(v288, v284, v290.f64[0]), v286, v290, 1);
      v292 = vmlaq_laneq_f64(vmlaq_n_f64(v289, v283, v290.f64[0]), v285, v290, 1);
      v293 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v294 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v280, v293.f64[0]), v282, v293, 1);
      v295 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v279, v293.f64[0]), v281, v293, 1);
      v296 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v297 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v284, v296.f64[0]), v286, v296, 1);
      v298 = vmlaq_laneq_f64(vmlaq_n_f64(v295, v283, v296.f64[0]), v285, v296, 1);
      v299 = v773[-26];
      v300 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v280, v299.f64[0]), v282, v299, 1);
      v301 = vmlaq_laneq_f64(vmlaq_n_f64(v273, v279, v299.f64[0]), v281, v299, 1);
      v302 = v773[-25];
      v303 = vmlaq_laneq_f64(vmlaq_n_f64(v300, v284, v302.f64[0]), v286, v302, 1);
      v304 = vmlaq_laneq_f64(vmlaq_n_f64(v301, v283, v302.f64[0]), v285, v302, 1);
      v305 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v280, v305.f64[0]), v282, v305, 1);
      v307 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v308 = vmlaq_laneq_f64(vmlaq_n_f64(v306, v284, v307.f64[0]), v286, v307, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v278, v279, v305.f64[0]), v281, v305, 1), v283, v307.f64[0]), v285, v307, 1);
      v310 = v15[95];
      v311 = v15[94];
      _Q31 = *(float64x2_t *)((char *)v15 + 1624);
      v312 = *(float64x2_t *)((char *)v15 + 1640);
      v314 = v15[110];
      v315 = v15[109];
      v316 = v773[-39];
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v311, v316.f64[0]), _Q31, v316, 1);
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(v292, v310, v316.f64[0]), v312, v316, 1);
      v316.f64[0] = v773[-38].f64[0];
      v319 = vmlaq_n_f64(v317, v315, v316.f64[0]);
      v320 = vmlaq_n_f64(v318, v314, v316.f64[0]);
      v321 = *(float64x2_t *)((char *)&v773[-32] + 8);
      v322 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v311, v321.f64[0]), _Q31, v321, 1);
      v323 = vmlaq_laneq_f64(vmlaq_n_f64(v298, v310, v321.f64[0]), v312, v321, 1);
      v321.f64[0] = v773[-31].f64[1];
      v324 = vmlaq_n_f64(v322, v315, v321.f64[0]);
      _Q22 = vmlaq_n_f64(v323, v314, v321.f64[0]);
      v326 = v773[-24];
      v327 = vmlaq_laneq_f64(vmlaq_n_f64(v303, v311, v326.f64[0]), _Q31, v326, 1);
      v328 = vmlaq_laneq_f64(vmlaq_n_f64(v304, v310, v326.f64[0]), v312, v326, 1);
      v326.f64[0] = v773[-23].f64[0];
      _Q23 = vmlaq_n_f64(v327, v315, v326.f64[0]);
      v330 = vmlaq_n_f64(v328, v314, v326.f64[0]);
      v331 = *(float64x2_t *)((char *)&v773[-17] + 8);
      v332 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v311, v331.f64[0]), _Q31, v331, 1);
      v311.f64[0] = v773[-16].f64[1];
      __src[4] = v319;
      __src[5] = v320;
      *(float64x2_t *)((char *)__src + 200) = _Q22;
      *(float64x2_t *)((char *)__src + 184) = v324;
      v14[2] = _Q23;
      v14[3] = v330;
      *(float64x2_t *)((char *)v14 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v310, v331.f64[0]), v312, v331, 1), v314, v311.f64[0]);
      *(float64x2_t *)((char *)v14 + 152) = vmlaq_n_f64(v332, v315, v311.f64[0]);
      _Q26 = v15[6];
      _Q27.f64[0] = v15[14].f64[1];
      v334 = *(float64x2_t *)((char *)v15 + 216);
      _Q30 = v15[21];
      _Q31.f64[0] = v15[29].f64[1];
      v336 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = *(float64x2_t *)((char *)&v773[-37] + 8);
      _Q21 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v339 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v334, _Q24, 1), _Q30, _Q1.f64[0]), v336, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v344 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v334, _Q21, 1), _Q30, _Q19.f64[0]), v336, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
        FMLA            D21, D27, V20.D[1]
      }
      _Q24 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v346 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v334, _Q20, 1), _Q30, _Q4.f64[0]), v336, _Q4, 1);
      __asm { FMLA            D21, D31, V4.D[1] }
      _Q9 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v348 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q9.f64[0]), v334, _Q9, 1), _Q30, _Q24.f64[0]), v336, _Q24, 1);
      __asm
      {
        FMLA            D20, D27, V9.D[1]
        FMLA            D20, D31, V24.D[1]
      }
      v349 = v15[36];
      _Q26.f64[0] = v15[44].f64[1];
      v350 = *(float64x2_t *)((char *)v15 + 696);
      v351 = v15[51];
      _Q30.f64[0] = v15[59].f64[1];
      v352 = *(float64x2_t *)((char *)v15 + 936);
      v353 = vmlaq_laneq_f64(vmlaq_n_f64(v339, v349, _Q2.f64[0]), v350, _Q2, 1);
      __asm { FMLA            D23, D26, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(v353, v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm { FMLA            D23, D30, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v357 = vmlaq_laneq_f64(vmlaq_n_f64(v344, v349, _Q5.f64[0]), v350, _Q5, 1);
      __asm { FMLA            D22, D26, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v351, _Q2.f64[0]), v352, _Q2, 1);
      __asm { FMLA            D22, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v361 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v346, v349, _Q3.f64[0]), v350, _Q3, 1), v351, _Q18.f64[0]), v352, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v362 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v348, v349, _Q2.f64[0]), v350, _Q2, 1), v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm
      {
        FMLA            D20, D26, V2.D[1]
        FMLA            D20, D30, V5.D[1]
      }
      v363 = v15[66];
      _Q5.f64[0] = v15[74].f64[1];
      v364 = *(float64x2_t *)((char *)v15 + 1176);
      v365 = v15[81];
      _Q26.f64[0] = v15[89].f64[1];
      v366 = *(float64x2_t *)((char *)v15 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v773[-33] + 8);
      _Q29 = *(float64x2_t *)((char *)&v773[-34] + 8);
      _Q30 = *(float64x2_t *)((char *)&v773[-18] + 8);
      _Q31 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v371 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v363, _Q7.f64[0]), v364, _Q7, 1), v365, _Q17.f64[0]), v366, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v372 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v363, _Q29.f64[0]), v364, _Q29, 1), v365, _Q28.f64[0]), v366, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v361, v363, _Q6.f64[0]), v364, _Q6, 1), v365, _Q16.f64[0]), v366, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v362, v363, _Q31.f64[0]), v364, _Q31, 1), v365, _Q30.f64[0]), v366, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v375 = v15[96];
      _Q5.f64[0] = v15[104].f64[1];
      v376 = *(float64x2_t *)((char *)v15 + 1656);
      _Q7.f64[0] = v15[112].f64[0];
      v377 = v15[111];
      _Q17.f64[0] = v773[-38].f64[0];
      _Q18 = v773[-39];
      _Q24.f64[0] = v773[-31].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v773[-32] + 8);
      _Q26.f64[0] = v773[-23].f64[0];
      _Q27 = v773[-24];
      _Q28.f64[0] = v773[-16].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v773[-17] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      __src[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      __src[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v371, v375, _Q18.f64[0]), v376, _Q18, 1), v377, _Q17.f64[0]);
      __src[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)__src + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v372, v375, _Q25.f64[0]), v376, _Q25, 1), v377, _Q24.f64[0]);
      v14[5].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v14[4] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v373, v375, _Q27.f64[0]), v376, _Q27, 1), v377, _Q26.f64[0]);
      v14[12].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v14 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v374, v375, _Q29.f64[0]), v376, _Q29, 1), v377, _Q28.f64[0]);
      v382 = v15[1];
      v383 = *(float64x2_t *)((char *)v15 + 136);
      v384 = *(float64x2_t *)((char *)v15 + 120);
      v386 = v15[15];
      v385 = v15[16];
      v387 = *(float64x2_t *)((char *)v15 + 376);
      v388 = *(float64x2_t *)((char *)v15 + 360);
      v389 = v773[-14];
      v390 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v391 = v773[-15];
      v392 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v391.f64[0]), v384, v391, 1), v386, v389.f64[0]), v388, v389, 1);
      v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, v391.f64[0]), v383, v391, 1), v385, v389.f64[0]), v387, v389, 1);
      v395 = vmlaq_laneq_f64(vmulq_n_f64(*v15, v392.f64[0]), v384, v392, 1);
      _Q20 = v392;
      v396 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v398 = vmlaq_laneq_f64(vmlaq_n_f64(v395, v386, v396.f64[0]), v388, v396, 1);
      v399 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, v392.f64[0]), v383, v392, 1), v385, v396.f64[0]), v387, v396, 1);
      v400 = v15[30];
      v401 = v15[31];
      v403 = *(float64x2_t *)((char *)v15 + 600);
      v402 = *(float64x2_t *)((char *)v15 + 616);
      v405 = v15[45];
      v404 = v15[46];
      v407 = *(float64x2_t *)((char *)v15 + 840);
      v406 = *(float64x2_t *)((char *)v15 + 856);
      v408 = v773[-12];
      v409 = v773[-13];
      v410 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v393, v400, v409.f64[0]), v403, v409, 1), v405, v408.f64[0]), v407, v408, 1);
      v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v394, v401, v409.f64[0]), v402, v409, 1), v404, v408.f64[0]), v406, v408, 1);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v400, v410.f64[0]), v403, v410, 1);
      _Q4 = v410;
      v415 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v416 = vmlaq_laneq_f64(vmlaq_n_f64(v413, v405, v415.f64[0]), v407, v415, 1);
      v417 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v399, v401, v410.f64[0]), v402, v410, 1), v404, v415.f64[0]), v406, v415, 1);
      v418 = v15[60];
      v419 = v15[61];
      v421 = *(float64x2_t *)((char *)v15 + 1080);
      v420 = *(float64x2_t *)((char *)v15 + 1096);
      v422 = v15[76];
      v423 = v15[75];
      v425 = *(float64x2_t *)((char *)v15 + 1320);
      v424 = *(float64x2_t *)((char *)v15 + 1336);
      v426 = v773[-10];
      v427 = v773[-11];
      v428 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v411, v418, v427.f64[0]), v421, v427, 1), v423, v426.f64[0]), v425, v426, 1);
      v429 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v412, v419, v427.f64[0]), v420, v427, 1), v422, v426.f64[0]), v424, v426, 1);
      v430 = vmlaq_laneq_f64(vmlaq_n_f64(v416, v418, v390.f64[0]), v421, v390, 1);
      _Q5 = v390;
      v432 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v433 = vmlaq_laneq_f64(vmlaq_n_f64(v430, v423, v432.f64[0]), v425, v432, 1);
      v434 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v417, v419, v390.f64[0]), v420, v390, 1), v422, v432.f64[0]), v424, v432, 1);
      v435 = v15[91];
      v436 = v15[90];
      v438 = *(float64x2_t *)((char *)v15 + 1560);
      v437 = *(float64x2_t *)((char *)v15 + 1576);
      v439 = v15[106];
      v440 = v15[105];
      v390.f64[0] = v773[-8].f64[0];
      v441 = v773[-9];
      v426.f64[0] = v773[-1].f64[1];
      v442 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v428, v436, v441.f64[0]), v438, v441, 1), v440, v390.f64[0]);
      v443 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v429, v435, v441.f64[0]), v437, v441, 1), v439, v390.f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v445 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[30] = v442;
      __src[31] = v443;
      *(float64x2_t *)((char *)v14 + 328) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v433, v436, v445.f64[0]), v438, v445, 1), v440, v426.f64[0]);
      *(float64x2_t *)((char *)v14 + 344) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v434, v435, v445.f64[0]), v437, v445, 1), v439, v426.f64[0]);
      v447 = v15[2];
      v446 = v15[3];
      v448 = *(float64x2_t *)((char *)v15 + 168);
      v449 = *(float64x2_t *)((char *)v15 + 152);
      v451 = v15[17];
      v450 = v15[18];
      v452 = *(float64x2_t *)((char *)v15 + 408);
      v453 = *(float64x2_t *)((char *)v15 + 392);
      v454 = v773[-14];
      v455 = v773[-15];
      v457 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v456 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v447, v455.f64[0]), v449, v455, 1), v451, v454.f64[0]), v453, v454, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v446, v455.f64[0]), v448, v455, 1), v450, v454.f64[0]), v452, v454, 1);
      v460 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v447, v457.f64[0]), v449, v457, 1), v451, v456.f64[0]), v453, v456, 1);
      v461 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v446, v457.f64[0]), v448, v457, 1), v450, v456.f64[0]), v452, v456, 1);
      v463 = v15[32];
      v462 = v15[33];
      v465 = *(float64x2_t *)((char *)v15 + 632);
      v464 = *(float64x2_t *)((char *)v15 + 648);
      v467 = v15[47];
      v466 = v15[48];
      v469 = *(float64x2_t *)((char *)v15 + 872);
      v468 = *(float64x2_t *)((char *)v15 + 888);
      v470 = v773[-12];
      v471 = v773[-13];
      v473 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v472 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v474 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v458, v463, v471.f64[0]), v465, v471, 1), v467, v470.f64[0]), v469, v470, 1);
      v475 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v459, v462, v471.f64[0]), v464, v471, 1), v466, v470.f64[0]), v468, v470, 1);
      v476 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v460, v463, v473.f64[0]), v465, v473, 1), v467, v472.f64[0]), v469, v472, 1);
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v461, v462, v473.f64[0]), v464, v473, 1), v466, v472.f64[0]), v468, v472, 1);
      v479 = v15[62];
      v478 = v15[63];
      v481 = *(float64x2_t *)((char *)v15 + 1112);
      v480 = *(float64x2_t *)((char *)v15 + 1128);
      v482 = v15[78];
      v483 = v15[77];
      v485 = *(float64x2_t *)((char *)v15 + 1352);
      v484 = *(float64x2_t *)((char *)v15 + 1368);
      v486 = v773[-10];
      v487 = v773[-11];
      v489 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v488 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v474, v479, v487.f64[0]), v481, v487, 1), v483, v486.f64[0]), v485, v486, 1);
      v491 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v475, v478, v487.f64[0]), v480, v487, 1), v482, v486.f64[0]), v484, v486, 1);
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v476, v479, v489.f64[0]), v481, v489, 1), v483, v488.f64[0]), v485, v488, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v477, v478, v489.f64[0]), v480, v489, 1), v482, v488.f64[0]), v484, v488, 1);
      v494 = v15[93];
      v495 = v15[92];
      v497 = *(float64x2_t *)((char *)v15 + 1592);
      v496 = *(float64x2_t *)((char *)v15 + 1608);
      v498 = v15[108];
      v499 = v15[107];
      v484.f64[0] = v773[-8].f64[0];
      v500 = v773[-9];
      v486.f64[0] = v773[-1].f64[1];
      v501 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[32] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v490, v495, v500.f64[0]), v497, v500, 1), v499, v484.f64[0]);
      __src[33] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v491, v494, v500.f64[0]), v496, v500, 1), v498, v484.f64[0]);
      *(float64x2_t *)((char *)v14 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v492, v495, v501.f64[0]), v497, v501, 1), v499, v486.f64[0]);
      *(float64x2_t *)((char *)v14 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v493, v494, v501.f64[0]), v496, v501, 1), v498, v486.f64[0]);
      v503 = v15[4];
      v502 = v15[5];
      v504 = *(float64x2_t *)((char *)v15 + 200);
      v505 = *(float64x2_t *)((char *)v15 + 184);
      v507 = v15[19];
      v506 = v15[20];
      v508 = *(float64x2_t *)((char *)v15 + 440);
      v509 = *(float64x2_t *)((char *)v15 + 424);
      v510 = v773[-14];
      v511 = v773[-15];
      v513 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v512 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v514 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v503, v511.f64[0]), v505, v511, 1), v507, v510.f64[0]), v509, v510, 1);
      v515 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v502, v511.f64[0]), v504, v511, 1), v506, v510.f64[0]), v508, v510, 1);
      v516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v503, v513.f64[0]), v505, v513, 1), v507, v512.f64[0]), v509, v512, 1);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v502, v513.f64[0]), v504, v513, 1), v506, v512.f64[0]), v508, v512, 1);
      v519 = v15[34];
      v518 = v15[35];
      v521 = *(float64x2_t *)((char *)v15 + 664);
      v520 = *(float64x2_t *)((char *)v15 + 680);
      v523 = v15[49];
      v522 = v15[50];
      v525 = *(float64x2_t *)((char *)v15 + 904);
      v524 = *(float64x2_t *)((char *)v15 + 920);
      v526 = v773[-12];
      v527 = v773[-13];
      v529 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v528 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v530 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v514, v519, v527.f64[0]), v521, v527, 1), v523, v526.f64[0]), v525, v526, 1);
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v515, v518, v527.f64[0]), v520, v527, 1), v522, v526.f64[0]), v524, v526, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v516, v519, v529.f64[0]), v521, v529, 1), v523, v528.f64[0]), v525, v528, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v517, v518, v529.f64[0]), v520, v529, 1), v522, v528.f64[0]), v524, v528, 1);
      v534 = v15[65];
      v535 = v15[64];
      v537 = *(float64x2_t *)((char *)v15 + 1144);
      v536 = *(float64x2_t *)((char *)v15 + 1160);
      v538 = v15[80];
      v539 = v15[79];
      v541 = *(float64x2_t *)((char *)v15 + 1384);
      v540 = *(float64x2_t *)((char *)v15 + 1400);
      v542 = v773[-10];
      v543 = v773[-11];
      v545 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v544 = *(float64x2_t *)((char *)&v773[-3] + 8);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v530, v535, v543.f64[0]), v537, v543, 1), v539, v542.f64[0]), v541, v542, 1);
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v531, v534, v543.f64[0]), v536, v543, 1), v538, v542.f64[0]), v540, v542, 1);
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, v535, v545.f64[0]), v537, v545, 1), v539, v544.f64[0]), v541, v544, 1);
      _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v533, v534, v545.f64[0]), v536, v545, 1), v538, v544.f64[0]), v540, v544, 1);
      _Q2 = v15[95];
      v551 = v15[94];
      v553 = *(float64x2_t *)((char *)v15 + 1624);
      _Q7 = *(float64x2_t *)((char *)v15 + 1640);
      _Q17 = v15[110];
      v555 = v15[109];
      v540.f64[0] = v773[-8].f64[0];
      v556 = v773[-9];
      v542.f64[0] = v773[-1].f64[1];
      v557 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q24, v551, v556.f64[0]), v553, v556, 1), v555, v540.f64[0]);
      __src[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v547, _Q2, v556.f64[0]), _Q7, v556, 1), _Q17, v540.f64[0]);
      *(float64x2_t *)((char *)v14 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v548, v551, v557.f64[0]), v553, v557, 1), v555, v542.f64[0]);
      *(float64x2_t *)((char *)v14 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, _Q2, v557.f64[0]), _Q7, v557, 1), _Q17, v542.f64[0]);
      v558 = v15[6];
      _Q2.f64[0] = v15[14].f64[1];
      v559 = *(float64x2_t *)((char *)v15 + 216);
      v560 = v15[21];
      _Q17.f64[0] = v15[29].f64[1];
      v561 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = v773[-14];
      _Q21 = v773[-15];
      _Q22 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v558, _Q21.f64[0]), v559, _Q21, 1), v560, _Q19.f64[0]), v561, _Q19, 1);
      __asm
      {
        FMLA            D24, D2, V21.D[1]
        FMLA            D24, D17, V19.D[1]
      }
      v566 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v558, _Q20.f64[0]), v559, _Q20, 1), v560, _Q22.f64[0]), v561, _Q22, 1);
      __asm
      {
        FMLA            D0, D2, V20.D[1]
        FMLA            D0, D17, V22.D[1]
      }
      _Q6 = v15[36];
      _Q7.f64[0] = v15[44].f64[1];
      v568 = *(float64x2_t *)((char *)v15 + 696);
      _Q18 = v15[51];
      _Q19.f64[0] = v15[59].f64[1];
      v570 = *(float64x2_t *)((char *)v15 + 936);
      _Q21 = v773[-12];
      _Q22 = v773[-13];
      _Q25 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v565, _Q6, _Q22.f64[0]), v568, _Q22, 1), _Q18, _Q21.f64[0]), v570, _Q21, 1);
      __asm
      {
        FMLA            D24, D7, V22.D[1]
        FMLA            D24, D19, V21.D[1]
      }
      v575 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v566, _Q6, _Q4.f64[0]), v568, _Q4, 1), _Q18, _Q25.f64[0]), v570, _Q25, 1);
      __asm
      {
        FMLA            D0, D7, V4.D[1]
        FMLA            D0, D19, V25.D[1]
      }
      _Q4 = v15[66];
      _Q6.f64[0] = v15[74].f64[1];
      v577 = *(float64x2_t *)((char *)v15 + 1176);
      v578 = v15[81];
      _Q18.f64[0] = v15[89].f64[1];
      v579 = *(float64x2_t *)((char *)v15 + 1416);
      _Q20 = v773[-10];
      _Q21 = v773[-11];
      v582 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v574, _Q4, _Q21.f64[0]), v577, _Q21, 1), v578, _Q20.f64[0]), v579, _Q20, 1);
      __asm
      {
        FMLA            D24, D6, V21.D[1]
        FMLA            D24, D18, V20.D[1]
      }
      v583 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v575, _Q4, _Q5.f64[0]), v577, _Q5, 1), v578, _Q3.f64[0]), v579, _Q3, 1);
      __asm
      {
        FMLA            D0, D6, V5.D[1]
        FMLA            D0, D18, V3.D[1]
      }
      v584 = v15[96];
      _Q4.f64[0] = v15[104].f64[1];
      v585 = *(float64x2_t *)((char *)v15 + 1656);
      _Q6.f64[0] = v15[112].f64[0];
      v586 = v15[111];
      v568.f64[0] = v773[-8].f64[0];
      _Q17 = v773[-9];
      _Q18.f64[0] = v773[-1].f64[1];
      _Q19 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __asm
      {
        FMLA            D24, D4, V17.D[1]
        FMLA            D0, D4, V19.D[1]
      }
      v14[20].f64[0] = _Q24.f64[0] + _Q6.f64[0] * v568.f64[0];
      v14[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v582, v584, _Q17.f64[0]), v585, _Q17, 1), v586, v568.f64[0]);
      v14[27].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v583, v584, _Q19.f64[0]), v585, _Q19, 1), v586, _Q18.f64[0]);
      break;
    case 1:
      for (i = 0; i != 720; i += 120)
      {
        v590 = *(float64x2_t *)((char *)__src + i + 32);
        v591 = *(float64x2_t *)((char *)__src + i + 48);
        v592 = *(float64x2_t *)((char *)__src + i + 64);
        v593 = *(float64x2_t *)((char *)__src + i + 80);
        v594 = *(float64x2_t *)((char *)__src + i + 96);
        a9.f64[0] = __src[7].f64[i / 8];
        a10.f64[0] = a11[8].f64[0];
        v595 = a11[3];
        v596 = a11[4];
        v597 = a11[5];
        v598 = a11[6];
        v599 = a11[7];
        v809 = vmulq_f64(a9, a10);
        v808 = vmulq_f64(v594, v599);
        v807 = vmulq_f64(v593, v598);
        v805 = vmulq_f64(v591, v596);
        v806 = vmulq_f64(v592, v597);
        v600 = vmulq_f64(v590, v595);
        v601 = *(float64x2_t *)((char *)__src + i);
        v602 = a11[1];
        v803 = vmulq_f64(*(float64x2_t *)((char *)__src + i + 16), a11[2]);
        v804 = v600;
        v802 = vmulq_f64(v601, v602);
        result = (float64x2_t *)memcpy(v810, __src, sizeof(v810));
        v603 = (float64x2_t *)((char *)v810 + i);
        v604 = v803;
        *v603 = v802;
        v603[1] = v604;
        v605 = v805;
        v603[2] = v804;
        v603[3] = v605;
        v606 = v807;
        v603[4] = v806;
        v603[5] = v606;
        v603[6] = v808;
        v603[7].f64[0] = v809.f64[0];
        v607 = v810[44];
        v608 = v810[42];
        __src[43] = v810[43];
        __src[44] = v607;
        v609 = v810[40];
        __src[41] = v810[41];
        __src[42] = v608;
        v610 = v810[38];
        __src[39] = v810[39];
        __src[40] = v609;
        v611 = v810[36];
        __src[37] = v810[37];
        __src[38] = v610;
        v612 = v810[34];
        __src[35] = v810[35];
        __src[36] = v611;
        v613 = v810[32];
        __src[33] = v810[33];
        __src[34] = v612;
        v614 = v810[30];
        __src[31] = v810[31];
        __src[32] = v613;
        v615 = v810[28];
        __src[29] = v810[29];
        __src[30] = v614;
        v616 = v810[26];
        __src[27] = v810[27];
        __src[28] = v615;
        v617 = v810[24];
        __src[25] = v810[25];
        __src[26] = v616;
        v618 = v810[22];
        __src[23] = v810[23];
        __src[24] = v617;
        v619 = v810[20];
        __src[21] = v810[21];
        __src[22] = v618;
        v620 = v810[18];
        __src[19] = v810[19];
        __src[20] = v619;
        v621 = v810[16];
        __src[17] = v810[17];
        __src[18] = v620;
        v622 = v810[14];
        __src[15] = v810[15];
        __src[16] = v621;
        v623 = v810[12];
        __src[13] = v810[13];
        __src[14] = v622;
        v624 = v810[10];
        __src[11] = v810[11];
        __src[12] = v623;
        v625 = v810[8];
        __src[9] = v810[9];
        __src[10] = v624;
        v626 = v810[6];
        __src[7] = v810[7];
        __src[8] = v625;
        v627 = v810[4];
        __src[5] = v810[5];
        __src[6] = v626;
        v628 = v810[2];
        __src[3] = v810[3];
        __src[4] = v627;
        v629 = v810[0];
        __src[1] = v810[1];
        __src[2] = v628;
        *__src = v629;
      }
      break;
    case 2:
      v630 = a11[1].f64[0];
      v632 = __src[29];
      v631 = __src[30];
      v634 = __src[27];
      v633 = __src[28];
      v636 = __src[25];
      v635 = __src[26];
      v638 = __src[23];
      v637 = __src[24];
      v640 = __src[21];
      v639 = __src[22];
      v642 = __src[19];
      v641 = __src[20];
      v644 = __src[17];
      v643 = __src[18];
      v646 = __src[15];
      v645 = __src[16];
      v648 = __src[13];
      v647 = __src[14];
      v649 = __src[11];
      v650 = __src[12];
      v651 = __src[9];
      v652 = __src[10];
      v653 = __src[7];
      v654 = __src[8];
      v655 = __src[5];
      v656 = __src[6];
      v657 = __src[3];
      v658 = __src[4];
      v659 = __src[1];
      v660 = __src[2];
      v809 = vmulq_n_f64(*__src, v630);
      v808 = vmulq_n_f64(v659, v630);
      v807 = vmulq_n_f64(v660, v630);
      v805 = vmulq_n_f64(v658, v630);
      v806 = vmulq_n_f64(v657, v630);
      v803 = vmulq_n_f64(v656, v630);
      v804 = vmulq_n_f64(v655, v630);
      v801 = vmulq_n_f64(v654, v630);
      v802 = vmulq_n_f64(v653, v630);
      v799 = vmulq_n_f64(v652, v630);
      v800 = vmulq_n_f64(v651, v630);
      v797 = vmulq_n_f64(v650, v630);
      v798 = vmulq_n_f64(v649, v630);
      v796 = vmulq_n_f64(v648, v630);
      v661 = vmulq_n_f64(__src[31], v630);
      v662 = vmulq_n_f64(__src[32], v630);
      v663 = vmulq_n_f64(__src[33], v630);
      v664 = vmulq_n_f64(__src[34], v630);
      v665 = vmulq_n_f64(__src[35], v630);
      v666 = vmulq_n_f64(__src[36], v630);
      v667 = vmulq_n_f64(__src[37], v630);
      v668 = vmulq_n_f64(__src[38], v630);
      v669 = vmulq_n_f64(__src[39], v630);
      v670 = vmulq_n_f64(__src[40], v630);
      v671 = vmulq_n_f64(__src[41], v630);
      v672 = vmulq_n_f64(__src[42], v630);
      v673 = __src[44];
      __src[43] = vmulq_n_f64(__src[43], v630);
      __src[44] = vmulq_n_f64(v673, v630);
      __src[41] = v671;
      __src[42] = v672;
      __src[39] = v669;
      __src[40] = v670;
      __src[37] = v667;
      __src[38] = v668;
      __src[35] = v665;
      __src[36] = v666;
      __src[33] = v663;
      __src[34] = v664;
      __src[31] = v661;
      __src[32] = v662;
      __src[29] = vmulq_n_f64(v632, v630);
      __src[30] = vmulq_n_f64(v631, v630);
      __src[27] = vmulq_n_f64(v634, v630);
      __src[28] = vmulq_n_f64(v633, v630);
      __src[25] = vmulq_n_f64(v636, v630);
      __src[26] = vmulq_n_f64(v635, v630);
      __src[23] = vmulq_n_f64(v638, v630);
      __src[24] = vmulq_n_f64(v637, v630);
      __src[21] = vmulq_n_f64(v640, v630);
      __src[22] = vmulq_n_f64(v639, v630);
      __src[19] = vmulq_n_f64(v642, v630);
      __src[20] = vmulq_n_f64(v641, v630);
      __src[17] = vmulq_n_f64(v644, v630);
      __src[18] = vmulq_n_f64(v643, v630);
      __src[15] = vmulq_n_f64(v646, v630);
      __src[16] = vmulq_n_f64(v645, v630);
      __src[13] = v796;
      __src[14] = vmulq_n_f64(v647, v630);
      __src[12] = v797;
      __src[11] = v798;
      __src[10] = v799;
      __src[9] = v800;
      __src[8] = v801;
      __src[7] = v802;
      __src[6] = v803;
      __src[5] = v804;
      __src[4] = v805;
      __src[3] = v806;
      __src[2] = v807;
      __src[1] = v808;
      *__src = v809;
      break;
    case 4:
      v674 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&a11->f64[0] + 56))(v810, a11);
      MEMORY[0x24BDAC7A8](v674);
      memcpy(&v773[68], __src, 0x2D0uLL);
      v800 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[68], 1), v810[15], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     v773[69],
                                     1),
                                   v810[30],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 v773[70],
                                 1),
                               v811,
                               v773[71].f64[0]),
                             v818,
                             v773[71],
                             1),
                           v826,
                           v773[72].f64[0]),
                         v833,
                         v773[72],
                         1),
                       v841,
                       v773[73].f64[0]),
                     v848,
                     v773[73],
                     1),
                   v856,
                   v773[74].f64[0]),
                 v863,
                 v773[74],
                 1),
               v871,
               v773[75].f64[0]);
      v801 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[16], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[31],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v812,
                               v773[78].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v827,
                           v773[79].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v842,
                       v773[80].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v857,
                   v773[81].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v872,
               v773[82].f64[1]);
      v802 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[83], 1), v810[15], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     v773[84],
                                     1),
                                   v810[30],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 v773[85],
                                 1),
                               v811,
                               v773[86].f64[0]),
                             v818,
                             v773[86],
                             1),
                           v826,
                           v773[87].f64[0]),
                         v833,
                         v773[87],
                         1),
                       v841,
                       v773[88].f64[0]),
                     v848,
                     v773[88],
                     1),
                   v856,
                   v773[89].f64[0]),
                 v863,
                 v773[89],
                 1),
               v871,
               v773[90].f64[0]);
      v803 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[15], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[30],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v811,
                               v773[78].f64[1]),
                             v818,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v826,
                           v773[79].f64[1]),
                         v833,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v841,
                       v773[80].f64[1]),
                     v848,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v856,
                   v773[81].f64[1]),
                 v863,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v871,
               v773[82].f64[1]);
      v798 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[68], 1), v810[16], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     v773[69],
                                     1),
                                   v810[31],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 v773[70],
                                 1),
                               v812,
                               v773[71].f64[0]),
                             v819,
                             v773[71],
                             1),
                           v827,
                           v773[72].f64[0]),
                         v834,
                         v773[72],
                         1),
                       v842,
                       v773[73].f64[0]),
                     v849,
                     v773[73],
                     1),
                   v857,
                   v773[74].f64[0]),
                 v864,
                 v773[74],
                 1),
               v872,
               v773[75].f64[0]);
      v799 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[83], 1), v810[16], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     v773[84],
                                     1),
                                   v810[31],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 v773[85],
                                 1),
                               v812,
                               v773[86].f64[0]),
                             v819,
                             v773[86],
                             1),
                           v827,
                           v773[87].f64[0]),
                         v834,
                         v773[87],
                         1),
                       v842,
                       v773[88].f64[0]),
                     v849,
                     v773[88],
                     1),
                   v857,
                   v773[89].f64[0]),
                 v864,
                 v773[89],
                 1),
               v872,
               v773[90].f64[0]);
      v796 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[16], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[31],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v812,
                               v773[93].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v827,
                           v773[94].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v842,
                       v773[95].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v857,
                   v773[96].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v872,
               v773[97].f64[1]);
      v797 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[15], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[30],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v811,
                               v773[93].f64[1]),
                             v818,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v826,
                           v773[94].f64[1]),
                         v833,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v841,
                       v773[95].f64[1]),
                     v848,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v856,
                   v773[96].f64[1]),
                 v863,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v871,
               v773[97].f64[1]);
      v788 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[68], 1), v810[17], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[69],
                                     1),
                                   v810[32],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[70],
                                 1),
                               v813,
                               v773[71].f64[0]),
                             v820,
                             v773[71],
                             1),
                           v828,
                           v773[72].f64[0]),
                         v835,
                         v773[72],
                         1),
                       v843,
                       v773[73].f64[0]),
                     v850,
                     v773[73],
                     1),
                   v858,
                   v773[74].f64[0]),
                 v865,
                 v773[74],
                 1),
               v873,
               v773[75].f64[0]);
      v675 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[68], 1), v810[18], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[69],
                                     1),
                                   v810[33],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[70],
                                 1),
                               v814,
                               v773[71].f64[0]),
                             v821,
                             v773[71],
                             1),
                           v829,
                           v773[72].f64[0]),
                         v836,
                         v773[72],
                         1),
                       v844,
                       v773[73].f64[0]),
                     v851,
                     v773[73],
                     1),
                   v859,
                   v773[74].f64[0]),
                 v866,
                 v773[74],
                 1),
               v874,
               v773[75].f64[0]);
      v676 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[17], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[32],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v813,
                               v773[78].f64[1]),
                             v820,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v828,
                           v773[79].f64[1]),
                         v835,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v843,
                       v773[80].f64[1]),
                     v850,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v858,
                   v773[81].f64[1]),
                 v865,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v873,
               v773[82].f64[1]);
      v677 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[18], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[33],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v814,
                               v773[78].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v829,
                           v773[79].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v844,
                       v773[80].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v859,
                   v773[81].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v874,
               v773[82].f64[1]);
      v678 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[83], 1), v810[17], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[84],
                                     1),
                                   v810[32],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[85],
                                 1),
                               v813,
                               v773[86].f64[0]),
                             v820,
                             v773[86],
                             1),
                           v828,
                           v773[87].f64[0]),
                         v835,
                         v773[87],
                         1),
                       v843,
                       v773[88].f64[0]),
                     v850,
                     v773[88],
                     1),
                   v858,
                   v773[89].f64[0]),
                 v865,
                 v773[89],
                 1),
               v873,
               v773[90].f64[0]);
      v679 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[83], 1), v810[18], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[84],
                                     1),
                                   v810[33],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[85],
                                 1),
                               v814,
                               v773[86].f64[0]),
                             v821,
                             v773[86],
                             1),
                           v829,
                           v773[87].f64[0]),
                         v836,
                         v773[87],
                         1),
                       v844,
                       v773[88].f64[0]),
                     v851,
                     v773[88],
                     1),
                   v859,
                   v773[89].f64[0]),
                 v866,
                 v773[89],
                 1),
               v874,
               v773[90].f64[0]);
      v680 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[17], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[32],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v813,
                               v773[93].f64[1]),
                             v820,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v828,
                           v773[94].f64[1]),
                         v835,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v843,
                       v773[95].f64[1]),
                     v850,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v858,
                   v773[96].f64[1]),
                 v865,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v873,
               v773[97].f64[1]);
      v681 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[18], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[33],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v814,
                               v773[93].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v829,
                           v773[94].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v844,
                       v773[95].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v859,
                   v773[96].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v874,
               v773[97].f64[1]);
      v786 = v810[5];
      v787 = v810[4];
      v785 = v810[19];
      result = (float64x2_t *)&v810[41].f64[1];
      v783 = v810[34];
      v784 = v810[35];
      v782 = *(float64x2_t *)((char *)&v810[41] + 8);
      v780 = v822;
      v781 = v815;
      v779 = v837;
      v777 = v852;
      v778 = v845;
      v776 = v867;
      v682 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[68], 1), v810[19], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     v773[69],
                                     1),
                                   v810[34],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 v773[70],
                                 1),
                               v815,
                               v773[71].f64[0]),
                             v822,
                             v773[71],
                             1),
                           v830,
                           v773[72].f64[0]),
                         v837,
                         v773[72],
                         1),
                       v845,
                       v773[73].f64[0]),
                     v852,
                     v773[73],
                     1),
                   v860,
                   v773[74].f64[0]),
                 v867,
                 v773[74],
                 1),
               v875,
               v773[75].f64[0]);
      v683 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[68], 1), v810[20], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[69],
                                     1),
                                   v810[35],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[70],
                                 1),
                               v816,
                               v773[71].f64[0]),
                             v823,
                             v773[71],
                             1),
                           v831,
                           v773[72].f64[0]),
                         v838,
                         v773[72],
                         1),
                       v846,
                       v773[73].f64[0]),
                     v853,
                     v773[73],
                     1),
                   v861,
                   v773[74].f64[0]),
                 v868,
                 v773[74],
                 1),
               v876,
               v773[75].f64[0]);
      v684 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[19], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[34],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v815,
                               v773[78].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v830,
                           v773[79].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v845,
                       v773[80].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v860,
                   v773[81].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v875,
               v773[82].f64[1]);
      v685 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[20], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[35],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v816,
                               v773[78].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v831,
                           v773[79].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v846,
                       v773[80].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v861,
                   v773[81].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v876,
               v773[82].f64[1]);
      v686 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[83], 1), v810[19], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     v773[84],
                                     1),
                                   v810[34],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 v773[85],
                                 1),
                               v815,
                               v773[86].f64[0]),
                             v822,
                             v773[86],
                             1),
                           v830,
                           v773[87].f64[0]),
                         v837,
                         v773[87],
                         1),
                       v845,
                       v773[88].f64[0]),
                     v852,
                     v773[88],
                     1),
                   v860,
                   v773[89].f64[0]),
                 v867,
                 v773[89],
                 1),
               v875,
               v773[90].f64[0]);
      v687 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[83], 1), v810[20], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[84],
                                     1),
                                   v810[35],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[85],
                                 1),
                               v816,
                               v773[86].f64[0]),
                             v823,
                             v773[86],
                             1),
                           v831,
                           v773[87].f64[0]),
                         v838,
                         v773[87],
                         1),
                       v846,
                       v773[88].f64[0]),
                     v853,
                     v773[88],
                     1),
                   v861,
                   v773[89].f64[0]),
                 v868,
                 v773[89],
                 1),
               v876,
               v773[90].f64[0]);
      v688 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[19], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[34],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v815,
                               v773[93].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v830,
                           v773[94].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v845,
                       v773[95].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v860,
                   v773[96].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v875,
               v773[97].f64[1]);
      v689 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[20], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[35],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v816,
                               v773[93].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v831,
                           v773[94].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v846,
                       v773[95].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v861,
                   v773[96].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v876,
               v773[97].f64[1]);
      v775 = v810[6];
      _V4.D[1] = v773[83].f64[1];
      _V1.D[1] = v773[68].f64[1];
      _D5 = v810[14].f64[1];
      v774 = v810[14].f64[1];
      __asm { FMLA            D2, D5, V1.D[1] }
      _V1.D[1] = v773[76].f64[0];
      __asm
      {
        FMLA            D3, D5, V1.D[1]
        FMLA            D1, D5, V4.D[1]
      }
      _V4.D[1] = v773[91].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      v795 = v810[20];
      _V4.D[1] = v773[69].f64[1];
      _D5 = v810[29].f64[1];
      __asm { FMLA            D2, D5, V4.D[1] }
      _V4.D[1] = v773[77].f64[0];
      __asm { FMLA            D3, D5, V4.D[1] }
      _V4.D[1] = v773[84].f64[1];
      __asm { FMLA            D1, D5, V4.D[1] }
      _V4.D[1] = v773[92].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      _V18.D[1] = v773[70].f64[1];
      _D7 = v810[44].f64[1];
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[78].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[85].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[93].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v794 = v816;
      _V18.D[1] = v773[71].f64[1];
      _D7 = v825;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[79].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[86].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[94].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V18.D[1] = v773[72].f64[1];
      _D7 = v840;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[80].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[87].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[95].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v793 = v846;
      _V18.D[1] = v773[73].f64[1];
      _D7 = v855;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[81].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[88].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[96].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V5.D[1] = v773[74].f64[1];
      _D18 = v870;
      __asm { FMLA            D2, D18, V5.D[1] }
      _V5.D[1] = v773[82].f64[0];
      __asm { FMLA            D3, D18, V5.D[1] }
      _V5.D[1] = v773[89].f64[1];
      __asm { FMLA            D1, D18, V5.D[1] }
      _V5.D[1] = v773[97].f64[0];
      __asm { FMLA            D0, D18, V5.D[1] }
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[68], 1), v810[21], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     v773[69],
                                     1),
                                   v810[36],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 v773[70],
                                 1),
                               v817,
                               v773[71].f64[0]),
                             v824,
                             v773[71],
                             1),
                           v832,
                           v773[72].f64[0]),
                         v839,
                         v773[72],
                         1),
                       v847,
                       v773[73].f64[0]),
                     v854,
                     v773[73],
                     1),
                   v862,
                   v773[74].f64[0]),
                 v869,
                 v773[74],
                 1),
               v877,
               v773[75].f64[0]);
      v792 = _D2 + v878 * v773[75].f64[0];
      _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[13] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[21], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[36],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v817,
                               v773[78].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v832,
                           v773[79].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v847,
                       v773[80].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v862,
                   v773[81].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v877,
               v773[82].f64[1]);
      v791 = _D3 + v878 * v773[82].f64[1];
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[83], 1), v810[21], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     v773[84],
                                     1),
                                   v810[36],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 v773[85],
                                 1),
                               v817,
                               v773[86].f64[0]),
                             v824,
                             v773[86],
                             1),
                           v832,
                           v773[87].f64[0]),
                         v839,
                         v773[87],
                         1),
                       v847,
                       v773[88].f64[0]),
                     v854,
                     v773[88],
                     1),
                   v862,
                   v773[89].f64[0]),
                 v869,
                 v773[89],
                 1),
               v877,
               v773[90].f64[0]);
      v790 = _D1 + v878 * v773[90].f64[0];
      v756 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[13] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[21], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[36],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v817,
                               v773[93].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v832,
                           v773[94].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v847,
                       v773[95].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v862,
                   v773[96].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v877,
               v773[97].f64[1]);
      v789 = _D0 + v878 * v773[97].f64[1];
      v808 = *(float64x2_t *)((char *)&v773[105] + 8);
      v809 = *(float64x2_t *)((char *)&v773[107] + 8);
      v807 = *(float64x2_t *)((char *)&v773[109] + 8);
      v806 = *(float64x2_t *)((char *)&v773[110] + 8);
      _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[98], 1), v810[15], v773[99].f64[0]),
                                    *(float64x2_t *)((char *)&v810[22] + 8),
                                    v773[99],
                                    1),
                                  v810[30],
                                  v773[100].f64[0]),
                                *(float64x2_t *)((char *)&v810[37] + 8),
                                v773[100],
                                1),
                              v811,
                              v773[101].f64[0]),
                            v818,
                            v773[101],
                            1),
                          v826,
                          v773[102].f64[0]),
                        v833,
                        v773[102],
                        1),
                      v841,
                      v773[103].f64[0]),
                    v848,
                    v773[103],
                    1),
                  v856,
                  v773[104].f64[0]),
                v863,
                v773[104],
                1),
              v871,
              v773[105].f64[0]);
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[98], 1), v810[16], v773[99].f64[0]),
                                    *(float64x2_t *)((char *)&v810[23] + 8),
                                    v773[99],
                                    1),
                                  v810[31],
                                  v773[100].f64[0]),
                                *(float64x2_t *)((char *)&v810[38] + 8),
                                v773[100],
                                1),
                              v812,
                              v773[101].f64[0]),
                            v819,
                            v773[101],
                            1),
                          v827,
                          v773[102].f64[0]),
                        v834,
                        v773[102],
                        1),
                      v842,
                      v773[103].f64[0]),
                    v849,
                    v773[103],
                    1),
                  v857,
                  v773[104].f64[0]),
                v864,
                v773[104],
                1),
              v872,
              v773[105].f64[0]);
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[15], v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[22] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v810[30],
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[37] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v811,
                              v773[108].f64[1]),
                            v818,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v826,
                          v773[109].f64[1]),
                        v833,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v841,
                      v773[110].f64[1]),
                    v848,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v856,
                  v773[111].f64[1]),
                v863,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v871,
              v773[112].f64[1]);
      v760 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[16], v773[106].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[106] + 8),
                                     1),
                                   v810[31],
                                   v773[107].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[107] + 8),
                                 1),
                               v812,
                               v773[108].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[108] + 8),
                             1),
                           v827,
                           v773[109].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[109] + 8),
                         1),
                       v842,
                       v773[110].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[110] + 8),
                     1),
                   v857,
                   v773[111].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[111] + 8),
                 1),
               v872,
               v773[112].f64[1]);
      v761 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[98], 1), v810[17], v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[99],
                                     1),
                                   v810[32],
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[100],
                                 1),
                               v813,
                               v773[101].f64[0]),
                             v820,
                             v773[101],
                             1),
                           v828,
                           v773[102].f64[0]),
                         v835,
                         v773[102],
                         1),
                       v843,
                       v773[103].f64[0]),
                     v850,
                     v773[103],
                     1),
                   v858,
                   v773[104].f64[0]),
                 v865,
                 v773[104],
                 1),
               v873,
               v773[105].f64[0]);
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[98], 1), v810[18], v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[99],
                                     1),
                                   v810[33],
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[100],
                                 1),
                               v814,
                               v773[101].f64[0]),
                             v821,
                             v773[101],
                             1),
                           v829,
                           v773[102].f64[0]),
                         v836,
                         v773[102],
                         1),
                       v844,
                       v773[103].f64[0]),
                     v851,
                     v773[103],
                     1),
                   v859,
                   v773[104].f64[0]),
                 v866,
                 v773[104],
                 1),
               v874,
               v773[105].f64[0]);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[17], v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[24] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v810[32],
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[39] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v813,
                              v773[108].f64[1]),
                            v820,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v828,
                          v773[109].f64[1]),
                        v835,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v843,
                      v773[110].f64[1]),
                    v850,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v858,
                  v773[111].f64[1]),
                v865,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v873,
              v773[112].f64[1]);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[18], v773[106].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[106] + 8),
                                     1),
                                   v810[33],
                                   v773[107].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[107] + 8),
                                 1),
                               v814,
                               v773[108].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[108] + 8),
                             1),
                           v829,
                           v773[109].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[109] + 8),
                         1),
                       v844,
                       v773[110].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[110] + 8),
                     1),
                   v859,
                   v773[111].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[111] + 8),
                 1),
               v874,
               v773[112].f64[1]);
      v765 = v798;
      *__src = v800;
      __src[1] = v765;
      *(float64x2_t *)((char *)__src + 136) = v801;
      *(float64x2_t *)((char *)__src + 120) = v803;
      v766 = v799;
      __src[15] = v802;
      __src[16] = v766;
      *(float64x2_t *)((char *)v14 + 104) = v796;
      *(float64x2_t *)((char *)v14 + 88) = v797;
      __src[2] = v788;
      __src[3] = v675;
      *(float64x2_t *)((char *)__src + 168) = v677;
      *(float64x2_t *)((char *)__src + 152) = v676;
      *v14 = v678;
      v14[1] = v679;
      *(float64x2_t *)((char *)v14 + 136) = v681;
      *(float64x2_t *)((char *)v14 + 120) = v680;
      __src[4] = v682;
      __src[5] = v683;
      *(float64x2_t *)((char *)__src + 200) = v685;
      *(float64x2_t *)((char *)__src + 184) = v684;
      v14[2] = v686;
      v14[3] = v687;
      *(float64x2_t *)((char *)v14 + 168) = v689;
      *(float64x2_t *)((char *)v14 + 152) = v688;
      __src[6] = _Q20;
      __src[7].f64[0] = v792;
      *(float64x2_t *)((char *)__src + 216) = _Q19;
      __src[14].f64[1] = v791;
      v14[4] = _Q17;
      v14[5].f64[0] = v790;
      *(float64x2_t *)((char *)v14 + 184) = v756;
      v14[12].f64[1] = v789;
      __src[30] = _Q7;
      __src[31] = _Q2;
      *(float64x2_t *)((char *)v14 + 328) = _Q3;
      *(float64x2_t *)((char *)v14 + 344) = v760;
      __src[32] = v761;
      __src[33] = _Q18;
      *(float64x2_t *)((char *)v14 + 360) = _Q0;
      *(float64x2_t *)((char *)v14 + 376) = _Q21;
      v767 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v786, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[98], 1), v795, v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[99],
                                     1),
                                   v784,
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[100],
                                 1),
                               v794,
                               v773[101].f64[0]),
                             v823,
                             v773[101],
                             1),
                           v831,
                           v773[102].f64[0]),
                         v838,
                         v773[102],
                         1),
                       v793,
                       v773[103].f64[0]),
                     v853,
                     v773[103],
                     1),
                   v861,
                   v773[104].f64[0]),
                 v868,
                 v773[104],
                 1),
               v876,
               v773[105].f64[0]);
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v787, v773[105].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v785, v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[26] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v783,
                                  v773[107].f64[1]),
                                v782,
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v781,
                              v773[108].f64[1]),
                            v780,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v830,
                          v773[109].f64[1]),
                        v779,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v778,
                      v773[110].f64[1]),
                    v777,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v860,
                  v773[111].f64[1]),
                v776,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v875,
              v773[112].f64[1]);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v786, v773[105].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v795, v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[27] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v784,
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[42] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v794,
                              v773[108].f64[1]),
                            v823,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v831,
                          v773[109].f64[1]),
                        v838,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v793,
                      v773[110].f64[1]),
                    v853,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v861,
                  v773[111].f64[1]),
                v868,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v876,
              v773[112].f64[1]);
      __src[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v787, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[98], 1), v785, v773[99].f64[0]),
                                          *(float64x2_t *)((char *)&v810[26] + 8),
                                          v773[99],
                                          1),
                                        v783,
                                        v773[100].f64[0]),
                                      v782,
                                      v773[100],
                                      1),
                                    v781,
                                    v773[101].f64[0]),
                                  v780,
                                  v773[101],
                                  1),
                                v830,
                                v773[102].f64[0]),
                              v779,
                              v773[102],
                              1),
                            v778,
                            v773[103].f64[0]),
                          v777,
                          v773[103],
                          1),
                        v860,
                        v773[104].f64[0]),
                      v776,
                      v773[104],
                      1),
                    v875,
                    v773[105].f64[0]);
      __src[35] = v767;
      *(float64x2_t *)((char *)v14 + 392) = _Q5;
      *(float64x2_t *)((char *)v14 + 408) = _Q6;
      _Q3.f64[0] = v810[29].f64[1];
      _Q5.f64[1] = v773[99].f64[1];
      _Q6.f64[1] = v773[98].f64[1];
      _Q7.f64[1] = v773[107].f64[0];
      _Q20.f64[0] = v774;
      __asm
      {
        FMLA            D17, D20, V6.D[1]
        FMLA            D17, D3, V5.D[1]
      }
      _Q6.f64[1] = v808.f64[1];
      __asm
      {
        FMLA            D0, D20, V6.D[1]
        FMLA            D0, D3, V7.D[1]
      }
      _Q3.f64[0] = v810[44].f64[1];
      _Q18.f64[0] = v825;
      _Q20.f64[1] = v773[101].f64[1];
      _Q21.f64[1] = v773[100].f64[1];
      _V22.D[1] = v773[109].f64[0];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v809.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V22.D[1]
      }
      _Q3.f64[0] = v840;
      _Q18.f64[0] = v855;
      _Q20.f64[1] = v773[103].f64[1];
      _Q21.f64[1] = v773[102].f64[1];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v807.f64[1];
      _Q2.f64[1] = v806.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V2.D[1]
      }
      _Q3.f64[0] = v870;
      _Q6.f64[0] = v878;
      v771 = v877;
      _Q18.f64[0] = v773[105].f64[0];
      _Q19.f64[1] = v773[104].f64[1];
      _Q20.f64[0] = v773[112].f64[1];
      _Q21.f64[1] = v773[112].f64[0];
      __asm { FMLA            D17, D3, V19.D[1] }
      v772 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v775, v808.f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v808, 1), v810[21], v773[106].f64[1]), *(float64x2_t *)((char *)&v810[28] + 8),
                                   *(float64x2_t *)((char *)&v773[106] + 8),
                                   1),
                                 v810[36],
                                 v809.f64[0]),
                               *(float64x2_t *)((char *)&v810[43] + 8),
                               v809,
                               1),
                             v817,
                             v773[108].f64[1]),
                           v824,
                           *(float64x2_t *)((char *)&v773[108] + 8),
                           1),
                         v832,
                         v807.f64[0]),
                       v839,
                       v807,
                       1),
                     v847,
                     v806.f64[0]),
                   v854,
                   v806,
                   1),
                 v862,
                 v773[111].f64[1]),
               v869,
               *(float64x2_t *)((char *)&v773[111] + 8),
               1);
      v14[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v775, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[98], 1), v810[21], v773[99].f64[0]),
                                        *(float64x2_t *)((char *)&v810[28] + 8),
                                        v773[99],
                                        1),
                                      v810[36],
                                      v773[100].f64[0]),
                                    *(float64x2_t *)((char *)&v810[43] + 8),
                                    v773[100],
                                    1),
                                  v817,
                                  v773[101].f64[0]),
                                v824,
                                v773[101],
                                1),
                              v832,
                              v773[102].f64[0]),
                            v839,
                            v773[102],
                            1),
                          v847,
                          v773[103].f64[0]),
                        v854,
                        v773[103],
                        1),
                      v862,
                      v773[104].f64[0]),
                    v869,
                    v773[104],
                    1),
                  v877,
                  v773[105].f64[0]);
      v14[20].f64[0] = _Q17.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(v772, v771, _Q20.f64[0]);
      __asm { FMLA            D0, D3, V21.D[1] }
      v14[27].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q20.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_20F564D58(uint64_t a1, float64x2_t **a2, uint64_t a3, uint64_t a4, float64x2_t a5, double a6, double a7, double a8, double a9, double a10, float64x2_t a11)
{
  uint64_t v11;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v19;
  float64x2_t v21;
  double v23;
  double v25;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v43;
  double v45;
  double v47;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  uint64_t v52;
  int v53;
  double v54;
  double v56;
  double v58;
  uint64_t v60;
  double v65;
  double v68;
  double v71;
  unint64_t v72;
  double v73;
  uint64_t v75;
  uint64_t v76;
  float64x2_t v77;
  float64x2_t v79;
  float64x2_t v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  __int128 v85;
  float64x2_t *v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  float64_t v93;
  float64x2_t v94;
  double v95;
  float64x2_t v96;
  double v97;
  float64x2_t v98;
  double v99;
  float64x2_t v100;
  float64_t v101;
  float64x2_t v102;
  double v103;

  v11 = *(_QWORD *)(a1 + 112);
  if (v11)
  {
    v16 = *a2;
    a5.f64[0] = (*a2)[3].f64[0];
    v17 = (*a2)[2];
    _D2 = (*a2)[4].f64[1];
    v19 = *(float64x2_t *)((char *)*a2 + 56);
    _D4 = (*a2)[6].f64[0];
    v21 = (*a2)[5];
    a11.f64[0] = *(float64_t *)(a1 + 32);
    _Q7 = *(float64x2_t *)(a1 + 16);
    v23 = *(double *)(a1 + 56);
    _Q17 = *(float64x2_t *)(a1 + 40);
    v25 = *(double *)(a1 + 80);
    _Q19 = *(float64x2_t *)(a1 + 64);
    v27 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17, _Q7.f64[0]), v19, _Q17.f64[0]), v21, _Q19.f64[0]);
    v28 = vmlad_n_f64(vmlad_n_f64(a5.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
    v29 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v17, _Q7, 1), v19, _Q17, 1), v21, _Q19, 1);
    __asm
    {
      FMLA            D7, D2, V17.D[1]
      FMLA            D7, D4, V19.D[1]
    }
    v91 = v28;
    v90 = v27;
    v93 = _Q7.f64[0];
    v92 = v29;
    v94 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17, a11.f64[0]), v19, v23), v21, v25);
    v95 = vmulq_f64(a5, a11).f64[0] + _D2 * v23 + _D4 * v25;
    v99 = 0.0;
    v98 = 0uLL;
    sub_20E9733B8(&v90, v98.f64);
    v35 = v98;
    *(double *)(a3 + 16) = v99;
    *(float64x2_t *)a3 = v35;
    v35.f64[0] = v16[7].f64[1];
    v36.f64[0] = *(float64_t *)(a1 + 104);
    v37 = vsubq_f64(v35, v36);
    *(float64x2_t *)(a3 + 24) = vsubq_f64(*(float64x2_t *)((char *)v16 + 104), *(float64x2_t *)(a1 + 88));
    *(float64_t *)(a3 + 40) = v37.f64[0];
    v38 = *a2;
    if (BYTE4(v38[1].f64[0]))
    {
      v37.f64[0] = v38[3].f64[0];
      v39 = v38[2];
      _D2 = v38[4].f64[1];
      v41 = *(float64x2_t *)((char *)v38 + 56);
      _D4 = v38[6].f64[0];
      v43 = v38[5];
      v34.f64[0] = *(float64_t *)(a1 + 32);
      _Q7 = *(float64x2_t *)(a1 + 16);
      v45 = *(double *)(a1 + 56);
      _Q17 = *(float64x2_t *)(a1 + 40);
      v47 = *(double *)(a1 + 80);
      _Q19 = *(float64x2_t *)(a1 + 64);
      v49 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, _Q7.f64[0]), v41, _Q17.f64[0]), v43, _Q19.f64[0]);
      v50 = vmlad_n_f64(vmlad_n_f64(v37.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v51 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v39, _Q7, 1), v41, _Q17, 1), v43, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v98 = v49;
      v99 = v50;
      v100 = v51;
      v101 = _Q7.f64[0];
      v102 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v34.f64[0]), v41, v45), v43, v47);
      v103 = vmulq_f64(v37, v34).f64[0] + _D2 * v45 + _D4 * v47;
      v90 = 0uLL;
      v91 = 0.0;
      sub_20F20830C(&v98, v90.f64, v92.f64);
      v52 = 0;
      v53 = 0;
      v54 = v38[3].f64[0];
      _Q1 = v38[2];
      v56 = v38[4].f64[1];
      _Q3 = *(float64x2_t *)((char *)v38 + 56);
      v58 = v38[6].f64[0];
      _Q5 = v38[5];
      v60 = *(_QWORD *)(a1 + 112);
      _Q6.f64[0] = 0.0;
      _Q6.f64[1] = *(float64_t *)(v60 + 24);
      _D17 = v95;
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, _Q1.f64[0]), v94, _Q1, 1), v96, v54);
      __asm { FMLA            D22, D17, V1.D[1] }
      v65 = _D22 + v97 * v54;
      _Q23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, _Q3.f64[0]), v94, _Q3, 1), v96, v56);
      __asm { FMLA            D0, D17, V3.D[1] }
      v68 = _D0 + v97 * v56;
      _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, _Q5.f64[0]), v94, _Q5, 1), v96, v58);
      __asm { FMLA            D0, D17, V5.D[1] }
      v71 = _D0 + v97 * v58;
      _Q5.f64[0] = *(float64_t *)(v60 + 16);
      v73 = *(double *)(v60 + 32);
      v72 = *(_QWORD *)(v60 + 40);
      _D0 = 0;
      v76 = *(_QWORD *)(v60 + 48);
      v75 = *(_QWORD *)(v60 + 56);
      v77 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q21.f64[0]), _Q6, _Q21, 1), (float64x2_t)0, v65);
      __asm { FMLA            D19, D0, V21.D[1] }
      v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q23.f64[0]), _Q6, _Q23, 1), (float64x2_t)0, v68);
      __asm { FMLA            D21, D0, V23.D[1] }
      v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q16.f64[0]), _Q6, _Q16, 1), (float64x2_t)0, v71);
      __asm { FMLA            D6, D0, V16.D[1] }
      *(double *)(a4 + 16) = _D19 + v73 * v65;
      *(float64x2_t *)a4 = v77;
      *(double *)(a4 + 64) = _Q21.f64[0] + v73 * v68;
      *(float64x2_t *)(a4 + 48) = v79;
      *(double *)(a4 + 112) = _Q6.f64[0] + v73 * v71;
      *(float64x2_t *)(a4 + 96) = v80;
      do
      {
        *(_QWORD *)(a4 + 144 + 8 * v52) = 0;
        v81 = v53 < 2;
        if (v53 < 2)
          ++v53;
        else
          v53 = 0;
        if (v81)
          ++v52;
        else
          v52 += 4;
      }
      while (v52 != 18);
      v82 = 0;
      v83 = 0;
      do
      {
        *(_QWORD *)(a4 + 24 + 8 * v82) = 0;
        v84 = v83 < 2;
        if (v83 < 2)
          ++v83;
        else
          v83 = 0;
        if (v84)
          ++v82;
        else
          v82 += 4;
      }
      while (v82 != 18);
      *(_QWORD *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 168) = v72;
      *(_QWORD *)(a4 + 232) = 0;
      *(_QWORD *)&v85 = 0;
      *((_QWORD *)&v85 + 1) = v76;
      *(_OWORD *)(a4 + 216) = v85;
      *(_QWORD *)(a4 + 280) = v75;
      *(_OWORD *)(a4 + 264) = 0uLL;
    }
    v86 = *(float64x2_t **)(a1 + 112);
    v87 = vmulq_f64(*(float64x2_t *)a3, v86[1]);
    v88 = vmulq_f64(*(float64x2_t *)(a3 + 32), v86[3]);
    *(float64x2_t *)(a3 + 16) = vmulq_f64(*(float64x2_t *)(a3 + 16), v86[2]);
    *(float64x2_t *)(a3 + 32) = v88;
    *(float64x2_t *)a3 = v87;
  }
  return v11 != 0;
}

double sub_20F5650E8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  *(_QWORD *)a2 = a1[2];
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = v2;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  v4 = a1[5];
  *(_QWORD *)(a2 + 112) = a1[4];
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_QWORD *)(a2 + 168) = v4;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  v5 = a2 + 232;
  v6 = a1[7];
  *(_QWORD *)(v5 - 8) = a1[6];
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = v6;
  return result;
}

uint64_t sub_20F565144(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  float64x2_t *v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  void *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t *v48;
  const void *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v56;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  _QWORD *v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  uint64_t v123;
  uint64_t v124;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v138;
  float64x2_t v155[113];
  char v156;
  float64x2_t v157[112];
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7848;
  v7 = a1 + 7688;
  v8 = sub_20F565D3C(a1);
  *(_BYTE *)(v6 + 128) = v8;
  v9 = 0.0;
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)(a1 + 7984);
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v10 + 24))(v10, v6, 0.0);
      v11 = *(float64x2_t **)(a1 + 7984);
      v12 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v11->f64[0] + 16))(v11);
      sub_20F576E60((float64x2_t *)&v156, v7, a3, v13, v14, v15, v16, v17, v18, v19, v11, v12);
      sub_20F572AE8(&v156, v20, v21, v22, v23, v24, v25, v26, v7, a3, v11, v12);
      sub_20F56FE10((float64_t *)&v156, v27, v28, v29, v30, v31, v32, v33, v34, v7, (uint64_t)a3, v11, v12);
      v43 = sub_20F56BAB4(&v156, v35, v36, v37, v38, v39, v40, v41, v42, v7, (uint64_t)a3, v11, v12);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7720) + 20))
      {
        v48 = a3 + 225;
        switch(v12)
        {
          case 0:
            if ((float64x2_t *)&a3[232].f64[1] > &v11[1] && (float64x2_t *)&v11[113].f64[1] > v48)
            {
              MEMORY[0x24BDAC7A8](v43);
              v43 = memcpy(v155, v49, 0x708uLL);
            }
            MEMORY[0x24BDAC7A8](v43);
            v50 = a3[226];
            v155[-8] = *v48;
            v155[-7] = v50;
            v51 = a3[228];
            v155[-6] = a3[227];
            v155[-5] = v51;
            v52 = a3[230];
            v155[-4] = a3[229];
            v155[-3] = v52;
            v155[-1].f64[0] = a3[232].f64[0];
            v155[-2] = a3[231];
            _Q7 = v155[-8];
            _Q17 = _Q7;
            v56 = v155[-7];
            _Q1 = v56;
            v59 = v155[-6];
            _Q2 = v59;
            v61 = v155[-5];
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 16), _Q7.f64[0]), *(float64x2_t *)(v53 + 136), _Q7, 1), *(float64x2_t *)(v53 + 256), v56.f64[0]), *(float64x2_t *)(v54 + 104), v56, 1), *(float64x2_t *)(v53 + 496), v59.f64[0]), *(float64x2_t *)(v53 + 616), v59,
                        1),
                      *(float64x2_t *)(v53 + 736),
                      v61.f64[0]),
                    *(float64x2_t *)(v53 + 856),
                    v61,
                    1);
            _Q3 = v61;
            v64 = v155[-4];
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v53, _Q7.f64[0]), *(float64x2_t *)(v53 + 120), _Q7, 1), *(float64x2_t *)(v53 + 240), v56.f64[0]), *(float64x2_t *)(v54 + 88), v56, 1), *(float64x2_t *)(v53 + 480), v59.f64[0]),
                            *(float64x2_t *)(v53 + 600),
                            v59,
                            1),
                          *(float64x2_t *)(v53 + 720),
                          v61.f64[0]),
                        *(float64x2_t *)(v53 + 840),
                        v61,
                        1),
                      *(float64x2_t *)(v53 + 960),
                      v64.f64[0]),
                    *(float64x2_t *)(v53 + 1080),
                    v64,
                    1);
            _Q4 = v64;
            v67 = v155[-3];
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, *(float64x2_t *)(v53 + 976), v64.f64[0]), *(float64x2_t *)(v53 + 1096), v64, 1), *(float64x2_t *)(v53 + 1216), v67.f64[0]), *(float64x2_t *)(v53 + 1336), v67, 1);
            _Q5 = v67;
            v70 = v155[-2];
            v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, *(float64x2_t *)(v53 + 1200), v67.f64[0]), *(float64x2_t *)(v53 + 1320), v67, 1), *(float64x2_t *)(v53 + 1440), v70.f64[0]);
            v67.f64[0] = v155[-1].f64[0];
            v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, *(float64x2_t *)(v53 + 1456), v70.f64[0]), *(float64x2_t *)(v53 + 1576), v70, 1), *(float64x2_t *)(v53 + 1696), v67.f64[0]);
            *v48 = vmlaq_n_f64(vmlaq_laneq_f64(v71, *(float64x2_t *)(v53 + 1560), v70, 1), *(float64x2_t *)(v53 + 1680), v67.f64[0]);
            a3[226] = v72;
            v73 = v155[-8];
            v74 = v155[-7];
            v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 32), v73.f64[0]), *(float64x2_t *)(v53 + 152), v73, 1), *(float64x2_t *)(v53 + 272), v74.f64[0]), *(float64x2_t *)(v54 + 120), v74, 1);
            v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 48), v73.f64[0]), *(float64x2_t *)(v53 + 168), v73, 1), *(float64x2_t *)(v53 + 288), v74.f64[0]), *(float64x2_t *)(v54 + 136), v74, 1);
            v77 = v155[-6];
            v78 = v155[-5];
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v76, *(float64x2_t *)(v53 + 528), v77.f64[0]), *(float64x2_t *)(v53 + 648), v77, 1), *(float64x2_t *)(v53 + 768), v78.f64[0]), *(float64x2_t *)(v53 + 888), v78, 1);
            v80 = v155[-4];
            v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v75, *(float64x2_t *)(v53 + 512), v77.f64[0]), *(float64x2_t *)(v53 + 632), v77, 1), *(float64x2_t *)(v53 + 752), v78.f64[0]), *(float64x2_t *)(v53 + 872), v78, 1), *(float64x2_t *)(v53 + 992), v80.f64[0]);
            v82 = v155[-3];
            v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v81, *(float64x2_t *)(v53 + 1112), v80, 1), *(float64x2_t *)(v53 + 1232), v82.f64[0]), *(float64x2_t *)(v53 + 1352), v82, 1);
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v79, *(float64x2_t *)(v53 + 1008), v80.f64[0]), *(float64x2_t *)(v53 + 1128), v80, 1), *(float64x2_t *)(v53 + 1248), v82.f64[0]), *(float64x2_t *)(v53 + 1368), v82, 1);
            v85 = v155[-2];
            v86 = v155[-1].f64[0];
            v87 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v84, *(float64x2_t *)(v53 + 1488), v85.f64[0]), *(float64x2_t *)(v53 + 1608), v85, 1), *(float64x2_t *)(v53 + 1728), v86);
            a3[227] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v83, *(float64x2_t *)(v53 + 1472), v85.f64[0]), *(float64x2_t *)(v53 + 1592), v85, 1), *(float64x2_t *)(v53 + 1712), v86);
            a3[228] = v87;
            v88 = v155[-8];
            _Q16 = v155[-7];
            v90 = v155[-6];
            v91 = v155[-5];
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 64), v88.f64[0]), *(float64x2_t *)(v53 + 184), v88, 1), *(float64x2_t *)(v53 + 304), _Q16.f64[0]), *(float64x2_t *)(v54 + 152), _Q16, 1), *(float64x2_t *)(v53 + 544), v90.f64[0]), *(float64x2_t *)(v53 + 664), v90,
                        1),
                      *(float64x2_t *)(v53 + 784),
                      v91.f64[0]),
                    *(float64x2_t *)(v53 + 904),
                    v91,
                    1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 80), v88.f64[0]), *(float64x2_t *)(v53 + 200), v88, 1), *(float64x2_t *)(v53 + 320), _Q16.f64[0]), *(float64x2_t *)(v54 + 168), _Q16, 1), *(float64x2_t *)(v53 + 560), v90.f64[0]), *(float64x2_t *)(v53 + 680), v90,
                        1),
                      *(float64x2_t *)(v53 + 800),
                      v91.f64[0]),
                    *(float64x2_t *)(v53 + 920),
                    v91,
                    1);
            v94 = v155[-4];
            _Q18 = v155[-3];
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v92, *(float64x2_t *)(v53 + 1024), v94.f64[0]), *(float64x2_t *)(v53 + 1144), v94, 1), *(float64x2_t *)(v53 + 1264), _Q18.f64[0]), *(float64x2_t *)(v53 + 1384), _Q18, 1);
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, *(float64x2_t *)(v53 + 1040), v94.f64[0]), *(float64x2_t *)(v53 + 1160), v94, 1), *(float64x2_t *)(v53 + 1280), _Q18.f64[0]), *(float64x2_t *)(v53 + 1400), _Q18, 1);
            v98 = v155[-2];
            _Q18.f64[0] = v155[-1].f64[0];
            _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v97, *(float64x2_t *)(v53 + 1520), v98.f64[0]), *(float64x2_t *)(v53 + 1640), v98, 1), *(float64x2_t *)(v53 + 1760), _Q18.f64[0]);
            a3[229] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, *(float64x2_t *)(v53 + 1504), v98.f64[0]), *(float64x2_t *)(v53 + 1624), v98, 1), *(float64x2_t *)(v53 + 1744), _Q18.f64[0]);
            a3[230] = _Q0;
            _Q7.f64[0] = *(float64_t *)(v53 + 232);
            _Q16.f64[0] = *(float64_t *)(v53 + 472);
            __asm
            {
              FMLA            D0, D7, V17.D[1]
              FMLA            D0, D16, V1.D[1]
            }
            _Q16.f64[0] = *(float64_t *)(v53 + 712);
            _Q7.f64[0] = *(float64_t *)(v53 + 952);
            v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 96), _Q17.f64[0]), *(float64x2_t *)(v53 + 216), _Q17, 1), *(float64x2_t *)(v53 + 336), _Q1.f64[0]), *(float64x2_t *)(v54 + 184), _Q1, 1), *(float64x2_t *)(v53 + 576), _Q2.f64[0]), *(float64x2_t *)(v53 + 696), _Q2,
                         1),
                       *(float64x2_t *)(v53 + 816),
                       _Q3.f64[0]),
                     *(float64x2_t *)(v53 + 936),
                     _Q3,
                     1);
            __asm
            {
              FMLA            D0, D16, V2.D[1]
              FMLA            D0, D7, V3.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v53 + 1192);
            _Q18.f64[0] = *(float64_t *)(v53 + 1432);
            __asm
            {
              FMLA            D0, D3, V4.D[1]
              FMLA            D0, D18, V5.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v53 + 1672);
            _Q16.f64[0] = v155[-1].f64[0];
            _Q17 = v155[-2];
            v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v104, *(float64x2_t *)(v53 + 1056), _Q4.f64[0]), *(float64x2_t *)(v53 + 1176), _Q4, 1), *(float64x2_t *)(v53 + 1296), _Q5.f64[0]), *(float64x2_t *)(v53 + 1416), _Q5, 1), *(float64x2_t *)(v53 + 1536), _Q17.f64[0]), *(float64x2_t *)(v53 + 1656), _Q17, 1),
                     *(float64x2_t *)(v53 + 1776),
                     _Q16.f64[0]);
            __asm { FMLA            D0, D3, V17.D[1] }
            a3[232].f64[0] = _Q0.f64[0] + *(double *)(v53 + 1792) * _Q16.f64[0];
            a3[231] = v106;
            break;
          case 1:
            v46.f64[0] = a3[232].f64[0];
            v47.f64[0] = v11[8].f64[0];
            v107 = vmulq_f64(a3[225], v11[1]);
            v108 = vmulq_f64(a3[231], v11[7]);
            v109 = vmulq_f64(a3[230], v11[6]);
            v110 = vmulq_f64(a3[229], v11[5]);
            v111 = vmulq_f64(a3[228], v11[4]);
            v112 = vmulq_f64(a3[226], v11[2]);
            a3[227] = vmulq_f64(a3[227], v11[3]);
            a3[228] = v111;
            a3[229] = v110;
            a3[230] = v109;
            a3[231] = v108;
            *v48 = v107;
            a3[226] = v112;
            *(_QWORD *)&a3[232].f64[0] = *(_OWORD *)&vmulq_f64(v46, v47);
            break;
          case 2:
            v44.f64[0] = v11[1].f64[0];
            v45.f64[0] = a3[232].f64[0];
            v113 = vmulq_n_f64(a3[231], v44.f64[0]);
            v114 = vmulq_n_f64(a3[230], v44.f64[0]);
            v115 = vmulq_n_f64(a3[229], v44.f64[0]);
            v116 = vmulq_n_f64(a3[228], v44.f64[0]);
            v117 = vmulq_n_f64(a3[227], v44.f64[0]);
            v118 = vmulq_n_f64(a3[226], v44.f64[0]);
            *v48 = vmulq_n_f64(*v48, v44.f64[0]);
            a3[226] = v118;
            a3[227] = v117;
            a3[228] = v116;
            a3[229] = v115;
            a3[230] = v114;
            a3[231] = v113;
            *(_QWORD *)&a3[232].f64[0] = *(_OWORD *)&vmulq_f64(v45, v44);
            break;
          case 4:
            v119 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(v157, v11);
            MEMORY[0x24BDAC7A8](v119);
            v120 = a3[226];
            v155[105] = *v48;
            v155[106] = v120;
            v121 = a3[228];
            v155[107] = a3[227];
            v155[108] = v121;
            v122 = a3[230];
            v155[109] = a3[229];
            v155[110] = v122;
            v155[112].f64[0] = a3[232].f64[0];
            v155[111] = a3[231];
            _Q17 = v155[105];
            _Q1 = v155[106];
            _Q2 = v155[107];
            _Q3 = v155[108];
            _Q4 = v155[109];
            _Q5 = v122;
            v131 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[1], v155[105].f64[0]), *(float64x2_t *)(v123 + 136), v155[105], 1), *(float64x2_t *)(v123 + 256), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 104),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 496),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 344),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 464),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 584),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 976),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 824),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 944),
                             v155[110].f64[0]),
                           *(float64x2_t *)(v124 + 1064),
                           v155[110],
                           1),
                         *(float64x2_t *)(v123 + 1456),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1304),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1424),
                     v155[112].f64[0]);
            *v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[0], v155[105].f64[0]), *(float64x2_t *)((char *)&v157[7] + 8), v155[105], 1), *(float64x2_t *)(v123 + 240), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 88),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 480),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 328),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 448),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 568),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 960),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 808),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 928),
                             v122.f64[0]),
                           *(float64x2_t *)(v124 + 1048),
                           v122,
                           1),
                         *(float64x2_t *)(v123 + 1440),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1288),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1408),
                     v155[112].f64[0]);
            a3[226] = v131;
            v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[3], v155[105].f64[0]), *(float64x2_t *)(v123 + 168), v155[105], 1), *(float64x2_t *)(v124 + 16), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 136),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 528),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 376),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 496),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 616),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 1008),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 856),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 976),
                             v155[110].f64[0]),
                           *(float64x2_t *)(v124 + 1096),
                           v155[110],
                           1),
                         *(float64x2_t *)(v123 + 1488),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1336),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1456),
                     v155[112].f64[0]);
            a3[227] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[2], v155[105].f64[0]), *(float64x2_t *)(v123 + 152), v155[105], 1), *(float64x2_t *)v124, v155[106].f64[0]),
                                              *(float64x2_t *)(v124 + 120),
                                              v155[106],
                                              1),
                                            *(float64x2_t *)(v123 + 512),
                                            v155[107].f64[0]),
                                          *(float64x2_t *)(v124 + 360),
                                          v155[107],
                                          1),
                                        *(float64x2_t *)(v124 + 480),
                                        v155[108].f64[0]),
                                      *(float64x2_t *)(v124 + 600),
                                      v155[108],
                                      1),
                                    *(float64x2_t *)(v123 + 992),
                                    v155[109].f64[0]),
                                  *(float64x2_t *)(v124 + 840),
                                  v155[109],
                                  1),
                                *(float64x2_t *)(v124 + 960),
                                v155[110].f64[0]),
                              *(float64x2_t *)(v124 + 1080),
                              v155[110],
                              1),
                            *(float64x2_t *)(v123 + 1472),
                            v155[111].f64[0]),
                          *(float64x2_t *)(v124 + 1320),
                          v155[111],
                          1),
                        *(float64x2_t *)(v124 + 1440),
                        v155[112].f64[0]);
            a3[228] = v132;
            _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[5], v155[105].f64[0]), *(float64x2_t *)(v123 + 200), v155[105], 1), *(float64x2_t *)(v124 + 48), v155[106].f64[0]),
                                          *(float64x2_t *)(v124 + 168),
                                          v155[106],
                                          1),
                                        *(float64x2_t *)(v123 + 560),
                                        v155[107].f64[0]),
                                      *(float64x2_t *)(v124 + 408),
                                      v155[107],
                                      1),
                                    *(float64x2_t *)(v124 + 528),
                                    v155[108].f64[0]),
                                  *(float64x2_t *)(v124 + 648),
                                  v155[108],
                                  1),
                                *(float64x2_t *)(v123 + 1040),
                                v155[109].f64[0]),
                              *(float64x2_t *)(v124 + 888),
                              v155[109],
                              1),
                            *(float64x2_t *)(v124 + 1008),
                            v155[110].f64[0]),
                          *(float64x2_t *)(v124 + 1128),
                          v155[110],
                          1),
                        *(float64x2_t *)(v123 + 1520),
                        v155[111].f64[0]),
                      *(float64x2_t *)(v124 + 1368),
                      v155[111],
                      1),
                    *(float64x2_t *)(v124 + 1488),
                    v155[112].f64[0]);
            a3[229] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[4], v155[105].f64[0]), *(float64x2_t *)(v123 + 184), v155[105], 1), *(float64x2_t *)(v124 + 32), v155[106].f64[0]),
                                              *(float64x2_t *)(v124 + 152),
                                              v155[106],
                                              1),
                                            *(float64x2_t *)(v123 + 544),
                                            v155[107].f64[0]),
                                          *(float64x2_t *)(v124 + 392),
                                          v155[107],
                                          1),
                                        *(float64x2_t *)(v124 + 512),
                                        v155[108].f64[0]),
                                      *(float64x2_t *)(v124 + 632),
                                      v155[108],
                                      1),
                                    *(float64x2_t *)(v123 + 1024),
                                    v155[109].f64[0]),
                                  *(float64x2_t *)(v124 + 872),
                                  v155[109],
                                  1),
                                *(float64x2_t *)(v124 + 992),
                                v155[110].f64[0]),
                              *(float64x2_t *)(v124 + 1112),
                              v155[110],
                              1),
                            *(float64x2_t *)(v123 + 1504),
                            v155[111].f64[0]),
                          *(float64x2_t *)(v124 + 1352),
                          v155[111],
                          1),
                        *(float64x2_t *)(v124 + 1472),
                        v155[112].f64[0]);
            a3[230] = _Q0;
            _D7 = *(_QWORD *)(v123 + 232);
            _D16 = *(_QWORD *)(v124 + 200);
            __asm
            {
              FMLA            D0, D7, V17.D[1]
              FMLA            D0, D16, V1.D[1]
            }
            _D16 = *(_QWORD *)(v124 + 440);
            _D7 = *(_QWORD *)(v124 + 680);
            v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[6], _Q17.f64[0]), *(float64x2_t *)(v123 + 216), _Q17, 1), *(float64x2_t *)(v124 + 64), _Q1.f64[0]), *(float64x2_t *)(v124 + 184), _Q1, 1), *(float64x2_t *)(v124 + 304), _Q2.f64[0]), *(float64x2_t *)(v124 + 424), _Q2, 1), *(float64x2_t *)(v124 + 544), _Q3.f64[0]), *(float64x2_t *)(v124 + 664),
                     _Q3,
                     1);
            __asm
            {
              FMLA            D0, D16, V2.D[1]
              FMLA            D0, D7, V3.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v124 + 920);
            _D18 = *(_QWORD *)(v124 + 1160);
            __asm
            {
              FMLA            D0, D3, V4.D[1]
              FMLA            D0, D18, V5.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v124 + 1400);
            _Q17.f64[1] = v155[111].f64[1];
            __asm { FMLA            D0, D3, V17.D[1] }
            _Q0.f64[0] = _Q0.f64[0] + *(double *)(v124 + 1520) * v155[112].f64[0];
            a3[231] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v138, *(float64x2_t *)(v124 + 784), _Q4.f64[0]), *(float64x2_t *)(v124 + 904), _Q4, 1), *(float64x2_t *)(v124 + 1024), _Q5.f64[0]), *(float64x2_t *)(v124 + 1144), _Q5, 1), *(float64x2_t *)(v124 + 1264), v155[111].f64[0]), *(float64x2_t *)(v124 + 1384), v155[111], 1),
                        *(float64x2_t *)(v124 + 1504),
                        v155[112].f64[0]);
            a3[232].f64[0] = _Q0.f64[0];
            break;
          default:
            break;
        }
      }
    }
    _Q2 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 7728) = *(_OWORD *)v6;
    _Q1 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 7744) = *(_OWORD *)(v6 + 16);
    _Q6 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 7760) = *(_OWORD *)(v6 + 32);
    _Q3 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 7776) = *(_OWORD *)(v6 + 48);
    *(_QWORD *)(a1 + 7840) = *(_QWORD *)(v6 + 112);
    _Q4 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 7824) = *(_OWORD *)(v6 + 96);
    _Q5 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 7808) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 7792) = *(_OWORD *)(v6 + 64);
    _D17 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D16, D17, V1.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D16, D1, V2.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q3 + 1);
    __asm { FMLA            D16, D1, V3.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q6 + 1);
    __asm { FMLA            D16, D1, V6.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q5 + 1);
    __asm { FMLA            D16, D1, V5.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q4 + 1);
    __asm { FMLA            D16, D1, V4.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(v6 + 104);
    __asm { FMLA            D16, D1, V7.D[1] }
    v9 = *(double *)(a2 + 8) * (_D16 + *(double *)(v6 + 112) * *(double *)(v6 + 112));
  }
  *(double *)(a1 + 7968) = v9;
  return v8;
}

uint64_t sub_20F565D3C(uint64_t a1)
{
  uint64_t v1;
  int8x16_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t **v12;
  int8x16_t *v13;
  int8x16_t *v14;
  float64x2_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  double *v27;
  unint64_t v28;
  double *v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  int8x16_t v38;
  unint64_t v39;
  float64x2_t *v40;
  unint64_t v41;
  unint64_t v42;
  int8x16_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float64x2_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  double v65;
  float64x2_t v67;
  float64_t v68;
  float64x2_t v71;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v77;
  double v83;
  double v84;
  double v85;
  double v86;
  float64x2_t v87;
  float64_t v88;
  double v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v98;
  double v100;
  float64x2_t v101;
  float64x2_t v103;
  float64x2_t v106;
  uint64_t v107;
  float64x2_t v109;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v123;
  float64x2_t v124;
  double v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  float64x2_t v158;
  float64x2_t v159;
  double v160;
  double v161;
  float64x2_t v162;
  uint64_t v163;
  _BOOL4 v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned __int8 v169;
  const char *v170;
  size_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  size_t v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  std::__shared_weak_count *v180;
  unint64_t *p_shared_owners;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  float64x2_t v220;
  unint64_t v221;
  float64x2_t v222;
  unint64_t v223;
  float64x2_t v224;
  float64x2_t v226;
  float64x2_t v227;
  int64x2_t v228;
  float64x2_t v230;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  int64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  int8x16_t v265;
  unint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  float64x2_t *v272;
  float64x2_t *v273;
  float64x2_t v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  size_t v280;
  const char *v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  uint64_t v362;
  double v363;
  int v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v368;
  uint64_t *v369;
  void *v370;
  void *v371;
  unsigned __int8 v372;
  const char *v373;
  size_t v374;
  _BYTE *v375;
  uint64_t v376;
  uint64_t v377;
  _BYTE *v378;
  uint64_t v379;
  uint64_t v380;
  NSObject *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unsigned __int8 v385;
  float64_t v386;
  const char *v387;
  NSObject *v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  int8x16_t v395;
  float64x2_t v396;
  int v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  void *v402;
  void *v403;
  int v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  void *v408;
  void *v409;
  unsigned __int8 v410;
  float64_t v411;
  const char *v412;
  NSObject *v413;
  unsigned __int8 v414;
  float64_t v415;
  const char *v416;
  NSObject *v417;
  float64x2_t v418;
  int v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  void *v423;
  void *v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  int v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t *v435;
  void *v436;
  void *v437;
  unsigned __int8 v438;
  float64_t v439;
  const char *v440;
  NSObject *v441;
  unsigned __int8 v443;
  float64_t v444;
  const char *v445;
  NSObject *v446;
  float64x2_t v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  unsigned __int8 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  float64x2_t v582;
  __int128 v583;
  float64x2_t v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  float64x2_t v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  std::runtime_error *exception;
  const char *v676;
  uint64_t v677;
  uint64_t v678;
  __int128 v679;
  uint64_t v680;
  int64x2_t v681;
  int64x2_t v682;
  int64x2_t v683;
  int64x2_t v684;
  int64x2_t v685;
  int64x2_t v686;
  int64x2_t v687;
  int64x2_t v688;
  int64x2_t v689;
  int64x2_t v690;
  int64x2_t v691;
  int64x2_t v692;
  int64x2_t v693;
  int64x2_t v694;
  int64x2_t v695;
  int64x2_t v696;
  int64x2_t v697;
  int64x2_t v698;
  int64x2_t v699;
  int64x2_t v700;
  int64x2_t v701;
  int64x2_t v702;
  int64x2_t v703;
  int64x2_t v704;
  int64x2_t v705;
  int64x2_t v706;
  int64x2_t v707;
  int64x2_t v708;
  int64x2_t v709;
  __int128 v710;
  __int128 v711;
  int64x2_t v712;
  int64x2_t v713;
  int64x2_t v714;
  int64x2_t v715;
  int64x2_t v716;
  int64x2_t v717;
  __int128 v718;
  __int128 v719;
  int64x2_t v720;
  int64x2_t v721;
  __int128 v722;
  __int128 v723;
  int64x2_t v724;
  int64x2_t v725;
  __int128 v726;
  __int128 v727;
  int64x2_t v728;
  int64x2_t v729;
  __int128 v730;
  __int128 v731;
  int64x2_t v732;
  __int128 v733;
  int64x2_t v734;
  int64x2_t v735;
  int64x2_t v736;
  int64x2_t v737;
  __int128 v738;
  int64x2_t v739;
  __int128 v740;
  int64x2_t v741;
  unint64_t v742;
  __int128 v743;
  unint64_t v744;
  __int128 v745;
  unint64_t v746;
  int64x2_t v747;
  unint64_t v748;
  __int128 v749;
  int8x16_t v750;
  double v751;
  int8x16_t v752;
  double v753;
  int8x16_t v754;
  double v755;
  float64_t v756;
  float64_t v757;
  float64_t v758;
  float64_t v759;
  uint64_t v760;
  unint64_t v761;
  int64x2_t v762;
  int8x16_t v763;
  double v764;
  __int128 v765;
  int v766;
  int8x16_t v767;
  __int128 v768;
  float64x2_t v769;
  int64x2_t v770;
  int8x16_t v771;
  __int128 v772;
  int8x16_t v773;
  __int128 v774;
  int8x16_t v775;
  int64x2_t v776;
  int8x16_t v777;
  int64x2_t v778;
  float64_t v779;
  double v780;
  int8x16_t **v781;
  __int128 v782;
  int8x16_t v783;
  double v784;
  uint64_t *v785;
  int v786[4];
  int64x2_t v787;
  int v788[4];
  uint64_t v789;
  int64x2_t v790;
  int v791[4];
  float64x2_t v792;
  int v793;
  __int128 v794;
  float64x2_t v795;
  int8x16_t __len;
  unint64_t __lena;
  size_t __lenc[2];
  int8x16_t __lenb;
  int8x16_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  int8x16_t v804;
  float64_t v805;
  int8x16_t v806;
  float64x2_t v807;
  int8x16_t v808;
  unint64_t v809;
  double category;
  const char *categorya;
  char *categoryc[2];
  float64x2_t categoryb;
  uint64_t v814[3];
  int v815;
  const char *v816;
  int v817;
  const char *v818;
  uint64_t v819;
  std::__shared_weak_count *v820;
  uint64_t v821;
  _BYTE __src[1800];
  float64x2_t v823;
  float64_t v824;
  float64x2_t v825;
  float64_t v826;
  float64x2_t v827;
  double v828;
  float64x2_t v829;
  _BYTE v830[32];
  float64x2_t v831;
  _BYTE v832[32];
  char v833;
  uint64_t v834;
  float64x2_t *v835;
  _OWORD v836[2];
  void *object;
  void *v838;
  size_t v839;
  unint64_t v840;
  char v841;
  void *__p[2];
  unint64_t v843;
  char v844;
  _BYTE __dst[1808];
  uint64_t v846;
  char v847;
  uint64_t v848;

  MEMORY[0x24BDAC7A8](a1);
  v848 = *MEMORY[0x24BDAC8D0];
  v7 = v1 + 3680;
  if (!*(_BYTE *)(v1 + 7681))
    return 0;
  v8 = v1;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v9 = v5;
  v10 = v4;
  v11 = v3;
  v12 = v2;
  v13 = *v2;
  v14 = v2[1];
  *(_QWORD *)&v6 = (*v2)[3].i64[0];
  *(_OWORD *)v788 = v6;
  v773 = (*v2)[2];
  v784 = *(double *)&(*v2)[4].i64[1];
  v775 = *(int8x16_t *)((char *)*v2 + 56);
  v780 = *(double *)(*v2)[6].i64;
  v777 = (*v2)[5];
  v760 = (*v2)[7].i64[1];
  v763 = *(int8x16_t *)((char *)*v2 + 104);
  category = *(double *)v14[3].i64;
  __len = v14[2];
  *(_QWORD *)&v15.f64[1] = v14[2].i64[1];
  *(_QWORD *)&v15.f64[0] = v14[4].i64[1];
  v792 = v15;
  v767 = *(int8x16_t *)((char *)v14 + 56);
  *(_QWORD *)&v15.f64[1] = v14[4].i64[0];
  *(_QWORD *)&v15.f64[0] = v14[6].i64[0];
  v769 = v15;
  v771 = v14[5];
  v16 = v2[2];
  v17 = v2[3];
  v751 = *(double *)v16[3].i64;
  v750 = v16[2];
  v753 = *(double *)&v16[4].i64[1];
  v752 = *(int8x16_t *)((char *)v16 + 56);
  v755 = *(double *)v16[6].i64;
  v754 = v16[5];
  v759 = *(double *)&v16[7].i64[1];
  v804 = *(int8x16_t *)((char *)v16 + 104);
  v757 = *(double *)v17[3].i64;
  v806 = v17[2];
  v758 = *(double *)&v17[4].i64[1];
  v808 = *(int8x16_t *)((char *)v17 + 56);
  v756 = *(double *)v17[6].i64;
  v800 = v17[5];
  v18 = v2[4];
  v19 = *(_OWORD **)(v5 + 32);
  v20 = v19[1];
  v836[0] = *v19;
  v836[1] = v20;
  v833 = 0;
  v834 = v5;
  v835 = (float64x2_t *)v836;
  if (*(_BYTE *)(v1 + 56))
  {
    v21 = (_OWORD *)(v1 + 24);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*(float64x2_t *)(v1 + 24)), (int32x4_t)vcgtzq_f64(*(float64x2_t *)(v1 + 40)))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v22 = *(_OWORD *)(v8 + 40);
    *v19 = *v21;
    v19[1] = v22;
    v13 = *v12;
  }
  if ((!v13[8].i8[0] || !v12[1][6].i8[8] || !v12[2][8].i8[0] || !v12[3][6].i8[8] || !v12[4][2].i8[8])
    && *(_BYTE *)(v7 + 3992))
  {
    *(_BYTE *)(v7 + 3992) = 0;
  }
  v23 = *(double *)v18[2].i64;
  v24 = *(double *)(v8 + 64) + v23;
  v25 = v23 + *(double *)(v8 + 72);
  sub_20FD33470(*(_QWORD **)(v9 + 24), v9, v24, v25);
  v27 = *(double **)v9;
  v26 = *(double **)(v9 + 8);
  v28 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v26 - *(_QWORD *)v9) >> 3);
  if (v28 >= 2)
  {
    v29 = v27 + 7;
    if (v27[7] - *v27 < 0.0001)
    {
      if (v27 + 14 != v26)
      {
        v30 = v27 + 11;
        do
        {
          *(v30 - 4) = v30[3];
          *(_OWORD *)(v30 - 3) = *((_OWORD *)v30 + 2);
          *(v30 - 1) = v30[6];
          *(_OWORD *)v30 = *(_OWORD *)(v30 + 7);
          v30[2] = v30[9];
          v31 = v30 + 10;
          v30 += 7;
          v29 += 7;
        }
        while (v31 != v26);
        v27 = *(double **)v9;
      }
      *(_QWORD *)(v9 + 8) = v29;
      v28 = 0x6DB6DB6DB6DB6DB7 * (v29 - v27);
      v26 = v29;
    }
    if (v28 >= 3)
    {
      v32 = &v27[7 * v28];
      v34 = *(v32 - 14);
      v33 = v32 - 14;
      if (*(v26 - 7) - v34 < 0.0001)
      {
        if (v33 + 7 == v26)
        {
          v26 = v33;
        }
        else
        {
          v35 = 112 - (_QWORD)v27;
          v36 = 7 * v28;
          do
          {
            v37 = &v27[v36];
            *(v37 - 14) = v27[v36 - 7];
            *(_OWORD *)(v37 - 13) = *(_OWORD *)&v27[v36 - 6];
            *(v37 - 11) = v27[v36 - 4];
            *((_OWORD *)v37 - 5) = *(_OWORD *)&v27[v36 - 3];
            *(v37 - 8) = v27[v36 - 1];
            v35 -= 56;
            v27 += 7;
          }
          while (&v27[v36 - 7] != v26);
          v27 = *(double **)v9;
          v26 = (double *)(56 * v28 - v35);
        }
        *(_QWORD *)(v9 + 8) = v26;
      }
    }
  }
  if (*v27 != v24 || *(v26 - 7) != v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(__dst, "IMU resampler");
    std::runtime_error::runtime_error(exception, (const std::string *)__dst);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v38 = v773;
  v39 = vextq_s8(v38, v38, 8uLL).u64[0];
  v766 = v18[1].u8[4];
  v38.i64[1] = v39;
  v40 = (float64x2_t *)(v8 + 1880);
  v823 = (float64x2_t)v38;
  v41 = vextq_s8(v775, v775, 8uLL).u64[0];
  v42 = vextq_s8(v777, v777, 8uLL).u64[0];
  v43 = v763;
  v44 = vextq_s8(__len, __len, 8uLL).u64[0];
  v45 = vextq_s8(v767, v767, 8uLL).u64[0];
  v824 = *(double *)v788;
  v826 = v784;
  v46 = vextq_s8(v771, v771, 8uLL).u64[0];
  *(_QWORD *)&v47.f64[0] = v775.i64[0];
  *(_QWORD *)&v47.f64[1] = v41;
  v825 = v47;
  *(_QWORD *)&v47.f64[0] = v777.i64[0];
  *(_QWORD *)&v47.f64[1] = v42;
  v827 = v47;
  v828 = v780;
  *(float64_t *)v830 = v792.f64[0];
  *(_QWORD *)&v47.f64[0] = v767.i64[0];
  *(_QWORD *)&v47.f64[1] = v45;
  v829 = v47;
  *(_QWORD *)&v47.f64[0] = __len.i64[0];
  *(_QWORD *)&v47.f64[1] = v44;
  *(float64x2_t *)&v830[8] = v47;
  *(double *)&v830[24] = category;
  *(float64_t *)v832 = v769.f64[0];
  *(_QWORD *)&v47.f64[0] = v771.i64[0];
  *(_QWORD *)&v47.f64[1] = v46;
  v831 = v47;
  *(_QWORD *)&v832[24] = v760;
  v43.i64[1] = vextq_s8(v43, v43, 8uLL).u64[0];
  *(int8x16_t *)&v832[8] = v43;
  if (*(_BYTE *)(v7 + 4000) && *(_BYTE *)(v7 + 3992) && (!v766 || *(_BYTE *)(v7 + 2160)))
  {
    sub_20F4BA010((uint64_t)&v823, *(_QWORD *)(v9 + 32), (uint64_t *)v9);
    v48 = *(_QWORD *)(v8 + 16);
    *(_BYTE *)(v48 + 8) = *(_BYTE *)(v7 + 2176);
    memcpy((void *)(v48 + 16), (const void *)(v8 + 5864), 0x708uLL);
    memcpy((void *)(v8 + 1880), (const void *)(v8 + 3920), 0x708uLL);
    v49 = *(_OWORD *)(v8 + 5800);
    *(_OWORD *)(v8 + 3744) = *(_OWORD *)(v8 + 5784);
    *(_OWORD *)(v8 + 3760) = v49;
    *(_OWORD *)(v8 + 3776) = *(_OWORD *)(v8 + 5816);
    v50 = *(_OWORD *)(v8 + 5736);
    *(_OWORD *)(v8 + 3680) = *(_OWORD *)(v8 + 5720);
    *(_OWORD *)(v8 + 3696) = v50;
    v51 = *(_OWORD *)(v8 + 5768);
    *(_OWORD *)(v8 + 3712) = *(_OWORD *)(v8 + 5752);
    *(_QWORD *)(v8 + 3792) = *(_QWORD *)(v8 + 5832);
    *(_OWORD *)(v8 + 3728) = v51;
    goto LABEL_94;
  }
  v742 = v45;
  v744 = v46;
  v746 = v41;
  v748 = v42;
  v761 = v39;
  v764 = *(double *)&v44;
  bzero(__src, 0x708uLL);
  sub_20F4BAD38();
  if (v766)
  {
    v56 = *(_QWORD *)v9;
    v57 = *(_QWORD *)(v9 + 8);
    if (!*(_QWORD *)v9
      && v57
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v58 = *(_QWORD *)(v9 + 32);
    v59 = *(double *)(v58 + 72);
    v60 = *(double *)(v58 + 96);
    v61 = *(double *)(v58 + 104);
    v63 = *(double *)(v58 + 80);
    v62 = *(double *)(v58 + 88);
    v53.f64[0] = *(float64_t *)(v58 + 176);
    v64 = *(float64x2_t *)(v58 + 160);
    v65 = *(double *)(v58 + 200);
    _Q20 = *(float64x2_t *)(v58 + 184);
    _Q7.f64[0] = *(float64_t *)(v58 + 224);
    v67 = *(float64x2_t *)(v58 + 208);
    v68 = v53.f64[0] * v62 + v65 * v59;
    _Q24 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v64, *(double *)(v58 + 64)), (float64x2_t)0, _Q20), (float64x2_t)0, v67);
    _Q25 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v64, v62), _Q20, v59), (float64x2_t)0, v67);
    v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, v60), _Q20, v61), v67, v63);
    _Q18.f64[0] = v53.f64[0] * v60 + v65 * v61 + _Q7.f64[0] * v63;
    _Q23 = *(float64x2_t *)(v58 + 232);
    v73 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q23.f64[0]), _Q25, _Q23, 1);
    _Q21 = *(float64x2_t *)(v58 + 256);
    v75 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q21.f64[0]), _Q25, _Q21, 1);
    _Q22 = *(float64x2_t *)(v58 + 280);
    v77 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q22.f64[0]), _Q25, _Q22, 1);
    _D28 = v68 + _Q7.f64[0] * 0.0;
    __asm
    {
      FMLA            D24, D28, V23.D[1]
      FMLA            D25, D28, V21.D[1]
      FMLA            D26, D28, V22.D[1]
    }
    v83 = *(double *)(v58 + 120);
    v84 = *(double *)(v58 + 128);
    v86 = *(double *)(v58 + 136);
    v85 = *(double *)(v58 + 144);
    v87 = vmlaq_n_f64(vmulq_n_f64(v64, v86), _Q20, v83);
    v88 = v53.f64[0] * v86 + v65 * v83;
    v89 = *(double *)(v58 + 152);
    v90 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v64, *(double *)(v58 + 112)), (float64x2_t)0, _Q20), (float64x2_t)0, v67);
    v91 = vmlaq_f64(v87, (float64x2_t)0, v67);
    _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, v85), _Q20, v89), v67, v84);
    v53.f64[0] = v53.f64[0] * v85 + v65 * v89 + _Q7.f64[0] * v84;
    _Q7.f64[0] = v88 + _Q7.f64[0] * 0.0;
    v93 = vmlaq_laneq_f64(vmulq_n_f64(v90, _Q23.f64[0]), v91, _Q23, 1);
    __asm { FMLA            D20, D7, V23.D[1] }
    v94 = vmlaq_laneq_f64(vmulq_n_f64(v90, _Q21.f64[0]), v91, _Q21, 1);
    __asm { FMLA            D27, D7, V21.D[1] }
    v96 = vmlaq_laneq_f64(vmulq_n_f64(v90, _Q22.f64[0]), v91, _Q22, 1);
    __asm { FMLA            D16, D7, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v58 + 248);
    v98 = vmlaq_n_f64(v73, v71, _Q7.f64[0]);
    _Q22.f64[0] = *(float64_t *)(v58 + 272);
    _Q5 = vmlaq_n_f64(v75, v71, _Q22.f64[0]);
    v100 = *(double *)(v58 + 296);
    v101 = vmlaq_n_f64(v77, v71, v100);
    _Q25.f64[0] = _Q25.f64[0] + _Q18.f64[0] * _Q22.f64[0];
    _Q18.f64[0] = _D26 + _Q18.f64[0] * v100;
    _Q17 = vmlaq_n_f64(v93, _Q19, _Q7.f64[0]);
    v103 = vmlaq_n_f64(v94, _Q19, _Q22.f64[0]);
    _Q20.f64[0] = _D27 + v53.f64[0] * _Q22.f64[0];
    _Q21 = vmlaq_n_f64(v96, _Q19, v100);
    v53.f64[0] = _D16 + v53.f64[0] * v100;
    _Q2 = *(float64x2_t *)(v56 + 8);
    v106 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q2.f64[0]), v103, _Q2, 1);
    __asm { FMLA            D19, D20, V2.D[1] }
    v107 = v56 + 8 * ((v57 - v56) >> 3);
    _Q22 = *(float64x2_t *)(v107 - 48);
    v109 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q22.f64[0]), v103, _Q22, 1);
    __asm { FMLA            D17, D20, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v56 + 24);
    _Q16 = vmlaq_n_f64(v106, _Q21, _Q7.f64[0]);
    _Q7.f64[0] = _Q19.f64[0] + v53.f64[0] * _Q7.f64[0];
    _Q19.f64[0] = *(float64_t *)(v107 - 32);
    v111 = vmlaq_n_f64(v109, _Q21, _Q19.f64[0]);
    v53.f64[0] = _Q17.f64[0] + v53.f64[0] * _Q19.f64[0];
    _Q17 = *(float64x2_t *)(v56 + 32);
    v113 = vmlaq_laneq_f64(vmulq_n_f64(v98, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D20, D25, V17.D[1] }
    _Q17 = *(float64x2_t *)(v107 - 24);
    v115 = vmlaq_laneq_f64(vmulq_n_f64(v98, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D5, D25, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v56 + 48);
    v116 = vmlaq_n_f64(v113, v101, _Q17.f64[0]);
    _Q20.f64[0] = _Q20.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q17.f64[0] = *(float64_t *)(v107 - 8);
    v117 = vmlaq_n_f64(v115, v101, _Q17.f64[0]);
    _Q17.f64[0] = _Q5.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q6 = vsubq_f64(v117, v831);
    _Q5.f64[1] = v825.f64[1];
    v119 = vmlaq_laneq_f64(vmulq_n_f64(v823, _Q6.f64[0]), v825, _Q6, 1);
    _Q18.f64[0] = v826;
    __asm { FMLA            D5, D18, V6.D[1] }
    _Q18.f64[0] = *(float64_t *)v832;
    _Q6.f64[0] = *(float64_t *)&v830[24];
    *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(_Q17, _Q18);
    v120 = vmlaq_n_f64(v119, v827, _Q17.f64[0]);
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v828, _Q17.f64[0]);
    *(_QWORD *)&_Q17.f64[0] = v767.i64[0];
    *(_QWORD *)&_Q17.f64[1] = v742;
    _Q17 = vsubq_f64(_Q16, _Q17);
    *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vsubq_f64(_Q20, v769);
    *(_QWORD *)&_Q16.f64[0] = v771.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v744;
    _Q19 = vsubq_f64(v116, _Q16);
    *(_QWORD *)&_Q16.f64[0] = v773.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v761;
    v123 = vmulq_n_f64(_Q16, _Q19.f64[0]);
    *(_QWORD *)&_Q16.f64[0] = v775.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v746;
    v124 = vmlaq_laneq_f64(v123, _Q16, _Q19, 1);
    *(_QWORD *)&_Q16.f64[0] = v777.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v748;
    _Q18 = vmlaq_n_f64(v124, _Q16, _Q20.f64[0]);
    _Q16.f64[1] = *(float64_t *)&v788[2];
    _Q21.f64[0] = v784;
    __asm { FMLA            D16, D21, V19.D[1] }
    _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v780, _Q20.f64[0]);
    _D27 = *(_QWORD *)(v8 + 2112);
    __asm { FMLA            D19, D27, V17.D[1] }
    *(_QWORD *)&v127 = *(_OWORD *)&vsubq_f64(_Q7, v792);
    v128 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v40, _Q17.f64[0]), *(float64x2_t *)(v8 + 2000), _Q17, 1), *(float64x2_t *)(v8 + 2120), v127);
    v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1896), _Q17.f64[0]), *(float64x2_t *)(v8 + 2016), _Q17, 1), *(float64x2_t *)(v8 + 2136), v127);
    v130 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1912), _Q17.f64[0]), *(float64x2_t *)(v8 + 2032), _Q17, 1), *(float64x2_t *)(v8 + 2152), v127);
    v131 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1928), _Q17.f64[0]), *(float64x2_t *)(v8 + 2048), _Q17, 1), *(float64x2_t *)(v8 + 2168), v127);
    v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1944), _Q17.f64[0]), *(float64x2_t *)(v8 + 2064), _Q17, 1), *(float64x2_t *)(v8 + 2184), v127);
    v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1960), _Q17.f64[0]), *(float64x2_t *)(v8 + 2080), _Q17, 1), *(float64x2_t *)(v8 + 2200), v127);
    v134 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1976), _Q17.f64[0]), *(float64x2_t *)(v8 + 2096), _Q17, 1), *(float64x2_t *)(v8 + 2216), v127);
    v135 = *(float64x2_t *)(v58 + 32);
    _Q17 = vsubq_f64(_Q18, v135);
    v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v128, (float64x2_t)0, *(float64x2_t *)(v8 + 2240)), (float64x2_t)0, *(float64x2_t *)(v8 + 2360)), (float64x2_t)0, *(float64x2_t *)(v8 + 2480)), *(float64x2_t *)(v8 + 2600), _Q17.f64[0]), *(float64x2_t *)(v8 + 2720), _Q17, 1);
    v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v129, (float64x2_t)0, *(float64x2_t *)(v8 + 2256)), (float64x2_t)0, *(float64x2_t *)(v8 + 2376)), (float64x2_t)0, *(float64x2_t *)(v8 + 2496)), *(float64x2_t *)(v8 + 2616), _Q17.f64[0]), *(float64x2_t *)(v8 + 2736), _Q17, 1);
    v139 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v130, (float64x2_t)0, *(float64x2_t *)(v8 + 2272)), (float64x2_t)0, *(float64x2_t *)(v8 + 2392)), (float64x2_t)0, *(float64x2_t *)(v8 + 2512)), *(float64x2_t *)(v8 + 2632), _Q17.f64[0]), *(float64x2_t *)(v8 + 2752), _Q17, 1);
    v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v131, (float64x2_t)0, *(float64x2_t *)(v8 + 2288)), (float64x2_t)0, *(float64x2_t *)(v8 + 2408)), (float64x2_t)0, *(float64x2_t *)(v8 + 2528)), *(float64x2_t *)(v8 + 2648), _Q17.f64[0]), *(float64x2_t *)(v8 + 2768), _Q17, 1);
    v141 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v132, (float64x2_t)0, *(float64x2_t *)(v8 + 2304)), (float64x2_t)0, *(float64x2_t *)(v8 + 2424)), (float64x2_t)0, *(float64x2_t *)(v8 + 2544)), *(float64x2_t *)(v8 + 2664), _Q17.f64[0]), *(float64x2_t *)(v8 + 2784), _Q17, 1);
    v142 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v133, (float64x2_t)0, *(float64x2_t *)(v8 + 2320)), (float64x2_t)0, *(float64x2_t *)(v8 + 2440)), (float64x2_t)0, *(float64x2_t *)(v8 + 2560)), *(float64x2_t *)(v8 + 2680), _Q17.f64[0]), *(float64x2_t *)(v8 + 2800), _Q17, 1);
    v143 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v134, (float64x2_t)0, *(float64x2_t *)(v8 + 2336)), (float64x2_t)0, *(float64x2_t *)(v8 + 2456)), (float64x2_t)0, *(float64x2_t *)(v8 + 2576)), *(float64x2_t *)(v8 + 2696), _Q17.f64[0]), *(float64x2_t *)(v8 + 2816), _Q17, 1);
    _Q19.f64[0] = *(float64_t *)(v8 + 2832);
    __asm { FMLA            D18, D19, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v58 + 48);
    *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(_Q16, _Q17);
    v144 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v137, *(float64x2_t *)(v8 + 2840), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 2960)), (float64x2_t)0, *(float64x2_t *)(v8 + 3080)), (float64x2_t)0, *(float64x2_t *)(v8 + 3200)), *(float64x2_t *)(v8 + 3320), *(double *)__len.i64), *(float64x2_t *)(v8 + 3440), v764), *(float64x2_t *)(v8 + 3560), category);
    v145 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v138, *(float64x2_t *)(v8 + 2856), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 2976)), (float64x2_t)0, *(float64x2_t *)(v8 + 3096)), (float64x2_t)0, *(float64x2_t *)(v8 + 3216)), *(float64x2_t *)(v8 + 3336), *(double *)__len.i64), *(float64x2_t *)(v8 + 3456), v764), *(float64x2_t *)(v8 + 3576), category);
    v146 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v139, *(float64x2_t *)(v8 + 2872), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 2992)), (float64x2_t)0, *(float64x2_t *)(v8 + 3112)), (float64x2_t)0, *(float64x2_t *)(v8 + 3232)), *(float64x2_t *)(v8 + 3352), *(double *)__len.i64), *(float64x2_t *)(v8 + 3472), v764), *(float64x2_t *)(v8 + 3592), category);
    v147 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v140, *(float64x2_t *)(v8 + 2888), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3008)), (float64x2_t)0, *(float64x2_t *)(v8 + 3128)), (float64x2_t)0, *(float64x2_t *)(v8 + 3248)), *(float64x2_t *)(v8 + 3368), *(double *)__len.i64), *(float64x2_t *)(v8 + 3488), v764), *(float64x2_t *)(v8 + 3608), category);
    v148 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v141, *(float64x2_t *)(v8 + 2904), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3024)), (float64x2_t)0, *(float64x2_t *)(v8 + 3144)), (float64x2_t)0, *(float64x2_t *)(v8 + 3264)), *(float64x2_t *)(v8 + 3384), *(double *)__len.i64), *(float64x2_t *)(v8 + 3504), v764), *(float64x2_t *)(v8 + 3624), category);
    v149 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v142, *(float64x2_t *)(v8 + 2920), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3040)), (float64x2_t)0, *(float64x2_t *)(v8 + 3160)), (float64x2_t)0, *(float64x2_t *)(v8 + 3280)), *(float64x2_t *)(v8 + 3400), *(double *)__len.i64), *(float64x2_t *)(v8 + 3520), v764), *(float64x2_t *)(v8 + 3640), category);
    v150 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v143, *(float64x2_t *)(v8 + 2936), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3056)), (float64x2_t)0, *(float64x2_t *)(v8 + 3176)), (float64x2_t)0, *(float64x2_t *)(v8 + 3296)), *(float64x2_t *)(v8 + 3416), *(double *)__len.i64), *(float64x2_t *)(v8 + 3536), v764), *(float64x2_t *)(v8 + 3656), category);
    v52.f64[0] = vmlad_n_f64(_Q18.f64[0], *(double *)(v8 + 2952), _Q16.f64[0])
               + *(double *)(v8 + 3072) * 0.0
               + *(double *)(v8 + 3192) * 0.0
               + *(double *)(v8 + 3312) * 0.0
               + *(double *)(v8 + 3432) * *(double *)__len.i64
               + *(double *)(v8 + 3552) * v764
               + *(double *)(v8 + 3672) * category;
    _Q16.f64[1] = v829.f64[1];
    _Q16.f64[0] = *(float64_t *)v830;
    v151 = vsubq_f64(vsubq_f64(v111, v829), v144);
    v152 = vsubq_f64(vsubq_f64(v120, v135), v147);
    v153 = vsubq_f64(*(float64x2_t *)&v830[8], v150);
    *(float64x2_t *)(v7 + 80) = vsubq_f64((float64x2_t)0, v149);
    *(float64x2_t *)(v7 + 96) = v153;
    *(float64x2_t *)(v7 + 48) = v152;
    *(float64x2_t *)(v7 + 64) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(_Q5, _Q17), v148);
    *(float64x2_t *)(v7 + 16) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(v53, _Q16), v145);
    *(float64x2_t *)(v7 + 32) = vsubq_f64((float64x2_t)0, v146);
    *(float64x2_t *)v7 = v151;
    *(_QWORD *)(v7 + 112) = *(_OWORD *)&vsubq_f64(_Q6, v52);
  }
  v154 = *(_QWORD *)(v8 + 16);
  memcpy(__dst, __src, 0x708uLL);
  bzero((void *)(v154 + 24), 0x6F8uLL);
  *(_QWORD *)(v154 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 272) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 400) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 656) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 784) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 912) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 1040) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 1168) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 1296) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 1424) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 1552) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 1680) = 0x3FF0000000000000;
  *(_QWORD *)(v154 + 1808) = 0x3FF0000000000000;
  *(_BYTE *)(v154 + 8) = sub_20F4C04B8((float64x2_t *)(v154 + 16), (float64x2_t *)__dst, 0, 0, v155, v156, v157, v158, v159, v160, v161, v162);
  if (!*(_BYTE *)(*(_QWORD *)(v8 + 16) + 8))
  {
    v163 = 0;
    do
    {
      v164 = (*(_QWORD *)&__src[v163] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)&__src[v163] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      _ZF = v163 == 1792;
      v163 += 8;
    }
    while (!_ZF);
    if (!v164)
    {
      v676 = "IMU covariance contains NaNs. Time to die.";
      v677 = 468;
      goto LABEL_265;
    }
    __dst[8] = 1;
    *(_QWORD *)__dst = &off_24CA00428;
    bzero(&__dst[24], 0x6F8uLL);
    *(_QWORD *)&__dst[16] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[144] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[272] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[400] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[528] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[656] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[784] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[912] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1040] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1168] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1296] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1424] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1552] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1680] = 0x3FF0000000000000;
    v846 = 0x3FF0000000000000;
    v847 = 1;
    sub_20F4CEBA4((uint64_t)__dst, (float64x2_t *)__src);
    if (!__dst[8])
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 474, (uint64_t)"", 0, (uint64_t)"LP Noise model failed. Fallback noise failed also. Time to die.", 63, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_20F4AD5FC(&v821);
    if (**(int **)(v821 + 56) > 5)
      goto LABEL_93;
    v165 = *(unsigned __int8 *)(v821 + 72);
    v166 = sub_20E8C31DC(v821, "OSLogSurrogateAppender", 1, 0);
    v167 = v166 + 16;
    if (!v166)
      v167 = 0;
    if (!v165 && !v166)
    {
LABEL_93:
      *(int64x2_t *)categoryc = vzip1q_s64(*(int64x2_t *)&__dst[256], *(int64x2_t *)&__dst[376]);
      *(_QWORD *)&v183 = vdupq_laneq_s64(*(int64x2_t *)&__dst[256], 1).u64[0];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[384];
      *(_OWORD *)__lenc = v183;
      v778 = vzip1q_s64(*(int64x2_t *)&__dst[496], *(int64x2_t *)&__dst[616]);
      *(_QWORD *)&v183 = vdupq_laneq_s64(*(int64x2_t *)&__dst[496], 1).u64[0];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[624];
      v794 = v183;
      v790 = vzip2q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      v770 = vzip1q_s64(*(int64x2_t *)&__dst[736], *(int64x2_t *)&__dst[856]);
      *(_QWORD *)&v184 = vdupq_laneq_s64(*(int64x2_t *)&__dst[736], 1).u64[0];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[864];
      *(_OWORD *)v786 = v184;
      v762 = vzip1q_s64(*(int64x2_t *)&__dst[976], *(int64x2_t *)&__dst[1096]);
      *(_QWORD *)&v184 = vdupq_laneq_s64(*(int64x2_t *)&__dst[976], 1).u64[0];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[1104];
      v782 = v184;
      v747 = vzip1q_s64(*(int64x2_t *)&__dst[1216], *(int64x2_t *)&__dst[1336]);
      *(_QWORD *)&v184 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1216], 1).u64[0];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[1344];
      v772 = v184;
      *(_QWORD *)&v184 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1456], 1).u64[0];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[1584];
      v768 = v184;
      v776 = vzip1q_s64(*(int64x2_t *)&__dst[272], *(int64x2_t *)&__dst[392]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[272], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[400];
      v774 = v185;
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[512], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[640];
      v765 = v185;
      v736 = vzip1q_s64(*(int64x2_t *)&__dst[752], *(int64x2_t *)&__dst[872]);
      v737 = vzip1q_s64(*(int64x2_t *)&__dst[1456], *(int64x2_t *)&__dst[1576]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[752], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[880];
      v749 = v185;
      v732 = vzip1q_s64(*(int64x2_t *)&__dst[992], *(int64x2_t *)&__dst[1112]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[992], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[1120];
      v745 = v185;
      v721 = vzip1q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      v734 = vzip1q_s64(*(int64x2_t *)&__dst[512], *(int64x2_t *)&__dst[632]);
      v735 = vzip2q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      *(_QWORD *)&v186 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1232], 1).u64[0];
      *((_QWORD *)&v186 + 1) = *(_QWORD *)&__dst[1360];
      v738 = v186;
      v728 = vzip1q_s64(*(int64x2_t *)&__dst[1472], *(int64x2_t *)&__dst[1592]);
      v729 = vzip1q_s64(*(int64x2_t *)&__dst[1232], *(int64x2_t *)&__dst[1352]);
      *(_QWORD *)&v186 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1472], 1).u64[0];
      *((_QWORD *)&v186 + 1) = *(_QWORD *)&__dst[1600];
      v740 = v186;
      *(_QWORD *)&v186 = vdupq_laneq_s64(*(int64x2_t *)&__dst[288], 1).u64[0];
      *((_QWORD *)&v186 + 1) = *(_QWORD *)&__dst[416];
      v741 = vzip1q_s64(*(int64x2_t *)&__dst[288], *(int64x2_t *)&__dst[408]);
      v743 = v186;
      v739 = vzip2q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      v724 = vzip1q_s64(*(int64x2_t *)&__dst[528], *(int64x2_t *)&__dst[648]);
      v725 = vzip1q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[528], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[656];
      v733 = v187;
      *(_QWORD *)&v188 = vdupq_laneq_s64(*(int64x2_t *)&__dst[768], 1).u64[0];
      v720 = vzip1q_s64(*(int64x2_t *)&__dst[768], *(int64x2_t *)&__dst[888]);
      *((_QWORD *)&v188 + 1) = *(_QWORD *)&__dst[896];
      v731 = v188;
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1008], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[1136];
      v727 = v187;
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1248], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[1376];
      v723 = v187;
      v709 = vzip1q_s64(*(int64x2_t *)&__dst[1488], *(int64x2_t *)&__dst[1608]);
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1488], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[1616];
      v717 = vzip1q_s64(*(int64x2_t *)&__dst[1008], *(int64x2_t *)&__dst[1128]);
      v718 = v187;
      *(_QWORD *)&v188 = vdupq_laneq_s64(*(int64x2_t *)&__dst[304], 1).u64[0];
      *((_QWORD *)&v188 + 1) = *(_QWORD *)&__dst[432];
      v730 = v188;
      v713 = vzip1q_s64(*(int64x2_t *)&__dst[1248], *(int64x2_t *)&__dst[1368]);
      v714 = vzip1q_s64(*(int64x2_t *)&__dst[304], *(int64x2_t *)&__dst[424]);
      v712 = vzip1q_s64(*(int64x2_t *)&__dst[544], *(int64x2_t *)&__dst[664]);
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[544], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[672];
      v726 = v187;
      *(_QWORD *)&v188 = vdupq_laneq_s64(*(int64x2_t *)&__dst[784], 1).u64[0];
      *((_QWORD *)&v188 + 1) = *(_QWORD *)&__dst[912];
      v722 = v188;
      v716 = vzip2q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      v707 = vzip1q_s64(*(int64x2_t *)&__dst[1024], *(int64x2_t *)&__dst[1144]);
      v708 = vzip1q_s64(*(int64x2_t *)&__dst[784], *(int64x2_t *)&__dst[904]);
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1024], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[1152];
      v710 = v187;
      *(_QWORD *)&v189 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1264], 1).u64[0];
      v703 = vzip1q_s64(*(int64x2_t *)&__dst[1264], *(int64x2_t *)&__dst[1384]);
      v704 = vzip1q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      *((_QWORD *)&v189 + 1) = *(_QWORD *)&__dst[1392];
      v702 = vzip1q_s64(*(int64x2_t *)&__dst[1504], *(int64x2_t *)&__dst[1624]);
      *(_QWORD *)&v190 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1504], 1).u64[0];
      *((_QWORD *)&v190 + 1) = *(_QWORD *)&__dst[1632];
      v715 = vzip1q_s64(*(int64x2_t *)&__dst[320], *(int64x2_t *)&__dst[440]);
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[320], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[448];
      v719 = v187;
      v705 = vzip1q_s64(*(int64x2_t *)&__dst[560], *(int64x2_t *)&__dst[680]);
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[560], 1).u64[0];
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[688];
      v711 = v187;
      *(_QWORD *)&v191 = vdupq_laneq_s64(*(int64x2_t *)&__dst[800], 1).u64[0];
      *((_QWORD *)&v191 + 1) = *(_QWORD *)&__dst[928];
      v700 = vzip1q_s64(*(int64x2_t *)&__dst[1040], *(int64x2_t *)&__dst[1160]);
      v701 = vzip1q_s64(*(int64x2_t *)&__dst[800], *(int64x2_t *)&__dst[920]);
      *(_QWORD *)&v192 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1040], 1).u64[0];
      *((_QWORD *)&v192 + 1) = *(_QWORD *)&__dst[1168];
      *(_QWORD *)&v193 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1280], 1).u64[0];
      *((_QWORD *)&v193 + 1) = *(_QWORD *)&__dst[1408];
      v689 = vzip1q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      v699 = vzip2q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      *(_QWORD *)&v194 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1520], 1).u64[0];
      *((_QWORD *)&v194 + 1) = *(_QWORD *)&__dst[1648];
      *(_QWORD *)&v195 = vdupq_laneq_s64(*(int64x2_t *)&__dst[336], 1).u64[0];
      v697 = vzip1q_s64(*(int64x2_t *)&__dst[1280], *(int64x2_t *)&__dst[1400]);
      v698 = vzip1q_s64(*(int64x2_t *)&__dst[336], *(int64x2_t *)&__dst[456]);
      *((_QWORD *)&v195 + 1) = *(_QWORD *)&__dst[464];
      v696 = vzip1q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v706 = vzip2q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v694 = vzip1q_s64(*(int64x2_t *)&__dst[1520], *(int64x2_t *)&__dst[1640]);
      v695 = vzip1q_s64(*(int64x2_t *)&__dst[576], *(int64x2_t *)&__dst[696]);
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[576], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[704];
      *(_QWORD *)&v197 = vdupq_laneq_s64(*(int64x2_t *)&__dst[816], 1).u64[0];
      v693 = vzip1q_s64(*(int64x2_t *)&__dst[816], *(int64x2_t *)&__dst[936]);
      *((_QWORD *)&v197 + 1) = *(_QWORD *)&__dst[944];
      *(_QWORD *)&v198 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1056], 1).u64[0];
      *((_QWORD *)&v198 + 1) = *(_QWORD *)&__dst[1184];
      *(_QWORD *)&v199 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1296], 1).u64[0];
      *((_QWORD *)&v199 + 1) = *(_QWORD *)&__dst[1424];
      *(_QWORD *)&v200 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1536], 1).u64[0];
      *((_QWORD *)&v200 + 1) = *(_QWORD *)&__dst[1664];
      *(_QWORD *)&v201 = vdupq_laneq_s64(*(int64x2_t *)&__dst[352], 1).u64[0];
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[480];
      v690 = vzip1q_s64(*(int64x2_t *)&__dst[352], *(int64x2_t *)&__dst[472]);
      v691 = vzip1q_s64(*(int64x2_t *)&__dst[1056], *(int64x2_t *)&__dst[1176]);
      v687 = vzip1q_s64(*(int64x2_t *)&__dst[1296], *(int64x2_t *)&__dst[1416]);
      v688 = vzip1q_s64(*(int64x2_t *)&__dst[592], *(int64x2_t *)&__dst[712]);
      *(_QWORD *)&v202 = vdupq_laneq_s64(*(int64x2_t *)&__dst[592], 1).u64[0];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[720];
      *(_QWORD *)&v203 = vdupq_laneq_s64(*(int64x2_t *)&__dst[832], 1).u64[0];
      v685 = vzip1q_s64(*(int64x2_t *)&__dst[1536], *(int64x2_t *)&__dst[1656]);
      v686 = vzip1q_s64(*(int64x2_t *)&__dst[832], *(int64x2_t *)&__dst[952]);
      *((_QWORD *)&v203 + 1) = *(_QWORD *)&__dst[960];
      v692 = vzip2q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v683 = vzip1q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v684 = vzip1q_s64(*(int64x2_t *)&__dst[1072], *(int64x2_t *)&__dst[1192]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1072], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[1200];
      *(_QWORD *)&v205 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1312], 1).u64[0];
      *((_QWORD *)&v205 + 1) = *(_QWORD *)&__dst[1440];
      v681 = vzip1q_s64(*(int64x2_t *)&__dst[1552], *(int64x2_t *)&__dst[1672]);
      v682 = vzip1q_s64(*(int64x2_t *)&__dst[1312], *(int64x2_t *)&__dst[1432]);
      *(_QWORD *)&v206 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1552], 1).u64[0];
      *((_QWORD *)&v206 + 1) = *(_QWORD *)&__dst[1680];
      v207 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)&v183 = *(_QWORD *)&__dst[128];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[248];
      *(_QWORD *)&v208 = *(_QWORD *)&__dst[368];
      *((_QWORD *)&v208 + 1) = *(_QWORD *)&__dst[488];
      *(_QWORD *)&v209 = *(_QWORD *)&__dst[608];
      *((_QWORD *)&v209 + 1) = *(_QWORD *)&__dst[728];
      *(_QWORD *)&v210 = *(_QWORD *)&__dst[848];
      *((_QWORD *)&v210 + 1) = *(_QWORD *)&__dst[968];
      *(_QWORD *)&v211 = *(_QWORD *)&__dst[1088];
      *((_QWORD *)&v211 + 1) = *(_QWORD *)&__dst[1208];
      *(_QWORD *)&v184 = *(_QWORD *)&__dst[1328];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[1448];
      *(_QWORD *)&v185 = *(_QWORD *)&__dst[1568];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[1688];
      v680 = v846;
      v679 = *(_OWORD *)&__dst[1792];
      v212 = *(_OWORD *)&__dst[1776];
      v213 = *(_OWORD *)&__dst[1760];
      v214 = *(_OWORD *)&__dst[1744];
      v215 = *(_OWORD *)&__dst[1728];
      v216 = *(_OWORD *)&__dst[1712];
      v217 = *(_OWORD *)&__dst[1696];
      *(int64x2_t *)(v207 + 16) = vzip1q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      *(_OWORD *)(v207 + 32) = *(_OWORD *)categoryc;
      *(int64x2_t *)(v207 + 48) = v778;
      *(int64x2_t *)(v207 + 64) = v770;
      *(int64x2_t *)(v207 + 80) = v762;
      *(int64x2_t *)(v207 + 96) = v747;
      *(int64x2_t *)(v207 + 112) = v737;
      *(int64x2_t *)(v207 + 136) = v790;
      *(_OWORD *)(v207 + 152) = *(_OWORD *)__lenc;
      *(_OWORD *)(v207 + 168) = v794;
      *(_OWORD *)(v207 + 184) = *(_OWORD *)v786;
      *(_OWORD *)(v207 + 200) = v782;
      *(_OWORD *)(v207 + 216) = v772;
      *(_OWORD *)(v207 + 232) = v768;
      *(_QWORD *)(v207 + 128) = v217;
      *(_QWORD *)(v207 + 248) = *((_QWORD *)&v217 + 1);
      *(int64x2_t *)(v207 + 256) = v721;
      *(int64x2_t *)(v207 + 272) = v776;
      *(int64x2_t *)(v207 + 288) = v734;
      *(int64x2_t *)(v207 + 304) = v736;
      *(int64x2_t *)(v207 + 320) = v732;
      *(int64x2_t *)(v207 + 336) = v729;
      *(int64x2_t *)(v207 + 352) = v728;
      *(int64x2_t *)(v207 + 376) = v735;
      *(_OWORD *)(v207 + 392) = v774;
      *(_OWORD *)(v207 + 408) = v765;
      *(_OWORD *)(v207 + 424) = v749;
      *(_OWORD *)(v207 + 440) = v745;
      *(_OWORD *)(v207 + 456) = v738;
      *(_QWORD *)(v207 + 368) = v216;
      *(_QWORD *)(v207 + 488) = *((_QWORD *)&v216 + 1);
      *(_OWORD *)(v207 + 472) = v740;
      *(int64x2_t *)(v207 + 496) = v725;
      *(int64x2_t *)(v207 + 512) = v741;
      *(int64x2_t *)(v207 + 528) = v724;
      *(int64x2_t *)(v207 + 544) = v720;
      *(int64x2_t *)(v207 + 560) = v717;
      *(int64x2_t *)(v207 + 576) = v713;
      *(int64x2_t *)(v207 + 592) = v709;
      *(int64x2_t *)(v207 + 616) = v739;
      *(_OWORD *)(v207 + 632) = v743;
      *(_OWORD *)(v207 + 648) = v733;
      *(_OWORD *)(v207 + 664) = v731;
      *(_OWORD *)(v207 + 680) = v727;
      *(_OWORD *)(v207 + 696) = v723;
      *(_OWORD *)(v207 + 712) = v718;
      *(_QWORD *)(v207 + 608) = v215;
      *(_QWORD *)(v207 + 728) = *((_QWORD *)&v215 + 1);
      *(int64x2_t *)(v207 + 736) = v704;
      *(int64x2_t *)(v207 + 752) = v714;
      *(int64x2_t *)(v207 + 768) = v712;
      *(int64x2_t *)(v207 + 784) = v708;
      *(int64x2_t *)(v207 + 800) = v707;
      *(int64x2_t *)(v207 + 816) = v703;
      *(int64x2_t *)(v207 + 832) = v702;
      *(int64x2_t *)(v207 + 856) = v716;
      *(_OWORD *)(v207 + 872) = v730;
      *(_OWORD *)(v207 + 888) = v726;
      *(_OWORD *)(v207 + 904) = v722;
      *(_OWORD *)(v207 + 920) = v710;
      *(_OWORD *)(v207 + 936) = v189;
      *(_OWORD *)(v207 + 952) = v190;
      *(_QWORD *)(v207 + 848) = v214;
      *(_QWORD *)(v207 + 968) = *((_QWORD *)&v214 + 1);
      *(int64x2_t *)(v207 + 976) = v689;
      *(int64x2_t *)(v207 + 992) = v715;
      *(int64x2_t *)(v207 + 1008) = v705;
      *(int64x2_t *)(v207 + 1024) = v701;
      *(int64x2_t *)(v207 + 1040) = v700;
      *(int64x2_t *)(v207 + 1056) = v697;
      *(int64x2_t *)(v207 + 1072) = v694;
      *(int64x2_t *)(v207 + 1096) = v699;
      *(_OWORD *)(v207 + 1112) = v719;
      *(_OWORD *)(v207 + 1128) = v711;
      *(_OWORD *)(v207 + 1144) = v191;
      *(_OWORD *)(v207 + 1160) = v192;
      *(_OWORD *)(v207 + 1176) = v193;
      *(_OWORD *)(v207 + 1192) = v194;
      *(_QWORD *)(v207 + 1088) = v213;
      *(_QWORD *)(v207 + 1208) = *((_QWORD *)&v213 + 1);
      *(int64x2_t *)(v207 + 1216) = v696;
      *(int64x2_t *)(v207 + 1232) = v698;
      *(int64x2_t *)(v207 + 1248) = v695;
      *(int64x2_t *)(v207 + 1264) = v693;
      *(int64x2_t *)(v207 + 1280) = v691;
      *(int64x2_t *)(v207 + 1296) = v687;
      *(int64x2_t *)(v207 + 1312) = v685;
      *(int64x2_t *)(v207 + 1336) = v706;
      *(_OWORD *)(v207 + 1352) = v195;
      *(_OWORD *)(v207 + 1368) = v196;
      *(_OWORD *)(v207 + 1384) = v197;
      *(_OWORD *)(v207 + 1400) = v198;
      *(_OWORD *)(v207 + 1416) = v199;
      *(_OWORD *)(v207 + 1432) = v200;
      *(_QWORD *)(v207 + 1328) = v212;
      *(_QWORD *)(v207 + 1448) = *((_QWORD *)&v212 + 1);
      *(int64x2_t *)(v207 + 1456) = v683;
      *(int64x2_t *)(v207 + 1472) = v690;
      *(int64x2_t *)(v207 + 1488) = v688;
      *(int64x2_t *)(v207 + 1504) = v686;
      *(int64x2_t *)(v207 + 1520) = v684;
      *(int64x2_t *)(v207 + 1536) = v682;
      *(int64x2_t *)(v207 + 1552) = v681;
      *(int64x2_t *)(v207 + 1576) = v692;
      *(_OWORD *)(v207 + 1592) = v201;
      *(_OWORD *)(v207 + 1608) = v202;
      *(_OWORD *)(v207 + 1624) = v203;
      *(_OWORD *)(v207 + 1640) = v204;
      *(_OWORD *)(v207 + 1656) = v205;
      *(_OWORD *)(v207 + 1672) = v206;
      *(_QWORD *)(v207 + 1568) = v679;
      *(_QWORD *)(v207 + 1688) = *((_QWORD *)&v679 + 1);
      *(_OWORD *)(v207 + 1696) = v183;
      *(_OWORD *)(v207 + 1712) = v208;
      *(_OWORD *)(v207 + 1728) = v209;
      *(_OWORD *)(v207 + 1744) = v210;
      *(_OWORD *)(v207 + 1760) = v211;
      *(_OWORD *)(v207 + 1776) = v184;
      *(_OWORD *)(v207 + 1792) = v185;
      *(_QWORD *)(v207 + 1808) = v680;
      *(_BYTE *)(v207 + 8) = 1;
      if (*(_BYTE *)(*(_QWORD *)(v8 + 16) + 8))
        goto LABEL_94;
      v676 = "IMU factor is in a bad shape. Time to die.";
      v677 = 483;
LABEL_265:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", v677, (uint64_t)"", 0, (uint64_t)v676, 42, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v789 = v167;
    v814[0] = (uint64_t)&v821;
    v814[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v814[2] = std::chrono::system_clock::now().__d_.__rep_;
    v815 = 5;
    v816 = "unknown file";
    v817 = 476;
    v820 = 0;
    v818 = "unknown function";
    v819 = 0;
    if (*(char *)(v821 + 39) < 0)
    {
      v168 = *(_QWORD *)(v821 + 24);
      categorya = *(const char **)(v821 + 16);
    }
    else
    {
      v168 = *(unsigned __int8 *)(v821 + 39);
      categorya = (const char *)(*(_QWORD *)v814[0] + 16);
    }
    __lena = v168;
    v785 = (uint64_t *)(v821 + 16);
    v793 = v165;
    v678 = v10;
    v169 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v169 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v840 && SHIBYTE(v839) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v170 = byte_254A4A4F8;
    else
      v170 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v171 = byte_254A4A4F8[23];
    else
      v171 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v170, categorya);
    v172 = &v838;
    if (v171 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v171 >= 0x17)
    {
      v781 = v12;
      v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v171 | 7) != 0x17)
        v173 = v171 | 7;
      v174 = v173 + 1;
      v172 = operator new(v173 + 1);
      v840 = v174 | 0x8000000000000000;
      v838 = v172;
      v839 = v171;
      v12 = v781;
    }
    else
    {
      HIBYTE(v840) = v171;
      if (!v171)
      {
LABEL_71:
        *((_BYTE *)v172 + v171) = 0;
        v841 = 1;
        v175 = __p;
        v176 = __lena;
        if (__lena > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v10 = v678;
        if (__lena >= 0x17)
        {
          v177 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__lena | 7) != 0x17)
            v177 = __lena | 7;
          v178 = v177 + 1;
          v175 = operator new(v177 + 1);
          v843 = v178 | 0x8000000000000000;
          __p[0] = v175;
          __p[1] = (void *)__lena;
          v176 = __lena;
          v10 = v678;
        }
        else
        {
          HIBYTE(v843) = __lena;
          if (!__lena)
            goto LABEL_79;
        }
        memmove(v175, categorya, v176);
LABEL_79:
        *((_BYTE *)v175 + v176) = 0;
        v844 = 1;
        v179 = object;
        if (SHIBYTE(v843) < 0)
          operator delete(__p[0]);
        if (v841 && SHIBYTE(v840) < 0)
          operator delete(v838);
        if (object)
          os_release(object);
        sub_20F4D577C((int)&object, v789, v785, v179, OS_LOG_TYPE_ERROR);
        if (v793)
        {
          sub_20E8C003C((uint64_t)v814, "LP Noise model failed. Fallback succeeded.");
          sub_20E863570((uint64_t)v814);
        }
        sub_20E863570((uint64_t)v814);
        v180 = v820;
        if (v820)
        {
          p_shared_owners = (unint64_t *)&v820->__shared_owners_;
          do
            v182 = __ldaxr(p_shared_owners);
          while (__stlxr(v182 - 1, p_shared_owners));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
        goto LABEL_93;
      }
    }
    memmove(v172, v170, v171);
    goto LABEL_71;
  }
LABEL_94:
  _Q6 = vextq_s8(v750, v750, 8uLL);
  _Q5 = vextq_s8(v752, v752, 8uLL);
  _Q4 = vextq_s8(v754, v754, 8uLL);
  *(_QWORD *)&v220.f64[0] = vextq_s8(v804, v804, 8uLL).u64[0];
  v221 = vextq_s8(v800, v800, 8uLL).u64[0];
  *(_QWORD *)&v222.f64[0] = vextq_s8(v806, v806, 8uLL).u64[0];
  v223 = vextq_s8(v808, v808, 8uLL).u64[0];
  v224.f64[0] = v824;
  _V19.D[1] = v827.f64[1];
  v226 = (float64x2_t)vzip1q_s64((int64x2_t)v823, (int64x2_t)v825);
  v227 = (float64x2_t)vzip2q_s64((int64x2_t)v823, (int64x2_t)v825);
  v224.f64[1] = v826;
  v228 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v226, *(double *)v750.i64), v227, *(double *)_Q6.i64), v224, v751);
  __asm { FMLA            D16, D6, V19.D[1] }
  *(double *)_Q6.i64 = _D16 + v828 * v751;
  *(int8x16_t *)v791 = _Q6;
  v230 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v226, *(double *)v752.i64), v227, *(double *)_Q5.i64), v224, v753);
  __asm { FMLA            D6, D5, V19.D[1] }
  *(double *)_Q5.i64 = *(double *)_Q6.i64 + v828 * v753;
  v787 = (int64x2_t)_Q5;
  categoryb = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v226, *(double *)v754.i64), v227, *(double *)_Q4.i64), v224, v755);
  __asm { FMLA            D5, D4, V19.D[1] }
  *(double *)_Q4.i64 = *(double *)_Q5.i64 + v828 * v755;
  __lenb = (int8x16_t)v230;
  v795 = (float64x2_t)_Q4;
  v783 = (int8x16_t)v228;
  v779 = v230.f64[1];
  if (*(double *)_Q4.i64 >= 0.0)
  {
    if (*(double *)v228.i64 >= -v230.f64[1])
    {
      *(_QWORD *)&v239.f64[0] = vdupq_laneq_s64((int64x2_t)categoryb, 1).u64[0];
      v239.f64[1] = *(float64_t *)v791;
      v234 = vsubq_f64((float64x2_t)vzip1q_s64(v787, (int64x2_t)categoryb), v239);
      v235 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v228, 1), v230);
      *(double *)v236.i64 = v795.f64[0] + 1.0 + *(double *)v228.i64 + v230.f64[1];
    }
    else
    {
      v235.f64[1] = categoryb.f64[1];
      v234.f64[0] = categoryb.f64[0] + *(double *)v791;
      v235.f64[0] = v795.f64[0] + 1.0 - (*(double *)v228.i64 + v230.f64[1]);
      v234.f64[1] = *(double *)v787.i64 + categoryb.f64[1];
      *(double *)v236.i64 = v235.f64[0];
    }
  }
  else if (*(double *)v228.i64 <= v230.f64[1])
  {
    *(_QWORD *)&v237.f64[1] = v787.i64[0];
    v237.f64[0] = 1.0 - *(double *)_Q4.i64;
    v238.f64[1] = categoryb.f64[1];
    v238.f64[0] = v230.f64[1] - *(double *)v228.i64;
    v236 = (int64x2_t)vaddq_f64(v237, v238);
    v234 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64(v228, 1), v230), v236);
    v235 = (float64x2_t)vdupq_laneq_s64(v236, 1);
  }
  else
  {
    *(_QWORD *)&v232.f64[1] = v228.i64[1];
    v232.f64[0] = 1.0 - *(double *)_Q4.i64;
    v233 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v230.f64[0], 0);
    v233.f64[0] = *(double *)v228.i64 - v230.f64[1];
    v234 = vaddq_f64(v232, v233);
    v235.f64[1] = *(float64_t *)&v791[2];
    v235.f64[0] = categoryb.f64[0] + *(double *)v791;
    v236.i64[0] = *(_QWORD *)&v234.f64[0];
  }
  v240 = 0.5 / sqrt(*(double *)v236.i64);
  v241 = vmulq_n_f64(v235, v240);
  v242 = vmulq_n_f64(v234, v240);
  v243 = vaddq_f64(v242, v242);
  *(_QWORD *)(v7 + 136) = *(_OWORD *)&vaddq_f64(v241, v241);
  *(float64x2_t *)(v7 + 120) = v243;
  v244.f64[0] = v756;
  *(_QWORD *)&v244.f64[1] = v804.i64[0];
  *(_QWORD *)&v245.f64[0] = v800.i64[0];
  *(_QWORD *)&v245.f64[1] = v221;
  v246 = vsubq_f64(v244, *(float64x2_t *)v832);
  v247 = vsubq_f64(v245, v831);
  v222.f64[1] = v757;
  v244.f64[0] = v758;
  *(_QWORD *)&v244.f64[1] = v806.i64[0];
  v248 = vsubq_f64(v222, *(float64x2_t *)&v830[16]);
  v249 = vsubq_f64(v244, *(float64x2_t *)v830);
  *(_QWORD *)&v250.f64[0] = v808.i64[0];
  *(_QWORD *)&v250.f64[1] = v223;
  v220.f64[1] = v759;
  v251 = vsubq_f64(v220, *(float64x2_t *)&v832[16]);
  *(float64x2_t *)(v7 + 144) = vsubq_f64(v250, v829);
  *(float64x2_t *)(v7 + 160) = v249;
  *(float64x2_t *)(v7 + 176) = v248;
  *(float64x2_t *)(v7 + 192) = v247;
  *(float64x2_t *)(v7 + 208) = v246;
  *(float64x2_t *)(v7 + 224) = v251;
  v251.f64[0] = *(float64_t *)(v7 + 232);
  v252 = vnegq_f64(*(float64x2_t *)(v7 + 216));
  v253 = vnegq_f64(*(float64x2_t *)(v7 + 200));
  v254 = vnegq_f64(*(float64x2_t *)(v7 + 184));
  v255 = vnegq_f64(*(float64x2_t *)(v7 + 168));
  v256 = vnegq_f64(*(float64x2_t *)(v7 + 152));
  v257 = vnegq_f64(*(float64x2_t *)(v7 + 136));
  *(float64x2_t *)(v7 + 120) = vnegq_f64(v243);
  *(float64x2_t *)(v7 + 136) = v257;
  *(float64x2_t *)(v7 + 152) = v256;
  *(float64x2_t *)(v7 + 168) = v255;
  *(float64x2_t *)(v7 + 184) = v254;
  *(float64x2_t *)(v7 + 200) = v253;
  *(float64x2_t *)(v7 + 216) = v252;
  *(_QWORD *)(v7 + 232) = *(_OWORD *)&vnegq_f64(v251);
  v258 = *(_OWORD *)(v7 + 184);
  v259 = *(_OWORD *)(v7 + 200);
  v260 = *(_OWORD *)(v7 + 216);
  *(_QWORD *)(v11 + 112) = *(_QWORD *)(v7 + 232);
  *(_OWORD *)(v11 + 80) = v259;
  *(_OWORD *)(v11 + 96) = v260;
  *(_OWORD *)(v11 + 64) = v258;
  v261 = *(_OWORD *)(v7 + 120);
  v262 = *(_OWORD *)(v7 + 136);
  v263 = *(_OWORD *)(v7 + 168);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)(v7 + 152);
  *(_OWORD *)(v11 + 48) = v263;
  *(_OWORD *)v11 = v261;
  *(_OWORD *)(v11 + 16) = v262;
  if (*(_BYTE *)(v7 + 4000) && !*(_BYTE *)(v7 + 3992))
  {
    (*v12)[8].i8[0] = 1;
    v12[1][6].i8[8] = 1;
    v12[2][8].i8[0] = 1;
    v12[3][6].i8[8] = 1;
    v12[4][2].i8[8] = 1;
    *(_BYTE *)(v7 + 2176) = 1;
    *(_QWORD *)(v8 + 5848) = &off_24CA00398;
    *(_QWORD *)(v8 + 5864) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 5872) = 0u;
    *(_OWORD *)(v8 + 5888) = 0u;
    *(_OWORD *)(v8 + 5904) = 0u;
    *(_OWORD *)(v8 + 5920) = 0u;
    *(_OWORD *)(v8 + 5936) = 0u;
    *(_OWORD *)(v8 + 5952) = 0u;
    *(_OWORD *)(v8 + 5968) = 0u;
    *(_QWORD *)(v8 + 5984) = 0;
    *(_QWORD *)(v8 + 5992) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6000) = 0u;
    *(_OWORD *)(v8 + 6016) = 0u;
    *(_OWORD *)(v8 + 6032) = 0u;
    *(_OWORD *)(v8 + 6048) = 0u;
    *(_OWORD *)(v8 + 6064) = 0u;
    *(_OWORD *)(v8 + 6080) = 0u;
    *(_OWORD *)(v8 + 6096) = 0u;
    *(_QWORD *)(v8 + 6112) = 0;
    *(_QWORD *)(v8 + 6120) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6128) = 0u;
    *(_OWORD *)(v8 + 6144) = 0u;
    *(_OWORD *)(v8 + 6160) = 0u;
    *(_OWORD *)(v8 + 6176) = 0u;
    *(_OWORD *)(v8 + 6192) = 0u;
    *(_OWORD *)(v8 + 6208) = 0u;
    *(_OWORD *)(v8 + 6224) = 0u;
    *(_QWORD *)(v8 + 6240) = 0;
    *(_QWORD *)(v8 + 6248) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6256) = 0u;
    *(_OWORD *)(v8 + 6272) = 0u;
    *(_OWORD *)(v8 + 6288) = 0u;
    *(_OWORD *)(v8 + 6304) = 0u;
    *(_OWORD *)(v8 + 6320) = 0u;
    *(_OWORD *)(v8 + 6336) = 0u;
    *(_OWORD *)(v8 + 6352) = 0u;
    *(_QWORD *)(v8 + 6368) = 0;
    *(_QWORD *)(v8 + 6376) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6384) = 0u;
    *(_OWORD *)(v8 + 6400) = 0u;
    *(_OWORD *)(v8 + 6416) = 0u;
    *(_OWORD *)(v8 + 6432) = 0u;
    *(_OWORD *)(v8 + 6448) = 0u;
    *(_OWORD *)(v8 + 6464) = 0u;
    *(_OWORD *)(v8 + 6480) = 0u;
    *(_QWORD *)(v8 + 6496) = 0;
    *(_QWORD *)(v8 + 6504) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6512) = 0u;
    *(_OWORD *)(v8 + 6528) = 0u;
    *(_OWORD *)(v8 + 6544) = 0u;
    *(_OWORD *)(v8 + 6560) = 0u;
    *(_OWORD *)(v8 + 6576) = 0u;
    *(_OWORD *)(v8 + 6592) = 0u;
    *(_OWORD *)(v8 + 6608) = 0u;
    *(_QWORD *)(v8 + 6624) = 0;
    *(_QWORD *)(v8 + 6632) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 6752) = 0;
    *(_OWORD *)(v8 + 6736) = 0u;
    *(_OWORD *)(v8 + 6720) = 0u;
    *(_OWORD *)(v8 + 6704) = 0u;
    *(_OWORD *)(v8 + 6688) = 0u;
    *(_OWORD *)(v8 + 6672) = 0u;
    *(_OWORD *)(v8 + 6656) = 0u;
    *(_OWORD *)(v8 + 6640) = 0u;
    *(_QWORD *)(v8 + 6760) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 6880) = 0;
    *(_OWORD *)(v8 + 6864) = 0u;
    *(_OWORD *)(v8 + 6848) = 0u;
    *(_OWORD *)(v8 + 6832) = 0u;
    *(_OWORD *)(v8 + 6816) = 0u;
    *(_OWORD *)(v8 + 6800) = 0u;
    *(_OWORD *)(v8 + 6784) = 0u;
    *(_OWORD *)(v8 + 6768) = 0u;
    *(_QWORD *)(v8 + 6888) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7008) = 0;
    *(_OWORD *)(v8 + 6992) = 0u;
    *(_OWORD *)(v8 + 6976) = 0u;
    *(_OWORD *)(v8 + 6960) = 0u;
    *(_OWORD *)(v8 + 6944) = 0u;
    *(_OWORD *)(v8 + 6928) = 0u;
    *(_OWORD *)(v8 + 6912) = 0u;
    *(_OWORD *)(v8 + 6896) = 0u;
    *(_QWORD *)(v8 + 7016) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7136) = 0;
    *(_OWORD *)(v8 + 7120) = 0u;
    *(_OWORD *)(v8 + 7104) = 0u;
    *(_OWORD *)(v8 + 7088) = 0u;
    *(_OWORD *)(v8 + 7072) = 0u;
    *(_OWORD *)(v8 + 7056) = 0u;
    *(_OWORD *)(v8 + 7040) = 0u;
    *(_OWORD *)(v8 + 7024) = 0u;
    *(_QWORD *)(v8 + 7144) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7264) = 0;
    *(_OWORD *)(v8 + 7248) = 0u;
    *(_OWORD *)(v8 + 7232) = 0u;
    *(_OWORD *)(v8 + 7216) = 0u;
    *(_OWORD *)(v8 + 7200) = 0u;
    *(_OWORD *)(v8 + 7184) = 0u;
    *(_OWORD *)(v8 + 7168) = 0u;
    *(_OWORD *)(v8 + 7152) = 0u;
    *(_QWORD *)(v8 + 7272) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7392) = 0;
    *(_OWORD *)(v8 + 7376) = 0u;
    *(_OWORD *)(v8 + 7360) = 0u;
    *(_OWORD *)(v8 + 7344) = 0u;
    *(_OWORD *)(v8 + 7328) = 0u;
    *(_OWORD *)(v8 + 7312) = 0u;
    *(_OWORD *)(v8 + 7296) = 0u;
    *(_OWORD *)(v8 + 7280) = 0u;
    *(_QWORD *)(v8 + 7400) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7520) = 0;
    *(_OWORD *)(v8 + 7504) = 0u;
    *(_OWORD *)(v8 + 7488) = 0u;
    *(_OWORD *)(v8 + 7472) = 0u;
    *(_OWORD *)(v8 + 7456) = 0u;
    *(_OWORD *)(v8 + 7440) = 0u;
    *(_OWORD *)(v8 + 7424) = 0u;
    *(_OWORD *)(v8 + 7408) = 0u;
    *(_QWORD *)(v8 + 7528) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7648) = 0;
    *(_OWORD *)(v8 + 7632) = 0u;
    *(_OWORD *)(v8 + 7616) = 0u;
    *(_OWORD *)(v8 + 7600) = 0u;
    *(_OWORD *)(v8 + 7584) = 0u;
    *(_OWORD *)(v8 + 7568) = 0u;
    *(_OWORD *)(v8 + 7552) = 0u;
    *(_OWORD *)(v8 + 7536) = 0u;
    *(_QWORD *)(v8 + 7656) = 0x3FF0000000000000;
    *(_BYTE *)(v7 + 3992) = 1;
    *(_QWORD *)(v8 + 7664) = -1;
    memcpy((void *)(v8 + 3920), (const void *)(v8 + 1880), 0x708uLL);
    v267 = *(_OWORD *)(v8 + 3728);
    *(_OWORD *)(v8 + 5752) = *(_OWORD *)(v8 + 3712);
    *(_OWORD *)(v8 + 5768) = v267;
    v268 = *(_OWORD *)(v8 + 3696);
    *(_OWORD *)(v8 + 5720) = *(_OWORD *)(v8 + 3680);
    *(_OWORD *)(v8 + 5736) = v268;
    *(_QWORD *)(v8 + 5832) = *(_QWORD *)(v8 + 3792);
    v269 = *(_OWORD *)(v8 + 3776);
    v270 = *(_OWORD *)(v8 + 3744);
    *(_OWORD *)(v8 + 5800) = *(_OWORD *)(v8 + 3760);
    *(_OWORD *)(v8 + 5816) = v269;
    *(_OWORD *)(v8 + 5784) = v270;
    *(_BYTE *)(v7 + 2160) = v766;
    v271 = *(_QWORD *)(v8 + 16);
    *(_BYTE *)(v7 + 2176) = *(_BYTE *)(v271 + 8);
    memcpy((void *)(v8 + 5864), (const void *)(v271 + 16), 0x708uLL);
    *(_DWORD *)(v8 + 7664) = (*v12)[1].i32[0];
    *(_DWORD *)(v8 + 7668) = v12[2][1].i32[0];
    if (v833)
    {
LABEL_104:
      if (*(_BYTE *)(*(_QWORD *)(v8 + 16) + 8))
        goto LABEL_105;
LABEL_113:
      sub_20F4AD5FC(&v823);
      if (**(int **)(*(_QWORD *)&v823.f64[0] + 56) > 5)
        return 0;
      v275 = *(unsigned __int8 *)(*(_QWORD *)&v823.f64[0] + 72);
      v276 = sub_20E8C31DC(*(uint64_t *)&v823.f64[0], "OSLogSurrogateAppender", 1, 0);
      v277 = v276 ? v276 + 16 : 0;
      if (!v275 && !v276)
        return 0;
      *(_QWORD *)__src = &v823;
      *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__src[24] = 5;
      *(_QWORD *)&__src[32] = "unknown file";
      *(_DWORD *)&__src[40] = 257;
      *(_QWORD *)&__src[64] = 0;
      *(_QWORD *)&__src[48] = "unknown function";
      *(_QWORD *)&__src[56] = 0;
      v278 = **(_QWORD **)__src;
      v279 = (uint64_t *)(**(_QWORD **)__src + 16);
      if (*(char *)(**(_QWORD **)__src + 39) < 0)
      {
        v281 = *(const char **)(v278 + 16);
        v280 = *(_QWORD *)(v278 + 24);
      }
      else
      {
        v280 = *(unsigned __int8 *)(**(_QWORD **)__src + 39);
        v281 = (const char *)(**(_QWORD **)__src + 16);
      }
      v372 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v372 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v373 = byte_254A4A4F8;
      else
        v373 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v374 = byte_254A4A4F8[23];
      else
        v374 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)__dst = os_log_create(v373, v281);
      v375 = &__dst[8];
      if (v374 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v374 >= 0x17)
      {
        v376 = (v374 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v374 | 7) != 0x17)
          v376 = v374 | 7;
        v377 = v376 + 1;
        v375 = operator new(v376 + 1);
        *(_QWORD *)&__dst[24] = v377 | 0x8000000000000000;
        *(_QWORD *)&__dst[8] = v375;
        *(_QWORD *)&__dst[16] = v374;
      }
      else
      {
        __dst[31] = v374;
        if (!v374)
        {
LABEL_150:
          v375[v374] = 0;
          __dst[32] = 1;
          v378 = &__dst[40];
          if (v280 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v280 >= 0x17)
          {
            v379 = (v280 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v280 | 7) != 0x17)
              v379 = v280 | 7;
            v380 = v379 + 1;
            v378 = operator new(v379 + 1);
            *(_QWORD *)&__dst[56] = v380 | 0x8000000000000000;
            *(_QWORD *)&__dst[40] = v378;
            *(_QWORD *)&__dst[48] = v280;
          }
          else
          {
            __dst[63] = v280;
            if (!v280)
              goto LABEL_158;
          }
          memmove(v378, v281, v280);
LABEL_158:
          v378[v280] = 0;
          __dst[64] = 1;
          v381 = *(NSObject **)__dst;
          if ((__dst[63] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[40]);
          if (__dst[32] && (__dst[31] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[8]);
          if (*(_QWORD *)__dst)
            os_release(*(void **)__dst);
          sub_20F569F24((int)__dst, v277, v279, v381, OS_LOG_TYPE_ERROR);
          if (v275)
          {
            sub_20E8C003C((uint64_t)__src, "IMU factor failed to factorize the noise model.");
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863570((uint64_t)__src);
          v382 = *(std::__shared_weak_count **)&__src[64];
          if (*(_QWORD *)&__src[64])
          {
            v383 = (unint64_t *)(*(_QWORD *)&__src[64] + 8);
            do
              v384 = __ldaxr(v383);
            while (__stlxr(v384 - 1, v383));
            if (!v384)
            {
              ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
              std::__shared_weak_count::__release_weak(v382);
            }
          }
          return 0;
        }
      }
      memmove(v375, v373, v374);
      goto LABEL_150;
    }
  }
  else if (v833)
  {
    goto LABEL_104;
  }
  v272 = v835;
  v273 = *(float64x2_t **)(v834 + 32);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*v835), (int32x4_t)vcgtzq_f64(v835[1]))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v274 = v272[1];
  *v273 = *v272;
  v273[1] = v274;
  if (!*(_BYTE *)(*(_QWORD *)(v8 + 16) + 8))
    goto LABEL_113;
LABEL_105:
  v264 = 0;
  v265 = vextq_s8(v783, v783, 8uLL);
  v809 = vextq_s8(__lenb, __lenb, 8uLL).u64[0];
  v266 = vextq_s8((int8x16_t)categoryb, (int8x16_t)categoryb, 8uLL).u64[0];
  do
  {
    _ZF = v264 == 1792;
    v264 += 8;
  }
  while (!_ZF);
  v805 = *(double *)&v266;
  v282 = *(float64x2_t *)(v8 + 3640);
  *(float64x2_t *)&__dst[1784] = vabsq_f64(*(float64x2_t *)(v8 + 3656));
  v283 = *(float64x2_t *)(v8 + 3624);
  *(float64x2_t *)&__dst[1768] = vabsq_f64(v282);
  v284 = *(float64x2_t *)(v8 + 3608);
  *(float64x2_t *)&__dst[1752] = vabsq_f64(v283);
  v285 = *(float64x2_t *)(v8 + 3592);
  *(float64x2_t *)&__dst[1736] = vabsq_f64(v284);
  v286 = *(float64x2_t *)(v8 + 3576);
  *(float64x2_t *)&__dst[1720] = vabsq_f64(v285);
  v287 = *(float64x2_t *)(v8 + 3560);
  *(float64x2_t *)&__dst[1704] = vabsq_f64(v286);
  v288 = *(float64x2_t *)(v8 + 3544);
  *(float64x2_t *)&__dst[1688] = vabsq_f64(v287);
  v289 = *(float64x2_t *)(v8 + 3528);
  *(float64x2_t *)&__dst[1672] = vabsq_f64(v288);
  v290 = *(float64x2_t *)(v8 + 3512);
  *(float64x2_t *)&__dst[1656] = vabsq_f64(v289);
  v291 = *(float64x2_t *)(v8 + 3496);
  *(float64x2_t *)&__dst[1640] = vabsq_f64(v290);
  v292 = *(float64x2_t *)(v8 + 3480);
  *(float64x2_t *)&__dst[1624] = vabsq_f64(v291);
  v293 = *(float64x2_t *)(v8 + 3464);
  *(float64x2_t *)&__dst[1608] = vabsq_f64(v292);
  v294 = *(float64x2_t *)(v8 + 3448);
  *(float64x2_t *)&__dst[1592] = vabsq_f64(v293);
  v295 = *(float64x2_t *)(v8 + 3432);
  *(float64x2_t *)&__dst[1576] = vabsq_f64(v294);
  v296 = *(float64x2_t *)(v8 + 3416);
  *(float64x2_t *)&__dst[1560] = vabsq_f64(v295);
  v297 = *(float64x2_t *)(v8 + 3400);
  *(float64x2_t *)&__dst[1544] = vabsq_f64(v296);
  v298 = *(float64x2_t *)(v8 + 3384);
  *(float64x2_t *)&__dst[1528] = vabsq_f64(v297);
  v299 = *(float64x2_t *)(v8 + 3368);
  *(float64x2_t *)&__dst[1512] = vabsq_f64(v298);
  v300 = *(float64x2_t *)(v8 + 3352);
  *(float64x2_t *)&__dst[1496] = vabsq_f64(v299);
  v301 = *(float64x2_t *)(v8 + 3336);
  *(float64x2_t *)&__dst[1480] = vabsq_f64(v300);
  v302 = *(float64x2_t *)(v8 + 3320);
  *(float64x2_t *)&__dst[1464] = vabsq_f64(v301);
  v303 = *(float64x2_t *)(v8 + 3304);
  *(float64x2_t *)&__dst[1448] = vabsq_f64(v302);
  v304 = *(float64x2_t *)(v8 + 3288);
  *(float64x2_t *)&__dst[1432] = vabsq_f64(v303);
  v305 = *(float64x2_t *)(v8 + 3272);
  *(float64x2_t *)&__dst[1416] = vabsq_f64(v304);
  v306 = *(float64x2_t *)(v8 + 3256);
  *(float64x2_t *)&__dst[1400] = vabsq_f64(v305);
  v307 = *(float64x2_t *)(v8 + 3240);
  *(float64x2_t *)&__dst[1384] = vabsq_f64(v306);
  v308 = *(float64x2_t *)(v8 + 3224);
  *(float64x2_t *)&__dst[1368] = vabsq_f64(v307);
  v309 = *(float64x2_t *)(v8 + 3208);
  *(float64x2_t *)&__dst[1352] = vabsq_f64(v308);
  v310 = *(float64x2_t *)(v8 + 3192);
  *(float64x2_t *)&__dst[1336] = vabsq_f64(v309);
  v311 = *(float64x2_t *)(v8 + 3176);
  *(float64x2_t *)&__dst[1320] = vabsq_f64(v310);
  v312 = *(float64x2_t *)(v8 + 3160);
  *(float64x2_t *)&__dst[1304] = vabsq_f64(v311);
  v313 = *(float64x2_t *)(v8 + 3144);
  *(float64x2_t *)&__dst[1288] = vabsq_f64(v312);
  v314 = *(float64x2_t *)(v8 + 3128);
  *(float64x2_t *)&__dst[1272] = vabsq_f64(v313);
  v315 = *(float64x2_t *)(v8 + 3112);
  *(float64x2_t *)&__dst[1256] = vabsq_f64(v314);
  v316 = *(float64x2_t *)(v8 + 3096);
  *(float64x2_t *)&__dst[1240] = vabsq_f64(v315);
  v317 = *(float64x2_t *)(v8 + 3080);
  *(float64x2_t *)&__dst[1224] = vabsq_f64(v316);
  v318 = *(float64x2_t *)(v8 + 3064);
  *(float64x2_t *)&__dst[1208] = vabsq_f64(v317);
  v319 = *(float64x2_t *)(v8 + 3048);
  *(float64x2_t *)&__dst[1192] = vabsq_f64(v318);
  v320 = *(float64x2_t *)(v8 + 3032);
  *(float64x2_t *)&__dst[1176] = vabsq_f64(v319);
  v321 = *(float64x2_t *)(v8 + 3016);
  *(float64x2_t *)&__dst[1160] = vabsq_f64(v320);
  v322 = *(float64x2_t *)(v8 + 3000);
  *(float64x2_t *)&__dst[1144] = vabsq_f64(v321);
  v323 = *(float64x2_t *)(v8 + 2984);
  *(float64x2_t *)&__dst[1128] = vabsq_f64(v322);
  v324 = *(float64x2_t *)(v8 + 2968);
  *(float64x2_t *)&__dst[1112] = vabsq_f64(v323);
  v325 = *(float64x2_t *)(v8 + 2952);
  *(float64x2_t *)&__dst[1096] = vabsq_f64(v324);
  v326 = *(float64x2_t *)(v8 + 2936);
  *(float64x2_t *)&__dst[1080] = vabsq_f64(v325);
  v327 = *(float64x2_t *)(v8 + 2920);
  *(float64x2_t *)&__dst[1064] = vabsq_f64(v326);
  v328 = vabsq_f64(*(float64x2_t *)(v8 + 2904));
  *(float64x2_t *)&__dst[1048] = vabsq_f64(v327);
  v329 = vabsq_f64(*(float64x2_t *)(v8 + 2872));
  *(float64x2_t *)&__dst[1016] = vabsq_f64(*(float64x2_t *)(v8 + 2888));
  *(float64x2_t *)&__dst[1032] = v328;
  v330 = vabsq_f64(*(float64x2_t *)(v8 + 2840));
  *(float64x2_t *)&__dst[984] = vabsq_f64(*(float64x2_t *)(v8 + 2856));
  *(float64x2_t *)&__dst[1000] = v329;
  v331 = vabsq_f64(*(float64x2_t *)(v8 + 2808));
  *(float64x2_t *)&__dst[952] = vabsq_f64(*(float64x2_t *)(v8 + 2824));
  *(float64x2_t *)&__dst[968] = v330;
  v332 = vabsq_f64(*(float64x2_t *)(v8 + 2776));
  *(float64x2_t *)&__dst[920] = vabsq_f64(*(float64x2_t *)(v8 + 2792));
  *(float64x2_t *)&__dst[936] = v331;
  v333 = vabsq_f64(*(float64x2_t *)(v8 + 2744));
  *(float64x2_t *)&__dst[888] = vabsq_f64(*(float64x2_t *)(v8 + 2760));
  *(float64x2_t *)&__dst[904] = v332;
  v334 = vabsq_f64(*(float64x2_t *)(v8 + 2712));
  *(float64x2_t *)&__dst[856] = vabsq_f64(*(float64x2_t *)(v8 + 2728));
  *(float64x2_t *)&__dst[872] = v333;
  v335 = vabsq_f64(*(float64x2_t *)(v8 + 2680));
  *(float64x2_t *)&__dst[824] = vabsq_f64(*(float64x2_t *)(v8 + 2696));
  *(float64x2_t *)&__dst[840] = v334;
  v336 = vabsq_f64(*(float64x2_t *)(v8 + 2648));
  *(float64x2_t *)&__dst[792] = vabsq_f64(*(float64x2_t *)(v8 + 2664));
  *(float64x2_t *)&__dst[808] = v335;
  v337 = vabsq_f64(*(float64x2_t *)(v8 + 2616));
  *(float64x2_t *)&__dst[760] = vabsq_f64(*(float64x2_t *)(v8 + 2632));
  *(float64x2_t *)&__dst[776] = v336;
  v338 = vabsq_f64(*(float64x2_t *)(v8 + 2584));
  *(float64x2_t *)&__dst[728] = vabsq_f64(*(float64x2_t *)(v8 + 2600));
  *(float64x2_t *)&__dst[744] = v337;
  v339 = vabsq_f64(*(float64x2_t *)(v8 + 2552));
  *(float64x2_t *)&__dst[696] = vabsq_f64(*(float64x2_t *)(v8 + 2568));
  *(float64x2_t *)&__dst[712] = v338;
  v340 = vabsq_f64(*(float64x2_t *)(v8 + 2520));
  *(float64x2_t *)&__dst[664] = vabsq_f64(*(float64x2_t *)(v8 + 2536));
  *(float64x2_t *)&__dst[680] = v339;
  v341 = vabsq_f64(*(float64x2_t *)(v8 + 2488));
  *(float64x2_t *)&__dst[632] = vabsq_f64(*(float64x2_t *)(v8 + 2504));
  *(float64x2_t *)&__dst[648] = v340;
  v342 = vabsq_f64(*(float64x2_t *)(v8 + 2456));
  *(float64x2_t *)&__dst[600] = vabsq_f64(*(float64x2_t *)(v8 + 2472));
  *(float64x2_t *)&__dst[616] = v341;
  v343 = vabsq_f64(*(float64x2_t *)(v8 + 2424));
  *(float64x2_t *)&__dst[568] = vabsq_f64(*(float64x2_t *)(v8 + 2440));
  *(float64x2_t *)&__dst[584] = v342;
  v344 = vabsq_f64(*(float64x2_t *)(v8 + 2392));
  *(float64x2_t *)&__dst[536] = vabsq_f64(*(float64x2_t *)(v8 + 2408));
  *(float64x2_t *)&__dst[552] = v343;
  v345 = vabsq_f64(*(float64x2_t *)(v8 + 2360));
  *(float64x2_t *)&__dst[504] = vabsq_f64(*(float64x2_t *)(v8 + 2376));
  *(float64x2_t *)&__dst[520] = v344;
  v346 = vabsq_f64(*(float64x2_t *)(v8 + 2328));
  *(float64x2_t *)&__dst[472] = vabsq_f64(*(float64x2_t *)(v8 + 2344));
  *(float64x2_t *)&__dst[488] = v345;
  v347 = vabsq_f64(*(float64x2_t *)(v8 + 2296));
  *(float64x2_t *)&__dst[440] = vabsq_f64(*(float64x2_t *)(v8 + 2312));
  *(float64x2_t *)&__dst[456] = v346;
  v348 = vabsq_f64(*(float64x2_t *)(v8 + 2264));
  *(float64x2_t *)&__dst[408] = vabsq_f64(*(float64x2_t *)(v8 + 2280));
  *(float64x2_t *)&__dst[424] = v347;
  v349 = vabsq_f64(*(float64x2_t *)(v8 + 2232));
  *(float64x2_t *)&__dst[376] = vabsq_f64(*(float64x2_t *)(v8 + 2248));
  *(float64x2_t *)&__dst[392] = v348;
  v350 = vabsq_f64(*(float64x2_t *)(v8 + 2200));
  *(float64x2_t *)&__dst[344] = vabsq_f64(*(float64x2_t *)(v8 + 2216));
  *(float64x2_t *)&__dst[360] = v349;
  v351 = vabsq_f64(*(float64x2_t *)(v8 + 2168));
  *(float64x2_t *)&__dst[312] = vabsq_f64(*(float64x2_t *)(v8 + 2184));
  *(float64x2_t *)&__dst[328] = v350;
  v352 = vabsq_f64(*(float64x2_t *)(v8 + 2136));
  *(float64x2_t *)&__dst[280] = vabsq_f64(*(float64x2_t *)(v8 + 2152));
  *(float64x2_t *)&__dst[296] = v351;
  *(float64x2_t *)&__dst[264] = v352;
  v353 = vabsq_f64(*(float64x2_t *)(v8 + 2104));
  *(float64x2_t *)&__dst[248] = vabsq_f64(*(float64x2_t *)(v8 + 2120));
  *(float64x2_t *)&__dst[232] = v353;
  v354 = vabsq_f64(*(float64x2_t *)(v8 + 2072));
  *(float64x2_t *)&__dst[216] = vabsq_f64(*(float64x2_t *)(v8 + 2088));
  *(float64x2_t *)&__dst[200] = v354;
  v355 = vabsq_f64(*(float64x2_t *)(v8 + 2040));
  *(float64x2_t *)&__dst[184] = vabsq_f64(*(float64x2_t *)(v8 + 2056));
  *(float64x2_t *)&__dst[168] = v355;
  v356 = vabsq_f64(*(float64x2_t *)(v8 + 2008));
  *(float64x2_t *)&__dst[152] = vabsq_f64(*(float64x2_t *)(v8 + 2024));
  *(float64x2_t *)&__dst[136] = v356;
  v357 = vabsq_f64(*(float64x2_t *)(v8 + 1976));
  *(float64x2_t *)&__dst[120] = vabsq_f64(*(float64x2_t *)(v8 + 1992));
  *(float64x2_t *)&__dst[104] = v357;
  v358 = vabsq_f64(*(float64x2_t *)(v8 + 1944));
  *(float64x2_t *)&__dst[88] = vabsq_f64(*(float64x2_t *)(v8 + 1960));
  *(float64x2_t *)&__dst[72] = v358;
  v359 = vabsq_f64(*(float64x2_t *)(v8 + 1912));
  *(float64x2_t *)&__dst[56] = vabsq_f64(*(float64x2_t *)(v8 + 1928));
  *(float64x2_t *)&__dst[40] = v359;
  v360 = *v40;
  *(float64x2_t *)&__dst[24] = vabsq_f64(*(float64x2_t *)(v8 + 1896));
  v361 = vabsq_f64(v360);
  *(float64x2_t *)&__dst[8] = v361;
  v361.f64[0] = *(float64_t *)(v8 + 3672);
  *(_QWORD *)&__dst[1800] = *(_OWORD *)&vabsq_f64(v361);
  v846 = 0x46293E5939A08CEALL;
  v362 = 8;
  do
  {
    v363 = *(double *)&__dst[v362];
    if (v363 > 1.0e30)
      break;
    _ZF = v362 == 1800;
    v362 += 8;
  }
  while (!_ZF);
  v807 = (float64x2_t)v265;
  if (v363 > 1.0e30)
  {
    sub_20F4AD5FC(v814);
    if (**(int **)(v814[0] + 56) <= 5)
    {
      v364 = *(unsigned __int8 *)(v814[0] + 72);
      v365 = sub_20E8C31DC(v814[0], "OSLogSurrogateAppender", 1, 0);
      v366 = v365 + 16;
      if (!v365)
        v366 = 0;
      if (v364)
        _ZF = 0;
      else
        _ZF = v365 == 0;
      if (!_ZF)
      {
        v801 = v366;
        *(_QWORD *)__src = v814;
        *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
        *(_DWORD *)&__src[24] = 5;
        *(_QWORD *)&__src[32] = "unknown file";
        *(_DWORD *)&__src[40] = 266;
        *(_QWORD *)&__src[64] = 0;
        *(_QWORD *)&__src[48] = "unknown function";
        *(_QWORD *)&__src[56] = 0;
        v368 = **(_QWORD **)__src;
        v369 = (uint64_t *)(**(_QWORD **)__src + 16);
        if (*(char *)(**(_QWORD **)__src + 39) < 0)
        {
          v371 = *(void **)(v368 + 16);
          v370 = *(void **)(v368 + 24);
        }
        else
        {
          v370 = (void *)*(unsigned __int8 *)(**(_QWORD **)__src + 39);
          v371 = (void *)(**(_QWORD **)__src + 16);
        }
        object = v371;
        v838 = v370;
        v385 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v385 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v386 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v387 = byte_254A4A4F8;
        }
        else
        {
          v386 = *(double *)&byte_254A4A4F8[8];
          v387 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v823.f64[0] = v387;
        v823.f64[1] = v386;
        *(_QWORD *)__dst = os_log_create(v387, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v823);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v388 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20F56A704((int)__dst, v801, v369, v388, OS_LOG_TYPE_ERROR);
        if (v364)
        {
          sub_20E8C003C((uint64_t)__src, "IMU state factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  *(_QWORD *)&v389.f64[0] = vdupq_laneq_s64((int64x2_t)__lenb, 1).u64[0];
  v390 = (float64x2_t)vdupq_lane_s64(__lenb.i64[0], 0);
  v390.f64[0] = *(float64_t *)v791;
  *(_QWORD *)&v389.f64[1] = v787.i64[0];
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v807), (int8x16_t)vcgezq_f64(v807)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v390), (int8x16_t)vcgezq_f64(v390))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v389), (int8x16_t)vcgezq_f64(v389)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(categoryb), (int8x16_t)vcgezq_f64(categoryb))))))) & 1) != 0)
  {
    sub_20F4AD5FC(v814);
    if (**(int **)(v814[0] + 56) > 5)
      return 0;
    v404 = *(unsigned __int8 *)(v814[0] + 72);
    v405 = sub_20E8C31DC(v814[0], "OSLogSurrogateAppender", 1, 0);
    v406 = v405 ? v405 + 16 : 0;
    if (!v404 && !v405)
      return 0;
    *(_QWORD *)__src = v814;
    *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
    *(_DWORD *)&__src[24] = 5;
    *(_QWORD *)&__src[32] = "unknown file";
    *(_DWORD *)&__src[40] = 270;
    *(_QWORD *)&__src[64] = 0;
    *(_QWORD *)&__src[48] = "unknown function";
    *(_QWORD *)&__src[56] = 0;
    v407 = (uint64_t *)(v814[0] + 16);
    if (*(char *)(v814[0] + 39) < 0)
    {
      v409 = *(void **)(v814[0] + 16);
      v408 = *(void **)(v814[0] + 24);
    }
    else
    {
      v408 = (void *)*(unsigned __int8 *)(v814[0] + 39);
      v409 = (void *)(v814[0] + 16);
    }
    object = v409;
    v838 = v408;
    v410 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v410 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__dst);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
      if (__dst[24] && (__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    *(_QWORD *)&v411 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v412 = byte_254A4A4F8;
    }
    else
    {
      v411 = *(double *)&byte_254A4A4F8[8];
      v412 = *(const char **)byte_254A4A4F8;
    }
    *(_QWORD *)&v823.f64[0] = v412;
    v823.f64[1] = v411;
    *(_QWORD *)__dst = os_log_create(v412, (const char *)object);
    sub_20E86E5A8(&__dst[8], (uint64_t)&v823);
    sub_20E86E5A8(&__dst[40], (uint64_t)&object);
    v413 = *(NSObject **)__dst;
    sub_20E86E44C((uint64_t)__dst);
    sub_20F56AAF4((int)__dst, v406, v407, v413, OS_LOG_TYPE_ERROR);
    if (v404)
    {
      sub_20E8C003C((uint64_t)__src, "IMU R factor contains NaNs.");
      sub_20E863570((uint64_t)__src);
    }
LABEL_238:
    sub_20E863714((uint64_t)__src);
    return 0;
  }
  v391.f64[0] = *(float64_t *)v791;
  *(_QWORD *)&v391.f64[1] = __lenb.i64[0];
  v392.f64[0] = v779;
  *(_QWORD *)&v392.f64[1] = v787.i64[0];
  v393 = vabsq_f64(v392);
  v392.f64[0] = categoryb.f64[0];
  v392.f64[1] = v805;
  *(_QWORD *)&v394.f64[0] = v783.i64[0];
  v394.f64[1] = v807.f64[0];
  v395 = (int8x16_t)vabsq_f64(v394);
  v396 = (float64x2_t)vdupq_n_s64(0x46293E5939A08CEAuLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64((float64x2_t)vextq_s8(v395, v395, 8uLL), v396), (int32x4_t)vcgtq_f64(vabsq_f64(v391), v396)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v393, v396), (int32x4_t)vcgtq_f64(vabsq_f64(v392), v396))))) & 1) != 0|| vabsq_f64(v795).f64[0] > 1.0e30)
  {
    sub_20F4AD5FC(v814);
    if (**(int **)(v814[0] + 56) <= 5)
    {
      v397 = *(unsigned __int8 *)(v814[0] + 72);
      v398 = sub_20E8C31DC(v814[0], "OSLogSurrogateAppender", 1, 0);
      v399 = v398 + 16;
      if (!v398)
        v399 = 0;
      if (v397 || v398)
      {
        v802 = v399;
        *(_QWORD *)__src = v814;
        *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
        *(_DWORD *)&__src[24] = 5;
        *(_QWORD *)&__src[32] = "unknown file";
        *(_DWORD *)&__src[40] = 274;
        *(_QWORD *)&__src[64] = 0;
        *(_QWORD *)&__src[48] = "unknown function";
        *(_QWORD *)&__src[56] = 0;
        v400 = **(_QWORD **)__src;
        v401 = (uint64_t *)(**(_QWORD **)__src + 16);
        if (*(char *)(**(_QWORD **)__src + 39) < 0)
        {
          v403 = *(void **)(v400 + 16);
          v402 = *(void **)(v400 + 24);
        }
        else
        {
          v402 = (void *)*(unsigned __int8 *)(**(_QWORD **)__src + 39);
          v403 = (void *)(**(_QWORD **)__src + 16);
        }
        object = v403;
        v838 = v402;
        v414 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v414 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v415 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v416 = byte_254A4A4F8;
        }
        else
        {
          v415 = *(double *)&byte_254A4A4F8[8];
          v416 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v823.f64[0] = v416;
        v823.f64[1] = v415;
        *(_QWORD *)__dst = os_log_create(v416, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v823);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v417 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20F56AEE4((int)__dst, v802, v401, v417, OS_LOG_TYPE_ERROR);
        if (v397)
        {
          sub_20E8C003C((uint64_t)__src, "IMU R factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  if (v12[4][1].i8[4])
  {
    *(_QWORD *)__dst = v7;
    *(_QWORD *)&__dst[8] = v7;
    if (sub_20F4D6FA0((double **)__dst))
    {
      sub_20F4AD5FC(v814);
      if (**(int **)(v814[0] + 56) > 5)
        return 0;
      v419 = *(unsigned __int8 *)(v814[0] + 72);
      v420 = sub_20E8C31DC(v814[0], "OSLogSurrogateAppender", 1, 0);
      v421 = v420 ? v420 + 16 : 0;
      if (!v419 && !v420)
        return 0;
      *(_QWORD *)__src = v814;
      *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__src[24] = 5;
      *(_QWORD *)&__src[32] = "unknown file";
      *(_DWORD *)&__src[40] = 278;
      *(_QWORD *)&__src[64] = 0;
      *(_QWORD *)&__src[48] = "unknown function";
      *(_QWORD *)&__src[56] = 0;
      v422 = (uint64_t *)(v814[0] + 16);
      if (*(char *)(v814[0] + 39) < 0)
      {
        v424 = *(void **)(v814[0] + 16);
        v423 = *(void **)(v814[0] + 24);
      }
      else
      {
        v423 = (void *)*(unsigned __int8 *)(v814[0] + 39);
        v424 = (void *)(v814[0] + 16);
      }
      object = v424;
      v838 = v423;
      v438 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v438 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      *(_QWORD *)&v439 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v440 = byte_254A4A4F8;
      }
      else
      {
        v439 = *(double *)&byte_254A4A4F8[8];
        v440 = *(const char **)byte_254A4A4F8;
      }
      *(_QWORD *)&v823.f64[0] = v440;
      v823.f64[1] = v439;
      *(_QWORD *)__dst = os_log_create(v440, (const char *)object);
      sub_20E86E5A8(&__dst[8], (uint64_t)&v823);
      sub_20E86E5A8(&__dst[40], (uint64_t)&object);
      v441 = *(NSObject **)__dst;
      sub_20E86E44C((uint64_t)__dst);
      sub_20F56B2D4((int)__dst, v421, v422, v441, OS_LOG_TYPE_ERROR);
      if (v419)
      {
        sub_20E8C003C((uint64_t)__src, "IMU dt factor contains NaNs.");
        sub_20E863570((uint64_t)__src);
      }
      goto LABEL_238;
    }
    v418.f64[0] = *(float64_t *)(v7 + 112);
    v425 = vabsq_f64(*(float64x2_t *)v7);
    v426 = vabsq_f64(*(float64x2_t *)(v7 + 16));
    v427 = vabsq_f64(*(float64x2_t *)(v7 + 32));
    v428 = vabsq_f64(*(float64x2_t *)(v7 + 48));
    v429 = vabsq_f64(*(float64x2_t *)(v7 + 64));
    v430 = vabsq_f64(*(float64x2_t *)(v7 + 80));
    *(float64x2_t *)&__dst[104] = vabsq_f64(*(float64x2_t *)(v7 + 96));
    *(float64x2_t *)&__dst[88] = v430;
    *(float64x2_t *)&__dst[72] = v429;
    *(float64x2_t *)&__dst[56] = v428;
    *(float64x2_t *)&__dst[40] = v427;
    *(float64x2_t *)&__dst[24] = v426;
    *(float64x2_t *)&__dst[8] = v425;
    *(_QWORD *)&__dst[120] = *(_OWORD *)&vabsq_f64(v418);
    *(_QWORD *)&__dst[128] = 0x46293E5939A08CEALL;
    if (sub_20F4B473C((double *)__dst))
    {
      sub_20F4AD5FC(v814);
      if (**(int **)(v814[0] + 56) <= 5)
      {
        v431 = *(unsigned __int8 *)(v814[0] + 72);
        v432 = sub_20E8C31DC(v814[0], "OSLogSurrogateAppender", 1, 0);
        v433 = v432 + 16;
        if (!v432)
          v433 = 0;
        if (v431 || v432)
        {
          v803 = v433;
          *(_QWORD *)__src = v814;
          *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
          *(_DWORD *)&__src[24] = 5;
          *(_QWORD *)&__src[32] = "unknown file";
          *(_DWORD *)&__src[40] = 282;
          *(_QWORD *)&__src[64] = 0;
          *(_QWORD *)&__src[48] = "unknown function";
          *(_QWORD *)&__src[56] = 0;
          v434 = **(_QWORD **)__src;
          v435 = (uint64_t *)(**(_QWORD **)__src + 16);
          if (*(char *)(**(_QWORD **)__src + 39) < 0)
          {
            v437 = *(void **)(v434 + 16);
            v436 = *(void **)(v434 + 24);
          }
          else
          {
            v436 = (void *)*(unsigned __int8 *)(**(_QWORD **)__src + 39);
            v437 = (void *)(**(_QWORD **)__src + 16);
          }
          object = v437;
          v838 = v436;
          v443 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v443 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__dst);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
            if (__dst[24] && (__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          *(_QWORD *)&v444 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v445 = byte_254A4A4F8;
          }
          else
          {
            v444 = *(double *)&byte_254A4A4F8[8];
            v445 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v823.f64[0] = v445;
          v823.f64[1] = v444;
          *(_QWORD *)__dst = os_log_create(v445, (const char *)object);
          sub_20E86E5A8(&__dst[8], (uint64_t)&v823);
          sub_20E86E5A8(&__dst[40], (uint64_t)&object);
          v446 = *(NSObject **)__dst;
          sub_20E86E44C((uint64_t)__dst);
          sub_20F56B6C4((int)__dst, v803, v435, v446, OS_LOG_TYPE_ERROR);
          if (v431)
          {
            sub_20E8C003C((uint64_t)__src, "IMU dt factor reaches high magnitudes.");
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863714((uint64_t)__src);
        }
      }
    }
  }
  if ((*v12)[1].i8[4])
  {
    v447 = *v40;
    v448 = *(_OWORD *)(v8 + 1896);
    v449 = *(_OWORD *)(v8 + 1912);
    v450 = *(_OWORD *)(v8 + 1928);
    v451 = *(_OWORD *)(v8 + 1944);
    v452 = *(_OWORD *)(v8 + 1960);
    v453 = *(_OWORD *)(v8 + 1976);
    v454 = *(_OWORD *)(v8 + 1992);
    v455 = *(_OWORD *)(v8 + 2008);
    v456 = *(_OWORD *)(v8 + 2024);
    v457 = *(_OWORD *)(v8 + 2040);
    v458 = *(_OWORD *)(v8 + 2056);
    v459 = *(_OWORD *)(v8 + 2072);
    v460 = *(_OWORD *)(v8 + 2088);
    v461 = *(_OWORD *)(v8 + 2104);
    v462 = *(_OWORD *)(v8 + 2120);
    v463 = *(_OWORD *)(v8 + 2136);
    v464 = *(_OWORD *)(v8 + 2152);
    v465 = *(_OWORD *)(v8 + 2168);
    v466 = *(_OWORD *)(v8 + 2184);
    v467 = *(_OWORD *)(v8 + 2200);
    v468 = *(_OWORD *)(v8 + 2216);
    *(_QWORD *)(v10 + 352) = *(_QWORD *)(v8 + 2232);
    *(_OWORD *)(v10 + 320) = v467;
    *(_OWORD *)(v10 + 336) = v468;
    *(_OWORD *)(v10 + 288) = v465;
    *(_OWORD *)(v10 + 304) = v466;
    *(_OWORD *)(v10 + 256) = v463;
    *(_OWORD *)(v10 + 272) = v464;
    *(_OWORD *)(v10 + 224) = v461;
    *(_OWORD *)(v10 + 240) = v462;
    *(_OWORD *)(v10 + 192) = v459;
    *(_OWORD *)(v10 + 208) = v460;
    *(_OWORD *)(v10 + 160) = v457;
    *(_OWORD *)(v10 + 176) = v458;
    *(_OWORD *)(v10 + 128) = v455;
    *(_OWORD *)(v10 + 144) = v456;
    *(_OWORD *)(v10 + 96) = v453;
    *(_OWORD *)(v10 + 112) = v454;
    *(_OWORD *)(v10 + 64) = v451;
    *(_OWORD *)(v10 + 80) = v452;
    *(_OWORD *)(v10 + 32) = v449;
    *(_OWORD *)(v10 + 48) = v450;
    *(float64x2_t *)v10 = v447;
    *(_OWORD *)(v10 + 16) = v448;
    v469 = *(_OWORD *)(v8 + 3320);
    v470 = *(_OWORD *)(v8 + 3336);
    v471 = *(_OWORD *)(v8 + 3352);
    v472 = *(_OWORD *)(v8 + 3368);
    v473 = *(_OWORD *)(v8 + 3384);
    v474 = *(_OWORD *)(v8 + 3400);
    v475 = *(_OWORD *)(v8 + 3416);
    v476 = *(_OWORD *)(v8 + 3432);
    v477 = *(_OWORD *)(v8 + 3448);
    v478 = *(_OWORD *)(v8 + 3464);
    v479 = *(_OWORD *)(v8 + 3480);
    v480 = *(_OWORD *)(v8 + 3496);
    v481 = *(_OWORD *)(v8 + 3512);
    v482 = *(_OWORD *)(v8 + 3528);
    v483 = *(_OWORD *)(v8 + 3544);
    v484 = *(_OWORD *)(v8 + 3560);
    v485 = *(_OWORD *)(v8 + 3576);
    v486 = *(_OWORD *)(v8 + 3592);
    v487 = *(_OWORD *)(v8 + 3608);
    v488 = *(_OWORD *)(v8 + 3624);
    v489 = *(_OWORD *)(v8 + 3640);
    v490 = *(_OWORD *)(v8 + 3656);
    *(_QWORD *)(v10 + 712) = *(_QWORD *)(v8 + 3672);
    *(_OWORD *)(v10 + 680) = v489;
    *(_OWORD *)(v10 + 696) = v490;
    *(_OWORD *)(v10 + 648) = v487;
    *(_OWORD *)(v10 + 664) = v488;
    *(_OWORD *)(v10 + 616) = v485;
    *(_OWORD *)(v10 + 632) = v486;
    *(_OWORD *)(v10 + 584) = v483;
    *(_OWORD *)(v10 + 600) = v484;
    *(_OWORD *)(v10 + 552) = v481;
    *(_OWORD *)(v10 + 568) = v482;
    *(_OWORD *)(v10 + 520) = v479;
    *(_OWORD *)(v10 + 536) = v480;
    *(_OWORD *)(v10 + 488) = v477;
    *(_OWORD *)(v10 + 504) = v478;
    *(_OWORD *)(v10 + 456) = v475;
    *(_OWORD *)(v10 + 472) = v476;
    *(_OWORD *)(v10 + 424) = v473;
    *(_OWORD *)(v10 + 440) = v474;
    *(_OWORD *)(v10 + 392) = v471;
    *(_OWORD *)(v10 + 408) = v472;
    *(_OWORD *)(v10 + 360) = v469;
    *(_OWORD *)(v10 + 376) = v470;
  }
  if (v12[1][1].i8[4])
  {
    v491 = *(_OWORD *)(v8 + 2600);
    v492 = *(_OWORD *)(v8 + 2616);
    v493 = *(_OWORD *)(v8 + 2632);
    v494 = *(_OWORD *)(v8 + 2648);
    v495 = *(_OWORD *)(v8 + 2664);
    v496 = *(_OWORD *)(v8 + 2680);
    v497 = *(_OWORD *)(v8 + 2696);
    v498 = *(_OWORD *)(v8 + 2712);
    v499 = *(_OWORD *)(v8 + 2728);
    v500 = *(_OWORD *)(v8 + 2744);
    v501 = *(_OWORD *)(v8 + 2760);
    v502 = *(_OWORD *)(v8 + 2776);
    v503 = *(_OWORD *)(v8 + 2792);
    v504 = *(_OWORD *)(v8 + 2808);
    v505 = *(_OWORD *)(v8 + 2824);
    v506 = *(_OWORD *)(v8 + 2840);
    v507 = *(_OWORD *)(v8 + 2856);
    v508 = *(_OWORD *)(v8 + 2872);
    v509 = *(_OWORD *)(v8 + 2888);
    v510 = *(_OWORD *)(v8 + 2904);
    v511 = *(_OWORD *)(v8 + 2920);
    v512 = *(_OWORD *)(v8 + 2936);
    *(_QWORD *)(v10 + 1072) = *(_QWORD *)(v8 + 2952);
    *(_OWORD *)(v10 + 1040) = v511;
    *(_OWORD *)(v10 + 1056) = v512;
    *(_OWORD *)(v10 + 1008) = v509;
    *(_OWORD *)(v10 + 1024) = v510;
    *(_OWORD *)(v10 + 976) = v507;
    *(_OWORD *)(v10 + 992) = v508;
    *(_OWORD *)(v10 + 944) = v505;
    *(_OWORD *)(v10 + 960) = v506;
    *(_OWORD *)(v10 + 912) = v503;
    *(_OWORD *)(v10 + 928) = v504;
    *(_OWORD *)(v10 + 880) = v501;
    *(_OWORD *)(v10 + 896) = v502;
    *(_OWORD *)(v10 + 848) = v499;
    *(_OWORD *)(v10 + 864) = v500;
    *(_OWORD *)(v10 + 816) = v497;
    *(_OWORD *)(v10 + 832) = v498;
    *(_OWORD *)(v10 + 784) = v495;
    *(_OWORD *)(v10 + 800) = v496;
    *(_OWORD *)(v10 + 752) = v493;
    *(_OWORD *)(v10 + 768) = v494;
    *(_OWORD *)(v10 + 720) = v491;
    *(_OWORD *)(v10 + 736) = v492;
    v513 = *(_OWORD *)(v8 + 2240);
    v514 = *(_OWORD *)(v8 + 2256);
    v515 = *(_OWORD *)(v8 + 2272);
    v516 = *(_OWORD *)(v8 + 2288);
    v517 = *(_OWORD *)(v8 + 2304);
    v518 = *(_OWORD *)(v8 + 2320);
    v519 = *(_OWORD *)(v8 + 2336);
    v520 = *(_OWORD *)(v8 + 2352);
    v521 = *(_OWORD *)(v8 + 2368);
    v522 = *(_OWORD *)(v8 + 2384);
    v523 = *(_OWORD *)(v8 + 2400);
    v524 = *(_OWORD *)(v8 + 2416);
    v525 = *(_OWORD *)(v8 + 2432);
    v526 = *(_OWORD *)(v8 + 2448);
    v527 = *(_OWORD *)(v8 + 2464);
    v528 = *(_OWORD *)(v8 + 2480);
    v529 = *(_OWORD *)(v8 + 2496);
    v530 = *(_OWORD *)(v8 + 2512);
    v531 = *(_OWORD *)(v8 + 2528);
    v532 = *(_OWORD *)(v8 + 2544);
    v533 = *(_OWORD *)(v8 + 2560);
    v534 = *(_OWORD *)(v8 + 2576);
    *(_QWORD *)(v10 + 1432) = *(_QWORD *)(v8 + 2592);
    *(_OWORD *)(v10 + 1416) = v534;
    *(_OWORD *)(v10 + 1400) = v533;
    *(_OWORD *)(v10 + 1368) = v531;
    *(_OWORD *)(v10 + 1384) = v532;
    *(_OWORD *)(v10 + 1336) = v529;
    *(_OWORD *)(v10 + 1352) = v530;
    *(_OWORD *)(v10 + 1304) = v527;
    *(_OWORD *)(v10 + 1320) = v528;
    *(_OWORD *)(v10 + 1272) = v525;
    *(_OWORD *)(v10 + 1288) = v526;
    *(_OWORD *)(v10 + 1240) = v523;
    *(_OWORD *)(v10 + 1256) = v524;
    *(_OWORD *)(v10 + 1208) = v521;
    *(_OWORD *)(v10 + 1224) = v522;
    *(_OWORD *)(v10 + 1176) = v519;
    *(_OWORD *)(v10 + 1192) = v520;
    *(_OWORD *)(v10 + 1144) = v517;
    *(_OWORD *)(v10 + 1160) = v518;
    *(_OWORD *)(v10 + 1112) = v515;
    *(_OWORD *)(v10 + 1128) = v516;
    *(_OWORD *)(v10 + 1080) = v513;
    *(_OWORD *)(v10 + 1096) = v514;
    v535 = *(_OWORD *)(v8 + 2960);
    v536 = *(_OWORD *)(v8 + 2976);
    v537 = *(_OWORD *)(v8 + 2992);
    v538 = *(_OWORD *)(v8 + 3008);
    v539 = *(_OWORD *)(v8 + 3024);
    v540 = *(_OWORD *)(v8 + 3040);
    v541 = *(_OWORD *)(v8 + 3056);
    v542 = *(_OWORD *)(v8 + 3072);
    v543 = *(_OWORD *)(v8 + 3088);
    v544 = *(_OWORD *)(v8 + 3104);
    v545 = *(_OWORD *)(v8 + 3120);
    v546 = *(_OWORD *)(v8 + 3136);
    v547 = *(_OWORD *)(v8 + 3152);
    v548 = *(_OWORD *)(v8 + 3168);
    v549 = *(_OWORD *)(v8 + 3184);
    v550 = *(_OWORD *)(v8 + 3200);
    v551 = *(_OWORD *)(v8 + 3216);
    v552 = *(_OWORD *)(v8 + 3232);
    v553 = *(_OWORD *)(v8 + 3248);
    v554 = *(_OWORD *)(v8 + 3264);
    v555 = *(_OWORD *)(v8 + 3280);
    v556 = *(_OWORD *)(v8 + 3296);
    *(_QWORD *)(v10 + 1792) = *(_QWORD *)(v8 + 3312);
    *(_OWORD *)(v10 + 1760) = v555;
    *(_OWORD *)(v10 + 1776) = v556;
    *(_OWORD *)(v10 + 1728) = v553;
    *(_OWORD *)(v10 + 1744) = v554;
    *(_OWORD *)(v10 + 1696) = v551;
    *(_OWORD *)(v10 + 1712) = v552;
    *(_OWORD *)(v10 + 1664) = v549;
    *(_OWORD *)(v10 + 1680) = v550;
    *(_OWORD *)(v10 + 1632) = v547;
    *(_OWORD *)(v10 + 1648) = v548;
    *(_OWORD *)(v10 + 1600) = v545;
    *(_OWORD *)(v10 + 1616) = v546;
    *(_OWORD *)(v10 + 1568) = v543;
    *(_OWORD *)(v10 + 1584) = v544;
    *(_OWORD *)(v10 + 1536) = v541;
    *(_OWORD *)(v10 + 1552) = v542;
    *(_OWORD *)(v10 + 1504) = v539;
    *(_OWORD *)(v10 + 1520) = v540;
    *(_OWORD *)(v10 + 1472) = v537;
    *(_OWORD *)(v10 + 1488) = v538;
    *(_OWORD *)(v10 + 1440) = v535;
    *(_OWORD *)(v10 + 1456) = v536;
  }
  v557 = atomic_load((unsigned __int8 *)&qword_254A54F08);
  if ((v557 & 1) == 0 && __cxa_guard_acquire(&qword_254A54F08))
  {
    bzero((char *)&xmmword_254A54800 + 8, 0x6F8uLL);
    *(_QWORD *)&xmmword_254A54800 = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A54880 = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A54900 = 0xBFF0000000000000;
    qword_254A54980 = 0xBFF0000000000000;
    qword_254A54A00 = 0xBFF0000000000000;
    qword_254A54A80 = 0xBFF0000000000000;
    qword_254A54B00 = 0xBFF0000000000000;
    qword_254A54B80 = 0xBFF0000000000000;
    qword_254A54C00 = 0xBFF0000000000000;
    *((_QWORD *)&xmmword_254A54C78 + 1) = 0xBFF0000000000000;
    *((_QWORD *)&xmmword_254A54CF8 + 1) = 0xBFF0000000000000;
    *((_QWORD *)&xmmword_254A54D78 + 1) = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A54E00 = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A54E80 = 0xBFF0000000000000;
    qword_254A54F00 = 0xBFF0000000000000;
    __cxa_guard_release(&qword_254A54F08);
  }
  if (v12[2][1].i8[4])
  {
    v558 = xmmword_254A54800;
    v559 = *(_OWORD *)algn_254A54810;
    v560 = xmmword_254A54820;
    v561 = unk_254A54830;
    v562 = xmmword_254A54840;
    v563 = unk_254A54850;
    v564 = xmmword_254A54860;
    v565 = unk_254A54870;
    v566 = xmmword_254A54880;
    v567 = unk_254A54890;
    v568 = xmmword_254A548A0;
    v569 = unk_254A548B0;
    v570 = xmmword_254A548C0;
    v571 = unk_254A548D0;
    v572 = xmmword_254A548E0;
    v573 = unk_254A548F0;
    v574 = xmmword_254A54900;
    v575 = unk_254A54910;
    v576 = xmmword_254A54920;
    v577 = unk_254A54930;
    v578 = xmmword_254A54940;
    v579 = unk_254A54950;
    *(_QWORD *)(v10 + 2152) = qword_254A54960;
    *(_OWORD *)(v10 + 2136) = v579;
    *(_OWORD *)(v10 + 2120) = v578;
    *(_OWORD *)(v10 + 2104) = v577;
    *(_OWORD *)(v10 + 2088) = v576;
    *(_OWORD *)(v10 + 2072) = v575;
    *(_OWORD *)(v10 + 2056) = v574;
    *(_OWORD *)(v10 + 2040) = v573;
    *(_OWORD *)(v10 + 2024) = v572;
    *(_OWORD *)(v10 + 2008) = v571;
    *(_OWORD *)(v10 + 1992) = v570;
    *(_OWORD *)(v10 + 1976) = v569;
    *(_OWORD *)(v10 + 1960) = v568;
    *(_OWORD *)(v10 + 1944) = v567;
    *(_OWORD *)(v10 + 1928) = v566;
    *(_OWORD *)(v10 + 1912) = v565;
    *(_OWORD *)(v10 + 1896) = v564;
    *(_OWORD *)(v10 + 1880) = v563;
    *(_OWORD *)(v10 + 1864) = v562;
    *(_OWORD *)(v10 + 1848) = v561;
    *(_OWORD *)(v10 + 1832) = v560;
    *(_OWORD *)(v10 + 1816) = v559;
    *(_OWORD *)(v10 + 1800) = v558;
    v580 = xmmword_254A54DA0;
    v581 = xmmword_254A54DB0;
    v582 = (float64x2_t)xmmword_254A54DC0;
    v583 = xmmword_254A54DD0;
    v584 = (float64x2_t)xmmword_254A54DE0;
    v585 = xmmword_254A54DF0;
    v586 = xmmword_254A54E00;
    v587 = xmmword_254A54E10;
    v588 = xmmword_254A54E20;
    v589 = xmmword_254A54E30;
    v590 = xmmword_254A54E40;
    v591 = xmmword_254A54E50;
    v592 = xmmword_254A54E60;
    v593 = xmmword_254A54E70;
    v594 = xmmword_254A54E80;
    v595 = xmmword_254A54E90;
    v596 = xmmword_254A54EA0;
    v597 = xmmword_254A54EB0;
    v598 = xmmword_254A54EC0;
    v599 = xmmword_254A54ED0;
    v600 = xmmword_254A54EE0;
    v601 = xmmword_254A54EF0;
    *(_QWORD *)(v10 + 2512) = qword_254A54F00;
    *(_OWORD *)(v10 + 2480) = v600;
    *(_OWORD *)(v10 + 2496) = v601;
    *(_OWORD *)(v10 + 2448) = v598;
    *(_OWORD *)(v10 + 2464) = v599;
    *(_OWORD *)(v10 + 2416) = v596;
    *(_OWORD *)(v10 + 2432) = v597;
    *(_OWORD *)(v10 + 2384) = v594;
    *(_OWORD *)(v10 + 2400) = v595;
    *(_OWORD *)(v10 + 2352) = v592;
    *(_OWORD *)(v10 + 2368) = v593;
    *(_OWORD *)(v10 + 2320) = v590;
    *(_OWORD *)(v10 + 2336) = v591;
    *(_OWORD *)(v10 + 2288) = v588;
    *(_OWORD *)(v10 + 2304) = v589;
    *(_OWORD *)(v10 + 2256) = v586;
    *(_OWORD *)(v10 + 2272) = v587;
    *(float64x2_t *)(v10 + 2224) = v584;
    *(_OWORD *)(v10 + 2240) = v585;
    *(float64x2_t *)(v10 + 2192) = v582;
    *(_OWORD *)(v10 + 2208) = v583;
    *(_QWORD *)&v582.f64[0] = v783.i64[0];
    v582.f64[1] = v807.f64[0];
    *(_OWORD *)(v10 + 2160) = v580;
    *(_OWORD *)(v10 + 2176) = v581;
    v602 = vnegq_f64(v582);
    *(_QWORD *)&v582.f64[0] = __lenb.i64[0];
    *(_QWORD *)&v582.f64[1] = v809;
    v584.f64[0] = categoryb.f64[0];
    v584.f64[1] = v805;
    *(float64x2_t *)(v10 + 1800) = v602;
    *(_QWORD *)(v10 + 1816) = *(_OWORD *)&vnegq_f64(*(float64x2_t *)v791);
    *(float64x2_t *)(v10 + 1920) = vnegq_f64(v582);
    *(_QWORD *)(v10 + 1936) = *(_OWORD *)&vnegq_f64((float64x2_t)v787);
    *(float64x2_t *)(v10 + 2040) = vnegq_f64(v584);
    *(_QWORD *)(v10 + 2056) = *(_OWORD *)&vnegq_f64(v795);
  }
  if (v12[3][1].i8[4])
  {
    v603 = xmmword_254A54AD0;
    v604 = unk_254A54AE0;
    v605 = xmmword_254A54AF0;
    v606 = *(_OWORD *)&qword_254A54B00;
    v607 = xmmword_254A54B10;
    v608 = unk_254A54B20;
    v609 = xmmword_254A54B30;
    v610 = unk_254A54B40;
    v611 = xmmword_254A54B50;
    v612 = unk_254A54B60;
    v613 = xmmword_254A54B70;
    v614 = *(_OWORD *)&qword_254A54B80;
    v615 = xmmword_254A54B90;
    v616 = unk_254A54BA0;
    v617 = xmmword_254A54BB0;
    v618 = unk_254A54BC0;
    v619 = xmmword_254A54BD0;
    v620 = unk_254A54BE0;
    v621 = xmmword_254A54BF0;
    v622 = *(_OWORD *)&qword_254A54C00;
    v623 = xmmword_254A54C10;
    v624 = unk_254A54C20;
    *(_QWORD *)(v10 + 2872) = qword_254A54C30;
    *(_OWORD *)(v10 + 2856) = v624;
    *(_OWORD *)(v10 + 2840) = v623;
    *(_OWORD *)(v10 + 2824) = v622;
    *(_OWORD *)(v10 + 2808) = v621;
    *(_OWORD *)(v10 + 2792) = v620;
    *(_OWORD *)(v10 + 2776) = v619;
    *(_OWORD *)(v10 + 2760) = v618;
    *(_OWORD *)(v10 + 2744) = v617;
    *(_OWORD *)(v10 + 2728) = v616;
    *(_OWORD *)(v10 + 2712) = v615;
    *(_OWORD *)(v10 + 2696) = v614;
    *(_OWORD *)(v10 + 2680) = v613;
    *(_OWORD *)(v10 + 2664) = v612;
    *(_OWORD *)(v10 + 2648) = v611;
    *(_OWORD *)(v10 + 2632) = v610;
    *(_OWORD *)(v10 + 2616) = v609;
    *(_OWORD *)(v10 + 2600) = v608;
    *(_OWORD *)(v10 + 2584) = v607;
    *(_OWORD *)(v10 + 2568) = v606;
    *(_OWORD *)(v10 + 2552) = v605;
    *(_OWORD *)(v10 + 2536) = v604;
    *(_OWORD *)(v10 + 2520) = v603;
    v625 = xmmword_254A54968;
    v626 = *(_OWORD *)algn_254A54978;
    v627 = xmmword_254A54988;
    v628 = unk_254A54998;
    v629 = xmmword_254A549A8;
    v630 = unk_254A549B8;
    v631 = xmmword_254A549C8;
    v632 = unk_254A549D8;
    v633 = xmmword_254A549E8;
    v634 = unk_254A549F8;
    v635 = xmmword_254A54A08;
    v636 = unk_254A54A18;
    v637 = xmmword_254A54A28;
    v638 = unk_254A54A38;
    v639 = xmmword_254A54A48;
    v640 = unk_254A54A58;
    v641 = xmmword_254A54A68;
    v642 = unk_254A54A78;
    v643 = xmmword_254A54A88;
    v644 = unk_254A54A98;
    v645 = xmmword_254A54AA8;
    v646 = unk_254A54AB8;
    *(_QWORD *)(v10 + 3232) = qword_254A54AC8;
    *(_OWORD *)(v10 + 3200) = v645;
    *(_OWORD *)(v10 + 3216) = v646;
    *(_OWORD *)(v10 + 3168) = v643;
    *(_OWORD *)(v10 + 3184) = v644;
    *(_OWORD *)(v10 + 3136) = v641;
    *(_OWORD *)(v10 + 3152) = v642;
    *(_OWORD *)(v10 + 3104) = v639;
    *(_OWORD *)(v10 + 3120) = v640;
    *(_OWORD *)(v10 + 3072) = v637;
    *(_OWORD *)(v10 + 3088) = v638;
    *(_OWORD *)(v10 + 3040) = v635;
    *(_OWORD *)(v10 + 3056) = v636;
    *(_OWORD *)(v10 + 3008) = v633;
    *(_OWORD *)(v10 + 3024) = v634;
    *(_OWORD *)(v10 + 2976) = v631;
    *(_OWORD *)(v10 + 2992) = v632;
    *(_OWORD *)(v10 + 2944) = v629;
    *(_OWORD *)(v10 + 2960) = v630;
    *(_OWORD *)(v10 + 2912) = v627;
    *(_OWORD *)(v10 + 2928) = v628;
    *(_OWORD *)(v10 + 2880) = v625;
    *(_OWORD *)(v10 + 2896) = v626;
    v647 = xmmword_254A54C38;
    v648 = unk_254A54C48;
    v649 = xmmword_254A54C58;
    v650 = unk_254A54C68;
    v651 = xmmword_254A54C78;
    v652 = unk_254A54C88;
    v653 = xmmword_254A54C98;
    v654 = unk_254A54CA8;
    v655 = xmmword_254A54CB8;
    v656 = unk_254A54CC8;
    v657 = xmmword_254A54CD8;
    v658 = unk_254A54CE8;
    v659 = xmmword_254A54CF8;
    v660 = unk_254A54D08;
    v661 = xmmword_254A54D18;
    v662 = unk_254A54D28;
    v663 = xmmword_254A54D38;
    v664 = unk_254A54D48;
    v665 = xmmword_254A54D58;
    v666 = unk_254A54D68;
    v667 = xmmword_254A54D78;
    v668 = xmmword_254A54D88;
    *(_QWORD *)(v10 + 3592) = qword_254A54D98;
    *(_OWORD *)(v10 + 3576) = v668;
    *(_OWORD *)(v10 + 3560) = v667;
    *(_OWORD *)(v10 + 3544) = v666;
    *(_OWORD *)(v10 + 3528) = v665;
    *(_OWORD *)(v10 + 3512) = v664;
    *(_OWORD *)(v10 + 3496) = v663;
    *(_OWORD *)(v10 + 3480) = v662;
    *(_OWORD *)(v10 + 3464) = v661;
    *(_OWORD *)(v10 + 3448) = v660;
    *(_OWORD *)(v10 + 3432) = v659;
    *(_OWORD *)(v10 + 3416) = v658;
    *(_OWORD *)(v10 + 3400) = v657;
    *(_OWORD *)(v10 + 3384) = v656;
    *(_OWORD *)(v10 + 3368) = v655;
    *(_OWORD *)(v10 + 3352) = v654;
    *(_OWORD *)(v10 + 3336) = v653;
    *(_OWORD *)(v10 + 3320) = v652;
    *(_OWORD *)(v10 + 3304) = v651;
    *(_OWORD *)(v10 + 3288) = v650;
    *(_OWORD *)(v10 + 3272) = v649;
    *(_OWORD *)(v10 + 3256) = v648;
    *(_OWORD *)(v10 + 3240) = v647;
  }
  if (v12[4][1].i8[4])
  {
    v669 = *(_OWORD *)(v8 + 3680);
    v670 = *(_OWORD *)(v8 + 3696);
    v671 = *(_OWORD *)(v8 + 3712);
    *(_OWORD *)(v10 + 3648) = *(_OWORD *)(v8 + 3728);
    *(_OWORD *)(v10 + 3632) = v671;
    *(_OWORD *)(v10 + 3616) = v670;
    *(_OWORD *)(v10 + 3600) = v669;
    v672 = *(_OWORD *)(v8 + 3744);
    v673 = *(_OWORD *)(v8 + 3760);
    v674 = *(_OWORD *)(v8 + 3776);
    *(_QWORD *)(v10 + 3712) = *(_QWORD *)(v8 + 3792);
    *(_OWORD *)(v10 + 3696) = v674;
    *(_OWORD *)(v10 + 3680) = v673;
    *(_OWORD *)(v10 + 3664) = v672;
  }
  return 1;
}

void sub_20F569B98(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEB0]))
  {
    if (SLOBYTE(STACK[0xEAF]) < 0)
      operator delete((void *)STACK[0xE98]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x668]);
  _Unwind_Resume(a1);
}

void sub_20F569C40()
{
  if (LOBYTE(STACK[0xEB8]) && SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  if (STACK[0xE98])
    os_release((void *)STACK[0xE98]);
  JUMPOUT(0x20F569E04);
}

void sub_20F569C80()
{
  if (LOBYTE(STACK[0xEB8]) && SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  if (STACK[0xE98])
    os_release((void *)STACK[0xE98]);
  JUMPOUT(0x20F569E04);
}

void sub_20F569CC4()
{
  if (LOBYTE(STACK[0xEB8]) && SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  if (STACK[0xE98])
    os_release((void *)STACK[0xE98]);
  JUMPOUT(0x20F569E04);
}

void sub_20F569D08()
{
  if (LOBYTE(STACK[0xEB8]) && SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  if (STACK[0xE98])
    os_release((void *)STACK[0xE98]);
  JUMPOUT(0x20F569E04);
}

void sub_20F569D44()
{
  if (LOBYTE(STACK[0xEB8]) && SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  if (STACK[0xE98])
    os_release((void *)STACK[0xE98]);
  JUMPOUT(0x20F569E04);
}

void sub_20F569DA0()
{
  sub_20E863714(&STACK[0x618]);
  JUMPOUT(0x20F569EF4);
}

void sub_20F569DBC()
{
  if (LOBYTE(STACK[0xE70]) && SLOBYTE(STACK[0xE6F]) < 0)
    operator delete((void *)STACK[0xE58]);
  if (STACK[0xE50])
    os_release((void *)STACK[0xE50]);
  sub_20E863714((uint64_t)&STACK[0x618]);
  JUMPOUT(0x20F569EF4);
}

void sub_20F569E00(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x668]);
  _Unwind_Resume(a1);
}

void sub_20F569E14()
{
  JUMPOUT(0x20F569EF4);
}

void sub_20F569F0C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20F569F14);
  sub_20E860DA4(a1);
}

uint64_t sub_20F569F24(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F56A2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56A2F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F56A314(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F56A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56A6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56A6E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F56A704(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F56AA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56AAD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F56AAF4(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F56AE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56AEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56AEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F56AEE4(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F56B278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56B29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56B2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F56B2D4(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F56B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56B6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F56B6C4(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F56BA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56BA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F56BA90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

_BYTE *sub_20F56BAB4(_BYTE *result, float64x2_t a2, float64x2_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12, int a13)
{
  float64x2_t v13;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v274;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v294;
  float64x2_t v296;
  float64x2_t v301;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v389;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v664;
  float64x2_t v667;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t *v676;
  float64x2_t *v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t *v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t *v686;
  float64x2_t v687;
  float64x2_t v689;
  float64x2_t v691;
  float64x2_t *v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v697;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v727;
  float64x2_t v733;
  uint64_t i;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t *v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  _QWORD *v863;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v935;
  float64x2_t v937;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1029;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1052;
  float64x2_t v1056[136];
  float64x2_t v1057;
  double v1058;
  double v1059;
  double v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  double v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  _BYTE v1132[1080];
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64_t v1178;
  uint64_t v1179;
  float64_t *v1180;

  v1179 = *MEMORY[0x24BDAC8D0];
  v16 = (float64x2_t *)(a11 + 2520);
  switch(a13)
  {
    case 0:
      v17 = a12 + 1;
      if (a11 + 3600 > (unint64_t)&a12[1] && (float64x2_t *)&a12[113].f64[1] > v16)
      {
        MEMORY[0x24BDAC7A8](result);
        result = memcpy(v1056, v17, 0x708uLL);
        v17 = v1056;
      }
      MEMORY[0x24BDAC7A8](result);
      v18 = &v1056[-68];
      memcpy(&v1056[-68], v16, 0x438uLL);
      v19 = v17[1];
      v20 = *(float64x2_t *)((char *)v17 + 136);
      v21 = *(float64x2_t *)((char *)v17 + 120);
      v23 = v17[15];
      v22 = v17[16];
      v24 = *(float64x2_t *)((char *)v17 + 376);
      v25 = *(float64x2_t *)((char *)v17 + 360);
      v26 = v1056[-67];
      v27 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v28 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v29 = v1056[-53];
      v30 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v31 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      _Q24 = v1056[-68];
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v18->f64[0]), v21, *v18, 1), v23, v26.f64[0]), v25, v26, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v18->f64[0]), v20, *v18, 1), v22, v26.f64[0]), v24, v26, 1);
      v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v28.f64[0]), v21, v28, 1), v23, v27.f64[0]), v25, v27, 1);
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v28.f64[0]), v20, v28, 1), v22, v27.f64[0]), v24, v27, 1);
      _Q20 = v29;
      v38 = v1056[-52];
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v29.f64[0]), v21, v29, 1), v23, v38.f64[0]), v25, v38, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v29.f64[0]), v20, v29, 1), v22, v38.f64[0]), v24, v38, 1);
      v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v31.f64[0]), v21, v31, 1), v23, v30.f64[0]), v25, v30, 1);
      v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v31.f64[0]), v20, v31, 1), v22, v30.f64[0]), v24, v30, 1);
      v44 = v17[30];
      v43 = v17[31];
      v46 = *(float64x2_t *)((char *)v17 + 600);
      v45 = *(float64x2_t *)((char *)v17 + 616);
      v48 = v17[45];
      v47 = v17[46];
      v50 = *(float64x2_t *)((char *)v17 + 840);
      v49 = *(float64x2_t *)((char *)v17 + 856);
      v51 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v52 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v53 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v54 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      _Q1 = v1056[-67];
      v56 = v1056[-66];
      _Q2 = v56;
      v58 = v1056[-65];
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v44, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v43, v56.f64[0]), v45, v56, 1), v47, v58.f64[0]), v49, v58, 1);
      v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v35, v44, v52.f64[0]), v46, v52, 1), v48, v51.f64[0]), v50, v51, 1);
      v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v36, v43, v52.f64[0]), v45, v52, 1), v47, v51.f64[0]), v49, v51, 1);
      _Q4 = v1056[-52];
      v64 = v1056[-51];
      _Q3 = v64;
      v66 = v1056[-50];
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v44, v64.f64[0]), v46, v64, 1), v48, v66.f64[0]), v50, v66, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v43, v64.f64[0]), v45, v64, 1), v47, v66.f64[0]), v49, v66, 1);
      v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v41, v44, v54.f64[0]), v46, v54, 1), v48, v53.f64[0]), v50, v53, 1);
      v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v42, v43, v54.f64[0]), v45, v54, 1), v47, v53.f64[0]), v49, v53, 1);
      v72 = v17[60];
      v71 = v17[61];
      v74 = *(float64x2_t *)((char *)v17 + 1080);
      v73 = *(float64x2_t *)((char *)v17 + 1096);
      v75 = v17[76];
      v76 = v17[75];
      v77 = *(float64x2_t *)((char *)v17 + 1320);
      v78 = *(float64x2_t *)((char *)v17 + 1336);
      v79 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v80 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v81 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v82 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q5 = v1056[-65];
      v84 = v1056[-64];
      _Q7 = v84;
      v86 = v1056[-63];
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, v84.f64[0]), v74, v84, 1), v76, v86.f64[0]), v77, v86, 1);
      v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v71, v84.f64[0]), v73, v84, 1), v75, v86.f64[0]), v78, v86, 1);
      v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v80.f64[0]), v74, v80, 1), v76, v79.f64[0]), v77, v79, 1);
      v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, v71, v80.f64[0]), v73, v80, 1), v75, v79.f64[0]), v78, v79, 1);
      _Q18 = v1056[-50];
      v91 = v1056[-49];
      _Q6 = v91;
      v94 = v1056[-48];
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v72, v91.f64[0]), v74, v91, 1), v76, v94.f64[0]), v77, v94, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v71, v91.f64[0]), v73, v91, 1), v75, v94.f64[0]), v78, v94, 1);
      v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, v72, v82.f64[0]), v74, v82, 1), v76, v81.f64[0]), v77, v81, 1);
      v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v70, v71, v82.f64[0]), v73, v82, 1), v75, v81.f64[0]), v78, v81, 1);
      v99 = v17[91];
      v100 = v17[90];
      v102 = *(float64x2_t *)((char *)v17 + 1560);
      v101 = *(float64x2_t *)((char *)v17 + 1576);
      v103 = v17[106];
      v104 = v17[105];
      v71.f64[0] = v1056[-61].f64[0];
      v77.f64[0] = v1056[-54].f64[1];
      v105 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v91.f64[0] = v1056[-46].f64[0];
      v94.f64[0] = v1056[-39].f64[1];
      v106 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      _Q17 = v1056[-63];
      v107 = v1056[-62];
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v100, v107.f64[0]), v102, v107, 1), v104, v71.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v99, v107.f64[0]), v101, v107, 1), v103, v71.f64[0]);
      v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v89, v100, v105.f64[0]), v102, v105, 1), v104, v77.f64[0]);
      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v90, v99, v105.f64[0]), v101, v105, 1), v103, v77.f64[0]);
      _Q16 = v1056[-48];
      v113 = v1056[-47];
      *v16 = v109;
      v16[1] = v110;
      *(float64x2_t *)((char *)v16 + 136) = v112;
      *(float64x2_t *)((char *)v16 + 120) = v111;
      v16[15] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v100, v113.f64[0]), v102, v113, 1), v104, v91.f64[0]);
      v16[16] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v99, v113.f64[0]), v101, v113, 1), v103, v91.f64[0]);
      *(float64x2_t *)(a11 + 2896) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v98, v99, v106.f64[0]), v101, v106, 1), v103, v94.f64[0]);
      *(float64x2_t *)(a11 + 2880) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v97, v100, v106.f64[0]), v102, v106, 1), v104, v94.f64[0]);
      v115 = v17[2];
      v116 = v17[3];
      v117 = *(float64x2_t *)((char *)v17 + 168);
      v118 = *(float64x2_t *)((char *)v17 + 152);
      v120 = v17[17];
      v119 = v17[18];
      v121 = *(float64x2_t *)((char *)v17 + 408);
      v122 = *(float64x2_t *)((char *)v17 + 392);
      v123 = v1056[-67];
      v124 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v125 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v127 = v1056[-53];
      v126 = v1056[-52];
      v128 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v129 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v18->f64[0]), v118, *v18, 1), v120, v123.f64[0]), v122, v123, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v18->f64[0]), v117, *v18, 1), v119, v123.f64[0]), v121, v123, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v125.f64[0]), v118, v125, 1), v120, v124.f64[0]), v122, v124, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v125.f64[0]), v117, v125, 1), v119, v124.f64[0]), v121, v124, 1);
      v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v127.f64[0]), v118, v127, 1), v120, v126.f64[0]), v122, v126, 1);
      v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v127.f64[0]), v117, v127, 1), v119, v126.f64[0]), v121, v126, 1);
      v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v129.f64[0]), v118, v129, 1), v120, v128.f64[0]), v122, v128, 1);
      v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v129.f64[0]), v117, v129, 1), v119, v128.f64[0]), v121, v128, 1);
      v139 = v17[32];
      v138 = v17[33];
      v141 = *(float64x2_t *)((char *)v17 + 632);
      v140 = *(float64x2_t *)((char *)v17 + 648);
      v143 = v17[47];
      v142 = v17[48];
      v145 = *(float64x2_t *)((char *)v17 + 872);
      v144 = *(float64x2_t *)((char *)v17 + 888);
      v147 = v1056[-66];
      v146 = v1056[-65];
      v148 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v149 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v130, v139, v147.f64[0]), v141, v147, 1), v143, v146.f64[0]), v145, v146, 1);
      v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v131, v138, v147.f64[0]), v140, v147, 1), v142, v146.f64[0]), v144, v146, 1);
      v152 = v1056[-51];
      v153 = v1056[-50];
      v154 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v139, v149.f64[0]), v141, v149, 1);
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v138, v149.f64[0]), v140, v149, 1);
      v156 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v157 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v143, v148.f64[0]), v145, v148, 1);
      v158 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v142, v148.f64[0]), v144, v148, 1);
      v159 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v134, v139, v152.f64[0]), v141, v152, 1), v143, v153.f64[0]), v145, v153, 1);
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v135, v138, v152.f64[0]), v140, v152, 1), v142, v153.f64[0]), v144, v153, 1);
      v162 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v136, v139, v159.f64[0]), v141, v159, 1), v143, v156.f64[0]), v145, v156, 1);
      v163 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v137, v138, v159.f64[0]), v140, v159, 1), v142, v156.f64[0]), v144, v156, 1);
      v165 = v17[62];
      v164 = v17[63];
      v167 = *(float64x2_t *)((char *)v17 + 1112);
      v166 = *(float64x2_t *)((char *)v17 + 1128);
      v168 = v17[78];
      v169 = v17[77];
      v171 = *(float64x2_t *)((char *)v17 + 1352);
      v170 = *(float64x2_t *)((char *)v17 + 1368);
      v173 = v1056[-64];
      v172 = v1056[-63];
      v174 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v175 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v176 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v150, v165, v173.f64[0]), v167, v173, 1), v169, v172.f64[0]), v171, v172, 1);
      v177 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v151, v164, v173.f64[0]), v166, v173, 1), v168, v172.f64[0]), v170, v172, 1);
      v178 = v1056[-49];
      v179 = v1056[-48];
      v180 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v165, v175.f64[0]), v167, v175, 1);
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v164, v175.f64[0]), v166, v175, 1);
      v182 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v183 = vmlaq_laneq_f64(vmlaq_n_f64(v180, v169, v174.f64[0]), v171, v174, 1);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v168, v174.f64[0]), v170, v174, 1);
      v185 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v160, v165, v178.f64[0]), v167, v178, 1), v169, v179.f64[0]), v171, v179, 1);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v161, v164, v178.f64[0]), v166, v178, 1), v168, v179.f64[0]), v170, v179, 1);
      v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v162, v165, v185.f64[0]), v167, v185, 1), v169, v182.f64[0]), v171, v182, 1);
      v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v163, v164, v185.f64[0]), v166, v185, 1), v168, v182.f64[0]), v170, v182, 1);
      v190 = v17[93];
      v191 = v17[92];
      v193 = *(float64x2_t *)((char *)v17 + 1592);
      v192 = *(float64x2_t *)((char *)v17 + 1608);
      v194 = v17[108];
      v195 = v17[107];
      v170.f64[0] = v1056[-61].f64[0];
      v196 = v1056[-62];
      v178.f64[0] = v1056[-54].f64[1];
      v197 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v185.f64[0] = v1056[-46].f64[0];
      v198 = v1056[-47];
      v199 = vmlaq_laneq_f64(vmlaq_n_f64(v176, v191, v196.f64[0]), v193, v196, 1);
      v200 = vmlaq_laneq_f64(vmlaq_n_f64(v177, v190, v196.f64[0]), v192, v196, 1);
      v196.f64[0] = v1056[-39].f64[1];
      v201 = vmlaq_n_f64(v199, v195, v170.f64[0]);
      v202 = vmlaq_n_f64(v200, v194, v170.f64[0]);
      v203 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v16[2] = v201;
      v16[3] = v202;
      *(float64x2_t *)((char *)v16 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v184, v190, v197.f64[0]), v192, v197, 1), v194, v178.f64[0]);
      *(float64x2_t *)((char *)v16 + 152) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v183, v191, v197.f64[0]), v193, v197, 1), v195, v178.f64[0]);
      v16[17] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v186, v191, v198.f64[0]), v193, v198, 1), v195, v185.f64[0]);
      v16[18] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v187, v190, v198.f64[0]), v192, v198, 1), v194, v185.f64[0]);
      *(float64x2_t *)(a11 + 2928) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v189, v190, v203.f64[0]), v192, v203, 1), v194, v196.f64[0]);
      *(float64x2_t *)(a11 + 2912) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v188, v191, v203.f64[0]), v193, v203, 1), v195, v196.f64[0]);
      v204 = v17[4];
      v205 = v17[5];
      v206 = *(float64x2_t *)((char *)v17 + 200);
      v207 = *(float64x2_t *)((char *)v17 + 184);
      v209 = v17[19];
      v208 = v17[20];
      v210 = *(float64x2_t *)((char *)v17 + 440);
      v211 = *(float64x2_t *)((char *)v17 + 424);
      v212 = v1056[-67];
      v213 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v214 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v216 = v1056[-53];
      v215 = v1056[-52];
      v217 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v218 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v18->f64[0]), v207, *v18, 1), v209, v212.f64[0]), v211, v212, 1);
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v18->f64[0]), v206, *v18, 1), v208, v212.f64[0]), v210, v212, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v214.f64[0]), v207, v214, 1), v209, v213.f64[0]), v211, v213, 1);
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v214.f64[0]), v206, v214, 1), v208, v213.f64[0]), v210, v213, 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v216.f64[0]), v207, v216, 1), v209, v215.f64[0]), v211, v215, 1);
      v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v216.f64[0]), v206, v216, 1), v208, v215.f64[0]), v210, v215, 1);
      v225 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v218.f64[0]), v207, v218, 1), v209, v217.f64[0]), v211, v217, 1);
      v226 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v218.f64[0]), v206, v218, 1), v208, v217.f64[0]), v210, v217, 1);
      v228 = v17[34];
      v227 = v17[35];
      result = (_BYTE *)&v17[41].f64[1];
      v230 = *(float64x2_t *)((char *)v17 + 664);
      v229 = *(float64x2_t *)((char *)v17 + 680);
      v232 = v17[49];
      v231 = v17[50];
      v234 = *(float64x2_t *)((char *)v17 + 904);
      v233 = *(float64x2_t *)((char *)v17 + 920);
      v236 = v1056[-66];
      v235 = v1056[-65];
      v237 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v238 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v219, v228, v236.f64[0]), v230, v236, 1), v232, v235.f64[0]), v234, v235, 1);
      v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v220, v227, v236.f64[0]), v229, v236, 1), v231, v235.f64[0]), v233, v235, 1);
      v241 = v1056[-51];
      v242 = v1056[-50];
      v243 = vmlaq_laneq_f64(vmlaq_n_f64(v221, v228, v238.f64[0]), v230, v238, 1);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v222, v227, v238.f64[0]), v229, v238, 1);
      v245 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v246 = vmlaq_laneq_f64(vmlaq_n_f64(v243, v232, v237.f64[0]), v234, v237, 1);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v231, v237.f64[0]), v233, v237, 1);
      v248 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v223, v228, v241.f64[0]), v230, v241, 1), v232, v242.f64[0]), v234, v242, 1);
      v250 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v224, v227, v241.f64[0]), v229, v241, 1), v231, v242.f64[0]), v233, v242, 1);
      v251 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v225, v228, v248.f64[0]), v230, v248, 1), v232, v245.f64[0]), v234, v245, 1);
      v252 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v226, v227, v248.f64[0]), v229, v248, 1), v231, v245.f64[0]), v233, v245, 1);
      v253 = v17[65];
      v254 = v17[64];
      v256 = *(float64x2_t *)((char *)v17 + 1144);
      v255 = *(float64x2_t *)((char *)v17 + 1160);
      v257 = v17[80];
      v258 = v17[79];
      v260 = *(float64x2_t *)((char *)v17 + 1384);
      v259 = *(float64x2_t *)((char *)v17 + 1400);
      v262 = v1056[-64];
      v261 = v1056[-63];
      v263 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v264 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v265 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v239, v254, v262.f64[0]), v256, v262, 1), v258, v261.f64[0]), v260, v261, 1);
      v266 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v240, v253, v262.f64[0]), v255, v262, 1), v257, v261.f64[0]), v259, v261, 1);
      v267 = v1056[-49];
      v268 = v1056[-48];
      v269 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v254, v264.f64[0]), v256, v264, 1);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v247, v253, v264.f64[0]), v255, v264, 1);
      v271 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v258, v263.f64[0]), v260, v263, 1);
      _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v257, v263.f64[0]), v259, v263, 1);
      v274 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v254, v267.f64[0]), v256, v267, 1), v258, v268.f64[0]), v260, v268, 1);
      v276 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v253, v267.f64[0]), v255, v267, 1), v257, v268.f64[0]), v259, v268, 1);
      v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v251, v254, v274.f64[0]), v256, v274, 1), v258, v271.f64[0]), v260, v271, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v252, v253, v274.f64[0]), v255, v274, 1), v257, v271.f64[0]), v259, v271, 1);
      v279 = v17[95];
      v280 = v17[94];
      _Q31 = *(float64x2_t *)((char *)v17 + 1624);
      v281 = *(float64x2_t *)((char *)v17 + 1640);
      v283 = v17[110];
      v284 = v17[109];
      v259.f64[0] = v1056[-61].f64[0];
      v285 = v1056[-62];
      v267.f64[0] = v1056[-54].f64[1];
      v286 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v274.f64[0] = v1056[-46].f64[0];
      v287 = v1056[-47];
      v288 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v280, v285.f64[0]), _Q31, v285, 1);
      v289 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v279, v285.f64[0]), v281, v285, 1);
      v285.f64[0] = v1056[-39].f64[1];
      v290 = vmlaq_n_f64(v288, v284, v259.f64[0]);
      v291 = vmlaq_n_f64(v289, v283, v259.f64[0]);
      v292 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v16[4] = v290;
      v16[5] = v291;
      *(float64x2_t *)((char *)v16 + 200) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q22, v279, v286.f64[0]), v281, v286, 1), v283, v267.f64[0]);
      *(float64x2_t *)((char *)v16 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v272, v280, v286.f64[0]), _Q31, v286, 1), v284, v267.f64[0]);
      v16[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v280, v287.f64[0]), _Q31, v287, 1), v284, v274.f64[0]);
      v16[20] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v276, v279, v287.f64[0]), v281, v287, 1), v283, v274.f64[0]);
      *(float64x2_t *)(a11 + 2960) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v279, v292.f64[0]), v281, v292, 1), v283, v285.f64[0]);
      *(float64x2_t *)(a11 + 2944) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v277, v280, v292.f64[0]), _Q31, v292, 1), v284, v285.f64[0]);
      _Q26 = v17[6];
      _Q27.f64[0] = v17[14].f64[1];
      v294 = *(float64x2_t *)((char *)v17 + 216);
      _Q30 = v17[21];
      _Q31.f64[0] = v17[29].f64[1];
      v296 = *(float64x2_t *)((char *)v17 + 456);
      _Q19 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      _Q21 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v301 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v294, _Q24, 1), _Q30, _Q1.f64[0]), v296, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v294, _Q21, 1), _Q30, _Q19.f64[0]), v296, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
      }
      v307 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v294, _Q20, 1), _Q30, _Q4.f64[0]), v296, _Q4, 1);
      __asm
      {
        FMLA            D21, D27, V20.D[1]
        FMLA            D21, D31, V4.D[1]
      }
      v308 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q10.f64[0]), v294, _Q10, 1), _Q30, _Q9.f64[0]), v296, _Q9, 1);
      __asm
      {
        FMLA            D20, D27, V10.D[1]
        FMLA            D20, D31, V9.D[1]
      }
      v309 = v17[36];
      *(_QWORD *)&v1131.f64[0] = &v17[43].f64[1];
      _Q26.f64[0] = v17[44].f64[1];
      v310 = *(float64x2_t *)((char *)v17 + 696);
      v311 = v17[51];
      *(_QWORD *)&v1130.f64[0] = &v17[58].f64[1];
      _Q30.f64[0] = v17[59].f64[1];
      v312 = *(float64x2_t *)((char *)v17 + 936);
      _Q8 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      _Q11 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v301, v309, _Q2.f64[0]), v310, _Q2, 1), v311, _Q5.f64[0]), v312, _Q5, 1);
      __asm
      {
        FMLA            D23, D26, V2.D[1]
        FMLA            D23, D30, V5.D[1]
      }
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v306, v309, _Q9.f64[0]), v310, _Q9, 1), v311, _Q8.f64[0]), v312, _Q8, 1);
      __asm
      {
        FMLA            D22, D26, V9.D[1]
        FMLA            D22, D30, V8.D[1]
      }
      v319 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v307, v309, _Q3.f64[0]), v310, _Q3, 1), v311, _Q18.f64[0]), v312, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v320 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v308, v309, _Q11.f64[0]), v310, _Q11, 1), v311, _Q10.f64[0]), v312, _Q10, 1);
      __asm
      {
        FMLA            D20, D26, V11.D[1]
        FMLA            D20, D30, V10.D[1]
      }
      v321 = v17[66];
      *(_QWORD *)&v1129.f64[0] = &v17[73].f64[1];
      _Q5.f64[0] = v17[74].f64[1];
      v322 = *(float64x2_t *)((char *)v17 + 1176);
      v323 = v17[81];
      *(_QWORD *)&v1128.f64[0] = &v17[88].f64[1];
      _Q26.f64[0] = v17[89].f64[1];
      v324 = *(float64x2_t *)((char *)v17 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      _Q29 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      _Q30 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      _Q31 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v329 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v317, v321, _Q7.f64[0]), v322, _Q7, 1), v323, _Q17.f64[0]), v324, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v330 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v318, v321, _Q29.f64[0]), v322, _Q29, 1), v323, _Q28.f64[0]), v324, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v331 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v319, v321, _Q6.f64[0]), v322, _Q6, 1), v323, _Q16.f64[0]), v324, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v332 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v320, v321, _Q31.f64[0]), v322, _Q31, 1), v323, _Q30.f64[0]), v324, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v333 = v17[96];
      *(_QWORD *)&v1127.f64[0] = &v17[103].f64[1];
      _Q5.f64[0] = v17[104].f64[1];
      v334 = *(float64x2_t *)((char *)v17 + 1656);
      _Q7.f64[0] = v17[112].f64[0];
      v335 = v17[111];
      _Q17.f64[0] = v1056[-61].f64[0];
      _Q18 = v1056[-62];
      _Q24.f64[0] = v1056[-54].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      _Q26.f64[0] = v1056[-46].f64[0];
      _Q27 = v1056[-47];
      _Q28.f64[0] = v1056[-39].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v16[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v16[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v329, v333, _Q18.f64[0]), v334, _Q18, 1), v335, _Q17.f64[0]);
      v16[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v16 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v330, v333, _Q25.f64[0]), v334, _Q25, 1), v335, _Q24.f64[0]);
      v16[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v16[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v331, v333, _Q27.f64[0]), v334, _Q27, 1), v335, _Q26.f64[0]);
      v16[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v16 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v332, v333, _Q29.f64[0]), v334, _Q29, 1), v335, _Q28.f64[0]);
      v341 = *v17;
      v340 = v17[1];
      v342 = *(float64x2_t *)((char *)v17 + 136);
      v343 = *(float64x2_t *)((char *)v17 + 120);
      v345 = v17[15];
      v344 = v17[16];
      v346 = *(float64x2_t *)((char *)v17 + 376);
      v347 = *(float64x2_t *)((char *)v17 + 360);
      v348 = v1056[-38];
      v349 = v1056[-37];
      v350 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v351 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v352 = v1056[-23];
      v353 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      _Q22 = v348;
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v348.f64[0]), v343, v348, 1), v345, v349.f64[0]), v347, v349, 1);
      v356 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v348.f64[0]), v342, v348, 1), v344, v349.f64[0]), v346, v349, 1);
      _Q20 = v350;
      v358 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v350.f64[0]), v343, v350, 1), v345, v351.f64[0]), v347, v351, 1);
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v350.f64[0]), v342, v350, 1), v344, v351.f64[0]), v346, v351, 1);
      v360 = vmlaq_laneq_f64(vmulq_n_f64(*v17, v352.f64[0]), v343, v352, 1);
      v361 = v1056[-22];
      v1126 = v352;
      v362 = vmlaq_laneq_f64(vmlaq_n_f64(v360, v345, v361.f64[0]), v347, v361, 1);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v352.f64[0]), v342, v352, 1), v344, v361.f64[0]), v346, v361, 1);
      v364 = vmlaq_laneq_f64(vmulq_n_f64(v341, v353.f64[0]), v343, v353, 1);
      v365 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v1125 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v366 = vmlaq_laneq_f64(vmlaq_n_f64(v364, v345, v365.f64[0]), v347, v365, 1);
      v367 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v353.f64[0]), v342, v353, 1), v344, v365.f64[0]), v346, v365, 1);
      v369 = v17[30];
      v368 = v17[31];
      v371 = *(float64x2_t *)((char *)v17 + 600);
      v370 = *(float64x2_t *)((char *)v17 + 616);
      v373 = v17[45];
      v372 = v17[46];
      v375 = *(float64x2_t *)((char *)v17 + 840);
      v374 = *(float64x2_t *)((char *)v17 + 856);
      v376 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      _Q19 = v1056[-37];
      v377 = v1056[-36];
      _Q7 = v377;
      v380 = v1056[-35];
      v381 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v369, v377.f64[0]), v371, v377, 1), v373, v380.f64[0]), v375, v380, 1);
      v382 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v356, v368, v377.f64[0]), v370, v377, 1), v372, v380.f64[0]), v374, v380, 1);
      _Q16 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v384 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v385 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v358, v369, v1056[-29].f64[1]), v371, _Q16, 1), v373, v384.f64[0]), v375, v384, 1);
      v386 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v368, v1056[-29].f64[1]), v370, _Q16, 1), v372, v384.f64[0]), v374, v384, 1);
      _Q25 = v1056[-22];
      v387 = v1056[-21];
      _Q17 = v387;
      v389 = v1056[-20];
      v391 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v362, v369, v387.f64[0]), v371, v387, 1), v373, v389.f64[0]), v375, v389, 1);
      v392 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v363, v368, v387.f64[0]), v370, v387, 1), v372, v389.f64[0]), v374, v389, 1);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(v366, v369, v376.f64[0]), v371, v376, 1);
      _Q18 = v376;
      v395 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v396 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v373, v395.f64[0]), v375, v395, 1);
      v397 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v367, v368, v376.f64[0]), v370, v376, 1), v372, v395.f64[0]), v374, v395, 1);
      v398 = v17[60];
      v399 = v17[61];
      v401 = *(float64x2_t *)((char *)v17 + 1080);
      v400 = *(float64x2_t *)((char *)v17 + 1096);
      v402 = v17[76];
      v403 = v17[75];
      v405 = *(float64x2_t *)((char *)v17 + 1320);
      v404 = *(float64x2_t *)((char *)v17 + 1336);
      v406 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      _Q26 = v1056[-35];
      v408 = v1056[-33];
      v1124 = v1056[-34];
      v409 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v381, v398, v1124.f64[0]), v401, v1124, 1), v403, v408.f64[0]), v405, v408, 1);
      v410 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v382, v399, v1124.f64[0]), v400, v1124, 1), v402, v408.f64[0]), v404, v408, 1);
      v411 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v1121 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v385, v398, v406.f64[0]), v401, v406, 1), v403, v411.f64[0]), v405, v411, 1);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v386, v399, v406.f64[0]), v400, v406, 1), v402, v411.f64[0]), v404, v411, 1);
      _Q27 = v1056[-20];
      v416 = v1056[-18];
      v1123 = v1056[-19];
      v414 = v1123;
      v417 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v391, v398, v414.f64[0]), v401, v414, 1), v403, v416.f64[0]), v405, v416, 1);
      v418 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v392, v399, v414.f64[0]), v400, v414, 1), v402, v416.f64[0]), v404, v416, 1);
      v419 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v420 = vmlaq_laneq_f64(vmlaq_n_f64(v396, v398, v419.f64[0]), v401, v419, 1);
      v421 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v1122 = v419;
      v422 = vmlaq_n_f64(v420, v403, v421.f64[0]);
      v423 = vmlaq_laneq_f64(vmlaq_n_f64(v397, v399, v419.f64[0]), v400, v419, 1);
      v424 = v17[91];
      v425 = v17[90];
      v427 = *(float64x2_t *)((char *)v17 + 1560);
      v426 = *(float64x2_t *)((char *)v17 + 1576);
      v428 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v429 = vmlaq_laneq_f64(vmlaq_n_f64(v412, v425, v428.f64[0]), v427, v428, 1);
      v430 = vmlaq_laneq_f64(vmlaq_n_f64(v413, v424, v428.f64[0]), v426, v428, 1);
      v431 = v17[105];
      v368.f64[0] = v1056[-24].f64[1];
      v432 = v17[106];
      *(float64x2_t *)((char *)v16 + 600) = vmlaq_n_f64(v429, v431, v368.f64[0]);
      *(float64x2_t *)((char *)v16 + 616) = vmlaq_n_f64(v430, v432, v368.f64[0]);
      v433 = vmlaq_laneq_f64(vmlaq_n_f64(v423, v402, v421.f64[0]), v404, v421, 1);
      v368.f64[0] = v1056[-31].f64[0];
      v430.f64[0] = v1056[-16].f64[0];
      _Q24 = v1056[-33];
      v434 = v1056[-32];
      v436 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v409, v425, v434.f64[0]), v427, v434, 1), v431, v368.f64[0]);
      v437 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v410, v424, v434.f64[0]), v426, v434, 1), v432, v368.f64[0]);
      _Q21 = v1056[-18];
      v438 = v1056[-17];
      v440 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v417, v425, v438.f64[0]), v427, v438, 1), v431, v430.f64[0]);
      v441 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v418, v424, v438.f64[0]), v426, v438, 1), v432, v430.f64[0]);
      _Q23 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v442 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v404.f64[0] = v1056[-9].f64[1];
      v16[30] = v436;
      v16[31] = v437;
      v16[45] = v440;
      v16[46] = v441;
      *(float64x2_t *)(a11 + 3376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v433, v424, v442.f64[0]), v426, v442, 1), v432, v404.f64[0]);
      *(float64x2_t *)(a11 + 3360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v422, v405, v421, 1), v425, v442.f64[0]), v427, v442, 1), v431, v404.f64[0]);
      v445 = v17[2];
      v444 = v17[3];
      v446 = *(float64x2_t *)((char *)v17 + 168);
      v447 = *(float64x2_t *)((char *)v17 + 152);
      v449 = v17[17];
      v448 = v17[18];
      v450 = *(float64x2_t *)((char *)v17 + 408);
      v451 = *(float64x2_t *)((char *)v17 + 392);
      v453 = v1056[-38];
      v452 = v1056[-37];
      v454 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v455 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v453.f64[0]), v447, v453, 1), v449, v452.f64[0]), v451, v452, 1);
      v456 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v453.f64[0]), v446, v453, 1), v448, v452.f64[0]), v450, v452, 1);
      v457 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v454.f64[0]), v447, v454, 1), v449, v457.f64[0]), v451, v457, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v454.f64[0]), v446, v454, 1), v448, v457.f64[0]), v450, v457, 1);
      v460 = v1056[-23];
      v461 = vmlaq_laneq_f64(vmulq_n_f64(v445, v460.f64[0]), v447, v460, 1);
      v462 = vmlaq_laneq_f64(vmulq_n_f64(v444, v460.f64[0]), v446, v460, 1);
      v463 = v1056[-22];
      v464 = vmlaq_laneq_f64(vmlaq_n_f64(v461, v449, v463.f64[0]), v451, v463, 1);
      v465 = vmlaq_laneq_f64(vmlaq_n_f64(v462, v448, v463.f64[0]), v450, v463, 1);
      v466 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v467 = vmlaq_laneq_f64(vmulq_n_f64(v445, v466.f64[0]), v447, v466, 1);
      v468 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v469 = vmlaq_laneq_f64(vmlaq_n_f64(v467, v449, v468.f64[0]), v451, v468, 1);
      v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v466.f64[0]), v446, v466, 1), v448, v468.f64[0]), v450, v468, 1);
      v471 = v17[32];
      v472 = v17[33];
      v474 = *(float64x2_t *)((char *)v17 + 632);
      v473 = *(float64x2_t *)((char *)v17 + 648);
      v475 = v1056[-36];
      v476 = v1056[-35];
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v471, v475.f64[0]), v474, v475, 1);
      v478 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v472, v475.f64[0]), v473, v475, 1);
      v479 = v17[47];
      v480 = v17[48];
      v482 = *(float64x2_t *)((char *)v17 + 872);
      v481 = *(float64x2_t *)((char *)v17 + 888);
      v483 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v479, v476.f64[0]), v482, v476, 1);
      v484 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v480, v476.f64[0]), v481, v476, 1);
      v485 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v486 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v471, v485.f64[0]), v474, v485, 1);
      v487 = vmlaq_laneq_f64(vmlaq_n_f64(v459, v472, v485.f64[0]), v473, v485, 1);
      v488 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v489 = vmlaq_laneq_f64(vmlaq_n_f64(v486, v479, v488.f64[0]), v482, v488, 1);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(v487, v480, v488.f64[0]), v481, v488, 1);
      v491 = v1056[-21];
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v471, v491.f64[0]), v474, v491, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v472, v491.f64[0]), v473, v491, 1);
      v494 = v1056[-20];
      v495 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v479, v494.f64[0]), v482, v494, 1);
      v496 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v480, v494.f64[0]), v481, v494, 1);
      v497 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v498 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v471, v497.f64[0]), v474, v497, 1);
      v499 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v500 = vmlaq_laneq_f64(vmlaq_n_f64(v498, v479, v499.f64[0]), v482, v499, 1);
      v501 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v470, v472, v497.f64[0]), v473, v497, 1), v480, v499.f64[0]), v481, v499, 1);
      v503 = v17[62];
      v502 = v17[63];
      v505 = *(float64x2_t *)((char *)v17 + 1112);
      v504 = *(float64x2_t *)((char *)v17 + 1128);
      v506 = v1056[-34];
      v507 = v1056[-33];
      v508 = vmlaq_laneq_f64(vmlaq_n_f64(v483, v503, v506.f64[0]), v505, v506, 1);
      v509 = vmlaq_laneq_f64(vmlaq_n_f64(v484, v502, v506.f64[0]), v504, v506, 1);
      v510 = v17[77];
      v511 = *(float64x2_t *)((char *)v17 + 1352);
      v512 = *(float64x2_t *)((char *)v17 + 1368);
      v513 = vmlaq_laneq_f64(vmlaq_n_f64(v508, v510, v507.f64[0]), v511, v507, 1);
      v514 = v17[78];
      v515 = vmlaq_laneq_f64(vmlaq_n_f64(v509, v514, v507.f64[0]), v512, v507, 1);
      v516 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v503, v516.f64[0]), v505, v516, 1);
      v518 = vmlaq_laneq_f64(vmlaq_n_f64(v490, v502, v516.f64[0]), v504, v516, 1);
      v519 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v520 = vmlaq_laneq_f64(vmlaq_n_f64(v517, v510, v519.f64[0]), v511, v519, 1);
      v521 = vmlaq_laneq_f64(vmlaq_n_f64(v518, v514, v519.f64[0]), v512, v519, 1);
      v522 = v1056[-19];
      v523 = vmlaq_laneq_f64(vmlaq_n_f64(v495, v503, v522.f64[0]), v505, v522, 1);
      v524 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v502, v522.f64[0]), v504, v522, 1);
      v525 = v1056[-18];
      v526 = vmlaq_laneq_f64(vmlaq_n_f64(v523, v510, v525.f64[0]), v511, v525, 1);
      v527 = vmlaq_laneq_f64(vmlaq_n_f64(v524, v514, v525.f64[0]), v512, v525, 1);
      v528 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v529 = vmlaq_laneq_f64(vmlaq_n_f64(v500, v503, v528.f64[0]), v505, v528, 1);
      v530 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v510, v530.f64[0]), v511, v530, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v501, v502, v528.f64[0]), v504, v528, 1), v514, v530.f64[0]), v512, v530, 1);
      v533 = v17[93];
      v534 = v17[92];
      v536 = *(float64x2_t *)((char *)v17 + 1592);
      v535 = *(float64x2_t *)((char *)v17 + 1608);
      v537 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v538 = vmlaq_laneq_f64(vmlaq_n_f64(v520, v534, v537.f64[0]), v536, v537, 1);
      v539 = vmlaq_laneq_f64(vmlaq_n_f64(v521, v533, v537.f64[0]), v535, v537, 1);
      v540 = v17[107];
      v528.f64[0] = v1056[-24].f64[1];
      v541 = v17[108];
      *(float64x2_t *)((char *)v16 + 632) = vmlaq_n_f64(v538, v540, v528.f64[0]);
      *(float64x2_t *)((char *)v16 + 648) = vmlaq_n_f64(v539, v541, v528.f64[0]);
      v542 = v1056[-32];
      v543 = vmlaq_laneq_f64(vmlaq_n_f64(v513, v534, v542.f64[0]), v536, v542, 1);
      v544 = vmlaq_laneq_f64(vmlaq_n_f64(v515, v533, v542.f64[0]), v535, v542, 1);
      v542.f64[0] = v1056[-31].f64[0];
      v545 = vmlaq_n_f64(v543, v540, v542.f64[0]);
      v546 = vmlaq_n_f64(v544, v541, v542.f64[0]);
      v547 = v1056[-17];
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(v526, v534, v547.f64[0]), v536, v547, 1);
      v549 = vmlaq_laneq_f64(vmlaq_n_f64(v527, v533, v547.f64[0]), v535, v547, 1);
      v547.f64[0] = v1056[-16].f64[0];
      v550 = vmlaq_n_f64(v548, v540, v547.f64[0]);
      v551 = vmlaq_n_f64(v549, v541, v547.f64[0]);
      v552 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v553 = vmlaq_n_f64(v531, v534, v552.f64[0]);
      v534.f64[0] = v1056[-9].f64[1];
      v16[32] = v545;
      v16[33] = v546;
      v16[47] = v550;
      v16[48] = v551;
      *(float64x2_t *)(a11 + 3408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, v533, v552.f64[0]), v535, v552, 1), v541, v534.f64[0]);
      *(float64x2_t *)(a11 + 3392) = vmlaq_n_f64(vmlaq_laneq_f64(v553, v536, v552, 1), v540, v534.f64[0]);
      v555 = v17[4];
      v554 = v17[5];
      v556 = *(float64x2_t *)((char *)v17 + 200);
      v557 = *(float64x2_t *)((char *)v17 + 184);
      v558 = v17[19];
      v559 = v17[20];
      v560 = *(float64x2_t *)((char *)v17 + 440);
      v561 = *(float64x2_t *)((char *)v17 + 424);
      v563 = v1056[-38];
      v562 = v1056[-37];
      v564 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v555, v563.f64[0]), v557, v563, 1), v558, v562.f64[0]), v561, v562, 1);
      v566 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v563.f64[0]), v556, v563, 1), v559, v562.f64[0]), v560, v562, 1);
      v567 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v555, v564.f64[0]), v557, v564, 1), v558, v567.f64[0]), v561, v567, 1);
      v569 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v564.f64[0]), v556, v564, 1), v559, v567.f64[0]), v560, v567, 1);
      v570 = v1056[-23];
      v571 = vmlaq_laneq_f64(vmulq_n_f64(v555, v570.f64[0]), v557, v570, 1);
      v572 = vmlaq_laneq_f64(vmulq_n_f64(v554, v570.f64[0]), v556, v570, 1);
      v573 = v1056[-22];
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(v571, v558, v573.f64[0]), v561, v573, 1);
      v575 = vmlaq_laneq_f64(vmlaq_n_f64(v572, v559, v573.f64[0]), v560, v573, 1);
      v576 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v577 = vmlaq_laneq_f64(vmulq_n_f64(v555, v576.f64[0]), v557, v576, 1);
      v578 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v579 = vmlaq_laneq_f64(vmlaq_n_f64(v577, v558, v578.f64[0]), v561, v578, 1);
      v580 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v576.f64[0]), v556, v576, 1), v559, v578.f64[0]), v560, v578, 1);
      v582 = v17[34];
      v581 = v17[35];
      v583 = *(float64x2_t *)((char *)v17 + 664);
      v584 = *(float64x2_t *)((char *)v17 + 680);
      v585 = v1056[-36];
      v586 = v1056[-35];
      v587 = vmlaq_laneq_f64(vmlaq_n_f64(v565, v582, v585.f64[0]), v583, v585, 1);
      v588 = vmlaq_laneq_f64(vmlaq_n_f64(v566, v581, v585.f64[0]), v584, v585, 1);
      v589 = v17[49];
      v590 = v17[50];
      v591 = *(float64x2_t *)((char *)v17 + 904);
      v592 = *(float64x2_t *)((char *)v17 + 920);
      v593 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v589, v586.f64[0]), v591, v586, 1);
      v594 = vmlaq_laneq_f64(vmlaq_n_f64(v588, v590, v586.f64[0]), v592, v586, 1);
      v595 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v596 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v582, v595.f64[0]), v583, v595, 1);
      v597 = vmlaq_laneq_f64(vmlaq_n_f64(v569, v581, v595.f64[0]), v584, v595, 1);
      v598 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v599 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v589, v598.f64[0]), v591, v598, 1);
      v600 = vmlaq_laneq_f64(vmlaq_n_f64(v597, v590, v598.f64[0]), v592, v598, 1);
      v601 = v1056[-21];
      v602 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v582, v601.f64[0]), v583, v601, 1);
      v603 = vmlaq_laneq_f64(vmlaq_n_f64(v575, v581, v601.f64[0]), v584, v601, 1);
      v604 = v1056[-20];
      v605 = vmlaq_laneq_f64(vmlaq_n_f64(v602, v589, v604.f64[0]), v591, v604, 1);
      v606 = vmlaq_laneq_f64(vmlaq_n_f64(v603, v590, v604.f64[0]), v592, v604, 1);
      v607 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v608 = vmlaq_laneq_f64(vmlaq_n_f64(v579, v582, v607.f64[0]), v583, v607, 1);
      v609 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v610 = vmlaq_laneq_f64(vmlaq_n_f64(v608, v589, v609.f64[0]), v591, v609, 1);
      v611 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v580, v581, v607.f64[0]), v584, v607, 1), v590, v609.f64[0]), v592, v609, 1);
      v612 = v17[65];
      v613 = v17[64];
      v614 = *(float64x2_t *)((char *)v17 + 1144);
      v615 = *(float64x2_t *)((char *)v17 + 1160);
      v616 = v1056[-34];
      v617 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v613, v616.f64[0]), v614, v616, 1);
      v618 = vmlaq_laneq_f64(vmlaq_n_f64(v594, v612, v616.f64[0]), v615, v616, 1);
      v619 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v620 = vmlaq_laneq_f64(vmlaq_n_f64(v599, v613, v619.f64[0]), v614, v619, 1);
      v621 = vmlaq_laneq_f64(vmlaq_n_f64(v600, v612, v619.f64[0]), v615, v619, 1);
      v622 = v1056[-19];
      v623 = vmlaq_laneq_f64(vmlaq_n_f64(v605, v613, v622.f64[0]), v614, v622, 1);
      v624 = vmlaq_laneq_f64(vmlaq_n_f64(v606, v612, v622.f64[0]), v615, v622, 1);
      v625 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v626 = vmlaq_n_f64(v610, v613, v625.f64[0]);
      v627 = v17[80];
      v628 = vmlaq_laneq_f64(v626, v614, v625, 1);
      v629 = v17[79];
      v630 = vmlaq_laneq_f64(vmlaq_n_f64(v611, v612, v625.f64[0]), v615, v625, 1);
      v632 = *(float64x2_t *)((char *)v17 + 1384);
      v631 = *(float64x2_t *)((char *)v17 + 1400);
      v633 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v634 = vmlaq_laneq_f64(vmlaq_n_f64(v620, v629, v633.f64[0]), v632, v633, 1);
      v635 = vmlaq_laneq_f64(vmlaq_n_f64(v621, v627, v633.f64[0]), v631, v633, 1);
      v636 = v17[94];
      v637 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v638 = *(float64x2_t *)((char *)v17 + 1624);
      v639 = *(float64x2_t *)((char *)v17 + 1640);
      _Q12 = vmlaq_laneq_f64(vmlaq_n_f64(v634, v636, v637.f64[0]), v638, v637, 1);
      _Q14 = v17[95];
      _Q13 = vmlaq_laneq_f64(vmlaq_n_f64(v635, _Q14, v637.f64[0]), v639, v637, 1);
      _Q10 = v17[109];
      v612.f64[0] = v1056[-24].f64[1];
      v644 = v17[110];
      *(float64x2_t *)((char *)v16 + 664) = vmlaq_n_f64(_Q12, _Q10, v612.f64[0]);
      *(float64x2_t *)((char *)v16 + 680) = vmlaq_n_f64(_Q13, v644, v612.f64[0]);
      v645 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v646 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v629, v645.f64[0]), v632, v645, 1);
      v647 = vmlaq_laneq_f64(vmlaq_n_f64(v630, v627, v645.f64[0]), v631, v645, 1);
      v648 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v649 = vmlaq_laneq_f64(vmlaq_n_f64(v646, v636, v648.f64[0]), v638, v648, 1);
      v650 = vmlaq_laneq_f64(vmlaq_n_f64(v647, _Q14, v648.f64[0]), v639, v648, 1);
      v648.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)(a11 + 3440) = vmlaq_n_f64(v650, v644, v648.f64[0]);
      *(float64x2_t *)(a11 + 3424) = vmlaq_n_f64(v649, _Q10, v648.f64[0]);
      v651 = v1056[-33];
      v652 = vmlaq_laneq_f64(vmlaq_n_f64(v617, v629, v651.f64[0]), v632, v651, 1);
      v653 = vmlaq_laneq_f64(vmlaq_n_f64(v618, v627, v651.f64[0]), v631, v651, 1);
      v654 = v1056[-18];
      v655 = vmlaq_laneq_f64(vmlaq_n_f64(v623, v629, v654.f64[0]), v632, v654, 1);
      _Q2 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      _Q30 = vmlaq_laneq_f64(vmlaq_n_f64(v624, v627, v654.f64[0]), v631, v654, 1);
      _Q3 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v659 = v1056[-32];
      v660 = vmlaq_laneq_f64(vmlaq_n_f64(v652, v636, v659.f64[0]), v638, v659, 1);
      v661 = vmlaq_laneq_f64(vmlaq_n_f64(v653, _Q14, v659.f64[0]), v639, v659, 1);
      v659.f64[0] = v1056[-31].f64[0];
      v662 = vmlaq_n_f64(v660, _Q10, v659.f64[0]);
      _Q28 = vmlaq_n_f64(v661, v644, v659.f64[0]);
      v664 = v1056[-17];
      _Q5 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v627.f64[0] = v1056[-16].f64[0];
      v16[34] = v662;
      v16[35] = _Q28;
      v16[49] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v655, v636, v664.f64[0]), v638, v664, 1), _Q10, v627.f64[0]);
      v16[50] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q30, _Q14, v664.f64[0]), v639, v664, 1), v644, v627.f64[0]);
      _Q6 = v17[6];
      _Q30.f64[0] = v17[14].f64[1];
      v667 = *(float64x2_t *)((char *)v17 + 216);
      _Q9 = v17[21];
      _Q10.f64[0] = v17[29].f64[1];
      v669 = *(float64x2_t *)((char *)v17 + 456);
      v670 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q22.f64[0]), v667, _Q22, 1), _Q9, _Q19.f64[0]), v669, _Q19, 1);
      __asm
      {
        FMLA            D28, D30, V22.D[1]
        FMLA            D28, D10, V19.D[1]
      }
      v671 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q20.f64[0]), v667, _Q20, 1), _Q9, _Q2.f64[0]), v669, _Q2, 1);
      __asm
      {
        FMLA            D22, D30, V20.D[1]
        FMLA            D22, D10, V2.D[1]
      }
      _Q2.f64[1] = v1126.f64[1];
      __asm { FMLA            D20, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v673 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1126.f64[0]), v667, v1126, 1), _Q9, _Q25.f64[0]), v669, _Q25, 1);
      __asm { FMLA            D20, D10, V25.D[1] }
      _Q12.f64[1] = v1125.f64[1];
      v674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1125.f64[0]), v667, v1125, 1), _Q9, _Q3.f64[0]), v669, _Q3, 1);
      __asm
      {
        FMLA            D19, D30, V12.D[1]
        FMLA            D19, D10, V3.D[1]
      }
      _Q4 = v17[36];
      _Q6.f64[0] = v17[44].f64[1];
      v676 = *(float64x2_t **)&v1131.f64[0];
      _Q8 = v17[51];
      _Q9.f64[0] = v17[59].f64[1];
      v678 = *(float64x2_t **)&v1130.f64[0];
      v679 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v670, _Q4, _Q7.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q7, 1), _Q8, _Q26.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q26, 1);
      __asm
      {
        FMLA            D28, D6, V7.D[1]
        FMLA            D28, D9, V26.D[1]
        FMLA            D22, D6, V16.D[1]
        FMLA            D22, D9, V5.D[1]
      }
      v680 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v673, _Q4, _Q17.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q17, 1), _Q8, _Q27.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q27, 1);
      __asm
      {
        FMLA            D20, D6, V17.D[1]
        FMLA            D20, D9, V27.D[1]
      }
      v681 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v674, _Q4, _Q18.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q18, 1), _Q8, _Q2.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q2, 1);
      __asm
      {
        FMLA            D19, D6, V18.D[1]
        FMLA            D19, D9, V2.D[1]
      }
      v682 = v17[66];
      _Q7.f64[0] = v17[74].f64[1];
      v683 = *(float64x2_t **)&v1129.f64[0];
      v684 = **(float64x2_t **)&v1129.f64[0];
      v685 = v17[81];
      _Q17.f64[0] = v17[89].f64[1];
      v686 = *(float64x2_t **)&v1128.f64[0];
      v687 = **(float64x2_t **)&v1128.f64[0];
      _Q31 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      _Q13.f64[1] = v1121.f64[1];
      v689 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v671, _Q4, _Q16.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q16, 1), _Q8, _Q5.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q5, 1), v682, v1121.f64[0]), **(float64x2_t **)&v1129.f64[0], v1121, 1), v685, _Q31.f64[0]), **(float64x2_t **)&v1128.f64[0],
               _Q31,
               1);
      _Q14.f64[1] = v1122.f64[1];
      _Q25 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v681, v682, v1122.f64[0]), **(float64x2_t **)&v1129.f64[0], v1122, 1), v685, _Q23.f64[0]), **(float64x2_t **)&v1128.f64[0], _Q23, 1);
      v691 = v17[96];
      _Q4.f64[0] = v17[104].f64[1];
      v692 = *(float64x2_t **)&v1127.f64[0];
      v693 = **(float64x2_t **)&v1127.f64[0];
      _Q8.f64[0] = v17[112].f64[0];
      v694 = v17[111];
      _Q10.f64[0] = v1056[-24].f64[1];
      _Q11 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      *(float64x2_t *)((char *)v16 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v689, v691, _Q11.f64[0]), **(float64x2_t **)&v1127.f64[0], _Q11, 1), v694, _Q10.f64[0]);
      _Q29 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      _Q12.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v16 + 936) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q25, v691, _Q29.f64[0]), v693, _Q29, 1), v694, _Q12.f64[0]);
      _Q25.f64[1] = v1124.f64[1];
      v697 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v679, v682, v1124.f64[0]), v684, v1124, 1), v685, _Q24.f64[0]), v687, _Q24, 1);
      __asm
      {
        FMLA            D28, D7, V25.D[1]
        FMLA            D28, D17, V24.D[1]
        FMLA            D22, D7, V13.D[1]
      }
      _Q24.f64[0] = v1056[-31].f64[0];
      _Q25 = v1056[-32];
      _Q13 = v1056[-17];
      __asm { FMLA            D22, D17, V31.D[1] }
      _Q31.f64[1] = v1123.f64[1];
      __asm
      {
        FMLA            D20, D7, V31.D[1]
        FMLA            D20, D17, V21.D[1]
        FMLA            D19, D7, V14.D[1]
        FMLA            D19, D17, V23.D[1]
      }
      _Q6.f64[0] = v1056[-16].f64[0];
      __asm
      {
        FMLA            D28, D4, V25.D[1]
        FMLA            D22, D4, V11.D[1]
      }
      v700 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v680, v682, v1123.f64[0]), v684, v1123, 1), v685, _Q21.f64[0]), v687, _Q21, 1), v691, _Q13.f64[0]), v693, _Q13, 1), v694, _Q6.f64[0]);
      __asm
      {
        FMLA            D20, D4, V13.D[1]
        FMLA            D19, D4, V29.D[1]
      }
      v16[37].f64[0] = _Q28.f64[0] + _Q8.f64[0] * _Q24.f64[0];
      v16[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v697, v691, _Q25.f64[0]), v693, _Q25, 1), v694, _Q24.f64[0]);
      v16[44].f64[1] = _Q22.f64[0] + _Q8.f64[0] * _Q10.f64[0];
      v16[52].f64[0] = _Q20.f64[0] + _Q8.f64[0] * _Q6.f64[0];
      v16[51] = v700;
      v16[59].f64[1] = _Q19.f64[0] + _Q8.f64[0] * _Q12.f64[0];
      v701 = v1056[-7];
      v702 = v1056[-8];
      v703 = v1056[-5];
      v704 = v1056[-6];
      v705 = v1056[-3];
      v706 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v707 = v1056[-2];
      v708 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[1], v702.f64[0]), *(float64x2_t *)((char *)v17 + 136), v702, 1), v17[16], v701.f64[0]),
                                     *(float64x2_t *)((char *)v17 + 376),
                                     v701,
                                     1),
                                   v17[31],
                                   v704.f64[0]),
                                 *(float64x2_t *)((char *)v17 + 616),
                                 v704,
                                 1),
                               v17[46],
                               v703.f64[0]),
                             *(float64x2_t *)((char *)v17 + 856),
                             v703,
                             1),
                           v17[61],
                           v706.f64[0]),
                         *(float64x2_t *)((char *)v17 + 1096),
                         v706,
                         1),
                       v17[76],
                       v705.f64[0]),
                     *(float64x2_t *)((char *)v17 + 1336),
                     v705,
                     1),
                   v17[91],
                   v707.f64[0]),
                 *(float64x2_t *)((char *)v17 + 1576),
                 v707,
                 1),
               v17[106],
               _Q4.f64[0]);
      v16[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v702.f64[0]), *(float64x2_t *)((char *)v17 + 120), v702, 1), v17[15], v701.f64[0]),
                                        *(float64x2_t *)((char *)v17 + 360),
                                        v701,
                                        1),
                                      v17[30],
                                      v704.f64[0]),
                                    *(float64x2_t *)((char *)v17 + 600),
                                    v704,
                                    1),
                                  v17[45],
                                  v703.f64[0]),
                                *(float64x2_t *)((char *)v17 + 840),
                                v703,
                                1),
                              v17[60],
                              v706.f64[0]),
                            *(float64x2_t *)((char *)v17 + 1080),
                            v706,
                            1),
                          v17[75],
                          v705.f64[0]),
                        *(float64x2_t *)((char *)v17 + 1320),
                        v705,
                        1),
                      v17[90],
                      v707.f64[0]),
                    *(float64x2_t *)((char *)v17 + 1560),
                    v707,
                    1),
                  v17[105],
                  _Q4.f64[0]);
      v16[61] = v708;
      v709 = v1056[-7];
      v710 = v1056[-8];
      v711 = v1056[-5];
      v712 = v1056[-6];
      v713 = v1056[-3];
      v714 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v715 = v1056[-2];
      v716 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[3], v710.f64[0]), *(float64x2_t *)((char *)v17 + 168), v710, 1), v17[18], v709.f64[0]),
                                     *(float64x2_t *)((char *)v17 + 408),
                                     v709,
                                     1),
                                   v17[33],
                                   v712.f64[0]),
                                 *(float64x2_t *)((char *)v17 + 648),
                                 v712,
                                 1),
                               v17[48],
                               v711.f64[0]),
                             *(float64x2_t *)((char *)v17 + 888),
                             v711,
                             1),
                           v17[63],
                           v714.f64[0]),
                         *(float64x2_t *)((char *)v17 + 1128),
                         v714,
                         1),
                       v17[78],
                       v713.f64[0]),
                     *(float64x2_t *)((char *)v17 + 1368),
                     v713,
                     1),
                   v17[93],
                   v715.f64[0]),
                 *(float64x2_t *)((char *)v17 + 1608),
                 v715,
                 1),
               v17[108],
               _Q4.f64[0]);
      v16[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[2], v710.f64[0]), *(float64x2_t *)((char *)v17 + 152), v710, 1), v17[17], v709.f64[0]),
                                        *(float64x2_t *)((char *)v17 + 392),
                                        v709,
                                        1),
                                      v17[32],
                                      v712.f64[0]),
                                    *(float64x2_t *)((char *)v17 + 632),
                                    v712,
                                    1),
                                  v17[47],
                                  v711.f64[0]),
                                *(float64x2_t *)((char *)v17 + 872),
                                v711,
                                1),
                              v17[62],
                              v714.f64[0]),
                            *(float64x2_t *)((char *)v17 + 1112),
                            v714,
                            1),
                          v17[77],
                          v713.f64[0]),
                        *(float64x2_t *)((char *)v17 + 1352),
                        v713,
                        1),
                      v17[92],
                      v715.f64[0]),
                    *(float64x2_t *)((char *)v17 + 1592),
                    v715,
                    1),
                  v17[107],
                  _Q4.f64[0]);
      v16[63] = v716;
      _Q26 = v1056[-7];
      v718 = v1056[-8];
      v719 = v1056[-5];
      v720 = v1056[-6];
      _Q20 = v1056[-3];
      v722 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v723 = v1056[-2];
      v724 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[4], v718.f64[0]), *(float64x2_t *)((char *)v17 + 184), v718, 1), v17[19], _Q26.f64[0]),
                                     *(float64x2_t *)((char *)v17 + 424),
                                     _Q26,
                                     1),
                                   v17[34],
                                   v720.f64[0]),
                                 *(float64x2_t *)((char *)v17 + 664),
                                 v720,
                                 1),
                               v17[49],
                               v719.f64[0]),
                             *(float64x2_t *)((char *)v17 + 904),
                             v719,
                             1),
                           v17[64],
                           v722.f64[0]),
                         *(float64x2_t *)((char *)v17 + 1144),
                         v722,
                         1),
                       v17[79],
                       _Q20.f64[0]),
                     *(float64x2_t *)((char *)v17 + 1384),
                     _Q20,
                     1),
                   v17[94],
                   v723.f64[0]),
                 *(float64x2_t *)((char *)v17 + 1624),
                 v723,
                 1),
               v17[109],
               _Q4.f64[0]);
      v16[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[5], v718.f64[0]), *(float64x2_t *)((char *)v17 + 200), v718, 1), v17[20], _Q26.f64[0]),
                                        *(float64x2_t *)((char *)v17 + 440),
                                        _Q26,
                                        1),
                                      v17[35],
                                      v720.f64[0]),
                                    *(float64x2_t *)((char *)v17 + 680),
                                    v720,
                                    1),
                                  v17[50],
                                  v719.f64[0]),
                                *(float64x2_t *)((char *)v17 + 920),
                                v719,
                                1),
                              v17[65],
                              v722.f64[0]),
                            *(float64x2_t *)((char *)v17 + 1160),
                            v722,
                            1),
                          v17[80],
                          _Q20.f64[0]),
                        *(float64x2_t *)((char *)v17 + 1400),
                        _Q20,
                        1),
                      v17[95],
                      v723.f64[0]),
                    *(float64x2_t *)((char *)v17 + 1640),
                    v723,
                    1),
                  v17[110],
                  _Q4.f64[0]);
      v16[64] = v724;
      _Q16.f64[0] = v17[14].f64[1];
      _Q20.f64[0] = v17[29].f64[1];
      _Q23.f64[0] = v17[44].f64[1];
      _Q26.f64[0] = v17[59].f64[1];
      _Q29.f64[0] = v17[74].f64[1];
      _Q8.f64[0] = v17[89].f64[1];
      _Q11.f64[0] = v17[104].f64[1];
      _Q14 = v1056[-7];
      _Q15 = v1056[-8];
      v727 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[6], _Q15.f64[0]), *(float64x2_t *)((char *)v17 + 216), _Q15, 1), v17[21], _Q14.f64[0]), *(float64x2_t *)((char *)v17 + 456), _Q14, 1);
      _Q0 = v1056[-5];
      _Q17 = v1056[-3];
      v724.f64[0] = v1056[-1].f64[0];
      __asm { FMLA            D6, D16, V15.D[1] }
      _Q16 = v1056[-6];
      _Q18 = v1056[-4];
      _Q15 = v1056[-2];
      __asm
      {
        FMLA            D6, D20, V14.D[1]
        FMLA            D6, D23, V16.D[1]
        FMLA            D6, D26, V0.D[1]
        FMLA            D6, D29, V18.D[1]
        FMLA            D6, D8, V17.D[1]
      }
      v733 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v727, v17[36], _Q16.f64[0]), *v676, _Q16, 1), v17[51], _Q0.f64[0]), *v678, _Q0, 1), v17[66], _Q18.f64[0]), *v683, _Q18, 1),
                       v17[81],
                       _Q17.f64[0]),
                     *v686,
                     _Q17,
                     1),
                   v17[96],
                   _Q15.f64[0]),
                 *v692,
                 _Q15,
                 1),
               v17[111],
               v724.f64[0]);
      __asm { FMLA            D6, D11, V15.D[1] }
      v16[67].f64[0] = _Q6.f64[0] + v17[112].f64[0] * v724.f64[0];
      v16[66] = v733;
      break;
    case 1:
      for (i = 0; i != 1080; i += 120)
      {
        v735 = *(float64x2_t *)(a11 + i + 2520);
        v736 = *(float64x2_t *)(a11 + i + 2536);
        v737 = *(float64x2_t *)(a11 + i + 2552);
        v738 = *(float64x2_t *)(a11 + i + 2568);
        v739 = *(float64x2_t *)(a11 + i + 2584);
        v740 = *(float64x2_t *)(a11 + i + 2600);
        v741 = *(float64x2_t *)(a11 + i + 2616);
        a9.f64[0] = *(float64_t *)(a11 + i + 2632);
        v13.f64[0] = a12[8].f64[0];
        v742 = a12[3];
        v743 = a12[4];
        v744 = a12[5];
        v745 = a12[6];
        v746 = a12[7];
        v1131 = vmulq_f64(a9, v13);
        v1130 = vmulq_f64(v741, v746);
        v1129 = vmulq_f64(v740, v745);
        v1128 = vmulq_f64(v739, v744);
        v1127 = vmulq_f64(v738, v743);
        v1126 = vmulq_f64(v737, v742);
        v747 = a12[1];
        v1125 = vmulq_f64(v736, a12[2]);
        v1124 = vmulq_f64(v735, v747);
        result = memcpy(v1132, v16, sizeof(v1132));
        v748 = (float64x2_t *)&v1132[i];
        v749 = v1125;
        *v748 = v1124;
        v748[1] = v749;
        v750 = v1127;
        v748[2] = v1126;
        v748[3] = v750;
        v751 = v1129;
        v748[4] = v1128;
        v748[5] = v751;
        v748[6] = v1130;
        v748[7].f64[0] = v1131.f64[0];
        v752 = *(float64x2_t *)&v1132[1024];
        v16[67].f64[0] = *(float64_t *)&v1132[1072];
        v16[66] = *(float64x2_t *)&v1132[1056];
        v16[65] = *(float64x2_t *)&v1132[1040];
        v753 = *(float64x2_t *)&v1132[992];
        v16[63] = *(float64x2_t *)&v1132[1008];
        v16[64] = v752;
        v754 = *(float64x2_t *)&v1132[960];
        v16[61] = *(float64x2_t *)&v1132[976];
        v16[62] = v753;
        v755 = *(float64x2_t *)&v1132[928];
        v16[59] = *(float64x2_t *)&v1132[944];
        v16[60] = v754;
        v756 = *(float64x2_t *)&v1132[896];
        v16[57] = *(float64x2_t *)&v1132[912];
        v16[58] = v755;
        v757 = *(float64x2_t *)&v1132[864];
        v16[55] = *(float64x2_t *)&v1132[880];
        v16[56] = v756;
        v758 = *(float64x2_t *)&v1132[832];
        v16[53] = *(float64x2_t *)&v1132[848];
        v16[54] = v757;
        v759 = *(float64x2_t *)&v1132[800];
        v16[51] = *(float64x2_t *)&v1132[816];
        v16[52] = v758;
        v760 = *(float64x2_t *)&v1132[768];
        v16[49] = *(float64x2_t *)&v1132[784];
        v16[50] = v759;
        v761 = *(float64x2_t *)&v1132[736];
        v16[47] = *(float64x2_t *)&v1132[752];
        v16[48] = v760;
        v762 = *(float64x2_t *)&v1132[704];
        v16[45] = *(float64x2_t *)&v1132[720];
        v16[46] = v761;
        v763 = *(float64x2_t *)&v1132[672];
        v16[43] = *(float64x2_t *)&v1132[688];
        v16[44] = v762;
        v764 = *(float64x2_t *)&v1132[640];
        v16[41] = *(float64x2_t *)&v1132[656];
        v16[42] = v763;
        v765 = *(float64x2_t *)&v1132[608];
        v16[39] = *(float64x2_t *)&v1132[624];
        v16[40] = v764;
        v766 = *(float64x2_t *)&v1132[576];
        v16[37] = *(float64x2_t *)&v1132[592];
        v16[38] = v765;
        v767 = *(float64x2_t *)&v1132[544];
        v16[35] = *(float64x2_t *)&v1132[560];
        v16[36] = v766;
        v768 = *(float64x2_t *)&v1132[512];
        v16[33] = *(float64x2_t *)&v1132[528];
        v16[34] = v767;
        v769 = *(float64x2_t *)&v1132[480];
        v16[31] = *(float64x2_t *)&v1132[496];
        v16[32] = v768;
        v770 = *(float64x2_t *)&v1132[448];
        v16[29] = *(float64x2_t *)&v1132[464];
        v16[30] = v769;
        v771 = *(float64x2_t *)&v1132[416];
        v16[27] = *(float64x2_t *)&v1132[432];
        v16[28] = v770;
        v772 = *(float64x2_t *)&v1132[384];
        v16[25] = *(float64x2_t *)&v1132[400];
        v16[26] = v771;
        v773 = *(float64x2_t *)&v1132[352];
        v16[23] = *(float64x2_t *)&v1132[368];
        v16[24] = v772;
        v774 = *(float64x2_t *)&v1132[320];
        v16[21] = *(float64x2_t *)&v1132[336];
        v16[22] = v773;
        v775 = *(float64x2_t *)&v1132[288];
        v16[19] = *(float64x2_t *)&v1132[304];
        v16[20] = v774;
        v776 = *(float64x2_t *)&v1132[256];
        v16[17] = *(float64x2_t *)&v1132[272];
        v16[18] = v775;
        v777 = *(float64x2_t *)&v1132[224];
        v16[15] = *(float64x2_t *)&v1132[240];
        v16[16] = v776;
        v778 = *(float64x2_t *)&v1132[192];
        v16[13] = *(float64x2_t *)&v1132[208];
        v16[14] = v777;
        v779 = *(float64x2_t *)&v1132[160];
        v16[11] = *(float64x2_t *)&v1132[176];
        v16[12] = v778;
        v780 = *(float64x2_t *)&v1132[128];
        v16[9] = *(float64x2_t *)&v1132[144];
        v16[10] = v779;
        v781 = *(float64x2_t *)&v1132[96];
        v16[7] = *(float64x2_t *)&v1132[112];
        v16[8] = v780;
        v782 = *(float64x2_t *)&v1132[64];
        v16[5] = *(float64x2_t *)&v1132[80];
        v16[6] = v781;
        v783 = *(float64x2_t *)&v1132[32];
        v16[3] = *(float64x2_t *)&v1132[48];
        v16[4] = v782;
        v784 = *(float64x2_t *)v1132;
        v16[1] = *(float64x2_t *)&v1132[16];
        v16[2] = v783;
        *v16 = v784;
      }
      break;
    case 2:
      a2.f64[0] = a12[1].f64[0];
      a3.f64[0] = *(float64_t *)(a11 + 3592);
      v786 = *(float64x2_t *)(a11 + 2968);
      v785 = *(float64x2_t *)(a11 + 2984);
      v788 = *(float64x2_t *)(a11 + 2936);
      v787 = *(float64x2_t *)(a11 + 2952);
      v789 = *(float64x2_t *)(a11 + 2904);
      v790 = *(float64x2_t *)(a11 + 2920);
      v791 = *(float64x2_t *)(a11 + 2872);
      v792 = *(float64x2_t *)(a11 + 2888);
      v793 = *(float64x2_t *)(a11 + 2840);
      v794 = *(float64x2_t *)(a11 + 2856);
      v795 = *(float64x2_t *)(a11 + 2808);
      v796 = *(float64x2_t *)(a11 + 2824);
      v797 = *(float64x2_t *)(a11 + 2776);
      v798 = *(float64x2_t *)(a11 + 2792);
      v799 = *(float64x2_t *)(a11 + 2744);
      v800 = *(float64x2_t *)(a11 + 2760);
      v801 = *(float64x2_t *)(a11 + 2712);
      v802 = *(float64x2_t *)(a11 + 2728);
      v803 = *(float64x2_t *)(a11 + 2680);
      v804 = *(float64x2_t *)(a11 + 2696);
      v805 = *(float64x2_t *)(a11 + 2648);
      v806 = *(float64x2_t *)(a11 + 2664);
      v807 = *(float64x2_t *)(a11 + 2616);
      v808 = *(float64x2_t *)(a11 + 2632);
      v809 = *(float64x2_t *)(a11 + 2584);
      v810 = *(float64x2_t *)(a11 + 2600);
      v812 = *(float64x2_t *)(a11 + 2552);
      v811 = *(float64x2_t *)(a11 + 2568);
      v814 = *v16;
      v813 = *(float64x2_t *)(a11 + 2536);
      v1131 = vmulq_f64(a3, a2);
      v1130 = vmulq_n_f64(v814, a2.f64[0]);
      v1129 = vmulq_n_f64(v813, a2.f64[0]);
      v1128 = vmulq_n_f64(v812, a2.f64[0]);
      v1127 = vmulq_n_f64(v811, a2.f64[0]);
      v1126 = vmulq_n_f64(v809, a2.f64[0]);
      v1125 = vmulq_n_f64(v810, a2.f64[0]);
      v1124 = vmulq_n_f64(v807, a2.f64[0]);
      v1123 = vmulq_n_f64(v808, a2.f64[0]);
      v1122 = vmulq_n_f64(v805, a2.f64[0]);
      v1121 = vmulq_n_f64(v806, a2.f64[0]);
      v1120 = vmulq_n_f64(v803, a2.f64[0]);
      v1119 = vmulq_n_f64(v804, a2.f64[0]);
      v1118 = vmulq_n_f64(v801, a2.f64[0]);
      v1117 = vmulq_n_f64(v802, a2.f64[0]);
      v1116 = vmulq_n_f64(v799, a2.f64[0]);
      v1115 = vmulq_n_f64(v800, a2.f64[0]);
      v1114 = vmulq_n_f64(v797, a2.f64[0]);
      v1113 = vmulq_n_f64(v798, a2.f64[0]);
      v1112 = vmulq_n_f64(v795, a2.f64[0]);
      v1111 = vmulq_n_f64(v796, a2.f64[0]);
      v1110 = vmulq_n_f64(v793, a2.f64[0]);
      v1109 = vmulq_n_f64(v794, a2.f64[0]);
      v1108 = vmulq_n_f64(v791, a2.f64[0]);
      v1107 = vmulq_n_f64(v792, a2.f64[0]);
      v1106 = vmulq_n_f64(v789, a2.f64[0]);
      v1105 = vmulq_n_f64(v790, a2.f64[0]);
      v1104 = vmulq_n_f64(v788, a2.f64[0]);
      v1103 = vmulq_n_f64(v787, a2.f64[0]);
      v1102 = vmulq_n_f64(v786, a2.f64[0]);
      v1101 = vmulq_n_f64(v785, a2.f64[0]);
      v1100 = vmulq_n_f64(*(float64x2_t *)(a11 + 3000), a2.f64[0]);
      v1099 = vmulq_n_f64(*(float64x2_t *)(a11 + 3016), a2.f64[0]);
      v1098 = vmulq_n_f64(*(float64x2_t *)(a11 + 3032), a2.f64[0]);
      v1097 = vmulq_n_f64(*(float64x2_t *)(a11 + 3048), a2.f64[0]);
      v815 = *(float64x2_t *)(a11 + 3080);
      v1096 = vmulq_n_f64(*(float64x2_t *)(a11 + 3064), a2.f64[0]);
      v1095 = vmulq_n_f64(v815, a2.f64[0]);
      v816 = vmulq_n_f64(*(float64x2_t *)(a11 + 3096), a2.f64[0]);
      v817 = vmulq_n_f64(*(float64x2_t *)(a11 + 3112), a2.f64[0]);
      v818 = vmulq_n_f64(*(float64x2_t *)(a11 + 3128), a2.f64[0]);
      v819 = vmulq_n_f64(*(float64x2_t *)(a11 + 3144), a2.f64[0]);
      v820 = vmulq_n_f64(*(float64x2_t *)(a11 + 3160), a2.f64[0]);
      v821 = vmulq_n_f64(*(float64x2_t *)(a11 + 3176), a2.f64[0]);
      v822 = vmulq_n_f64(*(float64x2_t *)(a11 + 3192), a2.f64[0]);
      v823 = vmulq_n_f64(*(float64x2_t *)(a11 + 3208), a2.f64[0]);
      v824 = vmulq_n_f64(*(float64x2_t *)(a11 + 3224), a2.f64[0]);
      v825 = vmulq_n_f64(*(float64x2_t *)(a11 + 3240), a2.f64[0]);
      v826 = vmulq_n_f64(*(float64x2_t *)(a11 + 3256), a2.f64[0]);
      v827 = vmulq_n_f64(*(float64x2_t *)(a11 + 3272), a2.f64[0]);
      v828 = vmulq_n_f64(*(float64x2_t *)(a11 + 3288), a2.f64[0]);
      v829 = vmulq_n_f64(*(float64x2_t *)(a11 + 3304), a2.f64[0]);
      v830 = vmulq_n_f64(*(float64x2_t *)(a11 + 3320), a2.f64[0]);
      v831 = vmulq_n_f64(*(float64x2_t *)(a11 + 3336), a2.f64[0]);
      v832 = vmulq_n_f64(*(float64x2_t *)(a11 + 3352), a2.f64[0]);
      v833 = vmulq_n_f64(*(float64x2_t *)(a11 + 3368), a2.f64[0]);
      v834 = vmulq_n_f64(*(float64x2_t *)(a11 + 3384), a2.f64[0]);
      v835 = vmulq_n_f64(*(float64x2_t *)(a11 + 3400), a2.f64[0]);
      v836 = vmulq_n_f64(*(float64x2_t *)(a11 + 3416), a2.f64[0]);
      v837 = vmulq_n_f64(*(float64x2_t *)(a11 + 3432), a2.f64[0]);
      v838 = vmulq_n_f64(*(float64x2_t *)(a11 + 3448), a2.f64[0]);
      v839 = vmulq_n_f64(*(float64x2_t *)(a11 + 3464), a2.f64[0]);
      v840 = vmulq_n_f64(*(float64x2_t *)(a11 + 3480), a2.f64[0]);
      v841 = vmulq_n_f64(*(float64x2_t *)(a11 + 3496), a2.f64[0]);
      v842 = vmulq_n_f64(*(float64x2_t *)(a11 + 3512), a2.f64[0]);
      v843 = vmulq_n_f64(*(float64x2_t *)(a11 + 3528), a2.f64[0]);
      v844 = vmulq_n_f64(*(float64x2_t *)(a11 + 3544), a2.f64[0]);
      v845 = vmulq_n_f64(*(float64x2_t *)(a11 + 3560), a2.f64[0]);
      *(float64x2_t *)(a11 + 3576) = vmulq_n_f64(*(float64x2_t *)(a11 + 3576), a2.f64[0]);
      *(float64x2_t *)(a11 + 3560) = v845;
      *(float64x2_t *)(a11 + 3528) = v843;
      *(float64x2_t *)(a11 + 3544) = v844;
      *(float64x2_t *)(a11 + 3496) = v841;
      *(float64x2_t *)(a11 + 3512) = v842;
      *(float64x2_t *)(a11 + 3464) = v839;
      *(float64x2_t *)(a11 + 3480) = v840;
      *(float64x2_t *)(a11 + 3432) = v837;
      *(float64x2_t *)(a11 + 3448) = v838;
      *(float64x2_t *)(a11 + 3400) = v835;
      *(float64x2_t *)(a11 + 3416) = v836;
      *(float64x2_t *)(a11 + 3368) = v833;
      *(float64x2_t *)(a11 + 3384) = v834;
      *(float64x2_t *)(a11 + 3336) = v831;
      *(float64x2_t *)(a11 + 3352) = v832;
      *(float64x2_t *)(a11 + 3304) = v829;
      *(float64x2_t *)(a11 + 3320) = v830;
      *(float64x2_t *)(a11 + 3272) = v827;
      *(float64x2_t *)(a11 + 3288) = v828;
      *(float64x2_t *)(a11 + 3240) = v825;
      *(float64x2_t *)(a11 + 3256) = v826;
      *(float64x2_t *)(a11 + 3208) = v823;
      *(float64x2_t *)(a11 + 3224) = v824;
      *(float64x2_t *)(a11 + 3176) = v821;
      *(float64x2_t *)(a11 + 3192) = v822;
      *(float64x2_t *)(a11 + 3144) = v819;
      *(float64x2_t *)(a11 + 3160) = v820;
      *(float64x2_t *)(a11 + 3112) = v817;
      *(float64x2_t *)(a11 + 3128) = v818;
      *(float64x2_t *)(a11 + 3080) = v1095;
      *(float64x2_t *)(a11 + 3096) = v816;
      v846 = v1096;
      *(float64x2_t *)(a11 + 3048) = v1097;
      *(float64x2_t *)(a11 + 3064) = v846;
      v847 = v1098;
      *(float64x2_t *)(a11 + 3016) = v1099;
      *(float64x2_t *)(a11 + 3032) = v847;
      v848 = v1100;
      *(float64x2_t *)(a11 + 2984) = v1101;
      *(float64x2_t *)(a11 + 3000) = v848;
      v849 = v1102;
      *(float64x2_t *)(a11 + 2952) = v1103;
      *(float64x2_t *)(a11 + 2968) = v849;
      v850 = v1104;
      *(float64x2_t *)(a11 + 2920) = v1105;
      *(float64x2_t *)(a11 + 2936) = v850;
      v851 = v1106;
      *(float64x2_t *)(a11 + 2888) = v1107;
      *(float64x2_t *)(a11 + 2904) = v851;
      v852 = v1108;
      *(float64x2_t *)(a11 + 2856) = v1109;
      *(float64x2_t *)(a11 + 2872) = v852;
      v853 = v1110;
      *(float64x2_t *)(a11 + 2824) = v1111;
      *(float64x2_t *)(a11 + 2840) = v853;
      v854 = v1112;
      *(float64x2_t *)(a11 + 2792) = v1113;
      *(float64x2_t *)(a11 + 2808) = v854;
      v855 = v1114;
      *(float64x2_t *)(a11 + 2760) = v1115;
      *(float64x2_t *)(a11 + 2776) = v855;
      v856 = v1116;
      *(float64x2_t *)(a11 + 2728) = v1117;
      *(float64x2_t *)(a11 + 2744) = v856;
      v857 = v1118;
      *(float64x2_t *)(a11 + 2696) = v1119;
      *(float64x2_t *)(a11 + 2712) = v857;
      v858 = v1120;
      *(float64x2_t *)(a11 + 2664) = v1121;
      *(float64x2_t *)(a11 + 2680) = v858;
      v859 = v1122;
      *(float64x2_t *)(a11 + 2632) = v1123;
      *(float64x2_t *)(a11 + 2648) = v859;
      v860 = v1124;
      *(float64x2_t *)(a11 + 2600) = v1125;
      *(float64x2_t *)(a11 + 2616) = v860;
      v861 = v1126;
      *(float64x2_t *)(a11 + 2568) = v1127;
      *(float64x2_t *)(a11 + 2584) = v861;
      v862 = v1128;
      *(float64x2_t *)(a11 + 2536) = v1129;
      *(float64x2_t *)(a11 + 2552) = v862;
      *v16 = v1130;
      *(float64_t *)(a11 + 3592) = v1131.f64[0];
      break;
    case 4:
      *(_QWORD *)&v1131.f64[0] = a11;
      v863 = (*(_QWORD *(**)(_BYTE *__return_ptr, float64x2_t *))(*(_QWORD *)&a12->f64[0] + 56))(v1132, a12);
      MEMORY[0x24BDAC7A8](v863);
      memcpy(&v1056[45], v16, 0x438uLL);
      _V17.D[1] = v1056[45].f64[1];
      _V16.D[1] = v1056[60].f64[1];
      _V14.D[1] = v1056[46].f64[1];
      _V13.D[1] = v1056[47].f64[1];
      _V6.D[1] = v1056[61].f64[1];
      _V3.D[1] = v1056[62].f64[1];
      _V4.D[1] = v1056[48].f64[1];
      _V7.D[1] = v1056[63].f64[1];
      _V5.D[1] = v1056[49].f64[1];
      _V1.D[1] = v1056[64].f64[1];
      _V2.D[1] = v1056[50].f64[1];
      _V0.D[1] = v1056[65].f64[1];
      v1122 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[45].f64[0]), *(float64x2_t *)&v1132[120], v1056[45], 1), *(float64x2_t *)&v1132[240], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[49].f64[0]),
                          v1133,
                          v1056[49],
                          1),
                        v1141,
                        v1056[50].f64[0]),
                      v1148,
                      v1056[50],
                      1),
                    v1156,
                    v1056[51].f64[0]),
                  v1163,
                  v1056[51],
                  1),
                v1171,
                v1056[52].f64[0]);
      v1119 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[45].f64[0]), *(float64x2_t *)&v1132[136], v1056[45], 1), *(float64x2_t *)&v1132[256], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[49].f64[0]),
                          v1134,
                          v1056[49],
                          1),
                        v1142,
                        v1056[50].f64[0]),
                      v1149,
                      v1056[50],
                      1),
                    v1157,
                    v1056[51].f64[0]),
                  v1164,
                  v1056[51],
                  1),
                v1172,
                v1056[52].f64[0]);
      v1124 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[52].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[240], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[56].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1141,
                        v1056[57].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1156,
                    v1056[58].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1171,
                v1056[59].f64[1]);
      v1121 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[52].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[256], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[56].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1142,
                        v1056[57].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1157,
                    v1056[58].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1172,
                v1056[59].f64[1]);
      v1123 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[60].f64[0]), *(float64x2_t *)&v1132[120], v1056[60], 1), *(float64x2_t *)&v1132[240], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[64].f64[0]),
                          v1133,
                          v1056[64],
                          1),
                        v1141,
                        v1056[65].f64[0]),
                      v1148,
                      v1056[65],
                      1),
                    v1156,
                    v1056[66].f64[0]),
                  v1163,
                  v1056[66],
                  1),
                v1171,
                v1056[67].f64[0]);
      v1120 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[60].f64[0]), *(float64x2_t *)&v1132[136], v1056[60], 1), *(float64x2_t *)&v1132[256], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[64].f64[0]),
                          v1134,
                          v1056[64],
                          1),
                        v1142,
                        v1056[65].f64[0]),
                      v1149,
                      v1056[65],
                      1),
                    v1157,
                    v1056[66].f64[0]),
                  v1164,
                  v1056[66],
                  1),
                v1172,
                v1056[67].f64[0]);
      v1116 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[67].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[240], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[71].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1141,
                        v1056[72].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1156,
                    v1056[73].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1171,
                v1056[74].f64[1]);
      v1115 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[67].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[256], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[71].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1142,
                        v1056[72].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1157,
                    v1056[73].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1172,
                v1056[74].f64[1]);
      v1099 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[45].f64[0]), *(float64x2_t *)&v1132[152], v1056[45], 1), *(float64x2_t *)&v1132[272], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[49].f64[0]),
                          v1135,
                          v1056[49],
                          1),
                        v1143,
                        v1056[50].f64[0]),
                      v1150,
                      v1056[50],
                      1),
                    v1158,
                    v1056[51].f64[0]),
                  v1165,
                  v1056[51],
                  1),
                v1173,
                v1056[52].f64[0]);
      v1097 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[45].f64[0]), *(float64x2_t *)&v1132[168], v1056[45], 1), *(float64x2_t *)&v1132[288], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[49].f64[0]),
                          v1136,
                          v1056[49],
                          1),
                        v1144,
                        v1056[50].f64[0]),
                      v1151,
                      v1056[50],
                      1),
                    v1159,
                    v1056[51].f64[0]),
                  v1166,
                  v1056[51],
                  1),
                v1174,
                v1056[52].f64[0]);
      v1098 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[52].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[272], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[56].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1143,
                        v1056[57].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1158,
                    v1056[58].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1173,
                v1056[59].f64[1]);
      v1095 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[52].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[288], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[56].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1144,
                        v1056[57].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1159,
                    v1056[58].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1174,
                v1056[59].f64[1]);
      v1096 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[60].f64[0]), *(float64x2_t *)&v1132[152], v1056[60], 1), *(float64x2_t *)&v1132[272], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[64].f64[0]),
                          v1135,
                          v1056[64],
                          1),
                        v1143,
                        v1056[65].f64[0]),
                      v1150,
                      v1056[65],
                      1),
                    v1158,
                    v1056[66].f64[0]),
                  v1165,
                  v1056[66],
                  1),
                v1173,
                v1056[67].f64[0]);
      v1094 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[60].f64[0]), *(float64x2_t *)&v1132[168], v1056[60], 1), *(float64x2_t *)&v1132[288], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[64].f64[0]),
                          v1136,
                          v1056[64],
                          1),
                        v1144,
                        v1056[65].f64[0]),
                      v1151,
                      v1056[65],
                      1),
                    v1159,
                    v1056[66].f64[0]),
                  v1166,
                  v1056[66],
                  1),
                v1174,
                v1056[67].f64[0]);
      v1090 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[67].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[288], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[71].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1144,
                        v1056[72].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1159,
                    v1056[73].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1174,
                v1056[74].f64[1]);
      v1091 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[67].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[272], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[71].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1143,
                        v1056[72].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1158,
                    v1056[73].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1173,
                v1056[74].f64[1]);
      v1105 = *(float64x2_t *)&v1132[304];
      result = &v1132[664];
      v1102 = *(float64x2_t *)&v1132[544];
      v1100 = *(float64x2_t *)&v1132[664];
      v1093 = *(float64x2_t *)&v1132[784];
      v1092 = *(float64x2_t *)&v1132[904];
      v1089 = v1137;
      v1088 = v1145;
      v1087 = v1152;
      v1086 = v1167;
      v1082 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[52].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[304], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[56].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1145,
                        v1056[57].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1160,
                    v1056[58].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1175,
                v1056[59].f64[1]);
      v1083 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[45].f64[0]), *(float64x2_t *)&v1132[184], v1056[45], 1), *(float64x2_t *)&v1132[304], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[49].f64[0]),
                          v1137,
                          v1056[49],
                          1),
                        v1145,
                        v1056[50].f64[0]),
                      v1152,
                      v1056[50],
                      1),
                    v1160,
                    v1056[51].f64[0]),
                  v1167,
                  v1056[51],
                  1),
                v1175,
                v1056[52].f64[0]);
      v1080 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[60].f64[0]), *(float64x2_t *)&v1132[184], v1056[60], 1), *(float64x2_t *)&v1132[304], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[64].f64[0]),
                          v1137,
                          v1056[64],
                          1),
                        v1145,
                        v1056[65].f64[0]),
                      v1152,
                      v1056[65],
                      1),
                    v1160,
                    v1056[66].f64[0]),
                  v1167,
                  v1056[66],
                  1),
                v1175,
                v1056[67].f64[0]);
      v1081 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[45].f64[0]), *(float64x2_t *)&v1132[200], v1056[45], 1), *(float64x2_t *)&v1132[320], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[49].f64[0]),
                          v1138,
                          v1056[49],
                          1),
                        v1146,
                        v1056[50].f64[0]),
                      v1153,
                      v1056[50],
                      1),
                    v1161,
                    v1056[51].f64[0]),
                  v1168,
                  v1056[51],
                  1),
                v1176,
                v1056[52].f64[0]);
      v1078 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[60].f64[0]), *(float64x2_t *)&v1132[200], v1056[60], 1), *(float64x2_t *)&v1132[320], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[64].f64[0]),
                          v1138,
                          v1056[64],
                          1),
                        v1146,
                        v1056[65].f64[0]),
                      v1153,
                      v1056[65],
                      1),
                    v1161,
                    v1056[66].f64[0]),
                  v1168,
                  v1056[66],
                  1),
                v1176,
                v1056[67].f64[0]);
      v1079 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[52].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[320], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[56].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1146,
                        v1056[57].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1161,
                    v1056[58].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1176,
                v1056[59].f64[1]);
      v1075 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[67].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[320], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[71].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1146,
                        v1056[72].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1161,
                    v1056[73].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1176,
                v1056[74].f64[1]);
      v1076 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[67].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[304], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[71].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1145,
                        v1056[72].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1160,
                    v1056[73].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1175,
                v1056[74].f64[1]);
      _D23 = *(_QWORD *)&v1132[232];
      __asm { FMLA            D18, D23, V17.D[1] }
      _V19.D[1] = v1056[53].f64[0];
      __asm
      {
        FMLA            D17, D23, V19.D[1]
        FMLA            D19, D23, V16.D[1]
      }
      _V24.D[1] = v1056[68].f64[0];
      __asm { FMLA            D16, D23, V24.D[1] }
      v1085 = *(float64x2_t *)&v1132[320];
      _D23 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D18, D23, V14.D[1] }
      _V24.D[1] = v1056[54].f64[0];
      __asm
      {
        FMLA            D17, D23, V24.D[1]
        FMLA            D19, D23, V6.D[1]
      }
      _V6.D[1] = v1056[69].f64[0];
      __asm { FMLA            D16, D23, V6.D[1] }
      _D22 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D18, D22, V13.D[1] }
      _V23.D[1] = v1056[55].f64[0];
      __asm
      {
        FMLA            D17, D22, V23.D[1]
        FMLA            D19, D22, V3.D[1]
      }
      _V3.D[1] = v1056[70].f64[0];
      __asm { FMLA            D16, D22, V3.D[1] }
      v1084 = *(float64x2_t *)&v1132[800];
      _D21 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D18, D21, V4.D[1] }
      _V4.D[1] = v1056[56].f64[0];
      __asm
      {
        FMLA            D17, D21, V4.D[1]
        FMLA            D19, D21, V7.D[1]
      }
      _V4.D[1] = v1056[71].f64[0];
      __asm { FMLA            D16, D21, V4.D[1] }
      _D7 = v1140;
      __asm { FMLA            D18, D7, V5.D[1] }
      _V5.D[1] = v1056[57].f64[0];
      __asm
      {
        FMLA            D17, D7, V5.D[1]
        FMLA            D19, D7, V1.D[1]
      }
      _V1.D[1] = v1056[72].f64[0];
      __asm { FMLA            D16, D7, V1.D[1] }
      v1077 = v1146;
      _D5 = v1155;
      __asm { FMLA            D18, D5, V2.D[1] }
      _V2.D[1] = v1056[58].f64[0];
      __asm
      {
        FMLA            D17, D5, V2.D[1]
        FMLA            D19, D5, V0.D[1]
      }
      _V0.D[1] = v1056[73].f64[0];
      __asm { FMLA            D16, D5, V0.D[1] }
      _V1.D[1] = v1056[51].f64[1];
      _D4 = v1170;
      __asm { FMLA            D18, D4, V1.D[1] }
      _V1.D[1] = v1056[59].f64[0];
      __asm { FMLA            D17, D4, V1.D[1] }
      _V1.D[1] = v1056[66].f64[1];
      __asm { FMLA            D19, D4, V1.D[1] }
      _V1.D[1] = v1056[74].f64[0];
      __asm { FMLA            D16, D4, V1.D[1] }
      v1070 = _D18 + v1178 * v1056[52].f64[0];
      v1072 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[52].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[336], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[56].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1147,
                        v1056[57].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1162,
                    v1056[58].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1177,
                v1056[59].f64[1]);
      v1073 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[45].f64[0]), *(float64x2_t *)&v1132[216], v1056[45], 1), *(float64x2_t *)&v1132[336], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[49].f64[0]),
                          v1139,
                          v1056[49],
                          1),
                        v1147,
                        v1056[50].f64[0]),
                      v1154,
                      v1056[50],
                      1),
                    v1162,
                    v1056[51].f64[0]),
                  v1169,
                  v1056[51],
                  1),
                v1177,
                v1056[52].f64[0]);
      v1069 = _D17 + v1178 * v1056[59].f64[1];
      v1071 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[60].f64[0]), *(float64x2_t *)&v1132[216], v1056[60], 1), *(float64x2_t *)&v1132[336], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[64].f64[0]),
                          v1139,
                          v1056[64],
                          1),
                        v1147,
                        v1056[65].f64[0]),
                      v1154,
                      v1056[65],
                      1),
                    v1162,
                    v1056[66].f64[0]),
                  v1169,
                  v1056[66],
                  1),
                v1177,
                v1056[67].f64[0]);
      v1068 = _D19 + v1178 * v1056[67].f64[0];
      v1065 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[67].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[336], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[71].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1147,
                        v1056[72].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1162,
                    v1056[73].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1177,
                v1056[74].f64[1]);
      v1067 = _D16 + v1178 * v1056[74].f64[1];
      _V18.D[1] = v1056[75].f64[1];
      _V20.D[1] = v1056[83].f64[0];
      v1074 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[75].f64[0]), *(float64x2_t *)&v1132[120], v1056[75], 1), *(float64x2_t *)&v1132[240], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[79].f64[0]),
                          v1133,
                          v1056[79],
                          1),
                        v1141,
                        v1056[80].f64[0]),
                      v1148,
                      v1056[80],
                      1),
                    v1156,
                    v1056[81].f64[0]),
                  v1163,
                  v1056[81],
                  1),
                v1171,
                v1056[82].f64[0]);
      _Q14 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[82].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[240], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[360],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[480],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[600],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[720],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[840],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[960],
                           v1056[86].f64[1]),
                         v1133,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1141,
                       v1056[87].f64[1]),
                     v1148,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1156,
                   v1056[88].f64[1]),
                 v1163,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1171,
               v1056[89].f64[1]);
      v930 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[82].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[256], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[86].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1142,
                       v1056[87].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1157,
                   v1056[88].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1172,
               v1056[89].f64[1]);
      v1062 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[90].f64[0]), *(float64x2_t *)&v1132[120], v1056[90], 1), *(float64x2_t *)&v1132[240], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[94].f64[0]),
                          v1133,
                          v1056[94],
                          1),
                        v1141,
                        v1056[95].f64[0]),
                      v1148,
                      v1056[95],
                      1),
                    v1156,
                    v1056[96].f64[0]),
                  v1163,
                  v1056[96],
                  1),
                v1171,
                v1056[97].f64[0]);
      v1063 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[75].f64[0]), *(float64x2_t *)&v1132[136], v1056[75], 1), *(float64x2_t *)&v1132[256], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[79].f64[0]),
                          v1134,
                          v1056[79],
                          1),
                        v1142,
                        v1056[80].f64[0]),
                      v1149,
                      v1056[80],
                      1),
                    v1157,
                    v1056[81].f64[0]),
                  v1164,
                  v1056[81],
                  1),
                v1172,
                v1056[82].f64[0]);
      v1061 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[90].f64[0]), *(float64x2_t *)&v1132[136], v1056[90], 1), *(float64x2_t *)&v1132[256], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[94].f64[0]),
                          v1134,
                          v1056[94],
                          1),
                        v1142,
                        v1056[95].f64[0]),
                      v1149,
                      v1056[95],
                      1),
                    v1157,
                    v1056[96].f64[0]),
                  v1164,
                  v1056[96],
                  1),
                v1172,
                v1056[97].f64[0]);
      v1057 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[97].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[240], v1056[98].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[98] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[99].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[99] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[100].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[100] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[101].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[101] + 8),
                          1),
                        v1141,
                        v1056[102].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[102] + 8),
                      1),
                    v1156,
                    v1056[103].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[103] + 8),
                  1),
                v1171,
                v1056[104].f64[1]);
      v931 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[97].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[256], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[101].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1142,
                       v1056[102].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1157,
                   v1056[103].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1172,
               v1056[104].f64[1]);
      v932 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[75].f64[0]), *(float64x2_t *)&v1132[152], v1056[75], 1), *(float64x2_t *)&v1132[272], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[79].f64[0]),
                         v1135,
                         v1056[79],
                         1),
                       v1143,
                       v1056[80].f64[0]),
                     v1150,
                     v1056[80],
                     1),
                   v1158,
                   v1056[81].f64[0]),
                 v1165,
                 v1056[81],
                 1),
               v1173,
               v1056[82].f64[0]);
      _Q11 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[75].f64[0]), *(float64x2_t *)&v1132[168], v1056[75], 1), *(float64x2_t *)&v1132[288], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[79].f64[0]),
                         v1136,
                         v1056[79],
                         1),
                       v1144,
                       v1056[80].f64[0]),
                     v1151,
                     v1056[80],
                     1),
                   v1159,
                   v1056[81].f64[0]),
                 v1166,
                 v1056[81],
                 1),
               v1174,
               v1056[82].f64[0]);
      _Q30 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[82].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[272], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[392],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[632],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[872],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[86].f64[1]),
                         v1135,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1143,
                       v1056[87].f64[1]),
                     v1150,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1158,
                   v1056[88].f64[1]),
                 v1165,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1173,
               v1056[89].f64[1]);
      v935 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[82].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[288], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[86].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1144,
                       v1056[87].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1159,
                   v1056[88].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1174,
               v1056[89].f64[1]);
      _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[90].f64[0]), *(float64x2_t *)&v1132[152], v1056[90], 1), *(float64x2_t *)&v1132[272], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[94].f64[0]),
                         v1135,
                         v1056[94],
                         1),
                       v1143,
                       v1056[95].f64[0]),
                     v1150,
                     v1056[95],
                     1),
                   v1158,
                   v1056[96].f64[0]),
                 v1165,
                 v1056[96],
                 1),
               v1173,
               v1056[97].f64[0]);
      v937 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[90].f64[0]), *(float64x2_t *)&v1132[168], v1056[90], 1), *(float64x2_t *)&v1132[288], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[94].f64[0]),
                         v1136,
                         v1056[94],
                         1),
                       v1144,
                       v1056[95].f64[0]),
                     v1151,
                     v1056[95],
                     1),
                   v1159,
                   v1056[96].f64[0]),
                 v1166,
                 v1056[96],
                 1),
               v1174,
               v1056[97].f64[0]);
      _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[97].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[272], v1056[98].f64[1]),
                                    *(float64x2_t *)&v1132[392],
                                    *(float64x2_t *)((char *)&v1056[98] + 8),
                                    1),
                                  *(float64x2_t *)&v1132[512],
                                  v1056[99].f64[1]),
                                *(float64x2_t *)&v1132[632],
                                *(float64x2_t *)((char *)&v1056[99] + 8),
                                1),
                              *(float64x2_t *)&v1132[752],
                              v1056[100].f64[1]),
                            *(float64x2_t *)&v1132[872],
                            *(float64x2_t *)((char *)&v1056[100] + 8),
                            1),
                          *(float64x2_t *)&v1132[992],
                          v1056[101].f64[1]),
                        v1135,
                        *(float64x2_t *)((char *)&v1056[101] + 8),
                        1),
                      v1143,
                      v1056[102].f64[1]),
                    v1150,
                    *(float64x2_t *)((char *)&v1056[102] + 8),
                    1),
                  v1158,
                  v1056[103].f64[1]),
                v1165,
                *(float64x2_t *)((char *)&v1056[103] + 8),
                1),
              v1173,
              v1056[104].f64[1]);
      v939 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[97].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[288], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[101].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1144,
                       v1056[102].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1159,
                   v1056[103].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1174,
               v1056[104].f64[1]);
      v1066 = *(float64x2_t *)&v1132[560];
      v1180 = &v1056[84].f64[1];
      v940 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[75].f64[0]), *(float64x2_t *)&v1132[184], v1056[75], 1), *(float64x2_t *)&v1132[304], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[79].f64[0]),
                         v1137,
                         v1056[79],
                         1),
                       v1145,
                       v1056[80].f64[0]),
                     v1152,
                     v1056[80],
                     1),
                   v1160,
                   v1056[81].f64[0]),
                 v1167,
                 v1056[81],
                 1),
               v1175,
               v1056[82].f64[0]);
      v941 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[75].f64[0]), *(float64x2_t *)&v1132[200], v1056[75], 1), *(float64x2_t *)&v1132[320], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[79].f64[0]),
                         v1138,
                         v1056[79],
                         1),
                       v1146,
                       v1056[80].f64[0]),
                     v1153,
                     v1056[80],
                     1),
                   v1161,
                   v1056[81].f64[0]),
                 v1168,
                 v1056[81],
                 1),
               v1176,
               v1056[82].f64[0]);
      v942 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[82].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[304], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[86].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1145,
                       v1056[87].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1160,
                   v1056[88].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1175,
               v1056[89].f64[1]);
      v943 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[82].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[320], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[86].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1146,
                       v1056[87].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1161,
                   v1056[88].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1176,
               v1056[89].f64[1]);
      _Q28 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[90].f64[0]), *(float64x2_t *)&v1132[184], v1056[90], 1), *(float64x2_t *)&v1132[304], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[94].f64[0]),
                         v1137,
                         v1056[94],
                         1),
                       v1145,
                       v1056[95].f64[0]),
                     v1152,
                     v1056[95],
                     1),
                   v1160,
                   v1056[96].f64[0]),
                 v1167,
                 v1056[96],
                 1),
               v1175,
               v1056[97].f64[0]);
      v945 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[90].f64[0]), *(float64x2_t *)&v1132[200], v1056[90], 1), *(float64x2_t *)&v1132[320], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[94].f64[0]),
                         v1138,
                         v1056[94],
                         1),
                       v1146,
                       v1056[95].f64[0]),
                     v1153,
                     v1056[95],
                     1),
                   v1161,
                   v1056[96].f64[0]),
                 v1168,
                 v1056[96],
                 1),
               v1176,
               v1056[97].f64[0]);
      v946 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[97].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[304], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[101].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1145,
                       v1056[102].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1160,
                   v1056[103].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1175,
               v1056[104].f64[1]);
      v947 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[97].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[320], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[101].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1146,
                       v1056[102].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1161,
                   v1056[103].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1176,
               v1056[104].f64[1]);
      _D16 = *(_QWORD *)&v1132[232];
      __asm
      {
        FMLA            D0, D16, V18.D[1]
        FMLA            D1, D16, V20.D[1]
      }
      _V17.D[1] = v1056[90].f64[1];
      __asm { FMLA            D4, D16, V17.D[1] }
      _V17.D[1] = v1056[98].f64[0];
      __asm { FMLA            D5, D16, V17.D[1] }
      _V2.D[1] = v1056[76].f64[1];
      _D7 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D0, D7, V2.D[1] }
      _V2.D[1] = v1056[84].f64[0];
      __asm { FMLA            D1, D7, V2.D[1] }
      _V2.D[1] = v1056[91].f64[1];
      __asm { FMLA            D4, D7, V2.D[1] }
      _V2.D[1] = v1056[99].f64[0];
      __asm { FMLA            D5, D7, V2.D[1] }
      _V18.D[1] = v1056[77].f64[1];
      _D17 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[85].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[92].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[100].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[78].f64[1];
      _D17 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[86].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[93].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[101].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[79].f64[1];
      _D17 = v1140;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[87].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[94].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[102].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[80].f64[1];
      _D17 = v1155;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[88].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[95].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[103].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V7.D[1] = v1056[81].f64[1];
      _D18 = v1170;
      __asm { FMLA            D0, D18, V7.D[1] }
      _V7.D[1] = v1056[89].f64[0];
      __asm { FMLA            D1, D18, V7.D[1] }
      _V7.D[1] = v1056[96].f64[1];
      __asm { FMLA            D4, D18, V7.D[1] }
      _V7.D[1] = v1056[104].f64[0];
      __asm { FMLA            D5, D18, V7.D[1] }
      v1009 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[75].f64[0]), *(float64x2_t *)&v1132[216], v1056[75], 1), *(float64x2_t *)&v1132[336], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[79].f64[0]),
                          v1139,
                          v1056[79],
                          1),
                        v1147,
                        v1056[80].f64[0]),
                      v1154,
                      v1056[80],
                      1),
                    v1162,
                    v1056[81].f64[0]),
                  v1169,
                  v1056[81],
                  1),
                v1177,
                v1056[82].f64[0]);
      v1058 = _D0 + v1178 * v1056[82].f64[0];
      v1010 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[82].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[336], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[86].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1147,
                        v1056[87].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1162,
                    v1056[88].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1177,
                v1056[89].f64[1]);
      v1059 = _D1 + v1178 * v1056[89].f64[1];
      v1011 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[90].f64[0]), *(float64x2_t *)&v1132[216], v1056[90], 1), *(float64x2_t *)&v1132[336], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[94].f64[0]),
                          v1139,
                          v1056[94],
                          1),
                        v1147,
                        v1056[95].f64[0]),
                      v1154,
                      v1056[95],
                      1),
                    v1162,
                    v1056[96].f64[0]),
                  v1169,
                  v1056[96],
                  1),
                v1177,
                v1056[97].f64[0]);
      v1060 = _D4 + v1178 * v1056[97].f64[0];
      v1012 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[97].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[336], v1056[98].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[98] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[99].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[99] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[100].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[100] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[101].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[101] + 8),
                          1),
                        v1147,
                        v1056[102].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[102] + 8),
                      1),
                    v1162,
                    v1056[103].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[103] + 8),
                  1),
                v1177,
                v1056[104].f64[1]);
      v1064 = _D5 + v1178 * v1056[104].f64[1];
      v1013 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[105].f64[0]), *(float64x2_t *)&v1132[120], v1056[105], 1), *(float64x2_t *)&v1132[240], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[109].f64[0]),
                          v1133,
                          v1056[109],
                          1),
                        v1141,
                        v1056[110].f64[0]),
                      v1148,
                      v1056[110],
                      1),
                    v1156,
                    v1056[111].f64[0]),
                  v1163,
                  v1056[111],
                  1),
                v1171,
                v1056[112].f64[0]);
      v1014 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[105].f64[0]), *(float64x2_t *)&v1132[136], v1056[105], 1), *(float64x2_t *)&v1132[256], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[109].f64[0]),
                          v1134,
                          v1056[109],
                          1),
                        v1142,
                        v1056[110].f64[0]),
                      v1149,
                      v1056[110],
                      1),
                    v1157,
                    v1056[111].f64[0]),
                  v1164,
                  v1056[111],
                  1),
                v1172,
                v1056[112].f64[0]);
      v1015 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[105].f64[0]), *(float64x2_t *)&v1132[152], v1056[105], 1), *(float64x2_t *)&v1132[272], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[109].f64[0]),
                          v1135,
                          v1056[109],
                          1),
                        v1143,
                        v1056[110].f64[0]),
                      v1150,
                      v1056[110],
                      1),
                    v1158,
                    v1056[111].f64[0]),
                  v1165,
                  v1056[111],
                  1),
                v1173,
                v1056[112].f64[0]);
      v1016 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[105].f64[0]), *(float64x2_t *)&v1132[168], v1056[105], 1), *(float64x2_t *)&v1132[288], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[109].f64[0]),
                          v1136,
                          v1056[109],
                          1),
                        v1144,
                        v1056[110].f64[0]),
                      v1151,
                      v1056[110],
                      1),
                    v1159,
                    v1056[111].f64[0]),
                  v1166,
                  v1056[111],
                  1),
                v1174,
                v1056[112].f64[0]);
      v1017 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[105].f64[0]), *(float64x2_t *)&v1132[184], v1056[105], 1);
      v1018 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[105].f64[0]), *(float64x2_t *)&v1132[200], v1056[105], 1);
      *(float64x2_t *)((char *)v16 + 456) = v1065;
      *(float64x2_t *)((char *)v16 + 600) = _Q14;
      *(float64x2_t *)((char *)v16 + 616) = v930;
      *(float64x2_t *)((char *)v16 + 632) = _Q30;
      *(float64x2_t *)((char *)v16 + 648) = v935;
      *(float64x2_t *)((char *)v16 + 664) = v942;
      *(float64x2_t *)((char *)v16 + 680) = v943;
      v1019 = v1131.f64[0];
      *(float64x2_t *)(*(_QWORD *)&v1131.f64[0] + 2896) = v1115;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2880) = v1116;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2928) = v1090;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2912) = v1091;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2960) = v1075;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2944) = v1076;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3376) = v931;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3360) = v1057;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3408) = v939;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3392) = _Q8;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3440) = v947;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3424) = v946;
      *(float64x2_t *)((char *)v16 + 696) = v1010;
      *(float64x2_t *)((char *)v16 + 936) = v1012;
      v1020 = v1119;
      *v16 = v1122;
      v16[1] = v1020;
      *(float64x2_t *)((char *)v16 + 136) = v1121;
      *(float64x2_t *)((char *)v16 + 120) = v1124;
      v1021 = v1120;
      v16[15] = v1123;
      v16[16] = v1021;
      v1022 = v1097;
      v16[2] = v1099;
      v16[3] = v1022;
      *(float64x2_t *)((char *)v16 + 168) = v1095;
      *(float64x2_t *)((char *)v16 + 152) = v1098;
      v1023 = v1094;
      v16[17] = v1096;
      v16[18] = v1023;
      v1024 = v1081;
      v16[4] = v1083;
      v16[5] = v1024;
      v1025 = v1078;
      *(float64x2_t *)((char *)v16 + 200) = v1079;
      *(float64x2_t *)((char *)v16 + 184) = v1082;
      v16[19] = v1080;
      v16[20] = v1025;
      v16[6] = v1073;
      v16[7].f64[0] = v1070;
      *(float64x2_t *)((char *)v16 + 216) = v1072;
      v16[14].f64[1] = v1069;
      v16[21] = v1071;
      v16[22].f64[0] = v1068;
      v16[29].f64[1] = v1067;
      v1026 = v1063;
      v16[30] = v1074;
      v16[31] = v1026;
      v1027 = v1061;
      v16[45] = v1062;
      v16[46] = v1027;
      v16[32] = v932;
      v16[33] = _Q11;
      _Q23 = *(float64x2_t *)&v1132[680];
      v16[47] = _Q10;
      v16[48] = v937;
      v1029 = *(float64x2_t *)&v1132[920];
      _Q22 = v1138;
      v16[34] = v940;
      v16[35] = v941;
      _Q3 = v1153;
      _Q6 = v1168;
      v16[49] = _Q28;
      v16[50] = v945;
      v1033 = *(float64x2_t *)&v1132[216];
      v1034 = *(float64x2_t *)&v1132[696];
      v16[36] = v1009;
      v1035 = *(float64x2_t *)&v1132[936];
      v946.f64[0] = v1059;
      v16[37].f64[0] = v1058;
      v1036 = v1139;
      v16[44].f64[1] = v946.f64[0];
      v1037 = v1154;
      v16[51] = v1011;
      v1038 = v1169;
      _Q10.f64[0] = *(float64_t *)&v1132[232];
      v1039 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1018, v1085, v1056[106].f64[0]), *(float64x2_t *)&v1132[440], v1056[106], 1), v1066, v1056[107].f64[0]), _Q23, v1056[107], 1), v1084, v1056[108].f64[0]),
                        v1029,
                        v1056[108],
                        1),
                      *(float64x2_t *)&v1132[1040],
                      v1056[109].f64[0]),
                    _Q22,
                    v1056[109],
                    1),
                  v1077,
                  v1056[110].f64[0]),
                _Q3,
                v1056[110],
                1);
      _Q3.f64[0] = *(float64_t *)&v1132[472];
      _Q23.f64[1] = v1056[106].f64[1];
      _Q30.f64[1] = v1056[105].f64[1];
      v1040 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1017, v1105, v1056[106].f64[0]), *(float64x2_t *)&v1132[424], v1056[106], 1), v1102, v1056[107].f64[0]), v1100, v1056[107],
                                  1),
                                v1093,
                                v1056[108].f64[0]),
                              v1092,
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[109].f64[0]),
                          v1089,
                          v1056[109],
                          1),
                        v1088,
                        v1056[110].f64[0]),
                      v1087,
                      v1056[110],
                      1),
                    v1160,
                    v1056[111].f64[0]),
                  v1086,
                  v1056[111],
                  1),
                v1175,
                v1056[112].f64[0]);
      v1041 = *(float64x2_t *)&v1132[576];
      v1042 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1039, v1161, v1056[111].f64[0]), _Q6, v1056[111], 1), v1176, v1056[112].f64[0]);
      _Q6.f64[0] = *(float64_t *)&v1132[712];
      v1043 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[105].f64[0]), v1033, v1056[105], 1);
      v1044 = *(float64x2_t *)&v1132[816];
      _Q28.f64[0] = *(float64_t *)&v1132[952];
      v1045 = vmlaq_laneq_f64(vmlaq_n_f64(v1043, *(float64x2_t *)&v1132[336], v1056[106].f64[0]), *(float64x2_t *)&v1132[456], v1056[106], 1);
      v1046 = *(float64x2_t *)&v1132[1056];
      __asm { FMLA            D8, D10, V30.D[1] }
      _Q30.f64[0] = v1140;
      __asm { FMLA            D8, D3, V23.D[1] }
      v1047 = v1147;
      _Q22.f64[0] = v1155;
      v1048 = v1162;
      _Q11.f64[0] = v1170;
      v932.f64[0] = v1178;
      v1049 = v1177;
      v16[52].f64[0] = v1060;
      _Q14.f64[1] = v1056[107].f64[1];
      v1050 = vmlaq_n_f64(v1045, v1041, v1056[107].f64[0]);
      _Q31 = v1056[108];
      v1052 = vmlaq_laneq_f64(v1050, v1034, v1056[107], 1);
      _Q18 = v1056[110];
      v1034.f64[0] = v1056[112].f64[0];
      __asm { FMLA            D8, D6, V14.D[1] }
      _Q6 = v1056[109];
      _Q14 = v1056[111];
      v16[59].f64[1] = v1064;
      v16[60] = v1013;
      v16[61] = v1014;
      v16[62] = v1015;
      v16[63] = v1016;
      v16[65] = v1042;
      v16[64] = v1040;
      __asm
      {
        FMLA            D8, D28, V31.D[1]
        FMLA            D8, D30, V6.D[1]
        FMLA            D8, D22, V18.D[1]
      }
      v16[66] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1052, v1044, _Q31.f64[0]), v1035, _Q31, 1), v1046, _Q6.f64[0]), v1036, _Q6, 1), v1047, _Q18.f64[0]), v1037, _Q18, 1), v1048, _Q14.f64[0]),
                    v1038,
                    _Q14,
                    1),
                  v1049,
                  v1034.f64[0]);
      __asm { FMLA            D8, D11, V14.D[1] }
      v16[67].f64[0] = _Q8.f64[0] + v932.f64[0] * v1034.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

float64_t *sub_20F56FE10(float64_t *result, double a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12, int a13)
{
  float64x2_t v13;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  double v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v336;
  float64x2_t v338;
  float64x2_t v341;
  float64x2_t v346;
  float64x2_t v348;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v359;
  float64x2_t v361;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v553;
  float64x2_t v555;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v570;
  float64x2_t v572;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  uint64_t i;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t *v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  double v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  _QWORD *v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v759;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777[115];
  float64_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  double v793;
  double v794;
  double v795;
  double v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814[45];
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64_t v882;
  uint64_t v883;

  v883 = *MEMORY[0x24BDAC8D0];
  v16 = (float64x2_t *)(a11 + 1800);
  switch(a13)
  {
    case 0:
      v17 = a12 + 1;
      if (a11 + 2520 > (unint64_t)&a12[1] && (float64x2_t *)&a12[113].f64[1] > v16)
      {
        MEMORY[0x24BDAC7A8](result);
        result = (float64_t *)memcpy(v777, v17, 0x708uLL);
        v17 = v777;
      }
      MEMORY[0x24BDAC7A8](result);
      v18 = &v777[-45];
      memcpy(&v777[-45], v16, 0x2D0uLL);
      v19 = v17[1];
      v20 = *(float64x2_t *)((char *)v17 + 136);
      v21 = *(float64x2_t *)((char *)v17 + 120);
      v23 = v17[15];
      v22 = v17[16];
      v24 = *(float64x2_t *)((char *)v17 + 376);
      v25 = *(float64x2_t *)((char *)v17 + 360);
      v26 = v777[-44];
      v27 = *(float64x2_t *)((char *)&v777[-37] + 8);
      v28 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v29 = v777[-30];
      v30 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v31 = *(float64x2_t *)((char *)&v777[-23] + 8);
      _Q24 = v777[-45];
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v18->f64[0]), v21, *v18, 1), v23, v26.f64[0]), v25, v26, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v18->f64[0]), v20, *v18, 1), v22, v26.f64[0]), v24, v26, 1);
      v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v28.f64[0]), v21, v28, 1), v23, v27.f64[0]), v25, v27, 1);
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v28.f64[0]), v20, v28, 1), v22, v27.f64[0]), v24, v27, 1);
      _Q20 = v29;
      v38 = v777[-29];
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v29.f64[0]), v21, v29, 1), v23, v38.f64[0]), v25, v38, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v29.f64[0]), v20, v29, 1), v22, v38.f64[0]), v24, v38, 1);
      v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v31.f64[0]), v21, v31, 1), v23, v30.f64[0]), v25, v30, 1);
      v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v31.f64[0]), v20, v31, 1), v22, v30.f64[0]), v24, v30, 1);
      v44 = v17[30];
      v43 = v17[31];
      v46 = *(float64x2_t *)((char *)v17 + 600);
      v45 = *(float64x2_t *)((char *)v17 + 616);
      v48 = v17[45];
      v47 = v17[46];
      v50 = *(float64x2_t *)((char *)v17 + 840);
      v49 = *(float64x2_t *)((char *)v17 + 856);
      v51 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v52 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v53 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v54 = *(float64x2_t *)((char *)&v777[-21] + 8);
      _Q1 = v777[-44];
      v56 = v777[-43];
      _Q2 = v56;
      v58 = v777[-42];
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v44, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v43, v56.f64[0]), v45, v56, 1), v47, v58.f64[0]), v49, v58, 1);
      v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v35, v44, v52.f64[0]), v46, v52, 1), v48, v51.f64[0]), v50, v51, 1);
      v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v36, v43, v52.f64[0]), v45, v52, 1), v47, v51.f64[0]), v49, v51, 1);
      _Q4 = v777[-29];
      v64 = v777[-28];
      _Q3 = v64;
      v66 = v777[-27];
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v44, v64.f64[0]), v46, v64, 1), v48, v66.f64[0]), v50, v66, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v43, v64.f64[0]), v45, v64, 1), v47, v66.f64[0]), v49, v66, 1);
      v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v41, v44, v54.f64[0]), v46, v54, 1), v48, v53.f64[0]), v50, v53, 1);
      v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v42, v43, v54.f64[0]), v45, v54, 1), v47, v53.f64[0]), v49, v53, 1);
      v72 = v17[60];
      v71 = v17[61];
      v74 = *(float64x2_t *)((char *)v17 + 1080);
      v73 = *(float64x2_t *)((char *)v17 + 1096);
      v75 = v17[76];
      v76 = v17[75];
      v77 = *(float64x2_t *)((char *)v17 + 1320);
      v78 = *(float64x2_t *)((char *)v17 + 1336);
      v79 = *(float64x2_t *)((char *)&v777[-33] + 8);
      v80 = *(float64x2_t *)((char *)&v777[-34] + 8);
      v81 = *(float64x2_t *)((char *)&v777[-18] + 8);
      v82 = *(float64x2_t *)((char *)&v777[-19] + 8);
      _Q5 = v777[-42];
      _Q7 = v777[-41];
      v85 = v777[-40];
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, _Q7.f64[0]), v74, _Q7, 1), v76, v85.f64[0]), v77, v85, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v71, _Q7.f64[0]), v73, _Q7, 1), v75, v85.f64[0]), v78, v85, 1);
      v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v80.f64[0]), v74, v80, 1), v76, v79.f64[0]), v77, v79, 1);
      v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, v71, v80.f64[0]), v73, v80, 1), v75, v79.f64[0]), v78, v79, 1);
      _Q18 = v777[-27];
      _Q6 = v777[-26];
      v92 = v777[-25];
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v72, _Q6.f64[0]), v74, _Q6, 1), v76, v92.f64[0]), v77, v92, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v71, _Q6.f64[0]), v73, _Q6, 1), v75, v92.f64[0]), v78, v92, 1);
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, v72, v82.f64[0]), v74, v82, 1), v76, v81.f64[0]), v77, v81, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v70, v71, v82.f64[0]), v73, v82, 1), v75, v81.f64[0]), v78, v81, 1);
      v97 = v17[91];
      v98 = v17[90];
      v100 = *(float64x2_t *)((char *)v17 + 1560);
      v99 = *(float64x2_t *)((char *)v17 + 1576);
      v101 = v17[106];
      v102 = v17[105];
      v71.f64[0] = v777[-38].f64[0];
      v77.f64[0] = v777[-31].f64[1];
      v103 = *(float64x2_t *)((char *)&v777[-32] + 8);
      _Q17 = v777[-40];
      v104 = v777[-39];
      v106 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v98, v104.f64[0]), v100, v104, 1);
      v107 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v97, v104.f64[0]), v99, v104, 1);
      v104.f64[0] = v777[-23].f64[0];
      v108 = vmlaq_n_f64(v106, v102, v71.f64[0]);
      v109 = vmlaq_n_f64(v107, v101, v71.f64[0]);
      v110 = v777[-16].f64[1];
      v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v98, v103.f64[0]), v100, v103, 1), v102, v77.f64[0]);
      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v89, v97, v103.f64[0]), v99, v103, 1), v101, v77.f64[0]);
      _Q16 = v777[-25];
      v113 = v777[-24];
      v115 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v98, v113.f64[0]), v100, v113, 1);
      v116 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v97, v113.f64[0]), v99, v113, 1);
      v117 = *(float64x2_t *)((char *)&v777[-17] + 8);
      *v16 = v108;
      v16[1] = v109;
      *(float64x2_t *)(a11 + 1936) = v112;
      *(float64x2_t *)(a11 + 1920) = v111;
      v16[15] = vmlaq_n_f64(v115, v102, v104.f64[0]);
      v16[16] = vmlaq_n_f64(v116, v101, v104.f64[0]);
      *(float64x2_t *)((char *)v16 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v98, v117.f64[0]), v100, v117, 1), v102, v110);
      *(float64x2_t *)((char *)v16 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v97, v117.f64[0]), v99, v117, 1), v101, v110);
      v118 = v17[2];
      v119 = v17[3];
      v120 = *(float64x2_t *)((char *)v17 + 168);
      v121 = *(float64x2_t *)((char *)v17 + 152);
      v123 = v17[17];
      v122 = v17[18];
      v124 = *(float64x2_t *)((char *)v17 + 408);
      v125 = *(float64x2_t *)((char *)v17 + 392);
      v126 = v777[-44];
      v127 = *(float64x2_t *)((char *)&v777[-37] + 8);
      v128 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v130 = v777[-30];
      v129 = v777[-29];
      v131 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v18->f64[0]), v121, *v18, 1), v123, v126.f64[0]), v125, v126, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v18->f64[0]), v120, *v18, 1), v122, v126.f64[0]), v124, v126, 1);
      v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v128.f64[0]), v121, v128, 1), v123, v127.f64[0]), v125, v127, 1);
      v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v128.f64[0]), v120, v128, 1), v122, v127.f64[0]), v124, v127, 1);
      v136 = vmlaq_laneq_f64(vmulq_n_f64(v118, v130.f64[0]), v121, v130, 1);
      v137 = vmlaq_laneq_f64(vmulq_n_f64(v119, v130.f64[0]), v120, v130, 1);
      v138 = *(float64x2_t *)((char *)&v777[-23] + 8);
      v139 = vmlaq_laneq_f64(vmlaq_n_f64(v136, v123, v129.f64[0]), v125, v129, 1);
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v122, v129.f64[0]), v124, v129, 1);
      v141 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v138.f64[0]), v121, v138, 1), v123, v131.f64[0]), v125, v131, 1);
      v142 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v138.f64[0]), v120, v138, 1), v122, v131.f64[0]), v124, v131, 1);
      v144 = v17[32];
      v143 = v17[33];
      v146 = *(float64x2_t *)((char *)v17 + 632);
      v145 = *(float64x2_t *)((char *)v17 + 648);
      v148 = v17[47];
      v147 = v17[48];
      v150 = *(float64x2_t *)((char *)v17 + 872);
      v149 = *(float64x2_t *)((char *)v17 + 888);
      v151 = v777[-43];
      v152 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v144, v151.f64[0]), v146, v151, 1);
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v143, v151.f64[0]), v145, v151, 1);
      v154 = v777[-42];
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v148, v154.f64[0]), v150, v154, 1);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v147, v154.f64[0]), v149, v154, 1);
      v157 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v158 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v144, v157.f64[0]), v146, v157, 1);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v143, v157.f64[0]), v145, v157, 1);
      v160 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v148, v160.f64[0]), v150, v160, 1);
      v162 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v147, v160.f64[0]), v149, v160, 1);
      v163 = v777[-28];
      v164 = vmlaq_laneq_f64(vmlaq_n_f64(v139, v144, v163.f64[0]), v146, v163, 1);
      v165 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v143, v163.f64[0]), v145, v163, 1);
      v166 = v777[-27];
      v167 = vmlaq_laneq_f64(vmlaq_n_f64(v164, v148, v166.f64[0]), v150, v166, 1);
      v168 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v147, v166.f64[0]), v149, v166, 1);
      v169 = *(float64x2_t *)((char *)&v777[-21] + 8);
      v170 = vmlaq_n_f64(v141, v144, v169.f64[0]);
      v171 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v172 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v170, v146, v169, 1), v148, v171.f64[0]), v150, v171, 1);
      v173 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v142, v143, v169.f64[0]), v145, v169, 1), v147, v171.f64[0]), v149, v171, 1);
      v175 = v17[62];
      v174 = v17[63];
      v177 = *(float64x2_t *)((char *)v17 + 1112);
      v176 = *(float64x2_t *)((char *)v17 + 1128);
      v178 = v17[78];
      v179 = v17[77];
      v181 = *(float64x2_t *)((char *)v17 + 1352);
      v180 = *(float64x2_t *)((char *)v17 + 1368);
      v182 = v777[-41];
      v183 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v175, v182.f64[0]), v177, v182, 1);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v174, v182.f64[0]), v176, v182, 1);
      v185 = v777[-40];
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(v183, v179, v185.f64[0]), v181, v185, 1);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v178, v185.f64[0]), v180, v185, 1);
      v188 = *(float64x2_t *)((char *)&v777[-34] + 8);
      v189 = vmlaq_laneq_f64(vmlaq_n_f64(v161, v175, v188.f64[0]), v177, v188, 1);
      v190 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v174, v188.f64[0]), v176, v188, 1);
      v191 = *(float64x2_t *)((char *)&v777[-33] + 8);
      v192 = vmlaq_laneq_f64(vmlaq_n_f64(v189, v179, v191.f64[0]), v181, v191, 1);
      v193 = vmlaq_laneq_f64(vmlaq_n_f64(v190, v178, v191.f64[0]), v180, v191, 1);
      v194 = v777[-26];
      v195 = vmlaq_laneq_f64(vmlaq_n_f64(v167, v175, v194.f64[0]), v177, v194, 1);
      v196 = vmlaq_laneq_f64(vmlaq_n_f64(v168, v174, v194.f64[0]), v176, v194, 1);
      v197 = v777[-25];
      v198 = vmlaq_laneq_f64(vmlaq_n_f64(v195, v179, v197.f64[0]), v181, v197, 1);
      v199 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v178, v197.f64[0]), v180, v197, 1);
      v200 = *(float64x2_t *)((char *)&v777[-19] + 8);
      v201 = vmlaq_n_f64(v172, v175, v200.f64[0]);
      v202 = *(float64x2_t *)((char *)&v777[-18] + 8);
      v203 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v201, v177, v200, 1), v179, v202.f64[0]), v181, v202, 1);
      v204 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v173, v174, v200.f64[0]), v176, v200, 1), v178, v202.f64[0]), v180, v202, 1);
      v205 = v17[93];
      v206 = v17[92];
      v208 = *(float64x2_t *)((char *)v17 + 1592);
      v207 = *(float64x2_t *)((char *)v17 + 1608);
      v209 = v17[108];
      v210 = v17[107];
      v180.f64[0] = v777[-38].f64[0];
      v211 = v777[-39];
      v200.f64[0] = v777[-31].f64[1];
      v212 = vmlaq_laneq_f64(vmlaq_n_f64(v186, v206, v211.f64[0]), v208, v211, 1);
      v213 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v205, v211.f64[0]), v207, v211, 1);
      v214 = *(float64x2_t *)((char *)&v777[-32] + 8);
      v215 = vmlaq_n_f64(v212, v210, v180.f64[0]);
      v216 = vmlaq_n_f64(v213, v209, v180.f64[0]);
      v180.f64[0] = v777[-23].f64[0];
      v217 = vmlaq_laneq_f64(vmlaq_n_f64(v192, v206, v214.f64[0]), v208, v214, 1);
      v218 = vmlaq_laneq_f64(vmlaq_n_f64(v193, v205, v214.f64[0]), v207, v214, 1);
      v219 = v777[-24];
      v220 = vmlaq_n_f64(v217, v210, v200.f64[0]);
      v221 = vmlaq_n_f64(v218, v209, v200.f64[0]);
      v200.f64[0] = v777[-16].f64[1];
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(v198, v206, v219.f64[0]), v208, v219, 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(v199, v205, v219.f64[0]), v207, v219, 1);
      v224 = *(float64x2_t *)((char *)&v777[-17] + 8);
      v16[2] = v215;
      v16[3] = v216;
      *(float64x2_t *)(a11 + 1968) = v221;
      *(float64x2_t *)(a11 + 1952) = v220;
      v16[17] = vmlaq_n_f64(v222, v210, v180.f64[0]);
      v16[18] = vmlaq_n_f64(v223, v209, v180.f64[0]);
      *(float64x2_t *)((char *)v16 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v203, v206, v224.f64[0]), v208, v224, 1), v210, v200.f64[0]);
      *(float64x2_t *)((char *)v16 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v204, v205, v224.f64[0]), v207, v224, 1), v209, v200.f64[0]);
      v225 = v17[4];
      v226 = v17[5];
      v227 = *(float64x2_t *)((char *)v17 + 200);
      v228 = *(float64x2_t *)((char *)v17 + 184);
      v230 = v17[19];
      v229 = v17[20];
      v231 = *(float64x2_t *)((char *)v17 + 440);
      v232 = *(float64x2_t *)((char *)v17 + 424);
      v233 = v777[-44];
      v234 = *(float64x2_t *)((char *)&v777[-37] + 8);
      v235 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v237 = v777[-30];
      v236 = v777[-29];
      v238 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v18->f64[0]), v228, *v18, 1), v230, v233.f64[0]), v232, v233, 1);
      v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v18->f64[0]), v227, *v18, 1), v229, v233.f64[0]), v231, v233, 1);
      v241 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v235.f64[0]), v228, v235, 1), v230, v234.f64[0]), v232, v234, 1);
      v242 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v235.f64[0]), v227, v235, 1), v229, v234.f64[0]), v231, v234, 1);
      v243 = vmlaq_laneq_f64(vmulq_n_f64(v225, v237.f64[0]), v228, v237, 1);
      v244 = vmlaq_laneq_f64(vmulq_n_f64(v226, v237.f64[0]), v227, v237, 1);
      v245 = *(float64x2_t *)((char *)&v777[-23] + 8);
      v246 = vmlaq_laneq_f64(vmlaq_n_f64(v243, v230, v236.f64[0]), v232, v236, 1);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v229, v236.f64[0]), v231, v236, 1);
      v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v245.f64[0]), v228, v245, 1), v230, v238.f64[0]), v232, v238, 1);
      v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v245.f64[0]), v227, v245, 1), v229, v238.f64[0]), v231, v238, 1);
      v251 = v17[34];
      v250 = v17[35];
      result = &v17[41].f64[1];
      v253 = *(float64x2_t *)((char *)v17 + 664);
      v252 = *(float64x2_t *)((char *)v17 + 680);
      v255 = v17[49];
      v254 = v17[50];
      v257 = *(float64x2_t *)((char *)v17 + 904);
      v256 = *(float64x2_t *)((char *)v17 + 920);
      v258 = v777[-43];
      v259 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v251, v258.f64[0]), v253, v258, 1);
      v260 = vmlaq_laneq_f64(vmlaq_n_f64(v240, v250, v258.f64[0]), v252, v258, 1);
      v261 = v777[-42];
      v262 = vmlaq_laneq_f64(vmlaq_n_f64(v259, v255, v261.f64[0]), v257, v261, 1);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v254, v261.f64[0]), v256, v261, 1);
      v264 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v265 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v251, v264.f64[0]), v253, v264, 1);
      v266 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v250, v264.f64[0]), v252, v264, 1);
      v267 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v268 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v255, v267.f64[0]), v257, v267, 1);
      v269 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v254, v267.f64[0]), v256, v267, 1);
      v270 = v777[-28];
      v271 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v251, v270.f64[0]), v253, v270, 1);
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(v247, v250, v270.f64[0]), v252, v270, 1);
      v273 = v777[-27];
      v274 = vmlaq_laneq_f64(vmlaq_n_f64(v271, v255, v273.f64[0]), v257, v273, 1);
      v275 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v254, v273.f64[0]), v256, v273, 1);
      v276 = *(float64x2_t *)((char *)&v777[-21] + 8);
      v277 = vmlaq_n_f64(v248, v251, v276.f64[0]);
      v278 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v279 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v277, v253, v276, 1), v255, v278.f64[0]), v257, v278, 1);
      v280 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v250, v276.f64[0]), v252, v276, 1), v254, v278.f64[0]), v256, v278, 1);
      v281 = v17[65];
      v282 = v17[64];
      v284 = *(float64x2_t *)((char *)v17 + 1144);
      v283 = *(float64x2_t *)((char *)v17 + 1160);
      v285 = v17[80];
      v286 = v17[79];
      v288 = *(float64x2_t *)((char *)v17 + 1384);
      v287 = *(float64x2_t *)((char *)v17 + 1400);
      v289 = v777[-41];
      v290 = vmlaq_laneq_f64(vmlaq_n_f64(v262, v282, v289.f64[0]), v284, v289, 1);
      v291 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v281, v289.f64[0]), v283, v289, 1);
      v292 = v777[-40];
      v293 = vmlaq_laneq_f64(vmlaq_n_f64(v290, v286, v292.f64[0]), v288, v292, 1);
      v294 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v285, v292.f64[0]), v287, v292, 1);
      v295 = *(float64x2_t *)((char *)&v777[-34] + 8);
      v296 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v282, v295.f64[0]), v284, v295, 1);
      v297 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v281, v295.f64[0]), v283, v295, 1);
      v298 = *(float64x2_t *)((char *)&v777[-33] + 8);
      v299 = vmlaq_laneq_f64(vmlaq_n_f64(v296, v286, v298.f64[0]), v288, v298, 1);
      v300 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v285, v298.f64[0]), v287, v298, 1);
      v301 = v777[-26];
      v302 = vmlaq_laneq_f64(vmlaq_n_f64(v274, v282, v301.f64[0]), v284, v301, 1);
      v303 = vmlaq_laneq_f64(vmlaq_n_f64(v275, v281, v301.f64[0]), v283, v301, 1);
      v304 = v777[-25];
      v305 = vmlaq_laneq_f64(vmlaq_n_f64(v302, v286, v304.f64[0]), v288, v304, 1);
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(v303, v285, v304.f64[0]), v287, v304, 1);
      v307 = *(float64x2_t *)((char *)&v777[-19] + 8);
      v308 = vmlaq_laneq_f64(vmlaq_n_f64(v279, v282, v307.f64[0]), v284, v307, 1);
      v309 = *(float64x2_t *)((char *)&v777[-18] + 8);
      v310 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v286, v309.f64[0]), v288, v309, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v280, v281, v307.f64[0]), v283, v307, 1), v285, v309.f64[0]), v287, v309, 1);
      v312 = v17[95];
      v313 = v17[94];
      _Q31 = *(float64x2_t *)((char *)v17 + 1624);
      v314 = *(float64x2_t *)((char *)v17 + 1640);
      v316 = v17[110];
      v317 = v17[109];
      v318 = v777[-39];
      v319 = vmlaq_laneq_f64(vmlaq_n_f64(v293, v313, v318.f64[0]), _Q31, v318, 1);
      v320 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v312, v318.f64[0]), v314, v318, 1);
      v318.f64[0] = v777[-38].f64[0];
      v321 = vmlaq_n_f64(v319, v317, v318.f64[0]);
      v322 = vmlaq_n_f64(v320, v316, v318.f64[0]);
      v323 = *(float64x2_t *)((char *)&v777[-32] + 8);
      v324 = vmlaq_laneq_f64(vmlaq_n_f64(v299, v313, v323.f64[0]), _Q31, v323, 1);
      v325 = vmlaq_laneq_f64(vmlaq_n_f64(v300, v312, v323.f64[0]), v314, v323, 1);
      v323.f64[0] = v777[-31].f64[1];
      v326 = vmlaq_n_f64(v324, v317, v323.f64[0]);
      _Q22 = vmlaq_n_f64(v325, v316, v323.f64[0]);
      v328 = v777[-24];
      v329 = vmlaq_laneq_f64(vmlaq_n_f64(v305, v313, v328.f64[0]), _Q31, v328, 1);
      v330 = vmlaq_laneq_f64(vmlaq_n_f64(v306, v312, v328.f64[0]), v314, v328, 1);
      v328.f64[0] = v777[-23].f64[0];
      _Q23 = vmlaq_n_f64(v329, v317, v328.f64[0]);
      v332 = vmlaq_n_f64(v330, v316, v328.f64[0]);
      v333 = *(float64x2_t *)((char *)&v777[-17] + 8);
      v334 = vmlaq_laneq_f64(vmlaq_n_f64(v310, v313, v333.f64[0]), _Q31, v333, 1);
      v313.f64[0] = v777[-16].f64[1];
      v16[4] = v321;
      v16[5] = v322;
      *(float64x2_t *)(a11 + 2000) = _Q22;
      *(float64x2_t *)(a11 + 1984) = v326;
      v16[19] = _Q23;
      v16[20] = v332;
      *(float64x2_t *)((char *)v16 + 424) = vmlaq_n_f64(v334, v317, v313.f64[0]);
      *(float64x2_t *)((char *)v16 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v312, v333.f64[0]), v314, v333, 1), v316, v313.f64[0]);
      _Q26 = v17[6];
      _Q27.f64[0] = v17[14].f64[1];
      v336 = *(float64x2_t *)((char *)v17 + 216);
      _Q30 = v17[21];
      _Q31.f64[0] = v17[29].f64[1];
      v338 = *(float64x2_t *)((char *)v17 + 456);
      _Q19 = *(float64x2_t *)((char *)&v777[-37] + 8);
      _Q21 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v341 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v336, _Q24, 1), _Q30, _Q1.f64[0]), v338, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v346 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v336, _Q21, 1), _Q30, _Q19.f64[0]), v338, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
        FMLA            D21, D27, V20.D[1]
      }
      _Q24 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v348 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v336, _Q20, 1), _Q30, _Q4.f64[0]), v338, _Q4, 1);
      __asm { FMLA            D21, D31, V4.D[1] }
      _Q9 = *(float64x2_t *)((char *)&v777[-23] + 8);
      v350 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q9.f64[0]), v336, _Q9, 1), _Q30, _Q24.f64[0]), v338, _Q24, 1);
      __asm
      {
        FMLA            D20, D27, V9.D[1]
        FMLA            D20, D31, V24.D[1]
      }
      v351 = v17[36];
      _Q26.f64[0] = v17[44].f64[1];
      v352 = *(float64x2_t *)((char *)v17 + 696);
      v353 = v17[51];
      _Q30.f64[0] = v17[59].f64[1];
      v354 = *(float64x2_t *)((char *)v17 + 936);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(v341, v351, _Q2.f64[0]), v352, _Q2, 1);
      __asm { FMLA            D23, D26, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v357 = vmlaq_laneq_f64(vmlaq_n_f64(v355, v353, _Q5.f64[0]), v354, _Q5, 1);
      __asm { FMLA            D23, D30, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v346, v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm { FMLA            D22, D26, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v361 = vmlaq_laneq_f64(vmlaq_n_f64(v359, v353, _Q2.f64[0]), v354, _Q2, 1);
      __asm { FMLA            D22, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v777[-21] + 8);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v348, v351, _Q3.f64[0]), v352, _Q3, 1), v353, _Q18.f64[0]), v354, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v364 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v350, v351, _Q2.f64[0]), v352, _Q2, 1), v353, _Q5.f64[0]), v354, _Q5, 1);
      __asm
      {
        FMLA            D20, D26, V2.D[1]
        FMLA            D20, D30, V5.D[1]
      }
      v365 = v17[66];
      _Q5.f64[0] = v17[74].f64[1];
      v366 = *(float64x2_t *)((char *)v17 + 1176);
      v367 = v17[81];
      _Q26.f64[0] = v17[89].f64[1];
      v368 = *(float64x2_t *)((char *)v17 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v777[-33] + 8);
      _Q29 = *(float64x2_t *)((char *)&v777[-34] + 8);
      _Q30 = *(float64x2_t *)((char *)&v777[-18] + 8);
      _Q31 = *(float64x2_t *)((char *)&v777[-19] + 8);
      v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v357, v365, _Q7.f64[0]), v366, _Q7, 1), v367, _Q17.f64[0]), v368, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v361, v365, _Q29.f64[0]), v366, _Q29, 1), v367, _Q28.f64[0]), v368, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v375 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v363, v365, _Q6.f64[0]), v366, _Q6, 1), v367, _Q16.f64[0]), v368, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v376 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v364, v365, _Q31.f64[0]), v366, _Q31, 1), v367, _Q30.f64[0]), v368, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v377 = v17[96];
      _Q5.f64[0] = v17[104].f64[1];
      v378 = *(float64x2_t *)((char *)v17 + 1656);
      _Q7.f64[0] = v17[112].f64[0];
      v379 = v17[111];
      _Q17.f64[0] = v777[-38].f64[0];
      _Q18 = v777[-39];
      _Q24.f64[0] = v777[-31].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v777[-32] + 8);
      _Q26.f64[0] = v777[-23].f64[0];
      _Q27 = v777[-24];
      _Q28.f64[0] = v777[-16].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v777[-17] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v16[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v16[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v373, v377, _Q18.f64[0]), v378, _Q18, 1), v379, _Q17.f64[0]);
      v16[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v16 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v374, v377, _Q25.f64[0]), v378, _Q25, 1), v379, _Q24.f64[0]);
      v16[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v16[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v375, v377, _Q27.f64[0]), v378, _Q27, 1), v379, _Q26.f64[0]);
      v16[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v16 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v376, v377, _Q29.f64[0]), v378, _Q29, 1), v379, _Q28.f64[0]);
      v384 = v17[1];
      v385 = *(float64x2_t *)((char *)v17 + 136);
      v386 = *(float64x2_t *)((char *)v17 + 120);
      v388 = v17[15];
      v387 = v17[16];
      v389 = *(float64x2_t *)((char *)v17 + 376);
      v390 = *(float64x2_t *)((char *)v17 + 360);
      v391 = v777[-14];
      v392 = *(float64x2_t *)((char *)&v777[-4] + 8);
      v393 = *(float64x2_t *)((char *)&v777[-8] + 8);
      v394 = v777[-15];
      v395 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v394.f64[0]), v386, v394, 1), v388, v391.f64[0]), v390, v391, 1);
      v396 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v384, v394.f64[0]), v385, v394, 1), v387, v391.f64[0]), v389, v391, 1);
      v397 = vmlaq_laneq_f64(vmulq_n_f64(*v17, v393.f64[0]), v386, v393, 1);
      _Q20 = v393;
      v398 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v400 = vmlaq_laneq_f64(vmlaq_n_f64(v397, v388, v398.f64[0]), v390, v398, 1);
      v401 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v384, v393.f64[0]), v385, v393, 1), v387, v398.f64[0]), v389, v398, 1);
      v402 = v17[30];
      v403 = v17[31];
      v405 = *(float64x2_t *)((char *)v17 + 600);
      v404 = *(float64x2_t *)((char *)v17 + 616);
      v407 = v17[45];
      v406 = v17[46];
      v409 = *(float64x2_t *)((char *)v17 + 840);
      v408 = *(float64x2_t *)((char *)v17 + 856);
      v410 = v777[-12];
      v411 = v777[-13];
      v412 = *(float64x2_t *)((char *)&v777[-6] + 8);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v395, v402, v411.f64[0]), v405, v411, 1), v407, v410.f64[0]), v409, v410, 1);
      v414 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v396, v403, v411.f64[0]), v404, v411, 1), v406, v410.f64[0]), v408, v410, 1);
      v415 = vmlaq_laneq_f64(vmlaq_n_f64(v400, v402, v412.f64[0]), v405, v412, 1);
      _Q4 = v412;
      v417 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v418 = vmlaq_laneq_f64(vmlaq_n_f64(v415, v407, v417.f64[0]), v409, v417, 1);
      v419 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v401, v403, v412.f64[0]), v404, v412, 1), v406, v417.f64[0]), v408, v417, 1);
      v420 = v17[60];
      v421 = v17[61];
      v423 = *(float64x2_t *)((char *)v17 + 1080);
      v422 = *(float64x2_t *)((char *)v17 + 1096);
      v424 = v17[76];
      v425 = v17[75];
      v427 = *(float64x2_t *)((char *)v17 + 1320);
      v426 = *(float64x2_t *)((char *)v17 + 1336);
      v428 = v777[-10];
      v429 = v777[-11];
      v430 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v413, v420, v429.f64[0]), v423, v429, 1), v425, v428.f64[0]), v427, v428, 1);
      v431 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v414, v421, v429.f64[0]), v422, v429, 1), v424, v428.f64[0]), v426, v428, 1);
      v432 = vmlaq_laneq_f64(vmlaq_n_f64(v418, v420, v392.f64[0]), v423, v392, 1);
      _Q5 = v392;
      v434 = *(float64x2_t *)((char *)&v777[-3] + 8);
      v435 = vmlaq_laneq_f64(vmlaq_n_f64(v432, v425, v434.f64[0]), v427, v434, 1);
      v436 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v419, v421, v392.f64[0]), v422, v392, 1), v424, v434.f64[0]), v426, v434, 1);
      v437 = v17[91];
      v438 = v17[90];
      v440 = *(float64x2_t *)((char *)v17 + 1560);
      v439 = *(float64x2_t *)((char *)v17 + 1576);
      v441 = v17[106];
      v442 = v17[105];
      v392.f64[0] = v777[-8].f64[0];
      v443 = v777[-9];
      v428.f64[0] = v777[-1].f64[1];
      v444 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v430, v438, v443.f64[0]), v440, v443, 1), v442, v392.f64[0]);
      v445 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v431, v437, v443.f64[0]), v439, v443, 1), v441, v392.f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v777[-3] + 8);
      v447 = *(float64x2_t *)((char *)&v777[-2] + 8);
      v16[30] = v444;
      v16[31] = v445;
      *(float64x2_t *)(a11 + 2416) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v436, v437, v447.f64[0]), v439, v447, 1), v441, v428.f64[0]);
      *(float64x2_t *)(a11 + 2400) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v435, v438, v447.f64[0]), v440, v447, 1), v442, v428.f64[0]);
      v449 = v17[2];
      v448 = v17[3];
      v450 = *(float64x2_t *)((char *)v17 + 168);
      v451 = *(float64x2_t *)((char *)v17 + 152);
      v453 = v17[17];
      v452 = v17[18];
      v454 = *(float64x2_t *)((char *)v17 + 408);
      v455 = *(float64x2_t *)((char *)v17 + 392);
      v456 = v777[-14];
      v457 = v777[-15];
      v459 = *(float64x2_t *)((char *)&v777[-8] + 8);
      v458 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v460 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v449, v457.f64[0]), v451, v457, 1), v453, v456.f64[0]), v455, v456, 1);
      v461 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v448, v457.f64[0]), v450, v457, 1), v452, v456.f64[0]), v454, v456, 1);
      v462 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v449, v459.f64[0]), v451, v459, 1), v453, v458.f64[0]), v455, v458, 1);
      v463 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v448, v459.f64[0]), v450, v459, 1), v452, v458.f64[0]), v454, v458, 1);
      v465 = v17[32];
      v464 = v17[33];
      v467 = *(float64x2_t *)((char *)v17 + 632);
      v466 = *(float64x2_t *)((char *)v17 + 648);
      v469 = v17[47];
      v468 = v17[48];
      v471 = *(float64x2_t *)((char *)v17 + 872);
      v470 = *(float64x2_t *)((char *)v17 + 888);
      v472 = v777[-12];
      v473 = v777[-13];
      v475 = *(float64x2_t *)((char *)&v777[-6] + 8);
      v474 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v476 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v460, v465, v473.f64[0]), v467, v473, 1), v469, v472.f64[0]), v471, v472, 1);
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v461, v464, v473.f64[0]), v466, v473, 1), v468, v472.f64[0]), v470, v472, 1);
      v478 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v462, v465, v475.f64[0]), v467, v475, 1), v469, v474.f64[0]), v471, v474, 1);
      v479 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v463, v464, v475.f64[0]), v466, v475, 1), v468, v474.f64[0]), v470, v474, 1);
      v481 = v17[62];
      v480 = v17[63];
      v483 = *(float64x2_t *)((char *)v17 + 1112);
      v482 = *(float64x2_t *)((char *)v17 + 1128);
      v484 = v17[78];
      v485 = v17[77];
      v487 = *(float64x2_t *)((char *)v17 + 1352);
      v486 = *(float64x2_t *)((char *)v17 + 1368);
      v488 = v777[-10];
      v489 = v777[-11];
      v491 = *(float64x2_t *)((char *)&v777[-4] + 8);
      v490 = *(float64x2_t *)((char *)&v777[-3] + 8);
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v476, v481, v489.f64[0]), v483, v489, 1), v485, v488.f64[0]), v487, v488, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v477, v480, v489.f64[0]), v482, v489, 1), v484, v488.f64[0]), v486, v488, 1);
      v494 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v478, v481, v491.f64[0]), v483, v491, 1), v485, v490.f64[0]), v487, v490, 1);
      v495 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v479, v480, v491.f64[0]), v482, v491, 1), v484, v490.f64[0]), v486, v490, 1);
      v496 = v17[93];
      v497 = v17[92];
      v499 = *(float64x2_t *)((char *)v17 + 1592);
      v498 = *(float64x2_t *)((char *)v17 + 1608);
      v500 = v17[108];
      v501 = v17[107];
      v486.f64[0] = v777[-8].f64[0];
      v502 = v777[-9];
      v488.f64[0] = v777[-1].f64[1];
      v503 = *(float64x2_t *)((char *)&v777[-2] + 8);
      v16[32] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v492, v497, v502.f64[0]), v499, v502, 1), v501, v486.f64[0]);
      v16[33] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v493, v496, v502.f64[0]), v498, v502, 1), v500, v486.f64[0]);
      *(float64x2_t *)(a11 + 2448) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v495, v496, v503.f64[0]), v498, v503, 1), v500, v488.f64[0]);
      *(float64x2_t *)(a11 + 2432) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v494, v497, v503.f64[0]), v499, v503, 1), v501, v488.f64[0]);
      v505 = v17[4];
      v504 = v17[5];
      v506 = *(float64x2_t *)((char *)v17 + 200);
      v507 = *(float64x2_t *)((char *)v17 + 184);
      v509 = v17[19];
      v508 = v17[20];
      v510 = *(float64x2_t *)((char *)v17 + 440);
      v511 = *(float64x2_t *)((char *)v17 + 424);
      v512 = v777[-14];
      v513 = v777[-15];
      v515 = *(float64x2_t *)((char *)&v777[-8] + 8);
      v514 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v505, v513.f64[0]), v507, v513, 1), v509, v512.f64[0]), v511, v512, 1);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v513.f64[0]), v506, v513, 1), v508, v512.f64[0]), v510, v512, 1);
      v518 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v505, v515.f64[0]), v507, v515, 1), v509, v514.f64[0]), v511, v514, 1);
      v519 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v515.f64[0]), v506, v515, 1), v508, v514.f64[0]), v510, v514, 1);
      v521 = v17[34];
      v520 = v17[35];
      v523 = *(float64x2_t *)((char *)v17 + 664);
      v522 = *(float64x2_t *)((char *)v17 + 680);
      v525 = v17[49];
      v524 = v17[50];
      v527 = *(float64x2_t *)((char *)v17 + 904);
      v526 = *(float64x2_t *)((char *)v17 + 920);
      v528 = v777[-12];
      v529 = v777[-13];
      v531 = *(float64x2_t *)((char *)&v777[-6] + 8);
      v530 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v516, v521, v529.f64[0]), v523, v529, 1), v525, v528.f64[0]), v527, v528, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v517, v520, v529.f64[0]), v522, v529, 1), v524, v528.f64[0]), v526, v528, 1);
      v534 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v518, v521, v531.f64[0]), v523, v531, 1), v525, v530.f64[0]), v527, v530, 1);
      v535 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v519, v520, v531.f64[0]), v522, v531, 1), v524, v530.f64[0]), v526, v530, 1);
      v536 = v17[65];
      v537 = v17[64];
      v539 = *(float64x2_t *)((char *)v17 + 1144);
      v538 = *(float64x2_t *)((char *)v17 + 1160);
      v540 = v17[80];
      v541 = v17[79];
      v543 = *(float64x2_t *)((char *)v17 + 1384);
      v542 = *(float64x2_t *)((char *)v17 + 1400);
      v544 = v777[-10];
      v545 = v777[-11];
      v547 = *(float64x2_t *)((char *)&v777[-4] + 8);
      v546 = *(float64x2_t *)((char *)&v777[-3] + 8);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, v537, v545.f64[0]), v539, v545, 1), v541, v544.f64[0]), v543, v544, 1);
      v549 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v533, v536, v545.f64[0]), v538, v545, 1), v540, v544.f64[0]), v542, v544, 1);
      v550 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v534, v537, v547.f64[0]), v539, v547, 1), v541, v546.f64[0]), v543, v546, 1);
      _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v535, v536, v547.f64[0]), v538, v547, 1), v540, v546.f64[0]), v542, v546, 1);
      _Q2 = v17[95];
      v553 = v17[94];
      v555 = *(float64x2_t *)((char *)v17 + 1624);
      _Q7 = *(float64x2_t *)((char *)v17 + 1640);
      _Q17 = v17[110];
      v557 = v17[109];
      v542.f64[0] = v777[-8].f64[0];
      v558 = v777[-9];
      v544.f64[0] = v777[-1].f64[1];
      v559 = *(float64x2_t *)((char *)&v777[-2] + 8);
      v16[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q24, v553, v558.f64[0]), v555, v558, 1), v557, v542.f64[0]);
      v16[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v549, _Q2, v558.f64[0]), _Q7, v558, 1), _Q17, v542.f64[0]);
      *(float64x2_t *)(a11 + 2480) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, _Q2, v559.f64[0]), _Q7, v559, 1), _Q17, v544.f64[0]);
      *(float64x2_t *)(a11 + 2464) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v550, v553, v559.f64[0]), v555, v559, 1), v557, v544.f64[0]);
      v560 = v17[6];
      _Q2.f64[0] = v17[14].f64[1];
      v561 = *(float64x2_t *)((char *)v17 + 216);
      v562 = v17[21];
      _Q17.f64[0] = v17[29].f64[1];
      v563 = *(float64x2_t *)((char *)v17 + 456);
      _Q19 = v777[-14];
      _Q21 = v777[-15];
      _Q22 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v567 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v560, _Q21.f64[0]), v561, _Q21, 1), v562, _Q19.f64[0]), v563, _Q19, 1);
      __asm
      {
        FMLA            D24, D2, V21.D[1]
        FMLA            D24, D17, V19.D[1]
      }
      v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v560, _Q20.f64[0]), v561, _Q20, 1), v562, _Q22.f64[0]), v563, _Q22, 1);
      __asm
      {
        FMLA            D0, D2, V20.D[1]
        FMLA            D0, D17, V22.D[1]
      }
      _Q6 = v17[36];
      _Q7.f64[0] = v17[44].f64[1];
      v570 = *(float64x2_t *)((char *)v17 + 696);
      _Q18 = v17[51];
      _Q19.f64[0] = v17[59].f64[1];
      v572 = *(float64x2_t *)((char *)v17 + 936);
      _Q21 = v777[-12];
      _Q22 = v777[-13];
      _Q25 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v576 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v567, _Q6, _Q22.f64[0]), v570, _Q22, 1), _Q18, _Q21.f64[0]), v572, _Q21, 1);
      __asm
      {
        FMLA            D24, D7, V22.D[1]
        FMLA            D24, D19, V21.D[1]
      }
      v577 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v568, _Q6, _Q4.f64[0]), v570, _Q4, 1), _Q18, _Q25.f64[0]), v572, _Q25, 1);
      __asm
      {
        FMLA            D0, D7, V4.D[1]
        FMLA            D0, D19, V25.D[1]
      }
      _Q4 = v17[66];
      _Q6.f64[0] = v17[74].f64[1];
      v579 = *(float64x2_t *)((char *)v17 + 1176);
      v580 = v17[81];
      _Q18.f64[0] = v17[89].f64[1];
      v581 = *(float64x2_t *)((char *)v17 + 1416);
      _Q20 = v777[-10];
      _Q21 = v777[-11];
      v584 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v576, _Q4, _Q21.f64[0]), v579, _Q21, 1), v580, _Q20.f64[0]), v581, _Q20, 1);
      __asm
      {
        FMLA            D24, D6, V21.D[1]
        FMLA            D24, D18, V20.D[1]
      }
      v585 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v577, _Q4, _Q5.f64[0]), v579, _Q5, 1), v580, _Q3.f64[0]), v581, _Q3, 1);
      __asm
      {
        FMLA            D0, D6, V5.D[1]
        FMLA            D0, D18, V3.D[1]
      }
      v586 = v17[96];
      _Q4.f64[0] = v17[104].f64[1];
      v587 = *(float64x2_t *)((char *)v17 + 1656);
      _Q6.f64[0] = v17[112].f64[0];
      v588 = v17[111];
      v570.f64[0] = v777[-8].f64[0];
      _Q17 = v777[-9];
      _Q18.f64[0] = v777[-1].f64[1];
      _Q19 = *(float64x2_t *)((char *)&v777[-2] + 8);
      __asm
      {
        FMLA            D24, D4, V17.D[1]
        FMLA            D0, D4, V19.D[1]
      }
      v16[37].f64[0] = _Q24.f64[0] + _Q6.f64[0] * v570.f64[0];
      v16[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v584, v586, _Q17.f64[0]), v587, _Q17, 1), v588, v570.f64[0]);
      v16[44].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v16 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v585, v586, _Q19.f64[0]), v587, _Q19, 1), v588, _Q18.f64[0]);
      break;
    case 1:
      for (i = 0; i != 720; i += 120)
      {
        v592 = *(float64x2_t *)(a11 + i + 1800);
        v593 = *(float64x2_t *)(a11 + i + 1816);
        v594 = *(float64x2_t *)(a11 + i + 1832);
        v595 = *(float64x2_t *)(a11 + i + 1848);
        v596 = *(float64x2_t *)(a11 + i + 1864);
        v597 = *(float64x2_t *)(a11 + i + 1880);
        v598 = *(float64x2_t *)(a11 + i + 1896);
        a9.f64[0] = *(float64_t *)(a11 + i + 1912);
        v13.f64[0] = a12[8].f64[0];
        v599 = a12[3];
        v600 = a12[4];
        v601 = a12[5];
        v602 = a12[6];
        v603 = a12[7];
        v813 = vmulq_f64(a9, v13);
        v812 = vmulq_f64(v598, v603);
        v811 = vmulq_f64(v597, v602);
        v809 = vmulq_f64(v595, v600);
        v810 = vmulq_f64(v596, v601);
        v604 = vmulq_f64(v594, v599);
        v605 = a12[1];
        v807 = vmulq_f64(v593, a12[2]);
        v808 = v604;
        v806 = vmulq_f64(v592, v605);
        result = (float64_t *)memcpy(v814, v16, sizeof(v814));
        v606 = (float64x2_t *)((char *)v814 + i);
        v607 = v807;
        *v606 = v806;
        v606[1] = v607;
        v608 = v809;
        v606[2] = v808;
        v606[3] = v608;
        v609 = v811;
        v606[4] = v810;
        v606[5] = v609;
        v606[6] = v812;
        v606[7].f64[0] = v813.f64[0];
        v610 = v814[44];
        v611 = v814[42];
        v16[43] = v814[43];
        v16[44] = v610;
        v612 = v814[40];
        v16[41] = v814[41];
        v16[42] = v611;
        v613 = v814[38];
        v16[39] = v814[39];
        v16[40] = v612;
        v614 = v814[36];
        v16[37] = v814[37];
        v16[38] = v613;
        v615 = v814[34];
        v16[35] = v814[35];
        v16[36] = v614;
        v616 = v814[32];
        v16[33] = v814[33];
        v16[34] = v615;
        v617 = v814[30];
        v16[31] = v814[31];
        v16[32] = v616;
        v618 = v814[28];
        v16[29] = v814[29];
        v16[30] = v617;
        v619 = v814[26];
        v16[27] = v814[27];
        v16[28] = v618;
        v620 = v814[24];
        v16[25] = v814[25];
        v16[26] = v619;
        v621 = v814[22];
        v16[23] = v814[23];
        v16[24] = v620;
        v622 = v814[20];
        v16[21] = v814[21];
        v16[22] = v621;
        v623 = v814[18];
        v16[19] = v814[19];
        v16[20] = v622;
        v624 = v814[16];
        v16[17] = v814[17];
        v16[18] = v623;
        v625 = v814[14];
        v16[15] = v814[15];
        v16[16] = v624;
        v626 = v814[12];
        v16[13] = v814[13];
        v16[14] = v625;
        v627 = v814[10];
        v16[11] = v814[11];
        v16[12] = v626;
        v628 = v814[8];
        v16[9] = v814[9];
        v16[10] = v627;
        v629 = v814[6];
        v16[7] = v814[7];
        v16[8] = v628;
        v630 = v814[4];
        v16[5] = v814[5];
        v16[6] = v629;
        v631 = v814[2];
        v16[3] = v814[3];
        v16[4] = v630;
        v632 = v814[0];
        v16[1] = v814[1];
        v16[2] = v631;
        *v16 = v632;
      }
      break;
    case 2:
      v633 = a12[1].f64[0];
      v635 = *(float64x2_t *)(a11 + 2264);
      v634 = *(float64x2_t *)(a11 + 2280);
      v637 = *(float64x2_t *)(a11 + 2232);
      v636 = *(float64x2_t *)(a11 + 2248);
      v639 = *(float64x2_t *)(a11 + 2200);
      v638 = *(float64x2_t *)(a11 + 2216);
      v641 = *(float64x2_t *)(a11 + 2168);
      v640 = *(float64x2_t *)(a11 + 2184);
      v643 = *(float64x2_t *)(a11 + 2136);
      v642 = *(float64x2_t *)(a11 + 2152);
      v645 = *(float64x2_t *)(a11 + 2104);
      v644 = *(float64x2_t *)(a11 + 2120);
      v647 = *(float64x2_t *)(a11 + 2072);
      v646 = *(float64x2_t *)(a11 + 2088);
      v649 = *(float64x2_t *)(a11 + 2040);
      v648 = *(float64x2_t *)(a11 + 2056);
      v651 = *(float64x2_t *)(a11 + 2008);
      v650 = *(float64x2_t *)(a11 + 2024);
      v652 = *(float64x2_t *)(a11 + 1976);
      v653 = *(float64x2_t *)(a11 + 1992);
      v654 = *(float64x2_t *)(a11 + 1944);
      v655 = *(float64x2_t *)(a11 + 1960);
      v656 = *(float64x2_t *)(a11 + 1912);
      v657 = *(float64x2_t *)(a11 + 1928);
      v658 = *(float64x2_t *)(a11 + 1880);
      v659 = *(float64x2_t *)(a11 + 1896);
      v660 = *(float64x2_t *)(a11 + 1848);
      v661 = *(float64x2_t *)(a11 + 1864);
      v662 = *(float64x2_t *)(a11 + 1816);
      v663 = *(float64x2_t *)(a11 + 1832);
      v813 = vmulq_n_f64(*v16, v633);
      v812 = vmulq_n_f64(v662, v633);
      v811 = vmulq_n_f64(v663, v633);
      v809 = vmulq_n_f64(v661, v633);
      v810 = vmulq_n_f64(v660, v633);
      v807 = vmulq_n_f64(v659, v633);
      v808 = vmulq_n_f64(v658, v633);
      v805 = vmulq_n_f64(v657, v633);
      v806 = vmulq_n_f64(v656, v633);
      v803 = vmulq_n_f64(v655, v633);
      v804 = vmulq_n_f64(v654, v633);
      v801 = vmulq_n_f64(v653, v633);
      v802 = vmulq_n_f64(v652, v633);
      v800 = vmulq_n_f64(v651, v633);
      v664 = vmulq_n_f64(*(float64x2_t *)(a11 + 2296), v633);
      v665 = vmulq_n_f64(*(float64x2_t *)(a11 + 2312), v633);
      v666 = vmulq_n_f64(*(float64x2_t *)(a11 + 2328), v633);
      v667 = vmulq_n_f64(*(float64x2_t *)(a11 + 2344), v633);
      v668 = vmulq_n_f64(*(float64x2_t *)(a11 + 2360), v633);
      v669 = vmulq_n_f64(*(float64x2_t *)(a11 + 2376), v633);
      v670 = vmulq_n_f64(*(float64x2_t *)(a11 + 2392), v633);
      v671 = vmulq_n_f64(*(float64x2_t *)(a11 + 2408), v633);
      v672 = vmulq_n_f64(*(float64x2_t *)(a11 + 2424), v633);
      v673 = vmulq_n_f64(*(float64x2_t *)(a11 + 2440), v633);
      v674 = vmulq_n_f64(*(float64x2_t *)(a11 + 2456), v633);
      v675 = vmulq_n_f64(*(float64x2_t *)(a11 + 2472), v633);
      v676 = *(float64x2_t *)(a11 + 2504);
      *(float64x2_t *)(a11 + 2488) = vmulq_n_f64(*(float64x2_t *)(a11 + 2488), v633);
      *(float64x2_t *)(a11 + 2504) = vmulq_n_f64(v676, v633);
      *(float64x2_t *)(a11 + 2456) = v674;
      *(float64x2_t *)(a11 + 2472) = v675;
      *(float64x2_t *)(a11 + 2424) = v672;
      *(float64x2_t *)(a11 + 2440) = v673;
      *(float64x2_t *)(a11 + 2392) = v670;
      *(float64x2_t *)(a11 + 2408) = v671;
      *(float64x2_t *)(a11 + 2360) = v668;
      *(float64x2_t *)(a11 + 2376) = v669;
      *(float64x2_t *)(a11 + 2328) = v666;
      *(float64x2_t *)(a11 + 2344) = v667;
      *(float64x2_t *)(a11 + 2296) = v664;
      *(float64x2_t *)(a11 + 2312) = v665;
      *(float64x2_t *)(a11 + 2264) = vmulq_n_f64(v635, v633);
      *(float64x2_t *)(a11 + 2280) = vmulq_n_f64(v634, v633);
      *(float64x2_t *)(a11 + 2232) = vmulq_n_f64(v637, v633);
      *(float64x2_t *)(a11 + 2248) = vmulq_n_f64(v636, v633);
      *(float64x2_t *)(a11 + 2200) = vmulq_n_f64(v639, v633);
      *(float64x2_t *)(a11 + 2216) = vmulq_n_f64(v638, v633);
      *(float64x2_t *)(a11 + 2168) = vmulq_n_f64(v641, v633);
      *(float64x2_t *)(a11 + 2184) = vmulq_n_f64(v640, v633);
      *(float64x2_t *)(a11 + 2136) = vmulq_n_f64(v643, v633);
      *(float64x2_t *)(a11 + 2152) = vmulq_n_f64(v642, v633);
      *(float64x2_t *)(a11 + 2104) = vmulq_n_f64(v645, v633);
      *(float64x2_t *)(a11 + 2120) = vmulq_n_f64(v644, v633);
      *(float64x2_t *)(a11 + 2072) = vmulq_n_f64(v647, v633);
      *(float64x2_t *)(a11 + 2088) = vmulq_n_f64(v646, v633);
      *(float64x2_t *)(a11 + 2040) = vmulq_n_f64(v649, v633);
      *(float64x2_t *)(a11 + 2056) = vmulq_n_f64(v648, v633);
      *(float64x2_t *)(a11 + 2008) = v800;
      *(float64x2_t *)(a11 + 2024) = vmulq_n_f64(v650, v633);
      *(float64x2_t *)(a11 + 1992) = v801;
      *(float64x2_t *)(a11 + 1976) = v802;
      *(float64x2_t *)(a11 + 1960) = v803;
      *(float64x2_t *)(a11 + 1944) = v804;
      *(float64x2_t *)(a11 + 1928) = v805;
      *(float64x2_t *)(a11 + 1912) = v806;
      *(float64x2_t *)(a11 + 1896) = v807;
      *(float64x2_t *)(a11 + 1880) = v808;
      *(float64x2_t *)(a11 + 1864) = v809;
      *(float64x2_t *)(a11 + 1848) = v810;
      *(float64x2_t *)(a11 + 1832) = v811;
      *(float64x2_t *)(a11 + 1816) = v812;
      *v16 = v813;
      break;
    case 4:
      v677 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&a12->f64[0] + 56))(v814, a12);
      MEMORY[0x24BDAC7A8](v677);
      memcpy(&v777[68], v16, 0x2D0uLL);
      v804 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[8] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[16], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[31],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v816,
                               v777[78].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v831,
                           v777[79].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v846,
                       v777[80].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v861,
                   v777[81].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v876,
               v777[82].f64[1]);
      v805 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[7] + 8), v777[68], 1), v814[15], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     v777[69],
                                     1),
                                   v814[30],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 v777[70],
                                 1),
                               v815,
                               v777[71].f64[0]),
                             v822,
                             v777[71],
                             1),
                           v830,
                           v777[72].f64[0]),
                         v837,
                         v777[72],
                         1),
                       v845,
                       v777[73].f64[0]),
                     v852,
                     v777[73],
                     1),
                   v860,
                   v777[74].f64[0]),
                 v867,
                 v777[74],
                 1),
               v875,
               v777[75].f64[0]);
      v806 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[7] + 8), v777[83], 1), v814[15], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     v777[84],
                                     1),
                                   v814[30],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 v777[85],
                                 1),
                               v815,
                               v777[86].f64[0]),
                             v822,
                             v777[86],
                             1),
                           v830,
                           v777[87].f64[0]),
                         v837,
                         v777[87],
                         1),
                       v845,
                       v777[88].f64[0]),
                     v852,
                     v777[88],
                     1),
                   v860,
                   v777[89].f64[0]),
                 v867,
                 v777[89],
                 1),
               v875,
               v777[90].f64[0]);
      v807 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[7] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[15], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[30],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v815,
                               v777[78].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v830,
                           v777[79].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v845,
                       v777[80].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v860,
                   v777[81].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v875,
               v777[82].f64[1]);
      v802 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[8] + 8), v777[68], 1), v814[16], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     v777[69],
                                     1),
                                   v814[31],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 v777[70],
                                 1),
                               v816,
                               v777[71].f64[0]),
                             v823,
                             v777[71],
                             1),
                           v831,
                           v777[72].f64[0]),
                         v838,
                         v777[72],
                         1),
                       v846,
                       v777[73].f64[0]),
                     v853,
                     v777[73],
                     1),
                   v861,
                   v777[74].f64[0]),
                 v868,
                 v777[74],
                 1),
               v876,
               v777[75].f64[0]);
      v803 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[8] + 8), v777[83], 1), v814[16], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     v777[84],
                                     1),
                                   v814[31],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 v777[85],
                                 1),
                               v816,
                               v777[86].f64[0]),
                             v823,
                             v777[86],
                             1),
                           v831,
                           v777[87].f64[0]),
                         v838,
                         v777[87],
                         1),
                       v846,
                       v777[88].f64[0]),
                     v853,
                     v777[88],
                     1),
                   v861,
                   v777[89].f64[0]),
                 v868,
                 v777[89],
                 1),
               v876,
               v777[90].f64[0]);
      v800 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[8] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[16], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[31],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v816,
                               v777[93].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v831,
                           v777[94].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v846,
                       v777[95].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v861,
                   v777[96].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v876,
               v777[97].f64[1]);
      v801 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[7] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[15], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[30],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v815,
                               v777[93].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v830,
                           v777[94].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v845,
                       v777[95].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v860,
                   v777[96].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v875,
               v777[97].f64[1]);
      v792 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[9] + 8), v777[68], 1), v814[17], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     v777[69],
                                     1),
                                   v814[32],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 v777[70],
                                 1),
                               v817,
                               v777[71].f64[0]),
                             v824,
                             v777[71],
                             1),
                           v832,
                           v777[72].f64[0]),
                         v839,
                         v777[72],
                         1),
                       v847,
                       v777[73].f64[0]),
                     v854,
                     v777[73],
                     1),
                   v862,
                   v777[74].f64[0]),
                 v869,
                 v777[74],
                 1),
               v877,
               v777[75].f64[0]);
      v678 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[10] + 8), v777[68], 1), v814[18], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     v777[69],
                                     1),
                                   v814[33],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 v777[70],
                                 1),
                               v818,
                               v777[71].f64[0]),
                             v825,
                             v777[71],
                             1),
                           v833,
                           v777[72].f64[0]),
                         v840,
                         v777[72],
                         1),
                       v848,
                       v777[73].f64[0]),
                     v855,
                     v777[73],
                     1),
                   v863,
                   v777[74].f64[0]),
                 v870,
                 v777[74],
                 1),
               v878,
               v777[75].f64[0]);
      v679 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[9] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[17], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[32],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v817,
                               v777[78].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v832,
                           v777[79].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v847,
                       v777[80].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v862,
                   v777[81].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v877,
               v777[82].f64[1]);
      v680 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[10] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[18], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[33],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v818,
                               v777[78].f64[1]),
                             v825,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v833,
                           v777[79].f64[1]),
                         v840,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v848,
                       v777[80].f64[1]),
                     v855,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v863,
                   v777[81].f64[1]),
                 v870,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v878,
               v777[82].f64[1]);
      v681 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[9] + 8), v777[83], 1), v814[17], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     v777[84],
                                     1),
                                   v814[32],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 v777[85],
                                 1),
                               v817,
                               v777[86].f64[0]),
                             v824,
                             v777[86],
                             1),
                           v832,
                           v777[87].f64[0]),
                         v839,
                         v777[87],
                         1),
                       v847,
                       v777[88].f64[0]),
                     v854,
                     v777[88],
                     1),
                   v862,
                   v777[89].f64[0]),
                 v869,
                 v777[89],
                 1),
               v877,
               v777[90].f64[0]);
      v682 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[10] + 8), v777[83], 1), v814[18], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     v777[84],
                                     1),
                                   v814[33],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 v777[85],
                                 1),
                               v818,
                               v777[86].f64[0]),
                             v825,
                             v777[86],
                             1),
                           v833,
                           v777[87].f64[0]),
                         v840,
                         v777[87],
                         1),
                       v848,
                       v777[88].f64[0]),
                     v855,
                     v777[88],
                     1),
                   v863,
                   v777[89].f64[0]),
                 v870,
                 v777[89],
                 1),
               v878,
               v777[90].f64[0]);
      v683 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[9] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[17], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[32],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v817,
                               v777[93].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v832,
                           v777[94].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v847,
                       v777[95].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v862,
                   v777[96].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v877,
               v777[97].f64[1]);
      v684 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[10] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[18], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[33],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v818,
                               v777[93].f64[1]),
                             v825,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v833,
                           v777[94].f64[1]),
                         v840,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v848,
                       v777[95].f64[1]),
                     v855,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v863,
                   v777[96].f64[1]),
                 v870,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v878,
               v777[97].f64[1]);
      v790 = v814[5];
      v791 = v814[4];
      v789 = v814[19];
      result = &v814[41].f64[1];
      v787 = v814[34];
      v788 = v814[35];
      v786 = *(float64x2_t *)((char *)&v814[41] + 8);
      v784 = v826;
      v785 = v819;
      v783 = v841;
      v781 = v856;
      v782 = v849;
      v780 = v871;
      v685 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[11] + 8), v777[68], 1), v814[19], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     v777[69],
                                     1),
                                   v814[34],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 v777[70],
                                 1),
                               v819,
                               v777[71].f64[0]),
                             v826,
                             v777[71],
                             1),
                           v834,
                           v777[72].f64[0]),
                         v841,
                         v777[72],
                         1),
                       v849,
                       v777[73].f64[0]),
                     v856,
                     v777[73],
                     1),
                   v864,
                   v777[74].f64[0]),
                 v871,
                 v777[74],
                 1),
               v879,
               v777[75].f64[0]);
      v686 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[12] + 8), v777[68], 1), v814[20], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     v777[69],
                                     1),
                                   v814[35],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 v777[70],
                                 1),
                               v820,
                               v777[71].f64[0]),
                             v827,
                             v777[71],
                             1),
                           v835,
                           v777[72].f64[0]),
                         v842,
                         v777[72],
                         1),
                       v850,
                       v777[73].f64[0]),
                     v857,
                     v777[73],
                     1),
                   v865,
                   v777[74].f64[0]),
                 v872,
                 v777[74],
                 1),
               v880,
               v777[75].f64[0]);
      v687 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[11] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[19], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[34],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v819,
                               v777[78].f64[1]),
                             v826,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v834,
                           v777[79].f64[1]),
                         v841,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v849,
                       v777[80].f64[1]),
                     v856,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v864,
                   v777[81].f64[1]),
                 v871,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v879,
               v777[82].f64[1]);
      v688 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[12] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[20], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[35],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v820,
                               v777[78].f64[1]),
                             v827,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v835,
                           v777[79].f64[1]),
                         v842,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v850,
                       v777[80].f64[1]),
                     v857,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v865,
                   v777[81].f64[1]),
                 v872,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v880,
               v777[82].f64[1]);
      v689 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[11] + 8), v777[83], 1), v814[19], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     v777[84],
                                     1),
                                   v814[34],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 v777[85],
                                 1),
                               v819,
                               v777[86].f64[0]),
                             v826,
                             v777[86],
                             1),
                           v834,
                           v777[87].f64[0]),
                         v841,
                         v777[87],
                         1),
                       v849,
                       v777[88].f64[0]),
                     v856,
                     v777[88],
                     1),
                   v864,
                   v777[89].f64[0]),
                 v871,
                 v777[89],
                 1),
               v879,
               v777[90].f64[0]);
      v690 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[12] + 8), v777[83], 1), v814[20], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     v777[84],
                                     1),
                                   v814[35],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 v777[85],
                                 1),
                               v820,
                               v777[86].f64[0]),
                             v827,
                             v777[86],
                             1),
                           v835,
                           v777[87].f64[0]),
                         v842,
                         v777[87],
                         1),
                       v850,
                       v777[88].f64[0]),
                     v857,
                     v777[88],
                     1),
                   v865,
                   v777[89].f64[0]),
                 v872,
                 v777[89],
                 1),
               v880,
               v777[90].f64[0]);
      v691 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[11] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[19], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[34],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v819,
                               v777[93].f64[1]),
                             v826,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v834,
                           v777[94].f64[1]),
                         v841,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v849,
                       v777[95].f64[1]),
                     v856,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v864,
                   v777[96].f64[1]),
                 v871,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v879,
               v777[97].f64[1]);
      v692 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[12] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[20], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[35],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v820,
                               v777[93].f64[1]),
                             v827,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v835,
                           v777[94].f64[1]),
                         v842,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v850,
                       v777[95].f64[1]),
                     v857,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v865,
                   v777[96].f64[1]),
                 v872,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v880,
               v777[97].f64[1]);
      v779 = v814[6];
      _V4.D[1] = v777[83].f64[1];
      _V1.D[1] = v777[68].f64[1];
      _D5 = v814[14].f64[1];
      v778 = v814[14].f64[1];
      __asm { FMLA            D2, D5, V1.D[1] }
      _V1.D[1] = v777[76].f64[0];
      __asm
      {
        FMLA            D3, D5, V1.D[1]
        FMLA            D1, D5, V4.D[1]
      }
      _V4.D[1] = v777[91].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      v799 = v814[20];
      _V4.D[1] = v777[69].f64[1];
      _D5 = v814[29].f64[1];
      __asm { FMLA            D2, D5, V4.D[1] }
      _V4.D[1] = v777[77].f64[0];
      __asm { FMLA            D3, D5, V4.D[1] }
      _V4.D[1] = v777[84].f64[1];
      __asm { FMLA            D1, D5, V4.D[1] }
      _V4.D[1] = v777[92].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      _V18.D[1] = v777[70].f64[1];
      _D7 = v814[44].f64[1];
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[78].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[85].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[93].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v798 = v820;
      _V18.D[1] = v777[71].f64[1];
      _D7 = v829;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[79].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[86].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[94].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V18.D[1] = v777[72].f64[1];
      _D7 = v844;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[80].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[87].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[95].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v797 = v850;
      _V18.D[1] = v777[73].f64[1];
      _D7 = v859;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[81].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[88].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[96].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V5.D[1] = v777[74].f64[1];
      _D18 = v874;
      __asm { FMLA            D2, D18, V5.D[1] }
      _V5.D[1] = v777[82].f64[0];
      __asm { FMLA            D3, D18, V5.D[1] }
      _V5.D[1] = v777[89].f64[1];
      __asm { FMLA            D1, D18, V5.D[1] }
      _V5.D[1] = v777[97].f64[0];
      __asm { FMLA            D0, D18, V5.D[1] }
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v777[68], 1), v814[21], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     v777[69],
                                     1),
                                   v814[36],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 v777[70],
                                 1),
                               v821,
                               v777[71].f64[0]),
                             v828,
                             v777[71],
                             1),
                           v836,
                           v777[72].f64[0]),
                         v843,
                         v777[72],
                         1),
                       v851,
                       v777[73].f64[0]),
                     v858,
                     v777[73],
                     1),
                   v866,
                   v777[74].f64[0]),
                 v873,
                 v777[74],
                 1),
               v881,
               v777[75].f64[0]);
      v796 = _D2 + v882 * v777[75].f64[0];
      _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[13] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[21], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[36],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v821,
                               v777[78].f64[1]),
                             v828,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v836,
                           v777[79].f64[1]),
                         v843,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v851,
                       v777[80].f64[1]),
                     v858,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v866,
                   v777[81].f64[1]),
                 v873,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v881,
               v777[82].f64[1]);
      v795 = _D3 + v882 * v777[82].f64[1];
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v777[83], 1), v814[21], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     v777[84],
                                     1),
                                   v814[36],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 v777[85],
                                 1),
                               v821,
                               v777[86].f64[0]),
                             v828,
                             v777[86],
                             1),
                           v836,
                           v777[87].f64[0]),
                         v843,
                         v777[87],
                         1),
                       v851,
                       v777[88].f64[0]),
                     v858,
                     v777[88],
                     1),
                   v866,
                   v777[89].f64[0]),
                 v873,
                 v777[89],
                 1),
               v881,
               v777[90].f64[0]);
      v794 = _D1 + v882 * v777[90].f64[0];
      v759 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[13] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[21], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[36],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v821,
                               v777[93].f64[1]),
                             v828,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v836,
                           v777[94].f64[1]),
                         v843,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v851,
                       v777[95].f64[1]),
                     v858,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v866,
                   v777[96].f64[1]),
                 v873,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v881,
               v777[97].f64[1]);
      v793 = _D0 + v882 * v777[97].f64[1];
      v812 = *(float64x2_t *)((char *)&v777[105] + 8);
      v813 = *(float64x2_t *)((char *)&v777[107] + 8);
      v811 = *(float64x2_t *)((char *)&v777[109] + 8);
      v810 = *(float64x2_t *)((char *)&v777[110] + 8);
      _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[7] + 8), v777[98], 1), v814[15], v777[99].f64[0]),
                                    *(float64x2_t *)((char *)&v814[22] + 8),
                                    v777[99],
                                    1),
                                  v814[30],
                                  v777[100].f64[0]),
                                *(float64x2_t *)((char *)&v814[37] + 8),
                                v777[100],
                                1),
                              v815,
                              v777[101].f64[0]),
                            v822,
                            v777[101],
                            1),
                          v830,
                          v777[102].f64[0]),
                        v837,
                        v777[102],
                        1),
                      v845,
                      v777[103].f64[0]),
                    v852,
                    v777[103],
                    1),
                  v860,
                  v777[104].f64[0]),
                v867,
                v777[104],
                1),
              v875,
              v777[105].f64[0]);
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[8] + 8), v777[98], 1), v814[16], v777[99].f64[0]),
                                    *(float64x2_t *)((char *)&v814[23] + 8),
                                    v777[99],
                                    1),
                                  v814[31],
                                  v777[100].f64[0]),
                                *(float64x2_t *)((char *)&v814[38] + 8),
                                v777[100],
                                1),
                              v816,
                              v777[101].f64[0]),
                            v823,
                            v777[101],
                            1),
                          v831,
                          v777[102].f64[0]),
                        v838,
                        v777[102],
                        1),
                      v846,
                      v777[103].f64[0]),
                    v853,
                    v777[103],
                    1),
                  v861,
                  v777[104].f64[0]),
                v868,
                v777[104],
                1),
              v876,
              v777[105].f64[0]);
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[7] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[15], v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[22] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v814[30],
                                  v777[107].f64[1]),
                                *(float64x2_t *)((char *)&v814[37] + 8),
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v815,
                              v777[108].f64[1]),
                            v822,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v830,
                          v777[109].f64[1]),
                        v837,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v845,
                      v777[110].f64[1]),
                    v852,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v860,
                  v777[111].f64[1]),
                v867,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v875,
              v777[112].f64[1]);
      v763 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[8] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[16], v777[106].f64[1]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     *(float64x2_t *)((char *)&v777[106] + 8),
                                     1),
                                   v814[31],
                                   v777[107].f64[1]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 *(float64x2_t *)((char *)&v777[107] + 8),
                                 1),
                               v816,
                               v777[108].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v777[108] + 8),
                             1),
                           v831,
                           v777[109].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v777[109] + 8),
                         1),
                       v846,
                       v777[110].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v777[110] + 8),
                     1),
                   v861,
                   v777[111].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v777[111] + 8),
                 1),
               v876,
               v777[112].f64[1]);
      v764 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[9] + 8), v777[98], 1), v814[17], v777[99].f64[0]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     v777[99],
                                     1),
                                   v814[32],
                                   v777[100].f64[0]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 v777[100],
                                 1),
                               v817,
                               v777[101].f64[0]),
                             v824,
                             v777[101],
                             1),
                           v832,
                           v777[102].f64[0]),
                         v839,
                         v777[102],
                         1),
                       v847,
                       v777[103].f64[0]),
                     v854,
                     v777[103],
                     1),
                   v862,
                   v777[104].f64[0]),
                 v869,
                 v777[104],
                 1),
               v877,
               v777[105].f64[0]);
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[10] + 8), v777[98], 1), v814[18], v777[99].f64[0]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     v777[99],
                                     1),
                                   v814[33],
                                   v777[100].f64[0]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 v777[100],
                                 1),
                               v818,
                               v777[101].f64[0]),
                             v825,
                             v777[101],
                             1),
                           v833,
                           v777[102].f64[0]),
                         v840,
                         v777[102],
                         1),
                       v848,
                       v777[103].f64[0]),
                     v855,
                     v777[103],
                     1),
                   v863,
                   v777[104].f64[0]),
                 v870,
                 v777[104],
                 1),
               v878,
               v777[105].f64[0]);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[9] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[17], v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[24] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v814[32],
                                  v777[107].f64[1]),
                                *(float64x2_t *)((char *)&v814[39] + 8),
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v817,
                              v777[108].f64[1]),
                            v824,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v832,
                          v777[109].f64[1]),
                        v839,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v847,
                      v777[110].f64[1]),
                    v854,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v862,
                  v777[111].f64[1]),
                v869,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v877,
              v777[112].f64[1]);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[10] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[18], v777[106].f64[1]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     *(float64x2_t *)((char *)&v777[106] + 8),
                                     1),
                                   v814[33],
                                   v777[107].f64[1]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 *(float64x2_t *)((char *)&v777[107] + 8),
                                 1),
                               v818,
                               v777[108].f64[1]),
                             v825,
                             *(float64x2_t *)((char *)&v777[108] + 8),
                             1),
                           v833,
                           v777[109].f64[1]),
                         v840,
                         *(float64x2_t *)((char *)&v777[109] + 8),
                         1),
                       v848,
                       v777[110].f64[1]),
                     v855,
                     *(float64x2_t *)((char *)&v777[110] + 8),
                     1),
                   v863,
                   v777[111].f64[1]),
                 v870,
                 *(float64x2_t *)((char *)&v777[111] + 8),
                 1),
               v878,
               v777[112].f64[1]);
      v768 = v802;
      *v16 = v805;
      v16[1] = v768;
      v769 = v803;
      *(float64x2_t *)(a11 + 1936) = v804;
      *(float64x2_t *)(a11 + 1920) = v807;
      v16[15] = v806;
      v16[16] = v769;
      v770 = v800;
      *(float64x2_t *)((char *)v16 + 360) = v801;
      *(float64x2_t *)((char *)v16 + 376) = v770;
      v16[2] = v792;
      v16[3] = v678;
      *(float64x2_t *)(a11 + 1968) = v680;
      *(float64x2_t *)(a11 + 1952) = v679;
      v16[17] = v681;
      v16[18] = v682;
      *(float64x2_t *)((char *)v16 + 392) = v683;
      *(float64x2_t *)((char *)v16 + 408) = v684;
      v16[4] = v685;
      v16[5] = v686;
      *(float64x2_t *)(a11 + 2000) = v688;
      *(float64x2_t *)(a11 + 1984) = v687;
      v16[19] = v689;
      v16[20] = v690;
      *(float64x2_t *)((char *)v16 + 424) = v691;
      *(float64x2_t *)((char *)v16 + 440) = v692;
      v16[6] = _Q20;
      v16[7].f64[0] = v796;
      *(float64x2_t *)((char *)v16 + 216) = _Q19;
      v16[14].f64[1] = v795;
      v16[21] = _Q17;
      v16[22].f64[0] = v794;
      *(float64x2_t *)((char *)v16 + 456) = v759;
      v16[29].f64[1] = v793;
      v16[30] = _Q7;
      v16[31] = _Q3;
      *(float64x2_t *)(a11 + 2416) = v763;
      *(float64x2_t *)(a11 + 2400) = _Q2;
      v16[32] = v764;
      v16[33] = _Q18;
      *(float64x2_t *)(a11 + 2448) = _Q21;
      *(float64x2_t *)(a11 + 2432) = _Q0;
      v771 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v790, v777[98].f64[0]), *(float64x2_t *)((char *)&v814[12] + 8), v777[98], 1), v799, v777[99].f64[0]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     v777[99],
                                     1),
                                   v788,
                                   v777[100].f64[0]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 v777[100],
                                 1),
                               v798,
                               v777[101].f64[0]),
                             v827,
                             v777[101],
                             1),
                           v835,
                           v777[102].f64[0]),
                         v842,
                         v777[102],
                         1),
                       v797,
                       v777[103].f64[0]),
                     v857,
                     v777[103],
                     1),
                   v865,
                   v777[104].f64[0]),
                 v872,
                 v777[104],
                 1),
               v880,
               v777[105].f64[0]);
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v791, v777[105].f64[1]), *(float64x2_t *)((char *)&v814[11] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v789, v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[26] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v787,
                                  v777[107].f64[1]),
                                v786,
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v785,
                              v777[108].f64[1]),
                            v784,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v834,
                          v777[109].f64[1]),
                        v783,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v782,
                      v777[110].f64[1]),
                    v781,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v864,
                  v777[111].f64[1]),
                v780,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v879,
              v777[112].f64[1]);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v790, v777[105].f64[1]), *(float64x2_t *)((char *)&v814[12] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v799, v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[27] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v788,
                                  v777[107].f64[1]),
                                *(float64x2_t *)((char *)&v814[42] + 8),
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v798,
                              v777[108].f64[1]),
                            v827,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v835,
                          v777[109].f64[1]),
                        v842,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v797,
                      v777[110].f64[1]),
                    v857,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v865,
                  v777[111].f64[1]),
                v872,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v880,
              v777[112].f64[1]);
      v16[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v791, v777[98].f64[0]), *(float64x2_t *)((char *)&v814[11] + 8), v777[98], 1), v789, v777[99].f64[0]),
                                        *(float64x2_t *)((char *)&v814[26] + 8),
                                        v777[99],
                                        1),
                                      v787,
                                      v777[100].f64[0]),
                                    v786,
                                    v777[100],
                                    1),
                                  v785,
                                  v777[101].f64[0]),
                                v784,
                                v777[101],
                                1),
                              v834,
                              v777[102].f64[0]),
                            v783,
                            v777[102],
                            1),
                          v782,
                          v777[103].f64[0]),
                        v781,
                        v777[103],
                        1),
                      v864,
                      v777[104].f64[0]),
                    v780,
                    v777[104],
                    1),
                  v879,
                  v777[105].f64[0]);
      v16[35] = v771;
      *(float64x2_t *)(a11 + 2480) = _Q6;
      *(float64x2_t *)(a11 + 2464) = _Q5;
      _Q3.f64[0] = v814[29].f64[1];
      _Q5.f64[1] = v777[99].f64[1];
      _Q6.f64[1] = v777[98].f64[1];
      _Q7.f64[1] = v777[107].f64[0];
      _Q20.f64[0] = v778;
      __asm
      {
        FMLA            D17, D20, V6.D[1]
        FMLA            D17, D3, V5.D[1]
      }
      _Q6.f64[1] = v812.f64[1];
      __asm
      {
        FMLA            D0, D20, V6.D[1]
        FMLA            D0, D3, V7.D[1]
      }
      _Q3.f64[0] = v814[44].f64[1];
      _Q18.f64[0] = v829;
      _Q20.f64[1] = v777[101].f64[1];
      _Q21.f64[1] = v777[100].f64[1];
      _V22.D[1] = v777[109].f64[0];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v813.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V22.D[1]
      }
      _Q3.f64[0] = v844;
      _Q18.f64[0] = v859;
      _Q20.f64[1] = v777[103].f64[1];
      _Q21.f64[1] = v777[102].f64[1];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v811.f64[1];
      _Q2.f64[1] = v810.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V2.D[1]
      }
      _Q3.f64[0] = v874;
      _Q6.f64[0] = v882;
      v775 = v881;
      _Q18.f64[0] = v777[105].f64[0];
      _Q19.f64[1] = v777[104].f64[1];
      _Q20.f64[0] = v777[112].f64[1];
      _Q21.f64[1] = v777[112].f64[0];
      __asm { FMLA            D17, D3, V19.D[1] }
      v776 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v779, v812.f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v812, 1), v814[21], v777[106].f64[1]), *(float64x2_t *)((char *)&v814[28] + 8),
                                   *(float64x2_t *)((char *)&v777[106] + 8),
                                   1),
                                 v814[36],
                                 v813.f64[0]),
                               *(float64x2_t *)((char *)&v814[43] + 8),
                               v813,
                               1),
                             v821,
                             v777[108].f64[1]),
                           v828,
                           *(float64x2_t *)((char *)&v777[108] + 8),
                           1),
                         v836,
                         v811.f64[0]),
                       v843,
                       v811,
                       1),
                     v851,
                     v810.f64[0]),
                   v858,
                   v810,
                   1),
                 v866,
                 v777[111].f64[1]),
               v873,
               *(float64x2_t *)((char *)&v777[111] + 8),
               1);
      v16[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v779, v777[98].f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v777[98], 1), v814[21], v777[99].f64[0]),
                                        *(float64x2_t *)((char *)&v814[28] + 8),
                                        v777[99],
                                        1),
                                      v814[36],
                                      v777[100].f64[0]),
                                    *(float64x2_t *)((char *)&v814[43] + 8),
                                    v777[100],
                                    1),
                                  v821,
                                  v777[101].f64[0]),
                                v828,
                                v777[101],
                                1),
                              v836,
                              v777[102].f64[0]),
                            v843,
                            v777[102],
                            1),
                          v851,
                          v777[103].f64[0]),
                        v858,
                        v777[103],
                        1),
                      v866,
                      v777[104].f64[0]),
                    v873,
                    v777[104],
                    1),
                  v881,
                  v777[105].f64[0]);
      v16[37].f64[0] = _Q17.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v16 + 696) = vmlaq_n_f64(v776, v775, _Q20.f64[0]);
      __asm { FMLA            D0, D3, V21.D[1] }
      v16[44].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q20.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_20F572AE8(_BYTE *result, float64x2_t a2, float64x2_t a3, double a4, double a5, double a6, float64x2_t a7, float64x2_t a8, uint64_t a9, float64x2_t *a10, float64x2_t *a11, int a12)
{
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v272;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v292;
  float64x2_t v294;
  float64x2_t v299;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v386;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v638;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v660;
  float64x2_t v662;
  float64x2_t v665;
  float64x2_t v667;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t *v676;
  float64x2_t *v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t *v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t *v686;
  float64x2_t v687;
  float64x2_t v689;
  float64x2_t v691;
  float64x2_t *v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v697;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v727;
  float64x2_t v733;
  unint64_t i;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t *v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  _QWORD *v862;
  float64x2_t v928;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v934;
  float64x2_t v936;
  float64x2_t v938;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1052;
  float64x2_t v1056[137];
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  double v1060;
  double v1061;
  double v1062;
  float64x2_t v1063;
  double v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  _BYTE v1132[1080];
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64_t v1178;
  uint64_t v1179;
  float64_t *v1180;

  v1179 = *MEMORY[0x24BDAC8D0];
  v14 = a10 + 45;
  switch(a12)
  {
    case 0:
      v15 = a11 + 1;
      if ((float64x2_t *)&a10[112].f64[1] > &a11[1] && (float64x2_t *)&a11[113].f64[1] > v14)
      {
        MEMORY[0x24BDAC7A8](result);
        result = memcpy(v1056, v15, 0x708uLL);
        v15 = v1056;
      }
      MEMORY[0x24BDAC7A8](result);
      v16 = &v1056[-68];
      memcpy(&v1056[-68], v14, 0x438uLL);
      v17 = v15[1];
      v18 = *(float64x2_t *)((char *)v15 + 136);
      v19 = *(float64x2_t *)((char *)v15 + 120);
      v21 = v15[15];
      v20 = v15[16];
      v22 = *(float64x2_t *)((char *)v15 + 376);
      v23 = *(float64x2_t *)((char *)v15 + 360);
      v24 = v1056[-67];
      v25 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v26 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v27 = v1056[-53];
      v28 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v29 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      _Q24 = v1056[-68];
      v31 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v16->f64[0]), v19, *v16, 1), v21, v24.f64[0]), v23, v24, 1);
      v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v16->f64[0]), v18, *v16, 1), v20, v24.f64[0]), v22, v24, 1);
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v26.f64[0]), v19, v26, 1), v21, v25.f64[0]), v23, v25, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v26.f64[0]), v18, v26, 1), v20, v25.f64[0]), v22, v25, 1);
      _Q20 = v27;
      v36 = v1056[-52];
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v27.f64[0]), v19, v27, 1), v21, v36.f64[0]), v23, v36, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v27.f64[0]), v18, v27, 1), v20, v36.f64[0]), v22, v36, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v29.f64[0]), v19, v29, 1), v21, v28.f64[0]), v23, v28, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v29.f64[0]), v18, v29, 1), v20, v28.f64[0]), v22, v28, 1);
      v42 = v15[30];
      v41 = v15[31];
      v44 = *(float64x2_t *)((char *)v15 + 600);
      v43 = *(float64x2_t *)((char *)v15 + 616);
      v46 = v15[45];
      v45 = v15[46];
      v48 = *(float64x2_t *)((char *)v15 + 840);
      v47 = *(float64x2_t *)((char *)v15 + 856);
      v49 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v50 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v51 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v52 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      _Q1 = v1056[-67];
      v54 = v1056[-66];
      _Q2 = v54;
      v56 = v1056[-65];
      v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v54.f64[0]), v44, v54, 1), v46, v56.f64[0]), v48, v56, 1);
      v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v32, v41, v54.f64[0]), v43, v54, 1), v45, v56.f64[0]), v47, v56, 1);
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v50.f64[0]), v44, v50, 1), v46, v49.f64[0]), v48, v49, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v41, v50.f64[0]), v43, v50, 1), v45, v49.f64[0]), v47, v49, 1);
      _Q4 = v1056[-52];
      v62 = v1056[-51];
      _Q3 = v62;
      v64 = v1056[-50];
      v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, v42, v62.f64[0]), v44, v62, 1), v46, v64.f64[0]), v48, v64, 1);
      v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, v41, v62.f64[0]), v43, v62, 1), v45, v64.f64[0]), v47, v64, 1);
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v42, v52.f64[0]), v44, v52, 1), v46, v51.f64[0]), v48, v51, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v41, v52.f64[0]), v43, v52, 1), v45, v51.f64[0]), v47, v51, 1);
      v70 = v15[60];
      v69 = v15[61];
      v72 = *(float64x2_t *)((char *)v15 + 1080);
      v71 = *(float64x2_t *)((char *)v15 + 1096);
      v73 = v15[76];
      v74 = v15[75];
      v75 = *(float64x2_t *)((char *)v15 + 1320);
      v76 = *(float64x2_t *)((char *)v15 + 1336);
      v77 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v78 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v79 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v80 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q5 = v1056[-65];
      v82 = v1056[-64];
      _Q7 = v82;
      v84 = v1056[-63];
      v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v57, v70, v82.f64[0]), v72, v82, 1), v74, v84.f64[0]), v75, v84, 1);
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, v82.f64[0]), v71, v82, 1), v73, v84.f64[0]), v76, v84, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v70, v78.f64[0]), v72, v78, 1), v74, v77.f64[0]), v75, v77, 1);
      v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v78.f64[0]), v71, v78, 1), v73, v77.f64[0]), v76, v77, 1);
      _Q18 = v1056[-50];
      v89 = v1056[-49];
      _Q6 = v89;
      v92 = v1056[-48];
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, v70, v89.f64[0]), v72, v89, 1), v74, v92.f64[0]), v75, v92, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v69, v89.f64[0]), v71, v89, 1), v73, v92.f64[0]), v76, v92, 1);
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v70, v80.f64[0]), v72, v80, 1), v74, v79.f64[0]), v75, v79, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v69, v80.f64[0]), v71, v80, 1), v73, v79.f64[0]), v76, v79, 1);
      v97 = v15[91];
      v98 = v15[90];
      v100 = *(float64x2_t *)((char *)v15 + 1560);
      v99 = *(float64x2_t *)((char *)v15 + 1576);
      v101 = v15[106];
      v102 = v15[105];
      v69.f64[0] = v1056[-61].f64[0];
      v75.f64[0] = v1056[-54].f64[1];
      v103 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v89.f64[0] = v1056[-46].f64[0];
      v92.f64[0] = v1056[-39].f64[1];
      v104 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      _Q17 = v1056[-63];
      v105 = v1056[-62];
      v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v85, v98, v105.f64[0]), v100, v105, 1), v102, v69.f64[0]);
      v108 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v86, v97, v105.f64[0]), v99, v105, 1), v101, v69.f64[0]);
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v98, v103.f64[0]), v100, v103, 1), v102, v75.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v97, v103.f64[0]), v99, v103, 1), v101, v75.f64[0]);
      _Q16 = v1056[-48];
      v111 = v1056[-47];
      *v14 = v107;
      v14[1] = v108;
      *(float64x2_t *)((char *)v14 + 136) = v110;
      *(float64x2_t *)((char *)v14 + 120) = v109;
      a10[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v98, v111.f64[0]), v100, v111, 1), v102, v89.f64[0]);
      a10[61] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v97, v111.f64[0]), v99, v111, 1), v101, v89.f64[0]);
      *(float64x2_t *)((char *)v14 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v98, v104.f64[0]), v100, v104, 1), v102, v92.f64[0]);
      *(float64x2_t *)((char *)v14 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v97, v104.f64[0]), v99, v104, 1), v101, v92.f64[0]);
      v113 = v15[2];
      v114 = v15[3];
      v115 = *(float64x2_t *)((char *)v15 + 168);
      v116 = *(float64x2_t *)((char *)v15 + 152);
      v118 = v15[17];
      v117 = v15[18];
      v119 = *(float64x2_t *)((char *)v15 + 408);
      v120 = *(float64x2_t *)((char *)v15 + 392);
      v121 = v1056[-67];
      v122 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v123 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v125 = v1056[-53];
      v124 = v1056[-52];
      v126 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v127 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v128 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v16->f64[0]), v116, *v16, 1), v118, v121.f64[0]), v120, v121, 1);
      v129 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v16->f64[0]), v115, *v16, 1), v117, v121.f64[0]), v119, v121, 1);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v123.f64[0]), v116, v123, 1), v118, v122.f64[0]), v120, v122, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v123.f64[0]), v115, v123, 1), v117, v122.f64[0]), v119, v122, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v125.f64[0]), v116, v125, 1), v118, v124.f64[0]), v120, v124, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v125.f64[0]), v115, v125, 1), v117, v124.f64[0]), v119, v124, 1);
      v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v127.f64[0]), v116, v127, 1), v118, v126.f64[0]), v120, v126, 1);
      v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v127.f64[0]), v115, v127, 1), v117, v126.f64[0]), v119, v126, 1);
      v137 = v15[32];
      v136 = v15[33];
      v139 = *(float64x2_t *)((char *)v15 + 632);
      v138 = *(float64x2_t *)((char *)v15 + 648);
      v141 = v15[47];
      v140 = v15[48];
      v143 = *(float64x2_t *)((char *)v15 + 872);
      v142 = *(float64x2_t *)((char *)v15 + 888);
      v145 = v1056[-66];
      v144 = v1056[-65];
      v146 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v147 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v148 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v128, v137, v145.f64[0]), v139, v145, 1), v141, v144.f64[0]), v143, v144, 1);
      v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v129, v136, v145.f64[0]), v138, v145, 1), v140, v144.f64[0]), v142, v144, 1);
      v150 = v1056[-51];
      v151 = v1056[-50];
      v152 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v137, v147.f64[0]), v139, v147, 1);
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v136, v147.f64[0]), v138, v147, 1);
      v154 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v141, v146.f64[0]), v143, v146, 1);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v140, v146.f64[0]), v142, v146, 1);
      v157 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v132, v137, v150.f64[0]), v139, v150, 1), v141, v151.f64[0]), v143, v151, 1);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v133, v136, v150.f64[0]), v138, v150, 1), v140, v151.f64[0]), v142, v151, 1);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v134, v137, v157.f64[0]), v139, v157, 1), v141, v154.f64[0]), v143, v154, 1);
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v135, v136, v157.f64[0]), v138, v157, 1), v140, v154.f64[0]), v142, v154, 1);
      v163 = v15[62];
      v162 = v15[63];
      v165 = *(float64x2_t *)((char *)v15 + 1112);
      v164 = *(float64x2_t *)((char *)v15 + 1128);
      v166 = v15[78];
      v167 = v15[77];
      v169 = *(float64x2_t *)((char *)v15 + 1352);
      v168 = *(float64x2_t *)((char *)v15 + 1368);
      v171 = v1056[-64];
      v170 = v1056[-63];
      v172 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v173 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v174 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v148, v163, v171.f64[0]), v165, v171, 1), v167, v170.f64[0]), v169, v170, 1);
      v175 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v149, v162, v171.f64[0]), v164, v171, 1), v166, v170.f64[0]), v168, v170, 1);
      v176 = v1056[-49];
      v177 = v1056[-48];
      v178 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v163, v173.f64[0]), v165, v173, 1);
      v179 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v162, v173.f64[0]), v164, v173, 1);
      v180 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v178, v167, v172.f64[0]), v169, v172, 1);
      v182 = vmlaq_laneq_f64(vmlaq_n_f64(v179, v166, v172.f64[0]), v168, v172, 1);
      v183 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v158, v163, v176.f64[0]), v165, v176, 1), v167, v177.f64[0]), v169, v177, 1);
      v185 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v159, v162, v176.f64[0]), v164, v176, 1), v166, v177.f64[0]), v168, v177, 1);
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v160, v163, v183.f64[0]), v165, v183, 1), v167, v180.f64[0]), v169, v180, 1);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v161, v162, v183.f64[0]), v164, v183, 1), v166, v180.f64[0]), v168, v180, 1);
      v188 = v15[93];
      v189 = v15[92];
      v191 = *(float64x2_t *)((char *)v15 + 1592);
      v190 = *(float64x2_t *)((char *)v15 + 1608);
      v192 = v15[108];
      v193 = v15[107];
      v168.f64[0] = v1056[-61].f64[0];
      v194 = v1056[-62];
      v176.f64[0] = v1056[-54].f64[1];
      v195 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v183.f64[0] = v1056[-46].f64[0];
      v196 = v1056[-47];
      v197 = vmlaq_laneq_f64(vmlaq_n_f64(v174, v189, v194.f64[0]), v191, v194, 1);
      v198 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v188, v194.f64[0]), v190, v194, 1);
      v194.f64[0] = v1056[-39].f64[1];
      v199 = vmlaq_n_f64(v197, v193, v168.f64[0]);
      v200 = vmlaq_n_f64(v198, v192, v168.f64[0]);
      v201 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v14[2] = v199;
      v14[3] = v200;
      *(float64x2_t *)((char *)v14 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v182, v188, v195.f64[0]), v190, v195, 1), v192, v176.f64[0]);
      *(float64x2_t *)((char *)v14 + 152) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v181, v189, v195.f64[0]), v191, v195, 1), v193, v176.f64[0]);
      a10[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v184, v189, v196.f64[0]), v191, v196, 1), v193, v183.f64[0]);
      a10[63] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v185, v188, v196.f64[0]), v190, v196, 1), v192, v183.f64[0]);
      *(float64x2_t *)((char *)v14 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v186, v189, v201.f64[0]), v191, v201, 1), v193, v194.f64[0]);
      *(float64x2_t *)((char *)v14 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v187, v188, v201.f64[0]), v190, v201, 1), v192, v194.f64[0]);
      v202 = v15[4];
      v203 = v15[5];
      v204 = *(float64x2_t *)((char *)v15 + 200);
      v205 = *(float64x2_t *)((char *)v15 + 184);
      v207 = v15[19];
      v206 = v15[20];
      v208 = *(float64x2_t *)((char *)v15 + 440);
      v209 = *(float64x2_t *)((char *)v15 + 424);
      v210 = v1056[-67];
      v211 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v212 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v214 = v1056[-53];
      v213 = v1056[-52];
      v215 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v216 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v217 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v16->f64[0]), v205, *v16, 1), v207, v210.f64[0]), v209, v210, 1);
      v218 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v16->f64[0]), v204, *v16, 1), v206, v210.f64[0]), v208, v210, 1);
      v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v212.f64[0]), v205, v212, 1), v207, v211.f64[0]), v209, v211, 1);
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v212.f64[0]), v204, v212, 1), v206, v211.f64[0]), v208, v211, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v214.f64[0]), v205, v214, 1), v207, v213.f64[0]), v209, v213, 1);
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v214.f64[0]), v204, v214, 1), v206, v213.f64[0]), v208, v213, 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v216.f64[0]), v205, v216, 1), v207, v215.f64[0]), v209, v215, 1);
      v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v216.f64[0]), v204, v216, 1), v206, v215.f64[0]), v208, v215, 1);
      v226 = v15[34];
      v225 = v15[35];
      result = (_BYTE *)&v15[41].f64[1];
      v228 = *(float64x2_t *)((char *)v15 + 664);
      v227 = *(float64x2_t *)((char *)v15 + 680);
      v230 = v15[49];
      v229 = v15[50];
      v232 = *(float64x2_t *)((char *)v15 + 904);
      v231 = *(float64x2_t *)((char *)v15 + 920);
      v234 = v1056[-66];
      v233 = v1056[-65];
      v235 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v236 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v217, v226, v234.f64[0]), v228, v234, 1), v230, v233.f64[0]), v232, v233, 1);
      v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v218, v225, v234.f64[0]), v227, v234, 1), v229, v233.f64[0]), v231, v233, 1);
      v239 = v1056[-51];
      v240 = v1056[-50];
      v241 = vmlaq_laneq_f64(vmlaq_n_f64(v219, v226, v236.f64[0]), v228, v236, 1);
      v242 = vmlaq_laneq_f64(vmlaq_n_f64(v220, v225, v236.f64[0]), v227, v236, 1);
      v243 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v230, v235.f64[0]), v232, v235, 1);
      v245 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v229, v235.f64[0]), v231, v235, 1);
      v246 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v221, v226, v239.f64[0]), v228, v239, 1), v230, v240.f64[0]), v232, v240, 1);
      v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v222, v225, v239.f64[0]), v227, v239, 1), v229, v240.f64[0]), v231, v240, 1);
      v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v223, v226, v246.f64[0]), v228, v246, 1), v230, v243.f64[0]), v232, v243, 1);
      v250 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v224, v225, v246.f64[0]), v227, v246, 1), v229, v243.f64[0]), v231, v243, 1);
      v251 = v15[65];
      v252 = v15[64];
      v254 = *(float64x2_t *)((char *)v15 + 1144);
      v253 = *(float64x2_t *)((char *)v15 + 1160);
      v255 = v15[80];
      v256 = v15[79];
      v258 = *(float64x2_t *)((char *)v15 + 1384);
      v257 = *(float64x2_t *)((char *)v15 + 1400);
      v260 = v1056[-64];
      v259 = v1056[-63];
      v261 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v262 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v237, v252, v260.f64[0]), v254, v260, 1), v256, v259.f64[0]), v258, v259, 1);
      v264 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v238, v251, v260.f64[0]), v253, v260, 1), v255, v259.f64[0]), v257, v259, 1);
      v265 = v1056[-49];
      v266 = v1056[-48];
      v267 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v252, v262.f64[0]), v254, v262, 1);
      v268 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v251, v262.f64[0]), v253, v262, 1);
      v269 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v256, v261.f64[0]), v258, v261, 1);
      _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v255, v261.f64[0]), v257, v261, 1);
      v272 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v252, v265.f64[0]), v254, v265, 1), v256, v266.f64[0]), v258, v266, 1);
      v274 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v248, v251, v265.f64[0]), v253, v265, 1), v255, v266.f64[0]), v257, v266, 1);
      v275 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v252, v272.f64[0]), v254, v272, 1), v256, v269.f64[0]), v258, v269, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v251, v272.f64[0]), v253, v272, 1), v255, v269.f64[0]), v257, v269, 1);
      v277 = v15[95];
      v278 = v15[94];
      _Q31 = *(float64x2_t *)((char *)v15 + 1624);
      v279 = *(float64x2_t *)((char *)v15 + 1640);
      v281 = v15[110];
      v282 = v15[109];
      v257.f64[0] = v1056[-61].f64[0];
      v283 = v1056[-62];
      v265.f64[0] = v1056[-54].f64[1];
      v284 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v272.f64[0] = v1056[-46].f64[0];
      v285 = v1056[-47];
      v286 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v278, v283.f64[0]), _Q31, v283, 1);
      v287 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v277, v283.f64[0]), v279, v283, 1);
      v283.f64[0] = v1056[-39].f64[1];
      v288 = vmlaq_n_f64(v286, v282, v257.f64[0]);
      v289 = vmlaq_n_f64(v287, v281, v257.f64[0]);
      v290 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v14[4] = v288;
      v14[5] = v289;
      *(float64x2_t *)((char *)v14 + 200) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q22, v277, v284.f64[0]), v279, v284, 1), v281, v265.f64[0]);
      *(float64x2_t *)((char *)v14 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v270, v278, v284.f64[0]), _Q31, v284, 1), v282, v265.f64[0]);
      a10[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v274, v277, v285.f64[0]), v279, v285, 1), v281, v272.f64[0]);
      a10[64] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v278, v285.f64[0]), _Q31, v285, 1), v282, v272.f64[0]);
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v275, v278, v290.f64[0]), _Q31, v290, 1), v282, v283.f64[0]);
      *(float64x2_t *)((char *)v14 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v277, v290.f64[0]), v279, v290, 1), v281, v283.f64[0]);
      _Q26 = v15[6];
      _Q27.f64[0] = v15[14].f64[1];
      v292 = *(float64x2_t *)((char *)v15 + 216);
      _Q30 = v15[21];
      _Q31.f64[0] = v15[29].f64[1];
      v294 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      _Q21 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v299 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v292, _Q24, 1), _Q30, _Q1.f64[0]), v294, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v304 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v292, _Q21, 1), _Q30, _Q19.f64[0]), v294, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
      }
      v305 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v292, _Q20, 1), _Q30, _Q4.f64[0]), v294, _Q4, 1);
      __asm
      {
        FMLA            D21, D27, V20.D[1]
        FMLA            D21, D31, V4.D[1]
      }
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q10.f64[0]), v292, _Q10, 1), _Q30, _Q9.f64[0]), v294, _Q9, 1);
      __asm
      {
        FMLA            D20, D27, V10.D[1]
        FMLA            D20, D31, V9.D[1]
      }
      v307 = v15[36];
      *(_QWORD *)&v1131.f64[0] = &v15[43].f64[1];
      _Q26.f64[0] = v15[44].f64[1];
      v308 = *(float64x2_t *)((char *)v15 + 696);
      v309 = v15[51];
      *(_QWORD *)&v1130.f64[0] = &v15[58].f64[1];
      _Q30.f64[0] = v15[59].f64[1];
      v310 = *(float64x2_t *)((char *)v15 + 936);
      _Q8 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      _Q11 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v315 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v299, v307, _Q2.f64[0]), v308, _Q2, 1), v309, _Q5.f64[0]), v310, _Q5, 1);
      __asm
      {
        FMLA            D23, D26, V2.D[1]
        FMLA            D23, D30, V5.D[1]
      }
      v316 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v304, v307, _Q9.f64[0]), v308, _Q9, 1), v309, _Q8.f64[0]), v310, _Q8, 1);
      __asm
      {
        FMLA            D22, D26, V9.D[1]
        FMLA            D22, D30, V8.D[1]
      }
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v305, v307, _Q3.f64[0]), v308, _Q3, 1), v309, _Q18.f64[0]), v310, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v306, v307, _Q11.f64[0]), v308, _Q11, 1), v309, _Q10.f64[0]), v310, _Q10, 1);
      __asm
      {
        FMLA            D20, D26, V11.D[1]
        FMLA            D20, D30, V10.D[1]
      }
      v319 = v15[66];
      *(_QWORD *)&v1129.f64[0] = &v15[73].f64[1];
      _Q5.f64[0] = v15[74].f64[1];
      v320 = *(float64x2_t *)((char *)v15 + 1176);
      v321 = v15[81];
      *(_QWORD *)&v1128.f64[0] = &v15[88].f64[1];
      _Q26.f64[0] = v15[89].f64[1];
      v322 = *(float64x2_t *)((char *)v15 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      _Q29 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      _Q30 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      _Q31 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v327 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v315, v319, _Q7.f64[0]), v320, _Q7, 1), v321, _Q17.f64[0]), v322, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v328 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v316, v319, _Q29.f64[0]), v320, _Q29, 1), v321, _Q28.f64[0]), v322, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v329 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v317, v319, _Q6.f64[0]), v320, _Q6, 1), v321, _Q16.f64[0]), v322, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v330 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v318, v319, _Q31.f64[0]), v320, _Q31, 1), v321, _Q30.f64[0]), v322, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v331 = v15[96];
      *(_QWORD *)&v1127.f64[0] = &v15[103].f64[1];
      _Q5.f64[0] = v15[104].f64[1];
      v332 = *(float64x2_t *)((char *)v15 + 1656);
      _Q7.f64[0] = v15[112].f64[0];
      v333 = v15[111];
      _Q17.f64[0] = v1056[-61].f64[0];
      _Q18 = v1056[-62];
      _Q24.f64[0] = v1056[-54].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      _Q26.f64[0] = v1056[-46].f64[0];
      _Q27 = v1056[-47];
      _Q28.f64[0] = v1056[-39].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v14[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v14[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v327, v331, _Q18.f64[0]), v332, _Q18, 1), v333, _Q17.f64[0]);
      v14[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v14 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v328, v331, _Q25.f64[0]), v332, _Q25, 1), v333, _Q24.f64[0]);
      v14[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v14[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v329, v331, _Q27.f64[0]), v332, _Q27, 1), v333, _Q26.f64[0]);
      v14[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v14 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v330, v331, _Q29.f64[0]), v332, _Q29, 1), v333, _Q28.f64[0]);
      v339 = *v15;
      v338 = v15[1];
      v340 = *(float64x2_t *)((char *)v15 + 136);
      v341 = *(float64x2_t *)((char *)v15 + 120);
      v343 = v15[15];
      v342 = v15[16];
      v344 = *(float64x2_t *)((char *)v15 + 376);
      v345 = *(float64x2_t *)((char *)v15 + 360);
      v346 = v1056[-38];
      v347 = v1056[-37];
      v348 = v1056[-23];
      v349 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      _Q22 = v346;
      v351 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v346.f64[0]), v341, v346, 1), v343, v347.f64[0]), v345, v347, 1);
      v352 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v346.f64[0]), v340, v346, 1), v342, v347.f64[0]), v344, v347, 1);
      _Q20 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v354 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v1056[-31].f64[1]), v341, _Q20, 1), v343, v354.f64[0]), v345, v354, 1);
      v356 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v1056[-31].f64[1]), v340, _Q20, 1), v342, v354.f64[0]), v344, v354, 1);
      v357 = vmlaq_laneq_f64(vmulq_n_f64(*v15, v348.f64[0]), v341, v348, 1);
      v358 = v1056[-22];
      v1126 = v348;
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v343, v358.f64[0]), v345, v358, 1);
      v360 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v348.f64[0]), v340, v348, 1), v342, v358.f64[0]), v344, v358, 1);
      v361 = vmlaq_laneq_f64(vmulq_n_f64(v339, v349.f64[0]), v341, v349, 1);
      v362 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v1125 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(v361, v343, v362.f64[0]), v345, v362, 1);
      v364 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v349.f64[0]), v340, v349, 1), v342, v362.f64[0]), v344, v362, 1);
      v366 = v15[30];
      v365 = v15[31];
      v368 = *(float64x2_t *)((char *)v15 + 600);
      v367 = *(float64x2_t *)((char *)v15 + 616);
      v370 = v15[45];
      v369 = v15[46];
      v372 = *(float64x2_t *)((char *)v15 + 840);
      v371 = *(float64x2_t *)((char *)v15 + 856);
      v373 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      _Q19 = v1056[-37];
      v374 = v1056[-36];
      _Q7 = v374;
      v377 = v1056[-35];
      v378 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v351, v366, v374.f64[0]), v368, v374, 1), v370, v377.f64[0]), v372, v377, 1);
      v379 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v352, v365, v374.f64[0]), v367, v374, 1), v369, v377.f64[0]), v371, v377, 1);
      _Q16 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v381 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v382 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v366, v1056[-29].f64[1]), v368, _Q16, 1), v370, v381.f64[0]), v372, v381, 1);
      v383 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v356, v365, v1056[-29].f64[1]), v367, _Q16, 1), v369, v381.f64[0]), v371, v381, 1);
      _Q23 = v1056[-22];
      v384 = v1056[-21];
      _Q17 = v384;
      v386 = v1056[-20];
      v388 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v366, v384.f64[0]), v368, v384, 1), v370, v386.f64[0]), v372, v386, 1);
      v389 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v360, v365, v384.f64[0]), v367, v384, 1), v369, v386.f64[0]), v371, v386, 1);
      v390 = vmlaq_laneq_f64(vmlaq_n_f64(v363, v366, v373.f64[0]), v368, v373, 1);
      _Q18 = v373;
      v392 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(v390, v370, v392.f64[0]), v372, v392, 1);
      v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v364, v365, v373.f64[0]), v367, v373, 1), v369, v392.f64[0]), v371, v392, 1);
      v395 = v15[60];
      v396 = v15[61];
      v397 = *(float64x2_t *)((char *)v15 + 1080);
      v398 = *(float64x2_t *)((char *)v15 + 1096);
      v399 = v15[76];
      v400 = v15[75];
      v402 = *(float64x2_t *)((char *)v15 + 1320);
      v401 = *(float64x2_t *)((char *)v15 + 1336);
      v403 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v404 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      _Q26 = v1056[-35];
      v406 = v1056[-33];
      v1124 = v1056[-34];
      v407 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v378, v395, v1124.f64[0]), v397, v1124, 1), v400, v406.f64[0]), v402, v406, 1);
      v408 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v379, v396, v1124.f64[0]), v398, v1124, 1), v399, v406.f64[0]), v401, v406, 1);
      v409 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v1121 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v410 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v382, v395, v403.f64[0]), v397, v403, 1), v400, v409.f64[0]), v402, v409, 1);
      v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v383, v396, v403.f64[0]), v398, v403, 1), v399, v409.f64[0]), v401, v409, 1);
      _Q27 = v1056[-20];
      v412 = v1056[-19];
      v414 = vmlaq_laneq_f64(vmlaq_n_f64(v388, v395, v412.f64[0]), v397, v412, 1);
      v415 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v395, v404.f64[0]), v397, v404, 1);
      v416 = v1056[-18];
      v1123 = v412;
      v417 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v1122 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v418 = vmlaq_laneq_f64(vmlaq_n_f64(v414, v400, v416.f64[0]), v402, v416, 1);
      v419 = vmlaq_laneq_f64(vmlaq_n_f64(v415, v400, v417.f64[0]), v402, v417, 1);
      v420 = vmlaq_n_f64(v389, v396, v412.f64[0]);
      v421 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v394, v396, v404.f64[0]), v398, v404, 1), v399, v417.f64[0]), v401, v417, 1);
      v422 = v15[90];
      v423 = *(float64x2_t *)((char *)v15 + 1560);
      v424 = *(float64x2_t *)((char *)v15 + 1576);
      v425 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v426 = vmlaq_laneq_f64(vmlaq_n_f64(v410, v422, v425.f64[0]), v423, v425, 1);
      v427 = v15[91];
      v428 = vmlaq_laneq_f64(vmlaq_n_f64(v411, v427, v425.f64[0]), v424, v425, 1);
      v429 = v15[105];
      v425.f64[0] = v1056[-24].f64[1];
      v430 = vmlaq_n_f64(v426, v429, v425.f64[0]);
      v431 = v15[106];
      v432 = vmlaq_n_f64(v428, v431, v425.f64[0]);
      _Q21 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v433 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v435 = vmlaq_laneq_f64(vmlaq_n_f64(v419, v422, v433.f64[0]), v423, v433, 1);
      v436 = vmlaq_laneq_f64(vmlaq_n_f64(v421, v427, v433.f64[0]), v424, v433, 1);
      v433.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 600) = v430;
      *(float64x2_t *)((char *)v14 + 616) = v432;
      *(float64x2_t *)((char *)v14 + 840) = vmlaq_n_f64(v435, v429, v433.f64[0]);
      *(float64x2_t *)((char *)v14 + 856) = vmlaq_n_f64(v436, v431, v433.f64[0]);
      v437 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v420, v398, v412, 1), v399, v416.f64[0]), v401, v416, 1);
      v433.f64[0] = v1056[-31].f64[0];
      v416.f64[0] = v1056[-16].f64[0];
      _Q25 = v1056[-33];
      v438 = v1056[-32];
      v440 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v407, v422, v438.f64[0]), v423, v438, 1), v429, v433.f64[0]);
      v441 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v408, v427, v438.f64[0]), v424, v438, 1), v431, v433.f64[0]);
      _Q24 = v1056[-18];
      v442 = v1056[-17];
      v14[30] = v440;
      v14[31] = v441;
      a10[91] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v437, v427, v442.f64[0]), v424, v442, 1), v431, v416.f64[0]);
      a10[90] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v418, v422, v442.f64[0]), v423, v442, 1), v429, v416.f64[0]);
      v445 = v15[2];
      v444 = v15[3];
      v446 = *(float64x2_t *)((char *)v15 + 168);
      v447 = *(float64x2_t *)((char *)v15 + 152);
      v449 = v15[17];
      v448 = v15[18];
      v450 = *(float64x2_t *)((char *)v15 + 408);
      v451 = *(float64x2_t *)((char *)v15 + 392);
      v453 = v1056[-38];
      v452 = v1056[-37];
      v454 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v455 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v453.f64[0]), v447, v453, 1), v449, v452.f64[0]), v451, v452, 1);
      v456 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v453.f64[0]), v446, v453, 1), v448, v452.f64[0]), v450, v452, 1);
      v457 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v454.f64[0]), v447, v454, 1), v449, v457.f64[0]), v451, v457, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v454.f64[0]), v446, v454, 1), v448, v457.f64[0]), v450, v457, 1);
      v460 = v1056[-23];
      v461 = vmlaq_laneq_f64(vmulq_n_f64(v445, v460.f64[0]), v447, v460, 1);
      v462 = vmlaq_laneq_f64(vmulq_n_f64(v444, v460.f64[0]), v446, v460, 1);
      v463 = v1056[-22];
      v464 = vmlaq_laneq_f64(vmlaq_n_f64(v461, v449, v463.f64[0]), v451, v463, 1);
      v465 = vmlaq_laneq_f64(vmlaq_n_f64(v462, v448, v463.f64[0]), v450, v463, 1);
      v466 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v467 = vmlaq_laneq_f64(vmulq_n_f64(v445, v466.f64[0]), v447, v466, 1);
      v468 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v469 = vmlaq_laneq_f64(vmlaq_n_f64(v467, v449, v468.f64[0]), v451, v468, 1);
      v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v466.f64[0]), v446, v466, 1), v448, v468.f64[0]), v450, v468, 1);
      v472 = v15[32];
      v471 = v15[33];
      v474 = *(float64x2_t *)((char *)v15 + 632);
      v473 = *(float64x2_t *)((char *)v15 + 648);
      v475 = v1056[-36];
      v476 = v1056[-35];
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v472, v475.f64[0]), v474, v475, 1);
      v478 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v471, v475.f64[0]), v473, v475, 1);
      v479 = v15[47];
      v480 = v15[48];
      v481 = *(float64x2_t *)((char *)v15 + 872);
      v482 = *(float64x2_t *)((char *)v15 + 888);
      v483 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v479, v476.f64[0]), v481, v476, 1);
      v484 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v480, v476.f64[0]), v482, v476, 1);
      v485 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v486 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v472, v485.f64[0]), v474, v485, 1);
      v487 = vmlaq_laneq_f64(vmlaq_n_f64(v459, v471, v485.f64[0]), v473, v485, 1);
      v488 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v489 = vmlaq_laneq_f64(vmlaq_n_f64(v486, v479, v488.f64[0]), v481, v488, 1);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(v487, v480, v488.f64[0]), v482, v488, 1);
      v491 = v1056[-21];
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v472, v491.f64[0]), v474, v491, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v471, v491.f64[0]), v473, v491, 1);
      v494 = v1056[-20];
      v495 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v479, v494.f64[0]), v481, v494, 1);
      v496 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v480, v494.f64[0]), v482, v494, 1);
      v497 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v498 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v472, v497.f64[0]), v474, v497, 1);
      v499 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v500 = vmlaq_laneq_f64(vmlaq_n_f64(v498, v479, v499.f64[0]), v481, v499, 1);
      v501 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v470, v471, v497.f64[0]), v473, v497, 1), v480, v499.f64[0]), v482, v499, 1);
      v503 = v15[62];
      v502 = v15[63];
      v505 = *(float64x2_t *)((char *)v15 + 1112);
      v504 = *(float64x2_t *)((char *)v15 + 1128);
      v506 = v1056[-34];
      v507 = vmlaq_laneq_f64(vmlaq_n_f64(v483, v503, v506.f64[0]), v505, v506, 1);
      v508 = vmlaq_laneq_f64(vmlaq_n_f64(v484, v502, v506.f64[0]), v504, v506, 1);
      v509 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v510 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v503, v509.f64[0]), v505, v509, 1);
      v511 = vmlaq_laneq_f64(vmlaq_n_f64(v490, v502, v509.f64[0]), v504, v509, 1);
      v512 = v1056[-19];
      v513 = vmlaq_laneq_f64(vmlaq_n_f64(v495, v503, v512.f64[0]), v505, v512, 1);
      v514 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v502, v512.f64[0]), v504, v512, 1);
      v515 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v516 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v517 = vmlaq_n_f64(v500, v503, v515.f64[0]);
      v518 = v15[78];
      v519 = vmlaq_laneq_f64(v517, v505, v515, 1);
      v520 = v15[77];
      v521 = vmlaq_laneq_f64(vmlaq_n_f64(v501, v502, v515.f64[0]), v504, v515, 1);
      v523 = *(float64x2_t *)((char *)v15 + 1352);
      v522 = *(float64x2_t *)((char *)v15 + 1368);
      v524 = v1056[-33];
      v525 = vmlaq_laneq_f64(vmlaq_n_f64(v507, v520, v524.f64[0]), v523, v524, 1);
      v526 = vmlaq_laneq_f64(vmlaq_n_f64(v508, v518, v524.f64[0]), v522, v524, 1);
      v527 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v528 = vmlaq_laneq_f64(vmlaq_n_f64(v510, v520, v527.f64[0]), v523, v527, 1);
      v529 = vmlaq_laneq_f64(vmlaq_n_f64(v511, v518, v527.f64[0]), v522, v527, 1);
      v530 = v1056[-18];
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(v513, v520, v530.f64[0]), v523, v530, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(v519, v520, v516.f64[0]), v523, v516, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(v521, v518, v516.f64[0]), v522, v516, 1);
      v534 = v15[92];
      v535 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v536 = *(float64x2_t *)((char *)v15 + 1592);
      v537 = *(float64x2_t *)((char *)v15 + 1608);
      v538 = vmlaq_laneq_f64(vmlaq_n_f64(v528, v534, v535.f64[0]), v536, v535, 1);
      v539 = v15[93];
      v540 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v539, v535.f64[0]), v537, v535, 1);
      v541 = v15[107];
      v482.f64[0] = v1056[-24].f64[1];
      v542 = vmlaq_n_f64(v538, v541, v482.f64[0]);
      v543 = v15[108];
      v544 = vmlaq_n_f64(v540, v543, v482.f64[0]);
      v545 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v546 = vmlaq_laneq_f64(vmlaq_n_f64(v532, v534, v545.f64[0]), v536, v545, 1);
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(v533, v539, v545.f64[0]), v537, v545, 1);
      v545.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 632) = v542;
      *(float64x2_t *)((char *)v14 + 648) = v544;
      *(float64x2_t *)((char *)v14 + 872) = vmlaq_n_f64(v546, v541, v545.f64[0]);
      *(float64x2_t *)((char *)v14 + 888) = vmlaq_n_f64(v547, v543, v545.f64[0]);
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(v514, v518, v530.f64[0]), v522, v530, 1);
      v547.f64[0] = v1056[-31].f64[0];
      v549 = v1056[-32];
      v518.f64[0] = v1056[-16].f64[0];
      v550 = vmlaq_laneq_f64(vmlaq_n_f64(v525, v534, v549.f64[0]), v536, v549, 1);
      v551 = vmlaq_laneq_f64(vmlaq_n_f64(v526, v539, v549.f64[0]), v537, v549, 1);
      v552 = v1056[-17];
      v14[32] = vmlaq_n_f64(v550, v541, v547.f64[0]);
      v14[33] = vmlaq_n_f64(v551, v543, v547.f64[0]);
      a10[93] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v548, v539, v552.f64[0]), v537, v552, 1), v543, v518.f64[0]);
      a10[92] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v531, v534, v552.f64[0]), v536, v552, 1), v541, v518.f64[0]);
      v554 = v15[4];
      v553 = v15[5];
      v555 = *(float64x2_t *)((char *)v15 + 200);
      v556 = *(float64x2_t *)((char *)v15 + 184);
      v558 = v15[19];
      v557 = v15[20];
      v559 = *(float64x2_t *)((char *)v15 + 440);
      v560 = *(float64x2_t *)((char *)v15 + 424);
      v562 = v1056[-38];
      v561 = v1056[-37];
      v563 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v564 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v562.f64[0]), v556, v562, 1), v558, v561.f64[0]), v560, v561, 1);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v562.f64[0]), v555, v562, 1), v557, v561.f64[0]), v559, v561, 1);
      v566 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v567 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v563.f64[0]), v556, v563, 1), v558, v566.f64[0]), v560, v566, 1);
      v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v563.f64[0]), v555, v563, 1), v557, v566.f64[0]), v559, v566, 1);
      v569 = v1056[-23];
      v570 = vmlaq_laneq_f64(vmulq_n_f64(v554, v569.f64[0]), v556, v569, 1);
      v571 = vmlaq_laneq_f64(vmulq_n_f64(v553, v569.f64[0]), v555, v569, 1);
      v572 = v1056[-22];
      v573 = vmlaq_laneq_f64(vmlaq_n_f64(v570, v558, v572.f64[0]), v560, v572, 1);
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(v571, v557, v572.f64[0]), v559, v572, 1);
      v575 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v576 = vmlaq_laneq_f64(vmulq_n_f64(v554, v575.f64[0]), v556, v575, 1);
      v577 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v578 = vmlaq_laneq_f64(vmlaq_n_f64(v576, v558, v577.f64[0]), v560, v577, 1);
      v579 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v575.f64[0]), v555, v575, 1), v557, v577.f64[0]), v559, v577, 1);
      v581 = v15[34];
      v580 = v15[35];
      v583 = *(float64x2_t *)((char *)v15 + 664);
      v582 = *(float64x2_t *)((char *)v15 + 680);
      v584 = v1056[-36];
      v585 = v1056[-35];
      v586 = vmlaq_laneq_f64(vmlaq_n_f64(v564, v581, v584.f64[0]), v583, v584, 1);
      v587 = vmlaq_laneq_f64(vmlaq_n_f64(v565, v580, v584.f64[0]), v582, v584, 1);
      v588 = v15[49];
      v589 = v15[50];
      v590 = *(float64x2_t *)((char *)v15 + 904);
      v591 = *(float64x2_t *)((char *)v15 + 920);
      v592 = vmlaq_laneq_f64(vmlaq_n_f64(v586, v588, v585.f64[0]), v590, v585, 1);
      v593 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v589, v585.f64[0]), v591, v585, 1);
      v594 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v595 = vmlaq_laneq_f64(vmlaq_n_f64(v567, v581, v594.f64[0]), v583, v594, 1);
      v596 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v580, v594.f64[0]), v582, v594, 1);
      v597 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v598 = vmlaq_laneq_f64(vmlaq_n_f64(v595, v588, v597.f64[0]), v590, v597, 1);
      v599 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v589, v597.f64[0]), v591, v597, 1);
      v600 = v1056[-21];
      v601 = vmlaq_laneq_f64(vmlaq_n_f64(v573, v581, v600.f64[0]), v583, v600, 1);
      v602 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v580, v600.f64[0]), v582, v600, 1);
      v603 = v1056[-20];
      v604 = vmlaq_laneq_f64(vmlaq_n_f64(v601, v588, v603.f64[0]), v590, v603, 1);
      v605 = vmlaq_laneq_f64(vmlaq_n_f64(v602, v589, v603.f64[0]), v591, v603, 1);
      v606 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v607 = vmlaq_laneq_f64(vmlaq_n_f64(v578, v581, v606.f64[0]), v583, v606, 1);
      v608 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v609 = vmlaq_laneq_f64(vmlaq_n_f64(v607, v588, v608.f64[0]), v590, v608, 1);
      v610 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v579, v580, v606.f64[0]), v582, v606, 1), v589, v608.f64[0]), v591, v608, 1);
      v611 = v15[65];
      v612 = v15[64];
      v614 = *(float64x2_t *)((char *)v15 + 1144);
      v613 = *(float64x2_t *)((char *)v15 + 1160);
      v615 = v1056[-34];
      v616 = vmlaq_laneq_f64(vmlaq_n_f64(v592, v612, v615.f64[0]), v614, v615, 1);
      v617 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v611, v615.f64[0]), v613, v615, 1);
      v618 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v619 = vmlaq_laneq_f64(vmlaq_n_f64(v598, v612, v618.f64[0]), v614, v618, 1);
      v620 = vmlaq_laneq_f64(vmlaq_n_f64(v599, v611, v618.f64[0]), v613, v618, 1);
      v621 = v1056[-19];
      v622 = vmlaq_laneq_f64(vmlaq_n_f64(v604, v612, v621.f64[0]), v614, v621, 1);
      v623 = vmlaq_laneq_f64(vmlaq_n_f64(v605, v611, v621.f64[0]), v613, v621, 1);
      v624 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v625 = v15[80];
      v626 = vmlaq_laneq_f64(vmlaq_n_f64(v609, v612, v624.f64[0]), v614, v624, 1);
      v627 = v15[79];
      v628 = vmlaq_laneq_f64(vmlaq_n_f64(v610, v611, v624.f64[0]), v613, v624, 1);
      v630 = *(float64x2_t *)((char *)v15 + 1384);
      v629 = *(float64x2_t *)((char *)v15 + 1400);
      v631 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v632 = vmlaq_laneq_f64(vmlaq_n_f64(v619, v627, v631.f64[0]), v630, v631, 1);
      v633 = vmlaq_laneq_f64(vmlaq_n_f64(v620, v625, v631.f64[0]), v629, v631, 1);
      v634 = v15[94];
      v635 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      _Q10 = *(float64x2_t *)((char *)v15 + 1624);
      _Q14 = *(float64x2_t *)((char *)v15 + 1640);
      v638 = vmlaq_laneq_f64(vmlaq_n_f64(v632, v634, v635.f64[0]), _Q10, v635, 1);
      _Q13 = v15[95];
      _Q12 = vmlaq_laneq_f64(vmlaq_n_f64(v633, _Q13, v635.f64[0]), _Q14, v635, 1);
      v641 = v15[109];
      v543.f64[0] = v1056[-24].f64[1];
      v642 = v15[110];
      *(float64x2_t *)((char *)v14 + 664) = vmlaq_n_f64(v638, v641, v543.f64[0]);
      *(float64x2_t *)((char *)v14 + 680) = vmlaq_n_f64(_Q12, v642, v543.f64[0]);
      v643 = v1056[-18];
      v644 = vmlaq_laneq_f64(vmlaq_n_f64(v622, v627, v643.f64[0]), v630, v643, 1);
      v645 = vmlaq_laneq_f64(vmlaq_n_f64(v623, v625, v643.f64[0]), v629, v643, 1);
      v646 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v647 = vmlaq_laneq_f64(vmlaq_n_f64(v626, v627, v646.f64[0]), v630, v646, 1);
      v648 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v625, v646.f64[0]), v629, v646, 1);
      v649 = v1056[-17];
      v650 = vmlaq_laneq_f64(vmlaq_n_f64(v644, v634, v649.f64[0]), _Q10, v649, 1);
      v651 = vmlaq_laneq_f64(vmlaq_n_f64(v645, _Q13, v649.f64[0]), _Q14, v649, 1);
      v649.f64[0] = v1056[-16].f64[0];
      v652 = vmlaq_n_f64(v650, v641, v649.f64[0]);
      _Q30 = vmlaq_n_f64(v651, v642, v649.f64[0]);
      v654 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v655 = vmlaq_laneq_f64(vmlaq_n_f64(v647, v634, v654.f64[0]), _Q10, v654, 1);
      v656 = vmlaq_laneq_f64(vmlaq_n_f64(v648, _Q13, v654.f64[0]), _Q14, v654, 1);
      v654.f64[0] = v1056[-9].f64[1];
      a10[95] = _Q30;
      a10[94] = v652;
      *(float64x2_t *)((char *)v14 + 904) = vmlaq_n_f64(v655, v641, v654.f64[0]);
      *(float64x2_t *)((char *)v14 + 920) = vmlaq_n_f64(v656, v642, v654.f64[0]);
      v657 = v1056[-33];
      v658 = vmlaq_n_f64(v616, v627, v657.f64[0]);
      _Q4 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v660 = vmlaq_laneq_f64(v658, v630, v657, 1);
      _Q3 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v662 = vmlaq_n_f64(v617, v625, v657.f64[0]);
      _Q5 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      _Q28 = vmlaq_laneq_f64(v662, v629, v657, 1);
      v629.f64[0] = v1056[-31].f64[0];
      v665 = v1056[-32];
      v14[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v660, v634, v665.f64[0]), _Q10, v665, 1), v641, v629.f64[0]);
      v14[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q28, _Q13, v665.f64[0]), _Q14, v665, 1), v642, v629.f64[0]);
      _Q6 = v15[6];
      _Q30.f64[0] = v15[14].f64[1];
      v667 = *(float64x2_t *)((char *)v15 + 216);
      _Q9 = v15[21];
      _Q10.f64[0] = v15[29].f64[1];
      v669 = *(float64x2_t *)((char *)v15 + 456);
      v670 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q22.f64[0]), v667, _Q22, 1), _Q9, _Q19.f64[0]), v669, _Q19, 1);
      __asm
      {
        FMLA            D28, D30, V22.D[1]
        FMLA            D28, D10, V19.D[1]
      }
      v671 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q20.f64[0]), v667, _Q20, 1), _Q9, _Q4.f64[0]), v669, _Q4, 1);
      __asm
      {
        FMLA            D22, D30, V20.D[1]
        FMLA            D22, D10, V4.D[1]
      }
      _Q4.f64[1] = v1126.f64[1];
      __asm { FMLA            D20, D30, V4.D[1] }
      _Q4 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v673 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1126.f64[0]), v667, v1126, 1), _Q9, _Q23.f64[0]), v669, _Q23, 1);
      __asm { FMLA            D20, D10, V23.D[1] }
      _Q12.f64[1] = v1125.f64[1];
      v674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1125.f64[0]), v667, v1125, 1), _Q9, _Q3.f64[0]), v669, _Q3, 1);
      __asm
      {
        FMLA            D19, D30, V12.D[1]
        FMLA            D19, D10, V3.D[1]
      }
      v675 = v15[36];
      _Q6.f64[0] = v15[44].f64[1];
      v676 = *(float64x2_t **)&v1131.f64[0];
      _Q8 = v15[51];
      _Q9.f64[0] = v15[59].f64[1];
      v678 = *(float64x2_t **)&v1130.f64[0];
      v679 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v670, v675, _Q7.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q7, 1), _Q8, _Q26.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q26, 1);
      __asm
      {
        FMLA            D28, D6, V7.D[1]
        FMLA            D28, D9, V26.D[1]
        FMLA            D22, D6, V16.D[1]
        FMLA            D22, D9, V5.D[1]
      }
      v680 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v673, v675, _Q17.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q17, 1), _Q8, _Q27.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q27, 1);
      __asm
      {
        FMLA            D20, D6, V17.D[1]
        FMLA            D20, D9, V27.D[1]
      }
      v681 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v674, v675, _Q18.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q18, 1), _Q8, _Q4.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q4, 1);
      __asm
      {
        FMLA            D19, D6, V18.D[1]
        FMLA            D19, D9, V4.D[1]
      }
      v682 = v15[66];
      _Q7.f64[0] = v15[74].f64[1];
      v683 = *(float64x2_t **)&v1129.f64[0];
      v684 = **(float64x2_t **)&v1129.f64[0];
      v685 = v15[81];
      _Q17.f64[0] = v15[89].f64[1];
      v686 = *(float64x2_t **)&v1128.f64[0];
      v687 = **(float64x2_t **)&v1128.f64[0];
      _Q31 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      _Q13.f64[1] = v1121.f64[1];
      v689 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v671, v675, _Q16.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q16, 1), _Q8, _Q5.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q5, 1), v682, v1121.f64[0]), **(float64x2_t **)&v1129.f64[0], v1121, 1), v685, _Q31.f64[0]), **(float64x2_t **)&v1128.f64[0],
               _Q31,
               1);
      _Q14.f64[1] = v1122.f64[1];
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v681, v682, v1122.f64[0]), **(float64x2_t **)&v1129.f64[0], v1122, 1), v685, _Q21.f64[0]), **(float64x2_t **)&v1128.f64[0], _Q21, 1);
      v691 = v15[96];
      _Q4.f64[0] = v15[104].f64[1];
      v692 = *(float64x2_t **)&v1127.f64[0];
      v693 = **(float64x2_t **)&v1127.f64[0];
      _Q8.f64[0] = v15[112].f64[0];
      v694 = v15[111];
      _Q10.f64[0] = v1056[-24].f64[1];
      _Q11 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      *(float64x2_t *)((char *)v14 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v689, v691, _Q11.f64[0]), **(float64x2_t **)&v1127.f64[0], _Q11, 1), v694, _Q10.f64[0]);
      _Q29 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      _Q12.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 936) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v691, _Q29.f64[0]), v693, _Q29, 1), v694, _Q12.f64[0]);
      _Q23.f64[1] = v1124.f64[1];
      v697 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v679, v682, v1124.f64[0]), v684, v1124, 1), v685, _Q25.f64[0]), v687, _Q25, 1);
      __asm
      {
        FMLA            D28, D7, V23.D[1]
        FMLA            D28, D17, V25.D[1]
        FMLA            D22, D7, V13.D[1]
      }
      _Q23.f64[0] = v1056[-31].f64[0];
      _Q25 = v1056[-32];
      _Q13 = v1056[-17];
      __asm { FMLA            D22, D17, V31.D[1] }
      _Q31.f64[1] = v1123.f64[1];
      __asm
      {
        FMLA            D20, D7, V31.D[1]
        FMLA            D20, D17, V24.D[1]
        FMLA            D19, D7, V14.D[1]
        FMLA            D19, D17, V21.D[1]
      }
      _Q6.f64[0] = v1056[-16].f64[0];
      __asm
      {
        FMLA            D28, D4, V25.D[1]
        FMLA            D22, D4, V11.D[1]
      }
      v700 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v680, v682, v1123.f64[0]), v684, v1123, 1), v685, _Q24.f64[0]), v687, _Q24, 1), v691, _Q13.f64[0]), v693, _Q13, 1), v694, _Q6.f64[0]);
      __asm
      {
        FMLA            D20, D4, V13.D[1]
        FMLA            D19, D4, V29.D[1]
      }
      v14[37].f64[0] = _Q28.f64[0] + _Q8.f64[0] * _Q23.f64[0];
      v14[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v697, v691, _Q25.f64[0]), v693, _Q25, 1), v694, _Q23.f64[0]);
      v14[44].f64[1] = _Q22.f64[0] + _Q8.f64[0] * _Q10.f64[0];
      v14[52].f64[0] = _Q20.f64[0] + _Q8.f64[0] * _Q6.f64[0];
      v14[51] = v700;
      v14[59].f64[1] = _Q19.f64[0] + _Q8.f64[0] * _Q12.f64[0];
      v701 = v1056[-7];
      v702 = v1056[-8];
      v703 = v1056[-5];
      v704 = v1056[-6];
      v705 = v1056[-3];
      v706 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v707 = v1056[-2];
      v708 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[1], v702.f64[0]), *(float64x2_t *)((char *)v15 + 136), v702, 1), v15[16], v701.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 376),
                                     v701,
                                     1),
                                   v15[31],
                                   v704.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 616),
                                 v704,
                                 1),
                               v15[46],
                               v703.f64[0]),
                             *(float64x2_t *)((char *)v15 + 856),
                             v703,
                             1),
                           v15[61],
                           v706.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1096),
                         v706,
                         1),
                       v15[76],
                       v705.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1336),
                     v705,
                     1),
                   v15[91],
                   v707.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1576),
                 v707,
                 1),
               v15[106],
               _Q4.f64[0]);
      v14[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v702.f64[0]), *(float64x2_t *)((char *)v15 + 120), v702, 1), v15[15], v701.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 360),
                                        v701,
                                        1),
                                      v15[30],
                                      v704.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 600),
                                    v704,
                                    1),
                                  v15[45],
                                  v703.f64[0]),
                                *(float64x2_t *)((char *)v15 + 840),
                                v703,
                                1),
                              v15[60],
                              v706.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1080),
                            v706,
                            1),
                          v15[75],
                          v705.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1320),
                        v705,
                        1),
                      v15[90],
                      v707.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1560),
                    v707,
                    1),
                  v15[105],
                  _Q4.f64[0]);
      v14[61] = v708;
      v709 = v1056[-7];
      v710 = v1056[-8];
      v711 = v1056[-5];
      v712 = v1056[-6];
      v713 = v1056[-3];
      v714 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v715 = v1056[-2];
      v716 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[3], v710.f64[0]), *(float64x2_t *)((char *)v15 + 168), v710, 1), v15[18], v709.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 408),
                                     v709,
                                     1),
                                   v15[33],
                                   v712.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 648),
                                 v712,
                                 1),
                               v15[48],
                               v711.f64[0]),
                             *(float64x2_t *)((char *)v15 + 888),
                             v711,
                             1),
                           v15[63],
                           v714.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1128),
                         v714,
                         1),
                       v15[78],
                       v713.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1368),
                     v713,
                     1),
                   v15[93],
                   v715.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1608),
                 v715,
                 1),
               v15[108],
               _Q4.f64[0]);
      v14[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[2], v710.f64[0]), *(float64x2_t *)((char *)v15 + 152), v710, 1), v15[17], v709.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 392),
                                        v709,
                                        1),
                                      v15[32],
                                      v712.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 632),
                                    v712,
                                    1),
                                  v15[47],
                                  v711.f64[0]),
                                *(float64x2_t *)((char *)v15 + 872),
                                v711,
                                1),
                              v15[62],
                              v714.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1112),
                            v714,
                            1),
                          v15[77],
                          v713.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1352),
                        v713,
                        1),
                      v15[92],
                      v715.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1592),
                    v715,
                    1),
                  v15[107],
                  _Q4.f64[0]);
      v14[63] = v716;
      _Q26 = v1056[-7];
      v718 = v1056[-8];
      v719 = v1056[-5];
      v720 = v1056[-6];
      _Q20 = v1056[-3];
      v722 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v723 = v1056[-2];
      v724 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[4], v718.f64[0]), *(float64x2_t *)((char *)v15 + 184), v718, 1), v15[19], _Q26.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 424),
                                     _Q26,
                                     1),
                                   v15[34],
                                   v720.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 664),
                                 v720,
                                 1),
                               v15[49],
                               v719.f64[0]),
                             *(float64x2_t *)((char *)v15 + 904),
                             v719,
                             1),
                           v15[64],
                           v722.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1144),
                         v722,
                         1),
                       v15[79],
                       _Q20.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1384),
                     _Q20,
                     1),
                   v15[94],
                   v723.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1624),
                 v723,
                 1),
               v15[109],
               _Q4.f64[0]);
      v14[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[5], v718.f64[0]), *(float64x2_t *)((char *)v15 + 200), v718, 1), v15[20], _Q26.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 440),
                                        _Q26,
                                        1),
                                      v15[35],
                                      v720.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 680),
                                    v720,
                                    1),
                                  v15[50],
                                  v719.f64[0]),
                                *(float64x2_t *)((char *)v15 + 920),
                                v719,
                                1),
                              v15[65],
                              v722.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1160),
                            v722,
                            1),
                          v15[80],
                          _Q20.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1400),
                        _Q20,
                        1),
                      v15[95],
                      v723.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1640),
                    v723,
                    1),
                  v15[110],
                  _Q4.f64[0]);
      v14[64] = v724;
      _Q16.f64[0] = v15[14].f64[1];
      _Q20.f64[0] = v15[29].f64[1];
      _Q23.f64[0] = v15[44].f64[1];
      _Q26.f64[0] = v15[59].f64[1];
      _Q29.f64[0] = v15[74].f64[1];
      _Q8.f64[0] = v15[89].f64[1];
      _Q11.f64[0] = v15[104].f64[1];
      _Q14 = v1056[-7];
      _Q15 = v1056[-8];
      v727 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[6], _Q15.f64[0]), *(float64x2_t *)((char *)v15 + 216), _Q15, 1), v15[21], _Q14.f64[0]), *(float64x2_t *)((char *)v15 + 456), _Q14, 1);
      _Q0 = v1056[-5];
      _Q17 = v1056[-3];
      v724.f64[0] = v1056[-1].f64[0];
      __asm { FMLA            D6, D16, V15.D[1] }
      _Q16 = v1056[-6];
      _Q18 = v1056[-4];
      _Q15 = v1056[-2];
      __asm
      {
        FMLA            D6, D20, V14.D[1]
        FMLA            D6, D23, V16.D[1]
        FMLA            D6, D26, V0.D[1]
        FMLA            D6, D29, V18.D[1]
        FMLA            D6, D8, V17.D[1]
      }
      v733 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v727, v15[36], _Q16.f64[0]), *v676, _Q16, 1), v15[51], _Q0.f64[0]), *v678, _Q0, 1), v15[66], _Q18.f64[0]), *v683, _Q18, 1),
                       v15[81],
                       _Q17.f64[0]),
                     *v686,
                     _Q17,
                     1),
                   v15[96],
                   _Q15.f64[0]),
                 *v692,
                 _Q15,
                 1),
               v15[111],
               v724.f64[0]);
      __asm { FMLA            D6, D11, V15.D[1] }
      v14[67].f64[0] = _Q6.f64[0] + v15[112].f64[0] * v724.f64[0];
      v14[66] = v733;
      break;
    case 1:
      for (i = 0; i != 1080; i += 120)
      {
        v735 = *(float64x2_t *)((char *)a10 + i + 752);
        v736 = *(float64x2_t *)((char *)a10 + i + 768);
        v737 = *(float64x2_t *)((char *)a10 + i + 784);
        v738 = *(float64x2_t *)((char *)a10 + i + 800);
        v739 = *(float64x2_t *)((char *)a10 + i + 816);
        a7.f64[0] = a10[52].f64[i / 8];
        a8.f64[0] = a11[8].f64[0];
        v740 = a11[3];
        v741 = a11[4];
        v742 = a11[5];
        v743 = a11[6];
        v744 = a11[7];
        v1131 = vmulq_f64(a7, a8);
        v1130 = vmulq_f64(v739, v744);
        v1129 = vmulq_f64(v738, v743);
        v1128 = vmulq_f64(v737, v742);
        v1127 = vmulq_f64(v736, v741);
        v1126 = vmulq_f64(v735, v740);
        v745 = *(float64x2_t *)((char *)a10 + i + 720);
        v746 = a11[1];
        v1125 = vmulq_f64(*(float64x2_t *)((char *)a10 + i + 736), a11[2]);
        v1124 = vmulq_f64(v745, v746);
        result = memcpy(v1132, v14, sizeof(v1132));
        v747 = (float64x2_t *)&v1132[i];
        v748 = v1125;
        *v747 = v1124;
        v747[1] = v748;
        v749 = v1127;
        v747[2] = v1126;
        v747[3] = v749;
        v750 = v1129;
        v747[4] = v1128;
        v747[5] = v750;
        v747[6] = v1130;
        v747[7].f64[0] = v1131.f64[0];
        v751 = *(float64x2_t *)&v1132[1024];
        v14[67].f64[0] = *(float64_t *)&v1132[1072];
        v14[66] = *(float64x2_t *)&v1132[1056];
        v14[65] = *(float64x2_t *)&v1132[1040];
        v752 = *(float64x2_t *)&v1132[992];
        v14[63] = *(float64x2_t *)&v1132[1008];
        v14[64] = v751;
        v753 = *(float64x2_t *)&v1132[960];
        v14[61] = *(float64x2_t *)&v1132[976];
        v14[62] = v752;
        v754 = *(float64x2_t *)&v1132[928];
        v14[59] = *(float64x2_t *)&v1132[944];
        v14[60] = v753;
        v755 = *(float64x2_t *)&v1132[896];
        v14[57] = *(float64x2_t *)&v1132[912];
        v14[58] = v754;
        v756 = *(float64x2_t *)&v1132[864];
        v14[55] = *(float64x2_t *)&v1132[880];
        v14[56] = v755;
        v757 = *(float64x2_t *)&v1132[832];
        v14[53] = *(float64x2_t *)&v1132[848];
        v14[54] = v756;
        v758 = *(float64x2_t *)&v1132[800];
        v14[51] = *(float64x2_t *)&v1132[816];
        v14[52] = v757;
        v759 = *(float64x2_t *)&v1132[768];
        v14[49] = *(float64x2_t *)&v1132[784];
        v14[50] = v758;
        v760 = *(float64x2_t *)&v1132[736];
        v14[47] = *(float64x2_t *)&v1132[752];
        v14[48] = v759;
        v761 = *(float64x2_t *)&v1132[704];
        v14[45] = *(float64x2_t *)&v1132[720];
        v14[46] = v760;
        v762 = *(float64x2_t *)&v1132[672];
        v14[43] = *(float64x2_t *)&v1132[688];
        v14[44] = v761;
        v763 = *(float64x2_t *)&v1132[640];
        v14[41] = *(float64x2_t *)&v1132[656];
        v14[42] = v762;
        v764 = *(float64x2_t *)&v1132[608];
        v14[39] = *(float64x2_t *)&v1132[624];
        v14[40] = v763;
        v765 = *(float64x2_t *)&v1132[576];
        v14[37] = *(float64x2_t *)&v1132[592];
        v14[38] = v764;
        v766 = *(float64x2_t *)&v1132[544];
        v14[35] = *(float64x2_t *)&v1132[560];
        v14[36] = v765;
        v767 = *(float64x2_t *)&v1132[512];
        v14[33] = *(float64x2_t *)&v1132[528];
        v14[34] = v766;
        v768 = *(float64x2_t *)&v1132[480];
        v14[31] = *(float64x2_t *)&v1132[496];
        v14[32] = v767;
        v769 = *(float64x2_t *)&v1132[448];
        v14[29] = *(float64x2_t *)&v1132[464];
        v14[30] = v768;
        v770 = *(float64x2_t *)&v1132[416];
        v14[27] = *(float64x2_t *)&v1132[432];
        v14[28] = v769;
        v771 = *(float64x2_t *)&v1132[384];
        v14[25] = *(float64x2_t *)&v1132[400];
        v14[26] = v770;
        v772 = *(float64x2_t *)&v1132[352];
        v14[23] = *(float64x2_t *)&v1132[368];
        v14[24] = v771;
        v773 = *(float64x2_t *)&v1132[320];
        v14[21] = *(float64x2_t *)&v1132[336];
        v14[22] = v772;
        v774 = *(float64x2_t *)&v1132[288];
        v14[19] = *(float64x2_t *)&v1132[304];
        v14[20] = v773;
        v775 = *(float64x2_t *)&v1132[256];
        v14[17] = *(float64x2_t *)&v1132[272];
        v14[18] = v774;
        v776 = *(float64x2_t *)&v1132[224];
        v14[15] = *(float64x2_t *)&v1132[240];
        v14[16] = v775;
        v777 = *(float64x2_t *)&v1132[192];
        v14[13] = *(float64x2_t *)&v1132[208];
        v14[14] = v776;
        v778 = *(float64x2_t *)&v1132[160];
        v14[11] = *(float64x2_t *)&v1132[176];
        v14[12] = v777;
        v779 = *(float64x2_t *)&v1132[128];
        v14[9] = *(float64x2_t *)&v1132[144];
        v14[10] = v778;
        v780 = *(float64x2_t *)&v1132[96];
        v14[7] = *(float64x2_t *)&v1132[112];
        v14[8] = v779;
        v781 = *(float64x2_t *)&v1132[64];
        v14[5] = *(float64x2_t *)&v1132[80];
        v14[6] = v780;
        v782 = *(float64x2_t *)&v1132[32];
        v14[3] = *(float64x2_t *)&v1132[48];
        v14[4] = v781;
        v783 = *(float64x2_t *)v1132;
        v14[1] = *(float64x2_t *)&v1132[16];
        v14[2] = v782;
        *v14 = v783;
      }
      break;
    case 2:
      a2.f64[0] = a11[1].f64[0];
      a3.f64[0] = a10[112].f64[0];
      v785 = a10[73];
      v784 = a10[74];
      v787 = a10[71];
      v786 = a10[72];
      v788 = a10[69];
      v789 = a10[70];
      v790 = a10[67];
      v791 = a10[68];
      v792 = a10[65];
      v793 = a10[66];
      v794 = a10[63];
      v795 = a10[64];
      v796 = a10[61];
      v797 = a10[62];
      v798 = a10[59];
      v799 = a10[60];
      v800 = a10[57];
      v801 = a10[58];
      v802 = a10[55];
      v803 = a10[56];
      v804 = a10[53];
      v805 = a10[54];
      v806 = a10[51];
      v807 = a10[52];
      v808 = a10[49];
      v809 = a10[50];
      v811 = a10[47];
      v810 = a10[48];
      v813 = *v14;
      v812 = a10[46];
      v1131 = vmulq_f64(a3, a2);
      v1130 = vmulq_n_f64(v813, a2.f64[0]);
      v1129 = vmulq_n_f64(v812, a2.f64[0]);
      v1128 = vmulq_n_f64(v811, a2.f64[0]);
      v1127 = vmulq_n_f64(v810, a2.f64[0]);
      v1126 = vmulq_n_f64(v808, a2.f64[0]);
      v1125 = vmulq_n_f64(v809, a2.f64[0]);
      v1124 = vmulq_n_f64(v806, a2.f64[0]);
      v1123 = vmulq_n_f64(v807, a2.f64[0]);
      v1122 = vmulq_n_f64(v804, a2.f64[0]);
      v1121 = vmulq_n_f64(v805, a2.f64[0]);
      v1120 = vmulq_n_f64(v802, a2.f64[0]);
      v1119 = vmulq_n_f64(v803, a2.f64[0]);
      v1118 = vmulq_n_f64(v800, a2.f64[0]);
      v1117 = vmulq_n_f64(v801, a2.f64[0]);
      v1116 = vmulq_n_f64(v798, a2.f64[0]);
      v1115 = vmulq_n_f64(v799, a2.f64[0]);
      v1114 = vmulq_n_f64(v796, a2.f64[0]);
      v1113 = vmulq_n_f64(v797, a2.f64[0]);
      v1112 = vmulq_n_f64(v794, a2.f64[0]);
      v1111 = vmulq_n_f64(v795, a2.f64[0]);
      v1110 = vmulq_n_f64(v792, a2.f64[0]);
      v1109 = vmulq_n_f64(v793, a2.f64[0]);
      v1108 = vmulq_n_f64(v790, a2.f64[0]);
      v1107 = vmulq_n_f64(v791, a2.f64[0]);
      v1106 = vmulq_n_f64(v788, a2.f64[0]);
      v1105 = vmulq_n_f64(v789, a2.f64[0]);
      v1104 = vmulq_n_f64(v787, a2.f64[0]);
      v1103 = vmulq_n_f64(v786, a2.f64[0]);
      v1102 = vmulq_n_f64(v785, a2.f64[0]);
      v1101 = vmulq_n_f64(v784, a2.f64[0]);
      v1100 = vmulq_n_f64(a10[75], a2.f64[0]);
      v1099 = vmulq_n_f64(a10[76], a2.f64[0]);
      v1098 = vmulq_n_f64(a10[77], a2.f64[0]);
      v1097 = vmulq_n_f64(a10[78], a2.f64[0]);
      v814 = a10[80];
      v1096 = vmulq_n_f64(a10[79], a2.f64[0]);
      v1095 = vmulq_n_f64(v814, a2.f64[0]);
      v815 = vmulq_n_f64(a10[81], a2.f64[0]);
      v816 = vmulq_n_f64(a10[82], a2.f64[0]);
      v817 = vmulq_n_f64(a10[83], a2.f64[0]);
      v818 = vmulq_n_f64(a10[84], a2.f64[0]);
      v819 = vmulq_n_f64(a10[85], a2.f64[0]);
      v820 = vmulq_n_f64(a10[86], a2.f64[0]);
      v821 = vmulq_n_f64(a10[87], a2.f64[0]);
      v822 = vmulq_n_f64(a10[88], a2.f64[0]);
      v823 = vmulq_n_f64(a10[89], a2.f64[0]);
      v824 = vmulq_n_f64(a10[90], a2.f64[0]);
      v825 = vmulq_n_f64(a10[91], a2.f64[0]);
      v826 = vmulq_n_f64(a10[92], a2.f64[0]);
      v827 = vmulq_n_f64(a10[93], a2.f64[0]);
      v828 = vmulq_n_f64(a10[94], a2.f64[0]);
      v829 = vmulq_n_f64(a10[95], a2.f64[0]);
      v830 = vmulq_n_f64(a10[96], a2.f64[0]);
      v831 = vmulq_n_f64(a10[97], a2.f64[0]);
      v832 = vmulq_n_f64(a10[98], a2.f64[0]);
      v833 = vmulq_n_f64(a10[99], a2.f64[0]);
      v834 = vmulq_n_f64(a10[100], a2.f64[0]);
      v835 = vmulq_n_f64(a10[101], a2.f64[0]);
      v836 = vmulq_n_f64(a10[102], a2.f64[0]);
      v837 = vmulq_n_f64(a10[103], a2.f64[0]);
      v838 = vmulq_n_f64(a10[104], a2.f64[0]);
      v839 = vmulq_n_f64(a10[105], a2.f64[0]);
      v840 = vmulq_n_f64(a10[106], a2.f64[0]);
      v841 = vmulq_n_f64(a10[107], a2.f64[0]);
      v842 = vmulq_n_f64(a10[108], a2.f64[0]);
      v843 = vmulq_n_f64(a10[109], a2.f64[0]);
      v844 = vmulq_n_f64(a10[110], a2.f64[0]);
      a10[111] = vmulq_n_f64(a10[111], a2.f64[0]);
      a10[110] = v844;
      a10[108] = v842;
      a10[109] = v843;
      a10[106] = v840;
      a10[107] = v841;
      a10[104] = v838;
      a10[105] = v839;
      a10[102] = v836;
      a10[103] = v837;
      a10[100] = v834;
      a10[101] = v835;
      a10[98] = v832;
      a10[99] = v833;
      a10[96] = v830;
      a10[97] = v831;
      a10[94] = v828;
      a10[95] = v829;
      a10[92] = v826;
      a10[93] = v827;
      a10[90] = v824;
      a10[91] = v825;
      a10[88] = v822;
      a10[89] = v823;
      a10[86] = v820;
      a10[87] = v821;
      a10[84] = v818;
      a10[85] = v819;
      a10[82] = v816;
      a10[83] = v817;
      a10[80] = v1095;
      a10[81] = v815;
      v845 = v1096;
      a10[78] = v1097;
      a10[79] = v845;
      v846 = v1098;
      a10[76] = v1099;
      a10[77] = v846;
      v847 = v1100;
      a10[74] = v1101;
      a10[75] = v847;
      v848 = v1102;
      a10[72] = v1103;
      a10[73] = v848;
      v849 = v1104;
      a10[70] = v1105;
      a10[71] = v849;
      v850 = v1106;
      a10[68] = v1107;
      a10[69] = v850;
      v851 = v1108;
      a10[66] = v1109;
      a10[67] = v851;
      v852 = v1110;
      a10[64] = v1111;
      a10[65] = v852;
      v853 = v1112;
      a10[62] = v1113;
      a10[63] = v853;
      v854 = v1114;
      a10[60] = v1115;
      a10[61] = v854;
      v855 = v1116;
      a10[58] = v1117;
      a10[59] = v855;
      v856 = v1118;
      a10[56] = v1119;
      a10[57] = v856;
      v857 = v1120;
      a10[54] = v1121;
      a10[55] = v857;
      v858 = v1122;
      a10[52] = v1123;
      a10[53] = v858;
      v859 = v1124;
      a10[50] = v1125;
      a10[51] = v859;
      v860 = v1126;
      a10[48] = v1127;
      a10[49] = v860;
      v861 = v1128;
      a10[46] = v1129;
      a10[47] = v861;
      *v14 = v1130;
      a10[112].f64[0] = v1131.f64[0];
      break;
    case 4:
      *(_QWORD *)&v1131.f64[0] = a10;
      v862 = (*(_QWORD *(**)(_BYTE *__return_ptr, float64x2_t *))(*(_QWORD *)&a11->f64[0] + 56))(v1132, a11);
      MEMORY[0x24BDAC7A8](v862);
      memcpy(&v1056[45], v14, 0x438uLL);
      _V17.D[1] = v1056[45].f64[1];
      _V16.D[1] = v1056[60].f64[1];
      _V15.D[1] = v1056[46].f64[1];
      _V14.D[1] = v1056[47].f64[1];
      _V6.D[1] = v1056[61].f64[1];
      _V3.D[1] = v1056[62].f64[1];
      _V4.D[1] = v1056[48].f64[1];
      _V7.D[1] = v1056[63].f64[1];
      _V5.D[1] = v1056[49].f64[1];
      _V1.D[1] = v1056[64].f64[1];
      _V2.D[1] = v1056[50].f64[1];
      _V0.D[1] = v1056[65].f64[1];
      v1124 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[45].f64[0]), *(float64x2_t *)&v1132[120], v1056[45], 1), *(float64x2_t *)&v1132[240], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[49].f64[0]),
                          v1133,
                          v1056[49],
                          1),
                        v1141,
                        v1056[50].f64[0]),
                      v1148,
                      v1056[50],
                      1),
                    v1156,
                    v1056[51].f64[0]),
                  v1163,
                  v1056[51],
                  1),
                v1171,
                v1056[52].f64[0]);
      v1122 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[45].f64[0]), *(float64x2_t *)&v1132[136], v1056[45], 1), *(float64x2_t *)&v1132[256], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[49].f64[0]),
                          v1134,
                          v1056[49],
                          1),
                        v1142,
                        v1056[50].f64[0]),
                      v1149,
                      v1056[50],
                      1),
                    v1157,
                    v1056[51].f64[0]),
                  v1164,
                  v1056[51],
                  1),
                v1172,
                v1056[52].f64[0]);
      v1123 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[52].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[240], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[56].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1141,
                        v1056[57].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1156,
                    v1056[58].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1171,
                v1056[59].f64[1]);
      v1121 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[52].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[256], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[56].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1142,
                        v1056[57].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1157,
                    v1056[58].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1172,
                v1056[59].f64[1]);
      v1120 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[60].f64[0]), *(float64x2_t *)&v1132[120], v1056[60], 1), *(float64x2_t *)&v1132[240], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[64].f64[0]),
                          v1133,
                          v1056[64],
                          1),
                        v1141,
                        v1056[65].f64[0]),
                      v1148,
                      v1056[65],
                      1),
                    v1156,
                    v1056[66].f64[0]),
                  v1163,
                  v1056[66],
                  1),
                v1171,
                v1056[67].f64[0]);
      v1119 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[60].f64[0]), *(float64x2_t *)&v1132[136], v1056[60], 1), *(float64x2_t *)&v1132[256], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[64].f64[0]),
                          v1134,
                          v1056[64],
                          1),
                        v1142,
                        v1056[65].f64[0]),
                      v1149,
                      v1056[65],
                      1),
                    v1157,
                    v1056[66].f64[0]),
                  v1164,
                  v1056[66],
                  1),
                v1172,
                v1056[67].f64[0]);
      v1116 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[67].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[240], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[71].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1141,
                        v1056[72].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1156,
                    v1056[73].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1171,
                v1056[74].f64[1]);
      v1115 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[67].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[256], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[71].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1142,
                        v1056[72].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1157,
                    v1056[73].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1172,
                v1056[74].f64[1]);
      v1104 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[45].f64[0]), *(float64x2_t *)&v1132[152], v1056[45], 1), *(float64x2_t *)&v1132[272], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[49].f64[0]),
                          v1135,
                          v1056[49],
                          1),
                        v1143,
                        v1056[50].f64[0]),
                      v1150,
                      v1056[50],
                      1),
                    v1158,
                    v1056[51].f64[0]),
                  v1165,
                  v1056[51],
                  1),
                v1173,
                v1056[52].f64[0]);
      v1101 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[45].f64[0]), *(float64x2_t *)&v1132[168], v1056[45], 1), *(float64x2_t *)&v1132[288], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[49].f64[0]),
                          v1136,
                          v1056[49],
                          1),
                        v1144,
                        v1056[50].f64[0]),
                      v1151,
                      v1056[50],
                      1),
                    v1159,
                    v1056[51].f64[0]),
                  v1166,
                  v1056[51],
                  1),
                v1174,
                v1056[52].f64[0]);
      v1102 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[52].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[272], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[56].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1143,
                        v1056[57].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1158,
                    v1056[58].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1173,
                v1056[59].f64[1]);
      v1099 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[52].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[288], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[56].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1144,
                        v1056[57].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1159,
                    v1056[58].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1174,
                v1056[59].f64[1]);
      v1095 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[60].f64[0]), *(float64x2_t *)&v1132[152], v1056[60], 1), *(float64x2_t *)&v1132[272], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[64].f64[0]),
                          v1135,
                          v1056[64],
                          1),
                        v1143,
                        v1056[65].f64[0]),
                      v1150,
                      v1056[65],
                      1),
                    v1158,
                    v1056[66].f64[0]),
                  v1165,
                  v1056[66],
                  1),
                v1173,
                v1056[67].f64[0]);
      v1093 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[60].f64[0]), *(float64x2_t *)&v1132[168], v1056[60], 1), *(float64x2_t *)&v1132[288], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[64].f64[0]),
                          v1136,
                          v1056[64],
                          1),
                        v1144,
                        v1056[65].f64[0]),
                      v1151,
                      v1056[65],
                      1),
                    v1159,
                    v1056[66].f64[0]),
                  v1166,
                  v1056[66],
                  1),
                v1174,
                v1056[67].f64[0]);
      v1089 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[67].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[288], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[71].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1144,
                        v1056[72].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1159,
                    v1056[73].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1174,
                v1056[74].f64[1]);
      v1090 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[67].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[272], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[71].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1143,
                        v1056[72].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1158,
                    v1056[73].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1173,
                v1056[74].f64[1]);
      v1105 = *(float64x2_t *)&v1132[304];
      result = &v1132[664];
      v1103 = *(float64x2_t *)&v1132[544];
      v1100 = *(float64x2_t *)&v1132[664];
      v1094 = *(float64x2_t *)&v1132[784];
      v1092 = *(float64x2_t *)&v1132[904];
      v1091 = v1137;
      v1088 = v1145;
      v1087 = v1152;
      v1086 = v1167;
      v1082 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[52].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[304], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[56].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1145,
                        v1056[57].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1160,
                    v1056[58].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1175,
                v1056[59].f64[1]);
      v1083 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[45].f64[0]), *(float64x2_t *)&v1132[184], v1056[45], 1), *(float64x2_t *)&v1132[304], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[49].f64[0]),
                          v1137,
                          v1056[49],
                          1),
                        v1145,
                        v1056[50].f64[0]),
                      v1152,
                      v1056[50],
                      1),
                    v1160,
                    v1056[51].f64[0]),
                  v1167,
                  v1056[51],
                  1),
                v1175,
                v1056[52].f64[0]);
      v1080 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[52].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[320], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[56].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1146,
                        v1056[57].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1161,
                    v1056[58].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1176,
                v1056[59].f64[1]);
      v1081 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[45].f64[0]), *(float64x2_t *)&v1132[200], v1056[45], 1), *(float64x2_t *)&v1132[320], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[49].f64[0]),
                          v1138,
                          v1056[49],
                          1),
                        v1146,
                        v1056[50].f64[0]),
                      v1153,
                      v1056[50],
                      1),
                    v1161,
                    v1056[51].f64[0]),
                  v1168,
                  v1056[51],
                  1),
                v1176,
                v1056[52].f64[0]);
      v1077 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[60].f64[0]), *(float64x2_t *)&v1132[200], v1056[60], 1), *(float64x2_t *)&v1132[320], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[64].f64[0]),
                          v1138,
                          v1056[64],
                          1),
                        v1146,
                        v1056[65].f64[0]),
                      v1153,
                      v1056[65],
                      1),
                    v1161,
                    v1056[66].f64[0]),
                  v1168,
                  v1056[66],
                  1),
                v1176,
                v1056[67].f64[0]);
      v1078 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[60].f64[0]), *(float64x2_t *)&v1132[184], v1056[60], 1), *(float64x2_t *)&v1132[304], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[64].f64[0]),
                          v1137,
                          v1056[64],
                          1),
                        v1145,
                        v1056[65].f64[0]),
                      v1152,
                      v1056[65],
                      1),
                    v1160,
                    v1056[66].f64[0]),
                  v1167,
                  v1056[66],
                  1),
                v1175,
                v1056[67].f64[0]);
      v1075 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[67].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[320], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[71].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1146,
                        v1056[72].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1161,
                    v1056[73].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1176,
                v1056[74].f64[1]);
      v1076 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[67].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[304], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[71].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1145,
                        v1056[72].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1160,
                    v1056[73].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1175,
                v1056[74].f64[1]);
      _D23 = *(_QWORD *)&v1132[232];
      __asm { FMLA            D18, D23, V17.D[1] }
      _V19.D[1] = v1056[53].f64[0];
      __asm
      {
        FMLA            D17, D23, V19.D[1]
        FMLA            D19, D23, V16.D[1]
      }
      _V24.D[1] = v1056[68].f64[0];
      __asm { FMLA            D16, D23, V24.D[1] }
      v1085 = *(float64x2_t *)&v1132[320];
      _D23 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D18, D23, V15.D[1] }
      _V24.D[1] = v1056[54].f64[0];
      __asm
      {
        FMLA            D17, D23, V24.D[1]
        FMLA            D19, D23, V6.D[1]
      }
      _V6.D[1] = v1056[69].f64[0];
      __asm { FMLA            D16, D23, V6.D[1] }
      _D22 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D18, D22, V14.D[1] }
      _V23.D[1] = v1056[55].f64[0];
      __asm
      {
        FMLA            D17, D22, V23.D[1]
        FMLA            D19, D22, V3.D[1]
      }
      _V3.D[1] = v1056[70].f64[0];
      __asm { FMLA            D16, D22, V3.D[1] }
      v1084 = *(float64x2_t *)&v1132[800];
      _D21 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D18, D21, V4.D[1] }
      _V4.D[1] = v1056[56].f64[0];
      __asm
      {
        FMLA            D17, D21, V4.D[1]
        FMLA            D19, D21, V7.D[1]
      }
      _V4.D[1] = v1056[71].f64[0];
      __asm { FMLA            D16, D21, V4.D[1] }
      _D7 = v1140;
      __asm { FMLA            D18, D7, V5.D[1] }
      _V5.D[1] = v1056[57].f64[0];
      __asm
      {
        FMLA            D17, D7, V5.D[1]
        FMLA            D19, D7, V1.D[1]
      }
      _V1.D[1] = v1056[72].f64[0];
      __asm { FMLA            D16, D7, V1.D[1] }
      v1079 = v1146;
      _D5 = v1155;
      __asm { FMLA            D18, D5, V2.D[1] }
      _V2.D[1] = v1056[58].f64[0];
      __asm
      {
        FMLA            D17, D5, V2.D[1]
        FMLA            D19, D5, V0.D[1]
      }
      _V0.D[1] = v1056[73].f64[0];
      __asm { FMLA            D16, D5, V0.D[1] }
      _V1.D[1] = v1056[51].f64[1];
      _D4 = v1170;
      __asm { FMLA            D18, D4, V1.D[1] }
      _V1.D[1] = v1056[59].f64[0];
      __asm { FMLA            D17, D4, V1.D[1] }
      _V1.D[1] = v1056[66].f64[1];
      __asm { FMLA            D19, D4, V1.D[1] }
      _V1.D[1] = v1056[74].f64[0];
      __asm { FMLA            D16, D4, V1.D[1] }
      v1070 = _D18 + v1178 * v1056[52].f64[0];
      v1073 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[52].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[336], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[56].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1147,
                        v1056[57].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1162,
                    v1056[58].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1177,
                v1056[59].f64[1]);
      v1074 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[45].f64[0]), *(float64x2_t *)&v1132[216], v1056[45], 1), *(float64x2_t *)&v1132[336], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[49].f64[0]),
                          v1139,
                          v1056[49],
                          1),
                        v1147,
                        v1056[50].f64[0]),
                      v1154,
                      v1056[50],
                      1),
                    v1162,
                    v1056[51].f64[0]),
                  v1169,
                  v1056[51],
                  1),
                v1177,
                v1056[52].f64[0]);
      v1069 = _D17 + v1178 * v1056[59].f64[1];
      v1072 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[60].f64[0]), *(float64x2_t *)&v1132[216], v1056[60], 1), *(float64x2_t *)&v1132[336], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[64].f64[0]),
                          v1139,
                          v1056[64],
                          1),
                        v1147,
                        v1056[65].f64[0]),
                      v1154,
                      v1056[65],
                      1),
                    v1162,
                    v1056[66].f64[0]),
                  v1169,
                  v1056[66],
                  1),
                v1177,
                v1056[67].f64[0]);
      v1068 = _D19 + v1178 * v1056[67].f64[0];
      v1066 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[67].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[336], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[71].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1147,
                        v1056[72].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1162,
                    v1056[73].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1177,
                v1056[74].f64[1]);
      v1067 = _D16 + v1178 * v1056[74].f64[1];
      _V18.D[1] = v1056[75].f64[1];
      _V20.D[1] = v1056[83].f64[0];
      v1071 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[75].f64[0]), *(float64x2_t *)&v1132[120], v1056[75], 1), *(float64x2_t *)&v1132[240], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[79].f64[0]),
                          v1133,
                          v1056[79],
                          1),
                        v1141,
                        v1056[80].f64[0]),
                      v1148,
                      v1056[80],
                      1),
                    v1156,
                    v1056[81].f64[0]),
                  v1163,
                  v1056[81],
                  1),
                v1171,
                v1056[82].f64[0]);
      v1063 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[75].f64[0]), *(float64x2_t *)&v1132[136], v1056[75], 1), *(float64x2_t *)&v1132[256], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[79].f64[0]),
                          v1134,
                          v1056[79],
                          1),
                        v1142,
                        v1056[80].f64[0]),
                      v1149,
                      v1056[80],
                      1),
                    v1157,
                    v1056[81].f64[0]),
                  v1164,
                  v1056[81],
                  1),
                v1172,
                v1056[82].f64[0]);
      v928 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[82].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[256], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[86].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1142,
                       v1056[87].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1157,
                   v1056[88].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1172,
               v1056[89].f64[1]);
      v1059 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[90].f64[0]), *(float64x2_t *)&v1132[120], v1056[90], 1), *(float64x2_t *)&v1132[240], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[94].f64[0]),
                          v1133,
                          v1056[94],
                          1),
                        v1141,
                        v1056[95].f64[0]),
                      v1148,
                      v1056[95],
                      1),
                    v1156,
                    v1056[96].f64[0]),
                  v1163,
                  v1056[96],
                  1),
                v1171,
                v1056[97].f64[0]);
      v1057 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[82].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[240], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[86].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1141,
                        v1056[87].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1156,
                    v1056[88].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1171,
                v1056[89].f64[1]);
      v1058 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[90].f64[0]), *(float64x2_t *)&v1132[136], v1056[90], 1), *(float64x2_t *)&v1132[256], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[94].f64[0]),
                          v1134,
                          v1056[94],
                          1),
                        v1142,
                        v1056[95].f64[0]),
                      v1149,
                      v1056[95],
                      1),
                    v1157,
                    v1056[96].f64[0]),
                  v1164,
                  v1056[96],
                  1),
                v1172,
                v1056[97].f64[0]);
      _Q14 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[97].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[240], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[360],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[480],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[600],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[720],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[840],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[960],
                           v1056[101].f64[1]),
                         v1133,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1141,
                       v1056[102].f64[1]),
                     v1148,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1156,
                   v1056[103].f64[1]),
                 v1163,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1171,
               v1056[104].f64[1]);
      v930 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[97].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[256], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[101].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1142,
                       v1056[102].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1157,
                   v1056[103].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1172,
               v1056[104].f64[1]);
      v931 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[75].f64[0]), *(float64x2_t *)&v1132[152], v1056[75], 1), *(float64x2_t *)&v1132[272], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[79].f64[0]),
                         v1135,
                         v1056[79],
                         1),
                       v1143,
                       v1056[80].f64[0]),
                     v1150,
                     v1056[80],
                     1),
                   v1158,
                   v1056[81].f64[0]),
                 v1165,
                 v1056[81],
                 1),
               v1173,
               v1056[82].f64[0]);
      _Q11 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[75].f64[0]), *(float64x2_t *)&v1132[168], v1056[75], 1), *(float64x2_t *)&v1132[288], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[79].f64[0]),
                         v1136,
                         v1056[79],
                         1),
                       v1144,
                       v1056[80].f64[0]),
                     v1151,
                     v1056[80],
                     1),
                   v1159,
                   v1056[81].f64[0]),
                 v1166,
                 v1056[81],
                 1),
               v1174,
               v1056[82].f64[0]);
      _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[82].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[272], v1056[83].f64[1]),
                                    *(float64x2_t *)&v1132[392],
                                    *(float64x2_t *)((char *)&v1056[83] + 8),
                                    1),
                                  *(float64x2_t *)&v1132[512],
                                  v1056[84].f64[1]),
                                *(float64x2_t *)&v1132[632],
                                *(float64x2_t *)((char *)&v1056[84] + 8),
                                1),
                              *(float64x2_t *)&v1132[752],
                              v1056[85].f64[1]),
                            *(float64x2_t *)&v1132[872],
                            *(float64x2_t *)((char *)&v1056[85] + 8),
                            1),
                          *(float64x2_t *)&v1132[992],
                          v1056[86].f64[1]),
                        v1135,
                        *(float64x2_t *)((char *)&v1056[86] + 8),
                        1),
                      v1143,
                      v1056[87].f64[1]),
                    v1150,
                    *(float64x2_t *)((char *)&v1056[87] + 8),
                    1),
                  v1158,
                  v1056[88].f64[1]),
                v1165,
                *(float64x2_t *)((char *)&v1056[88] + 8),
                1),
              v1173,
              v1056[89].f64[1]);
      v934 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[82].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[288], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[86].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1144,
                       v1056[87].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1159,
                   v1056[88].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1174,
               v1056[89].f64[1]);
      _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[90].f64[0]), *(float64x2_t *)&v1132[152], v1056[90], 1), *(float64x2_t *)&v1132[272], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[94].f64[0]),
                         v1135,
                         v1056[94],
                         1),
                       v1143,
                       v1056[95].f64[0]),
                     v1150,
                     v1056[95],
                     1),
                   v1158,
                   v1056[96].f64[0]),
                 v1165,
                 v1056[96],
                 1),
               v1173,
               v1056[97].f64[0]);
      v936 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[90].f64[0]), *(float64x2_t *)&v1132[168], v1056[90], 1), *(float64x2_t *)&v1132[288], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[94].f64[0]),
                         v1136,
                         v1056[94],
                         1),
                       v1144,
                       v1056[95].f64[0]),
                     v1151,
                     v1056[95],
                     1),
                   v1159,
                   v1056[96].f64[0]),
                 v1166,
                 v1056[96],
                 1),
               v1174,
               v1056[97].f64[0]);
      _Q30 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[97].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[272], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[392],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[632],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[872],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[101].f64[1]),
                         v1135,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1143,
                       v1056[102].f64[1]),
                     v1150,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1158,
                   v1056[103].f64[1]),
                 v1165,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1173,
               v1056[104].f64[1]);
      v938 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[97].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[288], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[101].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1144,
                       v1056[102].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1159,
                   v1056[103].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1174,
               v1056[104].f64[1]);
      v1065 = *(float64x2_t *)&v1132[560];
      v1180 = &v1056[84].f64[1];
      _Q28 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[75].f64[0]), *(float64x2_t *)&v1132[184], v1056[75], 1), *(float64x2_t *)&v1132[304], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[79].f64[0]),
                         v1137,
                         v1056[79],
                         1),
                       v1145,
                       v1056[80].f64[0]),
                     v1152,
                     v1056[80],
                     1),
                   v1160,
                   v1056[81].f64[0]),
                 v1167,
                 v1056[81],
                 1),
               v1175,
               v1056[82].f64[0]);
      v940 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[75].f64[0]), *(float64x2_t *)&v1132[200], v1056[75], 1), *(float64x2_t *)&v1132[320], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[79].f64[0]),
                         v1138,
                         v1056[79],
                         1),
                       v1146,
                       v1056[80].f64[0]),
                     v1153,
                     v1056[80],
                     1),
                   v1161,
                   v1056[81].f64[0]),
                 v1168,
                 v1056[81],
                 1),
               v1176,
               v1056[82].f64[0]);
      v941 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[82].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[304], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[86].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1145,
                       v1056[87].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1160,
                   v1056[88].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1175,
               v1056[89].f64[1]);
      v942 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[82].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[320], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[86].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1146,
                       v1056[87].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1161,
                   v1056[88].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1176,
               v1056[89].f64[1]);
      v943 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[90].f64[0]), *(float64x2_t *)&v1132[184], v1056[90], 1), *(float64x2_t *)&v1132[304], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[94].f64[0]),
                         v1137,
                         v1056[94],
                         1),
                       v1145,
                       v1056[95].f64[0]),
                     v1152,
                     v1056[95],
                     1),
                   v1160,
                   v1056[96].f64[0]),
                 v1167,
                 v1056[96],
                 1),
               v1175,
               v1056[97].f64[0]);
      v944 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[90].f64[0]), *(float64x2_t *)&v1132[200], v1056[90], 1), *(float64x2_t *)&v1132[320], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[94].f64[0]),
                         v1138,
                         v1056[94],
                         1),
                       v1146,
                       v1056[95].f64[0]),
                     v1153,
                     v1056[95],
                     1),
                   v1161,
                   v1056[96].f64[0]),
                 v1168,
                 v1056[96],
                 1),
               v1176,
               v1056[97].f64[0]);
      v945 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[97].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[304], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[101].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1145,
                       v1056[102].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1160,
                   v1056[103].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1175,
               v1056[104].f64[1]);
      v946 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[97].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[320], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[101].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1146,
                       v1056[102].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1161,
                   v1056[103].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1176,
               v1056[104].f64[1]);
      _D16 = *(_QWORD *)&v1132[232];
      __asm
      {
        FMLA            D0, D16, V18.D[1]
        FMLA            D1, D16, V20.D[1]
      }
      _V17.D[1] = v1056[90].f64[1];
      __asm { FMLA            D4, D16, V17.D[1] }
      _V17.D[1] = v1056[98].f64[0];
      __asm { FMLA            D5, D16, V17.D[1] }
      _V2.D[1] = v1056[76].f64[1];
      _D7 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D0, D7, V2.D[1] }
      _V2.D[1] = v1056[84].f64[0];
      __asm { FMLA            D1, D7, V2.D[1] }
      _V2.D[1] = v1056[91].f64[1];
      __asm { FMLA            D4, D7, V2.D[1] }
      _V2.D[1] = v1056[99].f64[0];
      __asm { FMLA            D5, D7, V2.D[1] }
      _V18.D[1] = v1056[77].f64[1];
      _D17 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[85].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[92].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[100].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[78].f64[1];
      _D17 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[86].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[93].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[101].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[79].f64[1];
      _D17 = v1140;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[87].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[94].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[102].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[80].f64[1];
      _D17 = v1155;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[88].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[95].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[103].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V7.D[1] = v1056[81].f64[1];
      _D18 = v1170;
      __asm { FMLA            D0, D18, V7.D[1] }
      _V7.D[1] = v1056[89].f64[0];
      __asm { FMLA            D1, D18, V7.D[1] }
      _V7.D[1] = v1056[96].f64[1];
      __asm { FMLA            D4, D18, V7.D[1] }
      _V7.D[1] = v1056[104].f64[0];
      __asm { FMLA            D5, D18, V7.D[1] }
      v1008 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[75].f64[0]), *(float64x2_t *)&v1132[216], v1056[75], 1), *(float64x2_t *)&v1132[336], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[79].f64[0]),
                          v1139,
                          v1056[79],
                          1),
                        v1147,
                        v1056[80].f64[0]),
                      v1154,
                      v1056[80],
                      1),
                    v1162,
                    v1056[81].f64[0]),
                  v1169,
                  v1056[81],
                  1),
                v1177,
                v1056[82].f64[0]);
      v1060 = _D0 + v1178 * v1056[82].f64[0];
      v1009 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[82].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[336], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[86].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1147,
                        v1056[87].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1162,
                    v1056[88].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1177,
                v1056[89].f64[1]);
      v1061 = _D1 + v1178 * v1056[89].f64[1];
      v1010 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[90].f64[0]), *(float64x2_t *)&v1132[216], v1056[90], 1), *(float64x2_t *)&v1132[336], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[94].f64[0]),
                          v1139,
                          v1056[94],
                          1),
                        v1147,
                        v1056[95].f64[0]),
                      v1154,
                      v1056[95],
                      1),
                    v1162,
                    v1056[96].f64[0]),
                  v1169,
                  v1056[96],
                  1),
                v1177,
                v1056[97].f64[0]);
      v1062 = _D4 + v1178 * v1056[97].f64[0];
      v1011 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[97].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[336], v1056[98].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[98] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[99].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[99] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[100].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[100] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[101].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[101] + 8),
                          1),
                        v1147,
                        v1056[102].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[102] + 8),
                      1),
                    v1162,
                    v1056[103].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[103] + 8),
                  1),
                v1177,
                v1056[104].f64[1]);
      v1064 = _D5 + v1178 * v1056[104].f64[1];
      v1012 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[105].f64[0]), *(float64x2_t *)&v1132[120], v1056[105], 1), *(float64x2_t *)&v1132[240], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[109].f64[0]),
                          v1133,
                          v1056[109],
                          1),
                        v1141,
                        v1056[110].f64[0]),
                      v1148,
                      v1056[110],
                      1),
                    v1156,
                    v1056[111].f64[0]),
                  v1163,
                  v1056[111],
                  1),
                v1171,
                v1056[112].f64[0]);
      v1013 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[105].f64[0]), *(float64x2_t *)&v1132[136], v1056[105], 1), *(float64x2_t *)&v1132[256], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[109].f64[0]),
                          v1134,
                          v1056[109],
                          1),
                        v1142,
                        v1056[110].f64[0]),
                      v1149,
                      v1056[110],
                      1),
                    v1157,
                    v1056[111].f64[0]),
                  v1164,
                  v1056[111],
                  1),
                v1172,
                v1056[112].f64[0]);
      v1014 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[105].f64[0]), *(float64x2_t *)&v1132[152], v1056[105], 1), *(float64x2_t *)&v1132[272], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[109].f64[0]),
                          v1135,
                          v1056[109],
                          1),
                        v1143,
                        v1056[110].f64[0]),
                      v1150,
                      v1056[110],
                      1),
                    v1158,
                    v1056[111].f64[0]),
                  v1165,
                  v1056[111],
                  1),
                v1173,
                v1056[112].f64[0]);
      v1015 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[105].f64[0]), *(float64x2_t *)&v1132[168], v1056[105], 1), *(float64x2_t *)&v1132[288], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[109].f64[0]),
                          v1136,
                          v1056[109],
                          1),
                        v1144,
                        v1056[110].f64[0]),
                      v1151,
                      v1056[110],
                      1),
                    v1159,
                    v1056[111].f64[0]),
                  v1166,
                  v1056[111],
                  1),
                v1174,
                v1056[112].f64[0]);
      v1016 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[105].f64[0]), *(float64x2_t *)&v1132[184], v1056[105], 1);
      v1017 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[105].f64[0]), *(float64x2_t *)&v1132[200], v1056[105], 1);
      v1018 = v1115;
      *(float64x2_t *)((char *)v14 + 360) = v1116;
      *(float64x2_t *)((char *)v14 + 376) = v1018;
      v1019 = v1089;
      *(float64x2_t *)((char *)v14 + 392) = v1090;
      *(float64x2_t *)((char *)v14 + 408) = v1019;
      v1020 = v1075;
      *(float64x2_t *)((char *)v14 + 424) = v1076;
      *(float64x2_t *)((char *)v14 + 440) = v1020;
      *(float64x2_t *)((char *)v14 + 456) = v1066;
      *(float64x2_t *)((char *)v14 + 600) = v1057;
      *(float64x2_t *)((char *)v14 + 616) = v928;
      *(float64x2_t *)((char *)v14 + 840) = _Q14;
      *(float64x2_t *)((char *)v14 + 856) = v930;
      *(float64x2_t *)((char *)v14 + 632) = _Q8;
      *(float64x2_t *)((char *)v14 + 648) = v934;
      *(float64x2_t *)((char *)v14 + 872) = _Q30;
      *(float64x2_t *)((char *)v14 + 888) = v938;
      *(float64x2_t *)((char *)v14 + 664) = v941;
      *(float64x2_t *)((char *)v14 + 680) = v942;
      v1021 = v1131.f64[0];
      v1022 = v1119;
      *(float64x2_t *)(*(_QWORD *)&v1131.f64[0] + 960) = v1120;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 976) = v1022;
      v1023 = v1093;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 992) = v1095;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1008) = v1023;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1040) = v1077;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1024) = v1078;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1456) = v1058;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1440) = v1059;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1488) = v936;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1472) = _Q10;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1520) = v944;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1504) = v943;
      *(float64x2_t *)((char *)v14 + 904) = v945;
      *(float64x2_t *)((char *)v14 + 920) = v946;
      *(float64x2_t *)((char *)v14 + 696) = v1009;
      *(float64x2_t *)((char *)v14 + 936) = v1011;
      v1024 = v1122;
      *v14 = v1124;
      v14[1] = v1024;
      *(float64x2_t *)((char *)v14 + 136) = v1121;
      *(float64x2_t *)((char *)v14 + 120) = v1123;
      v1025 = v1101;
      v14[2] = v1104;
      v14[3] = v1025;
      *(float64x2_t *)((char *)v14 + 168) = v1099;
      *(float64x2_t *)((char *)v14 + 152) = v1102;
      v1026 = v1081;
      v14[4] = v1083;
      v14[5] = v1026;
      *(float64x2_t *)((char *)v14 + 200) = v1080;
      *(float64x2_t *)((char *)v14 + 184) = v1082;
      v14[6] = v1074;
      v14[7].f64[0] = v1070;
      *(float64x2_t *)((char *)v14 + 216) = v1073;
      v14[14].f64[1] = v1069;
      v14[21] = v1072;
      v14[22].f64[0] = v1068;
      v14[29].f64[1] = v1067;
      _Q22 = *(float64x2_t *)&v1132[680];
      v1028 = v1063;
      v1029 = *(float64x2_t *)&v1132[920];
      v14[30] = v1071;
      v14[31] = v1028;
      v1030 = v1138;
      v14[32] = v931;
      v14[33] = _Q11;
      _Q3 = v1153;
      _Q6 = v1168;
      v14[34] = _Q28;
      v14[35] = v940;
      v1033 = *(float64x2_t *)&v1132[216];
      v1034 = *(float64x2_t *)&v1132[696];
      v14[36] = v1008;
      v1035 = *(float64x2_t *)&v1132[936];
      v944.f64[0] = v1061;
      v14[37].f64[0] = v1060;
      v1036 = v1139;
      v14[44].f64[1] = v944.f64[0];
      v1037 = v1154;
      v14[51] = v1010;
      v1038 = v1169;
      _Q10.f64[0] = *(float64_t *)&v1132[232];
      v1039 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1017, v1085, v1056[106].f64[0]), *(float64x2_t *)&v1132[440], v1056[106], 1), v1065, v1056[107].f64[0]), _Q22, v1056[107], 1), v1084, v1056[108].f64[0]),
                        v1029,
                        v1056[108],
                        1),
                      *(float64x2_t *)&v1132[1040],
                      v1056[109].f64[0]),
                    v1030,
                    v1056[109],
                    1),
                  v1079,
                  v1056[110].f64[0]),
                _Q3,
                v1056[110],
                1);
      _Q3.f64[0] = *(float64_t *)&v1132[472];
      _Q22.f64[1] = v1056[106].f64[1];
      _Q30.f64[1] = v1056[105].f64[1];
      v1040 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1016, v1105, v1056[106].f64[0]), *(float64x2_t *)&v1132[424], v1056[106], 1), v1103, v1056[107].f64[0]), v1100, v1056[107],
                                  1),
                                v1094,
                                v1056[108].f64[0]),
                              v1092,
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[109].f64[0]),
                          v1091,
                          v1056[109],
                          1),
                        v1088,
                        v1056[110].f64[0]),
                      v1087,
                      v1056[110],
                      1),
                    v1160,
                    v1056[111].f64[0]),
                  v1086,
                  v1056[111],
                  1),
                v1175,
                v1056[112].f64[0]);
      v1041 = *(float64x2_t *)&v1132[576];
      v1042 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1039, v1161, v1056[111].f64[0]), _Q6, v1056[111], 1), v1176, v1056[112].f64[0]);
      _Q6.f64[0] = *(float64_t *)&v1132[712];
      v1043 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[105].f64[0]), v1033, v1056[105], 1);
      v1044 = *(float64x2_t *)&v1132[816];
      _Q28.f64[0] = *(float64_t *)&v1132[952];
      v1045 = vmlaq_laneq_f64(vmlaq_n_f64(v1043, *(float64x2_t *)&v1132[336], v1056[106].f64[0]), *(float64x2_t *)&v1132[456], v1056[106], 1);
      v1046 = *(float64x2_t *)&v1132[1056];
      __asm { FMLA            D8, D10, V30.D[1] }
      _Q30.f64[0] = v1140;
      __asm { FMLA            D8, D3, V22.D[1] }
      v1047 = v1147;
      _Q22.f64[0] = v1155;
      v1048 = v1162;
      _Q11.f64[0] = v1170;
      v931.f64[0] = v1178;
      v1049 = v1177;
      v14[52].f64[0] = v1062;
      _Q14.f64[1] = v1056[107].f64[1];
      v1050 = vmlaq_n_f64(v1045, v1041, v1056[107].f64[0]);
      _Q31 = v1056[108];
      v1052 = vmlaq_laneq_f64(v1050, v1034, v1056[107], 1);
      _Q18 = v1056[110];
      v1034.f64[0] = v1056[112].f64[0];
      __asm { FMLA            D8, D6, V14.D[1] }
      _Q6 = v1056[109];
      _Q14 = v1056[111];
      v14[59].f64[1] = v1064;
      v14[60] = v1012;
      v14[61] = v1013;
      v14[62] = v1014;
      v14[63] = v1015;
      v14[65] = v1042;
      v14[64] = v1040;
      __asm
      {
        FMLA            D8, D28, V31.D[1]
        FMLA            D8, D30, V6.D[1]
        FMLA            D8, D22, V18.D[1]
      }
      v14[66] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1052, v1044, _Q31.f64[0]), v1035, _Q31, 1), v1046, _Q6.f64[0]), v1036, _Q6, 1), v1047, _Q18.f64[0]), v1037, _Q18, 1), v1048, _Q14.f64[0]),
                    v1038,
                    _Q14,
                    1),
                  v1049,
                  v1034.f64[0]);
      __asm { FMLA            D8, D11, V14.D[1] }
      v14[67].f64[0] = _Q8.f64[0] + v931.f64[0] * v1034.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

